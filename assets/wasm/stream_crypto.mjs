// Compiles a dart2wasm-generated main module from `source` which can then
// instantiatable via the `instantiate` method.
//
// `source` needs to be a `Response` object (or promise thereof) e.g. created
// via the `fetch()` JS API.
export async function compileStreaming(source) {
  const builtins = {builtins: ['js-string']};
  return new CompiledApp(
      await WebAssembly.compileStreaming(source, builtins), builtins);
}

// Compiles a dart2wasm-generated wasm modules from `bytes` which is then
// instantiatable via the `instantiate` method.
export async function compile(bytes) {
  const builtins = {builtins: ['js-string']};
  return new CompiledApp(await WebAssembly.compile(bytes, builtins), builtins);
}

// DEPRECATED: Please use `compile` or `compileStreaming` to get a compiled app,
// use `instantiate` method to get an instantiated app and then call
// `invokeMain` to invoke the main function.
export async function instantiate(modulePromise, importObjectPromise) {
  var moduleOrCompiledApp = await modulePromise;
  if (!(moduleOrCompiledApp instanceof CompiledApp)) {
    moduleOrCompiledApp = new CompiledApp(moduleOrCompiledApp);
  }
  const instantiatedApp = await moduleOrCompiledApp.instantiate(await importObjectPromise);
  return instantiatedApp.instantiatedModule;
}

// DEPRECATED: Please use `compile` or `compileStreaming` to get a compiled app,
// use `instantiate` method to get an instantiated app and then call
// `invokeMain` to invoke the main function.
export const invoke = (moduleInstance, ...args) => {
  moduleInstance.exports.$invokeMain(args);
}

class CompiledApp {
  constructor(module, builtins) {
    this.module = module;
    this.builtins = builtins;
  }

  // The second argument is an options object containing:
  // `loadDeferredWasm` is a JS function that takes a module name matching a
  //   wasm file produced by the dart2wasm compiler and returns the bytes to
  //   load the module. These bytes can be in either a format supported by
  //   `WebAssembly.compile` or `WebAssembly.compileStreaming`.
  async instantiate(additionalImports, {loadDeferredWasm, loadDynamicModule} = {}) {
    let dartInstance;

    // Prints to the console
    function printToConsole(value) {
      if (typeof dartPrint == "function") {
        dartPrint(value);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(value);
        return;
      }
      if (typeof print == "function") {
        print(value);
        return;
      }

      throw "Unable to print message: " + js;
    }

    // A special symbol attached to functions that wrap Dart functions.
    const jsWrappedDartFunctionSymbol = Symbol("JSWrappedDartFunction");

    function finalizeWrapper(dartFunction, wrapped) {
      wrapped.dartFunction = dartFunction;
      wrapped[jsWrappedDartFunctionSymbol] = true;
      return wrapped;
    }

    // Imports
    const dart2wasm = {
            _7: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._7(f,arguments.length,x0) }),
      _8: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._8(f,arguments.length,x0) }),
      _37: x0 => new Array(x0),
      _39: x0 => x0.length,
      _41: (x0,x1) => x0[x1],
      _42: (x0,x1,x2) => x0[x1] = x2,
      _45: (x0,x1,x2) => new DataView(x0,x1,x2),
      _47: x0 => new Int8Array(x0),
      _48: (x0,x1,x2) => new Uint8Array(x0,x1,x2),
      _49: x0 => new Uint8Array(x0),
      _51: x0 => new Uint8ClampedArray(x0),
      _53: x0 => new Int16Array(x0),
      _55: x0 => new Uint16Array(x0),
      _57: x0 => new Int32Array(x0),
      _59: x0 => new Uint32Array(x0),
      _61: x0 => new Float32Array(x0),
      _63: x0 => new Float64Array(x0),
      _70: (decoder, codeUnits) => decoder.decode(codeUnits),
      _71: () => new TextDecoder("utf-8", {fatal: true}),
      _72: () => new TextDecoder("utf-8", {fatal: false}),
      _73: (s) => +s,
      _74: Date.now,
      _76: s => new Date(s * 1000).getTimezoneOffset() * 60,
      _77: s => {
        if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(s)) {
          return NaN;
        }
        return parseFloat(s);
      },
      _78: () => {
        let stackString = new Error().stack.toString();
        let frames = stackString.split('\n');
        let drop = 2;
        if (frames[0] === 'Error') {
            drop += 1;
        }
        return frames.slice(drop).join('\n');
      },
      _99: s => JSON.stringify(s),
      _100: s => printToConsole(s),
      _101: (o, p, r) => o.replaceAll(p, () => r),
      _102: (o, p, r) => o.replace(p, () => r),
      _103: Function.prototype.call.bind(String.prototype.toLowerCase),
      _104: s => s.toUpperCase(),
      _105: s => s.trim(),
      _108: (string, times) => string.repeat(times),
      _109: Function.prototype.call.bind(String.prototype.indexOf),
      _111: (string, token) => string.split(token),
      _112: Object.is,
      _120: (a, s, e) => a.slice(s, e),
      _123: a => a.length,
      _125: (a, i) => a[i],
      _128: (o, offsetInBytes, lengthInBytes) => {
        var dst = new ArrayBuffer(lengthInBytes);
        new Uint8Array(dst).set(new Uint8Array(o, offsetInBytes, lengthInBytes));
        return new DataView(dst);
      },
      _129: (o, start, length) => new Uint8Array(o.buffer, o.byteOffset + start, length),
      _130: (o, start, length) => new Int8Array(o.buffer, o.byteOffset + start, length),
      _131: (o, start, length) => new Uint8ClampedArray(o.buffer, o.byteOffset + start, length),
      _132: (o, start, length) => new Uint16Array(o.buffer, o.byteOffset + start, length),
      _133: (o, start, length) => new Int16Array(o.buffer, o.byteOffset + start, length),
      _134: (o, start, length) => new Uint32Array(o.buffer, o.byteOffset + start, length),
      _135: (o, start, length) => new Int32Array(o.buffer, o.byteOffset + start, length),
      _138: (o, start, length) => new Float32Array(o.buffer, o.byteOffset + start, length),
      _139: (o, start, length) => new Float64Array(o.buffer, o.byteOffset + start, length),
      _140: (t, s) => t.set(s),
      _141: l => new DataView(new ArrayBuffer(l)),
      _142: (o) => new DataView(o.buffer, o.byteOffset, o.byteLength),
      _144: o => o.buffer,
      _145: o => o.byteOffset,
      _146: Function.prototype.call.bind(Object.getOwnPropertyDescriptor(DataView.prototype, 'byteLength').get),
      _147: (b, o) => new DataView(b, o),
      _148: (b, o, l) => new DataView(b, o, l),
      _149: Function.prototype.call.bind(DataView.prototype.getUint8),
      _150: Function.prototype.call.bind(DataView.prototype.setUint8),
      _151: Function.prototype.call.bind(DataView.prototype.getInt8),
      _152: Function.prototype.call.bind(DataView.prototype.setInt8),
      _153: Function.prototype.call.bind(DataView.prototype.getUint16),
      _154: Function.prototype.call.bind(DataView.prototype.setUint16),
      _155: Function.prototype.call.bind(DataView.prototype.getInt16),
      _156: Function.prototype.call.bind(DataView.prototype.setInt16),
      _157: Function.prototype.call.bind(DataView.prototype.getUint32),
      _158: Function.prototype.call.bind(DataView.prototype.setUint32),
      _159: Function.prototype.call.bind(DataView.prototype.getInt32),
      _160: Function.prototype.call.bind(DataView.prototype.setInt32),
      _165: Function.prototype.call.bind(DataView.prototype.getFloat32),
      _166: Function.prototype.call.bind(DataView.prototype.setFloat32),
      _167: Function.prototype.call.bind(DataView.prototype.getFloat64),
      _168: Function.prototype.call.bind(DataView.prototype.setFloat64),
      _170: () => ({}),
      _171: (x0,x1) => new Worker(x0,x1),
      _173: (x0,x1,x2) => x0.addEventListener(x1,x2),
      _175: (x0,x1) => x0.postMessage(x1),
      _176: (x0,x1,x2) => x0.removeEventListener(x1,x2),
      _182: x0 => globalThis.postMessage(x0),
      _183: x0 => globalThis.cryptoJsHandler = x0,
      _184: x0 => globalThis.cryptoJsActivation = x0,
      _185: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._185(f,arguments.length,x0) }),
      _186: f => finalizeWrapper(f, function() { return dartInstance.exports._186(f,arguments.length) }),
      _187: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._187(f,arguments.length,x0) }),
      _188: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._188(f,arguments.length,x0) }),
      _189: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._189(f,arguments.length,x0) }),
      _190: f => finalizeWrapper(f, function(x0) { return dartInstance.exports._190(f,arguments.length,x0) }),
      _191: x0 => globalThis.serviceWorkerListener_ = x0,
      _192: () => globalThis.serviceWorkerListener_,
      _193: x0 => globalThis.serviceErrorListener_ = x0,
      _194: () => globalThis.serviceErrorListener_,
      _212: o => Object.keys(o),
      _213: (ms, c) =>
      setTimeout(() => dartInstance.exports.$invokeCallback(c),ms),
      _214: (handle) => clearTimeout(handle),
      _217: (c) =>
      queueMicrotask(() => dartInstance.exports.$invokeCallback(c)),
      _237: (x0,x1,x2,x3,x4,x5) => ({method: x0,headers: x1,body: x2,credentials: x3,redirect: x4,signal: x5}),
      _238: (x0,x1) => globalThis.fetch(x0,x1),
      _239: (x0,x1) => x0.get(x1),
      _240: f => finalizeWrapper(f, function(x0,x1,x2) { return dartInstance.exports._240(f,arguments.length,x0,x1,x2) }),
      _241: (x0,x1) => x0.forEach(x1),
      _242: x0 => x0.abort(),
      _243: () => new AbortController(),
      _244: x0 => x0.getReader(),
      _245: x0 => x0.read(),
      _246: x0 => x0.cancel(),
      _382: x0 => x0.runtime,
      _386: () => globalThis.chrome,
      _388: () => globalThis.browser,
      _444: x0 => x0.id,
      _543: () => globalThis.window,
      _553: (x0,x1) => x0.fetch(x1),
      _609: x0 => x0.text(),
      _615: (x0,x1) => x0.type = x1,
      _633: x0 => x0.data,
      _699: (s, m) => {
        try {
          return new RegExp(s, m);
        } catch (e) {
          return String(e);
        }
      },
      _700: (x0,x1) => x0.exec(x1),
      _701: (x0,x1) => x0.test(x1),
      _704: o => o === undefined,
      _706: o => typeof o === 'function' && o[jsWrappedDartFunctionSymbol] === true,
      _708: o => {
        const proto = Object.getPrototypeOf(o);
        return proto === Object.prototype || proto === null;
      },
      _709: o => o instanceof RegExp,
      _710: (l, r) => l === r,
      _711: o => o,
      _712: o => o,
      _713: o => o,
      _714: b => !!b,
      _715: o => o.length,
      _717: (o, i) => o[i],
      _718: f => f.dartFunction,
      _719: () => ({}),
      _720: () => [],
      _725: (o, p) => o[p],
      _726: (o, p, v) => o[p] = v,
      _727: (o, m, a) => o[m].apply(o, a),
      _729: o => String(o),
      _730: (p, s, f) => p.then(s, f),
      _731: o => {
        if (o === undefined) return 1;
        var type = typeof o;
        if (type === 'boolean') return 2;
        if (type === 'number') return 3;
        if (type === 'string') return 4;
        if (o instanceof Array) return 5;
        if (ArrayBuffer.isView(o)) {
          if (o instanceof Int8Array) return 6;
          if (o instanceof Uint8Array) return 7;
          if (o instanceof Uint8ClampedArray) return 8;
          if (o instanceof Int16Array) return 9;
          if (o instanceof Uint16Array) return 10;
          if (o instanceof Int32Array) return 11;
          if (o instanceof Uint32Array) return 12;
          if (o instanceof Float32Array) return 13;
          if (o instanceof Float64Array) return 14;
          if (o instanceof DataView) return 15;
        }
        if (o instanceof ArrayBuffer) return 16;
        return 17;
      },
      _736: (jsArray, jsArrayOffset, wasmArray, wasmArrayOffset, length) => {
        const getValue = dartInstance.exports.$wasmI8ArrayGet;
        for (let i = 0; i < length; i++) {
          jsArray[jsArrayOffset + i] = getValue(wasmArray, wasmArrayOffset + i);
        }
      },
      _737: (jsArray, jsArrayOffset, wasmArray, wasmArrayOffset, length) => {
        const setValue = dartInstance.exports.$wasmI8ArraySet;
        for (let i = 0; i < length; i++) {
          setValue(wasmArray, wasmArrayOffset + i, jsArray[jsArrayOffset + i]);
        }
      },
      _738: (jsArray, jsArrayOffset, wasmArray, wasmArrayOffset, length) => {
        const getValue = dartInstance.exports.$wasmI16ArrayGet;
        for (let i = 0; i < length; i++) {
          jsArray[jsArrayOffset + i] = getValue(wasmArray, wasmArrayOffset + i);
        }
      },
      _740: (jsArray, jsArrayOffset, wasmArray, wasmArrayOffset, length) => {
        const getValue = dartInstance.exports.$wasmI32ArrayGet;
        for (let i = 0; i < length; i++) {
          jsArray[jsArrayOffset + i] = getValue(wasmArray, wasmArrayOffset + i);
        }
      },
      _742: (jsArray, jsArrayOffset, wasmArray, wasmArrayOffset, length) => {
        const getValue = dartInstance.exports.$wasmF32ArrayGet;
        for (let i = 0; i < length; i++) {
          jsArray[jsArrayOffset + i] = getValue(wasmArray, wasmArrayOffset + i);
        }
      },
      _744: (jsArray, jsArrayOffset, wasmArray, wasmArrayOffset, length) => {
        const getValue = dartInstance.exports.$wasmF64ArrayGet;
        for (let i = 0; i < length; i++) {
          jsArray[jsArrayOffset + i] = getValue(wasmArray, wasmArrayOffset + i);
        }
      },
      _746: x0 => new ArrayBuffer(x0),
      _749: x0 => x0.index,
      _751: x0 => x0.flags,
      _752: x0 => x0.multiline,
      _753: x0 => x0.ignoreCase,
      _754: x0 => x0.unicode,
      _755: x0 => x0.dotAll,
      _756: (x0,x1) => x0.lastIndex = x1,
      _761: x0 => x0.random(),
      _762: (x0,x1) => x0.getRandomValues(x1),
      _763: () => globalThis.crypto,
      _764: () => globalThis.Math,
      _765: Function.prototype.call.bind(Number.prototype.toString),
      _766: Function.prototype.call.bind(BigInt.prototype.toString),
      _767: Function.prototype.call.bind(Number.prototype.toString),
      _5223: x0 => x0.signal,
      _7063: x0 => x0.value,
      _7065: x0 => x0.done,
      _7767: x0 => x0.url,
      _7769: x0 => x0.status,
      _7771: x0 => x0.statusText,
      _7772: x0 => x0.headers,
      _7773: x0 => x0.body,

    };

    const baseImports = {
      dart2wasm: dart2wasm,
      Math: Math,
      Date: Date,
      Object: Object,
      Array: Array,
      Reflect: Reflect,
            s: [
        "Attempt to execute code removed by Dart AOT compiler (TFA)",
"Could not call main",
"null",
"",
" (",
")",
": ",
"Instance of '",
"'",
"Object?",
"Object",
"dynamic",
"void",
"Invalid top type kind",
"Invalid argument",
"(s)",
"0.0",
"-0.0",
"1.0",
"-1.0",
"NaN",
"-Infinity",
"Infinity",
"e",
".0",
"Infinity or NaN toInt",
"Unsupported operation: ",
"Invalid value",
"Type '",
"' is not a subtype of type '",
" in type cast",
"Null",
"Never",
": Not less than or equal to ",
": Not greater than or equal to ",
": Not in inclusive range ",
"..",
": Valid value range is empty",
": Only valid value is ",
"RangeError",
"minified:Class",
"<",
", ",
">",
"?",
"bool",
"BoxedBool",
"JSStringImpl",
"_BottomType",
"_TopType",
"_InterfaceTypeParameterType",
"_FunctionTypeParameterType",
"_FutureOrType",
"_InterfaceType",
"_AbstractFunctionType",
"_FunctionType",
"_AbstractRecordType",
"_RecordType",
"DefaultMap",
"_ConstMap",
"CompactLinkedIdentityHashMap",
"CompactLinkedCustomHashMap",
"DefaultSet",
"_ConstSet",
"Record_3",
"Record_2",
"Record_4",
"Record_5",
"Record_6",
"Record_7",
"Record_8",
"Record_9",
"Endian",
"UnmodifiableSetView",
"UnmodifiableMapView",
"CastMap",
"ListMapView",
"_IdentityHashMap",
"CodeUnits",
"GrowableList",
"ModifiableFixedLengthList",
"ImmutableList",
"_HashMapKeyIterator",
"_HashMapValueIterator",
"_HashMapEntry",
"_Invocation",
"_CompactKeysIterable",
"_CompactValuesIterable",
"_CompactEntriesIterable",
"_CompactIterableImmutable",
"CastIterable",
"_EfficientLengthCastIterable",
"CastList",
"SubListIterable",
"MappedListIterable",
"_ListIndicesIterable",
"ReversedListIterable",
"EmptyIterable",
"_HashMapKeyIterable",
"_HashMapValueIterable",
"MappedIterable",
"EfficientLengthMappedIterable",
"WhereIterable",
"ExpandIterable",
"SkipIterable",
"EfficientLengthSkipIterable",
"WhereTypeIterable",
"_AllMatchesIterable",
"_SyncStarIterable",
"StringAllMatchesIterable",
"MapEntry",
"LateError",
"_AssertionErrorImpl",
"ArgumentError",
"IndexError",
"NoSuchMethodError",
"UnsupportedError",
"UnimplementedError",
"StateError",
"ConcurrentModificationError",
"_TypeError",
"_JavaScriptError",
"_TypeCheckVerificationError",
"JsonUnsupportedObjectError",
"JsonCyclicError",
"_StringStackTrace",
"IntegerDivisionByZeroException",
"StringBuffer",
"FormatException",
"_Uri",
"_DataUri",
"UriData",
"_SimpleUri",
"_BigIntImpl",
"_BigIntMontgomeryReduction",
"_BigIntClassicReduction",
"_Closure",
"_NamedParameterValue",
"_Exception",
"_NamedParameter",
"_ModuleRtt",
"_Environment",
"_SuspendState",
"_SyncStarIterator",
"ArgsResponseType",
"StreamCryptoArgsType",
"MessageArgsStreamMethod",
"StringEncoding",
"StreamIsolateMethod",
"WorkerMessageType",
"APPIsolate",
"EllipticCurveTypes",
"EncodeType",
"Base58Alphabets",
"RequestServiceType",
"ServiceResponseType",
"HTTPClientType",
"HTTPResponseType",
"DigestAuthHeadersAlg",
"DigestAuthQop",
"ProviderAuthType",
"MoneroBlockTrackingStatus",
"MoneroBlockTrackerType",
"MoneroSyncBlockResponseType",
"LayoutAction",
"AppPlatform",
"HTTPRequestType",
"ChainType",
"DemonRequestType",
"MoneroRequestApiType",
"HttpWorkerMode",
"ServiceProtocol",
"APIServiceStatus",
"PoolInfoExtent",
"DaemonRequestBlocksInfo",
"Duration",
"DateTime",
"pragma",
"_RootZone",
"JSSyntaxRegExp",
"_TypedListIterator",
"_JSStringImplParser",
"_NumberBuffer",
"_JsonListener",
"_Utf8Decoder",
"_Utf8Encoder",
"_JsonStringStringifier",
"AsciiEncoder",
"AsciiDecoder",
"Base64Encoder",
"Base64Decoder",
"JsonEncoder",
"JsonDecoder",
"Utf8Encoder",
"Utf8Decoder",
"Base64Codec",
"AsciiCodec",
"Utf8Codec",
"JsonCodec",
"_ByteCallbackSink",
"_Base64Decoder",
"_Base64Encoder",
"_SecureRandom",
"_Random",
"NullRejectionException",
"_FfiInlineArray",
"_FfiStructLayout",
"_Compound",
"Pointer",
"_OneShotTimer",
"_AsyncSuspendState",
"_ZoneFunction",
"_HandlerEventSink",
"_EventSinkWrapper",
"_DoneStreamSubscription",
"_PendingEvents",
"_DelayedDone",
"_DelayedData",
"_DelayedError",
"_ControllerSubscription",
"_SinkTransformerStreamSubscription",
"_StreamSinkWrapper",
"_AsyncStreamController",
"_SyncStreamController",
"_StreamHandlerTransformer",
"StringAllMatchesIterator",
"ByteStream",
"_ControllerStream",
"_EmptyStream",
"_BoundSinkStream",
"_AsyncCallbackEntry",
"_Future",
"_FutureListener",
"_AsyncCompleter",
"_SyncCompleter",
"TimeoutException",
"_AsyncBroadcastStreamController",
"AsyncError",
"StringMatch",
"_GrowableListIterator",
"_FixedSizeListIterator",
"_JSFloat32ArrayIterator",
"_JSFloat64ArrayIterator",
"_JSUint8ArrayIterator",
"_JSInt8ArrayIterator",
"_JSUint16ArrayIterator",
"_JSInt16ArrayIterator",
"_JSUint32ArrayIterator",
"_JSInt32ArrayIterator",
"JSDataViewImpl",
"JSUint8ArrayImpl",
"JSInt8ArrayImpl",
"JSUint8ClampedArrayImpl",
"JSUint16ArrayImpl",
"JSInt16ArrayImpl",
"JSUint32ArrayImpl",
"JSInt32ArrayImpl",
"JSFloat32ArrayImpl",
"JSFloat64ArrayImpl",
"BoxedDouble",
"JSArrayImplIterator",
"JSArrayImpl",
"_AllMatchesIterator",
"_MatchImplementation",
"JSValue",
"WasmArrayConstCache",
"WasmConstCache",
"ClassID",
"I8ByteData",
"_I16ByteData",
"_I32ByteData",
"_F32ByteData",
"_F64ByteData",
"_I8ByteBuffer",
"_I16ByteBuffer",
"_I32ByteBuffer",
"_F32ByteBuffer",
"_F64ByteBuffer",
"I8List",
"U8List",
"U16List",
"U32List",
"F32List",
"F64List",
"_SlowU8List",
"_SlowU32List",
"Symbol",
"WhereTypeIterator",
"EmptyIterator",
"SkipIterator",
"ExpandIterator",
"WhereIterator",
"MappedIterator",
"ListIterator",
"CastIterator",
"TypeTest",
"SentinelValue",
"_CompactIteratorImmutable",
"_CompactEntriesIterator",
"_CompactIterator",
"BoxedInt",
"JSArrayBufferImpl",
"MoneroStorageTypes",
"MoneroStorageBinary",
"BrowserCryptoWorker",
"DecodeStorageResult",
"_WorkerConnector",
"DaemonBlockOutputIndicesResponse",
"DaemonPoolTxInfoResponse",
"StreamIsolateMessageController",
"DaemonTxOutputIndicesResponse",
"DaemonBlockCompleteEntryResponse",
"DaemonTxBlobEntryResponse",
"MoneroStorageEntryNull",
"MoneroStorageEntryPromitive",
"MoneroStorageEntryList",
"MoneroStorageEntrySection",
"MoneroSection",
"MoneroStorage",
"DaemonBaseResponse",
"DaemonGetBlockBinResponse",
"MoneroTxinType",
"TxExtraTypes",
"EcdhTuple",
"EcdhInfoVersion",
"RCTType",
"MoneroAccountAddress",
"CtKey",
"MoneroBlock",
"MoneroAccountIndex",
"MoneroAccountKeys",
"MoneroLockedOutput",
"RCTNull",
"RCTCLSAG",
"RCTBulletproof2",
"RCTBulletproofPlus",
"RCTSimple",
"RCTFull",
"RCTBulletproof",
"TxExtraPublicKey",
"TxExtraNonce",
"TxExtraAdditionalPubKeys",
"TxinToKey",
"TxinToScriptHash",
"TxinToScript",
"TxinGen",
"TxoutToScript",
"TxoutToScriptHash",
"TxoutToKey",
"TxoutToTaggedKey",
"RCTSignature",
"MoneroV1Signature",
"EcdhInfoV2",
"EcdhInfoV1",
"MoneroTxout",
"MoneroTransaction",
"RctSigPrunableBulletproofPlus",
"RctSigPrunableRangeSigs",
"RctSigPrunableCLSAG",
"RctSigPrunableBulletproof2",
"RctSigPrunableBulletproof",
"BulletproofPlus",
"Bulletproof",
"Clsag",
"MgSig",
"BoroSig",
"RangeSig",
"MoneroVariantDecodeResult",
"ApiRequest",
"MoneroHTTPService",
"FailedHttpIsolateInitialization",
"StreamSplitter",
"ValueResult",
"ErrorResult",
"FutureGroup",
"MoneroOutputType",
"APIServiceTracker",
"MoneroClient",
"_WorkerConnection",
"TxOutTargetType",
"ServicesHTTPCaller",
"Response",
"StreamedResponseV2",
"Request",
"StreamedRequest",
"RetryClient",
"BrowserClient",
"ClientException",
"LayoutByteWriter",
"LayoutByteReader",
"MoneroCoinConf",
"XmrAddrEncoder",
"MessageArgsStreamId",
"MessageArgsStreamResponse",
"MessageArgsException",
"MessageArgsMessage",
"MessageArgsStream",
"StreamRequestMoneroBlockTracking",
"BasicProviderAuthenticated",
"DigestProviderAuthenticated",
"MoneroBlockTrackingFailed",
"MoneroDefaultBlockTrackingInfo",
"MoneroViewPrimaryAccountDetails",
"MoneroSyncAccountsInfos",
"MoneroSyncAccountIndexInfo",
"MoneroSyncAccountsRequestInfos",
"MoneroSyncAccountResponse",
"MoneroSyncFailedResponse",
"MoneroNetwork",
"MoneroAccountKeysType",
"CborBytesTracker",
"FloatUtils",
"FloatLength",
"WebHTTPServiceWorker",
"HTTPWorkerMessageCompleter",
"HTTPWorkerResponseSuccess",
"HTTPWorkerResponseError",
"_WebIsolateInitialData",
"LazyVariantModel",
"LayoutDecodeResult",
"CustomLayout",
"VariantOffsetLayout",
"OffsetLayout",
"IntegerLayout",
"BigIntLayout",
"UnionLayoutDiscriminatorLayout",
"SequenceLayout",
"StructLayout",
"RawBytesLayout",
"ConstantLayout",
"PaddingLayout",
"LazyUnion",
"LazyVariantLayout",
"LazyStructLayout",
"MoneroBigIntVarInt",
"MoneroIntVarInt",
"LazyLayout",
"ConditionalLazyLayout",
"CoinNames",
"CoinParams",
"CoinConf",
"Nist256p1HybridPublicKey",
"Sr25519PublicKey",
"Nist256p1PublicKey",
"MoneroPrivateKey",
"MoneroPublicKey",
"Ed25519KholawPublicKey",
"Ed25519Blake2bPublicKey",
"Secp256k1PublicKey",
"MoneroSubaddress",
"MoneroComputeKey",
"MoneroAccount",
"MoneroCoins",
"XmrAddrDecoder",
"XmrAddressDecodeResult",
"XmrAddressType",
"CborMimeValue",
"CborUndefinedValue",
"CborNullValue",
"CborRegxpValue",
"CborSetValue",
"CborStringValue",
"CborIndefiniteStringValue",
"CborUriValue",
"CborMapValue",
"CborListValue",
"CborSafeIntValue",
"AES",
"ChaCha20Poly1305",
"CTR",
"SHA256",
"SHA512",
"SHA512256",
"BLAKE2b",
"MD5",
"Keccack",
"SHAKE256",
"Poly1305",
"FortunaPRNG",
"Tuple",
"MoneroAPIProvider",
"WorkerNoneEncryptedMessage",
"WorkerEncryptedMessage",
"AESLib",
"ECDSAPublicKey",
"HTTPWorkerRequest",
"SchnorrkelPublicKey",
"CryptoException",
"SquareRootError",
"JacobiError",
"ArgumentException",
"MessageException",
"RPCError",
"CborException",
"LayoutException",
"DartMoneroPluginException",
"MoneroCryptoException",
"MoneroSerializationException",
"AddressConverterException",
"_Hex",
"BigRational",
"SynchronizedLock",
"StreamValue",
"_FetchedBlocks",
"WalletException",
"CurveFp",
"CurveED",
"EDPoint",
"RistrettoPoint",
"ProjectiveECCPoint",
"EDDSAPrivateKey",
"EDDSAPublicKey",
"FieldElement",
"GroupElementP2",
"GroupElementP1P1",
"GroupElementP3",
"GroupElementCached",
"GroupElementPrecomp",
"Ed25519PublicKey",
"ServiceSuccessRespose",
"ServiceErrorResponse",
"MoneroRequestDetails",
"CborIntValue",
"CborFloatValue",
"DaemonRequestGetBlocksBin",
"DaemonRequestOnGetBlockHash",
"MoneroProvider",
"ApiProviderException",
"MethodResult",
"CborDecimalFracValue",
"CborStringDateValue",
"CborEpochFloatValue",
"CborEpochIntValue",
"CborTagValue",
"CborDynamicBytesValue",
"CborBytesValue",
"CborBoleanValue",
"CborBigIntValue",
"CborBigFloatValue",
"CborBaseUrlValue",
"CborBase64Types",
"_DecodeCborResult",
"_Client",
"_CachedClient",
"_DigestAuthCachedClient",
"_DigestAuthClient",
"HttpClientManager",
"DigestAuthHeaders",
"HTTPCallerResponse",
"HTTPWorkerMessage",
"WasmAnyRef",
"WasmEqRef",
"WasmStructRef",
"WasmArrayRef",
"WasmArray",
"ImmutableWasmArray",
"WasmExternRef",
"WasmFuncRef",
"WasmFunction",
"WasmI8",
"WasmI16",
"WasmI32",
"WasmI64",
"WasmF32",
"WasmF64",
"WasmVoid",
"WasmTable",
"num",
"double",
"int",
"_Type",
"_HashFieldBase",
"_HashBase",
"Int16List",
"ByteData",
"Int8List",
"Uint8List",
"Uint8ClampedList",
"Uint16List",
"Int32List",
"Uint32List",
"Float32List",
"Float64List",
"ByteBuffer",
"Function",
"String",
"Record",
"_TypedFloatList",
"TypedDataList",
"TypedData",
"_TypedIntList",
"_UnmodifiableSetMixin",
"SetBase",
"MapView",
"_UnmodifiableMapMixin",
"MapBase",
"UnmodifiableMapBase",
"_HashMap",
"ListBase",
"UnmodifiableListBase",
"WasmListBase",
"_ModifiableList",
"LinkedHashSet",
"LinkedHashMap",
"_HashMapIterator",
"HashMap",
"Iterable",
"_CastIterableBase",
"_CastListBase",
"EfficientLengthIterable",
"ListIterable",
"_HashMapIterable",
"Iterator",
"List",
"Map",
"Error",
"AssertionError",
"TypeError",
"_Error",
"Pattern",
"Match",
"Invocation",
"RegExp",
"RegExpMatch",
"_SetIterable",
"Set",
"Sink",
"StackTrace",
"StringSink",
"Type",
"Uri",
"_PlatformUri",
"_BigIntReduction",
"_TypeUniverse",
"Exception",
"_Enum",
"WorkerMode",
"Enum",
"Comparable",
"BigInt",
"_ListIterable",
"EventSink",
"_Zone",
"_EventDispatch",
"_ChunkedJsonParserState",
"_ChunkedJsonParser",
"_JsonStringifier",
"Converter",
"_UnicodeSubsetEncoder",
"_UnicodeSubsetDecoder",
"Codec",
"Encoding",
"ChunkedConversionSink",
"ByteConversionSink",
"Random",
"RangeErrorUtils",
"IndexErrorUtils",
"_FfiAbiSpecificMapping",
"Struct",
"Union",
"SizedNativeType",
"NativeType",
"_Timer",
"_JSEventLoop",
"_DoubleListMixin",
"_TypedDoubleListMixin",
"Zone",
"ZoneDelegate",
"Timer",
"_DelayedEvent",
"_BufferingStreamSubscription",
"_BroadcastSubscription",
"_TypedListCommonOperationsMixin",
"_EventSink",
"_AddStreamState",
"_StreamControllerAddStreamState",
"_AsyncStreamControllerDispatch",
"_SyncStreamControllerDispatch",
"_StreamController",
"_StreamControllerBase",
"_StreamControllerLifecycle",
"SynchronousStreamController",
"StreamController",
"StreamTransformerBase",
"_StreamSinkTransformer",
"StreamTransformer",
"_IntListMixin",
"_TypedIntListMixin",
"StreamSink",
"StreamConsumer",
"StreamSubscription",
"Stream",
"StreamView",
"_StreamImpl",
"_AsyncRun",
"_Completer",
"Completer",
"Future",
"_BroadcastStreamController",
"StringUncheckedOperationsBase",
"_DoubleArrayIteratorBase",
"_UnmodifiableIntListMixin",
"_IntArrayIteratorBase",
"JSArrayBase",
"JSIntegerArrayBase",
"UnmodifiableJSUint8Array",
"JSFloatArrayBase",
"WasmTypedDataBase",
"ByteDataBase",
"ByteBufferBase",
"_I64ByteBuffer",
"WasmI8ArrayBase",
"WasmI16ArrayBase",
"_WasmI32ArrayBase",
"_WasmF32ArrayBase",
"_WasmF64ArrayBase",
"_SlowListBase",
"Lists",
"Sort",
"UnmodifiableListMixin",
"FixedLengthListMixin",
"IterableElementError",
"HideEfficientLengthIterable",
"SystemHash",
"_SetCreateIndexMixin",
"_ImmutableLinkedHashSetMixin",
"_LinkedHashMapMixin",
"_LinkedHashSetMixin",
"_MapCreateIndexMixin",
"_ImmutableLinkedHashMapMixin",
"_CustomEqualsAndHashCode",
"_IdenticalAndIdentityHashCode",
"_OperatorEqualsAndHashCode",
"_EqualsAndHashCode",
"MoneroStorageContainer",
"IsolateCryptoWoker",
"MoneroStorageFormatValidator",
"MoneroStorageSerializer",
"MoneroStorageEntry",
"PlatformMethods",
"RCTGeneratorUtils",
"MoneroSerialization",
"MoneroAddress",
"MoneroBlockheader",
"MoneroVariantSerialization",
"MoneroBaseAccountKeys",
"MoneroOutput",
"RCTSignatureBase",
"TxExtra",
"MoneroTxin",
"TxoutTarget",
"MoneroTxSignatures",
"EcdhInfo",
"MoneroTransactionPrefix",
"RctSigPrunable",
"ClsagPrunable",
"MgSigPrunable",
"BulletproofPrunable",
"MoneroLayoutConst",
"HTTPService",
"Result",
"MoneroServiceProvider",
"MoneroCrypto",
"RCT",
"CryptoWokerImpl",
"BaseServiceProtocol",
"NetworkClient",
"FailedIsolateInitialization",
"BaseResponseWithUrl",
"BaseResponse",
"StreamedResponse",
"BaseRequest",
"BaseClient",
"Client",
"DoubleCoder",
"CoinConfig",
"BlockchainAddressEncoder",
"CborMessageResponseArgs",
"RequestableMessage",
"CryptoStreamMessageArgs",
"StreamArgsRequestable",
"StreamArgsCompleter",
"IsolateStreamRequest",
"ProviderAuthenticated",
"MoneroBlockTrackingInfo",
"ChainTransaction",
"MoneroWalletTransaction",
"MoneroSyncBlocksResponse",
"NetworkCoinParams",
"MoneroNetworkParams",
"BlockchainAddressDecoder",
"AddrKeyValidator",
"AddrDecUtils",
"MoneroTransactionHelper",
"APIUtils",
"CryptoCoins",
"HTTPServiceWorker",
"DigestAuthenticatedUtils",
"HTTPWorkerResponse",
"Layout",
"ExternalLayout",
"ExternalOffsetLayout",
"BaseIntiger",
"UnionDiscriminatorLayout",
"BaseLazyLayout",
"MoneroConf",
"_XmrAddrUtils",
"IPrivateKey",
"IPublicKey",
"CborString",
"AEAD",
"BlockCipher",
"ChaCha20",
"Hash",
"SerializableHash",
"HashState",
"SHA256State",
"SHA512State",
"SH1State",
"Blake2bConfig",
"Blake2bState",
"_Keccack",
"SHAKE",
"HashBytesState",
"BytesUtils",
"CompareUtils",
"HashCodeGenerator",
"StringUtils",
"APIProvider",
"WalletNetwork",
"WalletMoneroNetwork",
"WorkerMessage",
"Curves",
"Ed25519Utils",
"RistrettoUtils",
"IntUtils",
"_KeyUtils",
"BlockchainUtilsException",
"BigintUtils",
"UUID",
"Equatable",
"StreamListenable",
"CborObject",
"CborNumeric",
"CborSerializable",
"WalletExceptionConst",
"Curve",
"AbstractPoint",
"ECDSAUtils",
"CryptoOps",
"Base58Encoder",
"Base58Decoder",
"Base58XmrConst",
"Base58XmrEncoder",
"Base58XmrDecoder",
"QuickCrypto",
"LayoutSerializationUtils",
"BaseServiceResponse",
"BaseServiceRequestParams",
"BaseServiceRequest",
"MoneroDaemonRequestParam",
"BaseProvider",
"BaseServiceProvider",
"ServiceProviderUtils",
"AppException",
"MethodUtils",
"Cancelable",
"StrUtils",
"PlatformUtils",
"_CborDate",
"CborUtils",
"HttpImpl",
"_CachedClientImpl",
"_DigestAuthClientImpl",
"HTTPCaller",
"LayoutConst",
"_WasmBase",
"T",
"true",
"false",
"JavaScriptError",
"[",
"]",
"...",
"[]",
"Type argument substitution not supported for ",
"Type parameter should have been substituted already.",
"(",
"{",
" ",
"}",
"FutureOr",
"required ",
"Null check operator used on a null value",
"Index out of range",
": index must not be negative",
": no indices are valid",
": index should be less than ",
"Concurrent modification during iteration: ",
".",
"Unhandled dartifyRaw type case: ",
"Invalid hex bytes",
"0",
"1",
"2",
"3",
"4",
"5",
"6",
"7",
"8",
"9",
"a",
"b",
"c",
"d",
"f",
"A",
"B",
"C",
"D",
"E",
"F",
"[]=",
"Invalid bytes",
" at index ",
"index",
"(...)",
"MapEntry(",
"newEntries",
"max",
"Must be positive and <= 2^32",
"Division resulted in non-finite value",
"type '",
"' is not a subtype of ",
"' of '",
"{...}",
"ChaCha20Poly1305 needs a 32-byte key",
"value",
"Size is too large!",
"skipCount",
"Too few elements",
"Bad state: ",
"CTR: counter overflow",
"AES: invalid source block size",
"AES: invalid destination block size",
"AES: encryption key is not available",
"_counter",
"Field '",
"' has not been initialized.",
"LateInitializationError: ",
"_buffer",
"CTR: iv length must be equal to cipher block size",
"' has already been initialized.",
"AES: wrong key size (must be 16, 24, or 32)",
"AES: initialized with different key size",
"_keyLen",
"_key",
"' has been assigned during initialization.",
"SHA3: squeezing before padAndPermute",
"blockSize",
"other",
"%",
"+",
"-",
"bigInt",
"00000000",
"0000",
"00",
"_lastQuoRemDigits",
"_lastRemUsed",
"_lastQuoRemUsed",
"Cannot modify an unmodifiable list",
"shift-amount must be positive ",
"_lastRem_nsh",
"Must be a platform BigInt",
"NoSuchMethodError: method not found: '",
"'\n",
"Receiver: ",
"\n",
"Arguments: [",
"key",
"Symbol(\"",
"\")",
":",
"s",
"@",
",",
"=",
"start",
"end",
"count",
"No element",
"SHA3: can't update because hash was finished",
"SHA3: incorrect capacity",
"Too few arguments passed. Expected 0 or more, got ",
" instead.",
"Function?",
"buffer",
"byteOffset",
"Closure: ",
"onError",
"Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
"Cannot complete a future with itself",
"The error handler of Future.then must return a value of the returned future's type",
"The error handler of Future.catchError must return a value of the future's type",
"sourceResult",
"data_verification_failed",
"Future already completed",
"_stackTrace=",
"IntegerDivisionByZeroException._stackTrace",
"_stackTrace",
"nonEncrypted",
"WorkerMessageType.",
"encrypted",
"ChaCha20Poly1305: incorrect nonce length",
"ChaCha20Poly1305: incorrect destination length",
"Poly1305 was finished",
"iterable",
"ChaCha: key size must be 32 bytes",
"ChaCha: destination is shorter than source",
"ChaCha nonce must be 8 or 12 bytes",
"ChaCha nonce with counter must be 16 bytes",
"ChaCha: counter overflow",
"cbor encoder not found for type ",
"_absSubSetSign",
"_absAndNotSetSign",
"isNegative",
"_digits",
"Expected integer value, but was not integer.",
"g",
"i",
"o",
"body",
"call",
"Type argument '",
"' is not a ",
"subtype of type parameter bound '",
"???",
"authenticated",
"headers",
"client",
"uri",
"t",
"POST",
"post",
"cached",
"single",
"HTTPClientType.",
"HTTPRequestType.",
"digest",
"_",
"The implementation cannot handle very large operands (was: ",
").",
"Exception: ",
"www-authenticate",
"unsuported_digest_auth_qop",
"invalid_request",
"Digest ",
"invalid_dgiest_auth_headers",
"^(.*?)=(.*)$",
"\"",
"nonce",
"qop",
"realm",
"algorithm",
"opaque",
"md5",
"MD5-sess",
"md5Sess",
"SHA-256",
"sha256",
"SHA-256-sess",
"sha256Sess",
"SHA-512",
"sha512",
"SHA-512-sess",
"sha512Sess",
"SHA-512-256",
"sha512256",
"SHA-512-256-sess",
"sha512256Sess",
"orElse",
"DigestAuthHeadersAlg.",
"unsuported_digest_auth_algorithm",
"auth",
"auth-int",
"authInt",
"DigestAuthQop.",
"m",
"u",
"Illegal RegExp pattern (",
" (at line ",
", character ",
")\n",
" (at character ",
"^\n",
" (at offset ",
"RegExp/",
"/",
"|()",
"Authorization",
"Digest username=\"",
"\", realm=\"",
"\", nonce=\"",
"\", uri=\"",
"\", ",
"nc=",
", cnonce=\"",
"\", response=\"",
"\", algorithm=",
", qop=",
", opaque=",
"SHA512: can't update because hash was finished.",
"SHA256: can't update because hash was finished.",
"sess",
"utf8",
"base64",
"base64UrlSafe",
"string",
"Contains invalid characters.",
"Missing padding character",
"Invalid length, must be multiple of four",
"Invalid encoding before padding",
"Invalid character",
"Invalid padding character",
"StringEncoding.",
"radix",
"ProviderAuthType.",
"retries",
"_clientToken",
"onRetry",
"response",
"responseType",
"timeout",
"type",
"url",
"current",
"GET",
"get",
"api_http_timeout_error",
"api_http_client_error",
"android",
"web",
"binary",
"json",
"map",
"listOfMap",
"invalid_request_type",
"Invalid data encountered during JSON conversion.",
"data",
"Invalid json casting. expected: ",
" got: ",
"Unterminated string",
"Unexpected character",
"Unexpected end of input",
"Unterminated number literal",
"+NaN",
"-NaN",
"Positive input exceeds the limit of integer",
"Negative input exceeds the limit of integer",
"Invalid number",
"Invalid radix-",
" number",
"Missing expected digit",
"Control character in string",
"Invalid unicode escape",
"Unrecognized string escape",
"ï»¿",
"Invalid hex digit",
"bytes",
"Invalid value in input: ",
"input",
"Not a byte value at index ",
": 0x",
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
"codeUnits",
"Invalid UTF-8 byte",
"Missing extension byte",
"Unexpected extension byte",
"Overlong encoding",
"Out of unicode range",
"Encoded surrogate",
"Unfinished UTF-8 octet sequence",
"HTTPResponseType.",
"AppPlatform.",
"Future not completed",
"TimeoutException after ",
"Invalid status code ",
"Invalid content length ",
"from",
"chunk",
"computation",
"The type parameter is not nullable",
"HTTP request failed. Client is already closed.",
"content-length",
"include",
"same-origin",
"follow",
"error",
"Invalid content-length header [",
"].",
"TypeError: ",
"\\",
"/..",
"file",
"file://",
"file:///",
"http",
"80",
"https",
"443",
"Invalid empty scheme",
"Invalid port",
"hashCode",
"_text",
"//",
"#",
"Radix ",
" not in range 2..36",
"package",
"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000϶\u0000Єϴ ϴ϶ǶǶ϶ϼǴϿϿքϿϿϿϿϿϿϿϿϿϿהǴ\u0000Ǵ\u0000ԄׄϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿЀ\u0000ЀȀϷȀϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿϿȀȀȀϷ\u0000",
"%25",
"unreachable",
"0123456789ABCDEF",
"&",
"^[\\-\\.0-9A-Z_a-z~]*$",
"/.",
"./",
"%3A",
"Missing end `]` to match `[` in host",
"25",
"address is too short",
"invalid start colon.",
"only one wildcard `::` is allowed",
"too few parts",
"expected a part after last `:`",
"an address with a wildcard must have less than 7 parts",
"an address without a wildcard must contain exactly 8 parts",
"invalid character",
"IPv4 address should contain exactly 4 parts",
"each part must be in the range 0..255",
"Illegal IPv4 address, ",
"an IPv6 part can only contain a maximum of 4 hex digits",
"each part must be in the range of `0x0..0xFFFF`",
"Illegal IPv6 address, ",
"ZoneID should not contain % anymore",
"Scheme not starting with alphabetic character",
"Illegal scheme character",
"á\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001ááá\u0001áá\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001áãáá\u0001á\u0001áÍ\u0001á\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u000e\u0003\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\"\u0001á\u0001á¬á\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001ááá\u0001áá\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001áêáá\u0001á\u0001áÍ\u0001á\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\n\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\"\u0001á\u0001á¬ëëëëëëëëëëëÍëëëë¬ë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëDëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u0012D\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬å\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005ååå\u0005åDååååååååååååååååååååååååååèåå\u0005å\u0005åÍ\u0005å\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005f\u0005å\u0005å¬å\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005ååå\u0005åDååååååååååååååååååååååååååååå\u0005å\u0005åÍ\u0005å\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005\u0005f\u0005å\u0005å¬ççççççççççççççççççççççççççççççççDçççççççççççççççççççççççççççççççççÍçççççççççççç\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007ççççç¬ççççççççççççççççççççççççççççççççDçççççççççççççççççççççççççççççççççÍççççççççççç\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007\u0007ççççç¬\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\u0005\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëêëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u0010ê\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬ë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëêëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u0012\n\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬ë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëêëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\n\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬ì\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\fììì\fìì\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\fìììì\fì\fìÍ\fì\f\f\f\f\f\f\f\f\fì\f\f\f\f\f\f\f\f\f\fì\fì\fì\fí\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\rííí\ríí\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\ríííí\rí\ríí\rí\r\r\r\r\r\r\r\r\rí\r\r\r\r\r\r\r\r\r\rí\rí\rí\rá\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001ááá\u0001áá\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001áêáá\u0001á\u0001áÍ\u0001á\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u000fê\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\"\u0001á\u0001á¬á\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001ááá\u0001áá\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001áéáá\u0001á\u0001áÍ\u0001á\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\t\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\"\u0001á\u0001á¬ë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëêëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u0011ê\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬ë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëéëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\t\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬ë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëêëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u0013ê\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬ë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëëë\u000bëë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bëêëë\u000bë\u000bëÍ\u000bë\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bê\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000b\u000bë\u000bë\u000bë¬õ\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015õõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõ\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015õõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõõ\u0015õ\u0015\u0015õ\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015\u0015õõõõõõ",
"Invalid MIME type",
"Expecting '='",
"data:",
"Invalid base64 data",
"Invalid base64 encoding length ",
"==",
"Invalid base64 padding, padded length must be multiple of four, ",
"is ",
"Invalid base64 padding, '=' not at the end",
"Invalid base64 padding, more than two '=' characters",
"Stream has already been listened to.",
"dispatch",
"subscription",
"pendingEvents",
"handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace.",
"No events after a done.",
"Cannot add event after closing",
"Cannot add event while adding a stream",
"Too few arguments passed. Expected 2 or more, got ",
"Too few arguments passed. Expected 1 or more, got ",
"undefined",
"Promise was rejected with a value of `",
"`.",
"push",
"Can't finalize a finalized Request.",
"ClientException: ",
", uri=",
"Can't modify a finalized Request.",
"method",
"Not a valid method",
"^[\\w!#%&'*+\\-.^`|~]+$",
"sink",
"id",
"message",
"params",
"clientType",
"data_casting_failed",
"main",
"module",
"wasm",
"isWasm",
"isHttp",
"statusCode",
"result",
"length",
"assets/wasm/wasm.mjs",
"assets/",
"assets/wasm/http.js",
"assets/wasm/http.mjs",
"HttpWorkerMode.",
"separate",
"APPIsolate.",
"Z",
"000",
"overflow bytes",
"_isLess",
"Offset (",
") must be a multiple of ",
"_decodFloat",
"Value is to large for encoding as CborInteger",
"Could not parse BigInt",
"^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$",
"exception",
"ArgsResponseType.",
"streamRequest",
"streamArgs",
"stream_does_not_exists",
"MessageArgsMessage:",
"defaultTracker",
"status",
"processId",
"currentHeight",
"invalid_serialization_data",
"complete",
"pending",
"MoneroBlockTrackingStatus.",
"decoding cbor required object, bytes or hex. no value provided for decoding.",
"invalid or unsuported cbor tag major: ",
"invalid or unsuported cbor tag",
"invalid bigFloat array length",
"invalid cbornumeric",
"Invalid simpleOrFloatTags",
"microsecond",
"millisecondsSinceEpoch",
"Time including microseconds is outside valid range",
"Input byte array must be exactly 2 bytes long for Float16",
"0*$",
"Invalid RFC3339 format: ",
"Time out of range",
"Invalid date format",
"^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d+))?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$",
"Length is to large for type int.",
"Invalid additional info for int: ",
"decode length casting faild.",
"expected",
"Value too large to fit in a Dart int",
"invalid input for parse bigint",
"0x",
"^(0x|0X)?[0-9A-Fa-f]+$",
"MoneroBlockTrackerType.",
"MessageArgsStreamMethod.",
"close",
"done",
"streamId",
"Stream is already closed",
"_transformerSink",
"Sink is closed",
"success",
"MoneroSyncBlockResponseType.",
"source",
"major",
"minor",
"property",
"fields",
"fields cannot contain unnamed layout",
"indeterminate span.",
"Struct Source not found.",
"stack",
"indeterminate span",
"layout",
"sign",
"span",
"span must not exceed 6 bytes",
"Invalid layout span.",
"Cannot add to an unmodifiable list",
"Cannot add to a fixed-length list",
"Negative value cannot be encoded with unsigned layout.",
"bitLength",
"Value exceeds the maximum size for encoding with this layout.",
"startHeight",
"total",
"majorVersion",
"minorVersion",
"timestamp",
"hash",
"minerTx",
"txHashes",
"Invalid Unsigned int 32.",
"Invalid Unsigned BigInt 64.",
"18446744073709551615",
"tx hash",
"Incorrect ",
"array length.",
"Incorrect list of bytes.",
"Key not found.",
"signature",
"version",
"unlock_time",
"vin",
"vout",
"extera",
"Incorrect value.",
"v1",
"v2",
"Invalid MoneroTxSignatures json struct.",
"rctSigPrunable",
"Invalid list casting. only use `valueAsList` method for list casting.",
"rctTypeNull",
"rctTypeFull",
"rctTypeSimple",
"rctTypeBulletproof",
"rctTypeBulletproof2",
"rctTypeCLSAG",
"rctTypeBulletproofPlus",
"Invalid RCTSignature.",
"ecdhInfo",
"txnFee",
"outPk",
"pseudoOuts",
"Invalid length. ",
"amount",
"mask",
"The map must be empty, but data was received.",
"RCTType.",
"Invalid RCTSig type.",
"Invalid variant layout. only use enum layout to deserialize with `MoneroVariantSerialization.deserialize` method.",
"Invalid RCT type.",
"rangeSig",
"mgs",
"cc",
"Clsag s",
"ss",
"Incorrect list of list bytes.",
"asig",
"ci",
"RangeSig ci",
"s0",
"s1",
"ee",
"BoroSig s0",
"BoroSig s1",
"BoroSig ee",
"clsag",
"bulletproof",
"t1",
"t2",
"taux",
"mu",
"l",
"r",
"a_",
"Bulletproof a",
"Bulletproof s",
"Bulletproof t1",
"Bulletproof t2",
"Bulletproof taux",
"Bulletproof v",
"Bulletproof a_",
"Bulletproof b",
"c1",
"bulletproofPlus",
"a1",
"r1",
"d1",
"BulletproofPlus v",
"target",
"Invalid txout target.",
"view_tag",
"Invalid Unsigned int 8.",
"keys",
"script",
"Invalid Txout target type.",
"Invalid Txin.",
"k_image",
"key_offsets",
"Incorrect list of big integer.",
"prev",
"prevout",
"sigset",
"height",
"Invalid Txin type.",
"Invalid map casting. only use `asMap` method for casting Map<String,dynamic>.",
"Invalid bytes casting. only use `valueAsList` method for bytes.",
"values",
">=",
"count must be non-negative integer or an unsigned integer ExternalLayout",
"*",
"action",
"remindBytes",
"sourceOrResult",
"decode",
"LayoutAction.",
"encode",
"unable to determine layout.",
"variant mismatch",
"unable to determine span for unrecognized variant",
"unable to determine source layout.",
"variant lacks property",
"encoded variant overruns containing union",
"discriminator",
"sources",
"unable to infer source variant",
"variant",
"The length must be a positive integer.",
"The length can be a positive integer or an unsigned integer ExternalLayout",
"encode requires a source with length ",
"sourceLength",
"Encoding overruns bytes",
"aa",
"_absAddSetSign",
"invalid hex bytes",
"Hex input string must be divisible by two",
"Incorrect characters for hex decoding",
"Invalid transaction output index.",
"locked",
"MoneroOutputType.",
"{amount: ",
" status: ",
" accountIndex: ",
"Exponent must not be negative: ",
"Denominator cannot be 0.",
"Bad index",
"Mismatched sizes of publickey and ECDH",
"bad ECDH mask.",
"bad ECDH amount.",
"amount decoded incorrectly, will be unable to spend",
"comprossed",
"raw",
"uncompressed",
"hybrid",
"EncodeType.",
"Modulus must be strictly positive: ",
"Not coprime",
"cDigits",
"Local '",
"aDigits",
"The other point is on a different curve.",
"invalid key length",
"Inconsistent hybrid point encoding",
"Malformed compressed point encoding",
" has no square root modulo ",
"p is not prime",
"No suitable 'b' found.",
"Cannot remove from a fixed-length list",
"n must be larger than 2.",
"n must be odd.",
"bigExponent",
"bigModulus",
"exponent must be positive: ",
"modulus must be strictly positive: ",
"|",
"shift",
">>",
"shiftAmount",
"negNormModulusDigits",
"k",
"AffinePointt length doesn't match the curve.",
"57896044618658097711785492504343953926634992332820282019728792003956564819949",
"37095705934669439343138083508754565189542113879843219016388785533085940283555",
"7237005577332262213973186563042994240857116359379907606001950938285454250989",
"The provided scalar exceeds the allowed range.",
"scCheck",
" operation failed. invalid bytes length.",
"15112221349535400772501151409588531511454012693041857206046113283949847762202",
"46316835694926478169428394003475163141307993866256225615783033603165251855960",
"46827403850823179245072216630277197565144205554125654976674165829533817101731",
"V2",
"EcdhInfo casting failed.",
"commitment_mask",
"EcdhInfoVersion.",
"V1",
"RCTNULL does not support public key information.",
"RCTNULL does not support ECDH information.",
"MoneroTxSignatures casting failed.",
"derivationToScalar",
" failed. incorrect key 32 length.",
"derivePublicKey",
"Index does not exists.",
"Invalid minor index (",
"Invalid major index (",
"invalid private key length",
"Invalid monero private key.",
"ed25519Monero",
"EllipticCurveTypes.",
"Incorrect size of private key, expected: ",
" or ",
" bytes",
"ed25519Kholaw",
"ed25519",
"ed25519Blake2b",
"Incorrect size of the public key, expected: ",
"Invalid ED25519 point bytes.",
"Invalid private key. Only cofactor 4 and 8 curves are supported",
"getDigestLength",
"blake2b: can't update because hash was finished.",
"blake2b: wrong digest length",
"feTobytes",
"geScalarMultBase",
"geFromBytesVartime",
"Invalid point bytes.",
"scReduce32Copy",
"scReduce32",
"Invalid scalar length.",
"deriveViewTag",
"Casting tx extra failed.",
"txExtras",
"Some transaction extras parsing failed.",
"publickey",
"additionalPublicKeys",
"does not implemented",
"UnimplementedError: ",
"pubKeys",
"nonce ",
"maximum",
"publicKey",
"padding",
"mergeMiningTag",
"mysteriousMinergate",
"Invalid tx extra type.",
"Cannot find tx public key extra.",
"TxoutTarget casting failed.",
"Indexes must not be empty",
"Duplicate indexes find.",
"Simple",
"MoneroAccountKeysType.",
"address",
"Primary",
"Integrated",
"Use `MoneroIntegratedAddress` for creating a MoneroAccount address.",
"Invalid network version prefix.",
"A payment ID is required for an integrated address.",
"bitcoin",
"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
"ripple",
"rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz",
"Base58Alphabets.",
"nist256p1",
"nist256p1Hybrid",
"sr25519",
"secp256k1",
"The public point has x or y out of range.",
"AffinePointt does not lay on the curve",
"Generator point must have order.",
"Generator point order is bad.",
"79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798",
"483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8",
"115792089237316195423570985008687907852837564279074904382605163141518161494337",
"115792089237316195423570985008687907853269984665640564039457584007908834671663",
"Invalid RistrettoPoint",
"19681161376707505956807079304988542015446066515923890162744021073123829784752",
"invalid ",
"public key",
" bytes length expected ",
" but ",
"6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296",
"4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5",
"115792089210356248762697446949407573529996955224135760342422259061068512044369",
"115792089210356248762697446949407573530086143415290314195533631308867097853951",
"5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B",
"Subaddress",
"Invalid monero address prefix.",
"prefix",
"Invalid monero address type.",
"XmrAddressType.",
"Use primary address for Non-subaddress index.",
"account",
"moneroMainnet",
"moneroStagenet",
"moneroTestnet",
"Monero TestNet",
"XMR",
"Monero StageNet",
"Monero",
"Mainnet",
"Testnet",
"Stagenet",
"Invalid monero network.",
"network",
"MoneroNetwork.",
"failed",
"endHeight",
"none",
"incremental",
"full",
"pool_info_extent",
"blocks",
"start_height",
"current_height",
"top_block_hash",
"output_indices",
"daemon_time",
"added_pool_txs",
"remaining_added_pool_txids",
"removed_pool_txids",
"credits",
"top_hash",
"untrusted",
"value is to large for integer.",
"invalid input for parse int",
"PoolInfoExtent.",
"double_spend_seen",
"tx_blob",
"tx_hash",
"indices",
"pruned",
"block",
"block_weight",
"txs",
"blob",
"prunable_hash",
"OK",
"Missing or invalid signature and version information.",
"ARRAY",
"Invalid array element type: Unable to decode untyped element.",
"OBJECT",
"BOOL",
"STRING",
"DOUBLE",
"Invalid promitive type.",
"byte",
"Invalid boolean byte.",
"The provided type is not integer type.",
"[^0-9]+",
"INT",
"MoneroStorageTypes.",
"INT64",
"INT32",
"INT16",
"UINT64",
"UINT32",
"UINT16",
"UINT8",
"flag",
"Invalid storage type: Unable to determine the correct type from the provided flag.",
"Unknown",
"Unknown type: No associated flag found.",
"Your environment cannot fully decode 62-bit varint.",
"Invalid varint mask.",
"_result",
"Error ",
"Success ",
"Bad Request: The server could not understand the request due to invalid syntax.",
"Unauthorized: Authentication is required or has failed.",
"Forbidden: You do not have permission to access this resource.",
"Not Found: The requested resource could not be found.",
"Method Not Allowed: The HTTP method used is not supported for this resource.",
"Conflict: The request could not be processed due to a conflict with the current state of the resource.",
"Unprocessable Entity: The request was well-formed but could not be processed.",
"Internal Server Error: The server encountered an unexpected condition.",
"Bad Gateway: The server received an invalid response from the upstream server.",
"Service Unavailable: The server is temporarily unable to handle the request.",
"Gateway Timeout: The server did not receive a timely response from the upstream server.",
"Unknown Error",
": An unexpected error occurred.",
"RPCError: ",
"RPCError: got code ",
" with message \"",
"\".",
"BaseServiceResponse casting faild.",
"api",
"request_type",
"ServiceResponseType.",
"Content-Type",
"application/json",
"Accept",
"_controller",
"Cannot add new events after calling close",
"Cannot add new events while doing an addStream",
"active",
"warning",
"APIServiceStatus.",
"http_error_",
"request_error",
"format_exception",
"api_unknown_error",
"<(html|head|body|title|h1|h2|h3|h4|h5|h6|p|div|span|a|form|table|img)[^>]*>",
"RequestServiceType.",
"jsonRPC",
"varint",
"Negative values are not allowed for varints.",
"Varint is too large to be encoded as bytes. use `encodeVarintBigInt` instead `encodeVarintInt`",
"The entry name must be between 1 and 255 characters.",
"Failed to cast to type ",
"Invalid array values: All elements in the array must be of the same type.",
"Invalid array values: Unable to determine the element type.",
"Invalid array of type ",
"Incorrect primitive ",
" value.",
"Invalid primitive value.",
"Invalid value for type ",
"Invalid numeric for type ",
"Invalid array values: Array must not be empty.",
"elements",
"Invalid array values: Array cannot contain null elements.",
"Invalid array of ",
"Invalid map: Object must be a Map<String, dynamic>.",
"Unknown storage format: Unable to determine the correct type for the provided value.",
"Converting object to an encodable object failed:",
"Converting object did not return an encodable object:",
"toJson",
"yplusx",
"yminusx",
"xy2d",
"h",
"yPlusX",
"yMinusX",
"z",
"t2d",
"x",
"y",
"totalPart",
"currentPart",
"ii",
"v",
"keyOffsets",
"keyImage",
"derivation",
"accountIndex",
"outputPublicKey",
"unlockTime",
"realIndex",
"dest",
"blockWeight",
"Cyclic error in JSON stringify",
"{}",
",\"",
"\":",
"DemonRequestType.",
"json_rpc",
"daemon",
"MoneroRequestApiType.",
"jsonrpc",
"2.0",
"getblocks.bin",
"block_ids",
"requested_info",
"no_miner_tx",
"prune",
"high_height_ok",
"pool_info_since",
"blocksOnly",
"DaemonRequestBlocksInfo.",
"request",
"code",
"excepted",
"Parsing response failed.",
"on_get_block_hash",
"pending_txes",
"primaryAddress",
"Invalid address type.",
"Invalid address network.",
"Invalid prefix: no related network found for the provided prefix.",
"Invalid length (expected ",
", got ",
"Invalid checksum",
"Invalid character in Base58 string",
"pub_vkey",
"net_ver",
"Invalid or Missing required parameters: ",
" as type ",
"The provided network index does not exist.",
"stream_closed_desc",
"streamTransformer",
"stream",
"StreamCryptoArgsType.",
"crypto",
"moneroAccountTracker",
"Client: ",
"HTTP",
"ServiceProtocol.",
"header",
"query",
"invalid_provider_infomarion",
"StreamIsolateMethod.",
"cbor",
"MessageArgsException:",
"_cryptoHandler",
"X",
" extends ",
" => "
      ],

    };

    const jsStringPolyfill = {
      "charCodeAt": (s, i) => s.charCodeAt(i),
      "compare": (s1, s2) => {
        if (s1 < s2) return -1;
        if (s1 > s2) return 1;
        return 0;
      },
      "concat": (s1, s2) => s1 + s2,
      "equals": (s1, s2) => s1 === s2,
      "fromCharCode": (i) => String.fromCharCode(i),
      "length": (s) => s.length,
      "substring": (s, a, b) => s.substring(a, b),
      "fromCharCodeArray": (a, start, end) => {
        if (end <= start) return '';

        const read = dartInstance.exports.$wasmI16ArrayGet;
        let result = '';
        let index = start;
        const chunkLength = Math.min(end - index, 500);
        let array = new Array(chunkLength);
        while (index < end) {
          const newChunkLength = Math.min(end - index, 500);
          for (let i = 0; i < newChunkLength; i++) {
            array[i] = read(a, index++);
          }
          if (newChunkLength < chunkLength) {
            array = array.slice(0, newChunkLength);
          }
          result += String.fromCharCode(...array);
        }
        return result;
      },
      "intoCharCodeArray": (s, a, start) => {
        if (s == '') return 0;

        const write = dartInstance.exports.$wasmI16ArraySet;
        for (var i = 0; i < s.length; ++i) {
          write(a, start++, s.charCodeAt(i));
        }
        return s.length;
      },
    };


    

    dartInstance = await WebAssembly.instantiate(this.module, {
      ...baseImports,
      ...additionalImports,
      
      "wasm:js-string": jsStringPolyfill,
    });

    return new InstantiatedApp(this, dartInstance);
  }
}

class InstantiatedApp {
  constructor(compiledApp, instantiatedModule) {
    this.compiledApp = compiledApp;
    this.instantiatedModule = instantiatedModule;
  }

  // Call the main function with the given arguments.
  invokeMain(...args) {
    this.instantiatedModule.exports.$invokeMain(args);
  }
}
