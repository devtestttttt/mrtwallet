/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/aptos@1.21.0/dist/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";var __create=Object.create,__defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__getProtoOf=Object.getPrototypeOf,__hasOwnProp=Object.prototype.hasOwnProperty,__export=(e,t)=>{for(var n in t)__defProp(e,n,{get:t[n],enumerable:!0})},__copyProps=(e,t,n,r)=>{if(t&&"object"==typeof t||"function"==typeof t)for(let s of __getOwnPropNames(t))__hasOwnProp.call(e,s)||s===n||__defProp(e,s,{get:()=>t[s],enumerable:!(r=__getOwnPropDesc(t,s))||r.enumerable});return e},__toESM=(e,t,n)=>(n=null!=e?__create(__getProtoOf(e)):{},__copyProps(!t&&e&&e.__esModule?n:__defProp(n,"default",{value:e,enumerable:!0}),e)),__toCommonJS=e=>__copyProps(__defProp({},"__esModule",{value:!0}),e),__decorateClass=(e,t,n,r)=>{for(var s,i=r>1?void 0:r?__getOwnPropDesc(t,n):t,a=e.length-1;a>=0;a--)(s=e[a])&&(i=(r?s(t,n,i):s(i))||i);return r&&i&&__defProp(t,n,i),i},src_exports={};__export(src_exports,{APTOS_COIN:()=>APTOS_COIN,AccountSequenceNumber:()=>AccountSequenceNumber,Account_Transactions_Select_Column:()=>Account_Transactions_Select_Column,Address_Events_Summary_Select_Column:()=>Address_Events_Summary_Select_Column,Address_Version_From_Events_Select_Column:()=>Address_Version_From_Events_Select_Column,Address_Version_From_Move_Resources_Select_Column:()=>Address_Version_From_Move_Resources_Select_Column,AnsClient:()=>AnsClient,ApiError:()=>ApiError,AptosAccount:()=>AptosAccount,AptosApiError:()=>AptosApiError,AptosClient:()=>AptosClient,AptosToken:()=>AptosToken,BCS:()=>bcs_exports,Block_Metadata_Transactions_Select_Column:()=>Block_Metadata_Transactions_Select_Column,CKDPriv:()=>CKDPriv,COIN_TRANSFER:()=>COIN_TRANSFER,CoinClient:()=>CoinClient,Coin_Activities_Select_Column:()=>Coin_Activities_Select_Column,Coin_Balances_Select_Column:()=>Coin_Balances_Select_Column,Coin_Infos_Select_Column:()=>Coin_Infos_Select_Column,Coin_Supply_Select_Column:()=>Coin_Supply_Select_Column,Collection_Datas_Select_Column:()=>Collection_Datas_Select_Column,Current_Ans_Lookup_Select_Column:()=>Current_Ans_Lookup_Select_Column,Current_Ans_Lookup_V2_Select_Column:()=>Current_Ans_Lookup_V2_Select_Column,Current_Aptos_Names_Select_Column:()=>Current_Aptos_Names_Select_Column,Current_Coin_Balances_Select_Column:()=>Current_Coin_Balances_Select_Column,Current_Collection_Datas_Select_Column:()=>Current_Collection_Datas_Select_Column,Current_Collection_Ownership_V2_View_Select_Column:()=>Current_Collection_Ownership_V2_View_Select_Column,Current_Collections_V2_Select_Column:()=>Current_Collections_V2_Select_Column,Current_Delegated_Staking_Pool_Balances_Select_Column:()=>Current_Delegated_Staking_Pool_Balances_Select_Column,Current_Delegated_Voter_Select_Column:()=>Current_Delegated_Voter_Select_Column,Current_Delegator_Balances_Select_Column:()=>Current_Delegator_Balances_Select_Column,Current_Fungible_Asset_Balances_Select_Column:()=>Current_Fungible_Asset_Balances_Select_Column,Current_Objects_Select_Column:()=>Current_Objects_Select_Column,Current_Staking_Pool_Voter_Select_Column:()=>Current_Staking_Pool_Voter_Select_Column,Current_Table_Items_Select_Column:()=>Current_Table_Items_Select_Column,Current_Token_Datas_Select_Column:()=>Current_Token_Datas_Select_Column,Current_Token_Datas_V2_Select_Column:()=>Current_Token_Datas_V2_Select_Column,Current_Token_Ownerships_Select_Column:()=>Current_Token_Ownerships_Select_Column,Current_Token_Ownerships_V2_Select_Column:()=>Current_Token_Ownerships_V2_Select_Column,Current_Token_Pending_Claims_Select_Column:()=>Current_Token_Pending_Claims_Select_Column,Cursor_Ordering:()=>Cursor_Ordering,Delegated_Staking_Activities_Select_Column:()=>Delegated_Staking_Activities_Select_Column,Delegated_Staking_Pools_Select_Column:()=>Delegated_Staking_Pools_Select_Column,Delegator_Distinct_Pool_Select_Column:()=>Delegator_Distinct_Pool_Select_Column,Events_Select_Column:()=>Events_Select_Column,FailedTransactionError:()=>FailedTransactionError,FaucetClient:()=>FaucetClient,FungibleAssetClient:()=>FungibleAssetClient,Fungible_Asset_Activities_Select_Column:()=>Fungible_Asset_Activities_Select_Column,Fungible_Asset_Metadata_Select_Column:()=>Fungible_Asset_Metadata_Select_Column,HexString:()=>HexString,IndexerClient:()=>IndexerClient,Indexer_Status_Select_Column:()=>Indexer_Status_Select_Column,Ledger_Infos_Select_Column:()=>Ledger_Infos_Select_Column,Move_Resources_Select_Column:()=>Move_Resources_Select_Column,Network:()=>Network,NetworkToIndexerAPI:()=>NetworkToIndexerAPI,NetworkToNodeAPI:()=>NetworkToNodeAPI,Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column:()=>Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column,Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column:()=>Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column,Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column:()=>Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column,Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column:()=>Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column,Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column:()=>Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column,Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column:()=>Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column,NodeAPIToNetwork:()=>NodeAPIToNetwork,Num_Active_Delegator_Per_Pool_Select_Column:()=>Num_Active_Delegator_Per_Pool_Select_Column,Order_By:()=>Order_By,Processor_Status_Select_Column:()=>Processor_Status_Select_Column,PropertyMap:()=>PropertyMap,PropertyValue:()=>PropertyValue,Proposal_Votes_Select_Column:()=>Proposal_Votes_Select_Column,Provider:()=>Provider,TRANSFER_COINS:()=>TRANSFER_COINS,Table_Items_Select_Column:()=>Table_Items_Select_Column,Table_Metadatas_Select_Column:()=>Table_Metadatas_Select_Column,TokenClient:()=>TokenClient,TokenTypes:()=>token_types_exports,Token_Activities_Select_Column:()=>Token_Activities_Select_Column,Token_Activities_V2_Select_Column:()=>Token_Activities_V2_Select_Column,Token_Datas_Select_Column:()=>Token_Datas_Select_Column,Token_Ownerships_Select_Column:()=>Token_Ownerships_Select_Column,Tokens_Select_Column:()=>Tokens_Select_Column,TransactionBuilder:()=>TransactionBuilder,TransactionBuilderABI:()=>TransactionBuilderABI,TransactionBuilderEd25519:()=>TransactionBuilderEd25519,TransactionBuilderMultiEd25519:()=>TransactionBuilderMultiEd25519,TransactionBuilderRemoteABI:()=>TransactionBuilderRemoteABI,TransactionWorker:()=>TransactionWorker,TransactionWorkerEvents:()=>TransactionWorkerEvents,TxnBuilderTypes:()=>aptos_types_exports,TypeTagParser:()=>TypeTagParser,Types:()=>generated_exports,User_Transactions_Select_Column:()=>User_Transactions_Select_Column,WaitForTransactionError:()=>WaitForTransactionError,ansContractsMap:()=>ansContractsMap,aptosRequest:()=>aptosRequest,argToTransactionArgument:()=>argToTransactionArgument,derivePath:()=>derivePath,deserializePropertyMap:()=>deserializePropertyMap,deserializeValueBasedOnTypeTag:()=>deserializeValueBasedOnTypeTag,ensureBigInt:()=>ensureBigInt,ensureBoolean:()=>ensureBoolean,ensureNumber:()=>ensureNumber,get:()=>get,getAddressFromAccountOrAddress:()=>getAddressFromAccountOrAddress,getMasterKeyFromSeed:()=>getMasterKeyFromSeed,getPropertyType:()=>getPropertyType,getPropertyValueRaw:()=>getPropertyValueRaw,getPublicKey:()=>getPublicKey,getSinglePropertyValueRaw:()=>getSinglePropertyValueRaw,isValidPath:()=>isValidPath,nameComponentPattern:()=>nameComponentPattern,namePattern:()=>namePattern,post:()=>post,serializeArg:()=>serializeArg}),module.exports=__toCommonJS(src_exports);var import_tweetnacl2=__toESM(require("tweetnacl")),bip39=__toESM(require("@scure/bip39")),import_utils6=require("@noble/hashes/utils"),import_sha256=require("@noble/hashes/sha256"),import_sha33=require("@noble/hashes/sha3"),import_tweetnacl=__toESM(require("tweetnacl")),import_hmac=require("@noble/hashes/hmac"),import_sha512=require("@noble/hashes/sha512"),import_utils=require("@noble/hashes/utils"),pathRegex=/^m(\/[0-9]+')+$/,replaceDerive=e=>e.replace("'",""),HMAC_KEY="ed25519 seed",HARDENED_OFFSET=2147483648,getMasterKeyFromSeed=e=>{const t=import_hmac.hmac.create(import_sha512.sha512,HMAC_KEY).update((0,import_utils.hexToBytes)(e)).digest();return{key:t.slice(0,32),chainCode:t.slice(32)}},CKDPriv=({key:e,chainCode:t},n)=>{const r=new ArrayBuffer(4);new DataView(r).setUint32(0,n);const s=new Uint8Array(r),i=new Uint8Array([0]),a=new Uint8Array([...i,...e,...s]),o=import_hmac.hmac.create(import_sha512.sha512,t).update(a).digest();return{key:o.slice(0,32),chainCode:o.slice(32)}},getPublicKey=(e,t=!0)=>{const n=import_tweetnacl.default.sign.keyPair.fromSeed(e).secretKey.subarray(32),r=new Uint8Array([0]);return t?new Uint8Array([...r,...n]):n},isValidPath=e=>!!pathRegex.test(e)&&!e.split("/").slice(1).map(replaceDerive).some(Number.isNaN),derivePath=(e,t,n=HARDENED_OFFSET)=>{if(!isValidPath(e))throw new Error("Invalid derivation path");const{key:r,chainCode:s}=getMasterKeyFromSeed(t);return e.split("/").slice(1).map(replaceDerive).map((e=>parseInt(e,10))).reduce(((e,t)=>CKDPriv(e,t+n)),{key:r,chainCode:s})},VERSION="1.21.0";async function sleep(e){return new Promise((t=>{setTimeout(t,e)}))}var DEFAULT_VERSION_PATH_BASE="/v1";function fixNodeUrl(e){let t=`${e}`;return t.endsWith("/")&&(t=t.substring(0,t.length-1)),t.endsWith(DEFAULT_VERSION_PATH_BASE)||(t=`${t}${DEFAULT_VERSION_PATH_BASE}`),t}var DEFAULT_MAX_GAS_AMOUNT=2e5,DEFAULT_TXN_EXP_SEC_FROM_NOW=20,DEFAULT_TXN_TIMEOUT_SEC=20,APTOS_COIN="0x1::aptos_coin::AptosCoin",CUSTOM_REQUEST_HEADER={"x-aptos-client":`aptos-ts-sdk/${VERSION}`};function Memoize(e){let t,n,r;return"object"==typeof e?(t=e.hashFunction,n=e.ttlMs,r=e.tags):t=e,(e,s,i)=>{if(null!=i.value)i.value=getNewFunction(i.value,t,n,r);else{if(null==i.get)throw new Error("Only put a Memoize() decorator on a method or get accessor.");i.get=getNewFunction(i.get,t,n,r)}}}function MemoizeExpiring(e,t){return Memoize({ttlMs:e,hashFunction:t})}var clearCacheTagsMap=new Map;function clear(e){const t=new Set;for(const n of e){const e=clearCacheTagsMap.get(n);if(e)for(const n of e)t.has(n)||(n.clear(),t.add(n))}return t.size}function getNewFunction(e,t,n=0,r){const s=Symbol("__memoized_map__");return function(...i){let a;const o=this;o.hasOwnProperty(s)||Object.defineProperty(o,s,{configurable:!1,enumerable:!1,writable:!1,value:new Map});const c=o[s];if(Array.isArray(r))for(const e of r)clearCacheTagsMap.has(e)?clearCacheTagsMap.get(e).push(c):clearCacheTagsMap.set(e,[c]);if(t||i.length>0||n>0){let r;r=!0===t?i.map((e=>e.toString())).join("!"):t?t.apply(o,i):i[0];const s=`${r}__timestamp`;let l=!1;if(n>0)if(c.has(s)){const e=c.get(s);l=Date.now()-e>n}else l=!0;c.has(r)&&!l?a=c.get(r):(a=e.apply(o,i),c.set(r,a),n>0&&c.set(s,Date.now()))}else{const t=o;c.has(t)?a=c.get(t):(a=e.apply(o,i),c.set(t,a))}return a}}var import_aptos_client=__toESM(require("@aptos-labs/aptos-client")),AptosApiError=class extends Error{constructor(e,t,n){super(n),this.name="AptosApiError",this.url=t.url,this.status=t.status,this.statusText=t.statusText,this.data=t.data,this.request=e}},errors={400:"Bad Request",401:"Unauthorized",403:"Forbidden",404:"Not Found",429:"Too Many Requests",500:"Internal Server Error",502:"Bad Gateway",503:"Service Unavailable"};async function request(e,t,n,r,s,i){const a={...null==i?void 0:i.HEADERS,"x-aptos-client":`aptos-ts-sdk/${VERSION}`,"content-type":null!=r?r:"application/json"};(null==i?void 0:i.TOKEN)&&(a.Authorization=`Bearer ${null==i?void 0:i.TOKEN}`);return await(0,import_aptos_client.default)({url:e,method:t,body:n,params:s,headers:a,overrides:i})}async function aptosRequest(e){const{url:t,endpoint:n,method:r,body:s,contentType:i,params:a,overrides:o}=e,c=`${t}/${null!=n?n:""}`,l=await request(c,r,s,i,a,o),u={status:l.status,statusText:l.statusText,data:l.data,headers:l.headers,config:l.config,url:c};if(u.status>=200&&u.status<300)return u;const d=errors[u.status];throw new AptosApiError(e,u,null!=d?d:"Generic Error")}async function get(e){return await aptosRequest({...e,method:"GET"})}async function post(e){return await aptosRequest({...e,method:"POST"})}async function paginateWithCursor(e){const t=[];let n;const r=e.params;for(;;){r.start=n;const s=await get({url:e.url,endpoint:e.endpoint,params:r,originMethod:e.originMethod,overrides:e.overrides});if(n=s.headers["x-aptos-cursor"],delete s.headers,t.push(...s.data),null==n)break}return t}var NetworkToIndexerAPI={mainnet:"https://indexer.mainnet.aptoslabs.com/v1/graphql",testnet:"https://indexer-testnet.staging.gcp.aptosdev.com/v1/graphql",devnet:"https://indexer-devnet.staging.gcp.aptosdev.com/v1/graphql",local:"http://127.0.0.1:8090/v1/graphql"},NetworkToNodeAPI={mainnet:"https://fullnode.mainnet.aptoslabs.com/v1",testnet:"https://fullnode.testnet.aptoslabs.com/v1",devnet:"https://fullnode.devnet.aptoslabs.com/v1",local:"http://127.0.0.1:8080/v1"},NodeAPIToNetwork={"https://fullnode.mainnet.aptoslabs.com/v1":"mainnet","https://fullnode.testnet.aptoslabs.com/v1":"testnet","https://fullnode.devnet.aptoslabs.com/v1":"devnet","http://127.0.0.1:8080/v1":"local"},Network=(e=>(e.MAINNET="mainnet",e.TESTNET="testnet",e.DEVNET="devnet",e.LOCAL="local",e))(Network||{}),import_utils2=require("@noble/hashes/utils"),HexString=class e{static fromBuffer(t){return e.fromUint8Array(t)}static fromUint8Array(t){return new e((0,import_utils2.bytesToHex)(t))}static ensure(t){return"string"==typeof t?new e(t):t}constructor(e){e.startsWith("0x")?this.hexString=e:this.hexString=`0x${e}`}hex(){return this.hexString}noPrefix(){return this.hexString.slice(2)}toString(){return this.hex()}toShortString(){return`0x${this.hexString.replace(/^0x0*/,"")}`}toUint8Array(){return Uint8Array.from((0,import_utils2.hexToBytes)(this.noPrefix()))}},aptos_types_exports={};__export(aptos_types_exports,{AccountAddress:()=>AccountAddress,AccountAuthenticator:()=>AccountAuthenticator,AccountAuthenticatorEd25519:()=>AccountAuthenticatorEd25519,AccountAuthenticatorMultiEd25519:()=>AccountAuthenticatorMultiEd25519,ArgumentABI:()=>ArgumentABI,AuthenticationKey:()=>AuthenticationKey,ChainId:()=>ChainId,ChangeSet:()=>ChangeSet,Ed25519PublicKey:()=>Ed25519PublicKey,Ed25519Signature:()=>Ed25519Signature,EntryFunction:()=>EntryFunction,EntryFunctionABI:()=>EntryFunctionABI,FeePayerRawTransaction:()=>FeePayerRawTransaction,Identifier:()=>Identifier,Module:()=>Module,ModuleId:()=>ModuleId,MultiAgentRawTransaction:()=>MultiAgentRawTransaction,MultiEd25519PublicKey:()=>MultiEd25519PublicKey,MultiEd25519Signature:()=>MultiEd25519Signature,MultiSig:()=>MultiSig,MultiSigTransactionPayload:()=>MultiSigTransactionPayload,RawTransaction:()=>RawTransaction,RawTransactionWithData:()=>RawTransactionWithData,RotationProofChallenge:()=>RotationProofChallenge,Script:()=>Script,ScriptABI:()=>ScriptABI,SignedTransaction:()=>SignedTransaction,StructTag:()=>StructTag,Transaction:()=>Transaction,TransactionArgument:()=>TransactionArgument,TransactionArgumentAddress:()=>TransactionArgumentAddress,TransactionArgumentBool:()=>TransactionArgumentBool,TransactionArgumentU128:()=>TransactionArgumentU128,TransactionArgumentU16:()=>TransactionArgumentU16,TransactionArgumentU256:()=>TransactionArgumentU256,TransactionArgumentU32:()=>TransactionArgumentU32,TransactionArgumentU64:()=>TransactionArgumentU64,TransactionArgumentU8:()=>TransactionArgumentU8,TransactionArgumentU8Vector:()=>TransactionArgumentU8Vector,TransactionAuthenticator:()=>TransactionAuthenticator,TransactionAuthenticatorEd25519:()=>TransactionAuthenticatorEd25519,TransactionAuthenticatorFeePayer:()=>TransactionAuthenticatorFeePayer,TransactionAuthenticatorMultiAgent:()=>TransactionAuthenticatorMultiAgent,TransactionAuthenticatorMultiEd25519:()=>TransactionAuthenticatorMultiEd25519,TransactionPayload:()=>TransactionPayload,TransactionPayloadEntryFunction:()=>TransactionPayloadEntryFunction,TransactionPayloadMultisig:()=>TransactionPayloadMultisig,TransactionPayloadScript:()=>TransactionPayloadScript,TransactionScriptABI:()=>TransactionScriptABI,TypeArgumentABI:()=>TypeArgumentABI,TypeTag:()=>TypeTag,TypeTagAddress:()=>TypeTagAddress,TypeTagBool:()=>TypeTagBool,TypeTagParser:()=>TypeTagParser,TypeTagParserError:()=>TypeTagParserError,TypeTagSigner:()=>TypeTagSigner,TypeTagStruct:()=>TypeTagStruct,TypeTagU128:()=>TypeTagU128,TypeTagU16:()=>TypeTagU16,TypeTagU256:()=>TypeTagU256,TypeTagU32:()=>TypeTagU32,TypeTagU64:()=>TypeTagU64,TypeTagU8:()=>TypeTagU8,TypeTagVector:()=>TypeTagVector,UserTransaction:()=>UserTransaction,WriteSet:()=>WriteSet,objectStructTag:()=>objectStructTag,optionStructTag:()=>optionStructTag,stringStructTag:()=>stringStructTag});var bcs_exports={};__export(bcs_exports,{Deserializer:()=>Deserializer,Serializer:()=>Serializer,bcsSerializeBool:()=>bcsSerializeBool,bcsSerializeBytes:()=>bcsSerializeBytes,bcsSerializeFixedBytes:()=>bcsSerializeFixedBytes,bcsSerializeStr:()=>bcsSerializeStr,bcsSerializeU128:()=>bcsSerializeU128,bcsSerializeU16:()=>bcsSerializeU16,bcsSerializeU256:()=>bcsSerializeU256,bcsSerializeU32:()=>bcsSerializeU32,bcsSerializeU8:()=>bcsSerializeU8,bcsSerializeUint64:()=>bcsSerializeUint64,bcsToBytes:()=>bcsToBytes,deserializeVector:()=>deserializeVector,serializeVector:()=>serializeVector,serializeVectorWithFunc:()=>serializeVectorWithFunc});var MAX_U8_NUMBER=255,MAX_U16_NUMBER=65535,MAX_U32_NUMBER=2**32-1,MAX_U64_BIG_INT=BigInt(2**64)-BigInt(1),MAX_U128_BIG_INT=BigInt(2**128)-BigInt(1),MAX_U256_BIG_INT=BigInt(2**256)-BigInt(1),Serializer=class{constructor(){this.buffer=new ArrayBuffer(64),this.offset=0}ensureBufferWillHandleSize(e){for(;this.buffer.byteLength<this.offset+e;){const e=new ArrayBuffer(2*this.buffer.byteLength);new Uint8Array(e).set(new Uint8Array(this.buffer)),this.buffer=e}}serialize(e){this.ensureBufferWillHandleSize(e.length),new Uint8Array(this.buffer,this.offset).set(e),this.offset+=e.length}serializeWithFunction(e,t,n){this.ensureBufferWillHandleSize(t);const r=new DataView(this.buffer,this.offset);e.apply(r,[0,n,!0]),this.offset+=t}serializeStr(e){const t=new TextEncoder;this.serializeBytes(t.encode(e))}serializeBytes(e){this.serializeU32AsUleb128(e.length),this.serialize(e)}serializeFixedBytes(e){this.serialize(e)}serializeBool(e){if("boolean"!=typeof e)throw new Error("Value needs to be a boolean");const t=e?1:0;this.serialize(new Uint8Array([t]))}serializeU8(e){this.serialize(new Uint8Array([e]))}serializeU16(e){this.serializeWithFunction(DataView.prototype.setUint16,2,e)}serializeU32(e){this.serializeWithFunction(DataView.prototype.setUint32,4,e)}serializeU64(e){const t=BigInt(e.toString())&BigInt(MAX_U32_NUMBER),n=BigInt(e.toString())>>BigInt(32);this.serializeU32(Number(t)),this.serializeU32(Number(n))}serializeU128(e){const t=BigInt(e.toString())&MAX_U64_BIG_INT,n=BigInt(e.toString())>>BigInt(64);this.serializeU64(t),this.serializeU64(n)}serializeU256(e){const t=BigInt(e.toString())&MAX_U128_BIG_INT,n=BigInt(e.toString())>>BigInt(128);this.serializeU128(t),this.serializeU128(n)}serializeU32AsUleb128(e){let t=e;const n=[];for(;t>>>7!=0;)n.push(127&t|128),t>>>=7;n.push(t),this.serialize(new Uint8Array(n))}getBytes(){return new Uint8Array(this.buffer).slice(0,this.offset)}};function checkNumberRange(e,t,n){return(r,s,i)=>{const a=i.value;return i.value=function(r){const s=BigInt(r.toString());if(s>BigInt(t.toString())||s<BigInt(e.toString()))throw new Error(n||"Value is out of range");a.apply(this,[r])},i}}__decorateClass([checkNumberRange(0,MAX_U8_NUMBER)],Serializer.prototype,"serializeU8",1),__decorateClass([checkNumberRange(0,MAX_U16_NUMBER)],Serializer.prototype,"serializeU16",1),__decorateClass([checkNumberRange(0,MAX_U32_NUMBER)],Serializer.prototype,"serializeU32",1),__decorateClass([checkNumberRange(BigInt(0),MAX_U64_BIG_INT)],Serializer.prototype,"serializeU64",1),__decorateClass([checkNumberRange(BigInt(0),MAX_U128_BIG_INT)],Serializer.prototype,"serializeU128",1),__decorateClass([checkNumberRange(BigInt(0),MAX_U256_BIG_INT)],Serializer.prototype,"serializeU256",1),__decorateClass([checkNumberRange(0,MAX_U32_NUMBER)],Serializer.prototype,"serializeU32AsUleb128",1);var Deserializer=class{constructor(e){this.buffer=new ArrayBuffer(e.length),new Uint8Array(this.buffer).set(e,0),this.offset=0}read(e){if(this.offset+e>this.buffer.byteLength)throw new Error("Reached to the end of buffer");const t=this.buffer.slice(this.offset,this.offset+e);return this.offset+=e,t}deserializeStr(){const e=this.deserializeBytes();return(new TextDecoder).decode(e)}deserializeBytes(){const e=this.deserializeUleb128AsU32();return new Uint8Array(this.read(e))}deserializeFixedBytes(e){return new Uint8Array(this.read(e))}deserializeBool(){const e=new Uint8Array(this.read(1))[0];if(1!==e&&0!==e)throw new Error("Invalid boolean value");return 1===e}deserializeU8(){return new DataView(this.read(1)).getUint8(0)}deserializeU16(){return new DataView(this.read(2)).getUint16(0,!0)}deserializeU32(){return new DataView(this.read(4)).getUint32(0,!0)}deserializeU64(){const e=this.deserializeU32(),t=this.deserializeU32();return BigInt(BigInt(t)<<BigInt(32)|BigInt(e))}deserializeU128(){const e=this.deserializeU64(),t=this.deserializeU64();return BigInt(t<<BigInt(64)|e)}deserializeU256(){const e=this.deserializeU128(),t=this.deserializeU128();return BigInt(t<<BigInt(128)|e)}deserializeUleb128AsU32(){let e=BigInt(0),t=0;for(;e<MAX_U32_NUMBER;){const n=this.deserializeU8();if(e|=BigInt(127&n)<<BigInt(t),0==(128&n))break;t+=7}if(e>MAX_U32_NUMBER)throw new Error("Overflow while parsing uleb128-encoded uint32 value");return Number(e)}};function serializeVector(e,t){t.serializeU32AsUleb128(e.length),e.forEach((e=>{e.serialize(t)}))}function serializeVectorWithFunc(e,t){const n=new Serializer;n.serializeU32AsUleb128(e.length);const r=n[t];return e.forEach((e=>{r.call(n,e)})),n.getBytes()}function deserializeVector(e,t){const n=e.deserializeUleb128AsU32(),r=[];for(let s=0;s<n;s+=1)r.push(t.deserialize(e));return r}function bcsToBytes(e){const t=new Serializer;return e.serialize(t),t.getBytes()}function bcsSerializeUint64(e){const t=new Serializer;return t.serializeU64(e),t.getBytes()}function bcsSerializeU8(e){const t=new Serializer;return t.serializeU8(e),t.getBytes()}function bcsSerializeU16(e){const t=new Serializer;return t.serializeU16(e),t.getBytes()}function bcsSerializeU32(e){const t=new Serializer;return t.serializeU32(e),t.getBytes()}function bcsSerializeU128(e){const t=new Serializer;return t.serializeU128(e),t.getBytes()}function bcsSerializeU256(e){const t=new Serializer;return t.serializeU256(e),t.getBytes()}function bcsSerializeBool(e){const t=new Serializer;return t.serializeBool(e),t.getBytes()}function bcsSerializeStr(e){const t=new Serializer;return t.serializeStr(e),t.getBytes()}function bcsSerializeBytes(e){const t=new Serializer;return t.serializeBytes(e),t.getBytes()}function bcsSerializeFixedBytes(e){const t=new Serializer;return t.serializeFixedBytes(e),t.getBytes()}var import_sha3=require("@noble/hashes/sha3"),_AccountAddress=class e{constructor(t){if(t.length!==e.LENGTH)throw new Error("Expected address of length 32");this.address=t}static fromHex(t){let n=HexString.ensure(t);n.noPrefix().length%2!=0&&(n=new HexString(`0${n.noPrefix()}`));const r=n.toUint8Array();if(r.length>e.LENGTH)throw new Error("Hex string is too long. Address's length is 32 bytes.");if(r.length===e.LENGTH)return new e(r);const s=new Uint8Array(e.LENGTH);return s.set(r,e.LENGTH-r.length),new e(s)}static isValid(t){if(""===t)return!1;let n=HexString.ensure(t);n.noPrefix().length%2!=0&&(n=new HexString(`0${n.noPrefix()}`));return n.toUint8Array().length<=e.LENGTH}toHexString(){return HexString.fromUint8Array(this.address).hex()}serialize(e){e.serializeFixedBytes(this.address)}static deserialize(t){return new e(t.deserializeFixedBytes(e.LENGTH))}static standardizeAddress(e){const t=e.toLowerCase();return`0x${(t.startsWith("0x")?t.slice(2):t).padStart(64,"0")}`}};_AccountAddress.LENGTH=32,_AccountAddress.CORE_CODE_ADDRESS=_AccountAddress.fromHex("0x1");var AccountAddress=_AccountAddress,_Ed25519PublicKey=class e{constructor(t){if(t.length!==e.LENGTH)throw new Error(`Ed25519PublicKey length should be ${e.LENGTH}`);this.value=t}toBytes(){return this.value}serialize(e){e.serializeBytes(this.value)}static deserialize(t){const n=t.deserializeBytes();return new e(n)}};_Ed25519PublicKey.LENGTH=32;var Ed25519PublicKey=_Ed25519PublicKey,_Ed25519Signature=class e{constructor(t){if(this.value=t,t.length!==e.LENGTH)throw new Error(`Ed25519Signature length should be ${e.LENGTH}`)}serialize(e){e.serializeBytes(this.value)}static deserialize(t){const n=t.deserializeBytes();return new e(n)}};_Ed25519Signature.LENGTH=64;var Ed25519Signature=_Ed25519Signature,MAX_SIGNATURES_SUPPORTED=32,MultiEd25519PublicKey=class e{constructor(e,t){if(this.public_keys=e,this.threshold=t,t>MAX_SIGNATURES_SUPPORTED)throw new Error(`"threshold" cannot be larger than ${MAX_SIGNATURES_SUPPORTED}`)}toBytes(){const e=new Uint8Array(this.public_keys.length*Ed25519PublicKey.LENGTH+1);return this.public_keys.forEach(((t,n)=>{e.set(t.value,n*Ed25519PublicKey.LENGTH)})),e[this.public_keys.length*Ed25519PublicKey.LENGTH]=this.threshold,e}serialize(e){e.serializeBytes(this.toBytes())}static deserialize(t){const n=t.deserializeBytes(),r=n[n.length-1],s=[];for(let e=0;e<n.length-1;e+=Ed25519PublicKey.LENGTH){const t=e;s.push(new Ed25519PublicKey(n.subarray(t,t+Ed25519PublicKey.LENGTH)))}return new e(s,r)}},_MultiEd25519Signature=class e{constructor(t,n){if(this.signatures=t,this.bitmap=n,n.length!==e.BITMAP_LEN)throw new Error(`"bitmap" length should be ${e.BITMAP_LEN}`)}toBytes(){const t=new Uint8Array(this.signatures.length*Ed25519Signature.LENGTH+e.BITMAP_LEN);return this.signatures.forEach(((e,n)=>{t.set(e.value,n*Ed25519Signature.LENGTH)})),t.set(this.bitmap,this.signatures.length*Ed25519Signature.LENGTH),t}static createBitmap(e){const t=new Uint8Array([0,0,0,0]),n=new Set;return e.forEach((e=>{if(e>=MAX_SIGNATURES_SUPPORTED)throw new Error(`Invalid bit value ${e}.`);if(n.has(e))throw new Error("Duplicated bits detected.");n.add(e);const r=Math.floor(e/8);let s=t[r];s|=128>>e%8,t[r]=s})),t}serialize(e){e.serializeBytes(this.toBytes())}static deserialize(t){const n=t.deserializeBytes(),r=n.subarray(n.length-4),s=[];for(let e=0;e<n.length-r.length;e+=Ed25519Signature.LENGTH){const t=e;s.push(new Ed25519Signature(n.subarray(t,t+Ed25519Signature.LENGTH)))}return new e(s,r)}};_MultiEd25519Signature.BITMAP_LEN=4;var MultiEd25519Signature=_MultiEd25519Signature,TransactionAuthenticator=class{static deserialize(e){const t=e.deserializeUleb128AsU32();switch(t){case 0:return TransactionAuthenticatorEd25519.load(e);case 1:return TransactionAuthenticatorMultiEd25519.load(e);case 2:return TransactionAuthenticatorMultiAgent.load(e);case 3:return TransactionAuthenticatorFeePayer.load(e);default:throw new Error(`Unknown variant index for TransactionAuthenticator: ${t}`)}}},TransactionAuthenticatorEd25519=class e extends TransactionAuthenticator{constructor(e,t){super(),this.public_key=e,this.signature=t}serialize(e){e.serializeU32AsUleb128(0),this.public_key.serialize(e),this.signature.serialize(e)}static load(t){const n=Ed25519PublicKey.deserialize(t),r=Ed25519Signature.deserialize(t);return new e(n,r)}},TransactionAuthenticatorMultiEd25519=class e extends TransactionAuthenticator{constructor(e,t){super(),this.public_key=e,this.signature=t}serialize(e){e.serializeU32AsUleb128(1),this.public_key.serialize(e),this.signature.serialize(e)}static load(t){const n=MultiEd25519PublicKey.deserialize(t),r=MultiEd25519Signature.deserialize(t);return new e(n,r)}},TransactionAuthenticatorMultiAgent=class e extends TransactionAuthenticator{constructor(e,t,n){super(),this.sender=e,this.secondary_signer_addresses=t,this.secondary_signers=n}serialize(e){e.serializeU32AsUleb128(2),this.sender.serialize(e),serializeVector(this.secondary_signer_addresses,e),serializeVector(this.secondary_signers,e)}static load(t){const n=AccountAuthenticator.deserialize(t),r=deserializeVector(t,AccountAddress),s=deserializeVector(t,AccountAuthenticator);return new e(n,r,s)}},TransactionAuthenticatorFeePayer=class e extends TransactionAuthenticator{constructor(e,t,n,r){super(),this.sender=e,this.secondary_signer_addresses=t,this.secondary_signers=n,this.fee_payer=r}serialize(e){e.serializeU32AsUleb128(3),this.sender.serialize(e),serializeVector(this.secondary_signer_addresses,e),serializeVector(this.secondary_signers,e),this.fee_payer.address.serialize(e),this.fee_payer.authenticator.serialize(e)}static load(t){const n=AccountAuthenticator.deserialize(t),r=deserializeVector(t,AccountAddress),s=deserializeVector(t,AccountAuthenticator),i=AccountAddress.deserialize(t),a=AccountAuthenticator.deserialize(t);return new e(n,r,s,{address:i,authenticator:a})}},AccountAuthenticator=class{static deserialize(e){const t=e.deserializeUleb128AsU32();switch(t){case 0:return AccountAuthenticatorEd25519.load(e);case 1:return AccountAuthenticatorMultiEd25519.load(e);default:throw new Error(`Unknown variant index for AccountAuthenticator: ${t}`)}}},AccountAuthenticatorEd25519=class e extends AccountAuthenticator{constructor(e,t){super(),this.public_key=e,this.signature=t}serialize(e){e.serializeU32AsUleb128(0),this.public_key.serialize(e),this.signature.serialize(e)}static load(t){const n=Ed25519PublicKey.deserialize(t),r=Ed25519Signature.deserialize(t);return new e(n,r)}},AccountAuthenticatorMultiEd25519=class e extends AccountAuthenticator{constructor(e,t){super(),this.public_key=e,this.signature=t}serialize(e){e.serializeU32AsUleb128(1),this.public_key.serialize(e),this.signature.serialize(e)}static load(t){const n=MultiEd25519PublicKey.deserialize(t),r=MultiEd25519Signature.deserialize(t);return new e(n,r)}},Identifier=class e{constructor(e){this.value=e}serialize(e){e.serializeStr(this.value)}static deserialize(t){const n=t.deserializeStr();return new e(n)}},TypeTag=class{static deserialize(e){const t=e.deserializeUleb128AsU32();switch(t){case 0:return TypeTagBool.load(e);case 1:return TypeTagU8.load(e);case 2:return TypeTagU64.load(e);case 3:return TypeTagU128.load(e);case 4:return TypeTagAddress.load(e);case 5:return TypeTagSigner.load(e);case 6:return TypeTagVector.load(e);case 7:return TypeTagStruct.load(e);case 8:return TypeTagU16.load(e);case 9:return TypeTagU32.load(e);case 10:return TypeTagU256.load(e);default:throw new Error(`Unknown variant index for TypeTag: ${t}`)}}},TypeTagBool=class e extends TypeTag{serialize(e){e.serializeU32AsUleb128(0)}static load(t){return new e}},TypeTagU8=class e extends TypeTag{serialize(e){e.serializeU32AsUleb128(1)}static load(t){return new e}},TypeTagU16=class e extends TypeTag{serialize(e){e.serializeU32AsUleb128(8)}static load(t){return new e}},TypeTagU32=class e extends TypeTag{serialize(e){e.serializeU32AsUleb128(9)}static load(t){return new e}},TypeTagU64=class e extends TypeTag{serialize(e){e.serializeU32AsUleb128(2)}static load(t){return new e}},TypeTagU128=class e extends TypeTag{serialize(e){e.serializeU32AsUleb128(3)}static load(t){return new e}},TypeTagU256=class e extends TypeTag{serialize(e){e.serializeU32AsUleb128(10)}static load(t){return new e}},TypeTagAddress=class e extends TypeTag{serialize(e){e.serializeU32AsUleb128(4)}static load(t){return new e}},TypeTagSigner=class e extends TypeTag{serialize(e){e.serializeU32AsUleb128(5)}static load(t){return new e}},TypeTagVector=class e extends TypeTag{constructor(e){super(),this.value=e}serialize(e){e.serializeU32AsUleb128(6),this.value.serialize(e)}static load(t){const n=TypeTag.deserialize(t);return new e(n)}},TypeTagStruct=class e extends TypeTag{constructor(e){super(),this.value=e}serialize(e){e.serializeU32AsUleb128(7),this.value.serialize(e)}static load(t){const n=StructTag.deserialize(t);return new e(n)}isStringTypeTag(){return"string"===this.value.module_name.value&&"String"===this.value.name.value&&this.value.address.toHexString()===AccountAddress.CORE_CODE_ADDRESS.toHexString()}},StructTag=class e{constructor(e,t,n,r){this.address=e,this.module_name=t,this.name=n,this.type_args=r}static fromString(t){const n=new TypeTagParser(t).parseTypeTag();return new e(n.value.address,n.value.module_name,n.value.name,n.value.type_args)}serialize(e){this.address.serialize(e),this.module_name.serialize(e),this.name.serialize(e),serializeVector(this.type_args,e)}static deserialize(t){const n=AccountAddress.deserialize(t),r=Identifier.deserialize(t),s=Identifier.deserialize(t),i=deserializeVector(t,TypeTag);return new e(n,r,s,i)}},stringStructTag=new StructTag(AccountAddress.fromHex("0x1"),new Identifier("string"),new Identifier("String"),[]);function optionStructTag(e){return new StructTag(AccountAddress.fromHex("0x1"),new Identifier("option"),new Identifier("Option"),[e])}function objectStructTag(e){return new StructTag(AccountAddress.fromHex("0x1"),new Identifier("object"),new Identifier("Object"),[e])}function bail(e){throw new TypeTagParserError(e)}function isWhiteSpace(e){return!!e.match(/\s/)}function isValidAlphabetic(e){return!!e.match(/[_A-Za-z0-9]/g)}function isGeneric(e){return!!e.match(/T\d+/g)}function nextToken(e,t){const n=e[t];if(":"===n){if("::"===e.slice(t,t+2))return[["COLON","::"],2];bail("Unrecognized token.")}else{if("<"===n)return[["LT","<"],1];if(">"===n)return[["GT",">"],1];if(","===n)return[["COMMA",","],1];if(isWhiteSpace(n)){let n="";for(let r=t;r<e.length;r+=1){const t=e[r];if(!isWhiteSpace(t))break;n=`${n}${t}`}return[["SPACE",n],n.length]}if(isValidAlphabetic(n)){let n="";for(let r=t;r<e.length;r+=1){const t=e[r];if(!isValidAlphabetic(t))break;n=`${n}${t}`}return isGeneric(n)?[["GENERIC",n],n.length]:[["IDENT",n],n.length]}}throw new Error("Unrecognized token.")}function tokenize(e){let t=0;const n=[];for(;t<e.length;){const[r,s]=nextToken(e,t);"SPACE"!==r[0]&&n.push(r),t+=s}return n}var TypeTagParser=class e{constructor(e,t){this.typeTags=[],this.tokens=tokenize(e),this.typeTags=t||[]}consume(e){const t=this.tokens.shift();t&&t[1]===e||bail("Invalid type tag.")}consumeWholeGeneric(){for(this.consume("<");">"!==this.tokens[0][1];)"<"===this.tokens[0][1]?this.consumeWholeGeneric():this.tokens.shift();this.consume(">")}parseCommaList(e,t){const n=[];for(this.tokens.length<=0&&bail("Invalid type tag.");!(this.tokens[0][1]===e||(n.push(this.parseTypeTag()),this.tokens.length>0&&this.tokens[0][1]===e)||(this.consume(","),this.tokens.length>0&&this.tokens[0][1]===e&&t));)this.tokens.length<=0&&bail("Invalid type tag.");return n}parseTypeTag(){0===this.tokens.length&&bail("Invalid type tag.");const[t,n]=this.tokens.shift();if("u8"===n)return new TypeTagU8;if("u16"===n)return new TypeTagU16;if("u32"===n)return new TypeTagU32;if("u64"===n)return new TypeTagU64;if("u128"===n)return new TypeTagU128;if("u256"===n)return new TypeTagU256;if("bool"===n)return new TypeTagBool;if("address"===n)return new TypeTagAddress;if("vector"===n){this.consume("<");const e=this.parseTypeTag();return this.consume(">"),new TypeTagVector(e)}if("string"===n)return new TypeTagStruct(stringStructTag);if("IDENT"===t&&(n.startsWith("0x")||n.startsWith("0X"))){const e=AccountAddress.fromHex(n);this.consume("::");const[t,r]=this.tokens.shift();"IDENT"!==t&&bail("Invalid type tag."),this.consume("::");const[s,i]=this.tokens.shift();if("IDENT"!==s&&bail("Invalid type tag."),AccountAddress.CORE_CODE_ADDRESS.toHexString()===e.toHexString()&&"object"===r&&"Object"===i)return this.consumeWholeGeneric(),new TypeTagAddress;let a=[];this.tokens.length>0&&"<"===this.tokens[0][1]&&(this.consume("<"),a=this.parseCommaList(">",!0),this.consume(">"));const o=new StructTag(e,new Identifier(r),new Identifier(i),a);return new TypeTagStruct(o)}if("GENERIC"===t){0===this.typeTags.length&&bail("Can't convert generic type since no typeTags were specified.");const t=parseInt(n.substring(1),10);return new e(this.typeTags[t]).parseTypeTag()}throw new Error("Invalid type tag.")}},TypeTagParserError=class extends Error{constructor(e){super(e),this.name="TypeTagParserError"}},RawTransaction=class e{constructor(e,t,n,r,s,i,a){this.sender=e,this.sequence_number=t,this.payload=n,this.max_gas_amount=r,this.gas_unit_price=s,this.expiration_timestamp_secs=i,this.chain_id=a}serialize(e){this.sender.serialize(e),e.serializeU64(this.sequence_number),this.payload.serialize(e),e.serializeU64(this.max_gas_amount),e.serializeU64(this.gas_unit_price),e.serializeU64(this.expiration_timestamp_secs),this.chain_id.serialize(e)}static deserialize(t){const n=AccountAddress.deserialize(t),r=t.deserializeU64(),s=TransactionPayload.deserialize(t),i=t.deserializeU64(),a=t.deserializeU64(),o=t.deserializeU64(),c=ChainId.deserialize(t);return new e(n,r,s,i,a,o,c)}},Script=class e{constructor(e,t,n){this.code=e,this.ty_args=t,this.args=n}serialize(e){e.serializeBytes(this.code),serializeVector(this.ty_args,e),serializeVector(this.args,e)}static deserialize(t){const n=t.deserializeBytes(),r=deserializeVector(t,TypeTag),s=deserializeVector(t,TransactionArgument);return new e(n,r,s)}},EntryFunction=class e{constructor(e,t,n,r){this.module_name=e,this.function_name=t,this.ty_args=n,this.args=r}static natural(t,n,r,s){return new e(ModuleId.fromStr(t),new Identifier(n),r,s)}static natual(t,n,r,s){return e.natural(t,n,r,s)}serialize(e){this.module_name.serialize(e),this.function_name.serialize(e),serializeVector(this.ty_args,e),e.serializeU32AsUleb128(this.args.length),this.args.forEach((t=>{e.serializeBytes(t)}))}static deserialize(t){const n=ModuleId.deserialize(t),r=Identifier.deserialize(t),s=deserializeVector(t,TypeTag),i=t.deserializeUleb128AsU32(),a=[];for(let e=0;e<i;e+=1)a.push(t.deserializeBytes());return new e(n,r,s,a)}},MultiSigTransactionPayload=class e{constructor(e){this.transaction_payload=e}serialize(e){e.serializeU32AsUleb128(0),this.transaction_payload.serialize(e)}static deserialize(t){return t.deserializeUleb128AsU32(),new e(EntryFunction.deserialize(t))}},MultiSig=class e{constructor(e,t){this.multisig_address=e,this.transaction_payload=t}serialize(e){this.multisig_address.serialize(e),void 0===this.transaction_payload?e.serializeBool(!1):(e.serializeBool(!0),this.transaction_payload.serialize(e))}static deserialize(t){const n=AccountAddress.deserialize(t);let r;return t.deserializeBool()&&(r=MultiSigTransactionPayload.deserialize(t)),new e(n,r)}},Module=class e{constructor(e){this.code=e}serialize(e){e.serializeBytes(this.code)}static deserialize(t){const n=t.deserializeBytes();return new e(n)}},ModuleId=class e{constructor(e,t){this.address=e,this.name=t}static fromStr(t){const n=t.split("::");if(2!==n.length)throw new Error("Invalid module id.");return new e(AccountAddress.fromHex(new HexString(n[0])),new Identifier(n[1]))}serialize(e){this.address.serialize(e),this.name.serialize(e)}static deserialize(t){const n=AccountAddress.deserialize(t),r=Identifier.deserialize(t);return new e(n,r)}},ChangeSet=class{serialize(e){throw new Error("Not implemented.")}static deserialize(e){throw new Error("Not implemented.")}},WriteSet=class{serialize(e){throw new Error("Not implmented.")}static deserialize(e){throw new Error("Not implmented.")}},SignedTransaction=class e{constructor(e,t){this.raw_txn=e,this.authenticator=t}serialize(e){this.raw_txn.serialize(e),this.authenticator.serialize(e)}static deserialize(t){const n=RawTransaction.deserialize(t),r=TransactionAuthenticator.deserialize(t);return new e(n,r)}},RawTransactionWithData=class{static deserialize(e){const t=e.deserializeUleb128AsU32();switch(t){case 0:return MultiAgentRawTransaction.load(e);case 1:return FeePayerRawTransaction.load(e);default:throw new Error(`Unknown variant index for RawTransactionWithData: ${t}`)}}},MultiAgentRawTransaction=class e extends RawTransactionWithData{constructor(e,t){super(),this.raw_txn=e,this.secondary_signer_addresses=t}serialize(e){e.serializeU32AsUleb128(0),this.raw_txn.serialize(e),serializeVector(this.secondary_signer_addresses,e)}static load(t){const n=RawTransaction.deserialize(t),r=deserializeVector(t,AccountAddress);return new e(n,r)}},FeePayerRawTransaction=class e extends RawTransactionWithData{constructor(e,t,n){super(),this.raw_txn=e,this.secondary_signer_addresses=t,this.fee_payer_address=n}serialize(e){e.serializeU32AsUleb128(1),this.raw_txn.serialize(e),serializeVector(this.secondary_signer_addresses,e),this.fee_payer_address.serialize(e)}static load(t){const n=RawTransaction.deserialize(t),r=deserializeVector(t,AccountAddress),s=AccountAddress.deserialize(t);return new e(n,r,s)}},TransactionPayload=class{static deserialize(e){const t=e.deserializeUleb128AsU32();switch(t){case 0:return TransactionPayloadScript.load(e);case 2:return TransactionPayloadEntryFunction.load(e);case 3:return TransactionPayloadMultisig.load(e);default:throw new Error(`Unknown variant index for TransactionPayload: ${t}`)}}},TransactionPayloadScript=class e extends TransactionPayload{constructor(e){super(),this.value=e}serialize(e){e.serializeU32AsUleb128(0),this.value.serialize(e)}static load(t){const n=Script.deserialize(t);return new e(n)}},TransactionPayloadEntryFunction=class e extends TransactionPayload{constructor(e){super(),this.value=e}serialize(e){e.serializeU32AsUleb128(2),this.value.serialize(e)}static load(t){const n=EntryFunction.deserialize(t);return new e(n)}},TransactionPayloadMultisig=class e extends TransactionPayload{constructor(e){super(),this.value=e}serialize(e){e.serializeU32AsUleb128(3),this.value.serialize(e)}static load(t){const n=MultiSig.deserialize(t);return new e(n)}},ChainId=class e{constructor(e){this.value=e}serialize(e){e.serializeU8(this.value)}static deserialize(t){const n=t.deserializeU8();return new e(n)}},TransactionArgument=class{static deserialize(e){const t=e.deserializeUleb128AsU32();switch(t){case 0:return TransactionArgumentU8.load(e);case 1:return TransactionArgumentU64.load(e);case 2:return TransactionArgumentU128.load(e);case 3:return TransactionArgumentAddress.load(e);case 4:return TransactionArgumentU8Vector.load(e);case 5:return TransactionArgumentBool.load(e);case 6:return TransactionArgumentU16.load(e);case 7:return TransactionArgumentU32.load(e);case 8:return TransactionArgumentU256.load(e);default:throw new Error(`Unknown variant index for TransactionArgument: ${t}`)}}},TransactionArgumentU8=class e extends TransactionArgument{constructor(e){super(),this.value=e}serialize(e){e.serializeU32AsUleb128(0),e.serializeU8(this.value)}static load(t){const n=t.deserializeU8();return new e(n)}},TransactionArgumentU16=class e extends TransactionArgument{constructor(e){super(),this.value=e}serialize(e){e.serializeU32AsUleb128(6),e.serializeU16(this.value)}static load(t){const n=t.deserializeU16();return new e(n)}},TransactionArgumentU32=class e extends TransactionArgument{constructor(e){super(),this.value=e}serialize(e){e.serializeU32AsUleb128(7),e.serializeU32(this.value)}static load(t){const n=t.deserializeU32();return new e(n)}},TransactionArgumentU64=class e extends TransactionArgument{constructor(e){super(),this.value=e}serialize(e){e.serializeU32AsUleb128(1),e.serializeU64(this.value)}static load(t){const n=t.deserializeU64();return new e(n)}},TransactionArgumentU128=class e extends TransactionArgument{constructor(e){super(),this.value=e}serialize(e){e.serializeU32AsUleb128(2),e.serializeU128(this.value)}static load(t){const n=t.deserializeU128();return new e(n)}},TransactionArgumentU256=class e extends TransactionArgument{constructor(e){super(),this.value=e}serialize(e){e.serializeU32AsUleb128(8),e.serializeU256(this.value)}static load(t){const n=t.deserializeU256();return new e(n)}},TransactionArgumentAddress=class e extends TransactionArgument{constructor(e){super(),this.value=e}serialize(e){e.serializeU32AsUleb128(3),this.value.serialize(e)}static load(t){const n=AccountAddress.deserialize(t);return new e(n)}},TransactionArgumentU8Vector=class e extends TransactionArgument{constructor(e){super(),this.value=e}serialize(e){e.serializeU32AsUleb128(4),e.serializeBytes(this.value)}static load(t){const n=t.deserializeBytes();return new e(n)}},TransactionArgumentBool=class e extends TransactionArgument{constructor(e){super(),this.value=e}serialize(e){e.serializeU32AsUleb128(5),e.serializeBool(this.value)}static load(t){const n=t.deserializeBool();return new e(n)}},Transaction=class{getHashSalt(){const e=import_sha3.sha3_256.create();return e.update("APTOS::Transaction"),e.digest()}static deserialize(e){const t=e.deserializeUleb128AsU32();if(0===t)return UserTransaction.load(e);throw new Error(`Unknown variant index for Transaction: ${t}`)}},UserTransaction=class e extends Transaction{constructor(e){super(),this.value=e}hash(){const e=import_sha3.sha3_256.create();return e.update(this.getHashSalt()),e.update(bcsToBytes(this)),e.digest()}serialize(e){e.serializeU32AsUleb128(0),this.value.serialize(e)}static load(t){return new e(SignedTransaction.deserialize(t))}},TypeArgumentABI=class e{constructor(e){this.name=e}serialize(e){e.serializeStr(this.name)}static deserialize(t){const n=t.deserializeStr();return new e(n)}},ArgumentABI=class e{constructor(e,t){this.name=e,this.type_tag=t}serialize(e){e.serializeStr(this.name),this.type_tag.serialize(e)}static deserialize(t){const n=t.deserializeStr(),r=TypeTag.deserialize(t);return new e(n,r)}},ScriptABI=class{static deserialize(e){const t=e.deserializeUleb128AsU32();switch(t){case 0:return TransactionScriptABI.load(e);case 1:return EntryFunctionABI.load(e);default:throw new Error(`Unknown variant index for TransactionPayload: ${t}`)}}},TransactionScriptABI=class e extends ScriptABI{constructor(e,t,n,r,s){super(),this.name=e,this.doc=t,this.code=n,this.ty_args=r,this.args=s}serialize(e){e.serializeU32AsUleb128(0),e.serializeStr(this.name),e.serializeStr(this.doc),e.serializeBytes(this.code),serializeVector(this.ty_args,e),serializeVector(this.args,e)}static load(t){const n=t.deserializeStr(),r=t.deserializeStr(),s=t.deserializeBytes(),i=deserializeVector(t,TypeArgumentABI),a=deserializeVector(t,ArgumentABI);return new e(n,r,s,i,a)}},EntryFunctionABI=class e extends ScriptABI{constructor(e,t,n,r,s){super(),this.name=e,this.module_name=t,this.doc=n,this.ty_args=r,this.args=s}serialize(e){e.serializeU32AsUleb128(1),e.serializeStr(this.name),this.module_name.serialize(e),e.serializeStr(this.doc),serializeVector(this.ty_args,e),serializeVector(this.args,e)}static load(t){const n=t.deserializeStr(),r=ModuleId.deserialize(t),s=t.deserializeStr(),i=deserializeVector(t,TypeArgumentABI),a=deserializeVector(t,ArgumentABI);return new e(n,r,s,i,a)}},import_sha32=require("@noble/hashes/sha3"),_AuthenticationKey=class e{constructor(t){if(t.length!==e.LENGTH)throw new Error("Expected a byte array of length 32");this.bytes=t}static fromMultiEd25519PublicKey(t){const n=t.toBytes(),r=new Uint8Array(n.length+1);r.set(n),r.set([e.MULTI_ED25519_SCHEME],n.length);const s=import_sha32.sha3_256.create();return s.update(r),new e(s.digest())}static fromEd25519PublicKey(t){const n=t.value,r=new Uint8Array(n.length+1);r.set(n),r.set([e.ED25519_SCHEME],n.length);const s=import_sha32.sha3_256.create();return s.update(r),new e(s.digest())}derivedAddress(){return HexString.fromUint8Array(this.bytes)}};_AuthenticationKey.LENGTH=32,_AuthenticationKey.MULTI_ED25519_SCHEME=1,_AuthenticationKey.ED25519_SCHEME=0,_AuthenticationKey.DERIVE_RESOURCE_ACCOUNT_SCHEME=255;var AuthenticationKey=_AuthenticationKey,RotationProofChallenge=class{constructor(e,t,n,r,s,i,a){this.accountAddress=e,this.moduleName=t,this.structName=n,this.sequenceNumber=r,this.originator=s,this.currentAuthKey=i,this.newPublicKey=a}serialize(e){this.accountAddress.serialize(e),e.serializeStr(this.moduleName),e.serializeStr(this.structName),e.serializeU64(this.sequenceNumber),this.originator.serialize(e),this.currentAuthKey.serialize(e),e.serializeBytes(this.newPublicKey)}},_AptosAccount=class e{static fromAptosAccountObject(t){return new e(HexString.ensure(t.privateKeyHex).toUint8Array(),t.address)}static isValidPath(e){return/^m\/44'\/637'\/[0-9]+'\/[0-9]+'\/[0-9]+'+$/.test(e)}static fromDerivePath(t,n){if(!e.isValidPath(t))throw new Error("Invalid derivation path");const r=n.trim().split(/\s+/).map((e=>e.toLowerCase())).join(" "),{key:s}=derivePath(t,(0,import_utils6.bytesToHex)(bip39.mnemonicToSeedSync(r)));return new e(s)}constructor(e,t){this.signingKey=e?import_tweetnacl2.default.sign.keyPair.fromSeed(e.slice(0,32)):import_tweetnacl2.default.sign.keyPair(),this.accountAddress=HexString.ensure(t||this.authKey().hex())}address(){return this.accountAddress}authKey(){const e=new Ed25519PublicKey(this.signingKey.publicKey);return AuthenticationKey.fromEd25519PublicKey(e).derivedAddress()}static getResourceAccountAddress(e,t){const n=bcsToBytes(AccountAddress.fromHex(e)),r=new Uint8Array([...n,...t,AuthenticationKey.DERIVE_RESOURCE_ACCOUNT_SCHEME]),s=import_sha33.sha3_256.create();return s.update(r),HexString.fromUint8Array(s.digest())}static getCollectionID(e,t){const n=(new TextEncoder).encode(`${e}::${t}`),r=import_sha256.sha256.create();return r.update(n),HexString.fromUint8Array(r.digest())}pubKey(){return HexString.fromUint8Array(this.signingKey.publicKey)}signBuffer(e){const t=import_tweetnacl2.default.sign.detached(e,this.signingKey.secretKey);return HexString.fromUint8Array(t)}signHexString(e){const t=HexString.ensure(e).toUint8Array();return this.signBuffer(t)}verifySignature(e,t){const n=HexString.ensure(e).toUint8Array(),r=HexString.ensure(t).toUint8Array();return import_tweetnacl2.default.sign.detached.verify(n,r,this.signingKey.publicKey)}toPrivateKeyObject(){return{address:this.address().hex(),publicKeyHex:this.pubKey().hex(),privateKeyHex:HexString.fromUint8Array(this.signingKey.secretKey.slice(0,32)).hex()}}};__decorateClass([Memoize()],_AptosAccount.prototype,"authKey",1);var AptosAccount=_AptosAccount;function getAddressFromAccountOrAddress(e){return e instanceof AptosAccount?e.address():HexString.ensure(e)}var CurrentTokenOwnershipFieldsFragmentDoc="\n    fragment CurrentTokenOwnershipFields on current_token_ownerships_v2 {\n  token_standard\n  token_properties_mutated_v1\n  token_data_id\n  table_type_v1\n  storage_id\n  property_version_v1\n  owner_address\n  last_transaction_version\n  last_transaction_timestamp\n  is_soulbound_v2\n  is_fungible_v2\n  amount\n  current_token_data {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    ",TokenDataFieldsFragmentDoc="\n    fragment TokenDataFields on current_token_datas {\n  creator_address\n  collection_name\n  description\n  metadata_uri\n  name\n  token_data_id_hash\n  collection_data_id_hash\n}\n    ",CollectionDataFieldsFragmentDoc="\n    fragment CollectionDataFields on current_collection_datas {\n  metadata_uri\n  supply\n  description\n  collection_name\n  collection_data_id_hash\n  table_handle\n  creator_address\n}\n    ",TokenActivitiesFieldsFragmentDoc="\n    fragment TokenActivitiesFields on token_activities_v2 {\n  after_value\n  before_value\n  entry_function_id_str\n  event_account_address\n  event_index\n  from_address\n  is_fungible_v2\n  property_version_v1\n  to_address\n  token_amount\n  token_data_id\n  token_standard\n  transaction_timestamp\n  transaction_version\n  type\n}\n    ",GetAccountCoinsDataCount="\n    query getAccountCoinsDataCount($address: String) {\n  current_fungible_asset_balances_aggregate(\n    where: {owner_address: {_eq: $address}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    ",GetAccountCoinsData="\n    query getAccountCoinsData($where_condition: current_fungible_asset_balances_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_fungible_asset_balances_order_by!]) {\n  current_fungible_asset_balances(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    amount\n    asset_type\n    is_frozen\n    is_primary\n    last_transaction_timestamp\n    last_transaction_version\n    owner_address\n    storage_id\n    token_standard\n    metadata {\n      token_standard\n      symbol\n      supply_aggregator_table_key_v1\n      supply_aggregator_table_handle_v1\n      project_uri\n      name\n      last_transaction_version\n      last_transaction_timestamp\n      icon_uri\n      decimals\n      creator_address\n      asset_type\n    }\n  }\n}\n    ",GetAccountCurrentTokens=`\n    query getAccountCurrentTokens($address: String!, $offset: Int, $limit: Int) {\n  current_token_ownerships(\n    where: {owner_address: {_eq: $address}, amount: {_gt: 0}}\n    order_by: [{last_transaction_version: desc}, {creator_address: asc}, {collection_name: asc}, {name: asc}]\n    offset: $offset\n    limit: $limit\n  ) {\n    amount\n    current_token_data {\n      ...TokenDataFields\n    }\n    current_collection_data {\n      ...CollectionDataFields\n    }\n    last_transaction_version\n    property_version\n  }\n}\n    ${TokenDataFieldsFragmentDoc}\n${CollectionDataFieldsFragmentDoc}`,GetAccountTokensCount="\n    query getAccountTokensCount($where_condition: current_token_ownerships_v2_bool_exp, $offset: Int, $limit: Int) {\n  current_token_ownerships_v2_aggregate(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n  ) {\n    aggregate {\n      count\n    }\n  }\n}\n    ",GetAccountTransactionsCount="\n    query getAccountTransactionsCount($address: String) {\n  account_transactions_aggregate(where: {account_address: {_eq: $address}}) {\n    aggregate {\n      count\n    }\n  }\n}\n    ",GetAccountTransactionsData=`\n    query getAccountTransactionsData($where_condition: account_transactions_bool_exp!, $offset: Int, $limit: Int, $order_by: [account_transactions_order_by!]) {\n  account_transactions(\n    where: $where_condition\n    order_by: $order_by\n    limit: $limit\n    offset: $offset\n  ) {\n    token_activities_v2 {\n      ...TokenActivitiesFields\n    }\n    transaction_version\n    account_address\n  }\n}\n    ${TokenActivitiesFieldsFragmentDoc}`,GetCollectionData="\n    query getCollectionData($where_condition: current_collections_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_collections_v2_order_by!]) {\n  current_collections_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    collection_id\n    collection_name\n    creator_address\n    current_supply\n    description\n    last_transaction_timestamp\n    last_transaction_version\n    max_supply\n    mutable_description\n    mutable_uri\n    table_handle_v1\n    token_standard\n    total_minted_v2\n    uri\n  }\n}\n    ",GetCollectionsWithOwnedTokens="\n    query getCollectionsWithOwnedTokens($where_condition: current_collection_ownership_v2_view_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_collection_ownership_v2_view_order_by!]) {\n  current_collection_ownership_v2_view(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      mutable_description\n      max_supply\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n    collection_id\n    collection_name\n    collection_uri\n    creator_address\n    distinct_tokens\n    last_transaction_version\n    owner_address\n    single_token_uri\n  }\n}\n    ",GetCurrentObjects="\n    query getCurrentObjects($where_condition: current_objects_bool_exp, $offset: Int, $limit: Int, $order_by: [current_objects_order_by!]) {\n  current_objects(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    allow_ungated_transfer\n    state_key_hash\n    owner_address\n    object_address\n    last_transaction_version\n    last_guid_creation_num\n    is_deleted\n  }\n}\n    ",GetDelegatedStakingActivities="\n    query getDelegatedStakingActivities($delegatorAddress: String, $poolAddress: String) {\n  delegated_staking_activities(\n    where: {delegator_address: {_eq: $delegatorAddress}, pool_address: {_eq: $poolAddress}}\n  ) {\n    amount\n    delegator_address\n    event_index\n    event_type\n    pool_address\n    transaction_version\n  }\n}\n    ",GetIndexerLedgerInfo="\n    query getIndexerLedgerInfo {\n  ledger_infos {\n    chain_id\n  }\n}\n    ",GetNumberOfDelegators='\n    query getNumberOfDelegators($poolAddress: String) {\n  num_active_delegator_per_pool(\n    where: {pool_address: {_eq: $poolAddress}, num_active_delegator: {_gt: "0"}}\n    distinct_on: pool_address\n  ) {\n    num_active_delegator\n    pool_address\n  }\n}\n    ',GetOwnedTokens=`\n    query getOwnedTokens($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`,GetOwnedTokensByTokenData=`\n    query getOwnedTokensByTokenData($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`,GetTokenActivities=`\n    query getTokenActivities($where_condition: token_activities_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [token_activities_v2_order_by!]) {\n  token_activities_v2(\n    where: $where_condition\n    order_by: $order_by\n    offset: $offset\n    limit: $limit\n  ) {\n    ...TokenActivitiesFields\n  }\n}\n    ${TokenActivitiesFieldsFragmentDoc}`,GetTokenActivitiesCount="\n    query getTokenActivitiesCount($token_id: String) {\n  token_activities_v2_aggregate(where: {token_data_id: {_eq: $token_id}}) {\n    aggregate {\n      count\n    }\n  }\n}\n    ",GetTokenCurrentOwnerData=`\n    query getTokenCurrentOwnerData($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`,GetTokenData="\n    query getTokenData($where_condition: current_token_datas_v2_bool_exp, $offset: Int, $limit: Int, $order_by: [current_token_datas_v2_order_by!]) {\n  current_token_datas_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    collection_id\n    description\n    is_fungible_v2\n    largest_property_version_v1\n    last_transaction_timestamp\n    last_transaction_version\n    maximum\n    supply\n    token_data_id\n    token_name\n    token_properties\n    token_standard\n    token_uri\n    current_collection {\n      collection_id\n      collection_name\n      creator_address\n      current_supply\n      description\n      last_transaction_timestamp\n      last_transaction_version\n      max_supply\n      mutable_description\n      mutable_uri\n      table_handle_v1\n      token_standard\n      total_minted_v2\n      uri\n    }\n  }\n}\n    ",GetTokenOwnedFromCollection=`\n    query getTokenOwnedFromCollection($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`,GetTokenOwnersData=`\n    query getTokenOwnersData($where_condition: current_token_ownerships_v2_bool_exp!, $offset: Int, $limit: Int, $order_by: [current_token_ownerships_v2_order_by!]) {\n  current_token_ownerships_v2(\n    where: $where_condition\n    offset: $offset\n    limit: $limit\n    order_by: $order_by\n  ) {\n    ...CurrentTokenOwnershipFields\n  }\n}\n    ${CurrentTokenOwnershipFieldsFragmentDoc}`,GetTopUserTransactions="\n    query getTopUserTransactions($limit: Int) {\n  user_transactions(limit: $limit, order_by: {version: desc}) {\n    version\n  }\n}\n    ",GetUserTransactions="\n    query getUserTransactions($where_condition: user_transactions_bool_exp!, $offset: Int, $limit: Int, $order_by: [user_transactions_order_by!]) {\n  user_transactions(\n    order_by: $order_by\n    where: $where_condition\n    limit: $limit\n    offset: $offset\n  ) {\n    version\n  }\n}\n    ",import_sha34=require("@noble/hashes/sha3");function assertType(e,t,n){if(!(null==t?void 0:t.includes(typeof e)))throw new Error(n||`Invalid arg: ${e} type should be ${t instanceof Array?t.join(" or "):t}`)}function ensureBoolean(e){if(assertType(e,["boolean","string"]),"boolean"==typeof e)return e;if("true"===e)return!0;if("false"===e)return!1;throw new Error("Invalid boolean string.")}function ensureNumber(e){if(assertType(e,["number","string"]),"number"==typeof e)return e;const t=Number.parseInt(e,10);if(Number.isNaN(t))throw new Error("Invalid number string.");return t}function ensureBigInt(e){return assertType(e,["number","bigint","string"]),BigInt(e)}function serializeArg(e,t,n){serializeArgInner(e,t,n,0)}function serializeArgInner(e,t,n,r){if(t instanceof TypeTagBool)n.serializeBool(ensureBoolean(e));else if(t instanceof TypeTagU8)n.serializeU8(ensureNumber(e));else if(t instanceof TypeTagU16)n.serializeU16(ensureNumber(e));else if(t instanceof TypeTagU32)n.serializeU32(ensureNumber(e));else if(t instanceof TypeTagU64)n.serializeU64(ensureBigInt(e));else if(t instanceof TypeTagU128)n.serializeU128(ensureBigInt(e));else if(t instanceof TypeTagU256)n.serializeU256(ensureBigInt(e));else if(t instanceof TypeTagAddress)serializeAddress(e,n);else if(t instanceof TypeTagVector)serializeVector2(e,t,n,r);else{if(!(t instanceof TypeTagStruct))throw new Error("Unsupported arg type.");serializeStruct(e,t,n,r)}}function serializeAddress(e,t){let n;if("string"==typeof e||e instanceof HexString)n=AccountAddress.fromHex(e);else{if(!(e instanceof AccountAddress))throw new Error("Invalid account address.");n=e}n.serialize(t)}function serializeVector2(e,t,n,r){if(t.value instanceof TypeTagU8){if(e instanceof Uint8Array)return void n.serializeBytes(e);if(e instanceof HexString)return void n.serializeBytes(e.toUint8Array());if("string"==typeof e)return void n.serializeStr(e)}if(!Array.isArray(e))throw new Error("Invalid vector args.");n.serializeU32AsUleb128(e.length),e.forEach((e=>serializeArgInner(e,t.value,n,r+1)))}function serializeStruct(e,t,n,r){const{address:s,module_name:i,name:a,type_args:o}=t.value,c=`${HexString.fromUint8Array(s.address).toShortString()}::${i.value}::${a.value}`;if("0x1::string::String"===c)assertType(e,["string"]),n.serializeStr(e);else if("0x1::object::Object"===c)serializeAddress(e,n);else{if("0x1::option::Option"!==c)throw new Error("Unsupported struct type in function argument");if(1!==o.length)throw new Error(`Option has the wrong number of type arguments ${o.length}`);serializeOption(e,o[0],n,r)}}function serializeOption(e,t,n,r){null==e?n.serializeU32AsUleb128(0):(n.serializeU32AsUleb128(1),serializeArgInner(e,t,n,r+1))}function argToTransactionArgument(e,t){if(t instanceof TypeTagBool)return new TransactionArgumentBool(ensureBoolean(e));if(t instanceof TypeTagU8)return new TransactionArgumentU8(ensureNumber(e));if(t instanceof TypeTagU16)return new TransactionArgumentU16(ensureNumber(e));if(t instanceof TypeTagU32)return new TransactionArgumentU32(ensureNumber(e));if(t instanceof TypeTagU64)return new TransactionArgumentU64(ensureBigInt(e));if(t instanceof TypeTagU128)return new TransactionArgumentU128(ensureBigInt(e));if(t instanceof TypeTagU256)return new TransactionArgumentU256(ensureBigInt(e));if(t instanceof TypeTagAddress){let t;if("string"==typeof e||e instanceof HexString)t=AccountAddress.fromHex(e);else{if(!(e instanceof AccountAddress))throw new Error("Invalid account address.");t=e}return new TransactionArgumentAddress(t)}if(t instanceof TypeTagVector&&t.value instanceof TypeTagU8){if(!(e instanceof Uint8Array))throw new Error(`${e} should be an instance of Uint8Array`);return new TransactionArgumentU8Vector(e)}throw new Error("Unknown type for TransactionArgument.")}var RAW_TRANSACTION_SALT="APTOS::RawTransaction",RAW_TRANSACTION_WITH_DATA_SALT="APTOS::RawTransactionWithData",TransactionBuilder=class{constructor(e,t){this.rawTxnBuilder=t,this.signingFunction=e}build(e,t,n){if(!this.rawTxnBuilder)throw new Error("this.rawTxnBuilder doesn't exist.");return this.rawTxnBuilder.build(e,t,n)}static getSigningMessage(e){const t=import_sha34.sha3_256.create();if(e instanceof RawTransaction)t.update(RAW_TRANSACTION_SALT);else if(e instanceof MultiAgentRawTransaction)t.update(RAW_TRANSACTION_WITH_DATA_SALT);else{if(!(e instanceof FeePayerRawTransaction))throw new Error("Unknown transaction type.");t.update(RAW_TRANSACTION_WITH_DATA_SALT)}const n=t.digest(),r=bcsToBytes(e),s=new Uint8Array(n.length+r.length);return s.set(n),s.set(r,n.length),s}},TransactionBuilderEd25519=class extends TransactionBuilder{constructor(e,t,n){super(e,n),this.publicKey=t}rawToSigned(e){const t=TransactionBuilder.getSigningMessage(e),n=this.signingFunction(t),r=new TransactionAuthenticatorEd25519(new Ed25519PublicKey(this.publicKey),n);return new SignedTransaction(e,r)}sign(e){return bcsToBytes(this.rawToSigned(e))}},TransactionBuilderMultiEd25519=class extends TransactionBuilder{constructor(e,t){super(e),this.publicKey=t}rawToSigned(e){const t=TransactionBuilder.getSigningMessage(e),n=this.signingFunction(t),r=new TransactionAuthenticatorMultiEd25519(this.publicKey,n);return new SignedTransaction(e,r)}sign(e){return bcsToBytes(this.rawToSigned(e))}},TransactionBuilderABI=class e{constructor(e,t){this.abiMap=new Map,e.forEach((e=>{const t=new Deserializer(e),n=ScriptABI.deserialize(t);let r;if(n instanceof EntryFunctionABI){const e=n,{address:t,name:s}=e.module_name;r=`${HexString.fromUint8Array(t.address).toShortString()}::${s.value}::${e.name}`}else{r=n.name}if(this.abiMap.has(r))throw new Error("Found conflicting ABI interfaces");this.abiMap.set(r,n)})),this.builderConfig={maxGasAmount:BigInt(DEFAULT_MAX_GAS_AMOUNT),expSecFromNow:DEFAULT_TXN_EXP_SEC_FROM_NOW,...t}}static toBCSArgs(e,t){if(e.length!==t.length)throw new Error("Wrong number of args provided.");return t.map(((t,n)=>{const r=new Serializer;return serializeArg(t,e[n].type_tag,r),r.getBytes()}))}static toTransactionArguments(e,t){if(e.length!==t.length)throw new Error("Wrong number of args provided.");return t.map(((t,n)=>argToTransactionArgument(t,e[n].type_tag)))}setSequenceNumber(e){this.builderConfig.sequenceNumber=BigInt(e)}buildTransactionPayload(t,n,r){const s=n.map((e=>new TypeTagParser(e).parseTypeTag()));let i;if(!this.abiMap.has(t))throw new Error(`Cannot find function: ${t}`);const a=this.abiMap.get(t);if(a instanceof EntryFunctionABI){const t=a,n=e.toBCSArgs(t.args,r);i=new TransactionPayloadEntryFunction(new EntryFunction(t.module_name,new Identifier(t.name),s,n))}else{if(!(a instanceof TransactionScriptABI))throw new Error("Unknown ABI format.");{const t=a,n=e.toTransactionArguments(t.args,r);i=new TransactionPayloadScript(new Script(t.code,s,n))}}return i}build(e,t,n){const{sender:r,sequenceNumber:s,gasUnitPrice:i,maxGasAmount:a,expSecFromNow:o,chainId:c}=this.builderConfig;if(!i)throw new Error("No gasUnitPrice provided.");const l=r instanceof AccountAddress?r:AccountAddress.fromHex(r),u=BigInt(Math.floor(Date.now()/1e3)+Number(o)),d=this.buildTransactionPayload(e,t,n);if(d)return new RawTransaction(l,BigInt(s),d,BigInt(a),BigInt(i),u,new ChainId(Number(c)));throw new Error("Invalid ABI.")}},TransactionBuilderRemoteABI=class{constructor(e,t){this.aptosClient=e,this.builderConfig=t}async fetchABI(e){const t=(await this.aptosClient.getAccountModules(e)).map((e=>e.abi)).flatMap((e=>e.exposed_functions.filter((e=>e.is_entry)).map((t=>({fullName:`${e.address}::${e.name}::${t.name}`,...t}))))),n=new Map;return t.forEach((e=>{n.set(e.fullName,e)})),n}async build(e,t,n){if(3!==(e=e.replace(/^0[xX]0*/g,"0x")).split("::").length)throw new Error("'func' needs to be a fully qualified function name in format <address>::<module>::<function>, e.g. 0x1::coin::transfer");const[r,s]=e.split("::"),i=await this.fetchABI(r);if(!i.has(e))throw new Error(`${e} doesn't exist.`);const a=i.get(e),o=a.params.filter((e=>"signer"!==e&&"&signer"!==e)).map(((e,n)=>new ArgumentABI(`var${n}`,new TypeTagParser(e,t).parseTypeTag()))),c=new EntryFunctionABI(a.name,ModuleId.fromStr(`${r}::${s}`),"",a.generic_type_params.map(((e,t)=>new TypeArgumentABI(`${t}`))),o),{sender:l,...u}=this.builderConfig,d=l instanceof AccountAddress?HexString.fromUint8Array(l.address):l,[{sequence_number:_},p,{gas_estimate:m}]=await Promise.all([(null==u?void 0:u.sequenceNumber)?Promise.resolve({sequence_number:null==u?void 0:u.sequenceNumber}):this.aptosClient.getAccount(d),(null==u?void 0:u.chainId)?Promise.resolve(null==u?void 0:u.chainId):this.aptosClient.getChainId(),(null==u?void 0:u.gasUnitPrice)?Promise.resolve({gas_estimate:null==u?void 0:u.gasUnitPrice}):this.aptosClient.estimateGasPrice()]);return new TransactionBuilderABI([bcsToBytes(c)],{sender:l,sequenceNumber:_,chainId:p,gasUnitPrice:BigInt(m),...u}).build(e,t,n)}};__decorateClass([MemoizeExpiring(6e5)],TransactionBuilderRemoteABI.prototype,"fetchABI",1);var _AptosClient=class e{constructor(e,t,n=!1){if(!e)throw new Error("Node URL cannot be empty.");this.nodeUrl=n?e:fixNodeUrl(e),this.config=null==t?{}:{...t}}async getAccount(e){const{data:t}=await get({url:this.nodeUrl,endpoint:`accounts/${HexString.ensure(e).hex()}`,originMethod:"getAccount",overrides:{...this.config}});return t}async getAccountTransactions(e,t){const{data:n}=await get({url:this.nodeUrl,endpoint:`accounts/${HexString.ensure(e).hex()}/transactions`,originMethod:"getAccountTransactions",params:{start:null==t?void 0:t.start,limit:null==t?void 0:t.limit},overrides:{...this.config}});return n}async getAccountModules(e,t){return await paginateWithCursor({url:this.nodeUrl,endpoint:`accounts/${e}/modules`,params:{ledger_version:null==t?void 0:t.ledgerVersion,limit:1e3},originMethod:"getAccountModules",overrides:{...this.config}})}async getAccountModule(e,t,n){const{data:r}=await get({url:this.nodeUrl,endpoint:`accounts/${HexString.ensure(e).hex()}/module/${t}`,originMethod:"getAccountModule",params:{ledger_version:null==n?void 0:n.ledgerVersion},overrides:{...this.config}});return r}async getAccountResources(e,t){return await paginateWithCursor({url:this.nodeUrl,endpoint:`accounts/${e}/resources`,params:{ledger_version:null==t?void 0:t.ledgerVersion,limit:9999},originMethod:"getAccountResources",overrides:{...this.config}})}async getAccountResource(e,t,n){const{data:r}=await get({url:this.nodeUrl,endpoint:`accounts/${HexString.ensure(e).hex()}/resource/${t}`,originMethod:"getAccountResource",params:{ledger_version:null==n?void 0:n.ledgerVersion},overrides:{...this.config}});return r}static generateBCSTransaction(e,t){return new TransactionBuilderEd25519((t=>{const n=e.signBuffer(t);return new aptos_types_exports.Ed25519Signature(n.toUint8Array())}),e.pubKey().toUint8Array()).sign(t)}static generateBCSSimulation(e,t){return new TransactionBuilderEd25519((e=>{const t=new Uint8Array(64);return new aptos_types_exports.Ed25519Signature(t)}),e.pubKey().toUint8Array()).sign(t)}async generateTransaction(e,t,n){const r={sender:e};if((null==n?void 0:n.sequence_number)&&(r.sequenceNumber=n.sequence_number),(null==n?void 0:n.gas_unit_price)&&(r.gasUnitPrice=n.gas_unit_price),(null==n?void 0:n.max_gas_amount)&&(r.maxGasAmount=n.max_gas_amount),null==n?void 0:n.expiration_timestamp_secs){const e=Number.parseInt(n.expiration_timestamp_secs,10);r.expSecFromNow=e-Math.floor(Date.now()/1e3)}return new TransactionBuilderRemoteABI(this,r).build(t.function,t.type_arguments,t.arguments)}async generateFeePayerTransaction(e,t,n,r=[],s){const i=await this.generateTransaction(e,t,s),a=r.map((e=>AccountAddress.fromHex(e)));return new aptos_types_exports.FeePayerRawTransaction(i,a,AccountAddress.fromHex(n))}async submitFeePayerTransaction(e,t,n,r=[]){const s=new aptos_types_exports.TransactionAuthenticatorFeePayer(t,e.secondary_signer_addresses,r,{address:e.fee_payer_address,authenticator:n}),i=bcsToBytes(new aptos_types_exports.SignedTransaction(e.raw_txn,s));return await this.submitSignedBCSTransaction(i)}async signMultiTransaction(e,t){const n=new aptos_types_exports.Ed25519Signature(e.signBuffer(TransactionBuilder.getSigningMessage(t)).toUint8Array()),r=new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(e.signingKey.publicKey),n);return Promise.resolve(r)}async signTransaction(t,n){return Promise.resolve(e.generateBCSTransaction(t,n))}async getEventsByCreationNumber(e,t,n){const{data:r}=await get({url:this.nodeUrl,endpoint:`accounts/${HexString.ensure(e).hex()}/events/${t}`,originMethod:"getEventsByCreationNumber",params:{start:null==n?void 0:n.start,limit:null==n?void 0:n.limit},overrides:{...this.config}});return r}async getEventsByEventHandle(e,t,n,r){const{data:s}=await get({url:this.nodeUrl,endpoint:`accounts/${HexString.ensure(e).hex()}/events/${t}/${n}`,originMethod:"getEventsByEventHandle",params:{start:null==r?void 0:r.start,limit:null==r?void 0:r.limit},overrides:{...this.config}});return s}async submitTransaction(e){return this.submitSignedBCSTransaction(e)}async simulateTransaction(t,n,r){let s;if(t instanceof AptosAccount)s=e.generateBCSSimulation(t,n);else if(t instanceof MultiEd25519PublicKey){s=new TransactionBuilderMultiEd25519((()=>{const{threshold:e}=t,n=[],r=[];for(let t=0;t<e;t+=1)n.push(t),r.push(new aptos_types_exports.Ed25519Signature(new Uint8Array(64)));const s=aptos_types_exports.MultiEd25519Signature.createBitmap(n);return new aptos_types_exports.MultiEd25519Signature(r,s)}),t).sign(n)}else{s=new TransactionBuilderEd25519((()=>{const e=new Uint8Array(64);return new aptos_types_exports.Ed25519Signature(e)}),t.toBytes()).sign(n)}return this.submitBCSSimulation(s,r)}async submitSignedBCSTransaction(e){const{data:t}=await post({url:this.nodeUrl,body:e,endpoint:"transactions",originMethod:"submitSignedBCSTransaction",contentType:"application/x.aptos.signed_transaction+bcs",overrides:{...this.config}});return t}async submitBCSSimulation(e,t){var n,r,s;const i={estimate_gas_unit_price:null!=(n=null==t?void 0:t.estimateGasUnitPrice)&&n,estimate_max_gas_amount:null!=(r=null==t?void 0:t.estimateMaxGasAmount)&&r,estimate_prioritized_gas_unit_price:null!=(s=null==t?void 0:t.estimatePrioritizedGasUnitPrice)&&s},{data:a}=await post({url:this.nodeUrl,body:e,endpoint:"transactions/simulate",params:i,originMethod:"submitBCSSimulation",contentType:"application/x.aptos.signed_transaction+bcs",overrides:{...this.config}});return a}async getTransactions(e){var t;const{data:n}=await get({url:this.nodeUrl,endpoint:"transactions",originMethod:"getTransactions",params:{start:null==(t=null==e?void 0:e.start)?void 0:t.toString(),limit:null==e?void 0:e.limit},overrides:{...this.config}});return n}async getTransactionByHash(e){const{data:t}=await get({url:this.nodeUrl,endpoint:`transactions/by_hash/${e}`,originMethod:"getTransactionByHash",overrides:{...this.config}});return t}async getTransactionByVersion(e){const{data:t}=await get({url:this.nodeUrl,endpoint:`transactions/by_version/${e}`,originMethod:"getTransactionByVersion",overrides:{...this.config}});return t}async transactionPending(e){try{return"pending_transaction"===(await this.getTransactionByHash(e)).type}catch(e){if(404===(null==e?void 0:e.status))return!0;throw e}}async waitForTransactionWithResult(e,t){var n,r;const s=null!=(n=null==t?void 0:t.timeoutSecs)?n:DEFAULT_TXN_TIMEOUT_SEC,i=null!=(r=null==t?void 0:t.checkSuccess)&&r;let a,o=!0,c=0;for(;o&&!(c>=s);){try{if(a=await this.getTransactionByHash(e),o="pending_transaction"===a.type,!o)break}catch(e){const t=e instanceof ApiError,n=t&&404!==e.status&&e.status>=400&&e.status<500;if(!t||n)throw e}await sleep(1e3),c+=1}if(void 0===a)throw new Error(`Waiting for transaction ${e} failed`);if(o)throw new WaitForTransactionError(`Waiting for transaction ${e} timed out after ${s} seconds`,a);if(!i)return a;if(!(null==a?void 0:a.success))throw new FailedTransactionError(`Transaction ${e} failed with an error: ${a.vm_status}`,a);return a}async waitForTransaction(e,t){await this.waitForTransactionWithResult(e,t)}async getLedgerInfo(){const{data:e}=await get({url:this.nodeUrl,originMethod:"getLedgerInfo",overrides:{...this.config}});return e}async getChainId(){return(await this.getLedgerInfo()).chain_id}async getTableItem(e,t,n){var r;return(await post({url:this.nodeUrl,body:t,endpoint:`tables/${e}/item`,originMethod:"getTableItem",params:{ledger_version:null==(r=null==n?void 0:n.ledgerVersion)?void 0:r.toString()},overrides:{...this.config}})).data}async generateRawTransaction(e,t,n){const[{sequence_number:r},s,{gas_estimate:i}]=await Promise.all([(null==n?void 0:n.providedSequenceNumber)?Promise.resolve({sequence_number:n.providedSequenceNumber}):this.getAccount(e),this.getChainId(),(null==n?void 0:n.gasUnitPrice)?Promise.resolve({gas_estimate:n.gasUnitPrice}):this.estimateGasPrice()]),{maxGasAmount:a,gasUnitPrice:o,expireTimestamp:c}={maxGasAmount:BigInt(DEFAULT_MAX_GAS_AMOUNT),gasUnitPrice:BigInt(i),expireTimestamp:BigInt(Math.floor(Date.now()/1e3)+DEFAULT_TXN_EXP_SEC_FROM_NOW),...n};return new aptos_types_exports.RawTransaction(aptos_types_exports.AccountAddress.fromHex(e),BigInt(r),t,a,o,c,new aptos_types_exports.ChainId(s))}async generateSignSubmitTransaction(t,n,r){const s=await this.generateRawTransaction(t.address(),n,r),i=e.generateBCSTransaction(t,s);return(await this.submitSignedBCSTransaction(i)).hash}async signAndSubmitTransaction(t,n){const r=e.generateBCSTransaction(t,n);return(await this.submitSignedBCSTransaction(r)).hash}async publishPackage(e,t,n,r){const s=new Serializer;serializeVector(n,s);const i=new aptos_types_exports.TransactionPayloadEntryFunction(aptos_types_exports.EntryFunction.natural("0x1::code","publish_package_txn",[],[bcsSerializeBytes(t),s.getBytes()]));return this.generateSignSubmitTransaction(e,i,r)}async createResourceAccountAndPublishPackage(e,t,n,r,s){const i=new Serializer;serializeVector(r,i);const a=new aptos_types_exports.TransactionPayloadEntryFunction(aptos_types_exports.EntryFunction.natural("0x1::resource_account","create_resource_account_and_publish_package",[],[bcsSerializeBytes(t),bcsSerializeBytes(n),i.getBytes()]));return this.generateSignSubmitTransaction(e,a,s)}async generateSignSubmitWaitForTransaction(e,t,n){const r=await this.generateSignSubmitTransaction(e,t,n);return this.waitForTransactionWithResult(r,n)}async estimateGasPrice(){const{data:e}=await get({url:this.nodeUrl,endpoint:"estimate_gas_price",originMethod:"estimateGasPrice",overrides:{...this.config}});return e}async estimateMaxGasAmount(e){const t=`0x1::coin::CoinStore<${APTOS_COIN}>`,[{gas_estimate:n},r]=await Promise.all([this.estimateGasPrice(),this.getAccountResources(e)]),s=r.find((e=>e.type===t));return BigInt(s.data.coin.value)/BigInt(n)}async rotateAuthKeyEd25519(t,n,r){const{sequence_number:s,authentication_key:i}=await this.getAccount(t.address()),a=new AptosAccount(n),o=new aptos_types_exports.RotationProofChallenge(aptos_types_exports.AccountAddress.CORE_CODE_ADDRESS,"account","RotationProofChallenge",BigInt(s),aptos_types_exports.AccountAddress.fromHex(t.address()),new aptos_types_exports.AccountAddress(new HexString(i).toUint8Array()),a.pubKey().toUint8Array()),c=HexString.fromUint8Array(bcsToBytes(o)),l=t.signHexString(c),u=a.signHexString(c),d=new aptos_types_exports.TransactionPayloadEntryFunction(aptos_types_exports.EntryFunction.natural("0x1::account","rotate_authentication_key",[],[bcsSerializeU8(0),bcsSerializeBytes(t.pubKey().toUint8Array()),bcsSerializeU8(0),bcsSerializeBytes(a.pubKey().toUint8Array()),bcsSerializeBytes(l.toUint8Array()),bcsSerializeBytes(u.toUint8Array())])),_=await this.generateRawTransaction(t.address(),d,r),p=e.generateBCSTransaction(t,_);return this.submitSignedBCSTransaction(p)}async lookupOriginalAddress(e){const t=await this.getAccountResource("0x1","0x1::account::OriginatingAddress"),{address_map:{handle:n}}=t.data,r=await this.getTableItem(n,{key_type:"address",value_type:"address",key:HexString.ensure(e).hex()});return new HexString(r)}async getBlockByHeight(e,t){const{data:n}=await get({url:this.nodeUrl,endpoint:`blocks/by_height/${e}`,originMethod:"getBlockByHeight",params:{with_transactions:t},overrides:{...this.config}});return n}async getBlockByVersion(e,t){const{data:n}=await get({url:this.nodeUrl,endpoint:`blocks/by_version/${e}`,originMethod:"getBlockByVersion",params:{with_transactions:t},overrides:{...this.config}});return n}async view(e,t){const{data:n}=await post({url:this.nodeUrl,body:e,endpoint:"view",originMethod:"getTableItem",params:{ledger_version:t},overrides:{...this.config}});return n}clearCache(e){clear(e)}};__decorateClass([parseApiError],_AptosClient.prototype,"getAccount",1),__decorateClass([parseApiError],_AptosClient.prototype,"getAccountTransactions",1),__decorateClass([parseApiError,MemoizeExpiring(6e5)],_AptosClient.prototype,"getAccountModules",1),__decorateClass([parseApiError],_AptosClient.prototype,"getAccountModule",1),__decorateClass([parseApiError],_AptosClient.prototype,"getAccountResources",1),__decorateClass([parseApiError],_AptosClient.prototype,"getAccountResource",1),__decorateClass([parseApiError],_AptosClient.prototype,"getEventsByCreationNumber",1),__decorateClass([parseApiError],_AptosClient.prototype,"getEventsByEventHandle",1),__decorateClass([parseApiError],_AptosClient.prototype,"submitSignedBCSTransaction",1),__decorateClass([parseApiError],_AptosClient.prototype,"submitBCSSimulation",1),__decorateClass([parseApiError],_AptosClient.prototype,"getTransactions",1),__decorateClass([parseApiError],_AptosClient.prototype,"getTransactionByHash",1),__decorateClass([parseApiError],_AptosClient.prototype,"getTransactionByVersion",1),__decorateClass([parseApiError],_AptosClient.prototype,"getLedgerInfo",1),__decorateClass([Memoize()],_AptosClient.prototype,"getChainId",1),__decorateClass([parseApiError],_AptosClient.prototype,"getTableItem",1),__decorateClass([parseApiError,Memoize({ttlMs:3e5,tags:["gas_estimates"]})],_AptosClient.prototype,"estimateGasPrice",1),__decorateClass([parseApiError],_AptosClient.prototype,"estimateMaxGasAmount",1),__decorateClass([parseApiError],_AptosClient.prototype,"getBlockByHeight",1),__decorateClass([parseApiError],_AptosClient.prototype,"getBlockByVersion",1),__decorateClass([parseApiError],_AptosClient.prototype,"view",1);var AptosClient=_AptosClient,WaitForTransactionError=class extends Error{constructor(e,t){super(e),this.lastSubmittedTransaction=t}},FailedTransactionError=class extends Error{constructor(e,t){super(e),this.transaction=t}},ApiError=class extends Error{constructor(e,t,n,r){super(t),this.status=e,this.message=t,this.errorCode=n,this.vmErrorCode=r}};function parseApiError(e,t,n){const r=n.value;return n.value=async function(...e){var t,n;try{return await r.apply(this,[...e])}catch(e){if(e instanceof AptosApiError)throw new ApiError(e.status,JSON.stringify({message:e.message,...e.data}),null==(t=e.data)?void 0:t.error_code,null==(n=e.data)?void 0:n.vm_error_code);throw e}},n}var IndexerClient=class e{constructor(e,t){this.endpoint=e,this.config=t}static validateAddress(e){if(e.length<66)throw new Error(`${e} is less than 66 chars long.`)}async queryIndexer(e){const t=await post({url:this.endpoint,body:e,overrides:{WITH_CREDENTIALS:!1,...this.config}});if(t.data.errors)throw new ApiError(t.data.errors[0].extensions.code,JSON.stringify({message:t.data.errors[0].message,error_code:t.data.errors[0].extensions.code}));return t.data.data}async getIndexerLedgerInfo(){const e={query:GetIndexerLedgerInfo};return this.queryIndexer(e)}async getAccountNFTs(t,n){const r=HexString.ensure(t).hex();e.validateAddress(r);const s={query:GetAccountCurrentTokens,variables:{address:r,offset:null==n?void 0:n.offset,limit:null==n?void 0:n.limit}};return this.queryIndexer(s)}async getTokenActivities(t,n){var r,s;const i=HexString.ensure(t).hex();e.validateAddress(i);const a={token_data_id:{_eq:i}};(null==n?void 0:n.tokenStandard)&&(a.token_standard={_eq:null==n?void 0:n.tokenStandard});const o={query:GetTokenActivities,variables:{where_condition:a,offset:null==(r=null==n?void 0:n.options)?void 0:r.offset,limit:null==(s=null==n?void 0:n.options)?void 0:s.limit,order_by:null==n?void 0:n.orderBy}};return this.queryIndexer(o)}async getTokenActivitiesCount(e){const t={query:GetTokenActivitiesCount,variables:{token_id:e}};return this.queryIndexer(t)}async getAccountTokensCount(t,n){var r,s;const i={owner_address:{_eq:t},amount:{_gt:"0"}};(null==n?void 0:n.tokenStandard)&&(i.token_standard={_eq:null==n?void 0:n.tokenStandard});const a=HexString.ensure(t).hex();e.validateAddress(a);const o={query:GetAccountTokensCount,variables:{where_condition:i,offset:null==(r=null==n?void 0:n.options)?void 0:r.offset,limit:null==(s=null==n?void 0:n.options)?void 0:s.limit}};return this.queryIndexer(o)}async getTokenData(t,n){var r,s;const i=HexString.ensure(t).hex();e.validateAddress(i);const a={token_data_id:{_eq:i}};(null==n?void 0:n.tokenStandard)&&(a.token_standard={_eq:null==n?void 0:n.tokenStandard});const o={query:GetTokenData,variables:{where_condition:a,offset:null==(r=null==n?void 0:n.options)?void 0:r.offset,limit:null==(s=null==n?void 0:n.options)?void 0:s.limit,order_by:null==n?void 0:n.orderBy}};return this.queryIndexer(o)}async getTokenOwnersData(t,n,r){var s,i;const a=HexString.ensure(t).hex();e.validateAddress(a);const o={token_data_id:{_eq:a},amount:{_gt:"0"}};n&&(o.property_version_v1={_eq:n}),(null==r?void 0:r.tokenStandard)&&(o.token_standard={_eq:null==r?void 0:r.tokenStandard});const c={query:GetTokenOwnersData,variables:{where_condition:o,offset:null==(s=null==r?void 0:r.options)?void 0:s.offset,limit:null==(i=null==r?void 0:r.options)?void 0:i.limit,order_by:null==r?void 0:r.orderBy}};return this.queryIndexer(c)}async getTokenCurrentOwnerData(t,n,r){var s,i;const a=HexString.ensure(t).hex();e.validateAddress(a);const o={token_data_id:{_eq:a},amount:{_gt:"0"}};n&&(o.property_version_v1={_eq:n}),(null==r?void 0:r.tokenStandard)&&(o.token_standard={_eq:null==r?void 0:r.tokenStandard});const c={query:GetTokenCurrentOwnerData,variables:{where_condition:o,offset:null==(s=null==r?void 0:r.options)?void 0:s.offset,limit:null==(i=null==r?void 0:r.options)?void 0:i.limit,order_by:null==r?void 0:r.orderBy}};return this.queryIndexer(c)}async getOwnedTokens(t,n){var r,s;const i=HexString.ensure(t).hex();e.validateAddress(i);const a={owner_address:{_eq:i},amount:{_gt:0}};(null==n?void 0:n.tokenStandard)&&(a.token_standard={_eq:null==n?void 0:n.tokenStandard});const o={query:GetOwnedTokens,variables:{where_condition:a,offset:null==(r=null==n?void 0:n.options)?void 0:r.offset,limit:null==(s=null==n?void 0:n.options)?void 0:s.limit,order_by:null==n?void 0:n.orderBy}};return this.queryIndexer(o)}async getOwnedTokensByTokenData(t,n){var r,s;const i=HexString.ensure(t).hex();e.validateAddress(i);const a={token_data_id:{_eq:i},amount:{_gt:0}};(null==n?void 0:n.tokenStandard)&&(a.token_standard={_eq:null==n?void 0:n.tokenStandard});const o={query:GetOwnedTokensByTokenData,variables:{where_condition:a,offset:null==(r=null==n?void 0:n.options)?void 0:r.offset,limit:null==(s=null==n?void 0:n.options)?void 0:s.limit,order_by:null==n?void 0:n.orderBy}};return this.queryIndexer(o)}async getTokenOwnedFromCollectionAddress(t,n,r){var s,i;const a=HexString.ensure(t).hex();e.validateAddress(a);const o=HexString.ensure(n).hex();e.validateAddress(o);const c={owner_address:{_eq:a},current_token_data:{collection_id:{_eq:o}},amount:{_gt:0}};(null==r?void 0:r.tokenStandard)&&(c.token_standard={_eq:null==r?void 0:r.tokenStandard});const l={query:GetTokenOwnedFromCollection,variables:{where_condition:c,offset:null==(s=null==r?void 0:r.options)?void 0:s.offset,limit:null==(i=null==r?void 0:r.options)?void 0:i.limit,order_by:null==r?void 0:r.orderBy}};return this.queryIndexer(l)}async getTokenOwnedFromCollectionNameAndCreatorAddress(e,t,n,r){const s=await this.getCollectionAddress(n,t,r);return await this.getTokenOwnedFromCollectionAddress(e,s,r)}async getCollectionData(t,n,r){var s,i;const a=HexString.ensure(t).hex();e.validateAddress(a);const o={collection_name:{_eq:n},creator_address:{_eq:a}};(null==r?void 0:r.tokenStandard)&&(o.token_standard={_eq:null==r?void 0:r.tokenStandard});const c={query:GetCollectionData,variables:{where_condition:o,offset:null==(s=null==r?void 0:r.options)?void 0:s.offset,limit:null==(i=null==r?void 0:r.options)?void 0:i.limit,order_by:null==r?void 0:r.orderBy}};return this.queryIndexer(c)}async getCollectionAddress(e,t,n){return(await this.getCollectionData(e,t,n)).current_collections_v2[0].collection_id}async getCollectionsWithOwnedTokens(t,n){var r,s;const i=HexString.ensure(t).hex();e.validateAddress(i);const a={owner_address:{_eq:i}};(null==n?void 0:n.tokenStandard)&&(a.current_collection={token_standard:{_eq:null==n?void 0:n.tokenStandard}});const o={query:GetCollectionsWithOwnedTokens,variables:{where_condition:a,offset:null==(r=null==n?void 0:n.options)?void 0:r.offset,limit:null==(s=null==n?void 0:n.options)?void 0:s.limit,order_by:null==n?void 0:n.orderBy}};return this.queryIndexer(o)}async getAccountTransactionsCount(t){const n=HexString.ensure(t).hex();e.validateAddress(n);const r={query:GetAccountTransactionsCount,variables:{address:n}};return this.queryIndexer(r)}async getAccountTransactionsData(t,n){var r,s;const i=HexString.ensure(t).hex();e.validateAddress(i);const a={query:GetAccountTransactionsData,variables:{where_condition:{account_address:{_eq:i}},offset:null==(r=null==n?void 0:n.options)?void 0:r.offset,limit:null==(s=null==n?void 0:n.options)?void 0:s.limit,order_by:null==n?void 0:n.orderBy}};return this.queryIndexer(a)}async getTopUserTransactions(e){const t={query:GetTopUserTransactions,variables:{limit:e}};return this.queryIndexer(t)}async getUserTransactions(e){var t,n;const r={version:{_lte:null==e?void 0:e.startVersion}},s={query:GetUserTransactions,variables:{where_condition:r,offset:null==(t=null==e?void 0:e.options)?void 0:t.offset,limit:null==(n=null==e?void 0:e.options)?void 0:n.limit,order_by:null==e?void 0:e.orderBy}};return this.queryIndexer(s)}async getDelegatedStakingActivities(t,n){const r=HexString.ensure(t).hex(),s=HexString.ensure(n).hex();e.validateAddress(r),e.validateAddress(s);const i={query:GetDelegatedStakingActivities,variables:{delegatorAddress:r,poolAddress:s}};return this.queryIndexer(i)}async getNumberOfDelegators(t){const n=HexString.ensure(t).hex();e.validateAddress(n);const r={query:GetNumberOfDelegators,variables:{poolAddress:n}};return this.queryIndexer(r)}async getAccountCoinsData(t,n){var r,s;const i=HexString.ensure(t).hex();e.validateAddress(i);const a={query:GetAccountCoinsData,variables:{where_condition:{owner_address:{_eq:i}},offset:null==(r=null==n?void 0:n.options)?void 0:r.offset,limit:null==(s=null==n?void 0:n.options)?void 0:s.limit,order_by:null==n?void 0:n.orderBy}};return this.queryIndexer(a)}async getAccountCoinsDataCount(t){const n=HexString.ensure(t).hex();e.validateAddress(n);const r={query:GetAccountCoinsDataCount,variables:{address:n}};return this.queryIndexer(r)}async getAccountOwnedObjects(t,n){var r,s;const i=HexString.ensure(t).hex();e.validateAddress(i);const a={query:GetCurrentObjects,variables:{where_condition:{owner_address:{_eq:i}},offset:null==(r=null==n?void 0:n.options)?void 0:r.offset,limit:null==(s=null==n?void 0:n.options)?void 0:s.limit,order_by:null==n?void 0:n.orderBy}};return this.queryIndexer(a)}},Provider=class{constructor(e,t,n=!1){let r=null,s=null;if("object"==typeof e&&isCustomEndpoints(e)?(r=e.fullnodeUrl,s=e.indexerUrl,this.network="CUSTOM"):(r=NetworkToNodeAPI[e],s=NetworkToIndexerAPI[e],this.network=e),"CUSTOM"===this.network&&!r)throw new Error("fullnode url is not provided");s&&(this.indexerClient=new IndexerClient(s,t)),this.aptosClient=new AptosClient(r,t,n)}};function applyMixin(e,t,n){Object.getOwnPropertyNames(t.prototype).forEach((r=>{const s=Object.getOwnPropertyDescriptor(t.prototype,r);s&&(s.value=function(...e){return this[n][r](...e)},Object.defineProperty(e.prototype,r,s))})),Object.getOwnPropertyNames(t).forEach((r=>{const s=Object.getOwnPropertyDescriptor(t,r);s&&(s.value=function(...e){return this[n][r](...e)},e.hasOwnProperty.call(e,r)||Object.defineProperty(e,r,s))}))}function isCustomEndpoints(e){return void 0!==e.fullnodeUrl&&"string"==typeof e.fullnodeUrl}applyMixin(Provider,AptosClient,"aptosClient"),applyMixin(Provider,IndexerClient,"indexerClient");var PropertyValue=class{constructor(e,t){this.type=e,this.value=t}},PropertyMap=class{constructor(){this.data={}}setProperty(e,t){this.data[e]=t}};function getPropertyType(e){let t;return t="string"===e||"String"===e?new TypeTagStruct(stringStructTag):new TypeTagParser(e).parseTypeTag(),t}function getPropertyValueRaw(e,t){if(e.length!==t.length)throw new Error("Length of property values and types not match");const n=new Array;return t.forEach(((t,r)=>{try{const s=getPropertyType(t),i=new Serializer;serializeArg(e[r],s,i),n.push(i.getBytes())}catch(t){n.push((new TextEncoder).encode(e[r]))}})),n}function getSinglePropertyValueRaw(e,t){if(!e||!t)throw new Error("value or type can not be empty");try{const n=getPropertyType(t),r=new Serializer;return serializeArg(e,n,r),r.getBytes()}catch(t){return(new TextEncoder).encode(e)}}function deserializePropertyMap(e){const t=e.map.data,n=new PropertyMap;return t.forEach((e=>{const{key:t}=e,r=e.value.value,s=e.value.type,i=deserializeValueBasedOnTypeTag(getPropertyType(s),r),a=new PropertyValue(s,i);n.setProperty(t,a)})),n}function deserializeValueBasedOnTypeTag(e,t){const n=new Deserializer(new HexString(t).toUint8Array());let r="";return r=e instanceof TypeTagU8?n.deserializeU8().toString():e instanceof TypeTagU64?n.deserializeU64().toString():e instanceof TypeTagU128?n.deserializeU128().toString():e instanceof TypeTagBool?n.deserializeBool()?"true":"false":e instanceof TypeTagAddress?HexString.fromUint8Array(n.deserializeFixedBytes(32)).hex():e instanceof TypeTagStruct&&e.isStringTypeTag()?n.deserializeStr():t,r}var token_types_exports={};__export(token_types_exports,{PropertyMap:()=>PropertyMap,PropertyValue:()=>PropertyValue,Token:()=>Token,TokenData:()=>TokenData});var TokenData=class{constructor(e,t,n,r,s,i,a,o){this.collection=e,this.description=t,this.name=n,this.maximum=r,this.supply=s,this.uri=i,this.default_properties=deserializePropertyMap(a),this.mutability_config=o}},Token=class{constructor(e,t,n){this.id=e,this.amount=t,this.token_properties=deserializePropertyMap(n)}},TokenClient=class{constructor(e){this.aptosClient=e}async createCollection(e,t,n,r,s=MAX_U64_BIG_INT,i){const a=new TransactionBuilderRemoteABI(this.aptosClient,{sender:e.address(),...i}),o=await a.build("0x3::token::create_collection_script",[],[t,n,r,s,[!1,!1,!1]]),c=AptosClient.generateBCSTransaction(e,o);return(await this.aptosClient.submitSignedBCSTransaction(c)).hash}async createToken(e,t,n,r,s,i,a=MAX_U64_BIG_INT,o=e.address(),c=0,l=0,u=[],d=[],_=[],p){const m=new TransactionBuilderRemoteABI(this.aptosClient,{sender:e.address(),...p}),h=await m.build("0x3::token::create_token_script",[],[t,n,r,s,a,i,o,c,l,[!1,!1,!1,!1,!1],u,getPropertyValueRaw(d,_),_]),g=AptosClient.generateBCSTransaction(e,h);return(await this.aptosClient.submitSignedBCSTransaction(g)).hash}async createTokenWithMutabilityConfig(e,t,n,r,s,i,a=MAX_U64_BIG_INT,o=e.address(),c=0,l=0,u=[],d=[],_=[],p=[!1,!1,!1,!1,!1],m){const h=new TransactionBuilderRemoteABI(this.aptosClient,{sender:e.address(),...m}),g=await h.build("0x3::token::create_token_script",[],[t,n,r,s,a,i,o,c,l,p,u,d,_]),y=AptosClient.generateBCSTransaction(e,g);return(await this.aptosClient.submitSignedBCSTransaction(y)).hash}async offerToken(e,t,n,r,s,i,a=0,o){const c=new TransactionBuilderRemoteABI(this.aptosClient,{sender:e.address(),...o}),l=await c.build("0x3::token_transfers::offer_script",[],[t,n,r,s,a,i]),u=AptosClient.generateBCSTransaction(e,l);return(await this.aptosClient.submitSignedBCSTransaction(u)).hash}async claimToken(e,t,n,r,s,i=0,a){const o=new TransactionBuilderRemoteABI(this.aptosClient,{sender:e.address(),...a}),c=await o.build("0x3::token_transfers::claim_script",[],[t,n,r,s,i]),l=AptosClient.generateBCSTransaction(e,c);return(await this.aptosClient.submitSignedBCSTransaction(l)).hash}async cancelTokenOffer(e,t,n,r,s,i=0,a){const o=new TransactionBuilderRemoteABI(this.aptosClient,{sender:e.address(),...a}),c=await o.build("0x3::token_transfers::cancel_offer_script",[],[t,n,r,s,i]),l=AptosClient.generateBCSTransaction(e,c);return(await this.aptosClient.submitSignedBCSTransaction(l)).hash}async directTransferToken(e,t,n,r,s,i,a=0,o){const c=new TransactionBuilderRemoteABI(this.aptosClient,{sender:e.address(),...o}),l=await c.build("0x3::token::direct_transfer_script",[],[n,r,s,a,i]),u=new aptos_types_exports.MultiAgentRawTransaction(l,[aptos_types_exports.AccountAddress.fromHex(t.address())]),d=new aptos_types_exports.Ed25519Signature(e.signBuffer(TransactionBuilder.getSigningMessage(u)).toUint8Array()),_=new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(e.signingKey.publicKey),d),p=new aptos_types_exports.Ed25519Signature(t.signBuffer(TransactionBuilder.getSigningMessage(u)).toUint8Array()),m=new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(t.signingKey.publicKey),p),h=new aptos_types_exports.TransactionAuthenticatorMultiAgent(_,[aptos_types_exports.AccountAddress.fromHex(t.address())],[m]),g=bcsToBytes(new aptos_types_exports.SignedTransaction(l,h));return(await this.aptosClient.submitSignedBCSTransaction(g)).hash}async directTransferTokenWithFeePayer(e,t,n,r,s,i,a,o=0,c){const l=new TransactionBuilderRemoteABI(this.aptosClient,{sender:e.address(),...c}),u=await l.build("0x3::token::direct_transfer_script",[],[n,r,s,o,i]),d=new aptos_types_exports.FeePayerRawTransaction(u,[aptos_types_exports.AccountAddress.fromHex(t.address())],aptos_types_exports.AccountAddress.fromHex(a.address())),_=new aptos_types_exports.Ed25519Signature(e.signBuffer(TransactionBuilder.getSigningMessage(d)).toUint8Array()),p=new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(e.signingKey.publicKey),_),m=new aptos_types_exports.Ed25519Signature(t.signBuffer(TransactionBuilder.getSigningMessage(d)).toUint8Array()),h=new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(t.signingKey.publicKey),m),g=new aptos_types_exports.Ed25519Signature(a.signBuffer(TransactionBuilder.getSigningMessage(d)).toUint8Array()),y=new aptos_types_exports.AccountAuthenticatorEd25519(new aptos_types_exports.Ed25519PublicKey(a.signingKey.publicKey),g),T=new aptos_types_exports.TransactionAuthenticatorFeePayer(p,[aptos_types_exports.AccountAddress.fromHex(t.address())],[h],{address:aptos_types_exports.AccountAddress.fromHex(a.address()),authenticator:y}),A=bcsToBytes(new aptos_types_exports.SignedTransaction(u,T));return(await this.aptosClient.submitSignedBCSTransaction(A)).hash}async optInTokenTransfer(e,t,n){const r=new TransactionBuilderRemoteABI(this.aptosClient,{sender:e.address(),...n}),s=await r.build("0x3::token::opt_in_direct_transfer",[],[t]),i=AptosClient.generateBCSTransaction(e,s);return(await this.aptosClient.submitSignedBCSTransaction(i)).hash}async transferWithOptIn(e,t,n,r,s,i,a,o){const c=new TransactionBuilderRemoteABI(this.aptosClient,{sender:e.address(),...o}),l=await c.build("0x3::token::transfer_with_opt_in",[],[t,n,r,s,i,a]),u=AptosClient.generateBCSTransaction(e,l);return(await this.aptosClient.submitSignedBCSTransaction(u)).hash}async burnByCreator(e,t,n,r,s,i,a){const o=new TransactionBuilderRemoteABI(this.aptosClient,{sender:e.address(),...a}),c=await o.build("0x3::token::burn_by_creator",[],[t,n,r,s,i]),l=AptosClient.generateBCSTransaction(e,c);return(await this.aptosClient.submitSignedBCSTransaction(l)).hash}async burnByOwner(e,t,n,r,s,i,a){const o=new TransactionBuilderRemoteABI(this.aptosClient,{sender:e.address(),...a}),c=await o.build("0x3::token::burn",[],[t,n,r,s,i]),l=AptosClient.generateBCSTransaction(e,c);return(await this.aptosClient.submitSignedBCSTransaction(l)).hash}async mutateTokenProperties(e,t,n,r,s,i,a,o,c,l,u){const d=new TransactionBuilderRemoteABI(this.aptosClient,{sender:e.address(),...u}),_=await d.build("0x3::token::mutate_token_properties",[],[t,n,r,s,i,a,o,c,l]),p=AptosClient.generateBCSTransaction(e,_);return(await this.aptosClient.submitSignedBCSTransaction(p)).hash}async getCollectionData(e,t){const n=(await this.aptosClient.getAccountResources(e)).find((e=>"0x3::token::Collections"===e.type)),{handle:r}=n.data.collection_data,s={key_type:"0x1::string::String",value_type:"0x3::token::CollectionData",key:t};return await this.aptosClient.getTableItem(r,s)}async getTokenData(e,t,n){const r=e instanceof HexString?e.hex():e,s=await this.aptosClient.getAccountResource(r,"0x3::token::Collections"),{handle:i}=s.data.token_data,a={key_type:"0x3::token::TokenDataId",value_type:"0x3::token::TokenData",key:{creator:r,collection:t,name:n}},o=await this.aptosClient.getTableItem(i,a);return new TokenData(o.collection,o.description,o.name,o.maximum,o.supply,o.uri,o.default_properties,o.mutability_config)}async getToken(e,t,n,r="0"){const s={creator:e instanceof HexString?e.hex():e,collection:t,name:n};return this.getTokenForAccount(e,{token_data_id:s,property_version:r})}async getTokenForAccount(e,t){const n=await this.aptosClient.getAccountResource(e instanceof HexString?e.hex():e,"0x3::token::TokenStore"),{handle:r}=n.data.tokens,s={key_type:"0x3::token::TokenId",value_type:"0x3::token::Token",key:t};try{const e=await this.aptosClient.getTableItem(r,s);return new Token(e.id,e.amount,e.token_properties)}catch(e){return 404===(null==e?void 0:e.status)?{id:t,amount:"0",token_properties:new PropertyMap}:e}}},FungibleAssetClient=class{constructor(e){this.assetType="0x1::fungible_asset::Metadata",this.provider=e}async transfer(e,t,n,r,s){const i=await this.generateTransfer(e,t,n,r,s);return await this.provider.signAndSubmitTransaction(e,i)}async getPrimaryBalance(e,t){const n={function:"0x1::primary_fungible_store::balance",type_arguments:[this.assetType],arguments:[HexString.ensure(e).hex(),HexString.ensure(t).hex()]},r=await this.provider.view(n);return BigInt(r[0])}async generateTransfer(e,t,n,r,s){const i=new TransactionBuilderRemoteABI(this.provider,{sender:e.address(),...s});return await i.build("0x1::primary_fungible_store::transfer",[this.assetType],[HexString.ensure(t).hex(),HexString.ensure(n).hex(),r])}},PropertyTypeMap={BOOLEAN:"bool",U8:"u8",U16:"u16",U32:"u32",U64:"u64",U128:"u128",U256:"u256",ADDRESS:"address",VECTOR:"vector<u8>",STRING:"string"},AptosToken=class{constructor(e){this.tokenType="0x4::token::Token",this.provider=e}async submitTransaction(e,t,n,r,s){const i=new TransactionBuilderRemoteABI(this.provider,{sender:e.address(),...s}),a=await i.build(`0x4::aptos_token::${t}`,n,r),o=AptosClient.generateBCSTransaction(e,a);return(await this.provider.submitSignedBCSTransaction(o)).hash}async createCollection(e,t,n,r,s=MAX_U64_BIG_INT,i,a){var o,c,l,u,d,_,p,m,h,g,y;return this.submitTransaction(e,"create_collection",[],[t,s,n,r,null==(o=null==i?void 0:i.mutableDescription)||o,null==(c=null==i?void 0:i.mutableRoyalty)||c,null==(l=null==i?void 0:i.mutableURI)||l,null==(u=null==i?void 0:i.mutableTokenDescription)||u,null==(d=null==i?void 0:i.mutableTokenName)||d,null==(_=null==i?void 0:i.mutableTokenProperties)||_,null==(p=null==i?void 0:i.mutableTokenURI)||p,null==(m=null==i?void 0:i.tokensBurnableByCreator)||m,null==(h=null==i?void 0:i.tokensFreezableByCreator)||h,null!=(g=null==i?void 0:i.royaltyNumerator)?g:0,null!=(y=null==i?void 0:i.royaltyDenominator)?y:1],a)}async mint(e,t,n,r,s,i=[],a=[],o=[],c){return this.submitTransaction(e,"mint",[],[t,n,r,s,i,a,getPropertyValueRaw(o,a)],c)}async mintSoulBound(e,t,n,r,s,i,a=[],o=[],c=[],l){return this.submitTransaction(e,"mint_soul_bound",[],[t,n,r,s,a,o,getPropertyValueRaw(c,o),i.address().hex()],l)}async burnToken(e,t,n,r){return this.submitTransaction(e,"burn",[n||this.tokenType],[HexString.ensure(t).hex()],r)}async freezeTokenTransafer(e,t,n,r){return this.submitTransaction(e,"freeze_transfer",[n||this.tokenType],[HexString.ensure(t).hex()],r)}async unfreezeTokenTransafer(e,t,n,r){return this.submitTransaction(e,"unfreeze_transfer",[n||this.tokenType],[HexString.ensure(t).hex()],r)}async setTokenDescription(e,t,n,r,s){return this.submitTransaction(e,"set_description",[r||this.tokenType],[HexString.ensure(t).hex(),n],s)}async setTokenName(e,t,n,r,s){return this.submitTransaction(e,"set_name",[r||this.tokenType],[HexString.ensure(t).hex(),n],s)}async setTokenURI(e,t,n,r,s){return this.submitTransaction(e,"set_uri",[r||this.tokenType],[HexString.ensure(t).hex(),n],s)}async addTokenProperty(e,t,n,r,s,i,a){return this.submitTransaction(e,"add_property",[i||this.tokenType],[HexString.ensure(t).hex(),n,PropertyTypeMap[r],getSinglePropertyValueRaw(s,PropertyTypeMap[r])],a)}async removeTokenProperty(e,t,n,r,s){return this.submitTransaction(e,"remove_property",[r||this.tokenType],[HexString.ensure(t).hex(),n],s)}async updateTokenProperty(e,t,n,r,s,i,a){return this.submitTransaction(e,"update_property",[i||this.tokenType],[HexString.ensure(t).hex(),n,PropertyTypeMap[r],getSinglePropertyValueRaw(s,PropertyTypeMap[r])],a)}async addTypedProperty(e,t,n,r,s,i,a){return this.submitTransaction(e,"add_typed_property",[i||this.tokenType,PropertyTypeMap[r]],[HexString.ensure(t).hex(),n,s],a)}async updateTypedProperty(e,t,n,r,s,i,a){return this.submitTransaction(e,"update_typed_property",[i||this.tokenType,PropertyTypeMap[r]],[HexString.ensure(t).hex(),n,s],a)}async transferTokenOwnership(e,t,n,r,s){const i=new TransactionBuilderRemoteABI(this.provider,{sender:e.address(),...s}),a=await i.build("0x1::object::transfer",[r||this.tokenType],[HexString.ensure(t).hex(),HexString.ensure(n).hex()]),o=AptosClient.generateBCSTransaction(e,a);return(await this.provider.submitSignedBCSTransaction(o)).hash}async transfer(e,t){let n=t;if(null==n){n=(await this.provider.getTokenData(HexString.ensure(e.tokenAddress).hex())).current_token_datas_v2[0].is_fungible_v2}if(n){const t=e,n=new FungibleAssetClient(this.provider);return await n.transfer(t.owner,t.tokenAddress,t.recipient,t.amount,t.extraArgs)}const r=e;return await this.transferTokenOwnership(r.owner,r.tokenAddress,r.recipient,r.tokenType,r.extraArgs)}async burnObject(e,t,n,r){const s=new TransactionBuilderRemoteABI(this.provider,{sender:e.address(),...r}),i=await s.build("0x1::object::burn",[n||"0x1::object::ObjectCore"],[HexString.ensure(t).hex()]),a=AptosClient.generateBCSTransaction(e,i);return(await this.provider.submitSignedBCSTransaction(a)).hash}},TRANSFER_COINS="0x1::aptos_account::transfer_coins",COIN_TRANSFER="0x1::coin::transfer",CoinClient=class{constructor(e){this.aptosClient=e}async transfer(e,t,n,r){var s,i,a;const o=(null!=(s=null==r?void 0:r.coinType)?s:"").toString().includes("::");if((null==r?void 0:r.coinType)&&!o&&AccountAddress.isValid(r.coinType)){console.warn("to transfer a fungible asset, use `FungibleAssetClient()` class for better support");const s=new Provider({fullnodeUrl:this.aptosClient.nodeUrl,indexerUrl:null!=(i=NetworkToIndexerAPI[NodeAPIToNetwork[this.aptosClient.nodeUrl]])?i:this.aptosClient.nodeUrl}),a=new FungibleAssetClient(s);return await a.transfer(e,null==r?void 0:r.coinType,getAddressFromAccountOrAddress(t),n)}const c=null!=(a=null==r?void 0:r.coinType)?a:APTOS_COIN;let l;l=void 0===(null==r?void 0:r.createReceiverIfMissing)||(null==r?void 0:r.createReceiverIfMissing)?TRANSFER_COINS:COIN_TRANSFER;const u=getAddressFromAccountOrAddress(t),d=new TransactionBuilderRemoteABI(this.aptosClient,{sender:e.address(),...r}),_=await d.build(l,[c],[u,n]),p=AptosClient.generateBCSTransaction(e,_);return(await this.aptosClient.submitSignedBCSTransaction(p)).hash}async checkBalance(e,t){var n,r,s;const i=(null!=(n=null==t?void 0:t.coinType)?n:"").toString().includes("::");if((null==t?void 0:t.coinType)&&!i&&AccountAddress.isValid(t.coinType)){console.warn("to check balance of a fungible asset, use `FungibleAssetClient()` class for better support");const n=new Provider({fullnodeUrl:this.aptosClient.nodeUrl,indexerUrl:null!=(r=NetworkToIndexerAPI[NodeAPIToNetwork[this.aptosClient.nodeUrl]])?r:this.aptosClient.nodeUrl}),s=new FungibleAssetClient(n);return await s.getPrimaryBalance(getAddressFromAccountOrAddress(e),null==t?void 0:t.coinType)}const a=`0x1::coin::CoinStore<${null!=(s=null==t?void 0:t.coinType)?s:APTOS_COIN}>`,o=getAddressFromAccountOrAddress(e),c=await this.aptosClient.getAccountResource(o,a);return BigInt(c.data.coin.value)}},FaucetClient=class extends AptosClient{constructor(e,t,n){if(super(e,n),!t)throw new Error("Faucet URL cannot be empty.");this.faucetUrl=t,this.config=n}async fundAccount(e,t,n=DEFAULT_TXN_TIMEOUT_SEC){const{data:r}=await post({url:this.faucetUrl,endpoint:"mint",body:null,params:{address:HexString.ensure(e).noPrefix(),amount:t},overrides:{...this.config},originMethod:"fundAccount"}),s=[];for(let e=0;e<r.length;e+=1){const t=r[e];s.push(this.waitForTransaction(t,{timeoutSecs:n}))}return await Promise.all(s),r}},ansContractsMap={testnet:"0x5f8fd2347449685cf41d4db97926ec3a096eaf381332be4f1318ad4d16a8497c",mainnet:"0x867ed1f6bf916171b1de3ee92849b8978b7d1b9e0a8cc982a3d19d535dfd9c0c"},nameComponentPattern=/^[a-z\d][a-z\d-]{1,61}[a-z\d]$/,namePattern=new RegExp("^(?:(?<subdomain>[^.]+)\\.(?!apt$))?(?<domain>[^.]+)(?:\\.apt)?$"),AnsClient=class{constructor(e,t){var n;if(this.provider=e,!ansContractsMap[this.provider.network]&&!t)throw new Error("Error: For custom providers, you must pass in a contract address");this.contractAddress=null!=(n=ansContractsMap[this.provider.network])?n:t}async getPrimaryNameByAddress(e){const t=(await this.provider.getAccountResource(this.contractAddress,`${this.contractAddress}::domains::ReverseLookupRegistryV1`)).data,{handle:n}=t.registry,r={key_type:"address",value_type:`${this.contractAddress}::domains::NameRecordKeyV1`,key:e};try{const e=await this.provider.getTableItem(n,r);return e.subdomain_name.vec[0]?`${e.subdomain_name.vec[0]}.${e.domain_name}`:e.domain_name}catch(e){if(404===e.status)return null;throw new Error(e)}}async getAddressByName(e){var t,n;const{domain:r,subdomain:s}=null!=(n=null==(t=e.match(namePattern))?void 0:t.groups)?n:{};if(!r)return null;const i=s?await this.getRegistrationForSubdomainName(r,s):await this.getRegistrationForDomainName(r);return null===i?null:i.target}async mintAptosName(e,t,n=1,r){if(null===t.match(nameComponentPattern))throw new ApiError(400,`Name ${t} is not valid`);const s=await this.getRegistrationForDomainName(t);if(s){if(Math.ceil(Date.now()/1e3)<s.expirationTimestampSeconds)throw new ApiError(400,`Name ${t} is not available`)}const i=new TransactionBuilderRemoteABI(this.provider.aptosClient,{sender:e.address(),...r}),a=await i.build(`${this.contractAddress}::domains::register_domain`,[],[t,n]),o=AptosClient.generateBCSTransaction(e,a);return(await this.provider.submitSignedBCSTransaction(o)).hash}async mintAptosSubdomain(e,t,n,r,s){if(null===n.match(nameComponentPattern))throw new ApiError(400,`Domain name ${n} is not valid`);if(null===t.match(nameComponentPattern))throw new ApiError(400,`Subdomain name ${t} is not valid`);const i=await this.getRegistrationForSubdomainName(n,t);if(i){if(Math.ceil(Date.now()/1e3)<i.expirationTimestampSeconds)throw new ApiError(400,`Name ${t}.${n} is not available`)}const a=await this.getRegistrationForDomainName(n);if(null===a)throw new ApiError(400,`Domain name ${n} does not exist`);const o=Math.ceil(Date.now()/1e3);if(a.expirationTimestampSeconds<o)throw new ApiError(400,`Domain name ${n} expired`);const c=r||a.expirationTimestampSeconds;if(c<o)throw new ApiError(400,`Expiration for ${t}.${n} is before now`);const l=new TransactionBuilderRemoteABI(this.provider.aptosClient,{sender:e.address(),...s}),u=await l.build(`${this.contractAddress}::domains::register_subdomain`,[],[t,n,c]),d=AptosClient.generateBCSTransaction(e,u);return(await this.provider.submitSignedBCSTransaction(d)).hash}async setSubdomainAddress(e,t,n,r,s){const i=AccountAddress.standardizeAddress(r);if(null===n.match(nameComponentPattern))throw new ApiError(400,`Name ${n} is not valid`);if(null===t.match(nameComponentPattern))throw new ApiError(400,`Name ${t} is not valid`);const a=new TransactionBuilderRemoteABI(this.provider.aptosClient,{sender:e.address(),...s}),o=await a.build(`${this.contractAddress}::domains::set_subdomain_address`,[],[t,n,i]),c=AptosClient.generateBCSTransaction(e,o);return(await this.provider.submitSignedBCSTransaction(c)).hash}async initReverseLookupRegistry(e,t){const n=new TransactionBuilderRemoteABI(this.provider.aptosClient,{sender:e.address(),...t}),r=await n.build(`${this.contractAddress}::domains::init_reverse_lookup_registry_v1`,[],[]),s=AptosClient.generateBCSTransaction(e,r);return(await this.provider.submitSignedBCSTransaction(s)).hash}async getRegistrationForDomainName(e){if(null===e.match(nameComponentPattern))return null;const t=(await this.provider.getAccountResource(this.contractAddress,`${this.contractAddress}::domains::NameRegistryV1`)).data,{handle:n}=t.registry,r={key_type:`${this.contractAddress}::domains::NameRecordKeyV1`,value_type:`${this.contractAddress}::domains::NameRecordV1`,key:{subdomain_name:{vec:[]},domain_name:e}};try{const e=await this.provider.getTableItem(n,r);return{target:1===e.target_address.vec.length?e.target_address.vec[0]:null,expirationTimestampSeconds:e.expiration_time_sec}}catch(e){if(404===e.status)return null;throw new Error(e)}}async getRegistrationForSubdomainName(e,t){if(null===e.match(nameComponentPattern))return null;if(null===t.match(nameComponentPattern))return null;const n=(await this.provider.getAccountResource(this.contractAddress,`${this.contractAddress}::domains::NameRegistryV1`)).data,{handle:r}=n.registry,s={key_type:`${this.contractAddress}::domains::NameRecordKeyV1`,value_type:`${this.contractAddress}::domains::NameRecordV1`,key:{subdomain_name:{vec:[t]},domain_name:e}};try{const e=await this.provider.getTableItem(r,s);return{target:1===e.target_address.vec.length?e.target_address.vec[0]:null,expirationTimestampSeconds:e.expiration_time_sec}}catch(e){if(404===e.status)return null;throw new Error(e)}}},now=()=>Math.floor(Date.now()/1e3),AccountSequenceNumber=class{constructor(e,t,n,r,s){this.lastUncommintedNumber=null,this.currentNumber=null,this.lock=!1,this.provider=e,this.account=t,this.maxWaitTime=n,this.maximumInFlight=r,this.sleepTime=s}async nextSequenceNumber(){for(;this.lock;)await sleep(this.sleepTime);this.lock=!0;let e=BigInt(0);try{if(null!==this.lastUncommintedNumber&&null!==this.currentNumber||await this.initialize(),this.currentNumber-this.lastUncommintedNumber>=this.maximumInFlight){await this.update();const e=now();for(;this.currentNumber-this.lastUncommintedNumber>=this.maximumInFlight;)await sleep(this.sleepTime),now()-e>this.maxWaitTime?(console.warn(`Waited over 30 seconds for a transaction to commit, resyncing ${this.account.address()}`),await this.initialize()):await this.update()}e=this.currentNumber,this.currentNumber+=BigInt(1)}catch(e){console.error("error in getting next sequence number for this account",e)}finally{this.lock=!1}return e}async initialize(){const{sequence_number:e}=await this.provider.getAccount(this.account.address());this.currentNumber=BigInt(e),this.lastUncommintedNumber=BigInt(e)}async update(){const{sequence_number:e}=await this.provider.getAccount(this.account.address());return this.lastUncommintedNumber=BigInt(e),this.lastUncommintedNumber}async synchronize(){if(this.lastUncommintedNumber!==this.currentNumber){for(;this.lock;)await sleep(this.sleepTime);this.lock=!0;try{await this.update();const e=now();for(;this.lastUncommintedNumber!==this.currentNumber;)now()-e>this.maxWaitTime?(console.warn(`Waited over 30 seconds for a transaction to commit, resyncing ${this.account.address()}`),await this.initialize()):(await sleep(this.sleepTime),await this.update())}catch(e){console.error("error in synchronizing this account sequence number with the one on chain",e)}finally{this.lock=!1}}}},import_eventemitter3=__toESM(require("eventemitter3")),AsyncQueue=class{constructor(){this.queue=[],this.pendingDequeue=[],this.cancelled=!1}enqueue(e){if(this.cancelled=!1,this.pendingDequeue.length>0){const t=this.pendingDequeue.shift();null==t||t.resolve(e)}else this.queue.push(e)}async dequeue(){return this.queue.length>0?Promise.resolve(this.queue.shift()):new Promise(((e,t)=>{this.pendingDequeue.push({resolve:e,reject:t})}))}isEmpty(){return 0===this.queue.length}cancel(){this.cancelled=!0,this.pendingDequeue.forEach((async({reject:e})=>{e(new AsyncQueueCancelledError("Task cancelled"))})),this.pendingDequeue=[],this.queue.length=0}isCancelled(){return this.cancelled}pendingDequeueLength(){return this.pendingDequeue.length}},AsyncQueueCancelledError=class extends Error{},promiseFulfilledStatus="fulfilled",TransactionWorkerEvents=(e=>(e.TransactionSent="transactionSent",e.TransactionSendFailed="transactionsendFailed",e.TransactionExecuted="transactionExecuted",e.TransactionExecutionFailed="transactionexecutionFailed",e))(TransactionWorkerEvents||{}),TransactionWorker=class extends import_eventemitter3.default{constructor(e,t,n=30,r=100,s=10){super(),this.taskQueue=new AsyncQueue,this.transactionsQueue=new AsyncQueue,this.outstandingTransactions=new AsyncQueue,this.sentTransactions=[],this.executedTransactions=[],this.provider=e,this.account=t,this.started=!1,this.accountSequnceNumber=new AccountSequenceNumber(e,t,n,r,s)}async submitNextTransaction(){try{for(;;){if(this.transactionsQueue.isEmpty())return;const e=await this.accountSequnceNumber.nextSequenceNumber();if(null===e)return;const t=await this.generateNextTransaction(this.account,e);if(!t)return;const n=this.provider.submitSignedBCSTransaction(t);await this.outstandingTransactions.enqueue([n,e])}}catch(e){if(e instanceof AsyncQueueCancelledError)return;console.log(e)}}async processTransactions(){try{for(;;){const e=[],t=[];let[n,r]=await this.outstandingTransactions.dequeue();for(e.push(n),t.push(r);!this.outstandingTransactions.isEmpty();)[n,r]=await this.outstandingTransactions.dequeue(),e.push(n),t.push(r);const s=await Promise.allSettled(e);for(let e=0;e<s.length&&e<t.length;e+=1){const n=s[e];r=t[e],n.status===promiseFulfilledStatus?(this.sentTransactions.push([n.value.hash,r,null]),this.emit("transactionSent",[this.sentTransactions.length,n.value.hash]),await this.checkTransaction(n,r)):(this.sentTransactions.push([n.status,r,n.reason]),this.emit("transactionsendFailed",[this.sentTransactions.length,n.reason]))}}}catch(e){if(e instanceof AsyncQueueCancelledError)return;console.log(e)}}async checkTransaction(e,t){const n=[];n.push(this.provider.waitForTransactionWithResult(e.value.hash,{checkSuccess:!0}));const r=await Promise.allSettled(n);for(let e=0;e<r.length;e+=1){const n=r[e];n.status===promiseFulfilledStatus?(this.executedTransactions.push([n.value.hash,t,null]),this.emit("transactionExecuted",[this.executedTransactions.length,n.value.hash])):(this.executedTransactions.push([n.status,t,n.reason]),this.emit("transactionexecutionFailed",[this.executedTransactions.length,n.reason]))}}async push(e){await this.transactionsQueue.enqueue(e)}async generateNextTransaction(e,t){if(this.transactionsQueue.isEmpty())return;const n=await this.transactionsQueue.dequeue(),r=await this.provider.generateRawTransaction(e.address(),n,{providedSequenceNumber:t});return AptosClient.generateBCSTransaction(e,r)}async run(){try{for(;!this.taskQueue.isCancelled();){const e=await this.taskQueue.dequeue();await e()}}catch(e){throw new Error(e)}}start(){if(this.started)throw new Error("worker has already started");this.started=!0,this.taskQueue.enqueue((()=>this.submitNextTransaction())),this.taskQueue.enqueue((()=>this.processTransactions())),this.run()}stop(){if(this.taskQueue.isCancelled())throw new Error("worker has already stopped");this.started=!1,this.taskQueue.cancel()}},generated_exports={};__export(generated_exports,{AptosErrorCode:()=>AptosErrorCode,MoveFunctionVisibility:()=>MoveFunctionVisibility,RoleType:()=>RoleType});var AptosErrorCode=(e=>(e.ACCOUNT_NOT_FOUND="account_not_found",e.RESOURCE_NOT_FOUND="resource_not_found",e.MODULE_NOT_FOUND="module_not_found",e.STRUCT_FIELD_NOT_FOUND="struct_field_not_found",e.VERSION_NOT_FOUND="version_not_found",e.TRANSACTION_NOT_FOUND="transaction_not_found",e.TABLE_ITEM_NOT_FOUND="table_item_not_found",e.BLOCK_NOT_FOUND="block_not_found",e.STATE_VALUE_NOT_FOUND="state_value_not_found",e.VERSION_PRUNED="version_pruned",e.BLOCK_PRUNED="block_pruned",e.INVALID_INPUT="invalid_input",e.INVALID_TRANSACTION_UPDATE="invalid_transaction_update",e.SEQUENCE_NUMBER_TOO_OLD="sequence_number_too_old",e.VM_ERROR="vm_error",e.HEALTH_CHECK_FAILED="health_check_failed",e.MEMPOOL_IS_FULL="mempool_is_full",e.INTERNAL_ERROR="internal_error",e.WEB_FRAMEWORK_ERROR="web_framework_error",e.BCS_NOT_SUPPORTED="bcs_not_supported",e.API_DISABLED="api_disabled",e))(AptosErrorCode||{}),MoveFunctionVisibility=(e=>(e.PRIVATE="private",e.PUBLIC="public",e.FRIEND="friend",e))(MoveFunctionVisibility||{}),RoleType=(e=>(e.VALIDATOR="validator",e.FULL_NODE="full_node",e))(RoleType||{}),Account_Transactions_Select_Column=(e=>(e.AccountAddress="account_address",e.TransactionVersion="transaction_version",e))(Account_Transactions_Select_Column||{}),Address_Events_Summary_Select_Column=(e=>(e.AccountAddress="account_address",e.MinBlockHeight="min_block_height",e.NumDistinctVersions="num_distinct_versions",e))(Address_Events_Summary_Select_Column||{}),Address_Version_From_Events_Select_Column=(e=>(e.AccountAddress="account_address",e.TransactionVersion="transaction_version",e))(Address_Version_From_Events_Select_Column||{}),Address_Version_From_Move_Resources_Select_Column=(e=>(e.Address="address",e.TransactionVersion="transaction_version",e))(Address_Version_From_Move_Resources_Select_Column||{}),Block_Metadata_Transactions_Select_Column=(e=>(e.BlockHeight="block_height",e.Epoch="epoch",e.FailedProposerIndices="failed_proposer_indices",e.Id="id",e.PreviousBlockVotesBitvec="previous_block_votes_bitvec",e.Proposer="proposer",e.Round="round",e.Timestamp="timestamp",e.Version="version",e))(Block_Metadata_Transactions_Select_Column||{}),Coin_Activities_Select_Column=(e=>(e.ActivityType="activity_type",e.Amount="amount",e.BlockHeight="block_height",e.CoinType="coin_type",e.EntryFunctionIdStr="entry_function_id_str",e.EventAccountAddress="event_account_address",e.EventCreationNumber="event_creation_number",e.EventIndex="event_index",e.EventSequenceNumber="event_sequence_number",e.IsGasFee="is_gas_fee",e.IsTransactionSuccess="is_transaction_success",e.OwnerAddress="owner_address",e.StorageRefundAmount="storage_refund_amount",e.TransactionTimestamp="transaction_timestamp",e.TransactionVersion="transaction_version",e))(Coin_Activities_Select_Column||{}),Coin_Balances_Select_Column=(e=>(e.Amount="amount",e.CoinType="coin_type",e.CoinTypeHash="coin_type_hash",e.OwnerAddress="owner_address",e.TransactionTimestamp="transaction_timestamp",e.TransactionVersion="transaction_version",e))(Coin_Balances_Select_Column||{}),Coin_Infos_Select_Column=(e=>(e.CoinType="coin_type",e.CoinTypeHash="coin_type_hash",e.CreatorAddress="creator_address",e.Decimals="decimals",e.Name="name",e.SupplyAggregatorTableHandle="supply_aggregator_table_handle",e.SupplyAggregatorTableKey="supply_aggregator_table_key",e.Symbol="symbol",e.TransactionCreatedTimestamp="transaction_created_timestamp",e.TransactionVersionCreated="transaction_version_created",e))(Coin_Infos_Select_Column||{}),Coin_Supply_Select_Column=(e=>(e.CoinType="coin_type",e.CoinTypeHash="coin_type_hash",e.Supply="supply",e.TransactionEpoch="transaction_epoch",e.TransactionTimestamp="transaction_timestamp",e.TransactionVersion="transaction_version",e))(Coin_Supply_Select_Column||{}),Collection_Datas_Select_Column=(e=>(e.CollectionDataIdHash="collection_data_id_hash",e.CollectionName="collection_name",e.CreatorAddress="creator_address",e.Description="description",e.DescriptionMutable="description_mutable",e.Maximum="maximum",e.MaximumMutable="maximum_mutable",e.MetadataUri="metadata_uri",e.Supply="supply",e.TableHandle="table_handle",e.TransactionTimestamp="transaction_timestamp",e.TransactionVersion="transaction_version",e.UriMutable="uri_mutable",e))(Collection_Datas_Select_Column||{}),Current_Ans_Lookup_Select_Column=(e=>(e.Domain="domain",e.ExpirationTimestamp="expiration_timestamp",e.IsDeleted="is_deleted",e.LastTransactionVersion="last_transaction_version",e.RegisteredAddress="registered_address",e.Subdomain="subdomain",e.TokenName="token_name",e))(Current_Ans_Lookup_Select_Column||{}),Current_Ans_Lookup_V2_Select_Column=(e=>(e.Domain="domain",e.ExpirationTimestamp="expiration_timestamp",e.IsDeleted="is_deleted",e.LastTransactionVersion="last_transaction_version",e.RegisteredAddress="registered_address",e.Subdomain="subdomain",e.TokenName="token_name",e.TokenStandard="token_standard",e))(Current_Ans_Lookup_V2_Select_Column||{}),Current_Aptos_Names_Select_Column=(e=>(e.Domain="domain",e.DomainWithSuffix="domain_with_suffix",e.ExpirationTimestamp="expiration_timestamp",e.IsActive="is_active",e.IsPrimary="is_primary",e.LastTransactionVersion="last_transaction_version",e.OwnerAddress="owner_address",e.RegisteredAddress="registered_address",e.Subdomain="subdomain",e.TokenName="token_name",e.TokenStandard="token_standard",e))(Current_Aptos_Names_Select_Column||{}),Current_Coin_Balances_Select_Column=(e=>(e.Amount="amount",e.CoinType="coin_type",e.CoinTypeHash="coin_type_hash",e.LastTransactionTimestamp="last_transaction_timestamp",e.LastTransactionVersion="last_transaction_version",e.OwnerAddress="owner_address",e))(Current_Coin_Balances_Select_Column||{}),Current_Collection_Datas_Select_Column=(e=>(e.CollectionDataIdHash="collection_data_id_hash",e.CollectionName="collection_name",e.CreatorAddress="creator_address",e.Description="description",e.DescriptionMutable="description_mutable",e.LastTransactionTimestamp="last_transaction_timestamp",e.LastTransactionVersion="last_transaction_version",e.Maximum="maximum",e.MaximumMutable="maximum_mutable",e.MetadataUri="metadata_uri",e.Supply="supply",e.TableHandle="table_handle",e.UriMutable="uri_mutable",e))(Current_Collection_Datas_Select_Column||{}),Current_Collection_Ownership_V2_View_Select_Column=(e=>(e.CollectionId="collection_id",e.CollectionName="collection_name",e.CollectionUri="collection_uri",e.CreatorAddress="creator_address",e.DistinctTokens="distinct_tokens",e.LastTransactionVersion="last_transaction_version",e.OwnerAddress="owner_address",e.SingleTokenUri="single_token_uri",e))(Current_Collection_Ownership_V2_View_Select_Column||{}),Current_Collections_V2_Select_Column=(e=>(e.CollectionId="collection_id",e.CollectionName="collection_name",e.CreatorAddress="creator_address",e.CurrentSupply="current_supply",e.Description="description",e.LastTransactionTimestamp="last_transaction_timestamp",e.LastTransactionVersion="last_transaction_version",e.MaxSupply="max_supply",e.MutableDescription="mutable_description",e.MutableUri="mutable_uri",e.TableHandleV1="table_handle_v1",e.TokenStandard="token_standard",e.TotalMintedV2="total_minted_v2",e.Uri="uri",e))(Current_Collections_V2_Select_Column||{}),Current_Delegated_Staking_Pool_Balances_Select_Column=(e=>(e.ActiveTableHandle="active_table_handle",e.InactiveTableHandle="inactive_table_handle",e.LastTransactionVersion="last_transaction_version",e.OperatorCommissionPercentage="operator_commission_percentage",e.StakingPoolAddress="staking_pool_address",e.TotalCoins="total_coins",e.TotalShares="total_shares",e))(Current_Delegated_Staking_Pool_Balances_Select_Column||{}),Current_Delegated_Voter_Select_Column=(e=>(e.DelegationPoolAddress="delegation_pool_address",e.DelegatorAddress="delegator_address",e.LastTransactionTimestamp="last_transaction_timestamp",e.LastTransactionVersion="last_transaction_version",e.PendingVoter="pending_voter",e.TableHandle="table_handle",e.Voter="voter",e))(Current_Delegated_Voter_Select_Column||{}),Current_Delegator_Balances_Select_Column=(e=>(e.DelegatorAddress="delegator_address",e.LastTransactionVersion="last_transaction_version",e.ParentTableHandle="parent_table_handle",e.PoolAddress="pool_address",e.PoolType="pool_type",e.Shares="shares",e.TableHandle="table_handle",e))(Current_Delegator_Balances_Select_Column||{}),Current_Fungible_Asset_Balances_Select_Column=(e=>(e.Amount="amount",e.AssetType="asset_type",e.IsFrozen="is_frozen",e.IsPrimary="is_primary",e.LastTransactionTimestamp="last_transaction_timestamp",e.LastTransactionVersion="last_transaction_version",e.OwnerAddress="owner_address",e.StorageId="storage_id",e.TokenStandard="token_standard",e))(Current_Fungible_Asset_Balances_Select_Column||{}),Current_Objects_Select_Column=(e=>(e.AllowUngatedTransfer="allow_ungated_transfer",e.IsDeleted="is_deleted",e.LastGuidCreationNum="last_guid_creation_num",e.LastTransactionVersion="last_transaction_version",e.ObjectAddress="object_address",e.OwnerAddress="owner_address",e.StateKeyHash="state_key_hash",e))(Current_Objects_Select_Column||{}),Current_Staking_Pool_Voter_Select_Column=(e=>(e.LastTransactionVersion="last_transaction_version",e.OperatorAddress="operator_address",e.StakingPoolAddress="staking_pool_address",e.VoterAddress="voter_address",e))(Current_Staking_Pool_Voter_Select_Column||{}),Current_Table_Items_Select_Column=(e=>(e.DecodedKey="decoded_key",e.DecodedValue="decoded_value",e.IsDeleted="is_deleted",e.Key="key",e.KeyHash="key_hash",e.LastTransactionVersion="last_transaction_version",e.TableHandle="table_handle",e))(Current_Table_Items_Select_Column||{}),Current_Token_Datas_Select_Column=(e=>(e.CollectionDataIdHash="collection_data_id_hash",e.CollectionName="collection_name",e.CreatorAddress="creator_address",e.DefaultProperties="default_properties",e.Description="description",e.DescriptionMutable="description_mutable",e.LargestPropertyVersion="largest_property_version",e.LastTransactionTimestamp="last_transaction_timestamp",e.LastTransactionVersion="last_transaction_version",e.Maximum="maximum",e.MaximumMutable="maximum_mutable",e.MetadataUri="metadata_uri",e.Name="name",e.PayeeAddress="payee_address",e.PropertiesMutable="properties_mutable",e.RoyaltyMutable="royalty_mutable",e.RoyaltyPointsDenominator="royalty_points_denominator",e.RoyaltyPointsNumerator="royalty_points_numerator",e.Supply="supply",e.TokenDataIdHash="token_data_id_hash",e.UriMutable="uri_mutable",e))(Current_Token_Datas_Select_Column||{}),Current_Token_Datas_V2_Select_Column=(e=>(e.CollectionId="collection_id",e.Description="description",e.IsFungibleV2="is_fungible_v2",e.LargestPropertyVersionV1="largest_property_version_v1",e.LastTransactionTimestamp="last_transaction_timestamp",e.LastTransactionVersion="last_transaction_version",e.Maximum="maximum",e.Supply="supply",e.TokenDataId="token_data_id",e.TokenName="token_name",e.TokenProperties="token_properties",e.TokenStandard="token_standard",e.TokenUri="token_uri",e))(Current_Token_Datas_V2_Select_Column||{}),Current_Token_Ownerships_Select_Column=(e=>(e.Amount="amount",e.CollectionDataIdHash="collection_data_id_hash",e.CollectionName="collection_name",e.CreatorAddress="creator_address",e.LastTransactionTimestamp="last_transaction_timestamp",e.LastTransactionVersion="last_transaction_version",e.Name="name",e.OwnerAddress="owner_address",e.PropertyVersion="property_version",e.TableType="table_type",e.TokenDataIdHash="token_data_id_hash",e.TokenProperties="token_properties",e))(Current_Token_Ownerships_Select_Column||{}),Current_Token_Ownerships_V2_Select_Column=(e=>(e.Amount="amount",e.IsFungibleV2="is_fungible_v2",e.IsSoulboundV2="is_soulbound_v2",e.LastTransactionTimestamp="last_transaction_timestamp",e.LastTransactionVersion="last_transaction_version",e.OwnerAddress="owner_address",e.PropertyVersionV1="property_version_v1",e.StorageId="storage_id",e.TableTypeV1="table_type_v1",e.TokenDataId="token_data_id",e.TokenPropertiesMutatedV1="token_properties_mutated_v1",e.TokenStandard="token_standard",e))(Current_Token_Ownerships_V2_Select_Column||{}),Current_Token_Pending_Claims_Select_Column=(e=>(e.Amount="amount",e.CollectionDataIdHash="collection_data_id_hash",e.CollectionId="collection_id",e.CollectionName="collection_name",e.CreatorAddress="creator_address",e.FromAddress="from_address",e.LastTransactionTimestamp="last_transaction_timestamp",e.LastTransactionVersion="last_transaction_version",e.Name="name",e.PropertyVersion="property_version",e.TableHandle="table_handle",e.ToAddress="to_address",e.TokenDataId="token_data_id",e.TokenDataIdHash="token_data_id_hash",e))(Current_Token_Pending_Claims_Select_Column||{}),Cursor_Ordering=(e=>(e.Asc="ASC",e.Desc="DESC",e))(Cursor_Ordering||{}),Delegated_Staking_Activities_Select_Column=(e=>(e.Amount="amount",e.DelegatorAddress="delegator_address",e.EventIndex="event_index",e.EventType="event_type",e.PoolAddress="pool_address",e.TransactionVersion="transaction_version",e))(Delegated_Staking_Activities_Select_Column||{}),Delegated_Staking_Pools_Select_Column=(e=>(e.FirstTransactionVersion="first_transaction_version",e.StakingPoolAddress="staking_pool_address",e))(Delegated_Staking_Pools_Select_Column||{}),Delegator_Distinct_Pool_Select_Column=(e=>(e.DelegatorAddress="delegator_address",e.PoolAddress="pool_address",e))(Delegator_Distinct_Pool_Select_Column||{}),Events_Select_Column=(e=>(e.AccountAddress="account_address",e.CreationNumber="creation_number",e.Data="data",e.EventIndex="event_index",e.IndexedType="indexed_type",e.SequenceNumber="sequence_number",e.TransactionBlockHeight="transaction_block_height",e.TransactionVersion="transaction_version",e.Type="type",e))(Events_Select_Column||{}),Fungible_Asset_Activities_Select_Column=(e=>(e.Amount="amount",e.AssetType="asset_type",e.BlockHeight="block_height",e.EntryFunctionIdStr="entry_function_id_str",e.EventIndex="event_index",e.GasFeePayerAddress="gas_fee_payer_address",e.IsFrozen="is_frozen",e.IsGasFee="is_gas_fee",e.IsTransactionSuccess="is_transaction_success",e.OwnerAddress="owner_address",e.StorageId="storage_id",e.StorageRefundAmount="storage_refund_amount",e.TokenStandard="token_standard",e.TransactionTimestamp="transaction_timestamp",e.TransactionVersion="transaction_version",e.Type="type",e))(Fungible_Asset_Activities_Select_Column||{}),Fungible_Asset_Metadata_Select_Column=(e=>(e.AssetType="asset_type",e.CreatorAddress="creator_address",e.Decimals="decimals",e.IconUri="icon_uri",e.LastTransactionTimestamp="last_transaction_timestamp",e.LastTransactionVersion="last_transaction_version",e.Name="name",e.ProjectUri="project_uri",e.SupplyAggregatorTableHandleV1="supply_aggregator_table_handle_v1",e.SupplyAggregatorTableKeyV1="supply_aggregator_table_key_v1",e.Symbol="symbol",e.TokenStandard="token_standard",e))(Fungible_Asset_Metadata_Select_Column||{}),Indexer_Status_Select_Column=(e=>(e.Db="db",e.IsIndexerUp="is_indexer_up",e))(Indexer_Status_Select_Column||{}),Ledger_Infos_Select_Column=(e=>(e.ChainId="chain_id",e))(Ledger_Infos_Select_Column||{}),Move_Resources_Select_Column=(e=>(e.Address="address",e.TransactionVersion="transaction_version",e))(Move_Resources_Select_Column||{}),Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column=(e=>(e.BuyItNowPrice="buy_it_now_price",e.CoinType="coin_type",e.CollectionId="collection_id",e.ContractAddress="contract_address",e.CurrentBidPrice="current_bid_price",e.CurrentBidder="current_bidder",e.EntryFunctionIdStr="entry_function_id_str",e.ExpirationTime="expiration_time",e.FeeScheduleId="fee_schedule_id",e.IsDeleted="is_deleted",e.LastTransactionTimestamp="last_transaction_timestamp",e.LastTransactionVersion="last_transaction_version",e.ListingId="listing_id",e.Marketplace="marketplace",e.Seller="seller",e.StartingBidPrice="starting_bid_price",e.TokenAmount="token_amount",e.TokenDataId="token_data_id",e.TokenStandard="token_standard",e))(Nft_Marketplace_V2_Current_Nft_Marketplace_Auctions_Select_Column||{}),Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column=(e=>(e.Buyer="buyer",e.CoinType="coin_type",e.CollectionId="collection_id",e.CollectionOfferId="collection_offer_id",e.ContractAddress="contract_address",e.EntryFunctionIdStr="entry_function_id_str",e.ExpirationTime="expiration_time",e.FeeScheduleId="fee_schedule_id",e.IsDeleted="is_deleted",e.ItemPrice="item_price",e.LastTransactionTimestamp="last_transaction_timestamp",e.LastTransactionVersion="last_transaction_version",e.Marketplace="marketplace",e.RemainingTokenAmount="remaining_token_amount",e.TokenStandard="token_standard",e))(Nft_Marketplace_V2_Current_Nft_Marketplace_Collection_Offers_Select_Column||{}),Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column=(e=>(e.CoinType="coin_type",e.CollectionId="collection_id",e.ContractAddress="contract_address",e.EntryFunctionIdStr="entry_function_id_str",e.FeeScheduleId="fee_schedule_id",e.IsDeleted="is_deleted",e.LastTransactionTimestamp="last_transaction_timestamp",e.LastTransactionVersion="last_transaction_version",e.ListingId="listing_id",e.Marketplace="marketplace",e.Price="price",e.Seller="seller",e.TokenAmount="token_amount",e.TokenDataId="token_data_id",e.TokenStandard="token_standard",e))(Nft_Marketplace_V2_Current_Nft_Marketplace_Listings_Select_Column||{}),Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column=(e=>(e.Buyer="buyer",e.CoinType="coin_type",e.CollectionId="collection_id",e.ContractAddress="contract_address",e.EntryFunctionIdStr="entry_function_id_str",e.ExpirationTime="expiration_time",e.FeeScheduleId="fee_schedule_id",e.IsDeleted="is_deleted",e.LastTransactionTimestamp="last_transaction_timestamp",e.LastTransactionVersion="last_transaction_version",e.Marketplace="marketplace",e.OfferId="offer_id",e.Price="price",e.TokenAmount="token_amount",e.TokenDataId="token_data_id",e.TokenStandard="token_standard",e))(Nft_Marketplace_V2_Current_Nft_Marketplace_Token_Offers_Select_Column||{}),Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column=(e=>(e.Buyer="buyer",e.CoinType="coin_type",e.CollectionId="collection_id",e.CollectionName="collection_name",e.ContractAddress="contract_address",e.CreatorAddress="creator_address",e.EntryFunctionIdStr="entry_function_id_str",e.EventIndex="event_index",e.EventType="event_type",e.FeeScheduleId="fee_schedule_id",e.Marketplace="marketplace",e.OfferOrListingId="offer_or_listing_id",e.Price="price",e.PropertyVersion="property_version",e.Seller="seller",e.TokenAmount="token_amount",e.TokenDataId="token_data_id",e.TokenName="token_name",e.TokenStandard="token_standard",e.TransactionTimestamp="transaction_timestamp",e.TransactionVersion="transaction_version",e))(Nft_Marketplace_V2_Nft_Marketplace_Activities_Select_Column||{}),Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column=(e=>(e.AnimationOptimizerRetryCount="animation_optimizer_retry_count",e.AssetUri="asset_uri",e.CdnAnimationUri="cdn_animation_uri",e.CdnImageUri="cdn_image_uri",e.CdnJsonUri="cdn_json_uri",e.ImageOptimizerRetryCount="image_optimizer_retry_count",e.JsonParserRetryCount="json_parser_retry_count",e.RawAnimationUri="raw_animation_uri",e.RawImageUri="raw_image_uri",e))(Nft_Metadata_Crawler_Parsed_Asset_Uris_Select_Column||{}),Num_Active_Delegator_Per_Pool_Select_Column=(e=>(e.NumActiveDelegator="num_active_delegator",e.PoolAddress="pool_address",e))(Num_Active_Delegator_Per_Pool_Select_Column||{}),Order_By=(e=>(e.Asc="asc",e.AscNullsFirst="asc_nulls_first",e.AscNullsLast="asc_nulls_last",e.Desc="desc",e.DescNullsFirst="desc_nulls_first",e.DescNullsLast="desc_nulls_last",e))(Order_By||{}),Processor_Status_Select_Column=(e=>(e.LastSuccessVersion="last_success_version",e.LastUpdated="last_updated",e.Processor="processor",e))(Processor_Status_Select_Column||{}),Proposal_Votes_Select_Column=(e=>(e.NumVotes="num_votes",e.ProposalId="proposal_id",e.ShouldPass="should_pass",e.StakingPoolAddress="staking_pool_address",e.TransactionTimestamp="transaction_timestamp",e.TransactionVersion="transaction_version",e.VoterAddress="voter_address",e))(Proposal_Votes_Select_Column||{}),Table_Items_Select_Column=(e=>(e.DecodedKey="decoded_key",e.DecodedValue="decoded_value",e.Key="key",e.TableHandle="table_handle",e.TransactionVersion="transaction_version",e.WriteSetChangeIndex="write_set_change_index",e))(Table_Items_Select_Column||{}),Table_Metadatas_Select_Column=(e=>(e.Handle="handle",e.KeyType="key_type",e.ValueType="value_type",e))(Table_Metadatas_Select_Column||{}),Token_Activities_Select_Column=(e=>(e.CoinAmount="coin_amount",e.CoinType="coin_type",e.CollectionDataIdHash="collection_data_id_hash",e.CollectionName="collection_name",e.CreatorAddress="creator_address",e.EventAccountAddress="event_account_address",e.EventCreationNumber="event_creation_number",e.EventIndex="event_index",e.EventSequenceNumber="event_sequence_number",e.FromAddress="from_address",e.Name="name",e.PropertyVersion="property_version",e.ToAddress="to_address",e.TokenAmount="token_amount",e.TokenDataIdHash="token_data_id_hash",e.TransactionTimestamp="transaction_timestamp",e.TransactionVersion="transaction_version",e.TransferType="transfer_type",e))(Token_Activities_Select_Column||{}),Token_Activities_V2_Select_Column=(e=>(e.AfterValue="after_value",e.BeforeValue="before_value",e.EntryFunctionIdStr="entry_function_id_str",e.EventAccountAddress="event_account_address",e.EventIndex="event_index",e.FromAddress="from_address",e.IsFungibleV2="is_fungible_v2",e.PropertyVersionV1="property_version_v1",e.ToAddress="to_address",e.TokenAmount="token_amount",e.TokenDataId="token_data_id",e.TokenStandard="token_standard",e.TransactionTimestamp="transaction_timestamp",e.TransactionVersion="transaction_version",e.Type="type",e))(Token_Activities_V2_Select_Column||{}),Token_Datas_Select_Column=(e=>(e.CollectionDataIdHash="collection_data_id_hash",e.CollectionName="collection_name",e.CreatorAddress="creator_address",e.DefaultProperties="default_properties",e.Description="description",e.DescriptionMutable="description_mutable",e.LargestPropertyVersion="largest_property_version",e.Maximum="maximum",e.MaximumMutable="maximum_mutable",e.MetadataUri="metadata_uri",e.Name="name",e.PayeeAddress="payee_address",e.PropertiesMutable="properties_mutable",e.RoyaltyMutable="royalty_mutable",e.RoyaltyPointsDenominator="royalty_points_denominator",e.RoyaltyPointsNumerator="royalty_points_numerator",e.Supply="supply",e.TokenDataIdHash="token_data_id_hash",e.TransactionTimestamp="transaction_timestamp",e.TransactionVersion="transaction_version",e.UriMutable="uri_mutable",e))(Token_Datas_Select_Column||{}),Token_Ownerships_Select_Column=(e=>(e.Amount="amount",e.CollectionDataIdHash="collection_data_id_hash",e.CollectionName="collection_name",e.CreatorAddress="creator_address",e.Name="name",e.OwnerAddress="owner_address",e.PropertyVersion="property_version",e.TableHandle="table_handle",e.TableType="table_type",e.TokenDataIdHash="token_data_id_hash",e.TransactionTimestamp="transaction_timestamp",e.TransactionVersion="transaction_version",e))(Token_Ownerships_Select_Column||{}),Tokens_Select_Column=(e=>(e.CollectionDataIdHash="collection_data_id_hash",e.CollectionName="collection_name",e.CreatorAddress="creator_address",e.Name="name",e.PropertyVersion="property_version",e.TokenDataIdHash="token_data_id_hash",e.TokenProperties="token_properties",e.TransactionTimestamp="transaction_timestamp",e.TransactionVersion="transaction_version",e))(Tokens_Select_Column||{}),User_Transactions_Select_Column=(e=>(e.BlockHeight="block_height",e.EntryFunctionIdStr="entry_function_id_str",e.Epoch="epoch",e.ExpirationTimestampSecs="expiration_timestamp_secs",e.GasUnitPrice="gas_unit_price",e.MaxGasAmount="max_gas_amount",e.ParentSignatureType="parent_signature_type",e.Sender="sender",e.SequenceNumber="sequence_number",e.Timestamp="timestamp",e.Version="version",e))(User_Transactions_Select_Column||{});
//# sourceMappingURL=/sm/ed60e36c2a2892afedb27677a2700e4e2b0d8043b292f5e1b51ecbd193367dd9.map