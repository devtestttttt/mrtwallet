// Generated by dart2js (NullSafetyMode.sound, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.5.4.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded. The loadPriority argument is the priority the
//    library should be loaded with as specified in the code via the
//    load-priority annotation (0: normal, 1: high).
// dartDeferredLibraryMultiLoader(uris, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of every URI in `uris`,
//    and call successCallback. If it fails to do so, it should call
//    errorCallback with an error. The loadId argument is the deferred import
//    that resulted in this uri being loaded. The loadPriority argument is the
//    priority the library should be loaded with as specified in the code via
//    the load-priority annotation (0: normal, 1: high).
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key)) {
        to[key] = from[key];
      }
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(Object.getPrototypeOf(object) && Object.getPrototypeOf(object).p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        Object.setPrototypeOf(cls.prototype, sup.prototype);
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++) {
      inherit(classes[i], sup);
    }
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        holder[name] = initializer();
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel) {
          A.throwLateFieldADI(name);
        }
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i) {
      convertToFastObject(arrayOfObjects[i]);
    }
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number") {
      funType += typesOffset;
    }
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$allocateGrowable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      return J.JSArray_markFixedList(A._setArrayType(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    JSArray__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    JSString__isWhitespace(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = string.charCodeAt(index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace(string, index) {
      var t1, index0, codeUnit;
      for (t1 = string.length; index > 0; index = index0) {
        index0 = index - 1;
        if (!(index0 < t1))
          return A.ioore(string, index0);
        codeUnit = string.charCodeAt(index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$n(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$length$asx(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    get$first$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$reversed$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$reversed(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    $add$ansx(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (Array.isArray(receiver) || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    $mul$ns(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver * a0;
      return J.getInterceptor$ns(receiver).$mul(receiver, a0);
    },
    $sub$n(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver - a0;
      return J.getInterceptor$n(receiver).$sub(receiver, a0);
    },
    add$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    allMatches$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    any$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).any$1(receiver, a0);
    },
    cast$1$0$ax(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    cast$2$0$ax(receiver, $T1, $T2) {
      return J.getInterceptor$ax(receiver).cast$2$0(receiver, $T1, $T2);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    fold$1$2$ax(receiver, a0, a1, $T1) {
      return J.getInterceptor$ax(receiver).fold$1$2(receiver, a0, a1, $T1);
    },
    getRange$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).getRange$2(receiver, a0, a1);
    },
    join$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).join$1(receiver, a0);
    },
    map$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    matchAsPrefix$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sort$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
    },
    split$0$s(receiver) {
      return J.getInterceptor$s(receiver).split$0(receiver);
    },
    split$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).split$1(receiver, a0);
    },
    sublist$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).sublist$1(receiver, a0);
    },
    sublist$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
    },
    take$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).take$1(receiver, a0);
    },
    toList$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toRadixString$1$n(receiver, a0) {
      return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    trim$0$s(receiver) {
      return J.getInterceptor$s(receiver).trim$0(receiver);
    },
    where$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).where$1(receiver, a0);
    },
    whereType$1$0$ax(receiver, $T1) {
      return J.getInterceptor$ax(receiver).whereType$1$0(receiver, $T1);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JavaScriptBigInt: function JavaScriptBigInt() {
    },
    JavaScriptSymbol: function JavaScriptSymbol() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  A = {JS_CONST: function JS_CONST() {
    },
    createSentinel() {
      return $;
    },
    CastIterable_CastIterable(source, $S, $T) {
      if ($S._eval$1("EfficientLengthIterable<0>")._is(source))
        return new A._EfficientLengthCastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_EfficientLengthCastIterable<1,2>"));
      return new A.CastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterable<1,2>"));
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    hexDigitValue(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    isToStringVisiting(object) {
      var t1, i;
      for (t1 = $.toStringVisiting.length, i = 0; i < t1; ++i)
        if (object === $.toStringVisiting[i])
          return true;
      return false;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new A.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    TakeIterable_TakeIterable(iterable, takeCount, $E) {
      var _s9_ = "takeCount";
      A.ArgumentError_checkNotNull(takeCount, _s9_, type$.int);
      A.RangeError_checkNotNegative(takeCount, _s9_);
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthTakeIterable(iterable, takeCount, $E._eval$1("EfficientLengthTakeIterable<0>"));
      return new A.TakeIterable(iterable, takeCount, $E._eval$1("TakeIterable<0>"));
    },
    SkipIterable_SkipIterable(iterable, count, $E) {
      var _s5_ = "count";
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        A.ArgumentError_checkNotNull(count, _s5_, type$.int);
        A.RangeError_checkNotNegative(count, _s5_);
        return new A.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      A.ArgumentError_checkNotNull(count, _s5_, type$.int);
      A.RangeError_checkNotNegative(count, _s5_);
      return new A.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    IterableElementError_tooFew() {
      return new A.StateError("Too few elements");
    },
    Sort__doSort(a, left, right, compare, $E) {
      if (right - left <= 32)
        A.Sort__insertionSort(a, left, right, compare, $E);
      else
        A.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort(a, left, right, compare, $E) {
      var i, t1, el, j, t2, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (j > left) {
            t2 = compare.call$2(t1.$index(a, j - 1), el);
            if (typeof t2 !== "number")
              return t2.$gt();
            t2 = t2 > 0;
          } else
            t2 = false;
          if (!t2)
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort(a, left, right, compare, $E) {
      var t0, less, great, pivots_are_equal, k, ak, comp, great0, less0,
        sixth = B.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = B.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5),
        t2 = compare.call$2(el1, el2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t2 = compare.call$2(el1, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el1, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el3, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      t2 = compare.call$2(el2, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      pivots_are_equal = J.$eq$(compare.call$2(el2, el4), 0);
      if (pivots_are_equal)
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
      else
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) > 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) > 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      A.Sort__doSort(a, left, less - 2, compare, $E);
      A.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        A.Sort__doSort(a, less, great, compare, $E);
      } else
        A.Sort__doSort(a, less, great, compare, $E);
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    _CastListBase_sort_closure: function _CastListBase_sort_closure(t0, t1) {
      this.$this = t0;
      this.compare = t1;
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap: function CastMap(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap_forEach_closure: function CastMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CastMap_entries_closure: function CastMap_entries_closure(t0) {
      this.$this = t0;
    },
    LateError: function LateError(t0) {
      this.__internal$_message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this.__internal$_string = t0;
    },
    nullFuture_closure: function nullFuture_closure() {
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
      _.$ti = t3;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1, t2) {
      this._iterator = t0;
      this._remaining = t1;
      this.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    _ListIndicesIterable: function _ListIndicesIterable(t0) {
      this._backedList = t0;
    },
    ListMapView: function ListMapView(t0, t1) {
      this._values = t0;
      this.$ti = t1;
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol() {
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap_ConstantMap$from(other, $K, $V) {
      var allStrings, k, object, index, index0, values, map,
        keys = A.List_List$from(other.get$keys(), true, $K),
        t1 = keys.length,
        _i = 0;
      while (true) {
        if (!(_i < t1)) {
          allStrings = true;
          break;
        }
        k = keys[_i];
        if (typeof k != "string" || "__proto__" === k) {
          allStrings = false;
          break;
        }
        ++_i;
      }
      if (allStrings) {
        object = {};
        for (index = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i, index = index0) {
          k = keys[_i];
          $V._as(other.$index(0, k));
          index0 = index + 1;
          object[k] = index;
        }
        values = A.List_List$from(other.get$values(), true, $V);
        map = new A.ConstantStringMap(object, values, $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantStringMap<1,2>"));
        map.$keys = keys;
        return map;
      }
      return new A.ConstantMapView(A.LinkedHashMap_LinkedHashMap$from(other, $K, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantMapView<1,2>"));
    },
    ConstantMap__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    instantiate1(f, T1) {
      var t1 = new A.Instantiation1(f, T1._eval$1("Instantiation1<0>"));
      t1.Instantiation$1(f);
      return t1;
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i, _null = null,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      if (3 >= match.length)
        return A.ioore(match, 3);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((digitsPart.charCodeAt(i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_objectTypeName(object) {
      return A.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_objectToHumanReadableString(object) {
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Primitives_safeToString(object) {
      if (object == null || typeof object == "number" || A._isBool(object))
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      if (object instanceof A.Closure)
        return object.toString$0(0);
      if (object instanceof A._Record)
        return object._toString$1(true);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Primitives_currentUri() {
      if (!!self.location)
        return self.location.href;
      return null;
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, _i, i,
        a = A._setArrayType([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, A.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
          B.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          B.JSArray_methods.add$1(a, 55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          B.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw A.wrapException(A.argumentErrorValue(i));
      }
      return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
          throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
          return A.Primitives_stringFromCodePoints(charCodes);
      }
      return A.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_valueFromDecomposedDate(years, month, day, hours, minutes, seconds, milliseconds, microseconds, isUtc) {
      var remainder, value, t1,
        jsMonth = month - 1;
      if (0 <= years && years < 100) {
        years += 400;
        jsMonth -= 4800;
      }
      remainder = B.JSInt_methods.$mod(microseconds, 1000);
      milliseconds += B.JSInt_methods._tdivFast$1(microseconds - remainder, 1000);
      value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
      t1 = true;
      if (!isNaN(value))
        if (!(value < -864e13))
          if (!(value > 864e13))
            t1 = value === 864e13 && remainder !== 0;
      if (t1)
        return null;
      return value;
    },
    Primitives_lazyAsJsDate(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._core$_value);
      return receiver.date;
    },
    Primitives_getYear(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_extractStackTrace(error) {
      var jsError = error.$thrownJsError;
      if (jsError == null)
        return null;
      return A.getTraceFromException(jsError);
    },
    iae(argument) {
      throw A.wrapException(A.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = A._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, null, _s5_);
      return A.RangeError$value(index, _s5_);
    },
    diagnoseRangeError(start, end, $length) {
      if (start < 0 || start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      return A.initializeExceptionWrapper(new Error(), ex);
    },
    initializeExceptionWrapper(wrapper, ex) {
      var t1;
      if (ex == null)
        ex = new A.TypeError();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw A.wrapException(ex);
    },
    throwExpressionWithWrapper(ex, wrapper) {
      throw A.initializeExceptionWrapper(wrapper, ex);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      var t1;
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace) {
        t1 = ex.dartException;
        return A.saveStackTrace(ex, t1 == null ? type$.Object._as(t1) : t1);
      }
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              A.S(message);
              return A.saveStackTrace(ex, new A.NullError());
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else if (nullCall.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefCall.matchTypeError$1(message) != null || undefLiteralCall.matchTypeError$1(message) != null || nullProperty.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefProperty.matchTypeError$1(message) != null || undefLiteralProperty.matchTypeError$1(message) != null) {
            A._asString(message);
            return A.saveStackTrace(ex, new A.NullError());
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, null, null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      trace = new A._StackTrace(exception);
      if (typeof exception === "object")
        exception.$cachedTrace = trace;
      return trace;
    },
    objectHashCode(object) {
      if (object == null)
        return J.get$hashCode$(object);
      if (typeof object == "object")
        return A.Primitives_objectHashCode(object);
      return J.get$hashCode$(object);
    },
    constantHashCode(key) {
      if (typeof key == "number")
        return B.JSNumber_methods.get$hashCode(key);
      if (key instanceof A._Type)
        return A.Primitives_objectHashCode(key);
      if (key instanceof A._Record)
        return key.get$hashCode(key);
      if (key instanceof A.Symbol)
        return key.get$hashCode(0);
      return A.objectHashCode(key);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    fillLiteralSet(values, result) {
      var index,
        $length = values.length;
      for (index = 0; index < $length; ++index)
        result.add$1(0, values[index]);
      return result;
    },
    _invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = A.convertDartClosureToJSUncached(closure, arity);
      closure.$identity = $function;
      return $function;
    },
    convertDartClosureToJSUncached(closure, arity) {
      var entry;
      switch (arity) {
        case 0:
          entry = closure.call$0;
          break;
        case 1:
          entry = closure.call$1;
          break;
        case 2:
          entry = closure.call$2;
          break;
        case 3:
          entry = closure.call$3;
          break;
        case 4:
          entry = closure.call$4;
          break;
        default:
          entry = null;
      }
      if (entry != null)
        return entry.bind(closure);
      return function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A._invokeClosure);
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      $constructor = isStatic ? function static_tear_off() {
        this.$initialize();
      } : function tear_off(a, b) {
        this.$initialize(a, b);
      };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      return A.Closure_cspForwardCall($function.length, needsDirectAccess, stubName, $function);
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var t1, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    boolConversionCheck(value) {
      if (value == null)
        A.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow(message) {
      throw A.wrapException(new A._AssertionError(message));
    },
    throwCyclicInit(staticName) {
      throw A.wrapException(new A._CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    convertMainArgumentList(args) {
      var i,
        result = A._setArrayType([], type$.JSArray_String);
      if (args == null)
        return result;
      if (Array.isArray(args)) {
        for (i = 0; i < args.length; ++i)
          result.push(String(args[i]));
        return result;
      }
      result.push(String(args));
      return result;
    },
    LinkedHashMapKeyIterator$(_map, _modifications, $E) {
      var t1 = new A.LinkedHashMapKeyIterator(_map, _modifications, $E._eval$1("LinkedHashMapKeyIterator<0>"));
      t1._cell = _map._first;
      return t1;
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (Array.isArray(transformers))
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    createRecordTypePredicate(shape, fieldRtis) {
      var $length = fieldRtis.length,
        $function = init.rttc["" + $length + ";" + shape];
      if ($function == null)
        return null;
      if ($length === 0)
        return $function;
      if ($length === $function.length)
        return $function.apply(null, fieldRtis);
      return $function(fieldRtis);
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1;
      if (typeof other == "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else if (other instanceof A.JSSyntaxRegExp) {
        t1 = B.JSString_methods.substring$1(receiver, startIndex);
        return other._nativeRegExp.test(t1);
      } else
        return !J.allMatches$1$s(other, B.JSString_methods.substring$1(receiver, startIndex)).get$isEmpty(0);
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var nativeRegexp;
      if (typeof pattern == "string")
        return A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      if (pattern instanceof A.JSSyntaxRegExp) {
        nativeRegexp = pattern.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, A.escapeReplacement(replacement));
      }
      return A.stringReplaceAllGeneral(receiver, pattern, replacement);
    },
    stringReplaceAllGeneral(receiver, pattern, replacement) {
      var t1, startIndex, t2, match;
      for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), startIndex = 0, t2 = ""; t1.moveNext$0();) {
        match = t1.get$current();
        t2 = t2 + receiver.substring(startIndex, match.get$start()) + replacement;
        startIndex = match.get$end();
      }
      t1 = t2 + receiver.substring(startIndex);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      if (receiver.indexOf(pattern, 0) < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    _stringIdentity(string) {
      return string;
    },
    stringReplaceAllFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
      var t1, t2, startIndex, t3, match, t4, t5;
      for (t1 = pattern.allMatches$1(0, receiver), t1 = new A._AllMatchesIterator(t1._re, t1._string, t1.__js_helper$_start), t2 = type$.RegExpMatch, startIndex = 0, t3 = ""; t1.moveNext$0();) {
        match = t1.__js_helper$_current;
        if (match == null)
          match = t2._as(match);
        t4 = match._match;
        t5 = t4.index;
        t3 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$2(receiver, startIndex, t5))) + A.S(onMatch.call$1(match));
        startIndex = t5 + t4[0].length;
      }
      t1 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$1(receiver, startIndex)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
      var index = receiver.indexOf(pattern, startIndex);
      if (index < 0)
        return receiver;
      return A.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
    },
    stringReplaceRangeUnchecked(receiver, start, end, replacement) {
      return receiver.substring(0, start) + replacement + receiver.substring(end);
    },
    _Record_2: function _Record_2(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2) {
      this._jsIndex = t0;
      this.__js_helper$_values = t1;
      this.$ti = t2;
    },
    _KeysOrValues: function _KeysOrValues(t0, t1) {
      this._elements = t0;
      this.$ti = t1;
    },
    _KeysOrValuesOrElementsIterator: function _KeysOrValuesOrElementsIterator(t0, t1, t2) {
      var _ = this;
      _._elements = t0;
      _.__js_helper$_length = t1;
      _.__js_helper$_index = 0;
      _.__js_helper$_current = null;
      _.$ti = t2;
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError() {
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    _CyclicInitializationError: function _CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    JsIdentityLinkedHashMap: function JsIdentityLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsConstantLinkedHashMap: function JsConstantLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _Record: function _Record() {
    },
    _Record2: function _Record2() {
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this._string = t1;
      this.__js_helper$_start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    throwLateFieldNI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + "' has not been initialized."), new Error());
    },
    throwLateFieldAI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + "' has already been initialized."), new Error());
    },
    throwLateFieldADI(fieldName) {
      A.throwExpressionWithWrapper(new A.LateError("Field '" + fieldName + string$.x27_has_), new Error());
    },
    _Cell$named(_name) {
      var t1 = new A._Cell(_name);
      return t1._value = t1;
    },
    _InitializedCell$named(_name, _initializer) {
      var t1 = new A._InitializedCell(_name, _initializer);
      return t1._value = t1;
    },
    _Cell: function _Cell(t0) {
      this._name = t0;
      this._value = null;
    },
    _InitializedCell: function _InitializedCell(t0, t1) {
      this._name = t0;
      this._value = null;
      this._initializer = t1;
    },
    _checkViewArguments(buffer, offsetInBytes, $length) {
    },
    _ensureNativeList(list) {
      var t1, result, i;
      if (type$.JSIndexable_dynamic._is(list))
        return list;
      t1 = J.getInterceptor$asx(list);
      result = A.List_List$filled(t1.get$length(list), null, false, type$.dynamic);
      for (i = 0; i < t1.get$length(list); ++i)
        B.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
      return result;
    },
    NativeByteData_NativeByteData($length) {
      return new DataView(new ArrayBuffer($length));
    },
    NativeByteData_NativeByteData$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new DataView(buffer, offsetInBytes) : new DataView(buffer, offsetInBytes, $length);
    },
    NativeInt8List__create1(arg) {
      return new Int8Array(arg);
    },
    NativeUint16List_NativeUint16List($length) {
      return new Uint16Array($length);
    },
    NativeUint8List_NativeUint8List($length) {
      return new Uint8Array($length);
    },
    NativeUint8List_NativeUint8List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = start > $length;
        else
          t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = A._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 12 || kind === 13;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    instantiatedGenericFunctionType(genericFunctionRti, instantiationRti) {
      var t1, cache, key, probe, rti;
      if (genericFunctionRti == null)
        return null;
      t1 = instantiationRti._rest;
      cache = genericFunctionRti._bindCache;
      if (cache == null)
        cache = genericFunctionRti._bindCache = new Map();
      key = instantiationRti._canonicalRecipe;
      probe = cache.get(key);
      if (probe != null)
        return probe;
      rti = A._substitute(init.typeUniverse, genericFunctionRti._primary, t1, 0);
      cache.set(key, rti);
      return rti;
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, t1, fields, substitutedFields, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          t1 = rti._primary;
          fields = rti._rest;
          substitutedFields = A._substituteArray(universe, fields, typeArguments, depth);
          if (substitutedFields === fields)
            return rti;
          return A._Universe__lookupRecordRti(universe, t1, substitutedFields);
        case 12:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 13:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 14:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      if (object instanceof A.Object)
        return A._instanceType(object);
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? Object.getPrototypeOf(Object.getPrototypeOf(instance)).constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeTypeOfDartObject(object) {
      return A.createRuntimeType(A._instanceType(object));
    },
    getRuntimeTypeOfClosure(closure) {
      var rti = A.closureFunctionType(closure);
      return A.createRuntimeType(rti == null ? A.instanceType(closure) : rti);
    },
    _structuralTypeOf(object) {
      var functionRti;
      if (object instanceof A._Record)
        return object._getRti$0();
      functionRti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      if (functionRti != null)
        return functionRti;
      if (type$.TrustedGetRuntimeType._is(object))
        return J.get$runtimeType$(object)._rti;
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A.instanceType(object);
    },
    createRuntimeType(rti) {
      var t1 = rti._cachedRuntimeType;
      return t1 == null ? rti._cachedRuntimeType = A._createRuntimeType(rti) : t1;
    },
    _createRuntimeType(rti) {
      var starErasedRti, t1,
        s = rti._canonicalRecipe,
        starErasedRecipe = s.replace(/\*/g, "");
      if (starErasedRecipe === s)
        return rti._cachedRuntimeType = new A._Type(rti);
      starErasedRti = A._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      t1 = starErasedRti._cachedRuntimeType;
      return t1 == null ? starErasedRti._cachedRuntimeType = A._createRuntimeType(starErasedRti) : t1;
    },
    evaluateRtiForRecord(recordRecipe, valuesList) {
      var bindings, i,
        values = valuesList,
        $length = values.length;
      if ($length === 0)
        return type$.Record_0;
      if (0 >= $length)
        return A.ioore(values, 0);
      bindings = A._Universe_evalInEnvironment(init.typeUniverse, A._structuralTypeOf(values[0]), "@<0>");
      for (i = 1; i < $length; ++i) {
        if (!(i < values.length))
          return A.ioore(values, i);
        bindings = A._Universe_bind(init.typeUniverse, bindings, A._structuralTypeOf(values[i]));
      }
      return A._Universe_evalInEnvironment(init.typeUniverse, bindings, recordRecipe);
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var t1, unstarred, unstarredKind, isFn, $name, predicate, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (!A.isSoundTopType(testRti))
        t1 = testRti === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        return A._finishIsFn(testRti, object, A._isTop);
      t1 = testRti._kind;
      if (t1 === 7)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      if (t1 === 1)
        return A._finishIsFn(testRti, object, A._isNever);
      unstarred = t1 === 6 ? testRti._primary : testRti;
      unstarredKind = unstarred._kind;
      if (unstarredKind === 8)
        return A._finishIsFn(testRti, object, A._isFutureOr);
      if (unstarred === type$.int)
        isFn = A._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = A._isNum;
      else if (unstarred === type$.String)
        isFn = A._isString;
      else
        isFn = unstarred === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (unstarredKind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(A.isDefinitelyTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (unstarredKind === 11) {
        predicate = A.createRecordTypePredicate(unstarred._primary, unstarred._rest);
        return A._finishIsFn(testRti, object, predicate == null ? A._isNever : predicate);
      }
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (!A.isSoundTopType(testRti))
        t1 = testRti === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else {
        t1 = A.isNullable(testRti);
        if (t1)
          asFn = A._generalNullableAsCheckImplementation;
      }
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var kind = testRti._kind,
        t1 = true;
      if (!A.isSoundTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              if (!(kind === 6 && A._nullIs(testRti._primary)))
                t1 = kind === 8 && A._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      return A.isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), testRti);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var testRti = this;
      if (object == null) {
        if (A.isNullable(testRti))
          return object;
      } else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      A._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw A.wrapException(A._TypeError$fromMessage(A._Error_compose(object, A._rtiToString(testRti, null))));
    },
    checkTypeBound(type, bound, variable, methodName) {
      if (A.isSubtype(init.typeUniverse, type, bound))
        return type;
      throw A.wrapException(A._TypeError$fromMessage("The type argument '" + A._rtiToString(type, null) + "' is not a subtype of the type variable bound '" + A._rtiToString(bound, null) + "' of type variable '" + variable + "' in '" + methodName + "'."));
    },
    _Error_compose(object, checkedTypeDescription) {
      return A.Error_safeToString(object) + ": type '" + A._rtiToString(A._structuralTypeOf(object), null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, type));
    },
    _isFutureOr(object) {
      var testRti = this,
        unstarred = testRti._kind === 6 ? testRti._primary : testRti;
      return unstarred._primary._is(object) || A.Rti__getFutureFromFutureOr(init.typeUniverse, unstarred)._is(object);
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "Object"));
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isNever(object) {
      return false;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.wrapException(A._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var fieldCount, names, namesIndex, s, comma, i,
        partialShape = recordType._primary,
        fields = recordType._rest;
      if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
      fieldCount = fields.length;
      names = partialShape.split(",");
      namesIndex = names.length - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
          s += " " + names[namesIndex];
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, offset, i, t1, t2, typeParametersText, typeSep, t3, t4, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ", outerContextLength = null;
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null)
          genericContext = A._setArrayType([], type$.JSArray_String);
        else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t3 = genericContext.length;
          t4 = t3 - 1 - i;
          if (!(t4 >= 0))
            return A.ioore(genericContext, t4);
          typeParametersText = B.JSString_methods.$add(typeParametersText + typeSep, genericContext[t4]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            t3 = boundRti === t2;
          else
            t3 = true;
          if (!t3)
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else
        typeParametersText = "";
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var questionArgument, s, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6)
        return A._rtiToString(rti._primary, genericContext);
      if (kind === 7) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 12 || argumentKind === 13 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 8)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 9) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 12)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 13)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 14) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, normalize));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!A.isSoundTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        t1 = true;
        if (!A.isSoundTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && A.isNullable(baseType._primary);
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && A.isNullable(starArgument._primary))
            return starArgument;
          else
            return A.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (A.isSoundTopType(baseType) || baseType === type$.Object || baseType === type$.legacy_Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 14;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = partialShapeTag;
      rti._rest = fields;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, end, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              A._Parser_handleTypeArguments(parser, t1);
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 42:
              t3 = parser.u;
              t1.push(A._Universe__lookupStarRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(-3);
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              A._Parser_handleArguments(parser, t1);
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            case 43:
              end = source.indexOf("(", i);
              t1.push(source.substring(i, end));
              t1.push(-4);
              t1.push(parser.p);
              parser.p = t1.length;
              i = end + 1;
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleTypeArguments(parser, stack) {
      var base,
        t1 = parser.u,
        $arguments = A._Parser_collectArray(parser, stack),
        head = stack.pop();
      if (typeof head == "string")
        stack.push(A._Universe__lookupInterfaceRti(t1, head, $arguments));
      else {
        base = A._Parser_toType(t1, parser.e, head);
        switch (base._kind) {
          case 12:
            stack.push(A._Universe__lookupGenericFunctionRti(t1, base, $arguments, parser.n));
            break;
          default:
            stack.push(A._Universe__lookupBindingRti(t1, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleArguments(parser, stack) {
      var requiredPositional, returnType, parameters,
        t1 = parser.u,
        head = stack.pop(),
        optionalPositional = null, named = null;
      if (typeof head == "number")
        switch (head) {
          case -1:
            optionalPositional = stack.pop();
            break;
          case -2:
            named = stack.pop();
            break;
          default:
            stack.push(head);
            break;
        }
      else
        stack.push(head);
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = stack.pop();
      switch (head) {
        case -3:
          head = stack.pop();
          if (optionalPositional == null)
            optionalPositional = t1.sEA;
          if (named == null)
            named = t1.sEA;
          returnType = A._Parser_toType(t1, parser.e, head);
          parameters = new A._FunctionParameters();
          parameters._requiredPositional = requiredPositional;
          parameters._optionalPositional = optionalPositional;
          parameters._named = named;
          stack.push(A._Universe__lookupFunctionRti(t1, returnType, parameters));
          return;
        case -4:
          stack.push(A._Universe__lookupRecordRti(t1, stack.pop(), requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = stack.splice(parser.p);
      A._Parser_toTypes(parser.u, parser.e, array);
      parser.p = stack.pop();
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
      } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    isSubtype(universe, s, t) {
      var result,
        sCache = s._isSubtypeCache;
      if (sCache == null)
        sCache = s._isSubtypeCache = new Map();
      result = sCache.get(t);
      if (result == null) {
        result = A._isSubtype(universe, s, null, t, null, false) ? 1 : 0;
        sCache.set(t, result);
      }
      if (0 === result)
        return false;
      if (1 === result)
        return true;
      return true;
    },
    _isSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var t1, sKind, leftTypeVariable, tKind, t2, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!A.isSoundTopType(t))
        t1 = t === type$.legacy_Object;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isSoundTopType(s))
        return false;
      t1 = s._kind;
      if (t1 === 1)
        return true;
      leftTypeVariable = sKind === 14;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv, false))
          return true;
      tKind = t._kind;
      t1 = s === type$.Null || s === type$.JSNull;
      if (t1) {
        if (tKind === 8)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv, false);
        return t === type$.Null || t === type$.JSNull || tKind === 7 || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 8)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
        if (sKind === 6)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
        return sKind !== 7;
      }
      if (sKind === 6)
        return A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
      if (tKind === 6) {
        t1 = A.Rti__getQuestionFromStar(universe, t);
        return A._isSubtype(universe, s, sEnv, t1, tEnv, false);
      }
      if (sKind === 8) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv, false))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv, false);
      }
      if (sKind === 7) {
        t1 = A._isSubtype(universe, type$.Null, sEnv, t, tEnv, false);
        return t1 && A._isSubtype(universe, s._primary, sEnv, t, tEnv, false);
      }
      if (tKind === 8) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv, false))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv, false);
      }
      if (tKind === 7) {
        t1 = A._isSubtype(universe, s, sEnv, type$.Null, tEnv, false);
        return t1 || A._isSubtype(universe, s, sEnv, t._primary, tEnv, false);
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 12;
      if ((!t1 || sKind === 13) && t === type$.Function)
        return true;
      t2 = sKind === 11;
      if (t2 && t === type$.Record)
        return true;
      if (tKind === 13) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 13)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv, false) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv, false))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv, false);
      }
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv, false);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv, false);
      }
      if (t2 && tKind === 11)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv, false);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv, false))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv, false))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv, false))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv, false))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv, false))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var rule, recipes, $length, supertypeArgs, i,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv, false);
      }
      return A._areArgumentsSubtypes(universe, s._rest, null, sEnv, t._rest, tEnv, false);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv, isLegacy) {
      var i,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i)
        if (!A._isSubtype(universe, sArgs[i], sEnv, tArgs[i], tEnv, false))
          return false;
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv, isLegacy) {
      var i,
        sFields = s._rest,
        tFields = t._rest,
        sCount = sFields.length;
      if (sCount !== tFields.length)
        return false;
      if (s._primary !== t._primary)
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv, false))
          return false;
      return true;
    },
    isNullable(t) {
      var kind = t._kind,
        t1 = true;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isSoundTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && A.isNullable(t._primary)))
              t1 = kind === 8 && A.isNullable(t._primary);
      return t1;
    },
    isDefinitelyTopType(t) {
      var t1;
      if (!A.isSoundTopType(t))
        t1 = t === type$.legacy_Object;
      else
        t1 = true;
      return t1;
    },
    isSoundTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._isSubtypeCache = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this._message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (object instanceof A._Future)
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._async$_state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true) {
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
          }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _SyncStarIterator__terminatedBody(_1, _2, _3) {
      return 0;
    },
    AsyncError$(error, stackTrace) {
      var t1 = A.checkNotNullable(error, "error", type$.Object);
      return new A.AsyncError(t1, stackTrace == null ? A.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B.C__StringStackTrace;
    },
    Future_Future$value(value, $T) {
      var t1;
      $T._as(value);
      t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      t1._asyncComplete$1(value);
      return t1;
    },
    Future_Future$delayed(duration, $T) {
      var result,
        t1 = !$T._is(null);
      if (t1)
        throw A.wrapException(A.ArgumentError$value(null, "computation", "The type parameter is not nullable"));
      result = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      A.Timer_Timer(duration, new A.Future_Future$delayed_closure(null, result, $T));
      return result;
    },
    _completeWithErrorCallback(result, error, stackTrace) {
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      result._completeError$2(error, stackTrace);
    },
    _Future__chainCoreFutureSync(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._async$_state, (t2 & 4) !== 0;)
        source = t1._as(source._resultOrListeners);
      if (source === target) {
        target._asyncCompleteError$2(new A.ArgumentError(true, source, null, "Cannot complete a future with itself"), A.StackTrace_current());
        return;
      }
      t1 = t2 | target._async$_state & 1;
      source._async$_state = t1;
      if ((t1 & 24) !== 0) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        A._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(source);
        source._prependListeners$1(listeners);
      }
    },
    _Future__chainCoreFutureAsync(source, target) {
      var t2, t3, listeners, _box_0 = {},
        t1 = _box_0.source = source;
      for (t2 = type$._Future_dynamic; t3 = t1._async$_state, (t3 & 4) !== 0; t1 = source) {
        source = t2._as(t1._resultOrListeners);
        _box_0.source = source;
      }
      if (t1 === target) {
        target._asyncCompleteError$2(new A.ArgumentError(true, t1, null, "Cannot complete a future with itself"), A.StackTrace_current());
        return;
      }
      if ((t3 & 24) === 0) {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._setChained$1(t1);
        _box_0.source._prependListeners$1(listeners);
        return;
      }
      if ((t3 & 16) === 0 && target._resultOrListeners == null) {
        target._cloneResult$1(t1);
        return;
      }
      target._async$_state ^= 2;
      A._rootScheduleMicrotask(null, null, target._zone, type$.void_Function._as(new A._Future__chainCoreFutureAsync_closure(_box_0, target)));
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, t4, _box_0, t5, t6, hasError, asyncError, nextListener, nextListener0, sourceResult, t7, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        t5 = t1._async$_state;
        t6 = (t5 & 16) === 0;
        hasError = !t6;
        if (listeners == null) {
          if (hasError && (t5 & 1) === 0) {
            asyncError = t2._as(t1._resultOrListeners);
            A._rootHandleError(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t5 = t5._zone === zone;
            t5 = !(t5 || t5);
          } else
            t5 = false;
          if (t5) {
            t2._as(sourceResult);
            A._rootHandleError(sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = t1.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t1 instanceof A._Future) {
            t5 = _box_0.listener.$ti;
            t5 = t5._eval$1("Future<2>")._is(t1) || !t5._rest[1]._is(t1);
          } else
            t5 = false;
          if (t5) {
            t4._as(t1);
            result = _box_0.listener.result;
            if ((t1._async$_state & 24) !== 0) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._async$_state = t1._async$_state & 30 | result._async$_state & 1;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFutureSync(t1, result);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._async$_state = 8;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._async$_state = result._async$_state & 1 | 16;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      var t1;
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      t1 = type$.dynamic_Function_Object;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      A._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(currentZone.bindCallbackGuarded$1(callback)));
    },
    Stream_Stream$value(value, $T) {
      var _null = null,
        t1 = $T._eval$1("_AsyncStreamController<0>"),
        t2 = new A._AsyncStreamController(_null, _null, _null, _null, t1);
      t2._async$_add$1(value);
      t2._closeUnchecked$0();
      return new A._ControllerStream(t2, t1._eval$1("_ControllerStream<1>"));
    },
    StreamIterator_StreamIterator(stream, $T) {
      A.checkNotNullable(stream, "stream", type$.Object);
      return new A._StreamIterator($T._eval$1("_StreamIterator<0>"));
    },
    StreamController_StreamController(onListen, onPause, onResume, sync, $T) {
      return sync ? new A._SyncStreamController(onListen, onPause, onResume, null, $T._eval$1("_SyncStreamController<0>")) : new A._AsyncStreamController(onListen, onPause, onResume, null, $T._eval$1("_AsyncStreamController<0>"));
    },
    _runGuarded(notificationHandler) {
      var e, s, exception;
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    _ControllerSubscription$(_controller, onData, onError, onDone, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0,
        t3 = onError != null ? 32 : 0,
        t4 = A._BufferingStreamSubscription__registerDataHandler(t1, onData, $T),
        t5 = A._BufferingStreamSubscription__registerErrorHandler(t1, onError),
        t6 = onDone == null ? A.async___nullDoneHandler$closure() : onDone;
      return new A._ControllerSubscription(_controller, t4, t5, type$.void_Function._as(t6), t1, t2 | t3, $T._eval$1("_ControllerSubscription<0>"));
    },
    _BufferingStreamSubscription__registerDataHandler(zone, handleData, $T) {
      var t1 = handleData == null ? A.async___nullDataHandler$closure() : handleData;
      return type$.$env_1_1_void._bind$1($T)._eval$1("1(2)")._as(t1);
    },
    _BufferingStreamSubscription__registerErrorHandler(zone, handleError) {
      if (handleError == null)
        handleError = A.async___nullErrorHandler$closure();
      if (type$.void_Function_Object_StackTrace._is(handleError))
        return zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.void_Function_Object._is(handleError))
        return type$.dynamic_Function_Object._as(handleError);
      throw A.wrapException(A.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace.", null));
    },
    _nullDataHandler(value) {
    },
    _nullErrorHandler(error, stackTrace) {
      A._rootHandleError(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    _nullDoneHandler() {
    },
    _DoneStreamSubscription$(onDone, $T) {
      var t1 = new A._DoneStreamSubscription($.Zone__current, $T._eval$1("_DoneStreamSubscription<0>"));
      A.scheduleMicrotask(t1.get$_onMicrotask());
      if (onDone != null)
        t1.set$_onDone(type$.void_Function._as(onDone));
      return t1;
    },
    _cancelAndValue(subscription, future, value) {
      var cancelFuture = subscription.cancel$0(),
        t1 = $.$get$Future__nullFuture();
      if (cancelFuture !== t1)
        cancelFuture.whenComplete$1(new A._cancelAndValue_closure(future, value));
      else
        future._complete$1(value);
    },
    _StreamHandlerTransformer$(handleData, $S, $T) {
      return new A._StreamHandlerTransformer(new A._StreamHandlerTransformer_closure(handleData, null, null, $T, $S), $S._eval$1("@<0>")._bind$1($T)._eval$1("_StreamHandlerTransformer<1,2>"));
    },
    Timer_Timer(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return A.Timer__createTimer(duration, type$.void_Function._as(callback));
      return A.Timer__createTimer(duration, type$.void_Function._as(t1.bindCallbackGuarded$1(callback)));
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      type$.void_Function._as(f);
      if (B.C__RootZone !== zone)
        f = zone.bindCallbackGuarded$1(f);
      A._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
      this._handle = null;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._body = t0;
      _._suspendedBodies = _._nestedIterator = _._datum = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _BroadcastSubscription: function _BroadcastSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._eventState = 0;
      _._async$_previous = _._async$_next = null;
      _._controller = t0;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._async$_state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _BroadcastStreamController: function _BroadcastStreamController() {
    },
    _AsyncBroadcastStreamController: function _AsyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._async$_state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    Future_Future$delayed_closure: function Future_Future$delayed_closure(t0, t1, t2) {
      this.computation = t0;
      this.result = t1;
      this.T = t2;
    },
    TimeoutException: function TimeoutException(t0, t1) {
      this.message = t0;
      this.duration = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._async$_state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__chainCoreFutureAsync_closure: function _Future__chainCoreFutureAsync_closure(t0, t1) {
      this._box_0 = t0;
      this.target = t1;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _Future_timeout_closure: function _Future_timeout_closure(t0, t1) {
      this._future = t0;
      this.timeLimit = t1;
    },
    _Future_timeout_closure0: function _Future_timeout_closure0(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this._future = t2;
    },
    _Future_timeout_closure1: function _Future_timeout_closure1(t0, t1) {
      this._box_0 = t0;
      this._future = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    Stream_first_closure: function Stream_first_closure(t0) {
      this.future = t0;
    },
    Stream_first_closure0: function Stream_first_closure0(t0, t1, t2) {
      this.$this = t0;
      this.subscription = t1;
      this.future = t2;
    },
    StreamView: function StreamView() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._async$_state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _SyncStreamController: function _SyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._async$_state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._controller = t0;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._async$_state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _StreamSinkWrapper: function _StreamSinkWrapper(t0, t1) {
      this._async$_target = t0;
      this.$ti = t1;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents(t0) {
      var _ = this;
      _._async$_state = 0;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _.$ti = t0;
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _DoneStreamSubscription: function _DoneStreamSubscription(t0, t1) {
      var _ = this;
      _._async$_state = 1;
      _._zone = t0;
      _._onDone = null;
      _.$ti = t1;
    },
    _StreamIterator: function _StreamIterator(t0) {
      this.$ti = t0;
    },
    _EmptyStream: function _EmptyStream(t0) {
      this.$ti = t0;
    },
    _cancelAndValue_closure: function _cancelAndValue_closure(t0, t1) {
      this.future = t0;
      this.value = t1;
    },
    _EventSinkWrapper: function _EventSinkWrapper(t0, t1) {
      this._sink = t0;
      this.$ti = t1;
    },
    _SinkTransformerStreamSubscription: function _SinkTransformerStreamSubscription(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.___SinkTransformerStreamSubscription__transformerSink_A = $;
      _._subscription = null;
      _._onData = t0;
      _._onError = t1;
      _._onDone = t2;
      _._zone = t3;
      _._async$_state = t4;
      _._pending = _._cancelFuture = null;
      _.$ti = t5;
    },
    _StreamSinkTransformer: function _StreamSinkTransformer() {
    },
    _BoundSinkStream: function _BoundSinkStream(t0, t1, t2) {
      this._sinkMapper = t0;
      this._stream = t1;
      this.$ti = t2;
    },
    _HandlerEventSink: function _HandlerEventSink(t0, t1, t2, t3, t4) {
      var _ = this;
      _._handleData = t0;
      _._handleError = t1;
      _._handleDone = t2;
      _._sink = t3;
      _.$ti = t4;
    },
    _StreamHandlerTransformer: function _StreamHandlerTransformer(t0, t1) {
      this._sinkMapper = t0;
      this.$ti = t1;
    },
    _StreamHandlerTransformer_closure: function _StreamHandlerTransformer_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.handleData = t0;
      _.handleError = t1;
      _.handleDone = t2;
      _.T = t3;
      _.S = t4;
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap(equals, hashCode, $K, $V) {
      if (hashCode == null) {
        if (equals == null)
          return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
        hashCode = A.collection___defaultHashCode$closure();
      } else {
        if (A.core__identityHashCode$closure() === hashCode && A.core__identical$closure() === equals)
          return new A.JsIdentityLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsIdentityLinkedHashMap<1,2>"));
        if (equals == null)
          equals = A.collection___defaultEquals$closure();
      }
      return A._LinkedCustomHashMap$(equals, hashCode, null, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    _LinkedCustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      return new A._LinkedCustomHashMap(_equals, _hashCode, new A._LinkedCustomHashMap_closure($K), $K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedCustomHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_literal(values, $E) {
      return $E._eval$1("LinkedHashSet<0>")._as(A.fillLiteralSet(values, new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"))));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications, $E) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    _defaultEquals(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode(a) {
      return J.get$hashCode$(a);
    },
    LinkedHashMap_LinkedHashMap$from(other, $K, $V) {
      var result = A.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      other.forEach$1(0, new A.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashMap_LinkedHashMap$of(other, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      t1.addAll$1(0, other);
      return t1;
    },
    LinkedHashSet_LinkedHashSet$from(elements, $E) {
      var t1, _i,
        result = A.LinkedHashSet_LinkedHashSet($E);
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, A.throwConcurrentModificationError)(elements), ++_i)
        result.add$1(0, $E._as(elements[_i]));
      return result;
    },
    LinkedHashSet_LinkedHashSet$of(elements, $E) {
      var t1 = A.LinkedHashSet_LinkedHashSet($E);
      t1.addAll$1(0, elements);
      return t1;
    },
    ListBase__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    ListBase_listToString(list) {
      return A.Iterable_iterableToFullString(list, "[", "]");
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (A.isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        B.JSArray_methods.add$1($.toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__fillMapWithMappedIterable(map, iterable, key, value) {
      var t1, t2, element;
      for (t1 = A._instanceType(iterable), t2 = new A.ListIterator(iterable, iterable.get$length(0), t1._eval$1("ListIterator<ListBase.E>")), t1 = t1._eval$1("ListBase.E"); t2.moveNext$0();) {
        element = t2.__internal$_current;
        if (element == null)
          element = t1._as(element);
        map.$indexSet(0, key.call$1(element), value.call$1(element));
      }
    },
    _UnmodifiableSetMixin__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot change an unmodifiable set"));
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
      this.K = t0;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    MapBase: function MapBase() {
    },
    MapBase_entries_closure: function MapBase_entries_closure(t0) {
      this.$this = t0;
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    UnmodifiableMapBase: function UnmodifiableMapBase() {
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._keys = t0;
      _._collection$_map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableSetMixin: function _UnmodifiableSetMixin() {
    },
    UnmodifiableSetView: function UnmodifiableSetView(t0, t1) {
      this._collection$_source = t0;
      this.$ti = t1;
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _UnmodifiableSetView_SetBase__UnmodifiableSetMixin: function _UnmodifiableSetView_SetBase__UnmodifiableSetMixin() {
    },
    _parseJson(source, reviver) {
      var e, exception, t1, parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.FormatException$(String(e), null, null);
        throw A.wrapException(t1);
      }
      t1 = A._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy(object) {
      var i;
      if (object == null)
        return null;
      if (typeof object != "object")
        return object;
      if (!Array.isArray(object))
        return new A._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = A._convertJsonToDartLazy(object[i]);
      return object;
    },
    _Utf8Decoder__makeNativeUint8List(codeUnits, start, end) {
      var bytes, t1, i, b,
        $length = end - start;
      if ($length <= 4096)
        bytes = $.$get$_Utf8Decoder__reusableBuffer();
      else
        bytes = new Uint8Array($length);
      for (t1 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
        b = t1.$index(codeUnits, start + i);
        if ((b & 255) !== b)
          b = 255;
        bytes[i] = b;
      }
      return bytes;
    },
    _Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$_Utf8Decoder__decoderNonfatal() : $.$get$_Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A._Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A._Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, end));
    },
    _Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    Base64Codec__checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (B.JSInt_methods.$mod($length, 4) !== 0)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder_encodeChunk(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var t1, t2, t3, i, byteOr, byte, outputIndex0, t4, outputIndex1,
        bits = state >>> 2,
        expectedChars = 3 - (state & 3);
      for (t1 = J.getInterceptor$asx(bytes), t2 = alphabet.length, t3 = output.length, i = start, byteOr = 0; i < end; ++i) {
        byte = t1.$index(bytes, i);
        byteOr = (byteOr | byte) >>> 0;
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          outputIndex0 = outputIndex + 1;
          t4 = bits >>> 18 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex < t3))
            return A.ioore(output, outputIndex);
          output[outputIndex] = alphabet.charCodeAt(t4);
          outputIndex = outputIndex0 + 1;
          t4 = bits >>> 12 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex0 < t3))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = alphabet.charCodeAt(t4);
          outputIndex0 = outputIndex + 1;
          t4 = bits >>> 6 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex < t3))
            return A.ioore(output, outputIndex);
          output[outputIndex] = alphabet.charCodeAt(t4);
          outputIndex = outputIndex0 + 1;
          t4 = bits & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex0 < t3))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = alphabet.charCodeAt(t4);
          bits = 0;
          expectedChars = 3;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (isLast && expectedChars < 3) {
          outputIndex0 = outputIndex + 1;
          outputIndex1 = outputIndex0 + 1;
          if (3 - expectedChars === 1) {
            t1 = bits >>> 2 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = alphabet.charCodeAt(t1);
            t1 = bits << 4 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex0 < t3))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = alphabet.charCodeAt(t1);
            outputIndex = outputIndex1 + 1;
            if (!(outputIndex1 < t3))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = 61;
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          } else {
            t1 = bits >>> 10 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = alphabet.charCodeAt(t1);
            t1 = bits >>> 4 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex0 < t3))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = alphabet.charCodeAt(t1);
            outputIndex = outputIndex1 + 1;
            t1 = bits << 2 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex1 < t3))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = alphabet.charCodeAt(t1);
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          }
          return 0;
        }
        return (bits << 2 | 3 - expectedChars) >>> 0;
      }
      for (i = start; i < end;) {
        byte = t1.$index(bytes, i);
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      throw A.wrapException(A.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + J.toRadixString$1$n(t1.$index(bytes, i), 16), null));
    },
    _Base64Decoder_decodeChunk(input, start, end, output, outIndex, state) {
      var t1, t2, t3, i, charOr, char, t4, code, outIndex0, expectedPadding,
        _s31_ = "Invalid encoding before padding",
        _s17_ = "Invalid character",
        bits = B.JSInt_methods._shrOtherPositive$1(state, 2),
        count = state & 3,
        inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t1 = input.length, t2 = inverseAlphabet.length, t3 = output.length, i = start, charOr = 0; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(input, i);
        char = input.charCodeAt(i);
        charOr |= char;
        t4 = char & 127;
        if (!(t4 < t2))
          return A.ioore(inverseAlphabet, t4);
        code = inverseAlphabet[t4];
        if (code >= 0) {
          bits = (bits << 6 | code) & 16777215;
          count = count + 1 & 3;
          if (count === 0) {
            outIndex0 = outIndex + 1;
            if (!(outIndex < t3))
              return A.ioore(output, outIndex);
            output[outIndex] = bits >>> 16 & 255;
            outIndex = outIndex0 + 1;
            if (!(outIndex0 < t3))
              return A.ioore(output, outIndex0);
            output[outIndex0] = bits >>> 8 & 255;
            outIndex0 = outIndex + 1;
            if (!(outIndex < t3))
              return A.ioore(output, outIndex);
            output[outIndex] = bits & 255;
            outIndex = outIndex0;
            bits = 0;
          }
          continue;
        } else if (code === -1 && count > 1) {
          if (charOr > 127)
            break;
          if (count === 3) {
            if ((bits & 3) !== 0)
              throw A.wrapException(A.FormatException$(_s31_, input, i));
            outIndex0 = outIndex + 1;
            if (!(outIndex < t3))
              return A.ioore(output, outIndex);
            output[outIndex] = bits >>> 10;
            if (!(outIndex0 < t3))
              return A.ioore(output, outIndex0);
            output[outIndex0] = bits >>> 2;
          } else {
            if ((bits & 15) !== 0)
              throw A.wrapException(A.FormatException$(_s31_, input, i));
            if (!(outIndex < t3))
              return A.ioore(output, outIndex);
            output[outIndex] = bits >>> 4;
          }
          expectedPadding = (3 - count) * 3;
          if (char === 37)
            expectedPadding += 2;
          return A._Base64Decoder__checkPadding(input, i + 1, end, -expectedPadding - 1);
        }
        throw A.wrapException(A.FormatException$(_s17_, input, i));
      }
      if (charOr >= 0 && charOr <= 127)
        return (bits << 2 | count) >>> 0;
      for (i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(input, i);
        if (input.charCodeAt(i) > 127)
          break;
      }
      throw A.wrapException(A.FormatException$(_s17_, input, i));
    },
    _Base64Decoder__allocateBuffer(input, start, end, state) {
      var paddingStart = A._Base64Decoder__trimPaddingChars(input, start, end),
        $length = (state & 3) + (paddingStart - start),
        bufferLength = B.JSInt_methods._shrOtherPositive$1($length, 2) * 3,
        remainderLength = $length & 3;
      if (remainderLength !== 0 && paddingStart < end)
        bufferLength += remainderLength - 1;
      if (bufferLength > 0)
        return new Uint8Array(bufferLength);
      return $.$get$_Base64Decoder__emptyBuffer();
    },
    _Base64Decoder__trimPaddingChars(input, start, end) {
      var char,
        t1 = input.length,
        newEnd = end,
        index = newEnd,
        padding = 0;
      while (true) {
        if (!(index > start && padding < 2))
          break;
        c$0: {
          --index;
          if (!(index >= 0 && index < t1))
            return A.ioore(input, index);
          char = input.charCodeAt(index);
          if (char === 61) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          if ((char | 32) === 100) {
            if (index === start)
              break;
            --index;
            if (!(index >= 0 && index < t1))
              return A.ioore(input, index);
            char = input.charCodeAt(index);
          }
          if (char === 51) {
            if (index === start)
              break;
            --index;
            if (!(index >= 0 && index < t1))
              return A.ioore(input, index);
            char = input.charCodeAt(index);
          }
          if (char === 37) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          break;
        }
      }
      return newEnd;
    },
    _Base64Decoder__checkPadding(input, start, end, state) {
      var expectedPadding, t1, char;
      if (start === end)
        return state;
      expectedPadding = -state - 1;
      for (t1 = input.length; expectedPadding > 0;) {
        if (!(start < t1))
          return A.ioore(input, start);
        char = input.charCodeAt(start);
        if (expectedPadding === 3) {
          if (char === 61) {
            expectedPadding -= 3;
            ++start;
            break;
          }
          if (char === 37) {
            --expectedPadding;
            ++start;
            if (start === end)
              break;
            if (!(start < t1))
              return A.ioore(input, start);
            char = input.charCodeAt(start);
          } else
            break;
        }
        if ((expectedPadding > 3 ? expectedPadding - 3 : expectedPadding) === 2) {
          if (char !== 51)
            break;
          ++start;
          --expectedPadding;
          if (start === end)
            break;
          if (!(start < t1))
            return A.ioore(input, start);
          char = input.charCodeAt(start);
        }
        if ((char | 32) !== 100)
          break;
        ++start;
        --expectedPadding;
        if (start === end)
          break;
      }
      if (start !== end)
        throw A.wrapException(A.FormatException$("Invalid padding character", input, start));
      return -expectedPadding - 1;
    },
    Encoding_getByName($name) {
      return $.$get$Encoding__nameToEncoding().$index(0, $name.toLowerCase());
    },
    JsonUnsupportedObjectError$(unsupportedObject, cause, partialResult) {
      return new A.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier$(_sink, _toEncodable) {
      var t1 = _toEncodable == null ? A.convert___defaultToEncodable$closure() : _toEncodable;
      return new A._JsonStringStringifier(_sink, [], t1);
    },
    _JsonStringStringifier_stringify(object, toEncodable, indent) {
      var t1,
        output = new A.StringBuffer("");
      A._JsonStringStringifier_printOn(object, output, toEncodable, indent);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _JsonStringStringifier_printOn(object, output, toEncodable, indent) {
      var stringifier = A._JsonStringStringifier$(output, toEncodable);
      stringifier.writeObject$1(object);
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._data = null;
    },
    _JsonMap_values_closure: function _JsonMap_values_closure(t0) {
      this.$this = t0;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._parent = t0;
    },
    _Utf8Decoder__decoder_closure: function _Utf8Decoder__decoder_closure() {
    },
    _Utf8Decoder__decoderNonfatal_closure: function _Utf8Decoder__decoderNonfatal_closure() {
    },
    AsciiCodec: function AsciiCodec() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0) {
      this._subsetMask = t0;
    },
    _UnicodeSubsetDecoder: function _UnicodeSubsetDecoder() {
    },
    AsciiDecoder: function AsciiDecoder(t0, t1) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
    },
    Base64Codec: function Base64Codec(t0) {
      this._encoder = t0;
    },
    Base64Encoder: function Base64Encoder(t0) {
      this._urlSafe = t0;
    },
    _Base64Encoder: function _Base64Encoder(t0) {
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    Base64Decoder: function Base64Decoder() {
    },
    _Base64Decoder: function _Base64Decoder() {
      this._convert$_state = 0;
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    _ByteCallbackSink: function _ByteCallbackSink(t0, t1) {
      this._callback = t0;
      this._convert$_buffer = t1;
      this._bufferIndex = 0;
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0, t1) {
      this.indent = t0;
      this._toEncodable = t1;
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._convert$_sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    Latin1Codec: function Latin1Codec() {
    },
    Latin1Encoder: function Latin1Encoder(t0) {
      this._subsetMask = t0;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = this._carry = 0;
      this._convert$_buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    _BigIntImpl_parse(source, radix) {
      var result = A._BigIntImpl__tryParse(source, radix);
      if (result == null)
        throw A.wrapException(A.FormatException$("Could not parse BigInt", source, null));
      return result;
    },
    _BigIntImpl__parseDecimal(source, isNegative) {
      var part, i,
        result = $.$get$_BigIntImpl_zero(),
        t1 = source.length,
        digitInPartCount = 4 - t1 % 4;
      if (digitInPartCount === 4)
        digitInPartCount = 0;
      for (part = 0, i = 0; i < t1; ++i) {
        part = part * 10 + source.charCodeAt(i) - 48;
        ++digitInPartCount;
        if (digitInPartCount === 4) {
          result = result.$mul(0, $.$get$_BigIntImpl__bigInt10000()).$add(0, A._BigIntImpl__BigIntImpl$_fromInt(part));
          part = 0;
          digitInPartCount = 0;
        }
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__codeUnitToRadixValue(codeUnit) {
      if (48 <= codeUnit && codeUnit <= 57)
        return codeUnit - 48;
      return (codeUnit | 32) - 97 + 10;
    },
    _BigIntImpl__parseHex(source, startPos, isNegative) {
      var i, chunk, j, i0, digitValue, digitIndex, digitIndex0,
        t1 = source.length,
        sourceLength = t1 - startPos,
        chunkCount = B.JSNumber_methods.ceil$0(sourceLength / 4),
        digits = new Uint16Array(chunkCount),
        t2 = chunkCount - 1,
        lastDigitLength = sourceLength - t2 * 4;
      for (i = startPos, chunk = 0, j = 0; j < lastDigitLength; ++j, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(source, i);
        digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
        if (digitValue >= 16)
          return null;
        chunk = chunk * 16 + digitValue;
      }
      digitIndex = t2 - 1;
      if (!(t2 >= 0 && t2 < chunkCount))
        return A.ioore(digits, t2);
      digits[t2] = chunk;
      for (; i < t1; digitIndex = digitIndex0) {
        for (chunk = 0, j = 0; j < 4; ++j, i = i0) {
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(source, i);
          digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
          if (digitValue >= 16)
            return null;
          chunk = chunk * 16 + digitValue;
        }
        digitIndex0 = digitIndex - 1;
        if (!(digitIndex >= 0 && digitIndex < chunkCount))
          return A.ioore(digits, digitIndex);
        digits[digitIndex] = chunk;
      }
      if (chunkCount === 1) {
        if (0 >= chunkCount)
          return A.ioore(digits, 0);
        t1 = digits[0] === 0;
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_zero();
      t1 = A._BigIntImpl__normalize(chunkCount, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__parseRadix(source, radix, isNegative) {
      var t1, i, digitValue,
        result = $.$get$_BigIntImpl_zero(),
        base = A._BigIntImpl__BigIntImpl$_fromInt(radix);
      for (t1 = source.length, i = 0; i < t1; ++i) {
        digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
        if (digitValue >= radix)
          return null;
        result = result.$mul(0, base).$add(0, A._BigIntImpl__BigIntImpl$_fromInt(digitValue));
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__tryParse(source, radix) {
      var match, t1, t2, isNegative, decimalMatch, hexMatch, nonDecimalMatch, _null = null;
      if (source === "")
        return _null;
      match = $.$get$_BigIntImpl__parseRE().firstMatch$1(source);
      if (match == null)
        return _null;
      t1 = match._match;
      t2 = t1.length;
      if (1 >= t2)
        return A.ioore(t1, 1);
      isNegative = t1[1] === "-";
      if (4 >= t2)
        return A.ioore(t1, 4);
      decimalMatch = t1[4];
      hexMatch = t1[3];
      if (5 >= t2)
        return A.ioore(t1, 5);
      nonDecimalMatch = t1[5];
      if (radix == null) {
        if (decimalMatch != null)
          return A._BigIntImpl__parseDecimal(decimalMatch, isNegative);
        if (hexMatch != null)
          return A._BigIntImpl__parseHex(hexMatch, 2, isNegative);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return A._BigIntImpl__parseDecimal(decimalMatch, isNegative);
      if (radix === 16)
        t1 = decimalMatch != null || nonDecimalMatch != null;
      else
        t1 = false;
      if (t1) {
        if (decimalMatch == null) {
          nonDecimalMatch.toString;
          t1 = nonDecimalMatch;
        } else
          t1 = decimalMatch;
        return A._BigIntImpl__parseHex(t1, 0, isNegative);
      }
      t1 = decimalMatch == null ? nonDecimalMatch : decimalMatch;
      if (t1 == null) {
        hexMatch.toString;
        t1 = hexMatch;
      }
      return A._BigIntImpl__parseRadix(t1, radix, isNegative);
    },
    _BigIntImpl__normalize(used, digits) {
      var t2,
        t1 = digits.length;
      while (true) {
        if (used > 0) {
          t2 = used - 1;
          if (!(t2 < t1))
            return A.ioore(digits, t2);
          t2 = digits[t2] === 0;
        } else
          t2 = false;
        if (!t2)
          break;
        --used;
      }
      return used;
    },
    _BigIntImpl__cloneDigits(digits, from, to, $length) {
      var t1, i, t2,
        resultDigits = new Uint16Array($length),
        n = to - from;
      for (t1 = digits.length, i = 0; i < n; ++i) {
        t2 = from + i;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(digits, t2);
        t2 = digits[t2];
        if (!(i < $length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      return resultDigits;
    },
    _BigIntImpl__BigIntImpl$from(value) {
      var t1;
      if (value === 0)
        return $.$get$_BigIntImpl_zero();
      if (value === 1)
        return $.$get$_BigIntImpl_one();
      if (value === 2)
        return $.$get$_BigIntImpl_two();
      if (Math.abs(value) < 4294967296)
        return A._BigIntImpl__BigIntImpl$_fromInt(B.JSInt_methods.toInt$0(value));
      t1 = A._BigIntImpl__BigIntImpl$_fromDouble(value);
      return t1;
    },
    _BigIntImpl__BigIntImpl$_fromInt(value) {
      var digits, t1, i, i0,
        isNegative = value < 0;
      if (isNegative) {
        if (value === -9223372036854776e3) {
          digits = new Uint16Array(4);
          digits[3] = 32768;
          t1 = A._BigIntImpl__normalize(4, digits);
          return new A._BigIntImpl(t1 !== 0, digits, t1);
        }
        value = -value;
      }
      if (value < 65536) {
        digits = new Uint16Array(1);
        digits[0] = value;
        t1 = A._BigIntImpl__normalize(1, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      if (value <= 4294967295) {
        digits = new Uint16Array(2);
        digits[0] = value & 65535;
        digits[1] = B.JSInt_methods._shrOtherPositive$1(value, 16);
        t1 = A._BigIntImpl__normalize(2, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      t1 = B.JSInt_methods._tdivFast$1(B.JSInt_methods.get$bitLength(value) - 1, 16) + 1;
      digits = new Uint16Array(t1);
      for (i = 0; value !== 0; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(digits, i);
        digits[i] = value & 65535;
        value = B.JSInt_methods._tdivFast$1(value, 65536);
      }
      t1 = A._BigIntImpl__normalize(t1, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__BigIntImpl$_fromDouble(value) {
      var isNegative, bits, i, t1, t2, exponent, unshiftedDigits, unshiftedBig, absResult;
      if (isNaN(value) || value == 1 / 0 || value == -1 / 0)
        throw A.wrapException(A.ArgumentError$("Value must be finite: " + value, null));
      isNegative = value < 0;
      if (isNegative)
        value = -value;
      value = Math.floor(value);
      if (value === 0)
        return $.$get$_BigIntImpl_zero();
      bits = $.$get$_BigIntImpl__bitsForFromDouble();
      for (i = 0; i < 8; ++i)
        bits[i] = 0;
      B.NativeByteData_methods._setFloat64$3(A.NativeByteData_NativeByteData$view(bits.buffer, 0, null), 0, value, true);
      t1 = bits[7];
      t2 = bits[6];
      exponent = (t1 << 4 >>> 0) + (t2 >>> 4) - 1075;
      unshiftedDigits = new Uint16Array(4);
      unshiftedDigits[0] = (bits[1] << 8 >>> 0) + bits[0];
      unshiftedDigits[1] = (bits[3] << 8 >>> 0) + bits[2];
      unshiftedDigits[2] = (bits[5] << 8 >>> 0) + bits[4];
      unshiftedDigits[3] = t2 & 15 | 16;
      unshiftedBig = new A._BigIntImpl(false, unshiftedDigits, 4);
      if (exponent < 0)
        absResult = unshiftedBig.$shr(0, -exponent);
      else
        absResult = exponent > 0 ? unshiftedBig.$shl(0, exponent) : unshiftedBig;
      if (isNegative)
        return absResult.$negate(0);
      return absResult;
    },
    _BigIntImpl__dlShiftDigits(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, t3, t4;
      if (xUsed === 0)
        return 0;
      if (n === 0 && resultDigits === xDigits)
        return xUsed;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.length; i >= 0; --i) {
        t3 = i + n;
        if (!(i < t1))
          return A.ioore(xDigits, i);
        t4 = xDigits[i];
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = t4;
      }
      for (i = n - 1; i >= 0; --i) {
        if (!(i < t2))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return xUsed + n;
    },
    _BigIntImpl__lsh(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, carry, digit, t3, t4,
        digitShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, carryBitShift) - 1;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.length, carry = 0; i >= 0; --i) {
        if (!(i < t1))
          return A.ioore(xDigits, i);
        digit = xDigits[i];
        t3 = i + digitShift + 1;
        t4 = B.JSInt_methods._shrReceiverPositive$1(digit, carryBitShift);
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = (t4 | carry) >>> 0;
        carry = B.JSInt_methods.$shl(digit & bitMask, bitShift);
      }
      if (!(digitShift >= 0 && digitShift < t2))
        return A.ioore(resultDigits, digitShift);
      resultDigits[digitShift] = carry;
    },
    _BigIntImpl__lShiftDigits(xDigits, xUsed, n, resultDigits) {
      var resultUsed, t1, i, t2,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16);
      if (B.JSInt_methods.$mod(n, 16) === 0)
        return A._BigIntImpl__dlShiftDigits(xDigits, xUsed, digitsShift, resultDigits);
      resultUsed = xUsed + digitsShift + 1;
      A._BigIntImpl__lsh(xDigits, xUsed, n, resultDigits);
      for (t1 = resultDigits.length, i = digitsShift; --i, i >= 0;) {
        if (!(i < t1))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      t2 = resultUsed - 1;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(resultDigits, t2);
      if (resultDigits[t2] === 0)
        resultUsed = t2;
      return resultUsed;
    },
    _BigIntImpl__rsh(xDigits, xUsed, n, resultDigits) {
      var carry, last, t2, i, t3, digit,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, bitShift) - 1,
        t1 = xDigits.length;
      if (!(digitsShift >= 0 && digitsShift < t1))
        return A.ioore(xDigits, digitsShift);
      carry = B.JSInt_methods._shrReceiverPositive$1(xDigits[digitsShift], bitShift);
      last = xUsed - digitsShift - 1;
      for (t2 = resultDigits.length, i = 0; i < last; ++i) {
        t3 = i + digitsShift + 1;
        if (!(t3 < t1))
          return A.ioore(xDigits, t3);
        digit = xDigits[t3];
        t3 = B.JSInt_methods.$shl((digit & bitMask) >>> 0, carryBitShift);
        if (!(i < t2))
          return A.ioore(resultDigits, i);
        resultDigits[i] = (t3 | carry) >>> 0;
        carry = B.JSInt_methods._shrReceiverPositive$1(digit, bitShift);
      }
      if (!(last >= 0 && last < t2))
        return A.ioore(resultDigits, last);
      resultDigits[last] = carry;
    },
    _BigIntImpl__compareDigits(digits, used, otherDigits, otherUsed) {
      var i, t1, t2, t3,
        result = used - otherUsed;
      if (result === 0)
        for (i = used - 1, t1 = digits.length, t2 = otherDigits.length; i >= 0; --i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          t3 = digits[i];
          if (!(i < t2))
            return A.ioore(otherDigits, i);
          result = t3 - otherDigits[i];
          if (result !== 0)
            return result;
        }
      return result;
    },
    _BigIntImpl__absAdd(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 + otherDigits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = carry >>> 16;
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = carry >>> 16;
      }
      if (!(used >= 0 && used < t3))
        return A.ioore(resultDigits, used);
      resultDigits[used] = carry;
    },
    _BigIntImpl__absSub(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.length, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 - otherDigits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        if (!(i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
    },
    _BigIntImpl__mulAdd(x, multiplicandDigits, i, accumulatorDigits, j, n) {
      var t1, t2, c, i0, t3, combined, j0, l;
      if (x === 0)
        return;
      for (t1 = multiplicandDigits.length, t2 = accumulatorDigits.length, c = 0; --n, n >= 0; j = j0, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(multiplicandDigits, i);
        t3 = multiplicandDigits[i];
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        combined = x * t3 + accumulatorDigits[j] + c;
        j0 = j + 1;
        accumulatorDigits[j] = combined & 65535;
        c = B.JSInt_methods._tdivFast$1(combined, 65536);
      }
      for (; c !== 0; j = j0) {
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        l = accumulatorDigits[j] + c;
        j0 = j + 1;
        accumulatorDigits[j] = l & 65535;
        c = B.JSInt_methods._tdivFast$1(l, 65536);
      }
    },
    _BigIntImpl__mulDigits(xDigits, xUsed, otherDigits, otherUsed, resultDigits) {
      var t1, i,
        resultUsed = xUsed + otherUsed;
      for (t1 = resultDigits.length, i = resultUsed; --i, i >= 0;) {
        if (!(i < t1))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (!(i < t1))
          return A.ioore(otherDigits, i);
        A._BigIntImpl__mulAdd(otherDigits[i], xDigits, 0, resultDigits, i, xUsed);
        ++i;
      }
      return resultUsed;
    },
    _BigIntImpl__estimateQuotientDigit(topDigitDivisor, digits, i) {
      var t2, t3, quotientDigit,
        t1 = digits.length;
      if (!(i >= 0 && i < t1))
        return A.ioore(digits, i);
      t2 = digits[i];
      if (t2 === topDigitDivisor)
        return 65535;
      t3 = i - 1;
      if (!(t3 >= 0 && t3 < t1))
        return A.ioore(digits, t3);
      quotientDigit = B.JSInt_methods.$tdiv((t2 << 16 | digits[t3]) >>> 0, topDigitDivisor);
      if (quotientDigit > 65535)
        return 65535;
      return quotientDigit;
    },
    _BigIntImpl__binaryGcd(x, y, inv) {
      var t1, uDigits, vDigits, ac, abcdUsed, abcdLen, aDigits, cDigits, bDigits, dDigits, t2, t3, t4, aIsNegative, cIsNegative, bIsNegative, dIsNegative, t5, a_cmp_c, b_cmp_d, c_cmp_a, d_cmp_b, i,
        _s11_ = "Not coprime",
        xUsed = x._used,
        yUsed = y._used,
        maxUsed = xUsed > yUsed ? xUsed : yUsed,
        xDigits = A._BigIntImpl__cloneDigits(x._digits, 0, xUsed, maxUsed),
        yDigits = A._BigIntImpl__cloneDigits(y._digits, 0, yUsed, maxUsed);
      if (yUsed === 1) {
        if (0 >= yDigits.length)
          return A.ioore(yDigits, 0);
        t1 = yDigits[0] === 1;
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_one();
      if (yUsed !== 0) {
        if (0 >= yDigits.length)
          return A.ioore(yDigits, 0);
        if ((yDigits[0] & 1) === 0) {
          if (0 >= xDigits.length)
            return A.ioore(xDigits, 0);
          t1 = (xDigits[0] & 1) === 0;
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.Exception_Exception(_s11_));
      uDigits = A._BigIntImpl__cloneDigits(xDigits, 0, xUsed, maxUsed);
      vDigits = A._BigIntImpl__cloneDigits(yDigits, 0, yUsed, maxUsed + 2);
      if (0 >= xDigits.length)
        return A.ioore(xDigits, 0);
      ac = (xDigits[0] & 1) === 0;
      abcdUsed = maxUsed + 1;
      abcdLen = abcdUsed + 2;
      aDigits = $.$get$_dummyList();
      if (ac) {
        aDigits = new Uint16Array(abcdLen);
        if (0 >= abcdLen)
          return A.ioore(aDigits, 0);
        aDigits[0] = 1;
        cDigits = new Uint16Array(abcdLen);
      } else
        cDigits = aDigits;
      bDigits = new Uint16Array(abcdLen);
      dDigits = new Uint16Array(abcdLen);
      if (0 >= abcdLen)
        return A.ioore(dDigits, 0);
      dDigits[0] = 1;
      for (t1 = uDigits.length, t2 = vDigits.length, t3 = cDigits.length, t4 = aDigits.length, aIsNegative = false, cIsNegative = false, bIsNegative = false, dIsNegative = false; true;) {
        if (0 >= t1)
          return A.ioore(uDigits, 0);
        for (; (uDigits[0] & 1) === 0;) {
          A._BigIntImpl__rsh(uDigits, maxUsed, 1, uDigits);
          if (ac) {
            if (0 >= t4)
              return A.ioore(aDigits, 0);
            if ((aDigits[0] & 1) !== 1) {
              if (0 >= abcdLen)
                return A.ioore(bDigits, 0);
              t5 = (bDigits[0] & 1) === 1;
            } else
              t5 = true;
            if (t5) {
              if (aIsNegative) {
                if (!(maxUsed >= 0 && maxUsed < t4))
                  return A.ioore(aDigits, maxUsed);
                aIsNegative = aDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(aDigits, maxUsed, yDigits, maxUsed) > 0;
                if (aIsNegative)
                  A._BigIntImpl__absSub(aDigits, abcdUsed, yDigits, maxUsed, aDigits);
                else
                  A._BigIntImpl__absSub(yDigits, maxUsed, aDigits, maxUsed, aDigits);
              } else
                A._BigIntImpl__absAdd(aDigits, abcdUsed, yDigits, maxUsed, aDigits);
              if (bIsNegative)
                A._BigIntImpl__absAdd(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
              else {
                if (!(maxUsed >= 0 && maxUsed < abcdLen))
                  return A.ioore(bDigits, maxUsed);
                t5 = bDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(bDigits, maxUsed, xDigits, maxUsed) > 0;
                if (t5)
                  A._BigIntImpl__absSub(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
                else
                  A._BigIntImpl__absSub(xDigits, maxUsed, bDigits, maxUsed, bDigits);
                bIsNegative = !t5;
              }
            }
            A._BigIntImpl__rsh(aDigits, abcdUsed, 1, aDigits);
          } else {
            if (0 >= abcdLen)
              return A.ioore(bDigits, 0);
            if ((bDigits[0] & 1) === 1)
              if (bIsNegative)
                A._BigIntImpl__absAdd(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
              else {
                if (!(maxUsed >= 0 && maxUsed < abcdLen))
                  return A.ioore(bDigits, maxUsed);
                t5 = bDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(bDigits, maxUsed, xDigits, maxUsed) > 0;
                if (t5)
                  A._BigIntImpl__absSub(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
                else
                  A._BigIntImpl__absSub(xDigits, maxUsed, bDigits, maxUsed, bDigits);
                bIsNegative = !t5;
              }
          }
          A._BigIntImpl__rsh(bDigits, abcdUsed, 1, bDigits);
        }
        if (0 >= t2)
          return A.ioore(vDigits, 0);
        for (; (vDigits[0] & 1) === 0;) {
          A._BigIntImpl__rsh(vDigits, maxUsed, 1, vDigits);
          if (ac) {
            if (0 >= t3)
              return A.ioore(cDigits, 0);
            if ((cDigits[0] & 1) === 1 || (dDigits[0] & 1) === 1) {
              if (cIsNegative) {
                if (!(maxUsed >= 0 && maxUsed < t3))
                  return A.ioore(cDigits, maxUsed);
                cIsNegative = cDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(cDigits, maxUsed, yDigits, maxUsed) > 0;
                if (cIsNegative)
                  A._BigIntImpl__absSub(cDigits, abcdUsed, yDigits, maxUsed, cDigits);
                else
                  A._BigIntImpl__absSub(yDigits, maxUsed, cDigits, maxUsed, cDigits);
              } else
                A._BigIntImpl__absAdd(cDigits, abcdUsed, yDigits, maxUsed, cDigits);
              if (dIsNegative)
                A._BigIntImpl__absAdd(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
              else {
                if (!(maxUsed >= 0 && maxUsed < abcdLen))
                  return A.ioore(dDigits, maxUsed);
                t5 = dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) > 0;
                if (t5)
                  A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
                else
                  A._BigIntImpl__absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
                dIsNegative = !t5;
              }
            }
            A._BigIntImpl__rsh(cDigits, abcdUsed, 1, cDigits);
          } else if ((dDigits[0] & 1) === 1)
            if (dIsNegative)
              A._BigIntImpl__absAdd(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
            else {
              if (!(maxUsed >= 0 && maxUsed < abcdLen))
                return A.ioore(dDigits, maxUsed);
              t5 = dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) > 0;
              if (t5)
                A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
              else
                A._BigIntImpl__absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
              dIsNegative = !t5;
            }
          A._BigIntImpl__rsh(dDigits, abcdUsed, 1, dDigits);
        }
        if (A._BigIntImpl__compareDigits(uDigits, maxUsed, vDigits, maxUsed) >= 0) {
          A._BigIntImpl__absSub(uDigits, maxUsed, vDigits, maxUsed, uDigits);
          if (ac)
            if (aIsNegative === cIsNegative) {
              a_cmp_c = A._BigIntImpl__compareDigits(aDigits, abcdUsed, cDigits, abcdUsed);
              if (a_cmp_c > 0)
                A._BigIntImpl__absSub(aDigits, abcdUsed, cDigits, abcdUsed, aDigits);
              else {
                A._BigIntImpl__absSub(cDigits, abcdUsed, aDigits, abcdUsed, aDigits);
                aIsNegative = !aIsNegative && a_cmp_c !== 0;
              }
            } else
              A._BigIntImpl__absAdd(aDigits, abcdUsed, cDigits, abcdUsed, aDigits);
          if (bIsNegative === dIsNegative) {
            b_cmp_d = A._BigIntImpl__compareDigits(bDigits, abcdUsed, dDigits, abcdUsed);
            if (b_cmp_d > 0)
              A._BigIntImpl__absSub(bDigits, abcdUsed, dDigits, abcdUsed, bDigits);
            else {
              A._BigIntImpl__absSub(dDigits, abcdUsed, bDigits, abcdUsed, bDigits);
              bIsNegative = !bIsNegative && b_cmp_d !== 0;
            }
          } else
            A._BigIntImpl__absAdd(bDigits, abcdUsed, dDigits, abcdUsed, bDigits);
        } else {
          A._BigIntImpl__absSub(vDigits, maxUsed, uDigits, maxUsed, vDigits);
          if (ac)
            if (cIsNegative === aIsNegative) {
              c_cmp_a = A._BigIntImpl__compareDigits(cDigits, abcdUsed, aDigits, abcdUsed);
              if (c_cmp_a > 0)
                A._BigIntImpl__absSub(cDigits, abcdUsed, aDigits, abcdUsed, cDigits);
              else {
                A._BigIntImpl__absSub(aDigits, abcdUsed, cDigits, abcdUsed, cDigits);
                cIsNegative = !cIsNegative && c_cmp_a !== 0;
              }
            } else
              A._BigIntImpl__absAdd(cDigits, abcdUsed, aDigits, abcdUsed, cDigits);
          if (dIsNegative === bIsNegative) {
            d_cmp_b = A._BigIntImpl__compareDigits(dDigits, abcdUsed, bDigits, abcdUsed);
            if (d_cmp_b > 0)
              A._BigIntImpl__absSub(dDigits, abcdUsed, bDigits, abcdUsed, dDigits);
            else {
              A._BigIntImpl__absSub(bDigits, abcdUsed, dDigits, abcdUsed, dDigits);
              dIsNegative = !dIsNegative && d_cmp_b !== 0;
            }
          } else
            A._BigIntImpl__absAdd(dDigits, abcdUsed, bDigits, abcdUsed, dDigits);
        }
        i = maxUsed;
        while (true) {
          if (i > 0) {
            t5 = i - 1;
            if (!(t5 < t1))
              return A.ioore(uDigits, t5);
            t5 = uDigits[t5] === 0;
          } else
            t5 = false;
          if (!t5)
            break;
          --i;
        }
        if (i === 0)
          break;
      }
      i = maxUsed - 1;
      while (true) {
        if (i > 0) {
          if (!(i < t2))
            return A.ioore(vDigits, i);
          t1 = vDigits[i] === 0;
        } else
          t1 = false;
        if (!t1)
          break;
        --i;
      }
      if (i === 0) {
        if (0 >= t2)
          return A.ioore(vDigits, 0);
        t1 = vDigits[0] !== 1;
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.Exception_Exception(_s11_));
      if (dIsNegative) {
        if (!(maxUsed >= 0 && maxUsed < abcdLen))
          return A.ioore(dDigits, maxUsed);
        while (true) {
          if (!(dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) > 0))
            break;
          A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
        }
        A._BigIntImpl__absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
      } else {
        if (!(maxUsed >= 0 && maxUsed < abcdLen))
          return A.ioore(dDigits, maxUsed);
        while (true) {
          if (!(dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) >= 0))
            break;
          A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
        }
      }
      t1 = A._BigIntImpl__normalize(maxUsed, dDigits);
      return new A._BigIntImpl(false, dDigits, t1);
    },
    identityHashCode(object) {
      return A.objectHashCode(object);
    },
    int_parse(source, radix) {
      var value = A.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null, null));
    },
    Error__throw(error, stackTrace) {
      error = A.wrapException(error);
      if (error == null)
        error = type$.Object._as(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
      throw A.wrapException("unreachable");
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      if (growable)
        return list;
      return J.JSArray_markFixedList(list, $E);
    },
    List_List$of(elements, growable, $E) {
      var t1;
      if (growable)
        return A.List_List$_of(elements, $E);
      t1 = J.JSArray_markFixedList(A.List_List$_of(elements, $E), $E);
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    List_List$generate($length, generator, $E) {
      var i,
        result = J.JSArray_JSArray$growable($length, $E);
      for (i = 0; i < $length; ++i)
        B.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    List_List$unmodifiable(elements, $E) {
      return J.JSArray_markUnmodifiableList(A.List_List$from(elements, false, $E));
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var t1, t2, maxLength, array, len;
      A.RangeError_checkNotNegative(start, "start");
      t1 = end == null;
      t2 = !t1;
      if (t2) {
        maxLength = end - start;
        if (maxLength < 0)
          throw A.wrapException(A.RangeError$range(end, start, null, "end", null));
        if (maxLength === 0)
          return "";
      }
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        if (t1)
          end = len;
        return A.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return A.String__stringFromUint8List(charCodes, start, end);
      if (t2)
        charCodes = J.take$1$ax(charCodes, end);
      if (start > 0)
        charCodes = J.skip$1$ax(charCodes, start);
      return A.Primitives_stringFromCharCodes(A.List_List$of(charCodes, true, type$.int));
    },
    String__stringFromUint8List(charCodes, start, endOrNull) {
      var len = charCodes.length;
      if (start >= len)
        return "";
      return A.Primitives_stringFromNativeUint8List(charCodes, start, endOrNull == null || endOrNull > len ? len : endOrNull);
    },
    RegExp_RegExp(source, caseSensitive) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, false, caseSensitive, false, false, false));
    },
    identical(a, b) {
      return a == null ? b == null : a === b;
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current());
      }
      return string;
    },
    Uri_base() {
      var cachedUri, uri,
        current = A.Primitives_currentUri();
      if (current == null)
        throw A.wrapException(A.UnsupportedError$("'Uri.base' is not supported"));
      cachedUri = $.Uri__cachedBaseUri;
      if (cachedUri != null && current === $.Uri__cachedBaseString)
        return cachedUri;
      uri = A.Uri_parse(current);
      $.Uri__cachedBaseUri = uri;
      $.Uri__cachedBaseString = current;
      return uri;
    },
    _Uri__uriEncode(canonicalTable, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, byte, t3,
        _s16_ = "0123456789ABCDEF";
      if (encoding === B.C_Utf8Codec) {
        t1 = $.$get$_Uri__needsNoEncoding();
        t1 = t1._nativeRegExp.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      bytes = encoding.encode$1(text);
      for (t1 = bytes.length, i = 0, t2 = ""; i < t1; ++i) {
        byte = bytes[i];
        if (byte < 128) {
          t3 = byte >>> 4;
          if (!(t3 < 8))
            return A.ioore(canonicalTable, t3);
          t3 = (canonicalTable[t3] & 1 << (byte & 15)) !== 0;
        } else
          t3 = false;
        if (t3)
          t2 += A.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[byte >>> 4 & 15] + _s16_[byte & 15];
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    _Uri__makeQueryFromParameters(queryParameters) {
      var params, encoded, $length;
      if (!$.$get$_Uri__useURLSearchParams())
        return A._Uri__makeQueryFromParametersDefault(queryParameters);
      params = new URLSearchParams();
      queryParameters.forEach$1(0, new A._Uri__makeQueryFromParameters_closure(params));
      encoded = params.toString();
      $length = encoded.length;
      if ($length > 0 && encoded[$length - 1] === "=")
        encoded = B.JSString_methods.substring$2(encoded, 0, $length - 1);
      return encoded.replace(/=&|\*|%7E/g, m => m === "=&" ? "&" : m === "*" ? "%2A" : "~");
    },
    StackTrace_current() {
      return A.getTraceFromException(new Error());
    },
    DateTime$fromMillisecondsSinceEpoch(millisecondsSinceEpoch) {
      if (millisecondsSinceEpoch < -864e13 || millisecondsSinceEpoch > 864e13)
        A.throwExpression(A.RangeError$range(millisecondsSinceEpoch, -864e13, 864e13, "millisecondsSinceEpoch", null));
      A.checkNotNullable(false, "isUtc", type$.bool);
      return new A.DateTime(millisecondsSinceEpoch, 0, false);
    },
    DateTime__finishParse(year, month, day, hour, minute, second, millisecond, microsecond, isUtc) {
      var value = A.Primitives_valueFromDecomposedDate(year, month, day, hour, minute, second, millisecond, microsecond, isUtc);
      if (value == null)
        return null;
      return new A.DateTime(A.DateTime__validate(value, microsecond, isUtc), microsecond, isUtc);
    },
    DateTime_parse(formattedString) {
      var t1, t2, t3, years, month, day, hour, minute, second, milliAndMicroseconds, millisecond, isUtc, tzSign, sign, hourDifference, result, _null = null,
        match = $.$get$DateTime__parseFormat().firstMatch$1(formattedString);
      if (match != null) {
        t1 = new A.DateTime_parse_parseIntOrZero();
        t2 = match._match;
        if (1 >= t2.length)
          return A.ioore(t2, 1);
        t3 = t2[1];
        t3.toString;
        years = A.int_parse(t3, _null);
        if (2 >= t2.length)
          return A.ioore(t2, 2);
        t3 = t2[2];
        t3.toString;
        month = A.int_parse(t3, _null);
        if (3 >= t2.length)
          return A.ioore(t2, 3);
        t3 = t2[3];
        t3.toString;
        day = A.int_parse(t3, _null);
        if (4 >= t2.length)
          return A.ioore(t2, 4);
        hour = t1.call$1(t2[4]);
        if (5 >= t2.length)
          return A.ioore(t2, 5);
        minute = t1.call$1(t2[5]);
        if (6 >= t2.length)
          return A.ioore(t2, 6);
        second = t1.call$1(t2[6]);
        if (7 >= t2.length)
          return A.ioore(t2, 7);
        milliAndMicroseconds = new A.DateTime_parse_parseMilliAndMicroseconds().call$1(t2[7]);
        millisecond = B.JSInt_methods._tdivFast$1(milliAndMicroseconds, 1000);
        t3 = t2.length;
        if (8 >= t3)
          return A.ioore(t2, 8);
        isUtc = t2[8] != null;
        if (isUtc) {
          if (9 >= t3)
            return A.ioore(t2, 9);
          tzSign = t2[9];
          if (tzSign != null) {
            sign = tzSign === "-" ? -1 : 1;
            if (10 >= t3)
              return A.ioore(t2, 10);
            t3 = t2[10];
            t3.toString;
            hourDifference = A.int_parse(t3, _null);
            if (11 >= t2.length)
              return A.ioore(t2, 11);
            minute -= sign * (t1.call$1(t2[11]) + 60 * hourDifference);
          }
        }
        result = A.DateTime__finishParse(years, month, day, hour, minute, second, millisecond, milliAndMicroseconds % 1000, isUtc);
        if (result == null)
          throw A.wrapException(A.FormatException$("Time out of range", formattedString, _null));
        return result;
      } else
        throw A.wrapException(A.FormatException$("Invalid date format", formattedString, _null));
    },
    DateTime__validate(millisecondsSinceEpoch, microsecond, isUtc) {
      var _s11_ = "microsecond";
      if (microsecond > 999)
        throw A.wrapException(A.RangeError$range(microsecond, 0, 999, _s11_, null));
      if (millisecondsSinceEpoch < -864e13 || millisecondsSinceEpoch > 864e13)
        throw A.wrapException(A.RangeError$range(millisecondsSinceEpoch, -864e13, 864e13, "millisecondsSinceEpoch", null));
      if (millisecondsSinceEpoch === 864e13 && microsecond !== 0)
        throw A.wrapException(A.ArgumentError$value(microsecond, _s11_, "Time including microseconds is outside valid range"));
      A.checkNotNullable(isUtc, "isUtc", type$.bool);
      return millisecondsSinceEpoch;
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__sixDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "+";
      if (absN >= 100000)
        return sign + absN;
      return sign + "0" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$(microseconds, milliseconds, minutes) {
      return new A.Duration(microseconds + 1000 * milliseconds + 60000000 * minutes);
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Primitives_safeToString(object);
    },
    Error_throwWithStackTrace(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      A.checkNotNullable(stackTrace, "stackTrace", type$.StackTrace);
      A.Error__throw(error, stackTrace);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError_checkNotNull(argument, $name, $T) {
      return argument;
    },
    RangeError$(message) {
      var _null = null;
      return new A.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value(value, $name) {
      return new A.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw A.wrapException(A.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$withLength(invalidValue, $length, indexable, message, $name) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new A._Exception(message);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    Iterable_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A.isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Iterable_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A.isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    Map_castFrom(source, $K, $V, K2, V2) {
      return new A.CastMap(source, $K._eval$1("@<0>")._bind$1($V)._bind$1(K2)._bind$1(V2)._eval$1("CastMap<1,2,3,4>"));
    },
    Map_Map$fromEntries(entries, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap$_empty($K, $V);
      t1.addEntries$1(entries);
      return t1;
    },
    Object_hash(object1, object2, object3, object4) {
      var t1;
      if (B.C_SentinelValue === object3) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      if (B.C_SentinelValue === object4) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3));
      }
      t1 = J.get$hashCode$(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      object4 = J.get$hashCode$(object4);
      object4 = A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4));
      return object4;
    },
    print(object) {
      A.printString(object);
    },
    Set_Set$unmodifiable(elements, $E) {
      return new A.UnmodifiableSetView(A.LinkedHashSet_LinkedHashSet$of(elements, $E), $E._eval$1("UnmodifiableSetView<0>"));
    },
    Uri_parse(uri) {
      var delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t1, t2, schemeAuth, queryStart0, pathStart0, port, userInfoStart, userInfo, host, portNumber, path, query, _null = null,
        end = uri.length;
      if (end >= 5) {
        if (4 >= end)
          return A.ioore(uri, 4);
        delta = ((uri.charCodeAt(4) ^ 58) * 3 | uri.charCodeAt(0) ^ 100 | uri.charCodeAt(1) ^ 97 | uri.charCodeAt(2) ^ 116 | uri.charCodeAt(3) ^ 97) >>> 0;
        if (delta === 0)
          return A.UriData__parse(end < end ? B.JSString_methods.substring$2(uri, 0, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return A.UriData__parse(B.JSString_methods.substring$2(uri, 5, end), 0, _null).get$uri();
      }
      indices = A.List_List$filled(8, 0, false, type$.int);
      B.JSArray_methods.$indexSet(indices, 0, 0);
      B.JSArray_methods.$indexSet(indices, 1, -1);
      B.JSArray_methods.$indexSet(indices, 2, -1);
      B.JSArray_methods.$indexSet(indices, 7, -1);
      B.JSArray_methods.$indexSet(indices, 3, 0);
      B.JSArray_methods.$indexSet(indices, 4, 0);
      B.JSArray_methods.$indexSet(indices, 5, end);
      B.JSArray_methods.$indexSet(indices, 6, end);
      if (A._scan(uri, 0, end, 0, indices) >= 14)
        B.JSArray_methods.$indexSet(indices, 7, end);
      schemeEnd = indices[1];
      if (schemeEnd >= 0)
        if (A._scan(uri, 0, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = indices[2] + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = indices[7] < 0;
      scheme = _null;
      if (isSimple) {
        isSimple = false;
        if (!(hostStart > schemeEnd + 3)) {
          t1 = portStart > 0;
          if (!(t1 && portStart + 1 === pathStart)) {
            if (!B.JSString_methods.startsWith$2(uri, "\\", pathStart))
              if (hostStart > 0)
                t2 = B.JSString_methods.startsWith$2(uri, "\\", hostStart - 1) || B.JSString_methods.startsWith$2(uri, "\\", hostStart - 2);
              else
                t2 = false;
            else
              t2 = true;
            if (!t2) {
              if (!(queryStart < end && queryStart === pathStart + 2 && B.JSString_methods.startsWith$2(uri, "..", pathStart)))
                t2 = queryStart > pathStart + 2 && B.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
              else
                t2 = true;
              if (!t2)
                if (schemeEnd === 4) {
                  if (B.JSString_methods.startsWith$2(uri, "file", 0)) {
                    if (hostStart <= 0) {
                      if (!B.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                        schemeAuth = "file:///";
                        delta = 3;
                      } else {
                        schemeAuth = "file://";
                        delta = 2;
                      }
                      uri = schemeAuth + B.JSString_methods.substring$2(uri, pathStart, end);
                      queryStart += delta;
                      fragmentStart += delta;
                      end = uri.length;
                      hostStart = 7;
                      portStart = 7;
                      pathStart = 7;
                    } else if (pathStart === queryStart) {
                      ++fragmentStart;
                      queryStart0 = queryStart + 1;
                      uri = B.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                      ++end;
                      queryStart = queryStart0;
                    }
                    scheme = "file";
                  } else if (B.JSString_methods.startsWith$2(uri, "http", 0)) {
                    if (t1 && portStart + 3 === pathStart && B.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                      fragmentStart -= 3;
                      pathStart0 = pathStart - 3;
                      queryStart -= 3;
                      uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                      end -= 3;
                      pathStart = pathStart0;
                    }
                    scheme = "http";
                  }
                } else if (schemeEnd === 5 && B.JSString_methods.startsWith$2(uri, "https", 0)) {
                  if (t1 && portStart + 4 === pathStart && B.JSString_methods.startsWith$2(uri, "443", portStart + 1)) {
                    fragmentStart -= 4;
                    pathStart0 = pathStart - 4;
                    queryStart -= 4;
                    uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "https";
                }
              isSimple = !t2;
            }
          }
        }
      }
      if (isSimple)
        return new A._SimpleUri(end < uri.length ? B.JSString_methods.substring$2(uri, 0, end) : uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      if (scheme == null)
        if (schemeEnd > 0)
          scheme = A._Uri__makeScheme(uri, 0, schemeEnd);
        else {
          if (schemeEnd === 0)
            A._Uri__fail(uri, 0, "Invalid empty scheme");
          scheme = "";
        }
      port = _null;
      if (hostStart > 0) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? A._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = A._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = A.Primitives_parseInt(B.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = A._Uri__makePort(portNumber == null ? A.throwExpression(A.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        }
      } else {
        host = _null;
        userInfo = "";
      }
      path = A._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? A._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? A._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    Uri_decodeComponent(encodedComponent) {
      A._asString(encodedComponent);
      return A._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, B.C_Utf8Codec, false);
    },
    Uri__parseIPv4Address(host, start, end) {
      var t1, i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new A.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (t1 = host.length, i = start, partStart = i, partIndex = 0; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = A.int_parse(B.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (!(partIndex < 4))
            return A.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = A.int_parse(B.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (!(partIndex < 4))
        return A.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, last, bytes, wildCardLength, index, value, j, t2, _null = null,
        error = new A.Uri_parseIPv6Address_error(host),
        parseHex = new A.Uri_parseIPv6Address_parseHex(error, host),
        t1 = host.length;
      if (t1 < 2)
        error.call$2("address is too short", _null);
      parts = A._setArrayType([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (!(i < t1))
              return A.ioore(host, i);
            if (host.charCodeAt(i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            B.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$2("too few parts", _null);
      atEnd = partStart === end;
      t1 = B.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = A.Uri__parseIPv4Address(host, partStart, end);
          B.JSArray_methods.add$1(parts, (last[0] << 8 | last[1]) >>> 0);
          B.JSArray_methods.add$1(parts, (last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$2("an address with a wildcard must have less than 7 parts", _null);
      } else if (parts.length !== 8)
        error.call$2("an address without a wildcard must contain exactly 8 parts", _null);
      bytes = new Uint8Array(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            if (!(index >= 0 && index < 16))
              return A.ioore(bytes, index);
            bytes[index] = 0;
            t2 = index + 1;
            if (!(t2 < 16))
              return A.ioore(bytes, t2);
            bytes[t2] = 0;
            index += 2;
          }
        else {
          t2 = B.JSInt_methods._shrOtherPositive$1(value, 8);
          if (!(index >= 0 && index < 16))
            return A.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          if (!(t2 < 16))
            return A.ioore(bytes, t2);
          bytes[t2] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new A._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__Uri(host, path, pathSegments, scheme) {
      var userInfo, query, fragment, port, isFile, t1, hasAuthority, t2, _null = null;
      scheme = scheme == null ? "" : A._Uri__makeScheme(scheme, 0, scheme.length);
      userInfo = A._Uri__makeUserInfo(_null, 0, 0);
      host = A._Uri__makeHost(host, 0, host == null ? 0 : host.length, false);
      query = A._Uri__makeQuery(_null, 0, 0, _null);
      fragment = A._Uri__makeFragment(_null, 0, 0);
      port = A._Uri__makePort(_null, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = A._Uri__makePath(path, 0, path == null ? 0 : path.length, pathSegments, scheme, hasAuthority);
      t2 = scheme.length === 0;
      if (t2 && t1 && !B.JSString_methods.startsWith$1(path, "/"))
        path = A._Uri__normalizeRelativePath(path, !t2 || hasAuthority);
      else
        path = A._Uri__removeDotSegments(path);
      return A._Uri$_internal(scheme, userInfo, t1 && B.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail(uri, index, message) {
      throw A.wrapException(A.FormatException$(message, uri, index));
    },
    _Uri__checkNonWindowsPathReservedCharacters(segments, argumentError) {
      var t1, _i, segment;
      for (t1 = segments.length, _i = 0; _i < t1; ++_i) {
        segment = segments[_i];
        if (J.contains$1$asx(segment, "/")) {
          t1 = A.UnsupportedError$("Illegal path character " + A.S(segment));
          throw A.wrapException(t1);
        }
      }
    },
    _Uri__makePort(port, scheme) {
      if (port != null && port === A._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return null;
      if (start === end)
        return "";
      t1 = host.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(host, start);
      if (host.charCodeAt(start) === 91) {
        t2 = end - 1;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(host, t2);
        if (host.charCodeAt(t2) !== 93)
          A._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t1 = start + 1;
        index = A._Uri__checkZoneID(host, t1, t2);
        if (index < t2) {
          zoneIDstart = index + 1;
          zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t2, "%25");
        } else
          zoneID = "";
        A.Uri_parseIPv6Address(host, t1, index);
        return B.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      for (i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(host, i);
        if (host.charCodeAt(i) === 58) {
          index = B.JSString_methods.indexOf$2(host, "%", start);
          index = index >= start && index < end ? index : end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          A.Uri_parseIPv6Address(host, start, index);
          return "[" + B.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      }
      return A._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID(host, start, end) {
      var index = B.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__normalizeZoneID(host, start, end, prefix) {
      var t1, index, sectionStart, isNormalized, char, replacement, t2, t3, sourceLength, tail, slice,
        buffer = prefix !== "" ? new A.StringBuffer(prefix) : null;
      for (t1 = host.length, index = start, sectionStart = index, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          t3 = buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
          if (t2)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            A._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t3 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t2 = char >>> 4;
            if (!(t2 < 8))
              return A.ioore(B.List_piR, t2);
            t2 = (B.List_piR[t2] & 1 << (char & 15)) !== 0;
          } else
            t2 = false;
          if (t2) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new A.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            sourceLength = 1;
            if ((char & 64512) === 55296 && index + 1 < end) {
              t2 = index + 1;
              if (!(t2 < t1))
                return A.ioore(host, t2);
              tail = host.charCodeAt(t2);
              if ((tail & 64512) === 56320) {
                char = (char & 1023) << 10 | tail & 1023 | 65536;
                sourceLength = 2;
              }
            }
            slice = B.JSString_methods.substring$2(host, sectionStart, index);
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t2 = buffer;
            } else
              t2 = buffer;
            t2._contents += slice;
            t3 = A._Uri__escapeChar(char);
            t2._contents += t3;
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName(host, start, end) {
      var t1, index, sectionStart, buffer, isNormalized, char, replacement, t2, slice, t3, sourceLength, tail;
      for (t1 = host.length, index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (!isNormalized)
            slice = slice.toLowerCase();
          t3 = buffer._contents += slice;
          sourceLength = 3;
          if (t2)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          }
          buffer._contents = t3 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t2 = char >>> 4;
            if (!(t2 < 8))
              return A.ioore(B.List_4AN, t2);
            t2 = (B.List_4AN[t2] & 1 << (char & 15)) !== 0;
          } else
            t2 = false;
          if (t2) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new A.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if (char <= 93) {
              t2 = char >>> 4;
              if (!(t2 < 8))
                return A.ioore(B.List_VOY0, t2);
              t2 = (B.List_VOY0[t2] & 1 << (char & 15)) !== 0;
            } else
              t2 = false;
            if (t2)
              A._Uri__fail(host, index, "Invalid character");
            else {
              sourceLength = 1;
              if ((char & 64512) === 55296 && index + 1 < end) {
                t2 = index + 1;
                if (!(t2 < t1))
                  return A.ioore(host, t2);
                tail = host.charCodeAt(t2);
                if ((tail & 64512) === 56320) {
                  char = (char & 1023) << 10 | tail & 1023 | 65536;
                  sourceLength = 2;
                }
              }
              slice = B.JSString_methods.substring$2(host, sectionStart, index);
              if (!isNormalized)
                slice = slice.toLowerCase();
              if (buffer == null) {
                buffer = new A.StringBuffer("");
                t2 = buffer;
              } else
                t2 = buffer;
              t2._contents += slice;
              t3 = A._Uri__escapeChar(char);
              t2._contents += t3;
              index += sourceLength;
              sectionStart = index;
            }
          }
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        if (!isNormalized)
          slice = slice.toLowerCase();
        buffer._contents += slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme(scheme, start, end) {
      var t1, i, containsUpperCase, codeUnit, t2;
      if (start === end)
        return "";
      t1 = scheme.length;
      if (!(start < t1))
        return A.ioore(scheme, start);
      if (!A._Uri__isAlphabeticCharacter(scheme.charCodeAt(start)))
        A._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(scheme, i);
        codeUnit = scheme.charCodeAt(i);
        if (codeUnit < 128) {
          t2 = codeUnit >>> 4;
          if (!(t2 < 8))
            return A.ioore(B.List_GVy, t2);
          t2 = (B.List_GVy[t2] & 1 << (codeUnit & 15)) !== 0;
        } else
          t2 = false;
        if (!t2)
          A._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = B.JSString_methods.substring$2(scheme, start, end);
      return A._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return A._Uri__normalizeOrSubstring(userInfo, start, end, B.List_2jN, false, false);
    },
    _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
      var t1, result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null) {
        if (pathSegments == null)
          return isFile ? "/" : "";
        t1 = A._arrayInstanceType(pathSegments);
        result = new A.MappedListIterable(pathSegments, t1._eval$1("String(1)")._as(new A._Uri__makePath_closure()), t1._eval$1("MappedListIterable<1,String>")).join$1(0, "/");
      } else if (pathSegments != null)
        throw A.wrapException(A.ArgumentError$("Both path and pathSegments specified", null));
      else
        result = A._Uri__normalizeOrSubstring(path, start, end, B.List_M2I, true, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !B.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return A._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !B.JSString_methods.startsWith$1(path, "/") && !B.JSString_methods.startsWith$1(path, "\\"))
        return A._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return A._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery(query, start, end, queryParameters) {
      if (query != null) {
        if (queryParameters != null)
          throw A.wrapException(A.ArgumentError$("Both query and queryParameters specified", null));
        return A._Uri__normalizeOrSubstring(query, start, end, B.List_42A, true, false);
      }
      if (queryParameters == null)
        return null;
      return A._Uri__makeQueryFromParameters(queryParameters);
    },
    _Uri__makeQueryFromParametersDefault(queryParameters) {
      var t1 = {},
        result = new A.StringBuffer("");
      t1.separator = "";
      queryParameters.forEach$1(0, new A._Uri__makeQueryFromParametersDefault_closure(new A._Uri__makeQueryFromParametersDefault_writeParameter(t1, result)));
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeFragment(fragment, start, end) {
      if (fragment == null)
        return null;
      return A._Uri__normalizeOrSubstring(fragment, start, end, B.List_42A, true, false);
    },
    _Uri__normalizeEscape(source, index, lowerCase) {
      var t3, firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2,
        t2 = source.length;
      if (t1 >= t2)
        return "%";
      t3 = index + 1;
      if (!(t3 >= 0 && t3 < t2))
        return A.ioore(source, t3);
      firstDigit = source.charCodeAt(t3);
      if (!(t1 >= 0))
        return A.ioore(source, t1);
      secondDigit = source.charCodeAt(t1);
      firstDigitValue = A.hexDigitValue(firstDigit);
      secondDigitValue = A.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127) {
        t1 = B.JSInt_methods._shrOtherPositive$1(value, 4);
        if (!(t1 < 8))
          return A.ioore(B.List_piR, t1);
        t1 = (B.List_piR[t1] & 1 << (value & 15)) !== 0;
      } else
        t1 = false;
      if (t1)
        return A.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return B.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar(char) {
      var codeUnits, t1, flag, encodedBytes, index, byte, t2, t3,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        codeUnits = new Uint8Array(3);
        codeUnits[0] = 37;
        t1 = char >>> 4;
        if (!(t1 < 16))
          return A.ioore(_s16_, t1);
        codeUnits[1] = _s16_.charCodeAt(t1);
        codeUnits[2] = _s16_.charCodeAt(char & 15);
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = 3 * encodedBytes;
        codeUnits = new Uint8Array(t1);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = B.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          if (!(index < t1))
            return A.ioore(codeUnits, index);
          codeUnits[index] = 37;
          t2 = index + 1;
          t3 = byte >>> 4;
          if (!(t3 < 16))
            return A.ioore(_s16_, t3);
          if (!(t2 < t1))
            return A.ioore(codeUnits, t2);
          codeUnits[t2] = _s16_.charCodeAt(t3);
          t3 = index + 2;
          if (!(t3 < t1))
            return A.ioore(codeUnits, t3);
          codeUnits[t3] = _s16_.charCodeAt(byte & 15);
          index += 3;
        }
      }
      return A.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring(component, start, end, charTable, escapeDelimiters, replaceBackslash) {
      var t1 = A._Uri__normalize(component, start, end, charTable, escapeDelimiters, replaceBackslash);
      return t1 == null ? B.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize(component, start, end, charTable, escapeDelimiters, replaceBackslash) {
      var t1, t2, index, sectionStart, buffer, char, t3, sourceLength, replacement, tail, t4, _null = null;
      for (t1 = !escapeDelimiters, t2 = component.length, index = start, sectionStart = index, buffer = _null; index < end;) {
        if (!(index >= 0 && index < t2))
          return A.ioore(component, index);
        char = component.charCodeAt(index);
        if (char < 127) {
          t3 = char >>> 4;
          if (!(t3 < 8))
            return A.ioore(charTable, t3);
          t3 = (charTable[t3] & 1 << (char & 15)) !== 0;
        } else
          t3 = false;
        if (t3)
          ++index;
        else {
          sourceLength = 1;
          if (char === 37) {
            replacement = A._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement)
              replacement = "%25";
            else
              sourceLength = 3;
          } else if (char === 92 && replaceBackslash)
            replacement = "/";
          else {
            t3 = false;
            if (t1)
              if (char <= 93) {
                t3 = char >>> 4;
                if (!(t3 < 8))
                  return A.ioore(B.List_VOY0, t3);
                t3 = (B.List_VOY0[t3] & 1 << (char & 15)) !== 0;
              }
            if (t3) {
              A._Uri__fail(component, index, "Invalid character");
              sourceLength = _null;
              replacement = sourceLength;
            } else {
              if ((char & 64512) === 55296) {
                t3 = index + 1;
                if (t3 < end) {
                  if (!(t3 < t2))
                    return A.ioore(component, t3);
                  tail = component.charCodeAt(t3);
                  if ((tail & 64512) === 56320) {
                    char = (char & 1023) << 10 | tail & 1023 | 65536;
                    sourceLength = 2;
                  }
                }
              }
              replacement = A._Uri__escapeChar(char);
            }
          }
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t3 = buffer;
          } else
            t3 = buffer;
          t4 = t3._contents += B.JSString_methods.substring$2(component, sectionStart, index);
          t3._contents = t4 + A.S(replacement);
          if (typeof sourceLength !== "number")
            return A.iae(sourceLength);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return _null;
      if (sectionStart < end) {
        t1 = B.JSString_methods.substring$2(component, sectionStart, end);
        buffer._contents += t1;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments(path) {
      if (B.JSString_methods.startsWith$1(path, "."))
        return true;
      return B.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments(path) {
      var output, t1, t2, appendSlash, _i, segment, t3;
      if (!A._Uri__mayContainDotSegments(path))
        return path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (J.$eq$(segment, "..")) {
          t3 = output.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return A.ioore(output, -1);
            output.pop();
            if (output.length === 0)
              B.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else {
          appendSlash = "." === segment;
          if (!appendSlash)
            B.JSArray_methods.add$1(output, segment);
        }
      }
      if (appendSlash)
        B.JSArray_methods.add$1(output, "");
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return !allowScheme ? A._Uri__escapeScheme(path) : path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment) {
          appendSlash = output.length !== 0 && B.JSArray_methods.get$last(output) !== "..";
          if (appendSlash) {
            if (0 >= output.length)
              return A.ioore(output, -1);
            output.pop();
          } else
            B.JSArray_methods.add$1(output, "..");
        } else {
          appendSlash = "." === segment;
          if (!appendSlash)
            B.JSArray_methods.add$1(output, segment);
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        if (t1 === 1) {
          if (0 >= t1)
            return A.ioore(output, 0);
          t1 = output[0].length === 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || B.JSArray_methods.get$last(output) === "..")
        B.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return A.ioore(output, 0);
        B.JSArray_methods.$indexSet(output, 0, A._Uri__escapeScheme(output[0]));
      }
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme(path) {
      var i, char, t2,
        t1 = path.length;
      if (t1 >= 2 && A._Uri__isAlphabeticCharacter(path.charCodeAt(0)))
        for (i = 1; i < t1; ++i) {
          char = path.charCodeAt(i);
          if (char === 58)
            return B.JSString_methods.substring$2(path, 0, i) + "%3A" + B.JSString_methods.substring$1(path, i + 1);
          if (char <= 127) {
            t2 = char >>> 4;
            if (!(t2 < 8))
              return A.ioore(B.List_GVy, t2);
            t2 = (B.List_GVy[t2] & 1 << (char & 15)) === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__packageNameEnd(uri, path) {
      if (uri.isScheme$1("package") && uri._host == null)
        return A._skipPackageNameChars(path, 0, path.length);
      return -1;
    },
    _Uri__hexCharPairToByte(s, pos) {
      var t1, byte, i, t2, charCode;
      for (t1 = s.length, byte = 0, i = 0; i < 2; ++i) {
        t2 = pos + i;
        if (!(t2 < t1))
          return A.ioore(s, t2);
        charCode = s.charCodeAt(t2);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw A.wrapException(A.ArgumentError$("Invalid URL encoding", null));
        }
      }
      return byte;
    },
    _Uri__uriDecode(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t2, bytes,
        t1 = text.length,
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        if (!(i < t1))
          return A.ioore(text, i);
        codeUnit = text.charCodeAt(i);
        if (codeUnit <= 127)
          t2 = codeUnit === 37;
        else
          t2 = true;
        if (t2) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple)
        if (B.C_Utf8Codec === encoding)
          return B.JSString_methods.substring$2(text, start, end);
        else
          bytes = new A.CodeUnits(B.JSString_methods.substring$2(text, start, end));
      else {
        bytes = A._setArrayType([], type$.JSArray_int);
        for (i = start; i < end; ++i) {
          if (!(i < t1))
            return A.ioore(text, i);
          codeUnit = text.charCodeAt(i);
          if (codeUnit > 127)
            throw A.wrapException(A.ArgumentError$("Illegal percent encoding in URI", null));
          if (codeUnit === 37) {
            if (i + 3 > t1)
              throw A.wrapException(A.ArgumentError$("Truncated URI", null));
            B.JSArray_methods.add$1(bytes, A._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else
            B.JSArray_methods.add$1(bytes, codeUnit);
        }
      }
      return encoding.decode$1(bytes);
    },
    _Uri__isAlphabeticCharacter(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__parse(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = A._setArrayType([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = text.charCodeAt(i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw A.wrapException(A.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw A.wrapException(A.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        B.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          if (!(i >= 0))
            return A.ioore(text, i);
          char = text.charCodeAt(i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          B.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = B.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !B.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw A.wrapException(A.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      B.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = B.Base64Codec_Base64Encoder_false.normalize$3(text, t2, t1);
      else {
        data = A._Uri__normalize(text, t2, t1, B.List_42A, true, false);
        if (data != null)
          text = B.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new A.UriData(text, indices, sourceUri);
    },
    _createTables() {
      var _i, t1, t2, t3, b,
        _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "\\", _s1_3 = "?", _s1_4 = "#", _s2_ = "/\\",
        tables = J.JSArray_JSArray$allocateGrowable(22, type$.Uint8List);
      for (_i = 0; _i < 22; ++_i)
        tables[_i] = new Uint8Array(96);
      t1 = new A._createTables_build(tables);
      t2 = new A._createTables_setChars();
      t3 = new A._createTables_setRange();
      b = t1.call$2(0, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 14);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 3);
      t2.call$3(b, _s1_2, 227);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(14, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 15);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(15, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 233);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(1, 225);
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(2, 235);
      t2.call$3(b, _s77_, 139);
      t2.call$3(b, _s1_1, 131);
      t2.call$3(b, _s1_2, 131);
      t2.call$3(b, _s1_, 146);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(3, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 68);
      t2.call$3(b, _s1_2, 68);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(4, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(5, 229);
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(6, 231);
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(7, 231);
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 138);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      t2.call$3(t1.call$2(8, 8), "]", 5);
      b = t1.call$2(9, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 16);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(16, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 17);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(17, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 233);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(10, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(18, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 19);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(19, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s2_, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(11, 235);
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 234);
      t2.call$3(b, _s1_3, 172);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(12, 236);
      t2.call$3(b, _s77_, 12);
      t2.call$3(b, _s1_3, 12);
      t2.call$3(b, _s1_4, 205);
      b = t1.call$2(13, 237);
      t2.call$3(b, _s77_, 13);
      t2.call$3(b, _s1_3, 13);
      t3.call$3(t1.call$2(20, 245), "az", 21);
      b = t1.call$2(21, 245);
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan(uri, start, end, state, indices) {
      var t1, i, table, char, transition,
        tables = $.$get$_scannerTables();
      for (t1 = uri.length, i = start; i < end; ++i) {
        if (!(state >= 0 && state < tables.length))
          return A.ioore(tables, state);
        table = tables[state];
        if (!(i < t1))
          return A.ioore(uri, i);
        char = uri.charCodeAt(i) ^ 96;
        transition = table[char > 95 ? 31 : char];
        state = transition & 31;
        B.JSArray_methods.$indexSet(indices, transition >>> 5, i);
      }
      return state;
    },
    _SimpleUri__packageNameEnd(uri) {
      if (uri._schemeEnd === 7 && B.JSString_methods.startsWith$1(uri._uri, "package") && uri._hostStart <= 0)
        return A._skipPackageNameChars(uri._uri, uri._pathStart, uri._queryStart);
      return -1;
    },
    _skipPackageNameChars(source, start, end) {
      var t1, i, dots, char;
      for (t1 = source.length, i = start, dots = 0; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(source, i);
        char = source.charCodeAt(i);
        if (char === 47)
          return dots !== 0 ? i : -1;
        if (char === 37 || char === 58)
          return -1;
        dots |= char ^ 46;
      }
      return -1;
    },
    _caseInsensitiveCompareStart(prefix, string, start) {
      var t1, t2, result, i, t3, stringChar, delta, lowerChar;
      for (t1 = prefix.length, t2 = string.length, result = 0, i = 0; i < t1; ++i) {
        t3 = start + i;
        if (!(t3 < t2))
          return A.ioore(string, t3);
        stringChar = string.charCodeAt(t3);
        delta = prefix.charCodeAt(i) ^ stringChar;
        if (delta !== 0) {
          if (delta === 32) {
            lowerChar = stringChar | delta;
            if (97 <= lowerChar && lowerChar <= 122) {
              result = 32;
              continue;
            }
          }
          return -1;
        }
      }
      return result;
    },
    _BigIntImpl: function _BigIntImpl(t0, t1, t2) {
      this._isNegative = t0;
      this._digits = t1;
      this._used = t2;
    },
    _BigIntImpl_hashCode_combine: function _BigIntImpl_hashCode_combine() {
    },
    _BigIntImpl_hashCode_finish: function _BigIntImpl_hashCode_finish() {
    },
    _BigIntImpl_toDouble_readBits: function _BigIntImpl_toDouble_readBits(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _BigIntImpl_toDouble_roundUp: function _BigIntImpl_toDouble_roundUp(t0) {
      this.resultBits = t0;
    },
    _BigIntClassic: function _BigIntClassic(t0, t1) {
      this._modulus = t0;
      this._normalizedModulus = t1;
    },
    _Uri__makeQueryFromParameters_closure: function _Uri__makeQueryFromParameters_closure(t0) {
      this.params = t0;
    },
    DateTime: function DateTime(t0, t1, t2) {
      this._core$_value = t0;
      this._microsecond = t1;
      this.isUtc = t2;
    },
    DateTime_parse_parseIntOrZero: function DateTime_parse_parseIntOrZero() {
    },
    DateTime_parse_parseMilliAndMicroseconds: function DateTime_parse_parseMilliAndMicroseconds() {
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    IntegerDivisionByZeroException: function IntegerDivisionByZeroException() {
    },
    Iterable: function Iterable() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure() {
    },
    _Uri__makeQueryFromParametersDefault_writeParameter: function _Uri__makeQueryFromParametersDefault_writeParameter(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _Uri__makeQueryFromParametersDefault_closure: function _Uri__makeQueryFromParametersDefault_closure(t0) {
      this.writeParameter = t0;
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    max(a, b, $T) {
      A.checkTypeBound($T, type$.num, "T", "max");
      return Math.max($T._as(a), $T._as(b));
    },
    _JSSecureRandom: function _JSSecureRandom(t0) {
      this._buffer = t0;
    },
    ByteData_ByteData$sublistView(data) {
      var elementSize = data.BYTES_PER_ELEMENT,
        end = A.RangeError_checkValidRange(0, null, B.JSInt_methods.$tdiv(data.byteLength, elementSize));
      return A.NativeByteData_NativeByteData$view(data.buffer, data.byteOffset + 0 * elementSize, end * elementSize);
    },
    Endian: function Endian() {
    },
    FutureGroup: function FutureGroup(t0, t1, t2) {
      var _ = this;
      _._future_group$_pending = 0;
      _._future_group$_closed = false;
      _._completer = t0;
      _._future_group$_values = t1;
      _.$ti = t2;
    },
    FutureGroup_add_closure: function FutureGroup_add_closure(t0, t1) {
      this.$this = t0;
      this.index = t1;
    },
    FutureGroup_add_closure0: function FutureGroup_add_closure0(t0) {
      this.$this = t0;
    },
    ErrorResult: function ErrorResult(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    ValueResult: function ValueResult(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    StreamSplitter: function StreamSplitter(t0, t1, t2, t3, t4) {
      var _ = this;
      _._stream_splitter$_stream = t0;
      _._stream_splitter$_subscription = null;
      _._stream_splitter$_buffer = t1;
      _._controllers = t2;
      _._closeGroup = t3;
      _._isDone = false;
      _.$ti = t4;
    },
    StreamSplitter_split_closure: function StreamSplitter_split_closure(t0, t1) {
      this.$this = t0;
      this.controller = t1;
    },
    StreamSplitter__onPause_closure: function StreamSplitter__onPause_closure(t0) {
      this.$this = t0;
    },
    BitcoinAddressType_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_CNi, new A.BitcoinAddressType_fromValue_closure(value), new A.BitcoinAddressType_fromValue_closure0(value));
    },
    BitcoinAddressType: function BitcoinAddressType() {
    },
    BitcoinAddressType_fromValue_closure: function BitcoinAddressType_fromValue_closure(t0) {
      this.value = t0;
    },
    BitcoinAddressType_fromValue_closure0: function BitcoinAddressType_fromValue_closure0(t0) {
      this.value = t0;
    },
    P2pkhAddressType: function P2pkhAddressType(t0) {
      this.value = t0;
    },
    P2shAddressType: function P2shAddressType(t0) {
      this.value = t0;
    },
    SegwitAddressType: function SegwitAddressType(t0) {
      this.value = t0;
    },
    Script: function Script(t0) {
      this.script = t0;
    },
    DartBitcoinPluginException: function DartBitcoinPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    _Base32Utils_translateAlphabet(data, fromAlphabet, toAlphabet) {
      var t1 = type$.String,
        map = A.LinkedHashMap_LinkedHashMap(null, null, t1, t1);
      A.MapBase__fillMapWithMappedIterable(map, new A.CodeUnits(fromAlphabet), new A._Base32Utils_translateAlphabet_closure(), new A._Base32Utils_translateAlphabet_closure0(fromAlphabet, toAlphabet));
      return new A.MappedListIterable(A._setArrayType(data.split(""), type$.JSArray_String), type$.String_Function_String._as(new A._Base32Utils_translateAlphabet_closure1(map)), type$.MappedListIterable_String_String).join$1(0, "");
    },
    _Base32Utils__b32decode(alphabet, base32) {
      var t1, i, decoded, _box_0 = {};
      if (!$._Base32Const__b32rev.containsKey$1(alphabet)) {
        $._Base32Const__b32rev.$indexSet(0, alphabet, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int));
        for (t1 = alphabet.length, i = 0; i < t1; ++i)
          $._Base32Const__b32rev.$index(0, alphabet).$indexSet(0, alphabet[i], i);
      }
      _box_0.shift = 8;
      _box_0.carry = 0;
      decoded = A._setArrayType([], type$.JSArray_int);
      B.JSArray_methods.forEach$1(A._setArrayType(base32.split(""), type$.JSArray_String), new A._Base32Utils__b32decode_closure(_box_0, alphabet, decoded));
      if (_box_0.shift !== 8 && _box_0.carry !== 0) {
        B.JSArray_methods.add$1(decoded, _box_0.carry);
        _box_0.shift = 8;
        _box_0.carry = 0;
      }
      return decoded;
    },
    _Base32Utils__b32encode(alphabet, s) {
      var t1, padding, t2, encoded, t3, shift, carry, _i, byte, t4,
        leftover = B.JSInt_methods.$mod(s.length, 5);
      if (leftover !== 0) {
        t1 = type$.int;
        padding = A.List_List$filled(5 - leftover, 0, false, t1);
        t2 = A.List_List$of(s, true, type$.dynamic);
        B.JSArray_methods.addAll$1(t2, padding);
        s = A.List_List$from(t2, true, t1);
      }
      t1 = type$.JSArray_int;
      encoded = A._setArrayType([], t1);
      for (t2 = s.length, t3 = alphabet.length, shift = 3, carry = 0, _i = 0; _i < s.length; s.length === t2 || (0, A.throwConcurrentModificationError)(s), ++_i) {
        byte = s[_i];
        if (typeof byte !== "number")
          return byte.$shr();
        t4 = (carry | B.JSNumber_methods.$shr(byte, shift)) & 31;
        if (!(t4 < t3))
          return A.ioore(alphabet, t4);
        B.JSArray_methods.addAll$1(encoded, new A.CodeUnits(alphabet[t4]));
        if (shift > 5) {
          shift -= 5;
          t4 = B.JSNumber_methods.$shr(byte, shift) & 31;
          if (!(t4 < t3))
            return A.ioore(alphabet, t4);
          B.JSArray_methods.addAll$1(encoded, new A.CodeUnits(alphabet[t4]));
        }
        shift = 5 - shift;
        carry = B.JSNumber_methods.$shl(byte, shift);
        shift = 8 - shift;
      }
      if (shift !== 3) {
        t2 = carry & 31;
        if (!(t2 < t3))
          return A.ioore(alphabet, t2);
        B.JSArray_methods.addAll$1(encoded, new A.CodeUnits(alphabet[t2]));
      }
      if (leftover === 1)
        B.JSArray_methods.setAll$2(encoded, encoded.length - 6, A._setArrayType([61, 61, 61, 61, 61, 61], t1));
      else if (leftover === 2)
        B.JSArray_methods.setAll$2(encoded, encoded.length - 4, A._setArrayType([61, 61, 61, 61], t1));
      else if (leftover === 3)
        B.JSArray_methods.setAll$2(encoded, encoded.length - 3, A._setArrayType([61, 61, 61], t1));
      else if (leftover === 4)
        B.JSArray_methods.setAll$2(encoded, encoded.length - 1, A._setArrayType([61], t1));
      return A.List_List$from(encoded, true, type$.int);
    },
    Base32Decoder_decode(data) {
      var decodedBytes, data0, lastBlockWidth, t1, exception,
        _s32_ = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
        customAlphabet = null;
      data = data;
      try {
        data0 = data;
        lastBlockWidth = B.JSInt_methods.$mod(data0.length, 8);
        data = lastBlockWidth !== 0 ? data0 + B.JSString_methods.$mul("=", 8 - lastBlockWidth) : data0;
        if (customAlphabet != null)
          data = A._Base32Utils_translateAlphabet(data, customAlphabet, _s32_);
        decodedBytes = A._Base32Utils__b32decode(_s32_, data);
        t1 = A.List_List$from(decodedBytes, true, type$.int);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.ArgumentException_4mi);
      }
    },
    _Base32Utils_translateAlphabet_closure: function _Base32Utils_translateAlphabet_closure() {
    },
    _Base32Utils_translateAlphabet_closure0: function _Base32Utils_translateAlphabet_closure0(t0, t1) {
      this.fromAlphabet = t0;
      this.toAlphabet = t1;
    },
    _Base32Utils_translateAlphabet_closure1: function _Base32Utils_translateAlphabet_closure1(t0) {
      this.translationMap = t0;
    },
    _Base32Utils__b32decode_closure: function _Base32Utils__b32decode_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.alphabet = t1;
      this.decoded = t2;
    },
    Base58Encoder_encode(dataBytes, base58alphabets) {
      var val, t2, enc, t3, div, zero, _i,
        t1 = B.Map_ap4AN.$index(0, base58alphabets);
      t1.toString;
      val = A.BigintUtils_fromBytes(dataBytes, B.C_Endian, false);
      for (t2 = t1.length, enc = ""; val.compareTo$1(0, $.$get$_BigIntImpl_zero()) > 0; val = div) {
        t3 = A._BigIntImpl__BigIntImpl$from(58);
        if (t3._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        div = val._div$1(t3);
        t3 = val.$mod(0, A._BigIntImpl__BigIntImpl$from(58)).toInt$0(0);
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(t1, t3);
        enc = t1[t3] + enc;
      }
      for (t3 = dataBytes.length, zero = 0, _i = 0; _i < dataBytes.length; dataBytes.length === t3 || (0, A.throwConcurrentModificationError)(dataBytes), ++_i)
        if (J.$eq$(dataBytes[_i], 0))
          ++zero;
        else
          break;
      t3 = dataBytes.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      return B.JSString_methods.$mul(t1[0], t3 - (t3 - zero)) + enc;
    },
    Base58Encoder_checkEncode(dataBytes, base58alphabets) {
      var t1, checksum, t2;
      A.BytesUtils_validateListOfBytes(dataBytes);
      t1 = type$.int;
      dataBytes = A.List_List$unmodifiable(dataBytes, t1);
      checksum = B.JSArray_methods.sublist$2(A.SHA256_hash(A.SHA256_hash(dataBytes)), 0, 4);
      t2 = A.List_List$of(dataBytes, true, type$.dynamic);
      B.JSArray_methods.addAll$1(t2, checksum);
      return A.Base58Encoder_encode(A.List_List$from(t2, true, t1), base58alphabets);
    },
    Base58Decoder_decode(data, base58alphabets) {
      var val, t2, t3, i, t4, charIndex, bytes, padLen,
        t1 = B.Map_ap4AN.$index(0, base58alphabets);
      t1.toString;
      val = $.$get$_BigIntImpl_zero();
      for (t2 = data.length, t3 = t2 - 1, i = 0; i < t2; ++i) {
        t4 = t3 - i;
        if (!(t4 >= 0))
          return A.ioore(data, t4);
        charIndex = B.JSString_methods.indexOf$1(t1, data[t4]);
        if (charIndex === -1)
          throw A.wrapException(B.MessageException_IMr);
        val = val.$add(0, A._BigIntImpl__BigIntImpl$from(charIndex).$mul(0, A._BigIntImpl__BigIntImpl$from(58).pow$1(i)));
      }
      bytes = A.BigintUtils_toBytes(val, B.JSInt_methods._tdivFast$1((val._isNegative ? val.$negate(0) : val).get$bitLength(0) + 7, 8), B.C_Endian);
      for (t3 = t1.length, padLen = 0, i = 0; i < t2; ++i) {
        t4 = data[i];
        if (0 >= t3)
          return A.ioore(t1, 0);
        if (t4 === t1[0])
          ++padLen;
        else
          break;
      }
      t1 = type$.int;
      t2 = A.List_List$of(A.List_List$filled(padLen, 0, false, t1), true, type$.dynamic);
      B.JSArray_methods.addAll$1(t2, bytes);
      return A.List_List$from(t2, true, t1);
    },
    Base58Decoder_checkDecode(data, base58alphabets) {
      var decodedBytes = A.Base58Decoder_decode(data, base58alphabets),
        dataBytes = B.JSArray_methods.sublist$2(decodedBytes, 0, decodedBytes.length - 4),
        checksumBytes = B.JSArray_methods.sublist$1(decodedBytes, decodedBytes.length - 4),
        computedChecksum = B.JSArray_methods.sublist$2(A.SHA256_hash(A.SHA256_hash(dataBytes)), 0, 4);
      if (!A.BytesUtils_bytesEqual(checksumBytes, computedChecksum))
        throw A.wrapException(new A.Base58ChecksumError("Invalid checksum (expected " + A.BytesUtils_toHexString(computedChecksum, true, null) + ", got " + A.BytesUtils_toHexString(checksumBytes, true, null) + ")", null));
      return dataBytes;
    },
    Base58Alphabets: function Base58Alphabets(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    Base58ChecksumError: function Base58ChecksumError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    ADAAddressType_fromHeader(header) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_yH3, new A.ADAAddressType_fromHeader_closure(header), new A.ADAAddressType_fromHeader_closure0());
    },
    ADAAddressType: function ADAAddressType(t0, t1) {
      this.header = t0;
      this.name = t1;
    },
    ADAAddressType_fromHeader_closure: function ADAAddressType_fromHeader_closure(t0) {
      this.header = t0;
    },
    ADAAddressType_fromHeader_closure0: function ADAAddressType_fromHeader_closure0() {
    },
    AdaByronIcarusAddrEncoder: function AdaByronIcarusAddrEncoder() {
    },
    AdaByronLegacyAddrEncoder: function AdaByronLegacyAddrEncoder() {
    },
    AdaShelleyAddrEncoder: function AdaShelleyAddrEncoder() {
    },
    ADANetwork: function ADANetwork(t0, t1) {
      this.value = t0;
      this.name = t1;
    },
    AlgoAddrEncoder: function AlgoAddrEncoder() {
    },
    AptosAddrEncoder: function AptosAddrEncoder() {
    },
    AtomAddrEncoder: function AtomAddrEncoder() {
    },
    AtomEthSecp256k1AddrEncoder: function AtomEthSecp256k1AddrEncoder() {
    },
    AtomNist256P1AddrEncoder: function AtomNist256P1AddrEncoder() {
    },
    AtomEd25519AddrEncoder: function AtomEd25519AddrEncoder() {
    },
    AvaxPChainAddrEncoder: function AvaxPChainAddrEncoder() {
    },
    AvaxXChainAddrEncoder: function AvaxXChainAddrEncoder() {
    },
    EgldAddrEncoder: function EgldAddrEncoder() {
    },
    BlockchainAddressEncoder: function BlockchainAddressEncoder() {
    },
    EosAddrEncoder: function EosAddrEncoder() {
    },
    ErgoNetworkTypes: function ErgoNetworkTypes(t0) {
      this.value = t0;
    },
    ErgoP2PKHAddrEncoder: function ErgoP2PKHAddrEncoder() {
    },
    EthAddrUtils__checksumEncode(addr) {
      var addrHexDigest = A.BytesUtils_toHexString(A.Keccack_hash(A.StringUtils_encode(addr.toLowerCase(), B.StringEncoding_1), 32), true, null);
      return B.JSArray_methods.join$0(new A.ListMapView(A._setArrayType(addr.split(""), type$.JSArray_String), type$.ListMapView_String).get$entries().map$1$1(0, new A.EthAddrUtils__checksumEncode_closure(addrHexDigest), type$.String).toList$0(0));
    },
    EthAddrUtils__checksumEncode_closure: function EthAddrUtils__checksumEncode_closure(t0) {
      this.addrHexDigest = t0;
    },
    EthAddrDecoder: function EthAddrDecoder() {
    },
    EthAddrEncoder: function EthAddrEncoder() {
    },
    AddressConverterException$(message, details) {
      return new A.AddressConverterException(message, details);
    },
    AddressConverterException: function AddressConverterException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    FilSecp256k1AddrEncoder: function FilSecp256k1AddrEncoder() {
    },
    IcxAddrEncoder: function IcxAddrEncoder() {
    },
    InjAddrEncoder: function InjAddrEncoder() {
    },
    NanoAddrEncoder: function NanoAddrEncoder() {
    },
    NearAddrEncoder: function NearAddrEncoder() {
    },
    NeoAddrEncoder: function NeoAddrEncoder() {
    },
    OkexAddrEncoder: function OkexAddrEncoder() {
    },
    OneAddrEncoder: function OneAddrEncoder() {
    },
    P2PKHAddrEncoder: function P2PKHAddrEncoder() {
    },
    BchP2PKHAddrEncoder: function BchP2PKHAddrEncoder() {
    },
    P2SHAddrEncoder: function P2SHAddrEncoder() {
    },
    BchP2SHAddrEncoder: function BchP2SHAddrEncoder() {
    },
    P2TRUtils_taggedHash(tag, dataBytes) {
      var t2,
        t1 = A.SHA256_hash(A.StringUtils_encode(tag, B.StringEncoding_1));
      type$.List_int._as(t1);
      t2 = A.List_List$of(t1, true, type$.dynamic);
      B.JSArray_methods.addAll$1(t2, t1);
      B.JSArray_methods.addAll$1(t2, dataBytes);
      return A.SHA256_hash(A.List_List$from(t2, true, type$.int));
    },
    P2TRUtils_liftX(pubKeyPoint) {
      var ySq, t2, y, t3,
        t1 = $.$get$Curves_curveSecp256k1(),
        p = t1.p,
        x = pubKeyPoint.get$x();
      if (x.compareTo$1(0, p) >= 0)
        throw A.wrapException(B.AddressConverterException_MY7);
      ySq = x.modPow$2(0, A._BigIntImpl__BigIntImpl$from(3), p).$add(0, A._BigIntImpl__BigIntImpl$from(7)).$mod(0, p);
      t2 = $.$get$_BigIntImpl_one();
      y = ySq.modPow$2(0, p.$add(0, t2).$tdiv(0, A._BigIntImpl__BigIntImpl$from(4)), p);
      t3 = y.modPow$2(0, $.$get$_BigIntImpl_two(), p).compareTo$1(0, ySq);
      if (t3 !== 0)
        throw A.wrapException(B.AddressConverterException_MY7);
      t3 = y.$and(0, t2).compareTo$1(0, $.$get$_BigIntImpl_zero());
      return new A.ProjectiveECCPoint(t1, null, false, B.List_empty, A._setArrayType([x, t3 === 0 ? y : p.$sub(0, y), t2], type$.JSArray_BigInt));
    },
    P2TRUtils__getTagHashedMerkleRoot(args) {
      var t1, t2;
      if (type$.List_int._is(args)) {
        t1 = A.List_List$of(A.IntUtils_encodeVarint(0), true, type$.int);
        B.JSArray_methods.addAll$1(t1, args);
        t2 = A._setArrayType([192], type$.JSArray_int);
        B.JSArray_methods.addAll$1(t2, t1);
        return A.P2TRUtils_taggedHash("TapLeaf", t2);
      }
      t1 = A._setArrayType([], type$.JSArray_int);
      return t1;
    },
    P2TRUtils_calculateTweek(pubPoint, script) {
      var keyX = A.BigintUtils_toBytes(pubPoint.get$x(), A.BigintUtils_orderLen(pubPoint.curve.p), B.C_Endian),
        merkleRoot = A.P2TRUtils__getTagHashedMerkleRoot(script),
        t1 = A.List_List$of(keyX, true, type$.int);
      B.JSArray_methods.addAll$1(t1, merkleRoot);
      return A.P2TRUtils_taggedHash("TapTweak", t1);
    },
    P2TRAddrEncoder: function P2TRAddrEncoder() {
    },
    P2WPKHAddrEncoder: function P2WPKHAddrEncoder() {
    },
    SolAddrEncoder: function SolAddrEncoder() {
    },
    SubstrateEd25519AddrEncoder: function SubstrateEd25519AddrEncoder() {
    },
    SubstrateSr25519AddrEncoder: function SubstrateSr25519AddrEncoder() {
    },
    SubstrateSecp256k1AddrEncoder: function SubstrateSecp256k1AddrEncoder() {
    },
    TonAddrEncoder: function TonAddrEncoder() {
    },
    TrxAddressUtils_fromHexBytes(bytes) {
      var t1,
        validateBytes = A.AddrDecUtils_validateAndRemovePrefixBytes(bytes, B.List_65);
      A.AddrDecUtils_validateBytesLength(validateBytes, 20);
      t1 = A.List_List$of(B.List_65, true, type$.dynamic);
      B.JSArray_methods.addAll$1(t1, validateBytes);
      return A.Base58Encoder_checkEncode(A.List_List$from(t1, true, type$.int), B.Base58Alphabets_0);
    },
    TrxAddrDecoder: function TrxAddrDecoder() {
    },
    TrxAddrEncoder: function TrxAddrEncoder() {
    },
    XlmAddrTypes_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_65k, new A.XlmAddrTypes_fromTag_closure(tag), new A.XlmAddrTypes_fromTag_closure0(tag));
    },
    _XlmAddrUtils_computeChecksum(payloadBytes) {
      var t1 = A.XModemCrc__calculateXmodemCrc(type$.List_int._as(payloadBytes)),
        t2 = A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>");
      return A.List_List$of(new A.ReversedListIterable(t1, t2), true, t2._eval$1("ListIterable.E"));
    },
    XlmAddrTypes: function XlmAddrTypes(t0, t1) {
      this.value = t0;
      this.name = t1;
    },
    XlmAddrTypes_fromTag_closure: function XlmAddrTypes_fromTag_closure(t0) {
      this.tag = t0;
    },
    XlmAddrTypes_fromTag_closure0: function XlmAddrTypes_fromTag_closure0(t0) {
      this.tag = t0;
    },
    XlmAddrTypes_fromTag__closure: function XlmAddrTypes_fromTag__closure() {
    },
    XlmAddrDecoderResult: function XlmAddrDecoderResult(t0, t1) {
      this.type = t0;
      this.baseAddress = t1;
    },
    XlmAddrEncoder: function XlmAddrEncoder() {
    },
    XmrAddressType_fromPrefix(prefix) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_7xV, new A.XmrAddressType_fromPrefix_closure(prefix), new A.XmrAddressType_fromPrefix_closure0(prefix));
    },
    _XmrAddrUtils_computeChecksum(payloadBytes) {
      return B.JSArray_methods.sublist$2(A.Keccack_hash(type$.List_int._as(payloadBytes), 32), 0, 4);
    },
    _XmrAddrUtils_decodeAddress(addr, netVerBytes, paymentIdBytes) {
      var t1, payloadBytesWithoutPrefix, netVersion, addrType, paymentBytes, pubSpendKeyBytes, pubViewKeyBytes, t2, t3,
        parts = A.AddrDecUtils_splitPartsByChecksum(A.Base58XmrDecoder_decode(addr), 4),
        payloadBytes = parts.item1;
      A.AddrDecUtils_validateChecksum(payloadBytes, parts.item2, A.xmr_addr__XmrAddrUtils_computeChecksum$closure());
      t1 = J.getInterceptor$ax(payloadBytes);
      payloadBytesWithoutPrefix = t1.sublist$1(payloadBytes, 1);
      netVersion = t1.$index(payloadBytes, 0);
      addrType = A.XmrAddressType_fromPrefix(netVersion);
      switch (addrType) {
        case B.XmrAddressType_GNA:
          A.AddrDecUtils_validateBytesLength(payloadBytesWithoutPrefix, 72);
          paymentBytes = J.sublist$1$ax(payloadBytesWithoutPrefix, payloadBytesWithoutPrefix.length - 8);
          break;
        default:
          A.AddrDecUtils_validateBytesLength(payloadBytesWithoutPrefix, 64);
          paymentBytes = null;
          break;
      }
      t1 = J.getInterceptor$ax(payloadBytesWithoutPrefix);
      pubSpendKeyBytes = t1.sublist$2(payloadBytesWithoutPrefix, 0, 32);
      pubViewKeyBytes = t1.sublist$2(payloadBytesWithoutPrefix, 32, 64);
      A.BytesUtils_validateListOfBytes(pubViewKeyBytes);
      t1 = type$.int;
      t2 = A.List_List$unmodifiable(pubViewKeyBytes, t1);
      A.BytesUtils_validateListOfBytes(pubSpendKeyBytes);
      t3 = A.List_List$unmodifiable(pubSpendKeyBytes, t1);
      if (paymentBytes == null)
        t1 = null;
      else {
        A.BytesUtils_validateListOfBytes(paymentBytes);
        t1 = A.List_List$unmodifiable(paymentBytes, t1);
      }
      return new A.XmrAddressDecodeResult(t2, t3, t1, netVersion, addrType);
    },
    _XmrAddrUtils_encodeKey(pubSkey, pubVkey, netVerBytes, paymentIdBytes) {
      var pubSpendKeyObj, pubViewKeyObj, t1, t2, payloadBytes, checksum;
      if (netVerBytes.length !== 1)
        throw A.wrapException(B.AddressConverterException_wCp);
      if (A.XmrAddressType_fromPrefix(B.JSArray_methods.get$first(netVerBytes)) === B.XmrAddressType_GNA)
        throw A.wrapException(B.AddressConverterException_Sof);
      pubSpendKeyObj = A.IPublicKey_IPublicKey$fromBytes(pubSkey, B.EllipticCurveTypes_ed25519Monero);
      pubViewKeyObj = A.IPublicKey_IPublicKey$fromBytes(pubVkey, B.EllipticCurveTypes_ed25519Monero);
      t1 = A.List_List$of(netVerBytes, true, type$.dynamic);
      B.JSArray_methods.addAll$1(t1, pubSpendKeyObj.get$compressed());
      B.JSArray_methods.addAll$1(t1, pubViewKeyObj.get$compressed());
      B.JSArray_methods.addAll$1(t1, []);
      t2 = type$.int;
      payloadBytes = A.List_List$unmodifiable(t1, t2);
      checksum = B.JSArray_methods.sublist$2(A.Keccack_hash(payloadBytes, 32), 0, 4);
      t2 = A.List_List$of(payloadBytes, true, t2);
      B.JSArray_methods.addAll$1(t2, checksum);
      return A.Base58XmrEncoder_encode(t2);
    },
    XmrAddressType: function XmrAddressType(t0, t1) {
      this.name = t0;
      this.prefixes = t1;
    },
    XmrAddressType_fromPrefix_closure: function XmrAddressType_fromPrefix_closure(t0) {
      this.prefix = t0;
    },
    XmrAddressType_fromPrefix_closure0: function XmrAddressType_fromPrefix_closure0(t0) {
      this.prefix = t0;
    },
    XmrAddressDecodeResult: function XmrAddressDecodeResult(t0, t1, t2, t3, t4) {
      var _ = this;
      _.publicViewKey = t0;
      _.publicSpendKey = t1;
      _.paymentId = t2;
      _.netVersion = t3;
      _.type = t4;
    },
    XmrAddrDecoder: function XmrAddrDecoder() {
    },
    XmrAddrEncoder: function XmrAddrEncoder() {
    },
    XRPAddressUtils_decodeXAddress(addr, prefix) {
      var prefixBytes, t1, addrHash, tagBytes, tagFlag, tag,
        addrDecBytes = A.Base58Decoder_checkDecode(addr, B.Base58Alphabets_1);
      A.AddrDecUtils_validateBytesLength(addrDecBytes, 31);
      prefixBytes = B.JSArray_methods.sublist$2(addrDecBytes, 0, 2);
      if (prefix != null) {
        if (!A.BytesUtils_bytesEqual(prefix, prefixBytes))
          throw A.wrapException(A.AddressConverterException$("Invalid prefix (expected " + A.S(prefix) + ", got " + A.S(prefixBytes) + ")", null));
      } else if (!A.BytesUtils_bytesEqual(prefixBytes, B.List_5_68) && !A.BytesUtils_bytesEqual(prefixBytes, B.List_4_147))
        throw A.wrapException(B.AddressConverterException_HNd);
      t1 = prefixBytes.length;
      addrHash = B.JSArray_methods.sublist$2(addrDecBytes, t1, 20 + t1);
      tagBytes = B.JSArray_methods.sublist$1(addrDecBytes, addrDecBytes.length - 9);
      if (0 >= tagBytes.length)
        return A.ioore(tagBytes, 0);
      tagFlag = tagBytes[0];
      t1 = tagFlag === 0;
      if (!t1 && tagFlag !== 1)
        throw A.wrapException(A.AddressConverterException$("Invalid tag flag, tag flag should be 0 or 1 but got " + A.S(tagFlag), null));
      tagBytes = B.JSArray_methods.sublist$1(tagBytes, 1);
      if (t1 && !A.BytesUtils_bytesEqual(tagBytes, A.List_List$filled(8, 0, false, type$.int)))
        throw A.wrapException(B.AddressConverterException_46y);
      tag = tagFlag === 1 ? A.readUint32LE(tagBytes, 0) : null;
      t1 = A.BytesUtils_bytesEqual(prefixBytes, B.List_4_147);
      return new A.XRPXAddressDecodeResult(A.BytesUtils_toBytes(addrHash, true), tag, t1);
    },
    XRPAddressUtils_isXAddress(address) {
      var exception;
      try {
        A.XRPAddressUtils_decodeXAddress(address, null);
        return true;
      } catch (exception) {
        return false;
      }
    },
    XRPXAddressDecodeResult: function XRPXAddressDecodeResult(t0, t1, t2) {
      this.bytes = t0;
      this.tag = t1;
      this.isTestnet = t2;
    },
    XrpAddrEncoder: function XrpAddrEncoder() {
    },
    XtzAddrPrefixes: function XtzAddrPrefixes() {
    },
    XtzAddrEncoder: function XtzAddrEncoder() {
    },
    ZilAddrEncoder: function ZilAddrEncoder() {
    },
    Bip32Base__initializePrivateKey(privKey, pubKey, keyData, keyNetVer, curve) {
      var t1;
      if (privKey != null) {
        t1 = A.IPrivateKey_IPrivateKey$fromBytes(privKey, curve);
        return new A.Bip32PrivateKey(t1, t1.get$curve(), keyData, keyNetVer);
      }
      return null;
    },
    Bip32Base__initializePublicKey(privKey, pubKey, keyData, keyNetVer, curve) {
      var t1;
      if (privKey != null) {
        t1 = A.IPrivateKey_IPrivateKey$fromBytes(privKey, curve);
        t1.get$curve();
        t1 = t1.get$publicKey();
        return new A.Bip32PublicKey(t1, t1.get$curve(), keyData, keyNetVer);
      } else {
        pubKey.toString;
        t1 = A.IPublicKey_IPublicKey$fromBytes(pubKey, curve);
        return new A.Bip32PublicKey(t1, t1.get$curve(), keyData, keyNetVer);
      }
    },
    Bip32Base: function Bip32Base() {
    },
    IBip32MstKeyGenerator: function IBip32MstKeyGenerator() {
    },
    Bip32KeyError$(message) {
      return new A.Bip32KeyError(message, null);
    },
    Bip32KeyError: function Bip32KeyError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    Bip32PathError: function Bip32PathError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    Bip32ChainCode$(chaincode) {
      return new A.Bip32ChainCode(chaincode == null ? A.List_List$filled(32, 0, false, type$.int) : chaincode);
    },
    Bip32FingerPrint_Bip32FingerPrint(fprint) {
      if (fprint == null)
        fprint = A.List_List$from(B.List_0_0_0_0, true, type$.int);
      if (fprint.length < 4)
        throw A.wrapException(B.ArgumentException_wwd);
      return new A.Bip32FingerPrint(B.JSArray_methods.sublist$2(fprint, 0, 4));
    },
    Bip32Depth$(depth) {
      var t1 = new A.Bip32Depth();
      if (depth < 0)
        A.throwExpression(A.ArgumentException$("Invalid depth (" + depth + ")", null));
      t1.__Bip32Depth__depth_F = depth;
      return t1;
    },
    Bip32KeyIndex_Bip32KeyIndex(index) {
      if (index < 0 || index > 4294967295)
        throw A.wrapException(A.ArgumentException$("Invalid key index (" + index + ")", null));
      return new A.Bip32KeyIndex(index);
    },
    Bip32KeyData$(chainCode, depth, index, parentFingerPrint) {
      var t1 = depth == null ? A.Bip32Depth$(0) : depth,
        t2 = index == null ? A.Bip32KeyIndex_Bip32KeyIndex(0) : index,
        t3 = chainCode == null ? A.Bip32ChainCode$(null) : chainCode;
      return new A.Bip32KeyData(t1, t2, t3, parentFingerPrint == null ? A.Bip32FingerPrint_Bip32FingerPrint(null) : parentFingerPrint);
    },
    Bip32ChainCode: function Bip32ChainCode(t0) {
      this._chainCode = t0;
    },
    Bip32FingerPrint: function Bip32FingerPrint(t0) {
      this._fPrint = t0;
    },
    Bip32Depth: function Bip32Depth() {
      this.__Bip32Depth__depth_F = $;
    },
    Bip32KeyIndex: function Bip32KeyIndex(t0) {
      this.index = t0;
    },
    Bip32KeyData: function Bip32KeyData(t0, t1, t2, t3) {
      var _ = this;
      _.depth = t0;
      _.index = t1;
      _.chainCode = t2;
      _.parentFingerPrint = t3;
    },
    Bip32KeyNetVersions_Bip32KeyNetVersions(pubNetVer, privNetVer) {
      var t1, t2;
      if (pubNetVer.length !== 4 || privNetVer.length !== 4)
        throw A.wrapException(B.ArgumentException_gnE);
      A.BytesUtils_validateListOfBytes(pubNetVer);
      t1 = type$.int;
      t2 = A.List_List$unmodifiable(pubNetVer, t1);
      A.BytesUtils_validateListOfBytes(privNetVer);
      return new A.Bip32KeyNetVersions(t2, A.List_List$unmodifiable(privNetVer, t1));
    },
    Bip32KeyNetVersions: function Bip32KeyNetVersions(t0, t1) {
      this.__Bip32KeyNetVersions__pubNetVer_F = t0;
      this.__Bip32KeyNetVersions__privNetVer_F = t1;
    },
    _Bip32KeySerializer_serialize(keyBytes, keyData, keyNetVerBytes) {
      var t1 = A.List_List$of(keyNetVerBytes, true, type$.dynamic),
        t2 = keyData.depth.__Bip32Depth__depth_F;
      t2 === $ && A.throwLateFieldNI("_depth");
      B.JSArray_methods.addAll$1(t1, A.IntUtils_toBytes(t2, B.C_Endian, 1));
      t2 = type$.int;
      B.JSArray_methods.addAll$1(t1, A.List_List$from(keyData.parentFingerPrint._fPrint, true, t2));
      B.JSArray_methods.addAll$1(t1, A.IntUtils_toBytes(keyData.index.index, B.C_Endian, 4));
      B.JSArray_methods.addAll$1(t1, A.List_List$from(keyData.chainCode._chainCode, true, t2));
      B.JSArray_methods.addAll$1(t1, keyBytes);
      return A.Base58Encoder_checkEncode(A.List_List$from(t1, true, t2), B.Base58Alphabets_0);
    },
    Bip32PrivateKeySerializer_serialize(privKey, keyData, keyNetVer) {
      var t2, t3,
        t1 = [0];
      B.JSArray_methods.addAll$1(t1, privKey.get$raw());
      t2 = type$.int;
      t1 = A.List_List$from(t1, true, t2);
      t3 = keyNetVer.__Bip32KeyNetVersions__privNetVer_F;
      t3 === $ && A.throwLateFieldNI("_privNetVer");
      return A._Bip32KeySerializer_serialize(t1, keyData, A.List_List$from(t3, true, t2));
    },
    Bip32PublicKeySerializer_serialize(pubKey, keyData, keyNetVer) {
      var t1 = pubKey.get$compressed(),
        t2 = keyNetVer.__Bip32KeyNetVersions__pubNetVer_F;
      t2 === $ && A.throwLateFieldNI("_pubNetVer");
      return A._Bip32KeySerializer_serialize(t1, keyData, A.List_List$from(t2, true, type$.int));
    },
    Bip32KeyDeserializer__getIfPublic(serKeyBytes, keyNetVer) {
      var t2,
        keyNetVerGot = B.JSArray_methods.sublist$2(serKeyBytes, 0, 4),
        t1 = keyNetVer.__Bip32KeyNetVersions__pubNetVer_F;
      t1 === $ && A.throwLateFieldNI("_pubNetVer");
      t2 = type$.int;
      if (A.BytesUtils_bytesEqual(keyNetVerGot, A.List_List$from(t1, true, t2)))
        return true;
      else {
        t1 = keyNetVer.__Bip32KeyNetVersions__privNetVer_F;
        t1 === $ && A.throwLateFieldNI("_privNetVer");
        if (A.BytesUtils_bytesEqual(keyNetVerGot, A.List_List$from(t1, true, t2)))
          return false;
        else
          throw A.wrapException(A.Bip32KeyError$("Invalid extended key (wrong net version: " + A.BytesUtils_toHexString(keyNetVerGot, true, null) + ")"));
      }
    },
    Bip32DeserializedKey: function Bip32DeserializedKey(t0, t1, t2) {
      this._keyBytes = t0;
      this.keyData = t1;
      this.isPublic = t2;
    },
    Bip32KeyBase: function Bip32KeyBase() {
    },
    Bip32PublicKey: function Bip32PublicKey(t0, t1, t2, t3) {
      var _ = this;
      _.pubKey = t0;
      _.curveType = t1;
      _.keyData = t2;
      _.keyNetVer = t3;
    },
    Bip32PrivateKey: function Bip32PrivateKey(t0, t1, t2, t3) {
      var _ = this;
      _.privKey = t0;
      _.curveType = t1;
      _.keyData = t2;
      _.keyNetVer = t3;
    },
    Bip32PathParser_parse(path) {
      var isAbsolute, t2,
        t1 = type$.WhereIterable_String,
        pathElems = A.List_List$of(new A.WhereIterable(A._setArrayType((B.JSString_methods.endsWith$1(path, "/") ? B.JSString_methods.substring$2(path, 0, path.length - 1) : path).split("/"), type$.JSArray_String), type$.bool_Function_String._as(new A.Bip32PathParser_parse_closure()), t1), true, t1._eval$1("Iterable.E"));
      t1 = pathElems.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(pathElems, 0);
        isAbsolute = J.$eq$(pathElems[0], "m");
      } else
        isAbsolute = false;
      if (isAbsolute)
        pathElems = B.JSArray_methods.sublist$1(pathElems, 1);
      t1 = A._arrayInstanceType(pathElems);
      t2 = t1._eval$1("MappedListIterable<1,Bip32KeyIndex>");
      return new A.Bip32Path(A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(pathElems, t1._eval$1("Bip32KeyIndex(1)")._as(A.bip32_path_Bip32PathParser__parseElem$closure()), t2), true, t2._eval$1("ListIterable.E")), type$.Bip32KeyIndex), isAbsolute);
    },
    Bip32PathParser__parseElem(pathElem) {
      var isHardened, t2, _null = null, t1 = {};
      t1.pathElem = pathElem;
      t1.pathElem = J.trim$0$s(pathElem);
      isHardened = !new A.WhereIterable(B.List_0uY, type$.bool_Function_String._as(new A.Bip32PathParser__parseElem_closure(t1)), type$.WhereIterable_String).get$isEmpty(0);
      if (isHardened) {
        t2 = t1.pathElem;
        t1.pathElem = B.JSString_methods.substring$2(t2, 0, t2.length - 1);
      }
      if (A.Primitives_parseInt(t1.pathElem, _null) == null)
        throw A.wrapException(new A.Bip32PathError("Invalid path element (" + t1.pathElem + ")", _null));
      t1 = t1.pathElem;
      return isHardened ? A.Bip32KeyIndex_Bip32KeyIndex((A.int_parse(t1, _null) | 2147483648) >>> 0) : A.Bip32KeyIndex_Bip32KeyIndex(A.int_parse(t1, _null));
    },
    Bip32Path: function Bip32Path(t0, t1) {
      this.elems = t0;
      this.isAbsolute = t1;
    },
    Bip32PathParser_parse_closure: function Bip32PathParser_parse_closure() {
    },
    Bip32PathParser__parseElem_closure: function Bip32PathParser__parseElem_closure(t0) {
      this._box_0 = t0;
    },
    Bip32KholawEd25519$_(keyData, keyNetVer, privKey, pubKey) {
      var t1 = new A.Bip32KholawEd25519();
      t1.Bip32Base$4$keyData$keyNetVer$privKey$pubKey(keyData, keyNetVer, privKey, pubKey);
      return t1;
    },
    Bip32KholawEd25519: function Bip32KholawEd25519() {
      this.__Bip32Base__pubKey_A = this.__Bip32Base__privKey_A = $;
    },
    Bip32KholawEd25519KeyDerivator: function Bip32KholawEd25519KeyDerivator() {
    },
    Bip32KholawEd25519KeyDerivatorBase: function Bip32KholawEd25519KeyDerivatorBase() {
    },
    Bip32KholawEd25519MstKeyGenerator__hashRepeatedly(dataBytes, hmacKeyBytes) {
      var halves = A.QuickCrypto_hmacSha512HashHalves(hmacKeyBytes, dataBytes),
        t1 = halves.item1,
        t2 = J.$index$asx(t1, 31);
      if (typeof t2 !== "number")
        return t2.$and();
      if ((t2 & 32) !== 0) {
        t1 = A.List_List$of(t1, true, type$.dynamic);
        B.JSArray_methods.addAll$1(t1, halves.item2);
        return A.Bip32KholawEd25519MstKeyGenerator__hashRepeatedly(A.List_List$from(t1, true, type$.int), hmacKeyBytes);
      }
      return halves;
    },
    Bip32KholawEd25519MstKeyGenerator: function Bip32KholawEd25519MstKeyGenerator() {
    },
    Bip32Slip10Ed25519$(keyData, keyNetVer, privKey, pubKey) {
      var t1 = new A.Bip32Slip10Ed25519();
      t1.Bip32Base$4$keyData$keyNetVer$privKey$pubKey(keyData, keyNetVer, privKey, pubKey);
      return t1;
    },
    Bip32Slip10Ed25519$fromSeed(seedBytes, keyNetVer) {
      var t1 = new A.Bip32Slip10Ed25519();
      t1.Bip32Base$fromSeed$2(seedBytes, keyNetVer);
      return t1;
    },
    Bip32Slip10Ed25519$fromExtendedKey(exKeyStr, keyNetVer) {
      var t1 = new A.Bip32Slip10Ed25519();
      t1.Bip32Base$fromExtendedKey$2(exKeyStr, keyNetVer);
      return t1;
    },
    Bip32Slip10Ed25519: function Bip32Slip10Ed25519() {
      this.__Bip32Base__pubKey_A = this.__Bip32Base__privKey_A = $;
    },
    Bip32Slip10Ed25519Blake2b: function Bip32Slip10Ed25519Blake2b() {
      this.__Bip32Base__pubKey_A = this.__Bip32Base__privKey_A = $;
    },
    Bip32Slip10EcdsaDerivator: function Bip32Slip10EcdsaDerivator() {
    },
    Bip32Slip10Ed25519Derivator: function Bip32Slip10Ed25519Derivator() {
    },
    _Bip32Slip10MstKeyGenerator_generateFromSeed(seedBytes, hmacKeyBytes, curveType) {
      var hmac, hmacData, success,
        t1 = seedBytes.length;
      if (t1 < 16)
        throw A.wrapException(A.ArgumentException$("Invalid seed length (" + t1 + ")", null));
      hmac = J.JSArray_JSArray$fixed(0, type$.int);
      for (hmacData = seedBytes, success = false; !success;) {
        hmac = A.QuickCrypto_hmacSha512Hash(hmacKeyBytes, hmacData);
        success = A.IPrivateKey_isValidBytes(B.JSArray_methods.sublist$2(hmac, 0, 32), curveType);
        if (!success)
          hmacData = hmac;
      }
      return new A.Tuple(B.JSArray_methods.sublist$2(hmac, 0, 32), B.JSArray_methods.sublist$1(hmac, 32), type$.Tuple_of_List_int_and_List_int);
    },
    Bip32Slip10Ed25519MstKeyGenerator: function Bip32Slip10Ed25519MstKeyGenerator() {
    },
    Bip32Slip10Nist256p1MstKeyGenerator: function Bip32Slip10Nist256p1MstKeyGenerator() {
    },
    Bip32Slip10Secp256k1MstKeyGenerator: function Bip32Slip10Secp256k1MstKeyGenerator() {
    },
    Bip32Slip10Nist256p1$_(keyData, keyNetVer, privKey, pubKey) {
      var t1 = new A.Bip32Slip10Nist256p1();
      t1.Bip32Base$4$keyData$keyNetVer$privKey$pubKey(keyData, keyNetVer, privKey, pubKey);
      return t1;
    },
    Bip32Slip10Nist256p1: function Bip32Slip10Nist256p1() {
      this.__Bip32Base__pubKey_A = this.__Bip32Base__privKey_A = $;
    },
    Bip32Slip10Secp256k1$_(keyData, keyNetVer, privKey, pubKey) {
      var t1 = new A.Bip32Slip10Secp256k1();
      t1.Bip32Base$4$keyData$keyNetVer$privKey$pubKey(keyData, keyNetVer, privKey, pubKey);
      return t1;
    },
    Bip32Slip10Secp256k1$fromSeed(seedBytes, keyNetVer) {
      var t1 = new A.Bip32Slip10Secp256k1();
      t1.Bip32Base$fromSeed$2(seedBytes, keyNetVer);
      return t1;
    },
    Bip32Slip10Secp256k1: function Bip32Slip10Secp256k1() {
      this.__Bip32Base__pubKey_A = this.__Bip32Base__privKey_A = $;
    },
    Bip39EntropyGenerator_isValidEntropyBitLen(bitLen) {
      var exception;
      try {
        B.JSArray_methods.firstWhere$1(B.List_8aB1, new A.Bip39EntropyGenerator_isValidEntropyBitLen_closure(bitLen));
        return true;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return false;
        else
          throw exception;
      }
    },
    Bip39EntropyBitLen: function Bip39EntropyBitLen(t0) {
      this.value = t0;
    },
    Bip39EntropyGenerator_isValidEntropyBitLen_closure: function Bip39EntropyGenerator_isValidEntropyBitLen_closure(t0) {
      this.bitLen = t0;
    },
    Bip39WordsNum: function Bip39WordsNum(t0) {
      this.value = t0;
    },
    Bip39Languages: function Bip39Languages(t0) {
      this.name = t0;
    },
    Bip39Mnemonic: function Bip39Mnemonic(t0) {
      this._mnemonicList = t0;
    },
    Bip39MnemonicDecoder$(language) {
      return new A.Bip39MnemonicDecoder(language, null, new A.Bip39WordsListFinder());
    },
    Bip39MnemonicDecoder: function Bip39MnemonicDecoder(t0, t1, t2) {
      this.language = t0;
      this.wordsList = t1;
      this.wordsListFinder = t2;
    },
    Bip39MnemonicDecoder__decodeAndVerifyBinaryStr_closure: function Bip39MnemonicDecoder__decodeAndVerifyBinaryStr_closure(t0) {
      this.wCount = t0;
    },
    Bip39MnemonicDecoder_mnemonicToBinaryStr_closure: function Bip39MnemonicDecoder_mnemonicToBinaryStr_closure(t0) {
      this.wordsList = t0;
    },
    Bip39MnemonicEncoder: function Bip39MnemonicEncoder(t0) {
      this.wordsList = t0;
    },
    Bip39MnemonicGenerator: function Bip39MnemonicGenerator(t0) {
      this._mnemonicEncoder = t0;
    },
    Bip39MnemonicGenerator__entropyBitLenFromWordsNum_closure: function Bip39MnemonicGenerator__entropyBitLenFromWordsNum_closure(t0) {
      this.bitLen = t0;
    },
    Bip39WordsListGetter: function Bip39WordsListGetter() {
    },
    Bip39WordsListFinder: function Bip39WordsListFinder() {
    },
    Bip39MnemonicValidator: function Bip39MnemonicValidator(t0) {
      this.decoder = t0;
    },
    Bip39SeedGenerator: function Bip39SeedGenerator(t0, t1) {
      this._entropy = t0;
      this.mnemonic = t1;
    },
    Bip44Levels_Bip44Levels$fromInt(value) {
      return B.JSArray_methods.firstWhere$1(B.List_iPa, new A.Bip44Levels_Bip44Levels$fromInt_closure(value));
    },
    Bip44Levels: function Bip44Levels(t0, t1) {
      this.value = t0;
      this.name = t1;
    },
    Bip44Levels_Bip44Levels$fromInt_closure: function Bip44Levels_Bip44Levels$fromInt_closure(t0) {
      this.value = t0;
    },
    Bip44DepthError$(message) {
      return new A.Bip44DepthError(message, null);
    },
    Bip44DepthError: function Bip44DepthError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    BipCoins_fromName($name, proposal) {
      switch (proposal) {
        case B.BipProposal_bip44:
          return A.Bip44Coins_fromName($name);
        case B.BipProposal_bip49:
          return A.Bip49Coins_fromName($name);
        case B.BipProposal_bip84:
          return A.Bip84Coins_fromName($name);
        case B.BipProposal_bip86:
          return A.Bip86Coins_fromName($name);
        default:
          return null;
      }
    },
    BipCoins: function BipCoins() {
    },
    BipProposal: function BipProposal(t0) {
      this.name = t0;
    },
    Bip44Coins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$Bip44Coins__coinToConf();
        t1 = new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")).firstWhere$1(0, new A.Bip44Coins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    Bip44Coins: function Bip44Coins(t0) {
      this.name = t0;
    },
    Bip44Coins_fromName_closure: function Bip44Coins_fromName_closure(t0) {
      this.name = t0;
    },
    Bip44Conf_akashNetwork_closure: function Bip44Conf_akashNetwork_closure() {
    },
    Bip44Conf_algorand_closure: function Bip44Conf_algorand_closure() {
    },
    Bip44Conf_aptos_closure: function Bip44Conf_aptos_closure() {
    },
    Bip44Conf_avaxCChain_closure: function Bip44Conf_avaxCChain_closure() {
    },
    Bip44Conf_avaxPChain_closure: function Bip44Conf_avaxPChain_closure() {
    },
    Bip44Conf_avaxXChain_closure: function Bip44Conf_avaxXChain_closure() {
    },
    Bip44Conf_axelar_closure: function Bip44Conf_axelar_closure() {
    },
    Bip44Conf_bandProtocol_closure: function Bip44Conf_bandProtocol_closure() {
    },
    Bip44Conf_binanceChain_closure: function Bip44Conf_binanceChain_closure() {
    },
    Bip44Conf_binanceSmartChain_closure: function Bip44Conf_binanceSmartChain_closure() {
    },
    Bip44Conf_bitcoinMainNet_closure: function Bip44Conf_bitcoinMainNet_closure() {
    },
    Bip44Conf_bitcoinTestNet_closure: function Bip44Conf_bitcoinTestNet_closure() {
    },
    Bip44Conf_bitcoinCashMainNet_closure: function Bip44Conf_bitcoinCashMainNet_closure() {
    },
    Bip44Conf_bitcoinCashTestNet_closure: function Bip44Conf_bitcoinCashTestNet_closure() {
    },
    Bip44Conf_bitcoinCashSlpMainNet_closure: function Bip44Conf_bitcoinCashSlpMainNet_closure() {
    },
    Bip44Conf_bitcoinCashSlpTestNet_closure: function Bip44Conf_bitcoinCashSlpTestNet_closure() {
    },
    Bip44Conf_bitcoinSvMainNet_closure: function Bip44Conf_bitcoinSvMainNet_closure() {
    },
    Bip44Conf_bitcoinSvTestNet_closure: function Bip44Conf_bitcoinSvTestNet_closure() {
    },
    Bip44Conf_cardanoByronIcarus_closure: function Bip44Conf_cardanoByronIcarus_closure() {
    },
    Bip44Conf_cardanoByronLedger_closure: function Bip44Conf_cardanoByronLedger_closure() {
    },
    Bip44Conf_cardanoByronIcarusTestnet_closure: function Bip44Conf_cardanoByronIcarusTestnet_closure() {
    },
    Bip44Conf_cardanoByronLedgerTestnet_closure: function Bip44Conf_cardanoByronLedgerTestnet_closure() {
    },
    Bip44Conf_celo_closure: function Bip44Conf_celo_closure() {
    },
    Bip44Conf_certik_closure: function Bip44Conf_certik_closure() {
    },
    Bip44Conf_chihuahua_closure: function Bip44Conf_chihuahua_closure() {
    },
    Bip44Conf_cosmos_closure: function Bip44Conf_cosmos_closure() {
    },
    Bip44Conf_cosmosTestnet_closure: function Bip44Conf_cosmosTestnet_closure() {
    },
    Bip44Conf_cosmosEthSecp256k1_closure: function Bip44Conf_cosmosEthSecp256k1_closure() {
    },
    Bip44Conf_cosmosTestnetEthSecp256k1_closure: function Bip44Conf_cosmosTestnetEthSecp256k1_closure() {
    },
    Bip44Conf_cosmosNist256p1_closure: function Bip44Conf_cosmosNist256p1_closure() {
    },
    Bip44Conf_cosmosTestnetNist256p1_closure: function Bip44Conf_cosmosTestnetNist256p1_closure() {
    },
    Bip44Conf_cosmosEd25519_closure: function Bip44Conf_cosmosEd25519_closure() {
    },
    Bip44Conf_cosmosTestnetEd25519_closure: function Bip44Conf_cosmosTestnetEd25519_closure() {
    },
    Bip44Conf_dashMainNet_closure: function Bip44Conf_dashMainNet_closure() {
    },
    Bip44Conf_dashTestNet_closure: function Bip44Conf_dashTestNet_closure() {
    },
    Bip44Conf_dogecoinMainNet_closure: function Bip44Conf_dogecoinMainNet_closure() {
    },
    Bip44Conf_dogecoinTestNet_closure: function Bip44Conf_dogecoinTestNet_closure() {
    },
    Bip44Conf_pepeMainnet_closure: function Bip44Conf_pepeMainnet_closure() {
    },
    Bip44Conf_pepeTestnet_closure: function Bip44Conf_pepeTestnet_closure() {
    },
    Bip44Conf_ecashMainNet_closure: function Bip44Conf_ecashMainNet_closure() {
    },
    Bip44Conf_ecashTestNet_closure: function Bip44Conf_ecashTestNet_closure() {
    },
    Bip44Conf_elrond_closure: function Bip44Conf_elrond_closure() {
    },
    Bip44Conf_eos_closure: function Bip44Conf_eos_closure() {
    },
    Bip44Conf_ergoMainNet_closure: function Bip44Conf_ergoMainNet_closure() {
    },
    Bip44Conf_ergoTestNet_closure: function Bip44Conf_ergoTestNet_closure() {
    },
    Bip44Conf_ethereum_closure: function Bip44Conf_ethereum_closure() {
    },
    Bip44Conf_ethereumTestnet_closure: function Bip44Conf_ethereumTestnet_closure() {
    },
    Bip44Conf_ethereumClassic_closure: function Bip44Conf_ethereumClassic_closure() {
    },
    Bip44Conf_fantomOpera_closure: function Bip44Conf_fantomOpera_closure() {
    },
    Bip44Conf_filecoin_closure: function Bip44Conf_filecoin_closure() {
    },
    Bip44Conf_harmonyOneMetamask_closure: function Bip44Conf_harmonyOneMetamask_closure() {
    },
    Bip44Conf_harmonyOneEth_closure: function Bip44Conf_harmonyOneEth_closure() {
    },
    Bip44Conf_harmonyOneAtom_closure: function Bip44Conf_harmonyOneAtom_closure() {
    },
    Bip44Conf_huobiChain_closure: function Bip44Conf_huobiChain_closure() {
    },
    Bip44Conf_icon_closure: function Bip44Conf_icon_closure() {
    },
    Bip44Conf_injective_closure: function Bip44Conf_injective_closure() {
    },
    Bip44Conf_irisNet_closure: function Bip44Conf_irisNet_closure() {
    },
    Bip44Conf_kava_closure: function Bip44Conf_kava_closure() {
    },
    Bip44Conf_kusamaEd25519Slip_closure: function Bip44Conf_kusamaEd25519Slip_closure() {
    },
    Bip44Conf_kusamaTestnetEd25519Slip_closure: function Bip44Conf_kusamaTestnetEd25519Slip_closure() {
    },
    Bip44Conf_litecoinMainNet_closure: function Bip44Conf_litecoinMainNet_closure() {
    },
    Bip44Conf_litecoinTestNet_closure: function Bip44Conf_litecoinTestNet_closure() {
    },
    Bip44Conf_moneroEd25519Slip_closure: function Bip44Conf_moneroEd25519Slip_closure() {
    },
    Bip44Conf_moneroSecp256k1_closure: function Bip44Conf_moneroSecp256k1_closure() {
    },
    Bip44Conf_nano_closure: function Bip44Conf_nano_closure() {
    },
    Bip44Conf_nearProtocol_closure: function Bip44Conf_nearProtocol_closure() {
    },
    Bip44Conf_neo_closure: function Bip44Conf_neo_closure() {
    },
    Bip44Conf_nineChroniclesGold_closure: function Bip44Conf_nineChroniclesGold_closure() {
    },
    Bip44Conf_okexChainEth_closure: function Bip44Conf_okexChainEth_closure() {
    },
    Bip44Conf_okexChainAtom_closure: function Bip44Conf_okexChainAtom_closure() {
    },
    Bip44Conf_okexChainAtomOld_closure: function Bip44Conf_okexChainAtomOld_closure() {
    },
    Bip44Conf_ontology_closure: function Bip44Conf_ontology_closure() {
    },
    Bip44Conf_osmosis_closure: function Bip44Conf_osmosis_closure() {
    },
    Bip44Conf_piNetwork_closure: function Bip44Conf_piNetwork_closure() {
    },
    Bip44Conf_polkadotEd25519Slip_closure: function Bip44Conf_polkadotEd25519Slip_closure() {
    },
    Bip44Conf_polkadotTestnetEd25519Slip_closure: function Bip44Conf_polkadotTestnetEd25519Slip_closure() {
    },
    Bip44Conf_polygon_closure: function Bip44Conf_polygon_closure() {
    },
    Bip44Conf_ripple_closure: function Bip44Conf_ripple_closure() {
    },
    Bip44Conf_rippleTestnet_closure: function Bip44Conf_rippleTestnet_closure() {
    },
    Bip44Conf_rippleEd25519_closure: function Bip44Conf_rippleEd25519_closure() {
    },
    Bip44Conf_rippleTestnetEd25519_closure: function Bip44Conf_rippleTestnetEd25519_closure() {
    },
    Bip44Conf_secretNetworkOld_closure: function Bip44Conf_secretNetworkOld_closure() {
    },
    Bip44Conf_secretNetworkNew_closure: function Bip44Conf_secretNetworkNew_closure() {
    },
    Bip44Conf_solana_closure: function Bip44Conf_solana_closure() {
    },
    Bip44Conf_solanaTestnet_closure: function Bip44Conf_solanaTestnet_closure() {
    },
    Bip44Conf_stellar_closure: function Bip44Conf_stellar_closure() {
    },
    Bip44Conf_stellarTestnet_closure: function Bip44Conf_stellarTestnet_closure() {
    },
    Bip44Conf_terra_closure: function Bip44Conf_terra_closure() {
    },
    Bip44Conf_tezos_closure: function Bip44Conf_tezos_closure() {
    },
    Bip44Conf_theta_closure: function Bip44Conf_theta_closure() {
    },
    Bip44Conf_tron_closure: function Bip44Conf_tron_closure() {
    },
    Bip44Conf_tronTestnet_closure: function Bip44Conf_tronTestnet_closure() {
    },
    Bip44Conf_vechain_closure: function Bip44Conf_vechain_closure() {
    },
    Bip44Conf_verge_closure: function Bip44Conf_verge_closure() {
    },
    Bip44Conf_zcashMainNet_closure: function Bip44Conf_zcashMainNet_closure() {
    },
    Bip44Conf_zcashTestNet_closure: function Bip44Conf_zcashTestNet_closure() {
    },
    Bip44Conf_zilliqa_closure: function Bip44Conf_zilliqa_closure() {
    },
    Bip44Conf_tonMainnet_closure: function Bip44Conf_tonMainnet_closure() {
    },
    Bip44Conf_tonTestnet_closure: function Bip44Conf_tonTestnet_closure() {
    },
    Bip44Conf_electraProtocolMainNet_closure: function Bip44Conf_electraProtocolMainNet_closure() {
    },
    Bip44Conf_electraProtocolTestNet_closure: function Bip44Conf_electraProtocolTestNet_closure() {
    },
    Bip49Coins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$Bip49Coins__coinToConf();
        t1 = new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")).firstWhere$1(0, new A.Bip49Coins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    Bip49Coins: function Bip49Coins(t0) {
      this.name = t0;
    },
    Bip49Coins_fromName_closure: function Bip49Coins_fromName_closure(t0) {
      this.name = t0;
    },
    Bip49Conf_dashMainNet_closure: function Bip49Conf_dashMainNet_closure() {
    },
    Bip49Conf_dashTestNet_closure: function Bip49Conf_dashTestNet_closure() {
    },
    Bip49Conf_dogecoinMainNet_closure: function Bip49Conf_dogecoinMainNet_closure() {
    },
    Bip49Conf_dogecoinTestNet_closure: function Bip49Conf_dogecoinTestNet_closure() {
    },
    Bip49Conf_litecoinMainNet_closure: function Bip49Conf_litecoinMainNet_closure() {
    },
    Bip49Conf_litecoinTestNet_closure: function Bip49Conf_litecoinTestNet_closure() {
    },
    Bip49Conf_zcashMainNet_closure: function Bip49Conf_zcashMainNet_closure() {
    },
    Bip49Conf_zcashTestNet_closure: function Bip49Conf_zcashTestNet_closure() {
    },
    Bip49Conf_bitcoinMainNet_closure: function Bip49Conf_bitcoinMainNet_closure() {
    },
    Bip49Conf_bitcoinTestNet_closure: function Bip49Conf_bitcoinTestNet_closure() {
    },
    Bip49Conf_bitcoinSvMainNet_closure: function Bip49Conf_bitcoinSvMainNet_closure() {
    },
    Bip49Conf_bitcoinSvTestNet_closure: function Bip49Conf_bitcoinSvTestNet_closure() {
    },
    Bip49Conf_bitcoinCashMainNet_closure: function Bip49Conf_bitcoinCashMainNet_closure() {
    },
    Bip49Conf_bitcoinCashTestNet_closure: function Bip49Conf_bitcoinCashTestNet_closure() {
    },
    Bip49Conf_bitcoinCashSlpMainNet_closure: function Bip49Conf_bitcoinCashSlpMainNet_closure() {
    },
    Bip49Conf_bitcoinCashSlpTestNet_closure: function Bip49Conf_bitcoinCashSlpTestNet_closure() {
    },
    Bip49Conf_ecashMainNet_closure: function Bip49Conf_ecashMainNet_closure() {
    },
    Bip49Conf_ecashTestNet_closure: function Bip49Conf_ecashTestNet_closure() {
    },
    Bip49Conf_pepeMainnet_closure: function Bip49Conf_pepeMainnet_closure() {
    },
    Bip49Conf_pepeTestnet_closure: function Bip49Conf_pepeTestnet_closure() {
    },
    Bip49Conf_electraProtocolMainNet_closure: function Bip49Conf_electraProtocolMainNet_closure() {
    },
    Bip49Conf_electraProtocolTestNet_closure: function Bip49Conf_electraProtocolTestNet_closure() {
    },
    Bip84Coins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$Bip84Coins__coinToConf();
        t1 = new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")).firstWhere$1(0, new A.Bip84Coins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    Bip84Coins: function Bip84Coins(t0) {
      this.name = t0;
    },
    Bip84Coins_fromName_closure: function Bip84Coins_fromName_closure(t0) {
      this.name = t0;
    },
    Bip84Conf_bitcoinMainNet_closure: function Bip84Conf_bitcoinMainNet_closure() {
    },
    Bip84Conf_bitcoinTestNet_closure: function Bip84Conf_bitcoinTestNet_closure() {
    },
    Bip84Conf_litecoinMainNet_closure: function Bip84Conf_litecoinMainNet_closure() {
    },
    Bip84Conf_litecoinTestNet_closure: function Bip84Conf_litecoinTestNet_closure() {
    },
    Bip84Conf_electraProtocolMainNet_closure: function Bip84Conf_electraProtocolMainNet_closure() {
    },
    Bip84Conf_electraProtocolTestNet_closure: function Bip84Conf_electraProtocolTestNet_closure() {
    },
    Bip86Coins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$Bip86Coins__coinToConf();
        t1 = new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")).firstWhere$1(0, new A.Bip86Coins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    Bip86Coins: function Bip86Coins(t0) {
      this.name = t0;
    },
    Bip86Coins_fromName_closure: function Bip86Coins_fromName_closure(t0) {
      this.name = t0;
    },
    Bip86Conf_bitcoinMainNet_closure: function Bip86Conf_bitcoinMainNet_closure() {
    },
    Bip86Conf_bitcoinTestNet_closure: function Bip86Conf_bitcoinTestNet_closure() {
    },
    BipBitcoinCashConf$(addrParams, addressEncoder, chainType, coinIdx, coinNames, defPath, keyNetVer, type, wifNetVer) {
      return new A.BipBitcoinCashConf(chainType, keyNetVer, wifNetVer, addrParams, type);
    },
    BipBitcoinCashConf: function BipBitcoinCashConf(t0, t1, t2, t3, t4) {
      var _ = this;
      _.chainType = t0;
      _.keyNetVer = t1;
      _.wifNetVer = t2;
      _.addrParams = t3;
      _.type = t4;
    },
    BipCoinConfig$(addrParams, addressEncoder, chainType, coinIdx, coinNames, defPath, keyNetVer, type, wifNetVer) {
      return new A.BipCoinConfig(chainType, keyNetVer, wifNetVer, addrParams, type);
    },
    BipCoinConfig: function BipCoinConfig(t0, t1, t2, t3, t4) {
      var _ = this;
      _.chainType = t0;
      _.keyNetVer = t1;
      _.wifNetVer = t2;
      _.addrParams = t3;
      _.type = t4;
    },
    BipLitecoinConf$(addrParams, addressEncoder, altKeyNetVer, chainType, coinIdx, coinNames, defPath, keyNetVer, type, wifNetVer) {
      return new A.BipLitecoinConf(altKeyNetVer, chainType, keyNetVer, wifNetVer, addrParams, type);
    },
    BipLitecoinConf: function BipLitecoinConf(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.altKeyNetVer = t0;
      _.chainType = t1;
      _.keyNetVer = t2;
      _.wifNetVer = t3;
      _.addrParams = t4;
      _.type = t5;
    },
    ChainType: function ChainType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    CryptoCoins_getCoin($name, proposal) {
      switch (proposal) {
        case B.BipProposal_bip44:
        case B.BipProposal_bip49:
        case B.BipProposal_bip84:
        case B.BipProposal_bip86:
          return A.BipCoins_fromName($name, type$.BipProposal._as(proposal));
        case B.C_CipProposal:
          return A.Cip1852Coins_fromName($name);
        case B.C_SubstratePropoosal:
          return A.SubstrateCoins_fromName($name);
        case B.C_MoneroProposal:
          return A.MoneroCoins_fromName($name);
        default:
          return null;
      }
    },
    CoinProposal_fromName($name) {
      switch ($name) {
        case "cip1852":
          return B.C_CipProposal;
        case "substrate":
          return B.C_SubstratePropoosal;
        case "monero":
          return B.C_MoneroProposal;
        default:
          return B.JSArray_methods.firstWhere$2$orElse(B.List_Tre, new A.CoinProposal_fromName_closure($name), new A.CoinProposal_fromName_closure0($name));
      }
    },
    CoinProposal_fromName_closure: function CoinProposal_fromName_closure(t0) {
      this.name = t0;
    },
    CoinProposal_fromName_closure0: function CoinProposal_fromName_closure0(t0) {
      this.name = t0;
    },
    PubKeyModes_fromValue(value, defaultValue) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_chs, new A.PubKeyModes_fromValue_closure(value), new A.PubKeyModes_fromValue_closure0(defaultValue, value));
    },
    PubKeyModes: function PubKeyModes(t0, t1, t2) {
      this.value = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    PubKeyModes_fromValue_closure: function PubKeyModes_fromValue_closure(t0) {
      this.value = t0;
    },
    PubKeyModes_fromValue_closure0: function PubKeyModes_fromValue_closure0(t0, t1) {
      this.defaultValue = t0;
      this.value = t1;
    },
    CardanoByronLegacyBip32$_(keyData, keyNetVer, privKey, pubKey) {
      var t1 = new A.CardanoByronLegacyBip32();
      t1.Bip32Base$4$keyData$keyNetVer$privKey$pubKey(keyData, keyNetVer, privKey, pubKey);
      return t1;
    },
    CardanoByronLegacyBip32: function CardanoByronLegacyBip32() {
      this.__Bip32Base__pubKey_A = this.__Bip32Base__privKey_A = $;
    },
    CardanoByronLegacyKeyDerivator: function CardanoByronLegacyKeyDerivator() {
    },
    CardanoByronLegacyKeyDerivator_newPrivateKeyLeftPart_closure: function CardanoByronLegacyKeyDerivator_newPrivateKeyLeftPart_closure() {
    },
    CardanoByronLegacyKeyDerivator_newPublicKeyPoint_closure: function CardanoByronLegacyKeyDerivator_newPublicKeyPoint_closure() {
    },
    CardanoByronLegacyMstKeyGenerator: function CardanoByronLegacyMstKeyGenerator() {
    },
    CardanoIcarusBip32$_(keyData, keyNetVer, privKey, pubKey) {
      var t1 = new A.CardanoIcarusBip32();
      t1.Bip32Base$4$keyData$keyNetVer$privKey$pubKey(keyData, keyNetVer, privKey, pubKey);
      return t1;
    },
    CardanoIcarusBip32: function CardanoIcarusBip32() {
      this.__Bip32Base__pubKey_A = this.__Bip32Base__privKey_A = $;
    },
    CardanoIcarusMstKeyGenerator: function CardanoIcarusMstKeyGenerator() {
    },
    CardanoIcarusMstKeyGenerator_generateFromSeed_closure: function CardanoIcarusMstKeyGenerator_generateFromSeed_closure() {
    },
    CardanoIcarusMstKeyGenerator_generateFromSeed__closure: function CardanoIcarusMstKeyGenerator_generateFromSeed__closure() {
    },
    Cip1852Coins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$Cip1852Coins__coinToConf();
        t1 = new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")).firstWhere$1(0, new A.Cip1852Coins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    Cip1852Coins: function Cip1852Coins(t0) {
      this.name = t0;
    },
    Cip1852Coins_fromName_closure: function Cip1852Coins_fromName_closure(t0) {
      this.name = t0;
    },
    CipProposal: function CipProposal() {
    },
    Cip1852Conf_cardanoIcarusMainNet_closure: function Cip1852Conf_cardanoIcarusMainNet_closure() {
    },
    Cip1852Conf_cardanoIcarusTestNet_closure: function Cip1852Conf_cardanoIcarusTestNet_closure() {
    },
    Cip1852Conf_cardanoLedgerMainNet_closure: function Cip1852Conf_cardanoLedgerMainNet_closure() {
    },
    Cip1852Conf_cardanoLedgerTestNet_closure: function Cip1852Conf_cardanoLedgerTestNet_closure() {
    },
    CardanoByronLegacySeedGenerator: function CardanoByronLegacySeedGenerator() {
      this.__CardanoByronLegacySeedGenerator__seedBytes_F = $;
    },
    CardanoIcarusSeedGenerator: function CardanoIcarusSeedGenerator(t0) {
      this._entropyBytes = t0;
    },
    CoinConf: function CoinConf(t0, t1) {
      this.coinName = t0;
      this.params = t1;
    },
    CoinParams: function CoinParams(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20) {
      var _ = this;
      _.p2pkhNetVer = t0;
      _.p2shNetVer = t1;
      _.p2wpkhHrp = t2;
      _.p2trHrp = t3;
      _.wifNetVer = t4;
      _.addrSs58Format = t5;
      _.addrHrp = t6;
      _.addrPrefix = t7;
      _.p2pkhStdHrp = t8;
      _.p2pkhStdNetVer = t9;
      _.p2pkhLegacyNetVer = t10;
      _.p2shStdHrp = t11;
      _.p2shStdNetVer = t12;
      _.p2shLegacyNetVer = t13;
      _.p2pkhDeprNetVer = t14;
      _.p2shDeprNetVer = t15;
      _.addrNetVer = t16;
      _.addrIntNetVer = t17;
      _.subaddrNetVer = t18;
      _.addrVer = t19;
      _.workchain = t20;
    },
    CoinNames: function CoinNames(t0) {
      this.name = t0;
    },
    EllipticCurveTypes: function EllipticCurveTypes(t0) {
      this.name = t0;
    },
    Ed25519Blake2bPublicKey_Ed25519Blake2bPublicKey$fromBytes(keyBytes) {
      var t1 = J.getInterceptor$asx(keyBytes);
      if (t1.get$length(keyBytes) === 33 && J.$eq$(t1.$index(keyBytes, 0), 0))
        keyBytes = t1.sublist$1(keyBytes, 1);
      t1 = $.$get$Curves_generatorED25519();
      return new A.Ed25519Blake2bPublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint(t1, A.EDPoint_EDPoint$fromBytes(t1.curve, keyBytes)));
    },
    Ed25519Blake2bPublicKey_isValidBytes(keyBytes) {
      var exception;
      try {
        A.Ed25519Blake2bPublicKey_Ed25519Blake2bPublicKey$fromBytes(keyBytes);
        return true;
      } catch (exception) {
      }
      return false;
    },
    Ed25519Blake2bPrivateKey_Ed25519Blake2bPrivateKey$fromBytes(keyBytes) {
      if (J.get$length$asx(keyBytes) !== 32)
        throw A.wrapException(B.ArgumentException_4AN);
      return new A.Ed25519Blake2bPrivateKey(A.EDDSAPrivateKey_EDDSAPrivateKey($.$get$Curves_generatorED25519(), keyBytes, new A.Ed25519Blake2bPrivateKey_Ed25519Blake2bPrivateKey$fromBytes_closure()));
    },
    Ed25519Blake2bPrivateKey_isValidBytes(keyBytes) {
      var exception;
      try {
        A.Ed25519Blake2bPrivateKey_Ed25519Blake2bPrivateKey$fromBytes(keyBytes);
        return true;
      } catch (exception) {
      }
      return false;
    },
    Ed25519Blake2bPublicKey: function Ed25519Blake2bPublicKey(t0) {
      this._publicKey = t0;
    },
    Ed25519Blake2bPrivateKey: function Ed25519Blake2bPrivateKey(t0) {
      this._privateKey = t0;
    },
    Ed25519Blake2bPrivateKey_Ed25519Blake2bPrivateKey$fromBytes_closure: function Ed25519Blake2bPrivateKey_Ed25519Blake2bPrivateKey$fromBytes_closure() {
    },
    Ed25519PublicKey_Ed25519PublicKey$fromBytes(keyBytes) {
      var prefix,
        t1 = J.getInterceptor$asx(keyBytes);
      if (t1.get$length(keyBytes) === 33) {
        prefix = t1.sublist$2(keyBytes, 0, 1);
        if (A.BytesUtils_bytesEqual(prefix, B.List_0) || A.BytesUtils_bytesEqual(prefix, B.List_237))
          keyBytes = t1.sublist$1(keyBytes, 1);
      }
      t1 = $.$get$Curves_generatorED25519();
      return new A.Ed25519PublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint(t1, A.EDPoint_EDPoint$fromBytes(t1.curve, keyBytes)));
    },
    Ed25519PublicKey_isValidBytes(keyBytes) {
      var exception;
      try {
        A.Ed25519PublicKey_Ed25519PublicKey$fromBytes(keyBytes);
        return true;
      } catch (exception) {
      }
      return false;
    },
    Ed25519PrivateKey_Ed25519PrivateKey$fromBytes(keyBytes) {
      if (J.get$length$asx(keyBytes) !== 32)
        throw A.wrapException(B.ArgumentException_4AN);
      return new A.Ed25519PrivateKey(A.EDDSAPrivateKey_EDDSAPrivateKey($.$get$Curves_generatorED25519(), keyBytes, new A.Ed25519PrivateKey_Ed25519PrivateKey$fromBytes_closure()));
    },
    Ed25519PrivateKey_isValidBytes(keyBytes) {
      var exception;
      try {
        A.Ed25519PrivateKey_Ed25519PrivateKey$fromBytes(keyBytes);
        return true;
      } catch (exception) {
      }
      return false;
    },
    Ed25519PublicKey: function Ed25519PublicKey(t0) {
      this._ed25519_keys$_publicKey = t0;
    },
    Ed25519PrivateKey: function Ed25519PrivateKey(t0) {
      this._ed25519_keys$_privateKey = t0;
    },
    Ed25519PrivateKey_Ed25519PrivateKey$fromBytes_closure: function Ed25519PrivateKey_Ed25519PrivateKey$fromBytes_closure() {
    },
    Ed25519KholawPublicKey_Ed25519KholawPublicKey$fromBytes(keyBytes) {
      var t1 = J.getInterceptor$asx(keyBytes);
      if (t1.get$length(keyBytes) === 33 && J.$eq$(t1.$index(keyBytes, 0), 0))
        keyBytes = t1.sublist$1(keyBytes, 1);
      t1 = $.$get$Curves_generatorED25519();
      return new A.Ed25519KholawPublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint(t1, A.EDPoint_EDPoint$fromBytes(t1.curve, keyBytes)));
    },
    Ed25519KholawPublicKey_isValidBytes(keyBytes) {
      var exception;
      try {
        A.Ed25519KholawPublicKey_Ed25519KholawPublicKey$fromBytes(keyBytes);
        return true;
      } catch (exception) {
      }
      return false;
    },
    Ed25519KholawPrivateKey_Ed25519KholawPrivateKey$fromBytes(keyBytes) {
      var eddsaPrivateKey,
        t1 = J.getInterceptor$asx(keyBytes);
      if (t1.get$length(keyBytes) !== 64)
        throw A.wrapException(B.ArgumentException_4AN);
      eddsaPrivateKey = A.EDDSAPrivateKey_EDDSAPrivateKey$fromKhalow($.$get$Curves_generatorED25519(), keyBytes);
      return new A.Ed25519KholawPrivateKey(t1.sublist$1(keyBytes, 32), eddsaPrivateKey);
    },
    Ed25519KholawPrivateKey_isValidBytes(keyBytes) {
      var exception;
      try {
        A.Ed25519KholawPrivateKey_Ed25519KholawPrivateKey$fromBytes(keyBytes);
        return true;
      } catch (exception) {
      }
      return false;
    },
    Ed25519KholawPublicKey: function Ed25519KholawPublicKey(t0) {
      this._ed25519_kholaw_keys$_publicKey = t0;
    },
    Ed25519KholawPrivateKey: function Ed25519KholawPrivateKey(t0, t1) {
      this._extendKey = t0;
      this._ed25519_kholaw_keys$_privateKey = t1;
    },
    MoneroPublicKey_MoneroPublicKey$fromBytes(keyBytes) {
      var t1 = J.getInterceptor$asx(keyBytes);
      if (t1.get$length(keyBytes) === 33)
        keyBytes = t1.sublist$1(keyBytes, 1);
      t1 = $.$get$Curves_generatorED25519();
      return new A.MoneroPublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint(t1, A.EDPoint_EDPoint$fromBytes(t1.curve, keyBytes)));
    },
    MoneroPrivateKey_MoneroPrivateKey$fromBytes(keyBytes) {
      if (J.get$length$asx(keyBytes) !== 32)
        throw A.wrapException(B.ArgumentException_4AN);
      if (A.CryptoOps_scCheck(keyBytes) !== 0)
        throw A.wrapException(B.ArgumentException_a1W);
      return new A.MoneroPrivateKey(A.EDDSAPrivateKey_EDDSAPrivateKey$fromKhalow($.$get$Curves_generatorED25519(), keyBytes));
    },
    MoneroPrivateKey_isValidBytes(keyBytes) {
      var exception;
      try {
        A.MoneroPrivateKey_MoneroPrivateKey$fromBytes(keyBytes);
        return true;
      } catch (exception) {
      }
      return false;
    },
    MoneroPublicKey: function MoneroPublicKey(t0) {
      this.publicKey = t0;
    },
    MoneroPrivateKey: function MoneroPrivateKey(t0) {
      this.privateKey = t0;
    },
    Nist256p1PublicKey_Nist256p1PublicKey$fromBytes(keyBytes) {
      var point = A.ProjectiveECCPoint_ProjectiveECCPoint$fromBytes($.$get$Curves_curve256(), keyBytes, null);
      return new A.Nist256p1PublicKey(A.ECDSAPublicKey_ECDSAPublicKey($.$get$Curves_generator256(), point));
    },
    Nist256p1PublicKey_isValidBytes(keyBytes) {
      var exception;
      try {
        A.Nist256p1PublicKey_Nist256p1PublicKey$fromBytes(keyBytes);
        return true;
      } catch (exception) {
      }
      return false;
    },
    Nist256p1PrivateKey_isValidBytes(keyBytes) {
      var exception;
      try {
        A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(keyBytes, $.$get$Curves_generator256());
        return true;
      } catch (exception) {
        return false;
      }
    },
    Nist256p1PublicKey: function Nist256p1PublicKey(t0) {
      this.publicKey = t0;
    },
    Nist256p1PrivateKey: function Nist256p1PrivateKey(t0) {
      this.privateKey = t0;
    },
    Secp256k1PublicKeyEcdsa_Secp256k1PublicKeyEcdsa$fromBytes(keyBytes) {
      var point = A.ProjectiveECCPoint_ProjectiveECCPoint$fromBytes($.$get$Curves_curveSecp256k1(), keyBytes, null);
      return new A.Secp256k1PublicKeyEcdsa(A.ECDSAPublicKey_ECDSAPublicKey($.$get$Curves_generatorSecp256k1(), point));
    },
    Secp256k1PublicKeyEcdsa_isValidBytes(keyBytes) {
      var exception;
      try {
        A.Secp256k1PublicKeyEcdsa_Secp256k1PublicKeyEcdsa$fromBytes(keyBytes);
        return true;
      } catch (exception) {
        return false;
      }
    },
    Secp256k1PrivateKeyEcdsa_isValidBytes(keyBytes) {
      var exception;
      try {
        A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(keyBytes, $.$get$Curves_generatorSecp256k1());
        return true;
      } catch (exception) {
        return false;
      }
    },
    Secp256k1PublicKeyEcdsa: function Secp256k1PublicKeyEcdsa(t0) {
      this.publicKey = t0;
    },
    Secp256k1PrivateKeyEcdsa: function Secp256k1PrivateKeyEcdsa(t0) {
      this.privateKey = t0;
    },
    Sr25519PublicKey_isValidBytes(keyBytes) {
      var exception;
      try {
        A.SchnorrkelPublicKey_SchnorrkelPublicKey(keyBytes);
        return true;
      } catch (exception) {
        return false;
      }
    },
    Sr25519PrivateKey_isValidBytes(keyBytes) {
      var exception;
      try {
        A.SchnorrkelSecretKey_SchnorrkelSecretKey$fromBytes(keyBytes);
        return true;
      } catch (exception) {
        return false;
      }
    },
    Sr25519PublicKey: function Sr25519PublicKey(t0) {
      this.publicKey = t0;
    },
    Sr25519PrivateKey: function Sr25519PrivateKey(t0) {
      this.secretKey = t0;
    },
    EntropyGenerator: function EntropyGenerator() {
    },
    Mnemonic__normalize(mnemonic) {
      var t1 = A.RegExp_RegExp("\\s+", true),
        t2 = type$.WhereIterable_String;
      return A.List_List$unmodifiable(A.List_List$of(new A.WhereIterable(A._setArrayType(A.stringReplaceAllUnchecked(mnemonic, t1, " ").split(" "), type$.JSArray_String), type$.bool_Function_String._as(new A.Mnemonic__normalize_closure()), t2), true, t2._eval$1("Iterable.E")), type$.String);
    },
    Mnemonic: function Mnemonic(t0) {
      this._mnemonicList = t0;
    },
    Mnemonic__normalize_closure: function Mnemonic__normalize_closure() {
    },
    MnemonicDecoderBase: function MnemonicDecoderBase() {
    },
    MnemonicEncoderBase: function MnemonicEncoderBase() {
    },
    MnemonicException$(message) {
      return new A.MnemonicException(message, null);
    },
    MnemonicException: function MnemonicException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    MnemonicWordsList: function MnemonicWordsList(t0) {
      this._idxToWords = t0;
    },
    MnemonicWordsListGetterBase: function MnemonicWordsListGetterBase() {
    },
    MnemonicWordsListFinderBase: function MnemonicWordsListFinderBase() {
    },
    MnemonicValidator: function MnemonicValidator() {
    },
    MoneroCoinConf_MoneroCoinConf$fromCoinConf(chainType, coinConf) {
      var t1 = coinConf.params,
        t2 = t1.addrNetVer;
      t2.toString;
      t1.addrIntNetVer.toString;
      t1 = t1.subaddrNetVer;
      t1.toString;
      return new A.MoneroCoinConf(t2, t1, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.List_int));
    },
    MoneroCoinConf: function MoneroCoinConf(t0, t1, t2) {
      this.addrNetVer = t0;
      this.subaddrNetVer = t1;
      this.addrParams = t2;
    },
    MoneroCoins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$MoneroCoins__coinToConf();
        t1 = new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>")).firstWhere$1(0, new A.MoneroCoins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    MoneroCoins: function MoneroCoins(t0) {
      this.name = t0;
    },
    MoneroCoins_fromName_closure: function MoneroCoins_fromName_closure(t0) {
      this.name = t0;
    },
    MoneroProposal: function MoneroProposal() {
    },
    MoneroEntropyGenerator: function MoneroEntropyGenerator(t0) {
      this.bitlen = t0;
    },
    MoneroWordsNum_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_iYm, new A.MoneroWordsNum_fromValue_closure(value), new A.MoneroWordsNum_fromValue_closure0());
    },
    MoneroLanguages_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_ENd, new A.MoneroLanguages_fromValue_closure(value), new A.MoneroLanguages_fromValue_closure0(value));
    },
    MoneroWordsNum: function MoneroWordsNum(t0) {
      this.value = t0;
    },
    MoneroWordsNum_fromValue_closure: function MoneroWordsNum_fromValue_closure(t0) {
      this.value = t0;
    },
    MoneroWordsNum_fromValue_closure0: function MoneroWordsNum_fromValue_closure0() {
    },
    MoneroLanguages: function MoneroLanguages(t0) {
      this.name = t0;
    },
    MoneroLanguages_fromValue_closure: function MoneroLanguages_fromValue_closure(t0) {
      this.value = t0;
    },
    MoneroLanguages_fromValue_closure0: function MoneroLanguages_fromValue_closure0(t0) {
      this.value = t0;
    },
    MoneroMnemonic: function MoneroMnemonic(t0) {
      this._mnemonicList = t0;
    },
    MoneroMnemonicDecoder$(language) {
      return new A.MoneroMnemonicDecoder(language, null, new A.MoneroWordsListFinder());
    },
    MoneroMnemonicDecoder: function MoneroMnemonicDecoder(t0, t1, t2) {
      this.language = t0;
      this.wordsList = t1;
      this.wordsListFinder = t2;
    },
    MoneroMnemonicDecoder_decode_closure: function MoneroMnemonicDecoder_decode_closure(t0) {
      this.wcount = t0;
    },
    MoneroMnemonicDecoder_validateCheckSum_closure: function MoneroMnemonicDecoder_validateCheckSum_closure(t0) {
      this.words = t0;
    },
    MoneroMnemonicEncoderBase: function MoneroMnemonicEncoderBase() {
    },
    MoneroMnemonicNoChecksumEncoder: function MoneroMnemonicNoChecksumEncoder(t0, t1) {
      this.language = t0;
      this.wordsList = t1;
    },
    MoneroMnemonicWithChecksumEncoder: function MoneroMnemonicWithChecksumEncoder(t0, t1) {
      this.language = t0;
      this.wordsList = t1;
    },
    MoneroMnemonicEncoder: function MoneroMnemonicEncoder(t0, t1) {
      this.nochecksumEncoder = t0;
      this.withChecksumEncoder = t1;
    },
    MoneroMnemonicGenerator: function MoneroMnemonicGenerator(t0) {
      this.encoder = t0;
    },
    MoneroMnemonicUtils_computeChecksum(mnemonic, language) {
      var t2,
        t1 = B.Map_ENTq5.$index(0, language);
      t1.toString;
      t2 = A._arrayInstanceType(mnemonic);
      return mnemonic[B.JSInt_methods.$mod(A.Crc32_quickIntDigest(A.StringUtils_encode(new A.MappedListIterable(mnemonic, t2._eval$1("String(1)")._as(new A.MoneroMnemonicUtils_computeChecksum_closure(t1)), t2._eval$1("MappedListIterable<1,String>")).join$0(0), B.StringEncoding_1)), mnemonic.length)];
    },
    MoneroWordsListGetter: function MoneroWordsListGetter() {
    },
    MoneroWordsListFinder: function MoneroWordsListFinder() {
    },
    MoneroMnemonicUtils_computeChecksum_closure: function MoneroMnemonicUtils_computeChecksum_closure(t0) {
      this.uniqueLen = t0;
    },
    MoneroMnemonicValidator: function MoneroMnemonicValidator(t0) {
      this.decoder = t0;
    },
    MoneroSeedGenerator: function MoneroSeedGenerator(t0) {
      this._monero_seed_generator$_entropyBytes = t0;
    },
    MoneroAccount_MoneroAccount$_(coinType, privKey, pubKey) {
      var mPrivSkey, t1, mPrivVkey, mPubSkey, mPubVkey;
      if (pubKey == null) {
        mPrivSkey = A.MoneroPrivateKey_MoneroPrivateKey$fromBytes(privKey);
        t1 = mPrivSkey.privateKey;
        mPrivVkey = A.MoneroPrivateKey_MoneroPrivateKey$fromBytes(A.Ed25519Utils_scalarReduce(A.Keccack_hash(A.List_List$from(t1.key, true, type$.int), 32)));
        mPubSkey = new A.MoneroPublicKey(t1.publicKey);
        mPubVkey = new A.MoneroPublicKey(mPrivVkey.privateKey.publicKey);
        t1 = $.$get$MoneroCoins__coinToConf().$index(0, coinType);
        t1.toString;
        return new A.MoneroAccount(mPrivSkey, mPrivVkey, mPubSkey, mPubVkey, t1, new A.MoneroSubaddress(mPrivVkey, mPubSkey, mPubVkey));
      }
      mPrivVkey = A.MoneroPrivateKey_MoneroPrivateKey$fromBytes(privKey);
      mPubSkey = A.MoneroPublicKey_MoneroPublicKey$fromBytes(pubKey);
      mPubVkey = new A.MoneroPublicKey(mPrivVkey.privateKey.publicKey);
      t1 = $.$get$MoneroCoins__coinToConf().$index(0, coinType);
      t1.toString;
      return new A.MoneroAccount(null, mPrivVkey, mPubSkey, mPubVkey, t1, new A.MoneroSubaddress(mPrivVkey, mPubSkey, mPubVkey));
    },
    MoneroAccount_MoneroAccount$fromSeed(seedBytes) {
      return A.MoneroAccount_MoneroAccount$_(B.MoneroCoins_moneroMainnet, A.Ed25519Utils_scalarReduce(seedBytes.length === 32 ? seedBytes : A.Keccack_hash(seedBytes, 32)), null);
    },
    MoneroAccount_MoneroAccount$fromBip44PrivateKey(privKey) {
      return A.MoneroAccount_MoneroAccount$_(B.MoneroCoins_moneroMainnet, A.MoneroPrivateKey_MoneroPrivateKey$fromBytes(A.Ed25519Utils_scalarReduce(A.Keccack_hash(A.IPrivateKey_IPrivateKey$fromBytes(privKey, B.EllipticCurveTypes_ed25519).get$raw(), 32))).privateKey.key, null);
    },
    MoneroAccount: function MoneroAccount(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.privSkey = t0;
      _.privVkey = t1;
      _.pubSkey = t2;
      _.pubVkey = t3;
      _.coinConf = t4;
      _.scubaddr = t5;
    },
    MoneroKeyError: function MoneroKeyError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    MoneroComputeKey: function MoneroComputeKey(t0, t1, t2) {
      this.pubSKey = t0;
      this.pubVKey = t1;
      this.privateKey = t2;
    },
    MoneroSubaddress: function MoneroSubaddress(t0, t1, t2) {
      this.privVKey = t0;
      this.pubSKey = t1;
      this.pubVKey = t2;
    },
    SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(addressEncode, chainType, coinConf, type) {
      coinConf.params.addrSs58Format.toString;
      return new A.SubstrateCoinConf(type);
    },
    SubstrateCoinConf: function SubstrateCoinConf(t0) {
      this.type = t0;
    },
    SubstrateCoins_fromName($name) {
      var t1, exception;
      try {
        t1 = B.JSArray_methods.firstWhere$1(B.List_2lW, new A.SubstrateCoins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    SubstrateCoins: function SubstrateCoins(t0) {
      this.name = t0;
    },
    SubstrateCoins_fromName_closure: function SubstrateCoins_fromName_closure(t0) {
      this.name = t0;
    },
    SubstratePropoosal: function SubstratePropoosal() {
    },
    SubstrateConf_acalaEd25519_closure: function SubstrateConf_acalaEd25519_closure() {
    },
    SubstrateConf_acalaSecp256k1_closure: function SubstrateConf_acalaSecp256k1_closure() {
    },
    SubstrateConf_acalaSr25519_closure: function SubstrateConf_acalaSr25519_closure() {
    },
    SubstrateConf_bifrostEd25519_closure: function SubstrateConf_bifrostEd25519_closure() {
    },
    SubstrateConf_bifrostSecp256k1_closure: function SubstrateConf_bifrostSecp256k1_closure() {
    },
    SubstrateConf_bifrostSr25519_closure: function SubstrateConf_bifrostSr25519_closure() {
    },
    SubstrateConf_chainXEd25519_closure: function SubstrateConf_chainXEd25519_closure() {
    },
    SubstrateConf_chainXSecp256k1_closure: function SubstrateConf_chainXSecp256k1_closure() {
    },
    SubstrateConf_chainXSr25519_closure: function SubstrateConf_chainXSr25519_closure() {
    },
    SubstrateConf_edgewareEd25519_closure: function SubstrateConf_edgewareEd25519_closure() {
    },
    SubstrateConf_edgewareSecp256k1_closure: function SubstrateConf_edgewareSecp256k1_closure() {
    },
    SubstrateConf_edgewareSr25519_closure: function SubstrateConf_edgewareSr25519_closure() {
    },
    SubstrateConf_genericEd25519_closure: function SubstrateConf_genericEd25519_closure() {
    },
    SubstrateConf_genericSecp256k1_closure: function SubstrateConf_genericSecp256k1_closure() {
    },
    SubstrateConf_genericSr25519_closure: function SubstrateConf_genericSr25519_closure() {
    },
    SubstrateConf_karuraEd25519_closure: function SubstrateConf_karuraEd25519_closure() {
    },
    SubstrateConf_karuraSecp256k1_closure: function SubstrateConf_karuraSecp256k1_closure() {
    },
    SubstrateConf_karuraSr25519_closure: function SubstrateConf_karuraSr25519_closure() {
    },
    SubstrateConf_kusamaEd25519_closure: function SubstrateConf_kusamaEd25519_closure() {
    },
    SubstrateConf_kusamaSecp256k1_closure: function SubstrateConf_kusamaSecp256k1_closure() {
    },
    SubstrateConf_kusamaSr25519_closure: function SubstrateConf_kusamaSr25519_closure() {
    },
    SubstrateConf_moonbeamEd25519_closure: function SubstrateConf_moonbeamEd25519_closure() {
    },
    SubstrateConf_moonbeamSecp256k1_closure: function SubstrateConf_moonbeamSecp256k1_closure() {
    },
    SubstrateConf_moonbeamSr25519_closure: function SubstrateConf_moonbeamSr25519_closure() {
    },
    SubstrateConf_moonriverEd25519_closure: function SubstrateConf_moonriverEd25519_closure() {
    },
    SubstrateConf_moonriverSecp256k1_closure: function SubstrateConf_moonriverSecp256k1_closure() {
    },
    SubstrateConf_moonriverSr25519_closure: function SubstrateConf_moonriverSr25519_closure() {
    },
    SubstrateConf_phalaEd25519_closure: function SubstrateConf_phalaEd25519_closure() {
    },
    SubstrateConf_phalaSecp256k1_closure: function SubstrateConf_phalaSecp256k1_closure() {
    },
    SubstrateConf_phalaSr25519_closure: function SubstrateConf_phalaSr25519_closure() {
    },
    SubstrateConf_plasmEd25519_closure: function SubstrateConf_plasmEd25519_closure() {
    },
    SubstrateConf_plasmSecp256k1_closure: function SubstrateConf_plasmSecp256k1_closure() {
    },
    SubstrateConf_plasmSr25519_closure: function SubstrateConf_plasmSr25519_closure() {
    },
    SubstrateConf_polkadotEd25519_closure: function SubstrateConf_polkadotEd25519_closure() {
    },
    SubstrateConf_polkadotSecp256k1_closure: function SubstrateConf_polkadotSecp256k1_closure() {
    },
    SubstrateConf_polkadotSr25519_closure: function SubstrateConf_polkadotSr25519_closure() {
    },
    SubstrateConf_soraEd25519_closure: function SubstrateConf_soraEd25519_closure() {
    },
    SubstrateConf_soraSecp256k1_closure: function SubstrateConf_soraSecp256k1_closure() {
    },
    SubstrateConf_soraSr25519_closure: function SubstrateConf_soraSr25519_closure() {
    },
    SubstrateConf_stafiEd25519_closure: function SubstrateConf_stafiEd25519_closure() {
    },
    SubstrateConf_stafiSecp256k1_closure: function SubstrateConf_stafiSecp256k1_closure() {
    },
    SubstrateConf_stafiSr25519_closure: function SubstrateConf_stafiSr25519_closure() {
    },
    _SubstrateUtils_getSecretKey(seedBytes, curve) {
      var seed;
      if (seedBytes.length < 32)
        throw A.wrapException(B.ArgumentException_06c);
      seed = B.JSArray_methods.sublist$2(seedBytes, 0, 32);
      if (curve === B.EllipticCurveTypes_sr25519)
        return A.SchnorrkelMiniSecretKey_SchnorrkelMiniSecretKey$fromBytes(seed).toSecretKey$0().toBytes$0();
      return seed;
    },
    Substrate: function Substrate(t0, t1, t2, t3) {
      var _ = this;
      _._priveKey = t0;
      _.publicKey = t1;
      _.path = t2;
      _.coinConf = t3;
    },
    SubstratePathError$(message) {
      return new A.SubstratePathError(message, null);
    },
    SubstrateKeyError: function SubstrateKeyError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    SubstratePathError: function SubstratePathError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    SubstratePrvKey__keyFromBytes(keyBytes, curve) {
      var t1, exception;
      try {
        t1 = A.IPrivateKey_IPrivateKey$fromBytes(keyBytes, curve);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.SubstrateKeyError_2zb);
      }
    },
    SubstratePubKey__keyFromBytes(keyBytes, curve) {
      var t1, exception;
      try {
        t1 = A.IPublicKey_IPublicKey$fromBytes(keyBytes, curve);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.SubstrateKeyError_tkC);
      }
    },
    SubstratePrvKey: function SubstratePrvKey(t0, t1) {
      this.privKey = t0;
      this.coinConf = t1;
    },
    SubstratePubKey: function SubstratePubKey(t0, t1) {
      this.pubKey = t0;
      this.coinConf = t1;
    },
    SubstratePathParser_parse(path) {
      var t1, t2, paths;
      if (path.length !== 0 && !B.JSString_methods.startsWith$1(path, "/"))
        throw A.wrapException(A.SubstratePathError$("Invalid path (" + path + ")"));
      t1 = A.RegExp_RegExp("\\/+[^/]+", true).allMatches$1(0, path);
      t2 = A._instanceType(t1);
      t2 = A.MappedIterable_MappedIterable(t1, t2._eval$1("String(Iterable.E)")._as(new A.SubstratePathParser_parse_closure()), t2._eval$1("Iterable.E"), type$.String);
      paths = A.List_List$of(t2, true, A._instanceType(t2)._eval$1("Iterable.E"));
      t2 = A._arrayInstanceType(paths);
      t1 = t2._eval$1("MappedListIterable<1,SubstratePathElem>");
      return new A.SubstratePath(A.List_List$of(new A.MappedListIterable(paths, t2._eval$1("SubstratePathElem(1)")._as(new A.SubstratePathParser_parse_closure0()), t1), true, t1._eval$1("ListIterable.E")));
    },
    SubstratePathElem: function SubstratePathElem() {
      this.__SubstratePathElem_isHard_F = this.__SubstratePathElem_elem_F = $;
    },
    SubstratePath: function SubstratePath(t0) {
      this.elems = t0;
    },
    SubstratePathParser_parse_closure: function SubstratePathParser_parse_closure() {
    },
    SubstratePathParser_parse_closure0: function SubstratePathParser_parse_closure0() {
    },
    SubstrateScaleEncoderBase: function SubstrateScaleEncoderBase() {
    },
    SubstrateScaleBytesEncoder: function SubstrateScaleBytesEncoder() {
    },
    SubstrateScaleCUintEncoder: function SubstrateScaleCUintEncoder() {
    },
    SubstrateScaleUintEncoder__encodeWithBytesLength(value, bytesLen) {
      var v = A._BigIntImpl_parse(value, null),
        t1 = $.$get$_BigIntImpl_one(),
        maxVal = t1.$shl(0, bytesLen * 8).$sub(0, t1);
      if (v.compareTo$1(0, $.$get$_BigIntImpl_zero()) < 0 || v.compareTo$1(0, maxVal) > 0)
        throw A.wrapException(A.ArgumentException$("Invalid integer value (" + value + ")", null));
      return A.BigintUtils_toBytes(v, bytesLen, bytesLen >= 2 ? B.C_Endian0 : B.C_Endian);
    },
    SubstrateScaleUintEncoder: function SubstrateScaleUintEncoder() {
    },
    SubstrateScaleU8Encoder: function SubstrateScaleU8Encoder() {
    },
    SubstrateScaleU16Encoder: function SubstrateScaleU16Encoder() {
    },
    SubstrateScaleU32Encoder: function SubstrateScaleU32Encoder() {
    },
    SubstrateScaleU64Encoder: function SubstrateScaleU64Encoder() {
    },
    SubstrateScaleU128Encoder: function SubstrateScaleU128Encoder() {
    },
    SubstrateScaleU256Encoder: function SubstrateScaleU256Encoder() {
    },
    TonMnemonicEncoder: function TonMnemonicEncoder(t0) {
      this.wordsList = t0;
    },
    TonMnemonicGeneratorUtils_validateWordsNum(wordsNum) {
      if (wordsNum < 8 || wordsNum > 48)
        throw A.wrapException(B.MnemonicException_5Qm);
    },
    TonMnemonicGenerator: function TonMnemonicGenerator(t0) {
      this._ton_mnemonic_generator$_mnemonicEncoder = t0;
    },
    TonMnemonicLanguages: function TonMnemonicLanguages() {
    },
    TomMnemonicValidator: function TomMnemonicValidator() {
    },
    CborObject_CborObject$fromDynamic(value) {
      var t2, t3,
        t1 = type$.CborObject;
      if (t1._is(value))
        return value;
      else if (value == null)
        return B.C_CborNullValue;
      else if (A._isBool(value))
        return new A.CborBoleanValue(value);
      else if (A._isInt(value))
        return new A.CborIntValue(value);
      else if (typeof value == "number")
        return new A.CborFloatValue(value);
      else if (value instanceof A.DateTime)
        return new A.CborEpochFloatValue(value);
      else if (value instanceof A._BigIntImpl)
        return new A.CborBigIntValue(value);
      else if (typeof value == "string")
        return new A.CborStringValue(value);
      else if (type$.List_String._is(value))
        return new A.CborIndefiniteStringValue(A.List_List$unmodifiable(value, type$.String));
      else if (type$.List_int._is(value) && A.BytesUtils_isValidBytes(value)) {
        A.BytesUtils_validateListOfBytes(value);
        return new A.CborBytesValue(A.List_List$unmodifiable(value, type$.int));
      } else if (type$.List_List_int._is(value))
        return A.CborDynamicBytesValue$(value);
      else if (type$.Map_dynamic_dynamic._is(value)) {
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
        for (t2 = value.get$entries(), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          t3 = t2.get$current();
          t1.$indexSet(0, A.CborObject_CborObject$fromDynamic(t3.key), A.CborObject_CborObject$fromDynamic(t3.value));
        }
        return new A.CborMapValue(t1, true, type$.CborMapValue_CborObject_CborObject);
      } else if (type$.List_dynamic._is(value)) {
        t1 = J.map$1$1$ax(value, new A.CborObject_CborObject$fromDynamic_closure(), t1);
        return new A.CborListValue(A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")), true, type$.CborListValue_CborObject);
      }
      throw A.wrapException(A.CborException$("cbor encoder not found for type " + J.get$runtimeType$(value).toString$0(0), null));
    },
    CborNumeric_getCborNumericValue(val) {
      if (val instanceof A.CborIntValue)
        return A._BigIntImpl__BigIntImpl$from(val.value);
      else if (val instanceof A.CborBigIntValue)
        return val.value;
      else if (val instanceof A.CborSafeIntValue)
        return val.value;
      throw A.wrapException(B.CborException_vE5);
    },
    CborObject_CborObject$fromDynamic_closure: function CborObject_CborObject$fromDynamic_closure() {
    },
    CborException$(message, details) {
      return new A.CborException(message, details);
    },
    CborException: function CborException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    CborBase64Types: function CborBase64Types(t0) {
      this.tag = t0;
    },
    CborBaseUrlValue: function CborBaseUrlValue(t0, t1) {
      this.value = t0;
      this.type = t1;
    },
    CborBigFloatValue: function CborBigFloatValue(t0, t1) {
      this.exponent = t0;
      this.mantissa = t1;
    },
    CborBigIntValue: function CborBigIntValue(t0) {
      this.value = t0;
    },
    CborBoleanValue: function CborBoleanValue(t0) {
      this.value = t0;
    },
    CborDynamicBytesValue$(value) {
      var t1 = type$.List_int,
        t2 = J.map$1$1$ax(value, new A.CborDynamicBytesValue_closure(), t1);
      return new A.CborDynamicBytesValue(A.List_List$unmodifiable(A.List_List$of(t2, true, t2.$ti._eval$1("ListIterable.E")), t1));
    },
    CborBytesValue: function CborBytesValue(t0) {
      this.value = t0;
    },
    CborDynamicBytesValue: function CborDynamicBytesValue(t0) {
      this.value = t0;
    },
    CborDynamicBytesValue_closure: function CborDynamicBytesValue_closure() {
    },
    CborTagValue: function CborTagValue(t0, t1, t2) {
      this.tags = t0;
      this._cbor_tag$_value = t1;
      this.$ti = t2;
    },
    _CborDate: function _CborDate() {
    },
    CborStringDateValue: function CborStringDateValue(t0) {
      this.value = t0;
    },
    CborEpochFloatValue: function CborEpochFloatValue(t0) {
      this.value = t0;
    },
    CborEpochIntValue: function CborEpochIntValue(t0) {
      this.value = t0;
    },
    CborDecimalFracValue: function CborDecimalFracValue(t0, t1) {
      this.exponent = t0;
      this.mantissa = t1;
    },
    CborFloatValue: function CborFloatValue(t0) {
      this.value = t0;
      this.__CborFloatValue__decodFloat_FI = $;
    },
    CborIntValue: function CborIntValue(t0) {
      this.value = t0;
    },
    CborSafeIntValue: function CborSafeIntValue(t0) {
      this.value = t0;
    },
    CborListValue: function CborListValue(t0, t1, t2) {
      this.value = t0;
      this._isFixedLength = t1;
      this.$ti = t2;
    },
    CborMapValue: function CborMapValue(t0, t1, t2) {
      this.value = t0;
      this._map$_isFixedLength = t1;
      this.$ti = t2;
    },
    CborMimeValue: function CborMimeValue(t0) {
      this.value = t0;
    },
    CborNullValue: function CborNullValue() {
    },
    CborUndefinedValue: function CborUndefinedValue() {
    },
    CborRegxpValue: function CborRegxpValue(t0) {
      this.value = t0;
    },
    CborSetValue: function CborSetValue(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    CborString: function CborString() {
    },
    CborStringValue: function CborStringValue(t0) {
      this.value = t0;
    },
    CborIndefiniteStringValue: function CborIndefiniteStringValue(t0) {
      this.value = t0;
    },
    CborUriValue: function CborUriValue(t0) {
      this.value = t0;
    },
    CborUtils_parseRFC3339DateTime(dateTimeString) {
      var parts, t1;
      if (B.JSString_methods.contains$1(dateTimeString, "+")) {
        parts = dateTimeString.split("+");
        t1 = parts.length;
        if (t1 !== 2)
          throw A.wrapException(A.CborException$("Invalid RFC3339 format: " + dateTimeString, null));
        if (0 >= t1)
          return A.ioore(parts, 0);
        return A.DateTime_parse(parts[0]);
      } else
        return A.DateTime_parse(dateTimeString).toUtc$0();
    },
    CborUtils__decode(cborBytes, offset) {
      var t1, t2, i, consumed, first, majorTag, info, data, t3,
        tags = A._setArrayType([], type$.JSArray_int);
      $label0$1:
        for (t1 = J.getInterceptor$asx(cborBytes), t2 = type$.dynamic, i = offset, consumed = 0; i < t1.get$length(cborBytes);) {
          first = t1.$index(cborBytes, i);
          majorTag = B.JSInt_methods._shrOtherPositive$1(first, 5);
          info = first & 31;
          switch (majorTag) {
            case 5:
              if (info === 31) {
                t1 = A.CborUtils__decodeDynamicMap(cborBytes, info, i, tags);
                return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
              }
              t1 = A.CborUtils__decodeMap(cborBytes, info, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            case 1:
            case 0:
              t1 = A.CborUtils__parseInt(cborBytes, info, majorTag, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            case 6:
              data = A.CborUtils__decodeLength(info, cborBytes, i, t2);
              B.JSArray_methods.add$1(tags, A._asInt(data.value));
              t3 = data.consumed;
              i += t3;
              consumed += t3;
              continue $label0$1;
            case 2:
              t1 = A.CborUtils__decodeBytesString(cborBytes, info, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            case 3:
              t1 = A.CborUtils__decodeUtf8String(cborBytes, info, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            case 7:
              t1 = A.CborUtils__parseSimpleValue(cborBytes, info, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            case 4:
              if (info === 31) {
                t1 = A.CborUtils__decodeDynamicArray(cborBytes, info, i, tags);
                return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
              }
              t1 = A.CborUtils__decodeArray(cborBytes, info, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            default:
              throw A.wrapException(A.CborException$("invalid or unsuported cbor tag major: " + majorTag + " ", null));
          }
        }
      throw A.wrapException(B.CborException_Opy);
    },
    CborUtils__parsBytes(cborBytes, info, offset) {
      var end,
        len = A.CborUtils__decodeLength(info, cborBytes, offset, type$.int),
        t1 = len.consumed,
        t2 = len.value;
      if (typeof t2 !== "number")
        return A.iae(t2);
      end = t1 + t2;
      return new A._DecodeCborResult(J.sublist$2$ax(cborBytes, offset + t1, offset + end), end, type$._DecodeCborResult_List_int);
    },
    CborUtils__decodeLength(info, cborBytes, offset, $T) {
      var value, consumed, len, bytes, decode;
      if (info < 24) {
        value = info;
        consumed = 1;
      } else {
        ++offset;
        len = B.JSInt_methods.$shl(1, info - 24);
        bytes = J.sublist$2$ax(cborBytes, offset, offset + len);
        consumed = len + 1;
        if (len <= 4)
          value = A.IntUtils_fromBytes(bytes, B.C_Endian, false);
        else if (len <= 8) {
          decode = A.BigintUtils_fromBytes(bytes, B.C_Endian, false);
          if (decode.get$isValidInt())
            value = decode.toInt$0(0);
          else {
            if ($T._is(0))
              throw A.wrapException(B.CborException_0UB);
            value = decode;
          }
        } else
          throw A.wrapException(A.CborException$("Invalid additional info for int: " + info, null));
      }
      if (!$T._is(value))
        throw A.wrapException(A.CborException$("decode length casting faild.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", A.createRuntimeType($T).toString$0(0), "value", J.get$runtimeType$(value)], type$.String, type$.dynamic)));
      return new A._DecodeCborResult($T._as(value), consumed, $T._eval$1("_DecodeCborResult<0>"));
    },
    CborUtils__decodeUtf8String(cborBytes, info, offset, tags) {
      var toList, t1, t2, t3, stringList, bytes;
      if (info === 31) {
        toList = A.CborUtils__decodeDynamicArray(cborBytes, info, offset, tags);
        t1 = J.whereType$1$0$ax(type$.CborListValue_dynamic._as(toList.value).value, type$.CborStringValue);
        t2 = type$.String;
        t3 = t1.$ti;
        t3 = A.MappedIterable_MappedIterable(t1, t3._eval$1("String(Iterable.E)")._as(new A.CborUtils__decodeUtf8String_closure()), t3._eval$1("Iterable.E"), t2);
        stringList = A.List_List$of(t3, true, A._instanceType(t3)._eval$1("Iterable.E"));
        if (tags.length !== 0) {
          t1 = A.List_List$unmodifiable(stringList, t2);
          return new A._DecodeCborResult(new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), new A.CborIndefiniteStringValue(t1), type$.CborTagValue_CborIndefiniteStringValue), toList.consumed, type$._DecodeCborResult_CborObject);
        }
        return new A._DecodeCborResult(new A.CborIndefiniteStringValue(A.List_List$unmodifiable(stringList, t2)), toList.consumed, type$._DecodeCborResult_CborObject);
      }
      bytes = A.CborUtils__parsBytes(cborBytes, info, offset);
      return new A._DecodeCborResult(A.CborUtils__toStringObject(bytes.value, tags), bytes.consumed, type$._DecodeCborResult_CborObject);
    },
    CborUtils__toStringObject(utf8Bytes, tags) {
      var toObj, baseType,
        $toString = A.StringUtils_decode(utf8Bytes, false, B.StringEncoding_1);
      if (tags.length === 0)
        toObj = new A.CborStringValue($toString);
      else if (B.JSArray_methods.any$1(B.List_ww8, new A.CborUtils__toStringObject_closure(tags))) {
        baseType = B.JSArray_methods.firstWhere$1(B.List_ww8, new A.CborUtils__toStringObject_closure0(tags));
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborBaseUrlValue($toString, baseType);
      } else if (A.BytesUtils_bytesEqual(tags, B.List_36)) {
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborMimeValue($toString);
      } else if (A.BytesUtils_bytesEqual(tags, B.List_32)) {
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborUriValue($toString);
      } else if (A.BytesUtils_bytesEqual(tags, B.List_35)) {
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborRegxpValue($toString);
      } else if (A.BytesUtils_bytesEqual(tags, B.List_0)) {
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborStringDateValue(A.CborUtils_parseRFC3339DateTime($toString));
      } else
        toObj = null;
      if (toObj == null)
        toObj = new A.CborStringValue($toString);
      return tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toObj, type$.CborTagValue_CborObject);
    },
    CborUtils__decodeBytesString(cborBytes, info, offset, tags) {
      var toList, t1, t2, bytesList, bytes, big, val;
      if (info === 31) {
        toList = A.CborUtils__decodeDynamicArray(cborBytes, info, offset, tags);
        t1 = J.whereType$1$0$ax(type$.CborListValue_dynamic._as(toList.value).value, type$.CborBytesValue);
        t2 = t1.$ti;
        t2 = A.MappedIterable_MappedIterable(t1, t2._eval$1("List<int>(Iterable.E)")._as(new A.CborUtils__decodeBytesString_closure()), t2._eval$1("Iterable.E"), type$.List_int);
        bytesList = A.List_List$of(t2, true, A._instanceType(t2)._eval$1("Iterable.E"));
        if (tags.length !== 0) {
          t1 = A.CborDynamicBytesValue$(bytesList);
          return new A._DecodeCborResult(new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), t1, type$.CborTagValue_CborDynamicBytesValue), toList.consumed, type$._DecodeCborResult_CborObject);
        }
        return new A._DecodeCborResult(A.CborDynamicBytesValue$(bytesList), toList.consumed, type$._DecodeCborResult_CborObject);
      }
      bytes = A.CborUtils__parsBytes(cborBytes, info, offset);
      if (A.BytesUtils_bytesEqual(tags, B.List_3) || A.BytesUtils_bytesEqual(tags, B.List_2)) {
        big = A.BigintUtils_fromBytes(bytes.value, B.C_Endian, false);
        if (A.BytesUtils_bytesEqual(tags, B.List_3))
          big = big.$not(0);
        B.JSArray_methods.clear$0(tags);
        val = new A.CborBigIntValue(big);
      } else
        val = null;
      if (val == null) {
        t1 = bytes.value;
        A.BytesUtils_validateListOfBytes(t1);
        val = new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
      }
      t1 = tags.length === 0 ? val : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), val, type$.CborTagValue_CborObject);
      return new A._DecodeCborResult(t1, bytes.consumed, type$._DecodeCborResult_CborObject);
    },
    CborUtils__decodeMap(cborBytes, info, offset, tags) {
      var lI, decodeKey, decodeValue, toMap,
        t1 = type$.int,
        decodeLen = A.CborUtils__decodeLength(info, cborBytes, offset, t1),
        consumed = decodeLen.consumed,
        $length = decodeLen.value,
        t2 = type$.CborObject,
        objects = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
      for (lI = 0; lI < $length; ++lI) {
        decodeKey = A.CborUtils__decode(cborBytes, consumed + offset);
        consumed += decodeKey.consumed;
        decodeValue = A.CborUtils__decode(cborBytes, consumed + offset);
        objects.$indexSet(0, decodeKey.value, decodeValue.value);
        consumed += decodeValue.consumed;
      }
      toMap = new A.CborMapValue(objects, true, type$.CborMapValue_CborObject_CborObject);
      t1 = tags.length === 0 ? toMap : new A.CborTagValue(A.List_List$unmodifiable(tags, t1), toMap, type$.CborTagValue_CborMapValue_CborObject_CborObject);
      return new A._DecodeCborResult(t1, consumed, type$._DecodeCborResult_CborObject);
    },
    CborUtils__decodeDynamicMap(cborBytes, info, offset, tags) {
      var consumed, t2, decodeKey, decodeValue, toMap,
        t1 = type$.CborObject,
        objects = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (t1 = J.getInterceptor$asx(cborBytes), consumed = 1; t2 = offset + consumed, !J.$eq$(t1.$index(cborBytes, t2), 255);) {
        decodeKey = A.CborUtils__decode(cborBytes, t2);
        consumed += decodeKey.consumed;
        decodeValue = A.CborUtils__decode(cborBytes, offset + consumed);
        objects.$indexSet(0, decodeKey.value, decodeValue.value);
        consumed += decodeValue.consumed;
      }
      toMap = new A.CborMapValue(objects, false, type$.CborMapValue_CborObject_CborObject);
      t1 = tags.length === 0 ? toMap : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toMap, type$.CborTagValue_CborMapValue_CborObject_CborObject);
      return new A._DecodeCborResult(t1, consumed + 1, type$._DecodeCborResult_CborObject);
    },
    CborUtils__decodeArray(cborBytes, info, offset, tags) {
      var t2, lI, decodeData, toObj,
        t1 = type$.int,
        decodeLen = A.CborUtils__decodeLength(info, cborBytes, offset, t1),
        consumed = decodeLen.consumed,
        $length = decodeLen.value,
        objects = A._setArrayType([], type$.JSArray_CborObject);
      for (t2 = J.getInterceptor$asx(cborBytes), lI = 0; lI < $length; ++lI) {
        decodeData = A.CborUtils__decode(cborBytes, consumed + offset);
        B.JSArray_methods.add$1(objects, decodeData.value);
        consumed += decodeData.consumed;
        if (consumed + offset === t2.get$length(cborBytes))
          break;
      }
      if (A.BytesUtils_bytesEqual(tags, B.List_5) || A.BytesUtils_bytesEqual(tags, B.List_4))
        return new A._DecodeCborResult(A.CborUtils__decodeCborBigfloatOrDecimal(objects, tags), consumed, type$._DecodeCborResult_CborObject);
      if (A.BytesUtils_bytesEqual(tags, B.List_258)) {
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborSetValue(A.LinkedHashSet_LinkedHashSet$from(objects, type$.CborObject), type$.CborSetValue_CborObject);
        t1 = tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, t1), toObj, type$.CborTagValue_CborSetValue_CborObject);
        return new A._DecodeCborResult(t1, consumed, type$._DecodeCborResult_CborObject);
      }
      toObj = new A.CborListValue(objects, true, type$.CborListValue_CborObject);
      t1 = tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, t1), toObj, type$.CborTagValue_CborListValue_CborObject);
      return new A._DecodeCborResult(t1, consumed, type$._DecodeCborResult_CborObject);
    },
    CborUtils__decodeDynamicArray(cborBytes, info, offset, tags) {
      var t1, consomed, t2, decodeData, toObj,
        objects = A._setArrayType([], type$.JSArray_CborObject);
      for (t1 = J.getInterceptor$asx(cborBytes), consomed = 1; t2 = consomed + offset, !J.$eq$(t1.$index(cborBytes, t2), 255);) {
        decodeData = A.CborUtils__decode(cborBytes, t2);
        B.JSArray_methods.add$1(objects, decodeData.value);
        consomed += decodeData.consumed;
      }
      toObj = new A.CborListValue(objects, false, type$.CborListValue_CborObject);
      t1 = tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toObj, type$.CborTagValue_CborListValue_CborObject);
      return new A._DecodeCborResult(t1, consomed + 1, type$._DecodeCborResult_CborObject);
    },
    CborUtils__decodeCborBigfloatOrDecimal(objects, tags) {
      var t2, t3, toObj,
        t1 = type$.WhereTypeIterable_CborNumeric;
      objects = A.List_List$of(new A.WhereTypeIterable(objects, t1), true, t1._eval$1("Iterable.E"));
      t1 = objects.length;
      if (t1 !== 2)
        throw A.wrapException(B.CborException_Aec);
      if (A.BytesUtils_bytesEqual(tags, B.List_4)) {
        B.JSArray_methods.clear$0(tags);
        if (0 >= t1)
          return A.ioore(objects, 0);
        t2 = type$.CborNumeric;
        t3 = t2._as(objects[0]);
        if (1 >= t1)
          return A.ioore(objects, 1);
        t2 = t2._as(objects[1]);
        toObj = new A.CborDecimalFracValue(A.CborNumeric_getCborNumericValue(t3), A.CborNumeric_getCborNumericValue(t2));
        return tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toObj, type$.CborTagValue_CborDecimalFracValue);
      }
      B.JSArray_methods.clear$0(tags);
      if (0 >= t1)
        return A.ioore(objects, 0);
      t2 = type$.CborNumeric;
      t3 = t2._as(objects[0]);
      if (1 >= t1)
        return A.ioore(objects, 1);
      t2 = t2._as(objects[1]);
      toObj = new A.CborBigFloatValue(A.CborNumeric_getCborNumericValue(t3), A.CborNumeric_getCborNumericValue(t2));
      return tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toObj, type$.CborTagValue_CborBigFloatValue);
    },
    CborUtils__parseSimpleValue(bytes, info, offset, tags) {
      var obj, t1, int16Bits, sign, exponent, fraction, value, val, consumed, dt;
      switch (info) {
        case 20:
          obj = B.CborBoleanValue_false;
          break;
        case 21:
          obj = B.CborBoleanValue_true;
          break;
        case 22:
          obj = B.C_CborNullValue;
          break;
        case 23:
          obj = B.C_CborUndefinedValue;
          break;
        default:
          obj = null;
      }
      if (obj != null) {
        if (tags.length === 0)
          return new A._DecodeCborResult(obj, 1, type$._DecodeCborResult_CborObject);
        return new A._DecodeCborResult(new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), obj, type$.CborTagValue_CborObject), 1, type$._DecodeCborResult_CborObject);
      }
      ++offset;
      switch (info) {
        case 25:
          t1 = J.sublist$2$ax(bytes, offset, offset + 2);
          if (t1.length !== 2)
            A.throwExpression(B.CborException_U05);
          int16Bits = B.NativeByteData_methods._getInt16$2(A.ByteData_ByteData$sublistView(new Uint8Array(A._ensureNativeList(t1))), 0, false);
          sign = B.JSInt_methods._shrOtherPositive$1(int16Bits, 15) & 1;
          exponent = B.JSInt_methods._shrOtherPositive$1(int16Bits, 10) & 31;
          fraction = int16Bits & 1023;
          if (exponent === 31)
            if (fraction === 0)
              value = sign === 0 ? 1 / 0 : -1 / 0;
            else
              value = 0 / 0;
          else if (exponent === 0 && fraction === 0)
            value = sign === 0 ? 0 : -0.0;
          else {
            value = sign === 0 ? 1 : -1;
            value *= (1 + fraction / 1024) * Math.pow(2, exponent - 15);
          }
          val = value;
          consumed = 3;
          break;
        case 26:
          val = B.NativeByteData_methods._getFloat32$2(A.NativeByteData_NativeByteData$view(new Uint8Array(A._ensureNativeList(J.sublist$2$ax(bytes, offset, offset + 4))).buffer, 0, null), 0, false);
          consumed = 5;
          break;
        case 27:
          val = B.NativeByteData_methods._getFloat64$2(A.NativeByteData_NativeByteData$view(new Uint8Array(A._ensureNativeList(J.sublist$2$ax(bytes, offset, offset + 8))).buffer, 0, null), 0, false);
          consumed = 9;
          break;
        default:
          throw A.wrapException(B.CborException_eZO);
      }
      if (A.BytesUtils_bytesEqual(tags, B.List_1)) {
        dt = A.DateTime$fromMillisecondsSinceEpoch(B.JSNumber_methods.round$0(val * 1000));
        B.JSArray_methods.clear$0(tags);
        obj = new A.CborEpochFloatValue(dt);
      }
      if (obj == null)
        obj = new A.CborFloatValue(val);
      t1 = tags.length === 0 ? obj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), obj, type$.CborTagValue_CborObject);
      return new A._DecodeCborResult(t1, consumed, type$._DecodeCborResult_CborObject);
    },
    CborUtils__parseInt(cborBytes, info, mt, offset, tags) {
      var val, numericValue, dt, toObj, t1,
        data = A.CborUtils__decodeLength(info, cborBytes, offset, type$.dynamic),
        numb = data.value;
      if (numb instanceof A._BigIntImpl || mt === 1) {
        val = A.BigintUtils_parse(numb);
        if (mt === 1)
          val = val.$not(0);
        numericValue = val.get$isValidInt() ? new A.CborIntValue(val.toInt$0(0)) : null;
        if (numericValue == null)
          numericValue = new A.CborSafeIntValue(val);
      } else
        numericValue = new A.CborIntValue(A._asInt(numb));
      if (A.BytesUtils_bytesEqual(tags, B.List_1)) {
        dt = A.DateTime$fromMillisecondsSinceEpoch(numericValue.toInt$0(0) * 1000);
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborEpochIntValue(dt);
        t1 = tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toObj, type$.CborTagValue_CborEpochIntValue);
        return new A._DecodeCborResult(t1, data.consumed, type$._DecodeCborResult_CborObject);
      }
      t1 = tags.length === 0 ? numericValue : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), numericValue, type$.CborTagValue_CborNumeric);
      return new A._DecodeCborResult(t1, data.consumed, type$._DecodeCborResult_CborObject);
    },
    _DecodeCborResult: function _DecodeCborResult(t0, t1, t2) {
      this.value = t0;
      this.consumed = t1;
      this.$ti = t2;
    },
    CborUtils__decodeUtf8String_closure: function CborUtils__decodeUtf8String_closure() {
    },
    CborUtils__toStringObject_closure: function CborUtils__toStringObject_closure(t0) {
      this.tags = t0;
    },
    CborUtils__toStringObject_closure0: function CborUtils__toStringObject_closure0(t0) {
      this.tags = t0;
    },
    CborUtils__decodeBytesString_closure: function CborUtils__decodeBytesString_closure() {
    },
    CborBytesTracker: function CborBytesTracker(t0) {
      this._dynamic_bytes$_buffer = t0;
    },
    FloatUtils__decodeBits(bits) {
      var mantissa, exponent,
        mantissaBits = (bits & -1) >>> 0,
        exponentBits = B.JSInt_methods._shrBothPositive$1(bits, 52) & 2047,
        t1 = B.JSInt_methods._shrBothPositive$1(bits, 63);
      if (exponentBits === 0) {
        mantissa = mantissaBits;
        exponent = -1074;
      } else {
        exponent = exponentBits - 1023 - 52;
        mantissa = (mantissaBits | 0) >>> 0;
      }
      if (t1 !== 0)
        mantissa = -mantissa;
      while (true) {
        if (!((mantissa & 1) === 0 && mantissa !== 0))
          break;
        mantissa = B.JSInt_methods._shrOtherPositive$1(mantissa, 1);
        ++exponent;
      }
      return new A.Tuple(mantissa, exponent, type$.Tuple_int_int);
    },
    FloatUtils__toBits(value, endian) {
      var t1, bits, _i, b,
        toBytes = A.NativeUint8List_NativeUint8List$view(new Float64Array(A._ensureNativeList(A._setArrayType([value], type$.JSArray_double))).buffer, 0, null);
      toBytes = A.List_List$from(new A.ReversedListIterable(toBytes, A.instanceType(toBytes)._eval$1("ReversedListIterable<ListBase.E>")), false, type$.int);
      for (t1 = toBytes.length, bits = 0, _i = 0; _i < t1; ++_i) {
        b = toBytes[_i];
        if (typeof b !== "number")
          return A.iae(b);
        bits = (bits << 8 | b) >>> 0;
      }
      return bits;
    },
    FloatUtils__isLessThan(value) {
      var bits;
      if (isNaN(value) || value == 1 / 0 || value == -1 / 0)
        return B.Tuple_true_true;
      bits = A.FloatUtils__toBits(value, null);
      if (A.FloatUtils__dobuleLessThan(bits, B.FloatLength_5_10))
        return B.Tuple_true_true;
      if (A.FloatUtils__dobuleLessThan(bits, B.FloatLength_8_23))
        return B.Tuple_false_true;
      return B.Tuple_false_false;
    },
    FloatUtils__dobuleLessThan(bits, type) {
      var t3, t4, exponent, subnormalMantissaLength,
        mantissaBitLength = type.mantissaBitLength,
        exponentBitLength = type.exponentBitLength,
        exponentBias = B.JSInt_methods.$shl(1, exponentBitLength - 1) - 1,
        de = A.FloatUtils__decodeBits(bits),
        t1 = de.item1,
        t2 = J.getInterceptor$(t1);
      if (t2.$eq(t1, 0))
        return true;
      t3 = mantissaBitLength + 1;
      if (t3 < t2.get$bitLength(t1))
        return false;
      t4 = de.item2;
      if (typeof t4 !== "number")
        return t4.$add();
      exponent = t4 + mantissaBitLength + exponentBias + (t2.get$bitLength(t1) - t3);
      if (exponent >= B.JSInt_methods._shlPositive$1(1, exponentBitLength) - 1)
        return false;
      if (exponent >= 1)
        return true;
      subnormalMantissaLength = t2.get$bitLength(t1) + t4 - -(exponentBias - 1 + mantissaBitLength);
      return subnormalMantissaLength > 0 && subnormalMantissaLength <= mantissaBitLength;
    },
    FloatLength: function FloatLength(t0, t1) {
      this.exponentBitLength = t0;
      this.mantissaBitLength = t1;
    },
    FloatUtils: function FloatUtils(t0) {
      this.value = t0;
      this.__FloatUtils__isLess_FI = $;
    },
    AES$(key) {
      var t3,
        t1 = new A.AES(),
        t2 = t1.__AES__keyLen_A = key.length;
      type$.List_int._as(key);
      if (t2 !== 16 && t2 !== 24 && t2 !== 32)
        A.throwExpression(B.ArgumentException_SN3);
      t3 = type$.int;
      t1.set$_encKey(A.List_List$filled(t2 + 28, 0, false, t3));
      if (t1._decKey == null)
        t1.set$_decKey(A.List_List$filled(key.length + 28, 0, false, t3));
      t2 = $.$get$AES__lib();
      t3 = t1._encKey;
      t3.toString;
      t2.expandKey$3(key, t3, t1._decKey);
      return t1;
    },
    AES: function AES() {
      this.__AES__keyLen_A = $;
      this._decKey = this._encKey = null;
    },
    AESLib: function AESLib(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _._powx = t0;
      _._sbox0 = t1;
      _._sbox1 = t2;
      _._te0 = t3;
      _._te1 = t4;
      _._te2 = t5;
      _._te3 = t6;
      _._td0 = t7;
      _._td1 = t8;
      _._td2 = t9;
      _._td3 = t10;
    },
    AESLib_initialize_mul: function AESLib_initialize_mul() {
    },
    AESLib_initialize__rot24: function AESLib_initialize__rot24() {
    },
    CryptoOpsException: function CryptoOpsException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    GroupElementCached_dsmp() {
      var t2, _i,
        t1 = type$.GroupElementCached,
        _list = J.JSArray_JSArray$allocateGrowable(8, t1);
      for (t2 = type$.int, _i = 0; _i < 8; ++_i)
        _list[_i] = new A.GroupElementCached(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      return A.List_List$unmodifiable(_list, t1);
    },
    FieldElement: function FieldElement(t0) {
      this.h = t0;
    },
    GroupElementP2: function GroupElementP2(t0, t1, t2) {
      this.x = t0;
      this.y = t1;
      this.z = t2;
    },
    GroupElementP2_toString_closure: function GroupElementP2_toString_closure() {
    },
    GroupElementP1P1: function GroupElementP1P1(t0, t1, t2, t3) {
      var _ = this;
      _.x = t0;
      _.y = t1;
      _.z = t2;
      _.t = t3;
    },
    GroupElementP1P1_toString_closure: function GroupElementP1P1_toString_closure() {
    },
    GroupElementP3: function GroupElementP3(t0, t1, t2, t3) {
      var _ = this;
      _.x = t0;
      _.y = t1;
      _.z = t2;
      _.t = t3;
    },
    GroupElementP3_toString_closure: function GroupElementP3_toString_closure() {
    },
    GroupElementCached: function GroupElementCached(t0, t1, t2, t3) {
      var _ = this;
      _.yPlusX = t0;
      _.yMinusX = t1;
      _.z = t2;
      _.t2d = t3;
    },
    GroupElementCached_toString_closure: function GroupElementCached_toString_closure() {
    },
    GroupElementPrecomp: function GroupElementPrecomp(t0, t1, t2) {
      this.yplusx = t0;
      this.yminusx = t1;
      this.xy2d = t2;
    },
    CryptoOps_scIsNonZero(s) {
      var t1, i;
      A._BytesHelper_asMin32(s, "scIsNonZero");
      for (t1 = J.getInterceptor$asx(s), i = 0; i < 32; ++i)
        if (t1.$index(s, i) !== 0)
          return 1;
      return 0;
    },
    CryptoOps_signum(a) {
      var t1 = $.$get$_BigIntImpl_zero();
      if (a.compareTo$1(0, t1) > 0)
        return $.$get$_BigIntImpl_one();
      if (a.compareTo$1(0, t1) < 0)
        return A._BigIntImpl__BigIntImpl$from(-1);
      return t1;
    },
    CryptoOps_scCheck(s) {
      var s0, s1, s2, s3, s4, s5, s6, s7;
      A._BytesHelper_asMin32(s, "scCheck");
      s0 = A.CryptoOps__load4(s, 0);
      s1 = A.CryptoOps__load4(s, 4);
      s2 = A.CryptoOps__load4(s, 8);
      s3 = A.CryptoOps__load4(s, 12);
      s4 = A.CryptoOps__load4(s, 16);
      s5 = A.CryptoOps__load4(s, 20);
      s6 = A.CryptoOps__load4(s, 24);
      s7 = A.CryptoOps__load4(s, 28);
      return A.CryptoOps_signum(A._BigIntImpl__BigIntImpl$from(1559614444).$sub(0, s0)).$add(0, A.CryptoOps_signum(A._BigIntImpl__BigIntImpl$from(1477600026).$sub(0, s1)).$shl(0, 1)).$add(0, A.CryptoOps_signum(A._BigIntImpl__BigIntImpl$from(2734136534).$sub(0, s2)).$shl(0, 2)).$add(0, A.CryptoOps_signum(A._BigIntImpl__BigIntImpl$from(350157278).$sub(0, s3)).$shl(0, 3)).$add(0, A.CryptoOps_signum(s4.$negate(0)).$shl(0, 4)).$add(0, A.CryptoOps_signum(s5.$negate(0)).$shl(0, 5)).$add(0, A.CryptoOps_signum(s6.$negate(0)).$shl(0, 6)).$add(0, A.CryptoOps_signum(A._BigIntImpl__BigIntImpl$from(268435456).$sub(0, s7)).$shl(0, 7)).$shr(0, 8).toInt$0(0);
    },
    CryptoOps_scReduce32Copy(scopy, s) {
      var t1, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, carry0, carry2, carry4, carry6, carry8, carry10, carry1, carry3, carry5, carry7, carry9, carry11, s120, sBig, i, t2,
        _s14_ = "scReduce32Copy";
      A._BytesHelper_asMin32(s, _s14_);
      A._BytesHelper_asMin32(scopy, _s14_);
      t1 = $.$get$CryptoOps__b2097151();
      s0 = t1.$and(0, A.CryptoOps__load3(s, 0));
      s1 = t1.$and(0, A.CryptoOps__load4(s, 2).$shr(0, 5));
      s2 = t1.$and(0, A.CryptoOps__load3(s, 5).$shr(0, 2));
      s3 = t1.$and(0, A.CryptoOps__load4(s, 7).$shr(0, 7));
      s4 = t1.$and(0, A.CryptoOps__load4(s, 10).$shr(0, 4));
      s5 = t1.$and(0, A.CryptoOps__load3(s, 13).$shr(0, 1));
      s6 = t1.$and(0, A.CryptoOps__load4(s, 15).$shr(0, 6));
      s7 = t1.$and(0, A.CryptoOps__load3(s, 18).$shr(0, 3));
      s8 = t1.$and(0, A.CryptoOps__load3(s, 21));
      s9 = t1.$and(0, A.CryptoOps__load4(s, 23).$shr(0, 5));
      s10 = t1.$and(0, A.CryptoOps__load3(s, 26).$shr(0, 2));
      s11 = A.CryptoOps__load4(s, 28).$shr(0, 7);
      s12 = $.$get$_BigIntImpl_zero();
      t1 = $.$get$CryptoOps__bitMaskFor20();
      carry0 = s0.$add(0, t1).$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry2 = s2.$add(0, t1).$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry4 = s4.$add(0, t1).$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry6 = s6.$add(0, t1).$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry8 = s8.$add(0, t1).$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry10 = s10.$add(0, t1).$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry1 = s1.$add(0, t1).$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry3 = s3.$add(0, t1).$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry5 = s5.$add(0, t1).$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry7 = s7.$add(0, t1).$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry9 = s9.$add(0, t1).$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry11 = s11.$add(0, t1).$shr(0, 21);
      s120 = s12.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      s0 = s0.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(666643)));
      s1 = s1.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(470296)));
      s2 = s2.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(654183)));
      s3 = s3.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(997805)));
      s4 = s4.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(136657)));
      s5 = s5.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(683901)));
      s120 = A._BigIntImpl__BigIntImpl$from(0);
      carry0 = s0.$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry1 = s1.$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry2 = s2.$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry3 = s3.$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry4 = s4.$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry5 = s5.$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry6 = s6.$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry7 = s7.$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry8 = s8.$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry9 = s9.$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry10 = s10.$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry11 = s11.$shr(0, 21);
      s120 = s120.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      s0 = s0.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(666643)));
      s1 = s1.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(470296)));
      s2 = s2.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(654183)));
      s3 = s3.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(997805)));
      s4 = s4.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(136657)));
      s5 = s5.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(683901)));
      carry0 = s0.$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry1 = s1.$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry2 = s2.$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry3 = s3.$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry4 = s4.$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry5 = s5.$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry6 = s6.$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry7 = s7.$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry8 = s8.$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry9 = s9.$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry10 = s10.$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      sBig = A.List_List$filled(32, s12, false, type$.BigInt);
      B.JSArray_methods.$indexSet(sBig, 0, s0.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 1, s0.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 2, s0.$shr(0, 16).$or(0, s1.$shl(0, 5)));
      B.JSArray_methods.$indexSet(sBig, 3, s1.$shr(0, 3));
      B.JSArray_methods.$indexSet(sBig, 4, s1.$shr(0, 11));
      B.JSArray_methods.$indexSet(sBig, 5, s1.$shr(0, 19).$or(0, s2.$shl(0, 2)));
      B.JSArray_methods.$indexSet(sBig, 6, s2.$shr(0, 6));
      B.JSArray_methods.$indexSet(sBig, 7, s2.$shr(0, 14).$or(0, s3.$shl(0, 7)));
      B.JSArray_methods.$indexSet(sBig, 8, s3.$shr(0, 1));
      B.JSArray_methods.$indexSet(sBig, 9, s3.$shr(0, 9));
      B.JSArray_methods.$indexSet(sBig, 10, s3.$shr(0, 17).$or(0, s4.$shl(0, 4)));
      B.JSArray_methods.$indexSet(sBig, 11, s4.$shr(0, 4));
      B.JSArray_methods.$indexSet(sBig, 12, s4.$shr(0, 12));
      B.JSArray_methods.$indexSet(sBig, 13, s4.$shr(0, 20).$or(0, s5.$shl(0, 1)));
      B.JSArray_methods.$indexSet(sBig, 14, s5.$shr(0, 7));
      B.JSArray_methods.$indexSet(sBig, 15, s5.$shr(0, 15).$or(0, s6.$shl(0, 6)));
      B.JSArray_methods.$indexSet(sBig, 16, s6.$shr(0, 2));
      B.JSArray_methods.$indexSet(sBig, 17, s6.$shr(0, 10));
      B.JSArray_methods.$indexSet(sBig, 18, s6.$shr(0, 18).$or(0, s7.$shl(0, 3)));
      B.JSArray_methods.$indexSet(sBig, 19, s7.$shr(0, 5));
      B.JSArray_methods.$indexSet(sBig, 20, s7.$shr(0, 13));
      B.JSArray_methods.$indexSet(sBig, 21, s8.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 22, s8.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 23, s8.$shr(0, 16).$or(0, s9.$shl(0, 5)));
      B.JSArray_methods.$indexSet(sBig, 24, s9.$shr(0, 3));
      B.JSArray_methods.$indexSet(sBig, 25, s9.$shr(0, 11));
      B.JSArray_methods.$indexSet(sBig, 26, s9.$shr(0, 19).$or(0, s10.$shl(0, 2)));
      B.JSArray_methods.$indexSet(sBig, 27, s10.$shr(0, 6));
      B.JSArray_methods.$indexSet(sBig, 28, s10.$shr(0, 14).$or(0, s11.$shl(0, 7)));
      B.JSArray_methods.$indexSet(sBig, 29, s11.$shr(0, 1));
      B.JSArray_methods.$indexSet(sBig, 30, s11.$shr(0, 9));
      B.JSArray_methods.$indexSet(sBig, 31, s11.$shr(0, 17));
      for (i = 0; i < 32; ++i) {
        t1 = sBig[i];
        t2 = $.$get$_BigIntImpl_one();
        B.JSArray_methods.$indexSet(scopy, i, t1.$and(0, t2.$shl(0, 8).$sub(0, t2)).toInt$0(0));
      }
    },
    CryptoOps_feAdd(h, f, g) {
      var f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, g0, g1, g2, g3, g4, g5, g6, g7, g8, g9,
        t1 = f.h,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      f0 = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      f1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      f2 = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      f3 = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      f4 = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      f5 = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      f6 = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      f7 = t1[7];
      if (8 >= t2)
        return A.ioore(t1, 8);
      f8 = t1[8];
      if (9 >= t2)
        return A.ioore(t1, 9);
      f9 = t1[9];
      t1 = g.h;
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      g0 = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      g1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      g2 = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      g3 = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      g4 = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      g5 = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      g6 = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      g7 = t1[7];
      if (8 >= t2)
        return A.ioore(t1, 8);
      g8 = t1[8];
      if (9 >= t2)
        return A.ioore(t1, 9);
      g9 = t1[9];
      t1 = h.h;
      B.JSArray_methods.$indexSet(t1, 0, f0 + g0);
      B.JSArray_methods.$indexSet(t1, 1, f1 + g1);
      B.JSArray_methods.$indexSet(t1, 2, f2 + g2);
      B.JSArray_methods.$indexSet(t1, 3, f3 + g3);
      B.JSArray_methods.$indexSet(t1, 4, f4 + g4);
      B.JSArray_methods.$indexSet(t1, 5, f5 + g5);
      B.JSArray_methods.$indexSet(t1, 6, f6 + g6);
      B.JSArray_methods.$indexSet(t1, 7, f7 + g7);
      B.JSArray_methods.$indexSet(t1, 8, f8 + g8);
      B.JSArray_methods.$indexSet(t1, 9, f9 + g9);
    },
    CryptoOps_feCmov(f, g, b) {
      var f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, t3, g0, g1, g2, g3, g4, g5, g6, g7, g8, g9,
        t1 = f.h,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      f0 = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      f1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      f2 = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      f3 = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      f4 = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      f5 = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      f6 = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      f7 = t1[7];
      if (8 >= t2)
        return A.ioore(t1, 8);
      f8 = t1[8];
      if (9 >= t2)
        return A.ioore(t1, 9);
      f9 = t1[9];
      t2 = g.h;
      t3 = t2.length;
      if (0 >= t3)
        return A.ioore(t2, 0);
      g0 = t2[0];
      if (1 >= t3)
        return A.ioore(t2, 1);
      g1 = t2[1];
      if (2 >= t3)
        return A.ioore(t2, 2);
      g2 = t2[2];
      if (3 >= t3)
        return A.ioore(t2, 3);
      g3 = t2[3];
      if (4 >= t3)
        return A.ioore(t2, 4);
      g4 = t2[4];
      if (5 >= t3)
        return A.ioore(t2, 5);
      g5 = t2[5];
      if (6 >= t3)
        return A.ioore(t2, 6);
      g6 = t2[6];
      if (7 >= t3)
        return A.ioore(t2, 7);
      g7 = t2[7];
      if (8 >= t3)
        return A.ioore(t2, 8);
      g8 = t2[8];
      if (9 >= t3)
        return A.ioore(t2, 9);
      g9 = t2[9];
      b = -b;
      B.JSArray_methods.$indexSet(t1, 0, B.JSInt_methods.toSigned$1((f0 ^ (f0 ^ g0) & b) >>> 0, 32));
      B.JSArray_methods.$indexSet(t1, 1, B.JSInt_methods.toSigned$1((f1 ^ (f1 ^ g1) & b) >>> 0, 32));
      B.JSArray_methods.$indexSet(t1, 2, B.JSInt_methods.toSigned$1((f2 ^ (f2 ^ g2) & b) >>> 0, 32));
      B.JSArray_methods.$indexSet(t1, 3, B.JSInt_methods.toSigned$1((f3 ^ (f3 ^ g3) & b) >>> 0, 32));
      B.JSArray_methods.$indexSet(t1, 4, B.JSInt_methods.toSigned$1((f4 ^ (f4 ^ g4) & b) >>> 0, 32));
      B.JSArray_methods.$indexSet(t1, 5, B.JSInt_methods.toSigned$1((f5 ^ (f5 ^ g5) & b) >>> 0, 32));
      B.JSArray_methods.$indexSet(t1, 6, B.JSInt_methods.toSigned$1((f6 ^ (f6 ^ g6) & b) >>> 0, 32));
      B.JSArray_methods.$indexSet(t1, 7, B.JSInt_methods.toSigned$1((f7 ^ (f7 ^ g7) & b) >>> 0, 32));
      B.JSArray_methods.$indexSet(t1, 8, B.JSInt_methods.toSigned$1((f8 ^ (f8 ^ g8) & b) >>> 0, 32));
      B.JSArray_methods.$indexSet(t1, 9, B.JSInt_methods.toSigned$1((f9 ^ (f9 ^ g9) & b) >>> 0, 32));
    },
    CryptoOps_feCopy(h, f) {
      var f0, f1, f2, f3, f4, f5, f6, f7, f8, f9,
        t1 = f.h,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      f0 = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      f1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      f2 = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      f3 = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      f4 = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      f5 = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      f6 = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      f7 = t1[7];
      if (8 >= t2)
        return A.ioore(t1, 8);
      f8 = t1[8];
      if (9 >= t2)
        return A.ioore(t1, 9);
      f9 = t1[9];
      t1 = h.h;
      B.JSArray_methods.$indexSet(t1, 0, f0);
      B.JSArray_methods.$indexSet(t1, 1, f1);
      B.JSArray_methods.$indexSet(t1, 2, f2);
      B.JSArray_methods.$indexSet(t1, 3, f3);
      B.JSArray_methods.$indexSet(t1, 4, f4);
      B.JSArray_methods.$indexSet(t1, 5, f5);
      B.JSArray_methods.$indexSet(t1, 6, f6);
      B.JSArray_methods.$indexSet(t1, 7, f7);
      B.JSArray_methods.$indexSet(t1, 8, f8);
      B.JSArray_methods.$indexSet(t1, 9, f9);
    },
    CryptoOps_feSq(h, f) {
      var f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, n, n0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, f0f0, f0f1_2, f0f2_2, f0f3_2, f0f4_2, f0f5_2, f0f6_2, f0f7_2, f0f8_2, f0f9_2, f1f1_2, f1f2_2, f1f3_4, f1f4_2, f1f5_4, f1f6_2, f1f7_4, f1f8_2, f1f9_76, f2f2, f2f3_2, f2f4_2, f2f5_2, f2f6_2, f2f7_2, f2f8_38, f2f9_38, f3f3_2, f3f4_2, f3f5_4, f3f6_2, f3f7_76, f3f8_38, f3f9_76, f4f4, f4f5_2, f4f6_38, f4f7_38, f4f8_38, f4f9_38, f5f5_38, f5f6_38, f5f7_76, f5f8_38, f5f9_76, f6f6_19, f6f7_38, f6f8_38, f6f9_38, f7f7_38, f7f8_38, f7f9_76, f8f8_19, f8f9_38, f9f9_38, h0, h1, h2, h3, h4, h5, h6, h7, h8, h9, carry0, carry4, carry1, carry5, carry2, carry6, carry3, carry7, carry8, carry9,
        t1 = f.h,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      f0 = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      f1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      f2 = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      f3 = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      f4 = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      f5 = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      f6 = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      f7 = t1[7];
      if (8 >= t2)
        return A.ioore(t1, 8);
      f8 = t1[8];
      if (9 >= t2)
        return A.ioore(t1, 9);
      f9 = t1[9];
      n = B.JSInt_methods.toSigned$1(2 * f0, 32);
      n0 = B.JSInt_methods.toSigned$1(2 * f1, 32);
      n1 = B.JSInt_methods.toSigned$1(2 * f2, 32);
      n2 = B.JSInt_methods.toSigned$1(2 * f3, 32);
      n3 = B.JSInt_methods.toSigned$1(2 * f4, 32);
      n4 = B.JSInt_methods.toSigned$1(2 * f5, 32);
      n5 = B.JSInt_methods.toSigned$1(2 * f6, 32);
      n6 = B.JSInt_methods.toSigned$1(2 * f7, 32);
      n7 = B.JSInt_methods.toSigned$1(38 * f5, 32);
      n8 = B.JSInt_methods.toSigned$1(19 * f6, 32);
      n9 = B.JSInt_methods.toSigned$1(38 * f7, 32);
      n10 = B.JSInt_methods.toSigned$1(19 * f8, 32);
      n11 = B.JSInt_methods.toSigned$1(38 * f9, 32);
      f0f0 = A._BigIntImpl__BigIntImpl$from(f0).$mul(0, A._BigIntImpl__BigIntImpl$from(f0));
      f0f1_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f1));
      f0f2_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f2));
      f0f3_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f3));
      f0f4_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f4));
      f0f5_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f5));
      f0f6_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f6));
      f0f7_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f7));
      f0f8_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f8));
      f0f9_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f9));
      f1f1_2 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(f1));
      f1f2_2 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(f2));
      f1f3_4 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(n2));
      f1f4_2 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(f4));
      f1f5_4 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(n4));
      f1f6_2 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(f6));
      f1f7_4 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(n6));
      f1f8_2 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(f8));
      f1f9_76 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f2f2 = A._BigIntImpl__BigIntImpl$from(f2).$mul(0, A._BigIntImpl__BigIntImpl$from(f2));
      f2f3_2 = A._BigIntImpl__BigIntImpl$from(n1).$mul(0, A._BigIntImpl__BigIntImpl$from(f3));
      f2f4_2 = A._BigIntImpl__BigIntImpl$from(n1).$mul(0, A._BigIntImpl__BigIntImpl$from(f4));
      f2f5_2 = A._BigIntImpl__BigIntImpl$from(n1).$mul(0, A._BigIntImpl__BigIntImpl$from(f5));
      f2f6_2 = A._BigIntImpl__BigIntImpl$from(n1).$mul(0, A._BigIntImpl__BigIntImpl$from(f6));
      f2f7_2 = A._BigIntImpl__BigIntImpl$from(n1).$mul(0, A._BigIntImpl__BigIntImpl$from(f7));
      f2f8_38 = A._BigIntImpl__BigIntImpl$from(n1).$mul(0, A._BigIntImpl__BigIntImpl$from(n10));
      f2f9_38 = A._BigIntImpl__BigIntImpl$from(f2).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f3f3_2 = A._BigIntImpl__BigIntImpl$from(n2).$mul(0, A._BigIntImpl__BigIntImpl$from(f3));
      f3f4_2 = A._BigIntImpl__BigIntImpl$from(n2).$mul(0, A._BigIntImpl__BigIntImpl$from(f4));
      f3f5_4 = A._BigIntImpl__BigIntImpl$from(n2).$mul(0, A._BigIntImpl__BigIntImpl$from(n4));
      f3f6_2 = A._BigIntImpl__BigIntImpl$from(n2).$mul(0, A._BigIntImpl__BigIntImpl$from(f6));
      f3f7_76 = A._BigIntImpl__BigIntImpl$from(n2).$mul(0, A._BigIntImpl__BigIntImpl$from(n9));
      f3f8_38 = A._BigIntImpl__BigIntImpl$from(n2).$mul(0, A._BigIntImpl__BigIntImpl$from(n10));
      f3f9_76 = A._BigIntImpl__BigIntImpl$from(n2).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f4f4 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(f4));
      f4f5_2 = A._BigIntImpl__BigIntImpl$from(n3).$mul(0, A._BigIntImpl__BigIntImpl$from(f5));
      f4f6_38 = A._BigIntImpl__BigIntImpl$from(n3).$mul(0, A._BigIntImpl__BigIntImpl$from(n8));
      f4f7_38 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(n9));
      f4f8_38 = A._BigIntImpl__BigIntImpl$from(n3).$mul(0, A._BigIntImpl__BigIntImpl$from(n10));
      f4f9_38 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f5f5_38 = A._BigIntImpl__BigIntImpl$from(f5).$mul(0, A._BigIntImpl__BigIntImpl$from(n7));
      f5f6_38 = A._BigIntImpl__BigIntImpl$from(n4).$mul(0, A._BigIntImpl__BigIntImpl$from(n8));
      f5f7_76 = A._BigIntImpl__BigIntImpl$from(n4).$mul(0, A._BigIntImpl__BigIntImpl$from(n9));
      f5f8_38 = A._BigIntImpl__BigIntImpl$from(n4).$mul(0, A._BigIntImpl__BigIntImpl$from(n10));
      f5f9_76 = A._BigIntImpl__BigIntImpl$from(n4).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f6f6_19 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(n8));
      f6f7_38 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(n9));
      f6f8_38 = A._BigIntImpl__BigIntImpl$from(n5).$mul(0, A._BigIntImpl__BigIntImpl$from(n10));
      f6f9_38 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f7f7_38 = A._BigIntImpl__BigIntImpl$from(f7).$mul(0, A._BigIntImpl__BigIntImpl$from(n9));
      f7f8_38 = A._BigIntImpl__BigIntImpl$from(n6).$mul(0, A._BigIntImpl__BigIntImpl$from(n10));
      f7f9_76 = A._BigIntImpl__BigIntImpl$from(n6).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f8f8_19 = A._BigIntImpl__BigIntImpl$from(f8).$mul(0, A._BigIntImpl__BigIntImpl$from(n10));
      f8f9_38 = A._BigIntImpl__BigIntImpl$from(f8).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f9f9_38 = A._BigIntImpl__BigIntImpl$from(f9).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      h0 = f0f0.$add(0, f1f9_76).$add(0, f2f8_38).$add(0, f3f7_76).$add(0, f4f6_38).$add(0, f5f5_38);
      h1 = f0f1_2.$add(0, f2f9_38).$add(0, f3f8_38).$add(0, f4f7_38).$add(0, f5f6_38);
      h2 = f0f2_2.$add(0, f1f1_2).$add(0, f3f9_76).$add(0, f4f8_38).$add(0, f5f7_76).$add(0, f6f6_19);
      h3 = f0f3_2.$add(0, f1f2_2).$add(0, f4f9_38).$add(0, f5f8_38).$add(0, f6f7_38);
      h4 = f0f4_2.$add(0, f1f3_4).$add(0, f2f2).$add(0, f5f9_76).$add(0, f6f8_38).$add(0, f7f7_38);
      h5 = f0f5_2.$add(0, f1f4_2).$add(0, f2f3_2).$add(0, f6f9_38).$add(0, f7f8_38);
      h6 = f0f6_2.$add(0, f1f5_4).$add(0, f2f4_2).$add(0, f3f3_2).$add(0, f7f9_76).$add(0, f8f8_19);
      h7 = f0f7_2.$add(0, f1f6_2).$add(0, f2f5_2).$add(0, f3f4_2).$add(0, f8f9_38);
      h8 = f0f8_2.$add(0, f1f7_4).$add(0, f2f6_2).$add(0, f3f5_4).$add(0, f4f4).$add(0, f9f9_38);
      h9 = f0f9_2.$add(0, f1f8_2).$add(0, f2f7_2).$add(0, f3f6_2).$add(0, f4f5_2);
      t1 = $.$get$CryptoOps__bitMaskFor25();
      carry0 = h0.$add(0, t1).$shr(0, 26);
      h1 = h1.$add(0, carry0);
      h0 = h0.$sub(0, carry0.$shl(0, 26));
      carry4 = h4.$add(0, t1).$shr(0, 26);
      h5 = h5.$add(0, carry4);
      h4 = h4.$sub(0, carry4.$shl(0, 26));
      t2 = $.$get$CryptoOps__bitMaskFor24();
      carry1 = h1.$add(0, t2).$shr(0, 25);
      h2 = h2.$add(0, carry1);
      h1 = h1.$sub(0, carry1.$shl(0, 25));
      carry5 = h5.$add(0, t2).$shr(0, 25);
      h6 = h6.$add(0, carry5);
      h5 = h5.$sub(0, carry5.$shl(0, 25));
      carry2 = h2.$add(0, t1).$shr(0, 26);
      h3 = h3.$add(0, carry2);
      h2 = h2.$sub(0, carry2.$shl(0, 26));
      carry6 = h6.$add(0, t1).$shr(0, 26);
      h7 = h7.$add(0, carry6);
      h6 = h6.$sub(0, carry6.$shl(0, 26));
      carry3 = h3.$add(0, t2).$shr(0, 25);
      h4 = h4.$add(0, carry3);
      h3 = h3.$sub(0, carry3.$shl(0, 25));
      carry7 = h7.$add(0, t2).$shr(0, 25);
      h8 = h8.$add(0, carry7);
      h7 = h7.$sub(0, carry7.$shl(0, 25));
      carry4 = h4.$add(0, t1).$shr(0, 26);
      h5 = h5.$add(0, carry4);
      h4 = h4.$sub(0, carry4.$shl(0, 26));
      carry8 = h8.$add(0, t1).$shr(0, 26);
      h9 = h9.$add(0, carry8);
      h8 = h8.$sub(0, carry8.$shl(0, 26));
      carry9 = h9.$add(0, t2).$shr(0, 25);
      h0 = h0.$add(0, carry9.$mul(0, A._BigIntImpl__BigIntImpl$from(19)));
      h9 = h9.$sub(0, carry9.$shl(0, 25));
      carry0 = h0.$add(0, t1).$shr(0, 26);
      h1 = h1.$add(0, carry0);
      t1 = h.h;
      B.JSArray_methods.$indexSet(t1, 0, h0.$sub(0, carry0.$shl(0, 26)).toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 1, h1.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 2, h2.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 3, h3.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 4, h4.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 5, h5.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 6, h6.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 7, h7.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 8, h8.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 9, h9.toSigned$1(0, 32).toInt$0(0));
    },
    CryptoOps_feSq2(h, f) {
      var f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, n, n0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, f0f0, f0f1_2, f0f2_2, f0f3_2, f0f4_2, f0f5_2, f0f6_2, f0f7_2, f0f8_2, f0f9_2, f1f1_2, f1f2_2, f1f3_4, f1f4_2, f1f5_4, f1f6_2, f1f7_4, f1f8_2, f1f9_76, f2f2, f2f3_2, f2f4_2, f2f5_2, f2f6_2, f2f7_2, f2f8_38, f2f9_38, f3f3_2, f3f4_2, f3f5_4, f3f6_2, f3f7_76, f3f8_38, f3f9_76, f4f4, f4f5_2, f4f6_38, f4f7_38, f4f8_38, f4f9_38, f5f5_38, f5f6_38, f5f7_76, f5f8_38, f5f9_76, f6f6_19, f6f7_38, f6f8_38, f6f9_38, f7f7_38, f7f8_38, f7f9_76, f8f8_19, f8f9_38, f9f9_38, h0, h1, h2, h3, h4, h5, h6, h7, h8, h9, carry0, carry4, carry1, carry5, carry2, carry6, carry3, carry7, carry8, carry9,
        t1 = f.h,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      f0 = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      f1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      f2 = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      f3 = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      f4 = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      f5 = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      f6 = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      f7 = t1[7];
      if (8 >= t2)
        return A.ioore(t1, 8);
      f8 = t1[8];
      if (9 >= t2)
        return A.ioore(t1, 9);
      f9 = t1[9];
      n = B.JSInt_methods.toSigned$1(2 * f0, 32);
      n0 = B.JSInt_methods.toSigned$1(2 * f1, 32);
      n1 = B.JSInt_methods.toSigned$1(2 * f2, 32);
      n2 = B.JSInt_methods.toSigned$1(2 * f3, 32);
      n3 = B.JSInt_methods.toSigned$1(2 * f4, 32);
      n4 = B.JSInt_methods.toSigned$1(2 * f5, 32);
      n5 = B.JSInt_methods.toSigned$1(2 * f6, 32);
      n6 = B.JSInt_methods.toSigned$1(2 * f7, 32);
      n7 = B.JSInt_methods.toSigned$1(38 * f5, 32);
      n8 = B.JSInt_methods.toSigned$1(19 * f6, 32);
      n9 = B.JSInt_methods.toSigned$1(38 * f7, 32);
      n10 = B.JSInt_methods.toSigned$1(19 * f8, 32);
      n11 = B.JSInt_methods.toSigned$1(38 * f9, 32);
      f0f0 = A._BigIntImpl__BigIntImpl$from(f0).$mul(0, A._BigIntImpl__BigIntImpl$from(f0));
      f0f1_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f1));
      f0f2_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f2));
      f0f3_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f3));
      f0f4_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f4));
      f0f5_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f5));
      f0f6_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f6));
      f0f7_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f7));
      f0f8_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f8));
      f0f9_2 = A._BigIntImpl__BigIntImpl$from(n).$mul(0, A._BigIntImpl__BigIntImpl$from(f9));
      f1f1_2 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(f1));
      f1f2_2 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(f2));
      f1f3_4 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(n2));
      f1f4_2 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(f4));
      f1f5_4 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(n4));
      f1f6_2 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(f6));
      f1f7_4 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(n6));
      f1f8_2 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(f8));
      f1f9_76 = A._BigIntImpl__BigIntImpl$from(n0).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f2f2 = A._BigIntImpl__BigIntImpl$from(f2).$mul(0, A._BigIntImpl__BigIntImpl$from(f2));
      f2f3_2 = A._BigIntImpl__BigIntImpl$from(n1).$mul(0, A._BigIntImpl__BigIntImpl$from(f3));
      f2f4_2 = A._BigIntImpl__BigIntImpl$from(n1).$mul(0, A._BigIntImpl__BigIntImpl$from(f4));
      f2f5_2 = A._BigIntImpl__BigIntImpl$from(n1).$mul(0, A._BigIntImpl__BigIntImpl$from(f5));
      f2f6_2 = A._BigIntImpl__BigIntImpl$from(n1).$mul(0, A._BigIntImpl__BigIntImpl$from(f6));
      f2f7_2 = A._BigIntImpl__BigIntImpl$from(n1).$mul(0, A._BigIntImpl__BigIntImpl$from(f7));
      f2f8_38 = A._BigIntImpl__BigIntImpl$from(n1).$mul(0, A._BigIntImpl__BigIntImpl$from(n10));
      f2f9_38 = A._BigIntImpl__BigIntImpl$from(f2).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f3f3_2 = A._BigIntImpl__BigIntImpl$from(n2).$mul(0, A._BigIntImpl__BigIntImpl$from(f3));
      f3f4_2 = A._BigIntImpl__BigIntImpl$from(n2).$mul(0, A._BigIntImpl__BigIntImpl$from(f4));
      f3f5_4 = A._BigIntImpl__BigIntImpl$from(n2).$mul(0, A._BigIntImpl__BigIntImpl$from(n4));
      f3f6_2 = A._BigIntImpl__BigIntImpl$from(n2).$mul(0, A._BigIntImpl__BigIntImpl$from(f6));
      f3f7_76 = A._BigIntImpl__BigIntImpl$from(n2).$mul(0, A._BigIntImpl__BigIntImpl$from(n9));
      f3f8_38 = A._BigIntImpl__BigIntImpl$from(n2).$mul(0, A._BigIntImpl__BigIntImpl$from(n10));
      f3f9_76 = A._BigIntImpl__BigIntImpl$from(n2).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f4f4 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(f4));
      f4f5_2 = A._BigIntImpl__BigIntImpl$from(n3).$mul(0, A._BigIntImpl__BigIntImpl$from(f5));
      f4f6_38 = A._BigIntImpl__BigIntImpl$from(n3).$mul(0, A._BigIntImpl__BigIntImpl$from(n8));
      f4f7_38 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(n9));
      f4f8_38 = A._BigIntImpl__BigIntImpl$from(n3).$mul(0, A._BigIntImpl__BigIntImpl$from(n10));
      f4f9_38 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f5f5_38 = A._BigIntImpl__BigIntImpl$from(f5).$mul(0, A._BigIntImpl__BigIntImpl$from(n7));
      f5f6_38 = A._BigIntImpl__BigIntImpl$from(n4).$mul(0, A._BigIntImpl__BigIntImpl$from(n8));
      f5f7_76 = A._BigIntImpl__BigIntImpl$from(n4).$mul(0, A._BigIntImpl__BigIntImpl$from(n9));
      f5f8_38 = A._BigIntImpl__BigIntImpl$from(n4).$mul(0, A._BigIntImpl__BigIntImpl$from(n10));
      f5f9_76 = A._BigIntImpl__BigIntImpl$from(n4).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f6f6_19 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(n8));
      f6f7_38 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(n9));
      f6f8_38 = A._BigIntImpl__BigIntImpl$from(n5).$mul(0, A._BigIntImpl__BigIntImpl$from(n10));
      f6f9_38 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f7f7_38 = A._BigIntImpl__BigIntImpl$from(f7).$mul(0, A._BigIntImpl__BigIntImpl$from(n9));
      f7f8_38 = A._BigIntImpl__BigIntImpl$from(n6).$mul(0, A._BigIntImpl__BigIntImpl$from(n10));
      f7f9_76 = A._BigIntImpl__BigIntImpl$from(n6).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f8f8_19 = A._BigIntImpl__BigIntImpl$from(f8).$mul(0, A._BigIntImpl__BigIntImpl$from(n10));
      f8f9_38 = A._BigIntImpl__BigIntImpl$from(f8).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      f9f9_38 = A._BigIntImpl__BigIntImpl$from(f9).$mul(0, A._BigIntImpl__BigIntImpl$from(n11));
      h0 = f0f0.$add(0, f1f9_76).$add(0, f2f8_38).$add(0, f3f7_76).$add(0, f4f6_38).$add(0, f5f5_38);
      h1 = f0f1_2.$add(0, f2f9_38).$add(0, f3f8_38).$add(0, f4f7_38).$add(0, f5f6_38);
      h2 = f0f2_2.$add(0, f1f1_2).$add(0, f3f9_76).$add(0, f4f8_38).$add(0, f5f7_76).$add(0, f6f6_19);
      h3 = f0f3_2.$add(0, f1f2_2).$add(0, f4f9_38).$add(0, f5f8_38).$add(0, f6f7_38);
      h4 = f0f4_2.$add(0, f1f3_4).$add(0, f2f2).$add(0, f5f9_76).$add(0, f6f8_38).$add(0, f7f7_38);
      h5 = f0f5_2.$add(0, f1f4_2).$add(0, f2f3_2).$add(0, f6f9_38).$add(0, f7f8_38);
      h6 = f0f6_2.$add(0, f1f5_4).$add(0, f2f4_2).$add(0, f3f3_2).$add(0, f7f9_76).$add(0, f8f8_19);
      h7 = f0f7_2.$add(0, f1f6_2).$add(0, f2f5_2).$add(0, f3f4_2).$add(0, f8f9_38);
      h8 = f0f8_2.$add(0, f1f7_4).$add(0, f2f6_2).$add(0, f3f5_4).$add(0, f4f4).$add(0, f9f9_38);
      h9 = f0f9_2.$add(0, f1f8_2).$add(0, f2f7_2).$add(0, f3f6_2).$add(0, f4f5_2);
      h0 = h0.$add(0, h0);
      h1 = h1.$add(0, h1);
      h2 = h2.$add(0, h2);
      h3 = h3.$add(0, h3);
      h4 = h4.$add(0, h4);
      h5 = h5.$add(0, h5);
      h6 = h6.$add(0, h6);
      h7 = h7.$add(0, h7);
      h8 = h8.$add(0, h8);
      h9 = h9.$add(0, h9);
      t1 = $.$get$CryptoOps__bitMaskFor25();
      carry0 = h0.$add(0, t1).$shr(0, 26);
      h1 = h1.$add(0, carry0);
      h0 = h0.$sub(0, carry0.$shl(0, 26));
      carry4 = h4.$add(0, t1).$shr(0, 26);
      h5 = h5.$add(0, carry4);
      h4 = h4.$sub(0, carry4.$shl(0, 26));
      t2 = $.$get$CryptoOps__bitMaskFor24();
      carry1 = h1.$add(0, t2).$shr(0, 25);
      h2 = h2.$add(0, carry1);
      h1 = h1.$sub(0, carry1.$shl(0, 25));
      carry5 = h5.$add(0, t2).$shr(0, 25);
      h6 = h6.$add(0, carry5);
      h5 = h5.$sub(0, carry5.$shl(0, 25));
      carry2 = h2.$add(0, t1).$shr(0, 26);
      h3 = h3.$add(0, carry2);
      h2 = h2.$sub(0, carry2.$shl(0, 26));
      carry6 = h6.$add(0, t1).$shr(0, 26);
      h7 = h7.$add(0, carry6);
      h6 = h6.$sub(0, carry6.$shl(0, 26));
      carry3 = h3.$add(0, t2).$shr(0, 25);
      h4 = h4.$add(0, carry3);
      h3 = h3.$sub(0, carry3.$shl(0, 25));
      carry7 = h7.$add(0, t2).$shr(0, 25);
      h8 = h8.$add(0, carry7);
      h7 = h7.$sub(0, carry7.$shl(0, 25));
      carry4 = h4.$add(0, t1).$shr(0, 26);
      h5 = h5.$add(0, carry4);
      h4 = h4.$sub(0, carry4.$shl(0, 26));
      carry8 = h8.$add(0, t1).$shr(0, 26);
      h9 = h9.$add(0, carry8);
      h8 = h8.$sub(0, carry8.$shl(0, 26));
      carry9 = h9.$add(0, t2).$shr(0, 25);
      h0 = h0.$add(0, carry9.$mul(0, A._BigIntImpl__BigIntImpl$from(19)));
      h9 = h9.$sub(0, carry9.$shl(0, 25));
      carry0 = h0.$add(0, t1).$shr(0, 26);
      h1 = h1.$add(0, carry0);
      t1 = h.h;
      B.JSArray_methods.$indexSet(t1, 0, h0.$sub(0, carry0.$shl(0, 26)).toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 1, h1.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 2, h2.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 3, h3.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 4, h4.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 5, h5.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 6, h6.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 7, h7.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 8, h8.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 9, h9.toSigned$1(0, 32).toInt$0(0));
    },
    CryptoOps_feSub(h, f, g) {
      var f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, g0, g1, g2, g3, g4, g5, g6, g7, g8, g9,
        t1 = f.h,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      f0 = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      f1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      f2 = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      f3 = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      f4 = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      f5 = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      f6 = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      f7 = t1[7];
      if (8 >= t2)
        return A.ioore(t1, 8);
      f8 = t1[8];
      if (9 >= t2)
        return A.ioore(t1, 9);
      f9 = t1[9];
      t1 = g.h;
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      g0 = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      g1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      g2 = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      g3 = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      g4 = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      g5 = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      g6 = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      g7 = t1[7];
      if (8 >= t2)
        return A.ioore(t1, 8);
      g8 = t1[8];
      if (9 >= t2)
        return A.ioore(t1, 9);
      g9 = t1[9];
      t1 = h.h;
      B.JSArray_methods.$indexSet(t1, 0, f0 - g0);
      B.JSArray_methods.$indexSet(t1, 1, f1 - g1);
      B.JSArray_methods.$indexSet(t1, 2, f2 - g2);
      B.JSArray_methods.$indexSet(t1, 3, f3 - g3);
      B.JSArray_methods.$indexSet(t1, 4, f4 - g4);
      B.JSArray_methods.$indexSet(t1, 5, f5 - g5);
      B.JSArray_methods.$indexSet(t1, 6, f6 - g6);
      B.JSArray_methods.$indexSet(t1, 7, f7 - g7);
      B.JSArray_methods.$indexSet(t1, 8, f8 - g8);
      B.JSArray_methods.$indexSet(t1, 9, f9 - g9);
    },
    CryptoOps_feTobytes(s, h) {
      var t1, h0, h1, h2, h3, h4, h5, h6, h7, h8, h9, q, carry0, carry1, carry2, carry3, carry4, carry5, carry6, carry7, carry8, sBig, i, t2;
      A._BytesHelper_asMin32(s, "feTobytes");
      t1 = h.h;
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      h0 = A._BigIntImpl__BigIntImpl$from(t1[0]);
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      h1 = A._BigIntImpl__BigIntImpl$from(t1[1]);
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      h2 = A._BigIntImpl__BigIntImpl$from(t1[2]);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      h3 = A._BigIntImpl__BigIntImpl$from(t1[3]);
      if (4 >= t1.length)
        return A.ioore(t1, 4);
      h4 = A._BigIntImpl__BigIntImpl$from(t1[4]);
      if (5 >= t1.length)
        return A.ioore(t1, 5);
      h5 = A._BigIntImpl__BigIntImpl$from(t1[5]);
      if (6 >= t1.length)
        return A.ioore(t1, 6);
      h6 = A._BigIntImpl__BigIntImpl$from(t1[6]);
      if (7 >= t1.length)
        return A.ioore(t1, 7);
      h7 = A._BigIntImpl__BigIntImpl$from(t1[7]);
      if (8 >= t1.length)
        return A.ioore(t1, 8);
      h8 = A._BigIntImpl__BigIntImpl$from(t1[8]);
      if (9 >= t1.length)
        return A.ioore(t1, 9);
      h9 = A._BigIntImpl__BigIntImpl$from(t1[9]);
      q = h9.$add(0, h8.$add(0, h7.$add(0, h6.$add(0, h5.$add(0, h4.$add(0, h3.$add(0, h2.$add(0, h1.$add(0, h0.$add(0, A._BigIntImpl__BigIntImpl$from(19).$mul(0, h9).$add(0, A._BigIntImpl__BigIntImpl$from(16777216)).$shr(0, 25)).$shr(0, 26)).$shr(0, 25)).$shr(0, 26)).$shr(0, 25)).$shr(0, 26)).$shr(0, 25)).$shr(0, 26)).$shr(0, 25)).$shr(0, 26)).$shr(0, 25);
      h0 = h0.$add(0, A._BigIntImpl__BigIntImpl$from(19).$mul(0, q));
      carry0 = h0.$shr(0, 26);
      h1 = h1.$add(0, carry0);
      h0 = h0.$sub(0, carry0.$shl(0, 26));
      carry1 = h1.$shr(0, 25);
      h2 = h2.$add(0, carry1);
      h1 = h1.$sub(0, carry1.$shl(0, 25));
      carry2 = h2.$shr(0, 26);
      h3 = h3.$add(0, carry2);
      h2 = h2.$sub(0, carry2.$shl(0, 26));
      carry3 = h3.$shr(0, 25);
      h4 = h4.$add(0, carry3);
      h3 = h3.$sub(0, carry3.$shl(0, 25));
      carry4 = h4.$shr(0, 26);
      h5 = h5.$add(0, carry4);
      h4 = h4.$sub(0, carry4.$shl(0, 26));
      carry5 = h5.$shr(0, 25);
      h6 = h6.$add(0, carry5);
      h5 = h5.$sub(0, carry5.$shl(0, 25));
      carry6 = h6.$shr(0, 26);
      h7 = h7.$add(0, carry6);
      h6 = h6.$sub(0, carry6.$shl(0, 26));
      carry7 = h7.$shr(0, 25);
      h8 = h8.$add(0, carry7);
      h7 = h7.$sub(0, carry7.$shl(0, 25));
      carry8 = h8.$shr(0, 26);
      h9 = h9.$add(0, carry8);
      h8 = h8.$sub(0, carry8.$shl(0, 26));
      h9 = h9.$sub(0, h9.$shr(0, 25).$shl(0, 25));
      sBig = A.List_List$filled(32, $.$get$_BigIntImpl_zero(), false, type$.BigInt);
      B.JSArray_methods.$indexSet(sBig, 0, h0.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 1, h0.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 2, h0.$shr(0, 16));
      B.JSArray_methods.$indexSet(sBig, 3, h0.$shr(0, 24).$or(0, h1.$shl(0, 2)));
      B.JSArray_methods.$indexSet(sBig, 4, h1.$shr(0, 6));
      B.JSArray_methods.$indexSet(sBig, 5, h1.$shr(0, 14));
      B.JSArray_methods.$indexSet(sBig, 6, h1.$shr(0, 22).$or(0, h2.$shl(0, 3)));
      B.JSArray_methods.$indexSet(sBig, 7, h2.$shr(0, 5));
      B.JSArray_methods.$indexSet(sBig, 8, h2.$shr(0, 13));
      B.JSArray_methods.$indexSet(sBig, 9, h2.$shr(0, 21).$or(0, h3.$shl(0, 5)));
      B.JSArray_methods.$indexSet(sBig, 10, h3.$shr(0, 3));
      B.JSArray_methods.$indexSet(sBig, 11, h3.$shr(0, 11));
      B.JSArray_methods.$indexSet(sBig, 12, h3.$shr(0, 19).$or(0, h4.$shl(0, 6)));
      B.JSArray_methods.$indexSet(sBig, 13, h4.$shr(0, 2));
      B.JSArray_methods.$indexSet(sBig, 14, h4.$shr(0, 10));
      B.JSArray_methods.$indexSet(sBig, 15, h4.$shr(0, 18));
      B.JSArray_methods.$indexSet(sBig, 16, h5.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 17, h5.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 18, h5.$shr(0, 16));
      B.JSArray_methods.$indexSet(sBig, 19, h5.$shr(0, 24).$or(0, h6.$shl(0, 1)));
      B.JSArray_methods.$indexSet(sBig, 20, h6.$shr(0, 7));
      B.JSArray_methods.$indexSet(sBig, 21, h6.$shr(0, 15));
      B.JSArray_methods.$indexSet(sBig, 22, h6.$shr(0, 23).$or(0, h7.$shl(0, 3)));
      B.JSArray_methods.$indexSet(sBig, 23, h7.$shr(0, 5));
      B.JSArray_methods.$indexSet(sBig, 24, h7.$shr(0, 13));
      B.JSArray_methods.$indexSet(sBig, 25, h7.$shr(0, 21).$or(0, h8.$shl(0, 4)));
      B.JSArray_methods.$indexSet(sBig, 26, h8.$shr(0, 4));
      B.JSArray_methods.$indexSet(sBig, 27, h8.$shr(0, 12));
      B.JSArray_methods.$indexSet(sBig, 28, h8.$shr(0, 20).$or(0, h9.$shl(0, 6)));
      B.JSArray_methods.$indexSet(sBig, 29, h9.$shr(0, 2));
      B.JSArray_methods.$indexSet(sBig, 30, h9.$shr(0, 10));
      B.JSArray_methods.$indexSet(sBig, 31, h9.$shr(0, 18));
      for (i = 0; i < s.length; ++i) {
        if (!(i < 32))
          return A.ioore(sBig, i);
        t1 = sBig[i];
        t2 = $.$get$_BigIntImpl_one();
        B.JSArray_methods.$indexSet(s, i, t1.$and(0, t2.$shl(0, 8).$sub(0, t2)).toInt$0(0));
      }
    },
    CryptoOps_feMul(h, f, g) {
      var f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, g0, g1, g2, g3, g4, g5, g6, g7, g8, g9, n, n0, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, f0g0, f0g1, f0g2, f0g3, f0g4, f0g5, f0g6, f0g7, f0g8, f0g9, f1g0, f1g1_2, f1g2, f1g3_2, f1g4, f1g5_2, f1g6, f1g7_2, f1g8, f1g9_38, f2g0, f2g1, f2g2, f2g3, f2g4, f2g5, f2g6, f2g7, f2g8_19, f2g9_19, f3g0, f3g1_2, f3g2, f3g3_2, f3g4, f3g5_2, f3g6, f3g7_38, f3g8_19, f3g9_38, f4g0, f4g1, f4g2, f4g3, f4g4, f4g5, f4g6_19, f4g7_19, f4g8_19, f4g9_19, f5g0, f5g1_2, f5g2, f5g3_2, f5g4, f5g5_38, f5g6_19, f5g7_38, f5g8_19, f5g9_38, f6g0, f6g1, f6g2, f6g3, f6g4_19, f6g5_19, f6g6_19, f6g7_19, f6g8_19, f6g9_19, f7g0, f7g1_2, f7g2, f7g3_38, f7g4_19, f7g5_38, f7g6_19, f7g7_38, f7g8_19, f7g9_38, f8g0, f8g1, f8g2_19, f8g3_19, f8g4_19, f8g5_19, f8g6_19, f8g7_19, f8g8_19, f8g9_19, f9g0, f9g1_38, f9g2_19, f9g3_38, f9g4_19, f9g5_38, f9g6_19, f9g7_38, f9g8_19, f9g9_38, h0, h1, h2, h3, h4, h5, h6, h7, h8, h9, carry0, carry4, carry1, carry5, carry2, carry6, carry3, carry7, carry8, carry9,
        t1 = f.h,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      f0 = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      f1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      f2 = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      f3 = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      f4 = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      f5 = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      f6 = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      f7 = t1[7];
      if (8 >= t2)
        return A.ioore(t1, 8);
      f8 = t1[8];
      if (9 >= t2)
        return A.ioore(t1, 9);
      f9 = t1[9];
      t1 = g.h;
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      g0 = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      g1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      g2 = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      g3 = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      g4 = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      g5 = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      g6 = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      g7 = t1[7];
      if (8 >= t2)
        return A.ioore(t1, 8);
      g8 = t1[8];
      if (9 >= t2)
        return A.ioore(t1, 9);
      g9 = t1[9];
      n = B.JSInt_methods.toSigned$1(19 * g1, 32);
      n0 = B.JSInt_methods.toSigned$1(19 * g2, 32);
      n1 = B.JSInt_methods.toSigned$1(19 * g3, 32);
      n2 = B.JSInt_methods.toSigned$1(19 * g4, 32);
      n3 = B.JSInt_methods.toSigned$1(19 * g5, 32);
      n4 = B.JSInt_methods.toSigned$1(19 * g6, 32);
      n5 = B.JSInt_methods.toSigned$1(19 * g7, 32);
      n6 = B.JSInt_methods.toSigned$1(19 * g8, 32);
      n7 = B.JSInt_methods.toSigned$1(19 * g9, 32);
      n8 = B.JSInt_methods.toSigned$1(2 * f1, 32);
      n9 = B.JSInt_methods.toSigned$1(2 * f3, 32);
      n10 = B.JSInt_methods.toSigned$1(2 * f5, 32);
      n11 = B.JSInt_methods.toSigned$1(2 * f7, 32);
      n12 = B.JSInt_methods.toSigned$1(2 * f9, 32);
      f0g0 = A._BigIntImpl__BigIntImpl$from(f0).$mul(0, A._BigIntImpl__BigIntImpl$from(g0));
      f0g1 = A._BigIntImpl__BigIntImpl$from(f0).$mul(0, A._BigIntImpl__BigIntImpl$from(g1));
      f0g2 = A._BigIntImpl__BigIntImpl$from(f0).$mul(0, A._BigIntImpl__BigIntImpl$from(g2));
      f0g3 = A._BigIntImpl__BigIntImpl$from(f0).$mul(0, A._BigIntImpl__BigIntImpl$from(g3));
      f0g4 = A._BigIntImpl__BigIntImpl$from(f0).$mul(0, A._BigIntImpl__BigIntImpl$from(g4));
      f0g5 = A._BigIntImpl__BigIntImpl$from(f0).$mul(0, A._BigIntImpl__BigIntImpl$from(g5));
      f0g6 = A._BigIntImpl__BigIntImpl$from(f0).$mul(0, A._BigIntImpl__BigIntImpl$from(g6));
      f0g7 = A._BigIntImpl__BigIntImpl$from(f0).$mul(0, A._BigIntImpl__BigIntImpl$from(g7));
      f0g8 = A._BigIntImpl__BigIntImpl$from(f0).$mul(0, A._BigIntImpl__BigIntImpl$from(g8));
      f0g9 = A._BigIntImpl__BigIntImpl$from(f0).$mul(0, A._BigIntImpl__BigIntImpl$from(g9));
      f1g0 = A._BigIntImpl__BigIntImpl$from(f1).$mul(0, A._BigIntImpl__BigIntImpl$from(g0));
      f1g1_2 = A._BigIntImpl__BigIntImpl$from(n8).$mul(0, A._BigIntImpl__BigIntImpl$from(g1));
      f1g2 = A._BigIntImpl__BigIntImpl$from(f1).$mul(0, A._BigIntImpl__BigIntImpl$from(g2));
      f1g3_2 = A._BigIntImpl__BigIntImpl$from(n8).$mul(0, A._BigIntImpl__BigIntImpl$from(g3));
      f1g4 = A._BigIntImpl__BigIntImpl$from(f1).$mul(0, A._BigIntImpl__BigIntImpl$from(g4));
      f1g5_2 = A._BigIntImpl__BigIntImpl$from(n8).$mul(0, A._BigIntImpl__BigIntImpl$from(g5));
      f1g6 = A._BigIntImpl__BigIntImpl$from(f1).$mul(0, A._BigIntImpl__BigIntImpl$from(g6));
      f1g7_2 = A._BigIntImpl__BigIntImpl$from(n8).$mul(0, A._BigIntImpl__BigIntImpl$from(g7));
      f1g8 = A._BigIntImpl__BigIntImpl$from(f1).$mul(0, A._BigIntImpl__BigIntImpl$from(g8));
      f1g9_38 = A._BigIntImpl__BigIntImpl$from(n8).$mul(0, A._BigIntImpl__BigIntImpl$from(n7));
      f2g0 = A._BigIntImpl__BigIntImpl$from(f2).$mul(0, A._BigIntImpl__BigIntImpl$from(g0));
      f2g1 = A._BigIntImpl__BigIntImpl$from(f2).$mul(0, A._BigIntImpl__BigIntImpl$from(g1));
      f2g2 = A._BigIntImpl__BigIntImpl$from(f2).$mul(0, A._BigIntImpl__BigIntImpl$from(g2));
      f2g3 = A._BigIntImpl__BigIntImpl$from(f2).$mul(0, A._BigIntImpl__BigIntImpl$from(g3));
      f2g4 = A._BigIntImpl__BigIntImpl$from(f2).$mul(0, A._BigIntImpl__BigIntImpl$from(g4));
      f2g5 = A._BigIntImpl__BigIntImpl$from(f2).$mul(0, A._BigIntImpl__BigIntImpl$from(g5));
      f2g6 = A._BigIntImpl__BigIntImpl$from(f2).$mul(0, A._BigIntImpl__BigIntImpl$from(g6));
      f2g7 = A._BigIntImpl__BigIntImpl$from(f2).$mul(0, A._BigIntImpl__BigIntImpl$from(g7));
      f2g8_19 = A._BigIntImpl__BigIntImpl$from(f2).$mul(0, A._BigIntImpl__BigIntImpl$from(n6));
      f2g9_19 = A._BigIntImpl__BigIntImpl$from(f2).$mul(0, A._BigIntImpl__BigIntImpl$from(n7));
      f3g0 = A._BigIntImpl__BigIntImpl$from(f3).$mul(0, A._BigIntImpl__BigIntImpl$from(g0));
      f3g1_2 = A._BigIntImpl__BigIntImpl$from(n9).$mul(0, A._BigIntImpl__BigIntImpl$from(g1));
      f3g2 = A._BigIntImpl__BigIntImpl$from(f3).$mul(0, A._BigIntImpl__BigIntImpl$from(g2));
      f3g3_2 = A._BigIntImpl__BigIntImpl$from(n9).$mul(0, A._BigIntImpl__BigIntImpl$from(g3));
      f3g4 = A._BigIntImpl__BigIntImpl$from(f3).$mul(0, A._BigIntImpl__BigIntImpl$from(g4));
      f3g5_2 = A._BigIntImpl__BigIntImpl$from(n9).$mul(0, A._BigIntImpl__BigIntImpl$from(g5));
      f3g6 = A._BigIntImpl__BigIntImpl$from(f3).$mul(0, A._BigIntImpl__BigIntImpl$from(g6));
      f3g7_38 = A._BigIntImpl__BigIntImpl$from(n9).$mul(0, A._BigIntImpl__BigIntImpl$from(n5));
      f3g8_19 = A._BigIntImpl__BigIntImpl$from(f3).$mul(0, A._BigIntImpl__BigIntImpl$from(n6));
      f3g9_38 = A._BigIntImpl__BigIntImpl$from(n9).$mul(0, A._BigIntImpl__BigIntImpl$from(n7));
      f4g0 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(g0));
      f4g1 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(g1));
      f4g2 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(g2));
      f4g3 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(g3));
      f4g4 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(g4));
      f4g5 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(g5));
      f4g6_19 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(n4));
      f4g7_19 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(n5));
      f4g8_19 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(n6));
      f4g9_19 = A._BigIntImpl__BigIntImpl$from(f4).$mul(0, A._BigIntImpl__BigIntImpl$from(n7));
      f5g0 = A._BigIntImpl__BigIntImpl$from(f5).$mul(0, A._BigIntImpl__BigIntImpl$from(g0));
      f5g1_2 = A._BigIntImpl__BigIntImpl$from(n10).$mul(0, A._BigIntImpl__BigIntImpl$from(g1));
      f5g2 = A._BigIntImpl__BigIntImpl$from(f5).$mul(0, A._BigIntImpl__BigIntImpl$from(g2));
      f5g3_2 = A._BigIntImpl__BigIntImpl$from(n10).$mul(0, A._BigIntImpl__BigIntImpl$from(g3));
      f5g4 = A._BigIntImpl__BigIntImpl$from(f5).$mul(0, A._BigIntImpl__BigIntImpl$from(g4));
      f5g5_38 = A._BigIntImpl__BigIntImpl$from(n10).$mul(0, A._BigIntImpl__BigIntImpl$from(n3));
      f5g6_19 = A._BigIntImpl__BigIntImpl$from(f5).$mul(0, A._BigIntImpl__BigIntImpl$from(n4));
      f5g7_38 = A._BigIntImpl__BigIntImpl$from(n10).$mul(0, A._BigIntImpl__BigIntImpl$from(n5));
      f5g8_19 = A._BigIntImpl__BigIntImpl$from(f5).$mul(0, A._BigIntImpl__BigIntImpl$from(n6));
      f5g9_38 = A._BigIntImpl__BigIntImpl$from(n10).$mul(0, A._BigIntImpl__BigIntImpl$from(n7));
      f6g0 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(g0));
      f6g1 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(g1));
      f6g2 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(g2));
      f6g3 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(g3));
      f6g4_19 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(n2));
      f6g5_19 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(n3));
      f6g6_19 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(n4));
      f6g7_19 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(n5));
      f6g8_19 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(n6));
      f6g9_19 = A._BigIntImpl__BigIntImpl$from(f6).$mul(0, A._BigIntImpl__BigIntImpl$from(n7));
      f7g0 = A._BigIntImpl__BigIntImpl$from(f7).$mul(0, A._BigIntImpl__BigIntImpl$from(g0));
      f7g1_2 = A._BigIntImpl__BigIntImpl$from(n11).$mul(0, A._BigIntImpl__BigIntImpl$from(g1));
      f7g2 = A._BigIntImpl__BigIntImpl$from(f7).$mul(0, A._BigIntImpl__BigIntImpl$from(g2));
      f7g3_38 = A._BigIntImpl__BigIntImpl$from(n11).$mul(0, A._BigIntImpl__BigIntImpl$from(n1));
      f7g4_19 = A._BigIntImpl__BigIntImpl$from(f7).$mul(0, A._BigIntImpl__BigIntImpl$from(n2));
      f7g5_38 = A._BigIntImpl__BigIntImpl$from(n11).$mul(0, A._BigIntImpl__BigIntImpl$from(n3));
      f7g6_19 = A._BigIntImpl__BigIntImpl$from(f7).$mul(0, A._BigIntImpl__BigIntImpl$from(n4));
      f7g7_38 = A._BigIntImpl__BigIntImpl$from(n11).$mul(0, A._BigIntImpl__BigIntImpl$from(n5));
      f7g8_19 = A._BigIntImpl__BigIntImpl$from(f7).$mul(0, A._BigIntImpl__BigIntImpl$from(n6));
      f7g9_38 = A._BigIntImpl__BigIntImpl$from(n11).$mul(0, A._BigIntImpl__BigIntImpl$from(n7));
      f8g0 = A._BigIntImpl__BigIntImpl$from(f8).$mul(0, A._BigIntImpl__BigIntImpl$from(g0));
      f8g1 = A._BigIntImpl__BigIntImpl$from(f8).$mul(0, A._BigIntImpl__BigIntImpl$from(g1));
      f8g2_19 = A._BigIntImpl__BigIntImpl$from(f8).$mul(0, A._BigIntImpl__BigIntImpl$from(n0));
      f8g3_19 = A._BigIntImpl__BigIntImpl$from(f8).$mul(0, A._BigIntImpl__BigIntImpl$from(n1));
      f8g4_19 = A._BigIntImpl__BigIntImpl$from(f8).$mul(0, A._BigIntImpl__BigIntImpl$from(n2));
      f8g5_19 = A._BigIntImpl__BigIntImpl$from(f8).$mul(0, A._BigIntImpl__BigIntImpl$from(n3));
      f8g6_19 = A._BigIntImpl__BigIntImpl$from(f8).$mul(0, A._BigIntImpl__BigIntImpl$from(n4));
      f8g7_19 = A._BigIntImpl__BigIntImpl$from(f8).$mul(0, A._BigIntImpl__BigIntImpl$from(n5));
      f8g8_19 = A._BigIntImpl__BigIntImpl$from(f8).$mul(0, A._BigIntImpl__BigIntImpl$from(n6));
      f8g9_19 = A._BigIntImpl__BigIntImpl$from(f8).$mul(0, A._BigIntImpl__BigIntImpl$from(n7));
      f9g0 = A._BigIntImpl__BigIntImpl$from(f9).$mul(0, A._BigIntImpl__BigIntImpl$from(g0));
      f9g1_38 = A._BigIntImpl__BigIntImpl$from(n12).$mul(0, A._BigIntImpl__BigIntImpl$from(n));
      f9g2_19 = A._BigIntImpl__BigIntImpl$from(f9).$mul(0, A._BigIntImpl__BigIntImpl$from(n0));
      f9g3_38 = A._BigIntImpl__BigIntImpl$from(n12).$mul(0, A._BigIntImpl__BigIntImpl$from(n1));
      f9g4_19 = A._BigIntImpl__BigIntImpl$from(f9).$mul(0, A._BigIntImpl__BigIntImpl$from(n2));
      f9g5_38 = A._BigIntImpl__BigIntImpl$from(n12).$mul(0, A._BigIntImpl__BigIntImpl$from(n3));
      f9g6_19 = A._BigIntImpl__BigIntImpl$from(f9).$mul(0, A._BigIntImpl__BigIntImpl$from(n4));
      f9g7_38 = A._BigIntImpl__BigIntImpl$from(n12).$mul(0, A._BigIntImpl__BigIntImpl$from(n5));
      f9g8_19 = A._BigIntImpl__BigIntImpl$from(f9).$mul(0, A._BigIntImpl__BigIntImpl$from(n6));
      f9g9_38 = A._BigIntImpl__BigIntImpl$from(n12).$mul(0, A._BigIntImpl__BigIntImpl$from(n7));
      h0 = f0g0.$add(0, f1g9_38).$add(0, f2g8_19).$add(0, f3g7_38).$add(0, f4g6_19).$add(0, f5g5_38).$add(0, f6g4_19).$add(0, f7g3_38).$add(0, f8g2_19).$add(0, f9g1_38);
      h1 = f0g1.$add(0, f1g0).$add(0, f2g9_19).$add(0, f3g8_19).$add(0, f4g7_19).$add(0, f5g6_19).$add(0, f6g5_19).$add(0, f7g4_19).$add(0, f8g3_19).$add(0, f9g2_19);
      h2 = f0g2.$add(0, f1g1_2).$add(0, f2g0).$add(0, f3g9_38).$add(0, f4g8_19).$add(0, f5g7_38).$add(0, f6g6_19).$add(0, f7g5_38).$add(0, f8g4_19).$add(0, f9g3_38);
      h3 = f0g3.$add(0, f1g2).$add(0, f2g1).$add(0, f3g0).$add(0, f4g9_19).$add(0, f5g8_19).$add(0, f6g7_19).$add(0, f7g6_19).$add(0, f8g5_19).$add(0, f9g4_19);
      h4 = f0g4.$add(0, f1g3_2).$add(0, f2g2).$add(0, f3g1_2).$add(0, f4g0).$add(0, f5g9_38).$add(0, f6g8_19).$add(0, f7g7_38).$add(0, f8g6_19).$add(0, f9g5_38);
      h5 = f0g5.$add(0, f1g4).$add(0, f2g3).$add(0, f3g2).$add(0, f4g1).$add(0, f5g0).$add(0, f6g9_19).$add(0, f7g8_19).$add(0, f8g7_19).$add(0, f9g6_19);
      h6 = f0g6.$add(0, f1g5_2).$add(0, f2g4).$add(0, f3g3_2).$add(0, f4g2).$add(0, f5g1_2).$add(0, f6g0).$add(0, f7g9_38).$add(0, f8g8_19).$add(0, f9g7_38);
      h7 = f0g7.$add(0, f1g6).$add(0, f2g5).$add(0, f3g4).$add(0, f4g3).$add(0, f5g2).$add(0, f6g1).$add(0, f7g0).$add(0, f8g9_19).$add(0, f9g8_19);
      h8 = f0g8.$add(0, f1g7_2).$add(0, f2g6).$add(0, f3g5_2).$add(0, f4g4).$add(0, f5g3_2).$add(0, f6g2).$add(0, f7g1_2).$add(0, f8g0).$add(0, f9g9_38);
      h9 = f0g9.$add(0, f1g8).$add(0, f2g7).$add(0, f3g6).$add(0, f4g5).$add(0, f5g4).$add(0, f6g3).$add(0, f7g2).$add(0, f8g1).$add(0, f9g0);
      t1 = $.$get$CryptoOps__bitMaskFor25();
      carry0 = h0.$add(0, t1).$shr(0, 26);
      h1 = h1.$add(0, carry0);
      h0 = h0.$sub(0, carry0.$shl(0, 26));
      carry4 = h4.$add(0, t1).$shr(0, 26);
      h5 = h5.$add(0, carry4);
      h4 = h4.$sub(0, carry4.$shl(0, 26));
      t2 = $.$get$CryptoOps__bitMaskFor24();
      carry1 = h1.$add(0, t2).$shr(0, 25);
      h2 = h2.$add(0, carry1);
      h1 = h1.$sub(0, carry1.$shl(0, 25));
      carry5 = h5.$add(0, t2).$shr(0, 25);
      h6 = h6.$add(0, carry5);
      h5 = h5.$sub(0, carry5.$shl(0, 25));
      carry2 = h2.$add(0, t1).$shr(0, 26);
      h3 = h3.$add(0, carry2);
      h2 = h2.$sub(0, carry2.$shl(0, 26));
      carry6 = h6.$add(0, t1).$shr(0, 26);
      h7 = h7.$add(0, carry6);
      h6 = h6.$sub(0, carry6.$shl(0, 26));
      carry3 = h3.$add(0, t2).$shr(0, 25);
      h4 = h4.$add(0, carry3);
      h3 = h3.$sub(0, carry3.$shl(0, 25));
      carry7 = h7.$add(0, t2).$shr(0, 25);
      h8 = h8.$add(0, carry7);
      h7 = h7.$sub(0, carry7.$shl(0, 25));
      carry4 = h4.$add(0, t1).$shr(0, 26);
      h5 = h5.$add(0, carry4);
      h4 = h4.$sub(0, carry4.$shl(0, 26));
      carry8 = h8.$add(0, t1).$shr(0, 26);
      h9 = h9.$add(0, carry8);
      h8 = h8.$sub(0, carry8.$shl(0, 26));
      carry9 = h9.$add(0, t2).$shr(0, 25);
      h0 = h0.$add(0, carry9.$mul(0, A._BigIntImpl__BigIntImpl$from(19)));
      h9 = h9.$sub(0, carry9.$shl(0, 25));
      carry0 = h0.$add(0, t1).$shr(0, 26);
      h1 = h1.$add(0, carry0);
      t1 = h.h;
      B.JSArray_methods.$indexSet(t1, 0, h0.$sub(0, carry0.$shl(0, 26)).toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 1, h1.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 2, h2.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 3, h3.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 4, h4.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 5, h5.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 6, h6.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 7, h7.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 8, h8.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t1, 9, h9.toSigned$1(0, 32).toInt$0(0));
    },
    CryptoOps_feDivpowm1(r, u, v) {
      var i,
        t1 = type$.int,
        v3 = new A.FieldElement(A.List_List$filled(10, 0, false, t1)),
        uv7 = new A.FieldElement(A.List_List$filled(10, 0, false, t1)),
        t00 = new A.FieldElement(A.List_List$filled(10, 0, false, t1)),
        t10 = new A.FieldElement(A.List_List$filled(10, 0, false, t1)),
        t2 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      A.CryptoOps_feSq(v3, v);
      A.CryptoOps_feMul(v3, v3, v);
      A.CryptoOps_feSq(uv7, v3);
      A.CryptoOps_feMul(uv7, uv7, v);
      A.CryptoOps_feMul(uv7, uv7, u);
      A.CryptoOps_feSq(t00, uv7);
      A.CryptoOps_feSq(t10, t00);
      A.CryptoOps_feSq(t10, t10);
      A.CryptoOps_feMul(t10, uv7, t10);
      A.CryptoOps_feMul(t00, t00, t10);
      A.CryptoOps_feSq(t00, t00);
      A.CryptoOps_feMul(t00, t10, t00);
      A.CryptoOps_feSq(t10, t00);
      for (i = 0; i < 4; ++i)
        A.CryptoOps_feSq(t10, t10);
      A.CryptoOps_feMul(t00, t10, t00);
      A.CryptoOps_feSq(t10, t00);
      for (i = 0; i < 9; ++i)
        A.CryptoOps_feSq(t10, t10);
      A.CryptoOps_feMul(t10, t10, t00);
      A.CryptoOps_feSq(t2, t10);
      for (i = 0; i < 19; ++i)
        A.CryptoOps_feSq(t2, t2);
      A.CryptoOps_feMul(t10, t2, t10);
      for (i = 0; i < 10; ++i)
        A.CryptoOps_feSq(t10, t10);
      A.CryptoOps_feMul(t00, t10, t00);
      A.CryptoOps_feSq(t10, t00);
      for (i = 0; i < 49; ++i)
        A.CryptoOps_feSq(t10, t10);
      A.CryptoOps_feMul(t10, t10, t00);
      A.CryptoOps_feSq(t2, t10);
      for (i = 0; i < 99; ++i)
        A.CryptoOps_feSq(t2, t2);
      A.CryptoOps_feMul(t10, t2, t10);
      for (i = 0; i < 50; ++i)
        A.CryptoOps_feSq(t10, t10);
      A.CryptoOps_feMul(t00, t10, t00);
      A.CryptoOps_feSq(t00, t00);
      A.CryptoOps_feSq(t00, t00);
      A.CryptoOps_feMul(t00, t00, uv7);
      A.CryptoOps_feMul(t00, t00, v3);
      A.CryptoOps_feMul(r, t00, u);
    },
    CryptoOps_feIsnonzero(f) {
      var _i,
        s = A.List_List$filled(32, 0, false, type$.int);
      A.CryptoOps_feTobytes(s, f);
      for (_i = 0; _i < 32; ++_i)
        if (s[_i] !== 0)
          return 1;
      return 0;
    },
    CryptoOps_feInvert(out, z) {
      var i,
        t1 = type$.int,
        t00 = new A.FieldElement(A.List_List$filled(10, 0, false, t1)),
        t10 = new A.FieldElement(A.List_List$filled(10, 0, false, t1)),
        t2 = new A.FieldElement(A.List_List$filled(10, 0, false, t1)),
        t3 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      A.CryptoOps_feSq(t00, z);
      A.CryptoOps_feSq(t10, t00);
      A.CryptoOps_feSq(t10, t10);
      A.CryptoOps_feMul(t10, z, t10);
      A.CryptoOps_feMul(t00, t00, t10);
      A.CryptoOps_feSq(t2, t00);
      A.CryptoOps_feMul(t10, t10, t2);
      A.CryptoOps_feSq(t2, t10);
      for (i = 0; i < 4; ++i)
        A.CryptoOps_feSq(t2, t2);
      A.CryptoOps_feMul(t10, t2, t10);
      A.CryptoOps_feSq(t2, t10);
      for (i = 0; i < 9; ++i)
        A.CryptoOps_feSq(t2, t2);
      A.CryptoOps_feMul(t2, t2, t10);
      A.CryptoOps_feSq(t3, t2);
      for (i = 0; i < 19; ++i)
        A.CryptoOps_feSq(t3, t3);
      A.CryptoOps_feMul(t2, t3, t2);
      A.CryptoOps_feSq(t2, t2);
      for (i = 0; i < 9; ++i)
        A.CryptoOps_feSq(t2, t2);
      A.CryptoOps_feMul(t10, t2, t10);
      A.CryptoOps_feSq(t2, t10);
      for (i = 0; i < 49; ++i)
        A.CryptoOps_feSq(t2, t2);
      A.CryptoOps_feMul(t2, t2, t10);
      A.CryptoOps_feSq(t3, t2);
      for (i = 0; i < 99; ++i)
        A.CryptoOps_feSq(t3, t3);
      A.CryptoOps_feMul(t2, t3, t2);
      A.CryptoOps_feSq(t2, t2);
      for (i = 0; i < 49; ++i)
        A.CryptoOps_feSq(t2, t2);
      A.CryptoOps_feMul(t10, t2, t10);
      A.CryptoOps_feSq(t10, t10);
      for (i = 0; i < 4; ++i)
        A.CryptoOps_feSq(t10, t10);
      A.CryptoOps_feMul(out, t10, t00);
      return;
    },
    CryptoOps_geTobytes_(h) {
      var s = A.List_List$filled(32, 0, false, type$.int);
      A.CryptoOps_geToBytes(s, h);
      return s;
    },
    CryptoOps_geToBytes(s, h) {
      var t2,
        t1 = type$.int,
        recip = new A.FieldElement(A.List_List$filled(10, 0, false, t1)),
        x = new A.FieldElement(A.List_List$filled(10, 0, false, t1)),
        y = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      A.CryptoOps_feInvert(recip, h.z);
      A.CryptoOps_feMul(x, h.x, recip);
      A.CryptoOps_feMul(y, h.y, recip);
      A.CryptoOps_feTobytes(s, y);
      if (31 >= s.length)
        return A.ioore(s, 31);
      t1 = s[31];
      t2 = A.CryptoOps_feIsnegative(x);
      if (typeof t1 !== "number")
        return t1.$xor();
      B.JSArray_methods.$indexSet(s, 31, (t1 ^ t2 << 7 & 255) >>> 0);
    },
    CryptoOps_geSub(r, p, q) {
      var t4,
        t00 = new A.FieldElement(A.List_List$filled(10, 0, false, type$.int)),
        t1 = r.x,
        t2 = p.y,
        t3 = p.x;
      A.CryptoOps_feAdd(t1, t2, t3);
      t4 = r.y;
      A.CryptoOps_feSub(t4, t2, t3);
      t3 = r.z;
      A.CryptoOps_feMul(t3, t1, q.yMinusX);
      A.CryptoOps_feMul(t4, t4, q.yPlusX);
      t2 = r.t;
      A.CryptoOps_feMul(t2, q.t2d, p.t);
      A.CryptoOps_feMul(t1, p.z, q.z);
      A.CryptoOps_feAdd(t00, t1, t1);
      A.CryptoOps_feSub(t1, t3, t4);
      A.CryptoOps_feAdd(t4, t3, t4);
      A.CryptoOps_feSub(t3, t00, t2);
      A.CryptoOps_feAdd(t2, t00, t2);
    },
    CryptoOps_scMul(s, a, b) {
      var t1, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, carry0, carry2, carry4, carry6, carry8, carry10, carry12, carry14, carry16, carry18, carry20, carry22, s230, carry1, carry3, carry5, carry7, carry9, carry11, carry13, carry15, carry17, carry19, carry21, sBig, i, t2, _s5_ = "scMul", _666643 = 666643, _470296 = 470296, _654183 = 654183, _997805 = 997805, _136657 = 136657, _683901 = 683901;
      A._BytesHelper_asMin32(s, _s5_);
      A._BytesHelper_asMin32(a, _s5_);
      A._BytesHelper_asMin32(b, _s5_);
      t1 = $.$get$CryptoOps__b2097151();
      a0 = t1.$and(0, A.CryptoOps__load3(a, 0));
      a1 = t1.$and(0, A.CryptoOps__load4(a, 2).$shr(0, 5));
      a2 = t1.$and(0, A.CryptoOps__load3(a, 5).$shr(0, 2));
      a3 = t1.$and(0, A.CryptoOps__load4(a, 7).$shr(0, 7));
      a4 = t1.$and(0, A.CryptoOps__load4(a, 10).$shr(0, 4));
      a5 = t1.$and(0, A.CryptoOps__load3(a, 13).$shr(0, 1));
      a6 = t1.$and(0, A.CryptoOps__load4(a, 15).$shr(0, 6));
      a7 = t1.$and(0, A.CryptoOps__load3(a, 18).$shr(0, 3));
      a8 = t1.$and(0, A.CryptoOps__load3(a, 21));
      a9 = t1.$and(0, A.CryptoOps__load4(a, 23).$shr(0, 5));
      a10 = t1.$and(0, A.CryptoOps__load3(a, 26).$shr(0, 2));
      a11 = A.CryptoOps__load4(a, 28).$shr(0, 7);
      b0 = t1.$and(0, A.CryptoOps__load3(b, 0));
      b1 = t1.$and(0, A.CryptoOps__load4(b, 2).$shr(0, 5));
      b2 = t1.$and(0, A.CryptoOps__load3(b, 5).$shr(0, 2));
      b3 = t1.$and(0, A.CryptoOps__load4(b, 7).$shr(0, 7));
      b4 = t1.$and(0, A.CryptoOps__load4(b, 10).$shr(0, 4));
      b5 = t1.$and(0, A.CryptoOps__load3(b, 13).$shr(0, 1));
      b6 = t1.$and(0, A.CryptoOps__load4(b, 15).$shr(0, 6));
      b7 = t1.$and(0, A.CryptoOps__load3(b, 18).$shr(0, 3));
      b8 = t1.$and(0, A.CryptoOps__load3(b, 21));
      b9 = t1.$and(0, A.CryptoOps__load4(b, 23).$shr(0, 5));
      b10 = t1.$and(0, A.CryptoOps__load3(b, 26).$shr(0, 2));
      b11 = A.CryptoOps__load4(b, 28).$shr(0, 7);
      s0 = a0.$mul(0, b0);
      s1 = a0.$mul(0, b1).$add(0, a1.$mul(0, b0));
      s2 = a0.$mul(0, b2).$add(0, a1.$mul(0, b1)).$add(0, a2.$mul(0, b0));
      s3 = a0.$mul(0, b3).$add(0, a1.$mul(0, b2)).$add(0, a2.$mul(0, b1)).$add(0, a3.$mul(0, b0));
      s4 = a0.$mul(0, b4).$add(0, a1.$mul(0, b3)).$add(0, a2.$mul(0, b2)).$add(0, a3.$mul(0, b1)).$add(0, a4.$mul(0, b0));
      s5 = a0.$mul(0, b5).$add(0, a1.$mul(0, b4)).$add(0, a2.$mul(0, b3)).$add(0, a3.$mul(0, b2)).$add(0, a4.$mul(0, b1)).$add(0, a5.$mul(0, b0));
      s6 = a0.$mul(0, b6).$add(0, a1.$mul(0, b5)).$add(0, a2.$mul(0, b4)).$add(0, a3.$mul(0, b3)).$add(0, a4.$mul(0, b2)).$add(0, a5.$mul(0, b1)).$add(0, a6.$mul(0, b0));
      s7 = a0.$mul(0, b7).$add(0, a1.$mul(0, b6)).$add(0, a2.$mul(0, b5)).$add(0, a3.$mul(0, b4)).$add(0, a4.$mul(0, b3)).$add(0, a5.$mul(0, b2)).$add(0, a6.$mul(0, b1)).$add(0, a7.$mul(0, b0));
      s8 = a0.$mul(0, b8).$add(0, a1.$mul(0, b7)).$add(0, a2.$mul(0, b6)).$add(0, a3.$mul(0, b5)).$add(0, a4.$mul(0, b4)).$add(0, a5.$mul(0, b3)).$add(0, a6.$mul(0, b2)).$add(0, a7.$mul(0, b1)).$add(0, a8.$mul(0, b0));
      s9 = a0.$mul(0, b9).$add(0, a1.$mul(0, b8)).$add(0, a2.$mul(0, b7)).$add(0, a3.$mul(0, b6)).$add(0, a4.$mul(0, b5)).$add(0, a5.$mul(0, b4)).$add(0, a6.$mul(0, b3)).$add(0, a7.$mul(0, b2)).$add(0, a8.$mul(0, b1)).$add(0, a9.$mul(0, b0));
      s10 = a0.$mul(0, b10).$add(0, a1.$mul(0, b9)).$add(0, a2.$mul(0, b8)).$add(0, a3.$mul(0, b7)).$add(0, a4.$mul(0, b6)).$add(0, a5.$mul(0, b5)).$add(0, a6.$mul(0, b4)).$add(0, a7.$mul(0, b3)).$add(0, a8.$mul(0, b2)).$add(0, a9.$mul(0, b1)).$add(0, a10.$mul(0, b0));
      s11 = a0.$mul(0, b11).$add(0, a1.$mul(0, b10)).$add(0, a2.$mul(0, b9)).$add(0, a3.$mul(0, b8)).$add(0, a4.$mul(0, b7)).$add(0, a5.$mul(0, b6)).$add(0, a6.$mul(0, b5)).$add(0, a7.$mul(0, b4)).$add(0, a8.$mul(0, b3)).$add(0, a9.$mul(0, b2)).$add(0, a10.$mul(0, b1)).$add(0, a11.$mul(0, b0));
      s12 = a1.$mul(0, b11).$add(0, a2.$mul(0, b10)).$add(0, a3.$mul(0, b9)).$add(0, a4.$mul(0, b8)).$add(0, a5.$mul(0, b7)).$add(0, a6.$mul(0, b6)).$add(0, a7.$mul(0, b5)).$add(0, a8.$mul(0, b4)).$add(0, a9.$mul(0, b3)).$add(0, a10.$mul(0, b2)).$add(0, a11.$mul(0, b1));
      s13 = a2.$mul(0, b11).$add(0, a3.$mul(0, b10)).$add(0, a4.$mul(0, b9)).$add(0, a5.$mul(0, b8)).$add(0, a6.$mul(0, b7)).$add(0, a7.$mul(0, b6)).$add(0, a8.$mul(0, b5)).$add(0, a9.$mul(0, b4)).$add(0, a10.$mul(0, b3)).$add(0, a11.$mul(0, b2));
      s14 = a3.$mul(0, b11).$add(0, a4.$mul(0, b10)).$add(0, a5.$mul(0, b9)).$add(0, a6.$mul(0, b8)).$add(0, a7.$mul(0, b7)).$add(0, a8.$mul(0, b6)).$add(0, a9.$mul(0, b5)).$add(0, a10.$mul(0, b4)).$add(0, a11.$mul(0, b3));
      s15 = a4.$mul(0, b11).$add(0, a5.$mul(0, b10)).$add(0, a6.$mul(0, b9)).$add(0, a7.$mul(0, b8)).$add(0, a8.$mul(0, b7)).$add(0, a9.$mul(0, b6)).$add(0, a10.$mul(0, b5)).$add(0, a11.$mul(0, b4));
      s16 = a5.$mul(0, b11).$add(0, a6.$mul(0, b10)).$add(0, a7.$mul(0, b9)).$add(0, a8.$mul(0, b8)).$add(0, a9.$mul(0, b7)).$add(0, a10.$mul(0, b6)).$add(0, a11.$mul(0, b5));
      s17 = a6.$mul(0, b11).$add(0, a7.$mul(0, b10)).$add(0, a8.$mul(0, b9)).$add(0, a9.$mul(0, b8)).$add(0, a10.$mul(0, b7)).$add(0, a11.$mul(0, b6));
      s18 = a7.$mul(0, b11).$add(0, a8.$mul(0, b10)).$add(0, a9.$mul(0, b9)).$add(0, a10.$mul(0, b8)).$add(0, a11.$mul(0, b7));
      s19 = a8.$mul(0, b11).$add(0, a9.$mul(0, b10)).$add(0, a10.$mul(0, b9)).$add(0, a11.$mul(0, b8));
      s20 = a9.$mul(0, b11).$add(0, a10.$mul(0, b10)).$add(0, a11.$mul(0, b9));
      s21 = a10.$mul(0, b11).$add(0, a11.$mul(0, b10));
      s22 = a11.$mul(0, b11);
      s23 = $.$get$_BigIntImpl_zero();
      t1 = $.$get$CryptoOps__bitMaskFor20();
      carry0 = s0.$add(0, t1).$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry2 = s2.$add(0, t1).$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry4 = s4.$add(0, t1).$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry6 = s6.$add(0, t1).$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry8 = s8.$add(0, t1).$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry10 = s10.$add(0, t1).$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry12 = s12.$add(0, t1).$shr(0, 21);
      s13 = s13.$add(0, carry12);
      s12 = s12.$sub(0, carry12.$shl(0, 21));
      carry14 = s14.$add(0, t1).$shr(0, 21);
      s15 = s15.$add(0, carry14);
      s14 = s14.$sub(0, carry14.$shl(0, 21));
      carry16 = s16.$add(0, t1).$shr(0, 21);
      s17 = s17.$add(0, carry16);
      s16 = s16.$sub(0, carry16.$shl(0, 21));
      carry18 = s18.$add(0, t1).$shr(0, 21);
      s19 = s19.$add(0, carry18);
      s18 = s18.$sub(0, carry18.$shl(0, 21));
      carry20 = s20.$add(0, t1).$shr(0, 21);
      s21 = s21.$add(0, carry20);
      s20 = s20.$sub(0, carry20.$shl(0, 21));
      carry22 = s22.$add(0, t1).$shr(0, 21);
      s230 = s23.$add(0, carry22);
      s22 = s22.$sub(0, carry22.$shl(0, 21));
      carry1 = s1.$add(0, t1).$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry3 = s3.$add(0, t1).$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry5 = s5.$add(0, t1).$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry7 = s7.$add(0, t1).$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry9 = s9.$add(0, t1).$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry11 = s11.$add(0, t1).$shr(0, 21);
      s12 = s12.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      carry13 = s13.$add(0, t1).$shr(0, 21);
      s14 = s14.$add(0, carry13);
      s13 = s13.$sub(0, carry13.$shl(0, 21));
      carry15 = s15.$add(0, t1).$shr(0, 21);
      s16 = s16.$add(0, carry15);
      s15 = s15.$sub(0, carry15.$shl(0, 21));
      carry17 = s17.$add(0, t1).$shr(0, 21);
      s18 = s18.$add(0, carry17);
      s17 = s17.$sub(0, carry17.$shl(0, 21));
      carry19 = s19.$add(0, t1).$shr(0, 21);
      s20 = s20.$add(0, carry19);
      s19 = s19.$sub(0, carry19.$shl(0, 21));
      carry21 = s21.$add(0, t1).$shr(0, 21);
      s22 = s22.$add(0, carry21);
      s21 = s21.$sub(0, carry21.$shl(0, 21));
      s11 = s11.$add(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s12 = s12.$add(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s13 = s13.$add(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s14 = s14.$sub(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s15 = s15.$add(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s16 = s16.$sub(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s10 = s10.$add(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s11 = s11.$add(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s12 = s12.$add(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s13 = s13.$sub(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s14 = s14.$add(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s15 = s15.$sub(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s9 = s9.$add(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s10 = s10.$add(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s11 = s11.$add(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s12 = s12.$sub(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s13 = s13.$add(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s14 = s14.$sub(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s8 = s8.$add(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s9 = s9.$add(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s10 = s10.$add(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s11 = s11.$sub(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s12 = s12.$add(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s13 = s13.$sub(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s7 = s7.$add(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s8 = s8.$add(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s9 = s9.$add(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s10 = s10.$sub(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s11 = s11.$add(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s12 = s12.$sub(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s6 = s6.$add(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s7 = s7.$add(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s8 = s8.$add(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s9 = s9.$sub(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s10 = s10.$add(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s11 = s11.$sub(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      carry6 = s6.$add(0, t1).$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry8 = s8.$add(0, t1).$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry10 = s10.$add(0, t1).$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry12 = s12.$add(0, t1).$shr(0, 21);
      s13 = s13.$add(0, carry12);
      s12 = s12.$sub(0, carry12.$shl(0, 21));
      carry14 = s14.$add(0, t1).$shr(0, 21);
      s15 = s15.$add(0, carry14);
      s14 = s14.$sub(0, carry14.$shl(0, 21));
      carry16 = s16.$add(0, t1).$shr(0, 21);
      s17 = s17.$add(0, carry16);
      s16 = s16.$sub(0, carry16.$shl(0, 21));
      carry7 = s7.$add(0, t1).$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry9 = s9.$add(0, t1).$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry11 = s11.$add(0, t1).$shr(0, 21);
      s12 = s12.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      carry13 = s13.$add(0, t1).$shr(0, 21);
      s14 = s14.$add(0, carry13);
      s13 = s13.$sub(0, carry13.$shl(0, 21));
      carry15 = s15.$add(0, t1).$shr(0, 21);
      s16 = s16.$add(0, carry15);
      s15 = s15.$sub(0, carry15.$shl(0, 21));
      s5 = s5.$add(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s6 = s6.$add(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s7 = s7.$add(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s8 = s8.$sub(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s9 = s9.$add(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s10 = s10.$sub(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s4 = s4.$add(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s5 = s5.$add(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s6 = s6.$add(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s7 = s7.$sub(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s8 = s8.$add(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s9 = s9.$sub(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s3 = s3.$add(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s4 = s4.$add(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s5 = s5.$add(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s6 = s6.$sub(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s7 = s7.$add(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s8 = s8.$sub(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s2 = s2.$add(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s3 = s3.$add(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s4 = s4.$add(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s5 = s5.$sub(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s6 = s6.$add(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s7 = s7.$sub(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s1 = s1.$add(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s2 = s2.$add(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s3 = s3.$add(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s4 = s4.$sub(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s5 = s5.$add(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s6 = s6.$sub(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s0 = s0.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s1 = s1.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s2 = s2.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s3 = s3.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s4 = s4.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s5 = s5.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      carry0 = s0.$add(0, t1).$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry2 = s2.$add(0, t1).$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry4 = s4.$add(0, t1).$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry6 = s6.$add(0, t1).$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry8 = s8.$add(0, t1).$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry10 = s10.$add(0, t1).$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry1 = s1.$add(0, t1).$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry3 = s3.$add(0, t1).$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry5 = s5.$add(0, t1).$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry7 = s7.$add(0, t1).$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry9 = s9.$add(0, t1).$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry11 = s11.$add(0, t1).$shr(0, 21);
      s12 = s23.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      s0 = s0.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s1 = s1.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s2 = s2.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s3 = s3.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s4 = s4.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s5 = s5.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      carry0 = s0.$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry1 = s1.$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry2 = s2.$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry3 = s3.$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry4 = s4.$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry5 = s5.$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry6 = s6.$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry7 = s7.$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry8 = s8.$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry9 = s9.$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry10 = s10.$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry11 = s11.$shr(0, 21);
      s12 = s23.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      s0 = s0.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s1 = s1.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s2 = s2.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s3 = s3.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s4 = s4.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s5 = s5.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      carry0 = s0.$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry1 = s1.$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry2 = s2.$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry3 = s3.$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry4 = s4.$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry5 = s5.$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry6 = s6.$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry7 = s7.$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry8 = s8.$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry9 = s9.$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry10 = s10.$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      sBig = A.List_List$filled(32, s23, false, type$.BigInt);
      B.JSArray_methods.$indexSet(sBig, 0, s0.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 1, s0.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 2, s0.$shr(0, 16).$or(0, s1.$shl(0, 5)));
      B.JSArray_methods.$indexSet(sBig, 3, s1.$shr(0, 3));
      B.JSArray_methods.$indexSet(sBig, 4, s1.$shr(0, 11));
      B.JSArray_methods.$indexSet(sBig, 5, s1.$shr(0, 19).$or(0, s2.$shl(0, 2)));
      B.JSArray_methods.$indexSet(sBig, 6, s2.$shr(0, 6));
      B.JSArray_methods.$indexSet(sBig, 7, s2.$shr(0, 14).$or(0, s3.$shl(0, 7)));
      B.JSArray_methods.$indexSet(sBig, 8, s3.$shr(0, 1));
      B.JSArray_methods.$indexSet(sBig, 9, s3.$shr(0, 9));
      B.JSArray_methods.$indexSet(sBig, 10, s3.$shr(0, 17).$or(0, s4.$shl(0, 4)));
      B.JSArray_methods.$indexSet(sBig, 11, s4.$shr(0, 4));
      B.JSArray_methods.$indexSet(sBig, 12, s4.$shr(0, 12));
      B.JSArray_methods.$indexSet(sBig, 13, s4.$shr(0, 20).$or(0, s5.$shl(0, 1)));
      B.JSArray_methods.$indexSet(sBig, 14, s5.$shr(0, 7));
      B.JSArray_methods.$indexSet(sBig, 15, s5.$shr(0, 15).$or(0, s6.$shl(0, 6)));
      B.JSArray_methods.$indexSet(sBig, 16, s6.$shr(0, 2));
      B.JSArray_methods.$indexSet(sBig, 17, s6.$shr(0, 10));
      B.JSArray_methods.$indexSet(sBig, 18, s6.$shr(0, 18).$or(0, s7.$shl(0, 3)));
      B.JSArray_methods.$indexSet(sBig, 19, s7.$shr(0, 5));
      B.JSArray_methods.$indexSet(sBig, 20, s7.$shr(0, 13));
      B.JSArray_methods.$indexSet(sBig, 21, s8.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 22, s8.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 23, s8.$shr(0, 16).$or(0, s9.$shl(0, 5)));
      B.JSArray_methods.$indexSet(sBig, 24, s9.$shr(0, 3));
      B.JSArray_methods.$indexSet(sBig, 25, s9.$shr(0, 11));
      B.JSArray_methods.$indexSet(sBig, 26, s9.$shr(0, 19).$or(0, s10.$shl(0, 2)));
      B.JSArray_methods.$indexSet(sBig, 27, s10.$shr(0, 6));
      B.JSArray_methods.$indexSet(sBig, 28, s10.$shr(0, 14).$or(0, s11.$shl(0, 7)));
      B.JSArray_methods.$indexSet(sBig, 29, s11.$shr(0, 1));
      B.JSArray_methods.$indexSet(sBig, 30, s11.$shr(0, 9));
      B.JSArray_methods.$indexSet(sBig, 31, s11.$shr(0, 17));
      for (i = 0; i < 32; ++i) {
        t1 = sBig[i];
        t2 = $.$get$_BigIntImpl_one();
        B.JSArray_methods.$indexSet(s, i, t1.$and(0, t2.$shl(0, 8).$sub(0, t2)).toInt$0(0));
      }
    },
    CryptoOps_geP3ToCached(r, p) {
      var t1 = p.y,
        t2 = p.x;
      A.CryptoOps_feAdd(r.yPlusX, t1, t2);
      A.CryptoOps_feSub(r.yMinusX, t1, t2);
      A.CryptoOps_feCopy(r.z, p.z);
      A.CryptoOps_feMul(r.t2d, p.t, B.FieldElement_K2f);
    },
    CryptoOps_scMulAdd(s, a, b, c) {
      var t1, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, carry0, carry2, carry4, carry6, carry8, carry10, carry12, carry14, carry16, carry18, carry20, carry22, s230, carry1, carry3, carry5, carry7, carry9, carry11, carry13, carry15, carry17, carry19, carry21, sBig, i, t2,
        _s8_ = "scMulAdd",
        _666643 = 666643, _470296 = 470296, _654183 = 654183, _997805 = 997805, _136657 = 136657, _683901 = 683901;
      A._BytesHelper_asMin32(s, _s8_);
      A._BytesHelper_asMin32(a, _s8_);
      A._BytesHelper_asMin32(b, _s8_);
      A._BytesHelper_asMin32(c, _s8_);
      t1 = $.$get$CryptoOps__b2097151();
      a0 = t1.$and(0, A.CryptoOps__load3(a, 0));
      a1 = t1.$and(0, A.CryptoOps__load4(a, 2).$shr(0, 5));
      a2 = t1.$and(0, A.CryptoOps__load3(a, 5).$shr(0, 2));
      a3 = t1.$and(0, A.CryptoOps__load4(a, 7).$shr(0, 7));
      a4 = t1.$and(0, A.CryptoOps__load4(a, 10).$shr(0, 4));
      a5 = t1.$and(0, A.CryptoOps__load3(a, 13).$shr(0, 1));
      a6 = t1.$and(0, A.CryptoOps__load4(a, 15).$shr(0, 6));
      a7 = t1.$and(0, A.CryptoOps__load3(a, 18).$shr(0, 3));
      a8 = t1.$and(0, A.CryptoOps__load3(a, 21));
      a9 = t1.$and(0, A.CryptoOps__load4(a, 23).$shr(0, 5));
      a10 = t1.$and(0, A.CryptoOps__load3(a, 26).$shr(0, 2));
      a11 = A.CryptoOps__load4(a, 28).$shr(0, 7);
      b0 = t1.$and(0, A.CryptoOps__load3(b, 0));
      b1 = t1.$and(0, A.CryptoOps__load4(b, 2).$shr(0, 5));
      b2 = t1.$and(0, A.CryptoOps__load3(b, 5).$shr(0, 2));
      b3 = t1.$and(0, A.CryptoOps__load4(b, 7).$shr(0, 7));
      b4 = t1.$and(0, A.CryptoOps__load4(b, 10).$shr(0, 4));
      b5 = t1.$and(0, A.CryptoOps__load3(b, 13).$shr(0, 1));
      b6 = t1.$and(0, A.CryptoOps__load4(b, 15).$shr(0, 6));
      b7 = t1.$and(0, A.CryptoOps__load3(b, 18).$shr(0, 3));
      b8 = t1.$and(0, A.CryptoOps__load3(b, 21));
      b9 = t1.$and(0, A.CryptoOps__load4(b, 23).$shr(0, 5));
      b10 = t1.$and(0, A.CryptoOps__load3(b, 26).$shr(0, 2));
      b11 = A.CryptoOps__load4(b, 28).$shr(0, 7);
      c0 = t1.$and(0, A.CryptoOps__load3(c, 0));
      c1 = t1.$and(0, A.CryptoOps__load4(c, 2).$shr(0, 5));
      c2 = t1.$and(0, A.CryptoOps__load3(c, 5).$shr(0, 2));
      c3 = t1.$and(0, A.CryptoOps__load4(c, 7).$shr(0, 7));
      c4 = t1.$and(0, A.CryptoOps__load4(c, 10).$shr(0, 4));
      c5 = t1.$and(0, A.CryptoOps__load3(c, 13).$shr(0, 1));
      c6 = t1.$and(0, A.CryptoOps__load4(c, 15).$shr(0, 6));
      c7 = t1.$and(0, A.CryptoOps__load3(c, 18).$shr(0, 3));
      c8 = t1.$and(0, A.CryptoOps__load3(c, 21));
      c9 = t1.$and(0, A.CryptoOps__load4(c, 23).$shr(0, 5));
      c10 = t1.$and(0, A.CryptoOps__load3(c, 26).$shr(0, 2));
      c11 = A.CryptoOps__load4(c, 28).$shr(0, 7);
      s0 = c0.$add(0, a0.$mul(0, b0));
      s1 = c1.$add(0, a0.$mul(0, b1).$add(0, a1.$mul(0, b0)));
      s2 = c2.$add(0, a0.$mul(0, b2).$add(0, a1.$mul(0, b1)).$add(0, a2.$mul(0, b0)));
      s3 = c3.$add(0, a0.$mul(0, b3).$add(0, a1.$mul(0, b2)).$add(0, a2.$mul(0, b1)).$add(0, a3.$mul(0, b0)));
      s4 = c4.$add(0, a0.$mul(0, b4).$add(0, a1.$mul(0, b3)).$add(0, a2.$mul(0, b2)).$add(0, a3.$mul(0, b1)).$add(0, a4.$mul(0, b0)));
      s5 = c5.$add(0, a0.$mul(0, b5).$add(0, a1.$mul(0, b4)).$add(0, a2.$mul(0, b3)).$add(0, a3.$mul(0, b2)).$add(0, a4.$mul(0, b1)).$add(0, a5.$mul(0, b0)));
      s6 = c6.$add(0, a0.$mul(0, b6).$add(0, a1.$mul(0, b5)).$add(0, a2.$mul(0, b4)).$add(0, a3.$mul(0, b3)).$add(0, a4.$mul(0, b2)).$add(0, a5.$mul(0, b1)).$add(0, a6.$mul(0, b0)));
      s7 = c7.$add(0, a0.$mul(0, b7).$add(0, a1.$mul(0, b6)).$add(0, a2.$mul(0, b5)).$add(0, a3.$mul(0, b4)).$add(0, a4.$mul(0, b3)).$add(0, a5.$mul(0, b2)).$add(0, a6.$mul(0, b1)).$add(0, a7.$mul(0, b0)));
      s8 = c8.$add(0, a0.$mul(0, b8).$add(0, a1.$mul(0, b7)).$add(0, a2.$mul(0, b6)).$add(0, a3.$mul(0, b5)).$add(0, a4.$mul(0, b4)).$add(0, a5.$mul(0, b3)).$add(0, a6.$mul(0, b2)).$add(0, a7.$mul(0, b1)).$add(0, a8.$mul(0, b0)));
      s9 = c9.$add(0, a0.$mul(0, b9).$add(0, a1.$mul(0, b8)).$add(0, a2.$mul(0, b7)).$add(0, a3.$mul(0, b6)).$add(0, a4.$mul(0, b5)).$add(0, a5.$mul(0, b4)).$add(0, a6.$mul(0, b3)).$add(0, a7.$mul(0, b2)).$add(0, a8.$mul(0, b1)).$add(0, a9.$mul(0, b0)));
      s10 = c10.$add(0, a0.$mul(0, b10).$add(0, a1.$mul(0, b9)).$add(0, a2.$mul(0, b8)).$add(0, a3.$mul(0, b7)).$add(0, a4.$mul(0, b6)).$add(0, a5.$mul(0, b5)).$add(0, a6.$mul(0, b4)).$add(0, a7.$mul(0, b3)).$add(0, a8.$mul(0, b2)).$add(0, a9.$mul(0, b1)).$add(0, a10.$mul(0, b0)));
      s11 = c11.$add(0, a0.$mul(0, b11).$add(0, a1.$mul(0, b10)).$add(0, a2.$mul(0, b9)).$add(0, a3.$mul(0, b8)).$add(0, a4.$mul(0, b7)).$add(0, a5.$mul(0, b6)).$add(0, a6.$mul(0, b5)).$add(0, a7.$mul(0, b4)).$add(0, a8.$mul(0, b3)).$add(0, a9.$mul(0, b2)).$add(0, a10.$mul(0, b1)).$add(0, a11.$mul(0, b0)));
      s12 = a1.$mul(0, b11).$add(0, a2.$mul(0, b10)).$add(0, a3.$mul(0, b9)).$add(0, a4.$mul(0, b8)).$add(0, a5.$mul(0, b7)).$add(0, a6.$mul(0, b6)).$add(0, a7.$mul(0, b5)).$add(0, a8.$mul(0, b4)).$add(0, a9.$mul(0, b3)).$add(0, a10.$mul(0, b2)).$add(0, a11.$mul(0, b1));
      s13 = a2.$mul(0, b11).$add(0, a3.$mul(0, b10)).$add(0, a4.$mul(0, b9)).$add(0, a5.$mul(0, b8)).$add(0, a6.$mul(0, b7)).$add(0, a7.$mul(0, b6)).$add(0, a8.$mul(0, b5)).$add(0, a9.$mul(0, b4)).$add(0, a10.$mul(0, b3)).$add(0, a11.$mul(0, b2));
      s14 = a3.$mul(0, b11).$add(0, a4.$mul(0, b10)).$add(0, a5.$mul(0, b9)).$add(0, a6.$mul(0, b8)).$add(0, a7.$mul(0, b7)).$add(0, a8.$mul(0, b6)).$add(0, a9.$mul(0, b5)).$add(0, a10.$mul(0, b4)).$add(0, a11.$mul(0, b3));
      s15 = a4.$mul(0, b11).$add(0, a5.$mul(0, b10)).$add(0, a6.$mul(0, b9)).$add(0, a7.$mul(0, b8)).$add(0, a8.$mul(0, b7)).$add(0, a9.$mul(0, b6)).$add(0, a10.$mul(0, b5)).$add(0, a11.$mul(0, b4));
      s16 = a5.$mul(0, b11).$add(0, a6.$mul(0, b10)).$add(0, a7.$mul(0, b9)).$add(0, a8.$mul(0, b8)).$add(0, a9.$mul(0, b7)).$add(0, a10.$mul(0, b6)).$add(0, a11.$mul(0, b5));
      s17 = a6.$mul(0, b11).$add(0, a7.$mul(0, b10)).$add(0, a8.$mul(0, b9)).$add(0, a9.$mul(0, b8)).$add(0, a10.$mul(0, b7)).$add(0, a11.$mul(0, b6));
      s18 = a7.$mul(0, b11).$add(0, a8.$mul(0, b10)).$add(0, a9.$mul(0, b9)).$add(0, a10.$mul(0, b8)).$add(0, a11.$mul(0, b7));
      s19 = a8.$mul(0, b11).$add(0, a9.$mul(0, b10)).$add(0, a10.$mul(0, b9)).$add(0, a11.$mul(0, b8));
      s20 = a9.$mul(0, b11).$add(0, a10.$mul(0, b10)).$add(0, a11.$mul(0, b9));
      s21 = a10.$mul(0, b11).$add(0, a11.$mul(0, b10));
      s22 = a11.$mul(0, b11);
      s23 = $.$get$_BigIntImpl_zero();
      t1 = $.$get$CryptoOps__bitMaskFor20();
      carry0 = s0.$add(0, t1).$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry2 = s2.$add(0, t1).$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry4 = s4.$add(0, t1).$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry6 = s6.$add(0, t1).$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry8 = s8.$add(0, t1).$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry10 = s10.$add(0, t1).$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry12 = s12.$add(0, t1).$shr(0, 21);
      s13 = s13.$add(0, carry12);
      s12 = s12.$sub(0, carry12.$shl(0, 21));
      carry14 = s14.$add(0, t1).$shr(0, 21);
      s15 = s15.$add(0, carry14);
      s14 = s14.$sub(0, carry14.$shl(0, 21));
      carry16 = s16.$add(0, t1).$shr(0, 21);
      s17 = s17.$add(0, carry16);
      s16 = s16.$sub(0, carry16.$shl(0, 21));
      carry18 = s18.$add(0, t1).$shr(0, 21);
      s19 = s19.$add(0, carry18);
      s18 = s18.$sub(0, carry18.$shl(0, 21));
      carry20 = s20.$add(0, t1).$shr(0, 21);
      s21 = s21.$add(0, carry20);
      s20 = s20.$sub(0, carry20.$shl(0, 21));
      carry22 = s22.$add(0, t1).$shr(0, 21);
      s230 = s23.$add(0, carry22);
      s22 = s22.$sub(0, carry22.$shl(0, 21));
      carry1 = s1.$add(0, t1).$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry3 = s3.$add(0, t1).$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry5 = s5.$add(0, t1).$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry7 = s7.$add(0, t1).$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry9 = s9.$add(0, t1).$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry11 = s11.$add(0, t1).$shr(0, 21);
      s12 = s12.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      carry13 = s13.$add(0, t1).$shr(0, 21);
      s14 = s14.$add(0, carry13);
      s13 = s13.$sub(0, carry13.$shl(0, 21));
      carry15 = s15.$add(0, t1).$shr(0, 21);
      s16 = s16.$add(0, carry15);
      s15 = s15.$sub(0, carry15.$shl(0, 21));
      carry17 = s17.$add(0, t1).$shr(0, 21);
      s18 = s18.$add(0, carry17);
      s17 = s17.$sub(0, carry17.$shl(0, 21));
      carry19 = s19.$add(0, t1).$shr(0, 21);
      s20 = s20.$add(0, carry19);
      s19 = s19.$sub(0, carry19.$shl(0, 21));
      carry21 = s21.$add(0, t1).$shr(0, 21);
      s22 = s22.$add(0, carry21);
      s21 = s21.$sub(0, carry21.$shl(0, 21));
      s11 = s11.$add(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s12 = s12.$add(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s13 = s13.$add(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s14 = s14.$sub(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s15 = s15.$add(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s16 = s16.$sub(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s10 = s10.$add(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s11 = s11.$add(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s12 = s12.$add(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s13 = s13.$sub(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s14 = s14.$add(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s15 = s15.$sub(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s9 = s9.$add(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s10 = s10.$add(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s11 = s11.$add(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s12 = s12.$sub(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s13 = s13.$add(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s14 = s14.$sub(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s8 = s8.$add(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s9 = s9.$add(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s10 = s10.$add(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s11 = s11.$sub(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s12 = s12.$add(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s13 = s13.$sub(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s7 = s7.$add(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s8 = s8.$add(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s9 = s9.$add(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s10 = s10.$sub(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s11 = s11.$add(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s12 = s12.$sub(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s6 = s6.$add(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s7 = s7.$add(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s8 = s8.$add(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s9 = s9.$sub(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s10 = s10.$add(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s11 = s11.$sub(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      carry6 = s6.$add(0, t1).$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry8 = s8.$add(0, t1).$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry10 = s10.$add(0, t1).$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry12 = s12.$add(0, t1).$shr(0, 21);
      s13 = s13.$add(0, carry12);
      s12 = s12.$sub(0, carry12.$shl(0, 21));
      carry14 = s14.$add(0, t1).$shr(0, 21);
      s15 = s15.$add(0, carry14);
      s14 = s14.$sub(0, carry14.$shl(0, 21));
      carry16 = s16.$add(0, t1).$shr(0, 21);
      s17 = s17.$add(0, carry16);
      s16 = s16.$sub(0, carry16.$shl(0, 21));
      carry7 = s7.$add(0, t1).$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry9 = s9.$add(0, t1).$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry11 = s11.$add(0, t1).$shr(0, 21);
      s12 = s12.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      carry13 = s13.$add(0, t1).$shr(0, 21);
      s14 = s14.$add(0, carry13);
      s13 = s13.$sub(0, carry13.$shl(0, 21));
      carry15 = s15.$add(0, t1).$shr(0, 21);
      s16 = s16.$add(0, carry15);
      s15 = s15.$sub(0, carry15.$shl(0, 21));
      s5 = s5.$add(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s6 = s6.$add(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s7 = s7.$add(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s8 = s8.$sub(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s9 = s9.$add(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s10 = s10.$sub(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s4 = s4.$add(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s5 = s5.$add(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s6 = s6.$add(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s7 = s7.$sub(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s8 = s8.$add(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s9 = s9.$sub(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s3 = s3.$add(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s4 = s4.$add(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s5 = s5.$add(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s6 = s6.$sub(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s7 = s7.$add(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s8 = s8.$sub(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s2 = s2.$add(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s3 = s3.$add(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s4 = s4.$add(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s5 = s5.$sub(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s6 = s6.$add(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s7 = s7.$sub(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s1 = s1.$add(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s2 = s2.$add(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s3 = s3.$add(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s4 = s4.$sub(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s5 = s5.$add(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s6 = s6.$sub(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s0 = s0.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s1 = s1.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s2 = s2.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s3 = s3.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s4 = s4.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s5 = s5.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      carry0 = s0.$add(0, t1).$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry2 = s2.$add(0, t1).$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry4 = s4.$add(0, t1).$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry6 = s6.$add(0, t1).$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry8 = s8.$add(0, t1).$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry10 = s10.$add(0, t1).$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry1 = s1.$add(0, t1).$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry3 = s3.$add(0, t1).$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry5 = s5.$add(0, t1).$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry7 = s7.$add(0, t1).$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry9 = s9.$add(0, t1).$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry11 = s11.$add(0, t1).$shr(0, 21);
      s12 = s23.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      s0 = s0.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s1 = s1.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s2 = s2.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s3 = s3.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s4 = s4.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s5 = s5.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s12 = A._BigIntImpl__BigIntImpl$from(0);
      carry0 = s0.$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry1 = s1.$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry2 = s2.$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry3 = s3.$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry4 = s4.$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry5 = s5.$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry6 = s6.$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry7 = s7.$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry8 = s8.$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry9 = s9.$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry10 = s10.$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry11 = s11.$shr(0, 21);
      s12 = s12.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      s0 = s0.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s1 = s1.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s2 = s2.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s3 = s3.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s4 = s4.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s5 = s5.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      carry0 = s0.$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry1 = s1.$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry2 = s2.$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry3 = s3.$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry4 = s4.$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry5 = s5.$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry6 = s6.$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry7 = s7.$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry8 = s8.$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry9 = s9.$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry10 = s10.$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      sBig = A.List_List$filled(32, s23, false, type$.BigInt);
      B.JSArray_methods.$indexSet(sBig, 0, s0.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 1, s0.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 2, s0.$shr(0, 16).$or(0, s1.$shl(0, 5)));
      B.JSArray_methods.$indexSet(sBig, 3, s1.$shr(0, 3));
      B.JSArray_methods.$indexSet(sBig, 4, s1.$shr(0, 11));
      B.JSArray_methods.$indexSet(sBig, 5, s1.$shr(0, 19).$or(0, s2.$shl(0, 2)));
      B.JSArray_methods.$indexSet(sBig, 6, s2.$shr(0, 6));
      B.JSArray_methods.$indexSet(sBig, 7, s2.$shr(0, 14).$or(0, s3.$shl(0, 7)));
      B.JSArray_methods.$indexSet(sBig, 8, s3.$shr(0, 1));
      B.JSArray_methods.$indexSet(sBig, 9, s3.$shr(0, 9));
      B.JSArray_methods.$indexSet(sBig, 10, s3.$shr(0, 17).$or(0, s4.$shl(0, 4)));
      B.JSArray_methods.$indexSet(sBig, 11, s4.$shr(0, 4));
      B.JSArray_methods.$indexSet(sBig, 12, s4.$shr(0, 12));
      B.JSArray_methods.$indexSet(sBig, 13, s4.$shr(0, 20).$or(0, s5.$shl(0, 1)));
      B.JSArray_methods.$indexSet(sBig, 14, s5.$shr(0, 7));
      B.JSArray_methods.$indexSet(sBig, 15, s5.$shr(0, 15).$or(0, s6.$shl(0, 6)));
      B.JSArray_methods.$indexSet(sBig, 16, s6.$shr(0, 2));
      B.JSArray_methods.$indexSet(sBig, 17, s6.$shr(0, 10));
      B.JSArray_methods.$indexSet(sBig, 18, s6.$shr(0, 18).$or(0, s7.$shl(0, 3)));
      B.JSArray_methods.$indexSet(sBig, 19, s7.$shr(0, 5));
      B.JSArray_methods.$indexSet(sBig, 20, s7.$shr(0, 13));
      B.JSArray_methods.$indexSet(sBig, 21, s8.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 22, s8.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 23, s8.$shr(0, 16).$or(0, s9.$shl(0, 5)));
      B.JSArray_methods.$indexSet(sBig, 24, s9.$shr(0, 3));
      B.JSArray_methods.$indexSet(sBig, 25, s9.$shr(0, 11));
      B.JSArray_methods.$indexSet(sBig, 26, s9.$shr(0, 19).$or(0, s10.$shl(0, 2)));
      B.JSArray_methods.$indexSet(sBig, 27, s10.$shr(0, 6));
      B.JSArray_methods.$indexSet(sBig, 28, s10.$shr(0, 14).$or(0, s11.$shl(0, 7)));
      B.JSArray_methods.$indexSet(sBig, 29, s11.$shr(0, 1));
      B.JSArray_methods.$indexSet(sBig, 30, s11.$shr(0, 9));
      B.JSArray_methods.$indexSet(sBig, 31, s11.$shr(0, 17));
      for (i = 0; i < 32; ++i) {
        t1 = sBig[i];
        t2 = $.$get$_BigIntImpl_one();
        B.JSArray_methods.$indexSet(s, i, t1.$and(0, t2.$shl(0, 8).$sub(0, t2)).toInt$0(0));
      }
    },
    CryptoOps_geDsmPrecomp(r, s) {
      var q,
        t1 = type$.int,
        t = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1))),
        s2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1))),
        u = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1))),
        t2 = r.length;
      if (0 >= t2)
        return A.ioore(r, 0);
      A.CryptoOps_geP3ToCached(r[0], s);
      q = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_geP3ToP2(q, s);
      A.CryptoOps_geP2Dbl(t, q);
      A.CryptoOps_geP1P1ToP3(s2, t);
      A.CryptoOps_geAdd(t, s2, r[0]);
      A.CryptoOps_geP1P1ToP3(u, t);
      if (1 >= t2)
        return A.ioore(r, 1);
      A.CryptoOps_geP3ToCached(r[1], u);
      A.CryptoOps_geAdd(t, s2, r[1]);
      A.CryptoOps_geP1P1ToP3(u, t);
      if (2 >= t2)
        return A.ioore(r, 2);
      A.CryptoOps_geP3ToCached(r[2], u);
      A.CryptoOps_geAdd(t, s2, r[2]);
      A.CryptoOps_geP1P1ToP3(u, t);
      if (3 >= t2)
        return A.ioore(r, 3);
      A.CryptoOps_geP3ToCached(r[3], u);
      A.CryptoOps_geAdd(t, s2, r[3]);
      A.CryptoOps_geP1P1ToP3(u, t);
      if (4 >= t2)
        return A.ioore(r, 4);
      A.CryptoOps_geP3ToCached(r[4], u);
      A.CryptoOps_geAdd(t, s2, r[4]);
      A.CryptoOps_geP1P1ToP3(u, t);
      if (5 >= t2)
        return A.ioore(r, 5);
      A.CryptoOps_geP3ToCached(r[5], u);
      A.CryptoOps_geAdd(t, s2, r[5]);
      A.CryptoOps_geP1P1ToP3(u, t);
      if (6 >= t2)
        return A.ioore(r, 6);
      A.CryptoOps_geP3ToCached(r[6], u);
      A.CryptoOps_geAdd(t, s2, r[6]);
      A.CryptoOps_geP1P1ToP3(u, t);
      if (7 >= t2)
        return A.ioore(r, 7);
      A.CryptoOps_geP3ToCached(r[7], u);
    },
    CryptoOps_slide(r, a) {
      var t1, i, t2, b, t3, t4, k;
      for (t1 = J.getInterceptor$asx(a), i = 0; i < 256; ++i) {
        t2 = t1.$index(a, i >>> 3);
        if (typeof t2 !== "number")
          return t2.$shr();
        B.JSArray_methods.$indexSet(r, i, B.JSNumber_methods._shrOtherPositive$1(t2, i & 7) & 1);
      }
      for (i = 0; i < 256; ++i)
        if (r[i] !== 0) {
          b = 1;
          while (true) {
            if (!(b <= 6 && i + b < 256))
              break;
            t1 = i + b;
            if (!(t1 < 256))
              return A.ioore(r, t1);
            t2 = r[t1];
            if (t2 !== 0) {
              t3 = r[i];
              t2 = B.JSInt_methods._shlPositive$1(t2, b);
              t4 = t3 + t2;
              if (t4 <= 15) {
                B.JSArray_methods.$indexSet(r, i, t4);
                B.JSArray_methods.$indexSet(r, t1, 0);
              } else {
                t2 = t3 - t2;
                if (t2 >= -15) {
                  B.JSArray_methods.$indexSet(r, i, t2);
                  for (k = t1; k < 256; ++k) {
                    if (r[k] === 0) {
                      B.JSArray_methods.$indexSet(r, k, 1);
                      break;
                    }
                    B.JSArray_methods.$indexSet(r, k, 0);
                  }
                } else
                  break;
              }
            }
            ++b;
          }
        }
    },
    CryptoOps_geMsub(r, p, q) {
      var t4, t5,
        t00 = new A.FieldElement(A.List_List$filled(10, 0, false, type$.int)),
        t1 = r.x,
        t2 = p.y,
        t3 = p.x;
      A.CryptoOps_feAdd(t1, t2, t3);
      t4 = r.y;
      A.CryptoOps_feSub(t4, t2, t3);
      t3 = r.z;
      A.CryptoOps_feMul(t3, t1, q.yminusx);
      A.CryptoOps_feMul(t4, t4, q.yplusx);
      t2 = r.t;
      A.CryptoOps_feMul(t2, q.xy2d, p.t);
      t5 = p.z;
      A.CryptoOps_feAdd(t00, t5, t5);
      A.CryptoOps_feSub(t1, t3, t4);
      A.CryptoOps_feAdd(t4, t3, t4);
      A.CryptoOps_feSub(t3, t00, t2);
      A.CryptoOps_feAdd(t2, t00, t2);
    },
    CryptoOps_geDoubleScalarMultBaseVartime(r, a, gA, b) {
      var t1, aslide, bslide, aI, t, u, i, t2, t3, t4, t5, t6, t7, t8, t9;
      A._BytesHelper_asMin32(b, "geDoubleScalarMultBaseVartime");
      t1 = type$.int;
      aslide = A.List_List$filled(256, 0, false, t1);
      bslide = A.List_List$filled(256, 0, false, t1);
      aI = A.GroupElementCached_dsmp();
      t = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      u = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_slide(aslide, a);
      A.CryptoOps_slide(bslide, b);
      A.CryptoOps_geDsmPrecomp(aI, gA);
      A.CryptoOps_geP2Zero(r);
      for (i = 255; i >= 0; --i)
        if (aslide[i] !== 0 || bslide[i] !== 0)
          break;
      for (t1 = r.x, t2 = t.x, t3 = t.t, t4 = r.y, t5 = t.y, t6 = t.z, t7 = r.z, t8 = aI.length; i >= 0; --i) {
        A.CryptoOps_geP2Dbl(t, r);
        t9 = aslide[i];
        if (t9 > 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t9 = B.JSInt_methods._tdivFast$1(aslide[i], 2);
          if (!(t9 >= 0 && t9 < t8))
            return A.ioore(aI, t9);
          A.CryptoOps_geAdd(t, u, aI[t9]);
        } else if (t9 < 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t9 = B.JSInt_methods._tdivFast$1(-aslide[i], 2);
          if (!(t9 >= 0 && t9 < t8))
            return A.ioore(aI, t9);
          A.CryptoOps_geSub(t, u, aI[t9]);
        }
        t9 = bslide[i];
        if (t9 > 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t9 = B.JSInt_methods._tdivFast$1(bslide[i], 2);
          if (!(t9 >= 0 && t9 < 8))
            return A.ioore(B.List_Ao9, t9);
          A.CryptoOps_geMadd(t, u, B.List_Ao9[t9]);
        } else if (t9 < 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t9 = B.JSInt_methods._tdivFast$1(-bslide[i], 2);
          if (!(t9 >= 0 && t9 < 8))
            return A.ioore(B.List_Ao9, t9);
          A.CryptoOps_geMsub(t, u, B.List_Ao9[t9]);
        }
        A.CryptoOps_feMul(t1, t2, t3);
        A.CryptoOps_feMul(t4, t5, t6);
        A.CryptoOps_feMul(t7, t6, t3);
      }
    },
    CryptoOps_geFromfeFrombytesVartime(r, s) {
      var t1, t2, u, v, w, x, y, z, h0, h1, h2, h3, h4, h5, h6, h7, h8, h9, carry9, carry1, carry3, carry5, carry7, carry0, carry2, carry4, carry6, carry8;
      A._BytesHelper_asMin32(s, "geFromfeFrombytesVartime");
      t1 = type$.int;
      t2 = A.List_List$filled(10, 0, false, t1);
      u = new A.FieldElement(t2);
      v = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      w = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      x = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      y = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      z = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      h0 = A.CryptoOps__load4(s, 0);
      h1 = A.CryptoOps__load3(s, 4).$shl(0, 6);
      h2 = A.CryptoOps__load3(s, 7).$shl(0, 5);
      h3 = A.CryptoOps__load3(s, 10).$shl(0, 3);
      h4 = A.CryptoOps__load3(s, 13).$shl(0, 2);
      h5 = A.CryptoOps__load4(s, 16);
      h6 = A.CryptoOps__load3(s, 20).$shl(0, 7);
      h7 = A.CryptoOps__load3(s, 23).$shl(0, 5);
      h8 = A.CryptoOps__load3(s, 26).$shl(0, 4);
      h9 = A.CryptoOps__load3(s, 29).$shl(0, 2);
      t1 = $.$get$CryptoOps__bitMaskFor24();
      carry9 = h9.$add(0, t1).$shr(0, 25);
      h0 = h0.$add(0, carry9.$mul(0, A._BigIntImpl__BigIntImpl$from(19)));
      h9 = h9.$sub(0, carry9.$shl(0, 25));
      carry1 = h1.$add(0, t1).$shr(0, 25);
      h2 = h2.$add(0, carry1);
      h1 = h1.$sub(0, carry1.$shl(0, 25));
      carry3 = h3.$add(0, t1).$shr(0, 25);
      h4 = h4.$add(0, carry3);
      h3 = h3.$sub(0, carry3.$shl(0, 25));
      carry5 = h5.$add(0, t1).$shr(0, 25);
      h6 = h6.$add(0, carry5);
      h5 = h5.$sub(0, carry5.$shl(0, 25));
      carry7 = h7.$add(0, t1).$shr(0, 25);
      h8 = h8.$add(0, carry7);
      h7 = h7.$sub(0, carry7.$shl(0, 25));
      t1 = $.$get$CryptoOps__bitMaskFor25();
      carry0 = h0.$add(0, t1).$shr(0, 26);
      h1 = h1.$add(0, carry0);
      h0 = h0.$sub(0, carry0.$shl(0, 26));
      carry2 = h2.$add(0, t1).$shr(0, 26);
      h3 = h3.$add(0, carry2);
      h2 = h2.$sub(0, carry2.$shl(0, 26));
      carry4 = h4.$add(0, t1).$shr(0, 26);
      h5 = h5.$add(0, carry4);
      h4 = h4.$sub(0, carry4.$shl(0, 26));
      carry6 = h6.$add(0, t1).$shr(0, 26);
      h7 = h7.$add(0, carry6);
      h6 = h6.$sub(0, carry6.$shl(0, 26));
      carry8 = h8.$add(0, t1).$shr(0, 26);
      h9 = h9.$add(0, carry8);
      h8 = h8.$sub(0, carry8.$shl(0, 26));
      B.JSArray_methods.$indexSet(t2, 0, h0.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 1, h1.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 2, h2.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 3, h3.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 4, h4.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 5, h5.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 6, h6.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 7, h7.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 8, h8.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 9, h9.toSigned$1(0, 32).toInt$0(0));
      A.CryptoOps_feSq2(v, u);
      w.fillOne$0();
      A.CryptoOps_feAdd(w, v, w);
      A.CryptoOps_feSq(x, w);
      A.CryptoOps_feMul(y, B.FieldElement_IQy, v);
      A.CryptoOps_feAdd(x, x, y);
      t2 = r.x;
      A.CryptoOps_feDivpowm1(t2, w, x);
      A.CryptoOps_feSq(y, t2);
      A.CryptoOps_feMul(x, y, x);
      A.CryptoOps_feSub(y, w, x);
      A.CryptoOps_feCopy(z, B.FieldElement_PTP);
      if (A.CryptoOps_feIsnonzero(y) !== 0) {
        A.CryptoOps_feAdd(y, w, x);
        if (A.CryptoOps_feIsnonzero(y) !== 0) {
          A.CryptoOps_feMul(x, x, B.FieldElement_9T4);
          A.CryptoOps_feSub(y, w, x);
          if (A.CryptoOps_feIsnonzero(y) !== 0)
            A.CryptoOps_feMul(t2, t2, B.FieldElement_gkc);
          else
            A.CryptoOps_feMul(t2, t2, B.FieldElement_GL9);
          A.CryptoOps__setSign(r, 1, w, z);
          return null;
        } else
          A.CryptoOps_feMul(t2, t2, B.FieldElement_U8c);
      } else
        A.CryptoOps_feMul(t2, t2, B.FieldElement_Jik);
      A.CryptoOps_feMul(t2, t2, u);
      A.CryptoOps_feMul(z, z, v);
      A.CryptoOps__setSign(r, 0, w, z);
    },
    CryptoOps_geP1P1ToP3(r, p) {
      var t3, t4,
        t1 = p.x,
        t2 = p.t;
      A.CryptoOps_feMul(r.x, t1, t2);
      t3 = p.y;
      t4 = p.z;
      A.CryptoOps_feMul(r.y, t3, t4);
      A.CryptoOps_feMul(r.z, t4, t2);
      A.CryptoOps_feMul(r.t, t1, t3);
    },
    CryptoOps_geP3Tobytes_(h) {
      var t2,
        t1 = type$.int,
        s = A.List_List$filled(32, 0, false, t1),
        recip = new A.FieldElement(A.List_List$filled(10, 0, false, t1)),
        x = new A.FieldElement(A.List_List$filled(10, 0, false, t1)),
        y = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      A.CryptoOps_feInvert(recip, h.z);
      A.CryptoOps_feMul(x, h.x, recip);
      A.CryptoOps_feMul(y, h.y, recip);
      A.CryptoOps_feTobytes(s, y);
      t1 = s[31];
      t2 = A.CryptoOps_feIsnegative(x);
      if (typeof t1 !== "number")
        return t1.$xor();
      B.JSArray_methods.$indexSet(s, 31, (t1 ^ t2 << 7) >>> 0);
      return s;
    },
    CryptoOps_geP3Tobytes(s, h) {
      var t2,
        t1 = type$.int,
        recip = new A.FieldElement(A.List_List$filled(10, 0, false, t1)),
        x = new A.FieldElement(A.List_List$filled(10, 0, false, t1)),
        y = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      A.CryptoOps_feInvert(recip, h.z);
      A.CryptoOps_feMul(x, h.x, recip);
      A.CryptoOps_feMul(y, h.y, recip);
      A.CryptoOps_feTobytes(s, y);
      if (31 >= s.length)
        return A.ioore(s, 31);
      t1 = s[31];
      t2 = A.CryptoOps_feIsnegative(x);
      if (typeof t1 !== "number")
        return t1.$xor();
      B.JSArray_methods.$indexSet(s, 31, (t1 ^ t2 << 7) >>> 0);
    },
    CryptoOps_geAdd(r, p, q) {
      var t4,
        t00 = new A.FieldElement(A.List_List$filled(10, 0, false, type$.int)),
        t1 = r.x,
        t2 = p.y,
        t3 = p.x;
      A.CryptoOps_feAdd(t1, t2, t3);
      t4 = r.y;
      A.CryptoOps_feSub(t4, t2, t3);
      t3 = r.z;
      A.CryptoOps_feMul(t3, t1, q.yPlusX);
      A.CryptoOps_feMul(t4, t4, q.yMinusX);
      t2 = r.t;
      A.CryptoOps_feMul(t2, q.t2d, p.t);
      A.CryptoOps_feMul(t1, p.z, q.z);
      A.CryptoOps_feAdd(t00, t1, t1);
      A.CryptoOps_feSub(t1, t3, t4);
      A.CryptoOps_feAdd(t4, t3, t4);
      A.CryptoOps_feAdd(t3, t00, t2);
      A.CryptoOps_feSub(t2, t00, t2);
    },
    CryptoOps_negative(b) {
      return A._BigIntImpl__BigIntImpl$from(b).$shr(0, 63).$and(0, $.$get$_BigIntImpl_one()).toInt$0(0);
    },
    CryptoOps_equal(b, c) {
      var y = A._BigIntImpl__BigIntImpl$from(b & 255 ^ c & 255).$and(0, A._BigIntImpl__BigIntImpl$from(4294967295)),
        t1 = $.$get$_BigIntImpl_one();
      return y.$sub(0, t1).$shr(0, 31).$and(0, t1).toInt$0(0);
    },
    CryptoOps_geP2Zero(h) {
      h.x.fillZero$0();
      h.y.fillOne$0();
      h.z.fillOne$0();
    },
    CryptoOps_geMadd(r, p, q) {
      var t4, t5,
        t00 = new A.FieldElement(A.List_List$filled(10, 0, false, type$.int)),
        t1 = r.x,
        t2 = p.y,
        t3 = p.x;
      A.CryptoOps_feAdd(t1, t2, t3);
      t4 = r.y;
      A.CryptoOps_feSub(t4, t2, t3);
      t3 = r.z;
      A.CryptoOps_feMul(t3, t1, q.yplusx);
      A.CryptoOps_feMul(t4, t4, q.yminusx);
      t2 = r.t;
      A.CryptoOps_feMul(t2, q.xy2d, p.t);
      t5 = p.z;
      A.CryptoOps_feAdd(t00, t5, t5);
      A.CryptoOps_feSub(t1, t3, t4);
      A.CryptoOps_feAdd(t4, t3, t4);
      A.CryptoOps_feAdd(t3, t00, t2);
      A.CryptoOps_feSub(t2, t00, t2);
    },
    CryptoOps_geP3ToP2(r, p) {
      A.CryptoOps_feCopy(r.x, p.x);
      A.CryptoOps_feCopy(r.y, p.y);
      A.CryptoOps_feCopy(r.z, p.z);
    },
    CryptoOps_gePrecompCmov(t, u, b) {
      A.CryptoOps_feCmov(t.yplusx, u.yplusx, b);
      A.CryptoOps_feCmov(t.yminusx, u.yminusx, b);
      A.CryptoOps_feCmov(t.xy2d, u.xy2d, b);
    },
    CryptoOps_select(t, pos, b) {
      var bnegative, babs, t4, t5, t6,
        t1 = type$.int,
        t2 = new A.FieldElement(A.List_List$filled(10, 0, false, t1)),
        t3 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      t1 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      bnegative = A.CryptoOps_negative(b);
      babs = b - ((-bnegative & b) << 1 >>> 0);
      t4 = t.yplusx;
      t4.fillOne$0();
      t5 = t.yminusx;
      t5.fillOne$0();
      t6 = t.xy2d;
      t6.fillZero$0();
      if (!(pos < 32))
        return A.ioore(B.List_gGq, pos);
      A.CryptoOps_gePrecompCmov(t, B.List_gGq[pos][0], A.CryptoOps_equal(babs, 1));
      A.CryptoOps_gePrecompCmov(t, B.List_gGq[pos][1], A.CryptoOps_equal(babs, 2));
      A.CryptoOps_gePrecompCmov(t, B.List_gGq[pos][2], A.CryptoOps_equal(babs, 3));
      A.CryptoOps_gePrecompCmov(t, B.List_gGq[pos][3], A.CryptoOps_equal(babs, 4));
      A.CryptoOps_gePrecompCmov(t, B.List_gGq[pos][4], A.CryptoOps_equal(babs, 5));
      A.CryptoOps_gePrecompCmov(t, B.List_gGq[pos][5], A.CryptoOps_equal(babs, 6));
      A.CryptoOps_gePrecompCmov(t, B.List_gGq[pos][6], A.CryptoOps_equal(babs, 7));
      A.CryptoOps_gePrecompCmov(t, B.List_gGq[pos][7], A.CryptoOps_equal(babs, 8));
      A.CryptoOps_feCopy(t2, t5);
      A.CryptoOps_feCopy(t3, t4);
      A.CryptoOps_feNeg(t1, t6);
      A.CryptoOps_gePrecompCmov(t, new A.GroupElementPrecomp(t2, t3, t1), bnegative);
    },
    CryptoOps_geScalarMultBase(h, a) {
      var t1, e, r, s, t, t2, i, t3, t4, carry, q;
      A._BytesHelper_asMin32(a, "geScalarMultBase");
      t1 = type$.int;
      e = A.List_List$filled(64, 0, false, t1);
      r = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      s = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      t = new A.GroupElementPrecomp(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      for (t2 = J.getInterceptor$asx(a), i = 0; i < 32; ++i) {
        t3 = 2 * i;
        t4 = t2.$index(a, i);
        if (typeof t4 !== "number")
          return t4.$shr();
        B.JSArray_methods.$indexSet(e, t3, B.JSNumber_methods._shrOtherPositive$1(t4, 0) & 15);
        t4 = t2.$index(a, i);
        if (typeof t4 !== "number")
          return t4.$shr();
        B.JSArray_methods.$indexSet(e, t3 + 1, B.JSNumber_methods._shrOtherPositive$1(t4, 4) & 15);
      }
      for (carry = 0, i = 0; i < 63; ++i) {
        B.JSArray_methods.$indexSet(e, i, e[i] + carry);
        t2 = e[i];
        carry = B.JSInt_methods._shrOtherPositive$1(t2 + 8, 4);
        B.JSArray_methods.$indexSet(e, i, t2 - (carry << 4 >>> 0));
      }
      B.JSArray_methods.$indexSet(e, 63, e[63] + carry);
      h.x.fillZero$0();
      h.y.fillOne$0();
      h.z.fillOne$0();
      h.t.fillZero$0();
      for (i = 1; i < 64; i += 2) {
        A.CryptoOps_select(t, B.JSInt_methods._tdivFast$1(i, 2), e[i]);
        A.CryptoOps_geMadd(r, h, t);
        A.CryptoOps_geP1P1ToP3(h, r);
      }
      q = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_geP3ToP2(q, h);
      A.CryptoOps_geP2Dbl(r, q);
      A.CryptoOps_geP1P1ToP2(s, r);
      A.CryptoOps_geP2Dbl(r, s);
      A.CryptoOps_geP1P1ToP2(s, r);
      A.CryptoOps_geP2Dbl(r, s);
      A.CryptoOps_geP1P1ToP2(s, r);
      A.CryptoOps_geP2Dbl(r, s);
      A.CryptoOps_geP1P1ToP3(h, r);
      for (i = 0; i < 64; i += 2) {
        A.CryptoOps_select(t, B.JSInt_methods._tdivFast$1(i, 2), e[i]);
        A.CryptoOps_geMadd(r, h, t);
        A.CryptoOps_geP1P1ToP3(h, r);
      }
    },
    CryptoOps_geScalarMult(r, a, gA) {
      var t1, e, aI, t, u, t2, carry, i, t3, carry2, t4, t5, t6, t7, t8, t9, b, bnegative, babs, t10, t11, t12, t13, cur, t14, t15, t16, t17;
      A._BytesHelper_asMin32(a, "geScalarMultBase");
      t1 = type$.int;
      e = A.List_List$filled(64, 0, false, t1);
      aI = A.GroupElementCached_dsmp();
      t = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      u = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      for (t2 = J.getInterceptor$asx(a), carry = 0, i = 0; i < 31; ++i) {
        t3 = t2.$index(a, i);
        if (typeof t3 !== "number")
          return A.iae(t3);
        carry += t3;
        carry2 = B.JSInt_methods._shrOtherPositive$1(carry + 8, 4);
        t3 = 2 * i;
        B.JSArray_methods.$indexSet(e, t3, carry - (carry2 << 4 >>> 0));
        carry = carry2 + 8 >>> 4;
        B.JSArray_methods.$indexSet(e, t3 + 1, carry2 - (carry << 4 >>> 0));
      }
      t2 = t2.$index(a, 31);
      if (typeof t2 !== "number")
        return A.iae(t2);
      carry += t2;
      carry2 = B.JSInt_methods._shrOtherPositive$1(carry + 8, 4);
      B.JSArray_methods.$indexSet(e, 62, carry - (carry2 << 4 >>> 0));
      B.JSArray_methods.$indexSet(e, 63, carry2);
      t2 = aI.length;
      if (0 >= t2)
        return A.ioore(aI, 0);
      A.CryptoOps_geP3ToCached(aI[0], gA);
      for (i = 0; i < 7;) {
        if (!(i < t2))
          return A.ioore(aI, i);
        A.CryptoOps_geAdd(t, gA, aI[i]);
        A.CryptoOps_geP1P1ToP3(u, t);
        ++i;
        if (!(i < t2))
          return A.ioore(aI, i);
        A.CryptoOps_geP3ToCached(aI[i], u);
      }
      A.CryptoOps_geP2Zero(r);
      for (t3 = r.x, t4 = t.x, t5 = t.t, t6 = r.y, t7 = t.y, t8 = t.z, t9 = r.z, i = 63; i >= 0; --i) {
        b = e[i];
        bnegative = A._BigIntImpl__BigIntImpl$from(b).$shr(0, 63).$and(0, $.$get$_BigIntImpl_one()).toInt$0(0);
        babs = b - ((-bnegative & b) << 1 >>> 0);
        t10 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
        t11 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
        t12 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
        t13 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
        cur = new A.GroupElementCached(t10, t11, t12, t13);
        t14 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
        t15 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
        t16 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
        t17 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
        A.CryptoOps_geP2Dbl(t, r);
        A.CryptoOps_feMul(t3, t4, t5);
        A.CryptoOps_feMul(t6, t7, t8);
        A.CryptoOps_feMul(t9, t8, t5);
        A.CryptoOps_geP2Dbl(t, r);
        A.CryptoOps_feMul(t3, t4, t5);
        A.CryptoOps_feMul(t6, t7, t8);
        A.CryptoOps_feMul(t9, t8, t5);
        A.CryptoOps_geP2Dbl(t, r);
        A.CryptoOps_feMul(t3, t4, t5);
        A.CryptoOps_feMul(t6, t7, t8);
        A.CryptoOps_feMul(t9, t8, t5);
        A.CryptoOps_geP2Dbl(t, r);
        A.CryptoOps_geP1P1ToP3(u, t);
        t10.fillOne$0();
        t11.fillOne$0();
        t12.fillOne$0();
        t13.fillZero$0();
        A.CryptoOps_geCachedCmov(cur, aI[0], A.CryptoOps_equal(babs, 1));
        if (1 >= t2)
          return A.ioore(aI, 1);
        A.CryptoOps_geCachedCmov(cur, aI[1], A.CryptoOps_equal(babs, 2));
        if (2 >= t2)
          return A.ioore(aI, 2);
        A.CryptoOps_geCachedCmov(cur, aI[2], A.CryptoOps_equal(babs, 3));
        if (3 >= t2)
          return A.ioore(aI, 3);
        A.CryptoOps_geCachedCmov(cur, aI[3], A.CryptoOps_equal(babs, 4));
        if (4 >= t2)
          return A.ioore(aI, 4);
        A.CryptoOps_geCachedCmov(cur, aI[4], A.CryptoOps_equal(babs, 5));
        if (5 >= t2)
          return A.ioore(aI, 5);
        A.CryptoOps_geCachedCmov(cur, aI[5], A.CryptoOps_equal(babs, 6));
        if (6 >= t2)
          return A.ioore(aI, 6);
        A.CryptoOps_geCachedCmov(cur, aI[6], A.CryptoOps_equal(babs, 7));
        if (7 >= t2)
          return A.ioore(aI, 7);
        A.CryptoOps_geCachedCmov(cur, aI[7], A.CryptoOps_equal(babs, 8));
        A.CryptoOps_feCopy(t14, t11);
        A.CryptoOps_feCopy(t15, t10);
        A.CryptoOps_feCopy(t16, t12);
        A.CryptoOps_feNeg(t17, t13);
        A.CryptoOps_geCachedCmov(cur, new A.GroupElementCached(t14, t15, t16, t17), bnegative);
        A.CryptoOps_geAdd(t, u, cur);
        A.CryptoOps_feMul(t3, t4, t5);
        A.CryptoOps_feMul(t6, t7, t8);
        A.CryptoOps_feMul(t9, t8, t5);
      }
    },
    CryptoOps__setSign(r, sign, w, z) {
      var t2,
        t1 = r.x;
      if (A.CryptoOps_feIsnegative(t1) !== sign)
        A.CryptoOps_feNeg(t1, t1);
      t2 = r.z;
      A.CryptoOps_feAdd(t2, z, w);
      A.CryptoOps_feSub(r.y, z, w);
      A.CryptoOps_feMul(t1, t1, t2);
    },
    CryptoOps_feIsnegative(f) {
      var s = A.List_List$filled(32, 0, false, type$.int);
      A.CryptoOps_feTobytes(s, f);
      return s[0] & 1;
    },
    CryptoOps_feNeg(h, f) {
      var f0, f1, f2, f3, f4, f5, f6, f7, f8, f9,
        t1 = f.h,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      f0 = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      f1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      f2 = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      f3 = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      f4 = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      f5 = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      f6 = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      f7 = t1[7];
      if (8 >= t2)
        return A.ioore(t1, 8);
      f8 = t1[8];
      if (9 >= t2)
        return A.ioore(t1, 9);
      f9 = t1[9];
      t1 = h.h;
      B.JSArray_methods.$indexSet(t1, 0, -f0);
      B.JSArray_methods.$indexSet(t1, 1, -f1);
      B.JSArray_methods.$indexSet(t1, 2, -f2);
      B.JSArray_methods.$indexSet(t1, 3, -f3);
      B.JSArray_methods.$indexSet(t1, 4, -f4);
      B.JSArray_methods.$indexSet(t1, 5, -f5);
      B.JSArray_methods.$indexSet(t1, 6, -f6);
      B.JSArray_methods.$indexSet(t1, 7, -f7);
      B.JSArray_methods.$indexSet(t1, 8, -f8);
      B.JSArray_methods.$indexSet(t1, 9, -f9);
    },
    CryptoOps_scMulSub(s, a, b, c) {
      var t1, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, carry0, carry2, carry4, carry6, carry8, carry10, carry12, carry14, carry16, carry18, carry20, carry22, s230, carry1, carry3, carry5, carry7, carry9, carry11, carry13, carry15, carry17, carry19, carry21, sBig, i, t2, t3,
        _s8_ = "scMulSub",
        _666643 = 666643, _470296 = 470296, _654183 = 654183, _997805 = 997805, _136657 = 136657, _683901 = 683901;
      A._BytesHelper_asMin32(s, _s8_);
      A._BytesHelper_asMin32(a, _s8_);
      A._BytesHelper_asMin32(b, _s8_);
      A._BytesHelper_asMin32(c, _s8_);
      t1 = $.$get$CryptoOps__b2097151();
      a0 = t1.$and(0, A.CryptoOps__load3(a, 0));
      a1 = t1.$and(0, A.CryptoOps__load4(a, 2).$shr(0, 5));
      a2 = t1.$and(0, A.CryptoOps__load3(a, 5).$shr(0, 2));
      a3 = t1.$and(0, A.CryptoOps__load4(a, 7).$shr(0, 7));
      a4 = t1.$and(0, A.CryptoOps__load4(a, 10).$shr(0, 4));
      a5 = t1.$and(0, A.CryptoOps__load3(a, 13).$shr(0, 1));
      a6 = t1.$and(0, A.CryptoOps__load4(a, 15).$shr(0, 6));
      a7 = t1.$and(0, A.CryptoOps__load3(a, 18).$shr(0, 3));
      a8 = t1.$and(0, A.CryptoOps__load3(a, 21));
      a9 = t1.$and(0, A.CryptoOps__load4(a, 23).$shr(0, 5));
      a10 = t1.$and(0, A.CryptoOps__load3(a, 26).$shr(0, 2));
      a11 = A.CryptoOps__load4(a, 28).$shr(0, 7);
      b0 = t1.$and(0, A.CryptoOps__load3(b, 0));
      b1 = t1.$and(0, A.CryptoOps__load4(b, 2).$shr(0, 5));
      b2 = t1.$and(0, A.CryptoOps__load3(b, 5).$shr(0, 2));
      b3 = t1.$and(0, A.CryptoOps__load4(b, 7).$shr(0, 7));
      b4 = t1.$and(0, A.CryptoOps__load4(b, 10).$shr(0, 4));
      b5 = t1.$and(0, A.CryptoOps__load3(b, 13).$shr(0, 1));
      b6 = t1.$and(0, A.CryptoOps__load4(b, 15).$shr(0, 6));
      b7 = t1.$and(0, A.CryptoOps__load3(b, 18).$shr(0, 3));
      b8 = t1.$and(0, A.CryptoOps__load3(b, 21));
      b9 = t1.$and(0, A.CryptoOps__load4(b, 23).$shr(0, 5));
      b10 = t1.$and(0, A.CryptoOps__load3(b, 26).$shr(0, 2));
      b11 = A.CryptoOps__load4(b, 28).$shr(0, 7);
      c0 = t1.$and(0, A.CryptoOps__load3(c, 0));
      c1 = t1.$and(0, A.CryptoOps__load4(c, 2).$shr(0, 5));
      c2 = t1.$and(0, A.CryptoOps__load3(c, 5).$shr(0, 2));
      c3 = t1.$and(0, A.CryptoOps__load4(c, 7).$shr(0, 7));
      c4 = t1.$and(0, A.CryptoOps__load4(c, 10).$shr(0, 4));
      c5 = t1.$and(0, A.CryptoOps__load3(c, 13).$shr(0, 1));
      c6 = t1.$and(0, A.CryptoOps__load4(c, 15).$shr(0, 6));
      c7 = t1.$and(0, A.CryptoOps__load3(c, 18).$shr(0, 3));
      c8 = t1.$and(0, A.CryptoOps__load3(c, 21));
      c9 = t1.$and(0, A.CryptoOps__load4(c, 23).$shr(0, 5));
      c10 = t1.$and(0, A.CryptoOps__load3(c, 26).$shr(0, 2));
      c11 = A.CryptoOps__load4(c, 28).$shr(0, 7);
      s0 = c0.$sub(0, a0.$mul(0, b0));
      s1 = c1.$sub(0, a0.$mul(0, b1).$add(0, a1.$mul(0, b0)));
      s2 = c2.$sub(0, a0.$mul(0, b2).$add(0, a1.$mul(0, b1)).$add(0, a2.$mul(0, b0)));
      s3 = c3.$sub(0, a0.$mul(0, b3).$add(0, a1.$mul(0, b2)).$add(0, a2.$mul(0, b1)).$add(0, a3.$mul(0, b0)));
      s4 = c4.$sub(0, a0.$mul(0, b4).$add(0, a1.$mul(0, b3)).$add(0, a2.$mul(0, b2)).$add(0, a3.$mul(0, b1)).$add(0, a4.$mul(0, b0)));
      s5 = c5.$sub(0, a0.$mul(0, b5).$add(0, a1.$mul(0, b4)).$add(0, a2.$mul(0, b3)).$add(0, a3.$mul(0, b2)).$add(0, a4.$mul(0, b1)).$add(0, a5.$mul(0, b0)));
      s6 = c6.$sub(0, a0.$mul(0, b6).$add(0, a1.$mul(0, b5)).$add(0, a2.$mul(0, b4)).$add(0, a3.$mul(0, b3)).$add(0, a4.$mul(0, b2)).$add(0, a5.$mul(0, b1)).$add(0, a6.$mul(0, b0)));
      s7 = c7.$sub(0, a0.$mul(0, b7).$add(0, a1.$mul(0, b6)).$add(0, a2.$mul(0, b5)).$add(0, a3.$mul(0, b4)).$add(0, a4.$mul(0, b3)).$add(0, a5.$mul(0, b2)).$add(0, a6.$mul(0, b1)).$add(0, a7.$mul(0, b0)));
      s8 = c8.$sub(0, a0.$mul(0, b8).$add(0, a1.$mul(0, b7)).$add(0, a2.$mul(0, b6)).$add(0, a3.$mul(0, b5)).$add(0, a4.$mul(0, b4)).$add(0, a5.$mul(0, b3)).$add(0, a6.$mul(0, b2)).$add(0, a7.$mul(0, b1)).$add(0, a8.$mul(0, b0)));
      s9 = c9.$sub(0, a0.$mul(0, b9).$add(0, a1.$mul(0, b8)).$add(0, a2.$mul(0, b7)).$add(0, a3.$mul(0, b6)).$add(0, a4.$mul(0, b5)).$add(0, a5.$mul(0, b4)).$add(0, a6.$mul(0, b3)).$add(0, a7.$mul(0, b2)).$add(0, a8.$mul(0, b1)).$add(0, a9.$mul(0, b0)));
      s10 = c10.$sub(0, a0.$mul(0, b10).$add(0, a1.$mul(0, b9)).$add(0, a2.$mul(0, b8)).$add(0, a3.$mul(0, b7)).$add(0, a4.$mul(0, b6)).$add(0, a5.$mul(0, b5)).$add(0, a6.$mul(0, b4)).$add(0, a7.$mul(0, b3)).$add(0, a8.$mul(0, b2)).$add(0, a9.$mul(0, b1)).$add(0, a10.$mul(0, b0)));
      s11 = c11.$sub(0, a0.$mul(0, b11).$add(0, a1.$mul(0, b10)).$add(0, a2.$mul(0, b9)).$add(0, a3.$mul(0, b8)).$add(0, a4.$mul(0, b7)).$add(0, a5.$mul(0, b6)).$add(0, a6.$mul(0, b5)).$add(0, a7.$mul(0, b4)).$add(0, a8.$mul(0, b3)).$add(0, a9.$mul(0, b2)).$add(0, a10.$mul(0, b1)).$add(0, a11.$mul(0, b0)));
      s12 = a1.$mul(0, b11).$add(0, a2.$mul(0, b10)).$add(0, a3.$mul(0, b9)).$add(0, a4.$mul(0, b8)).$add(0, a5.$mul(0, b7)).$add(0, a6.$mul(0, b6)).$add(0, a7.$mul(0, b5)).$add(0, a8.$mul(0, b4)).$add(0, a9.$mul(0, b3)).$add(0, a10.$mul(0, b2)).$add(0, a11.$mul(0, b1)).$negate(0);
      s13 = a2.$mul(0, b11).$add(0, a3.$mul(0, b10)).$add(0, a4.$mul(0, b9)).$add(0, a5.$mul(0, b8)).$add(0, a6.$mul(0, b7)).$add(0, a7.$mul(0, b6)).$add(0, a8.$mul(0, b5)).$add(0, a9.$mul(0, b4)).$add(0, a10.$mul(0, b3)).$add(0, a11.$mul(0, b2)).$negate(0);
      s14 = a3.$mul(0, b11).$add(0, a4.$mul(0, b10)).$add(0, a5.$mul(0, b9)).$add(0, a6.$mul(0, b8)).$add(0, a7.$mul(0, b7)).$add(0, a8.$mul(0, b6)).$add(0, a9.$mul(0, b5)).$add(0, a10.$mul(0, b4)).$add(0, a11.$mul(0, b3)).$negate(0);
      s15 = a4.$mul(0, b11).$add(0, a5.$mul(0, b10)).$add(0, a6.$mul(0, b9)).$add(0, a7.$mul(0, b8)).$add(0, a8.$mul(0, b7)).$add(0, a9.$mul(0, b6)).$add(0, a10.$mul(0, b5)).$add(0, a11.$mul(0, b4)).$negate(0);
      s16 = a5.$mul(0, b11).$add(0, a6.$mul(0, b10)).$add(0, a7.$mul(0, b9)).$add(0, a8.$mul(0, b8)).$add(0, a9.$mul(0, b7)).$add(0, a10.$mul(0, b6)).$add(0, a11.$mul(0, b5)).$negate(0);
      s17 = a6.$mul(0, b11).$add(0, a7.$mul(0, b10)).$add(0, a8.$mul(0, b9)).$add(0, a9.$mul(0, b8)).$add(0, a10.$mul(0, b7)).$add(0, a11.$mul(0, b6)).$negate(0);
      s18 = a7.$mul(0, b11).$add(0, a8.$mul(0, b10)).$add(0, a9.$mul(0, b9)).$add(0, a10.$mul(0, b8)).$add(0, a11.$mul(0, b7)).$negate(0);
      s19 = a8.$mul(0, b11).$add(0, a9.$mul(0, b10)).$add(0, a10.$mul(0, b9)).$add(0, a11.$mul(0, b8)).$negate(0);
      s20 = a9.$mul(0, b11).$add(0, a10.$mul(0, b10)).$add(0, a11.$mul(0, b9)).$negate(0);
      s21 = a10.$mul(0, b11).$add(0, a11.$mul(0, b10)).$negate(0);
      s22 = a11.$negate(0).$mul(0, b11);
      s23 = $.$get$_BigIntImpl_zero();
      t1 = $.$get$CryptoOps__bitMaskFor20();
      carry0 = s0.$add(0, t1).$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry2 = s2.$add(0, t1).$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry4 = s4.$add(0, t1).$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry6 = s6.$add(0, t1).$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry8 = s8.$add(0, t1).$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry10 = s10.$add(0, t1).$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry12 = s12.$add(0, t1).$shr(0, 21);
      s13 = s13.$add(0, carry12);
      s12 = s12.$sub(0, carry12.$shl(0, 21));
      carry14 = s14.$add(0, t1).$shr(0, 21);
      s15 = s15.$add(0, carry14);
      s14 = s14.$sub(0, carry14.$shl(0, 21));
      carry16 = s16.$add(0, t1).$shr(0, 21);
      s17 = s17.$add(0, carry16);
      s16 = s16.$sub(0, carry16.$shl(0, 21));
      carry18 = s18.$add(0, t1).$shr(0, 21);
      s19 = s19.$add(0, carry18);
      s18 = s18.$sub(0, carry18.$shl(0, 21));
      carry20 = s20.$add(0, t1).$shr(0, 21);
      s21 = s21.$add(0, carry20);
      s20 = s20.$sub(0, carry20.$shl(0, 21));
      carry22 = s22.$add(0, t1).$shr(0, 21);
      s230 = s23.$add(0, carry22);
      s22 = s22.$sub(0, carry22.$shl(0, 21));
      carry1 = s1.$add(0, t1).$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry3 = s3.$add(0, t1).$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry5 = s5.$add(0, t1).$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry7 = s7.$add(0, t1).$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry9 = s9.$add(0, t1).$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry11 = s11.$add(0, t1).$shr(0, 21);
      s12 = s12.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      carry13 = s13.$add(0, t1).$shr(0, 21);
      s14 = s14.$add(0, carry13);
      s13 = s13.$sub(0, carry13.$shl(0, 21));
      carry15 = s15.$add(0, t1).$shr(0, 21);
      s16 = s16.$add(0, carry15);
      s15 = s15.$sub(0, carry15.$shl(0, 21));
      carry17 = s17.$add(0, t1).$shr(0, 21);
      s18 = s18.$add(0, carry17);
      s17 = s17.$sub(0, carry17.$shl(0, 21));
      carry19 = s19.$add(0, t1).$shr(0, 21);
      s20 = s20.$add(0, carry19);
      s19 = s19.$sub(0, carry19.$shl(0, 21));
      carry21 = s21.$add(0, t1).$shr(0, 21);
      s22 = s22.$add(0, carry21);
      s21 = s21.$sub(0, carry21.$shl(0, 21));
      s11 = s11.$add(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s12 = s12.$add(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s13 = s13.$add(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s14 = s14.$sub(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s15 = s15.$add(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s16 = s16.$sub(0, s230.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s10 = s10.$add(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s11 = s11.$add(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s12 = s12.$add(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s13 = s13.$sub(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s14 = s14.$add(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s15 = s15.$sub(0, s22.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s9 = s9.$add(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s10 = s10.$add(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s11 = s11.$add(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s12 = s12.$sub(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s13 = s13.$add(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s14 = s14.$sub(0, s21.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s8 = s8.$add(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s9 = s9.$add(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s10 = s10.$add(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s11 = s11.$sub(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s12 = s12.$add(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s13 = s13.$sub(0, s20.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s7 = s7.$add(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s8 = s8.$add(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s9 = s9.$add(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s10 = s10.$sub(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s11 = s11.$add(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s12 = s12.$sub(0, s19.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s6 = s6.$add(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s7 = s7.$add(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s8 = s8.$add(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s9 = s9.$sub(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s10 = s10.$add(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s11 = s11.$sub(0, s18.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      carry6 = s6.$add(0, t1).$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry8 = s8.$add(0, t1).$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry10 = s10.$add(0, t1).$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry12 = s12.$add(0, t1).$shr(0, 21);
      s13 = s13.$add(0, carry12);
      s12 = s12.$sub(0, carry12.$shl(0, 21));
      carry14 = s14.$add(0, t1).$shr(0, 21);
      s15 = s15.$add(0, carry14);
      s14 = s14.$sub(0, carry14.$shl(0, 21));
      carry16 = s16.$add(0, t1).$shr(0, 21);
      s17 = s17.$add(0, carry16);
      s16 = s16.$sub(0, carry16.$shl(0, 21));
      carry7 = s7.$add(0, t1).$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry9 = s9.$add(0, t1).$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry11 = s11.$add(0, t1).$shr(0, 21);
      s12 = s12.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      carry13 = s13.$add(0, t1).$shr(0, 21);
      s14 = s14.$add(0, carry13);
      s13 = s13.$sub(0, carry13.$shl(0, 21));
      carry15 = s15.$add(0, t1).$shr(0, 21);
      s16 = s16.$add(0, carry15);
      s15 = s15.$sub(0, carry15.$shl(0, 21));
      s5 = s5.$add(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s6 = s6.$add(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s7 = s7.$add(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s8 = s8.$sub(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s9 = s9.$add(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s10 = s10.$sub(0, s17.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s4 = s4.$add(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s5 = s5.$add(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s6 = s6.$add(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s7 = s7.$sub(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s8 = s8.$add(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s9 = s9.$sub(0, s16.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s3 = s3.$add(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s4 = s4.$add(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s5 = s5.$add(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s6 = s6.$sub(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s7 = s7.$add(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s8 = s8.$sub(0, s15.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s2 = s2.$add(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s3 = s3.$add(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s4 = s4.$add(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s5 = s5.$sub(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s6 = s6.$add(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s7 = s7.$sub(0, s14.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s1 = s1.$add(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s2 = s2.$add(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s3 = s3.$add(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s4 = s4.$sub(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s5 = s5.$add(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s6 = s6.$sub(0, s13.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      s0 = s0.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s1 = s1.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s2 = s2.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s3 = s3.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s4 = s4.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s5 = s5.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      carry0 = s0.$add(0, t1).$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry2 = s2.$add(0, t1).$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry4 = s4.$add(0, t1).$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry6 = s6.$add(0, t1).$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry8 = s8.$add(0, t1).$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry10 = s10.$add(0, t1).$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry1 = s1.$add(0, t1).$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry3 = s3.$add(0, t1).$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry5 = s5.$add(0, t1).$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry7 = s7.$add(0, t1).$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry9 = s9.$add(0, t1).$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry11 = s11.$add(0, t1).$shr(0, 21);
      s12 = s23.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      s0 = s0.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s1 = s1.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s2 = s2.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s3 = s3.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s4 = s4.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s5 = s5.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      carry0 = s0.$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry1 = s1.$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry2 = s2.$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry3 = s3.$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry4 = s4.$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry5 = s5.$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry6 = s6.$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry7 = s7.$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry8 = s8.$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry9 = s9.$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry10 = s10.$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry11 = s11.$shr(0, 21);
      s12 = s23.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      s0 = s0.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_666643)));
      s1 = s1.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_470296)));
      s2 = s2.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_654183)));
      s3 = s3.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_997805)));
      s4 = s4.$add(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_136657)));
      s5 = s5.$sub(0, s12.$mul(0, A._BigIntImpl__BigIntImpl$from(_683901)));
      carry0 = s0.$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry1 = s1.$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry2 = s2.$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry3 = s3.$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry4 = s4.$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry5 = s5.$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry6 = s6.$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry7 = s7.$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry8 = s8.$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry9 = s9.$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry10 = s10.$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      sBig = A.List_List$filled(32, s23, false, type$.BigInt);
      B.JSArray_methods.$indexSet(sBig, 0, s0.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 1, s0.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 2, s0.$shr(0, 16).$or(0, s1.$shl(0, 5)));
      B.JSArray_methods.$indexSet(sBig, 3, s1.$shr(0, 3));
      B.JSArray_methods.$indexSet(sBig, 4, s1.$shr(0, 11));
      B.JSArray_methods.$indexSet(sBig, 5, s1.$shr(0, 19).$or(0, s2.$shl(0, 2)));
      B.JSArray_methods.$indexSet(sBig, 6, s2.$shr(0, 6));
      B.JSArray_methods.$indexSet(sBig, 7, s2.$shr(0, 14).$or(0, s3.$shl(0, 7)));
      B.JSArray_methods.$indexSet(sBig, 8, s3.$shr(0, 1));
      B.JSArray_methods.$indexSet(sBig, 9, s3.$shr(0, 9));
      B.JSArray_methods.$indexSet(sBig, 10, s3.$shr(0, 17).$or(0, s4.$shl(0, 4)));
      B.JSArray_methods.$indexSet(sBig, 11, s4.$shr(0, 4));
      B.JSArray_methods.$indexSet(sBig, 12, s4.$shr(0, 12));
      B.JSArray_methods.$indexSet(sBig, 13, s4.$shr(0, 20).$or(0, s5.$shl(0, 1)));
      B.JSArray_methods.$indexSet(sBig, 14, s5.$shr(0, 7));
      B.JSArray_methods.$indexSet(sBig, 15, s5.$shr(0, 15).$or(0, s6.$shl(0, 6)));
      B.JSArray_methods.$indexSet(sBig, 16, s6.$shr(0, 2));
      B.JSArray_methods.$indexSet(sBig, 17, s6.$shr(0, 10));
      B.JSArray_methods.$indexSet(sBig, 18, s6.$shr(0, 18).$or(0, s7.$shl(0, 3)));
      B.JSArray_methods.$indexSet(sBig, 19, s7.$shr(0, 5));
      B.JSArray_methods.$indexSet(sBig, 20, s7.$shr(0, 13));
      B.JSArray_methods.$indexSet(sBig, 21, s8.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 22, s8.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 23, s8.$shr(0, 16).$or(0, s9.$shl(0, 5)));
      B.JSArray_methods.$indexSet(sBig, 24, s9.$shr(0, 3));
      B.JSArray_methods.$indexSet(sBig, 25, s9.$shr(0, 11));
      B.JSArray_methods.$indexSet(sBig, 26, s9.$shr(0, 19).$or(0, s10.$shl(0, 2)));
      B.JSArray_methods.$indexSet(sBig, 27, s10.$shr(0, 6));
      B.JSArray_methods.$indexSet(sBig, 28, s10.$shr(0, 14).$or(0, s11.$shl(0, 7)));
      B.JSArray_methods.$indexSet(sBig, 29, s11.$shr(0, 1));
      B.JSArray_methods.$indexSet(sBig, 30, s11.$shr(0, 9));
      B.JSArray_methods.$indexSet(sBig, 31, s11.$shr(0, 17));
      for (t1 = J.getInterceptor$ax(s), i = 0; i < 32; ++i) {
        t2 = sBig[i];
        t3 = $.$get$_BigIntImpl_one();
        t1.$indexSet(s, i, t2.$and(0, t3.$shl(0, 8).$sub(0, t3)).toInt$0(0));
      }
    },
    CryptoOps_scSub(s, a, b) {
      var t1, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, carry0, carry2, carry4, carry6, carry8, carry10, carry1, carry3, carry5, carry7, carry9, carry11, s120, sBig, i, t2, _s5_ = "scSub";
      A._BytesHelper_asMin32(s, _s5_);
      A._BytesHelper_asMin32(a, _s5_);
      A._BytesHelper_asMin32(b, _s5_);
      t1 = $.$get$CryptoOps__b2097151();
      a0 = t1.$and(0, A.CryptoOps__load3(a, 0));
      a1 = t1.$and(0, A.CryptoOps__load4(a, 2).$shr(0, 5));
      a2 = t1.$and(0, A.CryptoOps__load3(a, 5).$shr(0, 2));
      a3 = t1.$and(0, A.CryptoOps__load4(a, 7).$shr(0, 7));
      a4 = t1.$and(0, A.CryptoOps__load4(a, 10).$shr(0, 4));
      a5 = t1.$and(0, A.CryptoOps__load3(a, 13).$shr(0, 1));
      a6 = t1.$and(0, A.CryptoOps__load4(a, 15).$shr(0, 6));
      a7 = t1.$and(0, A.CryptoOps__load3(a, 18).$shr(0, 3));
      a8 = t1.$and(0, A.CryptoOps__load3(a, 21));
      a9 = t1.$and(0, A.CryptoOps__load4(a, 23).$shr(0, 5));
      a10 = t1.$and(0, A.CryptoOps__load3(a, 26).$shr(0, 2));
      a11 = A.CryptoOps__load4(a, 28).$shr(0, 7);
      b0 = t1.$and(0, A.CryptoOps__load3(b, 0));
      b1 = t1.$and(0, A.CryptoOps__load4(b, 2).$shr(0, 5));
      b2 = t1.$and(0, A.CryptoOps__load3(b, 5).$shr(0, 2));
      b3 = t1.$and(0, A.CryptoOps__load4(b, 7).$shr(0, 7));
      b4 = t1.$and(0, A.CryptoOps__load4(b, 10).$shr(0, 4));
      b5 = t1.$and(0, A.CryptoOps__load3(b, 13).$shr(0, 1));
      b6 = t1.$and(0, A.CryptoOps__load4(b, 15).$shr(0, 6));
      b7 = t1.$and(0, A.CryptoOps__load3(b, 18).$shr(0, 3));
      b8 = t1.$and(0, A.CryptoOps__load3(b, 21));
      b9 = t1.$and(0, A.CryptoOps__load4(b, 23).$shr(0, 5));
      b10 = t1.$and(0, A.CryptoOps__load3(b, 26).$shr(0, 2));
      b11 = A.CryptoOps__load4(b, 28).$shr(0, 7);
      s0 = a0.$sub(0, b0);
      s1 = a1.$sub(0, b1);
      s2 = a2.$sub(0, b2);
      s3 = a3.$sub(0, b3);
      s4 = a4.$sub(0, b4);
      s5 = a5.$sub(0, b5);
      s6 = a6.$sub(0, b6);
      s7 = a7.$sub(0, b7);
      s8 = a8.$sub(0, b8);
      s9 = a9.$sub(0, b9);
      s10 = a10.$sub(0, b10);
      s11 = a11.$sub(0, b11);
      s12 = $.$get$_BigIntImpl_zero();
      t1 = $.$get$CryptoOps__bitMaskFor20();
      carry0 = s0.$add(0, t1).$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry2 = s2.$add(0, t1).$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry4 = s4.$add(0, t1).$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry6 = s6.$add(0, t1).$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry8 = s8.$add(0, t1).$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry10 = s10.$add(0, t1).$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry1 = s1.$add(0, t1).$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry3 = s3.$add(0, t1).$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry5 = s5.$add(0, t1).$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry7 = s7.$add(0, t1).$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry9 = s9.$add(0, t1).$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry11 = s11.$add(0, t1).$shr(0, 21);
      s120 = s12.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      s0 = s0.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(666643)));
      s1 = s1.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(470296)));
      s2 = s2.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(654183)));
      s3 = s3.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(997805)));
      s4 = s4.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(136657)));
      s5 = s5.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(683901)));
      carry0 = s0.$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry1 = s1.$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry2 = s2.$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry3 = s3.$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry4 = s4.$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry5 = s5.$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry6 = s6.$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry7 = s7.$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry8 = s8.$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry9 = s9.$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry10 = s10.$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry11 = s11.$shr(0, 21);
      s120 = s12.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      s0 = s0.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(666643)));
      s1 = s1.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(470296)));
      s2 = s2.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(654183)));
      s3 = s3.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(997805)));
      s4 = s4.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(136657)));
      s5 = s5.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(683901)));
      carry0 = s0.$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry1 = s1.$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry2 = s2.$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry3 = s3.$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry4 = s4.$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry5 = s5.$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry6 = s6.$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry7 = s7.$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry8 = s8.$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry9 = s9.$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry10 = s10.$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      sBig = A.List_List$filled(32, s12, false, type$.BigInt);
      B.JSArray_methods.$indexSet(sBig, 0, s0.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 1, s0.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 2, s0.$shr(0, 16).$or(0, s1.$shl(0, 5)));
      B.JSArray_methods.$indexSet(sBig, 3, s1.$shr(0, 3));
      B.JSArray_methods.$indexSet(sBig, 4, s1.$shr(0, 11));
      B.JSArray_methods.$indexSet(sBig, 5, s1.$shr(0, 19).$or(0, s2.$shl(0, 2)));
      B.JSArray_methods.$indexSet(sBig, 6, s2.$shr(0, 6));
      B.JSArray_methods.$indexSet(sBig, 7, s2.$shr(0, 14).$or(0, s3.$shl(0, 7)));
      B.JSArray_methods.$indexSet(sBig, 8, s3.$shr(0, 1));
      B.JSArray_methods.$indexSet(sBig, 9, s3.$shr(0, 9));
      B.JSArray_methods.$indexSet(sBig, 10, s3.$shr(0, 17).$or(0, s4.$shl(0, 4)));
      B.JSArray_methods.$indexSet(sBig, 11, s4.$shr(0, 4));
      B.JSArray_methods.$indexSet(sBig, 12, s4.$shr(0, 12));
      B.JSArray_methods.$indexSet(sBig, 13, s4.$shr(0, 20).$or(0, s5.$shl(0, 1)));
      B.JSArray_methods.$indexSet(sBig, 14, s5.$shr(0, 7));
      B.JSArray_methods.$indexSet(sBig, 15, s5.$shr(0, 15).$or(0, s6.$shl(0, 6)));
      B.JSArray_methods.$indexSet(sBig, 16, s6.$shr(0, 2));
      B.JSArray_methods.$indexSet(sBig, 17, s6.$shr(0, 10));
      B.JSArray_methods.$indexSet(sBig, 18, s6.$shr(0, 18).$or(0, s7.$shl(0, 3)));
      B.JSArray_methods.$indexSet(sBig, 19, s7.$shr(0, 5));
      B.JSArray_methods.$indexSet(sBig, 20, s7.$shr(0, 13));
      B.JSArray_methods.$indexSet(sBig, 21, s8.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 22, s8.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 23, s8.$shr(0, 16).$or(0, s9.$shl(0, 5)));
      B.JSArray_methods.$indexSet(sBig, 24, s9.$shr(0, 3));
      B.JSArray_methods.$indexSet(sBig, 25, s9.$shr(0, 11));
      B.JSArray_methods.$indexSet(sBig, 26, s9.$shr(0, 19).$or(0, s10.$shl(0, 2)));
      B.JSArray_methods.$indexSet(sBig, 27, s10.$shr(0, 6));
      B.JSArray_methods.$indexSet(sBig, 28, s10.$shr(0, 14).$or(0, s11.$shl(0, 7)));
      B.JSArray_methods.$indexSet(sBig, 29, s11.$shr(0, 1));
      B.JSArray_methods.$indexSet(sBig, 30, s11.$shr(0, 9));
      B.JSArray_methods.$indexSet(sBig, 31, s11.$shr(0, 17));
      for (i = 0; i < 32; ++i) {
        t1 = sBig[i];
        t2 = $.$get$_BigIntImpl_one();
        B.JSArray_methods.$indexSet(s, i, t1.$and(0, t2.$shl(0, 8).$sub(0, t2)).toInt$0(0));
      }
    },
    CryptoOps_scFill(s, a) {
      var i;
      A._BytesHelper_asMin32(s, "scFill");
      A._BytesHelper_asMin32(a, "scFill");
      for (i = 0; i < 32; ++i) {
        if (!(i < a.length))
          return A.ioore(a, i);
        B.JSArray_methods.$indexSet(s, i, a[i]);
      }
    },
    CryptoOps_geP1P1ToP2(r, p) {
      var t2,
        t1 = p.t;
      A.CryptoOps_feMul(r.x, p.x, t1);
      t2 = p.z;
      A.CryptoOps_feMul(r.y, p.y, t2);
      A.CryptoOps_feMul(r.z, t2, t1);
    },
    CryptoOps_geP2Dbl(r, p) {
      var t3, t4, t5, t6,
        t00 = new A.FieldElement(A.List_List$filled(10, 0, false, type$.int)),
        t1 = r.x,
        t2 = p.x;
      A.CryptoOps_feSq(t1, t2);
      t3 = r.z;
      t4 = p.y;
      A.CryptoOps_feSq(t3, t4);
      t5 = r.t;
      A.CryptoOps_feSq2(t5, p.z);
      t6 = r.y;
      A.CryptoOps_feAdd(t6, t2, t4);
      A.CryptoOps_feSq(t00, t6);
      A.CryptoOps_feAdd(t6, t3, t1);
      A.CryptoOps_feSub(t3, t3, t1);
      A.CryptoOps_feSub(t1, t00, t6);
      A.CryptoOps_feSub(t5, t5, t3);
    },
    CryptoOps_geMul8(r, t) {
      var t1 = type$.int,
        u = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_geP2Dbl(r, t);
      A.CryptoOps_geP1P1ToP2(u, r);
      A.CryptoOps_geP2Dbl(r, u);
      A.CryptoOps_geP1P1ToP2(u, r);
      A.CryptoOps_geP2Dbl(r, u);
    },
    CryptoOps_geCachedCmov(t, u, b) {
      A.CryptoOps_feCmov(t.yPlusX, u.yPlusX, b);
      A.CryptoOps_feCmov(t.yMinusX, u.yMinusX, b);
      A.CryptoOps_feCmov(t.z, u.z, b);
      A.CryptoOps_feCmov(t.t2d, u.t2d, b);
    },
    CryptoOps_scAdd(s, a, b) {
      var t1, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, carry0, carry2, carry4, carry6, carry8, carry10, carry1, carry3, carry5, carry7, carry9, carry11, s120, sBig, i, t2, _s5_ = "scAdd";
      A._BytesHelper_asMin32(s, _s5_);
      A._BytesHelper_asMin32(a, _s5_);
      A._BytesHelper_asMin32(b, _s5_);
      t1 = $.$get$CryptoOps__b2097151();
      a0 = t1.$and(0, A.CryptoOps__load3(a, 0));
      a1 = t1.$and(0, A.CryptoOps__load4(a, 2).$shr(0, 5));
      a2 = t1.$and(0, A.CryptoOps__load3(a, 5).$shr(0, 2));
      a3 = t1.$and(0, A.CryptoOps__load4(a, 7).$shr(0, 7));
      a4 = t1.$and(0, A.CryptoOps__load4(a, 10).$shr(0, 4));
      a5 = t1.$and(0, A.CryptoOps__load3(a, 13).$shr(0, 1));
      a6 = t1.$and(0, A.CryptoOps__load4(a, 15).$shr(0, 6));
      a7 = t1.$and(0, A.CryptoOps__load3(a, 18).$shr(0, 3));
      a8 = t1.$and(0, A.CryptoOps__load3(a, 21));
      a9 = t1.$and(0, A.CryptoOps__load4(a, 23).$shr(0, 5));
      a10 = t1.$and(0, A.CryptoOps__load3(a, 26).$shr(0, 2));
      a11 = A.CryptoOps__load4(a, 28).$shr(0, 7);
      b0 = t1.$and(0, A.CryptoOps__load3(b, 0));
      b1 = t1.$and(0, A.CryptoOps__load4(b, 2).$shr(0, 5));
      b2 = t1.$and(0, A.CryptoOps__load3(b, 5).$shr(0, 2));
      b3 = t1.$and(0, A.CryptoOps__load4(b, 7).$shr(0, 7));
      b4 = t1.$and(0, A.CryptoOps__load4(b, 10).$shr(0, 4));
      b5 = t1.$and(0, A.CryptoOps__load3(b, 13).$shr(0, 1));
      b6 = t1.$and(0, A.CryptoOps__load4(b, 15).$shr(0, 6));
      b7 = t1.$and(0, A.CryptoOps__load3(b, 18).$shr(0, 3));
      b8 = t1.$and(0, A.CryptoOps__load3(b, 21));
      b9 = t1.$and(0, A.CryptoOps__load4(b, 23).$shr(0, 5));
      b10 = t1.$and(0, A.CryptoOps__load3(b, 26).$shr(0, 2));
      b11 = A.CryptoOps__load4(b, 28).$shr(0, 7);
      s0 = a0.$add(0, b0);
      s1 = a1.$add(0, b1);
      s2 = a2.$add(0, b2);
      s3 = a3.$add(0, b3);
      s4 = a4.$add(0, b4);
      s5 = a5.$add(0, b5);
      s6 = a6.$add(0, b6);
      s7 = a7.$add(0, b7);
      s8 = a8.$add(0, b8);
      s9 = a9.$add(0, b9);
      s10 = a10.$add(0, b10);
      s11 = a11.$add(0, b11);
      s12 = $.$get$_BigIntImpl_zero();
      t1 = $.$get$CryptoOps__bitMaskFor20();
      carry0 = s0.$add(0, t1).$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry2 = s2.$add(0, t1).$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry4 = s4.$add(0, t1).$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry6 = s6.$add(0, t1).$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry8 = s8.$add(0, t1).$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry10 = s10.$add(0, t1).$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry1 = s1.$add(0, t1).$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry3 = s3.$add(0, t1).$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry5 = s5.$add(0, t1).$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry7 = s7.$add(0, t1).$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry9 = s9.$add(0, t1).$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry11 = s11.$add(0, t1).$shr(0, 21);
      s120 = s12.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      s0 = s0.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(666643)));
      s1 = s1.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(470296)));
      s2 = s2.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(654183)));
      s3 = s3.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(997805)));
      s4 = s4.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(136657)));
      s5 = s5.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(683901)));
      carry0 = s0.$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry1 = s1.$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry2 = s2.$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry3 = s3.$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry4 = s4.$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry5 = s5.$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry6 = s6.$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry7 = s7.$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry8 = s8.$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry9 = s9.$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry10 = s10.$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry11 = s11.$shr(0, 21);
      s120 = s12.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      s0 = s0.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(666643)));
      s1 = s1.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(470296)));
      s2 = s2.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(654183)));
      s3 = s3.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(997805)));
      s4 = s4.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(136657)));
      s5 = s5.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(683901)));
      carry0 = s0.$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry1 = s1.$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry2 = s2.$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry3 = s3.$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry4 = s4.$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry5 = s5.$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry6 = s6.$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry7 = s7.$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry8 = s8.$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry9 = s9.$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry10 = s10.$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      sBig = A.List_List$filled(32, s12, false, type$.BigInt);
      B.JSArray_methods.$indexSet(sBig, 0, s0.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 1, s0.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 2, s0.$shr(0, 16).$or(0, s1.$shl(0, 5)));
      B.JSArray_methods.$indexSet(sBig, 3, s1.$shr(0, 3));
      B.JSArray_methods.$indexSet(sBig, 4, s1.$shr(0, 11));
      B.JSArray_methods.$indexSet(sBig, 5, s1.$shr(0, 19).$or(0, s2.$shl(0, 2)));
      B.JSArray_methods.$indexSet(sBig, 6, s2.$shr(0, 6));
      B.JSArray_methods.$indexSet(sBig, 7, s2.$shr(0, 14).$or(0, s3.$shl(0, 7)));
      B.JSArray_methods.$indexSet(sBig, 8, s3.$shr(0, 1));
      B.JSArray_methods.$indexSet(sBig, 9, s3.$shr(0, 9));
      B.JSArray_methods.$indexSet(sBig, 10, s3.$shr(0, 17).$or(0, s4.$shl(0, 4)));
      B.JSArray_methods.$indexSet(sBig, 11, s4.$shr(0, 4));
      B.JSArray_methods.$indexSet(sBig, 12, s4.$shr(0, 12));
      B.JSArray_methods.$indexSet(sBig, 13, s4.$shr(0, 20).$or(0, s5.$shl(0, 1)));
      B.JSArray_methods.$indexSet(sBig, 14, s5.$shr(0, 7));
      B.JSArray_methods.$indexSet(sBig, 15, s5.$shr(0, 15).$or(0, s6.$shl(0, 6)));
      B.JSArray_methods.$indexSet(sBig, 16, s6.$shr(0, 2));
      B.JSArray_methods.$indexSet(sBig, 17, s6.$shr(0, 10));
      B.JSArray_methods.$indexSet(sBig, 18, s6.$shr(0, 18).$or(0, s7.$shl(0, 3)));
      B.JSArray_methods.$indexSet(sBig, 19, s7.$shr(0, 5));
      B.JSArray_methods.$indexSet(sBig, 20, s7.$shr(0, 13));
      B.JSArray_methods.$indexSet(sBig, 21, s8.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 22, s8.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 23, s8.$shr(0, 16).$or(0, s9.$shl(0, 5)));
      B.JSArray_methods.$indexSet(sBig, 24, s9.$shr(0, 3));
      B.JSArray_methods.$indexSet(sBig, 25, s9.$shr(0, 11));
      B.JSArray_methods.$indexSet(sBig, 26, s9.$shr(0, 19).$or(0, s10.$shl(0, 2)));
      B.JSArray_methods.$indexSet(sBig, 27, s10.$shr(0, 6));
      B.JSArray_methods.$indexSet(sBig, 28, s10.$shr(0, 14).$or(0, s11.$shl(0, 7)));
      B.JSArray_methods.$indexSet(sBig, 29, s11.$shr(0, 1));
      B.JSArray_methods.$indexSet(sBig, 30, s11.$shr(0, 9));
      B.JSArray_methods.$indexSet(sBig, 31, s11.$shr(0, 17));
      for (i = 0; i < 32; ++i) {
        t1 = sBig[i];
        t2 = $.$get$_BigIntImpl_one();
        B.JSArray_methods.$indexSet(s, i, t1.$and(0, t2.$shl(0, 8).$sub(0, t2)).toInt$0(0));
      }
    },
    CryptoOps_scReduce32(s) {
      var t1, s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, carry0, carry2, carry4, carry6, carry8, carry10, carry1, carry3, carry5, carry7, carry9, carry11, s120, sBig, i, t2, t3;
      A._BytesHelper_asMin32(s, "scReduce32");
      t1 = $.$get$CryptoOps__b2097151();
      s0 = t1.$and(0, A.CryptoOps__load3(s, 0));
      s1 = t1.$and(0, A.CryptoOps__load4(s, 2).$shr(0, 5));
      s2 = t1.$and(0, A.CryptoOps__load3(s, 5).$shr(0, 2));
      s3 = t1.$and(0, A.CryptoOps__load4(s, 7).$shr(0, 7));
      s4 = t1.$and(0, A.CryptoOps__load4(s, 10).$shr(0, 4));
      s5 = t1.$and(0, A.CryptoOps__load3(s, 13).$shr(0, 1));
      s6 = t1.$and(0, A.CryptoOps__load4(s, 15).$shr(0, 6));
      s7 = t1.$and(0, A.CryptoOps__load3(s, 18).$shr(0, 3));
      s8 = t1.$and(0, A.CryptoOps__load3(s, 21));
      s9 = t1.$and(0, A.CryptoOps__load4(s, 23).$shr(0, 5));
      s10 = t1.$and(0, A.CryptoOps__load3(s, 26).$shr(0, 2));
      s11 = A.CryptoOps__load4(s, 28).$shr(0, 7);
      s12 = $.$get$_BigIntImpl_zero();
      t1 = $.$get$CryptoOps__bitMaskFor20();
      carry0 = s0.$add(0, t1).$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry2 = s2.$add(0, t1).$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry4 = s4.$add(0, t1).$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry6 = s6.$add(0, t1).$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry8 = s8.$add(0, t1).$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry10 = s10.$add(0, t1).$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry1 = s1.$add(0, t1).$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry3 = s3.$add(0, t1).$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry5 = s5.$add(0, t1).$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry7 = s7.$add(0, t1).$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry9 = s9.$add(0, t1).$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry11 = s11.$add(0, t1).$shr(0, 21);
      s120 = s12.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      s0 = s0.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(666643)));
      s1 = s1.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(470296)));
      s2 = s2.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(654183)));
      s3 = s3.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(997805)));
      s4 = s4.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(136657)));
      s5 = s5.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(683901)));
      carry0 = s0.$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry1 = s1.$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry2 = s2.$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry3 = s3.$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry4 = s4.$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry5 = s5.$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry6 = s6.$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry7 = s7.$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry8 = s8.$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry9 = s9.$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry10 = s10.$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      carry11 = s11.$shr(0, 21);
      s120 = s12.$add(0, carry11);
      s11 = s11.$sub(0, carry11.$shl(0, 21));
      s0 = s0.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(666643)));
      s1 = s1.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(470296)));
      s2 = s2.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(654183)));
      s3 = s3.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(997805)));
      s4 = s4.$add(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(136657)));
      s5 = s5.$sub(0, s120.$mul(0, A._BigIntImpl__BigIntImpl$from(683901)));
      carry0 = s0.$shr(0, 21);
      s1 = s1.$add(0, carry0);
      s0 = s0.$sub(0, carry0.$shl(0, 21));
      carry1 = s1.$shr(0, 21);
      s2 = s2.$add(0, carry1);
      s1 = s1.$sub(0, carry1.$shl(0, 21));
      carry2 = s2.$shr(0, 21);
      s3 = s3.$add(0, carry2);
      s2 = s2.$sub(0, carry2.$shl(0, 21));
      carry3 = s3.$shr(0, 21);
      s4 = s4.$add(0, carry3);
      s3 = s3.$sub(0, carry3.$shl(0, 21));
      carry4 = s4.$shr(0, 21);
      s5 = s5.$add(0, carry4);
      s4 = s4.$sub(0, carry4.$shl(0, 21));
      carry5 = s5.$shr(0, 21);
      s6 = s6.$add(0, carry5);
      s5 = s5.$sub(0, carry5.$shl(0, 21));
      carry6 = s6.$shr(0, 21);
      s7 = s7.$add(0, carry6);
      s6 = s6.$sub(0, carry6.$shl(0, 21));
      carry7 = s7.$shr(0, 21);
      s8 = s8.$add(0, carry7);
      s7 = s7.$sub(0, carry7.$shl(0, 21));
      carry8 = s8.$shr(0, 21);
      s9 = s9.$add(0, carry8);
      s8 = s8.$sub(0, carry8.$shl(0, 21));
      carry9 = s9.$shr(0, 21);
      s10 = s10.$add(0, carry9);
      s9 = s9.$sub(0, carry9.$shl(0, 21));
      carry10 = s10.$shr(0, 21);
      s11 = s11.$add(0, carry10);
      s10 = s10.$sub(0, carry10.$shl(0, 21));
      sBig = A.List_List$filled(32, s12, false, type$.BigInt);
      B.JSArray_methods.$indexSet(sBig, 0, s0.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 1, s0.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 2, s0.$shr(0, 16).$or(0, s1.$shl(0, 5)));
      B.JSArray_methods.$indexSet(sBig, 3, s1.$shr(0, 3));
      B.JSArray_methods.$indexSet(sBig, 4, s1.$shr(0, 11));
      B.JSArray_methods.$indexSet(sBig, 5, s1.$shr(0, 19).$or(0, s2.$shl(0, 2)));
      B.JSArray_methods.$indexSet(sBig, 6, s2.$shr(0, 6));
      B.JSArray_methods.$indexSet(sBig, 7, s2.$shr(0, 14).$or(0, s3.$shl(0, 7)));
      B.JSArray_methods.$indexSet(sBig, 8, s3.$shr(0, 1));
      B.JSArray_methods.$indexSet(sBig, 9, s3.$shr(0, 9));
      B.JSArray_methods.$indexSet(sBig, 10, s3.$shr(0, 17).$or(0, s4.$shl(0, 4)));
      B.JSArray_methods.$indexSet(sBig, 11, s4.$shr(0, 4));
      B.JSArray_methods.$indexSet(sBig, 12, s4.$shr(0, 12));
      B.JSArray_methods.$indexSet(sBig, 13, s4.$shr(0, 20).$or(0, s5.$shl(0, 1)));
      B.JSArray_methods.$indexSet(sBig, 14, s5.$shr(0, 7));
      B.JSArray_methods.$indexSet(sBig, 15, s5.$shr(0, 15).$or(0, s6.$shl(0, 6)));
      B.JSArray_methods.$indexSet(sBig, 16, s6.$shr(0, 2));
      B.JSArray_methods.$indexSet(sBig, 17, s6.$shr(0, 10));
      B.JSArray_methods.$indexSet(sBig, 18, s6.$shr(0, 18).$or(0, s7.$shl(0, 3)));
      B.JSArray_methods.$indexSet(sBig, 19, s7.$shr(0, 5));
      B.JSArray_methods.$indexSet(sBig, 20, s7.$shr(0, 13));
      B.JSArray_methods.$indexSet(sBig, 21, s8.$shr(0, 0));
      B.JSArray_methods.$indexSet(sBig, 22, s8.$shr(0, 8));
      B.JSArray_methods.$indexSet(sBig, 23, s8.$shr(0, 16).$or(0, s9.$shl(0, 5)));
      B.JSArray_methods.$indexSet(sBig, 24, s9.$shr(0, 3));
      B.JSArray_methods.$indexSet(sBig, 25, s9.$shr(0, 11));
      B.JSArray_methods.$indexSet(sBig, 26, s9.$shr(0, 19).$or(0, s10.$shl(0, 2)));
      B.JSArray_methods.$indexSet(sBig, 27, s10.$shr(0, 6));
      B.JSArray_methods.$indexSet(sBig, 28, s10.$shr(0, 14).$or(0, s11.$shl(0, 7)));
      B.JSArray_methods.$indexSet(sBig, 29, s11.$shr(0, 1));
      B.JSArray_methods.$indexSet(sBig, 30, s11.$shr(0, 9));
      B.JSArray_methods.$indexSet(sBig, 31, s11.$shr(0, 17));
      for (t1 = J.getInterceptor$ax(s), i = 0; i < 32; ++i) {
        t2 = sBig[i];
        t3 = $.$get$_BigIntImpl_one();
        t1.$indexSet(s, i, t2.$and(0, t3.$shl(0, 8).$sub(0, t3)).toInt$0(0));
      }
    },
    CryptoOps__load4(data, offset) {
      var t3,
        t1 = J.getInterceptor$asx(data),
        r = t1.$index(data, offset),
        t2 = t1.$index(data, offset + 1);
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = t1.$index(data, offset + 2);
      if (typeof t3 !== "number")
        return t3.$shl();
      t1 = t1.$index(data, offset + 3);
      if (typeof t1 !== "number")
        return t1.$shl();
      return A._BigIntImpl__BigIntImpl$from((r | t2 << 8 | t3 << 16 | t1 << 24) >>> 0);
    },
    CryptoOps__load3(data, offset) {
      var t1 = J.getInterceptor$asx(data),
        r = t1.$index(data, offset),
        t2 = t1.$index(data, offset + 1);
      if (typeof t2 !== "number")
        return t2.$shl();
      t1 = t1.$index(data, offset + 2);
      if (typeof t1 !== "number")
        return t1.$shl();
      return A._BigIntImpl__BigIntImpl$from((r | t2 << 8 | t1 << 16) >>> 0);
    },
    CryptoOps_geFromBytesVartime_(h, s) {
      var t1, u, v, vxx, check, h0, h1, h2, h3, h4, h5, h6, h7, h8, h9, t2, carry9, carry1, carry3, carry5, carry7, carry0, carry2, carry4, carry6, carry8, t3, t4;
      A._BytesHelper_asMin32(s, "geFromBytesVartime");
      t1 = type$.int;
      u = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      v = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      vxx = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      check = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
      h0 = A.CryptoOps__load4(s, 0);
      h1 = A.CryptoOps__load3(s, 4).$shl(0, 6);
      h2 = A.CryptoOps__load3(s, 7).$shl(0, 5);
      h3 = A.CryptoOps__load3(s, 10).$shl(0, 3);
      h4 = A.CryptoOps__load3(s, 13).$shl(0, 2);
      h5 = A.CryptoOps__load4(s, 16);
      h6 = A.CryptoOps__load3(s, 20).$shl(0, 7);
      h7 = A.CryptoOps__load3(s, 23).$shl(0, 5);
      h8 = A.CryptoOps__load3(s, 26).$shl(0, 4);
      h9 = A.CryptoOps__load3(s, 29).$and(0, A._BigIntImpl__BigIntImpl$from(8388607)).$shl(0, 2);
      t1 = h9.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(33554428));
      t2 = false;
      if (t1 === 0) {
        t1 = h8.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(268435440));
        if (t1 === 0) {
          t1 = h7.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(536870880));
          if (t1 === 0) {
            t1 = h6.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(2147483520));
            if (t1 === 0) {
              t1 = h5.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(4294967295));
              if (t1 === 0) {
                t1 = h4.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(67108860));
                if (t1 === 0) {
                  t1 = h3.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(134217720));
                  if (t1 === 0) {
                    t1 = h2.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(536870880));
                    if (t1 === 0) {
                      t1 = h1.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(1073741760));
                      t1 = t1 === 0 && h0.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(4294967277)) >= 0;
                    } else
                      t1 = t2;
                  } else
                    t1 = t2;
                } else
                  t1 = t2;
              } else
                t1 = t2;
            } else
              t1 = t2;
          } else
            t1 = t2;
        } else
          t1 = t2;
      } else
        t1 = t2;
      if (t1)
        return -1;
      t1 = $.$get$CryptoOps__bitMaskFor24();
      carry9 = h9.$add(0, t1).$shr(0, 25);
      h0 = h0.$add(0, carry9.$mul(0, A._BigIntImpl__BigIntImpl$from(19)));
      h9 = h9.$sub(0, carry9.$shl(0, 25));
      carry1 = h1.$add(0, t1).$shr(0, 25);
      h2 = h2.$add(0, carry1);
      h1 = h1.$sub(0, carry1.$shl(0, 25));
      carry3 = h3.$add(0, t1).$shr(0, 25);
      h4 = h4.$add(0, carry3);
      h3 = h3.$sub(0, carry3.$shl(0, 25));
      carry5 = h5.$add(0, t1).$shr(0, 25);
      h6 = h6.$add(0, carry5);
      h5 = h5.$sub(0, carry5.$shl(0, 25));
      carry7 = h7.$add(0, t1).$shr(0, 25);
      h8 = h8.$add(0, carry7);
      h7 = h7.$sub(0, carry7.$shl(0, 25));
      t1 = $.$get$CryptoOps__bitMaskFor25();
      carry0 = h0.$add(0, t1).$shr(0, 26);
      h1 = h1.$add(0, carry0);
      h0 = h0.$sub(0, carry0.$shl(0, 26));
      carry2 = h2.$add(0, t1).$shr(0, 26);
      h3 = h3.$add(0, carry2);
      h2 = h2.$sub(0, carry2.$shl(0, 26));
      carry4 = h4.$add(0, t1).$shr(0, 26);
      h5 = h5.$add(0, carry4);
      h4 = h4.$sub(0, carry4.$shl(0, 26));
      carry6 = h6.$add(0, t1).$shr(0, 26);
      h7 = h7.$add(0, carry6);
      h6 = h6.$sub(0, carry6.$shl(0, 26));
      carry8 = h8.$add(0, t1).$shr(0, 26);
      h9 = h9.$add(0, carry8);
      h8 = h8.$sub(0, carry8.$shl(0, 26));
      t1 = h.y;
      t2 = t1.h;
      B.JSArray_methods.$indexSet(t2, 0, h0.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 1, h1.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 2, h2.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 3, h3.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 4, h4.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 5, h5.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 6, h6.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 7, h7.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 8, h8.toSigned$1(0, 32).toInt$0(0));
      B.JSArray_methods.$indexSet(t2, 9, h9.toSigned$1(0, 32).toInt$0(0));
      t2 = h.z;
      t2.fillOne$0();
      A.CryptoOps_feSq(u, t1);
      A.CryptoOps_feMul(v, u, B.FieldElement_iwY);
      A.CryptoOps_feSub(u, u, t2);
      A.CryptoOps_feAdd(v, v, t2);
      t2 = h.x;
      A.CryptoOps_feDivpowm1(t2, u, v);
      A.CryptoOps_feSq(vxx, t2);
      A.CryptoOps_feMul(vxx, vxx, v);
      A.CryptoOps_feSub(check, vxx, u);
      if (A.CryptoOps_feIsnonzero(check) !== 0) {
        A.CryptoOps_feAdd(check, vxx, u);
        if (A.CryptoOps_feIsnonzero(check) !== 0)
          return -1;
        A.CryptoOps_feMul(t2, t2, B.FieldElement_9T4);
      }
      t3 = A.CryptoOps_feIsnegative(t2);
      t4 = J.$index$asx(s, 31);
      if (typeof t4 !== "number")
        return t4.$shr();
      if (t3 !== B.JSNumber_methods._shrOtherPositive$1(t4, 7)) {
        if (A.CryptoOps_feIsnonzero(t2) === 0)
          return -1;
        A.CryptoOps_feNeg(t2, t2);
      }
      A.CryptoOps_feMul(h.t, t2, t1);
      return 0;
    },
    CryptoOps_geDoubleScalarMultPrecompVartime2P3(r3, a, aI, b, bI) {
      var t1, aslide, bslide, t, u, r, i, t2, t3, t4, t5, t6, t7, t8, t9, t10,
        _s35_ = "geDoubleScalarMultPrecompVartime2P3";
      A._BytesHelper_asMin32(b, _s35_);
      A._BytesHelper_asMin32(a, _s35_);
      t1 = type$.int;
      aslide = A.List_List$filled(256, 0, false, t1);
      bslide = A.List_List$filled(256, 0, false, t1);
      t = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      u = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      r = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_slide(aslide, a);
      A.CryptoOps_slide(bslide, b);
      A.CryptoOps_geP2Zero(r);
      for (i = 255; i >= 0; --i)
        if (aslide[i] !== 0 || bslide[i] !== 0)
          break;
      for (t1 = r.x, t2 = t.x, t3 = t.t, t4 = r.y, t5 = t.y, t6 = t.z, t7 = r.z, t8 = aI.length, t9 = bI.length; i >= 0; --i) {
        A.CryptoOps_geP2Dbl(t, r);
        t10 = aslide[i];
        if (t10 > 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t10 = B.JSInt_methods._tdivFast$1(aslide[i], 2);
          if (!(t10 >= 0 && t10 < t8))
            return A.ioore(aI, t10);
          A.CryptoOps_geAdd(t, u, aI[t10]);
        } else if (t10 < 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t10 = B.JSInt_methods._tdivFast$1(-aslide[i], 2);
          if (!(t10 >= 0 && t10 < t8))
            return A.ioore(aI, t10);
          A.CryptoOps_geSub(t, u, aI[t10]);
        }
        t10 = bslide[i];
        if (t10 > 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t10 = B.JSInt_methods._tdivFast$1(bslide[i], 2);
          if (!(t10 >= 0 && t10 < t9))
            return A.ioore(bI, t10);
          A.CryptoOps_geAdd(t, u, bI[t10]);
        } else if (t10 < 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t10 = B.JSInt_methods._tdivFast$1(-bslide[i], 2);
          if (!(t10 >= 0 && t10 < t9))
            return A.ioore(bI, t10);
          A.CryptoOps_geSub(t, u, bI[t10]);
        }
        if (i === 0)
          A.CryptoOps_geP1P1ToP3(r3, t);
        else {
          A.CryptoOps_feMul(t1, t2, t3);
          A.CryptoOps_feMul(t4, t5, t6);
          A.CryptoOps_feMul(t7, t6, t3);
        }
      }
    },
    CryptoOps_geTripleScalarMultBaseVartime(r, a, b, bI, c, cI) {
      var t1, aslide, bslide, cslide, t, u, i, t2, t3, t4, t5, t6, t7, t8, t9, t10,
        _s29_ = "geTripleScalarMultBaseVartime";
      A._BytesHelper_asMin32(b, _s29_);
      A._BytesHelper_asMin32(a, _s29_);
      A._BytesHelper_asMin32(c, _s29_);
      t1 = type$.int;
      aslide = A.List_List$filled(256, 0, false, t1);
      bslide = A.List_List$filled(256, 0, false, t1);
      cslide = A.List_List$filled(256, 0, false, t1);
      t = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      u = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_slide(aslide, a);
      A.CryptoOps_slide(bslide, b);
      A.CryptoOps_slide(cslide, c);
      A.CryptoOps_geP2Zero(r);
      for (i = 255; i >= 0; --i)
        if (aslide[i] !== 0 || bslide[i] !== 0 || cslide[i] !== 0)
          break;
      for (t1 = r.x, t2 = t.x, t3 = t.t, t4 = r.y, t5 = t.y, t6 = t.z, t7 = r.z, t8 = bI.length, t9 = cI.length; i >= 0; --i) {
        A.CryptoOps_geP2Dbl(t, r);
        t10 = aslide[i];
        if (t10 > 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t10 = B.JSInt_methods._tdivFast$1(aslide[i], 2);
          if (!(t10 >= 0 && t10 < 8))
            return A.ioore(B.List_Ao9, t10);
          A.CryptoOps_geMadd(t, u, B.List_Ao9[t10]);
        } else if (t10 < 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t10 = B.JSInt_methods._tdivFast$1(-aslide[i], 2);
          if (!(t10 >= 0 && t10 < 8))
            return A.ioore(B.List_Ao9, t10);
          A.CryptoOps_geMsub(t, u, B.List_Ao9[t10]);
        }
        t10 = bslide[i];
        if (t10 > 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t10 = B.JSInt_methods._tdivFast$1(bslide[i], 2);
          if (!(t10 >= 0 && t10 < t8))
            return A.ioore(bI, t10);
          A.CryptoOps_geAdd(t, u, bI[t10]);
        } else if (t10 < 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t10 = B.JSInt_methods._tdivFast$1(-bslide[i], 2);
          if (!(t10 >= 0 && t10 < t8))
            return A.ioore(bI, t10);
          A.CryptoOps_geSub(t, u, bI[t10]);
        }
        t10 = cslide[i];
        if (t10 > 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t10 = B.JSInt_methods._tdivFast$1(cslide[i], 2);
          if (!(t10 >= 0 && t10 < t9))
            return A.ioore(cI, t10);
          A.CryptoOps_geAdd(t, u, cI[t10]);
        } else if (t10 < 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t10 = B.JSInt_methods._tdivFast$1(-cslide[i], 2);
          if (!(t10 >= 0 && t10 < t9))
            return A.ioore(cI, t10);
          A.CryptoOps_geSub(t, u, cI[t10]);
        }
        A.CryptoOps_feMul(t1, t2, t3);
        A.CryptoOps_feMul(t4, t5, t6);
        A.CryptoOps_feMul(t7, t6, t3);
      }
    },
    CryptoOps_geTripleScalarMultBasePrecompVartime(r, a, aI, b, bI, c, cI) {
      var t1, aslide, bslide, cslide, t, u, i, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11,
        _s36_ = "geTripleScalarMultBasePrecompVartime";
      A._BytesHelper_asMin32(b, _s36_);
      A._BytesHelper_asMin32(a, _s36_);
      A._BytesHelper_asMin32(c, _s36_);
      t1 = type$.int;
      aslide = A.List_List$filled(256, 0, false, t1);
      bslide = A.List_List$filled(256, 0, false, t1);
      cslide = A.List_List$filled(256, 0, false, t1);
      t = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      u = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_slide(aslide, a);
      A.CryptoOps_slide(bslide, b);
      A.CryptoOps_slide(cslide, c);
      A.CryptoOps_geP2Zero(r);
      for (i = 255; i >= 0; --i)
        if (aslide[i] !== 0 || bslide[i] !== 0 || cslide[i] !== 0)
          break;
      for (t1 = r.x, t2 = t.x, t3 = t.t, t4 = r.y, t5 = t.y, t6 = t.z, t7 = r.z, t8 = aI.length, t9 = bI.length, t10 = cI.length; i >= 0; --i) {
        A.CryptoOps_geP2Dbl(t, r);
        t11 = aslide[i];
        if (t11 > 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t11 = B.JSInt_methods._tdivFast$1(aslide[i], 2);
          if (!(t11 >= 0 && t11 < t8))
            return A.ioore(aI, t11);
          A.CryptoOps_geAdd(t, u, aI[t11]);
        } else if (t11 < 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t11 = B.JSInt_methods._tdivFast$1(-aslide[i], 2);
          if (!(t11 >= 0 && t11 < t8))
            return A.ioore(aI, t11);
          A.CryptoOps_geSub(t, u, aI[t11]);
        }
        t11 = bslide[i];
        if (t11 > 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t11 = B.JSInt_methods._tdivFast$1(bslide[i], 2);
          if (!(t11 >= 0 && t11 < t9))
            return A.ioore(bI, t11);
          A.CryptoOps_geAdd(t, u, bI[t11]);
        } else if (t11 < 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t11 = B.JSInt_methods._tdivFast$1(-bslide[i], 2);
          if (!(t11 >= 0 && t11 < t9))
            return A.ioore(bI, t11);
          A.CryptoOps_geSub(t, u, bI[t11]);
        }
        t11 = cslide[i];
        if (t11 > 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t11 = B.JSInt_methods._tdivFast$1(cslide[i], 2);
          if (!(t11 >= 0 && t11 < t10))
            return A.ioore(cI, t11);
          A.CryptoOps_geAdd(t, u, cI[t11]);
        } else if (t11 < 0) {
          A.CryptoOps_geP1P1ToP3(u, t);
          t11 = B.JSInt_methods._tdivFast$1(-cslide[i], 2);
          if (!(t11 >= 0 && t11 < t10))
            return A.ioore(cI, t11);
          A.CryptoOps_geSub(t, u, cI[t11]);
        }
        A.CryptoOps_feMul(t1, t2, t3);
        A.CryptoOps_feMul(t4, t5, t6);
        A.CryptoOps_feMul(t7, t6, t3);
      }
    },
    _BytesHelper_asMin32(_this, methodName) {
      var t1 = J.getInterceptor$asx(_this);
      if (t1.get$length(_this) < 32 || t1.any$1(_this, new A._BytesHelper_asMin32_closure()))
        throw A.wrapException(new A.CryptoOpsException(methodName + " operation failed. invalid key provided.", null));
    },
    _BytesHelper_asMin32_closure: function _BytesHelper_asMin32_closure() {
    },
    CurveFp$(a, b, h, p) {
      return new A.CurveFp(p, a, b, h);
    },
    CurveED$(a, d, h, order, p) {
      return new A.CurveED(p, a, d, h);
    },
    CurveFp: function CurveFp(t0, t1, t2, t3) {
      var _ = this;
      _.p = t0;
      _.a = t1;
      _.b = t2;
      _.h = t3;
    },
    CurveED: function CurveED(t0, t1, t2, t3) {
      var _ = this;
      _.p = t0;
      _.a = t1;
      _.d = t2;
      _.h = t3;
    },
    Curve: function Curve() {
    },
    ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(bytes, curve) {
      var secexp;
      if (J.get$length$asx(bytes) !== A.BigintUtils_orderLen(curve.curve.p))
        throw A.wrapException(B.ArgumentException_Mvk);
      secexp = A.BigintUtils_fromBytes(bytes, B.C_Endian, false);
      return new A.ECDSAPrivateKey(A.ECDSAPublicKey_ECDSAPublicKey(curve, curve.$mul(0, secexp)), secexp);
    },
    ECDSAPrivateKey: function ECDSAPrivateKey(t0, t1) {
      this.publicKey = t0;
      this.secretMultiplier = t1;
    },
    ECDSAPublicKey_ECDSAPublicKey(generator, point) {
      var t2, t3, leftSide,
        curve = generator.curve,
        n = generator.order,
        p = curve.p,
        t1 = $.$get$_BigIntImpl_zero();
      if (t1.compareTo$1(0, point.get$x()) <= 0 && point.get$x().compareTo$1(0, p) < 0)
        t2 = !(t1.compareTo$1(0, point.get$y()) <= 0 && point.get$y().compareTo$1(0, p) < 0);
      else
        t2 = true;
      if (t2)
        throw A.wrapException(B.ArgumentException_86y);
      t2 = point.get$x();
      t3 = point.get$y();
      leftSide = t3.$mul(0, t3).$sub(0, t2.$mul(0, t2).$add(0, curve.a).$mul(0, t2).$add(0, curve.b)).$mod(0, p);
      t1 = leftSide.compareTo$1(0, t1);
      t1 = t1 !== 0;
      if (t1)
        throw A.wrapException(B.ArgumentException_MQy);
      if (n == null)
        throw A.wrapException(B.ArgumentException_23h);
      t1 = curve.h.compareTo$1(0, $.$get$_BigIntImpl_one());
      t1 = t1 !== 0 && !point.$mul(0, n).get$isInfinity();
      if (t1)
        throw A.wrapException(B.ArgumentException_mKQ);
      return new A.ECDSAPublicKey(generator, point);
    },
    ECDSAPublicKey: function ECDSAPublicKey(t0, t1) {
      this.generator = t0;
      this.point = t1;
    },
    ECDSASignature_ECDSASignature$fromBytes(bytes, generator) {
      var t1 = generator.curve.p;
      if (bytes.length !== A.BigintUtils_orderLen(t1) * 2)
        throw A.wrapException(A.ArgumentException$("incorrect signatureBytes length " + bytes.length, null));
      return new A.ECDSASignature(A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(bytes, 0, A.BigintUtils_orderLen(t1)), B.C_Endian, false), A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(bytes, A.BigintUtils_orderLen(t1), A.BigintUtils_orderLen(t1) * 2), B.C_Endian, false));
    },
    ECDSASignature: function ECDSASignature(t0, t1) {
      this.r = t0;
      this.s = t1;
    },
    EDDSAPrivateKey$_(generator, baselen, privateKey, secret, extendedKey) {
      var t1, t2;
      A.BytesUtils_validateListOfBytes(privateKey);
      t1 = type$.int;
      t2 = A.List_List$unmodifiable(privateKey, t1);
      A.BytesUtils_validateListOfBytes(extendedKey);
      t1 = A.List_List$unmodifiable(extendedKey, t1);
      return new A.EDDSAPrivateKey(generator, baselen, t2, t1, secret, A.EDDSAPublicKey_EDDSAPublicKey$fromPoint(generator, A.EDPoint_EDPoint$fromBytes(generator.curve, generator.$mul(0, secret).toBytes$0())));
    },
    EDDSAPrivateKey_EDDSAPrivateKey(generator, privateKey, hashMethod) {
      var extendedKey, prunedKey, h, hLog, t3, t4,
        t1 = generator.curve,
        t2 = t1.p,
        baselen = B.JSInt_methods._tdivFast$1(t2.get$bitLength(0) + 1 + 7, 8);
      if (J.get$length$asx(privateKey) !== baselen)
        throw A.wrapException(A.ArgumentException$(string$.Incorr + baselen + " bytes", null));
      extendedKey = hashMethod.call$0().update$1(privateKey).digest$0();
      prunedKey = A.List_List$from(B.JSArray_methods.sublist$2(extendedKey, 0, baselen), true, type$.int);
      h = t1.h;
      t1 = h.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(4));
      if (t1 === 0)
        hLog = 2;
      else {
        t1 = h.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(8));
        if (t1 === 0)
          hLog = 3;
        else {
          A.throwExpression(B.ArgumentException_MYu);
          hLog = null;
        }
      }
      if (0 >= prunedKey.length)
        return A.ioore(prunedKey, 0);
      t1 = prunedKey[0];
      if (typeof hLog !== "number")
        return A.iae(hLog);
      t3 = B.JSInt_methods._shlPositive$1(1, hLog);
      if (typeof t1 !== "number")
        return t1.$and();
      B.JSArray_methods.$indexSet(prunedKey, 0, (t1 & ~(t3 - 1)) >>> 0);
      t1 = B.JSInt_methods.$mod(t2.get$bitLength(0), 8);
      t2 = prunedKey.length;
      t3 = t2 - 1;
      if (t1 === 0) {
        B.JSArray_methods.$indexSet(prunedKey, t3, 0);
        t1 = prunedKey.length;
        t2 = t1 - 2;
        if (!(t2 >= 0))
          return A.ioore(prunedKey, t2);
        t1 = prunedKey[t2];
        if (typeof t1 !== "number")
          return t1.$or();
        B.JSArray_methods.$indexSet(prunedKey, t2, (t1 | 128) >>> 0);
      } else {
        if (!(t3 >= 0))
          return A.ioore(prunedKey, t3);
        t2 = prunedKey[t3];
        t4 = B.JSInt_methods.$shl(1, t1);
        if (typeof t2 !== "number")
          return t2.$and();
        B.JSArray_methods.$indexSet(prunedKey, t3, (t2 & t4 - 1 | B.JSInt_methods.$shl(1, t1 - 1)) >>> 0);
      }
      return A.EDDSAPrivateKey$_(generator, baselen, privateKey, A.BigintUtils_fromBytes(prunedKey, B.C_Endian0, false), B.JSArray_methods.sublist$1(extendedKey, baselen));
    },
    EDDSAPrivateKey_EDDSAPrivateKey$fromKhalow(generator, privateKey) {
      var privateKeyPart, extendedKey,
        baselen = B.JSInt_methods._tdivFast$1(generator.curve.p.get$bitLength(0) + 1 + 7, 8),
        t1 = J.getInterceptor$asx(privateKey);
      if (t1.get$length(privateKey) < baselen)
        throw A.wrapException(A.ArgumentException$(string$.Incorr + baselen * 2 + " bytes", null));
      privateKeyPart = t1.sublist$2(privateKey, 0, baselen);
      extendedKey = t1.sublist$1(privateKey, baselen);
      return A.EDDSAPrivateKey$_(generator, baselen, privateKeyPart, A.BigintUtils_fromBytes(privateKeyPart, B.C_Endian0, false), extendedKey);
    },
    EDDSAPrivateKey: function EDDSAPrivateKey(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.generator = t0;
      _.baselen = t1;
      _.key = t2;
      _._extendedKey = t3;
      _.secret = t4;
      _.publicKey = t5;
    },
    EDDSAPublicKey_EDDSAPublicKey$fromPoint(generator, publicPoint) {
      var baselen = B.JSInt_methods._tdivFast$1(generator.curve.p.get$bitLength(0) + 1 + 7, 8),
        pubkeyBytes = publicPoint.toBytes$0();
      if (pubkeyBytes.length !== baselen)
        throw A.wrapException(A.ArgumentException$("Incorrect size of the public key, expected: " + baselen + " bytes", null));
      A.BytesUtils_validateListOfBytes(pubkeyBytes);
      return new A.EDDSAPublicKey(generator, A.List_List$unmodifiable(pubkeyBytes, type$.int), baselen, publicPoint);
    },
    EDDSAPublicKey: function EDDSAPublicKey(t0, t1, t2, t3) {
      var _ = this;
      _.generator = t0;
      _._encoded = t1;
      _.baselen = t2;
      _._point = t3;
    },
    AbstractPoint_fromBytes(curve, data) {
      var p, expLen, t1, t2, y, x, keyLen, rawEncodingLength, encodeType, prefix, result;
      if (curve instanceof A.CurveED) {
        data = A.List_List$from(data, true, type$.int);
        p = curve.p;
        expLen = B.JSInt_methods._tdivFast$1(p.get$bitLength(0) + 1 + 7, 8);
        t1 = data.length;
        if (t1 !== expLen)
          A.throwExpression(B.ArgumentException_sMv);
        t2 = expLen - 1;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(data, t2);
        t1 = data[t2];
        if (typeof t1 !== "number")
          return t1.$and();
        B.JSArray_methods.$indexSet(data, t2, t1 & 127);
        y = A.BigintUtils_fromBytes(data, B.C_Endian0, false);
        x = A.ECDSAUtils_modularSquareRootPrime(y.$mul(0, y).$sub(0, A._BigIntImpl__BigIntImpl$from(1)).$mul(0, A.BigintUtils_inverseMod(curve.d.$mul(0, y).$mul(0, y).$sub(0, curve.a), p)).$mod(0, p), p);
        if (!x.get$isEven(0) !== ((t1 >>> 7 & 1) === 1))
          x = x.$negate(0).$mod(0, p);
        return new A.Tuple(x, y, type$.Tuple_BigInt_BigInt);
      }
      t1 = J.getInterceptor$asx(data);
      keyLen = t1.get$length(data);
      rawEncodingLength = 2 * A.BigintUtils_orderLen(curve.get$p());
      if (keyLen === rawEncodingLength)
        encodeType = B.EncodeType_2;
      else if (keyLen === rawEncodingLength + 1) {
        prefix = t1.$index(data, 0);
        if (prefix === 4)
          encodeType = B.EncodeType_3;
        else {
          if (!(prefix === 6 || prefix === 7))
            throw A.wrapException(B.ArgumentException_wmT);
          encodeType = B.EncodeType_1;
        }
      } else {
        if (keyLen !== B.JSInt_methods._tdivFast$1(rawEncodingLength, 2) + 1)
          throw A.wrapException(B.ArgumentException_wmT);
        encodeType = B.EncodeType_0;
      }
      type$.CurveFp._as(curve);
      switch (encodeType) {
        case B.EncodeType_0:
          return A.AbstractPoint__fromCompressed(data, curve);
        case B.EncodeType_3:
          return A.AbstractPoint__fromRawEncoding(t1.sublist$1(data, 1), rawEncodingLength);
        case B.EncodeType_1:
          result = A.AbstractPoint__fromRawEncoding(t1.sublist$1(data, 1), rawEncodingLength);
          y = result.item2;
          t2 = $.$get$_BigIntImpl_one();
          prefix = y.$and(0, t2);
          t2 = prefix.compareTo$1(0, t2);
          if (!(t2 === 0 && !J.$eq$(t1.$index(data, 0), 7))) {
            t2 = prefix.compareTo$1(0, $.$get$_BigIntImpl_zero());
            t1 = t2 === 0 && !J.$eq$(t1.$index(data, 0), 6);
          } else
            t1 = true;
          if (t1)
            A.throwExpression(B.ArgumentException_i9J);
          return new A.Tuple(result.item1, y, type$.Tuple_BigInt_BigInt);
        default:
          return A.AbstractPoint__fromRawEncoding(data, rawEncodingLength);
      }
    },
    AbstractPoint__fromRawEncoding(data, rawEncodingLength) {
      var t1 = B.JSInt_methods._tdivFast$1(rawEncodingLength, 2),
        t2 = J.getInterceptor$ax(data),
        xs = t2.sublist$2(data, 0, t1),
        ys = t2.sublist$1(data, t1);
      return new A.Tuple(A.BigintUtils_fromBytes(xs, B.C_Endian, false), A.BigintUtils_fromBytes(ys, B.C_Endian, false), type$.Tuple_BigInt_BigInt);
    },
    AbstractPoint__fromCompressed(data, curve) {
      var isEven, x, p, beta, t2,
        t1 = J.getInterceptor$asx(data);
      if (!J.$eq$(t1.$index(data, 0), 2) && !J.$eq$(t1.$index(data, 0), 3))
        throw A.wrapException(B.ArgumentException_EGl);
      isEven = J.$eq$(t1.$index(data, 0), 2);
      x = A.BigintUtils_fromBytes(t1.sublist$1(data, 1), B.C_Endian, false);
      p = curve.p;
      beta = A.ECDSAUtils_modularSquareRootPrime(x.modPow$2(0, A._BigIntImpl__BigIntImpl$from(3), p).$add(0, curve.a.$mul(0, x)).$add(0, curve.b).$mod(0, p), p);
      t1 = beta.$and(0, $.$get$_BigIntImpl_one()).compareTo$1(0, $.$get$_BigIntImpl_zero());
      t2 = type$.Tuple_BigInt_BigInt;
      if (isEven === (t1 !== 0))
        return new A.Tuple(x, p.$sub(0, beta), t2);
      else
        return new A.Tuple(x, beta, t2);
    },
    EncodeType: function EncodeType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    AbstractPoint: function AbstractPoint() {
    },
    ProjectiveECCPoint_ProjectiveECCPoint(curve, generator, order, x, y, z) {
      return new A.ProjectiveECCPoint(curve, order, generator, B.List_empty, A._setArrayType([x, y, z], type$.JSArray_BigInt));
    },
    ProjectiveECCPoint_ProjectiveECCPoint$fromBytes(curve, data, order) {
      var coords = A.AbstractPoint_fromBytes(curve, data);
      return new A.ProjectiveECCPoint(curve, order, false, B.List_empty, A._setArrayType([coords.item1, coords.item2, $.$get$_BigIntImpl_one()], type$.JSArray_BigInt));
    },
    ProjectiveECCPoint: function ProjectiveECCPoint(t0, t1, t2, t3, t4) {
      var _ = this;
      _.curve = t0;
      _.order = t1;
      _.generator = t2;
      _._ec_projective_point$_precompute = t3;
      _._ec_projective_point$_coords = t4;
    },
    EDPoint$(curve, generator, order, t, x, y, z) {
      return new A.EDPoint(curve, order, generator, B.List_empty, A._setArrayType([x, y, z, t], type$.JSArray_BigInt));
    },
    EDPoint_EDPoint$fromBytes(curve, data) {
      var coords = A.AbstractPoint_fromBytes(curve, data),
        x = coords.item1,
        y = coords.item2,
        t = x.$mul(0, y);
      return new A.EDPoint(curve, null, false, B.List_empty, A._setArrayType([x, y, $.$get$_BigIntImpl_one(), t], type$.JSArray_BigInt));
    },
    EDPoint: function EDPoint(t0, t1, t2, t3, t4) {
      var _ = this;
      _.curve = t0;
      _.order = t1;
      _.generator = t2;
      _._precompute = t3;
      _._coords = t4;
    },
    RistrettoPoint_RistrettoPoint$fromEdwardsPoint(point) {
      var t2, t3, t4,
        coords = A.List_List$from(point._coords, true, type$.BigInt),
        t1 = coords.length;
      if (0 >= t1)
        return A.ioore(coords, 0);
      t2 = coords[0];
      if (1 >= t1)
        return A.ioore(coords, 1);
      t3 = coords[1];
      if (2 >= t1)
        return A.ioore(coords, 2);
      t4 = coords[2];
      if (3 >= t1)
        return A.ioore(coords, 3);
      return new A.RistrettoPoint(point.curve, point.order, false, B.List_empty, A._setArrayType([t2, t3, t4, coords[3]], type$.JSArray_BigInt));
    },
    RistrettoPoint_RistrettoPoint$fromBytes(bytes) {
      var s2, u1, u2, u1_2, u2_2, v, invSqrt, t3, x2, y2, x, y, t,
        c = $.$get$Curves_curveEd25519(),
        a = c.a,
        $P = c.p,
        s = A.BigintUtils_fromBytes(bytes, B.C_Endian0, false),
        t1 = A.positiveMod(s, $P),
        t2 = $.$get$_BigIntImpl_one();
      t1 = t1.$and(0, t2).compareTo$1(0, t2);
      if (t1 === 0)
        throw A.wrapException(B.ArgumentException_ynv);
      s2 = A.positiveMod(s.$mul(0, s), $P);
      u1 = A.positiveMod(t2.$add(0, a.$mul(0, s2)), $P);
      u2 = A.positiveMod(t2.$sub(0, a.$mul(0, s2)), $P);
      u1_2 = A.positiveMod(u1.$mul(0, u1), $P);
      u2_2 = A.positiveMod(u2.$mul(0, u2), $P);
      v = A.positiveMod(a.$mul(0, c.d).$mul(0, u1_2).$sub(0, u2_2), $P);
      invSqrt = A.sqrtUV(t2, A.positiveMod(v.$mul(0, u2_2), $P));
      t1 = invSqrt.item2;
      t3 = J.getInterceptor$ns(t1);
      x2 = A.positiveMod(t3.$mul(t1, u2), $P);
      y2 = A.positiveMod(t3.$mul(t1, x2).$mul(0, v), $P);
      x = A.positiveMod(s.$add(0, s).$mul(0, x2), $P);
      t1 = A.positiveMod(x, $P).$and(0, t2).compareTo$1(0, t2);
      if (t1 === 0)
        x = A.positiveMod(x.$negate(0), $P);
      y = A.positiveMod(u1.$mul(0, y2), $P);
      t = A.positiveMod(x.$mul(0, y), $P);
      t1 = true;
      if (A.boolConversionCheck(invSqrt.item1)) {
        t3 = A.positiveMod(t, $P).$and(0, t2).compareTo$1(0, t2);
        if (t3 !== 0)
          t1 = y.compareTo$1(0, $.$get$_BigIntImpl_zero()) === 0;
      }
      if (t1)
        throw A.wrapException(B.ArgumentException_ynv);
      return A.RistrettoPoint_RistrettoPoint$fromEdwardsPoint(new A.EDPoint(c, null, false, B.List_empty, A._setArrayType([x, y, t2, t], type$.JSArray_BigInt)));
    },
    RistrettoPoint: function RistrettoPoint(t0, t1, t2, t3, t4) {
      var _ = this;
      _.curve = t0;
      _.order = t1;
      _.generator = t2;
      _._precompute = t3;
      _._coords = t4;
    },
    SquareRootError: function SquareRootError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    JacobiError: function JacobiError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    ChaCha20Poly1305$(key) {
      var t1 = new A.ChaCha20Poly1305();
      if (J.get$length$asx(key) !== 32)
        A.throwExpression(B.ArgumentException_0Z9);
      t1.set$__ChaCha20Poly1305__key_A(type$.List_int._as(A.BytesUtils_toBytes(key, false)));
      return t1;
    },
    ChaCha20Poly1305: function ChaCha20Poly1305() {
      this.__ChaCha20Poly1305__key_A = $;
    },
    CTR$(cipher, iv) {
      var t1 = new A.CTR(),
        t2 = type$.int,
        t3 = type$.List_int;
      t1.set$__CTR__counter_F(t3._as(A.List_List$filled(16, 0, false, t2)));
      t2 = t3._as(A.List_List$filled(16, 0, false, t2));
      t1.__CTR__buffer_F !== $ && A.throwLateFieldAI("_buffer");
      t1.set$__CTR__buffer_F(t2);
      type$.nullable_List_int._as(iv);
      t1._cipher = null;
      t2 = J.get$length$asx(iv);
      t3 = t1.__CTR__counter_F;
      t3 === $ && A.throwLateFieldNI("_counter");
      if (t2 !== t3.length)
        A.throwExpression(B.ArgumentException_seG);
      t1._cipher = cipher;
      B.JSArray_methods.setAll$2(t3, 0, iv);
      t2 = t1.__CTR__buffer_F;
      t2 === $ && A.throwLateFieldNI("_buffer");
      t1._bufpos = t2.length;
      return t1;
    },
    _incrementCounter(counter) {
      var i, carry, t1;
      for (i = counter.length - 1, carry = 1; i >= 0; --i) {
        t1 = counter[i];
        if (typeof t1 !== "number")
          return t1.$and();
        carry += t1 & 255;
        B.JSArray_methods.$indexSet(counter, i, carry & 255);
        carry = carry >>> 8;
      }
      if (carry > 0)
        throw A.wrapException(B.ArgumentException_fVB);
    },
    CTR: function CTR() {
      var _ = this;
      _.__CTR__buffer_F = _.__CTR__counter_F = $;
      _._bufpos = 0;
      _._cipher = null;
    },
    BLAKE2b$(config, digestLength) {
      var t4,
        t1 = type$.int,
        t2 = A.List_List$from($.$get$_iv(), false, t1),
        t3 = new A.BLAKE2b(t2, A.List_List$filled(128, 0, false, t1), A.List_List$filled(4, 0, false, t1), A.List_List$filled(4, 0, false, t1), A.List_List$filled(32, 0, false, t1), A.List_List$filled(32, 0, false, t1));
      if (digestLength < 1 || digestLength > 64)
        A.throwExpression(B.ArgumentException_0vI);
      t3.__BLAKE2b_getDigestLength_F = digestLength;
      config != null;
      if (0 >= t2.length)
        return A.ioore(t2, 0);
      t4 = t2[0];
      if (typeof t4 !== "number")
        return t4.$xor();
      B.JSArray_methods.$indexSet(t2, 0, (t4 ^ (digestLength | 16842752)) >>> 0);
      t3.set$__BLAKE2b__initialState_A(type$.List_int._as(A.List_List$from(t2, false, t1)));
      return t3;
    },
    Keccack$(digestLength) {
      var t1 = type$.int;
      t1 = new A.Keccack(digestLength, A.List_List$filled(25, 0, false, t1), A.List_List$filled(25, 0, false, t1), A.List_List$filled(200, 0, false, t1));
      t1._Keccack$1(digestLength * 2);
      return t1;
    },
    Keccack_hash(data, digestLength) {
      var t2, out,
        t1 = type$.int,
        h = new A.Keccack(digestLength, A.List_List$filled(25, 0, false, t1), A.List_List$filled(25, 0, false, t1), A.List_List$filled(200, 0, false, t1));
      h._Keccack$1(digestLength * 2);
      t2 = type$.List_int;
      h.super$_Keccack$update(t2._as(data));
      out = A.List_List$filled(digestLength, 0, false, t1);
      t2._as(out);
      if (!h._finished)
        h._padAndPermute$1(1);
      else
        h._pos = 0;
      h._squeeze$1(out);
      h.reset$0();
      return out;
    },
    SHA3$(digestLength) {
      var t1 = type$.int;
      t1 = new A.SHA3(digestLength, A.List_List$filled(25, 0, false, t1), A.List_List$filled(25, 0, false, t1), A.List_List$filled(200, 0, false, t1));
      t1._Keccack$1(digestLength * 2);
      return t1;
    },
    SHA3_hash(data) {
      var digest,
        h = A.SHA3$(32);
      h.super$_Keccack$update(type$.List_int._as(data));
      digest = h.digest$0();
      h.reset$0();
      return digest;
    },
    SHA3256_hash(data) {
      var digest,
        t1 = type$.int,
        h = new A.SHA3256(32, A.List_List$filled(25, 0, false, t1), A.List_List$filled(25, 0, false, t1), A.List_List$filled(200, 0, false, t1));
      h._Keccack$1(64);
      h.super$_Keccack$update(type$.List_int._as(data));
      digest = h.digest$0();
      h.reset$0();
      return digest;
    },
    _keccakf(sh, sl, buf) {
      var i, t1, r, bch0, bch1, bch2, bch3, bch4, bcl0, bcl1, bcl2, bcl3, bcl4, th, tl, bch00, bcl00, t2;
      for (i = 0; i < 25; ++i) {
        t1 = i * 8;
        B.JSArray_methods.$indexSet(sl, i, A.readUint32LE(buf, t1));
        B.JSArray_methods.$indexSet(sh, i, A.readUint32LE(buf, t1 + 4));
      }
      for (r = 0; r < 24; ++r) {
        t1 = sh[0];
        bch0 = t1 ^ sh[5] ^ sh[10] ^ sh[15] ^ sh[20];
        bch1 = sh[1] ^ sh[6] ^ sh[11] ^ sh[16] ^ sh[21];
        bch2 = sh[2] ^ sh[7] ^ sh[12] ^ sh[17] ^ sh[22];
        bch3 = sh[3] ^ sh[8] ^ sh[13] ^ sh[18] ^ sh[23];
        bch4 = sh[4] ^ sh[9] ^ sh[14] ^ sh[19] ^ sh[24];
        bcl0 = sl[0] ^ sl[5] ^ sl[10] ^ sl[15] ^ sl[20];
        bcl1 = sl[1] ^ sl[6] ^ sl[11] ^ sl[16] ^ sl[21];
        bcl2 = sl[2] ^ sl[7] ^ sl[12] ^ sl[17] ^ sl[22];
        bcl3 = sl[3] ^ sl[8] ^ sl[13] ^ sl[18] ^ sl[23];
        bcl4 = sl[4] ^ sl[9] ^ sl[14] ^ sl[19] ^ sl[24];
        th = bch4 ^ (bch1 << 1 | bcl1 >>> 31);
        tl = bcl4 ^ (bcl1 << 1 | bch1 >>> 31);
        B.JSArray_methods.$indexSet(sh, 0, (t1 ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 5, (sh[5] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 10, (sh[10] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 15, (sh[15] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 20, (sh[20] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 0, (sl[0] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 5, (sl[5] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 10, (sl[10] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 15, (sl[15] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 20, (sl[20] ^ tl) >>> 0);
        th = bch0 ^ (bch2 << 1 | bcl2 >>> 31);
        tl = bcl0 ^ (bcl2 << 1 | bch2 >>> 31);
        B.JSArray_methods.$indexSet(sh, 1, (sh[1] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 6, (sh[6] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 11, (sh[11] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 16, (sh[16] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 21, (sh[21] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 1, (sl[1] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 6, (sl[6] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 11, (sl[11] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 16, (sl[16] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 21, (sl[21] ^ tl) >>> 0);
        th = bch1 ^ (bch3 << 1 | bcl3 >>> 31);
        tl = bcl1 ^ (bcl3 << 1 | bch3 >>> 31);
        B.JSArray_methods.$indexSet(sh, 2, (sh[2] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 7, (sh[7] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 12, (sh[12] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 17, (sh[17] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 22, (sh[22] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 2, (sl[2] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 7, (sl[7] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 12, (sl[12] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 17, (sl[17] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 22, (sl[22] ^ tl) >>> 0);
        th = bch2 ^ (bch4 << 1 | bcl4 >>> 31);
        tl = bcl2 ^ (bcl4 << 1 | bch4 >>> 31);
        B.JSArray_methods.$indexSet(sh, 3, (sh[3] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 3, (sl[3] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sh, 8, (sh[8] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 8, (sl[8] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sh, 13, (sh[13] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 13, (sl[13] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sh, 18, (sh[18] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 18, (sl[18] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sh, 23, (sh[23] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 23, (sl[23] ^ tl) >>> 0);
        th = bch3 ^ (bch0 << 1 | bcl0 >>> 31);
        tl = bcl3 ^ (bcl0 << 1 | bch0 >>> 31);
        B.JSArray_methods.$indexSet(sh, 4, (sh[4] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 9, (sh[9] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 14, (sh[14] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 19, (sh[19] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 24, (sh[24] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 4, (sl[4] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 9, (sl[9] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 14, (sl[14] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 19, (sl[19] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 24, (sl[24] ^ tl) >>> 0);
        th = sh[1];
        tl = sl[1];
        bch0 = sh[10];
        bcl0 = sl[10];
        B.JSArray_methods.$indexSet(sh, 10, (th << 1 | tl >>> 31) >>> 0);
        B.JSArray_methods.$indexSet(sl, 10, (tl << 1 | th >>> 31) >>> 0);
        bch00 = sh[7];
        bcl00 = sl[7];
        B.JSArray_methods.$indexSet(sh, 7, (bch0 << 3 | bcl0 >>> 29) >>> 0);
        B.JSArray_methods.$indexSet(sl, 7, (bcl0 << 3 | bch0 >>> 29) >>> 0);
        bch0 = sh[11];
        bcl0 = sl[11];
        B.JSArray_methods.$indexSet(sh, 11, (bch00 << 6 | bcl00 >>> 26) >>> 0);
        B.JSArray_methods.$indexSet(sl, 11, (bcl00 << 6 | bch00 >>> 26) >>> 0);
        bch00 = sh[17];
        bcl00 = sl[17];
        B.JSArray_methods.$indexSet(sh, 17, (bch0 << 10 | bcl0 >>> 22) >>> 0);
        B.JSArray_methods.$indexSet(sl, 17, (bcl0 << 10 | bch0 >>> 22) >>> 0);
        bch0 = sh[18];
        bcl0 = sl[18];
        B.JSArray_methods.$indexSet(sh, 18, (bch00 << 15 | bcl00 >>> 17) >>> 0);
        B.JSArray_methods.$indexSet(sl, 18, (bcl00 << 15 | bch00 >>> 17) >>> 0);
        bch00 = sh[3];
        bcl00 = sl[3];
        B.JSArray_methods.$indexSet(sh, 3, (bch0 << 21 | bcl0 >>> 11) >>> 0);
        B.JSArray_methods.$indexSet(sl, 3, (bcl0 << 21 | bch0 >>> 11) >>> 0);
        bch0 = sh[5];
        bcl0 = sl[5];
        B.JSArray_methods.$indexSet(sh, 5, (bch00 << 28 | bcl00 >>> 4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 5, (bcl00 << 28 | bch00 >>> 4) >>> 0);
        bch00 = sh[16];
        bcl00 = sl[16];
        B.JSArray_methods.$indexSet(sh, 16, (bcl0 << 4 | bch0 >>> 28) >>> 0);
        B.JSArray_methods.$indexSet(sl, 16, (bch0 << 4 | bcl0 >>> 28) >>> 0);
        bch0 = sh[8];
        bcl0 = sl[8];
        B.JSArray_methods.$indexSet(sh, 8, (bcl00 << 13 | bch00 >>> 19) >>> 0);
        B.JSArray_methods.$indexSet(sl, 8, (bch00 << 13 | bcl00 >>> 19) >>> 0);
        bch00 = sh[21];
        bcl00 = sl[21];
        B.JSArray_methods.$indexSet(sh, 21, (bcl0 << 23 | bch0 >>> 9) >>> 0);
        B.JSArray_methods.$indexSet(sl, 21, (bch0 << 23 | bcl0 >>> 9) >>> 0);
        bch0 = sh[24];
        bcl0 = sl[24];
        B.JSArray_methods.$indexSet(sh, 24, (bch00 << 2 | bcl00 >>> 30) >>> 0);
        B.JSArray_methods.$indexSet(sl, 24, (bcl00 << 2 | bch00 >>> 30) >>> 0);
        bch00 = sh[4];
        bcl00 = sl[4];
        B.JSArray_methods.$indexSet(sh, 4, (bch0 << 14 | bcl0 >>> 18) >>> 0);
        B.JSArray_methods.$indexSet(sl, 4, (bcl0 << 14 | bch0 >>> 18) >>> 0);
        bch0 = sh[15];
        bcl0 = sl[15];
        B.JSArray_methods.$indexSet(sh, 15, (bch00 << 27 | bcl00 >>> 5) >>> 0);
        B.JSArray_methods.$indexSet(sl, 15, (bcl00 << 27 | bch00 >>> 5) >>> 0);
        bch00 = sh[23];
        bcl00 = sl[23];
        B.JSArray_methods.$indexSet(sh, 23, (bcl0 << 9 | bch0 >>> 23) >>> 0);
        B.JSArray_methods.$indexSet(sl, 23, (bch0 << 9 | bcl0 >>> 23) >>> 0);
        bch0 = sh[19];
        bcl0 = sl[19];
        B.JSArray_methods.$indexSet(sh, 19, (bcl00 << 24 | bch00 >>> 8) >>> 0);
        B.JSArray_methods.$indexSet(sl, 19, (bch00 << 24 | bcl00 >>> 8) >>> 0);
        bch00 = sh[13];
        bcl00 = sl[13];
        B.JSArray_methods.$indexSet(sh, 13, (bch0 << 8 | bcl0 >>> 24) >>> 0);
        B.JSArray_methods.$indexSet(sl, 13, (bcl0 << 8 | bch0 >>> 24) >>> 0);
        bch0 = sh[12];
        bcl0 = sl[12];
        B.JSArray_methods.$indexSet(sh, 12, (bch00 << 25 | bcl00 >>> 7) >>> 0);
        B.JSArray_methods.$indexSet(sl, 12, (bcl00 << 25 | bch00 >>> 7) >>> 0);
        bch00 = sh[2];
        bcl00 = sl[2];
        B.JSArray_methods.$indexSet(sh, 2, (bcl0 << 11 | bch0 >>> 21) >>> 0);
        B.JSArray_methods.$indexSet(sl, 2, (bch0 << 11 | bcl0 >>> 21) >>> 0);
        bch0 = sh[20];
        bcl0 = sl[20];
        B.JSArray_methods.$indexSet(sh, 20, (bcl00 << 30 | bch00 >>> 2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 20, (bch00 << 30 | bcl00 >>> 2) >>> 0);
        bch00 = sh[14];
        bcl00 = sl[14];
        B.JSArray_methods.$indexSet(sh, 14, (bch0 << 18 | bcl0 >>> 14) >>> 0);
        B.JSArray_methods.$indexSet(sl, 14, (bcl0 << 18 | bch0 >>> 14) >>> 0);
        bch0 = sh[22];
        bcl0 = sl[22];
        B.JSArray_methods.$indexSet(sh, 22, (bcl00 << 7 | bch00 >>> 25) >>> 0);
        B.JSArray_methods.$indexSet(sl, 22, (bch00 << 7 | bcl00 >>> 25) >>> 0);
        bch00 = sh[9];
        bcl00 = sl[9];
        B.JSArray_methods.$indexSet(sh, 9, (bcl0 << 29 | bch0 >>> 3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 9, (bch0 << 29 | bcl0 >>> 3) >>> 0);
        bch0 = sh[6];
        bcl0 = sl[6];
        B.JSArray_methods.$indexSet(sh, 6, (bch00 << 20 | bcl00 >>> 12) >>> 0);
        B.JSArray_methods.$indexSet(sl, 6, (bcl00 << 20 | bch00 >>> 12) >>> 0);
        B.JSArray_methods.$indexSet(sh, 1, (bcl0 << 12 | bch0 >>> 20) >>> 0);
        B.JSArray_methods.$indexSet(sl, 1, (bch0 << 12 | bcl0 >>> 20) >>> 0);
        bch0 = sh[0];
        bch1 = sh[1];
        bch2 = sh[2];
        bch3 = sh[3];
        bch4 = sh[4];
        B.JSArray_methods.$indexSet(sh, 0, (bch0 ^ ~bch1 & bch2) >>> 0);
        B.JSArray_methods.$indexSet(sh, 1, (sh[1] ^ ~bch2 & bch3) >>> 0);
        B.JSArray_methods.$indexSet(sh, 2, (sh[2] ^ ~bch3 & bch4) >>> 0);
        B.JSArray_methods.$indexSet(sh, 3, (sh[3] ^ ~bch4 & bch0) >>> 0);
        B.JSArray_methods.$indexSet(sh, 4, (sh[4] ^ ~bch0 & bch1) >>> 0);
        bcl0 = sl[0];
        bcl1 = sl[1];
        bcl2 = sl[2];
        bcl3 = sl[3];
        bcl4 = sl[4];
        B.JSArray_methods.$indexSet(sl, 0, (bcl0 ^ ~bcl1 & bcl2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 1, (sl[1] ^ ~bcl2 & bcl3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 2, (sl[2] ^ ~bcl3 & bcl4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 3, (sl[3] ^ ~bcl4 & bcl0) >>> 0);
        B.JSArray_methods.$indexSet(sl, 4, (sl[4] ^ ~bcl0 & bcl1) >>> 0);
        bch0 = sh[5];
        bch1 = sh[6];
        bch2 = sh[7];
        bch3 = sh[8];
        bch4 = sh[9];
        B.JSArray_methods.$indexSet(sh, 5, (bch0 ^ ~bch1 & bch2) >>> 0);
        B.JSArray_methods.$indexSet(sh, 6, (sh[6] ^ ~bch2 & bch3) >>> 0);
        B.JSArray_methods.$indexSet(sh, 7, (sh[7] ^ ~bch3 & bch4) >>> 0);
        B.JSArray_methods.$indexSet(sh, 8, (sh[8] ^ ~bch4 & bch0) >>> 0);
        B.JSArray_methods.$indexSet(sh, 9, (sh[9] ^ ~bch0 & bch1) >>> 0);
        bcl0 = sl[5];
        bcl1 = sl[6];
        bcl2 = sl[7];
        bcl3 = sl[8];
        bcl4 = sl[9];
        B.JSArray_methods.$indexSet(sl, 5, (bcl0 ^ ~bcl1 & bcl2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 6, (sl[6] ^ ~bcl2 & bcl3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 7, (sl[7] ^ ~bcl3 & bcl4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 8, (sl[8] ^ ~bcl4 & bcl0) >>> 0);
        B.JSArray_methods.$indexSet(sl, 9, (sl[9] ^ ~bcl0 & bcl1) >>> 0);
        bch0 = sh[10];
        bch1 = sh[11];
        bch2 = sh[12];
        bch3 = sh[13];
        bch4 = sh[14];
        B.JSArray_methods.$indexSet(sh, 10, (bch0 ^ ~bch1 & bch2) >>> 0);
        B.JSArray_methods.$indexSet(sh, 11, (sh[11] ^ ~bch2 & bch3) >>> 0);
        B.JSArray_methods.$indexSet(sh, 12, (sh[12] ^ ~bch3 & bch4) >>> 0);
        B.JSArray_methods.$indexSet(sh, 13, (sh[13] ^ ~bch4 & bch0) >>> 0);
        B.JSArray_methods.$indexSet(sh, 14, (sh[14] ^ ~bch0 & bch1) >>> 0);
        bcl0 = sl[10];
        bcl1 = sl[11];
        bcl2 = sl[12];
        bcl3 = sl[13];
        bcl4 = sl[14];
        B.JSArray_methods.$indexSet(sl, 10, (bcl0 ^ ~bcl1 & bcl2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 11, (sl[11] ^ ~bcl2 & bcl3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 12, (sl[12] ^ ~bcl3 & bcl4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 13, (sl[13] ^ ~bcl4 & bcl0) >>> 0);
        B.JSArray_methods.$indexSet(sl, 14, (sl[14] ^ ~bcl0 & bcl1) >>> 0);
        bch0 = sh[15];
        bch1 = sh[16];
        bch2 = sh[17];
        bch3 = sh[18];
        bch4 = sh[19];
        B.JSArray_methods.$indexSet(sh, 15, (bch0 ^ ~bch1 & bch2) >>> 0);
        B.JSArray_methods.$indexSet(sh, 16, (sh[16] ^ ~bch2 & bch3) >>> 0);
        B.JSArray_methods.$indexSet(sh, 17, (sh[17] ^ ~bch3 & bch4) >>> 0);
        B.JSArray_methods.$indexSet(sh, 18, (sh[18] ^ ~bch4 & bch0) >>> 0);
        B.JSArray_methods.$indexSet(sh, 19, (sh[19] ^ ~bch0 & bch1) >>> 0);
        bcl0 = sl[15];
        bcl1 = sl[16];
        bcl2 = sl[17];
        bcl3 = sl[18];
        bcl4 = sl[19];
        B.JSArray_methods.$indexSet(sl, 15, (bcl0 ^ ~bcl1 & bcl2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 16, (sl[16] ^ ~bcl2 & bcl3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 17, (sl[17] ^ ~bcl3 & bcl4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 18, (sl[18] ^ ~bcl4 & bcl0) >>> 0);
        B.JSArray_methods.$indexSet(sl, 19, (sl[19] ^ ~bcl0 & bcl1) >>> 0);
        bch0 = sh[20];
        bch1 = sh[21];
        bch2 = sh[22];
        bch3 = sh[23];
        bch4 = sh[24];
        B.JSArray_methods.$indexSet(sh, 20, (bch0 ^ ~bch1 & bch2) >>> 0);
        B.JSArray_methods.$indexSet(sh, 21, (sh[21] ^ ~bch2 & bch3) >>> 0);
        B.JSArray_methods.$indexSet(sh, 22, (sh[22] ^ ~bch3 & bch4) >>> 0);
        B.JSArray_methods.$indexSet(sh, 23, (sh[23] ^ ~bch4 & bch0) >>> 0);
        B.JSArray_methods.$indexSet(sh, 24, (sh[24] ^ ~bch0 & bch1) >>> 0);
        bcl0 = sl[20];
        bcl1 = sl[21];
        bcl2 = sl[22];
        bcl3 = sl[23];
        bcl4 = sl[24];
        B.JSArray_methods.$indexSet(sl, 20, (bcl0 ^ ~bcl1 & bcl2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 21, (sl[21] ^ ~bcl2 & bcl3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 22, (sl[22] ^ ~bcl3 & bcl4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 23, (sl[23] ^ ~bcl4 & bcl0) >>> 0);
        B.JSArray_methods.$indexSet(sl, 24, (sl[24] ^ ~bcl0 & bcl1) >>> 0);
        t1 = sh[0];
        t2 = $.$get$_hi();
        if (!(r < t2.length))
          return A.ioore(t2, r);
        t2 = t2[r];
        if (typeof t2 !== "number")
          return A.iae(t2);
        B.JSArray_methods.$indexSet(sh, 0, (t1 ^ t2) >>> 0);
        t2 = sl[0];
        t1 = $.$get$_lo();
        if (!(r < t1.length))
          return A.ioore(t1, r);
        t1 = t1[r];
        if (typeof t1 !== "number")
          return A.iae(t1);
        B.JSArray_methods.$indexSet(sl, 0, (t2 ^ t1) >>> 0);
      }
      for (i = 0; i < 25; ++i) {
        t1 = i * 8;
        A.writeUint32LE(sl[i], buf, t1);
        A.writeUint32LE(sh[i], buf, t1 + 4);
      }
    },
    MD4_hash(data) {
      var digest,
        t1 = type$.int,
        t2 = J.JSArray_JSArray$growable(0, t1),
        h = new A.MD4(t2, A.List_List$filled(4, 0, false, t1), A.List_List$filled(16, 0, false, t1));
      h.reset$0();
      h.update$1(data);
      digest = h.digest$0();
      h.clean$0();
      return digest;
    },
    MD4__ff(x, y, z) {
      return (x & y | ~x & z) >>> 0;
    },
    MD4__gg(x, y, z) {
      return (x & y | x & z | y & z) >>> 0;
    },
    MD4__hh(x, y, z) {
      return (x ^ y ^ z) >>> 0;
    },
    MD5_hash(data) {
      var digest,
        t1 = type$.int,
        t2 = J.JSArray_JSArray$growable(0, t1),
        h = new A.MD5(t2, A.List_List$filled(4, 0, false, t1), A.List_List$filled(16, 0, false, t1));
      h.reset$0();
      h.update$1(data);
      digest = h.digest$0();
      h.clean$0();
      return digest;
    },
    MD5__ff(x, y, z) {
      return (x & y | ~x & z) >>> 0;
    },
    MD5__gg(x, y, z) {
      return (x & z | y & ~z) >>> 0;
    },
    MD5__hh(x, y, z) {
      return (x ^ y ^ z) >>> 0;
    },
    MD5__ii(x, y, z) {
      return (y ^ (x | ~z)) >>> 0;
    },
    RIPEMD160_hash(data) {
      var digest,
        t1 = type$.int,
        t2 = J.JSArray_JSArray$growable(0, t1),
        h = new A.RIPEMD160(t2, A.List_List$filled(16, 0, false, t1));
      h.set$___RIPEMD__state_F(type$.List_int._as(A.List_List$filled(5, 0, false, t1)));
      h.reset$0();
      h.update$1(data);
      digest = h.digest$0();
      h.clean$0();
      return digest;
    },
    _RidempUtils_T(i, bl, cl, dl) {
      if (i < 16)
        return (bl ^ cl ^ dl) >>> 0;
      if (i < 32)
        return ((bl & cl | ~bl & dl) >>> 0) + 1518500249 >>> 0;
      if (i < 48)
        return (((bl | ~cl) ^ dl) >>> 0) + 1859775393 >>> 0;
      if (i < 64)
        return ((bl & dl | cl & ~dl) >>> 0) + 2400959708 >>> 0;
      return ((bl ^ (cl | ~dl)) >>> 0) + 2840853838 >>> 0;
    },
    _RidempUtils_t64(i, br, cr, dr) {
      if (i < 16)
        return ((br & dr | cr & ~dr) >>> 0) + 1352829926 >>> 0;
      if (i < 32)
        return (((br | ~cr) ^ dr) >>> 0) + 1548603684 >>> 0;
      if (i < 48)
        return ((br & cr | ~br & dr) >>> 0) + 1836072691 >>> 0;
      return (br ^ cr ^ dr) >>> 0;
    },
    _RidempUtils_t80(i, br, cr, dr) {
      if (i < 16)
        return ((br ^ (cr | ~dr)) >>> 0) + 1352829926 >>> 0;
      if (i < 32)
        return ((br & dr | cr & ~dr) >>> 0) + 1548603684 >>> 0;
      if (i < 48)
        return (((br | ~cr) ^ dr) >>> 0) + 1836072691 >>> 0;
      if (i < 64)
        return ((br & cr | ~br & dr) >>> 0) + 2053994217 >>> 0;
      return (br ^ cr ^ dr) >>> 0;
    },
    _RidempUtils_readState(lengthInBytes) {
      var _3285377520 = 3285377520, _1985229328 = 1985229328, _4275878552 = 4275878552, _2309737967 = 2309737967,
        state = A.List_List$filled(B.JSInt_methods._tdivFast$1(lengthInBytes, 4), 0, false, type$.int);
      B.JSArray_methods.$indexSet(state, 0, 1732584193);
      B.JSArray_methods.$indexSet(state, 1, 4023233417);
      B.JSArray_methods.$indexSet(state, 2, 2562383102);
      B.JSArray_methods.$indexSet(state, 3, 271733878);
      switch (lengthInBytes) {
        case 20:
          B.JSArray_methods.$indexSet(state, 4, _3285377520);
          break;
        case 32:
          B.JSArray_methods.$indexSet(state, 4, _1985229328);
          B.JSArray_methods.$indexSet(state, 5, _4275878552);
          B.JSArray_methods.$indexSet(state, 6, _2309737967);
          B.JSArray_methods.$indexSet(state, 7, 19088743);
          break;
        case 40:
          B.JSArray_methods.$indexSet(state, 4, _3285377520);
          B.JSArray_methods.$indexSet(state, 5, _1985229328);
          B.JSArray_methods.$indexSet(state, 6, _4275878552);
          B.JSArray_methods.$indexSet(state, 7, _2309737967);
          B.JSArray_methods.$indexSet(state, 8, 19088743);
          B.JSArray_methods.$indexSet(state, 9, 1009589775);
          break;
      }
      return state;
    },
    SHA256$() {
      var t1 = type$.int;
      t1 = new A.SHA256(A.List_List$filled(8, 0, false, t1), A.List_List$filled(64, 0, false, t1), A.List_List$filled(128, 0, false, t1), A.List_List$unmodifiable(B.List_02, t1));
      t1.reset$0();
      return t1;
    },
    SHA256_hash(data) {
      var digest,
        h = A.SHA256$();
      h.update$1(data);
      digest = h.digest$0();
      h.clean$0();
      return digest;
    },
    SHA512$() {
      var t1 = type$.int;
      t1 = new A.SHA512(A.List_List$filled(8, 0, false, t1), A.List_List$filled(8, 0, false, t1), A.List_List$filled(16, 0, false, t1), A.List_List$filled(16, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$unmodifiable(B.List_ePs, t1));
      t1.reset$0();
      return t1;
    },
    SHA512_hash(data) {
      var digest,
        h = A.SHA512$();
      h.update$1(data);
      digest = h.digest$0();
      h.clean$0();
      return digest;
    },
    Blake2bConfig: function Blake2bConfig(t0, t1) {
      this.key = t0;
      this.salt = t1;
    },
    BLAKE2b: function BLAKE2b(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._state = t0;
      _._hash$_buffer = t1;
      _._bufferLength = 0;
      _._ctr = t2;
      _._flag = t3;
      _._finished = _._lastNode = false;
      _._vtmp = t4;
      _._mtmp = t5;
      _._paddedKey = null;
      _.__BLAKE2b_getDigestLength_F = _.__BLAKE2b__initialState_A = $;
    },
    Blake2bState: function Blake2bState(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.state = t0;
      _.buffer = t1;
      _.bufferLength = t2;
      _.ctr = t3;
      _.flag = t4;
      _.lastNode = t5;
      _.paddedKey = t6;
      _.initialState = t7;
    },
    _Keccack: function _Keccack() {
    },
    Keccack: function Keccack(t0, t1, t2, t3) {
      var _ = this;
      _.digestLength = t0;
      _._sh = t1;
      _._sl = t2;
      _._state = t3;
      _._pos = 0;
      _._finished = false;
      _.___Keccack_blockSize_F = $;
    },
    SHA3: function SHA3(t0, t1, t2, t3) {
      var _ = this;
      _.getDigestLength = t0;
      _._sh = t1;
      _._sl = t2;
      _._state = t3;
      _._pos = 0;
      _._finished = false;
      _.___Keccack_blockSize_F = $;
    },
    SHA3256: function SHA3256(t0, t1, t2, t3) {
      var _ = this;
      _.getDigestLength = t0;
      _._sh = t1;
      _._sl = t2;
      _._state = t3;
      _._pos = 0;
      _._finished = false;
      _.___Keccack_blockSize_F = $;
    },
    SHAKE: function SHAKE() {
    },
    SHAKE128: function SHAKE128(t0, t1, t2, t3) {
      var _ = this;
      _.bitSize = t0;
      _._sh = t1;
      _._sl = t2;
      _._state = t3;
      _._pos = 0;
      _._finished = false;
      _.___Keccack_blockSize_F = $;
    },
    SHAKE256: function SHAKE256(t0, t1, t2, t3) {
      var _ = this;
      _.bitSize = t0;
      _._sh = t1;
      _._sl = t2;
      _._state = t3;
      _._pos = 0;
      _._finished = false;
      _.___Keccack_blockSize_F = $;
    },
    HashBytesState: function HashBytesState(t0, t1) {
      this.data = t0;
      this.pos = t1;
    },
    MD4: function MD4(t0, t1, t2) {
      var _ = this;
      _._hash$_buffer = t0;
      _._lengthInBytes = 0;
      _._state = t1;
      _._currentChunk = t2;
      _._finished = false;
    },
    MD5: function MD5(t0, t1, t2) {
      var _ = this;
      _._hash$_buffer = t0;
      _._lengthInBytes = 0;
      _._state = t1;
      _._currentChunk = t2;
      _._finished = false;
    },
    RIPEMD160: function RIPEMD160(t0, t1) {
      var _ = this;
      _._hash$_buffer = t0;
      _._lengthInBytes = 0;
      _.___RIPEMD__state_F = $;
      _._currentChunk = t1;
      _._finished = false;
    },
    _RIPEMD: function _RIPEMD() {
    },
    SH1State: function SH1State(t0, t1, t2) {
      this.buffer = t0;
      this.length = t1;
      this.state = t2;
    },
    SHA256: function SHA256(t0, t1, t2, t3) {
      var _ = this;
      _._state = t0;
      _._temp = t1;
      _._hash$_buffer = t2;
      _._bytesHashed = _._bufferLength = 0;
      _._finished = false;
      _._k = t3;
    },
    SHA256State: function SHA256State(t0, t1, t2, t3) {
      var _ = this;
      _.state = t0;
      _.buffer = t1;
      _.bufferLength = t2;
      _.bytesHashed = t3;
    },
    SHA512: function SHA512(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._stateHi = t0;
      _._stateLo = t1;
      _._tempHi = t2;
      _._tempLo = t3;
      _._hash$_buffer = t4;
      _._bytesHashed = _._bufferLength = 0;
      _._finished = false;
      _._k = t5;
    },
    SHA512State: function SHA512State(t0, t1, t2, t3, t4) {
      var _ = this;
      _.stateHi = t0;
      _.stateLo = t1;
      _.buffer = t2;
      _.bufferLength = t3;
      _.bytesHashed = t4;
    },
    SHA512256: function SHA512256(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._stateHi = t0;
      _._stateLo = t1;
      _._tempHi = t2;
      _._tempLo = t3;
      _._hash$_buffer = t4;
      _._bytesHashed = _._bufferLength = 0;
      _._finished = false;
      _._k = t5;
    },
    HMAC$(hash, key) {
      var t1 = new A.HMAC();
      t1.HMAC$3(hash, key, null);
      return t1;
    },
    HMAC: function HMAC() {
      var _ = this;
      _.__HMAC__outer_A = _.__HMAC__inner_A = $;
      _._hmac$_finished = false;
      _._outerKeyedState = _._innerKeyedState = null;
      _.__HMAC__blockSize_F = $;
    },
    Poly1305: function Poly1305(t0, t1, t2, t3) {
      var _ = this;
      _._poly1305$_buffer = t0;
      _._r = t1;
      _._h = t2;
      _._pad = t3;
      _._fin = _._leftover = 0;
      _._poly1305$_finished = false;
    },
    FortunaPRNG__generateSeed(digestLen) {
      var i,
        rand = $.$get$Random__secureRandom(),
        seed = A.List_List$filled(digestLen, 0, false, type$.int);
      for (i = 0; i < digestLen; ++i)
        B.JSArray_methods.$indexSet(seed, i, rand.nextInt$1(256));
      return seed;
    },
    FortunaPRNG: function FortunaPRNG(t0, t1) {
      var _ = this;
      _.__FortunaPRNG__counter_FI = _.__FortunaPRNG__key_FI = $;
      _._zeroBlock = t0;
      _._out = t1;
      _._c = 0;
    },
    GammaDistribution: function GammaDistribution(t0, t1) {
      this.shape = t0;
      this.scale = t1;
    },
    _KeyUtils__checkKeysBytes(bytes, expected, $name) {
      var t1 = J.getInterceptor$asx(bytes);
      if (t1.get$length(bytes) !== expected)
        throw A.wrapException(A.ArgumentException$("invalid " + $name + " bytes length expected " + expected + " but " + t1.get$length(bytes), null));
    },
    _KeyUtils_divideScalarByCofactor(s) {
      var low, i, t1, t2, t3,
        l = s.length - 1;
      for (low = 0, i = 0; t1 = s.length, i < t1; ++i) {
        t2 = l - i;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(s, t2);
        t1 = s[t2];
        if (typeof t1 !== "number")
          return t1.$and();
        B.JSArray_methods.$indexSet(s, t2, B.JSNumber_methods._shrOtherPositive$1(t1, 3));
        if (!(t2 < s.length))
          return A.ioore(s, t2);
        t3 = s[t2];
        if (typeof t3 !== "number")
          return t3.$add();
        B.JSArray_methods.$indexSet(s, t2, t3 + low);
        low = (t1 & 7) << 5;
      }
      return s;
    },
    _KeyUtils_toCanonical(bytes) {
      var t1, isCanonical,
        cloneBytes = A.List_List$from(bytes, true, type$.int);
      if (31 >= cloneBytes.length)
        return A.ioore(cloneBytes, 31);
      t1 = cloneBytes[31];
      if (typeof t1 !== "number")
        return t1.$and();
      B.JSArray_methods.$indexSet(cloneBytes, 31, t1 & 127);
      if (31 >= bytes.length)
        return A.ioore(bytes, 31);
      t1 = bytes[31];
      if (typeof t1 !== "number")
        return t1.$shr();
      B.JSNumber_methods._shrOtherPositive$1(t1, 7);
      isCanonical = A.BytesUtils_bytesEqual(cloneBytes, A.Ed25519Utils_scalarReduce(cloneBytes));
      if (isCanonical)
        return cloneBytes;
      return null;
    },
    SchnorrkelMiniSecretKey_SchnorrkelMiniSecretKey$fromBytes(keyBytes) {
      var bytes = A.BytesUtils_toBytes(keyBytes, true);
      A._KeyUtils__checkKeysBytes(keyBytes, 32, "mini secret key");
      return new A.SchnorrkelMiniSecretKey(bytes);
    },
    SchnorrkelSecretKey_SchnorrkelSecretKey(key, nonce) {
      var canonicalKey;
      A._KeyUtils__checkKeysBytes(key, 32, "mini secret key");
      A._KeyUtils__checkKeysBytes(nonce, 32, "nonce");
      canonicalKey = A._KeyUtils_toCanonical(key);
      if (canonicalKey != null)
        return new A.SchnorrkelSecretKey(A.BytesUtils_toBytes(canonicalKey, true), A.BytesUtils_toBytes(nonce, true));
      throw A.wrapException(B.ArgumentException_EyN);
    },
    SchnorrkelSecretKey_SchnorrkelSecretKey$fromBytes(secretKeyBytes) {
      var t1, keyBytes, nonceBytes;
      A._KeyUtils__checkKeysBytes(secretKeyBytes, 64, "secret key");
      t1 = J.getInterceptor$ax(secretKeyBytes);
      keyBytes = t1.sublist$2(secretKeyBytes, 0, 32);
      nonceBytes = t1.sublist$2(secretKeyBytes, 32, 64);
      return A.SchnorrkelSecretKey_SchnorrkelSecretKey(A.BytesUtils_toBytes(keyBytes, true), A.BytesUtils_toBytes(nonceBytes, true));
    },
    SchnorrkelPublicKey_SchnorrkelPublicKey(keyBytes) {
      A._KeyUtils__checkKeysBytes(keyBytes, 32, "public key");
      A.RistrettoPoint_RistrettoPoint$fromBytes(keyBytes);
      return new A.SchnorrkelPublicKey(A.BytesUtils_toBytes(keyBytes, true));
    },
    SchnorrkelSignature_SchnorrkelSignature$fromBytes(signatureBytes) {
      var r, s, t1, canonicalS;
      A._KeyUtils__checkKeysBytes(signatureBytes, 64, "signature");
      r = B.JSArray_methods.sublist$2(signatureBytes, 0, 32);
      s = B.JSArray_methods.sublist$2(signatureBytes, 32, 64);
      if (31 >= s.length)
        return A.ioore(s, 31);
      t1 = s[31];
      if (typeof t1 !== "number")
        return t1.$and();
      if ((t1 & 128) === 0)
        throw A.wrapException(B.ArgumentException_WNk);
      canonicalS = A._KeyUtils_toCanonical(s);
      if (canonicalS != null)
        return new A.SchnorrkelSignature(A.BytesUtils_toBytes(canonicalS, true), A.BytesUtils_toBytes(r, true));
      throw A.wrapException(B.ArgumentException_0);
    },
    ExpansionMode: function ExpansionMode(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    SchnorrkelMiniSecretKey: function SchnorrkelMiniSecretKey(t0) {
      this._keys$_bytes = t0;
    },
    SchnorrkelSecretKey: function SchnorrkelSecretKey(t0, t1) {
      this._keys$_key = t0;
      this._nonce = t1;
    },
    SchnorrkelSecretKey_hashCode_closure: function SchnorrkelSecretKey_hashCode_closure() {
    },
    SchnorrkelPublicKey: function SchnorrkelPublicKey(t0) {
      this._keys$_publicKey = t0;
    },
    SchnorrkelPublicKey_hashCode_closure: function SchnorrkelPublicKey_hashCode_closure() {
    },
    SchnorrkelSignature: function SchnorrkelSignature(t0, t1) {
      this._s = t0;
      this._keys$_r = t1;
    },
    MerlinTranscript_MerlinTranscript(label) {
      var s, domain, transcript,
        t1 = type$.int,
        t2 = A.List_List$filled(168, 0, false, t1);
      t1 = J.JSArray_JSArray$growable(0, t1);
      s = A.Strobe$_(t1, 0, false, 2, 0, 168, null, t2, 166);
      domain = A._setArrayType([1, 168, 1, 0, 1, 96], type$.JSArray_int);
      B.JSArray_methods.addAll$1(domain, new A.CodeUnits("STROBEv1.0.2"));
      s._duplex$4(domain, false, false, true);
      s._initialized = true;
      s.operate$5(true, B.StrobeOperation_2, new A.CodeUnits("Merlin v1.0"), 0, false);
      transcript = new A.MerlinTranscript(s);
      transcript.additionalData$2(new A.CodeUnits("dom-sep"), new A.CodeUnits(label));
      return transcript;
    },
    MerlinTranscript: function MerlinTranscript(t0) {
      this.strobe = t0;
    },
    Strobe$_(buffer, curFlags, initialized, io, posBegin, rate, state, storage, strober) {
      var t1 = type$.int;
      return new A.Strobe(rate, strober, initialized, posBegin, io, curFlags, state == null ? A.List_List$filled(200, 0, false, t1) : A.List_List$from(state, false, t1), buffer, storage);
    },
    StrobeOperation: function StrobeOperation(t0) {
      this.value = t0;
    },
    Strobe: function Strobe(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.rate = t0;
      _.strober = t1;
      _._initialized = t2;
      _._posBegin = t3;
      _._io = t4;
      _._curFlags = t5;
      _._strobe$_state = t6;
      _._strobe$_buffer = t7;
      _._st = t8;
    },
    Scrypt__blockCopy(dst, di, src, si, len) {
      var t1, len0, di0, si0, t2;
      for (t1 = src.length; len0 = len - 1, len > 0; len = len0, si = si0, di = di0) {
        di0 = di + 1;
        si0 = si + 1;
        if (!(si >= 0 && si < t1))
          return A.ioore(src, si);
        t2 = src[si];
        if (typeof t2 !== "number")
          return t2.$and();
        B.JSArray_methods.$indexSet(dst, di, t2 >>> 0);
      }
    },
    Scrypt__blockXOR(dst, di, src, si, len) {
      var t1, t2, len0, di0, t3, si0, t4;
      for (t1 = dst.length, t2 = src.length; len0 = len - 1, len > 0; len = len0, si = si0, di = di0) {
        di0 = di + 1;
        if (!(di >= 0 && di < t1))
          return A.ioore(dst, di);
        t3 = dst[di];
        si0 = si + 1;
        if (!(si >= 0 && si < t2))
          return A.ioore(src, si);
        t4 = src[si];
        if (typeof t3 !== "number")
          return t3.$xor();
        B.JSArray_methods.$indexSet(dst, di, (t3 ^ t4) >>> 0);
      }
    },
    Scrypt__blockMix(tmp, $B, bin, bout, r) {
      var t2, i, t3, t4,
        t1 = 2 * r;
      A.Scrypt__blockCopy(tmp, 0, $B, bin + (t1 - 1) * 16, 16);
      for (t2 = r * 16, i = 0; i < t1; i += 2) {
        t3 = bin + i * 16;
        t4 = bout + i * 8;
        A.Scrypt__salsaXOR(tmp, $B, t3, t4);
        A.Scrypt__salsaXOR(tmp, $B, t3 + 16, t4 + t2);
      }
    },
    Scrypt__salsaXOR(tmp, $B, bin, bout) {
      var t3, j0, j1, j2, j3, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15, x15, x14, x13, x12, x11, x10, x9, x8, x7, x6, x5, x4, x3, x2, x1, x0, i, u, bout0,
        t1 = tmp[0],
        bin0 = bin + 1,
        t2 = $B.length;
      if (!(bin >= 0 && bin < t2))
        return A.ioore($B, bin);
      t3 = $B[bin];
      if (typeof t3 !== "number")
        return A.iae(t3);
      j0 = (t1 ^ t3) >>> 0;
      t3 = tmp[1];
      bin = bin0 + 1;
      if (!(bin0 >= 0 && bin0 < t2))
        return A.ioore($B, bin0);
      t1 = $B[bin0];
      if (typeof t1 !== "number")
        return A.iae(t1);
      j1 = (t3 ^ t1) >>> 0;
      t1 = tmp[2];
      bin0 = bin + 1;
      if (!(bin >= 0 && bin < t2))
        return A.ioore($B, bin);
      t3 = $B[bin];
      if (typeof t3 !== "number")
        return A.iae(t3);
      j2 = (t1 ^ t3) >>> 0;
      t3 = tmp[3];
      bin = bin0 + 1;
      if (!(bin0 >= 0 && bin0 < t2))
        return A.ioore($B, bin0);
      t1 = $B[bin0];
      if (typeof t1 !== "number")
        return A.iae(t1);
      j3 = (t3 ^ t1) >>> 0;
      t1 = tmp[4];
      bin0 = bin + 1;
      if (!(bin >= 0 && bin < t2))
        return A.ioore($B, bin);
      t3 = $B[bin];
      if (typeof t3 !== "number")
        return A.iae(t3);
      j4 = (t1 ^ t3) >>> 0;
      t3 = tmp[5];
      bin = bin0 + 1;
      if (!(bin0 >= 0 && bin0 < t2))
        return A.ioore($B, bin0);
      t1 = $B[bin0];
      if (typeof t1 !== "number")
        return A.iae(t1);
      j5 = (t3 ^ t1) >>> 0;
      t1 = tmp[6];
      bin0 = bin + 1;
      if (!(bin >= 0 && bin < t2))
        return A.ioore($B, bin);
      t3 = $B[bin];
      if (typeof t3 !== "number")
        return A.iae(t3);
      j6 = (t1 ^ t3) >>> 0;
      t3 = tmp[7];
      bin = bin0 + 1;
      if (!(bin0 >= 0 && bin0 < t2))
        return A.ioore($B, bin0);
      t1 = $B[bin0];
      if (typeof t1 !== "number")
        return A.iae(t1);
      j7 = (t3 ^ t1) >>> 0;
      t1 = tmp[8];
      bin0 = bin + 1;
      if (!(bin >= 0 && bin < t2))
        return A.ioore($B, bin);
      t3 = $B[bin];
      if (typeof t3 !== "number")
        return A.iae(t3);
      j8 = (t1 ^ t3) >>> 0;
      t3 = tmp[9];
      bin = bin0 + 1;
      if (!(bin0 >= 0 && bin0 < t2))
        return A.ioore($B, bin0);
      t1 = $B[bin0];
      if (typeof t1 !== "number")
        return A.iae(t1);
      j9 = (t3 ^ t1) >>> 0;
      t1 = tmp[10];
      bin0 = bin + 1;
      if (!(bin >= 0 && bin < t2))
        return A.ioore($B, bin);
      t3 = $B[bin];
      if (typeof t3 !== "number")
        return A.iae(t3);
      j10 = (t1 ^ t3) >>> 0;
      t3 = tmp[11];
      bin = bin0 + 1;
      if (!(bin0 >= 0 && bin0 < t2))
        return A.ioore($B, bin0);
      t1 = $B[bin0];
      if (typeof t1 !== "number")
        return A.iae(t1);
      j11 = (t3 ^ t1) >>> 0;
      t1 = tmp[12];
      bin0 = bin + 1;
      if (!(bin >= 0 && bin < t2))
        return A.ioore($B, bin);
      t3 = $B[bin];
      if (typeof t3 !== "number")
        return A.iae(t3);
      j12 = (t1 ^ t3) >>> 0;
      t3 = tmp[13];
      bin = bin0 + 1;
      if (!(bin0 >= 0 && bin0 < t2))
        return A.ioore($B, bin0);
      t1 = $B[bin0];
      if (typeof t1 !== "number")
        return A.iae(t1);
      j13 = (t3 ^ t1) >>> 0;
      t1 = tmp[14];
      bin0 = bin + 1;
      if (!(bin >= 0 && bin < t2))
        return A.ioore($B, bin);
      t3 = $B[bin];
      if (typeof t3 !== "number")
        return A.iae(t3);
      j14 = (t1 ^ t3) >>> 0;
      t3 = tmp[15];
      if (!(bin0 >= 0 && bin0 < t2))
        return A.ioore($B, bin0);
      t2 = $B[bin0];
      if (typeof t2 !== "number")
        return A.iae(t2);
      j15 = (t3 ^ t2) >>> 0;
      for (x15 = j15, x14 = j14, x13 = j13, x12 = j12, x11 = j11, x10 = j10, x9 = j9, x8 = j8, x7 = j7, x6 = j6, x5 = j5, x4 = j4, x3 = j3, x2 = j2, x1 = j1, x0 = j0, i = 0; i < 8; i += 2) {
        u = x0 + x12;
        x4 = (x4 ^ (u << 7 | u >>> 0 >>> 25)) >>> 0;
        u = x4 + x0;
        x8 = (x8 ^ (u << 9 | u >>> 0 >>> 23)) >>> 0;
        u = x8 + x4;
        x12 = (x12 ^ (u << 13 | u >>> 0 >>> 19)) >>> 0;
        u = x12 + x8;
        x0 = (x0 ^ (u << 18 | u >>> 0 >>> 14)) >>> 0;
        u = x5 + x1;
        x9 = (x9 ^ (u << 7 | u >>> 0 >>> 25)) >>> 0;
        u = x9 + x5;
        x13 = (x13 ^ (u << 9 | u >>> 0 >>> 23)) >>> 0;
        u = x13 + x9;
        x1 = (x1 ^ (u << 13 | u >>> 0 >>> 19)) >>> 0;
        u = x1 + x13;
        x5 = (x5 ^ (u << 18 | u >>> 0 >>> 14)) >>> 0;
        u = x10 + x6;
        x14 = (x14 ^ (u << 7 | u >>> 0 >>> 25)) >>> 0;
        u = x14 + x10;
        x2 = (x2 ^ (u << 9 | u >>> 0 >>> 23)) >>> 0;
        u = x2 + x14;
        x6 = (x6 ^ (u << 13 | u >>> 0 >>> 19)) >>> 0;
        u = x6 + x2;
        x10 = (x10 ^ (u << 18 | u >>> 0 >>> 14)) >>> 0;
        u = x15 + x11;
        x3 = (x3 ^ (u << 7 | u >>> 0 >>> 25)) >>> 0;
        u = x3 + x15;
        x7 = (x7 ^ (u << 9 | u >>> 0 >>> 23)) >>> 0;
        u = x7 + x3;
        x11 = (x11 ^ (u << 13 | u >>> 0 >>> 19)) >>> 0;
        u = x11 + x7;
        x15 = (x15 ^ (u << 18 | u >>> 0 >>> 14)) >>> 0;
        u = x0 + x3;
        x1 = (x1 ^ (u << 7 | u >>> 0 >>> 25)) >>> 0;
        u = x1 + x0;
        x2 = (x2 ^ (u << 9 | u >>> 0 >>> 23)) >>> 0;
        u = x2 + x1;
        x3 = (x3 ^ (u << 13 | u >>> 0 >>> 19)) >>> 0;
        u = x3 + x2;
        x0 = (x0 ^ (u << 18 | u >>> 0 >>> 14)) >>> 0;
        u = x5 + x4;
        x6 = (x6 ^ (u << 7 | u >>> 0 >>> 25)) >>> 0;
        u = x6 + x5;
        x7 = (x7 ^ (u << 9 | u >>> 0 >>> 23)) >>> 0;
        u = x7 + x6;
        x4 = (x4 ^ (u << 13 | u >>> 0 >>> 19)) >>> 0;
        u = x4 + x7;
        x5 = (x5 ^ (u << 18 | u >>> 0 >>> 14)) >>> 0;
        u = x10 + x9;
        x11 = (x11 ^ (u << 7 | u >>> 0 >>> 25)) >>> 0;
        u = x11 + x10;
        x8 = (x8 ^ (u << 9 | u >>> 0 >>> 23)) >>> 0;
        u = x8 + x11;
        x9 = (x9 ^ (u << 13 | u >>> 0 >>> 19)) >>> 0;
        u = x9 + x8;
        x10 = (x10 ^ (u << 18 | u >>> 0 >>> 14)) >>> 0;
        u = x15 + x14;
        x12 = (x12 ^ (u << 7 | u >>> 0 >>> 25)) >>> 0;
        u = x12 + x15;
        x13 = (x13 ^ (u << 9 | u >>> 0 >>> 23)) >>> 0;
        u = x13 + x12;
        x14 = (x14 ^ (u << 13 | u >>> 0 >>> 19)) >>> 0;
        u = x14 + x13;
        x15 = (x15 ^ (u << 18 | u >>> 0 >>> 14)) >>> 0;
      }
      bout0 = bout + 1;
      t1 = x0 + j0 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 0, t1);
      B.JSArray_methods.$indexSet($B, bout, t1);
      bout = bout0 + 1;
      t1 = x1 + j1 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 1, t1);
      B.JSArray_methods.$indexSet($B, bout0, t1);
      bout0 = bout + 1;
      t1 = x2 + j2 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 2, t1);
      B.JSArray_methods.$indexSet($B, bout, t1);
      bout = bout0 + 1;
      t1 = x3 + j3 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 3, t1);
      B.JSArray_methods.$indexSet($B, bout0, t1);
      bout0 = bout + 1;
      t1 = x4 + j4 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 4, t1);
      B.JSArray_methods.$indexSet($B, bout, t1);
      bout = bout0 + 1;
      t1 = x5 + j5 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 5, t1);
      B.JSArray_methods.$indexSet($B, bout0, t1);
      bout0 = bout + 1;
      t1 = x6 + j6 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 6, t1);
      B.JSArray_methods.$indexSet($B, bout, t1);
      bout = bout0 + 1;
      t1 = x7 + j7 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 7, t1);
      B.JSArray_methods.$indexSet($B, bout0, t1);
      bout0 = bout + 1;
      t1 = x8 + j8 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 8, t1);
      B.JSArray_methods.$indexSet($B, bout, t1);
      bout = bout0 + 1;
      t1 = x9 + j9 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 9, t1);
      B.JSArray_methods.$indexSet($B, bout0, t1);
      bout0 = bout + 1;
      t1 = x10 + j10 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 10, t1);
      B.JSArray_methods.$indexSet($B, bout, t1);
      bout = bout0 + 1;
      t1 = x11 + j11 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 11, t1);
      B.JSArray_methods.$indexSet($B, bout0, t1);
      bout0 = bout + 1;
      t1 = x12 + j12 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 12, t1);
      B.JSArray_methods.$indexSet($B, bout, t1);
      bout = bout0 + 1;
      t1 = x13 + j13 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 13, t1);
      B.JSArray_methods.$indexSet($B, bout0, t1);
      t1 = x14 + j14 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 14, t1);
      B.JSArray_methods.$indexSet($B, bout, t1);
      t1 = x15 + j15 >>> 0;
      B.JSArray_methods.$indexSet(tmp, 15, t1);
      B.JSArray_methods.$indexSet($B, bout + 1, t1);
    },
    Scrypt__smix($B, r, $N, $V, xy) {
      var i, i0, t1, t2, t3, t4,
        yi = 32 * r,
        tmp = A.List_List$filled(16, 0, false, type$.int);
      for (i = 0; i < yi; ++i)
        B.JSArray_methods.$indexSet($V, i, A.readUint32LE($B, i * 4));
      for (i = 0; i < $N; i = i0) {
        i0 = i + 1;
        A.Scrypt__blockMix(tmp, $V, i * yi, i0 * yi, r);
      }
      t1 = xy.length;
      B.JSArray_methods.setRange$3(xy, 0, t1, B.JSArray_methods.sublist$1($V, 32 * $N * r));
      for (t2 = (2 * r - 1) * 16, t3 = $N - 1, t4 = yi + t2, i = 0; i < $N; i += 2) {
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(xy, t2);
        A.Scrypt__blockXOR(xy, 0, $V, ((xy[t2] & t3) >>> 0) * yi, yi);
        A.Scrypt__blockMix(tmp, xy, 0, yi, r);
        if (!(t4 >= 0 && t4 < t1))
          return A.ioore(xy, t4);
        A.Scrypt__blockXOR(xy, yi, $V, ((xy[t4] & t3) >>> 0) * yi, yi);
        A.Scrypt__blockMix(tmp, xy, yi, 0, r);
      }
      for (i = 0; i < yi; ++i) {
        if (!(i < t1))
          return A.ioore(xy, i);
        A.writeUint32LE(xy[i], $B, i * 4);
      }
      A.zero(tmp);
    },
    Scrypt: function Scrypt(t0, t1, t2) {
      var _ = this;
      _.__Scrypt__v_F = _.__Scrypt__xy_F = $;
      _.__Scrypt_n_F = t0;
      _.__Scrypt_r_F = t1;
      _.__Scrypt_p_F = t2;
    },
    Scrypt_derive_closure: function Scrypt_derive_closure(t0) {
      this.password = t0;
    },
    Scrypt_derive__closure0: function Scrypt_derive__closure0() {
    },
    Scrypt_derive_closure0: function Scrypt_derive_closure0(t0) {
      this.password = t0;
    },
    Scrypt_derive__closure: function Scrypt_derive__closure() {
    },
    QuickCrypto_pbkdf2DeriveKey(dklen, iterations, password, salt) {
      var hashing = new A.QuickCrypto_pbkdf2DeriveKey_closure(),
        t1 = dklen == null ? hashing.call$0().get$getDigestLength() : dklen;
      return A.PBKDF2_deriveKey(iterations, t1, new A.QuickCrypto_pbkdf2DeriveKey_closure0(hashing, password), salt);
    },
    QuickCrypto_blake2b256Hash(data) {
      var digest,
        h = A.BLAKE2b$(new A.Blake2bConfig(null, null), 32);
      h.update$1(data);
      digest = h.digest$0();
      h.clean$0();
      return digest;
    },
    QuickCrypto_hmacsha256Hash(key, data) {
      var t1,
        hm = A.HMAC$(new A.QuickCrypto_hmacsha256Hash_closure(), key);
      type$.List_int._as(data);
      t1 = hm.__HMAC__inner_A;
      t1 === $ && A.throwLateFieldNI("_inner");
      t1.update$1(data);
      return hm.digest$0();
    },
    QuickCrypto_hmacSha512Hash(key, data) {
      var t1,
        hm = A.HMAC$(new A.QuickCrypto_hmacSha512Hash_closure(), key);
      type$.List_int._as(data);
      t1 = hm.__HMAC__inner_A;
      t1 === $ && A.throwLateFieldNI("_inner");
      t1.update$1(data);
      return hm.digest$0();
    },
    QuickCrypto_hmacSha512HashHalves(key, data) {
      var bytes = A.QuickCrypto_hmacSha512Hash(key, data);
      return new A.Tuple(B.JSArray_methods.sublist$2(bytes, 0, 32), B.JSArray_methods.sublist$1(bytes, 32), type$.Tuple_of_List_int_and_List_int);
    },
    QuickCrypto_processCtr(data, iv, key) {
      var t1, t2,
        ctr = A.CTR$(A.AES$(key), iv),
        xor = A.List_List$filled(J.get$length$asx(data), 0, false, type$.int);
      ctr.streamXOR$2(data, xor);
      t1 = ctr.__CTR__buffer_F;
      t1 === $ && A.throwLateFieldNI("_buffer");
      A.zero(t1);
      t2 = ctr.__CTR__counter_F;
      t2 === $ && A.throwLateFieldNI("_counter");
      A.zero(t2);
      ctr._bufpos = t1.length;
      ctr._cipher = null;
      return xor;
    },
    QuickCrypto_pbkdf2DeriveKey_closure: function QuickCrypto_pbkdf2DeriveKey_closure() {
    },
    QuickCrypto_pbkdf2DeriveKey_closure0: function QuickCrypto_pbkdf2DeriveKey_closure0(t0, t1) {
      this.hashing = t0;
      this.password = t1;
    },
    QuickCrypto_hmacsha256Hash_closure: function QuickCrypto_hmacsha256Hash_closure() {
    },
    QuickCrypto_hmacSha512Hash_closure: function QuickCrypto_hmacSha512Hash_closure() {
    },
    QuickCrypto__generateRandom_closure: function QuickCrypto__generateRandom_closure() {
    },
    ArgumentException$(message, details) {
      return new A.ArgumentException(message, details);
    },
    MessageException$(message, details) {
      return new A.MessageException(message, details);
    },
    BlockchainUtilsException: function BlockchainUtilsException() {
    },
    BlockchainUtilsException_toString_closure: function BlockchainUtilsException_toString_closure() {
    },
    BlockchainUtilsException_toString_closure0: function BlockchainUtilsException_toString_closure0() {
    },
    ArgumentException: function ArgumentException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    MessageException: function MessageException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    GenericException: function GenericException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    RPCError$(details, errorCode, message, request) {
      return new A.RPCError(errorCode, message, details);
    },
    RPCError: function RPCError(t0, t1, t2) {
      this.errorCode = t0;
      this.message = t1;
      this.details = t2;
    },
    RPCError_toString_closure: function RPCError_toString_closure() {
    },
    RPCError_toString_closure0: function RPCError_toString_closure0() {
    },
    _Hex: function _Hex() {
    },
    LayoutByteReader: function LayoutByteReader(t0) {
      this._bytes = t0;
    },
    LayoutByteWriter: function LayoutByteWriter(t0, t1) {
      this.growable = t0;
      this._byte_handler$_buffer = t1;
    },
    LayoutConst_optional(layout, property) {
      return A.OptionalLayout_OptionalLayout(layout, null, false, property, type$.dynamic);
    },
    LayoutConst_vecU8(lengthSizeLayout, property) {
      var t1 = lengthSizeLayout.span,
        $length = new A.PaddingLayout(lengthSizeLayout, t1, "length", type$.PaddingLayout_int),
        layout = A.StructLayout_StructLayout(A._setArrayType([$length, A.RawBytesLayout_RawBytesLayout(A.OffsetLayout$($length, -t1, null), "data")], type$.JSArray_Layout_dynamic), false, null);
      return new A.CustomLayout(layout, new A.LayoutConst_vecU8_closure(), new A.LayoutConst_vecU8_closure0(), layout.span, property, type$.CustomLayout_dynamic_dynamic);
    },
    LayoutConst_lazyEnum(variants, property) {
      var t2, unionLayout, _null = null,
        t1 = A.IntegerLayout$(1, B.C_Endian0, _null, false);
      t1 = A.OffsetLayout$(new A.PaddingLayout(t1, t1.span, _null, type$.PaddingLayout_int), 0, _null);
      t2 = t1.property;
      unionLayout = new A.LazyUnion(new A.UnionLayoutDiscriminatorLayout(t1, 0, t2 == null ? "variant" : t2), A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.LazyVariantLayout), -1, _null);
      new A.ListMapView(variants, A._arrayInstanceType(variants)._eval$1("ListMapView<1>")).forEach$1(0, new A.LayoutConst_lazyEnum_closure(unionLayout));
      return new A.CustomLayout(unionLayout, new A.LayoutConst_lazyEnum_closure0(), new A.LayoutConst_lazyEnum_closure1(true), -1, property, type$.CustomLayout_of_Map_String_dynamic_and_Map_String_dynamic);
    },
    LayoutConst_vec(elementLayout, property) {
      var lengthSizeLayout = A.IntegerLayout$(4, B.C_Endian0, "length", false),
        t1 = lengthSizeLayout.span,
        $length = new A.PaddingLayout(lengthSizeLayout, t1, "length", type$.PaddingLayout_int),
        layout = A.StructLayout_StructLayout(A._setArrayType([$length, A.SequenceLayout_SequenceLayout(A.OffsetLayout$($length, -t1, null), elementLayout, "values", type$.dynamic)], type$.JSArray_Layout_dynamic), false, null);
      return new A.CustomLayout(layout, new A.LayoutConst_vec_closure(), new A.LayoutConst_vec_closure0(), layout.span, property, type$.CustomLayout_of_Map_String_dynamic_and_dynamic);
    },
    LayoutConst_vecU8_closure: function LayoutConst_vecU8_closure() {
    },
    LayoutConst_vecU8_closure0: function LayoutConst_vecU8_closure0() {
    },
    LayoutConst_lazyEnum_closure: function LayoutConst_lazyEnum_closure(t0) {
      this.unionLayout = t0;
    },
    LayoutConst_lazyEnum_closure1: function LayoutConst_lazyEnum_closure1(t0) {
      this.useKeyAndValue = t0;
    },
    LayoutConst_lazyEnum_closure0: function LayoutConst_lazyEnum_closure0() {
    },
    LayoutConst_vec_closure: function LayoutConst_vec_closure() {
    },
    LayoutConst_vec_closure0: function LayoutConst_vec_closure0() {
    },
    LayoutAction: function LayoutAction(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    BaseLazyLayout: function BaseLazyLayout() {
    },
    LazyLayout: function LazyLayout(t0, t1, t2) {
      this._layout = t0;
      this.property = t1;
      this.$ti = t2;
    },
    ConditionalLazyLayout: function ConditionalLazyLayout(t0, t1, t2) {
      this._layout = t0;
      this.property = t1;
      this.$ti = t2;
    },
    Layout: function Layout() {
    },
    LayoutDecodeResult: function LayoutDecodeResult(t0, t1, t2) {
      this.consumed = t0;
      this.value = t1;
      this.$ti = t2;
    },
    SequenceLayout_SequenceLayout(count, elementLayout, property, $T) {
      var t2, t3, span,
        t1 = count instanceof A.ExternalLayout;
      if (t1)
        count.isCount$0();
      t2 = !t1;
      if (t2)
        if (count instanceof A.ConstantLayout)
          t3 = count.value >= 0;
        else
          t3 = false;
      else
        t3 = true;
      if (!t3)
        throw A.wrapException(A.LayoutException$("count must be non-negative integer or an unsigned integer ExternalLayout", A.LinkedHashMap_LinkedHashMap$_literal(["property", property, "count", count], type$.String, type$.dynamic)));
      if (t1)
        count.isCount$0();
      if (t2)
        t1 = count instanceof A.ConstantLayout && count.value >= 0;
      else
        t1 = true;
      if (t1)
        span = t2 && elementLayout.span >= 0 ? type$.ConstantLayout_dynamic._as(count).value * elementLayout.span : -1;
      else
        span = -1;
      return new A.SequenceLayout(elementLayout, count, span, property, $T._eval$1("SequenceLayout<0>"));
    },
    SequenceLayout: function SequenceLayout(t0, t1, t2, t3, t4) {
      var _ = this;
      _.elementLayout = t0;
      _.count = t1;
      _.span = t2;
      _.property = t3;
      _.$ti = t4;
    },
    SequenceLayout_encode_closure: function SequenceLayout_encode_closure(t0, t1, t2) {
      this.$this = t0;
      this.writer = t1;
      this.offset = t2;
    },
    ConstantLayout: function ConstantLayout(t0, t1, t2, t3) {
      var _ = this;
      _.value = t0;
      _.span = t1;
      _.property = t2;
      _.$ti = t3;
    },
    CustomLayout: function CustomLayout(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.layout = t0;
      _.encoder = t1;
      _.decoder = t2;
      _.span = t3;
      _.property = t4;
      _.$ti = t5;
    },
    LazyStructLayout_LazyStructLayout(fields, decodePrefixes, property) {
      var t1, _i;
      for (t1 = fields.length, _i = 0; _i < fields.length; fields.length === t1 || (0, A.throwConcurrentModificationError)(fields), ++_i)
        fields[_i].get$property();
      return new A.LazyStructLayout(A.List_List$unmodifiable(fields, type$.BaseLazyLayout_dynamic), false, -1, property);
    },
    LazyStructLayout: function LazyStructLayout(t0, t1, t2, t3) {
      var _ = this;
      _.fields = t0;
      _.decodePrefixes = t1;
      _.span = t2;
      _.property = t3;
    },
    LazyStructLayout_getSpan_closure: function LazyStructLayout_getSpan_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.source = t1;
      this.bytes = t2;
    },
    LazyVariantModel: function LazyVariantModel(t0, t1, t2, t3) {
      var _ = this;
      _.layout = t0;
      _.property = t1;
      _.index = t2;
      _.$ti = t3;
    },
    LazyUnion: function LazyUnion(t0, t1, t2, t3) {
      var _ = this;
      _.discriminator = t0;
      _._registry = t1;
      _.span = t2;
      _.property = t3;
    },
    LazyUnion_defaultGetSourceVariant_closure: function LazyUnion_defaultGetSourceVariant_closure() {
    },
    LazyVariantLayout: function LazyVariantLayout(t0, t1, t2, t3) {
      var _ = this;
      _.union = t0;
      _.layout = t1;
      _.span = t2;
      _.property = t3;
    },
    MapEntryLayout: function MapEntryLayout(t0, t1, t2, t3) {
      var _ = this;
      _.keyLayout = t0;
      _.valueLayout = t1;
      _.span = t2;
      _.property = t3;
    },
    IntegerLayout$(span, order, property, sign) {
      var t1 = new A.IntegerLayout(false, order, span, property);
      if (6 < span)
        A.throwExpression(A.LayoutException$("span must not exceed 6 bytes", A.LinkedHashMap_LinkedHashMap$_literal(["property", property, "layout", A.getRuntimeTypeOfDartObject(t1).toString$0(0), "sign", false, "span", span], type$.String, type$.dynamic)));
      return t1;
    },
    OffsetLayout$(layout, offset, property) {
      return new A.OffsetLayout(layout, offset, layout.span, layout.property);
    },
    ExternalLayout: function ExternalLayout() {
    },
    ExternalOffsetLayout: function ExternalOffsetLayout() {
    },
    BaseIntiger: function BaseIntiger() {
    },
    IntegerLayout: function IntegerLayout(t0, t1, t2, t3) {
      var _ = this;
      _.sign = t0;
      _.order = t1;
      _.span = t2;
      _.property = t3;
    },
    BigIntLayout: function BigIntLayout(t0, t1) {
      this.span = t0;
      this.property = t1;
    },
    UnionDiscriminatorLayout: function UnionDiscriminatorLayout() {
    },
    UnionLayoutDiscriminatorLayout: function UnionLayoutDiscriminatorLayout(t0, t1, t2) {
      this.layout = t0;
      this.span = t1;
      this.property = t2;
    },
    OffsetLayout: function OffsetLayout(t0, t1, t2, t3) {
      var _ = this;
      _.layout = t0;
      _.offset = t1;
      _.span = t2;
      _.property = t3;
    },
    OptionalLayout_OptionalLayout(layout, discriminator, keepLayoutSize, property, $T) {
      var size, t1, result;
      discriminator = A.IntegerLayout$(1, B.C_Endian0, null, false);
      size = A._InitializedCell$named("size", new A.OptionalLayout_OptionalLayout_closure(false, layout, discriminator));
      t1 = size._value;
      if (t1 === size) {
        result = size._initializer.call$0();
        if (size._value !== size)
          A.throwExpression(new A.LateError("Local '" + size._name + string$.x27_has_));
        size._value = result;
        t1 = result;
      }
      return new A.OptionalLayout(layout, discriminator, t1, -1, property, $T._eval$1("OptionalLayout<0>"));
    },
    OptionalLayout__validateOption(property, value) {
      if (value !== 0 && value !== 1)
        throw A.wrapException(A.LayoutException$("Invalid option bytes.", A.LinkedHashMap_LinkedHashMap$_literal(["property", property, "value", value], type$.String, type$.dynamic)));
    },
    OptionalLayout: function OptionalLayout(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.layout = t0;
      _.discriminator = t1;
      _.size = t2;
      _.span = t3;
      _.property = t4;
      _.$ti = t5;
    },
    OptionalLayout_OptionalLayout_closure: function OptionalLayout_OptionalLayout_closure(t0, t1, t2) {
      this.keepLayoutSize = t0;
      this.layout = t1;
      this.disc = t2;
    },
    PaddingLayout: function PaddingLayout(t0, t1, t2, t3) {
      var _ = this;
      _.layout = t0;
      _.span = t1;
      _.property = t2;
      _.$ti = t3;
    },
    RawBytesLayout_RawBytesLayout($length, property) {
      if (A._isInt($length)) {
        if (B.JSInt_methods.get$isNegative($length))
          throw A.wrapException(A.LayoutException$("The length must be a positive integer.", A.LinkedHashMap_LinkedHashMap$_literal(["property", property, "length", $length], type$.String, type$.dynamic)));
      } else if (!($length instanceof A.ExternalLayout))
        throw A.wrapException(A.LayoutException$("The length can be a positive integer or an unsigned integer ExternalLayout", A.LinkedHashMap_LinkedHashMap$_literal(["property", property, "length", $length], type$.String, type$.dynamic)));
      return new A.RawBytesLayout($length, A._asInt($length instanceof A.ExternalLayout ? -1 : $length), property);
    },
    RawBytesLayout: function RawBytesLayout(t0, t1, t2) {
      this.length = t0;
      this.span = t1;
      this.property = t2;
    },
    StructLayout_StructLayout(fields, decodePrefixes, property) {
      var span, t1, _i, exception;
      for (t1 = fields.length, _i = 0; _i < t1; ++_i)
        if (fields[_i].property == null) {
          t1 = type$.String;
          throw A.wrapException(A.LayoutException$("fields cannot contain unnamed layout", A.LinkedHashMap_LinkedHashMap$_literal(["property", property, "fields", B.JSArray_methods.map$1$1(fields, new A.StructLayout_StructLayout_closure(), t1).join$1(0, ", ")], t1, type$.dynamic)));
        }
      span = 0;
      try {
        span = B.JSArray_methods.fold$1$2(fields, 0, new A.StructLayout_StructLayout_closure0(), type$.int);
      } catch (exception) {
        span = -1;
      }
      t1 = span;
      return new A.StructLayout(A.List_List$unmodifiable(fields, type$.Layout_dynamic), false, t1, property);
    },
    StructLayout: function StructLayout(t0, t1, t2, t3) {
      var _ = this;
      _.fields = t0;
      _.decodePrefixes = t1;
      _.span = t2;
      _.property = t3;
    },
    StructLayout_StructLayout_closure: function StructLayout_StructLayout_closure() {
    },
    StructLayout_StructLayout_closure0: function StructLayout_StructLayout_closure0() {
    },
    StructLayout_getSpan_closure: function StructLayout_getSpan_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.bytes = t1;
      this.source = t2;
    },
    LayoutException$(message, details) {
      return new A.LayoutException(message, details);
    },
    LayoutException: function LayoutException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    Web3SecretStorageDefinationV3Exception$(message, details) {
      return new A.Web3SecretStorageDefinationV3Exception(message, details);
    },
    Web3SecretStorageDefinationV3Exception: function Web3SecretStorageDefinationV3Exception(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    KDFParam_KDFParam$fromCbor(cbor) {
      var t1, t2, c, dklen, prf, n, r;
      if (!(cbor instanceof A.CborTagValue) || !(cbor._cbor_tag$_value instanceof A.CborListValue))
        throw A.wrapException(B.Web3SecretStorageDefinationV3Exception_axY);
      t1 = cbor.tags;
      if (A.BytesUtils_bytesEqual(t1, B.List_181)) {
        t1 = type$.CborListValue_dynamic._as(cbor._cbor_tag$_value).value;
        t2 = J.getInterceptor$asx(t1);
        c = A._asInt(t2.$index(t1, 0).get$value());
        dklen = A._asInt(t2.$index(t1, 1).get$value());
        prf = A._asString(t2.$index(t1, 2).get$value());
        if (prf !== "hmac-sha256")
          A.throwExpression(A.Web3SecretStorageDefinationV3Exception$("Invalid prf.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", "hmac-sha256", "prf", prf], type$.String, type$.dynamic)));
        return A.KDF2_KDF2(dklen, c, type$.List_int._as(t2.$index(t1, 3).get$value()));
      } else if (A.BytesUtils_bytesEqual(t1, B.List_180)) {
        t1 = type$.CborListValue_dynamic._as(cbor._cbor_tag$_value).value;
        t2 = J.getInterceptor$asx(t1);
        dklen = A._asInt(t2.$index(t1, 0).get$value());
        n = A._asInt(t2.$index(t1, 1).get$value());
        r = A._asInt(t2.$index(t1, 2).get$value());
        return A.KDFScrypt_KDFScrypt(dklen, n, A._asInt(t2.$index(t1, 3).get$value()), r, type$.List_int._as(t2.$index(t1, 4).get$value()));
      } else
        throw A.wrapException(B.Web3SecretStorageDefinationV3Exception_axY);
    },
    KDFParam_KDFParam$fromJson(json) {
      var t1, t2, t3,
        kdf = json.$index(0, "kdf"),
        params = json.$index(0, "kdfparams");
      switch (kdf) {
        case "scrypt":
          type$.Map_String_dynamic._as(params);
          t1 = A._asInt(params.$index(0, "dklen"));
          t2 = A._asInt(params.$index(0, "n"));
          t3 = A._asInt(params.$index(0, "r"));
          return A.KDFScrypt_KDFScrypt(t1, t2, A._asInt(params.$index(0, "p")), t3, A.BytesUtils_fromHexString(A._asString(params.$index(0, "salt"))));
        case "pbkdf2":
          type$.Map_String_dynamic._as(params);
          if (!J.$eq$(params.$index(0, "prf"), "hmac-sha256"))
            A.throwExpression(A.Web3SecretStorageDefinationV3Exception$("Invalid prf.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", "hmac-sha256", "prf", params.$index(0, "prf")], type$.String, type$.dynamic)));
          t1 = A._asInt(params.$index(0, "c"));
          t2 = A.BytesUtils_fromHexString(A._asString(params.$index(0, "salt")));
          return A.KDF2_KDF2(A._asInt(params.$index(0, "dklen")), t1, t2);
        default:
          throw A.wrapException(A.Web3SecretStorageDefinationV3Exception$("Invalid kdf.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", B.JSArray_methods.join$1(A._setArrayType(["scrypt", "pbkdf2"], type$.JSArray_String), ", "), "kdf", kdf], type$.String, type$.dynamic)));
      }
    },
    KDF2_KDF2(dklen, iterations, salt) {
      var t1 = J.getInterceptor$asx(salt);
      if (t1.get$length(salt) !== 32)
        throw A.wrapException(A.Web3SecretStorageDefinationV3Exception$("Invalid salt length.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", 32, "length", t1.get$length(salt)], type$.String, type$.dynamic)));
      return new A.KDF2(iterations, A.BytesUtils_toBytes(salt, true), dklen);
    },
    KDFScrypt_KDFScrypt(dklen, n, p, r, salt) {
      var t1 = J.getInterceptor$asx(salt);
      if (t1.get$length(salt) !== 32)
        throw A.wrapException(A.Web3SecretStorageDefinationV3Exception$("Invalid salt length.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", 32, "length", t1.get$length(salt)], type$.String, type$.dynamic)));
      return new A.KDFScrypt(dklen, n, r, p, A.BytesUtils_toBytes(salt, true));
    },
    CryptoParam_CryptoParam(iv, kdf) {
      var t1 = J.getInterceptor$asx(iv);
      if (t1.get$length(iv) !== 16)
        throw A.wrapException(A.Web3SecretStorageDefinationV3Exception$("Invalid iv length.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", 16, "length", t1.get$length(iv)], type$.String, type$.dynamic)));
      return new A.CryptoParam(kdf, iv);
    },
    CryptoParam__mac(dk, ciphertext) {
      var t1 = type$.int,
        t2 = A.List_List$of(dk, true, t1);
      B.JSArray_methods.addAll$1(t2, ciphertext);
      return A.BytesUtils_toHexString(A.Keccack_hash(A.List_List$from(t2, true, t1), 32), true, null);
    },
    Web3SecretStorageDefinationV3_Web3SecretStorageDefinationV3$encode(data, password) {
      var passwordBytes = A.StringUtils_encode(password, B.StringEncoding_1),
        derivator = A.KDFScrypt_KDFScrypt(32, 8192, 1, 8, $.$get$QuickCrypto__generateRandom().call$1(32)),
        uuid = A.UUID_generateUUIDv4(),
        $crypto = A.CryptoParam_CryptoParam($.$get$QuickCrypto__generateRandom().call$1(16), derivator),
        t1 = A.BytesUtils_toBytes(passwordBytes, true);
      return new A.Web3SecretStorageDefinationV3(A.BytesUtils_toBytes(data, true), t1, uuid, $crypto);
    },
    Web3SecretStorageDefinationV3__toJsonEcoded(encoded, encoding) {
      var t1, exception;
      try {
        if (encoding === B.SecretWalletEncoding_1) {
          t1 = A.StringUtils_toJson(encoded, null, type$.Map_String_dynamic);
          return t1;
        }
        t1 = A.StringUtils_toJson(A.StringUtils_decode(A.StringUtils_encode(encoded, B.StringEncoding_2), false, B.StringEncoding_1), null, type$.Map_String_dynamic);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.Web3SecretStorageDefinationV3Exception_b1T);
      }
    },
    Web3SecretStorageDefinationV3_Web3SecretStorageDefinationV3$decode(encoded, password, encoding) {
      var json, $crypto, t1, derivator, t2, encodedPassword, derivedKey, aesKey, macBytes, encryptedPrivateKey, iv, data, t3,
        _s12_ = "cipherparams";
      if (encoding === B.SecretWalletEncoding_2)
        return A.Web3SecretStorageDefinationV3__decodeCbor(encoded, password);
      json = A.Web3SecretStorageDefinationV3__toJsonEcoded(encoded, encoding);
      if (!J.$eq$(json.$index(0, "version"), 3))
        throw A.wrapException(B.Web3SecretStorageDefinationV3Exception_MIP);
      $crypto = json.$index(0, "crypto");
      if ($crypto == null)
        $crypto = json.$index(0, "Crypto");
      t1 = type$.Map_String_dynamic;
      t1._as($crypto);
      derivator = A.KDFParam_KDFParam$fromJson($crypto);
      t2 = type$.int;
      encodedPassword = A.List_List$from(A.StringUtils_encode(password, B.StringEncoding_1), true, t2);
      derivedKey = derivator.deriveKey$1(encodedPassword);
      aesKey = A.List_List$from(B.JSArray_methods.sublist$2(derivedKey, 0, 16), true, t2);
      macBytes = B.JSArray_methods.sublist$2(derivedKey, 16, 32);
      encryptedPrivateKey = A.BytesUtils_fromHexString(A._asString($crypto.$index(0, "ciphertext")));
      if (A.CryptoParam__mac(macBytes, encryptedPrivateKey) !== $crypto.$index(0, "mac"))
        throw A.wrapException(B.Web3SecretStorageDefinationV3Exception_0wg);
      if (!J.$eq$($crypto.$index(0, "cipher"), "aes-128-ctr"))
        throw A.wrapException(A.Web3SecretStorageDefinationV3Exception$("Invalid Cypher.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", "aes-128-ctr", "cipher", $crypto.$index(0, "cipher")], type$.String, type$.dynamic)));
      iv = A.BytesUtils_fromHexString(A._asString(J.$index$asx($crypto.$index(0, _s12_), "iv")));
      data = A.QuickCrypto_processCtr(A.List_List$from(encryptedPrivateKey, true, t2), iv, aesKey);
      t2 = json.$index(0, "crypto");
      t1 = t1._as(t2 == null ? json.$index(0, "Crypto") : t2);
      t2 = A.KDFParam_KDFParam$fromJson(t1);
      t2 = A.CryptoParam_CryptoParam(A.BytesUtils_fromHexString(A._asString(J.$index$asx(t1.$index(0, _s12_), "iv"))), t2);
      t1 = A._asString(json.$index(0, "id"));
      t3 = A.BytesUtils_toBytes(encodedPassword, true);
      return new A.Web3SecretStorageDefinationV3(A.BytesUtils_toBytes(data, true), t3, t1, t2);
    },
    Web3SecretStorageDefinationV3__decodeCbor(encoded, password) {
      var cborTag, cbor, version, uuid, uuidObj, params, cipher, iv, kdf, ciphertext, mac, encodedPassword, derivedKey, macBytes, aesKey, derivedMac, data, t1, t2, t3, t4, exception;
      try {
        cborTag = A.CborUtils__decode(A.BytesUtils_fromHexString(encoded), 0).value;
        if (!(cborTag instanceof A.CborTagValue) || !(cborTag._cbor_tag$_value instanceof A.CborListValue) || !J.$eq$(J.get$length$asx(cborTag._cbor_tag$_value.get$value()), 3))
          throw A.wrapException(B.Web3SecretStorageDefinationV3Exception_KLw);
        if (!A.BytesUtils_bytesEqual(cborTag.tags, B.List_200))
          throw A.wrapException(B.Web3SecretStorageDefinationV3Exception_c0h);
        t1 = type$.CborListValue_dynamic;
        cbor = t1._as(cborTag._cbor_tag$_value);
        version = A._asInt(J.$index$asx(cbor.value, 2).get$value());
        if (!J.$eq$(version, 3))
          throw A.wrapException(B.Web3SecretStorageDefinationV3Exception_MIP);
        uuid = null;
        uuidObj = J.$index$asx(cbor.value, 1);
        if (uuidObj instanceof A.CborStringValue)
          uuid = uuidObj.value;
        else
          uuid = A.UUID_fromBuffer(type$.List_int._as(uuidObj.get$value()));
        params = t1._as(J.$index$asx(cbor.value, 0));
        cipher = A._asString(J.$index$asx(params.value, 0).get$value());
        if (!J.$eq$(cipher, "aes-128-ctr")) {
          t1 = A.Web3SecretStorageDefinationV3Exception$("Invalid cypher type.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", "aes-128-ctr", "cypher", cipher], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
        t1 = type$.List_int;
        iv = t1._as(J.$index$asx(params.value, 1).get$value());
        kdf = A.KDFParam_KDFParam$fromCbor(type$.CborObject._as(J.$index$asx(params.value, 3)));
        ciphertext = t1._as(J.$index$asx(params.value, 2).get$value());
        mac = A._asString(J.$index$asx(params.value, 4).get$value());
        t1 = type$.int;
        encodedPassword = A.List_List$from(A.StringUtils_encode(password, B.StringEncoding_1), true, t1);
        derivedKey = kdf.deriveKey$1(encodedPassword);
        macBytes = A.List_List$unmodifiable(J.sublist$2$ax(derivedKey, 16, 32), t1);
        aesKey = A.List_List$from(J.sublist$2$ax(derivedKey, 0, 16), true, t1);
        derivedMac = A.CryptoParam__mac(macBytes, ciphertext);
        if (!J.$eq$(derivedMac, mac))
          throw A.wrapException(B.Web3SecretStorageDefinationV3Exception_anX);
        data = A.QuickCrypto_processCtr(ciphertext, iv, aesKey);
        t1 = A.CryptoParam_CryptoParam(iv, kdf);
        t2 = uuid;
        t3 = A.BytesUtils_toBytes(encodedPassword, true);
        t4 = A.BytesUtils_toBytes(data, true);
        return new A.Web3SecretStorageDefinationV3(t4, t3, t2, t1);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3SecretStorageDefinationV3Exception)
          throw exception;
        else
          throw A.wrapException(B.Web3SecretStorageDefinationV3Exception_axY);
      }
    },
    KDFMode: function KDFMode(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    SecretWalletEncoding: function SecretWalletEncoding(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    KDFParam: function KDFParam() {
    },
    KDF2: function KDF2(t0, t1, t2) {
      this.iterations = t0;
      this.salt = t1;
      this.dklen = t2;
    },
    KDF2_deriveKey_closure: function KDF2_deriveKey_closure(t0) {
      this.password = t0;
    },
    KDF2_deriveKey__closure: function KDF2_deriveKey__closure() {
    },
    KDFScrypt: function KDFScrypt(t0, t1, t2, t3, t4) {
      var _ = this;
      _.dklen = t0;
      _.n = t1;
      _.r = t2;
      _.p = t3;
      _.salt = t4;
    },
    CryptoParam: function CryptoParam(t0, t1) {
      this.kdf = t0;
      this.iv = t1;
    },
    Web3SecretStorageDefinationV3: function Web3SecretStorageDefinationV3(t0, t1, t2, t3) {
      var _ = this;
      _.data = t0;
      _._password = t1;
      _.uuid = t2;
      _._crypto = t3;
    },
    ServiceProviderUtils_parseResponse(object, params, $T) {
      var e, t1, t2, exception;
      try {
        if ($T._is(object))
          return object;
        if (object == null && $T._is(null)) {
          $T._as(null);
          return null;
        }
        if ($T._is(B.Type_dynamic_PLF)) {
          $T._as(object);
          return object;
        }
        t1 = type$.String;
        t2 = type$.dynamic;
        if ($T._is(A.LinkedHashMap_LinkedHashMap$_empty(t1, t2))) {
          if (type$.Map_dynamic_dynamic._is(object)) {
            t1 = $T._as(object.cast$2$0(0, t1, t2));
            return t1;
          }
          if (typeof object == "string") {
            t1 = $T._as(A.StringUtils_toJson(object, null, type$.Map_String_dynamic));
            return t1;
          }
        }
        if ($T._is(A._setArrayType([], type$.JSArray_Map_String_dynamic))) {
          if (typeof object == "string") {
            t1 = J.map$1$1$ax(A.StringUtils_toJson(object, null, type$.List_dynamic), new A.ServiceProviderUtils_parseResponse_closure(), type$.Map_String_dynamic);
            t1 = $T._as(A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")));
            return t1;
          }
          t1 = J.map$1$1$ax(type$.List_dynamic._as(object), new A.ServiceProviderUtils_parseResponse_closure0(), type$.Map_String_dynamic);
          t1 = $T._as(A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")));
          return t1;
        }
        if ($T._is(A._setArrayType([], type$.JSArray_int))) {
          if (type$.List_int._is(object)) {
            t1 = $T._as(A.StringUtils_encode(A._asString(object), B.StringEncoding_1));
            return t1;
          }
          t1 = $T._as(type$.List_dynamic._as(B.Type_Object_QJv).cast$1$0(0, type$.int));
          return t1;
        }
        $T._as(object);
        return object;
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = params.toJson$0();
        t1 = A.RPCError$(A.LinkedHashMap_LinkedHashMap$_literal(["error", J.toString$0$(e)], type$.String, type$.dynamic), null, "Parsing response failed.", t1);
        throw A.wrapException(t1);
      }
    },
    RequestServiceType: function RequestServiceType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    ServiceResponseType: function ServiceResponseType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    ServiceProviderUtils_parseResponse_closure: function ServiceProviderUtils_parseResponse_closure() {
    },
    ServiceProviderUtils_parseResponse_closure0: function ServiceProviderUtils_parseResponse_closure0() {
    },
    BaseServiceResponse: function BaseServiceResponse() {
    },
    ServiceSuccessRespose: function ServiceSuccessRespose(t0, t1, t2, t3) {
      var _ = this;
      _.response = t0;
      _.statusCode = t1;
      _.type = t2;
      _.$ti = t3;
    },
    ServiceErrorResponse: function ServiceErrorResponse(t0, t1, t2, t3) {
      var _ = this;
      _.error = t0;
      _.statusCode = t1;
      _.type = t2;
      _.$ti = t3;
    },
    BaseServiceRequestParams: function BaseServiceRequestParams() {
    },
    BaseServiceRequest: function BaseServiceRequest() {
    },
    BaseProvider: function BaseProvider() {
    },
    BitcoinSigner: function BitcoinSigner(t0) {
      this.signingKey = t0;
    },
    BitcoinSigner_signBcHTransaction_closure: function BitcoinSigner_signBcHTransaction_closure() {
    },
    BitcoinVerifier: function BitcoinVerifier(t0) {
      this.verifyKey = t0;
    },
    CardanoSigner_CardanoSigner$fromKeyBytes(keyBytes) {
      var t1 = keyBytes.length,
        t2 = t1 === 64;
      if (!t2 && t1 !== 32)
        throw A.wrapException(A.MessageException$("Invalid key bytes length.", A.LinkedHashMap_LinkedHashMap$_literal(["length", t1, "Excepted", "64 or 32"], type$.String, type$.dynamic)));
      return new A.CardanoSigner(t2 ? A.EDDSAPrivateKey_EDDSAPrivateKey$fromKhalow($.$get$CardanoSignerConst_ed25519Generator(), keyBytes) : A.EDDSAPrivateKey_EDDSAPrivateKey($.$get$CardanoSignerConst_ed25519Generator(), keyBytes, new A.CardanoSigner_CardanoSigner$fromKeyBytes_closure()));
    },
    CardanoSigner: function CardanoSigner(t0) {
      this._signingKey = t0;
    },
    CardanoSigner_CardanoSigner$fromKeyBytes_closure: function CardanoSigner_CardanoSigner$fromKeyBytes_closure() {
    },
    CardanoSigner__signEdward_closure: function CardanoSigner__signEdward_closure() {
    },
    CardanoVerifier: function CardanoVerifier(t0) {
      this._eddsaPublicKey = t0;
    },
    CardanoVerifier__verifyEddsa_closure: function CardanoVerifier__verifyEddsa_closure() {
    },
    CosmosETHSecp256k1Signer: function CosmosETHSecp256k1Signer(t0) {
      this._cosmos_eth_sec256k1_signer$_signer = t0;
    },
    CosmosSecp256k1Signer: function CosmosSecp256k1Signer(t0) {
      this._cosmos_secp256k1_signer$_ecdsaSigningKey = t0;
    },
    CosmosSecp256k1Signer__signEcdsa_closure: function CosmosSecp256k1Signer__signEcdsa_closure() {
    },
    CosmosVerifier: function CosmosVerifier(t0) {
      this.edsaVerifyKey = t0;
    },
    EcdsaSigningKey__truncateAndConvertDigest(digest, generator, truncate) {
      var toBig;
      A.List_List$from(digest, true, type$.int);
      if (J.get$length$asx(digest) > A.BigintUtils_orderLen(generator.curve.p))
        throw A.wrapException(B.ArgumentException_cKo);
      toBig = A.BigintUtils_fromBytes(digest, B.C_Endian, false);
      return toBig;
    },
    EcdsaSigningKey: function EcdsaSigningKey(t0, t1) {
      this.privateKey = t0;
      this.generator = t1;
    },
    ECDSAVerifyKey: function ECDSAVerifyKey(t0) {
      this.publicKey = t0;
    },
    ETHSignature: function ETHSignature(t0, t1, t2) {
      this.s = t0;
      this.r = t1;
      this.v = t2;
    },
    ETHSigner: function ETHSigner(t0) {
      this._ecdsaSigningKey = t0;
    },
    ETHSigner__signEcdsa_closure: function ETHSigner__signEcdsa_closure() {
    },
    ETHVerifier: function ETHVerifier(t0) {
      this.edsaVerifyKey = t0;
    },
    SolanaSigner_SolanaSigner$fromKeyBytes(keyBytes) {
      return new A.SolanaSigner(A.EDDSAPrivateKey_EDDSAPrivateKey($.$get$SolanaSignerConst_ed25519Generator(), keyBytes, new A.SolanaSigner_SolanaSigner$fromKeyBytes_closure()));
    },
    SolanaSigner: function SolanaSigner(t0) {
      this._solana_signer$_signingKey = t0;
    },
    SolanaSigner_SolanaSigner$fromKeyBytes_closure: function SolanaSigner_SolanaSigner$fromKeyBytes_closure() {
    },
    SolanaSigner__signEdward_closure: function SolanaSigner__signEdward_closure() {
    },
    SolanaVerifier: function SolanaVerifier(t0) {
      this._solana_signer$_eddsaPublicKey = t0;
    },
    SolanaVerifier__verifyEddsa_closure: function SolanaVerifier__verifyEddsa_closure() {
    },
    SubstrateEcdsaSigner: function SubstrateEcdsaSigner(t0) {
      this._substrate_ecdsa$_ecdsaSigningKey = t0;
    },
    SubstrateEcdsaSigner__signEcdsa_closure: function SubstrateEcdsaSigner__signEcdsa_closure() {
    },
    SubstrateEcdsaVerifier: function SubstrateEcdsaVerifier(t0) {
      this.edsaVerifyKey = t0;
    },
    SubstrateED25519Signer: function SubstrateED25519Signer(t0) {
      this._substrate_eddsa$_signer = t0;
    },
    SubstrateSr25519Signer: function SubstrateSr25519Signer(t0) {
      this._substrate_sr25519$_signer = t0;
    },
    SubstrateSigner: function SubstrateSigner(t0) {
      this._signer = t0;
    },
    TronSigner: function TronSigner(t0) {
      this._tron_signer$_ecdsaSigningKey = t0;
    },
    TronSigner__signEcdsa_closure: function TronSigner__signEcdsa_closure() {
    },
    TronVerifier: function TronVerifier(t0) {
      this.edsaVerifyKey = t0;
    },
    XrpSigner_XrpSigner$fromKeyBytes(keyBytes, curve) {
      var signingKey;
      switch (curve) {
        case B.EllipticCurveTypes_ed25519:
          return new A.XrpSigner(A.EDDSAPrivateKey_EDDSAPrivateKey($.$get$_XrpSignerConst_ed25519Generator(), keyBytes, new A.XrpSigner_XrpSigner$fromKeyBytes_closure()), null);
        case B.EllipticCurveTypes_secp256k1:
          signingKey = A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(keyBytes, $.$get$_XrpSignerConst_secp256());
          return new A.XrpSigner(null, new A.EcdsaSigningKey(signingKey, signingKey.publicKey.generator));
        default:
          throw A.wrapException(A.MessageException$("xrp signer support secp256k1 or " + B.EllipticCurveTypes_ed25519.toString$0(0) + " private key", null));
      }
    },
    XrpVerifier_XrpVerifier$fromKeyBytes(keyBytes, curve) {
      var pub, t1, _null = null;
      switch (curve) {
        case B.EllipticCurveTypes_ed25519:
          pub = A.Ed25519PublicKey_Ed25519PublicKey$fromBytes(keyBytes);
          t1 = $.$get$_XrpSignerConst_ed25519Generator();
          return new A.XrpVerifier(_null, A.EDDSAPublicKey_EDDSAPublicKey$fromPoint(t1, A.EDPoint_EDPoint$fromBytes(t1.curve, B.JSArray_methods.sublist$1(pub.get$compressed(), 1))));
        case B.EllipticCurveTypes_secp256k1:
          t1 = $.$get$_XrpSignerConst_secp256();
          return new A.XrpVerifier(new A.ECDSAVerifyKey(A.ECDSAPublicKey_ECDSAPublicKey(t1, A.ProjectiveECCPoint_ProjectiveECCPoint$fromBytes(t1.curve, keyBytes, _null))), _null);
        default:
          throw A.wrapException(A.MessageException$("xrp signer support secp256k1 or " + B.EllipticCurveTypes_ed25519.toString$0(0) + " private key", _null));
      }
    },
    XrpSigner: function XrpSigner(t0, t1) {
      this._xrp_signer$_signingKey = t0;
      this._xrp_signer$_ecdsaSigningKey = t1;
    },
    XrpSigner_XrpSigner$fromKeyBytes_closure: function XrpSigner_XrpSigner$fromKeyBytes_closure() {
    },
    XrpSigner__signEdward_closure: function XrpSigner__signEdward_closure() {
    },
    XrpSigner__signEcdsa_closure: function XrpSigner__signEcdsa_closure() {
    },
    XrpVerifier: function XrpVerifier(t0, t1) {
      this._edsaVerifyKey = t0;
      this._xrp_signer$_eddsaPublicKey = t1;
    },
    XrpVerifier__verifyEddsa_closure: function XrpVerifier__verifyEddsa_closure() {
    },
    BytesUtils_xor(dataBytes1, dataBytes2) {
      var t2, t3, index, t4, t5,
        _length = dataBytes1.length,
        t1 = type$.int,
        _list = J.JSArray_JSArray$allocateGrowable(_length, t1);
      for (t2 = dataBytes1.length, t3 = dataBytes2.length, index = 0; index < _length; ++index) {
        if (!(index < t2))
          return A.ioore(dataBytes1, index);
        t4 = dataBytes1[index];
        if (!(index < t3))
          return A.ioore(dataBytes2, index);
        t5 = dataBytes2[index];
        if (typeof t4 !== "number")
          return t4.$xor();
        if (typeof t5 !== "number")
          return A.iae(t5);
        _list[index] = (t4 ^ t5) >>> 0;
      }
      return A.List_List$from(_list, true, t1);
    },
    BytesUtils_toHexString(dataBytes, lowerCase, prefix) {
      var toHex = B.C__Hex.encode$2$lowerCase(dataBytes, true);
      return (prefix == null ? "" : prefix) + toHex;
    },
    BytesUtils_tryToHexString(dataBytes) {
      var t1, exception,
        lowerCase = true,
        prefix = null;
      if (dataBytes == null)
        return null;
      try {
        t1 = A.BytesUtils_toHexString(dataBytes, lowerCase, prefix);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    BytesUtils_fromHexString(data) {
      var hexString, t1, exception,
        paddingZero = false;
      try {
        hexString = A.StringUtils_strip0x(data);
        if (J.get$length$asx(hexString) === 0) {
          t1 = A._setArrayType([], type$.JSArray_int);
          return t1;
        }
        if (A.boolConversionCheck(paddingZero) && (J.get$length$asx(hexString) & 1) === 1)
          hexString = "0" + A.S(hexString);
        t1 = B.C__Hex.decode$1(hexString);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.ArgumentException_MoM);
      }
    },
    BytesUtils_tryFromHexString(data) {
      var t1, exception;
      if (data == null)
        return null;
      try {
        t1 = A.BytesUtils_fromHexString(data);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    BytesUtils_toBytes(bytes, unmodifiable) {
      var t1 = type$.int,
        t2 = J.map$1$1$ax(bytes, new A.BytesUtils_toBytes_closure(), t1),
        toBytes = A.List_List$of(t2, true, t2.$ti._eval$1("ListIterable.E"));
      if (unmodifiable)
        return A.List_List$unmodifiable(toBytes, t1);
      return toBytes;
    },
    BytesUtils_tryToBytes(bytes, unmodifiable) {
      if (bytes == null)
        return null;
      return A.BytesUtils_toBytes(bytes, true);
    },
    BytesUtils_validateBytes(bytes, onError) {
      var t1, i, byte;
      for (t1 = J.getInterceptor$asx(bytes), i = 0; i < t1.get$length(bytes); ++i) {
        byte = t1.elementAt$1(bytes, i);
        if (byte < 0 || byte > 255)
          throw A.wrapException(A.ArgumentException$((onError == null ? "Invalid bytes" : onError) + " at index " + i + " " + A.S(byte), null));
      }
    },
    BytesUtils_validateListOfBytes(bytes) {
      var t1, i, byte;
      for (t1 = J.getInterceptor$asx(bytes), i = 0; i < t1.get$length(bytes); ++i) {
        byte = t1.$index(bytes, i);
        if (byte < 0 || byte > 255)
          throw A.wrapException(A.ArgumentError$("Invalid bytes at index " + i + ": " + A.S(byte), null));
      }
    },
    BytesUtils_isValidBytes(bytes) {
      var exception;
      try {
        A.BytesUtils_validateBytes(bytes, null);
        return true;
      } catch (exception) {
        return false;
      }
    },
    BytesUtils_compareBytes(a, b) {
      var i, t3, t4,
        t1 = J.getInterceptor$asx(a),
        t2 = J.getInterceptor$asx(b),
        $length = t1.get$length(a) < t2.get$length(b) ? t1.get$length(a) : t2.get$length(b);
      for (i = 0; i < $length; ++i) {
        t3 = t1.$index(a, i);
        t4 = t2.$index(b, i);
        if (typeof t3 !== "number")
          return t3.$lt();
        if (typeof t4 !== "number")
          return A.iae(t4);
        if (t3 < t4)
          return -1;
        else {
          t3 = t1.$index(a, i);
          t4 = t2.$index(b, i);
          if (typeof t3 !== "number")
            return t3.$gt();
          if (typeof t4 !== "number")
            return A.iae(t4);
          if (t3 > t4)
            return 1;
        }
      }
      if (t1.get$length(a) < t2.get$length(b))
        return -1;
      else if (t1.get$length(a) > t2.get$length(b))
        return 1;
      return 0;
    },
    BytesUtils_bytesEqual(a, b) {
      var t1, t2, index;
      if (a == null)
        return b == null;
      if (b == null || J.get$length$asx(a) !== J.get$length$asx(b))
        return false;
      if (a === b)
        return true;
      for (t1 = J.getInterceptor$asx(a), t2 = J.getInterceptor$asx(b), index = 0; index < t1.get$length(a); ++index)
        if (!J.$eq$(t1.$index(a, index), t2.$index(b, index)))
          return false;
      return true;
    },
    BytesUtils_toBytes_closure: function BytesUtils_toBytes_closure() {
    },
    BigRational_BigRational(numerator, denominator) {
      var t1, t2;
      if (denominator == null)
        return new A.BigRational(numerator, $.$get$BigRational__one());
      t1 = $.$get$BigRational__zero();
      t2 = denominator.compareTo$1(0, t1);
      if (t2 === 0)
        throw A.wrapException(B.ArgumentException_tAO);
      t2 = numerator.compareTo$1(0, t1);
      if (t2 === 0)
        return new A.BigRational(t1, $.$get$BigRational__one());
      return A.BigRational__reduce(numerator, denominator);
    },
    BigRational__gcd(a, b) {
      var t1, b0;
      while (true) {
        t1 = b.compareTo$1(0, $.$get$BigRational__zero());
        if (!(t1 !== 0))
          break;
        b0 = a.$mod(0, b);
        a = b;
        b = b0;
      }
      return a;
    },
    BigRational__reduce(n, d) {
      var divisor = A.BigRational__gcd(n, d),
        num = n.$tdiv(0, divisor),
        denom = d.$tdiv(0, divisor);
      if (denom._isNegative)
        return new A.BigRational(num.$negate(0), denom.$negate(0));
      return new A.BigRational(num, denom);
    },
    BigRational: function BigRational(t0, t1) {
      this.numerator = t0;
      this.denominator = t1;
      this._inDecimal = null;
    },
    BigintUtils_bitsToBigIntWithLengthLimit(data, qlen) {
      var x = A._BigIntImpl_parse(A.BytesUtils_toHexString(data, true, null), 16),
        l = J.get$length$asx(data) * 8;
      if (l > qlen)
        return x.$shr(0, l - qlen);
      return x;
    },
    BigintUtils_orderLen(value) {
      return B.JSInt_methods._tdivFast$1(value.toRadixString$1(0, 16).length + 1, 2);
    },
    BigintUtils_inverseMod(a, m) {
      var lm, low, high, lm0, r, nm, newLow,
        hm = $.$get$_BigIntImpl_zero(),
        t1 = a.compareTo$1(0, hm);
      if (t1 === 0)
        return hm;
      lm = $.$get$_BigIntImpl_one();
      if (a.compareTo$1(0, lm) >= 0 && a.compareTo$1(0, m) < 0)
        return a.modInverse$1(0, m);
      low = a.$mod(0, m);
      for (high = m, lm0 = lm; low.compareTo$1(0, lm) > 0; high = low, low = newLow, hm = lm0, lm0 = nm) {
        if (low._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        r = high._div$1(low);
        nm = hm.$sub(0, lm0.$mul(0, r));
        newLow = high.$sub(0, low.$mul(0, r));
      }
      return lm0.$mod(0, m);
    },
    BigintUtils_computeNAF(mult) {
      var t1, t2, nafDigit,
        nafList = A._setArrayType([], type$.JSArray_BigInt);
      while (true) {
        t1 = $.$get$_BigIntImpl_zero();
        t2 = mult.compareTo$1(0, t1);
        if (!(t2 !== 0))
          break;
        if (mult._used !== 0) {
          t2 = mult._digits;
          if (0 >= t2.length)
            return A.ioore(t2, 0);
          t2 = (t2[0] & 1) === 0;
        } else
          t2 = true;
        if (!t2) {
          nafDigit = mult.$mod(0, A._BigIntImpl__BigIntImpl$from(4));
          if (nafDigit.compareTo$1(0, $.$get$_BigIntImpl_two()) >= 0)
            nafDigit = nafDigit.$sub(0, A._BigIntImpl__BigIntImpl$from(4));
          B.JSArray_methods.add$1(nafList, nafDigit);
          mult = mult.$sub(0, nafDigit);
        } else
          B.JSArray_methods.add$1(nafList, t1);
        t1 = $.$get$_BigIntImpl_two();
        if (t1._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        mult = mult._div$1(t1);
      }
      return nafList;
    },
    BigintUtils_toBinary(value, zeroPadBitLen) {
      var binaryStr = value.toRadixString$1(0, 2);
      if (zeroPadBitLen > 0)
        return B.JSString_methods.padLeft$2(binaryStr, zeroPadBitLen, "0");
      else
        return binaryStr;
    },
    BigintUtils_toBytes(val, $length, order) {
      var bigMaskEight, byteList, i, t2,
        t1 = val.compareTo$1(0, $.$get$_BigIntImpl_zero());
      if (t1 === 0)
        return A.List_List$filled($length, 0, false, type$.int);
      bigMaskEight = A._BigIntImpl__BigIntImpl$from(255);
      t1 = type$.int;
      byteList = A.List_List$filled($length, 0, false, t1);
      for (i = 0; i < $length; ++i) {
        B.JSArray_methods.$indexSet(byteList, $length - i - 1, val.$and(0, bigMaskEight).toInt$0(0));
        val = val.$shr(0, 8);
      }
      if (order === B.C_Endian0) {
        t2 = A._arrayInstanceType(byteList)._eval$1("ReversedListIterable<1>");
        byteList = A.List_List$of(new A.ReversedListIterable(byteList, t2), true, t2._eval$1("ListIterable.E"));
      }
      return A.List_List$from(byteList, true, t1);
    },
    BigintUtils_fromBytes(bytes, byteOrder, sign) {
      var t1, result, i, t2, t3;
      if (byteOrder === B.C_Endian0) {
        t1 = J.get$reversed$ax(bytes);
        bytes = A.List_List$from(A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")), true, type$.int);
      }
      result = $.$get$_BigIntImpl_zero();
      for (t1 = J.getInterceptor$asx(bytes), i = 0; i < t1.get$length(bytes); ++i)
        result = result.$add(0, A._BigIntImpl__BigIntImpl$from(t1.$index(bytes, t1.get$length(bytes) - i - 1)).$shl(0, 8 * i));
      t2 = $.$get$_BigIntImpl_zero();
      t3 = result.compareTo$1(0, t2);
      if (t3 === 0)
        return t2;
      if (sign) {
        t1 = t1.$index(bytes, 0);
        if (typeof t1 !== "number")
          return t1.$and();
        t1 = (t1 & 128) !== 0;
      } else
        t1 = false;
      if (t1)
        return result.toSigned$1(0, B.JSInt_methods._tdivFast$1((result._isNegative ? result.$negate(0) : result).get$bitLength(0) + 7, 8) * 8);
      return result;
    },
    BigintUtils_toDer(bigIntList) {
      var contentBytes,
        t1 = A._arrayInstanceType(bigIntList),
        t2 = t1._eval$1("MappedListIterable<1,List<int>>"),
        encodedIntegers = A.List_List$of(new A.MappedListIterable(bigIntList, t1._eval$1("List<int>(1)")._as(new A.BigintUtils_toDer_closure()), t2), true, t2._eval$1("ListIterable.E")),
        lengthBytes = A.BigintUtils__encodeLength(B.JSArray_methods.fold$1$2(encodedIntegers, 0, new A.BigintUtils_toDer_closure0(), type$.int));
      t2 = type$.JSArray_int;
      contentBytes = B.JSArray_methods.fold$1$2(encodedIntegers, A._setArrayType([], t2), new A.BigintUtils_toDer_closure1(), type$.List_int);
      t2 = A._setArrayType([48], t2);
      B.JSArray_methods.addAll$1(t2, lengthBytes);
      B.JSArray_methods.addAll$1(t2, contentBytes);
      return t2;
    },
    BigintUtils__encodeLength($length) {
      var encodeLen,
        t1 = type$.JSArray_int;
      if ($length < 128)
        return A._setArrayType([$length], t1);
      else {
        encodeLen = A.IntUtils_toBytes($length, B.C_Endian0, A.IntUtils_bitlengthInBytes($length));
        t1 = A._setArrayType([(encodeLen.length | 128) >>> 0], t1);
        B.JSArray_methods.addAll$1(t1, encodeLen);
        return t1;
      }
    },
    BigintUtils__encodeInteger(r) {
      var t1,
        s = A.BigintUtils_toBytes(r, A.BigintUtils_orderLen(r), B.C_Endian);
      if (0 >= s.length)
        return A.ioore(s, 0);
      t1 = type$.JSArray_int;
      if (s[0] <= 127) {
        t1 = A._setArrayType([2], t1);
        B.JSArray_methods.addAll$1(t1, A.BigintUtils__encodeLength(s.length));
        B.JSArray_methods.addAll$1(t1, s);
        return t1;
      } else {
        t1 = A._setArrayType([2], t1);
        B.JSArray_methods.addAll$1(t1, A.BigintUtils__encodeLength(s.length + 1));
        t1.push(0);
        B.JSArray_methods.addAll$1(t1, s);
        return t1;
      }
    },
    BigintUtils_parse(v) {
      var parse, t1, exception;
      try {
        if (v instanceof A._BigIntImpl)
          return v;
        if (A._isInt(v)) {
          t1 = A._BigIntImpl__BigIntImpl$from(v);
          return t1;
        }
        if (type$.List_int._is(v)) {
          t1 = A.BigintUtils_fromBytes(v, B.C_Endian, true);
          return t1;
        }
        if (typeof v == "string") {
          parse = A._BigIntImpl__tryParse(v, null);
          if (parse == null) {
            t1 = $.$get$StringUtils__hexaDecimalRegex();
            t1 = t1._nativeRegExp.test(v);
          } else
            t1 = false;
          if (t1)
            parse = A._BigIntImpl_parse(A.StringUtils_strip0x(v), 16);
          t1 = parse;
          t1.toString;
          return t1;
        }
      } catch (exception) {
      }
      throw A.wrapException(B.ArgumentException_oOD);
    },
    BigintUtils_tryParse(v) {
      var t1, exception;
      try {
        t1 = A.BigintUtils_parse(v);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.ArgumentException)
          return null;
        else
          throw exception;
      }
    },
    BigintUtils_toDer_closure: function BigintUtils_toDer_closure() {
    },
    BigintUtils_toDer_closure0: function BigintUtils_toDer_closure0() {
    },
    BigintUtils_toDer_closure1: function BigintUtils_toDer_closure1() {
    },
    StringUtils_toBytes(v) {
      var t1 = $.$get$StringUtils__hexBytesRegex();
      if (t1._nativeRegExp.test(v))
        return A.BytesUtils_fromHexString(v);
      else
        return A.StringUtils_encode(v, B.StringEncoding_1);
    },
    StringUtils_strip0x(value) {
      if (B.JSString_methods.startsWith$1(value.toLowerCase(), "0x"))
        return B.JSString_methods.substring$1(value, 2);
      return value;
    },
    StringUtils_encode(value, type) {
      switch (type.index) {
        case 1:
          return B.C_Utf8Encoder.convert$1(value);
        case 2:
        case 3:
          return B.C_Base64Decoder.convert$1(value);
        default:
          return B.AsciiEncoder_127.convert$1(value);
      }
    },
    StringUtils_decode(value, allowInvalidOrMalformed, type) {
      switch (type.index) {
        case 1:
          return B.C_Utf8Codec.decode$2$allowMalformed(value, false);
        case 2:
          type$.Base64Codec._eval$1("Codec.S")._as(value);
          return B.Base64Codec_Base64Encoder_false.get$encoder().convert$1(value);
        case 3:
          type$.Base64Codec._eval$1("Codec.S")._as(value);
          return B.Base64Codec_Base64Encoder_true.get$encoder().convert$1(value);
        default:
          return B.C_AsciiCodec.decode$2$allowInvalid(value, false);
      }
    },
    StringUtils_tryDecode(value) {
      var t1, exception,
        allowInvalidOrMalformed = false,
        type = B.StringEncoding_1;
      try {
        t1 = A.StringUtils_decode(value, allowInvalidOrMalformed, type);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    StringUtils_fromJson(data, indent, toEncodable, toStringEncodable) {
      return B.C_JsonCodec.encode$2$toEncodable(data, toEncodable);
    },
    StringUtils_toJson(data, reviver, $T) {
      var decode;
      if (typeof data != "string") {
        if (!$T._is(data))
          throw A.wrapException(A.ArgumentException$("Invalid data encountered during JSON conversion.", A.LinkedHashMap_LinkedHashMap$_literal(["data", data], type$.String, type$.dynamic)));
        return data;
      }
      decode = B.C_JsonCodec.decode$2$reviver(data, reviver);
      if (!$T._is(decode))
        throw A.wrapException(A.ArgumentException$("Invalid json casting. excepted: " + A.createRuntimeType($T).toString$0(0) + " got: " + J.get$runtimeType$(decode).toString$0(0), null));
      return decode;
    },
    StringUtils_tryToJson(data, $T) {
      var t1, exception, reviver = null;
      try {
        t1 = A.StringUtils_toJson(data, reviver, $T);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    StringEncoding: function StringEncoding(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    Tuple: function Tuple(t0, t1, t2) {
      this.item1 = t0;
      this.item2 = t1;
      this.$ti = t2;
    },
    UUID_generateUUIDv4() {
      var t1, t2, hexBytes,
        bytes = A.List_List$generate(16, new A.UUID_generateUUIDv4_closure($.$get$Random__secureRandom()), type$.int);
      B.JSArray_methods.$indexSet(bytes, 6, bytes[6] & 15 | 64);
      B.JSArray_methods.$indexSet(bytes, 8, bytes[8] & 63 | 128);
      t1 = A._arrayInstanceType(bytes);
      t2 = t1._eval$1("MappedListIterable<1,String>");
      hexBytes = A.List_List$of(new A.MappedListIterable(bytes, t1._eval$1("String(1)")._as(new A.UUID_generateUUIDv4_closure0()), t2), true, t2._eval$1("ListIterable.E"));
      return B.JSArray_methods.join$1(B.JSArray_methods.sublist$2(hexBytes, 0, 4), "") + "-" + B.JSArray_methods.join$1(B.JSArray_methods.sublist$2(hexBytes, 4, 6), "") + "-" + B.JSArray_methods.join$1(B.JSArray_methods.sublist$2(hexBytes, 6, 8), "") + "-" + B.JSArray_methods.join$1(B.JSArray_methods.sublist$2(hexBytes, 8, 10), "") + "-" + B.JSArray_methods.join$1(B.JSArray_methods.sublist$1(hexBytes, 10), "");
    },
    UUID_fromBuffer(buffer) {
      var hexBytes,
        t1 = J.getInterceptor$asx(buffer);
      if (t1.get$length(buffer) !== 16)
        throw A.wrapException(B.ArgumentException_QTL);
      t1 = t1.map$1$1(buffer, new A.UUID_fromBuffer_closure(), type$.String);
      hexBytes = A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
      return B.JSArray_methods.join$1(B.JSArray_methods.sublist$2(hexBytes, 0, 4), "") + "-" + B.JSArray_methods.join$1(B.JSArray_methods.sublist$2(hexBytes, 4, 6), "") + "-" + B.JSArray_methods.join$1(B.JSArray_methods.sublist$2(hexBytes, 6, 8), "") + "-" + B.JSArray_methods.join$1(B.JSArray_methods.sublist$2(hexBytes, 8, 10), "") + "-" + B.JSArray_methods.join$1(B.JSArray_methods.sublist$1(hexBytes, 10), "");
    },
    UUID_generateUUIDv4_closure: function UUID_generateUUIDv4_closure(t0) {
      this.random = t0;
    },
    UUID_generateUUIDv4_closure0: function UUID_generateUUIDv4_closure0() {
    },
    UUID_fromBuffer_closure: function UUID_fromBuffer_closure() {
    },
    CanonicalizedMap: function CanonicalizedMap() {
    },
    CanonicalizedMap_addAll_closure: function CanonicalizedMap_addAll_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_entries_closure: function CanonicalizedMap_entries_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_forEach_closure: function CanonicalizedMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CanonicalizedMap_keys_closure: function CanonicalizedMap_keys_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_values_closure: function CanonicalizedMap_values_closure(t0) {
      this.$this = t0;
    },
    CosmosED25519PrivateKey: function CosmosED25519PrivateKey(t0) {
      this._private_key$_privateKey = t0;
    },
    CosmosETHSecp256K1PrivateKey: function CosmosETHSecp256K1PrivateKey(t0) {
      this._private_key0$_privateKey = t0;
    },
    CosmosPrivateKey_CosmosPrivateKey$fromBytes(algorithm, keyBytes) {
      switch (algorithm.index) {
        case 0:
          return new A.CosmosSecp256K1PrivateKey(new A.Secp256k1PrivateKeyEcdsa(A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(keyBytes, $.$get$Curves_generatorSecp256k1())));
        case 1:
          return new A.CosmosETHSecp256K1PrivateKey(new A.Secp256k1PrivateKeyEcdsa(A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(keyBytes, $.$get$Curves_generatorSecp256k1())));
        case 2:
          return new A.CosmosED25519PrivateKey(A.Ed25519PrivateKey_Ed25519PrivateKey$fromBytes(keyBytes));
        case 3:
          return new A.CosmosSecp256K1PrivateKey(new A.Secp256k1PrivateKeyEcdsa(A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(keyBytes, $.$get$Curves_generatorSecp256k1())));
        default:
          throw A.wrapException(A.DartCosmosSdkPluginException$("Unsuported cosmos key algorithm", null));
      }
    },
    CosmosPrivateKey: function CosmosPrivateKey() {
    },
    CosmosSecp256K1PrivateKey: function CosmosSecp256K1PrivateKey(t0) {
      this._private_key1$_privateKey = t0;
    },
    CosmosKeysAlgs_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_NMh, new A.CosmosKeysAlgs_fromName_closure($name), new A.CosmosKeysAlgs_fromName_closure0($name));
    },
    CosmosKeysAlgs: function CosmosKeysAlgs(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    CosmosKeysAlgs_coin_closure: function CosmosKeysAlgs_coin_closure(t0) {
      this.chain = t0;
    },
    CosmosKeysAlgs_fromName_closure: function CosmosKeysAlgs_fromName_closure(t0) {
      this.name = t0;
    },
    CosmosKeysAlgs_fromName_closure0: function CosmosKeysAlgs_fromName_closure0(t0) {
      this.name = t0;
    },
    DartCosmosSdkPluginException$(message, details) {
      return new A.DartCosmosSdkPluginException(message, details);
    },
    DartCosmosSdkPluginException: function DartCosmosSdkPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    CosmosProtocolBuffer: function CosmosProtocolBuffer() {
    },
    CosmosMessage: function CosmosMessage() {
    },
    RetryClient$(_inner, when) {
      A.RangeError_checkNotNegative(3, "retries");
      return new A.RetryClient(_inner, when);
    },
    _defaultWhen(response) {
      return type$.BaseResponse._as(response).statusCode === 503;
    },
    _defaultWhenError(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      return false;
    },
    _defaultDelay(retryCount) {
      return new A.Duration(B.JSNumber_methods.round$0(500000 * Math.pow(1.5, retryCount)));
    },
    RetryClient: function RetryClient(t0, t1) {
      this._inner = t0;
      this._when = t1;
    },
    RetryClient_send_closure: function RetryClient_send_closure() {
    },
    RetryClient_send_closure0: function RetryClient_send_closure0() {
    },
    BaseClient: function BaseClient() {
    },
    BaseRequest: function BaseRequest() {
    },
    BaseRequest_closure: function BaseRequest_closure() {
    },
    BaseRequest_closure0: function BaseRequest_closure0() {
    },
    BaseResponse: function BaseResponse() {
    },
    _extension_0_get_responseHeaders(_this) {
      var _i, header, t2, splitIdx, key, value,
        t1 = type$.String,
        headers = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1),
        headersList = A._asString(_this.getAllResponseHeaders()).split("\r\n");
      for (t1 = headersList.length, _i = 0; _i < t1; ++_i) {
        header = headersList[_i];
        t2 = J.getInterceptor$asx(header);
        if (t2.get$length(header) === 0)
          continue;
        splitIdx = t2.indexOf$1(header, ": ");
        if (splitIdx === -1)
          continue;
        key = t2.substring$2(header, 0, splitIdx).toLowerCase();
        value = t2.substring$1(header, splitIdx + 2);
        if (headers.containsKey$1(key))
          headers.$indexSet(0, key, A.S(headers.$index(0, key)) + ", " + value);
        else
          headers.$indexSet(0, key, value);
      }
      return headers;
    },
    BrowserClient: function BrowserClient(t0) {
      this._xhrs = t0;
      this._isClosed = false;
    },
    BrowserClient_send_closure: function BrowserClient_send_closure(t0, t1, t2) {
      this.xhr = t0;
      this.completer = t1;
      this.request = t2;
    },
    BrowserClient_send_closure0: function BrowserClient_send_closure0(t0, t1) {
      this.completer = t0;
      this.request = t1;
    },
    ByteStream: function ByteStream(t0) {
      this._stream = t0;
    },
    ByteStream_toBytes_closure: function ByteStream_toBytes_closure(t0) {
      this.completer = t0;
    },
    ClientException$(message, uri) {
      return new A.ClientException(message, uri);
    },
    ClientException: function ClientException(t0, t1) {
      this.message = t0;
      this.uri = t1;
    },
    Request$(method, url) {
      var t1 = new Uint8Array(0),
        t2 = $.$get$BaseRequest__tokenRE();
      if (!t2._nativeRegExp.test(method))
        A.throwExpression(A.ArgumentError$value(method, "method", "Not a valid method"));
      t2 = type$.String;
      return new A.Request(B.C_Utf8Codec, t1, method, url, A.LinkedHashMap_LinkedHashMap(new A.BaseRequest_closure(), new A.BaseRequest_closure0(), t2, t2));
    },
    Request: function Request(t0, t1, t2, t3, t4) {
      var _ = this;
      _._defaultEncoding = t0;
      _._bodyBytes = t1;
      _.method = t2;
      _.url = t3;
      _._contentLength = null;
      _._followRedirects = _._persistentConnection = true;
      _._maxRedirects = 5;
      _.headers = t4;
      _._finalized = false;
    },
    Response_fromStream(response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, body, t1, t2, t3, t4, t5, t6;
      var $async$Response_fromStream = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(response.stream.toBytes$0(), $async$Response_fromStream);
            case 3:
              // returning from await.
              body = $async$result;
              t1 = response.statusCode;
              t2 = response.request;
              t3 = response.headers;
              t4 = response.reasonPhrase;
              t5 = A.toUint8List(body);
              t6 = body.length;
              t5 = new A.Response(t5, t2, t1, t4, t6, t3, false, true);
              t5.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(t1, t6, t3, false, true, t4, t2);
              $async$returnValue = t5;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Response_fromStream, $async$completer);
    },
    Response: function Response(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.bodyBytes = t0;
      _.request = t1;
      _.statusCode = t2;
      _.reasonPhrase = t3;
      _.contentLength = t4;
      _.headers = t5;
      _.isRedirect = t6;
      _.persistentConnection = t7;
    },
    StreamedRequest$(method, url) {
      var t1 = A.StreamController_StreamController(null, null, null, true, type$.List_int),
        t2 = $.$get$BaseRequest__tokenRE();
      if (!t2._nativeRegExp.test(method))
        A.throwExpression(A.ArgumentError$value(method, "method", "Not a valid method"));
      t2 = type$.String;
      return new A.StreamedRequest(t1, method, url, A.LinkedHashMap_LinkedHashMap(new A.BaseRequest_closure(), new A.BaseRequest_closure0(), t2, t2));
    },
    StreamedRequest: function StreamedRequest(t0, t1, t2, t3) {
      var _ = this;
      _._streamed_request$_controller = t0;
      _.method = t1;
      _.url = t2;
      _._contentLength = null;
      _._followRedirects = _._persistentConnection = true;
      _._maxRedirects = 5;
      _.headers = t3;
      _._finalized = false;
    },
    StreamedResponse: function StreamedResponse() {
    },
    StreamedResponseV2: function StreamedResponseV2(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.stream = t0;
      _.request = t1;
      _.statusCode = t2;
      _.reasonPhrase = t3;
      _.contentLength = t4;
      _.headers = t5;
      _.isRedirect = t6;
      _.persistentConnection = t7;
    },
    mapToQuery(map, encoding) {
      return map.get$entries().map$1$1(0, new A.mapToQuery_closure(encoding), type$.String).join$1(0, "&");
    },
    toUint8List(input) {
      if (type$.Uint8List._is(input))
        return input;
      if (type$.TypedData._is(input))
        return A.NativeUint8List_NativeUint8List$view(input.buffer, 0, null);
      return new Uint8Array(A._ensureNativeList(input));
    },
    toByteStream(stream) {
      return stream;
    },
    mapToQuery_closure: function mapToQuery_closure(t0) {
      this.encoding = t0;
    },
    CaseInsensitiveMap$from(other, $V) {
      var t1 = new A.CaseInsensitiveMap(new A.CaseInsensitiveMap$from_closure(), A.LinkedHashMap_LinkedHashMap$_empty(type$.String, $V._eval$1("MapEntry<String,0>")), $V._eval$1("CaseInsensitiveMap<0>"));
      t1.addAll$1(0, other);
      return t1;
    },
    CaseInsensitiveMap: function CaseInsensitiveMap(t0, t1, t2) {
      this._canonicalize = t0;
      this._base = t1;
      this.$ti = t2;
    },
    CaseInsensitiveMap$from_closure: function CaseInsensitiveMap$from_closure() {
    },
    MediaType_MediaType$parse(mediaType) {
      return A.wrapFormatException("media type", mediaType, new A.MediaType_MediaType$parse_closure(mediaType), type$.MediaType);
    },
    MediaType$(type, subtype, parameters) {
      var t1 = type$.String;
      t1 = parameters == null ? A.LinkedHashMap_LinkedHashMap$_empty(t1, t1) : A.CaseInsensitiveMap$from(parameters, t1);
      return new A.MediaType(type.toLowerCase(), subtype.toLowerCase(), new A.UnmodifiableMapView(t1, type$.UnmodifiableMapView_String_String));
    },
    MediaType: function MediaType(t0, t1, t2) {
      this.type = t0;
      this.subtype = t1;
      this.parameters = t2;
    },
    MediaType_MediaType$parse_closure: function MediaType_MediaType$parse_closure(t0) {
      this.mediaType = t0;
    },
    MediaType_toString_closure: function MediaType_toString_closure(t0) {
      this.buffer = t0;
    },
    MediaType_toString__closure: function MediaType_toString__closure() {
    },
    expectQuotedString(scanner) {
      var string;
      scanner.expect$2$name($.$get$_quotedString(), "quoted string");
      string = scanner.get$lastMatch().$index(0, 0);
      return A.stringReplaceAllFuncUnchecked(B.JSString_methods.substring$2(string, 1, string.length - 1), $.$get$_quotedPair(), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(new A.expectQuotedString_closure())), null);
    },
    expectQuotedString_closure: function expectQuotedString_closure() {
    },
    MoneroAccountKeys_MoneroAccountKeys(account, indexes, network) {
      var t1;
      if (indexes.length === 0)
        throw A.wrapException(B.DartMoneroPluginException_EEy);
      if (A.LinkedHashSet_LinkedHashSet$from(indexes, A._arrayInstanceType(indexes)._precomputed1)._collection$_length !== indexes.length)
        throw A.wrapException(B.DartMoneroPluginException_juT);
      t1 = type$.MoneroAccountIndex;
      return new A.MoneroAccountKeys(network, A.List_List$unmodifiable(indexes, t1), B.MoneroAccountKeysType_Simple_0, account, A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.MoneroPrivateKey), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.MoneroPublicKey));
    },
    MoneroAccountKeys_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroLayoutConst_variantString("network"), A.LayoutConst_optional(A.RawBytesLayout_RawBytesLayout(32, null), "privSkey"), A.RawBytesLayout_RawBytesLayout(32, "privVkey"), A.RawBytesLayout_RawBytesLayout(32, "pubSkey"), A.MoneroLayoutConst_variantVec(A.MoneroAccountIndex_layout(null), "indexes", type$.Map_String_dynamic)], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroMultisigAccountKeys_layout(property) {
      var _null = null,
        t1 = type$.List_int,
        t2 = type$.JSArray_Layout_dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroLayoutConst_variantString("network"), A.StructLayout_StructLayout(A._setArrayType([new A.MoneroIntVarInt(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "threshold"), new A.MoneroIntVarInt(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "kex_rounds_complete"), A.MoneroLayoutConst_variantVec(A.RawBytesLayout_RawBytesLayout(32, _null), "signers", t1), A.RawBytesLayout_RawBytesLayout(32, "base_private_key"), A.RawBytesLayout_RawBytesLayout(32, "base_public_key"), A.RawBytesLayout_RawBytesLayout(32, "base_common_private_key"), A.MoneroLayoutConst_variantVec(A.RawBytesLayout_RawBytesLayout(32, _null), "multisig_private_keys", t1), A.RawBytesLayout_RawBytesLayout(32, "common_private_key"), A.RawBytesLayout_RawBytesLayout(32, "multisig_pub_key"), A.RawBytesLayout_RawBytesLayout(32, "common_pub_key"), A.MoneroLayoutConst_variantString("kex_round_message"), A.MoneroLayoutConst_map(A.RawBytesLayout_RawBytesLayout(32, _null), "kex_keys", A.MoneroLayoutConst_variantVec(A.RawBytesLayout_RawBytesLayout(32, _null), _null, t1))], t2), false, "account"), A.MoneroLayoutConst_variantVec(A.MoneroAccountIndex_layout(_null), "indexes", type$.Map_String_dynamic)], t2), false, property);
    },
    MoneroAccountKeysType: function MoneroAccountKeysType(t0, t1) {
      this.name = t0;
      this.value = t1;
    },
    MoneroBaseAccountKeys: function MoneroBaseAccountKeys() {
    },
    MoneroBaseAccountKeys_toString_closure: function MoneroBaseAccountKeys_toString_closure(t0) {
      this.$this = t0;
    },
    MoneroAccountKeys: function MoneroAccountKeys(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.network = t0;
      _.indexes = t1;
      _.type = t2;
      _.account = t3;
      _._cachedIndexSpendSecretKey = t4;
      _._cachedIndexSpendPubKey = t5;
    },
    MoneroAccountKeys_toLayoutStruct_closure: function MoneroAccountKeys_toLayoutStruct_closure() {
    },
    MoneroAccountAddress_MoneroAccountAddress$fromPubKeys(network, pubSpendKey, pubViewKey, type) {
      var t1, t2, encode;
      if (type === B.XmrAddressType_GNA)
        throw A.wrapException(B.DartMoneroPluginException_gkc);
      t1 = type$.List_int;
      t2 = t1._as(network.findPrefix$1(type));
      encode = A._XmrAddrUtils_encodeKey(t1._as(pubSpendKey), t1._as(pubViewKey), t2, null);
      t2 = A.MoneroPublicKey_MoneroPublicKey$fromBytes(pubSpendKey);
      return new A.MoneroAccountAddress(A.MoneroPublicKey_MoneroPublicKey$fromBytes(pubViewKey), t2, encode, type);
    },
    MoneroAddress_MoneroAddress(address) {
      var t1,
        decode = new A.XmrAddrDecoder().decode$1(address),
        psKey = A.MoneroPublicKey_MoneroPublicKey$fromBytes(decode.publicSpendKey),
        pvKey = A.MoneroPublicKey_MoneroPublicKey$fromBytes(decode.publicViewKey);
      A.MoneroNetwork_fromNetVersion(decode.netVersion);
      t1 = decode.type;
      switch (t1) {
        case B.XmrAddressType_GNA:
          t1 = decode.paymentId;
          t1.toString;
          A.BytesUtils_validateListOfBytes(t1);
          return new A.MoneroIntegratedAddress(A.List_List$unmodifiable(t1, type$.int), pvKey, psKey, address, B.XmrAddressType_GNA);
        case B.XmrAddressType_GJa:
        case B.XmrAddressType_0rc:
          return new A.MoneroAccountAddress(pvKey, psKey, address, t1);
        default:
          throw A.wrapException(A.DartMoneroPluginException$("Invalid monero address type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", t1.toString$0(0)], type$.String, type$.dynamic)));
      }
    },
    MoneroAddress_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroLayoutConst_variantString("address")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroAccountAddress: function MoneroAccountAddress(t0, t1, t2, t3) {
      var _ = this;
      _.pubViewKey = t0;
      _.pubSpendKey = t1;
      _.address = t2;
      _.type = t3;
    },
    MoneroAddress: function MoneroAddress() {
    },
    MoneroIntegratedAddress: function MoneroIntegratedAddress(t0, t1, t2, t3, t4) {
      var _ = this;
      _.paymentId = t0;
      _.pubViewKey = t1;
      _.pubSpendKey = t2;
      _.address = t3;
      _.type = t4;
    },
    MoneroCryptoException$(message, details) {
      return new A.MoneroCryptoException(message, details);
    },
    MoneroCryptoException: function MoneroCryptoException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    Gamma: function Gamma(t0, t1, t2, t3, t4) {
      var _ = this;
      _.gammaDistribution = t0;
      _.rctOffsets = t1;
      _.end = t2;
      _.avarageOutsTime = t3;
      _.numRctOuts = t4;
    },
    CtKey_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "dest"), A.RawBytesLayout_RawBytesLayout(32, "mask")], type$.JSArray_Layout_dynamic), false, property);
    },
    CtKey: function CtKey(t0, t1) {
      this.dest = t0;
      this.mask = t1;
    },
    MECSignature: function MECSignature(t0, t1) {
      this.c = t0;
      this.r = t1;
    },
    MultiexpData: function MultiexpData(t0, t1) {
      this.scalar = t0;
      this.point = t1;
    },
    MultisigLR_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "l"), A.RawBytesLayout_RawBytesLayout(32, "r")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroMultisigOutputInfo$(lr, partialKeyImages, signer) {
      var t1 = A._arrayInstanceType(partialKeyImages);
      return new A.MoneroMultisigOutputInfo(signer, A.List_List$unmodifiable(lr, type$.MultisigLR), A.List_List$unmodifiable(new A.MappedListIterable(partialKeyImages, t1._eval$1("List<int>(1)")._as(new A.MoneroMultisigOutputInfo_closure()), t1._eval$1("MappedListIterable<1,List<int>>")), type$.List_int));
    },
    MoneroMultisigOutputInfo_MoneroMultisigOutputInfo$fromStruct(json) {
      var t3, t4,
        t1 = A.MoneroPublicKey_MoneroPublicKey$fromBytes(A.QuickMap_asBytes(json, "signer", type$.List_int)),
        t2 = A.QuickMap_asListOfMap(json, "lr");
      t2.toString;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,MultisigLR>");
      t4 = A.List_List$of(new A.MappedListIterable(t2, t3._eval$1("MultisigLR(1)")._as(new A.MoneroMultisigOutputInfo_MoneroMultisigOutputInfo$fromStruct_closure()), t4), true, t4._eval$1("ListIterable.E"));
      t3 = A.QuickMap_asListBytes(json, "partialKeyImages");
      t3.toString;
      return A.MoneroMultisigOutputInfo$(t4, t3, t1);
    },
    MoneroMultisigOutputInfo_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "signer"), A.MoneroLayoutConst_variantVec(A.MultisigLR_layout(null), "lr", type$.Map_String_dynamic), A.MoneroLayoutConst_variantVec(A.RawBytesLayout_RawBytesLayout(32, null), "partialKeyImages", type$.List_int)], type$.JSArray_Layout_dynamic), false, property);
    },
    MultisigLR: function MultisigLR(t0, t1) {
      this.l = t0;
      this.r = t1;
    },
    MoneroMultisigOutputInfo: function MoneroMultisigOutputInfo(t0, t1, t2) {
      this.signer = t0;
      this.lr = t1;
      this.partialKeyImages = t2;
    },
    MoneroMultisigOutputInfo_closure: function MoneroMultisigOutputInfo_closure() {
    },
    MoneroMultisigOutputInfo_MoneroMultisigOutputInfo$fromStruct_closure: function MoneroMultisigOutputInfo_MoneroMultisigOutputInfo$fromStruct_closure() {
    },
    MoneroMultisigOutputInfo_toLayoutStruct_closure: function MoneroMultisigOutputInfo_toLayoutStruct_closure() {
    },
    BulletproofsPlusGenerator_getExponent(base, idx) {
      var hash, generator,
        indexBytes = new A.MoneroIntVarInt(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, null).serialize$1(idx),
        t1 = type$.int,
        t2 = A.List_List$of(base, true, t1);
      B.JSArray_methods.addAll$1(t2, B.List_sYN);
      B.JSArray_methods.addAll$1(t2, indexBytes);
      hash = A.Keccack_hash(t2, 32);
      generator = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.RCT_hashToP3(generator, hash);
      if (A.BytesUtils_bytesEqual(A.CryptoOps_geP3Tobytes_(generator), A.RCT_identity(false)))
        throw A.wrapException(B.MoneroCryptoException_jF8);
      return generator;
    },
    BulletproofsPlusGenerator_multiexp(data, higiSize) {
      var t1, _null = null;
      if (higiSize > 0) {
        if (higiSize <= 232 && J.get$length$asx(data) === higiSize)
          return A.Multiexp_straus(data, _null, 0);
        return A.Multiexp_pippenger(A.Multiexp_getPippengerC(J.get$length$asx(data)), higiSize, data, _null);
      }
      t1 = J.getInterceptor$asx(data);
      if (t1.get$length(data) <= 95)
        return A.Multiexp_straus(data, _null, _null);
      return A.Multiexp_pippenger(A.Multiexp_getPippengerC(t1.get$length(data)), 0, data, _null);
    },
    BulletproofsPlusGenerator_vectorExponent(a, b) {
      var multiexpData, i, t2, t3, t4, result,
        t1 = a.length;
      if (t1 !== b.length)
        throw A.wrapException(B.MoneroCryptoException_YEW);
      if (t1 > 1024)
        throw A.wrapException(B.MoneroCryptoException_Bj7);
      multiexpData = A._setArrayType([], type$.JSArray_MultiexpData);
      for (t1 = type$.int, i = 0; t2 = a.length, i < t2; ++i) {
        t2 = a[i];
        t3 = i * 2;
        t4 = A.BulletproofsPlusGenerator_getExponent(B.List_Qm0, t3 + 1);
        A.BytesUtils_validateListOfBytes(t2);
        result = A.List_List$from(t2, false, t1);
        result.fixed$length = Array;
        result.immutable$list = Array;
        B.JSArray_methods.add$1(multiexpData, new A.MultiexpData(result, t4));
        if (!(i < b.length))
          return A.ioore(b, i);
        t4 = b[i];
        t3 = A.BulletproofsPlusGenerator_getExponent(B.List_Qm0, t3);
        A.BytesUtils_validateListOfBytes(t4);
        result = A.List_List$from(t4, false, t1);
        result.fixed$length = Array;
        result.immutable$list = Array;
        B.JSArray_methods.add$1(multiexpData, new A.MultiexpData(result, t3));
      }
      return A.BulletproofsPlusGenerator_multiexp(multiexpData, t2 * 2);
    },
    BulletproofsPlusGenerator_computeLR(size, y, $G, g0, $H, h0, a, a0, b, b0, c, d) {
      var multiexpData, temp, t1, i, scalar, t2, t3, result, scalar2, scBytes, hP3;
      if (size + g0 > $G.length)
        throw A.wrapException(B.MoneroCryptoException_0dm);
      if (size + h0 > $H.length)
        throw A.wrapException(B.MoneroCryptoException_0dm0);
      if (size + a0 > a.length)
        throw A.wrapException(B.MoneroCryptoException_0dm1);
      if (size + b0 > b.length)
        throw A.wrapException(B.MoneroCryptoException_0dm2);
      if (size > 1024)
        throw A.wrapException(B.MoneroCryptoException_g78);
      multiexpData = A.List_List$filled(size * 2 + 2, null, false, type$.nullable_MultiexpData);
      temp = A.RCT_zero(true);
      for (t1 = type$.int, i = 0; i < size; ++i) {
        scalar = A.RCT_zero(true);
        t2 = a0 + i;
        if (!(t2 < a.length))
          return A.ioore(a, t2);
        A.CryptoOps_scMul(temp, a[t2], y);
        A.CryptoOps_scMul(scalar, temp, B.List_D3e);
        t2 = i * 2;
        t3 = g0 + i;
        if (!(t3 < $G.length))
          return A.ioore($G, t3);
        t3 = $G[t3];
        A.BytesUtils_validateListOfBytes(scalar);
        result = A.List_List$from(scalar, false, t1);
        result.fixed$length = Array;
        result.immutable$list = Array;
        B.JSArray_methods.$indexSet(multiexpData, t2, new A.MultiexpData(result, t3));
        scalar2 = A.RCT_zero(true);
        t3 = b0 + i;
        if (!(t3 < b.length))
          return A.ioore(b, t3);
        A.CryptoOps_scMul(scalar2, b[t3], B.List_D3e);
        t3 = h0 + i;
        if (!(t3 < $H.length))
          return A.ioore($H, t3);
        t3 = $H[t3];
        A.BytesUtils_validateListOfBytes(scalar2);
        result = A.List_List$from(scalar2, false, t1);
        result.fixed$length = Array;
        result.immutable$list = Array;
        B.JSArray_methods.$indexSet(multiexpData, t2 + 1, new A.MultiexpData(result, t3));
      }
      scBytes = A.RCT_zero(true);
      A.CryptoOps_scMul(scBytes, c, B.List_D3e);
      hP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_geFromBytesVartime_(hP3, B.List_Qm0);
      t2 = 2 * size;
      A.BytesUtils_validateListOfBytes(scBytes);
      B.JSArray_methods.$indexSet(multiexpData, t2, new A.MultiexpData(A.List_List$unmodifiable(scBytes, t1), hP3));
      scBytes = A.RCT_zero(true);
      A.CryptoOps_scMul(scBytes, d, B.List_D3e);
      hP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_geFromBytesVartime_(hP3, B.List_ouN2);
      A.BytesUtils_validateListOfBytes(scBytes);
      B.JSArray_methods.$indexSet(multiexpData, t2 + 1, new A.MultiexpData(A.List_List$unmodifiable(scBytes, t1), hP3));
      return A.BulletproofsPlusGenerator_multiexp(new A.CastList(multiexpData, A._arrayInstanceType(multiexpData)._eval$1("CastList<1,MultiexpData>")), 0);
    },
    BulletproofsPlusGenerator_vectorOfScalarPowers(x, n) {
      var res, _i, i, t1, t2, t3;
      if (n <= 0)
        throw A.wrapException(B.MoneroCryptoException_6YB);
      res = J.JSArray_JSArray$allocateGrowable(n, type$.List_int);
      for (_i = 0; _i < n; ++_i)
        res[_i] = A.RCT_zero(true);
      B.JSArray_methods.$indexSet(res, 0, A.RCT_identity(true));
      if (n === 1)
        return res;
      B.JSArray_methods.$indexSet(res, 1, A.ListHelper_clone(x, false, type$.int));
      for (i = 2; i < n; ++i) {
        t1 = res.length;
        if (!(i < t1))
          return A.ioore(res, i);
        t2 = res[i];
        t3 = i - 1;
        if (!(t3 < t1))
          return A.ioore(res, t3);
        A.CryptoOps_scMul(t2, res[t3], x);
      }
      return res;
    },
    BulletproofsPlusGenerator_weightedInnerProduct(a, b, y) {
      var res, yPower, temp, i, t1;
      if (a.length !== b.length)
        throw A.wrapException(B.MoneroCryptoException_YEW);
      res = A.RCT_zero(true);
      yPower = A.ListHelper_clone(B.List_ouN0, false, type$.int);
      temp = A.RCT_zero(true);
      for (i = 0; i < a.length; ++i) {
        t1 = a[i];
        if (!(i < b.length))
          return A.ioore(b, i);
        A.CryptoOps_scMul(temp, t1, b[i]);
        A.CryptoOps_scMul(yPower, yPower, y);
        A.CryptoOps_scMulAdd(res, temp, yPower, res);
      }
      return res;
    },
    BulletproofsPlusGenerator_hadamardFold(v, a, b) {
      var sz, n, c, t2, t3,
        t1 = v.length;
      if ((t1 & 1) === 1)
        throw A.wrapException(B.MoneroCryptoException_CVN);
      sz = t1 / 2 | 0;
      for (n = 0; n < sz; ++n) {
        c = [A.GroupElementCached_dsmp(), A.GroupElementCached_dsmp()];
        t1 = c[0];
        if (!(n < v.length))
          return A.ioore(v, n);
        A.CryptoOps_geDsmPrecomp(t1, v[n]);
        t2 = c[1];
        t3 = sz + n;
        if (!(t3 < v.length))
          return A.ioore(v, t3);
        A.CryptoOps_geDsmPrecomp(t2, v[t3]);
        if (!(n < v.length))
          return A.ioore(v, n);
        A.CryptoOps_geDoubleScalarMultPrecompVartime2P3(v[n], a, t1, b, t2);
      }
      return B.JSArray_methods.sublist$2(v, 0, sz);
    },
    BulletproofsPlusGenerator_vectorAddComponentwise(a, b) {
      var res, _i, i, t2,
        t1 = a.length;
      if (t1 !== b.length)
        throw A.wrapException(B.MoneroCryptoException_YEW);
      res = J.JSArray_JSArray$allocateGrowable(t1, type$.List_int);
      for (_i = 0; _i < t1; ++_i)
        res[_i] = A.RCT_zero(true);
      for (i = 0; i < a.length; ++i) {
        if (!(i < res.length))
          return A.ioore(res, i);
        t1 = res[i];
        t2 = a[i];
        if (!(i < b.length))
          return A.ioore(b, i);
        A.CryptoOps_scAdd(t1, t2, b[i]);
      }
      return res;
    },
    BulletproofsPlusGenerator_vectorAdd(a, b) {
      var _i, i,
        _length = a.length,
        res = J.JSArray_JSArray$allocateGrowable(_length, type$.List_int);
      for (_i = 0; _i < _length; ++_i)
        res[_i] = A.RCT_zero(true);
      for (i = 0; i < a.length; ++i) {
        if (!(i < res.length))
          return A.ioore(res, i);
        A.CryptoOps_scAdd(res[i], a[i], b);
      }
      return res;
    },
    BulletproofsPlusGenerator_vectorSubtract(a, b) {
      var _i, i,
        _length = a.length,
        res = J.JSArray_JSArray$allocateGrowable(_length, type$.List_int);
      for (_i = 0; _i < _length; ++_i)
        res[_i] = A.RCT_zero(true);
      for (i = 0; i < a.length; ++i) {
        if (!(i < res.length))
          return A.ioore(res, i);
        A.CryptoOps_scSub(res[i], a[i], b);
      }
      return res;
    },
    BulletproofsPlusGenerator_vectorScalar(a, x) {
      var _i, i,
        _length = a.length,
        res = J.JSArray_JSArray$allocateGrowable(_length, type$.List_int);
      for (_i = 0; _i < _length; ++_i)
        res[_i] = A.RCT_zero(true);
      for (i = 0; i < a.length; ++i) {
        if (!(i < res.length))
          return A.ioore(res, i);
        A.CryptoOps_scMul(res[i], a[i], x);
      }
      return res;
    },
    BulletproofsPlusGenerator_sm(y, n, x) {
      var n0;
      for (; n0 = n - 1, n !== 0; n = n0)
        A.CryptoOps_scMul(y, y, y);
      A.CryptoOps_scMul(y, y, x);
      return y;
    },
    BulletproofsPlusGenerator_invert(x) {
      var a10, a100, a11, a101, a111, a1001, a1011, a1111, a1, inv;
      if (A.BytesUtils_bytesEqual(x, B.List_ouN))
        throw A.wrapException(B.MoneroCryptoException_7N7);
      A.RCT_zero(true);
      a10 = A.RCT_zero(true);
      a100 = A.RCT_zero(true);
      a11 = A.RCT_zero(true);
      a101 = A.RCT_zero(true);
      a111 = A.RCT_zero(true);
      a1001 = A.RCT_zero(true);
      a1011 = A.RCT_zero(true);
      a1111 = A.RCT_zero(true);
      a1 = A.ListHelper_clone(x, false, type$.int);
      A.CryptoOps_scMul(a10, a1, a1);
      A.CryptoOps_scMul(a100, a10, a10);
      A.CryptoOps_scMul(a11, a10, a1);
      A.CryptoOps_scMul(a101, a10, a11);
      A.CryptoOps_scMul(a111, a10, a101);
      A.CryptoOps_scMul(a1001, a10, a111);
      A.CryptoOps_scMul(a1011, a10, a1001);
      A.CryptoOps_scMul(a1111, a100, a1011);
      inv = A.RCT_zero(true);
      A.CryptoOps_scMul(inv, a1111, a1);
      return A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(A.BulletproofsPlusGenerator_sm(inv, 126, a101), 4, a11), 5, a1111), 5, a1111), 4, a1001), 2, a11), 5, a1111), 4, a101), 6, a101), 3, a111), 5, a1111), 5, a111), 4, a11), 5, a1011), 6, a1011), 10, a1001), 4, a11), 5, a11), 5, a11), 5, a1001), 4, a111), 6, a1111), 5, a1011), 3, a101), 6, a1111), 3, a101), 3, a11);
    },
    BulletproofsPlusGenerator_transcriptUpdateTwo(transcript, update) {
      var h,
        t1 = A.List_List$of(transcript, true, type$.int);
      B.JSArray_methods.addAll$1(t1, update);
      h = A.Keccack_hash(t1, 32);
      A.CryptoOps_scReduce32(h);
      return h;
    },
    BulletproofsPlusGenerator_transcriptUpdateThree(transcript, update0, update1) {
      var h,
        t1 = A.List_List$of(transcript, true, type$.int);
      B.JSArray_methods.addAll$1(t1, update0);
      B.JSArray_methods.addAll$1(t1, update1);
      h = A.Keccack_hash(t1, 32);
      A.CryptoOps_scReduce32(h);
      return h;
    },
    BulletproofsPlusGenerator_bulletproofPlusPROVE(sv, gamma) {
      var e, t1, exception;
      try {
        t1 = A.BulletproofsPlusGenerator__bulletproofPlusPROVE(sv, gamma);
        return t1;
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.MoneroCryptoException$("Failed to generate Bulletproof Plus.", A.LinkedHashMap_LinkedHashMap$_literal(["error", J.toString$0$(e)], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    BulletproofsPlusGenerator__bulletproofPlusPROVE(sv, gamma) {
      var _i, logM, $M, mn, _length, $V, aL, aR, aL8, aR8, temp2, i, gamma8, sv8, t2, rv, b2, j, i0, t3, _box_0 = {},
        t1 = sv.length;
      if (t1 !== gamma.length)
        throw A.wrapException(B.MoneroCryptoException_8Gl);
      for (_i = 0; _i < sv.length; sv.length === t1 || (0, A.throwConcurrentModificationError)(sv), ++_i)
        if (A.CryptoOps_scCheck(sv[_i]) !== 0)
          throw A.wrapException(B.MoneroCryptoException_oFp);
      for (t1 = gamma.length, _i = 0; _i < gamma.length; gamma.length === t1 || (0, A.throwConcurrentModificationError)(gamma), ++_i)
        if (A.CryptoOps_scCheck(gamma[_i]) !== 0)
          throw A.wrapException(B.MoneroCryptoException_E3b);
      _box_0.M = 0;
      logM = 0;
      while (true) {
        $M = _box_0.M = B.JSInt_methods._shlPositive$1(1, logM);
        if (!($M <= 16 && $M < sv.length))
          break;
        ++logM;
      }
      if ($M > 16)
        throw A.wrapException(B.MoneroCryptoException_A6W);
      mn = $M * 64;
      _length = sv.length;
      t1 = type$.List_int;
      $V = J.JSArray_JSArray$allocateGrowable(_length, t1);
      for (_i = 0; _i < _length; ++_i)
        $V[_i] = A.RCT_zero(true);
      aL = J.JSArray_JSArray$allocateGrowable(mn, t1);
      for (_i = 0; _i < mn; ++_i)
        aL[_i] = A.RCT_zero(true);
      aR = J.JSArray_JSArray$allocateGrowable(mn, t1);
      for (_i = 0; _i < mn; ++_i)
        aR[_i] = A.RCT_zero(true);
      aL8 = J.JSArray_JSArray$allocateGrowable(mn, t1);
      for (_i = 0; _i < mn; ++_i)
        aL8[_i] = A.RCT_zero(true);
      aR8 = J.JSArray_JSArray$allocateGrowable(mn, t1);
      for (_i = 0; _i < mn; ++_i)
        aR8[_i] = A.RCT_zero(true);
      _box_0.temp = A.RCT_zero(true);
      temp2 = A.RCT_zero(true);
      for (t1 = type$.int, i = 0; i < sv.length; ++i) {
        gamma8 = A.RCT_zero(true);
        sv8 = A.RCT_zero(true);
        if (!(i < gamma.length))
          return A.ioore(gamma, i);
        A.CryptoOps_scMul(gamma8, gamma[i], B.List_D3e);
        if (!(i < sv.length))
          return A.ioore(sv, i);
        A.CryptoOps_scMul(sv8, sv[i], B.List_D3e);
        if (!(i < $V.length))
          return A.ioore($V, i);
        t2 = $V[i];
        rv = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
        b2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
        if (A.CryptoOps_geFromBytesVartime_(b2, B.List_Qm0) !== 0)
          A.throwExpression(B.MoneroCryptoException_tEe);
        A.CryptoOps_geDoubleScalarMultBaseVartime(rv, sv8, b2, gamma8);
        A.CryptoOps_geToBytes(t2, rv);
      }
      for (j = 0; j < _box_0.M; ++j)
        for (t1 = j * 64, i = 64; i0 = i - 1, i > 0; i = i0) {
          if (j < sv.length) {
            t2 = sv[j];
            t3 = B.JSInt_methods._tdivFast$1(i0, 8);
            if (!(t3 >= 0 && t3 < t2.length))
              return A.ioore(t2, t3);
            t3 = t2[t3];
            t2 = B.JSInt_methods.$shl(1, B.JSInt_methods.$mod(i0, 8));
            if (typeof t3 !== "number")
              return t3.$and();
            t2 = (t3 & t2) >>> 0 !== 0;
          } else
            t2 = false;
          t3 = t1 + i0;
          if (t2) {
            B.JSArray_methods.$indexSet(aL, t3, A.RCT_identity(true));
            B.JSArray_methods.$indexSet(aL8, t3, B.List_D3e);
            t2 = A.RCT_zero(true);
            B.JSArray_methods.$indexSet(aR8, t3, t2);
            B.JSArray_methods.$indexSet(aR, t3, t2);
          } else {
            t2 = A.RCT_zero(true);
            B.JSArray_methods.$indexSet(aL8, t3, t2);
            B.JSArray_methods.$indexSet(aL, t3, t2);
            B.JSArray_methods.$indexSet(aR, t3, B.List_0a0);
            B.JSArray_methods.$indexSet(aR8, t3, B.List_Epp);
          }
        }
      return new A.BulletproofsPlusGenerator__bulletproofPlusPROVE_tryAgain(_box_0, $V, aL8, aR8, mn, aL, aR, sv, temp2, gamma, logM + 6).call$0();
    },
    BulletproofsPlusGenerator_bulletproofPlusPROVEAmouts(v, gamma) {
      var e, t1, exception;
      try {
        t1 = A.BulletproofsPlusGenerator__bulletproofPlusPROVEAmouts(v, gamma);
        return t1;
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.MoneroCryptoException$("Failed to generate Bulletproof Plus.", A.LinkedHashMap_LinkedHashMap$_literal(["error", J.toString$0$(e)], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    BulletproofsPlusGenerator__bulletproofPlusPROVEAmouts(v, gamma) {
      var sv, _i, i,
        t1 = v.length;
      if (t1 !== gamma.length)
        throw A.wrapException(B.MoneroCryptoException_knt);
      sv = J.JSArray_JSArray$allocateGrowable(t1, type$.List_int);
      for (_i = 0; _i < t1; ++_i)
        sv[_i] = A.RCT_zero(true);
      for (i = 0; i < v.length; ++i)
        B.JSArray_methods.$indexSet(sv, i, A.BigintUtils_toBytes(A.BigIntHelper_get_asUint64(v[i]), 32, B.C_Endian0));
      return A.BulletproofsPlusGenerator_bulletproofPlusPROVE(sv, gamma);
    },
    BulletproofsPlusGenerator__bulletproofPlusPROVE_tryAgain: function BulletproofsPlusGenerator__bulletproofPlusPROVE_tryAgain(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _._box_0 = t0;
      _.V = t1;
      _.aL8 = t2;
      _.aR8 = t3;
      _.mn = t4;
      _.aL = t5;
      _.aR = t6;
      _.sv = t7;
      _.temp2 = t8;
      _.gamma = t9;
      _.logMN = t10;
    },
    StrausCachedData$(multiples, size) {
      var t1 = A._arrayInstanceType(multiples),
        t2 = t1._eval$1("MappedListIterable<1,List<GroupElementCached>>");
      return new A.StrausCachedData(A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(multiples, t1._eval$1("List<GroupElementCached>(1)")._as(new A.StrausCachedData_closure()), t2), true, t2._eval$1("ListIterable.E")), type$.List_GroupElementCached), size);
    },
    StrausCachedData_StrausCachedData$init(data) {
      var t2, p1, p3, _list, t3, _i, _list0, _i0, cache, j, i, t4,
        t1 = J.getInterceptor$asx(data),
        n = t1.get$length(data);
      if (n > t1.get$length(data))
        throw A.wrapException(B.MoneroCryptoException_cc6);
      t2 = type$.int;
      p1 = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      p3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      _list = J.JSArray_JSArray$allocateGrowable(n, type$.List_GroupElementCached);
      for (t3 = type$.JSArray_GroupElementCached, _i = 0; _i < n; ++_i) {
        _list0 = A._setArrayType(new Array(15), t3);
        for (_i0 = 0; _i0 < 15; ++_i0)
          _list0[_i0] = new A.GroupElementCached(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        _list[_i] = _list0;
      }
      cache = A.StrausCachedData$(_list, n);
      for (t2 = cache.multiples, t3 = t2.length, j = 0; j < n; ++j) {
        if (!(j < t3))
          return A.ioore(t2, j);
        A.CryptoOps_geP3ToCached(J.$index$asx(t2[j], 0), t1.$index(data, j).point);
        for (i = 2; i < 16; ++i) {
          t4 = i - 1;
          A.CryptoOps_geAdd(p1, t1.$index(data, j).point, J.$index$asx(t2[j], t4 - 1));
          A.CryptoOps_geP1P1ToP3(p3, p1);
          A.CryptoOps_geP3ToCached(J.$index$asx(t2[j], t4), p3);
        }
      }
      return cache;
    },
    Multiexp__isLowerThan(k0, k1) {
      var t1, t2, n, t3, t4;
      for (t1 = k0.length, t2 = k1.length, n = 31; n >= 0; --n) {
        if (!(n < t1))
          return A.ioore(k0, n);
        t3 = k0[n];
        if (!(n < t2))
          return A.ioore(k1, n);
        t4 = k1[n];
        if (typeof t3 !== "number")
          return t3.$lt();
        if (typeof t4 !== "number")
          return A.iae(t4);
        if (t3 < t4)
          return true;
        if (t3 > t4)
          return false;
      }
      return false;
    },
    Multiexp__pow2(n) {
      var res, t1, t2;
      if (n >= 256)
        throw A.wrapException(B.MoneroCryptoException_2jN);
      res = A.ListHelper_clone(B.List_ouN, false, type$.int);
      t1 = n >>> 3;
      if (!(t1 < res.length))
        return A.ioore(res, t1);
      t2 = res[t1];
      if (typeof t2 !== "number")
        return t2.$or();
      B.JSArray_methods.$indexSet(res, t1, (t2 | 1 << (n & 7)) >>> 0);
      return res;
    },
    Multiexp_pippengerInitCache(data, startOffset) {
      var $N, cache, t2, _i, i,
        t1 = J.getInterceptor$asx(data);
      if (startOffset > t1.get$length(data))
        throw A.wrapException(B.MoneroCryptoException_8wU);
      $N = t1.get$length(data) - startOffset;
      if ($N > t1.get$length(data) - startOffset)
        throw A.wrapException(B.MoneroCryptoException_8wU);
      cache = J.JSArray_JSArray$allocateGrowable($N, type$.GroupElementCached);
      for (t2 = type$.int, _i = 0; _i < $N; ++_i)
        cache[_i] = new A.GroupElementCached(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      for (i = 0; i < $N; ++i) {
        if (!(i < cache.length))
          return A.ioore(cache, i);
        A.CryptoOps_geP3ToCached(cache[i], t1.$index(data, i + startOffset).point);
      }
      return cache;
    },
    Multiexp__strausP3(data, localCache, step) {
      var t1, cached, p1, t2, t3, digits, j, bytes, t4, t5, i, t6, t7, t8, maxScalar, startI, resp3, startOffset, numPoints, bandP3, digit, i0, t9, t10, t11, p2, t12, t13, t14, t15, p10;
      if (step == null || step === 0)
        step = 192;
      localCache = A.StrausCachedData_StrausCachedData$init(data);
      t1 = type$.int;
      cached = new A.GroupElementCached(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      p1 = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      t2 = J.getInterceptor$asx(data);
      t3 = 64 * t2.get$length(data);
      digits = A.List_List$filled(t3, 0, false, t1);
      for (j = 0; j < t2.get$length(data); ++j) {
        bytes = t2.$index(data, j).scalar;
        for (t4 = j * 64, t5 = bytes.length, i = 0; i < 64; i += 2) {
          t6 = t4 + i;
          t7 = B.JSInt_methods._tdivFast$1(i, 2);
          if (!(t7 < t5))
            return A.ioore(bytes, t7);
          t8 = bytes[t7];
          if (typeof t8 !== "number")
            return t8.$and();
          B.JSArray_methods.$indexSet(digits, t6, t8 & 15);
          t7 = bytes[t7];
          if (typeof t7 !== "number")
            return t7.$shr();
          B.JSArray_methods.$indexSet(digits, t6 + 1, B.JSNumber_methods._shrOtherPositive$1(t7, 4));
        }
      }
      maxScalar = A.RCT_zero(true);
      for (i = 0; i < t2.get$length(data); ++i)
        if (A.Multiexp__isLowerThan(maxScalar, t2.$index(data, i).scalar))
          maxScalar = t2.$index(data, i).scalar;
      startI = 0;
      while (true) {
        if (!(startI < 256 && !A.Multiexp__isLowerThan(maxScalar, A.Multiexp__pow2(startI))))
          break;
        startI += 4;
      }
      resp3 = B.GroupElementP3_ifE.clone$0();
      t4 = startI >= 4;
      i = startI - 4;
      startOffset = 0;
      while (startOffset < t2.get$length(data)) {
        numPoints = B.JSInt_methods.clamp$2(t2.get$length(data) - startOffset, 0, step);
        bandP3 = B.GroupElementP3_ifE.clone$0();
        if (t4) {
          for (t5 = startOffset + numPoints, j = startOffset; j < t5; ++j) {
            t6 = j * 64 + B.JSInt_methods._tdivFast$1(i, 4);
            if (!(t6 >= 0 && t6 < t3))
              return A.ioore(digits, t6);
            digit = digits[t6];
            if (digit !== 0) {
              t6 = localCache.multiples;
              if (!(j >= 0 && j < t6.length))
                return A.ioore(t6, j);
              A.CryptoOps_geAdd(p1, bandP3, J.$index$asx(t6[j], digit - 1));
              A.CryptoOps_geP1P1ToP3(bandP3, p1);
            }
          }
          i0 = i;
        } else
          i0 = startI;
        for (t5 = startOffset + numPoints, t6 = bandP3.x, t7 = bandP3.y, t8 = bandP3.z; i0 >= 4;) {
          t9 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
          t10 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
          t11 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
          p2 = new A.GroupElementP2(t9, t10, t11);
          A.CryptoOps_feCopy(t9, t6);
          A.CryptoOps_feCopy(t10, t7);
          A.CryptoOps_feCopy(t11, t8);
          for (j = 0; j < 4; ++j) {
            t12 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
            t13 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
            t14 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
            t15 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
            p10 = new A.GroupElementP1P1(t12, t13, t14, t15);
            A.CryptoOps_geP2Dbl(p10, p2);
            if (j === 3)
              A.CryptoOps_geP1P1ToP3(bandP3, p10);
            else {
              A.CryptoOps_feMul(t9, t12, t15);
              A.CryptoOps_feMul(t10, t13, t14);
              A.CryptoOps_feMul(t11, t14, t15);
            }
          }
          i0 -= 4;
          for (j = startOffset; j < t5; ++j) {
            t9 = j * 64 + B.JSInt_methods._tdivFast$1(i0, 4);
            if (!(t9 >= 0 && t9 < t3))
              return A.ioore(digits, t9);
            digit = digits[t9];
            if (digit !== 0) {
              t9 = localCache.multiples;
              if (!(j >= 0 && j < t9.length))
                return A.ioore(t9, j);
              A.CryptoOps_geAdd(p1, bandP3, J.$index$asx(t9[j], digit - 1));
              A.CryptoOps_geP1P1ToP3(bandP3, p1);
            }
          }
        }
        A.CryptoOps_geP3ToCached(cached, bandP3);
        A.CryptoOps_geAdd(p1, resp3, cached);
        A.CryptoOps_geP1P1ToP3(resp3, p1);
        if (typeof step !== "number")
          return A.iae(step);
        startOffset += step;
      }
      return resp3;
    },
    Multiexp_straus(data, localCache, step) {
      return A.CryptoOps_geP3Tobytes_(A.Multiexp__strausP3(data, localCache, step));
    },
    Multiexp_getPippengerC(n) {
      if (n <= 13)
        return 2;
      if (n <= 29)
        return 3;
      if (n <= 83)
        return 4;
      if (n <= 185)
        return 5;
      if (n <= 465)
        return 6;
      if (n <= 1180)
        return 7;
      if (n <= 2295)
        return 8;
      return 9;
    },
    Multiexp__isBitSet(k, n) {
      var t1;
      if (n >= 256)
        return 0;
      t1 = B.JSInt_methods._shrOtherPositive$1(n, 3);
      if (!(t1 < k.length))
        return A.ioore(k, t1);
      t1 = k[t1];
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1 << (n & 7)) >>> 0;
    },
    Multiexp_pippenger(c, cacheSize, data, localCache) {
      return A.CryptoOps_geP3Tobytes_(A.Multiexp__pippengerP3(c, cacheSize, data, localCache));
    },
    Multiexp__pippengerP3(c, cacheSize, data, localCache) {
      var result, _length, buckets, t1, _i, bucketsInit, t2, localCache2, maxScalar, i, groups, t3, k, resultInit, k0, t4, t5, t6, p2, i0, t7, t8, t9, t10, p1, bucket, j, pail, pailInit, cached;
      if (c === 0)
        c = A.Multiexp_getPippengerC(J.get$length$asx(data));
      result = B.GroupElementP3_ifE.clone$0();
      _length = B.JSInt_methods._shlPositive$1(1, c);
      buckets = J.JSArray_JSArray$allocateGrowable(_length, type$.GroupElementP3);
      for (t1 = type$.int, _i = 0; _i < _length; ++_i)
        buckets[_i] = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      bucketsInit = A.List_List$filled(512, false, false, type$.bool);
      localCache = A.Multiexp_pippengerInitCache(data, 0);
      t2 = J.getInterceptor$asx(data);
      localCache2 = t2.get$length(data) > cacheSize ? A.Multiexp_pippengerInitCache(data, cacheSize) : null;
      maxScalar = A.RCT_zero(true);
      for (i = 0; i < t2.get$length(data); ++i)
        if (A.Multiexp__isLowerThan(maxScalar, t2.$index(data, i).scalar))
          maxScalar = A.ListHelper_clone(t2.$index(data, i).scalar, false, t1);
      groups = 0;
      while (true) {
        if (!(groups < 256 && !A.Multiexp__isLowerThan(maxScalar, A.Multiexp__pow2(groups))))
          break;
        ++groups;
      }
      groups = B.JSInt_methods.$tdiv(groups + c - 1, c);
      for (t3 = c - 1, i = _length - 1, k = groups, resultInit = false; k0 = k - 1, k > 0; k = k0) {
        if (resultInit) {
          t4 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
          t5 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
          t6 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
          p2 = new A.GroupElementP2(t4, t5, t6);
          A.CryptoOps_feCopy(t4, result.x);
          A.CryptoOps_feCopy(t5, result.y);
          A.CryptoOps_feCopy(t6, result.z);
          for (i0 = 0; i0 < c; ++i0) {
            t7 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
            t8 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
            t9 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
            t10 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
            p1 = new A.GroupElementP1P1(t7, t8, t9, t10);
            A.CryptoOps_geP2Dbl(p1, p2);
            if (i0 === t3)
              A.CryptoOps_geP1P1ToP3(result, p1);
            else {
              A.CryptoOps_feMul(t4, t7, t10);
              A.CryptoOps_feMul(t5, t8, t9);
              A.CryptoOps_feMul(t6, t9, t10);
            }
          }
        }
        for (i0 = 0; i0 < _length; ++i0)
          B.JSArray_methods.$indexSet(bucketsInit, i0, false);
        for (t4 = k0 * c, i0 = 0; i0 < t2.get$length(data); ++i0) {
          for (bucket = 0, j = 0; j < c; ++j)
            if (A.Multiexp__isBitSet(t2.$index(data, i0).scalar, t4 + j) !== 0)
              bucket = (bucket | B.JSInt_methods._shlPositive$1(1, j)) >>> 0;
          if (bucket === 0)
            continue;
          if (!(bucket >= 0 && bucket < 512))
            return A.ioore(bucketsInit, bucket);
          if (bucketsInit[bucket]) {
            t5 = buckets.length;
            if (i0 < cacheSize) {
              if (!(bucket < t5))
                return A.ioore(buckets, bucket);
              t5 = buckets[bucket];
              if (!(i0 < localCache.length))
                return A.ioore(localCache, i0);
              t6 = localCache[i0];
              p1 = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
              A.CryptoOps_geAdd(p1, t5, t6);
              A.CryptoOps_geP1P1ToP3(t5, p1);
            } else {
              if (!(bucket < t5))
                return A.ioore(buckets, bucket);
              t5 = buckets[bucket];
              t6 = i0 - cacheSize;
              if (!(t6 >= 0 && t6 < localCache2.length))
                return A.ioore(localCache2, t6);
              t6 = localCache2[t6];
              p1 = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
              A.CryptoOps_geAdd(p1, t5, t6);
              A.CryptoOps_geP1P1ToP3(t5, p1);
            }
          } else {
            B.JSArray_methods.$indexSet(buckets, bucket, t2.$index(data, i0).point.clone$0());
            B.JSArray_methods.$indexSet(bucketsInit, bucket, true);
          }
        }
        pail = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
        for (i0 = i, pailInit = false; i0 > 0; --i0) {
          if (!(i0 < 512))
            return A.ioore(bucketsInit, i0);
          if (bucketsInit[i0]) {
            t4 = buckets.length;
            if (pailInit) {
              if (!(i0 < t4))
                return A.ioore(buckets, i0);
              t4 = buckets[i0];
              cached = new A.GroupElementCached(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
              A.CryptoOps_geP3ToCached(cached, t4);
              p1 = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
              A.CryptoOps_geAdd(p1, pail, cached);
              A.CryptoOps_geP1P1ToP3(pail, p1);
            } else {
              if (!(i0 < t4))
                return A.ioore(buckets, i0);
              pail = buckets[i0].clone$0();
              pailInit = true;
            }
          }
          if (pailInit)
            if (resultInit) {
              cached = new A.GroupElementCached(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
              A.CryptoOps_geP3ToCached(cached, pail);
              p1 = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
              A.CryptoOps_geAdd(p1, result, cached);
              A.CryptoOps_geP1P1ToP3(result, p1);
            } else {
              result = pail.clone$0();
              resultInit = true;
            }
        }
      }
      return result;
    },
    StrausCachedData: function StrausCachedData(t0, t1) {
      this.multiples = t0;
      this.size = t1;
    },
    StrausCachedData_closure: function StrausCachedData_closure() {
    },
    RCTGeneratorUtils_getPreMlsagHash(rv) {
      var t4, inputs, kv, _i, p, n, r, _null = null,
        t1 = type$.JSArray_List_int,
        hashes = A._setArrayType([], t1),
        t2 = rv.signature,
        t3 = t2.message;
      if (t3 != null) {
        t4 = t2.mixRing;
        t4 = t4 == null ? _null : t4.length === 0;
        t4 = t4 !== false;
      } else
        t4 = true;
      if (t4)
        throw A.wrapException(B.MoneroCryptoException_K12);
      t3.toString;
      t4 = t2.mixRing;
      t4.toString;
      B.JSArray_methods.add$1(hashes, t3);
      t3 = t2.type;
      inputs = t4.length;
      if (!t3.get$isSimple()) {
        if (0 >= inputs)
          return A.ioore(t4, 0);
        inputs = J.get$length$asx(t4[0]);
      }
      B.JSArray_methods.add$1(hashes, A.Keccack_hash(A.RCTSignature_layout(true, inputs, _null, t2.get$ecdhInfo().length, _null, _null).serialize$1(rv.toLayoutStruct$0()), 32));
      kv = A._setArrayType([], t1);
      if (t3 === B.RCTType_rctTypeBulletproof_3 || t3 === B.RCTType_rctTypeBulletproof2_4 || t3 === B.RCTType_rctTypeCLSAG_5)
        for (t1 = rv.rctSigPrunable.cast$1$0(0, type$.BulletproofPrunable).get$bulletproof(), t2 = t1.length, _i = 0; _i < t2; ++_i) {
          p = t1[_i];
          B.JSArray_methods.add$1(kv, p.a);
          B.JSArray_methods.add$1(kv, p.s);
          B.JSArray_methods.add$1(kv, p.t1);
          B.JSArray_methods.add$1(kv, p.t2);
          B.JSArray_methods.add$1(kv, p.taux);
          B.JSArray_methods.add$1(kv, p.mu);
          for (t3 = p.l, t4 = t3.length, n = 0; n < t4; ++n)
            B.JSArray_methods.add$1(kv, t3[n]);
          for (t3 = p.r, t4 = t3.length, n = 0; n < t4; ++n)
            B.JSArray_methods.add$1(kv, t3[n]);
          B.JSArray_methods.add$1(kv, p.a_);
          B.JSArray_methods.add$1(kv, p.b);
          B.JSArray_methods.add$1(kv, p.t);
        }
      else {
        t1 = rv.rctSigPrunable;
        if (t3 === B.RCTType_rctTypeBulletproofPlus_6)
          for (t1 = t1.cast$1$0(0, type$.RctSigPrunableBulletproofPlus).bulletproofPlus, t2 = t1.length, _i = 0; _i < t2; ++_i) {
            p = t1[_i];
            B.JSArray_methods.add$1(kv, p.a);
            B.JSArray_methods.add$1(kv, p.a1);
            B.JSArray_methods.add$1(kv, p.b);
            B.JSArray_methods.add$1(kv, p.r1);
            B.JSArray_methods.add$1(kv, p.s1);
            B.JSArray_methods.add$1(kv, p.d1);
            for (t3 = p.l, t4 = t3.length, n = 0; n < t4; ++n)
              B.JSArray_methods.add$1(kv, t3[n]);
            for (t3 = p.r, t4 = t3.length, n = 0; n < t4; ++n)
              B.JSArray_methods.add$1(kv, t3[n]);
          }
        else
          for (t1 = t1.cast$1$0(0, type$.RctSigPrunableRangeSigs).rangeSig, t2 = t1.length, _i = 0; _i < t2; ++_i) {
            r = t1[_i];
            for (n = 0; n < 64; ++n)
              B.JSArray_methods.add$1(kv, J.$index$asx(r.asig.s0, n));
            for (n = 0; n < 64; ++n)
              B.JSArray_methods.add$1(kv, J.$index$asx(r.asig.s1, n));
            B.JSArray_methods.add$1(kv, r.asig.ee);
            for (t3 = r.ci, t4 = J.getInterceptor$asx(t3), n = 0; n < 64; ++n)
              B.JSArray_methods.add$1(kv, t4.$index(t3, n));
          }
      }
      t1 = type$.Iterable_int_Function_List_int;
      t2 = type$.ExpandIterable_of_List_int_and_int;
      t3 = t2._eval$1("Iterable.E");
      B.JSArray_methods.add$1(hashes, A.Keccack_hash(A.List_List$of(new A.ExpandIterable(kv, t1._as(new A.RCTGeneratorUtils_getPreMlsagHash_closure()), t2), true, t3), 32));
      return A.Keccack_hash(A.List_List$of(new A.ExpandIterable(hashes, t1._as(new A.RCTGeneratorUtils_getPreMlsagHash_closure0()), t2), true, t3), 32);
    },
    RCTGeneratorUtils__proveRangeBulletproofPlus($C, masks, amounts, sk) {
      var proof, t1, t2, i;
      if (amounts.length !== sk.length)
        throw A.wrapException(B.MoneroCryptoException_Vsy);
      proof = A.BulletproofsPlusGenerator_bulletproofPlusPROVEAmouts(amounts, masks);
      t1 = proof.v;
      if (t1.length !== amounts.length)
        throw A.wrapException(B.MoneroCryptoException_QcL);
      for (t2 = type$.int, i = 0; i < t1.length; ++i)
        B.JSArray_methods.$indexSet($C, i, A.ListHelper_clone(t1[i], false, t2));
      return proof;
    },
    RCTGeneratorUtils__fakeProveRangeBulletproofPlus($C, masks, amounts) {
      var t1, lR, i, sv8, t2, rv, b2, t3, t4, t5, t6;
      for (t1 = amounts.length, lR = 0; B.JSInt_methods._shlPositive$1(1, lR) < t1;)
        ++lR;
      lR += 6;
      for (t1 = type$.int, i = 0; i < amounts.length; ++i) {
        B.JSArray_methods.$indexSet(masks, i, A.RCT_identity(false));
        sv8 = A.RCT_zero(true);
        if (!(i < amounts.length))
          return A.ioore(amounts, i);
        A.CryptoOps_scMul(sv8, A.BigintUtils_toBytes(A.BigIntHelper_get_asUint64(amounts[i]), 32, B.C_Endian0), B.List_D3e);
        if (!(i < $C.length))
          return A.ioore($C, i);
        t2 = $C[i];
        rv = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
        b2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
        if (A.CryptoOps_geFromBytesVartime_(b2, B.List_Qm0) !== 0)
          A.throwExpression(B.MoneroCryptoException_tEe);
        A.CryptoOps_geDoubleScalarMultBaseVartime(rv, sv8, b2, B.List_D3e);
        A.CryptoOps_geToBytes(t2, rv);
      }
      t1 = A.RCT_identity(false);
      t2 = A.RCT_identity(false);
      t3 = A.RCT_identity(false);
      t4 = A.RCT_identity(false);
      t5 = A.RCT_identity(false);
      t6 = type$.List_int;
      return A.BulletproofPlus$(t1, t2, t3, A.RCT_identity(false), A.List_List$filled(lR, A.RCT_identity(false), false, t6), A.List_List$filled(lR, A.RCT_identity(false), false, t6), t4, t5, A.List_List$filled(amounts.length, A.RCT_identity(false), false, t6));
    },
    RCTGeneratorUtils_genRctSimple(aResult, amountKeys, createLinkable, destinations, inSk, inamounts, index, message, mixRing, outSk, outamounts, txnFee, $S, $P) {
      var t2, t3, t4, n, t5, outPk, rangeSig, bulletProofPlus, bulletProof, ecdh, i, mask, outSkMask, result, keys, _length, masks, h, out, $C, _i, t6, t7, t8, t9, p2, t10, p1, t11, t12, t13, u, res, sumout, result0, pseudoOuts, mgs, clsag, sumpouts, _list, rv, b2, signature, fullMessage,
        t1 = inamounts.length;
      if (t1 === 0)
        throw A.wrapException(B.MoneroCryptoException_4ae);
      t2 = inSk.length;
      if (t1 !== t2)
        throw A.wrapException(B.MoneroCryptoException_j3h);
      t1 = outamounts.length;
      t3 = destinations.length;
      if (t1 !== t3)
        throw A.wrapException(B.MoneroCryptoException_KTP);
      t1 = amountKeys.length;
      if (t1 !== t3)
        throw A.wrapException(B.MoneroCryptoException_Cb0);
      t3 = index.length;
      if (t3 !== t2)
        throw A.wrapException(B.MoneroCryptoException_gbg);
      t4 = mixRing.length;
      if (t4 !== t2)
        throw A.wrapException(B.MoneroCryptoException_7JZ);
      for (n = 0; n < t4; ++n) {
        if (!(n < t3))
          return A.ioore(index, n);
        t2 = index[n];
        t5 = mixRing[n].length;
        if (typeof t2 !== "number")
          return t2.$ge();
        if (t2 >= t5)
          throw A.wrapException(B.MoneroCryptoException_OXJ);
      }
      outPk = A._setArrayType([], type$.JSArray_CtKey);
      rangeSig = A._setArrayType([], type$.JSArray_RangeSig);
      bulletProofPlus = A._setArrayType([], type$.JSArray_BulletproofPlus);
      bulletProof = A._setArrayType([], type$.JSArray_Bulletproof);
      ecdh = A._setArrayType([], type$.JSArray_EcdhInfo);
      for (t2 = type$.int, i = 0; i < destinations.length; ++i) {
        mask = A.RCT_zero(true);
        if (!(i < outSk.length))
          return A.ioore(outSk, i);
        outSkMask = A.ListHelper_clone(outSk[i].mask, false, t2);
        if (!(i < outSk.length))
          return A.ioore(outSk, i);
        B.JSArray_methods.$indexSet(outSk, i, outSk[i].copyWith$1$mask(outSkMask));
        if (!(i < destinations.length))
          return A.ioore(destinations, i);
        t3 = A.ListHelper_clone(destinations[i], false, t2);
        A.BytesUtils_validateListOfBytes(t3);
        result = A.List_List$from(t3, false, t2);
        result.fixed$length = Array;
        result.immutable$list = Array;
        t3 = A.ListHelper_exceptedLen(result, 32, t2);
        A.BytesUtils_validateListOfBytes(mask);
        result = A.List_List$from(mask, false, t2);
        result.fixed$length = Array;
        result.immutable$list = Array;
        B.JSArray_methods.add$1(outPk, new A.CtKey(t3, A.ListHelper_exceptedLen(result, 32, t2)));
      }
      t3 = A._arrayInstanceType(amountKeys);
      t4 = t3._eval$1("MappedListIterable<1,List<int>>");
      keys = A.List_List$of(new A.MappedListIterable(amountKeys, t3._eval$1("List<int>(1)")._as(new A.RCTGeneratorUtils_genRctSimple_closure()), t4), true, t4._eval$1("ListIterable.E"));
      _length = outamounts.length;
      t4 = type$.List_int;
      masks = J.JSArray_JSArray$allocateGrowable(_length, t4);
      for (i = 0; i < _length; ++i) {
        if (!(i < keys.length))
          return A.ioore(keys, i);
        t3 = keys[i];
        t5 = A.List_List$of(new A.CodeUnits("commitment_mask"), true, t2);
        B.JSArray_methods.addAll$1(t5, t3);
        h = A.Keccack$(32);
        h.super$_Keccack$update(t4._as(t5));
        out = A.List_List$filled(h.digestLength, 0, false, t2);
        t4._as(out);
        if (!h._finished)
          h._padAndPermute$1(1);
        else
          h._pos = 0;
        h._squeeze$1(out);
        h.reset$0();
        A.CryptoOps_scReduce32(out);
        masks[i] = out;
      }
      _length = outamounts.length;
      $C = J.JSArray_JSArray$allocateGrowable(_length, t4);
      for (_i = 0; _i < _length; ++_i)
        $C[_i] = A.RCT_zero(true);
      B.JSArray_methods.add$1(bulletProofPlus, A.RCTGeneratorUtils__proveRangeBulletproofPlus($C, masks, outamounts, keys));
      for (i = 0; i < outamounts.length; ++i) {
        if (!(i < $C.length))
          return A.ioore($C, i);
        t3 = $C[i];
        t5 = new A.FieldElement(A.List_List$filled(10, 0, false, t2));
        t6 = new A.FieldElement(A.List_List$filled(10, 0, false, t2));
        t7 = new A.FieldElement(A.List_List$filled(10, 0, false, t2));
        if (A.CryptoOps_geFromBytesVartime_(new A.GroupElementP3(t5, t6, t7, new A.FieldElement(A.List_List$filled(10, 0, false, t2))), t3) !== 0)
          A.throwExpression(B.MoneroCryptoException_43h);
        t3 = new A.FieldElement(A.List_List$filled(10, 0, false, t2));
        t8 = new A.FieldElement(A.List_List$filled(10, 0, false, t2));
        t9 = new A.FieldElement(A.List_List$filled(10, 0, false, t2));
        p2 = new A.GroupElementP2(t3, t8, t9);
        A.CryptoOps_feCopy(t3, t5);
        A.CryptoOps_feCopy(t8, t6);
        A.CryptoOps_feCopy(t9, t7);
        t7 = new A.FieldElement(A.List_List$filled(10, 0, false, t2));
        t6 = new A.FieldElement(A.List_List$filled(10, 0, false, t2));
        t5 = new A.FieldElement(A.List_List$filled(10, 0, false, t2));
        t10 = new A.FieldElement(A.List_List$filled(10, 0, false, t2));
        p1 = new A.GroupElementP1P1(t7, t6, t5, t10);
        t11 = new A.FieldElement(A.List_List$filled(10, 0, false, t2));
        t12 = new A.FieldElement(A.List_List$filled(10, 0, false, t2));
        t13 = new A.FieldElement(A.List_List$filled(10, 0, false, t2));
        u = new A.GroupElementP2(t11, t12, t13);
        A.CryptoOps_geP2Dbl(p1, p2);
        A.CryptoOps_feMul(t11, t7, t10);
        A.CryptoOps_feMul(t12, t6, t5);
        A.CryptoOps_feMul(t13, t5, t10);
        A.CryptoOps_geP2Dbl(p1, u);
        A.CryptoOps_feMul(t11, t7, t10);
        A.CryptoOps_feMul(t12, t6, t5);
        A.CryptoOps_feMul(t13, t5, t10);
        A.CryptoOps_geP2Dbl(p1, u);
        A.CryptoOps_feMul(t3, t7, t10);
        A.CryptoOps_feMul(t8, t6, t5);
        A.CryptoOps_feMul(t9, t5, t10);
        res = A.RCT_zero(true);
        A.CryptoOps_geToBytes(res, p2);
        if (!(i < outPk.length))
          return A.ioore(outPk, i);
        B.JSArray_methods.$indexSet(outPk, i, outPk[i].copyWith$1$mask(res));
        if (!(i < outSk.length))
          return A.ioore(outSk, i);
        t10 = outSk[i];
        if (!(i < masks.length))
          return A.ioore(masks, i);
        B.JSArray_methods.$indexSet(outSk, i, t10.copyWith$1$mask(masks[i]));
      }
      sumout = A.RCT_zero(true);
      for (i = 0; i < outSk.length; ++i) {
        A.CryptoOps_scAdd(sumout, outSk[i].mask, sumout);
        if (!(i < outSk.length))
          return A.ioore(outSk, i);
        t3 = outSk[i].mask;
        if (!(i < outamounts.length))
          return A.ioore(outamounts, i);
        t5 = A.BigintUtils_toBytes(A.BigIntHelper_get_asUint64(outamounts[i]), 32, B.C_Endian0);
        A.BytesUtils_validateListOfBytes(t3);
        result = A.List_List$from(t3, false, t2);
        result.fixed$length = Array;
        result.immutable$list = Array;
        A.BytesUtils_validateListOfBytes(t5);
        result0 = A.List_List$from(t5, false, t2);
        result0.fixed$length = Array;
        result0.immutable$list = Array;
        if (!(i < t1))
          return A.ioore(amountKeys, i);
        B.JSArray_methods.add$1(ecdh, A.RCT_ecdhEncode(new A.EcdhTuple(result, result0, B.EcdhInfoVersion_V2), amountKeys[i]));
      }
      _length = inamounts.length;
      pseudoOuts = J.JSArray_JSArray$allocateGrowable(_length, t4);
      for (_i = 0; _i < _length; ++_i)
        pseudoOuts[_i] = A.RCT_zero(true);
      mgs = A._setArrayType([], type$.JSArray_MgSig);
      clsag = A._setArrayType([], type$.JSArray_Clsag);
      sumpouts = A.RCT_zero(true);
      _length = inamounts.length;
      _list = J.JSArray_JSArray$allocateGrowable(_length, t4);
      for (_i = 0; _i < _length; ++_i)
        _list[_i] = A.RCT_zero(true);
      if (_list.length !== inamounts.length)
        throw A.wrapException(B.MoneroCryptoException_SzJ);
      for (i = 0; i < inamounts.length - 1; ++i) {
        if (!(i < _list.length))
          return A.ioore(_list, i);
        A.RCT_skGen(_list[i]);
        if (!(i < _list.length))
          return A.ioore(_list, i);
        A.CryptoOps_scAdd(sumpouts, _list[i], sumpouts);
        if (!(i < pseudoOuts.length))
          return A.ioore(pseudoOuts, i);
        t1 = pseudoOuts[i];
        if (!(i < _list.length))
          return A.ioore(_list, i);
        t3 = _list[i];
        if (!(i < inamounts.length))
          return A.ioore(inamounts, i);
        t4 = A.BigintUtils_toBytes(A.BigIntHelper_get_asUint64(inamounts[i]), 32, B.C_Endian0);
        rv = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        b2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        if (A.CryptoOps_geFromBytesVartime_(b2, B.List_Qm0) !== 0)
          A.throwExpression(B.MoneroCryptoException_tEe);
        A.CryptoOps_geDoubleScalarMultBaseVartime(rv, t4, b2, t3);
        A.CryptoOps_geToBytes(t1, rv);
      }
      if (!(i < _list.length))
        return A.ioore(_list, i);
      A.CryptoOps_scSub(_list[i], sumout, sumpouts);
      if (!(i < pseudoOuts.length))
        return A.ioore(pseudoOuts, i);
      t1 = pseudoOuts[i];
      if (!(i < _list.length))
        return A.ioore(_list, i);
      t2 = _list[i];
      if (!(i < inamounts.length))
        return A.ioore(inamounts, i);
      A.RCT_addKeys2(t1, t2, A.BigintUtils_toBytes(A.BigIntHelper_get_asUint64(inamounts[i]), 32, B.C_Endian0), B.List_Qm0);
      signature = A.RCTGeneratorUtils_buildSignature(bulletProof, bulletProofPlus, clsag, ecdh, message, mgs, mixRing, outPk, pseudoOuts, rangeSig, txnFee, B.RCTType_rctTypeBulletproofPlus_6, $S, $P);
      if (!createLinkable)
        return signature;
      fullMessage = A.RCTGeneratorUtils_getPreMlsagHash(signature);
      for (t1 = signature.signature.mixRing, i = 0; i < inamounts.length; ++i) {
        if (!(i < t1.length))
          return A.ioore(t1, i);
        t2 = t1[i];
        if (!(i < inSk.length))
          return A.ioore(inSk, i);
        t3 = inSk[i];
        if (!(i < _list.length))
          return A.ioore(_list, i);
        t4 = _list[i];
        if (!(i < pseudoOuts.length))
          return A.ioore(pseudoOuts, i);
        t5 = pseudoOuts[i];
        if (!(i < index.length))
          return A.ioore(index, i);
        B.JSArray_methods.add$1(clsag, A.CLSAGUtins_prove(fullMessage, t2, t3, t4, t5, index[i]));
      }
      return A.RCTGeneratorUtils_buildSignature(bulletProof, bulletProofPlus, clsag, ecdh, message, mgs, mixRing, outPk, pseudoOuts, rangeSig, txnFee, B.RCTType_rctTypeBulletproofPlus_6, $S, $P);
    },
    RCTGeneratorUtils_genFakeRctSimple(aResult, amountKeys, createLinkable, destinations, inSk, inamounts, index, message, mixRing, outSk, outamounts, txnFee, $S, $P) {
      var t2, t3, t4, n, t5, outPk, rangeSig, bulletProofPlus, bulletProof, ecdh, i, mask, outSkMask, result, masks, _length, $C, _i, sumout, result0, pseudoOuts, mgs, clsag, sumpouts, _list, rv, b2,
        t1 = inamounts.length;
      if (t1 === 0)
        throw A.wrapException(B.MoneroCryptoException_4ae);
      t2 = inSk.length;
      if (t1 !== t2)
        throw A.wrapException(B.MoneroCryptoException_j3h);
      t1 = outamounts.length;
      t3 = destinations.length;
      if (t1 !== t3)
        throw A.wrapException(B.MoneroCryptoException_KTP);
      t1 = amountKeys.length;
      if (t1 !== t3)
        throw A.wrapException(B.MoneroCryptoException_Cb0);
      t3 = index.length;
      if (t3 !== t2)
        throw A.wrapException(B.MoneroCryptoException_gbg);
      t4 = mixRing.length;
      if (t4 !== t2)
        throw A.wrapException(B.MoneroCryptoException_7JZ);
      for (n = 0; n < t4; ++n) {
        if (!(n < t3))
          return A.ioore(index, n);
        t2 = index[n];
        t5 = mixRing[n].length;
        if (typeof t2 !== "number")
          return t2.$ge();
        if (t2 >= t5)
          throw A.wrapException(B.MoneroCryptoException_OXJ);
      }
      outPk = A._setArrayType([], type$.JSArray_CtKey);
      rangeSig = A._setArrayType([], type$.JSArray_RangeSig);
      bulletProofPlus = A._setArrayType([], type$.JSArray_BulletproofPlus);
      bulletProof = A._setArrayType([], type$.JSArray_Bulletproof);
      ecdh = A._setArrayType([], type$.JSArray_EcdhInfo);
      for (t2 = type$.int, i = 0; i < destinations.length; ++i) {
        mask = A.RCT_zero(true);
        if (!(i < outSk.length))
          return A.ioore(outSk, i);
        outSkMask = A.ListHelper_clone(outSk[i].mask, false, t2);
        if (!(i < outSk.length))
          return A.ioore(outSk, i);
        B.JSArray_methods.$indexSet(outSk, i, outSk[i].copyWith$1$mask(outSkMask));
        if (!(i < destinations.length))
          return A.ioore(destinations, i);
        t3 = A.ListHelper_clone(destinations[i], false, t2);
        A.BytesUtils_validateListOfBytes(t3);
        result = A.List_List$from(t3, false, t2);
        result.fixed$length = Array;
        result.immutable$list = Array;
        t3 = A.ListHelper_exceptedLen(result, 32, t2);
        A.BytesUtils_validateListOfBytes(mask);
        result = A.List_List$from(mask, false, t2);
        result.fixed$length = Array;
        result.immutable$list = Array;
        B.JSArray_methods.add$1(outPk, new A.CtKey(t3, A.ListHelper_exceptedLen(result, 32, t2)));
      }
      t3 = type$.List_int;
      masks = A.List_List$filled(outamounts.length, A.RCT_identity(true), false, t3);
      _length = outamounts.length;
      $C = J.JSArray_JSArray$allocateGrowable(_length, t3);
      for (_i = 0; _i < _length; ++_i)
        $C[_i] = A.RCT_identity(true);
      B.JSArray_methods.add$1(bulletProofPlus, A.RCTGeneratorUtils__fakeProveRangeBulletproofPlus($C, masks, outamounts));
      sumout = A.RCT_zero(true);
      for (i = 0; i < outSk.length; ++i) {
        A.CryptoOps_scAdd(sumout, outSk[i].mask, sumout);
        if (!(i < outSk.length))
          return A.ioore(outSk, i);
        t4 = outSk[i].mask;
        if (!(i < outamounts.length))
          return A.ioore(outamounts, i);
        t5 = A.BigintUtils_toBytes(A.BigIntHelper_get_asUint64(outamounts[i]), 32, B.C_Endian0);
        A.BytesUtils_validateListOfBytes(t4);
        result = A.List_List$from(t4, false, t2);
        result.fixed$length = Array;
        result.immutable$list = Array;
        A.BytesUtils_validateListOfBytes(t5);
        result0 = A.List_List$from(t5, false, t2);
        result0.fixed$length = Array;
        result0.immutable$list = Array;
        if (!(i < t1))
          return A.ioore(amountKeys, i);
        B.JSArray_methods.add$1(ecdh, A.RCT_ecdhEncode(new A.EcdhTuple(result, result0, B.EcdhInfoVersion_V2), amountKeys[i]));
      }
      _length = inamounts.length;
      pseudoOuts = J.JSArray_JSArray$allocateGrowable(_length, t3);
      for (_i = 0; _i < _length; ++_i)
        pseudoOuts[_i] = A.RCT_zero(true);
      mgs = A._setArrayType([], type$.JSArray_MgSig);
      clsag = A._setArrayType([], type$.JSArray_Clsag);
      sumpouts = A.RCT_zero(true);
      _length = inamounts.length;
      _list = J.JSArray_JSArray$allocateGrowable(_length, t3);
      for (_i = 0; _i < _length; ++_i)
        _list[_i] = A.RCT_zero(true);
      if (_list.length !== inamounts.length)
        throw A.wrapException(B.MoneroCryptoException_SzJ);
      for (i = 0; i < inamounts.length - 1; ++i) {
        if (!(i < _list.length))
          return A.ioore(_list, i);
        A.RCT_skGen(_list[i]);
        if (!(i < _list.length))
          return A.ioore(_list, i);
        A.CryptoOps_scAdd(sumpouts, _list[i], sumpouts);
        if (!(i < pseudoOuts.length))
          return A.ioore(pseudoOuts, i);
        t1 = pseudoOuts[i];
        if (!(i < _list.length))
          return A.ioore(_list, i);
        t4 = _list[i];
        if (!(i < inamounts.length))
          return A.ioore(inamounts, i);
        t5 = A.BigintUtils_toBytes(A.BigIntHelper_get_asUint64(inamounts[i]), 32, B.C_Endian0);
        rv = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        b2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        if (A.CryptoOps_geFromBytesVartime_(b2, B.List_Qm0) !== 0)
          A.throwExpression(B.MoneroCryptoException_tEe);
        A.CryptoOps_geDoubleScalarMultBaseVartime(rv, t5, b2, t4);
        A.CryptoOps_geToBytes(t1, rv);
      }
      if (!(i < _list.length))
        return A.ioore(_list, i);
      A.CryptoOps_scSub(_list[i], sumout, sumpouts);
      if (!(i < pseudoOuts.length))
        return A.ioore(pseudoOuts, i);
      t1 = pseudoOuts[i];
      if (!(i < _list.length))
        return A.ioore(_list, i);
      t2 = _list[i];
      if (!(i < inamounts.length))
        return A.ioore(inamounts, i);
      A.RCT_addKeys2(t1, t2, A.BigintUtils_toBytes(A.BigIntHelper_get_asUint64(inamounts[i]), 32, B.C_Endian0), B.List_Qm0);
      for (t1 = A.RCTGeneratorUtils_buildSignature(bulletProof, bulletProofPlus, clsag, ecdh, message, mgs, mixRing, outPk, pseudoOuts, rangeSig, txnFee, B.RCTType_rctTypeBulletproofPlus_6, $S, $P).signature.mixRing, i = 0; i < inamounts.length; ++i) {
        if (!(i < t1.length))
          return A.ioore(t1, i);
        t2 = A.List_List$filled(J.get$length$asx(t1[i]), A.RCT_identity(false), false, t3);
        B.JSArray_methods.add$1(clsag, A.Clsag$(A.RCT_identity(false), A.RCT_identity(false), A.RCT_identity(false), t2));
      }
      return A.RCTGeneratorUtils_buildSignature(bulletProof, bulletProofPlus, clsag, ecdh, message, mgs, mixRing, outPk, pseudoOuts, rangeSig, txnFee, B.RCTType_rctTypeBulletproofPlus_6, $S, $P);
    },
    RCTGeneratorUtils_nBulletproofMaxAmountBase(lSize, maxOuts, rSize) {
      if (lSize < 6)
        throw A.wrapException(B.MoneroCryptoException_k2a);
      if (lSize !== rSize)
        throw A.wrapException(B.MoneroCryptoException_IYL);
      if (16 !== maxOuts)
        throw A.wrapException(B.MoneroCryptoException_00);
      if (lSize > 10)
        throw A.wrapException(B.MoneroCryptoException_APP);
      return B.JSInt_methods.$shl(1, lSize - 6);
    },
    RCTGeneratorUtils_nBulletproofMaxAmounts(proofs) {
      var t1, n, _i, proof, n2;
      for (t1 = proofs.length, n = 0, _i = 0; _i < t1; ++_i) {
        proof = proofs[_i];
        n2 = A.RCTGeneratorUtils_nBulletproofMaxAmountBase(proof.l.length, 16, proof.r.length);
        if (n2 >= -1 - n)
          throw A.wrapException(B.MoneroCryptoException_0);
        if (n2 === 0)
          return 0;
        n += n2;
      }
      return n;
    },
    RCTGeneratorUtils_nBulletproofPlusMaxAmounts(proofs) {
      var t1, n, _i, proof, n2;
      for (t1 = proofs.length, n = 0, _i = 0; _i < t1; ++_i) {
        proof = proofs[_i];
        n2 = A.RCTGeneratorUtils_nBulletproofMaxAmountBase(proof.l.length, 16, proof.r.length);
        if (n2 >= -1 - n)
          throw A.wrapException(B.MoneroCryptoException_0);
        if (n2 === 0)
          return 0;
        n += n2;
      }
      return n;
    },
    RCTGeneratorUtils_buildSignature(bulletProof, bulletProofPlus, clsag, ecdh, message, mgs, mixRing, outPk, pseudoOuts, rangeSig, txnFee, type, $S, $P) {
      var base, prunable;
      switch (type) {
        case B.RCTType_rctTypeFull_1:
          base = A.RCTFull$(new A.CastList(ecdh, A._arrayInstanceType(ecdh)._eval$1("CastList<1,EcdhInfoV1>")), message, mixRing, outPk, txnFee);
          prunable = new A.RctSigPrunableRangeSigs(A.List_List$unmodifiable(rangeSig, type$.RangeSig), mgs);
          break;
        case B.RCTType_rctTypeBulletproofPlus_6:
          base = A.RCTBulletproofPlus$(new A.CastList(ecdh, A._arrayInstanceType(ecdh)._eval$1("CastList<1,EcdhInfoV2>")), message, mixRing, outPk, txnFee);
          prunable = A.RctSigPrunableBulletproofPlus$(bulletProofPlus, clsag, pseudoOuts);
          break;
        case B.RCTType_rctTypeBulletproof2_4:
          base = A.RCTBulletproof2$(new A.CastList(ecdh, A._arrayInstanceType(ecdh)._eval$1("CastList<1,EcdhInfoV2>")), message, mixRing, outPk, txnFee);
          prunable = A.RctSigPrunableBulletproof2$(bulletProof, mgs, pseudoOuts);
          break;
        case B.RCTType_rctTypeBulletproof_3:
          base = A.RCTBulletproof$(new A.CastList(ecdh, A._arrayInstanceType(ecdh)._eval$1("CastList<1,EcdhInfoV1>")), message, mixRing, outPk, txnFee);
          prunable = A.RctSigPrunableBulletproof$(bulletProof, mgs, pseudoOuts);
          break;
        case B.RCTType_rctTypeCLSAG_5:
          base = A.RCTCLSAG$(new A.CastList(ecdh, A._arrayInstanceType(ecdh)._eval$1("CastList<1,EcdhInfoV2>")), message, mixRing, outPk, txnFee);
          prunable = A.RctSigPrunableCLSAG$(bulletProof, clsag, pseudoOuts);
          break;
        case B.RCTType_rctTypeSimple_2:
          base = A.RCTSimple$(new A.CastList(ecdh, A._arrayInstanceType(ecdh)._eval$1("CastList<1,EcdhInfoV1>")), message, mixRing, outPk, pseudoOuts, txnFee);
          prunable = new A.RctSigPrunableRangeSigs(A.List_List$unmodifiable(rangeSig, type$.RangeSig), mgs);
          break;
        default:
          throw A.wrapException(B.MoneroCryptoException_FQN);
      }
      if (!$S._is(base) || !$P._is(prunable))
        throw A.wrapException(B.MoneroCryptoException_ijF);
      return new A.RCTSignature(base, prunable, $S._eval$1("@<0>")._bind$1($P)._eval$1("RCTSignature<1,2>"));
    },
    RCTGeneratorUtils_decodeRct_(outputIndex, secretKey, sig) {
      var t1, t2, result, mask, amount, c, t, bAmount, exception;
      try {
        t1 = sig.signature;
        if (outputIndex >= t1.get$ecdhInfo().length)
          A.throwExpression(B.MoneroCryptoException_yrt);
        if (t1.get$outPk().length !== t1.get$ecdhInfo().length)
          A.throwExpression(B.MoneroCryptoException_Cfs);
        t2 = t1.get$ecdhInfo();
        if (!(outputIndex < t2.length))
          return A.ioore(t2, outputIndex);
        result = A.RCT_ecdhDecode(t2[outputIndex], secretKey);
        mask = A.RCT_zero(true);
        A.CryptoOps_scFill(mask, result.mask);
        amount = result.amount;
        t1 = t1.get$outPk();
        if (!(outputIndex < t1.length))
          return A.ioore(t1, outputIndex);
        c = t1[outputIndex].mask;
        t = A.RCT_zero(true);
        if (A.CryptoOps_scCheck(mask) !== 0)
          A.throwExpression(B.MoneroCryptoException_aGl);
        if (A.CryptoOps_scCheck(amount) !== 0)
          A.throwExpression(B.MoneroCryptoException_6cO);
        A.RCT_addKeys2(t, mask, amount, B.List_Qm0);
        if (!A.BytesUtils_bytesEqual(c, t))
          A.throwExpression(B.MoneroCryptoException_exN);
        t1 = A.BigintUtils_fromBytes(amount, B.C_Endian0, false);
        t2 = $.$get$_BigIntImpl_one();
        bAmount = t1.$and(0, t2.$shl(0, 64).$sub(0, t2));
        return new A._Record_2(bAmount, mask);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.MoneroCryptoException)
          return null;
        else
          throw exception;
      }
    },
    RCTGeneratorUtils_weightClawBack(signature) {
      var paddedOutputs, isBpp, bpBase, nlr,
        type = signature.signature.type,
        t1 = signature.rctSigPrunable;
      if (t1 == null)
        throw A.wrapException(B.MoneroCryptoException_YKi);
      if (!type.get$isBulletproof() && !type.get$isBulletproofPlus())
        return 0;
      paddedOutputs = type.get$isBulletproofPlus() ? A.RCTGeneratorUtils_nBulletproofPlusMaxAmounts(t1.cast$1$0(0, type$.RctSigPrunableBulletproofPlus).bulletproofPlus) : A.RCTGeneratorUtils_nBulletproofMaxAmounts(t1.cast$1$0(0, type$.BulletproofPrunable).get$bulletproof());
      if (paddedOutputs <= 2)
        return 0;
      isBpp = type.get$isBulletproofPlus();
      bpBase = B.JSInt_methods._tdivFast$1(32 * ((isBpp ? 6 : 9) + 14), 2);
      for (nlr = 0; B.JSInt_methods._shlPositive$1(1, nlr) < paddedOutputs;)
        ++nlr;
      t1 = isBpp ? 6 : 9;
      return B.JSInt_methods._tdivFast$1((bpBase * paddedOutputs - 32 * (t1 + 2 * (nlr + 6))) * 4, 5);
    },
    RCTGeneratorUtils_getPreMlsagHash_closure: function RCTGeneratorUtils_getPreMlsagHash_closure() {
    },
    RCTGeneratorUtils_getPreMlsagHash_closure0: function RCTGeneratorUtils_getPreMlsagHash_closure0() {
    },
    RCTGeneratorUtils_genRctSimple_closure: function RCTGeneratorUtils_genRctSimple_closure() {
    },
    RCT_skGen_() {
      for (; true;) {
        var r = $.$get$QuickCrypto__generateRandom().call$1(32);
        A.CryptoOps_scReduce32(r);
        if (A.CryptoOps_scIsNonZero(r) !== 0)
          return r;
      }
    },
    RCT_skGen(key) {
      var t1, i,
        gn = A.RCT_skGen_();
      for (t1 = J.getInterceptor$asx(gn), i = 0; i < 32; ++i)
        B.JSArray_methods.$indexSet(key, i, t1.$index(gn, i));
    },
    RCT_hashToP3(p3, k) {
      var hash8P1p1,
        hashKey = A.Keccack_hash(k, 32),
        t1 = type$.int,
        hashP2 = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_geFromfeFrombytesVartime(hashP2, hashKey);
      hash8P1p1 = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_geMul8(hash8P1p1, hashP2);
      A.CryptoOps_geP1P1ToP3(p3, hash8P1p1);
    },
    RCT_skpkGen_() {
      var secret = A.RCT_skGen_();
      return new A.Tuple(secret, A.RCT_scalarmultBase_(secret), type$.Tuple_of_List_int_and_List_int);
    },
    RCT_addKeys2(aGbB, a, b, $B) {
      var t1 = type$.int,
        rv = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1))),
        b2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      if (A.CryptoOps_geFromBytesVartime_(b2, $B) !== 0)
        throw A.wrapException(B.MoneroCryptoException_tEe);
      A.CryptoOps_geDoubleScalarMultBaseVartime(rv, b, b2, a);
      A.CryptoOps_geToBytes(aGbB, rv);
    },
    RCT_scalarmultBase_(a) {
      var ag = A.RCT_zero(true),
        t1 = type$.int,
        point = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_scReduce32Copy(ag, a);
      A.CryptoOps_geScalarMultBase(point, ag);
      A.CryptoOps_geP3Tobytes(ag, point);
      return ag;
    },
    RCT_scalarmultKey(ap, p, a) {
      var r,
        t1 = type$.int,
        aP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      if (A.CryptoOps_geFromBytesVartime_(aP3, p) !== 0)
        throw A.wrapException(B.MoneroCryptoException_GJk);
      r = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_geScalarMult(r, a, aP3);
      A.CryptoOps_geToBytes(ap, r);
    },
    RCT_genAmountEncodingFactor(k) {
      var t1 = type$.int,
        t2 = A.List_List$of(new A.CodeUnits("amount"), true, t1);
      B.JSArray_methods.addAll$1(t2, A.ListHelper_exceptedLen(k, 32, t1));
      return A.Keccack_hash(t2, 32);
    },
    RCT_identity(clone) {
      if (clone)
        return A.ListHelper_clone(B.List_ouN0, false, type$.int);
      return B.List_ouN0;
    },
    RCT_zero(clone) {
      if (clone)
        return A.ListHelper_clone(B.List_ouN, false, type$.int);
      return B.List_ouN;
    },
    RCT_genCommitmentMask(key) {
      var h,
        t1 = A.List_List$of(new A.CodeUnits("commitment_mask"), true, type$.int);
      B.JSArray_methods.addAll$1(t1, key);
      h = A.Keccack_hash(t1, 32);
      A.CryptoOps_scReduce32(h);
      return h;
    },
    RCT_hashToScalarKeys(data) {
      var t1 = A._arrayInstanceType(data),
        t2 = t1._eval$1("ExpandIterable<1,int>"),
        h = A.Keccack_hash(A.List_List$of(new A.ExpandIterable(data, t1._eval$1("Iterable<int>(1)")._as(new A.RCT_hashToScalarKeys_closure()), t2), true, t2._eval$1("Iterable.E")), 32);
      A.CryptoOps_scReduce32(h);
      return h;
    },
    RCT_precomp(rv, b) {
      var t1 = type$.int,
        b2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      if (A.CryptoOps_geFromBytesVartime_(b2, b) !== 0)
        throw A.wrapException(B.MoneroCryptoException_WZC);
      A.CryptoOps_geDsmPrecomp(rv, b2);
    },
    RCT_xor8(v, k) {
      var t1, i, t2, t3;
      for (t1 = k.length, i = 0; i < 8; ++i) {
        if (!(i < v.length))
          return A.ioore(v, i);
        t2 = v[i];
        if (!(i < t1))
          return A.ioore(k, i);
        t3 = k[i];
        if (typeof t2 !== "number")
          return t2.$xor();
        if (typeof t3 !== "number")
          return A.iae(t3);
        B.JSArray_methods.$indexSet(v, i, (t2 ^ t3) >>> 0);
      }
    },
    RCT_ecdhDecode(ecdh, sharedSec) {
      var mask, amountFactor, amount, t1, t2, h, h0;
      if (ecdh.get$version() === B.EcdhInfoVersion_V2) {
        mask = A.RCT_genCommitmentMask(sharedSec);
        amountFactor = A.RCT_genAmountEncodingFactor(sharedSec);
        amount = A.RCT_zero(true);
        B.JSArray_methods.setAll$2(amount, 0, ecdh.get$amount());
        A.RCT_xor8(amount, amountFactor);
        A.BytesUtils_validateListOfBytes(mask);
        t1 = type$.int;
        t2 = A.List_List$unmodifiable(mask, t1);
        A.BytesUtils_validateListOfBytes(amount);
        return new A.EcdhTuple(t2, A.List_List$unmodifiable(amount, t1), B.EcdhInfoVersion_V2);
      } else {
        t1 = type$.EcdhInfoV1;
        A.checkTypeBound(t1, type$.EcdhInfo, "T", "cast");
        if (!(ecdh instanceof A.EcdhInfoV1))
          A.throwExpression(A.DartMoneroPluginException$("EcdhInfo casting failed.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", A.createRuntimeType(t1).toString$0(0), "type", A.getRuntimeTypeOfDartObject(ecdh).toString$0(0)], type$.String, type$.dynamic)));
        t1._as(ecdh);
        h = A.Keccack_hash(sharedSec, 32);
        A.CryptoOps_scReduce32(h);
        h0 = A.Keccack_hash(h, 32);
        A.CryptoOps_scReduce32(h0);
        t1 = type$.int;
        mask = A.List_List$filled(32, 0, false, t1);
        amount = A.List_List$filled(32, 0, false, t1);
        A.CryptoOps_scSub(mask, ecdh.mask, h);
        A.CryptoOps_scSub(amount, ecdh.amount, h0);
        A.BytesUtils_validateListOfBytes(mask);
        t2 = A.List_List$unmodifiable(mask, t1);
        A.BytesUtils_validateListOfBytes(amount);
        return new A.EcdhTuple(t2, A.List_List$unmodifiable(amount, t1), B.EcdhInfoVersion_V1);
      }
    },
    RCT_ecdhEncode(unmasked, sharedSec) {
      var amount, h, h0, mask,
        t1 = type$.int,
        t2 = unmasked.amount;
      if (unmasked.version === B.EcdhInfoVersion_V2) {
        amount = A.ListHelper_clone(t2, false, t1);
        A.RCT_xor8(amount, A.RCT_genAmountEncodingFactor(sharedSec));
        t2 = B.JSArray_methods.sublist$2(amount, 0, 8);
        A.BytesUtils_validateListOfBytes(t2);
        return new A.EcdhInfoV2(A.ListValidator_exc(A.List_List$unmodifiable(t2, t1), 8, "EcdhInfoV2", t1));
      } else {
        h = A.Keccack_hash(sharedSec, 32);
        A.CryptoOps_scReduce32(h);
        h0 = A.Keccack_hash(h, 32);
        A.CryptoOps_scReduce32(h0);
        mask = A.ListHelper_clone(unmasked.mask, false, t1);
        amount = A.ListHelper_clone(t2, false, t1);
        A.CryptoOps_scAdd(mask, mask, h);
        A.CryptoOps_scAdd(amount, amount, h0);
        return A.EcdhInfoV1$(amount, mask);
      }
    },
    RCT_strToKey(data) {
      var key, t1, i,
        toBytes = new A.CodeUnits(data);
      if (data.length > 32)
        toBytes = toBytes.sublist$2(toBytes, 0, 32);
      key = A.RCT_zero(true);
      for (t1 = J.getInterceptor$asx(toBytes), i = 0; i < t1.get$length(toBytes); ++i)
        B.JSArray_methods.$indexSet(key, i, t1.$index(toBytes, i));
      return key;
    },
    RCT_hashToScalarKeys_closure: function RCT_hashToScalarKeys_closure() {
    },
    DartMoneroPluginException$(message, details) {
      return new A.DartMoneroPluginException(message, details);
    },
    DartMoneroPluginException: function DartMoneroPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    IntegerListValidator_as32Bytes(_this, operationName) {
      var t1 = J.getInterceptor$asx(_this);
      if (t1.get$length(_this) !== 32)
        throw A.wrapException(A.DartMoneroPluginException$(operationName + " failed. incorrect key 32 length.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", 32, "length", t1.get$length(_this)], type$.String, type$.dynamic)));
      return _this;
    },
    ListValidator_exc(_this, $length, $name, $T) {
      var t1 = J.getInterceptor$asx(_this);
      if (t1.get$length(_this) !== $length)
        throw A.wrapException(A.DartMoneroPluginException$("Incorrect " + ($name + " ") + "array length.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", $length, "length", t1.get$length(_this)], type$.String, type$.dynamic)));
      return _this;
    },
    QuickMap_asEmpty(_this) {
      if (_this.get$isEmpty(_this))
        return;
      throw A.wrapException(A.DartMoneroPluginException$("The map must be empty, but data was received.", null));
    },
    QuickMap_as(_this, key, $T) {
      var t1, exception,
        value = A.QuickMap__getValue(_this, key, !$T._is(null));
      if (value == null)
        return $T._as(value);
      try {
        t1 = $T._as(value);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception)))
          throw A.wrapException(A.DartMoneroPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "excepted", A.createRuntimeType($T).toString$0(0), "value", J.get$runtimeType$(value), "data", _this], type$.String, type$.dynamic)));
        else
          throw exception;
      }
    },
    QuickMap__getValue(_this, key, throwOnNull) {
      var value = _this.$index(0, key);
      if (value == null) {
        if (!throwOnNull)
          return null;
        throw A.wrapException(A.DartMoneroPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      }
      return value;
    },
    QuickMap_asListBig(_this, key) {
      var t1, exception,
        value = A.QuickMap__getValue(_this, key, true);
      if (value == null)
        return type$.nullable_List_BigInt._as(value);
      try {
        t1 = J.cast$1$0$ax(type$.List_dynamic._as(value), type$.BigInt);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception)))
          throw A.wrapException(A.DartMoneroPluginException$("Incorrect list of big integer.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
        else
          throw exception;
      }
    },
    QuickMap_asListBytes(_this, key) {
      var t1, exception,
        value = A.QuickMap__getValue(_this, key, true);
      if (value == null)
        return type$.nullable_List_List_int._as(value);
      try {
        t1 = J.map$1$1$ax(type$.List_dynamic._as(value), new A.QuickMap_asListBytes_closure(), type$.List_int);
        t1 = A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception)))
          throw A.wrapException(A.DartMoneroPluginException$("Incorrect list of bytes.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
        else
          throw exception;
      }
    },
    QuickMap_asListOfListBytes(_this, key) {
      var t1, exception,
        value = A.QuickMap__getValue(_this, key, true);
      if (value == null)
        return type$.nullable_List_List_List_int._as(value);
      try {
        t1 = J.map$1$1$ax(type$.List_dynamic._as(value), new A.QuickMap_asListOfListBytes_closure(), type$.List_List_int);
        t1 = A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception)))
          throw A.wrapException(A.DartMoneroPluginException$("Incorrect list of list bytes.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
        else
          throw exception;
      }
    },
    QuickMap_asMap(_this, key, $E) {
      var value, t1, exception;
      if (!$E._is(B.Map_empty))
        throw A.wrapException(B.DartMoneroPluginException_gqV);
      value = A.QuickMap_as(_this, key, type$.nullable_Map_dynamic_dynamic);
      if (value == null) {
        if ($E._is(null)) {
          $E._as(null);
          return null;
        }
        throw A.wrapException(A.DartMoneroPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      }
      try {
        t1 = $E._as(J.cast$2$0$ax(value, type$.String, type$.dynamic));
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception)))
          throw A.wrapException(A.DartMoneroPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "excepted", A.createRuntimeType($E).toString$0(0), "value", A.getRuntimeTypeOfDartObject(value), "data", _this], type$.String, type$.dynamic)));
        else
          throw exception;
      }
    },
    QuickMap_asBytes(_this, key, $E) {
      var value, t1, exception;
      if (!$E._is(A._setArrayType([], type$.JSArray_int)))
        throw A.wrapException(A.DartMoneroPluginException$("Invalid bytes casting. only use `valueAsList` method for bytes.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key], type$.String, type$.dynamic)));
      value = A.QuickMap_as(_this, key, type$.nullable_List_dynamic);
      if (value == null) {
        if ($E._is(null)) {
          $E._as(null);
          return null;
        }
        throw A.wrapException(A.DartMoneroPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      }
      try {
        t1 = $E._as(J.cast$1$0$ax(value, type$.int));
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception)))
          throw A.wrapException(A.DartMoneroPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "excepted", A.createRuntimeType($E).toString$0(0), "value", J.get$runtimeType$(value), "data", _this], type$.String, type$.dynamic)));
        else
          throw exception;
      }
    },
    QuickMap_asListOfMap(_this, key) {
      var e, s, t1, exception,
        value = A.QuickMap_as(_this, key, type$.nullable_List_dynamic);
      if (value == null)
        throw A.wrapException(A.DartMoneroPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      try {
        t1 = J.map$1$1$ax(value, new A.QuickMap_asListOfMap_closure(), type$.Map_String_dynamic);
        t1 = A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
        return t1;
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = A.DartMoneroPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "value", J.get$runtimeType$(value), "data", _this, "error", J.toString$0$(e), "stack", J.toString$0$(s)], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    QuickMap__valueAsList(_this, key, $T, $E) {
      var value, t1, exception;
      if (!$E._is(B.List_empty0))
        throw A.wrapException(B.DartMoneroPluginException_oqF);
      value = A.QuickMap_as(_this, key, type$.nullable_List_dynamic);
      if (value == null) {
        if ($E._is(null)) {
          $E._as(null);
          return null;
        }
        throw A.wrapException(A.DartMoneroPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      }
      try {
        if ($T._is(B.Map_empty)) {
          t1 = J.map$1$1$ax(value, new A.QuickMap__valueAsList_closure(), type$.Map_String_dynamic);
          t1 = $E._as(A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")));
          return t1;
        }
        t1 = $E._as(J.cast$1$0$ax(value, $T));
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception)))
          throw A.wrapException(A.DartMoneroPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "excepted", A.createRuntimeType($T).toString$0(0), "value", J.get$runtimeType$(value), "data", _this], type$.String, type$.dynamic)));
        else
          throw exception;
      }
    },
    QuickMap_mybeAs(_this, key, onValue, $E, $T) {
      if (_this.$index(0, key) != null) {
        if ($T._is(B.Map_empty))
          return onValue.call$1(A.QuickMap_asMap(_this, key, $T));
        if ($T._is(B.List_empty0))
          return onValue.call$1(A.QuickMap__valueAsList(_this, key, type$.dynamic, $T));
        return onValue.call$1(A.QuickMap_as(_this, key, $T));
      }
      return null;
    },
    QuickMap_asListBytes_closure: function QuickMap_asListBytes_closure() {
    },
    QuickMap_asListOfListBytes_closure: function QuickMap_asListOfListBytes_closure() {
    },
    QuickMap_asListOfListBytes__closure: function QuickMap_asListOfListBytes__closure() {
    },
    QuickMap_asListOfMap_closure: function QuickMap_asListOfMap_closure() {
    },
    QuickMap__valueAsList_closure: function QuickMap__valueAsList_closure() {
    },
    MoneroTransactionHelper_toXMR(piconero) {
      return A.BigRational_BigRational(piconero, null).$div(0, $.$get$MoneroTransactionHelper__trxDecimal()).toDecimal$1$digits(12);
    },
    MoneroTransactionHelper_extraParsing(extera) {
      var consumed, exteras, json, r, t2, t3, t4, result, t5, exception,
        errorOnFailedParsingExtras = false,
        t1 = extera.length;
      if (t1 === 0)
        return A._setArrayType([], type$.JSArray_TxExtra);
      consumed = 0;
      exteras = A._setArrayType([], type$.JSArray_TxExtra);
      t2 = type$.List_int;
      t3 = type$.int;
      while (true) {
        t4 = consumed;
        if (typeof t4 !== "number")
          return t4.$lt();
        if (!(t4 < t1))
          break;
        try {
          t4 = A.TxExtra_layout(null);
          result = A.List_List$from(t2._as(B.JSArray_methods.sublist$1(extera, consumed)), false, t3);
          result.fixed$length = Array;
          result.immutable$list = Array;
          json = t4.decode$1(new A.LayoutByteReader(result));
          t4 = consumed;
          t5 = json.consumed;
          if (typeof t4 !== "number")
            return t4.$add();
          consumed = t4 + t5;
          r = A.TxExtra_TxExtra$fromStruct(json.value);
          J.add$1$ax(exteras, r);
        } catch (exception) {
          if (A.boolConversionCheck(errorOnFailedParsingExtras))
            throw A.wrapException(B.DartMoneroPluginException_t2s);
          break;
        }
      }
      return exteras;
    },
    MoneroTransactionHelper__txExtraComparator(a, b) {
      var indexA, indexB,
        t1 = type$.TxExtra;
      t1._as(a);
      t1._as(b);
      indexA = B.JSArray_methods.indexOf$1(B.List_Azz, a.type);
      indexB = B.JSArray_methods.indexOf$1(B.List_Azz, b.type);
      t1 = indexA !== -1;
      if (t1 && indexB !== -1)
        return B.JSInt_methods.compareTo$1(indexA, indexB);
      if (t1)
        return -1;
      if (indexB !== -1)
        return 1;
      return 0;
    },
    MoneroTransactionHelper_toTxExtra(extera) {
      var t1, t2,
        ext = A.List_List$from(extera, true, type$.TxExtra);
      B.JSArray_methods.sort$1(ext, A.transaction_MoneroTransactionHelper__txExtraComparator$closure());
      t1 = A._arrayInstanceType(ext);
      t2 = t1._eval$1("ExpandIterable<1,int>");
      return A.List_List$of(new A.ExpandIterable(ext, t1._eval$1("Iterable<int>(1)")._as(new A.MoneroTransactionHelper_toTxExtra_closure()), t2), true, t2._eval$1("Iterable.E"));
    },
    MoneroTransactionHelper_hasSameViewTag(derivation, outIndex, viewTag) {
      if (viewTag == null)
        return true;
      return viewTag === A.MoneroCrypto_deriveViewTag(derivation, outIndex);
    },
    MoneroTransactionHelper_isAccountOutFast(outIndex, txPubkey, viewSecretKey, viewTag) {
      var derivation,
        t1 = A.MoneroCrypto_generateKeyDerivationFast(txPubkey, viewSecretKey);
      A.BytesUtils_validateListOfBytes(t1);
      derivation = A.List_List$unmodifiable(t1, type$.int);
      if (A.MoneroTransactionHelper_hasSameViewTag(derivation, outIndex, viewTag))
        return derivation;
      return null;
    },
    MoneroTransactionHelper_encryptPaymentId(paymentId, pubKey, secretKey) {
      var data, p, b, t3,
        t1 = type$.int,
        t2 = A.List_List$of(A.MoneroCrypto_generateKeyDerivation(pubKey, secretKey), true, t1);
      t2.push(141);
      data = A.Keccack_hash(t2, 32);
      p = A.ListHelper_clone(paymentId, false, t1);
      for (t1 = data.length, b = 0; b < 8; ++b) {
        if (!(b < p.length))
          return A.ioore(p, b);
        t2 = p[b];
        if (!(b < t1))
          return A.ioore(data, b);
        t3 = data[b];
        if (typeof t2 !== "number")
          return t2.$xor();
        if (typeof t3 !== "number")
          return A.iae(t3);
        B.JSArray_methods.$indexSet(p, b, (t2 ^ t3) >>> 0);
      }
      return p;
    },
    MoneroTransactionHelper__createProof(hash, receiverAddress, sharedKey, txKey) {
      var pubKey = A.RCT_zero(true),
        t1 = txKey.privateKey,
        t2 = t1.key,
        t3 = receiverAddress.pubViewKey.publicKey;
      if (receiverAddress.type === B.XmrAddressType_0rc) {
        t1 = receiverAddress.pubSpendKey.publicKey._encoded;
        A.RCT_scalarmultKey(pubKey, t1, t2);
        return A.MoneroCrypto_generateTxProof(t3._encoded, t1, pubKey, sharedKey, hash, t2);
      } else
        return A.MoneroCrypto_generateTxProof(t3._encoded, null, t1.publicKey._encoded, sharedKey, hash, t2);
    },
    MoneroTransactionHelper__createProofIn(hash, pubKey, secretKey, senderAddress, sharedKey) {
      var t1 = senderAddress.pubViewKey.publicKey,
        t2 = secretKey.privateKey.key;
      if (senderAddress.type === B.XmrAddressType_0rc)
        return A.MoneroCrypto_generateTxProof(pubKey, senderAddress.pubSpendKey.publicKey._encoded, t1._encoded, sharedKey, hash, t2);
      else
        return A.MoneroCrypto_generateTxProof(pubKey, null, t1._encoded, sharedKey, hash, t2);
    },
    MoneroTransactionHelper__findProofAmount(sharedSecret, signature) {
      var t1, i, amount,
        derivation = A.MoneroCrypto_generateKeyDerivationBytes(sharedSecret, null, A.RCT_identity(false));
      for (t1 = signature.signature, i = 0; i < t1.get$outPk().length; ++i) {
        amount = A.RCTGeneratorUtils_decodeRct_(i, A.MoneroCrypto_derivationToScalar(derivation, i), signature);
        if (amount != null)
          return amount._0;
      }
      return null;
    },
    MoneroTransactionHelper_generateInProof(account, index, message, transaction) {
      var t3, sigs, t4, i, pubkey, aP3, r, proof, rctSignature, _i,
        prefixHash = A.MoneroTransactionHelper__hashProofMessage(message == null ? "" : message, transaction),
        address = A.MoneroAddress_MoneroAddress(account.subaddress$2$majorIndex(index.minor, index.major)),
        txPubKey = transaction.get$txPublicKey(),
        additional = transaction.get$additionalPubKeys(),
        secretKey = account.privVkey,
        sharedSecrets = A._setArrayType([], type$.JSArray_List_int),
        temp = A.RCT_zero(true),
        t1 = txPubKey.publicKey._encoded,
        t2 = secretKey.privateKey.key;
      A.RCT_scalarmultKey(temp, t1, t2);
      t3 = type$.int;
      B.JSArray_methods.add$1(sharedSecrets, A.ListHelper_clone(temp, false, t3));
      sigs = A._setArrayType([], type$.JSArray_MECSignature);
      if (0 >= sharedSecrets.length)
        return A.ioore(sharedSecrets, 0);
      B.JSArray_methods.add$1(sigs, A.MoneroTransactionHelper__createProofIn(prefixHash, t1, secretKey, address, sharedSecrets[0]));
      if (additional != null)
        for (t1 = additional.pubKeys, t4 = t1.length, i = 0; i < t4;) {
          pubkey = t1[i].publicKey._encoded;
          aP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t3)), new A.FieldElement(A.List_List$filled(10, 0, false, t3)), new A.FieldElement(A.List_List$filled(10, 0, false, t3)), new A.FieldElement(A.List_List$filled(10, 0, false, t3)));
          if (A.CryptoOps_geFromBytesVartime_(aP3, pubkey) !== 0)
            A.throwExpression(B.MoneroCryptoException_GJk);
          r = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t3)), new A.FieldElement(A.List_List$filled(10, 0, false, t3)), new A.FieldElement(A.List_List$filled(10, 0, false, t3)));
          A.CryptoOps_geScalarMult(r, t2, aP3);
          A.CryptoOps_geToBytes(temp, r);
          B.JSArray_methods.add$1(sharedSecrets, A.ListHelper_clone(temp, false, t3));
          ++i;
          if (!(i < sharedSecrets.length))
            return A.ioore(sharedSecrets, i);
          B.JSArray_methods.add$1(sigs, A.MoneroTransactionHelper__createProofIn(prefixHash, pubkey, secretKey, address, sharedSecrets[i]));
        }
      t1 = type$.MappedListIterable_of_List_int_and_MoneroPublicKey;
      proof = A.MoneroTxProof_MoneroTxProof(A.List_List$of(new A.MappedListIterable(sharedSecrets, type$.MoneroPublicKey_Function_List_int._as(new A.MoneroTransactionHelper_generateInProof_closure()), t1), true, t1._eval$1("ListIterable.E")), sigs, B.MoneroTxVersion_InProofV2_2);
      rctSignature = transaction.signature.cast$1$0(0, type$.RCTSignature_RCTSignatureBase_RctSigPrunable);
      for (t1 = sharedSecrets.length, _i = 0; _i < sharedSecrets.length; sharedSecrets.length === t1 || (0, A.throwConcurrentModificationError)(sharedSecrets), ++_i)
        if (A.MoneroTransactionHelper__findProofAmount(sharedSecrets[_i], rctSignature) != null)
          return proof;
      throw A.wrapException(B.DartMoneroPluginException_Qw8);
    },
    MoneroTransactionHelper__hashProofMessage(message, transaction) {
      var messageBytes = A.StringUtils_toBytes(message),
        t1 = type$.int,
        t2 = A.List_List$of(A.BytesUtils_fromHexString(transaction.getTxHash$0()), true, t1);
      B.JSArray_methods.addAll$1(t2, messageBytes);
      t2 = A.Keccack_hash(t2, 32);
      A.BytesUtils_validateListOfBytes(t2);
      return A.List_List$unmodifiable(t2, t1);
    },
    MoneroTransactionHelper_generateOutProof(allTxKeys, message, receiverAddress, transaction) {
      var txKey, prefixHash, temp, sharedSecret, t2, t3, sigs, i, t4, aP3, r, proof, rctSignature, _i,
        t1 = allTxKeys.length;
      if (0 >= t1)
        return A.ioore(allTxKeys, 0);
      txKey = allTxKeys[0];
      prefixHash = A.MoneroTransactionHelper__hashProofMessage(message, transaction);
      temp = A.RCT_zero(true);
      sharedSecret = A._setArrayType([], type$.JSArray_List_int);
      t2 = receiverAddress.pubViewKey.publicKey._encoded;
      A.RCT_scalarmultKey(temp, t2, txKey.privateKey.key);
      t3 = type$.int;
      B.JSArray_methods.add$1(sharedSecret, A.ListHelper_clone(temp, false, t3));
      sigs = A._setArrayType([], type$.JSArray_MECSignature);
      if (0 >= sharedSecret.length)
        return A.ioore(sharedSecret, 0);
      B.JSArray_methods.add$1(sigs, A.MoneroTransactionHelper__createProof(prefixHash, receiverAddress, sharedSecret[0], txKey));
      for (i = 1; i < t1; ++i) {
        t4 = allTxKeys[i].privateKey;
        aP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t3)), new A.FieldElement(A.List_List$filled(10, 0, false, t3)), new A.FieldElement(A.List_List$filled(10, 0, false, t3)), new A.FieldElement(A.List_List$filled(10, 0, false, t3)));
        if (A.CryptoOps_geFromBytesVartime_(aP3, t2) !== 0)
          A.throwExpression(B.MoneroCryptoException_GJk);
        r = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t3)), new A.FieldElement(A.List_List$filled(10, 0, false, t3)), new A.FieldElement(A.List_List$filled(10, 0, false, t3)));
        A.CryptoOps_geScalarMult(r, t4.key, aP3);
        A.CryptoOps_geToBytes(temp, r);
        B.JSArray_methods.add$1(sharedSecret, A.ListHelper_clone(temp, false, t3));
        t4 = allTxKeys[i];
        if (!(i < sharedSecret.length))
          return A.ioore(sharedSecret, i);
        B.JSArray_methods.add$1(sigs, A.MoneroTransactionHelper__createProof(prefixHash, receiverAddress, sharedSecret[i], t4));
      }
      t1 = type$.MappedListIterable_of_List_int_and_MoneroPublicKey;
      proof = A.MoneroTxProof_MoneroTxProof(A.List_List$of(new A.MappedListIterable(sharedSecret, type$.MoneroPublicKey_Function_List_int._as(new A.MoneroTransactionHelper_generateOutProof_closure()), t1), true, t1._eval$1("ListIterable.E")), sigs, B.MoneroTxVersion_OutProofV2_2);
      rctSignature = transaction.signature.cast$1$0(0, type$.RCTSignature_RCTSignatureBase_RctSigPrunable);
      for (t1 = sharedSecret.length, _i = 0; _i < sharedSecret.length; sharedSecret.length === t1 || (0, A.throwConcurrentModificationError)(sharedSecret), ++_i)
        if (A.MoneroTransactionHelper__findProofAmount(sharedSecret[_i], rctSignature) != null)
          return proof;
      throw A.wrapException(B.DartMoneroPluginException_Qw8);
    },
    MoneroTransactionHelper_checkProof(address, message, proofStr, transaction) {
      var t2, t3, prefixHash, t4, t5, verify, i, sharedSecret, signature, t6, t7, rctSignature, _i, amount,
        txPubKey = transaction.get$txPublicKey(),
        additional = transaction.get$additionalPubKeys(),
        proof = A.MoneroTxProof_MoneroTxProof$fromBase58(proofStr),
        t1 = additional == null ? null : additional.pubKeys.length;
      if (t1 == null)
        t1 = 0;
      t2 = proof.signatures;
      t3 = t2.length;
      if (t1 + 1 !== t3)
        throw A.wrapException(B.DartMoneroPluginException_FGJ);
      prefixHash = A.MoneroTransactionHelper__hashProofMessage(message == null ? "" : message, transaction);
      for (t1 = proof.version, t4 = proof.sharedSecret, t5 = t4.length, verify = false, i = 0; i < t3; ++i) {
        if (!(i < t5))
          return A.ioore(t4, i);
        sharedSecret = t4[i];
        signature = t2[i];
        if (i === 0)
          t6 = txPubKey;
        else {
          t6 = additional.pubKeys;
          t7 = i - 1;
          if (!(t7 >= 0 && t7 < t6.length))
            return A.ioore(t6, t7);
          t7 = t6[t7];
          t6 = t7;
        }
        verify = B.JSBool_methods.$or(verify, A.MoneroTransactionHelper__checkProof(address, prefixHash, sharedSecret, signature, t6, t1));
      }
      if (!verify)
        return null;
      rctSignature = transaction.signature.cast$1$0(0, type$.RCTSignature_RCTSignatureBase_RctSigPrunable);
      for (_i = 0; _i < t5; ++_i) {
        amount = A.MoneroTransactionHelper__findProofAmount(t4[_i].publicKey._encoded, rctSignature);
        if (amount != null)
          return amount;
      }
      return null;
    },
    MoneroTransactionHelper__checkProof(address, hash, sharedSecret, signature, txPubKey, version) {
      if (version === B.MoneroTxVersion_OutProofV1_1 || version === B.MoneroTxVersion_OutProofV2_2)
        return A.MoneroTransactionHelper__checkProofOut(address, hash, sharedSecret.publicKey._encoded, signature, txPubKey, version);
      return A.MoneroTransactionHelper__checkProofIn(address, hash, sharedSecret.publicKey._encoded, signature, txPubKey, version);
    },
    MoneroTransactionHelper__checkProofOut(address, hash, sharedSecret, signature, txPubKey, version) {
      if (address.type === B.XmrAddressType_0rc)
        return A.MoneroCrypto_verifyTxProof(address.pubViewKey.publicKey._encoded, address.pubSpendKey.publicKey._encoded, txPubKey.publicKey._encoded, sharedSecret, hash, signature, version.version);
      return A.MoneroCrypto_verifyTxProof(address.pubViewKey.publicKey._encoded, null, txPubKey.publicKey._encoded, sharedSecret, hash, signature, version.version);
    },
    MoneroTransactionHelper__checkProofIn(address, hash, sharedSecret, signature, txPubKey, version) {
      if (address.type === B.XmrAddressType_0rc)
        return A.MoneroCrypto_verifyTxProof(txPubKey.publicKey._encoded, address.pubSpendKey.publicKey._encoded, address.pubViewKey.publicKey._encoded, sharedSecret, hash, signature, version.version);
      return A.MoneroCrypto_verifyTxProof(txPubKey.publicKey._encoded, null, address.pubViewKey.publicKey._encoded, sharedSecret, hash, signature, version.version);
    },
    MoneroTransactionHelper_getLockedOutputs(account, realIndex, tx) {
      var outPublicKey, additionalPubKeys, viewTag, t3, t4, t5, t6, t7, _i, derivation, _i0, index, amount, result,
        t1 = tx.vout,
        t2 = t1.length;
      if (realIndex >= t2)
        throw A.wrapException(B.DartMoneroPluginException_Ims);
      t1 = t1[realIndex].target;
      outPublicKey = t1.getPublicKey$0();
      additionalPubKeys = tx.get$additionalPubKeys();
      if (outPublicKey != null)
        t2 = additionalPubKeys != null && additionalPubKeys.pubKeys.length !== t2;
      else
        t2 = true;
      if (t2)
        return null;
      viewTag = t1.getViewTag$0();
      t1 = A._setArrayType([tx.get$txPublicKey()], type$.JSArray_MoneroPublicKey);
      if (additionalPubKeys != null) {
        t2 = additionalPubKeys.pubKeys;
        if (!(realIndex < t2.length))
          return A.ioore(t2, realIndex);
        t1.push(t2[realIndex]);
      }
      for (t2 = t1.length, t3 = account.indexes, t4 = t3.length, t5 = tx.signature, t6 = type$.RCTSignature_RCTSignatureBase_RctSigPrunable, t7 = account.account.privVkey, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        derivation = A.MoneroTransactionHelper_isAccountOutFast(realIndex, t1[_i], t7, viewTag);
        if (derivation == null)
          continue;
        for (_i0 = 0; _i0 < t4; ++_i0) {
          index = t3[_i0];
          if (A.MoneroCrypto_derivePublicKeyFast(account.getSpendPublicKey$1(index), derivation, realIndex).$eq(0, outPublicKey)) {
            amount = A.RCTGeneratorUtils_decodeRct_(realIndex, A.MoneroCrypto_derivationToScalarFast(derivation, realIndex), t5.cast$1$0(0, t6));
            if (amount == null)
              continue;
            t1 = amount._0;
            t2 = amount._1;
            t1 = A.BigIntHelper_get_asUint64(t1);
            A.BytesUtils_validateListOfBytes(t2);
            t3 = type$.int;
            result = A.List_List$from(t2, false, t3);
            result.fixed$length = Array;
            result.immutable$list = Array;
            t2 = A.ListHelper_exceptedLen(result, 32, t3);
            A.BytesUtils_validateListOfBytes(derivation);
            result = A.List_List$from(derivation, false, t3);
            result.fixed$length = Array;
            result.immutable$list = Array;
            return new A.MoneroLockedOutput(t1, index, B.MoneroOutputType_0_locked, t2, A.ListHelper_exceptedLen(result, 32, t3), outPublicKey, A.BigIntHelper_get_asUint64(tx.unlockTime), A.IntHelper_get_asUint32(realIndex));
          }
        }
      }
      return null;
    },
    MoneroTransactionHelper_getUnlockOut(account, realIndex, tx) {
      var lockedOut = A.MoneroTransactionHelper_getLockedOutputs(account, realIndex, tx);
      if (lockedOut == null)
        return null;
      return A.MoneroTransactionHelper_toUnlockOutput(account, lockedOut);
    },
    MoneroTransactionHelper_toUnlockOutput(account, out) {
      var spendKey, t3, scalar, resultKey, scalarStep1, t4, t5, t6, t7, ephemeralSecretKey, subSecretKey, ephemeralPublicKey, b2, a2, tmp2, tmp3, point, point2, hash, point0, point20,
        _s15_ = "deriveSecretKey",
        t1 = account.account,
        t2 = t1.privSkey;
      if (t2 == null)
        A.throwExpression(B.DartMoneroPluginException_JNA);
      spendKey = t2.privateKey.key;
      t2 = out.derivation;
      t3 = out.realIndex;
      A.IntegerListValidator_as32Bytes(t2, _s15_);
      A.IntegerListValidator_as32Bytes(spendKey, _s15_);
      if (A.CryptoOps_scCheck(spendKey) !== 0)
        A.throwExpression(B.MoneroCryptoException_KrQ);
      scalar = A.MoneroCrypto_derivationToScalar(t2, t3);
      resultKey = A.RCT_zero(true);
      A.CryptoOps_scAdd(resultKey, spendKey, scalar);
      scalarStep1 = A.MoneroPrivateKey_MoneroPrivateKey$fromBytes(resultKey);
      t4 = out.accountIndex;
      t5 = t4.major;
      t6 = t5 === 0;
      if (!t6 || t4.minor !== 0) {
        if (!B.JSArray_methods.contains$1(account.indexes, t4))
          A.throwExpression(B.DartMoneroPluginException_GZq);
        t7 = account._cachedIndexSpendSecretKey;
        if (t7.$index(0, t4) == null)
          t7.$indexSet(0, t4, t1.scubaddr.computeKeys$2(t4.minor, t5).privateKey);
        t5 = t7.$index(0, t4);
        t5.toString;
        resultKey = A.RCT_zero(true);
        A.CryptoOps_scAdd(resultKey, scalarStep1.privateKey.key, t5.privateKey.key);
        ephemeralSecretKey = A.MoneroPrivateKey_MoneroPrivateKey$fromBytes(resultKey);
        subSecretKey = t5;
      } else {
        ephemeralSecretKey = scalarStep1;
        subSecretKey = null;
      }
      if (account.type === B.MoneroAccountKeysType_Multisig_1) {
        ephemeralPublicKey = A.MoneroCrypto_derivePublicKey(t1.pubSkey, t2, t3);
        if (!t6 || t4.minor !== 0) {
          t1 = subSecretKey.privateKey;
          t5 = type$.int;
          b2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)));
          a2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)));
          if (A.CryptoOps_geFromBytesVartime_(b2, t1.publicKey._encoded) !== 0)
            A.throwExpression(B.MoneroCryptoException_alO);
          if (A.CryptoOps_geFromBytesVartime_(a2, ephemeralPublicKey.publicKey._encoded) !== 0)
            A.throwExpression(B.MoneroCryptoException_alO);
          tmp2 = new A.GroupElementCached(new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)));
          A.CryptoOps_geP3ToCached(tmp2, b2);
          tmp3 = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)));
          A.CryptoOps_geAdd(tmp3, a2, tmp2);
          A.CryptoOps_geP1P1ToP3(a2, tmp3);
          resultKey = A.RCT_zero(true);
          A.CryptoOps_geP3Tobytes(resultKey, a2);
          ephemeralPublicKey = A.MoneroPublicKey_MoneroPublicKey$fromBytes(resultKey);
        }
      } else
        ephemeralPublicKey = new A.MoneroPublicKey(ephemeralSecretKey.privateKey.publicKey);
      t1 = out.outputPublicKey;
      if (!t1.$eq(0, ephemeralPublicKey))
        return null;
      t5 = type$.int;
      point = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)));
      point2 = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)));
      t6 = ephemeralPublicKey.publicKey._encoded;
      A.IntegerListValidator_as32Bytes(t6, "hashToScalar");
      hash = A.Keccack_hash(t6, 32);
      point0 = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)));
      point20 = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)));
      A.CryptoOps_geFromfeFrombytesVartime(point0, hash);
      A.CryptoOps_geMul8(point20, point0);
      A.CryptoOps_geP1P1ToP3(point, point20);
      point20 = ephemeralSecretKey.privateKey.key;
      A.CryptoOps_geScalarMult(point2, point20, point);
      resultKey = A.RCT_zero(true);
      A.IntegerListValidator_as32Bytes(resultKey, "generateKeyImage");
      A.CryptoOps_geToBytes(resultKey, point2);
      return A.MoneroUnlockedOutput_MoneroUnlockedOutput(t4, out.amount, t2, t6, point20, resultKey, out.mask, t1, t3, out.unlockTime);
    },
    MoneroTransactionHelper_toUnlockPayment(account, lockedOut) {
      var unlockedOut = A.MoneroTransactionHelper_toUnlockOutput(account, lockedOut.output);
      if (unlockedOut == null)
        return null;
      return A.MoneroUnLockedPayment$(lockedOut.encryptedPaymentid, lockedOut.globalIndex, unlockedOut, lockedOut.paymentId, lockedOut.txPubkey, type$.MoneroUnlockedOutput);
    },
    MoneroTransactionHelper_generateFakePaymentOuts(payments, $T) {
      var i, t3, result,
        t1 = A._arrayInstanceType(payments),
        t2 = t1._eval$1("MappedListIterable<1,List<OutsEntery>>"),
        outs = A.List_List$of(new A.MappedListIterable(payments, t1._eval$1("List<OutsEntery>(1)")._as(new A.MoneroTransactionHelper_generateFakePaymentOuts_closure(16, $T)), t2), true, t2._eval$1("ListIterable.E")),
        _length = payments.length,
        _list = J.JSArray_JSArray$allocateGrowable(_length, $T._eval$1("SpendablePayment<0>"));
      for (t1 = type$.OutsEntery, t2 = $T._eval$1("SpendablePayment<0>"), i = 0; i < _length; ++i) {
        t3 = payments[i];
        if (!(i < outs.length))
          return A.ioore(outs, i);
        result = A.List_List$from(outs[i], false, t1);
        result.fixed$length = Array;
        result.immutable$list = Array;
        _list[i] = new A.SpendablePayment(t3, result, A.IntHelper_get_asUint32(0), t2);
      }
      return _list;
    },
    MoneroTransactionHelper_toTxExtra_closure: function MoneroTransactionHelper_toTxExtra_closure() {
    },
    MoneroTransactionHelper_generateInProof_closure: function MoneroTransactionHelper_generateInProof_closure() {
    },
    MoneroTransactionHelper_generateOutProof_closure: function MoneroTransactionHelper_generateOutProof_closure() {
    },
    MoneroTransactionHelper_generateFakePaymentOuts_closure: function MoneroTransactionHelper_generateFakePaymentOuts_closure(t0, t1) {
      this.fakeOutsLength = t0;
      this.T = t1;
    },
    MoneroBlock$(hash, majorVersion, minerTx, minorVersion, nonce, timestamp, txHashes) {
      var t1 = A._arrayInstanceType(txHashes),
        t2 = t1._eval$1("MappedListIterable<1,List<int>>");
      t2 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(txHashes, t1._eval$1("List<int>(1)")._as(new A.MoneroBlock_closure()), t2), true, t2._eval$1("ListIterable.E")), type$.List_int);
      t1 = A.BigIntHelper_get_asUint64(timestamp);
      A.BytesUtils_validateListOfBytes(hash);
      return new A.MoneroBlock(minerTx, t2, majorVersion, minorVersion, t1, A.List_List$unmodifiable(hash, type$.int), A.IntHelper_get_asUint32(nonce));
    },
    MoneroBlock_MoneroBlock$fromStruct(json) {
      var t6, t7,
        t1 = type$.int,
        t2 = A.QuickMap_as(json, "majorVersion", t1),
        t3 = A.QuickMap_as(json, "minorVersion", t1),
        t4 = A.QuickMap_as(json, "timestamp", type$.BigInt),
        t5 = A.QuickMap_asBytes(json, "hash", type$.List_int);
      t1 = A.QuickMap_as(json, "nonce", t1);
      t6 = A.MoneroTransaction_MoneroTransaction$fromStruct(A.QuickMap_asMap(json, "minerTx", type$.Map_String_dynamic));
      t7 = A.QuickMap_asListBytes(json, "txHashes");
      t7.toString;
      return A.MoneroBlock$(t5, t2, t6, t3, t1, t4, t7);
    },
    MoneroBlock_layout(property) {
      var _null = null;
      return A.StructLayout_StructLayout(A._setArrayType([new A.MoneroIntVarInt(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "majorVersion"), new A.MoneroIntVarInt(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "minorVersion"), A.MoneroBigIntVarInt$(new A.BigIntLayout(8, _null), "timestamp"), A.RawBytesLayout_RawBytesLayout(32, "hash"), A.IntegerLayout$(4, B.C_Endian0, "nonce", false), A.MoneroTransaction_layout(false, "minerTx", _null), A.MoneroLayoutConst_variantVec(A.RawBytesLayout_RawBytesLayout(32, _null), "txHashes", type$.List_int)], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroBlock: function MoneroBlock(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.minerTx = t0;
      _.txHashes = t1;
      _.majorVersion = t2;
      _.minorVersion = t3;
      _.timestamp = t4;
      _.hash = t5;
      _.nonce = t6;
    },
    MoneroBlock_closure: function MoneroBlock_closure() {
    },
    MoneroBlockheader: function MoneroBlockheader() {
    },
    MoneroPaymentType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_03, new A.MoneroPaymentType_fromName_closure($name), new A.MoneroPaymentType_fromName_closure0($name));
    },
    MoneroLockedOutput$(accountIndex, amount, derivation, mask, outputPublicKey, realIndex, unlockTime) {
      var t2, t3,
        t1 = A.BigIntHelper_get_asUint64(amount);
      A.BytesUtils_validateListOfBytes(mask);
      t2 = type$.int;
      t3 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(mask, t2), 32, t2);
      A.BytesUtils_validateListOfBytes(derivation);
      return new A.MoneroLockedOutput(t1, accountIndex, B.MoneroOutputType_0_locked, t3, A.ListHelper_exceptedLen(A.List_List$unmodifiable(derivation, t2), 32, t2), outputPublicKey, A.BigIntHelper_get_asUint64(unlockTime), A.IntHelper_get_asUint32(realIndex));
    },
    MoneroLockedOutput_layout(property) {
      A._asStringQ(property);
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), "amount"), A.MoneroAccountIndex_layout("accountIndex"), A.RawBytesLayout_RawBytesLayout(32, "mask"), A.RawBytesLayout_RawBytesLayout(32, "derivation"), A.RawBytesLayout_RawBytesLayout(32, "outputPublicKey"), A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), "unlockTime"), new A.MoneroIntVarInt(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, "realIndex")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroUnlockedOutput$_(accountIndex, amount, derivation, ephemeralPublicKey, ephemeralSecretKey, keyImage, mask, outputPublicKey, realIndex, type, unlockTime) {
      var t1, t2, t3, t4, t5, t6;
      A.BytesUtils_validateListOfBytes(ephemeralPublicKey);
      t1 = type$.int;
      t2 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(ephemeralPublicKey, t1), 32, t1);
      A.BytesUtils_validateListOfBytes(ephemeralSecretKey);
      t3 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(ephemeralSecretKey, t1), 32, t1);
      A.BytesUtils_validateListOfBytes(keyImage);
      t4 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(keyImage, t1), 32, t1);
      t5 = A.BigIntHelper_get_asUint64(amount);
      A.BytesUtils_validateListOfBytes(mask);
      t6 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(mask, t1), 32, t1);
      A.BytesUtils_validateListOfBytes(derivation);
      return new A.MoneroUnlockedOutput(t3, t2, t4, t5, accountIndex, B.MoneroOutputType_1_unlocked, t6, A.ListHelper_exceptedLen(A.List_List$unmodifiable(derivation, t1), 32, t1), outputPublicKey, A.BigIntHelper_get_asUint64(unlockTime), A.IntHelper_get_asUint32(realIndex));
    },
    MoneroUnlockedOutput_MoneroUnlockedOutput(accountIndex, amount, derivation, ephemeralPublicKey, ephemeralSecretKey, keyImage, mask, outputPublicKey, realIndex, unlockTime) {
      return A.MoneroUnlockedOutput$_(accountIndex, amount, derivation, ephemeralPublicKey, ephemeralSecretKey, keyImage, mask, outputPublicKey, realIndex, B.MoneroOutputType_1_unlocked, unlockTime);
    },
    MoneroUnlockedOutput_layout(property) {
      A._asStringQ(property);
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), "amount"), A.RawBytesLayout_RawBytesLayout(32, "mask"), A.RawBytesLayout_RawBytesLayout(32, "derivation"), A.RawBytesLayout_RawBytesLayout(32, "outputPublicKey"), A.RawBytesLayout_RawBytesLayout(32, "ephemeralSecretKey"), A.RawBytesLayout_RawBytesLayout(32, "ephemeralPublicKey"), A.RawBytesLayout_RawBytesLayout(32, "keyImage"), A.MoneroAccountIndex_layout("accountIndex"), A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), "unlockTime"), new A.MoneroIntVarInt(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, "realIndex")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroUnlockedMultisigOutput_layout(property) {
      A._asStringQ(property);
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), "amount"), A.RawBytesLayout_RawBytesLayout(32, "mask"), A.RawBytesLayout_RawBytesLayout(32, "derivation"), A.RawBytesLayout_RawBytesLayout(32, "outputPublicKey"), A.RawBytesLayout_RawBytesLayout(32, "ephemeralSecretKey"), A.RawBytesLayout_RawBytesLayout(32, "ephemeralPublicKey"), A.RawBytesLayout_RawBytesLayout(32, "keyImage"), A.RawBytesLayout_RawBytesLayout(32, "multisigKeyImage"), A.MoneroAccountIndex_layout("accountIndex"), A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), "unlockTime"), new A.MoneroIntVarInt(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, "realIndex")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroPayment_MoneroPayment$deserialize(bytes, $T) {
      var json = A.MoneroPayment_layout(null).deserialize$1(bytes).value;
      if (typeof json.$index(0, "key") != "string" || !json.containsKey$1("value"))
        A.throwExpression(B.MoneroSerializationException_sES);
      return A.MoneroPayment_MoneroPayment$fromStruct(json, $T);
    },
    MoneroPayment_MoneroPayment$fromStruct(json, $T) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, payment, t12, t13, t14, _s5_ = "value",
        _s12_ = "accountIndex",
        _s10_ = "derivation",
        _s15_ = "outputPublicKey",
        _s10_0 = "unlockTime",
        _s9_ = "realIndex",
        _s8_ = "txPubkey",
        _s18_ = "encryptedPaymentid",
        _s9_0 = "paymentId",
        _s11_ = "globalIndex",
        t1 = A.MoneroVariantSerialization_toVariantDecodeResult(json).result,
        type = A.MoneroPaymentType_fromName(A._asString(t1.$index(0, "key")));
      switch (type) {
        case B.MoneroPaymentType_0_locked:
          t2 = type$.Map_String_dynamic;
          t1 = t2._as(t1.$index(0, _s5_));
          t3 = A.QuickMap_asMap(t1, "output", t2);
          t4 = type$.BigInt;
          t5 = A.QuickMap_as(t3, "amount", t4);
          t2 = A.MoneroAccountIndex_MoneroAccountIndex$fromStruct(A.QuickMap_asMap(t3, _s12_, t2));
          t6 = type$.List_int;
          t7 = A.QuickMap_asBytes(t3, "mask", t6);
          t8 = A.QuickMap_asBytes(t3, _s10_, t6);
          t9 = A.MoneroPublicKey_MoneroPublicKey$fromBytes(A.QuickMap_asBytes(t3, _s15_, t6));
          t10 = A.QuickMap_as(t3, _s10_0, t4);
          t11 = type$.int;
          t10 = A.MoneroLockedOutput$(t2, t5, t8, t7, t9, A.QuickMap_as(t3, _s9_, t11), t10);
          t6 = A.MoneroPublicKey_MoneroPublicKey$fromBytes(A.QuickMap_asBytes(t1, _s8_, t6));
          t3 = type$.nullable_List_int;
          t9 = A.QuickMap_asBytes(t1, _s18_, t3);
          t3 = A.QuickMap_asBytes(t1, _s9_0, t3);
          t4 = A.QuickMap_as(t1, _s11_, t4);
          if (t3 == null)
            t1 = null;
          else {
            A.BytesUtils_validateListOfBytes(t3);
            t1 = A.List_List$unmodifiable(t3, t11);
          }
          if (t9 == null)
            t2 = null;
          else {
            A.BytesUtils_validateListOfBytes(t9);
            t2 = A.List_List$unmodifiable(t9, t11);
          }
          payment = new A.MoneroLockedPayment(B.MoneroPaymentType_0_locked, t10, t6, t1, t2, t4);
          break;
        case B.MoneroPaymentType_1_unlocked:
          t2 = type$.Map_String_dynamic;
          t1 = t2._as(t1.$index(0, _s5_));
          t3 = type$.MoneroUnlockedOutput;
          t4 = A.QuickMap_asMap(t1, "output", t2);
          t5 = type$.BigInt;
          t6 = A.QuickMap_as(t4, "amount", t5);
          t2 = A.MoneroAccountIndex_MoneroAccountIndex$fromStruct(A.QuickMap_asMap(t4, _s12_, t2));
          t7 = type$.List_int;
          t8 = A.QuickMap_asBytes(t4, _s10_, t7);
          t9 = A.QuickMap_asBytes(t4, "mask", t7);
          t10 = A.QuickMap_asBytes(t4, "ephemeralPublicKey", t7);
          t11 = A.QuickMap_asBytes(t4, "ephemeralSecretKey", t7);
          t12 = A.QuickMap_asBytes(t4, "keyImage", t7);
          t13 = A.MoneroPublicKey_MoneroPublicKey$fromBytes(A.QuickMap_asBytes(t4, _s15_, t7));
          t14 = A.QuickMap_as(t4, _s10_0, t5);
          t14 = A.MoneroUnlockedOutput_MoneroUnlockedOutput(t2, t6, t8, t10, t11, t12, t9, t13, A.QuickMap_as(t4, _s9_, type$.int), t14);
          A.checkTypeBound(t3, type$.MoneroOutput, "T", "cast");
          t2 = A.MoneroPublicKey_MoneroPublicKey$fromBytes(A.QuickMap_asBytes(t1, _s8_, t7));
          t4 = type$.nullable_List_int;
          t6 = A.QuickMap_asBytes(t1, _s18_, t4);
          t4 = A.QuickMap_asBytes(t1, _s9_0, t4);
          payment = A.MoneroUnLockedPayment$(t6, A.QuickMap_as(t1, _s11_, t5), t14, t4, t2, t3);
          break;
        case B.MoneroPaymentType_2_unlockedMultisig:
          payment = A.MoneroUnlockedMultisigPayment_MoneroUnlockedMultisigPayment$fromStruct(type$.Map_String_dynamic._as(t1.$index(0, _s5_)));
          break;
        default:
          throw A.wrapException(A.UnimplementedError$("Invalid monero payment type."));
      }
      if (!$T._eval$1("MoneroPayment<0>")._is(payment))
        throw A.wrapException(A.DartMoneroPluginException$("Monero payment casting failed.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", A.createRuntimeType($T).toString$0(0), "type", type.name], type$.String, type$.dynamic)));
      return payment;
    },
    MoneroPayment_layout(property) {
      var t1 = type$.LazyVariantModel_dynamic;
      return A.LayoutConst_lazyEnum(A._setArrayType([new A.LazyVariantModel(A.payment_MoneroLockedPayment_layout$closure(), "locked", 0, t1), new A.LazyVariantModel(A.payment_MoneroUnLockedPayment_layout$closure(), "unlocked", 1, t1), new A.LazyVariantModel(A.payment_MoneroUnlockedMultisigPayment_layout$closure(), "unlockedMultisig", 2, t1)], type$.JSArray_LazyVariantModel_dynamic), property);
    },
    MoneroLockedPayment_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroLockedOutput_layout("output"), A.RawBytesLayout_RawBytesLayout(32, "txPubkey"), A.LayoutConst_optional(A.RawBytesLayout_RawBytesLayout(8, null), "paymentId"), A.LayoutConst_optional(A.RawBytesLayout_RawBytesLayout(8, null), "encryptedPaymentid"), A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), "globalIndex")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroUnLockedPayment$(encryptedPaymentid, globalIndex, output, paymentId, txPubkey, $T) {
      var t1, t2;
      if (paymentId == null)
        t1 = null;
      else {
        A.BytesUtils_validateListOfBytes(paymentId);
        t1 = A.List_List$unmodifiable(paymentId, type$.int);
      }
      if (encryptedPaymentid == null)
        t2 = null;
      else {
        A.BytesUtils_validateListOfBytes(encryptedPaymentid);
        t2 = A.List_List$unmodifiable(encryptedPaymentid, type$.int);
      }
      return new A.MoneroUnLockedPayment(B.MoneroPaymentType_1_unlocked, output, txPubkey, t1, t2, globalIndex, $T._eval$1("MoneroUnLockedPayment<0>"));
    },
    MoneroUnLockedPayment_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroUnlockedOutput_layout("output"), A.RawBytesLayout_RawBytesLayout(32, "txPubkey"), A.LayoutConst_optional(A.RawBytesLayout_RawBytesLayout(8, null), "paymentId"), A.LayoutConst_optional(A.RawBytesLayout_RawBytesLayout(8, null), "encryptedPaymentid"), A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), "globalIndex")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroUnlockedMultisigPayment_MoneroUnlockedMultisigPayment$fromStruct(json) {
      var t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19,
        t1 = type$.Map_String_dynamic,
        t2 = A.QuickMap_asMap(json, "output", t1),
        t3 = type$.BigInt,
        t4 = A.QuickMap_as(t2, "amount", t3);
      t1 = A.MoneroAccountIndex_MoneroAccountIndex$fromStruct(A.QuickMap_asMap(t2, "accountIndex", t1));
      t5 = type$.List_int;
      t6 = A.QuickMap_asBytes(t2, "derivation", t5);
      t7 = A.QuickMap_asBytes(t2, "mask", t5);
      t8 = A.QuickMap_asBytes(t2, "ephemeralPublicKey", t5);
      t9 = A.QuickMap_asBytes(t2, "ephemeralSecretKey", t5);
      t10 = A.QuickMap_asBytes(t2, "keyImage", t5);
      t11 = A.QuickMap_as(t2, "unlockTime", t3);
      t12 = A.MoneroPublicKey_MoneroPublicKey$fromBytes(A.QuickMap_asBytes(t2, "outputPublicKey", t5));
      t13 = A.QuickMap_asBytes(t2, "multisigKeyImage", t5);
      t14 = type$.int;
      t2 = A.QuickMap_as(t2, "realIndex", t14);
      A.BytesUtils_validateListOfBytes(t13);
      t13 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(t13, t14), 32, t14);
      A.BytesUtils_validateListOfBytes(t8);
      t8 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(t8, t14), 32, t14);
      A.BytesUtils_validateListOfBytes(t9);
      t9 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(t9, t14), 32, t14);
      A.BytesUtils_validateListOfBytes(t10);
      t10 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(t10, t14), 32, t14);
      t4 = A.BigIntHelper_get_asUint64(t4);
      A.BytesUtils_validateListOfBytes(t7);
      t7 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(t7, t14), 32, t14);
      A.BytesUtils_validateListOfBytes(t6);
      t6 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(t6, t14), 32, t14);
      t11 = A.BigIntHelper_get_asUint64(t11);
      t2 = A.IntHelper_get_asUint32(t2);
      t5 = A.MoneroPublicKey_MoneroPublicKey$fromBytes(A.QuickMap_asBytes(json, "txPubkey", t5));
      t15 = type$.nullable_List_int;
      t16 = A.QuickMap_asBytes(json, "encryptedPaymentid", t15);
      t15 = A.QuickMap_asBytes(json, "paymentId", t15);
      t17 = A.QuickMap_asListOfMap(json, "multisigInfos");
      t17.toString;
      t18 = A._arrayInstanceType(t17);
      t19 = t18._eval$1("MappedListIterable<1,MoneroMultisigOutputInfo>");
      t19 = A.List_List$of(new A.MappedListIterable(t17, t18._eval$1("MoneroMultisigOutputInfo(1)")._as(new A.MoneroUnlockedMultisigPayment_MoneroUnlockedMultisigPayment$fromStruct_closure()), t19), true, t19._eval$1("ListIterable.E"));
      t3 = A.QuickMap_as(json, "globalIndex", t3);
      t19 = A.List_List$unmodifiable(t19, type$.MoneroMultisigOutputInfo);
      if (t15 == null)
        t15 = null;
      else {
        A.BytesUtils_validateListOfBytes(t15);
        t15 = A.List_List$unmodifiable(t15, t14);
      }
      if (t16 == null)
        t14 = null;
      else {
        A.BytesUtils_validateListOfBytes(t16);
        t14 = A.List_List$unmodifiable(t16, t14);
      }
      return new A.MoneroUnlockedMultisigPayment(t19, B.MoneroPaymentType_2_unlockedMultisig, new A.MoneroUnlockedMultisigOutput(t13, t9, t8, t10, t4, t1, B.MoneroOutputType_1_unlocked, t7, t6, t12, t11, t2), t5, t15, t14, t3);
    },
    MoneroUnlockedMultisigPayment_layout(property) {
      var _null = null;
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroUnlockedMultisigOutput_layout("output"), A.RawBytesLayout_RawBytesLayout(32, "txPubkey"), A.LayoutConst_optional(A.RawBytesLayout_RawBytesLayout(8, _null), "paymentId"), A.LayoutConst_optional(A.RawBytesLayout_RawBytesLayout(8, _null), "encryptedPaymentid"), A.MoneroBigIntVarInt$(new A.BigIntLayout(8, _null), "globalIndex"), A.MoneroLayoutConst_variantVec(A.MoneroMultisigOutputInfo_layout(_null), "multisigInfos", type$.Map_String_dynamic)], type$.JSArray_Layout_dynamic), false, property);
    },
    SpendablePayment_SpendablePayment$fromStruct(json, $T) {
      var t2, t3, t4,
        t1 = A.MoneroPayment_MoneroPayment$fromStruct(A.QuickMap_asMap(json, "payment", type$.Map_String_dynamic), type$.MoneroOutput);
      A.checkTypeBound($T, type$.MoneroPayment_MoneroOutput, "E", "cast");
      if (!$T._is(t1))
        A.throwExpression(A.DartMoneroPluginException$("Payment casting failed.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", A.createRuntimeType($T).toString$0(0), "type", t1.type.name], type$.String, type$.dynamic)));
      $T._as(t1);
      t2 = A.QuickMap_asListOfMap(json, "outs");
      t2.toString;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,OutsEntery>");
      t4 = A.List_List$of(new A.MappedListIterable(t2, t3._eval$1("OutsEntery(1)")._as(new A.SpendablePayment_SpendablePayment$fromStruct_closure()), t4), true, t4._eval$1("ListIterable.E"));
      t3 = A.QuickMap_as(json, "realOutIndex", type$.int);
      return new A.SpendablePayment(t1, A.List_List$unmodifiable(t4, type$.OutsEntery), A.IntHelper_get_asUint32(t3), $T._eval$1("SpendablePayment<0>"));
    },
    SpendablePayment_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroPayment_layout("payment"), A.MoneroLayoutConst_variantVec(A.OutsEntery_layout(null), "outs", type$.Map_String_dynamic), new A.MoneroIntVarInt(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, "realOutIndex")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroTxDestination_MoneroTxDestination$deserialize(bytes) {
      return A.MoneroTxDestination_MoneroTxDestination$fromStruct(A.MoneroSerialization_deserialize(bytes, A.MoneroTxDestination_layout(null)));
    },
    MoneroTxDestination_MoneroTxDestination$fromStruct(json) {
      var t1 = A.QuickMap_as(json, "amount", type$.BigInt),
        t2 = A.MoneroAddress_MoneroAddress(A.QuickMap_as(A.QuickMap_asMap(json, "address", type$.Map_String_dynamic), "address", type$.String));
      return new A.MoneroTxDestination(A.BigIntHelper_get_asUint64(t1), t2);
    },
    MoneroTxDestination_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), "amount"), A.MoneroAddress_layout("address")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroAccountIndex_MoneroAccountIndex$deserialize(bytes) {
      return A.MoneroAccountIndex_MoneroAccountIndex$fromStruct(A.MoneroSerialization_deserialize(bytes, A.MoneroAccountIndex_layout(null)));
    },
    MoneroAccountIndex_MoneroAccountIndex$fromStruct(json) {
      var t1 = type$.int;
      return new A.MoneroAccountIndex(A.QuickMap_as(json, "major", t1), A.QuickMap_as(json, "minor", t1));
    },
    MoneroAccountIndex_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.IntegerLayout$(4, B.C_Endian0, "major", false), A.IntegerLayout$(4, B.C_Endian0, "minor", false)], type$.JSArray_Layout_dynamic), false, property);
    },
    OutsEntery_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), "index"), A.CtKey_layout("key")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroOutputType: function MoneroOutputType(t0, t1) {
      this.value = t0;
      this.name = t1;
    },
    MoneroPaymentType: function MoneroPaymentType(t0, t1) {
      this.value = t0;
      this.name = t1;
    },
    MoneroPaymentType_fromName_closure: function MoneroPaymentType_fromName_closure(t0) {
      this.name = t0;
    },
    MoneroPaymentType_fromName_closure0: function MoneroPaymentType_fromName_closure0(t0) {
      this.name = t0;
    },
    MoneroOutput: function MoneroOutput() {
    },
    MoneroLockedOutput: function MoneroLockedOutput(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.amount = t0;
      _.accountIndex = t1;
      _.type = t2;
      _.mask = t3;
      _.derivation = t4;
      _.outputPublicKey = t5;
      _.unlockTime = t6;
      _.realIndex = t7;
    },
    MoneroUnlockedOutput: function MoneroUnlockedOutput(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.ephemeralSecretKey = t0;
      _.ephemeralPublicKey = t1;
      _.keyImage = t2;
      _.amount = t3;
      _.accountIndex = t4;
      _.type = t5;
      _.mask = t6;
      _.derivation = t7;
      _.outputPublicKey = t8;
      _.unlockTime = t9;
      _.realIndex = t10;
    },
    MoneroUnlockedMultisigOutput: function MoneroUnlockedMultisigOutput(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.multisigKeyImage = t0;
      _.ephemeralSecretKey = t1;
      _.ephemeralPublicKey = t2;
      _.keyImage = t3;
      _.amount = t4;
      _.accountIndex = t5;
      _.type = t6;
      _.mask = t7;
      _.derivation = t8;
      _.outputPublicKey = t9;
      _.unlockTime = t10;
      _.realIndex = t11;
    },
    MoneroPayment: function MoneroPayment() {
    },
    MoneroLockedPayment: function MoneroLockedPayment(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.type = t0;
      _.output = t1;
      _.txPubkey = t2;
      _.paymentId = t3;
      _.encryptedPaymentid = t4;
      _.globalIndex = t5;
    },
    MoneroUnLockedPayment: function MoneroUnLockedPayment(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.type = t0;
      _.output = t1;
      _.txPubkey = t2;
      _.paymentId = t3;
      _.encryptedPaymentid = t4;
      _.globalIndex = t5;
      _.$ti = t6;
    },
    MoneroUnlockedMultisigPayment: function MoneroUnlockedMultisigPayment(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.multisigInfos = t0;
      _.type = t1;
      _.output = t2;
      _.txPubkey = t3;
      _.paymentId = t4;
      _.encryptedPaymentid = t5;
      _.globalIndex = t6;
    },
    MoneroUnlockedMultisigPayment_MoneroUnlockedMultisigPayment$fromStruct_closure: function MoneroUnlockedMultisigPayment_MoneroUnlockedMultisigPayment$fromStruct_closure() {
    },
    MoneroUnlockedMultisigPayment_toLayoutStruct_closure: function MoneroUnlockedMultisigPayment_toLayoutStruct_closure() {
    },
    SpendablePayment: function SpendablePayment(t0, t1, t2, t3) {
      var _ = this;
      _.payment = t0;
      _.outs = t1;
      _.realOutIndex = t2;
      _.$ti = t3;
    },
    SpendablePayment_SpendablePayment$fromStruct_closure: function SpendablePayment_SpendablePayment$fromStruct_closure() {
    },
    SpendablePayment_toLayoutStruct_closure: function SpendablePayment_toLayoutStruct_closure() {
    },
    SpendablePayment_toJson_closure: function SpendablePayment_toJson_closure() {
    },
    MoneroTxDestination: function MoneroTxDestination(t0, t1) {
      this.amount = t0;
      this.address = t1;
    },
    MoneroAccountIndex: function MoneroAccountIndex(t0, t1) {
      this.major = t0;
      this.minor = t1;
    },
    OutsEntery: function OutsEntery(t0, t1) {
      this.index = t0;
      this.key = t1;
    },
    TxEpemeralKeyResult: function TxEpemeralKeyResult(t0, t1, t2) {
      this.txOut = t0;
      this.amountKey = t1;
      this.additionalTxPubKey = t2;
    },
    MoneroTxVersion_fromBase58(proof) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_MzG, new A.MoneroTxVersion_fromBase58_closure(proof), new A.MoneroTxVersion_fromBase58_closure0(proof));
    },
    MoneroTxProof_MoneroTxProof(sharedSecret, signatures, version) {
      var t1 = sharedSecret.length;
      if (t1 === 0 || t1 !== signatures.length)
        throw A.wrapException(B.DartMoneroPluginException_qHh);
      return new A.MoneroTxProof(version, A.List_List$unmodifiable(sharedSecret, type$.MoneroPublicKey), A.List_List$unmodifiable(signatures, type$.MECSignature));
    },
    MoneroTxProof_MoneroTxProof$fromBase58(proof) {
      var version, b58, decode, sharedSecret, signatures, sigLen, i, start, part, t1, t2, t3, t4, t5, keyBytes, t6, result, result0, exception,
        _s19_ = "Invalid proof data.",
        _s44_ = "EcSignature failed. incorrect key 32 length.";
      try {
        version = A.MoneroTxVersion_fromBase58(proof);
        b58 = B.JSString_methods.substring$1(proof, version.name.length);
        decode = A.Base58XmrDecoder_decode(b58);
        if (J.get$length$asx(decode) < 96 || B.JSInt_methods.$mod(J.get$length$asx(decode), 96) !== 0) {
          t1 = A.DartMoneroPluginException$(_s19_, A.LinkedHashMap_LinkedHashMap$_literal(["proof", proof], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
        sharedSecret = A._setArrayType([], type$.JSArray_MoneroPublicKey);
        signatures = A._setArrayType([], type$.JSArray_MECSignature);
        sigLen = J.get$length$asx(decode) / 96 | 0;
        i = 0;
        t1 = type$.int;
        t2 = type$.String;
        t3 = type$.dynamic;
        while (true) {
          t4 = i;
          t5 = sigLen;
          if (typeof t4 !== "number")
            return t4.$lt();
          if (typeof t5 !== "number")
            return A.iae(t5);
          if (!(t4 < t5))
            break;
          t4 = i;
          if (typeof t4 !== "number")
            return A.iae(t4);
          start = 96 * t4;
          t4 = start;
          if (typeof t4 !== "number")
            return t4.$add();
          part = J.sublist$2$ax(decode, start, t4 + 96);
          keyBytes = J.sublist$2$ax(part, 0, 32);
          if (keyBytes.length === 33)
            keyBytes = B.JSArray_methods.sublist$1(keyBytes, 1);
          t4 = $.$get$Curves_generatorED25519();
          J.add$1$ax(sharedSecret, new A.MoneroPublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint(t4, A.EDPoint_EDPoint$fromBytes(t4.curve, keyBytes))));
          t4 = J.sublist$1$ax(part, 32);
          t5 = t4.length;
          if (t5 !== 64)
            A.throwExpression(A.DartMoneroPluginException$("Invalid EcSignature bytes length.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", 64, "length", t5], t2, t3)));
          t5 = B.JSArray_methods.sublist$2(t4, 0, 32);
          t4 = B.JSArray_methods.sublist$1(t4, 32);
          t6 = t5.length;
          if (t6 !== 32)
            A.throwExpression(A.DartMoneroPluginException$(_s44_, A.LinkedHashMap_LinkedHashMap$_literal(["excepted", 32, "length", t6], t2, t3)));
          A.BytesUtils_validateListOfBytes(t5);
          result = A.List_List$from(t5, false, t1);
          result.fixed$length = Array;
          result.immutable$list = Array;
          t5 = t4.length;
          if (t5 !== 32)
            A.throwExpression(A.DartMoneroPluginException$(_s44_, A.LinkedHashMap_LinkedHashMap$_literal(["excepted", 32, "length", t5], t2, t3)));
          A.BytesUtils_validateListOfBytes(t4);
          result0 = A.List_List$from(t4, false, t1);
          result0.fixed$length = Array;
          result0.immutable$list = Array;
          J.add$1$ax(signatures, new A.MECSignature(result, result0));
          t4 = i;
          if (typeof t4 !== "number")
            return t4.$add();
          i = t4 + 1;
        }
        t1 = A.List_List$unmodifiable(sharedSecret, type$.MoneroPublicKey);
        t2 = A.List_List$unmodifiable(signatures, type$.MECSignature);
        return new A.MoneroTxProof(version, t1, t2);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.DartMoneroPluginException)
          throw exception;
        else {
          t1 = A.DartMoneroPluginException$(_s19_, A.LinkedHashMap_LinkedHashMap$_literal(["proof", proof], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
      }
    },
    MoneroTxVersion: function MoneroTxVersion(t0, t1) {
      this.name = t0;
      this.version = t1;
    },
    MoneroTxVersion_fromBase58_closure: function MoneroTxVersion_fromBase58_closure(t0) {
      this.proof = t0;
    },
    MoneroTxVersion_fromBase58_closure0: function MoneroTxVersion_fromBase58_closure0(t0) {
      this.proof = t0;
    },
    MoneroTxProof: function MoneroTxProof(t0, t1, t2) {
      this.version = t0;
      this.sharedSecret = t1;
      this.signatures = t2;
    },
    RctSigPrunable_RctSigPrunable$fromStruct(json, type) {
      switch (type) {
        case B.RCTType_rctTypeBulletproofPlus_6:
          return A.RctSigPrunableBulletproofPlus_RctSigPrunableBulletproofPlus$fromStruct(json);
        case B.RCTType_rctTypeBulletproof_3:
          return A.RctSigPrunableBulletproof_RctSigPrunableBulletproof$fromStruct(json);
        case B.RCTType_rctTypeBulletproof2_4:
          return A.RctSigPrunableBulletproof2_RctSigPrunableBulletproof2$fromStruct(json);
        case B.RCTType_rctTypeCLSAG_5:
          return A.RctSigPrunableCLSAG_RctSigPrunableCLSAG$fromStruct(json);
        case B.RCTType_rctTypeSimple_2:
        case B.RCTType_rctTypeFull_1:
          return A.RctSigPrunableRangeSigs_RctSigPrunableRangeSigs$fromStruct(json);
        default:
          throw A.wrapException(A.DartMoneroPluginException$("Invalid RCT type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type.toString$0(0)], type$.String, type$.dynamic)));
      }
    },
    RctSigPrunable_layout(inputLength, mixinLength, outputLength, type) {
      var _null = null;
      switch (type) {
        case B.RCTType_rctTypeNull_0:
          return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, _null);
        case B.RCTType_rctTypeBulletproofPlus_6:
          return A.RctSigPrunableBulletproofPlus_layout(inputLength, mixinLength, _null);
        case B.RCTType_rctTypeBulletproof_3:
          return A.RctSigPrunableBulletproof_layout(inputLength, mixinLength, _null);
        case B.RCTType_rctTypeBulletproof2_4:
          return A.RctSigPrunableBulletproof2_layout(inputLength, mixinLength, _null);
        case B.RCTType_rctTypeCLSAG_5:
          return A.RctSigPrunableCLSAG_layout(inputLength, mixinLength, _null);
        case B.RCTType_rctTypeSimple_2:
        case B.RCTType_rctTypeFull_1:
          return A.RctSigPrunableRangeSigs_layout(inputLength, mixinLength, outputLength, _null, type);
        default:
          throw A.wrapException(A.DartMoneroPluginException$("Invalid RCT type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type.toString$0(0)], type$.String, type$.dynamic)));
      }
    },
    BulletproofPlus$(a, a1, b, d1, l, r, r1, s1, v) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11,
        _s17_ = "BulletproofPlus v";
      A.BytesUtils_validateListOfBytes(a);
      t1 = type$.int;
      t2 = A.ListValidator_exc(A.List_List$unmodifiable(a, t1), 32, _s17_, t1);
      A.BytesUtils_validateListOfBytes(a1);
      t3 = A.ListValidator_exc(A.List_List$unmodifiable(a1, t1), 32, _s17_, t1);
      A.BytesUtils_validateListOfBytes(b);
      t4 = A.ListValidator_exc(A.List_List$unmodifiable(b, t1), 32, _s17_, t1);
      A.BytesUtils_validateListOfBytes(r1);
      t5 = A.ListValidator_exc(A.List_List$unmodifiable(r1, t1), 32, _s17_, t1);
      A.BytesUtils_validateListOfBytes(s1);
      t6 = A.ListValidator_exc(A.List_List$unmodifiable(s1, t1), 32, _s17_, t1);
      A.BytesUtils_validateListOfBytes(d1);
      t7 = A._arrayInstanceType(l);
      t8 = t7._eval$1("MappedListIterable<1,List<int>>");
      t9 = type$.List_int;
      t10 = A._arrayInstanceType(r);
      t11 = t10._eval$1("MappedListIterable<1,List<int>>");
      return new A.BulletproofPlus(v, t2, t3, t4, t5, t6, A.ListValidator_exc(A.List_List$unmodifiable(d1, t1), 32, _s17_, t1), A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(l, t7._eval$1("List<int>(1)")._as(new A.BulletproofPlus_closure()), t8), true, t8._eval$1("ListIterable.E")), t9), A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(r, t10._eval$1("List<int>(1)")._as(new A.BulletproofPlus_closure0()), t11), true, t11._eval$1("ListIterable.E")), t9));
    },
    BulletproofPlus_layout(property) {
      var t1 = type$.List_int;
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "a"), A.RawBytesLayout_RawBytesLayout(32, "a1"), A.RawBytesLayout_RawBytesLayout(32, "b"), A.RawBytesLayout_RawBytesLayout(32, "r1"), A.RawBytesLayout_RawBytesLayout(32, "s1"), A.RawBytesLayout_RawBytesLayout(32, "d1"), A.MoneroLayoutConst_variantVec(A.RawBytesLayout_RawBytesLayout(32, null), "l", t1), A.MoneroLayoutConst_variantVec(A.RawBytesLayout_RawBytesLayout(32, null), "r", t1)], type$.JSArray_Layout_dynamic), false, null);
    },
    Bulletproof$(a, a_, b, l, mu, r, s, t, t1, t2, taux) {
      var t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13,
        _s13_ = "Bulletproof v";
      A.BytesUtils_validateListOfBytes(a);
      t3 = type$.int;
      t4 = A.ListValidator_exc(A.List_List$unmodifiable(a, t3), 32, "Bulletproof a", t3);
      A.BytesUtils_validateListOfBytes(s);
      t5 = A.ListValidator_exc(A.List_List$unmodifiable(s, t3), 32, "Bulletproof s", t3);
      A.BytesUtils_validateListOfBytes(t1);
      t1 = A.ListValidator_exc(A.List_List$unmodifiable(t1, t3), 32, "Bulletproof t1", t3);
      A.BytesUtils_validateListOfBytes(t2);
      t2 = A.ListValidator_exc(A.List_List$unmodifiable(t2, t3), 32, "Bulletproof t2", t3);
      A.BytesUtils_validateListOfBytes(taux);
      t6 = A.ListValidator_exc(A.List_List$unmodifiable(taux, t3), 32, "Bulletproof taux", t3);
      A.BytesUtils_validateListOfBytes(mu);
      t7 = A.ListValidator_exc(A.List_List$unmodifiable(mu, t3), 32, _s13_, t3);
      t8 = A._arrayInstanceType(l);
      t9 = t8._eval$1("MappedListIterable<1,List<int>>");
      t10 = type$.List_int;
      t9 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(l, t8._eval$1("List<int>(1)")._as(new A.Bulletproof_closure()), t9), true, t9._eval$1("ListIterable.E")), t10);
      t8 = A._arrayInstanceType(r);
      t11 = t8._eval$1("MappedListIterable<1,List<int>>");
      t11 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(r, t8._eval$1("List<int>(1)")._as(new A.Bulletproof_closure0()), t11), true, t11._eval$1("ListIterable.E")), t10);
      A.BytesUtils_validateListOfBytes(a_);
      t8 = A.ListValidator_exc(A.List_List$unmodifiable(a_, t3), 32, "Bulletproof a_", t3);
      A.BytesUtils_validateListOfBytes(b);
      t12 = A.ListValidator_exc(A.List_List$unmodifiable(b, t3), 32, "Bulletproof b", t3);
      A.BytesUtils_validateListOfBytes(t);
      t3 = A.ListValidator_exc(A.List_List$unmodifiable(t, t3), 32, _s13_, t3);
      t13 = type$.MappedListIterable_of_List_int_and_List_int;
      A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(B.List_empty1, type$.List_int_Function_List_int._as(new A.Bulletproof_closure1()), t13), true, t13._eval$1("ListIterable.E")), t10);
      return new A.Bulletproof(t4, t5, t1, t2, t6, t7, t9, t11, t8, t12, t3);
    },
    Bulletproof_Bulletproof$fromStruct(json) {
      var t9,
        t1 = type$.List_int,
        t2 = A.QuickMap_asBytes(json, "a", t1),
        t3 = A.QuickMap_asBytes(json, "s", t1),
        t4 = A.QuickMap_asBytes(json, "t1", t1),
        t5 = A.QuickMap_asBytes(json, "t2", t1),
        t6 = A.QuickMap_asBytes(json, "taux", t1),
        t7 = A.QuickMap_asBytes(json, "mu", t1),
        t8 = A.QuickMap_asListBytes(json, "l");
      t8.toString;
      t9 = A.QuickMap_asListBytes(json, "r");
      t9.toString;
      return A.Bulletproof$(t2, A.QuickMap_asBytes(json, "a_", t1), A.QuickMap_asBytes(json, "b", t1), t8, t7, t9, t3, A.QuickMap_asBytes(json, "t", t1), t4, t5, t6);
    },
    Bulletproof_layout(property) {
      var t1 = type$.List_int;
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "a"), A.RawBytesLayout_RawBytesLayout(32, "s"), A.RawBytesLayout_RawBytesLayout(32, "t1"), A.RawBytesLayout_RawBytesLayout(32, "t2"), A.RawBytesLayout_RawBytesLayout(32, "taux"), A.RawBytesLayout_RawBytesLayout(32, "mu"), A.MoneroLayoutConst_variantVec(A.RawBytesLayout_RawBytesLayout(32, null), "l", t1), A.MoneroLayoutConst_variantVec(A.RawBytesLayout_RawBytesLayout(32, null), "r", t1), A.RawBytesLayout_RawBytesLayout(32, "a_"), A.RawBytesLayout_RawBytesLayout(32, "b"), A.RawBytesLayout_RawBytesLayout(32, "t")], type$.JSArray_Layout_dynamic), false, null);
    },
    Clsag$(c1, d, i, s) {
      var t3, t4,
        t1 = A._arrayInstanceType(s),
        t2 = t1._eval$1("MappedListIterable<1,List<int>>");
      t2 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(s, t1._eval$1("List<int>(1)")._as(new A.Clsag_closure()), t2), true, t2._eval$1("ListIterable.E")), type$.List_int);
      A.BytesUtils_validateListOfBytes(c1);
      t1 = type$.int;
      t3 = A.List_List$unmodifiable(c1, t1);
      A.BytesUtils_validateListOfBytes(d);
      t4 = A.List_List$unmodifiable(d, t1);
      if (i != null) {
        A.BytesUtils_validateListOfBytes(i);
        A.List_List$unmodifiable(i, t1);
      }
      return new A.Clsag(t2, t3, t4);
    },
    Clsag_Clsag$fromStruct(json) {
      var t2,
        t1 = A.QuickMap_asListBytes(json, "s");
      t1.toString;
      t2 = type$.List_int;
      return A.Clsag$(A.QuickMap_asBytes(json, "c1", t2), A.QuickMap_asBytes(json, "d", t2), null, t1);
    },
    Clsag_layout(mixinLength, property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.SequenceLayout_SequenceLayout(new A.ConstantLayout(mixinLength, 0, null, type$.ConstantLayout_dynamic), A.RawBytesLayout_RawBytesLayout(32, null), "s", type$.dynamic), A.RawBytesLayout_RawBytesLayout(32, "c1"), A.RawBytesLayout_RawBytesLayout(32, "d")], type$.JSArray_Layout_dynamic), false, property);
    },
    RctSigPrunableBulletproofPlus$(bulletproofPlus, clsag, pseudoOuts) {
      var t1 = A.List_List$unmodifiable(bulletproofPlus, type$.BulletproofPlus),
        t2 = A._arrayInstanceType(pseudoOuts),
        t3 = t2._eval$1("MappedListIterable<1,List<int>>");
      t3 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(pseudoOuts, t2._eval$1("List<int>(1)")._as(new A.RctSigPrunableBulletproofPlus_closure()), t3), true, t3._eval$1("ListIterable.E")), type$.List_int);
      return new A.RctSigPrunableBulletproofPlus(t1, A.List_List$unmodifiable(clsag, type$.Clsag), t3);
    },
    RctSigPrunableBulletproofPlus_RctSigPrunableBulletproofPlus$fromStruct(json) {
      var t2, t3, t4,
        t1 = A.QuickMap_asListOfMap(json, "clsag");
      t1.toString;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,Clsag>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Clsag(1)")._as(new A.RctSigPrunableBulletproofPlus_RctSigPrunableBulletproofPlus$fromStruct_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t2 = A.QuickMap_asListOfMap(json, "bulletproofPlus");
      t2.toString;
      t1 = A._arrayInstanceType(t2);
      t4 = t1._eval$1("MappedListIterable<1,BulletproofPlus>");
      t4 = A.List_List$of(new A.MappedListIterable(t2, t1._eval$1("BulletproofPlus(1)")._as(new A.RctSigPrunableBulletproofPlus_RctSigPrunableBulletproofPlus$fromStruct_closure0()), t4), true, t4._eval$1("ListIterable.E"));
      t1 = A.QuickMap_asListBytes(json, "pseudoOuts");
      t1.toString;
      return A.RctSigPrunableBulletproofPlus$(t4, t3, t1);
    },
    RctSigPrunableBulletproofPlus_layout(inputLength, mixinLength, property) {
      var _null = null,
        t1 = type$.ConstantLayout_dynamic,
        t2 = type$.dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroLayoutConst_variantVec(A.BulletproofPlus_layout(_null), "bulletproofPlus", type$.Map_String_dynamic), A.SequenceLayout_SequenceLayout(new A.ConstantLayout(inputLength, 0, _null, t1), A.Clsag_layout(mixinLength, _null), "clsag", t2), A.SequenceLayout_SequenceLayout(new A.ConstantLayout(inputLength, 0, _null, t1), A.RawBytesLayout_RawBytesLayout(32, _null), "pseudoOuts", t2)], type$.JSArray_Layout_dynamic), false, property);
    },
    MgSig$(cc, ss) {
      var t1 = A._arrayInstanceType(ss),
        t2 = t1._eval$1("MappedListIterable<1,List<List<int>>>");
      t2 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(ss, t1._eval$1("List<List<int>>(1)")._as(new A.MgSig_closure()), t2), true, t2._eval$1("ListIterable.E")), type$.List_List_int);
      t1 = type$.MappedListIterable_of_List_int_and_List_int;
      t1 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(B.List_empty1, type$.List_int_Function_List_int._as(new A.MgSig_closure0()), t1), true, t1._eval$1("ListIterable.E")), type$.List_int);
      A.BytesUtils_validateListOfBytes(cc);
      return new A.MgSig(t2, A.List_List$unmodifiable(cc, type$.int), t1);
    },
    MgSig_MgSig$fromStruct(json) {
      var t1 = A.QuickMap_asListOfListBytes(json, "ss");
      t1.toString;
      return A.MgSig$(A.QuickMap_as(json, "cc", type$.List_int), t1);
    },
    MgSig_layout(mixinLength, property, ss2ElementLength) {
      var _null = null,
        t1 = type$.ConstantLayout_dynamic,
        t2 = type$.dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.SequenceLayout_SequenceLayout(new A.ConstantLayout(mixinLength, 0, _null, t1), A.SequenceLayout_SequenceLayout(new A.ConstantLayout(ss2ElementLength, 0, _null, t1), A.RawBytesLayout_RawBytesLayout(32, _null), _null, t2), "ss", t2), A.RawBytesLayout_RawBytesLayout(32, "cc")], type$.JSArray_Layout_dynamic), false, property);
    },
    RctSigPrunableCLSAG$(bulletproof, clsag, pseudoOuts) {
      var t1 = A.List_List$unmodifiable(bulletproof, type$.Bulletproof),
        t2 = A._arrayInstanceType(pseudoOuts),
        t3 = t2._eval$1("MappedListIterable<1,List<int>>");
      t3 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(pseudoOuts, t2._eval$1("List<int>(1)")._as(new A.RctSigPrunableCLSAG_closure()), t3), true, t3._eval$1("ListIterable.E")), type$.List_int);
      return new A.RctSigPrunableCLSAG(t1, A.List_List$unmodifiable(clsag, type$.Clsag), t3);
    },
    RctSigPrunableCLSAG_RctSigPrunableCLSAG$fromStruct(json) {
      var t2, t3, t4,
        t1 = A.QuickMap_asListOfMap(json, "clsag");
      t1.toString;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,Clsag>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Clsag(1)")._as(new A.RctSigPrunableCLSAG_RctSigPrunableCLSAG$fromStruct_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t2 = A.QuickMap_asListOfMap(json, "bulletproof");
      t2.toString;
      t1 = A._arrayInstanceType(t2);
      t4 = t1._eval$1("MappedListIterable<1,Bulletproof>");
      t4 = A.List_List$of(new A.MappedListIterable(t2, t1._eval$1("Bulletproof(1)")._as(new A.RctSigPrunableCLSAG_RctSigPrunableCLSAG$fromStruct_closure0()), t4), true, t4._eval$1("ListIterable.E"));
      t1 = A.QuickMap_asListBytes(json, "pseudoOuts");
      t1.toString;
      return A.RctSigPrunableCLSAG$(t4, t3, t1);
    },
    RctSigPrunableCLSAG_layout(inputLength, mixinLength, property) {
      var _null = null,
        t1 = type$.ConstantLayout_dynamic,
        t2 = type$.dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroLayoutConst_variantVec(A.Bulletproof_layout(_null), "bulletproof", type$.Map_String_dynamic), A.SequenceLayout_SequenceLayout(new A.ConstantLayout(inputLength, 0, _null, t1), A.Clsag_layout(mixinLength, _null), "clsag", t2), A.SequenceLayout_SequenceLayout(new A.ConstantLayout(inputLength, 0, _null, t1), A.RawBytesLayout_RawBytesLayout(32, _null), "pseudoOuts", t2)], type$.JSArray_Layout_dynamic), false, property);
    },
    RctSigPrunableBulletproof2$(bulletproof, mgs, pseudoOuts) {
      var t1 = A._arrayInstanceType(pseudoOuts),
        t2 = t1._eval$1("MappedListIterable<1,List<int>>");
      return new A.RctSigPrunableBulletproof2(A.List_List$unmodifiable(bulletproof, type$.Bulletproof), A.List_List$unmodifiable(mgs, type$.MgSig), A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(pseudoOuts, t1._eval$1("List<int>(1)")._as(new A.RctSigPrunableBulletproof2_closure()), t2), true, t2._eval$1("ListIterable.E")), type$.List_int));
    },
    RctSigPrunableBulletproof2_RctSigPrunableBulletproof2$fromStruct(json) {
      var t2, t3, t4, t5,
        t1 = A.QuickMap_asListOfMap(json, "bulletproof");
      t1.toString;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,Bulletproof>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Bulletproof(1)")._as(new A.RctSigPrunableBulletproof2_RctSigPrunableBulletproof2$fromStruct_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t2 = A.QuickMap_asListBytes(json, "pseudoOuts");
      t2.toString;
      t1 = A.QuickMap_asListOfMap(json, "mgs");
      t1.toString;
      t4 = A._arrayInstanceType(t1);
      t5 = t4._eval$1("MappedListIterable<1,MgSig>");
      return A.RctSigPrunableBulletproof2$(t3, A.List_List$of(new A.MappedListIterable(t1, t4._eval$1("MgSig(1)")._as(new A.RctSigPrunableBulletproof2_RctSigPrunableBulletproof2$fromStruct_closure0()), t5), true, t5._eval$1("ListIterable.E")), t2);
    },
    RctSigPrunableBulletproof2_layout(inputLength, mixinLength, property) {
      var _null = null,
        t1 = type$.ConstantLayout_dynamic,
        t2 = type$.dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroLayoutConst_variantVec(A.Bulletproof_layout(_null), "bulletproof", type$.Map_String_dynamic), A.SequenceLayout_SequenceLayout(new A.ConstantLayout(inputLength, 0, _null, t1), A.MgSig_layout(mixinLength, "mgs", 2), "mgs", t2), A.SequenceLayout_SequenceLayout(new A.ConstantLayout(inputLength, 0, _null, t1), A.RawBytesLayout_RawBytesLayout(32, _null), "pseudoOuts", t2)], type$.JSArray_Layout_dynamic), false, property);
    },
    RctSigPrunableBulletproof$(bulletproof, mgs, pseudoOuts) {
      var t1 = A.List_List$unmodifiable(bulletproof, type$.Bulletproof),
        t2 = A.List_List$unmodifiable(mgs, type$.MgSig),
        t3 = A._arrayInstanceType(pseudoOuts),
        t4 = t3._eval$1("MappedListIterable<1,List<int>>");
      return new A.RctSigPrunableBulletproof(t1, A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(pseudoOuts, t3._eval$1("List<int>(1)")._as(new A.RctSigPrunableBulletproof_closure()), t4), true, t4._eval$1("ListIterable.E")), type$.List_int), t2);
    },
    RctSigPrunableBulletproof_RctSigPrunableBulletproof$fromStruct(json) {
      var t2, t3, t4, t5,
        t1 = A.QuickMap_asListOfMap(json, "bulletproof");
      t1.toString;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,Bulletproof>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Bulletproof(1)")._as(new A.RctSigPrunableBulletproof_RctSigPrunableBulletproof$fromStruct_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t2 = A.QuickMap_asListBytes(json, "pseudoOuts");
      t2.toString;
      t1 = A.QuickMap_asListOfMap(json, "mgs");
      t1.toString;
      t4 = A._arrayInstanceType(t1);
      t5 = t4._eval$1("MappedListIterable<1,MgSig>");
      return A.RctSigPrunableBulletproof$(t3, A.List_List$of(new A.MappedListIterable(t1, t4._eval$1("MgSig(1)")._as(new A.RctSigPrunableBulletproof_RctSigPrunableBulletproof$fromStruct_closure0()), t5), true, t5._eval$1("ListIterable.E")), t2);
    },
    RctSigPrunableBulletproof_layout(inputLength, mixinLength, property) {
      var _null = null,
        t1 = type$.ConstantLayout_dynamic,
        t2 = type$.dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_vec(A.Bulletproof_layout(_null), "bulletproof"), A.SequenceLayout_SequenceLayout(new A.ConstantLayout(inputLength, 0, _null, t1), A.MgSig_layout(mixinLength, "mgs", 2), "mgs", t2), A.SequenceLayout_SequenceLayout(new A.ConstantLayout(inputLength, 0, _null, t1), A.RawBytesLayout_RawBytesLayout(32, _null), "pseudoOuts", t2)], type$.JSArray_Layout_dynamic), false, property);
    },
    BoroSig$(ee, s0, s1) {
      var t4,
        t1 = A._arrayInstanceType(s0),
        t2 = t1._eval$1("MappedListIterable<1,List<int>>"),
        t3 = type$.List_int;
      t2 = A.ListValidator_exc(A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(s0, t1._eval$1("List<int>(1)")._as(new A.BoroSig_closure()), t2), true, t2._eval$1("ListIterable.E")), t3), 64, "BoroSig s0", t3);
      t1 = A._arrayInstanceType(s1);
      t4 = t1._eval$1("MappedListIterable<1,List<int>>");
      t3 = A.ListValidator_exc(A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(s1, t1._eval$1("List<int>(1)")._as(new A.BoroSig_closure0()), t4), true, t4._eval$1("ListIterable.E")), t3), 64, "BoroSig s1", t3);
      A.BytesUtils_validateListOfBytes(ee);
      t4 = type$.int;
      return new A.BoroSig(t2, t3, A.ListValidator_exc(A.List_List$unmodifiable(ee, t4), 32, "BoroSig ee", t4));
    },
    BoroSig_layout(property) {
      var _null = null,
        t1 = type$.ConstantLayout_dynamic,
        t2 = type$.dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.SequenceLayout_SequenceLayout(new A.ConstantLayout(64, 0, _null, t1), A.RawBytesLayout_RawBytesLayout(32, _null), "s0", t2), A.SequenceLayout_SequenceLayout(new A.ConstantLayout(64, 0, _null, t1), A.RawBytesLayout_RawBytesLayout(32, _null), "s1", t2), A.RawBytesLayout_RawBytesLayout(32, "ee")], type$.JSArray_Layout_dynamic), false, property);
    },
    RangeSig$(asig, ci) {
      var t1 = A._arrayInstanceType(ci),
        t2 = t1._eval$1("MappedListIterable<1,List<int>>");
      return new A.RangeSig(asig, A.ListValidator_exc(A.List_List$of(new A.MappedListIterable(ci, t1._eval$1("List<int>(1)")._as(new A.RangeSig_closure()), t2), true, t2._eval$1("ListIterable.E")), 64, "RangeSig ci", type$.List_int));
    },
    RangeSig_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.BoroSig_layout("asig"), A.SequenceLayout_SequenceLayout(new A.ConstantLayout(64, 0, null, type$.ConstantLayout_dynamic), A.RawBytesLayout_RawBytesLayout(32, null), "ci", type$.dynamic)], type$.JSArray_Layout_dynamic), false, property);
    },
    RctSigPrunableRangeSigs_RctSigPrunableRangeSigs$fromStruct(json) {
      var t2, t3, t4,
        t1 = A.QuickMap_asListOfMap(json, "rangeSig");
      t1.toString;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,RangeSig>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("RangeSig(1)")._as(new A.RctSigPrunableRangeSigs_RctSigPrunableRangeSigs$fromStruct_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t2 = A.QuickMap_asListOfMap(json, "mgs");
      t2.toString;
      t1 = A._arrayInstanceType(t2);
      t4 = t1._eval$1("MappedListIterable<1,MgSig>");
      t4 = A.List_List$of(new A.MappedListIterable(t2, t1._eval$1("MgSig(1)")._as(new A.RctSigPrunableRangeSigs_RctSigPrunableRangeSigs$fromStruct_closure0()), t4), true, t4._eval$1("ListIterable.E"));
      return new A.RctSigPrunableRangeSigs(A.List_List$unmodifiable(t3, type$.RangeSig), t4);
    },
    RctSigPrunableRangeSigs_layout(inputLength, mixinLength, outputLength, property, type) {
      var t2, _null = null,
        t1 = type === B.RCTType_rctTypeSimple_2,
        mgsLen = t1 ? inputLength : 1,
        ss2ElementLength = t1 ? 2 : inputLength + 1;
      t1 = type$.ConstantLayout_dynamic;
      t2 = type$.dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.SequenceLayout_SequenceLayout(new A.ConstantLayout(outputLength, 0, _null, t1), A.RangeSig_layout(_null), "rangeSig", t2), A.SequenceLayout_SequenceLayout(new A.ConstantLayout(mgsLen, 0, _null, t1), A.MgSig_layout(mixinLength, _null, ss2ElementLength), "mgs", t2)], type$.JSArray_Layout_dynamic), false, property);
    },
    RctSigPrunable: function RctSigPrunable() {
    },
    ClsagPrunable: function ClsagPrunable() {
    },
    MgSigPrunable: function MgSigPrunable() {
    },
    BulletproofPlus: function BulletproofPlus(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.v = t0;
      _.a = t1;
      _.a1 = t2;
      _.b = t3;
      _.r1 = t4;
      _.s1 = t5;
      _.d1 = t6;
      _.l = t7;
      _.r = t8;
    },
    BulletproofPlus_toJson_closure: function BulletproofPlus_toJson_closure() {
    },
    BulletproofPlus_toJson_closure0: function BulletproofPlus_toJson_closure0() {
    },
    BulletproofPlus_toJson_closure1: function BulletproofPlus_toJson_closure1() {
    },
    BulletproofPlus_closure: function BulletproofPlus_closure() {
    },
    BulletproofPlus_closure0: function BulletproofPlus_closure0() {
    },
    Bulletproof: function Bulletproof(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.a = t0;
      _.s = t1;
      _.t1 = t2;
      _.t2 = t3;
      _.taux = t4;
      _.mu = t5;
      _.l = t6;
      _.r = t7;
      _.a_ = t8;
      _.b = t9;
      _.t = t10;
    },
    Bulletproof_closure: function Bulletproof_closure() {
    },
    Bulletproof_closure0: function Bulletproof_closure0() {
    },
    Bulletproof_closure1: function Bulletproof_closure1() {
    },
    Clsag: function Clsag(t0, t1, t2) {
      this.s = t0;
      this.c1 = t1;
      this.d = t2;
    },
    Clsag_closure: function Clsag_closure() {
    },
    RctSigPrunableBulletproofPlus: function RctSigPrunableBulletproofPlus(t0, t1, t2) {
      this.bulletproofPlus = t0;
      this.clsag = t1;
      this.pseudoOuts = t2;
    },
    RctSigPrunableBulletproofPlus_closure: function RctSigPrunableBulletproofPlus_closure() {
    },
    RctSigPrunableBulletproofPlus_RctSigPrunableBulletproofPlus$fromStruct_closure: function RctSigPrunableBulletproofPlus_RctSigPrunableBulletproofPlus$fromStruct_closure() {
    },
    RctSigPrunableBulletproofPlus_RctSigPrunableBulletproofPlus$fromStruct_closure0: function RctSigPrunableBulletproofPlus_RctSigPrunableBulletproofPlus$fromStruct_closure0() {
    },
    RctSigPrunableBulletproofPlus_toLayoutStruct_closure: function RctSigPrunableBulletproofPlus_toLayoutStruct_closure() {
    },
    RctSigPrunableBulletproofPlus_toLayoutStruct_closure0: function RctSigPrunableBulletproofPlus_toLayoutStruct_closure0() {
    },
    MgSig: function MgSig(t0, t1, t2) {
      this.ss = t0;
      this.cc = t1;
      this.ii = t2;
    },
    MgSig_closure: function MgSig_closure() {
    },
    MgSig__closure: function MgSig__closure() {
    },
    MgSig_closure0: function MgSig_closure0() {
    },
    MgSig_toJson_closure: function MgSig_toJson_closure() {
    },
    MgSig_toJson__closure: function MgSig_toJson__closure() {
    },
    MgSig_toJson_closure0: function MgSig_toJson_closure0() {
    },
    BulletproofPrunable: function BulletproofPrunable() {
    },
    RctSigPrunableCLSAG: function RctSigPrunableCLSAG(t0, t1, t2) {
      this.bulletproof = t0;
      this.clsag = t1;
      this.pseudoOuts = t2;
    },
    RctSigPrunableCLSAG_closure: function RctSigPrunableCLSAG_closure() {
    },
    RctSigPrunableCLSAG_RctSigPrunableCLSAG$fromStruct_closure: function RctSigPrunableCLSAG_RctSigPrunableCLSAG$fromStruct_closure() {
    },
    RctSigPrunableCLSAG_RctSigPrunableCLSAG$fromStruct_closure0: function RctSigPrunableCLSAG_RctSigPrunableCLSAG$fromStruct_closure0() {
    },
    RctSigPrunableCLSAG_toLayoutStruct_closure: function RctSigPrunableCLSAG_toLayoutStruct_closure() {
    },
    RctSigPrunableCLSAG_toLayoutStruct_closure0: function RctSigPrunableCLSAG_toLayoutStruct_closure0() {
    },
    RctSigPrunableBulletproof2: function RctSigPrunableBulletproof2(t0, t1, t2) {
      this.bulletproof = t0;
      this.mgs = t1;
      this.pseudoOuts = t2;
    },
    RctSigPrunableBulletproof2_closure: function RctSigPrunableBulletproof2_closure() {
    },
    RctSigPrunableBulletproof2_RctSigPrunableBulletproof2$fromStruct_closure: function RctSigPrunableBulletproof2_RctSigPrunableBulletproof2$fromStruct_closure() {
    },
    RctSigPrunableBulletproof2_RctSigPrunableBulletproof2$fromStruct_closure0: function RctSigPrunableBulletproof2_RctSigPrunableBulletproof2$fromStruct_closure0() {
    },
    RctSigPrunableBulletproof2_toLayoutStruct_closure: function RctSigPrunableBulletproof2_toLayoutStruct_closure() {
    },
    RctSigPrunableBulletproof2_toLayoutStruct_closure0: function RctSigPrunableBulletproof2_toLayoutStruct_closure0() {
    },
    RctSigPrunableBulletproof: function RctSigPrunableBulletproof(t0, t1, t2) {
      this.bulletproof = t0;
      this.pseudoOuts = t1;
      this.mgs = t2;
    },
    RctSigPrunableBulletproof_closure: function RctSigPrunableBulletproof_closure() {
    },
    RctSigPrunableBulletproof_RctSigPrunableBulletproof$fromStruct_closure: function RctSigPrunableBulletproof_RctSigPrunableBulletproof$fromStruct_closure() {
    },
    RctSigPrunableBulletproof_RctSigPrunableBulletproof$fromStruct_closure0: function RctSigPrunableBulletproof_RctSigPrunableBulletproof$fromStruct_closure0() {
    },
    RctSigPrunableBulletproof_toLayoutStruct_closure: function RctSigPrunableBulletproof_toLayoutStruct_closure() {
    },
    RctSigPrunableBulletproof_toLayoutStruct_closure0: function RctSigPrunableBulletproof_toLayoutStruct_closure0() {
    },
    BoroSig: function BoroSig(t0, t1, t2) {
      this.s0 = t0;
      this.s1 = t1;
      this.ee = t2;
    },
    BoroSig_closure: function BoroSig_closure() {
    },
    BoroSig_closure0: function BoroSig_closure0() {
    },
    RangeSig: function RangeSig(t0, t1) {
      this.asig = t0;
      this.ci = t1;
    },
    RangeSig_closure: function RangeSig_closure() {
    },
    RctSigPrunableRangeSigs: function RctSigPrunableRangeSigs(t0, t1) {
      this.rangeSig = t0;
      this.mgs = t1;
    },
    RctSigPrunableRangeSigs_RctSigPrunableRangeSigs$fromStruct_closure: function RctSigPrunableRangeSigs_RctSigPrunableRangeSigs$fromStruct_closure() {
    },
    RctSigPrunableRangeSigs_RctSigPrunableRangeSigs$fromStruct_closure0: function RctSigPrunableRangeSigs_RctSigPrunableRangeSigs$fromStruct_closure0() {
    },
    RctSigPrunableRangeSigs_toLayoutStruct_closure: function RctSigPrunableRangeSigs_toLayoutStruct_closure() {
    },
    RctSigPrunableRangeSigs_toLayoutStruct_closure0: function RctSigPrunableRangeSigs_toLayoutStruct_closure0() {
    },
    MoneroTxSignatures_MoneroTxSignatures$fromStruct(json) {
      if (json.containsKey$1("v1"))
        return A.MoneroV1Signature_MoneroV1Signature$fromStruct(json);
      else if (json.containsKey$1("v2"))
        return A.RCTSignature_RCTSignature$fromStruct(json, type$.RCTSignatureBase, type$.RctSigPrunable);
      throw A.wrapException(A.DartMoneroPluginException$("Invalid MoneroTxSignatures json struct.", A.LinkedHashMap_LinkedHashMap$_literal(["data", json], type$.String, type$.dynamic)));
    },
    RCTSignature_RCTSignature$fromStruct(json, $S, $P) {
      var sig = A.RCTSignatureBase_RCTSignatureBase$fromStruct(A.QuickMap_asMap(json, "v2", type$.Map_String_dynamic)),
        p = A.QuickMap_mybeAs(json, "rctSigPrunable", new A.RCTSignature_RCTSignature$fromStruct_closure(sig), type$.nullable_RctSigPrunable, type$.nullable_Map_String_dynamic);
      if (!$S._is(sig))
        throw A.wrapException(B.DartMoneroPluginException_gg9);
      return new A.RCTSignature(sig, $P._eval$1("0?")._as(p), $S._eval$1("@<0>")._bind$1($P)._eval$1("RCTSignature<1,2>"));
    },
    RCTSignature_layout(forcePrunable, inputLength, mixinLength, outputLength, property, transaction) {
      return A.LazyStructLayout_LazyStructLayout(A._setArrayType([new A.LazyLayout(new A.RCTSignature_layout_closure(inputLength, outputLength), "v2", type$.LazyLayout_dynamic), new A.ConditionalLazyLayout(new A.RCTSignature_layout_closure0(transaction, outputLength, inputLength, forcePrunable, mixinLength), "rctSigPrunable", type$.ConditionalLazyLayout_Map_String_dynamic)], type$.JSArray_BaseLazyLayout_dynamic), false, property);
    },
    MoneroV1Signature_MoneroV1Signature$fromStruct(json) {
      var t1, t2, t3;
      if (json.get$isEmpty(json))
        return B.MoneroV1Signature_null;
      t1 = A.QuickMap_asListOfMap(json, "v1");
      t1.toString;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,List<int>>");
      return new A.MoneroV1Signature(A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("List<int>(1)")._as(new A.MoneroV1Signature_MoneroV1Signature$fromStruct_closure()), t3), true, t3._eval$1("ListIterable.E")));
    },
    MoneroV1Signature_layout(inputLength, property, signatureLength) {
      var t1 = {};
      t1.offset = 0;
      return A.LazyStructLayout_LazyStructLayout(A._setArrayType([new A.LazyLayout(new A.MoneroV1Signature_layout_closure(t1, signatureLength, inputLength), "v1", type$.LazyLayout_dynamic)], type$.JSArray_BaseLazyLayout_dynamic), false, property);
    },
    RCTType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_vM5, new A.RCTType_fromName_closure($name), new A.RCTType_fromName_closure0($name));
    },
    RCTSignatureBase_RCTSignatureBase$fromStruct(json) {
      var _s5_ = "value",
        decode = A.MoneroVariantSerialization_toVariantDecodeResult(json),
        t1 = decode.result,
        type = A.RCTType_fromName(A._asString(t1.$index(0, "key")));
      switch (type) {
        case B.RCTType_rctTypeNull_0:
          A.QuickMap_asEmpty(type$.Map_String_dynamic._as(t1.$index(0, _s5_)));
          return A.RCTNull$();
        case B.RCTType_rctTypeFull_1:
          return A.RCTFull_RCTFull$fromStruct(type$.Map_String_dynamic._as(t1.$index(0, _s5_)));
        case B.RCTType_rctTypeSimple_2:
          return A.RCTSimple_RCTSimple$fromStruct(type$.Map_String_dynamic._as(t1.$index(0, _s5_)));
        case B.RCTType_rctTypeBulletproof_3:
          return A.RCTBulletproof_RCTBulletproof$fromStruct(type$.Map_String_dynamic._as(t1.$index(0, _s5_)));
        case B.RCTType_rctTypeBulletproof2_4:
          return A.RCTBulletproof2_RCTBulletproof2$fromStruct(type$.Map_String_dynamic._as(t1.$index(0, _s5_)));
        case B.RCTType_rctTypeCLSAG_5:
          return A.RCTCLSAG_RCTCLSAG$fromStruct(type$.Map_String_dynamic._as(t1.$index(0, _s5_)));
        case B.RCTType_rctTypeBulletproofPlus_6:
          return A.RCTBulletproofPlus_RCTBulletproofPlus$fromStruct(type$.Map_String_dynamic._as(t1.$index(0, _s5_)));
        default:
          throw A.wrapException(A.DartMoneroPluginException$("Invalid RCTSignature.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type, "data", decode.get$value()], type$.String, type$.dynamic)));
      }
    },
    RCTSignatureBase_layout(inputLength, outputLength, property) {
      var t1 = type$.LazyVariantModel_dynamic;
      return A.LayoutConst_lazyEnum(A._setArrayType([new A.LazyVariantModel(A.signature_RCTNull_layout$closure(), "rctTypeNull", 0, t1), new A.LazyVariantModel(new A.RCTSignatureBase_layout_closure(outputLength), "rctTypeFull", 1, t1), new A.LazyVariantModel(new A.RCTSignatureBase_layout_closure0(outputLength, inputLength), "rctTypeSimple", 2, t1), new A.LazyVariantModel(new A.RCTSignatureBase_layout_closure1(outputLength), "rctTypeBulletproof", 3, t1), new A.LazyVariantModel(new A.RCTSignatureBase_layout_closure2(outputLength), "rctTypeBulletproof2", 4, t1), new A.LazyVariantModel(new A.RCTSignatureBase_layout_closure3(outputLength), "rctTypeCLSAG", 5, t1), new A.LazyVariantModel(new A.RCTSignatureBase_layout_closure4(outputLength), "rctTypeBulletproofPlus", 6, t1)], type$.JSArray_LazyVariantModel_dynamic), property);
    },
    EcdhInfoV2_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(8, "amount")], type$.JSArray_Layout_dynamic), false, property);
    },
    EcdhInfoV1$(amount, mask) {
      var t1, t2;
      A.BytesUtils_validateListOfBytes(amount);
      t1 = type$.int;
      t2 = A.ListValidator_exc(A.List_List$unmodifiable(amount, t1), 32, "amount", t1);
      A.BytesUtils_validateListOfBytes(mask);
      return new A.EcdhInfoV1(A.ListValidator_exc(A.List_List$unmodifiable(mask, t1), 32, "mask", t1), t2);
    },
    EcdhInfoV1_EcdhInfoV1$fromStruct(json) {
      var t1 = type$.List_int;
      return A.EcdhInfoV1$(A.QuickMap_asBytes(json, "amount", t1), A.QuickMap_asBytes(json, "mask", t1));
    },
    EcdhInfoV1_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "mask"), A.RawBytesLayout_RawBytesLayout(32, "amount")], type$.JSArray_Layout_dynamic), false, property);
    },
    RCTNull$() {
      var t1 = A._setArrayType([], type$.JSArray_EcdhInfo),
        t2 = A._setArrayType([], type$.JSArray_CtKey),
        t3 = $.$get$_BigIntImpl_zero();
      t1 = A.List_List$unmodifiable(t1, type$.EcdhInfo);
      t2 = A.List_List$unmodifiable(t2, type$.CtKey);
      t3 = A.BigIntHelper_get_asUint64(t3);
      return new A.RCTNull(B.RCTType_rctTypeNull_0, t1, t2, null, null, null, t3);
    },
    RCTNull_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, property);
    },
    RCTCLSAG$(ecdhInfo, message, mixRing, outPk, txnFee) {
      var t4, t5, t6,
        t1 = A.List_List$unmodifiable(ecdhInfo, type$.EcdhInfo),
        t2 = A.List_List$unmodifiable(outPk, type$.CtKey),
        t3 = A.BigIntHelper_get_asUint64(txnFee);
      if (mixRing == null)
        t4 = null;
      else {
        t4 = A._arrayInstanceType(mixRing);
        t5 = t4._eval$1("MappedListIterable<1,List<CtKey>>");
        t5 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(mixRing, t4._eval$1("List<CtKey>(1)")._as(new A.RCTSignatureBase_closure()), t5), true, t5._eval$1("ListIterable.E")), type$.List_CtKey);
        t4 = t5;
      }
      if (message == null)
        t5 = null;
      else {
        t5 = type$.int;
        t6 = A.ListValidator_exc(message, 32, "message", t5);
        A.BytesUtils_validateListOfBytes(t6);
        t5 = A.List_List$unmodifiable(t6, t5);
      }
      return new A.RCTCLSAG(B.RCTType_rctTypeCLSAG_5, t1, t2, t5, t4, null, t3);
    },
    RCTCLSAG_RCTCLSAG$fromStruct(json) {
      var t2, t3, t4, t5,
        t1 = A.QuickMap_asListOfMap(json, "ecdhInfo");
      t1.toString;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,EcdhInfoV2>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("EcdhInfoV2(1)")._as(new A.RCTCLSAG_RCTCLSAG$fromStruct_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t2 = A.QuickMap_as(json, "txnFee", type$.BigInt);
      t1 = A.QuickMap_asListBytes(json, "outPk");
      t1.toString;
      t4 = A._arrayInstanceType(t1);
      t5 = t4._eval$1("MappedListIterable<1,CtKey>");
      return A.RCTCLSAG$(t3, null, null, A.List_List$of(new A.MappedListIterable(t1, t4._eval$1("CtKey(1)")._as(new A.RCTCLSAG_RCTCLSAG$fromStruct_closure0()), t5), true, t5._eval$1("ListIterable.E")), t2);
    },
    RCTCLSAG_layout(outputLength, property) {
      var _null = null,
        t1 = A.MoneroBigIntVarInt$(new A.BigIntLayout(8, _null), "txnFee"),
        t2 = A.EcdhInfoV2_layout(_null),
        t3 = outputLength == null,
        t4 = t3 ? 0 : outputLength,
        t5 = type$.ConstantLayout_int,
        t6 = type$.dynamic;
      t2 = A.SequenceLayout_SequenceLayout(new A.ConstantLayout(t4, 0, _null, t5), t2, "ecdhInfo", t6);
      t4 = A.RawBytesLayout_RawBytesLayout(32, _null);
      return A.StructLayout_StructLayout(A._setArrayType([t1, t2, A.SequenceLayout_SequenceLayout(new A.ConstantLayout(t3 ? 0 : outputLength, 0, _null, t5), t4, "outPk", t6)], type$.JSArray_Layout_dynamic), false, property);
    },
    RCTSimple$(ecdhInfo, message, mixRing, outPk, pseudoOuts, txnFee) {
      var t6, t7,
        t1 = A.List_List$unmodifiable(ecdhInfo, type$.EcdhInfo),
        t2 = A.List_List$unmodifiable(outPk, type$.CtKey),
        t3 = A.BigIntHelper_get_asUint64(txnFee),
        t4 = A._arrayInstanceType(pseudoOuts),
        t5 = t4._eval$1("MappedListIterable<1,List<int>>");
      t5 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(pseudoOuts, t4._eval$1("List<int>(1)")._as(new A.RCTSignatureBase_closure0()), t5), true, t5._eval$1("ListIterable.E")), type$.List_int);
      if (mixRing == null)
        t4 = null;
      else {
        t4 = A._arrayInstanceType(mixRing);
        t6 = t4._eval$1("MappedListIterable<1,List<CtKey>>");
        t6 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(mixRing, t4._eval$1("List<CtKey>(1)")._as(new A.RCTSignatureBase_closure()), t6), true, t6._eval$1("ListIterable.E")), type$.List_CtKey);
        t4 = t6;
      }
      if (message == null)
        t6 = null;
      else {
        t6 = type$.int;
        t7 = A.ListValidator_exc(message, 32, "message", t6);
        A.BytesUtils_validateListOfBytes(t7);
        t6 = A.List_List$unmodifiable(t7, t6);
      }
      return new A.RCTSimple(B.RCTType_rctTypeSimple_2, t1, t2, t6, t4, t5, t3);
    },
    RCTSimple_RCTSimple$fromStruct(json) {
      var t2, t3, t4, t5, t6,
        t1 = A.QuickMap_asListOfMap(json, "ecdhInfo");
      t1.toString;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,EcdhInfoV1>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("EcdhInfoV1(1)")._as(new A.RCTSimple_RCTSimple$fromStruct_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t2 = A.QuickMap_as(json, "txnFee", type$.BigInt);
      t1 = A.QuickMap_asListBytes(json, "pseudoOuts");
      t1.toString;
      t4 = A.QuickMap_asListBytes(json, "outPk");
      t4.toString;
      t5 = A._arrayInstanceType(t4);
      t6 = t5._eval$1("MappedListIterable<1,CtKey>");
      return A.RCTSimple$(t3, null, null, A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("CtKey(1)")._as(new A.RCTSimple_RCTSimple$fromStruct_closure0()), t6), true, t6._eval$1("ListIterable.E")), t1, t2);
    },
    RCTSimple_layout(inputLength, outputLength, property) {
      var t6, t7, _null = null,
        t1 = A.MoneroBigIntVarInt$(new A.BigIntLayout(8, _null), "txnFee"),
        t2 = A.RawBytesLayout_RawBytesLayout(32, _null),
        t3 = inputLength == null ? 0 : inputLength,
        t4 = type$.ConstantLayout_dynamic,
        t5 = type$.dynamic;
      t2 = A.SequenceLayout_SequenceLayout(new A.ConstantLayout(t3, 0, _null, t4), t2, "pseudoOuts", t5);
      t3 = A.EcdhInfoV1_layout(_null);
      t6 = outputLength == null;
      t3 = A.SequenceLayout_SequenceLayout(new A.ConstantLayout(t6 ? 0 : outputLength, 0, _null, t4), t3, "ecdhInfo", t5);
      t7 = A.RawBytesLayout_RawBytesLayout(32, _null);
      return A.StructLayout_StructLayout(A._setArrayType([t1, t2, t3, A.SequenceLayout_SequenceLayout(new A.ConstantLayout(t6 ? 0 : outputLength, 0, _null, t4), t7, "outPk", t5)], type$.JSArray_Layout_dynamic), false, property);
    },
    RCTBulletproof2$(ecdhInfo, message, mixRing, outPk, txnFee) {
      var t4, t5, t6,
        t1 = A.List_List$unmodifiable(ecdhInfo, type$.EcdhInfo),
        t2 = A.List_List$unmodifiable(outPk, type$.CtKey),
        t3 = A.BigIntHelper_get_asUint64(txnFee);
      if (mixRing == null)
        t4 = null;
      else {
        t4 = A._arrayInstanceType(mixRing);
        t5 = t4._eval$1("MappedListIterable<1,List<CtKey>>");
        t5 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(mixRing, t4._eval$1("List<CtKey>(1)")._as(new A.RCTSignatureBase_closure()), t5), true, t5._eval$1("ListIterable.E")), type$.List_CtKey);
        t4 = t5;
      }
      if (message == null)
        t5 = null;
      else {
        t5 = type$.int;
        t6 = A.ListValidator_exc(message, 32, "message", t5);
        A.BytesUtils_validateListOfBytes(t6);
        t5 = A.List_List$unmodifiable(t6, t5);
      }
      return new A.RCTBulletproof2(B.RCTType_rctTypeBulletproof2_4, t1, t2, t5, t4, null, t3);
    },
    RCTBulletproof2_RCTBulletproof2$fromStruct(json) {
      var t2, t3, t4, t5,
        t1 = A.QuickMap_asListOfMap(json, "ecdhInfo");
      t1.toString;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,EcdhInfoV2>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("EcdhInfoV2(1)")._as(new A.RCTBulletproof2_RCTBulletproof2$fromStruct_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t2 = A.QuickMap_as(json, "txnFee", type$.BigInt);
      t1 = A.QuickMap_asListBytes(json, "outPk");
      t1.toString;
      t4 = A._arrayInstanceType(t1);
      t5 = t4._eval$1("MappedListIterable<1,CtKey>");
      return A.RCTBulletproof2$(t3, null, null, A.List_List$of(new A.MappedListIterable(t1, t4._eval$1("CtKey(1)")._as(new A.RCTBulletproof2_RCTBulletproof2$fromStruct_closure0()), t5), true, t5._eval$1("ListIterable.E")), t2);
    },
    RCTBulletproofPlus$(ecdhInfo, message, mixRing, outPk, txnFee) {
      var t4, t5, t6,
        t1 = A.List_List$unmodifiable(ecdhInfo, type$.EcdhInfo),
        t2 = A.List_List$unmodifiable(outPk, type$.CtKey),
        t3 = A.BigIntHelper_get_asUint64(txnFee);
      if (mixRing == null)
        t4 = null;
      else {
        t4 = A._arrayInstanceType(mixRing);
        t5 = t4._eval$1("MappedListIterable<1,List<CtKey>>");
        t5 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(mixRing, t4._eval$1("List<CtKey>(1)")._as(new A.RCTSignatureBase_closure()), t5), true, t5._eval$1("ListIterable.E")), type$.List_CtKey);
        t4 = t5;
      }
      if (message == null)
        t5 = null;
      else {
        t5 = type$.int;
        t6 = A.ListValidator_exc(message, 32, "message", t5);
        A.BytesUtils_validateListOfBytes(t6);
        t5 = A.List_List$unmodifiable(t6, t5);
      }
      return new A.RCTBulletproofPlus(B.RCTType_rctTypeBulletproofPlus_6, t1, t2, t5, t4, null, t3);
    },
    RCTBulletproofPlus_RCTBulletproofPlus$fromStruct(json) {
      var t2, t3, t4, t5,
        t1 = A.QuickMap_asListOfMap(json, "ecdhInfo");
      t1.toString;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,EcdhInfoV2>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("EcdhInfoV2(1)")._as(new A.RCTBulletproofPlus_RCTBulletproofPlus$fromStruct_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t2 = A.QuickMap_as(json, "txnFee", type$.BigInt);
      t1 = A.QuickMap_asListBytes(json, "outPk");
      t1.toString;
      t4 = A._arrayInstanceType(t1);
      t5 = t4._eval$1("MappedListIterable<1,CtKey>");
      return A.RCTBulletproofPlus$(t3, null, null, A.List_List$of(new A.MappedListIterable(t1, t4._eval$1("CtKey(1)")._as(new A.RCTBulletproofPlus_RCTBulletproofPlus$fromStruct_closure0()), t5), true, t5._eval$1("ListIterable.E")), t2);
    },
    RCTFull$(ecdhInfo, message, mixRing, outPk, txnFee) {
      var t4, t5, t6,
        t1 = A.List_List$unmodifiable(ecdhInfo, type$.EcdhInfo),
        t2 = A.List_List$unmodifiable(outPk, type$.CtKey),
        t3 = A.BigIntHelper_get_asUint64(txnFee);
      if (mixRing == null)
        t4 = null;
      else {
        t4 = A._arrayInstanceType(mixRing);
        t5 = t4._eval$1("MappedListIterable<1,List<CtKey>>");
        t5 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(mixRing, t4._eval$1("List<CtKey>(1)")._as(new A.RCTSignatureBase_closure()), t5), true, t5._eval$1("ListIterable.E")), type$.List_CtKey);
        t4 = t5;
      }
      if (message == null)
        t5 = null;
      else {
        t5 = type$.int;
        t6 = A.ListValidator_exc(message, 32, "message", t5);
        A.BytesUtils_validateListOfBytes(t6);
        t5 = A.List_List$unmodifiable(t6, t5);
      }
      return new A.RCTFull(B.RCTType_rctTypeFull_1, t1, t2, t5, t4, null, t3);
    },
    RCTFull_RCTFull$fromStruct(json) {
      var t2, t3, t4, t5,
        t1 = A.QuickMap_asListOfMap(json, "ecdhInfo");
      t1.toString;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,EcdhInfoV1>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("EcdhInfoV1(1)")._as(new A.RCTFull_RCTFull$fromStruct_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t2 = A.QuickMap_as(json, "txnFee", type$.BigInt);
      t1 = A.QuickMap_asListBytes(json, "outPk");
      t1.toString;
      t4 = A._arrayInstanceType(t1);
      t5 = t4._eval$1("MappedListIterable<1,CtKey>");
      return A.RCTFull$(t3, null, null, A.List_List$of(new A.MappedListIterable(t1, t4._eval$1("CtKey(1)")._as(new A.RCTFull_RCTFull$fromStruct_closure0()), t5), true, t5._eval$1("ListIterable.E")), t2);
    },
    RCTFull_layout(outputLength, property) {
      var _null = null,
        t1 = A.MoneroBigIntVarInt$(new A.BigIntLayout(8, _null), "txnFee"),
        t2 = A.EcdhInfoV1_layout(_null),
        t3 = outputLength == null,
        t4 = t3 ? 0 : outputLength,
        t5 = type$.ConstantLayout_dynamic,
        t6 = type$.dynamic;
      t2 = A.SequenceLayout_SequenceLayout(new A.ConstantLayout(t4, 0, _null, t5), t2, "ecdhInfo", t6);
      t4 = A.RawBytesLayout_RawBytesLayout(32, _null);
      return A.StructLayout_StructLayout(A._setArrayType([t1, t2, A.SequenceLayout_SequenceLayout(new A.ConstantLayout(t3 ? 0 : outputLength, 0, _null, t5), t4, "outPk", t6)], type$.JSArray_Layout_dynamic), false, property);
    },
    RCTBulletproof$(ecdhInfo, message, mixRing, outPk, txnFee) {
      var t4, t5, t6,
        t1 = A.List_List$unmodifiable(ecdhInfo, type$.EcdhInfo),
        t2 = A.List_List$unmodifiable(outPk, type$.CtKey),
        t3 = A.BigIntHelper_get_asUint64(txnFee);
      if (mixRing == null)
        t4 = null;
      else {
        t4 = A._arrayInstanceType(mixRing);
        t5 = t4._eval$1("MappedListIterable<1,List<CtKey>>");
        t5 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(mixRing, t4._eval$1("List<CtKey>(1)")._as(new A.RCTSignatureBase_closure()), t5), true, t5._eval$1("ListIterable.E")), type$.List_CtKey);
        t4 = t5;
      }
      if (message == null)
        t5 = null;
      else {
        t5 = type$.int;
        t6 = A.ListValidator_exc(message, 32, "message", t5);
        A.BytesUtils_validateListOfBytes(t6);
        t5 = A.List_List$unmodifiable(t6, t5);
      }
      return new A.RCTBulletproof(B.RCTType_rctTypeBulletproof_3, t1, t2, t5, t4, null, t3);
    },
    RCTBulletproof_RCTBulletproof$fromStruct(json) {
      var t2, t3, t4, t5,
        t1 = A.QuickMap_asListOfMap(json, "ecdhInfo");
      t1.toString;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,EcdhInfoV1>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("EcdhInfoV1(1)")._as(new A.RCTBulletproof_RCTBulletproof$fromStruct_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t2 = A.QuickMap_as(json, "txnFee", type$.BigInt);
      t1 = A.QuickMap_asListBytes(json, "outPk");
      t1.toString;
      t4 = A._arrayInstanceType(t1);
      t5 = t4._eval$1("MappedListIterable<1,CtKey>");
      return A.RCTBulletproof$(t3, null, null, A.List_List$of(new A.MappedListIterable(t1, t4._eval$1("CtKey(1)")._as(new A.RCTBulletproof_RCTBulletproof$fromStruct_closure0()), t5), true, t5._eval$1("ListIterable.E")), t2);
    },
    RCTBulletproof_layout(outputLength, property) {
      var _null = null,
        t1 = A.MoneroBigIntVarInt$(new A.BigIntLayout(8, _null), "txnFee"),
        t2 = A.EcdhInfoV1_layout(_null),
        t3 = outputLength == null,
        t4 = t3 ? 0 : outputLength,
        t5 = type$.ConstantLayout_dynamic,
        t6 = type$.dynamic;
      t2 = A.SequenceLayout_SequenceLayout(new A.ConstantLayout(t4, 0, _null, t5), t2, "ecdhInfo", t6);
      t4 = A.RawBytesLayout_RawBytesLayout(32, _null);
      return A.StructLayout_StructLayout(A._setArrayType([t1, t2, A.SequenceLayout_SequenceLayout(new A.ConstantLayout(t3 ? 0 : outputLength, 0, _null, t5), t4, "outPk", t6)], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroTxSignatures: function MoneroTxSignatures() {
    },
    RCTSignature: function RCTSignature(t0, t1, t2) {
      this.signature = t0;
      this.rctSigPrunable = t1;
      this.$ti = t2;
    },
    RCTSignature_RCTSignature$fromStruct_closure: function RCTSignature_RCTSignature$fromStruct_closure(t0) {
      this.sig = t0;
    },
    RCTSignature_layout_closure: function RCTSignature_layout_closure(t0, t1) {
      this.inputLength = t0;
      this.outputLength = t1;
    },
    RCTSignature_layout_closure0: function RCTSignature_layout_closure0(t0, t1, t2, t3, t4) {
      var _ = this;
      _.transaction = t0;
      _.outputLength = t1;
      _.inputLength = t2;
      _.forcePrunable = t3;
      _.mixinLength = t4;
    },
    MoneroV1Signature: function MoneroV1Signature(t0) {
      this.signature = t0;
    },
    MoneroV1Signature_MoneroV1Signature$fromStruct_closure: function MoneroV1Signature_MoneroV1Signature$fromStruct_closure() {
    },
    MoneroV1Signature_layout_closure: function MoneroV1Signature_layout_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.signatureLength = t1;
      this.inputLength = t2;
    },
    MoneroV1Signature_layout__closure: function MoneroV1Signature_layout__closure(t0, t1) {
      this._box_0 = t0;
      this.signatureLength = t1;
    },
    MoneroV1Signature_toLayoutStruct_closure: function MoneroV1Signature_toLayoutStruct_closure() {
    },
    RCTType: function RCTType(t0, t1) {
      this.name = t0;
      this.value = t1;
    },
    RCTType_fromName_closure: function RCTType_fromName_closure(t0) {
      this.name = t0;
    },
    RCTType_fromName_closure0: function RCTType_fromName_closure0(t0) {
      this.name = t0;
    },
    EcdhInfoVersion: function EcdhInfoVersion(t0) {
      this.name = t0;
    },
    EcdhTuple: function EcdhTuple(t0, t1, t2) {
      this.mask = t0;
      this.amount = t1;
      this.version = t2;
    },
    EcdhInfo: function EcdhInfo() {
    },
    RCTSignatureBase: function RCTSignatureBase() {
    },
    RCTSignatureBase_closure0: function RCTSignatureBase_closure0() {
    },
    RCTSignatureBase_closure: function RCTSignatureBase_closure() {
    },
    RCTSignatureBase_layout_closure: function RCTSignatureBase_layout_closure(t0) {
      this.outputLength = t0;
    },
    RCTSignatureBase_layout_closure0: function RCTSignatureBase_layout_closure0(t0, t1) {
      this.outputLength = t0;
      this.inputLength = t1;
    },
    RCTSignatureBase_layout_closure1: function RCTSignatureBase_layout_closure1(t0) {
      this.outputLength = t0;
    },
    RCTSignatureBase_layout_closure2: function RCTSignatureBase_layout_closure2(t0) {
      this.outputLength = t0;
    },
    RCTSignatureBase_layout_closure3: function RCTSignatureBase_layout_closure3(t0) {
      this.outputLength = t0;
    },
    RCTSignatureBase_layout_closure4: function RCTSignatureBase_layout_closure4(t0) {
      this.outputLength = t0;
    },
    EcdhInfoV2: function EcdhInfoV2(t0) {
      this.amount = t0;
    },
    EcdhInfoV1: function EcdhInfoV1(t0, t1) {
      this.mask = t0;
      this.amount = t1;
    },
    RCTNull: function RCTNull(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.type = t0;
      _.ecdhInfo = t1;
      _.outPk = t2;
      _.message = t3;
      _.mixRing = t4;
      _.pseudoOuts = t5;
      _.txnFee = t6;
    },
    RCTCLSAG: function RCTCLSAG(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.type = t0;
      _.ecdhInfo = t1;
      _.outPk = t2;
      _.message = t3;
      _.mixRing = t4;
      _.pseudoOuts = t5;
      _.txnFee = t6;
    },
    RCTCLSAG_RCTCLSAG$fromStruct_closure: function RCTCLSAG_RCTCLSAG$fromStruct_closure() {
    },
    RCTCLSAG_RCTCLSAG$fromStruct_closure0: function RCTCLSAG_RCTCLSAG$fromStruct_closure0() {
    },
    RCTCLSAG_toLayoutStruct_closure: function RCTCLSAG_toLayoutStruct_closure() {
    },
    RCTCLSAG_toLayoutStruct_closure0: function RCTCLSAG_toLayoutStruct_closure0() {
    },
    RCTSimple: function RCTSimple(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.type = t0;
      _.ecdhInfo = t1;
      _.outPk = t2;
      _.message = t3;
      _.mixRing = t4;
      _.pseudoOuts = t5;
      _.txnFee = t6;
    },
    RCTSimple_RCTSimple$fromStruct_closure: function RCTSimple_RCTSimple$fromStruct_closure() {
    },
    RCTSimple_RCTSimple$fromStruct_closure0: function RCTSimple_RCTSimple$fromStruct_closure0() {
    },
    RCTSimple_toLayoutStruct_closure: function RCTSimple_toLayoutStruct_closure() {
    },
    RCTSimple_toLayoutStruct_closure0: function RCTSimple_toLayoutStruct_closure0() {
    },
    RCTBulletproof2: function RCTBulletproof2(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.type = t0;
      _.ecdhInfo = t1;
      _.outPk = t2;
      _.message = t3;
      _.mixRing = t4;
      _.pseudoOuts = t5;
      _.txnFee = t6;
    },
    RCTBulletproof2_RCTBulletproof2$fromStruct_closure: function RCTBulletproof2_RCTBulletproof2$fromStruct_closure() {
    },
    RCTBulletproof2_RCTBulletproof2$fromStruct_closure0: function RCTBulletproof2_RCTBulletproof2$fromStruct_closure0() {
    },
    RCTBulletproofPlus: function RCTBulletproofPlus(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.type = t0;
      _.ecdhInfo = t1;
      _.outPk = t2;
      _.message = t3;
      _.mixRing = t4;
      _.pseudoOuts = t5;
      _.txnFee = t6;
    },
    RCTBulletproofPlus_RCTBulletproofPlus$fromStruct_closure: function RCTBulletproofPlus_RCTBulletproofPlus$fromStruct_closure() {
    },
    RCTBulletproofPlus_RCTBulletproofPlus$fromStruct_closure0: function RCTBulletproofPlus_RCTBulletproofPlus$fromStruct_closure0() {
    },
    RCTFull: function RCTFull(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.type = t0;
      _.ecdhInfo = t1;
      _.outPk = t2;
      _.message = t3;
      _.mixRing = t4;
      _.pseudoOuts = t5;
      _.txnFee = t6;
    },
    RCTFull_RCTFull$fromStruct_closure: function RCTFull_RCTFull$fromStruct_closure() {
    },
    RCTFull_RCTFull$fromStruct_closure0: function RCTFull_RCTFull$fromStruct_closure0() {
    },
    RCTFull_toLayoutStruct_closure: function RCTFull_toLayoutStruct_closure() {
    },
    RCTFull_toLayoutStruct_closure0: function RCTFull_toLayoutStruct_closure0() {
    },
    RCTBulletproof: function RCTBulletproof(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.type = t0;
      _.ecdhInfo = t1;
      _.outPk = t2;
      _.message = t3;
      _.mixRing = t4;
      _.pseudoOuts = t5;
      _.txnFee = t6;
    },
    RCTBulletproof_RCTBulletproof$fromStruct_closure: function RCTBulletproof_RCTBulletproof$fromStruct_closure() {
    },
    RCTBulletproof_RCTBulletproof$fromStruct_closure0: function RCTBulletproof_RCTBulletproof$fromStruct_closure0() {
    },
    RCTBulletproof_toLayoutStruct_closure: function RCTBulletproof_toLayoutStruct_closure() {
    },
    RCTBulletproof_toLayoutStruct_closure0: function RCTBulletproof_toLayoutStruct_closure0() {
    },
    TxExtraTypes_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_Azz, new A.TxExtraTypes_fromName_closure($name), new A.TxExtraTypes_fromName_closure0($name));
    },
    TxExtra_TxExtra$fromStruct(json) {
      var _s5_ = "value",
        t1 = A.MoneroVariantSerialization_toVariantDecodeResult(json).result;
      switch (A.TxExtraTypes_fromName(A._asString(t1.$index(0, "key")))) {
        case B.TxExtraTypes_publickey_1:
          return new A.TxExtraPublicKey(A.MoneroPublicKey_MoneroPublicKey$fromBytes(A.QuickMap_asBytes(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), "publicKey", type$.List_int)), B.TxExtraTypes_publickey_1);
        case B.TxExtraTypes_nonce_2:
          return A.TxExtraNonce$(A.QuickMap_asBytes(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), "nonce", type$.List_int));
        case B.TxExtraTypes_additionalPublicKeys_4:
          return A.TxExtraAdditionalPubKeys_TxExtraAdditionalPubKeys$fromStruct(type$.Map_String_dynamic._as(t1.$index(0, _s5_)));
        default:
          throw A.wrapException(A.UnimplementedError$("does not implemented"));
      }
    },
    TxExtra_layout(property) {
      var t1 = type$.LazyVariantModel_dynamic;
      return A.LayoutConst_lazyEnum(A._setArrayType([new A.LazyVariantModel(A.extra_TxExtraPublicKey_layout$closure(), "publickey", 1, t1), new A.LazyVariantModel(A.extra_TxExtraNonce_layout$closure(), "nonce", 2, t1), new A.LazyVariantModel(A.extra_TxExtraAdditionalPubKeys_layout$closure(), "additionalPublicKeys", 4, t1)], type$.JSArray_LazyVariantModel_dynamic), property);
    },
    TxExtraPublicKey_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "publicKey")], type$.JSArray_Layout_dynamic), false, property);
    },
    TxExtraNonce$(nonce) {
      var t1 = J.getInterceptor$asx(nonce);
      if (t1.get$length(nonce) > 255)
        A.throwExpression(A.DartMoneroPluginException$("Incorrect nonce array length.", A.LinkedHashMap_LinkedHashMap$_literal(["maximum", 255, "length", t1.get$length(nonce)], type$.String, type$.dynamic)));
      A.BytesUtils_validateListOfBytes(nonce);
      return new A.TxExtraNonce(A.List_List$unmodifiable(nonce, type$.int), B.TxExtraTypes_nonce_2);
    },
    TxExtraNonce_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_vecU8(A.IntegerLayout$(1, B.C_Endian0, null, false), "nonce")], type$.JSArray_Layout_dynamic), false, property);
    },
    TxExtraAdditionalPubKeys_TxExtraAdditionalPubKeys$fromStruct(json) {
      var t2, t3,
        t1 = A.QuickMap_asListBytes(json, "pubKeys");
      t1.toString;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,MoneroPublicKey>");
      return new A.TxExtraAdditionalPubKeys(A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("MoneroPublicKey(1)")._as(new A.TxExtraAdditionalPubKeys_TxExtraAdditionalPubKeys$fromStruct_closure()), t3), true, t3._eval$1("ListIterable.E")), type$.MoneroPublicKey), B.TxExtraTypes_additionalPublicKeys_4);
    },
    TxExtraAdditionalPubKeys_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroLayoutConst_variantVec(A.RawBytesLayout_RawBytesLayout(32, null), "pubKeys", type$.List_int)], type$.JSArray_Layout_dynamic), false, null);
    },
    TxExtraTypes: function TxExtraTypes(t0, t1) {
      this.name = t0;
      this.value = t1;
    },
    TxExtraTypes_fromName_closure: function TxExtraTypes_fromName_closure(t0) {
      this.name = t0;
    },
    TxExtraTypes_fromName_closure0: function TxExtraTypes_fromName_closure0(t0) {
      this.name = t0;
    },
    TxExtra: function TxExtra() {
    },
    TxExtraPublicKey: function TxExtraPublicKey(t0, t1) {
      this.publicKey = t0;
      this.type = t1;
    },
    TxExtraNonce: function TxExtraNonce(t0, t1) {
      this.nonce = t0;
      this.type = t1;
    },
    TxExtraAdditionalPubKeys: function TxExtraAdditionalPubKeys(t0, t1) {
      this.pubKeys = t0;
      this.type = t1;
    },
    TxExtraAdditionalPubKeys_TxExtraAdditionalPubKeys$fromStruct_closure: function TxExtraAdditionalPubKeys_TxExtraAdditionalPubKeys$fromStruct_closure() {
    },
    TxExtraAdditionalPubKeys_toLayoutStruct_closure: function TxExtraAdditionalPubKeys_toLayoutStruct_closure() {
    },
    MoneroTxinType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_5e2, new A.MoneroTxinType_fromName_closure($name), new A.MoneroTxinType_fromName_closure0($name));
    },
    MoneroTxin_MoneroTxin$fromStruct(json) {
      var t2, t3, t4, t5, _s5_ = "value",
        decode = A.MoneroVariantSerialization_toVariantDecodeResult(json),
        t1 = decode.result,
        type = A.MoneroTxinType_fromName(A._asString(t1.$index(0, "key")));
      switch (type) {
        case B.MoneroTxinType_TxinGen_255:
          return new A.TxinGen(A.BigIntHelper_get_asUint64(A.QuickMap_as(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), "height", type$.BigInt)), B.MoneroTxinType_TxinGen_255);
        case B.MoneroTxinType_TxinToScript_0:
          t1 = type$.Map_String_dynamic._as(t1.$index(0, _s5_));
          t2 = type$.List_int;
          t3 = A.QuickMap_asBytes(t1, "prev", t2);
          t4 = A.QuickMap_as(t1, "prevout", type$.BigInt);
          t2 = A.QuickMap_asBytes(t1, "sigset", t2);
          A.BytesUtils_validateListOfBytes(t3);
          t1 = type$.int;
          t3 = A.List_List$unmodifiable(t3, t1);
          t4 = A.BigIntHelper_get_asUint64(t4);
          A.BytesUtils_validateListOfBytes(t2);
          return new A.TxinToScript(t3, t4, A.List_List$unmodifiable(t2, t1), B.MoneroTxinType_TxinToScript_0);
        case B.MoneroTxinType_TxinToScriptHash_1:
          t2 = type$.Map_String_dynamic;
          t1 = t2._as(t1.$index(0, _s5_));
          t3 = type$.List_int;
          t4 = A.QuickMap_asBytes(t1, "prev", t3);
          t5 = A.QuickMap_as(t1, "prevout", type$.BigInt);
          t2 = A.TxoutToScript_TxoutToScript$fromStruct(A.QuickMap_asMap(t1, "script", t2));
          t3 = A.QuickMap_asBytes(t1, "sigset", t3);
          A.BytesUtils_validateListOfBytes(t4);
          t1 = type$.int;
          t4 = A.List_List$unmodifiable(t4, t1);
          t5 = A.BigIntHelper_get_asUint64(t5);
          A.BytesUtils_validateListOfBytes(t3);
          return new A.TxinToScriptHash(t4, t5, t2, A.List_List$unmodifiable(t3, t1), B.MoneroTxinType_TxinToScriptHash_1);
        case B.MoneroTxinType_TxinToKey_2:
          return A.TxinToKey_TxinToKey$fromStruct(type$.Map_String_dynamic._as(t1.$index(0, _s5_)));
        default:
          throw A.wrapException(A.DartMoneroPluginException$("Invalid Txin.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type, "data", decode.get$value()], type$.String, type$.dynamic)));
      }
    },
    MoneroTxin_layout(property) {
      var t1 = type$.LazyVariantModel_dynamic;
      return A.LayoutConst_lazyEnum(A._setArrayType([new A.LazyVariantModel(A.input_TxinGen_layout$closure(), "TxinGen", 255, t1), new A.LazyVariantModel(A.input_TxinToScript_layout$closure(), "TxinToScript", 0, t1), new A.LazyVariantModel(A.input_TxinToScriptHash_layout$closure(), "TxinToScriptHash", 1, t1), new A.LazyVariantModel(A.input_TxinToKey_layout$closure(), "TxinToKey", 2, t1)], type$.JSArray_LazyVariantModel_dynamic), property);
    },
    TxinToKey$(amount, keyImage, keyOffsets) {
      var t1 = A.BigIntHelper_get_asUint64(amount),
        t2 = type$.BigInt,
        t3 = J.map$1$1$ax(keyOffsets, new A.TxinToKey_closure(), t2);
      t2 = A.List_List$unmodifiable(A.List_List$of(t3, true, t3.$ti._eval$1("ListIterable.E")), t2);
      A.BytesUtils_validateListOfBytes(keyImage);
      return new A.TxinToKey(t1, t2, A.List_List$unmodifiable(keyImage, type$.int), B.MoneroTxinType_TxinToKey_2);
    },
    TxinToKey_TxinToKey$fromStruct(json) {
      var t1 = A.QuickMap_as(json, "amount", type$.BigInt),
        t2 = A.QuickMap_asBytes(json, "k_image", type$.List_int),
        t3 = A.QuickMap_asListBig(json, "key_offsets");
      t3.toString;
      return A.TxinToKey$(t1, t2, t3);
    },
    TxinToKey_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), "amount"), A.MoneroLayoutConst_variantVec(A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), null), "key_offsets", type$.BigInt), A.RawBytesLayout_RawBytesLayout(32, "k_image")], type$.JSArray_Layout_dynamic), false, property);
    },
    TxinToScriptHash_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "prev"), A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), "prevout"), A.TxoutToScript_layout("script"), A.MoneroLayoutConst_variantVec(A.IntegerLayout$(1, B.C_Endian0, null, false), "sigset", type$.int)], type$.JSArray_Layout_dynamic), false, property);
    },
    TxinToScript_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "prev"), A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), "prevout"), A.MoneroLayoutConst_variantVec(A.IntegerLayout$(1, B.C_Endian0, null, false), "sigset", type$.int)], type$.JSArray_Layout_dynamic), false, property);
    },
    TxinGen_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), "height")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroTxinType: function MoneroTxinType(t0, t1) {
      this.name = t0;
      this.variantId = t1;
    },
    MoneroTxinType_fromName_closure: function MoneroTxinType_fromName_closure(t0) {
      this.name = t0;
    },
    MoneroTxinType_fromName_closure0: function MoneroTxinType_fromName_closure0(t0) {
      this.name = t0;
    },
    MoneroTxin: function MoneroTxin() {
    },
    TxinToKey: function TxinToKey(t0, t1, t2, t3) {
      var _ = this;
      _.amount = t0;
      _.keyOffsets = t1;
      _.keyImage = t2;
      _.type = t3;
    },
    TxinToKey_closure: function TxinToKey_closure() {
    },
    TxinToKey_toJson_closure: function TxinToKey_toJson_closure() {
    },
    TxinToScriptHash: function TxinToScriptHash(t0, t1, t2, t3, t4) {
      var _ = this;
      _.prev = t0;
      _.prevout = t1;
      _.script = t2;
      _.sigset = t3;
      _.type = t4;
    },
    TxinToScript: function TxinToScript(t0, t1, t2, t3) {
      var _ = this;
      _.prev = t0;
      _.prevout = t1;
      _.sigset = t2;
      _.type = t3;
    },
    TxinGen: function TxinGen(t0, t1) {
      this.height = t0;
      this.type = t1;
    },
    TxOutTargetType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_4YB, new A.TxOutTargetType_fromName_closure($name), new A.TxOutTargetType_fromName_closure0($name));
    },
    TxoutTarget_TxoutTarget$fromStruct(json) {
      var _s5_ = "value",
        decode = A.MoneroVariantSerialization_toVariantDecodeResult(json),
        t1 = decode.result,
        type = A.TxOutTargetType_fromName(A._asString(t1.$index(0, "key")));
      switch (type) {
        case B.TxOutTargetType_TxoutToKey_2:
          return new A.TxoutToKey(A.MoneroPublicKey_MoneroPublicKey$fromBytes(A.QuickMap_asBytes(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), "key", type$.List_int)), B.TxOutTargetType_TxoutToKey_2);
        case B.TxOutTargetType_TxoutToScript_0:
          return A.TxoutToScript_TxoutToScript$fromStruct(type$.Map_String_dynamic._as(t1.$index(0, _s5_)));
        case B.TxOutTargetType_TxoutToScriptHash_1:
          t1 = A.QuickMap_asBytes(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), "hash", type$.List_int);
          A.BytesUtils_validateListOfBytes(t1);
          return new A.TxoutToScriptHash(A.List_List$unmodifiable(t1, type$.int), B.TxOutTargetType_TxoutToScriptHash_1);
        case B.TxOutTargetType_TxoutToTaggedKey_3:
          t1 = type$.Map_String_dynamic._as(t1.$index(0, _s5_));
          return new A.TxoutToTaggedKey(A.MoneroPublicKey_MoneroPublicKey$fromBytes(A.QuickMap_asBytes(t1, "key", type$.List_int)), A.IntHelper_get_asUint8(A.QuickMap_as(t1, "view_tag", type$.int)), B.TxOutTargetType_TxoutToTaggedKey_3);
        default:
          throw A.wrapException(A.DartMoneroPluginException$("Invalid txout target.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type, "data", decode.get$value()], type$.String, type$.dynamic)));
      }
    },
    TxoutTarget_layout(property) {
      var t1 = type$.LazyVariantModel_dynamic;
      return A.LayoutConst_lazyEnum(A._setArrayType([new A.LazyVariantModel(A.output_TxoutToScript_layout$closure(), "TxoutToScript", 0, t1), new A.LazyVariantModel(A.output_TxoutToScriptHash_layout$closure(), "TxoutToScriptHash", 1, t1), new A.LazyVariantModel(A.output_TxoutToKey_layout$closure(), "TxoutToKey", 2, t1), new A.LazyVariantModel(A.output_TxoutToTaggedKey_layout$closure(), "TxoutToTaggedKey", 3, t1)], type$.JSArray_LazyVariantModel_dynamic), property);
    },
    TxoutToScript$(keys, script) {
      var t1 = A._arrayInstanceType(keys),
        t2 = t1._eval$1("MappedListIterable<1,List<int>>");
      t2 = A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(keys, t1._eval$1("List<int>(1)")._as(new A.TxoutToScript_closure()), t2), true, t2._eval$1("ListIterable.E")), type$.List_int);
      A.BytesUtils_validateListOfBytes(script);
      return new A.TxoutToScript(t2, A.List_List$unmodifiable(script, type$.int), B.TxOutTargetType_TxoutToScript_0);
    },
    TxoutToScript_TxoutToScript$fromStruct(json) {
      var t1 = A.QuickMap_asListBytes(json, "keys");
      t1.toString;
      return A.TxoutToScript$(t1, A.QuickMap_asBytes(json, "script", type$.List_int));
    },
    TxoutToScript_layout(property) {
      A._asStringQ(property);
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroLayoutConst_variantVec(A.RawBytesLayout_RawBytesLayout(32, null), "keys", type$.List_int), A.MoneroLayoutConst_variantVec(A.IntegerLayout$(1, B.C_Endian0, null, false), "script", type$.int)], type$.JSArray_Layout_dynamic), false, property);
    },
    TxoutToScriptHash_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "hash")], type$.JSArray_Layout_dynamic), false, property);
    },
    TxoutToKey_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "key")], type$.JSArray_Layout_dynamic), false, property);
    },
    TxoutToTaggedKey_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "key"), A.IntegerLayout$(1, B.C_Endian0, "view_tag", false)], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroTxout_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroBigIntVarInt$(new A.BigIntLayout(8, null), "amount"), A.TxoutTarget_layout("target")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroTxout_MoneroTxout$fromStruct(json) {
      var t1 = A.QuickMap_as(json, "amount", type$.BigInt),
        t2 = A.TxoutTarget_TxoutTarget$fromStruct(A.QuickMap_asMap(json, "target", type$.Map_String_dynamic));
      return new A.MoneroTxout(A.BigIntHelper_get_asUint64(t1), t2);
    },
    TxOutTargetType: function TxOutTargetType(t0, t1) {
      this.name = t0;
      this.variantId = t1;
    },
    TxOutTargetType_fromName_closure: function TxOutTargetType_fromName_closure(t0) {
      this.name = t0;
    },
    TxOutTargetType_fromName_closure0: function TxOutTargetType_fromName_closure0(t0) {
      this.name = t0;
    },
    TxoutTarget: function TxoutTarget() {
    },
    TxoutToScript: function TxoutToScript(t0, t1, t2) {
      this.keys = t0;
      this.script = t1;
      this.type = t2;
    },
    TxoutToScript_closure: function TxoutToScript_closure() {
    },
    TxoutToScript_toJson_closure: function TxoutToScript_toJson_closure() {
    },
    TxoutToScriptHash: function TxoutToScriptHash(t0, t1) {
      this.hash = t0;
      this.type = t1;
    },
    TxoutToKey: function TxoutToKey(t0, t1) {
      this.key = t0;
      this.type = t1;
    },
    TxoutToTaggedKey: function TxoutToTaggedKey(t0, t1, t2) {
      this.key = t0;
      this.viewTag = t1;
      this.type = t2;
    },
    MoneroTxout: function MoneroTxout(t0, t1) {
      this.amount = t0;
      this.target = t1;
    },
    MoneroTransactionPrefix$(extra, unlockTime, version, vin, vout) {
      var t3, t4,
        t1 = A.IntHelper_get_asUint32(version),
        t2 = unlockTime == null ? null : A.BigIntHelper_get_asUint64(unlockTime);
      if (t2 == null)
        t2 = $.$get$MoneroNetworkConst_unlockTime();
      t3 = A.List_List$unmodifiable(vin, type$.MoneroTxin);
      t4 = A.List_List$unmodifiable(vout, type$.MoneroTxout);
      A.BytesUtils_validateListOfBytes(extra);
      return new A.MoneroTransactionPrefix(t1, t2, t3, t4, A.List_List$unmodifiable(extra, type$.int));
    },
    MoneroTransactionPrefix_layout(property) {
      var t1 = type$.LazyLayout_dynamic;
      return A.LazyStructLayout_LazyStructLayout(A._setArrayType([new A.LazyLayout(A.const_MoneroLayoutConst_varintInt$closure(), "version", t1), new A.LazyLayout(A.const_MoneroLayoutConst_varintBigInt$closure(), "unlock_time", t1), new A.LazyLayout(new A.MoneroTransactionPrefix_layout_closure(), "vin", t1), new A.LazyLayout(new A.MoneroTransactionPrefix_layout_closure0(), "vout", t1), new A.LazyLayout(A.const_MoneroLayoutConst_variantBytes$closure(), "extera", t1)], type$.JSArray_BaseLazyLayout_dynamic), false, property);
    },
    MoneroTransactionPrefix: function MoneroTransactionPrefix(t0, t1, t2, t3, t4) {
      var _ = this;
      _.version = t0;
      _.unlockTime = t1;
      _.vin = t2;
      _.vout = t3;
      _.extra = t4;
      _.__MoneroTransactionPrefix_additionalPubKeys_AI = _.__MoneroTransactionPrefix_txPublicKey_FI = _.__MoneroTransactionPrefix_txExtras_FI = $;
    },
    MoneroTransactionPrefix_layout_closure: function MoneroTransactionPrefix_layout_closure() {
    },
    MoneroTransactionPrefix_layout_closure0: function MoneroTransactionPrefix_layout_closure0() {
    },
    MoneroTransactionPrefix__getTxExtraPubKey_closure: function MoneroTransactionPrefix__getTxExtraPubKey_closure() {
    },
    MoneroTransactionPrefix__getTxExtraPubKey_closure0: function MoneroTransactionPrefix__getTxExtraPubKey_closure0() {
    },
    MoneroTransactionPrefix__getTxAdditionalPubKeys_closure: function MoneroTransactionPrefix__getTxAdditionalPubKeys_closure() {
    },
    MoneroTransactionPrefix_toLayoutStruct_closure: function MoneroTransactionPrefix_toLayoutStruct_closure() {
    },
    MoneroTransactionPrefix_toLayoutStruct_closure0: function MoneroTransactionPrefix_toLayoutStruct_closure0() {
    },
    MoneroTransaction$(extra, signature, unlockTime, version, vin, vout) {
      var t3, t4,
        t1 = unlockTime == null ? $.$get$_BigIntImpl_zero() : unlockTime,
        t2 = A.IntHelper_get_asUint32(version);
      t1 = A.BigIntHelper_get_asUint64(t1);
      if (t1 == null)
        t1 = $.$get$MoneroNetworkConst_unlockTime();
      t3 = A.List_List$unmodifiable(vin, type$.MoneroTxin);
      t4 = A.List_List$unmodifiable(vout, type$.MoneroTxout);
      A.BytesUtils_validateListOfBytes(extra);
      return new A.MoneroTransaction(signature, t2, t1, t3, t4, A.List_List$unmodifiable(extra, type$.int));
    },
    MoneroTransaction_MoneroTransaction$deserialize(bytes) {
      return A.MoneroTransaction_MoneroTransaction$fromStruct(A.MoneroSerialization_deserialize(bytes, A.MoneroTransaction_layout(false, null, null)));
    },
    MoneroTransaction_MoneroTransaction$fromStruct(json) {
      var t2, t3, t4, t5,
        _s9_ = "signature",
        t1 = type$.Map_String_dynamic,
        signatureJson = A.QuickMap_asMap(json, _s9_, t1),
        version = A.QuickMap_as(json, "version", type$.int),
        sig = version === 1 && signatureJson.get$isEmpty(signatureJson) ? B.MoneroV1Signature_null : A.MoneroTxSignatures_MoneroTxSignatures$fromStruct(A.QuickMap_asMap(json, _s9_, t1));
      t1 = A.QuickMap_as(json, "unlock_time", type$.nullable_BigInt);
      t2 = A.QuickMap_asListOfMap(json, "vin");
      t2.toString;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,MoneroTxin>");
      t4 = A.List_List$of(new A.MappedListIterable(t2, t3._eval$1("MoneroTxin(1)")._as(new A.MoneroTransaction_MoneroTransaction$fromStruct_closure()), t4), true, t4._eval$1("ListIterable.E"));
      t3 = A.QuickMap_asListOfMap(json, "vout");
      t3.toString;
      t2 = A._arrayInstanceType(t3);
      t5 = t2._eval$1("MappedListIterable<1,MoneroTxout>");
      t5 = A.List_List$of(new A.MappedListIterable(t3, t2._eval$1("MoneroTxout(1)")._as(new A.MoneroTransaction_MoneroTransaction$fromStruct_closure0()), t5), true, t5._eval$1("ListIterable.E"));
      return A.MoneroTransaction$(A.QuickMap_asBytes(json, "extera", type$.List_int), sig, t1, version, t4, t5);
    },
    MoneroTransaction_layout(forcePrunable, property, transaction) {
      var t1 = type$.LazyLayout_dynamic;
      return A.LazyStructLayout_LazyStructLayout(A._setArrayType([new A.LazyLayout(A.const_MoneroLayoutConst_varintInt$closure(), "version", t1), new A.LazyLayout(A.const_MoneroLayoutConst_varintBigInt$closure(), "unlock_time", t1), new A.LazyLayout(new A.MoneroTransaction_layout_closure(), "vin", t1), new A.LazyLayout(new A.MoneroTransaction_layout_closure0(), "vout", t1), new A.LazyLayout(A.const_MoneroLayoutConst_variantBytes$closure(), "extera", t1), new A.ConditionalLazyLayout(new A.MoneroTransaction_layout_closure1(transaction, forcePrunable), "signature", type$.ConditionalLazyLayout_Map_String_dynamic)], type$.JSArray_BaseLazyLayout_dynamic), false, property);
    },
    MoneroTransaction: function MoneroTransaction(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.signature = t0;
      _.version = t1;
      _.unlockTime = t2;
      _.vin = t3;
      _.vout = t4;
      _.extra = t5;
      _.__MoneroTransactionPrefix_additionalPubKeys_AI = _.__MoneroTransactionPrefix_txPublicKey_FI = _.__MoneroTransactionPrefix_txExtras_FI = $;
    },
    MoneroTransaction_MoneroTransaction$fromStruct_closure: function MoneroTransaction_MoneroTransaction$fromStruct_closure() {
    },
    MoneroTransaction_MoneroTransaction$fromStruct_closure0: function MoneroTransaction_MoneroTransaction$fromStruct_closure0() {
    },
    MoneroTransaction_layout_closure: function MoneroTransaction_layout_closure() {
    },
    MoneroTransaction_layout_closure0: function MoneroTransaction_layout_closure0() {
    },
    MoneroTransaction_layout_closure1: function MoneroTransaction_layout_closure1(t0, t1) {
      this.transaction = t0;
      this.forcePrunable = t1;
    },
    MoneroTransaction_toLayoutStruct_closure: function MoneroTransaction_toLayoutStruct_closure() {
    },
    MoneroTransaction_toLayoutStruct_closure0: function MoneroTransaction_toLayoutStruct_closure0() {
    },
    MoneroTransaction_toJson_closure: function MoneroTransaction_toJson_closure() {
    },
    MoneroTransaction_toJson_closure0: function MoneroTransaction_toJson_closure0() {
    },
    MoneroNetwork_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_qZ9, new A.MoneroNetwork_fromName_closure($name), new A.MoneroNetwork_fromName_closure0($name));
    },
    MoneroNetwork_fromIndex(index) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_qZ9, new A.MoneroNetwork_fromIndex_closure(index), new A.MoneroNetwork_fromIndex_closure0(index));
    },
    MoneroNetwork_fromNetVersion(netVersion) {
      var t1, _i, n, t2, t3, t4;
      for (t1 = type$.int, _i = 0; _i < 3; ++_i) {
        n = B.List_qZ9[_i];
        t2 = n.config.params;
        t3 = t2.addrNetVer;
        t3.toString;
        t3 = A.List_List$of(t3, true, t1);
        t4 = t2.addrIntNetVer;
        t4.toString;
        B.JSArray_methods.addAll$1(t3, t4);
        t2 = t2.subaddrNetVer;
        t2.toString;
        B.JSArray_methods.addAll$1(t3, t2);
        if (B.JSArray_methods.contains$1(t3, netVersion))
          return n;
      }
      throw A.wrapException(B.DartMoneroPluginException_8YE);
    },
    MoneroNetwork: function MoneroNetwork(t0, t1, t2) {
      this.name = t0;
      this.config = t1;
      this.index = t2;
    },
    MoneroNetwork_fromName_closure: function MoneroNetwork_fromName_closure(t0) {
      this.name = t0;
    },
    MoneroNetwork_fromName_closure0: function MoneroNetwork_fromName_closure0(t0) {
      this.name = t0;
    },
    MoneroNetwork_fromIndex_closure: function MoneroNetwork_fromIndex_closure(t0) {
      this.index = t0;
    },
    MoneroNetwork_fromIndex_closure0: function MoneroNetwork_fromIndex_closure0(t0) {
      this.index = t0;
    },
    DemonRequestType: function DemonRequestType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    MoneroDaemonRequestParam: function MoneroDaemonRequestParam() {
    },
    MoneroRequestApiType: function MoneroRequestApiType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    MoneroRequestDetails: function MoneroRequestDetails(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.api = t0;
      _.method = t1;
      _.jsonBody = t2;
      _.requestType = t3;
      _.headers = t4;
      _.type = t5;
      _.requestID = t6;
    },
    DaemonRequestGetBlocksBin: function DaemonRequestGetBlocksBin(t0, t1, t2) {
      this.blockIds = t0;
      this.startHeight = t1;
      this.requestedInfo = t2;
    },
    DaemonRequestGetTransactions: function DaemonRequestGetTransactions(t0, t1, t2, t3) {
      var _ = this;
      _.txHashes = t0;
      _.decodeAsJson = t1;
      _.prune = t2;
      _.split = t3;
    },
    DaemonRequestGetTransactions_onResonse_closure: function DaemonRequestGetTransactions_onResonse_closure() {
    },
    DaemonRequestOnGetBlockHash: function DaemonRequestOnGetBlockHash(t0) {
      this.blockHeight = t0;
    },
    DaemonBaseResponse$fromJson(json) {
      var t1;
      A.BigintUtils_tryParse(json.$index(0, "credits"));
      t1 = A._asString(json.$index(0, "status"));
      A._asStringQ(json.$index(0, "top_hash"));
      A._asBoolQ(json.$index(0, "untrusted"));
      return new A.DaemonBaseResponse(t1);
    },
    DaemonBaseResponse: function DaemonBaseResponse(t0) {
      this.status = t0;
    },
    DaemonBlockCompleteEntryResponse_DaemonBlockCompleteEntryResponse$fromJson(json) {
      var t2, t3, t4,
        t1 = json.$index(0, "pruned");
      t1 = A._asBool(t1 == null ? false : t1);
      t2 = A._asString(json.$index(0, "block"));
      t3 = A.BigintUtils_tryParse(json.$index(0, "block_weight"));
      if (t3 == null)
        t3 = $.$get$_BigIntImpl_zero();
      t4 = type$.nullable_List_dynamic._as(json.$index(0, "txs"));
      if (t4 == null)
        t4 = null;
      else {
        t4 = J.map$1$1$ax(t4, new A.DaemonBlockCompleteEntryResponse_DaemonBlockCompleteEntryResponse$fromJson_closure(), type$.DaemonTxBlobEntryResponse);
        t4 = A.List_List$of(t4, true, t4.$ti._eval$1("ListIterable.E"));
      }
      if (t4 == null)
        t4 = A._setArrayType([], type$.JSArray_DaemonTxBlobEntryResponse);
      return new A.DaemonBlockCompleteEntryResponse(t1, t2, t3, A.List_List$unmodifiable(t4, type$.DaemonTxBlobEntryResponse));
    },
    DaemonTxOutputIndicesResponse_DaemonTxOutputIndicesResponse$fromJson(json) {
      var t1 = type$.BigInt,
        t2 = J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "indices")), new A.DaemonTxOutputIndicesResponse_DaemonTxOutputIndicesResponse$fromJson_closure(), t1);
      A.List_List$unmodifiable(A.List_List$of(t2, true, t2.$ti._eval$1("ListIterable.E")), t1);
      return new A.DaemonTxOutputIndicesResponse();
    },
    DaemonBlockOutputIndicesResponse_DaemonBlockOutputIndicesResponse$fromJson(json) {
      var t1 = type$.DaemonTxOutputIndicesResponse,
        t2 = J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "indices")), new A.DaemonBlockOutputIndicesResponse_DaemonBlockOutputIndicesResponse$fromJson_closure(), t1);
      A.List_List$unmodifiable(A.List_List$of(t2, true, t2.$ti._eval$1("ListIterable.E")), t1);
      return new A.DaemonBlockOutputIndicesResponse();
    },
    DaemonGetBlockBinResponse$fromJson(json) {
      var t2, t3, t4,
        t1 = json.$index(0, "pool_info_extent");
      t1 = A.IntUtils_parse(t1 == null ? 0 : t1);
      if (!(t1 >= 0 && t1 < 3))
        return A.ioore(B.List_StN, t1);
      t1 = type$.List_dynamic;
      t2 = type$.DaemonBlockCompleteEntryResponse;
      t2 = A.List_List$unmodifiable(J.map$1$1$ax(t1._as(json.$index(0, "blocks")), new A.DaemonGetBlockBinResponse$fromJson_closure(), t2), t2);
      A.BigintUtils_parse(json.$index(0, "start_height"));
      A.BigintUtils_parse(json.$index(0, "current_height"));
      A._asStringQ(json.$index(0, "top_block_hash"));
      t3 = type$.DaemonBlockOutputIndicesResponse;
      A.List_List$unmodifiable(J.map$1$1$ax(t1._as(json.$index(0, "output_indices")), new A.DaemonGetBlockBinResponse$fromJson_closure0(), t3), t3);
      if (A.BigintUtils_tryParse(json.$index(0, "daemon_time")) == null)
        $.$get$_BigIntImpl_zero();
      t1 = type$.nullable_List_dynamic;
      t3 = t1._as(json.$index(0, "added_pool_txs"));
      if (t3 != null) {
        t4 = type$.DaemonPoolTxInfoResponse;
        A.List_List$unmodifiable(J.map$1$1$ax(t3, new A.DaemonGetBlockBinResponse$fromJson_closure1(), t4), t4);
      }
      t3 = t1._as(json.$index(0, "remaining_added_pool_txids"));
      if (t3 != null)
        J.cast$1$0$ax(t3, type$.String);
      t1 = t1._as(json.$index(0, "removed_pool_txids"));
      if (t1 != null)
        J.cast$1$0$ax(t1, type$.String);
      A.BigintUtils_tryParse(json.$index(0, "credits"));
      t1 = A._asString(json.$index(0, "status"));
      A._asStringQ(json.$index(0, "top_hash"));
      A._asBoolQ(json.$index(0, "untrusted"));
      return new A.DaemonGetBlockBinResponse(t2, t1);
    },
    DaemonTxBlobEntryResponse: function DaemonTxBlobEntryResponse(t0, t1) {
      this.blob = t0;
      this.prunableHash = t1;
    },
    DaemonBlockCompleteEntryResponse: function DaemonBlockCompleteEntryResponse(t0, t1, t2, t3) {
      var _ = this;
      _.pruned = t0;
      _.block = t1;
      _.blockWeight = t2;
      _.txs = t3;
    },
    DaemonBlockCompleteEntryResponse_DaemonBlockCompleteEntryResponse$fromJson_closure: function DaemonBlockCompleteEntryResponse_DaemonBlockCompleteEntryResponse$fromJson_closure() {
    },
    DaemonBlockCompleteEntryResponse_toJson_closure: function DaemonBlockCompleteEntryResponse_toJson_closure() {
    },
    DaemonTxOutputIndicesResponse: function DaemonTxOutputIndicesResponse() {
    },
    DaemonTxOutputIndicesResponse_DaemonTxOutputIndicesResponse$fromJson_closure: function DaemonTxOutputIndicesResponse_DaemonTxOutputIndicesResponse$fromJson_closure() {
    },
    DaemonPoolTxInfoResponse: function DaemonPoolTxInfoResponse() {
    },
    DaemonBlockOutputIndicesResponse: function DaemonBlockOutputIndicesResponse() {
    },
    DaemonBlockOutputIndicesResponse_DaemonBlockOutputIndicesResponse$fromJson_closure: function DaemonBlockOutputIndicesResponse_DaemonBlockOutputIndicesResponse$fromJson_closure() {
    },
    PoolInfoExtent: function PoolInfoExtent(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    DaemonRequestBlocksInfo: function DaemonRequestBlocksInfo(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    DaemonGetBlockBinResponse: function DaemonGetBlockBinResponse(t0, t1) {
      this.blocks = t0;
      this.status = t1;
    },
    DaemonGetBlockBinResponse$fromJson_closure: function DaemonGetBlockBinResponse$fromJson_closure() {
    },
    DaemonGetBlockBinResponse$fromJson_closure0: function DaemonGetBlockBinResponse$fromJson_closure0() {
    },
    DaemonGetBlockBinResponse$fromJson_closure1: function DaemonGetBlockBinResponse$fromJson_closure1() {
    },
    DistributionResponse__decodeRctOffsets(distribution) {
      var offset, shift, byte,
        offsets = A._setArrayType([], type$.JSArray_BigInt),
        result = $.$get$_BigIntImpl_zero();
      for (offset = 0, shift = 0; distribution.length > offset;) {
        byte = distribution[offset];
        ++offset;
        result = result.$or(0, A._BigIntImpl__BigIntImpl$from(byte & 127).$shl(0, shift));
        shift += 7;
        if ((byte & 128) === 0) {
          B.JSArray_methods.add$1(offsets, result);
          result = $.$get$_BigIntImpl_zero();
          shift = 0;
          continue;
        }
      }
      return offsets;
    },
    DistributionResponse_DistributionResponse$fromJson(json) {
      var distribution, t1,
        _s8_ = "compress",
        _s12_ = "distribution",
        compress = A._asBool(json.$index(0, _s8_));
      if (A._asBool(json.$index(0, "binary")))
        distribution = A.DistributionResponse__decodeRctOffsets(compress ? A.BytesUtils_fromHexString(A._asString(json.$index(0, "compressed_data"))) : A.BytesUtils_fromHexString(A._asString(json.$index(0, _s12_))));
      else {
        t1 = J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, _s12_)), new A.DistributionResponse_DistributionResponse$fromJson_closure(), type$.BigInt);
        distribution = A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
      }
      A.BigintUtils_parse(json.$index(0, "amount"));
      A.IntUtils_parse(json.$index(0, "base"));
      A._asBool(json.$index(0, _s8_));
      A.IntUtils_tryParse(json.$index(0, "start_height"));
      return new A.DistributionResponse(distribution);
    },
    OutputDistributionResponse$fromJson(json) {
      var t2,
        t1 = J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "distributions")), new A.OutputDistributionResponse$fromJson_closure(), type$.DistributionResponse);
      t1 = A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
      A.BigintUtils_tryParse(json.$index(0, "credits"));
      t2 = A._asString(json.$index(0, "status"));
      A._asStringQ(json.$index(0, "top_hash"));
      A._asBoolQ(json.$index(0, "untrusted"));
      return new A.OutputDistributionResponse(t1, t2);
    },
    DistributionResponse: function DistributionResponse(t0) {
      this.distribution = t0;
    },
    DistributionResponse_DistributionResponse$fromJson_closure: function DistributionResponse_DistributionResponse$fromJson_closure() {
    },
    OutputDistributionResponse: function OutputDistributionResponse(t0, t1) {
      this.distributions = t0;
      this.status = t1;
    },
    OutputDistributionResponse$fromJson_closure: function OutputDistributionResponse$fromJson_closure() {
    },
    TxResponse_TxResponse$fromJson(json) {
      var t2,
        t1 = json.$index(0, "as_hex"),
        txHex = A._asString(t1 == null ? "" : t1);
      if (B.JSString_methods.trim$0(txHex).length === 0)
        txHex = A._asString(json.$index(0, "pruned_as_hex"));
      t1 = A._asStringQ(json.$index(0, "as_json"));
      t1 = t1 == null ? null : t1.length !== 0;
      if (t1 === true)
        A.StringUtils_tryToJson(json.$index(0, "as_json"), type$.Map_String_dynamic);
      A.IntUtils_tryParse(json.$index(0, "block_height"));
      A.IntUtils_tryParse(json.$index(0, "block_timestamp"));
      A.IntUtils_tryParse(json.$index(0, "confirmations"));
      A._asBool(json.$index(0, "double_spend_seen"));
      A._asBool(json.$index(0, "in_pool"));
      t1 = type$.nullable_List_dynamic._as(json.$index(0, "output_indices"));
      if (t1 == null)
        t1 = null;
      else {
        t1 = J.map$1$1$ax(t1, new A.TxResponse_TxResponse$fromJson_closure(), type$.BigInt);
        t1 = A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
      }
      if (t1 == null)
        t1 = A._setArrayType([], type$.JSArray_BigInt);
      A._asString(json.$index(0, "tx_hash"));
      t2 = B.JSString_methods.trim$0(txHex);
      A._asString(json.$index(0, "prunable_hash"));
      A.List_List$unmodifiable(t1, type$.BigInt);
      return new A.TxResponse(t2);
    },
    TxResponse: function TxResponse(t0) {
      this.txHex = t0;
    },
    TxResponse_TxResponse$fromJson_closure: function TxResponse_TxResponse$fromJson_closure() {
    },
    MoneroProvider__findError(params, response, SERVICERESPONSE) {
      var data, error,
        t1 = params.requestType;
      switch (t1.index) {
        case 0:
        case 1:
          data = response.cast$1$0(0, type$.BaseServiceResponse_Map_String_dynamic).getResult$1(params);
          if (t1 === B.DemonRequestType_0)
            return A.ServiceProviderUtils_parseResponse(data, params, SERVICERESPONSE);
          error = A.StringUtils_tryToJson(data.$index(0, "error"), type$.Map_String_dynamic);
          if (error != null) {
            t1 = error.$index(0, "message");
            t1 = t1 == null ? null : J.toString$0$(t1);
            if (t1 == null)
              t1 = "";
            throw A.wrapException(A.RPCError$(error, A.IntUtils_tryParse(error.$index(0, "code")), t1, null));
          }
          return A.ServiceProviderUtils_parseResponse(data.$index(0, "result"), params, SERVICERESPONSE);
        case 2:
          return A.ServiceProviderUtils_parseResponse(A.MoneroStorageSerializer_deserialize(response.cast$1$0(0, type$.BaseServiceResponse_List_int).getResult$1(params)), params, SERVICERESPONSE);
        default:
          throw A.wrapException(B.DartMoneroPluginException_6m4);
      }
    },
    MoneroProvider: function MoneroProvider(t0) {
      this.rpc = t0;
      this._id = 0;
    },
    MoneroSerializationException$(message, details) {
      return new A.MoneroSerializationException(message, details);
    },
    MoneroSerializationException: function MoneroSerializationException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    MoneroLayoutConst_varintBigInt(property) {
      A._asStringQ(property);
      return new A.MoneroBigIntVarInt(new A.BigIntLayout(8, null), A._BigIntImpl__BigIntImpl$from(128), A._BigIntImpl__BigIntImpl$from(127), -1, property);
    },
    MoneroLayoutConst_varintInt(property) {
      A._asStringQ(property);
      return new A.MoneroIntVarInt(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, property);
    },
    MoneroLayoutConst_variantBytes(property) {
      A._asStringQ(property);
      return A.MoneroLayoutConst_variantVec(A.IntegerLayout$(1, B.C_Endian0, null, false), property, type$.int);
    },
    MoneroLayoutConst_variantString(property) {
      var t1 = A.MoneroLayoutConst_variantVec(A.IntegerLayout$(1, B.C_Endian0, null, false), null, type$.int);
      return new A.CustomLayout(t1, new A.MoneroLayoutConst_variantString_closure(), new A.MoneroLayoutConst_variantString_closure0(), t1.span, property, type$.CustomLayout_of_List_int_and_String);
    },
    MoneroLayoutConst_variantVec(elementLayout, property, $T) {
      var layout = A.StructLayout_StructLayout(A._setArrayType([A.SequenceLayout_SequenceLayout(A.VariantOffsetLayout$(null), elementLayout, "values", type$.dynamic)], type$.JSArray_Layout_dynamic), false, null);
      return new A.CustomLayout(layout, new A.MoneroLayoutConst_variantVec_closure($T), new A.MoneroLayoutConst_variantVec_closure0($T), layout.span, property, type$.$env_1_1_Map_String_dynamic._bind$1($T._eval$1("List<0>"))._eval$1("CustomLayout<1,2>"));
    },
    MoneroLayoutConst_map(keyLayout, property, valueLayout) {
      var layout,
        t1 = keyLayout.span;
      t1 = t1 >= 0 && valueLayout.span >= 0 ? t1 + valueLayout.span : -1;
      layout = A.StructLayout_StructLayout(A._setArrayType([A.SequenceLayout_SequenceLayout(A.VariantOffsetLayout$(null), new A.MapEntryLayout(keyLayout, valueLayout, t1, ""), "values", type$.dynamic)], type$.JSArray_Layout_dynamic), false, null);
      return new A.CustomLayout(layout, new A.MoneroLayoutConst_map_closure(), new A.MoneroLayoutConst_map_closure0(), layout.span, property, type$.CustomLayout_of_Map_String_dynamic_and_Map_dynamic_dynamic);
    },
    MoneroLayoutConst_variantString_closure0: function MoneroLayoutConst_variantString_closure0() {
    },
    MoneroLayoutConst_variantString_closure: function MoneroLayoutConst_variantString_closure() {
    },
    MoneroLayoutConst_variantVec_closure: function MoneroLayoutConst_variantVec_closure(t0) {
      this.T = t0;
    },
    MoneroLayoutConst_variantVec_closure0: function MoneroLayoutConst_variantVec_closure0(t0) {
      this.T = t0;
    },
    MoneroLayoutConst_map_closure0: function MoneroLayoutConst_map_closure0() {
    },
    MoneroLayoutConst_map_closure: function MoneroLayoutConst_map_closure() {
    },
    MoneroBigIntVarInt$(layout, property) {
      return new A.MoneroBigIntVarInt(layout, A._BigIntImpl__BigIntImpl$from(128), A._BigIntImpl__BigIntImpl$from(127), -1, property);
    },
    MoneroBigIntVarInt_readVarintBig(bytes) {
      var shift, i, byte,
        result = $.$get$_BigIntImpl_zero();
      for (shift = 0, i = 0; i < bytes.length; ++i) {
        byte = bytes[i];
        result = result.$or(0, A._BigIntImpl__BigIntImpl$from(byte & 127).$shl(0, shift));
        shift += 7;
        if ((byte & 128) === 0)
          break;
      }
      return result;
    },
    MoneroIntVarInt_writeVarint(value) {
      var dest = A._setArrayType([], type$.JSArray_int);
      for (; value >= 128;) {
        B.JSArray_methods.add$1(dest, value & 127 | 128);
        value = B.JSInt_methods._shrOtherPositive$1(value, 7);
      }
      B.JSArray_methods.add$1(dest, value & 127);
      return dest;
    },
    MoneroBigIntVarInt: function MoneroBigIntVarInt(t0, t1, t2, t3, t4) {
      var _ = this;
      _.layout = t0;
      _.continueFlag = t1;
      _.sevenBitMask = t2;
      _.span = t3;
      _.property = t4;
    },
    MoneroIntVarInt: function MoneroIntVarInt(t0, t1, t2) {
      this.layout = t0;
      this.span = t1;
      this.property = t2;
    },
    VariantOffsetLayout$(property) {
      return new A.VariantOffsetLayout(new A.MoneroIntVarInt(A.IntegerLayout$(6, B.C_Endian0, null, false), -1, null), -1, property);
    },
    VariantOffsetLayout: function VariantOffsetLayout(t0, t1, t2) {
      this.layout = t0;
      this.span = t1;
      this.property = t2;
    },
    MoneroSerialization_deserialize(bytes, layout) {
      return layout.deserialize$1(bytes).value;
    },
    MoneroVariantSerialization_toVariantDecodeResult(json) {
      if (typeof json.$index(0, "key") != "string" || !json.containsKey$1("value"))
        throw A.wrapException(B.MoneroSerializationException_sES);
      return new A.MoneroVariantDecodeResult(A.ConstantMap_ConstantMap$from(json, type$.String, type$.dynamic));
    },
    MoneroVariantDecodeResult: function MoneroVariantDecodeResult(t0) {
      this.result = t0;
    },
    MoneroSerialization: function MoneroSerialization() {
    },
    MoneroVariantSerialization: function MoneroVariantSerialization() {
    },
    MoneroStorageFormatValidator_asA(value, $T) {
      var exception, t1;
      try {
        $T._as(value);
        return value;
      } catch (exception) {
        t1 = A.MoneroSerializationException$("Failed to cast to type " + A.createRuntimeType($T).toString$0(0) + ".", A.LinkedHashMap_LinkedHashMap$_literal(["value", J.toString$0$(value)], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    MoneroStorageFormatValidator_asMap(value) {
      var t1, exception;
      try {
        t1 = type$.Map_dynamic_dynamic._as(value).cast$2$0(0, type$.String, type$.dynamic);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.MoneroSerializationException_RyU);
      }
    },
    MoneroStorageFormatValidator_asArrayOf(value, allowEmpty, $T) {
      var toList, t1, t2, exception;
      try {
        toList = J.cast$1$0$ax(type$.List_dynamic._as(value), type$.nullable_Object);
        if (J.get$length$asx(toList) === 0 && !allowEmpty)
          throw A.wrapException(B.MoneroSerializationException_V9x);
        if (J.any$1$ax(toList, new A.MoneroStorageFormatValidator_asArrayOf_closure())) {
          t1 = type$.String;
          t1 = A.MoneroSerializationException$("Invalid array values: Array cannot contain null elements.", A.LinkedHashMap_LinkedHashMap$_literal(["elements", J.map$1$1$ax(toList, new A.MoneroStorageFormatValidator_asArrayOf_closure0(), t1).join$1(0, ", ")], t1, type$.dynamic));
          throw A.wrapException(t1);
        }
        t1 = toList;
        t2 = t1._source;
        return new A.CastList(t2, t1.$ti._eval$1("@<1>")._bind$1($T)._eval$1("CastList<1,2>"));
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.MoneroSerializationException)
          throw exception;
        else {
          t1 = A.MoneroSerializationException$("Invalid array of " + A.createRuntimeType($T).toString$0(0) + ".", A.LinkedHashMap_LinkedHashMap$_literal(["value", J.toString$0$(value)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
      }
    },
    MoneroStorageFormatValidator_toArrayObject(value, $T) {
      var asList, type, toPromitive, type0, values, t1, t2, t3, exception;
      try {
        asList = A.MoneroStorageFormatValidator_asArrayOf(value, false, type$.Object);
        t1 = asList;
        type = A.MoneroStorageFormatValidator_findType(t1.$ti._rest[1]._as(J.$index$asx(t1._source, 0)));
        if (type.isPrimitive) {
          t1 = asList;
          t2 = A.instanceType(t1);
          t3 = t2._eval$1("MappedListIterable<ListBase.E,Tuple<Object,MoneroStorageTypes>>");
          toPromitive = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Tuple<Object,MoneroStorageTypes>(ListBase.E)")._as(new A.MoneroStorageFormatValidator_toArrayObject_closure()), t3), true, t3._eval$1("ListIterable.E"));
          type0 = J.$index$asx(toPromitive, 0).item2;
          if (J.any$1$ax(toPromitive, new A.MoneroStorageFormatValidator_toArrayObject_closure0(type0))) {
            t1 = type$.String;
            t1 = A.MoneroSerializationException$("Invalid array values: All elements in the array must be of the same type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type0.name, "values", J.map$1$1$ax(asList, new A.MoneroStorageFormatValidator_toArrayObject_closure1(), t1).join$1(0, ", ")], t1, type$.dynamic));
            throw A.wrapException(t1);
          }
          t1 = toPromitive;
          t2 = A._arrayInstanceType(t1);
          t3 = t2._eval$1("MappedListIterable<1,Object>");
          t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Object(1)")._as(new A.MoneroStorageFormatValidator_toArrayObject_closure2()), t3), true, t3._eval$1("ListIterable.E"));
          return new A.Tuple(type0, new A.CastList(t3, A._arrayInstanceType(t3)._eval$1("@<1>")._bind$1($T)._eval$1("CastList<1,2>")), type$.$env_1_1_MoneroStorageTypes._bind$1($T._eval$1("List<0>"))._eval$1("Tuple<1,2>"));
        }
        if (type === B.MoneroStorageTypes_OBJECT_12_false_false)
          try {
            t1 = asList;
            t2 = A.instanceType(t1);
            t3 = t2._eval$1("MappedListIterable<ListBase.E,Map<String,@>>");
            values = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(ListBase.E)")._as(new A.MoneroStorageFormatValidator_toArrayObject_closure3()), t3), true, t3._eval$1("ListIterable.E"));
            t3 = values;
            t2 = A._arrayInstanceType(t3);
            t1 = t2._eval$1("MappedListIterable<1,MoneroSection>");
            t1 = A.List_List$of(new A.MappedListIterable(t3, t2._eval$1("MoneroSection(1)")._as(new A.MoneroStorageFormatValidator_toArrayObject_closure4()), t1), true, t1._eval$1("ListIterable.E"));
            return new A.Tuple(B.MoneroStorageTypes_OBJECT_12_false_false, new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("@<1>")._bind$1($T)._eval$1("CastList<1,2>")), type$.$env_1_1_MoneroStorageTypes._bind$1($T._eval$1("List<0>"))._eval$1("Tuple<1,2>"));
          } catch (exception) {
          }
        t1 = A.MoneroSerializationException$("Invalid array values: Unable to determine the element type.", A.LinkedHashMap_LinkedHashMap$_literal(["value", A.ListBase_listToString(value)], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.MoneroSerializationException)
          throw exception;
        else {
          t1 = A.MoneroSerializationException$("Invalid array of type " + A.createRuntimeType($T).toString$0(0), A.LinkedHashMap_LinkedHashMap$_literal(["value", A.ListBase_listToString(value)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
      }
    },
    MoneroStorageFormatValidator_findType(value) {
      if (value instanceof A.MoneroStorageBinary)
        return value.type;
      if (A._isInt(value) || value instanceof A._BigIntImpl) {
        if (A.BigintUtils_parse(value)._isNegative)
          return B.MoneroStorageTypes_INT64_1_true_true;
        return B.MoneroStorageTypes_UINT64_5_true_true;
      }
      if (typeof value == "string")
        return B.MoneroStorageTypes_STRING_10_true_false;
      else if (A._isBool(value))
        return B.MoneroStorageTypes_BOOL_11_true_false;
      else if (typeof value == "number")
        return B.MoneroStorageTypes_DOUBLE_9_true_false;
      else if (type$.List_dynamic._is(value))
        return B.MoneroStorageTypes_ARRAY_13_false_false;
      else if (type$.Map_dynamic_dynamic._is(value))
        return B.MoneroStorageTypes_OBJECT_12_false_false;
      throw A.wrapException(A.MoneroSerializationException$("Unknown storage format: Unable to determine the correct type for the provided value.", A.LinkedHashMap_LinkedHashMap$_literal(["value", value], type$.String, type$.dynamic)));
    },
    MoneroStorageFormatValidator_asPrimitiveType(value, $T) {
      var currentValue,
        type = A.MoneroStorageFormatValidator_findType(value);
      if (type.isPrimitive) {
        currentValue = A.MoneroStorageFormatValidator_validatePrimitiveObjects(type, value);
        if (!$T._is(currentValue))
          throw A.wrapException(A.MoneroSerializationException$("Incorrect primitive " + A.createRuntimeType($T).toString$0(0) + " value.", A.LinkedHashMap_LinkedHashMap$_literal(["value", value], type$.String, type$.dynamic)));
        return new A.Tuple($T._as(currentValue), type, $T._eval$1("Tuple<0,MoneroStorageTypes>"));
      }
      throw A.wrapException(A.MoneroSerializationException$("Invalid primitive value.", A.LinkedHashMap_LinkedHashMap$_literal(["value", value], type$.String, type$.dynamic)));
    },
    MoneroStorageFormatValidator_validatePrimitiveObjects(type, value) {
      var typeData, toBig, t1, t2, t3;
      if (value instanceof A.MoneroStorageBinary && value.type.isPrimitive)
        return value;
      if (type.isInteger) {
        typeData = A.MoneroStorageSerializer_getNumericTypesBitLength(type);
        toBig = A.BigintUtils_tryParse(value);
        t1 = true;
        if (toBig != null) {
          t2 = toBig.get$bitLength(0);
          t3 = typeData.item1;
          if (typeof t3 !== "number")
            return A.iae(t3);
          if (!(t2 > t3))
            t1 = toBig._isNegative && !A.boolConversionCheck(typeData.item2);
        }
        if (t1) {
          t1 = type.name;
          A.throwExpression(A.MoneroSerializationException$("Invalid numeric for type " + t1, A.LinkedHashMap_LinkedHashMap$_literal(["type", t1, "value", J.toString$0$(value)], type$.String, type$.dynamic)));
        }
        return toBig;
      }
      switch (type) {
        case B.MoneroStorageTypes_DOUBLE_9_true_false:
          if (typeof value == "number")
            return value;
          break;
        case B.MoneroStorageTypes_STRING_10_true_false:
          if (typeof value == "string")
            return value;
          break;
        case B.MoneroStorageTypes_BOOL_11_true_false:
          if (A._isBool(value))
            return value;
          break;
        default:
          break;
      }
      t1 = type.name;
      throw A.wrapException(A.MoneroSerializationException$("Invalid value for type " + t1, A.LinkedHashMap_LinkedHashMap$_literal(["type", t1, "value", J.toString$0$(value)], type$.String, type$.dynamic)));
    },
    MoneroStorageFormatValidator_asArrayOf_closure: function MoneroStorageFormatValidator_asArrayOf_closure() {
    },
    MoneroStorageFormatValidator_asArrayOf_closure0: function MoneroStorageFormatValidator_asArrayOf_closure0() {
    },
    MoneroStorageFormatValidator_toArrayObject_closure: function MoneroStorageFormatValidator_toArrayObject_closure() {
    },
    MoneroStorageFormatValidator_toArrayObject_closure0: function MoneroStorageFormatValidator_toArrayObject_closure0(t0) {
      this.type = t0;
    },
    MoneroStorageFormatValidator_toArrayObject_closure1: function MoneroStorageFormatValidator_toArrayObject_closure1() {
    },
    MoneroStorageFormatValidator_toArrayObject_closure2: function MoneroStorageFormatValidator_toArrayObject_closure2() {
    },
    MoneroStorageFormatValidator_toArrayObject_closure3: function MoneroStorageFormatValidator_toArrayObject_closure3() {
    },
    MoneroStorageFormatValidator_toArrayObject_closure4: function MoneroStorageFormatValidator_toArrayObject_closure4() {
    },
    MoneroStorageBinary_MoneroStorageBinary$fromListOfHex(hex) {
      var t1 = A._arrayInstanceType(hex),
        t2 = t1._eval$1("MappedListIterable<1,List<int>>"),
        t3 = t2._eval$1("ExpandIterable<Iterable.E,int>");
      t3 = A.List_List$of(new A.ExpandIterable(new A.MappedListIterable(hex, t1._eval$1("List<int>(1)")._as(new A.MoneroStorageBinary_MoneroStorageBinary$fromListOfHex_closure()), t2), t2._eval$1("Iterable<int>(Iterable.E)")._as(new A.MoneroStorageBinary_MoneroStorageBinary$fromListOfHex_closure0()), t3), true, t3._eval$1("Iterable.E"));
      A.BytesUtils_validateListOfBytes(t3);
      return new A.MoneroStorageBinary(A.List_List$unmodifiable(t3, type$.int), B.MoneroStorageTypes_STRING_10_true_false);
    },
    MoneroStorageContainer: function MoneroStorageContainer() {
    },
    MoneroStorageBinary: function MoneroStorageBinary(t0, t1) {
      this.data = t0;
      this.type = t1;
    },
    MoneroStorageBinary_MoneroStorageBinary$fromListOfHex_closure: function MoneroStorageBinary_MoneroStorageBinary$fromListOfHex_closure() {
    },
    MoneroStorageBinary_MoneroStorageBinary$fromListOfHex_closure0: function MoneroStorageBinary_MoneroStorageBinary$fromListOfHex_closure0() {
    },
    MoneroSection_MoneroSection$fromJson(json) {
      var t2,
        t1 = json.get$keys(),
        sortedMap = t1.toList$0(t1);
      B.JSArray_methods.sort$0(sortedMap);
      t1 = A._arrayInstanceType(sortedMap);
      t2 = t1._eval$1("MappedListIterable<1,MoneroStorageEntry<@>>");
      return new A.MoneroSection(A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(sortedMap, t1._eval$1("MoneroStorageEntry<@>(1)")._as(new A.MoneroSection_MoneroSection$fromJson_closure(json)), t2), true, t2._eval$1("ListIterable.E")), type$.MoneroStorageEntry_dynamic));
    },
    MoneroStorageEntryNull$_($name) {
      var t1 = $name.length;
      if (t1 === 0 || t1 > 255)
        A.throwExpression(B.MoneroSerializationException_bDN);
      return new A.MoneroStorageEntryNull(null, $name, B.MoneroStorageTypes_Unknown_0_false_false);
    },
    MoneroStorage: function MoneroStorage(t0) {
      this.section = t0;
    },
    MoneroSection: function MoneroSection(t0) {
      this.enteries = t0;
    },
    MoneroSection_MoneroSection$fromJson_closure: function MoneroSection_MoneroSection$fromJson_closure(t0) {
      this.json = t0;
    },
    MoneroSection_hasValue_closure: function MoneroSection_hasValue_closure() {
    },
    MoneroSection_serialize_closure: function MoneroSection_serialize_closure() {
    },
    MoneroSection_serialize_closure0: function MoneroSection_serialize_closure0() {
    },
    MoneroStorageEntry: function MoneroStorageEntry() {
    },
    MoneroStorageEntryNull: function MoneroStorageEntryNull(t0, t1, t2) {
      this.value = t0;
      this.name = t1;
      this.type = t2;
    },
    MoneroStorageEntryPromitive: function MoneroStorageEntryPromitive(t0, t1, t2, t3, t4) {
      var _ = this;
      _.hasValue = t0;
      _.value = t1;
      _.name = t2;
      _.type = t3;
      _.$ti = t4;
    },
    MoneroStorageEntryList: function MoneroStorageEntryList(t0, t1, t2, t3, t4) {
      var _ = this;
      _.childType = t0;
      _.value = t1;
      _.name = t2;
      _.type = t3;
      _.$ti = t4;
    },
    MoneroStorageEntrySection: function MoneroStorageEntrySection(t0, t1, t2) {
      this.value = t0;
      this.name = t1;
      this.type = t2;
    },
    DecodeStorageResult: function DecodeStorageResult(t0, t1, t2) {
      this.value = t0;
      this.length = t1;
      this.$ti = t2;
    },
    MoneroStorageTypes_fromFlag(flag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_8aB, new A.MoneroStorageTypes_fromFlag_closure(flag), new A.MoneroStorageTypes_fromFlag_closure0(flag));
    },
    MoneroStorageTypes: function MoneroStorageTypes(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _._types$_value = t1;
      _.isPrimitive = t2;
      _.isInteger = t3;
    },
    MoneroStorageTypes_fromFlag_closure: function MoneroStorageTypes_fromFlag_closure(t0) {
      this.flag = t0;
    },
    MoneroStorageTypes_fromFlag_closure0: function MoneroStorageTypes_fromFlag_closure0(t0) {
      this.flag = t0;
    },
    MoneroTxBuilder__createTxSecretKeySeed(domain, fakeTx, sources) {
      var entropy, t1, t2, t3, t4;
      if (fakeTx)
        return B.List_B8J;
      entropy = A.RCT_skGen_();
      t1 = type$.int;
      t2 = A.List_List$of(new A.CodeUnits(domain), true, t1);
      B.JSArray_methods.addAll$1(t2, entropy);
      t3 = A._arrayInstanceType(sources);
      t4 = t3._eval$1("MappedListIterable<1,List<int>>");
      B.JSArray_methods.addAll$1(t2, new A.ExpandIterable(new A.MappedListIterable(sources, t3._eval$1("List<int>(1)")._as(new A.MoneroTxBuilder__createTxSecretKeySeed_closure()), t4), t4._eval$1("Iterable<int>(Iterable.E)")._as(new A.MoneroTxBuilder__createTxSecretKeySeed_closure0()), t4._eval$1("ExpandIterable<Iterable.E,int>")));
      t2 = A.Keccack_hash(t2, 32);
      A.BytesUtils_validateListOfBytes(t2);
      return A.List_List$unmodifiable(t2, t1);
    },
    MoneroTxBuilder__makeTxSecretKeys(fakeTx, $length, seed) {
      var data, secretKeys, i, hash;
      if (fakeTx)
        return A.List_List$filled($length, A.MoneroPrivateKey_MoneroPrivateKey$fromBytes(B.List_B8J), false, type$.MoneroPrivateKey);
      data = A._setArrayType([seed, A.Keccack_hash(new A.CodeUnits("multisig_tx_privkeys"), 32)], type$.JSArray_List_int);
      secretKeys = A._setArrayType([], type$.JSArray_MoneroPrivateKey);
      for (i = 0; i < $length; ++i) {
        hash = A.RCT_hashToScalarKeys(data);
        B.JSArray_methods.$indexSet(data, 1, hash);
        if (hash.length !== 32)
          A.throwExpression(B.ArgumentException_4AN);
        if (A.CryptoOps_scCheck(hash) !== 0)
          A.throwExpression(B.ArgumentException_a1W);
        B.JSArray_methods.add$1(secretKeys, new A.MoneroPrivateKey(A.EDDSAPrivateKey_EDDSAPrivateKey$fromKhalow($.$get$Curves_generatorED25519(), hash)));
      }
      return A.List_List$unmodifiable(secretKeys, type$.MoneroPrivateKey);
    },
    MoneroTxBuilder_absoluteOutputOffsetsToRelative(off) {
      var i, t1, t2, i0,
        res = A.List_List$from(off, true, type$.BigInt);
      if (res.length === 0)
        return res;
      B.JSArray_methods.sort$0(res);
      for (i = res.length - 1; i > 0; i = i0) {
        t1 = res.length;
        if (!(i < t1))
          return A.ioore(res, i);
        t2 = res[i];
        i0 = i - 1;
        if (!(i0 < t1))
          return A.ioore(res, i0);
        B.JSArray_methods.$indexSet(res, i, J.$sub$n(t2, res[i0]));
      }
      return res;
    },
    MoneroTxBuilder__computeSourceKeys(sources) {
      var t1 = A._arrayInstanceType(sources),
        t2 = t1._eval$1("MappedListIterable<1,TxinToKey>"),
        inputs = A.List_List$of(new A.MappedListIterable(sources, t1._eval$1("TxinToKey(1)")._as(new A.MoneroTxBuilder__computeSourceKeys_closure()), t2), true, t2._eval$1("ListIterable.E"));
      t2 = t1._eval$1("MappedListIterable<1,List<int>>");
      return A.ComputeSourceKeys$_(A.List_List$of(new A.MappedListIterable(sources, t1._eval$1("List<int>(1)")._as(new A.MoneroTxBuilder__computeSourceKeys_closure0()), t2), true, t2._eval$1("ListIterable.E")), inputs);
    },
    MoneroTxBuilder__computeDestinationKeys(account, change, destinations, fakeTx, fee, sources, txSeed) {
      var t3, t4, addresses, cl, txKeys, txKey, amountKeys, extras, unknowDsts, dst, paymentId, t5, t6, pId, txPubKey, ap, vouts, additionalTxPubKey, additionalTxSecretKeys, t7, t8, t9, outIndex, dest, t10, t11, t12, t13, t14, t15, additionalTxPubKey0, sc, derivation, keyBytes, pk, amountKey, result, key, aP3, r, ag, point, _null = null,
        t1 = A.List_List$of(destinations, true, type$.MoneroTxDestination),
        t2 = change == null;
      if (!t2)
        t1.push(change);
      if (t1.length === 1) {
        t3 = $.$get$_BigIntImpl_zero();
        t4 = A.MoneroAccountAddress_MoneroAccountAddress$fromPubKeys(B.MoneroNetwork_wEo, A.RCT_skpkGen_().item2, A.RCT_skpkGen_().item2, B.XmrAddressType_GJa);
        B.JSArray_methods.add$1(t1, new A.MoneroTxDestination(A.BigIntHelper_get_asUint64(t3), t4));
      }
      t3 = A._arrayInstanceType(t1);
      t4 = t3._eval$1("MappedListIterable<1,MoneroAddress>");
      addresses = A.List_List$of(new A.MappedListIterable(t1, t3._eval$1("MoneroAddress(1)")._as(new A.MoneroTxBuilder__computeDestinationKeys_closure()), t4), true, t4._eval$1("ListIterable.E"));
      if (A.LinkedHashSet_LinkedHashSet$from(addresses, A._arrayInstanceType(addresses)._precomputed1)._collection$_length !== addresses.length)
        throw A.wrapException(B.DartMoneroPluginException_JhM);
      t4 = sources.total.compareTo$1(0, B.JSArray_methods.fold$1$2(t1, $.$get$_BigIntImpl_zero(), new A.MoneroTxBuilder__computeDestinationKeys_closure0(), type$.BigInt).$add(0, fee));
      if (t4 !== 0)
        throw A.wrapException(B.DartMoneroPluginException_apl);
      cl = A.TxDestinationInfo_TxDestinationInfo(t2 ? _null : change.address, t1);
      txKeys = A.MoneroTxBuilder__makeTxSecretKeys(fakeTx, cl.get$needAdditionalTxkeys() ? t1.length + 1 : 1, txSeed);
      if (0 >= txKeys.length)
        return A.ioore(txKeys, 0);
      txKey = txKeys[0];
      amountKeys = A._setArrayType([], type$.JSArray_List_int);
      extras = A._setArrayType([], type$.JSArray_TxExtra);
      unknowDsts = new A.WhereIterable(t1, t3._eval$1("bool(1)")._as(new A.MoneroTxBuilder__computeDestinationKeys_closure1(change)), t3._eval$1("WhereIterable<1>"));
      if (unknowDsts.get$length(0) === 1) {
        dst = unknowDsts.elementAt$1(0, 0);
        t3 = type$.int;
        paymentId = A.List_List$filled(8, 0, false, t3);
        if (!fakeTx) {
          t4 = dst.address;
          t5 = t4.type;
          if (t5 === B.XmrAddressType_GNA) {
            t6 = type$.MoneroIntegratedAddress;
            A.checkTypeBound(t6, type$.MoneroAddress, "T", "cast");
            if (!(t4 instanceof A.MoneroIntegratedAddress))
              A.throwExpression(A.DartMoneroPluginException$("monero address casting failed.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", A.createRuntimeType(t6).toString$0(0), "type", t5.name], type$.String, type$.dynamic)));
            paymentId = t6._as(t4).paymentId;
          }
          paymentId = A.MoneroTransactionHelper_encryptPaymentId(paymentId, unknowDsts.get$first(0).address.pubViewKey, txKey);
        }
        A.BytesUtils_validateListOfBytes(paymentId);
        pId = A.ListValidator_exc(paymentId, 8, "exncrypted payment id", t3);
        t3 = A._setArrayType([1], type$.JSArray_int);
        B.JSArray_methods.addAll$1(t3, pId);
        B.JSArray_methods.add$1(extras, A.TxExtraNonce$(t3));
      } else if (B.JSArray_methods.any$1(t1, new A.MoneroTxBuilder__computeDestinationKeys_closure2()))
        throw A.wrapException(B.MoneroCryptoException_OcK);
      if (fakeTx)
        txPubKey = $.$get$_MonerTxBuilderConst_fakePubKey();
      else {
        t3 = cl.singleDestionation;
        t4 = txKey.privateKey.key;
        if (t3 != null) {
          t3 = t3.pubSpendKey;
          ap = A.RCT_zero(true);
          A.RCT_scalarmultKey(ap, t3.publicKey._encoded, t4);
          txPubKey = ap;
        } else
          txPubKey = A.RCT_scalarmultBase_(t4);
        txPubKey = A.MoneroPublicKey_MoneroPublicKey$fromBytes(txPubKey);
      }
      vouts = A._setArrayType([], type$.JSArray_MoneroTxout);
      B.JSArray_methods.add$1(extras, new A.TxExtraPublicKey(txPubKey, B.TxExtraTypes_publickey_1));
      additionalTxPubKey = A._setArrayType([], type$.JSArray_MoneroPublicKey);
      additionalTxSecretKeys = cl.get$needAdditionalTxkeys() ? B.JSArray_methods.sublist$1(txKeys, 1) : _null;
      for (t3 = additionalTxSecretKeys == null, t4 = !t3, t5 = type$.int, t6 = txKey.privateKey.key, t7 = account.account.privVkey, t8 = txPubKey.publicKey._encoded, t9 = t7.privateKey.key, outIndex = 0; outIndex < t1.length; ++outIndex) {
        dest = t1[outIndex];
        t10 = dest.address;
        if (fakeTx) {
          t11 = t2 ? _null : change.address;
          if (t3)
            t12 = _null;
          else {
            if (!(outIndex < additionalTxSecretKeys.length))
              return A.ioore(additionalTxSecretKeys, outIndex);
            t12 = additionalTxSecretKeys[outIndex];
          }
          t13 = t12 != null;
          if (t13) {
            t14 = t12.privateKey.key;
            if (t10.type === B.XmrAddressType_0rc) {
              t15 = t10.pubSpendKey.publicKey._point.toBytes$0();
              ap = A.RCT_zero(true);
              A.CryptoOps_scFill(ap, A.EDPoint_EDPoint$fromBytes($.$get$Curves_curveEd25519(), t15).$mul(0, A.Ed25519Utils_asScalarInt(t14)).toBytes$0());
              additionalTxPubKey0 = ap;
            } else {
              sc = A.Ed25519Utils_asScalarInt(A.Ed25519Utils_scalarReduce(t14));
              additionalTxPubKey0 = $.$get$Curves_generatorED25519().$mul(0, sc).toBytes$0();
            }
          } else
            additionalTxPubKey0 = _null;
          if (t10.$eq(0, t11))
            derivation = A.MoneroCrypto_generateKeyDerivationFast(txPubKey, t7);
          else {
            t11 = t10.type === B.XmrAddressType_0rc && t13;
            t13 = t10.pubViewKey;
            derivation = t11 ? A.MoneroCrypto_generateKeyDerivationFast(t13, t12) : A.MoneroCrypto_generateKeyDerivationFast(t13, txKey);
          }
          keyBytes = t10.pubSpendKey.publicKey._point.toBytes$0();
          if (keyBytes.length === 33)
            keyBytes = B.JSArray_methods.sublist$1(keyBytes, 1);
          t10 = $.$get$Curves_generatorED25519();
          t11 = t10.curve;
          pk = A.MoneroCrypto_derivePublicKeyFast(new A.MoneroPublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint(t10, A.EDPoint_EDPoint$fromBytes(t11, keyBytes))), derivation, outIndex);
          amountKey = A.MoneroCrypto_derivationToScalarFast(derivation, outIndex);
          t12 = A.IntHelper_get_asUint8(A.MoneroCrypto_deriveViewTag(derivation, outIndex));
          if (additionalTxPubKey0 == null)
            t10 = _null;
          else
            t10 = new A.MoneroPublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint(t10, A.EDPoint_EDPoint$fromBytes(t11, additionalTxPubKey0.length === 33 ? B.JSArray_methods.sublist$1(additionalTxPubKey0, 1) : additionalTxPubKey0)));
          result = A.List_List$from(amountKey, false, t5);
          result.fixed$length = Array;
          result.immutable$list = Array;
          key = new A.TxEpemeralKeyResult(new A.TxoutToTaggedKey(pk, t12, B.TxOutTargetType_TxoutToTaggedKey_3), result, t10);
        } else {
          t11 = t2 ? _null : change.address;
          if (t3)
            t12 = _null;
          else {
            if (!(outIndex < additionalTxSecretKeys.length))
              return A.ioore(additionalTxSecretKeys, outIndex);
            t12 = additionalTxSecretKeys[outIndex];
          }
          t13 = t12 != null;
          if (t13) {
            t14 = t12.privateKey.key;
            if (t10.type === B.XmrAddressType_0rc) {
              t15 = t10.pubSpendKey.publicKey._point.toBytes$0();
              ap = A.RCT_zero(true);
              aP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)));
              if (A.CryptoOps_geFromBytesVartime_(aP3, t15) !== 0)
                A.throwExpression(B.MoneroCryptoException_GJk);
              r = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)));
              A.CryptoOps_geScalarMult(r, t14, aP3);
              A.CryptoOps_geToBytes(ap, r);
              additionalTxPubKey0 = ap;
            } else {
              ag = A.RCT_zero(true);
              point = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)), new A.FieldElement(A.List_List$filled(10, 0, false, t5)));
              A.CryptoOps_scReduce32Copy(ag, t14);
              A.CryptoOps_geScalarMultBase(point, ag);
              A.CryptoOps_geP3Tobytes(ag, point);
              additionalTxPubKey0 = ag;
            }
          } else
            additionalTxPubKey0 = _null;
          if (t10.$eq(0, t11))
            derivation = A.MoneroCrypto_generateKeyDerivationBytes(t8, _null, t9);
          else {
            t11 = t10.type === B.XmrAddressType_0rc && t13;
            t13 = t10.pubViewKey.publicKey;
            derivation = t11 ? A.MoneroCrypto_generateKeyDerivationBytes(t13._encoded, _null, t12.privateKey.key) : A.MoneroCrypto_generateKeyDerivationBytes(t13._encoded, _null, t6);
          }
          keyBytes = t10.pubSpendKey.publicKey._point.toBytes$0();
          if (keyBytes.length === 33)
            keyBytes = B.JSArray_methods.sublist$1(keyBytes, 1);
          t10 = $.$get$Curves_generatorED25519();
          t11 = t10.curve;
          pk = A.MoneroCrypto_derivePublicKey(new A.MoneroPublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint(t10, A.EDPoint_EDPoint$fromBytes(t11, keyBytes))), derivation, outIndex);
          amountKey = A.MoneroCrypto_derivationToScalar(derivation, outIndex);
          t12 = A.IntHelper_get_asUint8(A.MoneroCrypto_deriveViewTag(derivation, outIndex));
          if (additionalTxPubKey0 == null)
            t10 = _null;
          else
            t10 = new A.MoneroPublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint(t10, A.EDPoint_EDPoint$fromBytes(t11, additionalTxPubKey0.length === 33 ? B.JSArray_methods.sublist$1(additionalTxPubKey0, 1) : additionalTxPubKey0)));
          result = A.List_List$from(amountKey, false, t5);
          result.fixed$length = Array;
          result.immutable$list = Array;
          key = new A.TxEpemeralKeyResult(new A.TxoutToTaggedKey(pk, t12, B.TxOutTargetType_TxoutToTaggedKey_3), result, t10);
        }
        B.JSArray_methods.add$1(vouts, new A.MoneroTxout(A.BigIntHelper_get_asUint64(dest.amount), key.txOut));
        B.JSArray_methods.add$1(amountKeys, key.amountKey);
        if (t4) {
          t10 = key.additionalTxPubKey;
          t10.toString;
          B.JSArray_methods.add$1(additionalTxPubKey, t10);
        }
      }
      if (additionalTxPubKey.length !== 0)
        B.JSArray_methods.add$1(extras, new A.TxExtraAdditionalPubKeys(A.List_List$unmodifiable(additionalTxPubKey, type$.MoneroPublicKey), B.TxExtraTypes_additionalPublicKeys_4));
      return A.ComputeDestinationKeys$(additionalTxPubKey, txKeys, amountKeys, extras, vouts, txPubKey);
    },
    MoneroTxBuilder__buildSignature(destinationKeys, fakeTx, fee, sourceKeys, sources) {
      var inSk, destinationPubKeys, _length, mixRing, i, _length0, _list, n, t3, inamounts, outamounts, inputs, outs, txHash, outSk, _i, result,
        t1 = A._arrayInstanceType(sources),
        t2 = t1._eval$1("MappedListIterable<1,int>"),
        index = A.List_List$of(new A.MappedListIterable(sources, t1._eval$1("int(1)")._as(new A.MoneroTxBuilder__buildSignature_closure()), t2), true, t2._eval$1("ListIterable.E"));
      t2 = t1._eval$1("MappedListIterable<1,CtKey>");
      inSk = A.List_List$of(new A.MappedListIterable(sources, t1._eval$1("CtKey(1)")._as(new A.MoneroTxBuilder__buildSignature_closure0()), t2), true, t2._eval$1("ListIterable.E"));
      destinationPubKeys = destinationKeys.get$destinationPubKeys();
      _length = sources.length;
      mixRing = J.JSArray_JSArray$allocateGrowable(_length, type$.List_CtKey);
      for (t1 = type$.JSArray_CtKey, i = 0; i < _length; ++i) {
        if (!(i < sources.length))
          return A.ioore(sources, i);
        _length0 = sources[i].outs.length;
        _list = A._setArrayType(new Array(_length0), t1);
        for (t2 = sources.length, n = 0; n < _length0; ++n) {
          if (!(i < t2))
            return A.ioore(sources, i);
          t3 = sources[i].outs;
          if (!(n < t3.length))
            return A.ioore(t3, n);
          _list[n] = t3[n].key;
        }
        mixRing[i] = _list;
      }
      inamounts = sourceKeys.get$amounts();
      outamounts = destinationKeys.get$amounts();
      fee = sourceKeys.total.$sub(0, destinationKeys.total);
      inputs = sourceKeys.get$toRctInputs();
      outs = destinationKeys.get$toRctOuts();
      txHash = A.MoneroTransactionPrefix$(A.MoneroTransactionHelper_toTxExtra(destinationKeys.extras), null, 2, inputs, outs).getTranactionPrefixHash$0();
      _length = outs.length;
      outSk = J.JSArray_JSArray$allocateGrowable(_length, type$.CtKey);
      for (t1 = type$.int, _i = 0; _i < _length; ++_i) {
        t2 = A.RCT_zero(true);
        t3 = A.RCT_zero(true);
        A.BytesUtils_validateListOfBytes(t2);
        result = A.List_List$from(t2, false, t1);
        result.fixed$length = Array;
        result.immutable$list = Array;
        t2 = A.ListHelper_exceptedLen(result, 32, t1);
        A.BytesUtils_validateListOfBytes(t3);
        result = A.List_List$from(t3, false, t1);
        result.fixed$length = Array;
        result.immutable$list = Array;
        outSk[_i] = new A.CtKey(t2, A.ListHelper_exceptedLen(result, 32, t1));
      }
      if (fakeTx) {
        t1 = A._arrayInstanceType(destinationPubKeys);
        t2 = t1._eval$1("MappedListIterable<1,List<int>>");
        return A.RCTGeneratorUtils_genFakeRctSimple(null, destinationKeys.amountKeys, true, A.List_List$of(new A.MappedListIterable(destinationPubKeys, t1._eval$1("List<int>(1)")._as(new A.MoneroTxBuilder__buildSignature_closure1()), t2), true, t2._eval$1("ListIterable.E")), inSk, inamounts, index, txHash, mixRing, outSk, outamounts, fee, type$.RCTSignatureBase, type$.RctSigPrunable);
      }
      t1 = A._arrayInstanceType(destinationPubKeys);
      t2 = t1._eval$1("MappedListIterable<1,List<int>>");
      return A.RCTGeneratorUtils_genRctSimple(null, destinationKeys.amountKeys, true, A.List_List$of(new A.MappedListIterable(destinationPubKeys, t1._eval$1("List<int>(1)")._as(new A.MoneroTxBuilder__buildSignature_closure2()), t2), true, t2._eval$1("ListIterable.E")), inSk, inamounts, index, txHash, mixRing, outSk, outamounts, fee, type$.RCTSignatureBase, type$.RctSigPrunable);
    },
    ComputeDestinationKeys$(additionalTxPubKey, allTxKeys, amountKeys, extras, outs, txPubKey) {
      var t1 = B.JSArray_methods.fold$1$2(outs, $.$get$_BigIntImpl_zero(), new A.ComputeDestinationKeys_closure(), type$.BigInt),
        t2 = A._arrayInstanceType(amountKeys);
      return new A.ComputeDestinationKeys(A.List_List$unmodifiable(new A.MappedListIterable(amountKeys, t2._eval$1("List<int>(1)")._as(new A.ComputeDestinationKeys_closure0()), t2._eval$1("MappedListIterable<1,List<int>>")), type$.List_int), A.List_List$unmodifiable(extras, type$.TxExtra), txPubKey, A.List_List$unmodifiable(additionalTxPubKey, type$.MoneroPublicKey), A.List_List$unmodifiable(allTxKeys, type$.MoneroPrivateKey), A.List_List$unmodifiable(outs, type$.MoneroTxout), t1);
    },
    ComputeDestinationKeys_ComputeDestinationKeys$fromStruct(json) {
      var t2, t3, t4, t5, t6, t7,
        t1 = A.QuickMap_asListBytes(json, "additionalTxPubKey");
      t1.toString;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,MoneroPublicKey>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("MoneroPublicKey(1)")._as(new A.ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t2 = A.QuickMap_asListBytes(json, "allTxKeys");
      t2.toString;
      t1 = A._arrayInstanceType(t2);
      t4 = t1._eval$1("MappedListIterable<1,MoneroPrivateKey>");
      t4 = A.List_List$of(new A.MappedListIterable(t2, t1._eval$1("MoneroPrivateKey(1)")._as(new A.ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure0()), t4), true, t4._eval$1("ListIterable.E"));
      t1 = A.QuickMap_asListBytes(json, "amountKeys");
      t1.toString;
      t2 = A.QuickMap_asListOfMap(json, "extras");
      t2.toString;
      t5 = A._arrayInstanceType(t2);
      t6 = t5._eval$1("MappedListIterable<1,TxExtra>");
      t6 = A.List_List$of(new A.MappedListIterable(t2, t5._eval$1("TxExtra(1)")._as(new A.ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure1()), t6), true, t6._eval$1("ListIterable.E"));
      t5 = A.QuickMap_asListOfMap(json, "outs");
      t5.toString;
      t2 = A._arrayInstanceType(t5);
      t7 = t2._eval$1("MappedListIterable<1,MoneroTxout>");
      return A.ComputeDestinationKeys$(t3, t4, t1, t6, A.List_List$of(new A.MappedListIterable(t5, t2._eval$1("MoneroTxout(1)")._as(new A.ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure2()), t7), true, t7._eval$1("ListIterable.E")), A.MoneroPublicKey_MoneroPublicKey$fromBytes(A.QuickMap_asBytes(json, "txPubKey", type$.List_int)));
    },
    ComputeDestinationKeys_layout(property) {
      var _null = null,
        t1 = type$.List_int,
        t2 = type$.Map_String_dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroLayoutConst_variantVec(A.RawBytesLayout_RawBytesLayout(32, _null), "amountKeys", t1), A.MoneroLayoutConst_variantVec(A.TxExtra_layout(_null), "extras", t2), A.RawBytesLayout_RawBytesLayout(32, "txPubKey"), A.MoneroLayoutConst_variantVec(A.RawBytesLayout_RawBytesLayout(32, _null), "additionalTxPubKey", t1), A.MoneroLayoutConst_variantVec(A.RawBytesLayout_RawBytesLayout(32, _null), "allTxKeys", t1), A.MoneroLayoutConst_variantVec(A.MoneroTxout_layout(_null), "outs", t2)], type$.JSArray_Layout_dynamic), false, property);
    },
    ComputeSourceKeys$_(inputSecretKeys, inputs) {
      var t1 = A.BigIntHelper_get_asUint64(B.JSArray_methods.fold$1$2(inputs, $.$get$_BigIntImpl_zero(), new A.ComputeSourceKeys$__closure(), type$.BigInt)),
        t2 = A._arrayInstanceType(inputSecretKeys);
      return new A.ComputeSourceKeys(A.List_List$unmodifiable(new A.MappedListIterable(inputSecretKeys, t2._eval$1("List<int>(1)")._as(new A.ComputeSourceKeys$__closure0()), t2._eval$1("MappedListIterable<1,List<int>>")), type$.List_int), A.List_List$unmodifiable(inputs, type$.TxinToKey), t1);
    },
    ComputeSourceKeys_ComputeSourceKeys$fromStruct(json) {
      var t2, t3, t4,
        t1 = A.QuickMap_asListBytes(json, "inputSecretKeys");
      t1.toString;
      t2 = A.QuickMap_asListOfMap(json, "inputs");
      t2.toString;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,TxinToKey>");
      return A.ComputeSourceKeys$_(t1, A.List_List$of(new A.MappedListIterable(t2, t3._eval$1("TxinToKey(1)")._as(new A.ComputeSourceKeys_ComputeSourceKeys$fromStruct_closure()), t4), true, t4._eval$1("ListIterable.E")));
    },
    ComputeSourceKeys_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.MoneroLayoutConst_variantVec(A.RawBytesLayout_RawBytesLayout(32, null), "inputSecretKeys", type$.List_int), A.MoneroLayoutConst_variantVec(A.TxinToKey_layout(null), "inputs", type$.Map_String_dynamic)], type$.JSArray_Layout_dynamic), false, property);
    },
    TxDestinationInfo_TxDestinationInfo(changeAddr, destinations) {
      var t1, t2, stdaddresses, subaddresses, singleSubaddress, _i, i, singleSubaddress0,
        destAddresses = A._setArrayType([], type$.JSArray_MoneroAddress);
      for (t1 = destinations.length, t2 = changeAddr != null, stdaddresses = 0, subaddresses = 0, singleSubaddress = null, _i = 0; _i < destinations.length; destinations.length === t1 || (0, A.throwConcurrentModificationError)(destinations), ++_i) {
        i = destinations[_i];
        if (t2 && i.address.$eq(0, changeAddr))
          continue;
        singleSubaddress0 = i.address;
        if (!B.JSArray_methods.contains$1(destAddresses, singleSubaddress0)) {
          B.JSArray_methods.add$1(destAddresses, singleSubaddress0);
          if (singleSubaddress0.type === B.XmrAddressType_0rc) {
            ++subaddresses;
            singleSubaddress = singleSubaddress0;
          } else
            ++stdaddresses;
        }
      }
      return new A.TxDestinationInfo(stdaddresses, subaddresses, stdaddresses === 0 && subaddresses === 1 ? singleSubaddress : null);
    },
    MoneroRctTxBuilder$_(change, destinationKeys, destinations, sourceKeys, sources, transaction) {
      return new A.MoneroRctTxBuilder(sourceKeys, destinationKeys, transaction, destinations, sources, change);
    },
    MoneroRctTxBuilder_MoneroRctTxBuilder(account, change, destinations, fakeTx, fee, sources) {
      var seed, sourceKeys, destinationKeys, signature;
      sources = A.List_List$from(sources, true, type$.SpendablePayment_MoneroUnLockedPayment_MoneroUnlockedOutput);
      B.JSArray_methods.sort$1(sources, new A.MoneroRctTxBuilder_MoneroRctTxBuilder_closure());
      seed = A.MoneroTxBuilder__createTxSecretKeySeed("wallet_tx_privkeys_seed", fakeTx, sources);
      sourceKeys = A.MoneroTxBuilder__computeSourceKeys(sources);
      destinationKeys = A.MoneroTxBuilder__computeDestinationKeys(account, change, destinations, fakeTx, fee, sourceKeys, seed);
      signature = A.MoneroTxBuilder__buildSignature(destinationKeys, fakeTx, fee, sourceKeys, sources);
      return A.MoneroRctTxBuilder$_(change, destinationKeys, destinations, sourceKeys, sources, A.MoneroTransaction$(A.MoneroTransactionHelper_toTxExtra(destinationKeys.extras), signature, null, 2, sourceKeys.get$toRctInputs(), destinationKeys.get$toRctOuts()));
    },
    MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct(json) {
      var t5, t6, t7, t8,
        t1 = type$.Map_String_dynamic,
        t2 = A.ComputeSourceKeys_ComputeSourceKeys$fromStruct(A.QuickMap_asMap(json, "sourceKeys", t1)),
        t3 = A.ComputeDestinationKeys_ComputeDestinationKeys$fromStruct(A.QuickMap_asMap(json, "destinationKeys", t1)),
        t4 = A.MoneroTransaction_MoneroTransaction$fromStruct(A.QuickMap_asMap(json, "transaction", t1));
      t1 = A.QuickMap_mybeAs(json, "change", new A.MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct_closure(), type$.MoneroTxDestination, t1);
      t5 = A.QuickMap_asListOfMap(json, "destinations");
      t5.toString;
      t6 = A._arrayInstanceType(t5);
      t7 = t6._eval$1("MappedListIterable<1,MoneroTxDestination>");
      t7 = A.List_List$of(new A.MappedListIterable(t5, t6._eval$1("MoneroTxDestination(1)")._as(new A.MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct_closure0()), t7), true, t7._eval$1("ListIterable.E"));
      t6 = A.QuickMap_asListOfMap(json, "sources");
      t6.toString;
      t5 = A._arrayInstanceType(t6);
      t8 = t5._eval$1("MappedListIterable<1,SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>>");
      return A.MoneroRctTxBuilder$_(t1, t3, t7, t2, A.List_List$of(new A.MappedListIterable(t6, t5._eval$1("SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>(1)")._as(new A.MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct_closure1()), t8), true, t8._eval$1("ListIterable.E")), t4);
    },
    MoneroRctTxBuilder_layout(property, transaction) {
      var t1 = type$.Map_String_dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.ComputeSourceKeys_layout("sourceKeys"), A.ComputeDestinationKeys_layout("destinationKeys"), A.MoneroTransaction_layout(true, "transaction", transaction), A.MoneroLayoutConst_variantVec(A.MoneroTxDestination_layout(null), "destinations", t1), A.MoneroLayoutConst_variantVec(A.SpendablePayment_layout(null), "sources", t1), A.LayoutConst_optional(A.MoneroTxDestination_layout(null), "change")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoneroTxBuilder: function MoneroTxBuilder() {
    },
    MoneroTxBuilder__createTxSecretKeySeed_closure: function MoneroTxBuilder__createTxSecretKeySeed_closure() {
    },
    MoneroTxBuilder__createTxSecretKeySeed_closure0: function MoneroTxBuilder__createTxSecretKeySeed_closure0() {
    },
    MoneroTxBuilder__computeSourceKeys_closure: function MoneroTxBuilder__computeSourceKeys_closure() {
    },
    MoneroTxBuilder__computeSourceKeys__closure: function MoneroTxBuilder__computeSourceKeys__closure() {
    },
    MoneroTxBuilder__computeSourceKeys_closure0: function MoneroTxBuilder__computeSourceKeys_closure0() {
    },
    MoneroTxBuilder__computeDestinationKeys_closure: function MoneroTxBuilder__computeDestinationKeys_closure() {
    },
    MoneroTxBuilder__computeDestinationKeys_closure0: function MoneroTxBuilder__computeDestinationKeys_closure0() {
    },
    MoneroTxBuilder__computeDestinationKeys_closure1: function MoneroTxBuilder__computeDestinationKeys_closure1(t0) {
      this.change = t0;
    },
    MoneroTxBuilder__computeDestinationKeys_closure2: function MoneroTxBuilder__computeDestinationKeys_closure2() {
    },
    MoneroTxBuilder__buildSignature_closure: function MoneroTxBuilder__buildSignature_closure() {
    },
    MoneroTxBuilder__buildSignature_closure0: function MoneroTxBuilder__buildSignature_closure0() {
    },
    MoneroTxBuilder__buildSignature_closure1: function MoneroTxBuilder__buildSignature_closure1() {
    },
    MoneroTxBuilder__buildSignature_closure2: function MoneroTxBuilder__buildSignature_closure2() {
    },
    ComputeDestinationKeys: function ComputeDestinationKeys(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.amountKeys = t0;
      _.extras = t1;
      _.txPubKey = t2;
      _.additionalTxPubKey = t3;
      _.allTxKeys = t4;
      _.outs = t5;
      _.total = t6;
    },
    ComputeDestinationKeys_destinationPubKeys_closure: function ComputeDestinationKeys_destinationPubKeys_closure() {
    },
    ComputeDestinationKeys_toRctOuts_closure: function ComputeDestinationKeys_toRctOuts_closure() {
    },
    ComputeDestinationKeys_amounts_closure: function ComputeDestinationKeys_amounts_closure() {
    },
    ComputeDestinationKeys_closure: function ComputeDestinationKeys_closure() {
    },
    ComputeDestinationKeys_closure0: function ComputeDestinationKeys_closure0() {
    },
    ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure: function ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure() {
    },
    ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure0: function ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure0() {
    },
    ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure1: function ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure1() {
    },
    ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure2: function ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure2() {
    },
    ComputeDestinationKeys_toLayoutStruct_closure: function ComputeDestinationKeys_toLayoutStruct_closure() {
    },
    ComputeDestinationKeys_toLayoutStruct_closure0: function ComputeDestinationKeys_toLayoutStruct_closure0() {
    },
    ComputeDestinationKeys_toLayoutStruct_closure1: function ComputeDestinationKeys_toLayoutStruct_closure1() {
    },
    ComputeDestinationKeys_toLayoutStruct_closure2: function ComputeDestinationKeys_toLayoutStruct_closure2() {
    },
    ComputeSourceKeys: function ComputeSourceKeys(t0, t1, t2) {
      this.inputSecretKeys = t0;
      this.inputs = t1;
      this.total = t2;
    },
    ComputeSourceKeys_amounts_closure: function ComputeSourceKeys_amounts_closure() {
    },
    ComputeSourceKeys_toRctInputs_closure: function ComputeSourceKeys_toRctInputs_closure() {
    },
    ComputeSourceKeys$__closure: function ComputeSourceKeys$__closure() {
    },
    ComputeSourceKeys$__closure0: function ComputeSourceKeys$__closure0() {
    },
    ComputeSourceKeys_ComputeSourceKeys$fromStruct_closure: function ComputeSourceKeys_ComputeSourceKeys$fromStruct_closure() {
    },
    ComputeSourceKeys_toLayoutStruct_closure: function ComputeSourceKeys_toLayoutStruct_closure() {
    },
    TxDestinationInfo: function TxDestinationInfo(t0, t1, t2) {
      this.stdAddressesCount = t0;
      this.subAddressesCount = t1;
      this.singleDestionation = t2;
    },
    MoneroRctTxBuilder: function MoneroRctTxBuilder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.sourceKeys = t0;
      _.destinationKeys = t1;
      _.transaction = t2;
      _.destinations = t3;
      _.sources = t4;
      _.change = t5;
    },
    MoneroRctTxBuilder_MoneroRctTxBuilder_closure: function MoneroRctTxBuilder_MoneroRctTxBuilder_closure() {
    },
    MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct_closure: function MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct_closure() {
    },
    MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct_closure0: function MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct_closure0() {
    },
    MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct_closure1: function MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct_closure1() {
    },
    MoneroRctTxBuilder_toLayoutStruct_closure: function MoneroRctTxBuilder_toLayoutStruct_closure() {
    },
    MoneroRctTxBuilder_toLayoutStruct_closure0: function MoneroRctTxBuilder_toLayoutStruct_closure0() {
    },
    ApiProviderException$(message, responseData, statusCode) {
      return new A.ApiProviderException(message, statusCode, responseData);
    },
    ApiProviderException: function ApiProviderException(t0, t1, t2) {
      this.message = t0;
      this.statusCode = t1;
      this.responseData = t2;
    },
    WalletException$invalidArgruments(_argruments) {
      return new A.WalletException("", _argruments);
    },
    WalletException$(message) {
      return new A.WalletException(message, null);
    },
    WalletExceptionConst_invalidArgruments(expected, got) {
      return new A.WalletException("", A._setArrayType([expected, got], type$.JSArray_String));
    },
    WalletException: function WalletException(t0, t1) {
      this.message = t0;
      this._argruments = t1;
    },
    Equatable: function Equatable() {
    },
    HTTPCaller_post(authenticated, body, clientType, headers, timeout, type, uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HTTPCallerResponse),
        $async$returnValue, data;
      var $async$HTTPCaller_post = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($.$get$HTTPCaller__clientManager().call$6$authenticated$clientType$headers$method$t$uri(authenticated, clientType, headers, B.HTTPRequestType_POST_1_post, new A.HTTPCaller_post_closure(body, timeout), uri), $async$HTTPCaller_post);
            case 3:
              // returning from await.
              data = $async$result;
              $async$returnValue = A.HTTPCallerResponse_HTTPCallerResponse$parse(data.bodyBytes, data.statusCode, type);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$HTTPCaller_post, $async$completer);
    },
    HTTPCaller_get(authenticated, clientType, headers, timeout, type, uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HTTPCallerResponse),
        $async$returnValue, data;
      var $async$HTTPCaller_get = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($.$get$HTTPCaller__clientManager().call$6$authenticated$clientType$headers$method$t$uri(authenticated, clientType, headers, B.HTTPRequestType_POST_1_post, new A.HTTPCaller_get_closure(timeout), uri), $async$HTTPCaller_get);
            case 3:
              // returning from await.
              data = $async$result;
              $async$returnValue = A.HTTPCallerResponse_HTTPCallerResponse$parse(data.bodyBytes, data.statusCode, type);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$HTTPCaller_get, $async$completer);
    },
    HTTPCaller_post_closure: function HTTPCaller_post_closure(t0, t1) {
      this.body = t0;
      this.timeout = t1;
    },
    HTTPCaller_get_closure: function HTTPCaller_get_closure(t0) {
      this.timeout = t0;
    },
    HttpImpl: function HttpImpl() {
    },
    HTTPServiceWorker: function HTTPServiceWorker() {
    },
    ServicesHTTPCaller__getExceptionMessage(e) {
      if (e instanceof A.TimeoutException)
        return "api_http_timeout_error";
      if (e instanceof A.ClientException)
        return "api_http_client_error";
      return J.toString$0$(e);
    },
    ServicesHTTPCaller: function ServicesHTTPCaller() {
    },
    WebHTTPServiceWorker: function WebHTTPServiceWorker(t0, t1) {
      this.WebHTTPServiceWorker_caller = t0;
      this.caller = t1;
    },
    HTTPRequestType: function HTTPRequestType(t0, t1, t2) {
      this.name = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    HTTPWorkerMessage: function HTTPWorkerMessage(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.type = t0;
      _.url = t1;
      _.params = t2;
      _.headers = t3;
      _.timeout = t4;
      _.responseType = t5;
      _.clientType = t6;
      _.authenticated = t7;
    },
    HTTPWorkerRequest: function HTTPWorkerRequest(t0, t1) {
      this.id = t0;
      this.message = t1;
    },
    HTTPWorkerResponse: function HTTPWorkerResponse() {
    },
    HTTPWorkerResponseSuccess: function HTTPWorkerResponseSuccess(t0, t1) {
      this.response = t0;
      this.$ti = t1;
    },
    HTTPWorkerResponseError: function HTTPWorkerResponseError(t0, t1) {
      this.message = t0;
      this.$ti = t1;
    },
    ProviderAuthType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_6FR, new A.ProviderAuthType_fromName_closure($name), new A.ProviderAuthType_fromName_closure0());
    },
    ProviderAuthType_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_6FR, new A.ProviderAuthType_fromTag_closure(tag), new A.ProviderAuthType_fromTag_closure0());
    },
    ProviderAuthenticated_ProviderAuthenticated$deserialize(obj) {
      var cbor, t1, t2, _null = null,
        values = A.CborSerializable_decode(_null, _null, obj, type$.CborTagValue_dynamic),
        type = A.ProviderAuthType_fromTag(values.tags);
      $label0$0: {
        if (B.ProviderAuthType_EQC === type || B.ProviderAuthType_qh2 === type) {
          cbor = A.CborSerializable_decodeCborTags(_null, values, B.List_50_6, type$.CborListValue_dynamic);
          t1 = A.ProviderAuthType_fromName(A.ExtractCborList_elementAt(cbor, 0, type$.nullable_String));
          t2 = type$.String;
          t1 = new A.BasicProviderAuthenticated(A.ExtractCborList_elementAt(cbor, 1, t2), A.ExtractCborList_elementAt(cbor, 2, t2), t1);
          break $label0$0;
        }
        if (B.ProviderAuthType_pFR === type) {
          values = A.CborSerializable_decodeCborTags(_null, values, B.List_50_7, type$.CborListValue_dynamic);
          t1 = type$.String;
          t1 = new A.DigestProviderAuthenticated(A.ExtractCborList_elementAs(values, 0, t1), A.ExtractCborList_elementAs(values, 1, t1), B.ProviderAuthType_pFR);
          break $label0$0;
        }
        t1 = _null;
      }
      return t1;
    },
    ProviderAuthType: function ProviderAuthType(t0, t1, t2) {
      this.tag = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    ProviderAuthType_fromName_closure: function ProviderAuthType_fromName_closure(t0) {
      this.name = t0;
    },
    ProviderAuthType_fromName_closure0: function ProviderAuthType_fromName_closure0() {
    },
    ProviderAuthType_fromTag_closure: function ProviderAuthType_fromTag_closure(t0) {
      this.tag = t0;
    },
    ProviderAuthType_fromTag_closure0: function ProviderAuthType_fromTag_closure0() {
    },
    ProviderAuthenticated: function ProviderAuthenticated() {
    },
    BasicProviderAuthenticated: function BasicProviderAuthenticated(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.type = t2;
    },
    DigestProviderAuthenticated: function DigestProviderAuthenticated(t0, t1, t2) {
      this.password = t0;
      this.username = t1;
      this.type = t2;
    },
    _ProviderAuthenticated_Object_CborSerializable: function _ProviderAuthenticated_Object_CborSerializable() {
    },
    _ProviderAuthenticated_Object_CborSerializable_Equatable: function _ProviderAuthenticated_Object_CborSerializable_Equatable() {
    },
    HttpClientManager: function HttpClientManager(t0) {
      this._clients = t0;
    },
    HttpClientManager_call_closure: function HttpClientManager_call_closure(t0) {
      this.t = t0;
    },
    HttpClientManager_getCashedClient_closure: function HttpClientManager_getCashedClient_closure() {
    },
    HttpClientManager_getCashedClient_closure0: function HttpClientManager_getCashedClient_closure0(t0, t1) {
      this.$this = t0;
      this.identifier = t1;
    },
    HttpClientManager_getCashedClient_closure1: function HttpClientManager_getCashedClient_closure1(t0, t1) {
      this.$this = t0;
      this.identifier = t1;
    },
    _Client: function _Client(t0, t1, t2) {
      this.client = t0;
      this.authenticated = t1;
      this.$ti = t2;
    },
    _CachedClientImpl: function _CachedClientImpl() {
    },
    _CachedClientImpl__startTimer_closure: function _CachedClientImpl__startTimer_closure(t0) {
      this.$this = t0;
    },
    _CachedClient: function _CachedClient(t0, t1, t2, t3) {
      var _ = this;
      _.onDispose = t0;
      _.idleTimeout = t1;
      _._timer = null;
      _.client = t2;
      _.authenticated = t3;
    },
    _DigestAuthClient: function _DigestAuthClient(t0, t1, t2, t3) {
      var _ = this;
      _._DigestAuthClientImpl__id = t0;
      _._DigestAuthClientImpl__challenge = t1;
      _.client = t2;
      _.authenticated = t3;
    },
    _DigestAuthCachedClient: function _DigestAuthCachedClient(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._DigestAuthClientImpl__id = t0;
      _._DigestAuthClientImpl__challenge = t1;
      _.onDispose = t2;
      _.idleTimeout = t3;
      _._timer = null;
      _.client = t4;
      _.authenticated = t5;
    },
    _DigestAuthClientImpl: function _DigestAuthClientImpl() {
    },
    __DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl: function __DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl() {
    },
    __DigestAuthClient__Client__DigestAuthClientImpl: function __DigestAuthClient__Client__DigestAuthClientImpl() {
    },
    HTTPCallerResponse_HTTPCallerResponse$parse(bodyBytes, statusCode, type) {
      var body, t1, exception;
      if (!(statusCode >= 200 && statusCode < 300))
        return new A.HTTPCallerResponse(A.StringUtils_tryDecode(bodyBytes), statusCode);
      body = null;
      try {
        switch (type.index) {
          case 0:
            body = bodyBytes;
            break;
          case 1:
            body = A.StringUtils_decode(bodyBytes, false, B.StringEncoding_1);
            break;
          case 2:
            body = A.StringUtils_toJson(A.StringUtils_decode(bodyBytes, false, B.StringEncoding_1), null, type$.Object);
            break;
          case 3:
            body = A.StringUtils_toJson(A.StringUtils_decode(bodyBytes, false, B.StringEncoding_1), null, type$.Map_String_dynamic);
            break;
          case 4:
            t1 = J.map$1$1$ax(A.StringUtils_toJson(A.StringUtils_decode(bodyBytes, false, B.StringEncoding_1), null, type$.List_dynamic), new A.HTTPCallerResponse_HTTPCallerResponse$parse_closure(), type$.Map_String_dynamic);
            body = A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
            break;
          default:
            throw A.wrapException(B.ApiProviderException_invalid_request_type_null_null);
        }
        t1 = body;
        return new A.HTTPCallerResponse(t1, statusCode);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.ApiProviderException)
          throw exception;
        else
          throw A.wrapException(B.ApiProviderException_invalid_request_type_null_null);
      }
    },
    DigestAuthHeadersAlg_fromName($name) {
      if ($name == null)
        return B.DigestAuthHeadersAlg_MD5_0_md5;
      return B.JSArray_methods.firstWhere$2$orElse(B.List_QT8, new A.DigestAuthHeadersAlg_fromName_closure($name), new A.DigestAuthHeadersAlg_fromName_closure0());
    },
    DigestAuthQop_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_M5H, new A.DigestAuthQop_fromName_closure($name), new A.DigestAuthQop_fromName_closure0());
    },
    HTTPClientType: function HTTPClientType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    HTTPResponseType: function HTTPResponseType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    HTTPCallerResponse: function HTTPCallerResponse(t0, t1) {
      this.result = t0;
      this.statusCode = t1;
    },
    HTTPCallerResponse_HTTPCallerResponse$parse_closure: function HTTPCallerResponse_HTTPCallerResponse$parse_closure() {
    },
    DigestAuthHeadersAlg: function DigestAuthHeadersAlg(t0, t1, t2) {
      this.name = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    DigestAuthHeadersAlg_fromName_closure: function DigestAuthHeadersAlg_fromName_closure(t0) {
      this.name = t0;
    },
    DigestAuthHeadersAlg_fromName_closure0: function DigestAuthHeadersAlg_fromName_closure0() {
    },
    DigestAuthQop: function DigestAuthQop(t0, t1, t2) {
      this.name = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    DigestAuthQop_fromName_closure: function DigestAuthQop_fromName_closure(t0) {
      this.name = t0;
    },
    DigestAuthQop_fromName_closure0: function DigestAuthQop_fromName_closure0() {
    },
    DigestAuthHeaders: function DigestAuthHeaders(t0, t1, t2, t3, t4) {
      var _ = this;
      _.nonce = t0;
      _.qop = t1;
      _.realm = t2;
      _.algorithm = t3;
      _.opaque = t4;
    },
    DigestAuthenticatedUtils_generateDigestAuthHeader(authenticated, body, count, method, params, uri) {
      var t3, t4, t5, digest, _null = null,
        realm = params.realm,
        nonce = params.nonce,
        qop = params.qop,
        algorithm = params.algorithm,
        path = uri.get$path(),
        cnonce = A.BytesUtils_toHexString($.$get$QuickCrypto__generateRandom().call$1(8), true, _null),
        nc = B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(count, 16), 8, "0"),
        t1 = authenticated.username,
        ha1 = A.BytesUtils_toHexString(algorithm.hashBytes$1(A.StringUtils_encode(t1 + ":" + realm + ":" + authenticated.password, B.StringEncoding_1)), true, _null),
        t2 = algorithm.name;
      if (B.JSString_methods.endsWith$1(t2, "sess"))
        ha1 = A.BytesUtils_toHexString(algorithm.hashBytes$1(A.StringUtils_encode(ha1 + ":" + nonce + ":" + cnonce, B.StringEncoding_1)), true, _null);
      $label0$0: {
        t3 = B.DigestAuthQop_auth_0_auth !== qop;
        if (!t3 || qop == null) {
          t4 = A.BytesUtils_toHexString(algorithm.hashBytes$1(A.StringUtils_encode(method.name + ":" + path, B.StringEncoding_1)), true, _null);
          break $label0$0;
        }
        if (B.DigestAuthQop_f5L === qop) {
          t4 = uri.toString$0(0);
          t5 = A._setArrayType([], type$.JSArray_int);
          t4 = A.BytesUtils_toHexString(algorithm.hashBytes$1(A.StringUtils_encode(method.name + ":" + t4 + ":" + A.S(algorithm.hashBytes$1(t5)), B.StringEncoding_1)), true, _null);
          break $label0$0;
        }
        t4 = _null;
      }
      $label1$1: {
        if (!t3 || B.DigestAuthQop_f5L === qop) {
          t3 = A.BytesUtils_toHexString(algorithm.hashBytes$1(A.StringUtils_encode(ha1 + ":" + nonce + ":" + nc + ":" + cnonce + ":" + qop.name + ":" + t4, B.StringEncoding_1)), true, _null);
          break $label1$1;
        }
        if (qop == null) {
          t3 = A.BytesUtils_toHexString(algorithm.hashBytes$1(A.StringUtils_encode(ha1 + ":" + nonce + ":" + t4, B.StringEncoding_1)), true, _null);
          break $label1$1;
        }
        t3 = _null;
      }
      digest = 'Digest username="' + t1 + '", realm="' + realm + '", nonce="' + nonce + '", uri="' + path + '", nc=' + nc + ', cnonce="' + cnonce + '", response="' + t3 + '", algorithm=' + t2;
      if (qop != null)
        digest += ", qop=" + qop.name;
      t1 = params.opaque;
      return t1 != null ? digest + (", opaque=" + t1) : digest;
    },
    DigestAuthenticatedUtils_getChallenges(headers) {
      var challenges,
        _s16_ = "www-authenticate",
        t1 = headers.$index(0, _s16_);
      t1 = t1 == null ? null : B.JSString_methods.contains$1(t1, "Digest ");
      if (t1 !== true)
        return null;
      t1 = headers.$index(0, _s16_);
      t1.toString;
      challenges = A.DigestAuthenticatedUtils_parseDigestHeader(t1);
      if (challenges.length === 0)
        throw A.wrapException(A.WalletException$("unsuported_digest_auth_qop"));
      return B.JSArray_methods.get$first(challenges);
    },
    DigestAuthenticatedUtils_getDigestAuthenticatedHeader(authenticated, count, method, params, uri) {
      return A.LinkedHashMap_LinkedHashMap$_literal(["Authorization", A.DigestAuthenticatedUtils_generateDigestAuthHeader(authenticated, null, count, method, params, uri)], type$.String, type$.dynamic);
    },
    DigestAuthenticatedUtils_parseDigestHeader(header) {
      var auth, params, digestParams, t1, digestParts, t2, t3, _i, t4, t5, t6, challenge, _i0, part, match, t7, key, exception;
      if (!B.JSString_methods.contains$1(header, "Digest "))
        throw A.wrapException(A.WalletException$("invalid_dgiest_auth_headers"));
      t1 = type$.MappedListIterable_String_String;
      t1 = new A.MappedListIterable(A._setArrayType(header.split("Digest "), type$.JSArray_String), type$.String_Function_String._as(new A.DigestAuthenticatedUtils_parseDigestHeader_closure()), t1).super$Iterable$where(0, t1._eval$1("bool(ListIterable.E)")._as(new A.DigestAuthenticatedUtils_parseDigestHeader_closure0()));
      digestParts = A.List_List$of(t1, true, t1.$ti._eval$1("Iterable.E"));
      auth = A._setArrayType([], type$.JSArray_DigestAuthHeaders);
      for (t1 = digestParts.length, t2 = type$.String, t3 = type$.dynamic, _i = 0; _i < digestParts.length; digestParts.length === t1 || (0, A.throwConcurrentModificationError)(digestParts), ++_i) {
        t4 = J.split$1$s(digestParts[_i], ",");
        t5 = A._arrayInstanceType(t4);
        t6 = t5._eval$1("MappedListIterable<1,String>");
        challenge = A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("String(1)")._as(new A.DigestAuthenticatedUtils_parseDigestHeader_closure1()), t6), true, t6._eval$1("ListIterable.E"));
        params = A.LinkedHashMap_LinkedHashMap$_empty(t2, t3);
        for (t4 = challenge.length, _i0 = 0; _i0 < t4; ++_i0) {
          part = challenge[_i0];
          match = A.RegExp_RegExp("^(.*?)=(.*)$", true).firstMatch$1(part);
          if (match != null) {
            t5 = match._match;
            t6 = t5.length;
            if (1 >= t6)
              return A.ioore(t5, 1);
            t7 = t5[1];
            t7.toString;
            key = B.JSString_methods.trim$0(t7);
            if (2 >= t6)
              return A.ioore(t5, 2);
            t5 = t5[2];
            t5.toString;
            J.$indexSet$ax(params, key, B.JSString_methods.trim$0(A.stringReplaceAllUnchecked(t5, '"', "")));
          }
        }
        try {
          t4 = params;
          t5 = A._asString(t4.$index(0, "nonce"));
          t6 = t4.$index(0, "qop") == null ? null : A.DigestAuthQop_fromName(t4.$index(0, "qop"));
          digestParams = new A.DigestAuthHeaders(t5, t6, A._asString(t4.$index(0, "realm")), A.DigestAuthHeadersAlg_fromName(t4.$index(0, "algorithm")), t4.$index(0, "opaque"));
          J.add$1$ax(auth, digestParams);
        } catch (exception) {
          if (!(A.unwrapException(exception) instanceof A.WalletException))
            throw exception;
        }
      }
      return auth;
    },
    DigestAuthenticatedUtils_parseDigestHeader_closure: function DigestAuthenticatedUtils_parseDigestHeader_closure() {
    },
    DigestAuthenticatedUtils_parseDigestHeader_closure0: function DigestAuthenticatedUtils_parseDigestHeader_closure0() {
    },
    DigestAuthenticatedUtils_parseDigestHeader_closure1: function DigestAuthenticatedUtils_parseDigestHeader_closure1() {
    },
    LiveListenable__addListener(listen) {
    },
    _Live: function _Live() {
    },
    Live: function Live(t0, t1, t2) {
      this._live$_value = t0;
      this._LiveListenable__noneIdsListeners = t1;
      this.$ti = t2;
    },
    _LiveListenable: function _LiveListenable() {
    },
    LiveListenable: function LiveListenable() {
    },
    _LiveListenable_Object__LiveListenable: function _LiveListenable_Object__LiveListenable() {
    },
    CborSerializable_toTagValue(bytes, tags, $T) {
      var t1 = A.CborUtils__decode(bytes, 0).value;
      if (!(t1 instanceof A.CborTagValue))
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      if (tags != null && !A.BytesUtils_bytesEqual(t1.tags, tags))
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      return t1;
    },
    CborSerializable_decodeCborTags(cborBytes, object, tags, $T) {
      var cbor;
      if (object == null) {
        cborBytes.toString;
        cbor = A.CborUtils__decode(cborBytes, 0).value;
      } else
        cbor = object;
      return A.CborSerializable_validateCbor(cbor, tags, $T);
    },
    CborSerializable_cborTagValue(cborBytes, hex, object, tags, $T) {
      if (object == null) {
        if (cborBytes == null)
          cborBytes = A.BytesUtils_tryFromHexString(hex);
        if (cborBytes == null)
          throw A.wrapException(B.WalletException_Q8G);
        object = A.CborUtils__decode(cborBytes, 0).value;
      }
      return A.CborSerializable_validateCbor(object, tags, $T);
    },
    CborSerializable_validateCbor(cbor, tags, $T) {
      if (!(cbor instanceof A.CborTagValue) || !$T._is(cbor._cbor_tag$_value))
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      if (tags != null && !A.BytesUtils_bytesEqual(cbor.tags, tags))
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      return $T._as(cbor._cbor_tag$_value);
    },
    CborSerializable_decode(cborBytes, hex, object, $T) {
      var t1, exception;
      cborBytes = cborBytes;
      object = object;
      try {
        if (object == null) {
          if (cborBytes == null)
            cborBytes = A.BytesUtils_tryFromHexString(hex);
          if (cborBytes == null)
            throw A.wrapException(B.WalletException_Q8G);
          object = A.CborUtils__decode(cborBytes, 0).value;
        }
        if (!$T._is(object)) {
          t1 = A.WalletException$invalidArgruments(A._setArrayType([A.createRuntimeType($T).toString$0(0) + A.getRuntimeTypeOfDartObject(object).toString$0(0)], type$.JSArray_String));
          throw A.wrapException(t1);
        }
        t1 = object;
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.WalletException)
          throw exception;
        else
          throw A.wrapException(B.WalletException_data_verification_failed_null);
      }
    },
    ExtractCborList_elementAt(_this, index, $T) {
      var cborValue, v,
        t1 = _this.value,
        t2 = J.getInterceptor$asx(t1);
      if (index > t2.get$length(t1) - 1) {
        $T._as(null);
        return null;
      }
      cborValue = t2.$index(t1, index);
      if (A.createRuntimeType($T) === B.Type_CborMapValue_ezS) {
        if (cborValue instanceof A.CborMapValue)
          return $T._as(cborValue);
        $T._as(null);
        return null;
      }
      v = type$.CborObject._is(cborValue) ? cborValue.get$value() : cborValue;
      if (!$T._is(v)) {
        $T._as(null);
        return null;
      }
      return v;
    },
    ExtractCborList_elementAsListOf(_this, index, $T) {
      var t1, exception;
      try {
        t1 = J.cast$1$0$ax(type$.CborListValue_dynamic._as(J.$index$asx(_this.value, index)).value, $T);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      }
    },
    ExtractCborList_elementAs(_this, index, $T) {
      var cborValue, exception,
        t1 = _this.value,
        t2 = J.getInterceptor$asx(t1);
      if (index > t2.get$length(t1) - 1) {
        if ($T._is(null)) {
          $T._as(null);
          return null;
        }
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      }
      try {
        cborValue = type$.nullable_CborObject._as(t2.$index(t1, index));
        if ($T._is(null) && J.$eq$(cborValue, B.C_CborNullValue)) {
          $T._as(null);
          return null;
        }
        if ($T._is(cborValue.get$value())) {
          t1 = $T._as(cborValue.get$value());
          return t1;
        }
        t1 = $T._as(cborValue);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      }
    },
    ExtractCborList_elemetMybeAs(_this, index, onValue, $E, $T) {
      var cborValue, exception,
        t1 = _this.value,
        t2 = J.getInterceptor$asx(t1);
      if (index > t2.get$length(t1) - 1)
        return null;
      try {
        cborValue = type$.CborObject._as(t2.$index(t1, index));
        if (J.$eq$(cborValue, B.C_CborNullValue))
          return null;
        if ($T._is(cborValue)) {
          t1 = onValue.call$1($T._as(cborValue));
          return t1;
        }
        t1 = onValue.call$1($T._as(cborValue.get$value()));
        return t1;
      } catch (exception) {
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      }
    },
    ExtractCborList_getCborTag(_this, index) {
      var cborValue,
        t1 = _this.value,
        t2 = J.getInterceptor$asx(t1);
      if (index > t2.get$length(t1) - 1)
        return null;
      cborValue = t2.$index(t1, index);
      if (!type$.CborObject._is(cborValue))
        return null;
      if (cborValue instanceof A.CborTagValue)
        return cborValue;
      if (cborValue.get$value() instanceof A.CborTagValue)
        return type$.nullable_CborTagValue_dynamic._as(cborValue.get$value());
      return null;
    },
    QuickCbor_to(_this, toe, $E, $T) {
      var t1;
      if ($T._is(_this))
        return toe.call$1($T._as(_this));
      t1 = _this._cbor_tag$_value;
      if (!$T._is(t1))
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      return toe.call$1($T._as(t1));
    },
    QuickCborTag_get_getList(_this) {
      var t1 = _this._cbor_tag$_value;
      if (!(t1 instanceof A.CborListValue))
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      return t1;
    },
    CborSerializable: function CborSerializable() {
    },
    SynchronizedLock: function SynchronizedLock() {
      this.last = null;
    },
    MethodUtils_wait(duration) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue;
      var $async$MethodUtils_wait = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(duration, type$.void), $async$MethodUtils_wait);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$MethodUtils_wait, $async$completer);
    },
    MethodUtils_call(t, waitAtError, $T) {
      var cancelable = null, delay = null, timeout = null;
      return A.MethodUtils_call$body(t, waitAtError, $T, $T._eval$1("MethodResult<0>"));
    },
    MethodUtils_call$body(t, waitAtError, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$currentError, r, completer, result, e, stackTrace, exception, t1, cancelable, delay, timeout, $async$exception;
      var $async$MethodUtils_call = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              cancelable = null;
              delay = null;
              timeout = null;
              $async$handler = 4;
              $async$goto = delay != null ? 7 : 8;
              break;
            case 7:
              // then
              $async$goto = 9;
              return A._asyncAwait(A.Future_Future$delayed(delay, type$.dynamic), $async$MethodUtils_call);
            case 9:
              // returning from await.
            case 8:
              // join
              r = null;
              if (cancelable == null)
                r = t.call$0();
              else {
                completer = new A._AsyncCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncCompleter<0>"));
                cancelable.setup$1(A.instantiate1(new A.MethodUtils_call_closure(completer, $T), type$.dynamic));
                cancelable.success$1(t);
                r = completer.future;
              }
              if (timeout != null)
                r = r.timeout$1(timeout);
              $async$goto = 10;
              return A._asyncAwait(r, $async$MethodUtils_call);
            case 10:
              // returning from await.
              result = $async$result;
              $async$returnValue = new A.MethodResult(result, null, null, $T._eval$1("MethodResult<0>"));
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              stackTrace = A.getTraceFromException($async$exception);
              $async$goto = 11;
              return A._asyncAwait(A.MethodUtils_wait(waitAtError), $async$MethodUtils_call);
            case 11:
              // returning from await.
              t1 = e;
              $async$returnValue = new A.MethodResult($, t1, A.MethodResult__errorMessage(t1)._0, $T._eval$1("MethodResult<0>"));
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$MethodUtils_call, $async$completer);
    },
    MethodUtils_nullOnException(t, $T) {
      var t1, exception, defaultValue = null;
      try {
        t1 = t.call$0();
        return t1;
      } catch (exception) {
        return defaultValue;
      }
    },
    MethodResult__errorMessage(exception) {
      if (exception instanceof A.WalletException || type$.BlockchainUtilsException._is(exception) || exception instanceof A.ApiProviderException || exception instanceof A.RPCError || exception instanceof A.ArgumentError)
        return new A._Record_2(J.toString$0$(exception), false);
      return new A._Record_2(J.toString$0$(exception), true);
    },
    MethodUtils_call_closure: function MethodUtils_call_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    MethodResult: function MethodResult(t0, t1, t2, t3) {
      var _ = this;
      _.__MethodResult__result_F = t0;
      _.exception = t1;
      _.error = t2;
      _.$ti = t3;
    },
    CustomCoins$_($name, conf) {
      return new A.CustomCoins($name, conf);
    },
    CustomCoins_getSerializationCoin(serializationStr, $T) {
      var parts = serializationStr.split("#"),
        t1 = parts.length;
      if (t1 !== 2)
        throw A.wrapException(B.WalletException_data_verification_failed_null);
      if (1 >= t1)
        return A.ioore(parts, 1);
      return A.CustomCoins_getCoin(parts[1], parts[0], $T);
    },
    CustomCoins_getCoin($name, proposal, $T) {
      var coin;
      switch (proposal) {
        case "CIP-0019":
          coin = A.CustomCoins_fromName($name);
          break;
        default:
          coin = A.CryptoCoins_getCoin($name, A.CustomProposal_fromName(proposal));
          break;
      }
      if (coin == null)
        throw A.wrapException(B.WalletException_coin_not_found_null);
      if (!$T._is(coin))
        throw A.wrapException(B.WalletException_invalid_coin_null);
      return coin;
    },
    CustomCoins_fromName($name) {
      var t1, exception;
      try {
        t1 = B.JSArray_methods.firstWhere$1($.$get$CustomCoins_values(), new A.CustomCoins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    CustomProposal_fromName($name) {
      if ($name === "CIP-0019")
        return B.C_CustomProposal;
      return A.CoinProposal_fromName($name);
    },
    CustomCoins: function CustomCoins(t0, t1) {
      this.name = t0;
      this.conf = t1;
    },
    CustomCoins_fromName_closure: function CustomCoins_fromName_closure(t0) {
      this.name = t0;
    },
    CustomProposal: function CustomProposal() {
    },
    CustomCurrencyConf_byronLegacy_closure: function CustomCurrencyConf_byronLegacy_closure() {
    },
    CustomCurrencyConf_byronLegacyTestnet_closure: function CustomCurrencyConf_byronLegacyTestnet_closure() {
    },
    AddressDerivationType_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_wGx, new A.AddressDerivationType_fromTag_closure(tag), new A.AddressDerivationType_fromTag_closure0());
    },
    AddressDerivationIndex_fromCborBytesOrObject(obj) {
      var t1, cbor, t2, t3;
      if (obj == null) {
        null.toString;
        t1 = A.CborUtils__decode(null, 0).value;
      } else
        t1 = obj;
      type$.CborTagValue_dynamic._as(t1);
      switch (A.AddressDerivationType_fromTag(t1.tags).index) {
        case 0:
          return A.Bip32AddressIndex_Bip32AddressIndex$fromCborBytesOrObject(t1);
        case 1:
          cbor = A.CborSerializable_decodeCborTags(null, t1, B.List_200_84, type$.CborListValue_dynamic);
          t1 = type$.String;
          t1 = A.CustomCoins_getCoin(A.ExtractCborList_elementAt(cbor, 1, t1), A.ExtractCborList_elementAt(cbor, 0, t1), type$.SubstrateCoins);
          t2 = type$.nullable_String;
          t3 = A.ExtractCborList_elementAt(cbor, 2, t2);
          return new A.SubstrateAddressIndex(A.ExtractCborList_elementAt(cbor, 3, t2), A.ExtractCborList_elementAt(cbor, 4, t2), t3, t1);
        case 2:
          return B.C_MultiSigAddressIndex;
        default:
          throw A.wrapException(A.UnimplementedError$("Unsuported key index."));
      }
    },
    AddressDerivationType: function AddressDerivationType(t0, t1, t2) {
      this.tag = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    AddressDerivationType_fromTag_closure: function AddressDerivationType_fromTag_closure(t0) {
      this.tag = t0;
    },
    AddressDerivationType_fromTag_closure0: function AddressDerivationType_fromTag_closure0() {
    },
    AddressDerivationIndex: function AddressDerivationIndex() {
    },
    _AddressDerivationIndex_Object_CborSerializable: function _AddressDerivationIndex_Object_CborSerializable() {
    },
    _AddressDerivationIndex_Object_CborSerializable_Equatable: function _AddressDerivationIndex_Object_CborSerializable_Equatable() {
    },
    Bip32AddressIndex_Bip32AddressIndex$fromCborBytesOrObject(obj) {
      var t6, t7, t8, t9,
        cbor = A.CborSerializable_decodeCborTags(null, obj, B.List_200_81, type$.CborListValue_dynamic),
        t1 = type$.nullable_int,
        t2 = A.ExtractCborList_elementAt(cbor, 2, t1),
        t3 = A.ExtractCborList_elementAt(cbor, 4, t1),
        t4 = A.ExtractCborList_elementAt(cbor, 3, t1),
        t5 = A.ExtractCborList_elementAt(cbor, 0, t1);
      t1 = A.ExtractCborList_elementAt(cbor, 1, t1);
      t6 = type$.String;
      t6 = A.CustomCoins_getCoin(A.ExtractCborList_elementAt(cbor, 6, t6), A.ExtractCborList_elementAt(cbor, 5, t6), type$.CryptoCoins_CoinConfig);
      t7 = type$.nullable_String;
      t8 = A.SeedTypes_fromName(A.ExtractCborList_elementAt(cbor, 7, t7));
      t9 = A.ExtractCborList_elementAt(cbor, 8, t7);
      return new A.Bip32AddressIndex(t5, t1, t2, t4, t3, t9, A.ExtractCborList_elementAt(cbor, 9, t7), A.Bip32AddressIndex__toPath(A._setArrayType([t5, t1, t2, t4, t3], type$.JSArray_nullable_int), t9), t8, t6);
    },
    Bip32AddressIndex__toPath(indexses, importedKeyId) {
      var pathStr, _i,
        t1 = A._arrayInstanceType(indexses),
        t2 = t1._eval$1("MappedIterable<1,Bip32KeyIndex>"),
        bipIndexes = A.List_List$of(new A.MappedIterable(new A.WhereIterable(indexses, t1._eval$1("bool(1)")._as(new A.Bip32AddressIndex__toPath_closure()), t1._eval$1("WhereIterable<1>")), t1._eval$1("Bip32KeyIndex(1)")._as(new A.Bip32AddressIndex__toPath_closure0()), t2), true, t2._eval$1("Iterable.E"));
      t1 = bipIndexes.length;
      if (t1 === 0)
        return null;
      for (pathStr = "m/", _i = 0; _i < t1; ++_i) {
        t2 = bipIndexes[_i].index;
        if ((t2 & 2147483648) >>> 0 === 0)
          pathStr += "" + t2 + "/";
        else
          pathStr += "" + (t2 & 2147483647) + "'/";
      }
      return B.JSString_methods.substring$2(pathStr, 0, pathStr.length - 1);
    },
    Bip32AddressIndex: function Bip32AddressIndex(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.purpose = t0;
      _.coin = t1;
      _.accountLevel = t2;
      _.changeLevel = t3;
      _.addressIndex = t4;
      _.importedKeyId = t5;
      _.keyName = t6;
      _.hdPath = t7;
      _.seedGeneration = t8;
      _.currencyCoin = t9;
    },
    Bip32AddressIndex__toPath_closure: function Bip32AddressIndex__toPath_closure() {
    },
    Bip32AddressIndex__toPath_closure0: function Bip32AddressIndex__toPath_closure0() {
    },
    Bip32AddressIndex_indexes_closure: function Bip32AddressIndex_indexes_closure() {
    },
    Bip32AddressIndex_indexes_closure0: function Bip32AddressIndex_indexes_closure0() {
    },
    MultiSigAddressIndex: function MultiSigAddressIndex() {
    },
    SubstrateAddressIndex: function SubstrateAddressIndex(t0, t1, t2, t3) {
      var _ = this;
      _.importedKeyId = t0;
      _.keyName = t1;
      _.substratePath = t2;
      _.currencyCoin = t3;
    },
    CryptoWokerImpl: function CryptoWokerImpl() {
    },
    EncryptedIsolateMessageController: function EncryptedIsolateMessageController(t0, t1) {
      this.onStreamCallBack = t0;
      this.streams = t1;
    },
    EncryptedIsolateMessageController_handleMessage_closure: function EncryptedIsolateMessageController_handleMessage_closure(t0, t1) {
      this.$this = t0;
      this.id = t1;
    },
    EncryptedIsolateMessageController_handleMessage_closure0: function EncryptedIsolateMessageController_handleMessage_closure0(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.streamId = t2;
    },
    IsolateCryptoWoker: function IsolateCryptoWoker() {
    },
    BrowserCryptoWorker: function BrowserCryptoWorker(t0) {
      this._connector = t0;
    },
    _WorkerConnector: function _WorkerConnector(t0, t1, t2) {
      this._web$_lock = t0;
      this._syncWorkers = t1;
      this.onStreamRespone = t2;
    },
    AdaLegacyPublicKeyData: function AdaLegacyPublicKeyData(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.extendedKey = t0;
      _.comprossed = t1;
      _.uncomprossed = t2;
      _.hdPathKey = t3;
      _.chainCode = t4;
      _.keyName = t5;
    },
    CryptoPrivateKeyData_CryptoPrivateKeyData$fromSeed(coin, keyName, seedBytes) {
      var t1, t2;
      if (coin instanceof A.BipCoins)
        return A.CryptoPrivateKeyData_CryptoPrivateKeyData$fromBip32(A.BlockchainUtils_seedToBipKey(coin, seedBytes), coin, keyName);
      if (coin.get$proposal() !== B.C_SubstratePropoosal)
        A.throwExpression(B.WalletException_invalid_coin_null);
      type$.SubstrateCoins._as(coin);
      t1 = $.$get$SubstrateCoins__coinToConf();
      t2 = A.SubstratePrvKey__keyFromBytes(A._SubstrateUtils_getSecretKey(seedBytes, t1.$index(0, coin).type), t1.$index(0, coin).type);
      t2.get$publicKey();
      t1.$index(0, coin).toString;
      return A.PrivateKeyData_PrivateKeyData(coin, t2, keyName);
    },
    CryptoPrivateKeyData_CryptoPrivateKeyData$fromBip32(account, coin, keyName) {
      var t1, wifKey, t2;
      switch (coin) {
        case B.Bip44Coins_moneroEd25519Slip:
          return A.MoneroPrivateKeyData_MoneroPrivateKeyData$fromBip32(account, coin, keyName);
        default:
          t1 = account.__Bip32Base__privKey_A;
          t1 === $ && A.throwLateFieldNI("_privKey");
          if (t1 == null)
            A.throwExpression(B.Bip32KeyError_7qd);
          wifKey = A.BlockchainUtils_toWif(coin, t1.privKey.get$raw());
          t1 = account.__Bip32Base__privKey_A;
          if (t1 == null)
            A.throwExpression(B.Bip32KeyError_7qd);
          t1 = t1.toHex$0();
          t2 = account.__Bip32Base__privKey_A;
          if (t2 == null)
            A.throwExpression(B.Bip32KeyError_7qd);
          return new A.PrivateKeyData(coin, t1, A.Bip32PrivateKeySerializer_serialize(t2.privKey, t2.keyData, t2.keyNetVer), wifKey, keyName, A.PublicKeyData_PublicKeyData$fromBip32(account, keyName));
      }
    },
    CryptoPublicKeyData: function CryptoPublicKeyData() {
    },
    CryptoPrivateKeyData: function CryptoPrivateKeyData() {
    },
    _CryptoPrivateKeyData_Object_CborSerializable: function _CryptoPrivateKeyData_Object_CborSerializable() {
    },
    _CryptoPublicKeyData_Object_CborSerializable: function _CryptoPublicKeyData_Object_CborSerializable() {
    },
    AccessCryptoPrivateKeysRequest_AccessCryptoPrivateKeysRequest$fromCborBytesOrObject(obj) {
      var t1 = type$.AccessCryptoPrivateKeyRequest,
        t2 = J.map$1$1$ax(A.CborSerializable_decodeCborTags(null, obj, B.List_180_10, type$.CborListValue_dynamic).value, new A.AccessCryptoPrivateKeysRequest_AccessCryptoPrivateKeysRequest$fromCborBytesOrObject_closure(), t1);
      return new A.AccessCryptoPrivateKeysRequest(A.List_List$unmodifiable(A.List_List$of(t2, true, t2.$ti._eval$1("ListIterable.E")), t1));
    },
    AccessCryptoPrivateKeysRequest: function AccessCryptoPrivateKeysRequest(t0) {
      this.indexes = t0;
    },
    AccessCryptoPrivateKeysRequest_AccessCryptoPrivateKeysRequest$fromCborBytesOrObject_closure: function AccessCryptoPrivateKeysRequest_AccessCryptoPrivateKeysRequest$fromCborBytesOrObject_closure() {
    },
    AccessCryptoPrivateKeysRequest_toCbor_closure: function AccessCryptoPrivateKeysRequest_toCbor_closure() {
    },
    AccessCryptoPrivateKeyRequest: function AccessCryptoPrivateKeyRequest(t0, t1) {
      this.index = t0;
      this.maxLevel = t1;
    },
    _AccessCryptoPrivateKeyRequest_Object_CborSerializable: function _AccessCryptoPrivateKeyRequest_Object_CborSerializable() {
    },
    _AccessCryptoPrivateKeysRequest_Object_CborSerializable: function _AccessCryptoPrivateKeysRequest_Object_CborSerializable() {
    },
    CryptoPrivateKeysResponse: function CryptoPrivateKeysResponse(t0) {
      this.keys = t0;
    },
    CryptoPrivateKeysResponse_toCbor_closure: function CryptoPrivateKeysResponse_toCbor_closure() {
    },
    CryptoPublicKeysResponse: function CryptoPublicKeysResponse(t0) {
      this.keys = t0;
    },
    CryptoPublicKeysResponse_toCbor_closure: function CryptoPublicKeysResponse_toCbor_closure() {
    },
    _CryptoPrivateKeysResponse_Object_CborSerializable: function _CryptoPrivateKeysResponse_Object_CborSerializable() {
    },
    _CryptoPublicKeysResponse_Object_CborSerializable: function _CryptoPublicKeysResponse_Object_CborSerializable() {
    },
    MoneroPrivateKeyData_MoneroPrivateKeyData$fromBip32(account, coin, keyName) {
      var moneroAccount, wifKey, t2, t3, t4, moneroAccount0, t5,
        t1 = account.__Bip32Base__privKey_A;
      t1 === $ && A.throwLateFieldNI("_privKey");
      if (t1 == null)
        A.throwExpression(B.Bip32KeyError_7qd);
      moneroAccount = A.MoneroAccount_MoneroAccount$fromBip44PrivateKey(t1.privKey.get$raw());
      t1 = account.__Bip32Base__privKey_A;
      if (t1 == null)
        A.throwExpression(B.Bip32KeyError_7qd);
      wifKey = A.BlockchainUtils_toWif(coin, t1.privKey.get$raw());
      t1 = account.__Bip32Base__privKey_A;
      if (t1 == null)
        A.throwExpression(B.Bip32KeyError_7qd);
      t1 = t1.toHex$0();
      t2 = account.__Bip32Base__privKey_A;
      if (t2 == null)
        A.throwExpression(B.Bip32KeyError_7qd);
      t2 = A.Bip32PrivateKeySerializer_serialize(t2.privKey, t2.keyData, t2.keyNetVer);
      t3 = moneroAccount.privSkey;
      if (t3 == null)
        A.throwExpression(B.MoneroKeyError_e7r);
      t3.toString;
      t4 = account.__Bip32Base__privKey_A;
      if (t4 == null)
        A.throwExpression(B.Bip32KeyError_7qd);
      moneroAccount0 = A.MoneroAccount_MoneroAccount$fromBip44PrivateKey(t4.privKey.get$raw());
      t4 = account.__Bip32Base__pubKey_A;
      t4 === $ && A.throwLateFieldNI("_pubKey");
      t4 = A.Bip32PublicKeySerializer_serialize(t4.pubKey, t4.keyData, t4.keyNetVer);
      t5 = A.BytesUtils_toHexString(account.__Bip32Base__pubKey_A.keyData.chainCode._chainCode, true, null);
      return new A.MoneroPrivateKeyData(coin, t1, moneroAccount.privVkey, t3, t2, wifKey, keyName, new A.MoneroPublicKeyData(t4, account.__Bip32Base__pubKey_A.toHex$0(), moneroAccount0.pubSkey, moneroAccount0.pubVkey, moneroAccount0.privVkey, t5, keyName));
    },
    MoneroPrivateKeyData: function MoneroPrivateKeyData(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.coin = t0;
      _.privateKey = t1;
      _.viewPrivateKey = t2;
      _.spendPrivateKey = t3;
      _.extendedKey = t4;
      _.wif = t5;
      _.keyName = t6;
      _.publicKey = t7;
    },
    MoneroPublicKeyData: function MoneroPublicKeyData(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.extendedKey = t0;
      _.comprossed = t1;
      _.spendPublicKey = t2;
      _.viewPublicKey = t3;
      _.viewPrivateKey = t4;
      _.chainCode = t5;
      _.keyName = t6;
    },
    PrivateKeyData_PrivateKeyData$fromExtendedKey(coin, extendedKey, keyName) {
      var wifKey, t2,
        bipKey = A.BlockchainUtils_extendedKeyToBip32Key(coin, extendedKey),
        t1 = bipKey.__Bip32Base__privKey_A;
      t1 === $ && A.throwLateFieldNI("_privKey");
      if (t1 == null)
        A.throwExpression(B.Bip32KeyError_7qd);
      wifKey = A.BlockchainUtils_toWif(coin, t1.privKey.get$raw());
      t1 = bipKey.__Bip32Base__privKey_A;
      if (t1 == null)
        A.throwExpression(B.Bip32KeyError_7qd);
      t1 = t1.toHex$0();
      t2 = bipKey.__Bip32Base__privKey_A;
      if (t2 == null)
        A.throwExpression(B.Bip32KeyError_7qd);
      return new A.PrivateKeyData(coin, t1, A.Bip32PrivateKeySerializer_serialize(t2.privKey, t2.keyData, t2.keyNetVer), wifKey, keyName, A.PublicKeyData_PublicKeyData$fromBip32(bipKey, keyName));
    },
    PrivateKeyData_PrivateKeyData(coin, key, keyName) {
      var _null = null,
        t1 = key.toHex$0(),
        t2 = A.BlockchainUtils_toWif(coin, key.get$raw()),
        t3 = key.get$publicKey(),
        comperesed = A.BytesUtils_toHexString(t3.get$compressed(), true, _null),
        uncompresed = A.BytesUtils_toHexString(t3.get$uncompressed(), true, _null);
      t3 = t3.toHex$0();
      return new A.PrivateKeyData(coin, t1, _null, t2, keyName, new A.PublicKeyData(_null, t3, uncompresed === comperesed ? _null : uncompresed, keyName, _null));
    },
    PrivateKeyData: function PrivateKeyData(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.coin = t0;
      _.privateKey = t1;
      _.extendedKey = t2;
      _.wif = t3;
      _.keyName = t4;
      _.publicKey = t5;
    },
    PublicKeyData_PublicKeyData$fromBip32(account, keyName) {
      var comperesed, uncompresed, t2, _null = null,
        t1 = account.__Bip32Base__pubKey_A;
      t1 === $ && A.throwLateFieldNI("_pubKey");
      comperesed = A.BytesUtils_toHexString(t1.pubKey.get$compressed(), true, _null);
      uncompresed = A.BytesUtils_toHexString(account.__Bip32Base__pubKey_A.pubKey.get$uncompressed(), true, _null);
      t1 = account.__Bip32Base__pubKey_A;
      t1 = A.Bip32PublicKeySerializer_serialize(t1.pubKey, t1.keyData, t1.keyNetVer);
      t2 = uncompresed === comperesed ? _null : uncompresed;
      return new A.PublicKeyData(t1, comperesed, t2, keyName, A.BytesUtils_toHexString(account.__Bip32Base__pubKey_A.keyData.chainCode._chainCode, true, _null));
    },
    PublicKeyData: function PublicKeyData(t0, t1, t2, t3, t4) {
      var _ = this;
      _.extendedKey = t0;
      _.comprossed = t1;
      _.uncomprossed = t2;
      _.keyName = t3;
      _.chainCode = t4;
    },
    AccessMnemonicResponse: function AccessMnemonicResponse(t0) {
      this.mnemonic = t0;
    },
    ImportCustomKeys: function ImportCustomKeys(t0, t1, t2) {
      this.privateKey = t0;
      this.publicKey = t1;
      this.coin = t2;
    },
    _ImportCustomKeys_Object_CborSerializable: function _ImportCustomKeys_Object_CborSerializable() {
    },
    EncryptedCustomKey: function EncryptedCustomKey(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.publicKey = t0;
      _.id = t1;
      _.coin = t2;
      _.created = t3;
      _.name = t4;
      _.keyType = t5;
    },
    _EncryptedCustomKey_Object_Equatable: function _EncryptedCustomKey_Object_Equatable() {
    },
    _EncryptedCustomKey_Object_Equatable_CborSerializable: function _EncryptedCustomKey_Object_Equatable_CborSerializable() {
    },
    EncryptedMasterKey: function EncryptedMasterKey(t0, t1, t2) {
      this.checksum = t0;
      this.masterKey = t1;
      this.customKeys = t2;
    },
    EncryptedMasterKey_toCbor_closure: function EncryptedMasterKey_toCbor_closure() {
    },
    _EncryptedMasterKey_Object_CborSerializable: function _EncryptedMasterKey_Object_CborSerializable() {
    },
    ImportedKeyStorage$(checksum, coin, created, extendedPrivateKey, keyType, $name, publicKey) {
      return new A.ImportedKeyStorage(checksum, extendedPrivateKey, publicKey, $name, created == null ? new A.DateTime(Date.now(), 0, false) : created, coin, keyType);
    },
    ImportedKeyStorage_ImportedKeyStorage$fromCborBytesOrObject(obj) {
      var cbor, coin, t1, t2, t3, t4, t5, t6, exception, bytes = null;
      try {
        cbor = A.CborSerializable_decodeCborTags(bytes, obj, B.List_180_0, type$.CborListValue_dynamic);
        t1 = type$.String;
        coin = A.CustomCoins_getCoin(A.ExtractCborList_elementAt(cbor, 4, t1), A.ExtractCborList_elementAt(cbor, 3, t1), type$.CryptoCoins_CoinConfig);
        t2 = A.ExtractCborList_elementAt(cbor, 0, t1);
        t3 = A.ExtractCborList_elementAt(cbor, 1, t1);
        t1 = A.ExtractCborList_elementAt(cbor, 2, t1);
        t4 = A.ExtractCborList_elementAt(cbor, 5, type$.nullable_DateTime);
        t5 = type$.nullable_String;
        t6 = A.ExtractCborList_elementAt(cbor, 6, t5);
        t1 = A.ImportedKeyStorage$(t2, coin, t4, t3, A.CustomKeyType_fromName(A.ExtractCborList_elementAt(cbor, 7, t5)), t6, t1);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.WalletException_invalid_mnemonic_null);
      }
    },
    ImportedKeyStorage: function ImportedKeyStorage(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.checksum = t0;
      _.extendedPrivateKey = t1;
      _.publicKey = t2;
      _.name = t3;
      _.created = t4;
      _.coin = t5;
      _.keyType = t6;
    },
    _ImportedKeyStorage_Object_CborSerializable: function _ImportedKeyStorage_Object_CborSerializable() {
    },
    _ImportedKeyStorage_Object_CborSerializable_Equatable: function _ImportedKeyStorage_Object_CborSerializable_Equatable() {
    },
    CustomKeyType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_CustomKeyType_0_CustomKeyType_1, new A.CustomKeyType_fromName_closure($name), new A.CustomKeyType_fromName_closure0());
    },
    CustomKeyType: function CustomKeyType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    CustomKeyType_fromName_closure: function CustomKeyType_fromName_closure(t0) {
      this.name = t0;
    },
    CustomKeyType_fromName_closure0: function CustomKeyType_fromName_closure0() {
    },
    WalletMasterKeys$_(cardanoIcarusSeed, cardanoLegacyByronSeed, checksum, customKeys, entropySeedBytes, mnemonic, seedBytes) {
      var t1, t2, t3, t4, t5;
      A.BytesUtils_validateListOfBytes(seedBytes);
      t1 = type$.int;
      t2 = A.List_List$unmodifiable(seedBytes, t1);
      A.BytesUtils_validateListOfBytes(cardanoLegacyByronSeed);
      t3 = A.List_List$unmodifiable(cardanoLegacyByronSeed, t1);
      A.BytesUtils_validateListOfBytes(cardanoIcarusSeed);
      t4 = A.List_List$unmodifiable(cardanoIcarusSeed, t1);
      A.BytesUtils_validateListOfBytes(checksum);
      t5 = A.List_List$unmodifiable(checksum, t1);
      A.BytesUtils_validateListOfBytes(entropySeedBytes);
      return new A.WalletMasterKeys(mnemonic, t2, A.List_List$unmodifiable(entropySeedBytes, t1), t3, t4, t5, customKeys);
    },
    WalletMasterKeys_WalletMasterKeys$fromCborBytesOrObject(bytes, obj) {
      var cbor, mnemonic, seed, customKeys, cardanoLegacy, icarus, entropySeed, t1, t2, t3, t4, exception, hex = null;
      try {
        t1 = type$.CborListValue_dynamic;
        cbor = A.CborSerializable_cborTagValue(bytes, hex, obj, B.List_180, t1);
        mnemonic = A.ExtractCborList_elementAt(cbor, 0, type$.String);
        t2 = type$.List_int;
        seed = A.ExtractCborList_elementAt(cbor, 1, t2);
        customKeys = t1._as(J.$index$asx(cbor.value, 2));
        cardanoLegacy = A.ExtractCborList_elementAt(cbor, 4, t2);
        icarus = A.ExtractCborList_elementAt(cbor, 5, t2);
        entropySeed = A.ExtractCborList_elementAt(cbor, 7, t2);
        t1 = A.Mnemonic__normalize(mnemonic);
        t3 = type$.ImportedKeyStorage;
        t4 = J.map$1$1$ax(customKeys.value, new A.WalletMasterKeys_WalletMasterKeys$fromCborBytesOrObject_closure(), t3);
        t3 = A.List_List$unmodifiable(A.List_List$of(t4, true, t4.$ti._eval$1("ListIterable.E")), t3);
        t1 = A.WalletMasterKeys$_(icarus, cardanoLegacy, A.ExtractCborList_elementAt(cbor, 6, t2), t3, entropySeed, new A.Mnemonic(t1), seed);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.WalletException_invalid_mnemonic_null);
      }
    },
    WalletMasterKeys: function WalletMasterKeys(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.mnemonic = t0;
      _.seed = t1;
      _.entopySeed = t2;
      _.cardanoLegacyByronSeed = t3;
      _.cardanoIcarusSeed = t4;
      _.checksum = t5;
      _.customKeys = t6;
    },
    WalletMasterKeys_removeKey_closure: function WalletMasterKeys_removeKey_closure(t0) {
      this.keyId = t0;
    },
    WalletMasterKeys_WalletMasterKeys$fromCborBytesOrObject_closure: function WalletMasterKeys_WalletMasterKeys$fromCborBytesOrObject_closure() {
    },
    WalletMasterKeys_toCbor_closure: function WalletMasterKeys_toCbor_closure() {
    },
    WalletMasterKeys_getKeyById_closure: function WalletMasterKeys_getKeyById_closure(t0) {
      this.keyId = t0;
    },
    WalletMasterKeys_importCustomKey_closure: function WalletMasterKeys_importCustomKey_closure(t0) {
      this.newKey = t0;
    },
    _WalletMasterKeys_Object_CborSerializable: function _WalletMasterKeys_Object_CborSerializable() {
    },
    SeedTypes_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_cVj, new A.SeedTypes_fromName_closure($name), new A.SeedTypes_fromName_closure0());
    },
    SeedTypes: function SeedTypes(t0, t1, t2) {
      this.name = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    SeedTypes_fromName_closure: function SeedTypes_fromName_closure(t0) {
      this.name = t0;
    },
    SeedTypes_fromName_closure0: function SeedTypes_fromName_closure0() {
    },
    NetworkType_fromTag(tag) {
      var t1 = {};
      t1.tag = tag;
      if (tag != null && J.get$length$asx(tag) > 3)
        t1.tag = J.sublist$2$ax(tag, 0, 3);
      return B.JSArray_methods.firstWhere$2$orElse(B.List_vHJ, new A.NetworkType_fromTag_closure(t1), new A.NetworkType_fromTag_closure0());
    },
    NetworkType: function NetworkType(t0) {
      this.tag = t0;
    },
    NetworkType_fromTag_closure: function NetworkType_fromTag_closure(t0) {
      this._box_0 = t0;
    },
    NetworkType_fromTag_closure0: function NetworkType_fromTag_closure0() {
    },
    ArgsType_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_jvJ, new A.ArgsType_fromTag_closure(tag), new A.ArgsType_fromTag_closure0());
    },
    CborMessageArgs_deserialize(bytes, $T) {
      var t1, args, values, t2, t3, t4, t5, _null = null,
        cbor = A.CborSerializable_toTagValue(bytes, _null, type$.CborObject);
      switch (A.ArgsType_fromTag(cbor.tags).index) {
        case 3:
          t1 = A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(_null, _null, cbor, B.List_1_1, type$.CborListValue_dynamic), 0, type$.List_int);
          A.BytesUtils_validateListOfBytes(t1);
          args = new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
          break;
        case 0:
          args = new A.MessageArgsStreamId(A.ExtractCborList_elementAs(A.CborSerializable_cborTagValue(_null, _null, cbor, B.List_1_4, type$.CborListValue_dynamic), 0, type$.String));
          break;
        case 4:
          values = A.CborSerializable_cborTagValue(_null, _null, cbor, B.List_1_2, type$.CborListValue_dynamic);
          t1 = type$.List_int;
          t2 = A.ExtractCborList_elementAt(values, 0, t1);
          t1 = A.ExtractCborList_elementAt(values, 1, t1);
          A.BytesUtils_validateListOfBytes(t2);
          t3 = type$.int;
          t2 = A.List_List$unmodifiable(t2, t3);
          A.BytesUtils_validateListOfBytes(t1);
          args = new A.MessageArgsTwoBytes(t2, A.List_List$unmodifiable(t1, t3));
          break;
        case 5:
          values = A.CborSerializable_cborTagValue(_null, _null, cbor, B.List_1_3, type$.CborListValue_dynamic);
          t1 = type$.List_int;
          t2 = A.ExtractCborList_elementAt(values, 0, t1);
          t3 = A.ExtractCborList_elementAt(values, 1, t1);
          t1 = A.ExtractCborList_elementAt(values, 2, t1);
          A.BytesUtils_validateListOfBytes(t2);
          t4 = type$.int;
          t2 = A.List_List$unmodifiable(t2, t4);
          A.BytesUtils_validateListOfBytes(t3);
          t3 = A.List_List$unmodifiable(t3, t4);
          A.BytesUtils_validateListOfBytes(t1);
          args = new A.MessageArgsThreeBytes(t2, t3, A.List_List$unmodifiable(t1, t4));
          break;
        case 6:
          args = new A.MessageArgsException(A.StringUtils_decode(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(_null, _null, cbor, B.List_0_0, type$.CborListValue_dynamic), 0, type$.List_int), false, B.StringEncoding_1));
          break;
        case 7:
          args = A.CryptoRequest_CryptoRequest$deserialize(cbor, type$.dynamic, type$.CborMessageArgs);
          break;
        case 8:
          args = A.NoneEncryptedCryptoRequest_NoneEncryptedCryptoRequest$deserialize(cbor, type$.dynamic, type$.CborMessageArgs);
          break;
        case 10:
          values = A.CborSerializable_cborTagValue(_null, _null, cbor, B.List_3_0, type$.CborListValue_dynamic);
          t1 = type$.dynamic;
          args = A.WalletRequest_WalletRequest$deserialize(A.ExtractCborList_getCborTag(values, 0), t1, type$.CborMessageArgs);
          if (!type$.WalletArgsCompleter_of_nullable_Object_and_CborMessageArgs._is(args))
            A.throwExpression(A.WalletExceptionConst_invalidArgruments(A.createRuntimeType(t1).toString$0(0), A.getRuntimeTypeOfDartObject(args).toString$0(0)));
          t1 = type$.int;
          t2 = A.ExtractCborList_elementAt(values, 1, t1);
          t3 = type$.List_int;
          t4 = A.ExtractCborList_elementAt(values, 2, t3);
          t5 = A.ExtractCborList_elementAt(values, 3, t3);
          t3 = A.ExtractCborList_elementAt(values, 4, t3);
          A.BytesUtils_validateListOfBytes(t4);
          t4 = A.List_List$unmodifiable(t4, t1);
          A.BytesUtils_validateListOfBytes(t3);
          t3 = A.List_List$unmodifiable(t3, t1);
          A.BytesUtils_validateListOfBytes(t5);
          args = new A.WalletArgs(args, t2, A.List_List$unmodifiable(t5, t1), t4, t3, type$.WalletArgs_of_dynamic_and_CborMessageArgs_and_WalletArgsCompleter_of_nullable_Object_and_CborMessageArgs);
          break;
        case 9:
          t1 = type$.dynamic;
          args = A.IsolateStreamRequest_IsolateStreamRequest$deserialize(cbor, t1, t1);
          break;
        case 2:
          values = A.CborSerializable_cborTagValue(_null, _null, cbor, B.List_1_5, type$.CborListValue_dynamic);
          t1 = A.ExtractCborList_elementAt(values, 0, type$.nullable_List_int);
          t2 = A.ExtractCborList_elementAs(values, 1, type$.String);
          args = A.MessageArgsStream$_(t1, A.MessageArgsStreamMethod_fromValue(A.ExtractCborList_elementAs(values, 2, type$.nullable_int)), t2);
          break;
        case 1:
          args = new A.MessageArgsMessage(A.ExtractCborList_elementAs(A.CborSerializable_cborTagValue(_null, _null, cbor, B.List_0_1, type$.CborListValue_dynamic), 0, type$.nullable_String));
          break;
        default:
          throw A.wrapException(B.WalletException_invalid_request_null);
      }
      if (!$T._is(args))
        throw A.wrapException(A.WalletExceptionConst_invalidArgruments(A.createRuntimeType($T).toString$0(0), A.getRuntimeTypeOfDartObject(args).toString$0(0)));
      return args;
    },
    MessageArgsStreamMethod_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_Ucj, new A.MessageArgsStreamMethod_fromValue_closure(value), new A.MessageArgsStreamMethod_fromValue_closure0());
    },
    MessageArgsStream$_(data, method, streamId) {
      var t1;
      if (data == null)
        t1 = null;
      else {
        A.BytesUtils_validateListOfBytes(data);
        t1 = A.List_List$unmodifiable(data, type$.int);
      }
      return new A.MessageArgsStream(t1, streamId, method);
    },
    ArgsType: function ArgsType(t0, t1, t2) {
      this.tag = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    ArgsType_fromTag_closure: function ArgsType_fromTag_closure(t0) {
      this.tag = t0;
    },
    ArgsType_fromTag_closure0: function ArgsType_fromTag_closure0() {
    },
    IsolateMessageArgs: function IsolateMessageArgs() {
    },
    CborMessageArgs: function CborMessageArgs() {
    },
    MessageArgsRequestable: function MessageArgsRequestable() {
    },
    WalletArgsRequestable: function WalletArgsRequestable() {
    },
    MessageArgsTwoBytes: function MessageArgsTwoBytes(t0, t1) {
      this.keyOne = t0;
      this.keyTwo = t1;
    },
    MessageArgsOneBytes: function MessageArgsOneBytes(t0) {
      this.keyOne = t0;
    },
    MessageArgsStreamId: function MessageArgsStreamId(t0) {
      this.streamId = t0;
    },
    MessageArgsThreeBytes: function MessageArgsThreeBytes(t0, t1, t2) {
      this.keyOne = t0;
      this.keyTwo = t1;
      this.keyThree = t2;
    },
    MessageArgsStreamMethod: function MessageArgsStreamMethod(t0, t1, t2) {
      this.value = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    MessageArgsStreamMethod_fromValue_closure: function MessageArgsStreamMethod_fromValue_closure(t0) {
      this.value = t0;
    },
    MessageArgsStreamMethod_fromValue_closure0: function MessageArgsStreamMethod_fromValue_closure0() {
    },
    MessageArgsStream: function MessageArgsStream(t0, t1, t2) {
      this.data = t0;
      this.streamId = t1;
      this.method = t2;
    },
    MessageArgsException: function MessageArgsException(t0) {
      this.message = t0;
    },
    MessageArgsMessage: function MessageArgsMessage(t0) {
      this.message = t0;
    },
    ArgsCompleter: function ArgsCompleter() {
    },
    CborArgsCompleter: function CborArgsCompleter() {
    },
    EncodableArgsCompleter: function EncodableArgsCompleter() {
    },
    StreamArgsCompleter: function StreamArgsCompleter() {
    },
    CryptoArgsCompleter: function CryptoArgsCompleter() {
    },
    NoneEncryptedArgsCompleter: function NoneEncryptedArgsCompleter() {
    },
    WalletArgsCompleter: function WalletArgsCompleter() {
    },
    WalletArgs: function WalletArgs(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.args = t0;
      _.version = t1;
      _.nonce = t2;
      _.walletData = t3;
      _.key = t4;
      _.$ti = t5;
    },
    _CborArgsCompleter_ArgsCompleter_CborSerializable: function _CborArgsCompleter_ArgsCompleter_CborSerializable() {
    },
    _CborMessageArgs_IsolateMessageArgs_CborSerializable: function _CborMessageArgs_IsolateMessageArgs_CborSerializable() {
    },
    CryptoRequestMethod_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_mqY, new A.CryptoRequestMethod_fromTag_closure(tag), new A.CryptoRequestMethod_fromTag_closure0());
    },
    NoneEncryptedCryptoRequestMethod_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_r60, new A.NoneEncryptedCryptoRequestMethod_fromTag_closure(tag), new A.NoneEncryptedCryptoRequestMethod_fromTag_closure0());
    },
    StreamIsolateMethod_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_71d, new A.StreamIsolateMethod_fromTag_closure(tag), new A.StreamIsolateMethod_fromTag_closure0());
    },
    WalletRequestMethod_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_eVV, new A.WalletRequestMethod_fromTag_closure(tag), new A.WalletRequestMethod_fromTag_closure0());
    },
    CryptoRequest_CryptoRequest$deserialize(object, $T, $A) {
      var values, t1, t2, t3, t4, t5, args, t6, t7, _null = null,
        decode = A.CborSerializable_decode(_null, _null, object, type$.CborTagValue_dynamic);
      switch (A.CryptoRequestMethod_fromTag(decode.tags).index) {
        case 0:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.CryptoRequestMethod_bMN.get$tag(), type$.CborListValue_dynamic);
          t1 = type$.List_int;
          t2 = A.ExtractCborList_elementAt(values, 0, t1);
          t1 = A.ExtractCborList_elementAt(values, 1, t1);
          t3 = A.ExtractCborList_elementAt(values, 2, type$.nullable_List_int);
          t4 = type$.int;
          t5 = A.ExtractCborList_elementAt(values, 3, t4);
          A.BytesUtils_validateListOfBytes(t2);
          t2 = A.List_List$unmodifiable(t2, t4);
          A.BytesUtils_validateListOfBytes(t1);
          t1 = A.List_List$unmodifiable(t1, t4);
          if (t3 == null)
            t3 = _null;
          else {
            A.BytesUtils_validateListOfBytes(t3);
            t3 = A.List_List$unmodifiable(t3, t4);
          }
          args = new A.CryptoRequestEncryptChacha(t2, t1, t5, t3);
          break;
        case 1:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.CryptoRequestMethod_qJs.get$tag(), type$.CborListValue_dynamic);
          t1 = type$.List_int;
          t2 = A.ExtractCborList_elementAt(values, 0, t1);
          t3 = A.ExtractCborList_elementAt(values, 1, t1);
          t1 = A.ExtractCborList_elementAt(values, 2, t1);
          A.BytesUtils_validateListOfBytes(t2);
          t4 = type$.int;
          t2 = A.List_List$unmodifiable(t2, t4);
          A.BytesUtils_validateListOfBytes(t3);
          t3 = A.List_List$unmodifiable(t3, t4);
          A.BytesUtils_validateListOfBytes(t1);
          args = new A.CryptoRequestDecryptChacha(t2, t3, A.List_List$unmodifiable(t1, t4));
          break;
        case 2:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.CryptoRequestMethod_6pl.get$tag(), type$.CborListValue_dynamic);
          args = new A.TonMenmonicGenerateMessage(A.ExtractCborList_elementAt(values, 0, type$.nullable_String), A.ExtractCborList_elementAt(values, 1, type$.int));
          break;
        case 3:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.CryptoRequestMethod_ifx.get$tag(), type$.CborListValue_dynamic);
          t1 = type$.String;
          args = new A.TonMnemonicToPrivateKeyMessage(A.ExtractCborList_elementAt(values, 0, t1), A.ExtractCborList_elementAt(values, 1, type$.nullable_String), A.ExtractCborList_elementAt(values, 2, type$.bool), A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 3, t1), type$.CryptoCoins_CoinConfig));
          break;
        case 4:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.CryptoRequestMethod_5cD.get$tag(), type$.CborListValue_dynamic);
          args = new A.MoneroMenmonicGenerateMessage(A.MoneroWordsNum_fromValue(A.ExtractCborList_elementAs(values, 0, type$.nullable_int)), A.MoneroLanguages_fromValue(A.ExtractCborList_elementAs(values, 1, type$.nullable_String)));
          break;
        case 5:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.CryptoRequestMethod_CnH.get$tag(), type$.CborListValue_dynamic);
          t1 = type$.String;
          args = new A.MoneroMnemonicToPrivateKeyMessage(A.ExtractCborList_elementAt(values, 0, t1), A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 1, t1), type$.CryptoCoins_CoinConfig));
          break;
        case 6:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.CryptoRequestMethod_VKi.get$tag(), type$.CborListValue_dynamic);
          t1 = type$.int;
          t2 = A.ExtractCborList_elementAt(values, 0, t1);
          t3 = A.ExtractCborList_elementAt(values, 1, type$.List_int);
          t4 = type$.nullable_List_int;
          t5 = A.ExtractCborList_elementAt(values, 2, t4);
          t6 = A.ExtractCborList_elementAt(values, 3, t4);
          t7 = A.ExtractCborList_elementAt(values, 4, t4);
          t4 = A.ExtractCborList_elementAt(values, 5, t4);
          A.BytesUtils_validateListOfBytes(t3);
          t3 = A.List_List$unmodifiable(t3, t1);
          if (t5 == null)
            t5 = _null;
          else {
            A.BytesUtils_validateListOfBytes(t5);
            t5 = A.List_List$unmodifiable(t5, t1);
          }
          if (t6 == null)
            t6 = _null;
          else {
            A.BytesUtils_validateListOfBytes(t6);
            t6 = A.List_List$unmodifiable(t6, t1);
          }
          if (t7 == null)
            t7 = _null;
          else {
            A.BytesUtils_validateListOfBytes(t7);
            t7 = A.List_List$unmodifiable(t7, t1);
          }
          if (t4 == null)
            t1 = _null;
          else {
            A.BytesUtils_validateListOfBytes(t4);
            t1 = A.List_List$unmodifiable(t4, t1);
          }
          args = new A.CryptoRequestGenerateMasterKey(t3, t2, t5, t6, t7, t1);
          break;
        case 7:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.CryptoRequestMethod_3jH.get$tag(), type$.CborListValue_dynamic);
          t1 = type$.int;
          t2 = A.ExtractCborList_elementAt(values, 0, t1);
          t3 = type$.List_int;
          t4 = A.ExtractCborList_elementAt(values, 1, t3);
          t5 = A.ExtractCborList_elementAt(values, 2, t3);
          t3 = A.ExtractCborList_elementAt(values, 3, t3);
          A.BytesUtils_validateListOfBytes(t5);
          t5 = A.List_List$unmodifiable(t5, t1);
          A.BytesUtils_validateListOfBytes(t3);
          t3 = A.List_List$unmodifiable(t3, t1);
          A.BytesUtils_validateListOfBytes(t4);
          args = new A.CryptoRequestReadMasterKey(t2, A.List_List$unmodifiable(t4, t1), t5, t3);
          break;
        case 8:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.CryptoRequestMethod_8YS.get$tag(), type$.CborListValue_dynamic);
          args = new A.CryptoRequestCreateMasterKey(A.ExtractCborList_elementAt(values, 0, type$.String), A.ExtractCborList_elementAt(values, 1, type$.nullable_String));
          break;
        case 9:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.CryptoRequestMethod_Giz.get$tag(), type$.CborListValue_dynamic);
          t1 = type$.String;
          t2 = A.ExtractCborList_elementAt(values, 0, t1);
          t3 = A.ExtractCborList_elementAt(values, 1, type$.nullable_String);
          t1 = A.ExtractCborList_elementAt(values, 2, t1);
          t4 = A.ExtractCborList_elementAt(values, 3, type$.List_int);
          A.BytesUtils_validateListOfBytes(t4);
          args = new A.CryptoRequestCreateHDWallet(t2, t3, t1, A.List_List$unmodifiable(t4, type$.int));
          break;
        case 10:
          args = A.CryptoRequestDecodeBackup_CryptoRequestDecodeBackup$deserialize(decode);
          break;
        case 11:
          args = A.CryptoRequestEncodeBackup_CryptoRequestEncodeBackup$deserialize(decode);
          break;
        case 12:
          args = A.CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize(decode);
          break;
        case 13:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.CryptoRequestMethod_YE0.get$tag(), type$.CborListValue_dynamic);
          t1 = type$.List_int;
          t2 = A.ExtractCborList_elementAt(values, 0, t1);
          t1 = A.ExtractCborList_elementAt(values, 1, t1);
          A.BytesUtils_validateListOfBytes(t2);
          t3 = type$.int;
          t2 = A.List_List$unmodifiable(t2, t3);
          A.BytesUtils_validateListOfBytes(t1);
          args = new A.CryptoRequestWalletKey(t2, A.List_List$unmodifiable(t1, t3));
          break;
        case 14:
          args = A.CryptoRequestRandomGenerator_CryptoRequestRandomGenerator$deserialize(decode, type$.dynamic);
          break;
        case 16:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.CryptoRequestMethod_c4E.get$tag(), type$.CborListValue_dynamic);
          t1 = type$.nullable_String;
          t2 = A.CryptoRequestHashingType_fromName(A.ExtractCborList_elementAt(values, 0, t1));
          t3 = A.ExtractCborList_elementAt(values, 1, type$.nullable_List_int);
          args = new A.CryptoRequestHashing(t2, A.ExtractCborList_elementAt(values, 2, t1), A.BytesUtils_tryToBytes(t3, true));
          break;
        case 17:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.CryptoRequestMethod_Ucj.get$tag(), type$.CborListValue_dynamic);
          t1 = A.WalletMasterKeys_WalletMasterKeys$fromCborBytesOrObject(_null, A.ExtractCborList_getCborTag(values, 0));
          t2 = A.ExtractCborList_elementAt(values, 1, type$.List_int);
          A.BytesUtils_validateListOfBytes(t2);
          args = new A.CryptoRequestSetupMasterKey(t1, A.List_List$unmodifiable(t2, type$.int));
          break;
        default:
          throw A.wrapException(B.WalletException_invalid_request_null);
      }
      t1 = $T._eval$1("@<0>")._bind$1($A)._eval$1("CryptoRequest<1,2>");
      if (!t1._is(args))
        throw A.wrapException(A.WalletExceptionConst_invalidArgruments(A.createRuntimeType(t1).toString$0(0), A.getRuntimeTypeOfDartObject(args).toString$0(0)));
      return args;
    },
    WalletRequest_WalletRequest$deserialize(object, $T, $A) {
      var values, t1, t2, t3, t4, args, addrParams, _null = null,
        decode = A.CborSerializable_decode(_null, _null, object, type$.CborTagValue_dynamic);
      switch (A.WalletRequestMethod_fromTag(decode.tags).index) {
        case 0:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_111_3, type$.CborListValue_dynamic);
          t1 = A.ExtractCborList_elementAt(values, 0, type$.List_int);
          t2 = A.Bip32AddressIndex_Bip32AddressIndex$fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 1));
          t3 = A.ExtractCborList_elementAt(values, 2, type$.nullable_int);
          t4 = A.NetworkType_fromTag(A.ExtractCborList_elementAt(values, 3, type$.nullable_List_int));
          A.BytesUtils_validateListOfBytes(t1);
          args = new A.WalletRequestSignMessage(A.List_List$unmodifiable(t1, type$.int), t2, t3, t4);
          break;
        case 1:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_111_4, type$.CborListValue_dynamic);
          args = new A.WalletRequestEthereumTypedDataSign(A.EIP712Base_EIP712Base$fromJson(A.StringUtils_toJson(A.ExtractCborList_elementAt(values, 0, type$.nullable_Object), _null, type$.Map_String_dynamic)), A.Bip32AddressIndex_Bip32AddressIndex$fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 1)));
          break;
        case 2:
          addrParams = A.NewAccountParams_NewAccountParams$deserialize(A.ExtractCborList_getCborTag(A.CborSerializable_cborTagValue(_null, _null, decode, B.List_111_5, type$.CborListValue_dynamic), 0), type$.dynamic);
          args = new A.WalletRequestDeriveAddress(addrParams, type$.WalletRequestDeriveAddress_dynamic);
          break;
        case 3:
          args = new A.WalletRequestReadPublicKeys(A.AccessCryptoPrivateKeysRequest_AccessCryptoPrivateKeysRequest$fromCborBytesOrObject(A.ExtractCborList_getCborTag(A.CborSerializable_cborTagValue(_null, _null, decode, B.List_111_25, type$.CborListValue_dynamic), 0)));
          break;
        case 4:
          args = new A.WalletRequestReadPrivateKeys(A.AccessCryptoPrivateKeysRequest_AccessCryptoPrivateKeysRequest$fromCborBytesOrObject(A.ExtractCborList_getCborTag(A.CborSerializable_cborTagValue(_null, _null, decode, B.List_111_26, type$.CborListValue_dynamic), 0)));
          break;
        case 6:
          A.CborSerializable_cborTagValue(_null, _null, decode, B.List_111_27, type$.CborObject);
          args = new A.WalletRequestReadMnemonic();
          break;
        case 7:
          args = new A.WalletRequestImportNewKey(A.ImportedKeyStorage_ImportedKeyStorage$fromCborBytesOrObject(A.ExtractCborList_getCborTag(A.CborSerializable_cborTagValue(_null, _null, decode, B.List_111_28, type$.CborListValue_dynamic), 0)));
          break;
        case 8:
          args = new A.WalletRequestRemoveKey(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(_null, _null, decode, B.List_111_29, type$.CborListValue_dynamic), 0, type$.String));
          break;
        case 10:
          args = new A.WalletRequestSign(A.SignRequest_SignRequest$deserialize(A.ExtractCborList_getCborTag(A.CborSerializable_cborTagValue(_null, _null, decode, B.List_111_30, type$.CborListValue_dynamic), 0)));
          break;
        case 5:
          args = new A.WalletRequestReadImportedKey(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(_null, _null, decode, B.List_111_33, type$.CborListValue_dynamic), 0, type$.String));
          break;
        case 9:
          args = new A.WalletRequestBackupWallet(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(_null, _null, decode, B.List_111_40, type$.CborListValue_dynamic), 0, type$.String));
          break;
        case 11:
          args = A.WalletRequestMoneroOutputUnlocker_WalletRequestMoneroOutputUnlocker$deserialize(decode);
          break;
        default:
          throw A.wrapException(B.WalletException_invalid_request_null);
      }
      t1 = $T._eval$1("@<0>")._bind$1($A)._eval$1("WalletRequest<1,2>");
      if (!t1._is(args))
        throw A.wrapException(A.WalletExceptionConst_invalidArgruments(A.createRuntimeType(t1).toString$0(0), A.getRuntimeTypeOfDartObject(args).toString$0(0)));
      return args;
    },
    NoneEncryptedCryptoRequest_NoneEncryptedCryptoRequest$deserialize(object, $T, $A) {
      var args, values, t1, t2, t3, _null = null,
        decode = A.CborSerializable_decode(_null, _null, object, type$.CborTagValue_dynamic);
      switch (A.NoneEncryptedCryptoRequestMethod_fromTag(decode.tags).index) {
        case 0:
          args = A.NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize(decode);
          break;
        case 1:
          args = A.NoneEncryptedRequestGenerateRingOutput_NoneEncryptedRequestGenerateRingOutput$deserialize(decode);
          break;
        case 4:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.NoneEncryptedCryptoRequestMethod_sM5.get$tag(), type$.CborListValue_dynamic);
          args = new A.NoneEncryptedRequestMoneroGenerateTxProof(A.ExtractCborList_elementAs(values, 0, type$.String), A.MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 1)), A.ExtractCborList_elementAs(values, 2, type$.nullable_String));
          break;
        case 5:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.NoneEncryptedCryptoRequestMethod_kXN.get$tag(), type$.CborListValue_dynamic);
          t1 = type$.String;
          args = new A.NoneEncryptedRequestMoneroVerifyTxProof(A.ExtractCborList_elementAs(values, 0, t1), A.MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 1)), A.ExtractCborList_elementAs(values, 2, type$.nullable_String), A.MoneroAddress_MoneroAddress(A.ExtractCborList_elementAs(values, 3, t1)), A.ExtractCborList_elementAs(values, 4, t1));
          break;
        case 2:
          args = new A.NoneEncryptedRequestHexToBytes(A.String_String$fromCharCodes(A.ExtractCborList_elementAs(A.CborSerializable_cborTagValue(_null, _null, decode, B.NoneEncryptedCryptoRequestMethod_ubZ.get$tag(), type$.CborListValue_dynamic), 0, type$.Iterable_int), 0, _null), type$.NoneEncryptedRequestHexToBytes_dynamic);
          break;
        case 6:
          args = new A.CryptoRequestTestLarge(A.ExtractCborList_elementAs(A.CborSerializable_cborTagValue(_null, _null, decode, B.NoneEncryptedCryptoRequestMethod_w4U.get$tag(), type$.CborListValue_dynamic), 0, type$.List_int), type$.CryptoRequestTestLarge_dynamic);
          break;
        case 3:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.NoneEncryptedCryptoRequestMethod_mF3.get$tag(), type$.CborListValue_dynamic);
          t1 = type$.nullable_String;
          t2 = A.CryptoRequestHashingType_fromName(A.ExtractCborList_elementAt(values, 0, t1));
          t3 = A.ExtractCborList_elementAt(values, 1, type$.nullable_List_int);
          args = new A.NoneEncryptedRequestHashing(t2, A.ExtractCborList_elementAt(values, 2, t1), A.BytesUtils_tryToBytes(t3, true));
          break;
        default:
          throw A.wrapException(B.WalletException_invalid_request_null);
      }
      t1 = $T._eval$1("@<0>")._bind$1($A)._eval$1("NoneEncryptedCryptoRequest<1,2>");
      if (!t1._is(args))
        throw A.wrapException(A.WalletExceptionConst_invalidArgruments(A.createRuntimeType(t1).toString$0(0), A.getRuntimeTypeOfDartObject(args).toString$0(0)));
      return args;
    },
    IsolateStreamRequest_IsolateStreamRequest$deserialize(object, $T, $S) {
      var t1, t2, args, _null = null,
        decode = A.CborSerializable_decode(_null, _null, object, type$.CborTagValue_dynamic);
      switch (A.StreamIsolateMethod_fromTag(decode.tags).index) {
        case 0:
          t1 = A.MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject(A.ExtractCborList_getCborTag(A.CborSerializable_cborTagValue(_null, _null, decode, B.StreamIsolateMethod_ASw.get$tag(), type$.CborListValue_dynamic), 0));
          t2 = A._setArrayType([], type$.JSArray_DaemonBlockCompleteEntryResponse);
          args = new A.StreamRequestMoneroBlockTracking(t1, A.MoneroClient$(_null, new A.MoneroProvider(A.MoneroHTTPService$(t1, false))), t2, A.StreamController_StreamController(_null, _null, _null, false, type$.MoneroSyncBlocksRequest));
          break;
        case 1:
          A.CborSerializable_cborTagValue(_null, _null, decode, B.StreamIsolateMethod_JBn.get$tag(), type$.CborObject);
          args = new A.StreamRequestHexToBytes(A.StreamController_StreamController(_null, _null, _null, false, type$.String));
          break;
        default:
          throw A.wrapException(B.WalletException_invalid_request_null);
      }
      t1 = $T._eval$1("@<0>")._bind$1($S)._eval$1("IsolateStreamRequest<1,2>");
      if (!t1._is(args))
        throw A.wrapException(A.WalletExceptionConst_invalidArgruments(A.createRuntimeType(t1).toString$0(0), A.getRuntimeTypeOfDartObject(args).toString$0(0)));
      return args;
    },
    CryptoRequestMethod: function CryptoRequestMethod(t0, t1, t2) {
      this._tag = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    CryptoRequestMethod_fromTag_closure: function CryptoRequestMethod_fromTag_closure(t0) {
      this.tag = t0;
    },
    CryptoRequestMethod_fromTag_closure0: function CryptoRequestMethod_fromTag_closure0() {
    },
    NoneEncryptedCryptoRequestMethod: function NoneEncryptedCryptoRequestMethod(t0, t1, t2) {
      this._tag = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    NoneEncryptedCryptoRequestMethod_fromTag_closure: function NoneEncryptedCryptoRequestMethod_fromTag_closure(t0) {
      this.tag = t0;
    },
    NoneEncryptedCryptoRequestMethod_fromTag_closure0: function NoneEncryptedCryptoRequestMethod_fromTag_closure0() {
    },
    StreamIsolateMethod: function StreamIsolateMethod(t0, t1, t2) {
      this._tag = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    StreamIsolateMethod_fromTag_closure: function StreamIsolateMethod_fromTag_closure(t0) {
      this.tag = t0;
    },
    StreamIsolateMethod_fromTag_closure0: function StreamIsolateMethod_fromTag_closure0() {
    },
    WalletRequestMethod: function WalletRequestMethod(t0, t1, t2) {
      this.tag = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    WalletRequestMethod_fromTag_closure: function WalletRequestMethod_fromTag_closure(t0) {
      this.tag = t0;
    },
    WalletRequestMethod_fromTag_closure0: function WalletRequestMethod_fromTag_closure0() {
    },
    CryptoRequest: function CryptoRequest() {
    },
    WalletRequest: function WalletRequest() {
    },
    NoneEncryptedCryptoRequest: function NoneEncryptedCryptoRequest() {
    },
    IsolateStreamRequest: function IsolateStreamRequest() {
    },
    IsolateStreamRequest_getIsolateResult_closure: function IsolateStreamRequest_getIsolateResult_closure(t0, t1, t2) {
      this.$this = t0;
      this.streamId = t1;
      this.encryptedPart = t2;
    },
    CryptoRequestEncryptChacha: function CryptoRequestEncryptChacha(t0, t1, t2, t3) {
      var _ = this;
      _.message = t0;
      _.key = t1;
      _.nonceLength = t2;
      _.nonce = t3;
    },
    CryptoRequestDecryptChacha: function CryptoRequestDecryptChacha(t0, t1, t2) {
      this.message = t0;
      this.key = t1;
      this.nonce = t2;
    },
    CryptoRequestCreateMasterKey_getMasterKey(mnemonic, passphrase) {
      var passPhrase, t1, t2, entropy, t3, salt, seedBytes, entropySeedBytes, icarus, decodedMnemonic, cardanoLegacy, checksum, _null = null;
      if (!new A.Bip39MnemonicValidator(A.Bip39MnemonicDecoder$(_null)).isValid$1(mnemonic))
        throw A.wrapException(B.WalletException_invalid_mnemonic_null);
      passPhrase = passphrase == null ? "" : passphrase;
      t1 = A.Mnemonic__normalize(mnemonic);
      t2 = A.Bip39MnemonicDecoder$(_null);
      entropy = t2._entropyBytesFromBinaryStr$1(t2._decodeAndVerifyBinaryStr$1(B.JSArray_methods.join$1(t1, " ")));
      A.BytesUtils_validateListOfBytes(entropy);
      t2 = type$.int;
      t3 = A.List_List$unmodifiable(entropy, t2);
      salt = "mnemonic" + passPhrase;
      seedBytes = A.QuickCrypto_pbkdf2DeriveKey(_null, 2048, A.StringUtils_encode(B.JSArray_methods.join$1(t1, " "), B.StringEncoding_1), A.StringUtils_encode(salt, B.StringEncoding_1));
      entropySeedBytes = A.QuickCrypto_pbkdf2DeriveKey(_null, 2048, t3, A.StringUtils_encode(salt, B.StringEncoding_1));
      t3 = A.Bip39MnemonicDecoder$(_null);
      icarus = A.List_List$from(t3._entropyBytesFromBinaryStr$1(t3._decodeAndVerifyBinaryStr$1(mnemonic)), true, t2);
      t3 = new A.CardanoByronLegacySeedGenerator();
      t1 = A.Bip39MnemonicDecoder$(_null);
      decodedMnemonic = t1._entropyBytesFromBinaryStr$1(t1._decodeAndVerifyBinaryStr$1(mnemonic));
      A.BytesUtils_validateListOfBytes(decodedMnemonic);
      t3.set$__CardanoByronLegacySeedGenerator__seedBytes_F(type$.List_int._as(A.QuickCrypto_blake2b256Hash(new A.CborBytesValue(A.List_List$unmodifiable(decodedMnemonic, t2)).encode$0())));
      t3 = t3.__CardanoByronLegacySeedGenerator__seedBytes_F;
      t3 === $ && A.throwLateFieldNI("_seedBytes");
      cardanoLegacy = A.List_List$from(t3, true, t2);
      t2 = A.List_List$of(seedBytes, true, t2);
      B.JSArray_methods.addAll$1(t2, icarus);
      B.JSArray_methods.addAll$1(t2, cardanoLegacy);
      B.JSArray_methods.addAll$1(t2, new A.CodeUnits(passPhrase));
      checksum = A.SHA3256_hash(t2);
      t2 = A.Mnemonic__normalize(mnemonic);
      return A.WalletMasterKeys$_(icarus, cardanoLegacy, checksum, A.List_List$unmodifiable(B.List_empty7, type$.ImportedKeyStorage), entropySeedBytes, new A.Mnemonic(t2), seedBytes);
    },
    CryptoRequestCreateMasterKey: function CryptoRequestCreateMasterKey(t0, t1) {
      this.mnemonic = t0;
      this.passphrase = t1;
    },
    CryptoRequestCreateHDWallet: function CryptoRequestCreateHDWallet(t0, t1, t2, t3) {
      var _ = this;
      _.mnemonic = t0;
      _.passphrase = t1;
      _.password = t2;
      _.checksum = t3;
    },
    CryptoRequestDecodeBackup_CryptoRequestDecodeBackup$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.CryptoRequestMethod_CpJ.get$tag(), type$.CborListValue_dynamic),
        encoding = B.JSArray_methods.firstWhere$2$orElse(B.List_2LR, new A.CryptoRequestDecodeBackup_CryptoRequestDecodeBackup$deserialize_closure(values), new A.CryptoRequestDecodeBackup_CryptoRequestDecodeBackup$deserialize_closure0()),
        t1 = type$.String;
      return new A.CryptoRequestDecodeBackup(A.ExtractCborList_elementAt(values, 0, t1), A.ExtractCborList_elementAt(values, 1, t1), encoding);
    },
    CryptoRequestDecodeBackup: function CryptoRequestDecodeBackup(t0, t1, t2) {
      this.password = t0;
      this.backup = t1;
      this.encoding = t2;
    },
    CryptoRequestDecodeBackup_CryptoRequestDecodeBackup$deserialize_closure: function CryptoRequestDecodeBackup_CryptoRequestDecodeBackup$deserialize_closure(t0) {
      this.values = t0;
    },
    CryptoRequestDecodeBackup_CryptoRequestDecodeBackup$deserialize_closure0: function CryptoRequestDecodeBackup_CryptoRequestDecodeBackup$deserialize_closure0() {
    },
    CryptoRequestEncodeBackup_CryptoRequestEncodeBackup$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.CryptoRequestMethod_7jk.get$tag(), type$.CborListValue_dynamic),
        encoding = B.JSArray_methods.firstWhere$2$orElse(B.List_2LR, new A.CryptoRequestEncodeBackup_CryptoRequestEncodeBackup$deserialize_closure(values), new A.CryptoRequestEncodeBackup_CryptoRequestEncodeBackup$deserialize_closure0()),
        t1 = A.ExtractCborList_elementAt(values, 0, type$.String),
        t2 = A.ExtractCborList_elementAt(values, 1, type$.List_int);
      A.BytesUtils_validateListOfBytes(t2);
      return new A.CryptoRequestEncodeBackup(t1, A.List_List$unmodifiable(t2, type$.int), encoding);
    },
    CryptoRequestEncodeBackup: function CryptoRequestEncodeBackup(t0, t1, t2) {
      this.password = t0;
      this.backup = t1;
      this.encoding = t2;
    },
    CryptoRequestEncodeBackup_CryptoRequestEncodeBackup$deserialize_closure: function CryptoRequestEncodeBackup_CryptoRequestEncodeBackup$deserialize_closure(t0) {
      this.values = t0;
    },
    CryptoRequestEncodeBackup_CryptoRequestEncodeBackup$deserialize_closure0: function CryptoRequestEncodeBackup_CryptoRequestEncodeBackup$deserialize_closure0() {
    },
    CryptoRequestGenerateMasterKey_encryptedMasterKey(key, masterKey) {
      var t2, t3, t4, memoryStorageBytes, t5, t6, t7, nonce,
        t1 = masterKey.toCbor$0().encode$0(),
        r = $.$get$QuickCrypto__generateRandom().call$1(12),
        encrypt = A.ChaCha20Poly1305$(key).encrypt$2(r, t1);
      A.BytesUtils_validateListOfBytes(r);
      t1 = type$.int;
      t2 = A.List_List$unmodifiable(r, t1);
      A.BytesUtils_validateListOfBytes(encrypt);
      t3 = type$.JSArray_CborObject;
      t4 = type$.CborListValue_CborObject;
      memoryStorageBytes = new A.CborListValue(A._setArrayType([new A.CborIntValue(1), new A.CborBytesValue(t2), new A.CborBytesValue(A.List_List$unmodifiable(encrypt, t1))], t3), false, t4).encode$0();
      t2 = A.Bip32Slip10Secp256k1$fromSeed(masterKey.seed, null).__Bip32Base__pubKey_A;
      t2 === $ && A.throwLateFieldNI("_pubKey");
      t2 = A.BytesUtils_toHexString(A.Bip32FingerPrint_Bip32FingerPrint(A.RIPEMD160_hash(A.SHA256_hash(t2.pubKey.get$compressed())))._fPrint, true, null);
      t5 = masterKey.customKeys;
      t6 = A._arrayInstanceType(t5);
      t7 = t6._eval$1("MappedListIterable<1,EncryptedCustomKey>");
      t7 = A.List_List$of(new A.MappedListIterable(t5, t6._eval$1("EncryptedCustomKey(1)")._as(new A.CryptoRequestGenerateMasterKey_encryptedMasterKey_closure()), t7), true, t7._eval$1("ListIterable.E"));
      t6 = A.List_List$unmodifiable(memoryStorageBytes, t1);
      t7 = A.List_List$unmodifiable(t7, type$.EncryptedCustomKey);
      nonce = A.WorkerCryptoUtils_generateNonce(key);
      t5 = masterKey.toCbor$0().encode$0();
      encrypt = A.ChaCha20Poly1305$(key).encrypt$2(nonce, t5);
      A.BytesUtils_validateListOfBytes(encrypt);
      return new A._Record_2(new A.EncryptedMasterKey(t2, t6, t7), new A.CborListValue(A._setArrayType([new A.CborIntValue(1), new A.CborBytesValue(A.List_List$unmodifiable(encrypt, t1))], t3), false, t4).encode$0());
    },
    CryptoRequestGenerateMasterKey: function CryptoRequestGenerateMasterKey(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.walletData = t0;
      _.version = t1;
      _.key = t2;
      _.newKey = t3;
      _.keyString = t4;
      _.keyChecksum = t5;
    },
    CryptoRequestGenerateMasterKey_encryptedMasterKey_closure: function CryptoRequestGenerateMasterKey_encryptedMasterKey_closure() {
    },
    CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.CryptoRequestMethod_kiE.get$tag(), type$.CborListValue_dynamic);
      return new A.CryptoRequestGenerateBip39Mnemonic(B.JSArray_methods.firstWhere$2$orElse(B.List_cge, new A.CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure(values), new A.CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure0()), B.JSArray_methods.firstWhere$2$orElse(B.List_g3y, new A.CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure1(values), new A.CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure2()));
    },
    CryptoRequestGenerateBip39Mnemonic: function CryptoRequestGenerateBip39Mnemonic(t0, t1) {
      this.language = t0;
      this.wordNums = t1;
    },
    CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure: function CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure(t0) {
      this.values = t0;
    },
    CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure0: function CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure0() {
    },
    CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure1: function CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure1(t0) {
      this.values = t0;
    },
    CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure2: function CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure2() {
    },
    MoneroMnemonicToPrivateKeyMessage: function MoneroMnemonicToPrivateKeyMessage(t0, t1) {
      this.mnemonic = t0;
      this.coin = t1;
    },
    MoneroMenmonicGenerateMessage: function MoneroMenmonicGenerateMessage(t0, t1) {
      this.wordsNum = t0;
      this.language = t1;
    },
    CryptoRequestHashingType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_FYB, new A.CryptoRequestHashingType_fromName_closure($name), new A.CryptoRequestHashingType_fromName_closure0());
    },
    CryptoRequestHashing_generateHash(dataBytes, dataHex, type) {
      var bytes;
      if (type === B.CryptoRequestHashingType_8)
        return A.StringUtils_encode(A.UUID_fromBuffer($.$get$QuickCrypto__generateRandom().call$1(16)), B.StringEncoding_1);
      if (dataBytes == null)
        if (type === B.CryptoRequestHashingType_6) {
          dataHex.toString;
          bytes = A.StringUtils_toBytes(dataHex);
        } else {
          dataHex.toString;
          bytes = A.BytesUtils_fromHexString(dataHex);
        }
      else
        bytes = dataBytes;
      switch (type.index) {
        case 0:
          return A.MD4_hash(bytes);
        case 1:
          return A.MD5_hash(bytes);
        case 2:
          return A.SHA256_hash(bytes);
        case 4:
          return A.SHA3_hash(bytes);
        case 5:
          return A.SHA3256_hash(bytes);
        case 3:
          return A.SHA512_hash(bytes);
        case 7:
          return A.Keccack_hash(bytes, 32);
        case 6:
          return A.StringUtils_encode(A.UUID_fromBuffer(A.MD4_hash(bytes)), B.StringEncoding_1);
        default:
          throw A.wrapException(B.WalletException_data_verification_failed_null);
      }
    },
    CryptoRequestHashingType: function CryptoRequestHashingType(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    CryptoRequestHashingType_fromName_closure: function CryptoRequestHashingType_fromName_closure(t0) {
      this.name = t0;
    },
    CryptoRequestHashingType_fromName_closure0: function CryptoRequestHashingType_fromName_closure0() {
    },
    CryptoRequestHashing: function CryptoRequestHashing(t0, t1, t2) {
      this.hashingType = t0;
      this.dataHex = t1;
      this.dataBytes = t2;
    },
    CryptoRequestRandomGenerator$(existsKeys, $length, $T) {
      var t1, e, result,
        _length = existsKeys.length,
        _list = J.JSArray_JSArray$allocateGrowable(_length, type$.dynamic);
      for (t1 = type$.int, e = 0; e < _length; ++e) {
        if (!(e < existsKeys.length))
          return A.ioore(existsKeys, e);
        result = A.List_List$from(existsKeys[e], false, t1);
        result.fixed$length = Array;
        result.immutable$list = Array;
        _list[e] = result;
      }
      return new A.CryptoRequestRandomGenerator($length, A.List_List$unmodifiable(_list, type$.List_int), $T._eval$1("CryptoRequestRandomGenerator<0>"));
    },
    CryptoRequestRandomGenerator_CryptoRequestRandomGenerator$deserialize(object, $T) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.CryptoRequestMethod_EGJ.get$tag(), type$.CborListValue_dynamic),
        t1 = type$.List_int,
        existsKeys = J.map$1$1$ax(A.ExtractCborList_elementAt(values, 1, type$.List_dynamic), new A.CryptoRequestRandomGenerator_CryptoRequestRandomGenerator$deserialize_closure(), t1),
        t2 = A.ExtractCborList_elementAt(values, 0, type$.int);
      return A.CryptoRequestRandomGenerator$(A.List_List$from(existsKeys, true, t1), t2, $T);
    },
    CryptoRequestRandomGenerator_generateRandm(existsKeys, $length) {
      var r, hasEqual, _i,
        t1 = existsKeys.length;
      if (t1 === 0)
        return $.$get$QuickCrypto__generateRandom().call$1($length);
      for (; true;) {
        r = $.$get$QuickCrypto__generateRandom().call$1($length);
        _i = 0;
        while (true) {
          if (!(_i < t1)) {
            hasEqual = false;
            break;
          }
          if (A.BytesUtils_bytesEqual(r, existsKeys[_i])) {
            hasEqual = true;
            break;
          }
          ++_i;
        }
        if (!hasEqual)
          return r;
      }
    },
    CryptoRequestRandomGenerator: function CryptoRequestRandomGenerator(t0, t1, t2) {
      this.length = t0;
      this.existsKeys = t1;
      this.$ti = t2;
    },
    CryptoRequestRandomGenerator_CryptoRequestRandomGenerator$deserialize_closure: function CryptoRequestRandomGenerator_CryptoRequestRandomGenerator$deserialize_closure() {
    },
    CryptoRequestRandomGenerator_toCbor_closure: function CryptoRequestRandomGenerator_toCbor_closure() {
    },
    CryptoRequestReadMasterKey_getWalletMasterKeys(key, nonce, walletData) {
      var decrypt = A.WorkerCryptoUtils_decryptChacha(walletData, key, nonce);
      if (decrypt == null)
        throw A.wrapException(B.WalletException_incorrect_password_null);
      return A.WalletMasterKeys_WalletMasterKeys$fromCborBytesOrObject(decrypt, null);
    },
    CryptoRequestReadMasterKey: function CryptoRequestReadMasterKey(t0, t1, t2, t3) {
      var _ = this;
      _.version = t0;
      _.nonce = t1;
      _.walletData = t2;
      _.key = t3;
    },
    CryptoRequestSetupMasterKey: function CryptoRequestSetupMasterKey(t0, t1) {
      this.masterKey = t0;
      this.key = t1;
    },
    TonMnemonicToPrivateKeyMessage: function TonMnemonicToPrivateKeyMessage(t0, t1, t2, t3) {
      var _ = this;
      _.mnemonic = t0;
      _.password = t1;
      _.validateTonMnemonic = t2;
      _.coin = t3;
    },
    TonMenmonicGenerateMessage: function TonMenmonicGenerateMessage(t0, t1) {
      this.password = t0;
      this.wordsNum = t1;
    },
    CryptoRequestWalletKey: function CryptoRequestWalletKey(t0, t1) {
      this.key = t0;
      this.checksum = t1;
    },
    CryptoDeriveAddressResponse: function CryptoDeriveAddressResponse(t0, t1, t2) {
      this.accountParams = t0;
      this.publicKey = t1;
      this.$ti = t2;
    },
    WorkerMessageType_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_OsM, new A.WorkerMessageType_fromTag_closure(tag), new A.WorkerMessageType_fromTag_closure0());
    },
    WorkerMessage_deserialize(bytes) {
      var t1, cbor, _null = null,
        decode = A.CborSerializable_decode(bytes, _null, _null, type$.CborTagValue_dynamic);
      switch (A.WorkerMessageType_fromTag(decode.tags).index) {
        case 0:
          t1 = A.WorkerEncryptedMessage_WorkerEncryptedMessage$deserialize(decode);
          break;
        case 1:
          cbor = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_0_3_2_1, type$.CborListValue_dynamic);
          t1 = A.ExtractCborList_elementAt(cbor, 0, type$.List_int);
          t1 = A.WorkerNoneEncryptedMessage$(A.ExtractCborList_elementAt(cbor, 1, type$.int), t1);
          break;
        default:
          t1 = _null;
      }
      return t1;
    },
    WorkerNoneEncryptedMessage$(id, message) {
      return new A.WorkerNoneEncryptedMessage(message, B.WorkerMessageType_SsD, id, null, null);
    },
    WorkerEncryptedMessage$(id, message, nonce) {
      var t1, t2;
      A.BytesUtils_validateListOfBytes(nonce);
      t1 = type$.int;
      t2 = A.List_List$unmodifiable(nonce, t1);
      A.BytesUtils_validateListOfBytes(message);
      return new A.WorkerEncryptedMessage(t2, A.List_List$unmodifiable(message, t1), B.WorkerMessageType_Iao, id, null, null);
    },
    WorkerEncryptedMessage_WorkerEncryptedMessage$deserialize(object) {
      var cbor = A.CborSerializable_cborTagValue(null, null, object, B.List_0_1_2_3, type$.CborListValue_dynamic),
        t1 = type$.List_int,
        t2 = A.ExtractCborList_elementAt(cbor, 0, t1);
      t1 = A.ExtractCborList_elementAt(cbor, 1, t1);
      return A.WorkerEncryptedMessage$(A.ExtractCborList_elementAt(cbor, 2, type$.int), t1, t2);
    },
    WorkerMessageType: function WorkerMessageType(t0, t1, t2) {
      this.tag = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    WorkerMessageType_fromTag_closure: function WorkerMessageType_fromTag_closure(t0) {
      this.tag = t0;
    },
    WorkerMessageType_fromTag_closure0: function WorkerMessageType_fromTag_closure0() {
    },
    WorkerMessage: function WorkerMessage() {
    },
    WorkerNoneEncryptedMessage: function WorkerNoneEncryptedMessage(t0, t1, t2, t3, t4) {
      var _ = this;
      _.message = t0;
      _.type = t1;
      _.id = t2;
      _.totalPart = t3;
      _.currentPart = t4;
    },
    WorkerEncryptedMessage: function WorkerEncryptedMessage(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.nonce = t0;
      _.message = t1;
      _.type = t2;
      _.id = t3;
      _.totalPart = t4;
      _.currentPart = t5;
    },
    _WorkerEncryptedMessage_WorkerMessage_CborSerializable: function _WorkerEncryptedMessage_WorkerMessage_CborSerializable() {
    },
    _WorkerNoneEncryptedMessage_WorkerMessage_CborSerializable: function _WorkerNoneEncryptedMessage_WorkerMessage_CborSerializable() {
    },
    WorkerCborRequestMessage_WorkerCborRequestMessage$deserialize(bytes) {
      var t1 = type$.CborObject,
        values = A.CborSerializable_cborTagValue(null, null, A.CborSerializable_toTagValue(bytes, B.List_104_0_0_0, t1), null, type$.CborListValue_dynamic);
      return new A.WorkerCborRequestMessage(A.CborMessageArgs_deserialize(A.ExtractCborList_elementAs(values, 0, type$.List_int), type$.CborMessageArgs), A.ExtractCborList_elemetMybeAs(values, 1, new A.WorkerCborRequestMessage_WorkerCborRequestMessage$deserialize_closure(), type$.WorkerEncryptedMessage, t1));
    },
    WorkeBaserRequestMessage: function WorkeBaserRequestMessage() {
    },
    WorkerCborRequestMessage: function WorkerCborRequestMessage(t0, t1) {
      this.args = t0;
      this.encryptedPart = t1;
    },
    WorkerCborRequestMessage_WorkerCborRequestMessage$deserialize_closure: function WorkerCborRequestMessage_WorkerCborRequestMessage$deserialize_closure() {
    },
    _WorkeBaserRequestMessage_Object_CborSerializable: function _WorkeBaserRequestMessage_Object_CborSerializable() {
    },
    IsolateCborResponseMessage: function IsolateCborResponseMessage(t0, t1) {
      this.args = t0;
      this.id = t1;
    },
    _IsolateCborResponseMessage_Object_CborSerializable: function _IsolateCborResponseMessage_Object_CborSerializable() {
    },
    SignRequest_SignRequest$deserialize(object) {
      var values, t2, t3, t4, t5, index, digest, alg, _null = null,
        t1 = type$.CborTagValue_dynamic,
        tag = A.CborSerializable_decode(_null, _null, object, t1),
        network = A.SigningRequestNetwork_fromTag(tag.tags);
      $label0$0: {
        if (B.SigningRequestNetwork_N0T === network) {
          values = A.CborSerializable_cborTagValue(_null, _null, tag, B.List_32_100, type$.CborListValue_dynamic);
          t1 = A.ExtractCborList_elementAt(values, 1, type$.List_int);
          t2 = type$.int;
          t3 = A.ExtractCborList_elementAt(values, 2, t2);
          t4 = A.ExtractCborList_elementAt(values, 3, type$.bool);
          t5 = A.Bip32AddressIndex_Bip32AddressIndex$fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 0));
          A.BytesUtils_validateListOfBytes(t1);
          t5 = new A.BitcoinSigning(t3, t4, A.List_List$unmodifiable(t1, t2), t5, B.SigningRequestNetwork_N0T);
          t1 = t5;
          break $label0$0;
        }
        if (B.SigningRequestNetwork_qJO === network) {
          values = A.CborSerializable_cborTagValue(_null, _null, tag, B.List_32_105, type$.CborListValue_dynamic);
          index = A.AddressDerivationIndex_fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 0));
          digest = A.ExtractCborList_elementAt(values, 1, type$.List_int);
          alg = A.CosmosKeysAlgs_fromName(A.ExtractCborList_elementAs(values, 2, type$.String));
          if (!B.JSArray_methods.contains$1(B.List_s6Q, alg))
            A.throwExpression(B.WalletException_data_verification_failed_null);
          t1 = alg.coin$1(B.ChainType_1_mainnet);
          if ($.$get$Bip44Coins__coinToConf().$index(0, t1).type !== index.get$currencyCoin().get$conf().get$type())
            A.throwExpression(B.WalletException_data_verification_failed_null);
          A.BytesUtils_validateListOfBytes(digest);
          t1 = new A.CosmosSigningRequest(A.List_List$unmodifiable(digest, type$.int), alg, index, B.SigningRequestNetwork_qJO);
          break $label0$0;
        }
        if (B.SigningRequestNetwork_Had === network) {
          t1 = A.MoneroSigningRequest_MoneroSigningRequest$deserialize(tag);
          break $label0$0;
        }
        tag = A.CborSerializable_decode(_null, _null, tag, t1);
        values = A.QuickCborTag_get_getList(tag);
        index = A.AddressDerivationIndex_fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 0));
        digest = A.ExtractCborList_elementAt(values, 1, type$.List_int);
        network = A.SigningRequestNetwork_fromTag(tag.tags);
        A.BytesUtils_validateListOfBytes(digest);
        t1 = new A.GlobalSignRequest(A.List_List$unmodifiable(digest, type$.int), index, network);
        break $label0$0;
      }
      return t1;
    },
    SigningRequestNetwork_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_qpl, new A.SigningRequestNetwork_fromTag_closure(tag), new A.SigningRequestNetwork_fromTag_closure0());
    },
    MoneroSigningRequest_MoneroSigningRequest$deserialize(object) {
      var t6, t7, t8,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_32_110, type$.CborListValue_dynamic),
        t1 = A.Bip32AddressIndex_Bip32AddressIndex$fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 0)),
        t2 = type$.CborBytesValue,
        t3 = A.ExtractCborList_elementAsListOf(values, 1, t2),
        t4 = t3.$ti,
        t5 = t4._eval$1("MappedListIterable<ListBase.E,MoneroTxDestination>");
      t5 = A.List_List$of(new A.MappedListIterable(t3, t4._eval$1("MoneroTxDestination(ListBase.E)")._as(new A.MoneroSigningRequest_MoneroSigningRequest$deserialize_closure()), t5), true, t5._eval$1("ListIterable.E"));
      t4 = A.ExtractCborList_elementAs(values, 2, type$.BigInt);
      t3 = type$.MoneroTxDestination;
      t6 = A.ExtractCborList_elemetMybeAs(values, 3, new A.MoneroSigningRequest_MoneroSigningRequest$deserialize_closure0(), t3, t2);
      t2 = A.ExtractCborList_elementAsListOf(values, 4, t2);
      t7 = t2.$ti;
      t8 = t7._eval$1("MappedListIterable<ListBase.E,SpendablePayment<MoneroLockedPayment>>");
      t8 = A.List_List$of(new A.MappedListIterable(t2, t7._eval$1("SpendablePayment<MoneroLockedPayment>(ListBase.E)")._as(new A.MoneroSigningRequest_MoneroSigningRequest$deserialize_closure1()), t8), true, t8._eval$1("ListIterable.E"));
      return new A.MoneroSigningRequest(A.List_List$unmodifiable(t5, t3), t4, t6, A.List_List$unmodifiable(new A.CastList(t8, A._arrayInstanceType(t8)._eval$1("CastList<1,SpendablePayment<MoneroLockedPayment>>")), type$.SpendablePayment_MoneroLockedPayment), t1, B.SigningRequestNetwork_Had);
    },
    SignRequest: function SignRequest() {
    },
    SigningRequestNetwork: function SigningRequestNetwork(t0, t1, t2) {
      this.tag = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    SigningRequestNetwork_fromTag_closure: function SigningRequestNetwork_fromTag_closure(t0) {
      this.tag = t0;
    },
    SigningRequestNetwork_fromTag_closure0: function SigningRequestNetwork_fromTag_closure0() {
    },
    BitcoinSigning: function BitcoinSigning(t0, t1, t2, t3, t4) {
      var _ = this;
      _.sighash = t0;
      _.useTaproot = t1;
      _.digest = t2;
      _.index = t3;
      _.network = t4;
    },
    GlobalSignRequest: function GlobalSignRequest(t0, t1, t2) {
      this.digest = t0;
      this.index = t1;
      this.network = t2;
    },
    CosmosSigningRequest: function CosmosSigningRequest(t0, t1, t2, t3) {
      var _ = this;
      _.digest = t0;
      _.alg = t1;
      _.index = t2;
      _.network = t3;
    },
    MoneroSigningRequest: function MoneroSigningRequest(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.destinations = t0;
      _.fee = t1;
      _.change = t2;
      _.utxos = t3;
      _.index = t4;
      _.network = t5;
    },
    MoneroSigningRequest_MoneroSigningRequest$deserialize_closure: function MoneroSigningRequest_MoneroSigningRequest$deserialize_closure() {
    },
    MoneroSigningRequest_MoneroSigningRequest$deserialize_closure0: function MoneroSigningRequest_MoneroSigningRequest$deserialize_closure0() {
    },
    MoneroSigningRequest_MoneroSigningRequest$deserialize_closure1: function MoneroSigningRequest_MoneroSigningRequest$deserialize_closure1() {
    },
    MoneroSigningRequest_getAccountsIndexes_closure: function MoneroSigningRequest_getAccountsIndexes_closure() {
    },
    MoneroSigningRequest_toCbor_closure: function MoneroSigningRequest_toCbor_closure() {
    },
    MoneroSigningRequest_toCbor_closure0: function MoneroSigningRequest_toCbor_closure0() {
    },
    _SignRequest_Object_CborSerializable: function _SignRequest_Object_CborSerializable() {
    },
    GlobalSignResponse: function GlobalSignResponse(t0, t1, t2) {
      this.signature = t0;
      this.index = t1;
      this.signerPubKey = t2;
    },
    _GlobalSignResponse_Object_CborSerializable: function _GlobalSignResponse_Object_CborSerializable() {
    },
    NoneEncryptedRequestHashing_generateHash(dataBytes, dataHex, type) {
      var bytes;
      if (type === B.CryptoRequestHashingType_8)
        return A.StringUtils_encode(A.UUID_fromBuffer($.$get$QuickCrypto__generateRandom().call$1(16)), B.StringEncoding_1);
      if (dataBytes == null)
        if (type === B.CryptoRequestHashingType_6) {
          dataHex.toString;
          bytes = A.StringUtils_toBytes(dataHex);
        } else {
          dataHex.toString;
          bytes = A.BytesUtils_fromHexString(dataHex);
        }
      else
        bytes = dataBytes;
      switch (type.index) {
        case 0:
          return A.MD4_hash(bytes);
        case 1:
          return A.MD5_hash(bytes);
        case 2:
          return A.SHA256_hash(bytes);
        case 4:
          return A.SHA3_hash(bytes);
        case 5:
          return A.SHA3256_hash(bytes);
        case 3:
          return A.SHA512_hash(bytes);
        case 7:
          return A.Keccack_hash(bytes, 32);
        case 6:
          return A.StringUtils_encode(A.UUID_fromBuffer(A.MD4_hash(bytes)), B.StringEncoding_1);
        default:
          throw A.wrapException(B.WalletException_data_verification_failed_null);
      }
    },
    NoneEncryptedRequestHashing: function NoneEncryptedRequestHashing(t0, t1, t2) {
      this.hashingType = t0;
      this.dataHex = t1;
      this.dataBytes = t2;
    },
    NoneEncryptedRequestHexToBytes: function NoneEncryptedRequestHexToBytes(t0, t1) {
      this.hex = t0;
      this.$ti = t1;
    },
    NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize(object) {
      var t5, t6, t7,
        values = A.CborSerializable_cborTagValue(null, null, object, B.NoneEncryptedCryptoRequestMethod_UAO.get$tag(), type$.CborListValue_dynamic),
        t1 = type$.CborBytesValue,
        t2 = A.ExtractCborList_elementAsListOf(values, 0, t1),
        t3 = t2.$ti,
        t4 = t3._eval$1("MappedListIterable<ListBase.E,MoneroTxDestination>");
      t4 = A.List_List$of(new A.MappedListIterable(t2, t3._eval$1("MoneroTxDestination(ListBase.E)")._as(new A.NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize_closure()), t4), true, t4._eval$1("ListIterable.E"));
      t3 = A.ExtractCborList_elementAs(values, 1, type$.BigInt);
      t2 = type$.MoneroTxDestination;
      t5 = A.ExtractCborList_elemetMybeAs(values, 2, new A.NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize_closure0(), t2, t1);
      t1 = A.ExtractCborList_elementAsListOf(values, 3, t1);
      t6 = t1.$ti;
      t7 = t6._eval$1("MappedListIterable<ListBase.E,MoneroPayment<MoneroOutput>>");
      t7 = A.List_List$of(new A.MappedListIterable(t1, t6._eval$1("MoneroPayment<MoneroOutput>(ListBase.E)")._as(new A.NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize_closure1()), t7), true, t7._eval$1("ListIterable.E"));
      return new A.NoneEncryptedRequestFakeMoneroTx(A.List_List$unmodifiable(t4, t2), t3, t5, A.List_List$unmodifiable(new A.CastList(t7, A._arrayInstanceType(t7)._eval$1("CastList<1,MoneroUnLockedPayment<MoneroUnlockedOutput>>")), type$.MoneroUnLockedPayment_MoneroUnlockedOutput));
    },
    NoneEncryptedRequestFakeMoneroTx: function NoneEncryptedRequestFakeMoneroTx(t0, t1, t2, t3) {
      var _ = this;
      _.destinations = t0;
      _.fee = t1;
      _.change = t2;
      _.fakePayments = t3;
    },
    NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize_closure: function NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize_closure() {
    },
    NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize_closure0: function NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize_closure0() {
    },
    NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize_closure1: function NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize_closure1() {
    },
    NoneEncryptedRequestFakeMoneroTx_toCbor_closure: function NoneEncryptedRequestFakeMoneroTx_toCbor_closure() {
    },
    NoneEncryptedRequestFakeMoneroTx_toCbor_closure0: function NoneEncryptedRequestFakeMoneroTx_toCbor_closure0() {
    },
    NoneEncryptedRequestGenerateRingOutput_NoneEncryptedRequestGenerateRingOutput$deserialize(object) {
      var t5,
        values = A.CborSerializable_cborTagValue(null, null, object, B.NoneEncryptedCryptoRequestMethod_J7U.get$tag(), type$.CborListValue_dynamic),
        t1 = A.ExtractCborList_elementAs(values, 0, type$.List_int),
        t2 = A.ExtractCborList_elementAsListOf(values, 1, type$.CborBytesValue),
        t3 = t2.$ti,
        t4 = t3._eval$1("MappedListIterable<ListBase.E,MoneroPayment<MoneroOutput>>");
      t4 = A.List_List$of(new A.MappedListIterable(t2, t3._eval$1("MoneroPayment<MoneroOutput>(ListBase.E)")._as(new A.NoneEncryptedRequestGenerateRingOutput_NoneEncryptedRequestGenerateRingOutput$deserialize_closure()), t4), true, t4._eval$1("ListIterable.E"));
      t3 = type$.int;
      t2 = A.ExtractCborList_elementAs(values, 2, t3);
      t5 = A.ExtractCborList_elementAs(values, 3, type$.BigInt);
      A.BytesUtils_validateListOfBytes(t1);
      return new A.NoneEncryptedRequestGenerateRingOutput(A.List_List$unmodifiable(t1, t3), A.List_List$unmodifiable(new A.CastList(t4, A._arrayInstanceType(t4)._eval$1("CastList<1,MoneroPayment<MoneroOutput>>")), type$.MoneroPayment_MoneroOutput), t2, t5);
    },
    NoneEncryptedRequestGenerateRingOutput: function NoneEncryptedRequestGenerateRingOutput(t0, t1, t2, t3) {
      var _ = this;
      _.rctOffsetData = t0;
      _.payments = t1;
      _.fakeOutsLength = t2;
      _.maxGlobalIndex = t3;
    },
    NoneEncryptedRequestGenerateRingOutput_NoneEncryptedRequestGenerateRingOutput$deserialize_closure: function NoneEncryptedRequestGenerateRingOutput_NoneEncryptedRequestGenerateRingOutput$deserialize_closure() {
    },
    NoneEncryptedRequestGenerateRingOutput_result_addOuts: function NoneEncryptedRequestGenerateRingOutput_result_addOuts(t0, t1) {
      this._box_0 = t0;
      this.outKeysRequestOrder = t1;
    },
    NoneEncryptedRequestGenerateRingOutput_result_closure: function NoneEncryptedRequestGenerateRingOutput_result_closure() {
    },
    NoneEncryptedRequestGenerateRingOutput_toCbor_closure: function NoneEncryptedRequestGenerateRingOutput_toCbor_closure() {
    },
    NoneEncryptedRequestMoneroGenerateTxProof: function NoneEncryptedRequestMoneroGenerateTxProof(t0, t1, t2) {
      this.txId = t0;
      this.provider = t1;
      this.message = t2;
    },
    NoneEncryptedRequestMoneroVerifyTxProof: function NoneEncryptedRequestMoneroVerifyTxProof(t0, t1, t2, t3, t4) {
      var _ = this;
      _.txId = t0;
      _.provider = t1;
      _.message = t2;
      _.address = t3;
      _.signature = t4;
    },
    CryptoRequestTestLarge: function CryptoRequestTestLarge(t0, t1) {
      this.data = t0;
      this.$ti = t1;
    },
    StreamRequestMoneroBlockTracking: function StreamRequestMoneroBlockTracking(t0, t1, t2, t3) {
      var _ = this;
      _.provider = t0;
      _.client = t1;
      _.blocks = t2;
      _._streamController = t3;
      _._closed = false;
    },
    StreamRequestMoneroBlockTracking_getBlockInfo_closure: function StreamRequestMoneroBlockTracking_getBlockInfo_closure() {
    },
    StreamRequestMoneroBlockTracking_proccessBlock_closure: function StreamRequestMoneroBlockTracking_proccessBlock_closure() {
    },
    StreamRequestMoneroBlockTracking__fetchBlocks_closure: function StreamRequestMoneroBlockTracking__fetchBlocks_closure(t0, t1) {
      this.$this = t0;
      this.request = t1;
    },
    StreamRequestHexToBytes: function StreamRequestHexToBytes(t0) {
      this._streamController = t0;
      this._closed = false;
    },
    WalletRequestDeriveAddress__deriveCardanoAddress(params, wallet, NETWORKADDRESS) {
      var t4, bip, t5, stake, addrDetails, t6, t7, t8, _null = null,
        t1 = params.coin,
        byronLegacy = t1.get$proposal() === B.C_CustomProposal,
        t2 = params.deriveIndex,
        t3 = type$.AddressDerivationIndex;
      A.checkTypeBound(t3, t3, "T", "cast");
      t3 = byronLegacy ? B.Bip44Levels_0_Master : B.Bip44Levels_5_Address;
      t4 = type$.JSArray_AccessCryptoPrivateKeyRequest;
      bip = B.JSArray_methods.get$first(wallet.readPublicKeys$1(A._setArrayType([new A.AccessCryptoPrivateKeyRequest(t2, t3.value)], t4)));
      t3 = params.addressType;
      switch (t3) {
        case B.ADAAddressType_0_Base:
          t5 = params.rewardKeyIndex;
          t5.toString;
          stake = B.JSArray_methods.get$first(wallet.readPublicKeys$1(A._setArrayType([new A.AccessCryptoPrivateKeyRequest(t5, 5)], t4)));
          t4 = bip.keyBytes$0();
          t5 = stake.keyBytes$0();
          addrDetails = A.CardanoAddrDetails_CardanoAddrDetails$shelley(t3, t4, t2.get$seedGeneration(), t5);
          break;
        case B.ADAAddressType_6_Enterprise:
        case B.ADAAddressType_14_Reward:
          addrDetails = A.CardanoAddrDetails_CardanoAddrDetails$shelley(t3, bip.keyBytes$0(), t2.get$seedGeneration(), _null);
          break;
        case B.ADAAddressType_8_Byron:
          if (byronLegacy) {
            type$.AdaLegacyPublicKeyData._as(bip);
            t4 = bip.keyBytes$0();
            t5 = A.BytesUtils_fromHexString(bip.chainCode);
            t6 = t2.get$seedGeneration();
            t7 = params.customHdPathKey;
            if (t7 == null)
              t7 = A.BytesUtils_fromHexString(bip.hdPathKey);
            t8 = params.customHdPath;
            addrDetails = A.CardanoAddrDetails_CardanoAddrDetails$byron(t5, t8 == null ? t2.get$hdPath() : t8, t7, t4, t6);
            break;
          }
          t4 = bip.keyBytes$0();
          t5 = bip.chainCodeBytes$0();
          t5.toString;
          addrDetails = A.CardanoAddrDetails_CardanoAddrDetails$byron(t5, _null, _null, t4, t2.get$seedGeneration());
          break;
        default:
          throw A.wrapException(A.UnimplementedError$(_null));
      }
      return new A.CryptoDeriveAddressResponse(NETWORKADDRESS._eval$1("NewAccountParams<0>")._as(new A.CardanoNewAddressParams(t3, t2, params.rewardKeyIndex, addrDetails, _null, A.BytesUtils_tryToBytes(_null, true), t1)), bip, NETWORKADDRESS._eval$1("CryptoDeriveAddressResponse<0>"));
    },
    WalletRequestDeriveAddress_deriveAddress(addressParams, wallet, NETWORKADDRESS) {
      var t1, t2, t3, t4, t5, t6;
      switch (addressParams.get$type().index) {
        case 4:
          return A.WalletRequestDeriveAddress__deriveCardanoAddress(type$.CardanoNewAddressParams._as(addressParams), wallet, NETWORKADDRESS);
        case 16:
          type$.MoneroNewAddressParams._as(addressParams);
          t1 = addressParams.deriveIndex;
          A.print("\x1b[33m" + t1.get$currencyCoin().get$coinName() + "\x1b[0m");
          t2 = B.JSArray_methods.get$first(wallet.readPublicKeys$1(A._setArrayType([new A.AccessCryptoPrivateKeyRequest(t1, 5)], type$.JSArray_AccessCryptoPrivateKeyRequest)));
          t3 = type$.MoneroPublicKeyData;
          A.checkTypeBound(t3, type$.CryptoPublicKeyData, "T", "cast");
          if (!(t2 instanceof A.MoneroPublicKeyData))
            A.throwExpression(A.WalletException$invalidArgruments(A._setArrayType([A.createRuntimeType(t3).toString$0(0), A.getRuntimeTypeOfDartObject(t2).toString$0(0)], type$.JSArray_String)));
          t3._as(t2);
          t3 = addressParams.network;
          t4 = A.MoneroViewPrimaryAccountDetails_MoneroViewPrimaryAccountDetails(t3, t2.spendPublicKey, t2.viewPrivateKey);
          t5 = addressParams.major;
          t6 = addressParams.minor;
          return new A.CryptoDeriveAddressResponse(NETWORKADDRESS._eval$1("NewAccountParams<0>")._as(new A.MoneroNewAddressParams(t1, addressParams.coin, t6, t5, new A.MoneroViewAccountDetails(t4, new A.MoneroAccountIndex(t5, t6)), t3)), t2, NETWORKADDRESS._eval$1("CryptoDeriveAddressResponse<0>"));
        default:
          return new A.CryptoDeriveAddressResponse(addressParams, B.JSArray_methods.get$first(wallet.readPublicKeys$1(A._setArrayType([new A.AccessCryptoPrivateKeyRequest(addressParams.get$deriveIndex(), 5)], type$.JSArray_AccessCryptoPrivateKeyRequest))), NETWORKADDRESS._eval$1("CryptoDeriveAddressResponse<0>"));
      }
    },
    WalletRequestDeriveAddress: function WalletRequestDeriveAddress(t0, t1) {
      this.addressParams = t0;
      this.$ti = t1;
    },
    WalletRequestReadImportedKey: function WalletRequestReadImportedKey(t0) {
      this.keyId = t0;
    },
    WalletRequestReadPrivateKeys: function WalletRequestReadPrivateKeys(t0) {
      this.request = t0;
    },
    WalletRequestReadPublicKeys: function WalletRequestReadPublicKeys(t0) {
      this.request = t0;
    },
    WalletRequestMoneroOutputUnlocker_WalletRequestMoneroOutputUnlocker$deserialize(object) {
      var t1 = A.ExtractCborList_elementAsListOf(A.CborSerializable_cborTagValue(null, null, object, B.List_111_31, type$.CborListValue_dynamic), 0, type$.CborTagValue_dynamic),
        t2 = t1.$ti,
        t3 = t2._eval$1("MappedListIterable<ListBase.E,MoneroProcessTxIdsRequest>");
      return new A.WalletRequestMoneroOutputUnlocker(A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("MoneroProcessTxIdsRequest(ListBase.E)")._as(new A.WalletRequestMoneroOutputUnlocker_WalletRequestMoneroOutputUnlocker$deserialize_closure()), t3), true, t3._eval$1("ListIterable.E")), type$.MoneroProcessTxIdsRequest));
    },
    WalletRequestMoneroOutputUnlocker: function WalletRequestMoneroOutputUnlocker(t0) {
      this.requests = t0;
    },
    WalletRequestMoneroOutputUnlocker_WalletRequestMoneroOutputUnlocker$deserialize_closure: function WalletRequestMoneroOutputUnlocker_WalletRequestMoneroOutputUnlocker$deserialize_closure() {
    },
    WalletRequestMoneroOutputUnlocker_toCbor_closure: function WalletRequestMoneroOutputUnlocker_toCbor_closure() {
    },
    WalletRequestMoneroOutputUnlocker_result_closure: function WalletRequestMoneroOutputUnlocker_result_closure() {
    },
    WalletRequestMoneroOutputUnlocker_result_closure0: function WalletRequestMoneroOutputUnlocker_result_closure0(t0, t1) {
      this.$this = t0;
      this.keys = t1;
    },
    WalletRequestSignMessage_sign(index, message, network, wallet) {
      var signingKey, t1;
      switch (network) {
        case B.NetworkType_List_80_0_3:
          signingKey = A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(B.JSArray_methods.get$first(wallet.readKeys$1(A._setArrayType([new A.AccessCryptoPrivateKeyRequest(index, 5)], type$.JSArray_AccessCryptoPrivateKeyRequest))).privateKeyBytes$0(), $.$get$ETHSignerConst_secp256());
          type$.List_int._as(message);
          t1 = B.JSInt_methods.toString$0(message.length);
          t1 = A.List_List$of(A.StringUtils_encode("\x19Ethereum Signed Message:\n" + t1, B.StringEncoding_0), true, type$.int);
          B.JSArray_methods.addAll$1(t1, message);
          return new A.ETHSigner(new A.EcdsaSigningKey(signingKey, signingKey.publicKey.generator))._evm_signer$_signEcdsa$1(t1).toBytes$1(true);
        case B.NetworkType_List_80_0_4:
          signingKey = A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(B.JSArray_methods.get$first(wallet.readKeys$1(A._setArrayType([new A.AccessCryptoPrivateKeyRequest(index, 5)], type$.JSArray_AccessCryptoPrivateKeyRequest))).privateKeyBytes$0(), $.$get$ETHSignerConst_secp256());
          type$.List_int._as(message);
          t1 = B.JSInt_methods.toString$0(message.length);
          t1 = A.List_List$of(A.StringUtils_encode("\x19TRON Signed Message:\n" + t1, B.StringEncoding_0), true, type$.int);
          B.JSArray_methods.addAll$1(t1, message);
          return new A.TronSigner(new A.EcdsaSigningKey(signingKey, signingKey.publicKey.generator))._signEcdsa$2$hashMessage(A.Keccack_hash(t1, 32), false);
        default:
          throw A.wrapException(B.WalletException_unsuported_feature_null);
      }
    },
    WalletRequestSignMessage: function WalletRequestSignMessage(t0, t1, t2, t3) {
      var _ = this;
      _.message = t0;
      _.index = t1;
      _.payloadLength = t2;
      _.network = t3;
    },
    WalletRequestReadMnemonic: function WalletRequestReadMnemonic() {
    },
    WalletRequestSign_moneroSigning(key, request) {
      var indexes, moneroKeys, t2, t3, spendablePayment, tx, t4, t5, t6, t7, t8, _null = null,
        t1 = type$.MoneroPrivateKeyData;
      A.checkTypeBound(t1, type$.CryptoPrivateKeyData, "T", "cast");
      if (!(key instanceof A.MoneroPrivateKeyData))
        A.throwExpression(A.WalletException$invalidArgruments(A._setArrayType([A.createRuntimeType(t1).toString$0(0), A.getRuntimeTypeOfDartObject(key).toString$0(0)], type$.JSArray_String)));
      t1._as(key);
      indexes = request.getAccountsIndexes$0();
      moneroKeys = A.MoneroAccountKeys_MoneroAccountKeys(A.MoneroAccount_MoneroAccount$_(B.MoneroCoins_moneroMainnet, key.spendPrivateKey.privateKey.key, _null), indexes, B.MoneroNetwork_A9U);
      t1 = request.utxos;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>>");
      spendablePayment = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>(1)")._as(new A.WalletRequestSign_moneroSigning_closure(moneroKeys)), t3), true, t3._eval$1("ListIterable.E"));
      t3 = Date.now();
      A.print("\x1b[33m" + ("payments " + A.S(spendablePayment)) + "\x1b[0m");
      tx = A.MoneroRctTxBuilder_MoneroRctTxBuilder(moneroKeys, request.change, request.destinations, false, request.fee, spendablePayment);
      A.print("\x1b[33m" + ("done " + Math.abs(B.JSInt_methods._tdivFast$1(new A.DateTime(t3, 0, false).difference$1(new A.DateTime(Date.now(), 0, false))._duration, 1000))) + "\x1b[0m");
      t3 = Date.now();
      A.MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct(A.MoneroSerialization_deserialize(tx.serialize$0(), A.MoneroRctTxBuilder_layout(_null, _null)));
      t2 = A.List_List$of(tx.destinations, true, type$.MoneroTxDestination);
      A.print("\x1b[33mgenerate proof\x1b[0m");
      t1 = tx.transaction;
      t4 = A.QuickCryptoValidator_asValidHexBytes(t1.getTxHash$0(), 32);
      t5 = A.List_List$unmodifiable(tx.destinationKeys.allTxKeys, type$.MoneroPrivateKey);
      t6 = A.List_List$unmodifiable(indexes, type$.MoneroAccountIndex);
      t7 = A._arrayInstanceType(t2);
      t8 = t7._eval$1("MappedListIterable<1,MoneroTxDestinationWithProof>");
      t8 = A.List_List$of(new A.MappedListIterable(t2, t7._eval$1("MoneroTxDestinationWithProof(1)")._as(new A.WalletRequestSign_moneroSigning_closure0(tx)), t8), true, t8._eval$1("ListIterable.E"));
      t1 = A.BytesUtils_toHexString(t1.serialize$0(), true, _null);
      t8 = A.List_List$unmodifiable(t8, type$.MoneroTxDestinationWithProof);
      t1 = A.QuickCryptoValidator_asValidHexBytes(t1, _null);
      A.print("\x1b[33m" + ("proof done " + Math.abs(B.JSInt_methods._tdivFast$1(new A.DateTime(t3, 0, false).difference$1(new A.DateTime(Date.now(), 0, false))._duration, 1000))) + "\x1b[0m");
      t1 = new A.MoneroSigningTxResponse(new A.MoneroSignedTxData(t4, t5, t6), t8, t1).toCbor$0().encode$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.GlobalSignResponse(A.List_List$unmodifiable(t1, type$.int), request.index, key.publicKey);
    },
    WalletRequestSign_globalSigning(key, request) {
      var keyBytes, digest, index, bitcoinRequest, t1, t2, privateKey, t3, t, t4, t5, negatedKey, toBigInt, byteKey, aux, d0, $P, d, t6, t7, k0, $R, k, eKey, sig, signature, signingKey;
      A.print("\x1b[33m" + ("key " + key.get$publicKey().get$comprossed()) + "\x1b[0m");
      keyBytes = key.privateKeyBytes$0();
      digest = request.digest;
      index = request.index;
      switch (request.network.index) {
        case 0:
          bitcoinRequest = request.cast$1$0(0, type$.BitcoinSigning);
          t1 = key.privateKeyBytes$0();
          t2 = $.$get$Curves_generatorSecp256k1();
          privateKey = A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(t1, t2);
          t1 = privateKey.publicKey;
          if (bitcoinRequest.useTaproot) {
            t3 = [];
            type$.List_int._as(digest);
            if (digest.length !== 32)
              A.throwExpression(B.ArgumentException_8sg);
            t = A.P2TRUtils_calculateTweek(t1.point, t3);
            t4 = privateKey.toBytes$0();
            t5 = A.BigintUtils_fromBytes(t, B.C_Endian, false);
            negatedKey = A.BigintUtils_fromBytes(t4, B.C_Endian, false);
            toBigInt = A.BigintUtils_fromBytes(B.JSArray_methods.sublist$1(t2.$mul(0, negatedKey).toBytes$1(B.EncodeType_3), 33), B.C_Endian, false);
            t4 = (!toBigInt.get$isEven(0) ? t2.order.$sub(0, negatedKey) : negatedKey).$add(0, t5);
            t5 = t2.order;
            t5.toString;
            byteKey = A.BigintUtils_toBytes(t4.$mod(0, t5), A.BigintUtils_orderLen(t2.curve.p), B.C_Endian);
            t4 = type$.int;
            t5 = A.List_List$of(digest, true, t4);
            B.JSArray_methods.addAll$1(t5, byteKey);
            aux = A.SHA256_hash(t5);
            d0 = A.BigintUtils_fromBytes(byteKey, B.C_Endian, false);
            t5 = $.$get$_BigIntImpl_one();
            if (!(t5.compareTo$1(0, d0) <= 0 && d0.compareTo$1(0, t2.order.$sub(0, t5)) <= 0))
              A.throwExpression(B.ArgumentException_4i0);
            $P = t2.$mul(0, d0);
            d = !$P.get$y().get$isEven(0) ? t2.order.$sub(0, d0) : d0;
            t5 = t2.curve.p;
            t6 = A.List_List$of(A.BytesUtils_xor(A.BigintUtils_toBytes(d, A.BigintUtils_orderLen(t5), B.C_Endian), A.P2TRUtils_taggedHash("BIP0340/aux", aux)), true, t4);
            B.JSArray_methods.addAll$1(t6, A.BigintUtils_toBytes($P.get$x(), A.BigintUtils_orderLen(t5), B.C_Endian));
            B.JSArray_methods.addAll$1(t6, digest);
            t6 = A.BigintUtils_fromBytes(A.P2TRUtils_taggedHash("BIP0340/nonce", t6), B.C_Endian, false);
            t7 = t2.order;
            t7.toString;
            k0 = t6.$mod(0, t7);
            t6 = k0.compareTo$1(0, $.$get$_BigIntImpl_zero());
            if (t6 === 0)
              A.throwExpression(B.MessageException_1Xk);
            $R = t2.$mul(0, k0);
            k = !$R.get$y().get$isEven(0) ? t7.$sub(0, k0) : k0;
            t2 = type$.dynamic;
            t6 = A.List_List$of(A.BigintUtils_toBytes($R.get$x(), A.BigintUtils_orderLen(t5), B.C_Endian), true, t2);
            B.JSArray_methods.addAll$1(t6, A.BigintUtils_toBytes($P.get$x(), A.BigintUtils_orderLen(t5), B.C_Endian));
            B.JSArray_methods.addAll$1(t6, digest);
            eKey = k.$add(0, A.BigintUtils_fromBytes(A.P2TRUtils_taggedHash("BIP0340/challenge", A.List_List$from(t6, true, t4)), B.C_Endian, false).$mod(0, t7).$mul(0, d)).$mod(0, t7);
            t2 = A.List_List$of(A.BigintUtils_toBytes($R.get$x(), A.BigintUtils_orderLen(t5), B.C_Endian), true, t2);
            B.JSArray_methods.addAll$1(t2, A.BigintUtils_toBytes(eKey, A.BigintUtils_orderLen(t5), B.C_Endian));
            sig = A.List_List$from(t2, true, t4);
            if (!new A.BitcoinVerifier(new A.ECDSAVerifyKey(t1)).verifySchnorr$4$isTweak$tapleafScripts(digest, sig, true, t3))
              A.throwExpression(B.MessageException_61x);
            t1 = bitcoinRequest.sighash;
            if (t1 !== 0) {
              t2 = A.List_List$of(sig, true, t4);
              t2.push(t1);
              sig = t2;
            }
            signature = sig;
          } else {
            t1 = A.List_List$of(new A.BitcoinSigner(new A.EcdsaSigningKey(privateKey, t1.generator)).signBcHTransaction$1(digest), true, type$.int);
            t1.push(bitcoinRequest.sighash);
            signature = t1;
          }
          t1 = key.get$publicKey();
          A.BytesUtils_validateListOfBytes(signature);
          return new A.GlobalSignResponse(A.List_List$unmodifiable(signature, type$.int), index, t1);
        case 7:
          signingKey = A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(keyBytes, $.$get$ETHSignerConst_secp256());
          signature = new A.TronSigner(new A.EcdsaSigningKey(signingKey, signingKey.publicKey.generator))._signEcdsa$2$hashMessage(type$.List_int._as(digest), true);
          break;
        case 2:
          signature = A.XrpSigner_XrpSigner$fromKeyBytes(keyBytes, index.get$currencyCoin().get$conf().get$type()).sign$1(0, digest);
          break;
        case 1:
          signingKey = A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(keyBytes, $.$get$ETHSignerConst_secp256());
          signature = new A.ETHSigner(new A.EcdsaSigningKey(signingKey, signingKey.publicKey.generator))._evm_signer$_signEcdsa$2$hashMessage(type$.List_int._as(digest), true).toBytes$0();
          break;
        case 9:
        case 4:
        case 6:
          signature = A.SolanaSigner_SolanaSigner$fromKeyBytes(keyBytes)._signEdward$1(type$.List_int._as(digest));
          break;
        case 3:
          signature = A.CardanoSigner_CardanoSigner$fromKeyBytes(keyBytes)._cardano_signer$_signEdward$1(type$.List_int._as(digest));
          break;
        case 8:
          t1 = A.BaseSubstrateSigner_BaseSubstrateSigner$fromBytes(keyBytes, key.get$coin().get$conf().get$type());
          type$.List_int._as(digest);
          A.BytesUtils_validateBytes(digest, null);
          signature = t1.sign$1(0, digest);
          break;
        default:
          throw A.wrapException(B.WalletException_data_verification_failed_null);
      }
      t1 = key.get$publicKey();
      A.BytesUtils_validateListOfBytes(signature);
      return new A.GlobalSignResponse(A.List_List$unmodifiable(signature, type$.int), index, t1);
    },
    WalletRequestSign: function WalletRequestSign(t0) {
      this.request = t0;
    },
    WalletRequestSign_moneroSigning_closure: function WalletRequestSign_moneroSigning_closure(t0) {
      this.moneroKeys = t0;
    },
    WalletRequestSign_moneroSigning_closure0: function WalletRequestSign_moneroSigning_closure0(t0) {
      this.tx = t0;
    },
    WalletRequestEthereumTypedDataSign: function WalletRequestEthereumTypedDataSign(t0, t1) {
      this.message = t0;
      this.index = t1;
    },
    WalletRequestImportNewKey: function WalletRequestImportNewKey(t0) {
      this.newKey = t0;
    },
    WalletRequestBackupWallet: function WalletRequestBackupWallet(t0) {
      this.key = t0;
    },
    WalletRequestRemoveKey: function WalletRequestRemoveKey(t0) {
      this.keyId = t0;
    },
    BlockchainUtils__toSecretKeyBytes(keypair, type) {
      if (keypair.length !== 64)
        return keypair;
      switch (type) {
        case B.EllipticCurveTypes_ed25519:
        case B.EllipticCurveTypes_ed25519Blake2b:
          return B.JSArray_methods.sublist$2(keypair, 0, 32);
        default:
          return keypair;
      }
    },
    BlockchainUtils_privateKeyToKeypairBytes(coin, privateKey) {
      var ripplePrivateKey, algorithm, t1, exception;
      try {
        algorithm = coin.get$conf().get$type() === B.EllipticCurveTypes_ed25519 ? B.XRPKeyAlgorithm_EllipticCurveTypes_ed25519 : B.XRPKeyAlgorithm_EllipticCurveTypes_secp256k1;
        ripplePrivateKey = new A.XRPPrivateKey(A.XRPPrivateKey__toPrivateKey(privateKey, algorithm));
        t1 = ripplePrivateKey._xrpl_private_key$_privateKey.get$raw();
        return t1;
      } catch (exception) {
        throw A.wrapException(B.WalletException_private_key_invalid_null);
      }
    },
    BlockchainUtils__validatePrivateKey(coin, keyBytes) {
      switch (coin) {
        case B.Bip44Coins_ripple:
        case B.Bip44Coins_rippleED25519:
        case B.Bip44Coins_rippleTestnet:
        case B.Bip44Coins_rippleTestnetED25519:
          keyBytes = A.BlockchainUtils_privateKeyToKeypairBytes(coin, keyBytes);
          break;
        case B.Bip44Coins_moneroEd25519Slip:
          return A.MoneroPrivateKey_MoneroPrivateKey$fromBytes(keyBytes);
        default:
          break;
      }
      return A.IPrivateKey_IPrivateKey$fromBytes(keyBytes, coin.get$conf().get$type());
    },
    BlockchainUtils_privteKeyToBip32(coin, privateKey) {
      var exception;
      try {
        coin.get$conf();
        throw A.wrapException(B.WalletException_invalid_coin_null);
      } catch (exception) {
        throw A.wrapException(B.WalletException_private_key_invalid_null);
      }
    },
    BlockchainUtils_extendedKeyToBip32Key(coin, extendedKey) {
      var conf, t1, exception;
      try {
        conf = coin.get$conf();
        if (!coin.get$conf().get$hasExtendedKeys())
          throw A.wrapException(B.WalletException_extended_key_invalid_null);
        if (coin.get$proposal() === B.C_CustomProposal) {
          t1 = new A.CardanoByronLegacyBip32();
          t1.Bip32Base$fromExtendedKey$2(extendedKey, conf.get$keyNetVer());
          return t1;
        }
        switch (conf.get$type()) {
          case B.EllipticCurveTypes_secp256k1:
            t1 = new A.Bip32Slip10Secp256k1();
            t1.Bip32Base$fromExtendedKey$2(extendedKey, conf.get$keyNetVer());
            return t1;
          case B.EllipticCurveTypes_ed25519:
            t1 = A.Bip32Slip10Ed25519$fromExtendedKey(extendedKey, conf.get$keyNetVer());
            return t1;
          case B.EllipticCurveTypes_ed25519Kholaw:
            if (J.$eq$(conf.get$addrParams().$index(0, "is_icarus"), true)) {
              t1 = new A.CardanoIcarusBip32();
              t1.Bip32Base$fromExtendedKey$2(extendedKey, conf.get$keyNetVer());
              return t1;
            }
            t1 = new A.Bip32KholawEd25519();
            t1.Bip32Base$fromExtendedKey$2(extendedKey, conf.get$keyNetVer());
            return t1;
          case B.EllipticCurveTypes_ed25519Blake2b:
            t1 = new A.Bip32Slip10Ed25519Blake2b();
            t1.Bip32Base$fromExtendedKey$2(extendedKey, conf.get$keyNetVer());
            return t1;
          case B.EllipticCurveTypes_nist256p1:
            t1 = new A.Bip32Slip10Nist256p1();
            t1.Bip32Base$fromExtendedKey$2(extendedKey, conf.get$keyNetVer());
            return t1;
          default:
            throw A.wrapException(B.WalletException_extended_key_invalid_null);
        }
      } catch (exception) {
        throw A.wrapException(B.WalletException_extended_key_invalid_null);
      }
    },
    BlockchainUtils_seedToBipKey(coin, seedBytes) {
      var bip,
        conf = coin.get$conf(),
        keyNetVar = coin.get$conf().get$keyNetVer(),
        t1 = coin.get$conf().get$addrParams().$index(0, "is_icarus"),
        isIcarus = A._asBool(t1 == null ? false : t1);
      switch (conf.type) {
        case B.EllipticCurveTypes_secp256k1:
          bip = A.Bip32Slip10Secp256k1$fromSeed(seedBytes, keyNetVar);
          break;
        case B.EllipticCurveTypes_ed25519:
          bip = A.Bip32Slip10Ed25519$fromSeed(seedBytes, keyNetVar);
          break;
        case B.EllipticCurveTypes_ed25519Kholaw:
          if (coin.get$proposal() === B.C_CustomProposal) {
            bip = new A.CardanoByronLegacyBip32();
            bip.Bip32Base$fromSeed$2(seedBytes, keyNetVar);
            break;
          }
          if (isIcarus) {
            bip = new A.CardanoIcarusBip32();
            bip.Bip32Base$fromSeed$2(seedBytes, keyNetVar);
            break;
          }
          bip = new A.Bip32KholawEd25519();
          bip.Bip32Base$fromSeed$2(seedBytes, keyNetVar);
          break;
        case B.EllipticCurveTypes_ed25519Blake2b:
          bip = new A.Bip32Slip10Ed25519Blake2b();
          bip.Bip32Base$fromSeed$2(seedBytes, keyNetVar);
          break;
        case B.EllipticCurveTypes_nist256p1:
          bip = new A.Bip32Slip10Nist256p1();
          bip.Bip32Base$fromSeed$2(seedBytes, keyNetVar);
          break;
        default:
          throw A.wrapException(B.ArgumentException_BjK);
      }
      return new A.BlockchainUtils_seedToBipKey_validate().call$1(bip);
    },
    BlockchainUtils__createCustomKeyChecksum(chainCode, coin, pubkeyBytes) {
      var t1;
      if (chainCode == null)
        chainCode = A.List_List$filled(32, 0, false, type$.int);
      t1 = A.List_List$of(pubkeyBytes, true, type$.int);
      B.JSArray_methods.addAll$1(t1, chainCode);
      B.JSArray_methods.addAll$1(t1, new A.CodeUnits(coin.get$proposal().get$specName()));
      B.JSArray_methods.addAll$1(t1, new A.CodeUnits(coin.get$coinName()));
      return A.BytesUtils_toHexString(A.MD5_hash(t1), true, null);
    },
    BlockchainUtils_toWif(coin, privateKey) {
      var wif, t1, t2, t3, privKeyBytes;
      if (coin instanceof A.BipCoins) {
        wif = coin.get$conf().wifNetVer;
        if (wif != null) {
          t1 = type$.dynamic;
          t2 = A.List_List$of(A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(privateKey, $.$get$Curves_generatorSecp256k1()).toBytes$0(), true, t1);
          t2.push(1);
          t3 = type$.int;
          privKeyBytes = A.List_List$from(t2, true, t3);
          t1 = A.List_List$of(wif, true, t1);
          B.JSArray_methods.addAll$1(t1, privKeyBytes);
          return A.Base58Encoder_checkEncode(A.List_List$from(t1, true, t3), B.Base58Alphabets_0);
        }
      }
      return null;
    },
    BlockchainUtils_seedToBipKey_validate: function BlockchainUtils_seedToBipKey_validate() {
    },
    BaseRepository: function BaseRepository() {
    },
    NodeClientStatus: function NodeClientStatus(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    NetworkClient: function NetworkClient() {
    },
    _NetworkClient_Object_BaseRepository: function _NetworkClient_Object_BaseRepository() {
    },
    MoneroClient$(network, provider) {
      return new A.MoneroClient(provider, network, $.$get$IsolateCryptoWoker_isolate(), new A.Live(B.NodeClientStatus_1, A.LinkedHashSet_LinkedHashSet$_empty(type$.void_Function), type$.Live_NodeClientStatus), new A.SynchronizedLock());
    },
    MoneroClient: function MoneroClient(t0, t1, t2, t3, t4) {
      var _ = this;
      _.provider = t0;
      _.network = t1;
      _._genesis = null;
      _.CryptoWokerImpl_crypto = t2;
      _._status = t3;
      _._client$_lock = t4;
    },
    _MoneroClient_NetworkClient_CryptoWokerImpl: function _MoneroClient_NetworkClient_CryptoWokerImpl() {
    },
    APIProvider: function APIProvider() {
    },
    _APIProvider_Object_Equatable: function _APIProvider_Object_Equatable() {
    },
    _APIProvider_Object_Equatable_CborSerializable: function _APIProvider_Object_Equatable_CborSerializable() {
    },
    MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_cborTagValue(null, null, obj, B.List_90_12, type$.CborListValue_dynamic),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAs(values, 0, t1),
        t3 = A.ExtractCborList_elemetMybeAs(values, 1, new A.MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic);
      return new A.MoneroAPIProvider(t2, A.ExtractCborList_elementAs(values, 2, t1), B.ServiceProtocol_0_http, t3);
    },
    MoneroAPIProvider: function MoneroAPIProvider(t0, t1, t2, t3) {
      var _ = this;
      _.httpNodeUri = t0;
      _.identifier = t1;
      _.protocol = t2;
      _.auth = t3;
    },
    MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject_closure: function MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject_closure() {
    },
    APIServiceTracker: function APIServiceTracker(t0, t1) {
      var _ = this;
      _._tracker$_status = t0;
      _._requests = t1;
      _._totalError = _._totalSuccess = 0;
    },
    APIServiceTracker__checkStatus_closure: function APIServiceTracker__checkStatus_closure() {
    },
    HTTPService: function HTTPService() {
    },
    HTTPService_serviceRequest_closure: function HTTPService_serviceRequest_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.request = t1;
      _.toUri = t2;
      _.timeout = t3;
      _.headers = t4;
      _.type = t5;
    },
    _HTTPService_Object_HttpImpl: function _HTTPService_Object_HttpImpl() {
    },
    ServiceProtocol: function ServiceProtocol(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    ApiRequest: function ApiRequest(t0) {
      this.error = t0;
    },
    APIServiceStatus: function APIServiceStatus(t0, t1) {
      this.index = t0;
      this._core$_name = t1;
    },
    MoneroHTTPService$(provider, isolate) {
      return new A.MoneroHTTPService(false, provider, new A.APIServiceTracker(new A.Live(B.APIServiceStatus_0, A.LinkedHashSet_LinkedHashSet$_empty(type$.void_Function), type$.Live_APIServiceStatus), A._setArrayType([], type$.JSArray_ApiRequest)), new A.SynchronizedLock());
    },
    MoneroHTTPService: function MoneroHTTPService(t0, t1, t2, t3) {
      var _ = this;
      _.isolate = t0;
      _.provider = t1;
      _.tracker = t2;
      _._lock = t3;
    },
    IntegerBalance_IntegerBalance(balance, currencyDecimal, allowNegative, imutable) {
      var showDecimal = currencyDecimal > 8 ? 8 : currencyDecimal,
        currency = new A.IntegerBalance(false, $.$get$_BigIntImpl_zero(), currencyDecimal, showDecimal);
      currency._updateBalance$1(balance);
      return currency;
    },
    IntegerBalance: function IntegerBalance(t0, t1, t2, t3) {
      var _ = this;
      _.allowNegative = t0;
      _._balance = t1;
      _.__IntegerBalance__price_A = $;
      _.currencyDecimal = t2;
      _.__IntegerBalance_showDecimal_F = t3;
    },
    NewAccountParamsType_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_kYN, new A.NewAccountParamsType_fromTag_closure(tag), new A.NewAccountParamsType_fromTag_closure0());
    },
    NewAccountParams_NewAccountParams$deserialize(object, NETWORKADDRESS) {
      var values, params, t2, t3, _null = null,
        t1 = type$.CborTagValue_dynamic,
        decode = A.CborSerializable_decode(_null, _null, object, t1);
      switch (A.NewAccountParamsType_fromTag(decode.tags).index) {
        case 0:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_12_0, type$.CborListValue_dynamic);
          t1 = type$.String;
          params = new A.BitcoinCashNewAddressParams(A.AddressDerivationIndex_fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 0)), A.BitcoinAddressType_fromValue(A.ExtractCborList_elementAt(values, 1, t1)), A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 2, t1), type$.CryptoCoins_CoinConfig), A.PubKeyModes_fromValue(A.ExtractCborList_elementAs(values, 3, type$.nullable_int), B.PubKeyModes_0_0_compressed));
          break;
        case 1:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_12_1, type$.CborListValue_dynamic);
          t1 = type$.String;
          params = new A.BitcoinCashMultiSigNewAddressParams(A.BitcoinAddressType_fromValue(A.ExtractCborList_elementAt(values, 0, t1)), A.BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 1)), A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 2, t1), type$.CryptoCoins_CoinConfig));
          break;
        case 2:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_12_2, type$.CborListValue_dynamic);
          t1 = A.AddressDerivationIndex_fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 0));
          t2 = type$.String;
          t3 = A.BitcoinAddressType_fromValue(A.ExtractCborList_elementAt(values, 1, t2));
          t2 = A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 2, t2), type$.CryptoCoins_CoinConfig);
          params = new A.BitcoinNewAddressParams(t1, t3, A.PubKeyModes_fromValue(A.ExtractCborList_elementAs(values, 3, type$.nullable_int), _null), t2);
          break;
        case 3:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_12_4, type$.CborListValue_dynamic);
          t1 = type$.String;
          params = new A.BitcoinMultiSigNewAddressParams(A.BitcoinAddressType_fromValue(A.ExtractCborList_elementAt(values, 0, t1)), A.BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 1)), A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 2, t1), type$.CryptoCoins_CoinConfig));
          break;
        case 4:
          params = A.CardanoNewAddressParams_CardanoNewAddressParams$deserialize(decode);
          break;
        case 5:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_12_6, type$.CborListValue_dynamic);
          t1 = A.AddressDerivationIndex_fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 0));
          t2 = type$.String;
          params = new A.CosmosNewAddressParams(A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 1, t2), type$.CryptoCoins_CoinConfig), t1, A.CosmosKeysAlgs_fromName(A.ExtractCborList_elementAs(values, 2, t2)));
          break;
        case 6:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_12_7, type$.CborListValue_dynamic);
          params = new A.EthereumNewAddressParams(A.AddressDerivationIndex_fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 0)), A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 1, type$.String), type$.CryptoCoins_CoinConfig));
          break;
        case 7:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_12_8, type$.CborListValue_dynamic);
          params = new A.SolanaNewAddressParams(A.AddressDerivationIndex_fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 0)), A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 1, type$.String), type$.CryptoCoins_CoinConfig));
          break;
        case 8:
          params = new A.SubstrateNewAddressParams(A.AddressDerivationIndex_fromCborBytesOrObject(A.ExtractCborList_getCborTag(A.CborSerializable_cborTagValue(_null, _null, decode, B.List_12_9, type$.CborListValue_dynamic), 0)));
          break;
        case 9:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_12_10, type$.CborListValue_dynamic);
          params = new A.TronNewAddressParams(A.AddressDerivationIndex_fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 0)), A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 1, type$.String), type$.CryptoCoins_CoinConfig));
          break;
        case 10:
          params = A.TronMultisigNewAddressParams_TronMultisigNewAddressParams$deserialize(decode);
          break;
        case 11:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_12_12, type$.CborListValue_dynamic);
          t2 = A.AddressDerivationIndex_fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 0));
          t1 = A.TonAccountContext_TonAccountContext$deserialize(A.ExtractCborList_elementAs(values, 1, t1));
          params = new A.TonNewAddressParams(A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 2, type$.String), type$.CryptoCoins_CoinConfig), t1, t2);
          break;
        case 12:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_12_13, type$.CborListValue_dynamic);
          params = new A.RippleNewAddressParams(A.AddressDerivationIndex_fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 0)), A.ExtractCborList_elementAt(values, 1, type$.nullable_int), A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 2, type$.String), type$.CryptoCoins_CoinConfig));
          break;
        case 13:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_12_14, type$.CborListValue_dynamic);
          t1 = type$.String;
          params = new A.RippleMultiSigNewAddressParams(A.XRPAddress_XRPAddress(A.ExtractCborList_elementAt(values, 0, t1)), A.RippleMultiSignatureAddress_RippleMultiSignatureAddress$fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 1)), A.ExtractCborList_elementAt(values, 1, type$.nullable_int), A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 2, t1), type$.CryptoCoins_CoinConfig));
          break;
        case 14:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_12_15, type$.CborListValue_dynamic);
          params = new A.StellarNewAddressParams(A.AddressDerivationIndex_fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 0)), A.ExtractCborList_elementAt(values, 1, type$.nullable_BigInt), A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 2, type$.String), type$.CryptoCoins_CoinConfig));
          break;
        case 15:
          values = A.CborSerializable_cborTagValue(_null, _null, decode, B.List_12_16, type$.CborListValue_dynamic);
          t1 = type$.String;
          params = new A.StellarMultiSigNewAddressParams(A.StellarAccountAddress_StellarAccountAddress(A.ExtractCborList_elementAt(values, 0, t1)), A.StellarMultiSignatureAddress_StellarMultiSignatureAddress$fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 1)), A.ExtractCborList_elementAt(values, 1, type$.nullable_BigInt), A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 2, t1), type$.CryptoCoins_CoinConfig));
          break;
        case 16:
          params = A.MoneroNewAddressParams_MoneroNewAddressParams$deserialize(decode);
          break;
        default:
          throw A.wrapException(A.UnimplementedError$("Network does not exists."));
      }
      if (!NETWORKADDRESS._eval$1("NewAccountParams<0>")._is(params))
        throw A.wrapException(B.WalletException_data_verification_failed_null);
      return params;
    },
    NewAccountParamsType: function NewAccountParamsType(t0, t1, t2) {
      this.tag = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    NewAccountParamsType_fromTag_closure: function NewAccountParamsType_fromTag_closure(t0) {
      this.tag = t0;
    },
    NewAccountParamsType_fromTag_closure0: function NewAccountParamsType_fromTag_closure0() {
    },
    BitcoinCashNewAddressParams: function BitcoinCashNewAddressParams(t0, t1, t2, t3) {
      var _ = this;
      _.deriveIndex = t0;
      _.bitcoinAddressType = t1;
      _.coin = t2;
      _.keyType = t3;
    },
    BitcoinCashMultiSigNewAddressParams: function BitcoinCashMultiSigNewAddressParams(t0, t1, t2) {
      this.bitcoinAddressType = t0;
      this.multiSignatureAddress = t1;
      this.coin = t2;
    },
    BitcoinNewAddressParams: function BitcoinNewAddressParams(t0, t1, t2, t3) {
      var _ = this;
      _.deriveIndex = t0;
      _.bitcoinAddressType = t1;
      _.keyType = t2;
      _.coin = t3;
    },
    BitcoinMultiSigNewAddressParams: function BitcoinMultiSigNewAddressParams(t0, t1, t2) {
      this.bitcoinAddressType = t0;
      this.multiSignatureAddress = t1;
      this.coin = t2;
    },
    CardanoNewAddressParams_CardanoNewAddressParams$deserialize(object) {
      var t4, t5, t6, t7, _null = null,
        values = A.CborSerializable_cborTagValue(_null, _null, object, B.List_12_5, type$.CborListValue_dynamic),
        t1 = A.ADAAddressType_fromHeader(A.ExtractCborList_elementAt(values, 0, type$.nullable_int)),
        t2 = A.AddressDerivationIndex_fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 1)),
        t3 = A.ExtractCborList_getCborTag(values, 2);
      t3 = t3 == null ? _null : A.QuickCbor_to(t3, new A.CardanoNewAddressParams_CardanoNewAddressParams$deserialize_closure(), type$.Bip32AddressIndex, type$.CborObject);
      t4 = A.ExtractCborList_getCborTag(values, 3);
      t4 = t4 == null ? _null : A.QuickCbor_to(t4, new A.CardanoNewAddressParams_CardanoNewAddressParams$deserialize_closure0(), type$.nullable_CardanoAddrDetails, type$.CborObject);
      t5 = A.ExtractCborList_elementAt(values, 4, type$.nullable_String);
      t6 = A.ExtractCborList_elementAt(values, 5, type$.nullable_List_int);
      t7 = A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 6, type$.String), type$.CryptoCoins_CoinConfig);
      return new A.CardanoNewAddressParams(t1, t2, t3, t4, t5, A.BytesUtils_tryToBytes(t6, true), t7);
    },
    CardanoNewAddressParams: function CardanoNewAddressParams(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.addressType = t0;
      _.deriveIndex = t1;
      _.rewardKeyIndex = t2;
      _.addressDetails = t3;
      _.customHdPath = t4;
      _.customHdPathKey = t5;
      _.coin = t6;
    },
    CardanoNewAddressParams_CardanoNewAddressParams$deserialize_closure: function CardanoNewAddressParams_CardanoNewAddressParams$deserialize_closure() {
    },
    CardanoNewAddressParams_CardanoNewAddressParams$deserialize_closure0: function CardanoNewAddressParams_CardanoNewAddressParams$deserialize_closure0() {
    },
    CosmosNewAddressParams: function CosmosNewAddressParams(t0, t1, t2) {
      this.coin = t0;
      this.deriveIndex = t1;
      this.algorithm = t2;
    },
    EthereumNewAddressParams: function EthereumNewAddressParams(t0, t1) {
      this.deriveIndex = t0;
      this.coin = t1;
    },
    MoneroNewAddressParams_MoneroNewAddressParams$deserialize(object) {
      var t4, t5,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_12_17, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 0)),
        t2 = type$.int,
        t3 = A.ExtractCborList_elementAs(values, 1, t2);
      t2 = A.ExtractCborList_elementAs(values, 2, t2);
      t4 = A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 3, type$.String), type$.CryptoCoins_CoinConfig);
      t5 = A.ExtractCborList_getCborTag(values, 4);
      t5 = t5 == null ? null : A.QuickCbor_to(t5, new A.MoneroNewAddressParams_MoneroNewAddressParams$deserialize_closure(), type$.nullable_MoneroViewAccountDetails, type$.CborObject);
      return new A.MoneroNewAddressParams(t1, t4, t2, t3, t5, A.MoneroNetwork_fromName(A.ExtractCborList_elementAs(values, 5, type$.nullable_String)));
    },
    MoneroNewAddressParams: function MoneroNewAddressParams(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.deriveIndex = t0;
      _.coin = t1;
      _.minor = t2;
      _.major = t3;
      _.addrDetails = t4;
      _.network = t5;
    },
    MoneroNewAddressParams_MoneroNewAddressParams$deserialize_closure: function MoneroNewAddressParams_MoneroNewAddressParams$deserialize_closure() {
    },
    RippleNewAddressParams: function RippleNewAddressParams(t0, t1, t2) {
      this.deriveIndex = t0;
      this.tag = t1;
      this.coin = t2;
    },
    RippleMultiSigNewAddressParams: function RippleMultiSigNewAddressParams(t0, t1, t2, t3) {
      var _ = this;
      _.masterAddress = t0;
      _.multiSigAccount = t1;
      _.tag = t2;
      _.coin = t3;
    },
    SolanaNewAddressParams: function SolanaNewAddressParams(t0, t1) {
      this.deriveIndex = t0;
      this.coin = t1;
    },
    StellarNewAddressParams: function StellarNewAddressParams(t0, t1, t2) {
      this.deriveIndex = t0;
      this.id = t1;
      this.coin = t2;
    },
    StellarMultiSigNewAddressParams: function StellarMultiSigNewAddressParams(t0, t1, t2, t3) {
      var _ = this;
      _.masterAddress = t0;
      _.multiSigAccount = t1;
      _.id = t2;
      _.coin = t3;
    },
    SubstrateNewAddressParams: function SubstrateNewAddressParams(t0) {
      this.deriveIndex = t0;
    },
    TonNewAddressParams: function TonNewAddressParams(t0, t1, t2) {
      this.coin = t0;
      this.context = t1;
      this.deriveIndex = t2;
    },
    TronMultisigNewAddressParams_TronMultisigNewAddressParams$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_12_11, type$.CborListValue_dynamic),
        t1 = type$.String,
        t2 = A.TronAddress_TronAddress(A.ExtractCborList_elementAt(values, 0, t1)),
        t3 = A.ExtractCborList_getCborTag(values, 1);
      t3.toString;
      return new A.TronMultisigNewAddressParams(t2, A.QuickCbor_to(t3, new A.TronMultisigNewAddressParams_TronMultisigNewAddressParams$deserialize_closure(), type$.TronMultiSignatureAddress, type$.CborObject), A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAt(values, 2, t1), type$.CryptoCoins_CoinConfig));
    },
    TronNewAddressParams: function TronNewAddressParams(t0, t1) {
      this.deriveIndex = t0;
      this.coin = t1;
    },
    TronMultisigNewAddressParams: function TronMultisigNewAddressParams(t0, t1, t2) {
      this.masterAddress = t0;
      this.multiSigAccount = t1;
      this.coin = t2;
    },
    TronMultisigNewAddressParams_TronMultisigNewAddressParams$deserialize_closure: function TronMultisigNewAddressParams_TronMultisigNewAddressParams$deserialize_closure() {
    },
    BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject(obj) {
      var t2, t3, scriptsOpcode,
        cbor = A.CborSerializable_decodeCborTags(null, obj, B.List_200_192_1_0, type$.CborListValue_dynamic),
        t1 = J.map$1$1$ax(A.ExtractCborList_elementAt(cbor, 0, type$.List_dynamic), new A.BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject_closure(), type$.BitcoinMultiSigSignerDetais),
        signers = A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")),
        threshHold = A.ExtractCborList_elementAt(cbor, 1, type$.int);
      t1 = A.ExtractCborList_elementAsListOf(cbor, 2, type$.CborStringValue);
      t2 = t1.$ti;
      t3 = t2._eval$1("MappedListIterable<ListBase.E,String>");
      scriptsOpcode = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("String(ListBase.E)")._as(new A.BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject_closure0()), t3), true, t3._eval$1("ListIterable.E"));
      t3 = A._arrayInstanceType(scriptsOpcode);
      t2 = t3._eval$1("MappedListIterable<1,String>");
      return new A.BitcoinMultiSignatureAddress(signers, threshHold, new A.Script(A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(scriptsOpcode, t3._eval$1("String(1)")._as(new A.BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject_closure1()), t2), true, t2._eval$1("ListIterable.E")), type$.dynamic)));
    },
    BitcoinMultiSigSignerDetais: function BitcoinMultiSigSignerDetais(t0, t1, t2) {
      this.publicKey = t0;
      this._wieght = t1;
      this.keyIndex = t2;
    },
    BitcoinMultiSignatureAddress: function BitcoinMultiSignatureAddress(t0, t1, t2) {
      this.signers = t0;
      this.threshold = t1;
      this.multiSigScript = t2;
    },
    BitcoinMultiSignatureAddress_toCbor_closure: function BitcoinMultiSignatureAddress_toCbor_closure() {
    },
    BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject_closure: function BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject_closure() {
    },
    BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject_closure0: function BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject_closure0() {
    },
    BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject_closure1: function BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject_closure1() {
    },
    _BitcoinMultiSigSignerDetais_Object_Equatable: function _BitcoinMultiSigSignerDetais_Object_Equatable() {
    },
    _BitcoinMultiSigSignerDetais_Object_Equatable_CborSerializable: function _BitcoinMultiSigSignerDetais_Object_Equatable_CborSerializable() {
    },
    _BitcoinMultiSignatureAddress_Object_CborSerializable: function _BitcoinMultiSignatureAddress_Object_CborSerializable() {
    },
    StellarMultiSignatureAddress_StellarMultiSignatureAddress$fromCborBytesOrObject(obj) {
      var cbor = A.CborSerializable_decodeCborTags(null, obj, B.List_200_201_1_0, type$.CborListValue_dynamic),
        t1 = J.map$1$1$ax(A.ExtractCborList_elementAt(cbor, 0, type$.List_dynamic), new A.StellarMultiSignatureAddress_StellarMultiSignatureAddress$fromCborBytesOrObject_closure(), type$.StellarMultiSigSignerDetails);
      return new A.StellarMultiSignatureAddress(A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")), A.ExtractCborList_elementAt(cbor, 1, type$.int), A.ExtractCborList_elementAt(cbor, 2, type$.bool));
    },
    StellarMultiSigSignerDetails: function StellarMultiSigSignerDetails(t0, t1, t2) {
      this.publicKey = t0;
      this.weight = t1;
      this.keyIndex = t2;
    },
    StellarMultiSignatureAddress: function StellarMultiSignatureAddress(t0, t1, t2) {
      this.signers = t0;
      this.threshold = t1;
      this.isRegular = t2;
    },
    StellarMultiSignatureAddress_toCbor_closure: function StellarMultiSignatureAddress_toCbor_closure() {
    },
    StellarMultiSignatureAddress_StellarMultiSignatureAddress$fromCborBytesOrObject_closure: function StellarMultiSignatureAddress_StellarMultiSignatureAddress$fromCborBytesOrObject_closure() {
    },
    _StellarMultiSigSignerDetails_Object_Equatable: function _StellarMultiSigSignerDetails_Object_Equatable() {
    },
    _StellarMultiSigSignerDetails_Object_Equatable_CborSerializable: function _StellarMultiSigSignerDetails_Object_Equatable_CborSerializable() {
    },
    _StellarMultiSignatureAddress_Object_Equatable: function _StellarMultiSignatureAddress_Object_Equatable() {
    },
    _StellarMultiSignatureAddress_Object_Equatable_CborSerializable: function _StellarMultiSignatureAddress_Object_Equatable_CborSerializable() {
    },
    TronMultiSignatureAddress_TronMultiSignatureAddress$fromCborBytesOrObject(obj) {
      var cbor = A.CborSerializable_decodeCborTags(null, obj, B.List_200_195_1_0, type$.CborListValue_dynamic),
        t1 = J.map$1$1$ax(A.ExtractCborList_elementAt(cbor, 0, type$.List_dynamic), new A.TronMultiSignatureAddress_TronMultiSignatureAddress$fromCborBytesOrObject_closure(), type$.TronMultiSigSignerDetais);
      return new A.TronMultiSignatureAddress(A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")), A.ExtractCborList_elementAt(cbor, 1, type$.BigInt), A.ExtractCborList_elementAt(cbor, 2, type$.nullable_int));
    },
    TronMultiSigSignerDetais: function TronMultiSigSignerDetais(t0, t1, t2) {
      this.publicKey = t0;
      this.weight = t1;
      this.keyIndex = t2;
    },
    TronMultiSignatureAddress: function TronMultiSignatureAddress(t0, t1, t2) {
      this.signers = t0;
      this.threshold = t1;
      this.permissionID = t2;
    },
    TronMultiSignatureAddress_toCbor_closure: function TronMultiSignatureAddress_toCbor_closure() {
    },
    TronMultiSignatureAddress_TronMultiSignatureAddress$fromCborBytesOrObject_closure: function TronMultiSignatureAddress_TronMultiSignatureAddress$fromCborBytesOrObject_closure() {
    },
    _TronMultiSigSignerDetais_Object_Equatable: function _TronMultiSigSignerDetais_Object_Equatable() {
    },
    _TronMultiSigSignerDetais_Object_Equatable_CborSerializable: function _TronMultiSigSignerDetais_Object_Equatable_CborSerializable() {
    },
    _TronMultiSignatureAddress_Object_Equatable: function _TronMultiSignatureAddress_Object_Equatable() {
    },
    _TronMultiSignatureAddress_Object_Equatable_CborSerializable: function _TronMultiSignatureAddress_Object_Equatable_CborSerializable() {
    },
    RippleMultiSignatureAddress_RippleMultiSignatureAddress$fromCborBytesOrObject(obj) {
      var cbor = A.CborSerializable_decodeCborTags(null, obj, B.List_200_193_1_0, type$.CborListValue_dynamic),
        t1 = J.map$1$1$ax(A.ExtractCborList_elementAt(cbor, 0, type$.List_dynamic), new A.RippleMultiSignatureAddress_RippleMultiSignatureAddress$fromCborBytesOrObject_closure(), type$.RippleMultiSigSignerDetails);
      return new A.RippleMultiSignatureAddress(A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")), A.ExtractCborList_elementAt(cbor, 1, type$.int), A.ExtractCborList_elementAt(cbor, 2, type$.bool));
    },
    RippleMultiSigSignerDetails: function RippleMultiSigSignerDetails(t0, t1, t2) {
      this.publicKey = t0;
      this.weight = t1;
      this.keyIndex = t2;
    },
    RippleMultiSignatureAddress: function RippleMultiSignatureAddress(t0, t1, t2) {
      this.signers = t0;
      this.threshold = t1;
      this.isRegular = t2;
    },
    RippleMultiSignatureAddress_toCbor_closure: function RippleMultiSignatureAddress_toCbor_closure() {
    },
    RippleMultiSignatureAddress_RippleMultiSignatureAddress$fromCborBytesOrObject_closure: function RippleMultiSignatureAddress_RippleMultiSignatureAddress$fromCborBytesOrObject_closure() {
    },
    _RippleMultiSigSignerDetails_Object_Equatable: function _RippleMultiSigSignerDetails_Object_Equatable() {
    },
    _RippleMultiSigSignerDetails_Object_Equatable_CborSerializable: function _RippleMultiSigSignerDetails_Object_Equatable_CborSerializable() {
    },
    _RippleMultiSignatureAddress_Object_Equatable: function _RippleMultiSignatureAddress_Object_Equatable() {
    },
    _RippleMultiSignatureAddress_Object_Equatable_CborSerializable: function _RippleMultiSignatureAddress_Object_Equatable_CborSerializable() {
    },
    CardanoAddrDetails$_(addressType, chainCode, hdPath, hdPathKey, publicKey, stakePubkey) {
      var t1, t2, t3, t4;
      A.BytesUtils_validateListOfBytes(publicKey);
      t1 = type$.int;
      t2 = A.List_List$unmodifiable(publicKey, t1);
      if (stakePubkey == null)
        t3 = null;
      else {
        A.BytesUtils_validateListOfBytes(stakePubkey);
        t3 = A.List_List$unmodifiable(stakePubkey, t1);
      }
      if (chainCode == null)
        t4 = null;
      else {
        A.BytesUtils_validateListOfBytes(chainCode);
        t4 = A.List_List$unmodifiable(chainCode, t1);
      }
      if (hdPathKey == null)
        t1 = null;
      else {
        A.BytesUtils_validateListOfBytes(hdPathKey);
        t1 = A.List_List$unmodifiable(hdPathKey, t1);
      }
      return new A.CardanoAddrDetails(t2, t3, t4, t1, hdPath, addressType);
    },
    CardanoAddrDetails_CardanoAddrDetails$shelley(addressType, publicKey, seedGeneration, stakePubkey) {
      var t1;
      if (addressType === B.ADAAddressType_8_Byron || addressType === B.ADAAddressType_4_Pointer)
        throw A.wrapException(B.WalletException_GRW);
      t1 = addressType === B.ADAAddressType_0_Base;
      if (t1 && stakePubkey == null)
        throw A.wrapException(B.WalletException_z3s);
      if (!t1 && stakePubkey != null)
        throw A.wrapException(B.WalletException_O9i);
      return A.CardanoAddrDetails$_(addressType, null, null, null, publicKey, stakePubkey);
    },
    CardanoAddrDetails_CardanoAddrDetails$byron(chainCode, hdPath, hdPathKey, publicKey, seedGeneration) {
      var t1 = hdPath == null;
      if (!(!t1 && hdPathKey == null))
        t1 = t1 && hdPathKey != null;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(B.WalletException_qlj);
      return A.CardanoAddrDetails$_(B.ADAAddressType_8_Byron, chainCode, hdPath, hdPathKey, publicKey, null);
    },
    CardanoAddrDetails: function CardanoAddrDetails(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.publicKey = t0;
      _.stakePubkey = t1;
      _.chainCode = t2;
      _.hdPathKey = t3;
      _.hdPath = t4;
      _.__CardanoAddrDetails_hdPathKeyHex_FI = $;
      _.addressType = t5;
    },
    _CardanoAddrDetails_Object_Equatable: function _CardanoAddrDetails_Object_Equatable() {
    },
    _CardanoAddrDetails_Object_Equatable_CborSerializable: function _CardanoAddrDetails_Object_Equatable_CborSerializable() {
    },
    MoneroBlockTrackingStatus_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_KVZ, new A.MoneroBlockTrackingStatus_fromValue_closure(value), new A.MoneroBlockTrackingStatus_fromValue_closure0());
    },
    MoneroBlockTrackingPossition_MoneroBlockTrackingPossition(blockHeight, endHeight, startHeight, $status) {
      if (B.JSInt_methods.get$isNegative(startHeight) || startHeight > endHeight)
        throw A.wrapException(B.WalletException_data_verification_failed_null);
      return new A.MoneroBlockTrackingPossition(blockHeight, startHeight, endHeight, $status);
    },
    MoneroBlockTrackingPossition_MoneroBlockTrackingPossition$deserialize(cbor) {
      var values = A.CborSerializable_cborTagValue(null, null, cbor, B.List_200_202_15, type$.CborListValue_dynamic),
        t1 = type$.int,
        t2 = A.ExtractCborList_elementAs(values, 0, t1),
        t3 = A.ExtractCborList_elementAs(values, 1, t1),
        t4 = A.MoneroBlockTrackingStatus_fromValue(A.ExtractCborList_elementAs(values, 2, type$.nullable_int));
      return A.MoneroBlockTrackingPossition_MoneroBlockTrackingPossition(A.ExtractCborList_elementAs(values, 3, t1), t3, t2, t4);
    },
    MoneroAccountBlocksTrackerStatus_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_QZB, new A.MoneroAccountBlocksTrackerStatus_fromValue_closure(value), new A.MoneroAccountBlocksTrackerStatus_fromValue_closure0());
    },
    MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize(bytes) {
      var t5, t6, t7, t8, t9, t10,
        values = A.CborSerializable_cborTagValue(bytes, null, null, B.List_200_202_16, type$.CborListValue_dynamic),
        t1 = type$.CborTagValue_dynamic,
        t2 = A.ExtractCborList_elementAsListOf(values, 0, t1),
        t3 = t2.$ti,
        t4 = t3._eval$1("MappedListIterable<ListBase.E,MoneroSyncAccountsInfos>");
      t4 = A.List_List$of(new A.MappedListIterable(t2, t3._eval$1("MoneroSyncAccountsInfos(ListBase.E)")._as(new A.MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize_closure()), t4), true, t4._eval$1("ListIterable.E"));
      t3 = type$.int;
      t2 = A.ExtractCborList_elementAs(values, 1, t3);
      t5 = A.ExtractCborList_elementAs(values, 2, t3);
      t6 = A.ExtractCborList_elementAs(values, 3, type$.bool);
      t7 = A.ExtractCborList_elementAsListOf(values, 4, t1);
      t8 = t7.$ti;
      t9 = t8._eval$1("MappedListIterable<ListBase.E,MoneroBlockTrackingPossition>");
      t9 = A.List_List$of(new A.MappedListIterable(t7, t8._eval$1("MoneroBlockTrackingPossition(ListBase.E)")._as(new A.MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize_closure0()), t9), true, t9._eval$1("ListIterable.E"));
      t1 = A.ExtractCborList_elementAsListOf(values, 5, t1);
      t8 = t1.$ti;
      t7 = t8._eval$1("MappedListIterable<ListBase.E,MoneroBlockTrackingPossition>");
      t7 = A.List_List$of(new A.MappedListIterable(t1, t8._eval$1("MoneroBlockTrackingPossition(ListBase.E)")._as(new A.MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize_closure1()), t7), true, t7._eval$1("ListIterable.E"));
      t3 = A.ExtractCborList_elementAs(values, 6, t3);
      t8 = A.ExtractCborList_elementAs(values, 7, type$.DateTime);
      t1 = A.MoneroAccountBlocksTrackerStatus_fromValue(A.ExtractCborList_elementAs(values, 8, type$.nullable_int));
      t10 = type$.MoneroBlockTrackingPossition;
      return new A.MoneroAccountBlocksTracker(A.Set_Set$unmodifiable(t4, type$.MoneroSyncAccountsInfos), t1, t8, t2, t5, t3, t6, A.List_List$unmodifiable(t9, t10), A.ListHelper_clone(t7, false, t10));
    },
    MoneroViewPrimaryAccountDetails_MoneroViewPrimaryAccountDetails(network, spendPublicKey, viewPrivateKey) {
      var addrNetwork, t3,
        account = A.MoneroAccount_MoneroAccount$_(network.get$coin(), viewPrivateKey.privateKey.key, spendPublicKey.publicKey._encoded),
        t1 = account.scubaddr.computeAndEncodeKeys$3(0, 0, account.coinConf.addrNetVer),
        decode = new A.XmrAddrDecoder().decode$1(t1),
        t2 = decode.type;
      if (t2 === B.XmrAddressType_GNA)
        A.throwExpression(B.DartMoneroPluginException_gkc);
      if (t2 !== B.XmrAddressType_GJa)
        A.throwExpression(A.DartMoneroPluginException$("Invalid address type.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", B.XmrAddressType_GJa.toString$0(0), "type", t2.toString$0(0)], type$.String, type$.dynamic)));
      addrNetwork = A.MoneroNetwork_fromNetVersion(decode.netVersion);
      if (addrNetwork !== network)
        A.throwExpression(A.DartMoneroPluginException$("Invalid address network.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", network.toString$0(0), "type", addrNetwork.toString$0(0)], type$.String, type$.dynamic)));
      t3 = A.MoneroPublicKey_MoneroPublicKey$fromBytes(decode.publicSpendKey);
      return new A.MoneroViewPrimaryAccountDetails(viewPrivateKey, spendPublicKey, account, new A.MoneroAccountAddress(A.MoneroPublicKey_MoneroPublicKey$fromBytes(decode.publicViewKey), t3, t1, t2), network);
    },
    MoneroViewPrimaryAccountDetails_MoneroViewPrimaryAccountDetails$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_200_202_17, type$.CborListValue_dynamic),
        t1 = type$.List_int,
        t2 = A.MoneroPrivateKey_MoneroPrivateKey$fromBytes(A.ExtractCborList_elementAs(values, 0, t1));
      t1 = A.MoneroPublicKey_MoneroPublicKey$fromBytes(A.ExtractCborList_elementAs(values, 1, t1));
      return A.MoneroViewPrimaryAccountDetails_MoneroViewPrimaryAccountDetails(A.MoneroNetwork_fromIndex(A.ExtractCborList_elementAs(values, 2, type$.nullable_int)), t1, t2);
    },
    MoneroViewAccountDetails_MoneroViewAccountDetails$deserialize(bytes, object) {
      var values = A.CborSerializable_cborTagValue(bytes, null, object, B.List_12_17, type$.CborListValue_dynamic),
        t1 = type$.int;
      return new A.MoneroViewAccountDetails(A.MoneroViewPrimaryAccountDetails_MoneroViewPrimaryAccountDetails$deserialize(A.ExtractCborList_getCborTag(values, 0)), new A.MoneroAccountIndex(A.ExtractCborList_elementAs(values, 1, t1), A.ExtractCborList_elementAs(values, 2, t1)));
    },
    MoneroTxInfo_MoneroTxInfo$deserialize(cbor) {
      var t3, t4, t5, _null = null,
        values = A.CborSerializable_cborTagValue(_null, _null, cbor, B.List_200_202_8, type$.CborListValue_dynamic),
        t1 = type$.Iterable_int,
        t2 = A.String_String$fromCharCodes(A.ExtractCborList_elementAs(values, 0, t1), 0, _null);
      t1 = A.String_String$fromCharCodes(A.ExtractCborList_elementAs(values, 1, t1), 0, _null);
      t3 = A.ExtractCborList_elementAsListOf(values, 2, type$.CborBigIntValue);
      t4 = t3.$ti;
      t5 = t4._eval$1("MappedListIterable<ListBase.E,BigInt>");
      t5 = A.List_List$of(new A.MappedListIterable(t3, t4._eval$1("BigInt(ListBase.E)")._as(new A.MoneroTxInfo_MoneroTxInfo$deserialize_closure()), t5), true, t5._eval$1("ListIterable.E"));
      t4 = A.ExtractCborList_elementAs(values, 3, type$.int);
      t2 = A.QuickCryptoValidator_asValidHexBytes(t2, 32);
      t1 = A.QuickCryptoValidator_asValidHexBytes(t1, _null);
      t5 = A.List_List$unmodifiable(t5, type$.BigInt);
      if (t4 > 2147483647 || t4 < -2147483648)
        A.throwExpression(A.ArgumentException$("Invalid Signed int 32.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", B.JSInt_methods.get$bitLength(4294967295), "bitLength", B.JSInt_methods.get$bitLength(t4), "value", B.JSInt_methods.toString$0(t4)], type$.String, type$.dynamic)));
      return new A.MoneroTxInfo(t2, t1, t5, t4);
    },
    MoneroUnlockedPaymentRequestDetails_MoneroUnlockedPaymentRequestDetails$fromUnlockOutput(address, comfirmation, globalIndex, output, txId) {
      var t1 = A.BytesUtils_toHexString(output.keyImage, true, null),
        t2 = A.MoneroLockedOutput$(output.accountIndex, output.amount, output.derivation, output.mask, output.outputPublicKey, output.realIndex, output.unlockTime),
        t3 = A.QuickCryptoValidator_asValidHexBytes(txId, 32);
      t1 = A.QuickCryptoValidator_asValidHexBytes(t1, 32);
      A.IntegerBalance_IntegerBalance(t2.amount, 12, false, true);
      return new A.MoneroUnlockedPaymentRequestDetails(A.QuickCryptoValidator_asValidHexBytes(txId, null), new A.MoneroOutputDetails(t2, t3, t1, globalIndex, comfirmation, null, B.MoneroUnlockPaymentRequestOutputStatus_0_0_unknown), B.MoneroUnlockPaymentRequestStatus_1_0_success);
    },
    MoneroProcessTxIdsRequest_MoneroProcessTxIdsRequest$deserialize(cbor) {
      var t4, t5,
        values = A.CborSerializable_cborTagValue(null, null, cbor, B.List_200_202_20, type$.CborListValue_dynamic),
        t1 = A.ExtractCborList_elementAsListOf(values, 0, type$.CborTagValue_dynamic),
        t2 = t1.$ti,
        t3 = t2._eval$1("MappedListIterable<ListBase.E,MoneroTxInfo>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("MoneroTxInfo(ListBase.E)")._as(new A.MoneroProcessTxIdsRequest_MoneroProcessTxIdsRequest$deserialize_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t2 = A.MoneroViewPrimaryAccountDetails_MoneroViewPrimaryAccountDetails$deserialize(A.ExtractCborList_getCborTag(values, 1));
      t1 = A.ExtractCborList_elementAsListOf(values, 2, type$.CborBytesValue);
      t4 = t1.$ti;
      t5 = t4._eval$1("MappedListIterable<ListBase.E,MoneroAccountIndex>");
      t5 = A.List_List$of(new A.MappedListIterable(t1, t4._eval$1("MoneroAccountIndex(ListBase.E)")._as(new A.MoneroProcessTxIdsRequest_MoneroProcessTxIdsRequest$deserialize_closure0()), t5), true, t5._eval$1("ListIterable.E"));
      t4 = A.Bip32AddressIndex_Bip32AddressIndex$fromCborBytesOrObject(A.ExtractCborList_getCborTag(values, 3));
      return new A.MoneroProcessTxIdsRequest(A.List_List$unmodifiable(t3, type$.MoneroTxInfo), t2, A.List_List$unmodifiable(t5, type$.MoneroAccountIndex), t4);
    },
    MoneroSyncAccountsInfos_MoneroSyncAccountsInfos$deserialize(cbor) {
      var t5,
        values = A.CborSerializable_cborTagValue(null, null, cbor, B.List_200_202_21, type$.CborListValue_dynamic),
        t1 = A.MoneroViewPrimaryAccountDetails_MoneroViewPrimaryAccountDetails$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = A.ExtractCborList_elementAsListOf(values, 1, type$.CborTagValue_dynamic),
        t3 = t2.$ti,
        t4 = t3._eval$1("MappedListIterable<ListBase.E,MoneroSyncAccountIndexInfo>");
      t4 = A.List_List$of(new A.MappedListIterable(t2, t3._eval$1("MoneroSyncAccountIndexInfo(ListBase.E)")._as(new A.MoneroSyncAccountsInfos_MoneroSyncAccountsInfos$deserialize_closure()), t4), true, t4._eval$1("ListIterable.E"));
      t3 = A.ExtractCborList_elementAsListOf(values, 2, type$.CborStringValue);
      t2 = t3.$ti;
      t5 = t2._eval$1("MappedListIterable<ListBase.E,String>");
      t5 = A.List_List$of(new A.MappedListIterable(t3, t2._eval$1("String(ListBase.E)")._as(new A.MoneroSyncAccountsInfos_MoneroSyncAccountsInfos$deserialize_closure0()), t5), true, t5._eval$1("ListIterable.E"));
      return new A.MoneroSyncAccountsInfos(t1, A.Set_Set$unmodifiable(t4, type$.MoneroSyncAccountIndexInfo), A.Set_Set$unmodifiable(t5, type$.String));
    },
    MoneroSyncBlockRequestType_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_L6o, new A.MoneroSyncBlockRequestType_fromTag_closure(tag), new A.MoneroSyncBlockRequestType_fromTag_closure0());
    },
    MoneroSyncBlocksRequest_MoneroSyncBlocksRequest$deserialize(bytes) {
      var t1, _null = null,
        values = A.CborSerializable_decode(bytes, _null, _null, type$.CborTagValue_dynamic);
      switch (A.MoneroSyncBlockRequestType_fromTag(values.tags).index) {
        case 0:
          t1 = new A.MoneroSyncBlocksInfoRequest(A.ExtractCborList_elementAs(A.CborSerializable_cborTagValue(_null, _null, values, B.List_200_202_32, type$.CborListValue_dynamic), 0, type$.int), B.MoneroSyncBlockRequestType_i7r);
          break;
        case 1:
          t1 = A.MoneroSyncTrackBlocksRequest_MoneroSyncTrackBlocksRequest$deserialize(values);
          break;
        default:
          t1 = _null;
      }
      return t1;
    },
    MoneroSyncTrackBlocksRequest_MoneroSyncTrackBlocksRequest$deserialize(cbor) {
      var t1 = A.ExtractCborList_elementAsListOf(A.CborSerializable_cborTagValue(null, null, cbor, B.List_200_202_33, type$.CborListValue_dynamic), 0, type$.CborTagValue_dynamic),
        t2 = t1.$ti,
        t3 = t2._eval$1("MappedListIterable<ListBase.E,MoneroBlockTrackingPossition>");
      return new A.MoneroSyncTrackBlocksRequest(A.List_List$unmodifiable(A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("MoneroBlockTrackingPossition(ListBase.E)")._as(new A.MoneroSyncTrackBlocksRequest_MoneroSyncTrackBlocksRequest$deserialize_closure()), t3), true, t3._eval$1("ListIterable.E")), type$.MoneroBlockTrackingPossition), B.MoneroSyncBlockRequestType_SJ5);
    },
    MoneroBlockTrackingStatus: function MoneroBlockTrackingStatus(t0, t1, t2) {
      this.value = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    MoneroBlockTrackingStatus_fromValue_closure: function MoneroBlockTrackingStatus_fromValue_closure(t0) {
      this.value = t0;
    },
    MoneroBlockTrackingStatus_fromValue_closure0: function MoneroBlockTrackingStatus_fromValue_closure0() {
    },
    MoneroParsingBlockStatus: function MoneroParsingBlockStatus(t0, t1, t2) {
      this.value = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    MoneroBlockTrackingPossition: function MoneroBlockTrackingPossition(t0, t1, t2, t3) {
      var _ = this;
      _.blockHeight = t0;
      _.startHeight = t1;
      _.endHeight = t2;
      _.status = t3;
    },
    MoneroAccountBlocksTrackerStatus: function MoneroAccountBlocksTrackerStatus(t0, t1, t2) {
      this.value = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    MoneroAccountBlocksTrackerStatus_fromValue_closure: function MoneroAccountBlocksTrackerStatus_fromValue_closure(t0) {
      this.value = t0;
    },
    MoneroAccountBlocksTrackerStatus_fromValue_closure0: function MoneroAccountBlocksTrackerStatus_fromValue_closure0() {
    },
    MoneroAccountBlocksTracker: function MoneroAccountBlocksTracker(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._accounts = t0;
      _._account_related$_status = t1;
      _.created = t2;
      _._startHeight = t3;
      _._endHeight = t4;
      _._currentHeight = t5;
      _.isRequest = t6;
      _._failedOffsets = t7;
      _._currentOffsets = t8;
    },
    MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize_closure: function MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize_closure() {
    },
    MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize_closure0: function MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize_closure0() {
    },
    MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize_closure1: function MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize_closure1() {
    },
    MoneroAccountBlocksTracker_getAccountsKeys_closure: function MoneroAccountBlocksTracker_getAccountsKeys_closure(t0) {
      this.$this = t0;
    },
    MoneroViewPrimaryAccountDetails: function MoneroViewPrimaryAccountDetails(t0, t1, t2, t3, t4) {
      var _ = this;
      _.viewPrivateKey = t0;
      _.spendPublicKey = t1;
      _.account = t2;
      _.primaryAddress = t3;
      _.network = t4;
    },
    MoneroViewAccountDetails: function MoneroViewAccountDetails(t0, t1) {
      this.viewKey = t0;
      this.index = t1;
    },
    MoneroTxInfo: function MoneroTxInfo(t0, t1, t2, t3) {
      var _ = this;
      _.txId = t0;
      _.txHex = t1;
      _.globalIndices = t2;
      _.confirmations = t3;
    },
    MoneroTxInfo_toTx_closure: function MoneroTxInfo_toTx_closure(t0) {
      this.$this = t0;
    },
    MoneroTxInfo_MoneroTxInfo$deserialize_closure: function MoneroTxInfo_MoneroTxInfo$deserialize_closure() {
    },
    MoneroUnlockPaymentRequestStatus: function MoneroUnlockPaymentRequestStatus(t0, t1, t2) {
      this.value = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    MoneroUnlockPaymentRequestOutputStatus: function MoneroUnlockPaymentRequestOutputStatus(t0, t1, t2) {
      this.value = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    MoneroOutputDetails: function MoneroOutputDetails(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.lockedOutput = t0;
      _.txId = t1;
      _.keyImage = t2;
      _._globalIndex = t3;
      _._confirmations = t4;
      _._height = t5;
      _._account_related$_status = t6;
    },
    MoneroUnlockedPaymentRequestDetails: function MoneroUnlockedPaymentRequestDetails(t0, t1, t2) {
      this.txID = t0;
      this.output = t1;
      this.status = t2;
    },
    MoneroProcessTxesResponse: function MoneroProcessTxesResponse(t0, t1) {
      this.address = t0;
      this.responses = t1;
    },
    MoneroProcessTxesResponse_toCbor_closure: function MoneroProcessTxesResponse_toCbor_closure() {
    },
    MoneroBatchProcessTxesResponse: function MoneroBatchProcessTxesResponse(t0) {
      this.payments = t0;
    },
    MoneroBatchProcessTxesResponse_toCbor_closure: function MoneroBatchProcessTxesResponse_toCbor_closure() {
    },
    MoneroProcessTxIdsRequest: function MoneroProcessTxIdsRequest(t0, t1, t2, t3) {
      var _ = this;
      _.txes = t0;
      _.primaryAddress = t1;
      _.keyIndexes = t2;
      _.index = t3;
    },
    MoneroProcessTxIdsRequest_MoneroProcessTxIdsRequest$deserialize_closure: function MoneroProcessTxIdsRequest_MoneroProcessTxIdsRequest$deserialize_closure() {
    },
    MoneroProcessTxIdsRequest_MoneroProcessTxIdsRequest$deserialize_closure0: function MoneroProcessTxIdsRequest_MoneroProcessTxIdsRequest$deserialize_closure0() {
    },
    MoneroProcessTxIdsRequest_toCbor_closure: function MoneroProcessTxIdsRequest_toCbor_closure() {
    },
    MoneroProcessTxIdsRequest_toCbor_closure0: function MoneroProcessTxIdsRequest_toCbor_closure0() {
    },
    MoneroSyncAccountsInfos: function MoneroSyncAccountsInfos(t0, t1, t2) {
      this.primaryAccount = t0;
      this._indexes = t1;
      this._pendingTxes = t2;
    },
    MoneroSyncAccountsInfos_getAccountKeys_closure: function MoneroSyncAccountsInfos_getAccountKeys_closure() {
    },
    MoneroSyncAccountsInfos_MoneroSyncAccountsInfos$deserialize_closure: function MoneroSyncAccountsInfos_MoneroSyncAccountsInfos$deserialize_closure() {
    },
    MoneroSyncAccountsInfos_MoneroSyncAccountsInfos$deserialize_closure0: function MoneroSyncAccountsInfos_MoneroSyncAccountsInfos$deserialize_closure0() {
    },
    MoneroSyncAccountsInfos_toCbor_closure: function MoneroSyncAccountsInfos_toCbor_closure() {
    },
    MoneroSyncAccountsInfos_toCbor_closure0: function MoneroSyncAccountsInfos_toCbor_closure0() {
    },
    MoneroSyncAccountIndexInfo: function MoneroSyncAccountIndexInfo(t0, t1) {
      this.index = t0;
      this.startHeight = t1;
    },
    MoneroSyncBlockResponseType: function MoneroSyncBlockResponseType(t0, t1, t2) {
      this.tag = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    MoneroSyncBlocksResponse: function MoneroSyncBlocksResponse() {
    },
    MoneroBlocksInfoResponse: function MoneroBlocksInfoResponse(t0, t1, t2, t3) {
      var _ = this;
      _.totalBlock = t0;
      _.totalTxes = t1;
      _.status = t2;
      _.type = t3;
    },
    MoneroSyncAccountResponse: function MoneroSyncAccountResponse(t0, t1, t2) {
      this.txIds = t0;
      this.blockPosition = t1;
      this.type = t2;
    },
    MoneroSyncAccountResponse_toCbor_closure: function MoneroSyncAccountResponse_toCbor_closure() {
    },
    MoneroSyncBlockRequestType: function MoneroSyncBlockRequestType(t0, t1, t2) {
      this.tag = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    MoneroSyncBlockRequestType_fromTag_closure: function MoneroSyncBlockRequestType_fromTag_closure(t0) {
      this.tag = t0;
    },
    MoneroSyncBlockRequestType_fromTag_closure0: function MoneroSyncBlockRequestType_fromTag_closure0() {
    },
    MoneroSyncBlocksRequest: function MoneroSyncBlocksRequest() {
    },
    MoneroSyncTrackBlocksRequest: function MoneroSyncTrackBlocksRequest(t0, t1) {
      this.blockPossitions = t0;
      this.type = t1;
    },
    MoneroSyncTrackBlocksRequest_MoneroSyncTrackBlocksRequest$deserialize_closure: function MoneroSyncTrackBlocksRequest_MoneroSyncTrackBlocksRequest$deserialize_closure() {
    },
    MoneroSyncBlocksInfoRequest: function MoneroSyncBlocksInfoRequest(t0, t1) {
      this.height = t0;
      this.type = t1;
    },
    _MoneroAccountBlocksTracker_Object_CborSerializable: function _MoneroAccountBlocksTracker_Object_CborSerializable() {
    },
    _MoneroBatchProcessTxesResponse_Object_CborSerializable: function _MoneroBatchProcessTxesResponse_Object_CborSerializable() {
    },
    _MoneroBlockTrackingPossition_Object_CborSerializable: function _MoneroBlockTrackingPossition_Object_CborSerializable() {
    },
    _MoneroBlockTrackingPossition_Object_CborSerializable_Equatable: function _MoneroBlockTrackingPossition_Object_CborSerializable_Equatable() {
    },
    _MoneroOutputDetails_Object_CborSerializable: function _MoneroOutputDetails_Object_CborSerializable() {
    },
    _MoneroOutputDetails_Object_CborSerializable_Equatable: function _MoneroOutputDetails_Object_CborSerializable_Equatable() {
    },
    _MoneroProcessTxIdsRequest_Object_CborSerializable: function _MoneroProcessTxIdsRequest_Object_CborSerializable() {
    },
    _MoneroProcessTxesResponse_Object_CborSerializable: function _MoneroProcessTxesResponse_Object_CborSerializable() {
    },
    _MoneroSyncAccountIndexInfo_Object_CborSerializable: function _MoneroSyncAccountIndexInfo_Object_CborSerializable() {
    },
    _MoneroSyncAccountIndexInfo_Object_CborSerializable_Equatable: function _MoneroSyncAccountIndexInfo_Object_CborSerializable_Equatable() {
    },
    _MoneroSyncAccountsInfos_Object_CborSerializable: function _MoneroSyncAccountsInfos_Object_CborSerializable() {
    },
    _MoneroSyncAccountsInfos_Object_CborSerializable_Equatable: function _MoneroSyncAccountsInfos_Object_CborSerializable_Equatable() {
    },
    _MoneroSyncBlocksRequest_Object_CborSerializable: function _MoneroSyncBlocksRequest_Object_CborSerializable() {
    },
    _MoneroSyncBlocksResponse_Object_CborSerializable: function _MoneroSyncBlocksResponse_Object_CborSerializable() {
    },
    _MoneroTxInfo_Object_CborSerializable: function _MoneroTxInfo_Object_CborSerializable() {
    },
    _MoneroUnlockedPaymentRequestDetails_Object_CborSerializable: function _MoneroUnlockedPaymentRequestDetails_Object_CborSerializable() {
    },
    _MoneroViewAccountDetails_Object_Equatable: function _MoneroViewAccountDetails_Object_Equatable() {
    },
    _MoneroViewAccountDetails_Object_Equatable_CborSerializable: function _MoneroViewAccountDetails_Object_Equatable_CborSerializable() {
    },
    _MoneroViewPrimaryAccountDetails_Object_CborSerializable: function _MoneroViewPrimaryAccountDetails_Object_CborSerializable() {
    },
    _MoneroViewPrimaryAccountDetails_Object_CborSerializable_Equatable: function _MoneroViewPrimaryAccountDetails_Object_CborSerializable_Equatable() {
    },
    MoneroRignOutput: function MoneroRignOutput(t0, t1) {
      this.orderedIndexes = t0;
      this.indexes = t1;
    },
    MoneroRignOutput_toCbor_closure: function MoneroRignOutput_toCbor_closure() {
    },
    MoneroRignOutput_toCbor_closure0: function MoneroRignOutput_toCbor_closure0() {
    },
    _MoneroRignOutput_Object_CborSerializable: function _MoneroRignOutput_Object_CborSerializable() {
    },
    MoneroTxDestinationWithProof: function MoneroTxDestinationWithProof(t0, t1, t2) {
      this.address = t0;
      this.amount = t1;
      this.proof = t2;
    },
    MoneroSignedTxData: function MoneroSignedTxData(t0, t1, t2) {
      this.txID = t0;
      this.txKeys = t1;
      this.indexes = t2;
    },
    MoneroSignedTxData_toCbor_closure: function MoneroSignedTxData_toCbor_closure() {
    },
    MoneroSignedTxData_toCbor_closure0: function MoneroSignedTxData_toCbor_closure0() {
    },
    MoneroSigningTxResponse: function MoneroSigningTxResponse(t0, t1, t2) {
      this.txData = t0;
      this.proofs = t1;
      this.txBytes = t2;
    },
    MoneroSigningTxResponse_toCbor_closure: function MoneroSigningTxResponse_toCbor_closure() {
    },
    _MoneroSignedTxData_Object_CborSerializable: function _MoneroSignedTxData_Object_CborSerializable() {
    },
    _MoneroSigningTxResponse_Object_CborSerializable: function _MoneroSigningTxResponse_Object_CborSerializable() {
    },
    _MoneroTxDestinationWithProof_Object_CborSerializable: function _MoneroTxDestinationWithProof_Object_CborSerializable() {
    },
    TonAccountContextType_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_U0W, new A.TonAccountContextType_fromTag_closure(tag), new A.TonAccountContextType_fromTag_closure0());
    },
    TonAccountContext_TonAccountContext$deserialize(object) {
      var t1, t2,
        decode = A.CborSerializable_decode(null, null, object, type$.CborTagValue_dynamic),
        type = A.TonAccountContextType_fromTag(decode.tags),
        list = A.QuickCborTag_get_getList(decode),
        version = A.WalletVersion_WalletVersion$fromValue(A.ExtractCborList_elementAs(list, 0, type$.String)),
        bouncable = A.ExtractCborList_elementAt(list, 1, type$.bool);
      switch (type.index) {
        case 0:
          if (version.version > 2)
            A.throwExpression(B.WalletException_invalid_account_details_null);
          return new A.TonAccountLegacyContext(B.TonAccountContextType_WFB, version, bouncable);
        case 1:
          t1 = A.ExtractCborList_elementAs(list, 2, type$.int);
          t2 = version.version;
          if (t2 < 3 || t2 > 4)
            A.throwExpression(B.WalletException_invalid_account_details_null);
          return new A.TonAccountSubWalletContext(t1, B.TonAccountContextType_xd9, version, bouncable);
        case 2:
          t1 = A.ExtractCborList_elementAs(list, 2, type$.int);
          if (version !== B.WalletVersion_v5R1_5)
            A.throwExpression(B.WalletException_invalid_account_details_null);
          return new A.TonAccountV5CustomContext(t1, B.TonAccountContextType_mlj, B.WalletVersion_v5R1_5, bouncable);
        case 3:
          t1 = A.ExtractCborList_elementAs(list, 2, type$.int);
          if (version !== B.WalletVersion_v5R1_5)
            A.throwExpression(B.WalletException_invalid_account_details_null);
          return new A.TonAccountV5SubWalletContext(t1, B.TonAccountContextType_s7p, B.WalletVersion_v5R1_5, bouncable);
        default:
          throw A.wrapException(B.WalletException_invalid_account_details_null);
      }
    },
    TonAccountContextType: function TonAccountContextType(t0, t1, t2) {
      this.tag = t0;
      this.index = t1;
      this._core$_name = t2;
    },
    TonAccountContextType_fromTag_closure: function TonAccountContextType_fromTag_closure(t0) {
      this.tag = t0;
    },
    TonAccountContextType_fromTag_closure0: function TonAccountContextType_fromTag_closure0() {
    },
    TonAccountContext: function TonAccountContext() {
    },
    TonAccountLegacyContext: function TonAccountLegacyContext(t0, t1, t2) {
      this.type = t0;
      this.version = t1;
      this.bouncable = t2;
    },
    TonAccountSubWalletContext: function TonAccountSubWalletContext(t0, t1, t2, t3) {
      var _ = this;
      _.subwalletId = t0;
      _.type = t1;
      _.version = t2;
      _.bouncable = t3;
    },
    TonAccountV5CustomContext: function TonAccountV5CustomContext(t0, t1, t2, t3) {
      var _ = this;
      _.walletId = t0;
      _.type = t1;
      _.version = t2;
      _.bouncable = t3;
    },
    TonAccountV5SubWalletContext: function TonAccountV5SubWalletContext(t0, t1, t2, t3) {
      var _ = this;
      _.subwalletId = t0;
      _.type = t1;
      _.version = t2;
      _.bouncable = t3;
    },
    _TonAccountContext_Object_CborSerializable: function _TonAccountContext_Object_CborSerializable() {
    },
    _TonAccountContext_Object_CborSerializable_Equatable: function _TonAccountContext_Object_CborSerializable_Equatable() {
    },
    ABICoder_ABICoder$fromType(type, $T) {
      var correctType, t1;
      if (B.JSString_methods.endsWith$1(type, "]"))
        correctType = "array";
      else if (B.JSString_methods.startsWith$1(type, "bytes"))
        correctType = "bytes";
      else
        correctType = B.JSString_methods.startsWith$1(type, "uint") || B.JSString_methods.startsWith$1(type, "int") ? "number" : null;
      if (correctType == null)
        correctType = type;
      if (!B.Map_zPayp.containsKey$1(correctType))
        throw A.wrapException(A.SolidityAbiException$("Unsuported ABI type. codec not found", A.LinkedHashMap_LinkedHashMap$_literal(["type", type], type$.String, type$.dynamic)));
      t1 = B.Map_zPayp.$index(0, correctType);
      t1.toString;
      return $T._eval$1("ABICoder<0>")._as(t1);
    },
    EIP712Version_fromVersion(version) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_Gbr, new A.EIP712Version_fromVersion_closure(version), new A.EIP712Version_fromVersion_closure0(version));
    },
    EIP712Base_EIP712Base$fromJson(json) {
      var version = A.EIP712Version_fromVersion(A._asIntQ(json.$index(0, "version")));
      switch (version) {
        case B.EIP712Version_1:
          return A.EIP712Legacy_EIP712Legacy$fromJson(type$.List_dynamic._as(json.$index(0, "types")));
        default:
          return A.Eip712TypedData_Eip712TypedData$fromJson(json, version);
      }
    },
    Eip712TypedData_Eip712TypedData$fromJson(json, version) {
      var jsonTypes, types, i, values, eip712Types, t1, t2, t3, exception;
      try {
        t1 = type$.String;
        jsonTypes = A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(json.$index(0, "types")), t1, type$.List_dynamic);
        types = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List_Eip712TypeDetails);
        for (t1 = jsonTypes.get$entries(), t1 = t1.get$iterator(t1), t2 = type$.Eip712TypeDetails; t1.moveNext$0();) {
          i = t1.get$current();
          values = i.value;
          t3 = J.map$1$1$ax(values, new A.Eip712TypedData_Eip712TypedData$fromJson_closure(), t2);
          eip712Types = A.List_List$of(t3, true, t3.$ti._eval$1("ListIterable.E"));
          J.$indexSet$ax(types, i.key, eip712Types);
        }
        t1 = A._asString(json.$index(0, "primaryType"));
        t2 = type$.Map_String_dynamic;
        t3 = t2._as(json.$index(0, "domain"));
        t2 = t2._as(json.$index(0, "message"));
        return new A.Eip712TypedData(types, t1, t3, t2, version);
      } catch (exception) {
        throw A.wrapException(B.SolidityAbiException_j1u);
      }
    },
    EIP712Legacy_EIP712Legacy$fromJson(messages) {
      var t1 = J.map$1$1$ax(messages, new A.EIP712Legacy_EIP712Legacy$fromJson_closure(), type$.Eip712TypedDataV1);
      return new A.EIP712Legacy(A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")));
    },
    _EIP712Utils_ensureBytes(type, value) {
      if (!B.JSString_methods.startsWith$1(type, "bytes"))
        throw A.wrapException(B.SolidityAbiException_2Zi);
      if (typeof value != "string" && !type$.List_int._is(value))
        throw A.wrapException(B.SolidityAbiException_2Zi);
      if (type$.List_int._is(value))
        return A.BytesUtils_toBytes(value, false);
      return A.StringUtils_toBytes(A._asString(value));
    },
    _EIP712Utils_ensureCorrectValues(type, value) {
      var childType, t2,
        match = $.$get$_EIP712Utils_arrayRegex().firstMatch$1(type),
        t1 = match == null;
      if (t1)
        childType = null;
      else {
        t2 = match._match;
        if (1 >= t2.length)
          return A.ioore(t2, 1);
        childType = t2[1];
      }
      if (!t1) {
        if (!type$.List_dynamic._is(value))
          throw A.wrapException(A.SolidityAbiException$("Invalid data provided for array codec.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type, "value", value], type$.String, type$.dynamic)));
        t1 = J.map$1$1$ax(value, new A._EIP712Utils_ensureCorrectValues_closure(childType), type$.dynamic);
        return A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
      }
      if (B.JSString_methods.startsWith$1(type, "uint") || B.JSString_methods.startsWith$1(type, "int"))
        return A.BigintUtils_parse(value);
      switch (type) {
        case "address":
          return A._EIP712Utils_ensureIsAddress(value);
        case "bool":
          if (!A._isBool(value))
            A.throwExpression(A.SolidityAbiException$("Invalid data provided for boolean codec.", A.LinkedHashMap_LinkedHashMap$_literal(["input", value], type$.String, type$.dynamic)));
          return value;
        case "string":
          if (typeof value != "string")
            A.throwExpression(A.SolidityAbiException$("invalid data provided for string codec.", A.LinkedHashMap_LinkedHashMap$_literal(["input", value], type$.String, type$.dynamic)));
          return value;
        default:
          if (B.JSString_methods.startsWith$1(type, "bytes"))
            return A._EIP712Utils_ensureBytes(type, value);
          throw A.wrapException(A.SolidityAbiException$("Unsuported type. codec not found.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type], type$.String, type$.dynamic)));
      }
    },
    _EIP712Utils_eip712TypedDataV1ValueToJson(type, value) {
      var childType, t2,
        match = $.$get$_EIP712Utils_arrayRegex().firstMatch$1(type),
        t1 = match == null;
      if (t1)
        childType = null;
      else {
        t2 = match._match;
        if (1 >= t2.length)
          return A.ioore(t2, 1);
        childType = t2[1];
      }
      if (!t1) {
        if (!type$.List_dynamic._is(value))
          throw A.wrapException(A.SolidityAbiException$("Invalid data provided for array codec.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type, "value", value], type$.String, type$.dynamic)));
        t1 = J.map$1$1$ax(value, new A._EIP712Utils_eip712TypedDataV1ValueToJson_closure(childType), type$.dynamic);
        return A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
      }
      if (B.JSString_methods.startsWith$1(type, "uint") || B.JSString_methods.startsWith$1(type, "int"))
        return J.toString$0$(value);
      switch (type) {
        case "address":
          if (typeof value == "string")
            return value;
          if (value instanceof A.SolidityAddress)
            return value._hexAddress;
          break;
        case "bool":
        case "string":
          return value;
        default:
          return A.BytesUtils_toHexString(type$.List_int._as(value), true, "0x");
      }
    },
    _EIP712Utils_ensureIsAddress(value) {
      var t1, exception;
      try {
        if (value instanceof A.SolidityAddress)
          return value;
        if (type$.List_int._is(value)) {
          t1 = A.SolidityAddress_SolidityAddress(A.BytesUtils_toHexString(value, true, null));
          return t1;
        } else if (typeof value == "string") {
          t1 = $.$get$StringUtils__hexBytesRegex();
          if (t1._nativeRegExp.test(value)) {
            t1 = A.SolidityAddress_SolidityAddress(value);
            return t1;
          }
          t1 = A.TronAddress_TronAddress(value);
          return t1;
        }
      } catch (exception) {
      }
      throw A.wrapException(A.SolidityAbiException$("Invalid data provided for address codec.", A.LinkedHashMap_LinkedHashMap$_literal(["input", value], type$.String, type$.dynamic)));
    },
    _EIP712Utils_encodeStruct(typedData, type, data) {
      var t2, t3, t4, value, encodedValue,
        types = A._setArrayType(["bytes32"], type$.JSArray_String),
        inputBytes = [A._EIP712Utils_getMethodSigature(typedData, type)],
        t1 = typedData.types.$index(0, type);
      t1.toString;
      t1 = J.get$iterator$ax(t1);
      t2 = typedData.version === B.EIP712Version_3;
      for (; t1.moveNext$0();) {
        t3 = t1.get$current();
        t4 = t3.name;
        if (data.$index(0, t4) == null) {
          if (t2)
            continue;
          throw A.wrapException(A.SolidityAbiException$("Invalid Eip712TypedData data. data mising for field " + t4, A.LinkedHashMap_LinkedHashMap$_literal(["data", data, "field", t3], type$.String, type$.dynamic)));
        }
        value = data.$index(0, t4);
        encodedValue = A._EIP712Utils_encodeValue(typedData, t3.type, value);
        B.JSArray_methods.add$1(types, encodedValue.item1);
        inputBytes.push(encodedValue.item2);
      }
      return A._EIP712Utils_abiEncode(types, inputBytes);
    },
    _EIP712Utils_getDependencies(typedData, type, dependencies) {
      var t1, actualType, t2, t3,
        match = $.$get$_EIP712Utils_typeRegex().firstMatch$1(type);
      if (match != null) {
        t1 = match._match;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = t1[0];
        t1.toString;
        actualType = t1;
      } else
        actualType = type;
      if (J.contains$1$asx(dependencies, actualType))
        return dependencies;
      t1 = typedData.types;
      if (t1.$index(0, actualType) == null)
        return dependencies;
      t2 = type$.JSArray_String;
      t3 = A._setArrayType([actualType], t2);
      t1 = t1.$index(0, actualType);
      t1.toString;
      B.JSArray_methods.addAll$1(t3, J.fold$1$2$ax(t1, A._setArrayType([], t2), new A._EIP712Utils_getDependencies_closure(typedData), type$.List_String));
      return t3;
    },
    _EIP712Utils_extractArrayType(typeName) {
      var t1, t2, t3,
        match = $.$get$_EIP712Utils_arrayRegex().firstMatch$1(typeName);
      if (match == null)
        return null;
      t1 = match._match;
      t2 = t1.length;
      if (1 >= t2)
        return A.ioore(t1, 1);
      t3 = t1[1];
      t3.toString;
      if (2 >= t2)
        return A.ioore(t1, 2);
      t1 = t1[2];
      return new A.Tuple(t3, A.int_parse(t1 == null ? "0" : t1, null), type$.Tuple_String_int);
    },
    _EIP712Utils_encodeValue(typedData, type, data) {
      var t1, t2, encodedData, t3, t4,
        _s7_ = "bytes32",
        isArray = A._EIP712Utils_extractArrayType(type);
      if (isArray != null) {
        if (!type$.List_dynamic._is(data))
          throw A.wrapException(A.SolidityAbiException$("Invalid data provided for array codec.", A.LinkedHashMap_LinkedHashMap$_literal(["input", data], type$.String, type$.dynamic)));
        t1 = isArray.item2;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 0 && J.get$length$asx(data) !== t1)
          throw A.wrapException(A.SolidityAbiException$("Invalid array length: expected " + A.S(t1) + ", but got " + J.get$length$asx(data), A.LinkedHashMap_LinkedHashMap$_literal(["input", data], type$.String, type$.dynamic)));
        t1 = type$.Tuple_String_dynamic;
        t2 = J.map$1$1$ax(data, new A._EIP712Utils_encodeValue_closure(typedData, isArray), t1);
        encodedData = A.List_List$of(t2, true, t2.$ti._eval$1("ListIterable.E"));
        t2 = A._arrayInstanceType(encodedData);
        t3 = t2._eval$1("MappedListIterable<1,String>");
        t4 = t2._eval$1("MappedListIterable<1,@>");
        return new A.Tuple(_s7_, A.Keccack_hash(A._EIP712Utils_abiEncode(A.List_List$of(new A.MappedListIterable(encodedData, t2._eval$1("String(1)")._as(new A._EIP712Utils_encodeValue_closure0()), t3), true, t3._eval$1("ListIterable.E")), A.List_List$of(new A.MappedListIterable(encodedData, t2._eval$1("@(1)")._as(new A._EIP712Utils_encodeValue_closure1()), t4), true, t4._eval$1("ListIterable.E"))), 32), t1);
      }
      if (typedData.types.$index(0, type) != null)
        return new A.Tuple(_s7_, A.Keccack_hash(A._EIP712Utils_encodeStruct(typedData, type, type$.Map_String_dynamic._as(data)), 32), type$.Tuple_String_dynamic);
      t1 = type === "string";
      if (t1 || type === "bytes") {
        t1 = t1 ? A.StringUtils_encode(A._asString(data), B.StringEncoding_1) : data;
        return new A.Tuple(_s7_, A.Keccack_hash(type$.List_int._as(t1), 32), type$.Tuple_String_dynamic);
      }
      return new A.Tuple(type, data, type$.Tuple_String_dynamic);
    },
    _EIP712Utils_abiEncode(types, inputs) {
      var i, t2, t3, t1 = [];
      for (i = 0; i < types.length; ++i) {
        t2 = types[i];
        if (!(i < inputs.length))
          return A.ioore(inputs, i);
        t1.push(A._EIP712Utils_ensureCorrectValues(t2, inputs[i]));
      }
      t2 = A._arrayInstanceType(types);
      t3 = t2._eval$1("MappedListIterable<1,AbiParameter>");
      return new A.AbiParameter("", "tuple", A.List_List$of(new A.MappedListIterable(types, t2._eval$1("AbiParameter(1)")._as(new A._EIP712Utils_abiEncode_closure()), t3), true, t3._eval$1("ListIterable.E"))).abiEncode$1(t1).encoded;
    },
    _EIP712Utils_legacyV1encode(types, inputs) {
      var t1 = A._arrayInstanceType(types),
        t2 = t1._eval$1("MappedListIterable<1,AbiParameter>");
      return new A.AbiParameter("", "tuple", A.List_List$of(new A.MappedListIterable(types, t1._eval$1("AbiParameter(1)")._as(new A._EIP712Utils_legacyV1encode_closure()), t2), true, t2._eval$1("ListIterable.E"))).legacyEip712Encode$2(inputs, false).encoded;
    },
    _EIP712Utils_getMethodSigature(typedData, type) {
      var t1,
        dependencies = A.List_List$from(A._EIP712Utils_getDependencies(typedData, type, B.List_empty3), true, type$.String);
      B.JSArray_methods.sort$0(dependencies);
      t1 = A._arrayInstanceType(dependencies);
      return A.Keccack_hash(A.StringUtils_encode(new A.MappedListIterable(dependencies, t1._eval$1("String(1)")._as(new A._EIP712Utils_getMethodSigature_closure(typedData)), t1._eval$1("MappedListIterable<1,String>")).join$1(0, ""), B.StringEncoding_1), 32);
    },
    SolidityAbiException$(message, details) {
      return new A.SolidityAbiException(message, details);
    },
    _ABIUtils_bytesSize($name) {
      var t1, size, _null = null;
      A._ABIValidator_validateBytes($name, _null, _null, _null);
      t1 = $.$get$_ABIValidator_sizeDetectRegex().firstMatch$1($name);
      if (t1 == null)
        size = _null;
      else {
        t1 = t1._match;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        size = t1[0];
      }
      if (size == null)
        return _null;
      return A.int_parse(size, _null);
    },
    _ABIUtils_numericSize($name) {
      var size, bitSize,
        t1 = $.$get$_ABIValidator_sizeDetectRegex().firstMatch$1($name);
      if (t1 == null)
        size = null;
      else {
        t1 = t1._match;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        size = t1[0];
      }
      if (size == null)
        return null;
      bitSize = A.int_parse(size, null);
      return B.JSInt_methods._tdivFast$1(bitSize, 8);
    },
    _ABIUtils_encodeDynamicParams(encodedParams) {
      var staticSize, _i, t2, encodedParam, dynamicSize, t3, t4, t5,
        t1 = type$.JSArray_EncoderResult,
        staticParams = A._setArrayType([], t1),
        dynamicParams = A._setArrayType([], t1);
      for (t1 = encodedParams.length, staticSize = 0, _i = 0; t2 = encodedParams.length, _i < t2; encodedParams.length === t1 || (0, A.throwConcurrentModificationError)(encodedParams), ++_i) {
        encodedParam = encodedParams[_i];
        staticSize = encodedParam.isDynamic ? staticSize + 32 : staticSize + J.get$length$asx(encodedParam.encoded);
      }
      for (dynamicSize = 0, _i = 0; _i < encodedParams.length; encodedParams.length === t2 || (0, A.throwConcurrentModificationError)(encodedParams), ++_i) {
        encodedParam = encodedParams[_i];
        if (encodedParam.isDynamic) {
          t1 = A._BigIntImpl__BigIntImpl$from(staticSize + dynamicSize);
          A._ABIValidator_isValidNumber("uint256", t1);
          B.JSArray_methods.add$1(staticParams, new A.EncoderResult(false, A.BigintUtils_toBytes(t1, 32, B.C_Endian)));
          B.JSArray_methods.add$1(dynamicParams, encodedParam);
          dynamicSize += J.get$length$asx(encodedParam.encoded);
        } else
          B.JSArray_methods.add$1(staticParams, encodedParam);
      }
      t1 = type$.List_int_Function_EncoderResult;
      t2 = type$.MappedListIterable_of_EncoderResult_and_List_int;
      t3 = t2._eval$1("Iterable<int>(Iterable.E)");
      t4 = t2._eval$1("ExpandIterable<Iterable.E,int>");
      t5 = A.List_List$of(new A.ExpandIterable(new A.MappedListIterable(staticParams, t1._as(new A._ABIUtils_encodeDynamicParams_closure()), t2), t3._as(new A._ABIUtils_encodeDynamicParams_closure0()), t4), true, type$.int);
      B.JSArray_methods.addAll$1(t5, new A.ExpandIterable(new A.MappedListIterable(dynamicParams, t1._as(new A._ABIUtils_encodeDynamicParams_closure1()), t2), t3._as(new A._ABIUtils_encodeDynamicParams_closure2()), t4));
      return t5;
    },
    _ABIUtils_toArrayType(abi) {
      var t1 = abi.type,
        arrayParenthesisStart = B.JSString_methods.lastIndexOf$1(t1, "["),
        arrayParamType = B.JSString_methods.substring$2(t1, 0, arrayParenthesisStart),
        sizeString = B.JSString_methods.substring$1(t1, arrayParenthesisStart);
      if (sizeString !== "[]")
        if (A.Primitives_parseInt(B.JSString_methods.substring$2(sizeString, 1, sizeString.length - 1), null) == null)
          throw A.wrapException(B.SolidityAbiException_DFh);
      return new A.Tuple(new A.AbiParameter("", arrayParamType, abi.components), -1, type$.Tuple_AbiParameter_int);
    },
    _ABIValidator_validateBytes(typeName, bytes, maxLength, minLength) {
      if (B.JSString_methods.contains$1(typeName, "bytes")) {
        if (bytes != null) {
          if (maxLength != null)
            if (J.get$length$asx(bytes) > maxLength)
              throw A.wrapException(B.SolidityAbiException_2No);
          if (minLength != null)
            if (J.get$length$asx(bytes) < minLength)
              throw A.wrapException(B.SolidityAbiException_2No);
        }
      } else
        throw A.wrapException(B.SolidityAbiException_2Zi);
    },
    _ABIValidator_isValidNumber(type, value) {
      var spl, spl0, e, t1, t2, exception, bitLength = null, sign = null;
      try {
        if (B.JSString_methods.startsWith$1(type, "int")) {
          spl = A._setArrayType(type.split("int"), type$.JSArray_String);
          bitLength = A.int_parse(J.$index$asx(spl, 1), null);
          sign = true;
        } else if (B.JSString_methods.startsWith$1(type, "uint")) {
          spl0 = A._setArrayType(type.split("uint"), type$.JSArray_String);
          bitLength = A.int_parse(J.$index$asx(spl0, 1), null);
          sign = false;
        } else {
          t1 = A.SolidityAbiException$("Invalid type name provided for number codec.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type, "value", value], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
        if (A.boolConversionCheck(sign)) {
          if (value.toSigned$1(0, bitLength).$eq(0, value))
            return;
        } else {
          t1 = A._asInt(bitLength);
          t2 = $.$get$_BigIntImpl_one();
          if (value.$and(0, t2.$shl(0, t1).$sub(0, t2)).$eq(0, value))
            return;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        if (e instanceof A.SolidityAbiException)
          throw exception;
      }
      throw A.wrapException(A.SolidityAbiException$("Invalid data provided for number codec.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type, "value", value], type$.String, type$.dynamic)));
    },
    AbiParameter: function AbiParameter(t0, t1, t2) {
      this.name = t0;
      this.type = t1;
      this.components = t2;
    },
    AbiParameter_isDynamic_closure: function AbiParameter_isDynamic_closure() {
    },
    EncoderResult: function EncoderResult(t0, t1) {
      this.isDynamic = t0;
      this.encoded = t1;
    },
    EIP712Version: function EIP712Version(t0) {
      this.version = t0;
    },
    EIP712Version_fromVersion_closure: function EIP712Version_fromVersion_closure(t0) {
      this.version = t0;
    },
    EIP712Version_fromVersion_closure0: function EIP712Version_fromVersion_closure0(t0) {
      this.version = t0;
    },
    EIP712Version_fromVersion__closure: function EIP712Version_fromVersion__closure() {
    },
    Eip712TypeDetails: function Eip712TypeDetails(t0, t1) {
      this.name = t0;
      this.type = t1;
    },
    Eip712TypedData: function Eip712TypedData(t0, t1, t2, t3, t4) {
      var _ = this;
      _.types = t0;
      _.primaryType = t1;
      _.domain = t2;
      _.message = t3;
      _.version = t4;
    },
    Eip712TypedData_Eip712TypedData$fromJson_closure: function Eip712TypedData_Eip712TypedData$fromJson_closure() {
    },
    Eip712TypedData_toJson_closure: function Eip712TypedData_toJson_closure() {
    },
    Eip712TypedData_toJson__closure: function Eip712TypedData_toJson__closure() {
    },
    Eip712TypedDataV1: function Eip712TypedDataV1(t0, t1, t2) {
      this.name = t0;
      this.type = t1;
      this.value = t2;
    },
    EIP712Legacy: function EIP712Legacy(t0) {
      this.typesData = t0;
    },
    EIP712Legacy_EIP712Legacy$fromJson_closure: function EIP712Legacy_EIP712Legacy$fromJson_closure() {
    },
    EIP712Legacy_encode_closure: function EIP712Legacy_encode_closure() {
    },
    EIP712Legacy_encode_closure0: function EIP712Legacy_encode_closure0() {
    },
    EIP712Legacy_encode_closure1: function EIP712Legacy_encode_closure1() {
    },
    EIP712Legacy_toJson_closure: function EIP712Legacy_toJson_closure() {
    },
    _EIP712Utils_ensureCorrectValues_closure: function _EIP712Utils_ensureCorrectValues_closure(t0) {
      this.childType = t0;
    },
    _EIP712Utils_eip712TypedDataV1ValueToJson_closure: function _EIP712Utils_eip712TypedDataV1ValueToJson_closure(t0) {
      this.childType = t0;
    },
    _EIP712Utils_getDependencies_closure: function _EIP712Utils_getDependencies_closure(t0) {
      this.typedData = t0;
    },
    _EIP712Utils_getDependencies__closure: function _EIP712Utils_getDependencies__closure(t0) {
      this.previous = t0;
    },
    _EIP712Utils_encodeValue_closure: function _EIP712Utils_encodeValue_closure(t0, t1) {
      this.typedData = t0;
      this.isArray = t1;
    },
    _EIP712Utils_encodeValue_closure0: function _EIP712Utils_encodeValue_closure0() {
    },
    _EIP712Utils_encodeValue_closure1: function _EIP712Utils_encodeValue_closure1() {
    },
    _EIP712Utils_abiEncode_closure: function _EIP712Utils_abiEncode_closure() {
    },
    _EIP712Utils_legacyV1encode_closure: function _EIP712Utils_legacyV1encode_closure() {
    },
    _EIP712Utils_getMethodSigature_closure: function _EIP712Utils_getMethodSigature_closure(t0) {
      this.typedData = t0;
    },
    _EIP712Utils_getMethodSigature__closure: function _EIP712Utils_getMethodSigature__closure() {
    },
    SolidityAbiException: function SolidityAbiException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    AddressCoder: function AddressCoder() {
    },
    ArrayCoder: function ArrayCoder() {
    },
    ArrayCoder_abiEncode_closure: function ArrayCoder_abiEncode_closure(t0) {
      this.param = t0;
    },
    ArrayCoder_abiEncode_closure0: function ArrayCoder_abiEncode_closure0() {
    },
    ArrayCoder_legacyEip712Encode_closure: function ArrayCoder_legacyEip712Encode_closure(t0) {
      this.param = t0;
    },
    ArrayCoder_legacyEip712Encode_closure0: function ArrayCoder_legacyEip712Encode_closure0() {
    },
    BooleanCoder: function BooleanCoder() {
    },
    BytesCoder: function BytesCoder() {
    },
    FunctionCoder: function FunctionCoder() {
    },
    NumbersCoder: function NumbersCoder() {
    },
    StringCoder: function StringCoder() {
    },
    TupleCoder: function TupleCoder() {
    },
    TupleCoder_abiEncode_closure: function TupleCoder_abiEncode_closure() {
    },
    TupleCoder_legacyEip712Encode_closure: function TupleCoder_legacyEip712Encode_closure() {
    },
    _ABIUtils_encodeDynamicParams_closure: function _ABIUtils_encodeDynamicParams_closure() {
    },
    _ABIUtils_encodeDynamicParams_closure0: function _ABIUtils_encodeDynamicParams_closure0() {
    },
    _ABIUtils_encodeDynamicParams_closure1: function _ABIUtils_encodeDynamicParams_closure1() {
    },
    _ABIUtils_encodeDynamicParams_closure2: function _ABIUtils_encodeDynamicParams_closure2() {
    },
    SolidityAddress_SolidityAddress(address) {
      var t1, t2, wihtoutPrefix, t3;
      address = A.StringUtils_strip0x(address);
      if (address.length > 40 && B.JSString_methods.startsWith$1(address.toLowerCase(), "41"))
        address = B.JSString_methods.substring$1(address, 2);
      t1 = type$.String;
      t2 = type$.dynamic;
      new A.EthAddrDecoder().decodeAddr$2("0x" + address, A.LinkedHashMap_LinkedHashMap$_literal(["skip_chksum_enc", true], t1, t2));
      wihtoutPrefix = A.StringUtils_strip0x(address);
      t3 = $.$get$StringUtils__hexBytesRegex();
      if (!t3._nativeRegExp.test(wihtoutPrefix))
        A.throwExpression(A.AddressConverterException$("Invalid Ethereum address.", A.LinkedHashMap_LinkedHashMap$_literal(["address", address], t1, t2)));
      A.AddrDecUtils_validateLength(wihtoutPrefix, 40);
      return new A.SolidityAddress("0x" + A.EthAddrUtils__checksumEncode(wihtoutPrefix));
    },
    SolidityAddress: function SolidityAddress(t0) {
      this._hexAddress = t0;
    },
    TronAddress_TronAddress(address) {
      var decode, t1, decode0, t2, addr, exception, _null = null, visible = null;
      try {
        if (visible == null) {
          t2 = $.$get$StringUtils__hexBytesRegex();
          if (t2._nativeRegExp.test(address)) {
            t1 = A.BytesUtils_fromHexString(address);
            addr = A.TrxAddressUtils_fromHexBytes(t1);
            t1 = A.BytesUtils_toHexString(t1, true, _null);
            return new A.TronAddress(addr, t1);
          }
          decode = new A.TrxAddrDecoder().decodeAddr$1(address);
          t1 = A.List_List$of(B.List_65, true, type$.int);
          J.addAll$1$ax(t1, decode);
          t1 = A.BytesUtils_toHexString(t1, true, _null);
          return new A.TronAddress(address, t1);
        } else if (A.boolConversionCheck(visible)) {
          decode0 = new A.TrxAddrDecoder().decodeAddr$1(address);
          t2 = A.List_List$of(B.List_65, true, type$.int);
          J.addAll$1$ax(t2, decode0);
          t1 = A.BytesUtils_toHexString(t2, true, _null);
          return new A.TronAddress(address, t1);
        } else {
          t1 = A.BytesUtils_fromHexString(address);
          addr = A.TrxAddressUtils_fromHexBytes(t1);
          t1 = A.BytesUtils_toHexString(t1, true, _null);
          return new A.TronAddress(addr, t1);
        }
      } catch (exception) {
        t1 = A.LinkedHashMap_LinkedHashMap$_literal(["input", address, "visible", visible], type$.String, type$.dynamic);
        throw A.wrapException(new A.TronPluginException("invalid tron address", t1));
      }
    },
    TronAddress: function TronAddress(t0, t1) {
      this._address = t0;
      this._hexAddress = t1;
    },
    TronPluginException: function TronPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    _parseUri(uri) {
      return uri;
    },
    _validateArgList(method, args) {
      var numArgs, i, numArgs0, message, t1, t2, t3, t4;
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new A.StringBuffer("");
        t1 = "" + (method + "(");
        message._contents = t1;
        t2 = A._arrayInstanceType(args);
        t3 = t2._eval$1("SubListIterable<1>");
        t4 = new A.SubListIterable(args, 0, numArgs, t3);
        t4.SubListIterable$3(args, 0, numArgs, t2._precomputed1);
        t3 = t1 + new A.MappedListIterable(t4, t3._eval$1("String(ListIterable.E)")._as(new A._validateArgList_closure()), t3._eval$1("MappedListIterable<ListIterable.E,String>")).join$1(0, ", ");
        message._contents = t3;
        message._contents = t3 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw A.wrapException(A.ArgumentError$(message.toString$0(0), null));
      }
    },
    Context: function Context(t0, t1) {
      this.style = t0;
      this._context$_current = t1;
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    InternalStyle: function InternalStyle() {
    },
    ParsedPath_ParsedPath$parse(path, style) {
      var t1, parts, separators, t2, start, i,
        root = style.getRoot$1(path);
      style.isRootRelative$1(path);
      if (root != null)
        path = B.JSString_methods.substring$1(path, root.length);
      t1 = type$.JSArray_String;
      parts = A._setArrayType([], t1);
      separators = A._setArrayType([], t1);
      t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t2 = style.isSeparator$1(path.charCodeAt(0));
      } else
        t2 = false;
      if (t2) {
        if (0 >= t1)
          return A.ioore(path, 0);
        B.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        B.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (i = start; i < t1; ++i)
        if (style.isSeparator$1(path.charCodeAt(i))) {
          B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(path, start, i));
          B.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        B.JSArray_methods.add$1(parts, B.JSString_methods.substring$1(path, start));
        B.JSArray_methods.add$1(separators, "");
      }
      return new A.ParsedPath(style, root, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
    },
    PathException$(message) {
      return new A.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    Style__getPlatformStyle() {
      if (A.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      if (!B.JSString_methods.endsWith$1(A.Uri_base().get$path(), "/"))
        return $.$get$Style_url();
      if (A._Uri__Uri(null, "a/b", null, null).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    FileLocation$_(file, offset) {
      if (offset < 0)
        A.throwExpression(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > file._decodedChars.length)
        A.throwExpression(A.RangeError$("Offset " + offset + string$.x20must_ + file.get$length(0) + "."));
      return new A.FileLocation(file, offset);
    },
    SourceFile: function SourceFile(t0, t1, t2) {
      var _ = this;
      _.url = t0;
      _._lineStarts = t1;
      _._decodedChars = t2;
      _._cachedLine = null;
    },
    FileLocation: function FileLocation(t0, t1) {
      this.file = t0;
      this.offset = t1;
    },
    _FileSpan: function _FileSpan(t0, t1, t2) {
      this.file = t0;
      this._file$_start = t1;
      this._end = t2;
    },
    Highlighter$(span, color) {
      var t1 = A.Highlighter__collateLines(A._setArrayType([A._Highlight$(span, true)], type$.JSArray__Highlight)),
        t2 = new A.Highlighter_closure(color).call$0(),
        t3 = B.JSInt_methods.toString$0(B.JSArray_methods.get$last(t1).number + 1),
        t4 = A.Highlighter__contiguous(t1) ? 0 : 3,
        t5 = A._arrayInstanceType(t1);
      return new A.Highlighter(t1, t2, null, 1 + Math.max(t3.length, t4), new A.MappedListIterable(t1, t5._eval$1("int(1)")._as(new A.Highlighter$__closure()), t5._eval$1("MappedListIterable<1,int>")).reduce$1(0, B.CONSTANT), !A.isAllTheSame(new A.MappedListIterable(t1, t5._eval$1("Object?(1)")._as(new A.Highlighter$__closure0()), t5._eval$1("MappedListIterable<1,Object?>"))), new A.StringBuffer(""));
    },
    Highlighter__contiguous(lines) {
      var i, thisLine, nextLine;
      for (i = 0; i < lines.length - 1;) {
        thisLine = lines[i];
        ++i;
        nextLine = lines[i];
        if (thisLine.number + 1 !== nextLine.number && J.$eq$(thisLine.url, nextLine.url))
          return false;
      }
      return true;
    },
    Highlighter__collateLines(highlights) {
      var t1, t2, t3,
        highlightsByUrl = A.groupBy(highlights, new A.Highlighter__collateLines_closure(), type$._Highlight, type$.Object);
      for (t1 = highlightsByUrl.get$values(), t2 = A._instanceType(t1), t1 = new A.MappedIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, t2._eval$1("MappedIterator<1,2>")), t2 = t2._rest[1]; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        J.sort$1$ax(t3, new A.Highlighter__collateLines_closure0());
      }
      t1 = highlightsByUrl.get$entries();
      t2 = A._instanceType(t1);
      t3 = t2._eval$1("ExpandIterable<Iterable.E,_Line>");
      return A.List_List$of(new A.ExpandIterable(t1, t2._eval$1("Iterable<_Line>(Iterable.E)")._as(new A.Highlighter__collateLines_closure1()), t3), true, t3._eval$1("Iterable.E"));
    },
    _Highlight$(span, primary) {
      var t1 = new A._Highlight_closure(span).call$0();
      return new A._Highlight(t1, true, null);
    },
    _Highlight__normalizeNewlines(span) {
      var endOffset, t1, i, t2, t3, t4,
        text = span.get$text();
      if (!B.JSString_methods.contains$1(text, "\r\n"))
        return span;
      endOffset = span.get$end().get$offset();
      for (t1 = text.length - 1, i = 0; i < t1; ++i)
        if (text.charCodeAt(i) === 13 && text.charCodeAt(i + 1) === 10)
          --endOffset;
      t1 = span.get$start();
      t2 = span.get$sourceUrl();
      t3 = span.get$end().get$line();
      t2 = A.SourceLocation$(endOffset, span.get$end().get$column(), t3, t2);
      t3 = A.stringReplaceAllUnchecked(text, "\r\n", "\n");
      t4 = span.get$context();
      return A.SourceSpanWithContext$(t1, t2, t3, A.stringReplaceAllUnchecked(t4, "\r\n", "\n"));
    },
    _Highlight__normalizeTrailingNewline(span) {
      var context, text, start, end, t1, t2, t3;
      if (!B.JSString_methods.endsWith$1(span.get$context(), "\n"))
        return span;
      if (B.JSString_methods.endsWith$1(span.get$text(), "\n\n"))
        return span;
      context = B.JSString_methods.substring$2(span.get$context(), 0, span.get$context().length - 1);
      text = span.get$text();
      start = span.get$start();
      end = span.get$end();
      if (B.JSString_methods.endsWith$1(span.get$text(), "\n")) {
        t1 = A.findLineStart(span.get$context(), span.get$text(), span.get$start().get$column());
        t1.toString;
        t1 = t1 + span.get$start().get$column() + span.get$length(span) === span.get$context().length;
      } else
        t1 = false;
      if (t1) {
        text = B.JSString_methods.substring$2(span.get$text(), 0, span.get$text().length - 1);
        if (text.length === 0)
          end = start;
        else {
          t1 = span.get$end().get$offset();
          t2 = span.get$sourceUrl();
          t3 = span.get$end().get$line();
          end = A.SourceLocation$(t1 - 1, A._Highlight__lastLineLength(context), t3 - 1, t2);
          start = span.get$start().get$offset() === span.get$end().get$offset() ? end : span.get$start();
        }
      }
      return A.SourceSpanWithContext$(start, end, text, context);
    },
    _Highlight__normalizeEndOfLine(span) {
      var text, t1, t2, t3, t4;
      if (span.get$end().get$column() !== 0)
        return span;
      if (span.get$end().get$line() === span.get$start().get$line())
        return span;
      text = B.JSString_methods.substring$2(span.get$text(), 0, span.get$text().length - 1);
      t1 = span.get$start();
      t2 = span.get$end().get$offset();
      t3 = span.get$sourceUrl();
      t4 = span.get$end().get$line();
      t3 = A.SourceLocation$(t2 - 1, text.length - B.JSString_methods.lastIndexOf$1(text, "\n") - 1, t4 - 1, t3);
      return A.SourceSpanWithContext$(t1, t3, text, B.JSString_methods.endsWith$1(span.get$context(), "\n") ? B.JSString_methods.substring$2(span.get$context(), 0, span.get$context().length - 1) : span.get$context());
    },
    _Highlight__lastLineLength(text) {
      var t2,
        t1 = text.length;
      if (t1 === 0)
        return 0;
      else {
        t2 = t1 - 1;
        if (!(t2 >= 0))
          return A.ioore(text, t2);
        if (text.charCodeAt(t2) === 10)
          return t1 === 1 ? 0 : t1 - B.JSString_methods.lastIndexOf$2(text, "\n", t1 - 2) - 1;
        else
          return t1 - B.JSString_methods.lastIndexOf$1(text, "\n") - 1;
      }
    },
    Highlighter: function Highlighter(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._lines = t0;
      _._primaryColor = t1;
      _._secondaryColor = t2;
      _._paddingBeforeSidebar = t3;
      _._maxMultilineSpans = t4;
      _._multipleFiles = t5;
      _._highlighter$_buffer = t6;
    },
    Highlighter_closure: function Highlighter_closure(t0) {
      this.color = t0;
    },
    Highlighter$__closure: function Highlighter$__closure() {
    },
    Highlighter$___closure: function Highlighter$___closure() {
    },
    Highlighter$__closure0: function Highlighter$__closure0() {
    },
    Highlighter__collateLines_closure: function Highlighter__collateLines_closure() {
    },
    Highlighter__collateLines_closure0: function Highlighter__collateLines_closure0() {
    },
    Highlighter__collateLines_closure1: function Highlighter__collateLines_closure1() {
    },
    Highlighter__collateLines__closure: function Highlighter__collateLines__closure(t0) {
      this.line = t0;
    },
    Highlighter_highlight_closure: function Highlighter_highlight_closure() {
    },
    Highlighter__writeFileStart_closure: function Highlighter__writeFileStart_closure(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure: function Highlighter__writeMultilineHighlights_closure(t0, t1, t2) {
      this.$this = t0;
      this.startLine = t1;
      this.line = t2;
    },
    Highlighter__writeMultilineHighlights_closure0: function Highlighter__writeMultilineHighlights_closure0(t0, t1) {
      this.$this = t0;
      this.highlight = t1;
    },
    Highlighter__writeMultilineHighlights_closure1: function Highlighter__writeMultilineHighlights_closure1(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure2: function Highlighter__writeMultilineHighlights_closure2(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.current = t2;
      _.startLine = t3;
      _.line = t4;
      _.highlight = t5;
      _.endLine = t6;
    },
    Highlighter__writeMultilineHighlights__closure: function Highlighter__writeMultilineHighlights__closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Highlighter__writeMultilineHighlights__closure0: function Highlighter__writeMultilineHighlights__closure0(t0, t1) {
      this.$this = t0;
      this.vertical = t1;
    },
    Highlighter__writeHighlightedText_closure: function Highlighter__writeHighlightedText_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.text = t1;
      _.startColumn = t2;
      _.endColumn = t3;
    },
    Highlighter__writeIndicator_closure: function Highlighter__writeIndicator_closure(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure0: function Highlighter__writeIndicator_closure0(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure1: function Highlighter__writeIndicator_closure1(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.coversWholeLine = t1;
      _.line = t2;
      _.highlight = t3;
    },
    Highlighter__writeSidebar_closure: function Highlighter__writeSidebar_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.end = t2;
    },
    _Highlight: function _Highlight(t0, t1, t2) {
      this.span = t0;
      this.isPrimary = t1;
      this.label = t2;
    },
    _Highlight_closure: function _Highlight_closure(t0) {
      this.span = t0;
    },
    _Line: function _Line(t0, t1, t2, t3) {
      var _ = this;
      _.text = t0;
      _.number = t1;
      _.url = t2;
      _.highlights = t3;
    },
    SourceLocation$(offset, column, line, sourceUrl) {
      if (offset < 0)
        A.throwExpression(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (line < 0)
        A.throwExpression(A.RangeError$("Line may not be negative, was " + line + "."));
      else if (column < 0)
        A.throwExpression(A.RangeError$("Column may not be negative, was " + column + "."));
      return new A.SourceLocation(sourceUrl, offset, line, column);
    },
    SourceLocation: function SourceLocation(t0, t1, t2, t3) {
      var _ = this;
      _.sourceUrl = t0;
      _.offset = t1;
      _.line = t2;
      _.column = t3;
    },
    SourceLocationMixin: function SourceLocationMixin() {
    },
    SourceSpanBase: function SourceSpanBase() {
    },
    SourceSpanFormatException$(message, span, source) {
      return new A.SourceSpanFormatException(source, message, span);
    },
    SourceSpanException: function SourceSpanException() {
    },
    SourceSpanFormatException: function SourceSpanFormatException(t0, t1, t2) {
      this.source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    SourceSpanMixin: function SourceSpanMixin() {
    },
    SourceSpanWithContext$(start, end, text, _context) {
      var t1 = new A.SourceSpanWithContext(_context, start, end, text);
      t1.SourceSpanBase$3(start, end, text);
      if (!B.JSString_methods.contains$1(_context, text))
        A.throwExpression(A.ArgumentError$('The context line "' + _context + '" must contain "' + text + '".', null));
      if (A.findLineStart(_context, text, start.get$column()) == null)
        A.throwExpression(A.ArgumentError$('The span text "' + text + '" must start at column ' + (start.get$column() + 1) + ' in a line within "' + _context + '".', null));
      return t1;
    },
    SourceSpanWithContext: function SourceSpanWithContext(t0, t1, t2, t3) {
      var _ = this;
      _._context = t0;
      _.start = t1;
      _.end = t2;
      _.text = t3;
    },
    StellarAccountAddress_StellarAccountAddress(address) {
      var decode, e, s, t1, addrDecBytes, payloadBytes, t2, type, t3, pubKeyBytes, accountId, t4, pubKey, addrType, muxedId, idBytes, checksumBytes, encoded, addr, exception,
        _s9_ = "addr_type",
        _s10_ = "account_id";
      try {
        type$.Map_String_dynamic._as(B.Map_empty);
        t1 = type$.XlmAddrTypes;
        A.AddrKeyValidator_nullOrValidateAddressArgs(B.Map_empty, _s9_, t1);
        addrDecBytes = A.Base32Decoder_decode(address);
        payloadBytes = A.AddrDecUtils_splitPartsByChecksum(addrDecBytes, 2).item1;
        t2 = J.getInterceptor$asx(payloadBytes);
        type = A.XlmAddrTypes_fromTag(t2.$index(payloadBytes, 0));
        t3 = type === B.XlmAddrTypes_96_Muxed;
        A.AddrDecUtils_validateBytesLength(addrDecBytes, t3 ? 43 : 35);
        A.AddrDecUtils_validateChecksum(payloadBytes, B.JSArray_methods.sublist$1(addrDecBytes, addrDecBytes.length - 2), A.xlm_addr__XlmAddrUtils_computeChecksum$closure());
        pubKeyBytes = t2.sublist$1(payloadBytes, 1);
        if (t3) {
          t2 = J.getInterceptor$ax(pubKeyBytes);
          accountId = A.BigintUtils_fromBytes(t2.sublist$1(pubKeyBytes, pubKeyBytes.length - 8), B.C_Endian, false);
          t3 = $.$get$maxU64();
          if (accountId.compareTo$1(0, t3) > 0 || accountId.compareTo$1(0, $.$get$_BigIntImpl_zero()) < 0)
            A.throwExpression(B.AddressConverterException_4a0);
          t4 = type$.int;
          pubKeyBytes = A.List_List$unmodifiable(t2.sublist$2(pubKeyBytes, 0, pubKeyBytes.length - 8), t4);
          type$.List_int._as(pubKeyBytes);
          pubKey = pubKeyBytes.length === 33 ? B.JSArray_methods.sublist$1(pubKeyBytes, 1) : pubKeyBytes;
          addrType = A.AddrKeyValidator_nullOrValidateAddressArgs(B.Map_empty, _s9_, t1);
          if (addrType == null)
            addrType = B.XlmAddrTypes_48_PublicKey;
          A.AddrDecUtils_validateBytesLength(pubKey, 32);
          if (addrType === B.XlmAddrTypes_48_PublicKey)
            A.IPublicKey_IPublicKey$fromBytes(pubKey, B.EllipticCurveTypes_ed25519);
          else if (addrType === B.XlmAddrTypes_144_SecretKey)
            A.Ed25519PrivateKey_Ed25519PrivateKey$fromBytes(pubKey);
          if (addrType === B.XlmAddrTypes_96_Muxed) {
            muxedId = A.BigintUtils_tryParse(B.Map_empty.$index(0, _s10_));
            if (muxedId == null || muxedId.compareTo$1(0, t3) > 0 || muxedId.compareTo$1(0, $.$get$_BigIntImpl_zero()) < 0)
              A.throwExpression(A.AddressConverterException$("Missing or invalid 'account_id'. An accountId is required for a muxed address.", A.LinkedHashMap_LinkedHashMap$_literal(["accounts_id", B.Map_empty.$index(0, _s10_)], type$.String, type$.dynamic)));
            idBytes = A.BigintUtils_toBytes(muxedId, 8, B.C_Endian);
            t1 = A.List_List$of(pubKey, true, t4);
            B.JSArray_methods.addAll$1(t1, idBytes);
            pubKey = t1;
          }
          t1 = [addrType.value];
          B.JSArray_methods.addAll$1(t1, pubKey);
          payloadBytes = A.List_List$from(t1, true, t4);
          t1 = A.XModemCrc__calculateXmodemCrc(payloadBytes);
          t2 = A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>");
          checksumBytes = A.List_List$of(new A.ReversedListIterable(t1, t2), true, t2._eval$1("ListIterable.E"));
          t2 = A.List_List$of(payloadBytes, true, type$.dynamic);
          B.JSArray_methods.addAll$1(t2, checksumBytes);
          t2 = A.List_List$from(t2, true, t4);
          A.BytesUtils_validateListOfBytes(t2);
          encoded = A.StringUtils_decode(A._Base32Utils__b32encode("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", A.List_List$unmodifiable(t2, t4)), false, B.StringEncoding_1);
          addr = A.stringReplaceAllUnchecked(encoded, "=", "");
        } else
          addr = address;
        A.BytesUtils_toBytes(pubKeyBytes, true);
        decode = new A.XlmAddrDecoderResult(type, addr);
        if (decode.type !== B.XlmAddrTypes_48_PublicKey) {
          t1 = A.StellarAddressException$("Incorrect address type.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", "PublicKey", "type", decode.type.toString$0(0)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
        t1 = decode.type;
        return new A.StellarAccountAddress(address, t1);
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.StellarAddressException)
          throw exception;
        else {
          e = t1;
          s = A.getTraceFromException(exception);
          t1 = A.StellarAddressException$("Invalid Stellar ED25519 public key address.", A.LinkedHashMap_LinkedHashMap$_literal(["error", J.toString$0$(e), "stack", J.toString$0$(s)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
      }
    },
    StellarAccountAddress: function StellarAccountAddress(t0, t1) {
      this.baseAddress = t0;
      this.type = t1;
    },
    StellarAddress: function StellarAddress() {
    },
    StellarAddressException$(message, details) {
      return new A.StellarAddressException(message, details);
    },
    StellarAddressException: function StellarAddressException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    DartStellarPlugingException: function DartStellarPlugingException() {
    },
    StringScannerException: function StringScannerException(t0, t1, t2) {
      this.source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    StringScanner: function StringScanner(t0, t1) {
      var _ = this;
      _.sourceUrl = t0;
      _.string = t1;
      _._position = 0;
      _._lastMatchPosition = _._lastMatch = null;
    },
    TonContractException: function TonContractException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    WalletVersion_WalletVersion$fromValue($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_86y, new A.WalletVersion_WalletVersion$fromValue_closure($name), new A.WalletVersion_WalletVersion$fromValue_closure0($name));
    },
    WalletVersion: function WalletVersion(t0, t1) {
      this.name = t0;
      this.version = t1;
    },
    WalletVersion_WalletVersion$fromValue_closure: function WalletVersion_WalletVersion$fromValue_closure(t0) {
      this.name = t0;
    },
    WalletVersion_WalletVersion$fromValue_closure0: function WalletVersion_WalletVersion$fromValue_closure0(t0) {
      this.name = t0;
    },
    KeyException$(message, details) {
      return new A.KeyException(message, details);
    },
    KeyException: function KeyException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    TonPrivateKey_TonPrivateKey$fromBytes(keyBytes) {
      var e, t1, exception;
      try {
        t1 = A.Ed25519PrivateKey_Ed25519PrivateKey$fromBytes(B.JSArray_methods.sublist$2(keyBytes, 0, 32));
        return new A.TonPrivateKey(t1);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.KeyException$("Invalid Ton Private key. Key must be a valid Ed25519 private key.", A.LinkedHashMap_LinkedHashMap$_literal(["key", A.BytesUtils_toHexString(keyBytes, true, null), "error", J.toString$0$(e)], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    TonPrivateKey: function TonPrivateKey(t0) {
      this._private_key2$_privateKey = t0;
    },
    TonPublicKey_TonPublicKey$fromBytes(keyBytes) {
      var e, t1, exception;
      try {
        t1 = A.Ed25519PublicKey_Ed25519PublicKey$fromBytes(keyBytes);
        return new A.TonPublicKey(t1);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.KeyException$("Invalid Ton Public key. Public key must be a valid Ed25519 key.", A.LinkedHashMap_LinkedHashMap$_literal(["key", A.BytesUtils_toHexString(keyBytes, true, null), "error", J.toString$0$(e)], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    TonPublicKey: function TonPublicKey(t0) {
      this._publickKey = t0;
    },
    TonDartPluginException: function TonDartPluginException() {
    },
    _EventStreamSubscription$(_target, _eventType, onData, _useCapture, $T) {
      var t1;
      if (onData == null)
        t1 = null;
      else {
        t1 = A._wrapZone(new A._EventStreamSubscription_closure(onData), type$.JSObject);
        t1 = t1 == null ? null : A._functionToJS1(t1);
      }
      t1 = new A._EventStreamSubscription(_target, _eventType, t1, false, $T._eval$1("_EventStreamSubscription<0>"));
      t1._tryResume$0();
      return t1;
    },
    _wrapZone(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    EventStreamProvider: function EventStreamProvider(t0, t1) {
      this._eventType = t0;
      this.$ti = t1;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._pauseCount = 0;
      _._target = t0;
      _._eventType = t1;
      _._streams$_onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    _EventStreamSubscription_onData_closure: function _EventStreamSubscription_onData_closure(t0) {
      this.handleData = t0;
    },
    XRPPrivateKey__toPrivateKey(keyBytes, algorithm) {
      var toPrive, exception;
      keyBytes = keyBytes;
      try {
        if (J.get$length$asx(keyBytes) === 33)
          keyBytes = J.sublist$1$ax(keyBytes, 1);
        toPrive = A.IPrivateKey_IPrivateKey$fromBytes(keyBytes, algorithm.curveType);
        return toPrive;
      } catch (exception) {
        throw A.wrapException(B.XRPLAddressCodecException_aZ8);
      }
    },
    XRPKeyAlgorithm: function XRPKeyAlgorithm(t0) {
      this.curveType = t0;
    },
    XRPPrivateKey: function XRPPrivateKey(t0) {
      this._xrpl_private_key$_privateKey = t0;
    },
    XRPAddress_XRPAddress(address) {
      var t1, addrNetVar, decodeXAddress, t2, toClassic, netVarBytes, addrDecBytes, exception, allowXAddress = null, isTestnet = null;
      try {
        if (!J.$eq$(allowXAddress, false) && A.XRPAddressUtils_isXAddress(address)) {
          t1 = isTestnet;
          if (t1 != null)
            addrNetVar = t1 ? B.List_4_147 : B.List_5_68;
          else
            addrNetVar = null;
          decodeXAddress = A.XRPAddressUtils_decodeXAddress(address, addrNetVar);
          t1 = decodeXAddress.bytes;
          t2 = t1.length;
          if (t2 !== 20)
            A.throwExpression(A.AddressConverterException$("address hash must be 20 bytes length but got " + t2, null));
          t2 = A.List_List$of(B.List_0, true, type$.dynamic);
          B.JSArray_methods.addAll$1(t2, t1);
          toClassic = A.Base58Encoder_checkEncode(A.List_List$from(t2, true, type$.int), B.Base58Alphabets_1);
          return new A.XRPAddress(toClassic, decodeXAddress.tag);
        }
        t1 = type$.Map_String_dynamic;
        t1._as(B.Map_empty);
        t1 = t1._as(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "base58_alph", B.Base58Alphabets_1], type$.String, type$.dynamic));
        t2 = type$.List_int;
        A.AddrKeyValidator_validateAddressArgs(t1, "net_ver", t2);
        netVarBytes = t2._as(t1.$index(0, "net_ver"));
        t1 = t1.$index(0, "base58_alph");
        if (t1 == null)
          t1 = B.Base58Alphabets_0;
        addrDecBytes = A.Base58Decoder_checkDecode(address, type$.Base58Alphabets._as(t1));
        A.AddrDecUtils_validateBytesLength(addrDecBytes, 20 + netVarBytes.length);
        A.List_List$from(A.AddrDecUtils_validateAndRemovePrefixBytes(addrDecBytes, netVarBytes), true, type$.int);
        return new A.XRPAddress(address, null);
      } catch (exception) {
        throw A.wrapException(B.XRPLAddressCodecException_o2Y);
      }
    },
    XRPAddress: function XRPAddress(t0, t1) {
      this.address = t0;
      this.tag = t1;
    },
    XRPLAddressCodecException: function XRPLAddressCodecException(t0) {
      this.message = t0;
    },
    _send(message) {
      A._asString(message);
      $.___cryptoHandler._readField$0().sentResult$1(message).then$1$1(new A._send_closure(), type$.Null);
    },
    _readKey() {
      var key, t1;
      if ($._init)
        return "";
      try {
        $._init = true;
        key = $.$get$QuickCrypto__generateRandom().call$1(32);
        $.___cryptoHandler._value = new A._WebIsolateInitialData(A.ChaCha20Poly1305$(key));
        t1 = A.BytesUtils_toHexString(key, true, null);
        return t1;
      } finally {
        self.mrtWalletActivation = null;
      }
    },
    main(args) {
      var result,
        t1 = self;
      t1.mrtJsHandler = A._functionToJS1(A.crypto___send$closure());
      if (typeof A.crypto___readKey$closure() == "function")
        A.throwExpression(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function() {
          return _call(f);
        };
      }(A._callDartFunctionFast0, A.crypto___readKey$closure());
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = A.crypto___readKey$closure();
      t1.mrtWalletActivation = result;
      A.print("web worker was initializedLLLLL");
    },
    _send_closure: function _send_closure() {
    },
    _WebIsolateInitialData: function _WebIsolateInitialData(t0) {
      this.___WebIsolateInitialData_crypto_FI = $;
      this.chacha = t0;
    },
    _WebIsolateInitialData_crypto_closure: function _WebIsolateInitialData_crypto_closure(t0) {
      this.$this = t0;
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    _functionToJS1(f) {
      var result;
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1) {
          return _call(f, arg1, arguments.length);
        };
      }(A._callDartFunctionFast1, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _callDartFunctionFast0(callback) {
      return type$.Function._as(callback).call$0();
    },
    _callDartFunctionFast1(callback, arg1, $length) {
      type$.Function._as(callback);
      if (A._asInt($length) >= 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    Base58XmrEncoder_encode(dataBytes) {
      var dataLen, totBlockCnt, lastBlockEncLen, enc, i, i0, t1,
        _s58_ = string$.x3123456;
      A.BytesUtils_validateListOfBytes(dataBytes);
      dataBytes = A.List_List$unmodifiable(dataBytes, type$.int);
      dataLen = dataBytes.length;
      totBlockCnt = dataLen / 8 | 0;
      lastBlockEncLen = B.JSInt_methods.$mod(dataLen, 8);
      for (enc = "", i = 0; i < totBlockCnt; i = i0) {
        i0 = i + 1;
        enc += B.JSString_methods.padLeft$2(A.Base58Encoder_encode(B.JSArray_methods.sublist$2(dataBytes, i * 8, i0 * 8), B.Base58Alphabets_0), 11, _s58_[0]);
      }
      if (lastBlockEncLen > 0) {
        t1 = totBlockCnt * 8;
        enc += B.JSString_methods.padLeft$2(A.Base58Encoder_encode(B.JSArray_methods.sublist$2(dataBytes, t1, t1 + lastBlockEncLen), B.Base58Alphabets_0), B.List_00[lastBlockEncLen], _s58_[0]);
      }
      return enc;
    },
    Base58XmrDecoder_decode(dataStr) {
      var t2, i, i0, blockDec, t3,
        t1 = type$.int,
        dec = J.JSArray_JSArray$fixed(0, t1),
        dataLen = dataStr.length,
        totBlockCnt = B.JSInt_methods._tdivFast$1(dataLen, 11),
        lastBlockEncLen = B.JSInt_methods.$mod(dataLen, 11),
        lastBlockDecLen = B.JSArray_methods.indexOf$1(B.List_00, lastBlockEncLen);
      for (t2 = type$.dynamic, i = 0; i < totBlockCnt; i = i0) {
        i0 = i + 1;
        blockDec = A.Base58Decoder_decode(B.JSString_methods.substring$2(dataStr, i * 11, i0 * 11), B.Base58Alphabets_0);
        t3 = A.List_List$of(dec, true, t2);
        B.JSArray_methods.addAll$1(t3, B.JSArray_methods.sublist$1(blockDec, blockDec.length - 8));
        dec = A.List_List$from(t3, true, t1);
      }
      if (lastBlockEncLen > 0) {
        t3 = totBlockCnt * 11;
        blockDec = A.Base58Decoder_decode(B.JSString_methods.substring$2(dataStr, t3, t3 + lastBlockEncLen), B.Base58Alphabets_0);
        t2 = A.List_List$of(dec, true, t2);
        B.JSArray_methods.addAll$1(t2, A.Base58XmrDecoder__unPad(blockDec, lastBlockDecLen));
        dec = A.List_List$from(t2, true, t1);
      }
      return dec;
    },
    Base58XmrDecoder__unPad(decBytes, unpadLen) {
      return B.JSArray_methods.sublist$1(decBytes, decBytes.length - unpadLen);
    },
    AddrDecUtils_validateAndRemovePrefixBytes(addr, prefix) {
      var prefixGot = B.JSArray_methods.sublist$2(addr, 0, prefix.length);
      if (!A.BytesUtils_bytesEqual(prefix, prefixGot))
        throw A.wrapException(A.AddressConverterException$("Invalid prefix (expected " + A.S(prefix) + ", got " + A.S(prefixGot) + ")", null));
      return B.JSArray_methods.sublist$1(addr, prefix.length);
    },
    AddrDecUtils_validateBytesLength(addr, lenExp) {
      var t1 = addr.length !== lenExp;
      if (t1)
        throw A.wrapException(A.AddressConverterException$("Invalid length (expected " + lenExp + ", got " + addr.length + ")", null));
    },
    AddrDecUtils_validateLength(addr, lenExp) {
      var t1 = addr.length;
      if (t1 !== lenExp)
        throw A.wrapException(A.AddressConverterException$("Invalid length (expected " + lenExp + ", got " + t1 + ")", null));
    },
    AddrDecUtils_validateChecksum(payloadBytes, checksumBytesExp, checksumFct) {
      if (!A.BytesUtils_bytesEqual(checksumBytesExp, checksumFct.call$1(payloadBytes)))
        throw A.wrapException(B.AddressConverterException_Feh);
    },
    AddrDecUtils_splitPartsByChecksum(addrBytes, checksumLen) {
      var checksumBytes = B.JSArray_methods.sublist$1(addrBytes, addrBytes.length - checksumLen);
      return new A.Tuple(B.JSArray_methods.sublist$2(addrBytes, 0, addrBytes.length - checksumLen), checksumBytes, type$.Tuple_of_List_int_and_List_int);
    },
    AddrKeyValidator_validateAddressArgs(kwargs, key, $T) {
      if (!kwargs.containsKey$1(key) || !$T._is(kwargs.$index(0, key)))
        throw A.wrapException(A.AddressConverterException$("Invalid or Missing required parameters: " + key + " as type " + A.createRuntimeType($T).toString$0(0), null));
      return $T._as(kwargs.$index(0, key));
    },
    AddrKeyValidator_nullOrValidateAddressArgs(kwargs, key, $T) {
      kwargs.$index(0, key);
      return null;
    },
    bip39WordList(language) {
      switch (language) {
        case B.Bip39Languages_english:
          return $._english;
        case B.Bip39Languages_spanish:
          return B.List_QTd;
        case B.Bip39Languages_portuguese:
          return B.List_ozo;
        case B.Bip39Languages_korean:
          return B.List_cAX;
        case B.Bip39Languages_japanese:
          return B.List_O98;
        case B.Bip39Languages_italian:
          return B.List_NwK;
        case B.Bip39Languages_french:
          return B.List_efI;
        case B.Bip39Languages_czech:
          return B.List_Szg;
        case B.Bip39Languages_chineseTraditional:
          return B.List_qFt;
        case B.Bip39Languages_chineseSimplified:
          return B.List_2No;
        default:
          return $._english;
      }
    },
    EllipticCurveGetter_generatorFromType(type) {
      switch (type) {
        case B.EllipticCurveTypes_secp256k1:
          return $.$get$Curves_generatorSecp256k1();
        case B.EllipticCurveTypes_nist256p1:
          return $.$get$Curves_generator256();
        case B.EllipticCurveTypes_ed25519:
        case B.EllipticCurveTypes_ed25519Kholaw:
          return $.$get$Curves_generatorED25519();
        default:
          throw A.wrapException(A.UnimplementedError$("generatorFromType does not provide curve."));
      }
    },
    IPublicKey_IPublicKey$fromBytes(keybytes, type) {
      switch (type) {
        case B.EllipticCurveTypes_nist256p1:
          return A.Nist256p1PublicKey_Nist256p1PublicKey$fromBytes(keybytes);
        case B.EllipticCurveTypes_sr25519:
          return new A.Sr25519PublicKey(A.SchnorrkelPublicKey_SchnorrkelPublicKey(keybytes));
        case B.EllipticCurveTypes_ed25519:
          return A.Ed25519PublicKey_Ed25519PublicKey$fromBytes(keybytes);
        case B.EllipticCurveTypes_ed25519Kholaw:
          return A.Ed25519KholawPublicKey_Ed25519KholawPublicKey$fromBytes(keybytes);
        case B.EllipticCurveTypes_ed25519Monero:
          return A.MoneroPublicKey_MoneroPublicKey$fromBytes(keybytes);
        case B.EllipticCurveTypes_ed25519Blake2b:
          return A.Ed25519Blake2bPublicKey_Ed25519Blake2bPublicKey$fromBytes(keybytes);
        default:
          return A.Secp256k1PublicKeyEcdsa_Secp256k1PublicKeyEcdsa$fromBytes(keybytes);
      }
    },
    IPublicKey_isValidBytes(keyBytes, type) {
      switch (type) {
        case B.EllipticCurveTypes_nist256p1:
          return A.Nist256p1PublicKey_isValidBytes(keyBytes);
        case B.EllipticCurveTypes_sr25519:
          return A.Sr25519PublicKey_isValidBytes(keyBytes);
        case B.EllipticCurveTypes_ed25519:
          return A.Ed25519PublicKey_isValidBytes(keyBytes);
        case B.EllipticCurveTypes_ed25519Kholaw:
          return A.Ed25519KholawPublicKey_isValidBytes(keyBytes);
        case B.EllipticCurveTypes_ed25519Monero:
          return A.MoneroPrivateKey_isValidBytes(keyBytes);
        case B.EllipticCurveTypes_ed25519Blake2b:
          return A.Ed25519Blake2bPublicKey_isValidBytes(keyBytes);
        default:
          return A.Secp256k1PublicKeyEcdsa_isValidBytes(keyBytes);
      }
    },
    IPrivateKey_IPrivateKey$fromBytes(keyBytes, type) {
      switch (type) {
        case B.EllipticCurveTypes_nist256p1:
          return new A.Nist256p1PrivateKey(A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(keyBytes, $.$get$Curves_generator256()));
        case B.EllipticCurveTypes_ed25519:
          return A.Ed25519PrivateKey_Ed25519PrivateKey$fromBytes(keyBytes);
        case B.EllipticCurveTypes_ed25519Kholaw:
          return A.Ed25519KholawPrivateKey_Ed25519KholawPrivateKey$fromBytes(keyBytes);
        case B.EllipticCurveTypes_ed25519Blake2b:
          return A.Ed25519Blake2bPrivateKey_Ed25519Blake2bPrivateKey$fromBytes(keyBytes);
        case B.EllipticCurveTypes_ed25519Monero:
          return A.MoneroPrivateKey_MoneroPrivateKey$fromBytes(keyBytes);
        case B.EllipticCurveTypes_sr25519:
          return new A.Sr25519PrivateKey(A.SchnorrkelSecretKey_SchnorrkelSecretKey$fromBytes(keyBytes));
      }
      return new A.Secp256k1PrivateKeyEcdsa(A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(keyBytes, $.$get$Curves_generatorSecp256k1()));
    },
    IPrivateKey_isValidBytes(keyBytes, type) {
      switch (type) {
        case B.EllipticCurveTypes_nist256p1:
          return A.Nist256p1PrivateKey_isValidBytes(keyBytes);
        case B.EllipticCurveTypes_ed25519:
          return A.Ed25519PrivateKey_isValidBytes(keyBytes);
        case B.EllipticCurveTypes_ed25519Kholaw:
          return A.Ed25519KholawPrivateKey_isValidBytes(keyBytes);
        case B.EllipticCurveTypes_ed25519Blake2b:
          return A.Ed25519Blake2bPrivateKey_isValidBytes(keyBytes);
        case B.EllipticCurveTypes_ed25519Monero:
          return A.MoneroPrivateKey_isValidBytes(keyBytes);
        case B.EllipticCurveTypes_sr25519:
          return A.Sr25519PrivateKey_isValidBytes(keyBytes);
        default:
          return A.Secp256k1PrivateKeyEcdsa_isValidBytes(keyBytes);
      }
    },
    moneroMnemonicWorsList(language) {
      switch (language) {
        case B.MoneroLanguages_chineseSimplified:
          return B.List_GLH;
        case B.MoneroLanguages_dutch:
          return B.List_PDJ;
        case B.MoneroLanguages_english:
          return B.List_YPn;
        case B.MoneroLanguages_french:
          return B.List_QOW;
        case B.MoneroLanguages_german:
          return B.List_gyO;
        case B.MoneroLanguages_italian:
          return B.List_ql0;
        case B.MoneroLanguages_japanese:
          return B.List_QgR;
        case B.MoneroLanguages_portuguese:
          return B.List_WA8;
        case B.MoneroLanguages_spanish:
          return B.List_XdM;
        case B.MoneroLanguages_russian:
          return B.List_qIe;
        default:
          throw A.wrapException(A.UnimplementedError$("monero mnemonic does not support " + language.name));
      }
    },
    TonEntropyGeneratorUtils_isBasicSeed(entropy) {
      var scrypt = A.QuickCrypto_pbkdf2DeriveKey(null, 390, entropy, new A.CodeUnits("TON seed version"));
      if (0 >= scrypt.length)
        return A.ioore(scrypt, 0);
      return J.$eq$(scrypt[0], 0);
    },
    RFC6979_generateK(order, secexp, hashFunc, data, extraEntropy, retryGn) {
      var v, hmac, t3, t4, t5, _i, k, t, out, secret, t6, out0, _s6_ = "_inner", _s6_0 = "_outer",
        qlen = order.get$bitLength(0),
        holen = hashFunc.call$0().get$getDigestLength(),
        rolen = B.JSInt_methods._tdivFast$1(qlen + 7, 8),
        t1 = A.BigintUtils_toBytes(secexp, A.BigintUtils_orderLen(order), B.C_Endian),
        z1 = A.BigintUtils_bitsToBigIntWithLengthLimit(data, order.get$bitLength(0)),
        z2 = z1.$sub(0, order),
        hexStr = (z2.compareTo$1(0, $.$get$_BigIntImpl_zero()) < 0 ? z1 : z2).toRadixString$1(0, 16),
        hexLen = hexStr.length,
        t2 = B.JSInt_methods._tdivFast$1(order.get$bitLength(0) + 7, 8) * 2,
        bytes = A.BytesUtils_fromHexString(hexLen < t2 ? B.JSString_methods.$mul("0", t2 - hexLen) + hexStr : hexStr),
        bx = [t1, bytes, extraEntropy];
      t1 = type$.int;
      v = A.List_List$filled(holen, 0, false, t1);
      B.JSArray_methods.fillRange$3(v, 0, holen, 1);
      hmac = A.HMAC$(hashFunc, A.List_List$filled(holen, 0, false, t1));
      t2 = type$.dynamic;
      t3 = A.List_List$of(v, true, t2);
      t3.push(0);
      t4 = type$.List_int;
      t3 = t4._as(A.List_List$from(t3, true, t1));
      t5 = hmac.__HMAC__inner_A;
      t5 === $ && A.throwLateFieldNI(_s6_);
      t5.update$1(t3);
      for (_i = 0; _i < 3; ++_i) {
        t3 = t4._as(bx[_i]);
        hmac.__HMAC__inner_A.update$1(t3);
      }
      k = hmac.digest$0();
      hmac.clean$0();
      hmac = A.HMAC$(hashFunc, k);
      t4._as(v);
      t3 = hmac.__HMAC__inner_A;
      t3 === $ && A.throwLateFieldNI(_s6_);
      t3.update$1(v);
      v = hmac.digest$0();
      hmac.clean$0();
      hmac = A.HMAC$(hashFunc, k);
      t3 = A.List_List$of(v, true, t2);
      t3.push(1);
      t3 = t4._as(A.List_List$from(t3, true, t1));
      t5 = hmac.__HMAC__inner_A;
      t5 === $ && A.throwLateFieldNI(_s6_);
      t5.update$1(t3);
      for (_i = 0; _i < 3; ++_i) {
        t3 = t4._as(bx[_i]);
        hmac.__HMAC__inner_A.update$1(t3);
      }
      k = hmac.digest$0();
      t3 = A.HMAC$(hashFunc, k);
      t4._as(v);
      t5 = t3.__HMAC__inner_A;
      t5 === $ && A.throwLateFieldNI(_s6_);
      t5.update$1(v);
      v = t3.digest$0();
      for (; true; k = out, v = out0) {
        t = J.JSArray_JSArray$fixed(0, t1);
        for (; t.length < rolen; v = out) {
          t3 = new A.HMAC();
          t3.HMAC$3(hashFunc, k, null);
          t4._as(v);
          t5 = t3.__HMAC__inner_A;
          t5 === $ && A.throwLateFieldNI(_s6_);
          t5.update$1(v);
          t5 = t3.__HMAC__outer_A;
          t5 === $ && A.throwLateFieldNI(_s6_0);
          out = A.List_List$filled(t5.get$getDigestLength(), 0, false, t1);
          t3.finish$1(out);
          t3 = A.List_List$of(t, true, t2);
          B.JSArray_methods.addAll$1(t3, out);
          t = A.List_List$from(t3, true, t1);
        }
        secret = A.BigintUtils_bitsToBigIntWithLengthLimit(t, qlen);
        if (secret.compareTo$1(0, $.$get$_BigIntImpl_one()) >= 0 && secret.compareTo$1(0, order) < 0) {
          if (retryGn <= 0)
            return secret;
          --retryGn;
        }
        t3 = new A.HMAC();
        t3.HMAC$3(hashFunc, k, null);
        t5 = A.List_List$of(v, true, t2);
        t5.push(0);
        t5 = t4._as(A.List_List$from(t5, true, t1));
        t6 = t3.__HMAC__inner_A;
        t6 === $ && A.throwLateFieldNI(_s6_);
        t6.update$1(t5);
        t5 = t3.__HMAC__outer_A;
        t5 === $ && A.throwLateFieldNI(_s6_0);
        out = A.List_List$filled(t5.get$getDigestLength(), 0, false, t1);
        t3.finish$1(out);
        t3 = new A.HMAC();
        t3.HMAC$3(hashFunc, out, null);
        t4._as(v);
        t5 = t3.__HMAC__inner_A;
        t5 === $ && A.throwLateFieldNI(_s6_);
        t5.update$1(v);
        t5 = t3.__HMAC__outer_A;
        t5 === $ && A.throwLateFieldNI(_s6_0);
        out0 = A.List_List$filled(t5.get$getDigestLength(), 0, false, t1);
        t3.finish$1(out0);
      }
    },
    Ed25519Utils_scalarReduce(scalar) {
      var toint = A.BigintUtils_fromBytes(scalar, B.C_Endian0, false),
        t1 = $.$get$Curves_generatorED25519().order;
      t1.toString;
      return A.BigintUtils_toBytes(toint.$mod(0, t1), A.BigintUtils_orderLen(t1), B.C_Endian0);
    },
    Ed25519Utils_asScalarInt(scalar) {
      if (A.CryptoOps_scCheck(scalar) === 0)
        return A.BigintUtils_fromBytes(scalar, B.C_Endian0, false);
      throw A.wrapException(B.SquareRootError_LdP);
    },
    Ed25519Utils_add(scalar1, scalar2) {
      var out = A.List_List$filled(32, 0, false, type$.int);
      A.CryptoOps_scMulAdd(out, B.List_ouN0, scalar1, scalar2);
      return A.BytesUtils_toBytes(out, false);
    },
    positiveMod(a, b) {
      var result = a.$mod(0, b);
      return result.compareTo$1(0, $.$get$_BigIntImpl_zero()) >= 0 ? result : b.$add(0, result);
    },
    _mExp(x, power, modulo) {
      var res;
      for (res = x; power.compareTo$1(0, $.$get$_BigIntImpl_zero()) > 0;) {
        res = res.$mul(0, res).$mod(0, modulo);
        power = power.$sub(0, $.$get$_BigIntImpl_one());
      }
      return res;
    },
    sqrtUV(u, v) {
      var root2, useRoot2, noRoot,
        $P = $.$get$Curves_curveEd25519().p,
        v3 = A.positiveMod(v.$mul(0, v).$mul(0, v), $P),
        t1 = u.$mul(0, A.positiveMod(v3.$mul(0, v3).$mul(0, v), $P)),
        xCubed = t1.$mul(0, t1).$mod(0, $P).$mul(0, t1).$mod(0, $P),
        t2 = $.$get$_BigIntImpl_two(),
        xTo4th = A._mExp(xCubed, t2, $P).$mul(0, xCubed).$mod(0, $P),
        t3 = $.$get$_BigIntImpl_one(),
        xTo5th = A._mExp(xTo4th, t3, $P).$mul(0, t1).$mod(0, $P),
        xTo10th = A._mExp(xTo5th, A._BigIntImpl__BigIntImpl$from(5), $P).$mul(0, xTo5th).$mod(0, $P),
        xTo20th = A._mExp(xTo10th, A._BigIntImpl__BigIntImpl$from(10), $P).$mul(0, xTo10th).$mod(0, $P),
        xTo40th = A._mExp(xTo20th, A._BigIntImpl__BigIntImpl$from(20), $P).$mul(0, xTo20th).$mod(0, $P),
        xTo80th = A._mExp(xTo40th, A._BigIntImpl__BigIntImpl$from(40), $P).$mul(0, xTo40th).$mod(0, $P),
        result = A._mExp(A._mExp(A._mExp(A._mExp(xTo80th, A._BigIntImpl__BigIntImpl$from(80), $P).$mul(0, xTo80th).$mod(0, $P), A._BigIntImpl__BigIntImpl$from(80), $P).$mul(0, xTo80th).$mod(0, $P), A._BigIntImpl__BigIntImpl$from(10), $P).$mul(0, xTo10th).$mod(0, $P), t2, $P).$mul(0, t1).$mod(0, $P),
        x = A.positiveMod(u.$mul(0, v3).$mul(0, result), $P),
        vx2 = A.positiveMod(v.$mul(0, x).$mul(0, x), $P);
      t1 = $.$get$sqrtM1();
      root2 = A.positiveMod(x.$mul(0, t1), $P);
      t2 = vx2.compareTo$1(0, u);
      useRoot2 = vx2.compareTo$1(0, A.positiveMod(u.$negate(0), $P)) === 0;
      noRoot = vx2.compareTo$1(0, A.positiveMod(u.$negate(0).$mul(0, t1), $P)) === 0;
      if (useRoot2 || noRoot)
        x = root2;
      t1 = A.positiveMod(x, $P).$and(0, t3).compareTo$1(0, t3);
      if (t1 === 0)
        x = A.positiveMod(x.$negate(0), $P);
      t1 = t2 === 0 || useRoot2;
      return new A.Tuple(t1, x, type$.Tuple_bool_BigInt);
    },
    ECDSAUtils_polynomialExponentiationMod(base, exponent, polymod, p) {
      var $G, t2, t3, t4, s, k,
        t1 = exponent.compareTo$1(0, $.$get$_BigIntImpl_zero());
      if (t1 === 0)
        return A._setArrayType([$.$get$_BigIntImpl_one()], type$.JSArray_BigInt);
      t1 = type$.BigInt;
      $G = A.List_List$from(base, true, t1);
      t2 = $.$get$_BigIntImpl_two();
      t3 = exponent.$mod(0, t2);
      t4 = $.$get$_BigIntImpl_one();
      t3 = t3.compareTo$1(0, t4);
      s = t3 === 0 ? A.List_List$from($G, true, t1) : A._setArrayType([t4], type$.JSArray_BigInt);
      for (k = exponent; k.compareTo$1(0, t4) > 0;) {
        if (t2._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        k = k._div$1(t2);
        $G = A.ECDSAUtils_polynomialMultiplyMod($G, $G, polymod, p);
        t1 = k.$mod(0, t2).compareTo$1(0, t4);
        if (t1 === 0)
          s = A.ECDSAUtils_polynomialMultiplyMod($G, s, polymod, p);
      }
      return s;
    },
    ECDSAUtils_modularSquareRootPrime(a, p) {
      var b, t3, quadraticForm, t4, result,
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = a.compareTo$1(0, t1);
      if (t2 === 0)
        return t1;
      t1 = p.compareTo$1(0, $.$get$_BigIntImpl_two());
      if (t1 === 0)
        return a;
      t1 = A.ECDSAUtils_jacobi(a, p).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(-1));
      if (t1 === 0)
        throw A.wrapException(new A.SquareRootError(a.toString$0(0) + " has no square root modulo " + p.toString$0(0), null));
      t1 = p.$mod(0, A._BigIntImpl__BigIntImpl$from(4)).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(3));
      if (t1 === 0)
        return a.modPow$2(0, p.$add(0, $.$get$_BigIntImpl_one()).$tdiv(0, A._BigIntImpl__BigIntImpl$from(4)), p);
      t1 = p.$mod(0, A._BigIntImpl__BigIntImpl$from(8)).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(5));
      if (t1 === 0) {
        t1 = $.$get$_BigIntImpl_one();
        t1 = a.modPow$2(0, p.$sub(0, t1).$tdiv(0, A._BigIntImpl__BigIntImpl$from(4)), p).compareTo$1(0, t1);
        if (t1 === 0)
          return a.modPow$2(0, p.$add(0, A._BigIntImpl__BigIntImpl$from(3)).$tdiv(0, A._BigIntImpl__BigIntImpl$from(8)), p);
        return A._BigIntImpl__BigIntImpl$from(2).$mul(0, a).$mul(0, A._BigIntImpl__BigIntImpl$from(4).$mul(0, a).modPow$2(0, p.$sub(0, A._BigIntImpl__BigIntImpl$from(5)).$tdiv(0, A._BigIntImpl__BigIntImpl$from(8)), p)).$mod(0, p);
      }
      for (b = A._BigIntImpl__BigIntImpl$from(2); b.compareTo$1(0, p) < 0; b = b.$add(0, $.$get$_BigIntImpl_one())) {
        t1 = A.ECDSAUtils_jacobi(b.$mul(0, b).$sub(0, A._BigIntImpl__BigIntImpl$from(4).$mul(0, a)), p).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(-1));
        if (t1 === 0) {
          t1 = b.$negate(0);
          t2 = $.$get$_BigIntImpl_one();
          t3 = type$.JSArray_BigInt;
          quadraticForm = A._setArrayType([a, t1, t2], t3);
          t1 = $.$get$_BigIntImpl_zero();
          t3 = A._setArrayType([t1, t2], t3);
          t2 = p.$add(0, t2);
          t4 = A._BigIntImpl__BigIntImpl$from(2);
          if (t4._used === 0)
            A.throwExpression(B.C_IntegerDivisionByZeroException);
          result = A.ECDSAUtils_polynomialExponentiationMod(t3, t2._div$1(t4), quadraticForm, p);
          if (1 >= result.length)
            return A.ioore(result, 1);
          t1 = J.compareTo$1$ns(result[1], t1);
          if (t1 !== 0)
            throw A.wrapException(B.SquareRootError_epz);
          if (0 >= result.length)
            return A.ioore(result, 0);
          return result[0];
        }
      }
      throw A.wrapException(B.MessageException_QWS);
    },
    ECDSAUtils_polynomialMultiplyMod(m1, m2, polymod, p) {
      var i, j, t2, t3,
        t1 = m1.length + m2.length - 1,
        prod = A.List_List$filled(t1, $.$get$_BigIntImpl_zero(), false, type$.BigInt);
      for (i = 0; i < m1.length; ++i)
        for (j = 0; j < m2.length; ++j) {
          t2 = i + j;
          if (!(t2 < t1))
            return A.ioore(prod, t2);
          t3 = prod[t2];
          if (!(i < m1.length))
            return A.ioore(m1, i);
          B.JSArray_methods.$indexSet(prod, t2, t3.$add(0, J.$mul$ns(m1[i], m2[j])).$mod(0, p));
        }
      return A.ECDSAUtils_polynomialReduceMod(prod, polymod, p);
    },
    ECDSAUtils_polynomialReduceMod(poly, polymod, p) {
      var t1, t2, t3, i;
      for (t1 = poly.length, t2 = t1 >= 3; t2;) {
        t3 = B.JSArray_methods.get$last(poly).compareTo$1(0, $.$get$_BigIntImpl_zero());
        if (t3 !== 0)
          for (i = 2; i <= 3; ++i) {
            t3 = t1 - i;
            B.JSArray_methods.$indexSet(poly, t3, poly[t3].$sub(0, B.JSArray_methods.get$last(poly).$mul(0, polymod[3 - i])).$mod(0, p));
          }
        B.JSArray_methods.removeLast$0(poly);
      }
      return poly;
    },
    ECDSAUtils_jacobi(a, n) {
      var t1, t2, s, e, e0, a1, s0;
      if (n.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(3)) < 0)
        throw A.wrapException(B.JacobiError_6Vn);
      t1 = $.$get$_BigIntImpl_two();
      t2 = n.$mod(0, t1);
      s = $.$get$_BigIntImpl_one();
      t2 = t2.compareTo$1(0, s);
      if (t2 !== 0)
        throw A.wrapException(B.JacobiError_EnN);
      a = a.$mod(0, n);
      e = $.$get$_BigIntImpl_zero();
      t2 = a.compareTo$1(0, e);
      if (t2 === 0)
        return e;
      t2 = a.compareTo$1(0, s);
      if (t2 === 0)
        return s;
      e0 = e;
      a1 = a;
      while (true) {
        t2 = a1.$mod(0, t1).compareTo$1(0, e);
        if (!(t2 === 0))
          break;
        if (t1._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        a1 = a1._div$1(t1);
        e0 = e0.$add(0, s);
      }
      t1 = e0.$mod(0, t1).compareTo$1(0, e);
      t2 = true;
      if (t1 !== 0) {
        t1 = n.$mod(0, A._BigIntImpl__BigIntImpl$from(8)).compareTo$1(0, s);
        if (t1 !== 0)
          t1 = n.$mod(0, A._BigIntImpl__BigIntImpl$from(8)).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(7)) === 0;
        else
          t1 = t2;
      } else
        t1 = t2;
      s0 = t1 ? s : A._BigIntImpl__BigIntImpl$from(-1);
      t1 = a1.compareTo$1(0, s);
      if (t1 === 0)
        return s0;
      t1 = n.$mod(0, A._BigIntImpl__BigIntImpl$from(4)).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(3));
      if (t1 === 0)
        t1 = a1.$mod(0, A._BigIntImpl__BigIntImpl$from(4)).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(3)) === 0;
      else
        t1 = false;
      s = t1 ? s0.$negate(0) : s0;
      return s.$mul(0, A.ECDSAUtils_jacobi(n.$mod(0, a1), a1));
    },
    ChaCha20__quarterround(output, a, b, c, d) {
      var t1, t2;
      if (!(d < 16))
        return A.ioore(output, d);
      t1 = output[d];
      if (!(a < 16))
        return A.ioore(output, a);
      t2 = output[a];
      if (!(b < 16))
        return A.ioore(output, b);
      t2 += output[b];
      B.JSArray_methods.$indexSet(output, a, t2);
      B.JSArray_methods.$indexSet(output, d, A.rotl32((t1 ^ t2) >>> 0, 16));
      t2 = output[b];
      if (!(c < 16))
        return A.ioore(output, c);
      t1 = output[c] + output[d];
      B.JSArray_methods.$indexSet(output, c, t1);
      B.JSArray_methods.$indexSet(output, b, A.rotl32((t2 ^ t1) >>> 0, 12));
      t1 = output[d];
      t2 = output[a] + output[b];
      B.JSArray_methods.$indexSet(output, a, t2);
      B.JSArray_methods.$indexSet(output, d, A.rotl32((t1 ^ t2) >>> 0, 8));
      t2 = output[b];
      t1 = output[c] + output[d];
      B.JSArray_methods.$indexSet(output, c, t1);
      B.JSArray_methods.$indexSet(output, b, A.rotl32((t2 ^ t1) >>> 0, 7));
      B.JSArray_methods.$indexSet(output, a, output[a] >>> 0);
      B.JSArray_methods.$indexSet(output, b, output[b] >>> 0);
      B.JSArray_methods.$indexSet(output, c, output[c] >>> 0);
      B.JSArray_methods.$indexSet(output, d, output[d] >>> 0);
    },
    ChaCha20__core(out, input, key) {
      var t2, t3, t4, t5, j4, j5, j6, j7, j8, j9, j10, j11, j12, j13, j14, j15, i,
        mix = A.List_List$filled(16, 0, false, type$.int),
        t1 = key.length;
      if (3 >= t1)
        return A.ioore(key, 3);
      t2 = key[3];
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = key[2];
      if (typeof t3 !== "number")
        return t3.$shl();
      t4 = key[1];
      if (typeof t4 !== "number")
        return t4.$shl();
      t5 = key[0];
      if (typeof t5 !== "number")
        return A.iae(t5);
      j4 = (t2 << 24 | t3 << 16 | t4 << 8 | t5) >>> 0;
      if (7 >= t1)
        return A.ioore(key, 7);
      t5 = key[7];
      if (typeof t5 !== "number")
        return t5.$shl();
      t4 = key[6];
      if (typeof t4 !== "number")
        return t4.$shl();
      t3 = key[5];
      if (typeof t3 !== "number")
        return t3.$shl();
      t2 = key[4];
      if (typeof t2 !== "number")
        return A.iae(t2);
      j5 = (t5 << 24 | t4 << 16 | t3 << 8 | t2) >>> 0;
      if (11 >= t1)
        return A.ioore(key, 11);
      t2 = key[11];
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = key[10];
      if (typeof t3 !== "number")
        return t3.$shl();
      t4 = key[9];
      if (typeof t4 !== "number")
        return t4.$shl();
      t5 = key[8];
      if (typeof t5 !== "number")
        return A.iae(t5);
      j6 = (t2 << 24 | t3 << 16 | t4 << 8 | t5) >>> 0;
      if (15 >= t1)
        return A.ioore(key, 15);
      t5 = key[15];
      if (typeof t5 !== "number")
        return t5.$shl();
      t4 = key[14];
      if (typeof t4 !== "number")
        return t4.$shl();
      t3 = key[13];
      if (typeof t3 !== "number")
        return t3.$shl();
      t2 = key[12];
      if (typeof t2 !== "number")
        return A.iae(t2);
      j7 = (t5 << 24 | t4 << 16 | t3 << 8 | t2) >>> 0;
      if (19 >= t1)
        return A.ioore(key, 19);
      t2 = key[19];
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = key[18];
      if (typeof t3 !== "number")
        return t3.$shl();
      t4 = key[17];
      if (typeof t4 !== "number")
        return t4.$shl();
      t5 = key[16];
      if (typeof t5 !== "number")
        return A.iae(t5);
      j8 = (t2 << 24 | t3 << 16 | t4 << 8 | t5) >>> 0;
      if (23 >= t1)
        return A.ioore(key, 23);
      t5 = key[23];
      if (typeof t5 !== "number")
        return t5.$shl();
      t4 = key[22];
      if (typeof t4 !== "number")
        return t4.$shl();
      t3 = key[21];
      if (typeof t3 !== "number")
        return t3.$shl();
      t2 = key[20];
      if (typeof t2 !== "number")
        return A.iae(t2);
      j9 = (t5 << 24 | t4 << 16 | t3 << 8 | t2) >>> 0;
      if (27 >= t1)
        return A.ioore(key, 27);
      t2 = key[27];
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = key[26];
      if (typeof t3 !== "number")
        return t3.$shl();
      t4 = key[25];
      if (typeof t4 !== "number")
        return t4.$shl();
      t5 = key[24];
      if (typeof t5 !== "number")
        return A.iae(t5);
      j10 = (t2 << 24 | t3 << 16 | t4 << 8 | t5) >>> 0;
      if (31 >= t1)
        return A.ioore(key, 31);
      t1 = key[31];
      if (typeof t1 !== "number")
        return t1.$shl();
      t5 = key[30];
      if (typeof t5 !== "number")
        return t5.$shl();
      t4 = key[29];
      if (typeof t4 !== "number")
        return t4.$shl();
      t3 = key[28];
      if (typeof t3 !== "number")
        return A.iae(t3);
      j11 = (t1 << 24 | t5 << 16 | t4 << 8 | t3) >>> 0;
      t3 = input[3];
      if (typeof t3 !== "number")
        return t3.$shl();
      t4 = input[2];
      if (typeof t4 !== "number")
        return t4.$shl();
      t5 = input[1];
      if (typeof t5 !== "number")
        return t5.$shl();
      t1 = input[0];
      if (typeof t1 !== "number")
        return A.iae(t1);
      j12 = (t3 << 24 | t4 << 16 | t5 << 8 | t1) >>> 0;
      t1 = input[7];
      if (typeof t1 !== "number")
        return t1.$shl();
      t5 = input[6];
      if (typeof t5 !== "number")
        return t5.$shl();
      t4 = input[5];
      if (typeof t4 !== "number")
        return t4.$shl();
      t3 = input[4];
      if (typeof t3 !== "number")
        return A.iae(t3);
      j13 = (t1 << 24 | t5 << 16 | t4 << 8 | t3) >>> 0;
      t3 = input[11];
      if (typeof t3 !== "number")
        return t3.$shl();
      t4 = input[10];
      if (typeof t4 !== "number")
        return t4.$shl();
      t5 = input[9];
      if (typeof t5 !== "number")
        return t5.$shl();
      t1 = input[8];
      if (typeof t1 !== "number")
        return A.iae(t1);
      j14 = (t3 << 24 | t4 << 16 | t5 << 8 | t1) >>> 0;
      t1 = input[15];
      if (typeof t1 !== "number")
        return t1.$shl();
      t5 = input[14];
      if (typeof t5 !== "number")
        return t5.$shl();
      t4 = input[13];
      if (typeof t4 !== "number")
        return t4.$shl();
      t3 = input[12];
      if (typeof t3 !== "number")
        return A.iae(t3);
      j15 = (t1 << 24 | t5 << 16 | t4 << 8 | t3) >>> 0;
      B.JSArray_methods.$indexSet(mix, 0, 1634760805);
      B.JSArray_methods.$indexSet(mix, 1, 857760878);
      B.JSArray_methods.$indexSet(mix, 2, 2036477234);
      B.JSArray_methods.$indexSet(mix, 3, 1797285236);
      B.JSArray_methods.$indexSet(mix, 4, j4);
      B.JSArray_methods.$indexSet(mix, 5, j5);
      B.JSArray_methods.$indexSet(mix, 6, j6);
      B.JSArray_methods.$indexSet(mix, 7, j7);
      B.JSArray_methods.$indexSet(mix, 8, j8);
      B.JSArray_methods.$indexSet(mix, 9, j9);
      B.JSArray_methods.$indexSet(mix, 10, j10);
      B.JSArray_methods.$indexSet(mix, 11, j11);
      B.JSArray_methods.$indexSet(mix, 12, j12);
      B.JSArray_methods.$indexSet(mix, 13, j13);
      B.JSArray_methods.$indexSet(mix, 14, j14);
      B.JSArray_methods.$indexSet(mix, 15, j15);
      for (i = 0; i < 20; i += 2) {
        A.ChaCha20__quarterround(mix, 0, 4, 8, 12);
        A.ChaCha20__quarterround(mix, 1, 5, 9, 13);
        A.ChaCha20__quarterround(mix, 2, 6, 10, 14);
        A.ChaCha20__quarterround(mix, 3, 7, 11, 15);
        A.ChaCha20__quarterround(mix, 0, 5, 10, 15);
        A.ChaCha20__quarterround(mix, 1, 6, 11, 12);
        A.ChaCha20__quarterround(mix, 2, 7, 8, 13);
        A.ChaCha20__quarterround(mix, 3, 4, 9, 14);
      }
      A.writeUint32LE(mix[0] + 1634760805 >>> 0, out, 0);
      A.writeUint32LE(mix[1] + 857760878 >>> 0, out, 4);
      A.writeUint32LE(mix[2] + 2036477234 >>> 0, out, 8);
      A.writeUint32LE(mix[3] + 1797285236 >>> 0, out, 12);
      A.writeUint32LE(mix[4] + j4 >>> 0, out, 16);
      A.writeUint32LE(mix[5] + j5 >>> 0, out, 20);
      A.writeUint32LE(mix[6] + j6 >>> 0, out, 24);
      A.writeUint32LE(mix[7] + j7 >>> 0, out, 28);
      A.writeUint32LE(mix[8] + j8 >>> 0, out, 32);
      A.writeUint32LE(mix[9] + j9 >>> 0, out, 36);
      A.writeUint32LE(mix[10] + j10 >>> 0, out, 40);
      A.writeUint32LE(mix[11] + j11 >>> 0, out, 44);
      A.writeUint32LE(mix[12] + j12 >>> 0, out, 48);
      A.writeUint32LE(mix[13] + j13 >>> 0, out, 52);
      A.writeUint32LE(mix[14] + j14 >>> 0, out, 56);
      A.writeUint32LE(mix[15] + j15 >>> 0, out, 60);
    },
    ChaCha20__incrementCounter(counter, pos, len) {
      var carry, t1;
      for (carry = 1; len > 0;) {
        if (!(pos < 16))
          return A.ioore(counter, pos);
        t1 = counter[pos];
        if (typeof t1 !== "number")
          return t1.$and();
        carry += t1 & 255;
        B.JSArray_methods.$indexSet(counter, pos, carry & 255);
        carry = carry >>> 8;
        ++pos;
        --len;
      }
      if (carry > 0)
        throw A.wrapException(B.MessageException_asg);
    },
    ChaCha20_streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {
      var t1, block, i, i0, j, t2, t3;
      if (key.length !== 32)
        throw A.wrapException(B.ArgumentException_yDH);
      if (dst.length < src.length)
        throw A.wrapException(B.ArgumentException_oav);
      t1 = nonceInplaceCounterLength === 0;
      if (t1)
        throw A.wrapException(B.ArgumentException_A4L);
      block = A.List_List$filled(64, 0, false, type$.int);
      for (i = 0; i < src.length; i = i0) {
        A.ChaCha20__core(block, nonce, key);
        i0 = i + 64;
        j = i;
        while (true) {
          if (!(j < i0 && j < src.length))
            break;
          if (!(j < src.length))
            return A.ioore(src, j);
          t2 = src[j];
          if (typeof t2 !== "number")
            return t2.$and();
          t3 = j - i;
          if (!(t3 >= 0 && t3 < 64))
            return A.ioore(block, t3);
          B.JSArray_methods.$indexSet(dst, j, t2 & 255 ^ block[t3]);
          ++j;
        }
        A.ChaCha20__incrementCounter(nonce, 0, nonceInplaceCounterLength);
      }
      A.zero(block);
      if (t1)
        A.zero(nonce);
      return dst;
    },
    Crc32_quickIntDigest(data) {
      var t1, crc, _i;
      for (t1 = data.length, crc = 4294967295, _i = 0; _i < t1; ++_i)
        crc = crc >>> 8 ^ B.List_YyJ[(crc ^ data[_i]) & 255];
      return (crc ^ 4294967295) >>> 0;
    },
    PBKDF2_deriveKey(iterations, $length, mac, salt) {
      var dlen, ctr, t, u, dk, t2, saltedState, i, t3, j, k, t4, t5,
        prf = mac.call$0(),
        t1 = prf.__HMAC__outer_A;
      t1 === $ && A.throwLateFieldNI("_outer");
      dlen = t1.get$getDigestLength();
      t1 = type$.int;
      ctr = A.List_List$filled(4, 0, false, t1);
      t = A.List_List$filled(dlen, 0, false, t1);
      u = A.List_List$filled(dlen, 0, false, t1);
      dk = A.List_List$filled($length, 0, false, t1);
      t1 = type$.List_int;
      t1._as(salt);
      t2 = prf.__HMAC__inner_A;
      t2 === $ && A.throwLateFieldNI("_inner");
      t2.update$1(salt);
      saltedState = prf.__HMAC__inner_A.saveState$0();
      for (t2 = type$.HashState, i = 0; t3 = i * dlen, t3 < $length;) {
        ++i;
        A.writeUint32BE(i, ctr, 0);
        prf.__HMAC__inner_A.restoreState$1(saltedState);
        prf.__HMAC__outer_A.restoreState$1(t2._as(prf._outerKeyedState));
        prf._hmac$_finished = false;
        t1._as(ctr);
        prf.__HMAC__inner_A.update$1(ctr);
        prf.finish$1(u);
        for (j = 0; j < dlen; ++j)
          B.JSArray_methods.$indexSet(t, j, u[j]);
        for (j = 2; j <= iterations; ++j) {
          prf.__HMAC__inner_A.restoreState$1(t2._as(prf._innerKeyedState));
          prf.__HMAC__outer_A.restoreState$1(t2._as(prf._outerKeyedState));
          prf._hmac$_finished = false;
          t1._as(u);
          prf.__HMAC__inner_A.update$1(u);
          prf.finish$1(u);
          for (k = 0; k < dlen; ++k) {
            t4 = t[k];
            t5 = u[k];
            if (typeof t5 !== "number")
              return A.iae(t5);
            B.JSArray_methods.$indexSet(t, k, (t4 ^ t5) >>> 0);
          }
        }
        j = 0;
        while (true) {
          if (!(j < dlen && t3 + j < $length))
            break;
          if (!(j < dlen))
            return A.ioore(t, j);
          B.JSArray_methods.$indexSet(dk, t3 + j, t[j]);
          ++j;
        }
      }
      A.zero(t);
      A.zero(u);
      A.zero(ctr);
      prf.__HMAC__inner_A.cleanSavedState$1(saltedState);
      prf.clean$0();
      return dk;
    },
    XModemCrc__calculateXmodemCrc(bytes) {
      var t1, crc, i, crc0, crcBytes;
      for (t1 = J.get$iterator$ax(bytes), crc = 0; t1.moveNext$0();) {
        crc ^= t1.get$current() << 8;
        for (i = 0; i < 8; ++i) {
          crc0 = crc << 1;
          crc = (crc & 32768) !== 0 ? crc0 ^ 4129 : crc0;
        }
      }
      crcBytes = A.List_List$filled(2, 0, false, type$.int);
      B.JSArray_methods.$indexSet(crcBytes, 0, crc >>> 8 & 255);
      B.JSArray_methods.$indexSet(crcBytes, 1, crc & 255);
      return crcBytes;
    },
    ExceptionConst_itemNotFound(item) {
      return new A.GenericException(item + " not found.", null);
    },
    ListHelper_clone(_this, immutable, $T) {
      return A.List_List$from(_this, true, $T);
    },
    ListHelper_exceptedLen(_this, len, $T) {
      var t1 = J.getInterceptor$asx(_this);
      if (t1.get$length(_this) !== len)
        throw A.wrapException(A.ArgumentException$("Invalid length. ", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", len, "length", t1.get$length(_this)], type$.String, type$.dynamic)));
      return _this;
    },
    BigIntHelper_get_asUint64(_this) {
      if (_this._isNegative || _this.compareTo$1(0, $.$get$maxU64()) > 0)
        throw A.wrapException(A.ArgumentException$("Invalid Unsigned BigInt 64.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", $.$get$maxU64().get$bitLength(0), "bitLength", _this.get$bitLength(0), "value", _this.toString$0(0)], type$.String, type$.dynamic)));
      return _this;
    },
    IntHelper_get_asUint32(_this) {
      if (B.JSInt_methods.get$isNegative(_this) || _this > 4294967295)
        throw A.wrapException(A.ArgumentException$("Invalid Unsigned int 32.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", B.JSInt_methods.get$bitLength(4294967295), "bitLength", B.JSInt_methods.get$bitLength(_this), "value", B.JSInt_methods.toString$0(_this)], type$.String, type$.dynamic)));
      return _this;
    },
    IntHelper_get_asUint8(_this) {
      if (B.JSInt_methods.get$isNegative(_this) || _this > 255)
        throw A.wrapException(A.ArgumentException$("Invalid Unsigned int 8.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", B.JSInt_methods.get$bitLength(4294967295), "bitLength", B.JSInt_methods.get$bitLength(_this), "value", B.JSInt_methods.toString$0(_this)], type$.String, type$.dynamic)));
      return _this;
    },
    BaseSubstrateSigner_BaseSubstrateSigner$fromBytes(keyBytes, algorithm) {
      var signingKey;
      switch (algorithm) {
        case B.EllipticCurveTypes_ed25519:
          return new A.SubstrateED25519Signer(A.SolanaSigner_SolanaSigner$fromKeyBytes(keyBytes));
        case B.EllipticCurveTypes_secp256k1:
          signingKey = A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(keyBytes, $.$get$ETHSignerConst_secp256());
          return new A.SubstrateEcdsaSigner(new A.EcdsaSigningKey(signingKey, signingKey.publicKey.generator));
        case B.EllipticCurveTypes_sr25519:
          return new A.SubstrateSr25519Signer(A.SchnorrkelSecretKey_SchnorrkelSecretKey$fromBytes(keyBytes));
        default:
          throw A.wrapException(A.ArgumentException$("Invalid substrate signing key algorithm. Excepted: ed25519, secp256k1, or sr25519. Got: " + algorithm.name, null));
      }
    },
    writeUint64LE(value, out) {
      A.writeUint32LE(value, out, 0);
      A.writeUint32LE(B.JSInt_methods._shrBothPositive$1(value, 32), out, 4);
      return out;
    },
    writeUint32LE(value, out, offset) {
      B.JSArray_methods.$indexSet(out, offset, value & 255);
      B.JSArray_methods.$indexSet(out, offset + 1, B.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
      B.JSArray_methods.$indexSet(out, offset + 2, B.JSInt_methods._shrOtherPositive$1(value, 16) & 255);
      B.JSArray_methods.$indexSet(out, offset + 3, B.JSInt_methods._shrOtherPositive$1(value, 24) & 255);
    },
    writeUint16LE(value, out, offset) {
      B.JSArray_methods.$indexSet(out, offset, value & 255);
      B.JSArray_methods.$indexSet(out, offset + 1, B.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
    },
    readUint32LE(array, offset) {
      var t3, t4,
        t1 = offset + 3,
        t2 = array.length;
      if (!(t1 < t2))
        return A.ioore(array, t1);
      t1 = array[t1];
      if (typeof t1 !== "number")
        return t1.$shl();
      t3 = offset + 2;
      if (!(t3 < t2))
        return A.ioore(array, t3);
      t3 = array[t3];
      if (typeof t3 !== "number")
        return t3.$shl();
      t4 = offset + 1;
      if (!(t4 < t2))
        return A.ioore(array, t4);
      t4 = array[t4];
      if (typeof t4 !== "number")
        return t4.$shl();
      if (!(offset < t2))
        return A.ioore(array, offset);
      t2 = array[offset];
      if (typeof t2 !== "number")
        return A.iae(t2);
      return (t1 << 24 | t3 << 16 | t4 << 8 | t2) >>> 0;
    },
    writeUint32BE(value, out, offset) {
      B.JSArray_methods.$indexSet(out, offset, B.JSInt_methods._shrOtherPositive$1(value, 24) & 255);
      B.JSArray_methods.$indexSet(out, offset + 1, B.JSInt_methods._shrOtherPositive$1(value, 16) & 255);
      B.JSArray_methods.$indexSet(out, offset + 2, B.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
      B.JSArray_methods.$indexSet(out, offset + 3, value & 255);
    },
    readUint32BE(array, offset) {
      var t3, t4,
        t1 = J.getInterceptor$asx(array),
        t2 = t1.$index(array, offset);
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = t1.$index(array, offset + 1);
      if (typeof t3 !== "number")
        return t3.$shl();
      t4 = t1.$index(array, offset + 2);
      if (typeof t4 !== "number")
        return t4.$shl();
      t1 = t1.$index(array, offset + 3);
      if (typeof t1 !== "number")
        return A.iae(t1);
      return (t2 << 24 | t3 << 16 | t4 << 8 | t1) >>> 0;
    },
    rotl32(val, shift) {
      var modShift = shift & 31;
      return (val << modShift | B.JSInt_methods._shrReceiverPositive$1(val >>> 0, 32 - modShift)) >>> 0;
    },
    zero(array) {
      var i;
      for (i = 0; i < array.length; ++i)
        B.JSArray_methods.$indexSet(array, i, 0);
    },
    CompareUtils_iterableIsEqual(a, b, $T) {
      var t1, t2, t3, t4, t5, index, valueA, valueB;
      if (a == null)
        return b == null;
      if (b == null || J.get$length$asx(a) !== J.get$length$asx(b))
        return false;
      if (a === b)
        return true;
      for (t1 = J.getInterceptor$asx(a), t2 = type$.Iterable_dynamic, t3 = type$.Map_dynamic_dynamic, t4 = J.getInterceptor$ax(b), t5 = type$.dynamic, index = 0; index < t1.get$length(a); ++index) {
        valueA = t1.elementAt$1(a, index);
        valueB = t4.elementAt$1(b, index);
        if (t3._is(valueA) && t3._is(valueB)) {
          if (!A.CompareUtils_mapIsEqual(valueA, valueB, t5, t5))
            return false;
        } else if (t2._is(valueA) && t2._is(valueB)) {
          if (!A.CompareUtils_iterableIsEqual(valueA, valueB, t5))
            return false;
        } else if (!J.$eq$(valueA, valueB))
          return false;
      }
      return true;
    },
    CompareUtils_mapIsEqual(a, b, $K, $V) {
      var t3, t4, key, valueA, valueB,
        t1 = a.get$length(a),
        t2 = b.get$length(b);
      if (t1 !== t2)
        return false;
      if (a === b)
        return true;
      for (t1 = a.get$keys(), t1 = t1.get$iterator(t1), t2 = type$.Iterable_dynamic, t3 = type$.Map_dynamic_dynamic, t4 = type$.dynamic; t1.moveNext$0();) {
        key = t1.get$current();
        if (!b.containsKey$1(key))
          return false;
        valueA = a.$index(0, key);
        valueB = b.$index(0, key);
        if (t3._is(valueA) && t3._is(valueB)) {
          if (!A.CompareUtils_mapIsEqual(valueA, valueB, t4, t4))
            return false;
        } else if (t2._is(valueA) && t2._is(valueB)) {
          if (!A.CompareUtils_iterableIsEqual(valueA, valueB, t4))
            return false;
        } else if (!J.$eq$(valueA, valueB))
          return false;
      }
      return true;
    },
    HashCodeGenerator_generateBytesHashCode(bytes, optional) {
      var t1, hash, _i;
      for (t1 = J.get$iterator$ax(bytes), hash = 12; t1.moveNext$0();)
        hash = ((hash ^ t1.get$current()) >>> 0) * 31 >>> 0;
      for (t1 = optional.length, _i = 0; _i < optional.length; optional.length === t1 || (0, A.throwConcurrentModificationError)(optional), ++_i)
        hash = (hash ^ optional[_i].get$hashCode(0)) >>> 0;
      return hash;
    },
    HashCodeGenerator_generateHashCode(objects) {
      var hash, _i;
      for (hash = 12, _i = 0; _i < 2; ++_i)
        hash = (hash ^ J.get$hashCode$(objects[_i])) >>> 0;
      return hash;
    },
    IntUtils_encodeVarint(i) {
      var bytes;
      if (i < 253)
        return A._setArrayType([i], type$.JSArray_int);
      else if (i < 65536) {
        bytes = A.List_List$filled(3, 0, false, type$.int);
        B.JSArray_methods.$indexSet(bytes, 0, 253);
        A.writeUint16LE(i, bytes, 1);
        return bytes;
      } else if (i < 4294967296) {
        bytes = A.List_List$filled(5, 0, false, type$.int);
        B.JSArray_methods.$indexSet(bytes, 0, 254);
        A.writeUint32LE(i, bytes, 1);
        return bytes;
      } else
        throw A.wrapException(A.ArgumentException$("Integer is too large: " + i, null));
    },
    IntUtils_bitlengthInBytes(val) {
      var bitlength = B.JSInt_methods.get$bitLength(val);
      if (bitlength === 0)
        return 1;
      return B.JSInt_methods._tdivFast$1((B.JSInt_methods.get$isNegative(val) ? bitlength + 1 : bitlength) + 7, 8);
    },
    IntUtils_toBytes(val, byteOrder, $length) {
      var t1, t2, byteList, i;
      if ($length > 4) {
        t1 = A.List_List$of(A.IntUtils_toBytes(B.JSInt_methods._shrOtherPositive$1(val, 32), B.C_Endian, $length - 4), true, type$.int);
        B.JSArray_methods.addAll$1(t1, A.IntUtils_toBytes(val >>> 0, B.C_Endian, 4));
        if (byteOrder === B.C_Endian0) {
          t2 = A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>");
          return A.List_List$of(new A.ReversedListIterable(t1, t2), true, t2._eval$1("ListIterable.E"));
        }
        return t1;
      }
      byteList = A.List_List$filled($length, 0, false, type$.int);
      for (i = 0; i < $length; ++i) {
        B.JSArray_methods.$indexSet(byteList, $length - i - 1, val & 255);
        val = B.JSInt_methods._shrOtherPositive$1(val, 8);
      }
      if (byteOrder === B.C_Endian0) {
        t1 = A._arrayInstanceType(byteList)._eval$1("ReversedListIterable<1>");
        return A.List_List$of(new A.ReversedListIterable(byteList, t1), true, t1._eval$1("ListIterable.E"));
      }
      return byteList;
    },
    IntUtils_fromBytes(bytes, byteOrder, sign) {
      var t1, lowerPart, result, i, t2;
      if (byteOrder === B.C_Endian0) {
        t1 = J.get$reversed$ax(bytes);
        bytes = A.List_List$from(A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")), true, type$.int);
      }
      t1 = J.getInterceptor$asx(bytes);
      if (t1.get$length(bytes) > 4) {
        lowerPart = A.IntUtils_fromBytes(t1.sublist$2(bytes, t1.get$length(bytes) - 4, t1.get$length(bytes)), B.C_Endian, false);
        result = (B.JSInt_methods._shlPositive$1(A.IntUtils_fromBytes(t1.sublist$2(bytes, 0, t1.get$length(bytes) - 4), B.C_Endian, false), 32) | lowerPart) >>> 0;
      } else
        for (result = 0, i = 0; i < t1.get$length(bytes); ++i) {
          t2 = t1.$index(bytes, t1.get$length(bytes) - i - 1);
          if (typeof t2 !== "number")
            return t2.$shl();
          result = (result | B.JSNumber_methods._shlPositive$1(t2, 8 * i)) >>> 0;
        }
      if (sign) {
        t1 = t1.$index(bytes, 0);
        if (typeof t1 !== "number")
          return t1.$and();
        t1 = (t1 & 128) !== 0;
      } else
        t1 = false;
      if (t1)
        return B.JSInt_methods.toSigned$1(result, A.IntUtils_bitlengthInBytes(result) * 8);
      return result;
    },
    IntUtils_parse(v) {
      var parse, t1, exception;
      try {
        if (A._isInt(v))
          return v;
        if (v instanceof A._BigIntImpl) {
          t1 = v.toInt$0(0);
          return t1;
        }
        if (type$.List_int._is(v)) {
          t1 = A.IntUtils_fromBytes(v, B.C_Endian, true);
          return t1;
        }
        if (typeof v == "string") {
          parse = A.Primitives_parseInt(v, null);
          if (parse == null) {
            t1 = $.$get$StringUtils__hexaDecimalRegex();
            t1 = t1._nativeRegExp.test(v);
          } else
            t1 = false;
          if (t1)
            parse = A.int_parse(A.StringUtils_strip0x(v), 16);
          t1 = parse;
          t1.toString;
          return t1;
        }
      } catch (exception) {
      }
      throw A.wrapException(B.ArgumentException_rPd);
    },
    IntUtils_tryParse(v) {
      var t1, exception;
      if (v == null)
        return null;
      try {
        t1 = A.IntUtils_parse(v);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.ArgumentException)
          return null;
        else
          throw exception;
      }
    },
    IntUtils_max(a, b) {
      if (a > b)
        return a;
      return b;
    },
    IntUtils_min(a, b) {
      if (a > b)
        return b;
      return a;
    },
    groupBy(values, key, $S, $T) {
      var t1, _i, element, t2, t3,
        map = A.LinkedHashMap_LinkedHashMap$_empty($T, $S._eval$1("List<0>"));
      for (t1 = $S._eval$1("JSArray<0>"), _i = 0; _i < 1; ++_i) {
        element = values[_i];
        t2 = key.call$1(element);
        t3 = map.$index(0, t2);
        if (t3 == null) {
          t3 = A._setArrayType([], t1);
          map.$indexSet(0, t2, t3);
          t2 = t3;
        } else
          t2 = t3;
        J.add$1$ax(t2, element);
      }
      return map;
    },
    zoneClient() {
      return null;
    },
    wrapFormatException($name, value, body, $T) {
      var error, error0, t1, exception;
      try {
        t1 = body.call$0();
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.SourceSpanFormatException) {
          error = t1;
          throw A.wrapException(A.SourceSpanFormatException$("Invalid " + $name + ": " + error._span_exception$_message, error._span, error.get$source()));
        } else if (type$.FormatException._is(t1)) {
          error0 = t1;
          throw A.wrapException(A.FormatException$("Invalid " + $name + ' "' + value + '": ' + error0.get$message(), error0.get$source(), error0.get$offset()));
        } else
          throw exception;
      }
    },
    MoneroCrypto_derivationToScalar(derivation, outIndex) {
      var outputIndex, t1, h;
      A.IntegerListValidator_as32Bytes(derivation, "derivationToScalar");
      outputIndex = new A.MoneroIntVarInt(A.IntegerLayout$(6, B.C_Endian0, null, false), -1, null).serialize$1(outIndex);
      A.BytesUtils_validateListOfBytes(derivation);
      t1 = type$.int;
      t1 = A.List_List$of(A.List_List$unmodifiable(derivation, t1), true, t1);
      B.JSArray_methods.addAll$1(t1, outputIndex);
      h = A.Keccack_hash(t1, 32);
      A.CryptoOps_scReduce32(h);
      return h;
    },
    MoneroCrypto_derivationToScalarFast(derivation, outIndex) {
      var outputIndex, t1, toint;
      A.IntegerListValidator_as32Bytes(derivation, "derivationToScalar");
      outputIndex = new A.MoneroIntVarInt(A.IntegerLayout$(6, B.C_Endian0, null, false), -1, null).serialize$1(outIndex);
      A.BytesUtils_validateListOfBytes(derivation);
      t1 = type$.int;
      t1 = A.List_List$of(A.List_List$unmodifiable(derivation, t1), true, t1);
      B.JSArray_methods.addAll$1(t1, outputIndex);
      toint = A.BigintUtils_fromBytes(A.Keccack_hash(t1, 32), B.C_Endian0, false);
      t1 = $.$get$Curves_generatorED25519().order;
      t1.toString;
      return A.BigintUtils_toBytes(toint.$mod(0, t1), 32, B.C_Endian0);
    },
    MoneroCrypto_derivePublicKeyFast(basePublicKey, derivation, outIndex) {
      var sc;
      A.IntegerListValidator_as32Bytes(derivation, "derivePublicKey");
      sc = A.Ed25519Utils_asScalarInt(A.MoneroCrypto_derivationToScalarFast(derivation, outIndex));
      return A.MoneroPublicKey_MoneroPublicKey$fromBytes($.$get$Curves_generatorED25519().$mul(0, sc).$add(0, basePublicKey.publicKey._point).toBytes$0());
    },
    MoneroCrypto_derivePublicKey(basePublicKey, derivation, outIndex) {
      var t1, point1, point2, point3, point4, point5, resultKey;
      A.IntegerListValidator_as32Bytes(derivation, "derivePublicKey");
      t1 = type$.int;
      point1 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      point2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      point3 = new A.GroupElementCached(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      point4 = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      point5 = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      if (A.CryptoOps_geFromBytesVartime_(point1, basePublicKey.publicKey._encoded) !== 0)
        throw A.wrapException(B.MoneroCryptoException_alO);
      A.CryptoOps_geScalarMultBase(point2, A.MoneroCrypto_derivationToScalar(derivation, outIndex));
      A.CryptoOps_geP3ToCached(point3, point2);
      A.CryptoOps_geAdd(point4, point1, point3);
      A.CryptoOps_geP1P1ToP2(point5, point4);
      resultKey = A.RCT_zero(true);
      A.CryptoOps_geToBytes(resultKey, point5);
      return A.MoneroPublicKey_MoneroPublicKey$fromBytes(resultKey);
    },
    MoneroCrypto_deriveViewTag(derivation, outIndex) {
      var outputIndex, t1, hash;
      A.IntegerListValidator_as32Bytes(derivation, "deriveViewTag");
      outputIndex = new A.MoneroIntVarInt(A.IntegerLayout$(6, B.C_Endian0, null, false), -1, null).serialize$1(outIndex);
      t1 = A.List_List$of(new A.CodeUnits("view_tag"), true, type$.int);
      B.JSArray_methods.addAll$1(t1, derivation);
      B.JSArray_methods.addAll$1(t1, outputIndex);
      hash = A.Keccack_hash(t1, 32);
      if (0 >= hash.length)
        return A.ioore(hash, 0);
      return hash[0];
    },
    MoneroCrypto_generateKeyDerivationBytes(pubkey, resultKey, secretKey) {
      var t1, point, point2, point3;
      if (A.CryptoOps_scCheck(secretKey) !== 0)
        throw A.wrapException(B.MoneroCryptoException_KrQ);
      t1 = type$.int;
      point = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      point2 = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      point3 = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      if (A.CryptoOps_geFromBytesVartime_(point, pubkey) !== 0)
        throw A.wrapException(B.MoneroCryptoException_alO);
      A.CryptoOps_geScalarMult(point2, secretKey, point);
      A.CryptoOps_geMul8(point3, point2);
      A.CryptoOps_geP1P1ToP2(point2, point3);
      resultKey = A.RCT_zero(true);
      A.CryptoOps_geToBytes(resultKey, point2);
      return resultKey;
    },
    MoneroCrypto_generateKeyDerivationFast(pubkey, secretKey) {
      return pubkey.publicKey._point.$mul(0, secretKey.privateKey.secret).$mul(0, A._BigIntImpl__BigIntImpl$from(8)).toBytes$0();
    },
    MoneroCrypto_generateKeyDerivation(pubkey, secretKey) {
      return A.MoneroCrypto_generateKeyDerivationBytes(pubkey.publicKey._encoded, null, secretKey.privateKey.key);
    },
    MoneroCrypto_generateTxProof($A, $B, $R, d, hash, r) {
      var t1, t2, t3, t4, t5, t6, aP3, bP3, t7, t8, t9, t10, k, sep, xP2, x, xP3, yP2, y, h, sigR,
        _s15_ = "generateTxProof",
        _s11_ = "EcSignature";
      A.IntegerListValidator_as32Bytes(hash, _s15_);
      A.IntegerListValidator_as32Bytes($R, _s15_);
      A.IntegerListValidator_as32Bytes($A, _s15_);
      t1 = $B == null;
      if (!t1)
        A.IntegerListValidator_as32Bytes($B, _s15_);
      A.IntegerListValidator_as32Bytes(d, _s15_);
      A.IntegerListValidator_as32Bytes(r, _s15_);
      t2 = type$.int;
      t3 = A.List_List$filled(10, 0, false, t2);
      t4 = A.List_List$filled(10, 0, false, t2);
      t5 = A.List_List$filled(10, 0, false, t2);
      t6 = A.List_List$filled(10, 0, false, t2);
      aP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      bP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      t7 = A.List_List$filled(10, 0, false, t2);
      t8 = A.List_List$filled(10, 0, false, t2);
      t9 = A.List_List$filled(10, 0, false, t2);
      t10 = A.List_List$filled(10, 0, false, t2);
      if (A.CryptoOps_geFromBytesVartime_(new A.GroupElementP3(new A.FieldElement(t3), new A.FieldElement(t4), new A.FieldElement(t5), new A.FieldElement(t6)), $R) !== 0)
        throw A.wrapException(B.MoneroCryptoException_egt);
      if (A.CryptoOps_geFromBytesVartime_(aP3, $A) !== 0)
        throw A.wrapException(B.MoneroCryptoException_Yf3);
      t3 = !t1;
      if (t3 && A.CryptoOps_geFromBytesVartime_(bP3, $B) !== 0)
        throw A.wrapException(B.MoneroCryptoException_P1W);
      if (A.CryptoOps_geFromBytesVartime_(new A.GroupElementP3(new A.FieldElement(t7), new A.FieldElement(t8), new A.FieldElement(t9), new A.FieldElement(t10)), d) !== 0)
        throw A.wrapException(B.MoneroCryptoException_I4y);
      k = A.RCT_skGen_();
      sep = A.Keccack_hash(new A.CodeUnits("TXPROOF_V2"), 32);
      if (t3) {
        xP2 = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        A.CryptoOps_geScalarMult(xP2, k, bP3);
        x = A.CryptoOps_geTobytes_(xP2);
      } else {
        xP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        A.CryptoOps_geScalarMultBase(xP3, k);
        x = A.CryptoOps_geP3Tobytes_(xP3);
      }
      yP2 = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      A.CryptoOps_geScalarMult(yP2, k, aP3);
      y = A.CryptoOps_geTobytes_(yP2);
      t3 = A.List_List$of(hash, true, t2);
      B.JSArray_methods.addAll$1(t3, d);
      B.JSArray_methods.addAll$1(t3, x);
      B.JSArray_methods.addAll$1(t3, y);
      B.JSArray_methods.addAll$1(t3, sep);
      B.JSArray_methods.addAll$1(t3, $R);
      B.JSArray_methods.addAll$1(t3, $A);
      B.JSArray_methods.addAll$1(t3, t1 ? B.List_ouN : $B);
      h = A.Keccack_hash(t3, 32);
      A.CryptoOps_scReduce32(h);
      sigR = A.RCT_zero(true);
      A.CryptoOps_scMulSub(sigR, h, r, k);
      t3 = A.IntegerListValidator_as32Bytes(h, _s11_);
      A.BytesUtils_validateListOfBytes(t3);
      t3 = A.List_List$unmodifiable(t3, t2);
      t4 = A.IntegerListValidator_as32Bytes(sigR, _s11_);
      A.BytesUtils_validateListOfBytes(t4);
      return new A.MECSignature(t3, A.List_List$unmodifiable(t4, t2));
    },
    MoneroCrypto_verifyTxProof($A, $B, $R, d, hash, signature, version) {
      var t1, t2, rP3, aP3, bP3, dP3, t3, crP32, crP2, t4, xP1P1, t5, rbP2, rB, rbP3, rbCached, rgP3, rgCached, xP2, cdP2, raP2, cD, rA, cdP3, raP3, raCached, yP1P1, yP2, sep, x, y, h, c2,
        _s13_ = "verifyTxProof";
      A.IntegerListValidator_as32Bytes(hash, _s13_);
      A.IntegerListValidator_as32Bytes($R, _s13_);
      A.IntegerListValidator_as32Bytes($A, _s13_);
      t1 = $B == null;
      if (!t1)
        A.IntegerListValidator_as32Bytes($B, _s13_);
      A.IntegerListValidator_as32Bytes(d, _s13_);
      t2 = type$.int;
      rP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      aP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      bP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      dP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      if (A.CryptoOps_geFromBytesVartime_(rP3, $R) !== 0)
        return false;
      if (A.CryptoOps_geFromBytesVartime_(aP3, $A) !== 0)
        return false;
      t3 = !t1;
      if (t3 && A.CryptoOps_geFromBytesVartime_(bP3, $B) !== 0)
        return false;
      if (A.CryptoOps_geFromBytesVartime_(dP3, d) !== 0)
        return false;
      crP32 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      crP2 = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      t4 = signature.c;
      A.CryptoOps_geScalarMult(crP2, t4, rP3);
      if (A.CryptoOps_geFromBytesVartime_(crP32, A.CryptoOps_geTobytes_(crP2)) !== 0)
        return false;
      xP1P1 = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      t5 = signature.r;
      if (t3) {
        rbP2 = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        A.CryptoOps_geScalarMult(rbP2, t5, bP3);
        rB = A.CryptoOps_geTobytes_(rbP2);
        rbP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        if (A.CryptoOps_geFromBytesVartime_(rbP3, rB) !== 0)
          return false;
        rbCached = new A.GroupElementCached(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        A.CryptoOps_geP3ToCached(rbCached, rbP3);
        A.CryptoOps_geAdd(xP1P1, crP32, rbCached);
      } else {
        rgP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        A.CryptoOps_geScalarMultBase(rgP3, t5);
        rgCached = new A.GroupElementCached(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        A.CryptoOps_geP3ToCached(rgCached, rgP3);
        A.CryptoOps_geAdd(xP1P1, crP32, rgCached);
      }
      xP2 = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      A.CryptoOps_geP1P1ToP2(xP2, xP1P1);
      cdP2 = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      A.CryptoOps_geScalarMult(cdP2, t4, dP3);
      raP2 = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      A.CryptoOps_geScalarMult(raP2, t5, aP3);
      cD = A.CryptoOps_geTobytes_(cdP2);
      rA = A.CryptoOps_geTobytes_(raP2);
      cdP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      raP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      if (A.CryptoOps_geFromBytesVartime_(cdP3, cD) !== 0)
        return false;
      if (A.CryptoOps_geFromBytesVartime_(raP3, rA) !== 0)
        return false;
      raCached = new A.GroupElementCached(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      A.CryptoOps_geP3ToCached(raCached, raP3);
      yP1P1 = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      A.CryptoOps_geAdd(yP1P1, cdP3, raCached);
      yP2 = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
      A.CryptoOps_geP1P1ToP2(yP2, yP1P1);
      sep = A.Keccack_hash(new A.CodeUnits("TXPROOF_V2"), 32);
      x = A.CryptoOps_geTobytes_(xP2);
      y = A.CryptoOps_geTobytes_(yP2);
      if (version === 1) {
        t1 = A.List_List$of(hash, true, t2);
        B.JSArray_methods.addAll$1(t1, d);
        B.JSArray_methods.addAll$1(t1, x);
        B.JSArray_methods.addAll$1(t1, y);
        B.JSArray_methods.addAll$1(t1, sep);
        h = A.Keccack_hash(t1, 32);
        A.CryptoOps_scReduce32(h);
        c2 = h;
      } else {
        if (version === 2) {
          t2 = A.List_List$of(hash, true, t2);
          B.JSArray_methods.addAll$1(t2, d);
          B.JSArray_methods.addAll$1(t2, x);
          B.JSArray_methods.addAll$1(t2, y);
          B.JSArray_methods.addAll$1(t2, sep);
          B.JSArray_methods.addAll$1(t2, $R);
          B.JSArray_methods.addAll$1(t2, $A);
          B.JSArray_methods.addAll$1(t2, t1 ? A.RCT_zero(false) : $B);
          h = A.Keccack_hash(t2, 32);
          A.CryptoOps_scReduce32(h);
        } else
          throw A.wrapException(A.MoneroCryptoException$("Invalid tx proof version", A.LinkedHashMap_LinkedHashMap$_literal(["version", version], type$.String, type$.dynamic)));
        c2 = h;
      }
      A.CryptoOps_scSub(c2, c2, t4);
      return A.CryptoOps_scIsNonZero(c2) === 0;
    },
    CLSAGUtins_generate(message, $P, p, $C, z, cNonZero, cOffset, l) {
      var t1, hP3, $H, $D, a, aG, aH, sigI, sigD, sigC1, point, iPrecomp, dPrecomp, t2, _length, t3, muPtoHash, _i, muCtoHash, i, i0, t4, t5, t6, muP, muC, _length0, cToHash, c, sigS, $L, $R, cP, cC, pPrecomp, cPrecomp, hPrecomp, hiP3, b2, rv, h, out, hashP2, t7, hash8P1p1, t8, t9, t10, u, s0PmuP, s0AddZMuC,
        n = $P.length;
      if (n !== $C.length)
        throw A.wrapException(B.MoneroCryptoException_eL6);
      if (n !== cNonZero.length)
        throw A.wrapException(B.MoneroCryptoException_eL6);
      if (l >= n)
        throw A.wrapException(B.MoneroCryptoException_tJe);
      t1 = type$.int;
      hP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      if (!(l >= 0 && l < $P.length))
        return A.ioore($P, l);
      A.RCT_hashToP3(hP3, $P[l]);
      $H = A.RCT_zero(true);
      A.CryptoOps_geP3Tobytes($H, hP3);
      $D = A.RCT_zero(true);
      a = A.RCT_zero(true);
      aG = A.RCT_zero(true);
      aH = A.RCT_zero(true);
      sigI = A.RCT_zero(true);
      sigD = A.RCT_zero(true);
      sigC1 = A.RCT_zero(true);
      A.RCT_skGen(a);
      point = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_scReduce32Copy(aG, a);
      A.CryptoOps_geScalarMultBase(point, aG);
      A.CryptoOps_geP3Tobytes(aG, point);
      A.RCT_scalarmultKey(aH, $H, a);
      A.RCT_scalarmultKey(sigI, $H, p);
      A.RCT_scalarmultKey($D, $H, z);
      iPrecomp = A.GroupElementCached_dsmp();
      dPrecomp = A.GroupElementCached_dsmp();
      A.RCT_precomp(iPrecomp, sigI);
      A.RCT_precomp(dPrecomp, $D);
      A.RCT_scalarmultKey(sigD, $D, B.List_D3e);
      t2 = 2 * n;
      _length = t2 + 4;
      t3 = type$.List_int;
      muPtoHash = J.JSArray_JSArray$allocateGrowable(_length, t3);
      for (_i = 0; _i < _length; ++_i)
        muPtoHash[_i] = A.RCT_zero(true);
      muCtoHash = J.JSArray_JSArray$allocateGrowable(_length, t3);
      for (_i = 0; _i < _length; ++_i)
        muCtoHash[_i] = A.RCT_zero(true);
      B.JSArray_methods.$indexSet(muPtoHash, 0, A.RCT_strToKey("CLSAG_agg_0"));
      B.JSArray_methods.$indexSet(muCtoHash, 0, A.RCT_strToKey("CLSAG_agg_1"));
      for (i = n + 1, i0 = 1; i0 < i; ++i0) {
        t4 = i0 - 1;
        if (!(t4 < $P.length))
          return A.ioore($P, t4);
        B.JSArray_methods.$indexSet(muPtoHash, i0, $P[t4]);
        if (!(t4 < $P.length))
          return A.ioore($P, t4);
        B.JSArray_methods.$indexSet(muCtoHash, i0, $P[t4]);
      }
      for (t4 = t2 + 1, i0 = i; i0 < t4; ++i0) {
        t5 = i0 - n - 1;
        if (!(t5 >= 0 && t5 < cNonZero.length))
          return A.ioore(cNonZero, t5);
        B.JSArray_methods.$indexSet(muPtoHash, i0, cNonZero[t5]);
        if (!(t5 < cNonZero.length))
          return A.ioore(cNonZero, t5);
        B.JSArray_methods.$indexSet(muCtoHash, i0, cNonZero[t5]);
      }
      B.JSArray_methods.$indexSet(muPtoHash, t4, sigI);
      t5 = t2 + 2;
      B.JSArray_methods.$indexSet(muPtoHash, t5, sigD);
      t6 = t2 + 3;
      B.JSArray_methods.$indexSet(muPtoHash, t6, cOffset);
      B.JSArray_methods.$indexSet(muCtoHash, t4, sigI);
      B.JSArray_methods.$indexSet(muCtoHash, t5, sigD);
      B.JSArray_methods.$indexSet(muCtoHash, t6, cOffset);
      A.RCT_zero(true);
      A.RCT_zero(true);
      muP = A.RCT_hashToScalarKeys(muPtoHash);
      muC = A.RCT_hashToScalarKeys(muCtoHash);
      _length0 = t2 + 5;
      cToHash = J.JSArray_JSArray$allocateGrowable(_length0, t3);
      for (_i = 0; _i < _length0; ++_i)
        cToHash[_i] = A.RCT_zero(true);
      A.RCT_zero(true);
      B.JSArray_methods.$indexSet(cToHash, 0, A.RCT_strToKey("CLSAG_round"));
      for (i0 = 1; i0 < i; ++i0) {
        t2 = i0 - 1;
        if (!(t2 < $P.length))
          return A.ioore($P, t2);
        B.JSArray_methods.$indexSet(cToHash, i0, $P[t2]);
        if (!(t2 < cNonZero.length))
          return A.ioore(cNonZero, t2);
        B.JSArray_methods.$indexSet(cToHash, i0 + n, cNonZero[t2]);
      }
      B.JSArray_methods.$indexSet(cToHash, t4, cOffset);
      B.JSArray_methods.$indexSet(cToHash, t5, message);
      B.JSArray_methods.$indexSet(cToHash, t6, aG);
      B.JSArray_methods.$indexSet(cToHash, _length, aH);
      c = A.RCT_hashToScalarKeys(cToHash);
      i = B.JSInt_methods.$mod(l + 1, n);
      if (i === 0)
        sigC1 = A.ListHelper_clone(c, false, t1);
      sigS = J.JSArray_JSArray$allocateGrowable(n, t3);
      for (_i = 0; _i < n; ++_i)
        sigS[_i] = A.RCT_zero(true);
      A.RCT_zero(true);
      $L = A.RCT_zero(true);
      $R = A.RCT_zero(true);
      cP = A.RCT_zero(true);
      cC = A.RCT_zero(true);
      pPrecomp = A.GroupElementCached_dsmp();
      cPrecomp = A.GroupElementCached_dsmp();
      hPrecomp = A.GroupElementCached_dsmp();
      hiP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      for (; i !== l;) {
        B.JSArray_methods.$indexSet(sigS, i, A.RCT_skGen_());
        A.RCT_zero(true);
        A.CryptoOps_scMul(cP, muP, c);
        A.CryptoOps_scMul(cC, muC, c);
        if (!(i >= 0 && i < $P.length))
          return A.ioore($P, i);
        t2 = $P[i];
        b2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
        if (A.CryptoOps_geFromBytesVartime_(b2, t2) !== 0)
          A.throwExpression(B.MoneroCryptoException_WZC);
        A.CryptoOps_geDsmPrecomp(pPrecomp, b2);
        if (!(i < $C.length))
          return A.ioore($C, i);
        t2 = $C[i];
        b2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
        if (A.CryptoOps_geFromBytesVartime_(b2, t2) !== 0)
          A.throwExpression(B.MoneroCryptoException_WZC);
        A.CryptoOps_geDsmPrecomp(cPrecomp, b2);
        if (!(i < sigS.length))
          return A.ioore(sigS, i);
        t2 = sigS[i];
        rv = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
        A.CryptoOps_geTripleScalarMultBaseVartime(rv, t2, cP, pPrecomp, cC, cPrecomp);
        A.CryptoOps_geToBytes($L, rv);
        if (!(i < $P.length))
          return A.ioore($P, i);
        t2 = $P[i];
        h = A.Keccack$(32);
        h.super$_Keccack$update(t3._as(t2));
        out = A.List_List$filled(h.digestLength, 0, false, t1);
        t3._as(out);
        if (!h._finished)
          h._padAndPermute$1(1);
        else
          h._pos = 0;
        h._squeeze$1(out);
        h.reset$0();
        hashP2 = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
        A.CryptoOps_geFromfeFrombytesVartime(hashP2, out);
        t2 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
        t4 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
        t5 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
        t7 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
        hash8P1p1 = new A.GroupElementP1P1(t2, t4, t5, t7);
        t8 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
        t9 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
        t10 = new A.FieldElement(A.List_List$filled(10, 0, false, t1));
        u = new A.GroupElementP2(t8, t9, t10);
        A.CryptoOps_geP2Dbl(hash8P1p1, hashP2);
        A.CryptoOps_feMul(t8, t2, t7);
        A.CryptoOps_feMul(t9, t4, t5);
        A.CryptoOps_feMul(t10, t5, t7);
        A.CryptoOps_geP2Dbl(hash8P1p1, u);
        A.CryptoOps_feMul(t8, t2, t7);
        A.CryptoOps_feMul(t9, t4, t5);
        A.CryptoOps_feMul(t10, t5, t7);
        A.CryptoOps_geP2Dbl(hash8P1p1, u);
        A.CryptoOps_geP1P1ToP3(hiP3, hash8P1p1);
        A.CryptoOps_geDsmPrecomp(hPrecomp, hiP3);
        if (!(i < sigS.length))
          return A.ioore(sigS, i);
        t7 = sigS[i];
        rv = new A.GroupElementP2(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
        A.CryptoOps_geTripleScalarMultBasePrecompVartime(rv, t7, hPrecomp, cP, iPrecomp, cC, dPrecomp);
        A.CryptoOps_geToBytes($R, rv);
        B.JSArray_methods.$indexSet(cToHash, t6, $L);
        B.JSArray_methods.$indexSet(cToHash, _length, $R);
        c = A.ListHelper_clone(A.RCT_hashToScalarKeys(cToHash), false, t1);
        i = B.JSInt_methods.$mod(i + 1, n);
        if (i === 0)
          sigC1 = A.ListHelper_clone(c, false, t1);
      }
      if (!(l < sigS.length))
        return A.ioore(sigS, l);
      t1 = sigS[l];
      s0PmuP = A.RCT_zero(true);
      A.CryptoOps_scMul(s0PmuP, muP, p);
      s0AddZMuC = A.RCT_zero(true);
      A.CryptoOps_scMulAdd(s0AddZMuC, muC, z, s0PmuP);
      A.CryptoOps_scMulSub(t1, c, s0AddZMuC, a);
      return A.Clsag$(sigC1, sigD, sigI, sigS);
    },
    CLSAGUtins_prove(message, pubs, inSk, a, cout, index) {
      var sk, _i, t2, $P, $C, cNonZero, i, k, t3, tmp, b2, a2, tmp2, tmp3,
        t1 = J.getInterceptor$asx(pubs);
      if (t1.get$isEmpty(pubs))
        throw A.wrapException(B.MoneroCryptoException_s8b);
      sk = J.JSArray_JSArray$allocateGrowable(2, type$.List_int);
      for (_i = 0; _i < 2; ++_i)
        sk[_i] = A.RCT_zero(true);
      t2 = type$.JSArray_List_int;
      $P = A._setArrayType([], t2);
      $C = A._setArrayType([], t2);
      cNonZero = A._setArrayType([], t2);
      for (t2 = type$.int, i = 0; i < t1.get$length(pubs); ++i) {
        k = t1.$index(pubs, i);
        B.JSArray_methods.add$1($P, A.ListHelper_clone(k.dest, false, t2));
        t3 = k.mask;
        B.JSArray_methods.add$1(cNonZero, A.ListHelper_clone(t3, false, t2));
        tmp = A.RCT_zero(true);
        b2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        a2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        if (A.CryptoOps_geFromBytesVartime_(b2, cout) !== 0)
          A.throwExpression(B.MoneroCryptoException_WZC);
        if (A.CryptoOps_geFromBytesVartime_(a2, t3) !== 0)
          A.throwExpression(B.MoneroCryptoException_WZC);
        tmp2 = new A.GroupElementCached(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        A.CryptoOps_geP3ToCached(tmp2, b2);
        tmp3 = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)), new A.FieldElement(A.List_List$filled(10, 0, false, t2)));
        A.CryptoOps_geSub(tmp3, a2, tmp2);
        A.CryptoOps_geP1P1ToP3(a2, tmp3);
        A.CryptoOps_geP3Tobytes(tmp, a2);
        B.JSArray_methods.add$1($C, tmp);
      }
      B.JSArray_methods.$indexSet(sk, 0, A.ListHelper_clone(inSk.dest, false, t2));
      A.CryptoOps_scSub(sk[1], inSk.mask, a);
      return A.CLSAGUtins_generate(message, $P, sk[0], $C, sk[1], cNonZero, cout, index);
    },
    MoneroStorageSerializer_deserialize(bytes) {
      A.BytesUtils_validateListOfBytes(bytes);
      bytes = A.List_List$unmodifiable(bytes, type$.int);
      if (bytes.length < 9)
        throw A.wrapException(B.MoneroSerializationException_k8P);
      if (!A.BytesUtils_bytesEqual(B.JSArray_methods.sublist$2(bytes, 0, 9), B.List_01))
        throw A.wrapException(B.MoneroSerializationException_k8P);
      return A.MoneroStorageSerializer_decodeSection(bytes, 9).value;
    },
    MoneroStorageSerializer_decodeSection(bytes, offset) {
      var decode, o, len, values, i, t2, nameLength, $name, flagTag, flag, type,
        t1 = bytes.length;
      if (!(offset >= 0 && offset < t1))
        return A.ioore(bytes, offset);
      if (J.$eq$(bytes[offset], 0))
        return new A.DecodeStorageResult(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), 1, type$.DecodeStorageResult_Map_String_dynamic);
      decode = A.MoneroStorageSerializer_decodeVarint(bytes, offset);
      o = decode.length;
      len = decode.value;
      values = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      for (i = 0; i < len; ++i) {
        t2 = offset + o;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(bytes, t2);
        nameLength = bytes[t2];
        ++o;
        t2 = offset + o;
        $name = A.StringUtils_decode(B.JSArray_methods.sublist$2(bytes, t2, t2 + nameLength), false, B.StringEncoding_1);
        o += nameLength;
        t2 = offset + o;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(bytes, t2);
        flagTag = bytes[t2];
        flag = (flagTag & 4294967167) >>> 0;
        ++o;
        type = A.MoneroStorageTypes_fromFlag(flag);
        if (type === B.MoneroStorageTypes_ARRAY_13_false_false)
          throw A.wrapException(B.MoneroSerializationException_H37);
        if (flag !== flagTag) {
          decode = A.MoneroStorageSerializer__decodeArray(bytes, type, o + offset);
          values.$indexSet(0, $name, decode.value);
          o += decode.length;
          continue;
        }
        t2 = offset + o;
        switch (type) {
          case B.MoneroStorageTypes_OBJECT_12_false_false:
            decode = A.MoneroStorageSerializer_decodeSection(bytes, t2);
            values.$indexSet(0, $name, decode.value);
            o += decode.length;
            break;
          default:
            decode = A.MoneroStorageSerializer__decodePromitive(bytes, t2, type);
            values.$indexSet(0, $name, decode.value);
            o += decode.length;
            break;
        }
      }
      return new A.DecodeStorageResult(values, o, type$.DecodeStorageResult_Map_String_dynamic);
    },
    MoneroStorageSerializer__decodePromitive(bytes, offset, type) {
      var typeDetails, byteLength, byte, t1, decodeLength, t2, strBytes, str;
      if (type.isInteger) {
        typeDetails = A.MoneroStorageSerializer_getNumericTypesBitLength(type);
        byteLength = B.JSInt_methods._tdivFast$1(typeDetails.item1, 8);
        return new A.DecodeStorageResult(A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(bytes, offset, offset + byteLength), B.C_Endian0, typeDetails.item2), byteLength, type$.DecodeStorageResult_BigInt);
      }
      switch (type) {
        case B.MoneroStorageTypes_BOOL_11_true_false:
          if (!(offset >= 0 && offset < bytes.length))
            return A.ioore(bytes, offset);
          byte = bytes[offset];
          t1 = byte === 1;
          if (!t1 && byte !== 0)
            A.throwExpression(A.MoneroSerializationException$("Invalid boolean byte.", A.LinkedHashMap_LinkedHashMap$_literal(["byte", byte], type$.String, type$.dynamic)));
          return new A.DecodeStorageResult(t1, 1, type$.DecodeStorageResult_bool);
        case B.MoneroStorageTypes_STRING_10_true_false:
          decodeLength = A.MoneroStorageSerializer_decodeVarint(bytes, offset);
          t1 = decodeLength.length;
          offset += t1;
          t2 = decodeLength.value;
          if (typeof t2 !== "number")
            return A.iae(t2);
          strBytes = A.List_List$unmodifiable(B.JSArray_methods.sublist$2(bytes, offset, offset + t2), type$.int);
          str = A.StringUtils_tryDecode(strBytes);
          if (str == null)
            str = A.BytesUtils_toHexString(strBytes, true, null);
          return new A.DecodeStorageResult(str, t1 + t2, type$.DecodeStorageResult_String);
        case B.MoneroStorageTypes_DOUBLE_9_true_false:
          return new A.DecodeStorageResult(B.NativeByteData_methods._getFloat64$2(A.ByteData_ByteData$sublistView(new Uint8Array(A._ensureNativeList(B.JSArray_methods.sublist$2(bytes, offset, offset + 8)))), 0, true), 8, type$.DecodeStorageResult_double);
      }
      throw A.wrapException(A.MoneroSerializationException$("Invalid promitive type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type.name], type$.String, type$.dynamic)));
    },
    MoneroStorageSerializer__decodeArray(bytes, childtype, offset) {
      var i, decode,
        $length = A.MoneroStorageSerializer_decodeVarint(bytes, offset),
        len = $length.length,
        values = [],
        t1 = $length.value;
      if (typeof t1 !== "number")
        return A.iae(t1);
      i = 0;
      for (; i < t1; ++i)
        switch (childtype) {
          case B.MoneroStorageTypes_OBJECT_12_false_false:
            decode = A.MoneroStorageSerializer_decodeSection(bytes, offset + len);
            values.push(decode.value);
            len += decode.length;
            break;
          case B.MoneroStorageTypes_ARRAY_13_false_false:
            throw A.wrapException(B.MoneroSerializationException_H37);
          default:
            decode = A.MoneroStorageSerializer__decodePromitive(bytes, offset + len, childtype);
            values.push(decode.value);
            len += decode.length;
            break;
        }
      return new A.DecodeStorageResult(values, len, type$.DecodeStorageResult_List_dynamic);
    },
    MoneroStorageSerializer_getVarintLength(byte) {
      switch (byte & 3) {
        case 0:
          return 1;
        case 1:
          return 2;
        case 2:
          return 4;
        case 3:
          return 8;
      }
    },
    MoneroStorageSerializer_decodeVarint(bytes, offset) {
      var $length, value;
      if (!(offset >= 0 && offset < bytes.length))
        return A.ioore(bytes, offset);
      $length = A.MoneroStorageSerializer_getVarintLength(bytes[offset]);
      value = A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(bytes, offset, offset + $length), B.C_Endian0, false).$shr(0, 2);
      if (value.get$isValidInt())
        return new A.DecodeStorageResult(value.toInt$0(0), $length, type$.DecodeStorageResult_int);
      throw A.wrapException(B.MoneroSerializationException_ujl);
    },
    MoneroStorageSerializer_getNumericTypesBitLength(type) {
      var t1, bitlenPart;
      if (!type.isInteger)
        throw A.wrapException(A.MoneroSerializationException$("The provided type is not integer type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type.name], type$.String, type$.dynamic)));
      t1 = type.name;
      bitlenPart = B.JSString_methods.split$1(t1, A.RegExp_RegExp("[^0-9]+", true));
      if (1 >= bitlenPart.length)
        return A.ioore(bitlenPart, 1);
      return new A.Tuple(A.int_parse(bitlenPart[1], null), B.JSString_methods.startsWith$1(t1, "INT"), type$.Tuple_int_bool);
    },
    MoneroStorageSerializer__encodePrimitive(type, value) {
      var t1, t2, info, asBigInt, encodeStr, asDouble, byteData;
      if (value instanceof A.MoneroStorageBinary) {
        t1 = value.data;
        t2 = A.List_List$of(A.MoneroStorageSerializer_encodeVarintInt(t1.length), true, type$.int);
        B.JSArray_methods.addAll$1(t2, t1);
        return t2;
      }
      if (type.isInteger) {
        info = A.MoneroStorageSerializer_getNumericTypesBitLength(type);
        asBigInt = A.MoneroStorageFormatValidator_asA(value, type$.BigInt);
        t1 = info.item1;
        if (typeof t1 !== "number")
          return t1.$tdiv();
        return A.BigintUtils_toBytes(asBigInt, B.JSNumber_methods._tdivFast$1(t1, 8), B.C_Endian0);
      }
      switch (type) {
        case B.MoneroStorageTypes_STRING_10_true_false:
          encodeStr = A.StringUtils_encode(A.MoneroStorageFormatValidator_asA(value, type$.String), B.StringEncoding_1);
          t1 = A.List_List$of(A.MoneroStorageSerializer_encodeVarintInt(encodeStr.length), true, type$.int);
          B.JSArray_methods.addAll$1(t1, encodeStr);
          return t1;
        case B.MoneroStorageTypes_BOOL_11_true_false:
          if (A.MoneroStorageFormatValidator_asA(value, type$.bool))
            return A._setArrayType([1], type$.JSArray_int);
          return A._setArrayType([0], type$.JSArray_int);
        case B.MoneroStorageTypes_DOUBLE_9_true_false:
          asDouble = A.MoneroStorageFormatValidator_asA(value, type$.double);
          byteData = new DataView(new ArrayBuffer(8));
          B.NativeByteData_methods._setFloat64$3(byteData, 0, asDouble, true);
          return A.NativeUint8List_NativeUint8List$view(byteData.buffer, 0, null);
        default:
          throw A.wrapException(A.MoneroSerializationException$("Invalid promitive type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type.name, "value", J.toString$0$(value)], type$.String, type$.dynamic)));
      }
    },
    MoneroStorageSerializer_encodeList(childType, value) {
      var sections, _i,
        t1 = J.getInterceptor$asx(value),
        t2 = A.List_List$of(A.MoneroStorageSerializer_encodeVarintInt(t1.get$length(value)), true, type$.int);
      if (childType.isPrimitive)
        for (t1 = t1.get$iterator(value); t1.moveNext$0();)
          B.JSArray_methods.addAll$1(t2, A.MoneroStorageSerializer__encodePrimitive(childType, t1.get$current()));
      else {
        sections = A.List_List$from(value, true, type$.MoneroSection);
        for (t1 = sections.length, _i = 0; _i < t1; ++_i)
          B.JSArray_methods.addAll$1(t2, sections[_i].serialize$0());
      }
      if (childType === B.MoneroStorageTypes_Unknown_0_false_false)
        A.throwExpression(B.MoneroSerializationException_GEl);
      t1 = A._setArrayType([childType._types$_value | 128], type$.JSArray_int);
      B.JSArray_methods.addAll$1(t1, t2);
      return t1;
    },
    MoneroStorageSerializer_encodeVarintInt(val) {
      if (B.JSInt_methods.get$isNegative(val))
        throw A.wrapException(A.MoneroSerializationException$("Negative values are not allowed for varints.", A.LinkedHashMap_LinkedHashMap$_literal(["varint", B.JSInt_methods.toString$0(val)], type$.String, type$.dynamic)));
      if (val <= 63)
        return A._setArrayType([(val << 2 | 0) >>> 0], type$.JSArray_int);
      else if (val <= 16383)
        return A.IntUtils_toBytes((val << 2 | 1) >>> 0, B.C_Endian0, 2);
      else if (val <= 1073741823)
        return A.IntUtils_toBytes((val << 2 | 2) >>> 0, B.C_Endian0, 4);
      throw A.wrapException(A.MoneroSerializationException$("Varint is too large to be encoded as bytes. use `encodeVarintBigInt` instead `encodeVarintInt`", A.LinkedHashMap_LinkedHashMap$_literal(["varint", val], type$.String, type$.dynamic)));
    },
    RetionalConst_fromDecimalNumber(decimal) {
      switch (decimal) {
        case 8:
          return $.$get$RetionalConst_bigR8();
        case 18:
          return $.$get$RetionalConst_bigR18();
        case 6:
          return $.$get$RetionalConst_bigR6();
        default:
          return A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(decimal), null);
      }
    },
    StrUtils_to3Digits(number, separator) {
      var parts, t1, integerPart, fractionalPart, negative, groups, i, i0, result;
      if (B.JSString_methods.contains$1(number, ".")) {
        parts = number.split(".");
        t1 = parts.length;
        if (0 >= t1)
          return A.ioore(parts, 0);
        integerPart = parts[0];
        if (1 >= t1)
          return A.ioore(parts, 1);
        fractionalPart = parts[1];
      } else {
        integerPart = number;
        fractionalPart = "";
      }
      negative = B.JSString_methods.startsWith$1(integerPart, "-");
      if (negative)
        integerPart = B.JSString_methods.substring$1(integerPart, 1);
      groups = A._setArrayType([], type$.JSArray_String);
      i = integerPart.length;
      for (; i > 0; i = i0) {
        i0 = i - 3;
        B.JSArray_methods.insert$2(groups, 0, B.JSString_methods.substring$2(integerPart, A.IntUtils_max(0, i0), i));
      }
      t1 = B.JSArray_methods.join$1(groups, separator);
      result = t1 + (fractionalPart.length === 0 ? "" : "." + fractionalPart);
      if (negative)
        return "-" + result;
      return result;
    },
    WorkerCryptoUtils_generateNonce(seed) {
      var digest,
        t1 = type$.int,
        hasher = new A.SHAKE128(128, A.List_List$filled(25, 0, false, t1), A.List_List$filled(25, 0, false, t1), A.List_List$filled(200, 0, false, t1));
      hasher._Keccack$1(32);
      hasher.super$_Keccack$update(type$.List_int._as(seed));
      digest = A.List_List$unmodifiable(hasher.digest$1(12), t1);
      hasher.reset$0();
      return digest;
    },
    WorkerCryptoUtils_hashKey(checksum, key) {
      var t2,
        t1 = A.List_List$of(key, true, type$.dynamic);
      B.JSArray_methods.addAll$1(t1, checksum);
      t2 = type$.int;
      return A.List_List$unmodifiable(B.JSArray_methods.sublist$2(A.SHA3_hash(A.List_List$from(t1, true, t2)), 0, 32), t2);
    },
    WorkerCryptoUtils_decryptChacha(data, key, nonce) {
      var decrypt = A.ChaCha20Poly1305$(key).decrypt$2(nonce, data);
      if (decrypt != null)
        return A.List_List$unmodifiable(decrypt, type$.int);
      return decrypt;
    },
    TonUtils_generateTonPrivateKeyFromSeed(mnemonic, password, validateTonMnemonic) {
      var mn, seed, t1, t2, exception;
      try {
        mn = new A.Mnemonic(A.Mnemonic__normalize(mnemonic));
        t1 = mn;
        t2 = password == null ? "" : password;
        if (validateTonMnemonic)
          new A.TomMnemonicValidator().validate$2$password(t1, t2);
        seed = A.QuickCrypto_pbkdf2DeriveKey(null, 100000, A.QuickCrypto_hmacSha512Hash(A.StringUtils_encode(B.JSArray_methods.join$1(t1._mnemonicList, " "), B.StringEncoding_1), A.StringUtils_encode(t2, B.StringEncoding_1)), A.StringUtils_encode("TON default seed", B.StringEncoding_1));
        t1 = A.TonPrivateKey_TonPrivateKey$fromBytes(seed);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.WalletException_invalid_mnemonic_null);
      }
    },
    TonUtils_generateTonMnemonic(password, wordsNum) {
      var t1, t2, exception;
      try {
        t1 = new A.Bip39WordsListGetter().getByLanguage$1(B.C_TonMnemonicLanguages);
        t2 = password == null ? "" : password;
        t2 = B.JSArray_methods.join$1(new A.TonMnemonicGenerator(new A.TonMnemonicEncoder(t1)).fromWordsNumber$2$password(wordsNum, t2)._mnemonicList, " ");
        return t2;
      } catch (exception) {
        throw A.wrapException(B.WalletException_invalid_mnemonic_null);
      }
    },
    QuickCryptoValidator_asValidHexBytes(hex, lengthInBytes) {
      var t1, isHex;
      if (lengthInBytes == null) {
        t1 = $.$get$StringUtils__hexBytesRegex();
        if (t1._nativeRegExp.test(hex))
          return hex;
      } else {
        isHex = A.RegExp_RegExp(A.stringReplaceAllUnchecked("^(0x)?[0-9a-fA-F]{#}$", "#", "" + lengthInBytes * 2), true);
        if (isHex._nativeRegExp.test(hex))
          return hex;
      }
      throw A.wrapException(A.WalletException$("invalid_hex_bytes_string"));
    },
    current() {
      var exception, t1, path, lastIndex, uri = null;
      try {
        uri = A.Uri_base();
      } catch (exception) {
        if (type$.Exception._is(A.unwrapException(exception))) {
          t1 = $._current;
          if (t1 != null)
            return t1;
          throw exception;
        } else
          throw exception;
      }
      if (J.$eq$(uri, $._currentUriBase)) {
        t1 = $._current;
        t1.toString;
        return t1;
      }
      $._currentUriBase = uri;
      if ($.$get$Style_platform() === $.$get$Style_url())
        t1 = $._current = uri.resolve$1(".").toString$0(0);
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        t1 = $._current = lastIndex === 0 ? path : B.JSString_methods.substring$2(path, 0, lastIndex);
      }
      return t1;
    },
    isAlphabetic(char) {
      var t1;
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    driveLetterEnd(path, index) {
      var t2, t3, _null = null,
        t1 = path.length,
        index0 = index + 2;
      if (t1 < index0)
        return _null;
      if (!(index >= 0 && index < t1))
        return A.ioore(path, index);
      if (!A.isAlphabetic(path.charCodeAt(index)))
        return _null;
      t2 = index + 1;
      if (!(t2 < t1))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 58) {
        t3 = index + 4;
        if (t1 < t3)
          return _null;
        if (B.JSString_methods.substring$2(path, t2, t3).toLowerCase() !== "%3a")
          return _null;
        index = index0;
      }
      t2 = index + 2;
      if (t1 === t2)
        return t2;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 47)
        return _null;
      return index + 3;
    },
    isAllTheSame(iter) {
      var firstValue, t1, t2, value;
      if (iter.get$length(0) === 0)
        return true;
      firstValue = iter.get$first(0);
      for (t1 = A.SubListIterable$(iter, 1, null, iter.$ti._eval$1("ListIterable.E")), t2 = t1.$ti, t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"); t1.moveNext$0();) {
        value = t1.__internal$_current;
        if (!J.$eq$(value == null ? t2._as(value) : value, firstValue))
          return false;
      }
      return true;
    },
    replaceFirstNull(list, element, $E) {
      var index = B.JSArray_methods.indexOf$1(list, null);
      if (index < 0)
        throw A.wrapException(A.ArgumentError$(A.S(list) + " contains no null elements.", null));
      B.JSArray_methods.$indexSet(list, index, element);
    },
    replaceWithNull(list, element, $E) {
      var index = B.JSArray_methods.indexOf$1(list, element);
      if (index < 0)
        throw A.wrapException(A.ArgumentError$(A.S(list) + " contains no elements matching " + element.toString$0(0) + ".", null));
      B.JSArray_methods.$indexSet(list, index, null);
    },
    countCodeUnits(string, codeUnit) {
      var t1, t2, count, t3;
      for (t1 = new A.CodeUnits(string), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListBase.E>")), t2 = t2._eval$1("ListBase.E"), count = 0; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if ((t3 == null ? t2._as(t3) : t3) === codeUnit)
          ++count;
      }
      return count;
    },
    findLineStart(context, text, column) {
      var beginningOfLine, index, lineStart;
      if (text.length === 0)
        for (beginningOfLine = 0; true;) {
          index = B.JSString_methods.indexOf$2(context, "\n", beginningOfLine);
          if (index === -1)
            return context.length - beginningOfLine >= column ? beginningOfLine : null;
          if (index - beginningOfLine >= column)
            return beginningOfLine;
          beginningOfLine = index + 1;
        }
      index = B.JSString_methods.indexOf$1(context, text);
      for (; index !== -1;) {
        lineStart = index === 0 ? 0 : B.JSString_methods.lastIndexOf$2(context, "\n", index - 1) + 1;
        if (column === index - lineStart)
          return lineStart;
        index = B.JSString_methods.indexOf$2(context, text, index + 1);
      }
      return null;
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._instanceTypeFromConstructor(this));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    $or(receiver, other) {
      return other || receiver;
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.bool);
    },
    $isTrustedGetRuntimeType: 1,
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.Null);
    },
    $isTrustedGetRuntimeType: 1,
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {$isJSObject: 1};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return B.Type_JSObject_0ua;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JavaScriptBigInt.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JavaScriptSymbol.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JSArray.prototype = {
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A._arrayInstanceType(receiver)._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1(receiver, index) {
      var t1;
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeAt"));
      t1 = receiver.length;
      if (index >= t1)
        throw A.wrapException(A.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2(receiver, index, value) {
      var t1;
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("insert"));
      t1 = receiver.length;
      if (index > t1)
        throw A.wrapException(A.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2(receiver, index, iterable) {
      var insertionLength, end;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("insertAll"));
      A.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      if (!type$.EfficientLengthIterable_dynamic._is(iterable))
        iterable = J.toList$0$ax(iterable);
      insertionLength = J.get$length$asx(iterable);
      receiver.length = receiver.length + insertionLength;
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    setAll$2(receiver, index, iterable) {
      var t1, index0;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("setAll"));
      A.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0(); index = index0) {
        index0 = index + 1;
        this.$indexSet(receiver, index, t1.get$current());
      }
    },
    removeLast$0(receiver) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    _removeWhere$2(receiver, test, removeMatching) {
      var retained, end, i, element, t1;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      retained = [];
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (!A.boolConversionCheck(test.call$1(element)))
          retained.push(element);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      t1 = retained.length;
      if (t1 === end)
        return;
      this.set$length(receiver, t1);
      for (i = 0; i < retained.length; ++i)
        receiver[i] = retained[i];
    },
    where$1(receiver, f) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.WhereIterable(receiver, t1._eval$1("bool(1)")._as(f), t1._eval$1("WhereIterable<1>"));
    },
    addAll$1(receiver, collection) {
      var t1;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("addAll"));
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    clear$0(receiver) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("clear"));
      receiver.length = 0;
    },
    forEach$1(receiver, f) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("~(1)")._as(f);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1(receiver, f, $T) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    join$0(receiver) {
      return this.join$1(receiver, "");
    },
    take$1(receiver, n) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(n, "count", type$.int), A._arrayInstanceType(receiver)._precomputed1);
    },
    skip$1(receiver, n) {
      return A.SubListIterable$(receiver, n, null, A._arrayInstanceType(receiver)._precomputed1);
    },
    fold$1$2(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      A._arrayInstanceType(receiver)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    firstWhere$2$orElse(receiver, test, orElse) {
      var end, i, element,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()?")._as(orElse);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (A.boolConversionCheck(test.call$1(element)))
          return element;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A.IterableElementError_noElement());
    },
    firstWhere$1(receiver, test) {
      return this.firstWhere$2$orElse(receiver, test, null);
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, "start", null));
      if (end == null)
        end = receiver.length;
      else if (end < start || end > receiver.length)
        throw A.wrapException(A.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return A._setArrayType([], A._arrayInstanceType(receiver));
      return A._setArrayType(receiver.slice(start, end), A._arrayInstanceType(receiver));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    getRange$2(receiver, start, end) {
      A.RangeError_checkValidRange(start, end, receiver.length);
      return A.SubListIterable$(receiver, start, end, A._arrayInstanceType(receiver)._precomputed1);
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    removeRange$2(receiver, start, end) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("removeRange"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      receiver.splice(start, end - start);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, i;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("setRange"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    fillRange$3(receiver, start, end, fillValue) {
      var i;
      A._arrayInstanceType(receiver)._eval$1("1?")._as(fillValue);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("fill range"));
      A.RangeError_checkValidRange(start, end, receiver.length);
      for (i = start; i < end; ++i)
        receiver[i] = fillValue;
    },
    any$1(receiver, test) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (A.boolConversionCheck(test.call$1(receiver[i])))
          return true;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1(receiver, test) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (!A.boolConversionCheck(test.call$1(receiver[i])))
          return false;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    get$reversed(receiver) {
      return new A.ReversedListIterable(receiver, A._arrayInstanceType(receiver)._eval$1("ReversedListIterable<1>"));
    },
    sort$1(receiver, compare) {
      var len, a, b, undefineds, i,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("int(1,1)?")._as(compare);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("sort"));
      len = receiver.length;
      if (len < 2)
        return;
      if (compare == null)
        compare = J._interceptors_JSArray__compareAny$closure();
      if (len === 2) {
        a = receiver[0];
        b = receiver[1];
        t1 = compare.call$2(a, b);
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 0) {
          receiver[0] = b;
          receiver[1] = a;
        }
        return;
      }
      undefineds = 0;
      if (t1._precomputed1._is(null))
        for (i = 0; i < receiver.length; ++i)
          if (receiver[i] === void 0) {
            receiver[i] = null;
            ++undefineds;
          }
      receiver.sort(A.convertDartClosureToJS(compare, 2));
      if (undefineds > 0)
        this._replaceSomeNullsWithUndefined$1(receiver, undefineds);
    },
    sort$0(receiver) {
      return this.sort$1(receiver, null);
    },
    _replaceSomeNullsWithUndefined$1(receiver, count) {
      var i0,
        i = receiver.length;
      for (; i0 = i - 1, i > 0; i = i0)
        if (receiver[i0] === null) {
          receiver[i0] = void 0;
          --count;
          if (count === 0)
            break;
        }
    },
    indexOf$1(receiver, element) {
      var i,
        $length = receiver.length;
      if (0 >= $length)
        return -1;
      for (i = 0; i < $length; ++i) {
        if (!(i < receiver.length))
          return A.ioore(receiver, i);
        if (J.$eq$(receiver[i], element))
          return i;
      }
      return -1;
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable(receiver, growable) {
      var t1 = A._setArrayType(receiver.slice(0), A._arrayInstanceType(receiver));
      return t1;
    },
    toList$0(receiver) {
      return this.toList$1$growable(receiver, true);
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$length(receiver, newLength) {
      if (!!receiver.fixed$length)
        A.throwExpression(A.UnsupportedError$("set length"));
      if (newLength < 0)
        throw A.wrapException(A.RangeError$range(newLength, 0, null, "newLength", null));
      if (newLength > receiver.length)
        A._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        A.throwExpression(A.UnsupportedError$("indexed set"));
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    whereType$1$0(receiver, $T) {
      return new A.WhereTypeIterable(receiver, $T._eval$1("WhereTypeIterable<0>"));
    },
    $add(receiver, other) {
      var t1 = A._arrayInstanceType(receiver);
      t1._eval$1("List<1>")._as(other);
      t1 = A.List_List$of(receiver, true, t1._precomputed1);
      this.addAll$1(t1, other);
      return t1;
    },
    indexWhere$1(receiver, test) {
      var i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      if (0 >= receiver.length)
        return -1;
      for (i = 0; i < receiver.length; ++i)
        if (A.boolConversionCheck(test.call$1(receiver[i])))
          return i;
      return -1;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._arrayInstanceType(receiver));
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length) {
        t1 = A.throwConcurrentModificationError(t1);
        throw A.wrapException(t1);
      }
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      A._asNum(b);
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".round()"));
    },
    clamp$2(receiver, lowerLimit, upperLimit) {
      if (B.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
        throw A.wrapException(A.argumentErrorValue(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toRadixString$1(receiver, radix) {
      var result, t1, t2, match, exponent;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      t1 = result.length;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(result, t2);
      if (result.charCodeAt(t2) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        A.throwExpression(A.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return A.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return A.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + B.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + A.S(other)));
    },
    $shl(receiver, other) {
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr(receiver, other) {
      var t1;
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
      if (0 > other)
        throw A.wrapException(A.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.num);
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    toSigned$1(receiver, width) {
      var signMask = this.$shl(1, width - 1);
      return ((receiver & signMask - 1) >>> 0) - ((receiver & signMask) >>> 0);
    },
    get$bitLength(receiver) {
      var wordBits,
        t1 = receiver < 0 ? -receiver - 1 : receiver,
        nonneg = t1;
      for (wordBits = 32; nonneg >= 4294967296;) {
        nonneg = this._tdivFast$1(nonneg, 4294967296);
        wordBits += 32;
      }
      return wordBits - Math.clz32(nonneg);
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.int);
    },
    $isTrustedGetRuntimeType: 1,
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.double);
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JSString.prototype = {
    allMatches$2(receiver, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._StringAllMatchesIterable(string, receiver, start);
    },
    allMatches$1(receiver, string) {
      return this.allMatches$2(receiver, string, 0);
    },
    matchAsPrefix$2(receiver, string, start) {
      var t1, t2, i, t3, _null = null;
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, _null, _null));
      t1 = receiver.length;
      t2 = string.length;
      if (start + t1 > t2)
        return _null;
      for (i = 0; i < t1; ++i) {
        t3 = start + i;
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(string, t3);
        if (string.charCodeAt(t3) !== receiver.charCodeAt(i))
          return _null;
      }
      return new A.StringMatch(start, receiver);
    },
    $add(receiver, other) {
      return receiver + other;
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    split$1(receiver, pattern) {
      if (typeof pattern == "string")
        return A._setArrayType(receiver.split(pattern), type$.JSArray_String);
      else if (pattern instanceof A.JSSyntaxRegExp && pattern.get$_nativeAnchoredVersion().exec("").length - 2 === 0)
        return A._setArrayType(receiver.split(pattern._nativeRegExp), type$.JSArray_String);
      else
        return this._defaultSplit$1(receiver, pattern);
    },
    replaceRange$3(receiver, start, end, replacement) {
      var e = A.RangeError_checkValidRange(start, end, receiver.length);
      return A.stringReplaceRangeUnchecked(receiver, start, e, replacement);
    },
    _defaultSplit$1(receiver, pattern) {
      var t1, start, $length, match, matchStart, matchEnd,
        result = A._setArrayType([], type$.JSArray_String);
      for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), start = 0, $length = 1; t1.moveNext$0();) {
        match = t1.get$current();
        matchStart = match.get$start();
        matchEnd = match.get$end();
        $length = matchEnd - matchStart;
        if ($length === 0 && start === matchStart)
          continue;
        B.JSArray_methods.add$1(result, this.substring$2(receiver, start, matchStart));
        start = matchEnd;
      }
      if (start < receiver.length || $length > 0)
        B.JSArray_methods.add$1(result, this.substring$1(receiver, start));
      return result;
    },
    startsWith$2(receiver, pattern, index) {
      var endIndex;
      if (index < 0 || index > receiver.length)
        throw A.wrapException(A.RangeError$range(index, 0, receiver.length, null, null));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1(receiver, pattern) {
      return this.startsWith$2(receiver, pattern, 0);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1(receiver, start) {
      return this.substring$2(receiver, start, null);
    },
    trim$0(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (0 >= endIndex)
        return A.ioore(result, 0);
      if (result.charCodeAt(0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      if (!(t1 >= 0))
        return A.ioore(result, t1);
      endIndex0 = result.charCodeAt(t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    padRight$1(receiver, width) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return receiver + this.$mul(" ", delta);
    },
    indexOf$2(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1(receiver, pattern) {
      return this.indexOf$2(receiver, pattern, 0);
    },
    lastIndexOf$2(receiver, pattern, start) {
      var t1, t2;
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1(receiver, pattern) {
      return this.lastIndexOf$2(receiver, pattern, null);
    },
    contains$1(receiver, other) {
      return A.stringContainsUnchecked(receiver, other, 0);
    },
    compareTo$1(receiver, other) {
      var t1;
      A._asString(other);
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.String);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isTrustedGetRuntimeType: 1,
    $isComparable: 1,
    $isPattern: 1,
    $isString: 1
  };
  A._CastIterableBase.prototype = {
    get$iterator(_) {
      return new A.CastIterator(J.get$iterator$ax(this.get$_source()), A._instanceType(this)._eval$1("CastIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    take$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.take$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    elementAt$1(_, index) {
      return A._instanceType(this)._rest[1]._as(J.elementAt$1$ax(this.get$_source(), index));
    },
    get$first(_) {
      return A._instanceType(this)._rest[1]._as(J.get$first$ax(this.get$_source()));
    },
    contains$1(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    toString$0(_) {
      return J.toString$0$(this.get$_source());
    }
  };
  A.CastIterator.prototype = {
    moveNext$0() {
      return this._source.moveNext$0();
    },
    get$current() {
      return this.$ti._rest[1]._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.CastIterable.prototype = {
    get$_source() {
      return this._source;
    }
  };
  A._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1};
  A._CastListBase.prototype = {
    $index(_, index) {
      return this.$ti._rest[1]._as(J.$index$asx(this._source, A._asInt(index)));
    },
    $indexSet(_, index, value) {
      var t1 = this.$ti;
      J.$indexSet$ax(this._source, index, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    set$length(_, $length) {
      J.set$length$asx(this._source, $length);
    },
    add$1(_, value) {
      var t1 = this.$ti;
      J.add$1$ax(this._source, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    sort$1(_, compare) {
      var t1;
      this.$ti._eval$1("int(2,2)?")._as(compare);
      t1 = compare == null ? null : new A._CastListBase_sort_closure(this, compare);
      J.sort$1$ax(this._source, t1);
    },
    getRange$2(_, start, end) {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(J.getRange$2$ax(this._source, start, end), t1._precomputed1, t1._rest[1]);
    },
    $isEfficientLengthIterable: 1,
    $isList: 1
  };
  A._CastListBase_sort_closure.prototype = {
    call$2(v1, v2) {
      var t1 = this.$this.$ti,
        t2 = t1._precomputed1;
      t2._as(v1);
      t2._as(v2);
      t1 = t1._rest[1];
      return this.compare.call$2(t1._as(v1), t1._as(v2));
    },
    $signature() {
      return this.$this.$ti._eval$1("int(1,1)");
    }
  };
  A.CastList.prototype = {
    cast$1$0(_, $R) {
      return new A.CastList(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    get$_source() {
      return this._source;
    }
  };
  A.CastMap.prototype = {
    cast$2$0(_, RK, RV) {
      return new A.CastMap(this._source, this.$ti._eval$1("@<1,2>")._bind$1(RK)._bind$1(RV)._eval$1("CastMap<1,2,3,4>"));
    },
    containsKey$1(key) {
      return this._source.containsKey$1(key);
    },
    $index(_, key) {
      return this.$ti._eval$1("4?")._as(this._source.$index(0, key));
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      t1._rest[2]._as(key);
      t1._rest[3]._as(value);
      this._source.$indexSet(0, t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    forEach$1(_, f) {
      this._source.forEach$1(0, new A.CastMap_forEach_closure(this, this.$ti._eval$1("~(3,4)")._as(f)));
    },
    get$keys() {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(this._source.get$keys(), t1._precomputed1, t1._rest[2]);
    },
    get$values() {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(this._source.get$values(), t1._rest[1], t1._rest[3]);
    },
    get$length(_) {
      var t1 = this._source;
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this._source;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._source;
      return t1.get$isNotEmpty(t1);
    },
    get$entries() {
      return this._source.get$entries().map$1$1(0, new A.CastMap_entries_closure(this), this.$ti._eval$1("MapEntry<3,4>"));
    }
  };
  A.CastMap_forEach_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      this.f.call$2(t1._rest[2]._as(key), t1._rest[3]._as(value));
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1,2)");
    }
  };
  A.CastMap_entries_closure.prototype = {
    call$1(e) {
      var t1 = this.$this.$ti;
      t1._eval$1("MapEntry<1,2>")._as(e);
      return new A.MapEntry(t1._rest[2]._as(e.key), t1._rest[3]._as(e.value), t1._eval$1("MapEntry<3,4>"));
    },
    $signature() {
      return this.$this.$ti._eval$1("MapEntry<3,4>(MapEntry<1,2>)");
    }
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this.__internal$_message;
    }
  };
  A.CodeUnits.prototype = {
    get$length(_) {
      return this.__internal$_string.length;
    },
    $index(_, i) {
      var t1;
      A._asInt(i);
      t1 = this.__internal$_string;
      if (!(i >= 0 && i < t1.length))
        return A.ioore(t1, i);
      return t1.charCodeAt(i);
    }
  };
  A.nullFuture_closure.prototype = {
    call$0() {
      return A.Future_Future$value(null, type$.Null);
    },
    $signature: 124
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), A._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$first(_) {
      if (this.get$length(this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    contains$1(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = A.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    join$0(_) {
      return this.join$1(0, "");
    },
    where$1(_, test) {
      return this.super$Iterable$where(0, A._instanceType(this)._eval$1("bool(ListIterable.E)")._as(test));
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return new A.MappedListIterable(this, t1._bind$1($T)._eval$1("1(ListIterable.E)")._as(toElement), t1._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    reduce$1(_, combine) {
      var $length, value, i, _this = this;
      A._instanceType(_this)._eval$1("ListIterable.E(ListIterable.E,ListIterable.E)")._as(combine);
      $length = _this.get$length(_this);
      if ($length === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      value = _this.elementAt$1(0, 0);
      for (i = 1; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return value;
    },
    skip$1(_, count) {
      return A.SubListIterable$(this, count, null, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    take$1(_, count) {
      return A.SubListIterable$(this, 0, A.checkNotNullable(count, "count", type$.int), A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, true, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    toSet$0(_) {
      var i, _this = this,
        result = A.LinkedHashSet_LinkedHashSet(A._instanceType(_this)._eval$1("ListIterable.E"));
      for (i = 0; i < _this.get$length(_this); ++i)
        result.add$1(0, _this.elementAt$1(0, i));
      return result;
    }
  };
  A.SubListIterable.prototype = {
    SubListIterable$3(_iterable, _start, _endOrLength, $E) {
      var endOrLength,
        t1 = this._start;
      A.RangeError_checkNotNegative(t1, "start");
      endOrLength = this._endOrLength;
      if (endOrLength != null) {
        A.RangeError_checkNotNegative(endOrLength, "end");
        if (t1 > endOrLength)
          throw A.wrapException(A.RangeError$range(t1, 0, endOrLength, "start", null));
      }
    },
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw A.wrapException(A.IndexError$withLength(index, _this.get$length(0), _this, null, "index"));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
      var newStart, endOrLength, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      newStart = _this._start + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new A.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return A.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    take$1(_, count) {
      var endOrLength, t1, newEnd, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      endOrLength = _this._endOrLength;
      t1 = _this._start;
      newEnd = t1 + count;
      if (endOrLength == null)
        return A.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      else {
        if (endOrLength < newEnd)
          return _this;
        return A.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      }
    },
    toList$1$growable(_, growable) {
      var $length, result, i, _this = this,
        start = _this._start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = _this.$ti._precomputed1;
        return growable ? J.JSArray_JSArray$growable(0, t1) : J.JSArray_JSArray$fixed(0, t1);
      }
      result = A.List_List$filled($length, t2.elementAt$1(t1, start), growable, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        B.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      return new A.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, A._instanceType(this)._eval$1("MappedIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    }
  };
  A.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return new A.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    },
    map$1$1(_, toElement, $T) {
      var t1 = this.$ti;
      return new A.MappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(toElement), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (A.boolConversionCheck(t2.call$1(t1.get$current())))
          return true;
      return false;
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.ExpandIterable.prototype = {
    get$iterator(_) {
      return new A.ExpandIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, B.C_EmptyIterator, this.$ti._eval$1("ExpandIterator<1,2>"));
    }
  };
  A.ExpandIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, _this = this;
      if (_this._currentExpansion == null)
        return false;
      for (t1 = _this._iterator, t2 = _this._f; !_this._currentExpansion.moveNext$0();) {
        _this.set$__internal$_current(null);
        if (t1.moveNext$0()) {
          _this.set$_currentExpansion(null);
          _this.set$_currentExpansion(J.get$iterator$ax(t2.call$1(t1.get$current())));
        } else
          return false;
      }
      _this.set$__internal$_current(_this._currentExpansion.get$current());
      return true;
    },
    set$_currentExpansion(_currentExpansion) {
      this._currentExpansion = this.$ti._eval$1("Iterator<2>?")._as(_currentExpansion);
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A.TakeIterable.prototype = {
    get$iterator(_) {
      return new A.TakeIterator(J.get$iterator$ax(this.__internal$_iterable), this._takeCount, A._instanceType(this)._eval$1("TakeIterator<1>"));
    }
  };
  A.EfficientLengthTakeIterable.prototype = {
    get$length(_) {
      var iterableLength = J.get$length$asx(this.__internal$_iterable),
        t1 = this._takeCount;
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  A.TakeIterator.prototype = {
    moveNext$0() {
      if (--this._remaining >= 0)
        return this._iterator.moveNext$0();
      this._remaining = -1;
      return false;
    },
    get$current() {
      if (this._remaining < 0) {
        this.$ti._precomputed1._as(null);
        return null;
      }
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.SkipIterable.prototype = {
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.SkipIterable(this.__internal$_iterable, this._skipCount + count, A._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator(_) {
      return new A.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, A._instanceType(this)._eval$1("SkipIterator<1>"));
    }
  };
  A.EfficientLengthSkipIterable.prototype = {
    get$length(_) {
      var $length = J.get$length$asx(this.__internal$_iterable) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  A.SkipIterator.prototype = {
    moveNext$0() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.EmptyIterable.prototype = {
    get$iterator(_) {
      return B.C_EmptyIterator;
    },
    get$isEmpty(_) {
      return true;
    },
    get$length(_) {
      return 0;
    },
    get$first(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    elementAt$1(_, index) {
      throw A.wrapException(A.RangeError$range(index, 0, 0, "index", null));
    },
    contains$1(_, element) {
      return false;
    },
    join$1(_, separator) {
      return "";
    },
    map$1$1(_, toElement, $T) {
      this.$ti._bind$1($T)._eval$1("1(2)")._as(toElement);
      return new A.EmptyIterable($T._eval$1("EmptyIterable<0>"));
    },
    skip$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    },
    take$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    },
    toList$1$growable(_, growable) {
      var t1 = this.$ti._precomputed1;
      return growable ? J.JSArray_JSArray$growable(0, t1) : J.JSArray_JSArray$fixed(0, t1);
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    }
  };
  A.EmptyIterator.prototype = {
    moveNext$0() {
      return false;
    },
    get$current() {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  A.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return new A.WhereTypeIterator(J.get$iterator$ax(this._source), this.$ti._eval$1("WhereTypeIterator<1>"));
    }
  };
  A.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0();)
        if (t2._is(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this.$ti._precomputed1._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.FixedLengthListMixin.prototype = {
    set$length(receiver, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1(receiver, value) {
      A.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  };
  A.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length(_, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1(_, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    sort$1(_, compare) {
      A._instanceType(this)._eval$1("int(UnmodifiableListMixin.E,UnmodifiableListMixin.E)?")._as(compare);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    }
  };
  A.UnmodifiableListBase.prototype = {};
  A._ListIndicesIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._backedList);
    },
    elementAt$1(_, index) {
      var t1 = J.get$length$asx(this._backedList);
      if (0 > index || index >= t1)
        A.throwExpression(A.IndexError$withLength(index, t1, this, null, "index"));
      return index;
    }
  };
  A.ListMapView.prototype = {
    $index(_, key) {
      return this.containsKey$1(key) ? J.$index$asx(this._values, A._asInt(key)) : null;
    },
    get$length(_) {
      return J.get$length$asx(this._values);
    },
    get$values() {
      return A.SubListIterable$(this._values, 0, null, this.$ti._precomputed1);
    },
    get$keys() {
      return new A._ListIndicesIterable(this._values);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this._values);
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this._values);
    },
    containsKey$1(key) {
      return A._isInt(key) && key >= 0 && key < J.get$length$asx(this._values);
    },
    forEach$1(_, f) {
      var t1, t2, $length, i;
      this.$ti._eval$1("~(int,1)")._as(f);
      t1 = this._values;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      for (i = 0; i < $length; ++i) {
        f.call$2(i, t2.$index(t1, i));
        if ($length !== t2.get$length(t1))
          throw A.wrapException(A.ConcurrentModificationError$(t1));
      }
    }
  };
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  A.Symbol.prototype = {};
  A.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  A._Record_2.prototype = {$recipe: "+(1,2)", $shape: 1};
  A.ConstantMapView.prototype = {};
  A.ConstantMap.prototype = {
    cast$2$0(_, RK, RV) {
      var t1 = A._instanceType(this);
      return A.Map_castFrom(this, t1._precomputed1, t1._rest[1], RK, RV);
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      A.ConstantMap__throwUnmodifiable();
    },
    get$entries() {
      return new A._SyncStarIterable(this.entries$body$ConstantMap(), A._instanceType(this)._eval$1("_SyncStarIterable<MapEntry<1,2>>"));
    },
    entries$body$ConstantMap() {
      var $async$self = this;
      return function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, t3, key, t4;
        return function $async$get$entries($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.get$keys(), t1 = t1.get$iterator(t1), t2 = A._instanceType($async$self), t3 = t2._rest[1], t2 = t2._eval$1("MapEntry<1,2>");
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                key = t1.get$current();
                t4 = $async$self.$index(0, key);
                $async$goto = 4;
                return $async$iterator._async$_current = new A.MapEntry(key, t4 == null ? t3._as(t4) : t4, t2), 1;
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$currentError, 3;
            }
        };
      };
    },
    $isMap: 1
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this.__js_helper$_values.length;
    },
    get$__js_helper$_keys() {
      var keys = this.$keys;
      if (keys == null) {
        keys = Object.keys(this._jsIndex);
        this.$keys = keys;
      }
      return keys;
    },
    containsKey$1(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsIndex.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(key))
        return null;
      return this.__js_helper$_values[this._jsIndex[key]];
    },
    forEach$1(_, f) {
      var keys, values, t1, i;
      this.$ti._eval$1("~(1,2)")._as(f);
      keys = this.get$__js_helper$_keys();
      values = this.__js_helper$_values;
      for (t1 = keys.length, i = 0; i < t1; ++i)
        f.call$2(keys[i], values[i]);
    },
    get$keys() {
      return new A._KeysOrValues(this.get$__js_helper$_keys(), this.$ti._eval$1("_KeysOrValues<1>"));
    },
    get$values() {
      return new A._KeysOrValues(this.__js_helper$_values, this.$ti._eval$1("_KeysOrValues<2>"));
    }
  };
  A._KeysOrValues.prototype = {
    get$length(_) {
      return this._elements.length;
    },
    get$isEmpty(_) {
      return 0 === this._elements.length;
    },
    get$isNotEmpty(_) {
      return 0 !== this._elements.length;
    },
    get$iterator(_) {
      var t1 = this._elements;
      return new A._KeysOrValuesOrElementsIterator(t1, t1.length, this.$ti._eval$1("_KeysOrValuesOrElementsIterator<1>"));
    }
  };
  A._KeysOrValuesOrElementsIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        t1 = _this.__js_helper$_index;
      if (t1 >= _this.__js_helper$_length) {
        _this.set$__js_helper$_current(null);
        return false;
      }
      _this.set$__js_helper$_current(_this._elements[t1]);
      ++_this.__js_helper$_index;
      return true;
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.GeneralConstantMap.prototype = {
    _getMap$0() {
      var _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        backingMap = new A.JsConstantLinkedHashMap(_this.$ti._eval$1("JsConstantLinkedHashMap<1,2>"));
        A.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    containsKey$1(key) {
      return this._getMap$0().containsKey$1(key);
    },
    $index(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1(_, f) {
      this.$ti._eval$1("~(1,2)")._as(f);
      this._getMap$0().forEach$1(0, f);
    },
    get$keys() {
      var t1 = this._getMap$0();
      return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values() {
      return this._getMap$0().get$values();
    },
    get$length(_) {
      return this._getMap$0().__js_helper$_length;
    }
  };
  A.Instantiation.prototype = {
    Instantiation$1(_genericClosure) {
      if (false)
        A.instantiatedGenericFunctionType(0, 0);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Instantiation1 && this._genericClosure.$eq(0, other._genericClosure) && A.getRuntimeTypeOfClosure(this) === A.getRuntimeTypeOfClosure(other);
    },
    get$hashCode(_) {
      return A.Object_hash(this._genericClosure, A.getRuntimeTypeOfClosure(this), B.C_SentinelValue, B.C_SentinelValue);
    },
    toString$0(_) {
      var t1 = B.JSArray_methods.join$1([A.createRuntimeType(this.$ti._precomputed1)], ", ");
      return this._genericClosure.toString$0(0) + " with " + ("<" + t1 + ">");
    }
  };
  A.Instantiation1.prototype = {
    call$0() {
      return this._genericClosure.call$1$0(this.$ti._rest[0]);
    },
    call$2(a0, a1) {
      return this._genericClosure.call$1$2(a0, a1, this.$ti._rest[0]);
    },
    $signature() {
      return A.instantiatedGenericFunctionType(A.closureFunctionType(this._genericClosure), this.$ti);
    }
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      return "Null check operator used on a null value";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    },
    $isException: 1
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    get$runtimeType(_) {
      var rti = A.closureFunctionType(this);
      return A.createRuntimeType(rti == null ? A.instanceType(this) : rti);
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A._CyclicInitializationError.prototype = {
    toString$0(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A._AssertionError.prototype = {
    toString$0(_) {
      return "Assertion failed: " + A.Error_safeToString(this.message);
    }
  };
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_length === 0;
    },
    get$isNotEmpty(_) {
      return this.__js_helper$_length !== 0;
    },
    get$keys() {
      return new A.LinkedHashMapKeyIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values() {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(new A.LinkedHashMapKeyIterable(this, t1._eval$1("LinkedHashMapKeyIterable<1>")), new A.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<1,2>")._as(other).forEach$1(0, new A.JsLinkedHashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$2(key, value)];
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string")
        return _this._removeHashTableEntry$2(_this._strings, key);
      else if (typeof key == "number" && (key & 0x3fffffff) === key)
        return _this._removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        delete rest[hash];
      return cell.hashMapCellValue;
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3(table, key, value) {
      var cell,
        t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = table[key];
      if (cell == null)
        return null;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.hashMapCellValue;
    },
    _modified$0() {
      this._modifications = this._modifications + 1 & 1073741823;
    },
    _newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this.__js_helper$_length;
      _this._modified$0();
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    $isLinkedHashMap: 1
  };
  A.JsLinkedHashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1 = t1.$index(0, t2._precomputed1._as(each));
      return t1 == null ? t2._rest[1]._as(t1) : t1;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  A.JsLinkedHashMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this._map,
        t2 = new A.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2._cell = t1._first;
      return t2;
    },
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this._cell = cell._next;
        return true;
      }
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.JsIdentityLinkedHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return A.objectHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i].hashMapCellKey;
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A.JsConstantLinkedHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return A.constantHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    }
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 24
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 242
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 79
  };
  A._Record.prototype = {
    get$runtimeType(_) {
      return A.createRuntimeType(this._getRti$0());
    },
    _getRti$0() {
      return A.evaluateRtiForRecord(this.$recipe, this._getFieldValues$0());
    },
    toString$0(_) {
      return this._toString$1(false);
    },
    _toString$1(safe) {
      var t2, separator, i, key, value,
        keys = this._fieldKeys$0(),
        values = this._getFieldValues$0(),
        t1 = (safe ? "" + "Record " : "") + "(";
      for (t2 = keys.length, separator = "", i = 0; i < t2; ++i, separator = ", ") {
        t1 += separator;
        key = keys[i];
        if (typeof key == "string")
          t1 = t1 + key + ": ";
        if (!(i < values.length))
          return A.ioore(values, i);
        value = values[i];
        t1 = safe ? t1 + A.Primitives_safeToString(value) : t1 + A.S(value);
      }
      t1 += ")";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _fieldKeys$0() {
      var t1,
        shapeTag = this.$shape;
      for (; $._Record__computedFieldKeys.length <= shapeTag;)
        B.JSArray_methods.add$1($._Record__computedFieldKeys, null);
      t1 = $._Record__computedFieldKeys[shapeTag];
      if (t1 == null) {
        t1 = this._computeFieldKeys$0();
        B.JSArray_methods.$indexSet($._Record__computedFieldKeys, shapeTag, t1);
      }
      return t1;
    },
    _computeFieldKeys$0() {
      var i, names, last,
        recipe = this.$recipe,
        position = recipe.indexOf("("),
        joinedNames = recipe.substring(1, position),
        fields = recipe.substring(position),
        arity = fields === "()" ? 0 : fields.replace(/[^,]/g, "").length + 1,
        t1 = type$.Object,
        result = J.JSArray_JSArray$allocateGrowable(arity, t1);
      for (i = 0; i < arity; ++i)
        result[i] = i;
      if (joinedNames !== "") {
        names = joinedNames.split(",");
        i = names.length;
        for (last = arity; i > 0;) {
          --last;
          --i;
          B.JSArray_methods.$indexSet(result, last, names[i]);
        }
      }
      return A.List_List$unmodifiable(result, t1);
    }
  };
  A._Record2.prototype = {
    _getFieldValues$0() {
      return [this._0, this._1];
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._Record2 && this.$shape === other.$shape && J.$eq$(this._0, other._0) && J.$eq$(this._1, other._1);
    },
    get$hashCode(_) {
      return A.Object_hash(this.$shape, this._0, this._1, B.C_SentinelValue);
    }
  };
  A.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    get$_nativeAnchoredVersion() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeAnchoredRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern + "|()", t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    firstMatch$1(string) {
      var m = this._nativeRegExp.exec(string);
      if (m == null)
        return null;
      return new A._MatchImplementation(m);
    },
    allMatches$2(_, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._AllMatchesIterable(this, string, start);
    },
    allMatches$1(_, string) {
      return this.allMatches$2(0, string, 0);
    },
    _execGlobal$2(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new A._MatchImplementation(match);
    },
    _execAnchored$2(string, start) {
      var match,
        regexp = this.get$_nativeAnchoredVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      if (0 >= match.length)
        return A.ioore(match, -1);
      if (match.pop() != null)
        return null;
      return new A._MatchImplementation(match);
    },
    matchAsPrefix$2(_, string, start) {
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  A._MatchImplementation.prototype = {
    get$start() {
      return this._match.index;
    },
    get$end() {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    $index(_, index) {
      var t1;
      A._asInt(index);
      t1 = this._match;
      if (!(index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  A._AllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._AllMatchesIterator(this._re, this._string, this.__js_helper$_start);
    }
  };
  A._AllMatchesIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? type$.RegExpMatch._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, t3, match, nextIndex, t4, _this = this,
        string = _this._string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end();
          if (match._match.index === nextIndex) {
            t1 = false;
            if (t3._nativeRegExp.unicode) {
              t3 = _this._nextIndex;
              t4 = t3 + 1;
              if (t4 < t2) {
                if (!(t3 >= 0 && t3 < t2))
                  return A.ioore(string, t3);
                t3 = string.charCodeAt(t3);
                if (t3 >= 55296 && t3 <= 56319) {
                  if (!(t4 >= 0))
                    return A.ioore(string, t4);
                  t1 = string.charCodeAt(t4);
                  t1 = t1 >= 56320 && t1 <= 57343;
                }
              }
            }
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1
  };
  A.StringMatch.prototype = {
    get$end() {
      return this.start + this.pattern.length;
    },
    $index(_, g) {
      A._asInt(g);
      if (g !== 0)
        A.throwExpression(A.RangeError$value(g, null));
      return this.pattern;
    },
    $isMatch: 1,
    get$start() {
      return this.start;
    }
  };
  A._StringAllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first(_) {
      var t1 = this._pattern,
        index = this._input.indexOf(t1, this.__js_helper$_index);
      if (index >= 0)
        return new A.StringMatch(index, t1);
      throw A.wrapException(A.IterableElementError_noElement());
    }
  };
  A._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new A.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    $isIterator: 1
  };
  A._Cell.prototype = {
    _readField$0() {
      var t1 = this._value;
      if (t1 === this)
        throw A.wrapException(A.LateError$fieldNI(this._name));
      return t1;
    }
  };
  A._InitializedCell.prototype = {};
  A.NativeByteBuffer.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteBuffer_EOZ;
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeByteBuffer: 1
  };
  A.NativeTypedData.prototype = {
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = A.RangeError$range(position, 0, $length, $name, null);
      throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isTypedData: 1
  };
  A.NativeByteData.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteData_mF8;
    },
    _getFloat32$2(receiver, byteOffset, littleEndian) {
      return receiver.getFloat32(byteOffset, littleEndian);
    },
    _getFloat64$2(receiver, byteOffset, littleEndian) {
      return receiver.getFloat64(byteOffset, littleEndian);
    },
    _getInt16$2(receiver, byteOffset, littleEndian) {
      return receiver.getInt16(byteOffset, littleEndian);
    },
    _getUint32$2(receiver, byteOffset, littleEndian) {
      return receiver.getUint32(byteOffset, littleEndian);
    },
    _setFloat32$3(receiver, byteOffset, value, littleEndian) {
      return receiver.setFloat32(byteOffset, value, littleEndian);
    },
    _setFloat64$3(receiver, byteOffset, value, littleEndian) {
      return receiver.setFloat64(byteOffset, value, littleEndian);
    },
    _setUint32$3(receiver, byteOffset, value, littleEndian) {
      return receiver.setUint32(byteOffset, value, littleEndian);
    },
    $isTrustedGetRuntimeType: 1,
    $isByteData: 1
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    _setRangeFast$4(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw A.wrapException(A.RangeError$range(start, 0, end, null, null));
      count = end - start;
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw A.wrapException(A.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._asDouble(value);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._asInt(value);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      type$.Iterable_int._as(iterable);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListBase$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeFloat32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float32List_Ymk;
    },
    sublist$2(receiver, start, end) {
      return new Float32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeFloat64List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float64List_Ymk;
    },
    sublist$2(receiver, start, end) {
      return new Float64Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeInt16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int16List_cot;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeInt32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int32List_m1p;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeInt8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int8List_woc;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeUint16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint16List_2mh;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isUint16List: 1
  };
  A.NativeUint32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint32List_2mh;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isUint32List: 1
  };
  A.NativeUint8ClampedList.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8ClampedList_9Bb;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8ClampedArray(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeUint8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8List_CSc;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    }
  };
  A._Error.prototype = {
    toString$0(_) {
      return this._message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 42
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 238
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 16
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 16
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    },
    cancel$0() {
      if (self.setTimeout != null) {
        var t1 = this._handle;
        if (t1 == null)
          return;
        self.clearTimeout(t1);
        this._handle = null;
      } else
        throw A.wrapException(A.UnsupportedError$("Canceling a timer."));
    },
    $isTimer: 1
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      this.$this._handle = null;
      this.callback.call$0();
    },
    $signature: 0
  };
  A._AsyncAwaitCompleter.prototype = {
    complete$1(value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        value = t1._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(value);
      }
    },
    completeError$2(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    },
    $isCompleter: 1
  };
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 99
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 244
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(A._asInt(errorCode), result);
    },
    $signature: 144
  };
  A._SyncStarIterator.prototype = {
    get$current() {
      var t1 = this._async$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    _resumeBody$2(errorCode, errorValue) {
      var body, t1, exception;
      errorCode = A._asInt(errorCode);
      errorValue = errorValue;
      body = this._body;
      for (; true;)
        try {
          t1 = body(this, errorCode, errorValue);
          return t1;
        } catch (exception) {
          errorValue = exception;
          errorCode = 1;
        }
    },
    moveNext$0() {
      var nestedIterator, exception, value, suspendedBodies, _this = this, _null = null, errorValue = null, errorCode = 0;
      for (; true;) {
        nestedIterator = _this._nestedIterator;
        if (nestedIterator != null)
          try {
            if (nestedIterator.moveNext$0()) {
              _this.set$_async$_current(nestedIterator.get$current());
              return true;
            } else
              _this.set$_nestedIterator(_null);
          } catch (exception) {
            errorValue = exception;
            errorCode = 1;
            _this.set$_nestedIterator(_null);
          }
        value = _this._resumeBody$2(errorCode, errorValue);
        if (1 === value)
          return true;
        if (0 === value) {
          _this.set$_async$_current(_null);
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this._body = A._SyncStarIterator__terminatedBody;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._body = suspendedBodies.pop();
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (2 === value) {
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (3 === value) {
          errorValue = _this._datum;
          _this._datum = null;
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this.set$_async$_current(_null);
            _this._body = A._SyncStarIterator__terminatedBody;
            throw errorValue;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._body = suspendedBodies.pop();
          errorCode = 1;
          continue;
        }
        throw A.wrapException(A.StateError$("sync*"));
      }
      return false;
    },
    _yieldStar$1(iterable) {
      var t1, t2, _this = this;
      if (iterable instanceof A._SyncStarIterable) {
        t1 = iterable._outerHelper();
        t2 = _this._suspendedBodies;
        if (t2 == null)
          t2 = _this._suspendedBodies = [];
        B.JSArray_methods.add$1(t2, _this._body);
        _this._body = t1;
        return 2;
      } else {
        _this.set$_nestedIterator(J.get$iterator$ax(iterable));
        return 2;
      }
    },
    set$_async$_current(_current) {
      this._async$_current = this.$ti._eval$1("1?")._as(_current);
    },
    set$_nestedIterator(_nestedIterator) {
      this._nestedIterator = this.$ti._eval$1("Iterator<1>?")._as(_nestedIterator);
    },
    $isIterator: 1
  };
  A._SyncStarIterable.prototype = {
    get$iterator(_) {
      return new A._SyncStarIterator(this._outerHelper(), this.$ti._eval$1("_SyncStarIterator<1>"));
    }
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A._BroadcastSubscription.prototype = {
    _onPause$0() {
    },
    _onResume$0() {
    },
    set$_async$_next(_next) {
      this._async$_next = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_next);
    },
    set$_async$_previous(_previous) {
      this._async$_previous = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_previous);
    }
  };
  A._BroadcastStreamController.prototype = {
    get$isPaused() {
      return false;
    },
    get$_mayAddEvent() {
      return this._async$_state < 4;
    },
    _removeListener$1(subscription) {
      var previous, next;
      A._instanceType(this)._eval$1("_BroadcastSubscription<1>")._as(subscription);
      previous = subscription._async$_previous;
      next = subscription._async$_next;
      if (previous == null)
        this.set$_firstSubscription(next);
      else
        previous.set$_async$_next(next);
      if (next == null)
        this.set$_lastSubscription(previous);
      else
        next.set$_async$_previous(previous);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var t2, t3, t4, t5, t6, t7, subscription, oldLast, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._async$_state & 4) !== 0)
        return A._DoneStreamSubscription$(onDone, t1._precomputed1);
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t4 = onError != null ? 32 : 0;
      t5 = A._BufferingStreamSubscription__registerDataHandler(t2, onData, t1._precomputed1);
      t6 = A._BufferingStreamSubscription__registerErrorHandler(t2, onError);
      t7 = onDone == null ? A.async___nullDoneHandler$closure() : onDone;
      t1 = t1._eval$1("_BroadcastSubscription<1>");
      subscription = new A._BroadcastSubscription(_this, t5, t6, type$.void_Function._as(t7), t2, t3 | t4, t1);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
      t1._as(subscription);
      subscription._eventState = _this._async$_state & 1;
      oldLast = _this._lastSubscription;
      _this.set$_lastSubscription(subscription);
      subscription.set$_async$_next(null);
      subscription.set$_async$_previous(oldLast);
      if (oldLast == null)
        _this.set$_firstSubscription(subscription);
      else
        oldLast.set$_async$_next(subscription);
      if (_this._firstSubscription == _this._lastSubscription)
        A._runGuarded(_this.onListen);
      return subscription;
    },
    _recordCancel$1(sub) {
      var _this = this,
        t1 = A._instanceType(_this);
      sub = t1._eval$1("_BroadcastSubscription<1>")._as(t1._eval$1("StreamSubscription<1>")._as(sub));
      if (sub._async$_next === sub)
        return null;
      t1 = sub._eventState;
      if ((t1 & 2) !== 0)
        sub._eventState = t1 | 4;
      else {
        _this._removeListener$1(sub);
        if ((_this._async$_state & 2) === 0 && _this._firstSubscription == null)
          _this._callOnCancel$0();
      }
      return null;
    },
    _recordPause$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _recordResume$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _addEventError$0() {
      if ((this._async$_state & 4) !== 0)
        return new A.StateError("Cannot add new events after calling close");
      return new A.StateError("Cannot add new events while doing an addStream");
    },
    add$1(_, data) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(data);
      if (!_this.get$_mayAddEvent())
        throw A.wrapException(_this._addEventError$0());
      _this._sendData$1(data);
    },
    addError$2(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      if (!this.get$_mayAddEvent())
        throw A.wrapException(this._addEventError$0());
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      this._sendError$2(error, stackTrace);
    },
    close$0() {
      var t1, doneFuture, _this = this;
      if ((_this._async$_state & 4) !== 0) {
        t1 = _this._doneFuture;
        t1.toString;
        return t1;
      }
      if (!_this.get$_mayAddEvent())
        throw A.wrapException(_this._addEventError$0());
      _this._async$_state |= 4;
      doneFuture = _this._doneFuture;
      if (doneFuture == null)
        doneFuture = _this._doneFuture = new A._Future($.Zone__current, type$._Future_void);
      _this._sendDone$0();
      return doneFuture;
    },
    _callOnCancel$0() {
      if ((this._async$_state & 4) !== 0) {
        var doneFuture = this._doneFuture;
        if ((doneFuture._async$_state & 30) === 0)
          doneFuture._asyncComplete$1(null);
      }
      A._runGuarded(this.onCancel);
    },
    set$_firstSubscription(_firstSubscription) {
      this._firstSubscription = A._instanceType(this)._eval$1("_BroadcastSubscription<1>?")._as(_firstSubscription);
    },
    set$_lastSubscription(_lastSubscription) {
      this._lastSubscription = A._instanceType(this)._eval$1("_BroadcastSubscription<1>?")._as(_lastSubscription);
    },
    $isEventSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  A._AsyncBroadcastStreamController.prototype = {
    _sendData$1(data) {
      var subscription,
        t1 = this.$ti;
      t1._precomputed1._as(data);
      for (subscription = this._firstSubscription, t1 = t1._eval$1("_DelayedData<1>"); subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(new A._DelayedData(data, t1));
    },
    _sendError$2(error, stackTrace) {
      var subscription;
      for (subscription = this._firstSubscription; subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _sendDone$0() {
      var subscription = this._firstSubscription;
      if (subscription != null)
        for (; subscription != null; subscription = subscription._async$_next)
          subscription._addPending$1(B.C__DelayedDone);
      else
        this._doneFuture._asyncComplete$1(null);
    }
  };
  A.Future_Future$delayed_closure.prototype = {
    call$0() {
      this.T._as(null);
      this.result._complete$1(null);
    },
    $signature: 0
  };
  A.TimeoutException.prototype = {
    toString$0(_) {
      var t1 = this.duration.toString$0(0);
      return "TimeoutException after " + t1 + ": " + this.message;
    },
    $isException: 1
  };
  A._Completer.prototype = {
    completeError$2(error, stackTrace) {
      var t1 = type$.Object;
      t1._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      A.checkNotNullable(error, "error", t1);
      if ((this.future._async$_state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      this._completeError$2(error, stackTrace);
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  A._AsyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._async$_state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    },
    _completeError$2(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  };
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var exception, _this = this,
        errorCallback = _this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = _this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2);
      try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((_this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    _setChained$1(source) {
      this._async$_state = this._async$_state & 1 | 4;
      this._resultOrListeners = source;
    },
    then$1$2$onError(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        if (onError != null)
          onError = A._registerErrorHandler(onError, currentZone);
      }
      result = new A._Future(currentZone, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new A._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    catchError$1(onError) {
      var t1 = this.$ti,
        t2 = $.Zone__current,
        result = new A._Future(t2, t1);
      if (t2 !== B.C__RootZone)
        onError = A._registerErrorHandler(onError, t2);
      this._addListener$1(new A._FutureListener(result, 2, null, onError, t1._eval$1("_FutureListener<1,1>")));
      return result;
    },
    whenComplete$1(action) {
      var t1, result;
      type$.dynamic_Function._as(action);
      t1 = this.$ti;
      result = new A._Future($.Zone__current, t1);
      this._addListener$1(new A._FutureListener(result, 8, action, null, t1._eval$1("_FutureListener<1,1>")));
      return result;
    },
    _setErrorObject$1(error) {
      this._async$_state = this._async$_state & 1 | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._async$_state = source._async$_state & 30 | this._async$_state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var source, _this = this,
        t1 = _this._async$_state;
      if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._async$_state & 24) === 0) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__addListener_closure(_this, listener)));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._async$_state;
      if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._async$_state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__prependListeners_closure(_box_0, _this)));
      }
    },
    _removeListeners$0() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1(source) {
      var e, s, exception, _this = this;
      _this._async$_state ^= 2;
      try {
        source.then$1$2$onError(new A._Future__chainForeignFuture_closure(_this), new A._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A.scheduleMicrotask(new A._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _complete$1(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        if (t1._is(value))
          A._Future__chainCoreFutureSync(value, _this);
        else
          _this._chainForeignFuture$1(value);
      else {
        listeners = _this._removeListeners$0();
        t1._precomputed1._as(value);
        _this._async$_state = 8;
        _this._resultOrListeners = value;
        A._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._async$_state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2(error, stackTrace) {
      var listeners;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      listeners = this._removeListeners$0();
      this._setErrorObject$1(A.AsyncError$(error, stackTrace));
      A._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(value);
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._async$_state ^= 2;
      A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__asyncCompleteWithValue_closure(_this, value)));
    },
    _chainFuture$1(value) {
      var t1 = this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        A._Future__chainCoreFutureAsync(value, this);
        return;
      }
      this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2(error, stackTrace) {
      type$.StackTrace._as(stackTrace);
      this._async$_state ^= 2;
      A._rootScheduleMicrotask(null, null, this._zone, type$.void_Function._as(new A._Future__asyncCompleteError_closure(this, error, stackTrace)));
    },
    timeout$1(timeLimit) {
      var _future, _this = this, t1 = {};
      if ((_this._async$_state & 24) !== 0) {
        t1 = new A._Future($.Zone__current, _this.$ti);
        t1._asyncComplete$1(_this);
        return t1;
      }
      _future = new A._Future($.Zone__current, _this.$ti);
      t1.timer = null;
      t1.timer = A.Timer_Timer(timeLimit, new A._Future_timeout_closure(_future, timeLimit));
      _this.then$1$2$onError(new A._Future_timeout_closure0(t1, _this, _future), new A._Future_timeout_closure1(t1, _future), type$.Null);
      return _future;
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  A._Future__chainForeignFuture_closure.prototype = {
    call$1(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._async$_state ^= 2;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = A.unwrapException(exception);
        stackTrace = A.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 42
  };
  A._Future__chainForeignFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      this.$this._completeError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    $signature: 41
  };
  A._Future__chainForeignFuture_closure1.prototype = {
    call$0() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  A._Future__chainCoreFutureAsync_closure.prototype = {
    call$0() {
      A._Future__chainCoreFutureSync(this._box_0.source, this.target);
    },
    $signature: 0
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  A._Future__asyncCompleteError_closure.prototype = {
    call$0() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = _this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._async$_state & 24) !== 0) {
        if ((completeResult._async$_state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (completeResult instanceof A._Future) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
      return this.originalSource;
    },
    $signature: 139
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = A.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = _this._box_0;
        if (t1.error === e)
          t2.listenerValueOrError = t1;
        else
          t2.listenerValueOrError = A.AsyncError$(e, s);
        t2.listenerHasError = true;
      }
    },
    $signature: 0
  };
  A._Future_timeout_closure.prototype = {
    call$0() {
      this._future._completeError$2(new A.TimeoutException("Future not completed", this.timeLimit), B.C__StringStackTrace);
    },
    $signature: 0
  };
  A._Future_timeout_closure0.prototype = {
    call$1(v) {
      var t1;
      this.$this.$ti._precomputed1._as(v);
      t1 = this._box_0.timer;
      if (t1._handle != null) {
        t1.cancel$0();
        this._future._completeWithValue$1(v);
      }
    },
    $signature() {
      return this.$this.$ti._eval$1("Null(1)");
    }
  };
  A._Future_timeout_closure1.prototype = {
    call$2(e, s) {
      var t1;
      type$.Object._as(e);
      type$.StackTrace._as(s);
      t1 = this._box_0.timer;
      if (t1._handle != null) {
        t1.cancel$0();
        this._future._completeError$2(e, s);
      }
    },
    $signature: 41
  };
  A._AsyncCallbackEntry.prototype = {};
  A.Stream.prototype = {
    get$length(_) {
      var t1 = {},
        future = new A._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new A.Stream_length_closure(t1, this), true, new A.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$first(_) {
      var future = new A._Future($.Zone__current, A._instanceType(this)._eval$1("_Future<Stream.T>")),
        subscription = this.listen$4$cancelOnError$onDone$onError(null, true, new A.Stream_first_closure(future), future.get$_completeError());
      subscription.onData$1(new A.Stream_first_closure0(this, subscription, future));
      return future;
    }
  };
  A.Stream_length_closure.prototype = {
    call$1(_) {
      A._instanceType(this.$this)._eval$1("Stream.T")._as(_);
      ++this._box_0.count;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.Stream_length_closure0.prototype = {
    call$0() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0
  };
  A.Stream_first_closure.prototype = {
    call$0() {
      var e, s, t1, exception;
      try {
        t1 = A.IterableElementError_noElement();
        throw A.wrapException(t1);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._completeWithErrorCallback(this.future, e, s);
      }
    },
    $signature: 0
  };
  A.Stream_first_closure0.prototype = {
    call$1(value) {
      A._cancelAndValue(this.subscription, this.future, A._instanceType(this.$this)._eval$1("Stream.T")._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.StreamView.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      return this._stream.listen$4$cancelOnError$onDone$onError(A._instanceType(this)._eval$1("~(StreamView.T)?")._as(onData), cancelOnError, type$.nullable_void_Function._as(onDone), onError);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A.StreamTransformerBase.prototype = {$isStreamTransformer: 1};
  A._StreamController.prototype = {
    get$isPaused() {
      var t1 = this._async$_state;
      return (t1 & 1) !== 0 ? (this.get$_subscription()._async$_state & 4) !== 0 : (t1 & 2) === 0;
    },
    get$_pendingEvents() {
      var t1, _this = this;
      if ((_this._async$_state & 8) === 0)
        return A._instanceType(_this)._eval$1("_PendingEvents<1>?")._as(_this._varData);
      t1 = A._instanceType(_this);
      return t1._eval$1("_PendingEvents<1>?")._as(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).get$_varData());
    },
    _ensurePendingEvents$0() {
      var events, t1, _this = this;
      if ((_this._async$_state & 8) === 0) {
        events = _this._varData;
        if (events == null)
          events = _this._varData = new A._PendingEvents(A._instanceType(_this)._eval$1("_PendingEvents<1>"));
        return A._instanceType(_this)._eval$1("_PendingEvents<1>")._as(events);
      }
      t1 = A._instanceType(_this);
      events = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).get$_varData();
      return t1._eval$1("_PendingEvents<1>")._as(events);
    },
    get$_subscription() {
      var varData = this._varData;
      if ((this._async$_state & 8) !== 0)
        varData = type$._StreamControllerAddStreamState_nullable_Object._as(varData).get$_varData();
      return A._instanceType(this)._eval$1("_ControllerSubscription<1>")._as(varData);
    },
    _badEventState$0() {
      if ((this._async$_state & 4) !== 0)
        return new A.StateError("Cannot add event after closing");
      return new A.StateError("Cannot add event while adding a stream");
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture = (this._async$_state & 2) !== 0 ? $.$get$Future__nullFuture() : new A._Future($.Zone__current, type$._Future_void);
      return t1;
    },
    add$1(_, value) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(value);
      if (_this._async$_state >= 4)
        throw A.wrapException(_this._badEventState$0());
      _this._async$_add$1(value);
    },
    addError$2(error, stackTrace) {
      var t1, _this = this;
      A.checkNotNullable(error, "error", type$.Object);
      if (_this._async$_state >= 4)
        throw A.wrapException(_this._badEventState$0());
      if (stackTrace == null)
        stackTrace = A.AsyncError_defaultStackTrace(error);
      t1 = _this._async$_state;
      if ((t1 & 1) !== 0)
        _this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new A._DelayedError(error, stackTrace));
    },
    close$0() {
      var _this = this,
        t1 = _this._async$_state;
      if ((t1 & 4) !== 0)
        return _this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw A.wrapException(_this._badEventState$0());
      _this._closeUnchecked$0();
      return _this._ensureDoneFuture$0();
    },
    _closeUnchecked$0() {
      var t1 = this._async$_state |= 4;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, B.C__DelayedDone);
    },
    _async$_add$1(value) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(value);
      t2 = _this._async$_state;
      if ((t2 & 1) !== 0)
        _this._sendData$1(value);
      else if ((t2 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new A._DelayedData(value, t1._eval$1("_DelayedData<1>")));
    },
    _subscribe$4(onData, onError, onDone, cancelOnError) {
      var subscription, pendingEvents, t2, addState, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._async$_state & 3) !== 0)
        throw A.wrapException(A.StateError$("Stream has already been listened to."));
      subscription = A._ControllerSubscription$(_this, onData, onError, onDone, cancelOnError, t1._precomputed1);
      pendingEvents = _this.get$_pendingEvents();
      t2 = _this._async$_state |= 1;
      if ((t2 & 8) !== 0) {
        addState = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
        addState.set$_varData(subscription);
        addState.resume$0();
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new A._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1(subscription) {
      var result, onCancel, cancelResult, e, s, exception, result0, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      result = null;
      if ((_this._async$_state & 8) !== 0)
        result = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).cancel$0();
      _this._varData = null;
      _this._async$_state = _this._async$_state & 4294967286 | 2;
      onCancel = _this.onCancel;
      if (onCancel != null)
        if (result == null)
          try {
            cancelResult = onCancel.call$0();
            if (cancelResult instanceof A._Future)
              result = cancelResult;
          } catch (exception) {
            e = A.unwrapException(exception);
            s = A.getTraceFromException(exception);
            result0 = new A._Future($.Zone__current, type$._Future_void);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else
          result = result.whenComplete$1(onCancel);
      t1 = new A._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    _recordPause$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._async$_state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).pause$0();
      A._runGuarded(_this.onPause);
    },
    _recordResume$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._async$_state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).resume$0();
      A._runGuarded(_this.onResume);
    },
    set$onCancel(onCancel) {
      this.onCancel = type$.nullable_void_Function._as(onCancel);
    },
    $isEventSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  A._StreamController__subscribe_closure.prototype = {
    call$0() {
      A._runGuarded(this.$this.onListen);
    },
    $signature: 0
  };
  A._StreamController__recordCancel_complete.prototype = {
    call$0() {
      var doneFuture = this.$this._doneFuture;
      if (doneFuture != null && (doneFuture._async$_state & 30) === 0)
        doneFuture._asyncComplete$1(null);
    },
    $signature: 0
  };
  A._SyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      this.$ti._precomputed1._as(data);
      this.get$_subscription()._async$_add$1(data);
    },
    _sendError$2(error, stackTrace) {
      this.get$_subscription()._addError$2(error, stackTrace);
    },
    _sendDone$0() {
      this.get$_subscription()._close$0();
    }
  };
  A._AsyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      var t1 = this.$ti;
      t1._precomputed1._as(data);
      this.get$_subscription()._addPending$1(new A._DelayedData(data, t1._eval$1("_DelayedData<1>")));
    },
    _sendError$2(error, stackTrace) {
      this.get$_subscription()._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _sendDone$0() {
      this.get$_subscription()._addPending$1(B.C__DelayedDone);
    }
  };
  A._AsyncStreamController.prototype = {};
  A._SyncStreamController.prototype = {};
  A._ControllerStream.prototype = {
    get$hashCode(_) {
      return (A.Primitives_objectHashCode(this._controller) ^ 892482866) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A._ControllerStream && other._controller === this._controller;
    }
  };
  A._ControllerSubscription.prototype = {
    _onCancel$0() {
      return this._controller._recordCancel$1(this);
    },
    _onPause$0() {
      this._controller._recordPause$1(this);
    },
    _onResume$0() {
      this._controller._recordResume$1(this);
    }
  };
  A._StreamSinkWrapper.prototype = {
    add$1(_, data) {
      this._async$_target.add$1(0, this.$ti._precomputed1._as(data));
    },
    addError$2(error, stackTrace) {
      this._async$_target.addError$2(type$.Object._as(error), type$.nullable_StackTrace._as(stackTrace));
    },
    addError$1(error) {
      return this.addError$2(error, null);
    },
    close$0() {
      return this._async$_target.close$0();
    },
    $isEventSink: 1
  };
  A._BufferingStreamSubscription.prototype = {
    _setPendingEvents$1(pendingEvents) {
      var _this = this;
      A._instanceType(_this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(pendingEvents);
      if (pendingEvents == null)
        return;
      _this.set$_pending(pendingEvents);
      if (pendingEvents.lastPendingEvent != null) {
        _this._async$_state = (_this._async$_state | 128) >>> 0;
        pendingEvents.schedule$1(_this);
      }
    },
    onData$1(handleData) {
      var t1 = A._instanceType(this);
      this.set$_onData(A._BufferingStreamSubscription__registerDataHandler(this._zone, t1._eval$1("~(_BufferingStreamSubscription.T)?")._as(handleData), t1._eval$1("_BufferingStreamSubscription.T")));
    },
    pause$0() {
      var t2, t3, _this = this,
        t1 = _this._async$_state;
      if ((t1 & 8) !== 0)
        return;
      t2 = (t1 + 256 | 4) >>> 0;
      _this._async$_state = t2;
      if (t1 < 256) {
        t3 = _this._pending;
        if (t3 != null)
          if (t3._async$_state === 1)
            t3._async$_state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 64) === 0)
        _this._guardCallback$1(_this.get$_onPause());
    },
    resume$0() {
      var _this = this,
        t1 = _this._async$_state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 256) {
        t1 = _this._async$_state = t1 - 256;
        if (t1 < 256)
          if ((t1 & 128) !== 0 && _this._pending.lastPendingEvent != null)
            _this._pending.schedule$1(_this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            _this._async$_state = t1;
            if ((t1 & 64) === 0)
              _this._guardCallback$1(_this.get$_onResume());
          }
      }
    },
    cancel$0() {
      var _this = this,
        t1 = (_this._async$_state & 4294967279) >>> 0;
      _this._async$_state = t1;
      if ((t1 & 8) === 0)
        _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    _cancel$0() {
      var t2, _this = this,
        t1 = _this._async$_state = (_this._async$_state | 8) >>> 0;
      if ((t1 & 128) !== 0) {
        t2 = _this._pending;
        if (t2._async$_state === 1)
          t2._async$_state = 3;
      }
      if ((t1 & 64) === 0)
        _this.set$_pending(null);
      _this._cancelFuture = _this._onCancel$0();
    },
    _async$_add$1(data) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("_BufferingStreamSubscription.T")._as(data);
      t2 = _this._async$_state;
      if ((t2 & 8) !== 0)
        return;
      if (t2 < 64)
        _this._sendData$1(data);
      else
        _this._addPending$1(new A._DelayedData(data, t1._eval$1("_DelayedData<_BufferingStreamSubscription.T>")));
    },
    _addError$2(error, stackTrace) {
      var t1 = this._async$_state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 64)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _close$0() {
      var _this = this,
        t1 = _this._async$_state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      _this._async$_state = t1;
      if (t1 < 64)
        _this._sendDone$0();
      else
        _this._addPending$1(B.C__DelayedDone);
    },
    _onPause$0() {
    },
    _onResume$0() {
    },
    _onCancel$0() {
      return null;
    },
    _addPending$1($event) {
      var t1, _this = this,
        pending = _this._pending;
      if (pending == null) {
        pending = new A._PendingEvents(A._instanceType(_this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>"));
        _this.set$_pending(pending);
      }
      pending.add$1(0, $event);
      t1 = _this._async$_state;
      if ((t1 & 128) === 0) {
        t1 = (t1 | 128) >>> 0;
        _this._async$_state = t1;
        if (t1 < 256)
          pending.schedule$1(_this);
      }
    },
    _sendData$1(data) {
      var t2, _this = this,
        t1 = A._instanceType(_this)._eval$1("_BufferingStreamSubscription.T");
      t1._as(data);
      t2 = _this._async$_state;
      _this._async$_state = (t2 | 64) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._onData, data, t1);
      _this._async$_state = (_this._async$_state & 4294967231) >>> 0;
      _this._checkState$1((t2 & 4) !== 0);
    },
    _sendError$2(error, stackTrace) {
      var cancelFuture, _this = this,
        t1 = _this._async$_state,
        t2 = new A._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        _this._async$_state = (t1 | 16) >>> 0;
        _this._cancel$0();
        cancelFuture = _this._cancelFuture;
        if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
          cancelFuture.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        _this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0() {
      var cancelFuture, _this = this,
        t1 = new A._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._cancel$0();
      _this._async$_state = (_this._async$_state | 16) >>> 0;
      cancelFuture = _this._cancelFuture;
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1(callback) {
      var t1, _this = this;
      type$.void_Function._as(callback);
      t1 = _this._async$_state;
      _this._async$_state = (t1 | 64) >>> 0;
      callback.call$0();
      _this._async$_state = (_this._async$_state & 4294967231) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1(wasInputPaused) {
      var t2, isInputPaused, _this = this,
        t1 = _this._async$_state;
      if ((t1 & 128) !== 0 && _this._pending.lastPendingEvent == null) {
        t1 = _this._async$_state = (t1 & 4294967167) >>> 0;
        t2 = false;
        if ((t1 & 4) !== 0)
          if (t1 < 256) {
            t2 = _this._pending;
            t2 = t2 == null ? null : t2.lastPendingEvent == null;
            t2 = t2 !== false;
          }
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          _this._async$_state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          _this.set$_pending(null);
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        _this._async$_state = (t1 ^ 64) >>> 0;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        t1 = (_this._async$_state & 4294967231) >>> 0;
        _this._async$_state = t1;
      }
      if ((t1 & 128) !== 0 && t1 < 256)
        _this._pending.schedule$1(_this);
    },
    set$_onData(_onData) {
      this._onData = A._instanceType(this)._eval$1("~(_BufferingStreamSubscription.T)")._as(_onData);
    },
    set$_pending(_pending) {
      this._pending = A._instanceType(this)._eval$1("_PendingEvents<_BufferingStreamSubscription.T>?")._as(_pending);
    },
    $isStreamSubscription: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  A._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0() {
      var onError, t3, t4,
        t1 = this.$this,
        t2 = t1._async$_state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._async$_state = (t2 | 64) >>> 0;
      onError = t1._onError;
      t2 = this.error;
      t3 = type$.Object;
      t4 = t1._zone;
      if (type$.void_Function_Object_StackTrace._is(onError))
        t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, type$.StackTrace);
      else
        t4.runUnaryGuarded$1$2(type$.void_Function_Object._as(onError), t2, t3);
      t1._async$_state = (t1._async$_state & 4294967231) >>> 0;
    },
    $signature: 0
  };
  A._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._async$_state;
      if ((t2 & 16) === 0)
        return;
      t1._async$_state = (t2 | 74) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._async$_state = (t1._async$_state & 4294967231) >>> 0;
    },
    $signature: 0
  };
  A._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = A._instanceType(this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      return this._controller._subscribe$4(t1._eval$1("~(1)?")._as(onData), onError, onDone, cancelOnError === true);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A._DelayedEvent.prototype = {
    set$next(next) {
      this.next = type$.nullable__DelayedEvent_dynamic._as(next);
    },
    get$next() {
      return this.next;
    }
  };
  A._DelayedData.prototype = {
    perform$1(dispatch) {
      this.$ti._eval$1("_EventDispatch<1>")._as(dispatch)._sendData$1(this.value);
    },
    get$value() {
      return this.value;
    }
  };
  A._DelayedError.prototype = {
    perform$1(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  };
  A._DelayedDone.prototype = {
    perform$1(dispatch) {
      dispatch._sendDone$0();
    },
    get$next() {
      return null;
    },
    set$next(_) {
      throw A.wrapException(A.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1
  };
  A._PendingEvents.prototype = {
    schedule$1(dispatch) {
      var t1, _this = this;
      _this.$ti._eval$1("_EventDispatch<1>")._as(dispatch);
      t1 = _this._async$_state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._async$_state = 1;
        return;
      }
      A.scheduleMicrotask(new A._PendingEvents_schedule_closure(_this, dispatch));
      _this._async$_state = 1;
    },
    add$1(_, $event) {
      var _this = this,
        lastEvent = _this.lastPendingEvent;
      if (lastEvent == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        lastEvent.set$next($event);
        _this.lastPendingEvent = $event;
      }
    }
  };
  A._PendingEvents_schedule_closure.prototype = {
    call$0() {
      var t2, $event, nextEvent,
        t1 = this.$this,
        oldState = t1._async$_state;
      t1._async$_state = 0;
      if (oldState === 3)
        return;
      t2 = t1.$ti._eval$1("_EventDispatch<1>")._as(this.dispatch);
      $event = t1.firstPendingEvent;
      nextEvent = $event.get$next();
      t1.firstPendingEvent = nextEvent;
      if (nextEvent == null)
        t1.lastPendingEvent = null;
      $event.perform$1(t2);
    },
    $signature: 0
  };
  A._DoneStreamSubscription.prototype = {
    onData$1(handleData) {
      this.$ti._eval$1("~(1)?")._as(handleData);
    },
    pause$0() {
      var t1 = this._async$_state;
      if (t1 >= 0)
        this._async$_state = t1 + 2;
    },
    resume$0() {
      var _this = this,
        resumeState = _this._async$_state - 2;
      if (resumeState < 0)
        return;
      if (resumeState === 0) {
        _this._async$_state = 1;
        A.scheduleMicrotask(_this.get$_onMicrotask());
      } else
        _this._async$_state = resumeState;
    },
    cancel$0() {
      this._async$_state = -1;
      this.set$_onDone(null);
      return $.$get$Future__nullFuture();
    },
    _onMicrotask$0() {
      var _0_0, _this = this,
        unscheduledState = _this._async$_state - 1;
      if (unscheduledState === 0) {
        _this._async$_state = -1;
        _0_0 = _this._onDone;
        if (_0_0 != null) {
          _this.set$_onDone(null);
          _this._zone.runGuarded$1(_0_0);
        }
      } else
        _this._async$_state = unscheduledState;
    },
    set$_onDone(_onDone) {
      this._onDone = type$.nullable_void_Function._as(_onDone);
    },
    $isStreamSubscription: 1
  };
  A._StreamIterator.prototype = {};
  A._EmptyStream.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      return A._DoneStreamSubscription$(type$.nullable_void_Function._as(onDone), t1._precomputed1);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A._cancelAndValue_closure.prototype = {
    call$0() {
      return this.future._complete$1(this.value);
    },
    $signature: 0
  };
  A._EventSinkWrapper.prototype = {
    add$1(_, data) {
      var t1 = this._sink;
      data = t1.$ti._rest[1]._as(this.$ti._precomputed1._as(data));
      if ((t1._async$_state & 2) !== 0)
        A.throwExpression(A.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_add(data);
    },
    addError$2(error, stackTrace) {
      var t1 = this._sink;
      if ((t1._async$_state & 2) !== 0)
        A.throwExpression(A.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    close$0() {
      var t1 = this._sink;
      if ((t1._async$_state & 2) !== 0)
        A.throwExpression(A.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_close();
    },
    $isEventSink: 1
  };
  A._SinkTransformerStreamSubscription.prototype = {
    _onPause$0() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.pause$0();
    },
    _onResume$0() {
      var t1 = this._subscription;
      if (t1 != null)
        t1.resume$0();
    },
    _onCancel$0() {
      var subscription = this._subscription;
      if (subscription != null) {
        this.set$_subscription(null);
        return subscription.cancel$0();
      }
      return null;
    },
    _handleData$1(data) {
      var e, s, t1, exception, t2, _this = this;
      _this.$ti._precomputed1._as(data);
      try {
        t1 = _this.___SinkTransformerStreamSubscription__transformerSink_A;
        t1 === $ && A.throwLateFieldNI("_transformerSink");
        t1.add$1(0, data);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.Object._as(e);
        t2 = type$.StackTrace._as(s);
        if ((_this._async$_state & 2) !== 0)
          A.throwExpression(A.StateError$("Stream is already closed"));
        _this.super$_BufferingStreamSubscription$_addError(t1, t2);
      }
    },
    _handleError$2(error, stackTrace) {
      var e, s, t2, t3, exception, _this = this,
        _s24_ = "Stream is already closed",
        t1 = type$.Object;
      t1._as(error);
      t2 = type$.StackTrace;
      t2._as(stackTrace);
      try {
        t3 = _this.___SinkTransformerStreamSubscription__transformerSink_A;
        t3 === $ && A.throwLateFieldNI("_transformerSink");
        t3.addError$2(error, stackTrace);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (e === error) {
          if ((_this._async$_state & 2) !== 0)
            A.throwExpression(A.StateError$(_s24_));
          _this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
        } else {
          t1 = t1._as(e);
          t2 = t2._as(s);
          if ((_this._async$_state & 2) !== 0)
            A.throwExpression(A.StateError$(_s24_));
          _this.super$_BufferingStreamSubscription$_addError(t1, t2);
        }
      }
    },
    _handleDone$0() {
      var e, s, t1, exception, t2, _this = this;
      try {
        _this.set$_subscription(null);
        t1 = _this.___SinkTransformerStreamSubscription__transformerSink_A;
        t1 === $ && A.throwLateFieldNI("_transformerSink");
        t1.close$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.Object._as(e);
        t2 = type$.StackTrace._as(s);
        if ((_this._async$_state & 2) !== 0)
          A.throwExpression(A.StateError$("Stream is already closed"));
        _this.super$_BufferingStreamSubscription$_addError(t1, t2);
      }
    },
    set$___SinkTransformerStreamSubscription__transformerSink_A(___SinkTransformerStreamSubscription__transformerSink_A) {
      this.___SinkTransformerStreamSubscription__transformerSink_A = this.$ti._eval$1("EventSink<1>")._as(___SinkTransformerStreamSubscription__transformerSink_A);
    },
    set$_subscription(_subscription) {
      this._subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  A._StreamSinkTransformer.prototype = {
    bind$1(stream) {
      var t1 = this.$ti;
      return new A._BoundSinkStream(this._sinkMapper, t1._eval$1("Stream<1>")._as(stream), t1._eval$1("_BoundSinkStream<1,2>"));
    }
  };
  A._BoundSinkStream.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t2, t3, t4, t5, t6, subscription,
        t1 = this.$ti;
      t1._eval$1("~(2)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      t2 = $.Zone__current;
      t3 = cancelOnError === true ? 1 : 0;
      t4 = onError != null ? 32 : 0;
      t5 = A._BufferingStreamSubscription__registerDataHandler(t2, onData, t1._rest[1]);
      t6 = A._BufferingStreamSubscription__registerErrorHandler(t2, onError);
      subscription = new A._SinkTransformerStreamSubscription(t5, t6, type$.void_Function._as(onDone), t2, t3 | t4, t1._eval$1("_SinkTransformerStreamSubscription<1,2>"));
      subscription.set$___SinkTransformerStreamSubscription__transformerSink_A(t1._eval$1("EventSink<1>")._as(this._sinkMapper.call$1(new A._EventSinkWrapper(subscription, t1._eval$1("_EventSinkWrapper<2>")))));
      subscription.set$_subscription(this._stream.listen$3$onDone$onError(subscription.get$_handleData(), subscription.get$_handleDone(), subscription.get$_handleError()));
      return subscription;
    },
    listen$2$onDone(onData, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A._HandlerEventSink.prototype = {
    add$1(_, data) {
      var sink;
      this.$ti._precomputed1._as(data);
      sink = this._sink;
      if (sink == null)
        throw A.wrapException(A.StateError$("Sink is closed"));
      this._handleData.call$2(data, sink);
    },
    addError$2(error, stackTrace) {
      var sink;
      A.checkNotNullable(error, "error", type$.Object);
      sink = this._sink;
      if (sink == null)
        throw A.wrapException(A.StateError$("Sink is closed"));
      sink.addError$2(error, stackTrace);
    },
    close$0() {
      var t1,
        sink = this._sink;
      if (sink == null)
        return;
      this.set$_sink(null);
      t1 = sink._sink;
      if ((t1._async$_state & 2) !== 0)
        A.throwExpression(A.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_close();
    },
    set$_sink(_sink) {
      this._sink = this.$ti._eval$1("EventSink<2>?")._as(_sink);
    },
    $isEventSink: 1
  };
  A._StreamHandlerTransformer.prototype = {};
  A._StreamHandlerTransformer_closure.prototype = {
    call$1(outputSink) {
      var _this = this,
        t1 = _this.T;
      return new A._HandlerEventSink(_this.handleData, _this.handleError, _this.handleDone, t1._eval$1("EventSink<0>")._as(outputSink), _this.S._eval$1("@<0>")._bind$1(t1)._eval$1("_HandlerEventSink<1,2>"));
    },
    $signature() {
      return this.S._eval$1("@<0>")._bind$1(this.T)._eval$1("_HandlerEventSink<1,2>(EventSink<2>)");
    }
  };
  A._Zone.prototype = {$isZone: 1};
  A._rootHandleError_closure.prototype = {
    call$0() {
      A.Error_throwWithStackTrace(this.error, this.stackTrace);
    },
    $signature: 0
  };
  A._RootZone.prototype = {
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        A._rootRunUnary(null, null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runBinaryGuarded$2$3(f, arg1, arg2, T1, T2) {
      var e, s, exception;
      T1._eval$1("@<0>")._bind$1(T2)._eval$1("~(1,2)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        A._rootRunBinary(null, null, this, f, arg1, arg2, type$.void, T1, T2);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1(f, $T) {
      return new A._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    $index(_, key) {
      return null;
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  A._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A._LinkedCustomHashMap.prototype = {
    $index(_, key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$JsLinkedHashMap$internalGet(key);
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      this.super$JsLinkedHashMap$internalSet(t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return false;
      return this.super$JsLinkedHashMap$internalContainsKey(key);
    },
    remove$1(_, key) {
      if (!A.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$JsLinkedHashMap$internalRemove(key);
    },
    internalComputeHashCode$1(key) {
      return this._hashCode.call$1(this.$ti._precomputed1._as(key)) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this.$ti._precomputed1, t2 = this._equals, i = 0; i < $length; ++i)
        if (A.boolConversionCheck(t2.call$2(t1._as(bucket[i].hashMapCellKey), t1._as(key))))
          return i;
      return -1;
    }
  };
  A._LinkedCustomHashMap_closure.prototype = {
    call$1(v) {
      return this.K._is(v);
    },
    $signature: 160
  };
  A._LinkedHashSet.prototype = {
    get$iterator(_) {
      var _this = this,
        t1 = new A._LinkedHashSetIterator(_this, _this._collection$_modifications, A._instanceType(_this)._eval$1("_LinkedHashSetIterator<1>"));
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    contains$1(_, object) {
      var strings, nums;
      if (typeof object == "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(strings[object]) != null;
      } else if (typeof object == "number" && (object & 1073741823) === object) {
        nums = this._collection$_nums;
        if (nums == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(nums[object]) != null;
      } else
        return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    get$first(_) {
      var first = this._collection$_first;
      if (first == null)
        throw A.wrapException(A.StateError$("No elements"));
      return A._instanceType(this)._precomputed1._as(first._element);
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1(element) {
      var rest, hash, bucket, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1(_, object) {
      var _this = this;
      if (typeof object == "string" && object !== "__proto__")
        return _this._collection$_removeHashTableEntry$2(_this._collection$_strings, object);
      else if (typeof object == "number" && (object & 1073741823) === object)
        return _this._collection$_removeHashTableEntry$2(_this._collection$_nums, object);
      else
        return _this._remove$1(object);
    },
    _remove$1(object) {
      var hash, bucket, index, cell, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      hash = _this._computeHashCode$1(object);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      cell = bucket.splice(index, 1)[0];
      if (0 === bucket.length)
        delete rest[hash];
      _this._collection$_unlinkCell$1(cell);
      return true;
    },
    _collection$_addHashTableEntry$2(table, element) {
      A._instanceType(this)._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _collection$_removeHashTableEntry$2(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = type$.nullable__LinkedHashSetCell._as(table[element]);
      if (cell == null)
        return false;
      this._collection$_unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _collection$_modified$0() {
      this._collection$_modifications = this._collection$_modifications + 1 & 1073741823;
    },
    _collection$_newLinkedCell$1(element) {
      var t1, _this = this,
        cell = new A._LinkedHashSetCell(A._instanceType(_this)._precomputed1._as(element));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        t1 = _this._collection$_last;
        t1.toString;
        cell._collection$_previous = t1;
        _this._collection$_last = t1._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._collection$_modified$0();
      return cell;
    },
    _collection$_unlinkCell$1(cell) {
      var _this = this,
        previous = cell._collection$_previous,
        next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --_this._collection$_length;
      _this._collection$_modified$0();
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    },
    $isLinkedHashSet: 1
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._collection$_cell,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(_this.$ti._eval$1("1?")._as(cell._element));
        _this._collection$_cell = cell._collection$_next;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  A.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 210
  };
  A.ListBase.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListBase.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    contains$1(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    any$1(receiver, test) {
      var $length, i;
      A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (A.boolConversionCheck(test.call$1(this.$index(receiver, i))))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    join$1(receiver, separator) {
      var t1;
      if (this.get$length(receiver) === 0)
        return "";
      t1 = A.StringBuffer__writeAll("", receiver, separator);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    where$1(receiver, test) {
      var t1 = A.instanceType(receiver);
      return new A.WhereIterable(receiver, t1._eval$1("bool(ListBase.E)")._as(test), t1._eval$1("WhereIterable<ListBase.E>"));
    },
    whereType$1$0(receiver, $T) {
      return new A.WhereTypeIterable(receiver, $T._eval$1("WhereTypeIterable<0>"));
    },
    map$1$1(receiver, f, $T) {
      var t1 = A.instanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(ListBase.E)")._as(f), t1._eval$1("@<ListBase.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    fold$1$2(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      A.instanceType(receiver)._bind$1($T)._eval$1("1(1,ListBase.E)")._as(combine);
      $length = this.get$length(receiver);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    skip$1(receiver, count) {
      return A.SubListIterable$(receiver, count, null, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    take$1(receiver, count) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(count, "count", type$.int), A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    toList$1$growable(receiver, growable) {
      var t1, first, result, i, _this = this;
      if (_this.get$isEmpty(receiver)) {
        t1 = J.JSArray_JSArray$growable(0, A.instanceType(receiver)._eval$1("ListBase.E"));
        return t1;
      }
      first = _this.$index(receiver, 0);
      result = A.List_List$filled(_this.get$length(receiver), first, true, A.instanceType(receiver)._eval$1("ListBase.E"));
      for (i = 1; i < _this.get$length(receiver); ++i)
        B.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
      return result;
    },
    toList$0(receiver) {
      return this.toList$1$growable(receiver, true);
    },
    add$1(receiver, element) {
      var t1;
      A.instanceType(receiver)._eval$1("ListBase.E")._as(element);
      t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A.instanceType(receiver)._eval$1("@<ListBase.E>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    sort$1(receiver, compare) {
      var t2,
        t1 = A.instanceType(receiver);
      t1._eval$1("int(ListBase.E,ListBase.E)?")._as(compare);
      t2 = compare == null ? A.collection_ListBase__compareAny$closure() : compare;
      A.Sort__doSort(receiver, 0, this.get$length(receiver) - 1, t2, t1._eval$1("ListBase.E"));
    },
    sublist$2(receiver, start, end) {
      var listLength = this.get$length(receiver);
      if (end == null)
        end = listLength;
      A.RangeError_checkValidRange(start, end, listLength);
      return A.List_List$from(this.getRange$2(receiver, start, end), true, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    getRange$2(receiver, start, end) {
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      return A.SubListIterable$(receiver, start, end, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    fillRange$3(receiver, start, end, fill) {
      var i;
      A.instanceType(receiver)._eval$1("ListBase.E?")._as(fill);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, i,
        t1 = A.instanceType(receiver);
      t1._eval$1("Iterable<ListBase.E>")._as(iterable);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListBase.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    get$reversed(receiver) {
      return new A.ReversedListIterable(receiver, A.instanceType(receiver)._eval$1("ReversedListIterable<ListBase.E>"));
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.MapBase.prototype = {
    cast$2$0(_, RK, RV) {
      var t1 = A._instanceType(this);
      return A.Map_castFrom(this, t1._eval$1("MapBase.K"), t1._eval$1("MapBase.V"), RK, RV);
    },
    forEach$1(_, action) {
      var t2, key, t3,
        t1 = A._instanceType(this);
      t1._eval$1("~(MapBase.K,MapBase.V)")._as(action);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
      }
    },
    get$entries() {
      return this.get$keys().map$1$1(0, new A.MapBase_entries_closure(this), A._instanceType(this)._eval$1("MapEntry<MapBase.K,MapBase.V>"));
    },
    map$2$1(_, transform, K2, V2) {
      var result, t2, key, t3, entry,
        t1 = A._instanceType(this);
      t1._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(MapBase.K,MapBase.V)")._as(transform);
      result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        entry = transform.call$2(key, t3 == null ? t1._as(t3) : t3);
        result.$indexSet(0, entry.key, entry.value);
      }
      return result;
    },
    addEntries$1(newEntries) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(A._instanceType(this)._eval$1("Iterable<MapEntry<MapBase.K,MapBase.V>>")._as(newEntries)); t1.moveNext$0();) {
        t2 = t1.get$current();
        this.$indexSet(0, t2.key, t2.value);
      }
    },
    containsKey$1(key) {
      return this.get$keys().contains$1(0, key);
    },
    get$length(_) {
      var t1 = this.get$keys();
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this.get$keys();
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this.get$keys();
      return t1.get$isNotEmpty(t1);
    },
    get$values() {
      return new A._MapBaseValueIterable(this, A._instanceType(this)._eval$1("_MapBaseValueIterable<MapBase.K,MapBase.V>"));
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.MapBase_entries_closure.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t2._eval$1("MapBase.K")._as(key);
      t1 = t1.$index(0, key);
      if (t1 == null)
        t1 = t2._eval$1("MapBase.V")._as(t1);
      return new A.MapEntry(key, t1, t2._eval$1("MapEntry<MapBase.K,MapBase.V>"));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("MapEntry<MapBase.K,MapBase.V>(MapBase.K)");
    }
  };
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = A.S(k);
      t2 = t1._contents += t2;
      t1._contents = t2 + ": ";
      t2 = A.S(v);
      t1._contents += t2;
    },
    $signature: 77
  };
  A.UnmodifiableMapBase.prototype = {};
  A._MapBaseValueIterable.prototype = {
    get$length(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this._collection$_map;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._collection$_map;
      return t1.get$isNotEmpty(t1);
    },
    get$first(_) {
      var t1 = this._collection$_map,
        t2 = t1.get$keys();
      t2 = t1.$index(0, t2.get$first(t2));
      return t2 == null ? this.$ti._rest[1]._as(t2) : t2;
    },
    get$iterator(_) {
      var t1 = this._collection$_map,
        t2 = t1.get$keys();
      return new A._MapBaseValueIterator(t2.get$iterator(t2), t1, this.$ti._eval$1("_MapBaseValueIterator<1,2>"));
    }
  };
  A._MapBaseValueIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._keys;
      if (t1.moveNext$0()) {
        _this.set$_collection$_current(_this._collection$_map.$index(0, t1.get$current()));
        return true;
      }
      _this.set$_collection$_current(null);
      return false;
    },
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  A._UnmodifiableMapMixin.prototype = {
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._eval$1("_UnmodifiableMapMixin.K")._as(key);
      t1._eval$1("_UnmodifiableMapMixin.V")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  A.MapView.prototype = {
    cast$2$0(_, RK, RV) {
      return this._collection$_map.cast$2$0(0, RK, RV);
    },
    $index(_, key) {
      return this._collection$_map.$index(0, key);
    },
    containsKey$1(key) {
      return this._collection$_map.containsKey$1(key);
    },
    forEach$1(_, action) {
      this._collection$_map.forEach$1(0, A._instanceType(this)._eval$1("~(1,2)")._as(action));
    },
    get$isEmpty(_) {
      var t1 = this._collection$_map;
      return t1.get$isEmpty(t1);
    },
    get$length(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    },
    get$keys() {
      return this._collection$_map.get$keys();
    },
    toString$0(_) {
      return this._collection$_map.toString$0(0);
    },
    get$values() {
      return this._collection$_map.get$values();
    },
    get$entries() {
      return this._collection$_map.get$entries();
    },
    $isMap: 1
  };
  A.UnmodifiableMapView.prototype = {
    cast$2$0(_, RK, RV) {
      return new A.UnmodifiableMapView(this._collection$_map.cast$2$0(0, RK, RV), RK._eval$1("@<0>")._bind$1(RV)._eval$1("UnmodifiableMapView<1,2>"));
    }
  };
  A.SetBase.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    addAll$1(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(A._instanceType(this)._eval$1("Iterable<1>")._as(elements)); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    every$1(_, f) {
      var t1, t2, element;
      A._instanceType(this)._eval$1("bool(1)")._as(f);
      for (t1 = this.get$iterator(this), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        element = t1._collection$_current;
        if (!A.boolConversionCheck(f.call$1(element == null ? t2._as(element) : element)))
          return false;
      }
      return true;
    },
    join$1(_, separator) {
      var t1, first, t2, t3,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      t1 = iterator._collection$_current;
      first = J.toString$0$(t1 == null ? iterator.$ti._precomputed1._as(t1) : t1);
      if (!iterator.moveNext$0())
        return first;
      t1 = iterator.$ti._precomputed1;
      if (separator.length === 0) {
        t2 = first;
        do {
          t3 = iterator._collection$_current;
          t2 += A.S(t3 == null ? t1._as(t3) : t3);
        } while (iterator.moveNext$0());
        t1 = t2;
      } else {
        t2 = first;
        do {
          t3 = iterator._collection$_current;
          t2 = t2 + separator + A.S(t3 == null ? t1._as(t3) : t3);
        } while (iterator.moveNext$0());
        t1 = t2;
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    take$1(_, n) {
      return A.TakeIterable_TakeIterable(this, n, A._instanceType(this)._precomputed1);
    },
    skip$1(_, n) {
      return A.SkipIterable_SkipIterable(this, n, A._instanceType(this)._precomputed1);
    },
    get$first(_) {
      var t1,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = it._collection$_current;
      return t1 == null ? it.$ti._precomputed1._as(t1) : t1;
    },
    elementAt$1(_, index) {
      var iterator, skipCount, t1;
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(this);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0) {
          t1 = iterator._collection$_current;
          return t1 == null ? iterator.$ti._precomputed1._as(t1) : t1;
        }
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, null, "index"));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  A._SetBase.prototype = {};
  A._UnmodifiableSetMixin.prototype = {
    add$1(_, value) {
      this.$ti._precomputed1._as(value);
      return A._UnmodifiableSetMixin__throwUnmodifiable();
    }
  };
  A.UnmodifiableSetView.prototype = {
    contains$1(_, element) {
      return this._collection$_source.contains$1(0, element);
    },
    get$length(_) {
      return this._collection$_source._collection$_length;
    },
    get$iterator(_) {
      var t1 = this._collection$_source;
      return A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1);
    }
  };
  A._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  A._UnmodifiableSetView_SetBase__UnmodifiableSetMixin.prototype = {};
  A._JsonMap.prototype = {
    $index(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._data.$index(0, key);
      else if (typeof key != "string")
        return null;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length(_) {
      return this._processed == null ? this._data.__js_helper$_length : this._computeKeys$0().length;
    },
    get$isEmpty(_) {
      return this.get$length(0) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(0) > 0;
    },
    get$keys() {
      if (this._processed == null) {
        var t1 = this._data;
        return new A.LinkedHashMapKeyIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterable<1>"));
      }
      return new A._JsonMapKeyIterable(this);
    },
    get$values() {
      var _this = this;
      if (_this._processed == null)
        return _this._data.get$values();
      return A.MappedIterable_MappedIterable(_this._computeKeys$0(), new A._JsonMap_values_closure(_this), type$.String, type$.dynamic);
    },
    $indexSet(_, key, value) {
      var processed, original, _this = this;
      A._asString(key);
      if (_this._processed == null)
        _this._data.$indexSet(0, key, value);
      else if (_this.containsKey$1(key)) {
        processed = _this._processed;
        processed[key] = value;
        original = _this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        _this._upgrade$0().$indexSet(0, key, value);
    },
    containsKey$1(key) {
      if (this._processed == null)
        return this._data.containsKey$1(key);
      if (typeof key != "string")
        return false;
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    forEach$1(_, f) {
      var keys, i, key, value, _this = this;
      type$.void_Function_String_dynamic._as(f);
      if (_this._processed == null)
        return _this._data.forEach$1(0, f);
      keys = _this._computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = A._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._data)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0() {
      var keys = type$.nullable_List_dynamic._as(this._data);
      if (keys == null)
        keys = this._data = A._setArrayType(Object.keys(this._original), type$.JSArray_String);
      return keys;
    },
    _upgrade$0() {
      var result, keys, i, t1, key, _this = this;
      if (_this._processed == null)
        return _this._data;
      result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      keys = _this._computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, _this.$index(0, key));
      }
      if (t1 === 0)
        B.JSArray_methods.add$1(keys, "");
      else
        B.JSArray_methods.clear$0(keys);
      _this._original = _this._processed = null;
      return _this._data = result;
    },
    _process$1(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return null;
      result = A._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    }
  };
  A._JsonMap_values_closure.prototype = {
    call$1(each) {
      return this.$this.$index(0, A._asString(each));
    },
    $signature: 79
  };
  A._JsonMapKeyIterable.prototype = {
    get$length(_) {
      return this._parent.get$length(0);
    },
    elementAt$1(_, index) {
      var t1 = this._parent;
      if (t1._processed == null)
        t1 = t1.get$keys().elementAt$1(0, index);
      else {
        t1 = t1._computeKeys$0();
        if (!(index >= 0 && index < t1.length))
          return A.ioore(t1, index);
        t1 = t1[index];
      }
      return t1;
    },
    get$iterator(_) {
      var t1 = this._parent;
      if (t1._processed == null) {
        t1 = t1.get$keys();
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
      }
      return t1;
    },
    contains$1(_, key) {
      return this._parent.containsKey$1(key);
    }
  };
  A._Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 78
  };
  A._Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 78
  };
  A.AsciiCodec.prototype = {
    get$name() {
      return "us-ascii";
    },
    encode$1(source) {
      return B.AsciiEncoder_127.convert$1(source);
    },
    decode$2$allowInvalid(bytes, allowInvalid) {
      type$.List_int._as(bytes);
      if (allowInvalid === true)
        return B.AsciiDecoder_true_127.convert$1(bytes);
      else
        return B.AsciiDecoder_false_127.convert$1(bytes);
    }
  };
  A._UnicodeSubsetEncoder.prototype = {
    convert$1(string) {
      var stringLength, end, result, t1, i, codeUnit;
      A._asString(string);
      stringLength = string.length;
      end = A.RangeError_checkValidRange(0, null, stringLength);
      result = new Uint8Array(end);
      for (t1 = ~this._subsetMask, i = 0; i < end; ++i) {
        if (!(i < stringLength))
          return A.ioore(string, i);
        codeUnit = string.charCodeAt(i);
        if ((codeUnit & t1) !== 0)
          throw A.wrapException(A.ArgumentError$value(string, "string", "Contains invalid characters."));
        if (!(i < end))
          return A.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    }
  };
  A.AsciiEncoder.prototype = {};
  A._UnicodeSubsetDecoder.prototype = {
    convert$1(bytes) {
      var t1, end, t2, i, byte;
      type$.List_int._as(bytes);
      t1 = J.getInterceptor$asx(bytes);
      end = A.RangeError_checkValidRange(0, null, t1.get$length(bytes));
      for (t2 = ~this._subsetMask, i = 0; i < end; ++i) {
        byte = t1.$index(bytes, i);
        if ((byte & t2) >>> 0 !== 0) {
          if (!this._allowInvalid)
            throw A.wrapException(A.FormatException$("Invalid value in input: " + A.S(byte), null, null));
          return this._convertInvalid$3(bytes, 0, end);
        }
      }
      return A.String_String$fromCharCodes(bytes, 0, end);
    },
    _convertInvalid$3(bytes, start, end) {
      var t1, t2, i, t3, value;
      type$.List_int._as(bytes);
      for (t1 = ~this._subsetMask, t2 = J.getInterceptor$asx(bytes), i = start, t3 = ""; i < end; ++i) {
        value = t2.$index(bytes, i);
        t3 += A.Primitives_stringFromCharCode((value & t1) >>> 0 !== 0 ? 65533 : value);
      }
      return t3.charCodeAt(0) == 0 ? t3 : t3;
    }
  };
  A.AsciiDecoder.prototype = {};
  A.Base64Codec.prototype = {
    get$encoder() {
      return this._encoder;
    },
    normalize$3(source, start, end) {
      var inverseAlphabet, t2, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, t3, digit2, char0, value, t4, endLength, $length,
        _s64_ = string$.ABCDEF,
        _s31_ = "Invalid base64 encoding length ",
        t1 = source.length;
      end = A.RangeError_checkValidRange(start, end, t1);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t2 = inverseAlphabet.length, i = start, sliceStart = i, buffer = null, firstPadding = -1, firstPaddingSourceIndex = -1, paddingCount = 0; i < end; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(source, i);
        char = source.charCodeAt(i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            if (!(i0 < t1))
              return A.ioore(source, i0);
            digit1 = A.hexDigitValue(source.charCodeAt(i0));
            t3 = i0 + 1;
            if (!(t3 < t1))
              return A.ioore(source, t3);
            digit2 = A.hexDigitValue(source.charCodeAt(t3));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          if (!(char0 >= 0 && char0 < t2))
            return A.ioore(inverseAlphabet, char0);
          value = inverseAlphabet[char0];
          if (value >= 0) {
            if (!(value < 64))
              return A.ioore(_s64_, value);
            char0 = _s64_.charCodeAt(value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t3 = buffer == null ? null : buffer._contents.length;
                if (t3 == null)
                  t3 = 0;
                firstPadding = t3 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t3 = buffer;
            } else
              t3 = buffer;
            t3._contents += B.JSString_methods.substring$2(source, sliceStart, i);
            t4 = A.Primitives_stringFromCharCode(char);
            t3._contents += t4;
            sliceStart = i0;
            continue;
          }
        }
        throw A.wrapException(A.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = B.JSString_methods.substring$2(source, sliceStart, end);
        t1 = buffer._contents += t1;
        t2 = t1.length;
        if (firstPadding >= 0)
          A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = B.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw A.wrapException(A.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return B.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = B.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw A.wrapException(A.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = B.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    }
  };
  A.Base64Encoder.prototype = {
    convert$1(input) {
      var t1, t2;
      type$.List_int._as(input);
      t1 = J.getInterceptor$asx(input);
      if (t1.get$isEmpty(input))
        return "";
      t2 = this._urlSafe ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_" : string$.ABCDEF;
      t1 = new A._Base64Encoder(t2).encode$4(input, 0, t1.get$length(input), true);
      t1.toString;
      return A.String_String$fromCharCodes(t1, 0, null);
    }
  };
  A._Base64Encoder.prototype = {
    createBuffer$1(bufferLength) {
      return new Uint8Array(bufferLength);
    },
    encode$4(bytes, start, end, isLast) {
      var byteCount, fullChunks, bufferLength, output, _this = this;
      type$.List_int._as(bytes);
      byteCount = (_this._convert$_state & 3) + (end - start);
      fullChunks = B.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (isLast && byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = _this.createBuffer$1(bufferLength);
      _this._convert$_state = A._Base64Encoder_encodeChunk(_this._alphabet, bytes, start, end, isLast, output, 0, _this._convert$_state);
      if (bufferLength > 0)
        return output;
      return null;
    }
  };
  A.Base64Decoder.prototype = {
    convert$1(input) {
      var end, decoder, t1;
      A._asString(input);
      end = A.RangeError_checkValidRange(0, null, input.length);
      if (0 === end)
        return new Uint8Array(0);
      decoder = new A._Base64Decoder();
      t1 = decoder.decode$3(input, 0, end);
      t1.toString;
      decoder.close$2(input, end);
      return t1;
    }
  };
  A._Base64Decoder.prototype = {
    decode$3(input, start, end) {
      var buffer, _this = this,
        t1 = _this._convert$_state;
      if (t1 < 0) {
        _this._convert$_state = A._Base64Decoder__checkPadding(input, start, end, t1);
        return null;
      }
      if (start === end)
        return new Uint8Array(0);
      buffer = A._Base64Decoder__allocateBuffer(input, start, end, t1);
      _this._convert$_state = A._Base64Decoder_decodeChunk(input, start, end, buffer, 0, _this._convert$_state);
      return buffer;
    },
    close$2(input, end) {
      var t1 = this._convert$_state;
      if (t1 < -1)
        throw A.wrapException(A.FormatException$("Missing padding character", input, end));
      if (t1 > 0)
        throw A.wrapException(A.FormatException$("Invalid length, must be multiple of four", input, end));
      this._convert$_state = -1;
    }
  };
  A.ByteConversionSink.prototype = {};
  A._ByteCallbackSink.prototype = {
    add$1(_, chunk) {
      var t1, t2, t3, v, grown, _this = this;
      type$.Iterable_int._as(chunk);
      t1 = _this._convert$_buffer;
      t2 = _this._bufferIndex;
      t3 = J.getInterceptor$asx(chunk);
      if (t3.get$length(chunk) > t1.length - t2) {
        t1 = _this._convert$_buffer;
        v = t3.get$length(chunk) + t1.length - 1;
        v |= B.JSInt_methods._shrOtherPositive$1(v, 1);
        v |= v >>> 2;
        v |= v >>> 4;
        v |= v >>> 8;
        grown = new Uint8Array((((v | v >>> 16) >>> 0) + 1) * 2);
        t1 = _this._convert$_buffer;
        B.NativeUint8List_methods.setRange$3(grown, 0, t1.length, t1);
        _this.set$_convert$_buffer(grown);
      }
      t1 = _this._convert$_buffer;
      t2 = _this._bufferIndex;
      B.NativeUint8List_methods.setRange$3(t1, t2, t2 + t3.get$length(chunk), chunk);
      _this._bufferIndex = _this._bufferIndex + t3.get$length(chunk);
    },
    close$0() {
      this._callback.call$1(B.NativeUint8List_methods.sublist$2(this._convert$_buffer, 0, this._bufferIndex));
    },
    set$_convert$_buffer(_buffer) {
      this._convert$_buffer = type$.List_int._as(_buffer);
    }
  };
  A.Codec.prototype = {};
  A.Converter.prototype = {$isStreamTransformer: 1};
  A.Encoding.prototype = {};
  A.JsonUnsupportedObjectError.prototype = {
    toString$0(_) {
      var safeString = A.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  A.JsonCyclicError.prototype = {
    toString$0(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  A.JsonCodec.prototype = {
    decode$2$reviver(source, reviver) {
      var t1 = A._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    encode$2$toEncodable(value, toEncodable) {
      var t1;
      type$.nullable_nullable_Object_Function_dynamic._as(toEncodable);
      if (toEncodable == null)
        toEncodable = null;
      if (toEncodable == null) {
        t1 = this.get$encoder();
        return A._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
      }
      return A._JsonStringStringifier_stringify(value, toEncodable, null);
    },
    get$encoder() {
      return B.JsonEncoder_null_null;
    },
    get$decoder() {
      return B.JsonDecoder_null;
    }
  };
  A.JsonEncoder.prototype = {};
  A.JsonDecoder.prototype = {};
  A._JsonStringifier.prototype = {
    writeStringContent$1(s) {
      var offset, i, charCode, t1, t2, _this = this,
        $length = s.length;
      for (offset = 0, i = 0; i < $length; ++i) {
        charCode = s.charCodeAt(i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t1 = charCode & 64512;
            if (t1 === 55296) {
              t2 = i + 1;
              t2 = !(t2 < $length && (s.charCodeAt(t2) & 64512) === 56320);
            } else
              t2 = false;
            if (!t2)
              if (t1 === 56320) {
                t1 = i - 1;
                t1 = !(t1 >= 0 && (s.charCodeAt(t1) & 64512) === 55296);
              } else
                t1 = false;
            else
              t1 = true;
            if (t1) {
              if (i > offset)
                _this.writeStringSlice$3(s, offset, i);
              offset = i + 1;
              _this.writeCharCode$1(92);
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(100);
              t1 = charCode >>> 8 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          switch (charCode) {
            case 8:
              _this.writeCharCode$1(98);
              break;
            case 9:
              _this.writeCharCode$1(116);
              break;
            case 10:
              _this.writeCharCode$1(110);
              break;
            case 12:
              _this.writeCharCode$1(102);
              break;
            case 13:
              _this.writeCharCode$1(114);
              break;
            default:
              _this.writeCharCode$1(117);
              _this.writeCharCode$1(48);
              _this.writeCharCode$1(48);
              t1 = charCode >>> 4 & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              t1 = charCode & 15;
              _this.writeCharCode$1(t1 < 10 ? 48 + t1 : 87 + t1);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            _this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          _this.writeCharCode$1(92);
          _this.writeCharCode$1(charCode);
        }
      }
      if (offset === 0)
        _this.writeString$1(s);
      else if (offset < $length)
        _this.writeStringSlice$3(s, offset, $length);
    },
    _checkCycle$1(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw A.wrapException(new A.JsonCyclicError(object, null));
      }
      B.JSArray_methods.add$1(t1, object);
    },
    writeObject$1(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = A.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw A.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw A.wrapException(t1);
      }
    },
    writeJsonValue$1(object) {
      var t1, success, _this = this;
      if (typeof object == "number") {
        if (!isFinite(object))
          return false;
        _this.writeNumber$1(object);
        return true;
      } else if (object === true) {
        _this.writeString$1("true");
        return true;
      } else if (object === false) {
        _this.writeString$1("false");
        return true;
      } else if (object == null) {
        _this.writeString$1("null");
        return true;
      } else if (typeof object == "string") {
        _this.writeString$1('"');
        _this.writeStringContent$1(object);
        _this.writeString$1('"');
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return success;
      } else
        return false;
    },
    writeList$1(list) {
      var t1, i, _this = this;
      _this.writeString$1("[");
      t1 = J.getInterceptor$asx(list);
      if (t1.get$isNotEmpty(list)) {
        _this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          _this.writeString$1(",");
          _this.writeObject$1(t1.$index(list, i));
        }
      }
      _this.writeString$1("]");
    },
    writeMap$1(map) {
      var t1, keyValueList, i, separator, t2, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this.writeString$1("{}");
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = A.List_List$filled(t1, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new A._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      _this.writeString$1("{");
      for (separator = '"'; i < t1; i += 2, separator = ',"') {
        _this.writeString$1(separator);
        _this.writeStringContent$1(A._asString(keyValueList[i]));
        _this.writeString$1('":');
        t2 = i + 1;
        if (!(t2 < t1))
          return A.ioore(keyValueList, t2);
        _this.writeObject$1(keyValueList[t2]);
      }
      _this.writeString$1("}");
      return true;
    }
  };
  A._JsonStringifier_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      B.JSArray_methods.$indexSet(t1, t2.i++, key);
      B.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 77
  };
  A._JsonStringStringifier.prototype = {
    get$_partialResult() {
      var t1 = this._convert$_sink;
      return t1 instanceof A.StringBuffer ? t1.toString$0(0) : null;
    },
    writeNumber$1(number) {
      this._convert$_sink.write$1(B.JSNumber_methods.toString$0(number));
    },
    writeString$1(string) {
      this._convert$_sink.write$1(string);
    },
    writeStringSlice$3(string, start, end) {
      this._convert$_sink.write$1(B.JSString_methods.substring$2(string, start, end));
    },
    writeCharCode$1(charCode) {
      this._convert$_sink.writeCharCode$1(charCode);
    }
  };
  A.Latin1Codec.prototype = {
    get$name() {
      return "iso-8859-1";
    },
    encode$1(source) {
      return B.Latin1Encoder_255.convert$1(source);
    }
  };
  A.Latin1Encoder.prototype = {};
  A.Utf8Codec.prototype = {
    get$name() {
      return "utf-8";
    },
    decode$2$allowMalformed(codeUnits, allowMalformed) {
      type$.List_int._as(codeUnits);
      return (allowMalformed === true ? B.Utf8Decoder_true : B.Utf8Decoder_false).convert$1(codeUnits);
    },
    decode$1(codeUnits) {
      return this.decode$2$allowMalformed(codeUnits, null);
    },
    encode$1(string) {
      return B.C_Utf8Encoder.convert$1(string);
    }
  };
  A.Utf8Encoder.prototype = {
    convert$1(string) {
      var stringLength, end, t1, encoder, t2;
      A._asString(string);
      stringLength = string.length;
      end = A.RangeError_checkValidRange(0, null, stringLength);
      if (end === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array(end * 3);
      encoder = new A._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        t2 = end - 1;
        if (!(t2 >= 0 && t2 < stringLength))
          return A.ioore(string, t2);
        encoder._writeReplacementCharacter$0();
      }
      return B.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    }
  };
  A._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var _this = this,
        t1 = _this._convert$_buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1,
        t4 = t1.length;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      if (!(t3 < t4))
        return A.ioore(t1, t3);
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, t4, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._convert$_buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t4 = t1.length;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, t5, _this = this;
      if (start !== end) {
        t1 = end - 1;
        if (!(t1 >= 0 && t1 < str.length))
          return A.ioore(str, t1);
        t1 = (str.charCodeAt(t1) & 64512) === 55296;
      } else
        t1 = false;
      if (t1)
        --end;
      for (t1 = _this._convert$_buffer, t2 = t1.length, t3 = str.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        if (!(stringIndex < t3))
          return A.ioore(str, stringIndex);
        codeUnit = str.charCodeAt(stringIndex);
        if (codeUnit <= 127) {
          t4 = _this._bufferIndex;
          if (t4 >= t2)
            break;
          _this._bufferIndex = t4 + 1;
          t1[t4] = codeUnit;
        } else {
          t4 = codeUnit & 64512;
          if (t4 === 55296) {
            if (_this._bufferIndex + 4 > t2)
              break;
            t4 = stringIndex + 1;
            if (!(t4 < t3))
              return A.ioore(str, t4);
            if (_this._writeSurrogate$2(codeUnit, str.charCodeAt(t4)))
              stringIndex = t4;
          } else if (t4 === 56320) {
            if (_this._bufferIndex + 3 > t2)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t4 = _this._bufferIndex;
            t5 = t4 + 1;
            if (t5 >= t2)
              break;
            _this._bufferIndex = t5;
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t1[t4] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t5 + 1;
            t1[t5] = codeUnit & 63 | 128;
          } else {
            t4 = _this._bufferIndex;
            if (t4 + 2 >= t2)
              break;
            t5 = _this._bufferIndex = t4 + 1;
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t1[t4] = codeUnit >>> 12 | 224;
            t4 = _this._bufferIndex = t5 + 1;
            if (!(t5 < t2))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t4 + 1;
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t1[t4] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  A.Utf8Decoder.prototype = {
    convert$1(codeUnits) {
      return new A._Utf8Decoder(this._allowMalformed)._convertGeneral$4(type$.List_int._as(codeUnits), 0, null, true);
    }
  };
  A._Utf8Decoder.prototype = {
    _convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var end, casted, bytes, errorOffset, t1, result, message, _this = this;
      type$.List_int._as(codeUnits);
      end = A.RangeError_checkValidRange(start, maybeEnd, J.get$length$asx(codeUnits));
      if (start === end)
        return "";
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        bytes = casted;
        errorOffset = 0;
      } else {
        bytes = A._Utf8Decoder__makeNativeUint8List(codeUnits, start, end);
        end -= start;
        errorOffset = start;
        start = 0;
      }
      if (single && end - start >= 15) {
        t1 = _this.allowMalformed;
        result = A._Utf8Decoder__convertInterceptedUint8List(t1, bytes, start, end);
        if (result != null) {
          if (!t1)
            return result;
          if (result.indexOf("\ufffd") < 0)
            return result;
        }
      }
      result = _this._decodeRecursive$4(bytes, start, end, single);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = A._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw A.wrapException(A.FormatException$(message, codeUnits, errorOffset + _this._charOrIndex));
      }
      return result;
    },
    _decodeRecursive$4(bytes, start, end, single) {
      var mid, s1, _this = this;
      if (end - start > 1000) {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._decodeRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0)
          return s1;
        return s1 + _this._decodeRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    decodeGeneral$4(bytes, start, end, single) {
      var byte, t2, type, t3, i0, markEnd, i1, m, _this = this,
        _s256_ = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE",
        _s144_ = " \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA",
        _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new A.StringBuffer(""),
        i = start + 1,
        t1 = bytes.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(bytes, start);
      byte = bytes[start];
      $label0$0:
        for (t2 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            if (!(byte >= 0 && byte < 256))
              return A.ioore(_s256_, byte);
            type = _s256_.charCodeAt(byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            t3 = state + type;
            if (!(t3 >= 0 && t3 < 144))
              return A.ioore(_s144_, t3);
            state = _s144_.charCodeAt(t3);
            if (state === 0) {
              t3 = A.Primitives_stringFromCharCode(char);
              buffer._contents += t3;
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t2)
                switch (state) {
                  case 69:
                  case 67:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents += t3;
                    break;
                  case 65:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents += t3;
                    --i;
                    break;
                  default:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    t3 = buffer._contents += t3;
                    buffer._contents = t3 + A.Primitives_stringFromCharCode(_65533);
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
              return A.ioore(bytes, i);
            byte = bytes[i];
          }
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(bytes, i);
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              if (!(i0 >= 0 && i0 < t1))
                return A.ioore(bytes, i0);
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m) {
                if (!(m < t1))
                  return A.ioore(bytes, m);
                t3 = A.Primitives_stringFromCharCode(bytes[m]);
                buffer._contents += t3;
              }
            else {
              t3 = A.String_String$fromCharCodes(bytes, i, markEnd);
              buffer._contents += t3;
            }
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t2) {
          t1 = A.Primitives_stringFromCharCode(_65533);
          buffer._contents += t1;
        } else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._BigIntImpl.prototype = {
    $negate(_) {
      var t2, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return _this;
      t2 = !_this._isNegative;
      t3 = _this._digits;
      t1 = A._BigIntImpl__normalize(t1, t3);
      return new A._BigIntImpl(t1 === 0 ? false : t2, t3, t1);
    },
    _dlShift$1(n) {
      var resultUsed, digits, resultDigits, i, t1, t2, t3,
        used = this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + n;
      digits = this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (i = used - 1, t1 = digits.length; i >= 0; --i) {
        t2 = i + n;
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 >= 0 && t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t1 = this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _drShift$1(n) {
      var resultUsed, digits, resultDigits, t1, i, t2, t3, result, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used - n;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, i = n; i < used; ++i) {
        t2 = i - n;
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t2 = _this._isNegative;
      t3 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t3 === 0 ? false : t2, resultDigits, t3);
      if (t2)
        for (i = 0; i < n; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      return result;
    },
    $shl(_, shiftAmount) {
      var t1, digitShift, resultUsed, resultDigits, t2, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      if (B.JSInt_methods.$mod(shiftAmount, 16) === 0)
        return _this._dlShift$1(digitShift);
      resultUsed = t1 + digitShift + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__lsh(_this._digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    $shr(_, shiftAmount) {
      var t1, digitShift, bitShift, resultUsed, digits, resultDigits, t2, result, i, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      bitShift = B.JSInt_methods.$mod(shiftAmount, 16);
      if (bitShift === 0)
        return _this._drShift$1(digitShift);
      resultUsed = t1 - digitShift;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__rsh(digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
      if (t1) {
        t1 = digits.length;
        if (!(digitShift >= 0 && digitShift < t1))
          return A.ioore(digits, digitShift);
        if ((digits[digitShift] & B.JSInt_methods.$shl(1, bitShift) - 1) !== 0)
          return result.$sub(0, $.$get$_BigIntImpl_one());
        for (i = 0; i < digitShift; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      }
      return result;
    },
    compareTo$1(_, other) {
      var t1, result;
      type$._BigIntImpl._as(other);
      t1 = this._isNegative;
      if (t1 === other._isNegative) {
        result = A._BigIntImpl__compareDigits(this._digits, this._used, other._digits, other._used);
        return t1 ? 0 - result : result;
      }
      return t1 ? -1 : 1;
    },
    _absAddSetSign$2(other, isNegative) {
      var resultUsed, resultDigits, t1, _this = this,
        used = _this._used,
        otherUsed = other._used;
      if (used < otherUsed)
        return other._absAddSetSign$2(_this, isNegative);
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultUsed = used + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__absAdd(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absSubSetSign$2(other, isNegative) {
      var otherUsed, resultDigits, t1, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      otherUsed = other._used;
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultDigits = new Uint16Array(used);
      A._BigIntImpl__absSub(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(used, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absAndSetSign$2(other, isNegative) {
      var digits, otherDigits, resultDigits, t1, t2, i, t3, t4,
        resultUsed = this._used,
        resultUsed0 = other._used;
      resultUsed = resultUsed < resultUsed0 ? resultUsed : resultUsed0;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < resultUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 & t4;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absAndNotSetSign$2(other, isNegative) {
      var t1, t2, i, t3, t4,
        resultUsed = this._used,
        digits = this._digits,
        otherDigits = other._digits,
        resultDigits = new Uint16Array(resultUsed),
        m = other._used;
      if (resultUsed < m)
        m = resultUsed;
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < m; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 & ~t4;
      }
      for (i = m; i < resultUsed; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t2 = digits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absOrSetSign$2(other, isNegative) {
      var m, l, t1, t2, i, t3, t4, lDigits,
        used = this._used,
        otherUsed = other._used,
        resultUsed = used > otherUsed ? used : otherUsed,
        digits = this._digits,
        otherDigits = other._digits,
        resultDigits = new Uint16Array(resultUsed);
      if (used < otherUsed) {
        m = used;
        l = other;
      } else {
        m = otherUsed;
        l = this;
      }
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < m; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 | t4;
      }
      lDigits = l._digits;
      for (t1 = lDigits.length, i = m; i < resultUsed; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(lDigits, i);
        t2 = lDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    $and(_, other) {
      var t1, n, p, _this = this;
      if (_this._used === 0 || other._used === 0)
        return $.$get$_BigIntImpl_zero();
      t1 = _this._isNegative;
      if (t1 === other._isNegative) {
        if (t1) {
          t1 = $.$get$_BigIntImpl_one();
          return _this._absSubSetSign$2(t1, true)._absOrSetSign$2(other._absSubSetSign$2(t1, true), true)._absAddSetSign$2(t1, true);
        }
        return _this._absAndSetSign$2(other, false);
      }
      if (t1) {
        n = _this;
        p = other;
      } else {
        n = other;
        p = _this;
      }
      return p._absAndNotSetSign$2(n._absSubSetSign$2($.$get$_BigIntImpl_one(), false), false);
    },
    $or(_, other) {
      var t1, n, p, _this = this;
      if (_this._used === 0)
        return other;
      if (other._used === 0)
        return _this;
      t1 = _this._isNegative;
      if (t1 === other._isNegative) {
        if (t1) {
          t1 = $.$get$_BigIntImpl_one();
          return _this._absSubSetSign$2(t1, true)._absAndSetSign$2(other._absSubSetSign$2(t1, true), true)._absAddSetSign$2(t1, true);
        }
        return _this._absOrSetSign$2(other, false);
      }
      if (t1) {
        n = _this;
        p = other;
      } else {
        n = other;
        p = _this;
      }
      t1 = $.$get$_BigIntImpl_one();
      return n._absSubSetSign$2(t1, true)._absAndNotSetSign$2(p, true)._absAddSetSign$2(t1, true);
    },
    $not(_) {
      var _this = this;
      if (_this._used === 0)
        return $.$get$_BigIntImpl__minusOne();
      if (_this._isNegative)
        return _this._absSubSetSign$2($.$get$_BigIntImpl_one(), false);
      return _this._absAddSetSign$2($.$get$_BigIntImpl_one(), true);
    },
    $add(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other;
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative === other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $sub(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other.$negate(0);
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative !== other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $mul(_, other) {
      var resultUsed, digits, otherDigits, resultDigits, t1, i, t2,
        used = this._used,
        otherUsed = other._used;
      if (used === 0 || otherUsed === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + otherUsed;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (!(i < t1))
          return A.ioore(otherDigits, i);
        A._BigIntImpl__mulAdd(otherDigits[i], digits, 0, resultDigits, i, used);
        ++i;
      }
      t1 = this._isNegative !== other._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _div$1(other) {
      var lastQuo_used, quo_digits, t1, quo;
      if (this._used < other._used)
        return $.$get$_BigIntImpl_zero();
      this._divRem$1(other);
      lastQuo_used = $._BigIntImpl____lastQuoRemUsed._readField$0() - $._BigIntImpl____lastRemUsed._readField$0();
      quo_digits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastQuoRemUsed._readField$0(), lastQuo_used);
      t1 = A._BigIntImpl__normalize(lastQuo_used, quo_digits);
      quo = new A._BigIntImpl(false, quo_digits, t1);
      return this._isNegative !== other._isNegative && t1 > 0 ? quo.$negate(0) : quo;
    },
    _rem$1(other) {
      var remDigits, t1, rem, _this = this;
      if (_this._used < other._used)
        return _this;
      _this._divRem$1(other);
      remDigits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), 0, $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastRemUsed._readField$0());
      t1 = A._BigIntImpl__normalize($._BigIntImpl____lastRemUsed._readField$0(), remDigits);
      rem = new A._BigIntImpl(false, remDigits, t1);
      if ($._BigIntImpl____lastRem_nsh._readField$0() > 0)
        rem = rem.$shr(0, $._BigIntImpl____lastRem_nsh._readField$0());
      return _this._isNegative && rem._used > 0 ? rem.$negate(0) : rem;
    },
    _divRem$1(other) {
      var yDigits, yUsed, t1, nsh, yDigits0, yUsed0, resultDigits, resultUsed0, topDigitDivisor, j, tmpDigits, tmpUsed, resultUsed1, t2, nyDigits, i, estimatedQuotientDigit, _this = this,
        resultUsed = _this._used;
      if (resultUsed === $._BigIntImpl__lastDividendUsed && other._used === $._BigIntImpl__lastDivisorUsed && _this._digits === $._BigIntImpl__lastDividendDigits && other._digits === $._BigIntImpl__lastDivisorDigits)
        return;
      yDigits = other._digits;
      yUsed = other._used;
      t1 = yUsed - 1;
      if (!(t1 >= 0 && t1 < yDigits.length))
        return A.ioore(yDigits, t1);
      nsh = 16 - B.JSInt_methods.get$bitLength(yDigits[t1]);
      if (nsh > 0) {
        yDigits0 = new Uint16Array(yUsed + 5);
        yUsed0 = A._BigIntImpl__lShiftDigits(yDigits, yUsed, nsh, yDigits0);
        resultDigits = new Uint16Array(resultUsed + 5);
        resultUsed0 = A._BigIntImpl__lShiftDigits(_this._digits, resultUsed, nsh, resultDigits);
      } else {
        resultDigits = A._BigIntImpl__cloneDigits(_this._digits, 0, resultUsed, resultUsed + 2);
        yUsed0 = yUsed;
        yDigits0 = yDigits;
        resultUsed0 = resultUsed;
      }
      t1 = yUsed0 - 1;
      if (!(t1 >= 0 && t1 < yDigits0.length))
        return A.ioore(yDigits0, t1);
      topDigitDivisor = yDigits0[t1];
      j = resultUsed0 - yUsed0;
      tmpDigits = new Uint16Array(resultUsed0);
      tmpUsed = A._BigIntImpl__dlShiftDigits(yDigits0, yUsed0, j, tmpDigits);
      resultUsed1 = resultUsed0 + 1;
      t1 = resultDigits.length;
      if (A._BigIntImpl__compareDigits(resultDigits, resultUsed0, tmpDigits, tmpUsed) >= 0) {
        if (!(resultUsed0 >= 0 && resultUsed0 < t1))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 1;
        A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
      } else {
        if (!(resultUsed0 >= 0 && resultUsed0 < t1))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 0;
      }
      t2 = yUsed0 + 2;
      nyDigits = new Uint16Array(t2);
      if (!(yUsed0 >= 0 && yUsed0 < t2))
        return A.ioore(nyDigits, yUsed0);
      nyDigits[yUsed0] = 1;
      A._BigIntImpl__absSub(nyDigits, yUsed0 + 1, yDigits0, yUsed0, nyDigits);
      i = resultUsed0 - 1;
      for (; j > 0;) {
        estimatedQuotientDigit = A._BigIntImpl__estimateQuotientDigit(topDigitDivisor, resultDigits, i);
        --j;
        A._BigIntImpl__mulAdd(estimatedQuotientDigit, nyDigits, 0, resultDigits, j, yUsed0);
        if (!(i >= 0 && i < t1))
          return A.ioore(resultDigits, i);
        if (resultDigits[i] < estimatedQuotientDigit) {
          tmpUsed = A._BigIntImpl__dlShiftDigits(nyDigits, yUsed0, j, tmpDigits);
          A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
          for (; --estimatedQuotientDigit, resultDigits[i] < estimatedQuotientDigit;)
            A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
        }
        --i;
      }
      $._BigIntImpl__lastDividendDigits = _this._digits;
      $._BigIntImpl__lastDividendUsed = resultUsed;
      $._BigIntImpl__lastDivisorDigits = yDigits;
      $._BigIntImpl__lastDivisorUsed = yUsed;
      $._BigIntImpl____lastQuoRemDigits._value = resultDigits;
      $._BigIntImpl____lastQuoRemUsed._value = resultUsed1;
      $._BigIntImpl____lastRemUsed._value = yUsed0;
      $._BigIntImpl____lastRem_nsh._value = nsh;
    },
    get$hashCode(_) {
      var hash, t2, t3, i,
        combine = new A._BigIntImpl_hashCode_combine(),
        t1 = this._used;
      if (t1 === 0)
        return 6707;
      hash = this._isNegative ? 83585 : 429689;
      for (t2 = this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        hash = combine.call$2(hash, t2[i]);
      }
      return new A._BigIntImpl_hashCode_finish().call$1(hash);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._BigIntImpl && this.compareTo$1(0, other) === 0;
    },
    get$bitLength(_) {
      var t2, t3, t4, highBits, $length, i,
        t1 = this._used;
      if (t1 === 0)
        return 0;
      t2 = this._digits;
      t3 = t1 - 1;
      t4 = t2.length;
      if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t2, t3);
      highBits = t2[t3];
      $length = 16 * t3 + B.JSInt_methods.get$bitLength(highBits);
      if (!this._isNegative)
        return $length;
      if ((highBits & highBits - 1) !== 0)
        return $length;
      for (i = t1 - 2; i >= 0; --i) {
        if (!(i < t4))
          return A.ioore(t2, i);
        if (t2[i] !== 0)
          return $length;
      }
      return $length - 1;
    },
    $tdiv(_, other) {
      if (other._used === 0)
        throw A.wrapException(B.C_IntegerDivisionByZeroException);
      return this._div$1(other);
    },
    remainder$1(_, other) {
      if (other._used === 0)
        throw A.wrapException(B.C_IntegerDivisionByZeroException);
      return this._rem$1(other);
    },
    $mod(_, other) {
      var result;
      if (other._used === 0)
        throw A.wrapException(B.C_IntegerDivisionByZeroException);
      result = this._rem$1(other);
      if (result._isNegative)
        result = other._isNegative ? result.$sub(0, other) : result.$add(0, other);
      return result;
    },
    get$isEven(_) {
      var t1;
      if (this._used !== 0) {
        t1 = this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = (t1[0] & 1) === 0;
      } else
        t1 = true;
      return t1;
    },
    pow$1(exponent) {
      var result, base;
      if (exponent === 0)
        return $.$get$_BigIntImpl_one();
      result = $.$get$_BigIntImpl_one();
      for (base = this; exponent !== 0;) {
        if ((exponent & 1) === 1)
          result = result.$mul(0, base);
        exponent = exponent >>> 1;
        if (exponent !== 0)
          base = base.$mul(0, base);
      }
      return result;
    },
    modPow$2(_, exponent, modulus) {
      var modulusUsed, modulusUsed2p4, exponentBitlen, t1, t2, z, resultDigits, result2Digits, gDigits, gUsed, j, i, resultUsed, result2Used, t0;
      if (exponent._isNegative)
        throw A.wrapException(A.ArgumentError$("exponent must be positive: " + exponent.toString$0(0), null));
      if (modulus.compareTo$1(0, $.$get$_BigIntImpl_zero()) <= 0)
        throw A.wrapException(A.ArgumentError$("modulus must be strictly positive: " + modulus.toString$0(0), null));
      if (exponent._used === 0)
        return $.$get$_BigIntImpl_one();
      modulusUsed = modulus._used;
      modulusUsed2p4 = 2 * modulusUsed + 4;
      exponentBitlen = exponent.get$bitLength(0);
      if (exponentBitlen <= 0)
        return $.$get$_BigIntImpl_one();
      t1 = modulus._digits;
      t2 = modulusUsed - 1;
      if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
      z = new A._BigIntClassic(modulus, modulus.$shl(0, 16 - B.JSInt_methods.get$bitLength(t1[t2])));
      resultDigits = new Uint16Array(modulusUsed2p4);
      result2Digits = new Uint16Array(modulusUsed2p4);
      gDigits = new Uint16Array(modulusUsed);
      gUsed = z.convert$2(this, gDigits);
      for (j = gUsed - 1; j >= 0; --j) {
        if (!(j < modulusUsed))
          return A.ioore(gDigits, j);
        t1 = gDigits[j];
        if (!(j < modulusUsed2p4))
          return A.ioore(resultDigits, j);
        resultDigits[j] = t1;
      }
      for (i = exponentBitlen - 2, resultUsed = gUsed; i >= 0; --i) {
        result2Used = z.sqr$3(resultDigits, resultUsed, result2Digits);
        if (exponent.$and(0, $.$get$_BigIntImpl_one().$shl(0, i))._used !== 0)
          resultUsed = z._reduce$2(resultDigits, A._BigIntImpl__mulDigits(result2Digits, result2Used, gDigits, gUsed, resultDigits));
        else {
          resultUsed = result2Used;
          t0 = result2Digits;
          result2Digits = resultDigits;
          resultDigits = t0;
        }
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(false, resultDigits, t1);
    },
    modInverse$1(_, modulus) {
      var t2, _this = this,
        t1 = $.$get$_BigIntImpl_zero();
      if (modulus.compareTo$1(0, t1) <= 0)
        throw A.wrapException(A.ArgumentError$("Modulus must be strictly positive: " + modulus.toString$0(0), null));
      t2 = modulus.compareTo$1(0, $.$get$_BigIntImpl_one());
      if (t2 === 0)
        return t1;
      return A._BigIntImpl__binaryGcd(modulus, _this._isNegative || A._BigIntImpl__compareDigits(_this._digits, _this._used, modulus._digits, modulus._used) >= 0 ? _this.$mod(0, modulus) : _this, true);
    },
    toSigned$1(_, width) {
      var t1 = $.$get$_BigIntImpl_one(),
        signMask = t1.$shl(0, width - 1);
      return this.$and(0, signMask.$sub(0, t1)).$sub(0, this.$and(0, signMask));
    },
    get$isValidInt() {
      var asInt, t1;
      if (this._used <= 3)
        return true;
      asInt = this.toInt$0(0);
      if (!isFinite(asInt))
        return false;
      t1 = this.compareTo$1(0, A._BigIntImpl__BigIntImpl$_fromInt(asInt));
      return t1 === 0;
    },
    toInt$0(_) {
      var i, t1, t2, result;
      for (i = this._used - 1, t1 = this._digits, t2 = t1.length, result = 0; i >= 0; --i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        result = result * 65536 + t1[i];
      }
      return this._isNegative ? -result : result;
    },
    toDouble$0(_) {
      var resultBits, t2, t3, $length, biasedExponent, readBits, i, roundUp, _this = this, _box_0 = {},
        t1 = _this._used;
      if (t1 === 0)
        return 0;
      resultBits = new Uint8Array(8);
      --t1;
      t2 = _this._digits;
      t3 = t2.length;
      if (!(t1 >= 0 && t1 < t3))
        return A.ioore(t2, t1);
      $length = 16 * t1 + B.JSInt_methods.get$bitLength(t2[t1]);
      if ($length > 1024)
        return _this._isNegative ? -1 / 0 : 1 / 0;
      if (_this._isNegative)
        resultBits[7] = 128;
      biasedExponent = $length - 53 + 1075;
      resultBits[6] = (biasedExponent & 15) << 4;
      resultBits[7] = (resultBits[7] | B.JSInt_methods._shrOtherPositive$1(biasedExponent, 4)) >>> 0;
      _box_0.cachedBitsLength = _box_0.cachedBits = 0;
      _box_0.digitIndex = t1;
      readBits = new A._BigIntImpl_toDouble_readBits(_box_0, _this);
      t1 = readBits.call$1(5);
      if (typeof t1 !== "number")
        return t1.$and();
      resultBits[6] = resultBits[6] | t1 & 15;
      for (i = 5; i >= 0; --i)
        B.NativeUint8List_methods.$indexSet(resultBits, i, readBits.call$1(8));
      roundUp = new A._BigIntImpl_toDouble_roundUp(resultBits);
      if (J.$eq$(readBits.call$1(1), 1))
        if ((resultBits[0] & 1) === 1)
          roundUp.call$0();
        else if (_box_0.cachedBits !== 0)
          roundUp.call$0();
        else
          for (i = _box_0.digitIndex; i >= 0; --i) {
            if (!(i < t3))
              return A.ioore(t2, i);
            if (t2[i] !== 0) {
              roundUp.call$0();
              break;
            }
          }
      return B.NativeByteData_methods._getFloat64$2(A.NativeByteData_NativeByteData$view(resultBits.buffer, 0, null), 0, true);
    },
    toString$0(_) {
      var decimalDigitChunks, rest, t2, digits4, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        if (_this._isNegative) {
          t1 = _this._digits;
          if (0 >= t1.length)
            return A.ioore(t1, 0);
          return B.JSInt_methods.toString$0(-t1[0]);
        }
        t1 = _this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        return B.JSInt_methods.toString$0(t1[0]);
      }
      decimalDigitChunks = A._setArrayType([], type$.JSArray_String);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (; rest._used > 1;) {
        t2 = $.$get$_BigIntImpl__bigInt10000();
        if (t2._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        digits4 = rest._rem$1(t2).toString$0(0);
        B.JSArray_methods.add$1(decimalDigitChunks, digits4);
        t3 = digits4.length;
        if (t3 === 1)
          B.JSArray_methods.add$1(decimalDigitChunks, "000");
        if (t3 === 2)
          B.JSArray_methods.add$1(decimalDigitChunks, "00");
        if (t3 === 3)
          B.JSArray_methods.add$1(decimalDigitChunks, "0");
        rest = rest._div$1(t2);
      }
      t2 = rest._digits;
      if (0 >= t2.length)
        return A.ioore(t2, 0);
      B.JSArray_methods.add$1(decimalDigitChunks, B.JSInt_methods.toString$0(t2[0]));
      if (t1)
        B.JSArray_methods.add$1(decimalDigitChunks, "-");
      return new A.ReversedListIterable(decimalDigitChunks, type$.ReversedListIterable_String).join$0(0);
    },
    _toRadixCodeUnit$1(digit) {
      if (digit < 10)
        return 48 + digit;
      return 97 + digit - 10;
    },
    toRadixString$1(_, radix) {
      var t1, digitString, base, reversedDigitCodeUnits, rest, t2, digit, _this = this;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, null, null));
      t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        t1 = _this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        digitString = B.JSInt_methods.toRadixString$1(t1[0], radix);
        if (_this._isNegative)
          return "-" + digitString;
        return digitString;
      }
      if (radix === 16)
        return _this._toHexString$0();
      base = A._BigIntImpl__BigIntImpl$_fromInt(radix);
      reversedDigitCodeUnits = A._setArrayType([], type$.JSArray_int);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (t2 = base._used === 0; rest._used !== 0;) {
        if (t2)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        digit = rest._rem$1(base).toInt$0(0);
        rest = rest._div$1(base);
        B.JSArray_methods.add$1(reversedDigitCodeUnits, _this._toRadixCodeUnit$1(digit));
      }
      digitString = A.String_String$fromCharCodes(new A.ReversedListIterable(reversedDigitCodeUnits, type$.ReversedListIterable_int), 0, null);
      if (t1)
        return "-" + digitString;
      return digitString;
    },
    _toHexString$0() {
      var t1, t2, t3, i, chunk, j, msbChunk, _this = this,
        chars = A._setArrayType([], type$.JSArray_int);
      for (t1 = _this._used - 1, t2 = _this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        chunk = t2[i];
        for (j = 0; j < 4; ++j) {
          B.JSArray_methods.add$1(chars, _this._toRadixCodeUnit$1(chunk & 15));
          chunk = chunk >>> 4;
        }
      }
      if (!(t1 >= 0 && t1 < t3))
        return A.ioore(t2, t1);
      msbChunk = t2[t1];
      for (; msbChunk !== 0;) {
        B.JSArray_methods.add$1(chars, _this._toRadixCodeUnit$1(msbChunk & 15));
        msbChunk = msbChunk >>> 4;
      }
      if (_this._isNegative)
        B.JSArray_methods.add$1(chars, 45);
      return A.String_String$fromCharCodes(new A.ReversedListIterable(chars, type$.ReversedListIterable_int), 0, null);
    },
    $isBigInt: 1,
    $isComparable: 1
  };
  A._BigIntImpl_hashCode_combine.prototype = {
    call$2(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    $signature: 15
  };
  A._BigIntImpl_hashCode_finish.prototype = {
    call$1(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    $signature: 20
  };
  A._BigIntImpl_toDouble_readBits.prototype = {
    call$1(n) {
      var t1, t2, t3, t4, t5, nextDigit, nextDigitLength, result;
      for (t1 = this._box_0, t2 = this.$this, t3 = t2._used - 1, t2 = t2._digits, t4 = t2.length; t5 = t1.cachedBitsLength, t5 < n;) {
        t5 = t1.digitIndex;
        if (t5 < 0) {
          t1.digitIndex = t5 - 1;
          nextDigit = 0;
          nextDigitLength = 16;
        } else {
          if (!(t5 < t4))
            return A.ioore(t2, t5);
          nextDigit = t2[t5];
          nextDigitLength = t5 === t3 ? B.JSInt_methods.get$bitLength(nextDigit) : 16;
          --t1.digitIndex;
        }
        t1.cachedBits = B.JSInt_methods.$shl(t1.cachedBits, nextDigitLength) + nextDigit;
        t1.cachedBitsLength += nextDigitLength;
      }
      t2 = t1.cachedBits;
      t5 -= n;
      result = B.JSInt_methods.$shr(t2, t5);
      t1.cachedBits = t2 - B.JSInt_methods.$shl(result, t5);
      t1.cachedBitsLength = t5;
      return result;
    },
    $signature: 20
  };
  A._BigIntImpl_toDouble_roundUp.prototype = {
    call$0() {
      var t1, carry, i, sum;
      for (t1 = this.resultBits, carry = 1, i = 0; i < 8; ++i) {
        if (carry === 0)
          break;
        sum = t1[i] + carry;
        t1[i] = sum & 255;
        carry = sum >>> 8;
      }
    },
    $signature: 0
  };
  A._BigIntClassic.prototype = {
    convert$2(x, resultDigits) {
      var t2, remainder, used, digits, i, t3,
        t1 = x._isNegative;
      if (!t1) {
        t2 = this._modulus;
        t2 = A._BigIntImpl__compareDigits(x._digits, x._used, t2._digits, t2._used) >= 0;
      } else
        t2 = true;
      if (t2) {
        t2 = this._modulus;
        remainder = x._rem$1(t2);
        if (t1 && remainder._used > 0)
          remainder = remainder.$add(0, t2);
        used = remainder._used;
        digits = remainder._digits;
      } else {
        used = x._used;
        digits = x._digits;
      }
      for (t1 = digits.length, t2 = resultDigits.length, i = used; --i, i >= 0;) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3;
      }
      return used;
    },
    _reduce$2(xDigits, xUsed) {
      var t1;
      if (xUsed < this._modulus._used)
        return xUsed;
      t1 = A._BigIntImpl__normalize(xUsed, xDigits);
      return this.convert$2(new A._BigIntImpl(false, xDigits, t1)._rem$1(this._normalizedModulus), xDigits);
    },
    sqr$3(xDigits, xUsed, resultDigits) {
      var i, t2, t3, i0, t4,
        t1 = A._BigIntImpl__normalize(xUsed, xDigits),
        b = new A._BigIntImpl(false, xDigits, t1),
        b2 = b.$mul(0, b);
      for (i = b2._used, t1 = b2._digits, t2 = t1.length, t3 = resultDigits.length, i0 = 0; i0 < i; ++i0) {
        if (!(i0 < t2))
          return A.ioore(t1, i0);
        t4 = t1[i0];
        if (!(i0 < t3))
          return A.ioore(resultDigits, i0);
        resultDigits[i0] = t4;
      }
      for (t1 = 2 * xUsed; i < t1; ++i) {
        if (!(i >= 0 && i < t3))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return this._reduce$2(resultDigits, t1);
    }
  };
  A._Uri__makeQueryFromParameters_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      A._asString(key);
      if (typeof value == "string")
        this.params.set(key, value);
      else if (value == null)
        this.params.set(key, "");
      else
        for (t1 = J.get$iterator$ax(type$.Iterable_dynamic._as(value)), t2 = this.params; t1.moveNext$0();) {
          value = t1.get$current();
          if (typeof value == "string")
            t2.append(key, value);
          else if (value == null)
            t2.append(key, "");
          else
            A._asStringQ(value);
        }
    },
    $signature: 70
  };
  A.DateTime.prototype = {
    get$timeZoneOffset() {
      if (this.isUtc)
        return B.Duration_0;
      return A.Duration$(0, 0, 0 - A.Primitives_lazyAsJsDate(this).getTimezoneOffset());
    },
    difference$1(other) {
      return A.Duration$(this._microsecond - other._microsecond, this._core$_value - other._core$_value, 0);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DateTime && this._core$_value === other._core$_value && this._microsecond === other._microsecond && this.isUtc === other.isUtc;
    },
    get$hashCode(_) {
      return A.Object_hash(this._core$_value, this._microsecond, B.C_SentinelValue, B.C_SentinelValue);
    },
    compareTo$1(_, other) {
      var r;
      type$.DateTime._as(other);
      r = B.JSInt_methods.compareTo$1(this._core$_value, other._core$_value);
      if (r !== 0)
        return r;
      return B.JSInt_methods.compareTo$1(this._microsecond, other._microsecond);
    },
    toLocal$0() {
      var _this = this;
      if (_this.isUtc)
        return new A.DateTime(_this._core$_value, _this._microsecond, false);
      return _this;
    },
    toUtc$0() {
      var _this = this;
      if (_this.isUtc)
        return _this;
      return new A.DateTime(_this._core$_value, _this._microsecond, true);
    },
    toString$0(_) {
      var _this = this,
        y = A.DateTime__fourDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this)),
        t1 = _this._microsecond,
        us = t1 === 0 ? "" : A.DateTime__threeDigits(t1);
      t1 = y + "-" + m;
      if (_this.isUtc)
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us + "Z";
      else
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us;
    },
    toIso8601String$0() {
      var _this = this,
        y = A.Primitives_getYear(_this) >= -9999 && A.Primitives_getYear(_this) <= 9999 ? A.DateTime__fourDigits(A.Primitives_getYear(_this)) : A.DateTime__sixDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this)),
        t1 = _this._microsecond,
        us = t1 === 0 ? "" : A.DateTime__threeDigits(t1);
      t1 = y + "-" + m;
      if (_this.isUtc)
        return t1 + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms + us + "Z";
      else
        return t1 + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms + us;
    },
    $isComparable: 1
  };
  A.DateTime_parse_parseIntOrZero.prototype = {
    call$1(matched) {
      if (matched == null)
        return 0;
      return A.int_parse(matched, null);
    },
    $signature: 72
  };
  A.DateTime_parse_parseMilliAndMicroseconds.prototype = {
    call$1(matched) {
      var t1, result, i;
      if (matched == null)
        return 0;
      for (t1 = matched.length, result = 0, i = 0; i < 6; ++i) {
        result *= 10;
        if (i < t1) {
          if (!(i < t1))
            return A.ioore(matched, i);
          result += matched.charCodeAt(i) ^ 48;
        }
      }
      return result;
    },
    $signature: 72
  };
  A.Duration.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && this._duration === other._duration;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._duration, type$.Duration._as(other)._duration);
    },
    toString$0(_) {
      var sign, minutes, minutesPadding, seconds, secondsPadding,
        microseconds = this._duration,
        hours = B.JSInt_methods._tdivFast$1(microseconds, 3600000000),
        microseconds0 = microseconds % 3600000000;
      if (microseconds < 0) {
        hours = 0 - hours;
        microseconds = 0 - microseconds0;
        sign = "-";
      } else {
        microseconds = microseconds0;
        sign = "";
      }
      minutes = B.JSInt_methods._tdivFast$1(microseconds, 60000000);
      microseconds %= 60000000;
      minutesPadding = minutes < 10 ? "0" : "";
      seconds = B.JSInt_methods._tdivFast$1(microseconds, 1000000);
      secondsPadding = seconds < 10 ? "0" : "";
      return sign + hours + ":" + minutesPadding + minutes + ":" + secondsPadding + seconds + "." + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(microseconds % 1000000), 6, "0");
    },
    $isComparable: 1
  };
  A._Enum.prototype = {
    toString$0(_) {
      return this._enumToString$0();
    }
  };
  A.Error.prototype = {
    get$stackTrace() {
      return A.Primitives_extractStackTrace(this);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue());
    },
    get$invalidValue() {
      return this.invalidValue;
    }
  };
  A.RangeError.prototype = {
    get$invalidValue() {
      return A._asNumQ(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$invalidValue() {
      return A._asInt(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      var message = this.message;
      return message != null ? "UnimplementedError: " + message : "UnimplementedError";
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    },
    $isException: 1
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var t1, lineEnd, lineNum, lineStart, previousCharWasCR, i, char, prefix, postfix, end, start,
        message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = B.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineEnd = source.length, lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          if (!(i < lineEnd))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        for (i = offset; i < lineEnd; ++i) {
          if (!(i >= 0))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        prefix = "";
        if (lineEnd - lineStart > 78) {
          postfix = "...";
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
            }
            prefix = "...";
          }
        } else {
          end = lineEnd;
          start = lineStart;
          postfix = "";
        }
        return report + prefix + B.JSString_methods.substring$2(source, start, end) + postfix + "\n" + B.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + A.S(offset) + ")") : report;
    },
    $isException: 1,
    get$message() {
      return this.message;
    },
    get$source() {
      return this.source;
    },
    get$offset() {
      return this.offset;
    }
  };
  A.IntegerDivisionByZeroException.prototype = {
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      return "IntegerDivisionByZeroException";
    },
    $isError: 1,
    $isException: 1
  };
  A.Iterable.prototype = {
    cast$1$0(_, $R) {
      return A.CastIterable_CastIterable(this, A._instanceType(this)._eval$1("Iterable.E"), $R);
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(this, t1._bind$1($T)._eval$1("1(Iterable.E)")._as(toElement), t1._eval$1("Iterable.E"), $T);
    },
    where$1(_, test) {
      var t1 = A._instanceType(this);
      return new A.WhereIterable(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("WhereIterable<Iterable.E>"));
    },
    contains$1(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(), element))
          return true;
      return false;
    },
    fold$1$2(_, initialValue, combine, $T) {
      var t1, value;
      $T._as(initialValue);
      A._instanceType(this)._bind$1($T)._eval$1("1(1,Iterable.E)")._as(combine);
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    join$1(_, separator) {
      var first, t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      first = J.toString$0$(iterator.get$current());
      if (!iterator.moveNext$0())
        return first;
      if (separator.length === 0) {
        t1 = first;
        do
          t1 += J.toString$0$(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        t1 = first;
        do
          t1 = t1 + separator + J.toString$0$(iterator.get$current());
        while (iterator.moveNext$0());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    any$1(_, test) {
      var t1;
      A._instanceType(this)._eval$1("bool(Iterable.E)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (test.call$1(t1.get$current()))
          return true;
      return false;
    },
    toList$1$growable(_, growable) {
      return A.List_List$of(this, growable, A._instanceType(this)._eval$1("Iterable.E"));
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty(_) {
      return !this.get$isEmpty(this);
    },
    take$1(_, count) {
      return A.TakeIterable_TakeIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    skip$1(_, count) {
      return A.SkipIterable_SkipIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    firstWhere$2$orElse(_, test, orElse) {
      var t1, element;
      A._instanceType(this)._eval$1("bool(Iterable.E)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();) {
        element = t1.get$current();
        if (A.boolConversionCheck(test.call$1(element)))
          return element;
      }
      throw A.wrapException(A.IterableElementError_noElement());
    },
    firstWhere$1(_, test) {
      return this.firstWhere$2$orElse(0, test, null);
    },
    elementAt$1(_, index) {
      var iterator, skipCount;
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(this);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0)
          return iterator.get$current();
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, null, "index"));
    },
    toString$0(_) {
      return A.Iterable_iterableToShortString(this, "(", ")");
    }
  };
  A.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    },
    get$value() {
      return this.value;
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, 0);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    get$runtimeType(_) {
      return A.getRuntimeTypeOfDartObject(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return "";
    },
    $isStackTrace: 1
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    write$1(obj) {
      var t1 = A.S(obj);
      this._contents += t1;
    },
    writeCharCode$1(charCode) {
      var t1 = A.Primitives_stringFromCharCode(charCode);
      this._contents += t1;
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  A.Uri__parseIPv4Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 147
  };
  A.Uri_parseIPv6Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    $signature: 155
  };
  A.Uri_parseIPv6Address_parseHex.prototype = {
    call$2(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = A.int_parse(B.JSString_methods.substring$2(this.host, start, end), 16);
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 15
  };
  A._Uri.prototype = {
    get$_text() {
      var t1, t2, t3, t4, _this = this,
        value = _this.___Uri__text_FI;
      if (value === $) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? "" + t1 + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._port;
          if (t2 != null)
            t1 = t1 + ":" + A.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        value !== $ && A.throwLateFieldADI("_text");
        value = _this.___Uri__text_FI = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return value;
    },
    get$pathSegments() {
      var pathToSplit, t1, result, _this = this,
        value = _this.___Uri_pathSegments_FI;
      if (value === $) {
        pathToSplit = _this.path;
        t1 = pathToSplit.length;
        if (t1 !== 0) {
          if (0 >= t1)
            return A.ioore(pathToSplit, 0);
          t1 = pathToSplit.charCodeAt(0) === 47;
        } else
          t1 = false;
        if (t1)
          pathToSplit = B.JSString_methods.substring$1(pathToSplit, 1);
        result = pathToSplit.length === 0 ? B.List_empty3 : A.List_List$unmodifiable(new A.MappedListIterable(A._setArrayType(pathToSplit.split("/"), type$.JSArray_String), type$.dynamic_Function_String._as(A.core_Uri_decodeComponent$closure()), type$.MappedListIterable_String_dynamic), type$.String);
        _this.___Uri_pathSegments_FI !== $ && A.throwLateFieldADI("pathSegments");
        _this.set$___Uri_pathSegments_FI(result);
        value = result;
      }
      return value;
    },
    get$hashCode(_) {
      var result, _this = this,
        value = _this.___Uri_hashCode_FI;
      if (value === $) {
        result = B.JSString_methods.get$hashCode(_this.get$_text());
        _this.___Uri_hashCode_FI !== $ && A.throwLateFieldADI("hashCode");
        _this.___Uri_hashCode_FI = result;
        value = result;
      }
      return value;
    },
    get$userInfo() {
      return this._userInfo;
    },
    get$host() {
      var host = this._host;
      if (host == null)
        return "";
      if (B.JSString_methods.startsWith$1(host, "["))
        return B.JSString_methods.substring$2(host, 1, host.length - 1);
      return host;
    },
    get$port() {
      var t1 = this._port;
      return t1 == null ? A._Uri__defaultPort(this.scheme) : t1;
    },
    get$query() {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    isScheme$1(scheme) {
      var thisScheme = this.scheme;
      if (scheme.length !== thisScheme.length)
        return false;
      return A._caseInsensitiveCompareStart(scheme, thisScheme, 0) >= 0;
    },
    replace$3$path$queryParameters$scheme(path, queryParameters, scheme) {
      var scheme0, schemeChanged, isFile, userInfo, port, host, hasAuthority, t1, currentPath, query, _this = this;
      type$.nullable_Map_String_dynamic._as(queryParameters);
      scheme0 = _this.scheme;
      if (scheme != null) {
        scheme = A._Uri__makeScheme(scheme, 0, scheme.length);
        schemeChanged = scheme !== scheme0;
      } else {
        scheme = scheme0;
        schemeChanged = false;
      }
      isFile = scheme === "file";
      userInfo = _this._userInfo;
      port = _this._port;
      if (schemeChanged)
        port = A._Uri__makePort(port, scheme);
      host = _this._host;
      if (!(host != null))
        host = userInfo.length !== 0 || port != null || isFile ? "" : null;
      hasAuthority = host != null;
      if (path != null) {
        t1 = path.length;
        path = A._Uri__makePath(path, 0, t1, null, scheme, hasAuthority);
      } else {
        currentPath = _this.path;
        if (!isFile)
          t1 = hasAuthority && currentPath.length !== 0;
        else
          t1 = true;
        if (t1 && !B.JSString_methods.startsWith$1(currentPath, "/"))
          currentPath = "/" + currentPath;
        path = currentPath;
      }
      if (queryParameters != null)
        query = A._Uri__makeQuery(null, 0, 0, queryParameters);
      else
        query = _this._query;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, _this._fragment);
    },
    replace$1$scheme(scheme) {
      return this.replace$3$path$queryParameters$scheme(null, null, scheme);
    },
    replace$1$path(path) {
      return this.replace$3$path$queryParameters$scheme(path, null, null);
    },
    replace$1$queryParameters(queryParameters) {
      return this.replace$3$path$queryParameters$scheme(null, queryParameters, null);
    },
    _mergePaths$2(base, reference) {
      var backCount, refStart, baseEnd, t1, newEnd, delta, t2, t3, t4;
      for (backCount = 0, refStart = 0; B.JSString_methods.startsWith$2(reference, "../", refStart);) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = B.JSString_methods.lastIndexOf$1(base, "/");
      t1 = base.length;
      while (true) {
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = B.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t2 = delta !== 2;
        t3 = false;
        if (!t2 || delta === 3) {
          t4 = newEnd + 1;
          if (!(t4 < t1))
            return A.ioore(base, t4);
          if (base.charCodeAt(t4) === 46)
            if (t2) {
              t2 = newEnd + 2;
              if (!(t2 < t1))
                return A.ioore(base, t2);
              t2 = base.charCodeAt(t2) === 46;
            } else
              t2 = true;
          else
            t2 = t3;
        } else
          t2 = t3;
        if (t2)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return B.JSString_methods.replaceRange$3(base, baseEnd + 1, null, B.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1(reference) {
      return this.resolveUri$1(A.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      var targetScheme, t1, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, packageNameEnd, packageName, mergedPath, fragment, _this = this;
      if (reference.get$scheme().length !== 0)
        return reference;
      else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          t1 = reference.replace$1$scheme(targetScheme);
          return t1;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._port;
          targetPath = _this.path;
          if (reference.get$hasEmptyPath())
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _this._query;
          else {
            packageNameEnd = A._Uri__packageNameEnd(_this, targetPath);
            if (packageNameEnd > 0) {
              packageName = B.JSString_methods.substring$2(targetPath, 0, packageNameEnd);
              targetPath = reference.get$hasAbsolutePath() ? packageName + A._Uri__removeDotSegments(reference.get$path()) : packageName + A._Uri__removeDotSegments(_this._mergePaths$2(B.JSString_methods.substring$1(targetPath, packageName.length), reference.get$path()));
            } else if (reference.get$hasAbsolutePath())
              targetPath = A._Uri__removeDotSegments(reference.get$path());
            else if (targetPath.length === 0)
              if (targetHost == null)
                targetPath = targetScheme.length === 0 ? reference.get$path() : A._Uri__removeDotSegments(reference.get$path());
              else
                targetPath = A._Uri__removeDotSegments("/" + reference.get$path());
            else {
              mergedPath = _this._mergePaths$2(targetPath, reference.get$path());
              t1 = targetScheme.length === 0;
              if (!t1 || targetHost != null || B.JSString_methods.startsWith$1(targetPath, "/"))
                targetPath = A._Uri__removeDotSegments(mergedPath);
              else
                targetPath = A._Uri__normalizeRelativePath(mergedPath, !t1 || targetHost != null);
            }
            targetQuery = reference.get$hasQuery() ? reference.get$query() : null;
          }
        }
      }
      fragment = reference.get$hasFragment() ? reference.get$fragment() : null;
      return A._Uri$_internal(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, fragment);
    },
    get$hasAuthority() {
      return this._host != null;
    },
    get$hasQuery() {
      return this._query != null;
    },
    get$hasFragment() {
      return this._fragment != null;
    },
    get$hasEmptyPath() {
      return this.path.length === 0;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$1(this.path, "/");
    },
    toFilePath$0() {
      var pathSegments, _this = this,
        t1 = _this.scheme;
      if (t1 !== "" && t1 !== "file")
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + t1 + " URI"));
      t1 = _this._query;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannotfq));
      t1 = _this._fragment;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannotff));
      if (_this._host != null && _this.get$host() !== "")
        A.throwExpression(A.UnsupportedError$(string$.Cannotn));
      pathSegments = _this.get$pathSegments();
      A._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
      t1 = A.StringBuffer__writeAll(B.JSString_methods.startsWith$1(_this.path, "/") ? "" + "/" : "", pathSegments, "/");
      t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
      return t1;
    },
    toString$0(_) {
      return this.get$_text();
    },
    $eq(_, other) {
      var t1, t2, t3, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      t1 = false;
      if (type$.Uri._is(other))
        if (_this.scheme === other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo === other.get$userInfo())
              if (_this.get$host() === other.get$host())
                if (_this.get$port() === other.get$port())
                  if (_this.path === other.get$path()) {
                    t2 = _this._query;
                    t3 = t2 == null;
                    if (!t3 === other.get$hasQuery()) {
                      if (t3)
                        t2 = "";
                      if (t2 === other.get$query()) {
                        t2 = _this._fragment;
                        t3 = t2 == null;
                        if (!t3 === other.get$hasFragment()) {
                          t1 = t3 ? "" : t2;
                          t1 = t1 === other.get$fragment();
                        }
                      }
                    }
                  }
      return t1;
    },
    set$___Uri_pathSegments_FI(___Uri_pathSegments_FI) {
      this.___Uri_pathSegments_FI = type$.List_String._as(___Uri_pathSegments_FI);
    },
    $isUri: 1,
    get$scheme() {
      return this.scheme;
    },
    get$path() {
      return this.path;
    }
  };
  A._Uri__makePath_closure.prototype = {
    call$1(s) {
      return A._Uri__uriEncode(B.List_M2I0, A._asString(s), B.C_Utf8Codec, false);
    },
    $signature: 13
  };
  A._Uri__makeQueryFromParametersDefault_writeParameter.prototype = {
    call$2(key, value) {
      var t1 = this.result,
        t2 = this._box_0;
      t1._contents += t2.separator;
      t2.separator = "&";
      t2 = A._Uri__uriEncode(B.List_piR, key, B.C_Utf8Codec, true);
      t2 = t1._contents += t2;
      if (value != null && value.length !== 0) {
        t1._contents = t2 + "=";
        t2 = A._Uri__uriEncode(B.List_piR, value, B.C_Utf8Codec, true);
        t1._contents += t2;
      }
    },
    $signature: 179
  };
  A._Uri__makeQueryFromParametersDefault_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      A._asString(key);
      if (value == null || typeof value == "string")
        this.writeParameter.call$2(key, A._asStringQ(value));
      else
        for (t1 = J.get$iterator$ax(type$.Iterable_dynamic._as(value)), t2 = this.writeParameter; t1.moveNext$0();)
          t2.call$2(key, A._asString(t1.get$current()));
    },
    $signature: 70
  };
  A.UriData.prototype = {
    get$uri() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 == null) {
        t1 = _this._separatorIndices;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t2 = _this._text;
        t1 = t1[0] + 1;
        queryIndex = B.JSString_methods.indexOf$2(t2, "?", t1);
        end = t2.length;
        if (queryIndex >= 0) {
          query = A._Uri__normalizeOrSubstring(t2, queryIndex + 1, end, B.List_42A, false, false);
          end = queryIndex;
        } else
          query = _null;
        t1 = _this._uriCache = new A._DataUri("data", "", _null, _null, A._Uri__normalizeOrSubstring(t2, t1, end, B.List_M2I, false, false), query, _null);
      }
      return t1;
    },
    toString$0(_) {
      var t2,
        t1 = this._separatorIndices;
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      t2 = this._text;
      return t1[0] === -1 ? "data:" + t2 : t2;
    }
  };
  A._createTables_build.prototype = {
    call$2(state, defaultTransition) {
      var t1 = this.tables;
      if (!(state < t1.length))
        return A.ioore(t1, state);
      t1 = t1[state];
      B.NativeUint8List_methods.fillRange$3(t1, 0, 96, defaultTransition);
      return t1;
    },
    $signature: 189
  };
  A._createTables_setChars.prototype = {
    call$3(target, chars, transition) {
      var t1, i, t2;
      for (t1 = chars.length, i = 0; i < t1; ++i) {
        t2 = chars.charCodeAt(i) ^ 96;
        if (!(t2 < 96))
          return A.ioore(target, t2);
        target[t2] = transition;
      }
    },
    $signature: 90
  };
  A._createTables_setRange.prototype = {
    call$3(target, range, transition) {
      var i, n,
        t1 = range.length;
      if (0 >= t1)
        return A.ioore(range, 0);
      i = range.charCodeAt(0);
      if (1 >= t1)
        return A.ioore(range, 1);
      n = range.charCodeAt(1);
      for (; i <= n; ++i) {
        t1 = (i ^ 96) >>> 0;
        if (!(t1 < 96))
          return A.ioore(target, t1);
        target[t1] = transition;
      }
    },
    $signature: 90
  };
  A._SimpleUri.prototype = {
    get$hasAuthority() {
      return this._hostStart > 0;
    },
    get$hasPort() {
      return this._hostStart > 0 && this._portStart + 1 < this._pathStart;
    },
    get$hasQuery() {
      return this._queryStart < this._fragmentStart;
    },
    get$hasFragment() {
      return this._fragmentStart < this._uri.length;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$2(this._uri, "/", this._pathStart);
    },
    get$hasEmptyPath() {
      return this._pathStart === this._queryStart;
    },
    get$scheme() {
      var t1 = this._schemeCache;
      return t1 == null ? this._schemeCache = this._computeScheme$0() : t1;
    },
    _computeScheme$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = t1 === 4;
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return "http";
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return "https";
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "file"))
        return "file";
      if (t1 === 7 && B.JSString_methods.startsWith$1(_this._uri, "package"))
        return "package";
      return B.JSString_methods.substring$2(_this._uri, 0, t1);
    },
    get$userInfo() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? B.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host() {
      var t1 = this._hostStart;
      return t1 > 0 ? B.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port() {
      var t1, _this = this;
      if (_this.get$hasPort())
        return A.int_parse(B.JSString_methods.substring$2(_this._uri, _this._portStart + 1, _this._pathStart), null);
      t1 = _this._schemeEnd;
      if (t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return 80;
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return 443;
      return 0;
    },
    get$path() {
      return B.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      return t1 < t2 ? B.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? B.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    _isPort$1(port) {
      var portDigitStart = this._portStart + 1;
      return portDigitStart + port.length === this._pathStart && B.JSString_methods.startsWith$2(this._uri, port, portDigitStart);
    },
    removeFragment$0() {
      var _this = this,
        t1 = _this._fragmentStart,
        t2 = _this._uri;
      if (t1 >= t2.length)
        return _this;
      return new A._SimpleUri(B.JSString_methods.substring$2(t2, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    replace$3$path$queryParameters$scheme(path, queryParameters, scheme) {
      var schemeChanged, isFile, t1, userInfo, port, host, hasAuthority, query, t2, fragment, _this = this, _null = null;
      type$.nullable_Map_String_dynamic._as(queryParameters);
      if (scheme != null) {
        scheme = A._Uri__makeScheme(scheme, 0, scheme.length);
        schemeChanged = !(_this._schemeEnd === scheme.length && B.JSString_methods.startsWith$1(_this._uri, scheme));
      } else {
        scheme = _this.get$scheme();
        schemeChanged = false;
      }
      isFile = scheme === "file";
      t1 = _this._hostStart;
      userInfo = t1 > 0 ? B.JSString_methods.substring$2(_this._uri, _this._schemeEnd + 3, t1) : "";
      port = _this.get$hasPort() ? _this.get$port() : _null;
      if (schemeChanged)
        port = A._Uri__makePort(port, scheme);
      t1 = _this._hostStart;
      if (t1 > 0)
        host = B.JSString_methods.substring$2(_this._uri, t1, _this._portStart);
      else
        host = userInfo.length !== 0 || port != null || isFile ? "" : _null;
      hasAuthority = host != null;
      if (path != null) {
        t1 = path.length;
        path = A._Uri__makePath(path, 0, t1, _null, scheme, hasAuthority);
      } else {
        path = B.JSString_methods.substring$2(_this._uri, _this._pathStart, _this._queryStart);
        if (!isFile)
          t1 = hasAuthority && path.length !== 0;
        else
          t1 = true;
        if (t1 && !B.JSString_methods.startsWith$1(path, "/"))
          path = "/" + path;
      }
      if (queryParameters != null)
        query = A._Uri__makeQuery(_null, 0, 0, queryParameters);
      else {
        t1 = _this._queryStart;
        t2 = _this._fragmentStart;
        query = t1 < t2 ? B.JSString_methods.substring$2(_this._uri, t1 + 1, t2) : _null;
      }
      t1 = _this._fragmentStart;
      t2 = _this._uri;
      fragment = t1 < t2.length ? B.JSString_methods.substring$1(t2, t1 + 1) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragment);
    },
    replace$1$scheme(scheme) {
      return this.replace$3$path$queryParameters$scheme(null, null, scheme);
    },
    replace$1$path(path) {
      return this.replace$3$path$queryParameters$scheme(path, null, null);
    },
    replace$1$queryParameters(queryParameters) {
      return this.replace$3$path$queryParameters$scheme(null, queryParameters, null);
    },
    resolve$1(reference) {
      return this.resolveUri$1(A.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      if (reference instanceof A._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2(base, ref) {
      var t2, t3, t4, isSimple, delta, refStart, basePathStart, packageNameEnd, basePathStart0, baseStart, baseEnd, baseUri, baseStart0, backCount, refStart0, insert,
        t1 = ref._schemeEnd;
      if (t1 > 0)
        return ref;
      t2 = ref._hostStart;
      if (t2 > 0) {
        t3 = base._schemeEnd;
        if (t3 <= 0)
          return ref;
        t4 = t3 === 4;
        if (t4 && B.JSString_methods.startsWith$1(base._uri, "file"))
          isSimple = ref._pathStart !== ref._queryStart;
        else if (t4 && B.JSString_methods.startsWith$1(base._uri, "http"))
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !(t3 === 5 && B.JSString_methods.startsWith$1(base._uri, "https")) || !ref._isPort$1("443");
        if (isSimple) {
          delta = t3 + 1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, delta) + B.JSString_methods.substring$1(ref._uri, t1 + 1), t3, t2 + delta, ref._portStart + delta, ref._pathStart + delta, ref._queryStart + delta, ref._fragmentStart + delta, base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      refStart = ref._pathStart;
      t1 = ref._queryStart;
      if (refStart === t1) {
        t2 = ref._fragmentStart;
        if (t1 < t2) {
          t3 = base._queryStart;
          delta = t3 - t1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(ref._uri, t1), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, t1 + delta, t2 + delta, base._schemeCache);
        }
        t1 = ref._uri;
        if (t2 < t1.length) {
          t3 = base._fragmentStart;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(t1, t2), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t2 + (t3 - t2), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      t2 = ref._uri;
      if (B.JSString_methods.startsWith$2(t2, "/", refStart)) {
        basePathStart = base._pathStart;
        packageNameEnd = A._SimpleUri__packageNameEnd(this);
        basePathStart0 = packageNameEnd > 0 ? packageNameEnd : basePathStart;
        delta = basePathStart0 - refStart;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, basePathStart0) + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, basePathStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      if (baseStart === baseEnd && base._hostStart > 0) {
        for (; B.JSString_methods.startsWith$2(t2, "../", refStart);)
          refStart += 3;
        delta = baseStart - refStart + 1;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, baseStart) + "/" + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseUri = base._uri;
      packageNameEnd = A._SimpleUri__packageNameEnd(this);
      if (packageNameEnd >= 0)
        baseStart0 = packageNameEnd;
      else
        for (baseStart0 = baseStart; B.JSString_methods.startsWith$2(baseUri, "../", baseStart0);)
          baseStart0 += 3;
      backCount = 0;
      while (true) {
        refStart0 = refStart + 3;
        if (!(refStart0 <= t1 && B.JSString_methods.startsWith$2(t2, "../", refStart)))
          break;
        ++backCount;
        refStart = refStart0;
      }
      for (t3 = baseUri.length, insert = ""; baseEnd > baseStart0;) {
        --baseEnd;
        if (!(baseEnd >= 0 && baseEnd < t3))
          return A.ioore(baseUri, baseEnd);
        if (baseUri.charCodeAt(baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && base._schemeEnd <= 0 && !B.JSString_methods.startsWith$2(baseUri, "/", baseStart)) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      return new A._SimpleUri(B.JSString_methods.substring$2(baseUri, 0, baseEnd) + insert + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
    },
    toFilePath$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 >= 0) {
        t2 = !(t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "file"));
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + _this.get$scheme() + " URI"));
      t1 = _this._queryStart;
      t2 = _this._uri;
      if (t1 < t2.length) {
        if (t1 < _this._fragmentStart)
          throw A.wrapException(A.UnsupportedError$(string$.Cannotfq));
        throw A.wrapException(A.UnsupportedError$(string$.Cannotff));
      }
      if (_this._hostStart < _this._portStart)
        A.throwExpression(A.UnsupportedError$(string$.Cannotn));
      t1 = B.JSString_methods.substring$2(t2, _this._pathStart, t1);
      return t1;
    },
    get$hashCode(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = B.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return type$.Uri._is(other) && this._uri === other.toString$0(0);
    },
    _toNonSimple$0() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = _this._hostStart > 0 ? _this.get$host() : _null,
        t4 = _this.get$hasPort() ? _this.get$port() : _null,
        t5 = _this._uri,
        t6 = _this._queryStart,
        t7 = B.JSString_methods.substring$2(t5, _this._pathStart, t6),
        t8 = _this._fragmentStart;
      t6 = t6 < t8 ? _this.get$query() : _null;
      return A._Uri$_internal(t1, t2, t3, t4, t7, t6, t8 < t5.length ? _this.get$fragment() : _null);
    },
    toString$0(_) {
      return this._uri;
    },
    $isUri: 1
  };
  A._DataUri.prototype = {};
  A._JSSecureRandom.prototype = {
    _JSSecureRandom$0() {
      var $crypto = self.crypto;
      if ($crypto != null)
        if ($crypto.getRandomValues != null)
          return;
      throw A.wrapException(A.UnsupportedError$("No source of cryptographically secure random numbers available."));
    },
    nextInt$1(max) {
      var byteCount, t1, start, randomLimit, t2, t3, t4, random, result;
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      if (max > 255)
        if (max > 65535)
          byteCount = max > 16777215 ? 4 : 3;
        else
          byteCount = 2;
      else
        byteCount = 1;
      t1 = this._buffer;
      B.NativeByteData_methods._setUint32$3(t1, 0, 0, false);
      start = 4 - byteCount;
      randomLimit = A._asInt(Math.pow(256, byteCount));
      for (t2 = max - 1, t3 = (max & t2) === 0; true;) {
        t4 = t1.buffer;
        t4 = new Uint8Array(t4, start, byteCount);
        crypto.getRandomValues(t4);
        random = B.NativeByteData_methods._getUint32$2(t1, 0, false);
        if (t3)
          return (random & t2) >>> 0;
        result = random % max;
        if (random - result + max < randomLimit)
          return result;
      }
    }
  };
  A.Endian.prototype = {};
  A.FutureGroup.prototype = {
    add$1(_, task) {
      var t1, index, _this = this;
      _this.$ti._eval$1("Future<1>")._as(task);
      if (_this._future_group$_closed)
        throw A.wrapException(A.StateError$("The FutureGroup is closed."));
      t1 = _this._future_group$_values;
      index = t1.length;
      B.JSArray_methods.add$1(t1, null);
      ++_this._future_group$_pending;
      task.then$1$1(new A.FutureGroup_add_closure(_this, index), type$.Null).catchError$1(new A.FutureGroup_add_closure0(_this));
    }
  };
  A.FutureGroup_add_closure.prototype = {
    call$1(value) {
      var t3, t4,
        t1 = this.$this,
        t2 = t1.$ti;
      t2._precomputed1._as(value);
      t3 = t1._completer;
      if ((t3.future._async$_state & 30) !== 0)
        return null;
      --t1._future_group$_pending;
      t4 = t1._future_group$_values;
      B.JSArray_methods.$indexSet(t4, this.index, value);
      if (t1._future_group$_pending !== 0)
        return null;
      if (!t1._future_group$_closed)
        return null;
      t1 = t2._eval$1("WhereTypeIterable<1>");
      t3.complete$1(A.List_List$of(new A.WhereTypeIterable(t4, t1), true, t1._eval$1("Iterable.E")));
    },
    $signature() {
      return this.$this.$ti._eval$1("Null(1)");
    }
  };
  A.FutureGroup_add_closure0.prototype = {
    call$2(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this.$this._completer;
      if ((t1.future._async$_state & 30) !== 0)
        return null;
      t1.completeError$2(error, stackTrace);
    },
    $signature: 41
  };
  A.ErrorResult.prototype = {
    addTo$1(sink) {
      sink.addError$2(this.error, this.stackTrace);
    },
    get$hashCode(_) {
      return (J.get$hashCode$(this.error) ^ A.Primitives_objectHashCode(this.stackTrace) ^ 492929599) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.ErrorResult && J.$eq$(this.error, other.error) && this.stackTrace === other.stackTrace;
    },
    $isResult: 1
  };
  A.ValueResult.prototype = {
    addTo$1(sink) {
      this.$ti._eval$1("EventSink<1>")._as(sink).add$1(0, this.value);
    },
    get$hashCode(_) {
      return (J.get$hashCode$(this.value) ^ 842997089) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.ValueResult && J.$eq$(this.value, other.value);
    },
    $isResult: 1,
    get$value() {
      return this.value;
    }
  };
  A.StreamSplitter.prototype = {
    split$0(_) {
      var t1, t2, _i, _this = this,
        controller = A.StreamController_StreamController(_this.get$_onListen(), _this.get$_stream_splitter$_onPause(), _this.get$_stream_splitter$_onResume(), false, _this.$ti._precomputed1);
      controller.set$onCancel(new A.StreamSplitter_split_closure(_this, controller));
      for (t1 = _this._stream_splitter$_buffer, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].addTo$1(controller);
      if (_this._isDone)
        _this._closeGroup.add$1(0, controller.close$0());
      else
        _this._controllers.add$1(0, controller);
      return new A._ControllerStream(controller, A._instanceType(controller)._eval$1("_ControllerStream<1>"));
    },
    _onListen$0() {
      var t1, _this = this;
      if (_this._isDone)
        return;
      t1 = _this._stream_splitter$_subscription;
      if (t1 != null)
        t1.resume$0();
      else
        _this.set$_stream_splitter$_subscription(_this._stream_splitter$_stream.listen$3$onDone$onError(_this.get$_stream_splitter$_onData(), _this.get$_stream_splitter$_onDone(), _this.get$_stream_splitter$_onError()));
    },
    _stream_splitter$_onPause$0() {
      if (!this._controllers.every$1(0, new A.StreamSplitter__onPause_closure(this)))
        return;
      this._stream_splitter$_subscription.pause$0();
    },
    _stream_splitter$_onResume$0() {
      this._stream_splitter$_subscription.resume$0();
    },
    _stream_splitter$_onCancel$1(controller) {
      var t1 = this._controllers;
      t1.remove$1(0, controller);
      if (t1._collection$_length !== 0)
        return;
      this._stream_splitter$_subscription.pause$0();
    },
    _stream_splitter$_onData$1(data) {
      var t2, t3,
        t1 = this.$ti;
      t1._precomputed1._as(data);
      B.JSArray_methods.add$1(this._stream_splitter$_buffer, new A.ValueResult(data, t1._eval$1("ValueResult<1>")));
      for (t1 = this._controllers, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        t3 = t1._collection$_current;
        (t3 == null ? t2._as(t3) : t3).add$1(0, data);
      }
    },
    _stream_splitter$_onError$2(error, stackTrace) {
      var t1, t2, t3;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      B.JSArray_methods.add$1(this._stream_splitter$_buffer, new A.ErrorResult(error, stackTrace));
      for (t1 = this._controllers, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        t3 = t1._collection$_current;
        (t3 == null ? t2._as(t3) : t3).addError$2(error, stackTrace);
      }
    },
    _stream_splitter$_onDone$0() {
      var t1, t2, t3, t4;
      this._isDone = true;
      for (t1 = this._controllers, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t2 = this._closeGroup, t3 = t1.$ti._precomputed1; t1.moveNext$0();) {
        t4 = t1._collection$_current;
        t2.add$1(0, (t4 == null ? t3._as(t4) : t4).close$0());
      }
    },
    set$_stream_splitter$_subscription(_subscription) {
      this._stream_splitter$_subscription = this.$ti._eval$1("StreamSubscription<1>?")._as(_subscription);
    }
  };
  A.StreamSplitter_split_closure.prototype = {
    call$0() {
      return this.$this._stream_splitter$_onCancel$1(this.controller);
    },
    $signature: 0
  };
  A.StreamSplitter__onPause_closure.prototype = {
    call$1(controller) {
      return this.$this.$ti._eval$1("StreamController<1>")._as(controller).get$isPaused();
    },
    $signature() {
      return this.$this.$ti._eval$1("bool(StreamController<1>)");
    }
  };
  A.BitcoinAddressType.prototype = {
    toString$0(_) {
      return "BitcoinAddressType." + this.value;
    },
    get$value() {
      return this.value;
    }
  };
  A.BitcoinAddressType_fromValue_closure.prototype = {
    call$1(element) {
      return type$.BitcoinAddressType._as(element).value === this.value;
    },
    $signature: 215
  };
  A.BitcoinAddressType_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(new A.DartBitcoinPluginException("Invalid BitcoinAddressType: " + this.value, null));
    },
    $signature: 1
  };
  A.P2pkhAddressType.prototype = {
    toString$0(_) {
      return "P2pkhAddressType." + this.value;
    }
  };
  A.P2shAddressType.prototype = {
    toString$0(_) {
      return "P2shAddressType." + this.value;
    }
  };
  A.SegwitAddressType.prototype = {
    toString$0(_) {
      return "SegwitAddressType." + this.value;
    }
  };
  A.Script.prototype = {
    toString$0(_) {
      return "Script{script: " + B.JSArray_methods.join$1(this.script, ", ") + "}";
    }
  };
  A.DartBitcoinPluginException.prototype = {};
  A._Base32Utils_translateAlphabet_closure.prototype = {
    call$1(unit) {
      return A.Primitives_stringFromCharCode(A._asInt(unit));
    },
    $signature: 122
  };
  A._Base32Utils_translateAlphabet_closure0.prototype = {
    call$1(unit) {
      var index = B.JSString_methods.indexOf$1(this.fromAlphabet, A.Primitives_stringFromCharCode(A._asInt(unit))),
        t1 = this.toAlphabet;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $signature: 122
  };
  A._Base32Utils_translateAlphabet_closure1.prototype = {
    call$1(char) {
      var t1;
      A._asString(char);
      t1 = this.translationMap.$index(0, char);
      return t1 == null ? char : t1;
    },
    $signature: 13
  };
  A._Base32Utils__b32decode_closure.prototype = {
    call$1(char) {
      var t1, symbol, t2, t3, t4;
      A._asString(char);
      if (char === "=")
        return;
      t1 = $._Base32Const__b32rev.$index(0, this.alphabet).$index(0, char);
      if (t1 == null)
        t1 = 0;
      if (typeof t1 !== "number")
        return t1.$and();
      symbol = t1 & 255;
      t1 = this._box_0;
      t2 = t1.shift -= 5;
      if (t2 > 0)
        t1.carry = t1.carry | B.JSInt_methods.$shl(symbol, t2) & 255;
      else {
        t3 = this.decoded;
        t4 = t1.carry;
        if (t2 < 0) {
          B.JSArray_methods.add$1(t3, t4 | B.JSInt_methods._shrReceiverPositive$1(symbol, -t2));
          t2 = t1.shift += 8;
          t1.carry = B.JSInt_methods.$shl(symbol, t2) & 255;
        } else {
          B.JSArray_methods.add$1(t3, t4 | symbol);
          t1.shift = 8;
          t1.carry = 0;
        }
      }
    },
    $signature: 75
  };
  A.Base58Alphabets.prototype = {
    _enumToString$0() {
      return "Base58Alphabets." + this._core$_name;
    }
  };
  A.Base58ChecksumError.prototype = {};
  A.ADAAddressType.prototype = {
    toString$0(_) {
      return "ADAAddressType." + this.name;
    }
  };
  A.ADAAddressType_fromHeader_closure.prototype = {
    call$1(element) {
      return type$.ADAAddressType._as(element).header === this.header;
    },
    $signature: 277
  };
  A.ADAAddressType_fromHeader_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.AddressConverterException_i3y);
    },
    $signature: 1
  };
  A.AdaByronIcarusAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AdaByronLegacyAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AdaShelleyAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.ADANetwork.prototype = {
    toString$0(_) {
      return "ADANetwork." + this.name;
    },
    get$value() {
      return this.value;
    }
  };
  A.AlgoAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AptosAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AtomAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AtomEthSecp256k1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AtomNist256P1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AtomEd25519AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AvaxPChainAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AvaxXChainAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.EgldAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.BlockchainAddressEncoder.prototype = {};
  A.EosAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.ErgoNetworkTypes.prototype = {
    get$value() {
      return this.value;
    }
  };
  A.ErgoP2PKHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.EthAddrUtils__checksumEncode_closure.prototype = {
    call$1(entry) {
      var i, c, t1;
      type$.MapEntry_int_String._as(entry);
      i = entry.key;
      c = entry.value;
      t1 = this.addrHexDigest;
      if (i >>> 0 !== i || i >= t1.length)
        return A.ioore(t1, i);
      return A.int_parse(t1[i], 16) >= 8 ? c.toUpperCase() : c.toLowerCase();
    },
    $signature: 318
  };
  A.EthAddrDecoder.prototype = {
    decodeAddr$2(addr, kwargs) {
      var addrNoPrefix,
        t1 = type$.Map_String_dynamic._as(kwargs).$index(0, "skip_chksum_enc"),
        prefixGot = B.JSString_methods.substring$2(addr, 0, 2);
      if ("0x" !== prefixGot)
        A.throwExpression(A.AddressConverterException$("Invalid prefix (expected 0x, got " + prefixGot + ")", null));
      addrNoPrefix = B.JSString_methods.substring$1(addr, 2);
      A.AddrDecUtils_validateLength(addrNoPrefix, 40);
      if (t1 !== true && addrNoPrefix !== A.EthAddrUtils__checksumEncode(addrNoPrefix))
        throw A.wrapException(B.AddressConverterException_mio);
      return A.BytesUtils_fromHexString(addrNoPrefix);
    }
  };
  A.EthAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AddressConverterException.prototype = {};
  A.FilSecp256k1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.IcxAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.InjAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.NanoAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.NearAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.NeoAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.OkexAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.OneAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.P2PKHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.BchP2PKHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.P2SHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.BchP2SHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.P2TRAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.P2WPKHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SolAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SubstrateEd25519AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SubstrateSr25519AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SubstrateSecp256k1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.TonAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.TrxAddrDecoder.prototype = {
    decodeAddr$1(addr) {
      var addrDec = A.Base58Decoder_checkDecode(addr, B.Base58Alphabets_0),
        tronPrefix = A.BytesUtils_fromHexString("0x41");
      A.AddrDecUtils_validateBytesLength(addrDec, 20 + tronPrefix.length);
      return new A.EthAddrDecoder().decodeAddr$2("0x" + A.BytesUtils_toHexString(A.AddrDecUtils_validateAndRemovePrefixBytes(addrDec, tronPrefix), true, null), A.LinkedHashMap_LinkedHashMap$_literal(["skip_chksum_enc", true], type$.String, type$.dynamic));
    }
  };
  A.TrxAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.XlmAddrTypes.prototype = {
    toString$0(_) {
      return "XlmAddrTypes." + this.name;
    },
    get$value() {
      return this.value;
    }
  };
  A.XlmAddrTypes_fromTag_closure.prototype = {
    call$1(e) {
      return type$.XlmAddrTypes._as(e).value === this.tag;
    },
    $signature: 363
  };
  A.XlmAddrTypes_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.AddressConverterException$("Invalid or unsuported xlm address type.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", B.JSArray_methods.map$1$1(B.List_65k, new A.XlmAddrTypes_fromTag__closure(), type$.int).join$1(0, ", "), "got", this.tag], type$.String, type$.dynamic)));
    },
    $signature: 1
  };
  A.XlmAddrTypes_fromTag__closure.prototype = {
    call$1(e) {
      return type$.XlmAddrTypes._as(e).value;
    },
    $signature: 126
  };
  A.XlmAddrDecoderResult.prototype = {
    toString$0(_) {
      return this.baseAddress;
    }
  };
  A.XlmAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.XmrAddressType.prototype = {
    toString$0(_) {
      return "XmrAddressType." + this.name;
    }
  };
  A.XmrAddressType_fromPrefix_closure.prototype = {
    call$1(e) {
      return B.JSArray_methods.contains$1(type$.XmrAddressType._as(e).prefixes, this.prefix);
    },
    $signature: 136
  };
  A.XmrAddressType_fromPrefix_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.AddressConverterException$("Invalid monero address prefix.", A.LinkedHashMap_LinkedHashMap$_literal(["prefix", this.prefix], type$.String, type$.dynamic)));
    },
    $signature: 1
  };
  A.XmrAddressDecodeResult.prototype = {};
  A.XmrAddrDecoder.prototype = {
    decode$1(addr) {
      return A._XmrAddrUtils_decodeAddress(addr, null, null);
    }
  };
  A.XmrAddrEncoder.prototype = {};
  A.XRPXAddressDecodeResult.prototype = {};
  A.XrpAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.XtzAddrPrefixes.prototype = {
    get$value() {
      return B.List_6_161_159;
    }
  };
  A.XtzAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.ZilAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.Bip32Base.prototype = {
    Bip32Base$fromExtendedKey$2(exKeyStr, keyNetVer) {
      var serKeyBytes, isPublic, t1, depth, fprintBytes, keyIndexBytes, chainCodeBytes, keyBytes, t2, t3, keyData, _this = this, _null = null;
      if (keyNetVer == null)
        keyNetVer = _this.get$defaultKeyNetVersion();
      serKeyBytes = A.Base58Decoder_checkDecode(exKeyStr, B.Base58Alphabets_0);
      isPublic = A.Bip32KeyDeserializer__getIfPublic(serKeyBytes, keyNetVer);
      if (isPublic && serKeyBytes.length !== 78)
        A.throwExpression(A.Bip32KeyError$("Invalid extended public key (wrong length: " + serKeyBytes.length + ")"));
      t1 = !isPublic;
      if (t1 && !B.JSArray_methods.contains$1(B.List_78_110, serKeyBytes.length))
        A.throwExpression(A.Bip32KeyError$("Invalid extended private key (wrong length: " + serKeyBytes.length + ")"));
      if (4 >= serKeyBytes.length)
        return A.ioore(serKeyBytes, 4);
      depth = serKeyBytes[4];
      fprintBytes = B.JSArray_methods.sublist$2(serKeyBytes, 5, 9);
      keyIndexBytes = B.JSArray_methods.sublist$2(serKeyBytes, 9, 13);
      chainCodeBytes = B.JSArray_methods.sublist$2(serKeyBytes, 13, 45);
      keyBytes = B.JSArray_methods.sublist$1(serKeyBytes, 45);
      t2 = A.Bip32Depth$(depth);
      t3 = A.Bip32KeyIndex_Bip32KeyIndex(A.IntUtils_fromBytes(keyIndexBytes, B.C_Endian, false));
      keyData = A.Bip32KeyData$(A.Bip32ChainCode$(chainCodeBytes), t2, t3, A.Bip32FingerPrint_Bip32FingerPrint(fprintBytes));
      if (t1) {
        if (0 >= keyBytes.length)
          return A.ioore(keyBytes, 0);
        if (!J.$eq$(keyBytes[0], 0)) {
          if (0 >= keyBytes.length)
            return A.ioore(keyBytes, 0);
          A.throwExpression(A.Bip32KeyError$("Invalid extended private key (wrong secret: " + A.S(keyBytes[0]) + ")"));
        }
        keyBytes = B.JSArray_methods.sublist$1(keyBytes, 1);
      }
      A.BytesUtils_validateListOfBytes(keyBytes);
      t1 = type$.int;
      keyBytes = A.List_List$from(A.List_List$unmodifiable(keyBytes, t1), true, t1);
      t2 = keyData.depth.__Bip32Depth__depth_F;
      t2 === $ && A.throwLateFieldNI("_depth");
      if (t2 === 0) {
        t2 = keyData.parentFingerPrint;
        if (!A.BytesUtils_bytesEqual(A.List_List$from(t2._fPrint, true, t1), B.List_0_0_0_0))
          throw A.wrapException(A.Bip32KeyError$("Invalid extended master key (wrong fingerprint: " + t2.toHex$0() + ")"));
        t1 = keyData.index.index;
        if (t1 !== 0)
          throw A.wrapException(A.Bip32KeyError$("Invalid extended master key (wrong child index: " + t1 + ")"));
      }
      t1 = isPublic ? _null : keyBytes;
      t2 = isPublic ? keyBytes : _null;
      _this.__Bip32Base__privKey_A = A.Bip32Base__initializePrivateKey(t1, t2, keyData, keyNetVer, _this.get$curveType());
      t1 = isPublic ? _null : keyBytes;
      t2 = isPublic ? keyBytes : _null;
      _this.__Bip32Base__pubKey_A = A.Bip32Base__initializePublicKey(t1, t2, keyData, keyNetVer, _this.get$curveType());
    },
    Bip32Base$fromSeed$2(seedBytes, keyNetVer) {
      var result, keyData, t1, _this = this, _null = null;
      A.BytesUtils_validateListOfBytes(seedBytes);
      seedBytes = A.List_List$unmodifiable(seedBytes, type$.int);
      if (keyNetVer == null)
        keyNetVer = _this.get$defaultKeyNetVersion();
      result = _this.get$masterKeyGenerator().generateFromSeed$1(seedBytes);
      keyData = A.Bip32KeyData$(A.Bip32ChainCode$(result.item2), _null, _null, _null);
      t1 = result.item1;
      _this.__Bip32Base__privKey_A = A.Bip32Base__initializePrivateKey(t1, _null, keyData, keyNetVer, _this.get$curveType());
      _this.__Bip32Base__pubKey_A = A.Bip32Base__initializePublicKey(t1, _null, keyData, keyNetVer, _this.get$curveType());
    },
    Bip32Base$4$keyData$keyNetVer$privKey$pubKey(keyData, keyNetVer, privKey, pubKey) {
      var _this = this;
      _this.__Bip32Base__privKey_A = A.Bip32Base__initializePrivateKey(privKey, pubKey, keyData, keyNetVer, _this.get$curveType());
      _this.__Bip32Base__pubKey_A = A.Bip32Base__initializePublicKey(privKey, pubKey, keyData, keyNetVer, _this.get$curveType());
    },
    derivePath$1(path) {
      var t2, derivedObject, _i,
        pathInstance = A.Bip32PathParser_parse(path),
        t1 = this.__Bip32Base__pubKey_A;
      t1 === $ && A.throwLateFieldNI("_pubKey");
      t1 = t1.keyData.depth.__Bip32Depth__depth_F;
      t1 === $ && A.throwLateFieldNI("_depth");
      if (t1 > 0 && pathInstance.isAbsolute)
        throw A.wrapException(B.ArgumentException_zeT);
      for (t1 = pathInstance.elems, t2 = t1.length, derivedObject = this, _i = 0; _i < t2; ++_i)
        derivedObject = derivedObject.childKey$1(t1[_i]);
      return derivedObject;
    }
  };
  A.IBip32MstKeyGenerator.prototype = {};
  A.Bip32KeyError.prototype = {};
  A.Bip32PathError.prototype = {};
  A.Bip32ChainCode.prototype = {};
  A.Bip32FingerPrint.prototype = {
    toHex$0() {
      return A.BytesUtils_toHexString(this._fPrint, true, null);
    }
  };
  A.Bip32Depth.prototype = {};
  A.Bip32KeyIndex.prototype = {
    toString$0(_) {
      return "index: " + this.index;
    }
  };
  A.Bip32KeyData.prototype = {};
  A.Bip32KeyNetVersions.prototype = {};
  A.Bip32DeserializedKey.prototype = {};
  A.Bip32KeyBase.prototype = {};
  A.Bip32PublicKey.prototype = {
    toHex$0() {
      return this.pubKey.toHex$3$lowerCase$prefix$withPrefix(true, "", true);
    }
  };
  A.Bip32PrivateKey.prototype = {
    toHex$0() {
      return this.privKey.toHex$2$lowerCase$prefix(true, "");
    }
  };
  A.Bip32Path.prototype = {
    length$0(_) {
      return this.elems.length;
    },
    toString$0(_) {
      var t1, t2, _i, t3,
        pathStr = this.isAbsolute ? "m/" : "";
      for (t1 = this.elems, t2 = t1.length, _i = 0; _i < t2; ++_i) {
        t3 = t1[_i].index;
        if ((t3 & 2147483648) >>> 0 === 0)
          pathStr += "" + t3 + "/";
        else
          pathStr += new A.Bip32KeyIndex(t3 & 2147483647).toString$0(0) + "'/";
      }
      return B.JSString_methods.substring$2(pathStr, 0, pathStr.length - 1);
    }
  };
  A.Bip32PathParser_parse_closure.prototype = {
    call$1(elem) {
      return A._asString(elem).length !== 0;
    },
    $signature: 19
  };
  A.Bip32PathParser__parseElem_closure.prototype = {
    call$1(element) {
      A._asString(element);
      return B.JSString_methods.endsWith$1(this._box_0.pathElem, element);
    },
    $signature: 19
  };
  A.Bip32KholawEd25519.prototype = {
    childKey$1(index) {
      var t2, result, _this = this,
        t1 = _this.__Bip32Base__privKey_A;
      t1 === $ && A.throwLateFieldNI("_privKey");
      if (t1 != null) {
        if ((index.index & 2147483648) >>> 0 === 0)
          _this.get$keyDerivator().isPublicDerivationSupported$0();
        t1 = _this.__Bip32Base__privKey_A;
        if (t1 == null)
          A.throwExpression(B.Bip32KeyError_7qd);
        t1.toString;
        t2 = _this.__Bip32Base__pubKey_A;
        t2 === $ && A.throwLateFieldNI("_pubKey");
        result = new A.Bip32KholawEd25519KeyDerivator().ckdPriv$4(t1, t2, index, B.EllipticCurveTypes_ed25519Kholaw);
        t2 = A.Bip32ChainCode$(result.item2);
        t1 = _this.__Bip32Base__pubKey_A.keyData.depth.__Bip32Depth__depth_F;
        t1 === $ && A.throwLateFieldNI("_depth");
        return A.Bip32KholawEd25519$_(A.Bip32KeyData$(t2, A.Bip32Depth$(t1 + 1), index, A.Bip32FingerPrint_Bip32FingerPrint(A.RIPEMD160_hash(A.SHA256_hash(_this.__Bip32Base__pubKey_A.pubKey.get$compressed())))), _this.__Bip32Base__pubKey_A.keyNetVer, result.item1, null);
      }
      _this.get$keyDerivator().isPublicDerivationSupported$0();
      if ((index.index & 2147483648) >>> 0 !== 0)
        throw A.wrapException(B.Bip32KeyError_DpJ);
      t1 = _this.__Bip32Base__pubKey_A;
      t1 === $ && A.throwLateFieldNI("_pubKey");
      result = new A.Bip32KholawEd25519KeyDerivator().ckdPub$3(t1, index, B.EllipticCurveTypes_ed25519Kholaw);
      t1 = A.Bip32ChainCode$(result.item2);
      t2 = _this.__Bip32Base__pubKey_A.keyData.depth.__Bip32Depth__depth_F;
      t2 === $ && A.throwLateFieldNI("_depth");
      return A.Bip32KholawEd25519$_(A.Bip32KeyData$(t1, A.Bip32Depth$(t2 + 1), index, A.Bip32FingerPrint_Bip32FingerPrint(A.RIPEMD160_hash(A.SHA256_hash(_this.__Bip32Base__pubKey_A.pubKey.get$compressed())))), _this.__Bip32Base__pubKey_A.keyNetVer, null, result.item1);
    },
    get$curveType() {
      return B.EllipticCurveTypes_ed25519Kholaw;
    },
    get$defaultKeyNetVersion() {
      return $.$get$Bip32Const_kholawKeyNetVersions();
    },
    get$keyDerivator() {
      return new A.Bip32KholawEd25519KeyDerivator();
    },
    get$masterKeyGenerator() {
      return new A.Bip32KholawEd25519MstKeyGenerator();
    }
  };
  A.Bip32KholawEd25519KeyDerivator.prototype = {
    serializeIndex$1(index) {
      return A.IntUtils_toBytes(index.index, B.C_Endian0, 4);
    },
    newPrivateKeyLeftPart$3(zlBytes, klBytes, curve) {
      var zlInt, klInt, generator, prvlInt,
        t1 = type$.List_int;
      t1._as(zlBytes);
      t1._as(klBytes);
      zlInt = A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(zlBytes, 0, 28), B.C_Endian0, false);
      klInt = A.BigintUtils_fromBytes(klBytes, B.C_Endian0, false);
      generator = type$.EDPoint._as(A.EllipticCurveGetter_generatorFromType(curve));
      prvlInt = zlInt.$mul(0, A._BigIntImpl__BigIntImpl$from(8)).$add(0, klInt);
      t1 = generator.order;
      t1.toString;
      t1 = prvlInt.$mod(0, t1).compareTo$1(0, $.$get$_BigIntImpl_zero());
      if (t1 === 0)
        throw A.wrapException(B.Bip32KeyError_O7U);
      return A.BigintUtils_toBytes(prvlInt, 32, B.C_Endian0);
    },
    newPrivateKeyRightPart$2(zrBytes, krBytes) {
      var t1 = type$.List_int;
      t1._as(zrBytes);
      t1._as(krBytes);
      return A.BigintUtils_toBytes(A.BigintUtils_fromBytes(zrBytes, B.C_Endian0, false).$add(0, A.BigintUtils_fromBytes(krBytes, B.C_Endian0, false)).$mod(0, $.$get$_BigIntImpl_one().$shl(0, 256)), 32, B.C_Endian0);
    },
    newPublicKeyPoint$2(pubKey, zlBytes) {
      var zlInt = A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(type$.List_int._as(zlBytes), 0, 28), B.C_Endian0, false),
        t1 = type$.EDPoint,
        generator = t1._as(A.EllipticCurveGetter_generatorFromType(pubKey.curveType));
      return t1._as(pubKey.pubKey.get$point()).$add(0, generator.$mul(0, zlInt.$mul(0, A._BigIntImpl__BigIntImpl$from(8))));
    }
  };
  A.Bip32KholawEd25519KeyDerivatorBase.prototype = {
    ckdPriv$4(privKey, pubKey, index, type) {
      var t2, zBytes, pLBytes, pRBytes,
        indexBytes = this.serializeIndex$1(index),
        t1 = type$.int,
        chainCodeBytes = A.List_List$from(privKey.keyData.chainCode._chainCode, true, t1),
        privKeyBytes = privKey.privKey.get$raw(),
        pubKeyBytes = B.JSArray_methods.sublist$1(pubKey.pubKey.get$compressed(), 1);
      if ((index.index & 2147483648) >>> 0 !== 0) {
        t2 = [0];
        B.JSArray_methods.addAll$1(t2, privKeyBytes);
        B.JSArray_methods.addAll$1(t2, indexBytes);
        zBytes = A.QuickCrypto_hmacSha512Hash(chainCodeBytes, A.List_List$from(t2, true, t1));
        t2 = [1];
        B.JSArray_methods.addAll$1(t2, privKeyBytes);
        B.JSArray_methods.addAll$1(t2, indexBytes);
        chainCodeBytes = A.QuickCrypto_hmacSha512HashHalves(chainCodeBytes, A.List_List$from(t2, true, t1)).item2;
      } else {
        t2 = [2];
        B.JSArray_methods.addAll$1(t2, pubKeyBytes);
        B.JSArray_methods.addAll$1(t2, indexBytes);
        zBytes = A.QuickCrypto_hmacSha512Hash(chainCodeBytes, A.List_List$from(t2, true, t1));
        t2 = [3];
        B.JSArray_methods.addAll$1(t2, pubKeyBytes);
        B.JSArray_methods.addAll$1(t2, indexBytes);
        chainCodeBytes = A.QuickCrypto_hmacSha512HashHalves(chainCodeBytes, A.List_List$from(t2, true, t1)).item2;
      }
      pLBytes = this.newPrivateKeyLeftPart$3(B.JSArray_methods.sublist$2(zBytes, 0, 32), B.JSArray_methods.sublist$2(privKeyBytes, 0, 32), type);
      pRBytes = this.newPrivateKeyRightPart$2(B.JSArray_methods.sublist$1(zBytes, 32), B.JSArray_methods.sublist$1(privKeyBytes, 32));
      t2 = A.List_List$of(pLBytes, true, type$.dynamic);
      B.JSArray_methods.addAll$1(t2, pRBytes);
      return new A.Tuple(A.List_List$from(t2, true, t1), chainCodeBytes, type$.Tuple_of_List_int_and_List_int);
    },
    ckdPub$3(pubKey, index, type) {
      var zBytes, newPubKeyPoint,
        indexBytes = this.serializeIndex$1(index),
        t1 = type$.int,
        chainCodeBytes = A.List_List$from(pubKey.keyData.chainCode._chainCode, true, t1),
        pubKeyBytes = B.JSArray_methods.sublist$1(pubKey.pubKey.get$compressed(), 1),
        t2 = [2];
      B.JSArray_methods.addAll$1(t2, pubKeyBytes);
      B.JSArray_methods.addAll$1(t2, indexBytes);
      zBytes = A.QuickCrypto_hmacSha512Hash(chainCodeBytes, A.List_List$from(t2, true, t1));
      t2 = [3];
      B.JSArray_methods.addAll$1(t2, pubKeyBytes);
      B.JSArray_methods.addAll$1(t2, indexBytes);
      t1 = A.QuickCrypto_hmacSha512HashHalves(chainCodeBytes, A.List_List$from(t2, true, t1));
      newPubKeyPoint = this.newPublicKeyPoint$2(pubKey, B.JSArray_methods.sublist$2(zBytes, 0, 32));
      t2 = newPubKeyPoint.get$x().compareTo$1(0, $.$get$_BigIntImpl_zero());
      if (t2 === 0)
        t2 = newPubKeyPoint.get$y().compareTo$1(0, $.$get$_BigIntImpl_one()) === 0;
      else
        t2 = false;
      if (t2)
        throw A.wrapException(B.Bip32KeyError_kr3);
      return new A.Tuple(newPubKeyPoint.toBytes$0(), t1.item2, type$.Tuple_of_List_int_and_List_int);
    },
    isPublicDerivationSupported$0() {
      return true;
    }
  };
  A.Bip32KholawEd25519MstKeyGenerator.prototype = {
    generateFromSeed$1(seedBytes) {
      var t1, hashDigest, keyBytesList, t2, tweak, t3, chainCode;
      type$.List_int._as(seedBytes);
      if (seedBytes.length < 16)
        throw A.wrapException(B.ArgumentException_3Jw);
      t1 = type$.int;
      hashDigest = A.Bip32KholawEd25519MstKeyGenerator__hashRepeatedly(seedBytes, A.List_List$from(B.List_9i6, true, t1));
      keyBytesList = J.toList$0$ax(hashDigest.item1);
      if (0 >= keyBytesList.length)
        return A.ioore(keyBytesList, 0);
      t2 = keyBytesList[0];
      if (typeof t2 !== "number")
        return t2.$and();
      B.JSArray_methods.$indexSet(keyBytesList, 0, t2 & 248);
      if (31 >= keyBytesList.length)
        return A.ioore(keyBytesList, 31);
      t2 = keyBytesList[31];
      if (typeof t2 !== "number")
        return t2.$and();
      B.JSArray_methods.$indexSet(keyBytesList, 31, t2 & 127);
      if (31 >= keyBytesList.length)
        return A.ioore(keyBytesList, 31);
      t2 = keyBytesList[31];
      if (typeof t2 !== "number")
        return t2.$or();
      B.JSArray_methods.$indexSet(keyBytesList, 31, (t2 | 64) >>> 0);
      tweak = A.List_List$from(keyBytesList, true, t1);
      t2 = A.List_List$from(B.List_9i6, true, t1);
      t3 = [1];
      B.JSArray_methods.addAll$1(t3, seedBytes);
      chainCode = A.QuickCrypto_hmacsha256Hash(t2, A.List_List$from(t3, true, t1));
      t3 = A.List_List$of(tweak, true, type$.dynamic);
      B.JSArray_methods.addAll$1(t3, hashDigest.item2);
      return new A.Tuple(A.List_List$from(t3, true, t1), chainCode, type$.Tuple_of_List_int_and_List_int);
    }
  };
  A.Bip32Slip10Ed25519.prototype = {
    childKey$1(index) {
      var t2, t3, dataBytes, result, _this = this,
        t1 = _this.__Bip32Base__privKey_A;
      t1 === $ && A.throwLateFieldNI("_privKey");
      if (t1 != null) {
        t1 = index.index;
        t2 = (t1 & 2147483648) >>> 0 === 0;
        if (t2)
          _this.get$keyDerivator().isPublicDerivationSupported$0();
        if (t2)
          throw A.wrapException(B.Bip32KeyError_7z6);
        t2 = _this.__Bip32Base__privKey_A;
        if (t2 == null)
          A.throwExpression(B.Bip32KeyError_7qd);
        t2.toString;
        _this.__Bip32Base__pubKey_A === $ && A.throwLateFieldNI("_pubKey");
        _this.get$curveType();
        t3 = A.List_List$of(B.List_0, true, type$.dynamic);
        B.JSArray_methods.addAll$1(t3, t2.privKey.get$raw());
        B.JSArray_methods.addAll$1(t3, A.IntUtils_toBytes(t1, B.C_Endian, 4));
        t1 = type$.int;
        dataBytes = A.List_List$from(t3, true, t1);
        result = A.QuickCrypto_hmacSha512HashHalves(A.List_List$from(t2.keyData.chainCode._chainCode, true, t1), dataBytes);
        if (_this.get$curveType() === B.EllipticCurveTypes_ed25519Blake2b) {
          t1 = A.Bip32ChainCode$(result.item2);
          t2 = _this.__Bip32Base__pubKey_A.keyData.depth.__Bip32Depth__depth_F;
          t2 === $ && A.throwLateFieldNI("_depth");
          t3 = new A.Bip32Slip10Ed25519Blake2b();
          t3.Bip32Base$4$keyData$keyNetVer$privKey$pubKey(A.Bip32KeyData$(t1, A.Bip32Depth$(t2 + 1), index, A.Bip32FingerPrint_Bip32FingerPrint(A.RIPEMD160_hash(A.SHA256_hash(_this.__Bip32Base__pubKey_A.pubKey.get$compressed())))), _this.__Bip32Base__pubKey_A.keyNetVer, result.item1, null);
          return t3;
        }
        t1 = A.Bip32ChainCode$(result.item2);
        t2 = _this.__Bip32Base__pubKey_A.keyData.depth.__Bip32Depth__depth_F;
        t2 === $ && A.throwLateFieldNI("_depth");
        return A.Bip32Slip10Ed25519$(A.Bip32KeyData$(t1, A.Bip32Depth$(t2 + 1), index, A.Bip32FingerPrint_Bip32FingerPrint(A.RIPEMD160_hash(A.SHA256_hash(_this.__Bip32Base__pubKey_A.pubKey.get$compressed())))), _this.__Bip32Base__pubKey_A.keyNetVer, result.item1, null);
      }
      throw A.wrapException(B.Bip32KeyError_7iV);
    },
    get$curveType() {
      return B.EllipticCurveTypes_ed25519;
    },
    get$defaultKeyNetVersion() {
      return $.$get$Bip32Const_mainNetKeyNetVersions();
    },
    get$keyDerivator() {
      return new A.Bip32Slip10Ed25519Derivator();
    },
    get$masterKeyGenerator() {
      return new A.Bip32Slip10Ed25519MstKeyGenerator();
    }
  };
  A.Bip32Slip10Ed25519Blake2b.prototype = {
    get$curveType() {
      return B.EllipticCurveTypes_ed25519Blake2b;
    },
    childKey$1(index) {
      return type$.Bip32Slip10Ed25519Blake2b._as(this.super$Bip32Slip10Ed25519$childKey(index));
    }
  };
  A.Bip32Slip10EcdsaDerivator.prototype = {
    isPublicDerivationSupported$0() {
      return true;
    },
    ckdPriv$4(privKey, pubKey, index, type) {
      var dataBytes, hmacHalves, ilInt, privKeyInt, generator,
        t1 = privKey.privKey,
        privKeyBytes = t1.get$raw(),
        t2 = index.index,
        t3 = type$.dynamic,
        t4 = type$.int;
      if ((t2 & 2147483648) >>> 0 !== 0) {
        t3 = A.List_List$of(B.List_0, true, t3);
        B.JSArray_methods.addAll$1(t3, privKeyBytes);
        B.JSArray_methods.addAll$1(t3, A.IntUtils_toBytes(t2, B.C_Endian, 4));
        dataBytes = A.List_List$from(t3, true, t4);
      } else {
        t3 = A.List_List$of(pubKey.pubKey.get$compressed(), true, t3);
        B.JSArray_methods.addAll$1(t3, A.IntUtils_toBytes(t2, B.C_Endian, 4));
        dataBytes = A.List_List$from(t3, true, t4);
      }
      hmacHalves = A.QuickCrypto_hmacSha512HashHalves(A.List_List$from(privKey.keyData.chainCode._chainCode, true, t4), dataBytes);
      ilInt = A.BigintUtils_fromBytes(hmacHalves.item1, B.C_Endian, false);
      privKeyInt = A.BigintUtils_fromBytes(privKeyBytes, B.C_Endian, false);
      generator = A.EllipticCurveGetter_generatorFromType(type);
      t2 = ilInt.$add(0, privKeyInt);
      t3 = generator.get$order();
      t3.toString;
      return new A.Tuple(A.BigintUtils_toBytes(t2.$mod(0, t3), t1.get$length(t1), B.C_Endian), hmacHalves.item2, type$.Tuple_of_List_int_and_List_int);
    },
    ckdPub$3(pubKey, index, type) {
      var t3, dataBytes, hmacHalves, ilInt, generator,
        t1 = pubKey.pubKey,
        t2 = A.List_List$of(t1.get$compressed(), true, type$.dynamic);
      B.JSArray_methods.addAll$1(t2, A.IntUtils_toBytes(index.index, B.C_Endian, 4));
      t3 = type$.int;
      dataBytes = A.List_List$from(t2, true, t3);
      hmacHalves = A.QuickCrypto_hmacSha512HashHalves(A.List_List$from(pubKey.keyData.chainCode._chainCode, true, t3), dataBytes);
      ilInt = A.BigintUtils_fromBytes(hmacHalves.item1, B.C_Endian, false);
      generator = A.EllipticCurveGetter_generatorFromType(type);
      return new A.Tuple(t1.get$point().$add(0, generator.$mul(0, ilInt)).toBytes$0(), hmacHalves.item2, type$.Tuple_of_List_int_and_List_int);
    }
  };
  A.Bip32Slip10Ed25519Derivator.prototype = {
    isPublicDerivationSupported$0() {
      return false;
    }
  };
  A.Bip32Slip10Ed25519MstKeyGenerator.prototype = {
    generateFromSeed$1(seedBytes) {
      return A._Bip32Slip10MstKeyGenerator_generateFromSeed(type$.List_int._as(seedBytes), A.List_List$from(B.List_9i6, true, type$.int), B.EllipticCurveTypes_ed25519);
    }
  };
  A.Bip32Slip10Nist256p1MstKeyGenerator.prototype = {
    generateFromSeed$1(seedBytes) {
      return A._Bip32Slip10MstKeyGenerator_generateFromSeed(type$.List_int._as(seedBytes), A.List_List$from(B.List_CJJ, true, type$.int), B.EllipticCurveTypes_nist256p1);
    }
  };
  A.Bip32Slip10Secp256k1MstKeyGenerator.prototype = {
    generateFromSeed$1(seedBytes) {
      return A._Bip32Slip10MstKeyGenerator_generateFromSeed(type$.List_int._as(seedBytes), A.List_List$from(B.List_9i60, true, type$.int), B.EllipticCurveTypes_secp256k1);
    }
  };
  A.Bip32Slip10Nist256p1.prototype = {
    childKey$1(index) {
      var t2, result, _this = this,
        t1 = _this.__Bip32Base__privKey_A;
      t1 === $ && A.throwLateFieldNI("_privKey");
      if (t1 != null) {
        if ((index.index & 2147483648) >>> 0 === 0)
          _this.get$keyDerivator().isPublicDerivationSupported$0();
        t1 = _this.__Bip32Base__privKey_A;
        if (t1 == null)
          A.throwExpression(B.Bip32KeyError_7qd);
        t1.toString;
        t2 = _this.__Bip32Base__pubKey_A;
        t2 === $ && A.throwLateFieldNI("_pubKey");
        result = new A.Bip32Slip10EcdsaDerivator().ckdPriv$4(t1, t2, index, B.EllipticCurveTypes_nist256p1);
        t2 = A.Bip32ChainCode$(result.item2);
        t1 = _this.__Bip32Base__pubKey_A.keyData.depth.__Bip32Depth__depth_F;
        t1 === $ && A.throwLateFieldNI("_depth");
        return A.Bip32Slip10Nist256p1$_(A.Bip32KeyData$(t2, A.Bip32Depth$(t1 + 1), index, A.Bip32FingerPrint_Bip32FingerPrint(A.RIPEMD160_hash(A.SHA256_hash(_this.__Bip32Base__pubKey_A.pubKey.get$compressed())))), _this.__Bip32Base__pubKey_A.keyNetVer, result.item1, null);
      }
      _this.get$keyDerivator().isPublicDerivationSupported$0();
      if ((index.index & 2147483648) >>> 0 !== 0)
        throw A.wrapException(B.Bip32KeyError_DpJ);
      t1 = _this.__Bip32Base__pubKey_A;
      t1 === $ && A.throwLateFieldNI("_pubKey");
      result = new A.Bip32Slip10EcdsaDerivator().ckdPub$3(t1, index, B.EllipticCurveTypes_nist256p1);
      t1 = A.Bip32ChainCode$(result.item2);
      t2 = _this.__Bip32Base__pubKey_A.keyData.depth.__Bip32Depth__depth_F;
      t2 === $ && A.throwLateFieldNI("_depth");
      return A.Bip32Slip10Nist256p1$_(A.Bip32KeyData$(t1, A.Bip32Depth$(t2 + 1), index, A.Bip32FingerPrint_Bip32FingerPrint(A.RIPEMD160_hash(A.SHA256_hash(_this.__Bip32Base__pubKey_A.pubKey.get$compressed())))), _this.__Bip32Base__pubKey_A.keyNetVer, null, result.item1);
    },
    get$curveType() {
      return B.EllipticCurveTypes_nist256p1;
    },
    get$defaultKeyNetVersion() {
      return $.$get$Bip32Const_mainNetKeyNetVersions();
    },
    get$keyDerivator() {
      return new A.Bip32Slip10EcdsaDerivator();
    },
    get$masterKeyGenerator() {
      return new A.Bip32Slip10Nist256p1MstKeyGenerator();
    }
  };
  A.Bip32Slip10Secp256k1.prototype = {
    get$curveType() {
      return B.EllipticCurveTypes_secp256k1;
    },
    get$defaultKeyNetVersion() {
      return $.$get$Bip32Const_mainNetKeyNetVersions();
    },
    get$keyDerivator() {
      return new A.Bip32Slip10EcdsaDerivator();
    },
    get$masterKeyGenerator() {
      return new A.Bip32Slip10Secp256k1MstKeyGenerator();
    },
    childKey$1(index) {
      var t2, result, _this = this,
        t1 = _this.__Bip32Base__privKey_A;
      t1 === $ && A.throwLateFieldNI("_privKey");
      if (t1 != null) {
        if ((index.index & 2147483648) >>> 0 === 0)
          _this.get$keyDerivator().isPublicDerivationSupported$0();
        t1 = _this.__Bip32Base__privKey_A;
        if (t1 == null)
          A.throwExpression(B.Bip32KeyError_7qd);
        t1.toString;
        t2 = _this.__Bip32Base__pubKey_A;
        t2 === $ && A.throwLateFieldNI("_pubKey");
        result = new A.Bip32Slip10EcdsaDerivator().ckdPriv$4(t1, t2, index, B.EllipticCurveTypes_secp256k1);
        t2 = A.Bip32ChainCode$(result.item2);
        t1 = _this.__Bip32Base__pubKey_A.keyData.depth.__Bip32Depth__depth_F;
        t1 === $ && A.throwLateFieldNI("_depth");
        return A.Bip32Slip10Secp256k1$_(A.Bip32KeyData$(t2, A.Bip32Depth$(t1 + 1), index, A.Bip32FingerPrint_Bip32FingerPrint(A.RIPEMD160_hash(A.SHA256_hash(_this.__Bip32Base__pubKey_A.pubKey.get$compressed())))), _this.__Bip32Base__pubKey_A.keyNetVer, result.item1, null);
      }
      _this.get$keyDerivator().isPublicDerivationSupported$0();
      if ((index.index & 2147483648) >>> 0 !== 0)
        throw A.wrapException(B.Bip32KeyError_DpJ);
      t1 = _this.__Bip32Base__pubKey_A;
      t1 === $ && A.throwLateFieldNI("_pubKey");
      result = new A.Bip32Slip10EcdsaDerivator().ckdPub$3(t1, index, B.EllipticCurveTypes_secp256k1);
      t1 = A.Bip32ChainCode$(result.item2);
      t2 = _this.__Bip32Base__pubKey_A.keyData.depth.__Bip32Depth__depth_F;
      t2 === $ && A.throwLateFieldNI("_depth");
      return A.Bip32Slip10Secp256k1$_(A.Bip32KeyData$(t1, A.Bip32Depth$(t2 + 1), index, A.Bip32FingerPrint_Bip32FingerPrint(A.RIPEMD160_hash(A.SHA256_hash(_this.__Bip32Base__pubKey_A.pubKey.get$compressed())))), _this.__Bip32Base__pubKey_A.keyNetVer, null, result.item1);
    }
  };
  A.Bip39EntropyBitLen.prototype = {
    get$value() {
      return this.value;
    }
  };
  A.Bip39EntropyGenerator_isValidEntropyBitLen_closure.prototype = {
    call$1(element) {
      return type$.Bip39EntropyBitLen._as(element).value === this.bitLen;
    },
    $signature: 85
  };
  A.Bip39WordsNum.prototype = {
    get$value() {
      return this.value;
    }
  };
  A.Bip39Languages.prototype = {
    get$wordList() {
      return A.bip39WordList(this);
    },
    $isMnemonicLanguages: 1,
    get$name() {
      return this.name;
    }
  };
  A.Bip39Mnemonic.prototype = {};
  A.Bip39MnemonicDecoder.prototype = {
    decode$1(mnemonic) {
      return this._entropyBytesFromBinaryStr$1(this._decodeAndVerifyBinaryStr$1(mnemonic));
    },
    _decodeAndVerifyBinaryStr$1(mnemonic) {
      var exception, mnemonicBinStr, t2, checksumBinStr, checksumBinStrGot,
        t1 = A.Mnemonic__normalize(mnemonic),
        mnemonicObj = new A.Bip39Mnemonic(t1),
        wCount = t1.length;
      try {
        B.JSArray_methods.firstWhere$1($.Bip39MnemonicConst_mnemonicWordNum, new A.Bip39MnemonicDecoder__decodeAndVerifyBinaryStr_closure(wCount));
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          throw A.wrapException(A.ArgumentException$("Mnemonic words count is not valid (" + A.S(wCount) + ")", null));
        else
          throw exception;
      }
      mnemonicBinStr = this.mnemonicToBinaryStr$2(mnemonicObj, this.findLanguage$1(mnemonicObj).item1);
      t1 = mnemonicBinStr.length;
      t2 = B.JSInt_methods._tdivFast$1(t1, 33);
      checksumBinStr = B.JSString_methods.substring$1(mnemonicBinStr, t1 - t2);
      checksumBinStrGot = B.JSString_methods.substring$2(A.BigintUtils_toBinary(A.BigintUtils_fromBytes(A.SHA256_hash(this._entropyBytesFromBinaryStr$1(mnemonicBinStr)), B.C_Endian, false), 256), 0, t2);
      if (checksumBinStr !== checksumBinStrGot)
        throw A.wrapException(A.MnemonicException$("Invalid checksum (expected " + checksumBinStr + ", got " + checksumBinStrGot + ")"));
      return mnemonicBinStr;
    },
    _entropyBytesFromBinaryStr$1(mnemonicBinStr) {
      var t1 = mnemonicBinStr.length,
        checksumLen = B.JSInt_methods._tdivFast$1(t1, 33);
      return A.BytesUtils_fromHexString(B.JSString_methods.padLeft$2(A._BigIntImpl_parse(B.JSString_methods.substring$2(mnemonicBinStr, 0, t1 - checksumLen), 2).toRadixString$1(0, 16), checksumLen * 8, "0"));
    },
    mnemonicToBinaryStr$2(mnemonic, wordsList) {
      var t1 = A.ListHelper_clone(mnemonic._mnemonicList, false, type$.String),
        t2 = A._arrayInstanceType(t1);
      return new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Bip39MnemonicDecoder_mnemonicToBinaryStr_closure(wordsList)), t2._eval$1("MappedListIterable<1,String>")).join$0(0);
    }
  };
  A.Bip39MnemonicDecoder__decodeAndVerifyBinaryStr_closure.prototype = {
    call$1(element) {
      return type$.Bip39WordsNum._as(element).value === this.wCount;
    },
    $signature: 121
  };
  A.Bip39MnemonicDecoder_mnemonicToBinaryStr_closure.prototype = {
    call$1(word) {
      return A.BigintUtils_toBinary(A._BigIntImpl__BigIntImpl$from(this.wordsList.getWordIdx$1(A._asString(word))), 11);
    },
    $signature: 13
  };
  A.Bip39MnemonicEncoder.prototype = {
    encode$1(entropyBytes) {
      var entropyByteLen, t1, mnemonicBinStr, mnemonic, t2, i, i0, wordIdx;
      type$.List_int._as(entropyBytes);
      A.BytesUtils_validateListOfBytes(entropyBytes);
      entropyBytes = A.List_List$unmodifiable(entropyBytes, type$.int);
      entropyByteLen = entropyBytes.length;
      t1 = entropyByteLen * 8;
      if (!A.Bip39EntropyGenerator_isValidEntropyBitLen(t1))
        throw A.wrapException(A.ArgumentException$("Entropy byte length (" + entropyByteLen + ") is not valid", null));
      mnemonicBinStr = A.BigintUtils_toBinary(A.BigintUtils_fromBytes(entropyBytes, B.C_Endian, false), t1) + B.JSString_methods.substring$2(A.BigintUtils_toBinary(A.BigintUtils_fromBytes(A.SHA256_hash(entropyBytes), B.C_Endian, false), 256), 0, entropyByteLen / 4 | 0);
      mnemonic = A._setArrayType([], type$.JSArray_String);
      for (t1 = mnemonicBinStr.length, t2 = this.wordsList._idxToWords, i = 0; i < t1; i = i0) {
        i0 = i + 11;
        wordIdx = A.int_parse(B.JSString_methods.substring$2(mnemonicBinStr, i, i0), 2);
        if (!(wordIdx >= 0 && wordIdx < t2.length))
          return A.ioore(t2, wordIdx);
        B.JSArray_methods.add$1(mnemonic, t2[wordIdx]);
      }
      return new A.Bip39Mnemonic(A.List_List$unmodifiable(mnemonic, type$.String));
    }
  };
  A.Bip39MnemonicGenerator.prototype = {
    _entropyBitLenFromWordsNum$1(wordsNum) {
      return B.JSArray_methods.firstWhere$1(B.List_8aB1, new A.Bip39MnemonicGenerator__entropyBitLenFromWordsNum_closure(wordsNum * 11 - (wordsNum / 3 | 0)));
    }
  };
  A.Bip39MnemonicGenerator__entropyBitLenFromWordsNum_closure.prototype = {
    call$1(element) {
      return type$.Bip39EntropyBitLen._as(element).value === this.bitLen;
    },
    $signature: 85
  };
  A.Bip39WordsListGetter.prototype = {
    getByLanguage$1(language) {
      if (!type$.Bip39Languages._is(language))
        throw A.wrapException(B.ArgumentException_iqV);
      return this.loadWordsList$2(language, 2048);
    }
  };
  A.Bip39WordsListFinder.prototype = {
    findLanguage$1(mnemonic) {
      var lang, wordsList, word, t1, t2, t3, _i, t4, t5, _i0, t6, exception;
      for (t1 = type$.Tuple_MnemonicWordsList_MnemonicLanguages, t2 = mnemonic._mnemonicList, t3 = type$.String, _i = 0; _i < 10; ++_i) {
        lang = B.List_cge[_i];
        wordsList = new A.MnemonicWordsList(lang.get$wordList());
        try {
          for (t4 = A.ListHelper_clone(t2, false, t3), t5 = t4.length, _i0 = 0; _i0 < t4.length; t4.length === t5 || (0, A.throwConcurrentModificationError)(t4), ++_i0) {
            word = t4[_i0];
            t6 = A._asString(word);
            if (B.JSArray_methods.indexOf$1(wordsList._idxToWords, t6) < 0)
              A.throwExpression(A.MessageException$("Unable to find word " + t6, null));
          }
          t4 = new A.Tuple(wordsList, lang, t1);
          return t4;
        } catch (exception) {
          if (A.unwrapException(exception) instanceof A.MessageException)
            continue;
          else
            throw exception;
        }
      }
      throw A.wrapException(A.MessageException$("cannot find language for " + mnemonic.toString$0(0), null));
    }
  };
  A.Bip39MnemonicValidator.prototype = {};
  A.Bip39SeedGenerator.prototype = {};
  A.Bip44Levels.prototype = {
    toString$0(_) {
      return "Bip44Levels." + this.name;
    },
    get$value() {
      return this.value;
    }
  };
  A.Bip44Levels_Bip44Levels$fromInt_closure.prototype = {
    call$1(e) {
      return type$.Bip44Levels._as(e).value === this.value;
    },
    $signature: 153
  };
  A.Bip44DepthError.prototype = {};
  A.BipCoins.prototype = {
    toString$0(_) {
      return A.getRuntimeTypeOfDartObject(this).toString$0(0) + "." + this.get$coinName();
    },
    $isCryptoCoins: 1
  };
  A.BipProposal.prototype = {
    get$specName() {
      return this.name;
    },
    get$value() {
      return this;
    },
    get$name() {
      return this.name;
    }
  };
  A.Bip44Coins.prototype = {
    get$value() {
      return this;
    },
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$Bip44Coins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.BipProposal_bip44;
    },
    toString$0(_) {
      return "Bip44Coins." + this.name;
    }
  };
  A.Bip44Coins_fromName_closure.prototype = {
    call$1(element) {
      return type$.Bip44Coins._as(element).name === this.name;
    },
    $signature: 93
  };
  A.Bip44Conf_akashNetwork_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_algorand_closure.prototype = {
    call$1(kwargs) {
      return new A.AlgoAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 168
  };
  A.Bip44Conf_aptos_closure.prototype = {
    call$1(kwargs) {
      return new A.AptosAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 170
  };
  A.Bip44Conf_avaxCChain_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_avaxPChain_closure.prototype = {
    call$1(kwargs) {
      return new A.AvaxPChainAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 180
  };
  A.Bip44Conf_avaxXChain_closure.prototype = {
    call$1(kwargs) {
      return new A.AvaxXChainAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 182
  };
  A.Bip44Conf_axelar_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_bandProtocol_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_binanceChain_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_binanceSmartChain_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_bitcoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_bitcoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_bitcoinCashMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip44Conf_bitcoinCashTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip44Conf_bitcoinCashSlpMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip44Conf_bitcoinCashSlpTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip44Conf_bitcoinSvMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_bitcoinSvTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_cardanoByronIcarus_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronIcarusAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 28
  };
  A.Bip44Conf_cardanoByronLedger_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronIcarusAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 28
  };
  A.Bip44Conf_cardanoByronIcarusTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronIcarusAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 28
  };
  A.Bip44Conf_cardanoByronLedgerTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronIcarusAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 28
  };
  A.Bip44Conf_celo_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_certik_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_chihuahua_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_cosmos_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_cosmosTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_cosmosEthSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomEthSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 82
  };
  A.Bip44Conf_cosmosTestnetEthSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomEthSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 82
  };
  A.Bip44Conf_cosmosNist256p1_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomNist256P1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 83
  };
  A.Bip44Conf_cosmosTestnetNist256p1_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomNist256P1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 83
  };
  A.Bip44Conf_cosmosEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 84
  };
  A.Bip44Conf_cosmosTestnetEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 84
  };
  A.Bip44Conf_dashMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_dashTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_dogecoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_dogecoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_pepeMainnet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_pepeTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_ecashMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip44Conf_ecashTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip44Conf_elrond_closure.prototype = {
    call$1(kwargs) {
      return new A.EgldAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 264
  };
  A.Bip44Conf_eos_closure.prototype = {
    call$1(kwargs) {
      return new A.EosAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 275
  };
  A.Bip44Conf_ergoMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.ErgoP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 86
  };
  A.Bip44Conf_ergoTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.ErgoP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 86
  };
  A.Bip44Conf_ethereum_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_ethereumTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_ethereumClassic_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_fantomOpera_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_filecoin_closure.prototype = {
    call$1(kwargs) {
      return new A.FilSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 282
  };
  A.Bip44Conf_harmonyOneMetamask_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_harmonyOneEth_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_harmonyOneAtom_closure.prototype = {
    call$1(kwargs) {
      return new A.OneAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 372
  };
  A.Bip44Conf_huobiChain_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_icon_closure.prototype = {
    call$1(kwargs) {
      return new A.IcxAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 346
  };
  A.Bip44Conf_injective_closure.prototype = {
    call$1(kwargs) {
      return new A.InjAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 361
  };
  A.Bip44Conf_irisNet_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_kava_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_kusamaEd25519Slip_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_kusamaTestnetEd25519Slip_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_litecoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_litecoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_moneroEd25519Slip_closure.prototype = {
    call$1(kwargs) {
      return new A.XmrAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 107
  };
  A.Bip44Conf_moneroSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.XmrAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 107
  };
  A.Bip44Conf_nano_closure.prototype = {
    call$1(kwargs) {
      return new A.NanoAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 130
  };
  A.Bip44Conf_nearProtocol_closure.prototype = {
    call$1(kwargs) {
      return new A.NearAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 131
  };
  A.Bip44Conf_neo_closure.prototype = {
    call$1(kwargs) {
      return new A.NeoAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 117
  };
  A.Bip44Conf_nineChroniclesGold_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_okexChainEth_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_okexChainAtom_closure.prototype = {
    call$1(kwargs) {
      return new A.OkexAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 67
  };
  A.Bip44Conf_okexChainAtomOld_closure.prototype = {
    call$1(kwargs) {
      return new A.OkexAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 67
  };
  A.Bip44Conf_ontology_closure.prototype = {
    call$1(kwargs) {
      return new A.NeoAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 117
  };
  A.Bip44Conf_osmosis_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_piNetwork_closure.prototype = {
    call$1(kwargs) {
      return new A.XlmAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 39
  };
  A.Bip44Conf_polkadotEd25519Slip_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_polkadotTestnetEd25519Slip_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_polygon_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_ripple_closure.prototype = {
    call$1(kwargs) {
      return new A.XrpAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 33
  };
  A.Bip44Conf_rippleTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.XrpAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 33
  };
  A.Bip44Conf_rippleEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.XrpAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 33
  };
  A.Bip44Conf_rippleTestnetEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.XrpAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 33
  };
  A.Bip44Conf_secretNetworkOld_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_secretNetworkNew_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_solana_closure.prototype = {
    call$1(kwargs) {
      return new A.SolAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 87
  };
  A.Bip44Conf_solanaTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.SolAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 87
  };
  A.Bip44Conf_stellar_closure.prototype = {
    call$1(kwargs) {
      return new A.XlmAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 39
  };
  A.Bip44Conf_stellarTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.XlmAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 39
  };
  A.Bip44Conf_terra_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_tezos_closure.prototype = {
    call$1(kwargs) {
      return new A.XtzAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 150
  };
  A.Bip44Conf_theta_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_tron_closure.prototype = {
    call$1(kwargs) {
      return new A.TrxAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 89
  };
  A.Bip44Conf_tronTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.TrxAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 89
  };
  A.Bip44Conf_vechain_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_verge_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_zcashMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_zcashTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_zilliqa_closure.prototype = {
    call$1(kwargs) {
      return new A.ZilAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 154
  };
  A.Bip44Conf_tonMainnet_closure.prototype = {
    call$1(kwargs) {
      return new A.TonAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 105
  };
  A.Bip44Conf_tonTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.TonAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 105
  };
  A.Bip44Conf_electraProtocolMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_electraProtocolTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip49Coins.prototype = {
    get$value() {
      return this;
    },
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$Bip49Coins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.BipProposal_bip49;
    }
  };
  A.Bip49Coins_fromName_closure.prototype = {
    call$1(element) {
      return type$.Bip49Coins._as(element).name === this.name;
    },
    $signature: 156
  };
  A.Bip49Conf_dashMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip49Conf_dashTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip49Conf_dogecoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip49Conf_dogecoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip49Conf_litecoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip49Conf_litecoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip49Conf_zcashMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip49Conf_zcashTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip49Conf_bitcoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip49Conf_bitcoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip49Conf_bitcoinSvMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip49Conf_bitcoinSvTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip49Conf_bitcoinCashMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip49Conf_bitcoinCashTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip49Conf_bitcoinCashSlpMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip49Conf_bitcoinCashSlpTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip49Conf_ecashMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip49Conf_ecashTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip49Conf_pepeMainnet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip49Conf_pepeTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip49Conf_electraProtocolMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip49Conf_electraProtocolTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip84Coins.prototype = {
    get$value() {
      return this;
    },
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$Bip84Coins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.BipProposal_bip84;
    }
  };
  A.Bip84Coins_fromName_closure.prototype = {
    call$1(element) {
      return type$.Bip84Coins._as(element).name === this.name;
    },
    $signature: 161
  };
  A.Bip84Conf_bitcoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 22
  };
  A.Bip84Conf_bitcoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 22
  };
  A.Bip84Conf_litecoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 22
  };
  A.Bip84Conf_litecoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 22
  };
  A.Bip84Conf_electraProtocolMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 22
  };
  A.Bip84Conf_electraProtocolTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 22
  };
  A.Bip86Coins.prototype = {
    get$value() {
      return this;
    },
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$Bip86Coins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.BipProposal_bip86;
    }
  };
  A.Bip86Coins_fromName_closure.prototype = {
    call$1(element) {
      return type$.Bip86Coins._as(element).name === this.name;
    },
    $signature: 169
  };
  A.Bip86Conf_bitcoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2TRAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 76
  };
  A.Bip86Conf_bitcoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2TRAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 76
  };
  A.BipBitcoinCashConf.prototype = {
    get$addrParams() {
      return type$.Map_String_dynamic._as(J.$index$asx(this.addrParams, "std"));
    }
  };
  A.BipCoinConfig.prototype = {
    get$hasExtendedKeys() {
      return true;
    },
    $isCoinConfig: 1,
    get$keyNetVer() {
      return this.keyNetVer;
    },
    get$addrParams() {
      return this.addrParams;
    },
    get$type() {
      return this.type;
    }
  };
  A.BipLitecoinConf.prototype = {
    get$addrParams() {
      var t1 = J.$index$asx(this.addrParams, "std_net_ver");
      return A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", t1], type$.String, type$.dynamic);
    },
    get$keyNetVer() {
      var t1 = this.keyNetVer;
      return t1;
    }
  };
  A.ChainType.prototype = {
    _enumToString$0() {
      return "ChainType." + this._core$_name;
    }
  };
  A.CoinProposal_fromName_closure.prototype = {
    call$1(element) {
      return type$.BipProposal._as(element).get$name() === this.name;
    },
    $signature: 171
  };
  A.CoinProposal_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.MessageException$("Unable to locate a proposal with the given name.", A.LinkedHashMap_LinkedHashMap$_literal(["Name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 1
  };
  A.PubKeyModes.prototype = {
    _enumToString$0() {
      return "PubKeyModes." + this._core$_name;
    },
    get$value() {
      return this.value;
    }
  };
  A.PubKeyModes_fromValue_closure.prototype = {
    call$1(e) {
      return type$.PubKeyModes._as(e).value === this.value;
    },
    $signature: 172
  };
  A.PubKeyModes_fromValue_closure0.prototype = {
    call$0() {
      var t1 = this.defaultValue;
      if (t1 != null && this.value == null)
        return t1;
      throw A.wrapException(A.ExceptionConst_itemNotFound("public format"));
    },
    $signature: 174
  };
  A.CardanoByronLegacyBip32.prototype = {
    childKey$1(index) {
      var t2, result, _this = this,
        t1 = _this.__Bip32Base__privKey_A;
      t1 === $ && A.throwLateFieldNI("_privKey");
      if (t1 != null) {
        if ((index.index & 2147483648) >>> 0 === 0)
          _this.get$keyDerivator().isPublicDerivationSupported$0();
        t1 = _this.__Bip32Base__privKey_A;
        if (t1 == null)
          A.throwExpression(B.Bip32KeyError_7qd);
        t1.toString;
        t2 = _this.__Bip32Base__pubKey_A;
        t2 === $ && A.throwLateFieldNI("_pubKey");
        result = new A.CardanoByronLegacyKeyDerivator().ckdPriv$4(t1, t2, index, B.EllipticCurveTypes_ed25519Kholaw);
        t2 = A.Bip32ChainCode$(result.item2);
        t1 = _this.__Bip32Base__pubKey_A.keyData.depth.__Bip32Depth__depth_F;
        t1 === $ && A.throwLateFieldNI("_depth");
        return A.CardanoByronLegacyBip32$_(A.Bip32KeyData$(t2, A.Bip32Depth$(t1 + 1), index, A.Bip32FingerPrint_Bip32FingerPrint(A.RIPEMD160_hash(A.SHA256_hash(_this.__Bip32Base__pubKey_A.pubKey.get$compressed())))), _this.__Bip32Base__pubKey_A.keyNetVer, result.item1, null);
      }
      _this.get$keyDerivator().isPublicDerivationSupported$0();
      if ((index.index & 2147483648) >>> 0 !== 0)
        throw A.wrapException(B.Bip32KeyError_DpJ);
      t1 = _this.__Bip32Base__pubKey_A;
      t1 === $ && A.throwLateFieldNI("_pubKey");
      result = new A.CardanoByronLegacyKeyDerivator().ckdPub$3(t1, index, B.EllipticCurveTypes_ed25519Kholaw);
      t1 = A.Bip32ChainCode$(result.item2);
      t2 = _this.__Bip32Base__pubKey_A.keyData.depth.__Bip32Depth__depth_F;
      t2 === $ && A.throwLateFieldNI("_depth");
      return A.CardanoByronLegacyBip32$_(A.Bip32KeyData$(t1, A.Bip32Depth$(t2 + 1), index, A.Bip32FingerPrint_Bip32FingerPrint(A.RIPEMD160_hash(A.SHA256_hash(_this.__Bip32Base__pubKey_A.pubKey.get$compressed())))), _this.__Bip32Base__pubKey_A.keyNetVer, null, result.item1);
    },
    get$curveType() {
      return B.EllipticCurveTypes_ed25519Kholaw;
    },
    get$defaultKeyNetVersion() {
      return $.$get$Bip32Const_kholawKeyNetVersions();
    },
    get$keyDerivator() {
      return new A.CardanoByronLegacyKeyDerivator();
    },
    get$masterKeyGenerator() {
      return new A.CardanoByronLegacyMstKeyGenerator();
    }
  };
  A.CardanoByronLegacyKeyDerivator.prototype = {
    newPrivateKeyLeftPart$3(zlBytes, klBytes, type) {
      var t2, zl8Int, klInt, curve,
        t1 = type$.List_int;
      t1._as(zlBytes);
      t1._as(klBytes);
      t1 = A._arrayInstanceType(zlBytes);
      t2 = t1._eval$1("MappedListIterable<1,int>");
      zl8Int = A.BigintUtils_fromBytes(A.List_List$of(new A.MappedListIterable(zlBytes, t1._eval$1("int(1)")._as(new A.CardanoByronLegacyKeyDerivator_newPrivateKeyLeftPart_closure()), t2), true, t2._eval$1("ListIterable.E")), B.C_Endian0, false);
      klInt = A.BigintUtils_fromBytes(klBytes, B.C_Endian0, false);
      curve = A.EllipticCurveGetter_generatorFromType(type);
      t2 = zl8Int.$add(0, klInt);
      t1 = curve.get$order();
      t1.toString;
      return A.BigintUtils_toBytes(t2.$mod(0, t1), 32, B.C_Endian0);
    },
    newPrivateKeyRightPart$2(zrBytes, krBytes) {
      var _length, _list, t2, index, t3, t4,
        t1 = type$.List_int;
      t1._as(zrBytes);
      t1._as(krBytes);
      _length = zrBytes.length;
      _list = J.JSArray_JSArray$allocateGrowable(_length, type$.int);
      for (t1 = zrBytes.length, t2 = krBytes.length, index = 0; index < _length; ++index) {
        if (!(index < t1))
          return A.ioore(zrBytes, index);
        t3 = zrBytes[index];
        if (!(index < t2))
          return A.ioore(krBytes, index);
        t4 = krBytes[index];
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t4 !== "number")
          return A.iae(t4);
        _list[index] = t3 + t4 & 255;
      }
      return _list;
    },
    newPublicKeyPoint$2(pubKey, zlBytes) {
      var curve, t1, t2, zl8Int;
      type$.List_int._as(zlBytes);
      curve = A.EllipticCurveGetter_generatorFromType(pubKey.curveType);
      t1 = A._arrayInstanceType(zlBytes);
      t2 = t1._eval$1("MappedListIterable<1,int>");
      zl8Int = A.BigintUtils_fromBytes(A.List_List$of(new A.MappedListIterable(zlBytes, t1._eval$1("int(1)")._as(new A.CardanoByronLegacyKeyDerivator_newPublicKeyPoint_closure()), t2), true, t2._eval$1("ListIterable.E")), B.C_Endian0, false);
      return type$.EDPoint._as(pubKey.pubKey.get$point().$add(0, curve.$mul(0, zl8Int)));
    },
    serializeIndex$1(index) {
      return A.IntUtils_toBytes(index.index, B.C_Endian, 4);
    }
  };
  A.CardanoByronLegacyKeyDerivator_newPrivateKeyLeftPart_closure.prototype = {
    call$1(e) {
      return A._asInt(e) * 8 & 255;
    },
    $signature: 20
  };
  A.CardanoByronLegacyKeyDerivator_newPublicKeyPoint_closure.prototype = {
    call$1(e) {
      return A._asInt(e) * 8 & 255;
    },
    $signature: 20
  };
  A.CardanoByronLegacyMstKeyGenerator.prototype = {
    generateFromSeed$1(seedBytes) {
      var t1;
      type$.List_int._as(seedBytes);
      t1 = seedBytes.length;
      if (t1 !== 32)
        throw A.wrapException(A.ArgumentException$("Invalid seed length (" + t1 + ")", null));
      A.BytesUtils_validateListOfBytes(seedBytes);
      return this._hashRepeatedly$2(new A.CborBytesValue(A.List_List$unmodifiable(seedBytes, type$.int)).encode$0(), 1);
    },
    _hashRepeatedly$2(dataBytes, itrNum) {
      var t1, halves, keyBytes;
      type$.List_int._as(dataBytes);
      t1 = type$.int;
      halves = A.QuickCrypto_hmacSha512HashHalves(dataBytes, A.List_List$from(A.List_List$of(new A.CodeUnits("Root Seed Chain " + B.JSInt_methods.toString$0(itrNum)), true, type$.dynamic), true, t1));
      keyBytes = A.List_List$from(A.SHA512_hash(halves.item1), true, t1);
      if (0 >= keyBytes.length)
        return A.ioore(keyBytes, 0);
      B.JSArray_methods.$indexSet(keyBytes, 0, (keyBytes[0] & 4294967288) >>> 0);
      if (31 >= keyBytes.length)
        return A.ioore(keyBytes, 31);
      B.JSArray_methods.$indexSet(keyBytes, 31, (keyBytes[31] & 4294967167) >>> 0);
      if (31 >= keyBytes.length)
        return A.ioore(keyBytes, 31);
      B.JSArray_methods.$indexSet(keyBytes, 31, (keyBytes[31] | 64) >>> 0);
      if (31 >= keyBytes.length)
        return A.ioore(keyBytes, 31);
      if ((keyBytes[31] & 32) !== 0)
        return this._hashRepeatedly$2(dataBytes, itrNum + 1);
      return new A.Tuple(keyBytes, halves.item2, type$.Tuple_of_List_int_and_List_int);
    }
  };
  A.CardanoIcarusBip32.prototype = {
    childKey$1(index) {
      var t2, result, _this = this,
        t1 = _this.__Bip32Base__privKey_A;
      t1 === $ && A.throwLateFieldNI("_privKey");
      if (t1 != null) {
        if ((index.index & 2147483648) >>> 0 === 0)
          _this.get$keyDerivator().isPublicDerivationSupported$0();
        t1 = _this.__Bip32Base__privKey_A;
        if (t1 == null)
          A.throwExpression(B.Bip32KeyError_7qd);
        t1.toString;
        t2 = _this.__Bip32Base__pubKey_A;
        t2 === $ && A.throwLateFieldNI("_pubKey");
        result = new A.Bip32KholawEd25519KeyDerivator().ckdPriv$4(t1, t2, index, B.EllipticCurveTypes_ed25519Kholaw);
        t2 = A.Bip32ChainCode$(result.item2);
        t1 = _this.__Bip32Base__pubKey_A.keyData.depth.__Bip32Depth__depth_F;
        t1 === $ && A.throwLateFieldNI("_depth");
        return A.CardanoIcarusBip32$_(A.Bip32KeyData$(t2, A.Bip32Depth$(t1 + 1), index, A.Bip32FingerPrint_Bip32FingerPrint(A.RIPEMD160_hash(A.SHA256_hash(_this.__Bip32Base__pubKey_A.pubKey.get$compressed())))), _this.__Bip32Base__pubKey_A.keyNetVer, result.item1, null);
      }
      _this.get$keyDerivator().isPublicDerivationSupported$0();
      if ((index.index & 2147483648) >>> 0 !== 0)
        throw A.wrapException(B.Bip32KeyError_DpJ);
      t1 = _this.__Bip32Base__pubKey_A;
      t1 === $ && A.throwLateFieldNI("_pubKey");
      result = new A.Bip32KholawEd25519KeyDerivator().ckdPub$3(t1, index, B.EllipticCurveTypes_ed25519Kholaw);
      t1 = A.Bip32ChainCode$(result.item2);
      t2 = _this.__Bip32Base__pubKey_A.keyData.depth.__Bip32Depth__depth_F;
      t2 === $ && A.throwLateFieldNI("_depth");
      return A.CardanoIcarusBip32$_(A.Bip32KeyData$(t1, A.Bip32Depth$(t2 + 1), index, A.Bip32FingerPrint_Bip32FingerPrint(A.RIPEMD160_hash(A.SHA256_hash(_this.__Bip32Base__pubKey_A.pubKey.get$compressed())))), _this.__Bip32Base__pubKey_A.keyNetVer, null, result.item1);
    },
    get$curveType() {
      return B.EllipticCurveTypes_ed25519Kholaw;
    },
    get$defaultKeyNetVersion() {
      return $.$get$Bip32Const_kholawKeyNetVersions();
    },
    get$keyDerivator() {
      return new A.Bip32KholawEd25519KeyDerivator();
    },
    get$masterKeyGenerator() {
      return new A.CardanoIcarusMstKeyGenerator();
    }
  };
  A.CardanoIcarusMstKeyGenerator.prototype = {
    generateFromSeed$1(seedBytes) {
      var t1, keyBytes;
      type$.List_int._as(seedBytes);
      t1 = seedBytes.length;
      if (t1 < 16)
        throw A.wrapException(A.ArgumentException$("Invalid seed length (" + t1 + ")", null));
      keyBytes = A.List_List$from(A.PBKDF2_deriveKey(4096, 96, new A.CardanoIcarusMstKeyGenerator_generateFromSeed_closure(), seedBytes), true, type$.int);
      if (0 >= keyBytes.length)
        return A.ioore(keyBytes, 0);
      B.JSArray_methods.$indexSet(keyBytes, 0, (keyBytes[0] & 4294967288) >>> 0);
      if (31 >= keyBytes.length)
        return A.ioore(keyBytes, 31);
      B.JSArray_methods.$indexSet(keyBytes, 31, (keyBytes[31] & 4294967071) >>> 0);
      if (31 >= keyBytes.length)
        return A.ioore(keyBytes, 31);
      B.JSArray_methods.$indexSet(keyBytes, 31, (keyBytes[31] | 64) >>> 0);
      return new A.Tuple(B.JSArray_methods.sublist$2(keyBytes, 0, 64), B.JSArray_methods.sublist$1(keyBytes, 64), type$.Tuple_of_List_int_and_List_int);
    }
  };
  A.CardanoIcarusMstKeyGenerator_generateFromSeed_closure.prototype = {
    call$0() {
      return A.HMAC$(new A.CardanoIcarusMstKeyGenerator_generateFromSeed__closure(), A.StringUtils_encode("", B.StringEncoding_1));
    },
    $signature: 25
  };
  A.CardanoIcarusMstKeyGenerator_generateFromSeed__closure.prototype = {
    call$0() {
      return A.SHA512$();
    },
    $signature: 11
  };
  A.Cip1852Coins.prototype = {
    get$value() {
      return this;
    },
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$Cip1852Coins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.C_CipProposal;
    }
  };
  A.Cip1852Coins_fromName_closure.prototype = {
    call$1(element) {
      return type$.Cip1852Coins._as(element).name === this.name;
    },
    $signature: 181
  };
  A.CipProposal.prototype = {
    get$specName() {
      return "cip1852";
    },
    get$value() {
      return this;
    },
    $isBipProposal: 1,
    get$name() {
      return "cip1852";
    }
  };
  A.Cip1852Conf_cardanoIcarusMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaShelleyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 26
  };
  A.Cip1852Conf_cardanoIcarusTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaShelleyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 26
  };
  A.Cip1852Conf_cardanoLedgerMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaShelleyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 26
  };
  A.Cip1852Conf_cardanoLedgerTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaShelleyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 26
  };
  A.CardanoByronLegacySeedGenerator.prototype = {
    set$__CardanoByronLegacySeedGenerator__seedBytes_F(__CardanoByronLegacySeedGenerator__seedBytes_F) {
      this.__CardanoByronLegacySeedGenerator__seedBytes_F = type$.List_int._as(__CardanoByronLegacySeedGenerator__seedBytes_F);
    }
  };
  A.CardanoIcarusSeedGenerator.prototype = {};
  A.CoinConf.prototype = {
    toString$0(_) {
      return this.coinName.name;
    }
  };
  A.CoinParams.prototype = {};
  A.CoinNames.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.EllipticCurveTypes.prototype = {
    toString$0(_) {
      return "EllipticCurveTypes." + this.name;
    }
  };
  A.Ed25519Blake2bPublicKey.prototype = {
    get$curve() {
      return B.EllipticCurveTypes_ed25519Blake2b;
    },
    get$length(_) {
      return 33;
    },
    get$point() {
      return this._publicKey._point;
    },
    get$compressed() {
      var t1 = A.List_List$of(B.List_0, true, type$.dynamic);
      B.JSArray_methods.addAll$1(t1, this._publicKey._point.toBytes$0());
      return A.List_List$from(t1, true, type$.int);
    },
    get$uncompressed() {
      return this.get$compressed();
    },
    toHex$3$lowerCase$prefix$withPrefix(lowerCase, prefix, withPrefix) {
      var key;
      this._publicKey._point.toBytes$0();
      key = this.get$compressed();
      return A.BytesUtils_toHexString(key, true, prefix);
    },
    toHex$0() {
      return this.toHex$3$lowerCase$prefix$withPrefix(true, "", true);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Ed25519Blake2bPublicKey))
        return false;
      if (this === other)
        return true;
      t1 = this._publicKey.$eq(0, other._publicKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._publicKey, B.EllipticCurveTypes_ed25519Blake2b]);
    },
    $isIPublicKey: 1
  };
  A.Ed25519Blake2bPrivateKey.prototype = {
    get$curve() {
      return B.EllipticCurveTypes_ed25519Blake2b;
    },
    get$length(_) {
      return 32;
    },
    get$publicKey() {
      return new A.Ed25519Blake2bPublicKey(this._privateKey.publicKey);
    },
    get$raw() {
      return A.List_List$from(this._privateKey.key, true, type$.int);
    },
    toHex$2$lowerCase$prefix(lowerCase, prefix) {
      return A.BytesUtils_toHexString(A.List_List$from(this._privateKey.key, true, type$.int), true, prefix);
    },
    toHex$0() {
      return this.toHex$2$lowerCase$prefix(true, "");
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Ed25519Blake2bPrivateKey))
        return false;
      if (this === other)
        return true;
      t1 = this._privateKey.$eq(0, other._privateKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._privateKey, B.EllipticCurveTypes_ed25519Blake2b]);
    },
    $isIPrivateKey: 1
  };
  A.Ed25519Blake2bPrivateKey_Ed25519Blake2bPrivateKey$fromBytes_closure.prototype = {
    call$0() {
      return A.BLAKE2b$(null, 64);
    },
    $signature: 184
  };
  A.Ed25519PublicKey.prototype = {
    get$curve() {
      return B.EllipticCurveTypes_ed25519;
    },
    get$length(_) {
      return 33;
    },
    get$point() {
      return this._ed25519_keys$_publicKey._point;
    },
    get$compressed() {
      var t1 = A.List_List$of(B.List_0, true, type$.dynamic);
      B.JSArray_methods.addAll$1(t1, this._ed25519_keys$_publicKey._point.toBytes$0());
      return A.List_List$from(t1, true, type$.int);
    },
    get$uncompressed() {
      return this.get$compressed();
    },
    toHex$3$lowerCase$prefix$withPrefix(lowerCase, prefix, withPrefix) {
      var key;
      this._ed25519_keys$_publicKey._point.toBytes$0();
      key = this.get$compressed();
      return A.BytesUtils_toHexString(key, true, prefix);
    },
    toHex$0() {
      return this.toHex$3$lowerCase$prefix$withPrefix(true, "", true);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Ed25519PublicKey))
        return false;
      if (this === other)
        return true;
      t1 = this._ed25519_keys$_publicKey.$eq(0, other._ed25519_keys$_publicKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._ed25519_keys$_publicKey, B.EllipticCurveTypes_ed25519]);
    },
    $isIPublicKey: 1
  };
  A.Ed25519PrivateKey.prototype = {
    get$curve() {
      return B.EllipticCurveTypes_ed25519;
    },
    get$length(_) {
      return 32;
    },
    get$publicKey() {
      return new A.Ed25519PublicKey(this._ed25519_keys$_privateKey.publicKey);
    },
    get$raw() {
      return A.List_List$from(this._ed25519_keys$_privateKey.key, true, type$.int);
    },
    toHex$2$lowerCase$prefix(lowerCase, prefix) {
      return A.BytesUtils_toHexString(A.List_List$from(this._ed25519_keys$_privateKey.key, true, type$.int), true, prefix);
    },
    toHex$0() {
      return this.toHex$2$lowerCase$prefix(true, "");
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Ed25519PrivateKey))
        return false;
      if (this === other)
        return true;
      t1 = this._ed25519_keys$_privateKey.$eq(0, other._ed25519_keys$_privateKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._ed25519_keys$_privateKey, B.EllipticCurveTypes_ed25519]);
    },
    $isIPrivateKey: 1
  };
  A.Ed25519PrivateKey_Ed25519PrivateKey$fromBytes_closure.prototype = {
    call$0() {
      return A.SHA512$();
    },
    $signature: 11
  };
  A.Ed25519KholawPublicKey.prototype = {
    get$point() {
      return this._ed25519_kholaw_keys$_publicKey._point;
    },
    get$length(_) {
      return 33;
    },
    get$curve() {
      return B.EllipticCurveTypes_ed25519Kholaw;
    },
    get$compressed() {
      var t1 = A.List_List$of(B.List_0, true, type$.dynamic);
      B.JSArray_methods.addAll$1(t1, this._ed25519_kholaw_keys$_publicKey._point.toBytes$0());
      return A.List_List$from(t1, true, type$.int);
    },
    get$uncompressed() {
      return this.get$compressed();
    },
    toHex$3$lowerCase$prefix$withPrefix(lowerCase, prefix, withPrefix) {
      var key;
      this._ed25519_kholaw_keys$_publicKey._point.toBytes$0();
      key = this.get$compressed();
      return A.BytesUtils_toHexString(key, true, prefix);
    },
    toHex$0() {
      return this.toHex$3$lowerCase$prefix$withPrefix(true, "", true);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Ed25519KholawPublicKey))
        return false;
      if (this === other)
        return true;
      t1 = this._ed25519_kholaw_keys$_publicKey.$eq(0, other._ed25519_kholaw_keys$_publicKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._ed25519_kholaw_keys$_publicKey, B.EllipticCurveTypes_ed25519Kholaw]);
    },
    $isIPublicKey: 1
  };
  A.Ed25519KholawPrivateKey.prototype = {
    get$curve() {
      return B.EllipticCurveTypes_ed25519Kholaw;
    },
    get$length(_) {
      return 64;
    },
    get$publicKey() {
      return new A.Ed25519KholawPublicKey(this._ed25519_kholaw_keys$_privateKey.publicKey);
    },
    get$raw() {
      var t1 = type$.int,
        t2 = A.List_List$of(A.List_List$from(this._ed25519_kholaw_keys$_privateKey.key, true, t1), true, type$.dynamic);
      B.JSArray_methods.addAll$1(t2, this._extendKey);
      return A.List_List$from(t2, true, t1);
    },
    toHex$2$lowerCase$prefix(lowerCase, prefix) {
      return A.BytesUtils_toHexString(this.get$raw(), true, prefix);
    },
    toHex$0() {
      return this.toHex$2$lowerCase$prefix(true, "");
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Ed25519KholawPrivateKey))
        return false;
      if (other === this)
        return true;
      t1 = this._ed25519_kholaw_keys$_privateKey.$eq(0, other._ed25519_kholaw_keys$_privateKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._ed25519_kholaw_keys$_privateKey, B.EllipticCurveTypes_ed25519Kholaw]);
    },
    $isIPrivateKey: 1
  };
  A.MoneroPublicKey.prototype = {
    get$curve() {
      return B.EllipticCurveTypes_ed25519Monero;
    },
    get$length(_) {
      return 32;
    },
    get$point() {
      return this.publicKey._point;
    },
    get$compressed() {
      return this.publicKey._point.toBytes$0();
    },
    get$uncompressed() {
      return this.publicKey._point.toBytes$0();
    },
    toHex$3$lowerCase$prefix$withPrefix(lowerCase, prefix, withPrefix) {
      var key,
        t1 = this.publicKey._point;
      t1.toBytes$0();
      key = t1.toBytes$0();
      return A.BytesUtils_toHexString(key, true, prefix);
    },
    toHex$0() {
      return this.toHex$3$lowerCase$prefix$withPrefix(true, "", true);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.MoneroPublicKey))
        return false;
      if (this === other)
        return true;
      t1 = this.publicKey.$eq(0, other.publicKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.publicKey, B.EllipticCurveTypes_ed25519Monero]);
    },
    $isIPublicKey: 1
  };
  A.MoneroPrivateKey.prototype = {
    get$curve() {
      return B.EllipticCurveTypes_ed25519Monero;
    },
    get$length(_) {
      return 32;
    },
    get$publicKey() {
      return new A.MoneroPublicKey(this.privateKey.publicKey);
    },
    get$raw() {
      return A.List_List$from(this.privateKey.key, true, type$.int);
    },
    toHex$2$lowerCase$prefix(lowerCase, prefix) {
      return A.BytesUtils_toHexString(A.List_List$from(this.privateKey.key, true, type$.int), true, prefix);
    },
    toHex$0() {
      return this.toHex$2$lowerCase$prefix(true, "");
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.MoneroPrivateKey))
        return false;
      if (this === other)
        return true;
      t1 = this.privateKey.$eq(0, other.privateKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.privateKey, B.EllipticCurveTypes_ed25519Monero]);
    },
    $isIPrivateKey: 1
  };
  A.Nist256p1PublicKey.prototype = {
    get$length(_) {
      return 33;
    },
    get$curve() {
      return B.EllipticCurveTypes_nist256p1;
    },
    get$point() {
      return this.publicKey.point;
    },
    get$compressed() {
      return this.publicKey.point.toBytes$1(B.EncodeType_0);
    },
    get$uncompressed() {
      return this.publicKey.point.toBytes$1(B.EncodeType_3);
    },
    toHex$3$lowerCase$prefix$withPrefix(lowerCase, prefix, withPrefix) {
      return A.BytesUtils_toHexString(this.publicKey.point.toBytes$1(B.EncodeType_0), true, prefix);
    },
    toHex$0() {
      return this.toHex$3$lowerCase$prefix$withPrefix(true, "", true);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Nist256p1PublicKey))
        return false;
      t1 = this.publicKey.$eq(0, other.publicKey);
      return t1;
    },
    get$hashCode(_) {
      var t1 = this.publicKey;
      return (A.HashCodeGenerator_generateHashCode([t1.generator.curve, t1.point]) ^ A.Primitives_objectHashCode(B.EllipticCurveTypes_nist256p1)) >>> 0;
    },
    $isIPublicKey: 1
  };
  A.Nist256p1PrivateKey.prototype = {
    get$curve() {
      return B.EllipticCurveTypes_nist256p1;
    },
    get$length(_) {
      return 32;
    },
    get$publicKey() {
      return new A.Nist256p1PublicKey(this.privateKey.publicKey);
    },
    get$raw() {
      return this.privateKey.toBytes$0();
    },
    toHex$2$lowerCase$prefix(lowerCase, prefix) {
      return A.BytesUtils_toHexString(this.privateKey.toBytes$0(), true, prefix);
    },
    toHex$0() {
      return this.toHex$2$lowerCase$prefix(true, "");
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Nist256p1PrivateKey))
        return false;
      t1 = this.privateKey.$eq(0, other.privateKey);
      return t1;
    },
    get$hashCode(_) {
      var t1 = this.privateKey;
      return (A.HashCodeGenerator_generateHashCode([t1.publicKey, t1.secretMultiplier]) ^ A.Primitives_objectHashCode(B.EllipticCurveTypes_nist256p1)) >>> 0;
    },
    $isIPrivateKey: 1
  };
  A.Secp256k1PublicKeyEcdsa.prototype = {
    get$length(_) {
      return 33;
    },
    get$curve() {
      return B.EllipticCurveTypes_secp256k1;
    },
    get$point() {
      return this.publicKey.point;
    },
    get$compressed() {
      return this.publicKey.point.toBytes$1(B.EncodeType_0);
    },
    get$uncompressed() {
      return this.publicKey.point.toBytes$1(B.EncodeType_3);
    },
    toHex$3$lowerCase$prefix$withPrefix(lowerCase, prefix, withPrefix) {
      return A.BytesUtils_toHexString(this.publicKey.point.toBytes$1(B.EncodeType_0), true, prefix);
    },
    toHex$0() {
      return this.toHex$3$lowerCase$prefix$withPrefix(true, "", true);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Secp256k1PublicKeyEcdsa))
        return false;
      t1 = this.publicKey.$eq(0, other.publicKey);
      return t1;
    },
    get$hashCode(_) {
      var t1 = this.publicKey;
      return (A.HashCodeGenerator_generateHashCode([t1.generator.curve, t1.point]) ^ A.Primitives_objectHashCode(B.EllipticCurveTypes_secp256k1)) >>> 0;
    },
    $isIPublicKey: 1
  };
  A.Secp256k1PrivateKeyEcdsa.prototype = {
    get$curve() {
      return B.EllipticCurveTypes_secp256k1;
    },
    get$length(_) {
      return 32;
    },
    get$publicKey() {
      return new A.Secp256k1PublicKeyEcdsa(this.privateKey.publicKey);
    },
    get$raw() {
      return this.privateKey.toBytes$0();
    },
    toHex$2$lowerCase$prefix(lowerCase, prefix) {
      return A.BytesUtils_toHexString(this.privateKey.toBytes$0(), true, prefix);
    },
    toHex$0() {
      return this.toHex$2$lowerCase$prefix(true, "");
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Secp256k1PrivateKeyEcdsa))
        return false;
      t1 = this.privateKey.$eq(0, other.privateKey);
      return t1;
    },
    get$hashCode(_) {
      var t1 = this.privateKey;
      return (A.HashCodeGenerator_generateHashCode([t1.publicKey, t1.secretMultiplier]) ^ A.Primitives_objectHashCode(B.EllipticCurveTypes_secp256k1)) >>> 0;
    },
    $isIPrivateKey: 1
  };
  A.Sr25519PublicKey.prototype = {
    get$length(_) {
      return 32;
    },
    get$curve() {
      return B.EllipticCurveTypes_sr25519;
    },
    get$point() {
      return A.RistrettoPoint_RistrettoPoint$fromBytes(A.List_List$from(this.publicKey._keys$_publicKey, true, type$.int));
    },
    get$compressed() {
      return A.List_List$from(this.publicKey._keys$_publicKey, true, type$.int);
    },
    get$uncompressed() {
      return A.List_List$from(this.publicKey._keys$_publicKey, true, type$.int);
    },
    toHex$3$lowerCase$prefix$withPrefix(lowerCase, prefix, withPrefix) {
      return A.BytesUtils_toHexString(A.List_List$from(this.publicKey._keys$_publicKey, true, type$.int), true, prefix);
    },
    toHex$0() {
      return this.toHex$3$lowerCase$prefix$withPrefix(true, "", true);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Sr25519PublicKey))
        return false;
      t1 = this.publicKey.$eq(0, other.publicKey);
      return t1;
    },
    get$hashCode(_) {
      return (this.publicKey.get$hashCode(0) ^ A.Primitives_objectHashCode(B.EllipticCurveTypes_sr25519)) >>> 0;
    },
    $isIPublicKey: 1
  };
  A.Sr25519PrivateKey.prototype = {
    get$curve() {
      return B.EllipticCurveTypes_sr25519;
    },
    get$length(_) {
      return 64;
    },
    get$publicKey() {
      return new A.Sr25519PublicKey(this.secretKey.publicKey$0());
    },
    get$raw() {
      return this.secretKey.toBytes$0();
    },
    toHex$2$lowerCase$prefix(lowerCase, prefix) {
      return A.BytesUtils_toHexString(this.secretKey.toBytes$0(), true, prefix);
    },
    toHex$0() {
      return this.toHex$2$lowerCase$prefix(true, "");
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Sr25519PrivateKey))
        return false;
      t1 = this.secretKey.$eq(0, other.secretKey);
      return t1;
    },
    get$hashCode(_) {
      return (this.secretKey.get$hashCode(0) ^ A.Primitives_objectHashCode(B.EllipticCurveTypes_sr25519)) >>> 0;
    },
    $isIPrivateKey: 1
  };
  A.EntropyGenerator.prototype = {};
  A.Mnemonic.prototype = {
    toString$0(_) {
      var t1 = this._mnemonicList;
      return B.JSArray_methods.join$1(B.JSArray_methods.sublist$2(t1, 0, t1.length / 3 | 0), ",") + "...";
    }
  };
  A.Mnemonic__normalize_closure.prototype = {
    call$1(element) {
      return A._asString(element).length !== 0;
    },
    $signature: 19
  };
  A.MnemonicDecoderBase.prototype = {
    findLanguage$1(mnemonic) {
      var t1 = this.wordsListFinder.findLanguage$1(mnemonic);
      return t1;
    }
  };
  A.MnemonicEncoderBase.prototype = {};
  A.MnemonicException.prototype = {};
  A.MnemonicWordsList.prototype = {
    length$0(_) {
      return this._idxToWords.length;
    },
    getWordIdx$1(word) {
      var index = B.JSArray_methods.indexOf$1(this._idxToWords, word);
      if (index < 0)
        throw A.wrapException(A.MessageException$("Unable to find word " + word, null));
      return index;
    }
  };
  A.MnemonicWordsListGetterBase.prototype = {
    loadWordsList$2(language, wordsNum) {
      if (language.get$wordList().length !== wordsNum)
        throw A.wrapException(A.ArgumentException$("Number of loaded words list (" + language.get$wordList().length + ") is not valid", null));
      return new A.MnemonicWordsList(language.get$wordList());
    }
  };
  A.MnemonicWordsListFinderBase.prototype = {};
  A.MnemonicValidator.prototype = {
    isValid$1(mnemonic) {
      var exception;
      try {
        this.decoder.decode$1(mnemonic);
        return true;
      } catch (exception) {
        return false;
      }
    }
  };
  A.MoneroCoinConf.prototype = {
    get$type() {
      return B.EllipticCurveTypes_ed25519Monero;
    },
    get$hasExtendedKeys() {
      return false;
    },
    $isCoinConfig: 1,
    get$addrParams() {
      return this.addrParams;
    },
    get$keyNetVer() {
      return null;
    }
  };
  A.MoneroCoins.prototype = {
    get$value() {
      return this;
    },
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$MoneroCoins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.C_MoneroProposal;
    },
    $isCryptoCoins: 1
  };
  A.MoneroCoins_fromName_closure.prototype = {
    call$1(element) {
      return type$.MoneroCoins._as(element).name === this.name;
    },
    $signature: 185
  };
  A.MoneroProposal.prototype = {
    get$specName() {
      return "monero";
    },
    get$value() {
      return this;
    }
  };
  A.MoneroEntropyGenerator.prototype = {};
  A.MoneroWordsNum.prototype = {
    get$value() {
      return this.value;
    }
  };
  A.MoneroWordsNum_fromValue_closure.prototype = {
    call$1(e) {
      return type$.MoneroWordsNum._as(e).value === this.value;
    },
    $signature: 43
  };
  A.MoneroWordsNum_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.ExceptionConst_itemNotFound("Monero words number"));
    },
    $signature: 1
  };
  A.MoneroLanguages.prototype = {
    get$wordList() {
      return A.moneroMnemonicWorsList(this);
    },
    $isMnemonicLanguages: 1
  };
  A.MoneroLanguages_fromValue_closure.prototype = {
    call$1(e) {
      return type$.MoneroLanguages._as(e).name === this.value;
    },
    $signature: 195
  };
  A.MoneroLanguages_fromValue_closure0.prototype = {
    call$0() {
      var t1 = this.value;
      return A.throwExpression(A.ExceptionConst_itemNotFound("Monero " + (t1 == null ? "" : t1) + " language"));
    },
    $signature: 1
  };
  A.MoneroMnemonic.prototype = {};
  A.MoneroMnemonicDecoder.prototype = {
    decode$1(mnemonic) {
      var exception, lang, words, entropyBytes, t2, t3, i, t4, t5, word1, t6, word2, word3, n, index, index0, word2Idx, word3Idx, chunkBytes, _null = null,
        _s20_ = "Unable to find word ",
        t1 = A.Mnemonic__normalize(mnemonic),
        wcount = t1.length;
      try {
        type$.bool_Function_MoneroWordsNum._as(new A.MoneroMnemonicDecoder_decode_closure(wcount));
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          throw A.wrapException(A.ArgumentException$("Mnemonic words count is not valid (" + A.S(wcount) + ")", _null));
        else
          throw exception;
      }
      lang = this.findLanguage$1(new A.MoneroMnemonic(t1));
      words = A.ListHelper_clone(t1, false, type$.String);
      this.validateCheckSum$2(words, type$.MoneroLanguages._as(lang.item2));
      t1 = type$.int;
      entropyBytes = J.JSArray_JSArray$fixed(0, t1);
      for (t2 = type$.dynamic, t3 = lang.item1, i = 0; t4 = words.length, i < (t4 / 3 | 0); ++i) {
        t5 = i * 3;
        if (!(t5 < t4))
          return A.ioore(words, t5);
        word1 = words[t5];
        t6 = t5 + 1;
        if (!(t6 < t4))
          return A.ioore(words, t6);
        word2 = words[t6];
        t5 += 2;
        if (!(t5 < t4))
          return A.ioore(words, t5);
        word3 = words[t5];
        t5 = t3._idxToWords;
        n = t5.length;
        index = B.JSArray_methods.indexOf$1(t5, word1);
        if (index < 0)
          A.throwExpression(A.MessageException$(_s20_ + word1, _null));
        index0 = B.JSArray_methods.indexOf$1(t5, word2);
        if (index0 < 0)
          A.throwExpression(A.MessageException$(_s20_ + word2, _null));
        word2Idx = B.JSInt_methods.$mod(index0, n);
        index0 = B.JSArray_methods.indexOf$1(t5, word3);
        if (index0 < 0)
          A.throwExpression(A.MessageException$(_s20_ + word3, _null));
        word3Idx = B.JSInt_methods.$mod(index0, n);
        chunkBytes = A.IntUtils_toBytes(index + n * B.JSInt_methods.$mod(word2Idx - index, n) + n * n * B.JSInt_methods.$mod(word3Idx - word2Idx, n), B.C_Endian0, 4);
        t4 = A.List_List$of(entropyBytes, true, t2);
        B.JSArray_methods.addAll$1(t4, chunkBytes);
        entropyBytes = A.List_List$from(t4, true, t1);
      }
      return entropyBytes;
    },
    validateCheckSum$2(words, language) {
      var checkSum, t1, exception;
      type$.List_String._as(words);
      try {
        B.JSArray_methods.firstWhere$1(B.List_U05, new A.MoneroMnemonicDecoder_validateCheckSum_closure(words));
        checkSum = A.MoneroMnemonicUtils_computeChecksum(B.JSArray_methods.sublist$2(words, 0, words.length - 1), language);
        if (!J.$eq$(B.JSArray_methods.get$last(words), checkSum)) {
          t1 = A.MnemonicException$("Invalid checksum (expected " + A.S(checkSum) + ", got " + A.S(B.JSArray_methods.get$last(words)) + ")");
          throw A.wrapException(t1);
        }
      } catch (exception) {
        if (!(A.unwrapException(exception) instanceof A.StateError))
          throw exception;
      }
    }
  };
  A.MoneroMnemonicDecoder_decode_closure.prototype = {
    call$1(element) {
      return type$.MoneroWordsNum._as(element).value === this.wcount;
    },
    $signature: 43
  };
  A.MoneroMnemonicDecoder_validateCheckSum_closure.prototype = {
    call$1(element) {
      return type$.MoneroWordsNum._as(element).value === this.words.length;
    },
    $signature: 43
  };
  A.MoneroMnemonicEncoderBase.prototype = {
    _encodeToList$1(entropyBytes) {
      var t1, entropyByteLen, t2, mnemonic, t3, t4, i, t5, n, intChunk, word1Idx, word2Idx, word3Idx, t6, t7;
      type$.List_int._as(entropyBytes);
      t1 = J.getInterceptor$asx(entropyBytes);
      entropyByteLen = t1.get$length(entropyBytes);
      if (!B.JSArray_methods.contains$1($.MoneroEntropyGeneratorConst_entropyBitLen, entropyByteLen * 8))
        throw A.wrapException(A.ArgumentException$("Entropy byte length (" + entropyByteLen + ") is not valid", null));
      t2 = type$.JSArray_String;
      mnemonic = A._setArrayType([], t2);
      for (t3 = B.JSInt_methods._tdivFast$1(entropyByteLen, 4), t4 = this.wordsList._idxToWords, i = 0; i < t3; ++i) {
        t5 = i * 4;
        t5 = t1.sublist$2(entropyBytes, t5, t5 + 4);
        n = t4.length;
        intChunk = A.IntUtils_fromBytes(t5, B.C_Endian0, false);
        word1Idx = B.JSInt_methods.$mod(intChunk, n);
        word2Idx = B.JSInt_methods.$mod(B.JSInt_methods.$tdiv(intChunk, n) + word1Idx, n);
        word3Idx = B.JSInt_methods.$mod(B.JSInt_methods.$tdiv(intChunk, n * n) + word2Idx, n);
        t5 = t4.length;
        if (!(word1Idx < t5))
          return A.ioore(t4, word1Idx);
        t6 = t4[word1Idx];
        if (!(word2Idx < t5))
          return A.ioore(t4, word2Idx);
        t7 = t4[word2Idx];
        if (!(word3Idx < t5))
          return A.ioore(t4, word3Idx);
        B.JSArray_methods.addAll$1(mnemonic, A._setArrayType([t6, t7, t4[word3Idx]], t2));
      }
      return mnemonic;
    }
  };
  A.MoneroMnemonicNoChecksumEncoder.prototype = {};
  A.MoneroMnemonicWithChecksumEncoder.prototype = {};
  A.MoneroMnemonicEncoder.prototype = {};
  A.MoneroMnemonicGenerator.prototype = {};
  A.MoneroWordsListGetter.prototype = {
    getByLanguage$1(language) {
      if (!(language instanceof A.MoneroLanguages))
        throw A.wrapException(B.ArgumentException_65l);
      return this.loadWordsList$2(language, 1626);
    }
  };
  A.MoneroWordsListFinder.prototype = {
    findLanguage$1(mnemonic) {
      var lang, wordsList, word, t1, t2, t3, _i, t4, t5, _i0, t6, exception;
      for (t1 = type$.Tuple_MnemonicWordsList_MnemonicLanguages, t2 = mnemonic._mnemonicList, t3 = type$.String, _i = 0; _i < 10; ++_i) {
        lang = B.List_ENd[_i];
        wordsList = new A.MnemonicWordsList(A.moneroMnemonicWorsList(lang));
        try {
          for (t4 = A.ListHelper_clone(t2, false, t3), t5 = t4.length, _i0 = 0; _i0 < t4.length; t4.length === t5 || (0, A.throwConcurrentModificationError)(t4), ++_i0) {
            word = t4[_i0];
            t6 = A._asString(word);
            if (B.JSArray_methods.indexOf$1(wordsList._idxToWords, t6) < 0)
              A.throwExpression(A.MessageException$("Unable to find word " + t6, null));
          }
          t4 = new A.Tuple(wordsList, lang, t1);
          return t4;
        } catch (exception) {
          if (A.unwrapException(exception) instanceof A.MessageException)
            continue;
          else
            throw exception;
        }
      }
      throw A.wrapException(A.MessageException$("cannot find language for " + mnemonic.toString$0(0), null));
    }
  };
  A.MoneroMnemonicUtils_computeChecksum_closure.prototype = {
    call$1(word) {
      var len, len0;
      A._asString(word);
      len = word.length;
      len0 = this.uniqueLen;
      return B.JSString_methods.substring$2(word, 0, len >= len0 ? len0 : len);
    },
    $signature: 13
  };
  A.MoneroMnemonicValidator.prototype = {};
  A.MoneroSeedGenerator.prototype = {};
  A.MoneroAccount.prototype = {
    subaddress$2$majorIndex(minorIndex, majorIndex) {
      var _this = this;
      if (minorIndex === 0 && majorIndex === 0)
        return _this.scubaddr.computeAndEncodeKeys$3(0, 0, _this.coinConf.addrNetVer);
      return _this.scubaddr.computeAndEncodeKeys$3(minorIndex, majorIndex, _this.coinConf.subaddrNetVer);
    }
  };
  A.MoneroKeyError.prototype = {};
  A.MoneroComputeKey.prototype = {};
  A.MoneroSubaddress.prototype = {
    computeKeys$2(minorIndex, majorIndex) {
      var majorIdxBytes, minorIdxBytes, t1, t2, privVKeyBytes, t3, secretKey, mInt, t4, _this = this;
      if (minorIndex < 0 || minorIndex > 4294967295)
        throw A.wrapException(A.ArgumentException$("Invalid minor index (" + minorIndex + ")", null));
      if (majorIndex < 0 || majorIndex > 4294967295)
        throw A.wrapException(A.ArgumentException$("Invalid major index (" + majorIndex + ")", null));
      if (minorIndex === 0 && majorIndex === 0)
        return new A.MoneroComputeKey(_this.pubSKey, _this.pubVKey, _this.privVKey);
      majorIdxBytes = A.IntUtils_toBytes(majorIndex, B.C_Endian0, 4);
      minorIdxBytes = A.IntUtils_toBytes(minorIndex, B.C_Endian0, 4);
      t1 = _this.privVKey.privateKey.key;
      t2 = type$.int;
      privVKeyBytes = A.List_List$from(t1, true, t2);
      t3 = A.List_List$of(B.List_VOY, true, type$.dynamic);
      B.JSArray_methods.addAll$1(t3, privVKeyBytes);
      B.JSArray_methods.addAll$1(t3, majorIdxBytes);
      B.JSArray_methods.addAll$1(t3, minorIdxBytes);
      secretKey = A.Ed25519Utils_scalarReduce(A.Keccack_hash(A.List_List$from(t3, true, t2), 32));
      mInt = A.BigintUtils_fromBytes(secretKey, B.C_Endian0, false);
      t3 = $.$get$Curves_generatorED25519();
      t4 = A.EDDSAPublicKey_EDDSAPublicKey$fromPoint(t3, _this.pubSKey.publicKey._point.$add(0, t3.$mul(0, mInt)));
      return new A.MoneroComputeKey(new A.MoneroPublicKey(t4), new A.MoneroPublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint(t3, t4._point.$mul(0, A.BigintUtils_fromBytes(A.List_List$from(t1, true, t2), B.C_Endian0, false)))), A.MoneroPrivateKey_MoneroPrivateKey$fromBytes(secretKey));
    },
    computeAndEncodeKeys$3(minorIndex, majorIndex, netVer) {
      var keys, t2, t3, netVerBytes, pubVKey,
        t1 = type$.List_int;
      t1._as(netVer);
      keys = this.computeKeys$2(minorIndex, majorIndex);
      t2 = keys.pubSKey.publicKey._point.toBytes$0();
      t3 = A.LinkedHashMap_LinkedHashMap$_literal(["pub_vkey", keys.pubVKey.publicKey._point.toBytes$0(), "net_ver", netVer], type$.String, type$.dynamic);
      t1._as(t2);
      type$.Map_String_dynamic._as(t3);
      netVerBytes = A.AddrKeyValidator_validateAddressArgs(t3, "net_ver", t1);
      pubVKey = A.AddrKeyValidator_validateAddressArgs(t3, "pub_vkey", t1);
      t1._as(netVerBytes);
      return A._XmrAddrUtils_encodeKey(t2, t1._as(pubVKey), netVerBytes, null);
    }
  };
  A.SubstrateCoinConf.prototype = {
    get$hasExtendedKeys() {
      return false;
    },
    $isCoinConfig: 1,
    get$type() {
      return this.type;
    },
    get$addrParams() {
      return B.Map_empty;
    },
    get$keyNetVer() {
      return null;
    }
  };
  A.SubstrateCoins.prototype = {
    get$value() {
      return this;
    },
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$SubstrateCoins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.C_SubstratePropoosal;
    },
    $isCryptoCoins: 1
  };
  A.SubstrateCoins_fromName_closure.prototype = {
    call$1(element) {
      return type$.SubstrateCoins._as(element).name === this.name;
    },
    $signature: 207
  };
  A.SubstratePropoosal.prototype = {
    get$specName() {
      return "substrate";
    },
    get$value() {
      return this;
    }
  };
  A.SubstrateConf_acalaEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.SubstrateConf_acalaSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_acalaSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.SubstrateConf_bifrostEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.SubstrateConf_bifrostSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_bifrostSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.SubstrateConf_chainXEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.SubstrateConf_chainXSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_chainXSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.SubstrateConf_edgewareEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.SubstrateConf_edgewareSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_edgewareSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.SubstrateConf_genericEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.SubstrateConf_genericSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_genericSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.SubstrateConf_karuraEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.SubstrateConf_karuraSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_karuraSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.SubstrateConf_kusamaEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.SubstrateConf_kusamaSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_kusamaSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.SubstrateConf_moonbeamEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.SubstrateConf_moonbeamSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_moonbeamSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.SubstrateConf_moonriverEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.SubstrateConf_moonriverSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_moonriverSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.SubstrateConf_phalaEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.SubstrateConf_phalaSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_phalaSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.SubstrateConf_plasmEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.SubstrateConf_plasmSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_plasmSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.SubstrateConf_polkadotEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.SubstrateConf_polkadotSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_polkadotSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.SubstrateConf_soraEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.SubstrateConf_soraSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_soraSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.SubstrateConf_stafiEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.SubstrateConf_stafiSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_stafiSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.Substrate.prototype = {
    derivePath$1(path) {
      var t1, t2, t3, substrateObj, pathElem, t4;
      for (t1 = A.SubstratePathParser_parse(path).elems, t2 = A._arrayInstanceType(t1), t1 = new J.ArrayIterator(t1, t1.length, t2._eval$1("ArrayIterator<1>")), t3 = type$.SubstratePathElem, t2 = t2._precomputed1, substrateObj = this; t1.moveNext$0();) {
        pathElem = t1._current;
        t4 = t3._as(pathElem == null ? t2._as(pathElem) : pathElem);
        substrateObj = substrateObj._priveKey != null ? substrateObj._ckdPriv$1(t4) : substrateObj._ckdPub$1(t4);
      }
      return substrateObj;
    },
    _ckdPriv$1(pathElem) {
      var secret, t2, script, t3, newSecret, result, derivePub, r, nonce, hdkd, _this = this,
        t1 = _this.publicKey.coinConf.type;
      if (t1 === B.EllipticCurveTypes_sr25519) {
        t1 = _this._priveKey;
        if (t1 == null)
          A.throwExpression(B.SubstrateKeyError_vrN);
        secret = type$.Sr25519PrivateKey._as(t1.privKey).secretKey;
        t1 = pathElem.__SubstratePathElem_isHard_F;
        t1 === $ && A.throwLateFieldNI("isHard");
        t2 = type$.List_int;
        if (t1) {
          t1 = t2._as(pathElem.get$computeChainCode());
          script = A.MerlinTranscript_MerlinTranscript("SchnorrRistrettoHDKD");
          t2 = type$.int;
          t3 = J.JSArray_JSArray$fixed(0, t2);
          script.additionalData$2(new A.CodeUnits("sign-bytes"), t3);
          script.additionalData$2(new A.CodeUnits("chain-code"), t1);
          script.additionalData$2(new A.CodeUnits("secret-key"), A.List_List$from(secret._keys$_key, true, t2));
          newSecret = script.toBytes$2(new A.CodeUnits("HDKD-hard"), 32);
          script.toBytes$2(new A.CodeUnits("HDKD-chaincode"), 32);
          result = A.SchnorrkelMiniSecretKey_SchnorrkelMiniSecretKey$fromBytes(newSecret).toSecretKey$1(B.ExpansionMode_1);
        } else {
          t1 = t2._as(pathElem.get$computeChainCode());
          derivePub = secret.publicKey$0()._deriveScalarAndChainCode$2(t1, null);
          r = $.$get$QuickCrypto__generateRandom().call$1(32);
          nonce = r;
          if (J.get$length$asx(nonce) !== 32)
            A.throwExpression(B.ArgumentException_UDs);
          t1 = type$.int;
          t2 = A.List_List$of(A.Ed25519Utils_add(A.List_List$from(secret._keys$_key, true, t1), derivePub.item1), true, type$.dynamic);
          B.JSArray_methods.addAll$1(t2, nonce);
          result = A.SchnorrkelSecretKey_SchnorrkelSecretKey$fromBytes(A.List_List$from(t2, true, t1));
        }
        t1 = _this.coinConf;
        t2 = A.SubstratePrvKey__keyFromBytes(result.toBytes$0(), t1.type);
        return new A.Substrate(new A.SubstratePrvKey(t2, t1), new A.SubstratePubKey(t2.get$publicKey(), t1), _this.path.addElem$1(pathElem), t1);
      }
      hdkd = t1 === B.EllipticCurveTypes_ed25519 ? B.List_9i61 : B.List_CJJ0;
      t1 = A.List_List$of(hdkd, true, type$.int);
      B.JSArray_methods.addAll$1(t1, _this._priveKey.privKey.get$raw());
      B.JSArray_methods.addAll$1(t1, pathElem.get$computeChainCode());
      t2 = _this.coinConf;
      t1 = A.SubstratePrvKey__keyFromBytes(A.QuickCrypto_blake2b256Hash(t1), t2.type);
      return new A.Substrate(new A.SubstratePrvKey(t1, t2), new A.SubstratePubKey(t1.get$publicKey(), t2), _this.path.addElem$1(pathElem), t2);
    },
    _ckdPub$1(pathElem) {
      var key, newKeyBigint, t2,
        t1 = pathElem.__SubstratePathElem_isHard_F;
      t1 === $ && A.throwLateFieldNI("isHard");
      if (t1)
        throw A.wrapException(B.SubstrateKeyError_e4R);
      t1 = this.publicKey;
      if (t1.coinConf.type === B.EllipticCurveTypes_sr25519) {
        key = type$.Sr25519PublicKey._as(t1.pubKey).publicKey;
        newKeyBigint = A.BigintUtils_fromBytes(key._deriveScalarAndChainCode$2(type$.List_int._as(pathElem.get$computeChainCode()), null).item1, B.C_Endian0, false);
        t1 = type$.int;
        t2 = this.coinConf;
        return new A.Substrate(null, new A.SubstratePubKey(A.SubstratePubKey__keyFromBytes(A.List_List$from(A.SchnorrkelPublicKey_SchnorrkelPublicKey(A.RistrettoPoint_RistrettoPoint$fromEdwardsPoint(A.RistrettoPoint_RistrettoPoint$fromBytes(A.List_List$from(key._keys$_publicKey, true, t1)).super$EDPoint$$add(0, $.$get$Curves_generatorED25519().$mul(0, newKeyBigint))).toBytes$0())._keys$_publicKey, true, t1), t2.type), t2), this.path.addElem$1(pathElem), t2);
      }
      throw A.wrapException(new A.SubstrateKeyError("Public key drivation is not support in substrate " + t1.pubKey.get$curve().name, null));
    }
  };
  A.SubstrateKeyError.prototype = {};
  A.SubstratePathError.prototype = {};
  A.SubstratePrvKey.prototype = {};
  A.SubstratePubKey.prototype = {};
  A.SubstratePathElem.prototype = {
    toString$0(_) {
      var prefix,
        t1 = this.__SubstratePathElem_isHard_F;
      t1 === $ && A.throwLateFieldNI("isHard");
      prefix = t1 ? "//" : "/";
      t1 = this.__SubstratePathElem_elem_F;
      t1 === $ && A.throwLateFieldNI("elem");
      return prefix + t1;
    },
    get$computeChainCode() {
      var toInt, bitLen, scaleEnc, t2, t3, encData,
        t1 = this.__SubstratePathElem_elem_F;
      t1 === $ && A.throwLateFieldNI("elem");
      toInt = A._BigIntImpl__tryParse(t1, null);
      if (toInt != null) {
        bitLen = toInt.get$bitLength(0);
        t2 = B.Map_SMvAv.get$keys();
        t2 = t2.get$iterator(t2);
        while (true) {
          if (!t2.moveNext$0()) {
            scaleEnc = null;
            break;
          }
          t3 = t2.get$current();
          if (bitLen <= t3) {
            scaleEnc = B.Map_SMvAv.$index(0, t3);
            break;
          }
        }
        if (scaleEnc == null)
          throw A.wrapException(A.SubstratePathError$("Invalid integer bit length (" + bitLen + ")"));
      } else
        scaleEnc = B.C_SubstrateScaleBytesEncoder;
      encData = scaleEnc.encode$1(t1);
      if (encData.length > 32)
        return A.QuickCrypto_blake2b256Hash(encData);
      else {
        t1 = A._setArrayType(encData.slice(0), A._arrayInstanceType(encData));
        t2 = type$.int;
        return A.List_List$from(B.JSArray_methods.$add(t1, A.List_List$filled(32 - encData.length, 0, false, t2)), true, t2);
      }
    }
  };
  A.SubstratePath.prototype = {
    addElem$1(elem) {
      var t1 = A.List_List$of(this.elems, true, type$.SubstratePathElem);
      t1.push(elem);
      return new A.SubstratePath(t1);
    },
    toString$0(_) {
      return B.JSArray_methods.join$0(A.List_List$of(this, true, A._instanceType(this)._eval$1("Iterable.E")));
    },
    $index(_, idx) {
      return B.JSArray_methods.$index(this.elems, A._asInt(idx));
    },
    get$iterator(_) {
      var t1 = this.elems;
      return new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    }
  };
  A.SubstratePathParser_parse_closure.prototype = {
    call$1(match) {
      var t1 = type$.RegExpMatch._as(match)._match;
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      t1 = t1[0];
      t1.toString;
      return t1;
    },
    $signature: 232
  };
  A.SubstratePathParser_parse_closure0.prototype = {
    call$1(e) {
      var t1, t2;
      A._asString(e);
      t1 = new A.SubstratePathElem();
      t2 = false;
      if (B.JSString_methods.startsWith$1(e, "/") || B.JSString_methods.startsWith$1(e, "//"))
        if (B.JSString_methods.lastIndexOf$1(e, "/") < 2)
          t2 = A.stringReplaceAllUnchecked(e, "/", "").length !== 0;
      if (!t2)
        A.throwExpression(A.SubstratePathError$("Invalid path element (" + e + ")"));
      t1.__SubstratePathElem_elem_F = A.stringReplaceAllUnchecked(e, "/", "");
      t1.__SubstratePathElem_isHard_F = B.JSString_methods.startsWith$1(e, "//");
      return t1;
    },
    $signature: 236
  };
  A.SubstrateScaleEncoderBase.prototype = {};
  A.SubstrateScaleBytesEncoder.prototype = {
    encode$1(value) {
      var toBytes = A.StringUtils_encode(value, B.StringEncoding_1),
        t1 = A.List_List$of(B.C_SubstrateScaleCUintEncoder.encode$1(B.JSInt_methods.toString$0(toBytes.length)), true, type$.dynamic);
      B.JSArray_methods.addAll$1(t1, toBytes);
      return A.List_List$from(t1, true, type$.int);
    }
  };
  A.SubstrateScaleCUintEncoder.prototype = {
    encode$1(value) {
      var valueBytes, t1,
        v = A._BigIntImpl_parse(value, null);
      if (v.compareTo$1(0, $.$get$SubstrateScaleCUintEncoderConst_singleByteModeMaxVal()) <= 0)
        return A.BigintUtils_toBytes(v.$shl(0, 2), 1, B.C_Endian0);
      if (v.compareTo$1(0, $.$get$SubstrateScaleCUintEncoderConst_twoByteModeMaxVal()) <= 0)
        return A.BigintUtils_toBytes(v.$shl(0, 2).$or(0, A._BigIntImpl__BigIntImpl$from(1)), 2, B.C_Endian0);
      if (v.compareTo$1(0, $.$get$SubstrateScaleCUintEncoderConst_fourByteModeMaxVal()) <= 0)
        return A.BigintUtils_toBytes(v.$shl(0, 2).$or(0, A._BigIntImpl__BigIntImpl$from(2)), 4, B.C_Endian0);
      if (v.compareTo$1(0, $.$get$SubstrateScaleCUintEncoderConst_bigIntegerModeMaxVal()) <= 0) {
        valueBytes = A.BigintUtils_toBytes(v, A.BigintUtils_orderLen(v), B.C_Endian0);
        t1 = A.List_List$of(A.IntUtils_toBytes((valueBytes.length - 4 << 2 | 3) >>> 0, B.C_Endian0, 1), true, type$.dynamic);
        B.JSArray_methods.addAll$1(t1, valueBytes);
        return A.List_List$from(t1, true, type$.int);
      }
      throw A.wrapException(A.ArgumentException$("Out of range integer value (" + value + ")", null));
    }
  };
  A.SubstrateScaleUintEncoder.prototype = {};
  A.SubstrateScaleU8Encoder.prototype = {
    encode$1(value) {
      return A.SubstrateScaleUintEncoder__encodeWithBytesLength(value, 1);
    }
  };
  A.SubstrateScaleU16Encoder.prototype = {
    encode$1(value) {
      return A.SubstrateScaleUintEncoder__encodeWithBytesLength(value, 2);
    }
  };
  A.SubstrateScaleU32Encoder.prototype = {
    encode$1(value) {
      return A.SubstrateScaleUintEncoder__encodeWithBytesLength(value, 4);
    }
  };
  A.SubstrateScaleU64Encoder.prototype = {
    encode$1(value) {
      return A.SubstrateScaleUintEncoder__encodeWithBytesLength(value, 8);
    }
  };
  A.SubstrateScaleU128Encoder.prototype = {
    encode$1(value) {
      return A.SubstrateScaleUintEncoder__encodeWithBytesLength(value, 16);
    }
  };
  A.SubstrateScaleU256Encoder.prototype = {
    encode$1(value) {
      return A.SubstrateScaleUintEncoder__encodeWithBytesLength(value, 32);
    }
  };
  A.TonMnemonicEncoder.prototype = {
    encode$1(entropyBytes) {
      var entropyByteLen, t1, entropyBinStr, mnemonic, t2, i, i0, wordIdx;
      type$.List_int._as(entropyBytes);
      entropyByteLen = J.get$length$asx(entropyBytes);
      t1 = entropyByteLen * 8;
      if (!(t1 >= 88 && t1 <= 528))
        throw A.wrapException(A.MnemonicException$("Entropy byte length (" + entropyByteLen + ") is not valid"));
      entropyBinStr = A.BigintUtils_toBinary(A.BigintUtils_fromBytes(entropyBytes, B.C_Endian, false), t1);
      mnemonic = A._setArrayType([], type$.JSArray_String);
      for (t1 = entropyBinStr.length, t2 = this.wordsList._idxToWords, i = 0; i < t1; i = i0) {
        i0 = i + 11;
        if (i0 > t1)
          break;
        wordIdx = A.int_parse(B.JSString_methods.substring$2(entropyBinStr, i, i0), 2);
        if (!(wordIdx >= 0 && wordIdx < t2.length))
          return A.ioore(t2, wordIdx);
        B.JSArray_methods.add$1(mnemonic, t2[wordIdx]);
      }
      return new A.Bip39Mnemonic(A.List_List$unmodifiable(mnemonic, type$.String));
    }
  };
  A.TonMnemonicGenerator.prototype = {
    fromWordsNumber$2$password(wordsNum, password) {
      var entropyBitLen, t1, t2, t3, t4, mnemonic, t5,
        validator = new A.TomMnemonicValidator();
      for (entropyBitLen = wordsNum * 11, t1 = type$.List_int, t2 = this._ton_mnemonic_generator$_mnemonicEncoder, t3 = wordsNum >= 8, t4 = wordsNum > 48, mnemonic = null; true;) {
        if (!t3 || t4)
          A.throwExpression(B.MnemonicException_5Qm);
        t5 = B.JSNumber_methods.ceil$0(entropyBitLen / 8);
        mnemonic = t2.encode$1(t1._as($.$get$QuickCrypto__generateRandom().call$1(t5)));
        if (!validator.isValid$2$password(mnemonic, password))
          continue;
        break;
      }
      return mnemonic;
    }
  };
  A.TonMnemonicLanguages.prototype = {
    get$wordList() {
      switch (this) {
        case B.C_TonMnemonicLanguages:
          return A.bip39WordList(B.Bip39Languages_english);
        default:
          throw A.wrapException(B.MnemonicException_4e8);
      }
    },
    $isBip39Languages: 1,
    $isMnemonicLanguages: 1,
    get$name() {
      return "English";
    }
  };
  A.TomMnemonicValidator.prototype = {
    validate$2$password(mnemonic, password) {
      var entropy, scrypt, t2,
        t1 = mnemonic._mnemonicList;
      A.TonMnemonicGeneratorUtils_validateWordsNum(t1.length);
      if (password.length !== 0) {
        entropy = A.QuickCrypto_hmacSha512Hash(A.StringUtils_encode(B.JSArray_methods.join$1(t1, " "), B.StringEncoding_1), A.StringUtils_encode("", B.StringEncoding_1));
        scrypt = A.QuickCrypto_pbkdf2DeriveKey(null, 1, entropy, new A.CodeUnits("TON fast seed version"));
        if (0 >= scrypt.length)
          return A.ioore(scrypt, 0);
        t2 = !(J.$eq$(scrypt[0], 1) && !A.TonEntropyGeneratorUtils_isBasicSeed(entropy));
      } else
        t2 = false;
      if (t2)
        throw A.wrapException(B.MnemonicException_ijv);
      if (!A.TonEntropyGeneratorUtils_isBasicSeed(A.QuickCrypto_hmacSha512Hash(A.StringUtils_encode(B.JSArray_methods.join$1(t1, " "), B.StringEncoding_1), A.StringUtils_encode(password, B.StringEncoding_1))))
        throw A.wrapException(B.MnemonicException_i2q);
    },
    isValid$2$password(mnemonic, password) {
      var exception;
      try {
        this.validate$2$password(mnemonic, password);
        return true;
      } catch (exception) {
        return false;
      }
    }
  };
  A.CborObject_CborObject$fromDynamic_closure.prototype = {
    call$1(e) {
      return A.CborObject_CborObject$fromDynamic(e);
    },
    $signature: 237
  };
  A.CborException.prototype = {};
  A.CborBase64Types.prototype = {};
  A.CborBaseUrlValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(this.type.tag);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(new A.CborStringValue(this.value)._encode$0()));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.value;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborBaseUrlValue))
        return false;
      return this.value === other.value && this.type.tag === other.type.tag;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value) ^ B.JSInt_methods.get$hashCode(B.JSArray_methods.get$first(this.type.tag));
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborBigFloatValue.prototype = {
    get$value() {
      return A._setArrayType([this.exponent, this.mantissa], type$.JSArray_BigInt);
    },
    encode$0() {
      var t2, _this = this,
        t1 = A._setArrayType([], type$.JSArray_int),
        bytes = new A.CborBytesTracker(t1);
      bytes.pushTags$1(B.List_5);
      bytes.pushInt$2(4, 2);
      t2 = type$.List_int;
      B.JSArray_methods.addAll$1(t1, t2._as(_this._encodeValue$1(_this.exponent)));
      B.JSArray_methods.addAll$1(t1, t2._as(_this._encodeValue$1(_this.mantissa)));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    _encodeValue$1(value) {
      if (value.get$bitLength(0) > 64)
        return new A.CborBigIntValue(value).encode$0();
      return new A.CborSafeIntValue(value).encode$0();
    },
    toString$0(_) {
      return this.exponent.toString$0(0) + ", " + this.mantissa.toString$0(0);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.CborBigFloatValue))
        return false;
      t1 = type$.JSArray_BigInt;
      return A.CompareUtils_iterableIsEqual(A._setArrayType([this.exponent, this.mantissa], t1), A._setArrayType([other.exponent, other.mantissa], t1), type$.BigInt);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(A._setArrayType([this.exponent, this.mantissa], type$.JSArray_BigInt));
    },
    $isCborObject: 1
  };
  A.CborBigIntValue.prototype = {
    encode$0() {
      var toBytes,
        t1 = A._setArrayType([], type$.JSArray_int),
        bytes = new A.CborBytesTracker(t1),
        v = this.value;
      if (v._isNegative) {
        bytes.pushTags$1(B.List_3);
        v = v.$not(0);
      } else
        bytes.pushTags$1(B.List_2);
      toBytes = A.BigintUtils_toBytes(v, B.JSInt_methods._tdivFast$1((v._isNegative ? v.$negate(0) : v).get$bitLength(0) + 7, 8), B.C_Endian);
      bytes.pushInt$2(2, toBytes.length);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(toBytes));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toBigInt$0() {
      return this.value;
    },
    toString$0(_) {
      return this.value.toString$0(0);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.CborBigIntValue))
        return false;
      t1 = this.value.compareTo$1(0, other.value);
      return t1 === 0;
    },
    get$hashCode(_) {
      return this.value.get$hashCode(0);
    },
    $isCborObject: 1,
    $isCborNumeric: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborBoleanValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int),
        t2 = this.value ? 21 : 20;
      new A.CborBytesTracker(t1).pushInt$2(7, t2);
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return B.JSBool_methods.toString$0(this.value);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborBoleanValue))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSBool_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborBytesValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int),
        t2 = this.value;
      new A.CborBytesTracker(t1).pushInt$2(2, t2.length);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(t2));
      return t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborBytesValue))
        return false;
      return A.BytesUtils_bytesEqual(other.value, this.value);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this.value);
    },
    toString$0(_) {
      return A.BytesUtils_toHexString(this.value, true, null);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborDynamicBytesValue.prototype = {
    encode$0() {
      var t3, t4, t5, _i, v,
        t1 = type$.JSArray_int,
        t2 = A._setArrayType([], t1),
        bytes = new A.CborBytesTracker(t2);
      bytes.pushIndefinite$1(2);
      for (t3 = this.value, t4 = t3.length, t5 = type$.List_int, _i = 0; _i < t4; ++_i) {
        v = t3[_i];
        bytes.pushInt$2(2, J.get$length$asx(v));
        B.JSArray_methods.addAll$1(t2, t5._as(v));
      }
      B.JSArray_methods.addAll$1(t2, t5._as(A._setArrayType([255], t1)));
      return t2;
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this.value, "[", "]");
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborDynamicBytesValue))
        return false;
      return A.CompareUtils_iterableIsEqual(this.value, other.value, type$.List_int);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborDynamicBytesValue_closure.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return A.List_List$unmodifiable(e, type$.int);
    },
    $signature: 2
  };
  A.CborTagValue.prototype = {
    get$value() {
      return this._cbor_tag$_value;
    },
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(this.tags);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(A.CborObject_CborObject$fromDynamic(this._cbor_tag$_value).encode$0()));
      return t1;
    },
    toString$0(_) {
      return J.toString$0$(this._cbor_tag$_value);
    },
    $isCborObject: 1
  };
  A._CborDate.prototype = {
    _getTags$0() {
      if (this instanceof A.CborStringDateValue)
        return B.List_0;
      return B.List_1;
    },
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(this._getTags$0());
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(this._datetime$_encode$0()));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.get$value().toIso8601String$0();
    },
    $eq(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (!(other instanceof A._CborDate))
        return false;
      if (A.getRuntimeTypeOfDartObject(other) !== A.getRuntimeTypeOfDartObject(this))
        return false;
      t1 = this.get$value();
      t2 = other.get$value();
      return 1000 * t1._core$_value + t1._microsecond === 1000 * t2._core$_value + t2._microsecond;
    },
    get$hashCode(_) {
      var t1 = this.get$value();
      return A.Object_hash(t1._core$_value, t1._microsecond, B.C_SentinelValue, B.C_SentinelValue);
    },
    $isCborObject: 1
  };
  A.CborStringDateValue.prototype = {
    _datetime$_encode$0() {
      var timeZoneOffsetSign, timeZoneOffsetMinutes, timeZoneOffsetFormatted, _s1_ = "0",
        t1 = this.value,
        year = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getYear(t1)), 4, _s1_),
        month = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getMonth(t1)), 2, _s1_),
        day = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getDay(t1)), 2, _s1_),
        hour = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getHours(t1)), 2, _s1_),
        minute = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getMinutes(t1)), 2, _s1_),
        second = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getSeconds(t1)), 2, _s1_),
        t2 = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getMilliseconds(t1)), 3, _s1_),
        t3 = A.RegExp_RegExp("0*$", true),
        millisecond = A.stringReplaceAllUnchecked(t2, t3, "");
      t2 = t1.isUtc;
      t1 = (t2 ? B.Duration_0 : t1.get$timeZoneOffset())._duration;
      timeZoneOffsetSign = t1 < 0 ? "-" : "+";
      t3 = B.JSInt_methods._tdivFast$1(t1, 3600000000);
      timeZoneOffsetMinutes = B.JSInt_methods.$mod(Math.abs(B.JSInt_methods._tdivFast$1(t1, 60000000)), 60);
      timeZoneOffsetFormatted = t2 ? "Z" : timeZoneOffsetSign + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(Math.abs(t3)), 2, _s1_) + ":" + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(timeZoneOffsetMinutes), 2, _s1_);
      return new A.CborStringValue(year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":" + second + "." + millisecond + timeZoneOffsetFormatted)._encode$0();
    },
    get$value() {
      return this.value;
    }
  };
  A.CborEpochFloatValue.prototype = {
    _datetime$_encode$0() {
      return new A.CborFloatValue(this.value._core$_value / 1000).encode$0();
    },
    get$value() {
      return this.value;
    }
  };
  A.CborEpochIntValue.prototype = {
    _datetime$_encode$0() {
      return new A.CborIntValue(B.JSNumber_methods.round$0(this.value._core$_value / 1000)).encode$0();
    },
    get$value() {
      return this.value;
    }
  };
  A.CborDecimalFracValue.prototype = {
    get$value() {
      return A._setArrayType([this.exponent, this.mantissa], type$.JSArray_BigInt);
    },
    encode$0() {
      var t2, _this = this,
        t1 = A._setArrayType([], type$.JSArray_int),
        bytes = new A.CborBytesTracker(t1);
      bytes.pushTags$1(B.List_4);
      bytes.pushInt$2(4, 2);
      t2 = type$.List_int;
      B.JSArray_methods.addAll$1(t1, t2._as(_this._decimal$_encodeValue$1(_this.exponent)));
      B.JSArray_methods.addAll$1(t1, t2._as(_this._decimal$_encodeValue$1(_this.mantissa)));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    _decimal$_encodeValue$1(value) {
      if (value.get$bitLength(0) > 64)
        return new A.CborBigIntValue(value).encode$0();
      return new A.CborSafeIntValue(value).encode$0();
    },
    toString$0(_) {
      return B.JSArray_methods.join$1(A._setArrayType([this.exponent, this.mantissa], type$.JSArray_BigInt), ", ");
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.CborDecimalFracValue))
        return false;
      t1 = type$.JSArray_BigInt;
      return A.CompareUtils_iterableIsEqual(A._setArrayType([this.exponent, this.mantissa], t1), A._setArrayType([other.exponent, other.mantissa], t1), type$.BigInt);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(A._setArrayType([this.exponent, this.mantissa], type$.JSArray_BigInt));
    },
    $isCborObject: 1
  };
  A.CborFloatValue.prototype = {
    encode$0() {
      var value, toBytes,
        t1 = type$.JSArray_int,
        t2 = A._setArrayType([], t1),
        bytes = new A.CborBytesTracker(t2),
        t3 = this.value;
      if (isNaN(t3)) {
        bytes.pushMajorTag$2(7, 25);
        B.JSArray_methods.addAll$1(t2, type$.List_int._as(A._setArrayType([126, 0], t1)));
        A.BytesUtils_validateListOfBytes(t2);
        return t2;
      }
      value = this.__CborFloatValue__decodFloat_FI;
      if (value === $) {
        value !== $ && A.throwLateFieldADI("_decodFloat");
        value = this.__CborFloatValue__decodFloat_FI = new A.FloatUtils(t3);
      }
      toBytes = value.toBytes$1(null);
      bytes.pushMajorTag$2(7, toBytes.item2.get$numBytes());
      B.JSArray_methods.addAll$1(t2, type$.List_int._as(toBytes.item1));
      A.BytesUtils_validateListOfBytes(t2);
      return t2;
    },
    toString$0(_) {
      return B.JSNumber_methods.toString$0(this.value);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.CborFloatValue))
        return false;
      t1 = other.value;
      return this.value === t1;
    },
    get$hashCode(_) {
      return B.JSNumber_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborIntValue.prototype = {
    encode$0() {
      var value, t3,
        t1 = A._setArrayType([], type$.JSArray_int),
        bytes = new A.CborBytesTracker(t1),
        t2 = this.value;
      if (B.JSInt_methods.get$bitLength(t2) > 31 && B.JSInt_methods.get$isNegative(t2)) {
        value = A._BigIntImpl_parse(B.JSInt_methods.toString$0(t2), null).$not(0);
        if (!value.get$isValidInt())
          throw A.wrapException(A.CborException$("Value is to large for encoding as CborInteger", A.LinkedHashMap_LinkedHashMap$_literal(["value", B.JSInt_methods.toString$0(t2)], type$.String, type$.dynamic)));
        bytes.pushInt$2(1, value.toInt$0(0));
      } else {
        t3 = B.JSInt_methods.get$isNegative(t2) ? 1 : 0;
        bytes.pushInt$2(t3, B.JSInt_methods.get$isNegative(t2) ? ~t2 >>> 0 : t2);
      }
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toBigInt$0() {
      return A._BigIntImpl__BigIntImpl$from(this.value);
    },
    toInt$0(_) {
      return this.value;
    },
    toString$0(_) {
      return B.JSInt_methods.toString$0(this.value);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!type$.CborNumeric._is(other))
        return false;
      if (other instanceof A.CborBigIntValue)
        return false;
      t1 = A._BigIntImpl__BigIntImpl$from(this.value).compareTo$1(0, other.toBigInt$0());
      return t1 === 0;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    $isCborNumeric: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborSafeIntValue.prototype = {
    encode$0() {
      var t2, t3, t4,
        t1 = this.value;
      if (t1.get$isValidInt())
        return new A.CborIntValue(t1.toInt$0(0)).encode$0();
      t2 = A._setArrayType([], type$.JSArray_int);
      t3 = t1._isNegative;
      t4 = t3 ? 1 : 0;
      new A.CborBytesTracker(t2).pushMajorTag$2(t4, 27);
      B.JSArray_methods.addAll$1(t2, type$.List_int._as(A.BigintUtils_toBytes(t3 ? t1.$not(0) : t1, 8, B.C_Endian)));
      A.BytesUtils_validateListOfBytes(t2);
      return t2;
    },
    toBigInt$0() {
      return this.value;
    },
    toInt$0(_) {
      return this.value.toInt$0(0);
    },
    toString$0(_) {
      return this.value.toString$0(0);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!type$.CborNumeric._is(other))
        return false;
      if (other instanceof A.CborBigIntValue)
        return false;
      t1 = this.value.compareTo$1(0, other.toBigInt$0());
      return t1 === 0;
    },
    get$hashCode(_) {
      return this.value.get$hashCode(0);
    },
    $isCborObject: 1,
    $isCborNumeric: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborListValue.prototype = {
    encode$0() {
      var t4, t5,
        t1 = type$.JSArray_int,
        t2 = A._setArrayType([], t1),
        bytes = new A.CborBytesTracker(t2),
        t3 = this._isFixedLength;
      if (t3)
        bytes.pushInt$2(4, J.get$length$asx(this.value));
      else
        bytes.pushIndefinite$1(4);
      for (t4 = J.get$iterator$ax(this.value), t5 = type$.List_int; t4.moveNext$0();)
        B.JSArray_methods.addAll$1(t2, t5._as(A.CborObject_CborObject$fromDynamic(t4.get$current()).encode$0()));
      if (!t3)
        B.JSArray_methods.addAll$1(t2, t5._as(A._setArrayType([255], t1)));
      A.BytesUtils_validateListOfBytes(t2);
      return t2;
    },
    toString$0(_) {
      return J.join$1$ax(this.value, ",");
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborMapValue.prototype = {
    encode$0() {
      var t4, t5, t6,
        t1 = type$.JSArray_int,
        t2 = A._setArrayType([], t1),
        bytes = new A.CborBytesTracker(t2),
        t3 = this._map$_isFixedLength;
      if (t3)
        bytes.pushInt$2(5, this.value.__js_helper$_length);
      else
        bytes.pushIndefinite$1(5);
      for (t4 = this.value.get$entries(), t4 = t4.get$iterator(t4), t5 = type$.List_int; t4.moveNext$0();) {
        t6 = t4.get$current();
        B.JSArray_methods.addAll$1(t2, t5._as(A.CborObject_CborObject$fromDynamic(t6.key).encode$0()));
        B.JSArray_methods.addAll$1(t2, t5._as(A.CborObject_CborObject$fromDynamic(t6.value).encode$0()));
      }
      if (!t3)
        B.JSArray_methods.addAll$1(t2, t5._as(A._setArrayType([255], t1)));
      A.BytesUtils_validateListOfBytes(t2);
      return t2;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborMimeValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(B.List_36);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(new A.CborStringValue(this.value)._encode$0()));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.value;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborMimeValue))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborNullValue.prototype = {
    get$value() {
      return null;
    },
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushInt$2(7, 22);
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return "null";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborNullValue))
        return false;
      return true;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode("null");
    },
    $isCborObject: 1
  };
  A.CborUndefinedValue.prototype = {
    get$value() {
      return null;
    },
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushInt$2(7, 23);
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return "undefined";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborUndefinedValue))
        return false;
      return true;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode("undefined");
    },
    $isCborObject: 1
  };
  A.CborRegxpValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(B.List_35);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(new A.CborStringValue(this.value)._encode$0()));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.value;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborRegxpValue))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborSetValue.prototype = {
    encode$0() {
      var t2, t3, t4, v,
        t1 = A._setArrayType([], type$.JSArray_int),
        bytes = new A.CborBytesTracker(t1);
      bytes.pushTags$1(B.List_258);
      t2 = this.value;
      bytes.pushInt$2(4, t2._collection$_length);
      for (t2 = A._LinkedHashSetIterator$(t2, t2._collection$_modifications, A._instanceType(t2)._precomputed1), t3 = type$.List_int, t4 = t2.$ti._precomputed1; t2.moveNext$0();) {
        v = t2._collection$_current;
        B.JSArray_methods.addAll$1(t1, t3._as(A.CborObject_CborObject$fromDynamic(v == null ? t4._as(v) : v).encode$0()));
      }
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.value.join$1(0, ",");
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborSetValue))
        return false;
      return A.CompareUtils_iterableIsEqual(this.value, other.value, type$.dynamic);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborString.prototype = {
    encode$0() {
      return this._encode$0();
    },
    $isCborObject: 1
  };
  A.CborStringValue.prototype = {
    _encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int),
        toBytes = A.StringUtils_encode(this.value, B.StringEncoding_1);
      new A.CborBytesTracker(t1).pushInt$2(3, toBytes.length);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(toBytes));
      return t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborStringValue))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value);
    },
    toString$0(_) {
      return this.value;
    },
    get$value() {
      return this.value;
    }
  };
  A.CborIndefiniteStringValue.prototype = {
    _encode$0() {
      var t3, t4, t5, _i, toBytes,
        t1 = type$.JSArray_int,
        t2 = A._setArrayType([], t1),
        bytes = new A.CborBytesTracker(t2);
      bytes.pushIndefinite$1(3);
      for (t3 = this.value, t4 = t3.length, t5 = type$.List_int, _i = 0; _i < t4; ++_i) {
        toBytes = A.StringUtils_encode(t3[_i], B.StringEncoding_1);
        bytes.pushInt$2(3, toBytes.length);
        B.JSArray_methods.addAll$1(t2, t5._as(toBytes));
      }
      B.JSArray_methods.addAll$1(t2, t5._as(A._setArrayType([255], t1)));
      A.BytesUtils_validateListOfBytes(t2);
      return t2;
    },
    toString$0(_) {
      return B.JSArray_methods.join$1(this.value, ", ");
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborIndefiniteStringValue))
        return false;
      return A.CompareUtils_iterableIsEqual(this.value, other.value, type$.String);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this.value);
    },
    get$value() {
      return this.value;
    }
  };
  A.CborUriValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(B.List_32);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(new A.CborStringValue(this.value)._encode$0()));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.value;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborUriValue))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A._DecodeCborResult.prototype = {
    get$value() {
      return this.value;
    }
  };
  A.CborUtils__decodeUtf8String_closure.prototype = {
    call$1(e) {
      return type$.CborStringValue._as(e).value;
    },
    $signature: 45
  };
  A.CborUtils__toStringObject_closure.prototype = {
    call$1(element) {
      return A.BytesUtils_bytesEqual(this.tags, type$.CborBase64Types._as(element).tag);
    },
    $signature: 118
  };
  A.CborUtils__toStringObject_closure0.prototype = {
    call$1(element) {
      return A.BytesUtils_bytesEqual(this.tags, type$.CborBase64Types._as(element).tag);
    },
    $signature: 118
  };
  A.CborUtils__decodeBytesString_closure.prototype = {
    call$1(e) {
      return type$.CborBytesValue._as(e).value;
    },
    $signature: 245
  };
  A.CborBytesTracker.prototype = {
    pushTags$1(tags) {
      var t1, _i;
      type$.List_int._as(tags);
      for (t1 = tags.length, _i = 0; _i < t1; ++_i)
        this.pushInt$2(6, tags[_i]);
    },
    pushIndefinite$1(majorTag) {
      B.JSArray_methods.addAll$1(this._dynamic_bytes$_buffer, type$.List_int._as(A._setArrayType([(majorTag << 5 | 31) >>> 0], type$.JSArray_int)));
    },
    pushMajorTag$2(majorTag, value) {
      B.JSArray_methods.addAll$1(this._dynamic_bytes$_buffer, type$.List_int._as(A._setArrayType([(majorTag << 5 | value) >>> 0], type$.JSArray_int)));
    },
    pushInt$2(majorTag, value) {
      var len,
        $length = this.bytesLength$1(value),
        t1 = $length == null,
        t2 = t1 ? value : $length,
        t3 = type$.List_int,
        t4 = this._dynamic_bytes$_buffer;
      B.JSArray_methods.addAll$1(t4, t3._as(A._setArrayType([(majorTag << 5 | t2) >>> 0], type$.JSArray_int)));
      if (t1)
        return;
      len = B.JSInt_methods.$shl(1, $length - 24);
      if (len <= 4)
        B.JSArray_methods.addAll$1(t4, t3._as(A.IntUtils_toBytes(value, B.C_Endian, len)));
      else
        B.JSArray_methods.addAll$1(t4, t3._as(A.BigintUtils_toBytes(A._BigIntImpl__BigIntImpl$from(value), 8, B.C_Endian)));
    },
    bytesLength$1(value) {
      if (value < 24)
        return null;
      else if (value <= 255)
        return 24;
      else if (value <= 65535)
        return 25;
      else if (value <= 4294967295)
        return 26;
      else
        return 27;
    }
  };
  A.FloatLength.prototype = {
    get$numBytes() {
      switch (this) {
        case B.FloatLength_11_52:
          return 27;
        case B.FloatLength_8_23:
          return 26;
        default:
          return 25;
      }
    }
  };
  A.FloatUtils.prototype = {
    get$_isLess() {
      var result, _this = this,
        value = _this.__FloatUtils__isLess_FI;
      if (value === $) {
        result = A.FloatUtils__isLessThan(_this.value);
        _this.__FloatUtils__isLess_FI !== $ && A.throwLateFieldADI("_isLess");
        _this.set$__FloatUtils__isLess_FI(result);
        value = result;
      }
      return value;
    },
    _encodeFloat16$1(endianness) {
      var t1, $length, float32Bits, sign, exponent, fraction, newExponent, uint8List,
        float16View = new Uint16Array(1),
        float32View = new Float32Array(1);
      float32View[0] = this.value;
      t1 = A.NativeUint8List_NativeUint8List$view(float32View.buffer, 0, null).buffer;
      A._checkViewArguments(t1, 0, null);
      $length = B.JSInt_methods._tdivFast$1(t1.byteLength, 4);
      t1 = new Uint32Array(t1, 0, $length);
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      float32Bits = t1[0];
      sign = float32Bits >>> 31 & 1;
      exponent = float32Bits >>> 23 & 255;
      fraction = float32Bits & 8388607;
      if (exponent === 0)
        float16View[0] = sign << 15 | fraction >>> 13 & 1023;
      else if (exponent === 255)
        float16View[0] = sign << 15 | 31744;
      else {
        newExponent = exponent - 127 + 15;
        if (newExponent < 0)
          float16View[0] = sign << 15;
        else {
          t1 = sign << 15;
          if (newExponent > 31)
            float16View[0] = t1 | 31744;
          else
            float16View[0] = (t1 | newExponent << 10 | fraction >>> 13 & 1023) >>> 0;
        }
      }
      uint8List = A.NativeUint8List_NativeUint8List$view(float16View.buffer, 0, null);
      if (1 >= uint8List.length)
        return A.ioore(uint8List, 1);
      t1 = A.List_List$from([uint8List[1], uint8List[0]], true, type$.int);
      return t1;
    },
    _encodeFloat64$1(endianness) {
      var byteData = new DataView(new ArrayBuffer(8));
      B.NativeByteData_methods._setFloat64$3(byteData, 0, this.value, false);
      return A.NativeUint8List_NativeUint8List$view(byteData.buffer, 0, null);
    },
    _encodeFloat32$1(endianness) {
      var byteData = new DataView(new ArrayBuffer(4));
      B.NativeByteData_methods._setFloat32$3(byteData, 0, this.value, false);
      return A.NativeUint8List_NativeUint8List$view(byteData.buffer, 0, null);
    },
    toBytes$1(decodFloatType) {
      var _this = this;
      if (_this.get$_isLess().item1)
        return new A.Tuple(_this._encodeFloat16$1(null), B.FloatLength_5_10, type$.Tuple_of_List_int_and_FloatLength);
      else if (_this.get$_isLess().item2)
        return new A.Tuple(_this._encodeFloat32$1(null), B.FloatLength_8_23, type$.Tuple_of_List_int_and_FloatLength);
      return new A.Tuple(_this._encodeFloat64$1(null), B.FloatLength_11_52, type$.Tuple_of_List_int_and_FloatLength);
    },
    set$__FloatUtils__isLess_FI(__FloatUtils__isLess_FI) {
      this.__FloatUtils__isLess_FI = type$.Tuple_bool_bool._as(__FloatUtils__isLess_FI);
    },
    get$value() {
      return this.value;
    }
  };
  A.AES.prototype = {
    setKey$2(key, noDecryption) {
      var t1, t2, _this = this;
      type$.List_int._as(key);
      t1 = key.length;
      if (t1 !== 16 && t1 !== 24 && t1 !== 32)
        throw A.wrapException(B.ArgumentException_SN3);
      t2 = _this.__AES__keyLen_A;
      t2 === $ && A.throwLateFieldNI("_keyLen");
      if (t2 !== t1)
        throw A.wrapException(B.ArgumentException_8gb);
      if (_this._encKey == null)
        _this.set$_encKey(A.List_List$filled(t1 + 28, 0, false, type$.int));
      if (_this._decKey == null)
        _this.set$_decKey(A.List_List$filled(key.length + 28, 0, false, type$.int));
      t1 = $.$get$AES__lib();
      t2 = _this._encKey;
      t2.toString;
      t1.expandKey$3(key, t2, _this._decKey);
      return _this;
    },
    set$_encKey(_encKey) {
      this._encKey = type$.nullable_List_int._as(_encKey);
    },
    set$_decKey(_decKey) {
      this._decKey = type$.nullable_List_int._as(_decKey);
    },
    $isBlockCipher: 1
  };
  A.AESLib.prototype = {
    initialize$0() {
      var t1, t2, t3, t4, t5, i, s, t6, t7, w, t8, t9, _this = this,
        mul = new A.AESLib_initialize_mul(),
        _rot24 = new A.AESLib_initialize__rot24();
      for (t1 = _this._sbox0, t2 = _this._te0, t3 = _this._te1, t4 = _this._te2, t5 = _this._te3, i = 0; i < 256; ++i) {
        if (!(i < t1.length))
          return A.ioore(t1, i);
        s = t1[i];
        t6 = mul.call$2(s, 2);
        if (typeof t6 !== "number")
          return t6.$shl();
        t7 = mul.call$2(s, 3);
        if (typeof t7 !== "number")
          return A.iae(t7);
        w = (t6 << 24 | s << 16 | s << 8 | t7) >>> 0;
        B.JSArray_methods.$indexSet(t2, i, w);
        w = _rot24.call$1(w);
        B.JSArray_methods.$indexSet(t3, i, w);
        w = _rot24.call$1(w);
        B.JSArray_methods.$indexSet(t4, i, w);
        w = _rot24.call$1(w);
        B.JSArray_methods.$indexSet(t5, i, w);
        _rot24.call$1(w);
      }
      for (t1 = _this._sbox1, t2 = _this._td0, t3 = _this._td1, t4 = _this._td2, t5 = _this._td3, i = 0; i < 256; ++i) {
        if (!(i < t1.length))
          return A.ioore(t1, i);
        s = t1[i];
        t6 = mul.call$2(s, 14);
        if (typeof t6 !== "number")
          return t6.$shl();
        t7 = mul.call$2(s, 9);
        if (typeof t7 !== "number")
          return t7.$shl();
        t8 = mul.call$2(s, 13);
        if (typeof t8 !== "number")
          return t8.$shl();
        t9 = mul.call$2(s, 11);
        if (typeof t9 !== "number")
          return A.iae(t9);
        w = (t6 << 24 | t7 << 16 | t8 << 8 | t9) >>> 0;
        B.JSArray_methods.$indexSet(t2, i, w);
        w = _rot24.call$1(w);
        B.JSArray_methods.$indexSet(t3, i, w);
        w = _rot24.call$1(w);
        B.JSArray_methods.$indexSet(t4, i, w);
        w = _rot24.call$1(w);
        B.JSArray_methods.$indexSet(t5, i, w);
        _rot24.call$1(w);
      }
    },
    _subw$1(w) {
      var t4, t5, t6,
        t1 = this._sbox0,
        t2 = w >>> 24 & 255,
        t3 = t1.length;
      if (!(t2 < t3))
        return A.ioore(t1, t2);
      t2 = t1[t2];
      if (typeof t2 !== "number")
        return t2.$shl();
      t4 = w >>> 16 & 255;
      if (!(t4 < t3))
        return A.ioore(t1, t4);
      t4 = t1[t4];
      if (typeof t4 !== "number")
        return t4.$shl();
      t5 = w >>> 8 & 255;
      if (!(t5 < t3))
        return A.ioore(t1, t5);
      t5 = t1[t5];
      if (typeof t5 !== "number")
        return t5.$shl();
      t6 = w & 255;
      if (!(t6 < t3))
        return A.ioore(t1, t6);
      t6 = t1[t6];
      if (typeof t6 !== "number")
        return A.iae(t6);
      return (t2 << 24 | t4 << 16 | t5 << 8 | t6) >>> 0;
    },
    expandKey$3(key, encKey, decKey) {
      var nk, n, i, t2, t3, t, t4, t5, ei, t6, i0, t7, j, t8, x, t9, t10, t11, _this = this,
        t1 = type$.List_int;
      t1._as(key);
      t1._as(encKey);
      type$.nullable_List_int._as(decKey);
      nk = key.length / 4 | 0;
      n = encKey.length;
      for (i = 0; i < nk; ++i)
        B.JSArray_methods.$indexSet(encKey, i, A.readUint32BE(key, i * 4));
      for (t1 = nk > 6, t2 = _this._powx, i = nk; i < n; ++i) {
        t3 = i - 1;
        if (!(t3 >= 0))
          return A.ioore(encKey, t3);
        t = encKey[t3];
        t3 = B.JSInt_methods.$mod(i, nk);
        if (t3 === 0) {
          t3 = _this._subw$1((t << 8 | t >>> 24) >>> 0);
          t4 = B.JSInt_methods.$tdiv(i, nk) - 1;
          if (!(t4 >= 0 && t4 < t2.length))
            return A.ioore(t2, t4);
          t4 = t2[t4];
          if (typeof t4 !== "number")
            return t4.$shl();
          t = t3 ^ t4 << 24;
        } else if (t1 && t3 === 4)
          t = _this._subw$1(t);
        t3 = i - nk;
        if (!(t3 >= 0))
          return A.ioore(encKey, t3);
        B.JSArray_methods.$indexSet(encKey, i, (encKey[t3] ^ t) >>> 0);
      }
      if (decKey != null)
        for (t1 = _this._td0, t2 = _this._sbox0, t3 = _this._td1, t4 = _this._td2, t5 = _this._td3, i = 0; i < n; i = i0) {
          ei = n - i - 4;
          for (t6 = i > 0, i0 = i + 4, t7 = i0 < n, j = 0; j < 4; ++j) {
            t8 = ei + j;
            if (!(t8 >= 0))
              return A.ioore(encKey, t8);
            x = encKey[t8];
            if (t6 && t7) {
              t8 = x >>> 24 & 255;
              if (!(t8 < t2.length))
                return A.ioore(t2, t8);
              t8 = B.JSArray_methods.$index(t1, t2[t8]);
              t9 = x >>> 16 & 255;
              if (!(t9 < t2.length))
                return A.ioore(t2, t9);
              t9 = B.JSArray_methods.$index(t3, t2[t9]);
              t10 = x >>> 8 & 255;
              if (!(t10 < t2.length))
                return A.ioore(t2, t10);
              t10 = B.JSArray_methods.$index(t4, t2[t10]);
              t11 = x & 255;
              if (!(t11 < t2.length))
                return A.ioore(t2, t11);
              x = (t8 ^ t9 ^ t10 ^ B.JSArray_methods.$index(t5, t2[t11])) >>> 0;
            }
            B.JSArray_methods.$indexSet(decKey, i + j, x);
          }
        }
    },
    encryptBlock$3(xk, src, dst) {
      var s0, s1, s2, s3, nr, t2, t3, t4, t5, t00, t10, t20, t30, k, r, t6, t7, t8, t9, t11, t12, t13, t14, t15, t16, t17, t18, _this = this,
        t1 = type$.List_int;
      t1._as(xk);
      t1._as(src);
      t1._as(dst);
      s0 = A.readUint32BE(src, 0);
      s1 = A.readUint32BE(src, 4);
      s2 = A.readUint32BE(src, 8);
      s3 = A.readUint32BE(src, 12);
      t1 = xk.length;
      if (0 >= t1)
        return A.ioore(xk, 0);
      s0 ^= xk[0];
      if (1 >= t1)
        return A.ioore(xk, 1);
      s1 ^= xk[1];
      if (2 >= t1)
        return A.ioore(xk, 2);
      s2 ^= xk[2];
      if (3 >= t1)
        return A.ioore(xk, 3);
      s3 ^= xk[3];
      nr = (t1 / 4 | 0) - 2;
      for (t2 = _this._te0, t3 = _this._te1, t4 = _this._te2, t5 = _this._te3, t00 = 0, t10 = 0, t20 = 0, t30 = 0, k = 4, r = 0; r < nr; ++r, s3 = t30, s2 = t20, s1 = t10, s0 = t00) {
        if (!(k < t1))
          return A.ioore(xk, k);
        t00 = xk[k] ^ t2[s0 >>> 24 & 255] ^ t3[s1 >>> 16 & 255] ^ t4[s2 >>> 8 & 255] ^ t5[s3 & 255];
        t6 = k + 1;
        if (!(t6 < t1))
          return A.ioore(xk, t6);
        t10 = xk[t6] ^ t2[s1 >>> 24 & 255] ^ t3[s2 >>> 16 & 255] ^ t4[s3 >>> 8 & 255] ^ t5[s0 & 255];
        t6 = k + 2;
        if (!(t6 < t1))
          return A.ioore(xk, t6);
        t20 = xk[t6] ^ t2[s2 >>> 24 & 255] ^ t3[s3 >>> 16 & 255] ^ t4[s0 >>> 8 & 255] ^ t5[s1 & 255];
        t6 = k + 3;
        if (!(t6 < t1))
          return A.ioore(xk, t6);
        t30 = xk[t6] ^ t2[s3 >>> 24 & 255] ^ t3[s0 >>> 16 & 255] ^ t4[s1 >>> 8 & 255] ^ t5[s2 & 255];
        k += 4;
      }
      t2 = _this._sbox0;
      t3 = t00 >>> 24;
      t4 = t2.length;
      if (!(t3 < t4))
        return A.ioore(t2, t3);
      t3 = t2[t3];
      if (typeof t3 !== "number")
        return t3.$shl();
      t5 = t10 >>> 16 & 255;
      if (!(t5 < t4))
        return A.ioore(t2, t5);
      t5 = t2[t5];
      if (typeof t5 !== "number")
        return t5.$shl();
      t6 = t20 >>> 8 & 255;
      if (!(t6 < t4))
        return A.ioore(t2, t6);
      t6 = t2[t6];
      if (typeof t6 !== "number")
        return t6.$shl();
      t7 = t30 & 255;
      if (!(t7 < t4))
        return A.ioore(t2, t7);
      t7 = t2[t7];
      if (typeof t7 !== "number")
        return A.iae(t7);
      t8 = t10 >>> 24;
      if (!(t8 < t4))
        return A.ioore(t2, t8);
      t8 = t2[t8];
      if (typeof t8 !== "number")
        return t8.$shl();
      t9 = t20 >>> 16 & 255;
      if (!(t9 < t4))
        return A.ioore(t2, t9);
      t9 = t2[t9];
      if (typeof t9 !== "number")
        return t9.$shl();
      t11 = t30 >>> 8 & 255;
      if (!(t11 < t4))
        return A.ioore(t2, t11);
      t11 = t2[t11];
      if (typeof t11 !== "number")
        return t11.$shl();
      t12 = t00 & 255;
      if (!(t12 < t4))
        return A.ioore(t2, t12);
      t12 = t2[t12];
      if (typeof t12 !== "number")
        return A.iae(t12);
      t13 = t20 >>> 24;
      if (!(t13 < t4))
        return A.ioore(t2, t13);
      t13 = t2[t13];
      if (typeof t13 !== "number")
        return t13.$shl();
      t14 = t30 >>> 16 & 255;
      if (!(t14 < t4))
        return A.ioore(t2, t14);
      t14 = t2[t14];
      if (typeof t14 !== "number")
        return t14.$shl();
      t15 = t00 >>> 8 & 255;
      if (!(t15 < t4))
        return A.ioore(t2, t15);
      t15 = t2[t15];
      if (typeof t15 !== "number")
        return t15.$shl();
      t16 = t10 & 255;
      if (!(t16 < t4))
        return A.ioore(t2, t16);
      t16 = t2[t16];
      if (typeof t16 !== "number")
        return A.iae(t16);
      t30 = t30 >>> 24;
      if (!(t30 < t4))
        return A.ioore(t2, t30);
      t30 = t2[t30];
      if (typeof t30 !== "number")
        return t30.$shl();
      t00 = t00 >>> 16 & 255;
      if (!(t00 < t4))
        return A.ioore(t2, t00);
      t00 = t2[t00];
      if (typeof t00 !== "number")
        return t00.$shl();
      t10 = t10 >>> 8 & 255;
      if (!(t10 < t4))
        return A.ioore(t2, t10);
      t10 = t2[t10];
      if (typeof t10 !== "number")
        return t10.$shl();
      t20 &= 255;
      if (!(t20 < t4))
        return A.ioore(t2, t20);
      t20 = t2[t20];
      if (typeof t20 !== "number")
        return A.iae(t20);
      if (!(k < t1))
        return A.ioore(xk, k);
      t2 = xk[k];
      t4 = k + 1;
      if (!(t4 < t1))
        return A.ioore(xk, t4);
      t4 = xk[t4];
      t17 = k + 2;
      if (!(t17 < t1))
        return A.ioore(xk, t17);
      t17 = xk[t17];
      t18 = k + 3;
      if (!(t18 < t1))
        return A.ioore(xk, t18);
      t18 = xk[t18];
      A.writeUint32BE(((t3 << 24 | t5 << 16 | t6 << 8 | t7) ^ t2) >>> 0, dst, 0);
      A.writeUint32BE(((t8 << 24 | t9 << 16 | t11 << 8 | t12) ^ t4) >>> 0, dst, 4);
      A.writeUint32BE(((t13 << 24 | t14 << 16 | t15 << 8 | t16) ^ t17) >>> 0, dst, 8);
      A.writeUint32BE(((t30 << 24 | t00 << 16 | t10 << 8 | t20) ^ t18) >>> 0, dst, 12);
    }
  };
  A.AESLib_initialize_mul.prototype = {
    call$2(b, c) {
      var j = c,
        i = b,
        s = 0, k = 1;
      while (true) {
        if (!(k < 256 && j !== 0))
          break;
        if ((j & k) >>> 0 !== 0) {
          s = (s ^ i) >>> 0;
          j = (j ^ k) >>> 0;
        }
        i = i << 1;
        if ((i & 256) !== 0)
          i ^= 283;
        k = k << 1 >>> 0;
      }
      return s;
    },
    $signature: 15
  };
  A.AESLib_initialize__rot24.prototype = {
    call$1(x) {
      return A.rotl32(x, 24);
    },
    $signature: 20
  };
  A.CryptoOpsException.prototype = {};
  A.FieldElement.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["h", this.h], type$.String, type$.dynamic);
    },
    fillZero$0() {
      var t1, i;
      for (t1 = this.h, i = 0; i < 10; ++i)
        B.JSArray_methods.$indexSet(t1, i, 0);
    },
    fillOne$0() {
      var i,
        t1 = this.h;
      B.JSArray_methods.$indexSet(t1, 0, 1);
      for (i = 1; i < 10; ++i)
        B.JSArray_methods.$indexSet(t1, i, 0);
    }
  };
  A.GroupElementP2.prototype = {
    toJson$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["x", A.LinkedHashMap_LinkedHashMap$_literal(["h", this.x.h], t1, t2), "y", A.LinkedHashMap_LinkedHashMap$_literal(["h", this.y.h], t1, t2), "z", A.LinkedHashMap_LinkedHashMap$_literal(["h", this.z.h], t1, t2)], t1, t2);
    },
    toString$0(_) {
      var t1, t2, t3, m, t4, t5, t6, sm;
      for (t1 = this.toJson$0().get$entries(), t1 = t1.get$iterator(t1), t2 = type$.Iterable_dynamic, t3 = type$.int, m = ""; t1.moveNext$0();) {
        t4 = t1.get$current();
        t5 = t4.value;
        t6 = J.getInterceptor$asx(t5);
        sm = B.JSArray_methods.fold$1$2(A.List_List$from(t2._as(t6.$index(t5, "h")), true, t3), 0, new A.GroupElementP2_toString_closure(), t3);
        m += A.S(t4.key) + ":" + A.S(t6.$index(t5, "h")) + " sum: " + A.S(sm) + " \n";
      }
      return m;
    }
  };
  A.GroupElementP2_toString_closure.prototype = {
    call$2(c, p) {
      return A._asInt(c) + A._asInt(p);
    },
    $signature: 15
  };
  A.GroupElementP1P1.prototype = {
    toJson$0() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["x", A.LinkedHashMap_LinkedHashMap$_literal(["h", _this.x.h], t1, t2), "y", A.LinkedHashMap_LinkedHashMap$_literal(["h", _this.y.h], t1, t2), "z", A.LinkedHashMap_LinkedHashMap$_literal(["h", _this.z.h], t1, t2), "t", A.LinkedHashMap_LinkedHashMap$_literal(["h", _this.t.h], t1, t2)], t1, t2);
    },
    toString$0(_) {
      var t1, t2, t3, m, t4, t5, t6, sm;
      for (t1 = this.toJson$0().get$entries(), t1 = t1.get$iterator(t1), t2 = type$.Iterable_dynamic, t3 = type$.int, m = ""; t1.moveNext$0();) {
        t4 = t1.get$current();
        t5 = t4.value;
        t6 = J.getInterceptor$asx(t5);
        sm = B.JSArray_methods.fold$1$2(A.List_List$from(t2._as(t6.$index(t5, "h")), true, t3), 0, new A.GroupElementP1P1_toString_closure(), t3);
        m += A.S(t4.key) + ":" + A.S(t6.$index(t5, "h")) + " sum: " + A.S(sm) + " \n";
      }
      return m;
    }
  };
  A.GroupElementP1P1_toString_closure.prototype = {
    call$2(c, p) {
      return A._asInt(c) + A._asInt(p);
    },
    $signature: 15
  };
  A.GroupElementP3.prototype = {
    clone$0() {
      var _this = this,
        t1 = type$.int;
      return new A.GroupElementP3(new A.FieldElement(A.ListHelper_clone(_this.x.h, false, t1)), new A.FieldElement(A.ListHelper_clone(_this.y.h, false, t1)), new A.FieldElement(A.ListHelper_clone(_this.z.h, false, t1)), new A.FieldElement(A.ListHelper_clone(_this.t.h, false, t1)));
    },
    toJson$0() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["x", A.LinkedHashMap_LinkedHashMap$_literal(["h", _this.x.h], t1, t2), "y", A.LinkedHashMap_LinkedHashMap$_literal(["h", _this.y.h], t1, t2), "z", A.LinkedHashMap_LinkedHashMap$_literal(["h", _this.z.h], t1, t2), "t", A.LinkedHashMap_LinkedHashMap$_literal(["h", _this.t.h], t1, t2)], t1, t2);
    },
    toString$0(_) {
      var t1, t2, t3, m, t4, t5, t6, sm;
      for (t1 = this.toJson$0().get$entries(), t1 = t1.get$iterator(t1), t2 = type$.Iterable_dynamic, t3 = type$.int, m = ""; t1.moveNext$0();) {
        t4 = t1.get$current();
        t5 = t4.value;
        t6 = J.getInterceptor$asx(t5);
        sm = B.JSArray_methods.fold$1$2(A.List_List$from(t2._as(t6.$index(t5, "h")), true, t3), 0, new A.GroupElementP3_toString_closure(), t3);
        m += A.S(t4.key) + ":" + A.S(t6.$index(t5, "h")) + " sum: " + A.S(sm) + " \n";
      }
      return m;
    }
  };
  A.GroupElementP3_toString_closure.prototype = {
    call$2(c, p) {
      return A._asInt(c) + A._asInt(p);
    },
    $signature: 15
  };
  A.GroupElementCached.prototype = {
    toJson$0() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["yPlusX", A.LinkedHashMap_LinkedHashMap$_literal(["h", _this.yPlusX.h], t1, t2), "yMinusX", A.LinkedHashMap_LinkedHashMap$_literal(["h", _this.yMinusX.h], t1, t2), "z", A.LinkedHashMap_LinkedHashMap$_literal(["h", _this.z.h], t1, t2), "t2d", A.LinkedHashMap_LinkedHashMap$_literal(["h", _this.t2d.h], t1, t2)], t1, t2);
    },
    toString$0(_) {
      var t1, t2, t3, m, t4, t5, t6, sm;
      for (t1 = this.toJson$0().get$entries(), t1 = t1.get$iterator(t1), t2 = type$.Iterable_dynamic, t3 = type$.int, m = ""; t1.moveNext$0();) {
        t4 = t1.get$current();
        t5 = t4.value;
        t6 = J.getInterceptor$asx(t5);
        sm = B.JSArray_methods.fold$1$2(A.List_List$from(t2._as(t6.$index(t5, "h")), true, t3), 0, new A.GroupElementCached_toString_closure(), t3);
        m += A.S(t4.key) + ":" + A.S(t6.$index(t5, "h")) + " sum: " + A.S(sm) + " \n";
      }
      return m;
    }
  };
  A.GroupElementCached_toString_closure.prototype = {
    call$2(c, p) {
      return A._asInt(c) + A._asInt(p);
    },
    $signature: 15
  };
  A.GroupElementPrecomp.prototype = {
    toJson$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["yplusx", A.LinkedHashMap_LinkedHashMap$_literal(["h", this.yplusx.h], t1, t2), "yminusx", A.LinkedHashMap_LinkedHashMap$_literal(["h", this.yminusx.h], t1, t2), "xy2d", A.LinkedHashMap_LinkedHashMap$_literal(["h", this.xy2d.h], t1, t2)], t1, t2);
    },
    toString$0(_) {
      var t1, m, t2;
      for (t1 = this.toJson$0().get$entries(), t1 = t1.get$iterator(t1), m = ""; t1.moveNext$0();) {
        t2 = t1.get$current();
        m += A.S(t2.key) + ":" + A.S(t2.value) + "\n";
      }
      return m;
    }
  };
  A._BytesHelper_asMin32_closure.prototype = {
    call$1(e) {
      A._asInt(e);
      return B.JSInt_methods.get$isNegative(e) || e > 255;
    },
    $signature: 253
  };
  A.CurveFp.prototype = {
    $eq(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (other instanceof A.CurveFp) {
        t1 = _this.p.compareTo$1(0, other.p);
        t2 = false;
        if (t1 === 0) {
          t1 = _this.a.compareTo$1(0, other.a);
          if (t1 === 0) {
            t1 = _this.b.compareTo$1(0, other.b);
            if (t1 === 0)
              t1 = _this.h.compareTo$1(0, other.h) === 0;
            else
              t1 = t2;
          } else
            t1 = t2;
        } else
          t1 = t2;
        return t1;
      }
      return false;
    },
    get$hashCode(_) {
      var _this = this;
      return _this.p.get$hashCode(0) ^ _this.a.get$hashCode(0) ^ _this.b.get$hashCode(0) ^ _this.h.get$hashCode(0);
    },
    get$baselen() {
      return A.BigintUtils_orderLen(this.p);
    },
    get$p() {
      return this.p;
    }
  };
  A.CurveED.prototype = {
    $eq(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (other instanceof A.CurveED) {
        if (_this === other)
          return true;
        t1 = _this.p.compareTo$1(0, other.p);
        t2 = false;
        if (t1 === 0) {
          t1 = _this.a.compareTo$1(0, other.a);
          if (t1 === 0) {
            t1 = _this.d.compareTo$1(0, other.d);
            if (t1 === 0)
              t1 = _this.h.compareTo$1(0, other.h) === 0;
            else
              t1 = t2;
          } else
            t1 = t2;
        } else
          t1 = t2;
        return t1;
      }
      return false;
    },
    get$hashCode(_) {
      var _this = this;
      return _this.p.get$hashCode(0) ^ _this.d.get$hashCode(0) ^ _this.h.get$hashCode(0) ^ _this.a.get$hashCode(0);
    },
    get$p() {
      return this.p;
    }
  };
  A.Curve.prototype = {};
  A.ECDSAPrivateKey.prototype = {
    toBytes$0() {
      return A.BigintUtils_toBytes(this.secretMultiplier, A.BigintUtils_orderLen(this.publicKey.generator.curve.p), B.C_Endian);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof A.ECDSAPrivateKey) {
        if (this === other)
          return true;
        if (this.publicKey.$eq(0, other.publicKey))
          t1 = this.secretMultiplier.compareTo$1(0, other.secretMultiplier) === 0;
        else
          t1 = false;
        return t1;
      }
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.publicKey, this.secretMultiplier]);
    }
  };
  A.ECDSAPublicKey.prototype = {
    verifies$2(hash, signature) {
      var r, s, t2, c,
        $G = this.generator,
        t1 = $G.order;
      t1.toString;
      r = signature.r;
      s = signature.s;
      t2 = $.$get$_BigIntImpl_one();
      if (r.compareTo$1(0, t2) < 0 || r.compareTo$1(0, t1.$sub(0, t2)) > 0)
        return false;
      if (s.compareTo$1(0, t2) < 0 || s.compareTo$1(0, t1.$sub(0, t2)) > 0)
        return false;
      c = A.BigintUtils_inverseMod(s, t1);
      t1 = $G.mulAdd$3(hash.$mul(0, c).$mod(0, t1), this.point, r.$mul(0, c).$mod(0, t1)).get$x().$mod(0, t1).compareTo$1(0, r);
      return t1 === 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (other instanceof A.ECDSAPublicKey) {
        if (this === other)
          return true;
        return this.generator.curve.$eq(0, other.generator.curve) && this.point.$eq(0, other.point);
      }
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.generator.curve, this.point]);
    }
  };
  A.ECDSASignature.prototype = {
    toString$0(_) {
      return "(" + this.r.toString$0(0) + ", " + this.s.toString$0(0) + ")";
    },
    recoverPublicKeys$2(hash, generator) {
      var curve, t1, e, t2, t3, beta, t4, y, coords, inverseR, t5, t6;
      type$.List_int._as(hash);
      curve = generator.curve;
      t1 = generator.order;
      t1.toString;
      e = A.BigintUtils_fromBytes(hash, B.C_Endian, false);
      t2 = this.r;
      t3 = curve.p;
      beta = A.ECDSAUtils_modularSquareRootPrime(t2.modPow$2(0, A._BigIntImpl__BigIntImpl$from(3), t3).$add(0, curve.a.$mul(0, t2)).$add(0, curve.b).$mod(0, t3), t3);
      t4 = beta.$mod(0, $.$get$_BigIntImpl_two()).compareTo$1(0, $.$get$_BigIntImpl_zero());
      y = t4 === 0 ? beta : t3.$sub(0, beta);
      t3 = $.$get$_BigIntImpl_one();
      t4 = type$.JSArray_BigInt;
      coords = A._setArrayType([t2, y, t3], t4);
      inverseR = A.BigintUtils_inverseMod(t2, t1);
      t5 = this.s;
      t6 = type$.ProjectiveECCPoint;
      return A._setArrayType([A.ECDSAPublicKey_ECDSAPublicKey(generator, t6._as(new A.ProjectiveECCPoint(curve, t1, false, B.List_empty, coords).$mul(0, t5).$add(0, generator.$mul(0, e.$negate(0).$mod(0, t1))).$mul(0, inverseR))), A.ECDSAPublicKey_ECDSAPublicKey(generator, t6._as(new A.ProjectiveECCPoint(curve, t1, false, B.List_empty, A._setArrayType([t2, y.$negate(0), t3], t4)).$mul(0, t5).$add(0, generator.$mul(0, e.$negate(0).$mod(0, t1))).$mul(0, inverseR)))], type$.JSArray_ECDSAPublicKey);
    },
    toBytes$1(baselen) {
      var sBytes = A.BigintUtils_toBytes(this.s, baselen, B.C_Endian),
        t1 = A.List_List$of(A.BigintUtils_toBytes(this.r, baselen, B.C_Endian), true, type$.int);
      B.JSArray_methods.addAll$1(t1, sBytes);
      return t1;
    }
  };
  A.EDDSAPrivateKey.prototype = {
    sign$2(_, data, hashMethod) {
      var t1, dom, t2, t3, t4, t5, t6, r, $R, k, s, _this = this;
      type$.List_int._as(data);
      type$.SerializableHash_HashState_Function._as(hashMethod);
      t1 = type$.int;
      dom = J.JSArray_JSArray$fixed(0, t1);
      t2 = _this.generator;
      if (t2.curve.$eq(0, $.$get$Curves_curveEd448())) {
        t3 = A.List_List$of(new A.CodeUnits("SigEd448"), true, type$.dynamic);
        t3.push(0);
        t3.push(0);
        dom = A.List_List$from(t3, true, t1);
      }
      t3 = hashMethod.call$0();
      t4 = type$.dynamic;
      t5 = A.List_List$of(dom, true, t4);
      t6 = _this._extendedKey;
      B.JSArray_methods.addAll$1(t5, t6 == null ? [] : t6);
      B.JSArray_methods.addAll$1(t5, data);
      r = A.BigintUtils_fromBytes(t3.update$1(A.List_List$from(t5, true, t1)).digest$0(), B.C_Endian0, false);
      $R = t2.$mul(0, r).toBytes$0();
      t3 = hashMethod.call$0();
      t5 = A.List_List$of(dom, true, t4);
      B.JSArray_methods.addAll$1(t5, $R);
      B.JSArray_methods.addAll$1(t5, A.List_List$from(_this.publicKey._encoded, true, t1));
      B.JSArray_methods.addAll$1(t5, data);
      k = A.BigintUtils_fromBytes(t3.update$1(A.List_List$from(t5, true, t1)).digest$0(), B.C_Endian0, false);
      t2 = t2.order;
      t2.toString;
      s = r.$add(0, k.$mod(0, t2).$mul(0, _this.secret)).$mod(0, t2);
      t4 = A.List_List$of($R, true, t4);
      B.JSArray_methods.addAll$1(t4, A.BigintUtils_toBytes(s, _this.baselen, B.C_Endian0));
      return A.List_List$from(t4, true, t1);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (other instanceof A.EDDSAPrivateKey) {
        if (this === other)
          return true;
        return this.generator.curve.$eq(0, other.generator.curve) && A.BytesUtils_bytesEqual(this.key, other.key);
      }
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this.key, A._setArrayType([this.generator.curve], type$.JSArray_Object));
    }
  };
  A.EDDSAPublicKey.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other instanceof A.EDDSAPublicKey) {
        if (this === other)
          return true;
        return this.generator.curve.$eq(0, other.generator.curve) && A.BytesUtils_bytesEqual(this._encoded, other._encoded);
      }
      return false;
    },
    verify$3(data, signature, hashMethod) {
      var t2, t3, $R, $S, dom, h, k, _this = this,
        t1 = type$.List_int;
      t1._as(data);
      t1._as(signature);
      type$.SerializableHash_HashState_Function._as(hashMethod);
      t1 = _this.baselen;
      t2 = 2 * t1;
      if (signature.length !== t2)
        throw A.wrapException(A.ArgumentException$("Invalid signature length, expected: " + t2 + " bytes", null));
      t2 = _this.generator;
      t3 = t2.curve;
      $R = A.EDPoint_EDPoint$fromBytes(t3, B.JSArray_methods.sublist$2(signature, 0, t1));
      $S = A.BigintUtils_fromBytes(B.JSArray_methods.sublist$1(signature, t1), B.C_Endian0, false);
      t1 = t2.order;
      t1.toString;
      if ($S.compareTo$1(0, t1) >= 0)
        throw A.wrapException(B.ArgumentException_KhV);
      t1 = type$.int;
      dom = J.JSArray_JSArray$fixed(0, t1);
      if (t3.$eq(0, $.$get$Curves_curveEd448())) {
        t3 = A.List_List$of(new A.CodeUnits("SigEd448"), true, type$.dynamic);
        t3.push(0);
        t3.push(0);
        dom = A.List_List$from(t3, true, t1);
      }
      h = hashMethod.call$0();
      t3 = A.List_List$of(dom, true, type$.dynamic);
      B.JSArray_methods.addAll$1(t3, $R.toBytes$0());
      B.JSArray_methods.addAll$1(t3, _this._encoded);
      B.JSArray_methods.addAll$1(t3, data);
      h.update$1(A.List_List$from(t3, true, t1));
      k = A.BigintUtils_fromBytes(h.digest$0(), B.C_Endian0, false);
      if (!t2.$mul(0, $S).$eq(0, _this._point.$mul(0, k).$add(0, $R)))
        return false;
      return true;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this._encoded, A._setArrayType([this.generator.curve], type$.JSArray_Object));
    }
  };
  A.EncodeType.prototype = {
    _enumToString$0() {
      return "EncodeType." + this._core$_name;
    }
  };
  A.AbstractPoint.prototype = {
    toBytes$1(encodeType) {
      var encLen, yStr, t1, t2, raw, prefix, result, xStr, _this = this;
      if (_this instanceof A.EDPoint) {
        _this.scale$0();
        encLen = B.JSInt_methods._tdivFast$1(_this.curve.p.get$bitLength(0) + 1 + 7, 8);
        yStr = A.BigintUtils_toBytes(_this.get$y(), encLen, B.C_Endian0);
        t1 = _this.get$x().$mod(0, $.$get$_BigIntImpl_two()).compareTo$1(0, $.$get$_BigIntImpl_one());
        if (t1 === 0) {
          t1 = yStr.length;
          t2 = t1 - 1;
          if (!(t2 >= 0))
            return A.ioore(yStr, t2);
          t1 = yStr[t2];
          if (typeof t1 !== "number")
            return t1.$or();
          B.JSArray_methods.$indexSet(yStr, t2, (t1 | 128) >>> 0);
        }
        return yStr;
      }
      switch (encodeType.index) {
        case 2:
          return _this._base$_encode$0();
        case 3:
          t1 = [4];
          B.JSArray_methods.addAll$1(t1, _this._base$_encode$0());
          return A.List_List$from(t1, true, type$.int);
        case 1:
          raw = _this._base$_encode$0();
          t1 = type$.int;
          prefix = !_this.get$y().get$isEven(0) ? A.List_List$from([7], true, t1) : A.List_List$from([6], true, t1);
          result = A.List_List$filled(prefix.length + raw.length, 0, false, t1);
          B.JSArray_methods.setAll$2(result, 0, prefix);
          B.JSArray_methods.setAll$2(result, prefix.length, raw);
          return result;
        default:
          xStr = A.BigintUtils_toBytes(_this.get$x(), A.BigintUtils_orderLen(_this.get$curve().get$p()), B.C_Endian);
          t1 = _this.get$y().$and(0, $.$get$_BigIntImpl_one()).compareTo$1(0, $.$get$_BigIntImpl_zero());
          t2 = type$.int;
          prefix = t1 !== 0 ? A.List_List$from([3], true, t2) : A.List_List$from([2], true, t2);
          result = A.List_List$filled(prefix.length + xStr.length, 0, false, t2);
          B.JSArray_methods.setAll$2(result, 0, prefix);
          B.JSArray_methods.setAll$2(result, prefix.length, xStr);
          return result;
      }
    },
    toBytes$0() {
      return this.toBytes$1(B.EncodeType_0);
    },
    _base$_encode$0() {
      var _this = this,
        xBytes = A.BigintUtils_toBytes(_this.get$x(), A.BigintUtils_orderLen(_this.get$curve().get$p()), B.C_Endian),
        yBytes = A.BigintUtils_toBytes(_this.get$y(), A.BigintUtils_orderLen(_this.get$curve().get$p()), B.C_Endian),
        t1 = A.List_List$of(xBytes, true, type$.dynamic);
      B.JSArray_methods.addAll$1(t1, yBytes);
      return A.List_List$from(t1, true, type$.int);
    },
    toString$0(_) {
      return "(" + this.get$x().toString$0(0) + ", " + this.get$y().toString$0(0) + ")";
    }
  };
  A.ProjectiveECCPoint.prototype = {
    get$isInfinity() {
      var t1 = this._ec_projective_point$_coords,
        t2 = t1.length;
      if (t2 !== 0) {
        if (0 >= t2)
          return A.ioore(t1, 0);
        t1 = t1[0];
        t2 = $.$get$_BigIntImpl_zero();
        t1 = J.compareTo$1$ns(t1, t2);
        if (t1 === 0) {
          t1 = this._ec_projective_point$_coords;
          if (1 >= t1.length)
            return A.ioore(t1, 1);
          t1 = J.compareTo$1$ns(t1[1], t2) === 0;
        } else
          t1 = false;
      } else
        t1 = true;
      return t1;
    },
    _precomputeIfNeeded$0() {
      var t1, precomputedPoints, i, t2, newOrder, t3, t4, xCoord, yCoord, doubler, _this = this;
      if (!_this.generator || _this._ec_projective_point$_precompute.length !== 0)
        return;
      t1 = _this.order;
      t1.toString;
      precomputedPoints = A._setArrayType([], type$.JSArray_List_BigInt);
      i = $.$get$_BigIntImpl_one();
      t2 = $.$get$_BigIntImpl_two();
      newOrder = t1.$mul(0, t2);
      t3 = _this._ec_projective_point$_coords;
      t4 = t3.length;
      if (0 >= t4)
        return A.ioore(t3, 0);
      xCoord = t3[0];
      if (1 >= t4)
        return A.ioore(t3, 1);
      yCoord = t3[1];
      if (2 >= t4)
        return A.ioore(t3, 2);
      t4 = type$.JSArray_BigInt;
      doubler = new A.ProjectiveECCPoint(_this.curve, t1, false, B.List_empty, A._setArrayType([xCoord, yCoord, t3[2]], t4));
      newOrder = newOrder.$mul(0, t2);
      B.JSArray_methods.add$1(precomputedPoints, A._setArrayType([doubler.get$x(), doubler.get$y()], t4));
      for (; i.compareTo$1(0, newOrder) < 0;) {
        i = i.$mul(0, t2);
        doubler = doubler.doublePoint$0().scale$0();
        B.JSArray_methods.add$1(precomputedPoints, A._setArrayType([doubler.get$x(), doubler.get$y()], t4));
      }
      _this.set$_ec_projective_point$_precompute(precomputedPoints);
    },
    $eq(_, other) {
      var t1, t2, x1, y1, z1, p, zz1, t3, x2, y2, z2, zz2;
      if (other == null)
        return false;
      if (!(other instanceof A.AbstractPoint))
        return false;
      t1 = this._ec_projective_point$_coords;
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      x1 = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      y1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      z1 = t1[2];
      t1 = this.curve;
      p = t1.p;
      zz1 = z1.$mul(0, z1).$mod(0, p);
      if (!(other instanceof A.ProjectiveECCPoint))
        return false;
      if (other.get$isInfinity()) {
        t1 = $.$get$_BigIntImpl_zero();
        t2 = y1.compareTo$1(0, t1);
        if (t2 !== 0)
          t1 = z1.compareTo$1(0, t1) === 0;
        else
          t1 = true;
        return t1;
      }
      t2 = other._ec_projective_point$_coords;
      t3 = t2.length;
      if (0 >= t3)
        return A.ioore(t2, 0);
      x2 = t2[0];
      if (1 >= t3)
        return A.ioore(t2, 1);
      y2 = t2[1];
      if (2 >= t3)
        return A.ioore(t2, 2);
      z2 = t2[2];
      if (!t1.$eq(0, other.curve))
        return false;
      zz2 = z2.$mul(0, z2).$mod(0, p);
      t1 = x1.$mul(0, zz2).$sub(0, x2.$mul(0, zz1)).$mod(0, p);
      t2 = $.$get$_BigIntImpl_zero();
      t1 = t1.compareTo$1(0, t2);
      if (t1 === 0)
        t1 = y1.$mul(0, zz2).$mul(0, z2).$sub(0, y2.$mul(0, zz1).$mul(0, z1)).$mod(0, p).compareTo$1(0, t2) === 0;
      else
        t1 = false;
      return t1;
    },
    get$x() {
      var xCoordinate, zCoordinate, p, zInverse,
        t1 = this._ec_projective_point$_coords,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      xCoordinate = t1[0];
      if (2 >= t2)
        return A.ioore(t1, 2);
      zCoordinate = t1[2];
      t1 = zCoordinate.compareTo$1(0, $.$get$_BigIntImpl_one());
      if (t1 === 0)
        return xCoordinate;
      p = this.curve.p;
      zInverse = A.BigintUtils_inverseMod(zCoordinate, p);
      return xCoordinate.$mul(0, zInverse).$mul(0, zInverse).$mod(0, p);
    },
    get$y() {
      var yCoordinate, zCoordinate, primeField, zInverse,
        t1 = this._ec_projective_point$_coords,
        t2 = t1.length;
      if (1 >= t2)
        return A.ioore(t1, 1);
      yCoordinate = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      zCoordinate = t1[2];
      primeField = this.curve.p;
      t1 = zCoordinate.compareTo$1(0, $.$get$_BigIntImpl_one());
      if (t1 === 0)
        return yCoordinate;
      zInverse = A.BigintUtils_inverseMod(zCoordinate, primeField);
      return yCoordinate.$mul(0, zInverse).$mul(0, zInverse).$mul(0, zInverse).$mod(0, primeField);
    },
    scale$0() {
      var currentZ, t2, currentY, currentX, primeField, zInverse, zInverseSquared, _this = this,
        t1 = _this._ec_projective_point$_coords;
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      currentZ = t1[2];
      t1 = $.$get$_BigIntImpl_one();
      t2 = currentZ.compareTo$1(0, t1);
      if (t2 === 0)
        return _this;
      t2 = _this._ec_projective_point$_coords;
      if (1 >= t2.length)
        return A.ioore(t2, 1);
      currentY = t2[1];
      currentX = t2[0];
      primeField = _this.curve.p;
      zInverse = A.BigintUtils_inverseMod(currentZ, primeField);
      zInverseSquared = zInverse.$mul(0, zInverse).$mod(0, primeField);
      _this.set$_ec_projective_point$_coords(A._setArrayType([currentX.$mul(0, zInverseSquared).$mod(0, primeField), currentY.$mul(0, zInverseSquared).$mul(0, zInverse).$mod(0, primeField), t1], type$.JSArray_BigInt));
      return _this;
    },
    _doubleWithZ1$4(x1, y1, p, a) {
      var ySquaredSquared, s, m, t,
        xSquared = x1.$mul(0, x1).$mod(0, p),
        ySquared = y1.$mul(0, y1).$mod(0, p),
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = ySquared.compareTo$1(0, t1);
      if (t2 === 0)
        return A._setArrayType([t1, t1, $.$get$_BigIntImpl_one()], type$.JSArray_BigInt);
      ySquaredSquared = ySquared.$mul(0, ySquared).$mod(0, p);
      t1 = $.$get$_BigIntImpl_two();
      s = t1.$mul(0, x1.$add(0, ySquared).$mul(0, x1.$add(0, ySquared)).$sub(0, xSquared).$sub(0, ySquaredSquared)).$mod(0, p);
      m = A._BigIntImpl__BigIntImpl$from(3).$mul(0, xSquared).$add(0, a).$mod(0, p);
      t = m.$mul(0, m).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, s)).$mod(0, p);
      return A._setArrayType([t, m.$mul(0, s.$sub(0, t)).$sub(0, A._BigIntImpl__BigIntImpl$from(8).$mul(0, ySquaredSquared)).$mod(0, p), t1.$mul(0, y1).$mod(0, p)], type$.JSArray_BigInt);
    },
    _ec_projective_point$_double$5(x1, y1, z1, p, a) {
      var t3, xSquared, ySquared, ySquaredSquared, zSquared, s, m, t,
        t1 = $.$get$_BigIntImpl_one(),
        t2 = z1.compareTo$1(0, t1);
      if (t2 === 0)
        return this._doubleWithZ1$4(x1, y1, p, a);
      t2 = $.$get$_BigIntImpl_zero();
      t3 = y1.compareTo$1(0, t2);
      if (t3 !== 0)
        t3 = z1.compareTo$1(0, t2) === 0;
      else
        t3 = true;
      if (t3)
        return A._setArrayType([t2, t2, t1], type$.JSArray_BigInt);
      xSquared = x1.$mul(0, x1).$mod(0, p);
      ySquared = y1.$mul(0, y1).$mod(0, p);
      t3 = ySquared.compareTo$1(0, t2);
      if (t3 === 0)
        return A._setArrayType([t2, t2, t1], type$.JSArray_BigInt);
      ySquaredSquared = ySquared.$mul(0, ySquared).$mod(0, p);
      zSquared = z1.$mul(0, z1).$mod(0, p);
      s = $.$get$_BigIntImpl_two().$mul(0, x1.$add(0, ySquared).$mul(0, x1.$add(0, ySquared)).$sub(0, xSquared).$sub(0, ySquaredSquared)).$mod(0, p);
      m = A._BigIntImpl__BigIntImpl$from(3).$mul(0, xSquared).$add(0, a.$mul(0, zSquared).$mul(0, zSquared)).$mod(0, p);
      t = m.$mul(0, m).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, s)).$mod(0, p);
      return A._setArrayType([t, m.$mul(0, s.$sub(0, t)).$sub(0, A._BigIntImpl__BigIntImpl$from(8).$mul(0, ySquaredSquared)).$mod(0, p), y1.$add(0, z1).$mul(0, y1.$add(0, z1)).$sub(0, ySquared).$sub(0, zSquared).$mod(0, p)], type$.JSArray_BigInt);
    },
    doublePoint$0() {
      var x1, y1, z1, result, t3, _this = this,
        t1 = _this._ec_projective_point$_coords,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      x1 = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      y1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      z1 = t1[2];
      t1 = $.$get$_BigIntImpl_zero();
      t2 = y1.compareTo$1(0, t1);
      if (t2 === 0)
        return new A.ProjectiveECCPoint(_this.curve, null, false, B.List_empty, A._setArrayType([t1, t1, t1], type$.JSArray_BigInt));
      t2 = _this.curve;
      result = _this._ec_projective_point$_double$5(x1, y1, z1, t2.p, t2.a);
      t3 = result[1].compareTo$1(0, t1);
      if (t3 !== 0)
        t3 = result[2].compareTo$1(0, t1) === 0;
      else
        t3 = true;
      if (t3)
        return new A.ProjectiveECCPoint(t2, null, false, B.List_empty, A._setArrayType([t1, t1, t1], type$.JSArray_BigInt));
      return new A.ProjectiveECCPoint(t2, _this.order, false, B.List_empty, A._setArrayType([result[0], result[1], result[2]], type$.JSArray_BigInt));
    },
    _addPointsWithZ1$5(x1, y1, x2, y2, p) {
      var $V, x3,
        diff = x2.$sub(0, x1),
        I = diff.$mul(0, diff).$mul(0, A._BigIntImpl__BigIntImpl$from(4)).$mod(0, p),
        $J = diff.$mul(0, I),
        scaledYDifference = y2.$sub(0, y1).$mul(0, A._BigIntImpl__BigIntImpl$from(2)),
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = diff.compareTo$1(0, t1);
      if (t2 === 0)
        t1 = scaledYDifference.compareTo$1(0, t1) === 0;
      else
        t1 = false;
      if (t1)
        return this._doubleWithZ1$4(x1, y1, p, this.curve.a);
      $V = x1.$mul(0, I);
      x3 = scaledYDifference.$mul(0, scaledYDifference).$sub(0, $J).$sub(0, $V.$mul(0, A._BigIntImpl__BigIntImpl$from(2))).$mod(0, p);
      return A._setArrayType([x3, scaledYDifference.$mul(0, $V.$sub(0, x3)).$sub(0, y1.$mul(0, $J).$mul(0, A._BigIntImpl__BigIntImpl$from(2))).$mod(0, p), diff.$mul(0, A._BigIntImpl__BigIntImpl$from(2)).$mod(0, p)], type$.JSArray_BigInt);
    },
    _addPointsWithCommonZ$6(x1, y1, z1, x2, y2, p) {
      var x3,
        $A = x2.$sub(0, x1).modPow$2(0, A._BigIntImpl__BigIntImpl$from(2), p),
        $B = x1.$mul(0, $A).$mod(0, p),
        $C = x2.$mul(0, $A),
        $D = y2.$sub(0, y1).modPow$2(0, A._BigIntImpl__BigIntImpl$from(2), p),
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = $A.compareTo$1(0, t1);
      if (t2 === 0)
        t1 = $D.compareTo$1(0, t1) === 0;
      else
        t1 = false;
      if (t1)
        return this._ec_projective_point$_double$5(x1, y1, z1, p, this.curve.a);
      x3 = $D.$sub(0, $B).$sub(0, $C).$mod(0, p);
      return A._setArrayType([x3, y2.$sub(0, y1).$mul(0, $B.$sub(0, x3)).$sub(0, y1.$mul(0, $C.$sub(0, $B))).$mod(0, p), z1.$mul(0, x2.$sub(0, x1)).$mod(0, p)], type$.JSArray_BigInt);
    },
    _addPointsWithZ2EqualOne$6(x1, y1, z1, x2, y2, p) {
      var v, x3,
        z1z1 = z1.$mul(0, z1).$mod(0, p),
        u2 = x2.$mul(0, z1z1).$mod(0, p),
        s2 = y2.$mul(0, z1).$mul(0, z1z1).$mod(0, p),
        h = u2.$sub(0, x1).$mod(0, p),
        hh = h.$mul(0, h).$mod(0, p),
        i = A._BigIntImpl__BigIntImpl$from(4).$mul(0, hh).$mod(0, p),
        j = h.$mul(0, i).$mod(0, p),
        r = A._BigIntImpl__BigIntImpl$from(2).$mul(0, s2.$sub(0, y1)).$mod(0, p),
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = r.compareTo$1(0, t1);
      if (t2 === 0)
        t1 = h.compareTo$1(0, t1) === 0;
      else
        t1 = false;
      if (t1)
        return this._doubleWithZ1$4(x2, y2, p, this.curve.a);
      v = x1.$mul(0, i).$mod(0, p);
      x3 = r.$mul(0, r).$sub(0, j).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, v)).$mod(0, p);
      return A._setArrayType([x3, r.$mul(0, v.$sub(0, x3)).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, y1).$mul(0, j)).$mod(0, p), z1.$add(0, h).modPow$2(0, A._BigIntImpl__BigIntImpl$from(2), p).$sub(0, z1z1).$sub(0, hh).$mod(0, p)], type$.JSArray_BigInt);
    },
    _addPointsWithZNotEqual$7(x1, y1, z1, x2, y2, z2, p) {
      var v, x3,
        z1z1 = z1.$mul(0, z1).$mod(0, p),
        z2z2 = z2.$mul(0, z2).$mod(0, p),
        u1 = x1.$mul(0, z2z2).$mod(0, p),
        u2 = x2.$mul(0, z1z1).$mod(0, p),
        s1 = y1.$mul(0, z2).$mul(0, z2z2).$mod(0, p),
        s2 = y2.$mul(0, z1).$mul(0, z1z1).$mod(0, p),
        h = u2.$sub(0, u1).$mod(0, p),
        i = A._BigIntImpl__BigIntImpl$from(4).$mul(0, h).$mul(0, h).$mod(0, p),
        j = h.$mul(0, i).$mod(0, p),
        r = A._BigIntImpl__BigIntImpl$from(2).$mul(0, s2.$sub(0, s1)).$mod(0, p),
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = h.compareTo$1(0, t1);
      if (t2 === 0)
        t1 = r.compareTo$1(0, t1) === 0;
      else
        t1 = false;
      if (t1)
        return this._ec_projective_point$_double$5(x1, y1, z1, p, this.curve.a);
      v = u1.$mul(0, i).$mod(0, p);
      x3 = r.$mul(0, r).$sub(0, j).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, v)).$mod(0, p);
      return A._setArrayType([x3, r.$mul(0, v.$sub(0, x3)).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, s1).$mul(0, j)).$mod(0, p), z1.$add(0, z2).modPow$2(0, A._BigIntImpl__BigIntImpl$from(2), p).$sub(0, z1z1).$sub(0, z2z2).$mul(0, h).$mod(0, p)], type$.JSArray_BigInt);
    },
    _addPoints$7(x1, y1, z1, x2, y2, z2, p) {
      var _this = this,
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = y1.compareTo$1(0, t1);
      if (t2 !== 0)
        t2 = z1.compareTo$1(0, t1) === 0;
      else
        t2 = true;
      if (t2)
        return A._setArrayType([x2, y2, z2], type$.JSArray_BigInt);
      t2 = y2.compareTo$1(0, t1);
      if (t2 !== 0)
        t1 = z2.compareTo$1(0, t1) === 0;
      else
        t1 = true;
      if (t1)
        return A._setArrayType([x1, y1, z1], type$.JSArray_BigInt);
      t1 = z1.compareTo$1(0, z2);
      if (t1 === 0) {
        t1 = z1.compareTo$1(0, $.$get$_BigIntImpl_one());
        if (t1 === 0)
          return _this._addPointsWithZ1$5(x1, y1, x2, y2, p);
        return _this._addPointsWithCommonZ$6(x1, y1, z1, x2, y2, p);
      }
      t1 = $.$get$_BigIntImpl_one();
      t2 = z1.compareTo$1(0, t1);
      if (t2 === 0)
        return _this._addPointsWithZ2EqualOne$6(x2, y2, z2, x1, y1, p);
      t1 = z2.compareTo$1(0, t1);
      if (t1 === 0)
        return _this._addPointsWithZ2EqualOne$6(x1, y1, z1, x2, y2, p);
      return _this._addPointsWithZNotEqual$7(x1, y1, z1, x2, y2, z2, p);
    },
    $add(_, other) {
      var t1, t2, t3, x1, y1, z1, x2, y2, result, x3, y3, z3, _this = this;
      if (_this.get$isInfinity())
        return other;
      if (other.get$isInfinity())
        return _this;
      t1 = _this.curve;
      if (!t1.$eq(0, other.get$curve()))
        throw A.wrapException(B.ArgumentException_pgA);
      type$.ProjectiveECCPoint._as(other);
      t2 = _this._ec_projective_point$_coords;
      t3 = t2.length;
      if (0 >= t3)
        return A.ioore(t2, 0);
      x1 = t2[0];
      if (1 >= t3)
        return A.ioore(t2, 1);
      y1 = t2[1];
      if (2 >= t3)
        return A.ioore(t2, 2);
      z1 = t2[2];
      t2 = other._ec_projective_point$_coords;
      t3 = t2.length;
      if (0 >= t3)
        return A.ioore(t2, 0);
      x2 = t2[0];
      if (1 >= t3)
        return A.ioore(t2, 1);
      y2 = t2[1];
      if (2 >= t3)
        return A.ioore(t2, 2);
      result = _this._addPoints$7(x1, y1, z1, x2, y2, t2[2], t1.p);
      x3 = result[0];
      y3 = result[1];
      z3 = result[2];
      t2 = $.$get$_BigIntImpl_zero();
      t3 = y3.compareTo$1(0, t2);
      if (t3 !== 0)
        t3 = z3.compareTo$1(0, t2) === 0;
      else
        t3 = true;
      if (t3)
        return new A.ProjectiveECCPoint(t1, null, false, B.List_empty, A._setArrayType([t2, t2, t2], type$.JSArray_BigInt));
      return new A.ProjectiveECCPoint(t1, _this.order, false, B.List_empty, A._setArrayType([x3, y3, z3], type$.JSArray_BigInt));
    },
    _multiplyWithPrecompute$1(scalar) {
      var resultY, i, t2, t3, x2, y2, t4, addResult, _this = this,
        resultX = $.$get$_BigIntImpl_zero(),
        resultZ = $.$get$_BigIntImpl_one(),
        t1 = _this.curve,
        primeField = t1.p,
        precompute = A.List_List$from(_this._ec_projective_point$_precompute, true, type$.List_BigInt);
      for (resultY = resultX, i = 0; i < precompute.length; ++i) {
        t2 = precompute[i];
        t3 = J.getInterceptor$asx(t2);
        x2 = t3.$index(t2, 0);
        y2 = t3.$index(t2, 1);
        t2 = scalar._used !== 0;
        if (t2) {
          t3 = scalar._digits;
          if (0 >= t3.length)
            return A.ioore(t3, 0);
          t3 = (t3[0] & 1) === 0;
        } else
          t3 = true;
        if (!t3) {
          if (t2) {
            t3 = scalar._digits;
            if (0 >= t3.length)
              return A.ioore(t3, 0);
            t3 = (t3[0] & 1) === 0;
          } else
            t3 = true;
          if (!t3)
            if (t2) {
              t2 = scalar._digits;
              if (0 >= t2.length)
                return A.ioore(t2, 0);
              t2 = (t2[0] & 1) === 0;
            } else
              t2 = true;
          else
            t2 = false;
          if (t2) {
            t2 = $.$get$_BigIntImpl_one();
            t3 = scalar.$add(0, t2);
            t4 = $.$get$_BigIntImpl_two();
            if (t4._used === 0)
              A.throwExpression(B.C_IntegerDivisionByZeroException);
            scalar = t3._div$1(t4);
            addResult = _this._addPoints$7(resultX, resultY, resultZ, x2, y2.$negate(0), t2, primeField);
            resultX = addResult[0];
            resultY = addResult[1];
            resultZ = addResult[2];
          } else {
            t2 = $.$get$_BigIntImpl_one();
            t3 = scalar.$sub(0, t2);
            t4 = $.$get$_BigIntImpl_two();
            if (t4._used === 0)
              A.throwExpression(B.C_IntegerDivisionByZeroException);
            scalar = t3._div$1(t4);
            addResult = _this._addPoints$7(resultX, resultY, resultZ, x2, y2, t2, primeField);
            resultX = addResult[0];
            resultY = addResult[1];
            resultZ = addResult[2];
          }
        } else {
          t2 = $.$get$_BigIntImpl_two();
          if (t2._used === 0)
            A.throwExpression(B.C_IntegerDivisionByZeroException);
          scalar = scalar._div$1(t2);
        }
      }
      t2 = $.$get$_BigIntImpl_zero();
      t3 = resultY.compareTo$1(0, t2);
      if (t3 !== 0)
        t3 = resultZ.compareTo$1(0, t2) === 0;
      else
        t3 = true;
      if (t3)
        return new A.ProjectiveECCPoint(t1, null, false, B.List_empty, A._setArrayType([t2, t2, t2], type$.JSArray_BigInt));
      return new A.ProjectiveECCPoint(t1, _this.order, false, B.List_empty, A._setArrayType([resultX, resultY, resultZ], type$.JSArray_BigInt));
    },
    $mul(_, scalar) {
      var x3, z3, t2, t3, x2, y2, primeField, curveA, nafList, i, y3, x30, double, add, _this = this,
        t1 = _this._ec_projective_point$_coords;
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      t1 = t1[1];
      x3 = $.$get$_BigIntImpl_zero();
      t1 = J.compareTo$1$ns(t1, x3);
      if (t1 !== 0)
        t1 = scalar.compareTo$1(0, x3) === 0;
      else
        t1 = true;
      if (t1)
        return new A.ProjectiveECCPoint(_this.curve, null, false, B.List_empty, A._setArrayType([x3, x3, x3], type$.JSArray_BigInt));
      z3 = $.$get$_BigIntImpl_one();
      t1 = scalar.compareTo$1(0, z3);
      if (t1 === 0)
        return _this;
      t1 = _this.order;
      if (t1 != null)
        scalar = scalar.$mod(0, t1.$mul(0, $.$get$_BigIntImpl_two()));
      _this._precomputeIfNeeded$0();
      if (_this._ec_projective_point$_precompute.length !== 0)
        return _this._multiplyWithPrecompute$1(scalar);
      _this.scale$0();
      t2 = _this._ec_projective_point$_coords;
      t3 = t2.length;
      if (0 >= t3)
        return A.ioore(t2, 0);
      x2 = t2[0];
      if (1 >= t3)
        return A.ioore(t2, 1);
      y2 = t2[1];
      t2 = _this.curve;
      primeField = t2.p;
      curveA = t2.a;
      nafList = A.BigintUtils_computeNAF(scalar);
      for (i = nafList.length - 1, y3 = x3, x30 = y3; i >= 0; --i) {
        double = _this._ec_projective_point$_double$5(x30, y3, z3, primeField, curveA);
        x30 = double[0];
        y3 = double[1];
        z3 = double[2];
        if (!(i < nafList.length))
          return A.ioore(nafList, i);
        if (nafList[i].compareTo$1(0, x3) < 0) {
          add = _this._addPoints$7(x30, y3, z3, x2, y2.$negate(0), $.$get$_BigIntImpl_one(), primeField);
          x30 = add[0];
          y3 = add[1];
          z3 = add[2];
        } else {
          if (!(i < nafList.length))
            return A.ioore(nafList, i);
          if (nafList[i].compareTo$1(0, x3) > 0) {
            add = _this._addPoints$7(x30, y3, z3, x2, y2, $.$get$_BigIntImpl_one(), primeField);
            x30 = add[0];
            y3 = add[1];
            z3 = add[2];
          }
        }
      }
      t3 = y3.compareTo$1(0, x3);
      if (t3 !== 0)
        t3 = z3.compareTo$1(0, x3) === 0;
      else
        t3 = true;
      if (t3)
        return new A.ProjectiveECCPoint(t2, null, false, B.List_empty, A._setArrayType([x3, x3, x3], type$.JSArray_BigInt));
      return new A.ProjectiveECCPoint(t2, t1, false, B.List_empty, A._setArrayType([x30, y3, z3], type$.JSArray_BigInt));
    },
    mulAdd$3(selfMul, otherPoint, otherMul) {
      var t1, x3, z3, t2, p, a, t3, t4, x1, y1, z1, x2, y2, z2, mAmB, pAmB, mApB, pApB, selfNaf, otherNaf, y3, x30, i, $A, $B, result, _this = this;
      if (!otherPoint.get$isInfinity())
        t1 = otherMul.compareTo$1(0, $.$get$_BigIntImpl_zero()) === 0;
      else
        t1 = true;
      if (t1)
        return _this.$mul(0, selfMul);
      x3 = $.$get$_BigIntImpl_zero();
      t1 = selfMul.compareTo$1(0, x3);
      if (t1 === 0)
        return otherPoint.$mul(0, otherMul);
      _this._precomputeIfNeeded$0();
      otherPoint._precomputeIfNeeded$0();
      if (_this._ec_projective_point$_precompute.length !== 0 && otherPoint._ec_projective_point$_precompute.length !== 0)
        return type$.ProjectiveECCPoint._as(_this.$mul(0, selfMul).$add(0, otherPoint.$mul(0, otherMul)));
      t1 = _this.order;
      if (t1 != null) {
        selfMul = selfMul.$mod(0, t1);
        otherMul = otherMul.$mod(0, t1);
      }
      z3 = $.$get$_BigIntImpl_one();
      t2 = _this.curve;
      p = t2.p;
      a = t2.a;
      _this.scale$0();
      t3 = _this._ec_projective_point$_coords;
      t4 = t3.length;
      if (0 >= t4)
        return A.ioore(t3, 0);
      x1 = t3[0];
      if (1 >= t4)
        return A.ioore(t3, 1);
      y1 = t3[1];
      if (2 >= t4)
        return A.ioore(t3, 2);
      z1 = t3[2];
      otherPoint.scale$0();
      t3 = otherPoint._ec_projective_point$_coords;
      t4 = t3.length;
      if (0 >= t4)
        return A.ioore(t3, 0);
      x2 = t3[0];
      if (1 >= t4)
        return A.ioore(t3, 1);
      y2 = t3[1];
      if (2 >= t4)
        return A.ioore(t3, 2);
      z2 = t3[2];
      mAmB = _this._addPoints$7(x1, y1.$negate(0), z1, x2, y2.$negate(0), z2, p);
      pAmB = _this._addPoints$7(x1, y1, z1, x2, y2.$negate(0), z2, p);
      mApB = [pAmB[0], pAmB[1].$negate(0), pAmB[2]];
      pApB = [mAmB[0], mAmB[1].$negate(0), mAmB[2]];
      t3 = pApB[1].compareTo$1(0, x3);
      if (t3 !== 0)
        t3 = pApB[2].compareTo$1(0, x3) === 0;
      else
        t3 = true;
      if (t3)
        return type$.ProjectiveECCPoint._as(_this.$mul(0, selfMul).$add(0, otherPoint.$mul(0, otherMul)));
      t3 = A.BigintUtils_computeNAF(selfMul);
      t4 = A._arrayInstanceType(t3)._eval$1("ReversedListIterable<1>");
      selfNaf = A.List_List$of(new A.ReversedListIterable(t3, t4), true, t4._eval$1("ListIterable.E"));
      t4 = A.BigintUtils_computeNAF(otherMul);
      t3 = A._arrayInstanceType(t4)._eval$1("ReversedListIterable<1>");
      otherNaf = A.List_List$of(new A.ReversedListIterable(t4, t3), true, t3._eval$1("ListIterable.E"));
      t3 = selfNaf.length;
      t4 = otherNaf.length;
      if (t3 < t4)
        selfNaf = B.JSArray_methods.$add(A.List_List$filled(t4 - t3, x3, false, type$.BigInt), selfNaf);
      else if (t3 > t4)
        otherNaf = B.JSArray_methods.$add(A.List_List$filled(t3 - t4, x3, false, type$.BigInt), otherNaf);
      for (y3 = x3, x30 = y3, i = 0; i < selfNaf.length; ++i) {
        $A = selfNaf[i];
        if (!(i < otherNaf.length))
          return A.ioore(otherNaf, i);
        $B = otherNaf[i];
        result = _this._ec_projective_point$_double$5(x30, y3, z3, p, a);
        t3 = $A.compareTo$1(0, x3);
        if (t3 === 0) {
          t3 = $B.compareTo$1(0, x3);
          if (!(t3 === 0))
            result = $B.compareTo$1(0, x3) < 0 ? _this._addPoints$7(result[0], result[1], result[2], x2, y2.$negate(0), z2, p) : _this._addPoints$7(result[0], result[1], result[2], x2, y2, z2, p);
        } else if ($A.compareTo$1(0, x3) < 0) {
          t3 = $B.compareTo$1(0, x3);
          if (t3 === 0)
            result = _this._addPoints$7(result[0], result[1], result[2], x1, y1.$negate(0), z1, p);
          else
            result = $B.compareTo$1(0, x3) < 0 ? _this._addPoints$7(result[0], result[1], result[2], mAmB[0], mAmB[1], mAmB[2], p) : _this._addPoints$7(result[0], result[1], result[2], mApB[0], mApB[1], mApB[2], p);
        } else {
          t3 = $B.compareTo$1(0, x3);
          if (t3 === 0)
            result = _this._addPoints$7(result[0], result[1], result[2], x1, y1, z1, p);
          else
            result = $B.compareTo$1(0, x3) < 0 ? _this._addPoints$7(result[0], result[1], result[2], pAmB[0], pAmB[1], pAmB[2], p) : _this._addPoints$7(result[0], result[1], result[2], pApB[0], pApB[1], pApB[2], p);
        }
        x30 = result[0];
        y3 = result[1];
        z3 = result[2];
      }
      t3 = y3.compareTo$1(0, x3);
      if (t3 !== 0)
        t3 = z3.compareTo$1(0, x3) === 0;
      else
        t3 = true;
      if (t3)
        return new A.ProjectiveECCPoint(t2, null, false, B.List_empty, A._setArrayType([x3, x3, x3], type$.JSArray_BigInt));
      return new A.ProjectiveECCPoint(t2, t1, false, B.List_empty, A._setArrayType([x30, y3, z3], type$.JSArray_BigInt));
    },
    get$hashCode(_) {
      return this.curve.get$hashCode(0) ^ this.get$x().get$hashCode(0) ^ this.get$y().get$hashCode(0);
    },
    set$_ec_projective_point$_precompute(_precompute) {
      this._ec_projective_point$_precompute = type$.List_List_BigInt._as(_precompute);
    },
    set$_ec_projective_point$_coords(_coords) {
      this._ec_projective_point$_coords = type$.List_BigInt._as(_coords);
    },
    get$curve() {
      return this.curve;
    },
    get$order() {
      return this.order;
    }
  };
  A.EDPoint.prototype = {
    _maybePrecompute$0() {
      var t1, compute, i, newOrder, t2, coordsList, doubler, t3, t4, _this = this;
      if (!_this.generator || _this._precompute.length !== 0)
        return;
      t1 = _this.order;
      t1.toString;
      compute = A._setArrayType([], type$.JSArray_List_BigInt);
      i = $.$get$_BigIntImpl_one();
      newOrder = t1.$mul(0, A._BigIntImpl__BigIntImpl$from(2));
      t1 = _this._coords;
      t2 = type$.BigInt;
      coordsList = A.List_List$from(t1, true, t2);
      doubler = new A.EDPoint(_this.curve, newOrder, false, B.List_empty, A.List_List$from(t1, true, t2));
      newOrder = newOrder.$mul(0, A._BigIntImpl__BigIntImpl$from(4));
      for (t1 = type$.JSArray_BigInt; i.compareTo$1(0, newOrder) < 0;) {
        doubler = doubler.scale$0();
        t2 = doubler._coords;
        if (0 >= t2.length)
          return A.ioore(t2, 0);
        B.JSArray_methods.$indexSet(coordsList, 0, t2[0]);
        if (1 >= t2.length)
          return A.ioore(t2, 1);
        B.JSArray_methods.$indexSet(coordsList, 1, t2[1]);
        if (3 >= t2.length)
          return A.ioore(t2, 3);
        B.JSArray_methods.$indexSet(coordsList, 3, t2[3]);
        i = i.$mul(0, $.$get$_BigIntImpl_two());
        doubler = doubler.doublePoint$0();
        t2 = coordsList.length;
        if (0 >= t2)
          return A.ioore(coordsList, 0);
        t3 = coordsList[0];
        if (1 >= t2)
          return A.ioore(coordsList, 1);
        t4 = coordsList[1];
        if (3 >= t2)
          return A.ioore(coordsList, 3);
        B.JSArray_methods.add$1(compute, A._setArrayType([t3, t4, coordsList[3]], t1));
      }
      _this.set$_precompute(compute);
    },
    get$x() {
      var x1, z1, p,
        t1 = this._coords,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      x1 = t1[0];
      if (2 >= t2)
        return A.ioore(t1, 2);
      z1 = t1[2];
      t1 = z1.compareTo$1(0, $.$get$_BigIntImpl_one());
      if (t1 === 0)
        return x1;
      p = this.curve.p;
      return x1.$mul(0, A.BigintUtils_inverseMod(z1, p)).$mod(0, p);
    },
    get$y() {
      var y1, z1, p,
        t1 = this._coords,
        t2 = t1.length;
      if (1 >= t2)
        return A.ioore(t1, 1);
      y1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      z1 = t1[2];
      t1 = z1.compareTo$1(0, $.$get$_BigIntImpl_one());
      if (t1 === 0)
        return y1;
      p = this.curve.p;
      return y1.$mul(0, A.BigintUtils_inverseMod(z1, p)).$mod(0, p);
    },
    scale$0() {
      var z1, t2, t3, x1, y1, p, zInv, x, y, t, _this = this,
        t1 = _this._coords;
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      z1 = t1[2];
      t2 = $.$get$_BigIntImpl_one();
      t3 = z1.compareTo$1(0, t2);
      if (t3 === 0)
        return _this;
      t3 = t1.length;
      if (0 >= t3)
        return A.ioore(t1, 0);
      x1 = t1[0];
      if (1 >= t3)
        return A.ioore(t1, 1);
      y1 = t1[1];
      p = _this.curve.p;
      zInv = A.BigintUtils_inverseMod(z1, p);
      x = x1.$mul(0, zInv).$mod(0, p);
      y = y1.$mul(0, zInv).$mod(0, p);
      t = x.$mul(0, y).$mod(0, p);
      B.JSArray_methods.$indexSet(t1, 0, x);
      B.JSArray_methods.$indexSet(t1, 1, y);
      B.JSArray_methods.$indexSet(t1, 2, t2);
      B.JSArray_methods.$indexSet(t1, 3, t);
      return _this;
    },
    $eq(_, other) {
      var otherCoords, t1, t2, x1, y1, z1, x2, y2, z2, t3, p, xn1, xn2, yn1, yn2;
      if (other == null)
        return false;
      if (other instanceof A.EDPoint) {
        otherCoords = A.List_List$from(other._coords, true, type$.BigInt);
        t1 = this._coords;
        t2 = t1.length;
        if (0 >= t2)
          return A.ioore(t1, 0);
        x1 = t1[0];
        if (1 >= t2)
          return A.ioore(t1, 1);
        y1 = t1[1];
        if (2 >= t2)
          return A.ioore(t1, 2);
        z1 = t1[2];
        if (3 >= t2)
          return A.ioore(t1, 3);
        t1 = t1[3];
        t2 = otherCoords.length;
        if (0 >= t2)
          return A.ioore(otherCoords, 0);
        x2 = otherCoords[0];
        if (1 >= t2)
          return A.ioore(otherCoords, 1);
        y2 = otherCoords[1];
        if (2 >= t2)
          return A.ioore(otherCoords, 2);
        z2 = otherCoords[2];
        if (other.get$isInfinity()) {
          t2 = $.$get$_BigIntImpl_zero();
          t3 = x1.compareTo$1(0, t2);
          if (t3 !== 0)
            t1 = t1.compareTo$1(0, t2) === 0;
          else
            t1 = true;
          return t1;
        }
        t1 = this.curve;
        if (!t1.$eq(0, other.curve))
          return false;
        p = t1.p;
        xn1 = x1.$mul(0, z2).$mod(0, p);
        xn2 = x2.$mul(0, z1).$mod(0, p);
        yn1 = y1.$mul(0, z2).$mod(0, p);
        yn2 = y2.$mul(0, z1).$mod(0, p);
        t1 = xn1.compareTo$1(0, xn2);
        if (t1 === 0)
          t1 = yn1.compareTo$1(0, yn2) === 0;
        else
          t1 = false;
        return t1;
      }
      return false;
    },
    _edwards$_add$10(x1, y1, z1, t1, x2, y2, z2, t2, p, a) {
      var x3, y3, t3,
        $A = x1.$mul(0, x2).$mod(0, p),
        b = y1.$mul(0, y2).$mod(0, p),
        c = z1.$mul(0, t2).$mod(0, p),
        d = t1.$mul(0, z2).$mod(0, p),
        e = d.$add(0, c),
        f = x1.$sub(0, y1).$mul(0, x2.$add(0, y2)).$add(0, b).$sub(0, $A).$mod(0, p),
        g = b.$add(0, a.$mul(0, $A)),
        h = d.$sub(0, c);
      t2 = h.compareTo$1(0, $.$get$_BigIntImpl_zero());
      if (t2 === 0)
        return this._double$6(x1, y1, z1, t1, p, a);
      x3 = e.$mul(0, f).$mod(0, p);
      y3 = g.$mul(0, h).$mod(0, p);
      t3 = e.$mul(0, h).$mod(0, p);
      return A._setArrayType([x3, y3, f.$mul(0, g).$mod(0, p), t3], type$.JSArray_BigInt);
    },
    $add(_, other) {
      var t1, t2, t3, x1, y1, z1, t10, x2, y2, z2, result, t4, t5, _this = this;
      if (!(other instanceof A.EDPoint) || !_this.curve.$eq(0, other.curve))
        throw A.wrapException(B.ArgumentException_iHj);
      if (other.get$isInfinity())
        return _this;
      t1 = _this.curve;
      t2 = _this._coords;
      t3 = t2.length;
      if (0 >= t3)
        return A.ioore(t2, 0);
      x1 = t2[0];
      if (1 >= t3)
        return A.ioore(t2, 1);
      y1 = t2[1];
      if (2 >= t3)
        return A.ioore(t2, 2);
      z1 = t2[2];
      if (3 >= t3)
        return A.ioore(t2, 3);
      t10 = t2[3];
      t2 = other._coords;
      t3 = t2.length;
      if (0 >= t3)
        return A.ioore(t2, 0);
      x2 = t2[0];
      if (1 >= t3)
        return A.ioore(t2, 1);
      y2 = t2[1];
      if (2 >= t3)
        return A.ioore(t2, 2);
      z2 = t2[2];
      if (3 >= t3)
        return A.ioore(t2, 3);
      result = _this._edwards$_add$10(x1, y1, z1, t10, x2, y2, z2, t2[3], t1.p, t1.a);
      if (0 >= result.length)
        return A.ioore(result, 0);
      t2 = result[0];
      t3 = $.$get$_BigIntImpl_zero();
      t2 = J.compareTo$1$ns(t2, t3);
      if (t2 !== 0) {
        if (3 >= result.length)
          return A.ioore(result, 3);
        t2 = J.compareTo$1$ns(result[3], t3) === 0;
      } else
        t2 = true;
      if (t2)
        return new A.EDPoint(t1, null, false, B.List_empty, A._setArrayType([t3, t3, t3, t3], type$.JSArray_BigInt));
      t2 = result.length;
      if (0 >= t2)
        return A.ioore(result, 0);
      t3 = result[0];
      if (1 >= t2)
        return A.ioore(result, 1);
      t4 = result[1];
      if (2 >= t2)
        return A.ioore(result, 2);
      t5 = result[2];
      if (3 >= t2)
        return A.ioore(result, 3);
      return new A.EDPoint(t1, _this.order, false, B.List_empty, A._setArrayType([t3, t4, t5, result[3]], type$.JSArray_BigInt));
    },
    $negate(_) {
      var x1, y1, t10, p, t3,
        t1 = this._coords,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      x1 = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      y1 = t1[1];
      if (3 >= t2)
        return A.ioore(t1, 3);
      t10 = t1[3];
      t2 = this.curve;
      p = t2.p;
      t3 = p.$sub(0, y1).$mod(0, p);
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      return new A.EDPoint(t2, this.order, false, B.List_empty, A._setArrayType([x1, t3, t1[2], p.$sub(0, t10).$mod(0, p)], type$.JSArray_BigInt));
    },
    _double$6(x1, y1, z1, t1, p, a) {
      var $A = x1.$mul(0, x1).$mod(0, p),
        $B = y1.$mul(0, y1).$mod(0, p),
        $C = z1.$mul(0, z1).$mul(0, $.$get$_BigIntImpl_two()).$mod(0, p),
        $D = a.$mul(0, $A).$mod(0, p),
        $E = x1.$add(0, y1).$mul(0, x1.$add(0, y1)).$sub(0, $A).$sub(0, $B).$mod(0, p),
        $G = $D.$add(0, $B),
        $F = $G.$sub(0, $C),
        $H = $D.$sub(0, $B),
        x3 = $E.$mul(0, $F).$mod(0, p),
        y3 = $G.$mul(0, $H).$mod(0, p),
        t3 = $E.$mul(0, $H).$mod(0, p);
      return A._setArrayType([x3, y3, $F.$mul(0, $G).$mod(0, p), t3], type$.JSArray_BigInt);
    },
    doublePoint$0() {
      var x1, t10, t3, t4, t5, newCoords, _this = this,
        t1 = _this._coords,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      x1 = t1[0];
      if (3 >= t2)
        return A.ioore(t1, 3);
      t10 = t1[3];
      t2 = _this.curve;
      t3 = $.$get$_BigIntImpl_zero();
      t4 = x1.compareTo$1(0, t3);
      if (t4 !== 0)
        t4 = t10.compareTo$1(0, t3) === 0;
      else
        t4 = true;
      if (t4)
        return new A.EDPoint(t2, null, false, B.List_empty, A._setArrayType([t3, t3, t3, t3], type$.JSArray_BigInt));
      t4 = t1.length;
      if (1 >= t4)
        return A.ioore(t1, 1);
      t5 = t1[1];
      if (2 >= t4)
        return A.ioore(t1, 2);
      newCoords = _this._double$6(x1, t5, t1[2], t10, t2.p, t2.a);
      if (0 >= newCoords.length)
        return A.ioore(newCoords, 0);
      t1 = J.compareTo$1$ns(newCoords[0], t3);
      if (t1 !== 0) {
        if (3 >= newCoords.length)
          return A.ioore(newCoords, 3);
        t1 = J.compareTo$1$ns(newCoords[3], t3) === 0;
      } else
        t1 = true;
      if (t1)
        return new A.EDPoint(t2, null, false, B.List_empty, A._setArrayType([t3, t3, t3, t3], type$.JSArray_BigInt));
      return new A.EDPoint(t2, _this.order, false, B.List_empty, newCoords);
    },
    _mulPrecompute$1(other) {
      var t2, t3, t30, z3, x30, _i, tuple, t4, x2, y2, t20, rem, t5, t6, result, _this = this,
        x3 = $.$get$_BigIntImpl_zero(),
        y3 = $.$get$_BigIntImpl_one(),
        t1 = _this.curve,
        p = t1.p,
        a = t1.a;
      for (t2 = _this._precompute, t3 = t2.length, t30 = x3, z3 = y3, x30 = t30, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
        tuple = t2[_i];
        t4 = tuple.length;
        if (0 >= t4)
          return A.ioore(tuple, 0);
        x2 = tuple[0];
        if (1 >= t4)
          return A.ioore(tuple, 1);
        y2 = tuple[1];
        if (2 >= t4)
          return A.ioore(tuple, 2);
        t20 = tuple[2];
        rem = other.$mod(0, A._BigIntImpl__BigIntImpl$from(4));
        t4 = rem.compareTo$1(0, x3);
        if (t4 !== 0)
          t4 = rem.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(2)) === 0;
        else
          t4 = true;
        if (t4) {
          t4 = A._BigIntImpl__BigIntImpl$from(2);
          if (t4._used === 0)
            A.throwExpression(B.C_IntegerDivisionByZeroException);
          other = other._div$1(t4);
        } else {
          t4 = rem.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(3));
          if (t4 === 0) {
            t4 = $.$get$_BigIntImpl_one();
            t5 = other.$add(0, t4);
            t6 = $.$get$_BigIntImpl_two();
            if (t6._used === 0)
              A.throwExpression(B.C_IntegerDivisionByZeroException);
            other = t5._div$1(t6);
            result = _this._edwards$_add$10(x30, y3, z3, t30, x2.$negate(0), y2, t4, t20.$negate(0), p, a);
            t4 = result.length;
            if (0 >= t4)
              return A.ioore(result, 0);
            x30 = result[0];
            if (1 >= t4)
              return A.ioore(result, 1);
            y3 = result[1];
            if (2 >= t4)
              return A.ioore(result, 2);
            z3 = result[2];
            if (3 >= t4)
              return A.ioore(result, 3);
            t30 = result[3];
          } else {
            t4 = $.$get$_BigIntImpl_one();
            t5 = other.$sub(0, t4);
            t6 = $.$get$_BigIntImpl_two();
            if (t6._used === 0)
              A.throwExpression(B.C_IntegerDivisionByZeroException);
            other = t5._div$1(t6);
            result = _this._edwards$_add$10(x30, y3, z3, t30, x2, y2, t4, t20, p, a);
            t4 = result.length;
            if (0 >= t4)
              return A.ioore(result, 0);
            x30 = result[0];
            if (1 >= t4)
              return A.ioore(result, 1);
            y3 = result[1];
            if (2 >= t4)
              return A.ioore(result, 2);
            z3 = result[2];
            if (3 >= t4)
              return A.ioore(result, 3);
            t30 = result[3];
          }
        }
      }
      t2 = x30.compareTo$1(0, x3);
      if (t2 !== 0)
        t2 = t30.compareTo$1(0, x3) === 0;
      else
        t2 = true;
      if (t2)
        return new A.EDPoint(t1, null, false, B.List_empty, A._setArrayType([x3, x3, x3, x3], type$.JSArray_BigInt));
      return new A.EDPoint(t1, _this.order, false, B.List_empty, A._setArrayType([x30, y3, z3, t30], type$.JSArray_BigInt));
    },
    $mul(_, other) {
      var x2, y2, z2, x3, y3, t3, t4, nf, t5, t6, t30, z3, x30, _i, i, resultCoords, t7, doubleCoords, _this = this,
        t1 = _this._coords,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      x2 = t1[0];
      if (3 >= t2)
        return A.ioore(t1, 3);
      t2 = t1[3];
      y2 = t1[1];
      z2 = t1[2];
      x3 = $.$get$_BigIntImpl_zero();
      t1 = other.compareTo$1(0, x3);
      if (t1 === 0)
        return new A.EDPoint(_this.curve, null, false, B.List_empty, A._setArrayType([x3, x3, x3, x3], type$.JSArray_BigInt));
      t1 = _this.order;
      if (t1 != null)
        other = other.$mod(0, t1.$mul(0, $.$get$_BigIntImpl_two()));
      _this._maybePrecompute$0();
      if (_this._precompute.length !== 0)
        return _this._mulPrecompute$1(other);
      y3 = $.$get$_BigIntImpl_one();
      t3 = A.BigintUtils_computeNAF(other);
      t4 = A._arrayInstanceType(t3)._eval$1("ReversedListIterable<1>");
      nf = A.List_List$of(new A.ReversedListIterable(t3, t4), true, t4._eval$1("ListIterable.E"));
      for (t3 = nf.length, t4 = _this.curve, t5 = t4.p, t6 = t4.a, t30 = y3, z3 = t30, x30 = x3, _i = 0; _i < t3; ++_i) {
        i = nf[_i];
        resultCoords = _this._double$6(x30, y3, z3, t30, t5, t6);
        t7 = resultCoords.length;
        if (0 >= t7)
          return A.ioore(resultCoords, 0);
        x30 = resultCoords[0];
        if (1 >= t7)
          return A.ioore(resultCoords, 1);
        y3 = resultCoords[1];
        if (2 >= t7)
          return A.ioore(resultCoords, 2);
        z3 = resultCoords[2];
        if (3 >= t7)
          return A.ioore(resultCoords, 3);
        t30 = resultCoords[3];
        t7 = J.getInterceptor$ns(i);
        if (t7.compareTo$1(i, x3) < 0) {
          doubleCoords = _this._edwards$_add$10(x30, y3, z3, t30, x2.$negate(0), y2, z2, t2.$negate(0), t5, t6);
          t7 = doubleCoords.length;
          if (0 >= t7)
            return A.ioore(doubleCoords, 0);
          x30 = doubleCoords[0];
          if (1 >= t7)
            return A.ioore(doubleCoords, 1);
          y3 = doubleCoords[1];
          if (2 >= t7)
            return A.ioore(doubleCoords, 2);
          z3 = doubleCoords[2];
          if (3 >= t7)
            return A.ioore(doubleCoords, 3);
          t30 = doubleCoords[3];
        } else if (t7.compareTo$1(i, x3) > 0) {
          doubleCoords = _this._edwards$_add$10(x30, y3, z3, t30, x2, y2, z2, t2, t5, t6);
          t7 = doubleCoords.length;
          if (0 >= t7)
            return A.ioore(doubleCoords, 0);
          x30 = doubleCoords[0];
          if (1 >= t7)
            return A.ioore(doubleCoords, 1);
          y3 = doubleCoords[1];
          if (2 >= t7)
            return A.ioore(doubleCoords, 2);
          z3 = doubleCoords[2];
          if (3 >= t7)
            return A.ioore(doubleCoords, 3);
          t30 = doubleCoords[3];
        }
      }
      return new A.EDPoint(t4, t1, false, B.List_empty, A._setArrayType([x30, y3, z3, t30], type$.JSArray_BigInt));
    },
    get$hashCode(_) {
      return this.get$x().get$hashCode(0) ^ this.get$y().get$hashCode(0) ^ J.get$hashCode$(this.order);
    },
    get$isInfinity() {
      var t4,
        t1 = this._coords,
        t2 = t1.length,
        t3 = true;
      if (t2 !== 0) {
        if (0 >= t2)
          return A.ioore(t1, 0);
        t2 = t1[0];
        t4 = $.$get$_BigIntImpl_zero();
        t2 = J.compareTo$1$ns(t2, t4);
        if (t2 !== 0) {
          if (3 >= t1.length)
            return A.ioore(t1, 3);
          t1 = J.compareTo$1$ns(t1[3], t4) === 0;
        } else
          t1 = t3;
      } else
        t1 = t3;
      return t1;
    },
    set$_precompute(_precompute) {
      this._precompute = type$.List_List_BigInt._as(_precompute);
    },
    get$curve() {
      return this.curve;
    },
    get$order() {
      return this.order;
    }
  };
  A.RistrettoPoint.prototype = {
    $mul(_, other) {
      return A.RistrettoPoint_RistrettoPoint$fromEdwardsPoint(this.super$EDPoint$$mul(0, other));
    },
    $add(_, other) {
      return A.RistrettoPoint_RistrettoPoint$fromEdwardsPoint(this.super$EDPoint$$add(0, other));
    },
    toBytes$0() {
      var x, y, z, t, u1, u2, u2Squared, invSqrt, d1, d2, zInverse, t2, x2, y2, $D, s,
        primeP = $.$get$Curves_curveEd25519().p,
        pointCoords = A.List_List$from(this._coords, true, type$.BigInt),
        t1 = pointCoords.length;
      if (0 >= t1)
        return A.ioore(pointCoords, 0);
      x = pointCoords[0];
      if (1 >= t1)
        return A.ioore(pointCoords, 1);
      y = pointCoords[1];
      if (2 >= t1)
        return A.ioore(pointCoords, 2);
      z = pointCoords[2];
      if (3 >= t1)
        return A.ioore(pointCoords, 3);
      t = pointCoords[3];
      u1 = A.positiveMod(A.positiveMod(z.$add(0, y), primeP).$mul(0, A.positiveMod(z.$sub(0, y), primeP)), primeP);
      u2 = A.positiveMod(x.$mul(0, y), primeP);
      u2Squared = A.positiveMod(u2.$mul(0, u2), primeP);
      t1 = $.$get$_BigIntImpl_one();
      invSqrt = A.sqrtUV(t1, A.positiveMod(u1.$mul(0, u2Squared), primeP)).item2;
      d1 = A.positiveMod(invSqrt.$mul(0, u1), primeP);
      d2 = A.positiveMod(invSqrt.$mul(0, u2), primeP);
      zInverse = A.positiveMod(d1.$mul(0, d2).$mul(0, t), primeP);
      t2 = A.positiveMod(t.$mul(0, zInverse), primeP).$and(0, t1).compareTo$1(0, t1);
      if (t2 === 0) {
        t2 = $.$get$sqrtM1();
        x2 = A.positiveMod(y.$mul(0, t2), primeP);
        y2 = A.positiveMod(x.$mul(0, t2), primeP);
        $D = A.positiveMod(d1.$mul(0, $.$get$invSqrt()), primeP);
        y = y2;
        x = x2;
      } else
        $D = d2;
      t2 = A.positiveMod(x.$mul(0, zInverse), primeP).$and(0, t1).compareTo$1(0, t1);
      s = A.positiveMod(z.$sub(0, t2 === 0 ? A.positiveMod(y.$negate(0), primeP) : y).$mul(0, $D), primeP);
      t1 = A.positiveMod(s, primeP).$and(0, t1).compareTo$1(0, t1);
      return A.BigintUtils_toBytes(t1 === 0 ? A.positiveMod(s.$negate(0), primeP) : s, 32, B.C_Endian0);
    }
  };
  A.SquareRootError.prototype = {};
  A.JacobiError.prototype = {};
  A.ChaCha20Poly1305.prototype = {
    encrypt$2(nonce, plaintext) {
      var t2, counter, authKey, resultLength, result, calculatedTag,
        t1 = type$.List_int;
      t1._as(nonce);
      t1._as(plaintext);
      t1 = J.getInterceptor$asx(nonce);
      if (t1.get$length(nonce) > 16)
        throw A.wrapException(B.ArgumentException_Ufa);
      t2 = type$.int;
      counter = A.List_List$filled(16, 0, false, t2);
      B.JSArray_methods.setRange$3(counter, 16 - t1.get$length(nonce), 16, A.BytesUtils_toBytes(nonce, false));
      authKey = A.List_List$filled(32, 0, false, t2);
      t1 = this.__ChaCha20Poly1305__key_A;
      t1 === $ && A.throwLateFieldNI("_key");
      A.zero(authKey);
      A.ChaCha20_streamXOR(t1, counter, authKey, authKey, 4);
      resultLength = plaintext.length + 16;
      result = A.List_List$filled(resultLength, 0, false, t2);
      A.ChaCha20_streamXOR(this.__ChaCha20Poly1305__key_A, counter, A.BytesUtils_toBytes(plaintext, false), result, 4);
      calculatedTag = A.List_List$filled(16, 0, false, t2);
      t1 = resultLength - 16;
      this._authenticate$4(calculatedTag, authKey, B.JSArray_methods.sublist$2(result, 0, t1), null);
      B.JSArray_methods.setRange$3(result, t1, resultLength, calculatedTag);
      A.zero(counter);
      return result;
    },
    decrypt$2(nonce, sealed) {
      var t2, t3, counter, authKey, calculatedTag, result,
        t1 = type$.List_int;
      t1._as(nonce);
      t1._as(sealed);
      t1 = nonce.length;
      if (t1 > 16)
        throw A.wrapException(B.ArgumentException_Ufa);
      t2 = sealed.length;
      if (t2 < 16)
        return null;
      t3 = type$.int;
      counter = A.List_List$filled(16, 0, false, t3);
      B.JSArray_methods.setRange$3(counter, 16 - t1, 16, nonce);
      authKey = A.List_List$filled(32, 0, false, t3);
      t1 = this.__ChaCha20Poly1305__key_A;
      t1 === $ && A.throwLateFieldNI("_key");
      A.zero(authKey);
      A.ChaCha20_streamXOR(t1, counter, authKey, authKey, 4);
      calculatedTag = A.List_List$filled(16, 0, false, t3);
      t2 -= 16;
      this._authenticate$4(calculatedTag, authKey, B.JSArray_methods.sublist$2(sealed, 0, t2), null);
      if (!A.BytesUtils_bytesEqual(calculatedTag, B.JSArray_methods.sublist$1(sealed, t2)))
        return null;
      result = A.List_List$filled(t2, 0, false, t3);
      A.ChaCha20_streamXOR(this.__ChaCha20Poly1305__key_A, counter, B.JSArray_methods.sublist$2(sealed, 0, t2), result, 4);
      A.zero(counter);
      return result;
    },
    _authenticate$4(tagOut, authKey, ciphertext, associatedData) {
      var t2, t3, t4, t5, h, t00, t10, t30, t50, t6, t7, $length, mac, i,
        t1 = type$.List_int;
      t1._as(tagOut);
      t1._as(authKey);
      t1._as(ciphertext);
      t1 = type$.int;
      t2 = A.List_List$filled(16, 0, false, t1);
      t3 = A.List_List$filled(10, 0, false, t1);
      t4 = A.List_List$filled(10, 0, false, t1);
      t5 = A.List_List$filled(8, 0, false, t1);
      h = new A.Poly1305(t2, t3, t4, t5);
      t00 = authKey[0] | authKey[1] << 8;
      B.JSArray_methods.$indexSet(t3, 0, t00 & 8191);
      t10 = authKey[2] | authKey[3] << 8;
      B.JSArray_methods.$indexSet(t3, 1, (t00 >>> 13 | t10 << 3) & 8191);
      t2 = authKey[4] | authKey[5] << 8;
      B.JSArray_methods.$indexSet(t3, 2, (t10 >>> 10 | t2 << 6) & 7939);
      t30 = authKey[6] | authKey[7] << 8;
      B.JSArray_methods.$indexSet(t3, 3, (t2 >>> 7 | t30 << 9) & 8191);
      t4 = authKey[8] | authKey[9] << 8;
      B.JSArray_methods.$indexSet(t3, 4, (t30 >>> 4 | t4 << 12) & 255);
      B.JSArray_methods.$indexSet(t3, 5, t4 >>> 1 & 8190);
      t50 = authKey[10] | authKey[11] << 8;
      B.JSArray_methods.$indexSet(t3, 6, (t4 >>> 14 | t50 << 2) & 8191);
      t6 = authKey[12] | authKey[13] << 8;
      B.JSArray_methods.$indexSet(t3, 7, (t50 >>> 11 | t6 << 5) & 8065);
      t7 = authKey[14] | authKey[15] << 8;
      B.JSArray_methods.$indexSet(t3, 8, (t6 >>> 8 | t7 << 8) & 8191);
      B.JSArray_methods.$indexSet(t3, 9, t7 >>> 5 & 127);
      B.JSArray_methods.$indexSet(t5, 0, (authKey[16] | authKey[17] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 1, (authKey[18] | authKey[19] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 2, (authKey[20] | authKey[21] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 3, (authKey[22] | authKey[23] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 4, (authKey[24] | authKey[25] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 5, (authKey[26] | authKey[27] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 6, (authKey[28] | authKey[29] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 7, (authKey[30] | authKey[31] << 8) >>> 0);
      h.update$1(ciphertext);
      t2 = B.JSInt_methods.$mod(ciphertext.length, 16);
      if (t2 > 0)
        h.update$1(A.List_List$filled(16 - t2, 0, false, t1));
      $length = A.List_List$filled(8, 0, false, t1);
      h.update$1($length);
      A.writeUint64LE(ciphertext.length, $length);
      h.update$1($length);
      if (h._poly1305$_finished)
        A.throwExpression(B.MessageException_kKo);
      mac = A.List_List$filled(16, 0, false, t1);
      h.finish$1(mac);
      for (i = 0; i < 16; ++i)
        B.JSArray_methods.$indexSet(tagOut, i, mac[i]);
      A.zero(h._poly1305$_buffer);
      A.zero(t3);
      A.zero(h._h);
      A.zero(t5);
      h._fin = h._leftover = 0;
      h._poly1305$_finished = true;
      A.zero(mac);
      A.zero($length);
    },
    set$__ChaCha20Poly1305__key_A(__ChaCha20Poly1305__key_A) {
      this.__ChaCha20Poly1305__key_A = type$.List_int._as(__ChaCha20Poly1305__key_A);
    }
  };
  A.CTR.prototype = {
    setCipher$2(cipher, iv) {
      var t1, t2, _this = this;
      type$.nullable_List_int._as(iv);
      _this._cipher = null;
      t1 = J.get$length$asx(iv);
      t2 = _this.__CTR__counter_F;
      t2 === $ && A.throwLateFieldNI("_counter");
      if (t1 !== t2.length)
        throw A.wrapException(B.ArgumentException_seG);
      _this._cipher = cipher;
      B.JSArray_methods.setAll$2(t2, 0, iv);
      t1 = _this.__CTR__buffer_F;
      t1 === $ && A.throwLateFieldNI("_buffer");
      _this._bufpos = t1.length;
      return _this;
    },
    streamXOR$2(src, dst) {
      var t2, t3, i, t4, t5, t6, t7, t8, _this = this,
        t1 = type$.List_int;
      t1._as(src);
      t1._as(dst);
      for (t2 = J.getInterceptor$asx(src), t3 = type$.nullable_List_int, i = 0; i < t2.get$length(src); ++i) {
        t4 = _this._bufpos;
        t5 = _this.__CTR__buffer_F;
        t5 === $ && A.throwLateFieldNI("_buffer");
        t6 = t5.length;
        if (t4 === t6) {
          t4 = _this._cipher;
          t4.toString;
          t7 = _this.__CTR__counter_F;
          t7 === $ && A.throwLateFieldNI("_counter");
          t1._as(t7);
          t3._as(t5);
          if (t7.length !== 16)
            A.throwExpression(B.ArgumentException_4uP);
          if (t6 !== 16)
            A.throwExpression(B.ArgumentException_adc);
          t4 = t4._encKey;
          if (t4 == null)
            A.throwExpression(B.MessageException_Q5s);
          t8 = $.$get$AES__lib();
          t4.toString;
          t8.encryptBlock$3(t4, t7, t5);
          _this._bufpos = 0;
          A._incrementCounter(t7);
        }
        t4 = t2.$index(src, i);
        if (typeof t4 !== "number")
          return t4.$and();
        t7 = _this._bufpos++;
        if (!(t7 < t6))
          return A.ioore(t5, t7);
        B.JSArray_methods.$indexSet(dst, i, t4 & 255 ^ t5[t7]);
      }
    },
    set$__CTR__counter_F(__CTR__counter_F) {
      this.__CTR__counter_F = type$.List_int._as(__CTR__counter_F);
    },
    set$__CTR__buffer_F(__CTR__buffer_F) {
      this.__CTR__buffer_F = type$.List_int._as(__CTR__buffer_F);
    }
  };
  A.Blake2bConfig.prototype = {};
  A.BLAKE2b.prototype = {
    update$1(data) {
      var left, t1, dataLength, t2, i, t3, t4, dataPos, _this = this;
      type$.List_int._as(data);
      if (_this._finished)
        throw A.wrapException(B.ArgumentException_AHc);
      left = 128 - _this._bufferLength;
      t1 = J.getInterceptor$asx(data);
      dataLength = t1.get$length(data);
      if (dataLength === 0)
        return _this;
      if (dataLength > left) {
        for (t2 = _this._hash$_buffer, i = 0; i < left; ++i) {
          t3 = _this._bufferLength;
          t4 = t1.$index(data, i);
          if (typeof t4 !== "number")
            return t4.$and();
          B.JSArray_methods.$indexSet(t2, t3 + i, t4 & 255);
        }
        _this._processBlock$1(128);
        dataLength -= left;
        _this._bufferLength = 0;
        dataPos = left;
      } else
        dataPos = 0;
      for (t2 = _this._hash$_buffer; dataLength > 128;) {
        for (i = 0; i < 128; ++i) {
          t3 = t1.$index(data, dataPos + i);
          if (typeof t3 !== "number")
            return t3.$and();
          B.JSArray_methods.$indexSet(t2, i, t3 & 255);
        }
        _this._processBlock$1(128);
        dataPos += 128;
        dataLength -= 128;
        _this._bufferLength = 0;
      }
      for (i = 0; i < dataLength; ++i) {
        t3 = _this._bufferLength;
        t4 = t1.$index(data, dataPos + i);
        if (typeof t4 !== "number")
          return t4.$and();
        B.JSArray_methods.$indexSet(t2, t3 + i, t4 & 255);
      }
      _this._bufferLength += dataLength;
      return _this;
    },
    finish$1(out) {
      var i, t1, tmp, t2, _this = this, _4294967295 = 4294967295;
      type$.List_int._as(out);
      if (!_this._finished) {
        for (i = _this._bufferLength, t1 = _this._hash$_buffer; i < 128; ++i)
          B.JSArray_methods.$indexSet(t1, i, 0);
        t1 = _this._flag;
        B.JSArray_methods.$indexSet(t1, 0, _4294967295);
        B.JSArray_methods.$indexSet(t1, 1, _4294967295);
        _this._processBlock$1(_this._bufferLength);
        _this._finished = true;
      }
      tmp = A.List_List$filled(64, 0, false, type$.int);
      for (t1 = _this._state, t2 = t1.length, i = 0; i < 16; ++i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        A.writeUint32LE(t1[i], tmp, i * 4);
      }
      B.JSArray_methods.setRange$3(out, 0, out.length, tmp);
      return _this;
    },
    digest$0() {
      var out,
        t1 = this.__BLAKE2b_getDigestLength_F;
      t1 === $ && A.throwLateFieldNI("getDigestLength");
      out = A.List_List$filled(t1, 0, false, type$.int);
      this.finish$1(out);
      return out;
    },
    clean$0() {
      var t1, _this = this;
      A.zero(_this._vtmp);
      A.zero(_this._mtmp);
      A.zero(_this._state);
      A.zero(_this._hash$_buffer);
      t1 = _this.__BLAKE2b__initialState_A;
      t1 === $ && A.throwLateFieldNI("_initialState");
      A.zero(t1);
      t1 = _this._paddedKey;
      if (t1 != null)
        A.zero(t1);
      _this._bufferLength = 0;
      A.zero(_this._ctr);
      A.zero(_this._flag);
      _this._finished = _this._lastNode = false;
    },
    _g$13(v, al, bl, cl, dl, ah, bh, ch, dh, ml0, mh0, ml1, mh1) {
      var vla, vha, vlb, vhb, vlc, vhc, vld, vhd, t1, t2, w, x, y, w0, vld0, w1;
      type$.List_int._as(v);
      if (!(al < 32))
        return A.ioore(v, al);
      vla = v[al];
      if (!(ah < 32))
        return A.ioore(v, ah);
      vha = v[ah];
      if (!(bl < 32))
        return A.ioore(v, bl);
      vlb = v[bl];
      if (!(bh < 32))
        return A.ioore(v, bh);
      vhb = v[bh];
      if (!(cl < 32))
        return A.ioore(v, cl);
      vlc = v[cl];
      if (!(ch < 32))
        return A.ioore(v, ch);
      vhc = v[ch];
      if (!(dl < 32))
        return A.ioore(v, dl);
      vld = v[dl];
      if (!(dh < 32))
        return A.ioore(v, dh);
      vhd = v[dh];
      t1 = B.JSInt_methods._shrOtherPositive$1(vla, 16);
      t2 = B.JSInt_methods._shrOtherPositive$1(vha, 16);
      w = (vla & 65535) + (vlb & 65535);
      x = (t1 & 65535) + (B.JSInt_methods._shrOtherPositive$1(vlb, 16) & 65535) + (w >>> 16 & 65535);
      y = (vha & 65535) + (vhb & 65535) + (x >>> 16 & 65535);
      vha = y & 65535 | (t2 & 65535) + (B.JSInt_methods._shrOtherPositive$1(vhb, 16) & 65535) + (y >>> 16 & 65535) << 16;
      vla = w & 65535 | x << 16;
      w = (vla & 65535) + (ml0 & 65535);
      x = (vla >>> 16 & 65535) + (ml0 >>> 16 & 65535) + (w >>> 16 & 65535);
      y = (vha & 65535) + (mh0 & 65535) + (x >>> 16 & 65535);
      vha = y & 65535 | (vha >>> 16 & 65535) + (mh0 >>> 16 & 65535) + (y >>> 16 & 65535) << 16;
      vla = w & 65535 | x << 16;
      vld ^= vla;
      vhd ^= vha;
      w = (vlc & 65535) + (vhd & 65535);
      x = (B.JSInt_methods._shrOtherPositive$1(vlc, 16) & 65535) + (vhd >>> 16 & 65535) + (w >>> 16 & 65535);
      y = (vhc & 65535) + (vld & 65535) + (x >>> 16 & 65535);
      vhc = y & 65535 | (B.JSInt_methods._shrOtherPositive$1(vhc, 16) & 65535) + (vld >>> 16 & 65535) + (y >>> 16 & 65535) << 16;
      vlc = w & 65535 | x << 16;
      vlb ^= vlc;
      vhb ^= vhc;
      w = vlb << 8 | vhb >>> 24;
      vlb = vhb << 8 | vlb >>> 24;
      w0 = (vla & 65535) + (vlb & 65535);
      x = (vla >>> 16 & 65535) + (vlb >>> 16 & 65535) + (w0 >>> 16 & 65535);
      y = (vha & 65535) + (w & 65535) + (x >>> 16 & 65535);
      vha = y & 65535 | (vha >>> 16 & 65535) + (w >>> 16 & 65535) + (y >>> 16 & 65535) << 16;
      vla = w0 & 65535 | x << 16;
      w0 = (vla & 65535) + (ml1 & 65535);
      x = (vla >>> 16 & 65535) + (ml1 >>> 16 & 65535) + (w0 >>> 16 & 65535);
      y = (vha & 65535) + (mh1 & 65535) + (x >>> 16 & 65535);
      vha = (y & 65535 | (vha >>> 16 & 65535) + (mh1 >>> 16 & 65535) + (y >>> 16 & 65535) << 16) >>> 0;
      vla = (w0 & 65535 | x << 16) >>> 0;
      vld0 = vhd ^ vla;
      vhd = vld ^ vha;
      w0 = (vld0 << 16 | vhd >>> 16) >>> 0;
      vld = (vhd << 16 | vld0 >>> 16) >>> 0;
      w1 = (vlc & 65535) + (vld & 65535);
      x = (vlc >>> 16 & 65535) + (vld >>> 16 & 65535) + (w1 >>> 16 & 65535);
      y = (vhc & 65535) + (w0 & 65535) + (x >>> 16 & 65535);
      vhc = (y & 65535 | (vhc >>> 16 & 65535) + (w0 >>> 16 & 65535) + (y >>> 16 & 65535) << 16) >>> 0;
      vlc = (w1 & 65535 | x << 16) >>> 0;
      vlb ^= vlc;
      vhb = w ^ vhc;
      B.JSArray_methods.$indexSet(v, al, vla);
      B.JSArray_methods.$indexSet(v, ah, vha);
      B.JSArray_methods.$indexSet(v, bl, (vlb << 1 | vhb >>> 31) >>> 0);
      B.JSArray_methods.$indexSet(v, bh, (vhb << 1 | vlb >>> 31) >>> 0);
      B.JSArray_methods.$indexSet(v, cl, vlc);
      B.JSArray_methods.$indexSet(v, ch, vhc);
      B.JSArray_methods.$indexSet(v, dl, vld);
      B.JSArray_methods.$indexSet(v, dh, w0);
    },
    _processBlock$1($length) {
      var v, t1, t2, t3, t4, m, i, r, t5, _this = this;
      _this._incrementCounter$1($length);
      v = _this._vtmp;
      t1 = _this._state;
      B.JSArray_methods.setAll$2(v, 0, t1);
      B.JSArray_methods.setAll$2(v, 16, $.$get$_iv());
      t2 = v[24];
      t3 = _this._ctr;
      t4 = t3[0];
      if (typeof t2 !== "number")
        return t2.$xor();
      if (typeof t4 !== "number")
        return A.iae(t4);
      B.JSArray_methods.$indexSet(v, 24, (t2 ^ t4) >>> 0);
      t4 = v[25];
      t2 = t3[1];
      if (typeof t4 !== "number")
        return t4.$xor();
      if (typeof t2 !== "number")
        return A.iae(t2);
      B.JSArray_methods.$indexSet(v, 25, (t4 ^ t2) >>> 0);
      t2 = v[26];
      t4 = t3[2];
      if (typeof t2 !== "number")
        return t2.$xor();
      if (typeof t4 !== "number")
        return A.iae(t4);
      B.JSArray_methods.$indexSet(v, 26, (t2 ^ t4) >>> 0);
      t4 = v[27];
      t3 = t3[3];
      if (typeof t4 !== "number")
        return t4.$xor();
      if (typeof t3 !== "number")
        return A.iae(t3);
      B.JSArray_methods.$indexSet(v, 27, (t4 ^ t3) >>> 0);
      t3 = v[28];
      t4 = _this._flag;
      t2 = t4[0];
      if (typeof t3 !== "number")
        return t3.$xor();
      if (typeof t2 !== "number")
        return A.iae(t2);
      B.JSArray_methods.$indexSet(v, 28, (t3 ^ t2) >>> 0);
      t2 = v[29];
      t3 = t4[1];
      if (typeof t2 !== "number")
        return t2.$xor();
      if (typeof t3 !== "number")
        return A.iae(t3);
      B.JSArray_methods.$indexSet(v, 29, (t2 ^ t3) >>> 0);
      t3 = v[30];
      t2 = t4[2];
      if (typeof t3 !== "number")
        return t3.$xor();
      if (typeof t2 !== "number")
        return A.iae(t2);
      B.JSArray_methods.$indexSet(v, 30, (t3 ^ t2) >>> 0);
      t2 = v[31];
      t4 = t4[3];
      if (typeof t2 !== "number")
        return t2.$xor();
      if (typeof t4 !== "number")
        return A.iae(t4);
      B.JSArray_methods.$indexSet(v, 31, (t2 ^ t4) >>> 0);
      m = _this._mtmp;
      for (t2 = _this._hash$_buffer, i = 0; i < 32; ++i)
        B.JSArray_methods.$indexSet(m, i, A.readUint32LE(t2, i * 4));
      for (r = 0; r < 12; ++r) {
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 0));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 0);
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = B.JSArray_methods.$index(m, t3 + 1);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 1));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 1);
        if (typeof t5 !== "number")
          return t5.$add();
        _this._g$13(v, 0, 8, 16, 24, 1, 9, 17, 25, t2, t3, t4, B.JSArray_methods.$index(m, t5 + 1));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 2));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 2);
        if (typeof t4 !== "number")
          return t4.$add();
        t4 = B.JSArray_methods.$index(m, t4 + 1);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 3));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 3);
        if (typeof t2 !== "number")
          return t2.$add();
        _this._g$13(v, 2, 10, 18, 26, 3, 11, 19, 27, t5, t4, t3, B.JSArray_methods.$index(m, t2 + 1));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 4));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 4);
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = B.JSArray_methods.$index(m, t3 + 1);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 5));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 5);
        if (typeof t5 !== "number")
          return t5.$add();
        _this._g$13(v, 4, 12, 20, 28, 5, 13, 21, 29, t2, t3, t4, B.JSArray_methods.$index(m, t5 + 1));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 6));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 6);
        if (typeof t4 !== "number")
          return t4.$add();
        t4 = B.JSArray_methods.$index(m, t4 + 1);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 7));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 7);
        if (typeof t2 !== "number")
          return t2.$add();
        _this._g$13(v, 6, 14, 22, 30, 7, 15, 23, 31, t5, t4, t3, B.JSArray_methods.$index(m, t2 + 1));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 8));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 8);
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = B.JSArray_methods.$index(m, t3 + 1);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 9));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 9);
        if (typeof t5 !== "number")
          return t5.$add();
        _this._g$13(v, 0, 10, 20, 30, 1, 11, 21, 31, t2, t3, t4, B.JSArray_methods.$index(m, t5 + 1));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 10));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 10);
        if (typeof t4 !== "number")
          return t4.$add();
        t4 = B.JSArray_methods.$index(m, t4 + 1);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 11));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 11);
        if (typeof t2 !== "number")
          return t2.$add();
        _this._g$13(v, 2, 12, 22, 24, 3, 13, 23, 25, t5, t4, t3, B.JSArray_methods.$index(m, t2 + 1));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 12));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 12);
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = B.JSArray_methods.$index(m, t3 + 1);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 13));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 13);
        if (typeof t5 !== "number")
          return t5.$add();
        _this._g$13(v, 4, 14, 16, 26, 5, 15, 17, 27, t2, t3, t4, B.JSArray_methods.$index(m, t5 + 1));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 14));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 14);
        if (typeof t4 !== "number")
          return t4.$add();
        t4 = B.JSArray_methods.$index(m, t4 + 1);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = B.JSArray_methods.$index(m, J.$index$asx($._sigma[r], 15));
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 15);
        if (typeof t2 !== "number")
          return t2.$add();
        _this._g$13(v, 6, 8, 18, 28, 7, 9, 19, 29, t5, t4, t3, B.JSArray_methods.$index(m, t2 + 1));
      }
      for (t2 = t1.length, i = 0; i < 16; ++i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        t3 = t1[i];
        t4 = v[i];
        t5 = v[i + 16];
        if (typeof t4 !== "number")
          return t4.$xor();
        if (typeof t5 !== "number")
          return A.iae(t5);
        if (typeof t3 !== "number")
          return t3.$xor();
        B.JSArray_methods.$indexSet(t1, i, (t3 ^ t4 ^ t5) >>> 0);
      }
    },
    cleanSavedState$1(savedState) {
      var t1;
      type$.Blake2bState._as(savedState);
      A.zero(savedState.state);
      A.zero(savedState.buffer);
      A.zero(savedState.initialState);
      t1 = savedState.paddedKey;
      if (t1 != null)
        A.zero(t1);
      savedState.bufferLength = 0;
      A.zero(savedState.ctr);
      A.zero(savedState.flag);
      savedState.lastNode = false;
    },
    get$getBlockSize() {
      return 128;
    },
    get$getDigestLength() {
      var t1 = this.__BLAKE2b_getDigestLength_F;
      t1 === $ && A.throwLateFieldNI("getDigestLength");
      return t1;
    },
    restoreState$1(savedState) {
      var t1, _this = this;
      type$.Blake2bState._as(savedState);
      B.JSArray_methods.setAll$2(_this._state, 0, savedState.state);
      B.JSArray_methods.setAll$2(_this._hash$_buffer, 0, savedState.buffer);
      _this._bufferLength = savedState.bufferLength;
      B.JSArray_methods.setAll$2(_this._ctr, 0, savedState.ctr);
      B.JSArray_methods.setAll$2(_this._flag, 0, savedState.flag);
      _this._lastNode = false;
      t1 = _this._paddedKey;
      if (t1 != null)
        A.zero(t1);
      t1 = savedState.paddedKey;
      _this.set$_paddedKey(t1 != null ? A.List_List$from(t1, true, type$.int) : null);
      t1 = _this.__BLAKE2b__initialState_A;
      t1 === $ && A.throwLateFieldNI("_initialState");
      B.JSArray_methods.setAll$2(t1, 0, savedState.initialState);
      return _this;
    },
    saveState$0() {
      var t1, t2, t3, t4, t5, t6, t7, t8, _this = this;
      if (_this._finished)
        throw A.wrapException(B.MessageException_c9P);
      t1 = type$.int;
      t2 = A.List_List$from(_this._state, false, t1);
      t3 = A.List_List$from(_this._hash$_buffer, false, t1);
      t4 = _this._bufferLength;
      t5 = A.List_List$from(_this._ctr, false, t1);
      t6 = A.List_List$from(_this._flag, false, t1);
      t7 = _this._paddedKey;
      t7 = t7 != null ? A.List_List$from(t7, true, t1) : null;
      t8 = _this.__BLAKE2b__initialState_A;
      t8 === $ && A.throwLateFieldNI("_initialState");
      return new A.Blake2bState(t2, t3, t4, t5, t6, false, t7, A.List_List$from(t8, false, t1));
    },
    _incrementCounter$1($length) {
      var t1, i, t2, a;
      for (t1 = this._ctr, i = 0; i < 3; ++i, $length = 1) {
        t2 = t1[i];
        if (typeof t2 !== "number")
          return t2.$add();
        a = t2 + $length;
        B.JSArray_methods.$indexSet(t1, i, a >>> 0);
        if (J.$eq$(t1[i], a))
          return;
      }
    },
    set$_paddedKey(_paddedKey) {
      this._paddedKey = type$.nullable_List_int._as(_paddedKey);
    },
    set$__BLAKE2b__initialState_A(__BLAKE2b__initialState_A) {
      this.__BLAKE2b__initialState_A = type$.List_int._as(__BLAKE2b__initialState_A);
    },
    $isSerializableHash: 1
  };
  A.Blake2bState.prototype = {$isHashState: 1};
  A._Keccack.prototype = {
    _Keccack$1(capacity) {
      if (capacity <= 0 || capacity > 128)
        throw A.wrapException(B.ArgumentException_Y3r);
      this.___Keccack_blockSize_F !== $ && A.throwLateFieldAI("blockSize");
      this.___Keccack_blockSize_F = 200 - capacity;
    },
    reset$0() {
      var _this = this;
      A.zero(_this._sh);
      A.zero(_this._sl);
      A.zero(_this._state);
      _this._pos = 0;
      _this._finished = false;
      return _this;
    },
    update$1(data) {
      var t1, t2, t3, t4, i, t5, t6, t7, _this = this;
      type$.List_int._as(data);
      if (_this._finished)
        throw A.wrapException(B.MessageException_GVQ);
      for (t1 = J.getInterceptor$asx(data), t2 = _this._state, t3 = _this._sh, t4 = _this._sl, i = 0; i < t1.get$length(data); ++i) {
        t5 = _this._pos++;
        if (!(t5 < 200))
          return A.ioore(t2, t5);
        t6 = t2[t5];
        t7 = t1.$index(data, i);
        if (typeof t7 !== "number")
          return t7.$and();
        if (typeof t6 !== "number")
          return t6.$xor();
        B.JSArray_methods.$indexSet(t2, t5, (t6 ^ t7 & 255) >>> 0);
        t5 = _this._pos;
        t6 = _this.___Keccack_blockSize_F;
        t6 === $ && A.throwLateFieldNI("blockSize");
        if (t5 >= t6) {
          A._keccakf(t3, t4, t2);
          _this._pos = 0;
        }
      }
      return _this;
    },
    clean$0() {
      return this.reset$0();
    },
    _padAndPermute$1(paddingByte) {
      var t3, _this = this,
        t1 = _this._state,
        t2 = _this._pos;
      if (!(t2 < 200))
        return A.ioore(t1, t2);
      t3 = t1[t2];
      if (typeof t3 !== "number")
        return t3.$xor();
      B.JSArray_methods.$indexSet(t1, t2, (t3 ^ paddingByte) >>> 0);
      t3 = _this.___Keccack_blockSize_F;
      t3 === $ && A.throwLateFieldNI("blockSize");
      --t3;
      if (!(t3 >= 0 && t3 < 200))
        return A.ioore(t1, t3);
      t2 = t1[t3];
      if (typeof t2 !== "number")
        return t2.$xor();
      B.JSArray_methods.$indexSet(t1, t3, (t2 ^ 128) >>> 0);
      A._keccakf(_this._sh, _this._sl, t1);
      _this._finished = true;
      _this._pos = 0;
    },
    _squeeze$1(dst) {
      var t1, t2, t3, t4, i, t5, t6, _this = this;
      type$.List_int._as(dst);
      if (!_this._finished)
        throw A.wrapException(B.MessageException_66y);
      for (t1 = dst.length, t2 = _this._state, t3 = _this._sh, t4 = _this._sl, i = 0; i < t1; ++i) {
        t5 = _this._pos;
        t6 = _this.___Keccack_blockSize_F;
        t6 === $ && A.throwLateFieldNI("blockSize");
        if (t5 === t6) {
          A._keccakf(t3, t4, t2);
          t5 = _this._pos = 0;
        }
        _this._pos = t5 + 1;
        if (!(t5 < 200))
          return A.ioore(t2, t5);
        B.JSArray_methods.$indexSet(dst, i, t2[t5]);
      }
    }
  };
  A.Keccack.prototype = {
    reset$0() {
      this.super$_Keccack$reset();
      return this;
    }
  };
  A.SHA3.prototype = {
    get$getBlockSize() {
      return 200;
    },
    reset$0() {
      this.super$_Keccack$reset();
      return this;
    },
    update$1(data) {
      this.super$_Keccack$update(type$.List_int._as(data));
      return this;
    },
    finish$1(dst) {
      var _this = this;
      type$.List_int._as(dst);
      if (!_this._finished)
        _this._padAndPermute$1(6);
      else
        _this._pos = 0;
      _this._squeeze$1(dst);
      return _this;
    },
    digest$0() {
      var out = A.List_List$filled(this.getDigestLength, 0, false, type$.int);
      this.finish$1(out);
      return out;
    },
    saveState$0() {
      var t1, t2, t3;
      if (this._finished)
        throw A.wrapException(B.MessageException_4QF);
      t1 = type$.int;
      t2 = A.List_List$from(this._state, true, t1);
      t3 = this._pos;
      return new A.HashBytesState(A.List_List$from(t2, true, t1), t3);
    },
    restoreState$1(savedState) {
      var _this = this;
      type$.HashBytesState._as(savedState);
      B.JSArray_methods.setAll$2(_this._state, 0, savedState.data);
      _this._pos = savedState.pos;
      _this._finished = false;
      return _this;
    },
    cleanSavedState$1(savedState) {
      type$.HashBytesState._as(savedState);
      A.zero(savedState.data);
      savedState.pos = 0;
    },
    $isSerializableHash: 1,
    get$getDigestLength() {
      return this.getDigestLength;
    }
  };
  A.SHA3256.prototype = {};
  A.SHAKE.prototype = {
    stream$1(dst) {
      type$.List_int._as(dst);
      if (!this._finished)
        this._padAndPermute$1(31);
      this._squeeze$1(dst);
    },
    reset$0() {
      this.super$_Keccack$reset();
      return this;
    },
    update$1(data) {
      this.super$_Keccack$update(type$.List_int._as(data));
      return this;
    },
    restoreState$1(savedState) {
      var _this = this;
      savedState = type$.List_int._as(type$.HashBytesState._as(savedState));
      B.JSArray_methods.setAll$2(_this._state, 0, savedState.data);
      _this._pos = savedState.pos;
      _this._finished = false;
      return _this;
    },
    cleanSavedState$1(savedState) {
      A.zero(type$.List_int._as(savedState));
    },
    digest$1(outlen) {
      var out = A.List_List$filled(outlen, 0, false, type$.int);
      this.stream$1(type$.List_int._as(out));
      return out;
    },
    digest$0() {
      return this.digest$1(32);
    },
    finish$1(out) {
      var _this = this;
      type$.List_int._as(out);
      if (!_this._finished)
        _this._padAndPermute$1(31);
      _this._squeeze$1(out);
      return _this;
    },
    get$getBlockSize() {
      return this.bitSize / 8 | 0;
    },
    get$getDigestLength() {
      return A.throwExpression(A.UnimplementedError$(null));
    },
    saveState$0() {
      var t1, t2, t3;
      if (this._finished)
        throw A.wrapException(B.MessageException_4QF);
      t1 = type$.int;
      t2 = A.List_List$from(this._state, true, t1);
      t3 = this._pos;
      return new A.HashBytesState(A.List_List$from(t2, true, t1), t3);
    },
    $isSerializableHash: 1
  };
  A.SHAKE128.prototype = {};
  A.SHAKE256.prototype = {};
  A.HashBytesState.prototype = {$isHashState: 1};
  A.MD4.prototype = {
    get$getBlockSize() {
      return 64;
    },
    get$getDigestLength() {
      return 16;
    },
    clean$0() {
      var _this = this;
      A.zero(_this._state);
      A.zero(_this._currentChunk);
      B.JSArray_methods.clear$0(_this._hash$_buffer);
      _this.reset$0();
    },
    cleanSavedState$1(savedState) {
      var t1, t2;
      type$.SH1State._as(savedState);
      t1 = type$.int;
      t2 = J.JSArray_JSArray$fixed(0, t1);
      savedState.set$buffer(0, t2);
      savedState.set$state(A.List_List$from([1732584193, 4023233417, 2562383102, 271733878], false, t1));
      savedState.length = 0;
    },
    digest$0() {
      var out = A.List_List$filled(16, 0, false, type$.int);
      this.finish$1(out);
      return out;
    },
    finish$1(out) {
      var t1, i, _this = this;
      type$.List_int._as(out);
      if (!_this._finished) {
        _this._finalize$0();
        _this._iterate$0();
        _this._finished = true;
      }
      for (t1 = _this._state, i = 0; i < 4; ++i)
        A.writeUint32LE(t1[i], out, i * 4);
      return _this;
    },
    _finalize$0() {
      var contentsLength, t2, i, lengthInBits, offset, highBits,
        t1 = this._hash$_buffer;
      B.JSArray_methods.add$1(t1, 128);
      contentsLength = this._lengthInBytes + 1 + 8;
      for (t2 = ((contentsLength + 64 - 1 & -64) >>> 0) - contentsLength, i = 0; i < t2; ++i)
        B.JSArray_methods.add$1(t1, 0);
      lengthInBits = this._lengthInBytes * 8;
      offset = t1.length;
      B.JSArray_methods.addAll$1(t1, A.List_List$filled(8, 0, false, type$.int));
      highBits = B.JSInt_methods._tdivFast$1(lengthInBits, 4294967296);
      A.writeUint32LE(lengthInBits >>> 0, t1, offset);
      A.writeUint32LE(highBits, t1, offset + 4);
    },
    reset$0() {
      var _this = this,
        t1 = _this._state;
      B.JSArray_methods.$indexSet(t1, 0, 1732584193);
      B.JSArray_methods.$indexSet(t1, 1, 4023233417);
      B.JSArray_methods.$indexSet(t1, 2, 2562383102);
      B.JSArray_methods.$indexSet(t1, 3, 271733878);
      _this._finished = false;
      _this._lengthInBytes = 0;
      return _this;
    },
    restoreState$1(savedState) {
      var t1, _this = this;
      type$.SH1State._as(savedState);
      t1 = _this._hash$_buffer;
      B.JSArray_methods.clear$0(t1);
      B.JSArray_methods.addAll$1(t1, savedState.buffer);
      B.JSArray_methods.setAll$2(_this._state, 0, savedState.state);
      _this._lengthInBytes = savedState.length;
      _this._iterate$0();
      _this._finished = false;
      return _this;
    },
    saveState$0() {
      var t2,
        t1 = this._hash$_buffer;
      t1 = A._setArrayType(t1.slice(0), A._arrayInstanceType(t1));
      t2 = type$.int;
      return new A.SH1State(A.List_List$from(t1, true, t2), this._lengthInBytes, A.List_List$from(this._state, false, t2));
    },
    update$1(data) {
      var _this = this;
      type$.List_int._as(data);
      if (_this._finished)
        throw A.wrapException(B.MessageException_NiJ);
      _this._lengthInBytes = _this._lengthInBytes + J.get$length$asx(data);
      B.JSArray_methods.addAll$1(_this._hash$_buffer, A.BytesUtils_toBytes(data, false));
      _this._iterate$0();
      return _this;
    },
    _iterate$0() {
      var t2, t3, t4, i, t5, j, a, b, c, d, t6,
        t1 = this._hash$_buffer,
        pendingDataChunks = t1.length / 64 | 0;
      for (t2 = this._currentChunk, t3 = type$.List_int, t4 = this._state, i = 0; i < pendingDataChunks; ++i) {
        for (t5 = i * 64, j = 0; j < 16; ++j)
          B.JSArray_methods.$indexSet(t2, j, A.readUint32LE(t1, t5 + j * 4));
        t3._as(t2);
        a = t4[0];
        b = t4[1];
        c = t4[2];
        d = t4[3];
        t5 = t2[0];
        t6 = A.MD4__ff(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 0;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[1];
        t6 = A.MD4__ff(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 0;
        d = (t5 << 7 | t5 >>> 0 >>> 25) >>> 0;
        t5 = t2[2];
        t6 = A.MD4__ff(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 0;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[3];
        t6 = A.MD4__ff(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 0;
        b = (t5 << 19 | t5 >>> 0 >>> 13) >>> 0;
        t5 = t2[4];
        t6 = A.MD4__ff(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 0;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[5];
        t6 = A.MD4__ff(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 0;
        d = (t5 << 7 | t5 >>> 0 >>> 25) >>> 0;
        t5 = t2[6];
        t6 = A.MD4__ff(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 0;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[7];
        t6 = A.MD4__ff(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 0;
        b = (t5 << 19 | t5 >>> 0 >>> 13) >>> 0;
        t5 = t2[8];
        t6 = A.MD4__ff(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 0;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[9];
        t6 = A.MD4__ff(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 0;
        d = (t5 << 7 | t5 >>> 0 >>> 25) >>> 0;
        t5 = t2[10];
        t6 = A.MD4__ff(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 0;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[11];
        t6 = A.MD4__ff(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 0;
        b = (t5 << 19 | t5 >>> 0 >>> 13) >>> 0;
        t5 = t2[12];
        t6 = A.MD4__ff(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 0;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[13];
        t6 = A.MD4__ff(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 0;
        d = (t5 << 7 | t5 >>> 0 >>> 25) >>> 0;
        t5 = t2[14];
        t6 = A.MD4__ff(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 0;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[15];
        t6 = A.MD4__ff(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 0;
        b = (t5 << 19 | t5 >>> 0 >>> 13) >>> 0;
        t5 = t2[0];
        t6 = A.MD4__gg(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1518500249;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[4];
        t6 = A.MD4__gg(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1518500249;
        d = (t5 << 5 | t5 >>> 0 >>> 27) >>> 0;
        t5 = t2[8];
        t6 = A.MD4__gg(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1518500249;
        c = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[12];
        t6 = A.MD4__gg(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1518500249;
        b = (t5 << 13 | t5 >>> 0 >>> 19) >>> 0;
        t5 = t2[1];
        t6 = A.MD4__gg(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1518500249;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[5];
        t6 = A.MD4__gg(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1518500249;
        d = (t5 << 5 | t5 >>> 0 >>> 27) >>> 0;
        t5 = t2[9];
        t6 = A.MD4__gg(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1518500249;
        c = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[13];
        t6 = A.MD4__gg(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1518500249;
        b = (t5 << 13 | t5 >>> 0 >>> 19) >>> 0;
        t5 = t2[2];
        t6 = A.MD4__gg(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1518500249;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[6];
        t6 = A.MD4__gg(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1518500249;
        d = (t5 << 5 | t5 >>> 0 >>> 27) >>> 0;
        t5 = t2[10];
        t6 = A.MD4__gg(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1518500249;
        c = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[14];
        t6 = A.MD4__gg(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1518500249;
        b = (t5 << 13 | t5 >>> 0 >>> 19) >>> 0;
        t5 = t2[3];
        t6 = A.MD4__gg(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1518500249;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[7];
        t6 = A.MD4__gg(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1518500249;
        d = (t5 << 5 | t5 >>> 0 >>> 27) >>> 0;
        t5 = t2[11];
        t6 = A.MD4__gg(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1518500249;
        c = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[15];
        t6 = A.MD4__gg(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1518500249;
        b = (t5 << 13 | t5 >>> 0 >>> 19) >>> 0;
        t5 = t2[0];
        t6 = A.MD4__hh(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1859775393;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[8];
        t6 = A.MD4__hh(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1859775393;
        d = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[4];
        t6 = A.MD4__hh(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1859775393;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[12];
        t6 = A.MD4__hh(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1859775393;
        b = (t5 << 15 | t5 >>> 0 >>> 17) >>> 0;
        t5 = t2[2];
        t6 = A.MD4__hh(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1859775393;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[10];
        t6 = A.MD4__hh(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1859775393;
        d = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[6];
        t6 = A.MD4__hh(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1859775393;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[14];
        t6 = A.MD4__hh(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1859775393;
        b = (t5 << 15 | t5 >>> 0 >>> 17) >>> 0;
        t5 = t2[1];
        t6 = A.MD4__hh(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1859775393;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[9];
        t6 = A.MD4__hh(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1859775393;
        d = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[5];
        t6 = A.MD4__hh(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1859775393;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[13];
        t6 = A.MD4__hh(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1859775393;
        b = (t5 << 15 | t5 >>> 0 >>> 17) >>> 0;
        t5 = t2[3];
        t6 = A.MD4__hh(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1859775393;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[11];
        t6 = A.MD4__hh(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1859775393;
        d = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[7];
        t6 = A.MD4__hh(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1859775393;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[15];
        t6 = A.MD4__hh(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1859775393;
        B.JSArray_methods.$indexSet(t4, 0, t4[0] + a >>> 0);
        B.JSArray_methods.$indexSet(t4, 1, t4[1] + ((t5 << 15 | t5 >>> 0 >>> 17) >>> 0) >>> 0);
        B.JSArray_methods.$indexSet(t4, 2, t4[2] + c >>> 0);
        B.JSArray_methods.$indexSet(t4, 3, t4[3] + d >>> 0);
      }
      B.JSArray_methods.removeRange$2(t1, 0, pendingDataChunks * 64);
    },
    $isSerializableHash: 1
  };
  A.MD5.prototype = {
    clean$0() {
      var _this = this;
      A.zero(_this._state);
      A.zero(_this._currentChunk);
      B.JSArray_methods.clear$0(_this._hash$_buffer);
      _this.reset$0();
    },
    cleanSavedState$1(savedState) {
      var t1, t2;
      type$.SH1State._as(savedState);
      t1 = type$.int;
      t2 = J.JSArray_JSArray$fixed(0, t1);
      savedState.set$buffer(0, t2);
      savedState.set$state(A.List_List$unmodifiable([1732584193, 4023233417, 2562383102, 271733878], t1));
      savedState.length = 0;
    },
    digest$0() {
      var out = A.List_List$filled(16, 0, false, type$.int);
      this.finish$1(out);
      return out;
    },
    finish$1(out) {
      var t1, i, _this = this;
      type$.List_int._as(out);
      if (!_this._finished) {
        _this._finalize$0();
        _this._iterate$0();
        _this._finished = true;
      }
      for (t1 = _this._state, i = 0; i < 4; ++i)
        A.writeUint32LE(t1[i], out, i * 4);
      return _this;
    },
    _finalize$0() {
      var contentsLength, t2, i, lengthInBits, offset, highBits,
        t1 = this._hash$_buffer;
      B.JSArray_methods.add$1(t1, 128);
      contentsLength = this._lengthInBytes + 1 + 8;
      for (t2 = ((contentsLength + 64 - 1 & -64) >>> 0) - contentsLength, i = 0; i < t2; ++i)
        B.JSArray_methods.add$1(t1, 0);
      lengthInBits = this._lengthInBytes * 8;
      offset = t1.length;
      B.JSArray_methods.addAll$1(t1, A.List_List$filled(8, 0, false, type$.int));
      highBits = B.JSInt_methods._tdivFast$1(lengthInBits, 4294967296);
      A.writeUint32LE(lengthInBits >>> 0, t1, offset);
      A.writeUint32LE(highBits, t1, offset + 4);
    },
    get$getBlockSize() {
      return 64;
    },
    get$getDigestLength() {
      return 16;
    },
    reset$0() {
      var _this = this,
        t1 = _this._state;
      B.JSArray_methods.$indexSet(t1, 0, 1732584193);
      B.JSArray_methods.$indexSet(t1, 1, 4023233417);
      B.JSArray_methods.$indexSet(t1, 2, 2562383102);
      B.JSArray_methods.$indexSet(t1, 3, 271733878);
      _this._finished = false;
      _this._lengthInBytes = 0;
      return _this;
    },
    restoreState$1(savedState) {
      var t1, _this = this;
      type$.SH1State._as(savedState);
      t1 = _this._hash$_buffer;
      B.JSArray_methods.clear$0(t1);
      B.JSArray_methods.addAll$1(t1, savedState.buffer);
      B.JSArray_methods.setAll$2(_this._state, 0, savedState.state);
      _this._lengthInBytes = savedState.length;
      _this._iterate$0();
      _this._finished = false;
      return _this;
    },
    saveState$0() {
      var t2,
        t1 = this._hash$_buffer;
      t1 = A._setArrayType(t1.slice(0), A._arrayInstanceType(t1));
      t2 = type$.int;
      return new A.SH1State(A.List_List$from(t1, true, t2), this._lengthInBytes, A.List_List$unmodifiable(this._state, t2));
    },
    update$1(data) {
      var _this = this;
      type$.List_int._as(data);
      if (_this._finished)
        throw A.wrapException(B.MessageException_NiJ);
      _this._lengthInBytes = _this._lengthInBytes + J.get$length$asx(data);
      B.JSArray_methods.addAll$1(_this._hash$_buffer, A.BytesUtils_toBytes(data, false));
      _this._iterate$0();
      return _this;
    },
    _iterate$0() {
      var t2, t3, t4, i, t5, j, t6, b, c, d, t7, t8, a,
        t1 = this._hash$_buffer,
        pendingDataChunks = t1.length / 64 | 0;
      for (t2 = this._currentChunk, t3 = type$.List_int, t4 = this._state, i = 0; i < pendingDataChunks; ++i) {
        for (t5 = i * 64, j = 0; j < 16; ++j)
          B.JSArray_methods.$indexSet(t2, j, A.readUint32LE(t1, t5 + j * 4));
        t3._as(t2);
        t5 = t4[0];
        if (typeof t5 !== "number")
          return t5.$or();
        t6 = t4[1];
        if (typeof t6 !== "number")
          return t6.$or();
        b = (t6 | 0) >>> 0;
        t6 = t4[2];
        if (typeof t6 !== "number")
          return t6.$or();
        c = (t6 | 0) >>> 0;
        t6 = t4[3];
        if (typeof t6 !== "number")
          return t6.$or();
        d = (t6 | 0) >>> 0;
        t6 = $.$get$MD5__t();
        if (0 >= t6.length)
          return A.ioore(t6, 0);
        t7 = t6[0];
        t8 = t2[0];
        t7 = ((((t5 | 0) >>> 0) + A.MD5__ff(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 7 | t7 >>> 25) >>> 0) + b >>> 0;
        if (1 >= t6.length)
          return A.ioore(t6, 1);
        t7 = t6[1];
        t8 = t2[1];
        t7 = ((d + A.MD5__ff(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 12 | t7 >>> 20) >>> 0) + a >>> 0;
        if (2 >= t6.length)
          return A.ioore(t6, 2);
        t7 = t6[2];
        t8 = t2[2];
        t7 = ((c + A.MD5__ff(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 17 | t7 >>> 15) >>> 0) + d >>> 0;
        if (3 >= t6.length)
          return A.ioore(t6, 3);
        t7 = t6[3];
        t8 = t2[3];
        t7 = ((b + A.MD5__ff(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 22 | t7 >>> 10) >>> 0) + c >>> 0;
        if (4 >= t6.length)
          return A.ioore(t6, 4);
        t7 = t6[4];
        t8 = t2[4];
        t7 = ((a + A.MD5__ff(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 7 | t7 >>> 25) >>> 0) + b >>> 0;
        if (5 >= t6.length)
          return A.ioore(t6, 5);
        t7 = t6[5];
        t8 = t2[5];
        t7 = ((d + A.MD5__ff(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 12 | t7 >>> 20) >>> 0) + a >>> 0;
        if (6 >= t6.length)
          return A.ioore(t6, 6);
        t7 = t6[6];
        t8 = t2[6];
        t7 = ((c + A.MD5__ff(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 17 | t7 >>> 15) >>> 0) + d >>> 0;
        if (7 >= t6.length)
          return A.ioore(t6, 7);
        t7 = t6[7];
        t8 = t2[7];
        t7 = ((b + A.MD5__ff(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 22 | t7 >>> 10) >>> 0) + c >>> 0;
        if (8 >= t6.length)
          return A.ioore(t6, 8);
        t7 = t6[8];
        t8 = t2[8];
        t7 = ((a + A.MD5__ff(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 7 | t7 >>> 25) >>> 0) + b >>> 0;
        if (9 >= t6.length)
          return A.ioore(t6, 9);
        t7 = t6[9];
        t8 = t2[9];
        t7 = ((d + A.MD5__ff(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 12 | t7 >>> 20) >>> 0) + a >>> 0;
        if (10 >= t6.length)
          return A.ioore(t6, 10);
        t7 = t6[10];
        t8 = t2[10];
        t7 = ((c + A.MD5__ff(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 17 | t7 >>> 15) >>> 0) + d >>> 0;
        if (11 >= t6.length)
          return A.ioore(t6, 11);
        t7 = t6[11];
        t8 = t2[11];
        t7 = ((b + A.MD5__ff(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 22 | t7 >>> 10) >>> 0) + c >>> 0;
        if (12 >= t6.length)
          return A.ioore(t6, 12);
        t7 = t6[12];
        t8 = t2[12];
        t7 = ((a + A.MD5__ff(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 7 | t7 >>> 25) >>> 0) + b >>> 0;
        if (13 >= t6.length)
          return A.ioore(t6, 13);
        t7 = t6[13];
        t8 = t2[13];
        t7 = ((d + A.MD5__ff(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 12 | t7 >>> 20) >>> 0) + a >>> 0;
        if (14 >= t6.length)
          return A.ioore(t6, 14);
        t7 = t6[14];
        t8 = t2[14];
        t7 = ((c + A.MD5__ff(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 17 | t7 >>> 15) >>> 0) + d >>> 0;
        if (15 >= t6.length)
          return A.ioore(t6, 15);
        t7 = t6[15];
        t8 = t2[15];
        t7 = ((b + A.MD5__ff(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 22 | t7 >>> 10) >>> 0) + c >>> 0;
        if (16 >= t6.length)
          return A.ioore(t6, 16);
        t7 = t6[16];
        t8 = t2[1];
        t7 = ((a + A.MD5__gg(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 5 | t7 >>> 27) >>> 0) + b >>> 0;
        if (17 >= t6.length)
          return A.ioore(t6, 17);
        t7 = t6[17];
        t8 = t2[6];
        t7 = ((d + A.MD5__gg(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 9 | t7 >>> 23) >>> 0) + a >>> 0;
        if (18 >= t6.length)
          return A.ioore(t6, 18);
        t7 = t6[18];
        t8 = t2[11];
        t7 = ((c + A.MD5__gg(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 14 | t7 >>> 18) >>> 0) + d >>> 0;
        if (19 >= t6.length)
          return A.ioore(t6, 19);
        t7 = t6[19];
        t8 = t2[0];
        t7 = ((b + A.MD5__gg(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 20 | t7 >>> 12) >>> 0) + c >>> 0;
        if (20 >= t6.length)
          return A.ioore(t6, 20);
        t7 = t6[20];
        t8 = t2[5];
        t7 = ((a + A.MD5__gg(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 5 | t7 >>> 27) >>> 0) + b >>> 0;
        if (21 >= t6.length)
          return A.ioore(t6, 21);
        t7 = t6[21];
        t8 = t2[10];
        t7 = ((d + A.MD5__gg(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 9 | t7 >>> 23) >>> 0) + a >>> 0;
        if (22 >= t6.length)
          return A.ioore(t6, 22);
        t7 = t6[22];
        t8 = t2[15];
        t7 = ((c + A.MD5__gg(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 14 | t7 >>> 18) >>> 0) + d >>> 0;
        if (23 >= t6.length)
          return A.ioore(t6, 23);
        t7 = t6[23];
        t8 = t2[4];
        t7 = ((b + A.MD5__gg(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 20 | t7 >>> 12) >>> 0) + c >>> 0;
        if (24 >= t6.length)
          return A.ioore(t6, 24);
        t7 = t6[24];
        t8 = t2[9];
        t7 = ((a + A.MD5__gg(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 5 | t7 >>> 27) >>> 0) + b >>> 0;
        if (25 >= t6.length)
          return A.ioore(t6, 25);
        t7 = t6[25];
        t8 = t2[14];
        t7 = ((d + A.MD5__gg(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 9 | t7 >>> 23) >>> 0) + a >>> 0;
        if (26 >= t6.length)
          return A.ioore(t6, 26);
        t7 = t6[26];
        t8 = t2[3];
        t7 = ((c + A.MD5__gg(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 14 | t7 >>> 18) >>> 0) + d >>> 0;
        if (27 >= t6.length)
          return A.ioore(t6, 27);
        t7 = t6[27];
        t8 = t2[8];
        t7 = ((b + A.MD5__gg(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 20 | t7 >>> 12) >>> 0) + c >>> 0;
        if (28 >= t6.length)
          return A.ioore(t6, 28);
        t7 = t6[28];
        t8 = t2[13];
        t7 = ((a + A.MD5__gg(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 5 | t7 >>> 27) >>> 0) + b >>> 0;
        if (29 >= t6.length)
          return A.ioore(t6, 29);
        t7 = t6[29];
        t8 = t2[2];
        t7 = ((d + A.MD5__gg(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 9 | t7 >>> 23) >>> 0) + a >>> 0;
        if (30 >= t6.length)
          return A.ioore(t6, 30);
        t7 = t6[30];
        t8 = t2[7];
        t7 = ((c + A.MD5__gg(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 14 | t7 >>> 18) >>> 0) + d >>> 0;
        if (31 >= t6.length)
          return A.ioore(t6, 31);
        t7 = t6[31];
        t8 = t2[12];
        t7 = ((b + A.MD5__gg(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 20 | t7 >>> 12) >>> 0) + c >>> 0;
        if (32 >= t6.length)
          return A.ioore(t6, 32);
        t7 = t6[32];
        t8 = t2[5];
        t7 = ((a + A.MD5__hh(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 4 | t7 >>> 28) >>> 0) + b >>> 0;
        if (33 >= t6.length)
          return A.ioore(t6, 33);
        t7 = t6[33];
        t8 = t2[8];
        t7 = ((d + A.MD5__hh(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 11 | t7 >>> 21) >>> 0) + a >>> 0;
        if (34 >= t6.length)
          return A.ioore(t6, 34);
        t7 = t6[34];
        t8 = t2[11];
        t7 = ((c + A.MD5__hh(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 16 | t7 >>> 16) >>> 0) + d >>> 0;
        if (35 >= t6.length)
          return A.ioore(t6, 35);
        t7 = t6[35];
        t8 = t2[14];
        t7 = ((b + A.MD5__hh(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 23 | t7 >>> 9) >>> 0) + c >>> 0;
        if (36 >= t6.length)
          return A.ioore(t6, 36);
        t7 = t6[36];
        t8 = t2[1];
        t7 = ((a + A.MD5__hh(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 4 | t7 >>> 28) >>> 0) + b >>> 0;
        if (37 >= t6.length)
          return A.ioore(t6, 37);
        t7 = t6[37];
        t8 = t2[4];
        t7 = ((d + A.MD5__hh(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 11 | t7 >>> 21) >>> 0) + a >>> 0;
        if (38 >= t6.length)
          return A.ioore(t6, 38);
        t7 = t6[38];
        t8 = t2[7];
        t7 = ((c + A.MD5__hh(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 16 | t7 >>> 16) >>> 0) + d >>> 0;
        if (39 >= t6.length)
          return A.ioore(t6, 39);
        t7 = t6[39];
        t8 = t2[10];
        t7 = ((b + A.MD5__hh(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 23 | t7 >>> 9) >>> 0) + c >>> 0;
        if (40 >= t6.length)
          return A.ioore(t6, 40);
        t7 = t6[40];
        t8 = t2[13];
        t7 = ((a + A.MD5__hh(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 4 | t7 >>> 28) >>> 0) + b >>> 0;
        if (41 >= t6.length)
          return A.ioore(t6, 41);
        t7 = t6[41];
        t8 = t2[0];
        t7 = ((d + A.MD5__hh(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 11 | t7 >>> 21) >>> 0) + a >>> 0;
        if (42 >= t6.length)
          return A.ioore(t6, 42);
        t7 = t6[42];
        t8 = t2[3];
        t7 = ((c + A.MD5__hh(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 16 | t7 >>> 16) >>> 0) + d >>> 0;
        if (43 >= t6.length)
          return A.ioore(t6, 43);
        t7 = t6[43];
        t8 = t2[6];
        t7 = ((b + A.MD5__hh(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 23 | t7 >>> 9) >>> 0) + c >>> 0;
        if (44 >= t6.length)
          return A.ioore(t6, 44);
        t7 = t6[44];
        t8 = t2[9];
        t7 = ((a + A.MD5__hh(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 4 | t7 >>> 28) >>> 0) + b >>> 0;
        if (45 >= t6.length)
          return A.ioore(t6, 45);
        t7 = t6[45];
        t8 = t2[12];
        t7 = ((d + A.MD5__hh(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 11 | t7 >>> 21) >>> 0) + a >>> 0;
        if (46 >= t6.length)
          return A.ioore(t6, 46);
        t7 = t6[46];
        t8 = t2[15];
        t7 = ((c + A.MD5__hh(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 16 | t7 >>> 16) >>> 0) + d >>> 0;
        if (47 >= t6.length)
          return A.ioore(t6, 47);
        t7 = t6[47];
        t8 = t2[2];
        t7 = ((b + A.MD5__hh(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 23 | t7 >>> 9) >>> 0) + c >>> 0;
        if (48 >= t6.length)
          return A.ioore(t6, 48);
        t7 = t6[48];
        t8 = t2[0];
        t7 = ((a + A.MD5__ii(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 6 | t7 >>> 26) >>> 0) + b >>> 0;
        if (49 >= t6.length)
          return A.ioore(t6, 49);
        t7 = t6[49];
        t8 = t2[7];
        t7 = ((d + A.MD5__ii(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 10 | t7 >>> 22) >>> 0) + a >>> 0;
        if (50 >= t6.length)
          return A.ioore(t6, 50);
        t7 = t6[50];
        t8 = t2[14];
        t7 = ((c + A.MD5__ii(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 15 | t7 >>> 17) >>> 0) + d >>> 0;
        if (51 >= t6.length)
          return A.ioore(t6, 51);
        t7 = t6[51];
        t8 = t2[5];
        t7 = ((b + A.MD5__ii(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 21 | t7 >>> 11) >>> 0) + c >>> 0;
        if (52 >= t6.length)
          return A.ioore(t6, 52);
        t7 = t6[52];
        t8 = t2[12];
        t7 = ((a + A.MD5__ii(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 6 | t7 >>> 26) >>> 0) + b >>> 0;
        if (53 >= t6.length)
          return A.ioore(t6, 53);
        t7 = t6[53];
        t8 = t2[3];
        t7 = ((d + A.MD5__ii(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 10 | t7 >>> 22) >>> 0) + a >>> 0;
        if (54 >= t6.length)
          return A.ioore(t6, 54);
        t7 = t6[54];
        t8 = t2[10];
        t7 = ((c + A.MD5__ii(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 15 | t7 >>> 17) >>> 0) + d >>> 0;
        if (55 >= t6.length)
          return A.ioore(t6, 55);
        t7 = t6[55];
        t8 = t2[1];
        t7 = ((b + A.MD5__ii(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 21 | t7 >>> 11) >>> 0) + c >>> 0;
        if (56 >= t6.length)
          return A.ioore(t6, 56);
        t7 = t6[56];
        t8 = t2[8];
        t7 = ((a + A.MD5__ii(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 6 | t7 >>> 26) >>> 0) + b >>> 0;
        if (57 >= t6.length)
          return A.ioore(t6, 57);
        t7 = t6[57];
        t8 = t2[15];
        t7 = ((d + A.MD5__ii(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 10 | t7 >>> 22) >>> 0) + a >>> 0;
        if (58 >= t6.length)
          return A.ioore(t6, 58);
        t7 = t6[58];
        t8 = t2[6];
        t7 = ((c + A.MD5__ii(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 15 | t7 >>> 17) >>> 0) + d >>> 0;
        if (59 >= t6.length)
          return A.ioore(t6, 59);
        t7 = t6[59];
        t8 = t2[13];
        t7 = ((b + A.MD5__ii(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 21 | t7 >>> 11) >>> 0) + c >>> 0;
        if (60 >= t6.length)
          return A.ioore(t6, 60);
        t7 = t6[60];
        t8 = t2[4];
        t7 = ((a + A.MD5__ii(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 6 | t7 >>> 26) >>> 0) + b >>> 0;
        if (61 >= t6.length)
          return A.ioore(t6, 61);
        t7 = t6[61];
        t8 = t2[11];
        t7 = ((d + A.MD5__ii(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 10 | t7 >>> 22) >>> 0) + a >>> 0;
        if (62 >= t6.length)
          return A.ioore(t6, 62);
        t7 = t6[62];
        t8 = t2[2];
        t7 = ((c + A.MD5__ii(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 15 | t7 >>> 17) >>> 0) + d >>> 0;
        if (63 >= t6.length)
          return A.ioore(t6, 63);
        t6 = t6[63];
        t7 = t2[9];
        t6 = ((b + A.MD5__ii(c, d, a) >>> 0) + t7 >>> 0) + t6 >>> 0;
        B.JSArray_methods.$indexSet(t4, 0, t4[0] + a >>> 0);
        B.JSArray_methods.$indexSet(t4, 1, t4[1] + (((t6 << 21 | t6 >>> 11) >>> 0) + c >>> 0) >>> 0);
        B.JSArray_methods.$indexSet(t4, 2, t4[2] + c >>> 0);
        B.JSArray_methods.$indexSet(t4, 3, t4[3] + d >>> 0);
      }
      B.JSArray_methods.removeRange$2(t1, 0, pendingDataChunks * 64);
    },
    $isSerializableHash: 1
  };
  A.RIPEMD160.prototype = {};
  A._RIPEMD.prototype = {
    clean$0() {
      var _this = this,
        t1 = _this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      A.zero(t1);
      A.zero(_this._currentChunk);
      B.JSArray_methods.clear$0(_this._hash$_buffer);
      _this.reset$0();
    },
    cleanSavedState$1(savedState) {
      var t1;
      type$.SH1State._as(savedState);
      t1 = J.JSArray_JSArray$fixed(0, type$.int);
      savedState.set$buffer(0, t1);
      t1 = this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      savedState.set$state(A._RidempUtils_readState(t1.length * 4));
      savedState.length = 0;
    },
    digest$0() {
      var out,
        t1 = this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      out = A.List_List$filled(t1.length * 4, 0, false, type$.int);
      this.finish$1(out);
      return out;
    },
    finish$1(out) {
      var i, t1, _this = this;
      type$.List_int._as(out);
      if (!_this._finished) {
        _this._finalize$0();
        _this._iterate$0();
        _this._finished = true;
      }
      i = 0;
      while (true) {
        t1 = _this.___RIPEMD__state_F;
        t1 === $ && A.throwLateFieldNI("_state");
        if (!(i < t1.length))
          break;
        A.writeUint32LE(t1[i], out, i * 4);
        ++i;
      }
      return _this;
    },
    _finalize$0() {
      var contentsLength, t2, i, lengthInBits, offset, highBits,
        t1 = this._hash$_buffer;
      B.JSArray_methods.add$1(t1, 128);
      contentsLength = this._lengthInBytes + 1 + 8;
      for (t2 = ((contentsLength + 64 - 1 & -64) >>> 0) - contentsLength, i = 0; i < t2; ++i)
        B.JSArray_methods.add$1(t1, 0);
      lengthInBits = this._lengthInBytes * 8;
      offset = t1.length;
      B.JSArray_methods.addAll$1(t1, A.List_List$filled(8, 0, false, type$.int));
      highBits = B.JSInt_methods._tdivFast$1(lengthInBits, 4294967296);
      A.writeUint32LE(lengthInBits >>> 0, t1, offset);
      A.writeUint32LE(highBits, t1, offset + 4);
    },
    get$getBlockSize() {
      return 64;
    },
    get$getDigestLength() {
      var t1 = this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      return t1.length * 4;
    },
    reset$0() {
      var _this = this,
        t1 = _this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      B.JSArray_methods.setAll$2(t1, 0, A._RidempUtils_readState(t1.length * 4));
      _this._finished = false;
      _this._lengthInBytes = 0;
      return _this;
    },
    restoreState$1(savedState) {
      var t1, _this = this;
      type$.SH1State._as(savedState);
      t1 = _this._hash$_buffer;
      B.JSArray_methods.clear$0(t1);
      B.JSArray_methods.addAll$1(t1, savedState.buffer);
      t1 = _this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      B.JSArray_methods.setAll$2(t1, 0, savedState.state);
      _this._lengthInBytes = savedState.length;
      _this._iterate$0();
      _this._finished = false;
      return _this;
    },
    saveState$0() {
      var t2, t3, t4,
        t1 = this._hash$_buffer;
      t1 = A._setArrayType(t1.slice(0), A._arrayInstanceType(t1));
      t2 = type$.int;
      t1 = A.List_List$from(t1, true, t2);
      t3 = this._lengthInBytes;
      t4 = this.___RIPEMD__state_F;
      t4 === $ && A.throwLateFieldNI("_state");
      return new A.SH1State(t1, t3, A.List_List$from(t4, false, t2));
    },
    update$1(data) {
      var _this = this;
      type$.List_int._as(data);
      if (_this._finished)
        throw A.wrapException(B.MessageException_NiJ);
      _this._lengthInBytes = _this._lengthInBytes + J.get$length$asx(data);
      B.JSArray_methods.addAll$1(_this._hash$_buffer, A.BytesUtils_toBytes(data, false));
      _this._iterate$0();
      return _this;
    },
    _iterate$0() {
      var t2, i, t3, j,
        t1 = this._hash$_buffer,
        pendingDataChunks = t1.length / 64 | 0;
      for (t2 = this._currentChunk, i = 0; i < pendingDataChunks; ++i) {
        for (t3 = i * 64, j = 0; j < 16; ++j)
          B.JSArray_methods.$indexSet(t2, j, A.readUint32LE(t1, t3 + j * 4));
        this._proccess$1(t2);
      }
      B.JSArray_methods.removeRange$2(t1, 0, pendingDataChunks * 64);
    },
    _proccess$1(chunk) {
      var t1, _this = this;
      type$.List_int._as(chunk);
      t1 = _this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      switch (t1.length * 4) {
        case 16:
          return _this._proccess128$1(chunk);
        case 20:
          return _this._proccess160$1(chunk);
        case 32:
          return _this._proccess256$1(chunk);
        default:
          return _this._proccess320$1(chunk);
      }
    },
    _proccess128$1(chunk) {
      var t1, t2, al, bl, cl, dl, dr, cr, br, ar, cl0, bl0, i, t, modShift;
      type$.List_int._as(chunk);
      t1 = this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      al = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      bl = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      cl = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      dl = t1[3];
      for (dr = dl, cr = cl, br = bl, ar = al, cl0 = cr, bl0 = br, i = 0; i < 64; ++i, ar = dr, dr = cr, cr = br, br = t2, al = dl, dl = cl0, cl0 = bl0, bl0 = t) {
        t2 = B.List_Vul[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t = (al + chunk[t2] >>> 0) + A._RidempUtils_T(i, bl0, cl0, dl) >>> 0;
        modShift = B.List_Vul0[i] & 31;
        t = (t << modShift | B.JSInt_methods._shrReceiverPositive$1(t, 32 - modShift)) >>> 0;
        t2 = B.List_Vul1[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t2 = (ar + chunk[t2] >>> 0) + A._RidempUtils_t64(i, br, cr, dr) >>> 0;
        modShift = B.List_Vul2[i] & 31;
        t2 = (t2 << modShift | B.JSInt_methods._shrReceiverPositive$1(t2, 32 - modShift)) >>> 0;
      }
      B.JSArray_methods.$indexSet(t1, 1, (cl + dl >>> 0) + ar >>> 0);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      B.JSArray_methods.$indexSet(t1, 2, (t1[3] + al >>> 0) + br >>> 0);
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      B.JSArray_methods.$indexSet(t1, 3, (t1[0] + bl0 >>> 0) + cr >>> 0);
      B.JSArray_methods.$indexSet(t1, 0, (bl + cl0 >>> 0) + dr >>> 0);
    },
    _proccess320$1(chunk) {
      var t1, t2, al, bl, cl, dl, el, ar, br, cr, dr, er, al0, i, t, modShift, dl0, dr0;
      type$.List_int._as(chunk);
      t1 = this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      al = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      bl = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      cl = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      dl = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      el = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      ar = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      br = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      cr = t1[7];
      if (8 >= t2)
        return A.ioore(t1, 8);
      dr = t1[8];
      if (9 >= t2)
        return A.ioore(t1, 9);
      er = t1[9];
      for (al0 = al, i = 0; i < 80; ++i) {
        t2 = B.List_Vul[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t = (al0 + chunk[t2] >>> 0) + A._RidempUtils_T(i, bl, cl, dl) >>> 0;
        modShift = B.List_Vul0[i] & 31;
        t = ((t << modShift | B.JSInt_methods._shrReceiverPositive$1(t, 32 - modShift)) >>> 0) + el >>> 0;
        dl0 = (cl << 10 | cl >>> 0 >>> 22) >>> 0;
        t2 = B.List_Vul1[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t2 = (ar + chunk[t2] >>> 0) + A._RidempUtils_t80(i, br, cr, dr) >>> 0;
        modShift = B.List_Vul2[i] & 31;
        t2 = ((t2 << modShift | B.JSInt_methods._shrReceiverPositive$1(t2, 32 - modShift)) >>> 0) + er >>> 0;
        dr0 = (cr << 10 | cr >>> 0 >>> 22) >>> 0;
        switch (i) {
          case 15:
            cr = br;
            br = t;
            ar = er;
            er = dr;
            dr = dr0;
            cl = bl;
            bl = t2;
            al0 = el;
            el = dl;
            dl = dl0;
            break;
          case 31:
            cr = br;
            br = t2;
            ar = er;
            er = dr;
            dr = dl0;
            cl = bl;
            bl = t;
            al0 = el;
            el = dl;
            dl = dr0;
            break;
          case 47:
            cr = br;
            br = t2;
            ar = el;
            el = dl;
            dl = dl0;
            cl = bl;
            bl = t;
            al0 = er;
            er = dr;
            dr = dr0;
            break;
          case 63:
            cr = bl;
            bl = t;
            ar = er;
            er = dr;
            dr = dr0;
            cl = br;
            br = t2;
            al0 = el;
            el = dl;
            dl = dl0;
            break;
          case 79:
            cr = br;
            br = t2;
            ar = er;
            er = dl;
            dl = dl0;
            cl = bl;
            bl = t;
            al0 = el;
            el = dr;
            dr = dr0;
            break;
          default:
            cr = br;
            br = t2;
            ar = er;
            er = dr;
            dr = dr0;
            cl = bl;
            bl = t;
            al0 = el;
            el = dl;
            dl = dl0;
        }
      }
      B.JSArray_methods.$indexSet(t1, 0, al + al0 >>> 0);
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      B.JSArray_methods.$indexSet(t1, 1, t1[1] + bl >>> 0);
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      B.JSArray_methods.$indexSet(t1, 2, t1[2] + cl >>> 0);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      B.JSArray_methods.$indexSet(t1, 3, t1[3] + dl >>> 0);
      if (4 >= t1.length)
        return A.ioore(t1, 4);
      B.JSArray_methods.$indexSet(t1, 4, t1[4] + el >>> 0);
      if (5 >= t1.length)
        return A.ioore(t1, 5);
      B.JSArray_methods.$indexSet(t1, 5, t1[5] + ar >>> 0);
      if (6 >= t1.length)
        return A.ioore(t1, 6);
      B.JSArray_methods.$indexSet(t1, 6, t1[6] + br >>> 0);
      if (7 >= t1.length)
        return A.ioore(t1, 7);
      B.JSArray_methods.$indexSet(t1, 7, t1[7] + cr >>> 0);
      if (8 >= t1.length)
        return A.ioore(t1, 8);
      B.JSArray_methods.$indexSet(t1, 8, t1[8] + dr >>> 0);
      if (9 >= t1.length)
        return A.ioore(t1, 9);
      B.JSArray_methods.$indexSet(t1, 9, t1[9] + er >>> 0);
    },
    _proccess256$1(chunk) {
      var t1, t2, al, bl, cl, dl, ar, br, cr, dr, al0, i, t, modShift;
      type$.List_int._as(chunk);
      t1 = this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      al = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      bl = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      cl = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      dl = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      ar = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      br = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      cr = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      dr = t1[7];
      for (al0 = al, i = 0; i < 64; ++i) {
        t2 = B.List_Vul[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t = (al0 + chunk[t2] >>> 0) + A._RidempUtils_T(i, bl, cl, dl) >>> 0;
        modShift = B.List_Vul0[i] & 31;
        t = (t << modShift | B.JSInt_methods._shrReceiverPositive$1(t, 32 - modShift)) >>> 0;
        t2 = B.List_Vul1[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t2 = (ar + chunk[t2] >>> 0) + A._RidempUtils_t64(i, br, cr, dr) >>> 0;
        modShift = B.List_Vul2[i] & 31;
        t2 = (t2 << modShift | B.JSInt_methods._shrReceiverPositive$1(t2, 32 - modShift)) >>> 0;
        switch (i) {
          case 15:
            ar = dl;
            dl = cl;
            cl = bl;
            bl = t;
            al0 = dr;
            dr = cr;
            cr = br;
            br = t2;
            break;
          case 31:
            ar = dr;
            dr = cr;
            cr = br;
            br = t;
            al0 = dl;
            dl = cl;
            cl = bl;
            bl = t2;
            break;
          case 47:
            ar = dr;
            dr = cr;
            cr = bl;
            bl = t;
            al0 = dl;
            dl = cl;
            cl = br;
            br = t2;
            break;
          case 63:
            ar = dr;
            dr = cl;
            cl = bl;
            bl = t;
            al0 = dl;
            dl = cr;
            cr = br;
            br = t2;
            break;
          default:
            ar = dr;
            dr = cr;
            cr = br;
            br = t2;
            al0 = dl;
            dl = cl;
            cl = bl;
            bl = t;
        }
      }
      B.JSArray_methods.$indexSet(t1, 0, al + al0 >>> 0);
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      B.JSArray_methods.$indexSet(t1, 1, t1[1] + bl >>> 0);
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      B.JSArray_methods.$indexSet(t1, 2, t1[2] + cl >>> 0);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      B.JSArray_methods.$indexSet(t1, 3, t1[3] + dl >>> 0);
      if (4 >= t1.length)
        return A.ioore(t1, 4);
      B.JSArray_methods.$indexSet(t1, 4, t1[4] + ar >>> 0);
      if (5 >= t1.length)
        return A.ioore(t1, 5);
      B.JSArray_methods.$indexSet(t1, 5, t1[5] + br >>> 0);
      if (6 >= t1.length)
        return A.ioore(t1, 6);
      B.JSArray_methods.$indexSet(t1, 6, t1[6] + cr >>> 0);
      if (7 >= t1.length)
        return A.ioore(t1, 7);
      B.JSArray_methods.$indexSet(t1, 7, t1[7] + dr >>> 0);
    },
    _proccess160$1(chunk) {
      var t1, t2, al, bl, cl, dl, el, er, dr, cr, br, ar, cl0, bl0, i, t, modShift, dl0, dr0;
      type$.List_int._as(chunk);
      t1 = this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      al = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      bl = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      cl = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      dl = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      el = t1[4];
      for (er = el, dr = dl, cr = cl, br = bl, ar = al, cl0 = cr, bl0 = br, i = 0; i < 80; ++i, cr = br, br = t2, ar = er, er = dr, dr = dr0, cl0 = bl0, bl0 = t, al = el, el = dl, dl = dl0) {
        t2 = B.List_Vul[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t = (al + chunk[t2] >>> 0) + A._RidempUtils_T(i, bl0, cl0, dl) >>> 0;
        modShift = B.List_Vul0[i] & 31;
        t = ((t << modShift | B.JSInt_methods._shrReceiverPositive$1(t, 32 - modShift)) >>> 0) + el >>> 0;
        dl0 = (cl0 << 10 | cl0 >>> 0 >>> 22) >>> 0;
        t2 = B.List_Vul1[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t2 = (ar + chunk[t2] >>> 0) + A._RidempUtils_t80(i, br, cr, dr);
        modShift = B.List_Vul2[i] & 31;
        t2 = ((t2 << modShift | B.JSInt_methods._shrReceiverPositive$1(t2 >>> 0, 32 - modShift)) >>> 0) + er >>> 0;
        dr0 = (cr << 10 | cr >>> 0 >>> 22) >>> 0;
      }
      B.JSArray_methods.$indexSet(t1, 1, (cl + dl >>> 0) + er >>> 0);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      B.JSArray_methods.$indexSet(t1, 2, (t1[3] + el >>> 0) + ar >>> 0);
      if (4 >= t1.length)
        return A.ioore(t1, 4);
      B.JSArray_methods.$indexSet(t1, 3, (t1[4] + al >>> 0) + br >>> 0);
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      B.JSArray_methods.$indexSet(t1, 4, (t1[0] + bl0 >>> 0) + cr >>> 0);
      B.JSArray_methods.$indexSet(t1, 0, (bl + cl0 >>> 0) + dr >>> 0);
    },
    set$___RIPEMD__state_F(___RIPEMD__state_F) {
      this.___RIPEMD__state_F = type$.List_int._as(___RIPEMD__state_F);
    },
    $isSerializableHash: 1
  };
  A.SH1State.prototype = {
    set$buffer(_, buffer) {
      this.buffer = type$.List_int._as(buffer);
    },
    set$state(state) {
      this.state = type$.List_int._as(state);
    },
    $isHashState: 1,
    get$length(receiver) {
      return this.length;
    }
  };
  A.SHA256.prototype = {
    get$getDigestLength() {
      return 32;
    },
    get$getBlockSize() {
      return 64;
    },
    update$1(data) {
      var t1, dataLength, dataPos, t2, t3, dataPos0, t4, _this = this;
      type$.List_int._as(data);
      if (_this._finished)
        throw A.wrapException(B.MessageException_QW6);
      t1 = J.getInterceptor$asx(data);
      dataLength = t1.get$length(data);
      _this._bytesHashed += dataLength;
      dataPos = 0;
      if (_this._bufferLength > 0) {
        t2 = _this._hash$_buffer;
        while (true) {
          t3 = _this._bufferLength;
          if (!(t3 < 64 && dataLength > 0))
            break;
          _this._bufferLength = t3 + 1;
          dataPos0 = dataPos + 1;
          t4 = t1.$index(data, dataPos);
          if (typeof t4 !== "number")
            return t4.$and();
          B.JSArray_methods.$indexSet(t2, t3, t4 & 255);
          --dataLength;
          dataPos = dataPos0;
        }
        if (t3 === 64) {
          _this._hashBlocks$5(_this._temp, _this._state, t2, 0, 64);
          _this._bufferLength = 0;
        }
      }
      if (dataLength >= 64) {
        dataPos = _this._hashBlocks$5(_this._temp, _this._state, data, dataPos, dataLength);
        dataLength = B.JSInt_methods.$mod(dataLength, 64);
      }
      for (t2 = _this._hash$_buffer; dataLength > 0; dataPos = dataPos0) {
        t3 = _this._bufferLength++;
        dataPos0 = dataPos + 1;
        t4 = t1.$index(data, dataPos);
        if (typeof t4 !== "number")
          return t4.$and();
        B.JSArray_methods.$indexSet(t2, t3, t4 & 255);
        --dataLength;
      }
      return _this;
    },
    finish$1(out) {
      var bytesHashed, left, t1, padLength, t2, i, t3, _this = this;
      type$.List_int._as(out);
      if (!_this._finished) {
        bytesHashed = _this._bytesHashed;
        left = _this._bufferLength;
        t1 = B.JSInt_methods._tdivFast$1(bytesHashed, 536870912);
        padLength = B.JSInt_methods.$mod(bytesHashed, 64) < 56 ? 64 : 128;
        t2 = _this._hash$_buffer;
        B.JSArray_methods.$indexSet(t2, left, 128);
        for (i = left + 1, t3 = padLength - 8; i < t3; ++i)
          B.JSArray_methods.$indexSet(t2, i, 0);
        A.writeUint32BE(t1 >>> 0, t2, t3);
        A.writeUint32BE(bytesHashed << 3 >>> 0, t2, padLength - 4);
        _this._hashBlocks$5(_this._temp, _this._state, t2, 0, padLength);
        _this._finished = true;
      }
      for (t1 = _this._state, i = 0; i < 8; ++i)
        A.writeUint32BE(t1[i], out, i * 4);
      return _this;
    },
    digest$0() {
      var out = A.List_List$filled(32, 0, false, type$.int);
      this.finish$1(out);
      return out;
    },
    reset$0() {
      var _this = this,
        t1 = _this._state;
      B.JSArray_methods.$indexSet(t1, 0, 1779033703);
      B.JSArray_methods.$indexSet(t1, 1, 3144134277);
      B.JSArray_methods.$indexSet(t1, 2, 1013904242);
      B.JSArray_methods.$indexSet(t1, 3, 2773480762);
      B.JSArray_methods.$indexSet(t1, 4, 1359893119);
      B.JSArray_methods.$indexSet(t1, 5, 2600822924);
      B.JSArray_methods.$indexSet(t1, 6, 528734635);
      B.JSArray_methods.$indexSet(t1, 7, 1541459225);
      _this._bytesHashed = _this._bufferLength = 0;
      _this._finished = false;
      return _this;
    },
    clean$0() {
      A.zero(this._hash$_buffer);
      A.zero(this._temp);
      this.reset$0();
    },
    restoreState$1(savedState) {
      var t1, _this = this;
      type$.SHA256State._as(savedState);
      B.JSArray_methods.setAll$2(_this._state, 0, savedState.state);
      _this._bufferLength = savedState.bufferLength;
      t1 = savedState.buffer;
      if (t1 != null)
        B.JSArray_methods.setRange$3(_this._hash$_buffer, 0, t1.length, t1);
      _this._bytesHashed = savedState.bytesHashed;
      _this._finished = false;
      return _this;
    },
    saveState$0() {
      var t1, t2, _this = this;
      if (_this._finished)
        throw A.wrapException(B.MessageException_RMe);
      t1 = type$.int;
      t2 = A.List_List$from(_this._state, false, t1);
      t1 = _this._bufferLength > 0 ? A.List_List$from(_this._hash$_buffer, false, t1) : null;
      return new A.SHA256State(t2, t1, _this._bufferLength, _this._bytesHashed);
    },
    cleanSavedState$1(savedState) {
      var t1;
      type$.SHA256State._as(savedState);
      A.zero(savedState.state);
      t1 = savedState.buffer;
      if (t1 != null)
        A.zero(t1);
      savedState.bytesHashed = savedState.bufferLength = 0;
    },
    _hashBlocks$5(w, v, p, pos, len) {
      var t2, a, b, c, d, e, f, g, h, i, u, u0, t3, t4, t5, t6, t10, e0, a0,
        t1 = type$.List_int;
      t1._as(w);
      t1._as(v);
      t1._as(p);
      for (t1 = this._k, t2 = t1.length; len >= 64;) {
        a = v[0];
        b = v[1];
        c = v[2];
        d = v[3];
        e = v[4];
        f = v[5];
        g = v[6];
        h = v[7];
        for (i = 0; i < 16; ++i)
          B.JSArray_methods.$indexSet(w, i, A.readUint32BE(p, pos + i * 4));
        for (i = 16; i < 64; ++i) {
          u = w[i - 2];
          u0 = w[i - 15];
          B.JSArray_methods.$indexSet(w, i, (((((u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10) >>> 0) + w[i - 7] >>> 0) + (((u0 >>> 7 | u0 << 25) ^ (u0 >>> 18 | u0 << 14) ^ u0 >>> 3) >>> 0) >>> 0) + w[i - 16] >>> 0);
        }
        for (i = 0; i < 64; ++i, h = g, g = f, f = e, e = e0, d = c, c = b, b = a, a = a0) {
          t3 = B.JSInt_methods._shrOtherPositive$1(e, 6);
          t4 = e >>> 0;
          t5 = B.JSInt_methods._shrOtherPositive$1(e, 11);
          t6 = B.JSInt_methods._shrOtherPositive$1(e, 25);
          if (!(i < t2))
            return A.ioore(t1, i);
          t10 = ((((t3 | t4 << 26) ^ (t5 | t4 << 21) ^ (t6 | t4 << 7)) >>> 0) + ((e & f ^ ~e & g) >>> 0) >>> 0) + ((h + t1[i] >>> 0) + w[i] >>> 0) >>> 0;
          t4 = a >>> 0;
          e0 = d + t10 >>> 0;
          a0 = t10 + ((((B.JSInt_methods._shrOtherPositive$1(a, 2) | t4 << 30) ^ (B.JSInt_methods._shrOtherPositive$1(a, 13) | t4 << 19) ^ (B.JSInt_methods._shrOtherPositive$1(a, 22) | t4 << 10)) >>> 0) + ((a & b ^ a & c ^ b & c) >>> 0) >>> 0) >>> 0;
        }
        B.JSArray_methods.$indexSet(v, 0, v[0] + a >>> 0);
        B.JSArray_methods.$indexSet(v, 1, v[1] + b >>> 0);
        B.JSArray_methods.$indexSet(v, 2, v[2] + c >>> 0);
        B.JSArray_methods.$indexSet(v, 3, v[3] + d >>> 0);
        B.JSArray_methods.$indexSet(v, 4, v[4] + e >>> 0);
        B.JSArray_methods.$indexSet(v, 5, v[5] + f >>> 0);
        B.JSArray_methods.$indexSet(v, 6, v[6] + g >>> 0);
        B.JSArray_methods.$indexSet(v, 7, v[7] + h >>> 0);
        pos += 64;
        len -= 64;
      }
      return pos;
    },
    $isSerializableHash: 1
  };
  A.SHA256State.prototype = {$isHashState: 1};
  A.SHA512.prototype = {
    get$getBlockSize() {
      return 128;
    },
    get$getDigestLength() {
      return 64;
    },
    _initState$0() {
      var t1 = this._stateHi;
      B.JSArray_methods.$indexSet(t1, 0, 1779033703);
      B.JSArray_methods.$indexSet(t1, 1, 3144134277);
      B.JSArray_methods.$indexSet(t1, 2, 1013904242);
      B.JSArray_methods.$indexSet(t1, 3, 2773480762);
      B.JSArray_methods.$indexSet(t1, 4, 1359893119);
      B.JSArray_methods.$indexSet(t1, 5, 2600822924);
      B.JSArray_methods.$indexSet(t1, 6, 528734635);
      B.JSArray_methods.$indexSet(t1, 7, 1541459225);
      t1 = this._stateLo;
      B.JSArray_methods.$indexSet(t1, 0, 4089235720);
      B.JSArray_methods.$indexSet(t1, 1, 2227873595);
      B.JSArray_methods.$indexSet(t1, 2, 4271175723);
      B.JSArray_methods.$indexSet(t1, 3, 1595750129);
      B.JSArray_methods.$indexSet(t1, 4, 2917565137);
      B.JSArray_methods.$indexSet(t1, 5, 725511199);
      B.JSArray_methods.$indexSet(t1, 6, 4215389547);
      B.JSArray_methods.$indexSet(t1, 7, 327033209);
    },
    reset$0() {
      var _this = this;
      _this._initState$0();
      _this._bytesHashed = _this._bufferLength = 0;
      _this._finished = false;
      return _this;
    },
    clean$0() {
      var _this = this;
      A.zero(_this._hash$_buffer);
      A.zero(_this._tempHi);
      A.zero(_this._tempLo);
      _this.reset$0();
    },
    update$1(data) {
      var t1, dataLength, dataPos, t2, t3, dataPos0, t4, _this = this;
      type$.List_int._as(data);
      if (_this._finished)
        throw A.wrapException(B.MessageException_NiJ);
      t1 = J.getInterceptor$asx(data);
      dataLength = t1.get$length(data);
      _this._bytesHashed += dataLength;
      dataPos = 0;
      if (_this._bufferLength > 0) {
        t2 = _this._hash$_buffer;
        while (true) {
          if (!(_this._bufferLength < _this.get$getBlockSize() && dataLength > 0))
            break;
          t3 = _this._bufferLength++;
          dataPos0 = dataPos + 1;
          t4 = t1.$index(data, dataPos);
          if (typeof t4 !== "number")
            return t4.$and();
          B.JSArray_methods.$indexSet(t2, t3, t4 & 255);
          --dataLength;
          dataPos = dataPos0;
        }
        if (_this._bufferLength === _this.get$getBlockSize()) {
          _this._hashBlocks$7(_this._tempHi, _this._tempLo, _this._stateHi, _this._stateLo, t2, 0, _this.get$getBlockSize());
          _this._bufferLength = 0;
        }
      }
      if (dataLength >= _this.get$getBlockSize()) {
        dataPos = _this._hashBlocks$7(_this._tempHi, _this._tempLo, _this._stateHi, _this._stateLo, data, dataPos, dataLength);
        dataLength = B.JSInt_methods.$mod(dataLength, _this.get$getBlockSize());
      }
      for (t2 = _this._hash$_buffer; dataLength > 0; dataPos = dataPos0) {
        t3 = _this._bufferLength++;
        dataPos0 = dataPos + 1;
        t4 = t1.$index(data, dataPos);
        if (typeof t4 !== "number")
          return t4.$and();
        B.JSArray_methods.$indexSet(t2, t3, t4 & 255);
        --dataLength;
      }
      return _this;
    },
    finish$1(out) {
      var bytesHashed, left, bitLenHi, padLength, t1, i, t2, t3, _this = this;
      type$.List_int._as(out);
      if (!_this._finished) {
        bytesHashed = _this._bytesHashed;
        left = _this._bufferLength;
        bitLenHi = B.JSInt_methods.toInt$0(B.JSInt_methods._tdivFast$1(bytesHashed, 536870912));
        padLength = B.JSInt_methods.$mod(bytesHashed, 128) < 112 ? 128 : 256;
        t1 = _this._hash$_buffer;
        B.JSArray_methods.$indexSet(t1, left, 128);
        for (i = left + 1, t2 = padLength - 8; i < t2; ++i)
          B.JSArray_methods.$indexSet(t1, i, 0);
        A.writeUint32BE(bitLenHi, t1, t2);
        A.writeUint32BE(bytesHashed << 3 >>> 0, t1, padLength - 4);
        _this._hashBlocks$7(_this._tempHi, _this._tempLo, _this._stateHi, _this._stateLo, t1, 0, padLength);
        _this._finished = true;
      }
      for (t1 = _this._stateHi, t2 = _this._stateLo, i = 0; i < (_this.get$getDigestLength() / 8 | 0); ++i) {
        if (!(i < 8))
          return A.ioore(t1, i);
        t3 = i * 8;
        A.writeUint32BE(t1[i], out, t3);
        A.writeUint32BE(t2[i], out, t3 + 4);
      }
      return _this;
    },
    digest$0() {
      var out = A.List_List$filled(this.get$getDigestLength(), 0, false, type$.int);
      this.finish$1(out);
      return out;
    },
    saveState$0() {
      var t1, t2, t3, _this = this;
      if (_this._finished)
        throw A.wrapException(B.MessageException_RMe);
      t1 = type$.int;
      t2 = A.List_List$from(_this._stateHi, false, t1);
      t3 = A.List_List$from(_this._stateLo, false, t1);
      t1 = _this._bufferLength > 0 ? A.List_List$from(_this._hash$_buffer, true, t1) : null;
      return new A.SHA512State(t2, t3, t1, _this._bufferLength, _this._bytesHashed);
    },
    restoreState$1(savedState) {
      var t1, _this = this;
      type$.SHA512State._as(savedState);
      B.JSArray_methods.setAll$2(_this._stateHi, 0, savedState.stateHi);
      B.JSArray_methods.setAll$2(_this._stateLo, 0, savedState.stateLo);
      _this._bufferLength = savedState.bufferLength;
      t1 = savedState.buffer;
      if (t1 != null)
        B.JSArray_methods.setAll$2(_this._hash$_buffer, 0, t1);
      _this._bytesHashed = savedState.bytesHashed;
      _this._finished = false;
      return _this;
    },
    cleanSavedState$1(savedState) {
      var t1;
      type$.SHA512State._as(savedState);
      A.zero(savedState.stateHi);
      A.zero(savedState.stateLo);
      t1 = savedState.buffer;
      if (t1 != null)
        A.zero(t1);
      savedState.bytesHashed = savedState.bufferLength = 0;
    },
    _sigma1A$2(ah4, al4) {
      ah4 = ah4 >>> 0;
      al4 = al4 >>> 0;
      return ((ah4 >>> 14 | al4 << 18) ^ (ah4 >>> 18 | al4 << 14) ^ (al4 >>> 9 | ah4 << 23)) >>> 0;
    },
    _sigma1B$2(ah0, al0) {
      al0 = al0 >>> 0;
      ah0 = ah0 >>> 0;
      return ((ah0 >>> 28 | al0 << 4) ^ (al0 >>> 2 | ah0 << 30) ^ (al0 >>> 7 | ah0 << 25)) >>> 0;
    },
    _hashBlocks$7(wh, wl, hh, hl, m, pos, len) {
      var ah0, ah1, ah2, ah3, ah4, ah5, ah6, ah7, al0, al1, al2, al3, al4, al5, al6, al7, t2, i, j, t3, t4, h, l, h0, l0, t5, h1, l1, t6, t7, h2, l2, a, b, c, th, tl, d, a0, b0, c0, bh7, bl7, bh3, bl3, j0, h3, h4, _this = this,
        t1 = type$.List_int;
      t1._as(wh);
      t1._as(wl);
      t1._as(hh);
      t1._as(hl);
      t1._as(m);
      ah0 = hh[0];
      ah1 = hh[1];
      ah2 = hh[2];
      ah3 = hh[3];
      ah4 = hh[4];
      ah5 = hh[5];
      ah6 = hh[6];
      ah7 = hh[7];
      al0 = hl[0];
      al1 = hl[1];
      al2 = hl[2];
      al3 = hl[3];
      al4 = hl[4];
      al5 = hl[5];
      al6 = hl[6];
      al7 = hl[7];
      for (t1 = _this._k, t2 = t1.length; len >= 128;) {
        for (i = 0; i < 16; ++i) {
          j = 8 * i + pos;
          B.JSArray_methods.$indexSet(wh, i, A.readUint32BE(m, j));
          B.JSArray_methods.$indexSet(wl, i, A.readUint32BE(m, j + 4));
        }
        for (i = 0; i < 80; ++i, al7 = al6, al6 = al5, al5 = al4, al4 = bl3, al3 = al2, al2 = al1, al1 = al0, al0 = bl7, ah7 = ah6, ah6 = ah5, ah5 = ah4, ah4 = bh3, ah3 = ah2, ah2 = ah1, ah1 = ah0, ah0 = bh7) {
          t3 = B.JSInt_methods._shrOtherPositive$1(al7, 16);
          t4 = B.JSInt_methods._shrOtherPositive$1(ah7, 16);
          h = _this._sigma1A$2(ah4, al4);
          l = _this._sigma1A$2(al4, ah4);
          h0 = ah4 & ah5 ^ ~ah4 & ah6;
          l0 = al4 & al5 ^ ~al4 & al6;
          t5 = i * 2;
          if (!(t5 < t2))
            return A.ioore(t1, t5);
          h1 = t1[t5];
          ++t5;
          if (!(t5 < t2))
            return A.ioore(t1, t5);
          l1 = t1[t5];
          t5 = B.JSInt_methods._shrOtherPositive$1(l1, 16);
          t6 = B.JSInt_methods._shrOtherPositive$1(h1, 16);
          t7 = B.JSInt_methods.$mod(i, 16);
          h2 = wh[t7];
          l2 = wl[t7];
          a = (al7 & 65535) + (l & 65535) + (l0 & 65535) + (l1 & 65535) + (l2 & 65535);
          b = (t3 & 65535) + (l >>> 16 & 65535) + (l0 >>> 16 & 65535) + (t5 & 65535) + (l2 >>> 16 & 65535) + (a >>> 16 & 65535);
          c = (ah7 & 65535) + (h & 65535) + (h0 & 65535) + (h1 & 65535) + (h2 & 65535) + (b >>> 16 & 65535);
          th = c & 65535 | (t4 & 65535) + (h >>> 16 & 65535) + (h0 >>> 16 & 65535) + (t6 & 65535) + (h2 >>> 16 & 65535) + (c >>> 16 & 65535) << 16;
          tl = a & 65535 | b << 16;
          a = tl & 65535;
          b = tl >>> 16 & 65535;
          c = th & 65535;
          d = th >>> 16 & 65535;
          h = _this._sigma1B$2(ah0, al0);
          l = _this._sigma1B$2(al0, ah0);
          h0 = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
          l0 = al0 & al1 ^ al0 & al2 ^ al1 & al2;
          a0 = a + (l & 65535) + (l0 & 65535);
          b0 = b + (l >>> 16 & 65535) + (l0 >>> 16 & 65535) + (a0 >>> 16 & 65535);
          c0 = c + (h & 65535) + (h0 & 65535) + (b0 >>> 16 & 65535);
          bh7 = (c0 & 65535 | d + (h >>> 16 & 65535) + (h0 >>> 16 & 65535) + (c0 >>> 16 & 65535) << 16) >>> 0;
          bl7 = (a0 & 65535 | b0 << 16) >>> 0;
          a = (al3 & 65535) + a;
          b = (B.JSInt_methods._shrOtherPositive$1(al3, 16) & 65535) + b + (a >>> 16 & 65535);
          c = (ah3 & 65535) + c + (b >>> 16 & 65535);
          bh3 = (c & 65535 | (B.JSInt_methods._shrOtherPositive$1(ah3, 16) & 65535) + d + (c >>> 16 & 65535) << 16) >>> 0;
          bl3 = (a & 65535 | b << 16) >>> 0;
          if (t7 === 15)
            for (j = 0; j < 16; j = j0) {
              h = wh[j];
              l = wl[j];
              t3 = (j + 9) % 16;
              h0 = wh[t3];
              l0 = wl[t3];
              j0 = j + 1;
              t3 = j0 % 16;
              th = wh[t3];
              tl = wl[t3];
              h1 = (th >>> 1 | tl << 31) ^ (th >>> 8 | tl << 24) ^ th >>> 7;
              h2 = (tl >>> 1 | th << 31) ^ (tl >>> 8 | th << 24) ^ (tl >>> 7 | th << 25);
              t3 = (j + 14) % 16;
              th = wh[t3];
              tl = wl[t3];
              h3 = (th >>> 19 | tl << 13) ^ (tl >>> 29 | th << 3) ^ th >>> 6;
              h4 = (tl >>> 19 | th << 13) ^ (th >>> 29 | tl << 3) ^ (tl >>> 6 | th << 26);
              a = (l & 65535) + (l0 & 65535) + (h2 & 65535) + (h4 & 65535);
              b = (l >>> 16 & 65535) + (l0 >>> 16 & 65535) + (h2 >>> 16 & 65535) + (h4 >>> 16 & 65535) + (a >>> 16 & 65535);
              c = (h & 65535) + (h0 & 65535) + (h1 & 65535) + (h3 & 65535) + (b >>> 16 & 65535);
              B.JSArray_methods.$indexSet(wh, j, (c & 65535 | (h >>> 16 & 65535) + (h0 >>> 16 & 65535) + (h1 >>> 16 & 65535) + (h3 >>> 16 & 65535) + (c >>> 16 & 65535) << 16) >>> 0);
              B.JSArray_methods.$indexSet(wl, j, (a & 65535 | b << 16) >>> 0);
            }
        }
        t3 = B.JSInt_methods._shrOtherPositive$1(al0, 16);
        t4 = B.JSInt_methods._shrOtherPositive$1(ah0, 16);
        h = hh[0];
        l = hl[0];
        a = (al0 & 65535) + (l & 65535);
        b = (t3 & 65535) + (B.JSInt_methods._shrOtherPositive$1(l, 16) & 65535) + (a >>> 16 & 65535);
        c = (ah0 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah0 = (c & 65535 | (t4 & 65535) + (B.JSInt_methods._shrOtherPositive$1(h, 16) & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 0, ah0);
        al0 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 0, al0);
        t4 = B.JSInt_methods._shrOtherPositive$1(al1, 16);
        t3 = B.JSInt_methods._shrOtherPositive$1(ah1, 16);
        h = hh[1];
        l = hl[1];
        a = (al1 & 65535) + (l & 65535);
        b = (t4 & 65535) + (B.JSInt_methods._shrOtherPositive$1(l, 16) & 65535) + (a >>> 16 & 65535);
        c = (ah1 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah1 = (c & 65535 | (t3 & 65535) + (B.JSInt_methods._shrOtherPositive$1(h, 16) & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 1, ah1);
        al1 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 1, al1);
        t3 = B.JSInt_methods._shrOtherPositive$1(al2, 16);
        t4 = B.JSInt_methods._shrOtherPositive$1(ah2, 16);
        h = hh[2];
        l = hl[2];
        a = (al2 & 65535) + (l & 65535);
        b = (t3 & 65535) + (B.JSInt_methods._shrOtherPositive$1(l, 16) & 65535) + (a >>> 16 & 65535);
        c = (ah2 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah2 = (c & 65535 | (t4 & 65535) + (B.JSInt_methods._shrOtherPositive$1(h, 16) & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 2, ah2);
        al2 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 2, al2);
        t4 = B.JSInt_methods._shrOtherPositive$1(al3, 16);
        t3 = B.JSInt_methods._shrOtherPositive$1(ah3, 16);
        h = hh[3];
        l = hl[3];
        a = (al3 & 65535) + (l & 65535);
        b = (t4 & 65535) + (B.JSInt_methods._shrOtherPositive$1(l, 16) & 65535) + (a >>> 16 & 65535);
        c = (ah3 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah3 = (c & 65535 | (t3 & 65535) + (B.JSInt_methods._shrOtherPositive$1(h, 16) & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 3, ah3);
        al3 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 3, al3);
        t3 = B.JSInt_methods._shrOtherPositive$1(al4, 16);
        t4 = B.JSInt_methods._shrOtherPositive$1(ah4, 16);
        h = hh[4];
        l = hl[4];
        a = (al4 & 65535) + (l & 65535);
        b = (t3 & 65535) + (B.JSInt_methods._shrOtherPositive$1(l, 16) & 65535) + (a >>> 16 & 65535);
        c = (ah4 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah4 = (c & 65535 | (t4 & 65535) + (B.JSInt_methods._shrOtherPositive$1(h, 16) & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 4, ah4);
        al4 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 4, al4);
        t4 = B.JSInt_methods._shrOtherPositive$1(al5, 16);
        t3 = B.JSInt_methods._shrOtherPositive$1(ah5, 16);
        h = hh[5];
        l = hl[5];
        a = (al5 & 65535) + (l & 65535);
        b = (t4 & 65535) + (B.JSInt_methods._shrOtherPositive$1(l, 16) & 65535) + (a >>> 16 & 65535);
        c = (ah5 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah5 = (c & 65535 | (t3 & 65535) + (B.JSInt_methods._shrOtherPositive$1(h, 16) & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 5, ah5);
        al5 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 5, al5);
        t3 = B.JSInt_methods._shrOtherPositive$1(al6, 16);
        t4 = B.JSInt_methods._shrOtherPositive$1(ah6, 16);
        h = hh[6];
        l = hl[6];
        a = (al6 & 65535) + (l & 65535);
        b = (t3 & 65535) + (B.JSInt_methods._shrOtherPositive$1(l, 16) & 65535) + (a >>> 16 & 65535);
        c = (ah6 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah6 = (c & 65535 | (t4 & 65535) + (B.JSInt_methods._shrOtherPositive$1(h, 16) & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 6, ah6);
        al6 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 6, al6);
        t4 = B.JSInt_methods._shrOtherPositive$1(al7, 16);
        t3 = B.JSInt_methods._shrOtherPositive$1(ah7, 16);
        h = hh[7];
        l = hl[7];
        a = (al7 & 65535) + (l & 65535);
        b = (t4 & 65535) + (B.JSInt_methods._shrOtherPositive$1(l, 16) & 65535) + (a >>> 16 & 65535);
        c = (ah7 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah7 = (c & 65535 | (t3 & 65535) + (B.JSInt_methods._shrOtherPositive$1(h, 16) & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 7, ah7);
        al7 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 7, al7);
        pos += 128;
        len -= 128;
      }
      return pos;
    },
    $isSerializableHash: 1
  };
  A.SHA512State.prototype = {$isHashState: 1};
  A.SHA512256.prototype = {
    get$getDigestLength() {
      return 32;
    },
    get$getBlockSize() {
      return 128;
    },
    _initState$0() {
      var t1 = this._stateHi;
      B.JSArray_methods.$indexSet(t1, 0, 573645204);
      B.JSArray_methods.$indexSet(t1, 1, 2673172387);
      B.JSArray_methods.$indexSet(t1, 2, 596883563);
      B.JSArray_methods.$indexSet(t1, 3, 2520282905);
      B.JSArray_methods.$indexSet(t1, 4, 2519219938);
      B.JSArray_methods.$indexSet(t1, 5, 3193839141);
      B.JSArray_methods.$indexSet(t1, 6, 721525244);
      B.JSArray_methods.$indexSet(t1, 7, 246885852);
      t1 = this._stateLo;
      B.JSArray_methods.$indexSet(t1, 0, 4230739756);
      B.JSArray_methods.$indexSet(t1, 1, 3360449730);
      B.JSArray_methods.$indexSet(t1, 2, 1867755857);
      B.JSArray_methods.$indexSet(t1, 3, 1497426621);
      B.JSArray_methods.$indexSet(t1, 4, 2827943907);
      B.JSArray_methods.$indexSet(t1, 5, 1401305490);
      B.JSArray_methods.$indexSet(t1, 6, 746961066);
      B.JSArray_methods.$indexSet(t1, 7, 2177182882);
    }
  };
  A.HMAC.prototype = {
    get$getBlockSize() {
      this.__HMAC__blockSize_F === $ && A.throwLateFieldNI("_blockSize");
      var t1 = this.__HMAC__outer_A;
      t1 === $ && A.throwLateFieldNI("_outer");
      t1 = t1.get$getBlockSize();
      return t1;
    },
    get$getDigestLength() {
      var t1 = this.__HMAC__outer_A;
      t1 === $ && A.throwLateFieldNI("_outer");
      return t1.get$getDigestLength();
    },
    HMAC$3(hash, key, blockSize) {
      var t1, pad, t2, i, _this = this;
      _this.__HMAC__blockSize_F !== $ && A.throwLateFieldAI("_blockSize");
      _this.__HMAC__blockSize_F = blockSize;
      t1 = type$.SerializableHash_HashState;
      _this.set$__HMAC__inner_A(t1._as(hash.call$0()));
      _this.set$__HMAC__outer_A(t1._as(hash.call$0()));
      t1 = _this.get$getBlockSize();
      pad = A.List_List$filled(t1, 0, false, type$.int);
      if (key.length > _this.get$getBlockSize()) {
        t2 = _this.__HMAC__inner_A;
        t2 === $ && A.throwLateFieldNI("_inner");
        t2 = t2.update$1(key);
        t2.finish$1(pad);
        t2.clean$0();
      } else
        B.JSArray_methods.setAll$2(pad, 0, key);
      for (i = 0; i < t1; ++i) {
        t2 = pad[i];
        if (typeof t2 !== "number")
          return t2.$xor();
        B.JSArray_methods.$indexSet(pad, i, (t2 ^ 54) >>> 0);
      }
      t2 = _this.__HMAC__inner_A;
      t2 === $ && A.throwLateFieldNI("_inner");
      t2.update$1(pad);
      for (i = 0; i < t1; ++i) {
        t2 = pad[i];
        if (typeof t2 !== "number")
          return t2.$xor();
        B.JSArray_methods.$indexSet(pad, i, (t2 ^ 106) >>> 0);
      }
      t1 = _this.__HMAC__outer_A;
      t1 === $ && A.throwLateFieldNI("_outer");
      t1.update$1(pad);
      _this._innerKeyedState = _this.__HMAC__inner_A.saveState$0();
      _this._outerKeyedState = _this.__HMAC__outer_A.saveState$0();
      A.zero(pad);
    },
    clean$0() {
      var t2, _this = this,
        t1 = _this.__HMAC__inner_A;
      t1 === $ && A.throwLateFieldNI("_inner");
      t2 = type$.HashState;
      t1.cleanSavedState$1(t2._as(_this._innerKeyedState));
      t1 = _this.__HMAC__outer_A;
      t1 === $ && A.throwLateFieldNI("_outer");
      t1.cleanSavedState$1(t2._as(_this._outerKeyedState));
    },
    update$1(data) {
      var t1;
      type$.List_int._as(data);
      t1 = this.__HMAC__inner_A;
      t1 === $ && A.throwLateFieldNI("_inner");
      t1.update$1(data);
      return this;
    },
    finish$1(out) {
      var t1, _this = this;
      type$.List_int._as(out);
      if (_this._hmac$_finished) {
        t1 = _this.__HMAC__outer_A;
        t1 === $ && A.throwLateFieldNI("_outer");
        t1.finish$1(out);
        return _this;
      }
      t1 = _this.__HMAC__inner_A;
      t1 === $ && A.throwLateFieldNI("_inner");
      t1.finish$1(out);
      t1 = _this.__HMAC__outer_A;
      t1 === $ && A.throwLateFieldNI("_outer");
      t1.update$1(B.JSArray_methods.sublist$2(out, 0, t1.get$getDigestLength())).finish$1(out);
      _this._hmac$_finished = true;
      return _this;
    },
    digest$0() {
      var out,
        t1 = this.__HMAC__outer_A;
      t1 === $ && A.throwLateFieldNI("_outer");
      out = A.List_List$filled(t1.get$getDigestLength(), 0, false, type$.int);
      this.finish$1(out);
      return out;
    },
    saveState$0() {
      var t1 = this.__HMAC__inner_A;
      t1 === $ && A.throwLateFieldNI("_inner");
      return t1.saveState$0();
    },
    restoreState$1(savedState) {
      var _this = this,
        t1 = _this.__HMAC__inner_A;
      t1 === $ && A.throwLateFieldNI("_inner");
      t1.restoreState$1(savedState);
      t1 = _this.__HMAC__outer_A;
      t1 === $ && A.throwLateFieldNI("_outer");
      t1.restoreState$1(type$.HashState._as(_this._outerKeyedState));
      _this._hmac$_finished = false;
      return _this;
    },
    cleanSavedState$1(savedState) {
      var t1 = this.__HMAC__inner_A;
      t1 === $ && A.throwLateFieldNI("_inner");
      t1.cleanSavedState$1(savedState);
    },
    set$__HMAC__inner_A(__HMAC__inner_A) {
      this.__HMAC__inner_A = type$.SerializableHash_HashState._as(__HMAC__inner_A);
    },
    set$__HMAC__outer_A(__HMAC__outer_A) {
      this.__HMAC__outer_A = type$.SerializableHash_HashState._as(__HMAC__outer_A);
    },
    $isSerializableHash: 1
  };
  A.Poly1305.prototype = {
    _blocks$3(m, mpos, bytes) {
      var hibit, t1, h0, h1, h2, h3, h4, h5, h6, h7, h8, h9, t2, r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t00, t20, t30, t40, t50, t60, t70, d0, d00, d1, d10, d2, d20, d21, d3, d30, d31, d4, d40, d41, d5, d50, d51, d6, d60, d61, d7, d70, d71, d8, d80, d81, d9, d90, c;
      type$.List_int._as(m);
      hibit = this._fin !== 0 ? 0 : 2048;
      t1 = this._h;
      h0 = t1[0];
      h1 = t1[1];
      h2 = t1[2];
      h3 = t1[3];
      h4 = t1[4];
      h5 = t1[5];
      h6 = t1[6];
      h7 = t1[7];
      h8 = t1[8];
      h9 = t1[9];
      t2 = this._r;
      r0 = t2[0];
      r1 = t2[1];
      r2 = t2[2];
      r3 = t2[3];
      r4 = t2[4];
      r5 = t2[5];
      r6 = t2[6];
      r7 = t2[7];
      r8 = t2[8];
      r9 = t2[9];
      for (t2 = m.length, t3 = 5 * r9, t4 = 5 * r8, t5 = 5 * r7, t6 = 5 * r6, t7 = 5 * r5, t8 = 5 * r4, t9 = 5 * r3, t10 = 5 * r2, t11 = 5 * r1; bytes >= 16; h9 = d9, h8 = d81, h7 = d71, h6 = d61, h5 = d51, h4 = d41, h3 = d31, h2 = d21, h1 = d1, h0 = d0) {
        if (!(mpos >= 0 && mpos < t2))
          return A.ioore(m, mpos);
        t12 = m[mpos];
        t13 = mpos + 1;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t13 = m[t13];
        if (typeof t13 !== "number")
          return t13.$shl();
        if (typeof t12 !== "number")
          return t12.$or();
        t00 = t12 | t13 << 8;
        h0 += t00 & 8191;
        t13 = mpos + 2;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t13 = m[t13];
        t12 = mpos + 3;
        if (!(t12 < t2))
          return A.ioore(m, t12);
        t12 = m[t12];
        if (typeof t12 !== "number")
          return t12.$shl();
        if (typeof t13 !== "number")
          return t13.$or();
        t12 = t13 | t12 << 8;
        h1 += (t00 >>> 13 | t12 << 3) & 8191;
        t00 = mpos + 4;
        if (!(t00 < t2))
          return A.ioore(m, t00);
        t00 = m[t00];
        t13 = mpos + 5;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t13 = m[t13];
        if (typeof t13 !== "number")
          return t13.$shl();
        if (typeof t00 !== "number")
          return t00.$or();
        t20 = t00 | t13 << 8;
        h2 += (t12 >>> 10 | t20 << 6) & 8191;
        t12 = mpos + 6;
        if (!(t12 < t2))
          return A.ioore(m, t12);
        t12 = m[t12];
        t13 = mpos + 7;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t13 = m[t13];
        if (typeof t13 !== "number")
          return t13.$shl();
        if (typeof t12 !== "number")
          return t12.$or();
        t30 = t12 | t13 << 8;
        h3 += (t20 >>> 7 | t30 << 9) & 8191;
        t20 = mpos + 8;
        if (!(t20 < t2))
          return A.ioore(m, t20);
        t20 = m[t20];
        t13 = mpos + 9;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t13 = m[t13];
        if (typeof t13 !== "number")
          return t13.$shl();
        if (typeof t20 !== "number")
          return t20.$or();
        t40 = t20 | t13 << 8;
        h4 += (t30 >>> 4 | t40 << 12) & 8191;
        h5 += t40 >>> 1 & 8191;
        t30 = mpos + 10;
        if (!(t30 < t2))
          return A.ioore(m, t30);
        t30 = m[t30];
        t13 = mpos + 11;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t13 = m[t13];
        if (typeof t13 !== "number")
          return t13.$shl();
        if (typeof t30 !== "number")
          return t30.$or();
        t50 = t30 | t13 << 8;
        h6 += (t40 >>> 14 | t50 << 2) & 8191;
        t40 = mpos + 12;
        if (!(t40 < t2))
          return A.ioore(m, t40);
        t40 = m[t40];
        t13 = mpos + 13;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t13 = m[t13];
        if (typeof t13 !== "number")
          return t13.$shl();
        if (typeof t40 !== "number")
          return t40.$or();
        t60 = t40 | t13 << 8;
        h7 += (t50 >>> 11 | t60 << 5) & 8191;
        t50 = mpos + 14;
        if (!(t50 < t2))
          return A.ioore(m, t50);
        t50 = m[t50];
        t13 = mpos + 15;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t13 = m[t13];
        if (typeof t13 !== "number")
          return t13.$shl();
        if (typeof t50 !== "number")
          return t50.$or();
        t70 = t50 | t13 << 8;
        h8 += (t60 >>> 8 | t70 << 8) & 8191;
        h9 += (t70 >>> 5 | hibit) >>> 0;
        d0 = h0 * r0 + h1 * t3 + h2 * t4 + h3 * t5 + h4 * t6;
        d00 = (d0 & 8191) + h5 * t7 + h6 * t8 + h7 * t9 + h8 * t10 + h9 * t11;
        d1 = B.JSInt_methods._shrOtherPositive$1(d0, 13) + B.JSInt_methods._shrOtherPositive$1(d00, 13) + h0 * r1 + h1 * r0 + h2 * t3 + h3 * t4 + h4 * t5;
        d10 = (d1 & 8191) + h5 * t6 + h6 * t7 + h7 * t8 + h8 * t9 + h9 * t10;
        d2 = B.JSInt_methods._shrOtherPositive$1(d1, 13) + B.JSInt_methods._shrOtherPositive$1(d10, 13) + h0 * r2 + h1 * r1 + h2 * r0 + h3 * t3 + h4 * t4;
        d20 = (d2 & 8191) + h5 * t5 + h6 * t6 + h7 * t7 + h8 * t8 + h9 * t9;
        d21 = d20 & 8191;
        d3 = B.JSInt_methods._shrOtherPositive$1(d2, 13) + B.JSInt_methods._shrOtherPositive$1(d20, 13) + h0 * r3 + h1 * r2 + h2 * r1 + h3 * r0 + h4 * t3;
        d30 = (d3 & 8191) + h5 * t4 + h6 * t5 + h7 * t6 + h8 * t7 + h9 * t8;
        d31 = d30 & 8191;
        d4 = B.JSInt_methods._shrOtherPositive$1(d3, 13) + B.JSInt_methods._shrOtherPositive$1(d30, 13) + h0 * r4 + h1 * r3 + h2 * r2 + h3 * r1 + h4 * r0;
        d40 = (d4 & 8191) + h5 * t3 + h6 * t4 + h7 * t5 + h8 * t6 + h9 * t7;
        d41 = d40 & 8191;
        d5 = B.JSInt_methods._shrOtherPositive$1(d4, 13) + B.JSInt_methods._shrOtherPositive$1(d40, 13) + h0 * r5 + h1 * r4 + h2 * r3 + h3 * r2 + h4 * r1;
        d50 = (d5 & 8191) + h5 * r0 + h6 * t3 + h7 * t4 + h8 * t5 + h9 * t6;
        d51 = d50 & 8191;
        d6 = B.JSInt_methods._shrOtherPositive$1(d5, 13) + B.JSInt_methods._shrOtherPositive$1(d50, 13) + h0 * r6 + h1 * r5 + h2 * r4 + h3 * r3 + h4 * r2;
        d60 = (d6 & 8191) + h5 * r1 + h6 * r0 + h7 * t3 + h8 * t4 + h9 * t5;
        d61 = d60 & 8191;
        d7 = B.JSInt_methods._shrOtherPositive$1(d6, 13) + B.JSInt_methods._shrOtherPositive$1(d60, 13) + h0 * r7 + h1 * r6 + h2 * r5 + h3 * r4 + h4 * r3;
        d70 = (d7 & 8191) + h5 * r2 + h6 * r1 + h7 * r0 + h8 * t3 + h9 * t4;
        d71 = d70 & 8191;
        d8 = B.JSInt_methods._shrOtherPositive$1(d7, 13) + B.JSInt_methods._shrOtherPositive$1(d70, 13) + h0 * r8 + h1 * r7 + h2 * r6 + h3 * r5 + h4 * r4;
        d80 = (d8 & 8191) + h5 * r3 + h6 * r2 + h7 * r1 + h8 * r0 + h9 * t3;
        d81 = d80 & 8191;
        d9 = B.JSInt_methods._shrOtherPositive$1(d8, 13) + B.JSInt_methods._shrOtherPositive$1(d80, 13) + h0 * r9 + h1 * r8 + h2 * r7 + h3 * r6 + h4 * r5;
        d90 = (d9 & 8191) + h5 * r4 + h6 * r3 + h7 * r2 + h8 * r1 + h9 * r0;
        c = B.JSInt_methods._shrOtherPositive$1(d9, 13) + B.JSInt_methods._shrOtherPositive$1(d90, 13);
        d9 = d90 & 8191;
        c = (((c << 2 >>> 0) + c | 0) >>> 0) + (d00 & 8191) | 0;
        d0 = c & 8191;
        d1 = (d10 & 8191) + (c >>> 13);
        mpos += 16;
        bytes -= 16;
      }
      B.JSArray_methods.$indexSet(t1, 0, h0);
      B.JSArray_methods.$indexSet(t1, 1, h1);
      B.JSArray_methods.$indexSet(t1, 2, h2);
      B.JSArray_methods.$indexSet(t1, 3, h3);
      B.JSArray_methods.$indexSet(t1, 4, h4);
      B.JSArray_methods.$indexSet(t1, 5, h5);
      B.JSArray_methods.$indexSet(t1, 6, h6);
      B.JSArray_methods.$indexSet(t1, 7, h7);
      B.JSArray_methods.$indexSet(t1, 8, h8);
      B.JSArray_methods.$indexSet(t1, 9, h9);
    },
    finish$1(mac) {
      var g, t1, t2, i, c, mask, t3, t4, f, _this = this;
      type$.List_int._as(mac);
      g = A.List_List$filled(10, 0, false, type$.int);
      t1 = _this._leftover;
      if (t1 !== 0) {
        t2 = _this._poly1305$_buffer;
        i = t1 + 1;
        B.JSArray_methods.$indexSet(t2, t1, 1);
        for (; i < 16; ++i)
          B.JSArray_methods.$indexSet(t2, i, 0);
        _this._fin = 1;
        _this._blocks$3(t2, 0, 16);
      }
      t1 = _this._h;
      t2 = t1[1];
      if (typeof t2 !== "number")
        return t2.$shr();
      c = B.JSNumber_methods._shrOtherPositive$1(t2, 13);
      B.JSArray_methods.$indexSet(t1, 1, t2 & 8191);
      for (i = 2; i < 10; ++i) {
        t2 = t1[i];
        if (typeof t2 !== "number")
          return t2.$add();
        B.JSArray_methods.$indexSet(t1, i, t2 + c);
        t2 = t1[i];
        if (typeof t2 !== "number")
          return t2.$shr();
        c = B.JSNumber_methods._shrOtherPositive$1(t2, 13);
        B.JSArray_methods.$indexSet(t1, i, t2 & 8191);
      }
      t2 = t1[0];
      if (typeof t2 !== "number")
        return t2.$add();
      B.JSArray_methods.$indexSet(t1, 0, t2 + c * 5);
      t2 = t1[0];
      if (typeof t2 !== "number")
        return t2.$shr();
      c = B.JSNumber_methods._shrOtherPositive$1(t2, 13);
      B.JSArray_methods.$indexSet(t1, 0, t2 & 8191);
      t2 = t1[1];
      if (typeof t2 !== "number")
        return t2.$add();
      B.JSArray_methods.$indexSet(t1, 1, t2 + c);
      t2 = t1[1];
      if (typeof t2 !== "number")
        return t2.$shr();
      c = B.JSNumber_methods._shrOtherPositive$1(t2, 13);
      B.JSArray_methods.$indexSet(t1, 1, t2 & 8191);
      t2 = t1[2];
      if (typeof t2 !== "number")
        return t2.$add();
      B.JSArray_methods.$indexSet(t1, 2, t2 + c);
      t2 = t1[0];
      if (typeof t2 !== "number")
        return t2.$add();
      B.JSArray_methods.$indexSet(g, 0, t2 + 5);
      t2 = g[0];
      c = B.JSInt_methods._shrOtherPositive$1(t2, 13);
      B.JSArray_methods.$indexSet(g, 0, t2 & 8191);
      for (i = 1; i < 10; ++i) {
        t2 = t1[i];
        if (typeof t2 !== "number")
          return t2.$add();
        B.JSArray_methods.$indexSet(g, i, t2 + c);
        t2 = g[i];
        c = B.JSInt_methods._shrOtherPositive$1(t2, 13);
        B.JSArray_methods.$indexSet(g, i, t2 & 8191);
      }
      B.JSArray_methods.$indexSet(g, 9, g[9] - 8192);
      mask = ((c ^ 1) >>> 0) - 1;
      for (i = 0; i < 10; ++i)
        B.JSArray_methods.$indexSet(g, i, (g[i] & mask) >>> 0);
      mask = ~mask;
      for (i = 0; i < 10; ++i) {
        t2 = t1[i];
        if (typeof t2 !== "number")
          return t2.$and();
        B.JSArray_methods.$indexSet(t1, i, (t2 & mask | g[i]) >>> 0);
      }
      t2 = t1[0];
      t3 = t1[1];
      if (typeof t3 !== "number")
        return t3.$shl();
      if (typeof t2 !== "number")
        return t2.$or();
      B.JSArray_methods.$indexSet(t1, 0, (t2 | t3 << 13) & 65535);
      t3 = t1[1];
      if (typeof t3 !== "number")
        return t3.$shr();
      t3 = B.JSNumber_methods._shrOtherPositive$1(t3, 3);
      t2 = t1[2];
      if (typeof t2 !== "number")
        return t2.$shl();
      B.JSArray_methods.$indexSet(t1, 1, (t3 | t2 << 10) & 65535);
      t2 = t1[2];
      if (typeof t2 !== "number")
        return t2.$shr();
      t2 = B.JSNumber_methods._shrOtherPositive$1(t2, 6);
      t3 = t1[3];
      if (typeof t3 !== "number")
        return t3.$shl();
      B.JSArray_methods.$indexSet(t1, 2, (t2 | t3 << 7) & 65535);
      t3 = t1[3];
      if (typeof t3 !== "number")
        return t3.$shr();
      t3 = B.JSNumber_methods._shrOtherPositive$1(t3, 9);
      t2 = t1[4];
      if (typeof t2 !== "number")
        return t2.$shl();
      B.JSArray_methods.$indexSet(t1, 3, (t3 | t2 << 4) & 65535);
      t2 = t1[4];
      if (typeof t2 !== "number")
        return t2.$shr();
      t2 = B.JSNumber_methods._shrOtherPositive$1(t2, 12);
      t3 = t1[5];
      if (typeof t3 !== "number")
        return t3.$shl();
      t4 = t1[6];
      if (typeof t4 !== "number")
        return t4.$shl();
      B.JSArray_methods.$indexSet(t1, 4, (t2 | t3 << 1 | t4 << 14) & 65535);
      t4 = t1[6];
      if (typeof t4 !== "number")
        return t4.$shr();
      t4 = B.JSNumber_methods._shrOtherPositive$1(t4, 2);
      t3 = t1[7];
      if (typeof t3 !== "number")
        return t3.$shl();
      B.JSArray_methods.$indexSet(t1, 5, (t4 | t3 << 11) & 65535);
      t3 = t1[7];
      if (typeof t3 !== "number")
        return t3.$shr();
      t3 = B.JSNumber_methods._shrOtherPositive$1(t3, 5);
      t4 = t1[8];
      if (typeof t4 !== "number")
        return t4.$shl();
      B.JSArray_methods.$indexSet(t1, 6, (t3 | t4 << 8) & 65535);
      t4 = t1[8];
      if (typeof t4 !== "number")
        return t4.$shr();
      t4 = B.JSNumber_methods._shrOtherPositive$1(t4, 8);
      t3 = t1[9];
      if (typeof t3 !== "number")
        return t3.$shl();
      B.JSArray_methods.$indexSet(t1, 7, (t4 | t3 << 5) & 65535);
      t3 = t1[0];
      t4 = _this._pad;
      t2 = t4[0];
      if (typeof t3 !== "number")
        return t3.$add();
      f = t3 + t2;
      B.JSArray_methods.$indexSet(t1, 0, f & 65535);
      for (i = 1; i < 8; ++i) {
        t2 = t1[i];
        t3 = t4[i];
        if (typeof t2 !== "number")
          return t2.$add();
        f = (((t2 + t3 | 0) >>> 0) + B.JSInt_methods._shrOtherPositive$1(f, 16) | 0) >>> 0;
        B.JSArray_methods.$indexSet(t1, i, f & 65535);
      }
      for (i = 0; i < 8; ++i) {
        t2 = t1[i];
        t3 = i * 2;
        B.JSArray_methods.$indexSet(mac, t3, t2 & 255);
        B.JSArray_methods.$indexSet(mac, t3 + 1, B.JSInt_methods._shrOtherPositive$1(t2, 8) & 255);
      }
      _this._poly1305$_finished = true;
      return _this;
    },
    update$1(data) {
      var bytes, t1, want, i, t2, t3, mpos, _this = this;
      type$.List_int._as(data);
      bytes = data.length;
      t1 = _this._leftover;
      if (t1 !== 0) {
        want = 16 - t1;
        if (want > bytes)
          want = bytes;
        for (t1 = _this._poly1305$_buffer, i = 0; i < want; ++i) {
          t2 = _this._leftover;
          if (!(i < data.length))
            return A.ioore(data, i);
          t3 = data[i];
          if (typeof t3 !== "number")
            return t3.$and();
          B.JSArray_methods.$indexSet(t1, t2 + i, t3 & 255);
        }
        bytes -= want;
        t2 = _this._leftover += want;
        if (t2 < 16)
          return _this;
        _this._blocks$3(t1, 0, 16);
        _this._leftover = 0;
        mpos = want;
      } else
        mpos = 0;
      if (bytes >= 16) {
        want = bytes - B.JSInt_methods.$mod(bytes, 16);
        _this._blocks$3(data, mpos, want);
        mpos += want;
        bytes -= want;
      }
      if (bytes > 0) {
        for (t1 = _this._poly1305$_buffer, i = 0; i < bytes; ++i) {
          t2 = _this._leftover;
          t3 = mpos + i;
          if (!(t3 >= 0 && t3 < data.length))
            return A.ioore(data, t3);
          t3 = data[t3];
          if (typeof t3 !== "number")
            return t3.$and();
          B.JSArray_methods.$indexSet(t1, t2 + i, t3 & 255);
        }
        _this._leftover += bytes;
      }
      return _this;
    }
  };
  A.FortunaPRNG.prototype = {
    get$_key() {
      var result,
        value = this.__FortunaPRNG__key_FI;
      if (value === $) {
        result = A.List_List$filled(32, 0, false, type$.int);
        this.__FortunaPRNG__key_FI !== $ && A.throwLateFieldADI("_key");
        this.set$__FortunaPRNG__key_FI(result);
        value = result;
      }
      return value;
    },
    get$_counter() {
      var result,
        value = this.__FortunaPRNG__counter_FI;
      if (value === $) {
        result = A.List_List$filled(16, 0, false, type$.int);
        this.__FortunaPRNG__counter_FI !== $ && A.throwLateFieldADI("_counter");
        this.set$__FortunaPRNG__counter_FI(result);
        value = result;
      }
      return value;
    },
    _generateBlocks$2(out, n) {
      var t2, tempBlock, t3, i, t4, t5, t6, ctr, newKey, _this = this,
        t1 = type$.List_int;
      t1._as(out);
      if (n === 0)
        return;
      if (n > 65536)
        throw A.wrapException(B.MessageException_Zgr);
      t2 = type$.int;
      tempBlock = A.List_List$filled(32, 0, false, t2);
      for (t3 = _this._zeroBlock, i = 0; i < n; ++i) {
        t4 = _this.get$_counter();
        t5 = _this.get$_key();
        t1._as(t4);
        t1._as(t3);
        t1._as(t5);
        t1._as(tempBlock);
        t6 = new A.AES();
        t6.__AES__keyLen_A = 32;
        t6.setKey$2(t5, false);
        ctr = new A.CTR();
        ctr.set$__CTR__counter_F(t1._as(A.List_List$filled(16, 0, false, t2)));
        t5 = t1._as(A.List_List$filled(16, 0, false, t2));
        ctr.__CTR__buffer_F !== $ && A.throwLateFieldAI("_buffer");
        ctr.set$__CTR__buffer_F(t5);
        ctr.setCipher$2(t6, t3);
        ctr.streamXOR$2(t4, tempBlock);
        t4 = i * 16;
        B.JSArray_methods.setRange$3(out, t4, t4 + 16, tempBlock);
        _this._count$0();
      }
      newKey = A.List_List$filled(32, 0, false, t2);
      t2 = _this.get$_counter();
      t4 = _this.get$_key();
      t1._as(t2);
      t1._as(t3);
      t1._as(t4);
      t1._as(tempBlock);
      A.CTR$(A.AES$(t4), t3).streamXOR$2(t2, tempBlock);
      B.JSArray_methods.setRange$3(newKey, 0, 16, tempBlock);
      _this._count$0();
      t2 = _this.get$_counter();
      t4 = _this.get$_key();
      t1._as(t2);
      A.CTR$(A.AES$(t1._as(t4)), t3).streamXOR$2(t2, tempBlock);
      B.JSArray_methods.setRange$3(newKey, 16, 32, tempBlock);
      _this._count$0();
      B.JSArray_methods.setAll$2(_this.get$_key(), 0, newKey);
    },
    _count$0() {
      var i, t1;
      for (i = 0; this.get$_counter(), i < 16; ++i) {
        t1 = this.get$_counter();
        B.JSArray_methods.$indexSet(t1, i, t1[i] + 1);
      }
    },
    nextBytes$1($length) {
      var t2, i, t3, out0, _this = this,
        t1 = type$.int,
        out = A.List_List$filled($length, 0, false, t1);
      for (t2 = _this._out, i = 0; i < $length; ++i) {
        t3 = _this._c;
        if (t3 === 16) {
          out0 = A.List_List$filled(16, 0, false, t1);
          _this._generateBlocks$2(out0, 1);
          B.JSArray_methods.setAll$2(t2, 0, out0);
          t3 = _this._c = 0;
        }
        _this._c = t3 + 1;
        if (!(t3 < 16))
          return A.ioore(t2, t3);
        B.JSArray_methods.$indexSet(out, i, t2[t3]);
      }
      return out;
    },
    get$nextUint32() {
      var t2, t3, t4, t5, t6, _this = this,
        t1 = _this._c;
      if (t1 + 4 > 16) {
        _this._generateBlocks$2(_this._out, 1);
        t1 = _this._c = 0;
      }
      t2 = _this._out;
      if (!(t1 < 16))
        return A.ioore(t2, t1);
      t3 = t2[t1];
      if (typeof t3 !== "number")
        return t3.$shl();
      t4 = t1 + 1;
      if (!(t4 < 16))
        return A.ioore(t2, t4);
      t4 = t2[t4];
      if (typeof t4 !== "number")
        return t4.$shl();
      t5 = t1 + 2;
      if (!(t5 < 16))
        return A.ioore(t2, t5);
      t5 = t2[t5];
      if (typeof t5 !== "number")
        return t5.$shl();
      t6 = t1 + 3;
      if (!(t6 < 16))
        return A.ioore(t2, t6);
      t6 = t2[t6];
      if (typeof t6 !== "number")
        return A.iae(t6);
      _this._c = t1 + 4;
      return (t3 << 24 | t4 << 16 | t5 << 8 | t6) >>> 0;
    },
    nextInt$1(max) {
      if (max <= 0)
        throw A.wrapException(A.ArgumentError$("max must be greater than 0", null));
      return B.JSNumber_methods.floor$0(this.get$nextUint32() / 4294967296 * max);
    },
    set$__FortunaPRNG__key_FI(__FortunaPRNG__key_FI) {
      this.__FortunaPRNG__key_FI = type$.List_int._as(__FortunaPRNG__key_FI);
    },
    set$__FortunaPRNG__counter_FI(__FortunaPRNG__counter_FI) {
      this.__FortunaPRNG__counter_FI = type$.List_int._as(__FortunaPRNG__counter_FI);
    }
  };
  A.GammaDistribution.prototype = {
    nextDouble$0() {
      if (this.shape < 1)
        return this._gammaLessThanOne$0();
      else
        return this._gammaGreaterThanEqualOne$0();
    },
    _gammaLessThanOne$0() {
      var x, v, u, _this = this,
        d = _this.shape + 0.3333333333333333 - 1,
        c = 1 / Math.sqrt(9 * d);
      for (; true;) {
        x = _this._nextGaussian$0();
        v = Math.pow(1 + c * x, 3);
        u = $.$get$QuickCrypto_prng().get$nextUint32() / 4294967296;
        if (u < 1 - 0.0331 * Math.pow(x, 4))
          return _this.scale * d * v;
        if (Math.log(u) < 0.5 * Math.pow(x, 2) + d * (1 - v + Math.log(v)))
          return _this.scale * d * v;
      }
    },
    _gammaGreaterThanEqualOne$0() {
      var x, v, u, _this = this,
        d = _this.shape - 0.3333333333333333,
        c = 1 / Math.sqrt(9 * d);
      for (; true;) {
        x = _this._nextGaussian$0();
        v = Math.pow(1 + c * x, 3);
        u = _this._nextGaussian$0();
        if (u < 1 - 0.0331 * Math.pow(x, 4))
          return _this.scale * d * v;
        if (Math.log(u) < 0.5 * Math.pow(x, 2) + d * (1 - v + Math.log(v)))
          return _this.scale * d * v;
      }
    },
    _nextGaussian$0() {
      var t1 = $.$get$QuickCrypto_prng(),
        t2 = t1.get$nextUint32();
      t1 = t1.get$nextUint32();
      return Math.sqrt(-2 * Math.log(t2 / 4294967296)) * Math.cos(6.283185307179586 * (t1 / 4294967296));
    }
  };
  A.ExpansionMode.prototype = {
    _enumToString$0() {
      return "ExpansionMode." + this._core$_name;
    }
  };
  A.SchnorrkelMiniSecretKey.prototype = {
    toSecretKey$1(mode) {
      var toHash, key, t1, script, nonce;
      if (mode === B.ExpansionMode_1) {
        toHash = A.SHA512_hash(A.List_List$from(this._keys$_bytes, true, type$.int));
        key = B.JSArray_methods.sublist$2(toHash, 0, 32);
        if (0 >= key.length)
          return A.ioore(key, 0);
        t1 = key[0];
        if (typeof t1 !== "number")
          return t1.$and();
        B.JSArray_methods.$indexSet(key, 0, t1 & 248);
        if (31 >= key.length)
          return A.ioore(key, 31);
        t1 = key[31];
        if (typeof t1 !== "number")
          return t1.$and();
        B.JSArray_methods.$indexSet(key, 31, t1 & 63);
        if (31 >= key.length)
          return A.ioore(key, 31);
        t1 = key[31];
        if (typeof t1 !== "number")
          return t1.$or();
        B.JSArray_methods.$indexSet(key, 31, (t1 | 64) >>> 0);
        return A.SchnorrkelSecretKey_SchnorrkelSecretKey(A._KeyUtils_divideScalarByCofactor(key), B.JSArray_methods.sublist$1(toHash, 32));
      }
      script = A.MerlinTranscript_MerlinTranscript("ExpandSecretKeys");
      script.additionalData$2(new A.CodeUnits("mini"), A.List_List$from(this._keys$_bytes, true, type$.int));
      key = A.Ed25519Utils_scalarReduce(script.toBytes$2(type$.List_int._as(new A.CodeUnits("sk")), 64));
      nonce = script.toBytes$2(new A.CodeUnits("no"), 32);
      return A.SchnorrkelSecretKey_SchnorrkelSecretKey(B.JSArray_methods.sublist$2(key, 0, 32), B.JSArray_methods.sublist$2(nonce, 0, 32));
    },
    toSecretKey$0() {
      return this.toSecretKey$1(B.ExpansionMode_1);
    }
  };
  A.SchnorrkelSecretKey.prototype = {
    toBytes$0() {
      var t1 = A.List_List$of(this._keys$_key, true, type$.dynamic);
      B.JSArray_methods.addAll$1(t1, this._nonce);
      return A.List_List$from(t1, true, type$.int);
    },
    publicKey$0() {
      var tobig = A.BigintUtils_fromBytes(A.List_List$from(this._keys$_key, true, type$.int), B.C_Endian0, false);
      return A.SchnorrkelPublicKey_SchnorrkelPublicKey(A.RistrettoPoint_RistrettoPoint$fromEdwardsPoint($.$get$Curves_generatorED25519().$mul(0, tobig)).toBytes$0());
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.SchnorrkelSecretKey))
        return false;
      return A.BytesUtils_bytesEqual(this._keys$_key, other._keys$_key);
    },
    get$hashCode(_) {
      return J.get$hashCode$(B.JSArray_methods.fold$1$2(this._keys$_key, 0, new A.SchnorrkelSecretKey_hashCode_closure(), type$.int));
    }
  };
  A.SchnorrkelSecretKey_hashCode_closure.prototype = {
    call$2(c, p) {
      A._asInt(c);
      return (A._asInt(p) ^ c) >>> 0;
    },
    $signature: 15
  };
  A.SchnorrkelPublicKey.prototype = {
    _deriveScalarAndChainCode$2(chainCode, message) {
      var script, t2, t3,
        t1 = type$.List_int;
      t1._as(chainCode);
      script = A.MerlinTranscript_MerlinTranscript("SchnorrRistrettoHDKD");
      t2 = type$.int;
      t3 = J.JSArray_JSArray$fixed(0, t2);
      script.additionalData$2(new A.CodeUnits("sign-bytes"), t3);
      script.additionalData$2(new A.CodeUnits("chain-code"), chainCode);
      script.additionalData$2(new A.CodeUnits("public-key"), A.List_List$from(this._keys$_publicKey, true, t2));
      return new A.Tuple(A.Ed25519Utils_scalarReduce(script.toBytes$2(t1._as(new A.CodeUnits("HDKD-scalar")), 64)), script.toBytes$2(new A.CodeUnits("HDKD-chaincode"), 32), type$.Tuple_of_List_int_and_List_int);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.SchnorrkelPublicKey))
        return false;
      return A.BytesUtils_bytesEqual(this._keys$_publicKey, other._keys$_publicKey);
    },
    get$hashCode(_) {
      return J.get$hashCode$(B.JSArray_methods.fold$1$2(this._keys$_publicKey, 0, new A.SchnorrkelPublicKey_hashCode_closure(), type$.int));
    }
  };
  A.SchnorrkelPublicKey_hashCode_closure.prototype = {
    call$2(c, p) {
      A._asInt(c);
      return (A._asInt(p) ^ c) >>> 0;
    },
    $signature: 15
  };
  A.SchnorrkelSignature.prototype = {
    toBytes$0() {
      var inBytes,
        t1 = A.List_List$of(this._keys$_r, true, type$.dynamic);
      B.JSArray_methods.addAll$1(t1, this._s);
      inBytes = A.List_List$from(t1, true, type$.int);
      if (63 >= inBytes.length)
        return A.ioore(inBytes, 63);
      t1 = inBytes[63];
      if (typeof t1 !== "number")
        return t1.$or();
      B.JSArray_methods.$indexSet(inBytes, 63, (t1 | 128) >>> 0);
      return inBytes;
    }
  };
  A.MerlinTranscript.prototype = {
    additionalData$2(label, message) {
      var t2, size, t3,
        t1 = type$.List_int;
      t1._as(label);
      t1._as(message);
      t2 = type$.int;
      size = A.List_List$filled(4, 0, false, t2);
      A.writeUint32LE(J.get$length$asx(message), size, 0);
      t2 = A.List_List$of(label, true, t2);
      B.JSArray_methods.addAll$1(t2, size);
      t3 = this.strobe;
      t3.operate$5(true, B.StrobeOperation_2, t1._as(t2), 0, false);
      t3.operate$5(false, B.StrobeOperation_2, message, 0, false);
    },
    toBytes$2(label, outLen) {
      var t2, len, t3, t4,
        t1 = type$.List_int;
      t1._as(label);
      t2 = type$.int;
      len = A.List_List$filled(4, 0, false, t2);
      A.writeUint32LE(outLen, len, 0);
      t3 = A.List_List$of(label, true, t2);
      B.JSArray_methods.addAll$1(t3, len);
      t4 = this.strobe;
      t4.operate$5(true, B.StrobeOperation_2, t1._as(t3), 0, false);
      t1 = J.JSArray_JSArray$fixed(0, t2);
      return A.BytesUtils_toBytes(t4.operate$5(false, B.StrobeOperation_7, t1, outLen, false), false);
    }
  };
  A.StrobeOperation.prototype = {
    get$value() {
      return this.value;
    }
  };
  A.Strobe.prototype = {
    _run$0() {
      var t1, zerosStart, t2, i, t3, t4, _this = this;
      if (_this._initialized) {
        t1 = _this._strobe$_buffer;
        if (t1.length > _this.strober)
          throw A.wrapException(B.MessageException_Zgr0);
        B.JSArray_methods.add$1(t1, _this._posBegin);
        B.JSArray_methods.add$1(_this._strobe$_buffer, 4);
        t1 = _this._st;
        B.JSArray_methods.setAll$2(t1, 0, _this._strobe$_buffer);
        zerosStart = _this._strobe$_buffer.length;
        t2 = _this.rate;
        _this.set$_strobe$_buffer(B.JSArray_methods.sublist$2(t1, 0, t2));
        for (i = zerosStart; i < t2; ++i)
          B.JSArray_methods.$indexSet(_this._strobe$_buffer, i, 0);
        t3 = _this._strobe$_buffer;
        --t2;
        if (!(t2 >= 0 && t2 < t3.length))
          return A.ioore(t3, t2);
        t4 = t3[t2];
        if (typeof t4 !== "number")
          return t4.$xor();
        B.JSArray_methods.$indexSet(t3, t2, (t4 ^ 128) >>> 0);
        B.JSArray_methods.setAll$2(t1, 0, _this._strobe$_buffer);
        _this._xor$2(_this._strobe$_state, _this._strobe$_buffer);
      } else {
        i = _this._strobe$_buffer.length;
        if (i !== 0) {
          t1 = _this.rate;
          _this.set$_strobe$_buffer(B.JSArray_methods.sublist$2(_this._st, 0, t1));
          for (; i < t1; ++i)
            B.JSArray_methods.$indexSet(_this._strobe$_buffer, i, 0);
          _this._xor$2(_this._strobe$_state, _this._strobe$_buffer);
        }
      }
      t1 = type$.int;
      A._keccakf(A.List_List$filled(25, 0, false, t1), A.List_List$filled(25, 0, false, t1), _this._strobe$_state);
      B.JSArray_methods.clear$0(_this._strobe$_buffer);
      _this._posBegin = 0;
    },
    _duplex$4(data, cbefore, cafter, forceF) {
      var t1, t2, t3, t4, todo, todo0, idx, t5, t6, _this = this;
      type$.List_int._as(data);
      for (t1 = _this.strober, t2 = _this._st, t3 = _this._strobe$_state, t4 = t3.length; todo = data.length, todo !== 0;) {
        todo0 = t1 - _this._strobe$_buffer.length;
        todo = todo0 > todo ? todo : todo0;
        if (cbefore)
          for (idx = 0; idx < todo; ++idx) {
            if (!(idx < data.length))
              return A.ioore(data, idx);
            t5 = data[idx];
            t6 = _this._strobe$_buffer.length + idx;
            if (!(t6 < t4))
              return A.ioore(t3, t6);
            t6 = t3[t6];
            if (typeof t5 !== "number")
              return t5.$xor();
            if (typeof t6 !== "number")
              return A.iae(t6);
            B.JSArray_methods.$indexSet(data, idx, (t5 ^ t6) >>> 0);
          }
        B.JSArray_methods.addAll$1(_this._strobe$_buffer, B.JSArray_methods.sublist$2(data, 0, todo));
        B.JSArray_methods.setAll$2(t2, 0, _this._strobe$_buffer);
        if (cafter)
          for (idx = 0; idx < todo; ++idx) {
            if (!(idx < data.length))
              return A.ioore(data, idx);
            t5 = data[idx];
            t6 = _this._strobe$_buffer.length - todo + idx;
            if (!(t6 >= 0 && t6 < t4))
              return A.ioore(t3, t6);
            t6 = t3[t6];
            if (typeof t5 !== "number")
              return t5.$xor();
            if (typeof t6 !== "number")
              return A.iae(t6);
            B.JSArray_methods.$indexSet(data, idx, (t5 ^ t6) >>> 0);
          }
        data = B.JSArray_methods.sublist$1(data, todo);
        if (_this._strobe$_buffer.length === t1)
          _this._run$0();
      }
      if (forceF && _this._strobe$_buffer.length !== 0)
        _this._run$0();
    },
    _xor$2(state, b) {
      var i, t2, t3,
        t1 = type$.List_int;
      t1._as(state);
      t1._as(b);
      for (t1 = state.length, i = 0; i < b.length; ++i) {
        if (!(i < t1))
          return A.ioore(state, i);
        t2 = state[i];
        t3 = b[i];
        if (typeof t2 !== "number")
          return t2.$xor();
        if (typeof t3 !== "number")
          return A.iae(t3);
        B.JSArray_methods.$indexSet(state, i, (t2 ^ t3) & 255);
      }
    },
    operate$5(meta, operation, dataConst, $length, more) {
      var flags, t1, data, t2, flags0, oldBegin, cAfter, failures, _i, dataByte, _this = this;
      type$.List_int._as(dataConst);
      flags = operation.value;
      if (meta)
        flags |= 16;
      t1 = flags & 9;
      if (t1 !== 9 && (flags & 3) !== 2) {
        if ($length === 0)
          throw A.wrapException(B.MessageException_6ln);
        data = A.List_List$filled($length, 0, false, type$.int);
      } else {
        if ($length !== 0)
          throw A.wrapException(B.MessageException_5YB);
        data = A.List_List$from(dataConst, true, type$.int);
      }
      if ((flags & 8) !== 0) {
        t2 = _this._io;
        flags0 = flags ^ (t2 === 2 ? _this._io = flags & 1 : t2);
      } else
        flags0 = flags;
      oldBegin = _this._posBegin;
      _this._posBegin = _this._strobe$_buffer.length + 1 & 255;
      _this._duplex$4(A.List_List$from([oldBegin, flags0], true, type$.int), false, false, (flags0 & 36) !== 0);
      _this._curFlags = flags;
      cAfter = (flags & 13) === 12;
      _this._duplex$4(data, (flags & 4) !== 0 && !cAfter, cAfter, false);
      if ((flags & 3) === 3)
        return data;
      else if (t1 === 8)
        return data;
      else if ((flags & 11) === 9) {
        for (t1 = data.length, failures = 0, _i = 0; _i < t1; ++_i) {
          dataByte = data[_i];
          if (typeof dataByte !== "number")
            return A.iae(dataByte);
          failures = (failures | dataByte) >>> 0;
        }
        return A.List_List$from([failures], true, type$.int);
      }
      t1 = J.JSArray_JSArray$fixed(0, type$.int);
      return t1;
    },
    set$_strobe$_buffer(_buffer) {
      this._strobe$_buffer = type$.List_int._as(_buffer);
    }
  };
  A.Scrypt.prototype = {
    derive$3(password, salt, dkLen) {
      var t2, $B, t3, i, index, copy, t4, t5, result, _this = this,
        t1 = type$.List_int;
      t1._as(password);
      t1._as(salt);
      t1 = _this.__Scrypt_p_F;
      t1 === $ && A.throwLateFieldNI("p");
      t2 = _this.__Scrypt_r_F;
      t2 === $ && A.throwLateFieldNI("r");
      $B = A.PBKDF2_deriveKey(1, t1 * 128 * t2, new A.Scrypt_derive_closure(password), salt);
      for (t3 = _this.__Scrypt_n_F, i = 0; i < t1; ++i) {
        index = i * 128 * t2;
        copy = B.JSArray_methods.sublist$1($B, index);
        t3 === $ && A.throwLateFieldNI("n");
        t4 = _this.__Scrypt__v_F;
        t4 === $ && A.throwLateFieldNI("_v");
        t5 = _this.__Scrypt__xy_F;
        t5 === $ && A.throwLateFieldNI("_xy");
        A.Scrypt__smix(copy, t2, t3, t4, t5);
        B.JSArray_methods.setAll$2($B, index, copy);
      }
      result = A.PBKDF2_deriveKey(1, dkLen, new A.Scrypt_derive_closure0(password), $B);
      A.zero($B);
      return result;
    },
    set$__Scrypt__xy_F(__Scrypt__xy_F) {
      this.__Scrypt__xy_F = type$.List_int._as(__Scrypt__xy_F);
    },
    set$__Scrypt__v_F(__Scrypt__v_F) {
      this.__Scrypt__v_F = type$.List_int._as(__Scrypt__v_F);
    }
  };
  A.Scrypt_derive_closure.prototype = {
    call$0() {
      return A.HMAC$(new A.Scrypt_derive__closure0(), this.password);
    },
    $signature: 25
  };
  A.Scrypt_derive__closure0.prototype = {
    call$0() {
      return A.SHA256$();
    },
    $signature: 14
  };
  A.Scrypt_derive_closure0.prototype = {
    call$0() {
      return A.HMAC$(new A.Scrypt_derive__closure(), this.password);
    },
    $signature: 25
  };
  A.Scrypt_derive__closure.prototype = {
    call$0() {
      return A.SHA256$();
    },
    $signature: 14
  };
  A.QuickCrypto_pbkdf2DeriveKey_closure.prototype = {
    call$0() {
      return A.SHA512$();
    },
    $signature: 11
  };
  A.QuickCrypto_pbkdf2DeriveKey_closure0.prototype = {
    call$0() {
      return A.HMAC$(this.hashing, this.password);
    },
    $signature: 25
  };
  A.QuickCrypto_hmacsha256Hash_closure.prototype = {
    call$0() {
      return A.SHA256$();
    },
    $signature: 14
  };
  A.QuickCrypto_hmacSha512Hash_closure.prototype = {
    call$0() {
      return A.SHA512$();
    },
    $signature: 11
  };
  A.QuickCrypto__generateRandom_closure.prototype = {
    call$1($length) {
      return $.$get$QuickCrypto_prng().nextBytes$1($length);
    },
    $signature: 272
  };
  A.BlockchainUtilsException.prototype = {
    toString$0(_) {
      var t2, infos, _this = this,
        t1 = _this.details;
      t1 = t1 == null ? null : t1.get$entries().where$1(0, new A.BlockchainUtilsException_toString_closure());
      if (t1 == null)
        t1 = A._setArrayType([], type$.JSArray_MapEntry_String_dynamic);
      t2 = type$.String;
      infos = A.Map_Map$fromEntries(t1, t2, type$.dynamic);
      if (infos.__js_helper$_length === 0)
        return A.getRuntimeTypeOfDartObject(_this).toString$0(0) + "(" + _this.message + ")";
      t1 = infos.get$entries().map$1$1(0, new A.BlockchainUtilsException_toString_closure0(), t2).join$1(0, ", ");
      return A.getRuntimeTypeOfDartObject(_this).toString$0(0) + "(" + (_this.message + " " + t1) + ")";
    },
    $isException: 1,
    get$message() {
      return this.message;
    }
  };
  A.BlockchainUtilsException_toString_closure.prototype = {
    call$1(element) {
      return type$.MapEntry_String_dynamic._as(element).value != null;
    },
    $signature: 59
  };
  A.BlockchainUtilsException_toString_closure0.prototype = {
    call$1(e) {
      type$.MapEntry_String_dynamic._as(e);
      return A.S(e.key) + ": " + A.S(e.value);
    },
    $signature: 60
  };
  A.ArgumentException.prototype = {};
  A.MessageException.prototype = {};
  A.GenericException.prototype = {};
  A.RPCError.prototype = {
    toString$0(_) {
      var t2, infos, msg, _this = this,
        _s19_ = "RPCError: got code ",
        t1 = _this.details;
      t1 = t1 == null ? null : t1.get$entries().where$1(0, new A.RPCError_toString_closure());
      if (t1 == null)
        t1 = A._setArrayType([], type$.JSArray_MapEntry_String_dynamic);
      t2 = type$.String;
      infos = A.Map_Map$fromEntries(t1, t2, type$.dynamic);
      if (infos.__js_helper$_length === 0) {
        t1 = _this.errorCode;
        if (t1 == null)
          return "RPCError: " + _this.message;
        return _s19_ + A.S(t1) + ' with message "' + _this.message + '".';
      }
      msg = _this.message + " " + infos.get$entries().map$1$1(0, new A.RPCError_toString_closure0(), t2).join$1(0, ", ");
      t1 = _this.errorCode;
      if (t1 == null)
        return "RPCError: " + msg;
      return _s19_ + A.S(t1) + ' with message "' + msg + '".';
    }
  };
  A.RPCError_toString_closure.prototype = {
    call$1(element) {
      return type$.MapEntry_String_dynamic._as(element).value != null;
    },
    $signature: 59
  };
  A.RPCError_toString_closure0.prototype = {
    call$1(e) {
      type$.MapEntry_String_dynamic._as(e);
      return A.S(e.key) + ": " + A.S(e.value);
    },
    $signature: 60
  };
  A._Hex.prototype = {
    encode$2$lowerCase(data, lowerCase) {
      var t1, $length, result, i, byte, t2, t3;
      type$.List_int._as(data);
      A.BytesUtils_validateBytes(data, "Invalid hex bytes");
      t1 = J.getInterceptor$asx(data);
      $length = t1.get$length(data);
      result = A.List_List$filled($length * 2, "", false, type$.String);
      for (i = 0; i < $length; ++i) {
        byte = t1.$index(data, i);
        t2 = i * 2;
        t3 = B.JSInt_methods._shrOtherPositive$1(byte, 4);
        if (!(t3 < 16))
          return A.ioore(B.List_bdS, t3);
        B.JSArray_methods.$indexSet(result, t2, B.List_bdS[t3]);
        t3 = byte & 15;
        if (!(t3 < 16))
          return A.ioore(B.List_bdS, t3);
        B.JSArray_methods.$indexSet(result, t2 + 1, B.List_bdS[t3]);
      }
      return B.JSArray_methods.join$0(result);
    },
    decode$1(hex) {
      var result, haveBad, i, t2, v0, v1,
        t1 = hex.length;
      if (t1 === 0) {
        t1 = J.JSArray_JSArray$fixed(0, type$.int);
        return t1;
      }
      if ((t1 & 1) !== 0)
        throw A.wrapException(B.ArgumentException_QPy);
      result = A.List_List$filled(B.JSInt_methods._tdivFast$1(t1, 2), 0, false, type$.int);
      for (haveBad = false, i = 0; i < t1; i += 2) {
        t2 = hex.charCodeAt(i);
        v0 = t2 < 128 ? B.List_s8b[t2] : 256;
        t2 = i + 1;
        if (!(t2 < t1))
          return A.ioore(hex, t2);
        t2 = hex.charCodeAt(t2);
        v1 = t2 < 128 ? B.List_s8b[t2] : 256;
        B.JSArray_methods.$indexSet(result, B.JSInt_methods._tdivFast$1(i, 2), (v0 << 4 | v1) & 255);
        haveBad = B.JSBool_methods.$or(haveBad, B.JSBool_methods.$or(v0 === 256, v1 === 256));
      }
      if (haveBad)
        throw A.wrapException(B.ArgumentException_Kx9);
      return result;
    }
  };
  A.LayoutByteReader.prototype = {
    get$length(_) {
      return this._bytes.length;
    }
  };
  A.LayoutByteWriter.prototype = {
    get$length(_) {
      return this._byte_handler$_buffer._bytes.length;
    },
    setAll$2(_, index, bytes) {
      var t1, t2, t3;
      type$.List_int._as(bytes);
      t1 = index + bytes.length;
      if (this.growable) {
        t2 = this._byte_handler$_buffer._bytes;
        t3 = t2.length;
        if (t1 > t3)
          B.JSArray_methods.addAll$1(t2, A.List_List$filled(t1 - t3, 0, true, type$.int));
      }
      B.JSArray_methods.setAll$2(this._byte_handler$_buffer._bytes, index, bytes);
    }
  };
  A.LayoutConst_vecU8_closure.prototype = {
    call$1(data) {
      return A.LinkedHashMap_LinkedHashMap$_literal(["data", data], type$.String, type$.dynamic);
    },
    $signature: 17
  };
  A.LayoutConst_vecU8_closure0.prototype = {
    call$1(data) {
      return J.$index$asx(data, "data");
    },
    $signature: 24
  };
  A.LayoutConst_lazyEnum_closure.prototype = {
    call$2(index, variant) {
      var t1, rv;
      type$.LazyVariantModel_dynamic._as(variant);
      t1 = this.unionLayout;
      rv = new A.LazyVariantLayout(t1, variant, t1.span, variant.property);
      t1._registry.$indexSet(0, variant.index, rv);
      return rv;
    },
    $signature: 287
  };
  A.LayoutConst_lazyEnum_closure1.prototype = {
    call$1(value) {
      var t1, t2;
      type$.Map_String_dynamic._as(value);
      t1 = value.get$keys();
      t1 = t1.get$first(t1);
      t2 = value.get$values();
      t2 = A.LinkedHashMap_LinkedHashMap$_literal(["key", t1, "value", t2.get$first(t2)], type$.String, type$.dynamic);
      return t2;
    },
    $signature: 62
  };
  A.LayoutConst_lazyEnum_closure0.prototype = {
    call$1(src) {
      return type$.Map_String_dynamic._as(src);
    },
    $signature: 62
  };
  A.LayoutConst_vec_closure.prototype = {
    call$1(data) {
      return A.LinkedHashMap_LinkedHashMap$_literal(["values", data], type$.String, type$.dynamic);
    },
    $signature: 17
  };
  A.LayoutConst_vec_closure0.prototype = {
    call$1(data) {
      return type$.Map_String_dynamic._as(data).$index(0, "values");
    },
    $signature: 325
  };
  A.LayoutAction.prototype = {
    _enumToString$0() {
      return "LayoutAction." + this._core$_name;
    }
  };
  A.BaseLazyLayout.prototype = {};
  A.LazyLayout.prototype = {
    layout$3$action$remindBytes$sourceOrResult(action, remindBytes, sourceOrResult) {
      this.$ti._eval$1("1?")._as(sourceOrResult);
      return this._layout.call$1$property(this.property);
    },
    get$property() {
      return this.property;
    }
  };
  A.ConditionalLazyLayout.prototype = {
    layout$3$action$remindBytes$sourceOrResult(action, remindBytes, sourceOrResult) {
      return this._layout.call$4$action$property$remindBytes$sourceOrResult(action, this.property, remindBytes, this.$ti._eval$1("1?")._as(sourceOrResult));
    },
    get$property() {
      return this.property;
    }
  };
  A.Layout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var t1;
      A._instanceType(this)._eval$1("Layout.T?")._as(source);
      t1 = this.span;
      if (t1 < 0)
        throw A.wrapException(A.LayoutException$("Invalid layout span.", A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property, "span", t1], type$.String, type$.dynamic)));
      return t1;
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    serialize$1(source) {
      var t1, t2, encodeBytes, enc;
      A._instanceType(this)._eval$1("Layout.T")._as(source);
      t1 = this.span;
      t2 = type$.int;
      if (t1 >= 0) {
        t2 = A.List_List$filled(t1, 0, false, t2);
        encodeBytes = t2;
      } else {
        t2 = J.JSArray_JSArray$growable(0, t2);
        encodeBytes = t2;
      }
      enc = this.encode$2(source, new A.LayoutByteWriter(t1 < 0, new A.LayoutByteReader(encodeBytes)));
      return t1 > 0 ? encodeBytes : B.JSArray_methods.sublist$2(encodeBytes, 0, enc);
    },
    deserialize$1(bytes) {
      return this.decode$1(new A.LayoutByteReader(A.List_List$unmodifiable(type$.List_int._as(bytes), type$.int)));
    }
  };
  A.LayoutDecodeResult.prototype = {
    get$value() {
      return this.value;
    }
  };
  A.SequenceLayout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var t1, span, counter, decode, t2, idx, t3, _this = this;
      _this.$ti._eval$1("List<1>?")._as(source);
      t1 = _this.span;
      if (t1 >= 0)
        return t1;
      t1 = _this.count;
      span = 0;
      if (t1 instanceof A.ConstantLayout)
        counter = t1.value;
      else if (t1 instanceof A.VariantOffsetLayout) {
        bytes.toString;
        decode = t1.layout.decode$2$offset(bytes, offset);
        span = decode.consumed;
        counter = decode.value;
      } else if (t1 instanceof A.ExternalLayout) {
        bytes.toString;
        counter = A._asInt(t1.decode$2$offset(bytes, offset).value);
      } else
        counter = 0;
      t1 = _this.elementLayout;
      t2 = t1.span;
      if (t2 > 0)
        span += counter * t2;
      else
        for (t2 = source == null, idx = 0; idx < counter;) {
          t3 = t2 ? null : J.$index$asx(source, idx);
          span += t1.getSpan$3$offset$source(bytes, offset + span, t3);
          ++idx;
        }
      return span;
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    decode$2$offset(bytes, offset) {
      var decode, startOffset, count, t3, i, t4,
        t1 = this.$ti,
        decoded = A._setArrayType([], t1._eval$1("JSArray<1>")),
        t2 = this.count;
      if (t2 instanceof A.VariantOffsetLayout) {
        decode = t2.layout.decode$2$offset(bytes, offset);
        startOffset = offset + decode.consumed;
        count = decode.value;
      } else {
        count = A._asInt(t2.decode$2$offset(bytes, offset).value);
        startOffset = offset;
      }
      for (t2 = this.elementLayout, t3 = t1._precomputed1, i = 0; i < count;) {
        t4 = t3._as(t2.decode$2$offset(bytes, startOffset).value);
        B.JSArray_methods.add$1(decoded, t4);
        startOffset += t2.getSpan$3$offset$source(bytes, startOffset, t4);
        ++i;
      }
      return new A.LayoutDecodeResult(startOffset - offset, decoded, t1._eval$1("LayoutDecodeResult<List<1>>"));
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1, span;
      this.$ti._eval$1("List<1>")._as(source);
      t1 = this.count;
      if (t1 instanceof A.VariantOffsetLayout)
        span = t1.encode$3$offset(J.get$length$asx(source), writer, offset);
      else {
        if (t1 instanceof A.ExternalLayout)
          t1.encode$3$offset(J.get$length$asx(source), writer, offset);
        span = 0;
      }
      return J.fold$1$2$ax(source, span, new A.SequenceLayout_encode_closure(this, writer, offset), type$.int);
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    }
  };
  A.SequenceLayout_encode_closure.prototype = {
    call$2(span, v) {
      var t1;
      A._asInt(span);
      t1 = this.$this;
      return span + t1.elementLayout.encode$3$offset(t1.$ti._precomputed1._as(v), this.writer, this.offset + span);
    },
    $signature() {
      return this.$this.$ti._eval$1("int(int,1)");
    }
  };
  A.ConstantLayout.prototype = {
    decode$2$offset(bytes, offset) {
      return new A.LayoutDecodeResult(0, this.value, this.$ti._eval$1("LayoutDecodeResult<1>"));
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      this.$ti._precomputed1._as(source);
      return 0;
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    },
    get$value() {
      return this.value;
    }
  };
  A.CustomLayout.prototype = {
    decode$2$offset(bytes, offset) {
      var decodeBytes = this.layout.decode$2$offset(bytes, offset);
      return new A.LayoutDecodeResult(decodeBytes.consumed, this.decoder.call$1(decodeBytes.value), this.$ti._eval$1("LayoutDecodeResult<2>"));
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      return this.layout.encode$3$offset(this.encoder.call$1(this.$ti._rest[1]._as(source)), writer, offset);
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    },
    getSpan$3$offset$source(bytes, offset, source) {
      var t1;
      this.$ti._eval$1("2?")._as(source);
      t1 = source == null ? null : this.encoder.call$1(source);
      return this.layout.getSpan$3$offset$source(bytes, offset, t1);
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    }
  };
  A.LazyStructLayout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var span, e, s, t2, exception, t1 = {};
      t1.offset = offset;
      type$.nullable_Map_String_dynamic._as(source);
      t2 = this.span;
      if (t2 >= 0)
        return t2;
      span = 0;
      try {
        span = B.JSArray_methods.fold$1$2(this.fields, 0, new A.LazyStructLayout_getSpan_closure(t1, source, bytes), type$.int);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = A.LayoutException$("indeterminate span", A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property, "error", e, "stack", s], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
      return span;
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    decode$2$offset(bytes, offset) {
      var t1, t2, consumed, _i, field, layout, decode, t3, consumed0,
        result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic),
        remindBytes = bytes._bytes.length - offset;
      for (t1 = this.fields, t2 = t1.length, consumed = 0, _i = 0; _i < t2; ++_i, consumed = consumed0) {
        field = t1[_i];
        layout = field.layout$3$action$remindBytes$sourceOrResult(B.LayoutAction_2, remindBytes, result);
        field.get$property();
        decode = layout.decode$2$offset(bytes, offset);
        t3 = decode.consumed;
        consumed0 = consumed + t3;
        remindBytes -= t3;
        result.$indexSet(0, field.get$property(), decode.value);
        offset += layout.getSpan$3$offset$source(bytes, offset, result.$index(0, field.get$property()));
      }
      return new A.LayoutDecodeResult(consumed, result, type$.LayoutDecodeResult_Map_String_dynamic);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1, t2, t3, offset0, lastOffset, lastWrote, _i, field, layout, span, value, offset1;
      type$.Map_String_dynamic._as(source);
      for (t1 = this.fields, t2 = t1.length, t3 = writer._byte_handler$_buffer, offset0 = offset, lastOffset = 0, lastWrote = 0, _i = 0; _i < t2; ++_i, lastOffset = offset0, offset0 = offset1) {
        field = t1[_i];
        layout = field.layout$3$action$remindBytes$sourceOrResult(B.LayoutAction_1, 0, source);
        span = layout.span;
        lastWrote = span > 0 ? span : 0;
        if (source.containsKey$1(field.get$property())) {
          value = source.$index(0, field.get$property());
          lastWrote = layout.encode$3$offset(value, writer, offset0);
          if (span < 0)
            span = layout.getSpan$3$offset$source(t3, offset0, value);
        } else if (span < 0 || !(field instanceof A.PaddingLayout))
          throw A.wrapException(A.LayoutException$("Struct Source not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", field.get$property(), "source", source, "property", this.property], type$.String, type$.dynamic)));
        offset1 = offset0 + span;
      }
      return lastOffset + lastWrote - offset;
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    }
  };
  A.LazyStructLayout_getSpan_closure.prototype = {
    call$2(span, field) {
      var layout, lSpan, t1, t2, t3;
      A._asInt(span);
      type$.BaseLazyLayout_dynamic._as(field);
      t1 = this.source;
      layout = field.layout$3$action$remindBytes$sourceOrResult(B.LayoutAction_0, 0, t1);
      t2 = this._box_0;
      t3 = t2.offset;
      t1 = t1 == null ? null : t1.$index(0, field.get$property());
      lSpan = layout.getSpan$3$offset$source(this.bytes, t3, t1);
      t1 = t2.offset;
      t3 = lSpan;
      if (typeof t3 !== "number")
        return A.iae(t3);
      t2.offset = t1 + t3;
      t3 = lSpan;
      if (typeof t3 !== "number")
        return A.iae(t3);
      return span + t3;
    },
    $signature: 337
  };
  A.LazyVariantModel.prototype = {};
  A.LazyUnion.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var t1, vlo;
      type$.nullable_Map_String_dynamic._as(source);
      t1 = this.span;
      if (t1 >= 0)
        return t1;
      bytes.toString;
      vlo = this.getVariant$2$offset(bytes, offset);
      if (vlo == null)
        throw A.wrapException(A.LayoutException$("unable to determine span for unrecognized variant", A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property], type$.String, type$.dynamic)));
      return vlo.getSpan$3$offset$source(bytes, offset, source);
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    defaultGetSourceVariant$1(source) {
      var t1, vlo, t2, t3, _this = this;
      type$.Map_String_dynamic._as(source);
      t1 = _this.discriminator.property;
      if (source.containsKey$1(t1)) {
        vlo = _this._registry.$index(0, source.$index(0, t1));
        if (vlo != null && source.containsKey$1(vlo.property))
          return vlo;
      } else
        for (t2 = _this._registry, t3 = A.LinkedHashMapKeyIterator$(t2, t2._modifications, A._instanceType(t2)._precomputed1); t3.moveNext$0();) {
          vlo = t2.$index(0, t3.__js_helper$_current);
          if (source.containsKey$1(vlo == null ? null : vlo.property))
            return vlo;
        }
      t2 = source.get$keys();
      t3 = type$.String;
      throw A.wrapException(A.LayoutException$("unable to infer source variant", A.LinkedHashMap_LinkedHashMap$_literal(["property", _this.property, "discriminator", t1, "sources", t2.map$1$1(t2, new A.LazyUnion_defaultGetSourceVariant_closure(), t3).join$1(0, ", ")], t3, type$.dynamic)));
    },
    decode$2$offset(bytes, offset) {
      var decode,
        discr = this.discriminator.layout.decode$2$offset(bytes, offset),
        t1 = discr.value,
        clo = this._registry.$index(0, t1);
      if (clo == null)
        throw A.wrapException(A.LayoutException$("unable to determine layout.", A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property, "layout", t1], type$.String, type$.dynamic)));
      decode = clo.decode$2$offset(bytes, offset);
      return new A.LayoutDecodeResult(discr.consumed + decode.consumed, decode.value, type$.LayoutDecodeResult_Map_String_dynamic);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var vlo;
      type$.Map_String_dynamic._as(source);
      vlo = this.defaultGetSourceVariant$1(source);
      if (vlo == null)
        throw A.wrapException(A.LayoutException$("unable to determine source layout.", A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property, "source", source], type$.String, type$.dynamic)));
      return vlo.encode$3$offset(source, writer, offset);
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    },
    getVariant$2$offset(variantBytes, offset) {
      return this._registry.$index(0, this.discriminator.layout.decode$2$offset(variantBytes, offset).value);
    }
  };
  A.LazyUnion_defaultGetSourceVariant_closure.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 13
  };
  A.LazyVariantLayout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var t1, contentOffset, t2, _this = this;
      type$.nullable_Map_String_dynamic._as(source);
      t1 = _this.span;
      if (!B.JSInt_methods.get$isNegative(t1))
        return t1;
      contentOffset = _this.union.discriminator.layout.span;
      t1 = _this.layout;
      t1 = t1.layout.call$1$property(t1.property);
      t2 = source == null ? null : source.$index(0, _this.property);
      return contentOffset + t1.getSpan$3$offset$source(bytes, offset + contentOffset, t2);
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    decode$2$offset(bytes, offset) {
      var dest, t2, result, _this = this,
        t1 = _this.union;
      if (_this !== t1.getVariant$2$offset(bytes, offset))
        throw A.wrapException(A.LayoutException$("variant mismatch", A.LinkedHashMap_LinkedHashMap$_literal(["property", _this.property], type$.String, type$.dynamic)));
      dest = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      t2 = _this.layout;
      result = t2.layout.call$1$property(t2.property).decode$2$offset(bytes, offset + t1.discriminator.layout.span);
      t1 = _this.property;
      t1.toString;
      dest.$indexSet(0, t1, result.value);
      return new A.LayoutDecodeResult(result.consumed, dest, type$.LayoutDecodeResult_Map_String_dynamic);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1, t2, contentOffset, t3, t4, layout, span;
      type$.Map_String_dynamic._as(source);
      t1 = this.union;
      t2 = t1.discriminator.layout;
      contentOffset = t2.span;
      t3 = this.property;
      if (!source.containsKey$1(t3))
        throw A.wrapException(A.LayoutException$("variant lacks property", A.LinkedHashMap_LinkedHashMap$_literal(["property", t3], type$.String, type$.dynamic)));
      t4 = this.layout;
      t2.encode$3$offset(t4.index, writer, offset);
      layout = t4.layout.call$1$property(t4.property);
      t4 = offset + contentOffset;
      layout.encode$3$offset(source.$index(0, t3), writer, t4);
      span = contentOffset + layout.getSpan$3$offset$source(writer._byte_handler$_buffer, t4, source.$index(0, t3));
      t1 = t1.span;
      if (t1 >= 0 && span > t1)
        throw A.wrapException(A.LayoutException$("encoded variant overruns containing union", A.LinkedHashMap_LinkedHashMap$_literal(["property", t3], type$.String, type$.dynamic)));
      return span;
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    }
  };
  A.MapEntryLayout.prototype = {
    decode$2$offset(bytes, offset) {
      var t1 = this.keyLayout,
        key = t1.decode$2$offset(bytes, offset),
        t2 = key.value,
        value = this.valueLayout.decode$2$offset(bytes, offset + t1.getSpan$3$offset$source(bytes, offset, t2));
      return new A.LayoutDecodeResult(key.consumed + value.consumed, new A.MapEntry(t2, value.value, type$.MapEntry_dynamic_dynamic), type$.LayoutDecodeResult_MapEntry_dynamic_dynamic);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var keyBytes;
      type$.MapEntry_dynamic_dynamic._as(source);
      keyBytes = this.keyLayout.encode$3$offset(source.key, writer, offset);
      return keyBytes + this.valueLayout.encode$3$offset(source.value, writer, offset + keyBytes);
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    },
    getSpan$3$offset$source(bytes, offset, source) {
      var t1, t2, keySpan;
      type$.nullable_MapEntry_dynamic_dynamic._as(source);
      t1 = source == null;
      t2 = t1 ? null : source.key;
      keySpan = this.keyLayout.getSpan$3$offset$source(bytes, offset, t2);
      t1 = t1 ? null : source.value;
      return keySpan + this.valueLayout.getSpan$3$offset$source(bytes, offset + keySpan, t1);
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    }
  };
  A.ExternalLayout.prototype = {};
  A.ExternalOffsetLayout.prototype = {};
  A.BaseIntiger.prototype = {};
  A.IntegerLayout.prototype = {
    validate$1(value) {
      var _this = this,
        t1 = B.JSInt_methods.get$isNegative(value);
      if (t1)
        throw A.wrapException(A.LayoutException$(string$.Negati, A.LinkedHashMap_LinkedHashMap$_literal(["property", _this.property], type$.String, type$.dynamic)));
      t1 = _this.span * 8;
      if (B.JSInt_methods.get$bitLength(value) > t1)
        throw A.wrapException(A.LayoutException$(string$.Value_, A.LinkedHashMap_LinkedHashMap$_literal(["property", _this.property, "layout", A.getRuntimeTypeOfDartObject(_this).toString$0(0), "bitLength", t1, "sign", false, "value", value], type$.String, type$.dynamic)));
    },
    decode$2$offset(bytes, offset) {
      var t1 = this.span,
        data = B.JSArray_methods.sublist$2(bytes._bytes, offset, offset + t1);
      if (t1 > 4)
        return new A.LayoutDecodeResult(t1, A.BigintUtils_fromBytes(data, this.order, false).toInt$0(0), type$.LayoutDecodeResult_int);
      return new A.LayoutDecodeResult(t1, A.IntUtils_fromBytes(data, this.order, false), type$.LayoutDecodeResult_int);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1, t2;
      A._asInt(source);
      this.validate$1(source);
      t1 = this.span;
      t2 = this.order;
      writer.setAll$2(0, offset, t1 > 4 ? A.BigintUtils_toBytes(A._BigIntImpl__BigIntImpl$from(source), t1, t2) : A.IntUtils_toBytes(source, t2, t1));
      return t1;
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    }
  };
  A.BigIntLayout.prototype = {
    validate$1(value) {
      if (value._isNegative)
        throw A.wrapException(A.LayoutException$(string$.Negati, A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property], type$.String, type$.dynamic)));
      if (value.get$bitLength(0) > this.span * 8)
        throw A.wrapException(A.LayoutException$(string$.Value_, A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property], type$.String, type$.dynamic)));
    },
    decode$2$offset(bytes, offset) {
      var t1 = this.span;
      return new A.LayoutDecodeResult(t1, A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(bytes._bytes, offset, offset + t1), B.C_Endian0, false), type$.LayoutDecodeResult_BigInt);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1;
      type$.BigInt._as(source);
      this.validate$1(source);
      t1 = this.span;
      writer.setAll$2(0, offset, A.BigintUtils_toBytes(source, t1, B.C_Endian0));
      return t1;
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    }
  };
  A.UnionDiscriminatorLayout.prototype = {};
  A.UnionLayoutDiscriminatorLayout.prototype = {
    decode$2$offset(bytes, offset) {
      return this.layout.decode$2$offset(bytes, offset);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      return this.layout.encode$3$offset(A._asInt(source), writer, offset);
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    }
  };
  A.OffsetLayout.prototype = {
    isCount$0() {
      return true;
    },
    decode$2$offset(bytes, offset) {
      return this.layout.layout.decode$2$offset(bytes, offset + this.offset);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1 = this.layout;
      return t1.layout.encode$3$offset(t1.$ti._precomputed1._as(A._asInt(source)), writer, offset + this.offset);
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    }
  };
  A.OptionalLayout.prototype = {
    decode$2$offset(bytes, offset) {
      var result, t2, _this = this,
        decode = _this.discriminator.decode$2$offset(bytes, offset),
        t1 = decode.value;
      if (J.$eq$(t1, 0)) {
        t1 = _this.size;
        if (t1 == null)
          t1 = decode.consumed;
        return new A.LayoutDecodeResult(t1, null, _this.$ti._eval$1("LayoutDecodeResult<1?>"));
      }
      A.OptionalLayout__validateOption(_this.property, A._asIntQ(t1));
      t1 = decode.consumed;
      result = _this.layout.decode$2$offset(bytes, offset + t1);
      t2 = _this.size;
      t1 = t2 == null ? t1 + result.consumed : t2;
      return new A.LayoutDecodeResult(t1, result.value, _this.$ti._eval$1("LayoutDecodeResult<1?>"));
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1, encode, t2, _this = this;
      _this.$ti._eval$1("1?")._as(source);
      if (source == null) {
        t1 = _this.size;
        return t1 == null ? _this.discriminator.encode$3$offset(0, writer, offset) : t1;
      }
      t1 = _this.discriminator;
      t1.encode$3$offset(1, writer, offset);
      t1 = t1.span;
      encode = _this.layout.encode$3$offset(source, writer, offset + t1);
      t2 = _this.size;
      return t2 == null ? encode + t1 : t2;
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    },
    getSpan$3$offset$source(bytes, offset, source) {
      var t1, t2, _this = this;
      _this.$ti._eval$1("1?")._as(source);
      t1 = _this.size;
      if (t1 != null)
        return t1;
      t1 = _this.discriminator;
      bytes.toString;
      t2 = t1.decode$2$offset(bytes, offset).value;
      if (J.$eq$(t2, 0))
        return t1.span;
      A.OptionalLayout__validateOption(_this.property, A._asIntQ(t2));
      t1 = t1.span;
      return _this.layout.getSpan$3$offset$source(bytes, offset + t1, source) + t1;
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    }
  };
  A.OptionalLayout_OptionalLayout_closure.prototype = {
    call$0() {
      return null;
    },
    $signature: 343
  };
  A.PaddingLayout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      return this.layout.getSpan$3$offset$source(bytes, offset, this.$ti._eval$1("1?")._as(source));
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    decode$2$offset(bytes, offset) {
      return this.layout.decode$2$offset(bytes, offset);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      return this.layout.encode$3$offset(this.$ti._precomputed1._as(source), writer, offset);
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    }
  };
  A.RawBytesLayout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var span, t1;
      type$.nullable_List_int._as(source);
      span = this.span;
      if (span < 0) {
        t1 = type$.ExternalLayout._as(this.length);
        bytes.toString;
        span = t1.decode$2$offset(bytes, offset).value;
      }
      return span;
    },
    getSpan$2$offset(bytes, offset) {
      return this.getSpan$3$offset$source(bytes, offset, null);
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    decode$2$offset(bytes, offset) {
      var span = this.getSpan$2$offset(bytes, offset);
      return new A.LayoutDecodeResult(span, B.JSArray_methods.sublist$2(bytes._bytes, offset, offset + span), type$.LayoutDecodeResult_List_int);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var span, t1, t2, t3, _this = this;
      type$.List_int._as(source);
      span = _this.span;
      t1 = _this.length;
      t2 = t1 instanceof A.ExternalLayout;
      if (t2)
        span = J.get$length$asx(source);
      t3 = J.getInterceptor$asx(source);
      if (span !== t3.get$length(source))
        throw A.wrapException(A.LayoutException$("encode requires a source with length " + span + ".", A.LinkedHashMap_LinkedHashMap$_literal(["property", _this.property, "length", span, "sourceLength", t3.get$length(source)], type$.String, type$.dynamic)));
      if (offset + span > writer._byte_handler$_buffer._bytes.length)
        if (!writer.growable)
          throw A.wrapException(A.LayoutException$("Encoding overruns bytes", A.LinkedHashMap_LinkedHashMap$_literal(["property", _this.property], type$.String, type$.dynamic)));
      writer.setAll$2(0, offset, t3.sublist$2(source, 0, span));
      if (t2)
        t1.encode$3$offset(span, writer, offset);
      return span;
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.StructLayout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var span, s, t2, exception, t1 = {};
      t1.offset = offset;
      type$.nullable_Map_String_dynamic._as(source);
      t2 = this.span;
      if (t2 >= 0)
        return t2;
      span = 0;
      try {
        span = B.JSArray_methods.fold$1$2(this.fields, 0, new A.StructLayout_getSpan_closure(t1, bytes, source), type$.int);
      } catch (exception) {
        s = A.getTraceFromException(exception);
        t1 = A.LayoutException$("indeterminate span", A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property, "stack", s], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
      return span;
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    decode$2$offset(bytes, offset) {
      var t1, t2, consumed, _i, fd, t3, decode, consumed0,
        result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      for (t1 = this.fields, t2 = t1.length, consumed = 0, _i = 0; _i < t2; ++_i, consumed = consumed0) {
        fd = t1[_i];
        t3 = fd.property;
        if (t3 != null) {
          decode = fd.decode$2$offset(bytes, offset);
          consumed0 = consumed + decode.consumed;
          result.$indexSet(0, t3, decode.value);
        } else
          consumed0 = consumed;
        offset += fd.getSpan$3$offset$source(bytes, offset, result.$index(0, t3));
      }
      return new A.LayoutDecodeResult(consumed, result, type$.LayoutDecodeResult_Map_String_dynamic);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1, t2, t3, lastOffset, offset0, lastWrote, _i, field, span, t4, value, offset1;
      type$.Map_String_dynamic._as(source);
      for (t1 = this.fields, t2 = t1.length, t3 = writer._byte_handler$_buffer, lastOffset = offset, offset0 = lastOffset, lastWrote = 0, _i = 0; _i < t2; ++_i, lastOffset = offset0, offset0 = offset1) {
        field = t1[_i];
        span = field.span;
        t4 = field.property;
        if (source.containsKey$1(t4)) {
          value = source.$index(0, t4);
          lastWrote = field.encode$3$offset(value, writer, offset0);
          if (span < 0) {
            span = field.getSpan$3$offset$source(t3, offset0, value);
            if (span === 0 ? 1 / span < 0 : span < 0)
              throw A.wrapException(A.LayoutException$("indeterminate span.", A.LinkedHashMap_LinkedHashMap$_literal(["key", t4, "source", source, "property", this.property], type$.String, type$.dynamic)));
          }
        } else if (span < 0 || !(field instanceof A.PaddingLayout))
          throw A.wrapException(A.LayoutException$("Struct Source not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", t4, "source", source, "property", this.property], type$.String, type$.dynamic)));
        offset1 = offset0 + span;
      }
      return lastOffset + lastWrote - offset;
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    }
  };
  A.StructLayout_StructLayout_closure.prototype = {
    call$1(e) {
      type$.Layout_dynamic._as(e);
      return A.getRuntimeTypeOfDartObject(e).toString$0(0) + ": " + A.S(e.property);
    },
    $signature: 345
  };
  A.StructLayout_StructLayout_closure0.prototype = {
    call$2(span, fd) {
      return A._asInt(span) + type$.Layout_dynamic._as(fd).getSpan$1(null);
    },
    $signature: 63
  };
  A.StructLayout_getSpan_closure.prototype = {
    call$2(span, fd) {
      var fsp, t1, t2, t3;
      A._asInt(span);
      type$.Layout_dynamic._as(fd);
      t1 = this._box_0;
      t2 = t1.offset;
      t3 = this.source;
      t3 = t3 == null ? null : t3.$index(0, fd.property);
      fsp = fd.getSpan$3$offset$source(this.bytes, t2, t3);
      t3 = t1.offset;
      t2 = fsp;
      if (typeof t2 !== "number")
        return A.iae(t2);
      t1.offset = t3 + t2;
      t2 = fsp;
      if (typeof t2 !== "number")
        return A.iae(t2);
      return span + t2;
    },
    $signature: 63
  };
  A.LayoutException.prototype = {};
  A.Web3SecretStorageDefinationV3Exception.prototype = {};
  A.KDFMode.prototype = {
    _enumToString$0() {
      return "KDFMode." + this._core$_name;
    }
  };
  A.SecretWalletEncoding.prototype = {
    _enumToString$0() {
      return "SecretWalletEncoding." + this._core$_name;
    }
  };
  A.KDFParam.prototype = {};
  A.KDF2.prototype = {
    deriveKey$1(password) {
      return A.PBKDF2_deriveKey(this.iterations, this.dklen, new A.KDF2_deriveKey_closure(type$.List_int._as(password)), this.salt);
    },
    encode$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["c", this.iterations, "dklen", this.dklen, "prf", "hmac-sha256", "salt", A.BytesUtils_toHexString(this.salt, true, null)], type$.String, type$.dynamic);
    },
    cborEncode$0() {
      var t2,
        t1 = this.salt;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A._setArrayType([new A.CborIntValue(this.iterations), new A.CborIntValue(this.dklen), new A.CborStringValue("hmac-sha256"), new A.CborBytesValue(A.List_List$unmodifiable(t1, t2))], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_181, t2), new A.CborListValue(t1, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.KDFMode_1;
    }
  };
  A.KDF2_deriveKey_closure.prototype = {
    call$0() {
      return A.HMAC$(new A.KDF2_deriveKey__closure(), this.password);
    },
    $signature: 25
  };
  A.KDF2_deriveKey__closure.prototype = {
    call$0() {
      return A.SHA256$();
    },
    $signature: 14
  };
  A.KDFScrypt.prototype = {
    deriveKey$1(password) {
      var t2, t3, t4, s, t5, _this = this,
        t1 = type$.List_int;
      t1._as(password);
      t2 = _this.n;
      t3 = _this.r;
      t4 = _this.p;
      s = new A.Scrypt(t2, t3, t4);
      if (t4 <= 0)
        A.throwExpression(B.ArgumentException_IiW);
      if (t3 <= 0)
        A.throwExpression(B.ArgumentException_23h0);
      if (t2 < 1 || t2 > 2147483648)
        A.throwExpression(B.ArgumentException_yfz);
      if ((t2 & t2 - 1) >>> 0 !== 0)
        A.throwExpression(B.ArgumentException_AKW);
      if (t3 * t4 >= 1073741824 || t3 > B.JSInt_methods.$tdiv(16777216, t4) || t3 > 8388608 || t2 > B.JSInt_methods.$tdiv(16777216, t3))
        A.throwExpression(B.ArgumentException_kyk);
      t4 = type$.int;
      s.set$__Scrypt__v_F(t1._as(A.List_List$filled(32 * (t2 + 2) * t3, 0, false, t4)));
      t5 = s.__Scrypt__v_F;
      t5 === $ && A.throwLateFieldNI("_v");
      t4 = t1._as(A.List_List$filled(t5.length - 32 * t2 * t3, 0, false, t4));
      s.__Scrypt__xy_F !== $ && A.throwLateFieldAI("_xy");
      s.set$__Scrypt__xy_F(t4);
      return s.derive$3(password, _this.salt, _this.dklen);
    },
    encode$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["dklen", _this.dklen, "n", _this.n, "r", _this.r, "p", _this.p, "salt", A.BytesUtils_toHexString(_this.salt, true, null)], type$.String, type$.dynamic);
    },
    cborEncode$0() {
      var t2, _this = this,
        t1 = _this.salt;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A._setArrayType([new A.CborIntValue(_this.dklen), new A.CborIntValue(_this.n), new A.CborIntValue(_this.r), new A.CborIntValue(_this.p), new A.CborBytesValue(A.List_List$unmodifiable(t1, t2))], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180, t2), new A.CborListValue(t1, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.KDFMode_0;
    }
  };
  A.CryptoParam.prototype = {};
  A.Web3SecretStorageDefinationV3.prototype = {
    encrypt$1$encoding(encoding) {
      var t1, t2, t3, t4, t5, derived, macBytes, encryptOut, $toString, _this = this, _null = null;
      if (encoding === B.SecretWalletEncoding_2) {
        t1 = _this._crypto;
        t2 = type$.List_int;
        t3 = t2._as(_this._password);
        t2 = t2._as(_this.data);
        t4 = t1.kdf;
        t5 = type$.int;
        derived = A.List_List$unmodifiable(t4.deriveKey$1(t3), t5);
        macBytes = A.List_List$unmodifiable(B.JSArray_methods.sublist$2(derived, 16, 32), t5);
        t1 = t1.iv;
        encryptOut = A.QuickCrypto_processCtr(t2, t1, A.List_List$from(B.JSArray_methods.sublist$2(derived, 0, 16), true, t5));
        A.BytesUtils_validateListOfBytes(t1);
        t1 = A.List_List$unmodifiable(t1, t5);
        A.BytesUtils_validateListOfBytes(encryptOut);
        t2 = type$.JSArray_CborObject;
        t3 = type$.CborListValue_CborObject;
        t2 = A._setArrayType([new A.CborListValue(A._setArrayType([new A.CborStringValue("aes-128-ctr"), new A.CborBytesValue(t1), new A.CborBytesValue(A.List_List$unmodifiable(encryptOut, t5)), t4.cborEncode$0(), new A.CborStringValue(A.CryptoParam__mac(macBytes, encryptOut))], t2), true, t3), new A.CborStringValue(_this.uuid), B.CborIntValue_3], t2);
        return A.BytesUtils_toHexString(new A.CborTagValue(A.List_List$unmodifiable(B.List_200, t5), new A.CborListValue(t2, false, t3), type$.CborTagValue_CborListValue_CborObject).encode$0(), true, _null);
      }
      t1 = _this._crypto;
      t2 = type$.List_int;
      t3 = t2._as(_this._password);
      t2 = t2._as(_this.data);
      t4 = t1.kdf;
      t5 = type$.int;
      derived = A.List_List$unmodifiable(t4.deriveKey$1(t3), t5);
      macBytes = A.List_List$unmodifiable(B.JSArray_methods.sublist$2(derived, 16, 32), t5);
      t1 = t1.iv;
      encryptOut = A.QuickCrypto_processCtr(t2, t1, A.List_List$from(B.JSArray_methods.sublist$2(derived, 0, 16), true, t5));
      t5 = type$.String;
      t2 = type$.dynamic;
      $toString = A.StringUtils_fromJson(A.LinkedHashMap_LinkedHashMap$_literal(["crypto", A.LinkedHashMap_LinkedHashMap$_literal(["cipher", "aes-128-ctr", "cipherparams", A.LinkedHashMap_LinkedHashMap$_literal(["iv", A.BytesUtils_toHexString(t1, true, _null)], t5, t5), "ciphertext", A.BytesUtils_toHexString(encryptOut, true, _null), "kdf", t4.get$type()._core$_name, "kdfparams", t4.encode$0(), "mac", A.CryptoParam__mac(macBytes, encryptOut)], t5, t2), "id", _this.uuid, "version", 3], t5, t2), _null, _null, false);
      if (encoding === B.SecretWalletEncoding_1)
        return $toString;
      return A.StringUtils_decode(A.StringUtils_encode($toString, B.StringEncoding_1), false, B.StringEncoding_2);
    }
  };
  A.RequestServiceType.prototype = {
    _enumToString$0() {
      return "RequestServiceType." + this._core$_name;
    }
  };
  A.ServiceResponseType.prototype = {
    _enumToString$0() {
      return "ServiceResponseType." + this._core$_name;
    }
  };
  A.ServiceProviderUtils_parseResponse_closure.prototype = {
    call$1(e) {
      return type$.Map_dynamic_dynamic._as(e).cast$2$0(0, type$.String, type$.dynamic);
    },
    $signature: 17
  };
  A.ServiceProviderUtils_parseResponse_closure0.prototype = {
    call$1(e) {
      return type$.Map_dynamic_dynamic._as(e).cast$2$0(0, type$.String, type$.dynamic);
    },
    $signature: 17
  };
  A.BaseServiceResponse.prototype = {
    cast$1$0(_, $E) {
      var _this = this;
      A.checkTypeBound($E, type$.BaseServiceResponse_dynamic, "E", "cast");
      if (!$E._is(_this))
        throw A.wrapException(A.ArgumentException$("BaseServiceResponse casting faild.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", A.createRuntimeType(A._instanceType(_this)._precomputed1).toString$0(0), "type", _this.type._core$_name], type$.String, type$.dynamic)));
      return $E._as(_this);
    },
    getResult$1(params) {
      var t1, t2, t3, error, error0, t4, _this = this;
      switch (_this.type.index) {
        case 0:
          t1 = _this.statusCode;
          t2 = B.Map_U36O8.$index(0, t1);
          if (t2 == null)
            t2 = "Unknown Error" + (t1 === 200 ? "" : " " + t1) + ": An unexpected error occurred.";
          t3 = params.toJson$0();
          error = _this.cast$1$0(0, type$.ServiceErrorResponse_dynamic).error;
          error0 = null;
          if (t1 === 401 || t1 === 403) {
            if (!(typeof error == "string"))
              error = error0;
          } else
            error = error0;
          t4 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
          t4.$indexSet(0, "statusCode", t1);
          if (error != null)
            t4.$indexSet(0, "error", error);
          t1 = A.throwExpression(A.RPCError$(t4, null, t2, t3));
          break;
        case 1:
          t1 = _this.cast$1$0(0, A._instanceType(_this)._eval$1("ServiceSuccessRespose<1>")).response;
          break;
        default:
          t1 = null;
      }
      return t1;
    }
  };
  A.ServiceSuccessRespose.prototype = {};
  A.ServiceErrorResponse.prototype = {};
  A.BaseServiceRequestParams.prototype = {};
  A.BaseServiceRequest.prototype = {
    onResonse$1(result) {
      var t1 = A._instanceType(this);
      return t1._eval$1("BaseServiceRequest.0")._as(t1._eval$1("BaseServiceRequest.1")._as(result));
    }
  };
  A.BaseProvider.prototype = {};
  A.BitcoinSigner.prototype = {
    signBcHTransaction$1(digest) {
      var ecdsaSign = this.signingKey.signDigestDeterminstic$2$digest$hashFunc(type$.List_int._as(digest), new A.BitcoinSigner_signBcHTransaction_closure()),
        t1 = ecdsaSign.s;
      if (t1.compareTo$1(0, $.$get$ETHSignerConst_orderHalf()) > 0) {
        ecdsaSign = new A.ECDSASignature(ecdsaSign.r, $.$get$ETHSignerConst_curveOrder().$sub(0, t1));
        A.print("is comming!");
      }
      return A.BigintUtils_toDer(A._setArrayType([ecdsaSign.r, ecdsaSign.s], type$.JSArray_BigInt));
    }
  };
  A.BitcoinSigner_signBcHTransaction_closure.prototype = {
    call$0() {
      return A.SHA256$();
    },
    $signature: 14
  };
  A.BitcoinVerifier.prototype = {
    verifySchnorr$4$isTweak$tapleafScripts(message, signature, isTweak, tapleafScripts) {
      var t2, h, t3, n, $P, r, s, prime, e, sp, $R,
        t1 = type$.List_int;
      t1._as(message);
      t1._as(signature);
      if (message.length !== 32)
        throw A.wrapException(B.ArgumentException_8sg);
      t1 = signature.length;
      if (t1 !== 64 && t1 !== 65)
        throw A.wrapException(B.ArgumentException_6La);
      t1 = this.verifyKey.publicKey;
      t2 = t1.point;
      h = A.P2TRUtils_calculateTweek(t2, tapleafScripts);
      t3 = $.$get$Curves_generatorSecp256k1();
      n = t3.$mul(0, A.BigintUtils_fromBytes(h, B.C_Endian, false));
      $P = type$.ProjectiveECCPoint._as(A.P2TRUtils_liftX(t2).$add(0, n));
      r = A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(signature, 0, 32), B.C_Endian, false);
      s = A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(signature, 32, 64), B.C_Endian, false);
      prime = t3.curve.p;
      if (r.compareTo$1(0, prime) < 0) {
        t2 = t3.order;
        t2.toString;
        t2 = s.compareTo$1(0, t2) >= 0;
      } else
        t2 = true;
      if (t2)
        return false;
      t2 = A.List_List$of(B.JSArray_methods.sublist$2(signature, 0, 32), true, type$.dynamic);
      B.JSArray_methods.addAll$1(t2, A.BigintUtils_toBytes($P.get$x(), A.BigintUtils_orderLen(prime), B.C_Endian));
      B.JSArray_methods.addAll$1(t2, message);
      t2 = A.BigintUtils_fromBytes(A.P2TRUtils_taggedHash("BIP0340/challenge", A.List_List$from(t2, true, type$.int)), B.C_Endian, false);
      t3 = t3.order;
      t3.toString;
      e = t2.$mod(0, t3);
      sp = t1.generator.$mul(0, s);
      $R = sp.$add(0, $P.$mul(0, $P.get$y().get$isEven(0) ? t3.$sub(0, e) : e));
      if ($R.get$y().get$isEven(0)) {
        t1 = $R.get$x().compareTo$1(0, r);
        t1 = t1 !== 0;
      } else
        t1 = true;
      if (t1)
        return false;
      return true;
    }
  };
  A.CardanoSigner.prototype = {
    _cardano_signer$_signEdward$1(digest) {
      var t1, sig, pub;
      type$.List_int._as(digest);
      t1 = this._signingKey;
      sig = t1.sign$2(0, digest, new A.CardanoSigner__signEdward_closure());
      pub = A.Ed25519PublicKey_Ed25519PublicKey$fromBytes(A.List_List$from(t1.publicKey._encoded, true, type$.int));
      t1 = $.$get$CardanoSignerConst_ed25519Generator();
      if (!new A.CardanoVerifier(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint(t1, A.EDPoint_EDPoint$fromBytes(t1.curve, B.JSArray_methods.sublist$1(pub.get$compressed(), 1))))._verifyEddsa$2(digest, sig))
        throw A.wrapException(B.MessageException_61x);
      return sig;
    }
  };
  A.CardanoSigner_CardanoSigner$fromKeyBytes_closure.prototype = {
    call$0() {
      return A.SHA512$();
    },
    $signature: 11
  };
  A.CardanoSigner__signEdward_closure.prototype = {
    call$0() {
      return A.SHA512$();
    },
    $signature: 11
  };
  A.CardanoVerifier.prototype = {
    _verifyEddsa$2(digest, signature) {
      var t1 = type$.List_int;
      return this._eddsaPublicKey.verify$3(t1._as(digest), t1._as(signature), new A.CardanoVerifier__verifyEddsa_closure());
    }
  };
  A.CardanoVerifier__verifyEddsa_closure.prototype = {
    call$0() {
      return A.SHA512$();
    },
    $signature: 11
  };
  A.CosmosETHSecp256k1Signer.prototype = {};
  A.CosmosSecp256k1Signer.prototype = {
    _cosmos_secp256k1_signer$_signEcdsa$2$hashMessage(digest, hashMessage) {
      var hash, t2, t3, ecdsaSign, t4, t5, sigBytes, verifyingKey,
        t1 = type$.List_int;
      t1._as(digest);
      hash = A.SHA256_hash(digest);
      t2 = $.$get$ETHSignerConst_digestLength();
      if (hash.length !== t2)
        throw A.wrapException(A.ArgumentException$("invalid digest. digest length must be " + t2 + " got " + digest.length, null));
      t3 = this._cosmos_secp256k1_signer$_ecdsaSigningKey;
      ecdsaSign = t3.signDigestDeterminstic$2$digest$hashFunc(hash, new A.CosmosSecp256k1Signer__signEcdsa_closure());
      t4 = ecdsaSign.s;
      if (t4.compareTo$1(0, $.$get$ETHSignerConst_orderHalf()) > 0)
        ecdsaSign = new A.ECDSASignature(ecdsaSign.r, $.$get$ETHSignerConst_curveOrder().$sub(0, t4));
      t4 = $.$get$ETHSignerConst_secp256();
      t5 = t4.curve;
      sigBytes = ecdsaSign.toBytes$1(A.BigintUtils_orderLen(t5.p));
      verifyingKey = A.ECDSAPublicKey_ECDSAPublicKey(t4, A.ProjectiveECCPoint_ProjectiveECCPoint$fromBytes(t5, t3.privateKey.publicKey.point.toBytes$1(B.EncodeType_0), null));
      t1._as(hash);
      if (new A.ECDSAVerifyKey(verifyingKey).verify$2(A.ECDSASignature_ECDSASignature$fromBytes(t1._as(sigBytes), t4), hash))
        return ecdsaSign.toBytes$1(t2);
      throw A.wrapException(B.MessageException_61x);
    }
  };
  A.CosmosSecp256k1Signer__signEcdsa_closure.prototype = {
    call$0() {
      return A.SHA256$();
    },
    $signature: 14
  };
  A.CosmosVerifier.prototype = {};
  A.EcdsaSigningKey.prototype = {
    signDigestDeterminstic$2$digest$hashFunc(digest, hashFunc) {
      var sig, retry, k, t1, t2, t3, t4, t5, t6, t7, digestInt, k0, ks, kt, r, t8, s, exception,
        truncate = false;
      type$.List_int._as(digest);
      type$.SerializableHash_HashState_Function._as(hashFunc);
      sig = null;
      retry = 0;
      t1 = type$.BigInt;
      t2 = this.generator;
      t3 = this.privateKey;
      t4 = t3.publicKey.generator;
      t5 = t4.order;
      t6 = t2.order;
      t6.toString;
      t3 = t3.secretMultiplier;
      for (; true;) {
        k = A.RFC6979_generateK(t6, t3, hashFunc, digest, B.List_empty4, retry);
        try {
          t7 = t1._as(k);
          digestInt = A.EcdsaSigningKey__truncateAndConvertDigest(digest, t2, A._asBool(truncate));
          t5.toString;
          k0 = t7.$mod(0, t5);
          ks = k0.$add(0, t5);
          kt = ks.$add(0, t5);
          r = ks.get$bitLength(0) === t5.get$bitLength(0) ? t4.$mul(0, kt).get$x().$mod(0, t5) : t4.$mul(0, ks).get$x().$mod(0, t5);
          t7 = $.$get$_BigIntImpl_zero();
          t8 = r.compareTo$1(0, t7);
          if (t8 === 0)
            A.throwExpression(B.MessageException_j72);
          s = A.BigintUtils_inverseMod(k0, t5).$mul(0, digestInt.$add(0, t3.$mul(0, r).$mod(0, t5))).$mod(0, t5);
          t7 = s.compareTo$1(0, t7);
          if (t7 === 0)
            A.throwExpression(B.MessageException_j720);
          sig = new A.ECDSASignature(r, s);
          break;
        } catch (exception) {
          if (A.unwrapException(exception) instanceof A.StateError) {
            t7 = retry;
            if (typeof t7 !== "number")
              return t7.$add();
            retry = t7 + 1;
          } else
            throw exception;
        }
      }
      return sig;
    }
  };
  A.ECDSAVerifyKey.prototype = {
    verify$2(signature, digest) {
      var t1 = this.publicKey;
      return t1.verifies$2(A.EcdsaSigningKey__truncateAndConvertDigest(type$.List_int._as(digest), t1.generator, false), signature);
    }
  };
  A.ETHSignature.prototype = {
    toBytes$1(eip155) {
      var t1 = $.$get$ETHSignerConst_digestLength(),
        t2 = A.List_List$of(A.BigintUtils_toBytes(this.r, t1, B.C_Endian), true, type$.int);
      B.JSArray_methods.addAll$1(t2, A.BigintUtils_toBytes(this.s, t1, B.C_Endian));
      t1 = this.v;
      t2.push(!eip155 ? t1 - 27 : t1);
      return t2;
    },
    toBytes$0() {
      return this.toBytes$1(true);
    }
  };
  A.ETHSigner.prototype = {
    _evm_signer$_signEcdsa$2$hashMessage(digest, hashMessage) {
      var hash, t2, ecdsaSign, t3, t4, sigBytes, verifyingKey, recover, i,
        t1 = type$.List_int;
      t1._as(digest);
      hash = A.Keccack_hash(digest, 32);
      t2 = $.$get$ETHSignerConst_digestLength();
      if (hash.length !== t2)
        throw A.wrapException(A.ArgumentException$("invalid digest. digest length must be " + t2 + " got " + J.get$length$asx(digest), null));
      t2 = this._ecdsaSigningKey;
      ecdsaSign = t2.signDigestDeterminstic$2$digest$hashFunc(hash, new A.ETHSigner__signEcdsa_closure());
      t3 = ecdsaSign.s;
      if (t3.compareTo$1(0, $.$get$ETHSignerConst_orderHalf()) > 0)
        ecdsaSign = new A.ECDSASignature(ecdsaSign.r, $.$get$ETHSignerConst_curveOrder().$sub(0, t3));
      t3 = $.$get$ETHSignerConst_secp256();
      t4 = t3.curve;
      sigBytes = ecdsaSign.toBytes$1(A.BigintUtils_orderLen(t4.p));
      verifyingKey = A.ECDSAPublicKey_ECDSAPublicKey(t3, A.ProjectiveECCPoint_ProjectiveECCPoint$fromBytes(t4, t2.privateKey.publicKey.point.toBytes$1(B.EncodeType_0), null));
      t1._as(hash);
      sigBytes = B.JSArray_methods.sublist$2(t1._as(sigBytes), 0, 64);
      if (new A.ECDSAVerifyKey(verifyingKey).verify$2(A.ECDSASignature_ECDSASignature$fromBytes(t1._as(sigBytes), t3), hash)) {
        recover = ecdsaSign.recoverPublicKeys$2(hash, t3);
        for (t1 = verifyingKey.point, i = 0; i < 2; ++i)
          if (recover[i].point.$eq(0, t1)) {
            t1 = i + 27;
            if (t1 !== 28 && t1 !== 27)
              A.throwExpression(A.MessageException$("Invalid signature recovery id", A.LinkedHashMap_LinkedHashMap$_literal(["input", t1], type$.String, type$.dynamic)));
            return new A.ETHSignature(ecdsaSign.s, ecdsaSign.r, t1);
          }
      }
      throw A.wrapException(B.MessageException_61x);
    },
    _evm_signer$_signEcdsa$1(digest) {
      return this._evm_signer$_signEcdsa$2$hashMessage(digest, true);
    }
  };
  A.ETHSigner__signEcdsa_closure.prototype = {
    call$0() {
      return A.SHA256$();
    },
    $signature: 14
  };
  A.ETHVerifier.prototype = {};
  A.SolanaSigner.prototype = {
    _signEdward$1(digest) {
      var t1, sig, pub;
      type$.List_int._as(digest);
      t1 = this._solana_signer$_signingKey;
      sig = t1.sign$2(0, digest, new A.SolanaSigner__signEdward_closure());
      pub = A.Ed25519PublicKey_Ed25519PublicKey$fromBytes(A.List_List$from(t1.publicKey._encoded, true, type$.int));
      t1 = $.$get$SolanaSignerConst_ed25519Generator();
      if (!new A.SolanaVerifier(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint(t1, A.EDPoint_EDPoint$fromBytes(t1.curve, B.JSArray_methods.sublist$1(pub.get$compressed(), 1))))._solana_signer$_verifyEddsa$2(digest, sig))
        throw A.wrapException(B.MessageException_61x);
      return sig;
    }
  };
  A.SolanaSigner_SolanaSigner$fromKeyBytes_closure.prototype = {
    call$0() {
      return A.SHA512$();
    },
    $signature: 11
  };
  A.SolanaSigner__signEdward_closure.prototype = {
    call$0() {
      return A.SHA512$();
    },
    $signature: 11
  };
  A.SolanaVerifier.prototype = {
    _solana_signer$_verifyEddsa$2(digest, signature) {
      var t1 = type$.List_int;
      return this._solana_signer$_eddsaPublicKey.verify$3(t1._as(digest), t1._as(signature), new A.SolanaVerifier__verifyEddsa_closure());
    }
  };
  A.SolanaVerifier__verifyEddsa_closure.prototype = {
    call$0() {
      return A.SHA512$();
    },
    $signature: 11
  };
  A.SubstrateEcdsaSigner.prototype = {
    _substrate_ecdsa$_signEcdsa$2$hashMessage(digest, hashMessage) {
      var hash, t2, ecdsaSign, t3, t4, sigBytes, verifyingKey, recover, i,
        t1 = type$.List_int;
      t1._as(digest);
      hash = A.QuickCrypto_blake2b256Hash(digest);
      t2 = $.$get$ETHSignerConst_digestLength();
      if (hash.length !== t2)
        throw A.wrapException(A.ArgumentException$("invalid digest. digest length must be " + t2 + " got " + digest.length, null));
      t2 = this._substrate_ecdsa$_ecdsaSigningKey;
      ecdsaSign = t2.signDigestDeterminstic$2$digest$hashFunc(hash, new A.SubstrateEcdsaSigner__signEcdsa_closure());
      t3 = ecdsaSign.s;
      if (t3.compareTo$1(0, $.$get$ETHSignerConst_orderHalf()) > 0)
        ecdsaSign = new A.ECDSASignature(ecdsaSign.r, $.$get$ETHSignerConst_curveOrder().$sub(0, t3));
      t3 = $.$get$ETHSignerConst_secp256();
      t4 = t3.curve;
      sigBytes = ecdsaSign.toBytes$1(A.BigintUtils_orderLen(t4.p));
      verifyingKey = A.ECDSAPublicKey_ECDSAPublicKey(t3, A.ProjectiveECCPoint_ProjectiveECCPoint$fromBytes(t4, t2.privateKey.publicKey.point.toBytes$1(B.EncodeType_0), null));
      t1._as(hash);
      sigBytes = B.JSArray_methods.sublist$2(t1._as(sigBytes), 0, 64);
      if (new A.ECDSAVerifyKey(verifyingKey).verify$2(A.ECDSASignature_ECDSASignature$fromBytes(t1._as(sigBytes), t3), hash)) {
        recover = ecdsaSign.recoverPublicKeys$2(hash, t3);
        for (t1 = verifyingKey.point, i = 0; i < 2; ++i)
          if (recover[i].point.$eq(0, t1)) {
            t1 = i + 27;
            if (t1 !== 28 && t1 !== 27)
              A.throwExpression(A.MessageException$("Invalid signature recovery id", A.LinkedHashMap_LinkedHashMap$_literal(["input", t1], type$.String, type$.dynamic)));
            return new A.ETHSignature(ecdsaSign.s, ecdsaSign.r, t1);
          }
      }
      throw A.wrapException(B.MessageException_61x);
    },
    sign$1(_, digest) {
      return this._substrate_ecdsa$_signEcdsa$2$hashMessage(type$.List_int._as(digest), true).toBytes$1(false);
    },
    $isBaseSubstrateSigner: 1
  };
  A.SubstrateEcdsaSigner__signEcdsa_closure.prototype = {
    call$0() {
      return A.SHA256$();
    },
    $signature: 14
  };
  A.SubstrateEcdsaVerifier.prototype = {};
  A.SubstrateED25519Signer.prototype = {
    sign$1(_, digest) {
      return this._substrate_eddsa$_signer._signEdward$1(type$.List_int._as(digest));
    },
    $isBaseSubstrateSigner: 1
  };
  A.SubstrateSr25519Signer.prototype = {
    sign$1(_, message) {
      var signingScript, t2, t3, t4, t5, t6, t7, t8, t9, cloneScript, r, nonceRand, nonceBytes, nonceBigint, k, out, sig, kBigint,
        _s10_ = "proto-name",
        _s11_ = "Schnorr-sig",
        t1 = type$.List_int;
      t1._as(message);
      signingScript = A.MerlinTranscript_MerlinTranscript("SigningContext");
      signingScript.additionalData$2(new A.CodeUnits(""), new A.CodeUnits("substrate"));
      signingScript.additionalData$2(new A.CodeUnits("sign-bytes"), message);
      t2 = signingScript.strobe;
      t3 = t2._io;
      t4 = t2._posBegin;
      t5 = type$.int;
      t6 = A.List_List$from(t2._strobe$_buffer, true, t5);
      t7 = t2._curFlags;
      t8 = t2._initialized;
      t9 = A.List_List$from(t2._st, true, t5);
      cloneScript = new A.MerlinTranscript(A.Strobe$_(t6, t7, t8, t3, t4, t2.rate, A.List_List$from(t2._strobe$_state, true, t5), t9, t2.strober));
      t2 = this._substrate_sr25519$_signer;
      t9 = t2.publicKey$0();
      signingScript.additionalData$2(new A.CodeUnits(_s10_), new A.CodeUnits(_s11_));
      signingScript.additionalData$2(new A.CodeUnits("sign:pk"), A.List_List$from(t2.publicKey$0()._keys$_publicKey, true, t5));
      r = $.$get$QuickCrypto__generateRandom().call$1(64);
      nonceRand = r;
      if (J.get$length$asx(nonceRand) !== 64)
        A.throwExpression(B.ArgumentException_UDs);
      nonceBytes = A.Ed25519Utils_scalarReduce(nonceRand);
      nonceBigint = A.BigintUtils_fromBytes(nonceBytes, B.C_Endian0, false);
      t3 = $.$get$Curves_generatorED25519();
      r = A.RistrettoPoint_RistrettoPoint$fromEdwardsPoint(t3.$mul(0, nonceBigint));
      signingScript.additionalData$2(new A.CodeUnits("sign:R"), r.toBytes$0());
      k = A.Ed25519Utils_scalarReduce(signingScript.toBytes$2(t1._as(new A.CodeUnits("sign:c")), 64));
      t2 = A.List_List$from(t2._keys$_key, true, t5);
      out = A.List_List$filled(32, 0, false, t5);
      A.CryptoOps_scMulAdd(out, t2, k, B.List_ouN);
      sig = new A.SchnorrkelSignature(A.Ed25519Utils_add(A.BytesUtils_toBytes(out, false), nonceBytes), r.toBytes$0());
      t2 = A.SchnorrkelSignature_SchnorrkelSignature$fromBytes(t1._as(sig.toBytes$0()));
      cloneScript.additionalData$2(new A.CodeUnits(_s10_), new A.CodeUnits(_s11_));
      t9 = t9._keys$_publicKey;
      cloneScript.additionalData$2(new A.CodeUnits("sign:pk"), A.List_List$from(t9, true, t5));
      t4 = t2._keys$_r;
      cloneScript.additionalData$2(new A.CodeUnits("sign:R"), A.List_List$from(t4, true, t5));
      kBigint = A.BigintUtils_fromBytes(A.Ed25519Utils_scalarReduce(cloneScript.toBytes$2(t1._as(new A.CodeUnits("sign:c")), 64)), B.C_Endian0, false);
      if (!A.BytesUtils_bytesEqual(A.RistrettoPoint_RistrettoPoint$fromEdwardsPoint(A.RistrettoPoint_RistrettoPoint$fromEdwardsPoint(A.RistrettoPoint_RistrettoPoint$fromEdwardsPoint(A.RistrettoPoint_RistrettoPoint$fromBytes(A.List_List$from(t9, true, t5)).super$EDPoint$$negate(0)).super$EDPoint$$mul(0, kBigint)).super$EDPoint$$add(0, t3.$mul(0, A.BigintUtils_fromBytes(A.List_List$from(t2._s, true, t5), B.C_Endian0, false)))).toBytes$0(), A.List_List$from(t4, true, t5)))
        A.throwExpression(B.MessageException_61x);
      return sig.toBytes$0();
    },
    $isBaseSubstrateSigner: 1
  };
  A.SubstrateSigner.prototype = {};
  A.TronSigner.prototype = {
    _signEcdsa$2$hashMessage(digest, hashMessage) {
      var hash, t2, t3, ecdsaSign, t4, sigBytes, verifyingKey, recover, i,
        t1 = type$.List_int;
      t1._as(digest);
      hash = hashMessage ? A.SHA256_hash(digest) : digest;
      t2 = hash.length;
      t3 = $.$get$ETHSignerConst_digestLength();
      if (t2 !== t3)
        throw A.wrapException(A.ArgumentException$("invalid digest. digest length must be " + t3 + " got " + digest.length, null));
      t2 = this._tron_signer$_ecdsaSigningKey;
      ecdsaSign = t2.signDigestDeterminstic$2$digest$hashFunc(hash, new A.TronSigner__signEcdsa_closure());
      t3 = ecdsaSign.s;
      if (t3.compareTo$1(0, $.$get$ETHSignerConst_orderHalf()) > 0)
        ecdsaSign = new A.ECDSASignature(ecdsaSign.r, $.$get$ETHSignerConst_curveOrder().$sub(0, t3));
      t3 = $.$get$ETHSignerConst_secp256();
      t4 = t3.curve;
      sigBytes = ecdsaSign.toBytes$1(A.BigintUtils_orderLen(t4.p));
      verifyingKey = A.ECDSAPublicKey_ECDSAPublicKey(t3, A.ProjectiveECCPoint_ProjectiveECCPoint$fromBytes(t4, t2.privateKey.publicKey.point.toBytes$1(B.EncodeType_0), null));
      t1._as(hash);
      if (new A.ECDSAVerifyKey(verifyingKey).verify$2(A.ECDSASignature_ECDSASignature$fromBytes(t1._as(sigBytes), t3), hash)) {
        recover = ecdsaSign.recoverPublicKeys$2(hash, t3);
        for (t1 = verifyingKey.point, i = 0; i < 2; ++i)
          if (recover[i].point.$eq(0, t1)) {
            t1 = A.List_List$of(ecdsaSign.toBytes$1($.$get$ETHSignerConst_digestLength()), true, type$.int);
            t1.push(i + 27);
            return t1;
          }
      }
      throw A.wrapException(B.MessageException_61x);
    }
  };
  A.TronSigner__signEcdsa_closure.prototype = {
    call$0() {
      return A.SHA256$();
    },
    $signature: 14
  };
  A.TronVerifier.prototype = {};
  A.XrpSigner.prototype = {
    _xrp_signer$_signEdward$1(digest) {
      var sig;
      type$.List_int._as(digest);
      sig = this._xrp_signer$_signingKey.sign$2(0, digest, new A.XrpSigner__signEdward_closure());
      if (!this.toVerifyKey$0()._xrp_signer$_verifyEddsa$2(digest, sig))
        throw A.wrapException(B.MessageException_61x);
      return sig;
    },
    _xrp_signer$_signEcdsa$1(digest) {
      var hash, ecdsaSign, s, derSignature, vr, lengthR, t2, lengthS, rBytes, sIndex, sBytes,
        t1 = type$.List_int;
      t1._as(digest);
      hash = B.JSArray_methods.sublist$2(A.SHA512_hash(digest), 0, 32);
      if (hash.length !== 32)
        throw A.wrapException(A.ArgumentException$("invalid digest. digest length must be 32 got " + digest.length, null));
      ecdsaSign = this._xrp_signer$_ecdsaSigningKey.signDigestDeterminstic$2$digest$hashFunc(hash, new A.XrpSigner__signEcdsa_closure());
      s = ecdsaSign.s;
      if (s.compareTo$1(0, $.$get$_XrpSignerConst_orderHalf()) > 0)
        s = $.$get$_XrpSignerConst_curveOrder().$sub(0, s);
      derSignature = A.BigintUtils_toDer(A._setArrayType([ecdsaSign.r, s], type$.JSArray_BigInt));
      vr = this.toVerifyKey$0();
      t1._as(hash);
      t1._as(derSignature);
      t1 = derSignature.length;
      if (3 >= t1)
        return A.ioore(derSignature, 3);
      lengthR = derSignature[3];
      t2 = 5 + lengthR;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(derSignature, t2);
      lengthS = derSignature[t2];
      t2 = 4 + lengthR;
      rBytes = B.JSArray_methods.sublist$2(derSignature, 4, t2);
      sIndex = t2 + 2;
      sBytes = B.JSArray_methods.sublist$2(derSignature, sIndex, sIndex + lengthS);
      if (!vr._edsaVerifyKey.verify$2(new A.ECDSASignature(A.BigintUtils_fromBytes(rBytes, B.C_Endian, false), A.BigintUtils_fromBytes(sBytes, B.C_Endian, false)), hash))
        throw A.wrapException(B.MessageException_61x);
      return derSignature;
    },
    sign$1(_, digest) {
      type$.List_int._as(digest);
      if (this._xrp_signer$_signingKey != null)
        return this._xrp_signer$_signEdward$1(digest);
      else
        return this._xrp_signer$_signEcdsa$1(digest);
    },
    toVerifyKey$0() {
      var t1 = this._xrp_signer$_ecdsaSigningKey,
        t2 = t1 == null,
        keyBytes = t2 ? null : t1.privateKey.publicKey.point.toBytes$1(B.EncodeType_0);
      if (keyBytes == null)
        keyBytes = A.List_List$from(this._xrp_signer$_signingKey.publicKey._encoded, true, type$.int);
      return A.XrpVerifier_XrpVerifier$fromKeyBytes(keyBytes, t2 ? B.EllipticCurveTypes_ed25519 : B.EllipticCurveTypes_secp256k1);
    }
  };
  A.XrpSigner_XrpSigner$fromKeyBytes_closure.prototype = {
    call$0() {
      return A.SHA512$();
    },
    $signature: 11
  };
  A.XrpSigner__signEdward_closure.prototype = {
    call$0() {
      return A.SHA512$();
    },
    $signature: 11
  };
  A.XrpSigner__signEcdsa_closure.prototype = {
    call$0() {
      return A.SHA256$();
    },
    $signature: 14
  };
  A.XrpVerifier.prototype = {
    _xrp_signer$_verifyEddsa$2(digest, signature) {
      var t1 = type$.List_int;
      return this._xrp_signer$_eddsaPublicKey.verify$3(t1._as(digest), t1._as(signature), new A.XrpVerifier__verifyEddsa_closure());
    }
  };
  A.XrpVerifier__verifyEddsa_closure.prototype = {
    call$0() {
      return A.SHA512$();
    },
    $signature: 11
  };
  A.BytesUtils_toBytes_closure.prototype = {
    call$1(e) {
      return A._asInt(e) & 255;
    },
    $signature: 20
  };
  A.BigRational.prototype = {
    $mul(_, other) {
      return A.BigRational__reduce(this.numerator.$mul(0, other.numerator), this.denominator.$mul(0, other.denominator));
    },
    $div(_, other) {
      return A.BigRational__reduce(this.numerator.$mul(0, other.denominator), this.denominator.$mul(0, other.numerator));
    },
    toDecimal$1$digits(digits) {
      var t2, nDive, nReminder, intPart, shiftedRemainder, t3, t4, decPart, decPartStr, _this = this,
        t1 = digits == null;
      if (t1 && _this._inDecimal != null) {
        t1 = _this._inDecimal;
        t1.toString;
        return t1;
      }
      if (t1)
        digits = _this.get$scale();
      t1 = _this.numerator;
      t2 = _this.denominator;
      nDive = t1.$tdiv(0, t2);
      nReminder = t1.remainder$1(0, t2);
      intPart = (nDive._isNegative ? nDive.$negate(0) : nDive).toString$0(0);
      shiftedRemainder = A.BigRational__reduce(nReminder._isNegative ? nReminder.$negate(0) : nReminder, t2).$mul(0, new A.BigRational($.$get$BigRational__ten().pow$1(digits), $.$get$BigRational__one()));
      t3 = shiftedRemainder.numerator;
      t4 = shiftedRemainder.denominator;
      decPart = t3.$tdiv(0, t4);
      if (t1._isNegative !== t2._isNegative) {
        t1 = t1.compareTo$1(0, $.$get$BigRational__zero());
        t1 = t1 !== 0;
      } else
        t1 = false;
      if (t1)
        intPart = "-" + intPart;
      t1 = $.$get$BigRational__zero();
      t2 = decPart.compareTo$1(0, t1);
      if (t2 === 0)
        return intPart;
      decPartStr = (decPart._isNegative ? decPart.$negate(0) : decPart).toString$0(0);
      t2 = decPartStr.length;
      if (t2 < digits)
        decPartStr = B.JSString_methods.$mul("0", digits - t2) + decPartStr;
      t1 = t3.$mod(0, t4).compareTo$1(0, t1);
      if (t1 === 0)
        for (; B.JSString_methods.endsWith$1(decPartStr, "0");)
          decPartStr = B.JSString_methods.substring$2(decPartStr, 0, decPartStr.length - 1);
      if (digits < 1)
        return intPart;
      return intPart + (decPart.compareTo$1(0, $.$get$BigRational__zero()) < 0 ? "" : ".") + decPartStr;
    },
    toDecimal$0() {
      return this.toDecimal$1$digits(null);
    },
    toString$0(_) {
      var t1 = this._inDecimal;
      return t1 == null ? this._inDecimal = this.toDecimal$0() : t1;
    },
    get$scale() {
      var t1, t2, scale = 0, r = this;
      while (true) {
        t1 = r.denominator;
        t2 = t1.compareTo$1(0, $.$get$_BigIntImpl_one());
        if (!(t2 !== 0))
          break;
        ++scale;
        t2 = $.$get$BigRational_ten();
        r = A.BigRational__reduce(r.numerator.$mul(0, t2.numerator), t1.$mul(0, t2.denominator));
        if (scale >= 20)
          break;
      }
      return scale;
    },
    $eq(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = false;
      if (other instanceof A.BigRational) {
        t2 = other.denominator.compareTo$1(0, this.denominator);
        if (t2 === 0)
          t1 = other.numerator.compareTo$1(0, this.numerator) === 0;
      }
      return t1;
    },
    get$hashCode(_) {
      return this.numerator.get$hashCode(0) ^ this.denominator.get$hashCode(0);
    }
  };
  A.BigintUtils_toDer_closure.prototype = {
    call$1(bi) {
      return A.BigintUtils__encodeInteger(type$.BigInt._as(bi));
    },
    $signature: 350
  };
  A.BigintUtils_toDer_closure0.prototype = {
    call$2(sum, e) {
      return A._asInt(sum) + J.get$length$asx(type$.List_int._as(e));
    },
    $signature: 357
  };
  A.BigintUtils_toDer_closure1.prototype = {
    call$2(prev, e) {
      var t1 = type$.List_int;
      t1._as(prev);
      t1._as(e);
      t1 = A.List_List$of(prev, true, type$.int);
      B.JSArray_methods.addAll$1(t1, e);
      return t1;
    },
    $signature: 360
  };
  A.StringEncoding.prototype = {
    _enumToString$0() {
      return "StringEncoding." + this._core$_name;
    }
  };
  A.Tuple.prototype = {};
  A.UUID_generateUUIDv4_closure.prototype = {
    call$1(i) {
      var t1;
      if (i === 6)
        return this.random.nextInt$1(16) & 15 | 64;
      else {
        t1 = this.random;
        if (i === 8)
          return t1.nextInt$1(4) & 3 | 8;
        else
          return t1.nextInt$1(256);
      }
    },
    $signature: 20
  };
  A.UUID_generateUUIDv4_closure0.prototype = {
    call$1(byte) {
      return B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(A._asInt(byte), 16), 2, "0");
    },
    $signature: 64
  };
  A.UUID_fromBuffer_closure.prototype = {
    call$1(byte) {
      return B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(A._asInt(byte), 16), 2, "0");
    },
    $signature: 64
  };
  A.CanonicalizedMap.prototype = {
    $index(_, key) {
      var pair, _this = this;
      if (!_this._isValidKey$1(key))
        return null;
      pair = _this._base.$index(0, _this._canonicalize.call$1(_this.$ti._eval$1("CanonicalizedMap.K")._as(key)));
      return pair == null ? null : pair.value;
    },
    $indexSet(_, key, value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("CanonicalizedMap.K")._as(key);
      t1._eval$1("CanonicalizedMap.V")._as(value);
      if (!_this._isValidKey$1(key))
        return;
      _this._base.$indexSet(0, _this._canonicalize.call$1(key), new A.MapEntry(key, value, t1._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>")));
    },
    addAll$1(_, other) {
      this.$ti._eval$1("Map<CanonicalizedMap.K,CanonicalizedMap.V>")._as(other).forEach$1(0, new A.CanonicalizedMap_addAll_closure(this));
    },
    cast$2$0(_, K2, V2) {
      return this._base.cast$2$0(0, K2, V2);
    },
    containsKey$1(key) {
      var _this = this;
      if (!_this._isValidKey$1(key))
        return false;
      return _this._base.containsKey$1(_this._canonicalize.call$1(_this.$ti._eval$1("CanonicalizedMap.K")._as(key)));
    },
    get$entries() {
      return this._base.get$entries().map$1$1(0, new A.CanonicalizedMap_entries_closure(this), this.$ti._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>"));
    },
    forEach$1(_, f) {
      this._base.forEach$1(0, new A.CanonicalizedMap_forEach_closure(this, this.$ti._eval$1("~(CanonicalizedMap.K,CanonicalizedMap.V)")._as(f)));
    },
    get$isEmpty(_) {
      return this._base.__js_helper$_length === 0;
    },
    get$keys() {
      var t1 = this._base.get$values(),
        t2 = this.$ti._eval$1("CanonicalizedMap.K"),
        t3 = A._instanceType(t1);
      return A.MappedIterable_MappedIterable(t1, t3._bind$1(t2)._eval$1("1(Iterable.E)")._as(new A.CanonicalizedMap_keys_closure(this)), t3._eval$1("Iterable.E"), t2);
    },
    get$length(_) {
      return this._base.__js_helper$_length;
    },
    get$values() {
      var t1 = this._base.get$values(),
        t2 = this.$ti._eval$1("CanonicalizedMap.V"),
        t3 = A._instanceType(t1);
      return A.MappedIterable_MappedIterable(t1, t3._bind$1(t2)._eval$1("1(Iterable.E)")._as(new A.CanonicalizedMap_values_closure(this)), t3._eval$1("Iterable.E"), t2);
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _isValidKey$1(key) {
      return this.$ti._eval$1("CanonicalizedMap.K")._is(key);
    },
    $isMap: 1
  };
  A.CanonicalizedMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = t1.$ti;
      t2._eval$1("CanonicalizedMap.K")._as(key);
      t2._eval$1("CanonicalizedMap.V")._as(value);
      t1.$indexSet(0, key, value);
      return value;
    },
    $signature() {
      return this.$this.$ti._eval$1("~(CanonicalizedMap.K,CanonicalizedMap.V)");
    }
  };
  A.CanonicalizedMap_entries_closure.prototype = {
    call$1(e) {
      var t1 = this.$this.$ti,
        t2 = t1._eval$1("MapEntry<CanonicalizedMap.C,MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>>")._as(e).value;
      return new A.MapEntry(t2.key, t2.value, t1._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>"));
    },
    $signature() {
      return this.$this.$ti._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>(MapEntry<CanonicalizedMap.C,MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>>)");
    }
  };
  A.CanonicalizedMap_forEach_closure.prototype = {
    call$2(key, pair) {
      var t1 = this.$this.$ti;
      t1._eval$1("CanonicalizedMap.C")._as(key);
      t1._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair);
      return this.f.call$2(pair.key, pair.value);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(CanonicalizedMap.C,MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  A.CanonicalizedMap_keys_closure.prototype = {
    call$1(pair) {
      return this.$this.$ti._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair).key;
    },
    $signature() {
      return this.$this.$ti._eval$1("CanonicalizedMap.K(MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  A.CanonicalizedMap_values_closure.prototype = {
    call$1(pair) {
      return this.$this.$ti._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair).value;
    },
    $signature() {
      return this.$this.$ti._eval$1("CanonicalizedMap.V(MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  A.CosmosED25519PrivateKey.prototype = {
    sign$1(_, digest) {
      type$.List_int._as(digest);
      return A.SolanaSigner_SolanaSigner$fromKeyBytes(A.List_List$from(this._private_key$_privateKey._ed25519_keys$_privateKey.key, true, type$.int))._signEdward$1(digest);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["key", A.BytesUtils_toHexString(A.List_List$from(this._private_key$_privateKey._ed25519_keys$_privateKey.key, true, type$.int), true, "")], type$.String, type$.dynamic);
    }
  };
  A.CosmosETHSecp256K1PrivateKey.prototype = {
    sign$1(_, digest) {
      var signingKey;
      type$.List_int._as(digest);
      signingKey = A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(this._private_key0$_privateKey.privateKey.toBytes$0(), $.$get$ETHSignerConst_secp256());
      return new A.ETHSigner(new A.EcdsaSigningKey(signingKey, signingKey.publicKey.generator))._evm_signer$_signEcdsa$2$hashMessage(digest, true).toBytes$1(false);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["key", A.BytesUtils_toHexString(this._private_key0$_privateKey.privateKey.toBytes$0(), true, "")], type$.String, type$.dynamic);
    }
  };
  A.CosmosPrivateKey.prototype = {};
  A.CosmosSecp256K1PrivateKey.prototype = {
    sign$1(_, digest) {
      var signingKey;
      type$.List_int._as(digest);
      signingKey = A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(this._private_key1$_privateKey.privateKey.toBytes$0(), $.$get$ETHSignerConst_secp256());
      return new A.CosmosSecp256k1Signer(new A.EcdsaSigningKey(signingKey, signingKey.publicKey.generator))._cosmos_secp256k1_signer$_signEcdsa$2$hashMessage(digest, true);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["key", A.BytesUtils_toHexString(this._private_key1$_privateKey.privateKey.toBytes$0(), true, "")], type$.String, type$.dynamic);
    }
  };
  A.CosmosKeysAlgs.prototype = {
    _enumToString$0() {
      return "CosmosKeysAlgs." + this._core$_name;
    },
    coin$1(chain) {
      var t1, _this = this;
      $label0$0: {
        if (B.CosmosKeysAlgs_0 === _this) {
          t1 = A._setArrayType([B.Bip44Coins_cosmos, B.Bip44Coins_cosmosTestnet], type$.JSArray_Bip44Coins);
          break $label0$0;
        }
        if (B.CosmosKeysAlgs_1 === _this) {
          t1 = A._setArrayType([B.Bip44Coins_cosmosEthSecp256k1, B.Bip44Coins_cosmosTestnetEthSecp256k1], type$.JSArray_Bip44Coins);
          break $label0$0;
        }
        if (B.CosmosKeysAlgs_2 === _this) {
          t1 = A._setArrayType([B.Bip44Coins_cosmosEd25519, B.Bip44Coins_cosmosTestnetEd25519], type$.JSArray_Bip44Coins);
          break $label0$0;
        }
        if (B.CosmosKeysAlgs_3 === _this) {
          t1 = A._setArrayType([B.Bip44Coins_cosmosNist256p1, B.Bip44Coins_cosmosTestnetNist256p1], type$.JSArray_Bip44Coins);
          break $label0$0;
        }
        t1 = A.throwExpression(A.DartCosmosSdkPluginException$("key algorithm not supported.", A.LinkedHashMap_LinkedHashMap$_literal(["key", _this._core$_name], type$.String, type$.dynamic)));
      }
      return B.JSArray_methods.firstWhere$1(t1, new A.CosmosKeysAlgs_coin_closure(chain));
    }
  };
  A.CosmosKeysAlgs_coin_closure.prototype = {
    call$1(e) {
      type$.Bip44Coins._as(e);
      return $.$get$Bip44Coins__coinToConf().$index(0, e).chainType === this.chain;
    },
    $signature: 93
  };
  A.CosmosKeysAlgs_fromName_closure.prototype = {
    call$1(element) {
      return type$.CosmosKeysAlgs._as(element)._core$_name === this.name;
    },
    $signature: 362
  };
  A.CosmosKeysAlgs_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartCosmosSdkPluginException$("unknowmn key algorithm.", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 1
  };
  A.DartCosmosSdkPluginException.prototype = {};
  A.CosmosProtocolBuffer.prototype = {
    toString$0(_) {
      return A.getRuntimeTypeOfDartObject(this).toString$0(0) + this.toJson$0().toString$0(0);
    }
  };
  A.CosmosMessage.prototype = {};
  A.RetryClient.prototype = {
    send$1(request) {
      return this.send$body$RetryClient(request);
    },
    send$body$RetryClient(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.StreamedResponse),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, splitter, i, response, error, stackTrace, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, request0, t14, t15, t16, t17, t18, exception, $async$exception, $async$temp1;
      var $async$send$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              request.super$BaseRequest$finalize();
              splitter = new A.StreamSplitter(new A.ByteStream(A.Stream_Stream$value(request._bodyBytes, type$.List_int)), A._setArrayType([], type$.JSArray_Result_List_int), A.LinkedHashSet_LinkedHashSet$_empty(type$.StreamController_List_int), new A.FutureGroup(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_List_dynamic), type$._AsyncCompleter_List_dynamic), [], type$.FutureGroup_dynamic), type$.StreamSplitter_List_int);
              i = 0;
              t1 = type$._Future_void, t2 = type$.void, t3 = type$.nullable_void_Function, t4 = request.headers, t5 = type$.void_Function_List_int, t6 = $async$self._inner, t7 = type$.Stream_List_int, t8 = request.method, t9 = request.url, t10 = type$._Future_bool, t11 = type$.Future_bool, t12 = $async$self._when;
            case 3:
              // for condition
              // trivial condition
              response = null;
              $async$handler = 6;
              t13 = t7._as(J.split$0$s(splitter));
              request0 = A.StreamedRequest$(t8, t9);
              t14 = request._bodyBytes.length;
              request0._base_request$_checkFinalized$0();
              request0._contentLength = t14;
              request0._base_request$_checkFinalized$0();
              request0._followRedirects = true;
              request0.headers.addAll$1(0, t4);
              t14 = request._maxRedirects;
              request0._base_request$_checkFinalized$0();
              request0._maxRedirects = t14;
              request0._base_request$_checkFinalized$0();
              request0._persistentConnection = true;
              t14 = request0._streamed_request$_controller;
              t15 = A._instanceType(t14)._eval$1("_StreamSinkWrapper<1>");
              t16 = new A._StreamSinkWrapper(t14, t15);
              t17 = t13.$ti;
              t16 = t17._eval$1("~(1)?")._as(t5._as(t16.get$add(t16)));
              t18 = t3._as(new A._StreamSinkWrapper(t14, t15).get$close());
              t13._controller._subscribe$4(t17._eval$1("~(1)?")._as(t16), new A._StreamSinkWrapper(t14, t15).get$addError(), t18, true);
              $async$goto = 9;
              return A._asyncAwait(t6.send$1(request0), $async$send$1);
            case 9:
              // returning from await.
              response = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 8;
              break;
            case 6:
              // catch
              $async$handler = 5;
              $async$exception = $async$currentError;
              error = A.unwrapException($async$exception);
              stackTrace = A.getTraceFromException($async$exception);
              $async$goto = !J.$eq$(i, 3) ? 10 : 12;
              break;
            case 10:
              // then
              t13 = error;
              t14 = stackTrace;
              A._defaultWhenError(t13, t14);
              if (t11._is(A._defaultWhenError(t13, t14)))
                t13 = A._defaultWhenError(t13, t14);
              else {
                A._defaultWhenError(t13, t14);
                t13 = A._asBool(A._defaultWhenError(t13, t14));
                t14 = new A._Future($.Zone__current, t10);
                t14._async$_state = 8;
                t14._resultOrListeners = t13;
                t13 = t14;
              }
              $async$temp1 = A;
              $async$goto = 13;
              return A._asyncAwait(t13, $async$send$1);
            case 13:
              // returning from await.
              t13 = !$async$temp1.boolConversionCheck($async$result);
              // goto join
              $async$goto = 11;
              break;
            case 12:
              // else
              t13 = true;
            case 11:
              // join
              if (t13)
                throw $async$exception;
              // goto after finally
              $async$goto = 8;
              break;
            case 5:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 8:
              // after finally
              $async$goto = response != null ? 14 : 15;
              break;
            case 14:
              // then
              $async$goto = !J.$eq$(i, 3) ? 16 : 18;
              break;
            case 16:
              // then
              t13 = t12.call$1(response);
              if (!t11._is(t13)) {
                A._asBool(t13);
                t14 = new A._Future($.Zone__current, t10);
                t14._async$_state = 8;
                t14._resultOrListeners = t13;
                t13 = t14;
              }
              $async$temp1 = A;
              $async$goto = 19;
              return A._asyncAwait(t13, $async$send$1);
            case 19:
              // returning from await.
              t13 = !$async$temp1.boolConversionCheck($async$result);
              // goto join
              $async$goto = 17;
              break;
            case 18:
              // else
              t13 = true;
            case 17:
              // join
              if (t13) {
                $async$returnValue = response;
                // goto return
                $async$goto = 1;
                break;
              }
              t13 = response.stream;
              t13._stream.listen$4$cancelOnError$onDone$onError(A._instanceType(t13)._eval$1("~(StreamView.T)?")._as(new A.RetryClient_send_closure()), null, null, null).cancel$0().catchError$1(new A.RetryClient_send_closure0());
            case 15:
              // join
              $async$goto = 20;
              return A._asyncAwait(A.Future_Future$delayed(A._defaultDelay(i), t2), $async$send$1);
            case 20:
              // returning from await.
              t13 = new A._Future($.Zone__current, t1);
              t13._async$_state = 8;
              $async$goto = 21;
              return A._asyncAwait(t13, $async$send$1);
            case 21:
              // returning from await.
              t13 = i;
              if (typeof t13 !== "number") {
                $async$returnValue = t13.$add();
                // goto return
                $async$goto = 1;
                break;
              }
              i = t13 + 1;
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$send$1, $async$completer);
    }
  };
  A.RetryClient_send_closure.prototype = {
    call$1(_) {
      type$.List_int._as(_);
    },
    $signature: 65
  };
  A.RetryClient_send_closure0.prototype = {
    call$1(_) {
    },
    $signature: 42
  };
  A.BaseClient.prototype = {
    _sendUnstreamed$5(method, url, headers, body, encoding) {
      return this._sendUnstreamed$body$BaseClient(method, url, type$.nullable_Map_String_String._as(headers), body, encoding);
    },
    _sendUnstreamed$3(method, url, headers) {
      return this._sendUnstreamed$5(method, url, headers, null, null);
    },
    _sendUnstreamed$body$BaseClient(method, url, headers, body, encoding) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, t1, contentType, request, $async$temp1;
      var $async$_sendUnstreamed$5 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              request = A.Request$(method, url);
              if (headers != null)
                request.headers.addAll$1(0, headers);
              if (body != null)
                if (typeof body == "string")
                  request.set$body(body);
                else if (type$.List_dynamic._is(body)) {
                  t1 = type$.List_int._as(J.cast$1$0$ax(body, type$.int));
                  request._checkFinalized$0();
                  request._bodyBytes = A.toUint8List(t1);
                } else if (type$.Map_dynamic_dynamic._is(body)) {
                  t1 = type$.String;
                  t1 = type$.Map_String_String._as(body.cast$2$0(0, t1, t1));
                  contentType = request.get$_contentType();
                  if (contentType == null)
                    request.set$_contentType(A.MediaType$("application", "x-www-form-urlencoded", null));
                  else if (contentType.type + "/" + contentType.subtype !== "application/x-www-form-urlencoded")
                    A.throwExpression(A.StateError$('Cannot set the body fields of a Request with content-type "' + contentType.get$mimeType() + '".'));
                  request.set$body(A.mapToQuery(t1, request.get$encoding()));
                } else
                  throw A.wrapException(A.ArgumentError$('Invalid request body "' + A.S(body) + '".', null));
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait($async$self.send$1(request), $async$_sendUnstreamed$5);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.Response_fromStream($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_sendUnstreamed$5, $async$completer);
    },
    $isClient: 1
  };
  A.BaseRequest.prototype = {
    finalize$0() {
      if (this._finalized)
        throw A.wrapException(A.StateError$("Can't finalize a finalized Request."));
      this._finalized = true;
      return B.ByteStream__EmptyStream;
    },
    _base_request$_checkFinalized$0() {
      if (!this._finalized)
        return;
      throw A.wrapException(A.StateError$("Can't modify a finalized Request."));
    },
    toString$0(_) {
      return this.method + " " + this.url.toString$0(0);
    }
  };
  A.BaseRequest_closure.prototype = {
    call$2(key1, key2) {
      return A._asString(key1).toLowerCase() === A._asString(key2).toLowerCase();
    },
    $signature: 123
  };
  A.BaseRequest_closure0.prototype = {
    call$1(key) {
      return B.JSString_methods.get$hashCode(A._asString(key).toLowerCase());
    },
    $signature: 125
  };
  A.BaseResponse.prototype = {
    BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(statusCode, contentLength, headers, isRedirect, persistentConnection, reasonPhrase, request) {
      var t1 = this.statusCode;
      if (t1 < 100)
        throw A.wrapException(A.ArgumentError$("Invalid status code " + t1 + ".", null));
    }
  };
  A.BrowserClient.prototype = {
    send$1(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.StreamedResponse),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, xhr, completer, bytes, t1, t2, t3;
      var $async$send$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._isClosed)
                throw A.wrapException(A.ClientException$("HTTP request failed. Client is already closed.", request.url));
              $async$goto = 3;
              return A._asyncAwait(request.finalize$0().toBytes$0(), $async$send$1);
            case 3:
              // returning from await.
              bytes = $async$result;
              xhr = type$.JSObject._as(new self.XMLHttpRequest());
              t1 = $async$self._xhrs;
              t1.add$1(0, xhr);
              t2 = xhr;
              t2.open(request.method, request.url.toString$0(0), true);
              t2.responseType = "arraybuffer";
              t2.withCredentials = false;
              for (t2 = request.headers.get$entries(), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
                t3 = t2.get$current();
                xhr.setRequestHeader(t3.key, t3.value);
              }
              completer = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_StreamedResponse), type$._AsyncCompleter_StreamedResponse);
              t2 = type$._EventStream_JSObject;
              t3 = type$.void;
              new A._EventStream(xhr, "load", false, t2).get$first(0).then$1$1(new A.BrowserClient_send_closure(xhr, completer, request), t3);
              new A._EventStream(xhr, "error", false, t2).get$first(0).then$1$1(new A.BrowserClient_send_closure0(completer, request), t3);
              xhr.send(bytes);
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(completer.future, $async$send$1);
            case 7:
              // returning from await.
              t2 = $async$result;
              $async$returnValue = t2;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              t1.remove$1(0, xhr);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$send$1, $async$completer);
    },
    close$0() {
      var t1, t2, t3, t4;
      this._isClosed = true;
      for (t1 = this._xhrs, t2 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t3 = t2.$ti._precomputed1; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        if (t4 == null)
          t4 = t3._as(t4);
        t4.abort();
      }
      if (t1._collection$_length > 0) {
        t1._collection$_strings = t1._collection$_nums = t1._collection$_rest = t1._collection$_first = t1._collection$_last = null;
        t1._collection$_length = 0;
        t1._collection$_modified$0();
      }
    }
  };
  A.BrowserClient_send_closure.prototype = {
    call$1(_) {
      var t1, _0_0, t2, body, responseUrl, t3, t4, t5, t6, _this = this;
      type$.JSObject._as(_);
      t1 = _this.xhr;
      _0_0 = A._extension_0_get_responseHeaders(t1).$index(0, "content-length");
      t2 = false;
      if (_0_0 != null) {
        t2 = $.$get$_digitRegex();
        t2 = !t2._nativeRegExp.test(_0_0);
      }
      if (t2) {
        _this.completer.completeError$1(new A.ClientException("Invalid content-length header [" + A.S(_0_0) + "].", _this.request.url));
        return;
      }
      body = A.NativeUint8List_NativeUint8List$view(type$.NativeByteBuffer._as(t1.response), 0, null);
      responseUrl = A._asString(t1.responseURL);
      if (responseUrl.length !== 0)
        A.Uri_parse(responseUrl);
      t2 = A.Stream_Stream$value(body, type$.List_int);
      t3 = A._asInt(t1.status);
      t4 = body.length;
      t5 = _this.request;
      t6 = A._extension_0_get_responseHeaders(t1);
      t1 = A._asString(t1.statusText);
      t2 = new A.StreamedResponseV2(A.toByteStream(new A.ByteStream(t2)), t5, t3, t1, t4, t6, false, true);
      t2.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(t3, t4, t6, false, true, t1, t5);
      _this.completer.complete$1(t2);
    },
    $signature: 66
  };
  A.BrowserClient_send_closure0.prototype = {
    call$1(_) {
      type$.JSObject._as(_);
      this.completer.completeError$2(new A.ClientException("XMLHttpRequest error.", this.request.url), A.StackTrace_current());
    },
    $signature: 66
  };
  A.ByteStream.prototype = {
    toBytes$0() {
      var t1 = new A._Future($.Zone__current, type$._Future_Uint8List),
        completer = new A._AsyncCompleter(t1, type$._AsyncCompleter_Uint8List),
        sink = new A._ByteCallbackSink(new A.ByteStream_toBytes_closure(completer), new Uint8Array(1024));
      this.listen$4$cancelOnError$onDone$onError(type$.void_Function_List_int._as(sink.get$add(sink)), true, sink.get$close(), completer.get$completeError());
      return t1;
    }
  };
  A.ByteStream_toBytes_closure.prototype = {
    call$1(bytes) {
      return this.completer.complete$1(new Uint8Array(A._ensureNativeList(type$.List_int._as(bytes))));
    },
    $signature: 65
  };
  A.ClientException.prototype = {
    toString$0(_) {
      var t1 = this.uri.toString$0(0);
      return "ClientException: " + this.message + ", uri=" + t1;
    },
    $isException: 1
  };
  A.Request.prototype = {
    get$encoding() {
      var t1, t2, _this = this;
      if (_this.get$_contentType() == null || !_this.get$_contentType().parameters._collection$_map.containsKey$1("charset"))
        return _this._defaultEncoding;
      t1 = _this.get$_contentType().parameters._collection$_map.$index(0, "charset");
      t1.toString;
      t2 = A.Encoding_getByName(t1);
      return t2 == null ? A.throwExpression(A.FormatException$('Unsupported encoding "' + t1 + '".', null, null)) : t2;
    },
    set$body(value) {
      var contentType, _this = this,
        t1 = type$.List_int._as(_this.get$encoding().encode$1(value));
      _this._checkFinalized$0();
      _this._bodyBytes = A.toUint8List(t1);
      contentType = _this.get$_contentType();
      if (contentType == null) {
        t1 = type$.String;
        _this.set$_contentType(A.MediaType$("text", "plain", A.LinkedHashMap_LinkedHashMap$_literal(["charset", _this.get$encoding().get$name()], t1, t1)));
      } else if (!contentType.parameters._collection$_map.containsKey$1("charset")) {
        t1 = type$.String;
        _this.set$_contentType(contentType.change$1$parameters(A.LinkedHashMap_LinkedHashMap$_literal(["charset", _this.get$encoding().get$name()], t1, t1)));
      }
    },
    finalize$0() {
      this.super$BaseRequest$finalize();
      return new A.ByteStream(A.Stream_Stream$value(this._bodyBytes, type$.List_int));
    },
    get$_contentType() {
      var contentType = this.headers.$index(0, "content-type");
      if (contentType == null)
        return null;
      return A.MediaType_MediaType$parse(contentType);
    },
    set$_contentType(value) {
      this.headers.$indexSet(0, "content-type", value.toString$0(0));
    },
    _checkFinalized$0() {
      if (!this._finalized)
        return;
      throw A.wrapException(A.StateError$("Can't modify a finalized Request."));
    }
  };
  A.Response.prototype = {};
  A.StreamedRequest.prototype = {
    finalize$0() {
      this.super$BaseRequest$finalize();
      var t1 = this._streamed_request$_controller;
      return new A.ByteStream(new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>")));
    }
  };
  A.StreamedResponse.prototype = {};
  A.StreamedResponseV2.prototype = {};
  A.mapToQuery_closure.prototype = {
    call$1(e) {
      var t1;
      type$.MapEntry_String_String._as(e);
      t1 = this.encoding;
      return A._Uri__uriEncode(B.List_piR, e.key, t1, true) + "=" + A._Uri__uriEncode(B.List_piR, e.value, t1, true);
    },
    $signature: 127
  };
  A.CaseInsensitiveMap.prototype = {};
  A.CaseInsensitiveMap$from_closure.prototype = {
    call$1(key) {
      return A._asString(key).toLowerCase();
    },
    $signature: 13
  };
  A.MediaType.prototype = {
    get$mimeType() {
      return this.type + "/" + this.subtype;
    },
    change$1$parameters(parameters) {
      var t1, parameters0;
      type$.nullable_Map_String_String._as(parameters);
      t1 = type$.String;
      parameters0 = A.LinkedHashMap_LinkedHashMap$from(this.parameters, t1, t1);
      parameters0.addAll$1(0, parameters);
      return A.MediaType$(this.type, this.subtype, parameters0);
    },
    toString$0(_) {
      var buffer = new A.StringBuffer(""),
        t1 = "" + this.type;
      buffer._contents = t1;
      t1 += "/";
      buffer._contents = t1;
      buffer._contents = t1 + this.subtype;
      t1 = this.parameters;
      t1._collection$_map.forEach$1(0, t1.$ti._eval$1("~(1,2)")._as(new A.MediaType_toString_closure(buffer)));
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.MediaType_MediaType$parse_closure.prototype = {
    call$0() {
      var t3, t4, t5, t6, parameters, t7, success, t8, value,
        t1 = this.mediaType,
        scanner = new A.StringScanner(null, t1),
        t2 = $.$get$whitespace();
      scanner.scan$1(t2);
      t3 = $.$get$token();
      scanner.expect$1(t3);
      t4 = scanner.get$lastMatch().$index(0, 0);
      t4.toString;
      scanner.expect$1("/");
      scanner.expect$1(t3);
      t5 = scanner.get$lastMatch().$index(0, 0);
      t5.toString;
      scanner.scan$1(t2);
      t6 = type$.String;
      parameters = A.LinkedHashMap_LinkedHashMap$_empty(t6, t6);
      while (true) {
        t6 = scanner._lastMatch = B.JSString_methods.matchAsPrefix$2(";", t1, scanner._position);
        t7 = scanner._lastMatchPosition = scanner._position;
        success = t6 != null;
        t6 = success ? scanner._lastMatchPosition = scanner._position = t6.get$end() : t7;
        if (!success)
          break;
        t6 = scanner._lastMatch = t2.matchAsPrefix$2(0, t1, t6);
        scanner._lastMatchPosition = scanner._position;
        if (t6 != null)
          scanner._lastMatchPosition = scanner._position = t6.get$end();
        scanner.expect$1(t3);
        if (scanner._position !== scanner._lastMatchPosition)
          scanner._lastMatch = null;
        t6 = scanner._lastMatch.$index(0, 0);
        t6.toString;
        scanner.expect$1("=");
        t7 = scanner._lastMatch = t3.matchAsPrefix$2(0, t1, scanner._position);
        t8 = scanner._lastMatchPosition = scanner._position;
        success = t7 != null;
        if (success) {
          t7 = scanner._lastMatchPosition = scanner._position = t7.get$end();
          t8 = t7;
        } else
          t7 = t8;
        if (success) {
          if (t7 !== t8)
            scanner._lastMatch = null;
          t7 = scanner._lastMatch.$index(0, 0);
          t7.toString;
          value = t7;
        } else
          value = A.expectQuotedString(scanner);
        t7 = scanner._lastMatch = t2.matchAsPrefix$2(0, t1, scanner._position);
        scanner._lastMatchPosition = scanner._position;
        if (t7 != null)
          scanner._lastMatchPosition = scanner._position = t7.get$end();
        parameters.$indexSet(0, t6, value);
      }
      scanner.expectDone$0();
      return A.MediaType$(t4, t5, parameters);
    },
    $signature: 128
  };
  A.MediaType_toString_closure.prototype = {
    call$2(attribute, value) {
      var t1, t2, t3;
      A._asString(attribute);
      A._asString(value);
      t1 = this.buffer;
      t1._contents += "; " + attribute + "=";
      t2 = $.$get$nonToken();
      t2 = t2._nativeRegExp.test(value);
      t3 = t1._contents;
      if (t2) {
        t1._contents = t3 + '"';
        t2 = A.stringReplaceAllFuncUnchecked(value, $.$get$_escapedChar(), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(new A.MediaType_toString__closure())), null);
        t2 = t1._contents += t2;
        t1._contents = t2 + '"';
      } else
        t1._contents = t3 + value;
    },
    $signature: 129
  };
  A.MediaType_toString__closure.prototype = {
    call$1(match) {
      return "\\" + A.S(match.$index(0, 0));
    },
    $signature: 57
  };
  A.expectQuotedString_closure.prototype = {
    call$1(match) {
      var t1 = match.$index(0, 1);
      t1.toString;
      return t1;
    },
    $signature: 57
  };
  A.MoneroAccountKeysType.prototype = {
    toString$0(_) {
      return "MoneroAccountKeysType." + this.name;
    },
    get$value() {
      return this.value;
    }
  };
  A.MoneroBaseAccountKeys.prototype = {
    createVariantLayout$1$property(property) {
      var t1 = type$.LazyVariantModel_dynamic;
      return A.LayoutConst_lazyEnum(A._setArrayType([new A.LazyVariantModel(A.account_MoneroAccountKeys_layout$closure(), "Simple", 0, t1), new A.LazyVariantModel(A.account_MoneroMultisigAccountKeys_layout$closure(), "Multisig", 1, t1)], type$.JSArray_LazyVariantModel_dynamic), property);
    },
    getSpendPublicKey$1(index) {
      var t1, t2, _this = this;
      if (!B.JSArray_methods.contains$1(_this.indexes, index))
        throw A.wrapException(B.DartMoneroPluginException_GZq);
      t1 = index.major;
      if (!(t1 !== 0 || index.minor !== 0))
        return _this.account.pubSkey;
      t2 = _this._cachedIndexSpendPubKey;
      if (t2.$index(0, index) == null)
        t2.$indexSet(0, index, _this.account.scubaddr.computeKeys$2(index.minor, t1).pubSKey);
      t1 = t2.$index(0, index);
      t1.toString;
      return t1;
    },
    primaryAddress$0() {
      var t1 = this.account;
      return A.MoneroAccountAddress_MoneroAccountAddress$fromPubKeys(this.network, t1.pubSkey.publicKey._encoded, t1.pubVkey.publicKey._encoded, B.XmrAddressType_GJa);
    },
    subAddress$1(index) {
      var keys,
        t1 = index.major;
      if (!(t1 !== 0 || index.minor !== 0))
        throw A.wrapException(B.DartMoneroPluginException_4CA);
      keys = this.account.scubaddr.computeKeys$2(index.minor, t1);
      return A.MoneroAccountAddress_MoneroAccountAddress$fromPubKeys(this.network, keys.pubSKey.publicKey._encoded, keys.pubVKey.publicKey._encoded, B.XmrAddressType_0rc);
    },
    indexAddress$1(index) {
      if (index.major !== 0 || index.minor !== 0)
        return this.subAddress$1(index);
      return this.primaryAddress$0();
    },
    get$variantName() {
      return this.type.name;
    },
    toString$0(_) {
      var t1 = this.indexes,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.Iterable_iterableToFullString(A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.MoneroBaseAccountKeys_toString_closure(this)), t3), true, t3._eval$1("ListIterable.E")), "[", "]");
    }
  };
  A.MoneroBaseAccountKeys_toString_closure.prototype = {
    call$1(e) {
      var t1, t2;
      type$.MoneroAccountIndex._as(e);
      t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      t2 = this.$this;
      t1.$indexSet(0, "type", t2.type.name);
      t1.addAll$1(0, e.toJson$0());
      t1.$indexSet(0, "address", e.major !== 0 || e.minor !== 0 ? t2.subAddress$1(e).address : t2.primaryAddress$0().address);
      return t1;
    },
    $signature: 68
  };
  A.MoneroAccountKeys.prototype = {
    createLayout$1$property(property) {
      return A.MoneroAccountKeys_layout(property);
    },
    toLayoutStruct$0() {
      var t3, t4, t5,
        t1 = this.account,
        t2 = t1.privSkey;
      t2 = t2 == null ? null : t2.privateKey.key;
      t3 = this.indexes;
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["network", this.network.name, "privSkey", t2, "privVkey", t1.privVkey.privateKey.key, "pubSkey", t1.pubVkey.publicKey._encoded, "indexes", A.List_List$of(new A.MappedListIterable(t3, t4._eval$1("Map<String,@>(1)")._as(new A.MoneroAccountKeys_toLayoutStruct_closure()), t5), true, t5._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    }
  };
  A.MoneroAccountKeys_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.MoneroAccountIndex._as(e).toLayoutStruct$0();
    },
    $signature: 68
  };
  A.MoneroAccountAddress.prototype = {};
  A.MoneroAddress.prototype = {
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["address", this.address], type$.String, type$.dynamic);
    },
    createLayout$1$property(property) {
      return A.MoneroAddress_layout(property);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.MoneroAddress))
        return false;
      return this.address === other.address;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.address);
    },
    toString$0(_) {
      return this.address;
    }
  };
  A.MoneroIntegratedAddress.prototype = {};
  A.MoneroCryptoException.prototype = {};
  A.Gamma.prototype = {
    lowerBound$2(sortedList, value) {
      var right, left, mid;
      type$.List_BigInt._as(sortedList);
      right = sortedList.length;
      for (left = 0; left < right;) {
        mid = B.JSInt_methods._tdivFast$1(left + right, 2);
        if (!(mid < sortedList.length))
          return A.ioore(sortedList, mid);
        if (J.compareTo$1$ns(sortedList[mid], value) < 0)
          left = mid + 1;
        else
          right = mid;
      }
      return left;
    },
    pick$0() {
      var outIndex, t1, t2, index, firstRct, nrct, _this = this,
        x = Math.exp(_this.gammaDistribution.nextDouble$0());
      x = x > 1200 ? x - 1200 : $.$get$QuickCrypto_prng().nextInt$1(1800);
      outIndex = A._BigIntImpl__BigIntImpl$from(B.JSNumber_methods.$tdiv(x, _this.avarageOutsTime));
      t1 = _this.numRctOuts;
      if (outIndex.compareTo$1(0, t1) >= 0)
        return $.$get$maxU64();
      outIndex = t1.$sub(0, $.$get$_BigIntImpl_one()).$sub(0, outIndex);
      t1 = _this.rctOffsets;
      t2 = _this.end;
      index = _this.lowerBound$2(B.JSArray_methods.sublist$2(t1, 0, t2), outIndex);
      if (index === t2)
        throw A.wrapException(B.MoneroCryptoException_XEw);
      if (index === 0)
        firstRct = $.$get$_BigIntImpl_zero();
      else {
        t2 = index - 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        firstRct = t1[t2];
      }
      if (!(index < t1.length))
        return A.ioore(t1, index);
      nrct = J.$sub$n(t1[index], firstRct).toInt$0(0);
      if (nrct === 0)
        throw A.wrapException(B.MoneroCryptoException_43h0);
      return firstRct.$add(0, A._BigIntImpl__BigIntImpl$from($.$get$QuickCrypto_prng().nextInt$1(nrct)));
    }
  };
  A.CtKey.prototype = {
    copyWith$1$mask(mask) {
      var t1, t2;
      type$.nullable_List_int._as(mask);
      t1 = this.dest;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(t1, t2), 32, t2);
      A.BytesUtils_validateListOfBytes(mask);
      return new A.CtKey(t1, A.ListHelper_exceptedLen(A.List_List$unmodifiable(mask, t2), 32, t2));
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["mask", this.mask, "dest", this.dest], type$.String, type$.dynamic);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["mask", A.BytesUtils_toHexString(this.mask, true, null), "dest", A.BytesUtils_toHexString(this.dest, true, null)], type$.String, type$.dynamic);
    },
    createLayout$1$property(property) {
      return A.CtKey_layout(property);
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this !== other)
        t1 = other instanceof A.CtKey && A.getRuntimeTypeOfDartObject(_this) === A.getRuntimeTypeOfDartObject(other) && A.BytesUtils_bytesEqual(_this.dest, other.dest) && A.BytesUtils_bytesEqual(_this.mask, other.mask);
      else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      var t1 = A.List_List$of(this.dest, true, type$.int);
      B.JSArray_methods.addAll$1(t1, this.mask);
      return A.HashCodeGenerator_generateBytesHashCode(t1, B.List_empty2);
    }
  };
  A.MECSignature.prototype = {
    createLayout$1$property(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "c"), A.RawBytesLayout_RawBytesLayout(32, "r")], type$.JSArray_Layout_dynamic), false, property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["c", this.c, "r", this.r], type$.String, type$.dynamic);
    }
  };
  A.MultiexpData.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["scalar", A.BytesUtils_toHexString(this.scalar, true, null), "point", this.point.toJson$0()], type$.String, type$.dynamic);
    }
  };
  A.MultisigLR.prototype = {
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["l", this.l, "r", this.r], type$.String, type$.dynamic);
    },
    createLayout$1$property(property) {
      return A.MultisigLR_layout(property);
    }
  };
  A.MoneroMultisigOutputInfo.prototype = {
    toLayoutStruct$0() {
      var t1 = this.lr,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["signer", this.signer.publicKey._encoded, "lr", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.MoneroMultisigOutputInfo_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E")), "partialKeyImages", this.partialKeyImages], type$.String, type$.dynamic);
    },
    createLayout$1$property(property) {
      return A.MoneroMultisigOutputInfo_layout(property);
    }
  };
  A.MoneroMultisigOutputInfo_closure.prototype = {
    call$1(e) {
      var t1;
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      t1 = type$.int;
      return A.ListHelper_exceptedLen(A.List_List$unmodifiable(e, t1), 32, t1);
    },
    $signature: 2
  };
  A.MoneroMultisigOutputInfo_MoneroMultisigOutputInfo$fromStruct_closure.prototype = {
    call$1(e) {
      var t1, t2, t3;
      type$.Map_String_dynamic._as(e);
      t1 = type$.List_int;
      t2 = A.QuickMap_asBytes(e, "l", t1);
      t1 = A.QuickMap_asBytes(e, "r", t1);
      A.BytesUtils_validateListOfBytes(t2);
      t3 = type$.int;
      t2 = A.List_List$unmodifiable(t2, t3);
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MultisigLR(t2, A.List_List$unmodifiable(t1, t3));
    },
    $signature: 132
  };
  A.MoneroMultisigOutputInfo_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.MultisigLR._as(e).toLayoutStruct$0();
    },
    $signature: 133
  };
  A.BulletproofsPlusGenerator__bulletproofPlusPROVE_tryAgain.prototype = {
    call$0() {
      var t4, b2, a2, tmp2, tmp3, y, h, zSquared, _length, d, _i, i, t5, t6, t7, j, t8, t9, yPowers, aL1, aR1, dy, alpha1, gPrime, hPrime, aprime, bprime, yinv, yinvpow, _length0, $L, $R, nprime, round, cL, cR, dL, dR, out, cInv, cSq, cSqInv, r, s, d_, eta, data, sc1, gP3, hP3, a1, $B, e, eSq, r1, s1, d1, _this = this,
        t1 = type$.int,
        t2 = _this.V,
        transcript = A.BulletproofsPlusGenerator_transcriptUpdateTwo(A.ListHelper_clone(B.List_Opy, false, t1), A.RCT_hashToScalarKeys(t2)),
        alpha = A.RCT_skGen_(),
        preA = A.BulletproofsPlusGenerator_vectorExponent(_this.aL8, _this.aR8),
        $A = A.RCT_zero(true),
        t3 = _this._box_0;
      A.CryptoOps_scMul(t3.temp, alpha, B.List_D3e);
      t4 = A.RCT_scalarmultBase_(t3.temp);
      b2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      a2 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      if (A.CryptoOps_geFromBytesVartime_(b2, t4) !== 0)
        A.throwExpression(B.MoneroCryptoException_tEe0);
      if (A.CryptoOps_geFromBytesVartime_(a2, preA) !== 0)
        A.throwExpression(B.MoneroCryptoException_tEe0);
      tmp2 = new A.GroupElementCached(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_geP3ToCached(tmp2, b2);
      tmp3 = new A.GroupElementP1P1(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_geAdd(tmp3, a2, tmp2);
      A.CryptoOps_geP1P1ToP3(a2, tmp3);
      A.CryptoOps_geP3Tobytes($A, a2);
      y = A.BulletproofsPlusGenerator_transcriptUpdateTwo(transcript, $A);
      if (A.BytesUtils_bytesEqual(y, A.RCT_zero(false)))
        return _this.call$0();
      h = A.Keccack_hash(y, 32);
      A.CryptoOps_scReduce32(h);
      if (A.BytesUtils_bytesEqual(h, A.RCT_zero(false)))
        return _this.call$0();
      zSquared = A.RCT_zero(true);
      A.CryptoOps_scMul(zSquared, h, h);
      _length = _this.mn;
      t4 = type$.List_int;
      d = J.JSArray_JSArray$allocateGrowable(_length, t4);
      for (_i = 0; _i < _length; ++_i)
        d[_i] = A.RCT_zero(true);
      B.JSArray_methods.$indexSet(d, 0, zSquared);
      for (i = 1; i < 64; ++i) {
        t5 = d.length;
        if (!(i < t5))
          return A.ioore(d, i);
        t6 = d[i];
        t7 = i - 1;
        if (!(t7 < t5))
          return A.ioore(d, t7);
        A.CryptoOps_scMul(t6, d[t7], B.List_ouN1);
      }
      for (j = 1; j < t3.M; ++j)
        for (t5 = j * 64, t6 = (j - 1) * 64, i = 0; i < 64; ++i) {
          t7 = t5 + i;
          t8 = d.length;
          if (!(t7 < t8))
            return A.ioore(d, t7);
          t7 = d[t7];
          t9 = t6 + i;
          if (!(t9 >= 0 && t9 < t8))
            return A.ioore(d, t9);
          A.CryptoOps_scMul(t7, d[t9], zSquared);
        }
      yPowers = A.BulletproofsPlusGenerator_vectorOfScalarPowers(y, _length + 2);
      aL1 = A.BulletproofsPlusGenerator_vectorSubtract(_this.aL, h);
      aR1 = A.BulletproofsPlusGenerator_vectorAdd(_this.aR, h);
      dy = J.JSArray_JSArray$allocateGrowable(_length, t4);
      for (i = 0; i < _length; ++i)
        dy[i] = A.RCT_zero(true);
      for (i = 0; i < _length; ++i) {
        if (!(i < dy.length))
          return A.ioore(dy, i);
        t5 = dy[i];
        if (!(i < d.length))
          return A.ioore(d, i);
        t6 = d[i];
        t7 = _length - i;
        if (!(t7 >= 0 && t7 < yPowers.length))
          return A.ioore(yPowers, t7);
        A.CryptoOps_scMul(t5, t6, yPowers[t7]);
      }
      aR1 = A.BulletproofsPlusGenerator_vectorAddComponentwise(aR1, dy);
      alpha1 = A.ListHelper_clone(alpha, false, t1);
      t3.temp = A.ListHelper_clone(B.List_ouN0, false, t1);
      for (t5 = _this.sv, t6 = _this.temp2, t7 = _length + 1, t8 = _this.gamma, j = 0; j < t5.length; ++j) {
        t9 = t3.temp;
        A.CryptoOps_scMul(t9, t9, zSquared);
        if (!(t7 < yPowers.length))
          return A.ioore(yPowers, t7);
        A.CryptoOps_scMul(t6, yPowers[t7], t3.temp);
        if (!(j < t8.length))
          return A.ioore(t8, j);
        A.CryptoOps_scMulAdd(alpha1, t6, t8[j], alpha1);
      }
      t5 = type$.GroupElementP3;
      gPrime = J.JSArray_JSArray$allocateGrowable(_length, t5);
      for (_i = 0; _i < _length; ++_i)
        gPrime[_i] = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      hPrime = J.JSArray_JSArray$allocateGrowable(_length, t5);
      for (_i = 0; _i < _length; ++_i)
        hPrime[_i] = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      aprime = J.JSArray_JSArray$allocateGrowable(_length, t4);
      for (_i = 0; _i < _length; ++_i)
        aprime[_i] = A.RCT_zero(true);
      bprime = J.JSArray_JSArray$allocateGrowable(_length, t4);
      for (_i = 0; _i < _length; ++_i)
        bprime[_i] = A.RCT_zero(true);
      yinv = A.BulletproofsPlusGenerator_invert(y);
      yinvpow = J.JSArray_JSArray$allocateGrowable(_length, t4);
      for (_i = 0; _i < _length; ++_i)
        yinvpow[_i] = A.RCT_zero(true);
      B.JSArray_methods.$indexSet(yinvpow, 0, A.ListHelper_clone(B.List_ouN0, false, t1));
      for (i = 0; i < _length; ++i) {
        t5 = i * 2;
        B.JSArray_methods.$indexSet(gPrime, i, A.BulletproofsPlusGenerator_getExponent(B.List_Qm0, t5 + 1));
        B.JSArray_methods.$indexSet(hPrime, i, A.BulletproofsPlusGenerator_getExponent(B.List_Qm0, t5));
        if (i > 0) {
          t5 = yinvpow.length;
          if (!(i < t5))
            return A.ioore(yinvpow, i);
          t7 = yinvpow[i];
          t8 = i - 1;
          if (!(t8 < t5))
            return A.ioore(yinvpow, t8);
          A.CryptoOps_scMul(t7, yinvpow[t8], yinv);
        }
        if (!(i < aL1.length))
          return A.ioore(aL1, i);
        B.JSArray_methods.$indexSet(aprime, i, A.ListHelper_clone(aL1[i], false, t1));
        if (!(i < aR1.length))
          return A.ioore(aR1, i);
        B.JSArray_methods.$indexSet(bprime, i, A.ListHelper_clone(aR1[i], false, t1));
      }
      _length0 = _this.logMN;
      $L = J.JSArray_JSArray$allocateGrowable(_length0, t4);
      for (_i = 0; _i < _length0; ++_i)
        $L[_i] = A.RCT_zero(true);
      $R = J.JSArray_JSArray$allocateGrowable(_length0, t4);
      for (_i = 0; _i < _length0; ++_i)
        $R[_i] = A.RCT_zero(true);
      for (nprime = _length, transcript = h, round = 0; nprime > 1;) {
        nprime = B.JSInt_methods._tdivFast$1(nprime, 2);
        cL = A.BulletproofsPlusGenerator_weightedInnerProduct(B.JSArray_methods.sublist$2(aprime, 0, nprime), B.JSArray_methods.sublist$1(bprime, nprime), y);
        t5 = B.JSArray_methods.sublist$1(aprime, nprime);
        if (!(nprime < yPowers.length))
          return A.ioore(yPowers, nprime);
        cR = A.BulletproofsPlusGenerator_weightedInnerProduct(A.BulletproofsPlusGenerator_vectorScalar(t5, yPowers[nprime]), B.JSArray_methods.sublist$2(bprime, 0, nprime), y);
        dL = A.RCT_skGen_();
        dR = A.RCT_skGen_();
        if (!(nprime < yinvpow.length))
          return A.ioore(yinvpow, nprime);
        B.JSArray_methods.$indexSet($L, round, A.BulletproofsPlusGenerator_computeLR(nprime, yinvpow[nprime], gPrime, nprime, hPrime, 0, aprime, 0, bprime, nprime, cL, dL));
        if (!(nprime < yPowers.length))
          return A.ioore(yPowers, nprime);
        B.JSArray_methods.$indexSet($R, round, A.BulletproofsPlusGenerator_computeLR(nprime, yPowers[nprime], gPrime, 0, hPrime, nprime, aprime, nprime, bprime, 0, cR, dR));
        if (!(round < $L.length))
          return A.ioore($L, round);
        t5 = $L[round];
        if (!(round < $R.length))
          return A.ioore($R, round);
        t7 = $R[round];
        t8 = A.List_List$of(transcript, true, t1);
        B.JSArray_methods.addAll$1(t8, t5);
        B.JSArray_methods.addAll$1(t8, t7);
        h = A.Keccack$(32);
        h.super$_Keccack$update(t4._as(t8));
        out = A.List_List$filled(h.digestLength, 0, false, t1);
        t4._as(out);
        if (!h._finished)
          h._padAndPermute$1(1);
        else
          h._pos = 0;
        h._squeeze$1(out);
        h.reset$0();
        A.CryptoOps_scReduce32(out);
        transcript = A.ListHelper_clone(out, false, t1);
        if (A.BytesUtils_bytesEqual(out, A.RCT_zero(false)))
          return _this.call$0();
        cInv = A.BulletproofsPlusGenerator_invert(out);
        t5 = t3.temp;
        if (!(nprime < yinvpow.length))
          return A.ioore(yinvpow, nprime);
        A.CryptoOps_scMul(t5, yinvpow[nprime], out);
        gPrime = A.BulletproofsPlusGenerator_hadamardFold(gPrime, cInv, t3.temp);
        hPrime = A.BulletproofsPlusGenerator_hadamardFold(hPrime, out, cInv);
        t5 = t3.temp;
        if (!(nprime < yPowers.length))
          return A.ioore(yPowers, nprime);
        A.CryptoOps_scMul(t5, cInv, yPowers[nprime]);
        aprime = A.BulletproofsPlusGenerator_vectorAddComponentwise(A.BulletproofsPlusGenerator_vectorScalar(B.JSArray_methods.sublist$2(aprime, 0, nprime), out), A.BulletproofsPlusGenerator_vectorScalar(B.JSArray_methods.sublist$1(aprime, nprime), t3.temp));
        bprime = A.BulletproofsPlusGenerator_vectorAddComponentwise(A.BulletproofsPlusGenerator_vectorScalar(B.JSArray_methods.sublist$2(bprime, 0, nprime), cInv), A.BulletproofsPlusGenerator_vectorScalar(B.JSArray_methods.sublist$1(bprime, nprime), out));
        cSq = A.RCT_zero(true);
        A.CryptoOps_scMul(cSq, out, out);
        cSqInv = A.RCT_zero(true);
        A.CryptoOps_scMul(cSqInv, cInv, cInv);
        A.CryptoOps_scMulAdd(alpha1, dL, cSq, alpha1);
        A.CryptoOps_scMulAdd(alpha1, dR, cSqInv, alpha1);
        ++round;
      }
      r = A.RCT_skGen_();
      s = A.RCT_skGen_();
      d_ = A.RCT_skGen_();
      eta = A.RCT_skGen_();
      data = A._setArrayType([], type$.JSArray_MultiexpData);
      sc1 = A.RCT_zero(true);
      A.CryptoOps_scMul(sc1, r, B.List_D3e);
      if (0 >= gPrime.length)
        return A.ioore(gPrime, 0);
      t4 = gPrime[0];
      A.BytesUtils_validateListOfBytes(sc1);
      B.JSArray_methods.add$1(data, new A.MultiexpData(A.List_List$unmodifiable(sc1, t1), t4));
      A.CryptoOps_scMul(sc1, s, B.List_D3e);
      if (0 >= hPrime.length)
        return A.ioore(hPrime, 0);
      t4 = hPrime[0];
      A.BytesUtils_validateListOfBytes(sc1);
      B.JSArray_methods.add$1(data, new A.MultiexpData(A.List_List$unmodifiable(sc1, t1), t4));
      A.CryptoOps_scMul(sc1, d_, B.List_D3e);
      gP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_geFromBytesVartime_(gP3, B.List_ouN2);
      A.BytesUtils_validateListOfBytes(sc1);
      B.JSArray_methods.add$1(data, new A.MultiexpData(A.List_List$unmodifiable(sc1, t1), gP3));
      A.CryptoOps_scMul(t3.temp, r, y);
      t4 = t3.temp;
      if (0 >= bprime.length)
        return A.ioore(bprime, 0);
      A.CryptoOps_scMul(t4, t4, bprime[0]);
      A.CryptoOps_scMul(t6, s, y);
      if (0 >= aprime.length)
        return A.ioore(aprime, 0);
      A.CryptoOps_scMul(t6, t6, aprime[0]);
      t4 = t3.temp;
      A.CryptoOps_scAdd(t4, t4, t6);
      A.CryptoOps_scMul(sc1, t3.temp, B.List_D3e);
      hP3 = new A.GroupElementP3(new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)), new A.FieldElement(A.List_List$filled(10, 0, false, t1)));
      A.CryptoOps_geFromBytesVartime_(hP3, B.List_Qm0);
      A.BytesUtils_validateListOfBytes(sc1);
      B.JSArray_methods.add$1(data, new A.MultiexpData(A.List_List$unmodifiable(sc1, t1), hP3));
      a1 = A.BulletproofsPlusGenerator_multiexp(data, 0);
      A.CryptoOps_scMul(t3.temp, r, y);
      t1 = t3.temp;
      A.CryptoOps_scMul(t1, t1, s);
      t1 = t3.temp;
      A.CryptoOps_scMul(t1, t1, B.List_D3e);
      A.CryptoOps_scMul(t6, eta, B.List_D3e);
      $B = A.RCT_zero(true);
      A.RCT_addKeys2($B, t6, t3.temp, B.List_Qm0);
      e = A.BulletproofsPlusGenerator_transcriptUpdateThree(transcript, a1, $B);
      if (A.BytesUtils_bytesEqual(e, A.RCT_zero(false)))
        return _this.call$0();
      eSq = A.RCT_zero(true);
      A.CryptoOps_scMul(eSq, e, e);
      r1 = A.RCT_zero(true);
      if (0 >= aprime.length)
        return A.ioore(aprime, 0);
      A.CryptoOps_scMulAdd(r1, aprime[0], e, r);
      s1 = A.RCT_zero(true);
      if (0 >= bprime.length)
        return A.ioore(bprime, 0);
      A.CryptoOps_scMulAdd(s1, bprime[0], e, s);
      d1 = A.RCT_zero(true);
      A.CryptoOps_scMulAdd(d1, d_, e, eta);
      A.CryptoOps_scMulAdd(d1, alpha1, eSq, d1);
      return A.BulletproofPlus$($A, a1, $B, d1, $L, $R, r1, s1, t2);
    },
    $signature: 134
  };
  A.StrausCachedData.prototype = {};
  A.StrausCachedData_closure.prototype = {
    call$1(e) {
      return A.List_List$unmodifiable(type$.List_GroupElementCached._as(e), type$.GroupElementCached);
    },
    $signature: 135
  };
  A.RCTGeneratorUtils_getPreMlsagHash_closure.prototype = {
    call$1(e) {
      return type$.List_int._as(e);
    },
    $signature: 2
  };
  A.RCTGeneratorUtils_getPreMlsagHash_closure0.prototype = {
    call$1(e) {
      return type$.List_int._as(e);
    },
    $signature: 2
  };
  A.RCTGeneratorUtils_genRctSimple_closure.prototype = {
    call$1(e) {
      return A.ListHelper_clone(type$.List_int._as(e), false, type$.int);
    },
    $signature: 2
  };
  A.RCT_hashToScalarKeys_closure.prototype = {
    call$1(e) {
      return type$.List_int._as(e);
    },
    $signature: 2
  };
  A.DartMoneroPluginException.prototype = {};
  A.QuickMap_asListBytes_closure.prototype = {
    call$1(e) {
      var t1 = J.cast$1$0$ax(type$.List_dynamic._as(e), type$.int);
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    $signature: 69
  };
  A.QuickMap_asListOfListBytes_closure.prototype = {
    call$1(e) {
      var t1 = J.cast$1$0$ax(type$.List_dynamic._as(e), type$.List_int),
        t2 = t1.$ti,
        t3 = t2._eval$1("MappedListIterable<ListBase.E,List<int>>");
      return A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("List<int>(ListBase.E)")._as(new A.QuickMap_asListOfListBytes__closure()), t3), true, t3._eval$1("ListIterable.E"));
    },
    $signature: 137
  };
  A.QuickMap_asListOfListBytes__closure.prototype = {
    call$1(d) {
      type$.List_int._as(d);
      A.BytesUtils_validateListOfBytes(d);
      return d;
    },
    $signature: 2
  };
  A.QuickMap_asListOfMap_closure.prototype = {
    call$1(e) {
      return type$.Map_dynamic_dynamic._as(e).cast$2$0(0, type$.String, type$.dynamic);
    },
    $signature: 17
  };
  A.QuickMap__valueAsList_closure.prototype = {
    call$1(e) {
      return type$.Map_dynamic_dynamic._as(e).cast$2$0(0, type$.String, type$.dynamic);
    },
    $signature: 17
  };
  A.MoneroTransactionHelper_toTxExtra_closure.prototype = {
    call$1(e) {
      return type$.TxExtra._as(e).toVariantSerialize$0();
    },
    $signature: 138
  };
  A.MoneroTransactionHelper_generateInProof_closure.prototype = {
    call$1(e) {
      return A.MoneroPublicKey_MoneroPublicKey$fromBytes(type$.List_int._as(e));
    },
    $signature: 31
  };
  A.MoneroTransactionHelper_generateOutProof_closure.prototype = {
    call$1(e) {
      return A.MoneroPublicKey_MoneroPublicKey$fromBytes(type$.List_int._as(e));
    },
    $signature: 31
  };
  A.MoneroTransactionHelper_generateFakePaymentOuts_closure.prototype = {
    call$1(e) {
      var _length, _list, t1, t2, t3, i, t4, t5, t6, result;
      this.T._as(e);
      _length = this.fakeOutsLength;
      _list = J.JSArray_JSArray$allocateGrowable(_length, type$.OutsEntery);
      for (t1 = type$.int, t2 = e.globalIndex, t3 = e.output.ephemeralPublicKey, i = 0; i < _length; ++i) {
        t4 = t2.$sub(0, A._BigIntImpl__BigIntImpl$from(i));
        t5 = i === 0 ? t3 : A.RCT_identity(false);
        t6 = A.RCT_identity(false);
        A.BytesUtils_validateListOfBytes(t5);
        result = A.List_List$from(t5, false, t1);
        result.fixed$length = Array;
        result.immutable$list = Array;
        t5 = A.ListHelper_exceptedLen(result, 32, t1);
        A.BytesUtils_validateListOfBytes(t6);
        result = A.List_List$from(t6, false, t1);
        result.fixed$length = Array;
        result.immutable$list = Array;
        _list[i] = new A.OutsEntery(t4, new A.CtKey(t5, A.ListHelper_exceptedLen(result, 32, t1)));
      }
      t1 = A._setArrayType(_list.slice(0), A._arrayInstanceType(_list));
      return t1;
    },
    $signature() {
      return this.T._eval$1("List<OutsEntery>(0)");
    }
  };
  A.MoneroBlock.prototype = {
    createLayout$1$property(property) {
      return A.MoneroBlock_layout(property);
    },
    toLayoutStruct$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["majorVersion", _this.majorVersion, "minorVersion", _this.minorVersion, "timestamp", _this.timestamp, "hash", _this.hash, "nonce", _this.nonce, "minerTx", _this.minerTx.toLayoutStruct$0(), "txHashes", _this.txHashes], type$.String, type$.dynamic);
    }
  };
  A.MoneroBlock_closure.prototype = {
    call$1(e) {
      var t1;
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      t1 = type$.int;
      return A.ListValidator_exc(A.List_List$unmodifiable(e, t1), 32, "tx hash", t1);
    },
    $signature: 2
  };
  A.MoneroBlockheader.prototype = {};
  A.MoneroOutputType.prototype = {
    toString$0(_) {
      return "MoneroOutputType." + this.name;
    },
    get$value() {
      return this.value;
    }
  };
  A.MoneroPaymentType.prototype = {
    toString$0(_) {
      return "MoneroPaymentType." + this.name;
    },
    get$value() {
      return this.value;
    }
  };
  A.MoneroPaymentType_fromName_closure.prototype = {
    call$1(e) {
      return type$.MoneroPaymentType._as(e).name === this.name;
    },
    $signature: 140
  };
  A.MoneroPaymentType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartMoneroPluginException$("Invalid payment type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", this.name], type$.String, type$.dynamic)));
    },
    $signature: 1
  };
  A.MoneroOutput.prototype = {
    createVariantLayout$1$property(property) {
      var t1 = type$.LazyVariantModel_dynamic;
      return A.LayoutConst_lazyEnum(A._setArrayType([new A.LazyVariantModel(A.payment_MoneroLockedOutput_layout$closure(), "locked", 0, t1), new A.LazyVariantModel(A.payment_MoneroUnlockedOutput_layout$closure(), "unlocked", 1, t1), new A.LazyVariantModel(A.payment_MoneroUnlockedMultisigOutput_layout$closure(), "unlockedMultisig", 2, t1)], type$.JSArray_LazyVariantModel_dynamic), property);
    },
    get$variantName() {
      return this.type.name;
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["amount", _this.amount, "mask", A.BytesUtils_toHexString(_this.mask, true, null), "derivation", A.BytesUtils_toHexString(_this.derivation, true, null), "accountIndex", _this.accountIndex.toJson$0(), "outputPublicKey", _this.outputPublicKey.toHex$0(), "unlockTime", _this.unlockTime, "realIndex", _this.realIndex], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "{amount: " + A.MoneroTransactionHelper_toXMR(this.amount) + " status: " + this.type.name + " accountIndex: " + this.accountIndex.toString$0(0) + "}";
    }
  };
  A.MoneroLockedOutput.prototype = {
    toLayoutStruct$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["amount", _this.amount, "accountIndex", _this.accountIndex.toLayoutStruct$0(), "mask", _this.mask, "derivation", _this.derivation, "outputPublicKey", _this.outputPublicKey.publicKey._encoded, "unlockTime", _this.unlockTime, "realIndex", _this.realIndex], type$.String, type$.dynamic);
    },
    createLayout$1$property(property) {
      return A.MoneroLockedOutput_layout(property);
    }
  };
  A.MoneroUnlockedOutput.prototype = {
    toLayoutStruct$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["amount", _this.amount, "mask", _this.mask, "derivation", _this.derivation, "ephemeralSecretKey", _this.ephemeralSecretKey, "ephemeralPublicKey", _this.ephemeralPublicKey, "keyImage", _this.keyImage, "accountIndex", _this.accountIndex.toLayoutStruct$0(), "outputPublicKey", _this.outputPublicKey.publicKey._encoded, "unlockTime", _this.unlockTime, "realIndex", _this.realIndex], type$.String, type$.dynamic);
    },
    toJson$0() {
      var _this = this,
        t1 = A.LinkedHashMap_LinkedHashMap$of(_this.super$MoneroOutput$toJson(), type$.String, type$.dynamic);
      t1.$indexSet(0, "ephemeralSecretKey", A.BytesUtils_toHexString(_this.ephemeralSecretKey, true, null));
      t1.$indexSet(0, "ephemeralPublicKey", A.BytesUtils_toHexString(_this.ephemeralPublicKey, true, null));
      t1.$indexSet(0, "keyImage", A.BytesUtils_toHexString(_this.keyImage, true, null));
      t1.$indexSet(0, "realIndex", _this.realIndex);
      return t1;
    },
    createLayout$1$property(property) {
      return A.MoneroUnlockedOutput_layout(property);
    }
  };
  A.MoneroUnlockedMultisigOutput.prototype = {
    toLayoutStruct$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["amount", _this.amount, "mask", _this.mask, "derivation", _this.derivation, "ephemeralSecretKey", _this.ephemeralSecretKey, "ephemeralPublicKey", _this.ephemeralPublicKey, "keyImage", _this.keyImage, "accountIndex", _this.accountIndex.toLayoutStruct$0(), "outputPublicKey", _this.outputPublicKey.publicKey._encoded, "multisigKeyImage", _this.multisigKeyImage, "unlockTime", _this.unlockTime, "realIndex", _this.realIndex], type$.String, type$.dynamic);
    },
    createLayout$1$property(property) {
      return A.MoneroUnlockedMultisigOutput_layout(property);
    }
  };
  A.MoneroPayment.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type.name, "output", _this.output.toJson$0(), "txPubkey", _this.txPubkey.toHex$0(), "paymentId", A.BytesUtils_tryToHexString(_this.paymentId), "encryptedPaymentid", A.BytesUtils_tryToHexString(_this.encryptedPaymentid), "globalIndex", _this.globalIndex.toString$0(0)], type$.String, type$.dynamic);
    },
    get$variantName() {
      return this.type.name;
    },
    createVariantLayout$1$property(property) {
      return A.MoneroPayment_layout(property);
    },
    toString$0(_) {
      return this.output.toString$0(0);
    }
  };
  A.MoneroLockedPayment.prototype = {
    createLayout$1$property(property) {
      return A.MoneroLockedPayment_layout(property);
    },
    toLayoutStruct$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["output", _this.output.toLayoutStruct$0(), "txPubkey", _this.txPubkey.publicKey._encoded, "paymentId", _this.paymentId, "encryptedPaymentid", _this.encryptedPaymentid, "globalIndex", _this.globalIndex], type$.String, type$.dynamic);
    }
  };
  A.MoneroUnLockedPayment.prototype = {
    get$keyImage() {
      return this.output.keyImage;
    },
    createLayout$1$property(property) {
      return A.MoneroUnLockedPayment_layout(property);
    },
    toLayoutStruct$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["output", _this.output.toLayoutStruct$0(), "txPubkey", _this.txPubkey.publicKey._encoded, "paymentId", _this.paymentId, "encryptedPaymentid", _this.encryptedPaymentid, "globalIndex", _this.globalIndex], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.MoneroUnLockedPayment))
        return false;
      if (this === other)
        return true;
      return A.BytesUtils_bytesEqual(this.get$keyImage(), other.get$keyImage());
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this.get$keyImage(), B.List_empty2);
    }
  };
  A.MoneroUnlockedMultisigPayment.prototype = {
    get$keyImage() {
      return this.output.multisigKeyImage;
    },
    createLayout$1$property(property) {
      return A.MoneroUnlockedMultisigPayment_layout(property);
    },
    toLayoutStruct$0() {
      var _this = this,
        t1 = _this.multisigInfos,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["output", _this.output.toLayoutStruct$0(), "txPubkey", _this.txPubkey.publicKey._encoded, "paymentId", _this.paymentId, "encryptedPaymentid", _this.encryptedPaymentid, "multisigInfos", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.MoneroUnlockedMultisigPayment_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E")), "globalIndex", _this.globalIndex], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.MoneroUnlockedMultisigPayment))
        return false;
      if (this === other)
        return true;
      return A.BytesUtils_bytesEqual(this.output.multisigKeyImage, other.output.multisigKeyImage);
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this.output.multisigKeyImage, B.List_empty2);
    }
  };
  A.MoneroUnlockedMultisigPayment_MoneroUnlockedMultisigPayment$fromStruct_closure.prototype = {
    call$1(e) {
      return A.MoneroMultisigOutputInfo_MoneroMultisigOutputInfo$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 141
  };
  A.MoneroUnlockedMultisigPayment_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.MoneroMultisigOutputInfo._as(e).toLayoutStruct$0();
    },
    $signature: 142
  };
  A.SpendablePayment.prototype = {
    toLayoutStruct$0() {
      var t1 = this.payment,
        t2 = type$.String,
        t3 = type$.dynamic,
        t4 = this.outs,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["payment", A.LinkedHashMap_LinkedHashMap$_literal([t1.get$variantName(), t1.toLayoutStruct$0()], t2, t3), "outs", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.SpendablePayment_toLayoutStruct_closure()), t6), true, t6._eval$1("ListIterable.E")), "realOutIndex", this.realOutIndex], t2, t3);
    },
    createLayout$1$property(property) {
      return A.SpendablePayment_layout(property);
    },
    toJson$0() {
      var t1 = this.outs,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["outs", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.SpendablePayment_toJson_closure()), t3), true, t3._eval$1("ListIterable.E")), "realOutIndex", this.realOutIndex, "payment", this.payment.toJson$0()], type$.String, type$.dynamic);
    }
  };
  A.SpendablePayment_SpendablePayment$fromStruct_closure.prototype = {
    call$1(e) {
      var t2, t3, t4,
        t1 = type$.Map_String_dynamic;
      t1._as(e);
      t2 = A.QuickMap_as(e, "index", type$.BigInt);
      t1 = A.QuickMap_asMap(e, "key", t1);
      t3 = type$.List_int;
      t4 = A.QuickMap_asBytes(t1, "dest", t3);
      t3 = A.QuickMap_asBytes(t1, "mask", t3);
      A.BytesUtils_validateListOfBytes(t4);
      t1 = type$.int;
      t4 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(t4, t1), 32, t1);
      A.BytesUtils_validateListOfBytes(t3);
      return new A.OutsEntery(t2, new A.CtKey(t4, A.ListHelper_exceptedLen(A.List_List$unmodifiable(t3, t1), 32, t1)));
    },
    $signature: 143
  };
  A.SpendablePayment_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.OutsEntery._as(e).toLayoutStruct$0();
    },
    $signature: 71
  };
  A.SpendablePayment_toJson_closure.prototype = {
    call$1(e) {
      return type$.OutsEntery._as(e).toJson$0();
    },
    $signature: 71
  };
  A.MoneroTxDestination.prototype = {
    toLayoutStruct$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["amount", this.amount, "address", A.LinkedHashMap_LinkedHashMap$_literal(["address", this.address.address], t1, t2)], t1, t2);
    },
    createLayout$1$property(property) {
      return A.MoneroTxDestination_layout(property);
    },
    toString$0(_) {
      var t1 = type$.String;
      return A.MapBase_mapToString(A.LinkedHashMap_LinkedHashMap$_literal(["amount", A.MoneroTransactionHelper_toXMR(this.amount), "address", this.address.address], t1, t1));
    }
  };
  A.MoneroAccountIndex.prototype = {
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["major", this.major, "minor", this.minor], type$.String, type$.dynamic);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["major", this.major, "minor", this.minor], type$.String, type$.dynamic);
    },
    createLayout$1$property(property) {
      return A.MoneroAccountIndex_layout(property);
    },
    toString$0(_) {
      return A.MapBase_mapToString(A.LinkedHashMap_LinkedHashMap$_literal(["major", this.major, "minor", this.minor], type$.String, type$.int));
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.MoneroAccountIndex))
        return false;
      if (this === other)
        return true;
      return this.major === other.major && this.minor === other.minor;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.major, this.minor]);
    }
  };
  A.OutsEntery.prototype = {
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["index", this.index, "key", this.key.toLayoutStruct$0()], type$.String, type$.dynamic);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["index", this.index, "key", this.key.toJson$0()], type$.String, type$.dynamic);
    },
    createLayout$1$property(property) {
      return A.OutsEntery_layout(property);
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this !== other) {
        t1 = false;
        if (other instanceof A.OutsEntery)
          if (A.getRuntimeTypeOfDartObject(_this) === A.getRuntimeTypeOfDartObject(other)) {
            t1 = _this.index.compareTo$1(0, other.index);
            t1 = t1 === 0 && _this.key.$eq(0, other.key);
          }
      } else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.index, this.key]);
    }
  };
  A.TxEpemeralKeyResult.prototype = {};
  A.MoneroTxVersion.prototype = {};
  A.MoneroTxVersion_fromBase58_closure.prototype = {
    call$1(e) {
      return B.JSString_methods.startsWith$1(this.proof, type$.MoneroTxVersion._as(e).name);
    },
    $signature: 145
  };
  A.MoneroTxVersion_fromBase58_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartMoneroPluginException$("Invalid proof version.", A.LinkedHashMap_LinkedHashMap$_literal(["proof", this.proof], type$.String, type$.dynamic)));
    },
    $signature: 1
  };
  A.MoneroTxProof.prototype = {
    toBase58$0() {
      var t1, t2, t3, t4, t5, i, t6, t7, t8,
        result = this.version.name;
      for (t1 = this.signatures, t2 = t1.length, t3 = this.sharedSecret, t4 = t3.length, t5 = type$.int, i = 0; i < t2; ++i) {
        if (!(i < t4))
          return A.ioore(t3, i);
        t6 = A.Base58XmrEncoder_encode(t3[i].publicKey._encoded);
        t7 = t1[i];
        t8 = A.List_List$of(t7.c, true, t5);
        B.JSArray_methods.addAll$1(t8, t7.r);
        result = result + t6 + A.Base58XmrEncoder_encode(t8);
      }
      return result;
    }
  };
  A.RctSigPrunable.prototype = {
    cast$1$0(_, $T) {
      A.checkTypeBound($T, type$.RctSigPrunable, "T", "cast");
      if (!$T._is(this))
        throw A.wrapException(A.DartMoneroPluginException$("RctSigPrunable casting failed.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", A.createRuntimeType($T).toString$0(0), "type", A.getRuntimeTypeOfDartObject(this).toString$0(0)], type$.String, type$.dynamic)));
      return $T._as(this);
    }
  };
  A.ClsagPrunable.prototype = {};
  A.MgSigPrunable.prototype = {};
  A.BulletproofPlus.prototype = {
    toJson$0() {
      var _this = this, _null = null,
        t1 = _this.v,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,String>"),
        t4 = _this.l,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,String>"),
        t7 = _this.r,
        t8 = A._arrayInstanceType(t7),
        t9 = t8._eval$1("MappedListIterable<1,String>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["v", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.BulletproofPlus_toJson_closure()), t3), true, t3._eval$1("ListIterable.E")), "a", A.BytesUtils_toHexString(_this.a, true, _null), "a1", A.BytesUtils_toHexString(_this.a1, true, _null), "b", A.BytesUtils_toHexString(_this.b, true, _null), "r1", A.BytesUtils_toHexString(_this.r1, true, _null), "s1", A.BytesUtils_toHexString(_this.s1, true, _null), "d1", A.BytesUtils_toHexString(_this.d1, true, _null), "l", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("String(1)")._as(new A.BulletproofPlus_toJson_closure0()), t6), true, t6._eval$1("ListIterable.E")), "r", A.List_List$of(new A.MappedListIterable(t7, t8._eval$1("String(1)")._as(new A.BulletproofPlus_toJson_closure1()), t9), true, t9._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    },
    toLayoutStruct$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["a", _this.a, "a1", _this.a1, "b", _this.b, "r1", _this.r1, "s1", _this.s1, "d1", _this.d1, "l", _this.l, "r", _this.r], type$.String, type$.dynamic);
    },
    createLayout$1$property(property) {
      return A.BulletproofPlus_layout(property);
    }
  };
  A.BulletproofPlus_toJson_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_toHexString(type$.List_int._as(e), true, null);
    },
    $signature: 18
  };
  A.BulletproofPlus_toJson_closure0.prototype = {
    call$1(e) {
      return A.BytesUtils_toHexString(type$.List_int._as(e), true, null);
    },
    $signature: 18
  };
  A.BulletproofPlus_toJson_closure1.prototype = {
    call$1(e) {
      return A.BytesUtils_toHexString(type$.List_int._as(e), true, null);
    },
    $signature: 18
  };
  A.BulletproofPlus_closure.prototype = {
    call$1(e) {
      var t1;
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      t1 = type$.int;
      return A.ListValidator_exc(A.List_List$unmodifiable(e, t1), 32, "BulletproofPlus v", t1);
    },
    $signature: 2
  };
  A.BulletproofPlus_closure0.prototype = {
    call$1(e) {
      var t1;
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      t1 = type$.int;
      return A.ListValidator_exc(A.List_List$unmodifiable(e, t1), 32, "BulletproofPlus v", t1);
    },
    $signature: 2
  };
  A.Bulletproof.prototype = {
    toLayoutStruct$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["a", _this.a, "s", _this.s, "t1", _this.t1, "t2", _this.t2, "taux", _this.taux, "mu", _this.mu, "l", _this.l, "r", _this.r, "a_", _this.a_, "b", _this.b, "t", _this.t], type$.String, type$.dynamic);
    },
    createLayout$1$property(property) {
      return A.Bulletproof_layout(property);
    }
  };
  A.Bulletproof_closure.prototype = {
    call$1(e) {
      var t1;
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      t1 = type$.int;
      return A.ListValidator_exc(A.List_List$unmodifiable(e, t1), 32, "Bulletproof v", t1);
    },
    $signature: 2
  };
  A.Bulletproof_closure0.prototype = {
    call$1(e) {
      var t1;
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      t1 = type$.int;
      return A.ListValidator_exc(A.List_List$unmodifiable(e, t1), 32, "Bulletproof v", t1);
    },
    $signature: 2
  };
  A.Bulletproof_closure1.prototype = {
    call$1(e) {
      var t1;
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      t1 = type$.int;
      return A.ListValidator_exc(A.List_List$unmodifiable(e, t1), 32, "Bulletproof v", t1);
    },
    $signature: 2
  };
  A.Clsag.prototype = {
    createLayout$1$property(property) {
      return A.Clsag_layout(0, property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["s", this.s, "c1", this.c1, "d", this.d], type$.String, type$.dynamic);
    }
  };
  A.Clsag_closure.prototype = {
    call$1(e) {
      var t1;
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      t1 = type$.int;
      return A.ListValidator_exc(A.List_List$unmodifiable(e, t1), 32, "Clsag s", t1);
    },
    $signature: 2
  };
  A.RctSigPrunableBulletproofPlus.prototype = {
    createLayout$1$property(property) {
      return A.RctSigPrunableBulletproofPlus_layout(0, 0, property);
    },
    toLayoutStruct$0() {
      var t1 = this.bulletproofPlus,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>"),
        t4 = this.clsag,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["bulletproofPlus", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.RctSigPrunableBulletproofPlus_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E")), "clsag", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.RctSigPrunableBulletproofPlus_toLayoutStruct_closure0()), t6), true, t6._eval$1("ListIterable.E")), "pseudoOuts", this.pseudoOuts], type$.String, type$.dynamic);
    }
  };
  A.RctSigPrunableBulletproofPlus_closure.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return A.List_List$unmodifiable(e, type$.int);
    },
    $signature: 2
  };
  A.RctSigPrunableBulletproofPlus_RctSigPrunableBulletproofPlus$fromStruct_closure.prototype = {
    call$1(e) {
      return A.Clsag_Clsag$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 73
  };
  A.RctSigPrunableBulletproofPlus_RctSigPrunableBulletproofPlus$fromStruct_closure0.prototype = {
    call$1(e) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      type$.Map_String_dynamic._as(e);
      t1 = type$.List_int;
      t2 = A.QuickMap_asBytes(e, "a", t1);
      t3 = A.QuickMap_asBytes(e, "a1", t1);
      t4 = A.QuickMap_asBytes(e, "b", t1);
      t5 = A.QuickMap_asBytes(e, "r1", t1);
      t6 = A.QuickMap_asBytes(e, "s1", t1);
      t1 = A.QuickMap_asBytes(e, "d1", t1);
      t7 = A.QuickMap_asListBytes(e, "l");
      t7.toString;
      t8 = A.QuickMap_asListBytes(e, "r");
      t8.toString;
      return A.BulletproofPlus$(t2, t3, t4, t1, t7, t8, t5, t6, B.List_empty1);
    },
    $signature: 148
  };
  A.RctSigPrunableBulletproofPlus_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.BulletproofPlus._as(e).toLayoutStruct$0();
    },
    $signature: 149
  };
  A.RctSigPrunableBulletproofPlus_toLayoutStruct_closure0.prototype = {
    call$1(e) {
      return type$.Clsag._as(e).toLayoutStruct$0();
    },
    $signature: 74
  };
  A.MgSig.prototype = {
    createLayout$1$property(property) {
      return A.MgSig_layout(0, property, 0);
    },
    toJson$0() {
      var t1 = this.ss,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Iterable<String>>"),
        t4 = this.ii,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,String>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["ss", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Iterable<String>(1)")._as(new A.MgSig_toJson_closure()), t3), true, t3._eval$1("ListIterable.E")), "cc", A.BytesUtils_toHexString(this.cc, true, null), "ii", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("String(1)")._as(new A.MgSig_toJson_closure0()), t6), true, t6._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["ss", this.ss, "cc", this.cc], type$.String, type$.dynamic);
    }
  };
  A.MgSig_closure.prototype = {
    call$1(e) {
      var t1 = type$.List_int,
        t2 = J.map$1$1$ax(type$.List_List_int._as(e), new A.MgSig__closure(), t1);
      return A.List_List$unmodifiable(A.List_List$of(t2, true, t2.$ti._eval$1("ListIterable.E")), t1);
    },
    $signature: 151
  };
  A.MgSig__closure.prototype = {
    call$1(d) {
      var t1;
      type$.List_int._as(d);
      A.BytesUtils_validateListOfBytes(d);
      t1 = type$.int;
      return A.ListValidator_exc(A.List_List$unmodifiable(d, t1), 32, "Clsag s", t1);
    },
    $signature: 2
  };
  A.MgSig_closure0.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return A.List_List$unmodifiable(e, type$.int);
    },
    $signature: 2
  };
  A.MgSig_toJson_closure.prototype = {
    call$1(e) {
      return J.map$1$1$ax(type$.List_List_int._as(e), new A.MgSig_toJson__closure(), type$.String);
    },
    $signature: 152
  };
  A.MgSig_toJson__closure.prototype = {
    call$1(d) {
      return A.BytesUtils_toHexString(type$.List_int._as(d), true, null);
    },
    $signature: 18
  };
  A.MgSig_toJson_closure0.prototype = {
    call$1(e) {
      return A.BytesUtils_toHexString(type$.List_int._as(e), true, null);
    },
    $signature: 18
  };
  A.BulletproofPrunable.prototype = {};
  A.RctSigPrunableCLSAG.prototype = {
    createLayout$1$property(property) {
      return A.RctSigPrunableCLSAG_layout(0, 0, property);
    },
    toLayoutStruct$0() {
      var t1 = this.bulletproof,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>"),
        t4 = this.clsag,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["bulletproof", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.RctSigPrunableCLSAG_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E")), "clsag", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.RctSigPrunableCLSAG_toLayoutStruct_closure0()), t6), true, t6._eval$1("ListIterable.E")), "pseudoOuts", this.pseudoOuts], type$.String, type$.dynamic);
    },
    get$bulletproof() {
      return this.bulletproof;
    }
  };
  A.RctSigPrunableCLSAG_closure.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return A.List_List$unmodifiable(e, type$.int);
    },
    $signature: 2
  };
  A.RctSigPrunableCLSAG_RctSigPrunableCLSAG$fromStruct_closure.prototype = {
    call$1(e) {
      return A.Clsag_Clsag$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 73
  };
  A.RctSigPrunableCLSAG_RctSigPrunableCLSAG$fromStruct_closure0.prototype = {
    call$1(e) {
      return A.Bulletproof_Bulletproof$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 47
  };
  A.RctSigPrunableCLSAG_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.Bulletproof._as(e).toLayoutStruct$0();
    },
    $signature: 48
  };
  A.RctSigPrunableCLSAG_toLayoutStruct_closure0.prototype = {
    call$1(e) {
      return type$.Clsag._as(e).toLayoutStruct$0();
    },
    $signature: 74
  };
  A.RctSigPrunableBulletproof2.prototype = {
    createLayout$1$property(property) {
      return A.RctSigPrunableBulletproof2_layout(0, 0, property);
    },
    toLayoutStruct$0() {
      var t1 = this.bulletproof,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>"),
        t4 = this.mgs,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["bulletproof", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.RctSigPrunableBulletproof2_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E")), "pseudoOuts", this.pseudoOuts, "mgs", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.RctSigPrunableBulletproof2_toLayoutStruct_closure0()), t6), true, t6._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    },
    get$bulletproof() {
      return this.bulletproof;
    }
  };
  A.RctSigPrunableBulletproof2_closure.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return A.List_List$unmodifiable(e, type$.int);
    },
    $signature: 2
  };
  A.RctSigPrunableBulletproof2_RctSigPrunableBulletproof2$fromStruct_closure.prototype = {
    call$1(e) {
      return A.Bulletproof_Bulletproof$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 47
  };
  A.RctSigPrunableBulletproof2_RctSigPrunableBulletproof2$fromStruct_closure0.prototype = {
    call$1(e) {
      return A.MgSig_MgSig$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 49
  };
  A.RctSigPrunableBulletproof2_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.Bulletproof._as(e).toLayoutStruct$0();
    },
    $signature: 48
  };
  A.RctSigPrunableBulletproof2_toLayoutStruct_closure0.prototype = {
    call$1(e) {
      return type$.MgSig._as(e).toLayoutStruct$0();
    },
    $signature: 50
  };
  A.RctSigPrunableBulletproof.prototype = {
    createLayout$1$property(property) {
      return A.RctSigPrunableBulletproof_layout(0, 0, property);
    },
    toLayoutStruct$0() {
      var t1 = this.bulletproof,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>"),
        t4 = this.mgs,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["d", 0, "bulletproof", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.RctSigPrunableBulletproof_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E")), "pseudoOuts", this.pseudoOuts, "mgs", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.RctSigPrunableBulletproof_toLayoutStruct_closure0()), t6), true, t6._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    },
    get$bulletproof() {
      return this.bulletproof;
    }
  };
  A.RctSigPrunableBulletproof_closure.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return A.List_List$unmodifiable(e, type$.int);
    },
    $signature: 2
  };
  A.RctSigPrunableBulletproof_RctSigPrunableBulletproof$fromStruct_closure.prototype = {
    call$1(e) {
      return A.Bulletproof_Bulletproof$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 47
  };
  A.RctSigPrunableBulletproof_RctSigPrunableBulletproof$fromStruct_closure0.prototype = {
    call$1(e) {
      return A.MgSig_MgSig$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 49
  };
  A.RctSigPrunableBulletproof_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.Bulletproof._as(e).toLayoutStruct$0();
    },
    $signature: 48
  };
  A.RctSigPrunableBulletproof_toLayoutStruct_closure0.prototype = {
    call$1(e) {
      return type$.MgSig._as(e).toLayoutStruct$0();
    },
    $signature: 50
  };
  A.BoroSig.prototype = {
    createLayout$1$property(property) {
      return A.BoroSig_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["s0", this.s0, "s1", this.s1, "ee", this.ee], type$.String, type$.dynamic);
    }
  };
  A.BoroSig_closure.prototype = {
    call$1(e) {
      var t1;
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      t1 = type$.int;
      return A.ListValidator_exc(A.List_List$unmodifiable(e, t1), 32, "BoroSig s0", t1);
    },
    $signature: 2
  };
  A.BoroSig_closure0.prototype = {
    call$1(e) {
      var t1;
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      t1 = type$.int;
      return A.ListValidator_exc(A.List_List$unmodifiable(e, t1), 32, "BoroSig s1", t1);
    },
    $signature: 2
  };
  A.RangeSig.prototype = {
    createLayout$1$property(property) {
      return A.RangeSig_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["asig", this.asig.toLayoutStruct$0(), "ci", this.ci], type$.String, type$.dynamic);
    }
  };
  A.RangeSig_closure.prototype = {
    call$1(e) {
      var t1;
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      t1 = type$.int;
      return A.ListValidator_exc(A.List_List$unmodifiable(e, t1), 32, "RangeSig ci", t1);
    },
    $signature: 2
  };
  A.RctSigPrunableRangeSigs.prototype = {
    createLayout$1$property(property) {
      return A.RctSigPrunableRangeSigs_layout(0, 0, 0, property, B.RCTType_rctTypeSimple_2);
    },
    toLayoutStruct$0() {
      var t1 = this.rangeSig,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>"),
        t4 = this.mgs,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["rangeSig", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.RctSigPrunableRangeSigs_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E")), "mgs", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.RctSigPrunableRangeSigs_toLayoutStruct_closure0()), t6), true, t6._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    }
  };
  A.RctSigPrunableRangeSigs_RctSigPrunableRangeSigs$fromStruct_closure.prototype = {
    call$1(e) {
      var t2, t3,
        t1 = type$.Map_String_dynamic;
      t1._as(e);
      t1 = A.QuickMap_asMap(e, "asig", t1);
      t2 = A.QuickMap_asListBytes(t1, "s0");
      t2.toString;
      t3 = A.QuickMap_asListBytes(t1, "s1");
      t3.toString;
      t3 = A.BoroSig$(A.QuickMap_asBytes(t1, "ee", type$.List_int), t2, t3);
      t2 = A.QuickMap_asListBytes(e, "ci");
      t2.toString;
      return A.RangeSig$(t3, t2);
    },
    $signature: 157
  };
  A.RctSigPrunableRangeSigs_RctSigPrunableRangeSigs$fromStruct_closure0.prototype = {
    call$1(e) {
      return A.MgSig_MgSig$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 49
  };
  A.RctSigPrunableRangeSigs_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.RangeSig._as(e).toLayoutStruct$0();
    },
    $signature: 158
  };
  A.RctSigPrunableRangeSigs_toLayoutStruct_closure0.prototype = {
    call$1(e) {
      return type$.MgSig._as(e).toLayoutStruct$0();
    },
    $signature: 50
  };
  A.MoneroTxSignatures.prototype = {
    cast$1$0(_, $T) {
      A.checkTypeBound($T, type$.MoneroTxSignatures, "T", "cast");
      if (!$T._is(this))
        throw A.wrapException(A.DartMoneroPluginException$("MoneroTxSignatures casting failed.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", A.createRuntimeType($T).toString$0(0), "type", A.getRuntimeTypeOfDartObject(this).toString$0(0)], type$.String, type$.dynamic)));
      return $T._as(this);
    }
  };
  A.RCTSignature.prototype = {
    createLayout$1$property(property) {
      var _null = null;
      return A.RCTSignature_layout(this.rctSigPrunable != null, _null, _null, _null, property, _null);
    },
    toLayoutStruct$0() {
      var t4,
        t1 = this.signature,
        t2 = type$.String,
        t3 = type$.dynamic;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal([t1.get$variantName(), t1.toLayoutStruct$0()], t2, t3);
      t4 = this.rctSigPrunable;
      t4 = t4 == null ? null : t4.toLayoutStruct$0();
      return A.LinkedHashMap_LinkedHashMap$_literal(["v2", t1, "rctSigPrunable", t4 == null ? A.LinkedHashMap_LinkedHashMap$_empty(t2, t3) : t4], t2, t3);
    }
  };
  A.RCTSignature_RCTSignature$fromStruct_closure.prototype = {
    call$1(e) {
      var t1;
      type$.nullable_Map_String_dynamic._as(e);
      t1 = e == null ? null : e.get$isEmpty(e);
      if (t1 !== false)
        return null;
      e.toString;
      return A.RctSigPrunable_RctSigPrunable$fromStruct(e, this.sig.type);
    },
    $signature: 159
  };
  A.RCTSignature_layout_closure.prototype = {
    call$1$property(property) {
      return A.RCTSignatureBase_layout(this.inputLength, this.outputLength, property);
    },
    call$0() {
      return this.call$1$property(null);
    },
    $signature: 3
  };
  A.RCTSignature_layout_closure0.prototype = {
    call$4$action$property$remindBytes$sourceOrResult(action, property, remindBytes, sourceOrResult) {
      var t1, t2, t3, t4, t5, mixinLength, ringTypeStr, type, _this = this, _null = null;
      type$.nullable_Map_String_dynamic._as(sourceOrResult);
      t1 = _this.transaction;
      if (t1 != null) {
        t2 = t1.signature;
        t3 = type$.RCTSignature_RCTSignatureBase_RctSigPrunable;
        if (t2.cast$1$0(0, t3).rctSigPrunable == null)
          return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, _null);
        t1 = t1.vin;
        t4 = t1.length;
        if (t4 !== 0) {
          if (0 >= t4)
            return A.ioore(t1, 0);
          t5 = t1[0].type === B.MoneroTxinType_TxinToKey_2;
        } else
          t5 = false;
        if (t5) {
          if (0 >= t4)
            return A.ioore(t1, 0);
          mixinLength = J.cast$1$0$ax(t1[0], type$.TxinToKey).keyOffsets.length;
        } else
          mixinLength = 0;
        t1 = _this.outputLength;
        if (t1 == null)
          t1 = 0;
        t3 = t2.cast$1$0(0, t3);
        t2 = _this.inputLength;
        if (t2 == null)
          t2 = 0;
        return A.RctSigPrunable_layout(t2, mixinLength, t1, t3.signature.type);
      }
      t1 = sourceOrResult == null ? _null : sourceOrResult.$index(0, "v2");
      type$.nullable_Map_dynamic_dynamic._as(t1);
      ringTypeStr = A._asStringQ(t1 == null ? _null : t1.$index(0, "key"));
      if (ringTypeStr == null)
        return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, _null);
      if (remindBytes === 0 && !_this.forcePrunable)
        return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, _null);
      type = A.RCTType_fromName(ringTypeStr);
      if (type === B.RCTType_rctTypeNull_0)
        return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, _null);
      t1 = _this.outputLength;
      if (t1 == null)
        t1 = 0;
      t2 = _this.inputLength;
      if (t2 == null)
        t2 = 0;
      t3 = _this.mixinLength;
      return A.RctSigPrunable_layout(t2, t3 == null ? 0 : t3, t1, type);
    },
    call$3$action$remindBytes$sourceOrResult(action, remindBytes, sourceOrResult) {
      return this.call$4$action$property$remindBytes$sourceOrResult(action, null, remindBytes, sourceOrResult);
    },
    $signature: 80
  };
  A.MoneroV1Signature.prototype = {
    createLayout$1$property(property) {
      return A.MoneroV1Signature_layout(null, property, null);
    },
    toLayoutStruct$0() {
      var t2, t3,
        t1 = this.signature;
      if (t1 == null)
        t1 = null;
      else {
        t2 = A._arrayInstanceType(t1);
        t3 = t2._eval$1("MappedListIterable<1,Map<String,List<int>>>");
        t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,List<int>>(1)")._as(new A.MoneroV1Signature_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E"));
        t1 = t3;
      }
      return A.LinkedHashMap_LinkedHashMap$_literal(["v1", t1 == null ? A.LinkedHashSet_LinkedHashSet$_empty(type$.dynamic) : t1], type$.String, type$.dynamic);
    }
  };
  A.MoneroV1Signature_MoneroV1Signature$fromStruct_closure.prototype = {
    call$1(e) {
      return A.List_List$from(type$.Iterable_dynamic._as(type$.Map_String_dynamic._as(e).$index(0, "signature")), true, type$.int);
    },
    $signature: 162
  };
  A.MoneroV1Signature_layout_closure.prototype = {
    call$1$property(property) {
      var t1 = A.LazyStructLayout_LazyStructLayout(A._setArrayType([new A.ConditionalLazyLayout(new A.MoneroV1Signature_layout__closure(this._box_0, this.signatureLength), "signature", type$.ConditionalLazyLayout_dynamic)], type$.JSArray_BaseLazyLayout_dynamic), false, null),
        t2 = this.inputLength;
      if (t2 == null)
        t2 = 0;
      return A.SequenceLayout_SequenceLayout(new A.ConstantLayout(t2, 0, "aa", type$.ConstantLayout_dynamic), t1, null, type$.dynamic);
    },
    call$0() {
      return this.call$1$property(null);
    },
    $signature: 163
  };
  A.MoneroV1Signature_layout__closure.prototype = {
    call$4$action$property$remindBytes$sourceOrResult(action, property, remindBytes, sourceOrResult) {
      var sigLen, t1, t2, _this = this;
      try {
        t1 = _this.signatureLength;
        if (t1 == null)
          t1 = null;
        else {
          t2 = _this._box_0.offset;
          if (!(t2 < t1.length))
            return A.ioore(t1, t2);
          t2 = t1[t2];
          t1 = t2;
        }
        sigLen = (t1 == null ? 0 : t1) * 64;
        t1 = A.RawBytesLayout_RawBytesLayout(sigLen, null);
        return t1;
      } finally {
        if (action === B.LayoutAction_2) {
          t1 = _this.signatureLength;
          t1 = t1 != null && _this._box_0.offset + 1 < t1.length;
        } else
          t1 = false;
        if (t1)
          ++_this._box_0.offset;
      }
    },
    call$3$action$remindBytes$sourceOrResult(action, remindBytes, sourceOrResult) {
      return this.call$4$action$property$remindBytes$sourceOrResult(action, null, remindBytes, sourceOrResult);
    },
    $signature: 164
  };
  A.MoneroV1Signature_toLayoutStruct_closure.prototype = {
    call$1(e) {
      var t1 = type$.List_int;
      return A.LinkedHashMap_LinkedHashMap$_literal(["signature", t1._as(e)], type$.String, t1);
    },
    $signature: 165
  };
  A.RCTType.prototype = {
    get$isSimple() {
      switch (this) {
        case B.RCTType_rctTypeSimple_2:
        case B.RCTType_rctTypeBulletproof_3:
        case B.RCTType_rctTypeBulletproof2_4:
        case B.RCTType_rctTypeCLSAG_5:
        case B.RCTType_rctTypeBulletproofPlus_6:
          return true;
        default:
          return false;
      }
    },
    get$isBulletproof() {
      switch (this) {
        case B.RCTType_rctTypeBulletproof_3:
        case B.RCTType_rctTypeBulletproof2_4:
        case B.RCTType_rctTypeCLSAG_5:
          return true;
        default:
          return false;
      }
    },
    get$isBulletproofPlus() {
      switch (this) {
        case B.RCTType_rctTypeBulletproofPlus_6:
          return true;
        default:
          return false;
      }
    },
    toString$0(_) {
      return "RCTType." + this.name;
    },
    get$value() {
      return this.value;
    }
  };
  A.RCTType_fromName_closure.prototype = {
    call$1(e) {
      return type$.RCTType._as(e).name === this.name;
    },
    $signature: 166
  };
  A.RCTType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartMoneroPluginException$("Invalid RCTSig type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", this.name], type$.String, type$.dynamic)));
    },
    $signature: 1
  };
  A.EcdhInfoVersion.prototype = {
    toString$0(_) {
      return "EcdhInfoVersion." + this.name;
    }
  };
  A.EcdhTuple.prototype = {};
  A.EcdhInfo.prototype = {};
  A.RCTSignatureBase.prototype = {
    createVariantLayout$1$property(property) {
      return A.RCTSignatureBase_layout(null, null, property);
    },
    get$variantName() {
      return this.type.name;
    },
    get$ecdhInfo() {
      return this.ecdhInfo;
    },
    get$outPk() {
      return this.outPk;
    }
  };
  A.RCTSignatureBase_closure0.prototype = {
    call$1(e) {
      var t1;
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      t1 = type$.int;
      return A.ListValidator_exc(A.List_List$unmodifiable(e, t1), 32, "pseudoOuts", t1);
    },
    $signature: 2
  };
  A.RCTSignatureBase_closure.prototype = {
    call$1(e) {
      return A.List_List$unmodifiable(type$.List_CtKey._as(e), type$.CtKey);
    },
    $signature: 167
  };
  A.RCTSignatureBase_layout_closure.prototype = {
    call$1$property(property) {
      return A.RCTFull_layout(this.outputLength, property);
    },
    call$0() {
      return this.call$1$property(null);
    },
    $signature: 3
  };
  A.RCTSignatureBase_layout_closure0.prototype = {
    call$1$property(property) {
      return A.RCTSimple_layout(this.inputLength, this.outputLength, property);
    },
    call$0() {
      return this.call$1$property(null);
    },
    $signature: 3
  };
  A.RCTSignatureBase_layout_closure1.prototype = {
    call$1$property(property) {
      return A.RCTBulletproof_layout(this.outputLength, property);
    },
    call$0() {
      return this.call$1$property(null);
    },
    $signature: 3
  };
  A.RCTSignatureBase_layout_closure2.prototype = {
    call$1$property(property) {
      return A.RCTCLSAG_layout(this.outputLength, property);
    },
    call$0() {
      return this.call$1$property(null);
    },
    $signature: 3
  };
  A.RCTSignatureBase_layout_closure3.prototype = {
    call$1$property(property) {
      return A.RCTCLSAG_layout(this.outputLength, property);
    },
    call$0() {
      return this.call$1$property(null);
    },
    $signature: 3
  };
  A.RCTSignatureBase_layout_closure4.prototype = {
    call$1$property(property) {
      return A.RCTCLSAG_layout(this.outputLength, property);
    },
    call$0() {
      return this.call$1$property(null);
    },
    $signature: 3
  };
  A.EcdhInfoV2.prototype = {
    createLayout$1$property(property) {
      return A.EcdhInfoV2_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["amount", this.amount], type$.String, type$.dynamic);
    },
    get$version() {
      return B.EcdhInfoVersion_V2;
    },
    get$amount() {
      return this.amount;
    }
  };
  A.EcdhInfoV1.prototype = {
    createLayout$1$property(property) {
      return A.EcdhInfoV1_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["amount", this.amount, "mask", this.mask], type$.String, type$.dynamic);
    },
    get$version() {
      return B.EcdhInfoVersion_V1;
    },
    get$amount() {
      return this.amount;
    }
  };
  A.RCTNull.prototype = {
    createLayout$1$property(property) {
      return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
    },
    get$ecdhInfo() {
      return A.throwExpression(B.DartMoneroPluginException_SNv);
    },
    get$outPk() {
      return A.throwExpression(B.DartMoneroPluginException_0);
    }
  };
  A.RCTCLSAG.prototype = {
    createLayout$1$property(property) {
      return A.RCTCLSAG_layout(this.outPk.length, property);
    },
    toLayoutStruct$0() {
      var t1 = this.ecdhInfo,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>"),
        t4 = this.outPk,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,List<int>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["txnFee", this.txnFee, "ecdhInfo", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.RCTCLSAG_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E")), "outPk", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("List<int>(1)")._as(new A.RCTCLSAG_toLayoutStruct_closure0()), t6), true, t6._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    }
  };
  A.RCTCLSAG_RCTCLSAG$fromStruct_closure.prototype = {
    call$1(e) {
      var t2,
        t1 = A.QuickMap_asBytes(type$.Map_String_dynamic._as(e), "amount", type$.List_int);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      return new A.EcdhInfoV2(A.ListValidator_exc(A.List_List$unmodifiable(t1, t2), 8, "EcdhInfoV2", t2));
    },
    $signature: 46
  };
  A.RCTCLSAG_RCTCLSAG$fromStruct_closure0.prototype = {
    call$1(e) {
      var t1, t2;
      type$.List_int._as(e);
      t1 = A.RCT_zero(true);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(t1, t2), 32, t2);
      A.BytesUtils_validateListOfBytes(e);
      return new A.CtKey(t1, A.ListHelper_exceptedLen(A.List_List$unmodifiable(e, t2), 32, t2));
    },
    $signature: 23
  };
  A.RCTCLSAG_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.EcdhInfo._as(e).toLayoutStruct$0();
    },
    $signature: 34
  };
  A.RCTCLSAG_toLayoutStruct_closure0.prototype = {
    call$1(e) {
      return type$.CtKey._as(e).mask;
    },
    $signature: 35
  };
  A.RCTSimple.prototype = {
    createLayout$1$property(property) {
      return A.RCTSimple_layout(this.pseudoOuts.length, this.outPk.length, property);
    },
    toLayoutStruct$0() {
      var _this = this,
        t1 = _this.ecdhInfo,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>"),
        t4 = _this.outPk,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,List<int>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["txnFee", _this.txnFee, "pseudoOuts", _this.pseudoOuts, "ecdhInfo", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.RCTSimple_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E")), "outPk", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("List<int>(1)")._as(new A.RCTSimple_toLayoutStruct_closure0()), t6), true, t6._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    }
  };
  A.RCTSimple_RCTSimple$fromStruct_closure.prototype = {
    call$1(e) {
      return A.EcdhInfoV1_EcdhInfoV1$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 51
  };
  A.RCTSimple_RCTSimple$fromStruct_closure0.prototype = {
    call$1(e) {
      var t1, t2;
      type$.List_int._as(e);
      t1 = A.RCT_zero(true);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(t1, t2), 32, t2);
      A.BytesUtils_validateListOfBytes(e);
      return new A.CtKey(t1, A.ListHelper_exceptedLen(A.List_List$unmodifiable(e, t2), 32, t2));
    },
    $signature: 23
  };
  A.RCTSimple_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.EcdhInfo._as(e).toLayoutStruct$0();
    },
    $signature: 34
  };
  A.RCTSimple_toLayoutStruct_closure0.prototype = {
    call$1(e) {
      return type$.CtKey._as(e).mask;
    },
    $signature: 35
  };
  A.RCTBulletproof2.prototype = {};
  A.RCTBulletproof2_RCTBulletproof2$fromStruct_closure.prototype = {
    call$1(e) {
      var t2,
        t1 = A.QuickMap_asBytes(type$.Map_String_dynamic._as(e), "amount", type$.List_int);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      return new A.EcdhInfoV2(A.ListValidator_exc(A.List_List$unmodifiable(t1, t2), 8, "EcdhInfoV2", t2));
    },
    $signature: 46
  };
  A.RCTBulletproof2_RCTBulletproof2$fromStruct_closure0.prototype = {
    call$1(e) {
      var t1, t2;
      type$.List_int._as(e);
      t1 = A.RCT_zero(true);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(t1, t2), 32, t2);
      A.BytesUtils_validateListOfBytes(e);
      return new A.CtKey(t1, A.ListHelper_exceptedLen(A.List_List$unmodifiable(e, t2), 32, t2));
    },
    $signature: 23
  };
  A.RCTBulletproofPlus.prototype = {};
  A.RCTBulletproofPlus_RCTBulletproofPlus$fromStruct_closure.prototype = {
    call$1(e) {
      var t2,
        t1 = A.QuickMap_asBytes(type$.Map_String_dynamic._as(e), "amount", type$.List_int);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      return new A.EcdhInfoV2(A.ListValidator_exc(A.List_List$unmodifiable(t1, t2), 8, "EcdhInfoV2", t2));
    },
    $signature: 46
  };
  A.RCTBulletproofPlus_RCTBulletproofPlus$fromStruct_closure0.prototype = {
    call$1(e) {
      var t1, t2;
      type$.List_int._as(e);
      t1 = A.RCT_zero(true);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(t1, t2), 32, t2);
      A.BytesUtils_validateListOfBytes(e);
      return new A.CtKey(t1, A.ListHelper_exceptedLen(A.List_List$unmodifiable(e, t2), 32, t2));
    },
    $signature: 23
  };
  A.RCTFull.prototype = {
    createLayout$1$property(property) {
      return A.RCTFull_layout(this.outPk.length, property);
    },
    toLayoutStruct$0() {
      var t1 = this.ecdhInfo,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>"),
        t4 = this.outPk,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,List<int>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["txnFee", this.txnFee, "ecdhInfo", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.RCTFull_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E")), "outPk", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("List<int>(1)")._as(new A.RCTFull_toLayoutStruct_closure0()), t6), true, t6._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    }
  };
  A.RCTFull_RCTFull$fromStruct_closure.prototype = {
    call$1(e) {
      return A.EcdhInfoV1_EcdhInfoV1$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 51
  };
  A.RCTFull_RCTFull$fromStruct_closure0.prototype = {
    call$1(e) {
      var t1, t2;
      type$.List_int._as(e);
      t1 = A.RCT_zero(true);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(t1, t2), 32, t2);
      A.BytesUtils_validateListOfBytes(e);
      return new A.CtKey(t1, A.ListHelper_exceptedLen(A.List_List$unmodifiable(e, t2), 32, t2));
    },
    $signature: 23
  };
  A.RCTFull_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.EcdhInfo._as(e).toLayoutStruct$0();
    },
    $signature: 34
  };
  A.RCTFull_toLayoutStruct_closure0.prototype = {
    call$1(e) {
      return type$.CtKey._as(e).mask;
    },
    $signature: 35
  };
  A.RCTBulletproof.prototype = {
    createLayout$1$property(property) {
      return A.RCTBulletproof_layout(this.outPk.length, property);
    },
    toLayoutStruct$0() {
      var t1 = this.ecdhInfo,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>"),
        t4 = this.outPk,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,List<int>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["txnFee", this.txnFee, "ecdhInfo", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.RCTBulletproof_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E")), "outPk", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("List<int>(1)")._as(new A.RCTBulletproof_toLayoutStruct_closure0()), t6), true, t6._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    }
  };
  A.RCTBulletproof_RCTBulletproof$fromStruct_closure.prototype = {
    call$1(e) {
      return A.EcdhInfoV1_EcdhInfoV1$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 51
  };
  A.RCTBulletproof_RCTBulletproof$fromStruct_closure0.prototype = {
    call$1(e) {
      var t1, t2;
      type$.List_int._as(e);
      t1 = A.RCT_zero(true);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(t1, t2), 32, t2);
      A.BytesUtils_validateListOfBytes(e);
      return new A.CtKey(t1, A.ListHelper_exceptedLen(A.List_List$unmodifiable(e, t2), 32, t2));
    },
    $signature: 23
  };
  A.RCTBulletproof_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.EcdhInfo._as(e).toLayoutStruct$0();
    },
    $signature: 34
  };
  A.RCTBulletproof_toLayoutStruct_closure0.prototype = {
    call$1(e) {
      return type$.CtKey._as(e).mask;
    },
    $signature: 35
  };
  A.TxExtraTypes.prototype = {
    get$value() {
      return this.value;
    }
  };
  A.TxExtraTypes_fromName_closure.prototype = {
    call$1(e) {
      return type$.TxExtraTypes._as(e).name === this.name;
    },
    $signature: 173
  };
  A.TxExtraTypes_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartMoneroPluginException$("Invalid tx extra type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", this.name], type$.String, type$.dynamic)));
    },
    $signature: 1
  };
  A.TxExtra.prototype = {
    createVariantLayout$1$property(property) {
      return A.TxExtra_layout(property);
    },
    toLayoutStruct$0() {
      throw A.wrapException(A.UnimplementedError$(null));
    },
    createLayout$1$property(property) {
      throw A.wrapException(A.UnimplementedError$(null));
    },
    get$variantName() {
      return this.type.name;
    },
    cast$1$0(_, $T) {
      A.checkTypeBound($T, type$.TxExtra, "T", "cast");
      if (!$T._is(this))
        throw A.wrapException(A.DartMoneroPluginException$("Casting tx extra failed.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", A.createRuntimeType($T).toString$0(0), "type", this.type.name], type$.String, type$.dynamic)));
      return $T._as(this);
    }
  };
  A.TxExtraPublicKey.prototype = {
    createLayout$1$property(property) {
      return A.TxExtraPublicKey_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["publicKey", this.publicKey.publicKey._encoded], type$.String, type$.dynamic);
    }
  };
  A.TxExtraNonce.prototype = {
    createLayout$1$property(property) {
      return A.TxExtraNonce_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["nonce", this.nonce], type$.String, type$.dynamic);
    }
  };
  A.TxExtraAdditionalPubKeys.prototype = {
    createLayout$1$property(property) {
      return A.TxExtraAdditionalPubKeys_layout(property);
    },
    toLayoutStruct$0() {
      var t1 = this.pubKeys,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,List<int>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["pubKeys", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("List<int>(1)")._as(new A.TxExtraAdditionalPubKeys_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    }
  };
  A.TxExtraAdditionalPubKeys_TxExtraAdditionalPubKeys$fromStruct_closure.prototype = {
    call$1(e) {
      return A.MoneroPublicKey_MoneroPublicKey$fromBytes(type$.List_int._as(e));
    },
    $signature: 31
  };
  A.TxExtraAdditionalPubKeys_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.MoneroPublicKey._as(e).publicKey._encoded;
    },
    $signature: 36
  };
  A.MoneroTxinType.prototype = {};
  A.MoneroTxinType_fromName_closure.prototype = {
    call$1(e) {
      return type$.MoneroTxinType._as(e).name === this.name;
    },
    $signature: 175
  };
  A.MoneroTxinType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartMoneroPluginException$("Invalid Txin type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", this.name], type$.String, type$.dynamic)));
    },
    $signature: 1
  };
  A.MoneroTxin.prototype = {
    createVariantLayout$1$property(property) {
      return A.MoneroTxin_layout(property);
    },
    get$variantName() {
      return this.type.name;
    },
    cast$1$0(_, $T) {
      A.checkTypeBound($T, type$.MoneroTxin, "T", "cast");
      if (!$T._is(this))
        throw A.wrapException(A.DartMoneroPluginException$("MoneroTxin casting failed.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", A.createRuntimeType($T).toString$0(0), "type", this.type.name], type$.String, type$.dynamic)));
      return $T._as(this);
    }
  };
  A.TxinToKey.prototype = {
    createLayout$1$property(property) {
      return A.TxinToKey_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["amount", this.amount, "key_offsets", this.keyOffsets, "k_image", this.keyImage], type$.String, type$.dynamic);
    },
    toJson$0() {
      var t1 = this.keyOffsets,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,String>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["amount", this.amount.toString$0(0), "keyOffsets", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.TxinToKey_toJson_closure()), t3), true, t3._eval$1("ListIterable.E")), "keyImage", A.BytesUtils_toHexString(this.keyImage, true, null)], type$.String, type$.dynamic);
    }
  };
  A.TxinToKey_closure.prototype = {
    call$1(e) {
      return A.BigIntHelper_get_asUint64(type$.BigInt._as(e));
    },
    $signature: 176
  };
  A.TxinToKey_toJson_closure.prototype = {
    call$1(e) {
      return type$.BigInt._as(e).toString$0(0);
    },
    $signature: 177
  };
  A.TxinToScriptHash.prototype = {
    createLayout$1$property(property) {
      return A.TxinToScriptHash_layout(property);
    },
    toLayoutStruct$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["prev", _this.prev, "prevout", _this.prevout, "script", _this.script.toLayoutStruct$0(), "sigset", _this.sigset], type$.String, type$.dynamic);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["prevout", _this.prevout.toString$0(0), "script", _this.script.toJson$0(), "prev", A.BytesUtils_toHexString(_this.prev, true, null), "sigset", A.BytesUtils_toHexString(_this.sigset, true, null)], type$.String, type$.dynamic);
    }
  };
  A.TxinToScript.prototype = {
    createLayout$1$property(property) {
      return A.TxinToScript_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["prev", this.prev, "prevout", this.prevout, "sigset", this.sigset], type$.String, type$.dynamic);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["prevout", this.prevout.toString$0(0), "prev", A.BytesUtils_toHexString(this.prev, true, null), "sigset", A.BytesUtils_toHexString(this.sigset, true, null)], type$.String, type$.dynamic);
    }
  };
  A.TxinGen.prototype = {
    createLayout$1$property(property) {
      return A.TxinGen_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["height", this.height], type$.String, type$.dynamic);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["height", this.height.toString$0(0)], type$.String, type$.dynamic);
    }
  };
  A.TxOutTargetType.prototype = {};
  A.TxOutTargetType_fromName_closure.prototype = {
    call$1(e) {
      return type$.TxOutTargetType._as(e).name === this.name;
    },
    $signature: 178
  };
  A.TxOutTargetType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartMoneroPluginException$("Invalid Txout target type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", this.name], type$.String, type$.dynamic)));
    },
    $signature: 1
  };
  A.TxoutTarget.prototype = {
    createVariantLayout$1$property(property) {
      return A.TxoutTarget_layout(property);
    },
    get$variantName() {
      return this.type.name;
    },
    cast$1$0(_, $T) {
      A.checkTypeBound($T, type$.TxoutTarget, "T", "cast");
      if (!$T._is(this))
        throw A.wrapException(A.DartMoneroPluginException$("TxoutTarget casting failed.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", A.createRuntimeType($T).toString$0(0), "type", A.getRuntimeTypeOfDartObject(this).toString$0(0)], type$.String, type$.dynamic)));
      return $T._as(this);
    },
    getPublicKey$0() {
      switch (this.type) {
        case B.TxOutTargetType_TxoutToKey_2:
          return this.cast$1$0(0, type$.TxoutToKey).key;
        case B.TxOutTargetType_TxoutToTaggedKey_3:
          return this.cast$1$0(0, type$.TxoutToTaggedKey).key;
        default:
          return null;
      }
    },
    getViewTag$0() {
      switch (this.type) {
        case B.TxOutTargetType_TxoutToTaggedKey_3:
          return this.cast$1$0(0, type$.TxoutToTaggedKey).viewTag;
        default:
          return null;
      }
    }
  };
  A.TxoutToScript.prototype = {
    createLayout$1$property(property) {
      return A.TxoutToScript_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["keys", this.keys, "script", this.script], type$.String, type$.dynamic);
    },
    toJson$0() {
      var t1 = this.keys,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,String>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["keys", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.TxoutToScript_toJson_closure()), t3), true, t3._eval$1("ListIterable.E")), "script", A.BytesUtils_toHexString(this.script, true, null)], type$.String, type$.dynamic);
    }
  };
  A.TxoutToScript_closure.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return A.List_List$unmodifiable(e, type$.int);
    },
    $signature: 2
  };
  A.TxoutToScript_toJson_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_toHexString(type$.List_int._as(e), true, null);
    },
    $signature: 18
  };
  A.TxoutToScriptHash.prototype = {
    createLayout$1$property(property) {
      return A.TxoutToScriptHash_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["hash", this.hash], type$.String, type$.dynamic);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["hash", A.BytesUtils_toHexString(this.hash, true, null)], type$.String, type$.dynamic);
    }
  };
  A.TxoutToKey.prototype = {
    createLayout$1$property(property) {
      return A.TxoutToKey_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["key", this.key.publicKey._encoded], type$.String, type$.dynamic);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["key", this.key.toHex$0()], type$.String, type$.dynamic);
    }
  };
  A.TxoutToTaggedKey.prototype = {
    createLayout$1$property(property) {
      return A.TxoutToTaggedKey_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["key", this.key.publicKey._encoded, "view_tag", this.viewTag], type$.String, type$.dynamic);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["key", this.key.toHex$0(), "view_tag", this.viewTag], type$.String, type$.dynamic);
    }
  };
  A.MoneroTxout.prototype = {
    createLayout$1$property(property) {
      return A.MoneroTxout_layout(property);
    },
    toLayoutStruct$0() {
      var t1 = this.target,
        t2 = type$.String,
        t3 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["amount", this.amount, "target", A.LinkedHashMap_LinkedHashMap$_literal([t1.get$variantName(), t1.toLayoutStruct$0()], t2, t3)], t2, t3);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["amount", this.amount.toString$0(0), "target", this.target.toJson$0()], type$.String, type$.dynamic);
    }
  };
  A.MoneroTransactionPrefix.prototype = {
    get$txExtras() {
      var result, _this = this,
        value = _this.__MoneroTransactionPrefix_txExtras_FI;
      if (value === $) {
        result = A.MoneroTransactionHelper_extraParsing(_this.extra);
        _this.__MoneroTransactionPrefix_txExtras_FI !== $ && A.throwLateFieldADI("txExtras");
        _this.set$__MoneroTransactionPrefix_txExtras_FI(result);
        value = result;
      }
      return value;
    },
    _getTxExtraPubKey$0() {
      return J.cast$1$0$ax(B.JSArray_methods.firstWhere$2$orElse(this.get$txExtras(), new A.MoneroTransactionPrefix__getTxExtraPubKey_closure(), new A.MoneroTransactionPrefix__getTxExtraPubKey_closure0()), type$.TxExtraPublicKey).publicKey;
    },
    get$txPublicKey() {
      var result, _this = this,
        value = _this.__MoneroTransactionPrefix_txPublicKey_FI;
      if (value === $) {
        result = _this._getTxExtraPubKey$0();
        _this.__MoneroTransactionPrefix_txPublicKey_FI !== $ && A.throwLateFieldADI("txPublicKey");
        _this.__MoneroTransactionPrefix_txPublicKey_FI = result;
        value = result;
      }
      return value;
    },
    _getTxAdditionalPubKeys$0() {
      var t1, exception;
      try {
        t1 = J.cast$1$0$ax(B.JSArray_methods.firstWhere$1(this.get$txExtras(), new A.MoneroTransactionPrefix__getTxAdditionalPubKeys_closure()), type$.TxExtraAdditionalPubKeys);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    get$additionalPubKeys() {
      var value = this.__MoneroTransactionPrefix_additionalPubKeys_AI;
      return value === $ ? this.__MoneroTransactionPrefix_additionalPubKeys_AI = this._getTxAdditionalPubKeys$0() : value;
    },
    getTranactionPrefixHash$0() {
      return A.Keccack_hash(A.MoneroTransactionPrefix_layout(null).serialize$1(this.toLayoutStruct$0()), 32);
    },
    createLayout$1$property(property) {
      return A.MoneroTransactionPrefix_layout(property);
    },
    toLayoutStruct$0() {
      var _this = this,
        t1 = _this.vin,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>"),
        t4 = _this.vout,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["version", _this.version, "unlock_time", _this.unlockTime, "vin", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.MoneroTransactionPrefix_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E")), "vout", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.MoneroTransactionPrefix_toLayoutStruct_closure0()), t6), true, t6._eval$1("ListIterable.E")), "extera", _this.extra], type$.String, type$.dynamic);
    },
    set$__MoneroTransactionPrefix_txExtras_FI(__MoneroTransactionPrefix_txExtras_FI) {
      this.__MoneroTransactionPrefix_txExtras_FI = type$.List_TxExtra._as(__MoneroTransactionPrefix_txExtras_FI);
    }
  };
  A.MoneroTransactionPrefix_layout_closure.prototype = {
    call$1$property(property) {
      return A.MoneroLayoutConst_variantVec(A.MoneroTxin_layout(null), property, type$.Map_String_dynamic);
    },
    call$0() {
      return this.call$1$property(null);
    },
    $signature: 37
  };
  A.MoneroTransactionPrefix_layout_closure0.prototype = {
    call$1$property(property) {
      return A.MoneroLayoutConst_variantVec(A.MoneroTxout_layout(null), property, type$.Map_String_dynamic);
    },
    call$0() {
      return this.call$1$property(null);
    },
    $signature: 37
  };
  A.MoneroTransactionPrefix__getTxExtraPubKey_closure.prototype = {
    call$1(e) {
      return type$.TxExtra._as(e).type === B.TxExtraTypes_publickey_1;
    },
    $signature: 88
  };
  A.MoneroTransactionPrefix__getTxExtraPubKey_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.DartMoneroPluginException_wEo);
    },
    $signature: 1
  };
  A.MoneroTransactionPrefix__getTxAdditionalPubKeys_closure.prototype = {
    call$1(e) {
      return type$.TxExtra._as(e).type === B.TxExtraTypes_additionalPublicKeys_4;
    },
    $signature: 88
  };
  A.MoneroTransactionPrefix_toLayoutStruct_closure.prototype = {
    call$1(e) {
      type$.MoneroTxin._as(e);
      return A.LinkedHashMap_LinkedHashMap$_literal([e.get$variantName(), e.toLayoutStruct$0()], type$.String, type$.dynamic);
    },
    $signature: 53
  };
  A.MoneroTransactionPrefix_toLayoutStruct_closure0.prototype = {
    call$1(e) {
      return type$.MoneroTxout._as(e).toLayoutStruct$0();
    },
    $signature: 38
  };
  A.MoneroTransaction.prototype = {
    createLayout$1$property(property) {
      return A.MoneroTransaction_layout(false, property, this);
    },
    toLayoutStruct$0() {
      var _this = this,
        t1 = _this.vin,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>"),
        t4 = _this.vout,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["version", _this.version, "unlock_time", _this.unlockTime, "vin", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.MoneroTransaction_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E")), "vout", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.MoneroTransaction_toLayoutStruct_closure0()), t6), true, t6._eval$1("ListIterable.E")), "extera", _this.extra, "signature", _this.signature.toLayoutStruct$0()], type$.String, type$.dynamic);
    },
    toJson$0() {
      var _this = this,
        t1 = _this.vin,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>"),
        t4 = _this.vout,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["version", _this.version, "unlock_time", _this.unlockTime.toString$0(0), "vin", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.MoneroTransaction_toJson_closure()), t3), true, t3._eval$1("ListIterable.E")), "vout", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.MoneroTransaction_toJson_closure0()), t6), true, t6._eval$1("ListIterable.E")), "extera", A.BytesUtils_toHexString(_this.extra, true, null)], type$.String, type$.dynamic);
    },
    getTxHash$0() {
      var hash, prefix, sig, t1, t2, t3, t4, t5, baseSigHash, lastPart, t6, mixinLength, _this = this;
      if (_this.version === 1)
        hash = A.Keccack_hash(_this.serialize$0(), 32);
      else {
        prefix = _this.getTranactionPrefixHash$0();
        sig = _this.signature.cast$1$0(0, type$.RCTSignature_RCTSignatureBase_RctSigPrunable);
        t1 = sig.rctSigPrunable;
        if (t1 == null)
          throw A.wrapException(B.DartMoneroPluginException_uwn);
        t2 = _this.vin;
        t3 = t2.length;
        t4 = _this.vout.length;
        t5 = sig.signature;
        baseSigHash = A.Keccack_hash(A.RCTSignatureBase_layout(t3, t4, null).serialize$1(A.LinkedHashMap_LinkedHashMap$_literal([t5.get$variantName(), t5.toLayoutStruct$0()], type$.String, type$.dynamic)), 32);
        t5 = t5.type;
        if (t5 === B.RCTType_rctTypeNull_0)
          lastPart = A.RCT_zero(false);
        else {
          if (t3 !== 0) {
            if (0 >= t3)
              return A.ioore(t2, 0);
            t6 = t2[0].type === B.MoneroTxinType_TxinToKey_2;
          } else
            t6 = false;
          if (t6) {
            if (0 >= t3)
              return A.ioore(t2, 0);
            mixinLength = J.cast$1$0$ax(t2[0], type$.TxinToKey).keyOffsets.length;
          } else
            mixinLength = 0;
          lastPart = A.Keccack_hash(A.RctSigPrunable_layout(t3, mixinLength, t4, t5).serialize$1(t1.toLayoutStruct$0()), 32);
        }
        t1 = A.List_List$of(prefix, true, type$.int);
        B.JSArray_methods.addAll$1(t1, baseSigHash);
        B.JSArray_methods.addAll$1(t1, lastPart);
        hash = A.Keccack_hash(t1, 32);
      }
      return A.BytesUtils_toHexString(hash, true, null);
    }
  };
  A.MoneroTransaction_MoneroTransaction$fromStruct_closure.prototype = {
    call$1(e) {
      return A.MoneroTxin_MoneroTxin$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 183
  };
  A.MoneroTransaction_MoneroTransaction$fromStruct_closure0.prototype = {
    call$1(e) {
      return A.MoneroTxout_MoneroTxout$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 91
  };
  A.MoneroTransaction_layout_closure.prototype = {
    call$1$property(property) {
      return A.MoneroLayoutConst_variantVec(A.MoneroTxin_layout(null), property, type$.Map_String_dynamic);
    },
    call$0() {
      return this.call$1$property(null);
    },
    $signature: 37
  };
  A.MoneroTransaction_layout_closure0.prototype = {
    call$1$property(property) {
      return A.MoneroLayoutConst_variantVec(A.MoneroTxout_layout(null), property, type$.Map_String_dynamic);
    },
    call$0() {
      return this.call$1$property(null);
    },
    $signature: 37
  };
  A.MoneroTransaction_layout_closure1.prototype = {
    call$4$action$property$remindBytes$sourceOrResult(action, property, remindBytes, sourceOrResult) {
      var t1, t2, signatureLength, t3, i, input, t4, outputLength, inputLength, version, vin0, mixinLength, _null = null,
        _s11_ = "key_offsets",
        _s9_ = "TxinToKey";
      type$.nullable_Map_String_dynamic._as(sourceOrResult);
      t1 = this.transaction;
      if (t1 != null) {
        if (t1.version === 1) {
          if (t1.signature.cast$1$0(0, type$.MoneroV1Signature).signature == null)
            return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, _null);
          t1 = t1.vin;
          t2 = t1.length;
          signatureLength = A.List_List$filled(t2, 0, false, type$.int);
          for (t3 = type$.TxinToKey, i = 0; i < t2; ++i) {
            input = t1[i];
            if (input.type === B.MoneroTxinType_TxinToKey_2)
              B.JSArray_methods.$indexSet(signatureLength, i, input.cast$1$0(0, t3).keyOffsets.length);
          }
          return A.MoneroV1Signature_layout(t2, _null, signatureLength);
        }
        t2 = t1.vout;
        return A.RCTSignature_layout(this.forcePrunable, t1.vin.length, _null, t2.length, _null, t1);
      }
      t2 = sourceOrResult == null;
      t3 = t2 ? _null : sourceOrResult.$index(0, "vout");
      t4 = type$.nullable_List_dynamic;
      t4._as(t3);
      outputLength = t3 == null ? _null : J.get$length$asx(t3);
      if (outputLength == null)
        outputLength = 0;
      t3 = t4._as(t2 ? _null : sourceOrResult.$index(0, "vin"));
      inputLength = t3 == null ? _null : J.get$length$asx(t3);
      if (inputLength == null)
        inputLength = 0;
      version = t2 ? _null : sourceOrResult.$index(0, "version");
      signatureLength = A.List_List$filled(inputLength, 0, false, type$.int);
      if (J.$eq$(version, 1)) {
        if (remindBytes === 0)
          return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, _null);
        for (t1 = type$.List_dynamic, t2 = type$.Map_String_dynamic, i = 0; i < inputLength; ++i) {
          vin0 = t2._as(J.$index$asx(t1._as(sourceOrResult.$index(0, "vin")), 0));
          if (J.$eq$(vin0.$index(0, "key"), _s9_))
            B.JSArray_methods.$indexSet(signatureLength, i, J.get$length$asx(t1._as(J.$index$asx(vin0.$index(0, "value"), _s11_))));
        }
        return A.MoneroV1Signature_layout(inputLength, property, signatureLength);
      }
      if (inputLength > 0) {
        t2 = type$.List_dynamic;
        vin0 = type$.Map_String_dynamic._as(J.$index$asx(t2._as(sourceOrResult.$index(0, "vin")), 0));
        mixinLength = J.$eq$(vin0.$index(0, "key"), _s9_) ? J.get$length$asx(t2._as(J.$index$asx(vin0.$index(0, "value"), _s11_))) : 0;
      } else
        mixinLength = 0;
      return A.RCTSignature_layout(this.forcePrunable, inputLength, mixinLength, outputLength, _null, t1);
    },
    call$3$action$remindBytes$sourceOrResult(action, remindBytes, sourceOrResult) {
      return this.call$4$action$property$remindBytes$sourceOrResult(action, null, remindBytes, sourceOrResult);
    },
    $signature: 80
  };
  A.MoneroTransaction_toLayoutStruct_closure.prototype = {
    call$1(e) {
      type$.MoneroTxin._as(e);
      return A.LinkedHashMap_LinkedHashMap$_literal([e.get$variantName(), e.toLayoutStruct$0()], type$.String, type$.dynamic);
    },
    $signature: 53
  };
  A.MoneroTransaction_toLayoutStruct_closure0.prototype = {
    call$1(e) {
      return type$.MoneroTxout._as(e).toLayoutStruct$0();
    },
    $signature: 38
  };
  A.MoneroTransaction_toJson_closure.prototype = {
    call$1(e) {
      return type$.MoneroTxin._as(e).toJson$0();
    },
    $signature: 53
  };
  A.MoneroTransaction_toJson_closure0.prototype = {
    call$1(e) {
      return type$.MoneroTxout._as(e).toJson$0();
    },
    $signature: 38
  };
  A.MoneroNetwork.prototype = {
    findPrefix$1(type) {
      var t1;
      switch (type) {
        case B.XmrAddressType_GNA:
          t1 = this.config.params.addrIntNetVer;
          t1.toString;
          return t1;
        case B.XmrAddressType_GJa:
          t1 = this.config.params.addrNetVer;
          t1.toString;
          return t1;
        case B.XmrAddressType_0rc:
          t1 = this.config.params.subaddrNetVer;
          t1.toString;
          return t1;
        default:
          throw A.wrapException(A.DartMoneroPluginException$("Invalid monero address type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type.toString$0(0)], type$.String, type$.dynamic)));
      }
    },
    get$coin() {
      switch (this) {
        case B.MoneroNetwork_wEo:
          return B.MoneroCoins_moneroMainnet;
        case B.MoneroNetwork_NsV:
          return B.MoneroCoins_moneroTestnet;
        case B.MoneroNetwork_A9U:
          return B.MoneroCoins_moneroStagenet;
        default:
          throw A.wrapException(A.DartMoneroPluginException$("Invalid monero network.", A.LinkedHashMap_LinkedHashMap$_literal(["network", this.name], type$.String, type$.dynamic)));
      }
    },
    toString$0(_) {
      return "MoneroNetwork." + this.name;
    }
  };
  A.MoneroNetwork_fromName_closure.prototype = {
    call$1(e) {
      return type$.MoneroNetwork._as(e).name === this.name;
    },
    $signature: 92
  };
  A.MoneroNetwork_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartMoneroPluginException$("The provided network name does not exist.", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 1
  };
  A.MoneroNetwork_fromIndex_closure.prototype = {
    call$1(e) {
      return type$.MoneroNetwork._as(e).index === this.index;
    },
    $signature: 92
  };
  A.MoneroNetwork_fromIndex_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartMoneroPluginException$("The provided network index does not exist.", A.LinkedHashMap_LinkedHashMap$_literal(["index", this.index], type$.String, type$.dynamic)));
    },
    $signature: 1
  };
  A.DemonRequestType.prototype = {
    _enumToString$0() {
      return "DemonRequestType." + this._core$_name;
    }
  };
  A.MoneroDaemonRequestParam.prototype = {
    get$params() {
      var t1 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
    },
    get$encodingType() {
      return B.DemonRequestType_0;
    },
    buildRequest$1(requestID) {
      var t1, t2, t3, _this = this,
        _0_0 = _this.get$encodingType();
      $label0$0: {
        if (B.DemonRequestType_2 === _0_0 || B.DemonRequestType_0 === _0_0) {
          t1 = type$.Map_String_dynamic._as(_this.get$params());
          break $label0$0;
        }
        if (B.DemonRequestType_1 === _0_0) {
          t1 = _this.get$params();
          t1 = A.LinkedHashMap_LinkedHashMap$_literal(["jsonrpc", "2.0", "method", _this.get$method(), "params", t1, "id", requestID], type$.String, type$.dynamic);
          break $label0$0;
        }
        t1 = null;
      }
      t2 = _this.get$method();
      t3 = type$.String;
      t3 = A.LinkedHashMap_LinkedHashMap$_literal(["Content-Type", "application/json"], t3, t3);
      return new A.MoneroRequestDetails(B.MoneroRequestApiType_0, t2, t1, _this.get$encodingType(), t3, B.RequestServiceType_0, requestID);
    }
  };
  A.MoneroRequestApiType.prototype = {
    _enumToString$0() {
      return "MoneroRequestApiType." + this._core$_name;
    }
  };
  A.MoneroRequestDetails.prototype = {
    body$0() {
      var t1, t2;
      switch (this.requestType.index) {
        case 0:
        case 1:
          return A.StringUtils_encode(A.StringUtils_fromJson(this.jsonBody, null, null, false), B.StringEncoding_1);
        case 2:
          t1 = this.jsonBody;
          if (t1.__js_helper$_length !== 0) {
            t1 = A.MoneroSection_MoneroSection$fromJson(t1);
            t2 = A.List_List$of(B.List_01, true, type$.int);
            B.JSArray_methods.addAll$1(t2, t1.serialize$0());
            return t2;
          }
          break;
        default:
          break;
      }
      return null;
    },
    toUri$1(uri) {
      var t1 = this.requestType;
      if (t1 === B.DemonRequestType_2)
        return A.Uri_parse(uri).replace$1$path(this.method);
      if (t1 === B.DemonRequestType_0)
        return A.Uri_parse(uri).replace$1$path(this.method);
      else
        return A.Uri_parse(uri).replace$1$path("json_rpc");
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["id", _this.requestID, "type", _this.type._core$_name, "body", _this.jsonBody, "api", _this.api._core$_name, "request_type", _this.requestType._core$_name], type$.String, type$.dynamic);
    }
  };
  A.DaemonRequestGetBlocksBin.prototype = {
    get$method() {
      return "getblocks.bin";
    },
    get$params() {
      var t1 = A.MoneroStorageBinary_MoneroStorageBinary$fromListOfHex(this.blockIds),
        t2 = $.$get$_BigIntImpl_zero();
      return A.LinkedHashMap_LinkedHashMap$_literal(["block_ids", t1, "start_height", this.startHeight, "requested_info", this.requestedInfo.index, "no_miner_tx", false, "prune", true, "high_height_ok", false, "pool_info_since", t2], type$.String, type$.dynamic);
    },
    get$encodingType() {
      return B.DemonRequestType_2;
    }
  };
  A.DaemonRequestGetTransactions.prototype = {
    get$method() {
      return "get_transactions";
    },
    get$params() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["txs_hashes", this.txHashes, "decode_as_json", false, "prune", false, "split", false], type$.String, type$.dynamic);
    },
    get$encodingType() {
      return B.DemonRequestType_0;
    },
    onResonse$1(result) {
      var txs = type$.nullable_List_dynamic._as(type$.Map_String_dynamic._as(result).$index(0, "txs")),
        t1 = txs == null ? null : J.get$isEmpty$asx(txs);
      if (t1 !== false)
        return A._setArrayType([], type$.JSArray_TxResponse);
      txs.toString;
      t1 = J.map$1$1$ax(txs, new A.DaemonRequestGetTransactions_onResonse_closure(), type$.TxResponse);
      return A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
    }
  };
  A.DaemonRequestGetTransactions_onResonse_closure.prototype = {
    call$1(e) {
      return A.TxResponse_TxResponse$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 186
  };
  A.DaemonRequestOnGetBlockHash.prototype = {
    get$method() {
      return "on_get_block_hash";
    },
    get$params() {
      return A._setArrayType([this.blockHeight], type$.JSArray_int);
    },
    get$encodingType() {
      return B.DemonRequestType_1;
    }
  };
  A.DaemonBaseResponse.prototype = {};
  A.DaemonTxBlobEntryResponse.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["blob", this.blob, "prunable_hash", this.prunableHash], type$.String, type$.dynamic);
    }
  };
  A.DaemonBlockCompleteEntryResponse.prototype = {
    toJson$0() {
      var _this = this,
        t1 = _this.txs,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["pruned", _this.pruned, "block", _this.block, "blockWeight", _this.blockWeight.toString$0(0), "txs", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.DaemonBlockCompleteEntryResponse_toJson_closure()), t3), true, t3._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    }
  };
  A.DaemonBlockCompleteEntryResponse_DaemonBlockCompleteEntryResponse$fromJson_closure.prototype = {
    call$1(e) {
      if (typeof e == "string")
        return new A.DaemonTxBlobEntryResponse(e, null);
      type$.Map_String_dynamic._as(e);
      return new A.DaemonTxBlobEntryResponse(A._asString(e.$index(0, "blob")), A._asStringQ(e.$index(0, "prunable_hash")));
    },
    $signature: 187
  };
  A.DaemonBlockCompleteEntryResponse_toJson_closure.prototype = {
    call$1(e) {
      return type$.DaemonTxBlobEntryResponse._as(e).toJson$0();
    },
    $signature: 188
  };
  A.DaemonTxOutputIndicesResponse.prototype = {};
  A.DaemonTxOutputIndicesResponse_DaemonTxOutputIndicesResponse$fromJson_closure.prototype = {
    call$1(e) {
      return A.BigintUtils_parse(e);
    },
    $signature: 44
  };
  A.DaemonPoolTxInfoResponse.prototype = {};
  A.DaemonBlockOutputIndicesResponse.prototype = {};
  A.DaemonBlockOutputIndicesResponse_DaemonBlockOutputIndicesResponse$fromJson_closure.prototype = {
    call$1(e) {
      return A.DaemonTxOutputIndicesResponse_DaemonTxOutputIndicesResponse$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 190
  };
  A.PoolInfoExtent.prototype = {
    _enumToString$0() {
      return "PoolInfoExtent." + this._core$_name;
    }
  };
  A.DaemonRequestBlocksInfo.prototype = {
    _enumToString$0() {
      return "DaemonRequestBlocksInfo." + this._core$_name;
    }
  };
  A.DaemonGetBlockBinResponse.prototype = {};
  A.DaemonGetBlockBinResponse$fromJson_closure.prototype = {
    call$1(e) {
      return A.DaemonBlockCompleteEntryResponse_DaemonBlockCompleteEntryResponse$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 191
  };
  A.DaemonGetBlockBinResponse$fromJson_closure0.prototype = {
    call$1(e) {
      return A.DaemonBlockOutputIndicesResponse_DaemonBlockOutputIndicesResponse$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 192
  };
  A.DaemonGetBlockBinResponse$fromJson_closure1.prototype = {
    call$1(e) {
      type$.Map_String_dynamic._as(e);
      A._asBool(e.$index(0, "double_spend_seen"));
      A._asString(e.$index(0, "tx_blob"));
      A._asString(e.$index(0, "tx_hash"));
      return new A.DaemonPoolTxInfoResponse();
    },
    $signature: 193
  };
  A.DistributionResponse.prototype = {};
  A.DistributionResponse_DistributionResponse$fromJson_closure.prototype = {
    call$1(e) {
      return A.BigintUtils_parse(e);
    },
    $signature: 44
  };
  A.OutputDistributionResponse.prototype = {};
  A.OutputDistributionResponse$fromJson_closure.prototype = {
    call$1(e) {
      return A.DistributionResponse_DistributionResponse$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 194
  };
  A.TxResponse.prototype = {};
  A.TxResponse_TxResponse$fromJson_closure.prototype = {
    call$1(e) {
      return A.BigintUtils_parse(e);
    },
    $signature: 44
  };
  A.MoneroProvider.prototype = {
    request$2$1(request, RESULT, SERVICERESPONSE) {
      return this.request$body$MoneroProvider(RESULT._eval$1("@<0>")._bind$1(SERVICERESPONSE)._eval$1("BaseServiceRequest<1,2,MoneroRequestDetails>")._as(request), RESULT, SERVICERESPONSE, RESULT);
    },
    request$body$MoneroProvider(request, RESULT, SERVICERESPONSE, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, $async$temp1;
      var $async$request$2$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = request;
              $async$goto = 3;
              return A._asyncAwait($async$self.requestDynamic$2$2$timeout(request, null, RESULT, SERVICERESPONSE), $async$request$2$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.onResonse$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$request$2$1, $async$completer);
    },
    requestDynamic$2$2$timeout(request, timeout, RESULT, SERVICERESPONSE) {
      return this.requestDynamic$body$MoneroProvider(RESULT._eval$1("@<0>")._bind$1(SERVICERESPONSE)._eval$1("BaseServiceRequest<1,2,MoneroRequestDetails>")._as(request), timeout, RESULT, SERVICERESPONSE, SERVICERESPONSE);
    },
    requestDynamic$body$MoneroProvider(request, timeout, RESULT, SERVICERESPONSE, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, t1, params, _0_0;
      var $async$requestDynamic$2$2$timeout = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              params = request.buildRequest$1($async$self._id++);
              _0_0 = params.requestType;
              $async$goto = B.DemonRequestType_0 === _0_0 || B.DemonRequestType_1 === _0_0 ? 4 : 5;
              break;
            case 4:
              // then
              $async$goto = 6;
              return A._asyncAwait($async$self.rpc.doRequest$1$2$timeout(params, timeout, type$.Map_String_dynamic), $async$requestDynamic$2$2$timeout);
            case 6:
              // returning from await.
              t1 = $async$result;
              // goto break $label0$0
              $async$goto = 3;
              break;
            case 5:
              // join
              $async$goto = B.DemonRequestType_2 === _0_0 ? 7 : 8;
              break;
            case 7:
              // then
              $async$goto = 9;
              return A._asyncAwait($async$self.rpc.doRequest$1$2$timeout(params, timeout, type$.List_int), $async$requestDynamic$2$2$timeout);
            case 9:
              // returning from await.
              t1 = $async$result;
              // goto break $label0$0
              $async$goto = 3;
              break;
            case 8:
              // join
              t1 = null;
            case 3:
              // break $label0$0
              $async$returnValue = A.MoneroProvider__findError(params, t1, SERVICERESPONSE._eval$1("0/"));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$requestDynamic$2$2$timeout, $async$completer);
    },
    requestBinary$2$2$timeout(request, timeout, RESULT, SERVICERESPONSE) {
      return this.requestBinary$body$MoneroProvider(RESULT._eval$1("@<0>")._bind$1(SERVICERESPONSE)._eval$1("BaseServiceRequest<1,2,MoneroRequestDetails>")._as(request), timeout, RESULT, SERVICERESPONSE);
    },
    requestBinary$body$MoneroProvider(request, timeout, RESULT, SERVICERESPONSE) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.List_int),
        $async$returnValue, $async$self = this, params;
      var $async$requestBinary$2$2$timeout = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              params = request.buildRequest$1($async$self._id++);
              $async$goto = 3;
              return A._asyncAwait($async$self.rpc.doRequest$1$2$timeout(params, timeout, type$.List_int), $async$requestBinary$2$2$timeout);
            case 3:
              // returning from await.
              $async$returnValue = $async$result.getResult$1(params);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$requestBinary$2$2$timeout, $async$completer);
    }
  };
  A.MoneroSerializationException.prototype = {};
  A.MoneroLayoutConst_variantString_closure0.prototype = {
    call$1(bytes) {
      return A.StringUtils_decode(type$.List_int._as(bytes), false, B.StringEncoding_1);
    },
    $signature: 18
  };
  A.MoneroLayoutConst_variantString_closure.prototype = {
    call$1(src) {
      return A.StringUtils_encode(A._asString(src), B.StringEncoding_1);
    },
    $signature: 94
  };
  A.MoneroLayoutConst_variantVec_closure.prototype = {
    call$1(data) {
      return A.LinkedHashMap_LinkedHashMap$_literal(["values", this.T._eval$1("List<0>")._as(data)], type$.String, type$.dynamic);
    },
    $signature() {
      return this.T._eval$1("Map<String,@>(List<0>)");
    }
  };
  A.MoneroLayoutConst_variantVec_closure0.prototype = {
    call$1(data) {
      return J.cast$1$0$ax(type$.List_dynamic._as(type$.Map_String_dynamic._as(data).$index(0, "values")), this.T);
    },
    $signature() {
      return this.T._eval$1("List<0>(Map<String,@>)");
    }
  };
  A.MoneroLayoutConst_map_closure0.prototype = {
    call$1(data) {
      var t1 = type$.dynamic;
      return A.Map_Map$fromEntries(J.cast$1$0$ax(type$.List_dynamic._as(type$.Map_String_dynamic._as(data).$index(0, "values")), type$.MapEntry_dynamic_dynamic), t1, t1);
    },
    $signature: 196
  };
  A.MoneroLayoutConst_map_closure.prototype = {
    call$1(values) {
      return A.LinkedHashMap_LinkedHashMap$_literal(["values", type$.Map_dynamic_dynamic._as(values).get$entries().toList$0(0)], type$.String, type$.dynamic);
    },
    $signature: 197
  };
  A.MoneroBigIntVarInt.prototype = {
    writeVarintBig$1(value) {
      var t1, t2,
        dest = A._setArrayType([], type$.JSArray_int);
      for (t1 = this.continueFlag, t2 = this.sevenBitMask; value.compareTo$1(0, t1) >= 0;) {
        B.JSArray_methods.add$1(dest, value.$and(0, t2).$or(0, t1).toInt$0(0));
        value = value.$shr(0, 7);
      }
      B.JSArray_methods.add$1(dest, value.$and(0, t2).toInt$0(0));
      return dest;
    },
    getSpan$3$offset$source(bytes, offset, source) {
      var t1, t2, span, t3;
      type$.nullable_BigInt._as(source);
      t1 = bytes._bytes;
      t2 = t1.length;
      span = 0;
      while (true) {
        t3 = offset + span;
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(t1, t3);
        if (!((t1[t3] & 128) !== 0))
          break;
        ++span;
      }
      return span + 1;
    },
    getSpan$2$offset(bytes, offset) {
      return this.getSpan$3$offset$source(bytes, offset, null);
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    decode$2$offset(bytes, offset) {
      var span = this.getSpan$2$offset(bytes, offset);
      return new A.LayoutDecodeResult(span, A.MoneroBigIntVarInt_readVarintBig(B.JSArray_methods.sublist$2(bytes._bytes, offset, offset + span)), type$.LayoutDecodeResult_BigInt);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var encode;
      type$.BigInt._as(source);
      this.layout.validate$1(source);
      encode = this.writeVarintBig$1(source);
      writer.setAll$2(0, offset, encode);
      return encode.length;
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    }
  };
  A.MoneroIntVarInt.prototype = {
    readVarint$1(bytes) {
      var t1, result, shift, i, byte;
      type$.List_int._as(bytes);
      for (t1 = bytes.length, result = 0, shift = 0, i = 0; i < t1; ++i) {
        byte = bytes[i];
        result = (result | B.JSInt_methods._shlPositive$1(byte & 127, shift)) >>> 0;
        shift += 7;
        if ((byte & 128) === 0)
          break;
      }
      return result;
    },
    getSpan$3$offset$source(bytes, offset, source) {
      var t1, t2, span, t3;
      A._asIntQ(source);
      t1 = bytes._bytes;
      t2 = t1.length;
      span = 0;
      while (true) {
        t3 = offset + span;
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(t1, t3);
        if (!((t1[t3] & 128) !== 0))
          break;
        ++span;
      }
      return span + 1;
    },
    getSpan$2$offset(bytes, offset) {
      return this.getSpan$3$offset$source(bytes, offset, null);
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    decode$2$offset(bytes, offset) {
      var span = this.getSpan$2$offset(bytes, offset);
      return new A.LayoutDecodeResult(span, this.readVarint$1(B.JSArray_methods.sublist$2(bytes._bytes, offset, offset + span)), type$.LayoutDecodeResult_int);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var encode;
      A._asInt(source);
      this.layout.validate$1(source);
      encode = A.MoneroIntVarInt_writeVarint(source);
      writer.setAll$2(0, offset, encode);
      return encode.length;
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    }
  };
  A.VariantOffsetLayout.prototype = {
    isCount$0() {
      return true;
    },
    decode$2$offset(bytes, offset) {
      return this.layout.decode$2$offset(bytes, offset);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var encodeLength = A.MoneroIntVarInt_writeVarint(A._asInt(source));
      writer.setAll$2(0, offset, encodeLength);
      return encodeLength.length;
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    }
  };
  A.MoneroVariantDecodeResult.prototype = {
    get$value() {
      return type$.Map_String_dynamic._as(this.result.$index(0, "value"));
    },
    toString$0(_) {
      var t1 = this.result;
      return A._asString(t1.$index(0, "key")) + ": " + type$.Map_String_dynamic._as(t1.$index(0, "value")).toString$0(0);
    }
  };
  A.MoneroSerialization.prototype = {
    serialize$0() {
      return this.createLayout$1$property(null).serialize$1(this.toLayoutStruct$0());
    }
  };
  A.MoneroVariantSerialization.prototype = {
    toVariantSerialize$0() {
      return this.createVariantLayout$1$property(null).serialize$1(A.LinkedHashMap_LinkedHashMap$_literal([this.get$variantName(), this.toLayoutStruct$0()], type$.String, type$.dynamic));
    }
  };
  A.MoneroStorageFormatValidator_asArrayOf_closure.prototype = {
    call$1(e) {
      return e == null;
    },
    $signature: 198
  };
  A.MoneroStorageFormatValidator_asArrayOf_closure0.prototype = {
    call$1(e) {
      return J.toString$0$(e);
    },
    $signature: 199
  };
  A.MoneroStorageFormatValidator_toArrayObject_closure.prototype = {
    call$1(e) {
      var t1 = type$.Object;
      return A.MoneroStorageFormatValidator_asPrimitiveType(t1._as(e), t1);
    },
    $signature: 200
  };
  A.MoneroStorageFormatValidator_toArrayObject_closure0.prototype = {
    call$1(e) {
      return type$.Tuple_Object_MoneroStorageTypes._as(e).item2 !== this.type;
    },
    $signature: 201
  };
  A.MoneroStorageFormatValidator_toArrayObject_closure1.prototype = {
    call$1(e) {
      return J.toString$0$(type$.Object._as(e));
    },
    $signature: 202
  };
  A.MoneroStorageFormatValidator_toArrayObject_closure2.prototype = {
    call$1(e) {
      return type$.Tuple_Object_MoneroStorageTypes._as(e).item1;
    },
    $signature: 203
  };
  A.MoneroStorageFormatValidator_toArrayObject_closure3.prototype = {
    call$1(e) {
      return type$.Map_dynamic_dynamic._as(type$.Object._as(e)).cast$2$0(0, type$.String, type$.dynamic);
    },
    $signature: 204
  };
  A.MoneroStorageFormatValidator_toArrayObject_closure4.prototype = {
    call$1(e) {
      return A.MoneroSection_MoneroSection$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 205
  };
  A.MoneroStorageContainer.prototype = {};
  A.MoneroStorageBinary.prototype = {};
  A.MoneroStorageBinary_MoneroStorageBinary$fromListOfHex_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_fromHexString(A._asString(e));
    },
    $signature: 94
  };
  A.MoneroStorageBinary_MoneroStorageBinary$fromListOfHex_closure0.prototype = {
    call$1(e) {
      return type$.List_int._as(e);
    },
    $signature: 2
  };
  A.MoneroStorage.prototype = {};
  A.MoneroSection.prototype = {
    get$hasValue() {
      return !B.JSArray_methods.every$1(this.enteries, new A.MoneroSection_hasValue_closure());
    },
    serialize$0() {
      var t1 = this.enteries,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("WhereIterable<1>"),
        enteries = new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.MoneroSection_serialize_closure()), t3);
      t2 = A.List_List$of(A.MoneroStorageSerializer_encodeVarintInt(enteries.get$length(0)), true, type$.int);
      B.JSArray_methods.addAll$1(t2, new A.ExpandIterable(enteries, t3._eval$1("Iterable<int>(Iterable.E)")._as(new A.MoneroSection_serialize_closure0()), t3._eval$1("ExpandIterable<Iterable.E,int>")));
      return t2;
    }
  };
  A.MoneroSection_MoneroSection$fromJson_closure.prototype = {
    call$1(k) {
      var t1, entry, type, correctValue, hasValue, t2, list, values;
      A._asString(k);
      t1 = this.json.$index(0, k);
      if (t1 == null)
        entry = A.MoneroStorageEntryNull$_(k);
      else {
        type = A.MoneroStorageFormatValidator_findType(t1);
        if (type.isPrimitive) {
          correctValue = A.MoneroStorageFormatValidator_asPrimitiveType(t1, type$.dynamic);
          hasValue = !(t1 instanceof A.MoneroStorageBinary) || t1.data.length !== 0;
          t1 = k.length;
          if (t1 === 0 || t1 > 255)
            A.throwExpression(B.MoneroSerializationException_bDN);
          entry = new A.MoneroStorageEntryPromitive(hasValue, correctValue.item1, k, correctValue.item2, type$.MoneroStorageEntryPromitive_dynamic);
        } else if (type === B.MoneroStorageTypes_OBJECT_12_false_false) {
          t1 = A.MoneroSection_MoneroSection$fromJson(A.MoneroStorageFormatValidator_asMap(t1));
          t2 = k.length;
          if (t2 === 0 || t2 > 255)
            A.throwExpression(B.MoneroSerializationException_bDN);
          entry = new A.MoneroStorageEntrySection(t1, k, B.MoneroStorageTypes_OBJECT_12_false_false);
        } else {
          t2 = type$.Object;
          list = A.MoneroStorageFormatValidator_asArrayOf(t1, true, t2);
          if (list.get$length(0) === 0)
            entry = A.MoneroStorageEntryNull$_(k);
          else {
            values = A.MoneroStorageFormatValidator_toArrayObject(list, t2);
            t1 = k.length;
            if (t1 === 0 || t1 > 255)
              A.throwExpression(B.MoneroSerializationException_bDN);
            entry = new A.MoneroStorageEntryList(values.item1, values.item2, k, B.MoneroStorageTypes_ARRAY_13_false_false, type$.MoneroStorageEntryList_Object);
          }
        }
      }
      return entry;
    },
    $signature: 206
  };
  A.MoneroSection_hasValue_closure.prototype = {
    call$1(e) {
      return !type$.MoneroStorageEntry_dynamic._as(e).get$hasValue();
    },
    $signature: 95
  };
  A.MoneroSection_serialize_closure.prototype = {
    call$1(e) {
      return type$.MoneroStorageEntry_dynamic._as(e).get$hasValue();
    },
    $signature: 95
  };
  A.MoneroSection_serialize_closure0.prototype = {
    call$1(e) {
      return type$.MoneroStorageEntry_dynamic._as(e).serialize$0();
    },
    $signature: 208
  };
  A.MoneroStorageEntry.prototype = {
    get$hasValue() {
      return this.value != null;
    },
    get$value() {
      return this.value;
    }
  };
  A.MoneroStorageEntryNull.prototype = {
    serialize$0() {
      return A._setArrayType([0], type$.JSArray_int);
    }
  };
  A.MoneroStorageEntryPromitive.prototype = {
    serialize$0() {
      var t4,
        t1 = this.name,
        t2 = type$.JSArray_int,
        t3 = A._setArrayType([t1.length], t2);
      B.JSArray_methods.addAll$1(t3, A.StringUtils_encode(t1, B.StringEncoding_1));
      t1 = this.type;
      t4 = this.value;
      t4.toString;
      if (t1 === B.MoneroStorageTypes_Unknown_0_false_false)
        A.throwExpression(B.MoneroSerializationException_GEl);
      t2 = A._setArrayType([t1._types$_value], t2);
      B.JSArray_methods.addAll$1(t2, A.MoneroStorageSerializer__encodePrimitive(t1, t4));
      B.JSArray_methods.addAll$1(t3, t2);
      return t3;
    },
    get$hasValue() {
      return this.hasValue;
    }
  };
  A.MoneroStorageEntryList.prototype = {
    get$hasValue() {
      return J.get$isNotEmpty$asx(this.value);
    },
    serialize$0() {
      var t1 = this.name,
        t2 = A._setArrayType([t1.length], type$.JSArray_int);
      B.JSArray_methods.addAll$1(t2, A.StringUtils_encode(t1, B.StringEncoding_1));
      B.JSArray_methods.addAll$1(t2, A.MoneroStorageSerializer_encodeList(this.childType, this.value));
      return t2;
    }
  };
  A.MoneroStorageEntrySection.prototype = {
    serialize$0() {
      var t2, t3,
        t1 = this.value;
      if (!t1.get$hasValue())
        return A._setArrayType([0], type$.JSArray_int);
      t2 = this.name;
      t3 = A._setArrayType([t2.length], type$.JSArray_int);
      B.JSArray_methods.addAll$1(t3, A.StringUtils_encode(t2, B.StringEncoding_1));
      t3.push(12);
      B.JSArray_methods.addAll$1(t3, t1.serialize$0());
      return t3;
    }
  };
  A.DecodeStorageResult.prototype = {
    get$value() {
      return this.value;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.MoneroStorageTypes.prototype = {
    toString$0(_) {
      return "MoneroStorageTypes." + this.name;
    }
  };
  A.MoneroStorageTypes_fromFlag_closure.prototype = {
    call$1(e) {
      type$.MoneroStorageTypes._as(e);
      if (e === B.MoneroStorageTypes_Unknown_0_false_false)
        A.throwExpression(B.MoneroSerializationException_GEl);
      return e._types$_value === this.flag;
    },
    $signature: 209
  };
  A.MoneroStorageTypes_fromFlag_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.MoneroSerializationException$("Invalid storage type: Unable to determine the correct type from the provided flag.", A.LinkedHashMap_LinkedHashMap$_literal(["flag", this.flag], type$.String, type$.dynamic)));
    },
    $signature: 1
  };
  A.MoneroTxBuilder.prototype = {};
  A.MoneroTxBuilder__createTxSecretKeySeed_closure.prototype = {
    call$1(e) {
      return type$.SpendablePayment_MoneroUnLockedPayment_MoneroUnlockedOutput._as(e).payment.get$keyImage();
    },
    $signature: 96
  };
  A.MoneroTxBuilder__createTxSecretKeySeed_closure0.prototype = {
    call$1(e) {
      return type$.List_int._as(e);
    },
    $signature: 2
  };
  A.MoneroTxBuilder__computeSourceKeys_closure.prototype = {
    call$1(e) {
      var t1, t2, t3, t4;
      type$.SpendablePayment_MoneroUnLockedPayment_MoneroUnlockedOutput._as(e);
      t1 = e.payment;
      t2 = e.outs;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,BigInt>");
      t4 = A.MoneroTxBuilder_absoluteOutputOffsetsToRelative(A.List_List$of(new A.MappedListIterable(t2, t3._eval$1("BigInt(1)")._as(new A.MoneroTxBuilder__computeSourceKeys__closure()), t4), true, t4._eval$1("ListIterable.E")));
      return A.TxinToKey$(t1.output.amount, t1.get$keyImage(), t4);
    },
    $signature: 211
  };
  A.MoneroTxBuilder__computeSourceKeys__closure.prototype = {
    call$1(i) {
      return type$.OutsEntery._as(i).index;
    },
    $signature: 212
  };
  A.MoneroTxBuilder__computeSourceKeys_closure0.prototype = {
    call$1(e) {
      return type$.SpendablePayment_MoneroUnLockedPayment_MoneroUnlockedOutput._as(e).payment.output.ephemeralSecretKey;
    },
    $signature: 96
  };
  A.MoneroTxBuilder__computeDestinationKeys_closure.prototype = {
    call$1(e) {
      return type$.MoneroTxDestination._as(e).address;
    },
    $signature: 213
  };
  A.MoneroTxBuilder__computeDestinationKeys_closure0.prototype = {
    call$2(p, c) {
      return type$.BigInt._as(p).$add(0, type$.MoneroTxDestination._as(c).amount);
    },
    $signature: 214
  };
  A.MoneroTxBuilder__computeDestinationKeys_closure1.prototype = {
    call$1(e) {
      var t1;
      type$.MoneroTxDestination._as(e);
      t1 = this.change;
      t1 = t1 == null ? null : t1.address;
      return !e.address.$eq(0, t1);
    },
    $signature: 97
  };
  A.MoneroTxBuilder__computeDestinationKeys_closure2.prototype = {
    call$1(e) {
      return type$.MoneroTxDestination._as(e).address.type === B.XmrAddressType_GNA;
    },
    $signature: 97
  };
  A.MoneroTxBuilder__buildSignature_closure.prototype = {
    call$1(e) {
      return type$.SpendablePayment_MoneroUnLockedPayment_MoneroUnlockedOutput._as(e).realOutIndex;
    },
    $signature: 216
  };
  A.MoneroTxBuilder__buildSignature_closure0.prototype = {
    call$1(e) {
      var t3,
        t1 = type$.SpendablePayment_MoneroUnLockedPayment_MoneroUnlockedOutput._as(e).payment.output,
        t2 = t1.ephemeralSecretKey;
      t1 = t1.mask;
      A.BytesUtils_validateListOfBytes(t2);
      t3 = type$.int;
      t2 = A.ListHelper_exceptedLen(A.List_List$unmodifiable(t2, t3), 32, t3);
      A.BytesUtils_validateListOfBytes(t1);
      return new A.CtKey(t2, A.ListHelper_exceptedLen(A.List_List$unmodifiable(t1, t3), 32, t3));
    },
    $signature: 217
  };
  A.MoneroTxBuilder__buildSignature_closure1.prototype = {
    call$1(e) {
      return type$.MoneroPublicKey._as(e).publicKey._encoded;
    },
    $signature: 36
  };
  A.MoneroTxBuilder__buildSignature_closure2.prototype = {
    call$1(e) {
      return type$.MoneroPublicKey._as(e).publicKey._encoded;
    },
    $signature: 36
  };
  A.ComputeDestinationKeys.prototype = {
    get$destinationPubKeys() {
      var t1 = this.outs,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,MoneroPublicKey>");
      return A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("MoneroPublicKey(1)")._as(new A.ComputeDestinationKeys_destinationPubKeys_closure()), t3), true, t3._eval$1("ListIterable.E"));
    },
    get$toRctOuts() {
      var t1 = this.outs,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,MoneroTxout>");
      return A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("MoneroTxout(1)")._as(new A.ComputeDestinationKeys_toRctOuts_closure()), t3), true, t3._eval$1("ListIterable.E"));
    },
    get$amounts() {
      var t1 = this.outs,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,BigInt>");
      return A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("BigInt(1)")._as(new A.ComputeDestinationKeys_amounts_closure()), t3), true, t3._eval$1("ListIterable.E"));
    },
    toLayoutStruct$0() {
      var _this = this,
        t1 = _this.extras,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>"),
        t4 = _this.additionalTxPubKey,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,List<int>>"),
        t7 = _this.allTxKeys,
        t8 = A._arrayInstanceType(t7),
        t9 = t8._eval$1("MappedListIterable<1,List<int>>"),
        t10 = _this.outs,
        t11 = A._arrayInstanceType(t10),
        t12 = t11._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["amountKeys", _this.amountKeys, "extras", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.ComputeDestinationKeys_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E")), "txPubKey", _this.txPubKey.publicKey._encoded, "additionalTxPubKey", A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("List<int>(1)")._as(new A.ComputeDestinationKeys_toLayoutStruct_closure0()), t6), true, t6._eval$1("ListIterable.E")), "allTxKeys", A.List_List$of(new A.MappedListIterable(t7, t8._eval$1("List<int>(1)")._as(new A.ComputeDestinationKeys_toLayoutStruct_closure1()), t9), true, t9._eval$1("ListIterable.E")), "outs", A.List_List$of(new A.MappedListIterable(t10, t11._eval$1("Map<String,@>(1)")._as(new A.ComputeDestinationKeys_toLayoutStruct_closure2()), t12), true, t12._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    },
    createLayout$1$property(property) {
      return A.ComputeDestinationKeys_layout(property);
    }
  };
  A.ComputeDestinationKeys_destinationPubKeys_closure.prototype = {
    call$1(e) {
      var t1 = type$.MoneroTxout._as(e).target.getPublicKey$0();
      t1.toString;
      return t1;
    },
    $signature: 218
  };
  A.ComputeDestinationKeys_toRctOuts_closure.prototype = {
    call$1(e) {
      var t1;
      type$.MoneroTxout._as(e);
      t1 = $.$get$_BigIntImpl_zero();
      return new A.MoneroTxout(A.BigIntHelper_get_asUint64(t1), e.target);
    },
    $signature: 219
  };
  A.ComputeDestinationKeys_amounts_closure.prototype = {
    call$1(e) {
      return type$.MoneroTxout._as(e).amount;
    },
    $signature: 220
  };
  A.ComputeDestinationKeys_closure.prototype = {
    call$2(p, c) {
      return type$.BigInt._as(p).$add(0, type$.MoneroTxout._as(c).amount);
    },
    $signature: 221
  };
  A.ComputeDestinationKeys_closure0.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return A.List_List$unmodifiable(e, type$.int);
    },
    $signature: 2
  };
  A.ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure.prototype = {
    call$1(e) {
      return A.MoneroPublicKey_MoneroPublicKey$fromBytes(type$.List_int._as(e));
    },
    $signature: 31
  };
  A.ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure0.prototype = {
    call$1(e) {
      return A.MoneroPrivateKey_MoneroPrivateKey$fromBytes(type$.List_int._as(e));
    },
    $signature: 222
  };
  A.ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure1.prototype = {
    call$1(e) {
      return A.TxExtra_TxExtra$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 223
  };
  A.ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure2.prototype = {
    call$1(e) {
      return A.MoneroTxout_MoneroTxout$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 91
  };
  A.ComputeDestinationKeys_toLayoutStruct_closure.prototype = {
    call$1(e) {
      type$.TxExtra._as(e);
      return A.LinkedHashMap_LinkedHashMap$_literal([e.get$variantName(), e.toLayoutStruct$0()], type$.String, type$.dynamic);
    },
    $signature: 224
  };
  A.ComputeDestinationKeys_toLayoutStruct_closure0.prototype = {
    call$1(e) {
      return type$.MoneroPublicKey._as(e).publicKey._encoded;
    },
    $signature: 36
  };
  A.ComputeDestinationKeys_toLayoutStruct_closure1.prototype = {
    call$1(e) {
      return type$.MoneroPrivateKey._as(e).privateKey.key;
    },
    $signature: 225
  };
  A.ComputeDestinationKeys_toLayoutStruct_closure2.prototype = {
    call$1(e) {
      return type$.MoneroTxout._as(e).toLayoutStruct$0();
    },
    $signature: 38
  };
  A.ComputeSourceKeys.prototype = {
    get$amounts() {
      var t1 = this.inputs,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,BigInt>");
      return A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("BigInt(1)")._as(new A.ComputeSourceKeys_amounts_closure()), t3), true, t3._eval$1("ListIterable.E"));
    },
    get$toRctInputs() {
      var t1 = this.inputs,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,TxinToKey>");
      return A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("TxinToKey(1)")._as(new A.ComputeSourceKeys_toRctInputs_closure()), t3), true, t3._eval$1("ListIterable.E"));
    },
    toLayoutStruct$0() {
      var t1 = this.inputs,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["inputSecretKeys", this.inputSecretKeys, "inputs", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.ComputeSourceKeys_toLayoutStruct_closure()), t3), true, t3._eval$1("ListIterable.E"))], type$.String, type$.dynamic);
    },
    createLayout$1$property(property) {
      return A.ComputeSourceKeys_layout(property);
    }
  };
  A.ComputeSourceKeys_amounts_closure.prototype = {
    call$1(e) {
      return type$.TxinToKey._as(e).amount;
    },
    $signature: 226
  };
  A.ComputeSourceKeys_toRctInputs_closure.prototype = {
    call$1(e) {
      var t1;
      type$.TxinToKey._as(e);
      t1 = $.$get$_BigIntImpl_zero();
      return A.TxinToKey$(t1, e.keyImage, e.keyOffsets);
    },
    $signature: 227
  };
  A.ComputeSourceKeys$__closure.prototype = {
    call$2(p, c) {
      return type$.BigInt._as(p).$add(0, type$.TxinToKey._as(c).amount);
    },
    $signature: 228
  };
  A.ComputeSourceKeys$__closure0.prototype = {
    call$1(e) {
      var t1;
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      t1 = type$.int;
      return A.ListHelper_exceptedLen(A.List_List$unmodifiable(e, t1), 32, t1);
    },
    $signature: 2
  };
  A.ComputeSourceKeys_ComputeSourceKeys$fromStruct_closure.prototype = {
    call$1(e) {
      return A.TxinToKey_TxinToKey$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 229
  };
  A.ComputeSourceKeys_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.TxinToKey._as(e).toLayoutStruct$0();
    },
    $signature: 230
  };
  A.TxDestinationInfo.prototype = {
    get$needAdditionalTxkeys() {
      var t1 = this.subAddressesCount;
      if (t1 > 0)
        t1 = this.stdAddressesCount > 0 || t1 > 1;
      else
        t1 = false;
      return t1;
    }
  };
  A.MoneroRctTxBuilder.prototype = {
    toLayoutStruct$0() {
      var t7, _this = this,
        t1 = _this.sourceKeys.toLayoutStruct$0(),
        t2 = _this.destinationKeys.toLayoutStruct$0(),
        t3 = _this.transaction.toLayoutStruct$0(),
        t4 = _this.destinations,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
      t6 = A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.MoneroRctTxBuilder_toLayoutStruct_closure()), t6), true, t6._eval$1("ListIterable.E"));
      t5 = _this.sources;
      t4 = A._arrayInstanceType(t5);
      t7 = t4._eval$1("MappedListIterable<1,Map<String,@>>");
      t7 = A.List_List$of(new A.MappedListIterable(t5, t4._eval$1("Map<String,@>(1)")._as(new A.MoneroRctTxBuilder_toLayoutStruct_closure0()), t7), true, t7._eval$1("ListIterable.E"));
      t4 = _this.change;
      return A.LinkedHashMap_LinkedHashMap$_literal(["sourceKeys", t1, "destinationKeys", t2, "transaction", t3, "destinations", t6, "sources", t7, "change", t4 == null ? null : t4.toLayoutStruct$0()], type$.String, type$.dynamic);
    },
    createLayout$1$property(property) {
      return A.MoneroRctTxBuilder_layout(property, this.transaction);
    }
  };
  A.MoneroRctTxBuilder_MoneroRctTxBuilder_closure.prototype = {
    call$2(a, b) {
      var t1 = type$.SpendablePayment_MoneroUnLockedPayment_MoneroUnlockedOutput;
      t1._as(a);
      return A.BytesUtils_compareBytes(t1._as(b).payment.output.keyImage, a.payment.output.keyImage);
    },
    $signature: 231
  };
  A.MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct_closure.prototype = {
    call$1(e) {
      return A.MoneroTxDestination_MoneroTxDestination$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 98
  };
  A.MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct_closure0.prototype = {
    call$1(e) {
      return A.MoneroTxDestination_MoneroTxDestination$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 98
  };
  A.MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct_closure1.prototype = {
    call$1(e) {
      return A.SpendablePayment_SpendablePayment$fromStruct(type$.Map_String_dynamic._as(e), type$.MoneroUnLockedPayment_MoneroUnlockedOutput);
    },
    $signature: 233
  };
  A.MoneroRctTxBuilder_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return type$.MoneroTxDestination._as(e).toLayoutStruct$0();
    },
    $signature: 234
  };
  A.MoneroRctTxBuilder_toLayoutStruct_closure0.prototype = {
    call$1(e) {
      return type$.SpendablePayment_MoneroUnLockedPayment_MoneroUnlockedOutput._as(e).toLayoutStruct$0();
    },
    $signature: 235
  };
  A.ApiProviderException.prototype = {
    toString$0(_) {
      var t2,
        t1 = this.message;
      if (t1 != null)
        return t1;
      t1 = this.responseData;
      t2 = t1 == null;
      if ((t2 ? null : t1.$index(0, "error")) != null)
        return J.toString$0$(t1.$index(0, "error"));
      if ((t2 ? null : t1.$index(0, "message")) != null)
        return J.toString$0$(t1.$index(0, "message"));
      t1 = this.statusCode;
      if (t1 != null && B.JSArray_methods.contains$1(B.List_cL3, t1))
        return "http_error_" + A.S(t1);
      return "request_error";
    },
    $isException: 1
  };
  A.WalletException.prototype = {
    toString$0(_) {
      if (this._argruments != null)
        return "invalid_request";
      return this.message;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.WalletException))
        return false;
      return other.message === this.message && A.CompareUtils_iterableIsEqual(this._argruments, other._argruments, type$.String);
    },
    get$hashCode(_) {
      return A.Object_hash(this.message, this._argruments, B.C_SentinelValue, B.C_SentinelValue);
    },
    $isException: 1
  };
  A.Equatable.prototype = {
    $eq(_, other) {
      var t1, t2, i, t3, vi, oI, t4, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!type$.Equatable._is(other))
        return false;
      if (A.getRuntimeTypeOfDartObject(other) !== A.getRuntimeTypeOfDartObject(_this))
        return false;
      if (_this.get$variabels().length !== other.get$variabels().length)
        return false;
      for (t1 = type$.Iterable_dynamic, t2 = type$.dynamic, i = 0; i < _this.get$variabels().length; ++i) {
        t3 = _this.get$variabels();
        if (!(i < t3.length))
          return A.ioore(t3, i);
        vi = t3[i];
        t3 = other.get$variabels();
        if (!(i < t3.length))
          return A.ioore(t3, i);
        oI = t3[i];
        if (t1._is(vi)) {
          if (!t1._is(oI))
            return false;
          if (J.get$length$asx(vi) !== J.get$length$asx(oI))
            return false;
          if (!A.CompareUtils_iterableIsEqual(vi, oI, t2))
            return false;
        } else {
          t3 = _this.get$variabels();
          if (!(i < t3.length))
            return A.ioore(t3, i);
          t3 = t3[i];
          t4 = other.get$variabels();
          if (!(i < t4.length))
            return A.ioore(t4, i);
          if (!J.$eq$(t3, t4[i]))
            return false;
        }
      }
      return true;
    },
    get$hashCode(_) {
      var t1, t2, result, _i;
      for (t1 = this.get$variabels(), t2 = t1.length, result = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        result = (result ^ J.get$hashCode$(t1[_i])) >>> 0;
      return result;
    }
  };
  A.HTTPCaller_post_closure.prototype = {
    call$3$client$headers$uri(client, headers, uri) {
      type$.RetryClient._as(client);
      type$.nullable_Map_String_String._as(headers);
      return client._sendUnstreamed$5("POST", type$.Uri._as(uri), headers, this.body, null).timeout$1(this.timeout);
    },
    $signature: 55
  };
  A.HTTPCaller_get_closure.prototype = {
    call$3$client$headers$uri(client, headers, uri) {
      type$.RetryClient._as(client);
      type$.nullable_Map_String_String._as(headers);
      return client._sendUnstreamed$3("GET", type$.Uri._as(uri), headers).timeout$1(this.timeout);
    },
    $signature: 55
  };
  A.HttpImpl.prototype = {};
  A.HTTPServiceWorker.prototype = {
    call$8$authenticated$body$headers$isolate$responseType$timeout$type$url(authenticated, body, headers, isolate, responseType, timeout, type, url) {
      type$.Uri._as(url);
      type$.Duration._as(timeout);
      type$.nullable_ProviderAuthenticated._as(authenticated);
      type$.HTTPRequestType._as(type);
      type$.nullable_Map_String_String._as(headers);
      type$.HTTPResponseType._as(responseType);
      return this.$call$body$HTTPServiceWorker(authenticated, body, headers, A._asBool(isolate), responseType, timeout, type, url);
    },
    call$7$authenticated$headers$isolate$responseType$timeout$type$url(authenticated, headers, isolate, responseType, timeout, type, url) {
      return this.call$8$authenticated$body$headers$isolate$responseType$timeout$type$url(authenticated, null, headers, isolate, responseType, timeout, type, url);
    },
    $call$body$HTTPServiceWorker(authenticated, body, headers, isolate, responseType, timeout, type, url) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HTTPCallerResponse),
        $async$returnValue, $async$self = this, t1, exception, request;
      var $async$call$8$authenticated$body$headers$isolate$responseType$timeout$type$url = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              request = new A.HTTPWorkerMessage(type, url, body, headers, timeout, responseType, B.HTTPClientType_0, authenticated);
              if (isolate)
                try {
                  t1 = $async$self.send$1(request);
                  $async$returnValue = t1;
                  // goto return
                  $async$goto = 1;
                  break;
                } catch (exception) {
                  throw exception;
                }
              $async$goto = 3;
              return A._asyncAwait($async$self.WebHTTPServiceWorker_caller.makeCall$1(new A.HTTPWorkerRequest(-1, request)), $async$call$8$authenticated$body$headers$isolate$responseType$timeout$type$url);
            case 3:
              // returning from await.
              $async$returnValue = $async$result.get$response();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$8$authenticated$body$headers$isolate$responseType$timeout$type$url, $async$completer);
    }
  };
  A.ServicesHTTPCaller.prototype = {
    makeCall$1(message) {
      return this.makeCall$body$ServicesHTTPCaller(message);
    },
    makeCall$body$ServicesHTTPCaller(message) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HTTPWorkerResponse),
        $async$returnValue, $async$handler = 2, $async$currentError, t1, response, e, t2, exception, $async$exception;
      var $async$makeCall$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              t1 = null;
              t2 = message.message;
            case 7:
              // switch
              switch (t2.type.index) {
                case 0:
                  // goto case
                  $async$goto = 9;
                  break;
                case 1:
                  // goto case
                  $async$goto = 10;
                  break;
                default:
                  // goto after switch
                  $async$goto = 8;
                  break;
              }
              break;
            case 9:
              // case
              $async$goto = 11;
              return A._asyncAwait(A.HTTPCaller_get(t2.authenticated, t2.clientType, t2.headers, t2.timeout, t2.responseType, t2.url), $async$makeCall$1);
            case 11:
              // returning from await.
              t1 = $async$result;
              // goto after switch
              $async$goto = 8;
              break;
            case 10:
              // case
              $async$goto = 12;
              return A._asyncAwait(A.HTTPCaller_post(t2.authenticated, t2.params, t2.clientType, t2.headers, t2.timeout, t2.responseType, t2.url), $async$makeCall$1);
            case 12:
              // returning from await.
              t1 = $async$result;
              // goto after switch
              $async$goto = 8;
              break;
            case 8:
              // after switch
              response = t1;
              $async$returnValue = new A.HTTPWorkerResponseSuccess(response, type$.HTTPWorkerResponseSuccess_dynamic);
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              t1 = A.ServicesHTTPCaller__getExceptionMessage(e);
              $async$returnValue = new A.HTTPWorkerResponseError(t1, type$.HTTPWorkerResponseError_dynamic);
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$makeCall$1, $async$completer);
    }
  };
  A.WebHTTPServiceWorker.prototype = {
    send$1(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HTTPCallerResponse),
        $async$returnValue, $async$self = this;
      var $async$send$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.WebHTTPServiceWorker_caller.makeCall$1(new A.HTTPWorkerRequest(0, request)), $async$send$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$result.get$response();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$send$1, $async$completer);
    }
  };
  A.HTTPRequestType.prototype = {
    _enumToString$0() {
      return "HTTPRequestType." + this._core$_name;
    }
  };
  A.HTTPWorkerMessage.prototype = {};
  A.HTTPWorkerRequest.prototype = {};
  A.HTTPWorkerResponse.prototype = {};
  A.HTTPWorkerResponseSuccess.prototype = {
    get$response() {
      return this.response;
    }
  };
  A.HTTPWorkerResponseError.prototype = {
    get$response() {
      return A.throwExpression(A.ApiProviderException$(this.message, null, null));
    }
  };
  A.ProviderAuthType.prototype = {
    _enumToString$0() {
      return "ProviderAuthType." + this._core$_name;
    }
  };
  A.ProviderAuthType_fromName_closure.prototype = {
    call$1(e) {
      return type$.ProviderAuthType._as(e)._core$_name === this.name;
    },
    $signature: 100
  };
  A.ProviderAuthType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_provider_infomarion_null);
    },
    $signature: 1
  };
  A.ProviderAuthType_fromTag_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_bytesEqual(this.tag, type$.ProviderAuthType._as(e).tag);
    },
    $signature: 100
  };
  A.ProviderAuthType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_provider_infomarion_null);
    },
    $signature: 1
  };
  A.ProviderAuthenticated.prototype = {};
  A.BasicProviderAuthenticated.prototype = {
    toCbor$0() {
      var t1 = this.type,
        t2 = A._setArrayType([t1._core$_name, this.key, this.value], type$.JSArray_String);
      return new A.CborTagValue(A.List_List$unmodifiable(t1.tag, type$.int), new A.CborListValue(t2, true, type$.CborListValue_String), type$.CborTagValue_dynamic);
    },
    toUri$1(uri) {
      var t1;
      if (this.type !== B.ProviderAuthType_qh2)
        return uri;
      t1 = type$.String;
      return uri.replace$1$queryParameters(A.LinkedHashMap_LinkedHashMap$_literal([this.key, this.value], t1, t1));
    },
    toHeaders$1(headers) {
      var t1, t2;
      type$.nullable_Map_String_String._as(headers);
      if (this.type !== B.ProviderAuthType_EQC)
        return headers;
      if (headers == null) {
        t1 = type$.String;
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      } else
        t1 = headers;
      t2 = type$.String;
      t1 = A.LinkedHashMap_LinkedHashMap$of(t1, t2, t2);
      t1.addAll$1(0, A.LinkedHashMap_LinkedHashMap$_literal([this.key, this.value], t2, t2));
      return t1;
    },
    get$variabels() {
      return [this.type, this.key, this.value];
    },
    get$value() {
      return this.value;
    }
  };
  A.DigestProviderAuthenticated.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.password, this.username], type$.JSArray_String);
      return new A.CborTagValue(A.List_List$unmodifiable(this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_String), type$.CborTagValue_dynamic);
    },
    toUri$1(uri) {
      return uri;
    },
    toHeaders$1(headers) {
      var t1;
      type$.nullable_Map_String_String._as(headers);
      if (this.type !== B.ProviderAuthType_EQC)
        return headers;
      t1 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
    },
    get$variabels() {
      return [this.type, this.password, this.username];
    }
  };
  A._ProviderAuthenticated_Object_CborSerializable.prototype = {};
  A._ProviderAuthenticated_Object_CborSerializable_Equatable.prototype = {};
  A.HttpClientManager.prototype = {
    call$6$authenticated$clientType$headers$method$t$uri(authenticated, clientType, headers, method, t, uri) {
      type$.Future_Response_Function_$named_$req_client_RetryClient_and_$req_headers_nullable_Map_String_String_and_$req_uri_Uri._as(t);
      type$.Uri._as(uri);
      type$.HTTPClientType._as(clientType);
      type$.HTTPRequestType._as(method);
      return this.$call$body$HttpClientManager(type$.nullable_ProviderAuthenticated._as(authenticated), clientType, type$.nullable_Map_String_String._as(headers), method, t, uri);
    },
    $call$body$HttpClientManager(authenticated, clientType, headers, method, t, uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, r, t1, t2, t3, client;
      var $async$call$6$authenticated$clientType$headers$method$t$uri = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              client = $async$self.getCashedClient$3$authenticated$client$uri(authenticated, clientType, uri);
              $async$handler = 3;
              t1 = client.client;
              t2 = client.toHeaders$3$headers$method$uri(headers, method, uri);
              t3 = client.authenticated;
              t3 = t3 == null ? null : t3.toUri$1(uri);
              $async$goto = 6;
              return A._asyncAwait(t.call$3$client$headers$uri(t1, t2, t3 == null ? uri : t3), $async$call$6$authenticated$clientType$headers$method$t$uri);
            case 6:
              // returning from await.
              r = $async$result;
              $async$goto = 7;
              return A._asyncAwait(client.call$5$headers$method$onRetry$response$uri(headers, method, new A.HttpClientManager_call_closure(t), r, uri), $async$call$6$authenticated$clientType$headers$method$t$uri);
            case 7:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              if (clientType === B.HTTPClientType_1)
                client.dispose$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$6$authenticated$clientType$headers$method$t$uri, $async$completer);
    },
    getCashedClient$3$authenticated$client$uri(authenticated, client, uri) {
      var identifier, cachedClient, newClient, client0, inner, t1, t2, _this = this, _null = null;
      if (client === B.HTTPClientType_1) {
        A.zoneClient();
        inner = A.RetryClient$(new A.BrowserClient(A.LinkedHashSet_LinkedHashSet$_empty(type$.JSObject)), A.retry___defaultWhen$closure());
        if ((authenticated == null ? _null : authenticated.type) === B.ProviderAuthType_pFR)
          return new A._DigestAuthClient(1, _null, inner, type$.DigestProviderAuthenticated._as(authenticated));
        return new A._Client(inner, authenticated, type$._Client_nullable_ProviderAuthenticated);
      }
      try {
        identifier = uri.get$host() + "_" + J.get$hashCode$(authenticated);
        t1 = _this._clients;
        if (t1.containsKey$1(identifier)) {
          t1 = t1.$index(0, identifier);
          t1.toString;
          cachedClient = t1;
          t1 = cachedClient;
          t2 = t1._timer;
          if (t2 != null)
            t2.cancel$0();
          t1._startTimer$0();
          return cachedClient;
        }
        A.zoneClient();
        newClient = A.RetryClient$(new A.BrowserClient(A.LinkedHashSet_LinkedHashSet$_empty(type$.JSObject)), new A.HttpClientManager_getCashedClient_closure());
        client0 = null;
        if ((authenticated == null ? _null : authenticated.type) === B.ProviderAuthType_pFR) {
          client = new A._DigestAuthCachedClient(1, _null, new A.HttpClientManager_getCashedClient_closure0(_this, identifier), B.Duration_180000000, newClient, type$.DigestProviderAuthenticated._as(authenticated));
          client._startTimer$0();
          client0 = client;
        } else {
          client = new A._CachedClient(new A.HttpClientManager_getCashedClient_closure1(_this, identifier), B.Duration_180000000, newClient, authenticated);
          client._startTimer$0();
          client0 = client;
        }
        t1.$indexSet(0, identifier, client0);
        t1 = client0;
        return t1;
      } finally {
        A.print("\x1b[33m" + ("clients: " + _this._clients.toString$0(0)) + "\x1b[0m");
      }
    }
  };
  A.HttpClientManager_call_closure.prototype = {
    call$3$client$headers$uri(client, headers, uri) {
      return this.t.call$3$client$headers$uri(type$.RetryClient._as(client), type$.nullable_Map_String_String._as(headers), type$.Uri._as(uri));
    },
    $signature: 55
  };
  A.HttpClientManager_getCashedClient_closure.prototype = {
    call$1(response) {
      return B.JSArray_methods.contains$1(B.List_8aB0, type$.BaseResponse._as(response).statusCode);
    },
    $signature: 101
  };
  A.HttpClientManager_getCashedClient_closure0.prototype = {
    call$0() {
      return this.$this._clients.remove$1(0, this.identifier);
    },
    $signature: 0
  };
  A.HttpClientManager_getCashedClient_closure1.prototype = {
    call$0() {
      return this.$this._clients.remove$1(0, this.identifier);
    },
    $signature: 0
  };
  A._Client.prototype = {
    toHeaders$4$body$headers$method$uri(body, headers, method, uri) {
      var t1;
      type$.nullable_Map_String_String._as(headers);
      t1 = this.authenticated;
      t1 = t1 == null ? null : t1.toHeaders$1(headers);
      return t1 == null ? headers : t1;
    },
    toHeaders$3$headers$method$uri(headers, method, uri) {
      return this.toHeaders$4$body$headers$method$uri(null, headers, method, uri);
    },
    call$5$headers$method$onRetry$response$uri(headers, method, onRetry, response, uri) {
      type$.Response._as(response);
      type$.Future_Response_Function_$named_$req_client_RetryClient_and_$req_headers_nullable_Map_String_String_and_$req_uri_Uri._as(onRetry);
      type$.HTTPRequestType._as(method);
      type$.Uri._as(uri);
      return this.$call$body$_Client(type$.nullable_Map_String_String._as(headers), method, onRetry, response, uri);
    },
    $call$body$_Client(headers, method, onRetry, response, uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue;
      var $async$call$5$headers$method$onRetry$response$uri = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = response;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$5$headers$method$onRetry$response$uri, $async$completer);
    },
    dispose$0() {
      this.client._inner.close$0();
    },
    get$authenticated() {
      return this.authenticated;
    }
  };
  A._CachedClientImpl.prototype = {
    _startTimer$0() {
      this._timer = A.Timer_Timer(this.idleTimeout, new A._CachedClientImpl__startTimer_closure(this));
    },
    dispose$0() {
      var t1 = this._timer;
      if (t1 != null)
        t1.cancel$0();
      this.client._inner.close$0();
    }
  };
  A._CachedClientImpl__startTimer_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.client._inner.close$0();
      t1.onDispose.call$0();
    },
    $signature: 0
  };
  A._CachedClient.prototype = {};
  A._DigestAuthClient.prototype = {};
  A._DigestAuthCachedClient.prototype = {};
  A._DigestAuthClientImpl.prototype = {};
  A.__DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl.prototype = {
    toHeaders$3$headers$method$uri(headers, method, uri) {
      var t1, t2, h, t3, t4, _this = this;
      type$.nullable_Map_String_String._as(headers);
      if (_this._DigestAuthClientImpl__challenge != null) {
        t1 = _this.get$authenticated();
        t2 = _this._DigestAuthClientImpl__challenge;
        t2.toString;
        h = A.DigestAuthenticatedUtils_getDigestAuthenticatedHeader(t1, _this._DigestAuthClientImpl__id, method, t2, uri);
        ++_this._DigestAuthClientImpl__id;
        t2 = type$.String;
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        for (t3 = h.get$entries(), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
          t4 = t3.get$current();
          t1.$indexSet(0, A._asString(t4.key), A._asString(t4.value));
        }
        t1.addAll$1(0, headers == null ? A.LinkedHashMap_LinkedHashMap$_empty(t2, t2) : headers);
        return t1;
      }
      return _this.super$_Client$toHeaders(null, headers, method, uri);
    },
    call$5$headers$method$onRetry$response$uri(headers, method, onRetry, response, uri) {
      type$.Response._as(response);
      type$.Future_Response_Function_$named_$req_client_RetryClient_and_$req_headers_nullable_Map_String_String_and_$req_uri_Uri._as(onRetry);
      type$.HTTPRequestType._as(method);
      type$.Uri._as(uri);
      return this.$call$body$__DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl(type$.nullable_Map_String_String._as(headers), method, onRetry, response, uri);
    },
    $call$body$__DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl(headers, method, onRetry, response, uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, t1;
      var $async$call$5$headers$method$onRetry$response$uri = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                switch (response.statusCode) {
                  case 401:
                    A.print("\x1b[31m" + ("digest client 404 " + uri.toString$0(0)) + "\x1b[0m");
                    t1 = A.DigestAuthenticatedUtils_getChallenges(response.headers);
                    $async$self._DigestAuthClientImpl__challenge = t1;
                    if (t1 != null) {
                      $async$self._DigestAuthClientImpl__id = 1;
                      $async$returnValue = onRetry.call$3$client$headers$uri($async$self.client, $async$self.toHeaders$3$headers$method$uri(headers, method, uri), uri);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    break;
                }
                $async$returnValue = $async$self.super$_Client$call(headers, method, onRetry, response, uri);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$call$5$headers$method$onRetry$response$uri, $async$completer);
    }
  };
  A.__DigestAuthClient__Client__DigestAuthClientImpl.prototype = {
    toHeaders$3$headers$method$uri(headers, method, uri) {
      var t1, t2, h, t3, t4, _this = this;
      type$.nullable_Map_String_String._as(headers);
      if (_this._DigestAuthClientImpl__challenge != null) {
        t1 = _this.get$authenticated();
        t2 = _this._DigestAuthClientImpl__challenge;
        t2.toString;
        h = A.DigestAuthenticatedUtils_getDigestAuthenticatedHeader(t1, _this._DigestAuthClientImpl__id, method, t2, uri);
        ++_this._DigestAuthClientImpl__id;
        t2 = type$.String;
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        for (t3 = h.get$entries(), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
          t4 = t3.get$current();
          t1.$indexSet(0, A._asString(t4.key), A._asString(t4.value));
        }
        t1.addAll$1(0, headers == null ? A.LinkedHashMap_LinkedHashMap$_empty(t2, t2) : headers);
        return t1;
      }
      return _this.super$_Client$toHeaders(null, headers, method, uri);
    },
    call$5$headers$method$onRetry$response$uri(headers, method, onRetry, response, uri) {
      type$.Response._as(response);
      type$.Future_Response_Function_$named_$req_client_RetryClient_and_$req_headers_nullable_Map_String_String_and_$req_uri_Uri._as(onRetry);
      type$.HTTPRequestType._as(method);
      type$.Uri._as(uri);
      return this.$call$body$__DigestAuthClient__Client__DigestAuthClientImpl(type$.nullable_Map_String_String._as(headers), method, onRetry, response, uri);
    },
    $call$body$__DigestAuthClient__Client__DigestAuthClientImpl(headers, method, onRetry, response, uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, t1;
      var $async$call$5$headers$method$onRetry$response$uri = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                switch (response.statusCode) {
                  case 401:
                    A.print("\x1b[31m" + ("digest client 404 " + uri.toString$0(0)) + "\x1b[0m");
                    t1 = A.DigestAuthenticatedUtils_getChallenges(response.headers);
                    $async$self._DigestAuthClientImpl__challenge = t1;
                    if (t1 != null) {
                      $async$self._DigestAuthClientImpl__id = 1;
                      $async$returnValue = onRetry.call$3$client$headers$uri($async$self.client, $async$self.toHeaders$3$headers$method$uri(headers, method, uri), uri);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    break;
                }
                $async$returnValue = $async$self.super$_Client$call(headers, method, onRetry, response, uri);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$call$5$headers$method$onRetry$response$uri, $async$completer);
    }
  };
  A.HTTPClientType.prototype = {
    _enumToString$0() {
      return "HTTPClientType." + this._core$_name;
    }
  };
  A.HTTPResponseType.prototype = {
    _enumToString$0() {
      return "HTTPResponseType." + this._core$_name;
    }
  };
  A.HTTPCallerResponse.prototype = {
    error$0() {
      var t1 = this.statusCode;
      if (t1 >= 200 && t1 < 300)
        return null;
      return A._asStringQ(this.result);
    }
  };
  A.HTTPCallerResponse_HTTPCallerResponse$parse_closure.prototype = {
    call$1(e) {
      return type$.Map_dynamic_dynamic._as(e).cast$2$0(0, type$.String, type$.dynamic);
    },
    $signature: 17
  };
  A.DigestAuthHeadersAlg.prototype = {
    _enumToString$0() {
      return "DigestAuthHeadersAlg." + this._core$_name;
    },
    hashBytes$1(input) {
      var t1, h, digest, _this = this;
      type$.List_int._as(input);
      $label0$0: {
        if (B.DigestAuthHeadersAlg_MD5_0_md5 === _this || B.DigestAuthHeadersAlg_iYJ === _this) {
          t1 = A.MD5_hash(input);
          break $label0$0;
        }
        if (B.DigestAuthHeadersAlg_4KH === _this || B.DigestAuthHeadersAlg_2Vk === _this) {
          t1 = A.SHA256_hash(input);
          break $label0$0;
        }
        if (B.DigestAuthHeadersAlg_xHT === _this || B.DigestAuthHeadersAlg_CFv === _this) {
          t1 = A.SHA512_hash(input);
          break $label0$0;
        }
        if (B.DigestAuthHeadersAlg_vC8 === _this || B.DigestAuthHeadersAlg_QWm === _this) {
          t1 = type$.int;
          h = new A.SHA512256(A.List_List$filled(8, 0, false, t1), A.List_List$filled(8, 0, false, t1), A.List_List$filled(16, 0, false, t1), A.List_List$filled(16, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$unmodifiable(B.List_ePs, t1));
          h.reset$0();
          h.update$1(input);
          digest = h.digest$0();
          h.clean$0();
          t1 = digest;
          break $label0$0;
        }
        t1 = null;
      }
      return t1;
    }
  };
  A.DigestAuthHeadersAlg_fromName_closure.prototype = {
    call$1(e) {
      return type$.DigestAuthHeadersAlg._as(e).name === this.name;
    },
    $signature: 239
  };
  A.DigestAuthHeadersAlg_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.WalletException$("unsuported_digest_auth_algorithm"));
    },
    $signature: 1
  };
  A.DigestAuthQop.prototype = {
    _enumToString$0() {
      return "DigestAuthQop." + this._core$_name;
    }
  };
  A.DigestAuthQop_fromName_closure.prototype = {
    call$1(e) {
      return type$.DigestAuthQop._as(e).name === this.name;
    },
    $signature: 240
  };
  A.DigestAuthQop_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.WalletException$("unsuported_digest_auth_qop"));
    },
    $signature: 1
  };
  A.DigestAuthHeaders.prototype = {};
  A.DigestAuthenticatedUtils_parseDigestHeader_closure.prototype = {
    call$1(e) {
      return B.JSString_methods.trim$0(A._asString(e));
    },
    $signature: 13
  };
  A.DigestAuthenticatedUtils_parseDigestHeader_closure0.prototype = {
    call$1(e) {
      A._asString(e);
      return e.length !== 0 && e !== ",";
    },
    $signature: 19
  };
  A.DigestAuthenticatedUtils_parseDigestHeader_closure1.prototype = {
    call$1(e) {
      return B.JSString_methods.trim$0(A._asString(e));
    },
    $signature: 13
  };
  A._Live.prototype = {
    toString$0(_) {
      A.LiveListenable__addListener(this);
      return this._live$_value._enumToString$0();
    },
    $eq(_, o) {
      var t1, _this = this;
      if (o == null)
        return false;
      t1 = _this.$ti;
      if (t1._precomputed1._is(o)) {
        A.LiveListenable__addListener(_this);
        return _this._live$_value === o;
      }
      if (t1._eval$1("LiveListenable<1>")._is(o)) {
        A.LiveListenable__addListener(_this);
        t1 = _this._live$_value;
        A.LiveListenable__addListener(o);
        return t1 === o._live$_value;
      }
      return false;
    },
    get$hashCode(_) {
      A.LiveListenable__addListener(this);
      return A.Primitives_objectHashCode(this._live$_value);
    }
  };
  A.Live.prototype = {};
  A._LiveListenable.prototype = {
    notify$0() {
      var t1, t2, _i;
      for (t1 = A.List_List$of(this._LiveListenable__noneIdsListeners, true, type$.void_Function), t2 = t1.length, _i = 0; _i < t2; ++_i)
        t1[_i].call$0();
    }
  };
  A.LiveListenable.prototype = {
    get$value() {
      return this._live$_value;
    },
    set$value(newValue) {
      var _this = this;
      _this.$ti._precomputed1._as(newValue);
      if (_this._live$_value === newValue)
        return;
      _this.set$_live$_value(newValue);
      _this.notify$0();
    },
    set$_live$_value(_value) {
      this._live$_value = this.$ti._precomputed1._as(_value);
    }
  };
  A._LiveListenable_Object__LiveListenable.prototype = {};
  A.CborSerializable.prototype = {};
  A.SynchronizedLock.prototype = {};
  A.MethodUtils_call_closure.prototype = {
    call$1$0($T) {
      return this.completer;
    },
    call$0() {
      return this.call$1$0(type$.dynamic);
    },
    $signature() {
      return this.T._eval$1("Completer<0>()<Object?>");
    }
  };
  A.MethodResult.prototype = {
    get$result() {
      var t1 = this.exception;
      if (t1 != null)
        throw A.wrapException(t1);
      t1 = this.__MethodResult__result_F;
      t1 === $ && A.throwLateFieldNI("_result");
      return t1;
    },
    toString$0(_) {
      if (this.exception != null)
        return "Error " + A.S(this.error);
      return "Success " + A.S(this.get$result());
    }
  };
  A.CustomCoins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$proposal() {
      return B.C_CustomProposal;
    },
    get$value() {
      return this;
    },
    get$conf() {
      return this.conf;
    }
  };
  A.CustomCoins_fromName_closure.prototype = {
    call$1(element) {
      return type$.CustomCoins._as(element).name === this.name;
    },
    $signature: 241
  };
  A.CustomProposal.prototype = {
    get$specName() {
      return "CIP-0019";
    },
    get$value() {
      return this;
    },
    $isBipProposal: 1,
    get$name() {
      return "CIP-0019";
    }
  };
  A.CustomCurrencyConf_byronLegacy_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronLegacyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 102
  };
  A.CustomCurrencyConf_byronLegacyTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronLegacyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 102
  };
  A.AddressDerivationType.prototype = {
    _enumToString$0() {
      return "AddressDerivationType." + this._core$_name;
    }
  };
  A.AddressDerivationType_fromTag_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_bytesEqual(type$.AddressDerivationType._as(e).tag, this.tag);
    },
    $signature: 243
  };
  A.AddressDerivationType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_account_details_null);
    },
    $signature: 1
  };
  A.AddressDerivationIndex.prototype = {};
  A._AddressDerivationIndex_Object_CborSerializable.prototype = {};
  A._AddressDerivationIndex_Object_CborSerializable_Equatable.prototype = {};
  A.Bip32AddressIndex.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.currencyCoin,
        t2 = t1.get$proposal().get$specName();
      t1 = t1.get$coinName();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_81, type$.int), new A.CborListValue([_this.purpose, _this.coin, _this.accountLevel, _this.changeLevel, _this.addressIndex, new A.CborStringValue(t2), new A.CborStringValue(t1), _this.seedGeneration.name, _this.importedKeyId, _this.keyName], false, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      var _this = this;
      return [_this.purpose, _this.coin, _this.accountLevel, _this.changeLevel, _this.addressIndex, _this.currencyCoin.get$conf().get$type(), _this.seedGeneration.name, _this.importedKeyId];
    },
    derive$2$maxLevel(masterKey, maxLevel) {
      var key, t1, bip32KeyIndexes, maxIndex, deriveToIndex, _i;
      if (maxLevel === B.Bip44Levels_0_Master || this.get$indexes().length === 0)
        return masterKey;
      key = masterKey.toBipKey$0();
      t1 = type$.Bip32KeyIndex;
      bip32KeyIndexes = A.List_List$unmodifiable(this.get$indexes(), t1);
      maxIndex = maxLevel.value;
      if (bip32KeyIndexes.length > maxIndex)
        bip32KeyIndexes = A.List_List$unmodifiable(B.JSArray_methods.sublist$2(bip32KeyIndexes, 0, maxIndex), t1);
      for (t1 = bip32KeyIndexes.length, deriveToIndex = key, _i = 0; _i < t1; ++_i)
        deriveToIndex = deriveToIndex.childKey$1(bip32KeyIndexes[_i]);
      return A.CryptoPrivateKeyData_CryptoPrivateKeyData$fromBip32(deriveToIndex, masterKey.get$coin(), masterKey.get$keyName());
    },
    get$indexes() {
      var _this = this,
        t1 = type$.MappedIterable_of_nullable_int_and_Bip32KeyIndex;
      return A.List_List$of(new A.MappedIterable(new A.WhereIterable(A._setArrayType([_this.purpose, _this.coin, _this.accountLevel, _this.changeLevel, _this.addressIndex], type$.JSArray_nullable_int), type$.bool_Function_nullable_int._as(new A.Bip32AddressIndex_indexes_closure()), type$.WhereIterable_nullable_int), type$.Bip32KeyIndex_Function_nullable_int._as(new A.Bip32AddressIndex_indexes_closure0()), t1), true, t1._eval$1("Iterable.E"));
    },
    toString$0(_) {
      var t1 = this.hdPath;
      return t1 == null ? "non_derivation" : t1;
    },
    get$derivationType() {
      return B.AddressDerivationType_656;
    },
    get$name() {
      var t1 = this.keyName;
      return t1 == null ? "main_key" : t1;
    },
    get$importedKeyId() {
      return this.importedKeyId;
    },
    get$hdPath() {
      return this.hdPath;
    },
    get$seedGeneration() {
      return this.seedGeneration;
    },
    get$currencyCoin() {
      return this.currencyCoin;
    }
  };
  A.Bip32AddressIndex__toPath_closure.prototype = {
    call$1(element) {
      return A._asIntQ(element) != null;
    },
    $signature: 103
  };
  A.Bip32AddressIndex__toPath_closure0.prototype = {
    call$1(e) {
      A._asIntQ(e);
      e.toString;
      return A.Bip32KeyIndex_Bip32KeyIndex(e);
    },
    $signature: 104
  };
  A.Bip32AddressIndex_indexes_closure.prototype = {
    call$1(element) {
      return A._asIntQ(element) != null;
    },
    $signature: 103
  };
  A.Bip32AddressIndex_indexes_closure0.prototype = {
    call$1(e) {
      A._asIntQ(e);
      e.toString;
      return A.Bip32KeyIndex_Bip32KeyIndex(e);
    },
    $signature: 104
  };
  A.MultiSigAddressIndex.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([null], type$.JSArray_nullable_String);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_83, type$.int), new A.CborListValue(t1, true, type$.CborListValue_nullable_String), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [];
    },
    get$currencyCoin() {
      return A.throwExpression(B.WalletException_inaccessible_key_algorithm_null);
    },
    get$seedGeneration() {
      return A.throwExpression(B.WalletException_unsuported_feature_null);
    },
    get$derivationType() {
      return B.AddressDerivationType_AW6;
    },
    get$name() {
      return "multi_signature";
    },
    toString$0(_) {
      return "multi_signature";
    },
    get$importedKeyId() {
      return null;
    },
    derive$2$maxLevel(masterKey, maxLevel) {
      throw A.wrapException(B.WalletException_nmo);
    },
    get$hdPath() {
      return null;
    }
  };
  A.SubstrateAddressIndex.prototype = {
    get$hdPath() {
      return this.substratePath;
    },
    toCbor$0() {
      var _this = this,
        t1 = _this.substratePath;
      if (t1 == null)
        t1 = B.C_CborNullValue;
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_84, type$.int), new A.CborListValue([new A.CborStringValue("substrate"), new A.CborStringValue(_this.currencyCoin.name), t1, _this.importedKeyId, _this.keyName], false, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [$.$get$SubstrateCoins__coinToConf().$index(0, this.currencyCoin).type, this.importedKeyId, this.substratePath];
    },
    toString$0(_) {
      var t1 = this.substratePath;
      return t1 == null ? "non_derivation" : t1;
    },
    get$derivationType() {
      return B.AddressDerivationType_wEo;
    },
    get$name() {
      var t1 = this.keyName;
      return t1 == null ? "main_key" : t1;
    },
    derive$2$maxLevel(masterKey, maxLevel) {
      var t2, t3, t4, t5, t6, derive,
        t1 = this.substratePath;
      if (t1 == null)
        return masterKey;
      t2 = masterKey.privateKeyBytes$0();
      t3 = this.currencyCoin;
      t4 = $.$get$SubstrateCoins__coinToConf();
      t5 = t4.$index(0, t3);
      t2 = A.SubstratePrvKey__keyFromBytes(t2, t5.type);
      t6 = t2.get$publicKey();
      t3 = t4.$index(0, t3);
      t3.toString;
      derive = new A.Substrate(new A.SubstratePrvKey(t2, t5), new A.SubstratePubKey(t6, t5), new A.SubstratePath(B.List_empty5), t3).derivePath$1(t1);
      t1 = masterKey.get$coin();
      t3 = masterKey.get$keyName();
      t2 = derive._priveKey;
      if (t2 == null)
        A.throwExpression(B.SubstrateKeyError_vrN);
      return A.PrivateKeyData_PrivateKeyData(t1, t2.privKey, t3);
    },
    get$importedKeyId() {
      return this.importedKeyId;
    },
    get$seedGeneration() {
      return B.SeedTypes_Bip39Entropy_1_bip39Entropy;
    },
    get$currencyCoin() {
      return this.currencyCoin;
    }
  };
  A.CryptoWokerImpl.prototype = {};
  A.EncryptedIsolateMessageController.prototype = {
    handleMessage$3$args$encryptedPart$id(args, encryptedPart, id) {
      return this.handleMessage$body$EncryptedIsolateMessageController(args, type$.nullable_List_int._as(encryptedPart), id);
    },
    handleMessage$body$EncryptedIsolateMessageController(args, encryptedPart, id) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.IsolateResponseMessage_dynamic_IsolateMessageArgs),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, msg, msg0, streamId, msg1, msg2, controller, msg3, e, s, e0, e1, t1, t2, t3, t4, masterKey, exception, _box_0, result, $async$exception;
      var $async$handleMessage$3$args$encryptedPart$id = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_0 = {};
              result = null;
              $async$handler = 4;
            case 7:
              // switch
              switch (args.get$type().index) {
                case 8:
                  // goto case
                  $async$goto = 9;
                  break;
                case 7:
                  // goto case
                  $async$goto = 10;
                  break;
                case 9:
                  // goto case
                  $async$goto = 11;
                  break;
                case 2:
                  // goto case
                  $async$goto = 12;
                  break;
                case 10:
                  // goto case
                  $async$goto = 13;
                  break;
                default:
                  // goto default
                  $async$goto = 14;
                  break;
              }
              break;
            case 9:
              // case
              if (!(args instanceof A.NoneEncryptedCryptoRequest))
                A.throwExpression(B.WalletException_data_verification_failed_null);
              msg = args;
              $async$goto = 15;
              return A._asyncAwait(msg.getResult$1$encryptedPart(encryptedPart), $async$handleMessage$3$args$encryptedPart$id);
            case 15:
              // returning from await.
              result = $async$result;
              // goto after switch
              $async$goto = 8;
              break;
            case 10:
              // case
              if (!(args instanceof A.CryptoRequest))
                A.throwExpression(B.WalletException_data_verification_failed_null);
              msg0 = args;
              result = msg0.getResult$0();
              // goto after switch
              $async$goto = 8;
              break;
            case 11:
              // case
              streamId = A.UUID_generateUUIDv4();
              if (!(args instanceof A.IsolateStreamRequest))
                A.throwExpression(B.WalletException_data_verification_failed_null);
              msg1 = args;
              _box_0.subscription = null;
              _box_0.subscription = msg1.getIsolateResult$2$encryptedPart$streamId(encryptedPart, streamId).listen$2$onDone(new A.EncryptedIsolateMessageController_handleMessage_closure($async$self, id), new A.EncryptedIsolateMessageController_handleMessage_closure0(_box_0, $async$self, streamId));
              $async$self.streams.$indexSet(0, streamId, msg1);
              result = new A.MessageArgsStreamId(streamId);
              // goto after switch
              $async$goto = 8;
              break;
            case 12:
              // case
              if (!(args instanceof A.MessageArgsStream))
                A.throwExpression(B.WalletException_data_verification_failed_null);
              msg2 = args;
              controller = $async$self.streams.$index(0, msg2.streamId);
              A.print("\x1b[33m" + ("on stream mesage " + A.S(controller)) + "\x1b[0m");
              if (controller == null) {
                result = new A.MessageArgsException("stream_does_not_exists");
                // goto after switch
                $async$goto = 8;
                break;
              }
              J.add$1$ax(controller, msg2);
              result = new A.MessageArgsMessage(null);
              // goto after switch
              $async$goto = 8;
              break;
            case 13:
              // case
              if (!(args instanceof A.WalletArgs))
                A.throwExpression(B.WalletException_data_verification_failed_null);
              msg3 = args;
              t1 = msg3;
              t2 = t1.nonce;
              t3 = t1.walletData;
              t4 = t1.key;
              masterKey = A.CryptoRequestReadMasterKey_getWalletMasterKeys(t4, t2, t3);
              result = t1.args.getResult$2$key$wallet(t4, masterKey);
              // goto after switch
              $async$goto = 8;
              break;
            case 14:
              // default
              result = B.MessageArgsException_data_verification_failed;
              // goto after switch
              $async$goto = 8;
              break;
            case 8:
              // after switch
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.WalletException) {
                e = t1;
                s = A.getTraceFromException($async$exception);
                A.print("\x1b[33m" + ("got error2 " + e.message + " " + A.S(s)) + "\x1b[0m");
                result = new A.MessageArgsException(J.toString$0$(e));
              } else if (type$.BlockchainUtilsException._is(t1)) {
                e0 = t1;
                result = new A.MessageArgsException(e0.get$message());
              } else {
                e1 = t1;
                A.print("\x1b[33m" + ("got error " + A.S(e1)) + "\x1b[0m");
                result = B.MessageArgsException_data_verification_failed;
              }
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              if (type$.CborMessageArgs._is(result)) {
                $async$returnValue = new A.IsolateCborResponseMessage(result, id);
                // goto return
                $async$goto = 1;
                break;
              }
              throw A.wrapException(A.UnimplementedError$(null));
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$handleMessage$3$args$encryptedPart$id, $async$completer);
    }
  };
  A.EncryptedIsolateMessageController_handleMessage_closure.prototype = {
    call$1(e) {
      this.$this.onStreamCallBack.call$1(new A.IsolateCborResponseMessage(type$.MessageArgsStream._as(e), this.id));
    },
    $signature: 246
  };
  A.EncryptedIsolateMessageController_handleMessage_closure0.prototype = {
    call$0() {
      var r,
        t1 = this._box_0,
        t2 = t1.subscription;
      if (t2 != null)
        t2.cancel$0();
      t1.subscription = null;
      r = this.$this.streams.remove$1(0, this.streamId);
      t1 = r;
      if (t1 != null)
        t1.close$0();
    },
    $signature: 0
  };
  A.IsolateCryptoWoker.prototype = {};
  A.BrowserCryptoWorker.prototype = {};
  A._WorkerConnector.prototype = {};
  A.AdaLegacyPublicKeyData.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.uncomprossed;
      if (t1 == null)
        t1 = B.C_CborNullValue;
      t1 = A._setArrayType([_this.extendedKey, _this.comprossed, t1, _this.keyName, _this.hdPathKey, _this.chainCode], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180_12, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    chainCodeBytes$0() {
      return A.BytesUtils_fromHexString(this.chainCode);
    },
    get$comprossed() {
      return this.comprossed;
    },
    get$chainCode() {
      return this.chainCode;
    }
  };
  A.CryptoPublicKeyData.prototype = {
    keyBytes$0() {
      switch (0) {
        case 0:
          return A.BytesUtils_fromHexString(this.get$comprossed());
      }
    },
    chainCodeBytes$0() {
      return A.BytesUtils_tryFromHexString(this.get$chainCode());
    }
  };
  A.CryptoPrivateKeyData.prototype = {};
  A._CryptoPrivateKeyData_Object_CborSerializable.prototype = {};
  A._CryptoPublicKeyData_Object_CborSerializable.prototype = {};
  A.AccessCryptoPrivateKeysRequest.prototype = {
    toCbor$0() {
      var t1 = this.indexes,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("CborTagValue<@>(1)")._as(new A.AccessCryptoPrivateKeysRequest_toCbor_closure()), t3), true, t3._eval$1("ListIterable.E"));
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180_10, type$.int), t3, type$.CborTagValue_dynamic);
    }
  };
  A.AccessCryptoPrivateKeysRequest_AccessCryptoPrivateKeysRequest$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      var cbor = A.CborSerializable_decodeCborTags(null, type$.nullable_CborObject._as(e), B.List_180_9, type$.CborListValue_dynamic);
      return new A.AccessCryptoPrivateKeyRequest(A.AddressDerivationIndex_fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 0)), A.ExtractCborList_elementAt(cbor, 1, type$.int));
    },
    $signature: 247
  };
  A.AccessCryptoPrivateKeysRequest_toCbor_closure.prototype = {
    call$1(e) {
      return type$.AccessCryptoPrivateKeyRequest._as(e).toCbor$0();
    },
    $signature: 310
  };
  A.AccessCryptoPrivateKeyRequest.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.index.toCbor$0(), this.maxLevel], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180_9, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A._AccessCryptoPrivateKeyRequest_Object_CborSerializable.prototype = {};
  A._AccessCryptoPrivateKeysRequest_Object_CborSerializable.prototype = {};
  A.CryptoPrivateKeysResponse.prototype = {
    toCbor$0() {
      var t1 = this.keys,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("CborTagValue<@>(1)")._as(new A.CryptoPrivateKeysResponse_toCbor_closure()), t3), true, t3._eval$1("ListIterable.E"));
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180_10, type$.int), t3, type$.CborTagValue_dynamic);
    }
  };
  A.CryptoPrivateKeysResponse_toCbor_closure.prototype = {
    call$1(e) {
      return type$.CryptoPrivateKeyData._as(e).toCbor$0();
    },
    $signature: 249
  };
  A.CryptoPublicKeysResponse.prototype = {
    toCbor$0() {
      var t1 = this.keys,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("CborTagValue<@>(1)")._as(new A.CryptoPublicKeysResponse_toCbor_closure()), t3), true, t3._eval$1("ListIterable.E"));
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180_13, type$.int), t3, type$.CborTagValue_dynamic);
    }
  };
  A.CryptoPublicKeysResponse_toCbor_closure.prototype = {
    call$1(e) {
      return type$.CryptoPublicKeyData._as(e).toCbor$0();
    },
    $signature: 250
  };
  A._CryptoPrivateKeysResponse_Object_CborSerializable.prototype = {};
  A._CryptoPublicKeysResponse_Object_CborSerializable.prototype = {};
  A.MoneroPrivateKeyData.prototype = {
    toCbor$0() {
      var t3, t4, t5, t6, t7, _this = this,
        t1 = _this.coin,
        t2 = t1.get$proposal().get$specName();
      t1 = t1.get$coinName();
      t3 = _this.wif;
      if (t3 == null)
        t3 = B.C_CborNullValue;
      t4 = _this.publicKey.toCbor$0();
      t5 = _this.spendPrivateKey.privateKey.key;
      A.BytesUtils_validateListOfBytes(t5);
      t6 = type$.int;
      t5 = A.List_List$unmodifiable(t5, t6);
      t7 = _this.viewPrivateKey.privateKey.key;
      A.BytesUtils_validateListOfBytes(t7);
      t7 = A.List_List$unmodifiable(t7, t6);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180_16, t6), new A.CborListValue([new A.CborStringValue(t2 + "#" + t1), _this.privateKey, _this.extendedKey, t3, _this.keyName, t4, new A.CborBytesValue(t5), new A.CborBytesValue(t7)], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    toBipKey$0() {
      var _this = this,
        t1 = _this.extendedKey;
      if (t1 == null)
        return A.BlockchainUtils_privteKeyToBip32(_this.coin, _this.privateKey);
      return A.BlockchainUtils_extendedKeyToBip32Key(_this.coin, t1);
    },
    privateKeyBytes$0() {
      return A.BytesUtils_fromHexString(this.privateKey);
    },
    get$coin() {
      return this.coin;
    },
    get$keyName() {
      return this.keyName;
    },
    get$publicKey() {
      return this.publicKey;
    }
  };
  A.MoneroPublicKeyData.prototype = {
    toCbor$0() {
      var t2, t3, t4, _this = this,
        t1 = _this.spendPublicKey.publicKey._encoded;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = _this.viewPrivateKey.privateKey.key;
      A.BytesUtils_validateListOfBytes(t3);
      t3 = A.List_List$unmodifiable(t3, t2);
      t4 = _this.viewPublicKey.publicKey._encoded;
      A.BytesUtils_validateListOfBytes(t4);
      t4 = A.List_List$unmodifiable(t4, t2);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180_15, t2), new A.CborListValue([_this.extendedKey, _this.keyName, _this.chainCode, new A.CborBytesValue(t1), new A.CborBytesValue(t3), new A.CborBytesValue(t4), _this.comprossed], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$comprossed() {
      return this.comprossed;
    },
    get$chainCode() {
      return this.chainCode;
    }
  };
  A.PrivateKeyData.prototype = {
    toCbor$0() {
      var t3, t4, _this = this,
        t1 = _this.coin,
        t2 = t1.get$proposal().get$specName();
      t1 = t1.get$coinName();
      t3 = _this.wif;
      if (t3 == null)
        t3 = B.C_CborNullValue;
      t4 = _this.publicKey.toCbor$0();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180_7, type$.int), new A.CborListValue([t2, t1, _this.privateKey, _this.extendedKey, t3, _this.keyName, t4], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    toBipKey$0() {
      var _this = this,
        t1 = _this.extendedKey;
      if (t1 == null)
        return A.BlockchainUtils_privteKeyToBip32(_this.coin, _this.privateKey);
      return A.BlockchainUtils_extendedKeyToBip32Key(_this.coin, t1);
    },
    privateKeyBytes$0() {
      return A.BytesUtils_fromHexString(this.privateKey);
    },
    get$coin() {
      return this.coin;
    },
    get$keyName() {
      return this.keyName;
    },
    get$publicKey() {
      return this.publicKey;
    }
  };
  A.PublicKeyData.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.uncomprossed;
      if (t1 == null)
        t1 = B.C_CborNullValue;
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180_6, type$.int), new A.CborListValue([_this.extendedKey, _this.comprossed, t1, _this.keyName, _this.chainCode], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$comprossed() {
      return this.comprossed;
    },
    get$chainCode() {
      return this.chainCode;
    }
  };
  A.AccessMnemonicResponse.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([B.JSArray_methods.join$1(this.mnemonic._mnemonicList, " ")], type$.JSArray_String);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180_5, type$.int), new A.CborListValue(t1, true, type$.CborListValue_String), type$.CborTagValue_dynamic);
    }
  };
  A.ImportCustomKeys.prototype = {
    toCbor$0() {
      var t1 = this.coin;
      t1 = A._setArrayType([this.privateKey, this.publicKey, new A.CborStringValue(t1.get$proposal().get$specName() + "#" + t1.get$coinName())], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180_14, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A._ImportCustomKeys_Object_CborSerializable.prototype = {};
  A.EncryptedCustomKey.prototype = {
    get$variabels() {
      var _this = this;
      return [_this.publicKey, _this.id, _this.coin, _this.keyType._core$_name];
    },
    toCbor$0() {
      var t3, _this = this,
        t1 = _this.coin,
        t2 = t1.get$proposal().get$specName();
      t1 = t1.get$coinName();
      t3 = _this.name;
      if (t3 == null)
        t3 = B.C_CborNullValue;
      t3 = A._setArrayType([_this.publicKey, _this.id, t2, t1, new A.CborEpochIntValue(_this.created), t3, _this.keyType._core$_name], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180_3, type$.int), new A.CborListValue(t3, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A._EncryptedCustomKey_Object_Equatable.prototype = {};
  A._EncryptedCustomKey_Object_Equatable_CborSerializable.prototype = {};
  A.EncryptedMasterKey.prototype = {
    toCbor$0() {
      var t2, t3, t4, t5,
        t1 = this.masterKey;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t3 = this.customKeys;
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t5 = A._setArrayType([new A.CborStringValue(this.checksum), new A.CborBytesValue(A.List_List$unmodifiable(t1, t2)), new A.CborListValue(A.List_List$of(new A.MappedListIterable(t3, t4._eval$1("CborTagValue<@>(1)")._as(new A.EncryptedMasterKey_toCbor_closure()), t5), true, t5._eval$1("ListIterable.E")), true, type$.CborListValue_CborTagValue_dynamic)], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180_2, t2), new A.CborListValue(t5, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    }
  };
  A.EncryptedMasterKey_toCbor_closure.prototype = {
    call$1(e) {
      return type$.EncryptedCustomKey._as(e).toCbor$0();
    },
    $signature: 251
  };
  A._EncryptedMasterKey_Object_CborSerializable.prototype = {};
  A.ImportedKeyStorage.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.coin,
        t2 = t1.get$proposal().get$specName();
      t1 = t1.get$coinName();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180_0, type$.int), new A.CborListValue([_this.checksum, _this.extendedPrivateKey, _this.publicKey, t2, t1, new A.CborEpochIntValue(_this.created), _this.name, _this.keyType._core$_name], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      var _this = this;
      return [_this.checksum, _this.extendedPrivateKey, _this.coin.get$coinName(), _this.publicKey];
    },
    getKey$0() {
      var t1, t2, _this = this;
      if (_this.keyType === B.CustomKeyType_0) {
        t1 = _this.coin;
        t2 = t1.get$conf().get$type();
        return A.PrivateKeyData_PrivateKeyData(t1, A.IPrivateKey_IPrivateKey$fromBytes(A.BytesUtils_fromHexString(_this.extendedPrivateKey), t2), _this.checksum);
      }
      return A.PrivateKeyData_PrivateKeyData$fromExtendedKey(_this.coin, _this.extendedPrivateKey, _this.checksum);
    },
    _toBip32Key$1(key) {
      var t1, t2, moneroAccount, wifKey, t3, t4, moneroAccount0, _this = this, _null = null,
        currentCoin = key.get$currencyCoin();
      if (_this.keyType !== B.CustomKeyType_0) {
        if (currentCoin === B.Bip44Coins_moneroEd25519Slip)
          return A.MoneroPrivateKeyData_MoneroPrivateKeyData$fromBip32(A.BlockchainUtils_extendedKeyToBip32Key(currentCoin, _this.extendedPrivateKey), currentCoin, _this.checksum);
        return A.PrivateKeyData_PrivateKeyData$fromExtendedKey(currentCoin, _this.extendedPrivateKey, _this.checksum);
      }
      if (currentCoin === B.Bip44Coins_moneroEd25519Slip) {
        if (_this.coin !== B.Bip44Coins_moneroEd25519Slip)
          throw A.wrapException(B.WalletException_invalid_coin_null);
        t1 = _this.checksum;
        t2 = A.MoneroPrivateKey_MoneroPrivateKey$fromBytes(A.BytesUtils_fromHexString(_this.extendedPrivateKey)).privateKey.key;
        moneroAccount = A.MoneroAccount_MoneroAccount$_(B.MoneroCoins_moneroMainnet, t2, _null);
        wifKey = A.BlockchainUtils_toWif(currentCoin, t2);
        t3 = A.BytesUtils_toHexString(A.List_List$from(t2, true, type$.int), true, "");
        t4 = moneroAccount.privSkey;
        if (t4 == null)
          A.throwExpression(B.MoneroKeyError_e7r);
        t4.toString;
        moneroAccount0 = A.MoneroAccount_MoneroAccount$_(B.MoneroCoins_moneroMainnet, t2, _null);
        t2 = moneroAccount0.pubSkey;
        return new A.MoneroPrivateKeyData(currentCoin, t3, moneroAccount.privVkey, t4, _null, wifKey, t1, new A.MoneroPublicKeyData(_null, t2.toHex$0(), t2, moneroAccount0.pubVkey, moneroAccount0.privVkey, _null, t1));
      }
      t1 = currentCoin.get$conf().get$type();
      return A.PrivateKeyData_PrivateKeyData(currentCoin, A.IPrivateKey_IPrivateKey$fromBytes(A.BytesUtils_fromHexString(_this.extendedPrivateKey), t1), _this.checksum);
    }
  };
  A._ImportedKeyStorage_Object_CborSerializable.prototype = {};
  A._ImportedKeyStorage_Object_CborSerializable_Equatable.prototype = {};
  A.CustomKeyType.prototype = {
    _enumToString$0() {
      return "CustomKeyType." + this._core$_name;
    }
  };
  A.CustomKeyType_fromName_closure.prototype = {
    call$1(e) {
      return type$.CustomKeyType._as(e)._core$_name === this.name;
    },
    $signature: 252
  };
  A.CustomKeyType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.WalletException$("Invalid CustomKeyType."));
    },
    $signature: 1
  };
  A.WalletMasterKeys.prototype = {
    getSeed$1(type) {
      var _this = this;
      switch (type.index) {
        case 0:
          return _this.seed;
        case 1:
          return _this.entopySeed;
        case 3:
          return _this.cardanoIcarusSeed;
        default:
          return _this.cardanoLegacyByronSeed;
      }
    },
    removeKey$1(keyId) {
      var _this = this,
        t1 = _this.customKeys,
        t2 = A._arrayInstanceType(t1);
      return A.WalletMasterKeys$_(_this.cardanoIcarusSeed, _this.cardanoLegacyByronSeed, _this.checksum, A.List_List$unmodifiable(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.WalletMasterKeys_removeKey_closure(keyId)), t2._eval$1("WhereIterable<1>")), type$.ImportedKeyStorage), _this.entopySeed, _this.mnemonic, _this.seed);
    },
    toCbor$1$backup(backup) {
      var t2, t3, t4, _this = this,
        t1 = A._setArrayType([B.JSArray_methods.join$1(_this.mnemonic._mnemonicList, " ")], type$.JSArray_Object);
      if (backup)
        t1.push(B.C_CborNullValue);
      else {
        t2 = _this.seed;
        A.BytesUtils_validateListOfBytes(t2);
        t1.push(new A.CborBytesValue(A.List_List$unmodifiable(t2, type$.int)));
      }
      t2 = _this.customKeys;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t1.push(new A.CborListValue(A.List_List$of(new A.MappedListIterable(t2, t3._eval$1("CborTagValue<@>(1)")._as(new A.WalletMasterKeys_toCbor_closure()), t4), true, t4._eval$1("ListIterable.E")), true, type$.CborListValue_CborTagValue_dynamic));
      t1.push(B.C_CborNullValue);
      if (backup)
        B.JSArray_methods.addAll$1(t1, A._setArrayType([B.C_CborNullValue, B.C_CborNullValue], type$.JSArray_CborNullValue));
      else {
        t2 = _this.cardanoLegacyByronSeed;
        A.BytesUtils_validateListOfBytes(t2);
        t3 = type$.int;
        t2 = A.List_List$unmodifiable(t2, t3);
        t4 = _this.cardanoIcarusSeed;
        A.BytesUtils_validateListOfBytes(t4);
        B.JSArray_methods.addAll$1(t1, A._setArrayType([new A.CborBytesValue(t2), new A.CborBytesValue(A.List_List$unmodifiable(t4, t3))], type$.JSArray_CborBytesValue));
      }
      t2 = _this.checksum;
      A.BytesUtils_validateListOfBytes(t2);
      t3 = type$.int;
      t1.push(new A.CborBytesValue(A.List_List$unmodifiable(t2, t3)));
      if (backup)
        t1.push(B.C_CborNullValue);
      else {
        t2 = _this.entopySeed;
        A.BytesUtils_validateListOfBytes(t2);
        t1.push(new A.CborBytesValue(A.List_List$unmodifiable(t2, t3)));
      }
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_180, t3), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    toCbor$0() {
      return this.toCbor$1$backup(false);
    },
    getKeyById$1(keyId) {
      var t1, exception;
      try {
        t1 = B.JSArray_methods.firstWhere$1(this.customKeys, new A.WalletMasterKeys_getKeyById_closure(keyId));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    toKey$2$maxLevel(key, maxLevel) {
      var t1, customKey, seedBytes, bip32Key;
      if (key.get$derivationType() === B.AddressDerivationType_AW6)
        throw A.wrapException(B.WalletException_nmo);
      if (key.get$importedKeyId() != null) {
        t1 = key.get$importedKeyId();
        t1.toString;
        customKey = this.getKeyById$1(t1);
        if (customKey == null)
          throw A.wrapException(B.WalletException_WaB);
        return key.derive$2$maxLevel(customKey._toBip32Key$1(key), maxLevel);
      }
      seedBytes = this.getSeed$1(key.get$seedGeneration());
      bip32Key = A.CryptoPrivateKeyData_CryptoPrivateKeyData$fromSeed(key.get$currencyCoin(), key.get$name(), seedBytes);
      A.print("\x1b[33m" + ("currency " + key.get$currencyCoin().toString$0(0)) + "\x1b[0m");
      return key.derive$2$maxLevel(bip32Key, maxLevel);
    },
    readKeys$1(requestKeys) {
      var keys, t1, _i, i;
      type$.List_AccessCryptoPrivateKeyRequest._as(requestKeys);
      keys = A._setArrayType([], type$.JSArray_CryptoPrivateKeyData);
      for (t1 = requestKeys.length, _i = 0; _i < requestKeys.length; requestKeys.length === t1 || (0, A.throwConcurrentModificationError)(requestKeys), ++_i) {
        i = requestKeys[_i];
        B.JSArray_methods.add$1(keys, this.toKey$2$maxLevel(i.index, A.Bip44Levels_Bip44Levels$fromInt(i.maxLevel)));
      }
      return keys;
    },
    readPublicKeys$1(requestKeys) {
      var pubKeys, t1, t2, t3, _i, t4, byronLegacy, privateKey, bipKey, bipKey0, t5, hdPath, toHex, toHex0, t6, t7, toHex1;
      type$.List_AccessCryptoPrivateKeyRequest._as(requestKeys);
      pubKeys = A._setArrayType([], type$.JSArray_CryptoPublicKeyData);
      for (t1 = requestKeys.length, t2 = type$.int, t3 = type$.dynamic, _i = 0; _i < requestKeys.length; requestKeys.length === t1 || (0, A.throwConcurrentModificationError)(requestKeys), ++_i) {
        t4 = requestKeys[_i].index;
        byronLegacy = t4.get$currencyCoin().get$proposal() === B.C_CustomProposal;
        privateKey = this.toKey$2$maxLevel(t4, byronLegacy ? B.Bip44Levels_0_Master : B.Bip44Levels_5_Address);
        A.printString("\x1b[33m" + ("private key " + privateKey.get$coin().toString$0(0)) + "\x1b[0m");
        if (!byronLegacy) {
          B.JSArray_methods.add$1(pubKeys, privateKey.get$publicKey());
          continue;
        }
        bipKey = privateKey.toBipKey$0();
        if (t4.get$hdPath() != null) {
          t4 = t4.get$hdPath();
          t4.toString;
          bipKey0 = bipKey.derivePath$1(t4);
        } else
          bipKey0 = bipKey;
        t4 = privateKey.get$keyName();
        t5 = bipKey.__Bip32Base__pubKey_A;
        t5 === $ && A.throwLateFieldNI("_pubKey");
        t5 = A.List_List$of(B.JSArray_methods.sublist$1(t5.pubKey.get$compressed(), 1), true, t3);
        B.JSArray_methods.addAll$1(t5, A.List_List$from(bipKey.__Bip32Base__pubKey_A.keyData.chainCode._chainCode, true, t2));
        hdPath = A.QuickCrypto_pbkdf2DeriveKey(32, 500, A.List_List$from(t5, true, t2), A.StringUtils_encode("address-hashing", B.StringEncoding_1));
        t5 = bipKey0.__Bip32Base__pubKey_A;
        t5 === $ && A.throwLateFieldNI("_pubKey");
        toHex = B.C__Hex.encode$2$lowerCase(t5.pubKey.get$compressed(), true);
        toHex0 = B.C__Hex.encode$2$lowerCase(bipKey0.__Bip32Base__pubKey_A.pubKey.get$uncompressed(), true);
        t5 = bipKey0.__Bip32Base__pubKey_A;
        t6 = t5.pubKey.get$compressed();
        t7 = t5.keyNetVer.__Bip32KeyNetVersions__pubNetVer_F;
        t7 === $ && A.throwLateFieldNI("_pubNetVer");
        t7 = A._Bip32KeySerializer_serialize(t6, t5.keyData, A.List_List$from(t7, true, t2));
        t5 = toHex0 === toHex ? null : toHex0;
        toHex0 = B.C__Hex.encode$2$lowerCase(bipKey0.__Bip32Base__pubKey_A.keyData.chainCode._chainCode, true);
        toHex1 = B.C__Hex.encode$2$lowerCase(hdPath, true);
        B.JSArray_methods.add$1(pubKeys, new A.AdaLegacyPublicKeyData(t7, toHex, t5, toHex1, toHex0, t4));
        continue;
      }
      return pubKeys;
    },
    importCustomKey$1(newKey) {
      var key, t3, validateKey, _this = this, _null = null,
        t1 = newKey.extendedPrivateKey,
        t2 = newKey.coin;
      if (newKey.keyType === B.CustomKeyType_1) {
        if (!(t2.get$conf() instanceof A.BipCoinConfig))
          A.throwExpression(B.WalletException_invalid_coin_null);
        key = A.BlockchainUtils_extendedKeyToBip32Key(t2, t1);
        t1 = key.__Bip32Base__pubKey_A;
        t1 === $ && A.throwLateFieldNI("_pubKey");
        t1 = t1.pubKey.get$compressed();
        t1 = A.BlockchainUtils__createCustomKeyChecksum(A.List_List$from(key.__Bip32Base__pubKey_A.keyData.chainCode._chainCode, true, type$.int), t2, t1);
        t3 = key.__Bip32Base__privKey_A;
        t3 === $ && A.throwLateFieldNI("_privKey");
        if (t3 == null)
          A.throwExpression(B.Bip32KeyError_7qd);
        validateKey = A.ImportedKeyStorage$(t1, t2, _null, A.Bip32PrivateKeySerializer_serialize(t3.privKey, t3.keyData, t3.keyNetVer), B.CustomKeyType_1, _null, key.__Bip32Base__pubKey_A.toHex$0());
      } else {
        key = A.BlockchainUtils__validatePrivateKey(t2, A.BlockchainUtils__toSecretKeyBytes(A.BytesUtils_fromHexString(t1), t2.get$conf().get$type()));
        validateKey = A.ImportedKeyStorage$(A.BlockchainUtils__createCustomKeyChecksum(_null, t2, key.get$publicKey().get$compressed()), t2, _null, key.toHex$0(), B.CustomKeyType_0, _null, key.get$publicKey().toHex$0());
      }
      if (validateKey.publicKey !== newKey.publicKey)
        throw A.wrapException(B.WalletException_invalid_account_details_null);
      if (validateKey.checksum !== newKey.checksum)
        throw A.wrapException(B.WalletException_invalid_account_details_null);
      t1 = _this.customKeys;
      if (B.JSArray_methods.contains$1(t1, newKey) || B.JSArray_methods.any$1(t1, new A.WalletMasterKeys_importCustomKey_closure(newKey)))
        throw A.wrapException(B.WalletException_key_already_exists_null);
      t2 = A.List_List$of(type$.List_ImportedKeyStorage._as(A._setArrayType([newKey], type$.JSArray_ImportedKeyStorage)), true, type$.dynamic);
      B.JSArray_methods.addAll$1(t2, t1);
      return A.WalletMasterKeys$_(_this.cardanoIcarusSeed, _this.cardanoLegacyByronSeed, _this.checksum, A.List_List$unmodifiable(t2, type$.ImportedKeyStorage), _this.entopySeed, _this.mnemonic, _this.seed);
    }
  };
  A.WalletMasterKeys_removeKey_closure.prototype = {
    call$1(element) {
      return type$.ImportedKeyStorage._as(element).checksum !== this.keyId;
    },
    $signature: 56
  };
  A.WalletMasterKeys_WalletMasterKeys$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ImportedKeyStorage_ImportedKeyStorage$fromCborBytesOrObject(type$.nullable_CborObject._as(e));
    },
    $signature: 254
  };
  A.WalletMasterKeys_toCbor_closure.prototype = {
    call$1(e) {
      return type$.ImportedKeyStorage._as(e).toCbor$0();
    },
    $signature: 255
  };
  A.WalletMasterKeys_getKeyById_closure.prototype = {
    call$1(element) {
      return type$.ImportedKeyStorage._as(element).checksum === this.keyId;
    },
    $signature: 56
  };
  A.WalletMasterKeys_importCustomKey_closure.prototype = {
    call$1(e) {
      return type$.ImportedKeyStorage._as(e).checksum === this.newKey.checksum;
    },
    $signature: 56
  };
  A._WalletMasterKeys_Object_CborSerializable.prototype = {};
  A.SeedTypes.prototype = {
    _enumToString$0() {
      return "SeedTypes." + this._core$_name;
    }
  };
  A.SeedTypes_fromName_closure.prototype = {
    call$1(e) {
      return type$.SeedTypes._as(e).name === this.name;
    },
    $signature: 256
  };
  A.SeedTypes_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.WalletException$("Invalid seed generation type."));
    },
    $signature: 1
  };
  A.NetworkType.prototype = {};
  A.NetworkType_fromTag_closure.prototype = {
    call$1(e) {
      type$.NetworkType._as(e);
      return A.BytesUtils_bytesEqual(this._box_0.tag, e.tag);
    },
    $signature: 257
  };
  A.NetworkType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_incorrect_network_null);
    },
    $signature: 1
  };
  A.ArgsType.prototype = {
    _enumToString$0() {
      return "ArgsType." + this._core$_name;
    }
  };
  A.ArgsType_fromTag_closure.prototype = {
    call$1(e) {
      var t1;
      type$.ArgsType._as(e);
      t1 = B.JSArray_methods.sublist$2(this.tag, 0, 2);
      return A.BytesUtils_bytesEqual(e.tag, t1);
    },
    $signature: 258
  };
  A.ArgsType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 1
  };
  A.IsolateMessageArgs.prototype = {};
  A.CborMessageArgs.prototype = {};
  A.MessageArgsRequestable.prototype = {};
  A.WalletArgsRequestable.prototype = {};
  A.MessageArgsTwoBytes.prototype = {
    toCbor$0() {
      var t2, t3,
        t1 = this.keyOne;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = this.keyTwo;
      A.BytesUtils_validateListOfBytes(t3);
      t3 = A._setArrayType([new A.CborBytesValue(t1), new A.CborBytesValue(A.List_List$unmodifiable(t3, t2))], type$.JSArray_CborBytesValue);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_1_2, t2), new A.CborListValue(t3, true, type$.CborListValue_CborBytesValue), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.ArgsType_JU5;
    }
  };
  A.MessageArgsOneBytes.prototype = {
    toCbor$0() {
      var t2,
        t1 = this.keyOne;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A._setArrayType([new A.CborBytesValue(A.List_List$unmodifiable(t1, t2))], type$.JSArray_CborBytesValue);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_1_1, t2), new A.CborListValue(t1, true, type$.CborListValue_CborBytesValue), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.ArgsType_DZ5;
    }
  };
  A.MessageArgsStreamId.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.streamId], type$.JSArray_String);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_1_4, type$.int), new A.CborListValue(t1, true, type$.CborListValue_String), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.ArgsType_6D4;
    }
  };
  A.MessageArgsThreeBytes.prototype = {
    toCbor$0() {
      var t2, t3, t4,
        t1 = this.keyOne;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = this.keyTwo;
      A.BytesUtils_validateListOfBytes(t3);
      t3 = A.List_List$unmodifiable(t3, t2);
      t4 = this.keyThree;
      A.BytesUtils_validateListOfBytes(t4);
      t4 = A._setArrayType([new A.CborBytesValue(t1), new A.CborBytesValue(t3), new A.CborBytesValue(A.List_List$unmodifiable(t4, t2))], type$.JSArray_CborBytesValue);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_1_3, t2), new A.CborListValue(t4, true, type$.CborListValue_CborBytesValue), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.ArgsType_ouf;
    }
  };
  A.MessageArgsStreamMethod.prototype = {
    _enumToString$0() {
      return "MessageArgsStreamMethod." + this._core$_name;
    },
    get$value() {
      return this.value;
    }
  };
  A.MessageArgsStreamMethod_fromValue_closure.prototype = {
    call$1(e) {
      return type$.MessageArgsStreamMethod._as(e).value === this.value;
    },
    $signature: 259
  };
  A.MessageArgsStreamMethod_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 1
  };
  A.MessageArgsStream.prototype = {
    toCbor$0() {
      var t1 = this.data;
      if (t1 == null)
        t1 = null;
      else {
        A.BytesUtils_validateListOfBytes(t1);
        t1 = new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
      }
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_1_5, type$.int), new A.CborListValue([t1, this.streamId, this.method.value], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.ArgsType_Ik7;
    }
  };
  A.MessageArgsException.prototype = {
    toCbor$0() {
      var t2,
        t1 = A.StringUtils_encode(this.message, B.StringEncoding_1);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A._setArrayType([new A.CborBytesValue(A.List_List$unmodifiable(t1, t2))], type$.JSArray_CborBytesValue);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_0_0, t2), new A.CborListValue(t1, true, type$.CborListValue_CborBytesValue), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.ArgsType_2No;
    },
    toString$0(_) {
      return "MessageArgsException:" + this.message;
    }
  };
  A.MessageArgsMessage.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.message], type$.JSArray_nullable_String);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_0_1, type$.int), new A.CborListValue(t1, true, type$.CborListValue_nullable_String), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.ArgsType_qUV;
    },
    toString$0(_) {
      return "MessageArgsMessage:" + A.S(this.message);
    }
  };
  A.ArgsCompleter.prototype = {};
  A.CborArgsCompleter.prototype = {};
  A.EncodableArgsCompleter.prototype = {};
  A.StreamArgsCompleter.prototype = {$isIsolateMessageArgs: 1, $isCborMessageArgs: 1};
  A.CryptoArgsCompleter.prototype = {$isIsolateMessageArgs: 1, $isCborMessageArgs: 1};
  A.NoneEncryptedArgsCompleter.prototype = {$isIsolateMessageArgs: 1, $isCborMessageArgs: 1};
  A.WalletArgsCompleter.prototype = {};
  A.WalletArgs.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.args.toCbor$0(), _this.version, _this.walletData, _this.nonce, _this.key], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_3_0, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.ArgsType_pCr;
    }
  };
  A._CborArgsCompleter_ArgsCompleter_CborSerializable.prototype = {};
  A._CborMessageArgs_IsolateMessageArgs_CborSerializable.prototype = {};
  A.CryptoRequestMethod.prototype = {
    _enumToString$0() {
      return "CryptoRequestMethod." + this._core$_name;
    },
    get$tag() {
      var t1 = A.List_List$of(B.List_2_0, true, type$.int);
      B.JSArray_methods.addAll$1(t1, this._tag);
      return t1;
    }
  };
  A.CryptoRequestMethod_fromTag_closure.prototype = {
    call$1(e) {
      var t1;
      type$.CryptoRequestMethod._as(e);
      t1 = B.JSArray_methods.sublist$1(this.tag, 2);
      return A.BytesUtils_bytesEqual(e._tag, t1);
    },
    $signature: 260
  };
  A.CryptoRequestMethod_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_request_null);
    },
    $signature: 1
  };
  A.NoneEncryptedCryptoRequestMethod.prototype = {
    _enumToString$0() {
      return "NoneEncryptedCryptoRequestMethod." + this._core$_name;
    },
    get$tag() {
      var t1 = A.List_List$of(B.List_2_1, true, type$.int);
      B.JSArray_methods.addAll$1(t1, this._tag);
      return t1;
    }
  };
  A.NoneEncryptedCryptoRequestMethod_fromTag_closure.prototype = {
    call$1(e) {
      var t1;
      type$.NoneEncryptedCryptoRequestMethod._as(e);
      t1 = B.JSArray_methods.sublist$1(this.tag, 2);
      return A.BytesUtils_bytesEqual(e._tag, t1);
    },
    $signature: 261
  };
  A.NoneEncryptedCryptoRequestMethod_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_request_null);
    },
    $signature: 1
  };
  A.StreamIsolateMethod.prototype = {
    _enumToString$0() {
      return "StreamIsolateMethod." + this._core$_name;
    },
    get$tag() {
      var t1 = A.List_List$of(B.List_2_3, true, type$.int);
      B.JSArray_methods.addAll$1(t1, this._tag);
      return t1;
    }
  };
  A.StreamIsolateMethod_fromTag_closure.prototype = {
    call$1(e) {
      var t1;
      type$.StreamIsolateMethod._as(e);
      t1 = B.JSArray_methods.sublist$1(this.tag, 2);
      return A.BytesUtils_bytesEqual(e._tag, t1);
    },
    $signature: 262
  };
  A.StreamIsolateMethod_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_request_null);
    },
    $signature: 1
  };
  A.WalletRequestMethod.prototype = {
    _enumToString$0() {
      return "WalletRequestMethod." + this._core$_name;
    }
  };
  A.WalletRequestMethod_fromTag_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_bytesEqual(type$.WalletRequestMethod._as(e).tag, this.tag);
    },
    $signature: 263
  };
  A.WalletRequestMethod_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_request_null);
    },
    $signature: 1
  };
  A.CryptoRequest.prototype = {
    get$type() {
      return B.ArgsType_8FR;
    }
  };
  A.WalletRequest.prototype = {};
  A.NoneEncryptedCryptoRequest.prototype = {
    get$type() {
      return B.ArgsType_UFf;
    }
  };
  A.IsolateStreamRequest.prototype = {
    get$type() {
      return B.ArgsType_AVa;
    },
    getIsolateResult$2$encryptedPart$streamId(encryptedPart, streamId) {
      var t1, t2, t3;
      type$.nullable_List_int._as(encryptedPart);
      t1 = this._streamController;
      if (t1 == null)
        throw A.wrapException(A.WalletException$("stream_closed_desc"));
      t2 = A._instanceType(t1)._eval$1("_ControllerStream<1>");
      t3 = t2._eval$1("StreamTransformer<Stream.T,MessageArgsStream>")._as(A._StreamHandlerTransformer$(new A.IsolateStreamRequest_getIsolateResult_closure(this, streamId, encryptedPart), A._instanceType(this)._eval$1("IsolateStreamRequest.S"), type$.MessageArgsStream));
      return t3.super$_StreamSinkTransformer$bind(t3.$ti._eval$1("Stream<1>")._as(new A._ControllerStream(t1, t2)));
    },
    close$0() {
      var t1, _this = this;
      if (_this._closed)
        return;
      _this._closed = true;
      t1 = _this._streamController;
      if (t1 != null)
        t1.close$0();
      _this.set$_streamController(null);
      A.print("\x1b[33mclosed!\x1b[0m");
    },
    add$1(_, args) {
      switch (args.method.index) {
        case 1:
        case 2:
          this.close$0();
          break;
      }
    },
    set$_streamController(_streamController) {
      this._streamController = A._instanceType(this)._eval$1("StreamController<IsolateStreamRequest.S>?")._as(_streamController);
    }
  };
  A.IsolateStreamRequest_getIsolateResult_closure.prototype = {
    call$2(data, sink) {
      var t1 = this.$this;
      return t1.handleIsolateData$4$encryptedPart$param$sink$streamId(this.encryptedPart, A._instanceType(t1)._eval$1("IsolateStreamRequest.S")._as(data), type$.EventSink_MessageArgsStream._as(sink), this.streamId);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(IsolateStreamRequest.S,EventSink<MessageArgsStream>)");
    }
  };
  A.CryptoRequestEncryptChacha.prototype = {
    getResult$0() {
      var encrypt, t1, t2, _this = this,
        nonce = _this.nonce,
        chacha = A.ChaCha20Poly1305$(_this.key);
      if (nonce == null)
        nonce = $.$get$QuickCrypto__generateRandom().call$1(_this.nonceLength);
      encrypt = chacha.encrypt$2(nonce, _this.message);
      A.BytesUtils_validateListOfBytes(encrypt);
      t1 = type$.int;
      t2 = A.List_List$unmodifiable(encrypt, t1);
      A.BytesUtils_validateListOfBytes(nonce);
      return new A.MessageArgsTwoBytes(t2, A.List_List$unmodifiable(nonce, t1));
    },
    toCbor$0() {
      var t2, t3, t4, _this = this,
        t1 = _this.message;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = _this.key;
      A.BytesUtils_validateListOfBytes(t3);
      t3 = A.List_List$unmodifiable(t3, t2);
      t4 = _this.nonce;
      if (t4 == null)
        t4 = B.C_CborNullValue;
      else {
        A.BytesUtils_validateListOfBytes(t4);
        t4 = new A.CborBytesValue(A.List_List$unmodifiable(t4, t2));
      }
      t4 = A._setArrayType([new A.CborBytesValue(t1), new A.CborBytesValue(t3), t4, _this.nonceLength], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_bMN.get$tag(), t2), new A.CborListValue(t4, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.CryptoRequestDecryptChacha.prototype = {
    getResult$0() {
      var decrypted = A.ChaCha20Poly1305$(this.key).decrypt$2(this.nonce, this.message);
      if (decrypted == null)
        A.throwExpression(B.WalletException_decryption_failed_null);
      A.BytesUtils_validateListOfBytes(decrypted);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(decrypted, type$.int));
    },
    toCbor$0() {
      var t2, t3, t4,
        t1 = this.message;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = this.key;
      A.BytesUtils_validateListOfBytes(t3);
      t3 = A.List_List$unmodifiable(t3, t2);
      t4 = this.nonce;
      A.BytesUtils_validateListOfBytes(t4);
      t4 = A._setArrayType([new A.CborBytesValue(t1), new A.CborBytesValue(t3), new A.CborBytesValue(A.List_List$unmodifiable(t4, t2))], type$.JSArray_CborBytesValue);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_qJs.get$tag(), t2), new A.CborListValue(t4, true, type$.CborListValue_CborBytesValue), type$.CborTagValue_dynamic);
    }
  };
  A.CryptoRequestCreateMasterKey.prototype = {
    getResult$0() {
      var t1 = A.CryptoRequestCreateMasterKey_getMasterKey(this.mnemonic, this.passphrase).toCbor$0().encode$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    },
    toCbor$0() {
      var t1 = A._setArrayType([this.mnemonic, this.passphrase], type$.JSArray_nullable_String);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_8YS.get$tag(), type$.int), new A.CborListValue(t1, true, type$.CborListValue_nullable_String), type$.CborTagValue_dynamic);
    }
  };
  A.CryptoRequestCreateHDWallet.prototype = {
    getResult$0() {
      var t4, _this = this,
        t1 = _this.checksum,
        masterKey = A.CryptoRequestCreateMasterKey_getMasterKey(_this.mnemonic, _this.passphrase),
        encrypt = A.CryptoRequestGenerateMasterKey_encryptedMasterKey(A.WorkerCryptoUtils_hashKey(t1, A.StringUtils_encode(_this.password, B.StringEncoding_1)), masterKey),
        t2 = encrypt._1,
        t3 = encrypt._0.toCbor$0().encode$0();
      A.BytesUtils_validateListOfBytes(t3);
      t4 = type$.int;
      t3 = A.List_List$unmodifiable(t3, t4);
      A.BytesUtils_validateListOfBytes(t2);
      t2 = A.List_List$unmodifiable(t2, t4);
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsThreeBytes(t3, t2, A.List_List$unmodifiable(t1, t4));
    },
    toCbor$0() {
      var t2, _this = this,
        t1 = _this.checksum;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_Giz.get$tag(), t2), new A.CborListValue([_this.mnemonic, _this.passphrase, _this.password, new A.CborBytesValue(t1)], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.CryptoRequestDecodeBackup.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.password, this.backup, this.encoding._core$_name], type$.JSArray_String);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_CpJ.get$tag(), type$.int), new A.CborListValue(t1, true, type$.CborListValue_String), type$.CborTagValue_dynamic);
    },
    getResult$0() {
      var t1 = A.Web3SecretStorageDefinationV3_Web3SecretStorageDefinationV3$decode(this.backup, this.password, this.encoding).data;
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    }
  };
  A.CryptoRequestDecodeBackup_CryptoRequestDecodeBackup$deserialize_closure.prototype = {
    call$1(element) {
      return type$.SecretWalletEncoding._as(element)._core$_name === A.ExtractCborList_elementAt(this.values, 2, type$.String);
    },
    $signature: 106
  };
  A.CryptoRequestDecodeBackup_CryptoRequestDecodeBackup$deserialize_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 1
  };
  A.CryptoRequestEncodeBackup.prototype = {
    toCbor$0() {
      var t2,
        t1 = this.backup;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A._setArrayType([this.password, new A.CborBytesValue(A.List_List$unmodifiable(t1, t2)), this.encoding._core$_name], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_7jk.get$tag(), t2), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    getResult$0() {
      var t1 = A.StringUtils_encode(A.Web3SecretStorageDefinationV3_Web3SecretStorageDefinationV3$encode(this.backup, this.password).encrypt$1$encoding(this.encoding), B.StringEncoding_1);
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    }
  };
  A.CryptoRequestEncodeBackup_CryptoRequestEncodeBackup$deserialize_closure.prototype = {
    call$1(element) {
      return type$.SecretWalletEncoding._as(element)._core$_name === A.ExtractCborList_elementAt(this.values, 2, type$.String);
    },
    $signature: 106
  };
  A.CryptoRequestEncodeBackup_CryptoRequestEncodeBackup$deserialize_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 1
  };
  A.CryptoRequestGenerateMasterKey.prototype = {
    getResult$0() {
      var t1, t2, decrypt, masterKey, data, t3, _this = this,
        walletKey = _this.key;
      if (walletKey == null) {
        t1 = _this.keyString;
        t1.toString;
        t2 = _this.keyChecksum;
        t2.toString;
        walletKey = A.WorkerCryptoUtils_hashKey(t2, t1);
      }
      t1 = _this.newKey;
      decrypt = A.WorkerCryptoUtils_decryptChacha(_this.walletData, walletKey, A.WorkerCryptoUtils_generateNonce(walletKey));
      if (decrypt == null)
        A.throwExpression(B.WalletException_incorrect_password_null);
      masterKey = A.WalletMasterKeys_WalletMasterKeys$fromCborBytesOrObject(decrypt, null);
      data = A.CryptoRequestGenerateMasterKey_encryptedMasterKey(t1 == null ? walletKey : t1, masterKey);
      t1 = data._0.toCbor$0().encode$0();
      t2 = data._1;
      A.BytesUtils_validateListOfBytes(t1);
      t3 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t3);
      A.BytesUtils_validateListOfBytes(t2);
      t2 = A.List_List$unmodifiable(t2, t3);
      A.BytesUtils_validateListOfBytes(walletKey);
      return new A.MessageArgsThreeBytes(t1, t2, A.List_List$unmodifiable(walletKey, t3));
    },
    toCbor$0() {
      var t2, t3, t4, t5, t6, _this = this,
        t1 = _this.walletData;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = _this.key;
      if (t3 == null)
        t3 = B.C_CborNullValue;
      else {
        A.BytesUtils_validateListOfBytes(t3);
        t3 = new A.CborBytesValue(A.List_List$unmodifiable(t3, t2));
      }
      t4 = _this.newKey;
      if (t4 == null)
        t4 = B.C_CborNullValue;
      else {
        A.BytesUtils_validateListOfBytes(t4);
        t4 = new A.CborBytesValue(A.List_List$unmodifiable(t4, t2));
      }
      t5 = _this.keyString;
      if (t5 == null)
        t5 = B.C_CborNullValue;
      else {
        A.BytesUtils_validateListOfBytes(t5);
        t5 = new A.CborBytesValue(A.List_List$unmodifiable(t5, t2));
      }
      t6 = _this.keyChecksum;
      if (t6 == null)
        t6 = B.C_CborNullValue;
      else {
        A.BytesUtils_validateListOfBytes(t6);
        t6 = new A.CborBytesValue(A.List_List$unmodifiable(t6, t2));
      }
      t6 = A._setArrayType([_this.version, new A.CborBytesValue(t1), t3, t4, t5, t6], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_VKi.get$tag(), t2), new A.CborListValue(t6, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.CryptoRequestGenerateMasterKey_encryptedMasterKey_closure.prototype = {
    call$1(e) {
      type$.ImportedKeyStorage._as(e);
      return new A.EncryptedCustomKey(e.publicKey, e.checksum, e.coin, e.created, e.name, e.keyType);
    },
    $signature: 265
  };
  A.CryptoRequestGenerateBip39Mnemonic.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.language.get$name(), this.wordNums.value], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_kiE.get$tag(), type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    getResult$0() {
      var t1 = new A.Bip39MnemonicEncoder(new A.Bip39WordsListGetter().getByLanguage$1(this.language)),
        entropyBitLen = new A.Bip39MnemonicGenerator(t1)._entropyBitLenFromWordsNum$1(this.wordNums.value);
      t1 = A.StringUtils_encode(B.JSArray_methods.join$1(t1.encode$1(type$.List_int._as($.$get$QuickCrypto__generateRandom().call$1(entropyBitLen.value / 8 | 0)))._mnemonicList, " "), B.StringEncoding_1);
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    }
  };
  A.CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure.prototype = {
    call$1(e) {
      return type$.Bip39Languages._as(e).get$name() === A.ExtractCborList_elementAt(this.values, 0, type$.nullable_String);
    },
    $signature: 266
  };
  A.CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 1
  };
  A.CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure1.prototype = {
    call$1(e) {
      return type$.Bip39WordsNum._as(e).value === A.ExtractCborList_elementAt(this.values, 1, type$.nullable_int);
    },
    $signature: 121
  };
  A.CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure2.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 1
  };
  A.MoneroMnemonicToPrivateKeyMessage.prototype = {
    toCbor$0() {
      var t1 = this.coin;
      t1 = A._setArrayType([this.mnemonic, new A.CborStringValue(t1.get$proposal().get$specName() + "#" + t1.get$coinName())], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_CnH.get$tag(), type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    getResult$0() {
      var t2, t3,
        t1 = this.mnemonic;
      if (!new A.MoneroMnemonicValidator(A.MoneroMnemonicDecoder$(null)).isValid$1(t1))
        A.throwExpression(B.WalletException_invalid_mnemonic_null);
      t1 = A.Mnemonic__normalize(t1);
      t2 = type$.int;
      t1 = A.MoneroAccount_MoneroAccount$fromSeed(A.List_List$from(A.MoneroMnemonicDecoder$(null).decode$1(B.JSArray_methods.join$1(t1, " ")), true, t2)).privSkey;
      if (t1 == null)
        A.throwExpression(B.MoneroKeyError_e7r);
      t1 = t1.privateKey;
      t3 = A.BytesUtils_toHexString(A.List_List$from(t1.key, true, t2), true, "");
      t1 = new A.ImportCustomKeys(t3, new A.MoneroPublicKey(t1.publicKey).toHex$0(), this.coin).toCbor$0().encode$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, t2));
    }
  };
  A.MoneroMenmonicGenerateMessage.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.wordsNum.value, this.language.name], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_5cD.get$tag(), type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    getResult$0() {
      var t5, r, t6, words, checksumWord, mnemonic,
        t1 = this.language,
        t2 = new A.MoneroWordsListGetter().getByLanguage$1(t1),
        t3 = new A.MoneroWordsListGetter().getByLanguage$1(t1),
        t4 = this.wordsNum;
      if (!B.JSArray_methods.contains$1(B.List_iYm, t4))
        A.throwExpression(A.ArgumentException$("Words number for mnemonic (" + t4.toString$0(0) + ") is not valid", null));
      t5 = $.$get$MoneroMnemonicGeneratorConst_wordsNumToEntropyLen().$index(0, t4);
      t5.toString;
      if (!B.JSArray_methods.contains$1($.MoneroEntropyGeneratorConst_entropyBitLen, t5))
        A.throwExpression(A.ArgumentException$("Entropy bit length is not valid (" + t5 + ")", null));
      r = $.$get$QuickCrypto__generateRandom().call$1(t5 / 8 | 0);
      t4 = t4 === B.MoneroWordsNum_13 || t4 === B.MoneroWordsNum_25;
      t5 = type$.List_int;
      t6 = type$.String;
      if (t4) {
        words = new A.MoneroMnemonicWithChecksumEncoder(t1, t3)._encodeToList$1(t5._as(r));
        checksumWord = A.MoneroMnemonicUtils_computeChecksum(words, t1);
        t1 = A.List_List$of(words, true, t6);
        t1.push(checksumWord);
        mnemonic = new A.Mnemonic(A.List_List$unmodifiable(t1, t6));
      } else
        mnemonic = new A.Mnemonic(A.List_List$unmodifiable(new A.MoneroMnemonicNoChecksumEncoder(t1, t2)._encodeToList$1(t5._as(r)), t6));
      t1 = A.StringUtils_encode(B.JSArray_methods.join$1(mnemonic._mnemonicList, " "), B.StringEncoding_1);
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    }
  };
  A.CryptoRequestHashingType.prototype = {
    _enumToString$0() {
      return "CryptoRequestHashingType." + this._core$_name;
    }
  };
  A.CryptoRequestHashingType_fromName_closure.prototype = {
    call$1(e) {
      return type$.CryptoRequestHashingType._as(e)._core$_name === this.name;
    },
    $signature: 267
  };
  A.CryptoRequestHashingType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 1
  };
  A.CryptoRequestHashing.prototype = {
    toCbor$0() {
      var t1 = this.dataBytes;
      if (t1 == null)
        t1 = null;
      else {
        A.BytesUtils_validateListOfBytes(t1);
        t1 = new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
      }
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_c4E.get$tag(), type$.int), new A.CborListValue([this.hashingType._core$_name, t1, this.dataHex], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    getResult$0() {
      var t1 = A.CryptoRequestHashing_generateHash(this.dataBytes, this.dataHex, this.hashingType);
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    }
  };
  A.CryptoRequestRandomGenerator.prototype = {
    toCbor$0() {
      var t1 = this.existsKeys,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborBytesValue>");
      t3 = A._setArrayType([this.length, new A.CborListValue(A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("CborBytesValue(1)")._as(new A.CryptoRequestRandomGenerator_toCbor_closure()), t3), true, t3._eval$1("ListIterable.E")), true, type$.CborListValue_CborBytesValue)], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_EGJ.get$tag(), type$.int), new A.CborListValue(t3, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    getResult$0() {
      var t1 = A.CryptoRequestRandomGenerator_generateRandm(this.existsKeys, this.length);
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.CryptoRequestRandomGenerator_CryptoRequestRandomGenerator$deserialize_closure.prototype = {
    call$1(e) {
      return type$.CborBytesValue._as(e).value;
    },
    $signature: 69
  };
  A.CryptoRequestRandomGenerator_toCbor_closure.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return new A.CborBytesValue(A.List_List$unmodifiable(e, type$.int));
    },
    $signature: 268
  };
  A.CryptoRequestReadMasterKey.prototype = {
    getResult$0() {
      var t1 = A.CryptoRequestReadMasterKey_getWalletMasterKeys(this.key, this.nonce, this.walletData).toCbor$0().encode$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    },
    toCbor$0() {
      var t2, t3, t4, _this = this,
        t1 = _this.nonce;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = _this.walletData;
      A.BytesUtils_validateListOfBytes(t3);
      t3 = A.List_List$unmodifiable(t3, t2);
      t4 = _this.key;
      A.BytesUtils_validateListOfBytes(t4);
      t4 = A._setArrayType([_this.version, new A.CborBytesValue(t1), new A.CborBytesValue(t3), new A.CborBytesValue(A.List_List$unmodifiable(t4, t2))], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_3jH.get$tag(), t2), new A.CborListValue(t4, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.CryptoRequestSetupMasterKey.prototype = {
    toCbor$0() {
      var t3,
        t1 = this.masterKey.toCbor$0(),
        t2 = this.key;
      A.BytesUtils_validateListOfBytes(t2);
      t3 = type$.int;
      t2 = A._setArrayType([t1, new A.CborBytesValue(A.List_List$unmodifiable(t2, t3))], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_Ucj.get$tag(), t3), new A.CborListValue(t2, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    },
    getResult$0() {
      var t4,
        t1 = this.key,
        encrypt = A.CryptoRequestGenerateMasterKey_encryptedMasterKey(t1, this.masterKey),
        t2 = encrypt._0.toCbor$0().encode$0(),
        t3 = encrypt._1;
      A.BytesUtils_validateListOfBytes(t2);
      t4 = type$.int;
      t2 = A.List_List$unmodifiable(t2, t4);
      A.BytesUtils_validateListOfBytes(t3);
      t3 = A.List_List$unmodifiable(t3, t4);
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsThreeBytes(t2, t3, A.List_List$unmodifiable(t1, t4));
    }
  };
  A.TonMnemonicToPrivateKeyMessage.prototype = {
    toCbor$0() {
      var t2, _this = this,
        t1 = _this.password;
      if (t1 == null)
        t1 = B.C_CborNullValue;
      t2 = _this.coin;
      t2 = A._setArrayType([_this.mnemonic, t1, _this.validateTonMnemonic, new A.CborStringValue(t2.get$proposal().get$specName() + "#" + t2.get$coinName())], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_ifx.get$tag(), type$.int), new A.CborListValue(t2, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    getResult$0() {
      var _this = this,
        t1 = A.TonUtils_generateTonPrivateKeyFromSeed(_this.mnemonic, _this.password, _this.validateTonMnemonic)._private_key2$_privateKey._ed25519_keys$_privateKey,
        t2 = type$.int;
      t1 = new A.ImportCustomKeys(A.BytesUtils_toHexString(A.List_List$from(t1.key, true, t2), true, ""), A.BytesUtils_toHexString(B.JSArray_methods.sublist$1(A.TonPublicKey_TonPublicKey$fromBytes(new A.Ed25519PublicKey(t1.publicKey).get$compressed())._publickKey.get$compressed(), 1), true, null), _this.coin).toCbor$0().encode$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, t2));
    }
  };
  A.TonMenmonicGenerateMessage.prototype = {
    toCbor$0() {
      var t1 = this.password;
      if (t1 == null)
        t1 = B.C_CborNullValue;
      t1 = A._setArrayType([t1, this.wordsNum], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_6pl.get$tag(), type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    getResult$0() {
      var t1 = A.StringUtils_encode(A.TonUtils_generateTonMnemonic(this.password, this.wordsNum), B.StringEncoding_1);
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    }
  };
  A.CryptoRequestWalletKey.prototype = {
    toCbor$0() {
      var t2, t3,
        t1 = this.key;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = this.checksum;
      A.BytesUtils_validateListOfBytes(t3);
      t3 = A._setArrayType([new A.CborBytesValue(t1), new A.CborBytesValue(A.List_List$unmodifiable(t3, t2))], type$.JSArray_CborBytesValue);
      return new A.CborTagValue(A.List_List$unmodifiable(B.CryptoRequestMethod_YE0.get$tag(), t2), new A.CborListValue(t3, true, type$.CborListValue_CborBytesValue), type$.CborTagValue_dynamic);
    },
    getResult$0() {
      var walletKey = A.WorkerCryptoUtils_hashKey(this.checksum, this.key);
      A.BytesUtils_validateListOfBytes(walletKey);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(walletKey, type$.int));
    }
  };
  A.CryptoDeriveAddressResponse.prototype = {};
  A.WorkerMessageType.prototype = {
    _enumToString$0() {
      return "WorkerMessageType." + this._core$_name;
    }
  };
  A.WorkerMessageType_fromTag_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_bytesEqual(type$.WorkerMessageType._as(e).tag, this.tag);
    },
    $signature: 269
  };
  A.WorkerMessageType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 1
  };
  A.WorkerMessage.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type._core$_name, "id", _this.id, "totalPart", _this.totalPart, "currentPart", _this.currentPart], type$.String, type$.dynamic);
    }
  };
  A.WorkerNoneEncryptedMessage.prototype = {
    toCbor$0() {
      var t2,
        t1 = this.message;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A._setArrayType([new A.CborBytesValue(A.List_List$unmodifiable(t1, t2)), new A.CborIntValue(this.id)], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(this.type.tag, t2), new A.CborListValue(t1, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    },
    toJson$0() {
      var t1 = A.LinkedHashMap_LinkedHashMap$of(this.super$WorkerMessage$toJson(), type$.String, type$.dynamic);
      t1.$indexSet(0, "message", A.BytesUtils_toHexString(this.message, true, null));
      return t1;
    },
    serialize$0() {
      return this.toCbor$0().encode$0();
    },
    get$message() {
      return this.message;
    }
  };
  A.WorkerEncryptedMessage.prototype = {
    toJson$0() {
      var t1 = A.LinkedHashMap_LinkedHashMap$of(this.super$WorkerMessage$toJson(), type$.String, type$.dynamic);
      t1.$indexSet(0, "nonce", A.BytesUtils_toHexString(this.nonce, true, null));
      t1.$indexSet(0, "message", A.BytesUtils_toHexString(this.message, true, null));
      return t1;
    },
    toCbor$0() {
      var t2, t3, _this = this,
        t1 = _this.nonce;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = _this.message;
      A.BytesUtils_validateListOfBytes(t3);
      t3 = A._setArrayType([new A.CborBytesValue(t1), new A.CborBytesValue(A.List_List$unmodifiable(t3, t2)), new A.CborIntValue(_this.id)], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.type.tag, t2), new A.CborListValue(t3, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    },
    serialize$0() {
      return this.toCbor$0().encode$0();
    },
    get$message() {
      return this.message;
    }
  };
  A._WorkerEncryptedMessage_WorkerMessage_CborSerializable.prototype = {};
  A._WorkerNoneEncryptedMessage_WorkerMessage_CborSerializable.prototype = {};
  A.WorkeBaserRequestMessage.prototype = {};
  A.WorkerCborRequestMessage.prototype = {};
  A.WorkerCborRequestMessage_WorkerCborRequestMessage$deserialize_closure.prototype = {
    call$1(e) {
      return A.WorkerEncryptedMessage_WorkerEncryptedMessage$deserialize(type$.CborObject._as(e));
    },
    $signature: 270
  };
  A._WorkeBaserRequestMessage_Object_CborSerializable.prototype = {};
  A.IsolateCborResponseMessage.prototype = {
    toCbor$0() {
      var t2,
        t1 = this.args.toCbor$0().encode$0();
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A._setArrayType([new A.CborIntValue(this.id), new A.CborBytesValue(A.List_List$unmodifiable(t1, t2))], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_2_24_4_26, t2), new A.CborListValue(t1, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    },
    $isIsolateResponseMessage: 1
  };
  A._IsolateCborResponseMessage_Object_CborSerializable.prototype = {};
  A.SignRequest.prototype = {
    cast$1$0(_, $T) {
      A.checkTypeBound($T, type$.SignRequest, "T", "cast");
      if (!$T._is(this))
        throw A.wrapException(B.WalletException_data_verification_failed_null);
      return $T._as(this);
    }
  };
  A.SigningRequestNetwork.prototype = {
    _enumToString$0() {
      return "SigningRequestNetwork." + this._core$_name;
    }
  };
  A.SigningRequestNetwork_fromTag_closure.prototype = {
    call$1(element) {
      return A.BytesUtils_bytesEqual(this.tag, type$.SigningRequestNetwork._as(element).tag);
    },
    $signature: 271
  };
  A.SigningRequestNetwork_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 1
  };
  A.BitcoinSigning.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.index.toCbor$0(), _this.digest, _this.sighash, _this.useTaproot], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.network.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.GlobalSignRequest.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.index.toCbor$0(), this.digest], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(this.network.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.CosmosSigningRequest.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.index.toCbor$0(), _this.digest, _this.alg._core$_name], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.network.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.MoneroSigningRequest.prototype = {
    getAccountsIndexes$0() {
      var t1 = this.utxos,
        t2 = A._arrayInstanceType(t1);
      t2 = new A.MappedListIterable(t1, t2._eval$1("MoneroAccountIndex(1)")._as(new A.MoneroSigningRequest_getAccountsIndexes_closure()), t2._eval$1("MappedListIterable<1,MoneroAccountIndex>")).toSet$0(0);
      return A.List_List$of(t2, true, A._instanceType(t2)._precomputed1);
    },
    toCbor$0() {
      var t5, t6, t7, _this = this,
        t1 = _this.index.toCbor$0(),
        t2 = _this.destinations,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,CborBytesValue>");
      t4 = A.List_List$of(new A.MappedListIterable(t2, t3._eval$1("CborBytesValue(1)")._as(new A.MoneroSigningRequest_toCbor_closure()), t4), true, t4._eval$1("ListIterable.E"));
      t3 = type$.CborListValue_CborBytesValue;
      t2 = _this.change;
      if (t2 == null)
        t2 = B.C_CborNullValue;
      else {
        t2 = t2.serialize$0();
        A.BytesUtils_validateListOfBytes(t2);
        t2 = new A.CborBytesValue(A.List_List$unmodifiable(t2, type$.int));
      }
      t5 = _this.utxos;
      t6 = A._arrayInstanceType(t5);
      t7 = t6._eval$1("MappedListIterable<1,CborBytesValue>");
      t3 = A._setArrayType([t1, new A.CborListValue(t4, true, t3), _this.fee, t2, new A.CborListValue(A.List_List$of(new A.MappedListIterable(t5, t6._eval$1("CborBytesValue(1)")._as(new A.MoneroSigningRequest_toCbor_closure0()), t7), true, t7._eval$1("ListIterable.E")), true, t3)], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.network.tag, type$.int), new A.CborListValue(t3, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.MoneroSigningRequest_MoneroSigningRequest$deserialize_closure.prototype = {
    call$1(e) {
      return A.MoneroTxDestination_MoneroTxDestination$deserialize(type$.CborBytesValue._as(e).value);
    },
    $signature: 27
  };
  A.MoneroSigningRequest_MoneroSigningRequest$deserialize_closure0.prototype = {
    call$1(e) {
      return A.MoneroTxDestination_MoneroTxDestination$deserialize(type$.CborBytesValue._as(e).value);
    },
    $signature: 27
  };
  A.MoneroSigningRequest_MoneroSigningRequest$deserialize_closure1.prototype = {
    call$1(e) {
      return A.SpendablePayment_SpendablePayment$fromStruct(A.MoneroSerialization_deserialize(type$.CborBytesValue._as(e).value, A.SpendablePayment_layout(null)), type$.MoneroLockedPayment);
    },
    $signature: 273
  };
  A.MoneroSigningRequest_getAccountsIndexes_closure.prototype = {
    call$1(e) {
      return type$.SpendablePayment_MoneroLockedPayment._as(e).payment.output.accountIndex;
    },
    $signature: 274
  };
  A.MoneroSigningRequest_toCbor_closure.prototype = {
    call$1(e) {
      var t1 = type$.MoneroTxDestination._as(e).serialize$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
    },
    $signature: 108
  };
  A.MoneroSigningRequest_toCbor_closure0.prototype = {
    call$1(e) {
      var t1 = type$.SpendablePayment_MoneroLockedPayment._as(e).serialize$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
    },
    $signature: 276
  };
  A._SignRequest_Object_CborSerializable.prototype = {};
  A.GlobalSignResponse.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.index.toCbor$0(), this.signature, this.signerPubKey.toCbor$0()], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_33_1, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A._GlobalSignResponse_Object_CborSerializable.prototype = {};
  A.NoneEncryptedRequestHashing.prototype = {
    toCbor$0() {
      var t1 = this.dataBytes;
      if (t1 == null)
        t1 = null;
      else {
        A.BytesUtils_validateListOfBytes(t1);
        t1 = new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
      }
      return new A.CborTagValue(A.List_List$unmodifiable(B.NoneEncryptedCryptoRequestMethod_mF3.get$tag(), type$.int), new A.CborListValue([this.hashingType._core$_name, t1, this.dataHex], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    getResult$1$encryptedPart(encryptedPart) {
      return this.getResult$body$NoneEncryptedRequestHashing(type$.nullable_List_int._as(encryptedPart));
    },
    getResult$body$NoneEncryptedRequestHashing(encryptedPart) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.MessageArgsOneBytes),
        $async$returnValue, $async$self = this, t1;
      var $async$getResult$1$encryptedPart = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.NoneEncryptedRequestHashing_generateHash($async$self.dataBytes, $async$self.dataHex, $async$self.hashingType);
              A.BytesUtils_validateListOfBytes(t1);
              $async$returnValue = new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getResult$1$encryptedPart, $async$completer);
    }
  };
  A.NoneEncryptedRequestHexToBytes.prototype = {
    toCbor$0() {
      var t2,
        t1 = new A.CodeUnits(this.hex);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A._setArrayType([new A.CborBytesValue(A.List_List$unmodifiable(t1, t2))], type$.JSArray_CborBytesValue);
      return new A.CborTagValue(A.List_List$unmodifiable(B.NoneEncryptedCryptoRequestMethod_ubZ.get$tag(), t2), new A.CborListValue(t1, true, type$.CborListValue_CborBytesValue), type$.CborTagValue_dynamic);
    },
    getResult$1$encryptedPart(encryptedPart) {
      return this.getResult$body$NoneEncryptedRequestHexToBytes(type$.nullable_List_int._as(encryptedPart));
    },
    getResult$body$NoneEncryptedRequestHexToBytes(encryptedPart) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.MessageArgsOneBytes),
        $async$returnValue, $async$self = this, t1;
      var $async$getResult$1$encryptedPart = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.BytesUtils_fromHexString($async$self.hex);
              A.BytesUtils_validateListOfBytes(t1);
              $async$returnValue = new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getResult$1$encryptedPart, $async$completer);
    }
  };
  A.NoneEncryptedRequestFakeMoneroTx.prototype = {
    getResult$1$encryptedPart(encryptedPart) {
      return this.getResult$body$NoneEncryptedRequestFakeMoneroTx(type$.nullable_List_int._as(encryptedPart));
    },
    getResult$body$NoneEncryptedRequestFakeMoneroTx(encryptedPart) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.MessageArgsOneBytes),
        $async$returnValue, $async$self = this, result, t1;
      var $async$getResult$1$encryptedPart = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.result$0(), $async$getResult$1$encryptedPart);
            case 3:
              // returning from await.
              result = $async$result;
              t1 = A.BigintUtils_toBytes(result, A.BigintUtils_orderLen(result), B.C_Endian);
              A.BytesUtils_validateListOfBytes(t1);
              $async$returnValue = new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getResult$1$encryptedPart, $async$completer);
    },
    toCbor$0() {
      var t4, t5, t6, _this = this,
        t1 = _this.destinations,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborBytesValue>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("CborBytesValue(1)")._as(new A.NoneEncryptedRequestFakeMoneroTx_toCbor_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t2 = type$.CborListValue_CborBytesValue;
      t1 = _this.change;
      if (t1 == null)
        t1 = B.C_CborNullValue;
      else {
        t1 = t1.serialize$0();
        A.BytesUtils_validateListOfBytes(t1);
        t1 = new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
      }
      t4 = _this.fakePayments;
      t5 = A._arrayInstanceType(t4);
      t6 = t5._eval$1("MappedListIterable<1,CborBytesValue>");
      t2 = A._setArrayType([new A.CborListValue(t3, true, t2), _this.fee, t1, new A.CborListValue(A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("CborBytesValue(1)")._as(new A.NoneEncryptedRequestFakeMoneroTx_toCbor_closure0()), t6), true, t6._eval$1("ListIterable.E")), true, t2)], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.NoneEncryptedCryptoRequestMethod_UAO.get$tag(), type$.int), new A.CborListValue(t2, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    result$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.BigInt),
        $async$returnValue, $async$self = this, spendablePayment, t1;
      var $async$result$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              spendablePayment = A.MoneroTransactionHelper_generateFakePaymentOuts($async$self.fakePayments, type$.MoneroUnLockedPayment_MoneroUnlockedOutput);
              t1 = A.MoneroRctTxBuilder_MoneroRctTxBuilder(A.MoneroAccountKeys_MoneroAccountKeys(A.MoneroAccount_MoneroAccount$fromSeed(A.RCT_identity(false)), B.List_dFo, B.MoneroNetwork_A9U), $async$self.change, $async$self.destinations, true, $async$self.fee, spendablePayment).transaction;
              $async$returnValue = A._BigIntImpl__BigIntImpl$from(t1.serialize$0().length).$add(0, A._BigIntImpl__BigIntImpl$from(A.RCTGeneratorUtils_weightClawBack(t1.signature.cast$1$0(0, type$.RCTSignature_RCTSignatureBase_RctSigPrunable))));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$result$0, $async$completer);
    }
  };
  A.NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize_closure.prototype = {
    call$1(e) {
      return A.MoneroTxDestination_MoneroTxDestination$deserialize(type$.CborBytesValue._as(e).value);
    },
    $signature: 27
  };
  A.NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize_closure0.prototype = {
    call$1(e) {
      return A.MoneroTxDestination_MoneroTxDestination$deserialize(type$.CborBytesValue._as(e).value);
    },
    $signature: 27
  };
  A.NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize_closure1.prototype = {
    call$1(e) {
      return A.MoneroPayment_MoneroPayment$deserialize(type$.CborBytesValue._as(e).value, type$.MoneroOutput);
    },
    $signature: 109
  };
  A.NoneEncryptedRequestFakeMoneroTx_toCbor_closure.prototype = {
    call$1(e) {
      var t1 = type$.MoneroTxDestination._as(e).serialize$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
    },
    $signature: 108
  };
  A.NoneEncryptedRequestFakeMoneroTx_toCbor_closure0.prototype = {
    call$1(e) {
      var t1 = type$.MoneroUnLockedPayment_MoneroUnlockedOutput._as(e).toVariantSerialize$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
    },
    $signature: 278
  };
  A.NoneEncryptedRequestGenerateRingOutput.prototype = {
    getResult$1$encryptedPart(encryptedPart) {
      return this.getResult$body$NoneEncryptedRequestGenerateRingOutput(type$.nullable_List_int._as(encryptedPart));
    },
    getResult$body$NoneEncryptedRequestGenerateRingOutput(encryptedPart) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.MessageArgsOneBytes),
        $async$returnValue, $async$self = this, t1;
      var $async$getResult$1$encryptedPart = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.result$0(), $async$getResult$1$encryptedPart);
            case 3:
              // returning from await.
              t1 = $async$result.toCbor$0().encode$0();
              A.BytesUtils_validateListOfBytes(t1);
              $async$returnValue = new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getResult$1$encryptedPart, $async$completer);
    },
    getAbsoluteDistribution$0() {
      var offsets, i,
        t1 = A.OutputDistributionResponse$fromJson(A.MoneroStorageSerializer_deserialize(this.rctOffsetData)).distributions,
        t2 = t1.length;
      if (t2 !== 1)
        throw A.wrapException(B.WalletException_5V3);
      if (0 >= t2)
        return A.ioore(t1, 0);
      offsets = A.List_List$from(t1[0].distribution, true, type$.BigInt);
      for (i = 1; t1 = offsets.length, i < t1; ++i)
        B.JSArray_methods.$indexSet(offsets, i, J.$add$ansx(offsets[i], offsets[i - 1]));
      if (t1 < 10)
        throw A.wrapException(B.WalletException_generate_rct_faild_null);
      if (J.compareTo$1$ns(B.JSArray_methods.get$last(offsets), this.maxGlobalIndex) < 0)
        throw A.wrapException(B.WalletException_generate_rct_faild_null);
      return offsets;
    },
    result$0() {
      return this.result$body$NoneEncryptedRequestGenerateRingOutput();
    },
    result$body$NoneEncryptedRequestGenerateRingOutput() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.MoneroRignOutput),
        $async$returnValue, $async$self = this, addOuts, blocksConsider, t2, t3, outputsConsider, end, numRctOuts, gamma, outputsCount, _i, i, indices, start, numFound, t4, usableOuts, blackballed, lastPart, _box_0, rctOffsets, baseRequestCount, t1, outKeysRequestOrder;
      var $async$result$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_0 = {};
              rctOffsets = $async$self.getAbsoluteDistribution$0();
              baseRequestCount = B.JSNumber_methods.ceil$0(($async$self.fakeOutsLength + 1) * 1.5 + 1);
              t1 = type$.JSArray_BigInt;
              outKeysRequestOrder = A._setArrayType([], t1);
              _box_0.outKeysRequests = A._setArrayType([], t1);
              addOuts = new A.NoneEncryptedRequestGenerateRingOutput_result_addOuts(_box_0, outKeysRequestOrder);
              t1 = rctOffsets.length;
              if (t1 < 10)
                A.throwExpression(B.MoneroCryptoException_Qsc);
              blocksConsider = A.IntUtils_min(t1, 262800);
              t1 = B.JSArray_methods.get$last(rctOffsets);
              t2 = rctOffsets.length;
              if (blocksConsider < t2) {
                t3 = t2 - blocksConsider - 1;
                if (!(t3 >= 0)) {
                  $async$returnValue = A.ioore(rctOffsets, t3);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t3 = rctOffsets[t3];
                t2 = t3;
              } else
                t2 = $.$get$_BigIntImpl_zero();
              outputsConsider = J.$sub$n(t1, t2);
              t2 = rctOffsets.length;
              end = t2 - (A.IntUtils_max(1, 10) - 1);
              t1 = end - 1;
              if (!(t1 >= 0 && t1 < t2)) {
                $async$returnValue = A.ioore(rctOffsets, t1);
                // goto return
                $async$goto = 1;
                break;
              }
              numRctOuts = rctOffsets[t1];
              gamma = new A.Gamma(new A.GammaDistribution(19.28, 0.6211180124223602), rctOffsets, end, 120 * (A._BigIntImpl__BigIntImpl$from(blocksConsider).toDouble$0(0) / outputsConsider.toDouble$0(0)), numRctOuts);
              for (t1 = $async$self.payments, t2 = t1.length, t3 = type$.BigInt, outputsCount = baseRequestCount + 50, _i = 0; _i < t2; ++_i) {
                i = t1[_i];
                indices = A.LinkedHashSet_LinkedHashSet$_empty(t3);
                start = _box_0.outKeysRequests.length;
                numFound = $.$get$_BigIntImpl_zero();
                if (numRctOuts.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(outputsCount)) <= 0) {
                  for (i = numFound; i.compareTo$1(0, numRctOuts) < 0; i = i.$add(0, $.$get$_BigIntImpl_one()))
                    addOuts.call$1(i);
                  for (i = numRctOuts; i.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(outputsCount)) < 0; i = i.$add(0, $.$get$_BigIntImpl_one()))
                    addOuts.call$1(i);
                } else {
                  t4 = numFound.compareTo$1(0, numFound);
                  if (t4 === 0) {
                    numFound = $.$get$_BigIntImpl_one();
                    t4 = i.globalIndex;
                    indices.add$1(0, t4);
                    addOuts.call$1(t4);
                  }
                  for (usableOuts = numRctOuts, blackballed = false; numFound.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(outputsCount)) < 0;) {
                    if (A._BigIntImpl__BigIntImpl$from(indices._collection$_length).$eq(0, usableOuts)) {
                      if (blackballed)
                        break;
                      usableOuts = numRctOuts;
                      blackballed = true;
                    }
                    do {
                      i = gamma.pick$0();
                    } while (i.compareTo$1(0, numRctOuts) >= 0);
                    if (indices.contains$1(0, i))
                      continue;
                    indices.add$1(0, i);
                    addOuts.call$1(i);
                    numFound = numFound.$add(0, $.$get$_BigIntImpl_one());
                  }
                  for (; numFound.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(outputsCount)) < 0;) {
                    addOuts.call$1($.$get$_BigIntImpl_zero());
                    numFound = numFound.$add(0, $.$get$_BigIntImpl_one());
                  }
                }
                lastPart = B.JSArray_methods.sublist$1(_box_0.outKeysRequests, start);
                B.JSArray_methods.sort$1(lastPart, new A.NoneEncryptedRequestGenerateRingOutput_result_closure());
                t4 = A.List_List$of(B.JSArray_methods.sublist$2(_box_0.outKeysRequests, 0, start), true, t3);
                B.JSArray_methods.addAll$1(t4, lastPart);
                _box_0.outKeysRequests = t4;
              }
              t1 = _box_0.outKeysRequests;
              $async$returnValue = new A.MoneroRignOutput(A.List_List$unmodifiable(outKeysRequestOrder, t3), A.List_List$unmodifiable(t1, t3));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$result$0, $async$completer);
    },
    toCbor$0() {
      var t2, t3, t4, t5, _this = this,
        t1 = _this.rctOffsetData;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t3 = _this.payments;
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,CborBytesValue>");
      t5 = A._setArrayType([new A.CborBytesValue(A.List_List$unmodifiable(t1, t2)), new A.CborListValue(A.List_List$of(new A.MappedListIterable(t3, t4._eval$1("CborBytesValue(1)")._as(new A.NoneEncryptedRequestGenerateRingOutput_toCbor_closure()), t5), true, t5._eval$1("ListIterable.E")), true, type$.CborListValue_CborBytesValue), _this.fakeOutsLength, _this.maxGlobalIndex], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.NoneEncryptedCryptoRequestMethod_J7U.get$tag(), t2), new A.CborListValue(t5, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.NoneEncryptedRequestGenerateRingOutput_NoneEncryptedRequestGenerateRingOutput$deserialize_closure.prototype = {
    call$1(e) {
      return A.MoneroPayment_MoneroPayment$deserialize(type$.CborBytesValue._as(e).value, type$.MoneroOutput);
    },
    $signature: 109
  };
  A.NoneEncryptedRequestGenerateRingOutput_result_addOuts.prototype = {
    call$1(out) {
      B.JSArray_methods.add$1(this.outKeysRequestOrder, out);
      B.JSArray_methods.add$1(this._box_0.outKeysRequests, out);
    },
    $signature: 279
  };
  A.NoneEncryptedRequestGenerateRingOutput_result_closure.prototype = {
    call$2(a, b) {
      var t1 = type$.BigInt;
      return t1._as(a).compareTo$1(0, t1._as(b));
    },
    $signature: 280
  };
  A.NoneEncryptedRequestGenerateRingOutput_toCbor_closure.prototype = {
    call$1(e) {
      var t1 = type$.MoneroPayment_MoneroOutput._as(e).toVariantSerialize$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
    },
    $signature: 281
  };
  A.NoneEncryptedRequestMoneroGenerateTxProof.prototype = {
    getResult$1$encryptedPart(encryptedPart) {
      return this.getResult$body$NoneEncryptedRequestMoneroGenerateTxProof(type$.nullable_List_int._as(encryptedPart));
    },
    getResult$body$NoneEncryptedRequestMoneroGenerateTxProof(encryptedPart) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.MessageArgsOneBytes),
        $async$returnValue, $async$self = this, t1, $async$temp1;
      var $async$getResult$1$encryptedPart = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait($async$self.result$1$encryptedPart(encryptedPart), $async$getResult$1$encryptedPart);
            case 3:
              // returning from await.
              t1 = $async$temp1.StringUtils_encode($async$result, B.StringEncoding_1);
              A.BytesUtils_validateListOfBytes(t1);
              $async$returnValue = new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getResult$1$encryptedPart, $async$completer);
    },
    toCbor$0() {
      var t1 = this.provider.toCbor$0();
      return new A.CborTagValue(A.List_List$unmodifiable(B.NoneEncryptedCryptoRequestMethod_sM5.get$tag(), type$.int), new A.CborListValue([this.txId, t1, this.message], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    result$1$encryptedPart(encryptedPart) {
      return this.result$body$NoneEncryptedRequestMoneroGenerateTxProof(type$.nullable_List_int._as(encryptedPart));
    },
    result$body$NoneEncryptedRequestMoneroGenerateTxProof(encryptedPart) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, account, t1, t2, $async$temp1, $async$temp2, $async$temp3, $async$temp4;
      var $async$result$1$encryptedPart = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              account = A.MoneroViewAccountDetails_MoneroViewAccountDetails$deserialize(encryptedPart, null);
              t1 = account.index;
              t2 = account.viewKey;
              A.print("\x1b[33m" + ("account " + t1.toString$0(0) + " " + t2.primaryAddress.toString$0(0)) + "\x1b[0m");
              $async$temp1 = A;
              $async$temp2 = t2.account;
              $async$temp3 = t1;
              $async$temp4 = $async$self.message;
              $async$goto = 3;
              return A._asyncAwait(A.MoneroClient$(null, new A.MoneroProvider(A.MoneroHTTPService$($async$self.provider, false))).getTx$1($async$self.txId), $async$result$1$encryptedPart);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.MoneroTransactionHelper_generateInProof($async$temp2, $async$temp3, $async$temp4, $async$result).toBase58$0();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$result$1$encryptedPart, $async$completer);
    }
  };
  A.NoneEncryptedRequestMoneroVerifyTxProof.prototype = {
    getResult$1$encryptedPart(encryptedPart) {
      return this.getResult$body$NoneEncryptedRequestMoneroVerifyTxProof(type$.nullable_List_int._as(encryptedPart));
    },
    getResult$body$NoneEncryptedRequestMoneroVerifyTxProof(encryptedPart) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.MessageArgsOneBytes),
        $async$returnValue, $async$self = this, t1, result;
      var $async$getResult$1$encryptedPart = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.result$1$encryptedPart(encryptedPart), $async$getResult$1$encryptedPart);
            case 3:
              // returning from await.
              result = $async$result;
              if (result == null)
                t1 = A._setArrayType([], type$.JSArray_int);
              else
                t1 = A.BigintUtils_toBytes(result, B.JSInt_methods._tdivFast$1((result._isNegative ? result.$negate(0) : result).get$bitLength(0) + 7, 8), B.C_Endian);
              A.BytesUtils_validateListOfBytes(t1);
              $async$returnValue = new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getResult$1$encryptedPart, $async$completer);
    },
    toCbor$0() {
      var _this = this,
        t1 = _this.provider.toCbor$0();
      return new A.CborTagValue(A.List_List$unmodifiable(B.NoneEncryptedCryptoRequestMethod_kXN.get$tag(), type$.int), new A.CborListValue([_this.txId, t1, _this.message, _this.address.address, _this.signature], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    result$1$encryptedPart(encryptedPart) {
      return this.result$body$NoneEncryptedRequestMoneroVerifyTxProof(type$.nullable_List_int._as(encryptedPart));
    },
    result$body$NoneEncryptedRequestMoneroVerifyTxProof(encryptedPart) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_BigInt),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, transaction, t1, client;
      var $async$result$1$encryptedPart = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              client = A.MoneroClient$(null, new A.MoneroProvider(A.MoneroHTTPService$($async$self.provider, false)));
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait(client.getTx$1($async$self.txId), $async$result$1$encryptedPart);
            case 6:
              // returning from await.
              transaction = $async$result;
              t1 = A.MoneroTransactionHelper_checkProof($async$self.address, $async$self.message, $async$self.signature, transaction);
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              client.toString;
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$result$1$encryptedPart, $async$completer);
    }
  };
  A.CryptoRequestTestLarge.prototype = {
    toCbor$0() {
      var t2,
        t1 = this.data;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A._setArrayType([new A.CborBytesValue(A.List_List$unmodifiable(t1, t2))], type$.JSArray_CborBytesValue);
      return new A.CborTagValue(A.List_List$unmodifiable(B.NoneEncryptedCryptoRequestMethod_w4U.get$tag(), t2), new A.CborListValue(t1, true, type$.CborListValue_CborBytesValue), type$.CborTagValue_dynamic);
    },
    getResult$1$encryptedPart(encryptedPart) {
      return this.getResult$body$CryptoRequestTestLarge(type$.nullable_List_int._as(encryptedPart));
    },
    getResult$body$CryptoRequestTestLarge(encryptedPart) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.MessageArgsOneBytes),
        $async$self = this;
      var $async$getResult$1$encryptedPart = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self.result$1$encryptedPart(encryptedPart), $async$getResult$1$encryptedPart);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$getResult$1$encryptedPart, $async$completer);
    },
    result$1$encryptedPart(encryptedPart) {
      type$.nullable_List_int._as(encryptedPart);
      throw A.wrapException(A.UnimplementedError$(null));
    }
  };
  A.StreamRequestMoneroBlockTracking.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.provider.toCbor$0()], type$.JSArray_CborTagValue_dynamic);
      return new A.CborTagValue(A.List_List$unmodifiable(B.StreamIsolateMethod_ASw.get$tag(), type$.int), new A.CborListValue(t1, true, type$.CborListValue_CborTagValue_dynamic), type$.CborTagValue_dynamic);
    },
    getBlockInfo$1(blockData) {
      var json, b, blocks, totalTxes, t1, exception;
      type$.List_int._as(blockData);
      try {
        json = A.MoneroStorageSerializer_deserialize(blockData);
        b = A.DaemonBaseResponse$fromJson(json);
        if (b.status !== "OK") {
          t1 = A._setArrayType([], type$.JSArray_DaemonBlockCompleteEntryResponse);
          return new A._Record_2(new A.MoneroBlocksInfoResponse(0, 0, B.MoneroParsingBlockStatus_2_1_noBlock, B.MoneroSyncBlockResponseType_iZe), t1);
        }
        blocks = A.DaemonGetBlockBinResponse$fromJson(json).blocks;
        totalTxes = J.fold$1$2$ax(blocks, 0, new A.StreamRequestMoneroBlockTracking_getBlockInfo_closure(), type$.int);
        t1 = J.get$length$asx(blocks);
        return new A._Record_2(new A.MoneroBlocksInfoResponse(t1, totalTxes, B.MoneroParsingBlockStatus_3_2_success, B.MoneroSyncBlockResponseType_iZe), blocks);
      } catch (exception) {
        t1 = A._setArrayType([], type$.JSArray_DaemonBlockCompleteEntryResponse);
        return new A._Record_2(new A.MoneroBlocksInfoResponse(0, 0, B.MoneroParsingBlockStatus_1_0_failed, B.MoneroSyncBlockResponseType_iZe), t1);
      }
    },
    proccessBlock$3$accounts$blockPossiton$blocks(accounts, blockPossiton, blocks) {
      return this.proccessBlock$body$StreamRequestMoneroBlockTracking(accounts, blockPossiton, type$.List_DaemonBlockCompleteEntryResponse._as(blocks));
    },
    proccessBlock$body$StreamRequestMoneroBlockTracking(accounts, blockPossiton, blocks) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_MoneroSyncAccountResponse),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, totalRange, viewAccounts, accountsKeys, txes, t, i, block, moneroBlock, t1, tx, realIndex, a, account, unlock, txid, e, e0, viewAccounts0, t4, t5, t6, t7, t8, t9, result, toHex, exception, t10, t11, t2, offset, t3, $async$exception;
      var $async$proccessBlock$3$accounts$blockPossiton$blocks = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                t2 = blockPossiton.startHeight;
                offset = t2 - blockPossiton.blockHeight;
                t3 = offset;
                if (typeof t3 !== "number") {
                  $async$returnValue = A.iae(t3);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                totalRange = blockPossiton.endHeight - t2 + t3;
                $async$handler = 4;
                viewAccounts0 = accounts._accounts;
                viewAccounts = viewAccounts0;
                accountsKeys = accounts.getAccountsKeys$0();
                t2 = type$.int;
                txes = B.JSArray_methods.fold$1$2(blocks, 0, new A.StreamRequestMoneroBlockTracking_proccessBlock_closure(), t2);
                t3 = A.S(offset);
                t4 = A.S(totalRange);
                t5 = totalRange;
                t6 = offset;
                if (typeof t5 !== "number") {
                  $async$returnValue = t5.$sub();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                if (typeof t6 !== "number") {
                  $async$returnValue = A.iae(t6);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                A.print("\x1b[33m" + ("offset start in thread " + t3 + " " + t4 + " blocks " + A.S(t5 - t6) + " totalBlocks:" + blocks.length + " totaltx: " + A.S(txes)) + "\x1b[0m");
                t = new A.DateTime(Date.now(), 0, false);
                i = offset;
                t3 = type$.String;
                t4 = type$.Iterable_String;
                t5 = type$.UnmodifiableSetView_String;
                t6 = type$.List_int;
                t7 = type$.dynamic;
              case 7:
                // while condition
                t8 = i;
                t9 = totalRange;
                if (typeof t8 !== "number") {
                  $async$returnValue = t8.$lt();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                if (typeof t9 !== "number") {
                  $async$returnValue = A.iae(t9);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                if (!(t8 < t9)) {
                  // goto after while
                  $async$goto = 8;
                  break;
                }
                $async$goto = 9;
                return A._asyncAwait(A.Future_Future$delayed(B.Duration_1, t7), $async$proccessBlock$3$accounts$blockPossiton$blocks);
              case 9:
                // returning from await.
                if ($async$self._closed) {
                  A.printString("\x1b[33myes closed!\x1b[0m");
                  $async$returnValue = null;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                block = B.JSArray_methods.$index(blocks, i);
                if (J.$eq$(i, offset)) {
                  t8 = A.BytesUtils_fromHexString(block.block);
                  t9 = A.MoneroBlock_layout(null);
                  result = A.List_List$from(t6._as(t8), false, t2);
                  result.fixed$length = Array;
                  result.immutable$list = Array;
                  toHex = B.C__Hex.encode$2$lowerCase(A.MoneroBlock_MoneroBlock$fromStruct(t9.decode$1(new A.LayoutByteReader(result)).value).hash, true);
                  A.printString("\x1b[33m" + ("Start block " + toHex + " ") + "\x1b[0m");
                }
                moneroBlock = null;
                t1 = 0;
                while (true) {
                  t8 = t1;
                  t9 = block.txs;
                  if (typeof t8 !== "number") {
                    $async$returnValue = t8.$lt();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  }
                  if (!(t8 < t9.length))
                    break;
                  c$0: {
                    tx = null;
                    try {
                      t8 = A.BytesUtils_fromHexString(B.JSArray_methods.$index(block.txs, t1).blob);
                      t9 = A.MoneroTransaction_layout(false, null, null);
                      result = A.List_List$from(t6._as(t8), false, t2);
                      result.fixed$length = Array;
                      result.immutable$list = Array;
                      tx = A.MoneroTransaction_MoneroTransaction$fromStruct(t9.decode$1(new A.LayoutByteReader(result)).value);
                    } catch (exception) {
                      break c$0;
                    }
                    realIndex = 0;
                    while (true) {
                      t8 = realIndex;
                      t9 = tx.vout;
                      if (typeof t8 !== "number") {
                        $async$returnValue = t8.$lt();
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      if (!(t8 < t9.length))
                        break;
                      a = 0;
                      while (true) {
                        t8 = a;
                        t9 = J.get$length$asx(accountsKeys);
                        if (typeof t8 !== "number") {
                          $async$returnValue = t8.$lt();
                          // goto return
                          $async$goto = 1;
                          break $async$outer;
                        }
                        if (!(t8 < t9))
                          break;
                        account = J.$index$asx(accountsKeys, a);
                        unlock = A.MoneroTransactionHelper_getLockedOutputs(account, realIndex, tx);
                        if (unlock != null) {
                          if (moneroBlock == null) {
                            t8 = A.BytesUtils_fromHexString(block.block);
                            t9 = A.MoneroBlock_layout(null);
                            result = A.List_List$from(t6._as(t8), false, t2);
                            result.fixed$length = Array;
                            result.immutable$list = Array;
                            moneroBlock = A.MoneroBlock_MoneroBlock$fromStruct(t9.decode$1(new A.LayoutByteReader(result)).value);
                          }
                          toHex = B.C__Hex.encode$2$lowerCase(B.JSArray_methods.$index(moneroBlock.txHashes, t1), true);
                          txid = toHex;
                          t8 = J.elementAt$1$ax(viewAccounts, a);
                          t9 = t4._as(A.LinkedHashSet_LinkedHashSet$_literal([txid], t3));
                          t10 = t8._pendingTxes;
                          t11 = A.LinkedHashSet_LinkedHashSet(t3);
                          t11.addAll$1(0, t10);
                          t11.addAll$1(0, t9);
                          t9 = A.LinkedHashSet_LinkedHashSet(t3);
                          t9.addAll$1(0, t11);
                          t8.set$_pendingTxes(new A.UnmodifiableSetView(t9, t5));
                        }
                        t8 = a;
                        if (typeof t8 !== "number") {
                          $async$returnValue = t8.$add();
                          // goto return
                          $async$goto = 1;
                          break $async$outer;
                        }
                        a = t8 + 1;
                      }
                      t8 = realIndex;
                      if (typeof t8 !== "number") {
                        $async$returnValue = t8.$add();
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      realIndex = t8 + 1;
                    }
                  }
                  t8 = t1;
                  if (typeof t8 !== "number") {
                    $async$returnValue = t8.$add();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  }
                  t1 = t8 + 1;
                }
                t8 = i;
                if (typeof t8 !== "number") {
                  $async$returnValue = t8.$add();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                i = t8 + 1;
                // goto while condition
                $async$goto = 7;
                break;
              case 8:
                // after while
                e = new A.DateTime(Date.now(), 0, false);
                A.print("\x1b[33m" + ("offset end in thread " + $async$self._closed + " " + A.S(offset) + " " + Math.abs(B.JSInt_methods._tdivFast$1(e.difference$1(t)._duration, 1000))) + "\x1b[0m");
                t1 = blockPossiton.updateStatus$1(B.MoneroBlockTrackingStatus_2_1_success);
                t2 = A.Set_Set$unmodifiable(viewAccounts0, type$.MoneroSyncAccountsInfos);
                $async$returnValue = new A.MoneroSyncAccountResponse(t2, t1, B.MoneroSyncBlockResponseType_CTT);
                // goto return
                $async$goto = 1;
                break;
                $async$handler = 2;
                // goto after finally
                $async$goto = 6;
                break;
              case 4:
                // catch
                $async$handler = 3;
                $async$exception = $async$currentError;
                e0 = A.unwrapException($async$exception);
                A.print("\x1b[31m" + ("processblock  Error " + A.S(e0)) + "\x1b[0m");
                t1 = type$.MoneroSyncAccountsInfos;
                t2 = blockPossiton.updateStatus$1(B.MoneroBlockTrackingStatus_1_0_failed);
                t1 = A.Set_Set$unmodifiable(A.LinkedHashSet_LinkedHashSet$_empty(t1), t1);
                $async$returnValue = new A.MoneroSyncAccountResponse(t1, t2, B.MoneroSyncBlockResponseType_CTT);
                // goto return
                $async$goto = 1;
                break;
                // goto after finally
                $async$goto = 6;
                break;
              case 3:
                // uncaught
                // goto rethrow
                $async$goto = 2;
                break;
              case 6:
                // after finally
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
              case 2:
                // rethrow
                return A._asyncRethrow($async$currentError, $async$completer);
            }
      });
      return A._asyncStartSync($async$proccessBlock$3$accounts$blockPossiton$blocks, $async$completer);
    },
    _fetchBlocks$1(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.List_int),
        $async$returnValue, $async$self = this, t1, tryFetchBlock, blockData;
      var $async$_fetchBlocks$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.List_int, tryFetchBlock = 1;
            case 3:
              // for condition
              // trivial condition
              $async$goto = 5;
              return A._asyncAwait(A.MethodUtils_call(new A.StreamRequestMoneroBlockTracking__fetchBlocks_closure($async$self, request), new A.Duration(B.JSInt_methods.round$0(1000000 * tryFetchBlock)), t1), $async$_fetchBlocks$1);
            case 5:
              // returning from await.
              blockData = $async$result;
              A.printString("\x1b[33m" + ("fetched block isolate " + A.S(blockData.error)) + "\x1b[0m");
              if (blockData.exception != null) {
                if (tryFetchBlock < 3)
                  ++tryFetchBlock;
                // goto for condition
                $async$goto = 3;
                break;
              }
              t1 = blockData.__MethodResult__result_F;
              t1 === $ && A.throwLateFieldNI("_result");
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_fetchBlocks$1, $async$completer);
    },
    _sendResult$2$data$sink(data, sink) {
      var t1;
      type$.EventSink_MessageArgsStream._as(sink);
      if (this._closed)
        return;
      t1 = sink._sink;
      data = t1.$ti._rest[1]._as(sink.$ti._precomputed1._as(data));
      if ((t1._async$_state & 2) !== 0)
        A.throwExpression(A.StateError$("Stream is already closed"));
      t1.super$_BufferingStreamSubscription$_add(data);
    },
    handleIsolateData$4$encryptedPart$param$sink$streamId(encryptedPart, param, sink, streamId) {
      type$.MoneroSyncBlocksRequest._as(param);
      type$.EventSink_MessageArgsStream._as(sink);
      return this.handleIsolateData$body$StreamRequestMoneroBlockTracking(type$.nullable_List_int._as(encryptedPart), param, sink, streamId);
    },
    handleIsolateData$body$StreamRequestMoneroBlockTracking(encryptedPart, param, sink, streamId) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, blocksData, blockInfos, t1, request, offsets, t2, _i, result, t3, accounts;
      var $async$handleIsolateData$4$encryptedPart$param$sink$streamId = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              accounts = A.MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize(encryptedPart);
              A.print("\x1b[33m" + ("handleIsolateData request: " + param.toString$0(0)) + "\x1b[0m");
              $async$goto = param.type === B.MoneroSyncBlockRequestType_i7r ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return A._asyncAwait($async$self._fetchBlocks$1(param.cast$1$0(0, type$.MoneroSyncBlocksInfoRequest)), $async$handleIsolateData$4$encryptedPart$param$sink$streamId);
            case 5:
              // returning from await.
              blocksData = $async$result;
              blockInfos = $async$self.getBlockInfo$1(blocksData);
              t1 = blockInfos._1;
              A.print("\x1b[33m" + ("handleIsolateData blockInfos: " + t1.length + " " + J.get$length$asx(blocksData)) + "\x1b[0m");
              $async$self.set$blocks(t1);
              $async$self._sendResult$2$data$sink(A.MessageArgsStream$_(blockInfos._0.toCbor$0().encode$0(), B.MessageArgsStreamMethod_0_0_data, streamId), sink);
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
              request = param.cast$1$0(0, type$.MoneroSyncTrackBlocksRequest);
              A.print("\x1b[33m" + ("handleIsolateData request2: " + request.toString$0(0)) + "\x1b[0m");
              offsets = request.blockPossitions;
              t1 = offsets.length;
              if (t1 === 0) {
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = type$.int, _i = 0;
            case 6:
              // for condition
              if (!(_i < t1)) {
                // goto after for
                $async$goto = 8;
                break;
              }
              $async$goto = 9;
              return A._asyncAwait($async$self.proccessBlock$3$accounts$blockPossiton$blocks(accounts, offsets[_i], $async$self.blocks), $async$handleIsolateData$4$encryptedPart$param$sink$streamId);
            case 9:
              // returning from await.
              result = $async$result;
              if (result == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              t3 = result.toCbor$0().encode$0();
              A.BytesUtils_validateListOfBytes(t3);
              result = A.List_List$from(t3, false, t2);
              result.fixed$length = Array;
              result.immutable$list = Array;
              $async$self._sendResult$2$data$sink(new A.MessageArgsStream(result, streamId, B.MessageArgsStreamMethod_0_0_data), sink);
            case 7:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 6;
              break;
            case 8:
              // after for
              A.print("\x1b[33mdone stoped!\x1b[0m");
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$handleIsolateData$4$encryptedPart$param$sink$streamId, $async$completer);
    },
    toJson$0() {
      throw A.wrapException(A.UnimplementedError$(null));
    },
    add$1(_, args) {
      var t1;
      this.super$IsolateStreamRequest$add(0, args);
      switch (args.method.index) {
        case 0:
          t1 = this._streamController;
          if (t1 != null)
            t1.add$1(0, A.MoneroSyncBlocksRequest_MoneroSyncBlocksRequest$deserialize(args.data));
          break;
      }
    },
    set$blocks(blocks) {
      this.blocks = type$.List_DaemonBlockCompleteEntryResponse._as(blocks);
    }
  };
  A.StreamRequestMoneroBlockTracking_getBlockInfo_closure.prototype = {
    call$2(p, c) {
      return A._asInt(p) + type$.DaemonBlockCompleteEntryResponse._as(c).txs.length;
    },
    $signature: 110
  };
  A.StreamRequestMoneroBlockTracking_proccessBlock_closure.prototype = {
    call$2(p, c) {
      return A._asInt(p) + type$.DaemonBlockCompleteEntryResponse._as(c).txs.length;
    },
    $signature: 110
  };
  A.StreamRequestMoneroBlockTracking__fetchBlocks_closure.prototype = {
    call$0() {
      return this.$this.client.getBlocksByRangeBinary$1(this.request.height);
    },
    $signature: 283
  };
  A.StreamRequestHexToBytes.prototype = {
    toCbor$0() {
      return new A.CborTagValue(A.List_List$unmodifiable(B.StreamIsolateMethod_JBn.get$tag(), type$.int), new A.CborListValue([], true, type$.CborListValue_dynamic), type$.CborTagValue_dynamic);
    },
    handleIsolateData$4$encryptedPart$param$sink$streamId(encryptedPart, param, sink, streamId) {
      A._asString(param);
      type$.EventSink_MessageArgsStream._as(sink);
      return this.handleIsolateData$body$StreamRequestHexToBytes(type$.nullable_List_int._as(encryptedPart), param, sink, streamId);
    },
    handleIsolateData$body$StreamRequestHexToBytes(encryptedPart, param, sink, streamId) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3, t4, t5, t6, result;
      var $async$handleIsolateData$4$encryptedPart$param$sink$streamId = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.dynamic, t2 = sink.$ti._precomputed1, t3 = sink._sink, t4 = t3.$ti._rest[1], t5 = type$.int;
            case 2:
              // for condition
              if (!!$async$self._closed) {
                // goto after for
                $async$goto = 3;
                break;
              }
              t6 = A.BytesUtils_fromHexString(param);
              A.BytesUtils_validateListOfBytes(t6);
              result = A.List_List$from(t6, false, t5);
              result.fixed$length = Array;
              result.immutable$list = Array;
              t6 = t4._as(t2._as(new A.MessageArgsStream(result, streamId, B.MessageArgsStreamMethod_0_0_data)));
              if ((t3._async$_state & 2) !== 0)
                A.throwExpression(A.StateError$("Stream is already closed"));
              t3.super$_BufferingStreamSubscription$_add(t6);
              $async$goto = 4;
              return A._asyncAwait(A.Future_Future$delayed(B.Duration_100000, t1), $async$handleIsolateData$4$encryptedPart$param$sink$streamId);
            case 4:
              // returning from await.
              // goto for condition
              $async$goto = 2;
              break;
            case 3:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$handleIsolateData$4$encryptedPart$param$sink$streamId, $async$completer);
    },
    toJson$0() {
      throw A.wrapException(A.UnimplementedError$(null));
    },
    add$1(_, args) {
      var t1, t2;
      this.super$IsolateStreamRequest$add(0, args);
      switch (args.method.index) {
        case 0:
          t1 = this._streamController;
          if (t1 != null) {
            t2 = args.data;
            t2.toString;
            t1.add$1(0, A.BytesUtils_toHexString(t2, true, null));
          }
          break;
      }
    }
  };
  A.WalletRequestDeriveAddress.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.addressParams.toCbor$0()], type$.JSArray_CborTagValue_dynamic);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_111_5, type$.int), new A.CborListValue(t1, true, type$.CborListValue_CborTagValue_dynamic), type$.CborTagValue_dynamic);
    },
    getResult$2$key$wallet(key, wallet) {
      var deriveAddr, t1, t2, t3;
      type$.List_int._as(key);
      deriveAddr = A.WalletRequestDeriveAddress_deriveAddress(this.addressParams, wallet, this.$ti._precomputed1);
      t1 = deriveAddr.accountParams.toCbor$0().encode$0();
      t2 = deriveAddr.publicKey.toCbor$0().encode$0();
      A.BytesUtils_validateListOfBytes(t1);
      t3 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t3);
      A.BytesUtils_validateListOfBytes(t2);
      return new A.MessageArgsTwoBytes(t1, A.List_List$unmodifiable(t2, t3));
    }
  };
  A.WalletRequestReadImportedKey.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.keyId], type$.JSArray_String);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_111_33, type$.int), new A.CborListValue(t1, true, type$.CborListValue_String), type$.CborTagValue_dynamic);
    },
    getResult$2$key$wallet(key, wallet) {
      var importedKey, t1;
      type$.List_int._as(key);
      importedKey = wallet.getKeyById$1(this.keyId);
      if (importedKey == null)
        A.throwExpression(B.WalletException_WaB);
      t1 = importedKey.getKey$0().toCbor$0().encode$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    }
  };
  A.WalletRequestReadPrivateKeys.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.request.toCbor$0()], type$.JSArray_CborTagValue_dynamic);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_111_26, type$.int), new A.CborListValue(t1, true, type$.CborListValue_CborTagValue_dynamic), type$.CborTagValue_dynamic);
    },
    getResult$2$key$wallet(key, wallet) {
      var keys, t1;
      type$.List_int._as(key);
      keys = wallet.readKeys$1(this.request.indexes);
      A.print("\x1b[33m" + ("keys " + A.S(keys)) + "\x1b[0m");
      t1 = new A.CryptoPrivateKeysResponse(A.List_List$unmodifiable(keys, type$.CryptoPrivateKeyData)).toCbor$0().encode$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    }
  };
  A.WalletRequestReadPublicKeys.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.request.toCbor$0()], type$.JSArray_CborTagValue_dynamic);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_111_25, type$.int), new A.CborListValue(t1, true, type$.CborListValue_CborTagValue_dynamic), type$.CborTagValue_dynamic);
    },
    getResult$2$key$wallet(key, wallet) {
      var t1;
      type$.List_int._as(key);
      t1 = new A.CryptoPublicKeysResponse(A.List_List$unmodifiable(wallet.readPublicKeys$1(this.request.indexes), type$.CryptoPublicKeyData)).toCbor$0().encode$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    }
  };
  A.WalletRequestMoneroOutputUnlocker.prototype = {
    toCbor$0() {
      var t1 = this.requests,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t3 = A._setArrayType([new A.CborListValue(A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("CborTagValue<@>(1)")._as(new A.WalletRequestMoneroOutputUnlocker_toCbor_closure()), t3), true, t3._eval$1("ListIterable.E")), true, type$.CborListValue_CborTagValue_dynamic)], type$.JSArray_CborListValue_CborTagValue_dynamic);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_111_31, type$.int), new A.CborListValue(t3, true, type$.CborListValue_CborListValue_CborTagValue_dynamic), type$.CborTagValue_dynamic);
    },
    getResult$2$key$wallet(key, wallet) {
      var t1 = this.result$2$key$wallet(type$.List_int._as(key), wallet).toCbor$0().encode$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    },
    result$2$key$wallet(key, wallet) {
      var t1, t2, t3, accounts, payments, i, request, unlockedOuts, t4, result, payment;
      type$.List_int._as(key);
      t1 = this.requests;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,AccessCryptoPrivateKeyRequest>");
      t3 = wallet.readKeys$1(A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("AccessCryptoPrivateKeyRequest(1)")._as(new A.WalletRequestMoneroOutputUnlocker_result_closure()), t3), true, t3._eval$1("ListIterable.E")));
      accounts = A.List_List$generate(t3.length, new A.WalletRequestMoneroOutputUnlocker_result_closure0(this, new A.CastList(t3, A._arrayInstanceType(t3)._eval$1("CastList<1,MoneroPrivateKeyData>"))), type$.MoneroAccountKeys);
      payments = A._setArrayType([], type$.JSArray_MoneroProcessTxesResponse);
      for (t2 = t1.length, t3 = type$.MoneroUnlockedPaymentRequestDetails, i = 0; i < t2; ++i) {
        request = t1[i];
        if (!(i < accounts.length))
          return A.ioore(accounts, i);
        unlockedOuts = this.unlockOuts$2$account$txes(accounts[i], request.txes);
        t4 = t1[i].primaryAddress;
        result = A.List_List$from(unlockedOuts, false, t3);
        result.fixed$length = Array;
        result.immutable$list = Array;
        payment = new A.MoneroProcessTxesResponse(t4, result);
        B.JSArray_methods.add$1(payments, payment);
        A.printString("\x1b[33m" + ("find payment " + payment.toString$0(0)) + "\x1b[0m");
      }
      return new A.MoneroBatchProcessTxesResponse(A.List_List$unmodifiable(payments, type$.MoneroProcessTxesResponse));
    },
    unlockOuts$2$account$txes(account, txes) {
      var payments, t1, i, txData, tx, txId, t2, t3, t4, t5, t6, i0, getOut, address, t7, globalIndex;
      type$.List_MoneroTxInfo._as(txes);
      payments = A._setArrayType([], type$.JSArray_MoneroUnlockedPaymentRequestDetails);
      for (t1 = txes.length, i = 0; i < t1; ++i) {
        txData = txes[i];
        tx = txData.toTx$0();
        txId = txData.txId;
        if (tx == null) {
          B.JSArray_methods.add$1(payments, new A.MoneroUnlockedPaymentRequestDetails(A.QuickCryptoValidator_asValidHexBytes(txId, null), null, B.MoneroUnlockPaymentRequestStatus_2_1_error));
          continue;
        }
        for (t2 = tx.vout.length, t3 = txData.confirmations, t4 = txData.globalIndices, t5 = t4.length, t6 = t2 === t5, i0 = 0; i0 < t2; ++i0) {
          getOut = A.MoneroTransactionHelper_getUnlockOut(account, i0, tx);
          if (getOut == null)
            continue;
          address = account.indexAddress$1(getOut.accountIndex);
          if (t6) {
            t7 = getOut.realIndex;
            if (!(t7 >= 0 && t7 < t5))
              return A.ioore(t4, t7);
            globalIndex = t4[t7];
          } else
            globalIndex = null;
          B.JSArray_methods.add$1(payments, A.MoneroUnlockedPaymentRequestDetails_MoneroUnlockedPaymentRequestDetails$fromUnlockOutput(address, t3, globalIndex, getOut, txId));
        }
      }
      return payments;
    }
  };
  A.WalletRequestMoneroOutputUnlocker_WalletRequestMoneroOutputUnlocker$deserialize_closure.prototype = {
    call$1(e) {
      return A.MoneroProcessTxIdsRequest_MoneroProcessTxIdsRequest$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 284
  };
  A.WalletRequestMoneroOutputUnlocker_toCbor_closure.prototype = {
    call$1(e) {
      return type$.MoneroProcessTxIdsRequest._as(e).toCbor$0();
    },
    $signature: 285
  };
  A.WalletRequestMoneroOutputUnlocker_result_closure.prototype = {
    call$1(e) {
      return new A.AccessCryptoPrivateKeyRequest(type$.MoneroProcessTxIdsRequest._as(e).index, 5);
    },
    $signature: 286
  };
  A.WalletRequestMoneroOutputUnlocker_result_closure0.prototype = {
    call$1(i) {
      var t2,
        t1 = this.keys;
      t1 = A.MoneroAccount_MoneroAccount$_(B.MoneroCoins_moneroMainnet, t1.$ti._rest[1]._as(J.$index$asx(t1._source, i)).spendPrivateKey.privateKey.key, null);
      t2 = this.$this.requests;
      if (!(i < t2.length))
        return A.ioore(t2, i);
      return A.MoneroAccountKeys_MoneroAccountKeys(t1, t2[i].keyIndexes, B.MoneroNetwork_wEo);
    },
    $signature: 111
  };
  A.WalletRequestSignMessage.prototype = {
    toCbor$0() {
      var t2, t3, _this = this,
        t1 = _this.message;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = _this.index.toCbor$0();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_111_3, t2), new A.CborListValue([new A.CborBytesValue(t1), t3, _this.payloadLength, _this.network.tag], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    getResult$2$key$wallet(key, wallet) {
      var signature;
      type$.List_int._as(key);
      signature = A.WalletRequestSignMessage_sign(this.index, this.message, this.network, wallet);
      A.BytesUtils_validateListOfBytes(signature);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(signature, type$.int));
    }
  };
  A.WalletRequestReadMnemonic.prototype = {
    toCbor$0() {
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_111_27, type$.int), new A.CborListValue([], true, type$.CborListValue_dynamic), type$.CborTagValue_dynamic);
    },
    getResult$2$key$wallet(key, wallet) {
      var t1;
      type$.List_int._as(key);
      t1 = new A.AccessMnemonicResponse(wallet.mnemonic).toCbor$0().encode$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    }
  };
  A.WalletRequestSign.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.request.toCbor$0()], type$.JSArray_CborTagValue_dynamic);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_111_30, type$.int), new A.CborListValue(t1, true, type$.CborListValue_CborTagValue_dynamic), type$.CborTagValue_dynamic);
    },
    getResult$2$key$wallet(key, wallet) {
      var t1 = this.result$2$key$wallet(type$.List_int._as(key), wallet).toCbor$0().encode$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    },
    result$2$key$wallet(key, wallet) {
      var t1, _0_0, signature, t2;
      type$.List_int._as(key);
      t1 = this.request;
      key = B.JSArray_methods.get$first(wallet.readKeys$1(A._setArrayType([new A.AccessCryptoPrivateKeyRequest(t1.index, 5)], type$.JSArray_AccessCryptoPrivateKeyRequest)));
      _0_0 = t1.network;
      $label0$0: {
        if (B.SigningRequestNetwork_Had === _0_0) {
          t1 = A.WalletRequestSign_moneroSigning(key, t1.cast$1$0(0, type$.MoneroSigningRequest));
          break $label0$0;
        }
        if (B.SigningRequestNetwork_qJO === _0_0) {
          t1 = t1.cast$1$0(0, type$.CosmosSigningRequest);
          signature = A.CosmosPrivateKey_CosmosPrivateKey$fromBytes(t1.alg, key.privateKeyBytes$0()).sign$1(0, t1.digest);
          t2 = key.get$publicKey();
          A.BytesUtils_validateListOfBytes(signature);
          t2 = new A.GlobalSignResponse(A.List_List$unmodifiable(signature, type$.int), t1.index, t2);
          t1 = t2;
          break $label0$0;
        }
        t1 = A.WalletRequestSign_globalSigning(key, t1.cast$1$0(0, type$.GlobalSignRequest));
        break $label0$0;
      }
      return t1;
    }
  };
  A.WalletRequestSign_moneroSigning_closure.prototype = {
    call$1(e) {
      var unlockedPayment, t1;
      type$.SpendablePayment_MoneroLockedPayment._as(e);
      unlockedPayment = A.MoneroTransactionHelper_toUnlockPayment(this.moneroKeys, e.payment);
      if (unlockedPayment == null)
        throw A.wrapException(B.WalletException_failed_to_unlock_output_null);
      t1 = type$.MoneroUnLockedPayment_MoneroUnlockedOutput;
      A.checkTypeBound(t1, type$.MoneroPayment_MoneroOutput, "E", "updatePayment");
      return new A.SpendablePayment(t1._as(unlockedPayment), A.List_List$unmodifiable(e.outs, type$.OutsEntery), A.IntHelper_get_asUint32(e.realOutIndex), type$.SpendablePayment_MoneroUnLockedPayment_MoneroUnlockedOutput);
    },
    $signature: 288
  };
  A.WalletRequestSign_moneroSigning_closure0.prototype = {
    call$1(e) {
      var t1, t2;
      type$.MoneroTxDestination._as(e);
      t1 = e.address;
      t2 = this.tx;
      t2 = A.MoneroTransactionHelper_generateOutProof(t2.destinationKeys.allTxKeys, "", t1, t2.transaction).toBase58$0();
      return new A.MoneroTxDestinationWithProof(t1, A.IntegerBalance_IntegerBalance(e.amount, 12, false, true), t2);
    },
    $signature: 289
  };
  A.WalletRequestEthereumTypedDataSign.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([A.StringUtils_fromJson(this.message.toJson$0(), null, null, false), this.index.toCbor$0()], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_111_4, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    getResult$2$key$wallet(key, wallet) {
      var signingKey, signature,
        t1 = type$.List_int;
      t1._as(key);
      signingKey = A.ECDSAPrivateKey_ECDSAPrivateKey$fromBytes(B.JSArray_methods.get$first(wallet.readKeys$1(A._setArrayType([new A.AccessCryptoPrivateKeyRequest(this.index, 5)], type$.JSArray_AccessCryptoPrivateKeyRequest))).privateKeyBytes$0(), $.$get$ETHSignerConst_secp256());
      signature = new A.ETHSigner(new A.EcdsaSigningKey(signingKey, signingKey.publicKey.generator))._evm_signer$_signEcdsa$2$hashMessage(t1._as(this.message.encode$1$hash(false)), true).toBytes$0();
      A.BytesUtils_validateListOfBytes(signature);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(signature, type$.int));
    }
  };
  A.WalletRequestImportNewKey.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.newKey.toCbor$0()], type$.JSArray_CborTagValue_dynamic);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_111_28, type$.int), new A.CborListValue(t1, true, type$.CborListValue_CborTagValue_dynamic), type$.CborTagValue_dynamic);
    },
    getResult$2$key$wallet(key, wallet) {
      var encryptWallet, t1, t2, t3;
      type$.List_int._as(key);
      encryptWallet = A.CryptoRequestGenerateMasterKey_encryptedMasterKey(key, wallet.importCustomKey$1(this.newKey));
      t1 = encryptWallet._0.toCbor$0().encode$0();
      t2 = encryptWallet._1;
      A.BytesUtils_validateListOfBytes(t1);
      t3 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t3);
      A.BytesUtils_validateListOfBytes(t2);
      t2 = A.List_List$unmodifiable(t2, t3);
      A.BytesUtils_validateListOfBytes(key);
      return new A.MessageArgsThreeBytes(t1, t2, A.List_List$unmodifiable(key, t3));
    }
  };
  A.WalletRequestBackupWallet.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.key], type$.JSArray_String);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_111_40, type$.int), new A.CborListValue(t1, true, type$.CborListValue_String), type$.CborTagValue_dynamic);
    },
    getResult$2$key$wallet(key, wallet) {
      var t1;
      type$.List_int._as(key);
      t1 = A.BytesUtils_fromHexString(A.Web3SecretStorageDefinationV3_Web3SecretStorageDefinationV3$encode(wallet.toCbor$1$backup(true).encode$0(), this.key).encrypt$1$encoding(B.SecretWalletEncoding_2));
      A.BytesUtils_validateListOfBytes(t1);
      return new A.MessageArgsOneBytes(A.List_List$unmodifiable(t1, type$.int));
    }
  };
  A.WalletRequestRemoveKey.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.keyId], type$.JSArray_String);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_111_29, type$.int), new A.CborListValue(t1, true, type$.CborListValue_String), type$.CborTagValue_dynamic);
    },
    getResult$2$key$wallet(key, wallet) {
      var encryptWallet, t1, t2, t3;
      type$.List_int._as(key);
      encryptWallet = A.CryptoRequestGenerateMasterKey_encryptedMasterKey(key, wallet.removeKey$1(this.keyId));
      t1 = encryptWallet._0.toCbor$0().encode$0();
      t2 = encryptWallet._1;
      A.BytesUtils_validateListOfBytes(t1);
      t3 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t3);
      A.BytesUtils_validateListOfBytes(t2);
      t2 = A.List_List$unmodifiable(t2, t3);
      A.BytesUtils_validateListOfBytes(key);
      return new A.MessageArgsThreeBytes(t1, t2, A.List_List$unmodifiable(key, t3));
    }
  };
  A.BlockchainUtils_seedToBipKey_validate.prototype = {
    call$1(bip32Obj) {
      var t2,
        t1 = bip32Obj.__Bip32Base__pubKey_A;
      t1 === $ && A.throwLateFieldNI("_pubKey");
      t1 = t1.keyData.depth.__Bip32Depth__depth_F;
      t1 === $ && A.throwLateFieldNI("_depth");
      t2 = bip32Obj.__Bip32Base__privKey_A;
      t2 === $ && A.throwLateFieldNI("_privKey");
      if (t2 == null) {
        if (t1 < 3 || t1 > 5)
          throw A.wrapException(A.Bip44DepthError$("Depth of the public-only Bip object (" + t1 + ") is below account level or beyond address index level"));
      } else if (t1 < 0 || t1 > 5)
        throw A.wrapException(A.Bip44DepthError$("Depth of the Bip object (" + t1 + ") is invalid or beyond address index level"));
      return bip32Obj;
    },
    $signature: 290
  };
  A.BaseRepository.prototype = {};
  A.NodeClientStatus.prototype = {
    _enumToString$0() {
      return "NodeClientStatus." + this._core$_name;
    }
  };
  A.NetworkClient.prototype = {
    toString$0(_) {
      return "Client: null";
    }
  };
  A._NetworkClient_Object_BaseRepository.prototype = {};
  A.MoneroClient.prototype = {
    getBlocksByRangeBinary$1(start) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.List_int),
        $async$returnValue, $async$self = this, $async$temp1, $async$temp2, $async$temp3, $async$temp4;
      var $async$getBlocksByRangeBinary$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = $async$self.provider;
              $async$temp2 = A;
              $async$temp3 = A;
              $async$temp4 = A;
              $async$goto = 4;
              return A._asyncAwait($async$self.getGenesisBlockHash$0(), $async$getBlocksByRangeBinary$1);
            case 4:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait($async$temp1.requestBinary$2$2$timeout(new $async$temp2.DaemonRequestGetBlocksBin($async$temp3.List_List$unmodifiable($async$temp4._setArrayType([$async$result], type$.JSArray_String), type$.String), start, B.DaemonRequestBlocksInfo_0), B.Duration_120000000, type$.DaemonGetBlockBinResponse, type$.Map_String_dynamic), $async$getBlocksByRangeBinary$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getBlocksByRangeBinary$1, $async$completer);
    },
    getGenesisBlockHash$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, e, t1, exception, $async$exception;
      var $async$getGenesisBlockHash$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$goto = $async$self._genesis == null ? 7 : 8;
              break;
            case 7:
              // then
              $async$goto = 9;
              return A._asyncAwait($async$self.provider.request$2$1(new A.DaemonRequestOnGetBlockHash(0), type$.nullable_String, type$.String), $async$getGenesisBlockHash$0);
            case 9:
              // returning from await.
              $async$self.set$_genesis($async$result);
            case 8:
              // join
              t1 = $async$self._genesis;
              t1.toString;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              A.print("\x1b[33m" + ("Error " + A.S(e)) + "\x1b[0m");
              throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$getGenesisBlockHash$0, $async$completer);
    },
    getTx$1(txId) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.MoneroTransaction),
        $async$returnValue, $async$self = this, toBytes, t1, result, t2;
      var $async$getTx$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.List_List$unmodifiable(A._setArrayType([txId], type$.JSArray_String), type$.String);
              $async$goto = 3;
              return A._asyncAwait($async$self.provider.request$2$1(new A.DaemonRequestGetTransactions(t1, false, false, false), type$.List_TxResponse, type$.Map_String_dynamic), $async$getTx$1);
            case 3:
              // returning from await.
              result = $async$result;
              t2 = J.getInterceptor$asx(result);
              if (t1.length !== t2.get$length(result))
                throw A.wrapException(B.WalletException_transaction_not_found_null);
              toBytes = A.BytesUtils_tryFromHexString(t2.$index(result, 0).txHex);
              t1 = toBytes == null ? null : toBytes.length === 0;
              if (t1 !== false)
                A.throwExpression(B.DartMoneroPluginException_yvL);
              toBytes.toString;
              $async$returnValue = A.MoneroTransaction_MoneroTransaction$deserialize(toBytes);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getTx$1, $async$completer);
    },
    set$_genesis(_genesis) {
      this._genesis = A._asStringQ(_genesis);
    }
  };
  A._MoneroClient_NetworkClient_CryptoWokerImpl.prototype = {};
  A.APIProvider.prototype = {
    get$variabels() {
      return [this.httpNodeUri, this.protocol, this.auth];
    }
  };
  A._APIProvider_Object_Equatable.prototype = {};
  A._APIProvider_Object_Equatable_CborSerializable.prototype = {};
  A.MoneroAPIProvider.prototype = {
    toCbor$0() {
      var t1 = this.auth;
      t1 = t1 == null ? null : t1.toCbor$0();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_90_12, type$.int), new A.CborListValue([this.httpNodeUri, t1, this.identifier], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 291
  };
  A.APIServiceTracker.prototype = {
    _checkStatus$0() {
      var t3,
        t1 = this._requests,
        t2 = A._arrayInstanceType(t1);
      t2 = this._totalSuccess = new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.APIServiceTracker__checkStatus_closure()), t2._eval$1("WhereIterable<1>")).get$length(0);
      t1 = t1.length;
      t3 = t1 - t2;
      this._totalError = t3;
      if (t1 === 0 || t2 === t1)
        return B.APIServiceStatus_0;
      if (t3 === t1)
        return B.APIServiceStatus_2;
      return B.APIServiceStatus_1;
    },
    _updateStatus$0() {
      var updateStatus = this._checkStatus$0(),
        t1 = this._tracker$_status;
      A.LiveListenable__addListener(t1);
      if (t1._live$_value !== updateStatus)
        t1.super$LiveListenable$value(t1.$ti._precomputed1._as(updateStatus));
    }
  };
  A.APIServiceTracker__checkStatus_closure.prototype = {
    call$1(element) {
      return type$.ApiRequest._as(element).error == null;
    },
    $signature: 292
  };
  A.HTTPService.prototype = {
    _callSynchronizedService$1$2$allowStatus(t, allowStatus, $T) {
      return this._callSynchronizedService$body$HTTPService(type$.Future_HTTPCallerResponse_Function._as(t), type$.List_int._as(allowStatus), $T, $T._eval$1("BaseServiceResponse<0>"));
    },
    _callSynchronizedService$body$HTTPService(t, allowStatus, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, t1;
      var $async$_callSynchronizedService$1$2$allowStatus = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._onServiceException$1$2$allowStatus(t, allowStatus, $T);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_callSynchronizedService$1$2$allowStatus, $async$completer);
    },
    serviceRequest$1$4$allowStatus$timeout$uri(request, allowStatus, timeout, uri, $T) {
      var responseType = null;
      return this.serviceRequest$body$HTTPService(request, type$.List_int._as(allowStatus), timeout, uri, $T, $T._eval$1("BaseServiceResponse<0>"));
    },
    serviceRequest$body$HTTPService(request, allowStatus, timeout, uri, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, t1, headers, type, e, t2, exception, responseType, response, toUri, $async$exception;
      var $async$serviceRequest$1$4$allowStatus$timeout$uri = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              responseType = null;
              response = null;
              toUri = uri;
              $async$handler = 4;
              t2 = type$.String;
              t1 = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
              if (request.type === B.RequestServiceType_0)
                J.$indexSet$ax(t1, "Content-Type", "application/json");
              J.$indexSet$ax(t1, "Accept", "application/json");
              J.addAll$1$ax(t1, request.headers);
              headers = t1;
              type = $async$self._detectTemplateType$1$1$responseType(responseType, $T);
              $async$goto = 7;
              return A._asyncAwait($async$self._callSynchronizedService$1$2$allowStatus(new A.HTTPService_serviceRequest_closure($async$self, request, toUri, timeout, headers, type), allowStatus, $T), $async$serviceRequest$1$4$allowStatus$timeout$uri);
            case 7:
              // returning from await.
              response = $async$result;
              t1 = response;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.ApiProviderException) {
                e = t1;
                t1 = $async$self.tracker;
                toUri.get$_text();
                new A.DateTime(Date.now(), 0, false).toLocal$0();
                B.JSArray_methods.add$1(t1._requests, new A.ApiRequest(e));
                t1._updateStatus$0();
                throw $async$exception;
              } else
                throw $async$exception;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              if (response != null) {
                t1 = $async$self.tracker;
                toUri.get$_text();
                new A.DateTime(Date.now(), 0, false).toLocal$0();
                B.JSArray_methods.add$1(t1._requests, new A.ApiRequest(null));
                t1._updateStatus$0();
              }
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$serviceRequest$1$4$allowStatus$timeout$uri, $async$completer);
    },
    _onServiceException$1$2$allowStatus(t, allowStatus, $T) {
      return this._onServiceException$body$HTTPService(type$.Future_HTTPCallerResponse_Function._as(t), type$.List_int._as(allowStatus), $T, $T._eval$1("BaseServiceResponse<0>"));
    },
    _onServiceException$body$HTTPService(t, allowStatus, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, response, isValidStatusCode, decode, e, e0, e1, t1, t2, exception, $async$exception;
      var $async$_onServiceException$1$2$allowStatus = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(t.call$0(), $async$_onServiceException$1$2$allowStatus);
            case 7:
              // returning from await.
              response = $async$result;
              t1 = B.JSArray_methods.contains$1(allowStatus, response.statusCode);
              if (!t1) {
                isValidStatusCode = B.JSArray_methods.contains$1(B.List_cL3, response.statusCode);
                decode = A.StringUtils_tryToJson(response.result, type$.Map_String_dynamic);
                t1 = response.statusCode;
                t2 = decode == null && A.boolConversionCheck(isValidStatusCode) ? null : response.error$0();
                t1 = A.ApiProviderException$(t2, decode, t1);
                throw A.wrapException(t1);
              }
              t1 = $async$self._readServiceResponse$1$1(response, $T);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.ClientException) {
                e = t1;
                throw A.wrapException(A.ApiProviderException$(J.toString$0$(e), null, null));
              } else if (t1 instanceof A.ApiProviderException)
                throw $async$exception;
              else if (t1 instanceof A.TimeoutException)
                throw A.wrapException(B.ApiProviderException_api_http_timeout_error_null_null);
              else if (type$.FormatException._is(t1))
                throw A.wrapException(B.ApiProviderException_invalid_json_response_null_null);
              else if (t1 instanceof A.ArgumentError) {
                e0 = t1;
                throw A.wrapException(A.ApiProviderException$(J.toString$0$(e0.message), null, null));
              } else {
                e1 = t1;
                A.print("\x1b[33m" + ("error " + A.S(e1)) + "\x1b[0m");
                throw A.wrapException(B.ApiProviderException_api_unknown_error_null_null);
              }
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_onServiceException$1$2$allowStatus, $async$completer);
    },
    _detectTemplateType$1$1$responseType(responseType, $T) {
      if ($T._is(B.Type_dynamic_PLF))
        return B.HTTPResponseType_2;
      if ($T._is(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic)))
        return B.HTTPResponseType_3;
      if ($T._is(A._setArrayType([], type$.JSArray_Map_String_dynamic)))
        return B.HTTPResponseType_4;
      if ($T._is(A._setArrayType([], type$.JSArray_int)))
        return B.HTTPResponseType_0;
      if (B.Type_String_J2O === A.createRuntimeType($T))
        return B.HTTPResponseType_1;
      return B.HTTPResponseType_2;
    },
    _readServiceResponse$1$1(response, $T) {
      var t1, t2, exception;
      try {
        t1 = response.statusCode;
        if (t1 >= 200 && t1 < 300) {
          t2 = $T._as(response.result);
          return new A.ServiceSuccessRespose(t2, t1, B.ServiceResponseType_1, $T._eval$1("ServiceSuccessRespose<0>"));
        }
        t2 = A._asStringQ(response.result);
        return new A.ServiceErrorResponse(t2, t1, B.ServiceResponseType_0, $T._eval$1("ServiceErrorResponse<0>"));
      } catch (exception) {
        throw A.wrapException(B.ApiProviderException_invalid_request_type_null_null);
      }
    }
  };
  A.HTTPService_serviceRequest_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HTTPCallerResponse),
        $async$returnValue, $async$self = this, t3, t4, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = null;
              t2 = $async$self.request;
            case 3:
              // switch
              switch (t2.type.index) {
                case 1:
                  // goto case
                  $async$goto = 5;
                  break;
                case 0:
                  // goto case
                  $async$goto = 6;
                  break;
                default:
                  // goto after switch
                  $async$goto = 4;
                  break;
              }
              break;
            case 5:
              // case
              t2 = $.$get$HttpImpl__serviceCaller();
              t3 = $async$self.timeout;
              if (t3 == null)
                t3 = B.Duration_60000000;
              $async$goto = 7;
              return A._asyncAwait(t2.call$7$authenticated$headers$isolate$responseType$timeout$type$url($async$self.$this.provider.auth, $async$self.headers, false, $async$self.type, t3, B.HTTPRequestType_GET_0_get, $async$self.toUri), $async$call$0);
            case 7:
              // returning from await.
              t1 = $async$result;
              // goto after switch
              $async$goto = 4;
              break;
            case 6:
              // case
              t3 = $.$get$HttpImpl__serviceCaller();
              t4 = $async$self.timeout;
              if (t4 == null)
                t4 = B.Duration_60000000;
              $async$goto = 8;
              return A._asyncAwait(t3.call$8$authenticated$body$headers$isolate$responseType$timeout$type$url($async$self.$this.provider.auth, t2.body$0(), $async$self.headers, false, $async$self.type, t4, B.HTTPRequestType_POST_1_post, $async$self.toUri), $async$call$0);
            case 8:
              // returning from await.
              t1 = $async$result;
              // goto after switch
              $async$goto = 4;
              break;
            case 4:
              // after switch
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 293
  };
  A._HTTPService_Object_HttpImpl.prototype = {};
  A.ServiceProtocol.prototype = {
    _enumToString$0() {
      return "ServiceProtocol." + this._core$_name;
    },
    toString$0(_) {
      return "HTTP";
    },
    get$value() {
      return "HTTP";
    }
  };
  A.ApiRequest.prototype = {};
  A.APIServiceStatus.prototype = {
    _enumToString$0() {
      return "APIServiceStatus." + this._core$_name;
    }
  };
  A.MoneroHTTPService.prototype = {
    doRequest$1$2$timeout(params, timeout, $T) {
      return this.doRequest$body$MoneroHTTPService(params, timeout, $T, $T._eval$1("BaseServiceResponse<0>"));
    },
    doRequest$body$MoneroHTTPService(params, timeout, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, t1;
      var $async$doRequest$1$2$timeout = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = params.toUri$1($async$self.provider.httpNodeUri);
              $async$goto = 3;
              return A._asyncAwait($async$self.serviceRequest$1$4$allowStatus$timeout$uri(params, A._setArrayType([200], type$.JSArray_int), timeout, t1, $T), $async$doRequest$1$2$timeout);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$doRequest$1$2$timeout, $async$completer);
    },
    $isMoneroServiceProvider: 1
  };
  A.IntegerBalance.prototype = {
    _updateBalance$1(updateBalance) {
      var t1, t2, _this = this;
      if (updateBalance._isNegative)
        return;
      t1 = _this.__IntegerBalance_showDecimal_F;
      t1 === $ && A.throwLateFieldNI("showDecimal");
      t1 = A.BigRational_BigRational(updateBalance, null).$div(0, A.RetionalConst_fromDecimalNumber(_this.currencyDecimal)).toDecimal$1$digits(t1);
      _this.__IntegerBalance__price_A = t1;
      _this._balance = updateBalance;
      A.StrUtils_to3Digits(t1, ",");
      t1 = _this._balance;
      t2 = $.$get$_BigIntImpl_zero();
      t1.compareTo$1(0, t2);
      _this._balance.compareTo$1(0, t2);
    },
    toString$0(_) {
      var t1 = this.__IntegerBalance__price_A;
      t1 === $ && A.throwLateFieldNI("_price");
      return t1;
    },
    $eq(_, other) {
      var t1, t2, _this = this,
        _s11_ = "showDecimal";
      if (other == null)
        return false;
      if (_this !== other) {
        t1 = false;
        if (other instanceof A.IntegerBalance) {
          t2 = other._balance.compareTo$1(0, _this._balance);
          if (t2 === 0)
            if (other.currencyDecimal === _this.currencyDecimal) {
              t1 = other.__IntegerBalance_showDecimal_F;
              t1 === $ && A.throwLateFieldNI(_s11_);
              t2 = _this.__IntegerBalance_showDecimal_F;
              t2 === $ && A.throwLateFieldNI(_s11_);
              t2 = t1 === t2;
              t1 = t2;
            }
        }
      } else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      var t1 = this._balance.get$hashCode(0),
        t2 = B.JSInt_methods.get$hashCode(this.currencyDecimal),
        t3 = this.__IntegerBalance_showDecimal_F;
      t3 === $ && A.throwLateFieldNI("showDecimal");
      return t1 ^ t2 ^ B.JSInt_methods.get$hashCode(t3);
    }
  };
  A.NewAccountParamsType.prototype = {
    _enumToString$0() {
      return "NewAccountParamsType." + this._core$_name;
    }
  };
  A.NewAccountParamsType_fromTag_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_bytesEqual(type$.NewAccountParamsType._as(e).tag, this.tag);
    },
    $signature: 294
  };
  A.NewAccountParamsType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 1
  };
  A.BitcoinCashNewAddressParams.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.coin;
      t1 = A._setArrayType([_this.deriveIndex.toCbor$0(), _this.bitcoinAddressType.value, new A.CborStringValue(t1.get$proposal().get$specName() + "#" + t1.get$coinName()), _this.keyType.value], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_0, type$.int), new A.CborListValue(t1, false, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_gUw;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return this.deriveIndex;
    }
  };
  A.BitcoinCashMultiSigNewAddressParams.prototype = {
    toCbor$0() {
      var t1 = this.coin;
      t1 = A._setArrayType([this.bitcoinAddressType.value, this.multiSignatureAddress.toCbor$0(), new A.CborStringValue(t1.get$proposal().get$specName() + "#" + t1.get$coinName())], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_1, type$.int), new A.CborListValue(t1, false, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_POf;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return B.C_MultiSigAddressIndex;
    }
  };
  A.BitcoinNewAddressParams.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.coin;
      t1 = A._setArrayType([_this.deriveIndex.toCbor$0(), _this.bitcoinAddressType.value, new A.CborStringValue(t1.get$proposal().get$specName() + "#" + t1.get$coinName()), _this.keyType.value], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_2, type$.int), new A.CborListValue(t1, false, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_Bzp;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return this.deriveIndex;
    }
  };
  A.BitcoinMultiSigNewAddressParams.prototype = {
    toCbor$0() {
      var t1 = this.coin;
      t1 = A._setArrayType([this.bitcoinAddressType.value, this.multiSignatureAddress.toCbor$0(), new A.CborStringValue(t1.get$proposal().get$specName() + "#" + t1.get$coinName())], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_4, type$.int), new A.CborListValue(t1, false, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_Dx1;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return B.C_MultiSigAddressIndex;
    }
  };
  A.CardanoNewAddressParams.prototype = {
    toCbor$0() {
      var t3, t4, t5, t6, _this = this,
        t1 = _this.deriveIndex.toCbor$0(),
        t2 = _this.rewardKeyIndex;
      t2 = t2 == null ? null : t2.toCbor$0();
      t3 = _this.addressDetails;
      t3 = t3 == null ? null : t3.toCbor$0();
      t4 = _this.customHdPathKey;
      if (t4 == null)
        t4 = B.C_CborNullValue;
      else {
        A.BytesUtils_validateListOfBytes(t4);
        t4 = new A.CborBytesValue(A.List_List$unmodifiable(t4, type$.int));
      }
      t5 = _this.coin;
      t6 = t5.get$proposal().get$specName();
      t5 = t5.get$coinName();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_5, type$.int), new A.CborListValue([_this.addressType.header, t1, t2, t3, _this.customHdPath, t4, new A.CborStringValue(t6 + "#" + t5)], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_wbL;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return this.deriveIndex;
    }
  };
  A.CardanoNewAddressParams_CardanoNewAddressParams$deserialize_closure.prototype = {
    call$1(e) {
      return A.Bip32AddressIndex_Bip32AddressIndex$fromCborBytesOrObject(e);
    },
    $signature: 295
  };
  A.CardanoNewAddressParams_CardanoNewAddressParams$deserialize_closure0.prototype = {
    call$1(e) {
      var cbor = A.CborSerializable_decodeCborTags(null, e, B.List_200_197_100, type$.CborListValue_dynamic),
        t1 = A.ExtractCborList_elementAs(cbor, 0, type$.List_int),
        t2 = A.ADAAddressType_fromHeader(A.ExtractCborList_elementAs(cbor, 1, type$.nullable_int)),
        t3 = type$.nullable_List_int,
        t4 = A.ExtractCborList_elementAs(cbor, 2, t3),
        t5 = A.ExtractCborList_elementAs(cbor, 3, t3);
      t3 = A.ExtractCborList_elementAs(cbor, 4, t3);
      return A.CardanoAddrDetails$_(t2, t5, A.ExtractCborList_elementAs(cbor, 5, type$.nullable_String), t3, t1, t4);
    },
    $signature: 296
  };
  A.CosmosNewAddressParams.prototype = {
    toCbor$0() {
      var t1 = this.coin;
      t1 = A._setArrayType([this.deriveIndex.toCbor$0(), new A.CborStringValue(t1.get$proposal().get$specName() + "#" + t1.get$coinName()), this.algorithm._core$_name], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_6, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_ytQ;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return this.deriveIndex;
    }
  };
  A.EthereumNewAddressParams.prototype = {
    toCbor$0() {
      var t1 = this.coin;
      t1 = A._setArrayType([this.deriveIndex.toCbor$0(), new A.CborStringValue(t1.get$proposal().get$specName() + "#" + t1.get$coinName())], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_7, type$.int), new A.CborListValue(t1, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_4Y4;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return this.deriveIndex;
    }
  };
  A.MoneroNewAddressParams.prototype = {
    toCbor$0() {
      var t4, _this = this,
        t1 = _this.deriveIndex.toCbor$0(),
        t2 = _this.coin,
        t3 = t2.get$proposal().get$specName();
      t2 = t2.get$coinName();
      t4 = _this.addrDetails;
      t4 = t4 == null ? null : t4.toCbor$0();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_17, type$.int), new A.CborListValue([t1, _this.major, _this.minor, new A.CborStringValue(t3 + "#" + t2), t4, _this.network.name], false, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_kvD;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return this.deriveIndex;
    }
  };
  A.MoneroNewAddressParams_MoneroNewAddressParams$deserialize_closure.prototype = {
    call$1(e) {
      return A.MoneroViewAccountDetails_MoneroViewAccountDetails$deserialize(null, e);
    },
    $signature: 297
  };
  A.RippleNewAddressParams.prototype = {
    toCbor$0() {
      var t1 = this.deriveIndex.toCbor$0(),
        t2 = this.coin,
        t3 = t2.get$proposal().get$specName();
      t2 = t2.get$coinName();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_13, type$.int), new A.CborListValue([t1, this.tag, new A.CborStringValue(t3 + "#" + t2)], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_86y;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return this.deriveIndex;
    }
  };
  A.RippleMultiSigNewAddressParams.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.multiSigAccount.toCbor$0(),
        t2 = _this.coin,
        t3 = t2.get$proposal().get$specName();
      t2 = t2.get$coinName();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_14, type$.int), new A.CborListValue([_this.masterAddress.address, t1, _this.tag, new A.CborStringValue(t3 + "#" + t2)], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_7pv;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return B.C_MultiSigAddressIndex;
    }
  };
  A.SolanaNewAddressParams.prototype = {
    toCbor$0() {
      var t1 = this.coin;
      t1 = A._setArrayType([this.deriveIndex.toCbor$0(), new A.CborStringValue(t1.get$proposal().get$specName() + "#" + t1.get$coinName())], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_8, type$.int), new A.CborListValue(t1, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_EBN;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return this.deriveIndex;
    }
  };
  A.StellarNewAddressParams.prototype = {
    toCbor$0() {
      var t1 = this.deriveIndex.toCbor$0(),
        t2 = this.coin,
        t3 = t2.get$proposal().get$specName();
      t2 = t2.get$coinName();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_15, type$.int), new A.CborListValue([t1, this.id, new A.CborStringValue(t3 + "#" + t2)], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_2Iq;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return this.deriveIndex;
    }
  };
  A.StellarMultiSigNewAddressParams.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.multiSigAccount.toCbor$0(),
        t2 = _this.coin,
        t3 = t2.get$proposal().get$specName();
      t2 = t2.get$coinName();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_16, type$.int), new A.CborListValue([_this.masterAddress.baseAddress, t1, _this.id, new A.CborStringValue(t3 + "#" + t2)], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_Jyc;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return B.C_MultiSigAddressIndex;
    }
  };
  A.SubstrateNewAddressParams.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.deriveIndex.toCbor$0()], type$.JSArray_CborTagValue_dynamic);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_9, type$.int), new A.CborListValue(t1, true, type$.CborListValue_CborTagValue_dynamic), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_INd;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return this.deriveIndex;
    }
  };
  A.TonNewAddressParams.prototype = {
    toCbor$0() {
      var t1 = this.coin;
      t1 = A._setArrayType([this.deriveIndex.toCbor$0(), this.context.toCbor$0(), new A.CborStringValue(t1.get$proposal().get$specName() + "#" + t1.get$coinName())], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_12, type$.int), new A.CborListValue(t1, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_i7B;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return this.deriveIndex;
    }
  };
  A.TronNewAddressParams.prototype = {
    toCbor$0() {
      var t1 = this.coin;
      t1 = A._setArrayType([this.deriveIndex.toCbor$0(), new A.CborStringValue(t1.get$proposal().get$specName() + "#" + t1.get$coinName())], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_10, type$.int), new A.CborListValue(t1, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_gg4;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return this.deriveIndex;
    }
  };
  A.TronMultisigNewAddressParams.prototype = {
    toCbor$0() {
      var t1 = this.coin;
      t1 = A._setArrayType([this.masterAddress.toAddress$0(), this.multiSigAccount.toCbor$0(), new A.CborStringValue(t1.get$proposal().get$specName() + "#" + t1.get$coinName())], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_11, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$type() {
      return B.NewAccountParamsType_AWi;
    },
    $isNewAccountParams: 1,
    get$deriveIndex() {
      return B.C_MultiSigAddressIndex;
    }
  };
  A.TronMultisigNewAddressParams_TronMultisigNewAddressParams$deserialize_closure.prototype = {
    call$1(e) {
      return A.TronMultiSignatureAddress_TronMultiSignatureAddress$fromCborBytesOrObject(e);
    },
    $signature: 298
  };
  A.BitcoinMultiSigSignerDetais.prototype = {
    toCbor$0() {
      var t2,
        t1 = A.BytesUtils_fromHexString(this.publicKey);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A._setArrayType([new A.CborBytesValue(A.List_List$unmodifiable(t1, t2)), this._wieght, this.keyIndex.toCbor$0()], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_Cpl2, t2), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.publicKey, this._wieght, this.keyIndex];
    }
  };
  A.BitcoinMultiSignatureAddress.prototype = {
    toCbor$0() {
      var t1 = this.signers,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborTagValue<@>>"),
        t4 = this.multiSigScript.script;
      t4 = A._setArrayType([new A.CborListValue(A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("CborTagValue<@>(1)")._as(new A.BitcoinMultiSignatureAddress_toCbor_closure()), t3), true, t3._eval$1("ListIterable.E")), true, type$.CborListValue_CborTagValue_dynamic), this.threshold, new A.CborListValue(new A.CastList(t4, A._arrayInstanceType(t4)._eval$1("CastList<1,String>")), true, type$.CborListValue_String)], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_192_1_0, type$.int), new A.CborListValue(t4, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.BitcoinMultiSignatureAddress_toCbor_closure.prototype = {
    call$1(e) {
      return type$.BitcoinMultiSigSignerDetais._as(e).toCbor$0();
    },
    $signature: 299
  };
  A.BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      var cbor = A.CborSerializable_decodeCborTags(null, type$.nullable_CborObject._as(e), B.List_Cpl2, type$.CborListValue_dynamic),
        publicKey = A.ExtractCborList_elementAt(cbor, 0, type$.List_int),
        weight = A.ExtractCborList_elementAt(cbor, 1, type$.int),
        keyIndex = A.Bip32AddressIndex_Bip32AddressIndex$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 2));
      if (!A.IPublicKey_isValidBytes(publicKey, B.EllipticCurveTypes_secp256k1))
        A.throwExpression(B.WalletException_invalid_account_details_null);
      if (weight < 1 || weight > 16)
        A.throwExpression(B.WalletException_invalid_account_details_null);
      return new A.BitcoinMultiSigSignerDetais(A.BytesUtils_toHexString(publicKey, true, null), weight, keyIndex);
    },
    $signature: 300
  };
  A.BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject_closure0.prototype = {
    call$1(e) {
      return type$.CborStringValue._as(e).value;
    },
    $signature: 45
  };
  A.BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject_closure1.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 13
  };
  A._BitcoinMultiSigSignerDetais_Object_Equatable.prototype = {};
  A._BitcoinMultiSigSignerDetais_Object_Equatable_CborSerializable.prototype = {};
  A._BitcoinMultiSignatureAddress_Object_CborSerializable.prototype = {};
  A.StellarMultiSigSignerDetails.prototype = {
    toCbor$0() {
      var t2,
        t1 = A.BytesUtils_fromHexString(this.publicKey);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A._setArrayType([new A.CborBytesValue(A.List_List$unmodifiable(t1, t2)), this.weight, this.keyIndex.toCbor$0()], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_Cpl, t2), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.publicKey, this.weight, this.keyIndex];
    }
  };
  A.StellarMultiSignatureAddress.prototype = {
    toCbor$0() {
      var t1 = this.signers,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t3 = A._setArrayType([new A.CborListValue(A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("CborTagValue<@>(1)")._as(new A.StellarMultiSignatureAddress_toCbor_closure()), t3), true, t3._eval$1("ListIterable.E")), true, type$.CborListValue_CborTagValue_dynamic), this.threshold, new A.CborBoleanValue(this.isRegular)], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_201_1_0, type$.int), new A.CborListValue(t3, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.threshold, this.signers];
    }
  };
  A.StellarMultiSignatureAddress_toCbor_closure.prototype = {
    call$1(e) {
      return type$.StellarMultiSigSignerDetails._as(e).toCbor$0();
    },
    $signature: 301
  };
  A.StellarMultiSignatureAddress_StellarMultiSignatureAddress$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      var cbor = A.CborSerializable_decodeCborTags(null, type$.nullable_CborObject._as(e), B.List_Cpl, type$.CborListValue_dynamic),
        publicKey = A.ExtractCborList_elementAt(cbor, 0, type$.List_int),
        weight = A.ExtractCborList_elementAt(cbor, 1, type$.int),
        keyIndex = A.Bip32AddressIndex_Bip32AddressIndex$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 2));
      return new A.StellarMultiSigSignerDetails(A.BytesUtils_toHexString(publicKey, true, null), weight, keyIndex);
    },
    $signature: 302
  };
  A._StellarMultiSigSignerDetails_Object_Equatable.prototype = {};
  A._StellarMultiSigSignerDetails_Object_Equatable_CborSerializable.prototype = {};
  A._StellarMultiSignatureAddress_Object_Equatable.prototype = {};
  A._StellarMultiSignatureAddress_Object_Equatable_CborSerializable.prototype = {};
  A.TronMultiSigSignerDetais.prototype = {
    toCbor$0() {
      var t2,
        t1 = A.BytesUtils_fromHexString(this.publicKey);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A._setArrayType([new A.CborBytesValue(A.List_List$unmodifiable(t1, t2)), this.weight, this.keyIndex.toCbor$0()], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_Cpl1, t2), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.publicKey, this.weight, this.keyIndex];
    }
  };
  A.TronMultiSignatureAddress.prototype = {
    toCbor$0() {
      var t1 = this.signers,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t3 = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("CborTagValue<@>(1)")._as(new A.TronMultiSignatureAddress_toCbor_closure()), t3), true, t3._eval$1("ListIterable.E"));
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_195_1_0, type$.int), new A.CborListValue([new A.CborListValue(t3, true, type$.CborListValue_CborTagValue_dynamic), this.threshold, this.permissionID], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.threshold, this.signers, this.permissionID];
    }
  };
  A.TronMultiSignatureAddress_toCbor_closure.prototype = {
    call$1(e) {
      return type$.TronMultiSigSignerDetais._as(e).toCbor$0();
    },
    $signature: 303
  };
  A.TronMultiSignatureAddress_TronMultiSignatureAddress$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      var cbor = A.CborSerializable_decodeCborTags(null, type$.nullable_CborObject._as(e), B.List_Cpl1, type$.CborListValue_dynamic),
        publicKey = A.ExtractCborList_elementAt(cbor, 0, type$.List_int),
        weight = A.ExtractCborList_elementAt(cbor, 1, type$.BigInt),
        keyIndex = A.Bip32AddressIndex_Bip32AddressIndex$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 2));
      return new A.TronMultiSigSignerDetais(A.BytesUtils_toHexString(publicKey, true, null), weight, keyIndex);
    },
    $signature: 304
  };
  A._TronMultiSigSignerDetais_Object_Equatable.prototype = {};
  A._TronMultiSigSignerDetais_Object_Equatable_CborSerializable.prototype = {};
  A._TronMultiSignatureAddress_Object_Equatable.prototype = {};
  A._TronMultiSignatureAddress_Object_Equatable_CborSerializable.prototype = {};
  A.RippleMultiSigSignerDetails.prototype = {
    toCbor$0() {
      var t2,
        t1 = A.BytesUtils_fromHexString(this.publicKey);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A._setArrayType([new A.CborBytesValue(A.List_List$unmodifiable(t1, t2)), this.weight, this.keyIndex.toCbor$0()], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_Cpl0, t2), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.publicKey, this.weight, this.keyIndex];
    }
  };
  A.RippleMultiSignatureAddress.prototype = {
    toCbor$0() {
      var t1 = this.signers,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t3 = A._setArrayType([new A.CborListValue(A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("CborTagValue<@>(1)")._as(new A.RippleMultiSignatureAddress_toCbor_closure()), t3), true, t3._eval$1("ListIterable.E")), true, type$.CborListValue_CborTagValue_dynamic), this.threshold, new A.CborBoleanValue(this.isRegular)], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_193_1_0, type$.int), new A.CborListValue(t3, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.threshold, this.signers];
    }
  };
  A.RippleMultiSignatureAddress_toCbor_closure.prototype = {
    call$1(e) {
      return type$.RippleMultiSigSignerDetails._as(e).toCbor$0();
    },
    $signature: 305
  };
  A.RippleMultiSignatureAddress_RippleMultiSignatureAddress$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      var cbor = A.CborSerializable_decodeCborTags(null, type$.nullable_CborObject._as(e), B.List_Cpl0, type$.CborListValue_dynamic),
        publicKey = A.ExtractCborList_elementAt(cbor, 0, type$.List_int),
        weight = A.ExtractCborList_elementAt(cbor, 1, type$.int),
        keyIndex = A.Bip32AddressIndex_Bip32AddressIndex$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 2));
      return new A.RippleMultiSigSignerDetails(A.BytesUtils_toHexString(publicKey, true, null), weight, keyIndex);
    },
    $signature: 306
  };
  A._RippleMultiSigSignerDetails_Object_Equatable.prototype = {};
  A._RippleMultiSigSignerDetails_Object_Equatable_CborSerializable.prototype = {};
  A._RippleMultiSignatureAddress_Object_Equatable.prototype = {};
  A._RippleMultiSignatureAddress_Object_Equatable_CborSerializable.prototype = {};
  A.CardanoAddrDetails.prototype = {
    toCbor$0() {
      var t2, t3, t4, t5, t6, _this = this,
        t1 = _this.publicKey;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = _this.stakePubkey;
      if (t3 == null)
        t3 = B.C_CborNullValue;
      else {
        A.BytesUtils_validateListOfBytes(t3);
        t3 = new A.CborBytesValue(A.List_List$unmodifiable(t3, t2));
      }
      t4 = _this.chainCode;
      if (t4 == null)
        t4 = B.C_CborNullValue;
      else {
        A.BytesUtils_validateListOfBytes(t4);
        t4 = new A.CborBytesValue(A.List_List$unmodifiable(t4, t2));
      }
      t5 = _this.hdPathKey;
      if (t5 == null)
        t5 = B.C_CborNullValue;
      else {
        A.BytesUtils_validateListOfBytes(t5);
        t5 = new A.CborBytesValue(A.List_List$unmodifiable(t5, t2));
      }
      t6 = _this.hdPath;
      t6 = t6 == null ? B.C_CborNullValue : new A.CborStringValue(t6);
      t6 = A._setArrayType([new A.CborBytesValue(t1), new A.CborIntValue(_this.addressType.header), t3, t4, t5, t6], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_197_100, t2), new A.CborListValue(t6, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      var result, _this = this,
        value = _this.__CardanoAddrDetails_hdPathKeyHex_FI;
      if (value === $) {
        result = A.BytesUtils_tryToHexString(_this.hdPathKey);
        _this.__CardanoAddrDetails_hdPathKeyHex_FI !== $ && A.throwLateFieldADI("hdPathKeyHex");
        _this.__CardanoAddrDetails_hdPathKeyHex_FI = result;
        value = result;
      }
      return [_this.publicKey, _this.hdPath, value, _this.chainCode, _this.addressType];
    }
  };
  A._CardanoAddrDetails_Object_Equatable.prototype = {};
  A._CardanoAddrDetails_Object_Equatable_CborSerializable.prototype = {};
  A.MoneroBlockTrackingStatus.prototype = {
    _enumToString$0() {
      return "MoneroBlockTrackingStatus." + this._core$_name;
    },
    get$value() {
      return this.value;
    }
  };
  A.MoneroBlockTrackingStatus_fromValue_closure.prototype = {
    call$1(e) {
      return type$.MoneroBlockTrackingStatus._as(e).value === this.value;
    },
    $signature: 307
  };
  A.MoneroBlockTrackingStatus_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 1
  };
  A.MoneroParsingBlockStatus.prototype = {
    _enumToString$0() {
      return "MoneroParsingBlockStatus." + this._core$_name;
    },
    get$value() {
      return this.value;
    }
  };
  A.MoneroBlockTrackingPossition.prototype = {
    updateStatus$1($status) {
      return A.MoneroBlockTrackingPossition_MoneroBlockTrackingPossition(this.blockHeight, this.endHeight, this.startHeight, $status);
    },
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.startHeight, _this.endHeight, _this.status.value, _this.blockHeight], type$.JSArray_int);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_202_15, type$.int), new A.CborListValue(t1, true, type$.CborListValue_int), type$.CborTagValue_dynamic);
    },
    toString$0(_) {
      return A.MapBase_mapToString(A.LinkedHashMap_LinkedHashMap$_literal(["start", this.startHeight, "end", this.endHeight, "status", this.status._core$_name], type$.String, type$.Object));
    },
    get$variabels() {
      return [this.startHeight, this.endHeight];
    }
  };
  A.MoneroAccountBlocksTrackerStatus.prototype = {
    _enumToString$0() {
      return "MoneroAccountBlocksTrackerStatus." + this._core$_name;
    },
    get$value() {
      return this.value;
    }
  };
  A.MoneroAccountBlocksTrackerStatus_fromValue_closure.prototype = {
    call$1(e) {
      return type$.MoneroAccountBlocksTrackerStatus._as(e).value === this.value;
    },
    $signature: 308
  };
  A.MoneroAccountBlocksTrackerStatus_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 1
  };
  A.MoneroAccountBlocksTracker.prototype = {
    getAccountsKeys$0() {
      return A.List_List$generate(this._accounts._collection$_source._collection$_length, new A.MoneroAccountBlocksTracker_getAccountsKeys_closure(this), type$.MoneroAccountKeys);
    },
    toString$0(_) {
      var _this = this;
      return A.MapBase_mapToString(A.LinkedHashMap_LinkedHashMap$_literal(["offsets", _this._currentOffsets, "error", _this._failedOffsets, "height", _this._currentHeight, "start_height", _this._startHeight, "end_height", _this._endHeight], type$.String, type$.Object));
    }
  };
  A.MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize_closure.prototype = {
    call$1(e) {
      return A.MoneroSyncAccountsInfos_MoneroSyncAccountsInfos$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 309
  };
  A.MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize_closure0.prototype = {
    call$1(e) {
      return A.MoneroBlockTrackingPossition_MoneroBlockTrackingPossition$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 52
  };
  A.MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize_closure1.prototype = {
    call$1(e) {
      return A.MoneroBlockTrackingPossition_MoneroBlockTrackingPossition$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 52
  };
  A.MoneroAccountBlocksTracker_getAccountsKeys_closure.prototype = {
    call$1(i) {
      return this.$this._accounts.elementAt$1(0, i).getAccountKeys$0();
    },
    $signature: 111
  };
  A.MoneroViewPrimaryAccountDetails.prototype = {
    toCbor$0() {
      var t2, t3,
        t1 = this.viewPrivateKey.privateKey.key;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = this.spendPublicKey.publicKey._encoded;
      A.BytesUtils_validateListOfBytes(t3);
      t3 = A._setArrayType([new A.CborBytesValue(t1), new A.CborBytesValue(A.List_List$unmodifiable(t3, t2)), this.network.index], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_202_17, t2), t3, type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.viewPrivateKey, this.spendPublicKey, this.network];
    },
    toString$0(_) {
      return this.primaryAddress.address;
    }
  };
  A.MoneroViewAccountDetails.prototype = {
    toCbor$0() {
      var t1 = this.index;
      t1 = A._setArrayType([this.viewKey.toCbor$0(), t1.major, t1.minor], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_12_17, type$.int), t1, type$.CborTagValue_dynamic);
    },
    get$variabels() {
      var t1 = this.index;
      return [this.viewKey, t1.major, t1.minor];
    }
  };
  A.MoneroTxInfo.prototype = {
    toTx$0() {
      return A.MethodUtils_nullOnException(new A.MoneroTxInfo_toTx_closure(this), type$.MoneroTransaction);
    },
    toCbor$0() {
      var t2, t3, _this = this,
        t1 = new A.CodeUnits(_this.txId);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = new A.CodeUnits(_this.txHex);
      A.BytesUtils_validateListOfBytes(t3);
      t3 = A._setArrayType([new A.CborBytesValue(t1), new A.CborBytesValue(A.List_List$unmodifiable(t3, t2)), new A.CborListValue(_this.globalIndices, true, type$.CborListValue_BigInt), _this.confirmations], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_202_8, t2), t3, type$.CborTagValue_dynamic);
    }
  };
  A.MoneroTxInfo_toTx_closure.prototype = {
    call$0() {
      return A.MoneroTransaction_MoneroTransaction$deserialize(A.BytesUtils_fromHexString(this.$this.txHex));
    },
    $signature: 311
  };
  A.MoneroTxInfo_MoneroTxInfo$deserialize_closure.prototype = {
    call$1(e) {
      return type$.CborBigIntValue._as(e).value;
    },
    $signature: 312
  };
  A.MoneroUnlockPaymentRequestStatus.prototype = {
    _enumToString$0() {
      return "MoneroUnlockPaymentRequestStatus." + this._core$_name;
    },
    get$value() {
      return this.value;
    }
  };
  A.MoneroUnlockPaymentRequestOutputStatus.prototype = {
    _enumToString$0() {
      return "MoneroUnlockPaymentRequestOutputStatus." + this._core$_name;
    },
    get$value() {
      return this.value;
    }
  };
  A.MoneroOutputDetails.prototype = {
    toCbor$0() {
      var t2, t3, t4, _this = this,
        t1 = new A.CodeUnits(_this.txId);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = new A.CodeUnits(_this.keyImage);
      A.BytesUtils_validateListOfBytes(t3);
      t3 = A.List_List$unmodifiable(t3, t2);
      t4 = _this.lockedOutput.serialize$0();
      A.BytesUtils_validateListOfBytes(t4);
      t4 = A.List_List$unmodifiable(t4, t2);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_202_7, t2), new A.CborListValue([new A.CborBytesValue(t1), new A.CborBytesValue(t3), _this._confirmations, _this._height, _this._account_related$_status.value, new A.CborBytesValue(t4), _this._globalIndex], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.keyImage, this.lockedOutput.realIndex];
    },
    toString$0(_) {
      return "UTXO: " + this.txId;
    }
  };
  A.MoneroUnlockedPaymentRequestDetails.prototype = {
    toCbor$0() {
      var t2, t3,
        t1 = this.output;
      t1 = t1 == null ? null : t1.toCbor$0();
      t2 = new A.CodeUnits(this.txID);
      A.BytesUtils_validateListOfBytes(t2);
      t3 = type$.int;
      t2 = A.List_List$unmodifiable(t2, t3);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_202_6, t3), new A.CborListValue([t1, this.status.value, new A.CborBytesValue(t2)], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.MoneroProcessTxesResponse.prototype = {
    toCbor$0() {
      var t1 = this.responses,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t3 = A._setArrayType([new A.CborListValue(A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("CborTagValue<@>(1)")._as(new A.MoneroProcessTxesResponse_toCbor_closure()), t3), true, t3._eval$1("ListIterable.E")), true, type$.CborListValue_CborTagValue_dynamic), this.address.toCbor$0()], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_202_21, type$.int), new A.CborListValue(t3, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    }
  };
  A.MoneroProcessTxesResponse_toCbor_closure.prototype = {
    call$1(e) {
      return type$.MoneroUnlockedPaymentRequestDetails._as(e).toCbor$0();
    },
    $signature: 313
  };
  A.MoneroBatchProcessTxesResponse.prototype = {
    toCbor$0() {
      var t1 = this.payments,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t3 = A._setArrayType([new A.CborListValue(A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("CborTagValue<@>(1)")._as(new A.MoneroBatchProcessTxesResponse_toCbor_closure()), t3), true, t3._eval$1("ListIterable.E")), true, type$.CborListValue_CborTagValue_dynamic)], type$.JSArray_CborListValue_CborTagValue_dynamic);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_202_22, type$.int), new A.CborListValue(t3, true, type$.CborListValue_CborListValue_CborTagValue_dynamic), type$.CborTagValue_dynamic);
    }
  };
  A.MoneroBatchProcessTxesResponse_toCbor_closure.prototype = {
    call$1(e) {
      return type$.MoneroProcessTxesResponse._as(e).toCbor$0();
    },
    $signature: 314
  };
  A.MoneroProcessTxIdsRequest.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.txes,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborTagValue<@>>"),
        t4 = _this.keyIndexes,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,CborBytesValue>");
      t6 = A._setArrayType([new A.CborListValue(A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("CborTagValue<@>(1)")._as(new A.MoneroProcessTxIdsRequest_toCbor_closure()), t3), true, t3._eval$1("ListIterable.E")), true, type$.CborListValue_CborTagValue_dynamic), _this.primaryAddress.toCbor$0(), new A.CborListValue(A.List_List$of(new A.MappedListIterable(t4, t5._eval$1("CborBytesValue(1)")._as(new A.MoneroProcessTxIdsRequest_toCbor_closure0()), t6), true, t6._eval$1("ListIterable.E")), true, type$.CborListValue_CborBytesValue), _this.index.toCbor$0()], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_202_20, type$.int), new A.CborListValue(t6, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    }
  };
  A.MoneroProcessTxIdsRequest_MoneroProcessTxIdsRequest$deserialize_closure.prototype = {
    call$1(e) {
      return A.MoneroTxInfo_MoneroTxInfo$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 315
  };
  A.MoneroProcessTxIdsRequest_MoneroProcessTxIdsRequest$deserialize_closure0.prototype = {
    call$1(e) {
      return A.MoneroAccountIndex_MoneroAccountIndex$deserialize(type$.CborBytesValue._as(e).value);
    },
    $signature: 316
  };
  A.MoneroProcessTxIdsRequest_toCbor_closure.prototype = {
    call$1(e) {
      return type$.MoneroTxInfo._as(e).toCbor$0();
    },
    $signature: 317
  };
  A.MoneroProcessTxIdsRequest_toCbor_closure0.prototype = {
    call$1(e) {
      var t1 = type$.MoneroAccountIndex._as(e).serialize$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
    },
    $signature: 112
  };
  A.MoneroSyncAccountsInfos.prototype = {
    getAccountKeys$0() {
      var t1 = this.primaryAccount,
        t2 = this._indexes,
        t3 = t2.$ti,
        t4 = t3._eval$1("EfficientLengthMappedIterable<1,MoneroAccountIndex>");
      return A.MoneroAccountKeys_MoneroAccountKeys(t1.account, A.List_List$of(new A.EfficientLengthMappedIterable(t2, t3._eval$1("MoneroAccountIndex(1)")._as(new A.MoneroSyncAccountsInfos_getAccountKeys_closure()), t4), true, t4._eval$1("Iterable.E")), t1.network);
    },
    toCbor$0() {
      var t5,
        t1 = this.primaryAccount.toCbor$0(),
        t2 = this._indexes,
        t3 = t2.$ti,
        t4 = t3._eval$1("EfficientLengthMappedIterable<1,CborTagValue<@>>");
      t4 = A.List_List$of(new A.EfficientLengthMappedIterable(t2, t3._eval$1("CborTagValue<@>(1)")._as(new A.MoneroSyncAccountsInfos_toCbor_closure()), t4), true, t4._eval$1("Iterable.E"));
      t3 = this._pendingTxes;
      t2 = t3.$ti;
      t5 = t2._eval$1("EfficientLengthMappedIterable<1,CborStringValue>");
      t5 = A._setArrayType([t1, new A.CborListValue(t4, true, type$.CborListValue_CborTagValue_dynamic), new A.CborListValue(A.List_List$of(new A.EfficientLengthMappedIterable(t3, t2._eval$1("CborStringValue(1)")._as(new A.MoneroSyncAccountsInfos_toCbor_closure0()), t5), true, t5._eval$1("Iterable.E")), true, type$.CborListValue_CborStringValue)], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_202_21, type$.int), new A.CborListValue(t5, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.primaryAccount];
    },
    toString$0(_) {
      return A.MapBase_mapToString(A.LinkedHashMap_LinkedHashMap$_literal(["index", A.Iterable_iterableToFullString(this._indexes, "{", "}"), "address", this.primaryAccount.primaryAddress, "pending_txes", this._pendingTxes], type$.String, type$.Object));
    },
    set$_pendingTxes(_pendingTxes) {
      this._pendingTxes = type$.Set_String._as(_pendingTxes);
    }
  };
  A.MoneroSyncAccountsInfos_getAccountKeys_closure.prototype = {
    call$1(e) {
      return type$.MoneroSyncAccountIndexInfo._as(e).index;
    },
    $signature: 319
  };
  A.MoneroSyncAccountsInfos_MoneroSyncAccountsInfos$deserialize_closure.prototype = {
    call$1(e) {
      var values = A.CborSerializable_cborTagValue(null, null, type$.CborTagValue_dynamic._as(e), B.List_200_202_31, type$.CborListValue_dynamic);
      return new A.MoneroSyncAccountIndexInfo(A.MoneroAccountIndex_MoneroAccountIndex$deserialize(A.ExtractCborList_elementAs(values, 0, type$.List_int)), A.ExtractCborList_elementAs(values, 1, type$.int));
    },
    $signature: 320
  };
  A.MoneroSyncAccountsInfos_MoneroSyncAccountsInfos$deserialize_closure0.prototype = {
    call$1(e) {
      return type$.CborStringValue._as(e).value;
    },
    $signature: 45
  };
  A.MoneroSyncAccountsInfos_toCbor_closure.prototype = {
    call$1(e) {
      return type$.MoneroSyncAccountIndexInfo._as(e).toCbor$0();
    },
    $signature: 321
  };
  A.MoneroSyncAccountsInfos_toCbor_closure0.prototype = {
    call$1(e) {
      return new A.CborStringValue(A._asString(e));
    },
    $signature: 322
  };
  A.MoneroSyncAccountIndexInfo.prototype = {
    toCbor$0() {
      var t2,
        t1 = this.index.serialize$0();
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A._setArrayType([new A.CborBytesValue(A.List_List$unmodifiable(t1, t2)), this.startHeight], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_202_31, t2), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.index];
    },
    toString$0(_) {
      return A.MapBase_mapToString(A.LinkedHashMap_LinkedHashMap$_literal(["index", this.index.toString$0(0), "startHeight", this.startHeight], type$.String, type$.Object));
    }
  };
  A.MoneroSyncBlockResponseType.prototype = {
    _enumToString$0() {
      return "MoneroSyncBlockResponseType." + this._core$_name;
    }
  };
  A.MoneroSyncBlocksResponse.prototype = {};
  A.MoneroBlocksInfoResponse.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.totalBlock, _this.totalTxes, _this.status.value], type$.JSArray_int);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_int), type$.CborTagValue_dynamic);
    },
    toString$0(_) {
      var _this = this;
      return A.MapBase_mapToString(A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type._core$_name, "totalBlock", _this.totalBlock, "totalTxes", _this.totalTxes, "status", _this.status._core$_name], type$.String, type$.Object));
    }
  };
  A.MoneroSyncAccountResponse.prototype = {
    toCbor$0() {
      var t1 = this.txIds,
        t2 = t1.$ti,
        t3 = t2._eval$1("EfficientLengthMappedIterable<1,CborTagValue<@>>");
      t3 = A._setArrayType([new A.CborListValue(A.List_List$of(new A.EfficientLengthMappedIterable(t1, t2._eval$1("CborTagValue<@>(1)")._as(new A.MoneroSyncAccountResponse_toCbor_closure()), t3), true, t3._eval$1("Iterable.E")), true, type$.CborListValue_CborTagValue_dynamic), this.blockPosition.toCbor$0()], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(this.type.tag, type$.int), new A.CborListValue(t3, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    },
    toString$0(_) {
      return A.MapBase_mapToString(A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._core$_name, "blockPosition", this.blockPosition, "txids", this.txIds], type$.String, type$.Object));
    }
  };
  A.MoneroSyncAccountResponse_toCbor_closure.prototype = {
    call$1(e) {
      return type$.MoneroSyncAccountsInfos._as(e).toCbor$0();
    },
    $signature: 323
  };
  A.MoneroSyncBlockRequestType.prototype = {
    _enumToString$0() {
      return "MoneroSyncBlockRequestType." + this._core$_name;
    }
  };
  A.MoneroSyncBlockRequestType_fromTag_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_bytesEqual(type$.MoneroSyncBlockRequestType._as(e).tag, this.tag);
    },
    $signature: 324
  };
  A.MoneroSyncBlockRequestType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 1
  };
  A.MoneroSyncBlocksRequest.prototype = {
    cast$1$0(_, $T) {
      A.checkTypeBound($T, type$.MoneroSyncBlocksRequest, "T", "cast");
      if (!$T._is(this))
        throw A.wrapException(A.WalletException$invalidArgruments(A._setArrayType([A.createRuntimeType($T).toString$0(0), A.getRuntimeTypeOfDartObject(this).toString$0(0)], type$.JSArray_String)));
      return $T._as(this);
    }
  };
  A.MoneroSyncTrackBlocksRequest.prototype = {
    toString$0(_) {
      return A.MapBase_mapToString(A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._core$_name, "blockPossitions", this.blockPossitions], type$.String, type$.Object));
    }
  };
  A.MoneroSyncTrackBlocksRequest_MoneroSyncTrackBlocksRequest$deserialize_closure.prototype = {
    call$1(e) {
      return A.MoneroBlockTrackingPossition_MoneroBlockTrackingPossition$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 52
  };
  A.MoneroSyncBlocksInfoRequest.prototype = {
    toString$0(_) {
      return A.MapBase_mapToString(A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._core$_name, "height", this.height], type$.String, type$.Object));
    }
  };
  A._MoneroAccountBlocksTracker_Object_CborSerializable.prototype = {};
  A._MoneroBatchProcessTxesResponse_Object_CborSerializable.prototype = {};
  A._MoneroBlockTrackingPossition_Object_CborSerializable.prototype = {};
  A._MoneroBlockTrackingPossition_Object_CborSerializable_Equatable.prototype = {};
  A._MoneroOutputDetails_Object_CborSerializable.prototype = {};
  A._MoneroOutputDetails_Object_CborSerializable_Equatable.prototype = {};
  A._MoneroProcessTxIdsRequest_Object_CborSerializable.prototype = {};
  A._MoneroProcessTxesResponse_Object_CborSerializable.prototype = {};
  A._MoneroSyncAccountIndexInfo_Object_CborSerializable.prototype = {};
  A._MoneroSyncAccountIndexInfo_Object_CborSerializable_Equatable.prototype = {};
  A._MoneroSyncAccountsInfos_Object_CborSerializable.prototype = {};
  A._MoneroSyncAccountsInfos_Object_CborSerializable_Equatable.prototype = {};
  A._MoneroSyncBlocksRequest_Object_CborSerializable.prototype = {};
  A._MoneroSyncBlocksResponse_Object_CborSerializable.prototype = {};
  A._MoneroTxInfo_Object_CborSerializable.prototype = {};
  A._MoneroUnlockedPaymentRequestDetails_Object_CborSerializable.prototype = {};
  A._MoneroViewAccountDetails_Object_Equatable.prototype = {};
  A._MoneroViewAccountDetails_Object_Equatable_CborSerializable.prototype = {};
  A._MoneroViewPrimaryAccountDetails_Object_CborSerializable.prototype = {};
  A._MoneroViewPrimaryAccountDetails_Object_CborSerializable_Equatable.prototype = {};
  A.MoneroRignOutput.prototype = {
    toCbor$0() {
      var t1 = this.orderedIndexes,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborBigIntValue>"),
        t4 = type$.CborListValue_CborBigIntValue,
        t5 = this.indexes,
        t6 = A._arrayInstanceType(t5),
        t7 = t6._eval$1("MappedListIterable<1,CborBigIntValue>");
      t4 = A._setArrayType([new A.CborListValue(A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("CborBigIntValue(1)")._as(new A.MoneroRignOutput_toCbor_closure()), t3), true, t3._eval$1("ListIterable.E")), true, t4), new A.CborListValue(A.List_List$of(new A.MappedListIterable(t5, t6._eval$1("CborBigIntValue(1)")._as(new A.MoneroRignOutput_toCbor_closure0()), t7), true, t7._eval$1("ListIterable.E")), true, t4)], type$.JSArray_CborListValue_CborBigIntValue);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_202_12, type$.int), t4, type$.CborTagValue_dynamic);
    }
  };
  A.MoneroRignOutput_toCbor_closure.prototype = {
    call$1(e) {
      return new A.CborBigIntValue(type$.BigInt._as(e));
    },
    $signature: 113
  };
  A.MoneroRignOutput_toCbor_closure0.prototype = {
    call$1(e) {
      return new A.CborBigIntValue(type$.BigInt._as(e));
    },
    $signature: 113
  };
  A._MoneroRignOutput_Object_CborSerializable.prototype = {};
  A.MoneroTxDestinationWithProof.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([new A.CborStringValue(this.address.address), this.amount._balance, new A.CborStringValue(this.proof)], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_202_9, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.MoneroSignedTxData.prototype = {
    toCbor$0() {
      var t2, t3, t4, t5, t6, t7, t8, t9,
        t1 = new A.CodeUnits(this.txID);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t3 = this.txKeys;
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,CborBytesValue>");
      t6 = type$.CborListValue_CborBytesValue;
      t7 = this.indexes;
      t8 = A._arrayInstanceType(t7);
      t9 = t8._eval$1("MappedListIterable<1,CborBytesValue>");
      t6 = A._setArrayType([new A.CborBytesValue(A.List_List$unmodifiable(t1, t2)), new A.CborListValue(A.List_List$of(new A.MappedListIterable(t3, t4._eval$1("CborBytesValue(1)")._as(new A.MoneroSignedTxData_toCbor_closure()), t5), true, t5._eval$1("ListIterable.E")), true, t6), new A.CborListValue(A.List_List$of(new A.MappedListIterable(t7, t8._eval$1("CborBytesValue(1)")._as(new A.MoneroSignedTxData_toCbor_closure0()), t9), true, t9._eval$1("ListIterable.E")), true, t6)], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_202_10, t2), new A.CborListValue(t6, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    }
  };
  A.MoneroSignedTxData_toCbor_closure.prototype = {
    call$1(e) {
      var t1 = type$.MoneroPrivateKey._as(e).privateKey.key;
      A.BytesUtils_validateListOfBytes(t1);
      return new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
    },
    $signature: 326
  };
  A.MoneroSignedTxData_toCbor_closure0.prototype = {
    call$1(e) {
      var t1 = type$.MoneroAccountIndex._as(e).serialize$0();
      A.BytesUtils_validateListOfBytes(t1);
      return new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
    },
    $signature: 112
  };
  A.MoneroSigningTxResponse.prototype = {
    toCbor$0() {
      var t1 = this.txData.toCbor$0(),
        t2 = this.proofs,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t4 = A.List_List$of(new A.MappedListIterable(t2, t3._eval$1("CborTagValue<@>(1)")._as(new A.MoneroSigningTxResponse_toCbor_closure()), t4), true, t4._eval$1("ListIterable.E"));
      t3 = new A.CodeUnits(this.txBytes);
      A.BytesUtils_validateListOfBytes(t3);
      t2 = type$.int;
      t3 = A._setArrayType([t1, new A.CborListValue(t4, true, type$.CborListValue_CborTagValue_dynamic), new A.CborBytesValue(A.List_List$unmodifiable(t3, t2))], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_202_11, t2), new A.CborListValue(t3, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    }
  };
  A.MoneroSigningTxResponse_toCbor_closure.prototype = {
    call$1(e) {
      return type$.MoneroTxDestinationWithProof._as(e).toCbor$0();
    },
    $signature: 327
  };
  A._MoneroSignedTxData_Object_CborSerializable.prototype = {};
  A._MoneroSigningTxResponse_Object_CborSerializable.prototype = {};
  A._MoneroTxDestinationWithProof_Object_CborSerializable.prototype = {};
  A.TonAccountContextType.prototype = {
    _enumToString$0() {
      return "TonAccountContextType." + this._core$_name;
    }
  };
  A.TonAccountContextType_fromTag_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_bytesEqual(type$.TonAccountContextType._as(e).tag, this.tag);
    },
    $signature: 328
  };
  A.TonAccountContextType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_account_details_null);
    },
    $signature: 1
  };
  A.TonAccountContext.prototype = {};
  A.TonAccountLegacyContext.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.version.name, this.bouncable], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.version.name];
    }
  };
  A.TonAccountSubWalletContext.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.version.name, _this.bouncable, _this.subwalletId], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.version.name, this.subwalletId];
    }
  };
  A.TonAccountV5CustomContext.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.version.name, _this.bouncable, _this.walletId], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.version.name, this.walletId];
    }
  };
  A.TonAccountV5SubWalletContext.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.version.name, _this.bouncable, _this.subwalletId], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.version.name, this.subwalletId];
    }
  };
  A._TonAccountContext_Object_CborSerializable.prototype = {};
  A._TonAccountContext_Object_CborSerializable_Equatable.prototype = {};
  A.AbiParameter.prototype = {
    legacyEip712Encode$2(value, keepSize) {
      return A.ABICoder_ABICoder$fromType(this.type, type$.dynamic).legacyEip712Encode$3(this, value, keepSize);
    },
    abiEncode$1(value) {
      return A.ABICoder_ABICoder$fromType(this.type, type$.dynamic).abiEncode$2(this, value);
    },
    get$isDynamic() {
      var t1 = this.type;
      if (t1 === "string" || t1 === "bytes" || B.JSString_methods.endsWith$1(t1, "[]"))
        return true;
      if (t1 === "tuple")
        return B.JSArray_methods.any$1(this.components, new A.AbiParameter_isDynamic_closure());
      if (B.JSString_methods.endsWith$1(t1, "]"))
        return A._ABIUtils_toArrayType(this).item1.get$isDynamic();
      return false;
    }
  };
  A.AbiParameter_isDynamic_closure.prototype = {
    call$1(component) {
      return type$.AbiParameter._as(component).get$isDynamic();
    },
    $signature: 329
  };
  A.EncoderResult.prototype = {};
  A.EIP712Version.prototype = {};
  A.EIP712Version_fromVersion_closure.prototype = {
    call$1(e) {
      return type$.EIP712Version._as(e).version === this.version;
    },
    $signature: 330
  };
  A.EIP712Version_fromVersion_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.SolidityAbiException$("Invalid EIP712Version version.", A.LinkedHashMap_LinkedHashMap$_literal(["version", this.version, "excepted", B.JSArray_methods.map$1$1(B.List_Gbr, new A.EIP712Version_fromVersion__closure(), type$.int).join$1(0, ", ")], type$.String, type$.dynamic)));
    },
    $signature: 1
  };
  A.EIP712Version_fromVersion__closure.prototype = {
    call$1(e) {
      return type$.EIP712Version._as(e).version;
    },
    $signature: 331
  };
  A.Eip712TypeDetails.prototype = {
    toString$0(_) {
      return "name: " + this.name + "  type: " + this.type;
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name, "type", this.type], type$.String, type$.dynamic);
    }
  };
  A.Eip712TypedData.prototype = {
    encode$1$hash(hash) {
      var _this = this,
        t1 = A.List_List$of(B.List_25_1, true, type$.int);
      B.JSArray_methods.addAll$1(t1, A.Keccack_hash(A._EIP712Utils_encodeStruct(_this, "EIP712Domain", _this.domain), 32));
      B.JSArray_methods.addAll$1(t1, A.Keccack_hash(A._EIP712Utils_encodeStruct(_this, _this.primaryType, _this.message), 32));
      return t1;
    },
    toJson$0() {
      var _this = this,
        t1 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal(["types", _this.types.map$2$1(0, new A.Eip712TypedData_toJson_closure(), t1, type$.List_Map_String_dynamic), "domain", _this.domain, "message", _this.message, "primaryType", _this.primaryType, "version", _this.version.version], t1, type$.dynamic);
    },
    $isEIP712Base: 1
  };
  A.Eip712TypedData_Eip712TypedData$fromJson_closure.prototype = {
    call$1(e) {
      type$.Map_String_dynamic._as(e);
      return new A.Eip712TypeDetails(A._asString(e.$index(0, "name")), A._asString(e.$index(0, "type")));
    },
    $signature: 332
  };
  A.Eip712TypedData_toJson_closure.prototype = {
    call$2(k, v) {
      var t1;
      A._asString(k);
      t1 = J.map$1$1$ax(type$.List_Eip712TypeDetails._as(v), new A.Eip712TypedData_toJson__closure(), type$.Map_String_dynamic);
      return new A.MapEntry(k, A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")), type$.MapEntry_of_String_and_List_Map_String_dynamic);
    },
    $signature: 333
  };
  A.Eip712TypedData_toJson__closure.prototype = {
    call$1(e) {
      return type$.Eip712TypeDetails._as(e).toJson$0();
    },
    $signature: 334
  };
  A.Eip712TypedDataV1.prototype = {
    toJson$0() {
      var t1 = this.type;
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name, "type", t1, "value", A._EIP712Utils_eip712TypedDataV1ValueToJson(t1, this.value)], type$.String, type$.dynamic);
    },
    get$value() {
      return this.value;
    }
  };
  A.EIP712Legacy.prototype = {
    encode$1$hash(hash) {
      var t4, types, names, typesHash, _length, _list, index, namesHash, toBytes,
        t1 = this.typesData,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,@>"),
        values = A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("@(1)")._as(new A.EIP712Legacy_encode_closure()), t3), true, t3._eval$1("ListIterable.E"));
      t3 = t2._eval$1("String(1)");
      t2 = t2._eval$1("MappedListIterable<1,String>");
      t4 = t2._eval$1("ListIterable.E");
      types = A.List_List$of(new A.MappedListIterable(t1, t3._as(new A.EIP712Legacy_encode_closure0()), t2), true, t4);
      names = A.List_List$of(new A.MappedListIterable(t1, t3._as(new A.EIP712Legacy_encode_closure1()), t2), true, t4);
      typesHash = A.Keccack_hash(A._EIP712Utils_legacyV1encode(types, values), 32);
      _length = names.length;
      _list = J.JSArray_JSArray$allocateGrowable(_length, type$.String);
      for (index = 0; index < _length; ++index)
        _list[index] = "string";
      namesHash = A.Keccack_hash(A._EIP712Utils_legacyV1encode(_list, names), 32);
      toBytes = A._EIP712Utils_legacyV1encode(A._setArrayType(["bytes32", "bytes32"], type$.JSArray_String), [namesHash, typesHash]);
      return toBytes;
    },
    toJson$0() {
      var t1 = this.typesData,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      return A.LinkedHashMap_LinkedHashMap$_literal(["types", A.List_List$of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.EIP712Legacy_toJson_closure()), t3), true, t3._eval$1("ListIterable.E")), "version", 1], type$.String, type$.dynamic);
    },
    $isEIP712Base: 1
  };
  A.EIP712Legacy_EIP712Legacy$fromJson_closure.prototype = {
    call$1(e) {
      var t1 = type$.Map_dynamic_dynamic._as(e).cast$2$0(0, type$.String, type$.dynamic),
        t2 = A._asString(t1.$index(0, "type"));
      return new A.Eip712TypedDataV1(A._asString(t1.$index(0, "name")), t2, A._EIP712Utils_ensureCorrectValues(t2, t1.$index(0, "value")));
    },
    $signature: 335
  };
  A.EIP712Legacy_encode_closure.prototype = {
    call$1(e) {
      return type$.Eip712TypedDataV1._as(e).value;
    },
    $signature: 336
  };
  A.EIP712Legacy_encode_closure0.prototype = {
    call$1(e) {
      return type$.Eip712TypedDataV1._as(e).type;
    },
    $signature: 114
  };
  A.EIP712Legacy_encode_closure1.prototype = {
    call$1(e) {
      type$.Eip712TypedDataV1._as(e);
      return e.type + " " + e.name;
    },
    $signature: 114
  };
  A.EIP712Legacy_toJson_closure.prototype = {
    call$1(e) {
      return type$.Eip712TypedDataV1._as(e).toJson$0();
    },
    $signature: 338
  };
  A._EIP712Utils_ensureCorrectValues_closure.prototype = {
    call$1(e) {
      var t1 = this.childType;
      t1.toString;
      return A._EIP712Utils_ensureCorrectValues(t1, e);
    },
    $signature: 24
  };
  A._EIP712Utils_eip712TypedDataV1ValueToJson_closure.prototype = {
    call$1(e) {
      var t1 = this.childType;
      t1.toString;
      return A._EIP712Utils_eip712TypedDataV1ValueToJson(t1, e);
    },
    $signature: 24
  };
  A._EIP712Utils_getDependencies_closure.prototype = {
    call$2(previous, t) {
      var t1;
      type$.List_String._as(previous);
      type$.Eip712TypeDetails._as(t);
      t1 = A.List_List$of(previous, true, type$.String);
      B.JSArray_methods.addAll$1(t1, J.where$1$ax(A._EIP712Utils_getDependencies(this.typedData, t.type, previous), new A._EIP712Utils_getDependencies__closure(previous)));
      return t1;
    },
    $signature: 339
  };
  A._EIP712Utils_getDependencies__closure.prototype = {
    call$1(dependency) {
      return !J.contains$1$asx(this.previous, A._asString(dependency));
    },
    $signature: 19
  };
  A._EIP712Utils_encodeValue_closure.prototype = {
    call$1(item) {
      return A._EIP712Utils_encodeValue(this.typedData, this.isArray.item1, item);
    },
    $signature: 340
  };
  A._EIP712Utils_encodeValue_closure0.prototype = {
    call$1(item) {
      return type$.Tuple_String_dynamic._as(item).item1;
    },
    $signature: 341
  };
  A._EIP712Utils_encodeValue_closure1.prototype = {
    call$1(item) {
      return type$.Tuple_String_dynamic._as(item).item2;
    },
    $signature: 342
  };
  A._EIP712Utils_abiEncode_closure.prototype = {
    call$1(e) {
      return new A.AbiParameter("", A._asString(e), B.List_empty6);
    },
    $signature: 115
  };
  A._EIP712Utils_legacyV1encode_closure.prototype = {
    call$1(e) {
      return new A.AbiParameter("", A._asString(e), B.List_empty6);
    },
    $signature: 115
  };
  A._EIP712Utils_getMethodSigature_closure.prototype = {
    call$1(dependency) {
      var t1;
      A._asString(dependency);
      t1 = this.typedData.types.$index(0, dependency);
      t1.toString;
      return dependency + "(" + J.map$1$1$ax(t1, new A._EIP712Utils_getMethodSigature__closure(), type$.String).join$1(0, ",") + ")";
    },
    $signature: 13
  };
  A._EIP712Utils_getMethodSigature__closure.prototype = {
    call$1(t) {
      type$.Eip712TypeDetails._as(t);
      return t.type + " " + t.name;
    },
    $signature: 344
  };
  A.SolidityAbiException.prototype = {};
  A.AddressCoder.prototype = {
    abiEncode$2(params, input) {
      var bytes, addrBytes;
      type$.SolidityAddress._as(input);
      bytes = A.List_List$filled(32, 0, false, type$.int);
      addrBytes = A.BytesUtils_fromHexString(input._hexAddress);
      B.JSArray_methods.setAll$2(bytes, 12, addrBytes.length === 21 ? B.JSArray_methods.sublist$1(addrBytes, 1) : addrBytes);
      return new A.EncoderResult(false, bytes);
    },
    legacyEip712Encode$3(params, input, keepSize) {
      var t1, addrBytes;
      type$.SolidityAddress._as(input);
      if (keepSize)
        return this.abiEncode$2(params, input);
      t1 = input._hexAddress;
      addrBytes = A.BytesUtils_fromHexString(t1);
      B.JSArray_methods.sublist$1(addrBytes, addrBytes.length - 20);
      return new A.EncoderResult(false, A.BytesUtils_fromHexString(t1));
    },
    $isABICoder: 1
  };
  A.ArrayCoder.prototype = {
    abiEncode$2(params, input) {
      var param, t1, t2, encodedParams, dynamicItems, isDynamic, t3, encode, $length, resultBytes, t4;
      type$.List_dynamic._as(input);
      param = A._ABIUtils_toArrayType(params);
      t1 = J.getInterceptor$ax(input);
      t2 = t1.map$1$1(input, new A.ArrayCoder_abiEncode_closure(param), type$.EncoderResult);
      encodedParams = A.List_List$of(t2, true, t2.$ti._eval$1("ListIterable.E"));
      dynamicItems = encodedParams.length !== 0 && B.JSArray_methods.get$first(encodedParams).isDynamic;
      t2 = param.item2;
      isDynamic = J.$eq$(t2, -1);
      t3 = !isDynamic;
      if (t3 && t1.get$length(input) !== t2)
        throw A.wrapException(B.SolidityAbiException_xwo);
      if (!t3 || dynamicItems) {
        encode = A._ABIUtils_encodeDynamicParams(encodedParams);
        if (isDynamic) {
          $length = B.C_NumbersCoder.abiEncode$2(B.AbiParameter_AmO, A._BigIntImpl__BigIntImpl$from(encodedParams.length)).encoded;
          if (encodedParams.length === 0)
            t1 = $length;
          else {
            t1 = A.List_List$of($length, true, type$.int);
            B.JSArray_methods.addAll$1(t1, encode);
          }
          return new A.EncoderResult(true, t1);
        }
        return new A.EncoderResult(true, encode);
      }
      t1 = A._arrayInstanceType(encodedParams);
      t2 = t1._eval$1("MappedListIterable<1,List<int>>");
      resultBytes = new A.MappedListIterable(encodedParams, t1._eval$1("List<int>(1)")._as(new A.ArrayCoder_abiEncode_closure0()), t2);
      t1 = A._setArrayType([], type$.JSArray_int);
      for (t3 = new A.ListIterator(resultBytes, resultBytes.get$length(0), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"); t3.moveNext$0();) {
        t4 = t3.__internal$_current;
        B.JSArray_methods.addAll$1(t1, t4 == null ? t2._as(t4) : t4);
      }
      return new A.EncoderResult(false, t1);
    },
    legacyEip712Encode$3(params, input, keepSize) {
      var t2, resultBytes, t3, t4,
        t1 = J.map$1$1$ax(type$.List_dynamic._as(input), new A.ArrayCoder_legacyEip712Encode_closure(A._ABIUtils_toArrayType(params)), type$.EncoderResult),
        encodedParams = A.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
      t1 = A._arrayInstanceType(encodedParams);
      t2 = t1._eval$1("MappedListIterable<1,List<int>>");
      resultBytes = new A.MappedListIterable(encodedParams, t1._eval$1("List<int>(1)")._as(new A.ArrayCoder_legacyEip712Encode_closure0()), t2);
      t1 = A._setArrayType([], type$.JSArray_int);
      for (t3 = new A.ListIterator(resultBytes, resultBytes.get$length(0), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"); t3.moveNext$0();) {
        t4 = t3.__internal$_current;
        B.JSArray_methods.addAll$1(t1, t4 == null ? t2._as(t4) : t4);
      }
      return new A.EncoderResult(false, t1);
    },
    $isABICoder: 1
  };
  A.ArrayCoder_abiEncode_closure.prototype = {
    call$1(e) {
      return this.param.item1.abiEncode$1(e);
    },
    $signature: 116
  };
  A.ArrayCoder_abiEncode_closure0.prototype = {
    call$1(e) {
      return type$.EncoderResult._as(e).encoded;
    },
    $signature: 21
  };
  A.ArrayCoder_legacyEip712Encode_closure.prototype = {
    call$1(e) {
      return this.param.item1.legacyEip712Encode$2(e, true);
    },
    $signature: 116
  };
  A.ArrayCoder_legacyEip712Encode_closure0.prototype = {
    call$1(e) {
      return type$.EncoderResult._as(e).encoded;
    },
    $signature: 21
  };
  A.BooleanCoder.prototype = {
    abiEncode$2(params, input) {
      var bytes;
      A._asBool(input);
      bytes = A.List_List$filled(32, 0, false, type$.int);
      if (input)
        B.JSArray_methods.$indexSet(bytes, 31, 1);
      return new A.EncoderResult(false, bytes);
    },
    legacyEip712Encode$3(params, input, keepSize) {
      var bytes;
      A._asBool(input);
      if (keepSize)
        return this.abiEncode$2(params, input);
      bytes = A.List_List$filled(1, 0, false, type$.int);
      B.JSArray_methods.$indexSet(bytes, 0, input ? 1 : 0);
      return new A.EncoderResult(false, bytes);
    },
    $isABICoder: 1
  };
  A.BytesCoder.prototype = {
    abiEncode$2(params, input) {
      var t1, encoded, size, bytes;
      type$.List_int._as(input);
      if (params.get$isDynamic()) {
        t1 = J.getInterceptor$asx(input);
        encoded = A.List_List$filled(32 + B.JSNumber_methods.ceil$0(t1.get$length(input) / 32) * 32, 0, false, type$.int);
        B.JSArray_methods.setAll$2(encoded, 0, B.C_NumbersCoder.abiEncode$2(B.AbiParameter_swd, A._BigIntImpl__BigIntImpl$from(t1.get$length(input))).encoded);
        B.JSArray_methods.setAll$2(encoded, 32, input);
        return new A.EncoderResult(true, encoded);
      }
      t1 = params.type;
      size = A._ABIUtils_bytesSize(t1);
      size.toString;
      A._ABIValidator_validateBytes(t1, input, size, size);
      bytes = A.List_List$filled(32, 0, false, type$.int);
      B.JSArray_methods.setAll$2(bytes, 0, input);
      return new A.EncoderResult(false, bytes);
    },
    legacyEip712Encode$3(params, input, keepSize) {
      var size;
      type$.List_int._as(input);
      size = A._ABIUtils_bytesSize(params.type);
      if (size != null && J.get$length$asx(input) !== size)
        throw A.wrapException(B.SolidityAbiException_2No);
      return new A.EncoderResult(false, input);
    },
    $isABICoder: 1
  };
  A.FunctionCoder.prototype = {
    abiEncode$2(params, input) {
      return B.C_BytesCoder.abiEncode$2(B.AbiParameter_qgB, type$.List_int._as(input));
    },
    legacyEip712Encode$3(params, input, keepSize) {
      return B.C_BytesCoder.legacyEip712Encode$3(B.AbiParameter_qgB, type$.List_int._as(input), keepSize);
    },
    $isABICoder: 1
  };
  A.NumbersCoder.prototype = {
    abiEncode$2(params, input) {
      type$.BigInt._as(input);
      A._ABIValidator_isValidNumber(params.type, input);
      return new A.EncoderResult(false, A.BigintUtils_toBytes(input, 32, B.C_Endian));
    },
    legacyEip712Encode$3(params, input, keepSize) {
      var t1, size;
      type$.BigInt._as(input);
      t1 = params.type;
      A._ABIValidator_isValidNumber(t1, input);
      size = A._ABIUtils_numericSize(t1);
      if (size == null)
        size = 32;
      t1 = $.$get$_BigIntImpl_one();
      t1 = input.$and(0, t1.$shl(0, size * 8).$sub(0, t1));
      return new A.EncoderResult(false, A.BigintUtils_toBytes(t1, keepSize ? 32 : size, B.C_Endian));
    },
    $isABICoder: 1
  };
  A.StringCoder.prototype = {
    abiEncode$2(params, input) {
      return B.C_BytesCoder.abiEncode$2(B.AbiParameter_O1c, A.StringUtils_encode(A._asString(input), B.StringEncoding_1));
    },
    legacyEip712Encode$3(params, input, keepSize) {
      return B.C_BytesCoder.legacyEip712Encode$3(B.AbiParameter_O1c, A.StringUtils_encode(A._asString(input), B.StringEncoding_1), keepSize);
    },
    $isABICoder: 1
  };
  A.TupleCoder.prototype = {
    abiEncode$2(params, input) {
      var encoded, t1, t2, t3, isDynamic, i, paramComponent, t4, result, re, _i;
      type$.List_dynamic._as(input);
      encoded = A._setArrayType([], type$.JSArray_EncoderResult);
      t1 = J.getInterceptor$asx(input);
      t2 = params.components;
      if (t1.get$length(input) !== t2.length)
        throw A.wrapException(B.SolidityAbiException_xwo);
      for (t3 = type$.dynamic, isDynamic = false, i = 0; i < t2.length; ++i) {
        paramComponent = t2[i];
        t4 = t1.$index(input, i);
        result = A.ABICoder_ABICoder$fromType(paramComponent.type, t3).abiEncode$2(paramComponent, t4);
        if (result.isDynamic)
          isDynamic = true;
        B.JSArray_methods.add$1(encoded, result);
      }
      if (isDynamic)
        return new A.EncoderResult(true, A._ABIUtils_encodeDynamicParams(encoded));
      t1 = type$.MappedListIterable_of_EncoderResult_and_List_int;
      re = A.List_List$of(new A.MappedListIterable(encoded, type$.List_int_Function_EncoderResult._as(new A.TupleCoder_abiEncode_closure()), t1), true, t1._eval$1("ListIterable.E"));
      t1 = A._setArrayType([], type$.JSArray_int);
      for (t2 = re.length, _i = 0; _i < t2; ++_i)
        B.JSArray_methods.addAll$1(t1, re[_i]);
      return new A.EncoderResult(false, t1);
    },
    legacyEip712Encode$3(params, input, keepSize) {
      var encoded, t1, t2, t3, i, paramComponent, t4, re, _i;
      type$.List_dynamic._as(input);
      encoded = A._setArrayType([], type$.JSArray_EncoderResult);
      t1 = J.getInterceptor$asx(input);
      t2 = params.components;
      if (t1.get$length(input) !== t2.length)
        throw A.wrapException(B.SolidityAbiException_xwo);
      for (t3 = type$.dynamic, i = 0; i < t2.length; ++i) {
        paramComponent = t2[i];
        t4 = t1.$index(input, i);
        B.JSArray_methods.add$1(encoded, A.ABICoder_ABICoder$fromType(paramComponent.type, t3).legacyEip712Encode$3(paramComponent, t4, keepSize));
      }
      t1 = type$.MappedListIterable_of_EncoderResult_and_List_int;
      re = A.List_List$of(new A.MappedListIterable(encoded, type$.List_int_Function_EncoderResult._as(new A.TupleCoder_legacyEip712Encode_closure()), t1), true, t1._eval$1("ListIterable.E"));
      t1 = A._setArrayType([], type$.JSArray_int);
      for (t2 = re.length, _i = 0; _i < t2; ++_i)
        B.JSArray_methods.addAll$1(t1, re[_i]);
      return new A.EncoderResult(false, t1);
    },
    $isABICoder: 1
  };
  A.TupleCoder_abiEncode_closure.prototype = {
    call$1(e) {
      return type$.EncoderResult._as(e).encoded;
    },
    $signature: 21
  };
  A.TupleCoder_legacyEip712Encode_closure.prototype = {
    call$1(e) {
      return type$.EncoderResult._as(e).encoded;
    },
    $signature: 21
  };
  A._ABIUtils_encodeDynamicParams_closure.prototype = {
    call$1(p) {
      return type$.EncoderResult._as(p).encoded;
    },
    $signature: 21
  };
  A._ABIUtils_encodeDynamicParams_closure0.prototype = {
    call$1(element) {
      return type$.List_int._as(element);
    },
    $signature: 2
  };
  A._ABIUtils_encodeDynamicParams_closure1.prototype = {
    call$1(p) {
      return type$.EncoderResult._as(p).encoded;
    },
    $signature: 21
  };
  A._ABIUtils_encodeDynamicParams_closure2.prototype = {
    call$1(element) {
      return type$.List_int._as(element);
    },
    $signature: 2
  };
  A.SolidityAddress.prototype = {
    toString$0(_) {
      return this._hexAddress;
    }
  };
  A.TronAddress.prototype = {
    toAddress$1(visible) {
      return this._address;
    },
    toAddress$0() {
      return this.toAddress$1(true);
    },
    toString$0(_) {
      return this.toAddress$1(true);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.TronAddress))
        return false;
      return this._address === other._address;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this._address);
    }
  };
  A.TronPluginException.prototype = {};
  A.Context.prototype = {
    absolute$1(part1) {
      var t1, _null = null;
      A._validateArgList("absolute", A._setArrayType([part1, null, null, null, null, null, null, null, null, null, null, null, null, null, null], type$.JSArray_nullable_String));
      t1 = this.style;
      t1 = t1.rootLength$1(part1) > 0 && !t1.isRootRelative$1(part1);
      if (t1)
        return part1;
      t1 = this._context$_current;
      return this.join$16(0, t1 == null ? A.current() : t1, part1, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    join$16(_, part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15, part16) {
      var parts = A._setArrayType([part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15, part16], type$.JSArray_nullable_String);
      A._validateArgList("join", parts);
      return this.joinAll$1(new A.WhereTypeIterable(parts, type$.WhereTypeIterable_String));
    },
    joinAll$1(parts) {
      var t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, t4, t5, parsed, path, t6;
      type$.Iterable_String._as(parts);
      for (t1 = parts.$ti, t2 = t1._eval$1("bool(Iterable.E)")._as(new A.Context_joinAll_closure()), t3 = parts.get$iterator(0), t1 = new A.WhereIterator(t3, t2, t1._eval$1("WhereIterator<Iterable.E>")), t2 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false, t4 = ""; t1.moveNext$0();) {
        t5 = t3.get$current();
        if (t2.isRootRelative$1(t5) && isAbsoluteAndNotRootRelative) {
          parsed = A.ParsedPath_ParsedPath$parse(t5, t2);
          path = t4.charCodeAt(0) == 0 ? t4 : t4;
          t4 = B.JSString_methods.substring$2(path, 0, t2.rootLength$2$withDrive(path, true));
          parsed.root = t4;
          if (t2.needsSeparator$1(t4))
            B.JSArray_methods.$indexSet(parsed.separators, 0, t2.get$separator());
          t4 = "" + parsed.toString$0(0);
        } else if (t2.rootLength$1(t5) > 0) {
          isAbsoluteAndNotRootRelative = !t2.isRootRelative$1(t5);
          t4 = "" + t5;
        } else {
          t6 = t5.length;
          if (t6 !== 0) {
            if (0 >= t6)
              return A.ioore(t5, 0);
            t6 = t2.containsSeparator$1(t5[0]);
          } else
            t6 = false;
          if (!t6)
            if (needsSeparator)
              t4 += t2.get$separator();
          t4 += t5;
        }
        needsSeparator = t2.needsSeparator$1(t5);
      }
      return t4.charCodeAt(0) == 0 ? t4 : t4;
    },
    split$1(_, path) {
      var parsed = A.ParsedPath_ParsedPath$parse(path, this.style),
        t1 = parsed.parts,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("WhereIterable<1>");
      parsed.set$parts(A.List_List$of(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Context_split_closure()), t3), true, t3._eval$1("Iterable.E")));
      t1 = parsed.root;
      if (t1 != null)
        B.JSArray_methods.insert$2(parsed.parts, 0, t1);
      return parsed.parts;
    },
    normalize$1(path) {
      var parsed;
      if (!this._needsNormalization$1(path))
        return path;
      parsed = A.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.normalize$0();
      return parsed.toString$0(0);
    },
    _needsNormalization$1(path) {
      var t2, i, start, previous, t3, previousPrevious, codeUnit, t4,
        t1 = this.style,
        root = t1.rootLength$1(path);
      if (root !== 0) {
        if (t1 === $.$get$Style_windows())
          for (t2 = path.length, i = 0; i < root; ++i) {
            if (!(i < t2))
              return A.ioore(path, i);
            if (path.charCodeAt(i) === 47)
              return true;
          }
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      for (t2 = new A.CodeUnits(path).__internal$_string, t3 = t2.length, i = start, previousPrevious = null; i < t3; ++i, previousPrevious = previous, previous = codeUnit) {
        if (!(i >= 0))
          return A.ioore(t2, i);
        codeUnit = t2.charCodeAt(i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t1 === $.$get$Style_windows() && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t4 = false;
          if (t4)
            return true;
        }
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$1(path) {
      var from, fromParsed, pathParsed, t3, t4, t5, t6, _this = this,
        _s26_ = 'Unable to find a path to "',
        t1 = _this.style,
        t2 = t1.rootLength$1(path);
      if (t2 <= 0)
        return _this.normalize$1(path);
      t2 = _this._context$_current;
      from = t2 == null ? A.current() : t2;
      if (t1.rootLength$1(from) <= 0 && t1.rootLength$1(path) > 0)
        return _this.normalize$1(path);
      if (t1.rootLength$1(path) <= 0 || t1.isRootRelative$1(path))
        path = _this.absolute$1(path);
      if (t1.rootLength$1(path) <= 0 && t1.rootLength$1(from) > 0)
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      fromParsed = A.ParsedPath_ParsedPath$parse(from, t1);
      fromParsed.normalize$0();
      pathParsed = A.ParsedPath_ParsedPath$parse(path, t1);
      pathParsed.normalize$0();
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return A.ioore(t2, 0);
        t2 = J.$eq$(t2[0], ".");
      } else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      t2 = fromParsed.root;
      t3 = pathParsed.root;
      if (t2 != t3)
        t2 = t2 == null || t3 == null || !t1.pathsEqual$2(t2, t3);
      else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      while (true) {
        t2 = fromParsed.parts;
        t3 = t2.length;
        t4 = false;
        if (t3 !== 0) {
          t5 = pathParsed.parts;
          t6 = t5.length;
          if (t6 !== 0) {
            if (0 >= t3)
              return A.ioore(t2, 0);
            t2 = t2[0];
            if (0 >= t6)
              return A.ioore(t5, 0);
            t5 = t1.pathsEqual$2(t2, t5[0]);
            t2 = t5;
          } else
            t2 = t4;
        } else
          t2 = t4;
        if (!t2)
          break;
        B.JSArray_methods.removeAt$1(fromParsed.parts, 0);
        B.JSArray_methods.removeAt$1(fromParsed.separators, 1);
        B.JSArray_methods.removeAt$1(pathParsed.parts, 0);
        B.JSArray_methods.removeAt$1(pathParsed.separators, 1);
      }
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return A.ioore(t2, 0);
        t2 = J.$eq$(t2[0], "..");
      } else
        t2 = false;
      if (t2)
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      t2 = type$.String;
      B.JSArray_methods.insertAll$2(pathParsed.parts, 0, A.List_List$filled(fromParsed.parts.length, "..", false, t2));
      B.JSArray_methods.$indexSet(pathParsed.separators, 0, "");
      B.JSArray_methods.insertAll$2(pathParsed.separators, 1, A.List_List$filled(fromParsed.parts.length, t1.get$separator(), false, t2));
      t1 = pathParsed.parts;
      t2 = t1.length;
      if (t2 === 0)
        return ".";
      if (t2 > 1 && J.$eq$(B.JSArray_methods.get$last(t1), ".")) {
        B.JSArray_methods.removeLast$0(pathParsed.parts);
        t1 = pathParsed.separators;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        B.JSArray_methods.add$1(t1, "");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(0);
    },
    prettyUri$1(uri) {
      var path, rel, _this = this,
        typedUri = A._parseUri(uri);
      if (typedUri.get$scheme() === "file" && _this.style === $.$get$Style_url())
        return typedUri.toString$0(0);
      else if (typedUri.get$scheme() !== "file" && typedUri.get$scheme() !== "" && _this.style !== $.$get$Style_url())
        return typedUri.toString$0(0);
      path = _this.normalize$1(_this.style.pathFromUri$1(A._parseUri(typedUri)));
      rel = _this.relative$1(path);
      return _this.split$1(0, rel).length > _this.split$1(0, path).length ? path : rel;
    }
  };
  A.Context_joinAll_closure.prototype = {
    call$1(part) {
      return A._asString(part) !== "";
    },
    $signature: 19
  };
  A.Context_split_closure.prototype = {
    call$1(part) {
      return A._asString(part).length !== 0;
    },
    $signature: 19
  };
  A._validateArgList_closure.prototype = {
    call$1(arg) {
      A._asStringQ(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 347
  };
  A.InternalStyle.prototype = {
    getRoot$1(path) {
      var t1,
        $length = this.rootLength$1(path);
      if ($length > 0)
        return B.JSString_methods.substring$2(path, 0, $length);
      if (this.isRootRelative$1(path)) {
        if (0 >= path.length)
          return A.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    },
    pathsEqual$2(path1, path2) {
      return path1 === path2;
    }
  };
  A.ParsedPath.prototype = {
    removeTrailingSeparators$0() {
      var t1, t2, _this = this;
      while (true) {
        t1 = _this.parts;
        if (!(t1.length !== 0 && J.$eq$(B.JSArray_methods.get$last(t1), "")))
          break;
        B.JSArray_methods.removeLast$0(_this.parts);
        t1 = _this.separators;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      }
      t1 = _this.separators;
      t2 = t1.length;
      if (t2 !== 0)
        B.JSArray_methods.$indexSet(t1, t2 - 1, "");
    },
    normalize$0() {
      var t1, t2, leadingDoubles, _i, part, t3, _this = this,
        newParts = A._setArrayType([], type$.JSArray_String);
      for (t1 = _this.parts, t2 = t1.length, leadingDoubles = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        part = t1[_i];
        t3 = J.getInterceptor$(part);
        if (!(t3.$eq(part, ".") || t3.$eq(part, "")))
          if (t3.$eq(part, "..")) {
            t3 = newParts.length;
            if (t3 !== 0) {
              if (0 >= t3)
                return A.ioore(newParts, -1);
              newParts.pop();
            } else
              ++leadingDoubles;
          } else
            B.JSArray_methods.add$1(newParts, part);
      }
      if (_this.root == null)
        B.JSArray_methods.insertAll$2(newParts, 0, A.List_List$filled(leadingDoubles, "..", false, type$.String));
      if (newParts.length === 0 && _this.root == null)
        B.JSArray_methods.add$1(newParts, ".");
      _this.set$parts(newParts);
      t1 = _this.style;
      _this.set$separators(A.List_List$filled(newParts.length + 1, t1.get$separator(), true, type$.String));
      t2 = _this.root;
      if (t2 == null || newParts.length === 0 || !t1.needsSeparator$1(t2))
        B.JSArray_methods.$indexSet(_this.separators, 0, "");
      t2 = _this.root;
      if (t2 != null && t1 === $.$get$Style_windows()) {
        t2.toString;
        _this.root = A.stringReplaceAllUnchecked(t2, "/", "\\");
      }
      _this.removeTrailingSeparators$0();
    },
    toString$0(_) {
      var i, t2, t3, _this = this,
        t1 = _this.root;
      t1 = t1 != null ? "" + t1 : "";
      for (i = 0; i < _this.parts.length; ++i, t1 = t3) {
        t2 = _this.separators;
        if (!(i < t2.length))
          return A.ioore(t2, i);
        t2 = A.S(t2[i]);
        t3 = _this.parts;
        if (!(i < t3.length))
          return A.ioore(t3, i);
        t3 = t1 + t2 + A.S(t3[i]);
      }
      t1 += A.S(B.JSArray_methods.get$last(_this.separators));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$parts(parts) {
      this.parts = type$.List_String._as(parts);
    },
    set$separators(separators) {
      this.separators = type$.List_String._as(separators);
    }
  };
  A.PathException.prototype = {
    toString$0(_) {
      return "PathException: " + this.message;
    },
    $isException: 1
  };
  A.Style.prototype = {
    toString$0(_) {
      return this.get$name();
    }
  };
  A.PosixStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 !== 0) {
        t2 = t1 - 1;
        if (!(t2 >= 0))
          return A.ioore(path, t2);
        t2 = path.charCodeAt(t2) !== 47;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t1 = path.charCodeAt(0) === 47;
      } else
        t1 = false;
      if (t1)
        return 1;
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return false;
    },
    pathFromUri$1(uri) {
      var t1;
      if (uri.get$scheme() === "" || uri.get$scheme() === "file") {
        t1 = uri.get$path();
        return A._Uri__uriDecode(t1, 0, t1.length, B.C_Utf8Codec, false);
      }
      throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
    },
    get$name() {
      return "posix";
    },
    get$separator() {
      return "/";
    }
  };
  A.UrlStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 === 0)
        return false;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 47)
        return true;
      return B.JSString_methods.endsWith$1(path, "://") && this.rootLength$1(path) === t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var i, codeUnit, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (0 >= t1)
        return A.ioore(path, 0);
      if (path.charCodeAt(0) === 47)
        return 1;
      for (i = 0; i < t1; ++i) {
        codeUnit = path.charCodeAt(i);
        if (codeUnit === 47)
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = B.JSString_methods.indexOf$2(path, "/", B.JSString_methods.startsWith$2(path, "//", i + 1) ? i + 3 : i);
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!B.JSString_methods.startsWith$1(path, "file://"))
            return index;
          t1 = A.driveLetterEnd(path, index + 1);
          return t1 == null ? index : t1;
        }
      }
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      var t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t1 = path.charCodeAt(0) === 47;
      } else
        t1 = false;
      return t1;
    },
    pathFromUri$1(uri) {
      return uri.toString$0(0);
    },
    get$name() {
      return "url";
    },
    get$separator() {
      return "/";
    }
  };
  A.WindowsStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 === 0)
        return false;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      t2 = path.charCodeAt(t2);
      return !(t2 === 47 || t2 === 92);
    },
    rootLength$2$withDrive(path, withDrive) {
      var t2, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (0 >= t1)
        return A.ioore(path, 0);
      if (path.charCodeAt(0) === 47)
        return 1;
      if (path.charCodeAt(0) === 92) {
        if (t1 >= 2) {
          if (1 >= t1)
            return A.ioore(path, 1);
          t2 = path.charCodeAt(1) !== 92;
        } else
          t2 = true;
        if (t2)
          return 1;
        index = B.JSString_methods.indexOf$2(path, "\\", 2);
        if (index > 0) {
          index = B.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (t1 < 3)
        return 0;
      if (!A.isAlphabetic(path.charCodeAt(0)))
        return 0;
      if (path.charCodeAt(1) !== 58)
        return 0;
      t1 = path.charCodeAt(2);
      if (!(t1 === 47 || t1 === 92))
        return 0;
      return 3;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return this.rootLength$1(path) === 1;
    },
    pathFromUri$1(uri) {
      var path, t1;
      if (uri.get$scheme() !== "" && uri.get$scheme() !== "file")
        throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
      path = uri.get$path();
      if (uri.get$host() === "") {
        t1 = path.length;
        if (t1 >= 3 && B.JSString_methods.startsWith$1(path, "/") && A.driveLetterEnd(path, 1) != null) {
          A.RangeError_checkValueInInterval(0, 0, t1, "startIndex");
          path = A.stringReplaceFirstUnchecked(path, "/", "", 0);
        }
      } else
        path = "\\\\" + uri.get$host() + path;
      t1 = A.stringReplaceAllUnchecked(path, "/", "\\");
      return A._Uri__uriDecode(t1, 0, t1.length, B.C_Utf8Codec, false);
    },
    codeUnitsEqual$2(codeUnit1, codeUnit2) {
      var upperCase1;
      if (codeUnit1 === codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if ((codeUnit1 ^ codeUnit2) !== 32)
        return false;
      upperCase1 = codeUnit1 | 32;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2(path1, path2) {
      var t1, t2, i;
      if (path1 === path2)
        return true;
      t1 = path1.length;
      t2 = path2.length;
      if (t1 !== t2)
        return false;
      for (i = 0; i < t1; ++i) {
        if (!(i < t2))
          return A.ioore(path2, i);
        if (!this.codeUnitsEqual$2(path1.charCodeAt(i), path2.charCodeAt(i)))
          return false;
      }
      return true;
    },
    get$name() {
      return "windows";
    },
    get$separator() {
      return "\\";
    }
  };
  A.SourceFile.prototype = {
    get$length(_) {
      return this._decodedChars.length;
    },
    get$lines() {
      return this._lineStarts.length;
    },
    SourceFile$decoded$2$url(decodedChars, url) {
      var t1, t2, t3, i, c, j, t4;
      for (t1 = this._decodedChars, t2 = t1.length, t3 = this._lineStarts, i = 0; i < t2; ++i) {
        c = t1[i];
        if (c === 13) {
          j = i + 1;
          if (j < t2) {
            if (!(j < t2))
              return A.ioore(t1, j);
            t4 = t1[j] !== 10;
          } else
            t4 = true;
          if (t4)
            c = 10;
        }
        if (c === 10)
          B.JSArray_methods.add$1(t3, i + 1);
      }
    },
    getLine$1(offset) {
      var t1, _this = this;
      if (offset < 0)
        throw A.wrapException(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw A.wrapException(A.RangeError$("Offset " + offset + string$.x20must_ + _this.get$length(0) + "."));
      t1 = _this._lineStarts;
      if (offset < B.JSArray_methods.get$first(t1))
        return -1;
      if (offset >= B.JSArray_methods.get$last(t1))
        return t1.length - 1;
      if (_this._isNearCachedLine$1(offset)) {
        t1 = _this._cachedLine;
        t1.toString;
        return t1;
      }
      return _this._cachedLine = _this._binarySearch$1(offset) - 1;
    },
    _isNearCachedLine$1(offset) {
      var t2, t3, t4,
        t1 = this._cachedLine;
      if (t1 == null)
        return false;
      t2 = this._lineStarts;
      t3 = t2.length;
      if (t1 >>> 0 !== t1 || t1 >= t3)
        return A.ioore(t2, t1);
      if (offset < t2[t1])
        return false;
      if (!(t1 >= t3 - 1)) {
        t4 = t1 + 1;
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t4 = offset < t2[t4];
      } else
        t4 = true;
      if (t4)
        return true;
      if (!(t1 >= t3 - 2)) {
        t4 = t1 + 2;
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t4 = offset < t2[t4];
        t2 = t4;
      } else
        t2 = true;
      if (t2) {
        this._cachedLine = t1 + 1;
        return true;
      }
      return false;
    },
    _binarySearch$1(offset) {
      var min, half,
        t1 = this._lineStarts,
        t2 = t1.length,
        max = t2 - 1;
      for (min = 0; min < max;) {
        half = min + B.JSInt_methods._tdivFast$1(max - min, 2);
        if (!(half >= 0 && half < t2))
          return A.ioore(t1, half);
        if (t1[half] > offset)
          max = half;
        else
          min = half + 1;
      }
      return max;
    },
    getColumn$1(offset) {
      var line, t1, lineStart, _this = this;
      if (offset < 0)
        throw A.wrapException(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw A.wrapException(A.RangeError$("Offset " + offset + " must be not be greater than the number of characters in the file, " + _this.get$length(0) + "."));
      line = _this.getLine$1(offset);
      t1 = _this._lineStarts;
      if (!(line >= 0 && line < t1.length))
        return A.ioore(t1, line);
      lineStart = t1[line];
      if (lineStart > offset)
        throw A.wrapException(A.RangeError$("Line " + line + " comes after offset " + offset + "."));
      return offset - lineStart;
    },
    getOffset$1(line) {
      var t1, t2, result, t3;
      if (line < 0)
        throw A.wrapException(A.RangeError$("Line may not be negative, was " + line + "."));
      else {
        t1 = this._lineStarts;
        t2 = t1.length;
        if (line >= t2)
          throw A.wrapException(A.RangeError$("Line " + line + " must be less than the number of lines in the file, " + this.get$lines() + "."));
      }
      result = t1[line];
      if (result <= this._decodedChars.length) {
        t3 = line + 1;
        t1 = t3 < t2 && result >= t1[t3];
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.RangeError$("Line " + line + " doesn't have 0 columns."));
      return result;
    }
  };
  A.FileLocation.prototype = {
    get$sourceUrl() {
      return this.file.url;
    },
    get$line() {
      return this.file.getLine$1(this.offset);
    },
    get$column() {
      return this.file.getColumn$1(this.offset);
    },
    get$offset() {
      return this.offset;
    }
  };
  A._FileSpan.prototype = {
    get$sourceUrl() {
      return this.file.url;
    },
    get$length(_) {
      return this._end - this._file$_start;
    },
    get$start() {
      return A.FileLocation$_(this.file, this._file$_start);
    },
    get$end() {
      return A.FileLocation$_(this.file, this._end);
    },
    get$text() {
      return A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(this.file._decodedChars, this._file$_start, this._end), 0, null);
    },
    get$context() {
      var _this = this,
        t1 = _this.file,
        endOffset = _this._end,
        endLine = t1.getLine$1(endOffset);
      if (t1.getColumn$1(endOffset) === 0 && endLine !== 0) {
        if (endOffset - _this._file$_start === 0)
          return endLine === t1._lineStarts.length - 1 ? "" : A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(endLine), t1.getOffset$1(endLine + 1)), 0, null);
      } else
        endOffset = endLine === t1._lineStarts.length - 1 ? t1._decodedChars.length : t1.getOffset$1(endLine + 1);
      return A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(t1.getLine$1(_this._file$_start)), endOffset), 0, null);
    },
    compareTo$1(_, other) {
      var result;
      type$.SourceSpan._as(other);
      if (!(other instanceof A._FileSpan))
        return this.super$SourceSpanMixin$compareTo(0, other);
      result = B.JSInt_methods.compareTo$1(this._file$_start, other._file$_start);
      return result === 0 ? B.JSInt_methods.compareTo$1(this._end, other._end) : result;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!(other instanceof A._FileSpan))
        return _this.super$SourceSpanMixin$$eq(0, other);
      return _this._file$_start === other._file$_start && _this._end === other._end && J.$eq$(_this.file.url, other.file.url);
    },
    get$hashCode(_) {
      return A.Object_hash(this._file$_start, this._end, this.file.url, B.C_SentinelValue);
    },
    $isSourceSpanWithContext: 1
  };
  A.Highlighter.prototype = {
    highlight$0() {
      var t2, highlightsByColumn, t3, t4, i, line, lastLine, t5, t6, t7, t8, t9, t10, t11, index, primaryIdx, primary, _i, _this = this, _null = null,
        t1 = _this._lines;
      _this._writeFileStart$1(B.JSArray_methods.get$first(t1).url);
      t2 = _this._maxMultilineSpans;
      highlightsByColumn = A.List_List$filled(t2, _null, false, type$.nullable__Highlight);
      for (t3 = _this._highlighter$_buffer, t2 = t2 !== 0, t4 = _this._primaryColor, i = 0; i < t1.length; ++i) {
        line = t1[i];
        if (i > 0) {
          lastLine = t1[i - 1];
          t5 = lastLine.url;
          t6 = line.url;
          if (!J.$eq$(t5, t6)) {
            _this._writeSidebar$1$end("\u2575");
            t3._contents += "\n";
            _this._writeFileStart$1(t6);
          } else if (lastLine.number + 1 !== line.number) {
            _this._writeSidebar$1$text("...");
            t3._contents += "\n";
          }
        }
        for (t5 = line.highlights, t6 = A._arrayInstanceType(t5)._eval$1("ReversedListIterable<1>"), t7 = new A.ReversedListIterable(t5, t6), t7 = new A.ListIterator(t7, t7.get$length(0), t6._eval$1("ListIterator<ListIterable.E>")), t6 = t6._eval$1("ListIterable.E"), t8 = line.number, t9 = line.text; t7.moveNext$0();) {
          t10 = t7.__internal$_current;
          if (t10 == null)
            t10 = t6._as(t10);
          t11 = t10.span;
          if (t11.get$start().get$line() !== t11.get$end().get$line() && t11.get$start().get$line() === t8 && _this._isOnlyWhitespace$1(B.JSString_methods.substring$2(t9, 0, t11.get$start().get$column()))) {
            index = B.JSArray_methods.indexOf$1(highlightsByColumn, _null);
            if (index < 0)
              A.throwExpression(A.ArgumentError$(A.S(highlightsByColumn) + " contains no null elements.", _null));
            B.JSArray_methods.$indexSet(highlightsByColumn, index, t10);
          }
        }
        _this._writeSidebar$1$line(t8);
        t3._contents += " ";
        _this._writeMultilineHighlights$2(line, highlightsByColumn);
        if (t2)
          t3._contents += " ";
        primaryIdx = B.JSArray_methods.indexWhere$1(t5, new A.Highlighter_highlight_closure());
        if (primaryIdx === -1)
          primary = _null;
        else {
          if (!(primaryIdx >= 0 && primaryIdx < t5.length))
            return A.ioore(t5, primaryIdx);
          primary = t5[primaryIdx];
        }
        t6 = primary != null;
        if (t6) {
          t7 = primary.span;
          t10 = t7.get$start().get$line() === t8 ? t7.get$start().get$column() : 0;
          _this._writeHighlightedText$4$color(t9, t10, t7.get$end().get$line() === t8 ? t7.get$end().get$column() : t9.length, t4);
        } else
          _this._writeText$1(t9);
        t3._contents += "\n";
        if (t6)
          _this._writeIndicator$3(line, primary, highlightsByColumn);
        for (t6 = t5.length, _i = 0; _i < t6; ++_i) {
          t5[_i].toString;
          continue;
        }
      }
      _this._writeSidebar$1$end("\u2575");
      t1 = t3._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _writeFileStart$1(url) {
      var t1, t2, _this = this;
      if (!_this._multipleFiles || !type$.Uri._is(url))
        _this._writeSidebar$1$end("\u2577");
      else {
        _this._writeSidebar$1$end("\u250c");
        _this._colorize$1$2$color(new A.Highlighter__writeFileStart_closure(_this), "\x1b[34m", type$.void);
        t1 = _this._highlighter$_buffer;
        t2 = " " + $.$get$context().prettyUri$1(url);
        t1._contents += t2;
      }
      _this._highlighter$_buffer._contents += "\n";
    },
    _writeMultilineHighlights$3$current(line, highlightsByColumn, current) {
      var t1, currentColor, t2, t3, t4, t5, t6, foundCurrent, _i, highlight, t7, startLine, endLine, _this = this, _box_0 = {};
      type$.List_nullable__Highlight._as(highlightsByColumn);
      _box_0.openedOnThisLine = false;
      _box_0.openedOnThisLineColor = null;
      t1 = current == null;
      if (t1)
        currentColor = null;
      else
        currentColor = _this._primaryColor;
      for (t2 = highlightsByColumn.length, t3 = type$.Null, t4 = _this._primaryColor, t1 = !t1, t5 = _this._highlighter$_buffer, t6 = type$.void, foundCurrent = false, _i = 0; _i < t2; ++_i) {
        highlight = highlightsByColumn[_i];
        t7 = highlight == null;
        startLine = t7 ? null : highlight.span.get$start().get$line();
        endLine = t7 ? null : highlight.span.get$end().get$line();
        if (t1 && highlight === current) {
          _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure(_this, startLine, line), currentColor, t3);
          foundCurrent = true;
        } else if (foundCurrent)
          _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure0(_this, highlight), currentColor, t3);
        else if (t7)
          if (_box_0.openedOnThisLine)
            _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure1(_this), _box_0.openedOnThisLineColor, t6);
          else
            t5._contents += " ";
        else
          _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure2(_box_0, _this, current, startLine, line, highlight, endLine), t4, t3);
      }
    },
    _writeMultilineHighlights$2(line, highlightsByColumn) {
      return this._writeMultilineHighlights$3$current(line, highlightsByColumn, null);
    },
    _writeHighlightedText$4$color(text, startColumn, endColumn, color) {
      var _this = this;
      _this._writeText$1(B.JSString_methods.substring$2(text, 0, startColumn));
      _this._colorize$1$2$color(new A.Highlighter__writeHighlightedText_closure(_this, text, startColumn, endColumn), color, type$.void);
      _this._writeText$1(B.JSString_methods.substring$2(text, endColumn, text.length));
    },
    _writeIndicator$3(line, highlight, highlightsByColumn) {
      var color, t1, t2, _this = this;
      type$.List_nullable__Highlight._as(highlightsByColumn);
      color = _this._primaryColor;
      t1 = highlight.span;
      if (t1.get$start().get$line() === t1.get$end().get$line()) {
        _this._writeSidebar$0();
        t1 = _this._highlighter$_buffer;
        t1._contents += " ";
        _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
        if (highlightsByColumn.length !== 0)
          t1._contents += " ";
        _this._writeLabel$3(highlight, highlightsByColumn, _this._colorize$1$2$color(new A.Highlighter__writeIndicator_closure(_this, line, highlight), color, type$.int));
      } else {
        t2 = line.number;
        if (t1.get$start().get$line() === t2) {
          if (B.JSArray_methods.contains$1(highlightsByColumn, highlight))
            return;
          A.replaceFirstNull(highlightsByColumn, highlight, type$._Highlight);
          _this._writeSidebar$0();
          t1 = _this._highlighter$_buffer;
          t1._contents += " ";
          _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
          _this._colorize$1$2$color(new A.Highlighter__writeIndicator_closure0(_this, line, highlight), color, type$.void);
          t1._contents += "\n";
        } else if (t1.get$end().get$line() === t2) {
          t1 = t1.get$end().get$column();
          if (t1 === line.text.length) {
            A.replaceWithNull(highlightsByColumn, highlight, type$._Highlight);
            return;
          }
          _this._writeSidebar$0();
          _this._highlighter$_buffer._contents += " ";
          _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
          _this._writeLabel$3(highlight, highlightsByColumn, _this._colorize$1$2$color(new A.Highlighter__writeIndicator_closure1(_this, false, line, highlight), color, type$.int));
          A.replaceWithNull(highlightsByColumn, highlight, type$._Highlight);
        }
      }
    },
    _writeArrow$3$beginning(line, column, beginning) {
      var t1 = beginning ? 0 : 1,
        t2 = this._highlighter$_buffer;
      t1 = B.JSString_methods.$mul("\u2500", 1 + column + this._countTabs$1(B.JSString_methods.substring$2(line.text, 0, column + t1)) * 3);
      t1 = t2._contents += t1;
      t2._contents = t1 + "^";
    },
    _writeArrow$2(line, column) {
      return this._writeArrow$3$beginning(line, column, true);
    },
    _writeLabel$3(highlight, highlightsByColumn, underlineLength) {
      type$.List_nullable__Highlight._as(highlightsByColumn);
      this._highlighter$_buffer._contents += "\n";
      return;
    },
    _writeText$1(text) {
      var t1, t2, t3, t4;
      for (t1 = new A.CodeUnits(text), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListBase.E>")), t3 = this._highlighter$_buffer, t2 = t2._eval$1("ListBase.E"); t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        if (t4 == null)
          t4 = t2._as(t4);
        if (t4 === 9) {
          t4 = B.JSString_methods.$mul(" ", 4);
          t3._contents += t4;
        } else {
          t4 = A.Primitives_stringFromCharCode(t4);
          t3._contents += t4;
        }
      }
    },
    _writeSidebar$3$end$line$text(end, line, text) {
      var t1 = {};
      t1.text = text;
      if (line != null)
        t1.text = B.JSInt_methods.toString$0(line + 1);
      this._colorize$1$2$color(new A.Highlighter__writeSidebar_closure(t1, this, end), "\x1b[34m", type$.Null);
    },
    _writeSidebar$1$end(end) {
      return this._writeSidebar$3$end$line$text(end, null, null);
    },
    _writeSidebar$1$text(text) {
      return this._writeSidebar$3$end$line$text(null, null, text);
    },
    _writeSidebar$1$line(line) {
      return this._writeSidebar$3$end$line$text(null, line, null);
    },
    _writeSidebar$0() {
      return this._writeSidebar$3$end$line$text(null, null, null);
    },
    _countTabs$1(text) {
      var t1, t2, count, t3;
      for (t1 = new A.CodeUnits(text), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListBase.E>")), t2 = t2._eval$1("ListBase.E"), count = 0; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if ((t3 == null ? t2._as(t3) : t3) === 9)
          ++count;
      }
      return count;
    },
    _isOnlyWhitespace$1(text) {
      var t1, t2, t3;
      for (t1 = new A.CodeUnits(text), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListBase.E>")), t2 = t2._eval$1("ListBase.E"); t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (t3 !== 32 && t3 !== 9)
          return false;
      }
      return true;
    },
    _colorize$1$2$color(callback, color, $T) {
      var t1, result;
      $T._eval$1("0()")._as(callback);
      t1 = this._primaryColor != null;
      if (t1 && color != null)
        this._highlighter$_buffer._contents += color;
      result = callback.call$0();
      if (t1 && color != null)
        this._highlighter$_buffer._contents += "\x1b[0m";
      return result;
    }
  };
  A.Highlighter_closure.prototype = {
    call$0() {
      return this.color;
    },
    $signature: 348
  };
  A.Highlighter$__closure.prototype = {
    call$1(line) {
      var t1 = type$._Line._as(line).highlights,
        t2 = A._arrayInstanceType(t1);
      return new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Highlighter$___closure()), t2._eval$1("WhereIterable<1>")).get$length(0);
    },
    $signature: 349
  };
  A.Highlighter$___closure.prototype = {
    call$1(highlight) {
      var t1 = type$._Highlight._as(highlight).span;
      return t1.get$start().get$line() !== t1.get$end().get$line();
    },
    $signature: 40
  };
  A.Highlighter$__closure0.prototype = {
    call$1(line) {
      return type$._Line._as(line).url;
    },
    $signature: 351
  };
  A.Highlighter__collateLines_closure.prototype = {
    call$1(highlight) {
      var t1 = type$._Highlight._as(highlight).span.get$sourceUrl();
      return t1 == null ? new A.Object() : t1;
    },
    $signature: 352
  };
  A.Highlighter__collateLines_closure0.prototype = {
    call$2(highlight1, highlight2) {
      var t1 = type$._Highlight;
      return t1._as(highlight1).span.compareTo$1(0, t1._as(highlight2).span);
    },
    $signature: 353
  };
  A.Highlighter__collateLines_closure1.prototype = {
    call$1(entry) {
      var url, highlightsForFile, lines, t1, t2, t3, t4, context, t5, linesBeforeSpan, lineNumber, _i, line, activeHighlights, highlightIndex, oldHighlightLength, t6;
      type$.MapEntry_of_Object_and_List__Highlight._as(entry);
      url = entry.key;
      highlightsForFile = entry.value;
      lines = A._setArrayType([], type$.JSArray__Line);
      for (t1 = J.getInterceptor$ax(highlightsForFile), t2 = t1.get$iterator(highlightsForFile), t3 = type$.JSArray__Highlight; t2.moveNext$0();) {
        t4 = t2.get$current().span;
        context = t4.get$context();
        t5 = A.findLineStart(context, t4.get$text(), t4.get$start().get$column());
        t5.toString;
        linesBeforeSpan = B.JSString_methods.allMatches$1("\n", B.JSString_methods.substring$2(context, 0, t5)).get$length(0);
        lineNumber = t4.get$start().get$line() - linesBeforeSpan;
        for (t4 = context.split("\n"), t5 = t4.length, _i = 0; _i < t5; ++_i) {
          line = t4[_i];
          if (lines.length === 0 || lineNumber > B.JSArray_methods.get$last(lines).number)
            B.JSArray_methods.add$1(lines, new A._Line(line, lineNumber, url, A._setArrayType([], t3)));
          ++lineNumber;
        }
      }
      activeHighlights = A._setArrayType([], t3);
      for (t2 = lines.length, t3 = type$.bool_Function__Highlight, highlightIndex = 0, _i = 0; _i < lines.length; lines.length === t2 || (0, A.throwConcurrentModificationError)(lines), ++_i) {
        line = lines[_i];
        t4 = t3._as(new A.Highlighter__collateLines__closure(line));
        if (!!activeHighlights.fixed$length)
          A.throwExpression(A.UnsupportedError$("removeWhere"));
        B.JSArray_methods._removeWhere$2(activeHighlights, t4, true);
        oldHighlightLength = activeHighlights.length;
        for (t4 = t1.skip$1(highlightsForFile, highlightIndex), t5 = t4.$ti, t4 = new A.ListIterator(t4, t4.get$length(0), t5._eval$1("ListIterator<ListIterable.E>")), t5 = t5._eval$1("ListIterable.E"); t4.moveNext$0();) {
          t6 = t4.__internal$_current;
          if (t6 == null)
            t6 = t5._as(t6);
          if (t6.span.get$start().get$line() > line.number)
            break;
          B.JSArray_methods.add$1(activeHighlights, t6);
        }
        highlightIndex += activeHighlights.length - oldHighlightLength;
        B.JSArray_methods.addAll$1(line.highlights, activeHighlights);
      }
      return lines;
    },
    $signature: 354
  };
  A.Highlighter__collateLines__closure.prototype = {
    call$1(highlight) {
      return type$._Highlight._as(highlight).span.get$end().get$line() < this.line.number;
    },
    $signature: 40
  };
  A.Highlighter_highlight_closure.prototype = {
    call$1(highlight) {
      type$._Highlight._as(highlight);
      return true;
    },
    $signature: 40
  };
  A.Highlighter__writeFileStart_closure.prototype = {
    call$0() {
      var t1 = this.$this._highlighter$_buffer,
        t2 = B.JSString_methods.$mul("\u2500", 2) + ">";
      t1._contents += t2;
      return null;
    },
    $signature: 0
  };
  A.Highlighter__writeMultilineHighlights_closure.prototype = {
    call$0() {
      var t1 = this.$this._highlighter$_buffer,
        t2 = this.startLine === this.line.number ? "\u250c" : "\u2514";
      t1._contents += t2;
    },
    $signature: 16
  };
  A.Highlighter__writeMultilineHighlights_closure0.prototype = {
    call$0() {
      var t1 = this.$this._highlighter$_buffer,
        t2 = this.highlight == null ? "\u2500" : "\u253c";
      t1._contents += t2;
    },
    $signature: 16
  };
  A.Highlighter__writeMultilineHighlights_closure1.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += "\u2500";
      return null;
    },
    $signature: 0
  };
  A.Highlighter__writeMultilineHighlights_closure2.prototype = {
    call$0() {
      var t2, t3, _this = this,
        t1 = _this._box_0,
        vertical = t1.openedOnThisLine ? "\u253c" : "\u2502";
      if (_this.current != null)
        _this.$this._highlighter$_buffer._contents += vertical;
      else {
        t2 = _this.line;
        t3 = t2.number;
        if (_this.startLine === t3) {
          t2 = _this.$this;
          t2._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights__closure(t1, t2), t1.openedOnThisLineColor, type$.Null);
          t1.openedOnThisLine = true;
          if (t1.openedOnThisLineColor == null)
            t1.openedOnThisLineColor = t2._primaryColor;
        } else {
          t2 = _this.endLine === t3 && _this.highlight.span.get$end().get$column() === t2.text.length;
          t3 = _this.$this;
          if (t2)
            t3._highlighter$_buffer._contents += "\u2514";
          else
            t3._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights__closure0(t3, vertical), t1.openedOnThisLineColor, type$.Null);
        }
      }
    },
    $signature: 16
  };
  A.Highlighter__writeMultilineHighlights__closure.prototype = {
    call$0() {
      var t1 = this.$this._highlighter$_buffer,
        t2 = this._box_0.openedOnThisLine ? "\u252c" : "\u250c";
      t1._contents += t2;
    },
    $signature: 16
  };
  A.Highlighter__writeMultilineHighlights__closure0.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += this.vertical;
    },
    $signature: 16
  };
  A.Highlighter__writeHighlightedText_closure.prototype = {
    call$0() {
      var _this = this;
      return _this.$this._writeText$1(B.JSString_methods.substring$2(_this.text, _this.startColumn, _this.endColumn));
    },
    $signature: 0
  };
  A.Highlighter__writeIndicator_closure.prototype = {
    call$0() {
      var tabsBefore, tabsInside,
        t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = t2._contents,
        t4 = this.highlight.span,
        startColumn = t4.get$start().get$column(),
        endColumn = t4.get$end().get$column();
      t4 = this.line.text;
      tabsBefore = t1._countTabs$1(B.JSString_methods.substring$2(t4, 0, startColumn));
      tabsInside = t1._countTabs$1(B.JSString_methods.substring$2(t4, startColumn, endColumn));
      startColumn += tabsBefore * 3;
      t4 = B.JSString_methods.$mul(" ", startColumn);
      t2._contents += t4;
      t4 = B.JSString_methods.$mul("^", Math.max(endColumn + (tabsBefore + tabsInside) * 3 - startColumn, 1));
      t4 = t2._contents += t4;
      return t4.length - t3.length;
    },
    $signature: 29
  };
  A.Highlighter__writeIndicator_closure0.prototype = {
    call$0() {
      return this.$this._writeArrow$2(this.line, this.highlight.span.get$start().get$column());
    },
    $signature: 0
  };
  A.Highlighter__writeIndicator_closure1.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = t2._contents;
      if (_this.coversWholeLine) {
        t1 = B.JSString_methods.$mul("\u2500", 3);
        t2._contents += t1;
      } else
        t1._writeArrow$3$beginning(_this.line, Math.max(_this.highlight.span.get$end().get$column() - 1, 0), false);
      return t2._contents.length - t3.length;
    },
    $signature: 29
  };
  A.Highlighter__writeSidebar_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = this._box_0.text;
      if (t3 == null)
        t3 = "";
      t1 = B.JSString_methods.padRight$1(t3, t1._paddingBeforeSidebar);
      t1 = t2._contents += t1;
      t3 = this.end;
      t2._contents = t1 + (t3 == null ? "\u2502" : t3);
    },
    $signature: 16
  };
  A._Highlight.prototype = {
    toString$0(_) {
      var t1 = this.span;
      t1 = "" + "primary " + ("" + t1.get$start().get$line() + ":" + t1.get$start().get$column() + "-" + t1.get$end().get$line() + ":" + t1.get$end().get$column());
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._Highlight_closure.prototype = {
    call$0() {
      var t2, t3, t4, t5,
        t1 = this.span;
      if (!(type$.SourceSpanWithContext._is(t1) && A.findLineStart(t1.get$context(), t1.get$text(), t1.get$start().get$column()) != null)) {
        t2 = A.SourceLocation$(t1.get$start().get$offset(), 0, 0, t1.get$sourceUrl());
        t3 = t1.get$end().get$offset();
        t4 = t1.get$sourceUrl();
        t5 = A.countCodeUnits(t1.get$text(), 10);
        t1 = A.SourceSpanWithContext$(t2, A.SourceLocation$(t3, A._Highlight__lastLineLength(t1.get$text()), t5, t4), t1.get$text(), t1.get$text());
      }
      return A._Highlight__normalizeEndOfLine(A._Highlight__normalizeTrailingNewline(A._Highlight__normalizeNewlines(t1)));
    },
    $signature: 355
  };
  A._Line.prototype = {
    toString$0(_) {
      return "" + this.number + ': "' + this.text + '" (' + B.JSArray_methods.join$1(this.highlights, ", ") + ")";
    }
  };
  A.SourceLocation.prototype = {
    distance$1(other) {
      var t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t1) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return Math.abs(this.offset - other.get$offset());
    },
    compareTo$1(_, other) {
      var t1;
      type$.SourceLocation._as(other);
      t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t1) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return this.offset - other.get$offset();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation._is(other) && J.$eq$(this.sourceUrl, other.get$sourceUrl()) && this.offset === other.get$offset();
    },
    get$hashCode(_) {
      var t1 = this.sourceUrl;
      t1 = t1 == null ? null : t1.get$hashCode(t1);
      if (t1 == null)
        t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var _this = this,
        t1 = A.getRuntimeTypeOfDartObject(_this).toString$0(0),
        source = _this.sourceUrl;
      return "<" + t1 + ": " + _this.offset + " " + (A.S(source == null ? "unknown source" : source) + ":" + (_this.line + 1) + ":" + (_this.column + 1)) + ">";
    },
    $isComparable: 1,
    get$sourceUrl() {
      return this.sourceUrl;
    },
    get$offset() {
      return this.offset;
    },
    get$line() {
      return this.line;
    },
    get$column() {
      return this.column;
    }
  };
  A.SourceLocationMixin.prototype = {
    distance$1(other) {
      if (!J.$eq$(this.file.url, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(this.get$sourceUrl()) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return Math.abs(this.offset - other.get$offset());
    },
    compareTo$1(_, other) {
      type$.SourceLocation._as(other);
      if (!J.$eq$(this.file.url, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(this.get$sourceUrl()) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return this.offset - other.get$offset();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation._is(other) && J.$eq$(this.file.url, other.get$sourceUrl()) && this.offset === other.get$offset();
    },
    get$hashCode(_) {
      var t1 = this.file.url;
      t1 = t1 == null ? null : t1.get$hashCode(t1);
      if (t1 == null)
        t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var t1 = A.getRuntimeTypeOfDartObject(this).toString$0(0),
        t2 = this.offset,
        t3 = this.file,
        source = t3.url;
      return "<" + t1 + ": " + t2 + " " + (A.S(source == null ? "unknown source" : source) + ":" + (t3.getLine$1(t2) + 1) + ":" + (t3.getColumn$1(t2) + 1)) + ">";
    },
    $isComparable: 1,
    $isSourceLocation: 1
  };
  A.SourceSpanBase.prototype = {
    SourceSpanBase$3(start, end, text) {
      var t3,
        t1 = this.end,
        t2 = this.start;
      if (!J.$eq$(t1.get$sourceUrl(), t2.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t2.get$sourceUrl()) + '" and  "' + A.S(t1.get$sourceUrl()) + "\" don't match.", null));
      else if (t1.get$offset() < t2.get$offset())
        throw A.wrapException(A.ArgumentError$("End " + t1.toString$0(0) + " must come after start " + t2.toString$0(0) + ".", null));
      else {
        t3 = this.text;
        if (t3.length !== t2.distance$1(t1))
          throw A.wrapException(A.ArgumentError$('Text "' + t3 + '" must be ' + t2.distance$1(t1) + " characters long.", null));
      }
    },
    get$start() {
      return this.start;
    },
    get$end() {
      return this.end;
    },
    get$text() {
      return this.text;
    }
  };
  A.SourceSpanException.prototype = {
    get$message() {
      return this._span_exception$_message;
    },
    toString$0(_) {
      var t3, t4, highlight,
        t1 = this._span,
        t2 = "" + ("line " + (t1.get$start().get$line() + 1) + ", column " + (t1.get$start().get$column() + 1));
      if (t1.get$sourceUrl() != null) {
        t3 = t1.get$sourceUrl();
        t4 = $.$get$context();
        t3.toString;
        t3 = t2 + (" of " + t4.prettyUri$1(t3));
        t2 = t3;
      }
      t2 += ": " + this._span_exception$_message;
      highlight = t1.highlight$1$color(null);
      t1 = highlight.length !== 0 ? t2 + "\n" + highlight : t2;
      return "Error on " + (t1.charCodeAt(0) == 0 ? t1 : t1);
    },
    $isException: 1
  };
  A.SourceSpanFormatException.prototype = {
    get$offset() {
      var t1 = this._span;
      t1 = A.FileLocation$_(t1.file, t1._file$_start);
      return t1.offset;
    },
    $isFormatException: 1,
    get$source() {
      return this.source;
    }
  };
  A.SourceSpanMixin.prototype = {
    get$sourceUrl() {
      return this.get$start().get$sourceUrl();
    },
    get$length(_) {
      return this.get$end().get$offset() - this.get$start().get$offset();
    },
    compareTo$1(_, other) {
      var result;
      type$.SourceSpan._as(other);
      result = this.get$start().compareTo$1(0, other.get$start());
      return result === 0 ? this.get$end().compareTo$1(0, other.get$end()) : result;
    },
    highlight$1$color(color) {
      var _this = this;
      if (!type$.SourceSpanWithContext._is(_this) && _this.get$length(_this) === 0)
        return "";
      return A.Highlighter$(_this, color).highlight$0();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.SourceSpanMixin && this.get$start().$eq(0, other.get$start()) && this.get$end().$eq(0, other.get$end());
    },
    get$hashCode(_) {
      return A.Object_hash(this.get$start(), this.get$end(), B.C_SentinelValue, B.C_SentinelValue);
    },
    toString$0(_) {
      var _this = this;
      return "<" + A.getRuntimeTypeOfDartObject(_this).toString$0(0) + ": from " + _this.get$start().toString$0(0) + " to " + _this.get$end().toString$0(0) + ' "' + _this.get$text() + '">';
    },
    $isComparable: 1,
    $isSourceSpan: 1
  };
  A.SourceSpanWithContext.prototype = {
    get$context() {
      return this._context;
    }
  };
  A.StellarAccountAddress.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.StellarAccountAddress))
        return false;
      return other.baseAddress === this.baseAddress;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.baseAddress);
    }
  };
  A.StellarAddress.prototype = {
    toString$0(_) {
      return this.baseAddress;
    }
  };
  A.StellarAddressException.prototype = {};
  A.DartStellarPlugingException.prototype = {};
  A.StringScannerException.prototype = {
    get$source() {
      return A._asString(this.source);
    }
  };
  A.StringScanner.prototype = {
    get$lastMatch() {
      var _this = this;
      if (_this._position !== _this._lastMatchPosition)
        _this._lastMatch = null;
      return _this._lastMatch;
    },
    scan$1(pattern) {
      var success, _this = this,
        t1 = _this._lastMatch = J.matchAsPrefix$2$s(pattern, _this.string, _this._position);
      _this._lastMatchPosition = _this._position;
      success = t1 != null;
      if (success)
        _this._lastMatchPosition = _this._position = t1.get$end();
      return success;
    },
    expect$2$name(pattern, $name) {
      var t1;
      if (this.scan$1(pattern))
        return;
      if ($name == null)
        if (pattern instanceof A.JSSyntaxRegExp)
          $name = "/" + pattern.pattern + "/";
        else {
          t1 = J.toString$0$(pattern);
          t1 = A.stringReplaceAllUnchecked(t1, "\\", "\\\\");
          $name = '"' + A.stringReplaceAllUnchecked(t1, '"', '\\"') + '"';
        }
      this._fail$1($name);
    },
    expect$1(pattern) {
      return this.expect$2$name(pattern, null);
    },
    expectDone$0() {
      if (this._position === this.string.length)
        return;
      this._fail$1("no more input");
    },
    error$3$length$position(message, $length, position) {
      var t2, t3, t4, t5, sourceFile, end,
        t1 = this.string;
      if (position < 0)
        A.throwExpression(A.RangeError$("position must be greater than or equal to 0."));
      else if (position > t1.length)
        A.throwExpression(A.RangeError$("position must be less than or equal to the string length."));
      t2 = position + $length > t1.length;
      if (t2)
        A.throwExpression(A.RangeError$("position plus length must not go beyond the end of the string."));
      t2 = this.sourceUrl;
      t3 = new A.CodeUnits(t1);
      t4 = A._setArrayType([0], type$.JSArray_int);
      t5 = new Uint32Array(A._ensureNativeList(t3.toList$0(t3)));
      sourceFile = new A.SourceFile(t2, t4, t5);
      sourceFile.SourceFile$decoded$2$url(t3, t2);
      end = position + $length;
      if (end > t5.length)
        A.throwExpression(A.RangeError$("End " + end + string$.x20must_ + sourceFile.get$length(0) + "."));
      else if (position < 0)
        A.throwExpression(A.RangeError$("Start may not be negative, was " + position + "."));
      throw A.wrapException(new A.StringScannerException(t1, message, new A._FileSpan(sourceFile, position, end)));
    },
    _fail$1($name) {
      this.error$3$length$position("expected " + $name + ".", 0, this._position);
    }
  };
  A.TonContractException.prototype = {};
  A.WalletVersion.prototype = {
    toString$0(_) {
      return "WalletVersion." + this.name;
    }
  };
  A.WalletVersion_WalletVersion$fromValue_closure.prototype = {
    call$1(element) {
      return type$.WalletVersion._as(element).name === this.name;
    },
    $signature: 356
  };
  A.WalletVersion_WalletVersion$fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(new A.TonContractException("Cannot find WalletVersion from provided status", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 1
  };
  A.KeyException.prototype = {};
  A.TonPrivateKey.prototype = {};
  A.TonPublicKey.prototype = {};
  A.TonDartPluginException.prototype = {};
  A.EventStreamProvider.prototype = {};
  A._EventStream.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      return A._EventStreamSubscription$(this._target, this._eventType, onData, false, t1._precomputed1);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  A._EventStreamSubscription.prototype = {
    cancel$0() {
      var _this = this,
        emptyFuture = A.Future_Future$value(null, type$.void);
      if (_this._target == null)
        return emptyFuture;
      _this._unlisten$0();
      _this._streams$_onData = _this._target = null;
      return emptyFuture;
    },
    onData$1(handleData) {
      var t1, _this = this;
      _this.$ti._eval$1("~(1)?")._as(handleData);
      if (_this._target == null)
        throw A.wrapException(A.StateError$("Subscription has been canceled."));
      _this._unlisten$0();
      t1 = A._wrapZone(new A._EventStreamSubscription_onData_closure(handleData), type$.JSObject);
      t1 = t1 == null ? null : A._functionToJS1(t1);
      _this._streams$_onData = t1;
      _this._tryResume$0();
    },
    pause$0() {
      if (this._target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    resume$0() {
      var _this = this;
      if (_this._target == null || _this._pauseCount <= 0)
        return;
      --_this._pauseCount;
      _this._tryResume$0();
    },
    _tryResume$0() {
      var _this = this,
        t1 = _this._streams$_onData;
      if (t1 != null && _this._pauseCount <= 0)
        _this._target.addEventListener(_this._eventType, t1, false);
    },
    _unlisten$0() {
      var t1 = this._streams$_onData;
      if (t1 != null)
        this._target.removeEventListener(this._eventType, t1, false);
    },
    $isStreamSubscription: 1
  };
  A._EventStreamSubscription_closure.prototype = {
    call$1(e) {
      return this.onData.call$1(type$.JSObject._as(e));
    },
    $signature: 119
  };
  A._EventStreamSubscription_onData_closure.prototype = {
    call$1(e) {
      return this.handleData.call$1(type$.JSObject._as(e));
    },
    $signature: 119
  };
  A.XRPKeyAlgorithm.prototype = {};
  A.XRPPrivateKey.prototype = {};
  A.XRPAddress.prototype = {
    toString$0(_) {
      return this.address;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this !== other)
        t1 = other instanceof A.XRPAddress && this.address === other.address && this.tag == other.tag;
      else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.address, this.tag]);
    }
  };
  A.XRPLAddressCodecException.prototype = {
    toString$0(_) {
      return this.message;
    },
    $isException: 1,
    $isBlockchainUtilsException: 1,
    get$message() {
      return this.message;
    }
  };
  A._send_closure.prototype = {
    call$1(e) {
      var e0, exception;
      type$.WorkerMessage_dynamic_dynamic._as(e);
      try {
        self.postMessage(A.BytesUtils_toHexString(type$.List_int._as(e.serialize$0()), true, null));
      } catch (exception) {
        e0 = A.unwrapException(exception);
        A.print("\x1b[31m" + ("post message rror " + A.S(e0)) + "\x1b[0m");
      }
    },
    $signature: 358
  };
  A._WebIsolateInitialData.prototype = {
    get$crypto() {
      var value = this.___WebIsolateInitialData_crypto_FI;
      if (value === $) {
        value !== $ && A.throwLateFieldADI("crypto");
        value = this.___WebIsolateInitialData_crypto_FI = new A.EncryptedIsolateMessageController(new A._WebIsolateInitialData_crypto_closure(this), A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.IsolateStreamRequest_dynamic_dynamic));
      }
      return value;
    },
    _getResult$1(message) {
      return this._getResult$body$_WebIsolateInitialData(type$.List_int._as(message));
    },
    _getResult$body$_WebIsolateInitialData(message) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Record_2_IsolateResponseMessage_dynamic_IsolateMessageArgs_and_bool),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, msg, messageBytes, encryptedMessage, workerMessage, encryptedPart, response, e, t1, t2, t3, exception, id, encrypted, $async$exception;
      var $async$_getResult$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              id = null;
              encrypted = null;
              $async$handler = 4;
              A.print("\x1b[33mcalled!\x1b[0m");
              msg = A.WorkerMessage_deserialize(message);
              encrypted = msg.type === B.WorkerMessageType_Iao;
              id = msg.id;
              messageBytes = msg.get$message();
              if (A.boolConversionCheck(encrypted)) {
                t1 = msg;
                t2 = type$.WorkerEncryptedMessage;
                A.checkTypeBound(t2, type$.WorkerMessage_dynamic_dynamic, "T", "cast");
                if (!(t1 instanceof A.WorkerEncryptedMessage))
                  A.throwExpression(A.WalletException$invalidArgruments(A._setArrayType([A.createRuntimeType(t2).toString$0(0), A.Primitives_objectToHumanReadableString(t1)], type$.JSArray_String)));
                encryptedMessage = t2._as(t1);
                t1 = $async$self.chacha.decrypt$2(encryptedMessage.nonce, encryptedMessage.message);
                t1.toString;
                messageBytes = t1;
              }
              workerMessage = A.WorkerCborRequestMessage_WorkerCborRequestMessage$deserialize(messageBytes);
              A.print("\x1b[33m" + ("dec " + workerMessage.args.get$type().toString$0(0)) + "\x1b[0m");
              encryptedPart = null;
              if (workerMessage.encryptedPart != null) {
                t1 = $async$self.chacha.decrypt$2(workerMessage.encryptedPart.nonce, workerMessage.encryptedPart.message);
                t1.toString;
                encryptedPart = t1;
              }
              t1 = $async$self.get$crypto();
              t2 = workerMessage.args;
              t3 = id;
              $async$goto = 7;
              return A._asyncAwait(t1.handleMessage$3$args$encryptedPart$id(t2, encryptedPart, t3), $async$_getResult$1);
            case 7:
              // returning from await.
              response = $async$result;
              t3 = encrypted;
              $async$returnValue = new A._Record_2(response, t3);
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              A.getTraceFromException($async$exception);
              A.print("\x1b[31m" + ("isolate result failed " + A.S(e) + " ") + "\x1b[0m");
              t1 = id;
              if (t1 == null)
                t1 = -1;
              t2 = encrypted;
              if (t2 == null)
                t2 = true;
              $async$returnValue = new A._Record_2(new A.IsolateCborResponseMessage(B.MessageArgsException_data_verification_failed, t1), t2);
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$_getResult$1, $async$completer);
    },
    sentResult$1(message) {
      return this.sentResult$body$_WebIsolateInitialData(message);
    },
    sentResult$body$_WebIsolateInitialData(message) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WorkerMessage_dynamic_dynamic),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$self = this, messagesBytes, result, isEncrypted, r, encrypted, e, exception, $async$exception;
      var $async$sentResult$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              messagesBytes = A.BytesUtils_tryFromHexString(message);
              result = null;
              isEncrypted = true;
              $async$goto = messagesBytes == null ? 7 : 9;
              break;
            case 7:
              // then
              result = B.IsolateCborResponseMessage_YfX;
              // goto join
              $async$goto = 8;
              break;
            case 9:
              // else
              $async$goto = 10;
              return A._asyncAwait($async$self._getResult$1(messagesBytes), $async$sentResult$1);
            case 10:
              // returning from await.
              r = $async$result;
              result = r._0;
              isEncrypted = r._1;
            case 8:
              // join
              encrypted = $async$self._toEncryptedMessage$2(type$.IsolateCborResponseMessage._as(result), isEncrypted);
              $async$returnValue = encrypted;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              e = A.unwrapException($async$exception);
              A.print("worker error " + A.S(e));
              throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return A._asyncStartSync($async$sentResult$1, $async$completer);
    },
    _toEncryptedMessage$2(request, isEncrypted) {
      var r;
      if (isEncrypted) {
        r = $.$get$QuickCrypto__generateRandom().call$1(16);
        return A.WorkerEncryptedMessage$(request.id, this.chacha.encrypt$2(r, request.toCbor$0().encode$0()), r);
      }
      return A.WorkerNoneEncryptedMessage$(request.id, request.toCbor$0().encode$0());
    }
  };
  A._WebIsolateInitialData_crypto_closure.prototype = {
    call$1(message) {
      var encrypted = this.$this._toEncryptedMessage$2(type$.IsolateResponseMessage_dynamic_IsolateMessageArgs._as(message), true);
      self.postMessage(A.BytesUtils_toHexString(type$.List_int._as(encrypted.serialize$0()), true, null));
    },
    $signature: 359
  };
  (function aliases() {
    var _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A.JsLinkedHashMap.prototype;
    _.super$JsLinkedHashMap$internalContainsKey = _.internalContainsKey$1;
    _.super$JsLinkedHashMap$internalGet = _.internalGet$1;
    _.super$JsLinkedHashMap$internalSet = _.internalSet$2;
    _.super$JsLinkedHashMap$internalRemove = _.internalRemove$1;
    _ = A._BufferingStreamSubscription.prototype;
    _.super$_BufferingStreamSubscription$_add = _._async$_add$1;
    _.super$_BufferingStreamSubscription$_addError = _._addError$2;
    _.super$_BufferingStreamSubscription$_close = _._close$0;
    _ = A._StreamSinkTransformer.prototype;
    _.super$_StreamSinkTransformer$bind = _.bind$1;
    _ = A.ListBase.prototype;
    _.super$ListBase$setRange = _.setRange$4;
    _ = A.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = A.Bip32Slip10Ed25519.prototype;
    _.super$Bip32Slip10Ed25519$childKey = _.childKey$1;
    _ = A.EDPoint.prototype;
    _.super$EDPoint$$add = _.$add;
    _.super$EDPoint$$negate = _.$negate;
    _.super$EDPoint$$mul = _.$mul;
    _ = A._Keccack.prototype;
    _.super$_Keccack$reset = _.reset$0;
    _.super$_Keccack$update = _.update$1;
    _ = A.BaseRequest.prototype;
    _.super$BaseRequest$finalize = _.finalize$0;
    _ = A.MoneroOutput.prototype;
    _.super$MoneroOutput$toJson = _.toJson$0;
    _ = A._Client.prototype;
    _.super$_Client$toHeaders = _.toHeaders$4$body$headers$method$uri;
    _.super$_Client$call = _.call$5$headers$method$onRetry$response$uri;
    _ = A.LiveListenable.prototype;
    _.super$LiveListenable$value = _.set$value;
    _ = A.IsolateStreamRequest.prototype;
    _.super$IsolateStreamRequest$add = _.add$1;
    _ = A.WorkerMessage.prototype;
    _.super$WorkerMessage$toJson = _.toJson$0;
    _ = A.SourceSpanMixin.prototype;
    _.super$SourceSpanMixin$compareTo = _.compareTo$1;
    _.super$SourceSpanMixin$$eq = _.$eq;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance_1_u = hunkHelpers._instance_1u,
      _static = hunkHelpers.installStaticTearOff,
      _instance_0_i = hunkHelpers._instance_0i;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 120);
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 54);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 54);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 54);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static_1(A, "async___nullDataHandler$closure", "_nullDataHandler", 99);
    _static_2(A, "async___nullErrorHandler$closure", "_nullErrorHandler", 32);
    _static_0(A, "async___nullDoneHandler$closure", "_nullDoneHandler", 0);
    var _;
    _instance_0_u(_ = A._BroadcastSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance(A._Completer.prototype, "get$completeError", 0, 1, null, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 58, 0, 0);
    _instance_2_u(A._Future.prototype, "get$_completeError", "_completeError$2", 32);
    _instance_0_u(_ = A._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_i(_ = A._StreamSinkWrapper.prototype, "get$add", "add$1", 30);
    _instance(_, "get$addError", 0, 1, null, ["call$2", "call$1"], ["addError$2", "addError$1"], 58, 0, 0);
    _instance_0_u(_, "get$close", "close$0", 146);
    _instance_0_u(_ = A._BufferingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_0_u(A._DoneStreamSubscription.prototype, "get$_onMicrotask", "_onMicrotask$0", 0);
    _instance_0_u(_ = A._SinkTransformerStreamSubscription.prototype, "get$_onPause", "_onPause$0", 0);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 0);
    _instance_1_u(_, "get$_handleData", "_handleData$1", 30);
    _instance_2_u(_, "get$_handleError", "_handleError$2", 32);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 0);
    _static_2(A, "collection___defaultEquals$closure", "_defaultEquals", 81);
    _static_1(A, "collection___defaultHashCode$closure", "_defaultHashCode", 61);
    _static_2(A, "collection_ListBase__compareAny$closure", "ListBase__compareAny", 120);
    _static_1(A, "convert___defaultToEncodable$closure", "_defaultToEncodable", 24);
    _instance_1_i(_ = A._ByteCallbackSink.prototype, "get$add", "add$1", 30);
    _instance_0_u(_, "get$close", "close$0", 0);
    _static_1(A, "core__identityHashCode$closure", "identityHashCode", 61);
    _static_2(A, "core__identical$closure", "identical", 81);
    _static_1(A, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 13);
    _static(A, "math__max$closure", 2, null, ["call$1$2", "call$2"], ["max", function(a, b) {
      return A.max(a, b, type$.num);
    }], 364, 0);
    _instance_0_u(_ = A.StreamSplitter.prototype, "get$_onListen", "_onListen$0", 0);
    _instance_0_u(_, "get$_stream_splitter$_onPause", "_stream_splitter$_onPause$0", 0);
    _instance_0_u(_, "get$_stream_splitter$_onResume", "_stream_splitter$_onResume$0", 0);
    _instance_1_u(_, "get$_stream_splitter$_onData", "_stream_splitter$_onData$1", 30);
    _instance_2_u(_, "get$_stream_splitter$_onError", "_stream_splitter$_onError$2", 32);
    _instance_0_u(_, "get$_stream_splitter$_onDone", "_stream_splitter$_onDone$0", 0);
    _static_1(A, "xlm_addr__XlmAddrUtils_computeChecksum$closure", "_XlmAddrUtils_computeChecksum", 2);
    _static_1(A, "xmr_addr__XmrAddrUtils_computeChecksum$closure", "_XmrAddrUtils_computeChecksum", 2);
    _static_1(A, "bip32_path_Bip32PathParser__parseElem$closure", "Bip32PathParser__parseElem", 365);
    _instance_0_i(A.Bip32Path.prototype, "get$length", "length$0", 29);
    _instance_0_i(A.MnemonicWordsList.prototype, "get$length", "length$0", 29);
    _static_1(A, "retry___defaultWhen$closure", "_defaultWhen", 101);
    _static_2(A, "retry___defaultWhenError$closure", "_defaultWhenError", 366);
    _static_1(A, "retry___defaultDelay$closure", "_defaultDelay", 367);
    _static(A, "account_MoneroAccountKeys_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoneroAccountKeys_layout", function() {
      return A.MoneroAccountKeys_layout(null);
    }], 3, 0);
    _static(A, "account_MoneroMultisigAccountKeys_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoneroMultisigAccountKeys_layout", function() {
      return A.MoneroMultisigAccountKeys_layout(null);
    }], 3, 0);
    _static_2(A, "transaction_MoneroTransactionHelper__txExtraComparator$closure", "MoneroTransactionHelper__txExtraComparator", 368);
    _static(A, "payment_MoneroLockedOutput_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoneroLockedOutput_layout", function() {
      return A.MoneroLockedOutput_layout(null);
    }], 3, 0);
    _static(A, "payment_MoneroUnlockedOutput_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoneroUnlockedOutput_layout", function() {
      return A.MoneroUnlockedOutput_layout(null);
    }], 3, 0);
    _static(A, "payment_MoneroUnlockedMultisigOutput_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoneroUnlockedMultisigOutput_layout", function() {
      return A.MoneroUnlockedMultisigOutput_layout(null);
    }], 3, 0);
    _static(A, "payment_MoneroLockedPayment_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoneroLockedPayment_layout", function() {
      return A.MoneroLockedPayment_layout(null);
    }], 3, 0);
    _static(A, "payment_MoneroUnLockedPayment_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoneroUnLockedPayment_layout", function() {
      return A.MoneroUnLockedPayment_layout(null);
    }], 3, 0);
    _static(A, "payment_MoneroUnlockedMultisigPayment_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoneroUnlockedMultisigPayment_layout", function() {
      return A.MoneroUnlockedMultisigPayment_layout(null);
    }], 3, 0);
    _static(A, "signature_RCTNull_layout$closure", 0, null, ["call$1$property", "call$0"], ["RCTNull_layout", function() {
      return A.RCTNull_layout(null);
    }], 3, 0);
    _static(A, "extra_TxExtraPublicKey_layout$closure", 0, null, ["call$1$property", "call$0"], ["TxExtraPublicKey_layout", function() {
      return A.TxExtraPublicKey_layout(null);
    }], 3, 0);
    _static(A, "extra_TxExtraNonce_layout$closure", 0, null, ["call$1$property", "call$0"], ["TxExtraNonce_layout", function() {
      return A.TxExtraNonce_layout(null);
    }], 3, 0);
    _static(A, "extra_TxExtraAdditionalPubKeys_layout$closure", 0, null, ["call$1$property", "call$0"], ["TxExtraAdditionalPubKeys_layout", function() {
      return A.TxExtraAdditionalPubKeys_layout(null);
    }], 3, 0);
    _static(A, "input_TxinToKey_layout$closure", 0, null, ["call$1$property", "call$0"], ["TxinToKey_layout", function() {
      return A.TxinToKey_layout(null);
    }], 3, 0);
    _static(A, "input_TxinToScriptHash_layout$closure", 0, null, ["call$1$property", "call$0"], ["TxinToScriptHash_layout", function() {
      return A.TxinToScriptHash_layout(null);
    }], 3, 0);
    _static(A, "input_TxinToScript_layout$closure", 0, null, ["call$1$property", "call$0"], ["TxinToScript_layout", function() {
      return A.TxinToScript_layout(null);
    }], 3, 0);
    _static(A, "input_TxinGen_layout$closure", 0, null, ["call$1$property", "call$0"], ["TxinGen_layout", function() {
      return A.TxinGen_layout(null);
    }], 3, 0);
    _static(A, "output_TxoutToScript_layout$closure", 0, null, ["call$1$property", "call$0"], ["TxoutToScript_layout", function() {
      return A.TxoutToScript_layout(null);
    }], 3, 0);
    _static(A, "output_TxoutToScriptHash_layout$closure", 0, null, ["call$1$property", "call$0"], ["TxoutToScriptHash_layout", function() {
      return A.TxoutToScriptHash_layout(null);
    }], 3, 0);
    _static(A, "output_TxoutToKey_layout$closure", 0, null, ["call$1$property", "call$0"], ["TxoutToKey_layout", function() {
      return A.TxoutToKey_layout(null);
    }], 3, 0);
    _static(A, "output_TxoutToTaggedKey_layout$closure", 0, null, ["call$1$property", "call$0"], ["TxoutToTaggedKey_layout", function() {
      return A.TxoutToTaggedKey_layout(null);
    }], 3, 0);
    _static(A, "const_MoneroLayoutConst_varintBigInt$closure", 0, null, ["call$1$property", "call$0"], ["MoneroLayoutConst_varintBigInt", function() {
      return A.MoneroLayoutConst_varintBigInt(null);
    }], 369, 0);
    _static(A, "const_MoneroLayoutConst_varintInt$closure", 0, null, ["call$1$property", "call$0"], ["MoneroLayoutConst_varintInt", function() {
      return A.MoneroLayoutConst_varintInt(null);
    }], 370, 0);
    _static(A, "const_MoneroLayoutConst_variantBytes$closure", 0, null, ["call$1$property", "call$0"], ["MoneroLayoutConst_variantBytes", function() {
      return A.MoneroLayoutConst_variantBytes(null);
    }], 371, 0);
    _static_1(A, "crypto___send$closure", "_send", 75);
    _static_0(A, "crypto___readKey$closure", "_readKey", 248);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _mixinHard = hunkHelpers.mixinHard,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Iterable, A.CastIterator, A.Closure, A.MapBase, A.Error, A.ListBase, A.SentinelValue, A.ListIterator, A.MappedIterator, A.WhereIterator, A.ExpandIterator, A.TakeIterator, A.SkipIterator, A.EmptyIterator, A.WhereTypeIterator, A.FixedLengthListMixin, A.UnmodifiableListMixin, A.Symbol, A._Record, A.MapView, A.ConstantMap, A._KeysOrValuesOrElementsIterator, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.JSSyntaxRegExp, A._MatchImplementation, A._AllMatchesIterator, A.StringMatch, A._StringAllMatchesIterator, A._Cell, A._InitializedCell, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A._SyncStarIterator, A.AsyncError, A._BufferingStreamSubscription, A._BroadcastStreamController, A.TimeoutException, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A.Stream, A.StreamTransformerBase, A._StreamController, A._SyncStreamControllerDispatch, A._AsyncStreamControllerDispatch, A._StreamSinkWrapper, A._DelayedEvent, A._DelayedDone, A._PendingEvents, A._DoneStreamSubscription, A._StreamIterator, A._EventSinkWrapper, A._HandlerEventSink, A._Zone, A.SetBase, A._LinkedHashSetCell, A._LinkedHashSetIterator, A._MapBaseValueIterator, A._UnmodifiableMapMixin, A._UnmodifiableSetMixin, A.Codec, A.Converter, A._Base64Encoder, A._Base64Decoder, A.ByteConversionSink, A._JsonStringifier, A._Utf8Encoder, A._Utf8Decoder, A._BigIntImpl, A._BigIntClassic, A.DateTime, A.Duration, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.IntegerDivisionByZeroException, A.MapEntry, A.Null, A._StringStackTrace, A.StringBuffer, A._Uri, A.UriData, A._SimpleUri, A._JSSecureRandom, A.Endian, A.FutureGroup, A.ErrorResult, A.ValueResult, A.StreamSplitter, A.BitcoinAddressType, A.Script, A.BlockchainUtilsException, A.ADAAddressType, A.AdaByronIcarusAddrEncoder, A.AdaByronLegacyAddrEncoder, A.AdaShelleyAddrEncoder, A.ADANetwork, A.AlgoAddrEncoder, A.AptosAddrEncoder, A.AtomAddrEncoder, A.AtomEthSecp256k1AddrEncoder, A.AtomNist256P1AddrEncoder, A.AtomEd25519AddrEncoder, A.AvaxPChainAddrEncoder, A.AvaxXChainAddrEncoder, A.EgldAddrEncoder, A.BlockchainAddressEncoder, A.EosAddrEncoder, A.ErgoNetworkTypes, A.ErgoP2PKHAddrEncoder, A.EthAddrDecoder, A.EthAddrEncoder, A.FilSecp256k1AddrEncoder, A.IcxAddrEncoder, A.InjAddrEncoder, A.NanoAddrEncoder, A.NearAddrEncoder, A.NeoAddrEncoder, A.OkexAddrEncoder, A.OneAddrEncoder, A.P2PKHAddrEncoder, A.BchP2PKHAddrEncoder, A.P2SHAddrEncoder, A.BchP2SHAddrEncoder, A.P2TRAddrEncoder, A.P2WPKHAddrEncoder, A.SolAddrEncoder, A.SubstrateEd25519AddrEncoder, A.SubstrateSr25519AddrEncoder, A.SubstrateSecp256k1AddrEncoder, A.TonAddrEncoder, A.TrxAddrDecoder, A.TrxAddrEncoder, A.XlmAddrTypes, A.XlmAddrDecoderResult, A.XlmAddrEncoder, A.XmrAddressType, A.XmrAddressDecodeResult, A.XmrAddrDecoder, A.XRPXAddressDecodeResult, A.XrpAddrEncoder, A.XtzAddrPrefixes, A.XtzAddrEncoder, A.ZilAddrEncoder, A.Bip32Base, A.IBip32MstKeyGenerator, A.Bip32ChainCode, A.Bip32FingerPrint, A.Bip32Depth, A.Bip32KeyIndex, A.Bip32KeyData, A.Bip32KeyNetVersions, A.Bip32DeserializedKey, A.Bip32KeyBase, A.Bip32Path, A.Bip32KholawEd25519KeyDerivatorBase, A.Bip32KholawEd25519MstKeyGenerator, A.Bip32Slip10EcdsaDerivator, A.Bip32Slip10Ed25519Derivator, A.Bip32Slip10Ed25519MstKeyGenerator, A.Bip32Slip10Nist256p1MstKeyGenerator, A.Bip39EntropyBitLen, A.Bip39WordsNum, A.Bip39Languages, A.Mnemonic, A.MnemonicDecoderBase, A.MnemonicEncoderBase, A.Bip39MnemonicGenerator, A.MnemonicWordsListGetterBase, A.MnemonicWordsListFinderBase, A.MnemonicValidator, A.Bip39SeedGenerator, A.Bip44Levels, A.BipCoins, A.BipProposal, A.BipCoinConfig, A.CardanoIcarusMstKeyGenerator, A.CipProposal, A.CardanoByronLegacySeedGenerator, A.CardanoIcarusSeedGenerator, A.CoinConf, A.CoinParams, A.CoinNames, A.EllipticCurveTypes, A.Ed25519Blake2bPublicKey, A.Ed25519Blake2bPrivateKey, A.Ed25519PublicKey, A.Ed25519PrivateKey, A.Ed25519KholawPublicKey, A.Ed25519KholawPrivateKey, A.MoneroPublicKey, A.MoneroPrivateKey, A.Nist256p1PublicKey, A.Nist256p1PrivateKey, A.Secp256k1PublicKeyEcdsa, A.Secp256k1PrivateKeyEcdsa, A.Sr25519PublicKey, A.Sr25519PrivateKey, A.EntropyGenerator, A.MnemonicWordsList, A.MoneroCoinConf, A.MoneroCoins, A.MoneroProposal, A.MoneroWordsNum, A.MoneroLanguages, A.MoneroMnemonicEncoder, A.MoneroMnemonicGenerator, A.MoneroSeedGenerator, A.MoneroAccount, A.MoneroComputeKey, A.MoneroSubaddress, A.SubstrateCoinConf, A.SubstrateCoins, A.SubstratePropoosal, A.Substrate, A.SubstratePrvKey, A.SubstratePubKey, A.SubstratePathElem, A.SubstrateScaleEncoderBase, A.TonMnemonicGenerator, A.TonMnemonicLanguages, A.TomMnemonicValidator, A.CborBase64Types, A.CborBaseUrlValue, A.CborBigFloatValue, A.CborBigIntValue, A.CborBoleanValue, A.CborBytesValue, A.CborDynamicBytesValue, A.CborTagValue, A._CborDate, A.CborDecimalFracValue, A.CborFloatValue, A.CborIntValue, A.CborSafeIntValue, A.CborListValue, A.CborMapValue, A.CborMimeValue, A.CborNullValue, A.CborUndefinedValue, A.CborRegxpValue, A.CborSetValue, A.CborString, A.CborUriValue, A._DecodeCborResult, A.CborBytesTracker, A.FloatLength, A.FloatUtils, A.AES, A.AESLib, A.FieldElement, A.GroupElementP2, A.GroupElementP1P1, A.GroupElementP3, A.GroupElementCached, A.GroupElementPrecomp, A.Curve, A.ECDSAPrivateKey, A.ECDSAPublicKey, A.ECDSASignature, A.EDDSAPrivateKey, A.EDDSAPublicKey, A.AbstractPoint, A.ChaCha20Poly1305, A.CTR, A.Blake2bConfig, A.BLAKE2b, A.Blake2bState, A._Keccack, A.HashBytesState, A.MD4, A.MD5, A._RIPEMD, A.SH1State, A.SHA256, A.SHA256State, A.SHA512, A.SHA512State, A.HMAC, A.Poly1305, A.FortunaPRNG, A.GammaDistribution, A.SchnorrkelMiniSecretKey, A.SchnorrkelSecretKey, A.SchnorrkelPublicKey, A.SchnorrkelSignature, A.MerlinTranscript, A.StrobeOperation, A.Strobe, A.Scrypt, A._Hex, A.LayoutByteReader, A.LayoutByteWriter, A.BaseLazyLayout, A.Layout, A.LayoutDecodeResult, A.LazyVariantModel, A.KDFParam, A.CryptoParam, A.Web3SecretStorageDefinationV3, A.BaseServiceResponse, A.BaseServiceRequestParams, A.BaseServiceRequest, A.BaseProvider, A.BitcoinSigner, A.BitcoinVerifier, A.CardanoSigner, A.CardanoVerifier, A.CosmosETHSecp256k1Signer, A.CosmosSecp256k1Signer, A.CosmosVerifier, A.EcdsaSigningKey, A.ECDSAVerifyKey, A.ETHSignature, A.ETHSigner, A.ETHVerifier, A.SolanaSigner, A.SolanaVerifier, A.SubstrateEcdsaSigner, A.SubstrateEcdsaVerifier, A.SubstrateED25519Signer, A.SubstrateSr25519Signer, A.SubstrateSigner, A.TronSigner, A.TronVerifier, A.XrpSigner, A.XrpVerifier, A.BigRational, A.Tuple, A.CanonicalizedMap, A.CosmosProtocolBuffer, A.BaseClient, A.BaseRequest, A.BaseResponse, A.ClientException, A.MediaType, A.MoneroAccountKeysType, A.MoneroSerialization, A.Gamma, A.MultiexpData, A.StrausCachedData, A.MoneroOutputType, A.MoneroPaymentType, A.TxEpemeralKeyResult, A.MoneroTxVersion, A.MoneroTxProof, A.RCTType, A.EcdhInfoVersion, A.EcdhTuple, A.TxExtraTypes, A.MoneroTxinType, A.TxOutTargetType, A.MoneroNetwork, A.DaemonBaseResponse, A.DaemonTxBlobEntryResponse, A.DaemonBlockCompleteEntryResponse, A.DaemonTxOutputIndicesResponse, A.DaemonPoolTxInfoResponse, A.DaemonBlockOutputIndicesResponse, A.DistributionResponse, A.TxResponse, A.MoneroVariantDecodeResult, A.MoneroStorageContainer, A.MoneroStorage, A.MoneroSection, A.MoneroStorageEntry, A.DecodeStorageResult, A.MoneroStorageTypes, A.TxDestinationInfo, A.ApiProviderException, A.WalletException, A.Equatable, A.HttpImpl, A.HTTPServiceWorker, A.ServicesHTTPCaller, A.HTTPWorkerMessage, A.HTTPWorkerRequest, A.HTTPWorkerResponse, A._ProviderAuthenticated_Object_CborSerializable, A.HttpClientManager, A._Client, A._DigestAuthClientImpl, A.HTTPCallerResponse, A.DigestAuthHeaders, A._LiveListenable_Object__LiveListenable, A._LiveListenable, A.CborSerializable, A.SynchronizedLock, A.MethodResult, A.CustomProposal, A._AddressDerivationIndex_Object_CborSerializable, A.CryptoWokerImpl, A.EncryptedIsolateMessageController, A.IsolateCryptoWoker, A._WorkerConnector, A._CryptoPublicKeyData_Object_CborSerializable, A._CryptoPrivateKeyData_Object_CborSerializable, A._AccessCryptoPrivateKeysRequest_Object_CborSerializable, A._AccessCryptoPrivateKeyRequest_Object_CborSerializable, A._CryptoPrivateKeysResponse_Object_CborSerializable, A._CryptoPublicKeysResponse_Object_CborSerializable, A.AccessMnemonicResponse, A._ImportCustomKeys_Object_CborSerializable, A._EncryptedCustomKey_Object_Equatable, A._EncryptedMasterKey_Object_CborSerializable, A._ImportedKeyStorage_Object_CborSerializable, A._WalletMasterKeys_Object_CborSerializable, A.NetworkType, A.IsolateMessageArgs, A.ArgsCompleter, A.EncodableArgsCompleter, A.CryptoDeriveAddressResponse, A.WorkerMessage, A._WorkeBaserRequestMessage_Object_CborSerializable, A._IsolateCborResponseMessage_Object_CborSerializable, A._SignRequest_Object_CborSerializable, A._GlobalSignResponse_Object_CborSerializable, A.BaseRepository, A._NetworkClient_Object_BaseRepository, A._APIProvider_Object_Equatable, A.APIServiceTracker, A._HTTPService_Object_HttpImpl, A.ApiRequest, A.IntegerBalance, A.BitcoinCashNewAddressParams, A.BitcoinCashMultiSigNewAddressParams, A.BitcoinNewAddressParams, A.BitcoinMultiSigNewAddressParams, A.CardanoNewAddressParams, A.CosmosNewAddressParams, A.EthereumNewAddressParams, A.MoneroNewAddressParams, A.RippleNewAddressParams, A.RippleMultiSigNewAddressParams, A.SolanaNewAddressParams, A.StellarNewAddressParams, A.StellarMultiSigNewAddressParams, A.SubstrateNewAddressParams, A.TonNewAddressParams, A.TronNewAddressParams, A.TronMultisigNewAddressParams, A._BitcoinMultiSigSignerDetais_Object_Equatable, A._BitcoinMultiSignatureAddress_Object_CborSerializable, A._StellarMultiSigSignerDetails_Object_Equatable, A._StellarMultiSignatureAddress_Object_Equatable, A._TronMultiSigSignerDetais_Object_Equatable, A._TronMultiSignatureAddress_Object_Equatable, A._RippleMultiSigSignerDetails_Object_Equatable, A._RippleMultiSignatureAddress_Object_Equatable, A._CardanoAddrDetails_Object_Equatable, A._MoneroBlockTrackingPossition_Object_CborSerializable, A._MoneroAccountBlocksTracker_Object_CborSerializable, A._MoneroViewPrimaryAccountDetails_Object_CborSerializable, A._MoneroViewAccountDetails_Object_Equatable, A._MoneroTxInfo_Object_CborSerializable, A._MoneroOutputDetails_Object_CborSerializable, A._MoneroUnlockedPaymentRequestDetails_Object_CborSerializable, A._MoneroProcessTxesResponse_Object_CborSerializable, A._MoneroBatchProcessTxesResponse_Object_CborSerializable, A._MoneroProcessTxIdsRequest_Object_CborSerializable, A._MoneroSyncAccountsInfos_Object_CborSerializable, A._MoneroSyncAccountIndexInfo_Object_CborSerializable, A._MoneroSyncBlocksResponse_Object_CborSerializable, A._MoneroSyncBlocksRequest_Object_CborSerializable, A._MoneroRignOutput_Object_CborSerializable, A._MoneroTxDestinationWithProof_Object_CborSerializable, A._MoneroSignedTxData_Object_CborSerializable, A._MoneroSigningTxResponse_Object_CborSerializable, A._TonAccountContext_Object_CborSerializable, A.AbiParameter, A.EncoderResult, A.EIP712Version, A.Eip712TypeDetails, A.Eip712TypedData, A.Eip712TypedDataV1, A.EIP712Legacy, A.AddressCoder, A.ArrayCoder, A.BooleanCoder, A.BytesCoder, A.FunctionCoder, A.NumbersCoder, A.StringCoder, A.TupleCoder, A.SolidityAddress, A.Context, A.Style, A.ParsedPath, A.PathException, A.SourceFile, A.SourceLocationMixin, A.SourceSpanMixin, A.Highlighter, A._Highlight, A._Line, A.SourceLocation, A.SourceSpanException, A.StellarAddress, A.StringScanner, A.WalletVersion, A.TonPrivateKey, A.TonPublicKey, A.EventStreamProvider, A._EventStreamSubscription, A.XRPKeyAlgorithm, A.XRPPrivateKey, A.XRPAddress, A.XRPLAddressCodecException, A._WebIsolateInitialData]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JavaScriptBigInt, J.JavaScriptSymbol, J.JSNumber, J.JSString]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, J.JSArray, A.NativeByteBuffer, A.NativeTypedData]);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Iterable, [A._CastIterableBase, A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable, A.ExpandIterable, A.TakeIterable, A.SkipIterable, A.WhereTypeIterable, A._KeysOrValues, A._AllMatchesIterable, A._StringAllMatchesIterable, A._SyncStarIterable, A.SubstratePath]);
    _inheritMany(A._CastIterableBase, [A.CastIterable, A.__CastListBase__CastIterableBase_ListMixin]);
    _inherit(A._EfficientLengthCastIterable, A.CastIterable);
    _inherit(A._CastListBase, A.__CastListBase__CastIterableBase_ListMixin);
    _inheritMany(A.Closure, [A.Closure2Args, A.CastMap_entries_closure, A.Closure0Args, A.Instantiation, A.TearOffClosure, A.JsLinkedHashMap_values_closure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A._Future__chainForeignFuture_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A._Future_timeout_closure0, A.Stream_length_closure, A.Stream_first_closure0, A._StreamHandlerTransformer_closure, A._RootZone_bindUnaryCallbackGuarded_closure, A._LinkedCustomHashMap_closure, A.MapBase_entries_closure, A._JsonMap_values_closure, A._BigIntImpl_hashCode_finish, A._BigIntImpl_toDouble_readBits, A.DateTime_parse_parseIntOrZero, A.DateTime_parse_parseMilliAndMicroseconds, A._Uri__makePath_closure, A._createTables_setChars, A._createTables_setRange, A.FutureGroup_add_closure, A.StreamSplitter__onPause_closure, A.BitcoinAddressType_fromValue_closure, A._Base32Utils_translateAlphabet_closure, A._Base32Utils_translateAlphabet_closure0, A._Base32Utils_translateAlphabet_closure1, A._Base32Utils__b32decode_closure, A.ADAAddressType_fromHeader_closure, A.EthAddrUtils__checksumEncode_closure, A.XlmAddrTypes_fromTag_closure, A.XlmAddrTypes_fromTag__closure, A.XmrAddressType_fromPrefix_closure, A.Bip32PathParser_parse_closure, A.Bip32PathParser__parseElem_closure, A.Bip39EntropyGenerator_isValidEntropyBitLen_closure, A.Bip39MnemonicDecoder__decodeAndVerifyBinaryStr_closure, A.Bip39MnemonicDecoder_mnemonicToBinaryStr_closure, A.Bip39MnemonicGenerator__entropyBitLenFromWordsNum_closure, A.Bip44Levels_Bip44Levels$fromInt_closure, A.Bip44Coins_fromName_closure, A.Bip44Conf_akashNetwork_closure, A.Bip44Conf_algorand_closure, A.Bip44Conf_aptos_closure, A.Bip44Conf_avaxCChain_closure, A.Bip44Conf_avaxPChain_closure, A.Bip44Conf_avaxXChain_closure, A.Bip44Conf_axelar_closure, A.Bip44Conf_bandProtocol_closure, A.Bip44Conf_binanceChain_closure, A.Bip44Conf_binanceSmartChain_closure, A.Bip44Conf_bitcoinMainNet_closure, A.Bip44Conf_bitcoinTestNet_closure, A.Bip44Conf_bitcoinCashMainNet_closure, A.Bip44Conf_bitcoinCashTestNet_closure, A.Bip44Conf_bitcoinCashSlpMainNet_closure, A.Bip44Conf_bitcoinCashSlpTestNet_closure, A.Bip44Conf_bitcoinSvMainNet_closure, A.Bip44Conf_bitcoinSvTestNet_closure, A.Bip44Conf_cardanoByronIcarus_closure, A.Bip44Conf_cardanoByronLedger_closure, A.Bip44Conf_cardanoByronIcarusTestnet_closure, A.Bip44Conf_cardanoByronLedgerTestnet_closure, A.Bip44Conf_celo_closure, A.Bip44Conf_certik_closure, A.Bip44Conf_chihuahua_closure, A.Bip44Conf_cosmos_closure, A.Bip44Conf_cosmosTestnet_closure, A.Bip44Conf_cosmosEthSecp256k1_closure, A.Bip44Conf_cosmosTestnetEthSecp256k1_closure, A.Bip44Conf_cosmosNist256p1_closure, A.Bip44Conf_cosmosTestnetNist256p1_closure, A.Bip44Conf_cosmosEd25519_closure, A.Bip44Conf_cosmosTestnetEd25519_closure, A.Bip44Conf_dashMainNet_closure, A.Bip44Conf_dashTestNet_closure, A.Bip44Conf_dogecoinMainNet_closure, A.Bip44Conf_dogecoinTestNet_closure, A.Bip44Conf_pepeMainnet_closure, A.Bip44Conf_pepeTestnet_closure, A.Bip44Conf_ecashMainNet_closure, A.Bip44Conf_ecashTestNet_closure, A.Bip44Conf_elrond_closure, A.Bip44Conf_eos_closure, A.Bip44Conf_ergoMainNet_closure, A.Bip44Conf_ergoTestNet_closure, A.Bip44Conf_ethereum_closure, A.Bip44Conf_ethereumTestnet_closure, A.Bip44Conf_ethereumClassic_closure, A.Bip44Conf_fantomOpera_closure, A.Bip44Conf_filecoin_closure, A.Bip44Conf_harmonyOneMetamask_closure, A.Bip44Conf_harmonyOneEth_closure, A.Bip44Conf_harmonyOneAtom_closure, A.Bip44Conf_huobiChain_closure, A.Bip44Conf_icon_closure, A.Bip44Conf_injective_closure, A.Bip44Conf_irisNet_closure, A.Bip44Conf_kava_closure, A.Bip44Conf_kusamaEd25519Slip_closure, A.Bip44Conf_kusamaTestnetEd25519Slip_closure, A.Bip44Conf_litecoinMainNet_closure, A.Bip44Conf_litecoinTestNet_closure, A.Bip44Conf_moneroEd25519Slip_closure, A.Bip44Conf_moneroSecp256k1_closure, A.Bip44Conf_nano_closure, A.Bip44Conf_nearProtocol_closure, A.Bip44Conf_neo_closure, A.Bip44Conf_nineChroniclesGold_closure, A.Bip44Conf_okexChainEth_closure, A.Bip44Conf_okexChainAtom_closure, A.Bip44Conf_okexChainAtomOld_closure, A.Bip44Conf_ontology_closure, A.Bip44Conf_osmosis_closure, A.Bip44Conf_piNetwork_closure, A.Bip44Conf_polkadotEd25519Slip_closure, A.Bip44Conf_polkadotTestnetEd25519Slip_closure, A.Bip44Conf_polygon_closure, A.Bip44Conf_ripple_closure, A.Bip44Conf_rippleTestnet_closure, A.Bip44Conf_rippleEd25519_closure, A.Bip44Conf_rippleTestnetEd25519_closure, A.Bip44Conf_secretNetworkOld_closure, A.Bip44Conf_secretNetworkNew_closure, A.Bip44Conf_solana_closure, A.Bip44Conf_solanaTestnet_closure, A.Bip44Conf_stellar_closure, A.Bip44Conf_stellarTestnet_closure, A.Bip44Conf_terra_closure, A.Bip44Conf_tezos_closure, A.Bip44Conf_theta_closure, A.Bip44Conf_tron_closure, A.Bip44Conf_tronTestnet_closure, A.Bip44Conf_vechain_closure, A.Bip44Conf_verge_closure, A.Bip44Conf_zcashMainNet_closure, A.Bip44Conf_zcashTestNet_closure, A.Bip44Conf_zilliqa_closure, A.Bip44Conf_tonMainnet_closure, A.Bip44Conf_tonTestnet_closure, A.Bip44Conf_electraProtocolMainNet_closure, A.Bip44Conf_electraProtocolTestNet_closure, A.Bip49Coins_fromName_closure, A.Bip49Conf_dashMainNet_closure, A.Bip49Conf_dashTestNet_closure, A.Bip49Conf_dogecoinMainNet_closure, A.Bip49Conf_dogecoinTestNet_closure, A.Bip49Conf_litecoinMainNet_closure, A.Bip49Conf_litecoinTestNet_closure, A.Bip49Conf_zcashMainNet_closure, A.Bip49Conf_zcashTestNet_closure, A.Bip49Conf_bitcoinMainNet_closure, A.Bip49Conf_bitcoinTestNet_closure, A.Bip49Conf_bitcoinSvMainNet_closure, A.Bip49Conf_bitcoinSvTestNet_closure, A.Bip49Conf_bitcoinCashMainNet_closure, A.Bip49Conf_bitcoinCashTestNet_closure, A.Bip49Conf_bitcoinCashSlpMainNet_closure, A.Bip49Conf_bitcoinCashSlpTestNet_closure, A.Bip49Conf_ecashMainNet_closure, A.Bip49Conf_ecashTestNet_closure, A.Bip49Conf_pepeMainnet_closure, A.Bip49Conf_pepeTestnet_closure, A.Bip49Conf_electraProtocolMainNet_closure, A.Bip49Conf_electraProtocolTestNet_closure, A.Bip84Coins_fromName_closure, A.Bip84Conf_bitcoinMainNet_closure, A.Bip84Conf_bitcoinTestNet_closure, A.Bip84Conf_litecoinMainNet_closure, A.Bip84Conf_litecoinTestNet_closure, A.Bip84Conf_electraProtocolMainNet_closure, A.Bip84Conf_electraProtocolTestNet_closure, A.Bip86Coins_fromName_closure, A.Bip86Conf_bitcoinMainNet_closure, A.Bip86Conf_bitcoinTestNet_closure, A.CoinProposal_fromName_closure, A.PubKeyModes_fromValue_closure, A.CardanoByronLegacyKeyDerivator_newPrivateKeyLeftPart_closure, A.CardanoByronLegacyKeyDerivator_newPublicKeyPoint_closure, A.Cip1852Coins_fromName_closure, A.Cip1852Conf_cardanoIcarusMainNet_closure, A.Cip1852Conf_cardanoIcarusTestNet_closure, A.Cip1852Conf_cardanoLedgerMainNet_closure, A.Cip1852Conf_cardanoLedgerTestNet_closure, A.Mnemonic__normalize_closure, A.MoneroCoins_fromName_closure, A.MoneroWordsNum_fromValue_closure, A.MoneroLanguages_fromValue_closure, A.MoneroMnemonicDecoder_decode_closure, A.MoneroMnemonicDecoder_validateCheckSum_closure, A.MoneroMnemonicUtils_computeChecksum_closure, A.SubstrateCoins_fromName_closure, A.SubstrateConf_acalaEd25519_closure, A.SubstrateConf_acalaSecp256k1_closure, A.SubstrateConf_acalaSr25519_closure, A.SubstrateConf_bifrostEd25519_closure, A.SubstrateConf_bifrostSecp256k1_closure, A.SubstrateConf_bifrostSr25519_closure, A.SubstrateConf_chainXEd25519_closure, A.SubstrateConf_chainXSecp256k1_closure, A.SubstrateConf_chainXSr25519_closure, A.SubstrateConf_edgewareEd25519_closure, A.SubstrateConf_edgewareSecp256k1_closure, A.SubstrateConf_edgewareSr25519_closure, A.SubstrateConf_genericEd25519_closure, A.SubstrateConf_genericSecp256k1_closure, A.SubstrateConf_genericSr25519_closure, A.SubstrateConf_karuraEd25519_closure, A.SubstrateConf_karuraSecp256k1_closure, A.SubstrateConf_karuraSr25519_closure, A.SubstrateConf_kusamaEd25519_closure, A.SubstrateConf_kusamaSecp256k1_closure, A.SubstrateConf_kusamaSr25519_closure, A.SubstrateConf_moonbeamEd25519_closure, A.SubstrateConf_moonbeamSecp256k1_closure, A.SubstrateConf_moonbeamSr25519_closure, A.SubstrateConf_moonriverEd25519_closure, A.SubstrateConf_moonriverSecp256k1_closure, A.SubstrateConf_moonriverSr25519_closure, A.SubstrateConf_phalaEd25519_closure, A.SubstrateConf_phalaSecp256k1_closure, A.SubstrateConf_phalaSr25519_closure, A.SubstrateConf_plasmEd25519_closure, A.SubstrateConf_plasmSecp256k1_closure, A.SubstrateConf_plasmSr25519_closure, A.SubstrateConf_polkadotEd25519_closure, A.SubstrateConf_polkadotSecp256k1_closure, A.SubstrateConf_polkadotSr25519_closure, A.SubstrateConf_soraEd25519_closure, A.SubstrateConf_soraSecp256k1_closure, A.SubstrateConf_soraSr25519_closure, A.SubstrateConf_stafiEd25519_closure, A.SubstrateConf_stafiSecp256k1_closure, A.SubstrateConf_stafiSr25519_closure, A.SubstratePathParser_parse_closure, A.SubstratePathParser_parse_closure0, A.CborObject_CborObject$fromDynamic_closure, A.CborDynamicBytesValue_closure, A.CborUtils__decodeUtf8String_closure, A.CborUtils__toStringObject_closure, A.CborUtils__toStringObject_closure0, A.CborUtils__decodeBytesString_closure, A.AESLib_initialize__rot24, A._BytesHelper_asMin32_closure, A.QuickCrypto__generateRandom_closure, A.BlockchainUtilsException_toString_closure, A.BlockchainUtilsException_toString_closure0, A.RPCError_toString_closure, A.RPCError_toString_closure0, A.LayoutConst_vecU8_closure, A.LayoutConst_vecU8_closure0, A.LayoutConst_lazyEnum_closure1, A.LayoutConst_lazyEnum_closure0, A.LayoutConst_vec_closure, A.LayoutConst_vec_closure0, A.LazyUnion_defaultGetSourceVariant_closure, A.StructLayout_StructLayout_closure, A.ServiceProviderUtils_parseResponse_closure, A.ServiceProviderUtils_parseResponse_closure0, A.BytesUtils_toBytes_closure, A.BigintUtils_toDer_closure, A.UUID_generateUUIDv4_closure, A.UUID_generateUUIDv4_closure0, A.UUID_fromBuffer_closure, A.CanonicalizedMap_entries_closure, A.CanonicalizedMap_keys_closure, A.CanonicalizedMap_values_closure, A.CosmosKeysAlgs_coin_closure, A.CosmosKeysAlgs_fromName_closure, A.RetryClient_send_closure, A.RetryClient_send_closure0, A.BaseRequest_closure0, A.BrowserClient_send_closure, A.BrowserClient_send_closure0, A.ByteStream_toBytes_closure, A.mapToQuery_closure, A.CaseInsensitiveMap$from_closure, A.MediaType_toString__closure, A.expectQuotedString_closure, A.MoneroBaseAccountKeys_toString_closure, A.MoneroAccountKeys_toLayoutStruct_closure, A.MoneroMultisigOutputInfo_closure, A.MoneroMultisigOutputInfo_MoneroMultisigOutputInfo$fromStruct_closure, A.MoneroMultisigOutputInfo_toLayoutStruct_closure, A.StrausCachedData_closure, A.RCTGeneratorUtils_getPreMlsagHash_closure, A.RCTGeneratorUtils_getPreMlsagHash_closure0, A.RCTGeneratorUtils_genRctSimple_closure, A.RCT_hashToScalarKeys_closure, A.QuickMap_asListBytes_closure, A.QuickMap_asListOfListBytes_closure, A.QuickMap_asListOfListBytes__closure, A.QuickMap_asListOfMap_closure, A.QuickMap__valueAsList_closure, A.MoneroTransactionHelper_toTxExtra_closure, A.MoneroTransactionHelper_generateInProof_closure, A.MoneroTransactionHelper_generateOutProof_closure, A.MoneroTransactionHelper_generateFakePaymentOuts_closure, A.MoneroBlock_closure, A.MoneroPaymentType_fromName_closure, A.MoneroUnlockedMultisigPayment_MoneroUnlockedMultisigPayment$fromStruct_closure, A.MoneroUnlockedMultisigPayment_toLayoutStruct_closure, A.SpendablePayment_SpendablePayment$fromStruct_closure, A.SpendablePayment_toLayoutStruct_closure, A.SpendablePayment_toJson_closure, A.MoneroTxVersion_fromBase58_closure, A.BulletproofPlus_toJson_closure, A.BulletproofPlus_toJson_closure0, A.BulletproofPlus_toJson_closure1, A.BulletproofPlus_closure, A.BulletproofPlus_closure0, A.Bulletproof_closure, A.Bulletproof_closure0, A.Bulletproof_closure1, A.Clsag_closure, A.RctSigPrunableBulletproofPlus_closure, A.RctSigPrunableBulletproofPlus_RctSigPrunableBulletproofPlus$fromStruct_closure, A.RctSigPrunableBulletproofPlus_RctSigPrunableBulletproofPlus$fromStruct_closure0, A.RctSigPrunableBulletproofPlus_toLayoutStruct_closure, A.RctSigPrunableBulletproofPlus_toLayoutStruct_closure0, A.MgSig_closure, A.MgSig__closure, A.MgSig_closure0, A.MgSig_toJson_closure, A.MgSig_toJson__closure, A.MgSig_toJson_closure0, A.RctSigPrunableCLSAG_closure, A.RctSigPrunableCLSAG_RctSigPrunableCLSAG$fromStruct_closure, A.RctSigPrunableCLSAG_RctSigPrunableCLSAG$fromStruct_closure0, A.RctSigPrunableCLSAG_toLayoutStruct_closure, A.RctSigPrunableCLSAG_toLayoutStruct_closure0, A.RctSigPrunableBulletproof2_closure, A.RctSigPrunableBulletproof2_RctSigPrunableBulletproof2$fromStruct_closure, A.RctSigPrunableBulletproof2_RctSigPrunableBulletproof2$fromStruct_closure0, A.RctSigPrunableBulletproof2_toLayoutStruct_closure, A.RctSigPrunableBulletproof2_toLayoutStruct_closure0, A.RctSigPrunableBulletproof_closure, A.RctSigPrunableBulletproof_RctSigPrunableBulletproof$fromStruct_closure, A.RctSigPrunableBulletproof_RctSigPrunableBulletproof$fromStruct_closure0, A.RctSigPrunableBulletproof_toLayoutStruct_closure, A.RctSigPrunableBulletproof_toLayoutStruct_closure0, A.BoroSig_closure, A.BoroSig_closure0, A.RangeSig_closure, A.RctSigPrunableRangeSigs_RctSigPrunableRangeSigs$fromStruct_closure, A.RctSigPrunableRangeSigs_RctSigPrunableRangeSigs$fromStruct_closure0, A.RctSigPrunableRangeSigs_toLayoutStruct_closure, A.RctSigPrunableRangeSigs_toLayoutStruct_closure0, A.RCTSignature_RCTSignature$fromStruct_closure, A.RCTSignature_layout_closure, A.RCTSignature_layout_closure0, A.MoneroV1Signature_MoneroV1Signature$fromStruct_closure, A.MoneroV1Signature_layout_closure, A.MoneroV1Signature_layout__closure, A.MoneroV1Signature_toLayoutStruct_closure, A.RCTType_fromName_closure, A.RCTSignatureBase_closure0, A.RCTSignatureBase_closure, A.RCTSignatureBase_layout_closure, A.RCTSignatureBase_layout_closure0, A.RCTSignatureBase_layout_closure1, A.RCTSignatureBase_layout_closure2, A.RCTSignatureBase_layout_closure3, A.RCTSignatureBase_layout_closure4, A.RCTCLSAG_RCTCLSAG$fromStruct_closure, A.RCTCLSAG_RCTCLSAG$fromStruct_closure0, A.RCTCLSAG_toLayoutStruct_closure, A.RCTCLSAG_toLayoutStruct_closure0, A.RCTSimple_RCTSimple$fromStruct_closure, A.RCTSimple_RCTSimple$fromStruct_closure0, A.RCTSimple_toLayoutStruct_closure, A.RCTSimple_toLayoutStruct_closure0, A.RCTBulletproof2_RCTBulletproof2$fromStruct_closure, A.RCTBulletproof2_RCTBulletproof2$fromStruct_closure0, A.RCTBulletproofPlus_RCTBulletproofPlus$fromStruct_closure, A.RCTBulletproofPlus_RCTBulletproofPlus$fromStruct_closure0, A.RCTFull_RCTFull$fromStruct_closure, A.RCTFull_RCTFull$fromStruct_closure0, A.RCTFull_toLayoutStruct_closure, A.RCTFull_toLayoutStruct_closure0, A.RCTBulletproof_RCTBulletproof$fromStruct_closure, A.RCTBulletproof_RCTBulletproof$fromStruct_closure0, A.RCTBulletproof_toLayoutStruct_closure, A.RCTBulletproof_toLayoutStruct_closure0, A.TxExtraTypes_fromName_closure, A.TxExtraAdditionalPubKeys_TxExtraAdditionalPubKeys$fromStruct_closure, A.TxExtraAdditionalPubKeys_toLayoutStruct_closure, A.MoneroTxinType_fromName_closure, A.TxinToKey_closure, A.TxinToKey_toJson_closure, A.TxOutTargetType_fromName_closure, A.TxoutToScript_closure, A.TxoutToScript_toJson_closure, A.MoneroTransactionPrefix_layout_closure, A.MoneroTransactionPrefix_layout_closure0, A.MoneroTransactionPrefix__getTxExtraPubKey_closure, A.MoneroTransactionPrefix__getTxAdditionalPubKeys_closure, A.MoneroTransactionPrefix_toLayoutStruct_closure, A.MoneroTransactionPrefix_toLayoutStruct_closure0, A.MoneroTransaction_MoneroTransaction$fromStruct_closure, A.MoneroTransaction_MoneroTransaction$fromStruct_closure0, A.MoneroTransaction_layout_closure, A.MoneroTransaction_layout_closure0, A.MoneroTransaction_layout_closure1, A.MoneroTransaction_toLayoutStruct_closure, A.MoneroTransaction_toLayoutStruct_closure0, A.MoneroTransaction_toJson_closure, A.MoneroTransaction_toJson_closure0, A.MoneroNetwork_fromName_closure, A.MoneroNetwork_fromIndex_closure, A.DaemonRequestGetTransactions_onResonse_closure, A.DaemonBlockCompleteEntryResponse_DaemonBlockCompleteEntryResponse$fromJson_closure, A.DaemonBlockCompleteEntryResponse_toJson_closure, A.DaemonTxOutputIndicesResponse_DaemonTxOutputIndicesResponse$fromJson_closure, A.DaemonBlockOutputIndicesResponse_DaemonBlockOutputIndicesResponse$fromJson_closure, A.DaemonGetBlockBinResponse$fromJson_closure, A.DaemonGetBlockBinResponse$fromJson_closure0, A.DaemonGetBlockBinResponse$fromJson_closure1, A.DistributionResponse_DistributionResponse$fromJson_closure, A.OutputDistributionResponse$fromJson_closure, A.TxResponse_TxResponse$fromJson_closure, A.MoneroLayoutConst_variantString_closure0, A.MoneroLayoutConst_variantString_closure, A.MoneroLayoutConst_variantVec_closure, A.MoneroLayoutConst_variantVec_closure0, A.MoneroLayoutConst_map_closure0, A.MoneroLayoutConst_map_closure, A.MoneroStorageFormatValidator_asArrayOf_closure, A.MoneroStorageFormatValidator_asArrayOf_closure0, A.MoneroStorageFormatValidator_toArrayObject_closure, A.MoneroStorageFormatValidator_toArrayObject_closure0, A.MoneroStorageFormatValidator_toArrayObject_closure1, A.MoneroStorageFormatValidator_toArrayObject_closure2, A.MoneroStorageFormatValidator_toArrayObject_closure3, A.MoneroStorageFormatValidator_toArrayObject_closure4, A.MoneroStorageBinary_MoneroStorageBinary$fromListOfHex_closure, A.MoneroStorageBinary_MoneroStorageBinary$fromListOfHex_closure0, A.MoneroSection_MoneroSection$fromJson_closure, A.MoneroSection_hasValue_closure, A.MoneroSection_serialize_closure, A.MoneroSection_serialize_closure0, A.MoneroStorageTypes_fromFlag_closure, A.MoneroTxBuilder__createTxSecretKeySeed_closure, A.MoneroTxBuilder__createTxSecretKeySeed_closure0, A.MoneroTxBuilder__computeSourceKeys_closure, A.MoneroTxBuilder__computeSourceKeys__closure, A.MoneroTxBuilder__computeSourceKeys_closure0, A.MoneroTxBuilder__computeDestinationKeys_closure, A.MoneroTxBuilder__computeDestinationKeys_closure1, A.MoneroTxBuilder__computeDestinationKeys_closure2, A.MoneroTxBuilder__buildSignature_closure, A.MoneroTxBuilder__buildSignature_closure0, A.MoneroTxBuilder__buildSignature_closure1, A.MoneroTxBuilder__buildSignature_closure2, A.ComputeDestinationKeys_destinationPubKeys_closure, A.ComputeDestinationKeys_toRctOuts_closure, A.ComputeDestinationKeys_amounts_closure, A.ComputeDestinationKeys_closure0, A.ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure, A.ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure0, A.ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure1, A.ComputeDestinationKeys_ComputeDestinationKeys$fromStruct_closure2, A.ComputeDestinationKeys_toLayoutStruct_closure, A.ComputeDestinationKeys_toLayoutStruct_closure0, A.ComputeDestinationKeys_toLayoutStruct_closure1, A.ComputeDestinationKeys_toLayoutStruct_closure2, A.ComputeSourceKeys_amounts_closure, A.ComputeSourceKeys_toRctInputs_closure, A.ComputeSourceKeys$__closure0, A.ComputeSourceKeys_ComputeSourceKeys$fromStruct_closure, A.ComputeSourceKeys_toLayoutStruct_closure, A.MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct_closure, A.MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct_closure0, A.MoneroRctTxBuilder_MoneroRctTxBuilder$fromStruct_closure1, A.MoneroRctTxBuilder_toLayoutStruct_closure, A.MoneroRctTxBuilder_toLayoutStruct_closure0, A.HTTPCaller_post_closure, A.HTTPCaller_get_closure, A.ProviderAuthType_fromName_closure, A.ProviderAuthType_fromTag_closure, A.HttpClientManager_call_closure, A.HttpClientManager_getCashedClient_closure, A.HTTPCallerResponse_HTTPCallerResponse$parse_closure, A.DigestAuthHeadersAlg_fromName_closure, A.DigestAuthQop_fromName_closure, A.DigestAuthenticatedUtils_parseDigestHeader_closure, A.DigestAuthenticatedUtils_parseDigestHeader_closure0, A.DigestAuthenticatedUtils_parseDigestHeader_closure1, A.MethodUtils_call_closure, A.CustomCoins_fromName_closure, A.CustomCurrencyConf_byronLegacy_closure, A.CustomCurrencyConf_byronLegacyTestnet_closure, A.AddressDerivationType_fromTag_closure, A.Bip32AddressIndex__toPath_closure, A.Bip32AddressIndex__toPath_closure0, A.Bip32AddressIndex_indexes_closure, A.Bip32AddressIndex_indexes_closure0, A.EncryptedIsolateMessageController_handleMessage_closure, A.AccessCryptoPrivateKeysRequest_AccessCryptoPrivateKeysRequest$fromCborBytesOrObject_closure, A.AccessCryptoPrivateKeysRequest_toCbor_closure, A.CryptoPrivateKeysResponse_toCbor_closure, A.CryptoPublicKeysResponse_toCbor_closure, A.EncryptedMasterKey_toCbor_closure, A.CustomKeyType_fromName_closure, A.WalletMasterKeys_removeKey_closure, A.WalletMasterKeys_WalletMasterKeys$fromCborBytesOrObject_closure, A.WalletMasterKeys_toCbor_closure, A.WalletMasterKeys_getKeyById_closure, A.WalletMasterKeys_importCustomKey_closure, A.SeedTypes_fromName_closure, A.NetworkType_fromTag_closure, A.ArgsType_fromTag_closure, A.MessageArgsStreamMethod_fromValue_closure, A.CryptoRequestMethod_fromTag_closure, A.NoneEncryptedCryptoRequestMethod_fromTag_closure, A.StreamIsolateMethod_fromTag_closure, A.WalletRequestMethod_fromTag_closure, A.CryptoRequestDecodeBackup_CryptoRequestDecodeBackup$deserialize_closure, A.CryptoRequestEncodeBackup_CryptoRequestEncodeBackup$deserialize_closure, A.CryptoRequestGenerateMasterKey_encryptedMasterKey_closure, A.CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure, A.CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure1, A.CryptoRequestHashingType_fromName_closure, A.CryptoRequestRandomGenerator_CryptoRequestRandomGenerator$deserialize_closure, A.CryptoRequestRandomGenerator_toCbor_closure, A.WorkerMessageType_fromTag_closure, A.WorkerCborRequestMessage_WorkerCborRequestMessage$deserialize_closure, A.SigningRequestNetwork_fromTag_closure, A.MoneroSigningRequest_MoneroSigningRequest$deserialize_closure, A.MoneroSigningRequest_MoneroSigningRequest$deserialize_closure0, A.MoneroSigningRequest_MoneroSigningRequest$deserialize_closure1, A.MoneroSigningRequest_getAccountsIndexes_closure, A.MoneroSigningRequest_toCbor_closure, A.MoneroSigningRequest_toCbor_closure0, A.NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize_closure, A.NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize_closure0, A.NoneEncryptedRequestFakeMoneroTx_NoneEncryptedRequestFakeMoneroTx$deserialize_closure1, A.NoneEncryptedRequestFakeMoneroTx_toCbor_closure, A.NoneEncryptedRequestFakeMoneroTx_toCbor_closure0, A.NoneEncryptedRequestGenerateRingOutput_NoneEncryptedRequestGenerateRingOutput$deserialize_closure, A.NoneEncryptedRequestGenerateRingOutput_result_addOuts, A.NoneEncryptedRequestGenerateRingOutput_toCbor_closure, A.WalletRequestMoneroOutputUnlocker_WalletRequestMoneroOutputUnlocker$deserialize_closure, A.WalletRequestMoneroOutputUnlocker_toCbor_closure, A.WalletRequestMoneroOutputUnlocker_result_closure, A.WalletRequestMoneroOutputUnlocker_result_closure0, A.WalletRequestSign_moneroSigning_closure, A.WalletRequestSign_moneroSigning_closure0, A.BlockchainUtils_seedToBipKey_validate, A.MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject_closure, A.APIServiceTracker__checkStatus_closure, A.NewAccountParamsType_fromTag_closure, A.CardanoNewAddressParams_CardanoNewAddressParams$deserialize_closure, A.CardanoNewAddressParams_CardanoNewAddressParams$deserialize_closure0, A.MoneroNewAddressParams_MoneroNewAddressParams$deserialize_closure, A.TronMultisigNewAddressParams_TronMultisigNewAddressParams$deserialize_closure, A.BitcoinMultiSignatureAddress_toCbor_closure, A.BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject_closure, A.BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject_closure0, A.BitcoinMultiSignatureAddress_BitcoinMultiSignatureAddress$fromCborBytesOrObject_closure1, A.StellarMultiSignatureAddress_toCbor_closure, A.StellarMultiSignatureAddress_StellarMultiSignatureAddress$fromCborBytesOrObject_closure, A.TronMultiSignatureAddress_toCbor_closure, A.TronMultiSignatureAddress_TronMultiSignatureAddress$fromCborBytesOrObject_closure, A.RippleMultiSignatureAddress_toCbor_closure, A.RippleMultiSignatureAddress_RippleMultiSignatureAddress$fromCborBytesOrObject_closure, A.MoneroBlockTrackingStatus_fromValue_closure, A.MoneroAccountBlocksTrackerStatus_fromValue_closure, A.MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize_closure, A.MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize_closure0, A.MoneroAccountBlocksTracker_MoneroAccountBlocksTracker$deserialize_closure1, A.MoneroAccountBlocksTracker_getAccountsKeys_closure, A.MoneroTxInfo_MoneroTxInfo$deserialize_closure, A.MoneroProcessTxesResponse_toCbor_closure, A.MoneroBatchProcessTxesResponse_toCbor_closure, A.MoneroProcessTxIdsRequest_MoneroProcessTxIdsRequest$deserialize_closure, A.MoneroProcessTxIdsRequest_MoneroProcessTxIdsRequest$deserialize_closure0, A.MoneroProcessTxIdsRequest_toCbor_closure, A.MoneroProcessTxIdsRequest_toCbor_closure0, A.MoneroSyncAccountsInfos_getAccountKeys_closure, A.MoneroSyncAccountsInfos_MoneroSyncAccountsInfos$deserialize_closure, A.MoneroSyncAccountsInfos_MoneroSyncAccountsInfos$deserialize_closure0, A.MoneroSyncAccountsInfos_toCbor_closure, A.MoneroSyncAccountsInfos_toCbor_closure0, A.MoneroSyncAccountResponse_toCbor_closure, A.MoneroSyncBlockRequestType_fromTag_closure, A.MoneroSyncTrackBlocksRequest_MoneroSyncTrackBlocksRequest$deserialize_closure, A.MoneroRignOutput_toCbor_closure, A.MoneroRignOutput_toCbor_closure0, A.MoneroSignedTxData_toCbor_closure, A.MoneroSignedTxData_toCbor_closure0, A.MoneroSigningTxResponse_toCbor_closure, A.TonAccountContextType_fromTag_closure, A.AbiParameter_isDynamic_closure, A.EIP712Version_fromVersion_closure, A.EIP712Version_fromVersion__closure, A.Eip712TypedData_Eip712TypedData$fromJson_closure, A.Eip712TypedData_toJson__closure, A.EIP712Legacy_EIP712Legacy$fromJson_closure, A.EIP712Legacy_encode_closure, A.EIP712Legacy_encode_closure0, A.EIP712Legacy_encode_closure1, A.EIP712Legacy_toJson_closure, A._EIP712Utils_ensureCorrectValues_closure, A._EIP712Utils_eip712TypedDataV1ValueToJson_closure, A._EIP712Utils_getDependencies__closure, A._EIP712Utils_encodeValue_closure, A._EIP712Utils_encodeValue_closure0, A._EIP712Utils_encodeValue_closure1, A._EIP712Utils_abiEncode_closure, A._EIP712Utils_legacyV1encode_closure, A._EIP712Utils_getMethodSigature_closure, A._EIP712Utils_getMethodSigature__closure, A.ArrayCoder_abiEncode_closure, A.ArrayCoder_abiEncode_closure0, A.ArrayCoder_legacyEip712Encode_closure, A.ArrayCoder_legacyEip712Encode_closure0, A.TupleCoder_abiEncode_closure, A.TupleCoder_legacyEip712Encode_closure, A._ABIUtils_encodeDynamicParams_closure, A._ABIUtils_encodeDynamicParams_closure0, A._ABIUtils_encodeDynamicParams_closure1, A._ABIUtils_encodeDynamicParams_closure2, A.Context_joinAll_closure, A.Context_split_closure, A._validateArgList_closure, A.Highlighter$__closure, A.Highlighter$___closure, A.Highlighter$__closure0, A.Highlighter__collateLines_closure, A.Highlighter__collateLines_closure1, A.Highlighter__collateLines__closure, A.Highlighter_highlight_closure, A.WalletVersion_WalletVersion$fromValue_closure, A._EventStreamSubscription_closure, A._EventStreamSubscription_onData_closure, A._send_closure, A._WebIsolateInitialData_crypto_closure]);
    _inheritMany(A.Closure2Args, [A._CastListBase_sort_closure, A.CastMap_forEach_closure, A.JsLinkedHashMap_addAll_closure, A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A._Future__chainForeignFuture_closure0, A._Future_timeout_closure1, A.LinkedHashMap_LinkedHashMap$from_closure, A.MapBase_mapToString_closure, A._JsonStringifier_writeMap_closure, A._BigIntImpl_hashCode_combine, A._Uri__makeQueryFromParameters_closure, A.Uri__parseIPv4Address_error, A.Uri_parseIPv6Address_error, A.Uri_parseIPv6Address_parseHex, A._Uri__makeQueryFromParametersDefault_writeParameter, A._Uri__makeQueryFromParametersDefault_closure, A._createTables_build, A.FutureGroup_add_closure0, A.AESLib_initialize_mul, A.GroupElementP2_toString_closure, A.GroupElementP1P1_toString_closure, A.GroupElementP3_toString_closure, A.GroupElementCached_toString_closure, A.SchnorrkelSecretKey_hashCode_closure, A.SchnorrkelPublicKey_hashCode_closure, A.LayoutConst_lazyEnum_closure, A.SequenceLayout_encode_closure, A.LazyStructLayout_getSpan_closure, A.StructLayout_StructLayout_closure0, A.StructLayout_getSpan_closure, A.BigintUtils_toDer_closure0, A.BigintUtils_toDer_closure1, A.CanonicalizedMap_addAll_closure, A.CanonicalizedMap_forEach_closure, A.BaseRequest_closure, A.MediaType_toString_closure, A.MoneroTxBuilder__computeDestinationKeys_closure0, A.ComputeDestinationKeys_closure, A.ComputeSourceKeys$__closure, A.MoneroRctTxBuilder_MoneroRctTxBuilder_closure, A.IsolateStreamRequest_getIsolateResult_closure, A.NoneEncryptedRequestGenerateRingOutput_result_closure, A.StreamRequestMoneroBlockTracking_getBlockInfo_closure, A.StreamRequestMoneroBlockTracking_proccessBlock_closure, A.Eip712TypedData_toJson_closure, A._EIP712Utils_getDependencies_closure, A.Highlighter__collateLines_closure0]);
    _inherit(A.CastList, A._CastListBase);
    _inheritMany(A.MapBase, [A.CastMap, A.UnmodifiableMapBase, A.JsLinkedHashMap, A._JsonMap]);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A._CyclicInitializationError, A.RuntimeError, A.AssertionError, A._Error, A.JsonUnsupportedObjectError, A.ArgumentError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError]);
    _inherit(A.UnmodifiableListBase, A.ListBase);
    _inherit(A.CodeUnits, A.UnmodifiableListBase);
    _inheritMany(A.Closure0Args, [A.nullFuture_closure, A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A.Future_Future$delayed_closure, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainForeignFuture_closure1, A._Future__chainCoreFutureAsync_closure, A._Future__asyncCompleteWithValue_closure, A._Future__asyncCompleteError_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A._Future_timeout_closure, A.Stream_length_closure0, A.Stream_first_closure, A._StreamController__subscribe_closure, A._StreamController__recordCancel_complete, A._BufferingStreamSubscription__sendError_sendError, A._BufferingStreamSubscription__sendDone_sendDone, A._PendingEvents_schedule_closure, A._cancelAndValue_closure, A._rootHandleError_closure, A._RootZone_bindCallbackGuarded_closure, A._Utf8Decoder__decoder_closure, A._Utf8Decoder__decoderNonfatal_closure, A._BigIntImpl_toDouble_roundUp, A.StreamSplitter_split_closure, A.BitcoinAddressType_fromValue_closure0, A.ADAAddressType_fromHeader_closure0, A.XlmAddrTypes_fromTag_closure0, A.XmrAddressType_fromPrefix_closure0, A.CoinProposal_fromName_closure0, A.PubKeyModes_fromValue_closure0, A.CardanoIcarusMstKeyGenerator_generateFromSeed_closure, A.CardanoIcarusMstKeyGenerator_generateFromSeed__closure, A.Ed25519Blake2bPrivateKey_Ed25519Blake2bPrivateKey$fromBytes_closure, A.Ed25519PrivateKey_Ed25519PrivateKey$fromBytes_closure, A.MoneroWordsNum_fromValue_closure0, A.MoneroLanguages_fromValue_closure0, A.Scrypt_derive_closure, A.Scrypt_derive__closure0, A.Scrypt_derive_closure0, A.Scrypt_derive__closure, A.QuickCrypto_pbkdf2DeriveKey_closure, A.QuickCrypto_pbkdf2DeriveKey_closure0, A.QuickCrypto_hmacsha256Hash_closure, A.QuickCrypto_hmacSha512Hash_closure, A.OptionalLayout_OptionalLayout_closure, A.KDF2_deriveKey_closure, A.KDF2_deriveKey__closure, A.BitcoinSigner_signBcHTransaction_closure, A.CardanoSigner_CardanoSigner$fromKeyBytes_closure, A.CardanoSigner__signEdward_closure, A.CardanoVerifier__verifyEddsa_closure, A.CosmosSecp256k1Signer__signEcdsa_closure, A.ETHSigner__signEcdsa_closure, A.SolanaSigner_SolanaSigner$fromKeyBytes_closure, A.SolanaSigner__signEdward_closure, A.SolanaVerifier__verifyEddsa_closure, A.SubstrateEcdsaSigner__signEcdsa_closure, A.TronSigner__signEcdsa_closure, A.XrpSigner_XrpSigner$fromKeyBytes_closure, A.XrpSigner__signEdward_closure, A.XrpSigner__signEcdsa_closure, A.XrpVerifier__verifyEddsa_closure, A.CosmosKeysAlgs_fromName_closure0, A.MediaType_MediaType$parse_closure, A.BulletproofsPlusGenerator__bulletproofPlusPROVE_tryAgain, A.MoneroPaymentType_fromName_closure0, A.MoneroTxVersion_fromBase58_closure0, A.RCTType_fromName_closure0, A.TxExtraTypes_fromName_closure0, A.MoneroTxinType_fromName_closure0, A.TxOutTargetType_fromName_closure0, A.MoneroTransactionPrefix__getTxExtraPubKey_closure0, A.MoneroNetwork_fromName_closure0, A.MoneroNetwork_fromIndex_closure0, A.MoneroStorageTypes_fromFlag_closure0, A.ProviderAuthType_fromName_closure0, A.ProviderAuthType_fromTag_closure0, A.HttpClientManager_getCashedClient_closure0, A.HttpClientManager_getCashedClient_closure1, A._CachedClientImpl__startTimer_closure, A.DigestAuthHeadersAlg_fromName_closure0, A.DigestAuthQop_fromName_closure0, A.AddressDerivationType_fromTag_closure0, A.EncryptedIsolateMessageController_handleMessage_closure0, A.CustomKeyType_fromName_closure0, A.SeedTypes_fromName_closure0, A.NetworkType_fromTag_closure0, A.ArgsType_fromTag_closure0, A.MessageArgsStreamMethod_fromValue_closure0, A.CryptoRequestMethod_fromTag_closure0, A.NoneEncryptedCryptoRequestMethod_fromTag_closure0, A.StreamIsolateMethod_fromTag_closure0, A.WalletRequestMethod_fromTag_closure0, A.CryptoRequestDecodeBackup_CryptoRequestDecodeBackup$deserialize_closure0, A.CryptoRequestEncodeBackup_CryptoRequestEncodeBackup$deserialize_closure0, A.CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure0, A.CryptoRequestGenerateBip39Mnemonic_CryptoRequestGenerateBip39Mnemonic$deserialize_closure2, A.CryptoRequestHashingType_fromName_closure0, A.WorkerMessageType_fromTag_closure0, A.SigningRequestNetwork_fromTag_closure0, A.StreamRequestMoneroBlockTracking__fetchBlocks_closure, A.HTTPService_serviceRequest_closure, A.NewAccountParamsType_fromTag_closure0, A.MoneroBlockTrackingStatus_fromValue_closure0, A.MoneroAccountBlocksTrackerStatus_fromValue_closure0, A.MoneroTxInfo_toTx_closure, A.MoneroSyncBlockRequestType_fromTag_closure0, A.TonAccountContextType_fromTag_closure0, A.EIP712Version_fromVersion_closure0, A.Highlighter_closure, A.Highlighter__writeFileStart_closure, A.Highlighter__writeMultilineHighlights_closure, A.Highlighter__writeMultilineHighlights_closure0, A.Highlighter__writeMultilineHighlights_closure1, A.Highlighter__writeMultilineHighlights_closure2, A.Highlighter__writeMultilineHighlights__closure, A.Highlighter__writeMultilineHighlights__closure0, A.Highlighter__writeHighlightedText_closure, A.Highlighter__writeIndicator_closure, A.Highlighter__writeIndicator_closure0, A.Highlighter__writeIndicator_closure1, A.Highlighter__writeSidebar_closure, A._Highlight_closure, A.WalletVersion_WalletVersion$fromValue_closure0]);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.EmptyIterable, A.LinkedHashMapKeyIterable, A._MapBaseValueIterable]);
    _inheritMany(A.ListIterable, [A.SubListIterable, A.MappedListIterable, A._ListIndicesIterable, A.ReversedListIterable, A._JsonMapKeyIterable]);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inherit(A.EfficientLengthTakeIterable, A.TakeIterable);
    _inherit(A.EfficientLengthSkipIterable, A.SkipIterable);
    _inherit(A.ListMapView, A.UnmodifiableMapBase);
    _inherit(A._Record2, A._Record);
    _inherit(A._Record_2, A._Record2);
    _inherit(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A.MapView);
    _inherit(A.UnmodifiableMapView, A._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(A.ConstantMapView, A.UnmodifiableMapView);
    _inheritMany(A.ConstantMap, [A.ConstantStringMap, A.GeneralConstantMap]);
    _inherit(A.Instantiation1, A.Instantiation);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A._AssertionError, A.AssertionError);
    _inheritMany(A.JsLinkedHashMap, [A.JsIdentityLinkedHashMap, A.JsConstantLinkedHashMap, A._LinkedCustomHashMap]);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfDouble, [A.NativeFloat32List, A.NativeFloat64List]);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8ClampedList, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A._BufferingStreamSubscription, [A._ControllerSubscription, A._SinkTransformerStreamSubscription]);
    _inherit(A._BroadcastSubscription, A._ControllerSubscription);
    _inherit(A._AsyncBroadcastStreamController, A._BroadcastStreamController);
    _inherit(A._AsyncCompleter, A._Completer);
    _inheritMany(A.Stream, [A.StreamView, A._StreamImpl, A._EmptyStream, A._BoundSinkStream, A._EventStream]);
    _inheritMany(A._StreamController, [A._AsyncStreamController, A._SyncStreamController]);
    _inherit(A._ControllerStream, A._StreamImpl);
    _inheritMany(A._DelayedEvent, [A._DelayedData, A._DelayedError]);
    _inherit(A._StreamSinkTransformer, A.StreamTransformerBase);
    _inherit(A._StreamHandlerTransformer, A._StreamSinkTransformer);
    _inherit(A._RootZone, A._Zone);
    _inheritMany(A.SetBase, [A._SetBase, A._UnmodifiableSetView_SetBase__UnmodifiableSetMixin]);
    _inherit(A._LinkedHashSet, A._SetBase);
    _inherit(A.UnmodifiableSetView, A._UnmodifiableSetView_SetBase__UnmodifiableSetMixin);
    _inheritMany(A.Codec, [A.Encoding, A.Base64Codec, A.JsonCodec]);
    _inheritMany(A.Encoding, [A.AsciiCodec, A.Latin1Codec, A.Utf8Codec]);
    _inheritMany(A.Converter, [A._UnicodeSubsetEncoder, A._UnicodeSubsetDecoder, A.Base64Encoder, A.Base64Decoder, A.JsonEncoder, A.JsonDecoder, A.Utf8Encoder, A.Utf8Decoder]);
    _inheritMany(A._UnicodeSubsetEncoder, [A.AsciiEncoder, A.Latin1Encoder]);
    _inherit(A.AsciiDecoder, A._UnicodeSubsetDecoder);
    _inherit(A._ByteCallbackSink, A.ByteConversionSink);
    _inherit(A.JsonCyclicError, A.JsonUnsupportedObjectError);
    _inherit(A._JsonStringStringifier, A._JsonStringifier);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A._DataUri, A._Uri);
    _inheritMany(A.BitcoinAddressType, [A.P2pkhAddressType, A.P2shAddressType, A.SegwitAddressType]);
    _inheritMany(A.BlockchainUtilsException, [A.DartBitcoinPluginException, A.Base58ChecksumError, A.AddressConverterException, A.Bip32KeyError, A.Bip32PathError, A.Bip44DepthError, A.MnemonicException, A.MoneroKeyError, A.SubstrateKeyError, A.SubstratePathError, A.CborException, A.CryptoOpsException, A.SquareRootError, A.JacobiError, A.ArgumentException, A.MessageException, A.GenericException, A.RPCError, A.LayoutException, A.Web3SecretStorageDefinationV3Exception, A.DartCosmosSdkPluginException, A.DartMoneroPluginException, A.SolidityAbiException, A.TronPluginException, A.DartStellarPlugingException, A.TonDartPluginException]);
    _inheritMany(A._Enum, [A.Base58Alphabets, A.ChainType, A.PubKeyModes, A.EncodeType, A.ExpansionMode, A.LayoutAction, A.KDFMode, A.SecretWalletEncoding, A.RequestServiceType, A.ServiceResponseType, A.StringEncoding, A.CosmosKeysAlgs, A.DemonRequestType, A.MoneroRequestApiType, A.PoolInfoExtent, A.DaemonRequestBlocksInfo, A.HTTPRequestType, A.ProviderAuthType, A.HTTPClientType, A.HTTPResponseType, A.DigestAuthHeadersAlg, A.DigestAuthQop, A.AddressDerivationType, A.CustomKeyType, A.SeedTypes, A.ArgsType, A.MessageArgsStreamMethod, A.CryptoRequestMethod, A.NoneEncryptedCryptoRequestMethod, A.StreamIsolateMethod, A.WalletRequestMethod, A.CryptoRequestHashingType, A.WorkerMessageType, A.SigningRequestNetwork, A.NodeClientStatus, A.ServiceProtocol, A.APIServiceStatus, A.NewAccountParamsType, A.MoneroBlockTrackingStatus, A.MoneroParsingBlockStatus, A.MoneroAccountBlocksTrackerStatus, A.MoneroUnlockPaymentRequestStatus, A.MoneroUnlockPaymentRequestOutputStatus, A.MoneroSyncBlockResponseType, A.MoneroSyncBlockRequestType, A.TonAccountContextType]);
    _inherit(A.XmrAddrEncoder, A.BlockchainAddressEncoder);
    _inheritMany(A.Bip32KeyBase, [A.Bip32PublicKey, A.Bip32PrivateKey]);
    _inheritMany(A.Bip32Base, [A.Bip32KholawEd25519, A.Bip32Slip10Ed25519, A.Bip32Slip10Nist256p1, A.Bip32Slip10Secp256k1, A.CardanoByronLegacyBip32, A.CardanoIcarusBip32]);
    _inheritMany(A.Bip32KholawEd25519KeyDerivatorBase, [A.Bip32KholawEd25519KeyDerivator, A.CardanoByronLegacyKeyDerivator]);
    _inherit(A.Bip32Slip10Ed25519Blake2b, A.Bip32Slip10Ed25519);
    _inheritMany(A.IBip32MstKeyGenerator, [A.Bip32Slip10Secp256k1MstKeyGenerator, A.CardanoByronLegacyMstKeyGenerator]);
    _inheritMany(A.Mnemonic, [A.Bip39Mnemonic, A.MoneroMnemonic]);
    _inheritMany(A.MnemonicDecoderBase, [A.Bip39MnemonicDecoder, A.MoneroMnemonicDecoder]);
    _inheritMany(A.MnemonicEncoderBase, [A.Bip39MnemonicEncoder, A.MoneroMnemonicEncoderBase, A.TonMnemonicEncoder]);
    _inheritMany(A.MnemonicWordsListGetterBase, [A.Bip39WordsListGetter, A.MoneroWordsListGetter]);
    _inheritMany(A.MnemonicWordsListFinderBase, [A.Bip39WordsListFinder, A.MoneroWordsListFinder]);
    _inheritMany(A.MnemonicValidator, [A.Bip39MnemonicValidator, A.MoneroMnemonicValidator]);
    _inheritMany(A.BipCoins, [A.Bip44Coins, A.Bip49Coins, A.Bip84Coins, A.Bip86Coins, A.Cip1852Coins, A.CustomCoins]);
    _inheritMany(A.BipCoinConfig, [A.BipBitcoinCashConf, A.BipLitecoinConf]);
    _inherit(A.MoneroEntropyGenerator, A.EntropyGenerator);
    _inheritMany(A.MoneroMnemonicEncoderBase, [A.MoneroMnemonicNoChecksumEncoder, A.MoneroMnemonicWithChecksumEncoder]);
    _inheritMany(A.SubstrateScaleEncoderBase, [A.SubstrateScaleBytesEncoder, A.SubstrateScaleCUintEncoder, A.SubstrateScaleUintEncoder]);
    _inheritMany(A.SubstrateScaleUintEncoder, [A.SubstrateScaleU8Encoder, A.SubstrateScaleU16Encoder, A.SubstrateScaleU32Encoder, A.SubstrateScaleU64Encoder, A.SubstrateScaleU128Encoder, A.SubstrateScaleU256Encoder]);
    _inheritMany(A._CborDate, [A.CborStringDateValue, A.CborEpochFloatValue, A.CborEpochIntValue]);
    _inheritMany(A.CborString, [A.CborStringValue, A.CborIndefiniteStringValue]);
    _inheritMany(A.Curve, [A.CurveFp, A.CurveED]);
    _inheritMany(A.AbstractPoint, [A.ProjectiveECCPoint, A.EDPoint]);
    _inherit(A.RistrettoPoint, A.EDPoint);
    _inheritMany(A._Keccack, [A.Keccack, A.SHA3, A.SHAKE]);
    _inherit(A.SHA3256, A.SHA3);
    _inheritMany(A.SHAKE, [A.SHAKE128, A.SHAKE256]);
    _inherit(A.RIPEMD160, A._RIPEMD);
    _inherit(A.SHA512256, A.SHA512);
    _inheritMany(A.BaseLazyLayout, [A.LazyLayout, A.ConditionalLazyLayout]);
    _inheritMany(A.Layout, [A.SequenceLayout, A.ConstantLayout, A.CustomLayout, A.LazyStructLayout, A.LazyUnion, A.LazyVariantLayout, A.MapEntryLayout, A.ExternalLayout, A.BaseIntiger, A.UnionDiscriminatorLayout, A.OptionalLayout, A.PaddingLayout, A.RawBytesLayout, A.StructLayout, A.MoneroBigIntVarInt, A.MoneroIntVarInt]);
    _inheritMany(A.ExternalLayout, [A.ExternalOffsetLayout, A.OffsetLayout]);
    _inheritMany(A.BaseIntiger, [A.IntegerLayout, A.BigIntLayout]);
    _inherit(A.UnionLayoutDiscriminatorLayout, A.UnionDiscriminatorLayout);
    _inheritMany(A.KDFParam, [A.KDF2, A.KDFScrypt]);
    _inheritMany(A.BaseServiceResponse, [A.ServiceSuccessRespose, A.ServiceErrorResponse]);
    _inherit(A.CosmosMessage, A.CosmosProtocolBuffer);
    _inherit(A.CosmosPrivateKey, A.CosmosMessage);
    _inheritMany(A.CosmosPrivateKey, [A.CosmosED25519PrivateKey, A.CosmosETHSecp256K1PrivateKey, A.CosmosSecp256K1PrivateKey]);
    _inheritMany(A.BaseClient, [A.RetryClient, A.BrowserClient]);
    _inherit(A.ByteStream, A.StreamView);
    _inheritMany(A.BaseRequest, [A.Request, A.StreamedRequest]);
    _inheritMany(A.BaseResponse, [A.Response, A.StreamedResponse]);
    _inherit(A.StreamedResponseV2, A.StreamedResponse);
    _inherit(A.CaseInsensitiveMap, A.CanonicalizedMap);
    _inheritMany(A.MoneroSerialization, [A.MoneroVariantSerialization, A.MoneroAddress, A.CtKey, A.MECSignature, A.MultisigLR, A.MoneroMultisigOutputInfo, A.MoneroBlockheader, A.SpendablePayment, A.MoneroTxDestination, A.MoneroAccountIndex, A.OutsEntery, A.RctSigPrunable, A.BulletproofPlus, A.Bulletproof, A.Clsag, A.MgSig, A.BoroSig, A.RangeSig, A.MoneroTxSignatures, A.EcdhInfo, A.MoneroTxout, A.MoneroTransactionPrefix, A.MoneroTxBuilder, A.ComputeDestinationKeys, A.ComputeSourceKeys]);
    _inheritMany(A.MoneroVariantSerialization, [A.MoneroBaseAccountKeys, A.MoneroOutput, A.MoneroPayment, A.RCTSignatureBase, A.TxExtra, A.MoneroTxin, A.TxoutTarget]);
    _inherit(A.MoneroAccountKeys, A.MoneroBaseAccountKeys);
    _inheritMany(A.MoneroAddress, [A.MoneroAccountAddress, A.MoneroIntegratedAddress]);
    _inheritMany(A.DartMoneroPluginException, [A.MoneroCryptoException, A.MoneroSerializationException]);
    _inherit(A.MoneroBlock, A.MoneroBlockheader);
    _inheritMany(A.MoneroOutput, [A.MoneroLockedOutput, A.MoneroUnlockedOutput]);
    _inherit(A.MoneroUnlockedMultisigOutput, A.MoneroUnlockedOutput);
    _inheritMany(A.MoneroPayment, [A.MoneroLockedPayment, A.MoneroUnLockedPayment]);
    _inherit(A.MoneroUnlockedMultisigPayment, A.MoneroUnLockedPayment);
    _inheritMany(A.RctSigPrunable, [A.ClsagPrunable, A.MgSigPrunable, A.BulletproofPrunable]);
    _inherit(A.RctSigPrunableBulletproofPlus, A.ClsagPrunable);
    _inheritMany(A.BulletproofPrunable, [A.RctSigPrunableCLSAG, A.RctSigPrunableBulletproof2, A.RctSigPrunableBulletproof]);
    _inherit(A.RctSigPrunableRangeSigs, A.MgSigPrunable);
    _inheritMany(A.MoneroTxSignatures, [A.RCTSignature, A.MoneroV1Signature]);
    _inheritMany(A.EcdhInfo, [A.EcdhInfoV2, A.EcdhInfoV1]);
    _inheritMany(A.RCTSignatureBase, [A.RCTNull, A.RCTCLSAG, A.RCTSimple, A.RCTFull, A.RCTBulletproof]);
    _inheritMany(A.RCTCLSAG, [A.RCTBulletproof2, A.RCTBulletproofPlus]);
    _inheritMany(A.TxExtra, [A.TxExtraPublicKey, A.TxExtraNonce, A.TxExtraAdditionalPubKeys]);
    _inheritMany(A.MoneroTxin, [A.TxinToKey, A.TxinToScriptHash, A.TxinToScript, A.TxinGen]);
    _inheritMany(A.TxoutTarget, [A.TxoutToScript, A.TxoutToScriptHash, A.TxoutToKey, A.TxoutToTaggedKey]);
    _inherit(A.MoneroTransaction, A.MoneroTransactionPrefix);
    _inherit(A.MoneroDaemonRequestParam, A.BaseServiceRequest);
    _inherit(A.MoneroRequestDetails, A.BaseServiceRequestParams);
    _inheritMany(A.MoneroDaemonRequestParam, [A.DaemonRequestGetBlocksBin, A.DaemonRequestGetTransactions, A.DaemonRequestOnGetBlockHash]);
    _inheritMany(A.DaemonBaseResponse, [A.DaemonGetBlockBinResponse, A.OutputDistributionResponse]);
    _inherit(A.MoneroProvider, A.BaseProvider);
    _inherit(A.VariantOffsetLayout, A.ExternalOffsetLayout);
    _inherit(A.MoneroStorageBinary, A.MoneroStorageContainer);
    _inheritMany(A.MoneroStorageEntry, [A.MoneroStorageEntryNull, A.MoneroStorageEntryPromitive, A.MoneroStorageEntryList, A.MoneroStorageEntrySection]);
    _inherit(A.MoneroRctTxBuilder, A.MoneroTxBuilder);
    _inherit(A.WebHTTPServiceWorker, A.HTTPServiceWorker);
    _inheritMany(A.HTTPWorkerResponse, [A.HTTPWorkerResponseSuccess, A.HTTPWorkerResponseError]);
    _inherit(A._ProviderAuthenticated_Object_CborSerializable_Equatable, A._ProviderAuthenticated_Object_CborSerializable);
    _inherit(A.ProviderAuthenticated, A._ProviderAuthenticated_Object_CborSerializable_Equatable);
    _inheritMany(A.ProviderAuthenticated, [A.BasicProviderAuthenticated, A.DigestProviderAuthenticated]);
    _inheritMany(A._Client, [A._CachedClientImpl, A.__DigestAuthClient__Client__DigestAuthClientImpl]);
    _inheritMany(A._CachedClientImpl, [A._CachedClient, A.__DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl]);
    _inherit(A._DigestAuthClient, A.__DigestAuthClient__Client__DigestAuthClientImpl);
    _inherit(A._DigestAuthCachedClient, A.__DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl);
    _inherit(A.LiveListenable, A._LiveListenable_Object__LiveListenable);
    _inherit(A._Live, A.LiveListenable);
    _inherit(A.Live, A._Live);
    _inherit(A._AddressDerivationIndex_Object_CborSerializable_Equatable, A._AddressDerivationIndex_Object_CborSerializable);
    _inherit(A.AddressDerivationIndex, A._AddressDerivationIndex_Object_CborSerializable_Equatable);
    _inheritMany(A.AddressDerivationIndex, [A.Bip32AddressIndex, A.MultiSigAddressIndex, A.SubstrateAddressIndex]);
    _inherit(A.BrowserCryptoWorker, A.IsolateCryptoWoker);
    _inherit(A.CryptoPublicKeyData, A._CryptoPublicKeyData_Object_CborSerializable);
    _inheritMany(A.CryptoPublicKeyData, [A.AdaLegacyPublicKeyData, A.MoneroPublicKeyData, A.PublicKeyData]);
    _inherit(A.CryptoPrivateKeyData, A._CryptoPrivateKeyData_Object_CborSerializable);
    _inherit(A.AccessCryptoPrivateKeysRequest, A._AccessCryptoPrivateKeysRequest_Object_CborSerializable);
    _inherit(A.AccessCryptoPrivateKeyRequest, A._AccessCryptoPrivateKeyRequest_Object_CborSerializable);
    _inherit(A.CryptoPrivateKeysResponse, A._CryptoPrivateKeysResponse_Object_CborSerializable);
    _inherit(A.CryptoPublicKeysResponse, A._CryptoPublicKeysResponse_Object_CborSerializable);
    _inheritMany(A.CryptoPrivateKeyData, [A.MoneroPrivateKeyData, A.PrivateKeyData]);
    _inherit(A.ImportCustomKeys, A._ImportCustomKeys_Object_CborSerializable);
    _inherit(A._EncryptedCustomKey_Object_Equatable_CborSerializable, A._EncryptedCustomKey_Object_Equatable);
    _inherit(A.EncryptedCustomKey, A._EncryptedCustomKey_Object_Equatable_CborSerializable);
    _inherit(A.EncryptedMasterKey, A._EncryptedMasterKey_Object_CborSerializable);
    _inherit(A._ImportedKeyStorage_Object_CborSerializable_Equatable, A._ImportedKeyStorage_Object_CborSerializable);
    _inherit(A.ImportedKeyStorage, A._ImportedKeyStorage_Object_CborSerializable_Equatable);
    _inherit(A.WalletMasterKeys, A._WalletMasterKeys_Object_CborSerializable);
    _inherit(A._CborMessageArgs_IsolateMessageArgs_CborSerializable, A.IsolateMessageArgs);
    _inherit(A.CborMessageArgs, A._CborMessageArgs_IsolateMessageArgs_CborSerializable);
    _inheritMany(A.CborMessageArgs, [A.MessageArgsRequestable, A.WalletArgsRequestable, A.MessageArgsTwoBytes, A.MessageArgsOneBytes, A.MessageArgsStreamId, A.MessageArgsThreeBytes, A.MessageArgsException, A.MessageArgsMessage]);
    _inherit(A.MessageArgsStream, A.MessageArgsRequestable);
    _inherit(A._CborArgsCompleter_ArgsCompleter_CborSerializable, A.ArgsCompleter);
    _inherit(A.CborArgsCompleter, A._CborArgsCompleter_ArgsCompleter_CborSerializable);
    _inherit(A.StreamArgsCompleter, A.EncodableArgsCompleter);
    _inheritMany(A.CborArgsCompleter, [A.CryptoArgsCompleter, A.NoneEncryptedArgsCompleter, A.WalletArgsCompleter]);
    _inherit(A.WalletArgs, A.WalletArgsRequestable);
    _inherit(A.CryptoRequest, A.CryptoArgsCompleter);
    _inherit(A.WalletRequest, A.WalletArgsCompleter);
    _inherit(A.NoneEncryptedCryptoRequest, A.NoneEncryptedArgsCompleter);
    _inherit(A.IsolateStreamRequest, A.StreamArgsCompleter);
    _inheritMany(A.CryptoRequest, [A.CryptoRequestEncryptChacha, A.CryptoRequestDecryptChacha, A.CryptoRequestCreateMasterKey, A.CryptoRequestCreateHDWallet, A.CryptoRequestDecodeBackup, A.CryptoRequestEncodeBackup, A.CryptoRequestGenerateMasterKey, A.CryptoRequestGenerateBip39Mnemonic, A.MoneroMnemonicToPrivateKeyMessage, A.MoneroMenmonicGenerateMessage, A.CryptoRequestHashing, A.CryptoRequestRandomGenerator, A.CryptoRequestReadMasterKey, A.CryptoRequestSetupMasterKey, A.TonMnemonicToPrivateKeyMessage, A.TonMenmonicGenerateMessage, A.CryptoRequestWalletKey]);
    _inheritMany(A.WorkerMessage, [A._WorkerNoneEncryptedMessage_WorkerMessage_CborSerializable, A._WorkerEncryptedMessage_WorkerMessage_CborSerializable]);
    _inherit(A.WorkerNoneEncryptedMessage, A._WorkerNoneEncryptedMessage_WorkerMessage_CborSerializable);
    _inherit(A.WorkerEncryptedMessage, A._WorkerEncryptedMessage_WorkerMessage_CborSerializable);
    _inherit(A.WorkeBaserRequestMessage, A._WorkeBaserRequestMessage_Object_CborSerializable);
    _inherit(A.WorkerCborRequestMessage, A.WorkeBaserRequestMessage);
    _inherit(A.IsolateCborResponseMessage, A._IsolateCborResponseMessage_Object_CborSerializable);
    _inherit(A.SignRequest, A._SignRequest_Object_CborSerializable);
    _inheritMany(A.SignRequest, [A.GlobalSignRequest, A.CosmosSigningRequest, A.MoneroSigningRequest]);
    _inherit(A.BitcoinSigning, A.GlobalSignRequest);
    _inherit(A.GlobalSignResponse, A._GlobalSignResponse_Object_CborSerializable);
    _inheritMany(A.NoneEncryptedCryptoRequest, [A.NoneEncryptedRequestHashing, A.NoneEncryptedRequestHexToBytes, A.NoneEncryptedRequestFakeMoneroTx, A.NoneEncryptedRequestGenerateRingOutput, A.NoneEncryptedRequestMoneroGenerateTxProof, A.NoneEncryptedRequestMoneroVerifyTxProof, A.CryptoRequestTestLarge]);
    _inheritMany(A.IsolateStreamRequest, [A.StreamRequestMoneroBlockTracking, A.StreamRequestHexToBytes]);
    _inheritMany(A.WalletRequest, [A.WalletRequestDeriveAddress, A.WalletRequestReadImportedKey, A.WalletRequestReadPrivateKeys, A.WalletRequestReadPublicKeys, A.WalletRequestMoneroOutputUnlocker, A.WalletRequestSignMessage, A.WalletRequestReadMnemonic, A.WalletRequestSign, A.WalletRequestEthereumTypedDataSign, A.WalletRequestImportNewKey, A.WalletRequestBackupWallet, A.WalletRequestRemoveKey]);
    _inherit(A.NetworkClient, A._NetworkClient_Object_BaseRepository);
    _inherit(A._MoneroClient_NetworkClient_CryptoWokerImpl, A.NetworkClient);
    _inherit(A.MoneroClient, A._MoneroClient_NetworkClient_CryptoWokerImpl);
    _inherit(A._APIProvider_Object_Equatable_CborSerializable, A._APIProvider_Object_Equatable);
    _inherit(A.APIProvider, A._APIProvider_Object_Equatable_CborSerializable);
    _inherit(A.MoneroAPIProvider, A.APIProvider);
    _inherit(A.HTTPService, A._HTTPService_Object_HttpImpl);
    _inherit(A.MoneroHTTPService, A.HTTPService);
    _inherit(A._BitcoinMultiSigSignerDetais_Object_Equatable_CborSerializable, A._BitcoinMultiSigSignerDetais_Object_Equatable);
    _inherit(A.BitcoinMultiSigSignerDetais, A._BitcoinMultiSigSignerDetais_Object_Equatable_CborSerializable);
    _inherit(A.BitcoinMultiSignatureAddress, A._BitcoinMultiSignatureAddress_Object_CborSerializable);
    _inherit(A._StellarMultiSigSignerDetails_Object_Equatable_CborSerializable, A._StellarMultiSigSignerDetails_Object_Equatable);
    _inherit(A.StellarMultiSigSignerDetails, A._StellarMultiSigSignerDetails_Object_Equatable_CborSerializable);
    _inherit(A._StellarMultiSignatureAddress_Object_Equatable_CborSerializable, A._StellarMultiSignatureAddress_Object_Equatable);
    _inherit(A.StellarMultiSignatureAddress, A._StellarMultiSignatureAddress_Object_Equatable_CborSerializable);
    _inherit(A._TronMultiSigSignerDetais_Object_Equatable_CborSerializable, A._TronMultiSigSignerDetais_Object_Equatable);
    _inherit(A.TronMultiSigSignerDetais, A._TronMultiSigSignerDetais_Object_Equatable_CborSerializable);
    _inherit(A._TronMultiSignatureAddress_Object_Equatable_CborSerializable, A._TronMultiSignatureAddress_Object_Equatable);
    _inherit(A.TronMultiSignatureAddress, A._TronMultiSignatureAddress_Object_Equatable_CborSerializable);
    _inherit(A._RippleMultiSigSignerDetails_Object_Equatable_CborSerializable, A._RippleMultiSigSignerDetails_Object_Equatable);
    _inherit(A.RippleMultiSigSignerDetails, A._RippleMultiSigSignerDetails_Object_Equatable_CborSerializable);
    _inherit(A._RippleMultiSignatureAddress_Object_Equatable_CborSerializable, A._RippleMultiSignatureAddress_Object_Equatable);
    _inherit(A.RippleMultiSignatureAddress, A._RippleMultiSignatureAddress_Object_Equatable_CborSerializable);
    _inherit(A._CardanoAddrDetails_Object_Equatable_CborSerializable, A._CardanoAddrDetails_Object_Equatable);
    _inherit(A.CardanoAddrDetails, A._CardanoAddrDetails_Object_Equatable_CborSerializable);
    _inherit(A._MoneroBlockTrackingPossition_Object_CborSerializable_Equatable, A._MoneroBlockTrackingPossition_Object_CborSerializable);
    _inherit(A.MoneroBlockTrackingPossition, A._MoneroBlockTrackingPossition_Object_CborSerializable_Equatable);
    _inherit(A.MoneroAccountBlocksTracker, A._MoneroAccountBlocksTracker_Object_CborSerializable);
    _inherit(A._MoneroViewPrimaryAccountDetails_Object_CborSerializable_Equatable, A._MoneroViewPrimaryAccountDetails_Object_CborSerializable);
    _inherit(A.MoneroViewPrimaryAccountDetails, A._MoneroViewPrimaryAccountDetails_Object_CborSerializable_Equatable);
    _inherit(A._MoneroViewAccountDetails_Object_Equatable_CborSerializable, A._MoneroViewAccountDetails_Object_Equatable);
    _inherit(A.MoneroViewAccountDetails, A._MoneroViewAccountDetails_Object_Equatable_CborSerializable);
    _inherit(A.MoneroTxInfo, A._MoneroTxInfo_Object_CborSerializable);
    _inherit(A._MoneroOutputDetails_Object_CborSerializable_Equatable, A._MoneroOutputDetails_Object_CborSerializable);
    _inherit(A.MoneroOutputDetails, A._MoneroOutputDetails_Object_CborSerializable_Equatable);
    _inherit(A.MoneroUnlockedPaymentRequestDetails, A._MoneroUnlockedPaymentRequestDetails_Object_CborSerializable);
    _inherit(A.MoneroProcessTxesResponse, A._MoneroProcessTxesResponse_Object_CborSerializable);
    _inherit(A.MoneroBatchProcessTxesResponse, A._MoneroBatchProcessTxesResponse_Object_CborSerializable);
    _inherit(A.MoneroProcessTxIdsRequest, A._MoneroProcessTxIdsRequest_Object_CborSerializable);
    _inherit(A._MoneroSyncAccountsInfos_Object_CborSerializable_Equatable, A._MoneroSyncAccountsInfos_Object_CborSerializable);
    _inherit(A.MoneroSyncAccountsInfos, A._MoneroSyncAccountsInfos_Object_CborSerializable_Equatable);
    _inherit(A._MoneroSyncAccountIndexInfo_Object_CborSerializable_Equatable, A._MoneroSyncAccountIndexInfo_Object_CborSerializable);
    _inherit(A.MoneroSyncAccountIndexInfo, A._MoneroSyncAccountIndexInfo_Object_CborSerializable_Equatable);
    _inherit(A.MoneroSyncBlocksResponse, A._MoneroSyncBlocksResponse_Object_CborSerializable);
    _inheritMany(A.MoneroSyncBlocksResponse, [A.MoneroBlocksInfoResponse, A.MoneroSyncAccountResponse]);
    _inherit(A.MoneroSyncBlocksRequest, A._MoneroSyncBlocksRequest_Object_CborSerializable);
    _inheritMany(A.MoneroSyncBlocksRequest, [A.MoneroSyncTrackBlocksRequest, A.MoneroSyncBlocksInfoRequest]);
    _inherit(A.MoneroRignOutput, A._MoneroRignOutput_Object_CborSerializable);
    _inherit(A.MoneroTxDestinationWithProof, A._MoneroTxDestinationWithProof_Object_CborSerializable);
    _inherit(A.MoneroSignedTxData, A._MoneroSignedTxData_Object_CborSerializable);
    _inherit(A.MoneroSigningTxResponse, A._MoneroSigningTxResponse_Object_CborSerializable);
    _inherit(A._TonAccountContext_Object_CborSerializable_Equatable, A._TonAccountContext_Object_CborSerializable);
    _inherit(A.TonAccountContext, A._TonAccountContext_Object_CborSerializable_Equatable);
    _inheritMany(A.TonAccountContext, [A.TonAccountLegacyContext, A.TonAccountSubWalletContext, A.TonAccountV5CustomContext, A.TonAccountV5SubWalletContext]);
    _inherit(A.TronAddress, A.SolidityAddress);
    _inherit(A.InternalStyle, A.Style);
    _inheritMany(A.InternalStyle, [A.PosixStyle, A.UrlStyle, A.WindowsStyle]);
    _inherit(A.FileLocation, A.SourceLocationMixin);
    _inheritMany(A.SourceSpanMixin, [A._FileSpan, A.SourceSpanBase]);
    _inherit(A.SourceSpanFormatException, A.SourceSpanException);
    _inherit(A.SourceSpanWithContext, A.SourceSpanBase);
    _inherit(A.StellarAccountAddress, A.StellarAddress);
    _inherit(A.StellarAddressException, A.DartStellarPlugingException);
    _inherit(A.StringScannerException, A.SourceSpanFormatException);
    _inheritMany(A.TonDartPluginException, [A.TonContractException, A.KeyException]);
    _mixin(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixin(A.__CastListBase__CastIterableBase_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._AsyncStreamController, A._AsyncStreamControllerDispatch);
    _mixin(A._SyncStreamController, A._SyncStreamControllerDispatch);
    _mixin(A.UnmodifiableMapBase, A._UnmodifiableMapMixin);
    _mixin(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._UnmodifiableMapMixin);
    _mixin(A._UnmodifiableSetView_SetBase__UnmodifiableSetMixin, A._UnmodifiableSetMixin);
    _mixin(A._ProviderAuthenticated_Object_CborSerializable, A.CborSerializable);
    _mixin(A._ProviderAuthenticated_Object_CborSerializable_Equatable, A.Equatable);
    _mixinHard(A.__DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl, A._DigestAuthClientImpl);
    _mixinHard(A.__DigestAuthClient__Client__DigestAuthClientImpl, A._DigestAuthClientImpl);
    _mixin(A._LiveListenable_Object__LiveListenable, A._LiveListenable);
    _mixin(A._AddressDerivationIndex_Object_CborSerializable, A.CborSerializable);
    _mixin(A._AddressDerivationIndex_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._CryptoPrivateKeyData_Object_CborSerializable, A.CborSerializable);
    _mixin(A._CryptoPublicKeyData_Object_CborSerializable, A.CborSerializable);
    _mixin(A._AccessCryptoPrivateKeyRequest_Object_CborSerializable, A.CborSerializable);
    _mixin(A._AccessCryptoPrivateKeysRequest_Object_CborSerializable, A.CborSerializable);
    _mixin(A._CryptoPrivateKeysResponse_Object_CborSerializable, A.CborSerializable);
    _mixin(A._CryptoPublicKeysResponse_Object_CborSerializable, A.CborSerializable);
    _mixin(A._ImportCustomKeys_Object_CborSerializable, A.CborSerializable);
    _mixin(A._EncryptedCustomKey_Object_Equatable, A.Equatable);
    _mixin(A._EncryptedCustomKey_Object_Equatable_CborSerializable, A.CborSerializable);
    _mixin(A._EncryptedMasterKey_Object_CborSerializable, A.CborSerializable);
    _mixin(A._ImportedKeyStorage_Object_CborSerializable, A.CborSerializable);
    _mixin(A._ImportedKeyStorage_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._WalletMasterKeys_Object_CborSerializable, A.CborSerializable);
    _mixin(A._CborArgsCompleter_ArgsCompleter_CborSerializable, A.CborSerializable);
    _mixin(A._CborMessageArgs_IsolateMessageArgs_CborSerializable, A.CborSerializable);
    _mixin(A._WorkerEncryptedMessage_WorkerMessage_CborSerializable, A.CborSerializable);
    _mixin(A._WorkerNoneEncryptedMessage_WorkerMessage_CborSerializable, A.CborSerializable);
    _mixin(A._WorkeBaserRequestMessage_Object_CborSerializable, A.CborSerializable);
    _mixin(A._IsolateCborResponseMessage_Object_CborSerializable, A.CborSerializable);
    _mixin(A._SignRequest_Object_CborSerializable, A.CborSerializable);
    _mixin(A._GlobalSignResponse_Object_CborSerializable, A.CborSerializable);
    _mixin(A._NetworkClient_Object_BaseRepository, A.BaseRepository);
    _mixin(A._MoneroClient_NetworkClient_CryptoWokerImpl, A.CryptoWokerImpl);
    _mixin(A._APIProvider_Object_Equatable, A.Equatable);
    _mixin(A._APIProvider_Object_Equatable_CborSerializable, A.CborSerializable);
    _mixin(A._HTTPService_Object_HttpImpl, A.HttpImpl);
    _mixin(A._BitcoinMultiSigSignerDetais_Object_Equatable, A.Equatable);
    _mixin(A._BitcoinMultiSigSignerDetais_Object_Equatable_CborSerializable, A.CborSerializable);
    _mixin(A._BitcoinMultiSignatureAddress_Object_CborSerializable, A.CborSerializable);
    _mixin(A._StellarMultiSigSignerDetails_Object_Equatable, A.Equatable);
    _mixin(A._StellarMultiSigSignerDetails_Object_Equatable_CborSerializable, A.CborSerializable);
    _mixin(A._StellarMultiSignatureAddress_Object_Equatable, A.Equatable);
    _mixin(A._StellarMultiSignatureAddress_Object_Equatable_CborSerializable, A.CborSerializable);
    _mixin(A._TronMultiSigSignerDetais_Object_Equatable, A.Equatable);
    _mixin(A._TronMultiSigSignerDetais_Object_Equatable_CborSerializable, A.CborSerializable);
    _mixin(A._TronMultiSignatureAddress_Object_Equatable, A.Equatable);
    _mixin(A._TronMultiSignatureAddress_Object_Equatable_CborSerializable, A.CborSerializable);
    _mixin(A._RippleMultiSigSignerDetails_Object_Equatable, A.Equatable);
    _mixin(A._RippleMultiSigSignerDetails_Object_Equatable_CborSerializable, A.CborSerializable);
    _mixin(A._RippleMultiSignatureAddress_Object_Equatable, A.Equatable);
    _mixin(A._RippleMultiSignatureAddress_Object_Equatable_CborSerializable, A.CborSerializable);
    _mixin(A._CardanoAddrDetails_Object_Equatable, A.Equatable);
    _mixin(A._CardanoAddrDetails_Object_Equatable_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroAccountBlocksTracker_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroBatchProcessTxesResponse_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroBlockTrackingPossition_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroBlockTrackingPossition_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._MoneroOutputDetails_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroOutputDetails_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._MoneroProcessTxIdsRequest_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroProcessTxesResponse_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroSyncAccountIndexInfo_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroSyncAccountIndexInfo_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._MoneroSyncAccountsInfos_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroSyncAccountsInfos_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._MoneroSyncBlocksRequest_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroSyncBlocksResponse_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroTxInfo_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroUnlockedPaymentRequestDetails_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroViewAccountDetails_Object_Equatable, A.Equatable);
    _mixin(A._MoneroViewAccountDetails_Object_Equatable_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroViewPrimaryAccountDetails_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroViewPrimaryAccountDetails_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._MoneroRignOutput_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroSignedTxData_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroSigningTxResponse_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MoneroTxDestinationWithProof_Object_CborSerializable, A.CborSerializable);
    _mixin(A._TonAccountContext_Object_CborSerializable, A.CborSerializable);
    _mixin(A._TonAccountContext_Object_CborSerializable_Equatable, A.Equatable);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List", Object: "Object", Map: "Map"},
    mangledNames: {},
    types: ["~()", "0&()", "List<int>(List<int>)", "Layout<Map<String,@>>({property:String?})", "SubstrateEd25519AddrEncoder([@])", "P2PKHAddrEncoder([@])", "P2SHAddrEncoder([@])", "EthAddrEncoder([@])", "SubstrateSecp256k1AddrEncoder([@])", "AtomAddrEncoder([@])", "SubstrateSr25519AddrEncoder([@])", "SHA512()", "BlockchainAddressEncoder([@])", "String(String)", "SHA256()", "int(int,int)", "Null()", "Map<String,@>(@)", "String(List<int>)", "bool(String)", "int(int)", "List<int>(EncoderResult)", "P2WPKHAddrEncoder([@])", "CtKey(List<int>)", "@(@)", "HMAC()", "AdaShelleyAddrEncoder([@])", "MoneroTxDestination(CborBytesValue)", "AdaByronIcarusAddrEncoder([@])", "int()", "~(Object?)", "MoneroPublicKey(List<int>)", "~(Object,StackTrace)", "XrpAddrEncoder([@])", "Map<String,@>(EcdhInfo)", "List<int>(CtKey)", "List<int>(MoneroPublicKey)", "CustomLayout<Map<String,@>,List<Map<String,@>>>({property:String?})", "Map<String,@>(MoneroTxout)", "XlmAddrEncoder([@])", "bool(_Highlight)", "Null(Object,StackTrace)", "Null(@)", "bool(MoneroWordsNum)", "BigInt(@)", "String(CborStringValue)", "EcdhInfoV2(Map<String,@>)", "Bulletproof(Map<String,@>)", "Map<String,@>(Bulletproof)", "MgSig(Map<String,@>)", "Map<String,@>(MgSig)", "EcdhInfoV1(Map<String,@>)", "MoneroBlockTrackingPossition(CborTagValue<@>)", "Map<String,@>(MoneroTxin)", "~(~())", "Future<Response>({client!RetryClient,headers!Map<String,String>?,uri!Uri})", "bool(ImportedKeyStorage)", "String(Match)", "~(Object[StackTrace?])", "bool(MapEntry<String,@>)", "String(MapEntry<String,@>)", "int(Object?)", "Map<String,@>(Map<String,@>)", "int(int,Layout<@>)", "String(int)", "~(List<int>)", "Null(JSObject)", "OkexAddrEncoder([@])", "Map<String,@>(MoneroAccountIndex)", "List<int>(@)", "~(String,@)", "Map<String,@>(OutsEntery)", "int(String?)", "Clsag(Map<String,@>)", "Map<String,@>(Clsag)", "~(String)", "P2TRAddrEncoder([@])", "~(Object?,Object?)", "@()", "@(String)", "Layout<Map<String,@>>({action!LayoutAction,property:String?,remindBytes!int,sourceOrResult!Map<String,@>?})", "bool(Object?,Object?)", "AtomEthSecp256k1AddrEncoder([@])", "AtomNist256P1AddrEncoder([@])", "AtomEd25519AddrEncoder([@])", "bool(Bip39EntropyBitLen)", "ErgoP2PKHAddrEncoder([@])", "SolAddrEncoder([@])", "bool(TxExtra)", "TrxAddrEncoder([@])", "~(Uint8List,String,int)", "MoneroTxout(Map<String,@>)", "bool(MoneroNetwork)", "bool(Bip44Coins)", "List<int>(String)", "bool(MoneroStorageEntry<@>)", "List<int>(SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>)", "bool(MoneroTxDestination)", "MoneroTxDestination(Map<String,@>)", "~(@)", "bool(ProviderAuthType)", "bool(BaseResponse)", "AdaByronLegacyAddrEncoder([@])", "bool(int?)", "Bip32KeyIndex(int?)", "TonAddrEncoder([@])", "bool(SecretWalletEncoding)", "XmrAddrEncoder([@])", "CborBytesValue(MoneroTxDestination)", "MoneroPayment<MoneroOutput>(CborBytesValue)", "int(int,DaemonBlockCompleteEntryResponse)", "MoneroAccountKeys(int)", "CborBytesValue(MoneroAccountIndex)", "CborBigIntValue(BigInt)", "String(Eip712TypedDataV1)", "AbiParameter(String)", "EncoderResult(@)", "NeoAddrEncoder([@])", "bool(CborBase64Types)", "~(JSObject)", "int(@,@)", "bool(Bip39WordsNum)", "String(@)", "bool(String,String)", "Future<Null>()", "int(String)", "int(XlmAddrTypes)", "String(MapEntry<String,String>)", "MediaType()", "~(String,String)", "NanoAddrEncoder([@])", "NearAddrEncoder([@])", "MultisigLR(Map<String,@>)", "Map<String,@>(MultisigLR)", "BulletproofPlus()", "List<GroupElementCached>(List<GroupElementCached>)", "bool(XmrAddressType)", "List<List<int>>(@)", "List<int>(TxExtra)", "_Future<@>(@)", "bool(MoneroPaymentType)", "MoneroMultisigOutputInfo(Map<String,@>)", "Map<String,@>(MoneroMultisigOutputInfo)", "OutsEntery(Map<String,@>)", "~(int,@)", "bool(MoneroTxVersion)", "Future<@>()", "~(String,int)", "BulletproofPlus(Map<String,@>)", "Map<String,@>(BulletproofPlus)", "XtzAddrEncoder([@])", "List<List<int>>(List<List<int>>)", "Iterable<String>(List<List<int>>)", "bool(Bip44Levels)", "ZilAddrEncoder([@])", "~(String,int?)", "bool(Bip49Coins)", "RangeSig(Map<String,@>)", "Map<String,@>(RangeSig)", "RctSigPrunable?(Map<String,@>?)", "bool(@)", "bool(Bip84Coins)", "List<int>(Map<String,@>)", "SequenceLayout<@>({property:String?})", "RawBytesLayout({action!LayoutAction,property:String?,remindBytes!int,sourceOrResult!@})", "Map<String,List<int>>(List<int>)", "bool(RCTType)", "List<CtKey>(List<CtKey>)", "AlgoAddrEncoder([@])", "bool(Bip86Coins)", "AptosAddrEncoder([@])", "bool(BipProposal)", "bool(PubKeyModes)", "bool(TxExtraTypes)", "PubKeyModes()", "bool(MoneroTxinType)", "BigInt(BigInt)", "String(BigInt)", "bool(TxOutTargetType)", "~(String,String?)", "AvaxPChainAddrEncoder([@])", "bool(Cip1852Coins)", "AvaxXChainAddrEncoder([@])", "MoneroTxin(Map<String,@>)", "BLAKE2b()", "bool(MoneroCoins)", "TxResponse(@)", "DaemonTxBlobEntryResponse(@)", "Map<String,@>(DaemonTxBlobEntryResponse)", "Uint8List(@,@)", "DaemonTxOutputIndicesResponse(@)", "DaemonBlockCompleteEntryResponse(@)", "DaemonBlockOutputIndicesResponse(@)", "DaemonPoolTxInfoResponse(@)", "DistributionResponse(@)", "bool(MoneroLanguages)", "Map<@,@>(Map<String,@>)", "Map<String,@>(Map<@,@>)", "bool(Object?)", "String(Object?)", "Tuple<Object,MoneroStorageTypes>(Object)", "bool(Tuple<Object,MoneroStorageTypes>)", "String(Object)", "Object(Tuple<Object,MoneroStorageTypes>)", "Map<String,@>(Object)", "MoneroSection(Map<String,@>)", "MoneroStorageEntry<@>(String)", "bool(SubstrateCoins)", "List<int>(MoneroStorageEntry<@>)", "bool(MoneroStorageTypes)", "~(@,@)", "TxinToKey(SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>)", "BigInt(OutsEntery)", "MoneroAddress(MoneroTxDestination)", "BigInt(BigInt,MoneroTxDestination)", "bool(BitcoinAddressType)", "int(SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>)", "CtKey(SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>)", "MoneroPublicKey(MoneroTxout)", "MoneroTxout(MoneroTxout)", "BigInt(MoneroTxout)", "BigInt(BigInt,MoneroTxout)", "MoneroPrivateKey(List<int>)", "TxExtra(Map<String,@>)", "Map<String,@>(TxExtra)", "List<int>(MoneroPrivateKey)", "BigInt(TxinToKey)", "TxinToKey(TxinToKey)", "BigInt(BigInt,TxinToKey)", "TxinToKey(Map<String,@>)", "Map<String,@>(TxinToKey)", "int(SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>,SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>)", "String(RegExpMatch)", "SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>(Map<String,@>)", "Map<String,@>(MoneroTxDestination)", "Map<String,@>(SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>)", "SubstratePathElem(String)", "CborObject(@)", "Null(~())", "bool(DigestAuthHeadersAlg)", "bool(DigestAuthQop)", "bool(CustomCoins)", "@(@,String)", "bool(AddressDerivationType)", "Null(@,StackTrace)", "List<int>(CborBytesValue)", "~(MessageArgsStream)", "AccessCryptoPrivateKeyRequest(@)", "String()", "CborTagValue<@>(CryptoPrivateKeyData)", "CborTagValue<@>(CryptoPublicKeyData)", "CborTagValue<@>(EncryptedCustomKey)", "bool(CustomKeyType)", "bool(int)", "ImportedKeyStorage(@)", "CborTagValue<@>(ImportedKeyStorage)", "bool(SeedTypes)", "bool(NetworkType)", "bool(ArgsType)", "bool(MessageArgsStreamMethod)", "bool(CryptoRequestMethod)", "bool(NoneEncryptedCryptoRequestMethod)", "bool(StreamIsolateMethod)", "bool(WalletRequestMethod)", "EgldAddrEncoder([@])", "EncryptedCustomKey(ImportedKeyStorage)", "bool(Bip39Languages)", "bool(CryptoRequestHashingType)", "CborBytesValue(List<int>)", "bool(WorkerMessageType)", "WorkerEncryptedMessage(CborObject)", "bool(SigningRequestNetwork)", "List<int>(int)", "SpendablePayment<MoneroLockedPayment>(CborBytesValue)", "MoneroAccountIndex(SpendablePayment<MoneroLockedPayment>)", "EosAddrEncoder([@])", "CborBytesValue(SpendablePayment<MoneroLockedPayment>)", "bool(ADAAddressType)", "CborBytesValue(MoneroUnLockedPayment<MoneroUnlockedOutput>)", "~(BigInt)", "int(BigInt,BigInt)", "CborBytesValue(MoneroPayment<MoneroOutput>)", "FilSecp256k1AddrEncoder([@])", "Future<List<int>>()", "MoneroProcessTxIdsRequest(CborTagValue<@>)", "CborTagValue<@>(MoneroProcessTxIdsRequest)", "AccessCryptoPrivateKeyRequest(MoneroProcessTxIdsRequest)", "~(int,LazyVariantModel<@>)", "SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>(SpendablePayment<MoneroLockedPayment>)", "MoneroTxDestinationWithProof(MoneroTxDestination)", "Bip32Base(Bip32Base)", "ProviderAuthenticated(CborTagValue<@>)", "bool(ApiRequest)", "Future<HTTPCallerResponse>()", "bool(NewAccountParamsType)", "Bip32AddressIndex(CborObject)", "CardanoAddrDetails(CborObject)", "MoneroViewAccountDetails(CborObject)", "TronMultiSignatureAddress(CborObject)", "CborTagValue<@>(BitcoinMultiSigSignerDetais)", "BitcoinMultiSigSignerDetais(@)", "CborTagValue<@>(StellarMultiSigSignerDetails)", "StellarMultiSigSignerDetails(@)", "CborTagValue<@>(TronMultiSigSignerDetais)", "TronMultiSigSignerDetais(@)", "CborTagValue<@>(RippleMultiSigSignerDetails)", "RippleMultiSigSignerDetails(@)", "bool(MoneroBlockTrackingStatus)", "bool(MoneroAccountBlocksTrackerStatus)", "MoneroSyncAccountsInfos(CborTagValue<@>)", "CborTagValue<@>(AccessCryptoPrivateKeyRequest)", "MoneroTransaction()", "BigInt(CborBigIntValue)", "CborTagValue<@>(MoneroUnlockedPaymentRequestDetails)", "CborTagValue<@>(MoneroProcessTxesResponse)", "MoneroTxInfo(CborTagValue<@>)", "MoneroAccountIndex(CborBytesValue)", "CborTagValue<@>(MoneroTxInfo)", "String(MapEntry<int,String>)", "MoneroAccountIndex(MoneroSyncAccountIndexInfo)", "MoneroSyncAccountIndexInfo(CborTagValue<@>)", "CborTagValue<@>(MoneroSyncAccountIndexInfo)", "CborStringValue(String)", "CborTagValue<@>(MoneroSyncAccountsInfos)", "bool(MoneroSyncBlockRequestType)", "@(Map<String,@>)", "CborBytesValue(MoneroPrivateKey)", "CborTagValue<@>(MoneroTxDestinationWithProof)", "bool(TonAccountContextType)", "bool(AbiParameter)", "bool(EIP712Version)", "int(EIP712Version)", "Eip712TypeDetails(@)", "MapEntry<String,List<Map<String,@>>>(String,List<Eip712TypeDetails>)", "Map<String,@>(Eip712TypeDetails)", "Eip712TypedDataV1(@)", "@(Eip712TypedDataV1)", "int(int,BaseLazyLayout<@>)", "Map<String,@>(Eip712TypedDataV1)", "List<String>(List<String>,Eip712TypeDetails)", "Tuple<String,@>(@)", "String(Tuple<String,@>)", "@(Tuple<String,@>)", "int?()", "String(Eip712TypeDetails)", "String(Layout<@>)", "IcxAddrEncoder([@])", "String(String?)", "String?()", "int(_Line)", "List<int>(BigInt)", "Object(_Line)", "Object(_Highlight)", "int(_Highlight,_Highlight)", "List<_Line>(MapEntry<Object,List<_Highlight>>)", "SourceSpanWithContext()", "bool(WalletVersion)", "int(int,List<int>)", "Null(WorkerMessage<@,@>)", "Null(IsolateResponseMessage<@,IsolateMessageArgs>)", "List<int>(List<int>,List<int>)", "InjAddrEncoder([@])", "bool(CosmosKeysAlgs)", "bool(XlmAddrTypes)", "0^(0^,0^)<num>", "Bip32KeyIndex(String)", "bool(Object,StackTrace)", "Duration(int)", "int(TxExtra,TxExtra)", "MoneroBigIntVarInt({property:String?})", "MoneroIntVarInt({property:String?})", "CustomLayout<Map<String,@>,List<int>>({property:String?})", "OneAddrEncoder([@])"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti"),
    rttc: {
      "2;": (t1, t2) => o => o instanceof A._Record_2 && t1._is(o._0) && t2._is(o._1)
    }
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"JavaScriptFunction":"LegacyJavaScriptObject","PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JSBool":{"bool":[],"TrustedGetRuntimeType":[]},"JSNull":{"Null":[],"TrustedGetRuntimeType":[]},"JavaScriptObject":{"JSObject":[]},"LegacyJavaScriptObject":{"JSObject":[]},"JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"],"JSIndexable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"],"JSIndexable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[],"Comparable":["num"]},"JSInt":{"double":[],"int":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSNumNotInt":{"double":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSString":{"String":[],"Comparable":["String"],"Pattern":[],"JSIndexable":["@"],"TrustedGetRuntimeType":[]},"_CastIterableBase":{"Iterable":["2"]},"CastIterator":{"Iterator":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_CastListBase":{"ListBase":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"ListBase":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListBase.E":"2","Iterable.E":"2"},"CastMap":{"MapBase":["3","4"],"Map":["3","4"],"MapBase.K":"3","MapBase.V":"4"},"LateError":{"Error":[]},"CodeUnits":{"ListBase":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListBase.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2","ListIterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"ExpandIterable":{"Iterable":["2"],"Iterable.E":"2"},"ExpandIterator":{"Iterator":["2"]},"TakeIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthTakeIterable":{"TakeIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"TakeIterator":{"Iterator":["1"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterator":{"Iterator":["1"]},"UnmodifiableListBase":{"ListBase":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_ListIndicesIterable":{"ListIterable":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"Iterable.E":"int","ListIterable.E":"int"},"ListMapView":{"MapBase":["int","1"],"_UnmodifiableMapMixin":["int","1"],"Map":["int","1"],"MapBase.K":"int","MapBase.V":"1","_UnmodifiableMapMixin.K":"int","_UnmodifiableMapMixin.V":"1"},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"_Record_2":{"_Record2":[],"_Record":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"],"_UnmodifiableMapMixin.K":"1","_UnmodifiableMapMixin.V":"2"},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_KeysOrValues":{"Iterable":["1"],"Iterable.E":"1"},"_KeysOrValuesOrElementsIterator":{"Iterator":["1"]},"GeneralConstantMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"Instantiation":{"Closure":[],"Function":[]},"Instantiation1":{"Closure":[],"Function":[]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"NullThrownFromJavaScriptException":{"Exception":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Closure":[],"Function":[]},"Closure2Args":{"Closure":[],"Function":[]},"TearOffClosure":{"Closure":[],"Function":[]},"StaticClosure":{"Closure":[],"Function":[]},"BoundClosure":{"Closure":[],"Function":[]},"_CyclicInitializationError":{"Error":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"JsIdentityLinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"JsConstantLinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_Record2":{"_Record":[]},"JSSyntaxRegExp":{"RegExp":[],"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"Iterable":["RegExpMatch"],"Iterable.E":"RegExpMatch"},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"_StringAllMatchesIterator":{"Iterator":["Match"]},"NativeByteBuffer":{"JSObject":[],"TrustedGetRuntimeType":[]},"NativeTypedData":{"JSObject":[],"TypedData":[]},"NativeByteData":{"ByteData":[],"JSObject":[],"TypedData":[],"TrustedGetRuntimeType":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"JSObject":[],"TypedData":[],"JSIndexable":["1"]},"NativeTypedArrayOfDouble":{"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double","FixedLengthListMixin.E":"double"},"NativeFloat64List":{"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double","FixedLengthListMixin.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"Uint16List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"Uint32List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"Uint8List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"_Future":{"Future":["1"]},"StreamController":{"EventSink":["1"]},"_HandlerEventSink":{"EventSink":["1"]},"_TimerImpl":{"Timer":[]},"_AsyncAwaitCompleter":{"Completer":["1"]},"_SyncStarIterator":{"Iterator":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"AsyncError":{"Error":[]},"_BroadcastSubscription":{"_ControllerSubscription":["1"],"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_BroadcastStreamController":{"StreamController":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"TimeoutException":{"Exception":[]},"_Completer":{"Completer":["1"]},"_AsyncCompleter":{"_Completer":["1"],"Completer":["1"]},"StreamView":{"Stream":["1"]},"StreamTransformerBase":{"StreamTransformer":["1","2"]},"_StreamController":{"StreamController":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_AsyncStreamController":{"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_SyncStreamController":{"_SyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventSink":["1"],"_EventDispatch":["1"]},"_ControllerStream":{"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_ControllerSubscription":{"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_StreamSinkWrapper":{"EventSink":["1"]},"_BufferingStreamSubscription":{"StreamSubscription":["1"],"_EventSink":["1"],"_EventDispatch":["1"],"_BufferingStreamSubscription.T":"1"},"_StreamImpl":{"Stream":["1"]},"_DelayedData":{"_DelayedEvent":["1"]},"_DelayedError":{"_DelayedEvent":["@"]},"_DelayedDone":{"_DelayedEvent":["@"]},"_DoneStreamSubscription":{"StreamSubscription":["1"]},"_EmptyStream":{"Stream":["1"],"Stream.T":"1"},"_EventSinkWrapper":{"EventSink":["1"]},"_SinkTransformerStreamSubscription":{"_BufferingStreamSubscription":["2"],"StreamSubscription":["2"],"_EventSink":["2"],"_EventDispatch":["2"],"_BufferingStreamSubscription.T":"2"},"_StreamSinkTransformer":{"StreamTransformer":["1","2"]},"_BoundSinkStream":{"Stream":["2"],"Stream.T":"2"},"_StreamHandlerTransformer":{"_StreamSinkTransformer":["1","2"],"StreamTransformer":["1","2"]},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_LinkedCustomHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_LinkedHashSet":{"SetBase":["1"],"LinkedHashSet":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"ListBase":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"Map":["1","2"]},"UnmodifiableMapBase":{"MapBase":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_MapBaseValueIterable":{"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_MapBaseValueIterator":{"Iterator":["2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"],"_UnmodifiableMapMixin.K":"1","_UnmodifiableMapMixin.V":"2"},"SetBase":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SetBase":{"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"UnmodifiableSetView":{"SetBase":["1"],"_UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"Encoding":{"Codec":["String","List<int>"]},"_JsonMap":{"MapBase":["String","@"],"Map":["String","@"],"MapBase.K":"String","MapBase.V":"@"},"_JsonMapKeyIterable":{"ListIterable":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"Iterable.E":"String","ListIterable.E":"String"},"AsciiCodec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"_UnicodeSubsetEncoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"AsciiEncoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"_UnicodeSubsetDecoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"AsciiDecoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"Base64Codec":{"Codec":["List<int>","String"],"Codec.S":"List<int>"},"Base64Encoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"Base64Decoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"Converter":{"StreamTransformer":["1","2"]},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"Error":[]},"JsonCodec":{"Codec":["Object?","String"],"Codec.S":"Object?"},"JsonEncoder":{"Converter":["Object?","String"],"StreamTransformer":["Object?","String"]},"JsonDecoder":{"Converter":["String","Object?"],"StreamTransformer":["String","Object?"]},"Latin1Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"Latin1Encoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"Utf8Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"Utf8Encoder":{"Converter":["String","List<int>"],"StreamTransformer":["String","List<int>"]},"Utf8Decoder":{"Converter":["List<int>","String"],"StreamTransformer":["List<int>","String"]},"BigInt":{"Comparable":["BigInt"]},"DateTime":{"Comparable":["DateTime"]},"double":{"num":[],"Comparable":["num"]},"Duration":{"Comparable":["Duration"]},"int":{"num":[],"Comparable":["num"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExpMatch":{"Match":[]},"String":{"Comparable":["String"],"Pattern":[]},"_BigIntImpl":{"BigInt":[],"Comparable":["BigInt"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"_Exception":{"Exception":[]},"FormatException":{"Exception":[]},"IntegerDivisionByZeroException":{"Exception":[],"Error":[]},"_StringStackTrace":{"StackTrace":[]},"StringBuffer":{"StringSink":[]},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"Uri":[]},"ByteData":{"TypedData":[]},"Int8List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint8ClampedList":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Int16List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint16List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Int32List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint32List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Float32List":{"List":["double"],"EfficientLengthIterable":["double"],"TypedData":[],"Iterable":["double"]},"Float64List":{"List":["double"],"EfficientLengthIterable":["double"],"TypedData":[],"Iterable":["double"]},"ErrorResult":{"Result":["0&"]},"ValueResult":{"Result":["1"]},"P2pkhAddressType":{"BitcoinAddressType":[]},"P2shAddressType":{"BitcoinAddressType":[]},"SegwitAddressType":{"BitcoinAddressType":[]},"DartBitcoinPluginException":{"BlockchainUtilsException":[],"Exception":[]},"Base58ChecksumError":{"BlockchainUtilsException":[],"Exception":[]},"AdaByronIcarusAddrEncoder":{"BlockchainAddressEncoder":[]},"AdaByronLegacyAddrEncoder":{"BlockchainAddressEncoder":[]},"AdaShelleyAddrEncoder":{"BlockchainAddressEncoder":[]},"AlgoAddrEncoder":{"BlockchainAddressEncoder":[]},"AptosAddrEncoder":{"BlockchainAddressEncoder":[]},"AtomAddrEncoder":{"BlockchainAddressEncoder":[]},"AtomEthSecp256k1AddrEncoder":{"BlockchainAddressEncoder":[]},"AtomNist256P1AddrEncoder":{"BlockchainAddressEncoder":[]},"AtomEd25519AddrEncoder":{"BlockchainAddressEncoder":[]},"AvaxPChainAddrEncoder":{"BlockchainAddressEncoder":[]},"AvaxXChainAddrEncoder":{"BlockchainAddressEncoder":[]},"EgldAddrEncoder":{"BlockchainAddressEncoder":[]},"EosAddrEncoder":{"BlockchainAddressEncoder":[]},"ErgoP2PKHAddrEncoder":{"BlockchainAddressEncoder":[]},"EthAddrEncoder":{"BlockchainAddressEncoder":[]},"AddressConverterException":{"BlockchainUtilsException":[],"Exception":[]},"FilSecp256k1AddrEncoder":{"BlockchainAddressEncoder":[]},"IcxAddrEncoder":{"BlockchainAddressEncoder":[]},"InjAddrEncoder":{"BlockchainAddressEncoder":[]},"NanoAddrEncoder":{"BlockchainAddressEncoder":[]},"NearAddrEncoder":{"BlockchainAddressEncoder":[]},"NeoAddrEncoder":{"BlockchainAddressEncoder":[]},"OkexAddrEncoder":{"BlockchainAddressEncoder":[]},"OneAddrEncoder":{"BlockchainAddressEncoder":[]},"P2PKHAddrEncoder":{"BlockchainAddressEncoder":[]},"BchP2PKHAddrEncoder":{"BlockchainAddressEncoder":[]},"P2SHAddrEncoder":{"BlockchainAddressEncoder":[]},"BchP2SHAddrEncoder":{"BlockchainAddressEncoder":[]},"P2TRAddrEncoder":{"BlockchainAddressEncoder":[]},"P2WPKHAddrEncoder":{"BlockchainAddressEncoder":[]},"SolAddrEncoder":{"BlockchainAddressEncoder":[]},"SubstrateEd25519AddrEncoder":{"BlockchainAddressEncoder":[]},"SubstrateSr25519AddrEncoder":{"BlockchainAddressEncoder":[]},"SubstrateSecp256k1AddrEncoder":{"BlockchainAddressEncoder":[]},"TonAddrEncoder":{"BlockchainAddressEncoder":[]},"TrxAddrEncoder":{"BlockchainAddressEncoder":[]},"XlmAddrEncoder":{"BlockchainAddressEncoder":[]},"XmrAddrEncoder":{"BlockchainAddressEncoder":[]},"XrpAddrEncoder":{"BlockchainAddressEncoder":[]},"XtzAddrEncoder":{"BlockchainAddressEncoder":[]},"ZilAddrEncoder":{"BlockchainAddressEncoder":[]},"Bip32KeyError":{"BlockchainUtilsException":[],"Exception":[]},"Bip32PathError":{"BlockchainUtilsException":[],"Exception":[]},"Bip32KholawEd25519":{"Bip32Base":[]},"Bip32Slip10Ed25519":{"Bip32Base":[]},"Bip32Slip10Ed25519Blake2b":{"Bip32Base":[]},"Bip32Slip10Nist256p1":{"Bip32Base":[]},"Bip32Slip10Secp256k1":{"Bip32Base":[]},"Bip39Languages":{"MnemonicLanguages":[]},"Bip39Mnemonic":{"Mnemonic":[]},"Bip39MnemonicDecoder":{"MnemonicDecoderBase":[]},"Bip39WordsListFinder":{"MnemonicWordsListFinderBase":[]},"Bip39MnemonicValidator":{"MnemonicValidator":["Bip39MnemonicDecoder"],"MnemonicValidator.T":"Bip39MnemonicDecoder"},"Bip44DepthError":{"BlockchainUtilsException":[],"Exception":[]},"BipCoins":{"CryptoCoins":["BipCoinConfig"]},"Bip44Coins":{"CryptoCoins":["BipCoinConfig"]},"Bip49Coins":{"CryptoCoins":["BipCoinConfig"]},"Bip84Coins":{"CryptoCoins":["BipCoinConfig"]},"Bip86Coins":{"CryptoCoins":["BipCoinConfig"]},"BipBitcoinCashConf":{"BipCoinConfig":[],"CoinConfig":[]},"BipCoinConfig":{"CoinConfig":[]},"BipLitecoinConf":{"BipCoinConfig":[],"CoinConfig":[]},"CardanoByronLegacyBip32":{"Bip32Base":[]},"CardanoIcarusBip32":{"Bip32Base":[]},"Cip1852Coins":{"CryptoCoins":["BipCoinConfig"]},"CipProposal":{"BipProposal":[]},"Ed25519Blake2bPublicKey":{"IPublicKey":[]},"Ed25519Blake2bPrivateKey":{"IPrivateKey":[]},"Ed25519PublicKey":{"IPublicKey":[]},"Ed25519PrivateKey":{"IPrivateKey":[]},"Ed25519KholawPublicKey":{"IPublicKey":[]},"Ed25519KholawPrivateKey":{"IPrivateKey":[]},"MoneroPublicKey":{"IPublicKey":[]},"MoneroPrivateKey":{"IPrivateKey":[]},"Nist256p1PublicKey":{"IPublicKey":[]},"Nist256p1PrivateKey":{"IPrivateKey":[]},"Secp256k1PublicKeyEcdsa":{"IPublicKey":[]},"Secp256k1PrivateKeyEcdsa":{"IPrivateKey":[]},"Sr25519PublicKey":{"IPublicKey":[]},"Sr25519PrivateKey":{"IPrivateKey":[]},"MnemonicException":{"BlockchainUtilsException":[],"Exception":[]},"MoneroCoinConf":{"CoinConfig":[]},"MoneroCoins":{"CryptoCoins":["MoneroCoinConf"]},"MoneroLanguages":{"MnemonicLanguages":[]},"MoneroMnemonic":{"Mnemonic":[]},"MoneroMnemonicDecoder":{"MnemonicDecoderBase":[]},"MoneroWordsListFinder":{"MnemonicWordsListFinderBase":[]},"MoneroMnemonicValidator":{"MnemonicValidator":["MnemonicDecoderBase"],"MnemonicValidator.T":"MnemonicDecoderBase"},"MoneroKeyError":{"BlockchainUtilsException":[],"Exception":[]},"SubstrateCoinConf":{"CoinConfig":[]},"SubstrateCoins":{"CryptoCoins":["SubstrateCoinConf"]},"SubstrateKeyError":{"BlockchainUtilsException":[],"Exception":[]},"SubstratePathError":{"BlockchainUtilsException":[],"Exception":[]},"SubstratePath":{"Iterable":["@"],"Iterable.E":"@"},"SubstrateScaleBytesEncoder":{"SubstrateScaleEncoderBase":[]},"SubstrateScaleCUintEncoder":{"SubstrateScaleEncoderBase":[]},"SubstrateScaleUintEncoder":{"SubstrateScaleEncoderBase":[]},"SubstrateScaleU8Encoder":{"SubstrateScaleEncoderBase":[]},"SubstrateScaleU16Encoder":{"SubstrateScaleEncoderBase":[]},"SubstrateScaleU32Encoder":{"SubstrateScaleEncoderBase":[]},"SubstrateScaleU64Encoder":{"SubstrateScaleEncoderBase":[]},"SubstrateScaleU128Encoder":{"SubstrateScaleEncoderBase":[]},"SubstrateScaleU256Encoder":{"SubstrateScaleEncoderBase":[]},"TonMnemonicLanguages":{"Bip39Languages":[],"MnemonicLanguages":[]},"CborNumeric":{"CborObject":[]},"CborException":{"BlockchainUtilsException":[],"Exception":[]},"CborBaseUrlValue":{"CborObject":[]},"CborBigFloatValue":{"CborObject":[]},"CborBigIntValue":{"CborNumeric":[],"CborObject":[]},"CborBoleanValue":{"CborObject":[]},"CborBytesValue":{"CborObject":[]},"CborDynamicBytesValue":{"CborObject":[]},"CborTagValue":{"CborObject":[]},"CborEpochIntValue":{"CborObject":[]},"_CborDate":{"CborObject":[]},"CborStringDateValue":{"CborObject":[]},"CborEpochFloatValue":{"CborObject":[]},"CborDecimalFracValue":{"CborObject":[]},"CborFloatValue":{"CborObject":[]},"CborIntValue":{"CborNumeric":[],"CborObject":[]},"CborSafeIntValue":{"CborNumeric":[],"CborObject":[]},"CborListValue":{"CborObject":[]},"CborMapValue":{"CborObject":[]},"CborMimeValue":{"CborObject":[]},"CborNullValue":{"CborObject":[]},"CborUndefinedValue":{"CborObject":[]},"CborRegxpValue":{"CborObject":[]},"CborSetValue":{"CborObject":[]},"CborStringValue":{"CborObject":[]},"CborIndefiniteStringValue":{"CborObject":[]},"CborString":{"CborObject":[]},"CborUriValue":{"CborObject":[]},"AES":{"BlockCipher":[]},"CryptoOpsException":{"BlockchainUtilsException":[],"Exception":[]},"ProjectiveECCPoint":{"AbstractPoint":[]},"EDPoint":{"AbstractPoint":[]},"RistrettoPoint":{"EDPoint":[],"AbstractPoint":[]},"SquareRootError":{"BlockchainUtilsException":[],"Exception":[]},"JacobiError":{"BlockchainUtilsException":[],"Exception":[]},"BLAKE2b":{"SerializableHash":["Blake2bState"]},"Blake2bState":{"HashState":[]},"HashBytesState":{"HashState":[]},"SH1State":{"HashState":[]},"SHA256":{"SerializableHash":["SHA256State"]},"SHA256State":{"HashState":[]},"SHA512":{"SerializableHash":["SHA512State"]},"SHA512State":{"HashState":[]},"SHA3":{"SerializableHash":["HashBytesState"]},"SHA3256":{"SerializableHash":["HashBytesState"]},"SHAKE":{"SerializableHash":["HashBytesState"]},"SHAKE128":{"SerializableHash":["HashBytesState"]},"SHAKE256":{"SerializableHash":["HashBytesState"]},"MD4":{"SerializableHash":["SH1State"]},"MD5":{"SerializableHash":["SH1State"]},"RIPEMD160":{"SerializableHash":["SH1State"]},"_RIPEMD":{"SerializableHash":["SH1State"]},"SHA512256":{"SerializableHash":["SHA512State"]},"HMAC":{"SerializableHash":["HashState"]},"BlockchainUtilsException":{"Exception":[]},"ArgumentException":{"BlockchainUtilsException":[],"Exception":[]},"MessageException":{"BlockchainUtilsException":[],"Exception":[]},"GenericException":{"BlockchainUtilsException":[],"Exception":[]},"RPCError":{"BlockchainUtilsException":[],"Exception":[]},"LazyLayout":{"BaseLazyLayout":["1"]},"ConditionalLazyLayout":{"BaseLazyLayout":["1"]},"SequenceLayout":{"Layout":["List<1>"],"Layout.T":"List<1>"},"ConstantLayout":{"Layout":["1"],"Layout.T":"1"},"CustomLayout":{"Layout":["2"],"Layout.T":"2"},"LazyStructLayout":{"Layout":["Map<String,@>"],"Layout.T":"Map<String,@>"},"LazyVariantLayout":{"Layout":["Map<String,@>"],"Layout.T":"Map<String,@>"},"LazyUnion":{"Layout":["Map<String,@>"],"Layout.T":"Map<String,@>"},"MapEntryLayout":{"Layout":["MapEntry<@,@>"],"Layout.T":"MapEntry<@,@>"},"ExternalLayout":{"Layout":["int"]},"ExternalOffsetLayout":{"ExternalLayout":[],"Layout":["int"]},"BaseIntiger":{"Layout":["1"]},"IntegerLayout":{"BaseIntiger":["int"],"Layout":["int"],"Layout.T":"int"},"BigIntLayout":{"BaseIntiger":["BigInt"],"Layout":["BigInt"],"Layout.T":"BigInt"},"UnionDiscriminatorLayout":{"Layout":["int"]},"UnionLayoutDiscriminatorLayout":{"Layout":["int"],"Layout.T":"int"},"OffsetLayout":{"ExternalLayout":[],"Layout":["int"],"Layout.T":"int"},"OptionalLayout":{"Layout":["1?"],"Layout.T":"1?"},"PaddingLayout":{"Layout":["1"],"Layout.T":"1"},"RawBytesLayout":{"Layout":["List<int>"],"Layout.T":"List<int>"},"StructLayout":{"Layout":["Map<String,@>"],"Layout.T":"Map<String,@>"},"LayoutException":{"BlockchainUtilsException":[],"Exception":[]},"Web3SecretStorageDefinationV3Exception":{"BlockchainUtilsException":[],"Exception":[]},"KDF2":{"KDFParam":[]},"KDFScrypt":{"KDFParam":[]},"ServiceSuccessRespose":{"BaseServiceResponse":["1"]},"ServiceErrorResponse":{"BaseServiceResponse":["1"]},"SubstrateEcdsaSigner":{"BaseSubstrateSigner":[]},"SubstrateED25519Signer":{"BaseSubstrateSigner":[]},"SubstrateSr25519Signer":{"BaseSubstrateSigner":[]},"CanonicalizedMap":{"Map":["2","3"]},"DartCosmosSdkPluginException":{"BlockchainUtilsException":[],"Exception":[]},"RetryClient":{"Client":[]},"BaseClient":{"Client":[]},"BrowserClient":{"Client":[]},"ByteStream":{"StreamView":["List<int>"],"Stream":["List<int>"],"Stream.T":"List<int>","StreamView.T":"List<int>"},"ClientException":{"Exception":[]},"Request":{"BaseRequest":[]},"Response":{"BaseResponse":[]},"StreamedRequest":{"BaseRequest":[]},"StreamedResponse":{"BaseResponse":[]},"StreamedResponseV2":{"StreamedResponse":[],"BaseResponse":[]},"CaseInsensitiveMap":{"CanonicalizedMap":["String","String","1"],"Map":["String","1"],"CanonicalizedMap.V":"1","CanonicalizedMap.K":"String","CanonicalizedMap.C":"String"},"MoneroIntegratedAddress":{"MoneroAddress":[]},"MoneroAccountAddress":{"MoneroAddress":[]},"MoneroCryptoException":{"BlockchainUtilsException":[],"Exception":[]},"DartMoneroPluginException":{"BlockchainUtilsException":[],"Exception":[]},"MoneroLockedOutput":{"MoneroOutput":[]},"MoneroUnlockedOutput":{"MoneroOutput":[]},"MoneroUnlockedMultisigOutput":{"MoneroUnlockedOutput":[],"MoneroOutput":[]},"MoneroLockedPayment":{"MoneroPayment":["MoneroLockedOutput"],"MoneroPayment.T":"MoneroLockedOutput"},"MoneroUnLockedPayment":{"MoneroPayment":["1"],"MoneroPayment.T":"1"},"MoneroUnlockedMultisigPayment":{"MoneroUnLockedPayment":["MoneroUnlockedMultisigOutput"],"MoneroPayment":["MoneroUnlockedMultisigOutput"],"MoneroPayment.T":"MoneroUnlockedMultisigOutput"},"RctSigPrunableBulletproofPlus":{"RctSigPrunable":[]},"BulletproofPrunable":{"RctSigPrunable":[]},"RctSigPrunableRangeSigs":{"RctSigPrunable":[]},"ClsagPrunable":{"RctSigPrunable":[]},"MgSigPrunable":{"RctSigPrunable":[]},"RctSigPrunableCLSAG":{"BulletproofPrunable":[],"RctSigPrunable":[]},"RctSigPrunableBulletproof2":{"BulletproofPrunable":[],"RctSigPrunable":[]},"RctSigPrunableBulletproof":{"BulletproofPrunable":[],"RctSigPrunable":[]},"RCTSignature":{"MoneroTxSignatures":[]},"MoneroV1Signature":{"MoneroTxSignatures":[]},"EcdhInfoV2":{"EcdhInfo":[]},"EcdhInfoV1":{"EcdhInfo":[]},"RCTNull":{"RCTSignatureBase":[]},"RCTCLSAG":{"RCTSignatureBase":[]},"RCTSimple":{"RCTSignatureBase":[]},"RCTBulletproof2":{"RCTSignatureBase":[]},"RCTBulletproofPlus":{"RCTSignatureBase":[]},"RCTFull":{"RCTSignatureBase":[]},"RCTBulletproof":{"RCTSignatureBase":[]},"TxExtraPublicKey":{"TxExtra":[]},"TxExtraAdditionalPubKeys":{"TxExtra":[]},"TxExtraNonce":{"TxExtra":[]},"TxinToKey":{"MoneroTxin":[]},"TxinToScriptHash":{"MoneroTxin":[]},"TxinToScript":{"MoneroTxin":[]},"TxinGen":{"MoneroTxin":[]},"TxoutToKey":{"TxoutTarget":[]},"TxoutToTaggedKey":{"TxoutTarget":[]},"TxoutToScript":{"TxoutTarget":[]},"TxoutToScriptHash":{"TxoutTarget":[]},"MoneroRequestDetails":{"BaseServiceRequestParams":[]},"MoneroDaemonRequestParam":{"BaseServiceRequest":["1","2","MoneroRequestDetails"]},"DaemonRequestGetBlocksBin":{"BaseServiceRequest":["DaemonGetBlockBinResponse","Map<String,@>","MoneroRequestDetails"],"BaseServiceRequest.0":"DaemonGetBlockBinResponse","BaseServiceRequest.1":"Map<String,@>"},"DaemonRequestGetTransactions":{"BaseServiceRequest":["List<TxResponse>","Map<String,@>","MoneroRequestDetails"],"BaseServiceRequest.0":"List<TxResponse>","BaseServiceRequest.1":"Map<String,@>"},"DaemonRequestOnGetBlockHash":{"BaseServiceRequest":["String","String","MoneroRequestDetails"],"BaseServiceRequest.0":"String","BaseServiceRequest.1":"String"},"MoneroSerializationException":{"BlockchainUtilsException":[],"Exception":[]},"MoneroBigIntVarInt":{"Layout":["BigInt"],"Layout.T":"BigInt"},"MoneroIntVarInt":{"Layout":["int"],"Layout.T":"int"},"VariantOffsetLayout":{"ExternalLayout":[],"Layout":["int"],"Layout.T":"int"},"MoneroStorageEntryNull":{"MoneroStorageEntry":["Null"],"MoneroStorageEntry.T":"Null"},"MoneroStorageEntryPromitive":{"MoneroStorageEntry":["1"],"MoneroStorageEntry.T":"1"},"MoneroStorageEntryList":{"MoneroStorageEntry":["List<1>"],"MoneroStorageEntry.T":"List<1>"},"MoneroStorageEntrySection":{"MoneroStorageEntry":["MoneroSection"],"MoneroStorageEntry.T":"MoneroSection"},"MoneroRctTxBuilder":{"MoneroTxBuilder":["SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>"],"MoneroTxBuilder.T":"SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>"},"ApiProviderException":{"Exception":[]},"WalletException":{"Exception":[]},"HTTPWorkerResponseSuccess":{"HTTPWorkerResponse":[]},"HTTPWorkerResponseError":{"HTTPWorkerResponse":[]},"ProviderAuthenticated":{"Equatable":[]},"DigestProviderAuthenticated":{"ProviderAuthenticated":[],"Equatable":[]},"BasicProviderAuthenticated":{"ProviderAuthenticated":[],"Equatable":[]},"_CachedClientImpl":{"_Client":["1"]},"_Client":{"_Client.T":"1"},"_CachedClient":{"_CachedClientImpl":["ProviderAuthenticated?"],"_Client":["ProviderAuthenticated?"],"_Client.T":"ProviderAuthenticated?"},"_DigestAuthClient":{"_Client":["DigestProviderAuthenticated"],"_Client.T":"DigestProviderAuthenticated"},"_DigestAuthCachedClient":{"_CachedClientImpl":["DigestProviderAuthenticated"],"_Client":["DigestProviderAuthenticated"],"_Client.T":"DigestProviderAuthenticated"},"_Live":{"LiveListenable":["1"]},"Live":{"_Live":["1"],"LiveListenable":["1"]},"CustomCoins":{"CryptoCoins":["BipCoinConfig"]},"CustomProposal":{"BipProposal":[]},"AddressDerivationIndex":{"Equatable":[]},"Bip32AddressIndex":{"AddressDerivationIndex":[],"Equatable":[]},"MultiSigAddressIndex":{"AddressDerivationIndex":[],"Equatable":[]},"SubstrateAddressIndex":{"AddressDerivationIndex":[],"Equatable":[]},"BrowserCryptoWorker":{"IsolateCryptoWoker":[]},"AdaLegacyPublicKeyData":{"CryptoPublicKeyData":[]},"MoneroPrivateKeyData":{"CryptoPrivateKeyData":[]},"MoneroPublicKeyData":{"CryptoPublicKeyData":[]},"PrivateKeyData":{"CryptoPrivateKeyData":[]},"PublicKeyData":{"CryptoPublicKeyData":[]},"EncryptedCustomKey":{"Equatable":[]},"ImportedKeyStorage":{"Equatable":[]},"CborMessageArgs":{"IsolateMessageArgs":[]},"MessageArgsTwoBytes":{"CborMessageArgs":[],"IsolateMessageArgs":[]},"MessageArgsOneBytes":{"CborMessageArgs":[],"IsolateMessageArgs":[]},"MessageArgsThreeBytes":{"CborMessageArgs":[],"IsolateMessageArgs":[]},"MessageArgsStream":{"CborMessageArgs":[],"IsolateMessageArgs":[]},"WalletArgs":{"CborMessageArgs":[],"IsolateMessageArgs":[]},"MessageArgsRequestable":{"CborMessageArgs":[],"IsolateMessageArgs":[]},"WalletArgsRequestable":{"CborMessageArgs":[],"IsolateMessageArgs":[]},"MessageArgsStreamId":{"CborMessageArgs":[],"IsolateMessageArgs":[]},"MessageArgsException":{"CborMessageArgs":[],"IsolateMessageArgs":[]},"MessageArgsMessage":{"CborMessageArgs":[],"IsolateMessageArgs":[]},"StreamArgsCompleter":{"CborMessageArgs":[],"IsolateMessageArgs":[]},"CryptoArgsCompleter":{"CborMessageArgs":[],"IsolateMessageArgs":[]},"NoneEncryptedArgsCompleter":{"CborMessageArgs":[],"IsolateMessageArgs":[]},"CryptoRequest":{"CryptoArgsCompleter":["1","2"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"NoneEncryptedCryptoRequest":{"NoneEncryptedArgsCompleter":["1","2"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"IsolateStreamRequest":{"StreamArgsCompleter":["1","MessageArgsStream","2"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"WalletRequest":{"WalletArgsCompleter":["1","2"]},"CryptoRequestEncryptChacha":{"CryptoRequest":["CryptoEncryptChachaResponse","MessageArgsTwoBytes"],"CryptoArgsCompleter":["CryptoEncryptChachaResponse","MessageArgsTwoBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"CryptoRequestDecryptChacha":{"CryptoRequest":["CryptoDecryptChachaResponse","MessageArgsOneBytes"],"CryptoArgsCompleter":["CryptoDecryptChachaResponse","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"CryptoRequestCreateMasterKey":{"CryptoRequest":["WalletMasterKeys","MessageArgsOneBytes"],"CryptoArgsCompleter":["WalletMasterKeys","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"CryptoRequestCreateHDWallet":{"CryptoRequest":["CryptoCreateWalletResponse","MessageArgsThreeBytes"],"CryptoArgsCompleter":["CryptoCreateWalletResponse","MessageArgsThreeBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"CryptoRequestDecodeBackup":{"CryptoRequest":["List<int>","MessageArgsOneBytes"],"CryptoArgsCompleter":["List<int>","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"CryptoRequestEncodeBackup":{"CryptoRequest":["String","MessageArgsOneBytes"],"CryptoArgsCompleter":["String","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"CryptoRequestGenerateMasterKey":{"CryptoRequest":["CryptoGenerateMasterKeyResponse","MessageArgsThreeBytes"],"CryptoArgsCompleter":["CryptoGenerateMasterKeyResponse","MessageArgsThreeBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"CryptoRequestGenerateBip39Mnemonic":{"CryptoRequest":["Mnemonic","MessageArgsOneBytes"],"CryptoArgsCompleter":["Mnemonic","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"MoneroMnemonicToPrivateKeyMessage":{"CryptoRequest":["ImportCustomKeys","MessageArgsOneBytes"],"CryptoArgsCompleter":["ImportCustomKeys","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"MoneroMenmonicGenerateMessage":{"CryptoRequest":["String","MessageArgsOneBytes"],"CryptoArgsCompleter":["String","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"CryptoRequestHashing":{"CryptoRequest":["List<int>","MessageArgsOneBytes"],"CryptoArgsCompleter":["List<int>","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"CryptoRequestRandomGenerator":{"CryptoRequest":["List<int>","MessageArgsOneBytes"],"CryptoArgsCompleter":["List<int>","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"CryptoRequestReadMasterKey":{"CryptoRequest":["WalletMasterKeys","MessageArgsOneBytes"],"CryptoArgsCompleter":["WalletMasterKeys","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"CryptoRequestSetupMasterKey":{"CryptoRequest":["CryptoGenerateMasterKeyResponse","MessageArgsThreeBytes"],"CryptoArgsCompleter":["CryptoGenerateMasterKeyResponse","MessageArgsThreeBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"TonMnemonicToPrivateKeyMessage":{"CryptoRequest":["ImportCustomKeys","MessageArgsOneBytes"],"CryptoArgsCompleter":["ImportCustomKeys","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"TonMenmonicGenerateMessage":{"CryptoRequest":["String","MessageArgsOneBytes"],"CryptoArgsCompleter":["String","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"CryptoRequestWalletKey":{"CryptoRequest":["List<int>","MessageArgsOneBytes"],"CryptoArgsCompleter":["List<int>","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"WorkerEncryptedMessage":{"WorkerMessage":["List<int>","List<int>"]},"WorkerNoneEncryptedMessage":{"WorkerMessage":["List<int>","List<int>"]},"WorkerCborRequestMessage":{"WorkeBaserRequestMessage":["CborMessageArgs"],"WorkeBaserRequestMessage.T":"CborMessageArgs"},"IsolateCborResponseMessage":{"IsolateResponseMessage":["List<int>","CborMessageArgs"]},"BitcoinSigning":{"GlobalSignRequest":[],"SignRequest":[]},"GlobalSignRequest":{"SignRequest":[]},"CosmosSigningRequest":{"SignRequest":[]},"MoneroSigningRequest":{"SignRequest":[]},"NoneEncryptedRequestHashing":{"NoneEncryptedCryptoRequest":["List<int>","MessageArgsOneBytes"],"NoneEncryptedArgsCompleter":["List<int>","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"NoneEncryptedRequestHexToBytes":{"NoneEncryptedCryptoRequest":["List<int>","MessageArgsOneBytes"],"NoneEncryptedArgsCompleter":["List<int>","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"NoneEncryptedRequestFakeMoneroTx":{"NoneEncryptedCryptoRequest":["BigInt","MessageArgsOneBytes"],"NoneEncryptedArgsCompleter":["BigInt","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"NoneEncryptedRequestGenerateRingOutput":{"NoneEncryptedCryptoRequest":["MoneroRignOutput","MessageArgsOneBytes"],"NoneEncryptedArgsCompleter":["MoneroRignOutput","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"NoneEncryptedRequestMoneroGenerateTxProof":{"NoneEncryptedCryptoRequest":["String","MessageArgsOneBytes"],"NoneEncryptedArgsCompleter":["String","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"NoneEncryptedRequestMoneroVerifyTxProof":{"NoneEncryptedCryptoRequest":["BigInt?","MessageArgsOneBytes"],"NoneEncryptedArgsCompleter":["BigInt?","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"CryptoRequestTestLarge":{"NoneEncryptedCryptoRequest":["MoneroChainTrackerResponse","MessageArgsOneBytes"],"NoneEncryptedArgsCompleter":["MoneroChainTrackerResponse","MessageArgsOneBytes"],"CborMessageArgs":[],"IsolateMessageArgs":[]},"StreamRequestMoneroBlockTracking":{"IsolateStreamRequest":["MoneroSyncBlocksResponse","MoneroSyncBlocksRequest"],"StreamArgsCompleter":["MoneroSyncBlocksResponse","MessageArgsStream","MoneroSyncBlocksRequest"],"CborMessageArgs":[],"IsolateMessageArgs":[],"IsolateStreamRequest.S":"MoneroSyncBlocksRequest"},"StreamRequestHexToBytes":{"IsolateStreamRequest":["List<int>","String"],"StreamArgsCompleter":["List<int>","MessageArgsStream","String"],"CborMessageArgs":[],"IsolateMessageArgs":[],"IsolateStreamRequest.S":"String"},"WalletRequestDeriveAddress":{"WalletRequest":["CryptoDeriveAddressResponse<1>","MessageArgsTwoBytes"],"WalletArgsCompleter":["CryptoDeriveAddressResponse<1>","MessageArgsTwoBytes"]},"WalletRequestReadImportedKey":{"WalletRequest":["CryptoPrivateKeyData","MessageArgsOneBytes"],"WalletArgsCompleter":["CryptoPrivateKeyData","MessageArgsOneBytes"]},"WalletRequestReadPrivateKeys":{"WalletRequest":["List<CryptoPrivateKeyData>","MessageArgsOneBytes"],"WalletArgsCompleter":["List<CryptoPrivateKeyData>","MessageArgsOneBytes"]},"WalletRequestReadPublicKeys":{"WalletRequest":["List<CryptoPublicKeyData>","MessageArgsOneBytes"],"WalletArgsCompleter":["List<CryptoPublicKeyData>","MessageArgsOneBytes"]},"WalletRequestMoneroOutputUnlocker":{"WalletRequest":["MoneroBatchProcessTxesResponse","MessageArgsOneBytes"],"WalletArgsCompleter":["MoneroBatchProcessTxesResponse","MessageArgsOneBytes"]},"WalletRequestSignMessage":{"WalletRequest":["CryptoPersonalSignResponse","MessageArgsOneBytes"],"WalletArgsCompleter":["CryptoPersonalSignResponse","MessageArgsOneBytes"]},"WalletRequestReadMnemonic":{"WalletRequest":["AccessMnemonicResponse","MessageArgsOneBytes"],"WalletArgsCompleter":["AccessMnemonicResponse","MessageArgsOneBytes"]},"WalletRequestSign":{"WalletRequest":["GlobalSignResponse","MessageArgsOneBytes"],"WalletArgsCompleter":["GlobalSignResponse","MessageArgsOneBytes"]},"WalletRequestEthereumTypedDataSign":{"WalletRequest":["String","MessageArgsOneBytes"],"WalletArgsCompleter":["String","MessageArgsOneBytes"]},"WalletRequestImportNewKey":{"WalletRequest":["CryptoGenerateMasterKeyResponse","MessageArgsThreeBytes"],"WalletArgsCompleter":["CryptoGenerateMasterKeyResponse","MessageArgsThreeBytes"]},"WalletRequestBackupWallet":{"WalletRequest":["String","MessageArgsOneBytes"],"WalletArgsCompleter":["String","MessageArgsOneBytes"]},"WalletRequestRemoveKey":{"WalletRequest":["CryptoGenerateMasterKeyResponse","MessageArgsThreeBytes"],"WalletArgsCompleter":["CryptoGenerateMasterKeyResponse","MessageArgsThreeBytes"]},"APIProvider":{"Equatable":[]},"MoneroAPIProvider":{"Equatable":[]},"MoneroHTTPService":{"MoneroServiceProvider":[]},"BitcoinCashNewAddressParams":{"NewAccountParams":["BitcoinBaseAddress"]},"BitcoinCashMultiSigNewAddressParams":{"NewAccountParams":["BitcoinBaseAddress"]},"BitcoinNewAddressParams":{"NewAccountParams":["BitcoinBaseAddress"]},"BitcoinMultiSigNewAddressParams":{"NewAccountParams":["BitcoinBaseAddress"]},"CardanoNewAddressParams":{"NewAccountParams":["ADAAddress"]},"CosmosNewAddressParams":{"NewAccountParams":["CosmosBaseAddress"]},"EthereumNewAddressParams":{"NewAccountParams":["ETHAddress"]},"MoneroNewAddressParams":{"NewAccountParams":["MoneroAddress"]},"RippleNewAddressParams":{"NewAccountParams":["XRPAddress"]},"RippleMultiSigNewAddressParams":{"NewAccountParams":["XRPAddress"]},"SolanaNewAddressParams":{"NewAccountParams":["SolAddress"]},"StellarNewAddressParams":{"NewAccountParams":["StellarAddress"]},"StellarMultiSigNewAddressParams":{"NewAccountParams":["StellarAddress"]},"SubstrateNewAddressParams":{"NewAccountParams":["SubstrateAddress"]},"TonNewAddressParams":{"NewAccountParams":["TonAddress"]},"TronNewAddressParams":{"NewAccountParams":["TronAddress"]},"TronMultisigNewAddressParams":{"NewAccountParams":["TronAddress"]},"BitcoinMultiSigSignerDetais":{"Equatable":[]},"StellarMultiSigSignerDetails":{"Equatable":[]},"StellarMultiSignatureAddress":{"Equatable":[]},"TronMultiSigSignerDetais":{"Equatable":[]},"TronMultiSignatureAddress":{"Equatable":[]},"RippleMultiSigSignerDetails":{"Equatable":[]},"RippleMultiSignatureAddress":{"Equatable":[]},"CardanoAddrDetails":{"Equatable":[]},"MoneroBlockTrackingPossition":{"Equatable":[]},"MoneroViewAccountDetails":{"Equatable":[]},"MoneroSyncAccountsInfos":{"Equatable":[]},"MoneroSyncAccountIndexInfo":{"Equatable":[]},"MoneroSyncAccountResponse":{"MoneroSyncBlocksResponse":[]},"MoneroSyncTrackBlocksRequest":{"MoneroSyncBlocksRequest":[]},"MoneroSyncBlocksInfoRequest":{"MoneroSyncBlocksRequest":[]},"MoneroViewPrimaryAccountDetails":{"Equatable":[]},"MoneroOutputDetails":{"Equatable":[]},"MoneroBlocksInfoResponse":{"MoneroSyncBlocksResponse":[]},"TonAccountContext":{"Equatable":[]},"TonAccountLegacyContext":{"TonAccountContext":[],"Equatable":[]},"TonAccountSubWalletContext":{"TonAccountContext":[],"Equatable":[]},"TonAccountV5CustomContext":{"TonAccountContext":[],"Equatable":[]},"TonAccountV5SubWalletContext":{"TonAccountContext":[],"Equatable":[]},"Eip712TypedData":{"EIP712Base":[]},"EIP712Legacy":{"EIP712Base":[]},"SolidityAbiException":{"BlockchainUtilsException":[],"Exception":[]},"AddressCoder":{"ABICoder":["SolidityAddress"]},"ArrayCoder":{"ABICoder":["List<@>"]},"BooleanCoder":{"ABICoder":["bool"]},"BytesCoder":{"ABICoder":["List<int>"]},"FunctionCoder":{"ABICoder":["List<int>"]},"NumbersCoder":{"ABICoder":["BigInt"]},"StringCoder":{"ABICoder":["String"]},"TupleCoder":{"ABICoder":["List<@>"]},"TronAddress":{"SolidityAddress":[]},"TronPluginException":{"BlockchainUtilsException":[],"Exception":[]},"PathException":{"Exception":[]},"PosixStyle":{"InternalStyle":[]},"UrlStyle":{"InternalStyle":[]},"WindowsStyle":{"InternalStyle":[]},"FileLocation":{"SourceLocation":[],"Comparable":["SourceLocation"]},"_FileSpan":{"SourceSpanWithContext":[],"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceLocation":{"Comparable":["SourceLocation"]},"SourceLocationMixin":{"SourceLocation":[],"Comparable":["SourceLocation"]},"SourceSpan":{"Comparable":["SourceSpan"]},"SourceSpanBase":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanException":{"Exception":[]},"SourceSpanFormatException":{"FormatException":[],"Exception":[]},"SourceSpanMixin":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanWithContext":{"SourceSpan":[],"Comparable":["SourceSpan"]},"StellarAccountAddress":{"StellarAddress":[]},"StellarAddressException":{"BlockchainUtilsException":[],"Exception":[]},"DartStellarPlugingException":{"BlockchainUtilsException":[],"Exception":[]},"StringScannerException":{"FormatException":[],"Exception":[]},"TonContractException":{"BlockchainUtilsException":[],"Exception":[]},"KeyException":{"BlockchainUtilsException":[],"Exception":[]},"TonDartPluginException":{"BlockchainUtilsException":[],"Exception":[]},"_EventStream":{"Stream":["1"],"Stream.T":"1"},"_EventStreamSubscription":{"StreamSubscription":["1"]},"XRPLAddressCodecException":{"BlockchainUtilsException":[],"Exception":[]},"IMoneroAddress":{"Equatable":[]},"ETHAddress":{"SolidityAddress":[]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"UnmodifiableListBase":1,"__CastListBase__CastIterableBase_ListMixin":2,"NativeTypedArray":1,"StreamTransformerBase":2,"_DelayedEvent":1,"UnmodifiableMapBase":2,"_SetBase":1,"_UnmodifiableSetView_SetBase__UnmodifiableSetMixin":1,"BaseProvider":1,"MoneroDaemonRequestParam":2,"WalletArgsRequestable":1,"WorkerMessage":2,"NetworkClient":2,"HTTPService":1}'));
  var string$ = {
    x20must_: " must not be greater than the number of characters in the file, ",
    x27_has_: "' has been assigned during initialization.",
    x3123456: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
    x3723700: "7237005577332262213973186563042994240857116359379907606001950938285454250989",
    ABCDEF: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    Cannotff: "Cannot extract a file path from a URI with a fragment component",
    Cannotfq: "Cannot extract a file path from a URI with a query component",
    Cannotn: "Cannot extract a non-Windows file path from a file URI with an authority",
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
    Incorr: "Incorrect size of private key, expected: ",
    Negati: "Negative value cannot be encoded with unsigned layout.",
    Public: "Public-only deterministic keys have no private half",
    Value_: "Value exceeds the maximum size for encoding with this layout."
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      $env_1_1_Map_String_dynamic: findType("@<Map<String,@>>"),
      $env_1_1_MoneroStorageTypes: findType("@<MoneroStorageTypes>"),
      $env_1_1_void: findType("@<~>"),
      ADAAddressType: findType("ADAAddressType"),
      AbiParameter: findType("AbiParameter"),
      AccessCryptoPrivateKeyRequest: findType("AccessCryptoPrivateKeyRequest"),
      AdaLegacyPublicKeyData: findType("AdaLegacyPublicKeyData"),
      AddressDerivationIndex: findType("AddressDerivationIndex"),
      AddressDerivationType: findType("AddressDerivationType"),
      ApiRequest: findType("ApiRequest"),
      ArgsType: findType("ArgsType"),
      AsyncError: findType("AsyncError"),
      Base58Alphabets: findType("Base58Alphabets"),
      Base64Codec: findType("Base64Codec"),
      BaseLazyLayout_dynamic: findType("BaseLazyLayout<@>"),
      BaseResponse: findType("BaseResponse"),
      BaseServiceResponse_List_int: findType("BaseServiceResponse<List<int>>"),
      BaseServiceResponse_Map_String_dynamic: findType("BaseServiceResponse<Map<String,@>>"),
      BaseServiceResponse_dynamic: findType("BaseServiceResponse<@>"),
      BigInt: findType("BigInt"),
      Bip32AddressIndex: findType("Bip32AddressIndex"),
      Bip32KeyIndex: findType("Bip32KeyIndex"),
      Bip32KeyIndex_Function_nullable_int: findType("Bip32KeyIndex(int?)"),
      Bip32Slip10Ed25519Blake2b: findType("Bip32Slip10Ed25519Blake2b"),
      Bip39EntropyBitLen: findType("Bip39EntropyBitLen"),
      Bip39Languages: findType("Bip39Languages"),
      Bip39WordsNum: findType("Bip39WordsNum"),
      Bip44Coins: findType("Bip44Coins"),
      Bip44Levels: findType("Bip44Levels"),
      Bip49Coins: findType("Bip49Coins"),
      Bip84Coins: findType("Bip84Coins"),
      Bip86Coins: findType("Bip86Coins"),
      BipCoinConfig: findType("BipCoinConfig"),
      BipProposal: findType("BipProposal"),
      BitcoinAddressType: findType("BitcoinAddressType"),
      BitcoinMultiSigSignerDetais: findType("BitcoinMultiSigSignerDetais"),
      BitcoinSigning: findType("BitcoinSigning"),
      Blake2bState: findType("Blake2bState"),
      BlockchainUtilsException: findType("BlockchainUtilsException"),
      Bulletproof: findType("Bulletproof"),
      BulletproofPlus: findType("BulletproofPlus"),
      BulletproofPrunable: findType("BulletproofPrunable"),
      CardanoNewAddressParams: findType("CardanoNewAddressParams"),
      CborBase64Types: findType("CborBase64Types"),
      CborBigIntValue: findType("CborBigIntValue"),
      CborBytesValue: findType("CborBytesValue"),
      CborListValue_BigInt: findType("CborListValue<BigInt>"),
      CborListValue_CborBigIntValue: findType("CborListValue<CborBigIntValue>"),
      CborListValue_CborBytesValue: findType("CborListValue<CborBytesValue>"),
      CborListValue_CborListValue_CborTagValue_dynamic: findType("CborListValue<CborListValue<CborTagValue<@>>>"),
      CborListValue_CborObject: findType("CborListValue<CborObject>"),
      CborListValue_CborStringValue: findType("CborListValue<CborStringValue>"),
      CborListValue_CborTagValue_dynamic: findType("CborListValue<CborTagValue<@>>"),
      CborListValue_Object: findType("CborListValue<Object>"),
      CborListValue_String: findType("CborListValue<String>"),
      CborListValue_dynamic: findType("CborListValue<@>"),
      CborListValue_int: findType("CborListValue<int>"),
      CborListValue_nullable_Object: findType("CborListValue<Object?>"),
      CborListValue_nullable_String: findType("CborListValue<String?>"),
      CborMapValue_CborObject_CborObject: findType("CborMapValue<CborObject,CborObject>"),
      CborMessageArgs: findType("CborMessageArgs"),
      CborNumeric: findType("CborNumeric"),
      CborObject: findType("CborObject"),
      CborSetValue_CborObject: findType("CborSetValue<CborObject>"),
      CborStringValue: findType("CborStringValue"),
      CborTagValue_CborBigFloatValue: findType("CborTagValue<CborBigFloatValue>"),
      CborTagValue_CborDecimalFracValue: findType("CborTagValue<CborDecimalFracValue>"),
      CborTagValue_CborDynamicBytesValue: findType("CborTagValue<CborDynamicBytesValue>"),
      CborTagValue_CborEpochIntValue: findType("CborTagValue<CborEpochIntValue>"),
      CborTagValue_CborIndefiniteStringValue: findType("CborTagValue<CborIndefiniteStringValue>"),
      CborTagValue_CborListValue_CborObject: findType("CborTagValue<CborListValue<CborObject>>"),
      CborTagValue_CborMapValue_CborObject_CborObject: findType("CborTagValue<CborMapValue<CborObject,CborObject>>"),
      CborTagValue_CborNumeric: findType("CborTagValue<CborNumeric>"),
      CborTagValue_CborObject: findType("CborTagValue<CborObject>"),
      CborTagValue_CborSetValue_CborObject: findType("CborTagValue<CborSetValue<CborObject>>"),
      CborTagValue_dynamic: findType("CborTagValue<@>"),
      Cip1852Coins: findType("Cip1852Coins"),
      Clsag: findType("Clsag"),
      CodeUnits: findType("CodeUnits"),
      Comparable_dynamic: findType("Comparable<@>"),
      ConditionalLazyLayout_Map_String_dynamic: findType("ConditionalLazyLayout<Map<String,@>>"),
      ConditionalLazyLayout_dynamic: findType("ConditionalLazyLayout<@>"),
      ConstantLayout_dynamic: findType("ConstantLayout<@>"),
      ConstantLayout_int: findType("ConstantLayout<int>"),
      CosmosKeysAlgs: findType("CosmosKeysAlgs"),
      CosmosSigningRequest: findType("CosmosSigningRequest"),
      CryptoCoins_CoinConfig: findType("CryptoCoins<CoinConfig>"),
      CryptoPrivateKeyData: findType("CryptoPrivateKeyData"),
      CryptoPublicKeyData: findType("CryptoPublicKeyData"),
      CryptoRequestHashingType: findType("CryptoRequestHashingType"),
      CryptoRequestMethod: findType("CryptoRequestMethod"),
      CryptoRequestTestLarge_dynamic: findType("CryptoRequestTestLarge<@>"),
      CtKey: findType("CtKey"),
      CurveFp: findType("CurveFp"),
      CustomCoins: findType("CustomCoins"),
      CustomKeyType: findType("CustomKeyType"),
      CustomLayout_dynamic_dynamic: findType("CustomLayout<@,@>"),
      CustomLayout_of_List_int_and_String: findType("CustomLayout<List<int>,String>"),
      CustomLayout_of_Map_String_dynamic_and_Map_String_dynamic: findType("CustomLayout<Map<String,@>,Map<String,@>>"),
      CustomLayout_of_Map_String_dynamic_and_Map_dynamic_dynamic: findType("CustomLayout<Map<String,@>,Map<@,@>>"),
      CustomLayout_of_Map_String_dynamic_and_dynamic: findType("CustomLayout<Map<String,@>,@>"),
      DaemonBlockCompleteEntryResponse: findType("DaemonBlockCompleteEntryResponse"),
      DaemonBlockOutputIndicesResponse: findType("DaemonBlockOutputIndicesResponse"),
      DaemonGetBlockBinResponse: findType("DaemonGetBlockBinResponse"),
      DaemonPoolTxInfoResponse: findType("DaemonPoolTxInfoResponse"),
      DaemonTxBlobEntryResponse: findType("DaemonTxBlobEntryResponse"),
      DaemonTxOutputIndicesResponse: findType("DaemonTxOutputIndicesResponse"),
      DateTime: findType("DateTime"),
      DecodeStorageResult_BigInt: findType("DecodeStorageResult<BigInt>"),
      DecodeStorageResult_List_dynamic: findType("DecodeStorageResult<List<@>>"),
      DecodeStorageResult_Map_String_dynamic: findType("DecodeStorageResult<Map<String,@>>"),
      DecodeStorageResult_String: findType("DecodeStorageResult<String>"),
      DecodeStorageResult_bool: findType("DecodeStorageResult<bool>"),
      DecodeStorageResult_double: findType("DecodeStorageResult<double>"),
      DecodeStorageResult_int: findType("DecodeStorageResult<int>"),
      DigestAuthHeadersAlg: findType("DigestAuthHeadersAlg"),
      DigestAuthQop: findType("DigestAuthQop"),
      DigestProviderAuthenticated: findType("DigestProviderAuthenticated"),
      DistributionResponse: findType("DistributionResponse"),
      Duration: findType("Duration"),
      EDPoint: findType("EDPoint"),
      EIP712Version: findType("EIP712Version"),
      EcdhInfo: findType("EcdhInfo"),
      EcdhInfoV1: findType("EcdhInfoV1"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Eip712TypeDetails: findType("Eip712TypeDetails"),
      Eip712TypedDataV1: findType("Eip712TypedDataV1"),
      EncoderResult: findType("EncoderResult"),
      EncryptedCustomKey: findType("EncryptedCustomKey"),
      Equatable: findType("Equatable"),
      Error: findType("Error"),
      EventSink_MessageArgsStream: findType("EventSink<MessageArgsStream>"),
      Exception: findType("Exception"),
      ExpandIterable_of_List_int_and_int: findType("ExpandIterable<List<int>,int>"),
      ExternalLayout: findType("ExternalLayout"),
      FormatException: findType("FormatException"),
      Function: findType("Function"),
      FutureGroup_dynamic: findType("FutureGroup<@>"),
      Future_HTTPCallerResponse_Function: findType("Future<HTTPCallerResponse>()"),
      Future_Response_Function_$named_$req_client_RetryClient_and_$req_headers_nullable_Map_String_String_and_$req_uri_Uri: findType("Future<Response>({client!RetryClient,headers!Map<String,String>?,uri!Uri})"),
      Future_bool: findType("Future<bool>"),
      Future_dynamic: findType("Future<@>"),
      GlobalSignRequest: findType("GlobalSignRequest"),
      GroupElementCached: findType("GroupElementCached"),
      GroupElementP3: findType("GroupElementP3"),
      HTTPCallerResponse: findType("HTTPCallerResponse"),
      HTTPClientType: findType("HTTPClientType"),
      HTTPRequestType: findType("HTTPRequestType"),
      HTTPResponseType: findType("HTTPResponseType"),
      HTTPWorkerResponse: findType("HTTPWorkerResponse"),
      HTTPWorkerResponseError_dynamic: findType("HTTPWorkerResponseError<@>"),
      HTTPWorkerResponseSuccess_dynamic: findType("HTTPWorkerResponseSuccess<@>"),
      HashBytesState: findType("HashBytesState"),
      HashState: findType("HashState"),
      ImportedKeyStorage: findType("ImportedKeyStorage"),
      IsolateCborResponseMessage: findType("IsolateCborResponseMessage"),
      IsolateResponseMessage_dynamic_IsolateMessageArgs: findType("IsolateResponseMessage<@,IsolateMessageArgs>"),
      IsolateStreamRequest_dynamic_dynamic: findType("IsolateStreamRequest<@,@>"),
      Iterable_String: findType("Iterable<String>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      Iterable_int_Function_List_int: findType("Iterable<int>(List<int>)"),
      JSArray_AccessCryptoPrivateKeyRequest: findType("JSArray<AccessCryptoPrivateKeyRequest>"),
      JSArray_ApiRequest: findType("JSArray<ApiRequest>"),
      JSArray_BaseLazyLayout_dynamic: findType("JSArray<BaseLazyLayout<@>>"),
      JSArray_BigInt: findType("JSArray<BigInt>"),
      JSArray_Bip39WordsNum: findType("JSArray<Bip39WordsNum>"),
      JSArray_Bip44Coins: findType("JSArray<Bip44Coins>"),
      JSArray_Bulletproof: findType("JSArray<Bulletproof>"),
      JSArray_BulletproofPlus: findType("JSArray<BulletproofPlus>"),
      JSArray_CborBytesValue: findType("JSArray<CborBytesValue>"),
      JSArray_CborListValue_CborBigIntValue: findType("JSArray<CborListValue<CborBigIntValue>>"),
      JSArray_CborListValue_CborTagValue_dynamic: findType("JSArray<CborListValue<CborTagValue<@>>>"),
      JSArray_CborNullValue: findType("JSArray<CborNullValue>"),
      JSArray_CborObject: findType("JSArray<CborObject>"),
      JSArray_CborTagValue_dynamic: findType("JSArray<CborTagValue<@>>"),
      JSArray_Clsag: findType("JSArray<Clsag>"),
      JSArray_CosmosKeysAlgs: findType("JSArray<CosmosKeysAlgs>"),
      JSArray_CryptoPrivateKeyData: findType("JSArray<CryptoPrivateKeyData>"),
      JSArray_CryptoPublicKeyData: findType("JSArray<CryptoPublicKeyData>"),
      JSArray_CtKey: findType("JSArray<CtKey>"),
      JSArray_DaemonBlockCompleteEntryResponse: findType("JSArray<DaemonBlockCompleteEntryResponse>"),
      JSArray_DaemonTxBlobEntryResponse: findType("JSArray<DaemonTxBlobEntryResponse>"),
      JSArray_DigestAuthHeaders: findType("JSArray<DigestAuthHeaders>"),
      JSArray_ECDSAPublicKey: findType("JSArray<ECDSAPublicKey>"),
      JSArray_EcdhInfo: findType("JSArray<EcdhInfo>"),
      JSArray_EncoderResult: findType("JSArray<EncoderResult>"),
      JSArray_GroupElementCached: findType("JSArray<GroupElementCached>"),
      JSArray_GroupElementPrecomp: findType("JSArray<GroupElementPrecomp>"),
      JSArray_ImportedKeyStorage: findType("JSArray<ImportedKeyStorage>"),
      JSArray_Layout_dynamic: findType("JSArray<Layout<@>>"),
      JSArray_LazyVariantModel_dynamic: findType("JSArray<LazyVariantModel<@>>"),
      JSArray_List_BigInt: findType("JSArray<List<BigInt>>"),
      JSArray_List_int: findType("JSArray<List<int>>"),
      JSArray_MECSignature: findType("JSArray<MECSignature>"),
      JSArray_MapEntry_String_dynamic: findType("JSArray<MapEntry<String,@>>"),
      JSArray_Map_String_dynamic: findType("JSArray<Map<String,@>>"),
      JSArray_MgSig: findType("JSArray<MgSig>"),
      JSArray_MoneroAddress: findType("JSArray<MoneroAddress>"),
      JSArray_MoneroPrivateKey: findType("JSArray<MoneroPrivateKey>"),
      JSArray_MoneroProcessTxesResponse: findType("JSArray<MoneroProcessTxesResponse>"),
      JSArray_MoneroPublicKey: findType("JSArray<MoneroPublicKey>"),
      JSArray_MoneroTxout: findType("JSArray<MoneroTxout>"),
      JSArray_MoneroUnlockedPaymentRequestDetails: findType("JSArray<MoneroUnlockedPaymentRequestDetails>"),
      JSArray_MoneroWordsNum: findType("JSArray<MoneroWordsNum>"),
      JSArray_MultiexpData: findType("JSArray<MultiexpData>"),
      JSArray_Object: findType("JSArray<Object>"),
      JSArray_RangeSig: findType("JSArray<RangeSig>"),
      JSArray_Result_List_int: findType("JSArray<Result<List<int>>>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_TxExtra: findType("JSArray<TxExtra>"),
      JSArray_TxResponse: findType("JSArray<TxResponse>"),
      JSArray__Highlight: findType("JSArray<_Highlight>"),
      JSArray__Line: findType("JSArray<_Line>"),
      JSArray_double: findType("JSArray<double>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_String: findType("JSArray<String?>"),
      JSArray_nullable_int: findType("JSArray<int?>"),
      JSIndexable_dynamic: findType("JSIndexable<@>"),
      JSNull: findType("JSNull"),
      JSObject: findType("JSObject"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      LayoutDecodeResult_BigInt: findType("LayoutDecodeResult<BigInt>"),
      LayoutDecodeResult_List_int: findType("LayoutDecodeResult<List<int>>"),
      LayoutDecodeResult_MapEntry_dynamic_dynamic: findType("LayoutDecodeResult<MapEntry<@,@>>"),
      LayoutDecodeResult_Map_String_dynamic: findType("LayoutDecodeResult<Map<String,@>>"),
      LayoutDecodeResult_int: findType("LayoutDecodeResult<int>"),
      Layout_dynamic: findType("Layout<@>"),
      LazyLayout_dynamic: findType("LazyLayout<@>"),
      LazyVariantLayout: findType("LazyVariantLayout"),
      LazyVariantModel_dynamic: findType("LazyVariantModel<@>"),
      ListMapView_String: findType("ListMapView<String>"),
      List_AccessCryptoPrivateKeyRequest: findType("List<AccessCryptoPrivateKeyRequest>"),
      List_BigInt: findType("List<BigInt>"),
      List_CtKey: findType("List<CtKey>"),
      List_DaemonBlockCompleteEntryResponse: findType("List<DaemonBlockCompleteEntryResponse>"),
      List_Eip712TypeDetails: findType("List<Eip712TypeDetails>"),
      List_GroupElementCached: findType("List<GroupElementCached>"),
      List_ImportedKeyStorage: findType("List<ImportedKeyStorage>"),
      List_List_BigInt: findType("List<List<BigInt>>"),
      List_List_int: findType("List<List<int>>"),
      List_Map_String_dynamic: findType("List<Map<String,@>>"),
      List_MoneroTxInfo: findType("List<MoneroTxInfo>"),
      List_String: findType("List<String>"),
      List_TxExtra: findType("List<TxExtra>"),
      List_TxResponse: findType("List<TxResponse>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      List_int_Function_EncoderResult: findType("List<int>(EncoderResult)"),
      List_int_Function_List_int: findType("List<int>(List<int>)"),
      List_nullable__Highlight: findType("List<_Highlight?>"),
      Live_APIServiceStatus: findType("Live<APIServiceStatus>"),
      Live_NodeClientStatus: findType("Live<NodeClientStatus>"),
      MECSignature: findType("MECSignature"),
      MapEntry_String_String: findType("MapEntry<String,String>"),
      MapEntry_String_dynamic: findType("MapEntry<String,@>"),
      MapEntry_dynamic_dynamic: findType("MapEntry<@,@>"),
      MapEntry_int_String: findType("MapEntry<int,String>"),
      MapEntry_of_Object_and_List__Highlight: findType("MapEntry<Object,List<_Highlight>>"),
      MapEntry_of_String_and_List_Map_String_dynamic: findType("MapEntry<String,List<Map<String,@>>>"),
      Map_String_String: findType("Map<String,String>"),
      Map_String_dynamic: findType("Map<String,@>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      MappedIterable_of_nullable_int_and_Bip32KeyIndex: findType("MappedIterable<int?,Bip32KeyIndex>"),
      MappedListIterable_String_String: findType("MappedListIterable<String,String>"),
      MappedListIterable_String_dynamic: findType("MappedListIterable<String,@>"),
      MappedListIterable_of_EncoderResult_and_List_int: findType("MappedListIterable<EncoderResult,List<int>>"),
      MappedListIterable_of_List_int_and_List_int: findType("MappedListIterable<List<int>,List<int>>"),
      MappedListIterable_of_List_int_and_MoneroPublicKey: findType("MappedListIterable<List<int>,MoneroPublicKey>"),
      MediaType: findType("MediaType"),
      MessageArgsOneBytes: findType("MessageArgsOneBytes"),
      MessageArgsStream: findType("MessageArgsStream"),
      MessageArgsStreamMethod: findType("MessageArgsStreamMethod"),
      MgSig: findType("MgSig"),
      MoneroAccountBlocksTrackerStatus: findType("MoneroAccountBlocksTrackerStatus"),
      MoneroAccountIndex: findType("MoneroAccountIndex"),
      MoneroAccountKeys: findType("MoneroAccountKeys"),
      MoneroAddress: findType("MoneroAddress"),
      MoneroBlockTrackingPossition: findType("MoneroBlockTrackingPossition"),
      MoneroBlockTrackingStatus: findType("MoneroBlockTrackingStatus"),
      MoneroCoins: findType("MoneroCoins"),
      MoneroIntegratedAddress: findType("MoneroIntegratedAddress"),
      MoneroLanguages: findType("MoneroLanguages"),
      MoneroLockedPayment: findType("MoneroLockedPayment"),
      MoneroMultisigOutputInfo: findType("MoneroMultisigOutputInfo"),
      MoneroNetwork: findType("MoneroNetwork"),
      MoneroNewAddressParams: findType("MoneroNewAddressParams"),
      MoneroOutput: findType("MoneroOutput"),
      MoneroPaymentType: findType("MoneroPaymentType"),
      MoneroPayment_MoneroOutput: findType("MoneroPayment<MoneroOutput>"),
      MoneroPrivateKey: findType("MoneroPrivateKey"),
      MoneroPrivateKeyData: findType("MoneroPrivateKeyData"),
      MoneroProcessTxIdsRequest: findType("MoneroProcessTxIdsRequest"),
      MoneroProcessTxesResponse: findType("MoneroProcessTxesResponse"),
      MoneroPublicKey: findType("MoneroPublicKey"),
      MoneroPublicKeyData: findType("MoneroPublicKeyData"),
      MoneroPublicKey_Function_List_int: findType("MoneroPublicKey(List<int>)"),
      MoneroRignOutput: findType("MoneroRignOutput"),
      MoneroSection: findType("MoneroSection"),
      MoneroSigningRequest: findType("MoneroSigningRequest"),
      MoneroStorageEntryList_Object: findType("MoneroStorageEntryList<Object>"),
      MoneroStorageEntryPromitive_dynamic: findType("MoneroStorageEntryPromitive<@>"),
      MoneroStorageEntry_dynamic: findType("MoneroStorageEntry<@>"),
      MoneroStorageTypes: findType("MoneroStorageTypes"),
      MoneroSyncAccountIndexInfo: findType("MoneroSyncAccountIndexInfo"),
      MoneroSyncAccountsInfos: findType("MoneroSyncAccountsInfos"),
      MoneroSyncBlockRequestType: findType("MoneroSyncBlockRequestType"),
      MoneroSyncBlocksInfoRequest: findType("MoneroSyncBlocksInfoRequest"),
      MoneroSyncBlocksRequest: findType("MoneroSyncBlocksRequest"),
      MoneroSyncTrackBlocksRequest: findType("MoneroSyncTrackBlocksRequest"),
      MoneroTransaction: findType("MoneroTransaction"),
      MoneroTxDestination: findType("MoneroTxDestination"),
      MoneroTxDestinationWithProof: findType("MoneroTxDestinationWithProof"),
      MoneroTxInfo: findType("MoneroTxInfo"),
      MoneroTxSignatures: findType("MoneroTxSignatures"),
      MoneroTxVersion: findType("MoneroTxVersion"),
      MoneroTxin: findType("MoneroTxin"),
      MoneroTxinType: findType("MoneroTxinType"),
      MoneroTxout: findType("MoneroTxout"),
      MoneroUnLockedPayment_MoneroUnlockedOutput: findType("MoneroUnLockedPayment<MoneroUnlockedOutput>"),
      MoneroUnlockedOutput: findType("MoneroUnlockedOutput"),
      MoneroUnlockedPaymentRequestDetails: findType("MoneroUnlockedPaymentRequestDetails"),
      MoneroV1Signature: findType("MoneroV1Signature"),
      MoneroWordsNum: findType("MoneroWordsNum"),
      MultisigLR: findType("MultisigLR"),
      NativeByteBuffer: findType("NativeByteBuffer"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeUint8List: findType("NativeUint8List"),
      NetworkType: findType("NetworkType"),
      NewAccountParamsType: findType("NewAccountParamsType"),
      NoneEncryptedCryptoRequestMethod: findType("NoneEncryptedCryptoRequestMethod"),
      NoneEncryptedRequestHexToBytes_dynamic: findType("NoneEncryptedRequestHexToBytes<@>"),
      Null: findType("Null"),
      Object: findType("Object"),
      OutsEntery: findType("OutsEntery"),
      PaddingLayout_int: findType("PaddingLayout<int>"),
      ProjectiveECCPoint: findType("ProjectiveECCPoint"),
      ProviderAuthType: findType("ProviderAuthType"),
      ProviderAuthenticated: findType("ProviderAuthenticated"),
      PubKeyModes: findType("PubKeyModes"),
      RCTSignatureBase: findType("RCTSignatureBase"),
      RCTSignature_RCTSignatureBase_RctSigPrunable: findType("RCTSignature<RCTSignatureBase,RctSigPrunable>"),
      RCTType: findType("RCTType"),
      RangeSig: findType("RangeSig"),
      RctSigPrunable: findType("RctSigPrunable"),
      RctSigPrunableBulletproofPlus: findType("RctSigPrunableBulletproofPlus"),
      RctSigPrunableRangeSigs: findType("RctSigPrunableRangeSigs"),
      Record: findType("Record"),
      Record_0: findType("+()"),
      Record_2_IsolateResponseMessage_dynamic_IsolateMessageArgs_and_bool: findType("+(IsolateResponseMessage<@,IsolateMessageArgs>,bool)"),
      RegExpMatch: findType("RegExpMatch"),
      Response: findType("Response"),
      RetryClient: findType("RetryClient"),
      ReversedListIterable_String: findType("ReversedListIterable<String>"),
      ReversedListIterable_int: findType("ReversedListIterable<int>"),
      RippleMultiSigSignerDetails: findType("RippleMultiSigSignerDetails"),
      SH1State: findType("SH1State"),
      SHA256State: findType("SHA256State"),
      SHA512State: findType("SHA512State"),
      SecretWalletEncoding: findType("SecretWalletEncoding"),
      SeedTypes: findType("SeedTypes"),
      SerializableHash_HashState: findType("SerializableHash<HashState>"),
      SerializableHash_HashState_Function: findType("SerializableHash<HashState>()"),
      ServiceErrorResponse_dynamic: findType("ServiceErrorResponse<@>"),
      Set_String: findType("Set<String>"),
      SignRequest: findType("SignRequest"),
      SigningRequestNetwork: findType("SigningRequestNetwork"),
      SolidityAddress: findType("SolidityAddress"),
      SourceLocation: findType("SourceLocation"),
      SourceSpan: findType("SourceSpan"),
      SourceSpanWithContext: findType("SourceSpanWithContext"),
      SpendablePayment_MoneroLockedPayment: findType("SpendablePayment<MoneroLockedPayment>"),
      SpendablePayment_MoneroUnLockedPayment_MoneroUnlockedOutput: findType("SpendablePayment<MoneroUnLockedPayment<MoneroUnlockedOutput>>"),
      Sr25519PrivateKey: findType("Sr25519PrivateKey"),
      Sr25519PublicKey: findType("Sr25519PublicKey"),
      StackTrace: findType("StackTrace"),
      StellarMultiSigSignerDetails: findType("StellarMultiSigSignerDetails"),
      StreamController_List_int: findType("StreamController<List<int>>"),
      StreamIsolateMethod: findType("StreamIsolateMethod"),
      StreamSplitter_List_int: findType("StreamSplitter<List<int>>"),
      Stream_List_int: findType("Stream<List<int>>"),
      StreamedResponse: findType("StreamedResponse"),
      String: findType("String"),
      String_Function_Match: findType("String(Match)"),
      String_Function_String: findType("String(String)"),
      SubstrateCoins: findType("SubstrateCoins"),
      SubstratePathElem: findType("SubstratePathElem"),
      TonAccountContextType: findType("TonAccountContextType"),
      TronMultiSigSignerDetais: findType("TronMultiSigSignerDetais"),
      TronMultiSignatureAddress: findType("TronMultiSignatureAddress"),
      TrustedGetRuntimeType: findType("TrustedGetRuntimeType"),
      Tuple_AbiParameter_int: findType("Tuple<AbiParameter,int>"),
      Tuple_BigInt_BigInt: findType("Tuple<BigInt,BigInt>"),
      Tuple_MnemonicWordsList_MnemonicLanguages: findType("Tuple<MnemonicWordsList,MnemonicLanguages>"),
      Tuple_Object_MoneroStorageTypes: findType("Tuple<Object,MoneroStorageTypes>"),
      Tuple_String_dynamic: findType("Tuple<String,@>"),
      Tuple_String_int: findType("Tuple<String,int>"),
      Tuple_bool_BigInt: findType("Tuple<bool,BigInt>"),
      Tuple_bool_bool: findType("Tuple<bool,bool>"),
      Tuple_int_bool: findType("Tuple<int,bool>"),
      Tuple_int_int: findType("Tuple<int,int>"),
      Tuple_of_List_int_and_FloatLength: findType("Tuple<List<int>,FloatLength>"),
      Tuple_of_List_int_and_List_int: findType("Tuple<List<int>,List<int>>"),
      TxExtra: findType("TxExtra"),
      TxExtraAdditionalPubKeys: findType("TxExtraAdditionalPubKeys"),
      TxExtraPublicKey: findType("TxExtraPublicKey"),
      TxExtraTypes: findType("TxExtraTypes"),
      TxOutTargetType: findType("TxOutTargetType"),
      TxResponse: findType("TxResponse"),
      TxinToKey: findType("TxinToKey"),
      TxoutTarget: findType("TxoutTarget"),
      TxoutToKey: findType("TxoutToKey"),
      TxoutToTaggedKey: findType("TxoutToTaggedKey"),
      TypeError: findType("TypeError"),
      TypedData: findType("TypedData"),
      Uint8List: findType("Uint8List"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      UnmodifiableMapView_String_String: findType("UnmodifiableMapView<String,String>"),
      UnmodifiableSetView_String: findType("UnmodifiableSetView<String>"),
      Uri: findType("Uri"),
      WalletArgsCompleter_of_nullable_Object_and_CborMessageArgs: findType("WalletArgsCompleter<Object?,CborMessageArgs>"),
      WalletArgs_of_dynamic_and_CborMessageArgs_and_WalletArgsCompleter_of_nullable_Object_and_CborMessageArgs: findType("WalletArgs<@,CborMessageArgs,WalletArgsCompleter<Object?,CborMessageArgs>>"),
      WalletRequestDeriveAddress_dynamic: findType("WalletRequestDeriveAddress<@>"),
      WalletRequestMethod: findType("WalletRequestMethod"),
      WalletVersion: findType("WalletVersion"),
      WhereIterable_String: findType("WhereIterable<String>"),
      WhereIterable_nullable_int: findType("WhereIterable<int?>"),
      WhereTypeIterable_CborNumeric: findType("WhereTypeIterable<CborNumeric>"),
      WhereTypeIterable_String: findType("WhereTypeIterable<String>"),
      WorkerEncryptedMessage: findType("WorkerEncryptedMessage"),
      WorkerMessageType: findType("WorkerMessageType"),
      WorkerMessage_dynamic_dynamic: findType("WorkerMessage<@,@>"),
      XlmAddrTypes: findType("XlmAddrTypes"),
      XmrAddressType: findType("XmrAddressType"),
      _AsyncCompleter_List_dynamic: findType("_AsyncCompleter<List<@>>"),
      _AsyncCompleter_StreamedResponse: findType("_AsyncCompleter<StreamedResponse>"),
      _AsyncCompleter_Uint8List: findType("_AsyncCompleter<Uint8List>"),
      _BigIntImpl: findType("_BigIntImpl"),
      _Client_nullable_ProviderAuthenticated: findType("_Client<ProviderAuthenticated?>"),
      _DecodeCborResult_CborObject: findType("_DecodeCborResult<CborObject>"),
      _DecodeCborResult_List_int: findType("_DecodeCborResult<List<int>>"),
      _EventStream_JSObject: findType("_EventStream<JSObject>"),
      _Future_List_dynamic: findType("_Future<List<@>>"),
      _Future_StreamedResponse: findType("_Future<StreamedResponse>"),
      _Future_Uint8List: findType("_Future<Uint8List>"),
      _Future_bool: findType("_Future<bool>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      _Future_void: findType("_Future<~>"),
      _Highlight: findType("_Highlight"),
      _Line: findType("_Line"),
      _StreamControllerAddStreamState_nullable_Object: findType("_StreamControllerAddStreamState<Object?>"),
      bool: findType("bool"),
      bool_Function_MoneroWordsNum: findType("bool(MoneroWordsNum)"),
      bool_Function_Object: findType("bool(Object)"),
      bool_Function_String: findType("bool(String)"),
      bool_Function__Highlight: findType("bool(_Highlight)"),
      bool_Function_nullable_int: findType("bool(int?)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      dynamic_Function_String: findType("@(String)"),
      int: findType("int"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      nullable_BigInt: findType("BigInt?"),
      nullable_CardanoAddrDetails: findType("CardanoAddrDetails?"),
      nullable_CborObject: findType("CborObject?"),
      nullable_CborTagValue_dynamic: findType("CborTagValue<@>?"),
      nullable_DateTime: findType("DateTime?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_List_BigInt: findType("List<BigInt>?"),
      nullable_List_List_List_int: findType("List<List<List<int>>>?"),
      nullable_List_List_int: findType("List<List<int>>?"),
      nullable_List_dynamic: findType("List<@>?"),
      nullable_List_int: findType("List<int>?"),
      nullable_MapEntry_dynamic_dynamic: findType("MapEntry<@,@>?"),
      nullable_Map_String_String: findType("Map<String,String>?"),
      nullable_Map_String_dynamic: findType("Map<String,@>?"),
      nullable_Map_dynamic_dynamic: findType("Map<@,@>?"),
      nullable_MoneroSyncAccountResponse: findType("MoneroSyncAccountResponse?"),
      nullable_MoneroViewAccountDetails: findType("MoneroViewAccountDetails?"),
      nullable_MultiexpData: findType("MultiexpData?"),
      nullable_Object: findType("Object?"),
      nullable_ProviderAuthenticated: findType("ProviderAuthenticated?"),
      nullable_RctSigPrunable: findType("RctSigPrunable?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_String: findType("String?"),
      nullable_String_Function_Match: findType("String(Match)?"),
      nullable__DelayedEvent_dynamic: findType("_DelayedEvent<@>?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__Highlight: findType("_Highlight?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      nullable_int: findType("int?"),
      nullable_nullable_Object_Function_dynamic: findType("Object?(@)?"),
      nullable_void_Function: findType("~()?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_List_int: findType("~(List<int>)"),
      void_Function_Object: findType("~(Object)"),
      void_Function_Object_StackTrace: findType("~(Object,StackTrace)"),
      void_Function_String_dynamic: findType("~(String,@)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSBool_methods = J.JSBool.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.NativeByteData_methods = A.NativeByteData.prototype;
    B.NativeUint32List_methods = A.NativeUint32List.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.ADAAddressType_0_Base = new A.ADAAddressType(0, "Base");
    B.ADAAddressType_14_Reward = new A.ADAAddressType(14, "Reward");
    B.ADAAddressType_4_Pointer = new A.ADAAddressType(4, "Pointer");
    B.ADAAddressType_6_Enterprise = new A.ADAAddressType(6, "Enterprise");
    B.ADAAddressType_8_Byron = new A.ADAAddressType(8, "Byron");
    B.ADANetwork_0_testnetPreview = new A.ADANetwork(0, "testnetPreview");
    B.ADANetwork_1_mainnet = new A.ADANetwork(1, "mainnet");
    B.APIServiceStatus_0 = new A.APIServiceStatus(0, "active");
    B.APIServiceStatus_1 = new A.APIServiceStatus(1, "warning");
    B.APIServiceStatus_2 = new A.APIServiceStatus(2, "error");
    B.List_empty6 = A._setArrayType(makeConstList([]), A.findType("JSArray<AbiParameter>"));
    B.AbiParameter_AmO = new A.AbiParameter("", "uint256", B.List_empty6);
    B.AbiParameter_O1c = new A.AbiParameter("", "bytes", B.List_empty6);
    B.AbiParameter_qgB = new A.AbiParameter("", "bytes24", B.List_empty6);
    B.AbiParameter_swd = new A.AbiParameter("", "uint32", B.List_empty6);
    B.AddressConverterException_46y = new A.AddressConverterException("tag bytes must be zero for flag 0", null);
    B.AddressConverterException_4a0 = new A.AddressConverterException("Invalid muxed address account id.", null);
    B.AddressConverterException_Feh = new A.AddressConverterException("Invalid checksum", null);
    B.AddressConverterException_HNd = new A.AddressConverterException("Invalid prefix for mainnet or testnet ripple address", null);
    B.AddressConverterException_MY7 = new A.AddressConverterException("Unable to compute LiftX point", null);
    B.AddressConverterException_Sof = new A.AddressConverterException("A payment ID is required for an integrated address.", null);
    B.AddressConverterException_i3y = new A.AddressConverterException("Invalid header value encountered.", null);
    B.AddressConverterException_mio = new A.AddressConverterException("Invalid checksum encoding", null);
    B.AddressConverterException_wCp = new A.AddressConverterException("Invalid network version prefix.", null);
    B.List_200_81 = A._setArrayType(makeConstList([200, 81]), type$.JSArray_int);
    B.AddressDerivationType_656 = new A.AddressDerivationType(B.List_200_81, 0, "bip32");
    B.List_200_83 = A._setArrayType(makeConstList([200, 83]), type$.JSArray_int);
    B.AddressDerivationType_AW6 = new A.AddressDerivationType(B.List_200_83, 2, "multisig");
    B.List_200_84 = A._setArrayType(makeConstList([200, 84]), type$.JSArray_int);
    B.AddressDerivationType_wEo = new A.AddressDerivationType(B.List_200_84, 1, "substrate");
    B.ApiProviderException_api_http_timeout_error_null_null = new A.ApiProviderException("api_http_timeout_error", null, null);
    B.ApiProviderException_api_unknown_error_null_null = new A.ApiProviderException("api_unknown_error", null, null);
    B.ApiProviderException_invalid_json_response_null_null = new A.ApiProviderException("invalid_json_response", null, null);
    B.ApiProviderException_invalid_request_type_null_null = new A.ApiProviderException("invalid_request_type", null, null);
    B.List_0_0 = A._setArrayType(makeConstList([0, 0]), type$.JSArray_int);
    B.ArgsType_2No = new A.ArgsType(B.List_0_0, 6, "exception");
    B.List_1_4 = A._setArrayType(makeConstList([1, 4]), type$.JSArray_int);
    B.ArgsType_6D4 = new A.ArgsType(B.List_1_4, 0, "streamId");
    B.List_2_0 = A._setArrayType(makeConstList([2, 0]), type$.JSArray_int);
    B.ArgsType_8FR = new A.ArgsType(B.List_2_0, 7, "crypto");
    B.List_2_3 = A._setArrayType(makeConstList([2, 3]), type$.JSArray_int);
    B.ArgsType_AVa = new A.ArgsType(B.List_2_3, 9, "streamRequest");
    B.List_1_1 = A._setArrayType(makeConstList([1, 1]), type$.JSArray_int);
    B.ArgsType_DZ5 = new A.ArgsType(B.List_1_1, 3, "oneArg");
    B.List_1_5 = A._setArrayType(makeConstList([1, 5]), type$.JSArray_int);
    B.ArgsType_Ik7 = new A.ArgsType(B.List_1_5, 2, "streamArgs");
    B.List_1_2 = A._setArrayType(makeConstList([1, 2]), type$.JSArray_int);
    B.ArgsType_JU5 = new A.ArgsType(B.List_1_2, 4, "twoArgs");
    B.List_2_1 = A._setArrayType(makeConstList([2, 1]), type$.JSArray_int);
    B.ArgsType_UFf = new A.ArgsType(B.List_2_1, 8, "nonEncrypted");
    B.List_1_3 = A._setArrayType(makeConstList([1, 3]), type$.JSArray_int);
    B.ArgsType_ouf = new A.ArgsType(B.List_1_3, 5, "threeArgs");
    B.List_3_0 = A._setArrayType(makeConstList([3, 0]), type$.JSArray_int);
    B.ArgsType_pCr = new A.ArgsType(B.List_3_0, 10, "wallet");
    B.List_0_1 = A._setArrayType(makeConstList([0, 1]), type$.JSArray_int);
    B.ArgsType_qUV = new A.ArgsType(B.List_0_1, 1, "message");
    B.ArgumentException_0 = new A.ArgumentException("invalid schnorrkel signature", null);
    B.ArgumentException_06c = new A.ArgumentException("Seed length is too small, it shall be at least 32 bytes", null);
    B.ArgumentException_0Z9 = new A.ArgumentException("ChaCha20Poly1305 needs a 32-byte key", null);
    B.ArgumentException_0vI = new A.ArgumentException("blake2b: wrong digest length", null);
    B.ArgumentException_23h = new A.ArgumentException("Generator point must have order.", null);
    B.ArgumentException_23h0 = new A.ArgumentException("scrypt: incorrect r", null);
    B.ArgumentException_3Jw = new A.ArgumentException("Invalid seed length", null);
    B.ArgumentException_4AN = new A.ArgumentException("invalid private key length", null);
    B.ArgumentException_4i0 = new A.ArgumentException("The secret key must be an integer in the range 1..n-1.", null);
    B.ArgumentException_4mi = new A.ArgumentException("Invalid Base32 string", null);
    B.ArgumentException_4uP = new A.ArgumentException("AES: invalid source block size", null);
    B.ArgumentException_65l = new A.ArgumentException("Language is not an enumerative of MoneroLanguages", null);
    B.ArgumentException_6La = new A.ArgumentException("The signature must be a 64-byte array or 65-bytes with sighash", null);
    B.ArgumentException_86y = new A.ArgumentException("The public point has x or y out of range.", null);
    B.ArgumentException_8gb = new A.ArgumentException("AES: initialized with different key size", null);
    B.ArgumentException_8sg = new A.ArgumentException("The message must be a 32-byte array.", null);
    B.ArgumentException_A4L = new A.ArgumentException("ChaCha nonce must be 8 or 12 bytes", null);
    B.ArgumentException_AHc = new A.ArgumentException("blake2b: can't update because hash was finished.", null);
    B.ArgumentException_AKW = new A.ArgumentException("scrypt: N must be a power of 2", null);
    B.ArgumentException_BjK = new A.ArgumentException("invaid type", null);
    B.ArgumentException_EGl = new A.ArgumentException("Malformed compressed point encoding", null);
    B.ArgumentException_EyN = new A.ArgumentException("invalid key", null);
    B.ArgumentException_IiW = new A.ArgumentException("scrypt: incorrect p", null);
    B.ArgumentException_KhV = new A.ArgumentException("Invalid signature", null);
    B.ArgumentException_Kx9 = new A.ArgumentException("Incorrect characters for hex decoding", null);
    B.ArgumentException_MQy = new A.ArgumentException("AffinePointt does not lay on the curve", null);
    B.ArgumentException_MYu = new A.ArgumentException("Invalid private key. Only cofactor 4 and 8 curves are supported", null);
    B.ArgumentException_MoM = new A.ArgumentException("invalid hex bytes", null);
    B.ArgumentException_Mvk = new A.ArgumentException("Invalid length of private key", null);
    B.ArgumentException_QPy = new A.ArgumentException("Hex input string must be divisible by two", null);
    B.ArgumentException_QTL = new A.ArgumentException("Invalid buffer length. UUIDv4 buffers must be 16 bytes long.", null);
    B.ArgumentException_SN3 = new A.ArgumentException("AES: wrong key size (must be 16, 24, or 32)", null);
    B.ArgumentException_UDs = new A.ArgumentException("invalid random bytes length", null);
    B.ArgumentException_Ufa = new A.ArgumentException("ChaCha20Poly1305: incorrect nonce length", null);
    B.ArgumentException_WNk = new A.ArgumentException("Signature not marked as schnorrkel, maybe try ed25519 instead.", null);
    B.ArgumentException_Y3r = new A.ArgumentException("SHA3: incorrect capacity", null);
    B.ArgumentException_a1W = new A.ArgumentException("Invalid monero private key.", null);
    B.ArgumentException_adc = new A.ArgumentException("AES: invalid destination block size", null);
    B.ArgumentException_cKo = new A.ArgumentException("this curve is too short for digest length", null);
    B.ArgumentException_fVB = new A.ArgumentException("CTR: counter overflow", null);
    B.ArgumentException_gnE = new A.ArgumentException("Invalid key net version length", null);
    B.ArgumentException_i9J = new A.ArgumentException("Inconsistent hybrid point encoding", null);
    B.ArgumentException_iHj = new A.ArgumentException("The other point is on a different curve.", null);
    B.ArgumentException_iqV = new A.ArgumentException("Language is not an enumerative of Bip39Languages", null);
    B.ArgumentException_kyk = new A.ArgumentException("scrypt: parameters are too large", null);
    B.ArgumentException_mKQ = new A.ArgumentException("Generator point order is bad.", null);
    B.ArgumentException_oOD = new A.ArgumentException("invalid input for parse bigint", null);
    B.ArgumentException_oav = new A.ArgumentException("ChaCha: destination is shorter than source", null);
    B.ArgumentException_pgA = new A.ArgumentException("The other point is on a different curve", null);
    B.ArgumentException_rPd = new A.ArgumentException("invalid input for parse int", null);
    B.ArgumentException_sMv = new A.ArgumentException("AffinePointt length doesn't match the curve.", null);
    B.ArgumentException_seG = new A.ArgumentException("CTR: iv length must be equal to cipher block size", null);
    B.ArgumentException_tAO = new A.ArgumentException("Denominator cannot be 0.", null);
    B.ArgumentException_wmT = new A.ArgumentException("invalid key length", null);
    B.ArgumentException_wwd = new A.ArgumentException("Invalid fingerprint length", null);
    B.ArgumentException_yDH = new A.ArgumentException("ChaCha: key size must be 32 bytes", null);
    B.ArgumentException_yfz = new A.ArgumentException("scrypt: N must be between 2 and 2^31", null);
    B.ArgumentException_ynv = new A.ArgumentException("Invalid RistrettoPoint", null);
    B.ArgumentException_zeT = new A.ArgumentException("Absolute paths can only be derived from a master key, not child ones", null);
    B.AsciiDecoder_false_127 = new A.AsciiDecoder(false, 127);
    B.AsciiDecoder_true_127 = new A.AsciiDecoder(true, 127);
    B.AsciiEncoder_127 = new A.AsciiEncoder(127);
    B.Base58Alphabets_0 = new A.Base58Alphabets(0, "bitcoin");
    B.Base58Alphabets_1 = new A.Base58Alphabets(1, "ripple");
    B.Base64Encoder_false = new A.Base64Encoder(false);
    B.Base64Codec_Base64Encoder_false = new A.Base64Codec(B.Base64Encoder_false);
    B.Base64Encoder_true = new A.Base64Encoder(true);
    B.Base64Codec_Base64Encoder_true = new A.Base64Codec(B.Base64Encoder_true);
    B.Bip32KeyError_7iV = new A.Bip32KeyError("Public child derivation is not supported", null);
    B.Bip32KeyError_7qd = new A.Bip32KeyError(string$.Public, null);
    B.Bip32KeyError_7z6 = new A.Bip32KeyError("Private child derivation with not-hardened index is not supported", null);
    B.Bip32KeyError_DpJ = new A.Bip32KeyError("Public child derivation cannot be used to create an hardened child key", null);
    B.Bip32KeyError_O7U = new A.Bip32KeyError("Computed child key is not valid, very unlucky index", null);
    B.Bip32KeyError_kr3 = new A.Bip32KeyError("Computed public child key is not valid, very unlucky index", null);
    B.Bip39Languages_chineseSimplified = new A.Bip39Languages("chineseSimplified");
    B.Bip39Languages_chineseTraditional = new A.Bip39Languages("chineseTraditional");
    B.Bip39Languages_czech = new A.Bip39Languages("czech");
    B.Bip39Languages_english = new A.Bip39Languages("english");
    B.Bip39Languages_french = new A.Bip39Languages("french");
    B.Bip39Languages_italian = new A.Bip39Languages("italian");
    B.Bip39Languages_japanese = new A.Bip39Languages("japanese");
    B.Bip39Languages_korean = new A.Bip39Languages("korean");
    B.Bip39Languages_portuguese = new A.Bip39Languages("portuguese");
    B.Bip39Languages_spanish = new A.Bip39Languages("spanish");
    B.Bip39WordsNum_12 = new A.Bip39WordsNum(12);
    B.Bip39WordsNum_15 = new A.Bip39WordsNum(15);
    B.Bip39WordsNum_18 = new A.Bip39WordsNum(18);
    B.Bip39WordsNum_21 = new A.Bip39WordsNum(21);
    B.Bip39WordsNum_24 = new A.Bip39WordsNum(24);
    B.Bip44Coins_akashNetwork = new A.Bip44Coins("akashNetwork");
    B.Bip44Coins_algorand = new A.Bip44Coins("algorand");
    B.Bip44Coins_aptos = new A.Bip44Coins("aptos");
    B.Bip44Coins_avaxCChain = new A.Bip44Coins("avaxCChain");
    B.Bip44Coins_avaxPChain = new A.Bip44Coins("avaxPChain");
    B.Bip44Coins_avaxXChain = new A.Bip44Coins("avaxXChain");
    B.Bip44Coins_axelar = new A.Bip44Coins("axelar");
    B.Bip44Coins_bandProtocol = new A.Bip44Coins("bandProtocol");
    B.Bip44Coins_binanceChain = new A.Bip44Coins("binanceChain");
    B.Bip44Coins_binanceSmartChain = new A.Bip44Coins("binanceSmartChain");
    B.Bip44Coins_bitcoin = new A.Bip44Coins("bitcoin");
    B.Bip44Coins_bitcoinCash = new A.Bip44Coins("bitcoinCash");
    B.Bip44Coins_bitcoinCashSlp = new A.Bip44Coins("bitcoinCashSlp");
    B.Bip44Coins_bitcoinCashSlpTestnet = new A.Bip44Coins("bitcoinCashSlpTestnet");
    B.Bip44Coins_bitcoinCashTestnet = new A.Bip44Coins("bitcoinCashTestnet");
    B.Bip44Coins_bitcoinSv = new A.Bip44Coins("bitcoinSv");
    B.Bip44Coins_bitcoinSvTestnet = new A.Bip44Coins("bitcoinSvTestnet");
    B.Bip44Coins_bitcoinTestnet = new A.Bip44Coins("bitcoinTestnet");
    B.Bip44Coins_cardanoByronIcarus = new A.Bip44Coins("cardanoByronIcarus");
    B.Bip44Coins_cardanoByronIcarusTestnet = new A.Bip44Coins("cardanoByronIcarusTestnet");
    B.Bip44Coins_cardanoByronLedger = new A.Bip44Coins("cardanoByronLedger");
    B.Bip44Coins_cardanoByronLedgerTestnet = new A.Bip44Coins("cardanoByronLedgerTestnet");
    B.Bip44Coins_celo = new A.Bip44Coins("celo");
    B.Bip44Coins_certik = new A.Bip44Coins("certik");
    B.Bip44Coins_chihuahua = new A.Bip44Coins("chihuahua");
    B.Bip44Coins_cosmos = new A.Bip44Coins("cosmos");
    B.Bip44Coins_cosmosEd25519 = new A.Bip44Coins("cosmosEd25519");
    B.Bip44Coins_cosmosEthSecp256k1 = new A.Bip44Coins("cosmosEthSecp256k1");
    B.Bip44Coins_cosmosNist256p1 = new A.Bip44Coins("cosmosNist256p1");
    B.Bip44Coins_cosmosTestnet = new A.Bip44Coins("cosmosTestnet");
    B.Bip44Coins_cosmosTestnetEd25519 = new A.Bip44Coins("cosmosTestnetEd25519");
    B.Bip44Coins_cosmosTestnetEthSecp256k1 = new A.Bip44Coins("cosmosTestnetEthSecp256k1");
    B.Bip44Coins_cosmosTestnetNist256p1 = new A.Bip44Coins("cosmosTestnetNist256p1");
    B.Bip44Coins_dash = new A.Bip44Coins("dash");
    B.Bip44Coins_dashTestnet = new A.Bip44Coins("dashTestnet");
    B.Bip44Coins_dogecoin = new A.Bip44Coins("dogecoin");
    B.Bip44Coins_dogecoinTestnet = new A.Bip44Coins("dogecoinTestnet");
    B.Bip44Coins_ecash = new A.Bip44Coins("ecash");
    B.Bip44Coins_ecashTestnet = new A.Bip44Coins("ecashTestnet");
    B.Bip44Coins_electraProtocol = new A.Bip44Coins("electraProtocol");
    B.Bip44Coins_electraProtocolTestnet = new A.Bip44Coins("electraProtocolTestnet");
    B.Bip44Coins_elrond = new A.Bip44Coins("elrond");
    B.Bip44Coins_eos = new A.Bip44Coins("eos");
    B.Bip44Coins_ergo = new A.Bip44Coins("ergo");
    B.Bip44Coins_ergoTestnet = new A.Bip44Coins("ergoTestnet");
    B.Bip44Coins_ethereum = new A.Bip44Coins("ethereum");
    B.Bip44Coins_ethereumClassic = new A.Bip44Coins("ethereumClassic");
    B.Bip44Coins_ethereumTestnet = new A.Bip44Coins("ethereumTestnet");
    B.Bip44Coins_fantomOpera = new A.Bip44Coins("fantomOpera");
    B.Bip44Coins_filecoin = new A.Bip44Coins("filecoin");
    B.Bip44Coins_harmonyOneAtom = new A.Bip44Coins("harmonyOneAtom");
    B.Bip44Coins_harmonyOneEth = new A.Bip44Coins("harmonyOneEth");
    B.Bip44Coins_harmonyOneMetamask = new A.Bip44Coins("harmonyOneMetamask");
    B.Bip44Coins_huobiChain = new A.Bip44Coins("huobiChain");
    B.Bip44Coins_icon = new A.Bip44Coins("icon");
    B.Bip44Coins_injective = new A.Bip44Coins("injective");
    B.Bip44Coins_irisNet = new A.Bip44Coins("irisNet");
    B.Bip44Coins_kava = new A.Bip44Coins("kava");
    B.Bip44Coins_kusamaEd25519Slip = new A.Bip44Coins("kusamaEd25519Slip");
    B.Bip44Coins_kusamaTestnetEd25519Slip = new A.Bip44Coins("kusamaTestnetEd25519Slip");
    B.Bip44Coins_litecoin = new A.Bip44Coins("litecoin");
    B.Bip44Coins_litecoinTestnet = new A.Bip44Coins("litecoinTestnet");
    B.Bip44Coins_moneroEd25519Slip = new A.Bip44Coins("moneroEd25519Slip");
    B.Bip44Coins_moneroSecp256k1 = new A.Bip44Coins("moneroSecp256k1");
    B.Bip44Coins_nano = new A.Bip44Coins("nano");
    B.Bip44Coins_nearProtocol = new A.Bip44Coins("nearProtocol");
    B.Bip44Coins_neo = new A.Bip44Coins("neo");
    B.Bip44Coins_nineChroniclesGold = new A.Bip44Coins("nineChroniclesGold");
    B.Bip44Coins_okexChainAtom = new A.Bip44Coins("okexChainAtom");
    B.Bip44Coins_okexChainAtomOld = new A.Bip44Coins("okexChainAtomOld");
    B.Bip44Coins_okexChainEth = new A.Bip44Coins("okexChainEth");
    B.Bip44Coins_ontology = new A.Bip44Coins("ontology");
    B.Bip44Coins_osmosis = new A.Bip44Coins("osmosis");
    B.Bip44Coins_pepecoin = new A.Bip44Coins("pepecoin");
    B.Bip44Coins_pepecoinTestnet = new A.Bip44Coins("pepecoinTestnet");
    B.Bip44Coins_piNetwork = new A.Bip44Coins("piNetwork");
    B.Bip44Coins_polkadotEd25519Slip = new A.Bip44Coins("polkadotEd25519Slip");
    B.Bip44Coins_polkadotTestnetEd25519Slip = new A.Bip44Coins("polkadotTestnetEd25519Slip");
    B.Bip44Coins_polygon = new A.Bip44Coins("polygon");
    B.Bip44Coins_ripple = new A.Bip44Coins("ripple");
    B.Bip44Coins_rippleED25519 = new A.Bip44Coins("rippleED25519");
    B.Bip44Coins_rippleTestnet = new A.Bip44Coins("rippleTestnet");
    B.Bip44Coins_rippleTestnetED25519 = new A.Bip44Coins("rippleTestnetED25519");
    B.Bip44Coins_secretNetworkNew = new A.Bip44Coins("secretNetworkNew");
    B.Bip44Coins_secretNetworkOld = new A.Bip44Coins("secretNetworkOld");
    B.Bip44Coins_solana = new A.Bip44Coins("solana");
    B.Bip44Coins_solanaTestnet = new A.Bip44Coins("solanaTestnet");
    B.Bip44Coins_stellar = new A.Bip44Coins("stellar");
    B.Bip44Coins_stellarTestnet = new A.Bip44Coins("stellarTestnet");
    B.Bip44Coins_terra = new A.Bip44Coins("terra");
    B.Bip44Coins_tezos = new A.Bip44Coins("tezos");
    B.Bip44Coins_theta = new A.Bip44Coins("theta");
    B.Bip44Coins_tonMainnet = new A.Bip44Coins("tonMainnet");
    B.Bip44Coins_tonTestnet = new A.Bip44Coins("tonTestnet");
    B.Bip44Coins_tron = new A.Bip44Coins("tron");
    B.Bip44Coins_tronTestnet = new A.Bip44Coins("tronTestnet");
    B.Bip44Coins_vechain = new A.Bip44Coins("vechain");
    B.Bip44Coins_verge = new A.Bip44Coins("verge");
    B.Bip44Coins_zcash = new A.Bip44Coins("zcash");
    B.Bip44Coins_zcashTestnet = new A.Bip44Coins("zcashTestnet");
    B.Bip44Coins_zilliqa = new A.Bip44Coins("zilliqa");
    B.Bip44Levels_0_Master = new A.Bip44Levels(0, "Master");
    B.Bip44Levels_5_Address = new A.Bip44Levels(5, "Address");
    B.Bip49Coins_bitcoin = new A.Bip49Coins("bitcoin");
    B.Bip49Coins_bitcoinCash = new A.Bip49Coins("bitcoinCash");
    B.Bip49Coins_bitcoinCashSlp = new A.Bip49Coins("bitcoinCashSlp");
    B.Bip49Coins_bitcoinCashSlpTestnet = new A.Bip49Coins("bitcoinCashSlpTestnet");
    B.Bip49Coins_bitcoinCashTestnet = new A.Bip49Coins("bitcoinCashTestnet");
    B.Bip49Coins_bitcoinSv = new A.Bip49Coins("bitcoinSv");
    B.Bip49Coins_bitcoinSvTestnet = new A.Bip49Coins("bitcoinSvTestnet");
    B.Bip49Coins_bitcoinTestnet = new A.Bip49Coins("bitcoinTestnet");
    B.Bip49Coins_dash = new A.Bip49Coins("dash");
    B.Bip49Coins_dashTestnet = new A.Bip49Coins("dashTestnet");
    B.Bip49Coins_dogecoin = new A.Bip49Coins("dogecoin");
    B.Bip49Coins_dogecoinTestnet = new A.Bip49Coins("dogecoinTestnet");
    B.Bip49Coins_ecash = new A.Bip49Coins("ecash");
    B.Bip49Coins_ecashTestnet = new A.Bip49Coins("ecashTestnet");
    B.Bip49Coins_electraProtocol = new A.Bip49Coins("electraProtocol");
    B.Bip49Coins_electraProtocolTestnet = new A.Bip49Coins("electraProtocolTestnet");
    B.Bip49Coins_litecoin = new A.Bip49Coins("litecoin");
    B.Bip49Coins_litecoinTestnet = new A.Bip49Coins("litecoinTestnet");
    B.Bip49Coins_pepecoin = new A.Bip49Coins("pepecoin");
    B.Bip49Coins_pepecoinTestnet = new A.Bip49Coins("pepecoinTestnet");
    B.Bip49Coins_zcash = new A.Bip49Coins("zcash");
    B.Bip49Coins_zcashTestnet = new A.Bip49Coins("zcashTestnet");
    B.Bip84Coins_bitcoin = new A.Bip84Coins("bitcoin");
    B.Bip84Coins_bitcoinTestnet = new A.Bip84Coins("bitcoinTestnet");
    B.Bip84Coins_electraProtocol = new A.Bip84Coins("electraProtocol");
    B.Bip84Coins_electraProtocolTestnet = new A.Bip84Coins("electraProtocolTestnet");
    B.Bip84Coins_litecoin = new A.Bip84Coins("litecoin");
    B.Bip84Coins_litecoinTestnet = new A.Bip84Coins("litecoinTestnet");
    B.Bip86Coins_bitcoin = new A.Bip86Coins("bitcoin");
    B.Bip86Coins_bitcoinTestnet = new A.Bip86Coins("bitcoinTestnet");
    B.BipProposal_bip44 = new A.BipProposal("bip44");
    B.BipProposal_bip49 = new A.BipProposal("bip49");
    B.BipProposal_bip84 = new A.BipProposal("bip84");
    B.BipProposal_bip86 = new A.BipProposal("bip86");
    B.C__EmptyStream = new A._EmptyStream(A.findType("_EmptyStream<List<int>>"));
    B.ByteStream__EmptyStream = new A.ByteStream(B.C__EmptyStream);
    B.CONSTANT = new A.Instantiation1(A.math__max$closure(), A.findType("Instantiation1<int>"));
    B.C_AsciiCodec = new A.AsciiCodec();
    B.C_Base64Decoder = new A.Base64Decoder();
    B.C_BytesCoder = new A.BytesCoder();
    B.C_CborNullValue = new A.CborNullValue();
    B.C_CborUndefinedValue = new A.CborUndefinedValue();
    B.C_CipProposal = new A.CipProposal();
    B.C_CustomProposal = new A.CustomProposal();
    B.C_EmptyIterator = new A.EmptyIterator(A.findType("EmptyIterator<0&>"));
    B.C_Endian = new A.Endian();
    B.C_Endian0 = new A.Endian();
    B.C_IntegerDivisionByZeroException = new A.IntegerDivisionByZeroException();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof HTMLElement == "function";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (typeof userAgent != "string") return hooks;
    if (userAgent.indexOf("DumpRenderTree") >= 0) return hooks;
    if (userAgent.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST5 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_JsonCodec = new A.JsonCodec();
    B.C_Latin1Codec = new A.Latin1Codec();
    B.C_MoneroProposal = new A.MoneroProposal();
    B.C_MultiSigAddressIndex = new A.MultiSigAddressIndex();
    B.C_NumbersCoder = new A.NumbersCoder();
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_SentinelValue = new A.SentinelValue();
    B.C_SubstratePropoosal = new A.SubstratePropoosal();
    B.C_SubstrateScaleBytesEncoder = new A.SubstrateScaleBytesEncoder();
    B.C_SubstrateScaleCUintEncoder = new A.SubstrateScaleCUintEncoder();
    B.C_TonMnemonicLanguages = new A.TonMnemonicLanguages();
    B.C_Utf8Codec = new A.Utf8Codec();
    B.C_Utf8Encoder = new A.Utf8Encoder();
    B.List_6_161_159 = A._setArrayType(makeConstList([6, 161, 159]), type$.JSArray_int);
    B.C_XtzAddrPrefixes = new A.XtzAddrPrefixes();
    B.C__DelayedDone = new A._DelayedDone();
    B.C__Hex = new A._Hex();
    B.C__RootZone = new A._RootZone();
    B.C__StringStackTrace = new A._StringStackTrace();
    B.CborBoleanValue_false = new A.CborBoleanValue(false);
    B.CborBoleanValue_true = new A.CborBoleanValue(true);
    B.CborException_0UB = new A.CborException("Length is to large for type int.", null);
    B.CborException_Aec = new A.CborException("invalid bigFloat array length", null);
    B.CborException_Opy = new A.CborException("invalid or unsuported cbor tag", null);
    B.CborException_U05 = new A.CborException("Input byte array must be exactly 2 bytes long for Float16", null);
    B.CborException_eZO = new A.CborException("Invalid simpleOrFloatTags", null);
    B.CborException_vE5 = new A.CborException("invalid cbornumeric", null);
    B.CborIntValue_3 = new A.CborIntValue(3);
    B.ChainType_0_testnet = new A.ChainType(0, "testnet");
    B.ChainType_1_mainnet = new A.ChainType(1, "mainnet");
    B.Cip1852Coins_cardanoIcarus = new A.Cip1852Coins("cardanoIcarus");
    B.Cip1852Coins_cardanoIcarusTestnet = new A.Cip1852Coins("cardanoIcarusTestnet");
    B.Cip1852Coins_cardanoLedger = new A.Cip1852Coins("cardanoLedger");
    B.Cip1852Coins_cardanoLedgerTestnet = new A.Cip1852Coins("cardanoLedgerTestnet");
    B.CoinNames_Edgeware = new A.CoinNames("Edgeware");
    B.CoinParams_Ssz = new A.CoinParams(null, null, null, null, null, 7, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_1ck = new A.CoinConf(B.CoinNames_Edgeware, B.CoinParams_Ssz);
    B.CoinNames_Stafi = new A.CoinNames("Stafi");
    B.CoinParams_Ssz0 = new A.CoinParams(null, null, null, null, null, 20, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_6ix = new A.CoinConf(B.CoinNames_Stafi, B.CoinParams_Ssz0);
    B.CoinNames_Polkadot = new A.CoinNames("Polkadot");
    B.CoinParams_Ssz1 = new A.CoinParams(null, null, null, null, null, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_6xV = new A.CoinConf(B.CoinNames_Polkadot, B.CoinParams_Ssz1);
    B.CoinNames_LYK = new A.CoinNames("Plasm Network");
    B.CoinParams_Ssz2 = new A.CoinParams(null, null, null, null, null, 5, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_9YE = new A.CoinConf(B.CoinNames_LYK, B.CoinParams_Ssz2);
    B.CoinNames_bHn = new A.CoinNames("Phala Network");
    B.CoinParams_Ssz3 = new A.CoinParams(null, null, null, null, null, 30, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_Aeg = new A.CoinConf(B.CoinNames_bHn, B.CoinParams_Ssz3);
    B.CoinNames_Moonbeam = new A.CoinNames("Moonbeam");
    B.CoinParams_ok0 = new A.CoinParams(null, null, null, null, null, 1284, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_E4y = new A.CoinConf(B.CoinNames_Moonbeam, B.CoinParams_ok0);
    B.CoinNames_MMm = new A.CoinNames("Generic Substrate");
    B.CoinParams_Ssz4 = new A.CoinParams(null, null, null, null, null, 42, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_Lhy = new A.CoinConf(B.CoinNames_MMm, B.CoinParams_Ssz4);
    B.CoinNames_Sora = new A.CoinNames("Sora");
    B.CoinParams_Ssz5 = new A.CoinParams(null, null, null, null, null, 69, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_WMI = new A.CoinConf(B.CoinNames_Sora, B.CoinParams_Ssz5);
    B.CoinNames_Karura = new A.CoinNames("Karura");
    B.CoinParams_Ssz6 = new A.CoinParams(null, null, null, null, null, 8, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_Wvd = new A.CoinConf(B.CoinNames_Karura, B.CoinParams_Ssz6);
    B.CoinNames_Moonriver = new A.CoinNames("Moonriver");
    B.CoinParams_eBG = new A.CoinParams(null, null, null, null, null, 1285, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_Y2s = new A.CoinConf(B.CoinNames_Moonriver, B.CoinParams_eBG);
    B.CoinNames_Monero = new A.CoinNames("Monero");
    B.List_18 = A._setArrayType(makeConstList([18]), type$.JSArray_int);
    B.List_19 = A._setArrayType(makeConstList([19]), type$.JSArray_int);
    B.List_42 = A._setArrayType(makeConstList([42]), type$.JSArray_int);
    B.CoinParams_J4X = new A.CoinParams(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, B.List_18, B.List_19, B.List_42, null, null);
    B.CoinConf_ka6 = new A.CoinConf(B.CoinNames_Monero, B.CoinParams_J4X);
    B.CoinNames_izR = new A.CoinNames("Monero TestNet");
    B.List_53 = A._setArrayType(makeConstList([53]), type$.JSArray_int);
    B.List_54 = A._setArrayType(makeConstList([54]), type$.JSArray_int);
    B.List_63 = A._setArrayType(makeConstList([63]), type$.JSArray_int);
    B.CoinParams_J4X0 = new A.CoinParams(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, B.List_53, B.List_54, B.List_63, null, null);
    B.CoinConf_o0y = new A.CoinConf(B.CoinNames_izR, B.CoinParams_J4X0);
    B.CoinNames_Bifrost = new A.CoinNames("Bifrost");
    B.CoinParams_Ssz7 = new A.CoinParams(null, null, null, null, null, 6, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_o6u = new A.CoinConf(B.CoinNames_Bifrost, B.CoinParams_Ssz7);
    B.CoinNames_ChainX = new A.CoinNames("ChainX");
    B.CoinParams_Ssz8 = new A.CoinParams(null, null, null, null, null, 44, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_qx4 = new A.CoinConf(B.CoinNames_ChainX, B.CoinParams_Ssz8);
    B.CoinNames_Acala = new A.CoinNames("Acala");
    B.CoinParams_Ssz9 = new A.CoinParams(null, null, null, null, null, 10, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_tXW = new A.CoinConf(B.CoinNames_Acala, B.CoinParams_Ssz9);
    B.CoinNames_bpI = new A.CoinNames("Monero StageNet");
    B.List_24 = A._setArrayType(makeConstList([24]), type$.JSArray_int);
    B.List_25 = A._setArrayType(makeConstList([25]), type$.JSArray_int);
    B.List_36 = A._setArrayType(makeConstList([36]), type$.JSArray_int);
    B.CoinParams_J4X1 = new A.CoinParams(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, B.List_24, B.List_25, B.List_36, null, null);
    B.CoinConf_uMa = new A.CoinConf(B.CoinNames_bpI, B.CoinParams_J4X1);
    B.CoinNames_Kusama = new A.CoinNames("Kusama");
    B.CoinParams_Ssz10 = new A.CoinParams(null, null, null, null, null, 2, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_wdf = new A.CoinConf(B.CoinNames_Kusama, B.CoinParams_Ssz10);
    B.CoinNames_4N8 = new A.CoinNames("Ergo TestNet");
    B.CoinNames_AdS1 = new A.CoinNames("Avax C-Chain");
    B.CoinNames_AdS0 = new A.CoinNames("Avax P-Chain");
    B.CoinNames_AdS = new A.CoinNames("Avax X-Chain");
    B.CoinNames_Algorand = new A.CoinNames("Algorand");
    B.CoinNames_Aptos = new A.CoinNames("Aptos");
    B.CoinNames_Axelar = new A.CoinNames("Axelar");
    B.CoinNames_B2l = new A.CoinNames("BitcoinSV TestNet");
    B.CoinNames_Bitcoin = new A.CoinNames("Bitcoin");
    B.CoinNames_BitcoinSV = new A.CoinNames("BitcoinSV");
    B.CoinNames_CBI = new A.CoinNames("Electra Protocol TestNet");
    B.CoinNames_CDm = new A.CoinNames("Bitcoin Cash");
    B.CoinNames_Cardano = new A.CoinNames("Cardano");
    B.CoinNames_Celo = new A.CoinNames("Celo");
    B.CoinNames_Certik = new A.CoinNames("Certik");
    B.CoinNames_Chihuahua = new A.CoinNames("Chihuahua");
    B.CoinNames_Cosmos = new A.CoinNames("Cosmos");
    B.CoinNames_D4j = new A.CoinNames("Binance Chain");
    B.CoinNames_Dash = new A.CoinNames("Dash");
    B.CoinNames_Dogecoin = new A.CoinNames("Dogecoin");
    B.CoinNames_Due = new A.CoinNames("Binance Smart Chain");
    B.CoinNames_EOS = new A.CoinNames("EOS");
    B.CoinNames_Ecu = new A.CoinNames("Electra Protocol");
    B.CoinNames_Ergo = new A.CoinNames("Ergo");
    B.CoinNames_Ethereum = new A.CoinNames("Ethereum");
    B.CoinNames_FCG0 = new A.CoinNames("Band Protocol");
    B.CoinNames_FCG = new A.CoinNames("Bitcoin Cash SLP TestNet");
    B.CoinNames_Filecoin = new A.CoinNames("Filecoin");
    B.CoinNames_HZw = new A.CoinNames("eCash TestNet");
    B.CoinNames_IIS = new A.CoinNames("Litecoin TestNet");
    B.CoinNames_Icon = new A.CoinNames("Icon");
    B.CoinNames_Injective = new A.CoinNames("Injective");
    B.CoinNames_Iot = new A.CoinNames("Bitcoin Cash TestNet");
    B.CoinNames_JiH = new A.CoinNames("Fantom Opera");
    B.CoinNames_Kava = new A.CoinNames("Kava");
    B.CoinNames_Litecoin = new A.CoinNames("Litecoin");
    B.CoinNames_MUB = new A.CoinNames("Dash TestNet");
    B.CoinNames_MYA = new A.CoinNames("Huobi Token");
    B.CoinNames_NEO = new A.CoinNames("NEO");
    B.CoinNames_Nano = new A.CoinNames("Nano");
    B.CoinNames_NineChroniclesGold = new A.CoinNames("NineChroniclesGold");
    B.CoinNames_O1S = new A.CoinNames("Zcash TestNet");
    B.CoinNames_OKExChain = new A.CoinNames("OKExChain");
    B.CoinNames_OPN = new A.CoinNames("Dogecoin TestNet");
    B.CoinNames_OWX = new A.CoinNames("Near Protocol");
    B.CoinNames_Ontology = new A.CoinNames("Ontology");
    B.CoinNames_Osmosis = new A.CoinNames("Osmosis");
    B.CoinNames_PVK = new A.CoinNames("Byron legacy testnet");
    B.CoinNames_Pepecoin = new A.CoinNames("Pepecoin");
    B.CoinNames_Polygon = new A.CoinNames("Polygon");
    B.CoinNames_QyU = new A.CoinNames("Pepecoin TestNet");
    B.CoinNames_Ripple = new A.CoinNames("Ripple");
    B.CoinNames_Solana = new A.CoinNames("Solana");
    B.CoinNames_Stellar = new A.CoinNames("Stellar");
    B.CoinNames_Terra = new A.CoinNames("Terra");
    B.CoinNames_Tezos = new A.CoinNames("Tezos");
    B.CoinNames_Tron = new A.CoinNames("Tron");
    B.CoinNames_UiL = new A.CoinNames("Cardano TestNet");
    B.CoinNames_VeChain = new A.CoinNames("VeChain");
    B.CoinNames_Verge = new A.CoinNames("Verge");
    B.CoinNames_Zcash = new A.CoinNames("Zcash");
    B.CoinNames_Zilliqa = new A.CoinNames("Zilliqa");
    B.CoinNames_aBy = new A.CoinNames("The Open Network");
    B.CoinNames_aBy0 = new A.CoinNames("The Open Network");
    B.CoinNames_adc = new A.CoinNames("Pi Network");
    B.CoinNames_e9z = new A.CoinNames("IRIS Network");
    B.CoinNames_eCash = new A.CoinNames("eCash");
    B.CoinNames_eHw = new A.CoinNames("Harmony One");
    B.CoinNames_ki8 = new A.CoinNames("Secret Network");
    B.CoinNames_mqm = new A.CoinNames("Ethereum Classic");
    B.CoinNames_qd4 = new A.CoinNames("Theta Network");
    B.CoinNames_qxe = new A.CoinNames("Elrond eGold");
    B.CoinNames_rCZ = new A.CoinNames("Bitcoin Cash SLP");
    B.CoinNames_tuc = new A.CoinNames("Bitcoin TestNet");
    B.CoinNames_xw8 = new A.CoinNames("Byron legacy");
    B.CoinNames_z8q = new A.CoinNames("Akash Network");
    B.CosmosKeysAlgs_0 = new A.CosmosKeysAlgs(0, "secp256k1");
    B.CosmosKeysAlgs_1 = new A.CosmosKeysAlgs(1, "ethsecp256k1");
    B.CosmosKeysAlgs_2 = new A.CosmosKeysAlgs(2, "ed25519");
    B.CosmosKeysAlgs_3 = new A.CosmosKeysAlgs(3, "secp256r1");
    B.CryptoRequestHashingType_6 = new A.CryptoRequestHashingType(6, "uuid");
    B.CryptoRequestHashingType_8 = new A.CryptoRequestHashingType(8, "generateUuid");
    B.List_111_21 = A._setArrayType(makeConstList([111, 21]), type$.JSArray_int);
    B.CryptoRequestMethod_3jH = new A.CryptoRequestMethod(B.List_111_21, 7, "readMasterKey");
    B.List_111_45 = A._setArrayType(makeConstList([111, 45]), type$.JSArray_int);
    B.CryptoRequestMethod_5cD = new A.CryptoRequestMethod(B.List_111_45, 4, "generateMoneroMnemonic");
    B.List_111_1 = A._setArrayType(makeConstList([111, 1]), type$.JSArray_int);
    B.CryptoRequestMethod_6pl = new A.CryptoRequestMethod(B.List_111_1, 2, "generateMnemonic");
    B.List_111_32 = A._setArrayType(makeConstList([111, 32]), type$.JSArray_int);
    B.CryptoRequestMethod_7jk = new A.CryptoRequestMethod(B.List_111_32, 11, "encodeBackup");
    B.List_111_22 = A._setArrayType(makeConstList([111, 22]), type$.JSArray_int);
    B.CryptoRequestMethod_8YS = new A.CryptoRequestMethod(B.List_111_22, 8, "createMasterKey");
    B.List_111_44 = A._setArrayType(makeConstList([111, 44]), type$.JSArray_int);
    B.CryptoRequestMethod_CnH = new A.CryptoRequestMethod(B.List_111_44, 5, "moneroMnemonicToPrivateKey");
    B.List_111_31 = A._setArrayType(makeConstList([111, 31]), type$.JSArray_int);
    B.CryptoRequestMethod_CpJ = new A.CryptoRequestMethod(B.List_111_31, 10, "decodeBackup");
    B.List_111_36 = A._setArrayType(makeConstList([111, 36]), type$.JSArray_int);
    B.CryptoRequestMethod_EGJ = new A.CryptoRequestMethod(B.List_111_36, 14, "randomGenerator");
    B.List_111_23 = A._setArrayType(makeConstList([111, 23]), type$.JSArray_int);
    B.CryptoRequestMethod_Giz = new A.CryptoRequestMethod(B.List_111_23, 9, "createWallet");
    B.List_111_41 = A._setArrayType(makeConstList([111, 41]), type$.JSArray_int);
    B.CryptoRequestMethod_Ucj = new A.CryptoRequestMethod(B.List_111_41, 17, "setupMasterKey");
    B.List_111_20 = A._setArrayType(makeConstList([111, 20]), type$.JSArray_int);
    B.CryptoRequestMethod_VKi = new A.CryptoRequestMethod(B.List_111_20, 6, "generateMasterKey");
    B.List_111_35 = A._setArrayType(makeConstList([111, 35]), type$.JSArray_int);
    B.CryptoRequestMethod_YE0 = new A.CryptoRequestMethod(B.List_111_35, 13, "walletKey");
    B.List_111_10 = A._setArrayType(makeConstList([111, 10]), type$.JSArray_int);
    B.CryptoRequestMethod_bMN = new A.CryptoRequestMethod(B.List_111_10, 0, "encryptChacha");
    B.List_111_38 = A._setArrayType(makeConstList([111, 38]), type$.JSArray_int);
    B.CryptoRequestMethod_c4E = new A.CryptoRequestMethod(B.List_111_38, 16, "hashing");
    B.List_111_2 = A._setArrayType(makeConstList([111, 2]), type$.JSArray_int);
    B.CryptoRequestMethod_ifx = new A.CryptoRequestMethod(B.List_111_2, 3, "tonMnemonicToPrivateKey");
    B.List_111_34 = A._setArrayType(makeConstList([111, 34]), type$.JSArray_int);
    B.CryptoRequestMethod_kiE = new A.CryptoRequestMethod(B.List_111_34, 12, "generateBip39Mnemonic");
    B.List_111_12 = A._setArrayType(makeConstList([111, 12]), type$.JSArray_int);
    B.CryptoRequestMethod_qJs = new A.CryptoRequestMethod(B.List_111_12, 1, "decryptChacha");
    B.CustomKeyType_0 = new A.CustomKeyType(0, "privateKey");
    B.CustomKeyType_1 = new A.CustomKeyType(1, "extendedKey");
    B.DaemonRequestBlocksInfo_0 = new A.DaemonRequestBlocksInfo(0, "blocksOnly");
    B.DartMoneroPluginException_0 = new A.DartMoneroPluginException("RCTNULL does not support public key information.", null);
    B.DartMoneroPluginException_4CA = new A.DartMoneroPluginException("Use primary address for Non-subaddress index.", null);
    B.DartMoneroPluginException_6m4 = new A.DartMoneroPluginException("Invalid monero request encoding type.", null);
    B.DartMoneroPluginException_8YE = new A.DartMoneroPluginException("Invalid prefix: no related network found for the provided prefix.", null);
    B.DartMoneroPluginException_EEy = new A.DartMoneroPluginException("Indexes must not be empty", null);
    B.DartMoneroPluginException_FGJ = new A.DartMoneroPluginException("Miss matching length of proof and tx pub keys.", null);
    B.DartMoneroPluginException_GZq = new A.DartMoneroPluginException("Index does not exists.", null);
    B.DartMoneroPluginException_Ims = new A.DartMoneroPluginException("Invalid transaction output index.", null);
    B.DartMoneroPluginException_JNA = new A.DartMoneroPluginException("Watch only account does not have a private spend key", null);
    B.DartMoneroPluginException_JhM = new A.DartMoneroPluginException("Invalid transaction: multiple outputs cannot be sent to the same address.", null);
    B.DartMoneroPluginException_Qw8 = new A.DartMoneroPluginException("No funds received in this tx.", null);
    B.DartMoneroPluginException_SNv = new A.DartMoneroPluginException("RCTNULL does not support ECDH information.", null);
    B.DartMoneroPluginException_apl = new A.DartMoneroPluginException("Transaction validation failed: The sum of input amounts does not match the sum of output amounts plus the transaction fee. Ensure the inputs cover all outputs and the required fee.", null);
    B.DartMoneroPluginException_gg9 = new A.DartMoneroPluginException("RCTSignature casting failed.", null);
    B.DartMoneroPluginException_gkc = new A.DartMoneroPluginException("Use `MoneroIntegratedAddress` for creating a MoneroAccount address.", null);
    B.DartMoneroPluginException_gqV = new A.DartMoneroPluginException("Invalid map casting. only use `asMap` method for casting Map<String,dynamic>.", null);
    B.DartMoneroPluginException_juT = new A.DartMoneroPluginException("Duplicate indexes find.", null);
    B.DartMoneroPluginException_oqF = new A.DartMoneroPluginException("Invalid list casting. only use `valueAsList` method for list casting.", null);
    B.DartMoneroPluginException_qHh = new A.DartMoneroPluginException("Invalid proof data provided.", null);
    B.DartMoneroPluginException_t2s = new A.DartMoneroPluginException("Some transaction extras parsing failed.", null);
    B.DartMoneroPluginException_uwn = new A.DartMoneroPluginException("signature prunable required for determinate tx hash.", null);
    B.DartMoneroPluginException_wEo = new A.DartMoneroPluginException("Cannot find tx public key extra.", null);
    B.DartMoneroPluginException_yvL = new A.DartMoneroPluginException("Invalid monero tx hex.", null);
    B.DemonRequestType_0 = new A.DemonRequestType(0, "json");
    B.DemonRequestType_1 = new A.DemonRequestType(1, "jsonRPC");
    B.DemonRequestType_2 = new A.DemonRequestType(2, "binary");
    B.DigestAuthHeadersAlg_2Vk = new A.DigestAuthHeadersAlg("SHA-256-sess", 3, "sha256Sess");
    B.DigestAuthHeadersAlg_4KH = new A.DigestAuthHeadersAlg("SHA-256", 2, "sha256");
    B.DigestAuthHeadersAlg_CFv = new A.DigestAuthHeadersAlg("SHA-512-sess", 5, "sha512Sess");
    B.DigestAuthHeadersAlg_MD5_0_md5 = new A.DigestAuthHeadersAlg("MD5", 0, "md5");
    B.DigestAuthHeadersAlg_QWm = new A.DigestAuthHeadersAlg("SHA-512-256-sess", 7, "sha512256Sess");
    B.DigestAuthHeadersAlg_iYJ = new A.DigestAuthHeadersAlg("MD5-sess", 1, "md5Sess");
    B.DigestAuthHeadersAlg_vC8 = new A.DigestAuthHeadersAlg("SHA-512-256", 6, "sha512256");
    B.DigestAuthHeadersAlg_xHT = new A.DigestAuthHeadersAlg("SHA-512", 4, "sha512");
    B.DigestAuthQop_auth_0_auth = new A.DigestAuthQop("auth", 0, "auth");
    B.DigestAuthQop_f5L = new A.DigestAuthQop("auth-int", 1, "authInt");
    B.Duration_0 = new A.Duration(0);
    B.Duration_1 = new A.Duration(1);
    B.Duration_100000 = new A.Duration(100000);
    B.Duration_1000000 = new A.Duration(1000000);
    B.Duration_120000000 = new A.Duration(120000000);
    B.Duration_180000000 = new A.Duration(180000000);
    B.Duration_60000000 = new A.Duration(60000000);
    B.EIP712Version_1 = new A.EIP712Version(1);
    B.EIP712Version_3 = new A.EIP712Version(3);
    B.EIP712Version_4 = new A.EIP712Version(4);
    B.EcdhInfoVersion_V1 = new A.EcdhInfoVersion("V1");
    B.EcdhInfoVersion_V2 = new A.EcdhInfoVersion("V2");
    B.EllipticCurveTypes_ed25519 = new A.EllipticCurveTypes("ed25519");
    B.EllipticCurveTypes_ed25519Blake2b = new A.EllipticCurveTypes("ed25519Blake2b");
    B.EllipticCurveTypes_ed25519Kholaw = new A.EllipticCurveTypes("ed25519Kholaw");
    B.EllipticCurveTypes_ed25519Monero = new A.EllipticCurveTypes("ed25519Monero");
    B.EllipticCurveTypes_nist256p1 = new A.EllipticCurveTypes("nist256p1");
    B.EllipticCurveTypes_secp256k1 = new A.EllipticCurveTypes("secp256k1");
    B.EllipticCurveTypes_sr25519 = new A.EllipticCurveTypes("sr25519");
    B.EncodeType_0 = new A.EncodeType(0, "comprossed");
    B.EncodeType_1 = new A.EncodeType(1, "hybrid");
    B.EncodeType_2 = new A.EncodeType(2, "raw");
    B.EncodeType_3 = new A.EncodeType(3, "uncompressed");
    B.ErgoNetworkTypes_0 = new A.ErgoNetworkTypes(0);
    B.ErgoNetworkTypes_16 = new A.ErgoNetworkTypes(16);
    B.ExpansionMode_1 = new A.ExpansionMode(1, "ed25519");
    B.List_4m4 = A._setArrayType(makeConstList([-32595792, -7943725, 9377950, 3500415, 12389472, -272473, -25146209, -2005654, 326686, 11406482]), type$.JSArray_int);
    B.FieldElement_9T4 = new A.FieldElement(B.List_4m4);
    B.List_7Vh = A._setArrayType(makeConstList([-21786234, -12173074, 21573800, 4524538, -4645904, 16204591, 8012863, -8444712, 3212926, 6885324]), type$.JSArray_int);
    B.FieldElement_GL9 = new A.FieldElement(B.List_7Vh);
    B.List_gPr = A._setArrayType(makeConstList([-12721188, -3529, 0, 0, 0, 0, 0, 0, 0, 0]), type$.JSArray_int);
    B.FieldElement_IQy = new A.FieldElement(B.List_gPr);
    B.List_YjV = A._setArrayType(makeConstList([8166131, -6741800, -17040804, 3154616, 21461005, 1466302, -30876704, -6368709, 10503587, -13363080]), type$.JSArray_int);
    B.FieldElement_Jik = new A.FieldElement(B.List_YjV);
    B.List_8TW = A._setArrayType(makeConstList([-21827239, -5839606, -30745221, 13898782, 229458, 15978800, -12551817, -6495438, 29715968, 9444199]), type$.JSArray_int);
    B.FieldElement_K2f = new A.FieldElement(B.List_8TW);
    B.List_OtT = A._setArrayType(makeConstList([-486662, 0, 0, 0, 0, 0, 0, 0, 0, 0]), type$.JSArray_int);
    B.FieldElement_PTP = new A.FieldElement(B.List_OtT);
    B.List_GNx = A._setArrayType(makeConstList([-31702527, -2466483, -26106795, -12203692, -12169197, -321052, 14850977, -10296299, -16929438, -407568]), type$.JSArray_int);
    B.FieldElement_U8c = new A.FieldElement(B.List_GNx);
    B.List_OvD = A._setArrayType(makeConstList([-13620103, 14639558, 4532995, 7679154, 16815101, -15883539, -22863840, -14813421, 13716513, -6477756]), type$.JSArray_int);
    B.FieldElement_gkc = new A.FieldElement(B.List_OvD);
    B.List_AiV = A._setArrayType(makeConstList([-10913610, 13857413, -15372611, 6949391, 114729, -8787816, -6275908, -3247719, -18696448, -12055116]), type$.JSArray_int);
    B.FieldElement_iwY = new A.FieldElement(B.List_AiV);
    B.FloatLength_11_52 = new A.FloatLength(11, 52);
    B.FloatLength_5_10 = new A.FloatLength(5, 10);
    B.FloatLength_8_23 = new A.FloatLength(8, 23);
    B.List_kyy = A._setArrayType(makeConstList([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), type$.JSArray_int);
    B.FieldElement_YYs = new A.FieldElement(B.List_kyy);
    B.List_kyy0 = A._setArrayType(makeConstList([1, 0, 0, 0, 0, 0, 0, 0, 0, 0]), type$.JSArray_int);
    B.FieldElement_YYs0 = new A.FieldElement(B.List_kyy0);
    B.GroupElementP3_ifE = new A.GroupElementP3(B.FieldElement_YYs, B.FieldElement_YYs0, B.FieldElement_YYs0, B.FieldElement_YYs);
    B.HTTPClientType_0 = new A.HTTPClientType(0, "cached");
    B.HTTPClientType_1 = new A.HTTPClientType(1, "single");
    B.HTTPRequestType_GET_0_get = new A.HTTPRequestType("GET", 0, "get");
    B.HTTPRequestType_POST_1_post = new A.HTTPRequestType("POST", 1, "post");
    B.HTTPResponseType_0 = new A.HTTPResponseType(0, "binary");
    B.HTTPResponseType_1 = new A.HTTPResponseType(1, "string");
    B.HTTPResponseType_2 = new A.HTTPResponseType(2, "json");
    B.HTTPResponseType_3 = new A.HTTPResponseType(3, "map");
    B.HTTPResponseType_4 = new A.HTTPResponseType(4, "listOfMap");
    B.MessageArgsException_data_verification_failed = new A.MessageArgsException("data_verification_failed");
    B.IsolateCborResponseMessage_YfX = new A.IsolateCborResponseMessage(B.MessageArgsException_data_verification_failed, -1);
    B.JacobiError_6Vn = new A.JacobiError("n must be larger than 2", null);
    B.JacobiError_EnN = new A.JacobiError("n must be odd", null);
    B.JsonDecoder_null = new A.JsonDecoder(null);
    B.JsonEncoder_null_null = new A.JsonEncoder(null, null);
    B.KDFMode_0 = new A.KDFMode(0, "scrypt");
    B.KDFMode_1 = new A.KDFMode(1, "pbkdf2");
    B.Latin1Encoder_255 = new A.Latin1Encoder(255);
    B.LayoutAction_0 = new A.LayoutAction(0, "span");
    B.LayoutAction_1 = new A.LayoutAction(1, "encode");
    B.LayoutAction_2 = new A.LayoutAction(2, "decode");
    B.List_0 = A._setArrayType(makeConstList([0]), type$.JSArray_int);
    B.MoneroPaymentType_0_locked = new A.MoneroPaymentType(0, "locked");
    B.MoneroPaymentType_1_unlocked = new A.MoneroPaymentType(1, "unlocked");
    B.MoneroPaymentType_2_unlockedMultisig = new A.MoneroPaymentType(2, "unlockedMultisig");
    B.List_03 = A._setArrayType(makeConstList([B.MoneroPaymentType_0_locked, B.MoneroPaymentType_1_unlocked, B.MoneroPaymentType_2_unlockedMultisig]), A.findType("JSArray<MoneroPaymentType>"));
    B.List_00 = A._setArrayType(makeConstList([0, 2, 3, 5, 6, 7, 9, 10, 11]), type$.JSArray_int);
    B.List_01 = A._setArrayType(makeConstList([1, 17, 1, 1, 1, 1, 2, 1, 1]), type$.JSArray_int);
    B.List_02 = A._setArrayType(makeConstList([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]), type$.JSArray_dynamic);
    B.List_0_0_0_0 = A._setArrayType(makeConstList([0, 0, 0, 0]), type$.JSArray_int);
    B.List_0_1_2_3 = A._setArrayType(makeConstList([0, 1, 2, 3]), type$.JSArray_int);
    B.List_0_3_2_1 = A._setArrayType(makeConstList([0, 3, 2, 1]), type$.JSArray_int);
    B.List_0a0 = A._setArrayType(makeConstList([236, 211, 245, 92, 26, 99, 18, 88, 214, 156, 247, 162, 222, 249, 222, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16]), type$.JSArray_int);
    B.List_0uY = A._setArrayType(makeConstList(["'", "h", "p"]), type$.JSArray_String);
    B.List_1 = A._setArrayType(makeConstList([1]), type$.JSArray_int);
    B.List_104_0_0_0 = A._setArrayType(makeConstList([104, 0, 0, 0]), type$.JSArray_int);
    B.List_111 = A._setArrayType(makeConstList([111]), type$.JSArray_int);
    B.List_111_25 = A._setArrayType(makeConstList([111, 25]), type$.JSArray_int);
    B.List_111_26 = A._setArrayType(makeConstList([111, 26]), type$.JSArray_int);
    B.List_111_27 = A._setArrayType(makeConstList([111, 27]), type$.JSArray_int);
    B.List_111_28 = A._setArrayType(makeConstList([111, 28]), type$.JSArray_int);
    B.List_111_29 = A._setArrayType(makeConstList([111, 29]), type$.JSArray_int);
    B.List_111_3 = A._setArrayType(makeConstList([111, 3]), type$.JSArray_int);
    B.List_111_30 = A._setArrayType(makeConstList([111, 30]), type$.JSArray_int);
    B.List_111_33 = A._setArrayType(makeConstList([111, 33]), type$.JSArray_int);
    B.List_111_4 = A._setArrayType(makeConstList([111, 4]), type$.JSArray_int);
    B.List_111_40 = A._setArrayType(makeConstList([111, 40]), type$.JSArray_int);
    B.List_111_5 = A._setArrayType(makeConstList([111, 5]), type$.JSArray_int);
    B.List_113 = A._setArrayType(makeConstList([113]), type$.JSArray_int);
    B.List_128 = A._setArrayType(makeConstList([128]), type$.JSArray_int);
    B.List_12_0 = A._setArrayType(makeConstList([12, 0]), type$.JSArray_int);
    B.List_12_1 = A._setArrayType(makeConstList([12, 1]), type$.JSArray_int);
    B.List_12_10 = A._setArrayType(makeConstList([12, 10]), type$.JSArray_int);
    B.List_12_11 = A._setArrayType(makeConstList([12, 11]), type$.JSArray_int);
    B.List_12_12 = A._setArrayType(makeConstList([12, 12]), type$.JSArray_int);
    B.List_12_13 = A._setArrayType(makeConstList([12, 13]), type$.JSArray_int);
    B.List_12_14 = A._setArrayType(makeConstList([12, 14]), type$.JSArray_int);
    B.List_12_15 = A._setArrayType(makeConstList([12, 15]), type$.JSArray_int);
    B.List_12_16 = A._setArrayType(makeConstList([12, 16]), type$.JSArray_int);
    B.List_12_17 = A._setArrayType(makeConstList([12, 17]), type$.JSArray_int);
    B.List_12_2 = A._setArrayType(makeConstList([12, 2]), type$.JSArray_int);
    B.List_12_4 = A._setArrayType(makeConstList([12, 4]), type$.JSArray_int);
    B.List_12_5 = A._setArrayType(makeConstList([12, 5]), type$.JSArray_int);
    B.List_12_6 = A._setArrayType(makeConstList([12, 6]), type$.JSArray_int);
    B.List_12_7 = A._setArrayType(makeConstList([12, 7]), type$.JSArray_int);
    B.List_12_8 = A._setArrayType(makeConstList([12, 8]), type$.JSArray_int);
    B.List_12_9 = A._setArrayType(makeConstList([12, 9]), type$.JSArray_int);
    B.List_137 = A._setArrayType(makeConstList([137]), type$.JSArray_int);
    B.List_140 = A._setArrayType(makeConstList([140]), type$.JSArray_int);
    B.List_141 = A._setArrayType(makeConstList([141]), type$.JSArray_int);
    B.List_158 = A._setArrayType(makeConstList([158]), type$.JSArray_int);
    B.List_16 = A._setArrayType(makeConstList([16]), type$.JSArray_int);
    B.List_162 = A._setArrayType(makeConstList([162]), type$.JSArray_int);
    B.List_176 = A._setArrayType(makeConstList([176]), type$.JSArray_int);
    B.List_180 = A._setArrayType(makeConstList([180]), type$.JSArray_int);
    B.List_180_0 = A._setArrayType(makeConstList([180, 0]), type$.JSArray_int);
    B.List_180_10 = A._setArrayType(makeConstList([180, 10]), type$.JSArray_int);
    B.List_180_12 = A._setArrayType(makeConstList([180, 12]), type$.JSArray_int);
    B.List_180_13 = A._setArrayType(makeConstList([180, 13]), type$.JSArray_int);
    B.List_180_14 = A._setArrayType(makeConstList([180, 14]), type$.JSArray_int);
    B.List_180_15 = A._setArrayType(makeConstList([180, 15]), type$.JSArray_int);
    B.List_180_16 = A._setArrayType(makeConstList([180, 16]), type$.JSArray_int);
    B.List_180_2 = A._setArrayType(makeConstList([180, 2]), type$.JSArray_int);
    B.List_180_3 = A._setArrayType(makeConstList([180, 3]), type$.JSArray_int);
    B.List_180_5 = A._setArrayType(makeConstList([180, 5]), type$.JSArray_int);
    B.List_180_6 = A._setArrayType(makeConstList([180, 6]), type$.JSArray_int);
    B.List_180_7 = A._setArrayType(makeConstList([180, 7]), type$.JSArray_int);
    B.List_180_9 = A._setArrayType(makeConstList([180, 9]), type$.JSArray_int);
    B.List_181 = A._setArrayType(makeConstList([181]), type$.JSArray_int);
    B.List_196 = A._setArrayType(makeConstList([196]), type$.JSArray_int);
    B.List_2 = A._setArrayType(makeConstList([2]), type$.JSArray_int);
    B.List_200 = A._setArrayType(makeConstList([200]), type$.JSArray_int);
    B.List_200_192_1_0 = A._setArrayType(makeConstList([200, 192, 1, 0]), type$.JSArray_int);
    B.List_200_193_1_0 = A._setArrayType(makeConstList([200, 193, 1, 0]), type$.JSArray_int);
    B.List_200_195_1_0 = A._setArrayType(makeConstList([200, 195, 1, 0]), type$.JSArray_int);
    B.List_200_197_100 = A._setArrayType(makeConstList([200, 197, 100]), type$.JSArray_int);
    B.List_200_201_1_0 = A._setArrayType(makeConstList([200, 201, 1, 0]), type$.JSArray_int);
    B.List_200_202_10 = A._setArrayType(makeConstList([200, 202, 10]), type$.JSArray_int);
    B.List_200_202_11 = A._setArrayType(makeConstList([200, 202, 11]), type$.JSArray_int);
    B.List_200_202_12 = A._setArrayType(makeConstList([200, 202, 12]), type$.JSArray_int);
    B.List_200_202_15 = A._setArrayType(makeConstList([200, 202, 15]), type$.JSArray_int);
    B.List_200_202_16 = A._setArrayType(makeConstList([200, 202, 16]), type$.JSArray_int);
    B.List_200_202_17 = A._setArrayType(makeConstList([200, 202, 17]), type$.JSArray_int);
    B.List_200_202_20 = A._setArrayType(makeConstList([200, 202, 20]), type$.JSArray_int);
    B.List_200_202_21 = A._setArrayType(makeConstList([200, 202, 21]), type$.JSArray_int);
    B.List_200_202_22 = A._setArrayType(makeConstList([200, 202, 22]), type$.JSArray_int);
    B.List_200_202_31 = A._setArrayType(makeConstList([200, 202, 31]), type$.JSArray_int);
    B.List_200_202_32 = A._setArrayType(makeConstList([200, 202, 32]), type$.JSArray_int);
    B.List_200_202_33 = A._setArrayType(makeConstList([200, 202, 33]), type$.JSArray_int);
    B.List_200_202_6 = A._setArrayType(makeConstList([200, 202, 6]), type$.JSArray_int);
    B.List_200_202_7 = A._setArrayType(makeConstList([200, 202, 7]), type$.JSArray_int);
    B.List_200_202_8 = A._setArrayType(makeConstList([200, 202, 8]), type$.JSArray_int);
    B.List_200_202_9 = A._setArrayType(makeConstList([200, 202, 9]), type$.JSArray_int);
    B.List_204 = A._setArrayType(makeConstList([204]), type$.JSArray_int);
    B.List_22 = A._setArrayType(makeConstList([22]), type$.JSArray_int);
    B.List_23 = A._setArrayType(makeConstList([23]), type$.JSArray_int);
    B.List_237 = A._setArrayType(makeConstList([237]), type$.JSArray_int);
    B.List_239 = A._setArrayType(makeConstList([239]), type$.JSArray_int);
    B.List_241 = A._setArrayType(makeConstList([241]), type$.JSArray_int);
    B.List_258 = A._setArrayType(makeConstList([258]), type$.JSArray_int);
    B.List_25_1 = A._setArrayType(makeConstList([25, 1]), type$.JSArray_int);
    B.List_28_184 = A._setArrayType(makeConstList([28, 184]), type$.JSArray_int);
    B.List_28_186 = A._setArrayType(makeConstList([28, 186]), type$.JSArray_int);
    B.List_28_189 = A._setArrayType(makeConstList([28, 189]), type$.JSArray_int);
    B.List_29_37 = A._setArrayType(makeConstList([29, 37]), type$.JSArray_int);
    B.SecretWalletEncoding_0 = new A.SecretWalletEncoding(0, "base64");
    B.SecretWalletEncoding_1 = new A.SecretWalletEncoding(1, "json");
    B.SecretWalletEncoding_2 = new A.SecretWalletEncoding(2, "cbor");
    B.List_2LR = A._setArrayType(makeConstList([B.SecretWalletEncoding_0, B.SecretWalletEncoding_1, B.SecretWalletEncoding_2]), A.findType("JSArray<SecretWalletEncoding>"));
    B.List_2No = A._setArrayType(makeConstList(["\u7684", "\u4e00", "\u662f", "\u5728", "\u4e0d", "\u4e86", "\u6709", "\u548c", "\u4eba", "\u8fd9", "\u4e2d", "\u5927", "\u4e3a", "\u4e0a", "\u4e2a", "\u56fd", "\u6211", "\u4ee5", "\u8981", "\u4ed6", "\u65f6", "\u6765", "\u7528", "\u4eec", "\u751f", "\u5230", "\u4f5c", "\u5730", "\u4e8e", "\u51fa", "\u5c31", "\u5206", "\u5bf9", "\u6210", "\u4f1a", "\u53ef", "\u4e3b", "\u53d1", "\u5e74", "\u52a8", "\u540c", "\u5de5", "\u4e5f", "\u80fd", "\u4e0b", "\u8fc7", "\u5b50", "\u8bf4", "\u4ea7", "\u79cd", "\u9762", "\u800c", "\u65b9", "\u540e", "\u591a", "\u5b9a", "\u884c", "\u5b66", "\u6cd5", "\u6240", "\u6c11", "\u5f97", "\u7ecf", "\u5341", "\u4e09", "\u4e4b", "\u8fdb", "\u7740", "\u7b49", "\u90e8", "\u5ea6", "\u5bb6", "\u7535", "\u529b", "\u91cc", "\u5982", "\u6c34", "\u5316", "\u9ad8", "\u81ea", "\u4e8c", "\u7406", "\u8d77", "\u5c0f", "\u7269", "\u73b0", "\u5b9e", "\u52a0", "\u91cf", "\u90fd", "\u4e24", "\u4f53", "\u5236", "\u673a", "\u5f53", "\u4f7f", "\u70b9", "\u4ece", "\u4e1a", "\u672c", "\u53bb", "\u628a", "\u6027", "\u597d", "\u5e94", "\u5f00", "\u5b83", "\u5408", "\u8fd8", "\u56e0", "\u7531", "\u5176", "\u4e9b", "\u7136", "\u524d", "\u5916", "\u5929", "\u653f", "\u56db", "\u65e5", "\u90a3", "\u793e", "\u4e49", "\u4e8b", "\u5e73", "\u5f62", "\u76f8", "\u5168", "\u8868", "\u95f4", "\u6837", "\u4e0e", "\u5173", "\u5404", "\u91cd", "\u65b0", "\u7ebf", "\u5185", "\u6570", "\u6b63", "\u5fc3", "\u53cd", "\u4f60", "\u660e", "\u770b", "\u539f", "\u53c8", "\u4e48", "\u5229", "\u6bd4", "\u6216", "\u4f46", "\u8d28", "\u6c14", "\u7b2c", "\u5411", "\u9053", "\u547d", "\u6b64", "\u53d8", "\u6761", "\u53ea", "\u6ca1", "\u7ed3", "\u89e3", "\u95ee", "\u610f", "\u5efa", "\u6708", "\u516c", "\u65e0", "\u7cfb", "\u519b", "\u5f88", "\u60c5", "\u8005", "\u6700", "\u7acb", "\u4ee3", "\u60f3", "\u5df2", "\u901a", "\u5e76", "\u63d0", "\u76f4", "\u9898", "\u515a", "\u7a0b", "\u5c55", "\u4e94", "\u679c", "\u6599", "\u8c61", "\u5458", "\u9769", "\u4f4d", "\u5165", "\u5e38", "\u6587", "\u603b", "\u6b21", "\u54c1", "\u5f0f", "\u6d3b", "\u8bbe", "\u53ca", "\u7ba1", "\u7279", "\u4ef6", "\u957f", "\u6c42", "\u8001", "\u5934", "\u57fa", "\u8d44", "\u8fb9", "\u6d41", "\u8def", "\u7ea7", "\u5c11", "\u56fe", "\u5c71", "\u7edf", "\u63a5", "\u77e5", "\u8f83", "\u5c06", "\u7ec4", "\u89c1", "\u8ba1", "\u522b", "\u5979", "\u624b", "\u89d2", "\u671f", "\u6839", "\u8bba", "\u8fd0", "\u519c", "\u6307", "\u51e0", "\u4e5d", "\u533a", "\u5f3a", "\u653e", "\u51b3", "\u897f", "\u88ab", "\u5e72", "\u505a", "\u5fc5", "\u6218", "\u5148", "\u56de", "\u5219", "\u4efb", "\u53d6", "\u636e", "\u5904", "\u961f", "\u5357", "\u7ed9", "\u8272", "\u5149", "\u95e8", "\u5373", "\u4fdd", "\u6cbb", "\u5317", "\u9020", "\u767e", "\u89c4", "\u70ed", "\u9886", "\u4e03", "\u6d77", "\u53e3", "\u4e1c", "\u5bfc", "\u5668", "\u538b", "\u5fd7", "\u4e16", "\u91d1", "\u589e", "\u4e89", "\u6d4e", "\u9636", "\u6cb9", "\u601d", "\u672f", "\u6781", "\u4ea4", "\u53d7", "\u8054", "\u4ec0", "\u8ba4", "\u516d", "\u5171", "\u6743", "\u6536", "\u8bc1", "\u6539", "\u6e05", "\u7f8e", "\u518d", "\u91c7", "\u8f6c", "\u66f4", "\u5355", "\u98ce", "\u5207", "\u6253", "\u767d", "\u6559", "\u901f", "\u82b1", "\u5e26", "\u5b89", "\u573a", "\u8eab", "\u8f66", "\u4f8b", "\u771f", "\u52a1", "\u5177", "\u4e07", "\u6bcf", "\u76ee", "\u81f3", "\u8fbe", "\u8d70", "\u79ef", "\u793a", "\u8bae", "\u58f0", "\u62a5", "\u6597", "\u5b8c", "\u7c7b", "\u516b", "\u79bb", "\u534e", "\u540d", "\u786e", "\u624d", "\u79d1", "\u5f20", "\u4fe1", "\u9a6c", "\u8282", "\u8bdd", "\u7c73", "\u6574", "\u7a7a", "\u5143", "\u51b5", "\u4eca", "\u96c6", "\u6e29", "\u4f20", "\u571f", "\u8bb8", "\u6b65", "\u7fa4", "\u5e7f", "\u77f3", "\u8bb0", "\u9700", "\u6bb5", "\u7814", "\u754c", "\u62c9", "\u6797", "\u5f8b", "\u53eb", "\u4e14", "\u7a76", "\u89c2", "\u8d8a", "\u7ec7", "\u88c5", "\u5f71", "\u7b97", "\u4f4e", "\u6301", "\u97f3", "\u4f17", "\u4e66", "\u5e03", "\u590d", "\u5bb9", "\u513f", "\u987b", "\u9645", "\u5546", "\u975e", "\u9a8c", "\u8fde", "\u65ad", "\u6df1", "\u96be", "\u8fd1", "\u77ff", "\u5343", "\u5468", "\u59d4", "\u7d20", "\u6280", "\u5907", "\u534a", "\u529e", "\u9752", "\u7701", "\u5217", "\u4e60", "\u54cd", "\u7ea6", "\u652f", "\u822c", "\u53f2", "\u611f", "\u52b3", "\u4fbf", "\u56e2", "\u5f80", "\u9178", "\u5386", "\u5e02", "\u514b", "\u4f55", "\u9664", "\u6d88", "\u6784", "\u5e9c", "\u79f0", "\u592a", "\u51c6", "\u7cbe", "\u503c", "\u53f7", "\u7387", "\u65cf", "\u7ef4", "\u5212", "\u9009", "\u6807", "\u5199", "\u5b58", "\u5019", "\u6bdb", "\u4eb2", "\u5feb", "\u6548", "\u65af", "\u9662", "\u67e5", "\u6c5f", "\u578b", "\u773c", "\u738b", "\u6309", "\u683c", "\u517b", "\u6613", "\u7f6e", "\u6d3e", "\u5c42", "\u7247", "\u59cb", "\u5374", "\u4e13", "\u72b6", "\u80b2", "\u5382", "\u4eac", "\u8bc6", "\u9002", "\u5c5e", "\u5706", "\u5305", "\u706b", "\u4f4f", "\u8c03", "\u6ee1", "\u53bf", "\u5c40", "\u7167", "\u53c2", "\u7ea2", "\u7ec6", "\u5f15", "\u542c", "\u8be5", "\u94c1", "\u4ef7", "\u4e25", "\u9996", "\u5e95", "\u6db2", "\u5b98", "\u5fb7", "\u968f", "\u75c5", "\u82cf", "\u5931", "\u5c14", "\u6b7b", "\u8bb2", "\u914d", "\u5973", "\u9ec4", "\u63a8", "\u663e", "\u8c08", "\u7f6a", "\u795e", "\u827a", "\u5462", "\u5e2d", "\u542b", "\u4f01", "\u671b", "\u5bc6", "\u6279", "\u8425", "\u9879", "\u9632", "\u4e3e", "\u7403", "\u82f1", "\u6c27", "\u52bf", "\u544a", "\u674e", "\u53f0", "\u843d", "\u6728", "\u5e2e", "\u8f6e", "\u7834", "\u4e9a", "\u5e08", "\u56f4", "\u6ce8", "\u8fdc", "\u5b57", "\u6750", "\u6392", "\u4f9b", "\u6cb3", "\u6001", "\u5c01", "\u53e6", "\u65bd", "\u51cf", "\u6811", "\u6eb6", "\u600e", "\u6b62", "\u6848", "\u8a00", "\u58eb", "\u5747", "\u6b66", "\u56fa", "\u53f6", "\u9c7c", "\u6ce2", "\u89c6", "\u4ec5", "\u8d39", "\u7d27", "\u7231", "\u5de6", "\u7ae0", "\u65e9", "\u671d", "\u5bb3", "\u7eed", "\u8f7b", "\u670d", "\u8bd5", "\u98df", "\u5145", "\u5175", "\u6e90", "\u5224", "\u62a4", "\u53f8", "\u8db3", "\u67d0", "\u7ec3", "\u5dee", "\u81f4", "\u677f", "\u7530", "\u964d", "\u9ed1", "\u72af", "\u8d1f", "\u51fb", "\u8303", "\u7ee7", "\u5174", "\u4f3c", "\u4f59", "\u575a", "\u66f2", "\u8f93", "\u4fee", "\u6545", "\u57ce", "\u592b", "\u591f", "\u9001", "\u7b14", "\u8239", "\u5360", "\u53f3", "\u8d22", "\u5403", "\u5bcc", "\u6625", "\u804c", "\u89c9", "\u6c49", "\u753b", "\u529f", "\u5df4", "\u8ddf", "\u867d", "\u6742", "\u98de", "\u68c0", "\u5438", "\u52a9", "\u5347", "\u9633", "\u4e92", "\u521d", "\u521b", "\u6297", "\u8003", "\u6295", "\u574f", "\u7b56", "\u53e4", "\u5f84", "\u6362", "\u672a", "\u8dd1", "\u7559", "\u94a2", "\u66fe", "\u7aef", "\u8d23", "\u7ad9", "\u7b80", "\u8ff0", "\u94b1", "\u526f", "\u5c3d", "\u5e1d", "\u5c04", "\u8349", "\u51b2", "\u627f", "\u72ec", "\u4ee4", "\u9650", "\u963f", "\u5ba3", "\u73af", "\u53cc", "\u8bf7", "\u8d85", "\u5fae", "\u8ba9", "\u63a7", "\u5dde", "\u826f", "\u8f74", "\u627e", "\u5426", "\u7eaa", "\u76ca", "\u4f9d", "\u4f18", "\u9876", "\u7840", "\u8f7d", "\u5012", "\u623f", "\u7a81", "\u5750", "\u7c89", "\u654c", "\u7565", "\u5ba2", "\u8881", "\u51b7", "\u80dc", "\u7edd", "\u6790", "\u5757", "\u5242", "\u6d4b", "\u4e1d", "\u534f", "\u8bc9", "\u5ff5", "\u9648", "\u4ecd", "\u7f57", "\u76d0", "\u53cb", "\u6d0b", "\u9519", "\u82e6", "\u591c", "\u5211", "\u79fb", "\u9891", "\u9010", "\u9760", "\u6df7", "\u6bcd", "\u77ed", "\u76ae", "\u7ec8", "\u805a", "\u6c7d", "\u6751", "\u4e91", "\u54ea", "\u65e2", "\u8ddd", "\u536b", "\u505c", "\u70c8", "\u592e", "\u5bdf", "\u70e7", "\u8fc5", "\u5883", "\u82e5", "\u5370", "\u6d32", "\u523b", "\u62ec", "\u6fc0", "\u5b54", "\u641e", "\u751a", "\u5ba4", "\u5f85", "\u6838", "\u6821", "\u6563", "\u4fb5", "\u5427", "\u7532", "\u6e38", "\u4e45", "\u83dc", "\u5473", "\u65e7", "\u6a21", "\u6e56", "\u8d27", "\u635f", "\u9884", "\u963b", "\u6beb", "\u666e", "\u7a33", "\u4e59", "\u5988", "\u690d", "\u606f", "\u6269", "\u94f6", "\u8bed", "\u6325", "\u9152", "\u5b88", "\u62ff", "\u5e8f", "\u7eb8", "\u533b", "\u7f3a", "\u96e8", "\u5417", "\u9488", "\u5218", "\u554a", "\u6025", "\u5531", "\u8bef", "\u8bad", "\u613f", "\u5ba1", "\u9644", "\u83b7", "\u8336", "\u9c9c", "\u7cae", "\u65a4", "\u5b69", "\u8131", "\u786b", "\u80a5", "\u5584", "\u9f99", "\u6f14", "\u7236", "\u6e10", "\u8840", "\u6b22", "\u68b0", "\u638c", "\u6b4c", "\u6c99", "\u521a", "\u653b", "\u8c13", "\u76fe", "\u8ba8", "\u665a", "\u7c92", "\u4e71", "\u71c3", "\u77db", "\u4e4e", "\u6740", "\u836f", "\u5b81", "\u9c81", "\u8d35", "\u949f", "\u7164", "\u8bfb", "\u73ed", "\u4f2f", "\u9999", "\u4ecb", "\u8feb", "\u53e5", "\u4e30", "\u57f9", "\u63e1", "\u5170", "\u62c5", "\u5f26", "\u86cb", "\u6c89", "\u5047", "\u7a7f", "\u6267", "\u7b54", "\u4e50", "\u8c01", "\u987a", "\u70df", "\u7f29", "\u5f81", "\u8138", "\u559c", "\u677e", "\u811a", "\u56f0", "\u5f02", "\u514d", "\u80cc", "\u661f", "\u798f", "\u4e70", "\u67d3", "\u4e95", "\u6982", "\u6162", "\u6015", "\u78c1", "\u500d", "\u7956", "\u7687", "\u4fc3", "\u9759", "\u8865", "\u8bc4", "\u7ffb", "\u8089", "\u8df5", "\u5c3c", "\u8863", "\u5bbd", "\u626c", "\u68c9", "\u5e0c", "\u4f24", "\u64cd", "\u5782", "\u79cb", "\u5b9c", "\u6c22", "\u5957", "\u7763", "\u632f", "\u67b6", "\u4eae", "\u672b", "\u5baa", "\u5e86", "\u7f16", "\u725b", "\u89e6", "\u6620", "\u96f7", "\u9500", "\u8bd7", "\u5ea7", "\u5c45", "\u6293", "\u88c2", "\u80de", "\u547c", "\u5a18", "\u666f", "\u5a01", "\u7eff", "\u6676", "\u539a", "\u76df", "\u8861", "\u9e21", "\u5b59", "\u5ef6", "\u5371", "\u80f6", "\u5c4b", "\u4e61", "\u4e34", "\u9646", "\u987e", "\u6389", "\u5440", "\u706f", "\u5c81", "\u63aa", "\u675f", "\u8010", "\u5267", "\u7389", "\u8d75", "\u8df3", "\u54e5", "\u5b63", "\u8bfe", "\u51ef", "\u80e1", "\u989d", "\u6b3e", "\u7ecd", "\u5377", "\u9f50", "\u4f1f", "\u84b8", "\u6b96", "\u6c38", "\u5b97", "\u82d7", "\u5ddd", "\u7089", "\u5ca9", "\u5f31", "\u96f6", "\u6768", "\u594f", "\u6cbf", "\u9732", "\u6746", "\u63a2", "\u6ed1", "\u9547", "\u996d", "\u6d53", "\u822a", "\u6000", "\u8d76", "\u5e93", "\u593a", "\u4f0a", "\u7075", "\u7a0e", "\u9014", "\u706d", "\u8d5b", "\u5f52", "\u53ec", "\u9f13", "\u64ad", "\u76d8", "\u88c1", "\u9669", "\u5eb7", "\u552f", "\u5f55", "\u83cc", "\u7eaf", "\u501f", "\u7cd6", "\u76d6", "\u6a2a", "\u7b26", "\u79c1", "\u52aa", "\u5802", "\u57df", "\u67aa", "\u6da6", "\u5e45", "\u54c8", "\u7adf", "\u719f", "\u866b", "\u6cfd", "\u8111", "\u58e4", "\u78b3", "\u6b27", "\u904d", "\u4fa7", "\u5be8", "\u6562", "\u5f7b", "\u8651", "\u659c", "\u8584", "\u5ead", "\u7eb3", "\u5f39", "\u9972", "\u4f38", "\u6298", "\u9ea6", "\u6e7f", "\u6697", "\u8377", "\u74e6", "\u585e", "\u5e8a", "\u7b51", "\u6076", "\u6237", "\u8bbf", "\u5854", "\u5947", "\u900f", "\u6881", "\u5200", "\u65cb", "\u8ff9", "\u5361", "\u6c2f", "\u9047", "\u4efd", "\u6bd2", "\u6ce5", "\u9000", "\u6d17", "\u6446", "\u7070", "\u5f69", "\u5356", "\u8017", "\u590f", "\u62e9", "\u5fd9", "\u94dc", "\u732e", "\u786c", "\u4e88", "\u7e41", "\u5708", "\u96ea", "\u51fd", "\u4ea6", "\u62bd", "\u7bc7", "\u9635", "\u9634", "\u4e01", "\u5c3a", "\u8ffd", "\u5806", "\u96c4", "\u8fce", "\u6cdb", "\u7238", "\u697c", "\u907f", "\u8c0b", "\u5428", "\u91ce", "\u732a", "\u65d7", "\u7d2f", "\u504f", "\u5178", "\u9986", "\u7d22", "\u79e6", "\u8102", "\u6f6e", "\u7237", "\u8c46", "\u5ffd", "\u6258", "\u60ca", "\u5851", "\u9057", "\u6108", "\u6731", "\u66ff", "\u7ea4", "\u7c97", "\u503e", "\u5c1a", "\u75db", "\u695a", "\u8c22", "\u594b", "\u8d2d", "\u78e8", "\u541b", "\u6c60", "\u65c1", "\u788e", "\u9aa8", "\u76d1", "\u6355", "\u5f1f", "\u66b4", "\u5272", "\u8d2f", "\u6b8a", "\u91ca", "\u8bcd", "\u4ea1", "\u58c1", "\u987f", "\u5b9d", "\u5348", "\u5c18", "\u95fb", "\u63ed", "\u70ae", "\u6b8b", "\u51ac", "\u6865", "\u5987", "\u8b66", "\u7efc", "\u62db", "\u5434", "\u4ed8", "\u6d6e", "\u906d", "\u5f90", "\u60a8", "\u6447", "\u8c37", "\u8d5e", "\u7bb1", "\u9694", "\u8ba2", "\u7537", "\u5439", "\u56ed", "\u7eb7", "\u5510", "\u8d25", "\u5b8b", "\u73bb", "\u5de8", "\u8015", "\u5766", "\u8363", "\u95ed", "\u6e7e", "\u952e", "\u51e1", "\u9a7b", "\u9505", "\u6551", "\u6069", "\u5265", "\u51dd", "\u78b1", "\u9f7f", "\u622a", "\u70bc", "\u9ebb", "\u7eba", "\u7981", "\u5e9f", "\u76db", "\u7248", "\u7f13", "\u51c0", "\u775b", "\u660c", "\u5a5a", "\u6d89", "\u7b52", "\u5634", "\u63d2", "\u5cb8", "\u6717", "\u5e84", "\u8857", "\u85cf", "\u59d1", "\u8d38", "\u8150", "\u5974", "\u5566", "\u60ef", "\u4e58", "\u4f19", "\u6062", "\u5300", "\u7eb1", "\u624e", "\u8fa9", "\u8033", "\u5f6a", "\u81e3", "\u4ebf", "\u7483", "\u62b5", "\u8109", "\u79c0", "\u8428", "\u4fc4", "\u7f51", "\u821e", "\u5e97", "\u55b7", "\u7eb5", "\u5bf8", "\u6c57", "\u6302", "\u6d2a", "\u8d3a", "\u95ea", "\u67ec", "\u7206", "\u70ef", "\u6d25", "\u7a3b", "\u5899", "\u8f6f", "\u52c7", "\u50cf", "\u6eda", "\u5398", "\u8499", "\u82b3", "\u80af", "\u5761", "\u67f1", "\u8361", "\u817f", "\u4eea", "\u65c5", "\u5c3e", "\u8f67", "\u51b0", "\u8d21", "\u767b", "\u9ece", "\u524a", "\u94bb", "\u52d2", "\u9003", "\u969c", "\u6c28", "\u90ed", "\u5cf0", "\u5e01", "\u6e2f", "\u4f0f", "\u8f68", "\u4ea9", "\u6bd5", "\u64e6", "\u83ab", "\u523a", "\u6d6a", "\u79d8", "\u63f4", "\u682a", "\u5065", "\u552e", "\u80a1", "\u5c9b", "\u7518", "\u6ce1", "\u7761", "\u7ae5", "\u94f8", "\u6c64", "\u9600", "\u4f11", "\u6c47", "\u820d", "\u7267", "\u7ed5", "\u70b8", "\u54f2", "\u78f7", "\u7ee9", "\u670b", "\u6de1", "\u5c16", "\u542f", "\u9677", "\u67f4", "\u5448", "\u5f92", "\u989c", "\u6cea", "\u7a0d", "\u5fd8", "\u6cf5", "\u84dd", "\u62d6", "\u6d1e", "\u6388", "\u955c", "\u8f9b", "\u58ee", "\u950b", "\u8d2b", "\u865a", "\u5f2f", "\u6469", "\u6cf0", "\u5e7c", "\u5ef7", "\u5c0a", "\u7a97", "\u7eb2", "\u5f04", "\u96b6", "\u7591", "\u6c0f", "\u5bab", "\u59d0", "\u9707", "\u745e", "\u602a", "\u5c24", "\u7434", "\u5faa", "\u63cf", "\u819c", "\u8fdd", "\u5939", "\u8170", "\u7f18", "\u73e0", "\u7a77", "\u68ee", "\u679d", "\u7af9", "\u6c9f", "\u50ac", "\u7ef3", "\u5fc6", "\u90a6", "\u5269", "\u5e78", "\u6d46", "\u680f", "\u62e5", "\u7259", "\u8d2e", "\u793c", "\u6ee4", "\u94a0", "\u7eb9", "\u7f62", "\u62cd", "\u54b1", "\u558a", "\u8896", "\u57c3", "\u52e4", "\u7f5a", "\u7126", "\u6f5c", "\u4f0d", "\u58a8", "\u6b32", "\u7f1d", "\u59d3", "\u520a", "\u9971", "\u4eff", "\u5956", "\u94dd", "\u9b3c", "\u4e3d", "\u8de8", "\u9ed8", "\u6316", "\u94fe", "\u626b", "\u559d", "\u888b", "\u70ad", "\u6c61", "\u5e55", "\u8bf8", "\u5f27", "\u52b1", "\u6885", "\u5976", "\u6d01", "\u707e", "\u821f", "\u9274", "\u82ef", "\u8bbc", "\u62b1", "\u6bc1", "\u61c2", "\u5bd2", "\u667a", "\u57d4", "\u5bc4", "\u5c4a", "\u8dc3", "\u6e21", "\u6311", "\u4e39", "\u8270", "\u8d1d", "\u78b0", "\u62d4", "\u7239", "\u6234", "\u7801", "\u68a6", "\u82bd", "\u7194", "\u8d64", "\u6e14", "\u54ed", "\u656c", "\u9897", "\u5954", "\u94c5", "\u4ef2", "\u864e", "\u7a00", "\u59b9", "\u4e4f", "\u73cd", "\u7533", "\u684c", "\u9075", "\u5141", "\u9686", "\u87ba", "\u4ed3", "\u9b4f", "\u9510", "\u6653", "\u6c2e", "\u517c", "\u9690", "\u788d", "\u8d6b", "\u62e8", "\u5fe0", "\u8083", "\u7f38", "\u7275", "\u62a2", "\u535a", "\u5de7", "\u58f3", "\u5144", "\u675c", "\u8baf", "\u8bda", "\u78a7", "\u7965", "\u67ef", "\u9875", "\u5de1", "\u77e9", "\u60b2", "\u704c", "\u9f84", "\u4f26", "\u7968", "\u5bfb", "\u6842", "\u94fa", "\u5723", "\u6050", "\u6070", "\u90d1", "\u8da3", "\u62ac", "\u8352", "\u817e", "\u8d34", "\u67d4", "\u6ef4", "\u731b", "\u9614", "\u8f86", "\u59bb", "\u586b", "\u64a4", "\u50a8", "\u7b7e", "\u95f9", "\u6270", "\u7d2b", "\u7802", "\u9012", "\u620f", "\u540a", "\u9676", "\u4f10", "\u5582", "\u7597", "\u74f6", "\u5a46", "\u629a", "\u81c2", "\u6478", "\u5fcd", "\u867e", "\u8721", "\u90bb", "\u80f8", "\u5de9", "\u6324", "\u5076", "\u5f03", "\u69fd", "\u52b2", "\u4e73", "\u9093", "\u5409", "\u4ec1", "\u70c2", "\u7816", "\u79df", "\u4e4c", "\u8230", "\u4f34", "\u74dc", "\u6d45", "\u4e19", "\u6682", "\u71e5", "\u6a61", "\u67f3", "\u8ff7", "\u6696", "\u724c", "\u79e7", "\u80c6", "\u8be6", "\u7c27", "\u8e0f", "\u74f7", "\u8c31", "\u5446", "\u5bbe", "\u7cca", "\u6d1b", "\u8f89", "\u6124", "\u7ade", "\u9699", "\u6012", "\u7c98", "\u4e43", "\u7eea", "\u80a9", "\u7c4d", "\u654f", "\u6d82", "\u7199", "\u7686", "\u4fa6", "\u60ac", "\u6398", "\u4eab", "\u7ea0", "\u9192", "\u72c2", "\u9501", "\u6dc0", "\u6068", "\u7272", "\u9738", "\u722c", "\u8d4f", "\u9006", "\u73a9", "\u9675", "\u795d", "\u79d2", "\u6d59", "\u8c8c", "\u5f79", "\u5f7c", "\u6089", "\u9e2d", "\u8d8b", "\u51e4", "\u6668", "\u755c", "\u8f88", "\u79e9", "\u5375", "\u7f72", "\u68af", "\u708e", "\u6ee9", "\u68cb", "\u9a71", "\u7b5b", "\u5ce1", "\u5192", "\u5565", "\u5bff", "\u8bd1", "\u6d78", "\u6cc9", "\u5e3d", "\u8fdf", "\u7845", "\u7586", "\u8d37", "\u6f0f", "\u7a3f", "\u51a0", "\u5ae9", "\u80c1", "\u82af", "\u7262", "\u53db", "\u8680", "\u5965", "\u9e23", "\u5cad", "\u7f8a", "\u51ed", "\u4e32", "\u5858", "\u7ed8", "\u9175", "\u878d", "\u76c6", "\u9521", "\u5e99", "\u7b79", "\u51bb", "\u8f85", "\u6444", "\u88ad", "\u7b4b", "\u62d2", "\u50da", "\u65f1", "\u94be", "\u9e1f", "\u6f06", "\u6c88", "\u7709", "\u758f", "\u6dfb", "\u68d2", "\u7a57", "\u785d", "\u97e9", "\u903c", "\u626d", "\u4fa8", "\u51c9", "\u633a", "\u7897", "\u683d", "\u7092", "\u676f", "\u60a3", "\u998f", "\u529d", "\u8c6a", "\u8fbd", "\u52c3", "\u9e3f", "\u65e6", "\u540f", "\u62dc", "\u72d7", "\u57cb", "\u8f8a", "\u63a9", "\u996e", "\u642c", "\u9a82", "\u8f9e", "\u52fe", "\u6263", "\u4f30", "\u848b", "\u7ed2", "\u96fe", "\u4e08", "\u6735", "\u59c6", "\u62df", "\u5b87", "\u8f91", "\u9655", "\u96d5", "\u507f", "\u84c4", "\u5d07", "\u526a", "\u5021", "\u5385", "\u54ac", "\u9a76", "\u85af", "\u5237", "\u65a5", "\u756a", "\u8d4b", "\u5949", "\u4f5b", "\u6d47", "\u6f2b", "\u66fc", "\u6247", "\u9499", "\u6843", "\u6276", "\u4ed4", "\u8fd4", "\u4fd7", "\u4e8f", "\u8154", "\u978b", "\u68f1", "\u8986", "\u6846", "\u6084", "\u53d4", "\u649e", "\u9a97", "\u52d8", "\u65fa", "\u6cb8", "\u5b64", "\u5410", "\u5b5f", "\u6e20", "\u5c48", "\u75be", "\u5999", "\u60dc", "\u4ef0", "\u72e0", "\u80c0", "\u8c10", "\u629b", "\u9709", "\u6851", "\u5c97", "\u561b", "\u8870", "\u76d7", "\u6e17", "\u810f", "\u8d56", "\u6d8c", "\u751c", "\u66f9", "\u9605", "\u808c", "\u54e9", "\u5389", "\u70c3", "\u7eac", "\u6bc5", "\u6628", "\u4f2a", "\u75c7", "\u716e", "\u53f9", "\u9489", "\u642d", "\u830e", "\u7b3c", "\u9177", "\u5077", "\u5f13", "\u9525", "\u6052", "\u6770", "\u5751", "\u9f3b", "\u7ffc", "\u7eb6", "\u53d9", "\u72f1", "\u902e", "\u7f50", "\u7edc", "\u68da", "\u6291", "\u81a8", "\u852c", "\u5bfa", "\u9aa4", "\u7a46", "\u51b6", "\u67af", "\u518c", "\u5c38", "\u51f8", "\u7ec5", "\u576f", "\u727a", "\u7130", "\u8f70", "\u6b23", "\u664b", "\u7626", "\u5fa1", "\u952d", "\u9526", "\u4e27", "\u65ec", "\u953b", "\u5784", "\u641c", "\u6251", "\u9080", "\u4ead", "\u916f", "\u8fc8", "\u8212", "\u8106", "\u9176", "\u95f2", "\u5fe7", "\u915a", "\u987d", "\u7fbd", "\u6da8", "\u5378", "\u4ed7", "\u966a", "\u8f9f", "\u60e9", "\u676d", "\u59da", "\u809a", "\u6349", "\u98d8", "\u6f02", "\u6606", "\u6b3a", "\u543e", "\u90ce", "\u70f7", "\u6c41", "\u5475", "\u9970", "\u8427", "\u96c5", "\u90ae", "\u8fc1", "\u71d5", "\u6492", "\u59fb", "\u8d74", "\u5bb4", "\u70e6", "\u503a", "\u5e10", "\u6591", "\u94c3", "\u65e8", "\u9187", "\u8463", "\u997c", "\u96cf", "\u59ff", "\u62cc", "\u5085", "\u8179", "\u59a5", "\u63c9", "\u8d24", "\u62c6", "\u6b6a", "\u8461", "\u80fa", "\u4e22", "\u6d69", "\u5fbd", "\u6602", "\u57ab", "\u6321", "\u89c8", "\u8d2a", "\u6170", "\u7f34", "\u6c6a", "\u614c", "\u51af", "\u8bfa", "\u59dc", "\u8c0a", "\u51f6", "\u52a3", "\u8bec", "\u8000", "\u660f", "\u8eba", "\u76c8", "\u9a91", "\u4e54", "\u6eaa", "\u4e1b", "\u5362", "\u62b9", "\u95f7", "\u54a8", "\u522e", "\u9a7e", "\u7f06", "\u609f", "\u6458", "\u94d2", "\u63b7", "\u9887", "\u5e7b", "\u67c4", "\u60e0", "\u60e8", "\u4f73", "\u4ec7", "\u814a", "\u7a9d", "\u6da4", "\u5251", "\u77a7", "\u5821", "\u6cfc", "\u8471", "\u7f69", "\u970d", "\u635e", "\u80ce", "\u82cd", "\u6ee8", "\u4fe9", "\u6345", "\u6e58", "\u780d", "\u971e", "\u90b5", "\u8404", "\u75af", "\u6dee", "\u9042", "\u718a", "\u7caa", "\u70d8", "\u5bbf", "\u6863", "\u6208", "\u9a73", "\u5ac2", "\u88d5", "\u5f99", "\u7bad", "\u6350", "\u80a0", "\u6491", "\u6652", "\u8fa8", "\u6bbf", "\u83b2", "\u644a", "\u6405", "\u9171", "\u5c4f", "\u75ab", "\u54c0", "\u8521", "\u5835", "\u6cab", "\u76b1", "\u7545", "\u53e0", "\u9601", "\u83b1", "\u6572", "\u8f96", "\u94a9", "\u75d5", "\u575d", "\u5df7", "\u997f", "\u7978", "\u4e18", "\u7384", "\u6e9c", "\u66f0", "\u903b", "\u5f6d", "\u5c1d", "\u537f", "\u59a8", "\u8247", "\u541e", "\u97e6", "\u6028", "\u77ee", "\u6b47"]), type$.JSArray_String);
    B.List_2_24_4_26 = A._setArrayType(makeConstList([2, 24, 4, 26]), type$.JSArray_int);
    B.List_2bH = A._setArrayType(makeConstList([1, 32898, 32906, 2147516416, 32907, 2147483649, 2147516545, 32777, 138, 136, 2147516425, 2147483658, 2147516555, 139, 32905, 32771, 32770, 128, 32778, 2147483658, 2147516545, 32896, 2147483649, 2147516424]), type$.JSArray_dynamic);
    B.List_2jN = A._setArrayType(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.SubstrateCoins_acalaEd25519 = new A.SubstrateCoins("acalaEd25519");
    B.SubstrateCoins_acalaSecp256k1 = new A.SubstrateCoins("acalaSecp256k1");
    B.SubstrateCoins_acalaSr25519 = new A.SubstrateCoins("acalaSr25519");
    B.SubstrateCoins_bifrostEd25519 = new A.SubstrateCoins("bifrostEd25519");
    B.SubstrateCoins_bifrostSecp256k1 = new A.SubstrateCoins("bifrostSecp256k1");
    B.SubstrateCoins_bifrostSr25519 = new A.SubstrateCoins("bifrostSr25519");
    B.SubstrateCoins_chainxEd25519 = new A.SubstrateCoins("chainxEd25519");
    B.SubstrateCoins_chainxSecp256k1 = new A.SubstrateCoins("chainxSecp256k1");
    B.SubstrateCoins_chainxSr25519 = new A.SubstrateCoins("chainxSr25519");
    B.SubstrateCoins_edgewareEd25519 = new A.SubstrateCoins("edgewareEd25519");
    B.SubstrateCoins_edgewareSecp256k1 = new A.SubstrateCoins("edgewareSecp256k1");
    B.SubstrateCoins_edgewareSr25519 = new A.SubstrateCoins("edgewareSr25519");
    B.SubstrateCoins_genericEd25519 = new A.SubstrateCoins("genericEd25519");
    B.SubstrateCoins_genericSecp256k1 = new A.SubstrateCoins("genericSecp256k1");
    B.SubstrateCoins_genericSr25519 = new A.SubstrateCoins("genericSr25519");
    B.SubstrateCoins_karuraEd25519 = new A.SubstrateCoins("karuraEd25519");
    B.SubstrateCoins_karuraSecp256k1 = new A.SubstrateCoins("karuraSecp256k1");
    B.SubstrateCoins_karuraSr25519 = new A.SubstrateCoins("karuraSr25519");
    B.SubstrateCoins_kusamaEd25519 = new A.SubstrateCoins("kusamaEd25519");
    B.SubstrateCoins_kusamaSecp256k1 = new A.SubstrateCoins("kusamaSecp256k1");
    B.SubstrateCoins_kusamaSr25519 = new A.SubstrateCoins("kusamaSr25519");
    B.SubstrateCoins_moonbeamEd25519 = new A.SubstrateCoins("moonbeamEd25519");
    B.SubstrateCoins_moonbeamSecp256k1 = new A.SubstrateCoins("moonbeamSecp256k1");
    B.SubstrateCoins_moonbeamSr25519 = new A.SubstrateCoins("moonbeamSr25519");
    B.SubstrateCoins_moonriverEd25519 = new A.SubstrateCoins("moonriverEd25519");
    B.SubstrateCoins_moonriverSecp256k1 = new A.SubstrateCoins("moonriverSecp256k1");
    B.SubstrateCoins_moonriverSr25519 = new A.SubstrateCoins("moonriverSr25519");
    B.SubstrateCoins_phalaEd25519 = new A.SubstrateCoins("phalaEd25519");
    B.SubstrateCoins_phalaSecp256k1 = new A.SubstrateCoins("phalaSecp256k1");
    B.SubstrateCoins_phalaSr25519 = new A.SubstrateCoins("phalaSr25519");
    B.SubstrateCoins_plasmEd25519 = new A.SubstrateCoins("plasmEd25519");
    B.SubstrateCoins_plasmSecp256k1 = new A.SubstrateCoins("plasmSecp256k1");
    B.SubstrateCoins_plasmSr25519 = new A.SubstrateCoins("plasmSr25519");
    B.SubstrateCoins_polkadotEd25519 = new A.SubstrateCoins("polkadotEd25519");
    B.SubstrateCoins_polkadotSecp256k1 = new A.SubstrateCoins("polkadotSecp256k1");
    B.SubstrateCoins_polkadotSr25519 = new A.SubstrateCoins("polkadotSr25519");
    B.SubstrateCoins_soraEd25519 = new A.SubstrateCoins("soraEd25519");
    B.SubstrateCoins_soraSecp256k1 = new A.SubstrateCoins("soraSecp256k1");
    B.SubstrateCoins_soraSr25519 = new A.SubstrateCoins("soraSr25519");
    B.SubstrateCoins_stafiEd25519 = new A.SubstrateCoins("stafiEd25519");
    B.SubstrateCoins_stafiSecp256k1 = new A.SubstrateCoins("stafiSecp256k1");
    B.SubstrateCoins_stafiSr25519 = new A.SubstrateCoins("stafiSr25519");
    B.List_2lW = A._setArrayType(makeConstList([B.SubstrateCoins_acalaEd25519, B.SubstrateCoins_acalaSecp256k1, B.SubstrateCoins_acalaSr25519, B.SubstrateCoins_bifrostEd25519, B.SubstrateCoins_bifrostSecp256k1, B.SubstrateCoins_bifrostSr25519, B.SubstrateCoins_chainxEd25519, B.SubstrateCoins_chainxSecp256k1, B.SubstrateCoins_chainxSr25519, B.SubstrateCoins_edgewareEd25519, B.SubstrateCoins_edgewareSecp256k1, B.SubstrateCoins_edgewareSr25519, B.SubstrateCoins_genericEd25519, B.SubstrateCoins_genericSecp256k1, B.SubstrateCoins_genericSr25519, B.SubstrateCoins_karuraEd25519, B.SubstrateCoins_karuraSecp256k1, B.SubstrateCoins_karuraSr25519, B.SubstrateCoins_kusamaEd25519, B.SubstrateCoins_kusamaSecp256k1, B.SubstrateCoins_kusamaSr25519, B.SubstrateCoins_moonbeamEd25519, B.SubstrateCoins_moonbeamSecp256k1, B.SubstrateCoins_moonbeamSr25519, B.SubstrateCoins_moonriverEd25519, B.SubstrateCoins_moonriverSecp256k1, B.SubstrateCoins_moonriverSr25519, B.SubstrateCoins_phalaEd25519, B.SubstrateCoins_phalaSecp256k1, B.SubstrateCoins_phalaSr25519, B.SubstrateCoins_plasmEd25519, B.SubstrateCoins_plasmSecp256k1, B.SubstrateCoins_plasmSr25519, B.SubstrateCoins_polkadotEd25519, B.SubstrateCoins_polkadotSecp256k1, B.SubstrateCoins_polkadotSr25519, B.SubstrateCoins_soraEd25519, B.SubstrateCoins_soraSecp256k1, B.SubstrateCoins_soraSr25519, B.SubstrateCoins_stafiEd25519, B.SubstrateCoins_stafiSecp256k1, B.SubstrateCoins_stafiSr25519]), A.findType("JSArray<SubstrateCoins>"));
    B.List_2yZ = A._setArrayType(makeConstList([4089235720, 1779033703, 2227873595, 3144134277, 4271175723, 1013904242, 1595750129, 2773480762, 2917565137, 1359893119, 725511199, 2600822924, 4215389547, 528734635, 327033209, 1541459225]), type$.JSArray_dynamic);
    B.List_3 = A._setArrayType(makeConstList([3]), type$.JSArray_int);
    B.List_30 = A._setArrayType(makeConstList([30]), type$.JSArray_int);
    B.List_32 = A._setArrayType(makeConstList([32]), type$.JSArray_int);
    B.List_32_100 = A._setArrayType(makeConstList([32, 100]), type$.JSArray_int);
    B.List_32_105 = A._setArrayType(makeConstList([32, 105]), type$.JSArray_int);
    B.List_32_110 = A._setArrayType(makeConstList([32, 110]), type$.JSArray_int);
    B.List_33_1 = A._setArrayType(makeConstList([33, 1]), type$.JSArray_int);
    B.List_35 = A._setArrayType(makeConstList([35]), type$.JSArray_int);
    B.List_4 = A._setArrayType(makeConstList([4]), type$.JSArray_int);
    B.List_42A = A._setArrayType(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_48 = A._setArrayType(makeConstList([48]), type$.JSArray_int);
    B.List_4AN = A._setArrayType(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.TxOutTargetType_TxoutToScript_0 = new A.TxOutTargetType("TxoutToScript", 0);
    B.TxOutTargetType_TxoutToScriptHash_1 = new A.TxOutTargetType("TxoutToScriptHash", 1);
    B.TxOutTargetType_TxoutToKey_2 = new A.TxOutTargetType("TxoutToKey", 2);
    B.TxOutTargetType_TxoutToTaggedKey_3 = new A.TxOutTargetType("TxoutToTaggedKey", 3);
    B.List_4YB = A._setArrayType(makeConstList([B.TxOutTargetType_TxoutToScript_0, B.TxOutTargetType_TxoutToScriptHash_1, B.TxOutTargetType_TxoutToKey_2, B.TxOutTargetType_TxoutToTaggedKey_3]), A.findType("JSArray<TxOutTargetType>"));
    B.List_4_147 = A._setArrayType(makeConstList([4, 147]), type$.JSArray_int);
    B.List_5 = A._setArrayType(makeConstList([5]), type$.JSArray_int);
    B.List_50 = A._setArrayType(makeConstList([50]), type$.JSArray_int);
    B.List_50_6 = A._setArrayType(makeConstList([50, 6]), type$.JSArray_int);
    B.List_50_7 = A._setArrayType(makeConstList([50, 7]), type$.JSArray_int);
    B.List_55 = A._setArrayType(makeConstList([55]), type$.JSArray_int);
    B.List_56 = A._setArrayType(makeConstList([56]), type$.JSArray_int);
    B.List_58 = A._setArrayType(makeConstList([58]), type$.JSArray_int);
    B.List_5_68 = A._setArrayType(makeConstList([5, 68]), type$.JSArray_int);
    B.MoneroTxinType_TxinGen_255 = new A.MoneroTxinType("TxinGen", 255);
    B.MoneroTxinType_TxinToScript_0 = new A.MoneroTxinType("TxinToScript", 0);
    B.MoneroTxinType_TxinToScriptHash_1 = new A.MoneroTxinType("TxinToScriptHash", 1);
    B.MoneroTxinType_TxinToKey_2 = new A.MoneroTxinType("TxinToKey", 2);
    B.List_5e2 = A._setArrayType(makeConstList([B.MoneroTxinType_TxinGen_255, B.MoneroTxinType_TxinToScript_0, B.MoneroTxinType_TxinToScriptHash_1, B.MoneroTxinType_TxinToKey_2]), A.findType("JSArray<MoneroTxinType>"));
    B.List_65 = A._setArrayType(makeConstList([65]), type$.JSArray_int);
    B.XlmAddrTypes_48_PublicKey = new A.XlmAddrTypes(48, "PublicKey");
    B.XlmAddrTypes_144_SecretKey = new A.XlmAddrTypes(144, "SecretKey");
    B.XlmAddrTypes_16_Contract = new A.XlmAddrTypes(16, "Contract");
    B.XlmAddrTypes_96_Muxed = new A.XlmAddrTypes(96, "Muxed");
    B.List_65k = A._setArrayType(makeConstList([B.XlmAddrTypes_48_PublicKey, B.XlmAddrTypes_144_SecretKey, B.XlmAddrTypes_16_Contract, B.XlmAddrTypes_96_Muxed]), A.findType("JSArray<XlmAddrTypes>"));
    B.ProviderAuthType_EQC = new A.ProviderAuthType(B.List_50_6, 0, "header");
    B.ProviderAuthType_qh2 = new A.ProviderAuthType(B.List_50_6, 1, "query");
    B.ProviderAuthType_pFR = new A.ProviderAuthType(B.List_50_7, 2, "digest");
    B.List_6FR = A._setArrayType(makeConstList([B.ProviderAuthType_EQC, B.ProviderAuthType_qh2, B.ProviderAuthType_pFR]), A.findType("JSArray<ProviderAuthType>"));
    B.List_111_42 = A._setArrayType(makeConstList([111, 42]), type$.JSArray_int);
    B.StreamIsolateMethod_ASw = new A.StreamIsolateMethod(B.List_111_42, 0, "moneroAccountTracker");
    B.List_0_0_0_1 = A._setArrayType(makeConstList([0, 0, 0, 1]), type$.JSArray_int);
    B.StreamIsolateMethod_JBn = new A.StreamIsolateMethod(B.List_0_0_0_1, 1, "test");
    B.List_71d = A._setArrayType(makeConstList([B.StreamIsolateMethod_ASw, B.StreamIsolateMethod_JBn]), A.findType("JSArray<StreamIsolateMethod>"));
    B.List_76 = A._setArrayType(makeConstList([76]), type$.JSArray_int);
    B.List_78_110 = A._setArrayType(makeConstList([78, 110]), type$.JSArray_int);
    B.List_18_24_53 = A._setArrayType(makeConstList([18, 24, 53]), type$.JSArray_int);
    B.XmrAddressType_GJa = new A.XmrAddressType("Primary", B.List_18_24_53);
    B.List_25_54_19 = A._setArrayType(makeConstList([25, 54, 19]), type$.JSArray_int);
    B.XmrAddressType_GNA = new A.XmrAddressType("Integrated", B.List_25_54_19);
    B.List_36_63_42 = A._setArrayType(makeConstList([36, 63, 42]), type$.JSArray_int);
    B.XmrAddressType_0rc = new A.XmrAddressType("Subaddress", B.List_36_63_42);
    B.List_7xV = A._setArrayType(makeConstList([B.XmrAddressType_GJa, B.XmrAddressType_GNA, B.XmrAddressType_0rc]), A.findType("JSArray<XmrAddressType>"));
    B.List_8 = A._setArrayType(makeConstList([8]), type$.JSArray_int);
    B.WalletVersion_v1R1_1 = new A.WalletVersion("v1R1", 1);
    B.WalletVersion_v1R2_1 = new A.WalletVersion("v1R2", 1);
    B.WalletVersion_v1R3_1 = new A.WalletVersion("v1R3", 1);
    B.WalletVersion_v2R1_2 = new A.WalletVersion("v2R1", 2);
    B.WalletVersion_v2R2_2 = new A.WalletVersion("v2R2", 2);
    B.WalletVersion_v3R1_3 = new A.WalletVersion("v3R1", 3);
    B.WalletVersion_v3R2_3 = new A.WalletVersion("v3R2", 3);
    B.WalletVersion_v4_4 = new A.WalletVersion("v4", 4);
    B.WalletVersion_v5R1_5 = new A.WalletVersion("v5R1", 5);
    B.List_86y = A._setArrayType(makeConstList([B.WalletVersion_v1R1_1, B.WalletVersion_v1R2_1, B.WalletVersion_v1R3_1, B.WalletVersion_v2R1_2, B.WalletVersion_v2R2_2, B.WalletVersion_v3R1_3, B.WalletVersion_v3R2_3, B.WalletVersion_v4_4, B.WalletVersion_v5R1_5]), A.findType("JSArray<WalletVersion>"));
    B.List_8aB0 = A._setArrayType(makeConstList([408, 500, 502, 503, 504]), type$.JSArray_int);
    B.Bip39EntropyBitLen_128 = new A.Bip39EntropyBitLen(128);
    B.Bip39EntropyBitLen_160 = new A.Bip39EntropyBitLen(160);
    B.Bip39EntropyBitLen_192 = new A.Bip39EntropyBitLen(192);
    B.Bip39EntropyBitLen_224 = new A.Bip39EntropyBitLen(224);
    B.Bip39EntropyBitLen_256 = new A.Bip39EntropyBitLen(256);
    B.List_8aB1 = A._setArrayType(makeConstList([B.Bip39EntropyBitLen_128, B.Bip39EntropyBitLen_160, B.Bip39EntropyBitLen_192, B.Bip39EntropyBitLen_224, B.Bip39EntropyBitLen_256]), A.findType("JSArray<Bip39EntropyBitLen>"));
    B.MoneroStorageTypes_INT64_1_true_true = new A.MoneroStorageTypes("INT64", 1, true, true);
    B.MoneroStorageTypes_INT32_2_true_true = new A.MoneroStorageTypes("INT32", 2, true, true);
    B.MoneroStorageTypes_INT16_3_true_true = new A.MoneroStorageTypes("INT16", 3, true, true);
    B.MoneroStorageTypes_UINT64_5_true_true = new A.MoneroStorageTypes("UINT64", 5, true, true);
    B.MoneroStorageTypes_UINT32_6_true_true = new A.MoneroStorageTypes("UINT32", 6, true, true);
    B.MoneroStorageTypes_UINT16_7_true_true = new A.MoneroStorageTypes("UINT16", 7, true, true);
    B.MoneroStorageTypes_UINT8_8_true_true = new A.MoneroStorageTypes("UINT8", 8, true, true);
    B.MoneroStorageTypes_DOUBLE_9_true_false = new A.MoneroStorageTypes("DOUBLE", 9, true, false);
    B.MoneroStorageTypes_STRING_10_true_false = new A.MoneroStorageTypes("STRING", 10, true, false);
    B.MoneroStorageTypes_BOOL_11_true_false = new A.MoneroStorageTypes("BOOL", 11, true, false);
    B.MoneroStorageTypes_OBJECT_12_false_false = new A.MoneroStorageTypes("OBJECT", 12, false, false);
    B.MoneroStorageTypes_ARRAY_13_false_false = new A.MoneroStorageTypes("ARRAY", 13, false, false);
    B.List_8aB = A._setArrayType(makeConstList([B.MoneroStorageTypes_INT64_1_true_true, B.MoneroStorageTypes_INT32_2_true_true, B.MoneroStorageTypes_INT16_3_true_true, B.MoneroStorageTypes_UINT64_5_true_true, B.MoneroStorageTypes_UINT32_6_true_true, B.MoneroStorageTypes_UINT16_7_true_true, B.MoneroStorageTypes_UINT8_8_true_true, B.MoneroStorageTypes_DOUBLE_9_true_false, B.MoneroStorageTypes_STRING_10_true_false, B.MoneroStorageTypes_BOOL_11_true_false, B.MoneroStorageTypes_OBJECT_12_false_false, B.MoneroStorageTypes_ARRAY_13_false_false]), A.findType("JSArray<MoneroStorageTypes>"));
    B.List_8cU = A._setArrayType(makeConstList([0, 0, 2147483648, 2147483648, 0, 0, 2147483648, 2147483648, 0, 0, 0, 0, 0, 2147483648, 2147483648, 2147483648, 2147483648, 2147483648, 0, 2147483648, 2147483648, 2147483648, 0, 2147483648]), type$.JSArray_dynamic);
    B.List_90_12 = A._setArrayType(makeConstList([90, 12]), type$.JSArray_int);
    B.List_9i61 = A._setArrayType(makeConstList([44, 69, 100, 50, 53, 53, 49, 57, 72, 68, 75, 68]), type$.JSArray_int);
    B.List_9i60 = A._setArrayType(makeConstList([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]), type$.JSArray_int);
    B.List_9i6 = A._setArrayType(makeConstList([101, 100, 50, 53, 53, 49, 57, 32, 115, 101, 101, 100]), type$.JSArray_int);
    B.List_QSn = A._setArrayType(makeConstList([25967493, -14356035, 29566456, 3660896, -12694345, 4014787, 27544626, -11754271, -6079156, 2047605]), type$.JSArray_int);
    B.FieldElement_cZu = new A.FieldElement(B.List_QSn);
    B.List_MmH = A._setArrayType(makeConstList([-12545711, 934262, -2722910, 3049990, -727428, 9406986, 12720692, 5043384, 19500929, -15469378]), type$.JSArray_int);
    B.FieldElement_qRH = new A.FieldElement(B.List_MmH);
    B.List_6tV = A._setArrayType(makeConstList([-8738181, 4489570, 9688441, -14785194, 10184609, -12363380, 29287919, 11864899, -24514362, -4438546]), type$.JSArray_int);
    B.FieldElement_ato = new A.FieldElement(B.List_6tV);
    B.GroupElementPrecomp_ibp = new A.GroupElementPrecomp(B.FieldElement_cZu, B.FieldElement_qRH, B.FieldElement_ato);
    B.List_rps = A._setArrayType(makeConstList([15636291, -9688557, 24204773, -7912398, 616977, -16685262, 27787600, -14772189, 28944400, -1550024]), type$.JSArray_int);
    B.FieldElement_23B = new A.FieldElement(B.List_rps);
    B.List_4IJ = A._setArrayType(makeConstList([16568933, 4717097, -11556148, -1102322, 15682896, -11807043, 16354577, -11775962, 7689662, 11199574]), type$.JSArray_int);
    B.FieldElement_qph = new A.FieldElement(B.List_4IJ);
    B.List_2EC = A._setArrayType(makeConstList([30464156, -5976125, -11779434, -15670865, 23220365, 15915852, 7512774, 10017326, -17749093, -9920357]), type$.JSArray_int);
    B.FieldElement_GIe = new A.FieldElement(B.List_2EC);
    B.GroupElementPrecomp_8QI = new A.GroupElementPrecomp(B.FieldElement_23B, B.FieldElement_qph, B.FieldElement_GIe);
    B.List_zFD = A._setArrayType(makeConstList([10861363, 11473154, 27284546, 1981175, -30064349, 12577861, 32867885, 14515107, -15438304, 10819380]), type$.JSArray_int);
    B.FieldElement_USP = new A.FieldElement(B.List_zFD);
    B.List_wMy = A._setArrayType(makeConstList([4708026, 6336745, 20377586, 9066809, -11272109, 6594696, -25653668, 12483688, -12668491, 5581306]), type$.JSArray_int);
    B.FieldElement_ssO = new A.FieldElement(B.List_wMy);
    B.List_Mo8 = A._setArrayType(makeConstList([19563160, 16186464, -29386857, 4097519, 10237984, -4348115, 28542350, 13850243, -23678021, -15815942]), type$.JSArray_int);
    B.FieldElement_6L0 = new A.FieldElement(B.List_Mo8);
    B.GroupElementPrecomp_qOf = new A.GroupElementPrecomp(B.FieldElement_USP, B.FieldElement_ssO, B.FieldElement_6L0);
    B.List_wEo = A._setArrayType(makeConstList([5153746, 9909285, 1723747, -2777874, 30523605, 5516873, 19480852, 5230134, -23952439, -15175766]), type$.JSArray_int);
    B.FieldElement_DsB = new A.FieldElement(B.List_wEo);
    B.List_Quo = A._setArrayType(makeConstList([-30269007, -3463509, 7665486, 10083793, 28475525, 1649722, 20654025, 16520125, 30598449, 7715701]), type$.JSArray_int);
    B.FieldElement_wEo = new A.FieldElement(B.List_Quo);
    B.List_Zm0 = A._setArrayType(makeConstList([28881845, 14381568, 9657904, 3680757, -20181635, 7843316, -31400660, 1370708, 29794553, -1409300]), type$.JSArray_int);
    B.FieldElement_EmZ = new A.FieldElement(B.List_Zm0);
    B.GroupElementPrecomp_k2M = new A.GroupElementPrecomp(B.FieldElement_DsB, B.FieldElement_wEo, B.FieldElement_EmZ);
    B.List_ccN = A._setArrayType(makeConstList([-22518993, -6692182, 14201702, -8745502, -23510406, 8844726, 18474211, -1361450, -13062696, 13821877]), type$.JSArray_int);
    B.FieldElement_sEz = new A.FieldElement(B.List_ccN);
    B.List_int = A._setArrayType(makeConstList([-6455177, -7839871, 3374702, -4740862, -27098617, -10571707, 31655028, -7212327, 18853322, -14220951]), type$.JSArray_int);
    B.FieldElement_wT1 = new A.FieldElement(B.List_int);
    B.List_46y = A._setArrayType(makeConstList([4566830, -12963868, -28974889, -12240689, -7602672, -2830569, -8514358, -10431137, 2207753, -3209784]), type$.JSArray_int);
    B.FieldElement_VDm = new A.FieldElement(B.List_46y);
    B.GroupElementPrecomp_XX3 = new A.GroupElementPrecomp(B.FieldElement_sEz, B.FieldElement_wT1, B.FieldElement_VDm);
    B.List_uXT = A._setArrayType(makeConstList([-25154831, -4185821, 29681144, 7868801, -6854661, -9423865, -12437364, -663000, -31111463, -16132436]), type$.JSArray_int);
    B.FieldElement_0 = new A.FieldElement(B.List_uXT);
    B.List_ohR = A._setArrayType(makeConstList([25576264, -2703214, 7349804, -11814844, 16472782, 9300885, 3844789, 15725684, 171356, 6466918]), type$.JSArray_int);
    B.FieldElement_wEo0 = new A.FieldElement(B.List_ohR);
    B.List_iyR = A._setArrayType(makeConstList([23103977, 13316479, 9739013, -16149481, 817875, -15038942, 8965339, -14088058, -30714912, 16193877]), type$.JSArray_int);
    B.FieldElement_Qay = new A.FieldElement(B.List_iyR);
    B.GroupElementPrecomp_VcO = new A.GroupElementPrecomp(B.FieldElement_0, B.FieldElement_wEo0, B.FieldElement_Qay);
    B.List_IAi = A._setArrayType(makeConstList([-33521811, 3180713, -2394130, 14003687, -16903474, -16270840, 17238398, 4729455, -18074513, 9256800]), type$.JSArray_int);
    B.FieldElement_42U = new A.FieldElement(B.List_IAi);
    B.List_IYK = A._setArrayType(makeConstList([-25182317, -4174131, 32336398, 5036987, -21236817, 11360617, 22616405, 9761698, -19827198, 630305]), type$.JSArray_int);
    B.FieldElement_zeL = new A.FieldElement(B.List_IYK);
    B.List_AKW = A._setArrayType(makeConstList([-13720693, 2639453, -24237460, -7406481, 9494427, -5774029, -6554551, -15960994, -2449256, -14291300]), type$.JSArray_int);
    B.FieldElement_MPO = new A.FieldElement(B.List_AKW);
    B.GroupElementPrecomp_7BT = new A.GroupElementPrecomp(B.FieldElement_42U, B.FieldElement_zeL, B.FieldElement_MPO);
    B.List_mJb = A._setArrayType(makeConstList([-3151181, -5046075, 9282714, 6866145, -31907062, -863023, -18940575, 15033784, 25105118, -7894876]), type$.JSArray_int);
    B.FieldElement_E4y = new A.FieldElement(B.List_mJb);
    B.List_8pl = A._setArrayType(makeConstList([-24326370, 15950226, -31801215, -14592823, -11662737, -5090925, 1573892, -2625887, 2198790, -15804619]), type$.JSArray_int);
    B.FieldElement_xw8 = new A.FieldElement(B.List_8pl);
    B.List_IkO = A._setArrayType(makeConstList([-3099351, 10324967, -2241613, 7453183, -5446979, -2735503, -13812022, -16236442, -32461234, -12290683]), type$.JSArray_int);
    B.FieldElement_wsI = new A.FieldElement(B.List_IkO);
    B.GroupElementPrecomp_RFS = new A.GroupElementPrecomp(B.FieldElement_E4y, B.FieldElement_xw8, B.FieldElement_wsI);
    B.List_Ao9 = A._setArrayType(makeConstList([B.GroupElementPrecomp_ibp, B.GroupElementPrecomp_8QI, B.GroupElementPrecomp_qOf, B.GroupElementPrecomp_k2M, B.GroupElementPrecomp_XX3, B.GroupElementPrecomp_VcO, B.GroupElementPrecomp_7BT, B.GroupElementPrecomp_RFS]), type$.JSArray_GroupElementPrecomp);
    B.TxExtraTypes_publickey_1 = new A.TxExtraTypes("publickey", 1);
    B.TxExtraTypes_additionalPublicKeys_4 = new A.TxExtraTypes("additionalPublicKeys", 4);
    B.TxExtraTypes_nonce_2 = new A.TxExtraTypes("nonce", 2);
    B.TxExtraTypes_padding_0 = new A.TxExtraTypes("padding", 0);
    B.TxExtraTypes_mergeMiningTag_3 = new A.TxExtraTypes("mergeMiningTag", 3);
    B.TxExtraTypes_mysteriousMinergate_222 = new A.TxExtraTypes("mysteriousMinergate", 222);
    B.List_Azz = A._setArrayType(makeConstList([B.TxExtraTypes_publickey_1, B.TxExtraTypes_additionalPublicKeys_4, B.TxExtraTypes_nonce_2, B.TxExtraTypes_padding_0, B.TxExtraTypes_mergeMiningTag_3, B.TxExtraTypes_mysteriousMinergate_222]), A.findType("JSArray<TxExtraTypes>"));
    B.List_B8J = A._setArrayType(makeConstList([217, 248, 239, 166, 21, 112, 173, 84, 251, 236, 216, 211, 54, 75, 152, 97, 1, 120, 150, 129, 61, 38, 241, 241, 35, 105, 92, 123, 47, 16, 5, 13]), type$.JSArray_int);
    B.List_CJJ0 = A._setArrayType(makeConstList([52, 83, 101, 99, 112, 50, 53, 54, 107, 49, 72, 68, 75, 68]), type$.JSArray_int);
    B.List_CJJ = A._setArrayType(makeConstList([78, 105, 115, 116, 50, 53, 54, 112, 49, 32, 115, 101, 101, 100]), type$.JSArray_int);
    B.P2pkhAddressType_P2PKH = new A.P2pkhAddressType("P2PKH");
    B.SegwitAddressType_P2WPKH = new A.SegwitAddressType("P2WPKH");
    B.SegwitAddressType_P2TR = new A.SegwitAddressType("P2TR");
    B.SegwitAddressType_P2WSH = new A.SegwitAddressType("P2WSH");
    B.P2shAddressType_y7q = new A.P2shAddressType("P2SH/P2WSH");
    B.P2shAddressType_ZR3 = new A.P2shAddressType("P2SH/P2WPKH");
    B.P2shAddressType_iap = new A.P2shAddressType("P2SH/P2PKH");
    B.P2shAddressType_A0N = new A.P2shAddressType("P2SH/P2PK");
    B.P2shAddressType_46c = new A.P2shAddressType("P2SH32/P2PKH");
    B.P2shAddressType_6Vn = new A.P2shAddressType("P2SH32/P2PK");
    B.P2shAddressType_aa4 = new A.P2shAddressType("P2SH32WT/P2PKH");
    B.P2shAddressType_wdf = new A.P2shAddressType("P2SH32WT/P2PK");
    B.P2shAddressType_Cj1 = new A.P2shAddressType("P2SHWT/P2PKH");
    B.P2shAddressType_wOJ = new A.P2shAddressType("P2SHWT/P2PK");
    B.P2pkhAddressType_P2PKHWT = new A.P2pkhAddressType("P2PKHWT");
    B.List_CNi = A._setArrayType(makeConstList([B.P2pkhAddressType_P2PKH, B.SegwitAddressType_P2WPKH, B.SegwitAddressType_P2TR, B.SegwitAddressType_P2WSH, B.P2shAddressType_y7q, B.P2shAddressType_ZR3, B.P2shAddressType_iap, B.P2shAddressType_A0N, B.P2shAddressType_46c, B.P2shAddressType_6Vn, B.P2shAddressType_aa4, B.P2shAddressType_wdf, B.P2shAddressType_Cj1, B.P2shAddressType_wOJ, B.P2pkhAddressType_P2PKHWT]), A.findType("JSArray<BitcoinAddressType>"));
    B.List_Cpl2 = A._setArrayType(makeConstList([200, 192, 1, 0, 0]), type$.JSArray_int);
    B.List_Cpl0 = A._setArrayType(makeConstList([200, 193, 1, 0, 0]), type$.JSArray_int);
    B.List_Cpl1 = A._setArrayType(makeConstList([200, 195, 1, 0, 0]), type$.JSArray_int);
    B.List_Cpl = A._setArrayType(makeConstList([200, 201, 1, 0, 0]), type$.JSArray_int);
    B.List_CustomKeyType_0_CustomKeyType_1 = A._setArrayType(makeConstList([B.CustomKeyType_0, B.CustomKeyType_1]), A.findType("JSArray<CustomKeyType>"));
    B.List_D3e = A._setArrayType(makeConstList([121, 47, 220, 226, 41, 229, 6, 97, 208, 218, 28, 125, 179, 157, 211, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6]), type$.JSArray_int);
    B.MoneroLanguages_chineseSimplified = new A.MoneroLanguages("chineseSimplified");
    B.MoneroLanguages_dutch = new A.MoneroLanguages("dutch");
    B.MoneroLanguages_english = new A.MoneroLanguages("english");
    B.MoneroLanguages_french = new A.MoneroLanguages("french");
    B.MoneroLanguages_german = new A.MoneroLanguages("german");
    B.MoneroLanguages_italian = new A.MoneroLanguages("italian");
    B.MoneroLanguages_japanese = new A.MoneroLanguages("japanese");
    B.MoneroLanguages_portuguese = new A.MoneroLanguages("portuguese");
    B.MoneroLanguages_spanish = new A.MoneroLanguages("spanish");
    B.MoneroLanguages_russian = new A.MoneroLanguages("russian");
    B.List_ENd = A._setArrayType(makeConstList([B.MoneroLanguages_chineseSimplified, B.MoneroLanguages_dutch, B.MoneroLanguages_english, B.MoneroLanguages_french, B.MoneroLanguages_german, B.MoneroLanguages_italian, B.MoneroLanguages_japanese, B.MoneroLanguages_portuguese, B.MoneroLanguages_spanish, B.MoneroLanguages_russian]), A.findType("JSArray<MoneroLanguages>"));
    B.List_Epp = A._setArrayType(makeConstList([116, 164, 25, 122, 240, 125, 11, 247, 5, 194, 218, 37, 43, 92, 11, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10]), type$.JSArray_int);
    B.CryptoRequestHashingType_0 = new A.CryptoRequestHashingType(0, "md4");
    B.CryptoRequestHashingType_1 = new A.CryptoRequestHashingType(1, "md5");
    B.CryptoRequestHashingType_2 = new A.CryptoRequestHashingType(2, "sha256");
    B.CryptoRequestHashingType_3 = new A.CryptoRequestHashingType(3, "sha512");
    B.CryptoRequestHashingType_4 = new A.CryptoRequestHashingType(4, "sha3");
    B.CryptoRequestHashingType_5 = new A.CryptoRequestHashingType(5, "sha3256");
    B.CryptoRequestHashingType_7 = new A.CryptoRequestHashingType(7, "keccack256");
    B.List_FYB = A._setArrayType(makeConstList([B.CryptoRequestHashingType_0, B.CryptoRequestHashingType_1, B.CryptoRequestHashingType_2, B.CryptoRequestHashingType_3, B.CryptoRequestHashingType_4, B.CryptoRequestHashingType_5, B.CryptoRequestHashingType_6, B.CryptoRequestHashingType_7, B.CryptoRequestHashingType_8]), A.findType("JSArray<CryptoRequestHashingType>"));
    B.List_GLH = A._setArrayType(makeConstList(["\u7684", "\u4e00", "\u662f", "\u5728", "\u4e0d", "\u4e86", "\u6709", "\u548c", "\u4eba", "\u8fd9", "\u4e2d", "\u5927", "\u4e3a", "\u4e0a", "\u4e2a", "\u56fd", "\u6211", "\u4ee5", "\u8981", "\u4ed6", "\u65f6", "\u6765", "\u7528", "\u4eec", "\u751f", "\u5230", "\u4f5c", "\u5730", "\u4e8e", "\u51fa", "\u5c31", "\u5206", "\u5bf9", "\u6210", "\u4f1a", "\u53ef", "\u4e3b", "\u53d1", "\u5e74", "\u52a8", "\u540c", "\u5de5", "\u4e5f", "\u80fd", "\u4e0b", "\u8fc7", "\u5b50", "\u8bf4", "\u4ea7", "\u79cd", "\u9762", "\u800c", "\u65b9", "\u540e", "\u591a", "\u5b9a", "\u884c", "\u5b66", "\u6cd5", "\u6240", "\u6c11", "\u5f97", "\u7ecf", "\u5341", "\u4e09", "\u4e4b", "\u8fdb", "\u7740", "\u7b49", "\u90e8", "\u5ea6", "\u5bb6", "\u7535", "\u529b", "\u91cc", "\u5982", "\u6c34", "\u5316", "\u9ad8", "\u81ea", "\u4e8c", "\u7406", "\u8d77", "\u5c0f", "\u7269", "\u73b0", "\u5b9e", "\u52a0", "\u91cf", "\u90fd", "\u4e24", "\u4f53", "\u5236", "\u673a", "\u5f53", "\u4f7f", "\u70b9", "\u4ece", "\u4e1a", "\u672c", "\u53bb", "\u628a", "\u6027", "\u597d", "\u5e94", "\u5f00", "\u5b83", "\u5408", "\u8fd8", "\u56e0", "\u7531", "\u5176", "\u4e9b", "\u7136", "\u524d", "\u5916", "\u5929", "\u653f", "\u56db", "\u65e5", "\u90a3", "\u793e", "\u4e49", "\u4e8b", "\u5e73", "\u5f62", "\u76f8", "\u5168", "\u8868", "\u95f4", "\u6837", "\u4e0e", "\u5173", "\u5404", "\u91cd", "\u65b0", "\u7ebf", "\u5185", "\u6570", "\u6b63", "\u5fc3", "\u53cd", "\u4f60", "\u660e", "\u770b", "\u539f", "\u53c8", "\u4e48", "\u5229", "\u6bd4", "\u6216", "\u4f46", "\u8d28", "\u6c14", "\u7b2c", "\u5411", "\u9053", "\u547d", "\u6b64", "\u53d8", "\u6761", "\u53ea", "\u6ca1", "\u7ed3", "\u89e3", "\u95ee", "\u610f", "\u5efa", "\u6708", "\u516c", "\u65e0", "\u7cfb", "\u519b", "\u5f88", "\u60c5", "\u8005", "\u6700", "\u7acb", "\u4ee3", "\u60f3", "\u5df2", "\u901a", "\u5e76", "\u63d0", "\u76f4", "\u9898", "\u515a", "\u7a0b", "\u5c55", "\u4e94", "\u679c", "\u6599", "\u8c61", "\u5458", "\u9769", "\u4f4d", "\u5165", "\u5e38", "\u6587", "\u603b", "\u6b21", "\u54c1", "\u5f0f", "\u6d3b", "\u8bbe", "\u53ca", "\u7ba1", "\u7279", "\u4ef6", "\u957f", "\u6c42", "\u8001", "\u5934", "\u57fa", "\u8d44", "\u8fb9", "\u6d41", "\u8def", "\u7ea7", "\u5c11", "\u56fe", "\u5c71", "\u7edf", "\u63a5", "\u77e5", "\u8f83", "\u5c06", "\u7ec4", "\u89c1", "\u8ba1", "\u522b", "\u5979", "\u624b", "\u89d2", "\u671f", "\u6839", "\u8bba", "\u8fd0", "\u519c", "\u6307", "\u51e0", "\u4e5d", "\u533a", "\u5f3a", "\u653e", "\u51b3", "\u897f", "\u88ab", "\u5e72", "\u505a", "\u5fc5", "\u6218", "\u5148", "\u56de", "\u5219", "\u4efb", "\u53d6", "\u636e", "\u5904", "\u961f", "\u5357", "\u7ed9", "\u8272", "\u5149", "\u95e8", "\u5373", "\u4fdd", "\u6cbb", "\u5317", "\u9020", "\u767e", "\u89c4", "\u70ed", "\u9886", "\u4e03", "\u6d77", "\u53e3", "\u4e1c", "\u5bfc", "\u5668", "\u538b", "\u5fd7", "\u4e16", "\u91d1", "\u589e", "\u4e89", "\u6d4e", "\u9636", "\u6cb9", "\u601d", "\u672f", "\u6781", "\u4ea4", "\u53d7", "\u8054", "\u4ec0", "\u8ba4", "\u516d", "\u5171", "\u6743", "\u6536", "\u8bc1", "\u6539", "\u6e05", "\u7f8e", "\u518d", "\u91c7", "\u8f6c", "\u66f4", "\u5355", "\u98ce", "\u5207", "\u6253", "\u767d", "\u6559", "\u901f", "\u82b1", "\u5e26", "\u5b89", "\u573a", "\u8eab", "\u8f66", "\u4f8b", "\u771f", "\u52a1", "\u5177", "\u4e07", "\u6bcf", "\u76ee", "\u81f3", "\u8fbe", "\u8d70", "\u79ef", "\u793a", "\u8bae", "\u58f0", "\u62a5", "\u6597", "\u5b8c", "\u7c7b", "\u516b", "\u79bb", "\u534e", "\u540d", "\u786e", "\u624d", "\u79d1", "\u5f20", "\u4fe1", "\u9a6c", "\u8282", "\u8bdd", "\u7c73", "\u6574", "\u7a7a", "\u5143", "\u51b5", "\u4eca", "\u96c6", "\u6e29", "\u4f20", "\u571f", "\u8bb8", "\u6b65", "\u7fa4", "\u5e7f", "\u77f3", "\u8bb0", "\u9700", "\u6bb5", "\u7814", "\u754c", "\u62c9", "\u6797", "\u5f8b", "\u53eb", "\u4e14", "\u7a76", "\u89c2", "\u8d8a", "\u7ec7", "\u88c5", "\u5f71", "\u7b97", "\u4f4e", "\u6301", "\u97f3", "\u4f17", "\u4e66", "\u5e03", "\u590d", "\u5bb9", "\u513f", "\u987b", "\u9645", "\u5546", "\u975e", "\u9a8c", "\u8fde", "\u65ad", "\u6df1", "\u96be", "\u8fd1", "\u77ff", "\u5343", "\u5468", "\u59d4", "\u7d20", "\u6280", "\u5907", "\u534a", "\u529e", "\u9752", "\u7701", "\u5217", "\u4e60", "\u54cd", "\u7ea6", "\u652f", "\u822c", "\u53f2", "\u611f", "\u52b3", "\u4fbf", "\u56e2", "\u5f80", "\u9178", "\u5386", "\u5e02", "\u514b", "\u4f55", "\u9664", "\u6d88", "\u6784", "\u5e9c", "\u79f0", "\u592a", "\u51c6", "\u7cbe", "\u503c", "\u53f7", "\u7387", "\u65cf", "\u7ef4", "\u5212", "\u9009", "\u6807", "\u5199", "\u5b58", "\u5019", "\u6bdb", "\u4eb2", "\u5feb", "\u6548", "\u65af", "\u9662", "\u67e5", "\u6c5f", "\u578b", "\u773c", "\u738b", "\u6309", "\u683c", "\u517b", "\u6613", "\u7f6e", "\u6d3e", "\u5c42", "\u7247", "\u59cb", "\u5374", "\u4e13", "\u72b6", "\u80b2", "\u5382", "\u4eac", "\u8bc6", "\u9002", "\u5c5e", "\u5706", "\u5305", "\u706b", "\u4f4f", "\u8c03", "\u6ee1", "\u53bf", "\u5c40", "\u7167", "\u53c2", "\u7ea2", "\u7ec6", "\u5f15", "\u542c", "\u8be5", "\u94c1", "\u4ef7", "\u4e25", "\u9996", "\u5e95", "\u6db2", "\u5b98", "\u5fb7", "\u968f", "\u75c5", "\u82cf", "\u5931", "\u5c14", "\u6b7b", "\u8bb2", "\u914d", "\u5973", "\u9ec4", "\u63a8", "\u663e", "\u8c08", "\u7f6a", "\u795e", "\u827a", "\u5462", "\u5e2d", "\u542b", "\u4f01", "\u671b", "\u5bc6", "\u6279", "\u8425", "\u9879", "\u9632", "\u4e3e", "\u7403", "\u82f1", "\u6c27", "\u52bf", "\u544a", "\u674e", "\u53f0", "\u843d", "\u6728", "\u5e2e", "\u8f6e", "\u7834", "\u4e9a", "\u5e08", "\u56f4", "\u6ce8", "\u8fdc", "\u5b57", "\u6750", "\u6392", "\u4f9b", "\u6cb3", "\u6001", "\u5c01", "\u53e6", "\u65bd", "\u51cf", "\u6811", "\u6eb6", "\u600e", "\u6b62", "\u6848", "\u8a00", "\u58eb", "\u5747", "\u6b66", "\u56fa", "\u53f6", "\u9c7c", "\u6ce2", "\u89c6", "\u4ec5", "\u8d39", "\u7d27", "\u7231", "\u5de6", "\u7ae0", "\u65e9", "\u671d", "\u5bb3", "\u7eed", "\u8f7b", "\u670d", "\u8bd5", "\u98df", "\u5145", "\u5175", "\u6e90", "\u5224", "\u62a4", "\u53f8", "\u8db3", "\u67d0", "\u7ec3", "\u5dee", "\u81f4", "\u677f", "\u7530", "\u964d", "\u9ed1", "\u72af", "\u8d1f", "\u51fb", "\u8303", "\u7ee7", "\u5174", "\u4f3c", "\u4f59", "\u575a", "\u66f2", "\u8f93", "\u4fee", "\u6545", "\u57ce", "\u592b", "\u591f", "\u9001", "\u7b14", "\u8239", "\u5360", "\u53f3", "\u8d22", "\u5403", "\u5bcc", "\u6625", "\u804c", "\u89c9", "\u6c49", "\u753b", "\u529f", "\u5df4", "\u8ddf", "\u867d", "\u6742", "\u98de", "\u68c0", "\u5438", "\u52a9", "\u5347", "\u9633", "\u4e92", "\u521d", "\u521b", "\u6297", "\u8003", "\u6295", "\u574f", "\u7b56", "\u53e4", "\u5f84", "\u6362", "\u672a", "\u8dd1", "\u7559", "\u94a2", "\u66fe", "\u7aef", "\u8d23", "\u7ad9", "\u7b80", "\u8ff0", "\u94b1", "\u526f", "\u5c3d", "\u5e1d", "\u5c04", "\u8349", "\u51b2", "\u627f", "\u72ec", "\u4ee4", "\u9650", "\u963f", "\u5ba3", "\u73af", "\u53cc", "\u8bf7", "\u8d85", "\u5fae", "\u8ba9", "\u63a7", "\u5dde", "\u826f", "\u8f74", "\u627e", "\u5426", "\u7eaa", "\u76ca", "\u4f9d", "\u4f18", "\u9876", "\u7840", "\u8f7d", "\u5012", "\u623f", "\u7a81", "\u5750", "\u7c89", "\u654c", "\u7565", "\u5ba2", "\u8881", "\u51b7", "\u80dc", "\u7edd", "\u6790", "\u5757", "\u5242", "\u6d4b", "\u4e1d", "\u534f", "\u8bc9", "\u5ff5", "\u9648", "\u4ecd", "\u7f57", "\u76d0", "\u53cb", "\u6d0b", "\u9519", "\u82e6", "\u591c", "\u5211", "\u79fb", "\u9891", "\u9010", "\u9760", "\u6df7", "\u6bcd", "\u77ed", "\u76ae", "\u7ec8", "\u805a", "\u6c7d", "\u6751", "\u4e91", "\u54ea", "\u65e2", "\u8ddd", "\u536b", "\u505c", "\u70c8", "\u592e", "\u5bdf", "\u70e7", "\u8fc5", "\u5883", "\u82e5", "\u5370", "\u6d32", "\u523b", "\u62ec", "\u6fc0", "\u5b54", "\u641e", "\u751a", "\u5ba4", "\u5f85", "\u6838", "\u6821", "\u6563", "\u4fb5", "\u5427", "\u7532", "\u6e38", "\u4e45", "\u83dc", "\u5473", "\u65e7", "\u6a21", "\u6e56", "\u8d27", "\u635f", "\u9884", "\u963b", "\u6beb", "\u666e", "\u7a33", "\u4e59", "\u5988", "\u690d", "\u606f", "\u6269", "\u94f6", "\u8bed", "\u6325", "\u9152", "\u5b88", "\u62ff", "\u5e8f", "\u7eb8", "\u533b", "\u7f3a", "\u96e8", "\u5417", "\u9488", "\u5218", "\u554a", "\u6025", "\u5531", "\u8bef", "\u8bad", "\u613f", "\u5ba1", "\u9644", "\u83b7", "\u8336", "\u9c9c", "\u7cae", "\u65a4", "\u5b69", "\u8131", "\u786b", "\u80a5", "\u5584", "\u9f99", "\u6f14", "\u7236", "\u6e10", "\u8840", "\u6b22", "\u68b0", "\u638c", "\u6b4c", "\u6c99", "\u521a", "\u653b", "\u8c13", "\u76fe", "\u8ba8", "\u665a", "\u7c92", "\u4e71", "\u71c3", "\u77db", "\u4e4e", "\u6740", "\u836f", "\u5b81", "\u9c81", "\u8d35", "\u949f", "\u7164", "\u8bfb", "\u73ed", "\u4f2f", "\u9999", "\u4ecb", "\u8feb", "\u53e5", "\u4e30", "\u57f9", "\u63e1", "\u5170", "\u62c5", "\u5f26", "\u86cb", "\u6c89", "\u5047", "\u7a7f", "\u6267", "\u7b54", "\u4e50", "\u8c01", "\u987a", "\u70df", "\u7f29", "\u5f81", "\u8138", "\u559c", "\u677e", "\u811a", "\u56f0", "\u5f02", "\u514d", "\u80cc", "\u661f", "\u798f", "\u4e70", "\u67d3", "\u4e95", "\u6982", "\u6162", "\u6015", "\u78c1", "\u500d", "\u7956", "\u7687", "\u4fc3", "\u9759", "\u8865", "\u8bc4", "\u7ffb", "\u8089", "\u8df5", "\u5c3c", "\u8863", "\u5bbd", "\u626c", "\u68c9", "\u5e0c", "\u4f24", "\u64cd", "\u5782", "\u79cb", "\u5b9c", "\u6c22", "\u5957", "\u7763", "\u632f", "\u67b6", "\u4eae", "\u672b", "\u5baa", "\u5e86", "\u7f16", "\u725b", "\u89e6", "\u6620", "\u96f7", "\u9500", "\u8bd7", "\u5ea7", "\u5c45", "\u6293", "\u88c2", "\u80de", "\u547c", "\u5a18", "\u666f", "\u5a01", "\u7eff", "\u6676", "\u539a", "\u76df", "\u8861", "\u9e21", "\u5b59", "\u5ef6", "\u5371", "\u80f6", "\u5c4b", "\u4e61", "\u4e34", "\u9646", "\u987e", "\u6389", "\u5440", "\u706f", "\u5c81", "\u63aa", "\u675f", "\u8010", "\u5267", "\u7389", "\u8d75", "\u8df3", "\u54e5", "\u5b63", "\u8bfe", "\u51ef", "\u80e1", "\u989d", "\u6b3e", "\u7ecd", "\u5377", "\u9f50", "\u4f1f", "\u84b8", "\u6b96", "\u6c38", "\u5b97", "\u82d7", "\u5ddd", "\u7089", "\u5ca9", "\u5f31", "\u96f6", "\u6768", "\u594f", "\u6cbf", "\u9732", "\u6746", "\u63a2", "\u6ed1", "\u9547", "\u996d", "\u6d53", "\u822a", "\u6000", "\u8d76", "\u5e93", "\u593a", "\u4f0a", "\u7075", "\u7a0e", "\u9014", "\u706d", "\u8d5b", "\u5f52", "\u53ec", "\u9f13", "\u64ad", "\u76d8", "\u88c1", "\u9669", "\u5eb7", "\u552f", "\u5f55", "\u83cc", "\u7eaf", "\u501f", "\u7cd6", "\u76d6", "\u6a2a", "\u7b26", "\u79c1", "\u52aa", "\u5802", "\u57df", "\u67aa", "\u6da6", "\u5e45", "\u54c8", "\u7adf", "\u719f", "\u866b", "\u6cfd", "\u8111", "\u58e4", "\u78b3", "\u6b27", "\u904d", "\u4fa7", "\u5be8", "\u6562", "\u5f7b", "\u8651", "\u659c", "\u8584", "\u5ead", "\u7eb3", "\u5f39", "\u9972", "\u4f38", "\u6298", "\u9ea6", "\u6e7f", "\u6697", "\u8377", "\u74e6", "\u585e", "\u5e8a", "\u7b51", "\u6076", "\u6237", "\u8bbf", "\u5854", "\u5947", "\u900f", "\u6881", "\u5200", "\u65cb", "\u8ff9", "\u5361", "\u6c2f", "\u9047", "\u4efd", "\u6bd2", "\u6ce5", "\u9000", "\u6d17", "\u6446", "\u7070", "\u5f69", "\u5356", "\u8017", "\u590f", "\u62e9", "\u5fd9", "\u94dc", "\u732e", "\u786c", "\u4e88", "\u7e41", "\u5708", "\u96ea", "\u51fd", "\u4ea6", "\u62bd", "\u7bc7", "\u9635", "\u9634", "\u4e01", "\u5c3a", "\u8ffd", "\u5806", "\u96c4", "\u8fce", "\u6cdb", "\u7238", "\u697c", "\u907f", "\u8c0b", "\u5428", "\u91ce", "\u732a", "\u65d7", "\u7d2f", "\u504f", "\u5178", "\u9986", "\u7d22", "\u79e6", "\u8102", "\u6f6e", "\u7237", "\u8c46", "\u5ffd", "\u6258", "\u60ca", "\u5851", "\u9057", "\u6108", "\u6731", "\u66ff", "\u7ea4", "\u7c97", "\u503e", "\u5c1a", "\u75db", "\u695a", "\u8c22", "\u594b", "\u8d2d", "\u78e8", "\u541b", "\u6c60", "\u65c1", "\u788e", "\u9aa8", "\u76d1", "\u6355", "\u5f1f", "\u66b4", "\u5272", "\u8d2f", "\u6b8a", "\u91ca", "\u8bcd", "\u4ea1", "\u58c1", "\u987f", "\u5b9d", "\u5348", "\u5c18", "\u95fb", "\u63ed", "\u70ae", "\u6b8b", "\u51ac", "\u6865", "\u5987", "\u8b66", "\u7efc", "\u62db", "\u5434", "\u4ed8", "\u6d6e", "\u906d", "\u5f90", "\u60a8", "\u6447", "\u8c37", "\u8d5e", "\u7bb1", "\u9694", "\u8ba2", "\u7537", "\u5439", "\u56ed", "\u7eb7", "\u5510", "\u8d25", "\u5b8b", "\u73bb", "\u5de8", "\u8015", "\u5766", "\u8363", "\u95ed", "\u6e7e", "\u952e", "\u51e1", "\u9a7b", "\u9505", "\u6551", "\u6069", "\u5265", "\u51dd", "\u78b1", "\u9f7f", "\u622a", "\u70bc", "\u9ebb", "\u7eba", "\u7981", "\u5e9f", "\u76db", "\u7248", "\u7f13", "\u51c0", "\u775b", "\u660c", "\u5a5a", "\u6d89", "\u7b52", "\u5634", "\u63d2", "\u5cb8", "\u6717", "\u5e84", "\u8857", "\u85cf", "\u59d1", "\u8d38", "\u8150", "\u5974", "\u5566", "\u60ef", "\u4e58", "\u4f19", "\u6062", "\u5300", "\u7eb1", "\u624e", "\u8fa9", "\u8033", "\u5f6a", "\u81e3", "\u4ebf", "\u7483", "\u62b5", "\u8109", "\u79c0", "\u8428", "\u4fc4", "\u7f51", "\u821e", "\u5e97", "\u55b7", "\u7eb5", "\u5bf8", "\u6c57", "\u6302", "\u6d2a", "\u8d3a", "\u95ea", "\u67ec", "\u7206", "\u70ef", "\u6d25", "\u7a3b", "\u5899", "\u8f6f", "\u52c7", "\u50cf", "\u6eda", "\u5398", "\u8499", "\u82b3", "\u80af", "\u5761", "\u67f1", "\u8361", "\u817f", "\u4eea", "\u65c5", "\u5c3e", "\u8f67", "\u51b0", "\u8d21", "\u767b", "\u9ece", "\u524a", "\u94bb", "\u52d2", "\u9003", "\u969c", "\u6c28", "\u90ed", "\u5cf0", "\u5e01", "\u6e2f", "\u4f0f", "\u8f68", "\u4ea9", "\u6bd5", "\u64e6", "\u83ab", "\u523a", "\u6d6a", "\u79d8", "\u63f4", "\u682a", "\u5065", "\u552e", "\u80a1", "\u5c9b", "\u7518", "\u6ce1", "\u7761", "\u7ae5", "\u94f8", "\u6c64", "\u9600", "\u4f11", "\u6c47", "\u820d", "\u7267", "\u7ed5", "\u70b8", "\u54f2", "\u78f7", "\u7ee9", "\u670b", "\u6de1", "\u5c16", "\u542f", "\u9677", "\u67f4", "\u5448", "\u5f92", "\u989c", "\u6cea", "\u7a0d", "\u5fd8", "\u6cf5", "\u84dd", "\u62d6", "\u6d1e", "\u6388", "\u955c", "\u8f9b", "\u58ee", "\u950b", "\u8d2b", "\u865a", "\u5f2f", "\u6469", "\u6cf0", "\u5e7c", "\u5ef7", "\u5c0a", "\u7a97", "\u7eb2", "\u5f04", "\u96b6", "\u7591", "\u6c0f", "\u5bab", "\u59d0", "\u9707", "\u745e", "\u602a", "\u5c24", "\u7434", "\u5faa", "\u63cf", "\u819c", "\u8fdd", "\u5939", "\u8170", "\u7f18", "\u73e0", "\u7a77", "\u68ee", "\u679d", "\u7af9", "\u6c9f", "\u50ac", "\u7ef3", "\u5fc6", "\u90a6", "\u5269", "\u5e78", "\u6d46", "\u680f", "\u62e5", "\u7259", "\u8d2e", "\u793c", "\u6ee4", "\u94a0", "\u7eb9", "\u7f62", "\u62cd", "\u54b1", "\u558a", "\u8896", "\u57c3", "\u52e4", "\u7f5a", "\u7126", "\u6f5c", "\u4f0d", "\u58a8", "\u6b32", "\u7f1d", "\u59d3", "\u520a", "\u9971", "\u4eff", "\u5956", "\u94dd", "\u9b3c", "\u4e3d", "\u8de8", "\u9ed8", "\u6316", "\u94fe", "\u626b", "\u559d", "\u888b", "\u70ad", "\u6c61", "\u5e55", "\u8bf8", "\u5f27", "\u52b1", "\u6885", "\u5976", "\u6d01", "\u707e", "\u821f", "\u9274", "\u82ef", "\u8bbc", "\u62b1", "\u6bc1", "\u61c2", "\u5bd2", "\u667a", "\u57d4", "\u5bc4", "\u5c4a", "\u8dc3", "\u6e21", "\u6311", "\u4e39", "\u8270", "\u8d1d", "\u78b0", "\u62d4", "\u7239", "\u6234", "\u7801", "\u68a6", "\u82bd", "\u7194", "\u8d64", "\u6e14", "\u54ed", "\u656c", "\u9897", "\u5954", "\u94c5", "\u4ef2", "\u864e", "\u7a00", "\u59b9", "\u4e4f", "\u73cd", "\u7533", "\u684c", "\u9075", "\u5141", "\u9686", "\u87ba", "\u4ed3", "\u9b4f", "\u9510", "\u6653", "\u6c2e", "\u517c", "\u9690", "\u788d", "\u8d6b", "\u62e8", "\u5fe0", "\u8083", "\u7f38", "\u7275", "\u62a2", "\u535a", "\u5de7", "\u58f3", "\u5144", "\u675c", "\u8baf", "\u8bda", "\u78a7", "\u7965", "\u67ef", "\u9875", "\u5de1", "\u77e9", "\u60b2", "\u704c", "\u9f84", "\u4f26", "\u7968", "\u5bfb", "\u6842", "\u94fa", "\u5723", "\u6050", "\u6070", "\u90d1", "\u8da3", "\u62ac", "\u8352", "\u817e", "\u8d34", "\u67d4", "\u6ef4", "\u731b", "\u9614", "\u8f86", "\u59bb", "\u586b", "\u64a4", "\u50a8", "\u7b7e", "\u95f9", "\u6270", "\u7d2b", "\u7802", "\u9012", "\u620f", "\u540a", "\u9676", "\u4f10", "\u5582", "\u7597", "\u74f6", "\u5a46", "\u629a", "\u81c2", "\u6478", "\u5fcd", "\u867e", "\u8721", "\u90bb", "\u80f8", "\u5de9", "\u6324", "\u5076", "\u5f03", "\u69fd", "\u52b2", "\u4e73", "\u9093", "\u5409", "\u4ec1", "\u70c2", "\u7816", "\u79df", "\u4e4c", "\u8230", "\u4f34", "\u74dc", "\u6d45", "\u4e19", "\u6682", "\u71e5", "\u6a61", "\u67f3", "\u8ff7", "\u6696", "\u724c", "\u79e7", "\u80c6", "\u8be6", "\u7c27", "\u8e0f", "\u74f7", "\u8c31", "\u5446", "\u5bbe", "\u7cca", "\u6d1b", "\u8f89", "\u6124", "\u7ade", "\u9699", "\u6012", "\u7c98", "\u4e43", "\u7eea", "\u80a9", "\u7c4d", "\u654f", "\u6d82", "\u7199", "\u7686", "\u4fa6", "\u60ac", "\u6398", "\u4eab", "\u7ea0", "\u9192", "\u72c2", "\u9501", "\u6dc0", "\u6068", "\u7272", "\u9738", "\u722c", "\u8d4f", "\u9006", "\u73a9", "\u9675", "\u795d", "\u79d2", "\u6d59", "\u8c8c"]), type$.JSArray_String);
    B.List_GVy = A._setArrayType(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), type$.JSArray_int);
    B.List_Gbr = A._setArrayType(makeConstList([B.EIP712Version_1, B.EIP712Version_3, B.EIP712Version_4]), A.findType("JSArray<EIP712Version>"));
    B.MoneroBlockTrackingStatus_1_0_failed = new A.MoneroBlockTrackingStatus(1, 0, "failed");
    B.MoneroBlockTrackingStatus_2_1_success = new A.MoneroBlockTrackingStatus(2, 1, "success");
    B.MoneroBlockTrackingStatus_3_2_pending = new A.MoneroBlockTrackingStatus(3, 2, "pending");
    B.List_KVZ = A._setArrayType(makeConstList([B.MoneroBlockTrackingStatus_1_0_failed, B.MoneroBlockTrackingStatus_2_1_success, B.MoneroBlockTrackingStatus_3_2_pending]), A.findType("JSArray<MoneroBlockTrackingStatus>"));
    B.MoneroSyncBlockRequestType_i7r = new A.MoneroSyncBlockRequestType(B.List_200_202_32, 0, "blocksInfo");
    B.MoneroSyncBlockRequestType_SJ5 = new A.MoneroSyncBlockRequestType(B.List_200_202_33, 1, "trackBlocks");
    B.List_L6o = A._setArrayType(makeConstList([B.MoneroSyncBlockRequestType_i7r, B.MoneroSyncBlockRequestType_SJ5]), A.findType("JSArray<MoneroSyncBlockRequestType>"));
    B.List_M2I0 = A._setArrayType(makeConstList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_M2I = A._setArrayType(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_M5H = A._setArrayType(makeConstList([B.DigestAuthQop_auth_0_auth, B.DigestAuthQop_f5L]), A.findType("JSArray<DigestAuthQop>"));
    B.MoneroTxVersion_InProofV1_1 = new A.MoneroTxVersion("InProofV1", 1);
    B.MoneroTxVersion_OutProofV1_1 = new A.MoneroTxVersion("OutProofV1", 1);
    B.MoneroTxVersion_InProofV2_2 = new A.MoneroTxVersion("InProofV2", 2);
    B.MoneroTxVersion_OutProofV2_2 = new A.MoneroTxVersion("OutProofV2", 2);
    B.List_MzG = A._setArrayType(makeConstList([B.MoneroTxVersion_InProofV1_1, B.MoneroTxVersion_OutProofV1_1, B.MoneroTxVersion_InProofV2_2, B.MoneroTxVersion_OutProofV2_2]), A.findType("JSArray<MoneroTxVersion>"));
    B.CosmosKeysAlgs_4 = new A.CosmosKeysAlgs(4, "bn254");
    B.List_NMh = A._setArrayType(makeConstList([B.CosmosKeysAlgs_0, B.CosmosKeysAlgs_1, B.CosmosKeysAlgs_2, B.CosmosKeysAlgs_3, B.CosmosKeysAlgs_4]), type$.JSArray_CosmosKeysAlgs);
    B.List_NwK = A._setArrayType(makeConstList(["abaco", "abbaglio", "abbinato", "abete", "abisso", "abolire", "abrasivo", "abrogato", "accadere", "accenno", "accusato", "acetone", "achille", "acido", "acqua", "acre", "acrilico", "acrobata", "acuto", "adagio", "addebito", "addome", "adeguato", "aderire", "adipe", "adottare", "adulare", "affabile", "affetto", "affisso", "affranto", "aforisma", "afoso", "africano", "agave", "agente", "agevole", "aggancio", "agire", "agitare", "agonismo", "agricolo", "agrumeto", "aguzzo", "alabarda", "alato", "albatro", "alberato", "albo", "albume", "alce", "alcolico", "alettone", "alfa", "algebra", "aliante", "alibi", "alimento", "allagato", "allegro", "allievo", "allodola", "allusivo", "almeno", "alogeno", "alpaca", "alpestre", "altalena", "alterno", "alticcio", "altrove", "alunno", "alveolo", "alzare", "amalgama", "amanita", "amarena", "ambito", "ambrato", "ameba", "america", "ametista", "amico", "ammasso", "ammenda", "ammirare", "ammonito", "amore", "ampio", "ampliare", "amuleto", "anacardo", "anagrafe", "analista", "anarchia", "anatra", "anca", "ancella", "ancora", "andare", "andrea", "anello", "angelo", "angolare", "angusto", "anima", "annegare", "annidato", "anno", "annuncio", "anonimo", "anticipo", "anzi", "apatico", "apertura", "apode", "apparire", "appetito", "appoggio", "approdo", "appunto", "aprile", "arabica", "arachide", "aragosta", "araldica", "arancio", "aratura", "arazzo", "arbitro", "archivio", "ardito", "arenile", "argento", "argine", "arguto", "aria", "armonia", "arnese", "arredato", "arringa", "arrosto", "arsenico", "arso", "artefice", "arzillo", "asciutto", "ascolto", "asepsi", "asettico", "asfalto", "asino", "asola", "aspirato", "aspro", "assaggio", "asse", "assoluto", "assurdo", "asta", "astenuto", "astice", "astratto", "atavico", "ateismo", "atomico", "atono", "attesa", "attivare", "attorno", "attrito", "attuale", "ausilio", "austria", "autista", "autonomo", "autunno", "avanzato", "avere", "avvenire", "avviso", "avvolgere", "azione", "azoto", "azzimo", "azzurro", "babele", "baccano", "bacino", "baco", "badessa", "badilata", "bagnato", "baita", "balcone", "baldo", "balena", "ballata", "balzano", "bambino", "bandire", "baraonda", "barbaro", "barca", "baritono", "barlume", "barocco", "basilico", "basso", "batosta", "battuto", "baule", "bava", "bavosa", "becco", "beffa", "belgio", "belva", "benda", "benevole", "benigno", "benzina", "bere", "berlina", "beta", "bibita", "bici", "bidone", "bifido", "biga", "bilancia", "bimbo", "binocolo", "biologo", "bipede", "bipolare", "birbante", "birra", "biscotto", "bisesto", "bisnonno", "bisonte", "bisturi", "bizzarro", "blando", "blatta", "bollito", "bonifico", "bordo", "bosco", "botanico", "bottino", "bozzolo", "braccio", "bradipo", "brama", "branca", "bravura", "bretella", "brevetto", "brezza", "briglia", "brillante", "brindare", "broccolo", "brodo", "bronzina", "brullo", "bruno", "bubbone", "buca", "budino", "buffone", "buio", "bulbo", "buono", "burlone", "burrasca", "bussola", "busta", "cadetto", "caduco", "calamaro", "calcolo", "calesse", "calibro", "calmo", "caloria", "cambusa", "camerata", "camicia", "cammino", "camola", "campale", "canapa", "candela", "cane", "canino", "canotto", "cantina", "capace", "capello", "capitolo", "capogiro", "cappero", "capra", "capsula", "carapace", "carcassa", "cardo", "carisma", "carovana", "carretto", "cartolina", "casaccio", "cascata", "caserma", "caso", "cassone", "castello", "casuale", "catasta", "catena", "catrame", "cauto", "cavillo", "cedibile", "cedrata", "cefalo", "celebre", "cellulare", "cena", "cenone", "centesimo", "ceramica", "cercare", "certo", "cerume", "cervello", "cesoia", "cespo", "ceto", "chela", "chiaro", "chicca", "chiedere", "chimera", "china", "chirurgo", "chitarra", "ciao", "ciclismo", "cifrare", "cigno", "cilindro", "ciottolo", "circa", "cirrosi", "citrico", "cittadino", "ciuffo", "civetta", "civile", "classico", "clinica", "cloro", "cocco", "codardo", "codice", "coerente", "cognome", "collare", "colmato", "colore", "colposo", "coltivato", "colza", "coma", "cometa", "commando", "comodo", "computer", "comune", "conciso", "condurre", "conferma", "congelare", "coniuge", "connesso", "conoscere", "consumo", "continuo", "convegno", "coperto", "copione", "coppia", "copricapo", "corazza", "cordata", "coricato", "cornice", "corolla", "corpo", "corredo", "corsia", "cortese", "cosmico", "costante", "cottura", "covato", "cratere", "cravatta", "creato", "credere", "cremoso", "crescita", "creta", "criceto", "crinale", "crisi", "critico", "croce", "cronaca", "crostata", "cruciale", "crusca", "cucire", "cuculo", "cugino", "cullato", "cupola", "curatore", "cursore", "curvo", "cuscino", "custode", "dado", "daino", "dalmata", "damerino", "daniela", "dannoso", "danzare", "datato", "davanti", "davvero", "debutto", "decennio", "deciso", "declino", "decollo", "decreto", "dedicato", "definito", "deforme", "degno", "delegare", "delfino", "delirio", "delta", "demenza", "denotato", "dentro", "deposito", "derapata", "derivare", "deroga", "descritto", "deserto", "desiderio", "desumere", "detersivo", "devoto", "diametro", "dicembre", "diedro", "difeso", "diffuso", "digerire", "digitale", "diluvio", "dinamico", "dinnanzi", "dipinto", "diploma", "dipolo", "diradare", "dire", "dirotto", "dirupo", "disagio", "discreto", "disfare", "disgelo", "disposto", "distanza", "disumano", "dito", "divano", "divelto", "dividere", "divorato", "doblone", "docente", "doganale", "dogma", "dolce", "domato", "domenica", "dominare", "dondolo", "dono", "dormire", "dote", "dottore", "dovuto", "dozzina", "drago", "druido", "dubbio", "dubitare", "ducale", "duna", "duomo", "duplice", "duraturo", "ebano", "eccesso", "ecco", "eclissi", "economia", "edera", "edicola", "edile", "editoria", "educare", "egemonia", "egli", "egoismo", "egregio", "elaborato", "elargire", "elegante", "elencato", "eletto", "elevare", "elfico", "elica", "elmo", "elsa", "eluso", "emanato", "emblema", "emesso", "emiro", "emotivo", "emozione", "empirico", "emulo", "endemico", "enduro", "energia", "enfasi", "enoteca", "entrare", "enzima", "epatite", "epilogo", "episodio", "epocale", "eppure", "equatore", "erario", "erba", "erboso", "erede", "eremita", "erigere", "ermetico", "eroe", "erosivo", "errante", "esagono", "esame", "esanime", "esaudire", "esca", "esempio", "esercito", "esibito", "esigente", "esistere", "esito", "esofago", "esortato", "esoso", "espanso", "espresso", "essenza", "esso", "esteso", "estimare", "estonia", "estroso", "esultare", "etilico", "etnico", "etrusco", "etto", "euclideo", "europa", "evaso", "evidenza", "evitato", "evoluto", "evviva", "fabbrica", "faccenda", "fachiro", "falco", "famiglia", "fanale", "fanfara", "fango", "fantasma", "fare", "farfalla", "farinoso", "farmaco", "fascia", "fastoso", "fasullo", "faticare", "fato", "favoloso", "febbre", "fecola", "fede", "fegato", "felpa", "feltro", "femmina", "fendere", "fenomeno", "fermento", "ferro", "fertile", "fessura", "festivo", "fetta", "feudo", "fiaba", "fiducia", "fifa", "figurato", "filo", "finanza", "finestra", "finire", "fiore", "fiscale", "fisico", "fiume", "flacone", "flamenco", "flebo", "flemma", "florido", "fluente", "fluoro", "fobico", "focaccia", "focoso", "foderato", "foglio", "folata", "folclore", "folgore", "fondente", "fonetico", "fonia", "fontana", "forbito", "forchetta", "foresta", "formica", "fornaio", "foro", "fortezza", "forzare", "fosfato", "fosso", "fracasso", "frana", "frassino", "fratello", "freccetta", "frenata", "fresco", "frigo", "frollino", "fronde", "frugale", "frutta", "fucilata", "fucsia", "fuggente", "fulmine", "fulvo", "fumante", "fumetto", "fumoso", "fune", "funzione", "fuoco", "furbo", "furgone", "furore", "fuso", "futile", "gabbiano", "gaffe", "galateo", "gallina", "galoppo", "gambero", "gamma", "garanzia", "garbo", "garofano", "garzone", "gasdotto", "gasolio", "gastrico", "gatto", "gaudio", "gazebo", "gazzella", "geco", "gelatina", "gelso", "gemello", "gemmato", "gene", "genitore", "gennaio", "genotipo", "gergo", "ghepardo", "ghiaccio", "ghisa", "giallo", "gilda", "ginepro", "giocare", "gioiello", "giorno", "giove", "girato", "girone", "gittata", "giudizio", "giurato", "giusto", "globulo", "glutine", "gnomo", "gobba", "golf", "gomito", "gommone", "gonfio", "gonna", "governo", "gracile", "grado", "grafico", "grammo", "grande", "grattare", "gravoso", "grazia", "greca", "gregge", "grifone", "grigio", "grinza", "grotta", "gruppo", "guadagno", "guaio", "guanto", "guardare", "gufo", "guidare", "ibernato", "icona", "identico", "idillio", "idolo", "idra", "idrico", "idrogeno", "igiene", "ignaro", "ignorato", "ilare", "illeso", "illogico", "illudere", "imballo", "imbevuto", "imbocco", "imbuto", "immane", "immerso", "immolato", "impacco", "impeto", "impiego", "importo", "impronta", "inalare", "inarcare", "inattivo", "incanto", "incendio", "inchino", "incisivo", "incluso", "incontro", "incrocio", "incubo", "indagine", "india", "indole", "inedito", "infatti", "infilare", "inflitto", "ingaggio", "ingegno", "inglese", "ingordo", "ingrosso", "innesco", "inodore", "inoltrare", "inondato", "insano", "insetto", "insieme", "insonnia", "insulina", "intasato", "intero", "intonaco", "intuito", "inumidire", "invalido", "invece", "invito", "iperbole", "ipnotico", "ipotesi", "ippica", "iride", "irlanda", "ironico", "irrigato", "irrorare", "isolato", "isotopo", "isterico", "istituto", "istrice", "italia", "iterare", "labbro", "labirinto", "lacca", "lacerato", "lacrima", "lacuna", "laddove", "lago", "lampo", "lancetta", "lanterna", "lardoso", "larga", "laringe", "lastra", "latenza", "latino", "lattuga", "lavagna", "lavoro", "legale", "leggero", "lembo", "lentezza", "lenza", "leone", "lepre", "lesivo", "lessato", "lesto", "letterale", "leva", "levigato", "libero", "lido", "lievito", "lilla", "limatura", "limitare", "limpido", "lineare", "lingua", "liquido", "lira", "lirica", "lisca", "lite", "litigio", "livrea", "locanda", "lode", "logica", "lombare", "londra", "longevo", "loquace", "lorenzo", "loto", "lotteria", "luce", "lucidato", "lumaca", "luminoso", "lungo", "lupo", "luppolo", "lusinga", "lusso", "lutto", "macabro", "macchina", "macero", "macinato", "madama", "magico", "maglia", "magnete", "magro", "maiolica", "malafede", "malgrado", "malinteso", "malsano", "malto", "malumore", "mana", "mancia", "mandorla", "mangiare", "manifesto", "mannaro", "manovra", "mansarda", "mantide", "manubrio", "mappa", "maratona", "marcire", "maretta", "marmo", "marsupio", "maschera", "massaia", "mastino", "materasso", "matricola", "mattone", "maturo", "mazurca", "meandro", "meccanico", "mecenate", "medesimo", "meditare", "mega", "melassa", "melis", "melodia", "meninge", "meno", "mensola", "mercurio", "merenda", "merlo", "meschino", "mese", "messere", "mestolo", "metallo", "metodo", "mettere", "miagolare", "mica", "micelio", "michele", "microbo", "midollo", "miele", "migliore", "milano", "milite", "mimosa", "minerale", "mini", "minore", "mirino", "mirtillo", "miscela", "missiva", "misto", "misurare", "mitezza", "mitigare", "mitra", "mittente", "mnemonico", "modello", "modifica", "modulo", "mogano", "mogio", "mole", "molosso", "monastero", "monco", "mondina", "monetario", "monile", "monotono", "monsone", "montato", "monviso", "mora", "mordere", "morsicato", "mostro", "motivato", "motosega", "motto", "movenza", "movimento", "mozzo", "mucca", "mucosa", "muffa", "mughetto", "mugnaio", "mulatto", "mulinello", "multiplo", "mummia", "munto", "muovere", "murale", "musa", "muscolo", "musica", "mutevole", "muto", "nababbo", "nafta", "nanometro", "narciso", "narice", "narrato", "nascere", "nastrare", "naturale", "nautica", "naviglio", "nebulosa", "necrosi", "negativo", "negozio", "nemmeno", "neofita", "neretto", "nervo", "nessuno", "nettuno", "neutrale", "neve", "nevrotico", "nicchia", "ninfa", "nitido", "nobile", "nocivo", "nodo", "nome", "nomina", "nordico", "normale", "norvegese", "nostrano", "notare", "notizia", "notturno", "novella", "nucleo", "nulla", "numero", "nuovo", "nutrire", "nuvola", "nuziale", "oasi", "obbedire", "obbligo", "obelisco", "oblio", "obolo", "obsoleto", "occasione", "occhio", "occidente", "occorrere", "occultare", "ocra", "oculato", "odierno", "odorare", "offerta", "offrire", "offuscato", "oggetto", "oggi", "ognuno", "olandese", "olfatto", "oliato", "oliva", "ologramma", "oltre", "omaggio", "ombelico", "ombra", "omega", "omissione", "ondoso", "onere", "onice", "onnivoro", "onorevole", "onta", "operato", "opinione", "opposto", "oracolo", "orafo", "ordine", "orecchino", "orefice", "orfano", "organico", "origine", "orizzonte", "orma", "ormeggio", "ornativo", "orologio", "orrendo", "orribile", "ortensia", "ortica", "orzata", "orzo", "osare", "oscurare", "osmosi", "ospedale", "ospite", "ossa", "ossidare", "ostacolo", "oste", "otite", "otre", "ottagono", "ottimo", "ottobre", "ovale", "ovest", "ovino", "oviparo", "ovocito", "ovunque", "ovviare", "ozio", "pacchetto", "pace", "pacifico", "padella", "padrone", "paese", "paga", "pagina", "palazzina", "palesare", "pallido", "palo", "palude", "pandoro", "pannello", "paolo", "paonazzo", "paprica", "parabola", "parcella", "parere", "pargolo", "pari", "parlato", "parola", "partire", "parvenza", "parziale", "passivo", "pasticca", "patacca", "patologia", "pattume", "pavone", "peccato", "pedalare", "pedonale", "peggio", "peloso", "penare", "pendice", "penisola", "pennuto", "penombra", "pensare", "pentola", "pepe", "pepita", "perbene", "percorso", "perdonato", "perforare", "pergamena", "periodo", "permesso", "perno", "perplesso", "persuaso", "pertugio", "pervaso", "pesatore", "pesista", "peso", "pestifero", "petalo", "pettine", "petulante", "pezzo", "piacere", "pianta", "piattino", "piccino", "picozza", "piega", "pietra", "piffero", "pigiama", "pigolio", "pigro", "pila", "pilifero", "pillola", "pilota", "pimpante", "pineta", "pinna", "pinolo", "pioggia", "piombo", "piramide", "piretico", "pirite", "pirolisi", "pitone", "pizzico", "placebo", "planare", "plasma", "platano", "plenario", "pochezza", "poderoso", "podismo", "poesia", "poggiare", "polenta", "poligono", "pollice", "polmonite", "polpetta", "polso", "poltrona", "polvere", "pomice", "pomodoro", "ponte", "popoloso", "porfido", "poroso", "porpora", "porre", "portata", "posa", "positivo", "possesso", "postulato", "potassio", "potere", "pranzo", "prassi", "pratica", "precluso", "predica", "prefisso", "pregiato", "prelievo", "premere", "prenotare", "preparato", "presenza", "pretesto", "prevalso", "prima", "principe", "privato", "problema", "procura", "produrre", "profumo", "progetto", "prolunga", "promessa", "pronome", "proposta", "proroga", "proteso", "prova", "prudente", "prugna", "prurito", "psiche", "pubblico", "pudica", "pugilato", "pugno", "pulce", "pulito", "pulsante", "puntare", "pupazzo", "pupilla", "puro", "quadro", "qualcosa", "quasi", "querela", "quota", "raccolto", "raddoppio", "radicale", "radunato", "raffica", "ragazzo", "ragione", "ragno", "ramarro", "ramingo", "ramo", "randagio", "rantolare", "rapato", "rapina", "rappreso", "rasatura", "raschiato", "rasente", "rassegna", "rastrello", "rata", "ravveduto", "reale", "recepire", "recinto", "recluta", "recondito", "recupero", "reddito", "redimere", "regalato", "registro", "regola", "regresso", "relazione", "remare", "remoto", "renna", "replica", "reprimere", "reputare", "resa", "residente", "responso", "restauro", "rete", "retina", "retorica", "rettifica", "revocato", "riassunto", "ribadire", "ribelle", "ribrezzo", "ricarica", "ricco", "ricevere", "riciclato", "ricordo", "ricreduto", "ridicolo", "ridurre", "rifasare", "riflesso", "riforma", "rifugio", "rigare", "rigettato", "righello", "rilassato", "rilevato", "rimanere", "rimbalzo", "rimedio", "rimorchio", "rinascita", "rincaro", "rinforzo", "rinnovo", "rinomato", "rinsavito", "rintocco", "rinuncia", "rinvenire", "riparato", "ripetuto", "ripieno", "riportare", "ripresa", "ripulire", "risata", "rischio", "riserva", "risibile", "riso", "rispetto", "ristoro", "risultato", "risvolto", "ritardo", "ritegno", "ritmico", "ritrovo", "riunione", "riva", "riverso", "rivincita", "rivolto", "rizoma", "roba", "robotico", "robusto", "roccia", "roco", "rodaggio", "rodere", "roditore", "rogito", "rollio", "romantico", "rompere", "ronzio", "rosolare", "rospo", "rotante", "rotondo", "rotula", "rovescio", "rubizzo", "rubrica", "ruga", "rullino", "rumine", "rumoroso", "ruolo", "rupe", "russare", "rustico", "sabato", "sabbiare", "sabotato", "sagoma", "salasso", "saldatura", "salgemma", "salivare", "salmone", "salone", "saltare", "saluto", "salvo", "sapere", "sapido", "saporito", "saraceno", "sarcasmo", "sarto", "sassoso", "satellite", "satira", "satollo", "saturno", "savana", "savio", "saziato", "sbadiglio", "sbalzo", "sbancato", "sbarra", "sbattere", "sbavare", "sbendare", "sbirciare", "sbloccato", "sbocciato", "sbrinare", "sbruffone", "sbuffare", "scabroso", "scadenza", "scala", "scambiare", "scandalo", "scapola", "scarso", "scatenare", "scavato", "scelto", "scenico", "scettro", "scheda", "schiena", "sciarpa", "scienza", "scindere", "scippo", "sciroppo", "scivolo", "sclerare", "scodella", "scolpito", "scomparto", "sconforto", "scoprire", "scorta", "scossone", "scozzese", "scriba", "scrollare", "scrutinio", "scuderia", "scultore", "scuola", "scuro", "scusare", "sdebitare", "sdoganare", "seccatura", "secondo", "sedano", "seggiola", "segnalato", "segregato", "seguito", "selciato", "selettivo", "sella", "selvaggio", "semaforo", "sembrare", "seme", "seminato", "sempre", "senso", "sentire", "sepolto", "sequenza", "serata", "serbato", "sereno", "serio", "serpente", "serraglio", "servire", "sestina", "setola", "settimana", "sfacelo", "sfaldare", "sfamato", "sfarzoso", "sfaticato", "sfera", "sfida", "sfilato", "sfinge", "sfocato", "sfoderare", "sfogo", "sfoltire", "sforzato", "sfratto", "sfruttato", "sfuggito", "sfumare", "sfuso", "sgabello", "sgarbato", "sgonfiare", "sgorbio", "sgrassato", "sguardo", "sibilo", "siccome", "sierra", "sigla", "signore", "silenzio", "sillaba", "simbolo", "simpatico", "simulato", "sinfonia", "singolo", "sinistro", "sino", "sintesi", "sinusoide", "sipario", "sisma", "sistole", "situato", "slitta", "slogatura", "sloveno", "smarrito", "smemorato", "smentito", "smeraldo", "smilzo", "smontare", "smottato", "smussato", "snellire", "snervato", "snodo", "sobbalzo", "sobrio", "soccorso", "sociale", "sodale", "soffitto", "sogno", "soldato", "solenne", "solido", "sollazzo", "solo", "solubile", "solvente", "somatico", "somma", "sonda", "sonetto", "sonnifero", "sopire", "soppeso", "sopra", "sorgere", "sorpasso", "sorriso", "sorso", "sorteggio", "sorvolato", "sospiro", "sosta", "sottile", "spada", "spalla", "spargere", "spatola", "spavento", "spazzola", "specie", "spedire", "spegnere", "spelatura", "speranza", "spessore", "spettrale", "spezzato", "spia", "spigoloso", "spillato", "spinoso", "spirale", "splendido", "sportivo", "sposo", "spranga", "sprecare", "spronato", "spruzzo", "spuntino", "squillo", "sradicare", "srotolato", "stabile", "stacco", "staffa", "stagnare", "stampato", "stantio", "starnuto", "stasera", "statuto", "stelo", "steppa", "sterzo", "stiletto", "stima", "stirpe", "stivale", "stizzoso", "stonato", "storico", "strappo", "stregato", "stridulo", "strozzare", "strutto", "stuccare", "stufo", "stupendo", "subentro", "succoso", "sudore", "suggerito", "sugo", "sultano", "suonare", "superbo", "supporto", "surgelato", "surrogato", "sussurro", "sutura", "svagare", "svedese", "sveglio", "svelare", "svenuto", "svezia", "sviluppo", "svista", "svizzera", "svolta", "svuotare", "tabacco", "tabulato", "tacciare", "taciturno", "tale", "talismano", "tampone", "tannino", "tara", "tardivo", "targato", "tariffa", "tarpare", "tartaruga", "tasto", "tattico", "taverna", "tavolata", "tazza", "teca", "tecnico", "telefono", "temerario", "tempo", "temuto", "tendone", "tenero", "tensione", "tentacolo", "teorema", "terme", "terrazzo", "terzetto", "tesi", "tesserato", "testato", "tetro", "tettoia", "tifare", "tigella", "timbro", "tinto", "tipico", "tipografo", "tiraggio", "tiro", "titanio", "titolo", "titubante", "tizio", "tizzone", "toccare", "tollerare", "tolto", "tombola", "tomo", "tonfo", "tonsilla", "topazio", "topologia", "toppa", "torba", "tornare", "torrone", "tortora", "toscano", "tossire", "tostatura", "totano", "trabocco", "trachea", "trafila", "tragedia", "tralcio", "tramonto", "transito", "trapano", "trarre", "trasloco", "trattato", "trave", "treccia", "tremolio", "trespolo", "tributo", "tricheco", "trifoglio", "trillo", "trincea", "trio", "tristezza", "triturato", "trivella", "tromba", "trono", "troppo", "trottola", "trovare", "truccato", "tubatura", "tuffato", "tulipano", "tumulto", "tunisia", "turbare", "turchino", "tuta", "tutela", "ubicato", "uccello", "uccisore", "udire", "uditivo", "uffa", "ufficio", "uguale", "ulisse", "ultimato", "umano", "umile", "umorismo", "uncinetto", "ungere", "ungherese", "unicorno", "unificato", "unisono", "unitario", "unte", "uovo", "upupa", "uragano", "urgenza", "urlo", "usanza", "usato", "uscito", "usignolo", "usuraio", "utensile", "utilizzo", "utopia", "vacante", "vaccinato", "vagabondo", "vagliato", "valanga", "valgo", "valico", "valletta", "valoroso", "valutare", "valvola", "vampata", "vangare", "vanitoso", "vano", "vantaggio", "vanvera", "vapore", "varano", "varcato", "variante", "vasca", "vedetta", "vedova", "veduto", "vegetale", "veicolo", "velcro", "velina", "velluto", "veloce", "venato", "vendemmia", "vento", "verace", "verbale", "vergogna", "verifica", "vero", "verruca", "verticale", "vescica", "vessillo", "vestale", "veterano", "vetrina", "vetusto", "viandante", "vibrante", "vicenda", "vichingo", "vicinanza", "vidimare", "vigilia", "vigneto", "vigore", "vile", "villano", "vimini", "vincitore", "viola", "vipera", "virgola", "virologo", "virulento", "viscoso", "visione", "vispo", "vissuto", "visura", "vita", "vitello", "vittima", "vivanda", "vivido", "viziare", "voce", "voga", "volatile", "volere", "volpe", "voragine", "vulcano", "zampogna", "zanna", "zappato", "zattera", "zavorra", "zefiro", "zelante", "zelo", "zenzero", "zerbino", "zibetto", "zinco", "zircone", "zitto", "zolla", "zotico", "zucchero", "zufolo", "zulu", "zuppa"]), type$.JSArray_String);
    B.List_O98 = A._setArrayType(makeConstList(["\u3042\u3044\u3053\u304f\u3057\u3093", "\u3042\u3044\u3055\u3064", "\u3042\u3044\u305f\u3099", "\u3042\u304a\u305d\u3099\u3089", "\u3042\u304b\u3061\u3083\u3093", "\u3042\u304d\u308b", "\u3042\u3051\u304b\u3099\u305f", "\u3042\u3051\u308b", "\u3042\u3053\u304b\u3099\u308c\u308b", "\u3042\u3055\u3044", "\u3042\u3055\u3072", "\u3042\u3057\u3042\u3068", "\u3042\u3057\u3099\u308f\u3046", "\u3042\u3059\u3099\u304b\u308b", "\u3042\u3059\u3099\u304d", "\u3042\u305d\u3075\u3099", "\u3042\u305f\u3048\u308b", "\u3042\u305f\u305f\u3081\u308b", "\u3042\u305f\u308a\u307e\u3048", "\u3042\u305f\u308b", "\u3042\u3064\u3044", "\u3042\u3064\u304b\u3046", "\u3042\u3063\u3057\u3085\u304f", "\u3042\u3064\u307e\u308a", "\u3042\u3064\u3081\u308b", "\u3042\u3066\u306a", "\u3042\u3066\u306f\u307e\u308b", "\u3042\u3072\u308b", "\u3042\u3075\u3099\u3089", "\u3042\u3075\u3099\u308b", "\u3042\u3075\u308c\u308b", "\u3042\u307e\u3044", "\u3042\u307e\u3068\u3099", "\u3042\u307e\u3084\u304b\u3059", "\u3042\u307e\u308a", "\u3042\u307f\u3082\u306e", "\u3042\u3081\u308a\u304b", "\u3042\u3084\u307e\u308b", "\u3042\u3086\u3080", "\u3042\u3089\u3044\u304f\u3099\u307e", "\u3042\u3089\u3057", "\u3042\u3089\u3059\u3057\u3099", "\u3042\u3089\u305f\u3081\u308b", "\u3042\u3089\u3086\u308b", "\u3042\u3089\u308f\u3059", "\u3042\u308a\u304b\u3099\u3068\u3046", "\u3042\u308f\u305b\u308b", "\u3042\u308f\u3066\u308b", "\u3042\u3093\u3044", "\u3042\u3093\u304b\u3099\u3044", "\u3042\u3093\u3053", "\u3042\u3093\u305b\u3099\u3093", "\u3042\u3093\u3066\u3044", "\u3042\u3093\u306a\u3044", "\u3042\u3093\u307e\u308a", "\u3044\u3044\u305f\u3099\u3059", "\u3044\u304a\u3093", "\u3044\u304b\u3099\u3044", "\u3044\u304b\u3099\u304f", "\u3044\u304d\u304a\u3044", "\u3044\u304d\u306a\u308a", "\u3044\u304d\u3082\u306e", "\u3044\u304d\u308b", "\u3044\u304f\u3057\u3099", "\u3044\u304f\u3075\u3099\u3093", "\u3044\u3051\u306f\u3099\u306a", "\u3044\u3051\u3093", "\u3044\u3053\u3046", "\u3044\u3053\u304f", "\u3044\u3053\u3064", "\u3044\u3055\u307e\u3057\u3044", "\u3044\u3055\u3093", "\u3044\u3057\u304d", "\u3044\u3057\u3099\u3085\u3046", "\u3044\u3057\u3099\u3087\u3046", "\u3044\u3057\u3099\u308f\u308b", "\u3044\u3059\u3099\u307f", "\u3044\u3059\u3099\u308c", "\u3044\u305b\u3044", "\u3044\u305b\u3048\u3072\u3099", "\u3044\u305b\u304b\u3044", "\u3044\u305b\u304d", "\u3044\u305b\u3099\u3093", "\u3044\u305d\u3046\u308d\u3046", "\u3044\u305d\u304b\u3099\u3057\u3044", "\u3044\u305f\u3099\u3044", "\u3044\u305f\u3099\u304f", "\u3044\u305f\u3059\u3099\u3089", "\u3044\u305f\u307f", "\u3044\u305f\u308a\u3042", "\u3044\u3061\u304a\u3046", "\u3044\u3061\u3057\u3099", "\u3044\u3061\u3068\u3099", "\u3044\u3061\u306f\u3099", "\u3044\u3061\u3075\u3099", "\u3044\u3061\u308a\u3085\u3046", "\u3044\u3064\u304b", "\u3044\u3063\u3057\u3085\u3093", "\u3044\u3063\u305b\u3044", "\u3044\u3063\u305d\u3046", "\u3044\u3063\u305f\u3093", "\u3044\u3063\u3061", "\u3044\u3063\u3066\u3044", "\u3044\u3063\u307b\u309a\u3046", "\u3044\u3066\u3055\u3099", "\u3044\u3066\u3093", "\u3044\u3068\u3099\u3046", "\u3044\u3068\u3053", "\u3044\u306a\u3044", "\u3044\u306a\u304b", "\u3044\u306d\u3080\u308a", "\u3044\u306e\u3061", "\u3044\u306e\u308b", "\u3044\u306f\u3064", "\u3044\u306f\u3099\u308b", "\u3044\u306f\u3093", "\u3044\u3072\u3099\u304d", "\u3044\u3072\u3093", "\u3044\u3075\u304f", "\u3044\u3078\u3093", "\u3044\u307b\u3046", "\u3044\u307f\u3093", "\u3044\u3082\u3046\u3068", "\u3044\u3082\u305f\u308c", "\u3044\u3082\u308a", "\u3044\u3084\u304b\u3099\u308b", "\u3044\u3084\u3059", "\u3044\u3088\u304b\u3093", "\u3044\u3088\u304f", "\u3044\u3089\u3044", "\u3044\u3089\u3059\u3068", "\u3044\u308a\u304f\u3099\u3061", "\u3044\u308a\u3087\u3046", "\u3044\u308c\u3044", "\u3044\u308c\u3082\u306e", "\u3044\u308c\u308b", "\u3044\u308d\u3048\u3093\u3072\u309a\u3064", "\u3044\u308f\u3044", "\u3044\u308f\u3046", "\u3044\u308f\u304b\u3093", "\u3044\u308f\u306f\u3099", "\u3044\u308f\u3086\u308b", "\u3044\u3093\u3051\u3099\u3093\u307e\u3081", "\u3044\u3093\u3055\u3064", "\u3044\u3093\u3057\u3087\u3046", "\u3044\u3093\u3088\u3046", "\u3046\u3048\u304d", "\u3046\u3048\u308b", "\u3046\u304a\u3055\u3099", "\u3046\u304b\u3099\u3044", "\u3046\u304b\u3075\u3099", "\u3046\u304b\u3078\u3099\u308b", "\u3046\u304d\u308f", "\u3046\u304f\u3089\u3044\u306a", "\u3046\u304f\u308c\u308c", "\u3046\u3051\u305f\u307e\u308f\u308b", "\u3046\u3051\u3064\u3051", "\u3046\u3051\u3068\u308b", "\u3046\u3051\u3082\u3064", "\u3046\u3051\u308b", "\u3046\u3053\u3099\u304b\u3059", "\u3046\u3053\u3099\u304f", "\u3046\u3053\u3093", "\u3046\u3055\u304d\u3099", "\u3046\u3057\u306a\u3046", "\u3046\u3057\u308d\u304b\u3099\u307f", "\u3046\u3059\u3044", "\u3046\u3059\u304d\u3099", "\u3046\u3059\u304f\u3099\u3089\u3044", "\u3046\u3059\u3081\u308b", "\u3046\u305b\u3064", "\u3046\u3061\u3042\u308f\u305b", "\u3046\u3061\u304b\u3099\u308f", "\u3046\u3061\u304d", "\u3046\u3061\u3085\u3046", "\u3046\u3063\u304b\u308a", "\u3046\u3064\u304f\u3057\u3044", "\u3046\u3063\u305f\u3048\u308b", "\u3046\u3064\u308b", "\u3046\u3068\u3099\u3093", "\u3046\u306a\u304d\u3099", "\u3046\u306a\u3057\u3099", "\u3046\u306a\u3059\u3099\u304f", "\u3046\u306a\u308b", "\u3046\u306d\u308b", "\u3046\u306e\u3046", "\u3046\u3075\u3099\u3051\u3099", "\u3046\u3075\u3099\u3053\u3099\u3048", "\u3046\u307e\u308c\u308b", "\u3046\u3081\u308b", "\u3046\u3082\u3046", "\u3046\u3084\u307e\u3046", "\u3046\u3088\u304f", "\u3046\u3089\u304b\u3099\u3048\u3059", "\u3046\u3089\u304f\u3099\u3061", "\u3046\u3089\u306a\u3044", "\u3046\u308a\u3042\u3051\u3099", "\u3046\u308a\u304d\u308c", "\u3046\u308b\u3055\u3044", "\u3046\u308c\u3057\u3044", "\u3046\u308c\u3086\u304d", "\u3046\u308c\u308b", "\u3046\u308d\u3053", "\u3046\u308f\u304d", "\u3046\u308f\u3055", "\u3046\u3093\u3053\u3046", "\u3046\u3093\u3061\u3093", "\u3046\u3093\u3066\u3093", "\u3046\u3093\u3068\u3099\u3046", "\u3048\u3044\u3048\u3093", "\u3048\u3044\u304b\u3099", "\u3048\u3044\u304d\u3087\u3046", "\u3048\u3044\u3053\u3099", "\u3048\u3044\u305b\u3044", "\u3048\u3044\u3075\u3099\u3093", "\u3048\u3044\u3088\u3046", "\u3048\u3044\u308f", "\u3048\u304a\u308a", "\u3048\u304b\u3099\u304a", "\u3048\u304b\u3099\u304f", "\u3048\u304d\u305f\u3044", "\u3048\u304f\u305b\u308b", "\u3048\u3057\u3083\u304f", "\u3048\u3059\u3066", "\u3048\u3064\u3089\u3093", "\u3048\u306e\u304f\u3099", "\u3048\u307b\u3046\u307e\u304d", "\u3048\u307b\u3093", "\u3048\u307e\u304d", "\u3048\u3082\u3057\u3099", "\u3048\u3082\u306e", "\u3048\u3089\u3044", "\u3048\u3089\u3075\u3099", "\u3048\u308a\u3042", "\u3048\u3093\u3048\u3093", "\u3048\u3093\u304b\u3044", "\u3048\u3093\u304d\u3099", "\u3048\u3093\u3051\u3099\u304d", "\u3048\u3093\u3057\u3085\u3046", "\u3048\u3093\u305b\u3099\u3064", "\u3048\u3093\u305d\u304f", "\u3048\u3093\u3061\u3087\u3046", "\u3048\u3093\u3068\u3064", "\u304a\u3044\u304b\u3051\u308b", "\u304a\u3044\u3053\u3059", "\u304a\u3044\u3057\u3044", "\u304a\u3044\u3064\u304f", "\u304a\u3046\u3048\u3093", "\u304a\u3046\u3055\u307e", "\u304a\u3046\u3057\u3099", "\u304a\u3046\u305b\u3064", "\u304a\u3046\u305f\u3044", "\u304a\u3046\u3075\u304f", "\u304a\u3046\u3078\u3099\u3044", "\u304a\u3046\u3088\u3046", "\u304a\u3048\u308b", "\u304a\u304a\u3044", "\u304a\u304a\u3046", "\u304a\u304a\u3068\u3099\u304a\u308a", "\u304a\u304a\u3084", "\u304a\u304a\u3088\u305d", "\u304a\u304b\u3048\u308a", "\u304a\u304b\u3059\u3099", "\u304a\u304b\u3099\u3080", "\u304a\u304b\u308f\u308a", "\u304a\u304d\u3099\u306a\u3046", "\u304a\u304d\u308b", "\u304a\u304f\u3055\u307e", "\u304a\u304f\u3057\u3099\u3087\u3046", "\u304a\u304f\u308a\u304b\u3099\u306a", "\u304a\u304f\u308b", "\u304a\u304f\u308c\u308b", "\u304a\u3053\u3059", "\u304a\u3053\u306a\u3046", "\u304a\u3053\u308b", "\u304a\u3055\u3048\u308b", "\u304a\u3055\u306a\u3044", "\u304a\u3055\u3081\u308b", "\u304a\u3057\u3044\u308c", "\u304a\u3057\u3048\u308b", "\u304a\u3057\u3099\u304d\u3099", "\u304a\u3057\u3099\u3055\u3093", "\u304a\u3057\u3083\u308c", "\u304a\u305d\u3089\u304f", "\u304a\u305d\u308f\u308b", "\u304a\u305f\u304b\u3099\u3044", "\u304a\u305f\u304f", "\u304a\u305f\u3099\u3084\u304b", "\u304a\u3061\u3064\u304f", "\u304a\u3063\u3068", "\u304a\u3064\u308a", "\u304a\u3066\u3099\u304b\u3051", "\u304a\u3068\u3057\u3082\u306e", "\u304a\u3068\u306a\u3057\u3044", "\u304a\u3068\u3099\u308a", "\u304a\u3068\u3099\u308d\u304b\u3059", "\u304a\u306f\u3099\u3055\u3093", "\u304a\u307e\u3044\u308a", "\u304a\u3081\u3066\u3099\u3068\u3046", "\u304a\u3082\u3044\u3066\u3099", "\u304a\u3082\u3046", "\u304a\u3082\u305f\u3044", "\u304a\u3082\u3061\u3083", "\u304a\u3084\u3064", "\u304a\u3084\u3086\u3072\u3099", "\u304a\u3088\u307b\u3099\u3059", "\u304a\u3089\u3093\u305f\u3099", "\u304a\u308d\u3059", "\u304a\u3093\u304b\u3099\u304f", "\u304a\u3093\u3051\u3044", "\u304a\u3093\u3057\u3083", "\u304a\u3093\u305b\u3093", "\u304a\u3093\u305f\u3099\u3093", "\u304a\u3093\u3061\u3085\u3046", "\u304a\u3093\u3068\u3099\u3051\u3044", "\u304b\u3042\u3064", "\u304b\u3044\u304b\u3099", "\u304b\u3099\u3044\u304d", "\u304b\u3099\u3044\u3051\u3093", "\u304b\u3099\u3044\u3053\u3046", "\u304b\u3044\u3055\u3064", "\u304b\u3044\u3057\u3083", "\u304b\u3044\u3059\u3044\u3088\u304f", "\u304b\u3044\u305b\u3099\u3093", "\u304b\u3044\u305d\u3099\u3046\u3068\u3099", "\u304b\u3044\u3064\u3046", "\u304b\u3044\u3066\u3093", "\u304b\u3044\u3068\u3046", "\u304b\u3044\u3075\u304f", "\u304b\u3099\u3044\u3078\u304d", "\u304b\u3044\u307b\u3046", "\u304b\u3044\u3088\u3046", "\u304b\u3099\u3044\u3089\u3044", "\u304b\u3044\u308f", "\u304b\u3048\u308b", "\u304b\u304a\u308a", "\u304b\u304b\u3048\u308b", "\u304b\u304b\u3099\u304f", "\u304b\u304b\u3099\u3057", "\u304b\u304b\u3099\u307f", "\u304b\u304f\u3053\u3099", "\u304b\u304f\u3068\u304f", "\u304b\u3055\u3099\u308b", "\u304b\u3099\u305d\u3099\u3046", "\u304b\u305f\u3044", "\u304b\u305f\u3061", "\u304b\u3099\u3061\u3087\u3046", "\u304b\u3099\u3063\u304d\u3085\u3046", "\u304b\u3099\u3063\u3053\u3046", "\u304b\u3099\u3063\u3055\u3093", "\u304b\u3099\u3063\u3057\u3087\u3046", "\u304b\u306a\u3055\u3099\u308f\u3057", "\u304b\u306e\u3046", "\u304b\u3099\u306f\u304f", "\u304b\u3075\u3099\u304b", "\u304b\u307b\u3046", "\u304b\u307b\u3053\u3099", "\u304b\u307e\u3046", "\u304b\u307e\u307b\u3099\u3053", "\u304b\u3081\u308c\u304a\u3093", "\u304b\u3086\u3044", "\u304b\u3088\u3046\u3072\u3099", "\u304b\u3089\u3044", "\u304b\u308b\u3044", "\u304b\u308d\u3046", "\u304b\u308f\u304f", "\u304b\u308f\u3089", "\u304b\u3099\u3093\u304b", "\u304b\u3093\u3051\u3044", "\u304b\u3093\u3053\u3046", "\u304b\u3093\u3057\u3083", "\u304b\u3093\u305d\u3046", "\u304b\u3093\u305f\u3093", "\u304b\u3093\u3061", "\u304b\u3099\u3093\u306f\u3099\u308b", "\u304d\u3042\u3044", "\u304d\u3042\u3064", "\u304d\u3044\u308d", "\u304d\u3099\u3044\u3093", "\u304d\u3046\u3044", "\u304d\u3046\u3093", "\u304d\u3048\u308b", "\u304d\u304a\u3046", "\u304d\u304a\u304f", "\u304d\u304a\u3061", "\u304d\u304a\u3093", "\u304d\u304b\u3044", "\u304d\u304b\u304f", "\u304d\u304b\u3093\u3057\u3083", "\u304d\u304d\u3066", "\u304d\u304f\u306f\u3099\u308a", "\u304d\u304f\u3089\u3051\u3099", "\u304d\u3051\u3093\u305b\u3044", "\u304d\u3053\u3046", "\u304d\u3053\u3048\u308b", "\u304d\u3053\u304f", "\u304d\u3055\u3044", "\u304d\u3055\u304f", "\u304d\u3055\u307e", "\u304d\u3055\u3089\u304d\u3099", "\u304d\u3099\u3057\u3099\u304b\u304b\u3099\u304f", "\u304d\u3099\u3057\u304d", "\u304d\u3099\u3057\u3099\u305f\u3044\u3051\u3093", "\u304d\u3099\u3057\u3099\u306b\u3063\u3066\u3044", "\u304d\u3099\u3057\u3099\u3085\u3064\u3057\u3083", "\u304d\u3059\u3046", "\u304d\u305b\u3044", "\u304d\u305b\u304d", "\u304d\u305b\u3064", "\u304d\u305d\u3046", "\u304d\u305d\u3099\u304f", "\u304d\u305d\u3099\u3093", "\u304d\u305f\u3048\u308b", "\u304d\u3061\u3087\u3046", "\u304d\u3064\u3048\u3093", "\u304d\u3099\u3063\u3061\u308a", "\u304d\u3064\u3064\u304d", "\u304d\u3064\u306d", "\u304d\u3066\u3044", "\u304d\u3068\u3099\u3046", "\u304d\u3068\u3099\u304f", "\u304d\u306a\u3044", "\u304d\u306a\u304b\u3099", "\u304d\u306a\u3053", "\u304d\u306c\u3053\u3099\u3057", "\u304d\u306d\u3093", "\u304d\u306e\u3046", "\u304d\u306e\u3057\u305f", "\u304d\u306f\u304f", "\u304d\u3072\u3099\u3057\u3044", "\u304d\u3072\u3093", "\u304d\u3075\u304f", "\u304d\u3075\u3099\u3093", "\u304d\u307b\u3099\u3046", "\u304d\u307b\u3093", "\u304d\u307e\u308b", "\u304d\u307f\u3064", "\u304d\u3080\u3059\u3099\u304b\u3057\u3044", "\u304d\u3081\u308b", "\u304d\u3082\u305f\u3099\u3081\u3057", "\u304d\u3082\u3061", "\u304d\u3082\u306e", "\u304d\u3083\u304f", "\u304d\u3084\u304f", "\u304d\u3099\u3085\u3046\u306b\u304f", "\u304d\u3088\u3046", "\u304d\u3087\u3046\u308a\u3085\u3046", "\u304d\u3089\u3044", "\u304d\u3089\u304f", "\u304d\u308a\u3093", "\u304d\u308c\u3044", "\u304d\u308c\u3064", "\u304d\u308d\u304f", "\u304d\u3099\u308d\u3093", "\u304d\u308f\u3081\u308b", "\u304d\u3099\u3093\u3044\u308d", "\u304d\u3093\u304b\u304f\u3057\u3099", "\u304d\u3093\u3057\u3099\u3087", "\u304d\u3093\u3088\u3046\u3072\u3099", "\u304f\u3099\u3042\u3044", "\u304f\u3044\u3059\u3099", "\u304f\u3046\u304b\u3093", "\u304f\u3046\u304d", "\u304f\u3046\u304f\u3099\u3093", "\u304f\u3046\u3053\u3046", "\u304f\u3099\u3046\u305b\u3044", "\u304f\u3046\u305d\u3046", "\u304f\u3099\u3046\u305f\u3089", "\u304f\u3046\u3075\u304f", "\u304f\u3046\u307b\u3099", "\u304f\u304b\u3093", "\u304f\u304d\u3087\u3046", "\u304f\u3051\u3099\u3093", "\u304f\u3099\u3053\u3046", "\u304f\u3055\u3044", "\u304f\u3055\u304d", "\u304f\u3055\u306f\u3099\u306a", "\u304f\u3055\u308b", "\u304f\u3057\u3083\u307f", "\u304f\u3057\u3087\u3046", "\u304f\u3059\u306e\u304d", "\u304f\u3059\u308a\u3086\u3072\u3099", "\u304f\u305b\u3051\u3099", "\u304f\u305b\u3093", "\u304f\u3099\u305f\u3044\u3066\u304d", "\u304f\u305f\u3099\u3055\u308b", "\u304f\u305f\u3072\u3099\u308c\u308b", "\u304f\u3061\u3053\u307f", "\u304f\u3061\u3055\u304d", "\u304f\u3064\u3057\u305f", "\u304f\u3099\u3063\u3059\u308a", "\u304f\u3064\u308d\u304f\u3099", "\u304f\u3068\u3046\u3066\u3093", "\u304f\u3068\u3099\u304f", "\u304f\u306a\u3093", "\u304f\u306d\u304f\u306d", "\u304f\u306e\u3046", "\u304f\u3075\u3046", "\u304f\u307f\u3042\u308f\u305b", "\u304f\u307f\u305f\u3066\u308b", "\u304f\u3081\u308b", "\u304f\u3084\u304f\u3057\u3087", "\u304f\u3089\u3059", "\u304f\u3089\u3078\u3099\u308b", "\u304f\u308b\u307e", "\u304f\u308c\u308b", "\u304f\u308d\u3046", "\u304f\u308f\u3057\u3044", "\u304f\u3099\u3093\u304b\u3093", "\u304f\u3099\u3093\u3057\u3087\u304f", "\u304f\u3099\u3093\u305f\u3044", "\u304f\u3099\u3093\u3066", "\u3051\u3042\u306a", "\u3051\u3044\u304b\u304f", "\u3051\u3044\u3051\u3093", "\u3051\u3044\u3053", "\u3051\u3044\u3055\u3064", "\u3051\u3099\u3044\u3057\u3099\u3085\u3064", "\u3051\u3044\u305f\u3044", "\u3051\u3099\u3044\u306e\u3046\u3057\u3099\u3093", "\u3051\u3044\u308c\u304d", "\u3051\u3044\u308d", "\u3051\u304a\u3068\u3059", "\u3051\u304a\u308a\u3082\u306e", "\u3051\u3099\u304d\u304b", "\u3051\u3099\u304d\u3051\u3099\u3093", "\u3051\u3099\u304d\u305f\u3099\u3093", "\u3051\u3099\u304d\u3061\u3093", "\u3051\u3099\u304d\u3068\u3064", "\u3051\u3099\u304d\u306f", "\u3051\u3099\u304d\u3084\u304f", "\u3051\u3099\u3053\u3046", "\u3051\u3099\u3053\u304f\u3057\u3099\u3087\u3046", "\u3051\u3099\u3055\u3099\u3044", "\u3051\u3055\u304d", "\u3051\u3099\u3055\u3099\u3093", "\u3051\u3057\u304d", "\u3051\u3057\u3053\u3099\u3080", "\u3051\u3057\u3087\u3046", "\u3051\u3099\u3059\u3068", "\u3051\u305f\u306f\u3099", "\u3051\u3061\u3083\u3063\u3075\u309a", "\u3051\u3061\u3089\u3059", "\u3051\u3064\u3042\u3064", "\u3051\u3064\u3044", "\u3051\u3064\u3048\u304d", "\u3051\u3063\u3053\u3093", "\u3051\u3064\u3057\u3099\u3087", "\u3051\u3063\u305b\u304d", "\u3051\u3063\u3066\u3044", "\u3051\u3064\u307e\u3064", "\u3051\u3099\u3064\u3088\u3046\u3072\u3099", "\u3051\u3099\u3064\u308c\u3044", "\u3051\u3064\u308d\u3093", "\u3051\u3099\u3068\u3099\u304f", "\u3051\u3068\u306f\u3099\u3059", "\u3051\u3068\u308b", "\u3051\u306a\u3051\u3099", "\u3051\u306a\u3059", "\u3051\u306a\u307f", "\u3051\u306c\u304d", "\u3051\u3099\u306d\u3064", "\u3051\u306d\u3093", "\u3051\u306f\u3044", "\u3051\u3099\u3072\u3093", "\u3051\u3075\u3099\u304b\u3044", "\u3051\u3099\u307b\u3099\u304f", "\u3051\u307e\u308a", "\u3051\u307f\u304b\u308b", "\u3051\u3080\u3057", "\u3051\u3080\u308a", "\u3051\u3082\u306e", "\u3051\u3089\u3044", "\u3051\u308d\u3051\u308d", "\u3051\u308f\u3057\u3044", "\u3051\u3093\u3044", "\u3051\u3093\u3048\u3064", "\u3051\u3093\u304a", "\u3051\u3093\u304b", "\u3051\u3099\u3093\u304d", "\u3051\u3093\u3051\u3099\u3093", "\u3051\u3093\u3053\u3046", "\u3051\u3093\u3055\u304f", "\u3051\u3093\u3057\u3085\u3046", "\u3051\u3093\u3059\u3046", "\u3051\u3099\u3093\u305d\u3046", "\u3051\u3093\u3061\u304f", "\u3051\u3093\u3066\u3044", "\u3051\u3093\u3068\u3046", "\u3051\u3093\u306a\u3044", "\u3051\u3093\u306b\u3093", "\u3051\u3099\u3093\u3075\u3099\u3064", "\u3051\u3093\u307e", "\u3051\u3093\u307f\u3093", "\u3051\u3093\u3081\u3044", "\u3051\u3093\u3089\u3093", "\u3051\u3093\u308a", "\u3053\u3042\u304f\u307e", "\u3053\u3044\u306c", "\u3053\u3044\u3072\u3099\u3068", "\u3053\u3099\u3046\u3044", "\u3053\u3046\u3048\u3093", "\u3053\u3046\u304a\u3093", "\u3053\u3046\u304b\u3093", "\u3053\u3099\u3046\u304d\u3085\u3046", "\u3053\u3099\u3046\u3051\u3044", "\u3053\u3046\u3053\u3046", "\u3053\u3046\u3055\u3044", "\u3053\u3046\u3057\u3099", "\u3053\u3046\u3059\u3044", "\u3053\u3099\u3046\u305b\u3044", "\u3053\u3046\u305d\u304f", "\u3053\u3046\u305f\u3044", "\u3053\u3046\u3061\u3083", "\u3053\u3046\u3064\u3046", "\u3053\u3046\u3066\u3044", "\u3053\u3046\u3068\u3099\u3046", "\u3053\u3046\u306a\u3044", "\u3053\u3046\u306f\u3044", "\u3053\u3099\u3046\u307b\u3046", "\u3053\u3099\u3046\u307e\u3093", "\u3053\u3046\u3082\u304f", "\u3053\u3046\u308a\u3064", "\u3053\u3048\u308b", "\u3053\u304a\u308a", "\u3053\u3099\u304b\u3044", "\u3053\u3099\u304b\u3099\u3064", "\u3053\u3099\u304b\u3093", "\u3053\u304f\u3053\u3099", "\u3053\u304f\u3055\u3044", "\u3053\u304f\u3068\u3046", "\u3053\u304f\u306a\u3044", "\u3053\u304f\u306f\u304f", "\u3053\u304f\u3099\u307e", "\u3053\u3051\u3044", "\u3053\u3051\u308b", "\u3053\u3053\u306e\u304b", "\u3053\u3053\u308d", "\u3053\u3055\u3081", "\u3053\u3057\u3064", "\u3053\u3059\u3046", "\u3053\u305b\u3044", "\u3053\u305b\u304d", "\u3053\u305b\u3099\u3093", "\u3053\u305d\u305f\u3099\u3066", "\u3053\u305f\u3044", "\u3053\u305f\u3048\u308b", "\u3053\u305f\u3064", "\u3053\u3061\u3087\u3046", "\u3053\u3063\u304b", "\u3053\u3064\u3053\u3064", "\u3053\u3064\u306f\u3099\u3093", "\u3053\u3064\u3075\u3099", "\u3053\u3066\u3044", "\u3053\u3066\u3093", "\u3053\u3068\u304b\u3099\u3089", "\u3053\u3068\u3057", "\u3053\u3068\u306f\u3099", "\u3053\u3068\u308a", "\u3053\u306a\u3053\u3099\u306a", "\u3053\u306d\u3053\u306d", "\u3053\u306e\u307e\u307e", "\u3053\u306e\u307f", "\u3053\u306e\u3088", "\u3053\u3099\u306f\u3093", "\u3053\u3072\u3064\u3057\u3099", "\u3053\u3075\u3046", "\u3053\u3075\u3093", "\u3053\u307b\u3099\u308c\u308b", "\u3053\u3099\u307e\u3042\u3075\u3099\u3089", "\u3053\u307e\u304b\u3044", "\u3053\u3099\u307e\u3059\u308a", "\u3053\u307e\u3064\u306a", "\u3053\u307e\u308b", "\u3053\u3080\u304d\u3099\u3053", "\u3053\u3082\u3057\u3099", "\u3053\u3082\u3061", "\u3053\u3082\u306e", "\u3053\u3082\u3093", "\u3053\u3084\u304f", "\u3053\u3084\u307e", "\u3053\u3086\u3046", "\u3053\u3086\u3072\u3099", "\u3053\u3088\u3044", "\u3053\u3088\u3046", "\u3053\u308a\u308b", "\u3053\u308c\u304f\u3057\u3087\u3093", "\u3053\u308d\u3063\u3051", "\u3053\u308f\u3082\u3066", "\u3053\u308f\u308c\u308b", "\u3053\u3093\u3044\u3093", "\u3053\u3093\u304b\u3044", "\u3053\u3093\u304d", "\u3053\u3093\u3057\u3085\u3046", "\u3053\u3093\u3059\u3044", "\u3053\u3093\u305f\u3099\u3066", "\u3053\u3093\u3068\u3093", "\u3053\u3093\u306a\u3093", "\u3053\u3093\u3072\u3099\u306b", "\u3053\u3093\u307b\u309a\u3093", "\u3053\u3093\u307e\u3051", "\u3053\u3093\u3084", "\u3053\u3093\u308c\u3044", "\u3053\u3093\u308f\u304f", "\u3055\u3099\u3044\u3048\u304d", "\u3055\u3044\u304b\u3044", "\u3055\u3044\u304d\u3093", "\u3055\u3099\u3044\u3051\u3099\u3093", "\u3055\u3099\u3044\u3053", "\u3055\u3044\u3057\u3087", "\u3055\u3044\u305b\u3044", "\u3055\u3099\u3044\u305f\u304f", "\u3055\u3099\u3044\u3061\u3085\u3046", "\u3055\u3044\u3066\u304d", "\u3055\u3099\u3044\u308a\u3087\u3046", "\u3055\u3046\u306a", "\u3055\u304b\u3044\u3057", "\u3055\u304b\u3099\u3059", "\u3055\u304b\u306a", "\u3055\u304b\u307f\u3061", "\u3055\u304b\u3099\u308b", "\u3055\u304d\u3099\u3087\u3046", "\u3055\u304f\u3057", "\u3055\u304f\u3072\u3093", "\u3055\u304f\u3089", "\u3055\u3053\u304f", "\u3055\u3053\u3064", "\u3055\u3059\u3099\u304b\u308b", "\u3055\u3099\u305b\u304d", "\u3055\u305f\u3093", "\u3055\u3064\u3048\u3044", "\u3055\u3099\u3064\u304a\u3093", "\u3055\u3099\u3063\u304b", "\u3055\u3099\u3064\u304b\u3099\u304f", "\u3055\u3063\u304d\u3087\u304f", "\u3055\u3099\u3063\u3057", "\u3055\u3064\u3057\u3099\u3093", "\u3055\u3099\u3063\u305d\u3046", "\u3055\u3064\u305f\u306f\u3099", "\u3055\u3064\u307e\u3044\u3082", "\u3055\u3066\u3044", "\u3055\u3068\u3044\u3082", "\u3055\u3068\u3046", "\u3055\u3068\u304a\u3084", "\u3055\u3068\u3057", "\u3055\u3068\u308b", "\u3055\u306e\u3046", "\u3055\u306f\u3099\u304f", "\u3055\u3072\u3099\u3057\u3044", "\u3055\u3078\u3099\u3064", "\u3055\u307b\u3046", "\u3055\u307b\u3068\u3099", "\u3055\u307e\u3059", "\u3055\u307f\u3057\u3044", "\u3055\u307f\u305f\u3099\u308c", "\u3055\u3080\u3051", "\u3055\u3081\u308b", "\u3055\u3084\u3048\u3093\u3068\u3099\u3046", "\u3055\u3086\u3046", "\u3055\u3088\u3046", "\u3055\u3088\u304f", "\u3055\u3089\u305f\u3099", "\u3055\u3099\u308b\u305d\u306f\u3099", "\u3055\u308f\u3084\u304b", "\u3055\u308f\u308b", "\u3055\u3093\u3044\u3093", "\u3055\u3093\u304b", "\u3055\u3093\u304d\u3083\u304f", "\u3055\u3093\u3053\u3046", "\u3055\u3093\u3055\u3044", "\u3055\u3099\u3093\u3057\u3087", "\u3055\u3093\u3059\u3046", "\u3055\u3093\u305b\u3044", "\u3055\u3093\u305d", "\u3055\u3093\u3061", "\u3055\u3093\u307e", "\u3055\u3093\u307f", "\u3055\u3093\u3089\u3093", "\u3057\u3042\u3044", "\u3057\u3042\u3051\u3099", "\u3057\u3042\u3055\u3063\u3066", "\u3057\u3042\u308f\u305b", "\u3057\u3044\u304f", "\u3057\u3044\u3093", "\u3057\u3046\u3061", "\u3057\u3048\u3044", "\u3057\u304a\u3051", "\u3057\u304b\u3044", "\u3057\u304b\u304f", "\u3057\u3099\u304b\u3093", "\u3057\u3053\u3099\u3068", "\u3057\u3059\u3046", "\u3057\u3099\u305f\u3099\u3044", "\u3057\u305f\u3046\u3051", "\u3057\u305f\u304d\u3099", "\u3057\u305f\u3066", "\u3057\u305f\u307f", "\u3057\u3061\u3087\u3046", "\u3057\u3061\u308a\u3093", "\u3057\u3063\u304b\u308a", "\u3057\u3064\u3057\u3099", "\u3057\u3064\u3082\u3093", "\u3057\u3066\u3044", "\u3057\u3066\u304d", "\u3057\u3066\u3064", "\u3057\u3099\u3066\u3093", "\u3057\u3099\u3068\u3099\u3046", "\u3057\u306a\u304d\u3099\u308c", "\u3057\u306a\u3082\u306e", "\u3057\u306a\u3093", "\u3057\u306d\u307e", "\u3057\u306d\u3093", "\u3057\u306e\u304f\u3099", "\u3057\u306e\u3075\u3099", "\u3057\u306f\u3044", "\u3057\u306f\u3099\u304b\u308a", "\u3057\u306f\u3064", "\u3057\u306f\u3089\u3044", "\u3057\u306f\u3093", "\u3057\u3072\u3087\u3046", "\u3057\u3075\u304f", "\u3057\u3099\u3075\u3099\u3093", "\u3057\u3078\u3044", "\u3057\u307b\u3046", "\u3057\u307b\u3093", "\u3057\u307e\u3046", "\u3057\u307e\u308b", "\u3057\u307f\u3093", "\u3057\u3080\u3051\u308b", "\u3057\u3099\u3080\u3057\u3087", "\u3057\u3081\u3044", "\u3057\u3081\u308b", "\u3057\u3082\u3093", "\u3057\u3083\u3044\u3093", "\u3057\u3083\u3046\u3093", "\u3057\u3083\u304a\u3093", "\u3057\u3099\u3083\u304b\u3099\u3044\u3082", "\u3057\u3084\u304f\u3057\u3087", "\u3057\u3083\u304f\u307b\u3046", "\u3057\u3083\u3051\u3093", "\u3057\u3083\u3053", "\u3057\u3083\u3055\u3099\u3044", "\u3057\u3083\u3057\u3093", "\u3057\u3083\u305b\u3093", "\u3057\u3083\u305d\u3046", "\u3057\u3083\u305f\u3044", "\u3057\u3083\u3061\u3087\u3046", "\u3057\u3083\u3063\u304d\u3093", "\u3057\u3099\u3083\u307e", "\u3057\u3083\u308a\u3093", "\u3057\u3083\u308c\u3044", "\u3057\u3099\u3086\u3046", "\u3057\u3099\u3085\u3046\u3057\u3087", "\u3057\u3085\u304f\u306f\u304f", "\u3057\u3099\u3085\u3057\u3093", "\u3057\u3085\u3063\u305b\u304d", "\u3057\u3085\u307f", "\u3057\u3085\u3089\u306f\u3099", "\u3057\u3099\u3085\u3093\u306f\u3099\u3093", "\u3057\u3087\u3046\u304b\u3044", "\u3057\u3087\u304f\u305f\u304f", "\u3057\u3087\u3063\u3051\u3093", "\u3057\u3087\u3068\u3099\u3046", "\u3057\u3087\u3082\u3064", "\u3057\u3089\u305b\u308b", "\u3057\u3089\u3078\u3099\u308b", "\u3057\u3093\u304b", "\u3057\u3093\u3053\u3046", "\u3057\u3099\u3093\u3057\u3099\u3083", "\u3057\u3093\u305b\u3044\u3057\u3099", "\u3057\u3093\u3061\u304f", "\u3057\u3093\u308a\u3093", "\u3059\u3042\u3051\u3099", "\u3059\u3042\u3057", "\u3059\u3042\u306a", "\u3059\u3099\u3042\u3093", "\u3059\u3044\u3048\u3044", "\u3059\u3044\u304b", "\u3059\u3044\u3068\u3046", "\u3059\u3099\u3044\u3075\u3099\u3093", "\u3059\u3044\u3088\u3046\u3072\u3099", "\u3059\u3046\u304b\u3099\u304f", "\u3059\u3046\u3057\u3099\u3064", "\u3059\u3046\u305b\u3093", "\u3059\u304a\u3068\u3099\u308a", "\u3059\u304d\u307e", "\u3059\u304f\u3046", "\u3059\u304f\u306a\u3044", "\u3059\u3051\u308b", "\u3059\u3053\u3099\u3044", "\u3059\u3053\u3057", "\u3059\u3099\u3055\u3093", "\u3059\u3059\u3099\u3057\u3044", "\u3059\u3059\u3080", "\u3059\u3059\u3081\u308b", "\u3059\u3063\u304b\u308a", "\u3059\u3099\u3063\u3057\u308a", "\u3059\u3099\u3063\u3068", "\u3059\u3066\u304d", "\u3059\u3066\u308b", "\u3059\u306d\u308b", "\u3059\u306e\u3053", "\u3059\u306f\u305f\u3099", "\u3059\u306f\u3099\u3089\u3057\u3044", "\u3059\u3099\u3072\u3087\u3046", "\u3059\u3099\u3075\u3099\u306c\u308c", "\u3059\u3075\u3099\u308a", "\u3059\u3075\u308c", "\u3059\u3078\u3099\u3066", "\u3059\u3078\u3099\u308b", "\u3059\u3099\u307b\u3046", "\u3059\u307b\u3099\u3093", "\u3059\u307e\u3044", "\u3059\u3081\u3057", "\u3059\u3082\u3046", "\u3059\u3084\u304d", "\u3059\u3089\u3059\u3089", "\u3059\u308b\u3081", "\u3059\u308c\u3061\u304b\u3099\u3046", "\u3059\u308d\u3063\u3068", "\u3059\u308f\u308b", "\u3059\u3093\u305b\u3099\u3093", "\u3059\u3093\u307b\u309a\u3046", "\u305b\u3042\u3075\u3099\u3089", "\u305b\u3044\u304b\u3064", "\u305b\u3044\u3051\u3099\u3093", "\u305b\u3044\u3057\u3099", "\u305b\u3044\u3088\u3046", "\u305b\u304a\u3046", "\u305b\u304b\u3044\u304b\u3093", "\u305b\u304d\u306b\u3093", "\u305b\u304d\u3080", "\u305b\u304d\u3086", "\u305b\u304d\u3089\u3093\u3046\u3093", "\u305b\u3051\u3093", "\u305b\u3053\u3046", "\u305b\u3059\u3057\u3099", "\u305b\u305f\u3044", "\u305b\u305f\u3051", "\u305b\u3063\u304b\u304f", "\u305b\u3063\u304d\u3083\u304f", "\u305b\u3099\u3063\u304f", "\u305b\u3063\u3051\u3093", "\u305b\u3063\u3053\u3064", "\u305b\u3063\u3055\u305f\u304f\u307e", "\u305b\u3064\u305d\u3099\u304f", "\u305b\u3064\u305f\u3099\u3093", "\u305b\u3064\u3066\u3099\u3093", "\u305b\u3063\u306f\u309a\u3093", "\u305b\u3064\u3072\u3099", "\u305b\u3064\u3075\u3099\u3093", "\u305b\u3064\u3081\u3044", "\u305b\u3064\u308a\u3064", "\u305b\u306a\u304b", "\u305b\u306e\u3072\u3099", "\u305b\u306f\u306f\u3099", "\u305b\u3072\u3099\u308d", "\u305b\u307b\u3099\u306d", "\u305b\u307e\u3044", "\u305b\u307e\u308b", "\u305b\u3081\u308b", "\u305b\u3082\u305f\u308c", "\u305b\u308a\u3075", "\u305b\u3099\u3093\u3042\u304f", "\u305b\u3093\u3044", "\u305b\u3093\u3048\u3044", "\u305b\u3093\u304b", "\u305b\u3093\u304d\u3087", "\u305b\u3093\u304f", "\u305b\u3093\u3051\u3099\u3093", "\u305b\u3099\u3093\u3053\u3099", "\u305b\u3093\u3055\u3044", "\u305b\u3093\u3057\u3085", "\u305b\u3093\u3059\u3044", "\u305b\u3093\u305b\u3044", "\u305b\u3093\u305d\u3099", "\u305b\u3093\u305f\u304f", "\u305b\u3093\u3061\u3087\u3046", "\u305b\u3093\u3066\u3044", "\u305b\u3093\u3068\u3046", "\u305b\u3093\u306c\u304d", "\u305b\u3093\u306d\u3093", "\u305b\u3093\u306f\u309a\u3044", "\u305b\u3099\u3093\u3075\u3099", "\u305b\u3099\u3093\u307b\u309a\u3046", "\u305b\u3093\u3080", "\u305b\u3093\u3081\u3093\u3057\u3099\u3087", "\u305b\u3093\u3082\u3093", "\u305b\u3093\u3084\u304f", "\u305b\u3093\u3086\u3046", "\u305b\u3093\u3088\u3046", "\u305b\u3099\u3093\u3089", "\u305b\u3099\u3093\u308a\u3083\u304f", "\u305b\u3093\u308c\u3044", "\u305b\u3093\u308d", "\u305d\u3042\u304f", "\u305d\u3044\u3068\u3051\u3099\u308b", "\u305d\u3044\u306d", "\u305d\u3046\u304b\u3099\u3093\u304d\u3087\u3046", "\u305d\u3046\u304d", "\u305d\u3046\u3053\u3099", "\u305d\u3046\u3057\u3093", "\u305d\u3046\u305f\u3099\u3093", "\u305d\u3046\u306a\u3093", "\u305d\u3046\u3072\u3099", "\u305d\u3046\u3081\u3093", "\u305d\u3046\u308a", "\u305d\u3048\u3082\u306e", "\u305d\u3048\u3093", "\u305d\u304b\u3099\u3044", "\u305d\u3051\u3099\u304d", "\u305d\u3053\u3046", "\u305d\u3053\u305d\u3053", "\u305d\u3055\u3099\u3044", "\u305d\u3057\u306a", "\u305d\u305b\u3044", "\u305d\u305b\u3093", "\u305d\u305d\u304f\u3099", "\u305d\u305f\u3099\u3066\u308b", "\u305d\u3064\u3046", "\u305d\u3064\u3048\u3093", "\u305d\u3063\u304b\u3093", "\u305d\u3064\u304d\u3099\u3087\u3046", "\u305d\u3063\u3051\u3064", "\u305d\u3063\u3053\u3046", "\u305d\u3063\u305b\u3093", "\u305d\u3063\u3068", "\u305d\u3068\u304b\u3099\u308f", "\u305d\u3068\u3064\u3099\u3089", "\u305d\u306a\u3048\u308b", "\u305d\u306a\u305f", "\u305d\u3075\u307b\u3099", "\u305d\u307b\u3099\u304f", "\u305d\u307b\u3099\u308d", "\u305d\u307e\u3064", "\u305d\u307e\u308b", "\u305d\u3080\u304f", "\u305d\u3080\u308a\u3048", "\u305d\u3081\u308b", "\u305d\u3082\u305d\u3082", "\u305d\u3088\u304b\u305b\u3099", "\u305d\u3089\u307e\u3081", "\u305d\u308d\u3046", "\u305d\u3093\u304b\u3044", "\u305d\u3093\u3051\u3044", "\u305d\u3093\u3055\u3099\u3044", "\u305d\u3093\u3057\u3064", "\u305d\u3093\u305d\u3099\u304f", "\u305d\u3093\u3061\u3087\u3046", "\u305d\u3099\u3093\u3072\u3099", "\u305d\u3099\u3093\u3075\u3099\u3093", "\u305d\u3093\u307f\u3093", "\u305f\u3042\u3044", "\u305f\u3044\u3044\u3093", "\u305f\u3044\u3046\u3093", "\u305f\u3044\u3048\u304d", "\u305f\u3044\u304a\u3046", "\u305f\u3099\u3044\u304b\u3099\u304f", "\u305f\u3044\u304d", "\u305f\u3044\u304f\u3099\u3046", "\u305f\u3044\u3051\u3093", "\u305f\u3044\u3053", "\u305f\u3044\u3055\u3099\u3044", "\u305f\u3099\u3044\u3057\u3099\u3087\u3046\u3075\u3099", "\u305f\u3099\u3044\u3059\u304d", "\u305f\u3044\u305b\u3064", "\u305f\u3044\u305d\u3046", "\u305f\u3099\u3044\u305f\u3044", "\u305f\u3044\u3061\u3087\u3046", "\u305f\u3044\u3066\u3044", "\u305f\u3099\u3044\u3068\u3099\u3053\u308d", "\u305f\u3044\u306a\u3044", "\u305f\u3044\u306d\u3064", "\u305f\u3044\u306e\u3046", "\u305f\u3044\u306f\u3093", "\u305f\u3099\u3044\u3072\u3087\u3046", "\u305f\u3044\u3075\u3046", "\u305f\u3044\u3078\u3093", "\u305f\u3044\u307b", "\u305f\u3044\u307e\u3064\u306f\u3099\u306a", "\u305f\u3044\u307f\u3093\u304f\u3099", "\u305f\u3044\u3080", "\u305f\u3044\u3081\u3093", "\u305f\u3044\u3084\u304d", "\u305f\u3044\u3088\u3046", "\u305f\u3044\u3089", "\u305f\u3044\u308a\u3087\u304f", "\u305f\u3044\u308b", "\u305f\u3044\u308f\u3093", "\u305f\u3046\u3048", "\u305f\u3048\u308b", "\u305f\u304a\u3059", "\u305f\u304a\u308b", "\u305f\u304a\u308c\u308b", "\u305f\u304b\u3044", "\u305f\u304b\u306d", "\u305f\u304d\u3072\u3099", "\u305f\u304f\u3055\u3093", "\u305f\u3053\u304f", "\u305f\u3053\u3084\u304d", "\u305f\u3055\u3044", "\u305f\u3057\u3055\u3099\u3093", "\u305f\u3099\u3057\u3099\u3083\u308c", "\u305f\u3059\u3051\u308b", "\u305f\u3059\u3099\u3055\u308f\u308b", "\u305f\u305d\u304b\u3099\u308c", "\u305f\u305f\u304b\u3046", "\u305f\u305f\u304f", "\u305f\u305f\u3099\u3057\u3044", "\u305f\u305f\u307f", "\u305f\u3061\u306f\u3099\u306a", "\u305f\u3099\u3063\u304b\u3044", "\u305f\u3099\u3063\u304d\u3083\u304f", "\u305f\u3099\u3063\u3053", "\u305f\u3099\u3063\u3057\u3085\u3064", "\u305f\u3099\u3063\u305f\u3044", "\u305f\u3066\u308b", "\u305f\u3068\u3048\u308b", "\u305f\u306a\u306f\u3099\u305f", "\u305f\u306b\u3093", "\u305f\u306c\u304d", "\u305f\u306e\u3057\u307f", "\u305f\u306f\u3064", "\u305f\u3075\u3099\u3093", "\u305f\u3078\u3099\u308b", "\u305f\u307b\u3099\u3046", "\u305f\u307e\u3053\u3099", "\u305f\u307e\u308b", "\u305f\u3099\u3080\u308b", "\u305f\u3081\u3044\u304d", "\u305f\u3081\u3059", "\u305f\u3081\u308b", "\u305f\u3082\u3064", "\u305f\u3084\u3059\u3044", "\u305f\u3088\u308b", "\u305f\u3089\u3059", "\u305f\u308a\u304d\u307b\u3093\u304b\u3099\u3093", "\u305f\u308a\u3087\u3046", "\u305f\u308a\u308b", "\u305f\u308b\u3068", "\u305f\u308c\u308b", "\u305f\u308c\u3093\u3068", "\u305f\u308d\u3063\u3068", "\u305f\u308f\u3080\u308c\u308b", "\u305f\u3099\u3093\u3042\u3064", "\u305f\u3093\u3044", "\u305f\u3093\u304a\u3093", "\u305f\u3093\u304b", "\u305f\u3093\u304d", "\u305f\u3093\u3051\u3093", "\u305f\u3093\u3053\u3099", "\u305f\u3093\u3055\u3093", "\u305f\u3093\u3057\u3099\u3087\u3046\u3072\u3099", "\u305f\u3099\u3093\u305b\u3044", "\u305f\u3093\u305d\u304f", "\u305f\u3093\u305f\u3044", "\u305f\u3099\u3093\u3061", "\u305f\u3093\u3066\u3044", "\u305f\u3093\u3068\u3046", "\u305f\u3099\u3093\u306a", "\u305f\u3093\u306b\u3093", "\u305f\u3099\u3093\u306d\u3064", "\u305f\u3093\u306e\u3046", "\u305f\u3093\u3072\u309a\u3093", "\u305f\u3099\u3093\u307b\u3099\u3046", "\u305f\u3093\u307e\u3064", "\u305f\u3093\u3081\u3044", "\u305f\u3099\u3093\u308c\u3064", "\u305f\u3099\u3093\u308d", "\u305f\u3099\u3093\u308f", "\u3061\u3042\u3044", "\u3061\u3042\u3093", "\u3061\u3044\u304d", "\u3061\u3044\u3055\u3044", "\u3061\u3048\u3093", "\u3061\u304b\u3044", "\u3061\u304b\u3089", "\u3061\u304d\u3085\u3046", "\u3061\u304d\u3093", "\u3061\u3051\u3044\u3059\u3099", "\u3061\u3051\u3093", "\u3061\u3053\u304f", "\u3061\u3055\u3044", "\u3061\u3057\u304d", "\u3061\u3057\u308a\u3087\u3046", "\u3061\u305b\u3044", "\u3061\u305d\u3046", "\u3061\u305f\u3044", "\u3061\u305f\u3093", "\u3061\u3061\u304a\u3084", "\u3061\u3064\u3057\u3099\u3087", "\u3061\u3066\u304d", "\u3061\u3066\u3093", "\u3061\u306c\u304d", "\u3061\u306c\u308a", "\u3061\u306e\u3046", "\u3061\u3072\u3087\u3046", "\u3061\u3078\u3044\u305b\u3093", "\u3061\u307b\u3046", "\u3061\u307e\u305f", "\u3061\u307f\u3064", "\u3061\u307f\u3068\u3099\u308d", "\u3061\u3081\u3044\u3068\u3099", "\u3061\u3083\u3093\u3053\u306a\u3078\u3099", "\u3061\u3085\u3046\u3044", "\u3061\u3086\u308a\u3087\u304f", "\u3061\u3087\u3046\u3057", "\u3061\u3087\u3055\u304f\u3051\u3093", "\u3061\u3089\u3057", "\u3061\u3089\u307f", "\u3061\u308a\u304b\u3099\u307f", "\u3061\u308a\u3087\u3046", "\u3061\u308b\u3068\u3099", "\u3061\u308f\u308f", "\u3061\u3093\u305f\u3044", "\u3061\u3093\u3082\u304f", "\u3064\u3044\u304b", "\u3064\u3044\u305f\u3061", "\u3064\u3046\u304b", "\u3064\u3046\u3057\u3099\u3087\u3046", "\u3064\u3046\u306f\u3093", "\u3064\u3046\u308f", "\u3064\u304b\u3046", "\u3064\u304b\u308c\u308b", "\u3064\u304f\u306d", "\u3064\u304f\u308b", "\u3064\u3051\u306d", "\u3064\u3051\u308b", "\u3064\u3053\u3099\u3046", "\u3064\u305f\u3048\u308b", "\u3064\u3064\u3099\u304f", "\u3064\u3064\u3057\u3099", "\u3064\u3064\u3080", "\u3064\u3068\u3081\u308b", "\u3064\u306a\u304b\u3099\u308b", "\u3064\u306a\u307f", "\u3064\u306d\u3064\u3099\u306d", "\u3064\u306e\u308b", "\u3064\u3075\u3099\u3059", "\u3064\u307e\u3089\u306a\u3044", "\u3064\u307e\u308b", "\u3064\u307f\u304d", "\u3064\u3081\u305f\u3044", "\u3064\u3082\u308a", "\u3064\u3082\u308b", "\u3064\u3088\u3044", "\u3064\u308b\u307b\u3099", "\u3064\u308b\u307f\u304f", "\u3064\u308f\u3082\u306e", "\u3064\u308f\u308a", "\u3066\u3042\u3057", "\u3066\u3042\u3066", "\u3066\u3042\u307f", "\u3066\u3044\u304a\u3093", "\u3066\u3044\u304b", "\u3066\u3044\u304d", "\u3066\u3044\u3051\u3044", "\u3066\u3044\u3053\u304f", "\u3066\u3044\u3055\u3064", "\u3066\u3044\u3057", "\u3066\u3044\u305b\u3044", "\u3066\u3044\u305f\u3044", "\u3066\u3044\u3068\u3099", "\u3066\u3044\u306d\u3044", "\u3066\u3044\u3072\u3087\u3046", "\u3066\u3044\u3078\u3093", "\u3066\u3044\u307b\u3099\u3046", "\u3066\u3046\u3061", "\u3066\u304a\u304f\u308c", "\u3066\u304d\u3068\u3046", "\u3066\u304f\u3072\u3099", "\u3066\u3099\u3053\u307b\u3099\u3053", "\u3066\u3055\u304d\u3099\u3087\u3046", "\u3066\u3055\u3051\u3099", "\u3066\u3059\u308a", "\u3066\u305d\u3046", "\u3066\u3061\u304b\u3099\u3044", "\u3066\u3061\u3087\u3046", "\u3066\u3064\u304b\u3099\u304f", "\u3066\u3064\u3064\u3099\u304d", "\u3066\u3099\u3063\u306f\u309a", "\u3066\u3064\u307b\u3099\u3046", "\u3066\u3064\u3084", "\u3066\u3099\u306c\u304b\u3048", "\u3066\u306c\u304d", "\u3066\u306c\u304f\u3099\u3044", "\u3066\u306e\u3072\u3089", "\u3066\u306f\u3044", "\u3066\u3075\u3099\u304f\u308d", "\u3066\u3075\u305f\u3099", "\u3066\u307b\u3068\u3099\u304d", "\u3066\u307b\u3093", "\u3066\u307e\u3048", "\u3066\u307e\u304d\u3059\u3099\u3057", "\u3066\u307f\u3057\u3099\u304b", "\u3066\u307f\u3084\u3051\u3099", "\u3066\u3089\u3059", "\u3066\u308c\u3072\u3099", "\u3066\u308f\u3051", "\u3066\u308f\u305f\u3057", "\u3066\u3099\u3093\u3042\u3064", "\u3066\u3093\u3044\u3093", "\u3066\u3093\u304b\u3044", "\u3066\u3093\u304d", "\u3066\u3093\u304f\u3099", "\u3066\u3093\u3051\u3093", "\u3066\u3093\u3053\u3099\u304f", "\u3066\u3093\u3055\u3044", "\u3066\u3093\u3057", "\u3066\u3093\u3059\u3046", "\u3066\u3099\u3093\u3061", "\u3066\u3093\u3066\u304d", "\u3066\u3093\u3068\u3046", "\u3066\u3093\u306a\u3044", "\u3066\u3093\u3075\u309a\u3089", "\u3066\u3093\u307b\u3099\u3046\u305f\u3099\u3044", "\u3066\u3093\u3081\u3064", "\u3066\u3093\u3089\u3093\u304b\u3044", "\u3066\u3099\u3093\u308a\u3087\u304f", "\u3066\u3099\u3093\u308f", "\u3068\u3099\u3042\u3044", "\u3068\u3044\u308c", "\u3068\u3099\u3046\u304b\u3093", "\u3068\u3046\u304d\u3085\u3046", "\u3068\u3099\u3046\u304f\u3099", "\u3068\u3046\u3057", "\u3068\u3046\u3080\u304d\u3099", "\u3068\u304a\u3044", "\u3068\u304a\u304b", "\u3068\u304a\u304f", "\u3068\u304a\u3059", "\u3068\u304a\u308b", "\u3068\u304b\u3044", "\u3068\u304b\u3059", "\u3068\u304d\u304a\u308a", "\u3068\u304d\u3068\u3099\u304d", "\u3068\u304f\u3044", "\u3068\u304f\u3057\u3085\u3046", "\u3068\u304f\u3066\u3093", "\u3068\u304f\u306b", "\u3068\u304f\u3078\u3099\u3064", "\u3068\u3051\u3044", "\u3068\u3051\u308b", "\u3068\u3053\u3084", "\u3068\u3055\u304b", "\u3068\u3057\u3087\u304b\u3093", "\u3068\u305d\u3046", "\u3068\u305f\u3093", "\u3068\u3061\u3085\u3046", "\u3068\u3063\u304d\u3085\u3046", "\u3068\u3063\u304f\u3093", "\u3068\u3064\u305b\u3099\u3093", "\u3068\u3064\u306b\u3085\u3046", "\u3068\u3068\u3099\u3051\u308b", "\u3068\u3068\u306e\u3048\u308b", "\u3068\u306a\u3044", "\u3068\u306a\u3048\u308b", "\u3068\u306a\u308a", "\u3068\u306e\u3055\u307e", "\u3068\u306f\u3099\u3059", "\u3068\u3099\u3075\u3099\u304b\u3099\u308f", "\u3068\u307b\u3046", "\u3068\u307e\u308b", "\u3068\u3081\u308b", "\u3068\u3082\u305f\u3099\u3061", "\u3068\u3082\u308b", "\u3068\u3099\u3088\u3046\u3072\u3099", "\u3068\u3089\u3048\u308b", "\u3068\u3093\u304b\u3064", "\u3068\u3099\u3093\u3075\u3099\u308a", "\u306a\u3044\u304b\u304f", "\u306a\u3044\u3053\u3046", "\u306a\u3044\u3057\u3087", "\u306a\u3044\u3059", "\u306a\u3044\u305b\u3093", "\u306a\u3044\u305d\u3046", "\u306a\u304a\u3059", "\u306a\u304b\u3099\u3044", "\u306a\u304f\u3059", "\u306a\u3051\u3099\u308b", "\u306a\u3053\u3046\u3068\u3099", "\u306a\u3055\u3051", "\u306a\u305f\u3066\u3099\u3053\u3053", "\u306a\u3063\u3068\u3046", "\u306a\u3064\u3084\u3059\u307f", "\u306a\u306a\u304a\u3057", "\u306a\u306b\u3053\u3099\u3068", "\u306a\u306b\u3082\u306e", "\u306a\u306b\u308f", "\u306a\u306e\u304b", "\u306a\u3075\u305f\u3099", "\u306a\u307e\u3044\u304d", "\u306a\u307e\u3048", "\u306a\u307e\u307f", "\u306a\u307f\u305f\u3099", "\u306a\u3081\u3089\u304b", "\u306a\u3081\u308b", "\u306a\u3084\u3080", "\u306a\u3089\u3046", "\u306a\u3089\u3072\u3099", "\u306a\u3089\u3075\u3099", "\u306a\u308c\u308b", "\u306a\u308f\u3068\u3072\u3099", "\u306a\u308f\u306f\u3099\u308a", "\u306b\u3042\u3046", "\u306b\u3044\u304b\u3099\u305f", "\u306b\u3046\u3051", "\u306b\u304a\u3044", "\u306b\u304b\u3044", "\u306b\u304b\u3099\u3066", "\u306b\u304d\u3072\u3099", "\u306b\u304f\u3057\u307f", "\u306b\u304f\u307e\u3093", "\u306b\u3051\u3099\u308b", "\u306b\u3055\u3093\u304b\u305f\u3093\u305d", "\u306b\u3057\u304d", "\u306b\u305b\u3082\u306e", "\u306b\u3061\u3057\u3099\u3087\u3046", "\u306b\u3061\u3088\u3046\u3072\u3099", "\u306b\u3063\u304b", "\u306b\u3063\u304d", "\u306b\u3063\u3051\u3044", "\u306b\u3063\u3053\u3046", "\u306b\u3063\u3055\u3093", "\u306b\u3063\u3057\u3087\u304f", "\u306b\u3063\u3059\u3046", "\u306b\u3063\u305b\u304d", "\u306b\u3063\u3066\u3044", "\u306b\u306a\u3046", "\u306b\u307b\u3093", "\u306b\u307e\u3081", "\u306b\u3082\u3064", "\u306b\u3084\u308a", "\u306b\u3085\u3046\u3044\u3093", "\u306b\u308a\u3093\u3057\u3083", "\u306b\u308f\u3068\u308a", "\u306b\u3093\u3044", "\u306b\u3093\u304b", "\u306b\u3093\u304d", "\u306b\u3093\u3051\u3099\u3093", "\u306b\u3093\u3057\u304d", "\u306b\u3093\u3059\u3099\u3046", "\u306b\u3093\u305d\u3046", "\u306b\u3093\u305f\u3044", "\u306b\u3093\u3061", "\u306b\u3093\u3066\u3044", "\u306b\u3093\u306b\u304f", "\u306b\u3093\u3075\u309a", "\u306b\u3093\u307e\u308a", "\u306b\u3093\u3080", "\u306b\u3093\u3081\u3044", "\u306b\u3093\u3088\u3046", "\u306c\u3044\u304f\u304d\u3099", "\u306c\u304b\u3059", "\u306c\u304f\u3099\u3044\u3068\u308b", "\u306c\u304f\u3099\u3046", "\u306c\u304f\u3082\u308a", "\u306c\u3059\u3080", "\u306c\u307e\u3048\u3072\u3099", "\u306c\u3081\u308a", "\u306c\u3089\u3059", "\u306c\u3093\u3061\u3083\u304f", "\u306d\u3042\u3051\u3099", "\u306d\u3044\u304d", "\u306d\u3044\u308b", "\u306d\u3044\u308d", "\u306d\u304f\u3099\u305b", "\u306d\u304f\u305f\u3044", "\u306d\u304f\u3089", "\u306d\u3053\u305b\u3099", "\u306d\u3053\u3080", "\u306d\u3055\u3051\u3099", "\u306d\u3059\u3053\u3099\u3059", "\u306d\u305d\u3078\u3099\u308b", "\u306d\u305f\u3099\u3093", "\u306d\u3064\u3044", "\u306d\u3063\u3057\u3093", "\u306d\u3064\u305d\u3099\u3046", "\u306d\u3063\u305f\u3044\u304d\u3099\u3087", "\u306d\u3075\u3099\u305d\u304f", "\u306d\u3075\u305f\u3099", "\u306d\u307b\u3099\u3046", "\u306d\u307b\u308a\u306f\u307b\u308a", "\u306d\u307e\u304d", "\u306d\u307e\u308f\u3057", "\u306d\u307f\u307f", "\u306d\u3080\u3044", "\u306d\u3080\u305f\u3044", "\u306d\u3082\u3068", "\u306d\u3089\u3046", "\u306d\u308f\u3055\u3099", "\u306d\u3093\u3044\u308a", "\u306d\u3093\u304a\u3057", "\u306d\u3093\u304b\u3093", "\u306d\u3093\u304d\u3093", "\u306d\u3093\u304f\u3099", "\u306d\u3093\u3055\u3099", "\u306d\u3093\u3057", "\u306d\u3093\u3061\u3083\u304f", "\u306d\u3093\u3068\u3099", "\u306d\u3093\u3072\u309a", "\u306d\u3093\u3075\u3099\u3064", "\u306d\u3093\u307e\u3064", "\u306d\u3093\u308a\u3087\u3046", "\u306d\u3093\u308c\u3044", "\u306e\u3044\u3059\u3099", "\u306e\u304a\u3064\u3099\u307e", "\u306e\u304b\u3099\u3059", "\u306e\u304d\u306a\u307f", "\u306e\u3053\u304d\u3099\u308a", "\u306e\u3053\u3059", "\u306e\u3053\u308b", "\u306e\u305b\u308b", "\u306e\u305d\u3099\u304f", "\u306e\u305d\u3099\u3080", "\u306e\u305f\u307e\u3046", "\u306e\u3061\u307b\u3068\u3099", "\u306e\u3063\u304f", "\u306e\u306f\u3099\u3059", "\u306e\u306f\u3089", "\u306e\u3078\u3099\u308b", "\u306e\u307b\u3099\u308b", "\u306e\u307f\u3082\u306e", "\u306e\u3084\u307e", "\u306e\u3089\u3044\u306c", "\u306e\u3089\u306d\u3053", "\u306e\u308a\u3082\u306e", "\u306e\u308a\u3086\u304d", "\u306e\u308c\u3093", "\u306e\u3093\u304d", "\u306f\u3099\u3042\u3044", "\u306f\u3042\u304f", "\u306f\u3099\u3042\u3055\u3093", "\u306f\u3099\u3044\u304b", "\u306f\u3099\u3044\u304f", "\u306f\u3044\u3051\u3093", "\u306f\u3044\u3053\u3099", "\u306f\u3044\u3057\u3093", "\u306f\u3044\u3059\u3044", "\u306f\u3044\u305b\u3093", "\u306f\u3044\u305d\u3046", "\u306f\u3044\u3061", "\u306f\u3099\u3044\u306f\u3099\u3044", "\u306f\u3044\u308c\u3064", "\u306f\u3048\u308b", "\u306f\u304a\u308b", "\u306f\u304b\u3044", "\u306f\u3099\u304b\u308a", "\u306f\u304b\u308b", "\u306f\u304f\u3057\u3085", "\u306f\u3051\u3093", "\u306f\u3053\u3075\u3099", "\u306f\u3055\u307f", "\u306f\u3055\u3093", "\u306f\u3057\u3053\u3099", "\u306f\u3099\u3057\u3087", "\u306f\u3057\u308b", "\u306f\u305b\u308b", "\u306f\u309a\u305d\u3053\u3093", "\u306f\u305d\u3093", "\u306f\u305f\u3093", "\u306f\u3061\u307f\u3064", "\u306f\u3064\u304a\u3093", "\u306f\u3063\u304b\u304f", "\u306f\u3064\u3099\u304d", "\u306f\u3063\u304d\u308a", "\u306f\u3063\u304f\u3064", "\u306f\u3063\u3051\u3093", "\u306f\u3063\u3053\u3046", "\u306f\u3063\u3055\u3093", "\u306f\u3063\u3057\u3093", "\u306f\u3063\u305f\u3064", "\u306f\u3063\u3061\u3085\u3046", "\u306f\u3063\u3066\u3093", "\u306f\u3063\u3072\u309a\u3087\u3046", "\u306f\u3063\u307b\u309a\u3046", "\u306f\u306a\u3059", "\u306f\u306a\u3072\u3099", "\u306f\u306b\u304b\u3080", "\u306f\u3075\u3099\u3089\u3057", "\u306f\u307f\u304b\u3099\u304d", "\u306f\u3080\u304b\u3046", "\u306f\u3081\u3064", "\u306f\u3084\u3044", "\u306f\u3084\u3057", "\u306f\u3089\u3046", "\u306f\u308d\u3046\u3043\u3093", "\u306f\u308f\u3044", "\u306f\u3093\u3044", "\u306f\u3093\u3048\u3044", "\u306f\u3093\u304a\u3093", "\u306f\u3093\u304b\u304f", "\u306f\u3093\u304d\u3087\u3046", "\u306f\u3099\u3093\u304f\u3099\u307f", "\u306f\u3093\u3053", "\u306f\u3093\u3057\u3083", "\u306f\u3093\u3059\u3046", "\u306f\u3093\u305f\u3099\u3093", "\u306f\u309a\u3093\u3061", "\u306f\u309a\u3093\u3064", "\u306f\u3093\u3066\u3044", "\u306f\u3093\u3068\u3057", "\u306f\u3093\u306e\u3046", "\u306f\u3093\u306f\u309a", "\u306f\u3093\u3075\u3099\u3093", "\u306f\u3093\u3078\u309a\u3093", "\u306f\u3093\u307b\u3099\u3046\u304d", "\u306f\u3093\u3081\u3044", "\u306f\u3093\u3089\u3093", "\u306f\u3093\u308d\u3093", "\u3072\u3044\u304d", "\u3072\u3046\u3093", "\u3072\u3048\u308b", "\u3072\u304b\u304f", "\u3072\u304b\u308a", "\u3072\u304b\u308b", "\u3072\u304b\u3093", "\u3072\u304f\u3044", "\u3072\u3051\u3064", "\u3072\u3053\u3046\u304d", "\u3072\u3053\u304f", "\u3072\u3055\u3044", "\u3072\u3055\u3057\u3075\u3099\u308a", "\u3072\u3055\u3093", "\u3072\u3099\u3057\u3099\u3085\u3064\u304b\u3093", "\u3072\u3057\u3087", "\u3072\u305d\u304b", "\u3072\u305d\u3080", "\u3072\u305f\u3080\u304d", "\u3072\u305f\u3099\u308a", "\u3072\u305f\u308b", "\u3072\u3064\u304d\u3099", "\u3072\u3063\u3053\u3057", "\u3072\u3063\u3057", "\u3072\u3064\u3057\u3099\u3085\u3072\u3093", "\u3072\u3063\u3059", "\u3072\u3064\u305b\u3099\u3093", "\u3072\u309a\u3063\u305f\u308a", "\u3072\u309a\u3063\u3061\u308a", "\u3072\u3064\u3088\u3046", "\u3072\u3066\u3044", "\u3072\u3068\u3053\u3099\u307f", "\u3072\u306a\u307e\u3064\u308a", "\u3072\u306a\u3093", "\u3072\u306d\u308b", "\u3072\u306f\u3093", "\u3072\u3072\u3099\u304f", "\u3072\u3072\u3087\u3046", "\u3072\u307b\u3046", "\u3072\u307e\u308f\u308a", "\u3072\u307e\u3093", "\u3072\u307f\u3064", "\u3072\u3081\u3044", "\u3072\u3081\u3057\u3099\u3057", "\u3072\u3084\u3051", "\u3072\u3084\u3059", "\u3072\u3088\u3046", "\u3072\u3099\u3087\u3046\u304d", "\u3072\u3089\u304b\u3099\u306a", "\u3072\u3089\u304f", "\u3072\u308a\u3064", "\u3072\u308a\u3087\u3046", "\u3072\u308b\u307e", "\u3072\u308b\u3084\u3059\u307f", "\u3072\u308c\u3044", "\u3072\u308d\u3044", "\u3072\u308d\u3046", "\u3072\u308d\u304d", "\u3072\u308d\u3086\u304d", "\u3072\u3093\u304b\u304f", "\u3072\u3093\u3051\u3064", "\u3072\u3093\u3053\u3093", "\u3072\u3093\u3057\u3085", "\u3072\u3093\u305d\u3046", "\u3072\u309a\u3093\u3061", "\u3072\u3093\u306f\u309a\u3093", "\u3072\u3099\u3093\u307b\u3099\u3046", "\u3075\u3042\u3093", "\u3075\u3044\u3046\u3061", "\u3075\u3046\u3051\u3044", "\u3075\u3046\u305b\u3093", "\u3075\u309a\u3046\u305f\u308d\u3046", "\u3075\u3046\u3068\u3046", "\u3075\u3046\u3075", "\u3075\u3048\u308b", "\u3075\u304a\u3093", "\u3075\u304b\u3044", "\u3075\u304d\u3093", "\u3075\u304f\u3055\u3099\u3064", "\u3075\u304f\u3075\u3099\u304f\u308d", "\u3075\u3053\u3046", "\u3075\u3055\u3044", "\u3075\u3057\u304d\u3099", "\u3075\u3057\u3099\u307f", "\u3075\u3059\u307e", "\u3075\u305b\u3044", "\u3075\u305b\u304f\u3099", "\u3075\u305d\u304f", "\u3075\u3099\u305f\u306b\u304f", "\u3075\u305f\u3093", "\u3075\u3061\u3087\u3046", "\u3075\u3064\u3046", "\u3075\u3064\u304b", "\u3075\u3063\u304b\u3064", "\u3075\u3063\u304d", "\u3075\u3063\u3053\u304f", "\u3075\u3099\u3068\u3099\u3046", "\u3075\u3068\u308b", "\u3075\u3068\u3093", "\u3075\u306e\u3046", "\u3075\u306f\u3044", "\u3075\u3072\u3087\u3046", "\u3075\u3078\u3093", "\u3075\u307e\u3093", "\u3075\u307f\u3093", "\u3075\u3081\u3064", "\u3075\u3081\u3093", "\u3075\u3088\u3046", "\u3075\u308a\u3053", "\u3075\u308a\u308b", "\u3075\u308b\u3044", "\u3075\u3093\u3044\u304d", "\u3075\u3099\u3093\u304b\u3099\u304f", "\u3075\u3099\u3093\u304f\u3099", "\u3075\u3093\u3057\u3064", "\u3075\u3099\u3093\u305b\u304d", "\u3075\u3093\u305d\u3046", "\u3075\u3099\u3093\u307b\u309a\u3046", "\u3078\u3044\u3042\u3093", "\u3078\u3044\u304a\u3093", "\u3078\u3044\u304b\u3099\u3044", "\u3078\u3044\u304d", "\u3078\u3044\u3051\u3099\u3093", "\u3078\u3044\u3053\u3046", "\u3078\u3044\u3055", "\u3078\u3044\u3057\u3083", "\u3078\u3044\u305b\u3064", "\u3078\u3044\u305d", "\u3078\u3044\u305f\u304f", "\u3078\u3044\u3066\u3093", "\u3078\u3044\u306d\u3064", "\u3078\u3044\u308f", "\u3078\u304d\u304b\u3099", "\u3078\u3053\u3080", "\u3078\u3099\u306b\u3044\u308d", "\u3078\u3099\u306b\u3057\u3087\u3046\u304b\u3099", "\u3078\u3089\u3059", "\u3078\u3093\u304b\u3093", "\u3078\u3099\u3093\u304d\u3087\u3046", "\u3078\u3099\u3093\u3053\u3099\u3057", "\u3078\u3093\u3055\u3044", "\u3078\u3093\u305f\u3044", "\u3078\u3099\u3093\u308a", "\u307b\u3042\u3093", "\u307b\u3044\u304f", "\u307b\u3099\u3046\u304d\u3099\u3087", "\u307b\u3046\u3053\u304f", "\u307b\u3046\u305d\u3046", "\u307b\u3046\u307b\u3046", "\u307b\u3046\u3082\u3093", "\u307b\u3046\u308a\u3064", "\u307b\u3048\u308b", "\u307b\u304a\u3093", "\u307b\u304b\u3093", "\u307b\u304d\u3087\u3046", "\u307b\u3099\u304d\u3093", "\u307b\u304f\u308d", "\u307b\u3051\u3064", "\u307b\u3051\u3093", "\u307b\u3053\u3046", "\u307b\u3053\u308b", "\u307b\u3057\u3044", "\u307b\u3057\u3064", "\u307b\u3057\u3085", "\u307b\u3057\u3087\u3046", "\u307b\u305b\u3044", "\u307b\u305d\u3044", "\u307b\u305d\u304f", "\u307b\u305f\u3066", "\u307b\u305f\u308b", "\u307b\u309a\u3061\u3075\u3099\u304f\u308d", "\u307b\u3063\u304d\u3087\u304f", "\u307b\u3063\u3055", "\u307b\u3063\u305f\u3093", "\u307b\u3068\u3093\u3068\u3099", "\u307b\u3081\u308b", "\u307b\u3093\u3044", "\u307b\u3093\u304d", "\u307b\u3093\u3051", "\u307b\u3093\u3057\u3064", "\u307b\u3093\u3084\u304f", "\u307e\u3044\u306b\u3061", "\u307e\u304b\u3044", "\u307e\u304b\u305b\u308b", "\u307e\u304b\u3099\u308b", "\u307e\u3051\u308b", "\u307e\u3053\u3068", "\u307e\u3055\u3064", "\u307e\u3057\u3099\u3081", "\u307e\u3059\u304f", "\u307e\u305b\u3099\u308b", "\u307e\u3064\u308a", "\u307e\u3068\u3081", "\u307e\u306a\u3075\u3099", "\u307e\u306c\u3051", "\u307e\u306d\u304f", "\u307e\u307b\u3046", "\u307e\u3082\u308b", "\u307e\u3086\u3051\u3099", "\u307e\u3088\u3046", "\u307e\u308d\u3084\u304b", "\u307e\u308f\u3059", "\u307e\u308f\u308a", "\u307e\u308f\u308b", "\u307e\u3093\u304b\u3099", "\u307e\u3093\u304d\u3064", "\u307e\u3093\u305d\u3099\u304f", "\u307e\u3093\u306a\u304b", "\u307f\u3044\u3089", "\u307f\u3046\u3061", "\u307f\u3048\u308b", "\u307f\u304b\u3099\u304f", "\u307f\u304b\u305f", "\u307f\u304b\u3093", "\u307f\u3051\u3093", "\u307f\u3053\u3093", "\u307f\u3057\u3099\u304b\u3044", "\u307f\u3059\u3044", "\u307f\u3059\u3048\u308b", "\u307f\u305b\u308b", "\u307f\u3063\u304b", "\u307f\u3064\u304b\u308b", "\u307f\u3064\u3051\u308b", "\u307f\u3066\u3044", "\u307f\u3068\u3081\u308b", "\u307f\u306a\u3068", "\u307f\u306a\u307f\u304b\u3055\u3044", "\u307f\u306d\u3089\u308b", "\u307f\u306e\u3046", "\u307f\u306e\u304b\u3099\u3059", "\u307f\u307b\u3093", "\u307f\u3082\u3068", "\u307f\u3084\u3051\u3099", "\u307f\u3089\u3044", "\u307f\u308a\u3087\u304f", "\u307f\u308f\u304f", "\u307f\u3093\u304b", "\u307f\u3093\u305d\u3099\u304f", "\u3080\u3044\u304b", "\u3080\u3048\u304d", "\u3080\u3048\u3093", "\u3080\u304b\u3044", "\u3080\u304b\u3046", "\u3080\u304b\u3048", "\u3080\u304b\u3057", "\u3080\u304d\u3099\u3061\u3083", "\u3080\u3051\u308b", "\u3080\u3051\u3099\u3093", "\u3080\u3055\u307b\u3099\u308b", "\u3080\u3057\u3042\u3064\u3044", "\u3080\u3057\u306f\u3099", "\u3080\u3057\u3099\u3085\u3093", "\u3080\u3057\u308d", "\u3080\u3059\u3046", "\u3080\u3059\u3053", "\u3080\u3059\u3075\u3099", "\u3080\u3059\u3081", "\u3080\u305b\u308b", "\u3080\u305b\u3093", "\u3080\u3061\u3085\u3046", "\u3080\u306a\u3057\u3044", "\u3080\u306e\u3046", "\u3080\u3084\u307f", "\u3080\u3088\u3046", "\u3080\u3089\u3055\u304d", "\u3080\u308a\u3087\u3046", "\u3080\u308d\u3093", "\u3081\u3044\u3042\u3093", "\u3081\u3044\u3046\u3093", "\u3081\u3044\u3048\u3093", "\u3081\u3044\u304b\u304f", "\u3081\u3044\u304d\u3087\u304f", "\u3081\u3044\u3055\u3044", "\u3081\u3044\u3057", "\u3081\u3044\u305d\u3046", "\u3081\u3044\u3075\u3099\u3064", "\u3081\u3044\u308c\u3044", "\u3081\u3044\u308f\u304f", "\u3081\u304f\u3099\u307e\u308c\u308b", "\u3081\u3055\u3099\u3059", "\u3081\u3057\u305f", "\u3081\u3059\u3099\u3089\u3057\u3044", "\u3081\u305f\u3099\u3064", "\u3081\u307e\u3044", "\u3081\u3084\u3059", "\u3081\u3093\u304d\u3087", "\u3081\u3093\u305b\u304d", "\u3081\u3093\u3068\u3099\u3046", "\u3082\u3046\u3057\u3042\u3051\u3099\u308b", "\u3082\u3046\u3068\u3099\u3046\u3051\u3093", "\u3082\u3048\u308b", "\u3082\u304f\u3057", "\u3082\u304f\u3066\u304d", "\u3082\u304f\u3088\u3046\u3072\u3099", "\u3082\u3061\u308d\u3093", "\u3082\u3068\u3099\u308b", "\u3082\u3089\u3046", "\u3082\u3093\u304f", "\u3082\u3093\u305f\u3099\u3044", "\u3084\u304a\u3084", "\u3084\u3051\u308b", "\u3084\u3055\u3044", "\u3084\u3055\u3057\u3044", "\u3084\u3059\u3044", "\u3084\u3059\u305f\u308d\u3046", "\u3084\u3059\u307f", "\u3084\u305b\u308b", "\u3084\u305d\u3046", "\u3084\u305f\u3044", "\u3084\u3061\u3093", "\u3084\u3063\u3068", "\u3084\u3063\u306f\u309a\u308a", "\u3084\u3075\u3099\u308b", "\u3084\u3081\u308b", "\u3084\u3084\u3053\u3057\u3044", "\u3084\u3088\u3044", "\u3084\u308f\u3089\u304b\u3044", "\u3086\u3046\u304d", "\u3086\u3046\u3072\u3099\u3093\u304d\u3087\u304f", "\u3086\u3046\u3078\u3099", "\u3086\u3046\u3081\u3044", "\u3086\u3051\u3064", "\u3086\u3057\u3085\u3064", "\u3086\u305b\u3093", "\u3086\u305d\u3046", "\u3086\u305f\u304b", "\u3086\u3061\u3083\u304f", "\u3086\u3066\u3099\u308b", "\u3086\u306b\u3085\u3046", "\u3086\u3072\u3099\u308f", "\u3086\u3089\u3044", "\u3086\u308c\u308b", "\u3088\u3046\u3044", "\u3088\u3046\u304b", "\u3088\u3046\u304d\u3085\u3046", "\u3088\u3046\u3057\u3099", "\u3088\u3046\u3059", "\u3088\u3046\u3061\u3048\u3093", "\u3088\u304b\u305b\u3099", "\u3088\u304b\u3093", "\u3088\u304d\u3093", "\u3088\u304f\u305b\u3044", "\u3088\u304f\u307b\u3099\u3046", "\u3088\u3051\u3044", "\u3088\u3053\u3099\u308c\u308b", "\u3088\u3055\u3093", "\u3088\u3057\u3085\u3046", "\u3088\u305d\u3046", "\u3088\u305d\u304f", "\u3088\u3063\u304b", "\u3088\u3066\u3044", "\u3088\u3068\u3099\u304b\u3099\u308f\u304f", "\u3088\u306d\u3064", "\u3088\u3084\u304f", "\u3088\u3086\u3046", "\u3088\u308d\u3053\u3075\u3099", "\u3088\u308d\u3057\u3044", "\u3089\u3044\u3046", "\u3089\u304f\u304b\u3099\u304d", "\u3089\u304f\u3053\u3099", "\u3089\u304f\u3055\u3064", "\u3089\u304f\u305f\u3099", "\u3089\u3057\u3093\u306f\u3099\u3093", "\u3089\u305b\u3093", "\u3089\u305d\u3099\u304f", "\u3089\u305f\u3044", "\u3089\u3063\u304b", "\u3089\u308c\u3064", "\u308a\u3048\u304d", "\u308a\u304b\u3044", "\u308a\u304d\u3055\u304f", "\u308a\u304d\u305b\u3064", "\u308a\u304f\u304f\u3099\u3093", "\u308a\u304f\u3064", "\u308a\u3051\u3093", "\u308a\u3053\u3046", "\u308a\u305b\u3044", "\u308a\u305d\u3046", "\u308a\u305d\u304f", "\u308a\u3066\u3093", "\u308a\u306d\u3093", "\u308a\u3086\u3046", "\u308a\u3085\u3046\u304b\u3099\u304f", "\u308a\u3088\u3046", "\u308a\u3087\u3046\u308a", "\u308a\u3087\u304b\u3093", "\u308a\u3087\u304f\u3061\u3083", "\u308a\u3087\u3053\u3046", "\u308a\u308a\u304f", "\u308a\u308c\u304d", "\u308a\u308d\u3093", "\u308a\u3093\u3053\u3099", "\u308b\u3044\u3051\u3044", "\u308b\u3044\u3055\u3044", "\u308b\u3044\u3057\u3099", "\u308b\u3044\u305b\u304d", "\u308b\u3059\u306f\u3099\u3093", "\u308b\u308a\u304b\u3099\u308f\u3089", "\u308c\u3044\u304b\u3093", "\u308c\u3044\u304d\u3099", "\u308c\u3044\u305b\u3044", "\u308c\u3044\u305d\u3099\u3046\u3053", "\u308c\u3044\u3068\u3046", "\u308c\u3044\u307b\u3099\u3046", "\u308c\u304d\u3057", "\u308c\u304d\u305f\u3099\u3044", "\u308c\u3093\u3042\u3044", "\u308c\u3093\u3051\u3044", "\u308c\u3093\u3053\u3093", "\u308c\u3093\u3055\u3044", "\u308c\u3093\u3057\u3085\u3046", "\u308c\u3093\u305d\u3099\u304f", "\u308c\u3093\u3089\u304f", "\u308d\u3046\u304b", "\u308d\u3046\u3053\u3099", "\u308d\u3046\u3057\u3099\u3093", "\u308d\u3046\u305d\u304f", "\u308d\u304f\u304b\u3099", "\u308d\u3053\u3064", "\u308d\u3057\u3099\u3046\u3089", "\u308d\u3057\u3085\u3064", "\u308d\u305b\u3093", "\u308d\u3066\u3093", "\u308d\u3081\u3093", "\u308d\u308c\u3064", "\u308d\u3093\u304d\u3099", "\u308d\u3093\u306f\u309a", "\u308d\u3093\u3075\u3099\u3093", "\u308d\u3093\u308a", "\u308f\u304b\u3059", "\u308f\u304b\u3081", "\u308f\u304b\u3084\u307e", "\u308f\u304b\u308c\u308b", "\u308f\u3057\u3064", "\u308f\u3057\u3099\u307e\u3057", "\u308f\u3059\u308c\u3082\u306e", "\u308f\u3089\u3046", "\u308f\u308c\u308b"]), type$.JSArray_String);
    B.List_Opy = A._setArrayType(makeConstList([74, 103, 124, 144, 235, 115, 5, 30, 121, 13, 164, 85, 145, 16, 127, 110, 225, 5, 144, 77, 145, 135, 197, 211, 84, 113, 9, 108, 68, 90, 34, 117]), type$.JSArray_int);
    B.WorkerMessageType_Iao = new A.WorkerMessageType(B.List_0_1_2_3, 0, "encrypted");
    B.WorkerMessageType_SsD = new A.WorkerMessageType(B.List_0_3_2_1, 1, "nonEncrypted");
    B.List_OsM = A._setArrayType(makeConstList([B.WorkerMessageType_Iao, B.WorkerMessageType_SsD]), A.findType("JSArray<WorkerMessageType>"));
    B.List_PDJ = A._setArrayType(makeConstList(["aalglad", "aalscholver", "aambeeld", "aangeef", "aanlandig", "aanvaard", "aanwakker", "aapmens", "aarten", "abdicatie", "abnormaal", "abrikoos", "accu", "acuut", "adjudant", "admiraal", "advies", "afbidding", "afdracht", "affaire", "affiche", "afgang", "afkick", "afknap", "aflees", "afmijner", "afname", "afpreekt", "afrader", "afspeel", "aftocht", "aftrek", "afzijdig", "ahornboom", "aktetas", "akzo", "alchemist", "alcohol", "aldaar", "alexander", "alfabet", "alfredo", "alice", "alikruik", "allrisk", "altsax", "alufolie", "alziend", "amai", "ambacht", "ambieer", "amina", "amnestie", "amok", "ampul", "amuzikaal", "angela", "aniek", "antje", "antwerpen", "anya", "aorta", "apache", "apekool", "appelaar", "arganolie", "argeloos", "armoede", "arrenslee", "artritis", "arubaan", "asbak", "ascii", "asgrauw", "asjes", "asml", "aspunt", "asurn", "asveld", "aterling", "atomair", "atrium", "atsma", "atypisch", "auping", "aura", "avifauna", "axiaal", "azoriaan", "azteek", "azuur", "bachelor", "badderen", "badhotel", "badmantel", "badsteden", "balie", "ballans", "balvers", "bamibal", "banneling", "barracuda", "basaal", "batelaan", "batje", "beambte", "bedlamp", "bedwelmd", "befaamd", "begierd", "begraaf", "behield", "beijaard", "bejaagd", "bekaaid", "beks", "bektas", "belaad", "belboei", "belderbos", "beloerd", "beluchten", "bemiddeld", "benadeeld", "benijd", "berechten", "beroemd", "besef", "besseling", "best", "betichten", "bevind", "bevochten", "bevraagd", "bewust", "bidplaats", "biefstuk", "biemans", "biezen", "bijbaan", "bijeenkom", "bijfiguur", "bijkaart", "bijlage", "bijpaard", "bijtgaar", "bijweg", "bimmel", "binck", "bint", "biobak", "biotisch", "biseks", "bistro", "bitter", "bitumen", "bizar", "blad", "bleken", "blender", "bleu", "blief", "blijven", "blozen", "bock", "boef", "boei", "boks", "bolder", "bolus", "bolvormig", "bomaanval", "bombarde", "bomma", "bomtapijt", "bookmaker", "boos", "borg", "bosbes", "boshuizen", "bosloop", "botanicus", "bougie", "bovag", "boxspring", "braad", "brasem", "brevet", "brigade", "brinckman", "bruid", "budget", "buffel", "buks", "bulgaar", "buma", "butaan", "butler", "buuf", "cactus", "cafeetje", "camcorder", "cannabis", "canyon", "capoeira", "capsule", "carkit", "casanova", "catalaan", "ceintuur", "celdeling", "celplasma", "cement", "censeren", "ceramisch", "cerberus", "cerebraal", "cesium", "cirkel", "citeer", "civiel", "claxon", "clenbuterol", "clicheren", "clijsen", "coalitie", "coassistentschap", "coaxiaal", "codetaal", "cofinanciering", "cognac", "coltrui", "comfort", "commandant", "condensaat", "confectie", "conifeer", "convector", "copier", "corfu", "correct", "coup", "couvert", "creatie", "credit", "crematie", "cricket", "croupier", "cruciaal", "cruijff", "cuisine", "culemborg", "culinair", "curve", "cyrano", "dactylus", "dading", "dagblind", "dagje", "daglicht", "dagprijs", "dagranden", "dakdekker", "dakpark", "dakterras", "dalgrond", "dambord", "damkat", "damlengte", "damman", "danenberg", "debbie", "decibel", "defect", "deformeer", "degelijk", "degradant", "dejonghe", "dekken", "deppen", "derek", "derf", "derhalve", "detineren", "devalueer", "diaken", "dicht", "dictaat", "dief", "digitaal", "dijbreuk", "dijkmans", "dimbaar", "dinsdag", "diode", "dirigeer", "disbalans", "dobermann", "doenbaar", "doerak", "dogma", "dokhaven", "dokwerker", "doling", "dolphijn", "dolven", "dombo", "dooraderd", "dopeling", "doping", "draderig", "drama", "drenkbak", "dreumes", "drol", "drug", "duaal", "dublin", "duplicaat", "durven", "dusdanig", "dutchbat", "dutje", "dutten", "duur", "duwwerk", "dwaal", "dweil", "dwing", "dyslexie", "ecostroom", "ecotaks", "educatie", "eeckhout", "eede", "eemland", "eencellig", "eeneiig", "eenruiter", "eenwinter", "eerenberg", "eerrover", "eersel", "eetmaal", "efteling", "egaal", "egtberts", "eickhoff", "eidooier", "eiland", "eind", "eisden", "ekster", "elburg", "elevatie", "elfkoppig", "elfrink", "elftal", "elimineer", "elleboog", "elma", "elodie", "elsa", "embleem", "embolie", "emoe", "emonds", "emplooi", "enduro", "enfin", "engageer", "entourage", "entstof", "epileer", "episch", "eppo", "erasmus", "erboven", "erebaan", "erelijst", "ereronden", "ereteken", "erfhuis", "erfwet", "erger", "erica", "ermitage", "erna", "ernie", "erts", "ertussen", "eruitzien", "ervaar", "erven", "erwt", "esbeek", "escort", "esdoorn", "essing", "etage", "eter", "ethanol", "ethicus", "etholoog", "eufonisch", "eurocent", "evacuatie", "exact", "examen", "executant", "exen", "exit", "exogeen", "exotherm", "expeditie", "expletief", "expres", "extase", "extinctie", "faal", "faam", "fabel", "facultair", "fakir", "fakkel", "faliekant", "fallisch", "famke", "fanclub", "fase", "fatsoen", "fauna", "federaal", "feedback", "feest", "feilbaar", "feitelijk", "felblauw", "figurante", "fiod", "fitheid", "fixeer", "flap", "fleece", "fleur", "flexibel", "flits", "flos", "flow", "fluweel", "foezelen", "fokkelman", "fokpaard", "fokvee", "folder", "follikel", "folmer", "folteraar", "fooi", "foolen", "forfait", "forint", "formule", "fornuis", "fosfaat", "foxtrot", "foyer", "fragiel", "frater", "freak", "freddie", "fregat", "freon", "frijnen", "fructose", "frunniken", "fuiven", "funshop", "furieus", "fysica", "gadget", "galder", "galei", "galg", "galvlieg", "galzuur", "ganesh", "gaswet", "gaza", "gazelle", "geaaid", "gebiecht", "gebufferd", "gedijd", "geef", "geflanst", "gefreesd", "gegaan", "gegijzeld", "gegniffel", "gegraaid", "gehikt", "gehobbeld", "gehucht", "geiser", "geiten", "gekaakt", "gekheid", "gekijf", "gekmakend", "gekocht", "gekskap", "gekte", "gelubberd", "gemiddeld", "geordend", "gepoederd", "gepuft", "gerda", "gerijpt", "geseald", "geshockt", "gesierd", "geslaagd", "gesnaaid", "getracht", "getwijfel", "geuit", "gevecht", "gevlagd", "gewicht", "gezaagd", "gezocht", "ghanees", "giebelen", "giechel", "giepmans", "gips", "giraal", "gistachtig", "gitaar", "glaasje", "gletsjer", "gleuf", "glibberen", "glijbaan", "gloren", "gluipen", "gluren", "gluur", "gnoe", "goddelijk", "godgans", "godschalk", "godzalig", "goeierd", "gogme", "goklustig", "gokwereld", "gonggrijp", "gonje", "goor", "grabbel", "graf", "graveer", "grif", "grolleman", "grom", "groosman", "grubben", "gruijs", "grut", "guacamole", "guido", "guppy", "haazen", "hachelijk", "haex", "haiku", "hakhout", "hakken", "hanegem", "hans", "hanteer", "harrie", "hazebroek", "hedonist", "heil", "heineken", "hekhuis", "hekman", "helbig", "helga", "helwegen", "hengelaar", "herkansen", "hermafrodiet", "hertaald", "hiaat", "hikspoors", "hitachi", "hitparade", "hobo", "hoeve", "holocaust", "hond", "honnepon", "hoogacht", "hotelbed", "hufter", "hugo", "huilbier", "hulk", "humus", "huwbaar", "huwelijk", "hype", "iconisch", "idema", "ideogram", "idolaat", "ietje", "ijker", "ijkheid", "ijklijn", "ijkmaat", "ijkwezen", "ijmuiden", "ijsbox", "ijsdag", "ijselijk", "ijskoud", "ilse", "immuun", "impliceer", "impuls", "inbijten", "inbuigen", "indijken", "induceer", "indy", "infecteer", "inhaak", "inkijk", "inluiden", "inmijnen", "inoefenen", "inpolder", "inrijden", "inslaan", "invitatie", "inwaaien", "ionisch", "isaac", "isolatie", "isotherm", "isra", "italiaan", "ivoor", "jacobs", "jakob", "jammen", "jampot", "jarig", "jehova", "jenever", "jezus", "joana", "jobdienst", "josua", "joule", "juich", "jurk", "juut", "kaas", "kabelaar", "kabinet", "kagenaar", "kajuit", "kalebas", "kalm", "kanjer", "kapucijn", "karregat", "kart", "katvanger", "katwijk", "kegelaar", "keiachtig", "keizer", "kenletter", "kerdijk", "keus", "kevlar", "kezen", "kickback", "kieviet", "kijken", "kikvors", "kilheid", "kilobit", "kilsdonk", "kipschnitzel", "kissebis", "klad", "klagelijk", "klak", "klapbaar", "klaver", "klene", "klets", "klijnhout", "klit", "klok", "klonen", "klotefilm", "kluif", "klumper", "klus", "knabbel", "knagen", "knaven", "kneedbaar", "knmi", "knul", "knus", "kokhals", "komiek", "komkommer", "kompaan", "komrij", "komvormig", "koning", "kopbal", "kopklep", "kopnagel", "koppejan", "koptekst", "kopwand", "koraal", "kosmisch", "kostbaar", "kram", "kraneveld", "kras", "kreling", "krengen", "kribbe", "krik", "kruid", "krulbol", "kuijper", "kuipbank", "kuit", "kuiven", "kutsmoes", "kuub", "kwak", "kwatong", "kwetsbaar", "kwezelaar", "kwijnen", "kwik", "kwinkslag", "kwitantie", "lading", "lakbeits", "lakken", "laklaag", "lakmoes", "lakwijk", "lamheid", "lamp", "lamsbout", "lapmiddel", "larve", "laser", "latijn", "latuw", "lawaai", "laxeerpil", "lebberen", "ledeboer", "leefbaar", "leeman", "lefdoekje", "lefhebber", "legboor", "legsel", "leguaan", "leiplaat", "lekdicht", "lekrijden", "leksteen", "lenen", "leraar", "lesbienne", "leugenaar", "leut", "lexicaal", "lezing", "lieten", "liggeld", "lijdzaam", "lijk", "lijmstang", "lijnschip", "likdoorn", "likken", "liksteen", "limburg", "link", "linoleum", "lipbloem", "lipman", "lispelen", "lissabon", "litanie", "liturgie", "lochem", "loempia", "loesje", "logheid", "lonen", "lonneke", "loom", "loos", "losbaar", "loslaten", "losplaats", "loting", "lotnummer", "lots", "louie", "lourdes", "louter", "lowbudget", "luijten", "luikenaar", "luilak", "luipaard", "luizenbos", "lulkoek", "lumen", "lunzen", "lurven", "lutjeboer", "luttel", "lutz", "luuk", "luwte", "luyendijk", "lyceum", "lynx", "maakbaar", "magdalena", "malheid", "manchet", "manfred", "manhaftig", "mank", "mantel", "marion", "marxist", "masmeijer", "massaal", "matsen", "matverf", "matze", "maude", "mayonaise", "mechanica", "meifeest", "melodie", "meppelink", "midvoor", "midweeks", "midzomer", "miezel", "mijnraad", "minus", "mirck", "mirte", "mispakken", "misraden", "miswassen", "mitella", "moker", "molecule", "mombakkes", "moonen", "mopperaar", "moraal", "morgana", "mormel", "mosselaar", "motregen", "mouw", "mufheid", "mutueel", "muzelman", "naaidoos", "naald", "nadeel", "nadruk", "nagy", "nahon", "naima", "nairobi", "napalm", "napels", "napijn", "napoleon", "narigheid", "narratief", "naseizoen", "nasibal", "navigatie", "nawijn", "negatief", "nekletsel", "nekwervel", "neolatijn", "neonataal", "neptunus", "nerd", "nest", "neuzelaar", "nihiliste", "nijenhuis", "nijging", "nijhoff", "nijl", "nijptang", "nippel", "nokkenas", "noordam", "noren", "normaal", "nottelman", "notulant", "nout", "nuance", "nuchter", "nudorp", "nulde", "nullijn", "nulmeting", "nunspeet", "nylon", "obelisk", "object", "oblie", "obsceen", "occlusie", "oceaan", "ochtend", "ockhuizen", "oerdom", "oergezond", "oerlaag", "oester", "okhuijsen", "olifant", "olijfboer", "omaans", "ombudsman", "omdat", "omdijken", "omdoen", "omgebouwd", "omkeer", "omkomen", "ommegaand", "ommuren", "omroep", "omruil", "omslaan", "omsmeden", "omvaar", "onaardig", "onedel", "onenig", "onheilig", "onrecht", "onroerend", "ontcijfer", "onthaal", "ontvallen", "ontzadeld", "onzacht", "onzin", "onzuiver", "oogappel", "ooibos", "ooievaar", "ooit", "oorarts", "oorhanger", "oorijzer", "oorklep", "oorschelp", "oorworm", "oorzaak", "opdagen", "opdien", "opdweilen", "opel", "opgebaard", "opinie", "opjutten", "opkijken", "opklaar", "opkuisen", "opkwam", "opnaaien", "opossum", "opsieren", "opsmeer", "optreden", "opvijzel", "opvlammen", "opwind", "oraal", "orchidee", "orkest", "ossuarium", "ostendorf", "oublie", "oudachtig", "oudbakken", "oudnoors", "oudshoorn", "oudtante", "oven", "over", "oxidant", "pablo", "pacht", "paktafel", "pakzadel", "paljas", "panharing", "papfles", "paprika", "parochie", "paus", "pauze", "paviljoen", "peek", "pegel", "peigeren", "pekela", "pendant", "penibel", "pepmiddel", "peptalk", "periferie", "perron", "pessarium", "peter", "petfles", "petgat", "peuk", "pfeifer", "picknick", "pief", "pieneman", "pijlkruid", "pijnacker", "pijpelink", "pikdonker", "pikeer", "pilaar", "pionier", "pipet", "piscine", "pissebed", "pitchen", "pixel", "plamuren", "plan", "plausibel", "plegen", "plempen", "pleonasme", "plezant", "podoloog", "pofmouw", "pokdalig", "ponywagen", "popachtig", "popidool", "porren", "positie", "potten", "pralen", "prezen", "prijzen", "privaat", "proef", "prooi", "prozawerk", "pruik", "prul", "publiceer", "puck", "puilen", "pukkelig", "pulveren", "pupil", "puppy", "purmerend", "pustjens", "putemmer", "puzzelaar", "queenie", "quiche", "raam", "raar", "raat", "raes", "ralf", "rally", "ramona", "ramselaar", "ranonkel", "rapen", "rapunzel", "rarekiek", "rarigheid", "rattenhol", "ravage", "reactie", "recreant", "redacteur", "redster", "reewild", "regie", "reijnders", "rein", "replica", "revanche", "rigide", "rijbaan", "rijdansen", "rijgen", "rijkdom", "rijles", "rijnwijn", "rijpma", "rijstafel", "rijtaak", "rijzwepen", "rioleer", "ripdeal", "riphagen", "riskant", "rits", "rivaal", "robbedoes", "robot", "rockact", "rodijk", "rogier", "rohypnol", "rollaag", "rolpaal", "roltafel", "roof", "roon", "roppen", "rosbief", "rosharig", "rosielle", "rotan", "rotleven", "rotten", "rotvaart", "royaal", "royeer", "rubato", "ruby", "ruche", "rudge", "ruggetje", "rugnummer", "rugpijn", "rugtitel", "rugzak", "ruilbaar", "ruis", "ruit", "rukwind", "rulijs", "rumoeren", "rumsdorp", "rumtaart", "runnen", "russchen", "ruwkruid", "saboteer", "saksisch", "salade", "salpeter", "sambabal", "samsam", "satelliet", "satineer", "saus", "scampi", "scarabee", "scenario", "schobben", "schubben", "scout", "secessie", "secondair", "seculair", "sediment", "seeland", "settelen", "setwinst", "sheriff", "shiatsu", "siciliaan", "sidderaal", "sigma", "sijben", "silvana", "simkaart", "sinds", "situatie", "sjaak", "sjardijn", "sjezen", "sjor", "skinhead", "skylab", "slamixen", "sleijpen", "slijkerig", "slordig", "slowaak", "sluieren", "smadelijk", "smiecht", "smoel", "smos", "smukken", "snackcar", "snavel", "sneaker", "sneu", "snijdbaar", "snit", "snorder", "soapbox", "soetekouw", "soigneren", "sojaboon", "solo", "solvabel", "somber", "sommatie", "soort", "soppen", "sopraan", "soundbar", "spanen", "spawater", "spijgat", "spinaal", "spionage", "spiraal", "spleet", "splijt", "spoed", "sporen", "spul", "spuug", "spuw", "stalen", "standaard", "star", "stefan", "stencil", "stijf", "stil", "stip", "stopdas", "stoten", "stoven", "straat", "strobbe", "strubbel", "stucadoor", "stuif", "stukadoor", "subhoofd", "subregent", "sudoku", "sukade", "sulfaat", "surinaams", "suus", "syfilis", "symboliek", "sympathie", "synagoge", "synchroon", "synergie", "systeem", "taanderij", "tabak", "tachtig", "tackelen", "taiwanees", "talman", "tamheid", "tangaslip", "taps", "tarkan", "tarwe", "tasman", "tatjana", "taxameter", "teil", "teisman", "telbaar", "telco", "telganger", "telstar", "tenant", "tepel", "terzet", "testament", "ticket", "tiesinga", "tijdelijk", "tika", "tiksel", "tilleman", "timbaal", "tinsteen", "tiplijn", "tippelaar", "tjirpen", "toezeggen", "tolbaas", "tolgeld", "tolhek", "tolo", "tolpoort", "toltarief", "tolvrij", "tomaat", "tondeuse", "toog", "tooi", "toonbaar", "toos", "topclub", "toppen", "toptalent", "topvrouw", "toque", "torment", "tornado", "tosti", "totdat", "toucheer", "toulouse", "tournedos", "tout", "trabant", "tragedie", "trailer", "traject", "traktaat", "trauma", "tray", "trechter", "tred", "tref", "treur", "troebel", "tros", "trucage", "truffel", "tsaar", "tucht", "tuenter", "tuitelig", "tukje", "tuktuk", "tulp", "tuma", "tureluurs", "twijfel", "twitteren", "tyfoon", "typograaf", "ugandees", "uiachtig", "uier", "uisnipper", "ultiem", "unitair", "uranium", "urbaan", "urendag", "ursula", "uurcirkel", "uurglas", "uzelf", "vaat", "vakantie", "vakleraar", "valbijl", "valpartij", "valreep", "valuatie", "vanmiddag", "vanonder", "varaan", "varken", "vaten", "veenbes", "veeteler", "velgrem", "vellekoop", "velvet", "veneberg", "venlo", "vent", "venusberg", "venw", "veredeld", "verf", "verhaaf", "vermaak", "vernaaid", "verraad", "vers", "veruit", "verzaagd", "vetachtig", "vetlok", "vetmesten", "veto", "vetrek", "vetstaart", "vetten", "veurink", "viaduct", "vibrafoon", "vicariaat", "vieux", "vieveen", "vijfvoud", "villa", "vilt", "vimmetje", "vindbaar", "vips", "virtueel", "visdieven", "visee", "visie", "vlaag", "vleugel", "vmbo", "vocht", "voesenek", "voicemail", "voip", "volg", "vork", "vorselaar", "voyeur", "vracht", "vrekkig", "vreten", "vrije", "vrozen", "vrucht", "vucht", "vugt", "vulkaan", "vulmiddel", "vulva", "vuren", "waas", "wacht", "wadvogel", "wafel", "waffel", "walhalla", "walnoot", "walraven", "wals", "walvis", "wandaad", "wanen", "wanmolen", "want", "warklomp", "warm", "wasachtig", "wasteil", "watt", "webhandel", "weblog", "webpagina", "webzine", "wedereis", "wedstrijd", "weeda", "weert", "wegmaaien", "wegscheer", "wekelijks", "wekken", "wekroep", "wektoon", "weldaad", "welwater", "wendbaar", "wenkbrauw", "wens", "wentelaar", "wervel", "wesseling", "wetboek", "wetmatig", "whirlpool", "wijbrands", "wijdbeens", "wijk", "wijnbes", "wijting", "wild", "wimpelen", "wingebied", "winplaats", "winter", "winzucht", "wipstaart", "wisgerhof", "withaar", "witmaker", "wokkel", "wolf", "wonenden", "woning", "worden", "worp", "wortel", "wrat", "wrijf", "wringen", "yoghurt", "ypsilon", "zaaijer", "zaak", "zacharias", "zakelijk", "zakkam", "zakwater", "zalf", "zalig", "zaniken", "zebracode", "zeeblauw", "zeef", "zeegaand", "zeeuw", "zege", "zegje", "zeil", "zesbaans", "zesenhalf", "zeskantig", "zesmaal", "zetbaas", "zetpil", "zeulen", "ziezo", "zigzag", "zijaltaar", "zijbeuk", "zijlijn", "zijmuur", "zijn", "zijwaarts", "zijzelf", "zilt", "zimmerman", "zinledig", "zinnelijk", "zionist", "zitdag", "zitruimte", "zitzak", "zoal", "zodoende", "zoekbots", "zoem", "zoiets", "zojuist", "zondaar", "zotskap", "zottebol", "zucht", "zuivel", "zulk", "zult", "zuster", "zuur", "zweedijk", "zwendel", "zwepen", "zwiep", "zwijmel", "zworen"]), type$.JSArray_String);
    B.List_QOW = A._setArrayType(makeConstList(["abandon", "abattre", "aboi", "abolir", "aborder", "abri", "absence", "absolu", "abuser", "acacia", "acajou", "accent", "accord", "accrocher", "accuser", "acerbe", "achat", "acheter", "acide", "acier", "acquis", "acte", "action", "adage", "adepte", "adieu", "admettre", "admis", "adorer", "adresser", "aduler", "affaire", "affirmer", "afin", "agacer", "agent", "agir", "agiter", "agonie", "agrafe", "agrume", "aider", "aigle", "aigre", "aile", "ailleurs", "aimant", "aimer", "ainsi", "aise", "ajouter", "alarme", "album", "alcool", "alerte", "algue", "alibi", "aller", "allumer", "alors", "amande", "amener", "amie", "amorcer", "amour", "ample", "amuser", "ananas", "ancien", "anglais", "angoisse", "animal", "anneau", "annoncer", "apercevoir", "apparence", "appel", "apporter", "apprendre", "appuyer", "arbre", "arcade", "arceau", "arche", "ardeur", "argent", "argile", "aride", "arme", "armure", "arracher", "arriver", "article", "asile", "aspect", "assaut", "assez", "assister", "assurer", "astre", "astuce", "atlas", "atroce", "attacher", "attente", "attirer", "aube", "aucun", "audace", "auparavant", "auquel", "aurore", "aussi", "autant", "auteur", "autoroute", "autre", "aval", "avant", "avec", "avenir", "averse", "aveu", "avide", "avion", "avis", "avoir", "avouer", "avril", "azote", "azur", "badge", "bagage", "bague", "bain", "baisser", "balai", "balcon", "balise", "balle", "bambou", "banane", "banc", "bandage", "banjo", "banlieue", "bannir", "banque", "baobab", "barbe", "barque", "barrer", "bassine", "bataille", "bateau", "battre", "baver", "bavoir", "bazar", "beau", "beige", "berger", "besoin", "beurre", "biais", "biceps", "bidule", "bien", "bijou", "bilan", "billet", "blanc", "blason", "bleu", "bloc", "blond", "bocal", "boire", "boiserie", "boiter", "bonbon", "bondir", "bonheur", "bordure", "borgne", "borner", "bosse", "bouche", "bouder", "bouger", "boule", "bourse", "bout", "boxe", "brader", "braise", "branche", "braquer", "bras", "brave", "brebis", "brevet", "brider", "briller", "brin", "brique", "briser", "broche", "broder", "bronze", "brosser", "brouter", "bruit", "brute", "budget", "buffet", "bulle", "bureau", "buriner", "buste", "buter", "butiner", "cabas", "cabinet", "cabri", "cacao", "cacher", "cadeau", "cadre", "cage", "caisse", "caler", "calme", "camarade", "camion", "campagne", "canal", "canif", "capable", "capot", "carat", "caresser", "carie", "carpe", "cartel", "casier", "casque", "casserole", "cause", "cavale", "cave", "ceci", "cela", "celui", "cendre", "cent", "cependant", "cercle", "cerise", "cerner", "certes", "cerveau", "cesser", "chacun", "chair", "chaleur", "chamois", "chanson", "chaque", "charge", "chasse", "chat", "chaud", "chef", "chemin", "cheveu", "chez", "chicane", "chien", "chiffre", "chiner", "chiot", "chlore", "choc", "choix", "chose", "chou", "chute", "cibler", "cidre", "ciel", "cigale", "cinq", "cintre", "cirage", "cirque", "ciseau", "citation", "citer", "citron", "civet", "clairon", "clan", "classe", "clavier", "clef", "climat", "cloche", "cloner", "clore", "clos", "clou", "club", "cobra", "cocon", "coiffer", "coin", "colline", "colon", "combat", "comme", "compte", "conclure", "conduire", "confier", "connu", "conseil", "contre", "convenir", "copier", "cordial", "cornet", "corps", "cosmos", "coton", "couche", "coude", "couler", "coupure", "cour", "couteau", "couvrir", "crabe", "crainte", "crampe", "cran", "creuser", "crever", "crier", "crime", "crin", "crise", "crochet", "croix", "cruel", "cuisine", "cuite", "culot", "culte", "cumul", "cure", "curieux", "cuve", "dame", "danger", "dans", "davantage", "debout", "dedans", "dehors", "delta", "demain", "demeurer", "demi", "dense", "dent", "depuis", "dernier", "descendre", "dessus", "destin", "dette", "deuil", "deux", "devant", "devenir", "devin", "devoir", "dicton", "dieu", "difficile", "digestion", "digue", "diluer", "dimanche", "dinde", "diode", "dire", "diriger", "discours", "disposer", "distance", "divan", "divers", "docile", "docteur", "dodu", "dogme", "doigt", "dominer", "donation", "donjon", "donner", "dopage", "dorer", "dormir", "doseur", "douane", "double", "douche", "douleur", "doute", "doux", "douzaine", "draguer", "drame", "drap", "dresser", "droit", "duel", "dune", "duper", "durant", "durcir", "durer", "eaux", "effacer", "effet", "effort", "effrayant", "elle", "embrasser", "emmener", "emparer", "empire", "employer", "emporter", "enclos", "encore", "endive", "endormir", "endroit", "enduit", "enfant", "enfermer", "enfin", "enfler", "enfoncer", "enfuir", "engager", "engin", "enjeu", "enlever", "ennemi", "ennui", "ensemble", "ensuite", "entamer", "entendre", "entier", "entourer", "entre", "envelopper", "envie", "envoyer", "erreur", "escalier", "espace", "espoir", "esprit", "essai", "essor", "essuyer", "estimer", "exact", "examiner", "excuse", "exemple", "exiger", "exil", "exister", "exode", "expliquer", "exposer", "exprimer", "extase", "fable", "facette", "facile", "fade", "faible", "faim", "faire", "fait", "falloir", "famille", "faner", "farce", "farine", "fatigue", "faucon", "faune", "faute", "faux", "faveur", "favori", "faxer", "feinter", "femme", "fendre", "fente", "ferme", "festin", "feuille", "feutre", "fiable", "fibre", "ficher", "fier", "figer", "figure", "filet", "fille", "filmer", "fils", "filtre", "final", "finesse", "finir", "fiole", "firme", "fixe", "flacon", "flair", "flamme", "flan", "flaque", "fleur", "flocon", "flore", "flot", "flou", "fluide", "fluor", "flux", "focus", "foin", "foire", "foison", "folie", "fonction", "fondre", "fonte", "force", "forer", "forger", "forme", "fort", "fosse", "fouet", "fouine", "foule", "four", "foyer", "frais", "franc", "frapper", "freiner", "frimer", "friser", "frite", "froid", "froncer", "fruit", "fugue", "fuir", "fuite", "fumer", "fureur", "furieux", "fuser", "fusil", "futile", "futur", "gagner", "gain", "gala", "galet", "galop", "gamme", "gant", "garage", "garde", "garer", "gauche", "gaufre", "gaule", "gaver", "gazon", "geler", "genou", "genre", "gens", "gercer", "germer", "geste", "gibier", "gicler", "gilet", "girafe", "givre", "glace", "glisser", "globe", "gloire", "gluant", "gober", "golf", "gommer", "gorge", "gosier", "goutte", "grain", "gramme", "grand", "gras", "grave", "gredin", "griffure", "griller", "gris", "gronder", "gros", "grotte", "groupe", "grue", "guerrier", "guetter", "guider", "guise", "habiter", "hache", "haie", "haine", "halte", "hamac", "hanche", "hangar", "hanter", "haras", "hareng", "harpe", "hasard", "hausse", "haut", "havre", "herbe", "heure", "hibou", "hier", "histoire", "hiver", "hochet", "homme", "honneur", "honte", "horde", "horizon", "hormone", "houle", "housse", "hublot", "huile", "huit", "humain", "humble", "humide", "humour", "hurler", "idole", "igloo", "ignorer", "illusion", "image", "immense", "immobile", "imposer", "impression", "incapable", "inconnu", "index", "indiquer", "infime", "injure", "inox", "inspirer", "instant", "intention", "intime", "inutile", "inventer", "inviter", "iode", "iris", "issue", "ivre", "jade", "jadis", "jamais", "jambe", "janvier", "jardin", "jauge", "jaunisse", "jeter", "jeton", "jeudi", "jeune", "joie", "joindre", "joli", "joueur", "journal", "judo", "juge", "juillet", "juin", "jument", "jungle", "jupe", "jupon", "jurer", "juron", "jury", "jusque", "juste", "kayak", "ketchup", "kilo", "kiwi", "koala", "label", "lacet", "lacune", "laine", "laisse", "lait", "lame", "lancer", "lande", "laque", "lard", "largeur", "larme", "larve", "lasso", "laver", "lendemain", "lentement", "lequel", "lettre", "leur", "lever", "levure", "liane", "libre", "lien", "lier", "lieutenant", "ligne", "ligoter", "liguer", "limace", "limer", "limite", "lingot", "lion", "lire", "lisser", "litre", "livre", "lobe", "local", "logis", "loin", "loisir", "long", "loque", "lors", "lotus", "louer", "loup", "lourd", "louve", "loyer", "lubie", "lucide", "lueur", "luge", "luire", "lundi", "lune", "lustre", "lutin", "lutte", "luxe", "machine", "madame", "magie", "magnifique", "magot", "maigre", "main", "mairie", "maison", "malade", "malheur", "malin", "manche", "manger", "manier", "manoir", "manquer", "marche", "mardi", "marge", "mariage", "marquer", "mars", "masque", "masse", "matin", "mauvais", "meilleur", "melon", "membre", "menacer", "mener", "mensonge", "mentir", "menu", "merci", "merlu", "mesure", "mettre", "meuble", "meunier", "meute", "miche", "micro", "midi", "miel", "miette", "mieux", "milieu", "mille", "mimer", "mince", "mineur", "ministre", "minute", "mirage", "miroir", "miser", "mite", "mixte", "mobile", "mode", "module", "moins", "mois", "moment", "momie", "monde", "monsieur", "monter", "moquer", "moral", "morceau", "mordre", "morose", "morse", "mortier", "morue", "motif", "motte", "moudre", "moule", "mourir", "mousse", "mouton", "mouvement", "moyen", "muer", "muette", "mugir", "muguet", "mulot", "multiple", "munir", "muret", "muse", "musique", "muter", "nacre", "nager", "nain", "naissance", "narine", "narrer", "naseau", "nasse", "nation", "nature", "naval", "navet", "naviguer", "navrer", "neige", "nerf", "nerveux", "neuf", "neutre", "neuve", "neveu", "niche", "nier", "niveau", "noble", "noce", "nocif", "noir", "nomade", "nombre", "nommer", "nord", "norme", "notaire", "notice", "notre", "nouer", "nougat", "nourrir", "nous", "nouveau", "novice", "noyade", "noyer", "nuage", "nuance", "nuire", "nuit", "nulle", "nuque", "oasis", "objet", "obliger", "obscur", "observer", "obtenir", "obus", "occasion", "occuper", "ocre", "octet", "odeur", "odorat", "offense", "officier", "offrir", "ogive", "oiseau", "olive", "ombre", "onctueux", "onduler", "ongle", "onze", "opter", "option", "orageux", "oral", "orange", "orbite", "ordinaire", "ordre", "oreille", "organe", "orgie", "orgueil", "orient", "origan", "orner", "orteil", "ortie", "oser", "osselet", "otage", "otarie", "ouate", "oublier", "ouest", "ours", "outil", "outre", "ouvert", "ouvrir", "ovale", "ozone", "pacte", "page", "paille", "pain", "paire", "paix", "palace", "palissade", "palmier", "palpiter", "panda", "panneau", "papa", "papier", "paquet", "parc", "pardi", "parfois", "parler", "parmi", "parole", "partir", "parvenir", "passer", "pastel", "patin", "patron", "paume", "pause", "pauvre", "paver", "pavot", "payer", "pays", "peau", "peigne", "peinture", "pelage", "pelote", "pencher", "pendre", "penser", "pente", "percer", "perdu", "perle", "permettre", "personne", "perte", "peser", "pesticide", "petit", "peuple", "peur", "phase", "photo", "phrase", "piano", "pied", "pierre", "pieu", "pile", "pilier", "pilote", "pilule", "piment", "pincer", "pinson", "pinte", "pion", "piquer", "pirate", "pire", "piste", "piton", "pitre", "pivot", "pizza", "placer", "plage", "plaire", "plan", "plaque", "plat", "plein", "pleurer", "pliage", "plier", "plonger", "plot", "pluie", "plume", "plus", "pneu", "poche", "podium", "poids", "poil", "point", "poire", "poison", "poitrine", "poivre", "police", "pollen", "pomme", "pompier", "poncer", "pondre", "pont", "portion", "poser", "position", "possible", "poste", "potage", "potin", "pouce", "poudre", "poulet", "poumon", "poupe", "pour", "pousser", "poutre", "pouvoir", "prairie", "premier", "prendre", "presque", "preuve", "prier", "primeur", "prince", "prison", "priver", "prix", "prochain", "produire", "profond", "proie", "projet", "promener", "prononcer", "propre", "prose", "prouver", "prune", "public", "puce", "pudeur", "puiser", "pull", "pulpe", "puma", "punir", "purge", "putois", "quand", "quartier", "quasi", "quatre", "quel", "question", "queue", "quiche", "quille", "quinze", "quitter", "quoi", "rabais", "raboter", "race", "racheter", "racine", "racler", "raconter", "radar", "radio", "rafale", "rage", "ragot", "raideur", "raie", "rail", "raison", "ramasser", "ramener", "rampe", "rance", "rang", "rapace", "rapide", "rapport", "rarement", "rasage", "raser", "rasoir", "rassurer", "rater", "ratio", "rature", "ravage", "ravir", "rayer", "rayon", "rebond", "recevoir", "recherche", "record", "reculer", "redevenir", "refuser", "regard", "regretter", "rein", "rejeter", "rejoindre", "relation", "relever", "religion", "remarquer", "remettre", "remise", "remonter", "remplir", "remuer", "rencontre", "rendre", "renier", "renoncer", "rentrer", "renverser", "repas", "repli", "reposer", "reproche", "requin", "respect", "ressembler", "reste", "retard", "retenir", "retirer", "retour", "retrouver", "revenir", "revoir", "revue", "rhume", "ricaner", "riche", "rideau", "ridicule", "rien", "rigide", "rincer", "rire", "risquer", "rituel", "rivage", "rive", "robe", "robot", "robuste", "rocade", "roche", "rodeur", "rogner", "roman", "rompre", "ronce", "rondeur", "ronger", "roque", "rose", "rosir", "rotation", "rotule", "roue", "rouge", "rouler", "route", "ruban", "rubis", "ruche", "rude", "ruelle", "ruer", "rugby", "rugir", "ruine", "rumeur", "rural", "ruse", "rustre", "sable", "sabot", "sabre", "sacre", "sage", "saint", "saisir", "salade", "salive", "salle", "salon", "salto", "salut", "salve", "samba", "sandale", "sanguin", "sapin", "sarcasme", "satisfaire", "sauce", "sauf", "sauge", "saule", "sauna", "sauter", "sauver", "savoir", "science", "scoop", "score", "second", "secret", "secte", "seigneur", "sein", "seize", "selle", "selon", "semaine", "sembler", "semer", "semis", "sensuel", "sentir", "sept", "serpe", "serrer", "sertir", "service", "seuil", "seulement", "short", "sien", "sigle", "signal", "silence", "silo", "simple", "singe", "sinon", "sinus", "sioux", "sirop", "site", "situation", "skier", "snob", "sobre", "social", "socle", "sodium", "soigner", "soir", "soixante", "soja", "solaire", "soldat", "soleil", "solide", "solo", "solvant", "sombre", "somme", "somnoler", "sondage", "songeur", "sonner", "sorte", "sosie", "sottise", "souci", "soudain", "souffrir", "souhaiter", "soulever", "soumettre", "soupe", "sourd", "soustraire", "soutenir", "souvent", "soyeux", "spectacle", "sport", "stade", "stagiaire", "stand", "star", "statue", "stock", "stop", "store", "style", "suave", "subir", "sucre", "suer", "suffire", "suie", "suite", "suivre", "sujet", "sulfite", "supposer", "surf", "surprendre", "surtout", "surveiller", "tabac", "table", "tabou", "tache", "tacler", "tacot", "tact", "taie", "taille", "taire", "talon", "talus", "tandis", "tango", "tanin", "tant", "taper", "tapis", "tard", "tarif", "tarot", "tarte", "tasse", "taureau", "taux", "taverne", "taxer", "taxi", "tellement", "temple", "tendre", "tenir", "tenter", "tenu", "terme", "ternir", "terre", "test", "texte", "thym", "tibia", "tiers", "tige", "tipi", "tique", "tirer", "tissu", "titre", "toast", "toge", "toile", "toiser", "toiture", "tomber", "tome", "tonne", "tonte", "toque", "torse", "tortue", "totem", "toucher", "toujours", "tour", "tousser", "tout", "toux", "trace", "train", "trame", "tranquille", "travail", "trembler", "trente", "tribu", "trier", "trio", "tripe", "triste", "troc", "trois", "tromper", "tronc", "trop", "trotter", "trouer", "truc", "truite", "tuba", "tuer", "tuile", "turbo", "tutu", "tuyau", "type", "union", "unique", "unir", "unisson", "untel", "urne", "usage", "user", "usiner", "usure", "utile", "vache", "vague", "vaincre", "valeur", "valoir", "valser", "valve", "vampire", "vaseux", "vaste", "veau", "veille", "veine", "velours", "velu", "vendre", "venir", "vent", "venue", "verbe", "verdict", "version", "vertige", "verve", "veste", "veto", "vexer", "vice", "victime", "vide", "vieil", "vieux", "vigie", "vigne", "ville", "vingt", "violent", "virer", "virus", "visage", "viser", "visite", "visuel", "vitamine", "vitrine", "vivant", "vivre", "vocal", "vodka", "vogue", "voici", "voile", "voir", "voisin", "voiture", "volaille", "volcan", "voler", "volt", "votant", "votre", "vouer", "vouloir", "vous", "voyage", "voyou", "vrac", "vrai", "yacht", "yeti", "yeux", "yoga", "zeste", "zinc", "zone", "zoom"]), type$.JSArray_String);
    B.List_QT8 = A._setArrayType(makeConstList([B.DigestAuthHeadersAlg_MD5_0_md5, B.DigestAuthHeadersAlg_iYJ, B.DigestAuthHeadersAlg_4KH, B.DigestAuthHeadersAlg_2Vk, B.DigestAuthHeadersAlg_xHT, B.DigestAuthHeadersAlg_CFv, B.DigestAuthHeadersAlg_vC8, B.DigestAuthHeadersAlg_QWm]), A.findType("JSArray<DigestAuthHeadersAlg>"));
    B.List_QTd = A._setArrayType(makeConstList(["a\u0301baco", "abdomen", "abeja", "abierto", "abogado", "abono", "aborto", "abrazo", "abrir", "abuelo", "abuso", "acabar", "academia", "acceso", "accio\u0301n", "aceite", "acelga", "acento", "aceptar", "a\u0301cido", "aclarar", "acne\u0301", "acoger", "acoso", "activo", "acto", "actriz", "actuar", "acudir", "acuerdo", "acusar", "adicto", "admitir", "adoptar", "adorno", "aduana", "adulto", "ae\u0301reo", "afectar", "aficio\u0301n", "afinar", "afirmar", "a\u0301gil", "agitar", "agoni\u0301a", "agosto", "agotar", "agregar", "agrio", "agua", "agudo", "a\u0301guila", "aguja", "ahogo", "ahorro", "aire", "aislar", "ajedrez", "ajeno", "ajuste", "alacra\u0301n", "alambre", "alarma", "alba", "a\u0301lbum", "alcalde", "aldea", "alegre", "alejar", "alerta", "aleta", "alfiler", "alga", "algodo\u0301n", "aliado", "aliento", "alivio", "alma", "almeja", "almi\u0301bar", "altar", "alteza", "altivo", "alto", "altura", "alumno", "alzar", "amable", "amante", "amapola", "amargo", "amasar", "a\u0301mbar", "a\u0301mbito", "ameno", "amigo", "amistad", "amor", "amparo", "amplio", "ancho", "anciano", "ancla", "andar", "ande\u0301n", "anemia", "a\u0301ngulo", "anillo", "a\u0301nimo", "ani\u0301s", "anotar", "antena", "antiguo", "antojo", "anual", "anular", "anuncio", "an\u0303adir", "an\u0303ejo", "an\u0303o", "apagar", "aparato", "apetito", "apio", "aplicar", "apodo", "aporte", "apoyo", "aprender", "aprobar", "apuesta", "apuro", "arado", "aran\u0303a", "arar", "a\u0301rbitro", "a\u0301rbol", "arbusto", "archivo", "arco", "arder", "ardilla", "arduo", "a\u0301rea", "a\u0301rido", "aries", "armoni\u0301a", "arne\u0301s", "aroma", "arpa", "arpo\u0301n", "arreglo", "arroz", "arruga", "arte", "artista", "asa", "asado", "asalto", "ascenso", "asegurar", "aseo", "asesor", "asiento", "asilo", "asistir", "asno", "asombro", "a\u0301spero", "astilla", "astro", "astuto", "asumir", "asunto", "atajo", "ataque", "atar", "atento", "ateo", "a\u0301tico", "atleta", "a\u0301tomo", "atraer", "atroz", "atu\u0301n", "audaz", "audio", "auge", "aula", "aumento", "ausente", "autor", "aval", "avance", "avaro", "ave", "avellana", "avena", "avestruz", "avio\u0301n", "aviso", "ayer", "ayuda", "ayuno", "azafra\u0301n", "azar", "azote", "azu\u0301car", "azufre", "azul", "baba", "babor", "bache", "bahi\u0301a", "baile", "bajar", "balanza", "balco\u0301n", "balde", "bambu\u0301", "banco", "banda", "ban\u0303o", "barba", "barco", "barniz", "barro", "ba\u0301scula", "basto\u0301n", "basura", "batalla", "bateri\u0301a", "batir", "batuta", "bau\u0301l", "bazar", "bebe\u0301", "bebida", "bello", "besar", "beso", "bestia", "bicho", "bien", "bingo", "blanco", "bloque", "blusa", "boa", "bobina", "bobo", "boca", "bocina", "boda", "bodega", "boina", "bola", "bolero", "bolsa", "bomba", "bondad", "bonito", "bono", "bonsa\u0301i", "borde", "borrar", "bosque", "bote", "boti\u0301n", "bo\u0301veda", "bozal", "bravo", "brazo", "brecha", "breve", "brillo", "brinco", "brisa", "broca", "broma", "bronce", "brote", "bruja", "brusco", "bruto", "buceo", "bucle", "bueno", "buey", "bufanda", "bufo\u0301n", "bu\u0301ho", "buitre", "bulto", "burbuja", "burla", "burro", "buscar", "butaca", "buzo\u0301n", "caballo", "cabeza", "cabina", "cabra", "cacao", "cada\u0301ver", "cadena", "caer", "cafe\u0301", "cai\u0301da", "caima\u0301n", "caja", "cajo\u0301n", "cal", "calamar", "calcio", "caldo", "calidad", "calle", "calma", "calor", "calvo", "cama", "cambio", "camello", "camino", "campo", "ca\u0301ncer", "candil", "canela", "canguro", "canica", "canto", "can\u0303a", "can\u0303o\u0301n", "caoba", "caos", "capaz", "capita\u0301n", "capote", "captar", "capucha", "cara", "carbo\u0301n", "ca\u0301rcel", "careta", "carga", "carin\u0303o", "carne", "carpeta", "carro", "carta", "casa", "casco", "casero", "caspa", "castor", "catorce", "catre", "caudal", "causa", "cazo", "cebolla", "ceder", "cedro", "celda", "ce\u0301lebre", "celoso", "ce\u0301lula", "cemento", "ceniza", "centro", "cerca", "cerdo", "cereza", "cero", "cerrar", "certeza", "ce\u0301sped", "cetro", "chacal", "chaleco", "champu\u0301", "chancla", "chapa", "charla", "chico", "chiste", "chivo", "choque", "choza", "chuleta", "chupar", "ciclo\u0301n", "ciego", "cielo", "cien", "cierto", "cifra", "cigarro", "cima", "cinco", "cine", "cinta", "cipre\u0301s", "circo", "ciruela", "cisne", "cita", "ciudad", "clamor", "clan", "claro", "clase", "clave", "cliente", "clima", "cli\u0301nica", "cobre", "coccio\u0301n", "cochino", "cocina", "coco", "co\u0301digo", "codo", "cofre", "coger", "cohete", "coji\u0301n", "cojo", "cola", "colcha", "colegio", "colgar", "colina", "collar", "colmo", "columna", "combate", "comer", "comida", "co\u0301modo", "compra", "conde", "conejo", "conga", "conocer", "consejo", "contar", "copa", "copia", "corazo\u0301n", "corbata", "corcho", "cordo\u0301n", "corona", "correr", "coser", "cosmos", "costa", "cra\u0301neo", "cra\u0301ter", "crear", "crecer", "crei\u0301do", "crema", "cri\u0301a", "crimen", "cripta", "crisis", "cromo", "cro\u0301nica", "croqueta", "crudo", "cruz", "cuadro", "cuarto", "cuatro", "cubo", "cubrir", "cuchara", "cuello", "cuento", "cuerda", "cuesta", "cueva", "cuidar", "culebra", "culpa", "culto", "cumbre", "cumplir", "cuna", "cuneta", "cuota", "cupo\u0301n", "cu\u0301pula", "curar", "curioso", "curso", "curva", "cutis", "dama", "danza", "dar", "dardo", "da\u0301til", "deber", "de\u0301bil", "de\u0301cada", "decir", "dedo", "defensa", "definir", "dejar", "delfi\u0301n", "delgado", "delito", "demora", "denso", "dental", "deporte", "derecho", "derrota", "desayuno", "deseo", "desfile", "desnudo", "destino", "desvi\u0301o", "detalle", "detener", "deuda", "di\u0301a", "diablo", "diadema", "diamante", "diana", "diario", "dibujo", "dictar", "diente", "dieta", "diez", "difi\u0301cil", "digno", "dilema", "diluir", "dinero", "directo", "dirigir", "disco", "disen\u0303o", "disfraz", "diva", "divino", "doble", "doce", "dolor", "domingo", "don", "donar", "dorado", "dormir", "dorso", "dos", "dosis", "drago\u0301n", "droga", "ducha", "duda", "duelo", "duen\u0303o", "dulce", "du\u0301o", "duque", "durar", "dureza", "duro", "e\u0301bano", "ebrio", "echar", "eco", "ecuador", "edad", "edicio\u0301n", "edificio", "editor", "educar", "efecto", "eficaz", "eje", "ejemplo", "elefante", "elegir", "elemento", "elevar", "elipse", "e\u0301lite", "elixir", "elogio", "eludir", "embudo", "emitir", "emocio\u0301n", "empate", "empen\u0303o", "empleo", "empresa", "enano", "encargo", "enchufe", "enci\u0301a", "enemigo", "enero", "enfado", "enfermo", "engan\u0303o", "enigma", "enlace", "enorme", "enredo", "ensayo", "ensen\u0303ar", "entero", "entrar", "envase", "envi\u0301o", "e\u0301poca", "equipo", "erizo", "escala", "escena", "escolar", "escribir", "escudo", "esencia", "esfera", "esfuerzo", "espada", "espejo", "espi\u0301a", "esposa", "espuma", "esqui\u0301", "estar", "este", "estilo", "estufa", "etapa", "eterno", "e\u0301tica", "etnia", "evadir", "evaluar", "evento", "evitar", "exacto", "examen", "exceso", "excusa", "exento", "exigir", "exilio", "existir", "e\u0301xito", "experto", "explicar", "exponer", "extremo", "fa\u0301brica", "fa\u0301bula", "fachada", "fa\u0301cil", "factor", "faena", "faja", "falda", "fallo", "falso", "faltar", "fama", "familia", "famoso", "farao\u0301n", "farmacia", "farol", "farsa", "fase", "fatiga", "fauna", "favor", "fax", "febrero", "fecha", "feliz", "feo", "feria", "feroz", "fe\u0301rtil", "fervor", "festi\u0301n", "fiable", "fianza", "fiar", "fibra", "ficcio\u0301n", "ficha", "fideo", "fiebre", "fiel", "fiera", "fiesta", "figura", "fijar", "fijo", "fila", "filete", "filial", "filtro", "fin", "finca", "fingir", "finito", "firma", "flaco", "flauta", "flecha", "flor", "flota", "fluir", "flujo", "flu\u0301or", "fobia", "foca", "fogata", "fogo\u0301n", "folio", "folleto", "fondo", "forma", "forro", "fortuna", "forzar", "fosa", "foto", "fracaso", "fra\u0301gil", "franja", "frase", "fraude", "frei\u0301r", "freno", "fresa", "fri\u0301o", "frito", "fruta", "fuego", "fuente", "fuerza", "fuga", "fumar", "funcio\u0301n", "funda", "furgo\u0301n", "furia", "fusil", "fu\u0301tbol", "futuro", "gacela", "gafas", "gaita", "gajo", "gala", "galeri\u0301a", "gallo", "gamba", "ganar", "gancho", "ganga", "ganso", "garaje", "garza", "gasolina", "gastar", "gato", "gavila\u0301n", "gemelo", "gemir", "gen", "ge\u0301nero", "genio", "gente", "geranio", "gerente", "germen", "gesto", "gigante", "gimnasio", "girar", "giro", "glaciar", "globo", "gloria", "gol", "golfo", "goloso", "golpe", "goma", "gordo", "gorila", "gorra", "gota", "goteo", "gozar", "grada", "gra\u0301fico", "grano", "grasa", "gratis", "grave", "grieta", "grillo", "gripe", "gris", "grito", "grosor", "gru\u0301a", "grueso", "grumo", "grupo", "guante", "guapo", "guardia", "guerra", "gui\u0301a", "guin\u0303o", "guion", "guiso", "guitarra", "gusano", "gustar", "haber", "ha\u0301bil", "hablar", "hacer", "hacha", "hada", "hallar", "hamaca", "harina", "haz", "hazan\u0303a", "hebilla", "hebra", "hecho", "helado", "helio", "hembra", "herir", "hermano", "he\u0301roe", "hervir", "hielo", "hierro", "hi\u0301gado", "higiene", "hijo", "himno", "historia", "hocico", "hogar", "hoguera", "hoja", "hombre", "hongo", "honor", "honra", "hora", "hormiga", "horno", "hostil", "hoyo", "hueco", "huelga", "huerta", "hueso", "huevo", "huida", "huir", "humano", "hu\u0301medo", "humilde", "humo", "hundir", "huraca\u0301n", "hurto", "icono", "ideal", "idioma", "i\u0301dolo", "iglesia", "iglu\u0301", "igual", "ilegal", "ilusio\u0301n", "imagen", "ima\u0301n", "imitar", "impar", "imperio", "imponer", "impulso", "incapaz", "i\u0301ndice", "inerte", "infiel", "informe", "ingenio", "inicio", "inmenso", "inmune", "innato", "insecto", "instante", "intere\u0301s", "i\u0301ntimo", "intuir", "inu\u0301til", "invierno", "ira", "iris", "ironi\u0301a", "isla", "islote", "jabali\u0301", "jabo\u0301n", "jamo\u0301n", "jarabe", "jardi\u0301n", "jarra", "jaula", "jazmi\u0301n", "jefe", "jeringa", "jinete", "jornada", "joroba", "joven", "joya", "juerga", "jueves", "juez", "jugador", "jugo", "juguete", "juicio", "junco", "jungla", "junio", "juntar", "ju\u0301piter", "jurar", "justo", "juvenil", "juzgar", "kilo", "koala", "labio", "lacio", "lacra", "lado", "ladro\u0301n", "lagarto", "la\u0301grima", "laguna", "laico", "lamer", "la\u0301mina", "la\u0301mpara", "lana", "lancha", "langosta", "lanza", "la\u0301piz", "largo", "larva", "la\u0301stima", "lata", "la\u0301tex", "latir", "laurel", "lavar", "lazo", "leal", "leccio\u0301n", "leche", "lector", "leer", "legio\u0301n", "legumbre", "lejano", "lengua", "lento", "len\u0303a", "leo\u0301n", "leopardo", "lesio\u0301n", "letal", "letra", "leve", "leyenda", "libertad", "libro", "licor", "li\u0301der", "lidiar", "lienzo", "liga", "ligero", "lima", "li\u0301mite", "limo\u0301n", "limpio", "lince", "lindo", "li\u0301nea", "lingote", "lino", "linterna", "li\u0301quido", "liso", "lista", "litera", "litio", "litro", "llaga", "llama", "llanto", "llave", "llegar", "llenar", "llevar", "llorar", "llover", "lluvia", "lobo", "locio\u0301n", "loco", "locura", "lo\u0301gica", "logro", "lombriz", "lomo", "lonja", "lote", "lucha", "lucir", "lugar", "lujo", "luna", "lunes", "lupa", "lustro", "luto", "luz", "maceta", "macho", "madera", "madre", "maduro", "maestro", "mafia", "magia", "mago", "mai\u0301z", "maldad", "maleta", "malla", "malo", "mama\u0301", "mambo", "mamut", "manco", "mando", "manejar", "manga", "maniqui\u0301", "manjar", "mano", "manso", "manta", "man\u0303ana", "mapa", "ma\u0301quina", "mar", "marco", "marea", "marfil", "margen", "marido", "ma\u0301rmol", "marro\u0301n", "martes", "marzo", "masa", "ma\u0301scara", "masivo", "matar", "materia", "matiz", "matriz", "ma\u0301ximo", "mayor", "mazorca", "mecha", "medalla", "medio", "me\u0301dula", "mejilla", "mejor", "melena", "melo\u0301n", "memoria", "menor", "mensaje", "mente", "menu\u0301", "mercado", "merengue", "me\u0301rito", "mes", "meso\u0301n", "meta", "meter", "me\u0301todo", "metro", "mezcla", "miedo", "miel", "miembro", "miga", "mil", "milagro", "militar", "millo\u0301n", "mimo", "mina", "minero", "mi\u0301nimo", "minuto", "miope", "mirar", "misa", "miseria", "misil", "mismo", "mitad", "mito", "mochila", "mocio\u0301n", "moda", "modelo", "moho", "mojar", "molde", "moler", "molino", "momento", "momia", "monarca", "moneda", "monja", "monto", "mon\u0303o", "morada", "morder", "moreno", "morir", "morro", "morsa", "mortal", "mosca", "mostrar", "motivo", "mover", "mo\u0301vil", "mozo", "mucho", "mudar", "mueble", "muela", "muerte", "muestra", "mugre", "mujer", "mula", "muleta", "multa", "mundo", "mun\u0303eca", "mural", "muro", "mu\u0301sculo", "museo", "musgo", "mu\u0301sica", "muslo", "na\u0301car", "nacio\u0301n", "nadar", "naipe", "naranja", "nariz", "narrar", "nasal", "natal", "nativo", "natural", "na\u0301usea", "naval", "nave", "navidad", "necio", "ne\u0301ctar", "negar", "negocio", "negro", "neo\u0301n", "nervio", "neto", "neutro", "nevar", "nevera", "nicho", "nido", "niebla", "nieto", "nin\u0303ez", "nin\u0303o", "ni\u0301tido", "nivel", "nobleza", "noche", "no\u0301mina", "noria", "norma", "norte", "nota", "noticia", "novato", "novela", "novio", "nube", "nuca", "nu\u0301cleo", "nudillo", "nudo", "nuera", "nueve", "nuez", "nulo", "nu\u0301mero", "nutria", "oasis", "obeso", "obispo", "objeto", "obra", "obrero", "observar", "obtener", "obvio", "oca", "ocaso", "oce\u0301ano", "ochenta", "ocho", "ocio", "ocre", "octavo", "octubre", "oculto", "ocupar", "ocurrir", "odiar", "odio", "odisea", "oeste", "ofensa", "oferta", "oficio", "ofrecer", "ogro", "oi\u0301do", "oi\u0301r", "ojo", "ola", "oleada", "olfato", "olivo", "olla", "olmo", "olor", "olvido", "ombligo", "onda", "onza", "opaco", "opcio\u0301n", "o\u0301pera", "opinar", "oponer", "optar", "o\u0301ptica", "opuesto", "oracio\u0301n", "orador", "oral", "o\u0301rbita", "orca", "orden", "oreja", "o\u0301rgano", "orgi\u0301a", "orgullo", "oriente", "origen", "orilla", "oro", "orquesta", "oruga", "osadi\u0301a", "oscuro", "osezno", "oso", "ostra", "oton\u0303o", "otro", "oveja", "o\u0301vulo", "o\u0301xido", "oxi\u0301geno", "oyente", "ozono", "pacto", "padre", "paella", "pa\u0301gina", "pago", "pai\u0301s", "pa\u0301jaro", "palabra", "palco", "paleta", "pa\u0301lido", "palma", "paloma", "palpar", "pan", "panal", "pa\u0301nico", "pantera", "pan\u0303uelo", "papa\u0301", "papel", "papilla", "paquete", "parar", "parcela", "pared", "parir", "paro", "pa\u0301rpado", "parque", "pa\u0301rrafo", "parte", "pasar", "paseo", "pasio\u0301n", "paso", "pasta", "pata", "patio", "patria", "pausa", "pauta", "pavo", "payaso", "peato\u0301n", "pecado", "pecera", "pecho", "pedal", "pedir", "pegar", "peine", "pelar", "peldan\u0303o", "pelea", "peligro", "pellejo", "pelo", "peluca", "pena", "pensar", "pen\u0303o\u0301n", "peo\u0301n", "peor", "pepino", "pequen\u0303o", "pera", "percha", "perder", "pereza", "perfil", "perico", "perla", "permiso", "perro", "persona", "pesa", "pesca", "pe\u0301simo", "pestan\u0303a", "pe\u0301talo", "petro\u0301leo", "pez", "pezun\u0303a", "picar", "picho\u0301n", "pie", "piedra", "pierna", "pieza", "pijama", "pilar", "piloto", "pimienta", "pino", "pintor", "pinza", "pin\u0303a", "piojo", "pipa", "pirata", "pisar", "piscina", "piso", "pista", "pito\u0301n", "pizca", "placa", "plan", "plata", "playa", "plaza", "pleito", "pleno", "plomo", "pluma", "plural", "pobre", "poco", "poder", "podio", "poema", "poesi\u0301a", "poeta", "polen", "polici\u0301a", "pollo", "polvo", "pomada", "pomelo", "pomo", "pompa", "poner", "porcio\u0301n", "portal", "posada", "poseer", "posible", "poste", "potencia", "potro", "pozo", "prado", "precoz", "pregunta", "premio", "prensa", "preso", "previo", "primo", "pri\u0301ncipe", "prisio\u0301n", "privar", "proa", "probar", "proceso", "producto", "proeza", "profesor", "programa", "prole", "promesa", "pronto", "propio", "pro\u0301ximo", "prueba", "pu\u0301blico", "puchero", "pudor", "pueblo", "puerta", "puesto", "pulga", "pulir", "pulmo\u0301n", "pulpo", "pulso", "puma", "punto", "pun\u0303al", "pun\u0303o", "pupa", "pupila", "pure\u0301", "quedar", "queja", "quemar", "querer", "queso", "quieto", "qui\u0301mica", "quince", "quitar", "ra\u0301bano", "rabia", "rabo", "racio\u0301n", "radical", "rai\u0301z", "rama", "rampa", "rancho", "rango", "rapaz", "ra\u0301pido", "rapto", "rasgo", "raspa", "rato", "rayo", "raza", "razo\u0301n", "reaccio\u0301n", "realidad", "reban\u0303o", "rebote", "recaer", "receta", "rechazo", "recoger", "recreo", "recto", "recurso", "red", "redondo", "reducir", "reflejo", "reforma", "refra\u0301n", "refugio", "regalo", "regir", "regla", "regreso", "rehe\u0301n", "reino", "rei\u0301r", "reja", "relato", "relevo", "relieve", "relleno", "reloj", "remar", "remedio", "remo", "rencor", "rendir", "renta", "reparto", "repetir", "reposo", "reptil", "res", "rescate", "resina", "respeto", "resto", "resumen", "retiro", "retorno", "retrato", "reunir", "reve\u0301s", "revista", "rey", "rezar", "rico", "riego", "rienda", "riesgo", "rifa", "ri\u0301gido", "rigor", "rinco\u0301n", "rin\u0303o\u0301n", "ri\u0301o", "riqueza", "risa", "ritmo", "rito", "rizo", "roble", "roce", "rociar", "rodar", "rodeo", "rodilla", "roer", "rojizo", "rojo", "romero", "romper", "ron", "ronco", "ronda", "ropa", "ropero", "rosa", "rosca", "rostro", "rotar", "rubi\u0301", "rubor", "rudo", "rueda", "rugir", "ruido", "ruina", "ruleta", "rulo", "rumbo", "rumor", "ruptura", "ruta", "rutina", "sa\u0301bado", "saber", "sabio", "sable", "sacar", "sagaz", "sagrado", "sala", "saldo", "salero", "salir", "salmo\u0301n", "salo\u0301n", "salsa", "salto", "salud", "salvar", "samba", "sancio\u0301n", "sandi\u0301a", "sanear", "sangre", "sanidad", "sano", "santo", "sapo", "saque", "sardina", "sarte\u0301n", "sastre", "sata\u0301n", "sauna", "saxofo\u0301n", "seccio\u0301n", "seco", "secreto", "secta", "sed", "seguir", "seis", "sello", "selva", "semana", "semilla", "senda", "sensor", "sen\u0303al", "sen\u0303or", "separar", "sepia", "sequi\u0301a", "ser", "serie", "sermo\u0301n", "servir", "sesenta", "sesio\u0301n", "seta", "setenta", "severo", "sexo", "sexto", "sidra", "siesta", "siete", "siglo", "signo", "si\u0301laba", "silbar", "silencio", "silla", "si\u0301mbolo", "simio", "sirena", "sistema", "sitio", "situar", "sobre", "socio", "sodio", "sol", "solapa", "soldado", "soledad", "so\u0301lido", "soltar", "solucio\u0301n", "sombra", "sondeo", "sonido", "sonoro", "sonrisa", "sopa", "soplar", "soporte", "sordo", "sorpresa", "sorteo", "soste\u0301n", "so\u0301tano", "suave", "subir", "suceso", "sudor", "suegra", "suelo", "suen\u0303o", "suerte", "sufrir", "sujeto", "sulta\u0301n", "sumar", "superar", "suplir", "suponer", "supremo", "sur", "surco", "suren\u0303o", "surgir", "susto", "sutil", "tabaco", "tabique", "tabla", "tabu\u0301", "taco", "tacto", "tajo", "talar", "talco", "talento", "talla", "talo\u0301n", "taman\u0303o", "tambor", "tango", "tanque", "tapa", "tapete", "tapia", "tapo\u0301n", "taquilla", "tarde", "tarea", "tarifa", "tarjeta", "tarot", "tarro", "tarta", "tatuaje", "tauro", "taza", "tazo\u0301n", "teatro", "techo", "tecla", "te\u0301cnica", "tejado", "tejer", "tejido", "tela", "tele\u0301fono", "tema", "temor", "templo", "tenaz", "tender", "tener", "tenis", "tenso", "teori\u0301a", "terapia", "terco", "te\u0301rmino", "ternura", "terror", "tesis", "tesoro", "testigo", "tetera", "texto", "tez", "tibio", "tiburo\u0301n", "tiempo", "tienda", "tierra", "tieso", "tigre", "tijera", "tilde", "timbre", "ti\u0301mido", "timo", "tinta", "ti\u0301o", "ti\u0301pico", "tipo", "tira", "tiro\u0301n", "tita\u0301n", "ti\u0301tere", "ti\u0301tulo", "tiza", "toalla", "tobillo", "tocar", "tocino", "todo", "toga", "toldo", "tomar", "tono", "tonto", "topar", "tope", "toque", "to\u0301rax", "torero", "tormenta", "torneo", "toro", "torpedo", "torre", "torso", "tortuga", "tos", "tosco", "toser", "to\u0301xico", "trabajo", "tractor", "traer", "tra\u0301fico", "trago", "traje", "tramo", "trance", "trato", "trauma", "trazar", "tre\u0301bol", "tregua", "treinta", "tren", "trepar", "tres", "tribu", "trigo", "tripa", "triste", "triunfo", "trofeo", "trompa", "tronco", "tropa", "trote", "trozo", "truco", "trueno", "trufa", "tuberi\u0301a", "tubo", "tuerto", "tumba", "tumor", "tu\u0301nel", "tu\u0301nica", "turbina", "turismo", "turno", "tutor", "ubicar", "u\u0301lcera", "umbral", "unidad", "unir", "universo", "uno", "untar", "un\u0303a", "urbano", "urbe", "urgente", "urna", "usar", "usuario", "u\u0301til", "utopi\u0301a", "uva", "vaca", "vaci\u0301o", "vacuna", "vagar", "vago", "vaina", "vajilla", "vale", "va\u0301lido", "valle", "valor", "va\u0301lvula", "vampiro", "vara", "variar", "varo\u0301n", "vaso", "vecino", "vector", "vehi\u0301culo", "veinte", "vejez", "vela", "velero", "veloz", "vena", "vencer", "venda", "veneno", "vengar", "venir", "venta", "venus", "ver", "verano", "verbo", "verde", "vereda", "verja", "verso", "verter", "vi\u0301a", "viaje", "vibrar", "vicio", "vi\u0301ctima", "vida", "vi\u0301deo", "vidrio", "viejo", "viernes", "vigor", "vil", "villa", "vinagre", "vino", "vin\u0303edo", "violi\u0301n", "viral", "virgo", "virtud", "visor", "vi\u0301spera", "vista", "vitamina", "viudo", "vivaz", "vivero", "vivir", "vivo", "volca\u0301n", "volumen", "volver", "voraz", "votar", "voto", "voz", "vuelo", "vulgar", "yacer", "yate", "yegua", "yema", "yerno", "yeso", "yodo", "yoga", "yogur", "zafiro", "zanja", "zapato", "zarza", "zona", "zorro", "zumo", "zurdo"]), type$.JSArray_String);
    B.MoneroAccountBlocksTrackerStatus_0_0_paused = new A.MoneroAccountBlocksTrackerStatus(0, 0, "paused");
    B.MoneroAccountBlocksTrackerStatus_1_1_synced = new A.MoneroAccountBlocksTrackerStatus(1, 1, "synced");
    B.MoneroAccountBlocksTrackerStatus_2_2_pending = new A.MoneroAccountBlocksTrackerStatus(2, 2, "pending");
    B.List_QZB = A._setArrayType(makeConstList([B.MoneroAccountBlocksTrackerStatus_0_0_paused, B.MoneroAccountBlocksTrackerStatus_1_1_synced, B.MoneroAccountBlocksTrackerStatus_2_2_pending]), A.findType("JSArray<MoneroAccountBlocksTrackerStatus>"));
    B.List_QgR = A._setArrayType(makeConstList(["\u3042\u3044\u3053\u304f\u3057\u3093", "\u3042\u3044\u3055\u3064", "\u3042\u3044\u3060", "\u3042\u304a\u305e\u3089", "\u3042\u304b\u3061\u3083\u3093", "\u3042\u304d\u308b", "\u3042\u3051\u304c\u305f", "\u3042\u3051\u308b", "\u3042\u3053\u304c\u308c\u308b", "\u3042\u3055\u3044", "\u3042\u3055\u3072", "\u3042\u3057\u3042\u3068", "\u3042\u3058\u308f\u3046", "\u3042\u305a\u304b\u308b", "\u3042\u305a\u304d", "\u3042\u305d\u3076", "\u3042\u305f\u3048\u308b", "\u3042\u305f\u305f\u3081\u308b", "\u3042\u305f\u308a\u307e\u3048", "\u3042\u305f\u308b", "\u3042\u3064\u3044", "\u3042\u3064\u304b\u3046", "\u3042\u3063\u3057\u3085\u304f", "\u3042\u3064\u307e\u308a", "\u3042\u3064\u3081\u308b", "\u3042\u3066\u306a", "\u3042\u3066\u306f\u307e\u308b", "\u3042\u3072\u308b", "\u3042\u3076\u3089", "\u3042\u3076\u308b", "\u3042\u3075\u308c\u308b", "\u3042\u307e\u3044", "\u3042\u307e\u3069", "\u3042\u307e\u3084\u304b\u3059", "\u3042\u307e\u308a", "\u3042\u307f\u3082\u306e", "\u3042\u3081\u308a\u304b", "\u3042\u3084\u307e\u308b", "\u3042\u3086\u3080", "\u3042\u3089\u3044\u3050\u307e", "\u3042\u3089\u3057", "\u3042\u3089\u3059\u3058", "\u3042\u3089\u305f\u3081\u308b", "\u3042\u3089\u3086\u308b", "\u3042\u3089\u308f\u3059", "\u3042\u308a\u304c\u3068\u3046", "\u3042\u308f\u305b\u308b", "\u3042\u308f\u3066\u308b", "\u3042\u3093\u3044", "\u3042\u3093\u304c\u3044", "\u3042\u3093\u3053", "\u3042\u3093\u305c\u3093", "\u3042\u3093\u3066\u3044", "\u3042\u3093\u306a\u3044", "\u3042\u3093\u307e\u308a", "\u3044\u3044\u3060\u3059", "\u3044\u304a\u3093", "\u3044\u304c\u3044", "\u3044\u304c\u304f", "\u3044\u304d\u304a\u3044", "\u3044\u304d\u306a\u308a", "\u3044\u304d\u3082\u306e", "\u3044\u304d\u308b", "\u3044\u304f\u3058", "\u3044\u304f\u3076\u3093", "\u3044\u3051\u3070\u306a", "\u3044\u3051\u3093", "\u3044\u3053\u3046", "\u3044\u3053\u304f", "\u3044\u3053\u3064", "\u3044\u3055\u307e\u3057\u3044", "\u3044\u3055\u3093", "\u3044\u3057\u304d", "\u3044\u3058\u3085\u3046", "\u3044\u3058\u3087\u3046", "\u3044\u3058\u308f\u308b", "\u3044\u305a\u307f", "\u3044\u305a\u308c", "\u3044\u305b\u3044", "\u3044\u305b\u3048\u3073", "\u3044\u305b\u304b\u3044", "\u3044\u305b\u304d", "\u3044\u305c\u3093", "\u3044\u305d\u3046\u308d\u3046", "\u3044\u305d\u304c\u3057\u3044", "\u3044\u3060\u3044", "\u3044\u3060\u304f", "\u3044\u305f\u305a\u3089", "\u3044\u305f\u307f", "\u3044\u305f\u308a\u3042", "\u3044\u3061\u304a\u3046", "\u3044\u3061\u3058", "\u3044\u3061\u3069", "\u3044\u3061\u3070", "\u3044\u3061\u3076", "\u3044\u3061\u308a\u3085\u3046", "\u3044\u3064\u304b", "\u3044\u3063\u3057\u3085\u3093", "\u3044\u3063\u305b\u3044", "\u3044\u3063\u305d\u3046", "\u3044\u3063\u305f\u3093", "\u3044\u3063\u3061", "\u3044\u3063\u3066\u3044", "\u3044\u3063\u307d\u3046", "\u3044\u3066\u3056", "\u3044\u3066\u3093", "\u3044\u3069\u3046", "\u3044\u3068\u3053", "\u3044\u306a\u3044", "\u3044\u306a\u304b", "\u3044\u306d\u3080\u308a", "\u3044\u306e\u3061", "\u3044\u306e\u308b", "\u3044\u306f\u3064", "\u3044\u3070\u308b", "\u3044\u306f\u3093", "\u3044\u3073\u304d", "\u3044\u3072\u3093", "\u3044\u3075\u304f", "\u3044\u3078\u3093", "\u3044\u307b\u3046", "\u3044\u307f\u3093", "\u3044\u3082\u3046\u3068", "\u3044\u3082\u305f\u308c", "\u3044\u3082\u308a", "\u3044\u3084\u304c\u308b", "\u3044\u3084\u3059", "\u3044\u3088\u304b\u3093", "\u3044\u3088\u304f", "\u3044\u3089\u3044", "\u3044\u3089\u3059\u3068", "\u3044\u308a\u3050\u3061", "\u3044\u308a\u3087\u3046", "\u3044\u308c\u3044", "\u3044\u308c\u3082\u306e", "\u3044\u308c\u308b", "\u3044\u308d\u3048\u3093\u3074\u3064", "\u3044\u308f\u3044", "\u3044\u308f\u3046", "\u3044\u308f\u304b\u3093", "\u3044\u308f\u3070", "\u3044\u308f\u3086\u308b", "\u3044\u3093\u3052\u3093\u307e\u3081", "\u3044\u3093\u3055\u3064", "\u3044\u3093\u3057\u3087\u3046", "\u3044\u3093\u3088\u3046", "\u3046\u3048\u304d", "\u3046\u3048\u308b", "\u3046\u304a\u3056", "\u3046\u304c\u3044", "\u3046\u304b\u3076", "\u3046\u304b\u3079\u308b", "\u3046\u304d\u308f", "\u3046\u304f\u3089\u3044\u306a", "\u3046\u304f\u308c\u308c", "\u3046\u3051\u305f\u307e\u308f\u308b", "\u3046\u3051\u3064\u3051", "\u3046\u3051\u3068\u308b", "\u3046\u3051\u3082\u3064", "\u3046\u3051\u308b", "\u3046\u3054\u304b\u3059", "\u3046\u3054\u304f", "\u3046\u3053\u3093", "\u3046\u3055\u304e", "\u3046\u3057\u306a\u3046", "\u3046\u3057\u308d\u304c\u307f", "\u3046\u3059\u3044", "\u3046\u3059\u304e", "\u3046\u3059\u3050\u3089\u3044", "\u3046\u3059\u3081\u308b", "\u3046\u305b\u3064", "\u3046\u3061\u3042\u308f\u305b", "\u3046\u3061\u304c\u308f", "\u3046\u3061\u304d", "\u3046\u3061\u3085\u3046", "\u3046\u3063\u304b\u308a", "\u3046\u3064\u304f\u3057\u3044", "\u3046\u3063\u305f\u3048\u308b", "\u3046\u3064\u308b", "\u3046\u3069\u3093", "\u3046\u306a\u304e", "\u3046\u306a\u3058", "\u3046\u306a\u305a\u304f", "\u3046\u306a\u308b", "\u3046\u306d\u308b", "\u3046\u306e\u3046", "\u3046\u3076\u3052", "\u3046\u3076\u3054\u3048", "\u3046\u307e\u308c\u308b", "\u3046\u3081\u308b", "\u3046\u3082\u3046", "\u3046\u3084\u307e\u3046", "\u3046\u3088\u304f", "\u3046\u3089\u304c\u3048\u3059", "\u3046\u3089\u3050\u3061", "\u3046\u3089\u306a\u3044", "\u3046\u308a\u3042\u3052", "\u3046\u308a\u304d\u308c", "\u3046\u308b\u3055\u3044", "\u3046\u308c\u3057\u3044", "\u3046\u308c\u3086\u304d", "\u3046\u308c\u308b", "\u3046\u308d\u3053", "\u3046\u308f\u304d", "\u3046\u308f\u3055", "\u3046\u3093\u3053\u3046", "\u3046\u3093\u3061\u3093", "\u3046\u3093\u3066\u3093", "\u3046\u3093\u3069\u3046", "\u3048\u3044\u3048\u3093", "\u3048\u3044\u304c", "\u3048\u3044\u304d\u3087\u3046", "\u3048\u3044\u3054", "\u3048\u3044\u305b\u3044", "\u3048\u3044\u3076\u3093", "\u3048\u3044\u3088\u3046", "\u3048\u3044\u308f", "\u3048\u304a\u308a", "\u3048\u304c\u304a", "\u3048\u304c\u304f", "\u3048\u304d\u305f\u3044", "\u3048\u304f\u305b\u308b", "\u3048\u3057\u3083\u304f", "\u3048\u3059\u3066", "\u3048\u3064\u3089\u3093", "\u3048\u306e\u3050", "\u3048\u307b\u3046\u307e\u304d", "\u3048\u307b\u3093", "\u3048\u307e\u304d", "\u3048\u3082\u3058", "\u3048\u3082\u306e", "\u3048\u3089\u3044", "\u3048\u3089\u3076", "\u3048\u308a\u3042", "\u3048\u3093\u3048\u3093", "\u3048\u3093\u304b\u3044", "\u3048\u3093\u304e", "\u3048\u3093\u3052\u304d", "\u3048\u3093\u3057\u3085\u3046", "\u3048\u3093\u305c\u3064", "\u3048\u3093\u305d\u304f", "\u3048\u3093\u3061\u3087\u3046", "\u3048\u3093\u3068\u3064", "\u304a\u3044\u304b\u3051\u308b", "\u304a\u3044\u3053\u3059", "\u304a\u3044\u3057\u3044", "\u304a\u3044\u3064\u304f", "\u304a\u3046\u3048\u3093", "\u304a\u3046\u3055\u307e", "\u304a\u3046\u3058", "\u304a\u3046\u305b\u3064", "\u304a\u3046\u305f\u3044", "\u304a\u3046\u3075\u304f", "\u304a\u3046\u3079\u3044", "\u304a\u3046\u3088\u3046", "\u304a\u3048\u308b", "\u304a\u304a\u3044", "\u304a\u304a\u3046", "\u304a\u304a\u3069\u304a\u308a", "\u304a\u304a\u3084", "\u304a\u304a\u3088\u305d", "\u304a\u304b\u3048\u308a", "\u304a\u304b\u305a", "\u304a\u304c\u3080", "\u304a\u304b\u308f\u308a", "\u304a\u304e\u306a\u3046", "\u304a\u304d\u308b", "\u304a\u304f\u3055\u307e", "\u304a\u304f\u3058\u3087\u3046", "\u304a\u304f\u308a\u304c\u306a", "\u304a\u304f\u308b", "\u304a\u304f\u308c\u308b", "\u304a\u3053\u3059", "\u304a\u3053\u306a\u3046", "\u304a\u3053\u308b", "\u304a\u3055\u3048\u308b", "\u304a\u3055\u306a\u3044", "\u304a\u3055\u3081\u308b", "\u304a\u3057\u3044\u308c", "\u304a\u3057\u3048\u308b", "\u304a\u3058\u304e", "\u304a\u3058\u3055\u3093", "\u304a\u3057\u3083\u308c", "\u304a\u305d\u3089\u304f", "\u304a\u305d\u308f\u308b", "\u304a\u305f\u304c\u3044", "\u304a\u305f\u304f", "\u304a\u3060\u3084\u304b", "\u304a\u3061\u3064\u304f", "\u304a\u3063\u3068", "\u304a\u3064\u308a", "\u304a\u3067\u304b\u3051", "\u304a\u3068\u3057\u3082\u306e", "\u304a\u3068\u306a\u3057\u3044", "\u304a\u3069\u308a", "\u304a\u3069\u308d\u304b\u3059", "\u304a\u3070\u3055\u3093", "\u304a\u307e\u3044\u308a", "\u304a\u3081\u3067\u3068\u3046", "\u304a\u3082\u3044\u3067", "\u304a\u3082\u3046", "\u304a\u3082\u305f\u3044", "\u304a\u3082\u3061\u3083", "\u304a\u3084\u3064", "\u304a\u3084\u3086\u3073", "\u304a\u3088\u307c\u3059", "\u304a\u3089\u3093\u3060", "\u304a\u308d\u3059", "\u304a\u3093\u304c\u304f", "\u304a\u3093\u3051\u3044", "\u304a\u3093\u3057\u3083", "\u304a\u3093\u305b\u3093", "\u304a\u3093\u3060\u3093", "\u304a\u3093\u3061\u3085\u3046", "\u304a\u3093\u3069\u3051\u3044", "\u304b\u3042\u3064", "\u304b\u3044\u304c", "\u304c\u3044\u304d", "\u304c\u3044\u3051\u3093", "\u304c\u3044\u3053\u3046", "\u304b\u3044\u3055\u3064", "\u304b\u3044\u3057\u3083", "\u304b\u3044\u3059\u3044\u3088\u304f", "\u304b\u3044\u305c\u3093", "\u304b\u3044\u305e\u3046\u3069", "\u304b\u3044\u3064\u3046", "\u304b\u3044\u3066\u3093", "\u304b\u3044\u3068\u3046", "\u304b\u3044\u3075\u304f", "\u304c\u3044\u3078\u304d", "\u304b\u3044\u307b\u3046", "\u304b\u3044\u3088\u3046", "\u304c\u3044\u3089\u3044", "\u304b\u3044\u308f", "\u304b\u3048\u308b", "\u304b\u304a\u308a", "\u304b\u304b\u3048\u308b", "\u304b\u304c\u304f", "\u304b\u304c\u3057", "\u304b\u304c\u307f", "\u304b\u304f\u3054", "\u304b\u304f\u3068\u304f", "\u304b\u3056\u308b", "\u304c\u305e\u3046", "\u304b\u305f\u3044", "\u304b\u305f\u3061", "\u304c\u3061\u3087\u3046", "\u304c\u3063\u304d\u3085\u3046", "\u304c\u3063\u3053\u3046", "\u304c\u3063\u3055\u3093", "\u304c\u3063\u3057\u3087\u3046", "\u304b\u306a\u3056\u308f\u3057", "\u304b\u306e\u3046", "\u304c\u306f\u304f", "\u304b\u3076\u304b", "\u304b\u307b\u3046", "\u304b\u307b\u3054", "\u304b\u307e\u3046", "\u304b\u307e\u307c\u3053", "\u304b\u3081\u308c\u304a\u3093", "\u304b\u3086\u3044", "\u304b\u3088\u3046\u3073", "\u304b\u3089\u3044", "\u304b\u308b\u3044", "\u304b\u308d\u3046", "\u304b\u308f\u304f", "\u304b\u308f\u3089", "\u304c\u3093\u304b", "\u304b\u3093\u3051\u3044", "\u304b\u3093\u3053\u3046", "\u304b\u3093\u3057\u3083", "\u304b\u3093\u305d\u3046", "\u304b\u3093\u305f\u3093", "\u304b\u3093\u3061", "\u304c\u3093\u3070\u308b", "\u304d\u3042\u3044", "\u304d\u3042\u3064", "\u304d\u3044\u308d", "\u304e\u3044\u3093", "\u304d\u3046\u3044", "\u304d\u3046\u3093", "\u304d\u3048\u308b", "\u304d\u304a\u3046", "\u304d\u304a\u304f", "\u304d\u304a\u3061", "\u304d\u304a\u3093", "\u304d\u304b\u3044", "\u304d\u304b\u304f", "\u304d\u304b\u3093\u3057\u3083", "\u304d\u304d\u3066", "\u304d\u304f\u3070\u308a", "\u304d\u304f\u3089\u3052", "\u304d\u3051\u3093\u305b\u3044", "\u304d\u3053\u3046", "\u304d\u3053\u3048\u308b", "\u304d\u3053\u304f", "\u304d\u3055\u3044", "\u304d\u3055\u304f", "\u304d\u3055\u307e", "\u304d\u3055\u3089\u304e", "\u304e\u3058\u304b\u304c\u304f", "\u304e\u3057\u304d", "\u304e\u3058\u305f\u3044\u3051\u3093", "\u304e\u3058\u306b\u3063\u3066\u3044", "\u304e\u3058\u3085\u3064\u3057\u3083", "\u304d\u3059\u3046", "\u304d\u305b\u3044", "\u304d\u305b\u304d", "\u304d\u305b\u3064", "\u304d\u305d\u3046", "\u304d\u305e\u304f", "\u304d\u305e\u3093", "\u304d\u305f\u3048\u308b", "\u304d\u3061\u3087\u3046", "\u304d\u3064\u3048\u3093", "\u304e\u3063\u3061\u308a", "\u304d\u3064\u3064\u304d", "\u304d\u3064\u306d", "\u304d\u3066\u3044", "\u304d\u3069\u3046", "\u304d\u3069\u304f", "\u304d\u306a\u3044", "\u304d\u306a\u304c", "\u304d\u306a\u3053", "\u304d\u306c\u3054\u3057", "\u304d\u306d\u3093", "\u304d\u306e\u3046", "\u304d\u306e\u3057\u305f", "\u304d\u306f\u304f", "\u304d\u3073\u3057\u3044", "\u304d\u3072\u3093", "\u304d\u3075\u304f", "\u304d\u3076\u3093", "\u304d\u307c\u3046", "\u304d\u307b\u3093", "\u304d\u307e\u308b", "\u304d\u307f\u3064", "\u304d\u3080\u305a\u304b\u3057\u3044", "\u304d\u3081\u308b", "\u304d\u3082\u3060\u3081\u3057", "\u304d\u3082\u3061", "\u304d\u3082\u306e", "\u304d\u3083\u304f", "\u304d\u3084\u304f", "\u304e\u3085\u3046\u306b\u304f", "\u304d\u3088\u3046", "\u304d\u3087\u3046\u308a\u3085\u3046", "\u304d\u3089\u3044", "\u304d\u3089\u304f", "\u304d\u308a\u3093", "\u304d\u308c\u3044", "\u304d\u308c\u3064", "\u304d\u308d\u304f", "\u304e\u308d\u3093", "\u304d\u308f\u3081\u308b", "\u304e\u3093\u3044\u308d", "\u304d\u3093\u304b\u304f\u3058", "\u304d\u3093\u3058\u3087", "\u304d\u3093\u3088\u3046\u3073", "\u3050\u3042\u3044", "\u304f\u3044\u305a", "\u304f\u3046\u304b\u3093", "\u304f\u3046\u304d", "\u304f\u3046\u3050\u3093", "\u304f\u3046\u3053\u3046", "\u3050\u3046\u305b\u3044", "\u304f\u3046\u305d\u3046", "\u3050\u3046\u305f\u3089", "\u304f\u3046\u3075\u304f", "\u304f\u3046\u307c", "\u304f\u304b\u3093", "\u304f\u304d\u3087\u3046", "\u304f\u3052\u3093", "\u3050\u3053\u3046", "\u304f\u3055\u3044", "\u304f\u3055\u304d", "\u304f\u3055\u3070\u306a", "\u304f\u3055\u308b", "\u304f\u3057\u3083\u307f", "\u304f\u3057\u3087\u3046", "\u304f\u3059\u306e\u304d", "\u304f\u3059\u308a\u3086\u3073", "\u304f\u305b\u3052", "\u304f\u305b\u3093", "\u3050\u305f\u3044\u3066\u304d", "\u304f\u3060\u3055\u308b", "\u304f\u305f\u3073\u308c\u308b", "\u304f\u3061\u3053\u307f", "\u304f\u3061\u3055\u304d", "\u304f\u3064\u3057\u305f", "\u3050\u3063\u3059\u308a", "\u304f\u3064\u308d\u3050", "\u304f\u3068\u3046\u3066\u3093", "\u304f\u3069\u304f", "\u304f\u306a\u3093", "\u304f\u306d\u304f\u306d", "\u304f\u306e\u3046", "\u304f\u3075\u3046", "\u304f\u307f\u3042\u308f\u305b", "\u304f\u307f\u305f\u3066\u308b", "\u304f\u3081\u308b", "\u304f\u3084\u304f\u3057\u3087", "\u304f\u3089\u3059", "\u304f\u3089\u3079\u308b", "\u304f\u308b\u307e", "\u304f\u308c\u308b", "\u304f\u308d\u3046", "\u304f\u308f\u3057\u3044", "\u3050\u3093\u304b\u3093", "\u3050\u3093\u3057\u3087\u304f", "\u3050\u3093\u305f\u3044", "\u3050\u3093\u3066", "\u3051\u3042\u306a", "\u3051\u3044\u304b\u304f", "\u3051\u3044\u3051\u3093", "\u3051\u3044\u3053", "\u3051\u3044\u3055\u3064", "\u3052\u3044\u3058\u3085\u3064", "\u3051\u3044\u305f\u3044", "\u3052\u3044\u306e\u3046\u3058\u3093", "\u3051\u3044\u308c\u304d", "\u3051\u3044\u308d", "\u3051\u304a\u3068\u3059", "\u3051\u304a\u308a\u3082\u306e", "\u3052\u304d\u304b", "\u3052\u304d\u3052\u3093", "\u3052\u304d\u3060\u3093", "\u3052\u304d\u3061\u3093", "\u3052\u304d\u3068\u3064", "\u3052\u304d\u306f", "\u3052\u304d\u3084\u304f", "\u3052\u3053\u3046", "\u3052\u3053\u304f\u3058\u3087\u3046", "\u3052\u3056\u3044", "\u3051\u3055\u304d", "\u3052\u3056\u3093", "\u3051\u3057\u304d", "\u3051\u3057\u3054\u3080", "\u3051\u3057\u3087\u3046", "\u3052\u3059\u3068", "\u3051\u305f\u3070", "\u3051\u3061\u3083\u3063\u3077", "\u3051\u3061\u3089\u3059", "\u3051\u3064\u3042\u3064", "\u3051\u3064\u3044", "\u3051\u3064\u3048\u304d", "\u3051\u3063\u3053\u3093", "\u3051\u3064\u3058\u3087", "\u3051\u3063\u305b\u304d", "\u3051\u3063\u3066\u3044", "\u3051\u3064\u307e\u3064", "\u3052\u3064\u3088\u3046\u3073", "\u3052\u3064\u308c\u3044", "\u3051\u3064\u308d\u3093", "\u3052\u3069\u304f", "\u3051\u3068\u3070\u3059", "\u3051\u3068\u308b", "\u3051\u306a\u3052", "\u3051\u306a\u3059", "\u3051\u306a\u307f", "\u3051\u306c\u304d", "\u3052\u306d\u3064", "\u3051\u306d\u3093", "\u3051\u306f\u3044", "\u3052\u3072\u3093", "\u3051\u3076\u304b\u3044", "\u3052\u307c\u304f", "\u3051\u307e\u308a", "\u3051\u307f\u304b\u308b", "\u3051\u3080\u3057", "\u3051\u3080\u308a", "\u3051\u3082\u306e", "\u3051\u3089\u3044", "\u3051\u308d\u3051\u308d", "\u3051\u308f\u3057\u3044", "\u3051\u3093\u3044", "\u3051\u3093\u3048\u3064", "\u3051\u3093\u304a", "\u3051\u3093\u304b", "\u3052\u3093\u304d", "\u3051\u3093\u3052\u3093", "\u3051\u3093\u3053\u3046", "\u3051\u3093\u3055\u304f", "\u3051\u3093\u3057\u3085\u3046", "\u3051\u3093\u3059\u3046", "\u3052\u3093\u305d\u3046", "\u3051\u3093\u3061\u304f", "\u3051\u3093\u3066\u3044", "\u3051\u3093\u3068\u3046", "\u3051\u3093\u306a\u3044", "\u3051\u3093\u306b\u3093", "\u3052\u3093\u3076\u3064", "\u3051\u3093\u307e", "\u3051\u3093\u307f\u3093", "\u3051\u3093\u3081\u3044", "\u3051\u3093\u3089\u3093", "\u3051\u3093\u308a", "\u3053\u3042\u304f\u307e", "\u3053\u3044\u306c", "\u3053\u3044\u3073\u3068", "\u3054\u3046\u3044", "\u3053\u3046\u3048\u3093", "\u3053\u3046\u304a\u3093", "\u3053\u3046\u304b\u3093", "\u3054\u3046\u304d\u3085\u3046", "\u3054\u3046\u3051\u3044", "\u3053\u3046\u3053\u3046", "\u3053\u3046\u3055\u3044", "\u3053\u3046\u3058", "\u3053\u3046\u3059\u3044", "\u3054\u3046\u305b\u3044", "\u3053\u3046\u305d\u304f", "\u3053\u3046\u305f\u3044", "\u3053\u3046\u3061\u3083", "\u3053\u3046\u3064\u3046", "\u3053\u3046\u3066\u3044", "\u3053\u3046\u3069\u3046", "\u3053\u3046\u306a\u3044", "\u3053\u3046\u306f\u3044", "\u3054\u3046\u307b\u3046", "\u3054\u3046\u307e\u3093", "\u3053\u3046\u3082\u304f", "\u3053\u3046\u308a\u3064", "\u3053\u3048\u308b", "\u3053\u304a\u308a", "\u3054\u304b\u3044", "\u3054\u304c\u3064", "\u3054\u304b\u3093", "\u3053\u304f\u3054", "\u3053\u304f\u3055\u3044", "\u3053\u304f\u3068\u3046", "\u3053\u304f\u306a\u3044", "\u3053\u304f\u306f\u304f", "\u3053\u3050\u307e", "\u3053\u3051\u3044", "\u3053\u3051\u308b", "\u3053\u3053\u306e\u304b", "\u3053\u3053\u308d", "\u3053\u3055\u3081", "\u3053\u3057\u3064", "\u3053\u3059\u3046", "\u3053\u305b\u3044", "\u3053\u305b\u304d", "\u3053\u305c\u3093", "\u3053\u305d\u3060\u3066", "\u3053\u305f\u3044", "\u3053\u305f\u3048\u308b", "\u3053\u305f\u3064", "\u3053\u3061\u3087\u3046", "\u3053\u3063\u304b", "\u3053\u3064\u3053\u3064", "\u3053\u3064\u3070\u3093", "\u3053\u3064\u3076", "\u3053\u3066\u3044", "\u3053\u3066\u3093", "\u3053\u3068\u304c\u3089", "\u3053\u3068\u3057", "\u3053\u3068\u3070", "\u3053\u3068\u308a", "\u3053\u306a\u3054\u306a", "\u3053\u306d\u3053\u306d", "\u3053\u306e\u307e\u307e", "\u3053\u306e\u307f", "\u3053\u306e\u3088", "\u3054\u306f\u3093", "\u3053\u3072\u3064\u3058", "\u3053\u3075\u3046", "\u3053\u3075\u3093", "\u3053\u307c\u308c\u308b", "\u3054\u307e\u3042\u3076\u3089", "\u3053\u307e\u304b\u3044", "\u3054\u307e\u3059\u308a", "\u3053\u307e\u3064\u306a", "\u3053\u307e\u308b", "\u3053\u3080\u304e\u3053", "\u3053\u3082\u3058", "\u3053\u3082\u3061", "\u3053\u3082\u306e", "\u3053\u3082\u3093", "\u3053\u3084\u304f", "\u3053\u3084\u307e", "\u3053\u3086\u3046", "\u3053\u3086\u3073", "\u3053\u3088\u3044", "\u3053\u3088\u3046", "\u3053\u308a\u308b", "\u3053\u308c\u304f\u3057\u3087\u3093", "\u3053\u308d\u3063\u3051", "\u3053\u308f\u3082\u3066", "\u3053\u308f\u308c\u308b", "\u3053\u3093\u3044\u3093", "\u3053\u3093\u304b\u3044", "\u3053\u3093\u304d", "\u3053\u3093\u3057\u3085\u3046", "\u3053\u3093\u3059\u3044", "\u3053\u3093\u3060\u3066", "\u3053\u3093\u3068\u3093", "\u3053\u3093\u306a\u3093", "\u3053\u3093\u3073\u306b", "\u3053\u3093\u307d\u3093", "\u3053\u3093\u307e\u3051", "\u3053\u3093\u3084", "\u3053\u3093\u308c\u3044", "\u3053\u3093\u308f\u304f", "\u3056\u3044\u3048\u304d", "\u3055\u3044\u304b\u3044", "\u3055\u3044\u304d\u3093", "\u3056\u3044\u3052\u3093", "\u3056\u3044\u3053", "\u3055\u3044\u3057\u3087", "\u3055\u3044\u305b\u3044", "\u3056\u3044\u305f\u304f", "\u3056\u3044\u3061\u3085\u3046", "\u3055\u3044\u3066\u304d", "\u3056\u3044\u308a\u3087\u3046", "\u3055\u3046\u306a", "\u3055\u304b\u3044\u3057", "\u3055\u304c\u3059", "\u3055\u304b\u306a", "\u3055\u304b\u307f\u3061", "\u3055\u304c\u308b", "\u3055\u304e\u3087\u3046", "\u3055\u304f\u3057", "\u3055\u304f\u3072\u3093", "\u3055\u304f\u3089", "\u3055\u3053\u304f", "\u3055\u3053\u3064", "\u3055\u305a\u304b\u308b", "\u3056\u305b\u304d", "\u3055\u305f\u3093", "\u3055\u3064\u3048\u3044", "\u3056\u3064\u304a\u3093", "\u3056\u3063\u304b", "\u3056\u3064\u304c\u304f", "\u3055\u3063\u304d\u3087\u304f", "\u3056\u3063\u3057", "\u3055\u3064\u3058\u3093", "\u3056\u3063\u305d\u3046", "\u3055\u3064\u305f\u3070", "\u3055\u3064\u307e\u3044\u3082", "\u3055\u3066\u3044", "\u3055\u3068\u3044\u3082", "\u3055\u3068\u3046", "\u3055\u3068\u304a\u3084", "\u3055\u3068\u3057", "\u3055\u3068\u308b", "\u3055\u306e\u3046", "\u3055\u3070\u304f", "\u3055\u3073\u3057\u3044", "\u3055\u3079\u3064", "\u3055\u307b\u3046", "\u3055\u307b\u3069", "\u3055\u307e\u3059", "\u3055\u307f\u3057\u3044", "\u3055\u307f\u3060\u308c", "\u3055\u3080\u3051", "\u3055\u3081\u308b", "\u3055\u3084\u3048\u3093\u3069\u3046", "\u3055\u3086\u3046", "\u3055\u3088\u3046", "\u3055\u3088\u304f", "\u3055\u3089\u3060", "\u3056\u308b\u305d\u3070", "\u3055\u308f\u3084\u304b", "\u3055\u308f\u308b", "\u3055\u3093\u3044\u3093", "\u3055\u3093\u304b", "\u3055\u3093\u304d\u3083\u304f", "\u3055\u3093\u3053\u3046", "\u3055\u3093\u3055\u3044", "\u3056\u3093\u3057\u3087", "\u3055\u3093\u3059\u3046", "\u3055\u3093\u305b\u3044", "\u3055\u3093\u305d", "\u3055\u3093\u3061", "\u3055\u3093\u307e", "\u3055\u3093\u307f", "\u3055\u3093\u3089\u3093", "\u3057\u3042\u3044", "\u3057\u3042\u3052", "\u3057\u3042\u3055\u3063\u3066", "\u3057\u3042\u308f\u305b", "\u3057\u3044\u304f", "\u3057\u3044\u3093", "\u3057\u3046\u3061", "\u3057\u3048\u3044", "\u3057\u304a\u3051", "\u3057\u304b\u3044", "\u3057\u304b\u304f", "\u3058\u304b\u3093", "\u3057\u3054\u3068", "\u3057\u3059\u3046", "\u3058\u3060\u3044", "\u3057\u305f\u3046\u3051", "\u3057\u305f\u304e", "\u3057\u305f\u3066", "\u3057\u305f\u307f", "\u3057\u3061\u3087\u3046", "\u3057\u3061\u308a\u3093", "\u3057\u3063\u304b\u308a", "\u3057\u3064\u3058", "\u3057\u3064\u3082\u3093", "\u3057\u3066\u3044", "\u3057\u3066\u304d", "\u3057\u3066\u3064", "\u3058\u3066\u3093", "\u3058\u3069\u3046", "\u3057\u306a\u304e\u308c", "\u3057\u306a\u3082\u306e", "\u3057\u306a\u3093", "\u3057\u306d\u307e", "\u3057\u306d\u3093", "\u3057\u306e\u3050", "\u3057\u306e\u3076", "\u3057\u306f\u3044", "\u3057\u3070\u304b\u308a", "\u3057\u306f\u3064", "\u3057\u306f\u3089\u3044", "\u3057\u306f\u3093", "\u3057\u3072\u3087\u3046", "\u3057\u3075\u304f", "\u3058\u3076\u3093", "\u3057\u3078\u3044", "\u3057\u307b\u3046", "\u3057\u307b\u3093", "\u3057\u307e\u3046", "\u3057\u307e\u308b", "\u3057\u307f\u3093", "\u3057\u3080\u3051\u308b", "\u3058\u3080\u3057\u3087", "\u3057\u3081\u3044", "\u3057\u3081\u308b", "\u3057\u3082\u3093", "\u3057\u3083\u3044\u3093", "\u3057\u3083\u3046\u3093", "\u3057\u3083\u304a\u3093", "\u3058\u3083\u304c\u3044\u3082", "\u3057\u3084\u304f\u3057\u3087", "\u3057\u3083\u304f\u307b\u3046", "\u3057\u3083\u3051\u3093", "\u3057\u3083\u3053", "\u3057\u3083\u3056\u3044", "\u3057\u3083\u3057\u3093", "\u3057\u3083\u305b\u3093", "\u3057\u3083\u305d\u3046", "\u3057\u3083\u305f\u3044", "\u3057\u3083\u3061\u3087\u3046", "\u3057\u3083\u3063\u304d\u3093", "\u3058\u3083\u307e", "\u3057\u3083\u308a\u3093", "\u3057\u3083\u308c\u3044", "\u3058\u3086\u3046", "\u3058\u3085\u3046\u3057\u3087", "\u3057\u3085\u304f\u306f\u304f", "\u3058\u3085\u3057\u3093", "\u3057\u3085\u3063\u305b\u304d", "\u3057\u3085\u307f", "\u3057\u3085\u3089\u3070", "\u3058\u3085\u3093\u3070\u3093", "\u3057\u3087\u3046\u304b\u3044", "\u3057\u3087\u304f\u305f\u304f", "\u3057\u3087\u3063\u3051\u3093", "\u3057\u3087\u3069\u3046", "\u3057\u3087\u3082\u3064", "\u3057\u3089\u305b\u308b", "\u3057\u3089\u3079\u308b", "\u3057\u3093\u304b", "\u3057\u3093\u3053\u3046", "\u3058\u3093\u3058\u3083", "\u3057\u3093\u305b\u3044\u3058", "\u3057\u3093\u3061\u304f", "\u3057\u3093\u308a\u3093", "\u3059\u3042\u3052", "\u3059\u3042\u3057", "\u3059\u3042\u306a", "\u305a\u3042\u3093", "\u3059\u3044\u3048\u3044", "\u3059\u3044\u304b", "\u3059\u3044\u3068\u3046", "\u305a\u3044\u3076\u3093", "\u3059\u3044\u3088\u3046\u3073", "\u3059\u3046\u304c\u304f", "\u3059\u3046\u3058\u3064", "\u3059\u3046\u305b\u3093", "\u3059\u304a\u3069\u308a", "\u3059\u304d\u307e", "\u3059\u304f\u3046", "\u3059\u304f\u306a\u3044", "\u3059\u3051\u308b", "\u3059\u3054\u3044", "\u3059\u3053\u3057", "\u305a\u3055\u3093", "\u3059\u305a\u3057\u3044", "\u3059\u3059\u3080", "\u3059\u3059\u3081\u308b", "\u3059\u3063\u304b\u308a", "\u305a\u3063\u3057\u308a", "\u305a\u3063\u3068", "\u3059\u3066\u304d", "\u3059\u3066\u308b", "\u3059\u306d\u308b", "\u3059\u306e\u3053", "\u3059\u306f\u3060", "\u3059\u3070\u3089\u3057\u3044", "\u305a\u3072\u3087\u3046", "\u305a\u3076\u306c\u308c", "\u3059\u3076\u308a", "\u3059\u3075\u308c", "\u3059\u3079\u3066", "\u3059\u3079\u308b", "\u305a\u307b\u3046", "\u3059\u307c\u3093", "\u3059\u307e\u3044", "\u3059\u3081\u3057", "\u3059\u3082\u3046", "\u3059\u3084\u304d", "\u3059\u3089\u3059\u3089", "\u3059\u308b\u3081", "\u3059\u308c\u3061\u304c\u3046", "\u3059\u308d\u3063\u3068", "\u3059\u308f\u308b", "\u3059\u3093\u305c\u3093", "\u3059\u3093\u307d\u3046", "\u305b\u3042\u3076\u3089", "\u305b\u3044\u304b\u3064", "\u305b\u3044\u3052\u3093", "\u305b\u3044\u3058", "\u305b\u3044\u3088\u3046", "\u305b\u304a\u3046", "\u305b\u304b\u3044\u304b\u3093", "\u305b\u304d\u306b\u3093", "\u305b\u304d\u3080", "\u305b\u304d\u3086", "\u305b\u304d\u3089\u3093\u3046\u3093", "\u305b\u3051\u3093", "\u305b\u3053\u3046", "\u305b\u3059\u3058", "\u305b\u305f\u3044", "\u305b\u305f\u3051", "\u305b\u3063\u304b\u304f", "\u305b\u3063\u304d\u3083\u304f", "\u305c\u3063\u304f", "\u305b\u3063\u3051\u3093", "\u305b\u3063\u3053\u3064", "\u305b\u3063\u3055\u305f\u304f\u307e", "\u305b\u3064\u305e\u304f", "\u305b\u3064\u3060\u3093", "\u305b\u3064\u3067\u3093", "\u305b\u3063\u3071\u3093", "\u305b\u3064\u3073", "\u305b\u3064\u3076\u3093", "\u305b\u3064\u3081\u3044", "\u305b\u3064\u308a\u3064", "\u305b\u306a\u304b", "\u305b\u306e\u3073", "\u305b\u306f\u3070", "\u305b\u3073\u308d", "\u305b\u307c\u306d", "\u305b\u307e\u3044", "\u305b\u307e\u308b", "\u305b\u3081\u308b", "\u305b\u3082\u305f\u308c", "\u305b\u308a\u3075", "\u305c\u3093\u3042\u304f", "\u305b\u3093\u3044", "\u305b\u3093\u3048\u3044", "\u305b\u3093\u304b", "\u305b\u3093\u304d\u3087", "\u305b\u3093\u304f", "\u305b\u3093\u3052\u3093", "\u305c\u3093\u3054", "\u305b\u3093\u3055\u3044", "\u305b\u3093\u3057\u3085", "\u305b\u3093\u3059\u3044", "\u305b\u3093\u305b\u3044", "\u305b\u3093\u305e", "\u305b\u3093\u305f\u304f", "\u305b\u3093\u3061\u3087\u3046", "\u305b\u3093\u3066\u3044", "\u305b\u3093\u3068\u3046", "\u305b\u3093\u306c\u304d", "\u305b\u3093\u306d\u3093", "\u305b\u3093\u3071\u3044", "\u305c\u3093\u3076", "\u305c\u3093\u307d\u3046", "\u305b\u3093\u3080", "\u305b\u3093\u3081\u3093\u3058\u3087", "\u305b\u3093\u3082\u3093", "\u305b\u3093\u3084\u304f", "\u305b\u3093\u3086\u3046", "\u305b\u3093\u3088\u3046", "\u305c\u3093\u3089", "\u305c\u3093\u308a\u3083\u304f", "\u305b\u3093\u308c\u3044", "\u305b\u3093\u308d", "\u305d\u3042\u304f", "\u305d\u3044\u3068\u3052\u308b", "\u305d\u3044\u306d", "\u305d\u3046\u304c\u3093\u304d\u3087\u3046", "\u305d\u3046\u304d", "\u305d\u3046\u3054", "\u305d\u3046\u3057\u3093", "\u305d\u3046\u3060\u3093", "\u305d\u3046\u306a\u3093", "\u305d\u3046\u3073", "\u305d\u3046\u3081\u3093", "\u305d\u3046\u308a", "\u305d\u3048\u3082\u306e", "\u305d\u3048\u3093", "\u305d\u304c\u3044", "\u305d\u3052\u304d", "\u305d\u3053\u3046", "\u305d\u3053\u305d\u3053", "\u305d\u3056\u3044", "\u305d\u3057\u306a", "\u305d\u305b\u3044", "\u305d\u305b\u3093", "\u305d\u305d\u3050", "\u305d\u3060\u3066\u308b", "\u305d\u3064\u3046", "\u305d\u3064\u3048\u3093", "\u305d\u3063\u304b\u3093", "\u305d\u3064\u304e\u3087\u3046", "\u305d\u3063\u3051\u3064", "\u305d\u3063\u3053\u3046", "\u305d\u3063\u305b\u3093", "\u305d\u3063\u3068", "\u305d\u3068\u304c\u308f", "\u305d\u3068\u3065\u3089", "\u305d\u306a\u3048\u308b", "\u305d\u306a\u305f", "\u305d\u3075\u307c", "\u305d\u307c\u304f", "\u305d\u307c\u308d", "\u305d\u307e\u3064", "\u305d\u307e\u308b", "\u305d\u3080\u304f", "\u305d\u3080\u308a\u3048", "\u305d\u3081\u308b", "\u305d\u3082\u305d\u3082", "\u305d\u3088\u304b\u305c", "\u305d\u3089\u307e\u3081", "\u305d\u308d\u3046", "\u305d\u3093\u304b\u3044", "\u305d\u3093\u3051\u3044", "\u305d\u3093\u3056\u3044", "\u305d\u3093\u3057\u3064", "\u305d\u3093\u305e\u304f", "\u305d\u3093\u3061\u3087\u3046", "\u305e\u3093\u3073", "\u305e\u3093\u3076\u3093", "\u305d\u3093\u307f\u3093", "\u305f\u3042\u3044", "\u305f\u3044\u3044\u3093", "\u305f\u3044\u3046\u3093", "\u305f\u3044\u3048\u304d", "\u305f\u3044\u304a\u3046", "\u3060\u3044\u304c\u304f", "\u305f\u3044\u304d", "\u305f\u3044\u3050\u3046", "\u305f\u3044\u3051\u3093", "\u305f\u3044\u3053", "\u305f\u3044\u3056\u3044", "\u3060\u3044\u3058\u3087\u3046\u3076", "\u3060\u3044\u3059\u304d", "\u305f\u3044\u305b\u3064", "\u305f\u3044\u305d\u3046", "\u3060\u3044\u305f\u3044", "\u305f\u3044\u3061\u3087\u3046", "\u305f\u3044\u3066\u3044", "\u3060\u3044\u3069\u3053\u308d", "\u305f\u3044\u306a\u3044", "\u305f\u3044\u306d\u3064", "\u305f\u3044\u306e\u3046", "\u305f\u3044\u306f\u3093", "\u3060\u3044\u3072\u3087\u3046", "\u305f\u3044\u3075\u3046", "\u305f\u3044\u3078\u3093", "\u305f\u3044\u307b", "\u305f\u3044\u307e\u3064\u3070\u306a", "\u305f\u3044\u307f\u3093\u3050", "\u305f\u3044\u3080", "\u305f\u3044\u3081\u3093", "\u305f\u3044\u3084\u304d", "\u305f\u3044\u3088\u3046", "\u305f\u3044\u3089", "\u305f\u3044\u308a\u3087\u304f", "\u305f\u3044\u308b", "\u305f\u3044\u308f\u3093", "\u305f\u3046\u3048", "\u305f\u3048\u308b", "\u305f\u304a\u3059", "\u305f\u304a\u308b", "\u305f\u304a\u308c\u308b", "\u305f\u304b\u3044", "\u305f\u304b\u306d", "\u305f\u304d\u3073", "\u305f\u304f\u3055\u3093", "\u305f\u3053\u304f", "\u305f\u3053\u3084\u304d", "\u305f\u3055\u3044", "\u305f\u3057\u3056\u3093", "\u3060\u3058\u3083\u308c", "\u305f\u3059\u3051\u308b", "\u305f\u305a\u3055\u308f\u308b", "\u305f\u305d\u304c\u308c", "\u305f\u305f\u304b\u3046", "\u305f\u305f\u304f", "\u305f\u3060\u3057\u3044", "\u305f\u305f\u307f", "\u305f\u3061\u3070\u306a", "\u3060\u3063\u304b\u3044", "\u3060\u3063\u304d\u3083\u304f", "\u3060\u3063\u3053", "\u3060\u3063\u3057\u3085\u3064", "\u3060\u3063\u305f\u3044", "\u305f\u3066\u308b", "\u305f\u3068\u3048\u308b", "\u305f\u306a\u3070\u305f", "\u305f\u306b\u3093", "\u305f\u306c\u304d", "\u305f\u306e\u3057\u307f", "\u305f\u306f\u3064", "\u305f\u3076\u3093", "\u305f\u3079\u308b", "\u305f\u307c\u3046", "\u305f\u307e\u3054", "\u305f\u307e\u308b", "\u3060\u3080\u308b", "\u305f\u3081\u3044\u304d", "\u305f\u3081\u3059", "\u305f\u3081\u308b", "\u305f\u3082\u3064", "\u305f\u3084\u3059\u3044", "\u305f\u3088\u308b", "\u305f\u3089\u3059", "\u305f\u308a\u304d\u307b\u3093\u304c\u3093", "\u305f\u308a\u3087\u3046", "\u305f\u308a\u308b", "\u305f\u308b\u3068", "\u305f\u308c\u308b", "\u305f\u308c\u3093\u3068", "\u305f\u308d\u3063\u3068", "\u305f\u308f\u3080\u308c\u308b", "\u3060\u3093\u3042\u3064", "\u305f\u3093\u3044", "\u305f\u3093\u304a\u3093", "\u305f\u3093\u304b", "\u305f\u3093\u304d", "\u305f\u3093\u3051\u3093", "\u305f\u3093\u3054", "\u305f\u3093\u3055\u3093", "\u305f\u3093\u3058\u3087\u3046\u3073", "\u3060\u3093\u305b\u3044", "\u305f\u3093\u305d\u304f", "\u305f\u3093\u305f\u3044", "\u3060\u3093\u3061", "\u305f\u3093\u3066\u3044", "\u305f\u3093\u3068\u3046", "\u3060\u3093\u306a", "\u305f\u3093\u306b\u3093", "\u3060\u3093\u306d\u3064", "\u305f\u3093\u306e\u3046", "\u305f\u3093\u3074\u3093", "\u3060\u3093\u307c\u3046", "\u305f\u3093\u307e\u3064", "\u305f\u3093\u3081\u3044", "\u3060\u3093\u308c\u3064", "\u3060\u3093\u308d", "\u3060\u3093\u308f", "\u3061\u3042\u3044", "\u3061\u3042\u3093", "\u3061\u3044\u304d", "\u3061\u3044\u3055\u3044", "\u3061\u3048\u3093", "\u3061\u304b\u3044", "\u3061\u304b\u3089", "\u3061\u304d\u3085\u3046", "\u3061\u304d\u3093", "\u3061\u3051\u3044\u305a", "\u3061\u3051\u3093", "\u3061\u3053\u304f", "\u3061\u3055\u3044", "\u3061\u3057\u304d", "\u3061\u3057\u308a\u3087\u3046", "\u3061\u305b\u3044", "\u3061\u305d\u3046", "\u3061\u305f\u3044", "\u3061\u305f\u3093", "\u3061\u3061\u304a\u3084", "\u3061\u3064\u3058\u3087", "\u3061\u3066\u304d", "\u3061\u3066\u3093", "\u3061\u306c\u304d", "\u3061\u306c\u308a", "\u3061\u306e\u3046", "\u3061\u3072\u3087\u3046", "\u3061\u3078\u3044\u305b\u3093", "\u3061\u307b\u3046", "\u3061\u307e\u305f", "\u3061\u307f\u3064", "\u3061\u307f\u3069\u308d", "\u3061\u3081\u3044\u3069", "\u3061\u3083\u3093\u3053\u306a\u3079", "\u3061\u3085\u3046\u3044", "\u3061\u3086\u308a\u3087\u304f", "\u3061\u3087\u3046\u3057", "\u3061\u3087\u3055\u304f\u3051\u3093", "\u3061\u3089\u3057", "\u3061\u3089\u307f", "\u3061\u308a\u304c\u307f", "\u3061\u308a\u3087\u3046", "\u3061\u308b\u3069", "\u3061\u308f\u308f", "\u3061\u3093\u305f\u3044", "\u3061\u3093\u3082\u304f", "\u3064\u3044\u304b", "\u3064\u3044\u305f\u3061", "\u3064\u3046\u304b", "\u3064\u3046\u3058\u3087\u3046", "\u3064\u3046\u306f\u3093", "\u3064\u3046\u308f", "\u3064\u304b\u3046", "\u3064\u304b\u308c\u308b", "\u3064\u304f\u306d", "\u3064\u304f\u308b", "\u3064\u3051\u306d", "\u3064\u3051\u308b", "\u3064\u3054\u3046", "\u3064\u305f\u3048\u308b", "\u3064\u3065\u304f", "\u3064\u3064\u3058", "\u3064\u3064\u3080", "\u3064\u3068\u3081\u308b", "\u3064\u306a\u304c\u308b", "\u3064\u306a\u307f", "\u3064\u306d\u3065\u306d", "\u3064\u306e\u308b", "\u3064\u3076\u3059", "\u3064\u307e\u3089\u306a\u3044", "\u3064\u307e\u308b", "\u3064\u307f\u304d", "\u3064\u3081\u305f\u3044", "\u3064\u3082\u308a", "\u3064\u3082\u308b", "\u3064\u3088\u3044", "\u3064\u308b\u307c", "\u3064\u308b\u307f\u304f", "\u3064\u308f\u3082\u306e", "\u3064\u308f\u308a", "\u3066\u3042\u3057", "\u3066\u3042\u3066", "\u3066\u3042\u307f", "\u3066\u3044\u304a\u3093", "\u3066\u3044\u304b", "\u3066\u3044\u304d", "\u3066\u3044\u3051\u3044", "\u3066\u3044\u3053\u304f", "\u3066\u3044\u3055\u3064", "\u3066\u3044\u3057", "\u3066\u3044\u305b\u3044", "\u3066\u3044\u305f\u3044", "\u3066\u3044\u3069", "\u3066\u3044\u306d\u3044", "\u3066\u3044\u3072\u3087\u3046", "\u3066\u3044\u3078\u3093", "\u3066\u3044\u307c\u3046", "\u3066\u3046\u3061", "\u3066\u304a\u304f\u308c", "\u3066\u304d\u3068\u3046", "\u3066\u304f\u3073", "\u3067\u3053\u307c\u3053", "\u3066\u3055\u304e\u3087\u3046", "\u3066\u3055\u3052", "\u3066\u3059\u308a", "\u3066\u305d\u3046", "\u3066\u3061\u304c\u3044", "\u3066\u3061\u3087\u3046", "\u3066\u3064\u304c\u304f", "\u3066\u3064\u3065\u304d", "\u3067\u3063\u3071", "\u3066\u3064\u307c\u3046", "\u3066\u3064\u3084", "\u3067\u306c\u304b\u3048", "\u3066\u306c\u304d", "\u3066\u306c\u3050\u3044", "\u3066\u306e\u3072\u3089", "\u3066\u306f\u3044", "\u3066\u3076\u304f\u308d", "\u3066\u3075\u3060", "\u3066\u307b\u3069\u304d", "\u3066\u307b\u3093", "\u3066\u307e\u3048", "\u3066\u307e\u304d\u305a\u3057", "\u3066\u307f\u3058\u304b", "\u3066\u307f\u3084\u3052", "\u3066\u3089\u3059", "\u3066\u308c\u3073", "\u3066\u308f\u3051", "\u3066\u308f\u305f\u3057", "\u3067\u3093\u3042\u3064", "\u3066\u3093\u3044\u3093", "\u3066\u3093\u304b\u3044", "\u3066\u3093\u304d", "\u3066\u3093\u3050", "\u3066\u3093\u3051\u3093", "\u3066\u3093\u3054\u304f", "\u3066\u3093\u3055\u3044", "\u3066\u3093\u3057", "\u3066\u3093\u3059\u3046", "\u3067\u3093\u3061", "\u3066\u3093\u3066\u304d", "\u3066\u3093\u3068\u3046", "\u3066\u3093\u306a\u3044", "\u3066\u3093\u3077\u3089", "\u3066\u3093\u307c\u3046\u3060\u3044", "\u3066\u3093\u3081\u3064", "\u3066\u3093\u3089\u3093\u304b\u3044", "\u3067\u3093\u308a\u3087\u304f", "\u3067\u3093\u308f", "\u3069\u3042\u3044", "\u3068\u3044\u308c", "\u3069\u3046\u304b\u3093", "\u3068\u3046\u304d\u3085\u3046", "\u3069\u3046\u3050", "\u3068\u3046\u3057", "\u3068\u3046\u3080\u304e", "\u3068\u304a\u3044", "\u3068\u304a\u304b", "\u3068\u304a\u304f", "\u3068\u304a\u3059", "\u3068\u304a\u308b", "\u3068\u304b\u3044", "\u3068\u304b\u3059", "\u3068\u304d\u304a\u308a", "\u3068\u304d\u3069\u304d", "\u3068\u304f\u3044", "\u3068\u304f\u3057\u3085\u3046", "\u3068\u304f\u3066\u3093", "\u3068\u304f\u306b", "\u3068\u304f\u3079\u3064", "\u3068\u3051\u3044", "\u3068\u3051\u308b", "\u3068\u3053\u3084", "\u3068\u3055\u304b", "\u3068\u3057\u3087\u304b\u3093", "\u3068\u305d\u3046", "\u3068\u305f\u3093", "\u3068\u3061\u3085\u3046", "\u3068\u3063\u304d\u3085\u3046", "\u3068\u3063\u304f\u3093", "\u3068\u3064\u305c\u3093", "\u3068\u3064\u306b\u3085\u3046", "\u3068\u3069\u3051\u308b", "\u3068\u3068\u306e\u3048\u308b", "\u3068\u306a\u3044", "\u3068\u306a\u3048\u308b", "\u3068\u306a\u308a", "\u3068\u306e\u3055\u307e", "\u3068\u3070\u3059", "\u3069\u3076\u304c\u308f", "\u3068\u307b\u3046", "\u3068\u307e\u308b", "\u3068\u3081\u308b", "\u3068\u3082\u3060\u3061", "\u3068\u3082\u308b", "\u3069\u3088\u3046\u3073", "\u3068\u3089\u3048\u308b", "\u3068\u3093\u304b\u3064", "\u3069\u3093\u3076\u308a", "\u306a\u3044\u304b\u304f", "\u306a\u3044\u3053\u3046", "\u306a\u3044\u3057\u3087", "\u306a\u3044\u3059", "\u306a\u3044\u305b\u3093", "\u306a\u3044\u305d\u3046", "\u306a\u304a\u3059", "\u306a\u304c\u3044", "\u306a\u304f\u3059", "\u306a\u3052\u308b", "\u306a\u3053\u3046\u3069", "\u306a\u3055\u3051", "\u306a\u305f\u3067\u3053\u3053", "\u306a\u3063\u3068\u3046", "\u306a\u3064\u3084\u3059\u307f", "\u306a\u306a\u304a\u3057", "\u306a\u306b\u3054\u3068", "\u306a\u306b\u3082\u306e", "\u306a\u306b\u308f", "\u306a\u306e\u304b", "\u306a\u3075\u3060", "\u306a\u307e\u3044\u304d", "\u306a\u307e\u3048", "\u306a\u307e\u307f", "\u306a\u307f\u3060", "\u306a\u3081\u3089\u304b", "\u306a\u3081\u308b", "\u306a\u3084\u3080", "\u306a\u3089\u3046", "\u306a\u3089\u3073", "\u306a\u3089\u3076", "\u306a\u308c\u308b", "\u306a\u308f\u3068\u3073", "\u306a\u308f\u3070\u308a", "\u306b\u3042\u3046", "\u306b\u3044\u304c\u305f", "\u306b\u3046\u3051", "\u306b\u304a\u3044", "\u306b\u304b\u3044", "\u306b\u304c\u3066", "\u306b\u304d\u3073", "\u306b\u304f\u3057\u307f", "\u306b\u304f\u307e\u3093", "\u306b\u3052\u308b", "\u306b\u3055\u3093\u304b\u305f\u3093\u305d", "\u306b\u3057\u304d", "\u306b\u305b\u3082\u306e", "\u306b\u3061\u3058\u3087\u3046", "\u306b\u3061\u3088\u3046\u3073", "\u306b\u3063\u304b", "\u306b\u3063\u304d", "\u306b\u3063\u3051\u3044", "\u306b\u3063\u3053\u3046", "\u306b\u3063\u3055\u3093", "\u306b\u3063\u3057\u3087\u304f", "\u306b\u3063\u3059\u3046", "\u306b\u3063\u305b\u304d", "\u306b\u3063\u3066\u3044", "\u306b\u306a\u3046", "\u306b\u307b\u3093", "\u306b\u307e\u3081", "\u306b\u3082\u3064", "\u306b\u3084\u308a", "\u306b\u3085\u3046\u3044\u3093", "\u306b\u308a\u3093\u3057\u3083", "\u306b\u308f\u3068\u308a", "\u306b\u3093\u3044", "\u306b\u3093\u304b", "\u306b\u3093\u304d", "\u306b\u3093\u3052\u3093", "\u306b\u3093\u3057\u304d", "\u306b\u3093\u305a\u3046", "\u306b\u3093\u305d\u3046", "\u306b\u3093\u305f\u3044", "\u306b\u3093\u3061", "\u306b\u3093\u3066\u3044", "\u306b\u3093\u306b\u304f", "\u306b\u3093\u3077", "\u306b\u3093\u307e\u308a", "\u306b\u3093\u3080", "\u306b\u3093\u3081\u3044", "\u306b\u3093\u3088\u3046", "\u306c\u3044\u304f\u304e", "\u306c\u304b\u3059", "\u306c\u3050\u3044\u3068\u308b", "\u306c\u3050\u3046", "\u306c\u304f\u3082\u308a", "\u306c\u3059\u3080", "\u306c\u307e\u3048\u3073", "\u306c\u3081\u308a", "\u306c\u3089\u3059", "\u306c\u3093\u3061\u3083\u304f", "\u306d\u3042\u3052", "\u306d\u3044\u304d", "\u306d\u3044\u308b", "\u306d\u3044\u308d", "\u306d\u3050\u305b", "\u306d\u304f\u305f\u3044", "\u306d\u304f\u3089", "\u306d\u3053\u305c", "\u306d\u3053\u3080", "\u306d\u3055\u3052", "\u306d\u3059\u3054\u3059", "\u306d\u305d\u3079\u308b", "\u306d\u3060\u3093", "\u306d\u3064\u3044", "\u306d\u3063\u3057\u3093", "\u306d\u3064\u305e\u3046", "\u306d\u3063\u305f\u3044\u304e\u3087", "\u306d\u3076\u305d\u304f", "\u306d\u3075\u3060", "\u306d\u307c\u3046", "\u306d\u307b\u308a\u306f\u307b\u308a", "\u306d\u307e\u304d", "\u306d\u307e\u308f\u3057", "\u306d\u307f\u307f", "\u306d\u3080\u3044", "\u306d\u3080\u305f\u3044", "\u306d\u3082\u3068", "\u306d\u3089\u3046", "\u306d\u308f\u3056", "\u306d\u3093\u3044\u308a", "\u306d\u3093\u304a\u3057", "\u306d\u3093\u304b\u3093", "\u306d\u3093\u304d\u3093", "\u306d\u3093\u3050", "\u306d\u3093\u3056", "\u306d\u3093\u3057", "\u306d\u3093\u3061\u3083\u304f", "\u306d\u3093\u3069", "\u306d\u3093\u3074", "\u306d\u3093\u3076\u3064", "\u306d\u3093\u307e\u3064", "\u306d\u3093\u308a\u3087\u3046", "\u306d\u3093\u308c\u3044", "\u306e\u3044\u305a", "\u306e\u304a\u3065\u307e", "\u306e\u304c\u3059", "\u306e\u304d\u306a\u307f", "\u306e\u3053\u304e\u308a", "\u306e\u3053\u3059", "\u306e\u3053\u308b", "\u306e\u305b\u308b", "\u306e\u305e\u304f", "\u306e\u305e\u3080", "\u306e\u305f\u307e\u3046", "\u306e\u3061\u307b\u3069", "\u306e\u3063\u304f", "\u306e\u3070\u3059", "\u306e\u306f\u3089", "\u306e\u3079\u308b", "\u306e\u307c\u308b", "\u306e\u307f\u3082\u306e", "\u306e\u3084\u307e", "\u306e\u3089\u3044\u306c", "\u306e\u3089\u306d\u3053", "\u306e\u308a\u3082\u306e", "\u306e\u308a\u3086\u304d", "\u306e\u308c\u3093", "\u306e\u3093\u304d", "\u3070\u3042\u3044", "\u306f\u3042\u304f", "\u3070\u3042\u3055\u3093", "\u3070\u3044\u304b", "\u3070\u3044\u304f", "\u306f\u3044\u3051\u3093", "\u306f\u3044\u3054", "\u306f\u3044\u3057\u3093", "\u306f\u3044\u3059\u3044", "\u306f\u3044\u305b\u3093", "\u306f\u3044\u305d\u3046", "\u306f\u3044\u3061", "\u3070\u3044\u3070\u3044", "\u306f\u3044\u308c\u3064", "\u306f\u3048\u308b", "\u306f\u304a\u308b", "\u306f\u304b\u3044", "\u3070\u304b\u308a", "\u306f\u304b\u308b", "\u306f\u304f\u3057\u3085", "\u306f\u3051\u3093", "\u306f\u3053\u3076", "\u306f\u3055\u307f", "\u306f\u3055\u3093", "\u306f\u3057\u3054", "\u3070\u3057\u3087", "\u306f\u3057\u308b", "\u306f\u305b\u308b", "\u3071\u305d\u3053\u3093", "\u306f\u305d\u3093", "\u306f\u305f\u3093", "\u306f\u3061\u307f\u3064", "\u306f\u3064\u304a\u3093", "\u306f\u3063\u304b\u304f", "\u306f\u3065\u304d", "\u306f\u3063\u304d\u308a", "\u306f\u3063\u304f\u3064", "\u306f\u3063\u3051\u3093", "\u306f\u3063\u3053\u3046", "\u306f\u3063\u3055\u3093", "\u306f\u3063\u3057\u3093", "\u306f\u3063\u305f\u3064", "\u306f\u3063\u3061\u3085\u3046", "\u306f\u3063\u3066\u3093", "\u306f\u3063\u3074\u3087\u3046", "\u306f\u3063\u307d\u3046", "\u306f\u306a\u3059", "\u306f\u306a\u3073", "\u306f\u306b\u304b\u3080", "\u306f\u3076\u3089\u3057", "\u306f\u307f\u304c\u304d", "\u306f\u3080\u304b\u3046", "\u306f\u3081\u3064", "\u306f\u3084\u3044", "\u306f\u3084\u3057", "\u306f\u3089\u3046", "\u306f\u308d\u3046\u3043\u3093", "\u306f\u308f\u3044", "\u306f\u3093\u3044", "\u306f\u3093\u3048\u3044", "\u306f\u3093\u304a\u3093", "\u306f\u3093\u304b\u304f", "\u306f\u3093\u304d\u3087\u3046", "\u3070\u3093\u3050\u307f", "\u306f\u3093\u3053", "\u306f\u3093\u3057\u3083", "\u306f\u3093\u3059\u3046", "\u306f\u3093\u3060\u3093", "\u3071\u3093\u3061", "\u3071\u3093\u3064", "\u306f\u3093\u3066\u3044", "\u306f\u3093\u3068\u3057", "\u306f\u3093\u306e\u3046", "\u306f\u3093\u3071", "\u306f\u3093\u3076\u3093", "\u306f\u3093\u307a\u3093", "\u306f\u3093\u307c\u3046\u304d", "\u306f\u3093\u3081\u3044", "\u306f\u3093\u3089\u3093", "\u306f\u3093\u308d\u3093", "\u3072\u3044\u304d", "\u3072\u3046\u3093", "\u3072\u3048\u308b", "\u3072\u304b\u304f", "\u3072\u304b\u308a", "\u3072\u304b\u308b", "\u3072\u304b\u3093", "\u3072\u304f\u3044", "\u3072\u3051\u3064", "\u3072\u3053\u3046\u304d", "\u3072\u3053\u304f", "\u3072\u3055\u3044", "\u3072\u3055\u3057\u3076\u308a", "\u3072\u3055\u3093", "\u3073\u3058\u3085\u3064\u304b\u3093", "\u3072\u3057\u3087"]), type$.JSArray_String);
    B.List_Qm0 = A._setArrayType(makeConstList([139, 101, 89, 112, 21, 55, 153, 175, 42, 234, 220, 159, 241, 173, 208, 234, 108, 114, 81, 213, 65, 84, 207, 169, 44, 23, 58, 13, 211, 156, 31, 148]), type$.JSArray_int);
    B.PoolInfoExtent_0 = new A.PoolInfoExtent(0, "none");
    B.PoolInfoExtent_1 = new A.PoolInfoExtent(1, "incremental");
    B.PoolInfoExtent_2 = new A.PoolInfoExtent(2, "full");
    B.List_StN = A._setArrayType(makeConstList([B.PoolInfoExtent_0, B.PoolInfoExtent_1, B.PoolInfoExtent_2]), A.findType("JSArray<PoolInfoExtent>"));
    B.List_Szg = A._setArrayType(makeConstList(["abdikace", "abeceda", "adresa", "agrese", "akce", "aktovka", "alej", "alkohol", "amputace", "ananas", "andulka", "anekdota", "anketa", "antika", "anulovat", "archa", "arogance", "asfalt", "asistent", "aspirace", "astma", "astronom", "atlas", "atletika", "atol", "autobus", "azyl", "babka", "bachor", "bacil", "baculka", "badatel", "bageta", "bagr", "bahno", "bakterie", "balada", "baletka", "balkon", "balonek", "balvan", "balza", "bambus", "bankomat", "barbar", "baret", "barman", "baroko", "barva", "baterka", "batoh", "bavlna", "bazalka", "bazilika", "bazuka", "bedna", "beran", "beseda", "bestie", "beton", "bezinka", "bezmoc", "beztak", "bicykl", "bidlo", "biftek", "bikiny", "bilance", "biograf", "biolog", "bitva", "bizon", "blahobyt", "blatouch", "blecha", "bledule", "blesk", "blikat", "blizna", "blokovat", "bloudit", "blud", "bobek", "bobr", "bodlina", "bodnout", "bohatost", "bojkot", "bojovat", "bokorys", "bolest", "borec", "borovice", "bota", "boubel", "bouchat", "bouda", "boule", "bourat", "boxer", "bradavka", "brambora", "branka", "bratr", "brepta", "briketa", "brko", "brloh", "bronz", "broskev", "brunetka", "brusinka", "brzda", "brzy", "bublina", "bubnovat", "buchta", "buditel", "budka", "budova", "bufet", "bujarost", "bukvice", "buldok", "bulva", "bunda", "bunkr", "burza", "butik", "buvol", "buzola", "bydlet", "bylina", "bytovka", "bzukot", "capart", "carevna", "cedr", "cedule", "cejch", "cejn", "cela", "celer", "celkem", "celnice", "cenina", "cennost", "cenovka", "centrum", "cenzor", "cestopis", "cetka", "chalupa", "chapadlo", "charita", "chata", "chechtat", "chemie", "chichot", "chirurg", "chlad", "chleba", "chlubit", "chmel", "chmura", "chobot", "chochol", "chodba", "cholera", "chomout", "chopit", "choroba", "chov", "chrapot", "chrlit", "chrt", "chrup", "chtivost", "chudina", "chutnat", "chvat", "chvilka", "chvost", "chyba", "chystat", "chytit", "cibule", "cigareta", "cihelna", "cihla", "cinkot", "cirkus", "cisterna", "citace", "citrus", "cizinec", "cizost", "clona", "cokoliv", "couvat", "ctitel", "ctnost", "cudnost", "cuketa", "cukr", "cupot", "cvaknout", "cval", "cvik", "cvrkot", "cyklista", "daleko", "dareba", "datel", "datum", "dcera", "debata", "dechovka", "decibel", "deficit", "deflace", "dekl", "dekret", "demokrat", "deprese", "derby", "deska", "detektiv", "dikobraz", "diktovat", "dioda", "diplom", "disk", "displej", "divadlo", "divoch", "dlaha", "dlouho", "dluhopis", "dnes", "dobro", "dobytek", "docent", "dochutit", "dodnes", "dohled", "dohoda", "dohra", "dojem", "dojnice", "doklad", "dokola", "doktor", "dokument", "dolar", "doleva", "dolina", "doma", "dominant", "domluvit", "domov", "donutit", "dopad", "dopis", "doplnit", "doposud", "doprovod", "dopustit", "dorazit", "dorost", "dort", "dosah", "doslov", "dostatek", "dosud", "dosyta", "dotaz", "dotek", "dotknout", "doufat", "doutnat", "dovozce", "dozadu", "doznat", "dozorce", "drahota", "drak", "dramatik", "dravec", "draze", "drdol", "drobnost", "drogerie", "drozd", "drsnost", "drtit", "drzost", "duben", "duchovno", "dudek", "duha", "duhovka", "dusit", "dusno", "dutost", "dvojice", "dvorec", "dynamit", "ekolog", "ekonomie", "elektron", "elipsa", "email", "emise", "emoce", "empatie", "epizoda", "epocha", "epopej", "epos", "esej", "esence", "eskorta", "eskymo", "etiketa", "euforie", "evoluce", "exekuce", "exkurze", "expedice", "exploze", "export", "extrakt", "facka", "fajfka", "fakulta", "fanatik", "fantazie", "farmacie", "favorit", "fazole", "federace", "fejeton", "fenka", "fialka", "figurant", "filozof", "filtr", "finance", "finta", "fixace", "fjord", "flanel", "flirt", "flotila", "fond", "fosfor", "fotbal", "fotka", "foton", "frakce", "freska", "fronta", "fukar", "funkce", "fyzika", "galeje", "garant", "genetika", "geolog", "gilotina", "glazura", "glejt", "golem", "golfista", "gotika", "graf", "gramofon", "granule", "grep", "gril", "grog", "groteska", "guma", "hadice", "hadr", "hala", "halenka", "hanba", "hanopis", "harfa", "harpuna", "havran", "hebkost", "hejkal", "hejno", "hejtman", "hektar", "helma", "hematom", "herec", "herna", "heslo", "hezky", "historik", "hladovka", "hlasivky", "hlava", "hledat", "hlen", "hlodavec", "hloh", "hloupost", "hltat", "hlubina", "hluchota", "hmat", "hmota", "hmyz", "hnis", "hnojivo", "hnout", "hoblina", "hoboj", "hoch", "hodiny", "hodlat", "hodnota", "hodovat", "hojnost", "hokej", "holinka", "holka", "holub", "homole", "honitba", "honorace", "horal", "horda", "horizont", "horko", "horlivec", "hormon", "hornina", "horoskop", "horstvo", "hospoda", "hostina", "hotovost", "houba", "houf", "houpat", "houska", "hovor", "hradba", "hranice", "hravost", "hrazda", "hrbolek", "hrdina", "hrdlo", "hrdost", "hrnek", "hrobka", "hromada", "hrot", "hrouda", "hrozen", "hrstka", "hrubost", "hryzat", "hubenost", "hubnout", "hudba", "hukot", "humr", "husita", "hustota", "hvozd", "hybnost", "hydrant", "hygiena", "hymna", "hysterik", "idylka", "ihned", "ikona", "iluze", "imunita", "infekce", "inflace", "inkaso", "inovace", "inspekce", "internet", "invalida", "investor", "inzerce", "ironie", "jablko", "jachta", "jahoda", "jakmile", "jakost", "jalovec", "jantar", "jarmark", "jaro", "jasan", "jasno", "jatka", "javor", "jazyk", "jedinec", "jedle", "jednatel", "jehlan", "jekot", "jelen", "jelito", "jemnost", "jenom", "jepice", "jeseter", "jevit", "jezdec", "jezero", "jinak", "jindy", "jinoch", "jiskra", "jistota", "jitrnice", "jizva", "jmenovat", "jogurt", "jurta", "kabaret", "kabel", "kabinet", "kachna", "kadet", "kadidlo", "kahan", "kajak", "kajuta", "kakao", "kaktus", "kalamita", "kalhoty", "kalibr", "kalnost", "kamera", "kamkoliv", "kamna", "kanibal", "kanoe", "kantor", "kapalina", "kapela", "kapitola", "kapka", "kaple", "kapota", "kapr", "kapusta", "kapybara", "karamel", "karotka", "karton", "kasa", "katalog", "katedra", "kauce", "kauza", "kavalec", "kazajka", "kazeta", "kazivost", "kdekoliv", "kdesi", "kedluben", "kemp", "keramika", "kino", "klacek", "kladivo", "klam", "klapot", "klasika", "klaun", "klec", "klenba", "klepat", "klesnout", "klid", "klima", "klisna", "klobouk", "klokan", "klopa", "kloub", "klubovna", "klusat", "kluzkost", "kmen", "kmitat", "kmotr", "kniha", "knot", "koalice", "koberec", "kobka", "kobliha", "kobyla", "kocour", "kohout", "kojenec", "kokos", "koktejl", "kolaps", "koleda", "kolize", "kolo", "komando", "kometa", "komik", "komnata", "komora", "kompas", "komunita", "konat", "koncept", "kondice", "konec", "konfese", "kongres", "konina", "konkurs", "kontakt", "konzerva", "kopanec", "kopie", "kopnout", "koprovka", "korbel", "korektor", "kormidlo", "koroptev", "korpus", "koruna", "koryto", "korzet", "kosatec", "kostka", "kotel", "kotleta", "kotoul", "koukat", "koupelna", "kousek", "kouzlo", "kovboj", "koza", "kozoroh", "krabice", "krach", "krajina", "kralovat", "krasopis", "kravata", "kredit", "krejcar", "kresba", "kreveta", "kriket", "kritik", "krize", "krkavec", "krmelec", "krmivo", "krocan", "krok", "kronika", "kropit", "kroupa", "krovka", "krtek", "kruhadlo", "krupice", "krutost", "krvinka", "krychle", "krypta", "krystal", "kryt", "kudlanka", "kufr", "kujnost", "kukla", "kulajda", "kulich", "kulka", "kulomet", "kultura", "kuna", "kupodivu", "kurt", "kurzor", "kutil", "kvalita", "kvasinka", "kvestor", "kynolog", "kyselina", "kytara", "kytice", "kytka", "kytovec", "kyvadlo", "labrador", "lachtan", "ladnost", "laik", "lakomec", "lamela", "lampa", "lanovka", "lasice", "laso", "lastura", "latinka", "lavina", "lebka", "leckdy", "leden", "lednice", "ledovka", "ledvina", "legenda", "legie", "legrace", "lehce", "lehkost", "lehnout", "lektvar", "lenochod", "lentilka", "lepenka", "lepidlo", "letadlo", "letec", "letmo", "letokruh", "levhart", "levitace", "levobok", "libra", "lichotka", "lidojed", "lidskost", "lihovina", "lijavec", "lilek", "limetka", "linie", "linka", "linoleum", "listopad", "litina", "litovat", "lobista", "lodivod", "logika", "logoped", "lokalita", "loket", "lomcovat", "lopata", "lopuch", "lord", "losos", "lotr", "loudal", "louh", "louka", "louskat", "lovec", "lstivost", "lucerna", "lucifer", "lump", "lusk", "lustrace", "lvice", "lyra", "lyrika", "lysina", "madam", "madlo", "magistr", "mahagon", "majetek", "majitel", "majorita", "makak", "makovice", "makrela", "malba", "malina", "malovat", "malvice", "maminka", "mandle", "manko", "marnost", "masakr", "maskot", "masopust", "matice", "matrika", "maturita", "mazanec", "mazivo", "mazlit", "mazurka", "mdloba", "mechanik", "meditace", "medovina", "melasa", "meloun", "mentolka", "metla", "metoda", "metr", "mezera", "migrace", "mihnout", "mihule", "mikina", "mikrofon", "milenec", "milimetr", "milost", "mimika", "mincovna", "minibar", "minomet", "minulost", "miska", "mistr", "mixovat", "mladost", "mlha", "mlhovina", "mlok", "mlsat", "mluvit", "mnich", "mnohem", "mobil", "mocnost", "modelka", "modlitba", "mohyla", "mokro", "molekula", "momentka", "monarcha", "monokl", "monstrum", "montovat", "monzun", "mosaz", "moskyt", "most", "motivace", "motorka", "motyka", "moucha", "moudrost", "mozaika", "mozek", "mozol", "mramor", "mravenec", "mrkev", "mrtvola", "mrzet", "mrzutost", "mstitel", "mudrc", "muflon", "mulat", "mumie", "munice", "muset", "mutace", "muzeum", "muzikant", "myslivec", "mzda", "nabourat", "nachytat", "nadace", "nadbytek", "nadhoz", "nadobro", "nadpis", "nahlas", "nahnat", "nahodile", "nahradit", "naivita", "najednou", "najisto", "najmout", "naklonit", "nakonec", "nakrmit", "nalevo", "namazat", "namluvit", "nanometr", "naoko", "naopak", "naostro", "napadat", "napevno", "naplnit", "napnout", "naposled", "naprosto", "narodit", "naruby", "narychlo", "nasadit", "nasekat", "naslepo", "nastat", "natolik", "navenek", "navrch", "navzdory", "nazvat", "nebe", "nechat", "necky", "nedaleko", "nedbat", "neduh", "negace", "nehet", "nehoda", "nejen", "nejprve", "neklid", "nelibost", "nemilost", "nemoc", "neochota", "neonka", "nepokoj", "nerost", "nerv", "nesmysl", "nesoulad", "netvor", "neuron", "nevina", "nezvykle", "nicota", "nijak", "nikam", "nikdy", "nikl", "nikterak", "nitro", "nocleh", "nohavice", "nominace", "nora", "norek", "nositel", "nosnost", "nouze", "noviny", "novota", "nozdra", "nuda", "nudle", "nuget", "nutit", "nutnost", "nutrie", "nymfa", "obal", "obarvit", "obava", "obdiv", "obec", "obehnat", "obejmout", "obezita", "obhajoba", "obilnice", "objasnit", "objekt", "obklopit", "oblast", "oblek", "obliba", "obloha", "obluda", "obnos", "obohatit", "obojek", "obout", "obrazec", "obrna", "obruba", "obrys", "obsah", "obsluha", "obstarat", "obuv", "obvaz", "obvinit", "obvod", "obvykle", "obyvatel", "obzor", "ocas", "ocel", "ocenit", "ochladit", "ochota", "ochrana", "ocitnout", "odboj", "odbyt", "odchod", "odcizit", "odebrat", "odeslat", "odevzdat", "odezva", "odhadce", "odhodit", "odjet", "odjinud", "odkaz", "odkoupit", "odliv", "odluka", "odmlka", "odolnost", "odpad", "odpis", "odplout", "odpor", "odpustit", "odpykat", "odrazka", "odsoudit", "odstup", "odsun", "odtok", "odtud", "odvaha", "odveta", "odvolat", "odvracet", "odznak", "ofina", "ofsajd", "ohlas", "ohnisko", "ohrada", "ohrozit", "ohryzek", "okap", "okenice", "oklika", "okno", "okouzlit", "okovy", "okrasa", "okres", "okrsek", "okruh", "okupant", "okurka", "okusit", "olejnina", "olizovat", "omak", "omeleta", "omezit", "omladina", "omlouvat", "omluva", "omyl", "onehdy", "opakovat", "opasek", "operace", "opice", "opilost", "opisovat", "opora", "opozice", "opravdu", "oproti", "orbital", "orchestr", "orgie", "orlice", "orloj", "ortel", "osada", "oschnout", "osika", "osivo", "oslava", "oslepit", "oslnit", "oslovit", "osnova", "osoba", "osolit", "ospalec", "osten", "ostraha", "ostuda", "ostych", "osvojit", "oteplit", "otisk", "otop", "otrhat", "otrlost", "otrok", "otruby", "otvor", "ovanout", "ovar", "oves", "ovlivnit", "ovoce", "oxid", "ozdoba", "pachatel", "pacient", "padouch", "pahorek", "pakt", "palanda", "palec", "palivo", "paluba", "pamflet", "pamlsek", "panenka", "panika", "panna", "panovat", "panstvo", "pantofle", "paprika", "parketa", "parodie", "parta", "paruka", "paryba", "paseka", "pasivita", "pastelka", "patent", "patrona", "pavouk", "pazneht", "pazourek", "pecka", "pedagog", "pejsek", "peklo", "peloton", "penalta", "pendrek", "penze", "periskop", "pero", "pestrost", "petarda", "petice", "petrolej", "pevnina", "pexeso", "pianista", "piha", "pijavice", "pikle", "piknik", "pilina", "pilnost", "pilulka", "pinzeta", "pipeta", "pisatel", "pistole", "pitevna", "pivnice", "pivovar", "placenta", "plakat", "plamen", "planeta", "plastika", "platit", "plavidlo", "plaz", "plech", "plemeno", "plenta", "ples", "pletivo", "plevel", "plivat", "plnit", "plno", "plocha", "plodina", "plomba", "plout", "pluk", "plyn", "pobavit", "pobyt", "pochod", "pocit", "poctivec", "podat", "podcenit", "podepsat", "podhled", "podivit", "podklad", "podmanit", "podnik", "podoba", "podpora", "podraz", "podstata", "podvod", "podzim", "poezie", "pohanka", "pohnutka", "pohovor", "pohroma", "pohyb", "pointa", "pojistka", "pojmout", "pokazit", "pokles", "pokoj", "pokrok", "pokuta", "pokyn", "poledne", "polibek", "polknout", "poloha", "polynom", "pomalu", "pominout", "pomlka", "pomoc", "pomsta", "pomyslet", "ponechat", "ponorka", "ponurost", "popadat", "popel", "popisek", "poplach", "poprosit", "popsat", "popud", "poradce", "porce", "porod", "porucha", "poryv", "posadit", "posed", "posila", "poskok", "poslanec", "posoudit", "pospolu", "postava", "posudek", "posyp", "potah", "potkan", "potlesk", "potomek", "potrava", "potupa", "potvora", "poukaz", "pouto", "pouzdro", "povaha", "povidla", "povlak", "povoz", "povrch", "povstat", "povyk", "povzdech", "pozdrav", "pozemek", "poznatek", "pozor", "pozvat", "pracovat", "prahory", "praktika", "prales", "praotec", "praporek", "prase", "pravda", "princip", "prkno", "probudit", "procento", "prodej", "profese", "prohra", "projekt", "prolomit", "promile", "pronikat", "propad", "prorok", "prosba", "proton", "proutek", "provaz", "prskavka", "prsten", "prudkost", "prut", "prvek", "prvohory", "psanec", "psovod", "pstruh", "ptactvo", "puberta", "puch", "pudl", "pukavec", "puklina", "pukrle", "pult", "pumpa", "punc", "pupen", "pusa", "pusinka", "pustina", "putovat", "putyka", "pyramida", "pysk", "pytel", "racek", "rachot", "radiace", "radnice", "radon", "raft", "ragby", "raketa", "rakovina", "rameno", "rampouch", "rande", "rarach", "rarita", "rasovna", "rastr", "ratolest", "razance", "razidlo", "reagovat", "reakce", "recept", "redaktor", "referent", "reflex", "rejnok", "reklama", "rekord", "rekrut", "rektor", "reputace", "revize", "revma", "revolver", "rezerva", "riskovat", "riziko", "robotika", "rodokmen", "rohovka", "rokle", "rokoko", "romaneto", "ropovod", "ropucha", "rorejs", "rosol", "rostlina", "rotmistr", "rotoped", "rotunda", "roubenka", "roucho", "roup", "roura", "rovina", "rovnice", "rozbor", "rozchod", "rozdat", "rozeznat", "rozhodce", "rozinka", "rozjezd", "rozkaz", "rozloha", "rozmar", "rozpad", "rozruch", "rozsah", "roztok", "rozum", "rozvod", "rubrika", "ruchadlo", "rukavice", "rukopis", "ryba", "rybolov", "rychlost", "rydlo", "rypadlo", "rytina", "ryzost", "sadista", "sahat", "sako", "samec", "samizdat", "samota", "sanitka", "sardinka", "sasanka", "satelit", "sazba", "sazenice", "sbor", "schovat", "sebranka", "secese", "sedadlo", "sediment", "sedlo", "sehnat", "sejmout", "sekera", "sekta", "sekunda", "sekvoje", "semeno", "seno", "servis", "sesadit", "seshora", "seskok", "seslat", "sestra", "sesuv", "sesypat", "setba", "setina", "setkat", "setnout", "setrvat", "sever", "seznam", "shoda", "shrnout", "sifon", "silnice", "sirka", "sirotek", "sirup", "situace", "skafandr", "skalisko", "skanzen", "skaut", "skeptik", "skica", "skladba", "sklenice", "sklo", "skluz", "skoba", "skokan", "skoro", "skripta", "skrz", "skupina", "skvost", "skvrna", "slabika", "sladidlo", "slanina", "slast", "slavnost", "sledovat", "slepec", "sleva", "slezina", "slib", "slina", "sliznice", "slon", "sloupek", "slovo", "sluch", "sluha", "slunce", "slupka", "slza", "smaragd", "smetana", "smilstvo", "smlouva", "smog", "smrad", "smrk", "smrtka", "smutek", "smysl", "snad", "snaha", "snob", "sobota", "socha", "sodovka", "sokol", "sopka", "sotva", "souboj", "soucit", "soudce", "souhlas", "soulad", "soumrak", "souprava", "soused", "soutok", "souviset", "spalovna", "spasitel", "spis", "splav", "spodek", "spojenec", "spolu", "sponzor", "spornost", "spousta", "sprcha", "spustit", "sranda", "sraz", "srdce", "srna", "srnec", "srovnat", "srpen", "srst", "srub", "stanice", "starosta", "statika", "stavba", "stehno", "stezka", "stodola", "stolek", "stopa", "storno", "stoupat", "strach", "stres", "strhnout", "strom", "struna", "studna", "stupnice", "stvol", "styk", "subjekt", "subtropy", "suchar", "sudost", "sukno", "sundat", "sunout", "surikata", "surovina", "svah", "svalstvo", "svetr", "svatba", "svazek", "svisle", "svitek", "svoboda", "svodidlo", "svorka", "svrab", "sykavka", "sykot", "synek", "synovec", "sypat", "sypkost", "syrovost", "sysel", "sytost", "tabletka", "tabule", "tahoun", "tajemno", "tajfun", "tajga", "tajit", "tajnost", "taktika", "tamhle", "tampon", "tancovat", "tanec", "tanker", "tapeta", "tavenina", "tazatel", "technika", "tehdy", "tekutina", "telefon", "temnota", "tendence", "tenista", "tenor", "teplota", "tepna", "teprve", "terapie", "termoska", "textil", "ticho", "tiskopis", "titulek", "tkadlec", "tkanina", "tlapka", "tleskat", "tlukot", "tlupa", "tmel", "toaleta", "topinka", "topol", "torzo", "touha", "toulec", "tradice", "traktor", "tramp", "trasa", "traverza", "trefit", "trest", "trezor", "trhavina", "trhlina", "trochu", "trojice", "troska", "trouba", "trpce", "trpitel", "trpkost", "trubec", "truchlit", "truhlice", "trus", "trvat", "tudy", "tuhnout", "tuhost", "tundra", "turista", "turnaj", "tuzemsko", "tvaroh", "tvorba", "tvrdost", "tvrz", "tygr", "tykev", "ubohost", "uboze", "ubrat", "ubrousek", "ubrus", "ubytovna", "ucho", "uctivost", "udivit", "uhradit", "ujednat", "ujistit", "ujmout", "ukazatel", "uklidnit", "uklonit", "ukotvit", "ukrojit", "ulice", "ulita", "ulovit", "umyvadlo", "unavit", "uniforma", "uniknout", "upadnout", "uplatnit", "uplynout", "upoutat", "upravit", "uran", "urazit", "usednout", "usilovat", "usmrtit", "usnadnit", "usnout", "usoudit", "ustlat", "ustrnout", "utahovat", "utkat", "utlumit", "utonout", "utopenec", "utrousit", "uvalit", "uvolnit", "uvozovka", "uzdravit", "uzel", "uzenina", "uzlina", "uznat", "vagon", "valcha", "valoun", "vana", "vandal", "vanilka", "varan", "varhany", "varovat", "vcelku", "vchod", "vdova", "vedro", "vegetace", "vejce", "velbloud", "veletrh", "velitel", "velmoc", "velryba", "venkov", "veranda", "verze", "veselka", "veskrze", "vesnice", "vespodu", "vesta", "veterina", "veverka", "vibrace", "vichr", "videohra", "vidina", "vidle", "vila", "vinice", "viset", "vitalita", "vize", "vizitka", "vjezd", "vklad", "vkus", "vlajka", "vlak", "vlasec", "vlevo", "vlhkost", "vliv", "vlnovka", "vloupat", "vnucovat", "vnuk", "voda", "vodivost", "vodoznak", "vodstvo", "vojensky", "vojna", "vojsko", "volant", "volba", "volit", "volno", "voskovka", "vozidlo", "vozovna", "vpravo", "vrabec", "vracet", "vrah", "vrata", "vrba", "vrcholek", "vrhat", "vrstva", "vrtule", "vsadit", "vstoupit", "vstup", "vtip", "vybavit", "vybrat", "vychovat", "vydat", "vydra", "vyfotit", "vyhledat", "vyhnout", "vyhodit", "vyhradit", "vyhubit", "vyjasnit", "vyjet", "vyjmout", "vyklopit", "vykonat", "vylekat", "vymazat", "vymezit", "vymizet", "vymyslet", "vynechat", "vynikat", "vynutit", "vypadat", "vyplatit", "vypravit", "vypustit", "vyrazit", "vyrovnat", "vyrvat", "vyslovit", "vysoko", "vystavit", "vysunout", "vysypat", "vytasit", "vytesat", "vytratit", "vyvinout", "vyvolat", "vyvrhel", "vyzdobit", "vyznat", "vzadu", "vzbudit", "vzchopit", "vzdor", "vzduch", "vzdychat", "vzestup", "vzhledem", "vzkaz", "vzlykat", "vznik", "vzorek", "vzpoura", "vztah", "vztek", "xylofon", "zabrat", "zabydlet", "zachovat", "zadarmo", "zadusit", "zafoukat", "zahltit", "zahodit", "zahrada", "zahynout", "zajatec", "zajet", "zajistit", "zaklepat", "zakoupit", "zalepit", "zamezit", "zamotat", "zamyslet", "zanechat", "zanikat", "zaplatit", "zapojit", "zapsat", "zarazit", "zastavit", "zasunout", "zatajit", "zatemnit", "zatknout", "zaujmout", "zavalit", "zavelet", "zavinit", "zavolat", "zavrtat", "zazvonit", "zbavit", "zbrusu", "zbudovat", "zbytek", "zdaleka", "zdarma", "zdatnost", "zdivo", "zdobit", "zdroj", "zdvih", "zdymadlo", "zelenina", "zeman", "zemina", "zeptat", "zezadu", "zezdola", "zhatit", "zhltnout", "zhluboka", "zhotovit", "zhruba", "zima", "zimnice", "zjemnit", "zklamat", "zkoumat", "zkratka", "zkumavka", "zlato", "zlehka", "zloba", "zlom", "zlost", "zlozvyk", "zmapovat", "zmar", "zmatek", "zmije", "zmizet", "zmocnit", "zmodrat", "zmrzlina", "zmutovat", "znak", "znalost", "znamenat", "znovu", "zobrazit", "zotavit", "zoubek", "zoufale", "zplodit", "zpomalit", "zprava", "zprostit", "zprudka", "zprvu", "zrada", "zranit", "zrcadlo", "zrnitost", "zrno", "zrovna", "zrychlit", "zrzavost", "zticha", "ztratit", "zubovina", "zubr", "zvednout", "zvenku", "zvesela", "zvon", "zvrat", "zvukovod", "zvyk"]), type$.JSArray_String);
    B.List_Tre = A._setArrayType(makeConstList([B.BipProposal_bip44, B.BipProposal_bip49, B.BipProposal_bip84, B.BipProposal_bip86]), A.findType("JSArray<BipProposal>"));
    B.MoneroWordsNum_13 = new A.MoneroWordsNum(13);
    B.MoneroWordsNum_25 = new A.MoneroWordsNum(25);
    B.List_U05 = A._setArrayType(makeConstList([B.MoneroWordsNum_13, B.MoneroWordsNum_25]), type$.JSArray_MoneroWordsNum);
    B.List_200_199_0 = A._setArrayType(makeConstList([200, 199, 0]), type$.JSArray_int);
    B.TonAccountContextType_WFB = new A.TonAccountContextType(B.List_200_199_0, 0, "legacy");
    B.List_200_199_1 = A._setArrayType(makeConstList([200, 199, 1]), type$.JSArray_int);
    B.TonAccountContextType_xd9 = new A.TonAccountContextType(B.List_200_199_1, 1, "subwallet");
    B.List_200_199_2 = A._setArrayType(makeConstList([200, 199, 2]), type$.JSArray_int);
    B.TonAccountContextType_mlj = new A.TonAccountContextType(B.List_200_199_2, 2, "v5");
    B.List_200_199_3 = A._setArrayType(makeConstList([200, 199, 3]), type$.JSArray_int);
    B.TonAccountContextType_s7p = new A.TonAccountContextType(B.List_200_199_3, 3, "v5SubWallet");
    B.List_U0W = A._setArrayType(makeConstList([B.TonAccountContextType_WFB, B.TonAccountContextType_xd9, B.TonAccountContextType_mlj, B.TonAccountContextType_s7p]), A.findType("JSArray<TonAccountContextType>"));
    B.MessageArgsStreamMethod_0_0_data = new A.MessageArgsStreamMethod(0, 0, "data");
    B.MessageArgsStreamMethod_1_1_close = new A.MessageArgsStreamMethod(1, 1, "close");
    B.MessageArgsStreamMethod_2_2_done = new A.MessageArgsStreamMethod(2, 2, "done");
    B.List_Ucj = A._setArrayType(makeConstList([B.MessageArgsStreamMethod_0_0_data, B.MessageArgsStreamMethod_1_1_close, B.MessageArgsStreamMethod_2_2_done]), A.findType("JSArray<MessageArgsStreamMethod>"));
    B.List_VOY0 = A._setArrayType(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), type$.JSArray_int);
    B.List_VOY = A._setArrayType(makeConstList([83, 117, 98, 65, 100, 100, 114, 0]), type$.JSArray_int);
    B.List_Vul = A._setArrayType(makeConstList([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]), type$.JSArray_int);
    B.List_Vul1 = A._setArrayType(makeConstList([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]), type$.JSArray_int);
    B.List_Vul2 = A._setArrayType(makeConstList([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]), type$.JSArray_int);
    B.List_Vul0 = A._setArrayType(makeConstList([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]), type$.JSArray_int);
    B.List_WA8 = A._setArrayType(makeConstList(["abaular", "abdominal", "abeto", "abissinio", "abjeto", "ablucao", "abnegar", "abotoar", "abrutalhar", "absurdo", "abutre", "acautelar", "accessorios", "acetona", "achocolatado", "acirrar", "acne", "acovardar", "acrostico", "actinomicete", "acustico", "adaptavel", "adeus", "adivinho", "adjunto", "admoestar", "adnominal", "adotivo", "adquirir", "adriatico", "adsorcao", "adutora", "advogar", "aerossol", "afazeres", "afetuoso", "afixo", "afluir", "afortunar", "afrouxar", "aftosa", "afunilar", "agentes", "agito", "aglutinar", "aiatola", "aimore", "aino", "aipo", "airoso", "ajeitar", "ajoelhar", "ajudante", "ajuste", "alazao", "albumina", "alcunha", "alegria", "alexandre", "alforriar", "alguns", "alhures", "alivio", "almoxarife", "alotropico", "alpiste", "alquimista", "alsaciano", "altura", "aluviao", "alvura", "amazonico", "ambulatorio", "ametodico", "amizades", "amniotico", "amovivel", "amurada", "anatomico", "ancorar", "anexo", "anfora", "aniversario", "anjo", "anotar", "ansioso", "anturio", "anuviar", "anverso", "anzol", "aonde", "apaziguar", "apito", "aplicavel", "apoteotico", "aprimorar", "aprumo", "apto", "apuros", "aquoso", "arauto", "arbusto", "arduo", "aresta", "arfar", "arguto", "aritmetico", "arlequim", "armisticio", "aromatizar", "arpoar", "arquivo", "arrumar", "arsenio", "arturiano", "aruaque", "arvores", "asbesto", "ascorbico", "aspirina", "asqueroso", "assustar", "astuto", "atazanar", "ativo", "atletismo", "atmosferico", "atormentar", "atroz", "aturdir", "audivel", "auferir", "augusto", "aula", "aumento", "aurora", "autuar", "avatar", "avexar", "avizinhar", "avolumar", "avulso", "axiomatico", "azerbaijano", "azimute", "azoto", "azulejo", "bacteriologista", "badulaque", "baforada", "baixote", "bajular", "balzaquiana", "bambuzal", "banzo", "baoba", "baqueta", "barulho", "bastonete", "batuta", "bauxita", "bavaro", "bazuca", "bcrepuscular", "beato", "beduino", "begonia", "behaviorista", "beisebol", "belzebu", "bemol", "benzido", "beocio", "bequer", "berro", "besuntar", "betume", "bexiga", "bezerro", "biatlon", "biboca", "bicuspide", "bidirecional", "bienio", "bifurcar", "bigorna", "bijuteria", "bimotor", "binormal", "bioxido", "bipolarizacao", "biquini", "birutice", "bisturi", "bituca", "biunivoco", "bivalve", "bizarro", "blasfemo", "blenorreia", "blindar", "bloqueio", "blusao", "boazuda", "bofete", "bojudo", "bolso", "bombordo", "bonzo", "botina", "boquiaberto", "bostoniano", "botulismo", "bourbon", "bovino", "boximane", "bravura", "brevidade", "britar", "broxar", "bruno", "bruxuleio", "bubonico", "bucolico", "buda", "budista", "bueiro", "buffer", "bugre", "bujao", "bumerangue", "burundines", "busto", "butique", "buzios", "caatinga", "cabuqui", "cacunda", "cafuzo", "cajueiro", "camurca", "canudo", "caquizeiro", "carvoeiro", "casulo", "catuaba", "cauterizar", "cebolinha", "cedula", "ceifeiro", "celulose", "cerzir", "cesto", "cetro", "ceus", "cevar", "chavena", "cheroqui", "chita", "chovido", "chuvoso", "ciatico", "cibernetico", "cicuta", "cidreira", "cientistas", "cifrar", "cigarro", "cilio", "cimo", "cinzento", "cioso", "cipriota", "cirurgico", "cisto", "citrico", "ciumento", "civismo", "clavicula", "clero", "clitoris", "cluster", "coaxial", "cobrir", "cocota", "codorniz", "coexistir", "cogumelo", "coito", "colusao", "compaixao", "comutativo", "contentamento", "convulsivo", "coordenativa", "coquetel", "correto", "corvo", "costureiro", "cotovia", "covil", "cozinheiro", "cretino", "cristo", "crivo", "crotalo", "cruzes", "cubo", "cucuia", "cueiro", "cuidar", "cujo", "cultural", "cunilingua", "cupula", "curvo", "custoso", "cutucar", "czarismo", "dablio", "dacota", "dados", "daguerreotipo", "daiquiri", "daltonismo", "damista", "dantesco", "daquilo", "darwinista", "dasein", "dativo", "deao", "debutantes", "decurso", "deduzir", "defunto", "degustar", "dejeto", "deltoide", "demover", "denunciar", "deputado", "deque", "dervixe", "desvirtuar", "deturpar", "deuteronomio", "devoto", "dextrose", "dezoito", "diatribe", "dicotomico", "didatico", "dietista", "difuso", "digressao", "diluvio", "diminuto", "dinheiro", "dinossauro", "dioxido", "diplomatico", "dique", "dirimivel", "disturbio", "diurno", "divulgar", "dizivel", "doar", "dobro", "docura", "dodoi", "doer", "dogue", "doloso", "domo", "donzela", "doping", "dorsal", "dossie", "dote", "doutro", "doze", "dravidico", "dreno", "driver", "dropes", "druso", "dubnio", "ducto", "dueto", "dulija", "dundum", "duodeno", "duquesa", "durou", "duvidoso", "duzia", "ebano", "ebrio", "eburneo", "echarpe", "eclusa", "ecossistema", "ectoplasma", "ecumenismo", "eczema", "eden", "editorial", "edredom", "edulcorar", "efetuar", "efigie", "efluvio", "egiptologo", "egresso", "egua", "einsteiniano", "eira", "eivar", "eixos", "ejetar", "elastomero", "eldorado", "elixir", "elmo", "eloquente", "elucidativo", "emaranhar", "embutir", "emerito", "emfa", "emitir", "emotivo", "empuxo", "emulsao", "enamorar", "encurvar", "enduro", "enevoar", "enfurnar", "enguico", "enho", "enigmista", "enlutar", "enormidade", "enpreendimento", "enquanto", "enriquecer", "enrugar", "entusiastico", "enunciar", "envolvimento", "enxuto", "enzimatico", "eolico", "epiteto", "epoxi", "epura", "equivoco", "erario", "erbio", "ereto", "erguido", "erisipela", "ermo", "erotizar", "erros", "erupcao", "ervilha", "esburacar", "escutar", "esfuziante", "esguio", "esloveno", "esmurrar", "esoterismo", "esperanca", "espirito", "espurio", "essencialmente", "esturricar", "esvoacar", "etario", "eterno", "etiquetar", "etnologo", "etos", "etrusco", "euclidiano", "euforico", "eugenico", "eunuco", "europio", "eustaquio", "eutanasia", "evasivo", "eventualidade", "evitavel", "evoluir", "exaustor", "excursionista", "exercito", "exfoliado", "exito", "exotico", "expurgo", "exsudar", "extrusora", "exumar", "fabuloso", "facultativo", "fado", "fagulha", "faixas", "fajuto", "faltoso", "famoso", "fanzine", "fapesp", "faquir", "fartura", "fastio", "faturista", "fausto", "favorito", "faxineira", "fazer", "fealdade", "febril", "fecundo", "fedorento", "feerico", "feixe", "felicidade", "felpudo", "feltro", "femur", "fenotipo", "fervura", "festivo", "feto", "feudo", "fevereiro", "fezinha", "fiasco", "fibra", "ficticio", "fiduciario", "fiesp", "fifa", "figurino", "fijiano", "filtro", "finura", "fiorde", "fiquei", "firula", "fissurar", "fitoteca", "fivela", "fixo", "flavio", "flexor", "flibusteiro", "flotilha", "fluxograma", "fobos", "foco", "fofura", "foguista", "foie", "foliculo", "fominha", "fonte", "forum", "fosso", "fotossintese", "foxtrote", "fraudulento", "frevo", "frivolo", "frouxo", "frutose", "fuba", "fucsia", "fugitivo", "fuinha", "fujao", "fulustreco", "fumo", "funileiro", "furunculo", "fustigar", "futurologo", "fuxico", "fuzue", "gabriel", "gado", "gaelico", "gafieira", "gaguejo", "gaivota", "gajo", "galvanoplastico", "gamo", "ganso", "garrucha", "gastronomo", "gatuno", "gaussiano", "gaviao", "gaxeta", "gazeteiro", "gear", "geiser", "geminiano", "generoso", "genuino", "geossinclinal", "gerundio", "gestual", "getulista", "gibi", "gigolo", "gilete", "ginseng", "giroscopio", "glaucio", "glacial", "gleba", "glifo", "glote", "glutonia", "gnostico", "goela", "gogo", "goitaca", "golpista", "gomo", "gonzo", "gorro", "gostou", "goticula", "gourmet", "governo", "gozo", "graxo", "grevista", "grito", "grotesco", "gruta", "guaxinim", "gude", "gueto", "guizo", "guloso", "gume", "guru", "gustativo", "grelhado", "gutural", "habitue", "haitiano", "halterofilista", "hamburguer", "hanseniase", "happening", "harpista", "hastear", "haveres", "hebreu", "hectometro", "hedonista", "hegira", "helena", "helminto", "hemorroidas", "henrique", "heptassilabo", "hertziano", "hesitar", "heterossexual", "heuristico", "hexagono", "hiato", "hibrido", "hidrostatico", "hieroglifo", "hifenizar", "higienizar", "hilario", "himen", "hino", "hippie", "hirsuto", "historiografia", "hitlerista", "hodometro", "hoje", "holograma", "homus", "honroso", "hoquei", "horto", "hostilizar", "hotentote", "huguenote", "humilde", "huno", "hurra", "hutu", "iaia", "ialorixa", "iambico", "iansa", "iaque", "iara", "iatista", "iberico", "ibis", "icar", "iceberg", "icosagono", "idade", "ideologo", "idiotice", "idoso", "iemenita", "iene", "igarape", "iglu", "ignorar", "igreja", "iguaria", "iidiche", "ilativo", "iletrado", "ilharga", "ilimitado", "ilogismo", "ilustrissimo", "imaturo", "imbuzeiro", "imerso", "imitavel", "imovel", "imputar", "imutavel", "inaveriguavel", "incutir", "induzir", "inextricavel", "infusao", "ingua", "inhame", "iniquo", "injusto", "inning", "inoxidavel", "inquisitorial", "insustentavel", "intumescimento", "inutilizavel", "invulneravel", "inzoneiro", "iodo", "iogurte", "ioio", "ionosfera", "ioruba", "iota", "ipsilon", "irascivel", "iris", "irlandes", "irmaos", "iroques", "irrupcao", "isca", "isento", "islandes", "isotopo", "isqueiro", "israelita", "isso", "isto", "iterbio", "itinerario", "itrio", "iuane", "iugoslavo", "jabuticabeira", "jacutinga", "jade", "jagunco", "jainista", "jaleco", "jambo", "jantarada", "japones", "jaqueta", "jarro", "jasmim", "jato", "jaula", "javel", "jazz", "jegue", "jeitoso", "jejum", "jenipapo", "jeova", "jequitiba", "jersei", "jesus", "jetom", "jiboia", "jihad", "jilo", "jingle", "jipe", "jocoso", "joelho", "joguete", "joio", "jojoba", "jorro", "jota", "joule", "joviano", "jubiloso", "judoca", "jugular", "juizo", "jujuba", "juliano", "jumento", "junto", "jururu", "justo", "juta", "juventude", "labutar", "laguna", "laico", "lajota", "lanterninha", "lapso", "laquear", "lastro", "lauto", "lavrar", "laxativo", "lazer", "leasing", "lebre", "lecionar", "ledo", "leguminoso", "leitura", "lele", "lemure", "lento", "leonardo", "leopardo", "lepton", "leque", "leste", "letreiro", "leucocito", "levitico", "lexicologo", "lhama", "lhufas", "liame", "licoroso", "lidocaina", "liliputiano", "limusine", "linotipo", "lipoproteina", "liquidos", "lirismo", "lisura", "liturgico", "livros", "lixo", "lobulo", "locutor", "lodo", "logro", "lojista", "lombriga", "lontra", "loop", "loquaz", "lorota", "losango", "lotus", "louvor", "luar", "lubrificavel", "lucros", "lugubre", "luis", "luminoso", "luneta", "lustroso", "luto", "luvas", "luxuriante", "luzeiro", "maduro", "maestro", "mafioso", "magro", "maiuscula", "majoritario", "malvisto", "mamute", "manutencao", "mapoteca", "maquinista", "marzipa", "masturbar", "matuto", "mausoleu", "mavioso", "maxixe", "mazurca", "meandro", "mecha", "medusa", "mefistofelico", "megera", "meirinho", "melro", "memorizar", "menu", "mequetrefe", "mertiolate", "mestria", "metroviario", "mexilhao", "mezanino", "miau", "microssegundo", "midia", "migratorio", "mimosa", "minuto", "miosotis", "mirtilo", "misturar", "mitzvah", "miudos", "mixuruca", "mnemonico", "moagem", "mobilizar", "modulo", "moer", "mofo", "mogno", "moita", "molusco", "monumento", "moqueca", "morubixaba", "mostruario", "motriz", "mouse", "movivel", "mozarela", "muarra", "muculmano", "mudo", "mugir", "muitos", "mumunha", "munir", "muon", "muquira", "murros", "musselina", "nacoes", "nado", "naftalina", "nago", "naipe", "naja", "nalgum", "namoro", "nanquim", "napolitano", "naquilo", "nascimento", "nautilo", "navios", "nazista", "nebuloso", "nectarina", "nefrologo", "negus", "nelore", "nenufar", "nepotismo", "nervura", "neste", "netuno", "neutron", "nevoeiro", "newtoniano", "nexo", "nhenhenhem", "nhoque", "nigeriano", "niilista", "ninho", "niobio", "niponico", "niquelar", "nirvana", "nisto", "nitroglicerina", "nivoso", "nobreza", "nocivo", "noel", "nogueira", "noivo", "nojo", "nominativo", "nonuplo", "noruegues", "nostalgico", "noturno", "nouveau", "nuanca", "nublar", "nucleotideo", "nudista", "nulo", "numismatico", "nunquinha", "nupcias", "nutritivo", "nuvens", "oasis", "obcecar", "obeso", "obituario", "objetos", "oblongo", "obnoxio", "obrigatorio", "obstruir", "obtuso", "obus", "obvio", "ocaso", "occipital", "oceanografo", "ocioso", "oclusivo", "ocorrer", "ocre", "octogono", "odalisca", "odisseia", "odorifico", "oersted", "oeste", "ofertar", "ofidio", "oftalmologo", "ogiva", "ogum", "oigale", "oitavo", "oitocentos", "ojeriza", "olaria", "oleoso", "olfato", "olhos", "oliveira", "olmo", "olor", "olvidavel", "ombudsman", "omeleteira", "omitir", "omoplata", "onanismo", "ondular", "oneroso", "onomatopeico", "ontologico", "onus", "onze", "opalescente", "opcional", "operistico", "opio", "oposto", "oprobrio", "optometrista", "opusculo", "oratorio", "orbital", "orcar", "orfao", "orixa", "orla", "ornitologo", "orquidea", "ortorrombico", "orvalho", "osculo", "osmotico", "ossudo", "ostrogodo", "otario", "otite", "ouro", "ousar", "outubro", "ouvir", "ovario", "overnight", "oviparo", "ovni", "ovoviviparo", "ovulo", "oxala", "oxente", "oxiuro", "oxossi", "ozonizar", "paciente", "pactuar", "padronizar", "paete", "pagodeiro", "paixao", "pajem", "paludismo", "pampas", "panturrilha", "papudo", "paquistanes", "pastoso", "patua", "paulo", "pauzinhos", "pavoroso", "paxa", "pazes", "peao", "pecuniario", "pedunculo", "pegaso", "peixinho", "pejorativo", "pelvis", "penuria", "pequno", "petunia", "pezada", "piauiense", "pictorico", "pierro", "pigmeu", "pijama", "pilulas", "pimpolho", "pintura", "piorar", "pipocar", "piqueteiro", "pirulito", "pistoleiro", "pituitaria", "pivotar", "pixote", "pizzaria", "plistoceno", "plotar", "pluviometrico", "pneumonico", "poco", "podridao", "poetisa", "pogrom", "pois", "polvorosa", "pomposo", "ponderado", "pontudo", "populoso", "poquer", "porvir", "posudo", "potro", "pouso", "povoar", "prazo", "prezar", "privilegios", "proximo", "prussiano", "pseudopode", "psoriase", "pterossauros", "ptialina", "ptolemaico", "pudor", "pueril", "pufe", "pugilista", "puir", "pujante", "pulverizar", "pumba", "punk", "purulento", "pustula", "putsch", "puxe", "quatrocentos", "quetzal", "quixotesco", "quotizavel", "rabujice", "racista", "radonio", "rafia", "ragu", "rajado", "ralo", "rampeiro", "ranzinza", "raptor", "raquitismo", "raro", "rasurar", "ratoeira", "ravioli", "razoavel", "reavivar", "rebuscar", "recusavel", "reduzivel", "reexposicao", "refutavel", "regurgitar", "reivindicavel", "rejuvenescimento", "relva", "remuneravel", "renunciar", "reorientar", "repuxo", "requisito", "resumo", "returno", "reutilizar", "revolvido", "rezonear", "riacho", "ribossomo", "ricota", "ridiculo", "rifle", "rigoroso", "rijo", "rimel", "rins", "rios", "riqueza", "respeito", "rissole", "ritualistico", "rivalizar", "rixa", "robusto", "rococo", "rodoviario", "roer", "rogo", "rojao", "rolo", "rompimento", "ronronar", "roqueiro", "rorqual", "rosto", "rotundo", "rouxinol", "roxo", "royal", "ruas", "rucula", "rudimentos", "ruela", "rufo", "rugoso", "ruivo", "rule", "rumoroso", "runico", "ruptura", "rural", "rustico", "rutilar", "saariano", "sabujo", "sacudir", "sadomasoquista", "safra", "sagui", "sais", "samurai", "santuario", "sapo", "saquear", "sartriano", "saturno", "saude", "sauva", "saveiro", "saxofonista", "sazonal", "scherzo", "script", "seara", "seborreia", "secura", "seduzir", "sefardim", "seguro", "seja", "selvas", "sempre", "senzala", "sepultura", "sequoia", "sestercio", "setuplo", "seus", "seviciar", "sezonismo", "shalom", "siames", "sibilante", "sicrano", "sidra", "sifilitico", "signos", "silvo", "simultaneo", "sinusite", "sionista", "sirio", "sisudo", "situar", "sivan", "slide", "slogan", "soar", "sobrio", "socratico", "sodomizar", "soerguer", "software", "sogro", "soja", "solver", "somente", "sonso", "sopro", "soquete", "sorveteiro", "sossego", "soturno", "sousafone", "sovinice", "sozinho", "suavizar", "subverter", "sucursal", "sudoriparo", "sufragio", "sugestoes", "suite", "sujo", "sultao", "sumula", "suntuoso", "suor", "supurar", "suruba", "susto", "suturar", "suvenir", "tabuleta", "taco", "tadjique", "tafeta", "tagarelice", "taitiano", "talvez", "tampouco", "tanzaniano", "taoista", "tapume", "taquion", "tarugo", "tascar", "tatuar", "tautologico", "tavola", "taxionomista", "tchecoslovaco", "teatrologo", "tectonismo", "tedioso", "teflon", "tegumento", "teixo", "telurio", "temporas", "tenue", "teosofico", "tepido", "tequila", "terrorista", "testosterona", "tetrico", "teutonico", "teve", "texugo", "tiara", "tibia", "tiete", "tifoide", "tigresa", "tijolo", "tilintar", "timpano", "tintureiro", "tiquete", "tiroteio", "tisico", "titulos", "tive", "toar", "toboga", "tofu", "togoles", "toicinho", "tolueno", "tomografo", "tontura", "toponimo", "toquio", "torvelinho", "tostar", "toto", "touro", "toxina", "trazer", "trezentos", "trivialidade", "trovoar", "truta", "tuaregue", "tubular", "tucano", "tudo", "tufo", "tuiste", "tulipa", "tumultuoso", "tunisino", "tupiniquim", "turvo", "tutu", "ucraniano", "udenista", "ufanista", "ufologo", "ugaritico", "uiste", "uivo", "ulceroso", "ulema", "ultravioleta", "umbilical", "umero", "umido", "umlaut", "unanimidade", "unesco", "ungulado", "unheiro", "univoco", "untuoso", "urano", "urbano", "urdir", "uretra", "urgente", "urinol", "urna", "urologo", "urro", "ursulina", "urtiga", "urupe", "usavel", "usbeque", "usei", "usineiro", "usurpar", "utero", "utilizar", "utopico", "uvular", "uxoricidio", "vacuo", "vadio", "vaguear", "vaivem", "valvula", "vampiro", "vantajoso", "vaporoso", "vaquinha", "varziano", "vasto", "vaticinio", "vaudeville", "vazio", "veado", "vedico", "veemente", "vegetativo", "veio", "veja", "veludo", "venusiano", "verdade", "verve", "vestuario", "vetusto", "vexatorio", "vezes", "viavel", "vibratorio", "victor", "vicunha", "vidros", "vietnamita", "vigoroso", "vilipendiar", "vime", "vintem", "violoncelo", "viquingue", "virus", "visualizar", "vituperio", "viuvo", "vivo", "vizir", "voar", "vociferar", "vodu", "vogar", "voile", "volver", "vomito", "vontade", "vortice", "vosso", "voto", "vovozinha", "voyeuse", "vozes", "vulva", "vupt", "western", "xadrez", "xale", "xampu", "xango", "xarope", "xaual", "xavante", "xaxim", "xenonio", "xepa", "xerox", "xicara", "xifopago", "xiita", "xilogravura", "xinxim", "xistoso", "xixi", "xodo", "xogum", "xucro", "zabumba", "zagueiro", "zambiano", "zanzar", "zarpar", "zebu", "zefiro", "zeloso", "zenite", "zumbi"]), type$.JSArray_String);
    B.List_XdM = A._setArrayType(makeConstList(["\xe1baco", "abdomen", "abeja", "abierto", "abogado", "abono", "aborto", "abrazo", "abrir", "abuelo", "abuso", "acabar", "academia", "acceso", "acci\xf3n", "aceite", "acelga", "acento", "aceptar", "\xe1cido", "aclarar", "acn\xe9", "acoger", "acoso", "activo", "acto", "actriz", "actuar", "acudir", "acuerdo", "acusar", "adicto", "admitir", "adoptar", "adorno", "aduana", "adulto", "a\xe9reo", "afectar", "afici\xf3n", "afinar", "afirmar", "\xe1gil", "agitar", "agon\xeda", "agosto", "agotar", "agregar", "agrio", "agua", "agudo", "\xe1guila", "aguja", "ahogo", "ahorro", "aire", "aislar", "ajedrez", "ajeno", "ajuste", "alacr\xe1n", "alambre", "alarma", "alba", "\xe1lbum", "alcalde", "aldea", "alegre", "alejar", "alerta", "aleta", "alfiler", "alga", "algod\xf3n", "aliado", "aliento", "alivio", "alma", "almeja", "alm\xedbar", "altar", "alteza", "altivo", "alto", "altura", "alumno", "alzar", "amable", "amante", "amapola", "amargo", "amasar", "\xe1mbar", "\xe1mbito", "ameno", "amigo", "amistad", "amor", "amparo", "amplio", "ancho", "anciano", "ancla", "andar", "and\xe9n", "anemia", "\xe1ngulo", "anillo", "\xe1nimo", "an\xeds", "anotar", "antena", "antiguo", "antojo", "anual", "anular", "anuncio", "a\xf1adir", "a\xf1ejo", "a\xf1o", "apagar", "aparato", "apetito", "apio", "aplicar", "apodo", "aporte", "apoyo", "aprender", "aprobar", "apuesta", "apuro", "arado", "ara\xf1a", "arar", "\xe1rbitro", "\xe1rbol", "arbusto", "archivo", "arco", "arder", "ardilla", "arduo", "\xe1rea", "\xe1rido", "aries", "armon\xeda", "arn\xe9s", "aroma", "arpa", "arp\xf3n", "arreglo", "arroz", "arruga", "arte", "artista", "asa", "asado", "asalto", "ascenso", "asegurar", "aseo", "asesor", "asiento", "asilo", "asistir", "asno", "asombro", "\xe1spero", "astilla", "astro", "astuto", "asumir", "asunto", "atajo", "ataque", "atar", "atento", "ateo", "\xe1tico", "atleta", "\xe1tomo", "atraer", "atroz", "at\xfan", "audaz", "audio", "auge", "aula", "aumento", "ausente", "autor", "aval", "avance", "avaro", "ave", "avellana", "avena", "avestruz", "avi\xf3n", "aviso", "ayer", "ayuda", "ayuno", "azafr\xe1n", "azar", "azote", "az\xfacar", "azufre", "azul", "baba", "babor", "bache", "bah\xeda", "baile", "bajar", "balanza", "balc\xf3n", "balde", "bamb\xfa", "banco", "banda", "ba\xf1o", "barba", "barco", "barniz", "barro", "b\xe1scula", "bast\xf3n", "basura", "batalla", "bater\xeda", "batir", "batuta", "ba\xfal", "bazar", "beb\xe9", "bebida", "bello", "besar", "beso", "bestia", "bicho", "bien", "bingo", "blanco", "bloque", "blusa", "boa", "bobina", "bobo", "boca", "bocina", "boda", "bodega", "boina", "bola", "bolero", "bolsa", "bomba", "bondad", "bonito", "bono", "bons\xe1i", "borde", "borrar", "bosque", "bote", "bot\xedn", "b\xf3veda", "bozal", "bravo", "brazo", "brecha", "breve", "brillo", "brinco", "brisa", "broca", "broma", "bronce", "brote", "bruja", "brusco", "bruto", "buceo", "bucle", "bueno", "buey", "bufanda", "buf\xf3n", "b\xfaho", "buitre", "bulto", "burbuja", "burla", "burro", "buscar", "butaca", "buz\xf3n", "caballo", "cabeza", "cabina", "cabra", "cacao", "cad\xe1ver", "cadena", "caer", "caf\xe9", "ca\xedda", "caim\xe1n", "caja", "caj\xf3n", "cal", "calamar", "calcio", "caldo", "calidad", "calle", "calma", "calor", "calvo", "cama", "cambio", "camello", "camino", "campo", "c\xe1ncer", "candil", "canela", "canguro", "canica", "canto", "ca\xf1a", "ca\xf1\xf3n", "caoba", "caos", "capaz", "capit\xe1n", "capote", "captar", "capucha", "cara", "carb\xf3n", "c\xe1rcel", "careta", "carga", "cari\xf1o", "carne", "carpeta", "carro", "carta", "casa", "casco", "casero", "caspa", "castor", "catorce", "catre", "caudal", "causa", "cazo", "cebolla", "ceder", "cedro", "celda", "c\xe9lebre", "celoso", "c\xe9lula", "cemento", "ceniza", "centro", "cerca", "cerdo", "cereza", "cero", "cerrar", "certeza", "c\xe9sped", "cetro", "chacal", "chaleco", "champ\xfa", "chancla", "chapa", "charla", "chico", "chiste", "chivo", "choque", "choza", "chuleta", "chupar", "cicl\xf3n", "ciego", "cielo", "cien", "cierto", "cifra", "cigarro", "cima", "cinco", "cine", "cinta", "cipr\xe9s", "circo", "ciruela", "cisne", "cita", "ciudad", "clamor", "clan", "claro", "clase", "clave", "cliente", "clima", "cl\xednica", "cobre", "cocci\xf3n", "cochino", "cocina", "coco", "c\xf3digo", "codo", "cofre", "coger", "cohete", "coj\xedn", "cojo", "cola", "colcha", "colegio", "colgar", "colina", "collar", "colmo", "columna", "combate", "comer", "comida", "c\xf3modo", "compra", "conde", "conejo", "conga", "conocer", "consejo", "contar", "copa", "copia", "coraz\xf3n", "corbata", "corcho", "cord\xf3n", "corona", "correr", "coser", "cosmos", "costa", "cr\xe1neo", "cr\xe1ter", "crear", "crecer", "cre\xeddo", "crema", "cr\xeda", "crimen", "cripta", "crisis", "cromo", "cr\xf3nica", "croqueta", "crudo", "cruz", "cuadro", "cuarto", "cuatro", "cubo", "cubrir", "cuchara", "cuello", "cuento", "cuerda", "cuesta", "cueva", "cuidar", "culebra", "culpa", "culto", "cumbre", "cumplir", "cuna", "cuneta", "cuota", "cup\xf3n", "c\xfapula", "curar", "curioso", "curso", "curva", "cutis", "dama", "danza", "dar", "dardo", "d\xe1til", "deber", "d\xe9bil", "d\xe9cada", "decir", "dedo", "defensa", "definir", "dejar", "delf\xedn", "delgado", "delito", "demora", "denso", "dental", "deporte", "derecho", "derrota", "desayuno", "deseo", "desfile", "desnudo", "destino", "desv\xedo", "detalle", "detener", "deuda", "d\xeda", "diablo", "diadema", "diamante", "diana", "diario", "dibujo", "dictar", "diente", "dieta", "diez", "dif\xedcil", "digno", "dilema", "diluir", "dinero", "directo", "dirigir", "disco", "dise\xf1o", "disfraz", "diva", "divino", "doble", "doce", "dolor", "domingo", "don", "donar", "dorado", "dormir", "dorso", "dos", "dosis", "drag\xf3n", "droga", "ducha", "duda", "duelo", "due\xf1o", "dulce", "d\xfao", "duque", "durar", "dureza", "duro", "\xe9bano", "ebrio", "echar", "eco", "ecuador", "edad", "edici\xf3n", "edificio", "editor", "educar", "efecto", "eficaz", "eje", "ejemplo", "elefante", "elegir", "elemento", "elevar", "elipse", "\xe9lite", "elixir", "elogio", "eludir", "embudo", "emitir", "emoci\xf3n", "empate", "empe\xf1o", "empleo", "empresa", "enano", "encargo", "enchufe", "enc\xeda", "enemigo", "enero", "enfado", "enfermo", "enga\xf1o", "enigma", "enlace", "enorme", "enredo", "ensayo", "ense\xf1ar", "entero", "entrar", "envase", "env\xedo", "\xe9poca", "equipo", "erizo", "escala", "escena", "escolar", "escribir", "escudo", "esencia", "esfera", "esfuerzo", "espada", "espejo", "esp\xeda", "esposa", "espuma", "esqu\xed", "estar", "este", "estilo", "estufa", "etapa", "eterno", "\xe9tica", "etnia", "evadir", "evaluar", "evento", "evitar", "exacto", "examen", "exceso", "excusa", "exento", "exigir", "exilio", "existir", "\xe9xito", "experto", "explicar", "exponer", "extremo", "f\xe1brica", "f\xe1bula", "fachada", "f\xe1cil", "factor", "faena", "faja", "falda", "fallo", "falso", "faltar", "fama", "familia", "famoso", "fara\xf3n", "farmacia", "farol", "farsa", "fase", "fatiga", "fauna", "favor", "fax", "febrero", "fecha", "feliz", "feo", "feria", "feroz", "f\xe9rtil", "fervor", "fest\xedn", "fiable", "fianza", "fiar", "fibra", "ficci\xf3n", "ficha", "fideo", "fiebre", "fiel", "fiera", "fiesta", "figura", "fijar", "fijo", "fila", "filete", "filial", "filtro", "fin", "finca", "fingir", "finito", "firma", "flaco", "flauta", "flecha", "flor", "flota", "fluir", "flujo", "fl\xfaor", "fobia", "foca", "fogata", "fog\xf3n", "folio", "folleto", "fondo", "forma", "forro", "fortuna", "forzar", "fosa", "foto", "fracaso", "fr\xe1gil", "franja", "frase", "fraude", "fre\xedr", "freno", "fresa", "fr\xedo", "frito", "fruta", "fuego", "fuente", "fuerza", "fuga", "fumar", "funci\xf3n", "funda", "furg\xf3n", "furia", "fusil", "f\xfatbol", "futuro", "gacela", "gafas", "gaita", "gajo", "gala", "galer\xeda", "gallo", "gamba", "ganar", "gancho", "ganga", "ganso", "garaje", "garza", "gasolina", "gastar", "gato", "gavil\xe1n", "gemelo", "gemir", "gen", "g\xe9nero", "genio", "gente", "geranio", "gerente", "germen", "gesto", "gigante", "gimnasio", "girar", "giro", "glaciar", "globo", "gloria", "gol", "golfo", "goloso", "golpe", "goma", "gordo", "gorila", "gorra", "gota", "goteo", "gozar", "grada", "gr\xe1fico", "grano", "grasa", "gratis", "grave", "grieta", "grillo", "gripe", "gris", "grito", "grosor", "gr\xfaa", "grueso", "grumo", "grupo", "guante", "guapo", "guardia", "guerra", "gu\xeda", "gui\xf1o", "guion", "guiso", "guitarra", "gusano", "gustar", "haber", "h\xe1bil", "hablar", "hacer", "hacha", "hada", "hallar", "hamaca", "harina", "haz", "haza\xf1a", "hebilla", "hebra", "hecho", "helado", "helio", "hembra", "herir", "hermano", "h\xe9roe", "hervir", "hielo", "hierro", "h\xedgado", "higiene", "hijo", "himno", "historia", "hocico", "hogar", "hoguera", "hoja", "hombre", "hongo", "honor", "honra", "hora", "hormiga", "horno", "hostil", "hoyo", "hueco", "huelga", "huerta", "hueso", "huevo", "huida", "huir", "humano", "h\xfamedo", "humilde", "humo", "hundir", "hurac\xe1n", "hurto", "icono", "ideal", "idioma", "\xeddolo", "iglesia", "igl\xfa", "igual", "ilegal", "ilusi\xf3n", "imagen", "im\xe1n", "imitar", "impar", "imperio", "imponer", "impulso", "incapaz", "\xedndice", "inerte", "infiel", "informe", "ingenio", "inicio", "inmenso", "inmune", "innato", "insecto", "instante", "inter\xe9s", "\xedntimo", "intuir", "in\xfatil", "invierno", "ira", "iris", "iron\xeda", "isla", "islote", "jabal\xed", "jab\xf3n", "jam\xf3n", "jarabe", "jard\xedn", "jarra", "jaula", "jazm\xedn", "jefe", "jeringa", "jinete", "jornada", "joroba", "joven", "joya", "juerga", "jueves", "juez", "jugador", "jugo", "juguete", "juicio", "junco", "jungla", "junio", "juntar", "j\xfapiter", "jurar", "justo", "juvenil", "juzgar", "kilo", "koala", "labio", "lacio", "lacra", "lado", "ladr\xf3n", "lagarto", "l\xe1grima", "laguna", "laico", "lamer", "l\xe1mina", "l\xe1mpara", "lana", "lancha", "langosta", "lanza", "l\xe1piz", "largo", "larva", "l\xe1stima", "lata", "l\xe1tex", "latir", "laurel", "lavar", "lazo", "leal", "lecci\xf3n", "leche", "lector", "leer", "legi\xf3n", "legumbre", "lejano", "lengua", "lento", "le\xf1a", "le\xf3n", "leopardo", "lesi\xf3n", "letal", "letra", "leve", "leyenda", "libertad", "libro", "licor", "l\xedder", "lidiar", "lienzo", "liga", "ligero", "lima", "l\xedmite", "lim\xf3n", "limpio", "lince", "lindo", "l\xednea", "lingote", "lino", "linterna", "l\xedquido", "liso", "lista", "litera", "litio", "litro", "llaga", "llama", "llanto", "llave", "llegar", "llenar", "llevar", "llorar", "llover", "lluvia", "lobo", "loci\xf3n", "loco", "locura", "l\xf3gica", "logro", "lombriz", "lomo", "lonja", "lote", "lucha", "lucir", "lugar", "lujo", "luna", "lunes", "lupa", "lustro", "luto", "luz", "maceta", "macho", "madera", "madre", "maduro", "maestro", "mafia", "magia", "mago", "ma\xedz", "maldad", "maleta", "malla", "malo", "mam\xe1", "mambo", "mamut", "manco", "mando", "manejar", "manga", "maniqu\xed", "manjar", "mano", "manso", "manta", "ma\xf1ana", "mapa", "m\xe1quina", "mar", "marco", "marea", "marfil", "margen", "marido", "m\xe1rmol", "marr\xf3n", "martes", "marzo", "masa", "m\xe1scara", "masivo", "matar", "materia", "matiz", "matriz", "m\xe1ximo", "mayor", "mazorca", "mecha", "medalla", "medio", "m\xe9dula", "mejilla", "mejor", "melena", "mel\xf3n", "memoria", "menor", "mensaje", "mente", "men\xfa", "mercado", "merengue", "m\xe9rito", "mes", "mes\xf3n", "meta", "meter", "m\xe9todo", "metro", "mezcla", "miedo", "miel", "miembro", "miga", "mil", "milagro", "militar", "mill\xf3n", "mimo", "mina", "minero", "m\xednimo", "minuto", "miope", "mirar", "misa", "miseria", "misil", "mismo", "mitad", "mito", "mochila", "moci\xf3n", "moda", "modelo", "moho", "mojar", "molde", "moler", "molino", "momento", "momia", "monarca", "moneda", "monja", "monto", "mo\xf1o", "morada", "morder", "moreno", "morir", "morro", "morsa", "mortal", "mosca", "mostrar", "motivo", "mover", "m\xf3vil", "mozo", "mucho", "mudar", "mueble", "muela", "muerte", "muestra", "mugre", "mujer", "mula", "muleta", "multa", "mundo", "mu\xf1eca", "mural", "muro", "m\xfasculo", "museo", "musgo", "m\xfasica", "muslo", "n\xe1car", "naci\xf3n", "nadar", "naipe", "naranja", "nariz", "narrar", "nasal", "natal", "nativo", "natural", "n\xe1usea", "naval", "nave", "navidad", "necio", "n\xe9ctar", "negar", "negocio", "negro", "ne\xf3n", "nervio", "neto", "neutro", "nevar", "nevera", "nicho", "nido", "niebla", "nieto", "ni\xf1ez", "ni\xf1o", "n\xedtido", "nivel", "nobleza", "noche", "n\xf3mina", "noria", "norma", "norte", "nota", "noticia", "novato", "novela", "novio", "nube", "nuca", "n\xfacleo", "nudillo", "nudo", "nuera", "nueve", "nuez", "nulo", "n\xfamero", "nutria", "oasis", "obeso", "obispo", "objeto", "obra", "obrero", "observar", "obtener", "obvio", "oca", "ocaso", "oc\xe9ano", "ochenta", "ocho", "ocio", "ocre", "octavo", "octubre", "oculto", "ocupar", "ocurrir", "odiar", "odio", "odisea", "oeste", "ofensa", "oferta", "oficio", "ofrecer", "ogro", "o\xeddo", "o\xedr", "ojo", "ola", "oleada", "olfato", "olivo", "olla", "olmo", "olor", "olvido", "ombligo", "onda", "onza", "opaco", "opci\xf3n", "\xf3pera", "opinar", "oponer", "optar", "\xf3ptica", "opuesto", "oraci\xf3n", "orador", "oral", "\xf3rbita", "orca", "orden", "oreja", "\xf3rgano", "org\xeda", "orgullo", "oriente", "origen", "orilla", "oro", "orquesta", "oruga", "osad\xeda", "oscuro", "osezno", "oso", "ostra", "oto\xf1o", "otro", "oveja", "\xf3vulo", "\xf3xido", "ox\xedgeno", "oyente", "ozono", "pacto", "padre", "paella", "p\xe1gina", "pago", "pa\xeds", "p\xe1jaro", "palabra", "palco", "paleta", "p\xe1lido", "palma", "paloma", "palpar", "pan", "panal", "p\xe1nico", "pantera", "pa\xf1uelo", "pap\xe1", "papel", "papilla", "paquete", "parar", "parcela", "pared", "parir", "paro", "p\xe1rpado", "parque", "p\xe1rrafo", "parte", "pasar", "paseo", "pasi\xf3n", "paso", "pasta", "pata", "patio", "patria", "pausa", "pauta", "pavo", "payaso", "peat\xf3n", "pecado", "pecera", "pecho", "pedal", "pedir", "pegar", "peine", "pelar", "pelda\xf1o", "pelea", "peligro", "pellejo", "pelo", "peluca", "pena", "pensar", "pe\xf1\xf3n", "pe\xf3n", "peor", "pepino", "peque\xf1o", "pera", "percha", "perder", "pereza", "perfil", "perico", "perla", "permiso", "perro", "persona", "pesa", "pesca", "p\xe9simo", "pesta\xf1a", "p\xe9talo", "petr\xf3leo", "pez", "pezu\xf1a", "picar", "pich\xf3n", "pie", "piedra", "pierna", "pieza", "pijama", "pilar", "piloto", "pimienta", "pino", "pintor", "pinza", "pi\xf1a", "piojo", "pipa", "pirata", "pisar", "piscina", "piso", "pista", "pit\xf3n", "pizca", "placa", "plan", "plata", "playa", "plaza", "pleito", "pleno", "plomo", "pluma", "plural", "pobre", "poco", "poder", "podio", "poema", "poes\xeda", "poeta", "polen", "polic\xeda", "pollo", "polvo", "pomada", "pomelo", "pomo", "pompa", "poner", "porci\xf3n", "portal", "posada", "poseer", "posible", "poste", "potencia", "potro", "pozo", "prado", "precoz", "pregunta", "premio", "prensa", "preso", "previo", "primo", "pr\xedncipe", "prisi\xf3n", "privar", "proa", "probar", "proceso", "producto", "proeza", "profesor", "programa", "prole", "promesa", "pronto", "propio", "pr\xf3ximo", "prueba", "p\xfablico", "puchero", "pudor", "pueblo", "puerta", "puesto", "pulga", "pulir", "pulm\xf3n", "pulpo", "pulso", "puma", "punto", "pu\xf1al", "pu\xf1o", "pupa", "pupila", "pur\xe9", "quedar", "queja", "quemar", "querer", "queso", "quieto", "qu\xedmica", "quince", "quitar", "r\xe1bano", "rabia", "rabo", "raci\xf3n", "radical", "ra\xedz", "rama", "rampa", "rancho", "rango", "rapaz", "r\xe1pido", "rapto", "rasgo", "raspa", "rato", "rayo", "raza", "raz\xf3n", "reacci\xf3n", "realidad", "reba\xf1o", "rebote", "recaer", "receta", "rechazo", "recoger", "recreo", "recto", "recurso", "red", "redondo", "reducir", "reflejo", "reforma", "refr\xe1n", "refugio", "regalo", "regir", "regla", "regreso", "reh\xe9n", "reino", "re\xedr", "reja", "relato", "relevo", "relieve", "relleno", "reloj", "remar", "remedio", "remo", "rencor", "rendir", "renta", "reparto", "repetir", "reposo", "reptil", "res", "rescate", "resina", "respeto", "resto", "resumen", "retiro", "retorno", "retrato", "reunir", "rev\xe9s", "revista", "rey", "rezar", "rico", "riego", "rienda", "riesgo", "rifa", "r\xedgido", "rigor", "rinc\xf3n", "ri\xf1\xf3n", "r\xedo", "riqueza", "risa", "ritmo", "rito"]), type$.JSArray_String);
    B.List_YPn = A._setArrayType(makeConstList(["abbey", "abducts", "ability", "ablaze", "abnormal", "abort", "abrasive", "absorb", "abyss", "academy", "aces", "aching", "acidic", "acoustic", "acquire", "across", "actress", "acumen", "adapt", "addicted", "adept", "adhesive", "adjust", "adopt", "adrenalin", "adult", "adventure", "aerial", "afar", "affair", "afield", "afloat", "afoot", "afraid", "after", "against", "agenda", "aggravate", "agile", "aglow", "agnostic", "agony", "agreed", "ahead", "aided", "ailments", "aimless", "airport", "aisle", "ajar", "akin", "alarms", "album", "alchemy", "alerts", "algebra", "alkaline", "alley", "almost", "aloof", "alpine", "already", "also", "altitude", "alumni", "always", "amaze", "ambush", "amended", "amidst", "ammo", "amnesty", "among", "amply", "amused", "anchor", "android", "anecdote", "angled", "ankle", "annoyed", "answers", "antics", "anvil", "anxiety", "anybody", "apart", "apex", "aphid", "aplomb", "apology", "apply", "apricot", "aptitude", "aquarium", "arbitrary", "archer", "ardent", "arena", "argue", "arises", "army", "around", "arrow", "arsenic", "artistic", "ascend", "ashtray", "aside", "asked", "asleep", "aspire", "assorted", "asylum", "athlete", "atlas", "atom", "atrium", "attire", "auburn", "auctions", "audio", "august", "aunt", "austere", "autumn", "avatar", "avidly", "avoid", "awakened", "awesome", "awful", "awkward", "awning", "awoken", "axes", "axis", "axle", "aztec", "azure", "baby", "bacon", "badge", "baffles", "bagpipe", "bailed", "bakery", "balding", "bamboo", "banjo", "baptism", "basin", "batch", "bawled", "bays", "because", "beer", "befit", "begun", "behind", "being", "below", "bemused", "benches", "berries", "bested", "betting", "bevel", "beware", "beyond", "bias", "bicycle", "bids", "bifocals", "biggest", "bikini", "bimonthly", "binocular", "biology", "biplane", "birth", "biscuit", "bite", "biweekly", "blender", "blip", "bluntly", "boat", "bobsled", "bodies", "bogeys", "boil", "boldly", "bomb", "border", "boss", "both", "bounced", "bovine", "bowling", "boxes", "boyfriend", "broken", "brunt", "bubble", "buckets", "budget", "buffet", "bugs", "building", "bulb", "bumper", "bunch", "business", "butter", "buying", "buzzer", "bygones", "byline", "bypass", "cabin", "cactus", "cadets", "cafe", "cage", "cajun", "cake", "calamity", "camp", "candy", "casket", "catch", "cause", "cavernous", "cease", "cedar", "ceiling", "cell", "cement", "cent", "certain", "chlorine", "chrome", "cider", "cigar", "cinema", "circle", "cistern", "citadel", "civilian", "claim", "click", "clue", "coal", "cobra", "cocoa", "code", "coexist", "coffee", "cogs", "cohesive", "coils", "colony", "comb", "cool", "copy", "corrode", "costume", "cottage", "cousin", "cowl", "criminal", "cube", "cucumber", "cuddled", "cuffs", "cuisine", "cunning", "cupcake", "custom", "cycling", "cylinder", "cynical", "dabbing", "dads", "daft", "dagger", "daily", "damp", "dangerous", "dapper", "darted", "dash", "dating", "dauntless", "dawn", "daytime", "dazed", "debut", "decay", "dedicated", "deepest", "deftly", "degrees", "dehydrate", "deity", "dejected", "delayed", "demonstrate", "dented", "deodorant", "depth", "desk", "devoid", "dewdrop", "dexterity", "dialect", "dice", "diet", "different", "digit", "dilute", "dime", "dinner", "diode", "diplomat", "directed", "distance", "ditch", "divers", "dizzy", "doctor", "dodge", "does", "dogs", "doing", "dolphin", "domestic", "donuts", "doorway", "dormant", "dosage", "dotted", "double", "dove", "down", "dozen", "dreams", "drinks", "drowning", "drunk", "drying", "dual", "dubbed", "duckling", "dude", "duets", "duke", "dullness", "dummy", "dunes", "duplex", "duration", "dusted", "duties", "dwarf", "dwelt", "dwindling", "dying", "dynamite", "dyslexic", "each", "eagle", "earth", "easy", "eating", "eavesdrop", "eccentric", "echo", "eclipse", "economics", "ecstatic", "eden", "edgy", "edited", "educated", "eels", "efficient", "eggs", "egotistic", "eight", "either", "eject", "elapse", "elbow", "eldest", "eleven", "elite", "elope", "else", "eluded", "emails", "ember", "emerge", "emit", "emotion", "empty", "emulate", "energy", "enforce", "enhanced", "enigma", "enjoy", "enlist", "enmity", "enough", "enraged", "ensign", "entrance", "envy", "epoxy", "equip", "erase", "erected", "erosion", "error", "eskimos", "espionage", "essential", "estate", "etched", "eternal", "ethics", "etiquette", "evaluate", "evenings", "evicted", "evolved", "examine", "excess", "exhale", "exit", "exotic", "exquisite", "extra", "exult", "fabrics", "factual", "fading", "fainted", "faked", "fall", "family", "fancy", "farming", "fatal", "faulty", "fawns", "faxed", "fazed", "feast", "february", "federal", "feel", "feline", "females", "fences", "ferry", "festival", "fetches", "fever", "fewest", "fiat", "fibula", "fictional", "fidget", "fierce", "fifteen", "fight", "films", "firm", "fishing", "fitting", "five", "fixate", "fizzle", "fleet", "flippant", "flying", "foamy", "focus", "foes", "foggy", "foiled", "folding", "fonts", "foolish", "fossil", "fountain", "fowls", "foxes", "foyer", "framed", "friendly", "frown", "fruit", "frying", "fudge", "fuel", "fugitive", "fully", "fuming", "fungal", "furnished", "fuselage", "future", "fuzzy", "gables", "gadget", "gags", "gained", "galaxy", "gambit", "gang", "gasp", "gather", "gauze", "gave", "gawk", "gaze", "gearbox", "gecko", "geek", "gels", "gemstone", "general", "geometry", "germs", "gesture", "getting", "geyser", "ghetto", "ghost", "giant", "giddy", "gifts", "gigantic", "gills", "gimmick", "ginger", "girth", "giving", "glass", "gleeful", "glide", "gnaw", "gnome", "goat", "goblet", "godfather", "goes", "goggles", "going", "goldfish", "gone", "goodbye", "gopher", "gorilla", "gossip", "gotten", "gourmet", "governing", "gown", "greater", "grunt", "guarded", "guest", "guide", "gulp", "gumball", "guru", "gusts", "gutter", "guys", "gymnast", "gypsy", "gyrate", "habitat", "hacksaw", "haggled", "hairy", "hamburger", "happens", "hashing", "hatchet", "haunted", "having", "hawk", "haystack", "hazard", "hectare", "hedgehog", "heels", "hefty", "height", "hemlock", "hence", "heron", "hesitate", "hexagon", "hickory", "hiding", "highway", "hijack", "hiker", "hills", "himself", "hinder", "hippo", "hire", "history", "hitched", "hive", "hoax", "hobby", "hockey", "hoisting", "hold", "honked", "hookup", "hope", "hornet", "hospital", "hotel", "hounded", "hover", "howls", "hubcaps", "huddle", "huge", "hull", "humid", "hunter", "hurried", "husband", "huts", "hybrid", "hydrogen", "hyper", "iceberg", "icing", "icon", "identity", "idiom", "idled", "idols", "igloo", "ignore", "iguana", "illness", "imagine", "imbalance", "imitate", "impel", "inactive", "inbound", "incur", "industrial", "inexact", "inflamed", "ingested", "initiate", "injury", "inkling", "inline", "inmate", "innocent", "inorganic", "input", "inquest", "inroads", "insult", "intended", "inundate", "invoke", "inwardly", "ionic", "irate", "iris", "irony", "irritate", "island", "isolated", "issued", "italics", "itches", "items", "itinerary", "itself", "ivory", "jabbed", "jackets", "jaded", "jagged", "jailed", "jamming", "january", "jargon", "jaunt", "javelin", "jaws", "jazz", "jeans", "jeers", "jellyfish", "jeopardy", "jerseys", "jester", "jetting", "jewels", "jigsaw", "jingle", "jittery", "jive", "jobs", "jockey", "jogger", "joining", "joking", "jolted", "jostle", "journal", "joyous", "jubilee", "judge", "juggled", "juicy", "jukebox", "july", "jump", "junk", "jury", "justice", "juvenile", "kangaroo", "karate", "keep", "kennel", "kept", "kernels", "kettle", "keyboard", "kickoff", "kidneys", "king", "kiosk", "kisses", "kitchens", "kiwi", "knapsack", "knee", "knife", "knowledge", "knuckle", "koala", "laboratory", "ladder", "lagoon", "lair", "lakes", "lamb", "language", "laptop", "large", "last", "later", "launching", "lava", "lawsuit", "layout", "lazy", "lectures", "ledge", "leech", "left", "legion", "leisure", "lemon", "lending", "leopard", "lesson", "lettuce", "lexicon", "liar", "library", "licks", "lids", "lied", "lifestyle", "light", "likewise", "lilac", "limits", "linen", "lion", "lipstick", "liquid", "listen", "lively", "loaded", "lobster", "locker", "lodge", "lofty", "logic", "loincloth", "long", "looking", "lopped", "lordship", "losing", "lottery", "loudly", "love", "lower", "loyal", "lucky", "luggage", "lukewarm", "lullaby", "lumber", "lunar", "lurk", "lush", "luxury", "lymph", "lynx", "lyrics", "macro", "madness", "magically", "mailed", "major", "makeup", "malady", "mammal", "maps", "masterful", "match", "maul", "maverick", "maximum", "mayor", "maze", "meant", "mechanic", "medicate", "meeting", "megabyte", "melting", "memoir", "menu", "merger", "mesh", "metro", "mews", "mice", "midst", "mighty", "mime", "mirror", "misery", "mittens", "mixture", "moat", "mobile", "mocked", "mohawk", "moisture", "molten", "moment", "money", "moon", "mops", "morsel", "mostly", "motherly", "mouth", "movement", "mowing", "much", "muddy", "muffin", "mugged", "mullet", "mumble", "mundane", "muppet", "mural", "musical", "muzzle", "myriad", "mystery", "myth", "nabbing", "nagged", "nail", "names", "nanny", "napkin", "narrate", "nasty", "natural", "nautical", "navy", "nearby", "necklace", "needed", "negative", "neither", "neon", "nephew", "nerves", "nestle", "network", "neutral", "never", "newt", "nexus", "nibs", "niche", "niece", "nifty", "nightly", "nimbly", "nineteen", "nirvana", "nitrogen", "nobody", "nocturnal", "nodes", "noises", "nomad", "noodles", "northern", "nostril", "noted", "nouns", "novelty", "nowhere", "nozzle", "nuance", "nucleus", "nudged", "nugget", "nuisance", "null", "number", "nuns", "nurse", "nutshell", "nylon", "oaks", "oars", "oasis", "oatmeal", "obedient", "object", "obliged", "obnoxious", "observant", "obtains", "obvious", "occur", "ocean", "october", "odds", "odometer", "offend", "often", "oilfield", "ointment", "okay", "older", "olive", "olympics", "omega", "omission", "omnibus", "onboard", "oncoming", "oneself", "ongoing", "onion", "online", "onslaught", "onto", "onward", "oozed", "opacity", "opened", "opposite", "optical", "opus", "orange", "orbit", "orchid", "orders", "organs", "origin", "ornament", "orphans", "oscar", "ostrich", "otherwise", "otter", "ouch", "ought", "ounce", "ourselves", "oust", "outbreak", "oval", "oven", "owed", "owls", "owner", "oxidant", "oxygen", "oyster", "ozone", "pact", "paddles", "pager", "pairing", "palace", "pamphlet", "pancakes", "paper", "paradise", "pastry", "patio", "pause", "pavements", "pawnshop", "payment", "peaches", "pebbles", "peculiar", "pedantic", "peeled", "pegs", "pelican", "pencil", "people", "pepper", "perfect", "pests", "petals", "phase", "pheasants", "phone", "phrases", "physics", "piano", "picked", "pierce", "pigment", "piloted", "pimple", "pinched", "pioneer", "pipeline", "pirate", "pistons", "pitched", "pivot", "pixels", "pizza", "playful", "pledge", "pliers", "plotting", "plus", "plywood", "poaching", "pockets", "podcast", "poetry", "point", "poker", "polar", "ponies", "pool", "popular", "portents", "possible", "potato", "pouch", "poverty", "powder", "pram", "present", "pride", "problems", "pruned", "prying", "psychic", "public", "puck", "puddle", "puffin", "pulp", "pumpkins", "punch", "puppy", "purged", "push", "putty", "puzzled", "pylons", "pyramid", "python", "queen", "quick", "quote", "rabbits", "racetrack", "radar", "rafts", "rage", "railway", "raking", "rally", "ramped", "randomly", "rapid", "rarest", "rash", "rated", "ravine", "rays", "razor", "react", "rebel", "recipe", "reduce", "reef", "refer", "regular", "reheat", "reinvest", "rejoices", "rekindle", "relic", "remedy", "renting", "reorder", "repent", "request", "reruns", "rest", "return", "reunion", "revamp", "rewind", "rhino", "rhythm", "ribbon", "richly", "ridges", "rift", "rigid", "rims", "ringing", "riots", "ripped", "rising", "ritual", "river", "roared", "robot", "rockets", "rodent", "rogue", "roles", "romance", "roomy", "roped", "roster", "rotate", "rounded", "rover", "rowboat", "royal", "ruby", "rudely", "ruffled", "rugged", "ruined", "ruling", "rumble", "runway", "rural", "rustled", "ruthless", "sabotage", "sack", "sadness", "safety", "saga", "sailor", "sake", "salads", "sample", "sanity", "sapling", "sarcasm", "sash", "satin", "saucepan", "saved", "sawmill", "saxophone", "sayings", "scamper", "scenic", "school", "science", "scoop", "scrub", "scuba", "seasons", "second", "sedan", "seeded", "segments", "seismic", "selfish", "semifinal", "sensible", "september", "sequence", "serving", "session", "setup", "seventh", "sewage", "shackles", "shelter", "shipped", "shocking", "shrugged", "shuffled", "shyness", "siblings", "sickness", "sidekick", "sieve", "sifting", "sighting", "silk", "simplest", "sincerely", "sipped", "siren", "situated", "sixteen", "sizes", "skater", "skew", "skirting", "skulls", "skydive", "slackens", "sleepless", "slid", "slower", "slug", "smash", "smelting", "smidgen", "smog", "smuggled", "snake", "sneeze", "sniff", "snout", "snug", "soapy", "sober", "soccer", "soda", "software", "soggy", "soil", "solved", "somewhere", "sonic", "soothe", "soprano", "sorry", "southern", "sovereign", "sowed", "soya", "space", "speedy", "sphere", "spiders", "splendid", "spout", "sprig", "spud", "spying", "square", "stacking", "stellar", "stick", "stockpile", "strained", "stunning", "stylishly", "subtly", "succeed", "suddenly", "suede", "suffice", "sugar", "suitcase", "sulking", "summon", "sunken", "superior", "surfer", "sushi", "suture", "swagger", "swept", "swiftly", "sword", "swung", "syllabus", "symptoms", "syndrome", "syringe", "system", "taboo", "tacit", "tadpoles", "tagged", "tail", "taken", "talent", "tamper", "tanks", "tapestry", "tarnished", "tasked", "tattoo", "taunts", "tavern", "tawny", "taxi", "teardrop", "technical", "tedious", "teeming", "tell", "template", "tender", "tepid", "tequila", "terminal", "testing", "tether", "textbook", "thaw", "theatrics", "thirsty", "thorn", "threaten", "thumbs", "thwart", "ticket", "tidy", "tiers", "tiger", "tilt", "timber", "tinted", "tipsy", "tirade", "tissue", "titans", "toaster", "tobacco", "today", "toenail", "toffee", "together", "toilet", "token", "tolerant", "tomorrow", "tonic", "toolbox", "topic", "torch", "tossed", "total", "touchy", "towel", "toxic", "toyed", "trash", "trendy", "tribal", "trolling", "truth", "trying", "tsunami", "tubes", "tucks", "tudor", "tuesday", "tufts", "tugs", "tuition", "tulips", "tumbling", "tunnel", "turnip", "tusks", "tutor", "tuxedo", "twang", "tweezers", "twice", "twofold", "tycoon", "typist", "tyrant", "ugly", "ulcers", "ultimate", "umbrella", "umpire", "unafraid", "unbending", "uncle", "under", "uneven", "unfit", "ungainly", "unhappy", "union", "unjustly", "unknown", "unlikely", "unmask", "unnoticed", "unopened", "unplugs", "unquoted", "unrest", "unsafe", "until", "unusual", "unveil", "unwind", "unzip", "upbeat", "upcoming", "update", "upgrade", "uphill", "upkeep", "upload", "upon", "upper", "upright", "upstairs", "uptight", "upwards", "urban", "urchins", "urgent", "usage", "useful", "usher", "using", "usual", "utensils", "utility", "utmost", "utopia", "uttered", "vacation", "vague", "vain", "value", "vampire", "vane", "vapidly", "vary", "vastness", "vats", "vaults", "vector", "veered", "vegan", "vehicle", "vein", "velvet", "venomous", "verification", "vessel", "veteran", "vexed", "vials", "vibrate", "victim", "video", "viewpoint", "vigilant", "viking", "village", "vinegar", "violin", "vipers", "virtual", "visited", "vitals", "vivid", "vixen", "vocal", "vogue", "voice", "volcano", "vortex", "voted", "voucher", "vowels", "voyage", "vulture", "wade", "waffle", "wagtail", "waist", "waking", "wallets", "wanted", "warped", "washing", "water", "waveform", "waxing", "wayside", "weavers", "website", "wedge", "weekday", "weird", "welders", "went", "wept", "were", "western", "wetsuit", "whale", "when", "whipped", "whole", "wickets", "width", "wield", "wife", "wiggle", "wildly", "winter", "wipeout", "wiring", "wise", "withdrawn", "wives", "wizard", "wobbly", "woes", "woken", "wolf", "womanly", "wonders", "woozy", "worry", "wounded", "woven", "wrap", "wrist", "wrong", "yacht", "yahoo", "yanks", "yard", "yawning", "yearbook", "yellow", "yesterday", "yeti", "yields", "yodel", "yoga", "younger", "yoyo", "zapped", "zeal", "zebra", "zero", "zesty", "zigzags", "zinger", "zippers", "zodiac", "zombie", "zones", "zoom"]), type$.JSArray_String);
    B.List_YyJ = A._setArrayType(makeConstList([0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117]), type$.JSArray_int);
    B.List_bdS = A._setArrayType(makeConstList(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]), type$.JSArray_String);
    B.List_cAX = A._setArrayType(makeConstList(["\u1100\u1161\u1100\u1167\u11a8", "\u1100\u1161\u1101\u1173\u11b7", "\u1100\u1161\u1102\u1161\u11ab", "\u1100\u1161\u1102\u1173\u11bc", "\u1100\u1161\u1103\u1173\u11a8", "\u1100\u1161\u1105\u1173\u110e\u1175\u11b7", "\u1100\u1161\u1106\u116e\u11b7", "\u1100\u1161\u1107\u1161\u11bc", "\u1100\u1161\u1109\u1161\u11bc", "\u1100\u1161\u1109\u1173\u11b7", "\u1100\u1161\u110b\u116e\u11ab\u1103\u1166", "\u1100\u1161\u110b\u1173\u11af", "\u1100\u1161\u110b\u1175\u1103\u1173", "\u1100\u1161\u110b\u1175\u11b8", "\u1100\u1161\u110c\u1161\u11bc", "\u1100\u1161\u110c\u1165\u11bc", "\u1100\u1161\u110c\u1169\u11a8", "\u1100\u1161\u110c\u116e\u11a8", "\u1100\u1161\u11a8\u110b\u1169", "\u1100\u1161\u11a8\u110c\u1161", "\u1100\u1161\u11ab\u1100\u1167\u11a8", "\u1100\u1161\u11ab\u1107\u116e", "\u1100\u1161\u11ab\u1109\u1165\u11b8", "\u1100\u1161\u11ab\u110c\u1161\u11bc", "\u1100\u1161\u11ab\u110c\u1165\u11b8", "\u1100\u1161\u11ab\u1111\u1161\u11ab", "\u1100\u1161\u11af\u1103\u1173\u11bc", "\u1100\u1161\u11af\u1107\u1175", "\u1100\u1161\u11af\u1109\u1162\u11a8", "\u1100\u1161\u11af\u110c\u1173\u11bc", "\u1100\u1161\u11b7\u1100\u1161\u11a8", "\u1100\u1161\u11b7\u1100\u1175", "\u1100\u1161\u11b7\u1109\u1169", "\u1100\u1161\u11b7\u1109\u116e\u1109\u1165\u11bc", "\u1100\u1161\u11b7\u110c\u1161", "\u1100\u1161\u11b7\u110c\u1165\u11bc", "\u1100\u1161\u11b8\u110c\u1161\u1100\u1175", "\u1100\u1161\u11bc\u1102\u1161\u11b7", "\u1100\u1161\u11bc\u1103\u1161\u11bc", "\u1100\u1161\u11bc\u1103\u1169", "\u1100\u1161\u11bc\u1105\u1167\u11a8\u1112\u1175", "\u1100\u1161\u11bc\u1107\u1167\u11ab", "\u1100\u1161\u11bc\u1107\u116e\u11a8", "\u1100\u1161\u11bc\u1109\u1161", "\u1100\u1161\u11bc\u1109\u116e\u1105\u1163\u11bc", "\u1100\u1161\u11bc\u110b\u1161\u110c\u1175", "\u1100\u1161\u11bc\u110b\u116f\u11ab\u1103\u1169", "\u1100\u1161\u11bc\u110b\u1174", "\u1100\u1161\u11bc\u110c\u1166", "\u1100\u1161\u11bc\u110c\u1169", "\u1100\u1161\u11c0\u110b\u1175", "\u1100\u1162\u1100\u116e\u1105\u1175", "\u1100\u1162\u1102\u1161\u1105\u1175", "\u1100\u1162\u1107\u1161\u11bc", "\u1100\u1162\u1107\u1167\u11af", "\u1100\u1162\u1109\u1165\u11ab", "\u1100\u1162\u1109\u1165\u11bc", "\u1100\u1162\u110b\u1175\u11ab", "\u1100\u1162\u11a8\u1100\u116a\u11ab\u110c\u1165\u11a8", "\u1100\u1165\u1109\u1175\u11af", "\u1100\u1165\u110b\u1162\u11a8", "\u1100\u1165\u110b\u116e\u11af", "\u1100\u1165\u110c\u1175\u11ba", "\u1100\u1165\u1111\u116e\u11b7", "\u1100\u1165\u11a8\u110c\u1165\u11bc", "\u1100\u1165\u11ab\u1100\u1161\u11bc", "\u1100\u1165\u11ab\u1106\u116e\u11af", "\u1100\u1165\u11ab\u1109\u1165\u11af", "\u1100\u1165\u11ab\u110c\u1169", "\u1100\u1165\u11ab\u110e\u116e\u11a8", "\u1100\u1165\u11af\u110b\u1173\u11b7", "\u1100\u1165\u11b7\u1109\u1161", "\u1100\u1165\u11b7\u1110\u1169", "\u1100\u1166\u1109\u1175\u1111\u1161\u11ab", "\u1100\u1166\u110b\u1175\u11b7", "\u1100\u1167\u110b\u116e\u11af", "\u1100\u1167\u11ab\u1112\u1162", "\u1100\u1167\u11af\u1100\u116a", "\u1100\u1167\u11af\u1100\u116e\u11a8", "\u1100\u1167\u11af\u1105\u1169\u11ab", "\u1100\u1167\u11af\u1109\u1165\u11a8", "\u1100\u1167\u11af\u1109\u1173\u11bc", "\u1100\u1167\u11af\u1109\u1175\u11b7", "\u1100\u1167\u11af\u110c\u1165\u11bc", "\u1100\u1167\u11af\u1112\u1169\u11ab", "\u1100\u1167\u11bc\u1100\u1168", "\u1100\u1167\u11bc\u1100\u1169", "\u1100\u1167\u11bc\u1100\u1175", "\u1100\u1167\u11bc\u1105\u1167\u11a8", "\u1100\u1167\u11bc\u1107\u1169\u11a8\u1100\u116e\u11bc", "\u1100\u1167\u11bc\u1107\u1175", "\u1100\u1167\u11bc\u1109\u1161\u11bc\u1103\u1169", "\u1100\u1167\u11bc\u110b\u1167\u11bc", "\u1100\u1167\u11bc\u110b\u116e", "\u1100\u1167\u11bc\u110c\u1162\u11bc", "\u1100\u1167\u11bc\u110c\u1166", "\u1100\u1167\u11bc\u110c\u116e", "\u1100\u1167\u11bc\u110e\u1161\u11af", "\u1100\u1167\u11bc\u110e\u1175", "\u1100\u1167\u11bc\u1112\u1163\u11bc", "\u1100\u1167\u11bc\u1112\u1165\u11b7", "\u1100\u1168\u1100\u1169\u11a8", "\u1100\u1168\u1103\u1161\u11ab", "\u1100\u1168\u1105\u1161\u11ab", "\u1100\u1168\u1109\u1161\u11ab", "\u1100\u1168\u1109\u1169\u11a8", "\u1100\u1168\u110b\u1163\u11a8", "\u1100\u1168\u110c\u1165\u11af", "\u1100\u1168\u110e\u1173\u11bc", "\u1100\u1168\u1112\u116c\u11a8", "\u1100\u1169\u1100\u1162\u11a8", "\u1100\u1169\u1100\u116e\u1105\u1167", "\u1100\u1169\u1100\u116e\u11bc", "\u1100\u1169\u1100\u1173\u11b8", "\u1100\u1169\u1103\u1173\u11bc\u1112\u1161\u11a8\u1109\u1162\u11bc", "\u1100\u1169\u1106\u116e\u1109\u1175\u11ab", "\u1100\u1169\u1106\u1175\u11ab", "\u1100\u1169\u110b\u1163\u11bc\u110b\u1175", "\u1100\u1169\u110c\u1161\u11bc", "\u1100\u1169\u110c\u1165\u11ab", "\u1100\u1169\u110c\u1175\u11b8", "\u1100\u1169\u110e\u116e\u11ba\u1100\u1161\u1105\u116e", "\u1100\u1169\u1110\u1169\u11bc", "\u1100\u1169\u1112\u1163\u11bc", "\u1100\u1169\u11a8\u1109\u1175\u11a8", "\u1100\u1169\u11af\u1106\u1169\u11a8", "\u1100\u1169\u11af\u110d\u1161\u1100\u1175", "\u1100\u1169\u11af\u1111\u1173", "\u1100\u1169\u11bc\u1100\u1161\u11ab", "\u1100\u1169\u11bc\u1100\u1162", "\u1100\u1169\u11bc\u1100\u1167\u11a8", "\u1100\u1169\u11bc\u1100\u116e\u11ab", "\u1100\u1169\u11bc\u1100\u1173\u11b8", "\u1100\u1169\u11bc\u1100\u1175", "\u1100\u1169\u11bc\u1103\u1169\u11bc", "\u1100\u1169\u11bc\u1106\u116e\u110b\u116f\u11ab", "\u1100\u1169\u11bc\u1107\u116e", "\u1100\u1169\u11bc\u1109\u1161", "\u1100\u1169\u11bc\u1109\u1175\u11a8", "\u1100\u1169\u11bc\u110b\u1165\u11b8", "\u1100\u1169\u11bc\u110b\u1167\u11ab", "\u1100\u1169\u11bc\u110b\u116f\u11ab", "\u1100\u1169\u11bc\u110c\u1161\u11bc", "\u1100\u1169\u11bc\u110d\u1161", "\u1100\u1169\u11bc\u110e\u1162\u11a8", "\u1100\u1169\u11bc\u1110\u1169\u11bc", "\u1100\u1169\u11bc\u1111\u1169", "\u1100\u1169\u11bc\u1112\u1161\u11bc", "\u1100\u1169\u11bc\u1112\u1172\u110b\u1175\u11af", "\u1100\u116a\u1106\u1169\u11a8", "\u1100\u116a\u110b\u1175\u11af", "\u1100\u116a\u110c\u1161\u11bc", "\u1100\u116a\u110c\u1165\u11bc", "\u1100\u116a\u1112\u1161\u11a8", "\u1100\u116a\u11ab\u1100\u1162\u11a8", "\u1100\u116a\u11ab\u1100\u1168", "\u1100\u116a\u11ab\u1100\u116a\u11bc", "\u1100\u116a\u11ab\u1102\u1167\u11b7", "\u1100\u116a\u11ab\u1105\u1161\u11b7", "\u1100\u116a\u11ab\u1105\u1167\u11ab", "\u1100\u116a\u11ab\u1105\u1175", "\u1100\u116a\u11ab\u1109\u1173\u11b8", "\u1100\u116a\u11ab\u1109\u1175\u11b7", "\u1100\u116a\u11ab\u110c\u1165\u11b7", "\u1100\u116a\u11ab\u110e\u1161\u11af", "\u1100\u116a\u11bc\u1100\u1167\u11bc", "\u1100\u116a\u11bc\u1100\u1169", "\u1100\u116a\u11bc\u110c\u1161\u11bc", "\u1100\u116a\u11bc\u110c\u116e", "\u1100\u116c\u1105\u1169\u110b\u116e\u11b7", "\u1100\u116c\u11bc\u110c\u1161\u11bc\u1112\u1175", "\u1100\u116d\u1100\u116a\u1109\u1165", "\u1100\u116d\u1106\u116e\u11ab", "\u1100\u116d\u1107\u1169\u11a8", "\u1100\u116d\u1109\u1175\u11af", "\u1100\u116d\u110b\u1163\u11bc", "\u1100\u116d\u110b\u1172\u11a8", "\u1100\u116d\u110c\u1161\u11bc", "\u1100\u116d\u110c\u1175\u11a8", "\u1100\u116d\u1110\u1169\u11bc", "\u1100\u116d\u1112\u116a\u11ab", "\u1100\u116d\u1112\u116e\u11ab", "\u1100\u116e\u1100\u1167\u11bc", "\u1100\u116e\u1105\u1173\u11b7", "\u1100\u116e\u1106\u1165\u11bc", "\u1100\u116e\u1107\u1167\u11af", "\u1100\u116e\u1107\u116e\u11ab", "\u1100\u116e\u1109\u1165\u11a8", "\u1100\u116e\u1109\u1165\u11bc", "\u1100\u116e\u1109\u1169\u11a8", "\u1100\u116e\u110b\u1167\u11a8", "\u1100\u116e\u110b\u1175\u11b8", "\u1100\u116e\u110e\u1165\u11bc", "\u1100\u116e\u110e\u1166\u110c\u1165\u11a8", "\u1100\u116e\u11a8\u1100\u1161", "\u1100\u116e\u11a8\u1100\u1175", "\u1100\u116e\u11a8\u1102\u1162", "\u1100\u116e\u11a8\u1105\u1175\u11b8", "\u1100\u116e\u11a8\u1106\u116e\u11af", "\u1100\u116e\u11a8\u1106\u1175\u11ab", "\u1100\u116e\u11a8\u1109\u116e", "\u1100\u116e\u11a8\u110b\u1165", "\u1100\u116e\u11a8\u110b\u116a\u11bc", "\u1100\u116e\u11a8\u110c\u1165\u11a8", "\u1100\u116e\u11a8\u110c\u1166", "\u1100\u116e\u11a8\u1112\u116c", "\u1100\u116e\u11ab\u1103\u1162", "\u1100\u116e\u11ab\u1109\u1161", "\u1100\u116e\u11ab\u110b\u1175\u11ab", "\u1100\u116e\u11bc\u1100\u1173\u11a8\u110c\u1165\u11a8", "\u1100\u116f\u11ab\u1105\u1175", "\u1100\u116f\u11ab\u110b\u1171", "\u1100\u116f\u11ab\u1110\u116e", "\u1100\u1171\u1100\u116e\u11a8", "\u1100\u1171\u1109\u1175\u11ab", "\u1100\u1172\u110c\u1165\u11bc", "\u1100\u1172\u110e\u1175\u11a8", "\u1100\u1172\u11ab\u1112\u1167\u11bc", "\u1100\u1173\u1102\u1161\u11af", "\u1100\u1173\u1102\u1163\u11bc", "\u1100\u1173\u1102\u1173\u11af", "\u1100\u1173\u1105\u1165\u1102\u1161", "\u1100\u1173\u1105\u116e\u11b8", "\u1100\u1173\u1105\u1173\u11ba", "\u1100\u1173\u1105\u1175\u11b7", "\u1100\u1173\u110c\u1166\u1109\u1165\u110b\u1163", "\u1100\u1173\u1110\u1169\u1105\u1169\u11a8", "\u1100\u1173\u11a8\u1107\u1169\u11a8", "\u1100\u1173\u11a8\u1112\u1175", "\u1100\u1173\u11ab\u1100\u1165", "\u1100\u1173\u11ab\u1100\u116d", "\u1100\u1173\u11ab\u1105\u1162", "\u1100\u1173\u11ab\u1105\u1169", "\u1100\u1173\u11ab\u1106\u116e", "\u1100\u1173\u11ab\u1107\u1169\u11ab", "\u1100\u1173\u11ab\u110b\u116f\u11ab", "\u1100\u1173\u11ab\u110b\u1172\u11a8", "\u1100\u1173\u11ab\u110e\u1165", "\u1100\u1173\u11af\u110a\u1175", "\u1100\u1173\u11af\u110c\u1161", "\u1100\u1173\u11b7\u1100\u1161\u11bc\u1109\u1161\u11ab", "\u1100\u1173\u11b7\u1100\u1169", "\u1100\u1173\u11b7\u1102\u1167\u11ab", "\u1100\u1173\u11b7\u1106\u1166\u1103\u1161\u11af", "\u1100\u1173\u11b7\u110b\u1162\u11a8", "\u1100\u1173\u11b7\u110b\u1167\u11ab", "\u1100\u1173\u11b7\u110b\u116d\u110b\u1175\u11af", "\u1100\u1173\u11b7\u110c\u1175", "\u1100\u1173\u11bc\u110c\u1165\u11bc\u110c\u1165\u11a8", "\u1100\u1175\u1100\u1161\u11ab", "\u1100\u1175\u1100\u116a\u11ab", "\u1100\u1175\u1102\u1167\u11b7", "\u1100\u1175\u1102\u1173\u11bc", "\u1100\u1175\u1103\u1169\u11a8\u1100\u116d", "\u1100\u1175\u1103\u116e\u11bc", "\u1100\u1175\u1105\u1169\u11a8", "\u1100\u1175\u1105\u1173\u11b7", "\u1100\u1175\u1107\u1165\u11b8", "\u1100\u1175\u1107\u1169\u11ab", "\u1100\u1175\u1107\u116e\u11ab", "\u1100\u1175\u1108\u1173\u11b7", "\u1100\u1175\u1109\u116e\u11a8\u1109\u1161", "\u1100\u1175\u1109\u116e\u11af", "\u1100\u1175\u110b\u1165\u11a8", "\u1100\u1175\u110b\u1165\u11b8", "\u1100\u1175\u110b\u1169\u11ab", "\u1100\u1175\u110b\u116e\u11ab", "\u1100\u1175\u110b\u116f\u11ab", "\u1100\u1175\u110c\u1165\u11a8", "\u1100\u1175\u110c\u116e\u11ab", "\u1100\u1175\u110e\u1175\u11b7", "\u1100\u1175\u1112\u1169\u11ab", "\u1100\u1175\u1112\u116c\u11a8", "\u1100\u1175\u11ab\u1100\u1173\u11b8", "\u1100\u1175\u11ab\u110c\u1161\u11bc", "\u1100\u1175\u11af\u110b\u1175", "\u1100\u1175\u11b7\u1107\u1161\u11b8", "\u1100\u1175\u11b7\u110e\u1175", "\u1100\u1175\u11b7\u1111\u1169\u1100\u1169\u11bc\u1112\u1161\u11bc", "\u1101\u1161\u11a8\u1103\u116e\u1100\u1175", "\u1101\u1161\u11b7\u1108\u1161\u11a8", "\u1101\u1162\u1103\u1161\u11af\u110b\u1173\u11b7", "\u1101\u1162\u1109\u1169\u1100\u1173\u11b7", "\u1101\u1165\u11b8\u110c\u1175\u11af", "\u1101\u1169\u11a8\u1103\u1162\u1100\u1175", "\u1101\u1169\u11be\u110b\u1175\u11c1", "\u1102\u1161\u1103\u1173\u11af\u110b\u1175", "\u1102\u1161\u1105\u1161\u11ab\u1112\u1175", "\u1102\u1161\u1106\u1165\u110c\u1175", "\u1102\u1161\u1106\u116e\u11af", "\u1102\u1161\u110e\u1175\u11b7\u1107\u1161\u11ab", "\u1102\u1161\u1112\u1173\u11af", "\u1102\u1161\u11a8\u110b\u1167\u11b8", "\u1102\u1161\u11ab\u1107\u1161\u11bc", "\u1102\u1161\u11af\u1100\u1162", "\u1102\u1161\u11af\u110a\u1175", "\u1102\u1161\u11af\u110d\u1161", "\u1102\u1161\u11b7\u1102\u1167", "\u1102\u1161\u11b7\u1103\u1162\u1106\u116e\u11ab", "\u1102\u1161\u11b7\u1106\u1162", "\u1102\u1161\u11b7\u1109\u1161\u11ab", "\u1102\u1161\u11b7\u110c\u1161", "\u1102\u1161\u11b7\u1111\u1167\u11ab", "\u1102\u1161\u11b7\u1112\u1161\u11a8\u1109\u1162\u11bc", "\u1102\u1161\u11bc\u1107\u1175", "\u1102\u1161\u11c0\u1106\u1161\u11af", "\u1102\u1162\u1102\u1167\u11ab", "\u1102\u1162\u110b\u116d\u11bc", "\u1102\u1162\u110b\u1175\u11af", "\u1102\u1162\u11b7\u1107\u1175", "\u1102\u1162\u11b7\u1109\u1162", "\u1102\u1162\u11ba\u1106\u116e\u11af", "\u1102\u1162\u11bc\u1103\u1169\u11bc", "\u1102\u1162\u11bc\u1106\u1167\u11ab", "\u1102\u1162\u11bc\u1107\u1161\u11bc", "\u1102\u1162\u11bc\u110c\u1161\u11bc\u1100\u1169", "\u1102\u1166\u11a8\u1110\u1161\u110b\u1175", "\u1102\u1166\u11ba\u110d\u1162", "\u1102\u1169\u1103\u1169\u11bc", "\u1102\u1169\u1105\u1161\u11ab\u1109\u1162\u11a8", "\u1102\u1169\u1105\u1167\u11a8", "\u1102\u1169\u110b\u1175\u11ab", "\u1102\u1169\u11a8\u110b\u1173\u11b7", "\u1102\u1169\u11a8\u110e\u1161", "\u1102\u1169\u11a8\u1112\u116a", "\u1102\u1169\u11ab\u1105\u1175", "\u1102\u1169\u11ab\u1106\u116e\u11ab", "\u1102\u1169\u11ab\u110c\u1162\u11bc", "\u1102\u1169\u11af\u110b\u1175", "\u1102\u1169\u11bc\u1100\u116e", "\u1102\u1169\u11bc\u1103\u1161\u11b7", "\u1102\u1169\u11bc\u1106\u1175\u11ab", "\u1102\u1169\u11bc\u1107\u116e", "\u1102\u1169\u11bc\u110b\u1165\u11b8", "\u1102\u1169\u11bc\u110c\u1161\u11bc", "\u1102\u1169\u11bc\u110e\u1169\u11ab", "\u1102\u1169\u11c1\u110b\u1175", "\u1102\u116e\u11ab\u1103\u1169\u11bc\u110c\u1161", "\u1102\u116e\u11ab\u1106\u116e\u11af", "\u1102\u116e\u11ab\u110a\u1165\u11b8", "\u1102\u1172\u110b\u116d\u11a8", "\u1102\u1173\u1101\u1175\u11b7", "\u1102\u1173\u11a8\u1103\u1162", "\u1102\u1173\u11bc\u1103\u1169\u11bc\u110c\u1165\u11a8", "\u1102\u1173\u11bc\u1105\u1167\u11a8", "\u1103\u1161\u1107\u1161\u11bc", "\u1103\u1161\u110b\u1163\u11bc\u1109\u1165\u11bc", "\u1103\u1161\u110b\u1173\u11b7", "\u1103\u1161\u110b\u1175\u110b\u1165\u1110\u1173", "\u1103\u1161\u1112\u1162\u11bc", "\u1103\u1161\u11ab\u1100\u1168", "\u1103\u1161\u11ab\u1100\u1169\u11af", "\u1103\u1161\u11ab\u1103\u1169\u11a8", "\u1103\u1161\u11ab\u1106\u1161\u11ba", "\u1103\u1161\u11ab\u1109\u116e\u11ab", "\u1103\u1161\u11ab\u110b\u1165", "\u1103\u1161\u11ab\u110b\u1171", "\u1103\u1161\u11ab\u110c\u1165\u11b7", "\u1103\u1161\u11ab\u110e\u1166", "\u1103\u1161\u11ab\u110e\u116e", "\u1103\u1161\u11ab\u1111\u1167\u11ab", "\u1103\u1161\u11ab\u1111\u116e\u11bc", "\u1103\u1161\u11af\u1100\u1163\u11af", "\u1103\u1161\u11af\u1105\u1165", "\u1103\u1161\u11af\u1105\u1167\u11a8", "\u1103\u1161\u11af\u1105\u1175", "\u1103\u1161\u11b0\u1100\u1169\u1100\u1175", "\u1103\u1161\u11b7\u1103\u1161\u11bc", "\u1103\u1161\u11b7\u1107\u1162", "\u1103\u1161\u11b7\u110b\u116d", "\u1103\u1161\u11b7\u110b\u1175\u11b7", "\u1103\u1161\u11b8\u1107\u1167\u11ab", "\u1103\u1161\u11b8\u110c\u1161\u11bc", "\u1103\u1161\u11bc\u1100\u1173\u11ab", "\u1103\u1161\u11bc\u1107\u116e\u11ab\u1100\u1161\u11ab", "\u1103\u1161\u11bc\u110b\u1167\u11ab\u1112\u1175", "\u1103\u1161\u11bc\u110c\u1161\u11bc", "\u1103\u1162\u1100\u1172\u1106\u1169", "\u1103\u1162\u1102\u1161\u11bd", "\u1103\u1162\u1103\u1161\u11ab\u1112\u1175", "\u1103\u1162\u1103\u1161\u11b8", "\u1103\u1162\u1103\u1169\u1109\u1175", "\u1103\u1162\u1105\u1163\u11a8", "\u1103\u1162\u1105\u1163\u11bc", "\u1103\u1162\u1105\u1172\u11a8", "\u1103\u1162\u1106\u116e\u11ab", "\u1103\u1162\u1107\u116e\u1107\u116e\u11ab", "\u1103\u1162\u1109\u1175\u11ab", "\u1103\u1162\u110b\u1173\u11bc", "\u1103\u1162\u110c\u1161\u11bc", "\u1103\u1162\u110c\u1165\u11ab", "\u1103\u1162\u110c\u1165\u11b8", "\u1103\u1162\u110c\u116e\u11bc", "\u1103\u1162\u110e\u1162\u11a8", "\u1103\u1162\u110e\u116e\u11af", "\u1103\u1162\u110e\u116e\u11bc", "\u1103\u1162\u1110\u1169\u11bc\u1105\u1167\u11bc", "\u1103\u1162\u1112\u1161\u11a8", "\u1103\u1162\u1112\u1161\u11ab\u1106\u1175\u11ab\u1100\u116e\u11a8", "\u1103\u1162\u1112\u1161\u11b8\u1109\u1175\u11af", "\u1103\u1162\u1112\u1167\u11bc", "\u1103\u1165\u11bc\u110b\u1165\u1105\u1175", "\u1103\u1166\u110b\u1175\u1110\u1173", "\u1103\u1169\u1103\u1162\u110e\u1166", "\u1103\u1169\u1103\u1165\u11a8", "\u1103\u1169\u1103\u116e\u11a8", "\u1103\u1169\u1106\u1161\u11bc", "\u1103\u1169\u1109\u1165\u1100\u116a\u11ab", "\u1103\u1169\u1109\u1175\u11b7", "\u1103\u1169\u110b\u116e\u11b7", "\u1103\u1169\u110b\u1175\u11b8", "\u1103\u1169\u110c\u1161\u1100\u1175", "\u1103\u1169\u110c\u1165\u1112\u1175", "\u1103\u1169\u110c\u1165\u11ab", "\u1103\u1169\u110c\u116e\u11bc", "\u1103\u1169\u110e\u1161\u11a8", "\u1103\u1169\u11a8\u1100\u1161\u11b7", "\u1103\u1169\u11a8\u1105\u1175\u11b8", "\u1103\u1169\u11a8\u1109\u1165", "\u1103\u1169\u11a8\u110b\u1175\u11af", "\u1103\u1169\u11a8\u110e\u1161\u11bc\u110c\u1165\u11a8", "\u1103\u1169\u11bc\u1112\u116a\u110e\u1162\u11a8", "\u1103\u1171\u11ba\u1106\u1169\u1109\u1173\u11b8", "\u1103\u1171\u11ba\u1109\u1161\u11ab", "\u1104\u1161\u11af\u110b\u1161\u110b\u1175", "\u1106\u1161\u1102\u116e\u1105\u1161", "\u1106\u1161\u1102\u1173\u11af", "\u1106\u1161\u1103\u1161\u11bc", "\u1106\u1161\u1105\u1161\u1110\u1169\u11ab", "\u1106\u1161\u1105\u1167\u11ab", "\u1106\u1161\u1106\u116e\u1105\u1175", "\u1106\u1161\u1109\u1161\u110c\u1175", "\u1106\u1161\u110b\u1163\u11a8", "\u1106\u1161\u110b\u116d\u1102\u1166\u110c\u1173", "\u1106\u1161\u110b\u1173\u11af", "\u1106\u1161\u110b\u1173\u11b7", "\u1106\u1161\u110b\u1175\u110f\u1173", "\u1106\u1161\u110c\u116e\u11bc", "\u1106\u1161\u110c\u1175\u1106\u1161\u11a8", "\u1106\u1161\u110e\u1161\u11ab\u1100\u1161\u110c\u1175", "\u1106\u1161\u110e\u1161\u11af", "\u1106\u1161\u1112\u1173\u11ab", "\u1106\u1161\u11a8\u1100\u1165\u11af\u1105\u1175", "\u1106\u1161\u11a8\u1102\u1162", "\u1106\u1161\u11a8\u1109\u1161\u11bc", "\u1106\u1161\u11ab\u1102\u1161\u11b7", "\u1106\u1161\u11ab\u1103\u116e", "\u1106\u1161\u11ab\u1109\u1166", "\u1106\u1161\u11ab\u110b\u1163\u11a8", "\u1106\u1161\u11ab\u110b\u1175\u11af", "\u1106\u1161\u11ab\u110c\u1165\u11b7", "\u1106\u1161\u11ab\u110c\u1169\u11a8", "\u1106\u1161\u11ab\u1112\u116a", "\u1106\u1161\u11ad\u110b\u1175", "\u1106\u1161\u11af\u1100\u1175", "\u1106\u1161\u11af\u110a\u1173\u11b7", "\u1106\u1161\u11af\u1110\u116e", "\u1106\u1161\u11b7\u1103\u1162\u1105\u1169", "\u1106\u1161\u11bc\u110b\u116f\u11ab\u1100\u1167\u11bc", "\u1106\u1162\u1102\u1167\u11ab", "\u1106\u1162\u1103\u1161\u11af", "\u1106\u1162\u1105\u1167\u11a8", "\u1106\u1162\u1107\u1165\u11ab", "\u1106\u1162\u1109\u1173\u110f\u1165\u11b7", "\u1106\u1162\u110b\u1175\u11af", "\u1106\u1162\u110c\u1161\u11bc", "\u1106\u1162\u11a8\u110c\u116e", "\u1106\u1165\u11a8\u110b\u1175", "\u1106\u1165\u11ab\u110c\u1165", "\u1106\u1165\u11ab\u110c\u1175", "\u1106\u1165\u11af\u1105\u1175", "\u1106\u1166\u110b\u1175\u11af", "\u1106\u1167\u1102\u1173\u1105\u1175", "\u1106\u1167\u110e\u1175\u11af", "\u1106\u1167\u11ab\u1103\u1161\u11b7", "\u1106\u1167\u11af\u110e\u1175", "\u1106\u1167\u11bc\u1103\u1161\u11ab", "\u1106\u1167\u11bc\u1105\u1167\u11bc", "\u1106\u1167\u11bc\u110b\u1168", "\u1106\u1167\u11bc\u110b\u1174", "\u1106\u1167\u11bc\u110c\u1165\u11af", "\u1106\u1167\u11bc\u110e\u1175\u11bc", "\u1106\u1167\u11bc\u1112\u1161\u11b7", "\u1106\u1169\u1100\u1173\u11b7", "\u1106\u1169\u1102\u1175\u1110\u1165", "\u1106\u1169\u1103\u1166\u11af", "\u1106\u1169\u1103\u1173\u11ab", "\u1106\u1169\u1107\u1165\u11b7", "\u1106\u1169\u1109\u1173\u11b8", "\u1106\u1169\u110b\u1163\u11bc", "\u1106\u1169\u110b\u1175\u11b7", "\u1106\u1169\u110c\u1169\u1105\u1175", "\u1106\u1169\u110c\u1175\u11b8", "\u1106\u1169\u1110\u116e\u11bc\u110b\u1175", "\u1106\u1169\u11a8\u1100\u1165\u11af\u110b\u1175", "\u1106\u1169\u11a8\u1105\u1169\u11a8", "\u1106\u1169\u11a8\u1109\u1161", "\u1106\u1169\u11a8\u1109\u1169\u1105\u1175", "\u1106\u1169\u11a8\u1109\u116e\u11b7", "\u1106\u1169\u11a8\u110c\u1165\u11a8", "\u1106\u1169\u11a8\u1111\u116d", "\u1106\u1169\u11af\u1105\u1162", "\u1106\u1169\u11b7\u1106\u1162", "\u1106\u1169\u11b7\u1106\u116e\u1100\u1166", "\u1106\u1169\u11b7\u1109\u1161\u11af", "\u1106\u1169\u11b7\u1109\u1169\u11a8", "\u1106\u1169\u11b7\u110c\u1175\u11ba", "\u1106\u1169\u11b7\u1110\u1169\u11bc", "\u1106\u1169\u11b8\u1109\u1175", "\u1106\u116e\u1100\u116a\u11ab\u1109\u1175\u11b7", "\u1106\u116e\u1100\u116e\u11bc\u1112\u116a", "\u1106\u116e\u1103\u1165\u110b\u1171", "\u1106\u116e\u1103\u1165\u11b7", "\u1106\u116e\u1105\u1173\u11c1", "\u1106\u116e\u1109\u1173\u11ab", "\u1106\u116e\u110b\u1165\u11ba", "\u1106\u116e\u110b\u1167\u11a8", "\u1106\u116e\u110b\u116d\u11bc", "\u1106\u116e\u110c\u1169\u1100\u1165\u11ab", "\u1106\u116e\u110c\u1175\u1100\u1162", "\u1106\u116e\u110e\u1165\u11a8", "\u1106\u116e\u11ab\u1100\u116e", "\u1106\u116e\u11ab\u1103\u1173\u11a8", "\u1106\u116e\u11ab\u1107\u1165\u11b8", "\u1106\u116e\u11ab\u1109\u1165", "\u1106\u116e\u11ab\u110c\u1166", "\u1106\u116e\u11ab\u1112\u1161\u11a8", "\u1106\u116e\u11ab\u1112\u116a", "\u1106\u116e\u11af\u1100\u1161", "\u1106\u116e\u11af\u1100\u1165\u11ab", "\u1106\u116e\u11af\u1100\u1167\u11af", "\u1106\u116e\u11af\u1100\u1169\u1100\u1175", "\u1106\u116e\u11af\u1105\u1169\u11ab", "\u1106\u116e\u11af\u1105\u1175\u1112\u1161\u11a8", "\u1106\u116e\u11af\u110b\u1173\u11b7", "\u1106\u116e\u11af\u110c\u1175\u11af", "\u1106\u116e\u11af\u110e\u1166", "\u1106\u1175\u1100\u116e\u11a8", "\u1106\u1175\u1103\u1175\u110b\u1165", "\u1106\u1175\u1109\u1161\u110b\u1175\u11af", "\u1106\u1175\u1109\u116e\u11af", "\u1106\u1175\u110b\u1167\u11a8", "\u1106\u1175\u110b\u116d\u11bc\u1109\u1175\u11af", "\u1106\u1175\u110b\u116e\u11b7", "\u1106\u1175\u110b\u1175\u11ab", "\u1106\u1175\u1110\u1175\u11bc", "\u1106\u1175\u1112\u1169\u11ab", "\u1106\u1175\u11ab\u1100\u1161\u11ab", "\u1106\u1175\u11ab\u110c\u1169\u11a8", "\u1106\u1175\u11ab\u110c\u116e", "\u1106\u1175\u11ae\u110b\u1173\u11b7", "\u1106\u1175\u11af\u1100\u1161\u1105\u116e", "\u1106\u1175\u11af\u1105\u1175\u1106\u1175\u1110\u1165", "\u1106\u1175\u11c0\u1107\u1161\u1103\u1161\u11a8", "\u1107\u1161\u1100\u1161\u110c\u1175", "\u1107\u1161\u1100\u116e\u1102\u1175", "\u1107\u1161\u1102\u1161\u1102\u1161", "\u1107\u1161\u1102\u1173\u11af", "\u1107\u1161\u1103\u1161\u11a8", "\u1107\u1161\u1103\u1161\u11ba\u1100\u1161", "\u1107\u1161\u1105\u1161\u11b7", "\u1107\u1161\u110b\u1175\u1105\u1165\u1109\u1173", "\u1107\u1161\u1110\u1161\u11bc", "\u1107\u1161\u11a8\u1106\u116e\u11af\u1100\u116a\u11ab", "\u1107\u1161\u11a8\u1109\u1161", "\u1107\u1161\u11a8\u1109\u116e", "\u1107\u1161\u11ab\u1103\u1162", "\u1107\u1161\u11ab\u1103\u1173\u1109\u1175", "\u1107\u1161\u11ab\u1106\u1161\u11af", "\u1107\u1161\u11ab\u1107\u1161\u11af", "\u1107\u1161\u11ab\u1109\u1165\u11bc", "\u1107\u1161\u11ab\u110b\u1173\u11bc", "\u1107\u1161\u11ab\u110c\u1161\u11bc", "\u1107\u1161\u11ab\u110c\u116e\u11a8", "\u1107\u1161\u11ab\u110c\u1175", "\u1107\u1161\u11ab\u110e\u1161\u11ab", "\u1107\u1161\u11ae\u110e\u1175\u11b7", "\u1107\u1161\u11af\u1100\u1161\u1105\u1161\u11a8", "\u1107\u1161\u11af\u1100\u1165\u11af\u110b\u1173\u11b7", "\u1107\u1161\u11af\u1100\u1167\u11ab", "\u1107\u1161\u11af\u1103\u1161\u11af", "\u1107\u1161\u11af\u1105\u1166", "\u1107\u1161\u11af\u1106\u1169\u11a8", "\u1107\u1161\u11af\u1107\u1161\u1103\u1161\u11a8", "\u1107\u1161\u11af\u1109\u1162\u11bc", "\u1107\u1161\u11af\u110b\u1173\u11b7", "\u1107\u1161\u11af\u110c\u1161\u1100\u116e\u11a8", "\u1107\u1161\u11af\u110c\u1165\u11ab", "\u1107\u1161\u11af\u1110\u1169\u11b8", "\u1107\u1161\u11af\u1111\u116d", "\u1107\u1161\u11b7\u1112\u1161\u1102\u1173\u11af", "\u1107\u1161\u11b8\u1100\u1173\u1105\u1173\u11ba", "\u1107\u1161\u11b8\u1106\u1161\u11ba", "\u1107\u1161\u11b8\u1109\u1161\u11bc", "\u1107\u1161\u11b8\u1109\u1169\u11c0", "\u1107\u1161\u11bc\u1100\u1173\u11b7", "\u1107\u1161\u11bc\u1106\u1167\u11ab", "\u1107\u1161\u11bc\u1106\u116e\u11ab", "\u1107\u1161\u11bc\u1107\u1161\u1103\u1161\u11a8", "\u1107\u1161\u11bc\u1107\u1165\u11b8", "\u1107\u1161\u11bc\u1109\u1169\u11bc", "\u1107\u1161\u11bc\u1109\u1175\u11a8", "\u1107\u1161\u11bc\u110b\u1161\u11ab", "\u1107\u1161\u11bc\u110b\u116e\u11af", "\u1107\u1161\u11bc\u110c\u1175", "\u1107\u1161\u11bc\u1112\u1161\u11a8", "\u1107\u1161\u11bc\u1112\u1162", "\u1107\u1161\u11bc\u1112\u1163\u11bc", "\u1107\u1162\u1100\u1167\u11bc", "\u1107\u1162\u1101\u1169\u11b8", "\u1107\u1162\u1103\u1161\u11af", "\u1107\u1162\u1103\u1173\u1106\u1175\u11ab\u1110\u1165\u11ab", "\u1107\u1162\u11a8\u1103\u116e\u1109\u1161\u11ab", "\u1107\u1162\u11a8\u1109\u1162\u11a8", "\u1107\u1162\u11a8\u1109\u1165\u11bc", "\u1107\u1162\u11a8\u110b\u1175\u11ab", "\u1107\u1162\u11a8\u110c\u1166", "\u1107\u1162\u11a8\u1112\u116a\u110c\u1165\u11b7", "\u1107\u1165\u1105\u1173\u11ba", "\u1107\u1165\u1109\u1165\u11ba", "\u1107\u1165\u1110\u1173\u11ab", "\u1107\u1165\u11ab\u1100\u1162", "\u1107\u1165\u11ab\u110b\u1167\u11a8", "\u1107\u1165\u11ab\u110c\u1175", "\u1107\u1165\u11ab\u1112\u1169", "\u1107\u1165\u11af\u1100\u1173\u11b7", "\u1107\u1165\u11af\u1105\u1166", "\u1107\u1165\u11af\u110a\u1165", "\u1107\u1165\u11b7\u110b\u1171", "\u1107\u1165\u11b7\u110b\u1175\u11ab", "\u1107\u1165\u11b7\u110c\u116c", "\u1107\u1165\u11b8\u1105\u1172\u11af", "\u1107\u1165\u11b8\u110b\u116f\u11ab", "\u1107\u1165\u11b8\u110c\u1165\u11a8", "\u1107\u1165\u11b8\u110e\u1175\u11a8", "\u1107\u1166\u110b\u1175\u110c\u1175\u11bc", "\u1107\u1166\u11af\u1110\u1173", "\u1107\u1167\u11ab\u1100\u1167\u11bc", "\u1107\u1167\u11ab\u1103\u1169\u11bc", "\u1107\u1167\u11ab\u1106\u1167\u11bc", "\u1107\u1167\u11ab\u1109\u1175\u11ab", "\u1107\u1167\u11ab\u1112\u1169\u1109\u1161", "\u1107\u1167\u11ab\u1112\u116a", "\u1107\u1167\u11af\u1103\u1169", "\u1107\u1167\u11af\u1106\u1167\u11bc", "\u1107\u1167\u11af\u110b\u1175\u11af", "\u1107\u1167\u11bc\u1109\u1175\u11af", "\u1107\u1167\u11bc\u110b\u1161\u1105\u1175", "\u1107\u1167\u11bc\u110b\u116f\u11ab", "\u1107\u1169\u1100\u116a\u11ab", "\u1107\u1169\u1102\u1165\u1109\u1173", "\u1107\u1169\u1105\u1161\u1109\u1162\u11a8", "\u1107\u1169\u1105\u1161\u11b7", "\u1107\u1169\u1105\u1173\u11b7", "\u1107\u1169\u1109\u1161\u11bc", "\u1107\u1169\u110b\u1161\u11ab", "\u1107\u1169\u110c\u1161\u1100\u1175", "\u1107\u1169\u110c\u1161\u11bc", "\u1107\u1169\u110c\u1165\u11ab", "\u1107\u1169\u110c\u1169\u11ab", "\u1107\u1169\u1110\u1169\u11bc", "\u1107\u1169\u1111\u1167\u11ab\u110c\u1165\u11a8", "\u1107\u1169\u1112\u1165\u11b7", "\u1107\u1169\u11a8\u1103\u1169", "\u1107\u1169\u11a8\u1109\u1161", "\u1107\u1169\u11a8\u1109\u116e\u11bc\u110b\u1161", "\u1107\u1169\u11a8\u1109\u1173\u11b8", "\u1107\u1169\u11a9\u110b\u1173\u11b7", "\u1107\u1169\u11ab\u1100\u1167\u11a8\u110c\u1165\u11a8", "\u1107\u1169\u11ab\u1105\u1162", "\u1107\u1169\u11ab\u1107\u116e", "\u1107\u1169\u11ab\u1109\u1161", "\u1107\u1169\u11ab\u1109\u1165\u11bc", "\u1107\u1169\u11ab\u110b\u1175\u11ab", "\u1107\u1169\u11ab\u110c\u1175\u11af", "\u1107\u1169\u11af\u1111\u1166\u11ab", "\u1107\u1169\u11bc\u1109\u1161", "\u1107\u1169\u11bc\u110c\u1175", "\u1107\u1169\u11bc\u1110\u116e", "\u1107\u116e\u1100\u1173\u11ab", "\u1107\u116e\u1101\u1173\u1105\u1165\u110b\u116e\u11b7", "\u1107\u116e\u1103\u1161\u11b7", "\u1107\u116e\u1103\u1169\u11bc\u1109\u1161\u11ab", "\u1107\u116e\u1106\u116e\u11ab", "\u1107\u116e\u1107\u116e\u11ab", "\u1107\u116e\u1109\u1161\u11ab", "\u1107\u116e\u1109\u1161\u11bc", "\u1107\u116e\u110b\u1165\u11bf", "\u1107\u116e\u110b\u1175\u11ab", "\u1107\u116e\u110c\u1161\u11a8\u110b\u116d\u11bc", "\u1107\u116e\u110c\u1161\u11bc", "\u1107\u116e\u110c\u1165\u11bc", "\u1107\u116e\u110c\u1169\u11a8", "\u1107\u116e\u110c\u1175\u1105\u1165\u11ab\u1112\u1175", "\u1107\u116e\u110e\u1175\u11ab", "\u1107\u116e\u1110\u1161\u11a8", "\u1107\u116e\u1111\u116e\u11b7", "\u1107\u116e\u1112\u116c\u110c\u1161\u11bc", "\u1107\u116e\u11a8\u1107\u116e", "\u1107\u116e\u11a8\u1112\u1161\u11ab", "\u1107\u116e\u11ab\u1102\u1169", "\u1107\u116e\u11ab\u1105\u1163\u11bc", "\u1107\u116e\u11ab\u1105\u1175", "\u1107\u116e\u11ab\u1106\u1167\u11bc", "\u1107\u116e\u11ab\u1109\u1165\u11a8", "\u1107\u116e\u11ab\u110b\u1163", "\u1107\u116e\u11ab\u110b\u1171\u1100\u1175", "\u1107\u116e\u11ab\u1111\u1175\u11af", "\u1107\u116e\u11ab\u1112\u1169\u11bc\u1109\u1162\u11a8", "\u1107\u116e\u11af\u1100\u1169\u1100\u1175", "\u1107\u116e\u11af\u1100\u116a", "\u1107\u116e\u11af\u1100\u116d", "\u1107\u116e\u11af\u1101\u1169\u11be", "\u1107\u116e\u11af\u1106\u1161\u11ab", "\u1107\u116e\u11af\u1107\u1165\u11b8", "\u1107\u116e\u11af\u1107\u1175\u11be", "\u1107\u116e\u11af\u110b\u1161\u11ab", "\u1107\u116e\u11af\u110b\u1175\u110b\u1175\u11a8", "\u1107\u116e\u11af\u1112\u1162\u11bc", "\u1107\u1173\u1105\u1162\u11ab\u1103\u1173", "\u1107\u1175\u1100\u1173\u11a8", "\u1107\u1175\u1102\u1161\u11ab", "\u1107\u1175\u1102\u1175\u11af", "\u1107\u1175\u1103\u116e\u11af\u1100\u1175", "\u1107\u1175\u1103\u1175\u110b\u1169", "\u1107\u1175\u1105\u1169\u1109\u1169", "\u1107\u1175\u1106\u1161\u11ab", "\u1107\u1175\u1106\u1167\u11bc", "\u1107\u1175\u1106\u1175\u11af", "\u1107\u1175\u1107\u1161\u1105\u1161\u11b7", "\u1107\u1175\u1107\u1175\u11b7\u1107\u1161\u11b8", "\u1107\u1175\u1109\u1161\u11bc", "\u1107\u1175\u110b\u116d\u11bc", "\u1107\u1175\u110b\u1172\u11af", "\u1107\u1175\u110c\u116e\u11bc", "\u1107\u1175\u1110\u1161\u1106\u1175\u11ab", "\u1107\u1175\u1111\u1161\u11ab", "\u1107\u1175\u11af\u1103\u1175\u11bc", "\u1107\u1175\u11ba\u1106\u116e\u11af", "\u1107\u1175\u11ba\u1107\u1161\u11bc\u110b\u116e\u11af", "\u1107\u1175\u11ba\u110c\u116e\u11af\u1100\u1175", "\u1107\u1175\u11be\u1101\u1161\u11af", "\u1108\u1161\u11af\u1100\u1161\u11ab\u1109\u1162\u11a8", "\u1108\u1161\u11af\u1105\u1162", "\u1108\u1161\u11af\u1105\u1175", "\u1109\u1161\u1100\u1165\u11ab", "\u1109\u1161\u1100\u1168\u110c\u1165\u11af", "\u1109\u1161\u1102\u1161\u110b\u1175", "\u1109\u1161\u1102\u1163\u11bc", "\u1109\u1161\u1105\u1161\u11b7", "\u1109\u1161\u1105\u1161\u11bc", "\u1109\u1161\u1105\u1175\u11b8", "\u1109\u1161\u1106\u1169\u1102\u1175\u11b7", "\u1109\u1161\u1106\u116e\u11af", "\u1109\u1161\u1107\u1161\u11bc", "\u1109\u1161\u1109\u1161\u11bc", "\u1109\u1161\u1109\u1162\u11bc\u1112\u116a\u11af", "\u1109\u1161\u1109\u1165\u11af", "\u1109\u1161\u1109\u1173\u11b7", "\u1109\u1161\u1109\u1175\u11af", "\u1109\u1161\u110b\u1165\u11b8", "\u1109\u1161\u110b\u116d\u11bc", "\u1109\u1161\u110b\u116f\u11af", "\u1109\u1161\u110c\u1161\u11bc", "\u1109\u1161\u110c\u1165\u11ab", "\u1109\u1161\u110c\u1175\u11ab", "\u1109\u1161\u110e\u1169\u11ab", "\u1109\u1161\u110e\u116e\u11ab\u1100\u1175", "\u1109\u1161\u1110\u1161\u11bc", "\u1109\u1161\u1110\u116e\u1105\u1175", "\u1109\u1161\u1112\u1173\u11af", "\u1109\u1161\u11ab\u1100\u1175\u11af", "\u1109\u1161\u11ab\u1107\u116e\u110b\u1175\u11ab\u1100\u116a", "\u1109\u1161\u11ab\u110b\u1165\u11b8", "\u1109\u1161\u11ab\u110e\u1162\u11a8", "\u1109\u1161\u11af\u1105\u1175\u11b7", "\u1109\u1161\u11af\u110b\u1175\u11ab", "\u1109\u1161\u11af\u110d\u1161\u11a8", "\u1109\u1161\u11b7\u1100\u1168\u1110\u1161\u11bc", "\u1109\u1161\u11b7\u1100\u116e\u11a8", "\u1109\u1161\u11b7\u1109\u1175\u11b8", "\u1109\u1161\u11b7\u110b\u116f\u11af", "\u1109\u1161\u11b7\u110e\u1169\u11ab", "\u1109\u1161\u11bc\u1100\u116a\u11ab", "\u1109\u1161\u11bc\u1100\u1173\u11b7", "\u1109\u1161\u11bc\u1103\u1162", "\u1109\u1161\u11bc\u1105\u1172", "\u1109\u1161\u11bc\u1107\u1161\u11ab\u1100\u1175", "\u1109\u1161\u11bc\u1109\u1161\u11bc", "\u1109\u1161\u11bc\u1109\u1175\u11a8", "\u1109\u1161\u11bc\u110b\u1165\u11b8", "\u1109\u1161\u11bc\u110b\u1175\u11ab", "\u1109\u1161\u11bc\u110c\u1161", "\u1109\u1161\u11bc\u110c\u1165\u11b7", "\u1109\u1161\u11bc\u110e\u1165", "\u1109\u1161\u11bc\u110e\u116e", "\u1109\u1161\u11bc\u1110\u1162", "\u1109\u1161\u11bc\u1111\u116d", "\u1109\u1161\u11bc\u1111\u116e\u11b7", "\u1109\u1161\u11bc\u1112\u116a\u11bc", "\u1109\u1162\u1107\u1167\u11a8", "\u1109\u1162\u11a8\u1101\u1161\u11af", "\u1109\u1162\u11a8\u110b\u1167\u11ab\u1111\u1175\u11af", "\u1109\u1162\u11bc\u1100\u1161\u11a8", "\u1109\u1162\u11bc\u1106\u1167\u11bc", "\u1109\u1162\u11bc\u1106\u116e\u11af", "\u1109\u1162\u11bc\u1107\u1161\u11bc\u1109\u1169\u11bc", "\u1109\u1162\u11bc\u1109\u1161\u11ab", "\u1109\u1162\u11bc\u1109\u1165\u11ab", "\u1109\u1162\u11bc\u1109\u1175\u11ab", "\u1109\u1162\u11bc\u110b\u1175\u11af", "\u1109\u1162\u11bc\u1112\u116a\u11af", "\u1109\u1165\u1105\u1161\u11b8", "\u1109\u1165\u1105\u1173\u11ab", "\u1109\u1165\u1106\u1167\u11bc", "\u1109\u1165\u1106\u1175\u11ab", "\u1109\u1165\u1107\u1175\u1109\u1173", "\u1109\u1165\u110b\u1163\u11bc", "\u1109\u1165\u110b\u116e\u11af", "\u1109\u1165\u110c\u1165\u11a8", "\u1109\u1165\u110c\u1165\u11b7", "\u1109\u1165\u110d\u1169\u11a8", "\u1109\u1165\u110f\u1173\u11af", "\u1109\u1165\u11a8\u1109\u1161", "\u1109\u1165\u11a8\u110b\u1172", "\u1109\u1165\u11ab\u1100\u1165", "\u1109\u1165\u11ab\u1106\u116e\u11af", "\u1109\u1165\u11ab\u1107\u1162", "\u1109\u1165\u11ab\u1109\u1162\u11bc", "\u1109\u1165\u11ab\u1109\u116e", "\u1109\u1165\u11ab\u110b\u116f\u11ab", "\u1109\u1165\u11ab\u110c\u1161\u11bc", "\u1109\u1165\u11ab\u110c\u1165\u11ab", "\u1109\u1165\u11ab\u1110\u1162\u11a8", "\u1109\u1165\u11ab\u1111\u116e\u11bc\u1100\u1175", "\u1109\u1165\u11af\u1100\u1165\u110c\u1175", "\u1109\u1165\u11af\u1102\u1161\u11af", "\u1109\u1165\u11af\u1105\u1165\u11bc\u1110\u1161\u11bc", "\u1109\u1165\u11af\u1106\u1167\u11bc", "\u1109\u1165\u11af\u1106\u116e\u11ab", "\u1109\u1165\u11af\u1109\u1161", "\u1109\u1165\u11af\u110b\u1161\u11a8\u1109\u1161\u11ab", "\u1109\u1165\u11af\u110e\u1175", "\u1109\u1165\u11af\u1110\u1161\u11bc", "\u1109\u1165\u11b8\u110a\u1175", "\u1109\u1165\u11bc\u1100\u1169\u11bc", "\u1109\u1165\u11bc\u1103\u1161\u11bc", "\u1109\u1165\u11bc\u1106\u1167\u11bc", "\u1109\u1165\u11bc\u1107\u1167\u11af", "\u1109\u1165\u11bc\u110b\u1175\u11ab", "\u1109\u1165\u11bc\u110c\u1161\u11bc", "\u1109\u1165\u11bc\u110c\u1165\u11a8", "\u1109\u1165\u11bc\u110c\u1175\u11af", "\u1109\u1165\u11bc\u1112\u1161\u11b7", "\u1109\u1166\u1100\u1173\u11b7", "\u1109\u1166\u1106\u1175\u1102\u1161", "\u1109\u1166\u1109\u1161\u11bc", "\u1109\u1166\u110b\u116f\u11af", "\u1109\u1166\u110c\u1169\u11bc\u1103\u1162\u110b\u116a\u11bc", "\u1109\u1166\u1110\u1161\u11a8", "\u1109\u1166\u11ab\u1110\u1165", "\u1109\u1166\u11ab\u1110\u1175\u1106\u1175\u1110\u1165", "\u1109\u1166\u11ba\u110d\u1162", "\u1109\u1169\u1100\u1172\u1106\u1169", "\u1109\u1169\u1100\u1173\u11a8\u110c\u1165\u11a8", "\u1109\u1169\u1100\u1173\u11b7", "\u1109\u1169\u1102\u1161\u1100\u1175", "\u1109\u1169\u1102\u1167\u11ab", "\u1109\u1169\u1103\u1173\u11a8", "\u1109\u1169\u1106\u1161\u11bc", "\u1109\u1169\u1106\u116e\u11ab", "\u1109\u1169\u1109\u1165\u11af", "\u1109\u1169\u1109\u1169\u11a8", "\u1109\u1169\u110b\u1161\u1100\u116a", "\u1109\u1169\u110b\u116d\u11bc", "\u1109\u1169\u110b\u116f\u11ab", "\u1109\u1169\u110b\u1173\u11b7", "\u1109\u1169\u110c\u116e\u11bc\u1112\u1175", "\u1109\u1169\u110c\u1175\u1111\u116e\u11b7", "\u1109\u1169\u110c\u1175\u11af", "\u1109\u1169\u1111\u116e\u11bc", "\u1109\u1169\u1112\u1167\u11bc", "\u1109\u1169\u11a8\u1103\u1161\u11b7", "\u1109\u1169\u11a8\u1103\u1169", "\u1109\u1169\u11a8\u110b\u1169\u11ba", "\u1109\u1169\u11ab\u1100\u1161\u1105\u1161\u11a8", "\u1109\u1169\u11ab\u1100\u1175\u11af", "\u1109\u1169\u11ab\u1102\u1167", "\u1109\u1169\u11ab\u1102\u1175\u11b7", "\u1109\u1169\u11ab\u1103\u1173\u11bc", "\u1109\u1169\u11ab\u1106\u1169\u11a8", "\u1109\u1169\u11ab\u1108\u1167\u11a8", "\u1109\u1169\u11ab\u1109\u1175\u11af", "\u1109\u1169\u11ab\u110c\u1175\u11af", "\u1109\u1169\u11ab\u1110\u1169\u11b8", "\u1109\u1169\u11ab\u1112\u1162", "\u1109\u1169\u11af\u110c\u1175\u11a8\u1112\u1175", "\u1109\u1169\u11b7\u110a\u1175", "\u1109\u1169\u11bc\u110b\u1161\u110c\u1175", "\u1109\u1169\u11bc\u110b\u1175", "\u1109\u1169\u11bc\u1111\u1167\u11ab", "\u1109\u116c\u1100\u1169\u1100\u1175", "\u1109\u116d\u1111\u1175\u11bc", "\u1109\u116e\u1100\u1165\u11ab", "\u1109\u116e\u1102\u1167\u11ab", "\u1109\u116e\u1103\u1161\u11ab", "\u1109\u116e\u1103\u1169\u11ba\u1106\u116e\u11af", "\u1109\u116e\u1103\u1169\u11bc\u110c\u1165\u11a8", "\u1109\u116e\u1106\u1167\u11ab", "\u1109\u116e\u1106\u1167\u11bc", "\u1109\u116e\u1107\u1161\u11a8", "\u1109\u116e\u1109\u1161\u11bc", "\u1109\u116e\u1109\u1165\u11a8", "\u1109\u116e\u1109\u116e\u11af", "\u1109\u116e\u1109\u1175\u1105\u1169", "\u1109\u116e\u110b\u1165\u11b8", "\u1109\u116e\u110b\u1167\u11b7", "\u1109\u116e\u110b\u1167\u11bc", "\u1109\u116e\u110b\u1175\u11b8", "\u1109\u116e\u110c\u116e\u11ab", "\u1109\u116e\u110c\u1175\u11b8", "\u1109\u116e\u110e\u116e\u11af", "\u1109\u116e\u110f\u1165\u11ba", "\u1109\u116e\u1111\u1175\u11af", "\u1109\u116e\u1112\u1161\u11a8", "\u1109\u116e\u1112\u1165\u11b7\u1109\u1162\u11bc", "\u1109\u116e\u1112\u116a\u1100\u1175", "\u1109\u116e\u11a8\u1102\u1167", "\u1109\u116e\u11a8\u1109\u1169", "\u1109\u116e\u11a8\u110c\u1166", "\u1109\u116e\u11ab\u1100\u1161\u11ab", "\u1109\u116e\u11ab\u1109\u1165", "\u1109\u116e\u11ab\u1109\u116e", "\u1109\u116e\u11ab\u1109\u1175\u11a8\u1100\u1161\u11ab", "\u1109\u116e\u11ab\u110b\u1171", "\u1109\u116e\u11ae\u1100\u1161\u1105\u1161\u11a8", "\u1109\u116e\u11af\u1107\u1167\u11bc", "\u1109\u116e\u11af\u110c\u1175\u11b8", "\u1109\u116e\u11ba\u110c\u1161", "\u1109\u1173\u1102\u1175\u11b7", "\u1109\u1173\u1106\u116e\u11af", "\u1109\u1173\u1109\u1173\u1105\u1169", "\u1109\u1173\u1109\u1173\u11bc", "\u1109\u1173\u110b\u1170\u1110\u1165", "\u1109\u1173\u110b\u1171\u110e\u1175", "\u1109\u1173\u110f\u1166\u110b\u1175\u1110\u1173", "\u1109\u1173\u1110\u1172\u1103\u1175\u110b\u1169", "\u1109\u1173\u1110\u1173\u1105\u1166\u1109\u1173", "\u1109\u1173\u1111\u1169\u110e\u1173", "\u1109\u1173\u11af\u110d\u1165\u11a8", "\u1109\u1173\u11af\u1111\u1173\u11b7", "\u1109\u1173\u11b8\u1100\u116a\u11ab", "\u1109\u1173\u11b8\u1100\u1175", "\u1109\u1173\u11bc\u1100\u1162\u11a8", "\u1109\u1173\u11bc\u1105\u1175", "\u1109\u1173\u11bc\u1107\u116e", "\u1109\u1173\u11bc\u110b\u116d\u11bc\u110e\u1161", "\u1109\u1173\u11bc\u110c\u1175\u11ab", "\u1109\u1175\u1100\u1161\u11a8", "\u1109\u1175\u1100\u1161\u11ab", "\u1109\u1175\u1100\u1169\u11af", "\u1109\u1175\u1100\u1173\u11b7\u110e\u1175", "\u1109\u1175\u1102\u1161\u1105\u1175\u110b\u1169", "\u1109\u1175\u1103\u1162\u11a8", "\u1109\u1175\u1105\u1175\u110c\u1173", "\u1109\u1175\u1106\u1166\u11ab\u1110\u1173", "\u1109\u1175\u1106\u1175\u11ab", "\u1109\u1175\u1107\u116e\u1106\u1169", "\u1109\u1175\u1109\u1165\u11ab", "\u1109\u1175\u1109\u1165\u11af", "\u1109\u1175\u1109\u1173\u1110\u1166\u11b7", "\u1109\u1175\u110b\u1161\u1107\u1165\u110c\u1175", "\u1109\u1175\u110b\u1165\u1106\u1165\u1102\u1175", "\u1109\u1175\u110b\u116f\u11af", "\u1109\u1175\u110b\u1175\u11ab", "\u1109\u1175\u110b\u1175\u11af", "\u1109\u1175\u110c\u1161\u11a8", "\u1109\u1175\u110c\u1161\u11bc", "\u1109\u1175\u110c\u1165\u11af", "\u1109\u1175\u110c\u1165\u11b7", "\u1109\u1175\u110c\u116e\u11bc", "\u1109\u1175\u110c\u1173\u11ab", "\u1109\u1175\u110c\u1175\u11b8", "\u1109\u1175\u110e\u1165\u11bc", "\u1109\u1175\u1112\u1161\u11b8", "\u1109\u1175\u1112\u1165\u11b7", "\u1109\u1175\u11a8\u1100\u116e", "\u1109\u1175\u11a8\u1100\u1175", "\u1109\u1175\u11a8\u1103\u1161\u11bc", "\u1109\u1175\u11a8\u1105\u1163\u11bc", "\u1109\u1175\u11a8\u1105\u116d\u1111\u116e\u11b7", "\u1109\u1175\u11a8\u1106\u116e\u11af", "\u1109\u1175\u11a8\u1108\u1161\u11bc", "\u1109\u1175\u11a8\u1109\u1161", "\u1109\u1175\u11a8\u1109\u1162\u11bc\u1112\u116a\u11af", "\u1109\u1175\u11a8\u110e\u1169", "\u1109\u1175\u11a8\u1110\u1161\u11a8", "\u1109\u1175\u11a8\u1111\u116e\u11b7", "\u1109\u1175\u11ab\u1100\u1169", "\u1109\u1175\u11ab\u1100\u1172", "\u1109\u1175\u11ab\u1102\u1167\u11b7", "\u1109\u1175\u11ab\u1106\u116e\u11ab", "\u1109\u1175\u11ab\u1107\u1161\u11af", "\u1109\u1175\u11ab\u1107\u1175", "\u1109\u1175\u11ab\u1109\u1161", "\u1109\u1175\u11ab\u1109\u1166", "\u1109\u1175\u11ab\u110b\u116d\u11bc", "\u1109\u1175\u11ab\u110c\u1166\u1111\u116e\u11b7", "\u1109\u1175\u11ab\u110e\u1165\u11bc", "\u1109\u1175\u11ab\u110e\u1166", "\u1109\u1175\u11ab\u1112\u116a", "\u1109\u1175\u11af\u1100\u1161\u11b7", "\u1109\u1175\u11af\u1102\u1162", "\u1109\u1175\u11af\u1105\u1167\u11a8", "\u1109\u1175\u11af\u1105\u1168", "\u1109\u1175\u11af\u1106\u1161\u11bc", "\u1109\u1175\u11af\u1109\u116e", "\u1109\u1175\u11af\u1109\u1173\u11b8", "\u1109\u1175\u11af\u1109\u1175", "\u1109\u1175\u11af\u110c\u1161\u11bc", "\u1109\u1175\u11af\u110c\u1165\u11bc", "\u1109\u1175\u11af\u110c\u1175\u11af\u110c\u1165\u11a8", "\u1109\u1175\u11af\u110e\u1165\u11ab", "\u1109\u1175\u11af\u110e\u1166", "\u1109\u1175\u11af\u110f\u1165\u11ba", "\u1109\u1175\u11af\u1110\u1162", "\u1109\u1175\u11af\u1111\u1162", "\u1109\u1175\u11af\u1112\u1165\u11b7", "\u1109\u1175\u11af\u1112\u1167\u11ab", "\u1109\u1175\u11b7\u1105\u1175", "\u1109\u1175\u11b7\u1107\u116e\u1105\u1173\u11b7", "\u1109\u1175\u11b7\u1109\u1161", "\u1109\u1175\u11b7\u110c\u1161\u11bc", "\u1109\u1175\u11b7\u110c\u1165\u11bc", "\u1109\u1175\u11b7\u1111\u1161\u11ab", "\u110a\u1161\u11bc\u1103\u116e\u11bc\u110b\u1175", "\u110a\u1175\u1105\u1173\u11b7", "\u110a\u1175\u110b\u1161\u11ba", "\u110b\u1161\u1100\u1161\u110a\u1175", "\u110b\u1161\u1102\u1161\u110b\u116e\u11ab\u1109\u1165", "\u110b\u1161\u1103\u1173\u1102\u1175\u11b7", "\u110b\u1161\u1103\u1173\u11af", "\u110b\u1161\u1109\u1171\u110b\u116e\u11b7", "\u110b\u1161\u1109\u1173\u1111\u1161\u11af\u1110\u1173", "\u110b\u1161\u1109\u1175\u110b\u1161", "\u110b\u1161\u110b\u116e\u11af\u1105\u1165", "\u110b\u1161\u110c\u1165\u110a\u1175", "\u110b\u1161\u110c\u116e\u11b7\u1106\u1161", "\u110b\u1161\u110c\u1175\u11a8", "\u110b\u1161\u110e\u1175\u11b7", "\u110b\u1161\u1111\u1161\u1110\u1173", "\u110b\u1161\u1111\u1173\u1105\u1175\u110f\u1161", "\u110b\u1161\u1111\u1173\u11b7", "\u110b\u1161\u1112\u1169\u11b8", "\u110b\u1161\u1112\u1173\u11ab", "\u110b\u1161\u11a8\u1100\u1175", "\u110b\u1161\u11a8\u1106\u1169\u11bc", "\u110b\u1161\u11a8\u1109\u116e", "\u110b\u1161\u11ab\u1100\u1162", "\u110b\u1161\u11ab\u1100\u1167\u11bc", "\u110b\u1161\u11ab\u1100\u116a", "\u110b\u1161\u11ab\u1102\u1162", "\u110b\u1161\u11ab\u1102\u1167\u11bc", "\u110b\u1161\u11ab\u1103\u1169\u11bc", "\u110b\u1161\u11ab\u1107\u1161\u11bc", "\u110b\u1161\u11ab\u1107\u116e", "\u110b\u1161\u11ab\u110c\u116e", "\u110b\u1161\u11af\u1105\u116e\u1106\u1175\u1102\u1172\u11b7", "\u110b\u1161\u11af\u110f\u1169\u110b\u1169\u11af", "\u110b\u1161\u11b7\u1109\u1175", "\u110b\u1161\u11b7\u110f\u1165\u11ba", "\u110b\u1161\u11b8\u1105\u1167\u11a8", "\u110b\u1161\u11c1\u1102\u1161\u11af", "\u110b\u1161\u11c1\u1106\u116e\u11ab", "\u110b\u1162\u110b\u1175\u11ab", "\u110b\u1162\u110c\u1165\u11bc", "\u110b\u1162\u11a8\u1109\u116e", "\u110b\u1162\u11af\u1107\u1165\u11b7", "\u110b\u1163\u1100\u1161\u11ab", "\u110b\u1163\u1103\u1161\u11ab", "\u110b\u1163\u110b\u1169\u11bc", "\u110b\u1163\u11a8\u1100\u1161\u11ab", "\u110b\u1163\u11a8\u1100\u116e\u11a8", "\u110b\u1163\u11a8\u1109\u1169\u11a8", "\u110b\u1163\u11a8\u1109\u116e", "\u110b\u1163\u11a8\u110c\u1165\u11b7", "\u110b\u1163\u11a8\u1111\u116e\u11b7", "\u110b\u1163\u11a8\u1112\u1169\u11ab\u1102\u1167", "\u110b\u1163\u11bc\u1102\u1167\u11b7", "\u110b\u1163\u11bc\u1105\u1167\u11a8", "\u110b\u1163\u11bc\u1106\u1161\u11af", "\u110b\u1163\u11bc\u1107\u1162\u110e\u116e", "\u110b\u1163\u11bc\u110c\u116e", "\u110b\u1163\u11bc\u1111\u1161", "\u110b\u1165\u1103\u116e\u11b7", "\u110b\u1165\u1105\u1167\u110b\u116e\u11b7", "\u110b\u1165\u1105\u1173\u11ab", "\u110b\u1165\u110c\u1166\u11ba\u1107\u1161\u11b7", "\u110b\u1165\u110d\u1162\u11bb\u1103\u1173\u11ab", "\u110b\u1165\u110d\u1165\u1103\u1161\u1100\u1161", "\u110b\u1165\u110d\u1165\u11ab\u110c\u1175", "\u110b\u1165\u11ab\u1102\u1175", "\u110b\u1165\u11ab\u1103\u1165\u11a8", "\u110b\u1165\u11ab\u1105\u1169\u11ab", "\u110b\u1165\u11ab\u110b\u1165", "\u110b\u1165\u11af\u1100\u116e\u11af", "\u110b\u1165\u11af\u1105\u1173\u11ab", "\u110b\u1165\u11af\u110b\u1173\u11b7", "\u110b\u1165\u11af\u1111\u1175\u11ba", "\u110b\u1165\u11b7\u1106\u1161", "\u110b\u1165\u11b8\u1106\u116e", "\u110b\u1165\u11b8\u110c\u1169\u11bc", "\u110b\u1165\u11b8\u110e\u1166", "\u110b\u1165\u11bc\u1103\u1165\u11bc\u110b\u1175", "\u110b\u1165\u11bc\u1106\u1161\u11bc", "\u110b\u1165\u11bc\u1110\u1165\u1105\u1175", "\u110b\u1165\u11bd\u1100\u1173\u110c\u1166", "\u110b\u1166\u1102\u1165\u110c\u1175", "\u110b\u1166\u110b\u1165\u110f\u1165\u11ab", "\u110b\u1166\u11ab\u110c\u1175\u11ab", "\u110b\u1167\u1100\u1165\u11ab", "\u110b\u1167\u1100\u1169\u1109\u1162\u11bc", "\u110b\u1167\u1100\u116a\u11ab", "\u110b\u1167\u1100\u116e\u11ab", "\u110b\u1167\u1100\u116f\u11ab", "\u110b\u1167\u1103\u1162\u1109\u1162\u11bc", "\u110b\u1167\u1103\u1165\u11b2", "\u110b\u1167\u1103\u1169\u11bc\u1109\u1162\u11bc", "\u110b\u1167\u1103\u1173\u11ab", "\u110b\u1167\u1105\u1169\u11ab", "\u110b\u1167\u1105\u1173\u11b7", "\u110b\u1167\u1109\u1165\u11ba", "\u110b\u1167\u1109\u1165\u11bc", "\u110b\u1167\u110b\u116a\u11bc", "\u110b\u1167\u110b\u1175\u11ab", "\u110b\u1167\u110c\u1165\u11ab\u1112\u1175", "\u110b\u1167\u110c\u1175\u11a8\u110b\u116f\u11ab", "\u110b\u1167\u1112\u1161\u11a8\u1109\u1162\u11bc", "\u110b\u1167\u1112\u1162\u11bc", "\u110b\u1167\u11a8\u1109\u1161", "\u110b\u1167\u11a8\u1109\u1175", "\u110b\u1167\u11a8\u1112\u1161\u11af", "\u110b\u1167\u11ab\u1100\u1167\u11af", "\u110b\u1167\u11ab\u1100\u116e", "\u110b\u1167\u11ab\u1100\u1173\u11a8", "\u110b\u1167\u11ab\u1100\u1175", "\u110b\u1167\u11ab\u1105\u1161\u11a8", "\u110b\u1167\u11ab\u1109\u1165\u11af", "\u110b\u1167\u11ab\u1109\u1166", "\u110b\u1167\u11ab\u1109\u1169\u11a8", "\u110b\u1167\u11ab\u1109\u1173\u11b8", "\u110b\u1167\u11ab\u110b\u1162", "\u110b\u1167\u11ab\u110b\u1168\u110b\u1175\u11ab", "\u110b\u1167\u11ab\u110b\u1175\u11ab", "\u110b\u1167\u11ab\u110c\u1161\u11bc", "\u110b\u1167\u11ab\u110c\u116e", "\u110b\u1167\u11ab\u110e\u116e\u11af", "\u110b\u1167\u11ab\u1111\u1175\u11af", "\u110b\u1167\u11ab\u1112\u1161\u11b8", "\u110b\u1167\u11ab\u1112\u1172", "\u110b\u1167\u11af\u1100\u1175", "\u110b\u1167\u11af\u1106\u1162", "\u110b\u1167\u11af\u1109\u116c", "\u110b\u1167\u11af\u1109\u1175\u11b7\u1112\u1175", "\u110b\u1167\u11af\u110c\u1165\u11bc", "\u110b\u1167\u11af\u110e\u1161", "\u110b\u1167\u11af\u1112\u1173\u11af", "\u110b\u1167\u11b7\u1105\u1167", "\u110b\u1167\u11b8\u1109\u1165", "\u110b\u1167\u11bc\u1100\u116e\u11a8", "\u110b\u1167\u11bc\u1102\u1161\u11b7", "\u110b\u1167\u11bc\u1109\u1161\u11bc", "\u110b\u1167\u11bc\u110b\u1163\u11bc", "\u110b\u1167\u11bc\u110b\u1167\u11a8", "\u110b\u1167\u11bc\u110b\u116e\u11bc", "\u110b\u1167\u11bc\u110b\u116f\u11ab\u1112\u1175", "\u110b\u1167\u11bc\u1112\u1161", "\u110b\u1167\u11bc\u1112\u1163\u11bc", "\u110b\u1167\u11bc\u1112\u1169\u11ab", "\u110b\u1167\u11bc\u1112\u116a", "\u110b\u1167\u11c1\u1100\u116e\u1105\u1175", "\u110b\u1167\u11c1\u1107\u1161\u11bc", "\u110b\u1167\u11c1\u110c\u1175\u11b8", "\u110b\u1168\u1100\u1161\u11b7", "\u110b\u1168\u1100\u1173\u11b7", "\u110b\u1168\u1107\u1161\u11bc", "\u110b\u1168\u1109\u1161\u11ab", "\u110b\u1168\u1109\u1161\u11bc", "\u110b\u1168\u1109\u1165\u11ab", "\u110b\u1168\u1109\u116e\u11af", "\u110b\u1168\u1109\u1173\u11b8", "\u110b\u1168\u1109\u1175\u11a8\u110c\u1161\u11bc", "\u110b\u1168\u110b\u1163\u11a8", "\u110b\u1168\u110c\u1165\u11ab", "\u110b\u1168\u110c\u1165\u11af", "\u110b\u1168\u110c\u1165\u11bc", "\u110b\u1168\u110f\u1165\u11ab\u1103\u1162", "\u110b\u1168\u11ba\u1102\u1161\u11af", "\u110b\u1169\u1102\u1173\u11af", "\u110b\u1169\u1105\u1161\u11a8", "\u110b\u1169\u1105\u1162\u11ba\u1103\u1169\u11bc\u110b\u1161\u11ab", "\u110b\u1169\u1105\u1166\u11ab\u110c\u1175", "\u110b\u1169\u1105\u1169\u110c\u1175", "\u110b\u1169\u1105\u1173\u11ab\u1107\u1161\u11af", "\u110b\u1169\u1107\u1173\u11ab", "\u110b\u1169\u1109\u1175\u11b8", "\u110b\u1169\u110b\u1167\u11b7", "\u110b\u1169\u110b\u116f\u11af", "\u110b\u1169\u110c\u1165\u11ab", "\u110b\u1169\u110c\u1175\u11a8", "\u110b\u1169\u110c\u1175\u11bc\u110b\u1165", "\u110b\u1169\u1111\u1166\u1105\u1161", "\u110b\u1169\u1111\u1175\u1109\u1173\u1110\u1166\u11af", "\u110b\u1169\u1112\u1175\u1105\u1167", "\u110b\u1169\u11a8\u1109\u1161\u11bc", "\u110b\u1169\u11a8\u1109\u116e\u1109\u116e", "\u110b\u1169\u11ab\u1100\u1161\u11bd", "\u110b\u1169\u11ab\u1105\u1161\u110b\u1175\u11ab", "\u110b\u1169\u11ab\u1106\u1169\u11b7", "\u110b\u1169\u11ab\u110c\u1169\u11bc\u110b\u1175\u11af", "\u110b\u1169\u11ab\u1110\u1169\u11bc", "\u110b\u1169\u11af\u1100\u1161\u110b\u1173\u11af", "\u110b\u1169\u11af\u1105\u1175\u11b7\u1111\u1175\u11a8", "\u110b\u1169\u11af\u1112\u1162", "\u110b\u1169\u11ba\u110e\u1161\u1105\u1175\u11b7", "\u110b\u116a\u110b\u1175\u1109\u1167\u110e\u1173", "\u110b\u116a\u110b\u1175\u11ab", "\u110b\u116a\u11ab\u1109\u1165\u11bc", "\u110b\u116a\u11ab\u110c\u1165\u11ab", "\u110b\u116a\u11bc\u1107\u1175", "\u110b\u116a\u11bc\u110c\u1161", "\u110b\u116b\u1102\u1163\u1112\u1161\u1106\u1167\u11ab", "\u110b\u116b\u11ab\u110c\u1175", "\u110b\u116c\u1100\u1161\u11ba\u110c\u1175\u11b8", "\u110b\u116c\u1100\u116e\u11a8", "\u110b\u116c\u1105\u1169\u110b\u116e\u11b7", "\u110b\u116c\u1109\u1161\u11b7\u110e\u1169\u11ab", "\u110b\u116c\u110e\u116e\u11af", "\u110b\u116c\u110e\u1175\u11b7", "\u110b\u116c\u1112\u1161\u11af\u1106\u1165\u1102\u1175", "\u110b\u116c\u11ab\u1107\u1161\u11af", "\u110b\u116c\u11ab\u1109\u1169\u11ab", "\u110b\u116c\u11ab\u110d\u1169\u11a8", "\u110b\u116d\u1100\u1173\u11b7", "\u110b\u116d\u110b\u1175\u11af", "\u110b\u116d\u110c\u1173\u11b7", "\u110b\u116d\u110e\u1165\u11bc", "\u110b\u116d\u11bc\u1100\u1175", "\u110b\u116d\u11bc\u1109\u1165", "\u110b\u116d\u11bc\u110b\u1165", "\u110b\u116e\u1109\u1161\u11ab", "\u110b\u116e\u1109\u1165\u11ab", "\u110b\u116e\u1109\u1173\u11bc", "\u110b\u116e\u110b\u1167\u11ab\u1112\u1175", "\u110b\u116e\u110c\u1165\u11bc", "\u110b\u116e\u110e\u1166\u1100\u116e\u11a8", "\u110b\u116e\u1111\u1167\u11ab", "\u110b\u116e\u11ab\u1103\u1169\u11bc", "\u110b\u116e\u11ab\u1106\u1167\u11bc", "\u110b\u116e\u11ab\u1107\u1161\u11ab", "\u110b\u116e\u11ab\u110c\u1165\u11ab", "\u110b\u116e\u11ab\u1112\u1162\u11bc", "\u110b\u116e\u11af\u1109\u1161\u11ab", "\u110b\u116e\u11af\u110b\u1173\u11b7", "\u110b\u116e\u11b7\u110c\u1175\u11a8\u110b\u1175\u11b7", "\u110b\u116e\u11ba\u110b\u1165\u1105\u1173\u11ab", "\u110b\u116e\u11ba\u110b\u1173\u11b7", "\u110b\u116f\u1102\u1161\u11a8", "\u110b\u116f\u11ab\u1100\u1169", "\u110b\u116f\u11ab\u1105\u1162", "\u110b\u116f\u11ab\u1109\u1165", "\u110b\u116f\u11ab\u1109\u116e\u11bc\u110b\u1175", "\u110b\u116f\u11ab\u110b\u1175\u11ab", "\u110b\u116f\u11ab\u110c\u1161\u11bc", "\u110b\u116f\u11ab\u1111\u1175\u1109\u1173", "\u110b\u116f\u11af\u1100\u1173\u11b8", "\u110b\u116f\u11af\u1103\u1173\u110f\u1165\u11b8", "\u110b\u116f\u11af\u1109\u1166", "\u110b\u116f\u11af\u110b\u116d\u110b\u1175\u11af", "\u110b\u1170\u110b\u1175\u1110\u1165", "\u110b\u1171\u1107\u1161\u11ab", "\u110b\u1171\u1107\u1165\u11b8", "\u110b\u1171\u1109\u1165\u11bc", "\u110b\u1171\u110b\u116f\u11ab", "\u110b\u1171\u1112\u1165\u11b7", "\u110b\u1171\u1112\u1167\u11b8", "\u110b\u1171\u11ba\u1109\u1161\u1105\u1161\u11b7", "\u110b\u1172\u1102\u1161\u11ab\u1112\u1175", "\u110b\u1172\u1105\u1165\u11b8", "\u110b\u1172\u1106\u1167\u11bc", "\u110b\u1172\u1106\u116e\u11af", "\u110b\u1172\u1109\u1161\u11ab", "\u110b\u1172\u110c\u1165\u11a8", "\u110b\u1172\u110e\u1175\u110b\u116f\u11ab", "\u110b\u1172\u1112\u1161\u11a8", "\u110b\u1172\u1112\u1162\u11bc", "\u110b\u1172\u1112\u1167\u11bc", "\u110b\u1172\u11a8\u1100\u116e\u11ab", "\u110b\u1172\u11a8\u1109\u1161\u11bc", "\u110b\u1172\u11a8\u1109\u1175\u11b8", "\u110b\u1172\u11a8\u110e\u1166", "\u110b\u1173\u11ab\u1112\u1162\u11bc", "\u110b\u1173\u11b7\u1105\u1167\u11a8", "\u110b\u1173\u11b7\u1105\u116d", "\u110b\u1173\u11b7\u1107\u1161\u11ab", "\u110b\u1173\u11b7\u1109\u1165\u11bc", "\u110b\u1173\u11b7\u1109\u1175\u11a8", "\u110b\u1173\u11b7\u110b\u1161\u11a8", "\u110b\u1173\u11b7\u110c\u116e", "\u110b\u1174\u1100\u1167\u11ab", "\u110b\u1174\u1102\u1169\u11ab", "\u110b\u1174\u1106\u116e\u11ab", "\u110b\u1174\u1107\u1169\u11a8", "\u110b\u1174\u1109\u1175\u11a8", "\u110b\u1174\u1109\u1175\u11b7", "\u110b\u1174\u110b\u116c\u1105\u1169", "\u110b\u1174\u110b\u116d\u11a8", "\u110b\u1174\u110b\u116f\u11ab", "\u110b\u1174\u1112\u1161\u11a8", "\u110b\u1175\u1100\u1165\u11ba", "\u110b\u1175\u1100\u1169\u11ba", "\u110b\u1175\u1102\u1167\u11b7", "\u110b\u1175\u1102\u1169\u11b7", "\u110b\u1175\u1103\u1161\u11af", "\u110b\u1175\u1103\u1162\u1105\u1169", "\u110b\u1175\u1103\u1169\u11bc", "\u110b\u1175\u1105\u1165\u11c2\u1100\u1166", "\u110b\u1175\u1105\u1167\u11a8\u1109\u1165", "\u110b\u1175\u1105\u1169\u11ab\u110c\u1165\u11a8", "\u110b\u1175\u1105\u1173\u11b7", "\u110b\u1175\u1106\u1175\u11ab", "\u110b\u1175\u1107\u1161\u11af\u1109\u1169", "\u110b\u1175\u1107\u1167\u11af", "\u110b\u1175\u1107\u116e\u11af", "\u110b\u1175\u1108\u1161\u11af", "\u110b\u1175\u1109\u1161\u11bc", "\u110b\u1175\u1109\u1165\u11bc", "\u110b\u1175\u1109\u1173\u11af", "\u110b\u1175\u110b\u1163\u1100\u1175", "\u110b\u1175\u110b\u116d\u11bc", "\u110b\u1175\u110b\u116e\u11ba", "\u110b\u1175\u110b\u116f\u11af", "\u110b\u1175\u110b\u1173\u11a8\u1100\u1169", "\u110b\u1175\u110b\u1175\u11a8", "\u110b\u1175\u110c\u1165\u11ab", "\u110b\u1175\u110c\u116e\u11bc", "\u110b\u1175\u1110\u1173\u11ae\u1102\u1161\u11af", "\u110b\u1175\u1110\u1173\u11af", "\u110b\u1175\u1112\u1169\u11ab", "\u110b\u1175\u11ab\u1100\u1161\u11ab", "\u110b\u1175\u11ab\u1100\u1167\u11a8", "\u110b\u1175\u11ab\u1100\u1169\u11bc", "\u110b\u1175\u11ab\u1100\u116e", "\u110b\u1175\u11ab\u1100\u1173\u11ab", "\u110b\u1175\u11ab\u1100\u1175", "\u110b\u1175\u11ab\u1103\u1169", "\u110b\u1175\u11ab\u1105\u1172", "\u110b\u1175\u11ab\u1106\u116e\u11af", "\u110b\u1175\u11ab\u1109\u1162\u11bc", "\u110b\u1175\u11ab\u1109\u116b", "\u110b\u1175\u11ab\u110b\u1167\u11ab", "\u110b\u1175\u11ab\u110b\u116f\u11ab", "\u110b\u1175\u11ab\u110c\u1162", "\u110b\u1175\u11ab\u110c\u1169\u11bc", "\u110b\u1175\u11ab\u110e\u1165\u11ab", "\u110b\u1175\u11ab\u110e\u1166", "\u110b\u1175\u11ab\u1110\u1165\u1102\u1166\u11ba", "\u110b\u1175\u11ab\u1112\u1161", "\u110b\u1175\u11ab\u1112\u1167\u11bc", "\u110b\u1175\u11af\u1100\u1169\u11b8", "\u110b\u1175\u11af\u1100\u1175", "\u110b\u1175\u11af\u1103\u1161\u11ab", "\u110b\u1175\u11af\u1103\u1162", "\u110b\u1175\u11af\u1103\u1173\u11bc", "\u110b\u1175\u11af\u1107\u1161\u11ab", "\u110b\u1175\u11af\u1107\u1169\u11ab", "\u110b\u1175\u11af\u1107\u116e", "\u110b\u1175\u11af\u1109\u1161\u11bc", "\u110b\u1175\u11af\u1109\u1162\u11bc", "\u110b\u1175\u11af\u1109\u1169\u11ab", "\u110b\u1175\u11af\u110b\u116d\u110b\u1175\u11af", "\u110b\u1175\u11af\u110b\u116f\u11af", "\u110b\u1175\u11af\u110c\u1165\u11bc", "\u110b\u1175\u11af\u110c\u1169\u11bc", "\u110b\u1175\u11af\u110c\u116e\u110b\u1175\u11af", "\u110b\u1175\u11af\u110d\u1175\u11a8", "\u110b\u1175\u11af\u110e\u1166", "\u110b\u1175\u11af\u110e\u1175", "\u110b\u1175\u11af\u1112\u1162\u11bc", "\u110b\u1175\u11af\u1112\u116c\u110b\u116d\u11bc", "\u110b\u1175\u11b7\u1100\u1173\u11b7", "\u110b\u1175\u11b7\u1106\u116e", "\u110b\u1175\u11b8\u1103\u1162", "\u110b\u1175\u11b8\u1105\u1167\u11a8", "\u110b\u1175\u11b8\u1106\u1161\u11ba", "\u110b\u1175\u11b8\u1109\u1161", "\u110b\u1175\u11b8\u1109\u116e\u11af", "\u110b\u1175\u11b8\u1109\u1175", "\u110b\u1175\u11b8\u110b\u116f\u11ab", "\u110b\u1175\u11b8\u110c\u1161\u11bc", "\u110b\u1175\u11b8\u1112\u1161\u11a8", "\u110c\u1161\u1100\u1161\u110b\u116d\u11bc", "\u110c\u1161\u1100\u1167\u11a8", "\u110c\u1161\u1100\u1173\u11a8", "\u110c\u1161\u1103\u1169\u11bc", "\u110c\u1161\u1105\u1161\u11bc", "\u110c\u1161\u1107\u116e\u1109\u1175\u11b7", "\u110c\u1161\u1109\u1175\u11a8", "\u110c\u1161\u1109\u1175\u11ab", "\u110c\u1161\u110b\u1167\u11ab", "\u110c\u1161\u110b\u116f\u11ab", "\u110c\u1161\u110b\u1172\u11af", "\u110c\u1161\u110c\u1165\u11ab\u1100\u1165", "\u110c\u1161\u110c\u1165\u11bc", "\u110c\u1161\u110c\u1169\u11ab\u1109\u1175\u11b7", "\u110c\u1161\u1111\u1161\u11ab", "\u110c\u1161\u11a8\u1100\u1161", "\u110c\u1161\u11a8\u1102\u1167\u11ab", "\u110c\u1161\u11a8\u1109\u1165\u11bc", "\u110c\u1161\u11a8\u110b\u1165\u11b8", "\u110c\u1161\u11a8\u110b\u116d\u11bc", "\u110c\u1161\u11a8\u110b\u1173\u11ab\u1104\u1161\u11af", "\u110c\u1161\u11a8\u1111\u116e\u11b7", "\u110c\u1161\u11ab\u1103\u1175", "\u110c\u1161\u11ab\u1104\u1173\u11a8", "\u110c\u1161\u11ab\u110e\u1175", "\u110c\u1161\u11af\u1106\u1169\u11ba", "\u110c\u1161\u11b7\u1101\u1161\u11ab", "\u110c\u1161\u11b7\u1109\u116e\u1112\u1161\u11b7", "\u110c\u1161\u11b7\u1109\u1175", "\u110c\u1161\u11b7\u110b\u1169\u11ba", "\u110c\u1161\u11b7\u110c\u1161\u1105\u1175", "\u110c\u1161\u11b8\u110c\u1175", "\u110c\u1161\u11bc\u1100\u116a\u11ab", "\u110c\u1161\u11bc\u1100\u116e\u11ab", "\u110c\u1161\u11bc\u1100\u1175\u1100\u1161\u11ab", "\u110c\u1161\u11bc\u1105\u1162", "\u110c\u1161\u11bc\u1105\u1168", "\u110c\u1161\u11bc\u1105\u1173", "\u110c\u1161\u11bc\u1106\u1161", "\u110c\u1161\u11bc\u1106\u1167\u11ab", "\u110c\u1161\u11bc\u1106\u1169", "\u110c\u1161\u11bc\u1106\u1175", "\u110c\u1161\u11bc\u1107\u1175", "\u110c\u1161\u11bc\u1109\u1161", "\u110c\u1161\u11bc\u1109\u1169", "\u110c\u1161\u11bc\u1109\u1175\u11a8", "\u110c\u1161\u11bc\u110b\u1162\u110b\u1175\u11ab", "\u110c\u1161\u11bc\u110b\u1175\u11ab", "\u110c\u1161\u11bc\u110c\u1165\u11b7", "\u110c\u1161\u11bc\u110e\u1161", "\u110c\u1161\u11bc\u1112\u1161\u11a8\u1100\u1173\u11b7", "\u110c\u1162\u1102\u1173\u11bc", "\u110c\u1162\u1108\u1161\u11af\u1105\u1175", "\u110c\u1162\u1109\u1161\u11ab", "\u110c\u1162\u1109\u1162\u11bc", "\u110c\u1162\u110c\u1161\u11a8\u1102\u1167\u11ab", "\u110c\u1162\u110c\u1165\u11bc", "\u110c\u1162\u110e\u1162\u1100\u1175", "\u110c\u1162\u1111\u1161\u11ab", "\u110c\u1162\u1112\u1161\u11a8", "\u110c\u1162\u1112\u116a\u11af\u110b\u116d\u11bc", "\u110c\u1165\u1100\u1165\u11ba", "\u110c\u1165\u1100\u1169\u1105\u1175", "\u110c\u1165\u1100\u1169\u11ba", "\u110c\u1165\u1102\u1167\u11a8", "\u110c\u1165\u1105\u1165\u11ab", "\u110c\u1165\u1105\u1165\u11c2\u1100\u1166", "\u110c\u1165\u1107\u1165\u11ab", "\u110c\u1165\u110b\u116e\u11af", "\u110c\u1165\u110c\u1165\u11af\u1105\u1169", "\u110c\u1165\u110e\u116e\u11a8", "\u110c\u1165\u11a8\u1100\u1173\u11a8", "\u110c\u1165\u11a8\u1103\u1161\u11bc\u1112\u1175", "\u110c\u1165\u11a8\u1109\u1165\u11bc", "\u110c\u1165\u11a8\u110b\u116d\u11bc", "\u110c\u1165\u11a8\u110b\u1173\u11bc", "\u110c\u1165\u11ab\u1100\u1162", "\u110c\u1165\u11ab\u1100\u1169\u11bc", "\u110c\u1165\u11ab\u1100\u1175", "\u110c\u1165\u11ab\u1103\u1161\u11af", "\u110c\u1165\u11ab\u1105\u1161\u1103\u1169", "\u110c\u1165\u11ab\u1106\u1161\u11bc", "\u110c\u1165\u11ab\u1106\u116e\u11ab", "\u110c\u1165\u11ab\u1107\u1161\u11ab", "\u110c\u1165\u11ab\u1107\u116e", "\u110c\u1165\u11ab\u1109\u1166", "\u110c\u1165\u11ab\u1109\u1175", "\u110c\u1165\u11ab\u110b\u116d\u11bc", "\u110c\u1165\u11ab\u110c\u1161", "\u110c\u1165\u11ab\u110c\u1162\u11bc", "\u110c\u1165\u11ab\u110c\u116e", "\u110c\u1165\u11ab\u110e\u1165\u11af", "\u110c\u1165\u11ab\u110e\u1166", "\u110c\u1165\u11ab\u1110\u1169\u11bc", "\u110c\u1165\u11ab\u1112\u1167", "\u110c\u1165\u11ab\u1112\u116e", "\u110c\u1165\u11af\u1103\u1162", "\u110c\u1165\u11af\u1106\u1161\u11bc", "\u110c\u1165\u11af\u1107\u1161\u11ab", "\u110c\u1165\u11af\u110b\u1163\u11a8", "\u110c\u1165\u11af\u110e\u1161", "\u110c\u1165\u11b7\u1100\u1165\u11b7", "\u110c\u1165\u11b7\u1109\u116e", "\u110c\u1165\u11b7\u1109\u1175\u11b7", "\u110c\u1165\u11b7\u110b\u116f\u11ab", "\u110c\u1165\u11b7\u110c\u1165\u11b7", "\u110c\u1165\u11b7\u110e\u1161", "\u110c\u1165\u11b8\u1100\u1173\u11ab", "\u110c\u1165\u11b8\u1109\u1175", "\u110c\u1165\u11b8\u110e\u1169\u11a8", "\u110c\u1165\u11ba\u1100\u1161\u1105\u1161\u11a8", "\u110c\u1165\u11bc\u1100\u1165\u110c\u1161\u11bc", "\u110c\u1165\u11bc\u1103\u1169", "\u110c\u1165\u11bc\u1105\u1172\u110c\u1161\u11bc", "\u110c\u1165\u11bc\u1105\u1175", "\u110c\u1165\u11bc\u1106\u1161\u11af", "\u110c\u1165\u11bc\u1106\u1167\u11ab", "\u110c\u1165\u11bc\u1106\u116e\u11ab", "\u110c\u1165\u11bc\u1107\u1161\u11ab\u1103\u1162", "\u110c\u1165\u11bc\u1107\u1169", "\u110c\u1165\u11bc\u1107\u116e", "\u110c\u1165\u11bc\u1107\u1175", "\u110c\u1165\u11bc\u1109\u1161\u11bc", "\u110c\u1165\u11bc\u1109\u1165\u11bc", "\u110c\u1165\u11bc\u110b\u1169", "\u110c\u1165\u11bc\u110b\u116f\u11ab", "\u110c\u1165\u11bc\u110c\u1161\u11bc", "\u110c\u1165\u11bc\u110c\u1175", "\u110c\u1165\u11bc\u110e\u1175", "\u110c\u1165\u11bc\u1112\u116a\u11a8\u1112\u1175", "\u110c\u1166\u1100\u1169\u11bc", "\u110c\u1166\u1100\u116a\u110c\u1165\u11b7", "\u110c\u1166\u1103\u1162\u1105\u1169", "\u110c\u1166\u1106\u1169\u11a8", "\u110c\u1166\u1107\u1161\u11af", "\u110c\u1166\u1107\u1165\u11b8", "\u110c\u1166\u1109\u1161\u11ba\u1102\u1161\u11af", "\u110c\u1166\u110b\u1161\u11ab", "\u110c\u1166\u110b\u1175\u11af", "\u110c\u1166\u110c\u1161\u11a8", "\u110c\u1166\u110c\u116e\u1103\u1169", "\u110c\u1166\u110e\u116e\u11af", "\u110c\u1166\u1111\u116e\u11b7", "\u110c\u1166\u1112\u1161\u11ab", "\u110c\u1169\u1100\u1161\u11a8", "\u110c\u1169\u1100\u1165\u11ab", "\u110c\u1169\u1100\u1173\u11b7", "\u110c\u1169\u1100\u1175\u11bc", "\u110c\u1169\u1106\u1167\u11bc", "\u110c\u1169\u1106\u1175\u1105\u116d", "\u110c\u1169\u1109\u1161\u11bc", "\u110c\u1169\u1109\u1165\u11ab", "\u110c\u1169\u110b\u116d\u11bc\u1112\u1175", "\u110c\u1169\u110c\u1165\u11af", "\u110c\u1169\u110c\u1165\u11bc", "\u110c\u1169\u110c\u1175\u11a8", "\u110c\u1169\u11ab\u1103\u1162\u11ba\u1106\u1161\u11af", "\u110c\u1169\u11ab\u110c\u1162", "\u110c\u1169\u11af\u110b\u1165\u11b8", "\u110c\u1169\u11af\u110b\u1173\u11b7", "\u110c\u1169\u11bc\u1100\u116d", "\u110c\u1169\u11bc\u1105\u1169", "\u110c\u1169\u11bc\u1105\u1172", "\u110c\u1169\u11bc\u1109\u1169\u1105\u1175", "\u110c\u1169\u11bc\u110b\u1165\u11b8\u110b\u116f\u11ab", "\u110c\u1169\u11bc\u110c\u1169\u11bc", "\u110c\u1169\u11bc\u1112\u1161\u11b8", "\u110c\u116a\u1109\u1165\u11a8", "\u110c\u116c\u110b\u1175\u11ab", "\u110c\u116e\u1100\u116a\u11ab\u110c\u1165\u11a8", "\u110c\u116e\u1105\u1173\u11b7", "\u110c\u116e\u1106\u1161\u11af", "\u110c\u116e\u1106\u1165\u1102\u1175", "\u110c\u116e\u1106\u1165\u11a8", "\u110c\u116e\u1106\u116e\u11ab", "\u110c\u116e\u1106\u1175\u11ab", "\u110c\u116e\u1107\u1161\u11bc", "\u110c\u116e\u1107\u1167\u11ab", "\u110c\u116e\u1109\u1175\u11a8", "\u110c\u116e\u110b\u1175\u11ab", "\u110c\u116e\u110b\u1175\u11af", "\u110c\u116e\u110c\u1161\u11bc", "\u110c\u116e\u110c\u1165\u11ab\u110c\u1161", "\u110c\u116e\u1110\u1162\u11a8", "\u110c\u116e\u11ab\u1107\u1175", "\u110c\u116e\u11af\u1100\u1165\u1105\u1175", "\u110c\u116e\u11af\u1100\u1175", "\u110c\u116e\u11af\u1106\u116e\u1102\u1174", "\u110c\u116e\u11bc\u1100\u1161\u11ab", "\u110c\u116e\u11bc\u1100\u1168\u1107\u1161\u11bc\u1109\u1169\u11bc", "\u110c\u116e\u11bc\u1100\u116e\u11a8", "\u110c\u116e\u11bc\u1102\u1167\u11ab", "\u110c\u116e\u11bc\u1103\u1161\u11ab", "\u110c\u116e\u11bc\u1103\u1169\u11a8", "\u110c\u116e\u11bc\u1107\u1161\u11ab", "\u110c\u116e\u11bc\u1107\u116e", "\u110c\u116e\u11bc\u1109\u1166", "\u110c\u116e\u11bc\u1109\u1169\u1100\u1175\u110b\u1165\u11b8", "\u110c\u116e\u11bc\u1109\u116e\u11ab", "\u110c\u116e\u11bc\u110b\u1161\u11bc", "\u110c\u116e\u11bc\u110b\u116d", "\u110c\u116e\u11bc\u1112\u1161\u11a8\u1100\u116d", "\u110c\u1173\u11a8\u1109\u1165\u11a8", "\u110c\u1173\u11a8\u1109\u1175", "\u110c\u1173\u11af\u1100\u1165\u110b\u116e\u11b7", "\u110c\u1173\u11bc\u1100\u1161", "\u110c\u1173\u11bc\u1100\u1165", "\u110c\u1173\u11bc\u1100\u116f\u11ab", "\u110c\u1173\u11bc\u1109\u1161\u11bc", "\u110c\u1173\u11bc\u1109\u1166", "\u110c\u1175\u1100\u1161\u11a8", "\u110c\u1175\u1100\u1161\u11b8", "\u110c\u1175\u1100\u1167\u11bc", "\u110c\u1175\u1100\u1173\u11a8\u1112\u1175", "\u110c\u1175\u1100\u1173\u11b7", "\u110c\u1175\u1100\u1173\u11b8", "\u110c\u1175\u1102\u1173\u11bc", "\u110c\u1175\u1105\u1173\u11b7\u1100\u1175\u11af", "\u110c\u1175\u1105\u1175\u1109\u1161\u11ab", "\u110c\u1175\u1107\u1161\u11bc", "\u110c\u1175\u1107\u116e\u11bc", "\u110c\u1175\u1109\u1175\u11a8", "\u110c\u1175\u110b\u1167\u11a8", "\u110c\u1175\u110b\u116e\u1100\u1162", "\u110c\u1175\u110b\u116f\u11ab", "\u110c\u1175\u110c\u1165\u11a8", "\u110c\u1175\u110c\u1165\u11b7", "\u110c\u1175\u110c\u1175\u11ab", "\u110c\u1175\u110e\u116e\u11af", "\u110c\u1175\u11a8\u1109\u1165\u11ab", "\u110c\u1175\u11a8\u110b\u1165\u11b8", "\u110c\u1175\u11a8\u110b\u116f\u11ab", "\u110c\u1175\u11a8\u110c\u1161\u11bc", "\u110c\u1175\u11ab\u1100\u1173\u11b8", "\u110c\u1175\u11ab\u1103\u1169\u11bc", "\u110c\u1175\u11ab\u1105\u1169", "\u110c\u1175\u11ab\u1105\u116d", "\u110c\u1175\u11ab\u1105\u1175", "\u110c\u1175\u11ab\u110d\u1161", "\u110c\u1175\u11ab\u110e\u1161\u11af", "\u110c\u1175\u11ab\u110e\u116e\u11af", "\u110c\u1175\u11ab\u1110\u1169\u11bc", "\u110c\u1175\u11ab\u1112\u1162\u11bc", "\u110c\u1175\u11af\u1106\u116e\u11ab", "\u110c\u1175\u11af\u1107\u1167\u11bc", "\u110c\u1175\u11af\u1109\u1165", "\u110c\u1175\u11b7\u110c\u1161\u11a8", "\u110c\u1175\u11b8\u1103\u1161\u11ab", "\u110c\u1175\u11b8\u110b\u1161\u11ab", "\u110c\u1175\u11b8\u110c\u116e\u11bc", "\u110d\u1161\u110c\u1173\u11bc", "\u110d\u1175\u1101\u1165\u1100\u1175", "\u110e\u1161\u1102\u1161\u11b7", "\u110e\u1161\u1105\u1161\u1105\u1175", "\u110e\u1161\u1105\u1163\u11bc", "\u110e\u1161\u1105\u1175\u11b7", "\u110e\u1161\u1107\u1167\u11af", "\u110e\u1161\u1109\u1165\u11ab", "\u110e\u1161\u110e\u1173\u11b7", "\u110e\u1161\u11a8\u1100\u1161\u11a8", "\u110e\u1161\u11ab\u1106\u116e\u11af", "\u110e\u1161\u11ab\u1109\u1165\u11bc", "\u110e\u1161\u11b7\u1100\u1161", "\u110e\u1161\u11b7\u1100\u1175\u1105\u1173\u11b7", "\u110e\u1161\u11b7\u1109\u1162", "\u110e\u1161\u11b7\u1109\u1165\u11a8", "\u110e\u1161\u11b7\u110b\u1167", "\u110e\u1161\u11b7\u110b\u116c", "\u110e\u1161\u11b7\u110c\u1169", "\u110e\u1161\u11ba\u110c\u1161\u11ab", "\u110e\u1161\u11bc\u1100\u1161", "\u110e\u1161\u11bc\u1100\u1169", "\u110e\u1161\u11bc\u1100\u116e", "\u110e\u1161\u11bc\u1106\u116e\u11ab", "\u110e\u1161\u11bc\u1107\u1161\u11a9", "\u110e\u1161\u11bc\u110c\u1161\u11a8", "\u110e\u1161\u11bc\u110c\u1169", "\u110e\u1162\u1102\u1165\u11af", "\u110e\u1162\u110c\u1165\u11b7", "\u110e\u1162\u11a8\u1100\u1161\u1107\u1161\u11bc", "\u110e\u1162\u11a8\u1107\u1161\u11bc", "\u110e\u1162\u11a8\u1109\u1161\u11bc", "\u110e\u1162\u11a8\u110b\u1175\u11b7", "\u110e\u1162\u11b7\u1111\u1175\u110b\u1165\u11ab", "\u110e\u1165\u1107\u1165\u11af", "\u110e\u1165\u110b\u1173\u11b7", "\u110e\u1165\u11ab\u1100\u116e\u11a8", "\u110e\u1165\u11ab\u1103\u116e\u11bc", "\u110e\u1165\u11ab\u110c\u1161\u11bc", "\u110e\u1165\u11ab\u110c\u1162", "\u110e\u1165\u11ab\u110e\u1165\u11ab\u1112\u1175", "\u110e\u1165\u11af\u1103\u1169", "\u110e\u1165\u11af\u110c\u1165\u1112\u1175", "\u110e\u1165\u11af\u1112\u1161\u11a8", "\u110e\u1165\u11ba\u1102\u1161\u11af", "\u110e\u1165\u11ba\u110d\u1162", "\u110e\u1165\u11bc\u1102\u1167\u11ab", "\u110e\u1165\u11bc\u1107\u1161\u110c\u1175", "\u110e\u1165\u11bc\u1109\u1169", "\u110e\u1165\u11bc\u110e\u116e\u11ab", "\u110e\u1166\u1100\u1168", "\u110e\u1166\u1105\u1167\u11a8", "\u110e\u1166\u110b\u1169\u11ab", "\u110e\u1166\u110b\u1172\u11a8", "\u110e\u1166\u110c\u116e\u11bc", "\u110e\u1166\u1112\u1165\u11b7", "\u110e\u1169\u1103\u1173\u11bc\u1112\u1161\u11a8\u1109\u1162\u11bc", "\u110e\u1169\u1107\u1161\u11ab", "\u110e\u1169\u1107\u1161\u11b8", "\u110e\u1169\u1109\u1161\u11bc\u1112\u116a", "\u110e\u1169\u1109\u116e\u11ab", "\u110e\u1169\u110b\u1167\u1105\u1173\u11b7", "\u110e\u1169\u110b\u116f\u11ab", "\u110e\u1169\u110c\u1165\u1102\u1167\u11a8", "\u110e\u1169\u110c\u1165\u11b7", "\u110e\u1169\u110e\u1165\u11bc", "\u110e\u1169\u110f\u1169\u11af\u1105\u1175\u11ba", "\u110e\u1169\u11ba\u1107\u116e\u11af", "\u110e\u1169\u11bc\u1100\u1161\u11a8", "\u110e\u1169\u11bc\u1105\u1175", "\u110e\u1169\u11bc\u110c\u1161\u11bc", "\u110e\u116a\u11af\u110b\u1167\u11bc", "\u110e\u116c\u1100\u1173\u11ab", "\u110e\u116c\u1109\u1161\u11bc", "\u110e\u116c\u1109\u1165\u11ab", "\u110e\u116c\u1109\u1175\u11ab", "\u110e\u116c\u110b\u1161\u11a8", "\u110e\u116c\u110c\u1169\u11bc", "\u110e\u116e\u1109\u1165\u11a8", "\u110e\u116e\u110b\u1165\u11a8", "\u110e\u116e\u110c\u1175\u11ab", "\u110e\u116e\u110e\u1165\u11ab", "\u110e\u116e\u110e\u1173\u11a8", "\u110e\u116e\u11a8\u1100\u116e", "\u110e\u116e\u11a8\u1109\u1169", "\u110e\u116e\u11a8\u110c\u1166", "\u110e\u116e\u11a8\u1112\u1161", "\u110e\u116e\u11af\u1100\u1173\u11ab", "\u110e\u116e\u11af\u1107\u1161\u11af", "\u110e\u116e\u11af\u1109\u1161\u11ab", "\u110e\u116e\u11af\u1109\u1175\u11ab", "\u110e\u116e\u11af\u110b\u1167\u11ab", "\u110e\u116e\u11af\u110b\u1175\u11b8", "\u110e\u116e\u11af\u110c\u1161\u11bc", "\u110e\u116e\u11af\u1111\u1161\u11ab", "\u110e\u116e\u11bc\u1100\u1167\u11a8", "\u110e\u116e\u11bc\u1100\u1169", "\u110e\u116e\u11bc\u1103\u1169\u11af", "\u110e\u116e\u11bc\u1107\u116e\u11ab\u1112\u1175", "\u110e\u116e\u11bc\u110e\u1165\u11bc\u1103\u1169", "\u110e\u1171\u110b\u1165\u11b8", "\u110e\u1171\u110c\u1175\u11a8", "\u110e\u1171\u1112\u1163\u11bc", "\u110e\u1175\u110b\u1163\u11a8", "\u110e\u1175\u11ab\u1100\u116e", "\u110e\u1175\u11ab\u110e\u1165\u11a8", "\u110e\u1175\u11af\u1109\u1175\u11b8", "\u110e\u1175\u11af\u110b\u116f\u11af", "\u110e\u1175\u11af\u1111\u1161\u11ab", "\u110e\u1175\u11b7\u1103\u1162", "\u110e\u1175\u11b7\u1106\u116e\u11a8", "\u110e\u1175\u11b7\u1109\u1175\u11af", "\u110e\u1175\u11ba\u1109\u1169\u11af", "\u110e\u1175\u11bc\u110e\u1161\u11ab", "\u110f\u1161\u1106\u1166\u1105\u1161", "\u110f\u1161\u110b\u116e\u11ab\u1110\u1165", "\u110f\u1161\u11af\u1100\u116e\u11a8\u1109\u116e", "\u110f\u1162\u1105\u1175\u11a8\u1110\u1165", "\u110f\u1162\u11b7\u1111\u1165\u1109\u1173", "\u110f\u1162\u11b7\u1111\u1166\u110b\u1175\u11ab", "\u110f\u1165\u1110\u1173\u11ab", "\u110f\u1165\u11ab\u1103\u1175\u1109\u1167\u11ab", "\u110f\u1165\u11af\u1105\u1165", "\u110f\u1165\u11b7\u1111\u1172\u1110\u1165", "\u110f\u1169\u1101\u1175\u1105\u1175", "\u110f\u1169\u1106\u1175\u1103\u1175", "\u110f\u1169\u11ab\u1109\u1165\u1110\u1173", "\u110f\u1169\u11af\u1105\u1161", "\u110f\u1169\u11b7\u1111\u1173\u11af\u1105\u1166\u11a8\u1109\u1173", "\u110f\u1169\u11bc\u1102\u1161\u1106\u116e\u11af", "\u110f\u116b\u1100\u1161\u11b7", "\u110f\u116e\u1103\u1166\u1110\u1161", "\u110f\u1173\u1105\u1175\u11b7", "\u110f\u1173\u11ab\u1100\u1175\u11af", "\u110f\u1173\u11ab\u1104\u1161\u11af", "\u110f\u1173\u11ab\u1109\u1169\u1105\u1175", "\u110f\u1173\u11ab\u110b\u1161\u1103\u1173\u11af", "\u110f\u1173\u11ab\u110b\u1165\u1106\u1165\u1102\u1175", "\u110f\u1173\u11ab\u110b\u1175\u11af", "\u110f\u1173\u11ab\u110c\u1165\u11af", "\u110f\u1173\u11af\u1105\u1162\u1109\u1175\u11a8", "\u110f\u1173\u11af\u1105\u1165\u11b8", "\u110f\u1175\u11af\u1105\u1169", "\u1110\u1161\u110b\u1175\u11b8", "\u1110\u1161\u110c\u1161\u1100\u1175", "\u1110\u1161\u11a8\u1100\u116e", "\u1110\u1161\u11a8\u110c\u1161", "\u1110\u1161\u11ab\u1109\u1162\u11bc", "\u1110\u1162\u1100\u116f\u11ab\u1103\u1169", "\u1110\u1162\u110b\u1163\u11bc", "\u1110\u1162\u1111\u116e\u11bc", "\u1110\u1162\u11a8\u1109\u1175", "\u1110\u1162\u11af\u1105\u1165\u11ab\u1110\u1173", "\u1110\u1165\u1102\u1165\u11af", "\u1110\u1165\u1106\u1175\u1102\u1165\u11af", "\u1110\u1166\u1102\u1175\u1109\u1173", "\u1110\u1166\u1109\u1173\u1110\u1173", "\u1110\u1166\u110b\u1175\u1107\u1173\u11af", "\u1110\u1166\u11af\u1105\u1166\u1107\u1175\u110c\u1165\u11ab", "\u1110\u1169\u1105\u1169\u11ab", "\u1110\u1169\u1106\u1161\u1110\u1169", "\u1110\u1169\u110b\u116d\u110b\u1175\u11af", "\u1110\u1169\u11bc\u1100\u1168", "\u1110\u1169\u11bc\u1100\u116a", "\u1110\u1169\u11bc\u1105\u1169", "\u1110\u1169\u11bc\u1109\u1175\u11ab", "\u1110\u1169\u11bc\u110b\u1167\u11a8", "\u1110\u1169\u11bc\u110b\u1175\u11af", "\u1110\u1169\u11bc\u110c\u1161\u11bc", "\u1110\u1169\u11bc\u110c\u1166", "\u1110\u1169\u11bc\u110c\u1173\u11bc", "\u1110\u1169\u11bc\u1112\u1161\u11b8", "\u1110\u1169\u11bc\u1112\u116a", "\u1110\u116c\u1100\u1173\u11ab", "\u1110\u116c\u110b\u116f\u11ab", "\u1110\u116c\u110c\u1175\u11a8\u1100\u1173\u11b7", "\u1110\u1171\u1100\u1175\u11b7", "\u1110\u1173\u1105\u1165\u11a8", "\u1110\u1173\u11a8\u1100\u1173\u11b8", "\u1110\u1173\u11a8\u1107\u1167\u11af", "\u1110\u1173\u11a8\u1109\u1165\u11bc", "\u1110\u1173\u11a8\u1109\u116e", "\u1110\u1173\u11a8\u110c\u1175\u11bc", "\u1110\u1173\u11a8\u1112\u1175", "\u1110\u1173\u11ab\u1110\u1173\u11ab\u1112\u1175", "\u1110\u1175\u1109\u1167\u110e\u1173", "\u1111\u1161\u1105\u1161\u11ab\u1109\u1162\u11a8", "\u1111\u1161\u110b\u1175\u11af", "\u1111\u1161\u110e\u116e\u11af\u1109\u1169", "\u1111\u1161\u11ab\u1100\u1167\u11af", "\u1111\u1161\u11ab\u1103\u1161\u11ab", "\u1111\u1161\u11ab\u1106\u1162", "\u1111\u1161\u11ab\u1109\u1161", "\u1111\u1161\u11af\u1109\u1175\u11b8", "\u1111\u1161\u11af\u110b\u116f\u11af", "\u1111\u1161\u11b8\u1109\u1169\u11bc", "\u1111\u1162\u1109\u1167\u11ab", "\u1111\u1162\u11a8\u1109\u1173", "\u1111\u1162\u11a8\u1109\u1175\u1106\u1175\u11af\u1105\u1175", "\u1111\u1162\u11ab\u1110\u1175", "\u1111\u1165\u1109\u1166\u11ab\u1110\u1173", "\u1111\u1166\u110b\u1175\u11ab\u1110\u1173", "\u1111\u1167\u11ab\u1100\u1167\u11ab", "\u1111\u1167\u11ab\u110b\u1174", "\u1111\u1167\u11ab\u110c\u1175", "\u1111\u1167\u11ab\u1112\u1175", "\u1111\u1167\u11bc\u1100\u1161", "\u1111\u1167\u11bc\u1100\u1172\u11ab", "\u1111\u1167\u11bc\u1109\u1162\u11bc", "\u1111\u1167\u11bc\u1109\u1169", "\u1111\u1167\u11bc\u110b\u1163\u11bc", "\u1111\u1167\u11bc\u110b\u1175\u11af", "\u1111\u1167\u11bc\u1112\u116a", "\u1111\u1169\u1109\u1173\u1110\u1165", "\u1111\u1169\u110b\u1175\u11ab\u1110\u1173", "\u1111\u1169\u110c\u1161\u11bc", "\u1111\u1169\u1112\u1161\u11b7", "\u1111\u116d\u1106\u1167\u11ab", "\u1111\u116d\u110c\u1165\u11bc", "\u1111\u116d\u110c\u116e\u11ab", "\u1111\u116d\u1112\u1167\u11ab", "\u1111\u116e\u11b7\u1106\u1169\u11a8", "\u1111\u116e\u11b7\u110c\u1175\u11af", "\u1111\u116e\u11bc\u1100\u1167\u11bc", "\u1111\u116e\u11bc\u1109\u1169\u11a8", "\u1111\u116e\u11bc\u1109\u1173\u11b8", "\u1111\u1173\u1105\u1161\u11bc\u1109\u1173", "\u1111\u1173\u1105\u1175\u11ab\u1110\u1165", "\u1111\u1173\u11af\u1105\u1161\u1109\u1173\u1110\u1175\u11a8", "\u1111\u1175\u1100\u1169\u11ab", "\u1111\u1175\u1106\u1161\u11bc", "\u1111\u1175\u110b\u1161\u1102\u1169", "\u1111\u1175\u11af\u1105\u1173\u11b7", "\u1111\u1175\u11af\u1109\u116e", "\u1111\u1175\u11af\u110b\u116d", "\u1111\u1175\u11af\u110c\u1161", "\u1111\u1175\u11af\u1110\u1169\u11bc", "\u1111\u1175\u11bc\u1100\u1168", "\u1112\u1161\u1102\u1173\u1102\u1175\u11b7", "\u1112\u1161\u1102\u1173\u11af", "\u1112\u1161\u1103\u1173\u110b\u1170\u110b\u1165", "\u1112\u1161\u1105\u116e\u11ba\u1107\u1161\u11b7", "\u1112\u1161\u1107\u1161\u11ab\u1100\u1175", "\u1112\u1161\u1109\u116e\u11a8\u110c\u1175\u11b8", "\u1112\u1161\u1109\u116e\u11ab", "\u1112\u1161\u110b\u1167\u1110\u1173\u11ab", "\u1112\u1161\u110c\u1175\u1106\u1161\u11ab", "\u1112\u1161\u110e\u1165\u11ab", "\u1112\u1161\u1111\u116e\u11b7", "\u1112\u1161\u1111\u1175\u11af", "\u1112\u1161\u11a8\u1100\u116a", "\u1112\u1161\u11a8\u1100\u116d", "\u1112\u1161\u11a8\u1100\u1173\u11b8", "\u1112\u1161\u11a8\u1100\u1175", "\u1112\u1161\u11a8\u1102\u1167\u11ab", "\u1112\u1161\u11a8\u1105\u1167\u11a8", "\u1112\u1161\u11a8\u1107\u1165\u11ab", "\u1112\u1161\u11a8\u1107\u116e\u1106\u1169", "\u1112\u1161\u11a8\u1107\u1175", "\u1112\u1161\u11a8\u1109\u1162\u11bc", "\u1112\u1161\u11a8\u1109\u116e\u11af", "\u1112\u1161\u11a8\u1109\u1173\u11b8", "\u1112\u1161\u11a8\u110b\u116d\u11bc\u1111\u116e\u11b7", "\u1112\u1161\u11a8\u110b\u116f\u11ab", "\u1112\u1161\u11a8\u110b\u1171", "\u1112\u1161\u11a8\u110c\u1161", "\u1112\u1161\u11a8\u110c\u1165\u11b7", "\u1112\u1161\u11ab\u1100\u1168", "\u1112\u1161\u11ab\u1100\u1173\u11af", "\u1112\u1161\u11ab\u1101\u1165\u1107\u1165\u11ab\u110b\u1166", "\u1112\u1161\u11ab\u1102\u1161\u11bd", "\u1112\u1161\u11ab\u1102\u116e\u11ab", "\u1112\u1161\u11ab\u1103\u1169\u11bc\u110b\u1161\u11ab", "\u1112\u1161\u11ab\u1104\u1162", "\u1112\u1161\u11ab\u1105\u1161\u1109\u1161\u11ab", "\u1112\u1161\u11ab\u1106\u1161\u1103\u1175", "\u1112\u1161\u11ab\u1106\u116e\u11ab", "\u1112\u1161\u11ab\u1107\u1165\u11ab", "\u1112\u1161\u11ab\u1107\u1169\u11a8", "\u1112\u1161\u11ab\u1109\u1175\u11a8", "\u1112\u1161\u11ab\u110b\u1167\u1105\u1173\u11b7", "\u1112\u1161\u11ab\u110d\u1169\u11a8", "\u1112\u1161\u11af\u1106\u1165\u1102\u1175", "\u1112\u1161\u11af\u110b\u1161\u1107\u1165\u110c\u1175", "\u1112\u1161\u11af\u110b\u1175\u11ab", "\u1112\u1161\u11b7\u1101\u1166", "\u1112\u1161\u11b7\u1107\u116e\u1105\u1169", "\u1112\u1161\u11b8\u1100\u1167\u11a8", "\u1112\u1161\u11b8\u1105\u1175\u110c\u1165\u11a8", "\u1112\u1161\u11bc\u1100\u1169\u11bc", "\u1112\u1161\u11bc\u1100\u116e", "\u1112\u1161\u11bc\u1109\u1161\u11bc", "\u1112\u1161\u11bc\u110b\u1174", "\u1112\u1162\u1100\u1167\u11af", "\u1112\u1162\u1100\u116e\u11ab", "\u1112\u1162\u1103\u1161\u11b8", "\u1112\u1162\u1103\u1161\u11bc", "\u1112\u1162\u1106\u116e\u11af", "\u1112\u1162\u1109\u1165\u11a8", "\u1112\u1162\u1109\u1165\u11af", "\u1112\u1162\u1109\u116e\u110b\u116d\u11a8\u110c\u1161\u11bc", "\u1112\u1162\u110b\u1161\u11ab", "\u1112\u1162\u11a8\u1109\u1175\u11b7", "\u1112\u1162\u11ab\u1103\u1173\u1107\u1162\u11a8", "\u1112\u1162\u11b7\u1107\u1165\u1100\u1165", "\u1112\u1162\u11ba\u1107\u1167\u11c0", "\u1112\u1162\u11ba\u1109\u1161\u11af", "\u1112\u1162\u11bc\u1103\u1169\u11bc", "\u1112\u1162\u11bc\u1107\u1169\u11a8", "\u1112\u1162\u11bc\u1109\u1161", "\u1112\u1162\u11bc\u110b\u116e\u11ab", "\u1112\u1162\u11bc\u110b\u1171", "\u1112\u1163\u11bc\u1100\u1175", "\u1112\u1163\u11bc\u1109\u1161\u11bc", "\u1112\u1163\u11bc\u1109\u116e", "\u1112\u1165\u1105\u1161\u11a8", "\u1112\u1165\u110b\u116d\u11bc", "\u1112\u1166\u11af\u1100\u1175", "\u1112\u1167\u11ab\u1100\u116a\u11ab", "\u1112\u1167\u11ab\u1100\u1173\u11b7", "\u1112\u1167\u11ab\u1103\u1162", "\u1112\u1167\u11ab\u1109\u1161\u11bc", "\u1112\u1167\u11ab\u1109\u1175\u11af", "\u1112\u1167\u11ab\u110c\u1161\u11bc", "\u1112\u1167\u11ab\u110c\u1162", "\u1112\u1167\u11ab\u110c\u1175", "\u1112\u1167\u11af\u110b\u1162\u11a8", "\u1112\u1167\u11b8\u1105\u1167\u11a8", "\u1112\u1167\u11bc\u1107\u116e", "\u1112\u1167\u11bc\u1109\u1161", "\u1112\u1167\u11bc\u1109\u116e", "\u1112\u1167\u11bc\u1109\u1175\u11a8", "\u1112\u1167\u11bc\u110c\u1166", "\u1112\u1167\u11bc\u1110\u1162", "\u1112\u1167\u11bc\u1111\u1167\u11ab", "\u1112\u1168\u1110\u1162\u11a8", "\u1112\u1169\u1100\u1175\u1109\u1175\u11b7", "\u1112\u1169\u1102\u1161\u11b7", "\u1112\u1169\u1105\u1161\u11bc\u110b\u1175", "\u1112\u1169\u1107\u1161\u11a8", "\u1112\u1169\u1110\u1166\u11af", "\u1112\u1169\u1112\u1173\u11b8", "\u1112\u1169\u11a8\u1109\u1175", "\u1112\u1169\u11af\u1105\u1169", "\u1112\u1169\u11b7\u1111\u1166\u110b\u1175\u110c\u1175", "\u1112\u1169\u11bc\u1107\u1169", "\u1112\u1169\u11bc\u1109\u116e", "\u1112\u1169\u11bc\u110e\u1161", "\u1112\u116a\u1106\u1167\u11ab", "\u1112\u116a\u1107\u116e\u11ab", "\u1112\u116a\u1109\u1161\u11af", "\u1112\u116a\u110b\u116d\u110b\u1175\u11af", "\u1112\u116a\u110c\u1161\u11bc", "\u1112\u116a\u1112\u1161\u11a8", "\u1112\u116a\u11a8\u1107\u1169", "\u1112\u116a\u11a8\u110b\u1175\u11ab", "\u1112\u116a\u11a8\u110c\u1161\u11bc", "\u1112\u116a\u11a8\u110c\u1165\u11bc", "\u1112\u116a\u11ab\u1100\u1161\u11b8", "\u1112\u116a\u11ab\u1100\u1167\u11bc", "\u1112\u116a\u11ab\u110b\u1167\u11bc", "\u1112\u116a\u11ab\u110b\u1172\u11af", "\u1112\u116a\u11ab\u110c\u1161", "\u1112\u116a\u11af\u1100\u1175", "\u1112\u116a\u11af\u1103\u1169\u11bc", "\u1112\u116a\u11af\u1107\u1161\u11af\u1112\u1175", "\u1112\u116a\u11af\u110b\u116d\u11bc", "\u1112\u116a\u11af\u110d\u1161\u11a8", "\u1112\u116c\u1100\u1167\u11ab", "\u1112\u116c\u1100\u116a\u11ab", "\u1112\u116c\u1107\u1169\u11a8", "\u1112\u116c\u1109\u1162\u11a8", "\u1112\u116c\u110b\u116f\u11ab", "\u1112\u116c\u110c\u1161\u11bc", "\u1112\u116c\u110c\u1165\u11ab", "\u1112\u116c\u11ba\u1109\u116e", "\u1112\u116c\u11bc\u1103\u1161\u11ab\u1107\u1169\u1103\u1169", "\u1112\u116d\u110b\u1172\u11af\u110c\u1165\u11a8", "\u1112\u116e\u1107\u1161\u11ab", "\u1112\u116e\u110e\u116e\u11ba\u1100\u1161\u1105\u116e", "\u1112\u116e\u11ab\u1105\u1167\u11ab", "\u1112\u116f\u11af\u110a\u1175\u11ab", "\u1112\u1172\u1109\u1175\u11a8", "\u1112\u1172\u110b\u1175\u11af", "\u1112\u1172\u11bc\u1102\u1162", "\u1112\u1173\u1105\u1173\u11b7", "\u1112\u1173\u11a8\u1107\u1162\u11a8", "\u1112\u1173\u11a8\u110b\u1175\u11ab", "\u1112\u1173\u11ab\u110c\u1165\u11a8", "\u1112\u1173\u11ab\u1112\u1175", "\u1112\u1173\u11bc\u1106\u1175", "\u1112\u1173\u11bc\u1107\u116e\u11ab", "\u1112\u1174\u1100\u1169\u11a8", "\u1112\u1174\u1106\u1161\u11bc", "\u1112\u1174\u1109\u1162\u11bc", "\u1112\u1174\u11ab\u1109\u1162\u11a8", "\u1112\u1175\u11b7\u1101\u1165\u11ba"]), type$.JSArray_String);
    B.List_cL3 = A._setArrayType(makeConstList([404, 400, 401, 403, 405, 408, 500, 503]), type$.JSArray_int);
    B.SeedTypes_Bip39_0_bip39 = new A.SeedTypes("Bip39", 0, "bip39");
    B.SeedTypes_Bip39Entropy_1_bip39Entropy = new A.SeedTypes("Bip39Entropy", 1, "bip39Entropy");
    B.SeedTypes_ByronLegacySeed_2_byronLegacySeed = new A.SeedTypes("ByronLegacySeed", 2, "byronLegacySeed");
    B.SeedTypes_icarus_3_icarus = new A.SeedTypes("icarus", 3, "icarus");
    B.List_cVj = A._setArrayType(makeConstList([B.SeedTypes_Bip39_0_bip39, B.SeedTypes_Bip39Entropy_1_bip39Entropy, B.SeedTypes_ByronLegacySeed_2_byronLegacySeed, B.SeedTypes_icarus_3_icarus]), A.findType("JSArray<SeedTypes>"));
    B.List_cge = A._setArrayType(makeConstList([B.Bip39Languages_chineseSimplified, B.Bip39Languages_chineseTraditional, B.Bip39Languages_czech, B.Bip39Languages_english, B.Bip39Languages_french, B.Bip39Languages_italian, B.Bip39Languages_korean, B.Bip39Languages_portuguese, B.Bip39Languages_japanese, B.Bip39Languages_spanish]), A.findType("JSArray<Bip39Languages>"));
    B.PubKeyModes_0_0_compressed = new A.PubKeyModes(0, 0, "compressed");
    B.PubKeyModes_1_1_uncompressed = new A.PubKeyModes(1, 1, "uncompressed");
    B.List_chs = A._setArrayType(makeConstList([B.PubKeyModes_0_0_compressed, B.PubKeyModes_1_1_uncompressed]), A.findType("JSArray<PubKeyModes>"));
    B.MoneroAccountIndex_0_0 = new A.MoneroAccountIndex(0, 0);
    B.MoneroAccountIndex_0_1 = new A.MoneroAccountIndex(0, 1);
    B.List_dFo = A._setArrayType(makeConstList([B.MoneroAccountIndex_0_0, B.MoneroAccountIndex_0_1]), A.findType("JSArray<MoneroAccountIndex>"));
    B.List_ePs = A._setArrayType(makeConstList([1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591]), type$.JSArray_dynamic);
    B.WalletRequestMethod_G3R = new A.WalletRequestMethod(B.List_111_3, 0, "signMessage");
    B.WalletRequestMethod_ql0 = new A.WalletRequestMethod(B.List_111_4, 1, "ethereumTypedDataSign");
    B.WalletRequestMethod_ezW = new A.WalletRequestMethod(B.List_111_5, 2, "deriveAddress");
    B.WalletRequestMethod_M2I = new A.WalletRequestMethod(B.List_111_25, 3, "readPublicKeys");
    B.WalletRequestMethod_AmY = new A.WalletRequestMethod(B.List_111_26, 4, "readPrivateKeys");
    B.WalletRequestMethod_69t = new A.WalletRequestMethod(B.List_111_33, 5, "readImportKey");
    B.WalletRequestMethod_L3W = new A.WalletRequestMethod(B.List_111_27, 6, "readMnemonic");
    B.WalletRequestMethod_kyU = new A.WalletRequestMethod(B.List_111_28, 7, "updateWalletKeys");
    B.WalletRequestMethod_kMT = new A.WalletRequestMethod(B.List_111_29, 8, "removeWalletKeys");
    B.WalletRequestMethod_eAf = new A.WalletRequestMethod(B.List_111_40, 9, "walletBackup");
    B.WalletRequestMethod_CR9 = new A.WalletRequestMethod(B.List_111_30, 10, "sign");
    B.WalletRequestMethod_yje = new A.WalletRequestMethod(B.List_111_31, 11, "moneroOutputUnlocker");
    B.List_eVV = A._setArrayType(makeConstList([B.WalletRequestMethod_G3R, B.WalletRequestMethod_ql0, B.WalletRequestMethod_ezW, B.WalletRequestMethod_M2I, B.WalletRequestMethod_AmY, B.WalletRequestMethod_69t, B.WalletRequestMethod_L3W, B.WalletRequestMethod_kyU, B.WalletRequestMethod_kMT, B.WalletRequestMethod_eAf, B.WalletRequestMethod_CR9, B.WalletRequestMethod_yje]), A.findType("JSArray<WalletRequestMethod>"));
    B.List_efI = A._setArrayType(makeConstList(["abaisser", "abandon", "abdiquer", "abeille", "abolir", "aborder", "aboutir", "aboyer", "abrasif", "abreuver", "abriter", "abroger", "abrupt", "absence", "absolu", "absurde", "abusif", "abyssal", "acade\u0301mie", "acajou", "acarien", "accabler", "accepter", "acclamer", "accolade", "accroche", "accuser", "acerbe", "achat", "acheter", "aciduler", "acier", "acompte", "acque\u0301rir", "acronyme", "acteur", "actif", "actuel", "adepte", "ade\u0301quat", "adhe\u0301sif", "adjectif", "adjuger", "admettre", "admirer", "adopter", "adorer", "adoucir", "adresse", "adroit", "adulte", "adverbe", "ae\u0301rer", "ae\u0301ronef", "affaire", "affecter", "affiche", "affreux", "affubler", "agacer", "agencer", "agile", "agiter", "agrafer", "agre\u0301able", "agrume", "aider", "aiguille", "ailier", "aimable", "aisance", "ajouter", "ajuster", "alarmer", "alchimie", "alerte", "alge\u0300bre", "algue", "alie\u0301ner", "aliment", "alle\u0301ger", "alliage", "allouer", "allumer", "alourdir", "alpaga", "altesse", "alve\u0301ole", "amateur", "ambigu", "ambre", "ame\u0301nager", "amertume", "amidon", "amiral", "amorcer", "amour", "amovible", "amphibie", "ampleur", "amusant", "analyse", "anaphore", "anarchie", "anatomie", "ancien", "ane\u0301antir", "angle", "angoisse", "anguleux", "animal", "annexer", "annonce", "annuel", "anodin", "anomalie", "anonyme", "anormal", "antenne", "antidote", "anxieux", "apaiser", "ape\u0301ritif", "aplanir", "apologie", "appareil", "appeler", "apporter", "appuyer", "aquarium", "aqueduc", "arbitre", "arbuste", "ardeur", "ardoise", "argent", "arlequin", "armature", "armement", "armoire", "armure", "arpenter", "arracher", "arriver", "arroser", "arsenic", "arte\u0301riel", "article", "aspect", "asphalte", "aspirer", "assaut", "asservir", "assiette", "associer", "assurer", "asticot", "astre", "astuce", "atelier", "atome", "atrium", "atroce", "attaque", "attentif", "attirer", "attraper", "aubaine", "auberge", "audace", "audible", "augurer", "aurore", "automne", "autruche", "avaler", "avancer", "avarice", "avenir", "averse", "aveugle", "aviateur", "avide", "avion", "aviser", "avoine", "avouer", "avril", "axial", "axiome", "badge", "bafouer", "bagage", "baguette", "baignade", "balancer", "balcon", "baleine", "balisage", "bambin", "bancaire", "bandage", "banlieue", "bannie\u0300re", "banquier", "barbier", "baril", "baron", "barque", "barrage", "bassin", "bastion", "bataille", "bateau", "batterie", "baudrier", "bavarder", "belette", "be\u0301lier", "belote", "be\u0301ne\u0301fice", "berceau", "berger", "berline", "bermuda", "besace", "besogne", "be\u0301tail", "beurre", "biberon", "bicycle", "bidule", "bijou", "bilan", "bilingue", "billard", "binaire", "biologie", "biopsie", "biotype", "biscuit", "bison", "bistouri", "bitume", "bizarre", "blafard", "blague", "blanchir", "blessant", "blinder", "blond", "bloquer", "blouson", "bobard", "bobine", "boire", "boiser", "bolide", "bonbon", "bondir", "bonheur", "bonifier", "bonus", "bordure", "borne", "botte", "boucle", "boueux", "bougie", "boulon", "bouquin", "bourse", "boussole", "boutique", "boxeur", "branche", "brasier", "brave", "brebis", "bre\u0300che", "breuvage", "bricoler", "brigade", "brillant", "brioche", "brique", "brochure", "broder", "bronzer", "brousse", "broyeur", "brume", "brusque", "brutal", "bruyant", "buffle", "buisson", "bulletin", "bureau", "burin", "bustier", "butiner", "butoir", "buvable", "buvette", "cabanon", "cabine", "cachette", "cadeau", "cadre", "cafe\u0301ine", "caillou", "caisson", "calculer", "calepin", "calibre", "calmer", "calomnie", "calvaire", "camarade", "came\u0301ra", "camion", "campagne", "canal", "caneton", "canon", "cantine", "canular", "capable", "caporal", "caprice", "capsule", "capter", "capuche", "carabine", "carbone", "caresser", "caribou", "carnage", "carotte", "carreau", "carton", "cascade", "casier", "casque", "cassure", "causer", "caution", "cavalier", "caverne", "caviar", "ce\u0301dille", "ceinture", "ce\u0301leste", "cellule", "cendrier", "censurer", "central", "cercle", "ce\u0301re\u0301bral", "cerise", "cerner", "cerveau", "cesser", "chagrin", "chaise", "chaleur", "chambre", "chance", "chapitre", "charbon", "chasseur", "chaton", "chausson", "chavirer", "chemise", "chenille", "che\u0301quier", "chercher", "cheval", "chien", "chiffre", "chignon", "chime\u0300re", "chiot", "chlorure", "chocolat", "choisir", "chose", "chouette", "chrome", "chute", "cigare", "cigogne", "cimenter", "cine\u0301ma", "cintrer", "circuler", "cirer", "cirque", "citerne", "citoyen", "citron", "civil", "clairon", "clameur", "claquer", "classe", "clavier", "client", "cligner", "climat", "clivage", "cloche", "clonage", "cloporte", "cobalt", "cobra", "cocasse", "cocotier", "coder", "codifier", "coffre", "cogner", "cohe\u0301sion", "coiffer", "coincer", "cole\u0300re", "colibri", "colline", "colmater", "colonel", "combat", "come\u0301die", "commande", "compact", "concert", "conduire", "confier", "congeler", "connoter", "consonne", "contact", "convexe", "copain", "copie", "corail", "corbeau", "cordage", "corniche", "corpus", "correct", "corte\u0300ge", "cosmique", "costume", "coton", "coude", "coupure", "courage", "couteau", "couvrir", "coyote", "crabe", "crainte", "cravate", "crayon", "cre\u0301ature", "cre\u0301diter", "cre\u0301meux", "creuser", "crevette", "cribler", "crier", "cristal", "crite\u0300re", "croire", "croquer", "crotale", "crucial", "cruel", "crypter", "cubique", "cueillir", "cuille\u0300re", "cuisine", "cuivre", "culminer", "cultiver", "cumuler", "cupide", "curatif", "curseur", "cyanure", "cycle", "cylindre", "cynique", "daigner", "damier", "danger", "danseur", "dauphin", "de\u0301battre", "de\u0301biter", "de\u0301border", "de\u0301brider", "de\u0301butant", "de\u0301caler", "de\u0301cembre", "de\u0301chirer", "de\u0301cider", "de\u0301clarer", "de\u0301corer", "de\u0301crire", "de\u0301cupler", "de\u0301dale", "de\u0301ductif", "de\u0301esse", "de\u0301fensif", "de\u0301filer", "de\u0301frayer", "de\u0301gager", "de\u0301givrer", "de\u0301glutir", "de\u0301grafer", "de\u0301jeuner", "de\u0301lice", "de\u0301loger", "demander", "demeurer", "de\u0301molir", "de\u0301nicher", "de\u0301nouer", "dentelle", "de\u0301nuder", "de\u0301part", "de\u0301penser", "de\u0301phaser", "de\u0301placer", "de\u0301poser", "de\u0301ranger", "de\u0301rober", "de\u0301sastre", "descente", "de\u0301sert", "de\u0301signer", "de\u0301sobe\u0301ir", "dessiner", "destrier", "de\u0301tacher", "de\u0301tester", "de\u0301tourer", "de\u0301tresse", "devancer", "devenir", "deviner", "devoir", "diable", "dialogue", "diamant", "dicter", "diffe\u0301rer", "dige\u0301rer", "digital", "digne", "diluer", "dimanche", "diminuer", "dioxyde", "directif", "diriger", "discuter", "disposer", "dissiper", "distance", "divertir", "diviser", "docile", "docteur", "dogme", "doigt", "domaine", "domicile", "dompter", "donateur", "donjon", "donner", "dopamine", "dortoir", "dorure", "dosage", "doseur", "dossier", "dotation", "douanier", "double", "douceur", "douter", "doyen", "dragon", "draper", "dresser", "dribbler", "droiture", "duperie", "duplexe", "durable", "durcir", "dynastie", "e\u0301blouir", "e\u0301carter", "e\u0301charpe", "e\u0301chelle", "e\u0301clairer", "e\u0301clipse", "e\u0301clore", "e\u0301cluse", "e\u0301cole", "e\u0301conomie", "e\u0301corce", "e\u0301couter", "e\u0301craser", "e\u0301cre\u0301mer", "e\u0301crivain", "e\u0301crou", "e\u0301cume", "e\u0301cureuil", "e\u0301difier", "e\u0301duquer", "effacer", "effectif", "effigie", "effort", "effrayer", "effusion", "e\u0301galiser", "e\u0301garer", "e\u0301jecter", "e\u0301laborer", "e\u0301largir", "e\u0301lectron", "e\u0301le\u0301gant", "e\u0301le\u0301phant", "e\u0301le\u0300ve", "e\u0301ligible", "e\u0301litisme", "e\u0301loge", "e\u0301lucider", "e\u0301luder", "emballer", "embellir", "embryon", "e\u0301meraude", "e\u0301mission", "emmener", "e\u0301motion", "e\u0301mouvoir", "empereur", "employer", "emporter", "emprise", "e\u0301mulsion", "encadrer", "enche\u0300re", "enclave", "encoche", "endiguer", "endosser", "endroit", "enduire", "e\u0301nergie", "enfance", "enfermer", "enfouir", "engager", "engin", "englober", "e\u0301nigme", "enjamber", "enjeu", "enlever", "ennemi", "ennuyeux", "enrichir", "enrobage", "enseigne", "entasser", "entendre", "entier", "entourer", "entraver", "e\u0301nume\u0301rer", "envahir", "enviable", "envoyer", "enzyme", "e\u0301olien", "e\u0301paissir", "e\u0301pargne", "e\u0301patant", "e\u0301paule", "e\u0301picerie", "e\u0301pide\u0301mie", "e\u0301pier", "e\u0301pilogue", "e\u0301pine", "e\u0301pisode", "e\u0301pitaphe", "e\u0301poque", "e\u0301preuve", "e\u0301prouver", "e\u0301puisant", "e\u0301querre", "e\u0301quipe", "e\u0301riger", "e\u0301rosion", "erreur", "e\u0301ruption", "escalier", "espadon", "espe\u0300ce", "espie\u0300gle", "espoir", "esprit", "esquiver", "essayer", "essence", "essieu", "essorer", "estime", "estomac", "estrade", "e\u0301tage\u0300re", "e\u0301taler", "e\u0301tanche", "e\u0301tatique", "e\u0301teindre", "e\u0301tendoir", "e\u0301ternel", "e\u0301thanol", "e\u0301thique", "ethnie", "e\u0301tirer", "e\u0301toffer", "e\u0301toile", "e\u0301tonnant", "e\u0301tourdir", "e\u0301trange", "e\u0301troit", "e\u0301tude", "euphorie", "e\u0301valuer", "e\u0301vasion", "e\u0301ventail", "e\u0301vidence", "e\u0301viter", "e\u0301volutif", "e\u0301voquer", "exact", "exage\u0301rer", "exaucer", "exceller", "excitant", "exclusif", "excuse", "exe\u0301cuter", "exemple", "exercer", "exhaler", "exhorter", "exigence", "exiler", "exister", "exotique", "expe\u0301dier", "explorer", "exposer", "exprimer", "exquis", "extensif", "extraire", "exulter", "fable", "fabuleux", "facette", "facile", "facture", "faiblir", "falaise", "fameux", "famille", "farceur", "farfelu", "farine", "farouche", "fasciner", "fatal", "fatigue", "faucon", "fautif", "faveur", "favori", "fe\u0301brile", "fe\u0301conder", "fe\u0301de\u0301rer", "fe\u0301lin", "femme", "fe\u0301mur", "fendoir", "fe\u0301odal", "fermer", "fe\u0301roce", "ferveur", "festival", "feuille", "feutre", "fe\u0301vrier", "fiasco", "ficeler", "fictif", "fide\u0300le", "figure", "filature", "filetage", "filie\u0300re", "filleul", "filmer", "filou", "filtrer", "financer", "finir", "fiole", "firme", "fissure", "fixer", "flairer", "flamme", "flasque", "flatteur", "fle\u0301au", "fle\u0300che", "fleur", "flexion", "flocon", "flore", "fluctuer", "fluide", "fluvial", "folie", "fonderie", "fongible", "fontaine", "forcer", "forgeron", "formuler", "fortune", "fossile", "foudre", "fouge\u0300re", "fouiller", "foulure", "fourmi", "fragile", "fraise", "franchir", "frapper", "frayeur", "fre\u0301gate", "freiner", "frelon", "fre\u0301mir", "fre\u0301ne\u0301sie", "fre\u0300re", "friable", "friction", "frisson", "frivole", "froid", "fromage", "frontal", "frotter", "fruit", "fugitif", "fuite", "fureur", "furieux", "furtif", "fusion", "futur", "gagner", "galaxie", "galerie", "gambader", "garantir", "gardien", "garnir", "garrigue", "gazelle", "gazon", "ge\u0301ant", "ge\u0301latine", "ge\u0301lule", "gendarme", "ge\u0301ne\u0301ral", "ge\u0301nie", "genou", "gentil", "ge\u0301ologie", "ge\u0301ome\u0300tre", "ge\u0301ranium", "germe", "gestuel", "geyser", "gibier", "gicler", "girafe", "givre", "glace", "glaive", "glisser", "globe", "gloire", "glorieux", "golfeur", "gomme", "gonfler", "gorge", "gorille", "goudron", "gouffre", "goulot", "goupille", "gourmand", "goutte", "graduel", "graffiti", "graine", "grand", "grappin", "gratuit", "gravir", "grenat", "griffure", "griller", "grimper", "grogner", "gronder", "grotte", "groupe", "gruger", "grutier", "gruye\u0300re", "gue\u0301pard", "guerrier", "guide", "guimauve", "guitare", "gustatif", "gymnaste", "gyrostat", "habitude", "hachoir", "halte", "hameau", "hangar", "hanneton", "haricot", "harmonie", "harpon", "hasard", "he\u0301lium", "he\u0301matome", "herbe", "he\u0301risson", "hermine", "he\u0301ron", "he\u0301siter", "heureux", "hiberner", "hibou", "hilarant", "histoire", "hiver", "homard", "hommage", "homoge\u0300ne", "honneur", "honorer", "honteux", "horde", "horizon", "horloge", "hormone", "horrible", "houleux", "housse", "hublot", "huileux", "humain", "humble", "humide", "humour", "hurler", "hydromel", "hygie\u0300ne", "hymne", "hypnose", "idylle", "ignorer", "iguane", "illicite", "illusion", "image", "imbiber", "imiter", "immense", "immobile", "immuable", "impact", "impe\u0301rial", "implorer", "imposer", "imprimer", "imputer", "incarner", "incendie", "incident", "incliner", "incolore", "indexer", "indice", "inductif", "ine\u0301dit", "ineptie", "inexact", "infini", "infliger", "informer", "infusion", "inge\u0301rer", "inhaler", "inhiber", "injecter", "injure", "innocent", "inoculer", "inonder", "inscrire", "insecte", "insigne", "insolite", "inspirer", "instinct", "insulter", "intact", "intense", "intime", "intrigue", "intuitif", "inutile", "invasion", "inventer", "inviter", "invoquer", "ironique", "irradier", "irre\u0301el", "irriter", "isoler", "ivoire", "ivresse", "jaguar", "jaillir", "jambe", "janvier", "jardin", "jauger", "jaune", "javelot", "jetable", "jeton", "jeudi", "jeunesse", "joindre", "joncher", "jongler", "joueur", "jouissif", "journal", "jovial", "joyau", "joyeux", "jubiler", "jugement", "junior", "jupon", "juriste", "justice", "juteux", "juve\u0301nile", "kayak", "kimono", "kiosque", "label", "labial", "labourer", "lace\u0301rer", "lactose", "lagune", "laine", "laisser", "laitier", "lambeau", "lamelle", "lampe", "lanceur", "langage", "lanterne", "lapin", "largeur", "larme", "laurier", "lavabo", "lavoir", "lecture", "le\u0301gal", "le\u0301ger", "le\u0301gume", "lessive", "lettre", "levier", "lexique", "le\u0301zard", "liasse", "libe\u0301rer", "libre", "licence", "licorne", "lie\u0300ge", "lie\u0300vre", "ligature", "ligoter", "ligue", "limer", "limite", "limonade", "limpide", "line\u0301aire", "lingot", "lionceau", "liquide", "lisie\u0300re", "lister", "lithium", "litige", "littoral", "livreur", "logique", "lointain", "loisir", "lombric", "loterie", "louer", "lourd", "loutre", "louve", "loyal", "lubie", "lucide", "lucratif", "lueur", "lugubre", "luisant", "lumie\u0300re", "lunaire", "lundi", "luron", "lutter", "luxueux", "machine", "magasin", "magenta", "magique", "maigre", "maillon", "maintien", "mairie", "maison", "majorer", "malaxer", "male\u0301fice", "malheur", "malice", "mallette", "mammouth", "mandater", "maniable", "manquant", "manteau", "manuel", "marathon", "marbre", "marchand", "mardi", "maritime", "marqueur", "marron", "marteler", "mascotte", "massif", "mate\u0301riel", "matie\u0300re", "matraque", "maudire", "maussade", "mauve", "maximal", "me\u0301chant", "me\u0301connu", "me\u0301daille", "me\u0301decin", "me\u0301diter", "me\u0301duse", "meilleur", "me\u0301lange", "me\u0301lodie", "membre", "me\u0301moire", "menacer", "mener", "menhir", "mensonge", "mentor", "mercredi", "me\u0301rite", "merle", "messager", "mesure", "me\u0301tal", "me\u0301te\u0301ore", "me\u0301thode", "me\u0301tier", "meuble", "miauler", "microbe", "miette", "mignon", "migrer", "milieu", "million", "mimique", "mince", "mine\u0301ral", "minimal", "minorer", "minute", "miracle", "miroiter", "missile", "mixte", "mobile", "moderne", "moelleux", "mondial", "moniteur", "monnaie", "monotone", "monstre", "montagne", "monument", "moqueur", "morceau", "morsure", "mortier", "moteur", "motif", "mouche", "moufle", "moulin", "mousson", "mouton", "mouvant", "multiple", "munition", "muraille", "mure\u0300ne", "murmure", "muscle", "muse\u0301um", "musicien", "mutation", "muter", "mutuel", "myriade", "myrtille", "myste\u0300re", "mythique", "nageur", "nappe", "narquois", "narrer", "natation", "nation", "nature", "naufrage", "nautique", "navire", "ne\u0301buleux", "nectar", "ne\u0301faste", "ne\u0301gation", "ne\u0301gliger", "ne\u0301gocier", "neige", "nerveux", "nettoyer", "neurone", "neutron", "neveu", "niche", "nickel", "nitrate", "niveau", "noble", "nocif", "nocturne", "noirceur", "noisette", "nomade", "nombreux", "nommer", "normatif", "notable", "notifier", "notoire", "nourrir", "nouveau", "novateur", "novembre", "novice", "nuage", "nuancer", "nuire", "nuisible", "nume\u0301ro", "nuptial", "nuque", "nutritif", "obe\u0301ir", "objectif", "obliger", "obscur", "observer", "obstacle", "obtenir", "obturer", "occasion", "occuper", "oce\u0301an", "octobre", "octroyer", "octupler", "oculaire", "odeur", "odorant", "offenser", "officier", "offrir", "ogive", "oiseau", "oisillon", "olfactif", "olivier", "ombrage", "omettre", "onctueux", "onduler", "one\u0301reux", "onirique", "opale", "opaque", "ope\u0301rer", "opinion", "opportun", "opprimer", "opter", "optique", "orageux", "orange", "orbite", "ordonner", "oreille", "organe", "orgueil", "orifice", "ornement", "orque", "ortie", "osciller", "osmose", "ossature", "otarie", "ouragan", "ourson", "outil", "outrager", "ouvrage", "ovation", "oxyde", "oxyge\u0300ne", "ozone", "paisible", "palace", "palmare\u0300s", "palourde", "palper", "panache", "panda", "pangolin", "paniquer", "panneau", "panorama", "pantalon", "papaye", "papier", "papoter", "papyrus", "paradoxe", "parcelle", "paresse", "parfumer", "parler", "parole", "parrain", "parsemer", "partager", "parure", "parvenir", "passion", "paste\u0300que", "paternel", "patience", "patron", "pavillon", "pavoiser", "payer", "paysage", "peigne", "peintre", "pelage", "pe\u0301lican", "pelle", "pelouse", "peluche", "pendule", "pe\u0301ne\u0301trer", "pe\u0301nible", "pensif", "pe\u0301nurie", "pe\u0301pite", "pe\u0301plum", "perdrix", "perforer", "pe\u0301riode", "permuter", "perplexe", "persil", "perte", "peser", "pe\u0301tale", "petit", "pe\u0301trir", "peuple", "pharaon", "phobie", "phoque", "photon", "phrase", "physique", "piano", "pictural", "pie\u0300ce", "pierre", "pieuvre", "pilote", "pinceau", "pipette", "piquer", "pirogue", "piscine", "piston", "pivoter", "pixel", "pizza", "placard", "plafond", "plaisir", "planer", "plaque", "plastron", "plateau", "pleurer", "plexus", "pliage", "plomb", "plonger", "pluie", "plumage", "pochette", "poe\u0301sie", "poe\u0300te", "pointe", "poirier", "poisson", "poivre", "polaire", "policier", "pollen", "polygone", "pommade", "pompier", "ponctuel", "ponde\u0301rer", "poney", "portique", "position", "posse\u0301der", "posture", "potager", "poteau", "potion", "pouce", "poulain", "poumon", "pourpre", "poussin", "pouvoir", "prairie", "pratique", "pre\u0301cieux", "pre\u0301dire", "pre\u0301fixe", "pre\u0301lude", "pre\u0301nom", "pre\u0301sence", "pre\u0301texte", "pre\u0301voir", "primitif", "prince", "prison", "priver", "proble\u0300me", "proce\u0301der", "prodige", "profond", "progre\u0300s", "proie", "projeter", "prologue", "promener", "propre", "prospe\u0300re", "prote\u0301ger", "prouesse", "proverbe", "prudence", "pruneau", "psychose", "public", "puceron", "puiser", "pulpe", "pulsar", "punaise", "punitif", "pupitre", "purifier", "puzzle", "pyramide", "quasar", "querelle", "question", "quie\u0301tude", "quitter", "quotient", "racine", "raconter", "radieux", "ragondin", "raideur", "raisin", "ralentir", "rallonge", "ramasser", "rapide", "rasage", "ratisser", "ravager", "ravin", "rayonner", "re\u0301actif", "re\u0301agir", "re\u0301aliser", "re\u0301animer", "recevoir", "re\u0301citer", "re\u0301clamer", "re\u0301colter", "recruter", "reculer", "recycler", "re\u0301diger", "redouter", "refaire", "re\u0301flexe", "re\u0301former", "refrain", "refuge", "re\u0301galien", "re\u0301gion", "re\u0301glage", "re\u0301gulier", "re\u0301ite\u0301rer", "rejeter", "rejouer", "relatif", "relever", "relief", "remarque", "reme\u0300de", "remise", "remonter", "remplir", "remuer", "renard", "renfort", "renifler", "renoncer", "rentrer", "renvoi", "replier", "reporter", "reprise", "reptile", "requin", "re\u0301serve", "re\u0301sineux", "re\u0301soudre", "respect", "rester", "re\u0301sultat", "re\u0301tablir", "retenir", "re\u0301ticule", "retomber", "retracer", "re\u0301union", "re\u0301ussir", "revanche", "revivre", "re\u0301volte", "re\u0301vulsif", "richesse", "rideau", "rieur", "rigide", "rigoler", "rincer", "riposter", "risible", "risque", "rituel", "rival", "rivie\u0300re", "rocheux", "romance", "rompre", "ronce", "rondin", "roseau", "rosier", "rotatif", "rotor", "rotule", "rouge", "rouille", "rouleau", "routine", "royaume", "ruban", "rubis", "ruche", "ruelle", "rugueux", "ruiner", "ruisseau", "ruser", "rustique", "rythme", "sabler", "saboter", "sabre", "sacoche", "safari", "sagesse", "saisir", "salade", "salive", "salon", "saluer", "samedi", "sanction", "sanglier", "sarcasme", "sardine", "saturer", "saugrenu", "saumon", "sauter", "sauvage", "savant", "savonner", "scalpel", "scandale", "sce\u0301le\u0301rat", "sce\u0301nario", "sceptre", "sche\u0301ma", "science", "scinder", "score", "scrutin", "sculpter", "se\u0301ance", "se\u0301cable", "se\u0301cher", "secouer", "se\u0301cre\u0301ter", "se\u0301datif", "se\u0301duire", "seigneur", "se\u0301jour", "se\u0301lectif", "semaine", "sembler", "semence", "se\u0301minal", "se\u0301nateur", "sensible", "sentence", "se\u0301parer", "se\u0301quence", "serein", "sergent", "se\u0301rieux", "serrure", "se\u0301rum", "service", "se\u0301same", "se\u0301vir", "sevrage", "sextuple", "side\u0301ral", "sie\u0300cle", "sie\u0301ger", "siffler", "sigle", "signal", "silence", "silicium", "simple", "since\u0300re", "sinistre", "siphon", "sirop", "sismique", "situer", "skier", "social", "socle", "sodium", "soigneux", "soldat", "soleil", "solitude", "soluble", "sombre", "sommeil", "somnoler", "sonde", "songeur", "sonnette", "sonore", "sorcier", "sortir", "sosie", "sottise", "soucieux", "soudure", "souffle", "soulever", "soupape", "source", "soutirer", "souvenir", "spacieux", "spatial", "spe\u0301cial", "sphe\u0300re", "spiral", "stable", "station", "sternum", "stimulus", "stipuler", "strict", "studieux", "stupeur", "styliste", "sublime", "substrat", "subtil", "subvenir", "succe\u0300s", "sucre", "suffixe", "sugge\u0301rer", "suiveur", "sulfate", "superbe", "supplier", "surface", "suricate", "surmener", "surprise", "sursaut", "survie", "suspect", "syllabe", "symbole", "syme\u0301trie", "synapse", "syntaxe", "syste\u0300me", "tabac", "tablier", "tactile", "tailler", "talent", "talisman", "talonner", "tambour", "tamiser", "tangible", "tapis", "taquiner", "tarder", "tarif", "tartine", "tasse", "tatami", "tatouage", "taupe", "taureau", "taxer", "te\u0301moin", "temporel", "tenaille", "tendre", "teneur", "tenir", "tension", "terminer", "terne", "terrible", "te\u0301tine", "texte", "the\u0300me", "the\u0301orie", "the\u0301rapie", "thorax", "tibia", "tie\u0300de", "timide", "tirelire", "tiroir", "tissu", "titane", "titre", "tituber", "toboggan", "tole\u0301rant", "tomate", "tonique", "tonneau", "toponyme", "torche", "tordre", "tornade", "torpille", "torrent", "torse", "tortue", "totem", "toucher", "tournage", "tousser", "toxine", "traction", "trafic", "tragique", "trahir", "train", "trancher", "travail", "tre\u0300fle", "tremper", "tre\u0301sor", "treuil", "triage", "tribunal", "tricoter", "trilogie", "triomphe", "tripler", "triturer", "trivial", "trombone", "tronc", "tropical", "troupeau", "tuile", "tulipe", "tumulte", "tunnel", "turbine", "tuteur", "tutoyer", "tuyau", "tympan", "typhon", "typique", "tyran", "ubuesque", "ultime", "ultrason", "unanime", "unifier", "union", "unique", "unitaire", "univers", "uranium", "urbain", "urticant", "usage", "usine", "usuel", "usure", "utile", "utopie", "vacarme", "vaccin", "vagabond", "vague", "vaillant", "vaincre", "vaisseau", "valable", "valise", "vallon", "valve", "vampire", "vanille", "vapeur", "varier", "vaseux", "vassal", "vaste", "vecteur", "vedette", "ve\u0301ge\u0301tal", "ve\u0301hicule", "veinard", "ve\u0301loce", "vendredi", "ve\u0301ne\u0301rer", "venger", "venimeux", "ventouse", "verdure", "ve\u0301rin", "vernir", "verrou", "verser", "vertu", "veston", "ve\u0301te\u0301ran", "ve\u0301tuste", "vexant", "vexer", "viaduc", "viande", "victoire", "vidange", "vide\u0301o", "vignette", "vigueur", "vilain", "village", "vinaigre", "violon", "vipe\u0300re", "virement", "virtuose", "virus", "visage", "viseur", "vision", "visqueux", "visuel", "vital", "vitesse", "viticole", "vitrine", "vivace", "vivipare", "vocation", "voguer", "voile", "voisin", "voiture", "volaille", "volcan", "voltiger", "volume", "vorace", "vortex", "voter", "vouloir", "voyage", "voyelle", "wagon", "xe\u0301non", "yacht", "ze\u0300bre", "ze\u0301nith", "zeste", "zoologie"]), type$.JSArray_String);
    B.List_empty7 = A._setArrayType(makeConstList([]), type$.JSArray_ImportedKeyStorage);
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_List_BigInt);
    B.List_empty1 = A._setArrayType(makeConstList([]), type$.JSArray_List_int);
    B.List_empty2 = A._setArrayType(makeConstList([]), type$.JSArray_Object);
    B.List_empty3 = A._setArrayType(makeConstList([]), type$.JSArray_String);
    B.List_empty5 = A._setArrayType(makeConstList([]), A.findType("JSArray<SubstratePathElem>"));
    B.List_empty4 = A._setArrayType(makeConstList([]), type$.JSArray_int);
    B.List_empty0 = A._setArrayType(makeConstList([]), type$.JSArray_dynamic);
    B.List_g3y = A._setArrayType(makeConstList([B.Bip39WordsNum_12, B.Bip39WordsNum_15, B.Bip39WordsNum_18, B.Bip39WordsNum_21, B.Bip39WordsNum_24]), type$.JSArray_Bip39WordsNum);
    B.List_6FR0 = A._setArrayType(makeConstList([-12815894, -12976347, -21581243, 11784320, -25355658, -2750717, -11717903, -3814571, -358445, -10211303]), type$.JSArray_int);
    B.FieldElement_4QF = new A.FieldElement(B.List_6FR0);
    B.List_OS9 = A._setArrayType(makeConstList([-21703237, 6903825, 27185491, 6451973, -29577724, -9554005, -15616551, 11189268, -26829678, -5319081]), type$.JSArray_int);
    B.FieldElement_U8J = new A.FieldElement(B.List_OS9);
    B.List_8QI = A._setArrayType(makeConstList([26966642, 11152617, 32442495, 15396054, 14353839, -12752335, -3128826, -9541118, -15472047, -4166697]), type$.JSArray_int);
    B.FieldElement_QWu = new A.FieldElement(B.List_8QI);
    B.GroupElementPrecomp_KcK = new A.GroupElementPrecomp(B.FieldElement_4QF, B.FieldElement_U8J, B.FieldElement_QWu);
    B.List_eLD = A._setArrayType(makeConstList([-17036878, 13921892, 10945806, -6033431, 27105052, -16084379, -28926210, 15006023, 3284568, -6276540]), type$.JSArray_int);
    B.FieldElement_0gh = new A.FieldElement(B.List_eLD);
    B.List_Aa9 = A._setArrayType(makeConstList([23599295, -8306047, -11193664, -7687416, 13236774, 10506355, 7464579, 9656445, 13059162, 10374397]), type$.JSArray_int);
    B.FieldElement_U43 = new A.FieldElement(B.List_Aa9);
    B.List_qE5 = A._setArrayType(makeConstList([7798556, 16710257, 3033922, 2874086, 28997861, 2835604, 32406664, -3839045, -641708, -101325]), type$.JSArray_int);
    B.FieldElement_oKA = new A.FieldElement(B.List_qE5);
    B.GroupElementPrecomp_mB5 = new A.GroupElementPrecomp(B.FieldElement_0gh, B.FieldElement_U43, B.FieldElement_oKA);
    B.List_04 = A._setArrayType(makeConstList([-15371964, -12862754, 32573250, 4720197, -26436522, 5875511, -19188627, -15224819, -9818940, -12085777]), type$.JSArray_int);
    B.FieldElement_43h = new A.FieldElement(B.List_04);
    B.List_slV = A._setArrayType(makeConstList([-8549212, 109983, 15149363, 2178705, 22900618, 4543417, 3044240, -15689887, 1762328, 14866737]), type$.JSArray_int);
    B.FieldElement_c4R = new A.FieldElement(B.List_slV);
    B.List_oyU = A._setArrayType(makeConstList([-18199695, -15951423, -10473290, 1707278, -17185920, 3916101, -28236412, 3959421, 27914454, 4383652]), type$.JSArray_int);
    B.FieldElement_gkc0 = new A.FieldElement(B.List_oyU);
    B.GroupElementPrecomp_2fJ = new A.GroupElementPrecomp(B.FieldElement_43h, B.FieldElement_c4R, B.FieldElement_gkc0);
    B.List_zJi = A._setArrayType(makeConstList([14499471, -2729599, -33191113, -4254652, 28494862, 14271267, 30290735, 10876454, -33154098, 2381726]), type$.JSArray_int);
    B.FieldElement_jiY = new A.FieldElement(B.List_zJi);
    B.List_mhX = A._setArrayType(makeConstList([-7195431, -2655363, -14730155, 462251, -27724326, 3941372, -6236617, 3696005, -32300832, 15351955]), type$.JSArray_int);
    B.FieldElement_ClL = new A.FieldElement(B.List_mhX);
    B.List_pVJ = A._setArrayType(makeConstList([27431194, 8222322, 16448760, -3907995, -18707002, 11938355, -32961401, -2970515, 29551813, 10109425]), type$.JSArray_int);
    B.FieldElement_4MR = new A.FieldElement(B.List_pVJ);
    B.GroupElementPrecomp_CEk = new A.GroupElementPrecomp(B.FieldElement_jiY, B.FieldElement_ClL, B.FieldElement_4MR);
    B.List_kiE = A._setArrayType(makeConstList([B.GroupElementPrecomp_ibp, B.GroupElementPrecomp_KcK, B.GroupElementPrecomp_8QI, B.GroupElementPrecomp_mB5, B.GroupElementPrecomp_qOf, B.GroupElementPrecomp_2fJ, B.GroupElementPrecomp_k2M, B.GroupElementPrecomp_CEk]), type$.JSArray_GroupElementPrecomp);
    B.List_AEC = A._setArrayType(makeConstList([-13657040, -13155431, -31283750, 11777098, 21447386, 6519384, -2378284, -1627556, 10092783, -4764171]), type$.JSArray_int);
    B.FieldElement_ax2 = new A.FieldElement(B.List_AEC);
    B.List_gsm = A._setArrayType(makeConstList([27939166, 14210322, 4677035, 16277044, -22964462, -12398139, -32508754, 12005538, -17810127, 12803510]), type$.JSArray_int);
    B.FieldElement_vb0 = new A.FieldElement(B.List_gsm);
    B.List_kjl = A._setArrayType(makeConstList([17228999, -15661624, -1233527, 300140, -1224870, -11714777, 30364213, -9038194, 18016357, 4397660]), type$.JSArray_int);
    B.FieldElement_V2F = new A.FieldElement(B.List_kjl);
    B.GroupElementPrecomp_Mjq = new A.GroupElementPrecomp(B.FieldElement_ax2, B.FieldElement_vb0, B.FieldElement_V2F);
    B.List_67k = A._setArrayType(makeConstList([-10958843, -7690207, 4776341, -14954238, 27850028, -15602212, -26619106, 14544525, -17477504, 982639]), type$.JSArray_int);
    B.FieldElement_Kvm = new A.FieldElement(B.List_67k);
    B.List_K2q = A._setArrayType(makeConstList([29253598, 15796703, -2863982, -9908884, 10057023, 3163536, 7332899, -4120128, -21047696, 9934963]), type$.JSArray_int);
    B.FieldElement_H10 = new A.FieldElement(B.List_K2q);
    B.List_3xj = A._setArrayType(makeConstList([5793303, 16271923, -24131614, -10116404, 29188560, 1206517, -14747930, 4559895, -30123922, -10897950]), type$.JSArray_int);
    B.FieldElement_LFH = new A.FieldElement(B.List_3xj);
    B.GroupElementPrecomp_86y = new A.GroupElementPrecomp(B.FieldElement_Kvm, B.FieldElement_H10, B.FieldElement_LFH);
    B.List_46y0 = A._setArrayType(makeConstList([-27643952, -11493006, 16282657, -11036493, 28414021, -15012264, 24191034, 4541697, -13338309, 5500568]), type$.JSArray_int);
    B.FieldElement_VDm0 = new A.FieldElement(B.List_46y0);
    B.List_AKo = A._setArrayType(makeConstList([12650548, -1497113, 9052871, 11355358, -17680037, -8400164, -17430592, 12264343, 10874051, 13524335]), type$.JSArray_int);
    B.FieldElement_bpf = new A.FieldElement(B.List_AKo);
    B.List_M7P = A._setArrayType(makeConstList([25556948, -3045990, 714651, 2510400, 23394682, -10415330, 33119038, 5080568, -22528059, 5376628]), type$.JSArray_int);
    B.FieldElement_00 = new A.FieldElement(B.List_M7P);
    B.GroupElementPrecomp_HrZ = new A.GroupElementPrecomp(B.FieldElement_VDm0, B.FieldElement_bpf, B.FieldElement_00);
    B.List_z7B = A._setArrayType(makeConstList([-26088264, -4011052, -17013699, -3537628, -6726793, 1920897, -22321305, -9447443, 4535768, 1569007]), type$.JSArray_int);
    B.FieldElement_9hT = new A.FieldElement(B.List_z7B);
    B.List_6tn = A._setArrayType(makeConstList([-2255422, 14606630, -21692440, -8039818, 28430649, 8775819, -30494562, 3044290, 31848280, 12543772]), type$.JSArray_int);
    B.FieldElement_Pa3 = new A.FieldElement(B.List_6tn);
    B.List_J2O = A._setArrayType(makeConstList([-22028579, 2943893, -31857513, 6777306, 13784462, -4292203, -27377195, -2062731, 7718482, 14474653]), type$.JSArray_int);
    B.FieldElement_eRB = new A.FieldElement(B.List_J2O);
    B.GroupElementPrecomp_MYA = new A.GroupElementPrecomp(B.FieldElement_9hT, B.FieldElement_Pa3, B.FieldElement_eRB);
    B.List_i9K = A._setArrayType(makeConstList([2385315, 2454213, -22631320, 46603, -4437935, -15680415, 656965, -7236665, 24316168, -5253567]), type$.JSArray_int);
    B.FieldElement_WqP = new A.FieldElement(B.List_i9K);
    B.List_kTd = A._setArrayType(makeConstList([13741529, 10911568, -33233417, -8603737, -20177830, -1033297, 33040651, -13424532, -20729456, 8321686]), type$.JSArray_int);
    B.FieldElement_I2a = new A.FieldElement(B.List_kTd);
    B.List_AKR = A._setArrayType(makeConstList([21060490, -2212744, 15712757, -4336099, 1639040, 10656336, 23845965, -11874838, -9984458, 608372]), type$.JSArray_int);
    B.FieldElement_wU7 = new A.FieldElement(B.List_AKR);
    B.GroupElementPrecomp_wIU = new A.GroupElementPrecomp(B.FieldElement_WqP, B.FieldElement_I2a, B.FieldElement_wU7);
    B.List_WJv = A._setArrayType(makeConstList([-13672732, -15087586, -10889693, -7557059, -6036909, 11305547, 1123968, -6780577, 27229399, 23887]), type$.JSArray_int);
    B.FieldElement_Isr = new A.FieldElement(B.List_WJv);
    B.List_I2I = A._setArrayType(makeConstList([-23244140, -294205, -11744728, 14712571, -29465699, -2029617, 12797024, -6440308, -1633405, 16678954]), type$.JSArray_int);
    B.FieldElement_1s4 = new A.FieldElement(B.List_I2I);
    B.List_qLB = A._setArrayType(makeConstList([-29500620, 4770662, -16054387, 14001338, 7830047, 9564805, -1508144, -4795045, -17169265, 4904953]), type$.JSArray_int);
    B.FieldElement_WfQ = new A.FieldElement(B.List_qLB);
    B.GroupElementPrecomp_jXu = new A.GroupElementPrecomp(B.FieldElement_Isr, B.FieldElement_1s4, B.FieldElement_WfQ);
    B.List_R8F = A._setArrayType(makeConstList([24059557, 14617003, 19037157, -15039908, 19766093, -14906429, 5169211, 16191880, 2128236, -4326833]), type$.JSArray_int);
    B.FieldElement_BGi = new A.FieldElement(B.List_R8F);
    B.List_Dni = A._setArrayType(makeConstList([-16981152, 4124966, -8540610, -10653797, 30336522, -14105247, -29806336, 916033, -6882542, -2986532]), type$.JSArray_int);
    B.FieldElement_QSU = new A.FieldElement(B.List_Dni);
    B.List_BSc = A._setArrayType(makeConstList([-22630907, 12419372, -7134229, -7473371, -16478904, 16739175, 285431, 2763829, 15736322, 4143876]), type$.JSArray_int);
    B.FieldElement_MTi = new A.FieldElement(B.List_BSc);
    B.GroupElementPrecomp_Phi = new A.GroupElementPrecomp(B.FieldElement_BGi, B.FieldElement_QSU, B.FieldElement_MTi);
    B.List_4QF = A._setArrayType(makeConstList([2379352, 11839345, -4110402, -5988665, 11274298, 794957, 212801, -14594663, 23527084, -16458268]), type$.JSArray_int);
    B.FieldElement_UEW = new A.FieldElement(B.List_4QF);
    B.List_omC = A._setArrayType(makeConstList([33431127, -11130478, -17838966, -15626900, 8909499, 8376530, -32625340, 4087881, -15188911, -14416214]), type$.JSArray_int);
    B.FieldElement_JEK = new A.FieldElement(B.List_omC);
    B.List_gNF = A._setArrayType(makeConstList([1767683, 7197987, -13205226, -2022635, -13091350, 448826, 5799055, 4357868, -4774191, -16323038]), type$.JSArray_int);
    B.FieldElement_8eC = new A.FieldElement(B.List_gNF);
    B.GroupElementPrecomp_ImU = new A.GroupElementPrecomp(B.FieldElement_UEW, B.FieldElement_JEK, B.FieldElement_8eC);
    B.List_Mi7 = A._setArrayType(makeConstList([B.GroupElementPrecomp_Mjq, B.GroupElementPrecomp_86y, B.GroupElementPrecomp_HrZ, B.GroupElementPrecomp_MYA, B.GroupElementPrecomp_wIU, B.GroupElementPrecomp_jXu, B.GroupElementPrecomp_Phi, B.GroupElementPrecomp_ImU]), type$.JSArray_GroupElementPrecomp);
    B.List_MCv = A._setArrayType(makeConstList([6721966, 13833823, -23523388, -1551314, 26354293, -11863321, 23365147, -3949732, 7390890, 2759800]), type$.JSArray_int);
    B.FieldElement_U44 = new A.FieldElement(B.List_MCv);
    B.List_IYE = A._setArrayType(makeConstList([4409041, 2052381, 23373853, 10530217, 7676779, -12885954, 21302353, -4264057, 1244380, -12919645]), type$.JSArray_int);
    B.FieldElement_01 = new A.FieldElement(B.List_IYE);
    B.List_h4h = A._setArrayType(makeConstList([-4421239, 7169619, 4982368, -2957590, 30256825, -2777540, 14086413, 9208236, 15886429, 16489664]), type$.JSArray_int);
    B.FieldElement_kkB = new A.FieldElement(B.List_h4h);
    B.GroupElementPrecomp_gnb = new A.GroupElementPrecomp(B.FieldElement_U44, B.FieldElement_01, B.FieldElement_kkB);
    B.List_4AN0 = A._setArrayType(makeConstList([1996075, 10375649, 14346367, 13311202, -6874135, -16438411, -13693198, 398369, -30606455, -712933]), type$.JSArray_int);
    B.FieldElement_sYh = new A.FieldElement(B.List_4AN0);
    B.List_Yik = A._setArrayType(makeConstList([-25307465, 9795880, -2777414, 14878809, -33531835, 14780363, 13348553, 12076947, -30836462, 5113182]), type$.JSArray_int);
    B.FieldElement_v2F = new A.FieldElement(B.List_Yik);
    B.List_bdS0 = A._setArrayType(makeConstList([-17770784, 11797796, 31950843, 13929123, -25888302, 12288344, -30341101, -7336386, 13847711, 5387222]), type$.JSArray_int);
    B.FieldElement_kWj = new A.FieldElement(B.List_bdS0);
    B.GroupElementPrecomp_VGh = new A.GroupElementPrecomp(B.FieldElement_sYh, B.FieldElement_v2F, B.FieldElement_kWj);
    B.List_ecN = A._setArrayType(makeConstList([-18582163, -3416217, 17824843, -2340966, 22744343, -10442611, 8763061, 3617786, -19600662, 10370991]), type$.JSArray_int);
    B.FieldElement_m6O = new A.FieldElement(B.List_ecN);
    B.List_Glc = A._setArrayType(makeConstList([20246567, -14369378, 22358229, -543712, 18507283, -10413996, 14554437, -8746092, 32232924, 16763880]), type$.JSArray_int);
    B.FieldElement_UZp = new A.FieldElement(B.List_Glc);
    B.List_dpz = A._setArrayType(makeConstList([9648505, 10094563, 26416693, 14745928, -30374318, -6472621, 11094161, 15689506, 3140038, -16510092]), type$.JSArray_int);
    B.FieldElement_qE6 = new A.FieldElement(B.List_dpz);
    B.GroupElementPrecomp_P5w = new A.GroupElementPrecomp(B.FieldElement_m6O, B.FieldElement_UZp, B.FieldElement_qE6);
    B.List_2Rm = A._setArrayType(makeConstList([-16160072, 5472695, 31895588, 4744994, 8823515, 10365685, -27224800, 9448613, -28774454, 366295]), type$.JSArray_int);
    B.FieldElement_61x = new A.FieldElement(B.List_2Rm);
    B.List_LQR = A._setArrayType(makeConstList([19153450, 11523972, -11096490, -6503142, -24647631, 5420647, 28344573, 8041113, 719605, 11671788]), type$.JSArray_int);
    B.FieldElement_Wx0 = new A.FieldElement(B.List_LQR);
    B.List_4QF0 = A._setArrayType(makeConstList([8678025, 2694440, -6808014, 2517372, 4964326, 11152271, -15432916, -15266516, 27000813, -10195553]), type$.JSArray_int);
    B.FieldElement_UEW0 = new A.FieldElement(B.List_4QF0);
    B.GroupElementPrecomp_IeY = new A.GroupElementPrecomp(B.FieldElement_61x, B.FieldElement_Wx0, B.FieldElement_UEW0);
    B.List_yXb = A._setArrayType(makeConstList([-15157904, 7134312, 8639287, -2814877, -7235688, 10421742, 564065, 5336097, 6750977, -14521026]), type$.JSArray_int);
    B.FieldElement_Fb0 = new A.FieldElement(B.List_yXb);
    B.List_yPV = A._setArrayType(makeConstList([11836410, -3979488, 26297894, 16080799, 23455045, 15735944, 1695823, -8819122, 8169720, 16220347]), type$.JSArray_int);
    B.FieldElement_i6P = new A.FieldElement(B.List_yPV);
    B.List_e4R = A._setArrayType(makeConstList([-18115838, 8653647, 17578566, -6092619, -8025777, -16012763, -11144307, -2627664, -5990708, -14166033]), type$.JSArray_int);
    B.FieldElement_42U0 = new A.FieldElement(B.List_e4R);
    B.GroupElementPrecomp_y9B = new A.GroupElementPrecomp(B.FieldElement_Fb0, B.FieldElement_i6P, B.FieldElement_42U0);
    B.List_NlB = A._setArrayType(makeConstList([-23308498, -10968312, 15213228, -10081214, -30853605, -11050004, 27884329, 2847284, 2655861, 1738395]), type$.JSArray_int);
    B.FieldElement_ah9 = new A.FieldElement(B.List_NlB);
    B.List_FKU = A._setArrayType(makeConstList([-27537433, -14253021, -25336301, -8002780, -9370762, 8129821, 21651608, -3239336, -19087449, -11005278]), type$.JSArray_int);
    B.FieldElement_iil = new A.FieldElement(B.List_FKU);
    B.List_qFu = A._setArrayType(makeConstList([1533110, 3437855, 23735889, 459276, 29970501, 11335377, 26030092, 5821408, 10478196, 8544890]), type$.JSArray_int);
    B.FieldElement_Vgo = new A.FieldElement(B.List_qFu);
    B.GroupElementPrecomp_M6P = new A.GroupElementPrecomp(B.FieldElement_ah9, B.FieldElement_iil, B.FieldElement_Vgo);
    B.List_A6W = A._setArrayType(makeConstList([32173121, -16129311, 24896207, 3921497, 22579056, -3410854, 19270449, 12217473, 17789017, -3395995]), type$.JSArray_int);
    B.FieldElement_Cny = new A.FieldElement(B.List_A6W);
    B.List_PbV = A._setArrayType(makeConstList([-30552961, -2228401, -15578829, -10147201, 13243889, 517024, 15479401, -3853233, 30460520, 1052596]), type$.JSArray_int);
    B.FieldElement_Dtd = new A.FieldElement(B.List_PbV);
    B.List_5eO = A._setArrayType(makeConstList([-11614875, 13323618, 32618793, 8175907, -15230173, 12596687, 27491595, -4612359, 3179268, -9478891]), type$.JSArray_int);
    B.FieldElement_eAf = new A.FieldElement(B.List_5eO);
    B.GroupElementPrecomp_PkX = new A.GroupElementPrecomp(B.FieldElement_Cny, B.FieldElement_Dtd, B.FieldElement_eAf);
    B.List_OTv = A._setArrayType(makeConstList([31947069, -14366651, -4640583, -15339921, -15125977, -6039709, -14756777, -16411740, 19072640, -9511060]), type$.JSArray_int);
    B.FieldElement_ClL0 = new A.FieldElement(B.List_OTv);
    B.List_EkK = A._setArrayType(makeConstList([11685058, 11822410, 3158003, -13952594, 33402194, -4165066, 5977896, -5215017, 473099, 5040608]), type$.JSArray_int);
    B.FieldElement_8wH = new A.FieldElement(B.List_EkK);
    B.List_Qm5 = A._setArrayType(makeConstList([-20290863, 8198642, -27410132, 11602123, 1290375, -2799760, 28326862, 1721092, -19558642, -3131606]), type$.JSArray_int);
    B.FieldElement_QTL = new A.FieldElement(B.List_Qm5);
    B.GroupElementPrecomp_c0h = new A.GroupElementPrecomp(B.FieldElement_ClL0, B.FieldElement_8wH, B.FieldElement_QTL);
    B.List_33h = A._setArrayType(makeConstList([B.GroupElementPrecomp_gnb, B.GroupElementPrecomp_VGh, B.GroupElementPrecomp_P5w, B.GroupElementPrecomp_IeY, B.GroupElementPrecomp_y9B, B.GroupElementPrecomp_M6P, B.GroupElementPrecomp_PkX, B.GroupElementPrecomp_c0h]), type$.JSArray_GroupElementPrecomp);
    B.List_oty = A._setArrayType(makeConstList([7881532, 10687937, 7578723, 7738378, -18951012, -2553952, 21820786, 8076149, -27868496, 11538389]), type$.JSArray_int);
    B.FieldElement_5uk = new A.FieldElement(B.List_oty);
    B.List_wIq = A._setArrayType(makeConstList([-19935666, 3899861, 18283497, -6801568, -15728660, -11249211, 8754525, 7446702, -5676054, 5797016]), type$.JSArray_int);
    B.FieldElement_gzW = new A.FieldElement(B.List_wIq);
    B.List_B6W = A._setArrayType(makeConstList([-11295600, -3793569, -15782110, -7964573, 12708869, -8456199, 2014099, -9050574, -2369172, -5877341]), type$.JSArray_int);
    B.FieldElement_Rss = new A.FieldElement(B.List_B6W);
    B.GroupElementPrecomp_2US = new A.GroupElementPrecomp(B.FieldElement_5uk, B.FieldElement_gzW, B.FieldElement_Rss);
    B.List_T36 = A._setArrayType(makeConstList([-22472376, -11568741, -27682020, 1146375, 18956691, 16640559, 1192730, -3714199, 15123619, 10811505]), type$.JSArray_int);
    B.FieldElement_23h = new A.FieldElement(B.List_T36);
    B.List_yhR = A._setArrayType(makeConstList([14352098, -3419715, -18942044, 10822655, 32750596, 4699007, -70363, 15776356, -28886779, -11974553]), type$.JSArray_int);
    B.FieldElement_VSP = new A.FieldElement(B.List_yhR);
    B.List_coI = A._setArrayType(makeConstList([-28241164, -8072475, -4978962, -5315317, 29416931, 1847569, -20654173, -16484855, 4714547, -9600655]), type$.JSArray_int);
    B.FieldElement_efQ = new A.FieldElement(B.List_coI);
    B.GroupElementPrecomp_zzp = new A.GroupElementPrecomp(B.FieldElement_23h, B.FieldElement_VSP, B.FieldElement_efQ);
    B.List_O1c = A._setArrayType(makeConstList([15200332, 8368572, 19679101, 15970074, -31872674, 1959451, 24611599, -4543832, -11745876, 12340220]), type$.JSArray_int);
    B.FieldElement_yHZ = new A.FieldElement(B.List_O1c);
    B.List_Q0N = A._setArrayType(makeConstList([12876937, -10480056, 33134381, 6590940, -6307776, 14872440, 9613953, 8241152, 15370987, 9608631]), type$.JSArray_int);
    B.FieldElement_c4d = new A.FieldElement(B.List_Q0N);
    B.List_4QF1 = A._setArrayType(makeConstList([-4143277, -12014408, 8446281, -391603, 4407738, 13629032, -7724868, 15866074, -28210621, -8814099]), type$.JSArray_int);
    B.FieldElement_UEW1 = new A.FieldElement(B.List_4QF1);
    B.GroupElementPrecomp_aBo = new A.GroupElementPrecomp(B.FieldElement_yHZ, B.FieldElement_c4d, B.FieldElement_UEW1);
    B.List_pmZ = A._setArrayType(makeConstList([26660628, -15677655, 8393734, 358047, -7401291, 992988, -23904233, 858697, 20571223, 8420556]), type$.JSArray_int);
    B.FieldElement_esZ = new A.FieldElement(B.List_pmZ);
    B.List_YN5 = A._setArrayType(makeConstList([14620715, 13067227, -15447274, 8264467, 14106269, 15080814, 33531827, 12516406, -21574435, -12476749]), type$.JSArray_int);
    B.FieldElement_Y12 = new A.FieldElement(B.List_YN5);
    B.List_ZZG = A._setArrayType(makeConstList([236881, 10476226, 57258, -14677024, 6472998, 2466984, 17258519, 7256740, 8791136, 15069930]), type$.JSArray_int);
    B.FieldElement_OLZ = new A.FieldElement(B.List_ZZG);
    B.GroupElementPrecomp_AmY = new A.GroupElementPrecomp(B.FieldElement_esZ, B.FieldElement_Y12, B.FieldElement_OLZ);
    B.List_uUr = A._setArrayType(makeConstList([1276410, -9371918, 22949635, -16322807, -23493039, -5702186, 14711875, 4874229, -30663140, -2331391]), type$.JSArray_int);
    B.FieldElement_btb = new A.FieldElement(B.List_uUr);
    B.List_ePr = A._setArrayType(makeConstList([5855666, 4990204, -13711848, 7294284, -7804282, 1924647, -1423175, -7912378, -33069337, 9234253]), type$.JSArray_int);
    B.FieldElement_b44 = new A.FieldElement(B.List_ePr);
    B.List_gnE = A._setArrayType(makeConstList([20590503, -9018988, 31529744, -7352666, -2706834, 10650548, 31559055, -11609587, 18979186, 13396066]), type$.JSArray_int);
    B.FieldElement_MPa = new A.FieldElement(B.List_gnE);
    B.GroupElementPrecomp_Khs = new A.GroupElementPrecomp(B.FieldElement_btb, B.FieldElement_b44, B.FieldElement_MPa);
    B.List_cWd = A._setArrayType(makeConstList([24474287, 4968103, 22267082, 4407354, 24063882, -8325180, -18816887, 13594782, 33514650, 7021958]), type$.JSArray_int);
    B.FieldElement_av3 = new A.FieldElement(B.List_cWd);
    B.List_A8D = A._setArrayType(makeConstList([-11566906, -6565505, -21365085, 15928892, -26158305, 4315421, -25948728, -3916677, -21480480, 12868082]), type$.JSArray_int);
    B.FieldElement_kn0 = new A.FieldElement(B.List_A8D);
    B.List_pxt = A._setArrayType(makeConstList([-28635013, 13504661, 19988037, -2132761, 21078225, 6443208, -21446107, 2244500, -12455797, -8089383]), type$.JSArray_int);
    B.FieldElement_DpJ = new A.FieldElement(B.List_pxt);
    B.GroupElementPrecomp_Ti8 = new A.GroupElementPrecomp(B.FieldElement_av3, B.FieldElement_kn0, B.FieldElement_DpJ);
    B.List_sKi = A._setArrayType(makeConstList([-30595528, 13793479, -5852820, 319136, -25723172, -6263899, 33086546, 8957937, -15233648, 5540521]), type$.JSArray_int);
    B.FieldElement_OzL = new A.FieldElement(B.List_sKi);
    B.List_OWh = A._setArrayType(makeConstList([-11630176, -11503902, -8119500, -7643073, 2620056, 1022908, -23710744, -1568984, -16128528, -14962807]), type$.JSArray_int);
    B.FieldElement_8sC = new A.FieldElement(B.List_OWh);
    B.List_Qe4 = A._setArrayType(makeConstList([23152971, 775386, 27395463, 14006635, -9701118, 4649512, 1689819, 892185, -11513277, -15205948]), type$.JSArray_int);
    B.FieldElement_zvO = new A.FieldElement(B.List_Qe4);
    B.GroupElementPrecomp_hWj = new A.GroupElementPrecomp(B.FieldElement_OzL, B.FieldElement_8sC, B.FieldElement_zvO);
    B.List_soU = A._setArrayType(makeConstList([9770129, 9586738, 26496094, 4324120, 1556511, -3550024, 27453819, 4763127, -19179614, 5867134]), type$.JSArray_int);
    B.FieldElement_izR = new A.FieldElement(B.List_soU);
    B.List_rBb = A._setArrayType(makeConstList([-32765025, 1927590, 31726409, -4753295, 23962434, -16019500, 27846559, 5931263, -29749703, -16108455]), type$.JSArray_int);
    B.FieldElement_yzp = new A.FieldElement(B.List_rBb);
    B.List_06K = A._setArrayType(makeConstList([27461885, -2977536, 22380810, 1815854, -23033753, -3031938, 7283490, -15148073, -19526700, 7734629]), type$.JSArray_int);
    B.FieldElement_IkA = new A.FieldElement(B.List_06K);
    B.GroupElementPrecomp_USq = new A.GroupElementPrecomp(B.FieldElement_izR, B.FieldElement_yzp, B.FieldElement_IkA);
    B.List_UOR = A._setArrayType(makeConstList([B.GroupElementPrecomp_2US, B.GroupElementPrecomp_zzp, B.GroupElementPrecomp_aBo, B.GroupElementPrecomp_AmY, B.GroupElementPrecomp_Khs, B.GroupElementPrecomp_Ti8, B.GroupElementPrecomp_hWj, B.GroupElementPrecomp_USq]), type$.JSArray_GroupElementPrecomp);
    B.List_qwi = A._setArrayType(makeConstList([-8010264, -9590817, -11120403, 6196038, 29344158, -13430885, 7585295, -3176626, 18549497, 15302069]), type$.JSArray_int);
    B.FieldElement_USr = new A.FieldElement(B.List_qwi);
    B.List_69N = A._setArrayType(makeConstList([-32658337, -6171222, -7672793, -11051681, 6258878, 13504381, 10458790, -6418461, -8872242, 8424746]), type$.JSArray_int);
    B.FieldElement_kQZ = new A.FieldElement(B.List_69N);
    B.List_E34 = A._setArrayType(makeConstList([24687205, 8613276, -30667046, -3233545, 1863892, -1830544, 19206234, 7134917, -11284482, -828919]), type$.JSArray_int);
    B.FieldElement_Asa = new A.FieldElement(B.List_E34);
    B.GroupElementPrecomp_ww8 = new A.GroupElementPrecomp(B.FieldElement_USr, B.FieldElement_kQZ, B.FieldElement_Asa);
    B.List_ASD = A._setArrayType(makeConstList([11334899, -9218022, 8025293, 12707519, 17523892, -10476071, 10243738, -14685461, -5066034, 16498837]), type$.JSArray_int);
    B.FieldElement_rLB = new A.FieldElement(B.List_ASD);
    B.List_bWd = A._setArrayType(makeConstList([8911542, 6887158, -9584260, -6958590, 11145641, -9543680, 17303925, -14124238, 6536641, 10543906]), type$.JSArray_int);
    B.FieldElement_7J0 = new A.FieldElement(B.List_bWd);
    B.List_Vvc = A._setArrayType(makeConstList([-28946384, 15479763, -17466835, 568876, -1497683, 11223454, -2669190, -16625574, -27235709, 8876771]), type$.JSArray_int);
    B.FieldElement_Kpz = new A.FieldElement(B.List_Vvc);
    B.GroupElementPrecomp_3p9 = new A.GroupElementPrecomp(B.FieldElement_rLB, B.FieldElement_7J0, B.FieldElement_Kpz);
    B.List_SBP = A._setArrayType(makeConstList([-25742899, -12566864, -15649966, -846607, -33026686, -796288, -33481822, 15824474, -604426, -9039817]), type$.JSArray_int);
    B.FieldElement_WfU = new A.FieldElement(B.List_SBP);
    B.List_ACk = A._setArrayType(makeConstList([10330056, 70051, 7957388, -9002667, 9764902, 15609756, 27698697, -4890037, 1657394, 3084098]), type$.JSArray_int);
    B.FieldElement_wEo1 = new A.FieldElement(B.List_ACk);
    B.List_qoh = A._setArrayType(makeConstList([10477963, -7470260, 12119566, -13250805, 29016247, -5365589, 31280319, 14396151, -30233575, 15272409]), type$.JSArray_int);
    B.FieldElement_kr3 = new A.FieldElement(B.List_qoh);
    B.GroupElementPrecomp_CFh = new A.GroupElementPrecomp(B.FieldElement_WfU, B.FieldElement_wEo1, B.FieldElement_kr3);
    B.List_jZo = A._setArrayType(makeConstList([-12288309, 3169463, 28813183, 16658753, 25116432, -5630466, -25173957, -12636138, -25014757, 1950504]), type$.JSArray_int);
    B.FieldElement_E0K = new A.FieldElement(B.List_jZo);
    B.List_tEs = A._setArrayType(makeConstList([-26180358, 9489187, 11053416, -14746161, -31053720, 5825630, -8384306, -8767532, 15341279, 8373727]), type$.JSArray_int);
    B.FieldElement_0me = new A.FieldElement(B.List_tEs);
    B.List_paB = A._setArrayType(makeConstList([28685821, 7759505, -14378516, -12002860, -31971820, 4079242, 298136, -10232602, -2878207, 15190420]), type$.JSArray_int);
    B.FieldElement_wde = new A.FieldElement(B.List_paB);
    B.GroupElementPrecomp_W7E = new A.GroupElementPrecomp(B.FieldElement_E0K, B.FieldElement_0me, B.FieldElement_wde);
    B.List_CJO = A._setArrayType(makeConstList([-32932876, 13806336, -14337485, -15794431, -24004620, 10940928, 8669718, 2742393, -26033313, -6875003]), type$.JSArray_int);
    B.FieldElement_gn0 = new A.FieldElement(B.List_CJO);
    B.List_uTM = A._setArrayType(makeConstList([-1580388, -11729417, -25979658, -11445023, -17411874, -10912854, 9291594, -16247779, -12154742, 6048605]), type$.JSArray_int);
    B.FieldElement_OW3 = new A.FieldElement(B.List_uTM);
    B.List_y3F = A._setArrayType(makeConstList([-30305315, 14843444, 1539301, 11864366, 20201677, 1900163, 13934231, 5128323, 11213262, 9168384]), type$.JSArray_int);
    B.FieldElement_O9m = new A.FieldElement(B.List_y3F);
    B.GroupElementPrecomp_wsa = new A.GroupElementPrecomp(B.FieldElement_gn0, B.FieldElement_OW3, B.FieldElement_O9m);
    B.List_CAq = A._setArrayType(makeConstList([-26280513, 11007847, 19408960, -940758, -18592965, -4328580, -5088060, -11105150, 20470157, -16398701]), type$.JSArray_int);
    B.FieldElement_TzW = new A.FieldElement(B.List_CAq);
    B.List_65k0 = A._setArrayType(makeConstList([-23136053, 9282192, 14855179, -15390078, -7362815, -14408560, -22783952, 14461608, 14042978, 5230683]), type$.JSArray_int);
    B.FieldElement_oNl = new A.FieldElement(B.List_65k0);
    B.List_yfz = A._setArrayType(makeConstList([29969567, -2741594, -16711867, -8552442, 9175486, -2468974, 21556951, 3506042, -5933891, -12449708]), type$.JSArray_int);
    B.FieldElement_4QF0 = new A.FieldElement(B.List_yfz);
    B.GroupElementPrecomp_byY = new A.GroupElementPrecomp(B.FieldElement_TzW, B.FieldElement_oNl, B.FieldElement_4QF0);
    B.List_Z8O = A._setArrayType(makeConstList([-3144746, 8744661, 19704003, 4581278, -20430686, 6830683, -21284170, 8971513, -28539189, 15326563]), type$.JSArray_int);
    B.FieldElement_M2b = new A.FieldElement(B.List_Z8O);
    B.List_int0 = A._setArrayType(makeConstList([-19464629, 10110288, -17262528, -3503892, -23500387, 1355669, -15523050, 15300988, -20514118, 9168260]), type$.JSArray_int);
    B.FieldElement_wT10 = new A.FieldElement(B.List_int0);
    B.List_qaL = A._setArrayType(makeConstList([-5353335, 4488613, -23803248, 16314347, 7780487, -15638939, -28948358, 9601605, 33087103, -9011387]), type$.JSArray_int);
    B.FieldElement_HxA = new A.FieldElement(B.List_qaL);
    B.GroupElementPrecomp_A0t = new A.GroupElementPrecomp(B.FieldElement_M2b, B.FieldElement_wT10, B.FieldElement_HxA);
    B.List_4AN1 = A._setArrayType(makeConstList([-19443170, -15512900, -20797467, -12445323, -29824447, 10229461, -27444329, -15000531, -5996870, 15664672]), type$.JSArray_int);
    B.FieldElement_sYh0 = new A.FieldElement(B.List_4AN1);
    B.List_ntf = A._setArrayType(makeConstList([23294591, -16632613, -22650781, -8470978, 27844204, 11461195, 13099750, -2460356, 18151676, 13417686]), type$.JSArray_int);
    B.FieldElement_D34 = new A.FieldElement(B.List_ntf);
    B.List_n22 = A._setArrayType(makeConstList([-24722913, -4176517, -31150679, 5988919, -26858785, 6685065, 1661597, -12551441, 15271676, -15452665]), type$.JSArray_int);
    B.FieldElement_aZ8 = new A.FieldElement(B.List_n22);
    B.GroupElementPrecomp_mZ3 = new A.GroupElementPrecomp(B.FieldElement_sYh0, B.FieldElement_D34, B.FieldElement_aZ8);
    B.List_2No0 = A._setArrayType(makeConstList([B.GroupElementPrecomp_ww8, B.GroupElementPrecomp_3p9, B.GroupElementPrecomp_CFh, B.GroupElementPrecomp_W7E, B.GroupElementPrecomp_wsa, B.GroupElementPrecomp_byY, B.GroupElementPrecomp_A0t, B.GroupElementPrecomp_mZ3]), type$.JSArray_GroupElementPrecomp);
    B.List_ZG6 = A._setArrayType(makeConstList([11433042, -13228665, 8239631, -5279517, -1985436, -725718, -18698764, 2167544, -6921301, -13440182]), type$.JSArray_int);
    B.FieldElement_UJY = new A.FieldElement(B.List_ZG6);
    B.List_hvO = A._setArrayType(makeConstList([-31436171, 15575146, 30436815, 12192228, -22463353, 9395379, -9917708, -8638997, 12215110, 12028277]), type$.JSArray_int);
    B.FieldElement_cwl = new A.FieldElement(B.List_hvO);
    B.List_ESz = A._setArrayType(makeConstList([14098400, 6555944, 23007258, 5757252, -15427832, -12950502, 30123440, 4617780, -16900089, -655628]), type$.JSArray_int);
    B.FieldElement_P1S = new A.FieldElement(B.List_ESz);
    B.GroupElementPrecomp_43h = new A.GroupElementPrecomp(B.FieldElement_UJY, B.FieldElement_cwl, B.FieldElement_P1S);
    B.List_gsm0 = A._setArrayType(makeConstList([-4026201, -15240835, 11893168, 13718664, -14809462, 1847385, -15819999, 10154009, 23973261, -12684474]), type$.JSArray_int);
    B.FieldElement_vb00 = new A.FieldElement(B.List_gsm0);
    B.List_41U = A._setArrayType(makeConstList([-26531820, -3695990, -1908898, 2534301, -31870557, -16550355, 18341390, -11419951, 32013174, -10103539]), type$.JSArray_int);
    B.FieldElement_m7u = new A.FieldElement(B.List_41U);
    B.List_Gjj = A._setArrayType(makeConstList([-25479301, 10876443, -11771086, -14625140, -12369567, 1838104, 21911214, 6354752, 4425632, -837822]), type$.JSArray_int);
    B.FieldElement_o53 = new A.FieldElement(B.List_Gjj);
    B.GroupElementPrecomp_0 = new A.GroupElementPrecomp(B.FieldElement_vb00, B.FieldElement_m7u, B.FieldElement_o53);
    B.List_f8d = A._setArrayType(makeConstList([-10433389, -14612966, 22229858, -3091047, -13191166, 776729, -17415375, -12020462, 4725005, 14044970]), type$.JSArray_int);
    B.FieldElement_SRR = new A.FieldElement(B.List_f8d);
    B.List_oSr = A._setArrayType(makeConstList([19268650, -7304421, 1555349, 8692754, -21474059, -9910664, 6347390, -1411784, -19522291, -16109756]), type$.JSArray_int);
    B.FieldElement_QoN = new A.FieldElement(B.List_oSr);
    B.List_eAZ = A._setArrayType(makeConstList([-24864089, 12986008, -10898878, -5558584, -11312371, -148526, 19541418, 8180106, 9282262, 10282508]), type$.JSArray_int);
    B.FieldElement_v8v = new A.FieldElement(B.List_eAZ);
    B.GroupElementPrecomp_qBE = new A.GroupElementPrecomp(B.FieldElement_SRR, B.FieldElement_QoN, B.FieldElement_v8v);
    B.List_4Cu = A._setArrayType(makeConstList([-26205082, 4428547, -8661196, -13194263, 4098402, -14165257, 15522535, 8372215, 5542595, -10702683]), type$.JSArray_int);
    B.FieldElement_yHF = new A.FieldElement(B.List_4Cu);
    B.List_KIV = A._setArrayType(makeConstList([-10562541, 14895633, 26814552, -16673850, -17480754, -2489360, -2781891, 6993761, -18093885, 10114655]), type$.JSArray_int);
    B.FieldElement_S7e = new A.FieldElement(B.List_KIV);
    B.List_6zT = A._setArrayType(makeConstList([-20107055, -929418, 31422704, 10427861, -7110749, 6150669, -29091755, -11529146, 25953725, -106158]), type$.JSArray_int);
    B.FieldElement_sM5 = new A.FieldElement(B.List_6zT);
    B.GroupElementPrecomp_uLX = new A.GroupElementPrecomp(B.FieldElement_yHF, B.FieldElement_S7e, B.FieldElement_sM5);
    B.List_TXx = A._setArrayType(makeConstList([-4234397, -8039292, -9119125, 3046000, 2101609, -12607294, 19390020, 6094296, -3315279, 12831125]), type$.JSArray_int);
    B.FieldElement_cAf = new A.FieldElement(B.List_TXx);
    B.List_MAi = A._setArrayType(makeConstList([-15998678, 7578152, 5310217, 14408357, -33548620, -224739, 31575954, 6326196, 7381791, -2421839]), type$.JSArray_int);
    B.FieldElement_ssa = new A.FieldElement(B.List_MAi);
    B.List_EF7 = A._setArrayType(makeConstList([-20902779, 3296811, 24736065, -16328389, 18374254, 7318640, 6295303, 8082724, -15362489, 12339664]), type$.JSArray_int);
    B.FieldElement_BkV = new A.FieldElement(B.List_EF7);
    B.GroupElementPrecomp_Trx = new A.GroupElementPrecomp(B.FieldElement_cAf, B.FieldElement_ssa, B.FieldElement_BkV);
    B.List_YX3 = A._setArrayType(makeConstList([27724736, 2291157, 6088201, -14184798, 1792727, 5857634, 13848414, 15768922, 25091167, 14856294]), type$.JSArray_int);
    B.FieldElement_dnB = new A.FieldElement(B.List_YX3);
    B.List_9hw = A._setArrayType(makeConstList([-18866652, 8331043, 24373479, 8541013, -701998, -9269457, 12927300, -12695493, -22182473, -9012899]), type$.JSArray_int);
    B.FieldElement_MiJ = new A.FieldElement(B.List_9hw);
    B.List_QKT = A._setArrayType(makeConstList([-11423429, -5421590, 11632845, 3405020, 30536730, -11674039, -27260765, 13866390, 30146206, 9142070]), type$.JSArray_int);
    B.FieldElement_8d3 = new A.FieldElement(B.List_QKT);
    B.GroupElementPrecomp_e8d = new A.GroupElementPrecomp(B.FieldElement_dnB, B.FieldElement_MiJ, B.FieldElement_8d3);
    B.List_Cq1 = A._setArrayType(makeConstList([3924129, -15307516, -13817122, -10054960, 12291820, -668366, -27702774, 9326384, -8237858, 4171294]), type$.JSArray_int);
    B.FieldElement_yrf = new A.FieldElement(B.List_Cq1);
    B.List_dLb = A._setArrayType(makeConstList([-15921940, 16037937, 6713787, 16606682, -21612135, 2790944, 26396185, 3731949, 345228, -5462949]), type$.JSArray_int);
    B.FieldElement_gg9 = new A.FieldElement(B.List_dLb);
    B.List_g78 = A._setArrayType(makeConstList([-21327538, 13448259, 25284571, 1143661, 20614966, -8849387, 2031539, -12391231, -16253183, -13582083]), type$.JSArray_int);
    B.FieldElement_qtf = new A.FieldElement(B.List_g78);
    B.GroupElementPrecomp_oiE = new A.GroupElementPrecomp(B.FieldElement_yrf, B.FieldElement_gg9, B.FieldElement_qtf);
    B.List_bMS = A._setArrayType(makeConstList([31016211, -16722429, 26371392, -14451233, -5027349, 14854137, 17477601, 3842657, 28012650, -16405420]), type$.JSArray_int);
    B.FieldElement_2KU = new A.FieldElement(B.List_bMS);
    B.List_rdS = A._setArrayType(makeConstList([-5075835, 9368966, -8562079, -4600902, -15249953, 6970560, -9189873, 16292057, -8867157, 3507940]), type$.JSArray_int);
    B.FieldElement_YKN = new A.FieldElement(B.List_rdS);
    B.List_mqr = A._setArrayType(makeConstList([29439664, 3537914, 23333589, 6997794, -17555561, -11018068, -15209202, -15051267, -9164929, 6580396]), type$.JSArray_int);
    B.FieldElement_hSJ = new A.FieldElement(B.List_mqr);
    B.GroupElementPrecomp_dkA = new A.GroupElementPrecomp(B.FieldElement_2KU, B.FieldElement_YKN, B.FieldElement_hSJ);
    B.List_8Eu = A._setArrayType(makeConstList([B.GroupElementPrecomp_43h, B.GroupElementPrecomp_0, B.GroupElementPrecomp_qBE, B.GroupElementPrecomp_uLX, B.GroupElementPrecomp_Trx, B.GroupElementPrecomp_e8d, B.GroupElementPrecomp_oiE, B.GroupElementPrecomp_dkA]), type$.JSArray_GroupElementPrecomp);
    B.List_OP1 = A._setArrayType(makeConstList([-12185861, -7679788, 16438269, 10826160, -8696817, -6235611, 17860444, -9273846, -2095802, 9304567]), type$.JSArray_int);
    B.FieldElement_EYi = new A.FieldElement(B.List_OP1);
    B.List_oWu = A._setArrayType(makeConstList([20714564, -4336911, 29088195, 7406487, 11426967, -5095705, 14792667, -14608617, 5289421, -477127]), type$.JSArray_int);
    B.FieldElement_Sbm = new A.FieldElement(B.List_oWu);
    B.List_PLF = A._setArrayType(makeConstList([-16665533, -10650790, -6160345, -13305760, 9192020, -1802462, 17271490, 12349094, 26939669, -3752294]), type$.JSArray_int);
    B.FieldElement_Rey = new A.FieldElement(B.List_PLF);
    B.GroupElementPrecomp_spY = new A.GroupElementPrecomp(B.FieldElement_EYi, B.FieldElement_Sbm, B.FieldElement_Rey);
    B.List_YYR = A._setArrayType(makeConstList([-12889898, 9373458, 31595848, 16374215, 21471720, 13221525, -27283495, -12348559, -3698806, 117887]), type$.JSArray_int);
    B.FieldElement_WGT = new A.FieldElement(B.List_YYR);
    B.List_4bl = A._setArrayType(makeConstList([22263325, -6560050, 3984570, -11174646, -15114008, -566785, 28311253, 5358056, -23319780, 541964]), type$.JSArray_int);
    B.FieldElement_d8l = new A.FieldElement(B.List_4bl);
    B.List_oVn = A._setArrayType(makeConstList([16259219, 3261970, 2309254, -15534474, -16885711, -4581916, 24134070, -16705829, -13337066, -13552195]), type$.JSArray_int);
    B.FieldElement_zrt = new A.FieldElement(B.List_oVn);
    B.GroupElementPrecomp_sbZ = new A.GroupElementPrecomp(B.FieldElement_WGT, B.FieldElement_d8l, B.FieldElement_zrt);
    B.List_skV = A._setArrayType(makeConstList([9378160, -13140186, -22845982, -12745264, 28198281, -7244098, -2399684, -717351, 690426, 14876244]), type$.JSArray_int);
    B.FieldElement_apl = new A.FieldElement(B.List_skV);
    B.List_OCd = A._setArrayType(makeConstList([24977353, -314384, -8223969, -13465086, 28432343, -1176353, -13068804, -12297348, -22380984, 6618999]), type$.JSArray_int);
    B.FieldElement_WHQ = new A.FieldElement(B.List_OCd);
    B.List_4y3 = A._setArrayType(makeConstList([-1538174, 11685646, 12944378, 13682314, -24389511, -14413193, 8044829, -13817328, 32239829, -5652762]), type$.JSArray_int);
    B.FieldElement_mGH = new A.FieldElement(B.List_4y3);
    B.GroupElementPrecomp_enE = new A.GroupElementPrecomp(B.FieldElement_apl, B.FieldElement_WHQ, B.FieldElement_mGH);
    B.List_6TA = A._setArrayType(makeConstList([-18603066, 4762990, -926250, 8885304, -28412480, -3187315, 9781647, -10350059, 32779359, 5095274]), type$.JSArray_int);
    B.FieldElement_0ka = new A.FieldElement(B.List_6TA);
    B.List_7VO = A._setArrayType(makeConstList([-33008130, -5214506, -32264887, -3685216, 9460461, -9327423, -24601656, 14506724, 21639561, -2630236]), type$.JSArray_int);
    B.FieldElement_sYh1 = new A.FieldElement(B.List_7VO);
    B.List_Fb0 = A._setArrayType(makeConstList([-16400943, -13112215, 25239338, 15531969, 3987758, -4499318, -1289502, -6863535, 17874574, 558605]), type$.JSArray_int);
    B.FieldElement_2rX = new A.FieldElement(B.List_Fb0);
    B.GroupElementPrecomp_wy6 = new A.GroupElementPrecomp(B.FieldElement_0ka, B.FieldElement_sYh1, B.FieldElement_2rX);
    B.List_1I7 = A._setArrayType(makeConstList([-13600129, 10240081, 9171883, 16131053, -20869254, 9599700, 33499487, 5080151, 2085892, 5119761]), type$.JSArray_int);
    B.FieldElement_5QF = new A.FieldElement(B.List_1I7);
    B.List_j7V = A._setArrayType(makeConstList([-22205145, -2519528, -16381601, 414691, -25019550, 2170430, 30634760, -8363614, -31999993, -5759884]), type$.JSArray_int);
    B.FieldElement_AKW = new A.FieldElement(B.List_j7V);
    B.List_oqF = A._setArrayType(makeConstList([-6845704, 15791202, 8550074, -1312654, 29928809, -12092256, 27534430, -7192145, -22351378, 12961482]), type$.JSArray_int);
    B.FieldElement_cwE = new A.FieldElement(B.List_oqF);
    B.GroupElementPrecomp_GGd = new A.GroupElementPrecomp(B.FieldElement_5QF, B.FieldElement_AKW, B.FieldElement_cwE);
    B.List_OlH = A._setArrayType(makeConstList([-24492060, -9570771, 10368194, 11582341, -23397293, -2245287, 16533930, 8206996, -30194652, -5159638]), type$.JSArray_int);
    B.FieldElement_vLW = new A.FieldElement(B.List_OlH);
    B.List_05 = A._setArrayType(makeConstList([-11121496, -3382234, 2307366, 6362031, -135455, 8868177, -16835630, 7031275, 7589640, 8945490]), type$.JSArray_int);
    B.FieldElement_43h0 = new A.FieldElement(B.List_05);
    B.List_IGO = A._setArrayType(makeConstList([-32152748, 8917967, 6661220, -11677616, -1192060, -15793393, 7251489, -11182180, 24099109, -14456170]), type$.JSArray_int);
    B.FieldElement_sav = new A.FieldElement(B.List_IGO);
    B.GroupElementPrecomp_A0F = new A.GroupElementPrecomp(B.FieldElement_vLW, B.FieldElement_43h0, B.FieldElement_sav);
    B.List_qNM = A._setArrayType(makeConstList([5019558, -7907470, 4244127, -14714356, -26933272, 6453165, -19118182, -13289025, -6231896, -10280736]), type$.JSArray_int);
    B.FieldElement_a13 = new A.FieldElement(B.List_qNM);
    B.List_bcb = A._setArrayType(makeConstList([10853594, 10721687, 26480089, 5861829, -22995819, 1972175, -1866647, -10557898, -3363451, -6441124]), type$.JSArray_int);
    B.FieldElement_Art = new A.FieldElement(B.List_bcb);
    B.List_rZL = A._setArrayType(makeConstList([-17002408, 5906790, 221599, -6563147, 7828208, -13248918, 24362661, -2008168, -13866408, 7421392]), type$.JSArray_int);
    B.FieldElement_8aB = new A.FieldElement(B.List_rZL);
    B.GroupElementPrecomp_84a = new A.GroupElementPrecomp(B.FieldElement_a13, B.FieldElement_Art, B.FieldElement_8aB);
    B.List_QOM = A._setArrayType(makeConstList([8139927, -6546497, 32257646, -5890546, 30375719, 1886181, -21175108, 15441252, 28826358, -4123029]), type$.JSArray_int);
    B.FieldElement_inR = new A.FieldElement(B.List_QOM);
    B.List_aXZ = A._setArrayType(makeConstList([6267086, 9695052, 7709135, -16603597, -32869068, -1886135, 14795160, -7840124, 13746021, -1742048]), type$.JSArray_int);
    B.FieldElement_isj = new A.FieldElement(B.List_aXZ);
    B.List_3bx = A._setArrayType(makeConstList([28584902, 7787108, -6732942, -15050729, 22846041, -7571236, -3181936, -363524, 4771362, -8419958]), type$.JSArray_int);
    B.FieldElement_kQR = new A.FieldElement(B.List_3bx);
    B.GroupElementPrecomp_osf = new A.GroupElementPrecomp(B.FieldElement_inR, B.FieldElement_isj, B.FieldElement_kQR);
    B.List_7lT = A._setArrayType(makeConstList([B.GroupElementPrecomp_spY, B.GroupElementPrecomp_sbZ, B.GroupElementPrecomp_enE, B.GroupElementPrecomp_wy6, B.GroupElementPrecomp_GGd, B.GroupElementPrecomp_A0F, B.GroupElementPrecomp_84a, B.GroupElementPrecomp_osf]), type$.JSArray_GroupElementPrecomp);
    B.List_Drw = A._setArrayType(makeConstList([24949256, 6376279, -27466481, -8174608, -18646154, -9930606, 33543569, -12141695, 3569627, 11342593]), type$.JSArray_int);
    B.FieldElement_aM4 = new A.FieldElement(B.List_Drw);
    B.List_wzd = A._setArrayType(makeConstList([26514989, 4740088, 27912651, 3697550, 19331575, -11472339, 6809886, 4608608, 7325975, -14801071]), type$.JSArray_int);
    B.FieldElement_wg3 = new A.FieldElement(B.List_wzd);
    B.List_Iwp = A._setArrayType(makeConstList([-11618399, -14554430, -24321212, 7655128, -1369274, 5214312, -27400540, 10258390, -17646694, -8186692]), type$.JSArray_int);
    B.FieldElement_A4r = new A.FieldElement(B.List_Iwp);
    B.GroupElementPrecomp_kl6 = new A.GroupElementPrecomp(B.FieldElement_aM4, B.FieldElement_wg3, B.FieldElement_A4r);
    B.List_liO = A._setArrayType(makeConstList([11431204, 15823007, 26570245, 14329124, 18029990, 4796082, -31446179, 15580664, 9280358, -3973687]), type$.JSArray_int);
    B.FieldElement_QGa = new A.FieldElement(B.List_liO);
    B.List_bpF = A._setArrayType(makeConstList([-160783, -10326257, -22855316, -4304997, -20861367, -13621002, -32810901, -11181622, -15545091, 4387441]), type$.JSArray_int);
    B.FieldElement_Lt0 = new A.FieldElement(B.List_bpF);
    B.List_6U3 = A._setArrayType(makeConstList([-20799378, 12194512, 3937617, -5805892, -27154820, 9340370, -24513992, 8548137, 20617071, -7482001]), type$.JSArray_int);
    B.FieldElement_tIf = new A.FieldElement(B.List_6U3);
    B.GroupElementPrecomp_OPD = new A.GroupElementPrecomp(B.FieldElement_QGa, B.FieldElement_Lt0, B.FieldElement_tIf);
    B.List_8Gl = A._setArrayType(makeConstList([-938825, -3930586, -8714311, 16124718, 24603125, -6225393, -13775352, -11875822, 24345683, 10325460]), type$.JSArray_int);
    B.FieldElement_KTL = new A.FieldElement(B.List_8Gl);
    B.List_rYm = A._setArrayType(makeConstList([-19855277, -1568885, -22202708, 8714034, 14007766, 6928528, 16318175, -1010689, 4766743, 3552007]), type$.JSArray_int);
    B.FieldElement_8aB0 = new A.FieldElement(B.List_rYm);
    B.List_a99 = A._setArrayType(makeConstList([-21751364, -16730916, 1351763, -803421, -4009670, 3950935, 3217514, 14481909, 10988822, -3994762]), type$.JSArray_int);
    B.FieldElement_gkc1 = new A.FieldElement(B.List_a99);
    B.GroupElementPrecomp_aXZ = new A.GroupElementPrecomp(B.FieldElement_KTL, B.FieldElement_8aB0, B.FieldElement_gkc1);
    B.List_ccK = A._setArrayType(makeConstList([15564307, -14311570, 3101243, 5684148, 30446780, -8051356, 12677127, -6505343, -8295852, 13296005]), type$.JSArray_int);
    B.FieldElement_e1x = new A.FieldElement(B.List_ccK);
    B.List_Z14 = A._setArrayType(makeConstList([-9442290, 6624296, -30298964, -11913677, -4670981, -2057379, 31521204, 9614054, -30000824, 12074674]), type$.JSArray_int);
    B.FieldElement_VUC = new A.FieldElement(B.List_Z14);
    B.List_a1T = A._setArrayType(makeConstList([4771191, -135239, 14290749, -13089852, 27992298, 14998318, -1413936, -1556716, 29832613, -16391035]), type$.JSArray_int);
    B.FieldElement_yrt = new A.FieldElement(B.List_a1T);
    B.GroupElementPrecomp_Jcu = new A.GroupElementPrecomp(B.FieldElement_e1x, B.FieldElement_VUC, B.FieldElement_yrt);
    B.List_upD = A._setArrayType(makeConstList([7064884, -7541174, -19161962, -5067537, -18891269, -2912736, 25825242, 5293297, -27122660, 13101590]), type$.JSArray_int);
    B.FieldElement_5nZ = new A.FieldElement(B.List_upD);
    B.List_1760 = A._setArrayType(makeConstList([-2298563, 2439670, -7466610, 1719965, -27267541, -16328445, 32512469, -5317593, -30356070, -4190957]), type$.JSArray_int);
    B.FieldElement_YGJ = new A.FieldElement(B.List_1760);
    B.List_4aG = A._setArrayType(makeConstList([-30006540, 10162316, -33180176, 3981723, -16482138, -13070044, 14413974, 9515896, 19568978, 9628812]), type$.JSArray_int);
    B.FieldElement_7eO = new A.FieldElement(B.List_4aG);
    B.GroupElementPrecomp_Yz7 = new A.GroupElementPrecomp(B.FieldElement_5nZ, B.FieldElement_YGJ, B.FieldElement_7eO);
    B.List_URR = A._setArrayType(makeConstList([33053803, 199357, 15894591, 1583059, 27380243, -4580435, -17838894, -6106839, -6291786, 3437740]), type$.JSArray_int);
    B.FieldElement_APP = new A.FieldElement(B.List_URR);
    B.List_RoN = A._setArrayType(makeConstList([-18978877, 3884493, 19469877, 12726490, 15913552, 13614290, -22961733, 70104, 7463304, 4176122]), type$.JSArray_int);
    B.FieldElement_qx4 = new A.FieldElement(B.List_RoN);
    B.List_0rK = A._setArrayType(makeConstList([-27124001, 10659917, 11482427, -16070381, 12771467, -6635117, -32719404, -5322751, 24216882, 5944158]), type$.JSArray_int);
    B.FieldElement_Qy4 = new A.FieldElement(B.List_0rK);
    B.GroupElementPrecomp_a9P = new A.GroupElementPrecomp(B.FieldElement_APP, B.FieldElement_qx4, B.FieldElement_Qy4);
    B.List_Iot = A._setArrayType(makeConstList([8894125, 7450974, -2664149, -9765752, -28080517, -12389115, 19345746, 14680796, 11632993, 5847885]), type$.JSArray_int);
    B.FieldElement_opY = new A.FieldElement(B.List_Iot);
    B.List_skV0 = A._setArrayType(makeConstList([26942781, -2315317, 9129564, -4906607, 26024105, 11769399, -11518837, 6367194, -9727230, 4782140]), type$.JSArray_int);
    B.FieldElement_apl0 = new A.FieldElement(B.List_skV0);
    B.List_tU4 = A._setArrayType(makeConstList([19916461, -4828410, -22910704, -11414391, 25606324, -5972441, 33253853, 8220911, 6358847, -1873857]), type$.JSArray_int);
    B.FieldElement_mmC = new A.FieldElement(B.List_tU4);
    B.GroupElementPrecomp_Yi2 = new A.GroupElementPrecomp(B.FieldElement_opY, B.FieldElement_apl0, B.FieldElement_mmC);
    B.List_KvY = A._setArrayType(makeConstList([801428, -2081702, 16569428, 11065167, 29875704, 96627, 7908388, -4480480, -13538503, 1387155]), type$.JSArray_int);
    B.FieldElement_FGJ = new A.FieldElement(B.List_KvY);
    B.List_Aeg = A._setArrayType(makeConstList([19646058, 5720633, -11416706, 12814209, 11607948, 12749789, 14147075, 15156355, -21866831, 11835260]), type$.JSArray_int);
    B.FieldElement_86y = new A.FieldElement(B.List_Aeg);
    B.List_Cp5 = A._setArrayType(makeConstList([19299512, 1155910, 28703737, 14890794, 2925026, 7269399, 26121523, 15467869, -26560550, 5052483]), type$.JSArray_int);
    B.FieldElement_YQK = new A.FieldElement(B.List_Cp5);
    B.GroupElementPrecomp_IMm = new A.GroupElementPrecomp(B.FieldElement_FGJ, B.FieldElement_86y, B.FieldElement_YQK);
    B.List_MYA = A._setArrayType(makeConstList([B.GroupElementPrecomp_kl6, B.GroupElementPrecomp_OPD, B.GroupElementPrecomp_aXZ, B.GroupElementPrecomp_Jcu, B.GroupElementPrecomp_Yz7, B.GroupElementPrecomp_a9P, B.GroupElementPrecomp_Yi2, B.GroupElementPrecomp_IMm]), type$.JSArray_GroupElementPrecomp);
    B.List_OLT = A._setArrayType(makeConstList([-3017432, 10058206, 1980837, 3964243, 22160966, 12322533, -6431123, -12618185, 12228557, -7003677]), type$.JSArray_int);
    B.FieldElement_U0W = new A.FieldElement(B.List_OLT);
    B.List_2jN0 = A._setArrayType(makeConstList([32944382, 14922211, -22844894, 5188528, 21913450, -8719943, 4001465, 13238564, -6114803, 8653815]), type$.JSArray_int);
    B.FieldElement_vhV = new A.FieldElement(B.List_2jN0);
    B.List_96Z = A._setArrayType(makeConstList([22865569, -4652735, 27603668, -12545395, 14348958, 8234005, 24808405, 5719875, 28483275, 2841751]), type$.JSArray_int);
    B.FieldElement_qAw = new A.FieldElement(B.List_96Z);
    B.GroupElementPrecomp_2jN = new A.GroupElementPrecomp(B.FieldElement_U0W, B.FieldElement_vhV, B.FieldElement_qAw);
    B.List_V43 = A._setArrayType(makeConstList([-16420968, -1113305, -327719, -12107856, 21886282, -15552774, -1887966, -315658, 19932058, -12739203]), type$.JSArray_int);
    B.FieldElement_GQu = new A.FieldElement(B.List_V43);
    B.List_06 = A._setArrayType(makeConstList([-11656086, 10087521, -8864888, -5536143, -19278573, -3055912, 3999228, 13239134, -4777469, -13910208]), type$.JSArray_int);
    B.FieldElement_43h1 = new A.FieldElement(B.List_06);
    B.List_sNo = A._setArrayType(makeConstList([1382174, -11694719, 17266790, 9194690, -13324356, 9720081, 20403944, 11284705, -14013818, 3093230]), type$.JSArray_int);
    B.FieldElement_jvJ = new A.FieldElement(B.List_sNo);
    B.GroupElementPrecomp_sQd = new A.GroupElementPrecomp(B.FieldElement_GQu, B.FieldElement_43h1, B.FieldElement_jvJ);
    B.List_ECL = A._setArrayType(makeConstList([16650921, -11037932, -1064178, 1570629, -8329746, 7352753, -302424, 16271225, -24049421, -6691850]), type$.JSArray_int);
    B.FieldElement_fLp = new A.FieldElement(B.List_ECL);
    B.List_A0N = A._setArrayType(makeConstList([-21911077, -5927941, -4611316, -5560156, -31744103, -10785293, 24123614, 15193618, -21652117, -16739389]), type$.JSArray_int);
    B.FieldElement_02 = new A.FieldElement(B.List_A0N);
    B.List_6xB = A._setArrayType(makeConstList([-9935934, -4289447, -25279823, 4372842, 2087473, 10399484, 31870908, 14690798, 17361620, 11864968]), type$.JSArray_int);
    B.FieldElement_ZXT = new A.FieldElement(B.List_6xB);
    B.GroupElementPrecomp_4gv = new A.GroupElementPrecomp(B.FieldElement_fLp, B.FieldElement_02, B.FieldElement_ZXT);
    B.List_Qqm = A._setArrayType(makeConstList([-11307610, 6210372, 13206574, 5806320, -29017692, -13967200, -12331205, -7486601, -25578460, -16240689]), type$.JSArray_int);
    B.FieldElement_fNF = new A.FieldElement(B.List_Qqm);
    B.List_6DV = A._setArrayType(makeConstList([14668462, -12270235, 26039039, 15305210, 25515617, 4542480, 10453892, 6577524, 9145645, -6443880]), type$.JSArray_int);
    B.FieldElement_EKW = new A.FieldElement(B.List_6DV);
    B.List_WpI = A._setArrayType(makeConstList([5974874, 3053895, -9433049, -10385191, -31865124, 3225009, -7972642, 3936128, -5652273, -3050304]), type$.JSArray_int);
    B.FieldElement_8eb = new A.FieldElement(B.List_WpI);
    B.GroupElementPrecomp_hyv = new A.GroupElementPrecomp(B.FieldElement_fNF, B.FieldElement_EKW, B.FieldElement_8eb);
    B.List_GQs = A._setArrayType(makeConstList([30625386, -4729400, -25555961, -12792866, -20484575, 7695099, 17097188, -16303496, -27999779, 1803632]), type$.JSArray_int);
    B.FieldElement_qU2 = new A.FieldElement(B.List_GQs);
    B.List_N80 = A._setArrayType(makeConstList([-3553091, 9865099, -5228566, 4272701, -5673832, -16689700, 14911344, 12196514, -21405489, 7047412]), type$.JSArray_int);
    B.FieldElement_PiJ = new A.FieldElement(B.List_N80);
    B.List_oWu0 = A._setArrayType(makeConstList([20093277, 9920966, -11138194, -5343857, 13161587, 12044805, -32856851, 4124601, -32343828, -10257566]), type$.JSArray_int);
    B.FieldElement_Sbm0 = new A.FieldElement(B.List_oWu0);
    B.GroupElementPrecomp_4rX = new A.GroupElementPrecomp(B.FieldElement_qU2, B.FieldElement_PiJ, B.FieldElement_Sbm0);
    B.List_PzB = A._setArrayType(makeConstList([-20788824, 14084654, -13531713, 7842147, 19119038, -13822605, 4752377, -8714640, -21679658, 2288038]), type$.JSArray_int);
    B.FieldElement_jNn = new A.FieldElement(B.List_PzB);
    B.List_fm4 = A._setArrayType(makeConstList([-26819236, -3283715, 29965059, 3039786, -14473765, 2540457, 29457502, 14625692, -24819617, 12570232]), type$.JSArray_int);
    B.FieldElement_jOn = new A.FieldElement(B.List_fm4);
    B.List_mdj = A._setArrayType(makeConstList([-1063558, -11551823, 16920318, 12494842, 1278292, -5869109, -21159943, -3498680, -11974704, 4724943]), type$.JSArray_int);
    B.FieldElement_qXF = new A.FieldElement(B.List_mdj);
    B.GroupElementPrecomp_wsa0 = new A.GroupElementPrecomp(B.FieldElement_jNn, B.FieldElement_jOn, B.FieldElement_qXF);
    B.List_27z = A._setArrayType(makeConstList([17960970, -11775534, -4140968, -9702530, -8876562, -1410617, -12907383, -8659932, -29576300, 1903856]), type$.JSArray_int);
    B.FieldElement_ENd = new A.FieldElement(B.List_27z);
    B.List_2Do = A._setArrayType(makeConstList([23134274, -14279132, -10681997, -1611936, 20684485, 15770816, -12989750, 3190296, 26955097, 14109738]), type$.JSArray_int);
    B.FieldElement_46S = new A.FieldElement(B.List_2Do);
    B.List_r5g = A._setArrayType(makeConstList([15308788, 5320727, -30113809, -14318877, 22902008, 7767164, 29425325, -11277562, 31960942, 11934971]), type$.JSArray_int);
    B.FieldElement_Zk1 = new A.FieldElement(B.List_r5g);
    B.GroupElementPrecomp_69t = new A.GroupElementPrecomp(B.FieldElement_ENd, B.FieldElement_46S, B.FieldElement_Zk1);
    B.List_hwK = A._setArrayType(makeConstList([-27395711, 8435796, 4109644, 12222639, -24627868, 14818669, 20638173, 4875028, 10491392, 1379718]), type$.JSArray_int);
    B.FieldElement_oyU = new A.FieldElement(B.List_hwK);
    B.List_mtg = A._setArrayType(makeConstList([-13159415, 9197841, 3875503, -8936108, -1383712, -5879801, 33518459, 16176658, 21432314, 12180697]), type$.JSArray_int);
    B.FieldElement_Qyo = new A.FieldElement(B.List_mtg);
    B.List_D34 = A._setArrayType(makeConstList([-11787308, 11500838, 13787581, -13832590, -22430679, 10140205, 1465425, 12689540, -10301319, -13872883]), type$.JSArray_int);
    B.FieldElement_8Wd = new A.FieldElement(B.List_D34);
    B.GroupElementPrecomp_CjI = new A.GroupElementPrecomp(B.FieldElement_oyU, B.FieldElement_Qyo, B.FieldElement_8Wd);
    B.List_fV2 = A._setArrayType(makeConstList([B.GroupElementPrecomp_2jN, B.GroupElementPrecomp_sQd, B.GroupElementPrecomp_4gv, B.GroupElementPrecomp_hyv, B.GroupElementPrecomp_4rX, B.GroupElementPrecomp_wsa0, B.GroupElementPrecomp_69t, B.GroupElementPrecomp_CjI]), type$.JSArray_GroupElementPrecomp);
    B.List_ciW = A._setArrayType(makeConstList([5414091, -15386041, -21007664, 9643570, 12834970, 1186149, -2622916, -1342231, 26128231, 6032912]), type$.JSArray_int);
    B.FieldElement_0WV = new A.FieldElement(B.List_ciW);
    B.List_kUZ = A._setArrayType(makeConstList([-26337395, -13766162, 32496025, -13653919, 17847801, -12669156, 3604025, 8316894, -25875034, -10437358]), type$.JSArray_int);
    B.FieldElement_aDt = new A.FieldElement(B.List_kUZ);
    B.List_s7p = A._setArrayType(makeConstList([3296484, 6223048, 24680646, -12246460, -23052020, 5903205, -8862297, -4639164, 12376617, 3188849]), type$.JSArray_int);
    B.FieldElement_uXT = new A.FieldElement(B.List_s7p);
    B.GroupElementPrecomp_ccK = new A.GroupElementPrecomp(B.FieldElement_0WV, B.FieldElement_aDt, B.FieldElement_uXT);
    B.List_Ebw = A._setArrayType(makeConstList([29190488, -14659046, 27549113, -1183516, 3520066, -10697301, 32049515, -7309113, -16109234, -9852307]), type$.JSArray_int);
    B.FieldElement_yvL = new A.FieldElement(B.List_Ebw);
    B.List_Rmt = A._setArrayType(makeConstList([-14744486, -9309156, 735818, -598978, -20407687, -5057904, 25246078, -15795669, 18640741, -960977]), type$.JSArray_int);
    B.FieldElement_NIe = new A.FieldElement(B.List_Rmt);
    B.List_fXy = A._setArrayType(makeConstList([-6928835, -16430795, 10361374, 5642961, 4910474, 12345252, -31638386, -494430, 10530747, 1053335]), type$.JSArray_int);
    B.FieldElement_CDI = new A.FieldElement(B.List_fXy);
    B.GroupElementPrecomp_vAN = new A.GroupElementPrecomp(B.FieldElement_yvL, B.FieldElement_NIe, B.FieldElement_CDI);
    B.List_mdk = A._setArrayType(makeConstList([-29265967, -14186805, -13538216, -12117373, -19457059, -10655384, -31462369, -2948985, 24018831, 15026644]), type$.JSArray_int);
    B.FieldElement_Mw4 = new A.FieldElement(B.List_mdk);
    B.List_voj = A._setArrayType(makeConstList([-22592535, -3145277, -2289276, 5953843, -13440189, 9425631, 25310643, 13003497, -2314791, -15145616]), type$.JSArray_int);
    B.FieldElement_03 = new A.FieldElement(B.List_voj);
    B.List_gn0 = A._setArrayType(makeConstList([-27419985, -603321, -8043984, -1669117, -26092265, 13987819, -27297622, 187899, -23166419, -2531735]), type$.JSArray_int);
    B.FieldElement_9yp = new A.FieldElement(B.List_gn0);
    B.GroupElementPrecomp_9Ml = new A.GroupElementPrecomp(B.FieldElement_Mw4, B.FieldElement_03, B.FieldElement_9yp);
    B.List_iHy = A._setArrayType(makeConstList([-21744398, -13810475, 1844840, 5021428, -10434399, -15911473, 9716667, 16266922, -5070217, 726099]), type$.JSArray_int);
    B.FieldElement_CWW = new A.FieldElement(B.List_iHy);
    B.List_wsa = A._setArrayType(makeConstList([29370922, -6053998, 7334071, -15342259, 9385287, 2247707, -13661962, -4839461, 30007388, -15823341]), type$.JSArray_int);
    B.FieldElement_aBk = new A.FieldElement(B.List_wsa);
    B.List_yCR = A._setArrayType(makeConstList([-936379, 16086691, 23751945, -543318, -1167538, -5189036, 9137109, 730663, 9835848, 4555336]), type$.JSArray_int);
    B.FieldElement_A8T = new A.FieldElement(B.List_yCR);
    B.GroupElementPrecomp_46y = new A.GroupElementPrecomp(B.FieldElement_CWW, B.FieldElement_aBk, B.FieldElement_A8T);
    B.List_1uL = A._setArrayType(makeConstList([-23376435, 1410446, -22253753, -12899614, 30867635, 15826977, 17693930, 544696, -11985298, 12422646]), type$.JSArray_int);
    B.FieldElement_IVQ = new A.FieldElement(B.List_1uL);
    B.List_ovO = A._setArrayType(makeConstList([31117226, -12215734, -13502838, 6561947, -9876867, -12757670, -5118685, -4096706, 29120153, 13924425]), type$.JSArray_int);
    B.FieldElement_YsI = new A.FieldElement(B.List_ovO);
    B.List_gsm1 = A._setArrayType(makeConstList([-17400879, -14233209, 19675799, -2734756, -11006962, -5858820, -9383939, -11317700, 7240931, -237388]), type$.JSArray_int);
    B.FieldElement_vb01 = new A.FieldElement(B.List_gsm1);
    B.GroupElementPrecomp_WfU = new A.GroupElementPrecomp(B.FieldElement_IVQ, B.FieldElement_YsI, B.FieldElement_vb01);
    B.List_DNx = A._setArrayType(makeConstList([-31361739, -11346780, -15007447, -5856218, -22453340, -12152771, 1222336, 4389483, 3293637, -15551743]), type$.JSArray_int);
    B.FieldElement_71d = new A.FieldElement(B.List_DNx);
    B.List_bEa = A._setArrayType(makeConstList([-16684801, -14444245, 11038544, 11054958, -13801175, -3338533, -24319580, 7733547, 12796905, -6335822]), type$.JSArray_int);
    B.FieldElement_qBY = new A.FieldElement(B.List_bEa);
    B.List_07 = A._setArrayType(makeConstList([-8759414, -10817836, -25418864, 10783769, -30615557, -9746811, -28253339, 3647836, 3222231, -11160462]), type$.JSArray_int);
    B.FieldElement_43h2 = new A.FieldElement(B.List_07);
    B.GroupElementPrecomp_86b = new A.GroupElementPrecomp(B.FieldElement_71d, B.FieldElement_qBY, B.FieldElement_43h2);
    B.List_kUZ0 = A._setArrayType(makeConstList([18606113, 1693100, -25448386, -15170272, 4112353, 10045021, 23603893, -2048234, -7550776, 2484985]), type$.JSArray_int);
    B.FieldElement_aDt0 = new A.FieldElement(B.List_kUZ0);
    B.List_GMs = A._setArrayType(makeConstList([9255317, -3131197, -12156162, -1004256, 13098013, -9214866, 16377220, -2102812, -19802075, -3034702]), type$.JSArray_int);
    B.FieldElement_Icb = new A.FieldElement(B.List_GMs);
    B.List_iSY = A._setArrayType(makeConstList([-22729289, 7496160, -5742199, 11329249, 19991973, -3347502, -31718148, 9936966, -30097688, -10618797]), type$.JSArray_int);
    B.FieldElement_rFk = new A.FieldElement(B.List_iSY);
    B.GroupElementPrecomp_gg4 = new A.GroupElementPrecomp(B.FieldElement_aDt0, B.FieldElement_Icb, B.FieldElement_rFk);
    B.List_03s = A._setArrayType(makeConstList([21878590, -5001297, 4338336, 13643897, -3036865, 13160960, 19708896, 5415497, -7360503, -4109293]), type$.JSArray_int);
    B.FieldElement_igS = new A.FieldElement(B.List_03s);
    B.List_d5w = A._setArrayType(makeConstList([27736861, 10103576, 12500508, 8502413, -3413016, -9633558, 10436918, -1550276, -23659143, -8132100]), type$.JSArray_int);
    B.FieldElement_kiE = new A.FieldElement(B.List_d5w);
    B.List_7h5 = A._setArrayType(makeConstList([19492550, -12104365, -29681976, -852630, -3208171, 12403437, 30066266, 8367329, 13243957, 8709688]), type$.JSArray_int);
    B.FieldElement_mOy = new A.FieldElement(B.List_7h5);
    B.GroupElementPrecomp_tAJ = new A.GroupElementPrecomp(B.FieldElement_igS, B.FieldElement_kiE, B.FieldElement_mOy);
    B.List_bvx = A._setArrayType(makeConstList([B.GroupElementPrecomp_ccK, B.GroupElementPrecomp_vAN, B.GroupElementPrecomp_9Ml, B.GroupElementPrecomp_46y, B.GroupElementPrecomp_WfU, B.GroupElementPrecomp_86b, B.GroupElementPrecomp_gg4, B.GroupElementPrecomp_tAJ]), type$.JSArray_GroupElementPrecomp);
    B.List_vuL = A._setArrayType(makeConstList([12015105, 2801261, 28198131, 10151021, 24818120, -4743133, -11194191, -5645734, 5150968, 7274186]), type$.JSArray_int);
    B.FieldElement_705 = new A.FieldElement(B.List_vuL);
    B.List_AKD = A._setArrayType(makeConstList([2831366, -12492146, 1478975, 6122054, 23825128, -12733586, 31097299, 6083058, 31021603, -9793610]), type$.JSArray_int);
    B.FieldElement_mC8 = new A.FieldElement(B.List_AKD);
    B.List_kiE0 = A._setArrayType(makeConstList([-2529932, -2229646, 445613, 10720828, -13849527, -11505937, -23507731, 16354465, 15067285, -14147707]), type$.JSArray_int);
    B.FieldElement_6Xs = new A.FieldElement(B.List_kiE0);
    B.GroupElementPrecomp_8aB = new A.GroupElementPrecomp(B.FieldElement_705, B.FieldElement_mC8, B.FieldElement_6Xs);
    B.List_Mhf = A._setArrayType(makeConstList([7840942, 14037873, -33364863, 15934016, -728213, -3642706, 21403988, 1057586, -19379462, -12403220]), type$.JSArray_int);
    B.FieldElement_y8Y = new A.FieldElement(B.List_Mhf);
    B.List_sEs = A._setArrayType(makeConstList([915865, -16469274, 15608285, -8789130, -24357026, 6060030, -17371319, 8410997, -7220461, 16527025]), type$.JSArray_int);
    B.FieldElement_r5C = new A.FieldElement(B.List_sEs);
    B.List_AHF = A._setArrayType(makeConstList([32922597, -556987, 20336074, -16184568, 10903705, -5384487, 16957574, 52992, 23834301, 6588044]), type$.JSArray_int);
    B.FieldElement_X5Q = new A.FieldElement(B.List_AHF);
    B.GroupElementPrecomp_k0P = new A.GroupElementPrecomp(B.FieldElement_y8Y, B.FieldElement_r5C, B.FieldElement_X5Q);
    B.List_8GP = A._setArrayType(makeConstList([32752030, 11232950, 3381995, -8714866, 22652988, -10744103, 17159699, 16689107, -20314580, -1305992]), type$.JSArray_int);
    B.FieldElement_7bq = new A.FieldElement(B.List_8GP);
    B.List_UI4 = A._setArrayType(makeConstList([-4689649, 9166776, -25710296, -10847306, 11576752, 12733943, 7924251, -2752281, 1976123, -7249027]), type$.JSArray_int);
    B.FieldElement_mzi = new A.FieldElement(B.List_UI4);
    B.List_QiG = A._setArrayType(makeConstList([21251222, 16309901, -2983015, -6783122, 30810597, 12967303, 156041, -3371252, 12331345, -8237197]), type$.JSArray_int);
    B.FieldElement_ODX = new A.FieldElement(B.List_QiG);
    B.GroupElementPrecomp_Wxi = new A.GroupElementPrecomp(B.FieldElement_7bq, B.FieldElement_mzi, B.FieldElement_ODX);
    B.List_DCx = A._setArrayType(makeConstList([8651614, -4477032, -16085636, -4996994, 13002507, 2950805, 29054427, -5106970, 10008136, -4667901]), type$.JSArray_int);
    B.FieldElement_Zqn = new A.FieldElement(B.List_DCx);
    B.List_2Es = A._setArrayType(makeConstList([31486080, 15114593, -14261250, 12951354, 14369431, -7387845, 16347321, -13662089, 8684155, -10532952]), type$.JSArray_int);
    B.FieldElement_kZA = new A.FieldElement(B.List_2Es);
    B.List_6xV = A._setArrayType(makeConstList([19443825, 11385320, 24468943, -9659068, -23919258, 2187569, -26263207, -6086921, 31316348, 14219878]), type$.JSArray_int);
    B.FieldElement_2Vk = new A.FieldElement(B.List_6xV);
    B.GroupElementPrecomp_6Vr = new A.GroupElementPrecomp(B.FieldElement_Zqn, B.FieldElement_kZA, B.FieldElement_2Vk);
    B.List_7h50 = A._setArrayType(makeConstList([-28594490, 1193785, 32245219, 11392485, 31092169, 15722801, 27146014, 6992409, 29126555, 9207390]), type$.JSArray_int);
    B.FieldElement_mOy0 = new A.FieldElement(B.List_7h50);
    B.List_2jN1 = A._setArrayType(makeConstList([32382935, 1110093, 18477781, 11028262, -27411763, -7548111, -4980517, 10843782, -7957600, -14435730]), type$.JSArray_int);
    B.FieldElement_vhV0 = new A.FieldElement(B.List_2jN1);
    B.List_2nn = A._setArrayType(makeConstList([2814918, 7836403, 27519878, -7868156, -20894015, -11553689, -21494559, 8550130, 28346258, 1994730]), type$.JSArray_int);
    B.FieldElement_94A = new A.FieldElement(B.List_2nn);
    B.GroupElementPrecomp_00 = new A.GroupElementPrecomp(B.FieldElement_mOy0, B.FieldElement_vhV0, B.FieldElement_94A);
    B.List_G37 = A._setArrayType(makeConstList([-19578299, 8085545, -14000519, -3948622, 2785838, -16231307, -19516951, 7174894, 22628102, 8115180]), type$.JSArray_int);
    B.FieldElement_95J = new A.FieldElement(B.List_G37);
    B.List_ccv = A._setArrayType(makeConstList([-30405132, 955511, -11133838, -15078069, -32447087, -13278079, -25651578, 3317160, -9943017, 930272]), type$.JSArray_int);
    B.FieldElement_iOG = new A.FieldElement(B.List_ccv);
    B.List_2No1 = A._setArrayType(makeConstList([-15303681, -6833769, 28856490, 1357446, 23421993, 1057177, 24091212, -1388970, -22765376, -10650715]), type$.JSArray_int);
    B.FieldElement_Qwu = new A.FieldElement(B.List_2No1);
    B.GroupElementPrecomp_qIL = new A.GroupElementPrecomp(B.FieldElement_95J, B.FieldElement_iOG, B.FieldElement_Qwu);
    B.List_o53 = A._setArrayType(makeConstList([-22751231, -5303997, -12907607, -12768866, -15811511, -7797053, -14839018, -16554220, -1867018, 8398970]), type$.JSArray_int);
    B.FieldElement_wmQ = new A.FieldElement(B.List_o53);
    B.List_IYB = A._setArrayType(makeConstList([-31969310, 2106403, -4736360, 1362501, 12813763, 16200670, 22981545, -6291273, 18009408, -15772772]), type$.JSArray_int);
    B.FieldElement_OXJ = new A.FieldElement(B.List_IYB);
    B.List_P1M = A._setArrayType(makeConstList([-17220923, -9545221, -27784654, 14166835, 29815394, 7444469, 29551787, -3727419, 19288549, 1325865]), type$.JSArray_int);
    B.FieldElement_wrk = new A.FieldElement(B.List_P1M);
    B.GroupElementPrecomp_Art = new A.GroupElementPrecomp(B.FieldElement_wmQ, B.FieldElement_OXJ, B.FieldElement_wrk);
    B.List_cg9 = A._setArrayType(makeConstList([15100157, -15835752, -23923978, -1005098, -26450192, 15509408, 12376730, -3479146, 33166107, -8042750]), type$.JSArray_int);
    B.FieldElement_IUR = new A.FieldElement(B.List_cg9);
    B.List_0uR = A._setArrayType(makeConstList([20909231, 13023121, -9209752, 16251778, -5778415, -8094914, 12412151, 10018715, 2213263, -13878373]), type$.JSArray_int);
    B.FieldElement_uAS = new A.FieldElement(B.List_0uR);
    B.List_weg = A._setArrayType(makeConstList([32529814, -11074689, 30361439, -16689753, -9135940, 1513226, 22922121, 6382134, -5766928, 8371348]), type$.JSArray_int);
    B.FieldElement_2No = new A.FieldElement(B.List_weg);
    B.GroupElementPrecomp_AaH = new A.GroupElementPrecomp(B.FieldElement_IUR, B.FieldElement_uAS, B.FieldElement_2No);
    B.List_4Oj = A._setArrayType(makeConstList([B.GroupElementPrecomp_8aB, B.GroupElementPrecomp_k0P, B.GroupElementPrecomp_Wxi, B.GroupElementPrecomp_6Vr, B.GroupElementPrecomp_00, B.GroupElementPrecomp_qIL, B.GroupElementPrecomp_Art, B.GroupElementPrecomp_AaH]), type$.JSArray_GroupElementPrecomp);
    B.List_TTS = A._setArrayType(makeConstList([9923462, 11271500, 12616794, 3544722, -29998368, -1721626, 12891687, -8193132, -26442943, 10486144]), type$.JSArray_int);
    B.FieldElement_myi = new A.FieldElement(B.List_TTS);
    B.List_1Gf = A._setArrayType(makeConstList([-22597207, -7012665, 8587003, -8257861, 4084309, -12970062, 361726, 2610596, -23921530, -11455195]), type$.JSArray_int);
    B.FieldElement_knt = new A.FieldElement(B.List_1Gf);
    B.List_zDx = A._setArrayType(makeConstList([5408411, -1136691, -4969122, 10561668, 24145918, 14240566, 31319731, -4235541, 19985175, -3436086]), type$.JSArray_int);
    B.FieldElement_4uu = new A.FieldElement(B.List_zDx);
    B.GroupElementPrecomp_OFX = new A.GroupElementPrecomp(B.FieldElement_myi, B.FieldElement_knt, B.FieldElement_4uu);
    B.List_cc6 = A._setArrayType(makeConstList([-13994457, 16616821, 14549246, 3341099, 32155958, 13648976, -17577068, 8849297, 65030, 8370684]), type$.JSArray_int);
    B.FieldElement_z3s = new A.FieldElement(B.List_cc6);
    B.List_Ow8 = A._setArrayType(makeConstList([-8320926, -12049626, 31204563, 5839400, -20627288, -1057277, -19442942, 6922164, 12743482, -9800518]), type$.JSArray_int);
    B.FieldElement_JFt = new A.FieldElement(B.List_Ow8);
    B.List_GgV = A._setArrayType(makeConstList([-2361371, 12678785, 28815050, 4759974, -23893047, 4884717, 23783145, 11038569, 18800704, 255233]), type$.JSArray_int);
    B.FieldElement_RoN = new A.FieldElement(B.List_GgV);
    B.GroupElementPrecomp_EKn = new A.GroupElementPrecomp(B.FieldElement_z3s, B.FieldElement_JFt, B.FieldElement_RoN);
    B.List_PDg = A._setArrayType(makeConstList([-5269658, -1773886, 13957886, 7990715, 23132995, 728773, 13393847, 9066957, 19258688, -14753793]), type$.JSArray_int);
    B.FieldElement_7Nz = new A.FieldElement(B.List_PDg);
    B.List_2ad = A._setArrayType(makeConstList([-2936654, -10827535, -10432089, 14516793, -3640786, 4372541, -31934921, 2209390, -1524053, 2055794]), type$.JSArray_int);
    B.FieldElement_V6j = new A.FieldElement(B.List_2ad);
    B.List_OOr = A._setArrayType(makeConstList([580882, 16705327, 5468415, -2683018, -30926419, -14696000, -7203346, -8994389, -30021019, 7394435]), type$.JSArray_int);
    B.FieldElement_kTd = new A.FieldElement(B.List_OOr);
    B.GroupElementPrecomp_m1a = new A.GroupElementPrecomp(B.FieldElement_7Nz, B.FieldElement_V6j, B.FieldElement_kTd);
    B.List_Ryi = A._setArrayType(makeConstList([23838809, 1822728, -15738443, 15242727, 8318092, -3733104, -21672180, -3492205, -4821741, 14799921]), type$.JSArray_int);
    B.FieldElement_5m4 = new A.FieldElement(B.List_Ryi);
    B.List_NIe = A._setArrayType(makeConstList([13345610, 9759151, 3371034, -16137791, 16353039, 8577942, 31129804, 13496856, -9056018, 7402518]), type$.JSArray_int);
    B.FieldElement_kXN = new A.FieldElement(B.List_NIe);
    B.List_Auo = A._setArrayType(makeConstList([2286874, -4435931, -20042458, -2008336, -13696227, 5038122, 11006906, -15760352, 8205061, 1607563]), type$.JSArray_int);
    B.FieldElement_uh4 = new A.FieldElement(B.List_Auo);
    B.GroupElementPrecomp_u9T = new A.GroupElementPrecomp(B.FieldElement_5m4, B.FieldElement_kXN, B.FieldElement_uh4);
    B.List_0Zj = A._setArrayType(makeConstList([14414086, -8002132, 3331830, -3208217, 22249151, -5594188, 18364661, -2906958, 30019587, -9029278]), type$.JSArray_int);
    B.FieldElement_chs = new A.FieldElement(B.List_0Zj);
    B.List_kWj = A._setArrayType(makeConstList([-27688051, 1585953, -10775053, 931069, -29120221, -11002319, -14410829, 12029093, 9944378, 8024]), type$.JSArray_int);
    B.FieldElement_xHK = new A.FieldElement(B.List_kWj);
    B.List_izR = A._setArrayType(makeConstList([4368715, -3709630, 29874200, -15022983, -20230386, -11410704, -16114594, -999085, -8142388, 5640030]), type$.JSArray_int);
    B.FieldElement_2IO = new A.FieldElement(B.List_izR);
    B.GroupElementPrecomp_FGJ = new A.GroupElementPrecomp(B.FieldElement_chs, B.FieldElement_xHK, B.FieldElement_2IO);
    B.List_eZE = A._setArrayType(makeConstList([10299610, 13746483, 11661824, 16234854, 7630238, 5998374, 9809887, -16694564, 15219798, -14327783]), type$.JSArray_int);
    B.FieldElement_AuK = new A.FieldElement(B.List_eZE);
    B.List_QuW = A._setArrayType(makeConstList([27425505, -5719081, 3055006, 10660664, 23458024, 595578, -15398605, -1173195, -18342183, 9742717]), type$.JSArray_int);
    B.FieldElement_ybR = new A.FieldElement(B.List_QuW);
    B.List_Oxe = A._setArrayType(makeConstList([6744077, 2427284, 26042789, 2720740, -847906, 1118974, 32324614, 7406442, 12420155, 1994844]), type$.JSArray_int);
    B.FieldElement_sav0 = new A.FieldElement(B.List_Oxe);
    B.GroupElementPrecomp_Prt = new A.GroupElementPrecomp(B.FieldElement_AuK, B.FieldElement_ybR, B.FieldElement_sav0);
    B.List_k45 = A._setArrayType(makeConstList([14012521, -5024720, -18384453, -9578469, -26485342, -3936439, -13033478, -10909803, 24319929, -6446333]), type$.JSArray_int);
    B.FieldElement_2Ti = new A.FieldElement(B.List_k45);
    B.List_gf1 = A._setArrayType(makeConstList([16412690, -4507367, 10772641, 15929391, -17068788, -4658621, 10555945, -10484049, -30102368, -4739048]), type$.JSArray_int);
    B.FieldElement_I1G = new A.FieldElement(B.List_gf1);
    B.List_1eZ = A._setArrayType(makeConstList([22397382, -7767684, -9293161, -12792868, 17166287, -9755136, -27333065, 6199366, 21880021, -12250760]), type$.JSArray_int);
    B.FieldElement_Lpv = new A.FieldElement(B.List_1eZ);
    B.GroupElementPrecomp_X7p = new A.GroupElementPrecomp(B.FieldElement_2Ti, B.FieldElement_I1G, B.FieldElement_Lpv);
    B.List_Knl = A._setArrayType(makeConstList([-4283307, 5368523, -31117018, 8163389, -30323063, 3209128, 16557151, 8890729, 8840445, 4957760]), type$.JSArray_int);
    B.FieldElement_ifx = new A.FieldElement(B.List_Knl);
    B.List_G2x = A._setArrayType(makeConstList([-15447727, 709327, -6919446, -10870178, -29777922, 6522332, -21720181, 12130072, -14796503, 5005757]), type$.JSArray_int);
    B.FieldElement_gkc2 = new A.FieldElement(B.List_G2x);
    B.List_mRl = A._setArrayType(makeConstList([-2114751, -14308128, 23019042, 15765735, -25269683, 6002752, 10183197, -13239326, -16395286, -2176112]), type$.JSArray_int);
    B.FieldElement_6BT = new A.FieldElement(B.List_mRl);
    B.GroupElementPrecomp_Usk = new A.GroupElementPrecomp(B.FieldElement_ifx, B.FieldElement_gkc2, B.FieldElement_6BT);
    B.List_yuV = A._setArrayType(makeConstList([B.GroupElementPrecomp_OFX, B.GroupElementPrecomp_EKn, B.GroupElementPrecomp_m1a, B.GroupElementPrecomp_u9T, B.GroupElementPrecomp_FGJ, B.GroupElementPrecomp_Prt, B.GroupElementPrecomp_X7p, B.GroupElementPrecomp_Usk]), type$.JSArray_GroupElementPrecomp);
    B.List_8WR = A._setArrayType(makeConstList([-19025756, 1632005, 13466291, -7995100, -23640451, 16573537, -32013908, -3057104, 22208662, 2000468]), type$.JSArray_int);
    B.FieldElement_SBU = new A.FieldElement(B.List_8WR);
    B.List_sgX = A._setArrayType(makeConstList([3065073, -1412761, -25598674, -361432, -17683065, -5703415, -8164212, 11248527, -3691214, -7414184]), type$.JSArray_int);
    B.FieldElement_iDl = new A.FieldElement(B.List_sgX);
    B.List_fFd = A._setArrayType(makeConstList([10379208, -6045554, 8877319, 1473647, -29291284, -12507580, 16690915, 2553332, -3132688, 16400289]), type$.JSArray_int);
    B.FieldElement_5tJ = new A.FieldElement(B.List_fFd);
    B.GroupElementPrecomp_MMc = new A.GroupElementPrecomp(B.FieldElement_SBU, B.FieldElement_iDl, B.FieldElement_5tJ);
    B.List_XAz = A._setArrayType(makeConstList([15716668, 1254266, -18472690, 7446274, -8448918, 6344164, -22097271, -7285580, 26894937, 9132066]), type$.JSArray_int);
    B.FieldElement_mS8 = new A.FieldElement(B.List_XAz);
    B.List_Ogy = A._setArrayType(makeConstList([24158887, 12938817, 11085297, -8177598, -28063478, -4457083, -30576463, 64452, -6817084, -2692882]), type$.JSArray_int);
    B.FieldElement_kQW = new A.FieldElement(B.List_Ogy);
    B.List_2No2 = A._setArrayType(makeConstList([13488534, 7794716, 22236231, 5989356, 25426474, -12578208, 2350710, -3418511, -4688006, 2364226]), type$.JSArray_int);
    B.FieldElement_Qwu0 = new A.FieldElement(B.List_2No2);
    B.GroupElementPrecomp_kyQ = new A.GroupElementPrecomp(B.FieldElement_mS8, B.FieldElement_kQW, B.FieldElement_Qwu0);
    B.List_Aa4 = A._setArrayType(makeConstList([16335052, 9132434, 25640582, 6678888, 1725628, 8517937, -11807024, -11697457, 15445875, -7798101]), type$.JSArray_int);
    B.FieldElement_GVi = new A.FieldElement(B.List_Aa4);
    B.List_wEo0 = A._setArrayType(makeConstList([29004207, -7867081, 28661402, -640412, -12794003, -7943086, 31863255, -4135540, -278050, -15759279]), type$.JSArray_int);
    B.FieldElement_DsB0 = new A.FieldElement(B.List_wEo0);
    B.List_IZS = A._setArrayType(makeConstList([-6122061, -14866665, -28614905, 14569919, -10857999, -3591829, 10343412, -6976290, -29828287, -10815811]), type$.JSArray_int);
    B.FieldElement_G31 = new A.FieldElement(B.List_IZS);
    B.GroupElementPrecomp_iZu = new A.GroupElementPrecomp(B.FieldElement_GVi, B.FieldElement_DsB0, B.FieldElement_G31);
    B.List_nYx = A._setArrayType(makeConstList([27081650, 3463984, 14099042, -4517604, 1616303, -6205604, 29542636, 15372179, 17293797, 960709]), type$.JSArray_int);
    B.FieldElement_woc = new A.FieldElement(B.List_nYx);
    B.List_iii = A._setArrayType(makeConstList([20263915, 11434237, -5765435, 11236810, 13505955, -10857102, -16111345, 6493122, -19384511, 7639714]), type$.JSArray_int);
    B.FieldElement_atK = new A.FieldElement(B.List_iii);
    B.List_rMO = A._setArrayType(makeConstList([-2830798, -14839232, 25403038, -8215196, -8317012, -16173699, 18006287, -16043750, 29994677, -15808121]), type$.JSArray_int);
    B.FieldElement_MYA = new A.FieldElement(B.List_rMO);
    B.GroupElementPrecomp_YEj = new A.GroupElementPrecomp(B.FieldElement_woc, B.FieldElement_atK, B.FieldElement_MYA);
    B.List_yPV0 = A._setArrayType(makeConstList([9769828, 5202651, -24157398, -13631392, -28051003, -11561624, -24613141, -13860782, -31184575, 709464]), type$.JSArray_int);
    B.FieldElement_i6P0 = new A.FieldElement(B.List_yPV0);
    B.List_yWu = A._setArrayType(makeConstList([12286395, 13076066, -21775189, -1176622, -25003198, 4057652, -32018128, -8890874, 16102007, 13205847]), type$.JSArray_int);
    B.FieldElement_oqK = new A.FieldElement(B.List_yWu);
    B.List_IQI = A._setArrayType(makeConstList([13733362, 5599946, 10557076, 3195751, -5557991, 8536970, -25540170, 8525972, 10151379, 10394400]), type$.JSArray_int);
    B.FieldElement_27p = new A.FieldElement(B.List_IQI);
    B.GroupElementPrecomp_yHF = new A.GroupElementPrecomp(B.FieldElement_i6P0, B.FieldElement_oqK, B.FieldElement_27p);
    B.List_66y = A._setArrayType(makeConstList([4024660, -16137551, 22436262, 12276534, -9099015, -2686099, 19698229, 11743039, -33302334, 8934414]), type$.JSArray_int);
    B.FieldElement_RA5 = new A.FieldElement(B.List_66y);
    B.List_Dfi = A._setArrayType(makeConstList([-15879800, -4525240, -8580747, -2934061, 14634845, -698278, -9449077, 3137094, -11536886, 11721158]), type$.JSArray_int);
    B.FieldElement_IVQ0 = new A.FieldElement(B.List_Dfi);
    B.List_aJC = A._setArrayType(makeConstList([17555939, -5013938, 8268606, 2331751, -22738815, 9761013, 9319229, 8835153, -9205489, -1280045]), type$.JSArray_int);
    B.FieldElement_AKW0 = new A.FieldElement(B.List_aJC);
    B.GroupElementPrecomp_aWR = new A.GroupElementPrecomp(B.FieldElement_RA5, B.FieldElement_IVQ0, B.FieldElement_AKW0);
    B.List_so3 = A._setArrayType(makeConstList([-461409, -7830014, 20614118, 16688288, -7514766, -4807119, 22300304, 505429, 6108462, -6183415]), type$.JSArray_int);
    B.FieldElement_oCp = new A.FieldElement(B.List_so3);
    B.List_sVm = A._setArrayType(makeConstList([-5070281, 12367917, -30663534, 3234473, 32617080, -8422642, 29880583, -13483331, -26898490, -7867459]), type$.JSArray_int);
    B.FieldElement_ZrR = new A.FieldElement(B.List_sVm);
    B.List_0yC = A._setArrayType(makeConstList([-31975283, 5726539, 26934134, 10237677, -3173717, -605053, 24199304, 3795095, 7592688, -14992079]), type$.JSArray_int);
    B.FieldElement_04 = new A.FieldElement(B.List_0yC);
    B.GroupElementPrecomp_Art0 = new A.GroupElementPrecomp(B.FieldElement_oCp, B.FieldElement_ZrR, B.FieldElement_04);
    B.List_iLB = A._setArrayType(makeConstList([21594432, -14964228, 17466408, -4077222, 32537084, 2739898, 6407723, 12018833, -28256052, 4298412]), type$.JSArray_int);
    B.FieldElement_t0h = new A.FieldElement(B.List_iLB);
    B.List_ACx = A._setArrayType(makeConstList([-20650503, -11961496, -27236275, 570498, 3767144, -1717540, 13891942, -1569194, 13717174, 10805743]), type$.JSArray_int);
    B.FieldElement_gkJ = new A.FieldElement(B.List_ACx);
    B.List_ESz0 = A._setArrayType(makeConstList([-14676630, -15644296, 15287174, 11927123, 24177847, -8175568, -796431, 14860609, -26938930, -5863836]), type$.JSArray_int);
    B.FieldElement_P1S0 = new A.FieldElement(B.List_ESz0);
    B.GroupElementPrecomp_klf = new A.GroupElementPrecomp(B.FieldElement_t0h, B.FieldElement_gkJ, B.FieldElement_P1S0);
    B.List_qJO = A._setArrayType(makeConstList([B.GroupElementPrecomp_MMc, B.GroupElementPrecomp_kyQ, B.GroupElementPrecomp_iZu, B.GroupElementPrecomp_YEj, B.GroupElementPrecomp_yHF, B.GroupElementPrecomp_aWR, B.GroupElementPrecomp_Art0, B.GroupElementPrecomp_klf]), type$.JSArray_GroupElementPrecomp);
    B.List_6In = A._setArrayType(makeConstList([12962541, 5311799, -10060768, 11658280, 18855286, -7954201, 13286263, -12808704, -4381056, 9882022]), type$.JSArray_int);
    B.FieldElement_vCm = new A.FieldElement(B.List_6In);
    B.List_Dp5 = A._setArrayType(makeConstList([18512079, 11319350, -20123124, 15090309, 18818594, 5271736, -22727904, 3666879, -23967430, -3299429]), type$.JSArray_int);
    B.FieldElement_npY = new A.FieldElement(B.List_Dp5);
    B.List_Cnn = A._setArrayType(makeConstList([-6789020, -3146043, 16192429, 13241070, 15898607, -14206114, -10084880, -6661110, -2403099, 5276065]), type$.JSArray_int);
    B.FieldElement_3Hh = new A.FieldElement(B.List_Cnn);
    B.GroupElementPrecomp_MIo = new A.GroupElementPrecomp(B.FieldElement_vCm, B.FieldElement_npY, B.FieldElement_3Hh);
    B.List_AOy = A._setArrayType(makeConstList([30169808, -5317648, 26306206, -11750859, 27814964, 7069267, 7152851, 3684982, 1449224, 13082861]), type$.JSArray_int);
    B.FieldElement_Qsx = new A.FieldElement(B.List_AOy);
    B.List_poT = A._setArrayType(makeConstList([10342826, 3098505, 2119311, 193222, 25702612, 12233820, 23697382, 15056736, -21016438, -8202000]), type$.JSArray_int);
    B.FieldElement_ybB = new A.FieldElement(B.List_poT);
    B.List_O5j = A._setArrayType(makeConstList([-33150110, 3261608, 22745853, 7948688, 19370557, -15177665, -26171976, 6482814, -10300080, -11060101]), type$.JSArray_int);
    B.FieldElement_qZL = new A.FieldElement(B.List_O5j);
    B.GroupElementPrecomp_XHP = new A.GroupElementPrecomp(B.FieldElement_Qsx, B.FieldElement_ybB, B.FieldElement_qZL);
    B.List_Wnt = A._setArrayType(makeConstList([32869458, -5408545, 25609743, 15678670, -10687769, -15471071, 26112421, 2521008, -22664288, 6904815]), type$.JSArray_int);
    B.FieldElement_sJO = new A.FieldElement(B.List_Wnt);
    B.List_jr3 = A._setArrayType(makeConstList([29506923, 4457497, 3377935, -9796444, -30510046, 12935080, 1561737, 3841096, -29003639, -6657642]), type$.JSArray_int);
    B.FieldElement_MEl = new A.FieldElement(B.List_jr3);
    B.List_ysZ = A._setArrayType(makeConstList([10340844, -6630377, -18656632, -2278430, 12621151, -13339055, 30878497, -11824370, -25584551, 5181966]), type$.JSArray_int);
    B.FieldElement_2Vk0 = new A.FieldElement(B.List_ysZ);
    B.GroupElementPrecomp_g0k = new A.GroupElementPrecomp(B.FieldElement_sJO, B.FieldElement_MEl, B.FieldElement_2Vk0);
    B.List_GJ5 = A._setArrayType(makeConstList([25940115, -12658025, 17324188, -10307374, -8671468, 15029094, 24396252, -16450922, -2322852, -12388574]), type$.JSArray_int);
    B.FieldElement_05 = new A.FieldElement(B.List_GJ5);
    B.List_alK = A._setArrayType(makeConstList([-21765684, 9916823, -1300409, 4079498, -1028346, 11909559, 1782390, 12641087, 20603771, -6561742]), type$.JSArray_int);
    B.FieldElement_bso = new A.FieldElement(B.List_alK);
    B.List_vtl = A._setArrayType(makeConstList([-18882287, -11673380, 24849422, 11501709, 13161720, -4768874, 1925523, 11914390, 4662781, 7820689]), type$.JSArray_int);
    B.FieldElement_GLe = new A.FieldElement(B.List_vtl);
    B.GroupElementPrecomp_q6f = new A.GroupElementPrecomp(B.FieldElement_05, B.FieldElement_bso, B.FieldElement_GLe);
    B.List_JtU = A._setArrayType(makeConstList([12241050, -425982, 8132691, 9393934, 32846760, -1599620, 29749456, 12172924, 16136752, 15264020]), type$.JSArray_int);
    B.FieldElement_gJC = new A.FieldElement(B.List_JtU);
    B.List_sBE = A._setArrayType(makeConstList([-10349955, -14680563, -8211979, 2330220, -17662549, -14545780, 10658213, 6671822, 19012087, 3772772]), type$.JSArray_int);
    B.FieldElement_BeS = new A.FieldElement(B.List_sBE);
    B.List_ael = A._setArrayType(makeConstList([3753511, -3421066, 10617074, 2028709, 14841030, -6721664, 28718732, -15762884, 20527771, 12988982]), type$.JSArray_int);
    B.FieldElement_SM2 = new A.FieldElement(B.List_ael);
    B.GroupElementPrecomp_zrt = new A.GroupElementPrecomp(B.FieldElement_gJC, B.FieldElement_BeS, B.FieldElement_SM2);
    B.List_GZF = A._setArrayType(makeConstList([-14822485, -5797269, -3707987, 12689773, -898983, -10914866, -24183046, -10564943, 3299665, -12424953]), type$.JSArray_int);
    B.FieldElement_7N7 = new A.FieldElement(B.List_GZF);
    B.List_Art = A._setArrayType(makeConstList([-16777703, -15253301, -9642417, 4978983, 3308785, 8755439, 6943197, 6461331, -25583147, 8991218]), type$.JSArray_int);
    B.FieldElement_cdV = new A.FieldElement(B.List_Art);
    B.List_8aB2 = A._setArrayType(makeConstList([-17226263, 1816362, -1673288, -6086439, 31783888, -8175991, -32948145, 7417950, -30242287, 1507265]), type$.JSArray_int);
    B.FieldElement_PBP = new A.FieldElement(B.List_8aB2);
    B.GroupElementPrecomp_wEo = new A.GroupElementPrecomp(B.FieldElement_7N7, B.FieldElement_cdV, B.FieldElement_PBP);
    B.List_Iof = A._setArrayType(makeConstList([29692663, 6829891, -10498800, 4334896, 20945975, -11906496, -28887608, 8209391, 14606362, -10647073]), type$.JSArray_int);
    B.FieldElement_6HY = new A.FieldElement(B.List_Iof);
    B.List_Sof = A._setArrayType(makeConstList([-3481570, 8707081, 32188102, 5672294, 22096700, 1711240, -33020695, 9761487, 4170404, -2085325]), type$.JSArray_int);
    B.FieldElement_z0D = new A.FieldElement(B.List_Sof);
    B.List_woc = A._setArrayType(makeConstList([-11587470, 14855945, -4127778, -1531857, -26649089, 15084046, 22186522, 16002000, -14276837, -8400798]), type$.JSArray_int);
    B.FieldElement_QcT = new A.FieldElement(B.List_woc);
    B.GroupElementPrecomp_20O = new A.GroupElementPrecomp(B.FieldElement_6HY, B.FieldElement_z0D, B.FieldElement_QcT);
    B.List_kWM = A._setArrayType(makeConstList([-4811456, 13761029, -31703877, -2483919, -3312471, 7869047, -7113572, -9620092, 13240845, 10965870]), type$.JSArray_int);
    B.FieldElement_qZG = new A.FieldElement(B.List_kWM);
    B.List_7N7 = A._setArrayType(makeConstList([-7742563, -8256762, -14768334, -13656260, -23232383, 12387166, 4498947, 14147411, 29514390, 4302863]), type$.JSArray_int);
    B.FieldElement_KD2 = new A.FieldElement(B.List_7N7);
    B.List_CBH = A._setArrayType(makeConstList([-13413405, -12407859, 20757302, -13801832, 14785143, 8976368, -5061276, -2144373, 17846988, -13971927]), type$.JSArray_int);
    B.FieldElement_wW3 = new A.FieldElement(B.List_CBH);
    B.GroupElementPrecomp_U44 = new A.GroupElementPrecomp(B.FieldElement_qZG, B.FieldElement_KD2, B.FieldElement_wW3);
    B.List_Tfh = A._setArrayType(makeConstList([B.GroupElementPrecomp_MIo, B.GroupElementPrecomp_XHP, B.GroupElementPrecomp_g0k, B.GroupElementPrecomp_q6f, B.GroupElementPrecomp_zrt, B.GroupElementPrecomp_wEo, B.GroupElementPrecomp_20O, B.GroupElementPrecomp_U44]), type$.JSArray_GroupElementPrecomp);
    B.List_ACG = A._setArrayType(makeConstList([-2244452, -754728, -4597030, -1066309, -6247172, 1455299, -21647728, -9214789, -5222701, 12650267]), type$.JSArray_int);
    B.FieldElement_kdk = new A.FieldElement(B.List_ACG);
    B.List_wa9 = A._setArrayType(makeConstList([-9906797, -16070310, 21134160, 12198166, -27064575, 708126, 387813, 13770293, -19134326, 10958663]), type$.JSArray_int);
    B.FieldElement_QWq = new A.FieldElement(B.List_wa9);
    B.List_cc60 = A._setArrayType(makeConstList([22470984, 12369526, 23446014, -5441109, -21520802, -9698723, -11772496, -11574455, -25083830, 4271862]), type$.JSArray_int);
    B.FieldElement_z3s0 = new A.FieldElement(B.List_cc60);
    B.GroupElementPrecomp_8aB0 = new A.GroupElementPrecomp(B.FieldElement_kdk, B.FieldElement_QWq, B.FieldElement_z3s0);
    B.List_vit = A._setArrayType(makeConstList([-25169565, -10053642, -19909332, 15361595, -5984358, 2159192, 75375, -4278529, -32526221, 8469673]), type$.JSArray_int);
    B.FieldElement_wsa = new A.FieldElement(B.List_vit);
    B.List_r6V = A._setArrayType(makeConstList([15854970, 4148314, -8893890, 7259002, 11666551, 13824734, -30531198, 2697372, 24154791, -9460943]), type$.JSArray_int);
    B.FieldElement_g2v = new A.FieldElement(B.List_r6V);
    B.List_mSL = A._setArrayType(makeConstList([15446137, -15806644, 29759747, 14019369, 30811221, -9610191, -31582008, 12840104, 24913809, 9815020]), type$.JSArray_int);
    B.FieldElement_NlB = new A.FieldElement(B.List_mSL);
    B.GroupElementPrecomp_piR = new A.GroupElementPrecomp(B.FieldElement_wsa, B.FieldElement_g2v, B.FieldElement_NlB);
    B.List_Cdg = A._setArrayType(makeConstList([-4709286, -5614269, -31841498, -12288893, -14443537, 10799414, -9103676, 13438769, 18735128, 9466238]), type$.JSArray_int);
    B.FieldElement_ijJ = new A.FieldElement(B.List_Cdg);
    B.List_yXb0 = A._setArrayType(makeConstList([11933045, 9281483, 5081055, -5183824, -2628162, -4905629, -7727821, -10896103, -22728655, 16199064]), type$.JSArray_int);
    B.FieldElement_Fb00 = new A.FieldElement(B.List_yXb0);
    B.List_mtv = A._setArrayType(makeConstList([14576810, 379472, -26786533, -8317236, -29426508, -10812974, -102766, 1876699, 30801119, 2164795]), type$.JSArray_int);
    B.FieldElement_oqF = new A.FieldElement(B.List_mtv);
    B.GroupElementPrecomp_GfL = new A.GroupElementPrecomp(B.FieldElement_ijJ, B.FieldElement_Fb00, B.FieldElement_oqF);
    B.List_GN8 = A._setArrayType(makeConstList([15995086, 3199873, 13672555, 13712240, -19378835, -4647646, -13081610, -15496269, -13492807, 1268052]), type$.JSArray_int);
    B.FieldElement_aBG = new A.FieldElement(B.List_GN8);
    B.List_iil = A._setArrayType(makeConstList([-10290614, -3659039, -3286592, 10948818, 23037027, 3794475, -3470338, -12600221, -17055369, 3565904]), type$.JSArray_int);
    B.FieldElement_iS5 = new A.FieldElement(B.List_iil);
    B.List_EOZ = A._setArrayType(makeConstList([29210088, -9419337, -5919792, -4952785, 10834811, -13327726, -16512102, -10820713, -27162222, -14030531]), type$.JSArray_int);
    B.FieldElement_1yt = new A.FieldElement(B.List_EOZ);
    B.GroupElementPrecomp_gc6 = new A.GroupElementPrecomp(B.FieldElement_aBG, B.FieldElement_iS5, B.FieldElement_1yt);
    B.List_U4w = A._setArrayType(makeConstList([-13161890, 15508588, 16663704, -8156150, -28349942, 9019123, -29183421, -3769423, 2244111, -14001979]), type$.JSArray_int);
    B.FieldElement_gnE = new A.FieldElement(B.List_U4w);
    B.List_Qlo = A._setArrayType(makeConstList([-5152875, -3800936, -9306475, -6071583, 16243069, 14684434, -25673088, -16180800, 13491506, 4641841]), type$.JSArray_int);
    B.FieldElement_ASD = new A.FieldElement(B.List_Qlo);
    B.List_MQu = A._setArrayType(makeConstList([10813417, 643330, -19188515, -728916, 30292062, -16600078, 27548447, -7721242, 14476989, -12767431]), type$.JSArray_int);
    B.FieldElement_PTP0 = new A.FieldElement(B.List_MQu);
    B.GroupElementPrecomp_RfR = new A.GroupElementPrecomp(B.FieldElement_gnE, B.FieldElement_ASD, B.FieldElement_PTP0);
    B.List_st1 = A._setArrayType(makeConstList([10292079, 9984945, 6481436, 8279905, -7251514, 7032743, 27282937, -1644259, -27912810, 12651324]), type$.JSArray_int);
    B.FieldElement_Qic = new A.FieldElement(B.List_st1);
    B.List_mq4 = A._setArrayType(makeConstList([-31185513, -813383, 22271204, 11835308, 10201545, 15351028, 17099662, 3988035, 21721536, -3148940]), type$.JSArray_int);
    B.FieldElement_iGP = new A.FieldElement(B.List_mq4);
    B.List_GNx0 = A._setArrayType(makeConstList([10202177, -6545839, -31373232, -9574638, -32150642, -8119683, -12906320, 3852694, 13216206, 14842320]), type$.JSArray_int);
    B.FieldElement_U8c0 = new A.FieldElement(B.List_GNx0);
    B.GroupElementPrecomp_8Gl = new A.GroupElementPrecomp(B.FieldElement_Qic, B.FieldElement_iGP, B.FieldElement_U8c0);
    B.List_MQe = A._setArrayType(makeConstList([-15815640, -10601066, -6538952, -7258995, -6984659, -6581778, -31500847, 13765824, -27434397, 9900184]), type$.JSArray_int);
    B.FieldElement_v1P = new A.FieldElement(B.List_MQe);
    B.List_yo0 = A._setArrayType(makeConstList([14465505, -13833331, -32133984, -14738873, -27443187, 12990492, 33046193, 15796406, -7051866, -8040114]), type$.JSArray_int);
    B.FieldElement_ubj = new A.FieldElement(B.List_yo0);
    B.List_ffo = A._setArrayType(makeConstList([30924417, -8279620, 6359016, -12816335, 16508377, 9071735, -25488601, 15413635, 9524356, -7018878]), type$.JSArray_int);
    B.FieldElement_sEI = new A.FieldElement(B.List_ffo);
    B.GroupElementPrecomp_tBS = new A.GroupElementPrecomp(B.FieldElement_v1P, B.FieldElement_ubj, B.FieldElement_sEI);
    B.List_gg4 = A._setArrayType(makeConstList([12274201, -13175547, 32627641, -1785326, 6736625, 13267305, 5237659, -5109483, 15663516, 4035784]), type$.JSArray_int);
    B.FieldElement_3Kn = new A.FieldElement(B.List_gg4);
    B.List_P06 = A._setArrayType(makeConstList([-2951309, 8903985, 17349946, 601635, -16432815, -4612556, -13732739, -15889334, -22258478, 4659091]), type$.JSArray_int);
    B.FieldElement_4YB = new A.FieldElement(B.List_P06);
    B.List_ASY = A._setArrayType(makeConstList([-16916263, -4952973, -30393711, -15158821, 20774812, 15897498, 5736189, 15026997, -2178256, -13455585]), type$.JSArray_int);
    B.FieldElement_aGl = new A.FieldElement(B.List_ASY);
    B.GroupElementPrecomp_X7A = new A.GroupElementPrecomp(B.FieldElement_3Kn, B.FieldElement_4YB, B.FieldElement_aGl);
    B.List_EV9 = A._setArrayType(makeConstList([B.GroupElementPrecomp_8aB0, B.GroupElementPrecomp_piR, B.GroupElementPrecomp_GfL, B.GroupElementPrecomp_gc6, B.GroupElementPrecomp_RfR, B.GroupElementPrecomp_8Gl, B.GroupElementPrecomp_tBS, B.GroupElementPrecomp_X7A]), type$.JSArray_GroupElementPrecomp);
    B.List_ckn = A._setArrayType(makeConstList([-8858980, -2219056, 28571666, -10155518, -474467, -10105698, -3801496, 278095, 23440562, -290208]), type$.JSArray_int);
    B.FieldElement_4AN = new A.FieldElement(B.List_ckn);
    B.List_EKW = A._setArrayType(makeConstList([10226241, -5928702, 15139956, 120818, -14867693, 5218603, 32937275, 11551483, -16571960, -7442864]), type$.JSArray_int);
    B.FieldElement_27z = new A.FieldElement(B.List_EKW);
    B.List_Trw = A._setArrayType(makeConstList([17932739, -12437276, -24039557, 10749060, 11316803, 7535897, 22503767, 5561594, -3646624, 3898661]), type$.JSArray_int);
    B.FieldElement_s6V = new A.FieldElement(B.List_Trw);
    B.GroupElementPrecomp_d4L = new A.GroupElementPrecomp(B.FieldElement_4AN, B.FieldElement_27z, B.FieldElement_s6V);
    B.List_iLh = A._setArrayType(makeConstList([7749907, -969567, -16339731, -16464, -25018111, 15122143, -1573531, 7152530, 21831162, 1245233]), type$.JSArray_int);
    B.FieldElement_1Xh = new A.FieldElement(B.List_iLh);
    B.List_al8 = A._setArrayType(makeConstList([26958459, -14658026, 4314586, 8346991, -5677764, 11960072, -32589295, -620035, -30402091, -16716212]), type$.JSArray_int);
    B.FieldElement_tsz = new A.FieldElement(B.List_al8);
    B.List_80j = A._setArrayType(makeConstList([-12165896, 9166947, 33491384, 13673479, 29787085, 13096535, 6280834, 14587357, -22338025, 13987525]), type$.JSArray_int);
    B.FieldElement_Z7N = new A.FieldElement(B.List_80j);
    B.GroupElementPrecomp_mBr = new A.GroupElementPrecomp(B.FieldElement_1Xh, B.FieldElement_tsz, B.FieldElement_Z7N);
    B.List_zzp = A._setArrayType(makeConstList([-24349909, 7778775, 21116000, 15572597, -4833266, -5357778, -4300898, -5124639, -7469781, -2858068]), type$.JSArray_int);
    B.FieldElement_ewF = new A.FieldElement(B.List_zzp);
    B.List_uKs = A._setArrayType(makeConstList([9681908, -6737123, -31951644, 13591838, -6883821, 386950, 31622781, 6439245, -14581012, 4091397]), type$.JSArray_int);
    B.FieldElement_6pl = new A.FieldElement(B.List_uKs);
    B.List_uV6 = A._setArrayType(makeConstList([-8426427, 1470727, -28109679, -1596990, 3978627, -5123623, -19622683, 12092163, 29077877, -14741988]), type$.JSArray_int);
    B.FieldElement_qx40 = new A.FieldElement(B.List_uV6);
    B.GroupElementPrecomp_M2D = new A.GroupElementPrecomp(B.FieldElement_ewF, B.FieldElement_6pl, B.FieldElement_qx40);
    B.List_ato = A._setArrayType(makeConstList([5269168, -6859726, -13230211, -8020715, 25932563, 1763552, -5606110, -5505881, -20017847, 2357889]), type$.JSArray_int);
    B.FieldElement_fLp0 = new A.FieldElement(B.List_ato);
    B.List_2Px = A._setArrayType(makeConstList([32264008, -15407652, -5387735, -1160093, -2091322, -3946900, 23104804, -12869908, 5727338, 189038]), type$.JSArray_int);
    B.FieldElement_aWR = new A.FieldElement(B.List_2Px);
    B.List_dgo = A._setArrayType(makeConstList([14609123, -8954470, -6000566, -16622781, -14577387, -7743898, -26745169, 10942115, -25888931, -14884697]), type$.JSArray_int);
    B.FieldElement_Y8r = new A.FieldElement(B.List_dgo);
    B.GroupElementPrecomp_CFB = new A.GroupElementPrecomp(B.FieldElement_fLp0, B.FieldElement_aWR, B.FieldElement_Y8r);
    B.List_omC0 = A._setArrayType(makeConstList([20513500, 5557931, -15604613, 7829531, 26413943, -2019404, -21378968, 7471781, 13913677, -5137875]), type$.JSArray_int);
    B.FieldElement_JEK0 = new A.FieldElement(B.List_omC0);
    B.List_cw1 = A._setArrayType(makeConstList([-25574376, 11967826, 29233242, 12948236, -6754465, 4713227, -8940970, 14059180, 12878652, 8511905]), type$.JSArray_int);
    B.FieldElement_wAg = new A.FieldElement(B.List_cw1);
    B.List_oKF = A._setArrayType(makeConstList([-25656801, 3393631, -2955415, -7075526, -2250709, 9366908, -30223418, 6812974, 5568676, -3127656]), type$.JSArray_int);
    B.FieldElement_MYA0 = new A.FieldElement(B.List_oKF);
    B.GroupElementPrecomp_VWf = new A.GroupElementPrecomp(B.FieldElement_JEK0, B.FieldElement_wAg, B.FieldElement_MYA0);
    B.List_PIv = A._setArrayType(makeConstList([11630004, 12144454, 2116339, 13606037, 27378885, 15676917, -17408753, -13504373, -14395196, 8070818]), type$.JSArray_int);
    B.FieldElement_iDT = new A.FieldElement(B.List_PIv);
    B.List_int1 = A._setArrayType(makeConstList([27117696, -10007378, -31282771, -5570088, 1127282, 12772488, -29845906, 10483306, -11552749, -1028714]), type$.JSArray_int);
    B.FieldElement_wT11 = new A.FieldElement(B.List_int1);
    B.List_tmw = A._setArrayType(makeConstList([10637467, -5688064, 5674781, 1072708, -26343588, -6982302, -1683975, 9177853, -27493162, 15431203]), type$.JSArray_int);
    B.FieldElement_nbr = new A.FieldElement(B.List_tmw);
    B.GroupElementPrecomp_EyN = new A.GroupElementPrecomp(B.FieldElement_iDT, B.FieldElement_wT11, B.FieldElement_nbr);
    B.List_08 = A._setArrayType(makeConstList([20525145, 10892566, -12742472, 12779443, -29493034, 16150075, -28240519, 14943142, -15056790, -7935931]), type$.JSArray_int);
    B.FieldElement_43h3 = new A.FieldElement(B.List_08);
    B.List_Jeh = A._setArrayType(makeConstList([-30024462, 5626926, -551567, -9981087, 753598, 11981191, 25244767, -3239766, -3356550, 9594024]), type$.JSArray_int);
    B.FieldElement_ipv = new A.FieldElement(B.List_Jeh);
    B.List_09 = A._setArrayType(makeConstList([-23752644, 2636870, -5163910, -10103818, 585134, 7877383, 11345683, -6492290, 13352335, -10977084]), type$.JSArray_int);
    B.FieldElement_43h4 = new A.FieldElement(B.List_09);
    B.GroupElementPrecomp_BH6 = new A.GroupElementPrecomp(B.FieldElement_43h3, B.FieldElement_ipv, B.FieldElement_43h4);
    B.List_zPJ = A._setArrayType(makeConstList([-1931799, -5407458, 3304649, -12884869, 17015806, -4877091, -29783850, -7752482, -13215537, -319204]), type$.JSArray_int);
    B.FieldElement_yBD = new A.FieldElement(B.List_zPJ);
    B.List_86y0 = A._setArrayType(makeConstList([20239939, 6607058, 6203985, 3483793, -18386976, -779229, -20723742, 15077870, -22750759, 14523817]), type$.JSArray_int);
    B.FieldElement_4sk = new A.FieldElement(B.List_86y0);
    B.List_oyU0 = A._setArrayType(makeConstList([27406042, -6041657, 27423596, -4497394, 4996214, 10002360, -28842031, -4545494, -30172742, -4805667]), type$.JSArray_int);
    B.FieldElement_gkc3 = new A.FieldElement(B.List_oyU0);
    B.GroupElementPrecomp_pea = new A.GroupElementPrecomp(B.FieldElement_yBD, B.FieldElement_4sk, B.FieldElement_gkc3);
    B.List_cWd0 = A._setArrayType(makeConstList([B.GroupElementPrecomp_d4L, B.GroupElementPrecomp_mBr, B.GroupElementPrecomp_M2D, B.GroupElementPrecomp_CFB, B.GroupElementPrecomp_VWf, B.GroupElementPrecomp_EyN, B.GroupElementPrecomp_BH6, B.GroupElementPrecomp_pea]), type$.JSArray_GroupElementPrecomp);
    B.List_4QF2 = A._setArrayType(makeConstList([11374242, 12660715, 17861383, -12540833, 10935568, 1099227, -13886076, -9091740, -27727044, 11358504]), type$.JSArray_int);
    B.FieldElement_UEW2 = new A.FieldElement(B.List_4QF2);
    B.List_MYu = A._setArrayType(makeConstList([-12730809, 10311867, 1510375, 10778093, -2119455, -9145702, 32676003, 11149336, -26123651, 4985768]), type$.JSArray_int);
    B.FieldElement_bdS = new A.FieldElement(B.List_MYu);
    B.List_qnn = A._setArrayType(makeConstList([-19096303, 341147, -6197485, -239033, 15756973, -8796662, -983043, 13794114, -19414307, -15621255]), type$.JSArray_int);
    B.FieldElement_AgZ = new A.FieldElement(B.List_qnn);
    B.GroupElementPrecomp_8ml = new A.GroupElementPrecomp(B.FieldElement_UEW2, B.FieldElement_bdS, B.FieldElement_AgZ);
    B.List_ifx = A._setArrayType(makeConstList([6490081, 11940286, 25495923, -7726360, 8668373, -8751316, 3367603, 6970005, -1691065, -9004790]), type$.JSArray_int);
    B.FieldElement_U8E = new A.FieldElement(B.List_ifx);
    B.List_WK1 = A._setArrayType(makeConstList([1656497, 13457317, 15370807, 6364910, 13605745, 8362338, -19174622, -5475723, -16796596, -5031438]), type$.JSArray_int);
    B.FieldElement_V43 = new A.FieldElement(B.List_WK1);
    B.List_KDU = A._setArrayType(makeConstList([-22273315, -13524424, -64685, -4334223, -18605636, -10921968, -20571065, -7007978, -99853, -10237333]), type$.JSArray_int);
    B.FieldElement_e3N = new A.FieldElement(B.List_KDU);
    B.GroupElementPrecomp_h0k = new A.GroupElementPrecomp(B.FieldElement_U8E, B.FieldElement_V43, B.FieldElement_e3N);
    B.List_gc6 = A._setArrayType(makeConstList([17747465, 10039260, 19368299, -4050591, -20630635, -16041286, 31992683, -15857976, -29260363, -5511971]), type$.JSArray_int);
    B.FieldElement_nM9 = new A.FieldElement(B.List_gc6);
    B.List_LjV = A._setArrayType(makeConstList([31932027, -4986141, -19612382, 16366580, 22023614, 88450, 11371999, -3744247, 4882242, -10626905]), type$.JSArray_int);
    B.FieldElement_Xda = new A.FieldElement(B.List_LjV);
    B.List_na5 = A._setArrayType(makeConstList([29796507, 37186, 19818052, 10115756, -11829032, 3352736, 18551198, 3272828, -5190932, -4162409]), type$.JSArray_int);
    B.FieldElement_kMT = new A.FieldElement(B.List_na5);
    B.GroupElementPrecomp_Quk = new A.GroupElementPrecomp(B.FieldElement_nM9, B.FieldElement_Xda, B.FieldElement_kMT);
    B.List_AHc = A._setArrayType(makeConstList([12501286, 4044383, -8612957, -13392385, -32430052, 5136599, -19230378, -3529697, 330070, -3659409]), type$.JSArray_int);
    B.FieldElement_3bx = new A.FieldElement(B.List_AHc);
    B.List_2No3 = A._setArrayType(makeConstList([6384877, 2899513, 17807477, 7663917, -2358888, 12363165, 25366522, -8573892, -271295, 12071499]), type$.JSArray_int);
    B.FieldElement_Qwu1 = new A.FieldElement(B.List_2No3);
    B.List_Mmf = A._setArrayType(makeConstList([-8365515, -4042521, 25133448, -4517355, -6211027, 2265927, -32769618, 1936675, -5159697, 3829363]), type$.JSArray_int);
    B.FieldElement_gPs = new A.FieldElement(B.List_Mmf);
    B.GroupElementPrecomp_ucP = new A.GroupElementPrecomp(B.FieldElement_3bx, B.FieldElement_Qwu1, B.FieldElement_gPs);
    B.List_cAN = A._setArrayType(makeConstList([28425966, -5835433, -577090, -4697198, -14217555, 6870930, 7921550, -6567787, 26333140, 14267664]), type$.JSArray_int);
    B.FieldElement_FAk = new A.FieldElement(B.List_cAN);
    B.List_cwb = A._setArrayType(makeConstList([-11067219, 11871231, 27385719, -10559544, -4585914, -11189312, 10004786, -8709488, -21761224, 8930324]), type$.JSArray_int);
    B.FieldElement_UoF = new A.FieldElement(B.List_cwb);
    B.List_MUs = A._setArrayType(makeConstList([-21197785, -16396035, 25654216, -1725397, 12282012, 11008919, 1541940, 4757911, -26491501, -16408940]), type$.JSArray_int);
    B.FieldElement_wsa0 = new A.FieldElement(B.List_MUs);
    B.GroupElementPrecomp_A0N = new A.GroupElementPrecomp(B.FieldElement_FAk, B.FieldElement_UoF, B.FieldElement_wsa0);
    B.List_gsm2 = A._setArrayType(makeConstList([13537262, -7759490, -20604840, 10961927, -5922820, -13218065, -13156584, 6217254, -15943699, 13814990]), type$.JSArray_int);
    B.FieldElement_vb02 = new A.FieldElement(B.List_gsm2);
    B.List_ekJ = A._setArrayType(makeConstList([-17422573, 15157790, 18705543, 29619, 24409717, -260476, 27361681, 9257833, -1956526, -1776914]), type$.JSArray_int);
    B.FieldElement_JWE = new A.FieldElement(B.List_ekJ);
    B.List_wwi = A._setArrayType(makeConstList([-25045300, -10191966, 15366585, 15166509, -13105086, 8423556, -29171540, 12361135, -18685978, 4578290]), type$.JSArray_int);
    B.FieldElement_mGN = new A.FieldElement(B.List_wwi);
    B.GroupElementPrecomp_8Aw = new A.GroupElementPrecomp(B.FieldElement_vb02, B.FieldElement_JWE, B.FieldElement_mGN);
    B.List_Yqs = A._setArrayType(makeConstList([24579768, 3711570, 1342322, -11180126, -27005135, 14124956, -22544529, 14074919, 21964432, 8235257]), type$.JSArray_int);
    B.FieldElement_e4R = new A.FieldElement(B.List_Yqs);
    B.List_ald = A._setArrayType(makeConstList([-6528613, -2411497, 9442966, -5925588, 12025640, -1487420, -2981514, -1669206, 13006806, 2355433]), type$.JSArray_int);
    B.FieldElement_eA9 = new A.FieldElement(B.List_ald);
    B.List_iEE = A._setArrayType(makeConstList([-16304899, -13605259, -6632427, -5142349, 16974359, -10911083, 27202044, 1719366, 1141648, -12796236]), type$.JSArray_int);
    B.FieldElement_kmH = new A.FieldElement(B.List_iEE);
    B.GroupElementPrecomp_uAN = new A.GroupElementPrecomp(B.FieldElement_e4R, B.FieldElement_eA9, B.FieldElement_kmH);
    B.List_kqe = A._setArrayType(makeConstList([-12863944, -13219986, -8318266, -11018091, -6810145, -4843894, 13475066, -3133972, 32674895, 13715045]), type$.JSArray_int);
    B.FieldElement_8gY = new A.FieldElement(B.List_kqe);
    B.List_Qqm0 = A._setArrayType(makeConstList([11423335, -5468059, 32344216, 8962751, 24989809, 9241752, -13265253, 16086212, -28740881, -15642093]), type$.JSArray_int);
    B.FieldElement_fNF0 = new A.FieldElement(B.List_Qqm0);
    B.List_kUq = A._setArrayType(makeConstList([-1409668, 12530728, -6368726, 10847387, 19531186, -14132160, -11709148, 7791794, -27245943, 4383347]), type$.JSArray_int);
    B.FieldElement_gUw = new A.FieldElement(B.List_kUq);
    B.GroupElementPrecomp_CZ5 = new A.GroupElementPrecomp(B.FieldElement_8gY, B.FieldElement_fNF0, B.FieldElement_gUw);
    B.List_nV0 = A._setArrayType(makeConstList([B.GroupElementPrecomp_8ml, B.GroupElementPrecomp_h0k, B.GroupElementPrecomp_Quk, B.GroupElementPrecomp_ucP, B.GroupElementPrecomp_A0N, B.GroupElementPrecomp_8Aw, B.GroupElementPrecomp_uAN, B.GroupElementPrecomp_CZ5]), type$.JSArray_GroupElementPrecomp);
    B.List_D0Z = A._setArrayType(makeConstList([-28970898, 5271447, -1266009, -9736989, -12455236, 16732599, -4862407, -4906449, 27193557, 6245191]), type$.JSArray_int);
    B.FieldElement_ulv = new A.FieldElement(B.List_D0Z);
    B.List_Y2Y = A._setArrayType(makeConstList([-15193956, 5362278, -1783893, 2695834, 4960227, 12840725, 23061898, 3260492, 22510453, 8577507]), type$.JSArray_int);
    B.FieldElement_jnD = new A.FieldElement(B.List_Y2Y);
    B.List_woc0 = A._setArrayType(makeConstList([-12632451, 11257346, -32692994, 13548177, -721004, 10879011, 31168030, 13952092, -29571492, -3635906]), type$.JSArray_int);
    B.FieldElement_QcT0 = new A.FieldElement(B.List_woc0);
    B.GroupElementPrecomp_GFh = new A.GroupElementPrecomp(B.FieldElement_ulv, B.FieldElement_jnD, B.FieldElement_QcT0);
    B.List_COe = A._setArrayType(makeConstList([3877321, -9572739, 32416692, 5405324, -11004407, -13656635, 3759769, 11935320, 5611860, 8164018]), type$.JSArray_int);
    B.FieldElement_FMi = new A.FieldElement(B.List_COe);
    B.List_2Qw = A._setArrayType(makeConstList([-16275802, 14667797, 15906460, 12155291, -22111149, -9039718, 32003002, -8832289, 5773085, -8422109]), type$.JSArray_int);
    B.FieldElement_qAw0 = new A.FieldElement(B.List_2Qw);
    B.List_3Nb = A._setArrayType(makeConstList([-23788118, -8254300, 1950875, 8937633, 18686727, 16459170, -905725, 12376320, 31632953, 190926]), type$.JSArray_int);
    B.FieldElement_65q = new A.FieldElement(B.List_3Nb);
    B.GroupElementPrecomp_2Vr = new A.GroupElementPrecomp(B.FieldElement_FMi, B.FieldElement_qAw0, B.FieldElement_65q);
    B.List_csW = A._setArrayType(makeConstList([-24593607, -16138885, -8423991, 13378746, 14162407, 6901328, -8288749, 4508564, -25341555, -3627528]), type$.JSArray_int);
    B.FieldElement_0uJ = new A.FieldElement(B.List_csW);
    B.List_6hj = A._setArrayType(makeConstList([8884438, -5884009, 6023974, 10104341, -6881569, -4941533, 18722941, -14786005, -1672488, 827625]), type$.JSArray_int);
    B.FieldElement_iF8 = new A.FieldElement(B.List_6hj);
    B.List_QYP = A._setArrayType(makeConstList([-32720583, -16289296, -32503547, 7101210, 13354605, 2659080, -1800575, -14108036, -24878478, 1541286]), type$.JSArray_int);
    B.FieldElement_UAS = new A.FieldElement(B.List_QYP);
    B.GroupElementPrecomp_6CW = new A.GroupElementPrecomp(B.FieldElement_0uJ, B.FieldElement_iF8, B.FieldElement_UAS);
    B.List_l9m = A._setArrayType(makeConstList([2901347, -1117687, 3880376, -10059388, -17620940, -3612781, -21802117, -3567481, 20456845, -1885033]), type$.JSArray_int);
    B.FieldElement_2Gq = new A.FieldElement(B.List_l9m);
    B.List_ytW = A._setArrayType(makeConstList([27019610, 12299467, -13658288, -1603234, -12861660, -4861471, -19540150, -5016058, 29439641, 15138866]), type$.JSArray_int);
    B.FieldElement_S0N = new A.FieldElement(B.List_ytW);
    B.List_66y0 = A._setArrayType(makeConstList([21536104, -6626420, -32447818, -10690208, -22408077, 5175814, -5420040, -16361163, 7779328, 109896]), type$.JSArray_int);
    B.FieldElement_RA50 = new A.FieldElement(B.List_66y0);
    B.GroupElementPrecomp_NIe = new A.GroupElementPrecomp(B.FieldElement_2Gq, B.FieldElement_S0N, B.FieldElement_RA50);
    B.List_mDl = A._setArrayType(makeConstList([30279744, 14648750, -8044871, 6425558, 13639621, -743509, 28698390, 12180118, 23177719, -554075]), type$.JSArray_int);
    B.FieldElement_B8D = new A.FieldElement(B.List_mDl);
    B.List_21K = A._setArrayType(makeConstList([26572847, 3405927, -31701700, 12890905, -19265668, 5335866, -6493768, 2378492, 4439158, -13279347]), type$.JSArray_int);
    B.FieldElement_GXR = new A.FieldElement(B.List_21K);
    B.List_zPV = A._setArrayType(makeConstList([-22716706, 3489070, -9225266, -332753, 18875722, -1140095, 14819434, -12731527, -17717757, -5461437]), type$.JSArray_int);
    B.FieldElement_qEI = new A.FieldElement(B.List_zPV);
    B.GroupElementPrecomp_ahs = new A.GroupElementPrecomp(B.FieldElement_B8D, B.FieldElement_GXR, B.FieldElement_qEI);
    B.List_mxt = A._setArrayType(makeConstList([-5056483, 16566551, 15953661, 3767752, -10436499, 15627060, -820954, 2177225, 8550082, -15114165]), type$.JSArray_int);
    B.FieldElement_G7N = new A.FieldElement(B.List_mxt);
    B.List_Drw0 = A._setArrayType(makeConstList([-18473302, 16596775, -381660, 15663611, 22860960, 15585581, -27844109, -3582739, -23260460, -8428588]), type$.JSArray_int);
    B.FieldElement_aM40 = new A.FieldElement(B.List_Drw0);
    B.List_8ix = A._setArrayType(makeConstList([-32480551, 15707275, -8205912, -5652081, 29464558, 2713815, -22725137, 15860482, -21902570, 1494193]), type$.JSArray_int);
    B.FieldElement_8eb0 = new A.FieldElement(B.List_8ix);
    B.GroupElementPrecomp_oCX = new A.GroupElementPrecomp(B.FieldElement_G7N, B.FieldElement_aM40, B.FieldElement_8eb0);
    B.List_gQW = A._setArrayType(makeConstList([-19562091, -14087393, -25583872, -9299552, 13127842, 759709, 21923482, 16529112, 8742704, 12967017]), type$.JSArray_int);
    B.FieldElement_GUj = new A.FieldElement(B.List_gQW);
    B.List_gCR = A._setArrayType(makeConstList([-28464899, 1553205, 32536856, -10473729, -24691605, -406174, -8914625, -2933896, -29903758, 15553883]), type$.JSArray_int);
    B.FieldElement_OOt = new A.FieldElement(B.List_gCR);
    B.List_LrG = A._setArrayType(makeConstList([21877909, 3230008, 9881174, 10539357, -4797115, 2841332, 11543572, 14513274, 19375923, -12647961]), type$.JSArray_int);
    B.FieldElement_Vyt = new A.FieldElement(B.List_LrG);
    B.GroupElementPrecomp_8DE = new A.GroupElementPrecomp(B.FieldElement_GUj, B.FieldElement_OOt, B.FieldElement_Vyt);
    B.List_tHt = A._setArrayType(makeConstList([8832269, -14495485, 13253511, 5137575, 5037871, 4078777, 24880818, -6222716, 2862653, 9455043]), type$.JSArray_int);
    B.FieldElement_2IO0 = new A.FieldElement(B.List_tHt);
    B.List_o48 = A._setArrayType(makeConstList([29306751, 5123106, 20245049, -14149889, 9592566, 8447059, -2077124, -2990080, 15511449, 4789663]), type$.JSArray_int);
    B.FieldElement_06 = new A.FieldElement(B.List_o48);
    B.List_cWx = A._setArrayType(makeConstList([-20679756, 7004547, 8824831, -9434977, -4045704, -3750736, -5754762, 108893, 23513200, 16652362]), type$.JSArray_int);
    B.FieldElement_wEo2 = new A.FieldElement(B.List_cWx);
    B.GroupElementPrecomp_oyn = new A.GroupElementPrecomp(B.FieldElement_2IO0, B.FieldElement_06, B.FieldElement_wEo2);
    B.List_zES = A._setArrayType(makeConstList([B.GroupElementPrecomp_GFh, B.GroupElementPrecomp_2Vr, B.GroupElementPrecomp_6CW, B.GroupElementPrecomp_NIe, B.GroupElementPrecomp_ahs, B.GroupElementPrecomp_oCX, B.GroupElementPrecomp_8DE, B.GroupElementPrecomp_oyn]), type$.JSArray_GroupElementPrecomp);
    B.List_apf = A._setArrayType(makeConstList([-33256173, 4144782, -4476029, -6579123, 10770039, -7155542, -6650416, -12936300, -18319198, 10212860]), type$.JSArray_int);
    B.FieldElement_7qy = new A.FieldElement(B.List_apf);
    B.List_4S8 = A._setArrayType(makeConstList([2756081, 8598110, 7383731, -6859892, 22312759, -1105012, 21179801, 2600940, -9988298, -12506466]), type$.JSArray_int);
    B.FieldElement_zGX = new A.FieldElement(B.List_4S8);
    B.List_EYP = A._setArrayType(makeConstList([-24645692, 13317462, -30449259, -15653928, 21365574, -10869657, 11344424, 864440, -2499677, -16710063]), type$.JSArray_int);
    B.FieldElement_GjP = new A.FieldElement(B.List_EYP);
    B.GroupElementPrecomp_HZS = new A.GroupElementPrecomp(B.FieldElement_7qy, B.FieldElement_zGX, B.FieldElement_GjP);
    B.List_P12 = A._setArrayType(makeConstList([-26432803, 6148329, -17184412, -14474154, 18782929, -275997, -22561534, 211300, 2719757, 4940997]), type$.JSArray_int);
    B.FieldElement_gsm = new A.FieldElement(B.List_P12);
    B.List_HvN = A._setArrayType(makeConstList([-1323882, 3911313, -6948744, 14759765, -30027150, 7851207, 21690126, 8518463, 26699843, 5276295]), type$.JSArray_int);
    B.FieldElement_1nx = new A.FieldElement(B.List_HvN);
    B.List_yGJ = A._setArrayType(makeConstList([-13149873, -6429067, 9396249, 365013, 24703301, -10488939, 1321586, 149635, -15452774, 7159369]), type$.JSArray_int);
    B.FieldElement_vAl = new A.FieldElement(B.List_yGJ);
    B.GroupElementPrecomp_Zq8 = new A.GroupElementPrecomp(B.FieldElement_gsm, B.FieldElement_1nx, B.FieldElement_vAl);
    B.List_aXU = A._setArrayType(makeConstList([9987780, -3404759, 17507962, 9505530, 9731535, -2165514, 22356009, 8312176, 22477218, -8403385]), type$.JSArray_int);
    B.FieldElement_yXb = new A.FieldElement(B.List_aXU);
    B.List_OUC = A._setArrayType(makeConstList([18155857, -16504990, 19744716, 9006923, 15154154, -10538976, 24256460, -4864995, -22548173, 9334109]), type$.JSArray_int);
    B.FieldElement_cIG = new A.FieldElement(B.List_OUC);
    B.List_kO8 = A._setArrayType(makeConstList([2986088, -4911893, 10776628, -3473844, 10620590, -7083203, -21413845, 14253545, -22587149, 536906]), type$.JSArray_int);
    B.FieldElement_jHy = new A.FieldElement(B.List_kO8);
    B.GroupElementPrecomp_eHw = new A.GroupElementPrecomp(B.FieldElement_yXb, B.FieldElement_cIG, B.FieldElement_jHy);
    B.List_adS = A._setArrayType(makeConstList([4377756, 8115836, 24567078, 15495314, 11625074, 13064599, 7390551, 10589625, 10838060, -15420424]), type$.JSArray_int);
    B.FieldElement_Tjd = new A.FieldElement(B.List_adS);
    B.List_QR4 = A._setArrayType(makeConstList([-19342404, 867880, 9277171, -3218459, -14431572, -1986443, 19295826, -15796950, 6378260, 699185]), type$.JSArray_int);
    B.FieldElement_Crw = new A.FieldElement(B.List_QR4);
    B.List_wEo1 = A._setArrayType(makeConstList([7895026, 4057113, -7081772, -13077756, -17886831, -323126, -716039, 15693155, -5045064, -13373962]), type$.JSArray_int);
    B.FieldElement_DsB1 = new A.FieldElement(B.List_wEo1);
    B.GroupElementPrecomp_4CA = new A.GroupElementPrecomp(B.FieldElement_Tjd, B.FieldElement_Crw, B.FieldElement_DsB1);
    B.List_IWk = A._setArrayType(makeConstList([-7737563, -5869402, -14566319, -7406919, 11385654, 13201616, 31730678, -10962840, -3918636, -9669325]), type$.JSArray_int);
    B.FieldElement_a9P = new A.FieldElement(B.List_IWk);
    B.List_49R = A._setArrayType(makeConstList([10188286, -15770834, -7336361, 13427543, 22223443, 14896287, 30743455, 7116568, -21786507, 5427593]), type$.JSArray_int);
    B.FieldElement_izV = new A.FieldElement(B.List_49R);
    B.List_kr3 = A._setArrayType(makeConstList([696102, 13206899, 27047647, -10632082, 15285305, -9853179, 10798490, -4578720, 19236243, 12477404]), type$.JSArray_int);
    B.FieldElement_XfB = new A.FieldElement(B.List_kr3);
    B.GroupElementPrecomp_uzN = new A.GroupElementPrecomp(B.FieldElement_a9P, B.FieldElement_izV, B.FieldElement_XfB);
    B.List_SLI = A._setArrayType(makeConstList([-11229439, 11243796, -17054270, -8040865, -788228, -8167967, -3897669, 11180504, -23169516, 7733644]), type$.JSArray_int);
    B.FieldElement_Was = new A.FieldElement(B.List_SLI);
    B.List_5sZ = A._setArrayType(makeConstList([17800790, -14036179, -27000429, -11766671, 23887827, 3149671, 23466177, -10538171, 10322027, 15313801]), type$.JSArray_int);
    B.FieldElement_CTk = new A.FieldElement(B.List_5sZ);
    B.List_4CA = A._setArrayType(makeConstList([26246234, 11968874, 32263343, -5468728, 6830755, -13323031, -15794704, -101982, -24449242, 10890804]), type$.JSArray_int);
    B.FieldElement_4em = new A.FieldElement(B.List_4CA);
    B.GroupElementPrecomp_zUv = new A.GroupElementPrecomp(B.FieldElement_Was, B.FieldElement_CTk, B.FieldElement_4em);
    B.List_qom = A._setArrayType(makeConstList([-31365647, 10271363, -12660625, -6267268, 16690207, -13062544, -14982212, 16484931, 25180797, -5334884]), type$.JSArray_int);
    B.FieldElement_iDZ = new A.FieldElement(B.List_qom);
    B.List_WxM = A._setArrayType(makeConstList([-586574, 10376444, -32586414, -11286356, 19801893, 10997610, 2276632, 9482883, 316878, 13820577]), type$.JSArray_int);
    B.FieldElement_85b = new A.FieldElement(B.List_WxM);
    B.List_4m9 = A._setArrayType(makeConstList([-9882808, -4510367, -2115506, 16457136, -11100081, 11674996, 30756178, -7515054, 30696930, -3712849]), type$.JSArray_int);
    B.FieldElement_FWB = new A.FieldElement(B.List_4m9);
    B.GroupElementPrecomp_owg = new A.GroupElementPrecomp(B.FieldElement_iDZ, B.FieldElement_85b, B.FieldElement_FWB);
    B.List_Ks3 = A._setArrayType(makeConstList([32988917, -9603412, 12499366, 7910787, -10617257, -11931514, -7342816, -9985397, -32349517, 7392473]), type$.JSArray_int);
    B.FieldElement_knt0 = new A.FieldElement(B.List_Ks3);
    B.List_o8k = A._setArrayType(makeConstList([-8855661, 15927861, 9866406, -3649411, -2396914, -16655781, -30409476, -9134995, 25112947, -2926644]), type$.JSArray_int);
    B.FieldElement_Oho = new A.FieldElement(B.List_o8k);
    B.List_YAO = A._setArrayType(makeConstList([-2504044, -436966, 25621774, -5678772, 15085042, -5479877, -24884878, -13526194, 5537438, -13914319]), type$.JSArray_int);
    B.FieldElement_cAf0 = new A.FieldElement(B.List_YAO);
    B.GroupElementPrecomp_IUZ = new A.GroupElementPrecomp(B.FieldElement_knt0, B.FieldElement_Oho, B.FieldElement_cAf0);
    B.List_P7R = A._setArrayType(makeConstList([B.GroupElementPrecomp_HZS, B.GroupElementPrecomp_Zq8, B.GroupElementPrecomp_eHw, B.GroupElementPrecomp_4CA, B.GroupElementPrecomp_uzN, B.GroupElementPrecomp_zUv, B.GroupElementPrecomp_owg, B.GroupElementPrecomp_IUZ]), type$.JSArray_GroupElementPrecomp);
    B.List_Ow80 = A._setArrayType(makeConstList([-11225584, 2320285, -9584280, 10149187, -33444663, 5808648, -14876251, -1729667, 31234590, 6090599]), type$.JSArray_int);
    B.FieldElement_JFt0 = new A.FieldElement(B.List_Ow80);
    B.List_IVQ = A._setArrayType(makeConstList([-9633316, 116426, 26083934, 2897444, -6364437, -2688086, 609721, 15878753, -6970405, -9034768]), type$.JSArray_int);
    B.FieldElement_yHZ0 = new A.FieldElement(B.List_IVQ);
    B.List_4GH = A._setArrayType(makeConstList([-27757857, 247744, -15194774, -9002551, 23288161, -10011936, -23869595, 6503646, 20650474, 1804084]), type$.JSArray_int);
    B.FieldElement_n7k = new A.FieldElement(B.List_4GH);
    B.GroupElementPrecomp_CTd = new A.GroupElementPrecomp(B.FieldElement_JFt0, B.FieldElement_yHZ0, B.FieldElement_n7k);
    B.List_kvD = A._setArrayType(makeConstList([-27589786, 15456424, 8972517, 8469608, 15640622, 4439847, 3121995, -10329713, 27842616, -202328]), type$.JSArray_int);
    B.FieldElement_ZCY = new A.FieldElement(B.List_kvD);
    B.List_88s = A._setArrayType(makeConstList([-15306973, 2839644, 22530074, 10026331, 4602058, 5048462, 28248656, 5031932, -11375082, 12714369]), type$.JSArray_int);
    B.FieldElement_MMm = new A.FieldElement(B.List_88s);
    B.List_23h = A._setArrayType(makeConstList([20807691, -7270825, 29286141, 11421711, -27876523, -13868230, -21227475, 1035546, -19733229, 12796920]), type$.JSArray_int);
    B.FieldElement_L6o = new A.FieldElement(B.List_23h);
    B.GroupElementPrecomp_kUZ = new A.GroupElementPrecomp(B.FieldElement_ZCY, B.FieldElement_MMm, B.FieldElement_L6o);
    B.List_IE7 = A._setArrayType(makeConstList([12076899, -14301286, -8785001, -11848922, -25012791, 16400684, -17591495, -12899438, 3480665, -15182815]), type$.JSArray_int);
    B.FieldElement_eFJ = new A.FieldElement(B.List_IE7);
    B.List_Aij = A._setArrayType(makeConstList([-32361549, 5457597, 28548107, 7833186, 7303070, -11953545, -24363064, -15921875, -33374054, 2771025]), type$.JSArray_int);
    B.FieldElement_sIv = new A.FieldElement(B.List_Aij);
    B.List_M2I1 = A._setArrayType(makeConstList([-21389266, 421932, 26597266, 6860826, 22486084, -6737172, -17137485, -4210226, -24552282, 15673397]), type$.JSArray_int);
    B.FieldElement_Ttw = new A.FieldElement(B.List_M2I1);
    B.GroupElementPrecomp_R1M = new A.GroupElementPrecomp(B.FieldElement_eFJ, B.FieldElement_sIv, B.FieldElement_Ttw);
    B.List_Apa = A._setArrayType(makeConstList([-20184622, 2338216, 19788685, -9620956, -4001265, -8740893, -20271184, 4733254, 3727144, -12934448]), type$.JSArray_int);
    B.FieldElement_8TW = new A.FieldElement(B.List_Apa);
    B.List_010 = A._setArrayType(makeConstList([6120119, 814863, -11794402, -622716, 6812205, -15747771, 2019594, 7975683, 31123697, -10958981]), type$.JSArray_int);
    B.FieldElement_43h5 = new A.FieldElement(B.List_010);
    B.List_N1p = A._setArrayType(makeConstList([30069250, -11435332, 30434654, 2958439, 18399564, -976289, 12296869, 9204260, -16432438, 9648165]), type$.JSArray_int);
    B.FieldElement_wmT = new A.FieldElement(B.List_N1p);
    B.GroupElementPrecomp_gkc = new A.GroupElementPrecomp(B.FieldElement_8TW, B.FieldElement_43h5, B.FieldElement_wmT);
    B.List_YAl = A._setArrayType(makeConstList([32705432, -1550977, 30705658, 7451065, -11805606, 9631813, 3305266, 5248604, -26008332, -11377501]), type$.JSArray_int);
    B.FieldElement_Cx1 = new A.FieldElement(B.List_YAl);
    B.List_NRl = A._setArrayType(makeConstList([17219865, 2375039, -31570947, -5575615, -19459679, 9219903, 294711, 15298639, 2662509, -16297073]), type$.JSArray_int);
    B.FieldElement_kPa = new A.FieldElement(B.List_NRl);
    B.List_69t = A._setArrayType(makeConstList([-1172927, -7558695, -4366770, -4287744, -21346413, -8434326, 32087529, -1222777, 32247248, -14389861]), type$.JSArray_int);
    B.FieldElement_O1D = new A.FieldElement(B.List_69t);
    B.GroupElementPrecomp_A0t0 = new A.GroupElementPrecomp(B.FieldElement_Cx1, B.FieldElement_kPa, B.FieldElement_O1D);
    B.List_4uk = A._setArrayType(makeConstList([14312628, 1221556, 17395390, -8700143, -4945741, -8684635, -28197744, -9637817, -16027623, -13378845]), type$.JSArray_int);
    B.FieldElement_GJk = new A.FieldElement(B.List_4uk);
    B.List_iWW = A._setArrayType(makeConstList([-1428825, -9678990, -9235681, 6549687, -7383069, -468664, 23046502, 9803137, 17597934, 2346211]), type$.JSArray_int);
    B.FieldElement_MMY = new A.FieldElement(B.List_iWW);
    B.List_wco = A._setArrayType(makeConstList([18510800, 15337574, 26171504, 981392, -22241552, 7827556, -23491134, -11323352, 3059833, -11782870]), type$.JSArray_int);
    B.FieldElement_C43 = new A.FieldElement(B.List_wco);
    B.GroupElementPrecomp_UIw = new A.GroupElementPrecomp(B.FieldElement_GJk, B.FieldElement_MMY, B.FieldElement_C43);
    B.List_KYr = A._setArrayType(makeConstList([10141598, 6082907, 17829293, -1947643, 9830092, 13613136, -25556636, -5544586, -33502212, 3592096]), type$.JSArray_int);
    B.FieldElement_Uj5 = new A.FieldElement(B.List_KYr);
    B.List_sIv = A._setArrayType(makeConstList([33114168, -15889352, -26525686, -13343397, 33076705, 8716171, 1151462, 1521897, -982665, -6837803]), type$.JSArray_int);
    B.FieldElement_3z6 = new A.FieldElement(B.List_sIv);
    B.List_qb5 = A._setArrayType(makeConstList([-32939165, -4255815, 23947181, -324178, -33072974, -12305637, -16637686, 3891704, 26353178, 693168]), type$.JSArray_int);
    B.FieldElement_o48 = new A.FieldElement(B.List_qb5);
    B.GroupElementPrecomp_gC9 = new A.GroupElementPrecomp(B.FieldElement_Uj5, B.FieldElement_3z6, B.FieldElement_o48);
    B.List_K6o = A._setArrayType(makeConstList([30374239, 1595580, -16884039, 13186931, 4600344, 406904, 9585294, -400668, 31375464, 14369965]), type$.JSArray_int);
    B.FieldElement_xw80 = new A.FieldElement(B.List_K6o);
    B.List_6xV0 = A._setArrayType(makeConstList([-14370654, -7772529, 1510301, 6434173, -18784789, -6262728, 32732230, -13108839, 17901441, 16011505]), type$.JSArray_int);
    B.FieldElement_2Vk1 = new A.FieldElement(B.List_6xV0);
    B.List_7TW = A._setArrayType(makeConstList([18171223, -11934626, -12500402, 15197122, -11038147, -15230035, -19172240, -16046376, 8764035, 12309598]), type$.JSArray_int);
    B.FieldElement_FYo = new A.FieldElement(B.List_7TW);
    B.GroupElementPrecomp_mya = new A.GroupElementPrecomp(B.FieldElement_xw80, B.FieldElement_2Vk1, B.FieldElement_FYo);
    B.List_0U8 = A._setArrayType(makeConstList([B.GroupElementPrecomp_CTd, B.GroupElementPrecomp_kUZ, B.GroupElementPrecomp_R1M, B.GroupElementPrecomp_gkc, B.GroupElementPrecomp_A0t0, B.GroupElementPrecomp_UIw, B.GroupElementPrecomp_gC9, B.GroupElementPrecomp_mya]), type$.JSArray_GroupElementPrecomp);
    B.List_DV7 = A._setArrayType(makeConstList([5975908, -5243188, -19459362, -9681747, -11541277, 14015782, -23665757, 1228319, 17544096, -10593782]), type$.JSArray_int);
    B.FieldElement_5oW = new A.FieldElement(B.List_DV7);
    B.List_4e8 = A._setArrayType(makeConstList([5811932, -1715293, 3442887, -2269310, -18367348, -8359541, -18044043, -15410127, -5565381, 12348900]), type$.JSArray_int);
    B.FieldElement_uPZ = new A.FieldElement(B.List_4e8);
    B.List_wiV = A._setArrayType(makeConstList([-31399660, 11407555, 25755363, 6891399, -3256938, 14872274, -24849353, 8141295, -10632534, -585479]), type$.JSArray_int);
    B.FieldElement_qPJ = new A.FieldElement(B.List_wiV);
    B.GroupElementPrecomp_4QF = new A.GroupElementPrecomp(B.FieldElement_5oW, B.FieldElement_uPZ, B.FieldElement_qPJ);
    B.List_ZCY = A._setArrayType(makeConstList([-12675304, 694026, -5076145, 13300344, 14015258, -14451394, -9698672, -11329050, 30944593, 1130208]), type$.JSArray_int);
    B.FieldElement_IyI = new A.FieldElement(B.List_ZCY);
    B.List_e5Z = A._setArrayType(makeConstList([8247766, -6710942, -26562381, -7709309, -14401939, -14648910, 4652152, 2488540, 23550156, -271232]), type$.JSArray_int);
    B.FieldElement_NQk = new A.FieldElement(B.List_e5Z);
    B.List_nRE = A._setArrayType(makeConstList([17294316, -3788438, 7026748, 15626851, 22990044, 113481, 2267737, -5908146, -408818, -137719]), type$.JSArray_int);
    B.FieldElement_gkc4 = new A.FieldElement(B.List_nRE);
    B.GroupElementPrecomp_ijv = new A.GroupElementPrecomp(B.FieldElement_IyI, B.FieldElement_NQk, B.FieldElement_gkc4);
    B.List_mxU = A._setArrayType(makeConstList([16091085, -16253926, 18599252, 7340678, 2137637, -1221657, -3364161, 14550936, 3260525, -7166271]), type$.JSArray_int);
    B.FieldElement_3Jw = new A.FieldElement(B.List_mxU);
    B.List_WU2 = A._setArrayType(makeConstList([-4910104, -13332887, 18550887, 10864893, -16459325, -7291596, -23028869, -13204905, -12748722, 2701326]), type$.JSArray_int);
    B.FieldElement_W7E = new A.FieldElement(B.List_WU2);
    B.List_MbS = A._setArrayType(makeConstList([-8574695, 16099415, 4629974, -16340524, -20786213, -6005432, -10018363, 9276971, 11329923, 1862132]), type$.JSArray_int);
    B.FieldElement_tUN = new A.FieldElement(B.List_MbS);
    B.GroupElementPrecomp_a1A = new A.GroupElementPrecomp(B.FieldElement_3Jw, B.FieldElement_W7E, B.FieldElement_tUN);
    B.List_GNU = A._setArrayType(makeConstList([14763076, -15903608, -30918270, 3689867, 3511892, 10313526, -21951088, 12219231, -9037963, -940300]), type$.JSArray_int);
    B.FieldElement_Iip = new A.FieldElement(B.List_GNU);
    B.List_zPV0 = A._setArrayType(makeConstList([8894987, -3446094, 6150753, 3013931, 301220, 15693451, -31981216, -2909717, -15438168, 11595570]), type$.JSArray_int);
    B.FieldElement_qEI0 = new A.FieldElement(B.List_zPV0);
    B.List_RlX = A._setArrayType(makeConstList([15214962, 3537601, -26238722, -14058872, 4418657, -15230761, 13947276, 10730794, -13489462, -4363670]), type$.JSArray_int);
    B.FieldElement_6m4 = new A.FieldElement(B.List_RlX);
    B.GroupElementPrecomp_gg40 = new A.GroupElementPrecomp(B.FieldElement_Iip, B.FieldElement_qEI0, B.FieldElement_6m4);
    B.List_ebJ = A._setArrayType(makeConstList([-2538306, 7682793, 32759013, 263109, -29984731, -7955452, -22332124, -10188635, 977108, 699994]), type$.JSArray_int);
    B.FieldElement_yrR = new A.FieldElement(B.List_ebJ);
    B.List_ali = A._setArrayType(makeConstList([-12466472, 4195084, -9211532, 550904, -15565337, 12917920, 19118110, -439841, -30534533, -14337913]), type$.JSArray_int);
    B.FieldElement_Gb7 = new A.FieldElement(B.List_ali);
    B.List_K2X = A._setArrayType(makeConstList([31788461, -14507657, 4799989, 7372237, 8808585, -14747943, 9408237, -10051775, 12493932, -5409317]), type$.JSArray_int);
    B.FieldElement_Z8h = new A.FieldElement(B.List_K2X);
    B.GroupElementPrecomp_ULC = new A.GroupElementPrecomp(B.FieldElement_yrR, B.FieldElement_Gb7, B.FieldElement_Z8h);
    B.List_7sl = A._setArrayType(makeConstList([-25680606, 5260744, -19235809, -6284470, -3695942, 16566087, 27218280, 2607121, 29375955, 6024730]), type$.JSArray_int);
    B.FieldElement_int = new A.FieldElement(B.List_7sl);
    B.List_Mc8 = A._setArrayType(makeConstList([842132, -2794693, -4763381, -8722815, 26332018, -12405641, 11831880, 6985184, -9940361, 2854096]), type$.JSArray_int);
    B.FieldElement_si8 = new A.FieldElement(B.List_Mc8);
    B.List_Qyo = A._setArrayType(makeConstList([-4847262, -7969331, 2516242, -5847713, 9695691, -7221186, 16512645, 960770, 12121869, 16648078]), type$.JSArray_int);
    B.FieldElement_inH = new A.FieldElement(B.List_Qyo);
    B.GroupElementPrecomp_6TW = new A.GroupElementPrecomp(B.FieldElement_int, B.FieldElement_si8, B.FieldElement_inH);
    B.List_3eM = A._setArrayType(makeConstList([-15218652, 14667096, -13336229, 2013717, 30598287, -464137, -31504922, -7882064, 20237806, 2838411]), type$.JSArray_int);
    B.FieldElement_e3c = new A.FieldElement(B.List_3eM);
    B.List_QBc = A._setArrayType(makeConstList([-19288047, 4453152, 15298546, -16178388, 22115043, -15972604, 12544294, -13470457, 1068881, -12499905]), type$.JSArray_int);
    B.FieldElement_OIp = new A.FieldElement(B.List_QBc);
    B.List_KQd = A._setArrayType(makeConstList([-9558883, -16518835, 33238498, 13506958, 30505848, -1114596, -8486907, -2630053, 12521378, 4845654]), type$.JSArray_int);
    B.FieldElement_B8J = new A.FieldElement(B.List_KQd);
    B.GroupElementPrecomp_gc60 = new A.GroupElementPrecomp(B.FieldElement_e3c, B.FieldElement_OIp, B.FieldElement_B8J);
    B.List_Os5 = A._setArrayType(makeConstList([-28198521, 10744108, -2958380, 10199664, 7759311, -13088600, 3409348, -873400, -6482306, -12885870]), type$.JSArray_int);
    B.FieldElement_FCG = new A.FieldElement(B.List_Os5);
    B.List_EOZ0 = A._setArrayType(makeConstList([-23561822, 6230156, -20382013, 10655314, -24040585, -11621172, 10477734, -1240216, -3113227, 13974498]), type$.JSArray_int);
    B.FieldElement_1yt0 = new A.FieldElement(B.List_EOZ0);
    B.List_yFG = A._setArrayType(makeConstList([12966261, 15550616, -32038948, -1615346, 21025980, -629444, 5642325, 7188737, 18895762, 12629579]), type$.JSArray_int);
    B.FieldElement_ECL = new A.FieldElement(B.List_yFG);
    B.GroupElementPrecomp_k2W = new A.GroupElementPrecomp(B.FieldElement_FCG, B.FieldElement_1yt0, B.FieldElement_ECL);
    B.List_yXb1 = A._setArrayType(makeConstList([B.GroupElementPrecomp_4QF, B.GroupElementPrecomp_ijv, B.GroupElementPrecomp_a1A, B.GroupElementPrecomp_gg40, B.GroupElementPrecomp_ULC, B.GroupElementPrecomp_6TW, B.GroupElementPrecomp_gc60, B.GroupElementPrecomp_k2W]), type$.JSArray_GroupElementPrecomp);
    B.List_9we = A._setArrayType(makeConstList([14741879, -14946887, 22177208, -11721237, 1279741, 8058600, 11758140, 789443, 32195181, 3895677]), type$.JSArray_int);
    B.FieldElement_SZN = new A.FieldElement(B.List_9we);
    B.List_yLM = A._setArrayType(makeConstList([10758205, 15755439, -4509950, 9243698, -4879422, 6879879, -2204575, -3566119, -8982069, 4429647]), type$.JSArray_int);
    B.FieldElement_aBG0 = new A.FieldElement(B.List_yLM);
    B.List_33r = A._setArrayType(makeConstList([-2453894, 15725973, -20436342, -10410672, -5803908, -11040220, -7135870, -11642895, 18047436, -15281743]), type$.JSArray_int);
    B.FieldElement_C0t = new A.FieldElement(B.List_33r);
    B.GroupElementPrecomp_W5a = new A.GroupElementPrecomp(B.FieldElement_SZN, B.FieldElement_aBG0, B.FieldElement_C0t);
    B.List_uWU = A._setArrayType(makeConstList([-25173001, -11307165, 29759956, 11776784, -22262383, -15820455, 10993114, -12850837, -17620701, -9408468]), type$.JSArray_int);
    B.FieldElement_ufz = new A.FieldElement(B.List_uWU);
    B.List_MIo = A._setArrayType(makeConstList([21987233, 700364, -24505048, 14972008, -7774265, -5718395, 32155026, 2581431, -29958985, 8773375]), type$.JSArray_int);
    B.FieldElement_6TW = new A.FieldElement(B.List_MIo);
    B.List_s8I = A._setArrayType(makeConstList([-25568350, 454463, -13211935, 16126715, 25240068, 8594567, 20656846, 12017935, -7874389, -13920155]), type$.JSArray_int);
    B.FieldElement_SVP = new A.FieldElement(B.List_s8I);
    B.GroupElementPrecomp_Tek = new A.GroupElementPrecomp(B.FieldElement_ufz, B.FieldElement_6TW, B.FieldElement_SVP);
    B.List_011 = A._setArrayType(makeConstList([6028182, 6263078, -31011806, -11301710, -818919, 2461772, -31841174, -5468042, -1721788, -2776725]), type$.JSArray_int);
    B.FieldElement_43h6 = new A.FieldElement(B.List_011);
    B.List_gkc = A._setArrayType(makeConstList([-12278994, 16624277, 987579, -5922598, 32908203, 1248608, 7719845, -4166698, 28408820, 6816612]), type$.JSArray_int);
    B.FieldElement_nZ3 = new A.FieldElement(B.List_gkc);
    B.List_2jN2 = A._setArrayType(makeConstList([-10358094, -8237829, 19549651, -12169222, 22082623, 16147817, 20613181, 13982702, -10339570, 5067943]), type$.JSArray_int);
    B.FieldElement_vhV1 = new A.FieldElement(B.List_2jN2);
    B.GroupElementPrecomp_M0Q = new A.GroupElementPrecomp(B.FieldElement_43h6, B.FieldElement_nZ3, B.FieldElement_vhV1);
    B.List_oyn = A._setArrayType(makeConstList([-30505967, -3821767, 12074681, 13582412, -19877972, 2443951, -19719286, 12746132, 5331210, -10105944]), type$.JSArray_int);
    B.FieldElement_Wmw = new A.FieldElement(B.List_oyn);
    B.List_2JY = A._setArrayType(makeConstList([30528811, 3601899, -1957090, 4619785, -27361822, -15436388, 24180793, -12570394, 27679908, -1648928]), type$.JSArray_int);
    B.FieldElement_v7S = new A.FieldElement(B.List_2JY);
    B.List_ESD = A._setArrayType(makeConstList([9402404, -13957065, 32834043, 10838634, -26580150, -13237195, 26653274, -8685565, 22611444, -12715406]), type$.JSArray_int);
    B.FieldElement_aou = new A.FieldElement(B.List_ESD);
    B.GroupElementPrecomp_QBJ = new A.GroupElementPrecomp(B.FieldElement_Wmw, B.FieldElement_v7S, B.FieldElement_aou);
    B.List_Sxj = A._setArrayType(makeConstList([22190590, 1118029, 22736441, 15130463, -30460692, -5991321, 19189625, -4648942, 4854859, 6622139]), type$.JSArray_int);
    B.FieldElement_B4N = new A.FieldElement(B.List_Sxj);
    B.List_iVE = A._setArrayType(makeConstList([-8310738, -2953450, -8262579, -3388049, -10401731, -271929, 13424426, -3567227, 26404409, 13001963]), type$.JSArray_int);
    B.FieldElement_uRS = new A.FieldElement(B.List_iVE);
    B.List_jjq = A._setArrayType(makeConstList([-31241838, -15415700, -2994250, 8939346, 11562230, -12840670, -26064365, -11621720, -15405155, 11020693]), type$.JSArray_int);
    B.FieldElement_QA7 = new A.FieldElement(B.List_jjq);
    B.GroupElementPrecomp_rxd = new A.GroupElementPrecomp(B.FieldElement_B4N, B.FieldElement_uRS, B.FieldElement_QA7);
    B.List_MsJ = A._setArrayType(makeConstList([1866042, -7949489, -7898649, -10301010, 12483315, 13477547, 3175636, -12424163, 28761762, 1406734]), type$.JSArray_int);
    B.FieldElement_MAa = new A.FieldElement(B.List_MsJ);
    B.List_spY = A._setArrayType(makeConstList([-448555, -1777666, 13018551, 3194501, -9580420, -11161737, 24760585, -4347088, 25577411, -13378680]), type$.JSArray_int);
    B.FieldElement_gRf = new A.FieldElement(B.List_spY);
    B.List_UMw = A._setArrayType(makeConstList([-24290378, 4759345, -690653, -1852816, 2066747, 10693769, -29595790, 9884936, -9368926, 4745410]), type$.JSArray_int);
    B.FieldElement_4AN0 = new A.FieldElement(B.List_UMw);
    B.GroupElementPrecomp_zhx = new A.GroupElementPrecomp(B.FieldElement_MAa, B.FieldElement_gRf, B.FieldElement_4AN0);
    B.List_OPz = A._setArrayType(makeConstList([-9141284, 6049714, -19531061, -4341411, -31260798, 9944276, -15462008, -11311852, 10931924, -11931931]), type$.JSArray_int);
    B.FieldElement_SKA = new A.FieldElement(B.List_OPz);
    B.List_MAi0 = A._setArrayType(makeConstList([-16561513, 14112680, -8012645, 4817318, -8040464, -11414606, -22853429, 10856641, -20470770, 13434654]), type$.JSArray_int);
    B.FieldElement_ssa0 = new A.FieldElement(B.List_MAi0);
    B.List_YbB = A._setArrayType(makeConstList([22759489, -10073434, -16766264, -1871422, 13637442, -10168091, 1765144, -12654326, 28445307, -5364710]), type$.JSArray_int);
    B.FieldElement_UOX = new A.FieldElement(B.List_YbB);
    B.GroupElementPrecomp_eg0 = new A.GroupElementPrecomp(B.FieldElement_SKA, B.FieldElement_ssa0, B.FieldElement_UOX);
    B.List_yL6 = A._setArrayType(makeConstList([29875063, 12493613, 2795536, -3786330, 1710620, 15181182, -10195717, -8788675, 9074234, 1167180]), type$.JSArray_int);
    B.FieldElement_eGi = new A.FieldElement(B.List_yL6);
    B.List_a94 = A._setArrayType(makeConstList([-26205683, 11014233, -9842651, -2635485, -26908120, 7532294, -18716888, -9535498, 3843903, 9367684]), type$.JSArray_int);
    B.FieldElement_cgN = new A.FieldElement(B.List_a94);
    B.List_oPa = A._setArrayType(makeConstList([-10969595, -6403711, 9591134, 9582310, 11349256, 108879, 16235123, 8601684, -139197, 4242895]), type$.JSArray_int);
    B.FieldElement_8TN = new A.FieldElement(B.List_oPa);
    B.GroupElementPrecomp_V0W = new A.GroupElementPrecomp(B.FieldElement_eGi, B.FieldElement_cgN, B.FieldElement_8TN);
    B.List_HB4 = A._setArrayType(makeConstList([B.GroupElementPrecomp_W5a, B.GroupElementPrecomp_Tek, B.GroupElementPrecomp_M0Q, B.GroupElementPrecomp_QBJ, B.GroupElementPrecomp_rxd, B.GroupElementPrecomp_zhx, B.GroupElementPrecomp_eg0, B.GroupElementPrecomp_V0W]), type$.JSArray_GroupElementPrecomp);
    B.List_izW = A._setArrayType(makeConstList([22092954, -13191123, -2042793, -11968512, 32186753, -11517388, -6574341, 2470660, -27417366, 16625501]), type$.JSArray_int);
    B.FieldElement_5Kc = new A.FieldElement(B.List_izW);
    B.List_JJ0 = A._setArrayType(makeConstList([-11057722, 3042016, 13770083, -9257922, 584236, -544855, -7770857, 2602725, -27351616, 14247413]), type$.JSArray_int);
    B.FieldElement_ES6 = new A.FieldElement(B.List_JJ0);
    B.List_Dxl = A._setArrayType(makeConstList([6314175, -10264892, -32772502, 15957557, -10157730, 168750, -8618807, 14290061, 27108877, -1180880]), type$.JSArray_int);
    B.FieldElement_xC2 = new A.FieldElement(B.List_Dxl);
    B.GroupElementPrecomp_CXi = new A.GroupElementPrecomp(B.FieldElement_5Kc, B.FieldElement_ES6, B.FieldElement_xC2);
    B.List_mFu = A._setArrayType(makeConstList([-8586597, -7170966, 13241782, 10960156, -32991015, -13794596, 33547976, -11058889, -27148451, 981874]), type$.JSArray_int);
    B.FieldElement_qjl = new A.FieldElement(B.List_mFu);
    B.List_Aec = A._setArrayType(makeConstList([22833440, 9293594, -32649448, -13618667, -9136966, 14756819, -22928859, -13970780, -10479804, -16197962]), type$.JSArray_int);
    B.FieldElement_6pS = new A.FieldElement(B.List_Aec);
    B.List_c8x = A._setArrayType(makeConstList([-7768587, 3326786, -28111797, 10783824, 19178761, 14905060, 22680049, 13906969, -15933690, 3797899]), type$.JSArray_int);
    B.FieldElement_UtW = new A.FieldElement(B.List_c8x);
    B.GroupElementPrecomp_ub4 = new A.GroupElementPrecomp(B.FieldElement_qjl, B.FieldElement_6pS, B.FieldElement_UtW);
    B.List_7Vh0 = A._setArrayType(makeConstList([21721356, -4212746, -12206123, 9310182, -3882239, -13653110, 23740224, -2709232, 20491983, -8042152]), type$.JSArray_int);
    B.FieldElement_GL90 = new A.FieldElement(B.List_7Vh0);
    B.List_ouf = A._setArrayType(makeConstList([9209270, -15135055, -13256557, -6167798, -731016, 15289673, 25947805, 15286587, 30997318, -6703063]), type$.JSArray_int);
    B.FieldElement_yPV = new A.FieldElement(B.List_ouf);
    B.List_wLJ = A._setArrayType(makeConstList([7392032, 16618386, 23946583, -8039892, -13265164, -1533858, -14197445, -2321576, 17649998, -250080]), type$.JSArray_int);
    B.FieldElement_adS = new A.FieldElement(B.List_wLJ);
    B.GroupElementPrecomp_gsm = new A.GroupElementPrecomp(B.FieldElement_GL90, B.FieldElement_yPV, B.FieldElement_adS);
    B.List_QU0 = A._setArrayType(makeConstList([-9301088, -14193827, 30609526, -3049543, -25175069, -1283752, -15241566, -9525724, -2233253, 7662146]), type$.JSArray_int);
    B.FieldElement_IIj = new A.FieldElement(B.List_QU0);
    B.List_S4t = A._setArrayType(makeConstList([-17558673, 1763594, -33114336, 15908610, -30040870, -12174295, 7335080, -8472199, -3174674, 3440183]), type$.JSArray_int);
    B.FieldElement_ohJ = new A.FieldElement(B.List_S4t);
    B.List_GM4 = A._setArrayType(makeConstList([-19889700, -5977008, -24111293, -9688870, 10799743, -16571957, 40450, -4431835, 4862400, 1133]), type$.JSArray_int);
    B.FieldElement_QaY = new A.FieldElement(B.List_GM4);
    B.GroupElementPrecomp_xre = new A.GroupElementPrecomp(B.FieldElement_IIj, B.FieldElement_ohJ, B.FieldElement_QaY);
    B.List_EKj = A._setArrayType(makeConstList([-32856209, -7873957, -5422389, 14860950, -16319031, 7956142, 7258061, 311861, -30594991, -7379421]), type$.JSArray_int);
    B.FieldElement_TSK = new A.FieldElement(B.List_EKj);
    B.List_80a = A._setArrayType(makeConstList([-3773428, -1565936, 28985340, 7499440, 24445838, 9325937, 29727763, 16527196, 18278453, 15405622]), type$.JSArray_int);
    B.FieldElement_2rz = new A.FieldElement(B.List_80a);
    B.List_gg40 = A._setArrayType(makeConstList([-4381906, 8508652, -19898366, -3674424, -5984453, 15149970, -13313598, 843523, -21875062, 13626197]), type$.JSArray_int);
    B.FieldElement_3Kn0 = new A.FieldElement(B.List_gg40);
    B.GroupElementPrecomp_uZ2 = new A.GroupElementPrecomp(B.FieldElement_TSK, B.FieldElement_2rz, B.FieldElement_3Kn0);
    B.List_gkc0 = A._setArrayType(makeConstList([2281448, -13487055, -10915418, -2609910, 1879358, 16164207, -10783882, 3953792, 13340839, 15928663]), type$.JSArray_int);
    B.FieldElement_nZ30 = new A.FieldElement(B.List_gkc0);
    B.List_xw8 = A._setArrayType(makeConstList([31727126, -7179855, -18437503, -8283652, 2875793, -16390330, -25269894, -7014826, -23452306, 5964753]), type$.JSArray_int);
    B.FieldElement_CyE = new A.FieldElement(B.List_xw8);
    B.List_08H = A._setArrayType(makeConstList([4100420, -5959452, -17179337, 6017714, -18705837, 12227141, -26684835, 11344144, 2538215, -7570755]), type$.JSArray_int);
    B.FieldElement_Q1t = new A.FieldElement(B.List_08H);
    B.GroupElementPrecomp_Scp = new A.GroupElementPrecomp(B.FieldElement_nZ30, B.FieldElement_CyE, B.FieldElement_Q1t);
    B.List_RUC = A._setArrayType(makeConstList([-9433605, 6123113, 11159803, -2156608, 30016280, 14966241, -20474983, 1485421, -629256, -15958862]), type$.JSArray_int);
    B.FieldElement_GfX = new A.FieldElement(B.List_RUC);
    B.List_UMw0 = A._setArrayType(makeConstList([-26804558, 4260919, 11851389, 9658551, -32017107, 16367492, -20205425, -13191288, 11659922, -11115118]), type$.JSArray_int);
    B.FieldElement_4AN1 = new A.FieldElement(B.List_UMw0);
    B.List_2pe = A._setArrayType(makeConstList([26180396, 10015009, -30844224, -8581293, 5418197, 9480663, 2231568, -10170080, 33100372, -1306171]), type$.JSArray_int);
    B.FieldElement_M6P = new A.FieldElement(B.List_2pe);
    B.GroupElementPrecomp_WZa = new A.GroupElementPrecomp(B.FieldElement_GfX, B.FieldElement_4AN1, B.FieldElement_M6P);
    B.List_I2f = A._setArrayType(makeConstList([15121113, -5201871, -10389905, 15427821, -27509937, -15992507, 21670947, 4486675, -5931810, -14466380]), type$.JSArray_int);
    B.FieldElement_USZ = new A.FieldElement(B.List_I2f);
    B.List_zrt = A._setArrayType(makeConstList([16166486, -9483733, -11104130, 6023908, -31926798, -1364923, 2340060, -16254968, -10735770, -10039824]), type$.JSArray_int);
    B.FieldElement_ZCY0 = new A.FieldElement(B.List_zrt);
    B.List_GnM = A._setArrayType(makeConstList([28042865, -3557089, -12126526, 12259706, -3717498, -6945899, 6766453, -8689599, 18036436, 5803270]), type$.JSArray_int);
    B.FieldElement_Hx4 = new A.FieldElement(B.List_GnM);
    B.GroupElementPrecomp_gkc0 = new A.GroupElementPrecomp(B.FieldElement_USZ, B.FieldElement_ZCY0, B.FieldElement_Hx4);
    B.List_DDf = A._setArrayType(makeConstList([B.GroupElementPrecomp_CXi, B.GroupElementPrecomp_ub4, B.GroupElementPrecomp_gsm, B.GroupElementPrecomp_xre, B.GroupElementPrecomp_uZ2, B.GroupElementPrecomp_Scp, B.GroupElementPrecomp_WZa, B.GroupElementPrecomp_gkc0]), type$.JSArray_GroupElementPrecomp);
    B.List_G3h = A._setArrayType(makeConstList([-817581, 6763912, 11803561, 1585585, 10958447, -2671165, 23855391, 4598332, -6159431, -14117438]), type$.JSArray_int);
    B.FieldElement_vya = new A.FieldElement(B.List_G3h);
    B.List_YGm = A._setArrayType(makeConstList([-31031306, -14256194, 17332029, -2383520, 31312682, -5967183, 696309, 50292, -20095739, 11763584]), type$.JSArray_int);
    B.FieldElement_gkc5 = new A.FieldElement(B.List_YGm);
    B.List_Q0t = A._setArrayType(makeConstList([-594563, -2514283, -32234153, 12643980, 12650761, 14811489, 665117, -12613632, -19773211, -10713562]), type$.JSArray_int);
    B.FieldElement_8aB1 = new A.FieldElement(B.List_Q0t);
    B.GroupElementPrecomp_RkP = new A.GroupElementPrecomp(B.FieldElement_vya, B.FieldElement_gkc5, B.FieldElement_8aB1);
    B.List_7xV0 = A._setArrayType(makeConstList([30464590, -11262872, -4127476, -12734478, 19835327, -7105613, -24396175, 2075773, -17020157, 992471]), type$.JSArray_int);
    B.FieldElement_cSk = new A.FieldElement(B.List_7xV0);
    B.List_Jhc = A._setArrayType(makeConstList([18357185, -6994433, 7766382, 16342475, -29324918, 411174, 14578841, 8080033, -11574335, -10601610]), type$.JSArray_int);
    B.FieldElement_wBI = new A.FieldElement(B.List_Jhc);
    B.List_2Zi = A._setArrayType(makeConstList([19598397, 10334610, 12555054, 2555664, 18821899, -10339780, 21873263, 16014234, 26224780, 16452269]), type$.JSArray_int);
    B.FieldElement_MQu = new A.FieldElement(B.List_2Zi);
    B.GroupElementPrecomp_2Ou = new A.GroupElementPrecomp(B.FieldElement_cSk, B.FieldElement_wBI, B.FieldElement_MQu);
    B.List_ciW0 = A._setArrayType(makeConstList([-30223925, 5145196, 5944548, 16385966, 3976735, 2009897, -11377804, -7618186, -20533829, 3698650]), type$.JSArray_int);
    B.FieldElement_0WV0 = new A.FieldElement(B.List_ciW0);
    B.List_ROM = A._setArrayType(makeConstList([14187449, 3448569, -10636236, -10810935, -22663880, -3433596, 7268410, -10890444, 27394301, 12015369]), type$.JSArray_int);
    B.FieldElement_u2C = new A.FieldElement(B.List_ROM);
    B.List_Cny = A._setArrayType(makeConstList([19695761, 16087646, 28032085, 12999827, 6817792, 11427614, 20244189, -1312777, -13259127, -3402461]), type$.JSArray_int);
    B.FieldElement_gPw = new A.FieldElement(B.List_Cny);
    B.GroupElementPrecomp_qbi = new A.GroupElementPrecomp(B.FieldElement_0WV0, B.FieldElement_u2C, B.FieldElement_gPw);
    B.List_rgg = A._setArrayType(makeConstList([30860103, 12735208, -1888245, -4699734, -16974906, 2256940, -8166013, 12298312, -8550524, -10393462]), type$.JSArray_int);
    B.FieldElement_ohJ0 = new A.FieldElement(B.List_rgg);
    B.List_wSk = A._setArrayType(makeConstList([-5719826, -11245325, -1910649, 15569035, 26642876, -7587760, -5789354, -15118654, -4976164, 12651793]), type$.JSArray_int);
    B.FieldElement_OTB = new A.FieldElement(B.List_wSk);
    B.List_Z0b = A._setArrayType(makeConstList([-2848395, 9953421, 11531313, -5282879, 26895123, -12697089, -13118820, -16517902, 9768698, -2533218]), type$.JSArray_int);
    B.FieldElement_tQy = new A.FieldElement(B.List_Z0b);
    B.GroupElementPrecomp_01 = new A.GroupElementPrecomp(B.FieldElement_ohJ0, B.FieldElement_OTB, B.FieldElement_tQy);
    B.List_6xV1 = A._setArrayType(makeConstList([-24719459, 1894651, -287698, -4704085, 15348719, -8156530, 32767513, 12765450, 4940095, 10678226]), type$.JSArray_int);
    B.FieldElement_2Vk2 = new A.FieldElement(B.List_6xV1);
    B.List_ZGD = A._setArrayType(makeConstList([18860224, 15980149, -18987240, -1562570, -26233012, -11071856, -7843882, 13944024, -24372348, 16582019]), type$.JSArray_int);
    B.FieldElement_gdd = new A.FieldElement(B.List_ZGD);
    B.List_qJx = A._setArrayType(makeConstList([-15504260, 4970268, -29893044, 4175593, -20993212, -2199756, -11704054, 15444560, -11003761, 7989037]), type$.JSArray_int);
    B.FieldElement_bDN = new A.FieldElement(B.List_qJx);
    B.GroupElementPrecomp_Xfu = new A.GroupElementPrecomp(B.FieldElement_2Vk2, B.FieldElement_gdd, B.FieldElement_bDN);
    B.List_zrt0 = A._setArrayType(makeConstList([31490452, 5568061, -2412803, 2182383, -32336847, 4531686, -32078269, 6200206, -19686113, -14800171]), type$.JSArray_int);
    B.FieldElement_ZCY1 = new A.FieldElement(B.List_zrt0);
    B.List_oou = A._setArrayType(makeConstList([-17308668, -15879940, -31522777, -2831, -32887382, 16375549, 8680158, -16371713, 28550068, -6857132]), type$.JSArray_int);
    B.FieldElement_8eb1 = new A.FieldElement(B.List_oou);
    B.List_ujW = A._setArrayType(makeConstList([-28126887, -5688091, 16837845, -1820458, -6850681, 12700016, -30039981, 4364038, 1155602, 5988841]), type$.JSArray_int);
    B.FieldElement_66p = new A.FieldElement(B.List_ujW);
    B.GroupElementPrecomp_K1h = new A.GroupElementPrecomp(B.FieldElement_ZCY1, B.FieldElement_8eb1, B.FieldElement_66p);
    B.List_V0W = A._setArrayType(makeConstList([21890435, -13272907, -12624011, 12154349, -7831873, 15300496, 23148983, -4470481, 24618407, 8283181]), type$.JSArray_int);
    B.FieldElement_4AN2 = new A.FieldElement(B.List_V0W);
    B.List_O8h = A._setArrayType(makeConstList([-33136107, -10512751, 9975416, 6841041, -31559793, 16356536, 3070187, -7025928, 1466169, 10740210]), type$.JSArray_int);
    B.FieldElement_2rR = new A.FieldElement(B.List_O8h);
    B.List_a1W = A._setArrayType(makeConstList([-1509399, -15488185, -13503385, -10655916, 32799044, 909394, -13938903, -5779719, -32164649, -15327040]), type$.JSArray_int);
    B.FieldElement_jVk = new A.FieldElement(B.List_a1W);
    B.GroupElementPrecomp_2Y0 = new A.GroupElementPrecomp(B.FieldElement_4AN2, B.FieldElement_2rR, B.FieldElement_jVk);
    B.List_qNu = A._setArrayType(makeConstList([3960823, -14267803, -28026090, -15918051, -19404858, 13146868, 15567327, 951507, -3260321, -573935]), type$.JSArray_int);
    B.FieldElement_07 = new A.FieldElement(B.List_qNu);
    B.List_I6U = A._setArrayType(makeConstList([24740841, 5052253, -30094131, 8961361, 25877428, 6165135, -24368180, 14397372, -7380369, -6144105]), type$.JSArray_int);
    B.FieldElement_M4b = new A.FieldElement(B.List_I6U);
    B.List_Art0 = A._setArrayType(makeConstList([-28888365, 3510803, -28103278, -1158478, -11238128, -10631454, -15441463, -14453128, -1625486, -6494814]), type$.JSArray_int);
    B.FieldElement_cdV0 = new A.FieldElement(B.List_Art0);
    B.GroupElementPrecomp_ato = new A.GroupElementPrecomp(B.FieldElement_07, B.FieldElement_M4b, B.FieldElement_cdV0);
    B.List_8wU = A._setArrayType(makeConstList([B.GroupElementPrecomp_RkP, B.GroupElementPrecomp_2Ou, B.GroupElementPrecomp_qbi, B.GroupElementPrecomp_01, B.GroupElementPrecomp_Xfu, B.GroupElementPrecomp_K1h, B.GroupElementPrecomp_2Y0, B.GroupElementPrecomp_ato]), type$.JSArray_GroupElementPrecomp);
    B.List_53b = A._setArrayType(makeConstList([793299, -9230478, 8836302, -6235707, -27360908, -2369593, 33152843, -4885251, -9906200, -621852]), type$.JSArray_int);
    B.FieldElement_mtF = new A.FieldElement(B.List_53b);
    B.List_Zg3 = A._setArrayType(makeConstList([5666233, 525582, 20782575, -8038419, -24538499, 14657740, 16099374, 1468826, -6171428, -15186581]), type$.JSArray_int);
    B.FieldElement_LDd = new A.FieldElement(B.List_Zg3);
    B.List_AcR = A._setArrayType(makeConstList([-4859255, -3779343, -2917758, -6748019, 7778750, 11688288, -30404353, -9871238, -1558923, -9863646]), type$.JSArray_int);
    B.FieldElement_IRf = new A.FieldElement(B.List_AcR);
    B.GroupElementPrecomp_Gx6 = new A.GroupElementPrecomp(B.FieldElement_mtF, B.FieldElement_LDd, B.FieldElement_IRf);
    B.List_i9K0 = A._setArrayType(makeConstList([10896332, -7719704, 824275, 472601, -19460308, 3009587, 25248958, 14783338, -30581476, -15757844]), type$.JSArray_int);
    B.FieldElement_WqP0 = new A.FieldElement(B.List_i9K0);
    B.List_sx4 = A._setArrayType(makeConstList([10566929, 12612572, -31944212, 11118703, -12633376, 12362879, 21752402, 8822496, 24003793, 14264025]), type$.JSArray_int);
    B.FieldElement_9m9 = new A.FieldElement(B.List_sx4);
    B.List_ovM = A._setArrayType(makeConstList([27713862, -7355973, -11008240, 9227530, 27050101, 2504721, 23886875, -13117525, 13958495, -5732453]), type$.JSArray_int);
    B.FieldElement_m7k = new A.FieldElement(B.List_ovM);
    B.GroupElementPrecomp_Xok = new A.GroupElementPrecomp(B.FieldElement_WqP0, B.FieldElement_9m9, B.FieldElement_m7k);
    B.List_C1B = A._setArrayType(makeConstList([-23481610, 4867226, -27247128, 3900521, 29838369, -8212291, -31889399, -10041781, 7340521, -15410068]), type$.JSArray_int);
    B.FieldElement_Feh = new A.FieldElement(B.List_C1B);
    B.List_vnd = A._setArrayType(makeConstList([4646514, -8011124, -22766023, -11532654, 23184553, 8566613, 31366726, -1381061, -15066784, -10375192]), type$.JSArray_int);
    B.FieldElement_WZa = new A.FieldElement(B.List_vnd);
    B.List_uew = A._setArrayType(makeConstList([-17270517, 12723032, -16993061, 14878794, 21619651, -6197576, 27584817, 3093888, -8843694, 3849921]), type$.JSArray_int);
    B.FieldElement_ccK = new A.FieldElement(B.List_uew);
    B.GroupElementPrecomp_5kI = new A.GroupElementPrecomp(B.FieldElement_Feh, B.FieldElement_WZa, B.FieldElement_ccK);
    B.List_lya = A._setArrayType(makeConstList([-9064912, 2103172, 25561640, -15125738, -5239824, 9582958, 32477045, -9017955, 5002294, -15550259]), type$.JSArray_int);
    B.FieldElement_ASw = new A.FieldElement(B.List_lya);
    B.List_33h0 = A._setArrayType(makeConstList([-12057553, -11177906, 21115585, -13365155, 8808712, -12030708, 16489530, 13378448, -25845716, 12741426]), type$.JSArray_int);
    B.FieldElement_iyl = new A.FieldElement(B.List_33h0);
    B.List_KWR = A._setArrayType(makeConstList([-5946367, 10645103, -30911586, 15390284, -3286982, -7118677, 24306472, 15852464, 28834118, -7646072]), type$.JSArray_int);
    B.FieldElement_sAl = new A.FieldElement(B.List_KWR);
    B.GroupElementPrecomp_aBG = new A.GroupElementPrecomp(B.FieldElement_ASw, B.FieldElement_iyl, B.FieldElement_sAl);
    B.List_f7d = A._setArrayType(makeConstList([-17335748, -9107057, -24531279, 9434953, -8472084, -583362, -13090771, 455841, 20461858, 5491305]), type$.JSArray_int);
    B.FieldElement_5e8 = new A.FieldElement(B.List_f7d);
    B.List_gc60 = A._setArrayType(makeConstList([13669248, -16095482, -12481974, -10203039, -14569770, -11893198, -24995986, 11293807, -28588204, -9421832]), type$.JSArray_int);
    B.FieldElement_nM90 = new A.FieldElement(B.List_gc60);
    B.List_jvJ0 = A._setArrayType(makeConstList([28497928, 6272777, -33022994, 14470570, 8906179, -1225630, 18504674, -14165166, 29867745, -8795943]), type$.JSArray_int);
    B.FieldElement_grs = new A.FieldElement(B.List_jvJ0);
    B.GroupElementPrecomp_YPP = new A.GroupElementPrecomp(B.FieldElement_5e8, B.FieldElement_nM90, B.FieldElement_grs);
    B.List_NQe = A._setArrayType(makeConstList([-16207023, 13517196, -27799630, -13697798, 24009064, -6373891, -6367600, -13175392, 22853429, -4012011]), type$.JSArray_int);
    B.FieldElement_QcL = new A.FieldElement(B.List_NQe);
    B.List_m5r = A._setArrayType(makeConstList([24191378, 16712145, -13931797, 15217831, 14542237, 1646131, 18603514, -11037887, 12876623, -2112447]), type$.JSArray_int);
    B.FieldElement_e1j = new A.FieldElement(B.List_m5r);
    B.List_JAi = A._setArrayType(makeConstList([17902668, 4518229, -411702, -2829247, 26878217, 5258055, -12860753, 608397, 16031844, 3723494]), type$.JSArray_int);
    B.FieldElement_GJk0 = new A.FieldElement(B.List_JAi);
    B.GroupElementPrecomp_aHw = new A.GroupElementPrecomp(B.FieldElement_QcL, B.FieldElement_e1j, B.FieldElement_GJk0);
    B.List_aDt = A._setArrayType(makeConstList([-28632773, 12763728, -20446446, 7577504, 33001348, -13017745, 17558842, -7872890, 23896954, -4314245]), type$.JSArray_int);
    B.FieldElement_wsa1 = new A.FieldElement(B.List_aDt);
    B.List_Rss = A._setArrayType(makeConstList([-20005381, -12011952, 31520464, 605201, 2543521, 5991821, -2945064, 7229064, -9919646, -8826859]), type$.JSArray_int);
    B.FieldElement_QrL = new A.FieldElement(B.List_Rss);
    B.List_3bx0 = A._setArrayType(makeConstList([28816045, 298879, -28165016, -15920938, 19000928, -1665890, -12680833, -2949325, -18051778, -2082915]), type$.JSArray_int);
    B.FieldElement_kQR0 = new A.FieldElement(B.List_3bx0);
    B.GroupElementPrecomp_chs = new A.GroupElementPrecomp(B.FieldElement_wsa1, B.FieldElement_QrL, B.FieldElement_kQR0);
    B.List_4i6 = A._setArrayType(makeConstList([16000882, -344896, 3493092, -11447198, -29504595, -13159789, 12577740, 16041268, -19715240, 7847707]), type$.JSArray_int);
    B.FieldElement_EWL = new A.FieldElement(B.List_4i6);
    B.List_mxs = A._setArrayType(makeConstList([10151868, 10572098, 27312476, 7922682, 14825339, 4723128, -32855931, -6519018, -10020567, 3852848]), type$.JSArray_int);
    B.FieldElement_IUx = new A.FieldElement(B.List_mxs);
    B.List_wC4 = A._setArrayType(makeConstList([-11430470, 15697596, -21121557, -4420647, 5386314, 15063598, 16514493, -15932110, 29330899, -15076224]), type$.JSArray_int);
    B.FieldElement_ifx0 = new A.FieldElement(B.List_wC4);
    B.GroupElementPrecomp_i1a = new A.GroupElementPrecomp(B.FieldElement_EWL, B.FieldElement_IUx, B.FieldElement_ifx0);
    B.List_yrt = A._setArrayType(makeConstList([B.GroupElementPrecomp_Gx6, B.GroupElementPrecomp_Xok, B.GroupElementPrecomp_5kI, B.GroupElementPrecomp_aBG, B.GroupElementPrecomp_YPP, B.GroupElementPrecomp_aHw, B.GroupElementPrecomp_chs, B.GroupElementPrecomp_i1a]), type$.JSArray_GroupElementPrecomp);
    B.List_s8I0 = A._setArrayType(makeConstList([-25499735, -4378794, -15222908, -6901211, 16615731, 2051784, 3303702, 15490, -27548796, 12314391]), type$.JSArray_int);
    B.FieldElement_SVP0 = new A.FieldElement(B.List_s8I0);
    B.List_aZE = A._setArrayType(makeConstList([15683520, -6003043, 18109120, -9980648, 15337968, -5997823, -16717435, 15921866, 16103996, -3731215]), type$.JSArray_int);
    B.FieldElement_qBv = new A.FieldElement(B.List_aZE);
    B.List_Iik = A._setArrayType(makeConstList([-23169824, -10781249, 13588192, -1628807, -3798557, -1074929, -19273607, 5402699, -29815713, -9841101]), type$.JSArray_int);
    B.FieldElement_ouk = new A.FieldElement(B.List_Iik);
    B.GroupElementPrecomp_a9d = new A.GroupElementPrecomp(B.FieldElement_SVP0, B.FieldElement_qBv, B.FieldElement_ouk);
    B.List_Wz9 = A._setArrayType(makeConstList([23190676, 2384583, -32714340, 3462154, -29903655, -1529132, -11266856, 8911517, -25205859, 2739713]), type$.JSArray_int);
    B.FieldElement_52w = new A.FieldElement(B.List_Wz9);
    B.List_Vn6 = A._setArrayType(makeConstList([21374101, -3554250, -33524649, 9874411, 15377179, 11831242, -33529904, 6134907, 4931255, 11987849]), type$.JSArray_int);
    B.FieldElement_ejK = new A.FieldElement(B.List_Vn6);
    B.List_ouN3 = A._setArrayType(makeConstList([-7732, -2978858, -16223486, 7277597, 105524, -322051, -31480539, 13861388, -30076310, 10117930]), type$.JSArray_int);
    B.FieldElement_E8w = new A.FieldElement(B.List_ouN3);
    B.GroupElementPrecomp_9YE = new A.GroupElementPrecomp(B.FieldElement_52w, B.FieldElement_ejK, B.FieldElement_E8w);
    B.List_evg = A._setArrayType(makeConstList([-29501170, -10744872, -26163768, 13051539, -25625564, 5089643, -6325503, 6704079, 12890019, 15728940]), type$.JSArray_int);
    B.FieldElement_wsa2 = new A.FieldElement(B.List_evg);
    B.List_8Is = A._setArrayType(makeConstList([-21972360, -11771379, -951059, -4418840, 14704840, 2695116, 903376, -10428139, 12885167, 8311031]), type$.JSArray_int);
    B.FieldElement_wM5 = new A.FieldElement(B.List_8Is);
    B.List_D340 = A._setArrayType(makeConstList([-17516482, 5352194, 10384213, -13811658, 7506451, 13453191, 26423267, 4384730, 1888765, -5435404]), type$.JSArray_int);
    B.FieldElement_8Wd0 = new A.FieldElement(B.List_D340);
    B.GroupElementPrecomp_CmO = new A.GroupElementPrecomp(B.FieldElement_wsa2, B.FieldElement_wM5, B.FieldElement_8Wd0);
    B.List_651 = A._setArrayType(makeConstList([-25817338, -3107312, -13494599, -3182506, 30896459, -13921729, -32251644, -12707869, -19464434, -3340243]), type$.JSArray_int);
    B.FieldElement_wIq = new A.FieldElement(B.List_651);
    B.List_A2Y = A._setArrayType(makeConstList([-23607977, -2665774, -526091, 4651136, 5765089, 4618330, 6092245, 14845197, 17151279, -9854116]), type$.JSArray_int);
    B.FieldElement_8aB2 = new A.FieldElement(B.List_A2Y);
    B.List_xw80 = A._setArrayType(makeConstList([-24830458, -12733720, -15165978, 10367250, -29530908, -265356, 22825805, -7087279, -16866484, 16176525]), type$.JSArray_int);
    B.FieldElement_CyE0 = new A.FieldElement(B.List_xw80);
    B.GroupElementPrecomp_2Vk = new A.GroupElementPrecomp(B.FieldElement_wIq, B.FieldElement_8aB2, B.FieldElement_CyE0);
    B.List_6d7 = A._setArrayType(makeConstList([-23583256, 6564961, 20063689, 3798228, -4740178, 7359225, 2006182, -10363426, -28746253, -10197509]), type$.JSArray_int);
    B.FieldElement_J4X = new A.FieldElement(B.List_6d7);
    B.List_VkC = A._setArrayType(makeConstList([-10626600, -4486402, -13320562, -5125317, 3432136, -6393229, 23632037, -1940610, 32808310, 1099883]), type$.JSArray_int);
    B.FieldElement_cOY = new A.FieldElement(B.List_VkC);
    B.List_M2D = A._setArrayType(makeConstList([15030977, 5768825, -27451236, -2887299, -6427378, -15361371, -15277896, -6809350, 2051441, -15225865]), type$.JSArray_int);
    B.FieldElement_vUN = new A.FieldElement(B.List_M2D);
    B.GroupElementPrecomp_wzK = new A.GroupElementPrecomp(B.FieldElement_J4X, B.FieldElement_cOY, B.FieldElement_vUN);
    B.List_ASw = A._setArrayType(makeConstList([-3362323, -7239372, 7517890, 9824992, 23555850, 295369, 5148398, -14154188, -22686354, 16633660]), type$.JSArray_int);
    B.FieldElement_KBB = new A.FieldElement(B.List_ASw);
    B.List_EGJ = A._setArrayType(makeConstList([4577086, -16752288, 13249841, -15304328, 19958763, -14537274, 18559670, -10759549, 8402478, -9864273]), type$.JSArray_int);
    B.FieldElement_rJr = new A.FieldElement(B.List_EGJ);
    B.List_evY = A._setArrayType(makeConstList([-28406330, -1051581, -26790155, -907698, -17212414, -11030789, 9453451, -14980072, 17983010, 9967138]), type$.JSArray_int);
    B.FieldElement_9aR = new A.FieldElement(B.List_evY);
    B.GroupElementPrecomp_Qqi = new A.GroupElementPrecomp(B.FieldElement_KBB, B.FieldElement_rJr, B.FieldElement_9aR);
    B.List_G7N = A._setArrayType(makeConstList([-25762494, 6524722, 26585488, 9969270, 24709298, 1220360, -1677990, 7806337, 17507396, 3651560]), type$.JSArray_int);
    B.FieldElement_EMH = new A.FieldElement(B.List_G7N);
    B.List_qlj = A._setArrayType(makeConstList([-10420457, -4118111, 14584639, 15971087, -15768321, 8861010, 26556809, -5574557, -18553322, -11357135]), type$.JSArray_int);
    B.FieldElement_a5e = new A.FieldElement(B.List_qlj);
    B.List_jTP = A._setArrayType(makeConstList([2839101, 14284142, 4029895, 3472686, 14402957, 12689363, -26642121, 8459447, -5605463, -7621941]), type$.JSArray_int);
    B.FieldElement_lQU = new A.FieldElement(B.List_jTP);
    B.GroupElementPrecomp_8Wd = new A.GroupElementPrecomp(B.FieldElement_EMH, B.FieldElement_a5e, B.FieldElement_lQU);
    B.List_Aec0 = A._setArrayType(makeConstList([-4839289, -3535444, 9744961, 2871048, 25113978, 3187018, -25110813, -849066, 17258084, -7977739]), type$.JSArray_int);
    B.FieldElement_6pS0 = new A.FieldElement(B.List_Aec0);
    B.List_v9F = A._setArrayType(makeConstList([18164541, -10595176, -17154882, -1542417, 19237078, -9745295, 23357533, -15217008, 26908270, 12150756]), type$.JSArray_int);
    B.FieldElement_eNt = new A.FieldElement(B.List_v9F);
    B.List_mJZ = A._setArrayType(makeConstList([-30264870, -7647865, 5112249, -7036672, -1499807, -6974257, 43168, -5537701, -32302074, 16215819]), type$.JSArray_int);
    B.FieldElement_fx3 = new A.FieldElement(B.List_mJZ);
    B.GroupElementPrecomp_zrt0 = new A.GroupElementPrecomp(B.FieldElement_6pS0, B.FieldElement_eNt, B.FieldElement_fx3);
    B.List_3Nb0 = A._setArrayType(makeConstList([B.GroupElementPrecomp_a9d, B.GroupElementPrecomp_9YE, B.GroupElementPrecomp_CmO, B.GroupElementPrecomp_2Vk, B.GroupElementPrecomp_wzK, B.GroupElementPrecomp_Qqi, B.GroupElementPrecomp_8Wd, B.GroupElementPrecomp_zrt0]), type$.JSArray_GroupElementPrecomp);
    B.List_SFX = A._setArrayType(makeConstList([-6898905, 9824394, -12304779, -4401089, -31397141, -6276835, 32574489, 12532905, -7503072, -8675347]), type$.JSArray_int);
    B.FieldElement_afP = new A.FieldElement(B.List_SFX);
    B.List_mCz = A._setArrayType(makeConstList([-27343522, -16515468, -27151524, -10722951, 946346, 16291093, 254968, 7168080, 21676107, -1943028]), type$.JSArray_int);
    B.FieldElement_UaS = new A.FieldElement(B.List_mCz);
    B.List_yL1 = A._setArrayType(makeConstList([21260961, -8424752, -16831886, -11920822, -23677961, 3968121, -3651949, -6215466, -3556191, -7913075]), type$.JSArray_int);
    B.FieldElement_G3K = new A.FieldElement(B.List_yL1);
    B.GroupElementPrecomp_OX3 = new A.GroupElementPrecomp(B.FieldElement_afP, B.FieldElement_UaS, B.FieldElement_G3K);
    B.List_sEs0 = A._setArrayType(makeConstList([16544754, 13250366, -16804428, 15546242, -4583003, 12757258, -2462308, -8680336, -18907032, -9662799]), type$.JSArray_int);
    B.FieldElement_r5C0 = new A.FieldElement(B.List_sEs0);
    B.List_7N70 = A._setArrayType(makeConstList([-2415239, -15577728, 18312303, 4964443, -15272530, -12653564, 26820651, 16690659, 25459437, -4564609]), type$.JSArray_int);
    B.FieldElement_KD20 = new A.FieldElement(B.List_7N70);
    B.List_F4S = A._setArrayType(makeConstList([-25144690, 11425020, 28423002, -11020557, -6144921, -15826224, 9142795, -2391602, -6432418, -1644817]), type$.JSArray_int);
    B.FieldElement_QSK = new A.FieldElement(B.List_F4S);
    B.GroupElementPrecomp_Q1S = new A.GroupElementPrecomp(B.FieldElement_r5C0, B.FieldElement_KD20, B.FieldElement_QSK);
    B.List_c4f = A._setArrayType(makeConstList([-23104652, 6253476, 16964147, -3768872, -25113972, -12296437, -27457225, -16344658, 6335692, 7249989]), type$.JSArray_int);
    B.FieldElement_oyU0 = new A.FieldElement(B.List_c4f);
    B.List_nf1 = A._setArrayType(makeConstList([-30333227, 13979675, 7503222, -12368314, -11956721, -4621693, -30272269, 2682242, 25993170, -12478523]), type$.JSArray_int);
    B.FieldElement_M1t = new A.FieldElement(B.List_nf1);
    B.List_7MZ = A._setArrayType(makeConstList([4364628, 5930691, 32304656, -10044554, -8054781, 15091131, 22857016, -10598955, 31820368, 15075278]), type$.JSArray_int);
    B.FieldElement_BWu = new A.FieldElement(B.List_7MZ);
    B.GroupElementPrecomp_Iem = new A.GroupElementPrecomp(B.FieldElement_oyU0, B.FieldElement_M1t, B.FieldElement_BWu);
    B.List_Zyo = A._setArrayType(makeConstList([31879134, -8918693, 17258761, 90626, -8041836, -4917709, 24162788, -9650886, -17970238, 12833045]), type$.JSArray_int);
    B.FieldElement_yzQ = new A.FieldElement(B.List_Zyo);
    B.List_o0y = A._setArrayType(makeConstList([19073683, 14851414, -24403169, -11860168, 7625278, 11091125, -19619190, 2074449, -9413939, 14905377]), type$.JSArray_int);
    B.FieldElement_GRg = new A.FieldElement(B.List_o0y);
    B.List_BQ9 = A._setArrayType(makeConstList([24483667, -11935567, -2518866, -11547418, -1553130, 15355506, -25282080, 9253129, 27628530, -7555480]), type$.JSArray_int);
    B.FieldElement_1I7 = new A.FieldElement(B.List_BQ9);
    B.GroupElementPrecomp_rTx = new A.GroupElementPrecomp(B.FieldElement_yzQ, B.FieldElement_GRg, B.FieldElement_1I7);
    B.List_uwd = A._setArrayType(makeConstList([17597607, 8340603, 19355617, 552187, 26198470, -3176583, 4593324, -9157582, -14110875, 15297016]), type$.JSArray_int);
    B.FieldElement_gJC0 = new A.FieldElement(B.List_uwd);
    B.List_wIq0 = A._setArrayType(makeConstList([510886, 14337390, -31785257, 16638632, 6328095, 2713355, -20217417, -11864220, 8683221, 2921426]), type$.JSArray_int);
    B.FieldElement_gzW0 = new A.FieldElement(B.List_wIq0);
    B.List_kyU = A._setArrayType(makeConstList([18606791, 11874196, 27155355, -5281482, -24031742, 6265446, -25178240, -1278924, 4674690, 13890525]), type$.JSArray_int);
    B.FieldElement_mqK = new A.FieldElement(B.List_kyU);
    B.GroupElementPrecomp_KlL = new A.GroupElementPrecomp(B.FieldElement_gJC0, B.FieldElement_gzW0, B.FieldElement_mqK);
    B.List_ouN4 = A._setArrayType(makeConstList([13609624, 13069022, -27372361, -13055908, 24360586, 9592974, 14977157, 9835105, 4389687, 288396]), type$.JSArray_int);
    B.FieldElement_E8w0 = new A.FieldElement(B.List_ouN4);
    B.List_AgZ = A._setArrayType(makeConstList([9922506, -519394, 13613107, 5883594, -18758345, -434263, -12304062, 8317628, 23388070, 16052080]), type$.JSArray_int);
    B.FieldElement_MxR = new A.FieldElement(B.List_AgZ);
    B.List_Nfl = A._setArrayType(makeConstList([12720016, 11937594, -31970060, -5028689, 26900120, 8561328, -20155687, -11632979, -14754271, -10812892]), type$.JSArray_int);
    B.FieldElement_7v8 = new A.FieldElement(B.List_Nfl);
    B.GroupElementPrecomp_JO4 = new A.GroupElementPrecomp(B.FieldElement_E8w0, B.FieldElement_MxR, B.FieldElement_7v8);
    B.List_P3v = A._setArrayType(makeConstList([15961858, 14150409, 26716931, -665832, -22794328, 13603569, 11829573, 7467844, -28822128, 929275]), type$.JSArray_int);
    B.FieldElement_6TA = new A.FieldElement(B.List_P3v);
    B.List_OPa = A._setArrayType(makeConstList([11038231, -11582396, -27310482, -7316562, -10498527, -16307831, -23479533, -9371869, -21393143, 2465074]), type$.JSArray_int);
    B.FieldElement_sww = new A.FieldElement(B.List_OPa);
    B.List_OxB = A._setArrayType(makeConstList([20017163, -4323226, 27915242, 1529148, 12396362, 15675764, 13817261, -9658066, 2463391, -4622140]), type$.JSArray_int);
    B.FieldElement_eDa = new A.FieldElement(B.List_OxB);
    B.GroupElementPrecomp_zLo = new A.GroupElementPrecomp(B.FieldElement_6TA, B.FieldElement_sww, B.FieldElement_eDa);
    B.List_e5l = A._setArrayType(makeConstList([-16358878, -12663911, -12065183, 4996454, -1256422, 1073572, 9583558, 12851107, 4003896, 12673717]), type$.JSArray_int);
    B.FieldElement_Na9 = new A.FieldElement(B.List_e5l);
    B.List_G7N0 = A._setArrayType(makeConstList([-1731589, -15155870, -3262930, 16143082, 19294135, 13385325, 14741514, -9103726, 7903886, 2348101]), type$.JSArray_int);
    B.FieldElement_EMH0 = new A.FieldElement(B.List_G7N0);
    B.List_zPV1 = A._setArrayType(makeConstList([24536016, -16515207, 12715592, -3862155, 1511293, 10047386, -3842346, -7129159, -28377538, 10048127]), type$.JSArray_int);
    B.FieldElement_qEI1 = new A.FieldElement(B.List_zPV1);
    B.GroupElementPrecomp_woc = new A.GroupElementPrecomp(B.FieldElement_Na9, B.FieldElement_EMH0, B.FieldElement_qEI1);
    B.List_izV = A._setArrayType(makeConstList([B.GroupElementPrecomp_OX3, B.GroupElementPrecomp_Q1S, B.GroupElementPrecomp_Iem, B.GroupElementPrecomp_rTx, B.GroupElementPrecomp_KlL, B.GroupElementPrecomp_JO4, B.GroupElementPrecomp_zLo, B.GroupElementPrecomp_woc]), type$.JSArray_GroupElementPrecomp);
    B.List_gFx = A._setArrayType(makeConstList([-12622226, -6204820, 30718825, 2591312, -10617028, 12192840, 18873298, -7297090, -32297756, 15221632]), type$.JSArray_int);
    B.FieldElement_h8p = new A.FieldElement(B.List_gFx);
    B.List_aZO = A._setArrayType(makeConstList([-26478122, -11103864, 11546244, -1852483, 9180880, 7656409, -21343950, 2095755, 29769758, 6593415]), type$.JSArray_int);
    B.FieldElement_yPV0 = new A.FieldElement(B.List_aZO);
    B.List_EOZ1 = A._setArrayType(makeConstList([-31994208, -2907461, 4176912, 3264766, 12538965, -868111, 26312345, -6118678, 30958054, 8292160]), type$.JSArray_int);
    B.FieldElement_1yt1 = new A.FieldElement(B.List_EOZ1);
    B.GroupElementPrecomp_ih4 = new A.GroupElementPrecomp(B.FieldElement_h8p, B.FieldElement_yPV0, B.FieldElement_1yt1);
    B.List_Emx = A._setArrayType(makeConstList([31429822, -13959116, 29173532, 15632448, 12174511, -2760094, 32808831, 3977186, 26143136, -3148876]), type$.JSArray_int);
    B.FieldElement_bQs = new A.FieldElement(B.List_Emx);
    B.List_Lu9 = A._setArrayType(makeConstList([22648901, 1402143, -22799984, 13746059, 7936347, 365344, -8668633, -1674433, -3758243, -2304625]), type$.JSArray_int);
    B.FieldElement_ivT = new A.FieldElement(B.List_Lu9);
    B.List_D5r = A._setArrayType(makeConstList([-15491917, 8012313, -2514730, -12702462, -23965846, -10254029, -1612713, -1535569, -16664475, 8194478]), type$.JSArray_int);
    B.FieldElement_z0u = new A.FieldElement(B.List_D5r);
    B.GroupElementPrecomp_02 = new A.GroupElementPrecomp(B.FieldElement_bQs, B.FieldElement_ivT, B.FieldElement_z0u);
    B.List_bhs = A._setArrayType(makeConstList([27338066, -7507420, -7414224, 10140405, -19026427, -6589889, 27277191, 8855376, 28572286, 3005164]), type$.JSArray_int);
    B.FieldElement_Gd8 = new A.FieldElement(B.List_bhs);
    B.List_U050 = A._setArrayType(makeConstList([26287124, 4821776, 25476601, -4145903, -3764513, -15788984, -18008582, 1182479, -26094821, -13079595]), type$.JSArray_int);
    B.FieldElement_q4Q = new A.FieldElement(B.List_U050);
    B.List_5G4 = A._setArrayType(makeConstList([-7171154, 3178080, 23970071, 6201893, -17195577, -4489192, -21876275, -13982627, 32208683, -1198248]), type$.JSArray_int);
    B.FieldElement_yXx = new A.FieldElement(B.List_5G4);
    B.GroupElementPrecomp_WuY = new A.GroupElementPrecomp(B.FieldElement_Gd8, B.FieldElement_q4Q, B.FieldElement_yXx);
    B.List_03i = A._setArrayType(makeConstList([-16657702, 2817643, -10286362, 14811298, 6024667, 13349505, -27315504, -10497842, -27672585, -11539858]), type$.JSArray_int);
    B.FieldElement_AVh = new A.FieldElement(B.List_03i);
    B.List_012 = A._setArrayType(makeConstList([15941029, -9405932, -21367050, 8062055, 31876073, -238629, -15278393, -1444429, 15397331, -4130193]), type$.JSArray_int);
    B.FieldElement_43h7 = new A.FieldElement(B.List_012);
    B.List_U4w0 = A._setArrayType(makeConstList([8934485, -13485467, -23286397, -13423241, -32446090, 14047986, 31170398, -1441021, -27505566, 15087184]), type$.JSArray_int);
    B.FieldElement_gnE0 = new A.FieldElement(B.List_U4w0);
    B.GroupElementPrecomp_a3L = new A.GroupElementPrecomp(B.FieldElement_AVh, B.FieldElement_43h7, B.FieldElement_gnE0);
    B.List_26p = A._setArrayType(makeConstList([-18357243, -2156491, 24524913, -16677868, 15520427, -6360776, -15502406, 11461896, 16788528, -5868942]), type$.JSArray_int);
    B.FieldElement_a5W = new A.FieldElement(B.List_26p);
    B.List_dEV = A._setArrayType(makeConstList([-1947386, 16013773, 21750665, 3714552, -17401782, -16055433, -3770287, -10323320, 31322514, -11615635]), type$.JSArray_int);
    B.FieldElement_I8B = new A.FieldElement(B.List_dEV);
    B.List_lwY = A._setArrayType(makeConstList([21426655, -5650218, -13648287, -5347537, -28812189, -4920970, -18275391, -14621414, 13040862, -12112948]), type$.JSArray_int);
    B.FieldElement_M2b0 = new A.FieldElement(B.List_lwY);
    B.GroupElementPrecomp_ZlS = new A.GroupElementPrecomp(B.FieldElement_a5W, B.FieldElement_I8B, B.FieldElement_M2b0);
    B.List_MIo0 = A._setArrayType(makeConstList([11293895, 12478086, -27136401, 15083750, -29307421, 14748872, 14555558, -13417103, 1613711, 4896935]), type$.JSArray_int);
    B.FieldElement_6TW0 = new A.FieldElement(B.List_MIo0);
    B.List_Wz90 = A._setArrayType(makeConstList([-25894883, 15323294, -8489791, -8057900, 25967126, -13425460, 2825960, -4897045, -23971776, -11267415]), type$.JSArray_int);
    B.FieldElement_52w0 = new A.FieldElement(B.List_Wz90);
    B.List_fXU = A._setArrayType(makeConstList([-15924766, -5229880, -17443532, 6410664, 3622847, 10243618, 20615400, 12405433, -23753030, -8436416]), type$.JSArray_int);
    B.FieldElement_eXS = new A.FieldElement(B.List_fXU);
    B.GroupElementPrecomp_s05 = new A.GroupElementPrecomp(B.FieldElement_6TW0, B.FieldElement_52w0, B.FieldElement_eXS);
    B.List_iZu = A._setArrayType(makeConstList([-7091295, 12556208, -20191352, 9025187, -17072479, 4333801, 4378436, 2432030, 23097949, -566018]), type$.JSArray_int);
    B.FieldElement_23m = new A.FieldElement(B.List_iZu);
    B.List_R8m = A._setArrayType(makeConstList([4565804, -16025654, 20084412, -7842817, 1724999, 189254, 24767264, 10103221, -18512313, 2424778]), type$.JSArray_int);
    B.FieldElement_e7Q = new A.FieldElement(B.List_R8m);
    B.List_mmH = A._setArrayType(makeConstList([366633, -11976806, 8173090, -6890119, 30788634, 5745705, -7168678, 1344109, -3642553, 12412659]), type$.JSArray_int);
    B.FieldElement_2jH = new A.FieldElement(B.List_mmH);
    B.GroupElementPrecomp_jtA = new A.GroupElementPrecomp(B.FieldElement_23m, B.FieldElement_e7Q, B.FieldElement_2jH);
    B.List_gkc1 = A._setArrayType(makeConstList([-24001791, 7690286, 14929416, -168257, -32210835, -13412986, 24162697, -15326504, -3141501, 11179385]), type$.JSArray_int);
    B.FieldElement_nZ31 = new A.FieldElement(B.List_gkc1);
    B.List_qxi = A._setArrayType(makeConstList([18289522, -14724954, 8056945, 16430056, -21729724, 7842514, -6001441, -1486897, -18684645, -11443503]), type$.JSArray_int);
    B.FieldElement_i7u = new A.FieldElement(B.List_qxi);
    B.List_oyU1 = A._setArrayType(makeConstList([476239, 6601091, -6152790, -9723375, 17503545, -4863900, 27672959, 13403813, 11052904, 5219329]), type$.JSArray_int);
    B.FieldElement_gkc6 = new A.FieldElement(B.List_oyU1);
    B.GroupElementPrecomp_E8w = new A.GroupElementPrecomp(B.FieldElement_nZ31, B.FieldElement_i7u, B.FieldElement_gkc6);
    B.List_EKW0 = A._setArrayType(makeConstList([B.GroupElementPrecomp_ih4, B.GroupElementPrecomp_02, B.GroupElementPrecomp_WuY, B.GroupElementPrecomp_a3L, B.GroupElementPrecomp_ZlS, B.GroupElementPrecomp_s05, B.GroupElementPrecomp_jtA, B.GroupElementPrecomp_E8w]), type$.JSArray_GroupElementPrecomp);
    B.List_wEo2 = A._setArrayType(makeConstList([20678546, -8375738, -32671898, 8849123, -5009758, 14574752, 31186971, -3973730, 9014762, -8579056]), type$.JSArray_int);
    B.FieldElement_DsB2 = new A.FieldElement(B.List_wEo2);
    B.List_Vgo = A._setArrayType(makeConstList([-13644050, -10350239, -15962508, 5075808, -1514661, -11534600, -33102500, 9160280, 8473550, -3256838]), type$.JSArray_int);
    B.FieldElement_Em4 = new A.FieldElement(B.List_Vgo);
    B.List_iep = A._setArrayType(makeConstList([24900749, 14435722, 17209120, -15292541, -22592275, 9878983, -7689309, -16335821, -24568481, 11788948]), type$.JSArray_int);
    B.FieldElement_4KH = new A.FieldElement(B.List_iep);
    B.GroupElementPrecomp_0uJ = new A.GroupElementPrecomp(B.FieldElement_DsB2, B.FieldElement_Em4, B.FieldElement_4KH);
    B.List_86y1 = A._setArrayType(makeConstList([-3118155, -11395194, -13802089, 14797441, 9652448, -6845904, -20037437, 10410733, -24568470, -1458691]), type$.JSArray_int);
    B.FieldElement_4sk0 = new A.FieldElement(B.List_86y1);
    B.List_AWG = A._setArrayType(makeConstList([-15659161, 16736706, -22467150, 10215878, -9097177, 7563911, 11871841, -12505194, -18513325, 8464118]), type$.JSArray_int);
    B.FieldElement_AWk = new A.FieldElement(B.List_AWG);
    B.List_46y1 = A._setArrayType(makeConstList([-23400612, 8348507, -14585951, -861714, -3950205, -6373419, 14325289, 8628612, 33313881, -8370517]), type$.JSArray_int);
    B.FieldElement_VDm1 = new A.FieldElement(B.List_46y1);
    B.GroupElementPrecomp_uMb = new A.GroupElementPrecomp(B.FieldElement_4sk0, B.FieldElement_AWk, B.FieldElement_VDm1);
    B.List_2bH0 = A._setArrayType(makeConstList([-20186973, -4967935, 22367356, 5271547, -1097117, -4788838, -24805667, -10236854, -8940735, -5818269]), type$.JSArray_int);
    B.FieldElement_23h0 = new A.FieldElement(B.List_2bH0);
    B.List_iJV = A._setArrayType(makeConstList([-6948785, -1795212, -32625683, -16021179, 32635414, -7374245, 15989197, -12838188, 28358192, -4253904]), type$.JSArray_int);
    B.FieldElement_Eat = new A.FieldElement(B.List_iJV);
    B.List_oqK = A._setArrayType(makeConstList([-23561781, -2799059, -32351682, -1661963, -9147719, 10429267, -16637684, 4072016, -5351664, 5596589]), type$.JSArray_int);
    B.FieldElement_LgH = new A.FieldElement(B.List_oqK);
    B.GroupElementPrecomp_gg9 = new A.GroupElementPrecomp(B.FieldElement_23h0, B.FieldElement_Eat, B.FieldElement_LgH);
    B.List_06B = A._setArrayType(makeConstList([-28236598, -3390048, 12312896, 6213178, 3117142, 16078565, 29266239, 2557221, 1768301, 15373193]), type$.JSArray_int);
    B.FieldElement_4TE = new A.FieldElement(B.List_06B);
    B.List_W06 = A._setArrayType(makeConstList([-7243358, -3246960, -4593467, -7553353, -127927, -912245, -1090902, -4504991, -24660491, 3442910]), type$.JSArray_int);
    B.FieldElement_Tuw = new A.FieldElement(B.List_W06);
    B.List_2Vr = A._setArrayType(makeConstList([-30210571, 5124043, 14181784, 8197961, 18964734, -11939093, 22597931, 7176455, -18585478, 13365930]), type$.JSArray_int);
    B.FieldElement_zSn = new A.FieldElement(B.List_2Vr);
    B.GroupElementPrecomp_B8J = new A.GroupElementPrecomp(B.FieldElement_4TE, B.FieldElement_Tuw, B.FieldElement_zSn);
    B.List_Uki = A._setArrayType(makeConstList([-7877390, -1499958, 8324673, 4690079, 6261860, 890446, 24538107, -8570186, -9689599, -3031667]), type$.JSArray_int);
    B.FieldElement_kaI = new A.FieldElement(B.List_Uki);
    B.List_edB = A._setArrayType(makeConstList([25008904, -10771599, -4305031, -9638010, 16265036, 15721635, 683793, -11823784, 15723479, -15163481]), type$.JSArray_int);
    B.FieldElement_IQy0 = new A.FieldElement(B.List_edB);
    B.List_2Cm = A._setArrayType(makeConstList([-9660625, 12374379, -27006999, -7026148, -7724114, -12314514, 11879682, 5400171, 519526, -1235876]), type$.JSArray_int);
    B.FieldElement_9XU = new A.FieldElement(B.List_2Cm);
    B.GroupElementPrecomp_Cpp = new A.GroupElementPrecomp(B.FieldElement_kaI, B.FieldElement_IQy0, B.FieldElement_9XU);
    B.List_rfF = A._setArrayType(makeConstList([22258397, -16332233, -7869817, 14613016, -22520255, -2950923, -20353881, 7315967, 16648397, 7605640]), type$.JSArray_int);
    B.FieldElement_ccv = new A.FieldElement(B.List_rfF);
    B.List_puq = A._setArrayType(makeConstList([-8081308, -8464597, -8223311, 9719710, 19259459, -15348212, 23994942, -5281555, -9468848, 4763278]), type$.JSArray_int);
    B.FieldElement_o480 = new A.FieldElement(B.List_puq);
    B.List_ES6 = A._setArrayType(makeConstList([-21699244, 9220969, -15730624, 1084137, -25476107, -2852390, 31088447, -7764523, -11356529, 728112]), type$.JSArray_int);
    B.FieldElement_jyx = new A.FieldElement(B.List_ES6);
    B.GroupElementPrecomp_4AN = new A.GroupElementPrecomp(B.FieldElement_ccv, B.FieldElement_o480, B.FieldElement_jyx);
    B.List_QTB = A._setArrayType(makeConstList([26047220, -11751471, -6900323, -16521798, 24092068, 9158119, -4273545, -12555558, -29365436, -5498272]), type$.JSArray_int);
    B.FieldElement_1Ke = new A.FieldElement(B.List_QTB);
    B.List_knt = A._setArrayType(makeConstList([17510331, -322857, 5854289, 8403524, 17133918, -3112612, -28111007, 12327945, 10750447, 10014012]), type$.JSArray_int);
    B.FieldElement_NQR = new A.FieldElement(B.List_knt);
    B.List_NuF = A._setArrayType(makeConstList([-10312768, 3936952, 9156313, -8897683, 16498692, -994647, -27481051, -666732, 3424691, 7540221]), type$.JSArray_int);
    B.FieldElement_UJT = new A.FieldElement(B.List_NuF);
    B.GroupElementPrecomp_gn0 = new A.GroupElementPrecomp(B.FieldElement_1Ke, B.FieldElement_NQR, B.FieldElement_UJT);
    B.List_cgy = A._setArrayType(makeConstList([30322361, -6964110, 11361005, -4143317, 7433304, 4989748, -7071422, -16317219, -9244265, 15258046]), type$.JSArray_int);
    B.FieldElement_Aec = new A.FieldElement(B.List_cgy);
    B.List_Mmf0 = A._setArrayType(makeConstList([13054562, -2779497, 19155474, 469045, -12482797, 4566042, 5631406, 2711395, 1062915, -5136345]), type$.JSArray_int);
    B.FieldElement_gPs0 = new A.FieldElement(B.List_Mmf0);
    B.List_ki2 = A._setArrayType(makeConstList([-19240248, -11254599, -29509029, -7499965, -5835763, 13005411, -6066489, 12194497, 32960380, 1459310]), type$.JSArray_int);
    B.FieldElement_o83 = new A.FieldElement(B.List_ki2);
    B.GroupElementPrecomp_d4u = new A.GroupElementPrecomp(B.FieldElement_Aec, B.FieldElement_gPs0, B.FieldElement_o83);
    B.List_soU0 = A._setArrayType(makeConstList([B.GroupElementPrecomp_0uJ, B.GroupElementPrecomp_uMb, B.GroupElementPrecomp_gg9, B.GroupElementPrecomp_B8J, B.GroupElementPrecomp_Cpp, B.GroupElementPrecomp_4AN, B.GroupElementPrecomp_gn0, B.GroupElementPrecomp_d4u]), type$.JSArray_GroupElementPrecomp);
    B.List_kJI = A._setArrayType(makeConstList([19852034, 7027924, 23669353, 10020366, 8586503, -6657907, 394197, -6101885, 18638003, -11174937]), type$.JSArray_int);
    B.FieldElement_WQC = new A.FieldElement(B.List_kJI);
    B.List_i3t = A._setArrayType(makeConstList([31395534, 15098109, 26581030, 8030562, -16527914, -5007134, 9012486, -7584354, -6643087, -5442636]), type$.JSArray_int);
    B.FieldElement_app = new A.FieldElement(B.List_i3t);
    B.List_ijJ = A._setArrayType(makeConstList([-9192165, -2347377, -1997099, 4529534, 25766844, 607986, -13222, 9677543, -32294889, -6456008]), type$.JSArray_int);
    B.FieldElement_Srw = new A.FieldElement(B.List_ijJ);
    B.GroupElementPrecomp_Now = new A.GroupElementPrecomp(B.FieldElement_WQC, B.FieldElement_app, B.FieldElement_Srw);
    B.List_I27 = A._setArrayType(makeConstList([-2444496, -149937, 29348902, 8186665, 1873760, 12489863, -30934579, -7839692, -7852844, -8138429]), type$.JSArray_int);
    B.FieldElement_oGx = new A.FieldElement(B.List_I27);
    B.List_ia7 = A._setArrayType(makeConstList([-15236356, -15433509, 7766470, 746860, 26346930, -10221762, -27333451, 10754588, -9431476, 5203576]), type$.JSArray_int);
    B.FieldElement_Ct3 = new A.FieldElement(B.List_ia7);
    B.List_9YE = A._setArrayType(makeConstList([31834314, 14135496, -770007, 5159118, 20917671, -16768096, -7467973, -7337524, 31809243, 7347066]), type$.JSArray_int);
    B.FieldElement_25o = new A.FieldElement(B.List_9YE);
    B.GroupElementPrecomp_wa9 = new A.GroupElementPrecomp(B.FieldElement_oGx, B.FieldElement_Ct3, B.FieldElement_25o);
    B.List_Q4D = A._setArrayType(makeConstList([-9606723, -11874240, 20414459, 13033986, 13716524, -11691881, 19797970, -12211255, 15192876, -2087490]), type$.JSArray_int);
    B.FieldElement_23h1 = new A.FieldElement(B.List_Q4D);
    B.List_qVK = A._setArrayType(makeConstList([-12663563, -2181719, 1168162, -3804809, 26747877, -14138091, 10609330, 12694420, 33473243, -13382104]), type$.JSArray_int);
    B.FieldElement_7fK = new A.FieldElement(B.List_qVK);
    B.List_iHe = A._setArrayType(makeConstList([33184999, 11180355, 15832085, -11385430, -1633671, 225884, 15089336, -11023903, -6135662, 14480053]), type$.JSArray_int);
    B.FieldElement_8aB3 = new A.FieldElement(B.List_iHe);
    B.GroupElementPrecomp_ubB = new A.GroupElementPrecomp(B.FieldElement_23h1, B.FieldElement_7fK, B.FieldElement_8aB3);
    B.List_xKZ = A._setArrayType(makeConstList([31308717, -5619998, 31030840, -1897099, 15674547, -6582883, 5496208, 13685227, 27595050, 8737275]), type$.JSArray_int);
    B.FieldElement_Nip = new A.FieldElement(B.List_xKZ);
    B.List_IAZ = A._setArrayType(makeConstList([-20318852, -15150239, 10933843, -16178022, 8335352, -7546022, -31008351, -12610604, 26498114, 66511]), type$.JSArray_int);
    B.FieldElement_m7t = new A.FieldElement(B.List_IAZ);
    B.List_0zQ = A._setArrayType(makeConstList([22644454, -8761729, -16671776, 4884562, -3105614, -13559366, 30540766, -4286747, -13327787, -7515095]), type$.JSArray_int);
    B.FieldElement_U06 = new A.FieldElement(B.List_0zQ);
    B.GroupElementPrecomp_5bl = new A.GroupElementPrecomp(B.FieldElement_Nip, B.FieldElement_m7t, B.FieldElement_U06);
    B.List_ciW1 = A._setArrayType(makeConstList([-28017847, 9834845, 18617207, -2681312, -3401956, -13307506, 8205540, 13585437, -17127465, 15115439]), type$.JSArray_int);
    B.FieldElement_0WV1 = new A.FieldElement(B.List_ciW1);
    B.List_iF8 = A._setArrayType(makeConstList([23711543, -672915, 31206561, -8362711, 6164647, -9709987, -33535882, -1426096, 8236921, 16492939]), type$.JSArray_int);
    B.FieldElement_A0N = new A.FieldElement(B.List_iF8);
    B.List_skV1 = A._setArrayType(makeConstList([-23910559, -13515526, -26299483, -4503841, 25005590, -7687270, 19574902, 10071562, 6708380, -6222424]), type$.JSArray_int);
    B.FieldElement_apl1 = new A.FieldElement(B.List_skV1);
    B.GroupElementPrecomp_07g = new A.GroupElementPrecomp(B.FieldElement_0WV1, B.FieldElement_A0N, B.FieldElement_apl1);
    B.List_oMY = A._setArrayType(makeConstList([2101391, -4930054, 19702731, 2367575, -15427167, 1047675, 5301017, 9328700, 29955601, -11678310]), type$.JSArray_int);
    B.FieldElement_W3L = new A.FieldElement(B.List_oMY);
    B.List_ew1 = A._setArrayType(makeConstList([3096359, 9271816, -21620864, -15521844, -14847996, -7592937, -25892142, -12635595, -9917575, 6216608]), type$.JSArray_int);
    B.FieldElement_Djg = new A.FieldElement(B.List_ew1);
    B.List_1sb = A._setArrayType(makeConstList([-32615849, 338663, -25195611, 2510422, -29213566, -13820213, 24822830, -6146567, -26767480, 7525079]), type$.JSArray_int);
    B.FieldElement_EAE = new A.FieldElement(B.List_1sb);
    B.GroupElementPrecomp_u5R = new A.GroupElementPrecomp(B.FieldElement_W3L, B.FieldElement_Djg, B.FieldElement_EAE);
    B.List_IY7 = A._setArrayType(makeConstList([-23066649, -13985623, 16133487, -7896178, -3389565, 778788, -910336, -2782495, -19386633, 11994101]), type$.JSArray_int);
    B.FieldElement_MMm0 = new A.FieldElement(B.List_IY7);
    B.List_wEo3 = A._setArrayType(makeConstList([21691500, -13624626, -641331, -14367021, 3285881, -3483596, -25064666, 9718258, -7477437, 13381418]), type$.JSArray_int);
    B.FieldElement_DsB3 = new A.FieldElement(B.List_wEo3);
    B.List_EKR = A._setArrayType(makeConstList([18445390, -4202236, 14979846, 11622458, -1727110, -3582980, 23111648, -6375247, 28535282, 15779576]), type$.JSArray_int);
    B.FieldElement_V0W = new A.FieldElement(B.List_EKR);
    B.GroupElementPrecomp_okI = new A.GroupElementPrecomp(B.FieldElement_MMm0, B.FieldElement_DsB3, B.FieldElement_V0W);
    B.List_34s = A._setArrayType(makeConstList([30098053, 3089662, -9234387, 16662135, -21306940, 11308411, -14068454, 12021730, 9955285, -16303356]), type$.JSArray_int);
    B.FieldElement_rpY = new A.FieldElement(B.List_34s);
    B.List_013 = A._setArrayType(makeConstList([9734894, -14576830, -7473633, -9138735, 2060392, 11313496, -18426029, 9924399, 20194861, 13380996]), type$.JSArray_int);
    B.FieldElement_43h8 = new A.FieldElement(B.List_013);
    B.List_woc1 = A._setArrayType(makeConstList([-26378102, -7965207, -22167821, 15789297, -18055342, -6168792, -1984914, 15707771, 26342023, 10146099]), type$.JSArray_int);
    B.FieldElement_QcT1 = new A.FieldElement(B.List_woc1);
    B.GroupElementPrecomp_a1Y = new A.GroupElementPrecomp(B.FieldElement_rpY, B.FieldElement_43h8, B.FieldElement_QcT1);
    B.List_uY9 = A._setArrayType(makeConstList([B.GroupElementPrecomp_Now, B.GroupElementPrecomp_wa9, B.GroupElementPrecomp_ubB, B.GroupElementPrecomp_5bl, B.GroupElementPrecomp_07g, B.GroupElementPrecomp_u5R, B.GroupElementPrecomp_okI, B.GroupElementPrecomp_a1Y]), type$.JSArray_GroupElementPrecomp);
    B.List_0ZR = A._setArrayType(makeConstList([-26016874, -219943, 21339191, -41388, 19745256, -2878700, -29637280, 2227040, 21612326, -545728]), type$.JSArray_int);
    B.FieldElement_kGu = new A.FieldElement(B.List_0ZR);
    B.List_utL = A._setArrayType(makeConstList([-13077387, 1184228, 23562814, -5970442, -20351244, -6348714, 25764461, 12243797, -20856566, 11649658]), type$.JSArray_int);
    B.FieldElement_RsV = new A.FieldElement(B.List_utL);
    B.List_dIX = A._setArrayType(makeConstList([-10031494, 11262626, 27384172, 2271902, 26947504, -15997771, 39944, 6114064, 33514190, 2333242]), type$.JSArray_int);
    B.FieldElement_QkP = new A.FieldElement(B.List_dIX);
    B.GroupElementPrecomp_IZS = new A.GroupElementPrecomp(B.FieldElement_kGu, B.FieldElement_RsV, B.FieldElement_QkP);
    B.List_JQR = A._setArrayType(makeConstList([-21433588, -12421821, 8119782, 7219913, -21830522, -9016134, -6679750, -12670638, 24350578, -13450001]), type$.JSArray_int);
    B.FieldElement_KiA = new A.FieldElement(B.List_JQR);
    B.List_8Xe = A._setArrayType(makeConstList([-4116307, -11271533, -23886186, 4843615, -30088339, 690623, -31536088, -10406836, 8317860, 12352766]), type$.JSArray_int);
    B.FieldElement_aUF = new A.FieldElement(B.List_8Xe);
    B.List_lIp = A._setArrayType(makeConstList([18200138, -14475911, -33087759, -2696619, -23702521, -9102511, -23552096, -2287550, 20712163, 6719373]), type$.JSArray_int);
    B.FieldElement_QHx = new A.FieldElement(B.List_lIp);
    B.GroupElementPrecomp_Dr3 = new A.GroupElementPrecomp(B.FieldElement_KiA, B.FieldElement_aUF, B.FieldElement_QHx);
    B.List_L5J = A._setArrayType(makeConstList([26656208, 6075253, -7858556, 1886072, -28344043, 4262326, 11117530, -3763210, 26224235, -3297458]), type$.JSArray_int);
    B.FieldElement_xzN = new A.FieldElement(B.List_L5J);
    B.List_aXZ0 = A._setArrayType(makeConstList([-17168938, -14854097, -3395676, -16369877, -19954045, 14050420, 21728352, 9493610, 18620611, -16428628]), type$.JSArray_int);
    B.FieldElement_isj0 = new A.FieldElement(B.List_aXZ0);
    B.List_2b8 = A._setArrayType(makeConstList([-13323321, 13325349, 11432106, 5964811, 18609221, 6062965, -5269471, -9725556, -30701573, -16479657]), type$.JSArray_int);
    B.FieldElement_riL = new A.FieldElement(B.List_2b8);
    B.GroupElementPrecomp_Af9 = new A.GroupElementPrecomp(B.FieldElement_xzN, B.FieldElement_isj0, B.FieldElement_riL);
    B.List_m3E = A._setArrayType(makeConstList([-23860538, -11233159, 26961357, 1640861, -32413112, -16737940, 12248509, -5240639, 13735342, 1934062]), type$.JSArray_int);
    B.FieldElement_THA = new A.FieldElement(B.List_m3E);
    B.List_IoN = A._setArrayType(makeConstList([25089769, 6742589, 17081145, -13406266, 21909293, -16067981, -15136294, -3765346, -21277997, 5473616]), type$.JSArray_int);
    B.FieldElement_Y7k = new A.FieldElement(B.List_IoN);
    B.List_69t0 = A._setArrayType(makeConstList([31883677, -7961101, 1083432, -11572403, 22828471, 13290673, -7125085, 12469656, 29111212, -5451014]), type$.JSArray_int);
    B.FieldElement_O1D0 = new A.FieldElement(B.List_69t0);
    B.GroupElementPrecomp_kyk = new A.GroupElementPrecomp(B.FieldElement_THA, B.FieldElement_Y7k, B.FieldElement_O1D0);
    B.List_iHz = A._setArrayType(makeConstList([24244947, -15050407, -26262976, 2791540, -14997599, 16666678, 24367466, 6388839, -10295587, 452383]), type$.JSArray_int);
    B.FieldElement_U8E0 = new A.FieldElement(B.List_iHz);
    B.List_Dbk = A._setArrayType(makeConstList([-25640782, -3417841, 5217916, 16224624, 19987036, -4082269, -24236251, -5915248, 15766062, 8407814]), type$.JSArray_int);
    B.FieldElement_ccv0 = new A.FieldElement(B.List_Dbk);
    B.List_EFX = A._setArrayType(makeConstList([-20406999, 13990231, 15495425, 16395525, 5377168, 15166495, -8917023, -4388953, -8067909, 2276718]), type$.JSArray_int);
    B.FieldElement_Vmp = new A.FieldElement(B.List_EFX);
    B.GroupElementPrecomp_gsm0 = new A.GroupElementPrecomp(B.FieldElement_U8E0, B.FieldElement_ccv0, B.FieldElement_Vmp);
    B.List_4y8 = A._setArrayType(makeConstList([30157918, 12924066, -17712050, 9245753, 19895028, 3368142, -23827587, 5096219, 22740376, -7303417]), type$.JSArray_int);
    B.FieldElement_6x5 = new A.FieldElement(B.List_4y8);
    B.List_iTx = A._setArrayType(makeConstList([2041139, -14256350, 7783687, 13876377, -25946985, -13352459, 24051124, 13742383, -15637599, 13295222]), type$.JSArray_int);
    B.FieldElement_EKW0 = new A.FieldElement(B.List_iTx);
    B.List_kr30 = A._setArrayType(makeConstList([33338237, -8505733, 12532113, 7977527, 9106186, -1715251, -17720195, -4612972, -4451357, -14669444]), type$.JSArray_int);
    B.FieldElement_XfB0 = new A.FieldElement(B.List_kr30);
    B.GroupElementPrecomp_QFM = new A.GroupElementPrecomp(B.FieldElement_6x5, B.FieldElement_EKW0, B.FieldElement_XfB0);
    B.List_qZk = A._setArrayType(makeConstList([-20045281, 5454097, -14346548, 6447146, 28862071, 1883651, -2469266, -4141880, 7770569, 9620597]), type$.JSArray_int);
    B.FieldElement_6m40 = new A.FieldElement(B.List_qZk);
    B.List_0Jq = A._setArrayType(makeConstList([23208068, 7979712, 33071466, 8149229, 1758231, -10834995, 30945528, -1694323, -33502340, -14767970]), type$.JSArray_int);
    B.FieldElement_ka6 = new A.FieldElement(B.List_0Jq);
    B.List_UY1 = A._setArrayType(makeConstList([1439958, -16270480, -1079989, -793782, 4625402, 10647766, -5043801, 1220118, 30494170, -11440799]), type$.JSArray_int);
    B.FieldElement_Awh = new A.FieldElement(B.List_UY1);
    B.GroupElementPrecomp_PW3 = new A.GroupElementPrecomp(B.FieldElement_6m40, B.FieldElement_ka6, B.FieldElement_Awh);
    B.List_gkc2 = A._setArrayType(makeConstList([-5037580, -13028295, -2970559, -3061767, 15640974, -6701666, -26739026, 926050, -1684339, -13333647]), type$.JSArray_int);
    B.FieldElement_nZ32 = new A.FieldElement(B.List_gkc2);
    B.List_43h = A._setArrayType(makeConstList([13908495, -3549272, 30919928, -6273825, -21521863, 7989039, 9021034, 9078865, 3353509, 4033511]), type$.JSArray_int);
    B.FieldElement_OTV = new A.FieldElement(B.List_43h);
    B.List_vQ3 = A._setArrayType(makeConstList([-29663431, -15113610, 32259991, -344482, 24295849, -12912123, 23161163, 8839127, 27485041, 7356032]), type$.JSArray_int);
    B.FieldElement_uqS = new A.FieldElement(B.List_vQ3);
    B.GroupElementPrecomp_7Nb = new A.GroupElementPrecomp(B.FieldElement_nZ32, B.FieldElement_OTV, B.FieldElement_uqS);
    B.List_YMt = A._setArrayType(makeConstList([B.GroupElementPrecomp_IZS, B.GroupElementPrecomp_Dr3, B.GroupElementPrecomp_Af9, B.GroupElementPrecomp_kyk, B.GroupElementPrecomp_gsm0, B.GroupElementPrecomp_QFM, B.GroupElementPrecomp_PW3, B.GroupElementPrecomp_7Nb]), type$.JSArray_GroupElementPrecomp);
    B.List_OyZ = A._setArrayType(makeConstList([9661027, 705443, 11980065, -5370154, -1628543, 14661173, -6346142, 2625015, 28431036, -16771834]), type$.JSArray_int);
    B.FieldElement_yDx = new A.FieldElement(B.List_OyZ);
    B.List_MIo1 = A._setArrayType(makeConstList([-23839233, -8311415, -25945511, 7480958, -17681669, -8354183, -22545972, 14150565, 15970762, 4099461]), type$.JSArray_int);
    B.FieldElement_6TW1 = new A.FieldElement(B.List_MIo1);
    B.List_Grj = A._setArrayType(makeConstList([29262576, 16756590, 26350592, -8793563, 8529671, -11208050, 13617293, -9937143, 11465739, 8317062]), type$.JSArray_int);
    B.FieldElement_gqM = new A.FieldElement(B.List_Grj);
    B.GroupElementPrecomp_OP1 = new A.GroupElementPrecomp(B.FieldElement_yDx, B.FieldElement_6TW1, B.FieldElement_gqM);
    B.List_dJt = A._setArrayType(makeConstList([-25493081, -6962928, 32500200, -9419051, -23038724, -2302222, 14898637, 3848455, 20969334, -5157516]), type$.JSArray_int);
    B.FieldElement_8Gl = new A.FieldElement(B.List_dJt);
    B.List_CB9 = A._setArrayType(makeConstList([-20384450, -14347713, -18336405, 13884722, -33039454, 2842114, -21610826, -3649888, 11177095, 14989547]), type$.JSArray_int);
    B.FieldElement_sEV = new A.FieldElement(B.List_CB9);
    B.List_23h0 = A._setArrayType(makeConstList([-24496721, -11716016, 16959896, 2278463, 12066309, 10137771, 13515641, 2581286, -28487508, 9930240]), type$.JSArray_int);
    B.FieldElement_L6o0 = new A.FieldElement(B.List_23h0);
    B.GroupElementPrecomp_yrD = new A.GroupElementPrecomp(B.FieldElement_8Gl, B.FieldElement_sEV, B.FieldElement_L6o0);
    B.List_k8F = A._setArrayType(makeConstList([-17751622, -2097826, 16544300, -13009300, -15914807, -14949081, 18345767, -13403753, 16291481, -5314038]), type$.JSArray_int);
    B.FieldElement_atn = new A.FieldElement(B.List_k8F);
    B.List_f8S = A._setArrayType(makeConstList([-33229194, 2553288, 32678213, 9875984, 8534129, 6889387, -9676774, 6957617, 4368891, 9788741]), type$.JSArray_int);
    B.FieldElement_E6g = new A.FieldElement(B.List_f8S);
    B.List_95G = A._setArrayType(makeConstList([16660756, 7281060, -10830758, 12911820, 20108584, -8101676, -21722536, -8613148, 16250552, -11111103]), type$.JSArray_int);
    B.FieldElement_gs6 = new A.FieldElement(B.List_95G);
    B.GroupElementPrecomp_Hrd = new A.GroupElementPrecomp(B.FieldElement_atn, B.FieldElement_E6g, B.FieldElement_gs6);
    B.List_YuC = A._setArrayType(makeConstList([-19765507, 2390526, -16551031, 14161980, 1905286, 6414907, 4689584, 10604807, -30190403, 4782747]), type$.JSArray_int);
    B.FieldElement_B8J0 = new A.FieldElement(B.List_YuC);
    B.List_gqZ = A._setArrayType(makeConstList([-1354539, 14736941, -7367442, -13292886, 7710542, -14155590, -9981571, 4383045, 22546403, 437323]), type$.JSArray_int);
    B.FieldElement_oyU1 = new A.FieldElement(B.List_gqZ);
    B.List_KEX = A._setArrayType(makeConstList([31665577, -12180464, -16186830, 1491339, -18368625, 3294682, 27343084, 2786261, -30633590, -14097016]), type$.JSArray_int);
    B.FieldElement_wAl = new A.FieldElement(B.List_KEX);
    B.GroupElementPrecomp_gil = new A.GroupElementPrecomp(B.FieldElement_B8J0, B.FieldElement_oyU1, B.FieldElement_wAl);
    B.List_goM = A._setArrayType(makeConstList([-14467279, -683715, -33374107, 7448552, 19294360, 14334329, -19690631, 2355319, -19284671, -6114373]), type$.JSArray_int);
    B.FieldElement_Z2F = new A.FieldElement(B.List_goM);
    B.List_0KV = A._setArrayType(makeConstList([15121312, -15796162, 6377020, -6031361, -10798111, -12957845, 18952177, 15496498, -29380133, 11754228]), type$.JSArray_int);
    B.FieldElement_m9N = new A.FieldElement(B.List_0KV);
    B.List_rt6 = A._setArrayType(makeConstList([-2637277, -13483075, 8488727, -14303896, 12728761, -1622493, 7141596, 11724556, 22761615, -10134141]), type$.JSArray_int);
    B.FieldElement_MUw = new A.FieldElement(B.List_rt6);
    B.GroupElementPrecomp_yLX = new A.GroupElementPrecomp(B.FieldElement_Z2F, B.FieldElement_m9N, B.FieldElement_MUw);
    B.List_eZ7 = A._setArrayType(makeConstList([16918416, 11729663, -18083579, 3022987, -31015732, -13339659, -28741185, -12227393, 32851222, 11717399]), type$.JSArray_int);
    B.FieldElement_IT7 = new A.FieldElement(B.List_eZ7);
    B.List_AYZ = A._setArrayType(makeConstList([11166634, 7338049, -6722523, 4531520, -29468672, -7302055, 31474879, 3483633, -1193175, -4030831]), type$.JSArray_int);
    B.FieldElement_UMD = new A.FieldElement(B.List_AYZ);
    B.List_fqS = A._setArrayType(makeConstList([-185635, 9921305, 31456609, -13536438, -12013818, 13348923, 33142652, 6546660, -19985279, -3948376]), type$.JSArray_int);
    B.FieldElement_U440 = new A.FieldElement(B.List_fqS);
    B.GroupElementPrecomp_8eb = new A.GroupElementPrecomp(B.FieldElement_IT7, B.FieldElement_UMD, B.FieldElement_U440);
    B.List_MAi1 = A._setArrayType(makeConstList([-32460596, 11266712, -11197107, -7899103, 31703694, 3855903, -8537131, -12833048, -30772034, -15486313]), type$.JSArray_int);
    B.FieldElement_ssa1 = new A.FieldElement(B.List_MAi1);
    B.List_I2J = A._setArrayType(makeConstList([-18006477, 12709068, 3991746, -6479188, -21491523, -10550425, -31135347, -16049879, 10928917, 3011958]), type$.JSArray_int);
    B.FieldElement_wAg0 = new A.FieldElement(B.List_I2J);
    B.List_UNJ = A._setArrayType(makeConstList([-6957757, -15594337, 31696059, 334240, 29576716, 14796075, -30831056, -12805180, 18008031, 10258577]), type$.JSArray_int);
    B.FieldElement_6ix = new A.FieldElement(B.List_UNJ);
    B.GroupElementPrecomp_isY = new A.GroupElementPrecomp(B.FieldElement_ssa1, B.FieldElement_wAg0, B.FieldElement_6ix);
    B.List_Yyo = A._setArrayType(makeConstList([-22448644, 15655569, 7018479, -4410003, -30314266, -1201591, -1853465, 1367120, 25127874, 6671743]), type$.JSArray_int);
    B.FieldElement_zbo = new A.FieldElement(B.List_Yyo);
    B.List_CpJ = A._setArrayType(makeConstList([29701166, -14373934, -10878120, 9279288, -17568, 13127210, 21382910, 11042292, 25838796, 4642684]), type$.JSArray_int);
    B.FieldElement_OlH = new A.FieldElement(B.List_CpJ);
    B.List_DlB = A._setArrayType(makeConstList([-20430234, 14955537, -24126347, 8124619, -5369288, -5990470, 30468147, -13900640, 18423289, 4177476]), type$.JSArray_int);
    B.FieldElement_8Gl0 = new A.FieldElement(B.List_DlB);
    B.GroupElementPrecomp_8eb0 = new A.GroupElementPrecomp(B.FieldElement_zbo, B.FieldElement_OlH, B.FieldElement_8Gl0);
    B.List_23h1 = A._setArrayType(makeConstList([B.GroupElementPrecomp_OP1, B.GroupElementPrecomp_yrD, B.GroupElementPrecomp_Hrd, B.GroupElementPrecomp_gil, B.GroupElementPrecomp_yLX, B.GroupElementPrecomp_8eb, B.GroupElementPrecomp_isY, B.GroupElementPrecomp_8eb0]), type$.JSArray_GroupElementPrecomp);
    B.List_gGq = A._setArrayType(makeConstList([B.List_kiE, B.List_Mi7, B.List_33h, B.List_UOR, B.List_2No0, B.List_8Eu, B.List_7lT, B.List_MYA, B.List_fV2, B.List_bvx, B.List_4Oj, B.List_yuV, B.List_qJO, B.List_Tfh, B.List_EV9, B.List_cWd0, B.List_nV0, B.List_zES, B.List_P7R, B.List_0U8, B.List_yXb1, B.List_HB4, B.List_DDf, B.List_8wU, B.List_yrt, B.List_3Nb0, B.List_izV, B.List_EKW0, B.List_soU0, B.List_uY9, B.List_YMt, B.List_23h1]), A.findType("JSArray<List<GroupElementPrecomp>>"));
    B.List_gyO = A._setArrayType(makeConstList(["Abakus", "Abart", "abbilden", "Abbruch", "Abdrift", "Abendrot", "Abfahrt", "abfeuern", "Abflug", "abfragen", "Abglanz", "abh\xe4rten", "abheben", "Abhilfe", "Abitur", "Abkehr", "Ablauf", "ablecken", "Abl\xf6sung", "Abnehmer", "abnutzen", "Abonnent", "Abrasion", "Abrede", "abr\xfcsten", "Absicht", "Absprung", "Abstand", "absuchen", "Abteil", "Abundanz", "abwarten", "Abwurf", "Abzug", "Achse", "Achtung", "Acker", "Aderlass", "Adler", "Admiral", "Adresse", "Affe", "Affront", "Afrika", "Aggregat", "Agilit\xe4t", "\xe4hneln", "Ahnung", "Ahorn", "Akazie", "Akkord", "Akrobat", "Aktfoto", "Aktivist", "Albatros", "Alchimie", "Alemanne", "Alibi", "Alkohol", "Allee", "All\xfcre", "Almosen", "Almweide", "Aloe", "Alpaka", "Alpental", "Alphabet", "Alpinist", "Alraune", "Altbier", "Alter", "Altfl\xf6te", "Altruist", "Alublech", "Aludose", "Amateur", "Amazonas", "Ameise", "Amnesie", "Amok", "Ampel", "Amphibie", "Ampulle", "Amsel", "Amulett", "Anakonda", "Analogie", "Ananas", "Anarchie", "Anatomie", "Anba", "Anbeginn", "anbieten", "Anblick", "\xe4ndern", "andocken", "Andrang", "anecken", "Anflug", "Anfrage", "Anf\xfchrer", "Angebot", "Angler", "Anhalter", "Anh\xf6he", "Animator", "Anis", "Anker", "ankleben", "Ankunft", "Anlage", "anlocken", "Anmut", "Annahme", "Anomalie", "Anonymus", "Anorak", "anpeilen", "Anrecht", "Anruf", "Ansage", "Anschein", "Ansicht", "Ansporn", "Anteil", "Antlitz", "Antrag", "Antwort", "Anwohner", "Aorta", "Apfel", "Appetit", "Applaus", "Aquarium", "Arbeit", "Arche", "Argument", "Arktis", "Armband", "Aroma", "Asche", "Askese", "Asphalt", "Asteroid", "\xc4sthetik", "Astronom", "Atelier", "Athlet", "Atlantik", "Atmung", "Audienz", "aufatmen", "Auffahrt", "aufholen", "aufregen", "Aufsatz", "Auftritt", "Aufwand", "Augapfel", "Auktion", "Ausbruch", "Ausflug", "Ausgabe", "Aushilfe", "Ausland", "Ausnahme", "Aussage", "Autobahn", "Avocado", "Axthieb", "Bach", "backen", "Badesee", "Bahnhof", "Balance", "Balkon", "Ballett", "Balsam", "Banane", "Bandage", "Bankett", "Barbar", "Barde", "Barett", "Bargeld", "Barkasse", "Barriere", "Bart", "Bass", "Bastler", "Batterie", "Bauch", "Bauer", "Bauholz", "Baujahr", "Baum", "Baustahl", "Bauteil", "Bauweise", "Bazar", "beachten", "Beatmung", "beben", "Becher", "Becken", "bedanken", "beeilen", "beenden", "Beere", "befinden", "Befreier", "Begabung", "Begierde", "begr\xfc\xdfen", "Beiboot", "Beichte", "Beifall", "Beigabe", "Beil", "Beispiel", "Beitrag", "beizen", "bekommen", "beladen", "Beleg", "bellen", "belohnen", "Bemalung", "Bengel", "Benutzer", "Benzin", "beraten", "Bereich", "Bergluft", "Bericht", "Bescheid", "Besitz", "besorgen", "Bestand", "Besuch", "betanken", "beten", "bet\xf6ren", "Bett", "Beule", "Beute", "Bewegung", "bewirken", "Bewohner", "bezahlen", "Bezug", "biegen", "Biene", "Bierzelt", "bieten", "Bikini", "Bildung", "Billard", "binden", "Biobauer", "Biologe", "Bionik", "Biotop", "Birke", "Bison", "Bitte", "Biwak", "Bizeps", "blasen", "Blatt", "Blauwal", "Blende", "Blick", "Blitz", "Blockade", "Bl\xf6delei", "Blondine", "Blues", "Blume", "Blut", "Bodensee", "Bogen", "Boje", "Bollwerk", "Bonbon", "Bonus", "Boot", "Bordarzt", "B\xf6rse", "B\xf6schung", "Boudoir", "Boxkampf", "Boykott", "Brahms", "Brandung", "Brauerei", "Brecher", "Breitaxt", "Bremse", "brennen", "Brett", "Brief", "Brigade", "Brillanz", "bringen", "brodeln", "Brosche", "Br\xf6tchen", "Br\xfccke", "Brunnen", "Br\xfcste", "Brutofen", "Buch", "B\xfcffel", "Bugwelle", "B\xfchne", "Buletten", "Bullauge", "Bumerang", "bummeln", "Buntglas", "B\xfcrde", "Burgherr", "Bursche", "Busen", "Buslinie", "Bussard", "Butangas", "Butter", "Cabrio", "campen", "Captain", "Cartoon", "Cello", "Chalet", "Charisma", "Chefarzt", "Chiffon", "Chipsatz", "Chirurg", "Chor", "Chronik", "Chuzpe", "Clubhaus", "Cockpit", "Codewort", "Cognac", "Coladose", "Computer", "Coupon", "Cousin", "Cracking", "Crash", "Curry", "Dach", "Dackel", "daddeln", "daliegen", "Dame", "Dammba", "D\xe4mon", "Dampflok", "Dank", "Darm", "Datei", "Datsche", "Datteln", "Datum", "Dauer", "Daunen", "Deckel", "Decoder", "Defekt", "Degen", "Dehnung", "Deiche", "Dekade", "Dekor", "Delfin", "Demut", "denken", "Deponie", "Design", "Desktop", "Dessert", "Detail", "Detektiv", "Dezibel", "Diadem", "Diagnose", "Dialekt", "Diamant", "Dichter", "Dickicht", "Diesel", "Diktat", "Diplom", "Direktor", "Dirne", "Diskurs", "Distanz", "Docht", "Dohle", "Dolch", "Dom\xe4ne", "Donner", "Dorade", "Dorf", "D\xf6rrobst", "Dorsch", "Dossier", "Dozent", "Drachen", "Draht", "Drama", "Drang", "Drehbuch", "Dreieck", "Dressur", "Drittel", "Drossel", "Druck", "Duell", "Duft", "D\xfcne", "D\xfcnung", "d\xfcrfen", "Duschbad", "D\xfcsenjet", "Dynamik", "Ebbe", "Echolot", "Echse", "Eckball", "Edding", "Edelwei\xdf", "Eden", "Edition", "Efe", "Effekte", "Egoismus", "Ehre", "Eiablage", "Eiche", "Eidechse", "Eidotter", "Eierkopf", "Eigelb", "Eiland", "Eilbote", "Eimer", "einatmen", "Einband", "Eindruck", "Einfall", "Eingang", "Einkauf", "einladen", "Ein\xf6de", "Einrad", "Eintopf", "Einwurf", "Einzug", "Eisb\xe4r", "Eisen", "Eish\xf6hle", "Eismeer", "Eiwei\xdf", "Ekstase", "Elan", "Elch", "Elefant", "Eleganz", "Element", "Elfe", "Elite", "Elixier", "Ellbogen", "Eloquenz", "Emigrant", "Emission", "Emotion", "Empathie", "Empfang", "Endzeit", "Energie", "Engpass", "Enkel", "Enklave", "Ente", "entheben", "Entit\xe4t", "entladen", "Entwurf", "Episode", "Epoche", "erachten", "Erbauer", "erbl\xfchen", "Erdbeere", "Erde", "Erdgas", "Erdkunde", "Erdnuss", "Erd\xf6l", "Erdteil", "Ereignis", "Eremit", "erfahren", "Erfolg", "erfreuen", "erf\xfcllen", "Ergebnis", "erhitzen", "erkalten", "erkennen", "erleben", "Erl\xf6sung", "ern\xe4hren", "erneuern", "Ernte", "Eroberer", "er\xf6ffnen", "Erosion", "Erotik", "Erpel", "erraten", "Erreger", "err\xf6ten", "Ersatz", "Erstflug", "Ertrag", "Eruption", "erwarten", "erwidern", "Erzba", "Erzeuger", "erziehen", "Esel", "Eskimo", "Eskorte", "Espe", "Espresso", "essen", "Etage", "Etappe", "Etat", "Ethik", "Etikett", "Et\xfcde", "Eule", "Euphorie", "Europa", "Everest", "Examen", "Exil", "Exodus", "Extrakt", "Fabel", "Fabrik", "Fachmann", "Fackel", "Faden", "Fagott", "Fahne", "Faible", "Fairness", "Fakt", "Fakult\xe4t", "Falke", "Fallobst", "F\xe4lscher", "Faltboot", "Familie", "Fanclub", "Fanfare", "Fangarm", "Fantasie", "Farbe", "Farmhaus", "Farn", "Fasan", "Faser", "Fassung", "fasten", "Faulheit", "Fauna", "Faust", "Favorit", "Faxger\xe4t", "Fazit", "fechten", "Federboa", "Fehler", "Feier", "Feige", "feilen", "Feinripp", "Feldbett", "Felge", "Fellpony", "Felswand", "Ferien", "Ferkel", "Fernweh", "Ferse", "Fest", "Fettnapf", "Feuer", "Fiasko", "Fichte", "Fiktion", "Film", "Filter", "Filz", "Finanzen", "Findling", "Finger", "Fink", "Finnwal", "Fisch", "Fitness", "Fixpunkt", "Fixstern", "Fjord", "Flachba", "Flagge", "Flamenco", "Flanke", "Flasche", "Flaute", "Fleck", "Flegel", "flehen", "Fleisch", "fliegen", "Flinte", "Flirt", "Flocke", "Floh", "Floskel", "Flo\xdf", "Fl\xf6te", "Flugzeug", "Flunder", "Flusstal", "Flutung", "Fockmast", "Fohlen", "F\xf6hnlage", "Fokus", "folgen", "Foliant", "Folklore", "Font\xe4ne", "F\xf6rde", "Forelle", "Format", "Forscher", "Fortgang", "Forum", "Fotograf", "Frachter", "Fragment", "Fraktion", "fr\xe4sen", "Frauenpo", "Freak", "Fregatte", "Freiheit", "Freude", "Frieden", "Frohsinn", "Frosch", "Frucht", "Fr\xfchjahr", "Fuchs", "F\xfcgung", "f\xfchlen", "F\xfcller", "Fundb\xfcro", "Funkboje", "Funzel", "Furnier", "F\xfcrsorge", "Fusel", "Fu\xdfbad", "Futteral", "Gabelung", "gackern", "Gage", "g\xe4hnen", "Galaxie", "Galeere", "Galopp", "Gameboy", "Gamsbart", "Gandhi", "Gang", "Garage", "Gardine", "Gark\xfcche", "Garten", "Gasthaus", "Gattung", "gaukeln", "Gazelle", "Geb\xe4ck", "Gebirge", "Gebr\xe4", "Geburt", "Gedanke", "Gedeck", "Gedicht", "Gefahr", "Gefieder", "Gefl\xfcgel", "Gef\xfchl", "Gegend", "Gehirn", "Geh\xf6ft", "Gehweg", "Geige", "Geist", "Gelage", "Geld", "Gelenk", "Gel\xfcbde", "Gem\xe4lde", "Gemeinde", "Gem\xfcse", "genesen", "Genuss", "Gep\xe4ck", "Geranie", "Gericht", "Germane", "Geruch", "Gesang", "Geschenk", "Gesetz", "Gesindel", "Ges\xf6ff", "Gespan", "Gestade", "Gesuch", "Getier", "Getr\xe4nk", "Get\xfcmmel", "Gewand", "Geweih", "Gewitter", "Gew\xf6lbe", "Geysir", "Giftzahn", "Gipfel", "Giraffe", "Gitarre", "gl\xe4nzen", "Glasauge", "Glatze", "Gleis", "Globus", "Gl\xfcck", "gl\xfchen", "Glutofen", "Goldzahn", "Gondel", "g\xf6nnen", "Gottheit", "graben", "Grafik", "Grashalm", "Graugans", "greifen", "Grenze", "grillen", "Groschen", "Grotte", "Grube", "Gr\xfcnalge", "Gruppe", "gruseln", "Gulasch", "Gummib\xe4r", "Gurgel", "G\xfcrtel", "G\xfcterzug", "Haarband", "Habicht", "hacken", "hadern", "Hafen", "Hagel", "H\xe4hnchen", "Haifisch", "Haken", "Halbaffe", "Halsader", "halten", "Halunke", "Handbuch", "Hanf", "Harfe", "Harnisch", "h\xe4rten", "Harz", "Hasenohr", "Haube", "hauchen", "Haupt", "Haut", "Havarie", "Hebamme", "hecheln", "Heck", "Hedonist", "Heiler", "Heimat", "Heizung", "Hektik", "Held", "helfen", "Helium", "Hemd", "hemmen", "Hengst", "Herd", "Hering", "Herkunft", "Hermelin", "Herrchen", "Herzdame", "Heulboje", "Hexe", "Hilfe", "Himbeere", "Himmel", "Hingabe", "hinh\xf6ren", "Hinweis", "Hirsch", "Hirte", "Hitzkopf", "Hobel", "Hochform", "Hocker", "hoffen", "Hofhund", "Hofnarr", "H\xf6henzug", "Hohlraum", "H\xf6lle", "Holzboot", "Honig", "Honorar", "horchen", "H\xf6rprobe", "H\xf6schen", "Hotel", "Hubraum", "Hufeisen", "H\xfcgel", "huldigen", "H\xfclle", "Humbug", "Hummer", "Humor", "Hund", "Hunger", "Hupe", "H\xfcrde", "Hurrikan", "Hydrant", "Hypnose", "Ibis", "Idee", "Idiot", "Igel", "Illusion", "Imitat", "impfen", "Import", "Inferno", "Ingwer", "Inhalte", "Inland", "Insekt", "Ironie", "Irrfahrt", "Irrtum", "Isolator", "Istwert", "Jacke", "Jade", "Jagdhund", "J\xe4ger", "Jaguar", "Jahr", "J\xe4hzorn", "Jazzfest", "Jetpilot", "jobben", "Jochbein", "jodeln", "Jodsalz", "Jolle", "Journal", "Jubel", "Junge", "Junimond", "Jupiter", "Jutesack", "Juwel", "Kabarett", "Kabine", "Kabuff", "K\xe4fer", "Kaffee", "Kahlkopf", "Kaimauer", "Kaj\xfcte", "Kaktus", "Kaliber", "Kaltluft", "Kamel", "k\xe4mmen", "Kampagne", "Kanal", "K\xe4ngur", "Kanister", "Kanone", "Kante", "Kan", "kapern", "Kapit\xe4n", "Kapuze", "Karneval", "Karotte", "K\xe4sebrot", "Kasper", "Kastanie", "Katalog", "Kathode", "Katze", "kaufen", "Kaugummi", "Kauz", "Kehle", "Keilerei", "Keksdose", "Kellner", "Keramik", "Kerze", "Kessel", "Kette", "keuchen", "kichern", "Kielboot", "Kindheit", "Kinnbart", "Kinosaal", "Kiosk", "Kissen", "Klammer", "Klang", "Klapprad", "Klartext", "kleben", "Klee", "Kleinod", "Klima", "Klingel", "Klippe", "Klischee", "Kloster", "Klugheit", "Kl\xfcngel", "kneten", "Knie", "Kn\xf6chel", "kn\xfcpfen", "Kobold", "Kochbuch", "Kohlrabi", "Koje", "Kokos\xf6l", "Kolibri", "Kolumne", "Komb\xfcse", "Komiker", "kommen", "Konto", "Konzept", "Kopfkino", "Kordhose", "Korken", "Korsett", "Kosename", "Krabbe", "Krach", "Kraft", "Kr\xe4he", "Kralle", "Krapfen", "Krater", "kraulen", "Kreuz", "Krokodil", "Kr\xf6te", "Kugel", "Kuhhirt", "K\xfchnheit", "K\xfcnstler", "Kurort", "Kurve", "Kurzfilm", "kuscheln", "k\xfcssen", "Kutter", "Labor", "lachen", "Lackaffe", "Ladeluke", "Lagune", "Laib", "Lakritze", "Lammfell", "Land", "Langmut", "Lappalie", "Last", "Laterne", "Latzhose", "Laubs\xe4ge", "laufen", "Laune", "Lausbub", "Lavasee", "Leben", "Leder", "Leerlauf", "Lehm", "Lehrer", "leihen", "Lekt\xfcre", "Lenker", "Lerche", "Leseecke", "Leuchter", "Lexikon", "Libelle", "Libido", "Licht", "Liebe", "liefern", "Liftboy", "Limonade", "Lineal", "Linoleum", "List", "Liveband", "Lobrede", "locken", "L\xf6ffel", "Logbuch", "Logik", "Lohn", "Loipe", "Lokal", "Lorbeer", "L\xf6sung", "l\xf6ten", "Lottofee", "L\xf6we", "Luchs", "Luder", "Luftpost", "Luke", "L\xfcmmel", "Lunge", "lutschen", "Luxus", "Macht", "Magazin", "Magier", "Magnet", "m\xe4hen", "Mahlzeit", "Mahnmal", "Maibaum", "Maisbrei", "Makel", "malen", "Mammut", "Manik\xfcre", "Mantel", "Marathon", "Marder", "Marine", "Marke", "Marmor", "M\xe4rzluft", "Maske", "Ma\xdfanzug", "Ma\xdfkrug", "Mastkorb", "Material", "Matratze", "Mauerba", "Maulkorb", "M\xe4uschen", "M\xe4zen", "Medium", "Meinung", "melden", "Melodie", "Mensch", "Merkmal", "Messe", "Metall", "Meteor", "Methode", "Metzger", "Mieze", "Milchkuh", "Mimose", "Minirock", "Minute", "mischen", "Missetat", "mitgehen", "Mittag", "Mixtape", "M\xf6bel", "Modul", "m\xf6gen", "M\xf6hre", "Molch", "Moment", "Monat", "Mondflug", "Monitor", "Monokini", "Monster", "Monument", "Moorhuhn", "Moos", "M\xf6pse", "Moral", "M\xf6rtel", "Motiv", "Motorrad", "M\xf6we", "M\xfche", "Mulatte", "M\xfcller", "Mumie", "Mund", "M\xfcnze", "Muschel", "Muster", "Mythos", "Nabel", "Nachtzug", "Nackedei", "Nagel", "N\xe4he", "N\xe4hnadel", "Namen", "Narbe", "Narwal", "Nasenb\xe4r", "Natur", "Nebel", "necken", "Neffe", "Neigung", "Nektar", "Nenner", "Neptun", "Nerz", "Nessel", "Nestba", "Netz", "Neuba", "Neuerung", "Neugier", "nicken", "Niere", "Nilpferd", "nisten", "Nocke", "Nomade", "Nordmeer", "Notdurft", "Notstand", "Notwehr", "Nudismus", "Nuss", "Nutzhanf", "Oase", "Obdach", "Oberarzt", "Objekt", "Oboe", "Obsthain", "Ochse", "Odyssee", "Ofenholz", "\xf6ffnen", "Ohnmacht", "Ohrfeige", "Ohrwurm", "\xd6kologie", "Oktave", "\xd6lberg", "Olive", "\xd6lkrise", "Omelett", "Onkel", "Oper", "Optiker", "Orange", "Orchidee", "ordnen", "Orgasmus", "Orkan", "Ortskern", "Ortung", "Ostasien", "Ozean", "Paarlauf", "Packeis", "paddeln", "Paket", "Palast", "Pandab\xe4r", "Panik", "Panorama", "Panther", "Papagei", "Papier", "Paprika", "Paradies", "Parka", "Parodie", "Partner", "Passant", "Patent", "Patzer", "Pause", "Pavian", "Pedal", "Pegel", "peilen", "Perle", "Person", "Pfad", "Pfa", "Pferd", "Pfleger", "Physik", "Pier", "Pilotwal", "Pinzette", "Piste", "Plakat", "Plankton", "Platin", "Plombe", "pl\xfcndern", "Pobacke", "Pokal", "polieren", "Popmusik", "Portr\xe4t", "Posaune", "Postamt", "Pottwal", "Pracht", "Pranke", "Preis", "Primat", "Prinzip", "Protest", "Proviant", "Pr\xfcfung", "Pubert\xe4t", "Pudding", "Pullover", "Pulsader", "Punkt", "Pute", "Putsch", "Puzzle", "Python", "quaken", "Qualle", "Quark", "Quellsee", "Querkopf", "Quitte", "Quote", "Rabauke", "Rache", "Radclub", "Radhose", "Radio", "Radtour", "Rahmen", "Rampe", "Randlage", "Ranzen", "Raps\xf6l", "Raserei", "rasten", "Rasur", "R\xe4tsel", "Raubtier", "Raumzeit", "Rausch", "Reaktor", "Realit\xe4t", "Rebell", "Rede", "Reetdach", "Regatta", "Regen", "Rehkitz", "Reifen", "Reim", "Reise", "Reizung", "Rekord", "Relevanz", "Rennboot", "Respekt", "Restm\xfcll", "retten", "Reue", "Revolte", "Rhetorik", "Rhythmus", "Richtung", "Riegel", "Rindvieh", "Rippchen", "Ritter", "Robbe", "Roboter", "Rockband", "Rohdaten", "Roller", "Roman", "r\xf6ntgen", "Rose", "Rosskur", "Rost", "Rotahorn", "Rotglut", "Rotznase", "Rubrik", "R\xfcckweg", "Rufmord", "Ruhe", "Ruine", "Rumpf", "Runde", "R\xfcstung", "r\xfctteln", "Saalt\xfcr", "Saatguts", "S\xe4bel", "Sachbuch", "Sack", "Saft", "sagen", "Sahneeis", "Salat", "Salbe", "Salz", "Sammlung", "Samt", "Sandbank", "Sanftmut", "Sardine", "Satire", "Sattel", "Satzba", "Sauerei", "Saum", "S\xe4ure", "Schall", "Scheitel", "Schiff", "Schlager", "Schmied", "Schnee", "Scholle", "Schrank", "Schulbus", "Schwan", "Seeadler", "Seefahrt", "Seehund", "Seeufer", "segeln", "Sehnerv", "Seide", "Seilzug", "Senf", "Sessel", "Seufzer", "Sexgott", "Sichtung", "Signal", "Silber", "singen", "Sinn", "Sirup", "Sitzbank", "Skandal", "Skikurs", "Skipper", "Skizze", "Smaragd", "Socke", "Sohn", "Sommer", "Songtext", "Sorte", "Spagat", "Spannung", "Spargel", "Specht", "Speise\xf6l", "Spiegel", "Sport", "sp\xfclen", "Stadtbus", "Stall", "St\xe4rke", "Stativ", "staunen", "Stern", "Stiftung", "Stollen", "Str\xf6mung", "Sturm", "Substanz", "S\xfcdalpen", "Sumpf", "surfen", "Tabak", "Tafel", "Tageba", "takeln", "Taktung", "Talsohle", "Tand", "Tanzb\xe4r", "Tapir", "Tarantel", "Tarnname", "Tasse", "Tatnacht", "Tatsache", "Tatze", "Taube", "tauchen", "Taufpate", "Taumel", "Teelicht", "Teich", "teilen", "Tempo", "Tenor", "Terrasse", "Testflug", "Theater", "Thermik", "ticken", "Tiefflug", "Tierart", "Tigerhai", "Tinte", "Tischler", "toben", "Toleranz", "T\xf6lpel", "Tonband", "Topf", "Topmodel", "Torbogen", "Torlinie", "Torte", "Tourist", "Tragesel", "trampeln", "Trapez", "Traum", "treffen", "Trennung", "Treue", "Trick", "trimmen", "Tr\xf6del", "Trost", "Trumpf", "t\xfcfteln", "Turban", "Turm", "\xdcbermut", "Ufer", "Uhrwerk", "umarmen", "Umba", "Umfeld", "Umgang", "Umsturz", "Unart", "Unfug", "Unimog", "Unruhe", "Unwucht", "Uranerz", "Urlaub", "Urmensch", "Utopie", "Vakuum", "Valuta", "Vandale", "Vase", "Vektor", "Ventil", "Verb", "Verdeck", "Verfall", "Vergaser", "verhexen", "Verlag", "Vers", "Vesper", "Vieh", "Viereck", "Vinyl", "Virus", "Vitrine", "Vollblut", "Vorbote", "Vorrat", "Vorsicht", "Vulkan", "Wachstum", "Wade", "Wagemut", "Wahlen", "Wahrheit", "Wald", "Walhai", "Wallach", "Walnuss", "Walzer", "wandeln", "Wanze", "w\xe4rmen", "Warnruf", "W\xe4sche", "Wasser", "Weberei", "wechseln", "Wegegeld", "wehren", "Weiher", "Weinglas", "Wei\xdfbier", "Weitwurf", "Welle", "Weltall", "Werkbank", "Werwolf", "Wetter", "wiehern", "Wildgans", "Wind", "Wohl", "Wohnort", "Wolf", "Wollust", "Wortlaut", "Wrack", "Wunder", "Wurfaxt", "Wurst", "Yacht", "Yeti", "Zacke", "Zahl", "z\xe4hmen", "Zahnfee", "Z\xe4pfchen", "Zaster", "Zaumzeug", "Zebra", "zeigen", "Zeitlupe", "Zellkern", "Zeltdach", "Zensor", "Zerfall", "Zeug", "Ziege", "Zielfoto", "Zimteis", "Zobel", "Zollhund", "Zombie", "Z\xf6pfe", "Zucht", "Zufahrt", "Zugfahrt", "Zugvogel", "Z\xfcndung", "Zweck", "Zyklop"]), type$.JSArray_String);
    B.Bip44Levels_1_Purpose = new A.Bip44Levels(1, "Purpose");
    B.Bip44Levels_2_Coin = new A.Bip44Levels(2, "Coin");
    B.Bip44Levels_3_Account = new A.Bip44Levels(3, "Account");
    B.Bip44Levels_4_Change = new A.Bip44Levels(4, "Change");
    B.List_iPa = A._setArrayType(makeConstList([B.Bip44Levels_0_Master, B.Bip44Levels_1_Purpose, B.Bip44Levels_2_Coin, B.Bip44Levels_3_Account, B.Bip44Levels_4_Change, B.Bip44Levels_5_Address]), A.findType("JSArray<Bip44Levels>"));
    B.MoneroWordsNum_12 = new A.MoneroWordsNum(12);
    B.MoneroWordsNum_24 = new A.MoneroWordsNum(24);
    B.List_iYm = A._setArrayType(makeConstList([B.MoneroWordsNum_12, B.MoneroWordsNum_13, B.MoneroWordsNum_24, B.MoneroWordsNum_25]), type$.JSArray_MoneroWordsNum);
    B.List_jvJ = A._setArrayType(makeConstList([B.ArgsType_6D4, B.ArgsType_qUV, B.ArgsType_Ik7, B.ArgsType_DZ5, B.ArgsType_JU5, B.ArgsType_ouf, B.ArgsType_2No, B.ArgsType_8FR, B.ArgsType_UFf, B.ArgsType_AVa, B.ArgsType_pCr]), A.findType("JSArray<ArgsType>"));
    B.NewAccountParamsType_gUw = new A.NewAccountParamsType(B.List_12_0, 0, "bitcoinCashNewAddressParams");
    B.NewAccountParamsType_POf = new A.NewAccountParamsType(B.List_12_1, 1, "bitcoinCashMultiSigNewAddressParams");
    B.NewAccountParamsType_Bzp = new A.NewAccountParamsType(B.List_12_2, 2, "bitcoinNewAddressParams");
    B.NewAccountParamsType_Dx1 = new A.NewAccountParamsType(B.List_12_4, 3, "bitcoinMultiSigNewAddressParams");
    B.NewAccountParamsType_wbL = new A.NewAccountParamsType(B.List_12_5, 4, "cardanoNewAddressParams");
    B.NewAccountParamsType_ytQ = new A.NewAccountParamsType(B.List_12_6, 5, "cosmosNewAddressParams");
    B.NewAccountParamsType_4Y4 = new A.NewAccountParamsType(B.List_12_7, 6, "ethereumNewAddressParamss");
    B.NewAccountParamsType_EBN = new A.NewAccountParamsType(B.List_12_8, 7, "solanaNewAddressParams");
    B.NewAccountParamsType_INd = new A.NewAccountParamsType(B.List_12_9, 8, "substrateNewAddressParams");
    B.NewAccountParamsType_gg4 = new A.NewAccountParamsType(B.List_12_10, 9, "tronNewAddressParams");
    B.NewAccountParamsType_AWi = new A.NewAccountParamsType(B.List_12_11, 10, "tronMultisigNewAddressParams");
    B.NewAccountParamsType_i7B = new A.NewAccountParamsType(B.List_12_12, 11, "tonNewAddressParams");
    B.NewAccountParamsType_86y = new A.NewAccountParamsType(B.List_12_13, 12, "rippleNewAddressParams");
    B.NewAccountParamsType_7pv = new A.NewAccountParamsType(B.List_12_14, 13, "rippleMultiSigNewAddressParams");
    B.NewAccountParamsType_2Iq = new A.NewAccountParamsType(B.List_12_15, 14, "stellarNewAddressParams");
    B.NewAccountParamsType_Jyc = new A.NewAccountParamsType(B.List_12_16, 15, "stellarMultiSigNewAddressParams");
    B.NewAccountParamsType_kvD = new A.NewAccountParamsType(B.List_12_17, 16, "moneroNewAddressParams");
    B.List_kYN = A._setArrayType(makeConstList([B.NewAccountParamsType_gUw, B.NewAccountParamsType_POf, B.NewAccountParamsType_Bzp, B.NewAccountParamsType_Dx1, B.NewAccountParamsType_wbL, B.NewAccountParamsType_ytQ, B.NewAccountParamsType_4Y4, B.NewAccountParamsType_EBN, B.NewAccountParamsType_INd, B.NewAccountParamsType_gg4, B.NewAccountParamsType_AWi, B.NewAccountParamsType_i7B, B.NewAccountParamsType_86y, B.NewAccountParamsType_7pv, B.NewAccountParamsType_2Iq, B.NewAccountParamsType_Jyc, B.NewAccountParamsType_kvD]), A.findType("JSArray<NewAccountParamsType>"));
    B.List_111_37 = A._setArrayType(makeConstList([111, 37]), type$.JSArray_int);
    B.CryptoRequestMethod_nC7 = new A.CryptoRequestMethod(B.List_111_37, 15, "hexToBytes");
    B.List_111_43 = A._setArrayType(makeConstList([111, 43]), type$.JSArray_int);
    B.CryptoRequestMethod_Isn = new A.CryptoRequestMethod(B.List_111_43, 18, "moneroAccountTxesTracker");
    B.List_mqY = A._setArrayType(makeConstList([B.CryptoRequestMethod_bMN, B.CryptoRequestMethod_qJs, B.CryptoRequestMethod_6pl, B.CryptoRequestMethod_ifx, B.CryptoRequestMethod_5cD, B.CryptoRequestMethod_CnH, B.CryptoRequestMethod_VKi, B.CryptoRequestMethod_3jH, B.CryptoRequestMethod_8YS, B.CryptoRequestMethod_Giz, B.CryptoRequestMethod_CpJ, B.CryptoRequestMethod_7jk, B.CryptoRequestMethod_kiE, B.CryptoRequestMethod_YE0, B.CryptoRequestMethod_EGJ, B.CryptoRequestMethod_nC7, B.CryptoRequestMethod_c4E, B.CryptoRequestMethod_Ucj, B.CryptoRequestMethod_Isn]), A.findType("JSArray<CryptoRequestMethod>"));
    B.List_ouN = A._setArrayType(makeConstList([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), type$.JSArray_int);
    B.List_ouN0 = A._setArrayType(makeConstList([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), type$.JSArray_int);
    B.List_ouN1 = A._setArrayType(makeConstList([2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), type$.JSArray_int);
    B.List_ouN2 = A._setArrayType(makeConstList([88, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102]), type$.JSArray_int);
    B.List_ozo = A._setArrayType(makeConstList(["abacate", "abaixo", "abalar", "abater", "abduzir", "abelha", "aberto", "abismo", "abotoar", "abranger", "abreviar", "abrigar", "abrupto", "absinto", "absoluto", "absurdo", "abutre", "acabado", "acalmar", "acampar", "acanhar", "acaso", "aceitar", "acelerar", "acenar", "acervo", "acessar", "acetona", "achatar", "acidez", "acima", "acionado", "acirrar", "aclamar", "aclive", "acolhida", "acomodar", "acoplar", "acordar", "acumular", "acusador", "adaptar", "adega", "adentro", "adepto", "adequar", "aderente", "adesivo", "adeus", "adiante", "aditivo", "adjetivo", "adjunto", "admirar", "adorar", "adquirir", "adubo", "adverso", "advogado", "aeronave", "afastar", "aferir", "afetivo", "afinador", "afivelar", "aflito", "afluente", "afrontar", "agachar", "agarrar", "agasalho", "agenciar", "agilizar", "agiota", "agitado", "agora", "agradar", "agreste", "agrupar", "aguardar", "agulha", "ajoelhar", "ajudar", "ajustar", "alameda", "alarme", "alastrar", "alavanca", "albergue", "albino", "alcatra", "aldeia", "alecrim", "alegria", "alertar", "alface", "alfinete", "algum", "alheio", "aliar", "alicate", "alienar", "alinhar", "aliviar", "almofada", "alocar", "alpiste", "alterar", "altitude", "alucinar", "alugar", "aluno", "alusivo", "alvo", "amaciar", "amador", "amarelo", "amassar", "ambas", "ambiente", "ameixa", "amenizar", "amido", "amistoso", "amizade", "amolador", "amontoar", "amoroso", "amostra", "amparar", "ampliar", "ampola", "anagrama", "analisar", "anarquia", "anatomia", "andaime", "anel", "anexo", "angular", "animar", "anjo", "anomalia", "anotado", "ansioso", "anterior", "anuidade", "anunciar", "anzol", "apagador", "apalpar", "apanhado", "apego", "apelido", "apertada", "apesar", "apetite", "apito", "aplauso", "aplicada", "apoio", "apontar", "aposta", "aprendiz", "aprovar", "aquecer", "arame", "aranha", "arara", "arcada", "ardente", "areia", "arejar", "arenito", "aresta", "argiloso", "argola", "arma", "arquivo", "arraial", "arrebate", "arriscar", "arroba", "arrumar", "arsenal", "arterial", "artigo", "arvoredo", "asfaltar", "asilado", "aspirar", "assador", "assinar", "assoalho", "assunto", "astral", "atacado", "atadura", "atalho", "atarefar", "atear", "atender", "aterro", "ateu", "atingir", "atirador", "ativo", "atoleiro", "atracar", "atrevido", "atriz", "atual", "atum", "auditor", "aumentar", "aura", "aurora", "autismo", "autoria", "autuar", "avaliar", "avante", "avaria", "avental", "avesso", "aviador", "avisar", "avulso", "axila", "azarar", "azedo", "azeite", "azulejo", "babar", "babosa", "bacalhau", "bacharel", "bacia", "bagagem", "baiano", "bailar", "baioneta", "bairro", "baixista", "bajular", "baleia", "baliza", "balsa", "banal", "bandeira", "banho", "banir", "banquete", "barato", "barbado", "baronesa", "barraca", "barulho", "baseado", "bastante", "batata", "batedor", "batida", "batom", "batucar", "baunilha", "beber", "beijo", "beirada", "beisebol", "beldade", "beleza", "belga", "beliscar", "bendito", "bengala", "benzer", "berimbau", "berlinda", "berro", "besouro", "bexiga", "bezerro", "bico", "bicudo", "bienal", "bifocal", "bifurcar", "bigorna", "bilhete", "bimestre", "bimotor", "biologia", "biombo", "biosfera", "bipolar", "birrento", "biscoito", "bisneto", "bispo", "bissexto", "bitola", "bizarro", "blindado", "bloco", "bloquear", "boato", "bobagem", "bocado", "bocejo", "bochecha", "boicotar", "bolada", "boletim", "bolha", "bolo", "bombeiro", "bonde", "boneco", "bonita", "borbulha", "borda", "boreal", "borracha", "bovino", "boxeador", "branco", "brasa", "braveza", "breu", "briga", "brilho", "brincar", "broa", "brochura", "bronzear", "broto", "bruxo", "bucha", "budismo", "bufar", "bule", "buraco", "busca", "busto", "buzina", "cabana", "cabelo", "cabide", "cabo", "cabrito", "cacau", "cacetada", "cachorro", "cacique", "cadastro", "cadeado", "cafezal", "caiaque", "caipira", "caixote", "cajado", "caju", "calafrio", "calcular", "caldeira", "calibrar", "calmante", "calota", "camada", "cambista", "camisa", "camomila", "campanha", "camuflar", "canavial", "cancelar", "caneta", "canguru", "canhoto", "canivete", "canoa", "cansado", "cantar", "canudo", "capacho", "capela", "capinar", "capotar", "capricho", "captador", "capuz", "caracol", "carbono", "cardeal", "careca", "carimbar", "carneiro", "carpete", "carreira", "cartaz", "carvalho", "casaco", "casca", "casebre", "castelo", "casulo", "catarata", "cativar", "caule", "causador", "cautelar", "cavalo", "caverna", "cebola", "cedilha", "cegonha", "celebrar", "celular", "cenoura", "censo", "centeio", "cercar", "cerrado", "certeiro", "cerveja", "cetim", "cevada", "chacota", "chaleira", "chamado", "chapada", "charme", "chatice", "chave", "chefe", "chegada", "cheiro", "cheque", "chicote", "chifre", "chinelo", "chocalho", "chover", "chumbo", "chutar", "chuva", "cicatriz", "ciclone", "cidade", "cidreira", "ciente", "cigana", "cimento", "cinto", "cinza", "ciranda", "circuito", "cirurgia", "citar", "clareza", "clero", "clicar", "clone", "clube", "coado", "coagir", "cobaia", "cobertor", "cobrar", "cocada", "coelho", "coentro", "coeso", "cogumelo", "coibir", "coifa", "coiote", "colar", "coleira", "colher", "colidir", "colmeia", "colono", "coluna", "comando", "combinar", "comentar", "comitiva", "comover", "complexo", "comum", "concha", "condor", "conectar", "confuso", "congelar", "conhecer", "conjugar", "consumir", "contrato", "convite", "cooperar", "copeiro", "copiador", "copo", "coquetel", "coragem", "cordial", "corneta", "coronha", "corporal", "correio", "cortejo", "coruja", "corvo", "cosseno", "costela", "cotonete", "couro", "couve", "covil", "cozinha", "cratera", "cravo", "creche", "credor", "creme", "crer", "crespo", "criada", "criminal", "crioulo", "crise", "criticar", "crosta", "crua", "cruzeiro", "cubano", "cueca", "cuidado", "cujo", "culatra", "culminar", "culpar", "cultura", "cumprir", "cunhado", "cupido", "curativo", "curral", "cursar", "curto", "cuspir", "custear", "cutelo", "damasco", "datar", "debater", "debitar", "deboche", "debulhar", "decalque", "decimal", "declive", "decote", "decretar", "dedal", "dedicado", "deduzir", "defesa", "defumar", "degelo", "degrau", "degustar", "deitado", "deixar", "delator", "delegado", "delinear", "delonga", "demanda", "demitir", "demolido", "dentista", "depenado", "depilar", "depois", "depressa", "depurar", "deriva", "derramar", "desafio", "desbotar", "descanso", "desenho", "desfiado", "desgaste", "desigual", "deslize", "desmamar", "desova", "despesa", "destaque", "desviar", "detalhar", "detentor", "detonar", "detrito", "deusa", "dever", "devido", "devotado", "dezena", "diagrama", "dialeto", "didata", "difuso", "digitar", "dilatado", "diluente", "diminuir", "dinastia", "dinheiro", "diocese", "direto", "discreta", "disfarce", "disparo", "disquete", "dissipar", "distante", "ditador", "diurno", "diverso", "divisor", "divulgar", "dizer", "dobrador", "dolorido", "domador", "dominado", "donativo", "donzela", "dormente", "dorsal", "dosagem", "dourado", "doutor", "drenagem", "drible", "drogaria", "duelar", "duende", "dueto", "duplo", "duquesa", "durante", "duvidoso", "eclodir", "ecoar", "ecologia", "edificar", "edital", "educado", "efeito", "efetivar", "ejetar", "elaborar", "eleger", "eleitor", "elenco", "elevador", "eliminar", "elogiar", "embargo", "embolado", "embrulho", "embutido", "emenda", "emergir", "emissor", "empatia", "empenho", "empinado", "empolgar", "emprego", "empurrar", "emulador", "encaixe", "encenado", "enchente", "encontro", "endeusar", "endossar", "enfaixar", "enfeite", "enfim", "engajado", "engenho", "englobar", "engomado", "engraxar", "enguia", "enjoar", "enlatar", "enquanto", "enraizar", "enrolado", "enrugar", "ensaio", "enseada", "ensino", "ensopado", "entanto", "enteado", "entidade", "entortar", "entrada", "entulho", "envergar", "enviado", "envolver", "enxame", "enxerto", "enxofre", "enxuto", "epiderme", "equipar", "ereto", "erguido", "errata", "erva", "ervilha", "esbanjar", "esbelto", "escama", "escola", "escrita", "escuta", "esfinge", "esfolar", "esfregar", "esfumado", "esgrima", "esmalte", "espanto", "espelho", "espiga", "esponja", "espreita", "espumar", "esquerda", "estaca", "esteira", "esticar", "estofado", "estrela", "estudo", "esvaziar", "etanol", "etiqueta", "euforia", "europeu", "evacuar", "evaporar", "evasivo", "eventual", "evidente", "evoluir", "exagero", "exalar", "examinar", "exato", "exausto", "excesso", "excitar", "exclamar", "executar", "exemplo", "exibir", "exigente", "exonerar", "expandir", "expelir", "expirar", "explanar", "exposto", "expresso", "expulsar", "externo", "extinto", "extrato", "fabricar", "fabuloso", "faceta", "facial", "fada", "fadiga", "faixa", "falar", "falta", "familiar", "fandango", "fanfarra", "fantoche", "fardado", "farelo", "farinha", "farofa", "farpa", "fartura", "fatia", "fator", "favorita", "faxina", "fazenda", "fechado", "feijoada", "feirante", "felino", "feminino", "fenda", "feno", "fera", "feriado", "ferrugem", "ferver", "festejar", "fetal", "feudal", "fiapo", "fibrose", "ficar", "ficheiro", "figurado", "fileira", "filho", "filme", "filtrar", "firmeza", "fisgada", "fissura", "fita", "fivela", "fixador", "fixo", "flacidez", "flamingo", "flanela", "flechada", "flora", "flutuar", "fluxo", "focal", "focinho", "fofocar", "fogo", "foguete", "foice", "folgado", "folheto", "forjar", "formiga", "forno", "forte", "fosco", "fossa", "fragata", "fralda", "frango", "frasco", "fraterno", "freira", "frente", "fretar", "frieza", "friso", "fritura", "fronha", "frustrar", "fruteira", "fugir", "fulano", "fuligem", "fundar", "fungo", "funil", "furador", "furioso", "futebol", "gabarito", "gabinete", "gado", "gaiato", "gaiola", "gaivota", "galega", "galho", "galinha", "galocha", "ganhar", "garagem", "garfo", "gargalo", "garimpo", "garoupa", "garrafa", "gasoduto", "gasto", "gata", "gatilho", "gaveta", "gazela", "gelado", "geleia", "gelo", "gemada", "gemer", "gemido", "generoso", "gengiva", "genial", "genoma", "genro", "geologia", "gerador", "germinar", "gesso", "gestor", "ginasta", "gincana", "gingado", "girafa", "girino", "glacial", "glicose", "global", "glorioso", "goela", "goiaba", "golfe", "golpear", "gordura", "gorjeta", "gorro", "gostoso", "goteira", "governar", "gracejo", "gradual", "grafite", "gralha", "grampo", "granada", "gratuito", "graveto", "graxa", "grego", "grelhar", "greve", "grilo", "grisalho", "gritaria", "grosso", "grotesco", "grudado", "grunhido", "gruta", "guache", "guarani", "guaxinim", "guerrear", "guiar", "guincho", "guisado", "gula", "guloso", "guru", "habitar", "harmonia", "haste", "haver", "hectare", "herdar", "heresia", "hesitar", "hiato", "hibernar", "hidratar", "hiena", "hino", "hipismo", "hipnose", "hipoteca", "hoje", "holofote", "homem", "honesto", "honrado", "hormonal", "hospedar", "humorado", "iate", "ideia", "idoso", "ignorado", "igreja", "iguana", "ileso", "ilha", "iludido", "iluminar", "ilustrar", "imagem", "imediato", "imenso", "imersivo", "iminente", "imitador", "imortal", "impacto", "impedir", "implante", "impor", "imprensa", "impune", "imunizar", "inalador", "inapto", "inativo", "incenso", "inchar", "incidir", "incluir", "incolor", "indeciso", "indireto", "indutor", "ineficaz", "inerente", "infantil", "infestar", "infinito", "inflamar", "informal", "infrator", "ingerir", "inibido", "inicial", "inimigo", "injetar", "inocente", "inodoro", "inovador", "inox", "inquieto", "inscrito", "inseto", "insistir", "inspetor", "instalar", "insulto", "intacto", "integral", "intimar", "intocado", "intriga", "invasor", "inverno", "invicto", "invocar", "iogurte", "iraniano", "ironizar", "irreal", "irritado", "isca", "isento", "isolado", "isqueiro", "italiano", "janeiro", "jangada", "janta", "jararaca", "jardim", "jarro", "jasmim", "jato", "javali", "jazida", "jejum", "joaninha", "joelhada", "jogador", "joia", "jornal", "jorrar", "jovem", "juba", "judeu", "judoca", "juiz", "julgador", "julho", "jurado", "jurista", "juro", "justa", "labareda", "laboral", "lacre", "lactante", "ladrilho", "lagarta", "lagoa", "laje", "lamber", "lamentar", "laminar", "lampejo", "lanche", "lapidar", "lapso", "laranja", "lareira", "largura", "lasanha", "lastro", "lateral", "latido", "lavanda", "lavoura", "lavrador", "laxante", "lazer", "lealdade", "lebre", "legado", "legendar", "legista", "leigo", "leiloar", "leitura", "lembrete", "leme", "lenhador", "lentilha", "leoa", "lesma", "leste", "letivo", "letreiro", "levar", "leveza", "levitar", "liberal", "libido", "liderar", "ligar", "ligeiro", "limitar", "limoeiro", "limpador", "linda", "linear", "linhagem", "liquidez", "listagem", "lisura", "litoral", "livro", "lixa", "lixeira", "locador", "locutor", "lojista", "lombo", "lona", "longe", "lontra", "lorde", "lotado", "loteria", "loucura", "lousa", "louvar", "luar", "lucidez", "lucro", "luneta", "lustre", "lutador", "luva", "macaco", "macete", "machado", "macio", "madeira", "madrinha", "magnata", "magreza", "maior", "mais", "malandro", "malha", "malote", "maluco", "mamilo", "mamoeiro", "mamute", "manada", "mancha", "mandato", "manequim", "manhoso", "manivela", "manobrar", "mansa", "manter", "manusear", "mapeado", "maquinar", "marcador", "maresia", "marfim", "margem", "marinho", "marmita", "maroto", "marquise", "marreco", "martelo", "marujo", "mascote", "masmorra", "massagem", "mastigar", "matagal", "materno", "matinal", "matutar", "maxilar", "medalha", "medida", "medusa", "megafone", "meiga", "melancia", "melhor", "membro", "memorial", "menino", "menos", "mensagem", "mental", "merecer", "mergulho", "mesada", "mesclar", "mesmo", "mesquita", "mestre", "metade", "meteoro", "metragem", "mexer", "mexicano", "micro", "migalha", "migrar", "milagre", "milenar", "milhar", "mimado", "minerar", "minhoca", "ministro", "minoria", "miolo", "mirante", "mirtilo", "misturar", "mocidade", "moderno", "modular", "moeda", "moer", "moinho", "moita", "moldura", "moleza", "molho", "molinete", "molusco", "montanha", "moqueca", "morango", "morcego", "mordomo", "morena", "mosaico", "mosquete", "mostarda", "motel", "motim", "moto", "motriz", "muda", "muito", "mulata", "mulher", "multar", "mundial", "munido", "muralha", "murcho", "muscular", "museu", "musical", "nacional", "nadador", "naja", "namoro", "narina", "narrado", "nascer", "nativa", "natureza", "navalha", "navegar", "navio", "neblina", "nebuloso", "negativa", "negociar", "negrito", "nervoso", "neta", "neural", "nevasca", "nevoeiro", "ninar", "ninho", "nitidez", "nivelar", "nobreza", "noite", "noiva", "nomear", "nominal", "nordeste", "nortear", "notar", "noticiar", "noturno", "novelo", "novilho", "novo", "nublado", "nudez", "numeral", "nupcial", "nutrir", "nuvem", "obcecado", "obedecer", "objetivo", "obrigado", "obscuro", "obstetra", "obter", "obturar", "ocidente", "ocioso", "ocorrer", "oculista", "ocupado", "ofegante", "ofensiva", "oferenda", "oficina", "ofuscado", "ogiva", "olaria", "oleoso", "olhar", "oliveira", "ombro", "omelete", "omisso", "omitir", "ondulado", "oneroso", "ontem", "opcional", "operador", "oponente", "oportuno", "oposto", "orar", "orbitar", "ordem", "ordinal", "orfanato", "orgasmo", "orgulho", "oriental", "origem", "oriundo", "orla", "ortodoxo", "orvalho", "oscilar", "ossada", "osso", "ostentar", "otimismo", "ousadia", "outono", "outubro", "ouvido", "ovelha", "ovular", "oxidar", "oxigenar", "pacato", "paciente", "pacote", "pactuar", "padaria", "padrinho", "pagar", "pagode", "painel", "pairar", "paisagem", "palavra", "palestra", "palheta", "palito", "palmada", "palpitar", "pancada", "panela", "panfleto", "panqueca", "pantanal", "papagaio", "papelada", "papiro", "parafina", "parcial", "pardal", "parede", "partida", "pasmo", "passado", "pastel", "patamar", "patente", "patinar", "patrono", "paulada", "pausar", "peculiar", "pedalar", "pedestre", "pediatra", "pedra", "pegada", "peitoral", "peixe", "pele", "pelicano", "penca", "pendurar", "peneira", "penhasco", "pensador", "pente", "perceber", "perfeito", "pergunta", "perito", "permitir", "perna", "perplexo", "persiana", "pertence", "peruca", "pescado", "pesquisa", "pessoa", "petiscar", "piada", "picado", "piedade", "pigmento", "pilastra", "pilhado", "pilotar", "pimenta", "pincel", "pinguim", "pinha", "pinote", "pintar", "pioneiro", "pipoca", "piquete", "piranha", "pires", "pirueta", "piscar", "pistola", "pitanga", "pivete", "planta", "plaqueta", "platina", "plebeu", "plumagem", "pluvial", "pneu", "poda", "poeira", "poetisa", "polegada", "policiar", "poluente", "polvilho", "pomar", "pomba", "ponderar", "pontaria", "populoso", "porta", "possuir", "postal", "pote", "poupar", "pouso", "povoar", "praia", "prancha", "prato", "praxe", "prece", "predador", "prefeito", "premiar", "prensar", "preparar", "presilha", "pretexto", "prevenir", "prezar", "primata", "princesa", "prisma", "privado", "processo", "produto", "profeta", "proibido", "projeto", "prometer", "propagar", "prosa", "protetor", "provador", "publicar", "pudim", "pular", "pulmonar", "pulseira", "punhal", "punir", "pupilo", "pureza", "puxador", "quadra", "quantia", "quarto", "quase", "quebrar", "queda", "queijo", "quente", "querido", "quimono", "quina", "quiosque", "rabanada", "rabisco", "rachar", "racionar", "radial", "raiar", "rainha", "raio", "raiva", "rajada", "ralado", "ramal", "ranger", "ranhura", "rapadura", "rapel", "rapidez", "raposa", "raquete", "raridade", "rasante", "rascunho", "rasgar", "raspador", "rasteira", "rasurar", "ratazana", "ratoeira", "realeza", "reanimar", "reaver", "rebaixar", "rebelde", "rebolar", "recado", "recente", "recheio", "recibo", "recordar", "recrutar", "recuar", "rede", "redimir", "redonda", "reduzida", "reenvio", "refinar", "refletir", "refogar", "refresco", "refugiar", "regalia", "regime", "regra", "reinado", "reitor", "rejeitar", "relativo", "remador", "remendo", "remorso", "renovado", "reparo", "repelir", "repleto", "repolho", "represa", "repudiar", "requerer", "resenha", "resfriar", "resgatar", "residir", "resolver", "respeito", "ressaca", "restante", "resumir", "retalho", "reter", "retirar", "retomada", "retratar", "revelar", "revisor", "revolta", "riacho", "rica", "rigidez", "rigoroso", "rimar", "ringue", "risada", "risco", "risonho", "robalo", "rochedo", "rodada", "rodeio", "rodovia", "roedor", "roleta", "romano", "roncar", "rosado", "roseira", "rosto", "rota", "roteiro", "rotina", "rotular", "rouco", "roupa", "roxo", "rubro", "rugido", "rugoso", "ruivo", "rumo", "rupestre", "russo", "sabor", "saciar", "sacola", "sacudir", "sadio", "safira", "saga", "sagrada", "saibro", "salada", "saleiro", "salgado", "saliva", "salpicar", "salsicha", "saltar", "salvador", "sambar", "samurai", "sanar", "sanfona", "sangue", "sanidade", "sapato", "sarda", "sargento", "sarjeta", "saturar", "saudade", "saxofone", "sazonal", "secar", "secular", "seda", "sedento", "sediado", "sedoso", "sedutor", "segmento", "segredo", "segundo", "seiva", "seleto", "selvagem", "semanal", "semente", "senador", "senhor", "sensual", "sentado", "separado", "sereia", "seringa", "serra", "servo", "setembro", "setor", "sigilo", "silhueta", "silicone", "simetria", "simpatia", "simular", "sinal", "sincero", "singular", "sinopse", "sintonia", "sirene", "siri", "situado", "soberano", "sobra", "socorro", "sogro", "soja", "solda", "soletrar", "solteiro", "sombrio", "sonata", "sondar", "sonegar", "sonhador", "sono", "soprano", "soquete", "sorrir", "sorteio", "sossego", "sotaque", "soterrar", "sovado", "sozinho", "suavizar", "subida", "submerso", "subsolo", "subtrair", "sucata", "sucesso", "suco", "sudeste", "sufixo", "sugador", "sugerir", "sujeito", "sulfato", "sumir", "suor", "superior", "suplicar", "suposto", "suprimir", "surdina", "surfista", "surpresa", "surreal", "surtir", "suspiro", "sustento", "tabela", "tablete", "tabuada", "tacho", "tagarela", "talher", "talo", "talvez", "tamanho", "tamborim", "tampa", "tangente", "tanto", "tapar", "tapioca", "tardio", "tarefa", "tarja", "tarraxa", "tatuagem", "taurino", "taxativo", "taxista", "teatral", "tecer", "tecido", "teclado", "tedioso", "teia", "teimar", "telefone", "telhado", "tempero", "tenente", "tensor", "tentar", "termal", "terno", "terreno", "tese", "tesoura", "testado", "teto", "textura", "texugo", "tiara", "tigela", "tijolo", "timbrar", "timidez", "tingido", "tinteiro", "tiragem", "titular", "toalha", "tocha", "tolerar", "tolice", "tomada", "tomilho", "tonel", "tontura", "topete", "tora", "torcido", "torneio", "torque", "torrada", "torto", "tostar", "touca", "toupeira", "toxina", "trabalho", "tracejar", "tradutor", "trafegar", "trajeto", "trama", "trancar", "trapo", "traseiro", "tratador", "travar", "treino", "tremer", "trepidar", "trevo", "triagem", "tribo", "triciclo", "tridente", "trilogia", "trindade", "triplo", "triturar", "triunfal", "trocar", "trombeta", "trova", "trunfo", "truque", "tubular", "tucano", "tudo", "tulipa", "tupi", "turbo", "turma", "turquesa", "tutelar", "tutorial", "uivar", "umbigo", "unha", "unidade", "uniforme", "urologia", "urso", "urtiga", "urubu", "usado", "usina", "usufruir", "vacina", "vadiar", "vagaroso", "vaidoso", "vala", "valente", "validade", "valores", "vantagem", "vaqueiro", "varanda", "vareta", "varrer", "vascular", "vasilha", "vassoura", "vazar", "vazio", "veado", "vedar", "vegetar", "veicular", "veleiro", "velhice", "veludo", "vencedor", "vendaval", "venerar", "ventre", "verbal", "verdade", "vereador", "vergonha", "vermelho", "verniz", "versar", "vertente", "vespa", "vestido", "vetorial", "viaduto", "viagem", "viajar", "viatura", "vibrador", "videira", "vidraria", "viela", "viga", "vigente", "vigiar", "vigorar", "vilarejo", "vinco", "vinheta", "vinil", "violeta", "virada", "virtude", "visitar", "visto", "vitral", "viveiro", "vizinho", "voador", "voar", "vogal", "volante", "voleibol", "voltagem", "volumoso", "vontade", "vulto", "vuvuzela", "xadrez", "xarope", "xeque", "xeretar", "xerife", "xingar", "zangado", "zarpar", "zebu", "zelador", "zombar", "zoologia", "zumbido"]), type$.JSArray_String);
    B.List_piR = A._setArrayType(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), type$.JSArray_int);
    B.List_qFt = A._setArrayType(makeConstList(["\u7684", "\u4e00", "\u662f", "\u5728", "\u4e0d", "\u4e86", "\u6709", "\u548c", "\u4eba", "\u9019", "\u4e2d", "\u5927", "\u70ba", "\u4e0a", "\u500b", "\u570b", "\u6211", "\u4ee5", "\u8981", "\u4ed6", "\u6642", "\u4f86", "\u7528", "\u5011", "\u751f", "\u5230", "\u4f5c", "\u5730", "\u65bc", "\u51fa", "\u5c31", "\u5206", "\u5c0d", "\u6210", "\u6703", "\u53ef", "\u4e3b", "\u767c", "\u5e74", "\u52d5", "\u540c", "\u5de5", "\u4e5f", "\u80fd", "\u4e0b", "\u904e", "\u5b50", "\u8aaa", "\u7522", "\u7a2e", "\u9762", "\u800c", "\u65b9", "\u5f8c", "\u591a", "\u5b9a", "\u884c", "\u5b78", "\u6cd5", "\u6240", "\u6c11", "\u5f97", "\u7d93", "\u5341", "\u4e09", "\u4e4b", "\u9032", "\u8457", "\u7b49", "\u90e8", "\u5ea6", "\u5bb6", "\u96fb", "\u529b", "\u88e1", "\u5982", "\u6c34", "\u5316", "\u9ad8", "\u81ea", "\u4e8c", "\u7406", "\u8d77", "\u5c0f", "\u7269", "\u73fe", "\u5be6", "\u52a0", "\u91cf", "\u90fd", "\u5169", "\u9ad4", "\u5236", "\u6a5f", "\u7576", "\u4f7f", "\u9ede", "\u5f9e", "\u696d", "\u672c", "\u53bb", "\u628a", "\u6027", "\u597d", "\u61c9", "\u958b", "\u5b83", "\u5408", "\u9084", "\u56e0", "\u7531", "\u5176", "\u4e9b", "\u7136", "\u524d", "\u5916", "\u5929", "\u653f", "\u56db", "\u65e5", "\u90a3", "\u793e", "\u7fa9", "\u4e8b", "\u5e73", "\u5f62", "\u76f8", "\u5168", "\u8868", "\u9593", "\u6a23", "\u8207", "\u95dc", "\u5404", "\u91cd", "\u65b0", "\u7dda", "\u5167", "\u6578", "\u6b63", "\u5fc3", "\u53cd", "\u4f60", "\u660e", "\u770b", "\u539f", "\u53c8", "\u9ebc", "\u5229", "\u6bd4", "\u6216", "\u4f46", "\u8cea", "\u6c23", "\u7b2c", "\u5411", "\u9053", "\u547d", "\u6b64", "\u8b8a", "\u689d", "\u53ea", "\u6c92", "\u7d50", "\u89e3", "\u554f", "\u610f", "\u5efa", "\u6708", "\u516c", "\u7121", "\u7cfb", "\u8ecd", "\u5f88", "\u60c5", "\u8005", "\u6700", "\u7acb", "\u4ee3", "\u60f3", "\u5df2", "\u901a", "\u4e26", "\u63d0", "\u76f4", "\u984c", "\u9ee8", "\u7a0b", "\u5c55", "\u4e94", "\u679c", "\u6599", "\u8c61", "\u54e1", "\u9769", "\u4f4d", "\u5165", "\u5e38", "\u6587", "\u7e3d", "\u6b21", "\u54c1", "\u5f0f", "\u6d3b", "\u8a2d", "\u53ca", "\u7ba1", "\u7279", "\u4ef6", "\u9577", "\u6c42", "\u8001", "\u982d", "\u57fa", "\u8cc7", "\u908a", "\u6d41", "\u8def", "\u7d1a", "\u5c11", "\u5716", "\u5c71", "\u7d71", "\u63a5", "\u77e5", "\u8f03", "\u5c07", "\u7d44", "\u898b", "\u8a08", "\u5225", "\u5979", "\u624b", "\u89d2", "\u671f", "\u6839", "\u8ad6", "\u904b", "\u8fb2", "\u6307", "\u5e7e", "\u4e5d", "\u5340", "\u5f37", "\u653e", "\u6c7a", "\u897f", "\u88ab", "\u5e79", "\u505a", "\u5fc5", "\u6230", "\u5148", "\u56de", "\u5247", "\u4efb", "\u53d6", "\u64da", "\u8655", "\u968a", "\u5357", "\u7d66", "\u8272", "\u5149", "\u9580", "\u5373", "\u4fdd", "\u6cbb", "\u5317", "\u9020", "\u767e", "\u898f", "\u71b1", "\u9818", "\u4e03", "\u6d77", "\u53e3", "\u6771", "\u5c0e", "\u5668", "\u58d3", "\u5fd7", "\u4e16", "\u91d1", "\u589e", "\u722d", "\u6fdf", "\u968e", "\u6cb9", "\u601d", "\u8853", "\u6975", "\u4ea4", "\u53d7", "\u806f", "\u4ec0", "\u8a8d", "\u516d", "\u5171", "\u6b0a", "\u6536", "\u8b49", "\u6539", "\u6e05", "\u7f8e", "\u518d", "\u63a1", "\u8f49", "\u66f4", "\u55ae", "\u98a8", "\u5207", "\u6253", "\u767d", "\u6559", "\u901f", "\u82b1", "\u5e36", "\u5b89", "\u5834", "\u8eab", "\u8eca", "\u4f8b", "\u771f", "\u52d9", "\u5177", "\u842c", "\u6bcf", "\u76ee", "\u81f3", "\u9054", "\u8d70", "\u7a4d", "\u793a", "\u8b70", "\u8072", "\u5831", "\u9b25", "\u5b8c", "\u985e", "\u516b", "\u96e2", "\u83ef", "\u540d", "\u78ba", "\u624d", "\u79d1", "\u5f35", "\u4fe1", "\u99ac", "\u7bc0", "\u8a71", "\u7c73", "\u6574", "\u7a7a", "\u5143", "\u6cc1", "\u4eca", "\u96c6", "\u6eab", "\u50b3", "\u571f", "\u8a31", "\u6b65", "\u7fa4", "\u5ee3", "\u77f3", "\u8a18", "\u9700", "\u6bb5", "\u7814", "\u754c", "\u62c9", "\u6797", "\u5f8b", "\u53eb", "\u4e14", "\u7a76", "\u89c0", "\u8d8a", "\u7e54", "\u88dd", "\u5f71", "\u7b97", "\u4f4e", "\u6301", "\u97f3", "\u773e", "\u66f8", "\u5e03", "\u590d", "\u5bb9", "\u5152", "\u9808", "\u969b", "\u5546", "\u975e", "\u9a57", "\u9023", "\u65b7", "\u6df1", "\u96e3", "\u8fd1", "\u7926", "\u5343", "\u9031", "\u59d4", "\u7d20", "\u6280", "\u5099", "\u534a", "\u8fa6", "\u9752", "\u7701", "\u5217", "\u7fd2", "\u97ff", "\u7d04", "\u652f", "\u822c", "\u53f2", "\u611f", "\u52de", "\u4fbf", "\u5718", "\u5f80", "\u9178", "\u6b77", "\u5e02", "\u514b", "\u4f55", "\u9664", "\u6d88", "\u69cb", "\u5e9c", "\u7a31", "\u592a", "\u6e96", "\u7cbe", "\u503c", "\u865f", "\u7387", "\u65cf", "\u7dad", "\u5283", "\u9078", "\u6a19", "\u5beb", "\u5b58", "\u5019", "\u6bdb", "\u89aa", "\u5feb", "\u6548", "\u65af", "\u9662", "\u67e5", "\u6c5f", "\u578b", "\u773c", "\u738b", "\u6309", "\u683c", "\u990a", "\u6613", "\u7f6e", "\u6d3e", "\u5c64", "\u7247", "\u59cb", "\u537b", "\u5c08", "\u72c0", "\u80b2", "\u5ee0", "\u4eac", "\u8b58", "\u9069", "\u5c6c", "\u5713", "\u5305", "\u706b", "\u4f4f", "\u8abf", "\u6eff", "\u7e23", "\u5c40", "\u7167", "\u53c3", "\u7d05", "\u7d30", "\u5f15", "\u807d", "\u8a72", "\u9435", "\u50f9", "\u56b4", "\u9996", "\u5e95", "\u6db2", "\u5b98", "\u5fb7", "\u96a8", "\u75c5", "\u8607", "\u5931", "\u723e", "\u6b7b", "\u8b1b", "\u914d", "\u5973", "\u9ec3", "\u63a8", "\u986f", "\u8ac7", "\u7f6a", "\u795e", "\u85dd", "\u5462", "\u5e2d", "\u542b", "\u4f01", "\u671b", "\u5bc6", "\u6279", "\u71df", "\u9805", "\u9632", "\u8209", "\u7403", "\u82f1", "\u6c27", "\u52e2", "\u544a", "\u674e", "\u53f0", "\u843d", "\u6728", "\u5e6b", "\u8f2a", "\u7834", "\u4e9e", "\u5e2b", "\u570d", "\u6ce8", "\u9060", "\u5b57", "\u6750", "\u6392", "\u4f9b", "\u6cb3", "\u614b", "\u5c01", "\u53e6", "\u65bd", "\u6e1b", "\u6a39", "\u6eb6", "\u600e", "\u6b62", "\u6848", "\u8a00", "\u58eb", "\u5747", "\u6b66", "\u56fa", "\u8449", "\u9b5a", "\u6ce2", "\u8996", "\u50c5", "\u8cbb", "\u7dca", "\u611b", "\u5de6", "\u7ae0", "\u65e9", "\u671d", "\u5bb3", "\u7e8c", "\u8f15", "\u670d", "\u8a66", "\u98df", "\u5145", "\u5175", "\u6e90", "\u5224", "\u8b77", "\u53f8", "\u8db3", "\u67d0", "\u7df4", "\u5dee", "\u81f4", "\u677f", "\u7530", "\u964d", "\u9ed1", "\u72af", "\u8ca0", "\u64ca", "\u8303", "\u7e7c", "\u8208", "\u4f3c", "\u9918", "\u5805", "\u66f2", "\u8f38", "\u4fee", "\u6545", "\u57ce", "\u592b", "\u5920", "\u9001", "\u7b46", "\u8239", "\u4f54", "\u53f3", "\u8ca1", "\u5403", "\u5bcc", "\u6625", "\u8077", "\u89ba", "\u6f22", "\u756b", "\u529f", "\u5df4", "\u8ddf", "\u96d6", "\u96dc", "\u98db", "\u6aa2", "\u5438", "\u52a9", "\u6607", "\u967d", "\u4e92", "\u521d", "\u5275", "\u6297", "\u8003", "\u6295", "\u58de", "\u7b56", "\u53e4", "\u5f91", "\u63db", "\u672a", "\u8dd1", "\u7559", "\u92fc", "\u66fe", "\u7aef", "\u8cac", "\u7ad9", "\u7c21", "\u8ff0", "\u9322", "\u526f", "\u76e1", "\u5e1d", "\u5c04", "\u8349", "\u885d", "\u627f", "\u7368", "\u4ee4", "\u9650", "\u963f", "\u5ba3", "\u74b0", "\u96d9", "\u8acb", "\u8d85", "\u5fae", "\u8b93", "\u63a7", "\u5dde", "\u826f", "\u8ef8", "\u627e", "\u5426", "\u7d00", "\u76ca", "\u4f9d", "\u512a", "\u9802", "\u790e", "\u8f09", "\u5012", "\u623f", "\u7a81", "\u5750", "\u7c89", "\u6575", "\u7565", "\u5ba2", "\u8881", "\u51b7", "\u52dd", "\u7d55", "\u6790", "\u584a", "\u5291", "\u6e2c", "\u7d72", "\u5354", "\u8a34", "\u5ff5", "\u9673", "\u4ecd", "\u7f85", "\u9e7d", "\u53cb", "\u6d0b", "\u932f", "\u82e6", "\u591c", "\u5211", "\u79fb", "\u983b", "\u9010", "\u9760", "\u6df7", "\u6bcd", "\u77ed", "\u76ae", "\u7d42", "\u805a", "\u6c7d", "\u6751", "\u96f2", "\u54ea", "\u65e2", "\u8ddd", "\u885b", "\u505c", "\u70c8", "\u592e", "\u5bdf", "\u71d2", "\u8fc5", "\u5883", "\u82e5", "\u5370", "\u6d32", "\u523b", "\u62ec", "\u6fc0", "\u5b54", "\u641e", "\u751a", "\u5ba4", "\u5f85", "\u6838", "\u6821", "\u6563", "\u4fb5", "\u5427", "\u7532", "\u904a", "\u4e45", "\u83dc", "\u5473", "\u820a", "\u6a21", "\u6e56", "\u8ca8", "\u640d", "\u9810", "\u963b", "\u6beb", "\u666e", "\u7a69", "\u4e59", "\u5abd", "\u690d", "\u606f", "\u64f4", "\u9280", "\u8a9e", "\u63ee", "\u9152", "\u5b88", "\u62ff", "\u5e8f", "\u7d19", "\u91ab", "\u7f3a", "\u96e8", "\u55ce", "\u91dd", "\u5289", "\u554a", "\u6025", "\u5531", "\u8aa4", "\u8a13", "\u9858", "\u5be9", "\u9644", "\u7372", "\u8336", "\u9bae", "\u7ce7", "\u65a4", "\u5b69", "\u812b", "\u786b", "\u80a5", "\u5584", "\u9f8d", "\u6f14", "\u7236", "\u6f38", "\u8840", "\u6b61", "\u68b0", "\u638c", "\u6b4c", "\u6c99", "\u525b", "\u653b", "\u8b02", "\u76fe", "\u8a0e", "\u665a", "\u7c92", "\u4e82", "\u71c3", "\u77db", "\u4e4e", "\u6bba", "\u85e5", "\u5be7", "\u9b6f", "\u8cb4", "\u9418", "\u7164", "\u8b80", "\u73ed", "\u4f2f", "\u9999", "\u4ecb", "\u8feb", "\u53e5", "\u8c50", "\u57f9", "\u63e1", "\u862d", "\u64d4", "\u5f26", "\u86cb", "\u6c89", "\u5047", "\u7a7f", "\u57f7", "\u7b54", "\u6a02", "\u8ab0", "\u9806", "\u7159", "\u7e2e", "\u5fb5", "\u81c9", "\u559c", "\u677e", "\u8173", "\u56f0", "\u7570", "\u514d", "\u80cc", "\u661f", "\u798f", "\u8cb7", "\u67d3", "\u4e95", "\u6982", "\u6162", "\u6015", "\u78c1", "\u500d", "\u7956", "\u7687", "\u4fc3", "\u975c", "\u88dc", "\u8a55", "\u7ffb", "\u8089", "\u8e10", "\u5c3c", "\u8863", "\u5bec", "\u63da", "\u68c9", "\u5e0c", "\u50b7", "\u64cd", "\u5782", "\u79cb", "\u5b9c", "\u6c2b", "\u5957", "\u7763", "\u632f", "\u67b6", "\u4eae", "\u672b", "\u61b2", "\u6176", "\u7de8", "\u725b", "\u89f8", "\u6620", "\u96f7", "\u92b7", "\u8a69", "\u5ea7", "\u5c45", "\u6293", "\u88c2", "\u80de", "\u547c", "\u5a18", "\u666f", "\u5a01", "\u7da0", "\u6676", "\u539a", "\u76df", "\u8861", "\u96de", "\u5b6b", "\u5ef6", "\u5371", "\u81a0", "\u5c4b", "\u9109", "\u81e8", "\u9678", "\u9867", "\u6389", "\u5440", "\u71c8", "\u6b72", "\u63aa", "\u675f", "\u8010", "\u5287", "\u7389", "\u8d99", "\u8df3", "\u54e5", "\u5b63", "\u8ab2", "\u51f1", "\u80e1", "\u984d", "\u6b3e", "\u7d39", "\u5377", "\u9f4a", "\u5049", "\u84b8", "\u6b96", "\u6c38", "\u5b97", "\u82d7", "\u5ddd", "\u7210", "\u5ca9", "\u5f31", "\u96f6", "\u694a", "\u594f", "\u6cbf", "\u9732", "\u687f", "\u63a2", "\u6ed1", "\u93ae", "\u98ef", "\u6fc3", "\u822a", "\u61f7", "\u8d95", "\u5eab", "\u596a", "\u4f0a", "\u9748", "\u7a05", "\u9014", "\u6ec5", "\u8cfd", "\u6b78", "\u53ec", "\u9f13", "\u64ad", "\u76e4", "\u88c1", "\u96aa", "\u5eb7", "\u552f", "\u9304", "\u83cc", "\u7d14", "\u501f", "\u7cd6", "\u84cb", "\u6a6b", "\u7b26", "\u79c1", "\u52aa", "\u5802", "\u57df", "\u69cd", "\u6f64", "\u5e45", "\u54c8", "\u7adf", "\u719f", "\u87f2", "\u6fa4", "\u8166", "\u58e4", "\u78b3", "\u6b50", "\u904d", "\u5074", "\u5be8", "\u6562", "\u5fb9", "\u616e", "\u659c", "\u8584", "\u5ead", "\u7d0d", "\u5f48", "\u98fc", "\u4f38", "\u6298", "\u9ea5", "\u6fd5", "\u6697", "\u8377", "\u74e6", "\u585e", "\u5e8a", "\u7bc9", "\u60e1", "\u6236", "\u8a2a", "\u5854", "\u5947", "\u900f", "\u6881", "\u5200", "\u65cb", "\u8de1", "\u5361", "\u6c2f", "\u9047", "\u4efd", "\u6bd2", "\u6ce5", "\u9000", "\u6d17", "\u64fa", "\u7070", "\u5f69", "\u8ce3", "\u8017", "\u590f", "\u64c7", "\u5fd9", "\u9285", "\u737b", "\u786c", "\u4e88", "\u7e41", "\u5708", "\u96ea", "\u51fd", "\u4ea6", "\u62bd", "\u7bc7", "\u9663", "\u9670", "\u4e01", "\u5c3a", "\u8ffd", "\u5806", "\u96c4", "\u8fce", "\u6cdb", "\u7238", "\u6a13", "\u907f", "\u8b00", "\u5678", "\u91ce", "\u8c6c", "\u65d7", "\u7d2f", "\u504f", "\u5178", "\u9928", "\u7d22", "\u79e6", "\u8102", "\u6f6e", "\u723a", "\u8c46", "\u5ffd", "\u6258", "\u9a5a", "\u5851", "\u907a", "\u6108", "\u6731", "\u66ff", "\u7e96", "\u7c97", "\u50be", "\u5c1a", "\u75db", "\u695a", "\u8b1d", "\u596e", "\u8cfc", "\u78e8", "\u541b", "\u6c60", "\u65c1", "\u788e", "\u9aa8", "\u76e3", "\u6355", "\u5f1f", "\u66b4", "\u5272", "\u8cab", "\u6b8a", "\u91cb", "\u8a5e", "\u4ea1", "\u58c1", "\u9813", "\u5bf6", "\u5348", "\u5875", "\u805e", "\u63ed", "\u70ae", "\u6b98", "\u51ac", "\u6a4b", "\u5a66", "\u8b66", "\u7d9c", "\u62db", "\u5433", "\u4ed8", "\u6d6e", "\u906d", "\u5f90", "\u60a8", "\u6416", "\u8c37", "\u8d0a", "\u7bb1", "\u9694", "\u8a02", "\u7537", "\u5439", "\u5712", "\u7d1b", "\u5510", "\u6557", "\u5b8b", "\u73bb", "\u5de8", "\u8015", "\u5766", "\u69ae", "\u9589", "\u7063", "\u9375", "\u51e1", "\u99d0", "\u934b", "\u6551", "\u6069", "\u525d", "\u51dd", "\u9e7c", "\u9f52", "\u622a", "\u7149", "\u9ebb", "\u7d21", "\u7981", "\u5ee2", "\u76db", "\u7248", "\u7de9", "\u6de8", "\u775b", "\u660c", "\u5a5a", "\u6d89", "\u7b52", "\u5634", "\u63d2", "\u5cb8", "\u6717", "\u838a", "\u8857", "\u85cf", "\u59d1", "\u8cbf", "\u8150", "\u5974", "\u5566", "\u6163", "\u4e58", "\u5925", "\u6062", "\u52fb", "\u7d17", "\u624e", "\u8faf", "\u8033", "\u5f6a", "\u81e3", "\u5104", "\u7483", "\u62b5", "\u8108", "\u79c0", "\u85a9", "\u4fc4", "\u7db2", "\u821e", "\u5e97", "\u5674", "\u7e31", "\u5bf8", "\u6c57", "\u639b", "\u6d2a", "\u8cc0", "\u9583", "\u67ec", "\u7206", "\u70ef", "\u6d25", "\u7a3b", "\u7246", "\u8edf", "\u52c7", "\u50cf", "\u6efe", "\u5398", "\u8499", "\u82b3", "\u80af", "\u5761", "\u67f1", "\u76ea", "\u817f", "\u5100", "\u65c5", "\u5c3e", "\u8ecb", "\u51b0", "\u8ca2", "\u767b", "\u9ece", "\u524a", "\u947d", "\u52d2", "\u9003", "\u969c", "\u6c28", "\u90ed", "\u5cf0", "\u5e63", "\u6e2f", "\u4f0f", "\u8ecc", "\u755d", "\u7562", "\u64e6", "\u83ab", "\u523a", "\u6d6a", "\u79d8", "\u63f4", "\u682a", "\u5065", "\u552e", "\u80a1", "\u5cf6", "\u7518", "\u6ce1", "\u7761", "\u7ae5", "\u9444", "\u6e6f", "\u95a5", "\u4f11", "\u532f", "\u820d", "\u7267", "\u7e5e", "\u70b8", "\u54f2", "\u78f7", "\u7e3e", "\u670b", "\u6de1", "\u5c16", "\u555f", "\u9677", "\u67f4", "\u5448", "\u5f92", "\u984f", "\u6dda", "\u7a0d", "\u5fd8", "\u6cf5", "\u85cd", "\u62d6", "\u6d1e", "\u6388", "\u93e1", "\u8f9b", "\u58ef", "\u92d2", "\u8ca7", "\u865b", "\u5f4e", "\u6469", "\u6cf0", "\u5e7c", "\u5ef7", "\u5c0a", "\u7a97", "\u7db1", "\u5f04", "\u96b8", "\u7591", "\u6c0f", "\u5bae", "\u59d0", "\u9707", "\u745e", "\u602a", "\u5c24", "\u7434", "\u5faa", "\u63cf", "\u819c", "\u9055", "\u593e", "\u8170", "\u7de3", "\u73e0", "\u7aae", "\u68ee", "\u679d", "\u7af9", "\u6e9d", "\u50ac", "\u7e69", "\u61b6", "\u90a6", "\u5269", "\u5e78", "\u6f3f", "\u6b04", "\u64c1", "\u7259", "\u8caf", "\u79ae", "\u6ffe", "\u9209", "\u7d0b", "\u7f77", "\u62cd", "\u54b1", "\u558a", "\u8896", "\u57c3", "\u52e4", "\u7f70", "\u7126", "\u6f5b", "\u4f0d", "\u58a8", "\u6b32", "\u7e2b", "\u59d3", "\u520a", "\u98fd", "\u4eff", "\u734e", "\u92c1", "\u9b3c", "\u9e97", "\u8de8", "\u9ed8", "\u6316", "\u93c8", "\u6383", "\u559d", "\u888b", "\u70ad", "\u6c61", "\u5e55", "\u8af8", "\u5f27", "\u52f5", "\u6885", "\u5976", "\u6f54", "\u707d", "\u821f", "\u9451", "\u82ef", "\u8a1f", "\u62b1", "\u6bc0", "\u61c2", "\u5bd2", "\u667a", "\u57d4", "\u5bc4", "\u5c46", "\u8e8d", "\u6e21", "\u6311", "\u4e39", "\u8271", "\u8c9d", "\u78b0", "\u62d4", "\u7239", "\u6234", "\u78bc", "\u5922", "\u82bd", "\u7194", "\u8d64", "\u6f01", "\u54ed", "\u656c", "\u9846", "\u5954", "\u925b", "\u4ef2", "\u864e", "\u7a00", "\u59b9", "\u4e4f", "\u73cd", "\u7533", "\u684c", "\u9075", "\u5141", "\u9686", "\u87ba", "\u5009", "\u9b4f", "\u92b3", "\u66c9", "\u6c2e", "\u517c", "\u96b1", "\u7919", "\u8d6b", "\u64a5", "\u5fe0", "\u8085", "\u7f38", "\u727d", "\u6436", "\u535a", "\u5de7", "\u6bbc", "\u5144", "\u675c", "\u8a0a", "\u8aa0", "\u78a7", "\u7965", "\u67ef", "\u9801", "\u5de1", "\u77e9", "\u60b2", "\u704c", "\u9f61", "\u502b", "\u7968", "\u5c0b", "\u6842", "\u92ea", "\u8056", "\u6050", "\u6070", "\u912d", "\u8da3", "\u62ac", "\u8352", "\u9a30", "\u8cbc", "\u67d4", "\u6ef4", "\u731b", "\u95ca", "\u8f1b", "\u59bb", "\u586b", "\u64a4", "\u5132", "\u7c3d", "\u9b27", "\u64fe", "\u7d2b", "\u7802", "\u905e", "\u6232", "\u540a", "\u9676", "\u4f10", "\u9935", "\u7642", "\u74f6", "\u5a46", "\u64ab", "\u81c2", "\u6478", "\u5fcd", "\u8766", "\u881f", "\u9130", "\u80f8", "\u978f", "\u64e0", "\u5076", "\u68c4", "\u69fd", "\u52c1", "\u4e73", "\u9127", "\u5409", "\u4ec1", "\u721b", "\u78da", "\u79df", "\u70cf", "\u8266", "\u4f34", "\u74dc", "\u6dfa", "\u4e19", "\u66ab", "\u71e5", "\u6a61", "\u67f3", "\u8ff7", "\u6696", "\u724c", "\u79e7", "\u81bd", "\u8a73", "\u7c27", "\u8e0f", "\u74f7", "\u8b5c", "\u5446", "\u8cd3", "\u7cca", "\u6d1b", "\u8f1d", "\u61a4", "\u7af6", "\u9699", "\u6012", "\u7c98", "\u4e43", "\u7dd2", "\u80a9", "\u7c4d", "\u654f", "\u5857", "\u7199", "\u7686", "\u5075", "\u61f8", "\u6398", "\u4eab", "\u7cfe", "\u9192", "\u72c2", "\u9396", "\u6dc0", "\u6068", "\u7272", "\u9738", "\u722c", "\u8cde", "\u9006", "\u73a9", "\u9675", "\u795d", "\u79d2", "\u6d59", "\u8c8c", "\u5f79", "\u5f7c", "\u6089", "\u9d28", "\u8da8", "\u9cf3", "\u6668", "\u755c", "\u8f29", "\u79e9", "\u5375", "\u7f72", "\u68af", "\u708e", "\u7058", "\u68cb", "\u9a45", "\u7be9", "\u5cfd", "\u5192", "\u5565", "\u58fd", "\u8b6f", "\u6d78", "\u6cc9", "\u5e3d", "\u9072", "\u77fd", "\u7586", "\u8cb8", "\u6f0f", "\u7a3f", "\u51a0", "\u5ae9", "\u8105", "\u82af", "\u7262", "\u53db", "\u8755", "\u5967", "\u9cf4", "\u5dba", "\u7f8a", "\u6191", "\u4e32", "\u5858", "\u7e6a", "\u9175", "\u878d", "\u76c6", "\u932b", "\u5edf", "\u7c4c", "\u51cd", "\u8f14", "\u651d", "\u8972", "\u7b4b", "\u62d2", "\u50da", "\u65f1", "\u9240", "\u9ce5", "\u6f06", "\u6c88", "\u7709", "\u758f", "\u6dfb", "\u68d2", "\u7a57", "\u785d", "\u97d3", "\u903c", "\u626d", "\u50d1", "\u6dbc", "\u633a", "\u7897", "\u683d", "\u7092", "\u676f", "\u60a3", "\u993e", "\u52f8", "\u8c6a", "\u907c", "\u52c3", "\u9d3b", "\u65e6", "\u540f", "\u62dc", "\u72d7", "\u57cb", "\u8f25", "\u63a9", "\u98f2", "\u642c", "\u7f75", "\u8fad", "\u52fe", "\u6263", "\u4f30", "\u8523", "\u7d68", "\u9727", "\u4e08", "\u6735", "\u59c6", "\u64ec", "\u5b87", "\u8f2f", "\u965d", "\u96d5", "\u511f", "\u84c4", "\u5d07", "\u526a", "\u5021", "\u5ef3", "\u54ac", "\u99db", "\u85af", "\u5237", "\u65a5", "\u756a", "\u8ce6", "\u5949", "\u4f5b", "\u6f86", "\u6f2b", "\u66fc", "\u6247", "\u9223", "\u6843", "\u6276", "\u4ed4", "\u8fd4", "\u4fd7", "\u8667", "\u8154", "\u978b", "\u68f1", "\u8986", "\u6846", "\u6084", "\u53d4", "\u649e", "\u9a19", "\u52d8", "\u65fa", "\u6cb8", "\u5b64", "\u5410", "\u5b5f", "\u6e20", "\u5c48", "\u75be", "\u5999", "\u60dc", "\u4ef0", "\u72e0", "\u8139", "\u8ae7", "\u62cb", "\u9ef4", "\u6851", "\u5d17", "\u561b", "\u8870", "\u76dc", "\u6ef2", "\u81df", "\u8cf4", "\u6e67", "\u751c", "\u66f9", "\u95b1", "\u808c", "\u54e9", "\u53b2", "\u70f4", "\u7def", "\u6bc5", "\u6628", "\u507d", "\u75c7", "\u716e", "\u5606", "\u91d8", "\u642d", "\u8396", "\u7c60", "\u9177", "\u5077", "\u5f13", "\u9310", "\u6046", "\u5091", "\u5751", "\u9f3b", "\u7ffc", "\u7db8", "\u6558", "\u7344", "\u902e", "\u7f50", "\u7d61", "\u68da", "\u6291", "\u81a8", "\u852c", "\u5bfa", "\u9a5f", "\u7a46", "\u51b6", "\u67af", "\u518a", "\u5c4d", "\u51f8", "\u7d33", "\u576f", "\u72a7", "\u7130", "\u8f5f", "\u6b23", "\u6649", "\u7626", "\u79a6", "\u9320", "\u9326", "\u55aa", "\u65ec", "\u935b", "\u58df", "\u641c", "\u64b2", "\u9080", "\u4ead", "\u916f", "\u9081", "\u8212", "\u8106", "\u9176", "\u9592", "\u6182", "\u915a", "\u9811", "\u7fbd", "\u6f32", "\u5378", "\u4ed7", "\u966a", "\u95e2", "\u61f2", "\u676d", "\u59da", "\u809a", "\u6349", "\u98c4", "\u6f02", "\u6606", "\u6b3a", "\u543e", "\u90ce", "\u70f7", "\u6c41", "\u5475", "\u98fe", "\u856d", "\u96c5", "\u90f5", "\u9077", "\u71d5", "\u6492", "\u59fb", "\u8d74", "\u5bb4", "\u7169", "\u50b5", "\u5e33", "\u6591", "\u9234", "\u65e8", "\u9187", "\u8463", "\u9905", "\u96db", "\u59ff", "\u62cc", "\u5085", "\u8179", "\u59a5", "\u63c9", "\u8ce2", "\u62c6", "\u6b6a", "\u8461", "\u80fa", "\u4e1f", "\u6d69", "\u5fbd", "\u6602", "\u588a", "\u64cb", "\u89bd", "\u8caa", "\u6170", "\u7e73", "\u6c6a", "\u614c", "\u99ae", "\u8afe", "\u59dc", "\u8abc", "\u5147", "\u52a3", "\u8aa3", "\u8000", "\u660f", "\u8eba", "\u76c8", "\u9a0e", "\u55ac", "\u6eaa", "\u53e2", "\u76e7", "\u62b9", "\u60b6", "\u8aee", "\u522e", "\u99d5", "\u7e9c", "\u609f", "\u6458", "\u927a", "\u64f2", "\u9817", "\u5e7b", "\u67c4", "\u60e0", "\u6158", "\u4f73", "\u4ec7", "\u81d8", "\u7aa9", "\u6ecc", "\u528d", "\u77a7", "\u5821", "\u6f51", "\u8525", "\u7f69", "\u970d", "\u6488", "\u80ce", "\u84bc", "\u6ff1", "\u5006", "\u6345", "\u6e58", "\u780d", "\u971e", "\u90b5", "\u8404", "\u760b", "\u6dee", "\u9042", "\u718a", "\u7cde", "\u70d8", "\u5bbf", "\u6a94", "\u6208", "\u99c1", "\u5ac2", "\u88d5", "\u5f99", "\u7bad", "\u6350", "\u8178", "\u6490", "\u66ec", "\u8fa8", "\u6bbf", "\u84ee", "\u6524", "\u652a", "\u91ac", "\u5c4f", "\u75ab", "\u54c0", "\u8521", "\u5835", "\u6cab", "\u76ba", "\u66a2", "\u758a", "\u95a3", "\u840a", "\u6572", "\u8f44", "\u9264", "\u75d5", "\u58e9", "\u5df7", "\u9913", "\u798d", "\u4e18", "\u7384", "\u6e9c", "\u66f0", "\u908f", "\u5f6d", "\u5617", "\u537f", "\u59a8", "\u8247", "\u541e", "\u97cb", "\u6028", "\u77ee", "\u6b47"]), type$.JSArray_String);
    B.List_qIe = A._setArrayType(makeConstList(["\u0430\u0431\u0430\u0436\u0443\u0440", "\u0430\u0431\u0437\u0430\u0446", "\u0430\u0431\u043e\u043d\u0435\u043d\u0442", "\u0430\u0431\u0440\u0438\u043a\u043e\u0441", "\u0430\u0431\u0441\u0443\u0440\u0434", "\u0430\u0432\u0430\u043d\u0433\u0430\u0440\u0434", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0430\u0432\u0438\u0430\u0446\u0438\u044f", "\u0430\u0432\u043e\u0441\u044c\u043a\u0430", "\u0430\u0432\u0442\u043e\u0440", "\u0430\u0433\u0430\u0442", "\u0430\u0433\u0435\u043d\u0442", "\u0430\u0433\u0438\u0442\u0430\u0442\u043e\u0440", "\u0430\u0433\u043d\u0435\u0446", "\u0430\u0433\u043e\u043d\u0438\u044f", "\u0430\u0433\u0440\u0435\u0433\u0430\u0442", "\u0430\u0434\u0432\u043e\u043a\u0430\u0442", "\u0430\u0434\u043c\u0438\u0440\u0430\u043b", "\u0430\u0434\u0440\u0435\u0441", "\u0430\u0436\u0438\u043e\u0442\u0430\u0436", "\u0430\u0437\u0430\u0440\u0442", "\u0430\u0437\u0431\u0443\u043a\u0430", "\u0430\u0437\u043e\u0442", "\u0430\u0438\u0441\u0442", "\u0430\u0439\u0441\u0431\u0435\u0440\u0433", "\u0430\u043a\u0430\u0434\u0435\u043c\u0438\u044f", "\u0430\u043a\u0432\u0430\u0440\u0438\u0443\u043c", "\u0430\u043a\u043a\u043e\u0440\u0434", "\u0430\u043a\u0440\u043e\u0431\u0430\u0442", "\u0430\u043a\u0441\u0438\u043e\u043c\u0430", "\u0430\u043a\u0442\u0435\u0440", "\u0430\u043a\u0443\u043b\u0430", "\u0430\u043a\u0446\u0438\u044f", "\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c", "\u0430\u043b\u0435\u0431\u0430\u0440\u0434\u0430", "\u0430\u043b\u043b\u0435\u044f", "\u0430\u043b\u043c\u0430\u0437", "\u0430\u043b\u0442\u0430\u0440\u044c", "\u0430\u043b\u0444\u0430\u0432\u0438\u0442", "\u0430\u043b\u0445\u0438\u043c\u0438\u043a", "\u0430\u043b\u044b\u0439", "\u0430\u043b\u044c\u0431\u043e\u043c", "\u0430\u043b\u044e\u043c\u0438\u043d\u0438\u0439", "\u0430\u043c\u0431\u0430\u0440", "\u0430\u043c\u0435\u0442\u0438\u0441\u0442", "\u0430\u043c\u043d\u0435\u0437\u0438\u044f", "\u0430\u043c\u043f\u0443\u043b\u0430", "\u0430\u043c\u0444\u043e\u0440\u0430", "\u0430\u043d\u0430\u043b\u0438\u0437", "\u0430\u043d\u0433\u0435\u043b", "\u0430\u043d\u0435\u043a\u0434\u043e\u0442", "\u0430\u043d\u0438\u043c\u0430\u0446\u0438\u044f", "\u0430\u043d\u043a\u0435\u0442\u0430", "\u0430\u043d\u043e\u043c\u0430\u043b\u0438\u044f", "\u0430\u043d\u0441\u0430\u043c\u0431\u043b\u044c", "\u0430\u043d\u0442\u0435\u043d\u043d\u0430", "\u0430\u043f\u0430\u0442\u0438\u044f", "\u0430\u043f\u0435\u043b\u044c\u0441\u0438\u043d", "\u0430\u043f\u043e\u0444\u0435\u043e\u0437", "\u0430\u043f\u043f\u0430\u0440\u0430\u0442", "\u0430\u043f\u0440\u0435\u043b\u044c", "\u0430\u043f\u0442\u0435\u043a\u0430", "\u0430\u0440\u0430\u0431\u0441\u043a\u0438\u0439", "\u0430\u0440\u0431\u0443\u0437", "\u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442", "\u0430\u0440\u0435\u0441\u0442", "\u0430\u0440\u0438\u044f", "\u0430\u0440\u043a\u0430", "\u0430\u0440\u043c\u0438\u044f", "\u0430\u0440\u043e\u043c\u0430\u0442", "\u0430\u0440\u0441\u0435\u043d\u0430\u043b", "\u0430\u0440\u0442\u0438\u0441\u0442", "\u0430\u0440\u0445\u0438\u0432", "\u0430\u0440\u0448\u0438\u043d", "\u0430\u0441\u0431\u0435\u0441\u0442", "\u0430\u0441\u043a\u0435\u0442\u0438\u0437\u043c", "\u0430\u0441\u043f\u0435\u043a\u0442", "\u0430\u0441\u0441\u043e\u0440\u0442\u0438", "\u0430\u0441\u0442\u0440\u043e\u043d\u043e\u043c", "\u0430\u0441\u0444\u0430\u043b\u044c\u0442", "\u0430\u0442\u0430\u043a\u0430", "\u0430\u0442\u0435\u043b\u044c\u0435", "\u0430\u0442\u043b\u0430\u0441", "\u0430\u0442\u043e\u043c", "\u0430\u0442\u0440\u0438\u0431\u0443\u0442", "\u0430\u0443\u0434\u0438\u0442\u043e\u0440", "\u0430\u0443\u043a\u0446\u0438\u043e\u043d", "\u0430\u0443\u0440\u0430", "\u0430\u0444\u0435\u0440\u0430", "\u0430\u0444\u0438\u0448\u0430", "\u0430\u0445\u0438\u043d\u0435\u044f", "\u0430\u0446\u0435\u0442\u043e\u043d", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442", "\u0431\u0430\u0431\u0443\u0448\u043a\u0430", "\u0431\u0430\u0433\u0430\u0436", "\u0431\u0430\u0434\u044c\u044f", "\u0431\u0430\u0437\u0430", "\u0431\u0430\u043a\u043b\u0430\u0436\u0430\u043d", "\u0431\u0430\u043b\u043a\u043e\u043d", "\u0431\u0430\u043c\u043f\u0435\u0440", "\u0431\u0430\u043d\u043a", "\u0431\u0430\u0440\u043e\u043d", "\u0431\u0430\u0441\u0441\u0435\u0439\u043d", "\u0431\u0430\u0442\u0430\u0440\u0435\u044f", "\u0431\u0430\u0445\u0440\u043e\u043c\u0430", "\u0431\u0430\u0448\u043d\u044f", "\u0431\u0430\u044f\u043d", "\u0431\u0435\u0433\u0441\u0442\u0432\u043e", "\u0431\u0435\u0434\u0440\u043e", "\u0431\u0435\u0437\u0434\u043d\u0430", "\u0431\u0435\u043a\u043e\u043d", "\u0431\u0435\u043b\u044b\u0439", "\u0431\u0435\u043d\u0437\u0438\u043d", "\u0431\u0435\u0440\u0435\u0433", "\u0431\u0435\u0441\u0435\u0434\u0430", "\u0431\u0435\u0442\u043e\u043d\u043d\u044b\u0439", "\u0431\u0438\u0430\u0442\u043b\u043e\u043d", "\u0431\u0438\u0431\u043b\u0438\u044f", "\u0431\u0438\u0432\u0435\u043d\u044c", "\u0431\u0438\u0433\u0443\u0434\u0438", "\u0431\u0438\u0434\u043e\u043d", "\u0431\u0438\u0437\u043d\u0435\u0441", "\u0431\u0438\u043a\u0438\u043d\u0438", "\u0431\u0438\u043b\u0435\u0442", "\u0431\u0438\u043d\u043e\u043a\u043b\u044c", "\u0431\u0438\u043e\u043b\u043e\u0433\u0438\u044f", "\u0431\u0438\u0440\u0436\u0430", "\u0431\u0438\u0441\u0435\u0440", "\u0431\u0438\u0442\u0432\u0430", "\u0431\u0438\u0446\u0435\u043f\u0441", "\u0431\u043b\u0430\u0433\u043e", "\u0431\u043b\u0435\u0434\u043d\u044b\u0439", "\u0431\u043b\u0438\u0437\u043a\u0438\u0439", "\u0431\u043b\u043e\u043a", "\u0431\u043b\u0443\u0436\u0434\u0430\u0442\u044c", "\u0431\u043b\u044e\u0434\u043e", "\u0431\u043b\u044f\u0445\u0430", "\u0431\u043e\u0431\u0435\u0440", "\u0431\u043e\u0433\u0430\u0442\u044b\u0439", "\u0431\u043e\u0434\u0440\u044b\u0439", "\u0431\u043e\u0435\u0432\u043e\u0439", "\u0431\u043e\u043a\u0430\u043b", "\u0431\u043e\u043b\u044c\u0448\u043e\u0439", "\u0431\u043e\u0440\u044c\u0431\u0430", "\u0431\u043e\u0441\u043e\u0439", "\u0431\u043e\u0442\u0438\u043d\u043e\u043a", "\u0431\u043e\u0446\u043c\u0430\u043d", "\u0431\u043e\u0447\u043a\u0430", "\u0431\u043e\u044f\u0440\u0438\u043d", "\u0431\u0440\u0430\u0442\u044c", "\u0431\u0440\u0435\u0432\u043d\u043e", "\u0431\u0440\u0438\u0433\u0430\u0434\u0430", "\u0431\u0440\u043e\u0441\u0430\u0442\u044c", "\u0431\u0440\u044b\u0437\u0433\u0438", "\u0431\u0440\u044e\u043a\u0438", "\u0431\u0443\u0431\u043b\u0438\u043a", "\u0431\u0443\u0433\u043e\u0440", "\u0431\u0443\u0434\u0443\u0449\u0435\u0435", "\u0431\u0443\u043a\u0432\u0430", "\u0431\u0443\u043b\u044c\u0432\u0430\u0440", "\u0431\u0443\u043c\u0430\u0433\u0430", "\u0431\u0443\u043d\u0442", "\u0431\u0443\u0440\u043d\u044b\u0439", "\u0431\u0443\u0441\u044b", "\u0431\u0443\u0442\u044b\u043b\u043a\u0430", "\u0431\u0443\u0444\u0435\u0442", "\u0431\u0443\u0445\u0442\u0430", "\u0431\u0443\u0448\u043b\u0430\u0442", "\u0431\u044b\u0432\u0430\u043b\u044b\u0439", "\u0431\u044b\u043b\u044c", "\u0431\u044b\u0441\u0442\u0440\u044b\u0439", "\u0431\u044b\u0442\u044c", "\u0431\u044e\u0434\u0436\u0435\u0442", "\u0431\u044e\u0440\u043e", "\u0431\u044e\u0441\u0442", "\u0432\u0430\u0433\u043e\u043d", "\u0432\u0430\u0436\u043d\u044b\u0439", "\u0432\u0430\u0437\u0430", "\u0432\u0430\u043a\u0446\u0438\u043d\u0430", "\u0432\u0430\u043b\u044e\u0442\u0430", "\u0432\u0430\u043c\u043f\u0438\u0440", "\u0432\u0430\u043d\u043d\u0430\u044f", "\u0432\u0430\u0440\u0438\u0430\u043d\u0442", "\u0432\u0430\u0441\u0441\u0430\u043b", "\u0432\u0430\u0442\u0430", "\u0432\u0430\u0444\u043b\u044f", "\u0432\u0430\u0445\u0442\u0430", "\u0432\u0434\u043e\u0432\u0430", "\u0432\u0434\u044b\u0445\u0430\u0442\u044c", "\u0432\u0435\u0434\u0443\u0449\u0438\u0439", "\u0432\u0435\u0435\u0440", "\u0432\u0435\u0436\u043b\u0438\u0432\u044b\u0439", "\u0432\u0435\u0437\u0442\u0438", "\u0432\u0435\u043a\u043e", "\u0432\u0435\u043b\u0438\u043a\u0438\u0439", "\u0432\u0435\u043d\u0430", "\u0432\u0435\u0440\u0438\u0442\u044c", "\u0432\u0435\u0441\u0435\u043b\u044b\u0439", "\u0432\u0435\u0442\u0435\u0440", "\u0432\u0435\u0447\u0435\u0440", "\u0432\u0435\u0448\u0430\u0442\u044c", "\u0432\u0435\u0449\u044c", "\u0432\u0435\u044f\u043d\u0438\u0435", "\u0432\u0437\u0430\u0438\u043c\u043d\u044b\u0439", "\u0432\u0437\u0431\u0443\u0447\u043a\u0430", "\u0432\u0437\u0432\u043e\u0434", "\u0432\u0437\u0433\u043b\u044f\u0434", "\u0432\u0437\u0434\u044b\u0445\u0430\u0442\u044c", "\u0432\u0437\u043b\u0435\u0442\u0430\u0442\u044c", "\u0432\u0437\u043c\u0430\u0445", "\u0432\u0437\u043d\u043e\u0441", "\u0432\u0437\u043e\u0440", "\u0432\u0437\u0440\u044b\u0432", "\u0432\u0437\u044b\u0432\u0430\u0442\u044c", "\u0432\u0437\u044f\u0442\u043a\u0430", "\u0432\u0438\u0431\u0440\u0430\u0446\u0438\u044f", "\u0432\u0438\u0437\u0438\u0442", "\u0432\u0438\u043b\u043a\u0430", "\u0432\u0438\u043d\u043e", "\u0432\u0438\u0440\u0443\u0441", "\u0432\u0438\u0441\u0435\u0442\u044c", "\u0432\u0438\u0442\u0440\u0438\u043d\u0430", "\u0432\u0438\u0445\u0440\u044c", "\u0432\u0438\u0448\u043d\u0435\u0432\u044b\u0439", "\u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c", "\u0432\u043a\u0443\u0441", "\u0432\u043b\u0430\u0441\u0442\u044c", "\u0432\u043b\u0435\u0447\u044c", "\u0432\u043b\u0438\u044f\u043d\u0438\u0435", "\u0432\u043b\u044e\u0431\u043b\u044f\u0442\u044c", "\u0432\u043d\u0435\u0448\u043d\u0438\u0439", "\u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435", "\u0432\u043d\u0443\u043a", "\u0432\u043d\u044f\u0442\u043d\u044b\u0439", "\u0432\u043e\u0434\u0430", "\u0432\u043e\u0435\u0432\u0430\u0442\u044c", "\u0432\u043e\u0436\u0434\u044c", "\u0432\u043e\u0437\u0434\u0443\u0445", "\u0432\u043e\u0439\u0442\u0438", "\u0432\u043e\u043a\u0437\u0430\u043b", "\u0432\u043e\u043b\u043e\u0441", "\u0432\u043e\u043f\u0440\u043e\u0441", "\u0432\u043e\u0440\u043e\u0442\u0430", "\u0432\u043e\u0441\u0442\u043e\u043a", "\u0432\u043f\u0430\u0434\u0430\u0442\u044c", "\u0432\u043f\u0443\u0441\u043a\u0430\u0442\u044c", "\u0432\u0440\u0430\u0447", "\u0432\u0440\u0435\u043c\u044f", "\u0432\u0440\u0443\u0447\u0430\u0442\u044c", "\u0432\u0441\u0430\u0434\u043d\u0438\u043a", "\u0432\u0441\u0435\u043e\u0431\u0449\u0438\u0439", "\u0432\u0441\u043f\u044b\u0448\u043a\u0430", "\u0432\u0441\u0442\u0440\u0435\u0447\u0430", "\u0432\u0442\u043e\u0440\u043d\u0438\u043a", "\u0432\u0443\u043b\u043a\u0430\u043d", "\u0432\u0443\u0440\u0434\u0430\u043b\u0430\u043a", "\u0432\u0445\u043e\u0434\u0438\u0442\u044c", "\u0432\u044a\u0435\u0437\u0434", "\u0432\u044b\u0431\u043e\u0440", "\u0432\u044b\u0432\u043e\u0434", "\u0432\u044b\u0433\u043e\u0434\u043d\u044b\u0439", "\u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c", "\u0432\u044b\u0435\u0437\u0436\u0430\u0442\u044c", "\u0432\u044b\u0436\u0438\u0432\u0430\u0442\u044c", "\u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c", "\u0432\u044b\u0438\u0433\u0440\u044b\u0448", "\u0432\u044b\u043b\u0435\u0437\u0430\u0442\u044c", "\u0432\u044b\u043d\u043e\u0441\u0438\u0442\u044c", "\u0432\u044b\u043f\u0438\u0432\u0430\u0442\u044c", "\u0432\u044b\u0441\u043e\u043a\u0438\u0439", "\u0432\u044b\u0445\u043e\u0434\u0438\u0442\u044c", "\u0432\u044b\u0447\u0435\u0442", "\u0432\u044b\u0448\u043a\u0430", "\u0432\u044b\u044f\u0441\u043d\u044f\u0442\u044c", "\u0432\u044f\u0437\u0430\u0442\u044c", "\u0432\u044f\u043b\u044b\u0439", "\u0433\u0430\u0432\u0430\u043d\u044c", "\u0433\u0430\u0434\u0430\u0442\u044c", "\u0433\u0430\u0437\u0435\u0442\u0430", "\u0433\u0430\u0438\u0448\u043d\u0438\u043a", "\u0433\u0430\u043b\u0441\u0442\u0443\u043a", "\u0433\u0430\u043c\u043c\u0430", "\u0433\u0430\u0440\u0430\u043d\u0442\u0438\u044f", "\u0433\u0430\u0441\u0442\u0440\u043e\u043b\u0438", "\u0433\u0432\u0430\u0440\u0434\u0438\u044f", "\u0433\u0432\u043e\u0437\u0434\u044c", "\u0433\u0435\u043a\u0442\u0430\u0440", "\u0433\u0435\u043b\u044c", "\u0433\u0435\u043d\u0435\u0440\u0430\u043b", "\u0433\u0435\u043e\u043b\u043e\u0433", "\u0433\u0435\u0440\u043e\u0439", "\u0433\u0435\u0448\u0435\u0444\u0442", "\u0433\u0438\u0431\u0435\u043b\u044c", "\u0433\u0438\u0433\u0430\u043d\u0442", "\u0433\u0438\u043b\u044c\u0437\u0430", "\u0433\u0438\u043c\u043d", "\u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0430", "\u0433\u0438\u0442\u0430\u0440\u0430", "\u0433\u043b\u0430\u0437", "\u0433\u043b\u0438\u043d\u0430", "\u0433\u043b\u043e\u0442\u043e\u043a", "\u0433\u043b\u0443\u0431\u043e\u043a\u0438\u0439", "\u0433\u043b\u044b\u0431\u0430", "\u0433\u043b\u044f\u0434\u0435\u0442\u044c", "\u0433\u043d\u0430\u0442\u044c", "\u0433\u043d\u0435\u0432", "\u0433\u043d\u0438\u0442\u044c", "\u0433\u043d\u043e\u043c", "\u0433\u043d\u0443\u0442\u044c", "\u0433\u043e\u0432\u043e\u0440\u0438\u0442\u044c", "\u0433\u043e\u0434\u043e\u0432\u043e\u0439", "\u0433\u043e\u043b\u043e\u0432\u0430", "\u0433\u043e\u043d\u043a\u0430", "\u0433\u043e\u0440\u043e\u0434", "\u0433\u043e\u0441\u0442\u044c", "\u0433\u043e\u0442\u043e\u0432\u044b\u0439", "\u0433\u0440\u0430\u043d\u0438\u0446\u0430", "\u0433\u0440\u0435\u0445", "\u0433\u0440\u0438\u0431", "\u0433\u0440\u043e\u043c\u043a\u0438\u0439", "\u0433\u0440\u0443\u043f\u043f\u0430", "\u0433\u0440\u044b\u0437\u0442\u044c", "\u0433\u0440\u044f\u0437\u043d\u044b\u0439", "\u0433\u0443\u0431\u0430", "\u0433\u0443\u0434\u0435\u0442\u044c", "\u0433\u0443\u043b\u044f\u0442\u044c", "\u0433\u0443\u043c\u0430\u043d\u043d\u044b\u0439", "\u0433\u0443\u0441\u0442\u043e\u0439", "\u0433\u0443\u0449\u0430", "\u0434\u0430\u0432\u0430\u0442\u044c", "\u0434\u0430\u043b\u0435\u043a\u0438\u0439", "\u0434\u0430\u043c\u0430", "\u0434\u0430\u043d\u043d\u044b\u0435", "\u0434\u0430\u0440\u0438\u0442\u044c", "\u0434\u0430\u0442\u044c", "\u0434\u0430\u0447\u0430", "\u0434\u0432\u0435\u0440\u044c", "\u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435", "\u0434\u0432\u043e\u0440", "\u0434\u0435\u0431\u044e\u0442", "\u0434\u0435\u0432\u0443\u0448\u043a\u0430", "\u0434\u0435\u0434\u0443\u0448\u043a\u0430", "\u0434\u0435\u0436\u0443\u0440\u043d\u044b\u0439", "\u0434\u0435\u0437\u0435\u0440\u0442\u0438\u0440", "\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435", "\u0434\u0435\u043a\u0430\u0431\u0440\u044c", "\u0434\u0435\u043b\u043e", "\u0434\u0435\u043c\u043e\u043a\u0440\u0430\u0442", "\u0434\u0435\u043d\u044c", "\u0434\u0435\u043f\u0443\u0442\u0430\u0442", "\u0434\u0435\u0440\u0436\u0430\u0442\u044c", "\u0434\u0435\u0441\u044f\u0442\u043e\u043a", "\u0434\u0435\u0442\u0441\u043a\u0438\u0439", "\u0434\u0435\u0444\u0438\u0446\u0438\u0442", "\u0434\u0435\u0448\u0435\u0432\u044b\u0439", "\u0434\u0435\u044f\u0442\u0435\u043b\u044c", "\u0434\u0436\u0430\u0437", "\u0434\u0436\u0438\u043d\u0441\u044b", "\u0434\u0436\u0443\u043d\u0433\u043b\u0438", "\u0434\u0438\u0430\u043b\u043e\u0433", "\u0434\u0438\u0432\u0430\u043d", "\u0434\u0438\u0435\u0442\u0430", "\u0434\u0438\u0437\u0430\u0439\u043d", "\u0434\u0438\u043a\u0438\u0439", "\u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0430", "\u0434\u0438\u043f\u043b\u043e\u043c", "\u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440", "\u0434\u0438\u0441\u043a", "\u0434\u0438\u0442\u044f", "\u0434\u0438\u0447\u044c", "\u0434\u043b\u0438\u043d\u043d\u044b\u0439", "\u0434\u043d\u0435\u0432\u043d\u0438\u043a", "\u0434\u043e\u0431\u0440\u044b\u0439", "\u0434\u043e\u0432\u0435\u0440\u0438\u0435", "\u0434\u043e\u0433\u043e\u0432\u043e\u0440", "\u0434\u043e\u0436\u0434\u044c", "\u0434\u043e\u0437\u0430", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442", "\u0434\u043e\u043b\u0436\u0435\u043d", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0439", "\u0434\u043e\u043f\u0440\u043e\u0441", "\u0434\u043e\u0440\u043e\u0433\u0430", "\u0434\u043e\u0445\u043e\u0434", "\u0434\u043e\u0446\u0435\u043d\u0442", "\u0434\u043e\u0447\u044c", "\u0434\u043e\u0449\u0430\u0442\u044b\u0439", "\u0434\u0440\u0430\u043a\u0430", "\u0434\u0440\u0435\u0432\u043d\u0438\u0439", "\u0434\u0440\u043e\u0436\u0430\u0442\u044c", "\u0434\u0440\u0443\u0433", "\u0434\u0440\u044f\u043d\u044c", "\u0434\u0443\u0431\u043e\u0432\u044b\u0439", "\u0434\u0443\u0433\u0430", "\u0434\u0443\u0434\u043a\u0430", "\u0434\u0443\u043a\u0430\u0442", "\u0434\u0443\u043b\u043e", "\u0434\u0443\u043c\u0430\u0442\u044c", "\u0434\u0443\u043f\u043b\u043e", "\u0434\u0443\u0440\u0430\u043a", "\u0434\u0443\u0442\u044c", "\u0434\u0443\u0445\u0438", "\u0434\u0443\u0448\u0430", "\u0434\u0443\u044d\u0442", "\u0434\u044b\u043c\u0438\u0442\u044c", "\u0434\u044b\u043d\u044f", "\u0434\u044b\u0440\u0430", "\u0434\u044b\u0445\u0430\u043d\u044c\u0435", "\u0434\u044b\u0448\u0430\u0442\u044c", "\u0434\u044c\u044f\u0432\u043e\u043b", "\u0434\u044e\u0436\u0438\u043d\u0430", "\u0434\u044e\u0439\u043c", "\u0434\u044e\u043d\u0430", "\u0434\u044f\u0434\u044f", "\u0434\u044f\u0442\u0435\u043b", "\u0435\u0433\u0435\u0440\u044c", "\u0435\u0434\u0438\u043d\u044b\u0439", "\u0435\u0434\u043a\u0438\u0439", "\u0435\u0436\u0435\u0432\u0438\u043a\u0430", "\u0435\u0436\u0438\u043a", "\u0435\u0437\u0434\u0430", "\u0435\u043b\u043a\u0430", "\u0435\u043c\u043a\u043e\u0441\u0442\u044c", "\u0435\u0440\u0443\u043d\u0434\u0430", "\u0435\u0445\u0430\u0442\u044c", "\u0436\u0430\u0434\u043d\u044b\u0439", "\u0436\u0430\u0436\u0434\u0430", "\u0436\u0430\u043b\u0435\u0442\u044c", "\u0436\u0430\u043d\u0440", "\u0436\u0430\u0440\u0430", "\u0436\u0430\u0442\u044c", "\u0436\u0433\u0443\u0447\u0438\u0439", "\u0436\u0434\u0430\u0442\u044c", "\u0436\u0435\u0432\u0430\u0442\u044c", "\u0436\u0435\u043b\u0430\u043d\u0438\u0435", "\u0436\u0435\u043c\u0447\u0443\u0433", "\u0436\u0435\u043d\u0449\u0438\u043d\u0430", "\u0436\u0435\u0440\u0442\u0432\u0430", "\u0436\u0435\u0441\u0442\u043a\u0438\u0439", "\u0436\u0435\u0447\u044c", "\u0436\u0438\u0432\u043e\u0439", "\u0436\u0438\u0434\u043a\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u044c", "\u0436\u0438\u043b\u044c\u0435", "\u0436\u0438\u0440\u043d\u044b\u0439", "\u0436\u0438\u0442\u0435\u043b\u044c", "\u0436\u0443\u0440\u043d\u0430\u043b", "\u0436\u044e\u0440\u0438", "\u0437\u0430\u0431\u044b\u0432\u0430\u0442\u044c", "\u0437\u0430\u0432\u043e\u0434", "\u0437\u0430\u0433\u0430\u0434\u043a\u0430", "\u0437\u0430\u0434\u0430\u0447\u0430", "\u0437\u0430\u0436\u0435\u0447\u044c", "\u0437\u0430\u0439\u0442\u0438", "\u0437\u0430\u043a\u043e\u043d", "\u0437\u0430\u043c\u0435\u0447\u0430\u0442\u044c", "\u0437\u0430\u043d\u0438\u043c\u0430\u0442\u044c", "\u0437\u0430\u043f\u0430\u0434\u043d\u044b\u0439", "\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430", "\u0437\u0430\u0441\u044b\u043f\u0430\u0442\u044c", "\u0437\u0430\u0442\u0440\u0430\u0442\u0430", "\u0437\u0430\u0445\u0432\u0430\u0442", "\u0437\u0430\u0446\u0435\u043f\u043a\u0430", "\u0437\u0430\u0447\u0435\u0442", "\u0437\u0430\u0449\u0438\u0442\u0430", "\u0437\u0430\u044f\u0432\u043a\u0430", "\u0437\u0432\u0430\u0442\u044c", "\u0437\u0432\u0435\u0437\u0434\u0430", "\u0437\u0432\u043e\u043d\u0438\u0442\u044c", "\u0437\u0432\u0443\u043a", "\u0437\u0434\u0430\u043d\u0438\u0435", "\u0437\u0434\u0435\u0448\u043d\u0438\u0439", "\u0437\u0434\u043e\u0440\u043e\u0432\u044c\u0435", "\u0437\u0435\u0431\u0440\u0430", "\u0437\u0435\u0432\u0430\u0442\u044c", "\u0437\u0435\u043b\u0435\u043d\u044b\u0439", "\u0437\u0435\u043c\u043b\u044f", "\u0437\u0435\u043d\u0438\u0442", "\u0437\u0435\u0440\u043a\u0430\u043b\u043e", "\u0437\u0435\u0444\u0438\u0440", "\u0437\u0438\u0433\u0437\u0430\u0433", "\u0437\u0438\u043c\u0430", "\u0437\u0438\u044f\u0442\u044c", "\u0437\u043b\u0430\u043a", "\u0437\u043b\u043e\u0439", "\u0437\u043c\u0435\u044f", "\u0437\u043d\u0430\u0442\u044c", "\u0437\u043d\u043e\u0439", "\u0437\u043e\u0434\u0447\u0438\u0439", "\u0437\u043e\u043b\u043e\u0442\u043e\u0439", "\u0437\u043e\u043c\u0431\u0438", "\u0437\u043e\u043d\u0430", "\u0437\u043e\u043e\u043f\u0430\u0440\u043a", "\u0437\u043e\u0440\u043a\u0438\u0439", "\u0437\u0440\u0430\u0447\u043e\u043a", "\u0437\u0440\u0435\u043d\u0438\u0435", "\u0437\u0440\u0438\u0442\u0435\u043b\u044c", "\u0437\u0443\u0431\u043d\u043e\u0439", "\u0437\u044b\u0431\u043a\u0438\u0439", "\u0437\u044f\u0442\u044c", "\u0438\u0433\u043b\u0430", "\u0438\u0433\u043e\u043b\u043a\u0430", "\u0438\u0433\u0440\u0430\u0442\u044c", "\u0438\u0434\u0435\u044f", "\u0438\u0434\u0438\u043e\u0442", "\u0438\u0434\u043e\u043b", "\u0438\u0434\u0442\u0438", "\u0438\u0435\u0440\u0430\u0440\u0445\u0438\u044f", "\u0438\u0437\u0431\u0440\u0430\u0442\u044c", "\u0438\u0437\u0432\u0435\u0441\u0442\u0438\u0435", "\u0438\u0437\u0433\u043e\u043d\u044f\u0442\u044c", "\u0438\u0437\u0434\u0430\u043d\u0438\u0435", "\u0438\u0437\u043b\u0430\u0433\u0430\u0442\u044c", "\u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c", "\u0438\u0437\u043d\u043e\u0441", "\u0438\u0437\u043e\u043b\u044f\u0446\u0438\u044f", "\u0438\u0437\u0440\u044f\u0434\u043d\u044b\u0439", "\u0438\u0437\u0443\u0447\u0430\u0442\u044c", "\u0438\u0437\u044b\u043c\u0430\u0442\u044c", "\u0438\u0437\u044f\u0449\u043d\u044b\u0439", "\u0438\u043a\u043e\u043d\u0430", "\u0438\u043a\u0440\u0430", "\u0438\u043b\u043b\u044e\u0437\u0438\u044f", "\u0438\u043c\u0431\u0438\u0440\u044c", "\u0438\u043c\u0435\u0442\u044c", "\u0438\u043c\u0438\u0434\u0436", "\u0438\u043c\u043c\u0443\u043d\u043d\u044b\u0439", "\u0438\u043c\u043f\u0435\u0440\u0438\u044f", "\u0438\u043d\u0432\u0435\u0441\u0442\u043e\u0440", "\u0438\u043d\u0434\u0438\u0432\u0438\u0434", "\u0438\u043d\u0435\u0440\u0446\u0438\u044f", "\u0438\u043d\u0436\u0435\u043d\u0435\u0440", "\u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0430", "\u0438\u043d\u0441\u0442\u0438\u0442\u0443\u0442", "\u0438\u043d\u0442\u0435\u0440\u0435\u0441", "\u0438\u043d\u0444\u0435\u043a\u0446\u0438\u044f", "\u0438\u043d\u0446\u0438\u0434\u0435\u043d\u0442", "\u0438\u043f\u043f\u043e\u0434\u0440\u043e\u043c", "\u0438\u0440\u0438\u0441", "\u0438\u0440\u043e\u043d\u0438\u044f", "\u0438\u0441\u043a\u0430\u0442\u044c", "\u0438\u0441\u0442\u043e\u0440\u0438\u044f", "\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c", "\u0438\u0441\u0447\u0435\u0437\u0430\u0442\u044c", "\u0438\u0442\u043e\u0433", "\u0438\u044e\u043b\u044c", "\u0438\u044e\u043d\u044c", "\u043a\u0430\u0431\u0438\u043d\u0435\u0442", "\u043a\u0430\u0432\u0430\u043b\u0435\u0440", "\u043a\u0430\u0434\u0440", "\u043a\u0430\u0437\u0430\u0440\u043c\u0430", "\u043a\u0430\u0439\u0444", "\u043a\u0430\u043a\u0442\u0443\u0441", "\u043a\u0430\u043b\u0438\u0442\u043a\u0430", "\u043a\u0430\u043c\u0435\u043d\u044c", "\u043a\u0430\u043d\u0430\u043b", "\u043a\u0430\u043f\u0438\u0442\u0430\u043d", "\u043a\u0430\u0440\u0442\u0438\u043d\u0430", "\u043a\u0430\u0441\u0441\u0430", "\u043a\u0430\u0442\u0435\u0440", "\u043a\u0430\u0444\u0435", "\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e", "\u043a\u0430\u0448\u0430", "\u043a\u0430\u044e\u0442\u0430", "\u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430", "\u043a\u0432\u0438\u043d\u0442\u0435\u0442", "\u043a\u0432\u043e\u0442\u0430", "\u043a\u0435\u0434\u0440", "\u043a\u0435\u043a\u0441", "\u043a\u0435\u043d\u0433\u0443\u0440\u0443", "\u043a\u0435\u043f\u043a\u0430", "\u043a\u0435\u0440\u043e\u0441\u0438\u043d", "\u043a\u0435\u0442\u0447\u0443\u043f", "\u043a\u0435\u0444\u0438\u0440", "\u043a\u0438\u0431\u0438\u0442\u043a\u0430", "\u043a\u0438\u0432\u043d\u0443\u0442\u044c", "\u043a\u0438\u0434\u0430\u0442\u044c", "\u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440", "\u043a\u0438\u043d\u043e", "\u043a\u0438\u043e\u0441\u043a", "\u043a\u0438\u043f\u0435\u0442\u044c", "\u043a\u0438\u0440\u043f\u0438\u0447", "\u043a\u0438\u0441\u0442\u044c", "\u043a\u0438\u0442\u0430\u0435\u0446", "\u043a\u043b\u0430\u0441\u0441", "\u043a\u043b\u0435\u0442\u043a\u0430", "\u043a\u043b\u0438\u0435\u043d\u0442", "\u043a\u043b\u043e\u0443\u043d", "\u043a\u043b\u0443\u0431", "\u043a\u043b\u044b\u043a", "\u043a\u043b\u044e\u0447", "\u043a\u043b\u044f\u0442\u0432\u0430", "\u043a\u043d\u0438\u0433\u0430", "\u043a\u043d\u043e\u043f\u043a\u0430", "\u043a\u043d\u0443\u0442", "\u043a\u043d\u044f\u0437\u044c", "\u043a\u043e\u0431\u0443\u0440\u0430", "\u043a\u043e\u0432\u0435\u0440", "\u043a\u043e\u0433\u043e\u0442\u044c", "\u043a\u043e\u0434\u0435\u043a\u0441", "\u043a\u043e\u0436\u0430", "\u043a\u043e\u0437\u0435\u043b", "\u043a\u043e\u0439\u043a\u0430", "\u043a\u043e\u043a\u0442\u0435\u0439\u043b\u044c", "\u043a\u043e\u043b\u0435\u043d\u043e", "\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f", "\u043a\u043e\u043d\u0435\u0446", "\u043a\u043e\u043f\u0435\u0439\u043a\u0430", "\u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0439", "\u043a\u043e\u0441\u0442\u044e\u043c", "\u043a\u043e\u0442\u0435\u043b", "\u043a\u043e\u0444\u0435", "\u043a\u043e\u0448\u043a\u0430", "\u043a\u0440\u0430\u0441\u043d\u044b\u0439", "\u043a\u0440\u0435\u0441\u043b\u043e", "\u043a\u0440\u0438\u0447\u0430\u0442\u044c", "\u043a\u0440\u043e\u0432\u044c", "\u043a\u0440\u0443\u043f\u043d\u044b\u0439", "\u043a\u0440\u044b\u0448\u0430", "\u043a\u0440\u044e\u0447\u043e\u043a", "\u043a\u0443\u0431\u043e\u043a", "\u043a\u0443\u0432\u0448\u0438\u043d", "\u043a\u0443\u0434\u0440\u044f\u0432\u044b\u0439", "\u043a\u0443\u0437\u043e\u0432", "\u043a\u0443\u043a\u043b\u0430", "\u043a\u0443\u043b\u044c\u0442\u0443\u0440\u0430", "\u043a\u0443\u043c\u0438\u0440", "\u043a\u0443\u043f\u0438\u0442\u044c", "\u043a\u0443\u0440\u0441", "\u043a\u0443\u0441\u043e\u043a", "\u043a\u0443\u0445\u043d\u044f", "\u043a\u0443\u0447\u0430", "\u043a\u0443\u0448\u0430\u0442\u044c", "\u043a\u044e\u0432\u0435\u0442", "\u043b\u0430\u0431\u0438\u0440\u0438\u043d\u0442", "\u043b\u0430\u0432\u043a\u0430", "\u043b\u0430\u0433\u0435\u0440\u044c", "\u043b\u0430\u0434\u043e\u043d\u044c", "\u043b\u0430\u0437\u0435\u0440\u043d\u044b\u0439", "\u043b\u0430\u0439\u043d\u0435\u0440", "\u043b\u0430\u043a\u0435\u0439", "\u043b\u0430\u043c\u043f\u0430", "\u043b\u0430\u043d\u0434\u0448\u0430\u0444\u0442", "\u043b\u0430\u043f\u0430", "\u043b\u0430\u0440\u0435\u043a", "\u043b\u0430\u0441\u043a\u043e\u0432\u044b\u0439", "\u043b\u0430\u0443\u0440\u0435\u0430\u0442", "\u043b\u0430\u0447\u0443\u0433\u0430", "\u043b\u0430\u044f\u0442\u044c", "\u043b\u0433\u0430\u0442\u044c", "\u043b\u0435\u0431\u0435\u0434\u044c", "\u043b\u0435\u0432\u044b\u0439", "\u043b\u0435\u0433\u043a\u0438\u0439", "\u043b\u0435\u0434\u044f\u043d\u043e\u0439", "\u043b\u0435\u0436\u0430\u0442\u044c", "\u043b\u0435\u043a\u0446\u0438\u044f", "\u043b\u0435\u043d\u0442\u0430", "\u043b\u0435\u043f\u0435\u0441\u0442\u043e\u043a", "\u043b\u0435\u0441\u043d\u043e\u0439", "\u043b\u0435\u0442\u043e", "\u043b\u0435\u0447\u044c", "\u043b\u0435\u0448\u0438\u0439", "\u043b\u0436\u0438\u0432\u044b\u0439", "\u043b\u0438\u0431\u0435\u0440\u0430\u043b", "\u043b\u0438\u0432\u0435\u043d\u044c", "\u043b\u0438\u0433\u0430", "\u043b\u0438\u0434\u0435\u0440", "\u043b\u0438\u043a\u043e\u0432\u0430\u0442\u044c", "\u043b\u0438\u043b\u043e\u0432\u044b\u0439", "\u043b\u0438\u043c\u043e\u043d", "\u043b\u0438\u043d\u0438\u044f", "\u043b\u0438\u043f\u0430", "\u043b\u0438\u0440\u0438\u043a\u0430", "\u043b\u0438\u0441\u0442", "\u043b\u0438\u0442\u0440", "\u043b\u0438\u0444\u0442", "\u043b\u0438\u0445\u043e\u0439", "\u043b\u0438\u0446\u043e", "\u043b\u0438\u0447\u043d\u044b\u0439", "\u043b\u0438\u0448\u043d\u0438\u0439", "\u043b\u043e\u0431\u043e\u0432\u043e\u0439", "\u043b\u043e\u0432\u0438\u0442\u044c", "\u043b\u043e\u0433\u0438\u043a\u0430", "\u043b\u043e\u0434\u043a\u0430", "\u043b\u043e\u0436\u043a\u0430", "\u043b\u043e\u0437\u0443\u043d\u0433", "\u043b\u043e\u043a\u043e\u0442\u044c", "\u043b\u043e\u043c\u0430\u0442\u044c", "\u043b\u043e\u043d\u043e", "\u043b\u043e\u043f\u0430\u0442\u0430", "\u043b\u043e\u0440\u0434", "\u043b\u043e\u0441\u044c", "\u043b\u043e\u0442\u043e\u043a", "\u043b\u043e\u0445\u043c\u0430\u0442\u044b\u0439", "\u043b\u043e\u0448\u0430\u0434\u044c", "\u043b\u0443\u0436\u0430", "\u043b\u0443\u043a\u0430\u0432\u044b\u0439", "\u043b\u0443\u043d\u0430", "\u043b\u0443\u043f\u0438\u0442\u044c", "\u043b\u0443\u0447\u0448\u0438\u0439", "\u043b\u044b\u0436\u043d\u044b\u0439", "\u043b\u044b\u0441\u044b\u0439", "\u043b\u044c\u0432\u0438\u043d\u044b\u0439", "\u043b\u044c\u0433\u043e\u0442\u0430", "\u043b\u044c\u0434\u0438\u043d\u0430", "\u043b\u044e\u0431\u0438\u0442\u044c", "\u043b\u044e\u0434\u0441\u043a\u043e\u0439", "\u043b\u044e\u0441\u0442\u0440\u0430", "\u043b\u044e\u0442\u044b\u0439", "\u043b\u044f\u0433\u0443\u0448\u043a\u0430", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d", "\u043c\u0430\u0434\u0430\u043c", "\u043c\u0430\u0437\u0430\u0442\u044c", "\u043c\u0430\u0439\u043e\u0440", "\u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c", "\u043c\u0430\u043b\u044c\u0447\u0438\u043a", "\u043c\u0430\u043d\u0435\u0440\u0430", "\u043c\u0430\u0440\u0442", "\u043c\u0430\u0441\u0441\u0430", "\u043c\u0430\u0442\u044c", "\u043c\u0430\u0444\u0438\u044f", "\u043c\u0430\u0445\u0430\u0442\u044c", "\u043c\u0430\u0447\u0442\u0430", "\u043c\u0430\u0448\u0438\u043d\u0430", "\u043c\u0430\u044d\u0441\u0442\u0440\u043e", "\u043c\u0430\u044f\u043a", "\u043c\u0433\u043b\u0430", "\u043c\u0435\u0431\u0435\u043b\u044c", "\u043c\u0435\u0434\u0432\u0435\u0434\u044c", "\u043c\u0435\u043b\u043a\u0438\u0439", "\u043c\u0435\u043c\u0443\u0430\u0440\u044b", "\u043c\u0435\u043d\u044f\u0442\u044c", "\u043c\u0435\u0440\u0430", "\u043c\u0435\u0441\u0442\u043e", "\u043c\u0435\u0442\u043e\u0434", "\u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c", "\u043c\u0435\u0447\u0442\u0430\u0442\u044c", "\u043c\u0435\u0448\u0430\u0442\u044c", "\u043c\u0438\u0433\u0440\u0430\u0446\u0438\u044f", "\u043c\u0438\u0437\u0438\u043d\u0435\u0446", "\u043c\u0438\u043a\u0440\u043e\u0444\u043e\u043d", "\u043c\u0438\u043b\u043b\u0438\u043e\u043d", "\u043c\u0438\u043d\u0443\u0442\u0430", "\u043c\u0438\u0440\u043e\u0432\u043e\u0439", "\u043c\u0438\u0441\u0441\u0438\u044f", "\u043c\u0438\u0442\u0438\u043d\u0433", "\u043c\u0438\u0448\u0435\u043d\u044c", "\u043c\u043b\u0430\u0434\u0448\u0438\u0439", "\u043c\u043d\u0435\u043d\u0438\u0435", "\u043c\u043d\u0438\u043c\u044b\u0439", "\u043c\u043e\u0433\u0438\u043b\u0430", "\u043c\u043e\u0434\u0435\u043b\u044c", "\u043c\u043e\u0437\u0433", "\u043c\u043e\u0439\u043a\u0430", "\u043c\u043e\u043a\u0440\u044b\u0439", "\u043c\u043e\u043b\u043e\u0434\u043e\u0439", "\u043c\u043e\u043c\u0435\u043d\u0442", "\u043c\u043e\u043d\u0430\u0445", "\u043c\u043e\u0440\u0435", "\u043c\u043e\u0441\u0442", "\u043c\u043e\u0442\u043e\u0440", "\u043c\u043e\u0445\u043d\u0430\u0442\u044b\u0439", "\u043c\u043e\u0447\u044c", "\u043c\u043e\u0448\u0435\u043d\u043d\u0438\u043a", "\u043c\u043e\u0449\u043d\u044b\u0439", "\u043c\u0440\u0430\u0447\u043d\u044b\u0439", "\u043c\u0441\u0442\u0438\u0442\u044c", "\u043c\u0443\u0434\u0440\u044b\u0439", "\u043c\u0443\u0436\u0447\u0438\u043d\u0430", "\u043c\u0443\u0437\u044b\u043a\u0430", "\u043c\u0443\u043a\u0430", "\u043c\u0443\u043c\u0438\u044f", "\u043c\u0443\u043d\u0434\u0438\u0440", "\u043c\u0443\u0440\u0430\u0432\u0435\u0439", "\u043c\u0443\u0441\u043e\u0440", "\u043c\u0443\u0442\u043d\u044b\u0439", "\u043c\u0443\u0444\u0442\u0430", "\u043c\u0443\u0445\u0430", "\u043c\u0443\u0447\u0438\u0442\u044c", "\u043c\u0443\u0448\u043a\u0435\u0442\u0435\u0440", "\u043c\u044b\u043b\u043e", "\u043c\u044b\u0441\u043b\u044c", "\u043c\u044b\u0442\u044c", "\u043c\u044b\u0447\u0430\u0442\u044c", "\u043c\u044b\u0448\u044c", "\u043c\u044d\u0442\u0440", "\u043c\u044e\u0437\u0438\u043a\u043b", "\u043c\u044f\u0433\u043a\u0438\u0439", "\u043c\u044f\u043a\u0438\u0448", "\u043c\u044f\u0441\u043e", "\u043c\u044f\u0442\u044b\u0439", "\u043c\u044f\u0447\u0438\u043a", "\u043d\u0430\u0431\u043e\u0440", "\u043d\u0430\u0432\u044b\u043a", "\u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0430", "\u043d\u0430\u0434\u0435\u0436\u0434\u0430", "\u043d\u0430\u0435\u043c\u043d\u044b\u0439", "\u043d\u0430\u0436\u0430\u0442\u044c", "\u043d\u0430\u0437\u044b\u0432\u0430\u0442\u044c", "\u043d\u0430\u0438\u0432\u043d\u044b\u0439", "\u043d\u0430\u043a\u0440\u044b\u0442\u044c", "\u043d\u0430\u043b\u043e\u0433", "\u043d\u0430\u043c\u0435\u0440\u0435\u043d", "\u043d\u0430\u043d\u043e\u0441\u0438\u0442\u044c", "\u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c", "\u043d\u0430\u0440\u043e\u0434", "\u043d\u0430\u0442\u0443\u0440\u0430", "\u043d\u0430\u0443\u043a\u0430", "\u043d\u0430\u0446\u0438\u044f", "\u043d\u0430\u0447\u0430\u0442\u044c", "\u043d\u0435\u0431\u043e", "\u043d\u0435\u0432\u0435\u0441\u0442\u0430", "\u043d\u0435\u0433\u043e\u0434\u044f\u0439", "\u043d\u0435\u0434\u0435\u043b\u044f", "\u043d\u0435\u0436\u043d\u044b\u0439", "\u043d\u0435\u0437\u043d\u0430\u043d\u0438\u0435", "\u043d\u0435\u043b\u0435\u043f\u044b\u0439", "\u043d\u0435\u043c\u0430\u043b\u044b\u0439", "\u043d\u0435\u043f\u0440\u0430\u0432\u0434\u0430", "\u043d\u0435\u0440\u0432\u043d\u044b\u0439", "\u043d\u0435\u0441\u0442\u0438", "\u043d\u0435\u0444\u0442\u044c", "\u043d\u0435\u0445\u0432\u0430\u0442\u043a\u0430", "\u043d\u0435\u0447\u0438\u0441\u0442\u044b\u0439", "\u043d\u0435\u044f\u0441\u043d\u044b\u0439", "\u043d\u0438\u0432\u0430", "\u043d\u0438\u0436\u043d\u0438\u0439", "\u043d\u0438\u0437\u043a\u0438\u0439", "\u043d\u0438\u043a\u0435\u043b\u044c", "\u043d\u0438\u0440\u0432\u0430\u043d\u0430", "\u043d\u0438\u0442\u044c", "\u043d\u0438\u0447\u044c\u044f", "\u043d\u0438\u0448\u0430", "\u043d\u0438\u0449\u0438\u0439", "\u043d\u043e\u0432\u044b\u0439", "\u043d\u043e\u0433\u0430", "\u043d\u043e\u0436\u043d\u0438\u0446\u044b", "\u043d\u043e\u0437\u0434\u0440\u044f", "\u043d\u043e\u043b\u044c", "\u043d\u043e\u043c\u0435\u0440", "\u043d\u043e\u0440\u043c\u0430", "\u043d\u043e\u0442\u0430", "\u043d\u043e\u0447\u044c", "\u043d\u043e\u0448\u0430", "\u043d\u043e\u044f\u0431\u0440\u044c", "\u043d\u0440\u0430\u0432", "\u043d\u0443\u0436\u043d\u044b\u0439", "\u043d\u0443\u0442\u0440\u043e", "\u043d\u044b\u043d\u0435\u0448\u043d\u0438\u0439", "\u043d\u044b\u0440\u043d\u0443\u0442\u044c", "\u043d\u044b\u0442\u044c", "\u043d\u044e\u0430\u043d\u0441", "\u043d\u044e\u0445\u0430\u0442\u044c", "\u043d\u044f\u043d\u044f", "\u043e\u0430\u0437\u0438\u0441", "\u043e\u0431\u0430\u044f\u043d\u0438\u0435", "\u043e\u0431\u0432\u0438\u043d\u044f\u0442\u044c", "\u043e\u0431\u0433\u043e\u043d\u044f\u0442\u044c", "\u043e\u0431\u0435\u0449\u0430\u0442\u044c", "\u043e\u0431\u0436\u0438\u0433\u0430\u0442\u044c", "\u043e\u0431\u0437\u043e\u0440", "\u043e\u0431\u0438\u0434\u0430", "\u043e\u0431\u043b\u0430\u0441\u0442\u044c", "\u043e\u0431\u043c\u0435\u043d", "\u043e\u0431\u043d\u0438\u043c\u0430\u0442\u044c", "\u043e\u0431\u043e\u0440\u043e\u043d\u0430", "\u043e\u0431\u0440\u0430\u0437", "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435", "\u043e\u0431\u0445\u043e\u0434\u0438\u0442\u044c", "\u043e\u0431\u0448\u0438\u0440\u043d\u044b\u0439", "\u043e\u0431\u0449\u0438\u0439", "\u043e\u0431\u044a\u0435\u043a\u0442", "\u043e\u0431\u044b\u0447\u043d\u044b\u0439", "\u043e\u0431\u044f\u0437\u0430\u0442\u044c", "\u043e\u0432\u0430\u043b\u044c\u043d\u044b\u0439", "\u043e\u0432\u0435\u0441", "\u043e\u0432\u043e\u0449\u0438", "\u043e\u0432\u0440\u0430\u0433", "\u043e\u0432\u0446\u0430", "\u043e\u0432\u0447\u0430\u0440\u043a\u0430", "\u043e\u0433\u043d\u0435\u043d\u043d\u044b\u0439", "\u043e\u0433\u043e\u043d\u044c", "\u043e\u0433\u0440\u043e\u043c\u043d\u044b\u0439", "\u043e\u0433\u0443\u0440\u0435\u0446", "\u043e\u0434\u0435\u0436\u0434\u0430", "\u043e\u0434\u0438\u043d\u043e\u043a\u0438\u0439", "\u043e\u0434\u043e\u0431\u0440\u0438\u0442\u044c", "\u043e\u0436\u0438\u0434\u0430\u0442\u044c", "\u043e\u0436\u043e\u0433", "\u043e\u0437\u0430\u0440\u0435\u043d\u0438\u0435", "\u043e\u0437\u0435\u0440\u043e", "\u043e\u0437\u043d\u0430\u0447\u0430\u0442\u044c", "\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043e\u043a\u0435\u0430\u043d", "\u043e\u043a\u043b\u0430\u0434", "\u043e\u043a\u043d\u043e", "\u043e\u043a\u0440\u0443\u0433", "\u043e\u043a\u0442\u044f\u0431\u0440\u044c", "\u043e\u043a\u0443\u0440\u043e\u043a", "\u043e\u043b\u0435\u043d\u044c", "\u043e\u043f\u0430\u0441\u043d\u044b\u0439", "\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f", "\u043e\u043f\u0438\u0441\u0430\u0442\u044c", "\u043e\u043f\u043b\u0430\u0442\u0430", "\u043e\u043f\u043e\u0440\u0430", "\u043e\u043f\u043f\u043e\u043d\u0435\u043d\u0442", "\u043e\u043f\u0440\u043e\u0441", "\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u043c", "\u043e\u043f\u0443\u0441\u043a\u0430\u0442\u044c", "\u043e\u043f\u044b\u0442", "\u043e\u0440\u0430\u0442\u044c", "\u043e\u0440\u0431\u0438\u0442\u0430", "\u043e\u0440\u0433\u0430\u043d", "\u043e\u0440\u0434\u0435\u043d", "\u043e\u0440\u0435\u043b", "\u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440", "\u043e\u0440\u043d\u0430\u043c\u0435\u043d\u0442", "\u043e\u0440\u0443\u0436\u0438\u0435", "\u043e\u0441\u0430\u0434\u043e\u043a", "\u043e\u0441\u0432\u0435\u0449\u0430\u0442\u044c", "\u043e\u0441\u0435\u043d\u044c", "\u043e\u0441\u0438\u043d\u0430", "\u043e\u0441\u043a\u043e\u043b\u043e\u043a", "\u043e\u0441\u043c\u043e\u0442\u0440", "\u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439", "\u043e\u0441\u043e\u0431\u044b\u0439", "\u043e\u0441\u0443\u0436\u0434\u0430\u0442\u044c", "\u043e\u0442\u0431\u043e\u0440", "\u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c", "\u043e\u0442\u0434\u0430\u0442\u044c", "\u043e\u0442\u0435\u0446", "\u043e\u0442\u0437\u044b\u0432", "\u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0435", "\u043e\u0442\u043c\u0435\u0447\u0430\u0442\u044c", "\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u044c", "\u043e\u0442\u043f\u0443\u0441\u043a", "\u043e\u0442\u0440\u0430\u0441\u043b\u044c", "\u043e\u0442\u0441\u0442\u0430\u0432\u043a\u0430", "\u043e\u0442\u0442\u0435\u043d\u043e\u043a", "\u043e\u0442\u0445\u043e\u0434\u0438\u0442\u044c", "\u043e\u0442\u0447\u0435\u0442", "\u043e\u0442\u044a\u0435\u0437\u0434", "\u043e\u0444\u0438\u0446\u0435\u0440", "\u043e\u0445\u0430\u043f\u043a\u0430", "\u043e\u0445\u043e\u0442\u0430", "\u043e\u0445\u0440\u0430\u043d\u0430", "\u043e\u0446\u0435\u043d\u043a\u0430", "\u043e\u0447\u0430\u0433", "\u043e\u0447\u0435\u0440\u0435\u0434\u044c", "\u043e\u0447\u0438\u0449\u0430\u0442\u044c", "\u043e\u0447\u043a\u0438", "\u043e\u0448\u0435\u0439\u043d\u0438\u043a", "\u043e\u0448\u0438\u0431\u043a\u0430", "\u043e\u0449\u0443\u0449\u0435\u043d\u0438\u0435", "\u043f\u0430\u0432\u0438\u043b\u044c\u043e\u043d", "\u043f\u0430\u0434\u0430\u0442\u044c", "\u043f\u0430\u0435\u043a", "\u043f\u0430\u043a\u0435\u0442", "\u043f\u0430\u043b\u0435\u0446", "\u043f\u0430\u043c\u044f\u0442\u044c", "\u043f\u0430\u043d\u0435\u043b\u044c", "\u043f\u0430\u043f\u043a\u0430", "\u043f\u0430\u0440\u0442\u0438\u044f", "\u043f\u0430\u0441\u043f\u043e\u0440\u0442", "\u043f\u0430\u0442\u0440\u043e\u043d", "\u043f\u0430\u0443\u0437\u0430", "\u043f\u0430\u0444\u043e\u0441", "\u043f\u0430\u0445\u043d\u0443\u0442\u044c", "\u043f\u0430\u0446\u0438\u0435\u043d\u0442", "\u043f\u0430\u0447\u043a\u0430", "\u043f\u0430\u0448\u043d\u044f", "\u043f\u0435\u0432\u0435\u0446", "\u043f\u0435\u0434\u0430\u0433\u043e\u0433", "\u043f\u0435\u0439\u0437\u0430\u0436", "\u043f\u0435\u043b\u044c\u043c\u0435\u043d\u044c", "\u043f\u0435\u043d\u0441\u0438\u044f", "\u043f\u0435\u043f\u0435\u043b", "\u043f\u0435\u0440\u0438\u043e\u0434", "\u043f\u0435\u0441\u043d\u044f", "\u043f\u0435\u0442\u043b\u044f", "\u043f\u0435\u0445\u043e\u0442\u0430", "\u043f\u0435\u0447\u0430\u0442\u044c", "\u043f\u0435\u0448\u0435\u0445\u043e\u0434", "\u043f\u0435\u0449\u0435\u0440\u0430", "\u043f\u0438\u0430\u043d\u0438\u0441\u0442", "\u043f\u0438\u0432\u043e", "\u043f\u0438\u0434\u0436\u0430\u043a", "\u043f\u0438\u043a\u043e\u0432\u044b\u0439", "\u043f\u0438\u043b\u043e\u0442", "\u043f\u0438\u043e\u043d\u0435\u0440", "\u043f\u0438\u0440\u043e\u0433", "\u043f\u0438\u0441\u0430\u0442\u044c", "\u043f\u0438\u0442\u044c", "\u043f\u0438\u0446\u0446\u0430", "\u043f\u0438\u0448\u0443\u0449\u0438\u0439", "\u043f\u0438\u0449\u0430", "\u043f\u043b\u0430\u043d", "\u043f\u043b\u0435\u0447\u043e", "\u043f\u043b\u0438\u0442\u0430", "\u043f\u043b\u043e\u0445\u043e\u0439", "\u043f\u043b\u044b\u0442\u044c", "\u043f\u043b\u044e\u0441", "\u043f\u043b\u044f\u0436", "\u043f\u043e\u0431\u0435\u0434\u0430", "\u043f\u043e\u0432\u043e\u0434", "\u043f\u043e\u0433\u043e\u0434\u0430", "\u043f\u043e\u0434\u0443\u043c\u0430\u0442\u044c", "\u043f\u043e\u0435\u0445\u0430\u0442\u044c", "\u043f\u043e\u0436\u0438\u043c\u0430\u0442\u044c", "\u043f\u043e\u0437\u0438\u0446\u0438\u044f", "\u043f\u043e\u0438\u0441\u043a", "\u043f\u043e\u043a\u043e\u0439", "\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c", "\u043f\u043e\u043c\u043d\u0438\u0442\u044c", "\u043f\u043e\u043d\u0438", "\u043f\u043e\u043e\u0449\u0440\u044f\u0442\u044c", "\u043f\u043e\u043f\u0430\u0434\u0430\u0442\u044c", "\u043f\u043e\u0440\u044f\u0434\u043e\u043a", "\u043f\u043e\u0441\u0442", "\u043f\u043e\u0442\u043e\u043a", "\u043f\u043e\u0445\u043e\u0436\u0438\u0439", "\u043f\u043e\u0446\u0435\u043b\u0443\u0439", "\u043f\u043e\u0447\u0432\u0430", "\u043f\u043e\u0449\u0435\u0447\u0438\u043d\u0430", "\u043f\u043e\u044d\u0442", "\u043f\u043e\u044f\u0441\u043d\u0438\u0442\u044c", "\u043f\u0440\u0430\u0432\u043e", "\u043f\u0440\u0435\u0434\u043c\u0435\u0442", "\u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430", "\u043f\u0440\u0443\u0434", "\u043f\u0440\u044b\u0433\u0430\u0442\u044c", "\u043f\u0440\u044f\u043c\u043e\u0439", "\u043f\u0441\u0438\u0445\u043e\u043b\u043e\u0433", "\u043f\u0442\u0438\u0446\u0430", "\u043f\u0443\u0431\u043b\u0438\u043a\u0430", "\u043f\u0443\u0433\u0430\u0442\u044c", "\u043f\u0443\u0434\u0440\u0430", "\u043f\u0443\u0437\u044b\u0440\u044c", "\u043f\u0443\u043b\u044f", "\u043f\u0443\u043d\u043a\u0442", "\u043f\u0443\u0440\u0433\u0430", "\u043f\u0443\u0441\u0442\u043e\u0439", "\u043f\u0443\u0442\u044c", "\u043f\u0443\u0445\u043b\u044b\u0439", "\u043f\u0443\u0447\u043e\u043a", "\u043f\u0443\u0448\u0438\u0441\u0442\u044b\u0439", "\u043f\u0447\u0435\u043b\u0430", "\u043f\u0448\u0435\u043d\u0438\u0446\u0430", "\u043f\u044b\u043b\u044c", "\u043f\u044b\u0442\u043a\u0430", "\u043f\u044b\u0445\u0442\u0435\u0442\u044c", "\u043f\u044b\u0448\u043d\u044b\u0439", "\u043f\u044c\u0435\u0441\u0430", "\u043f\u044c\u044f\u043d\u044b\u0439", "\u043f\u044f\u0442\u043d\u043e", "\u0440\u0430\u0431\u043e\u0442\u0430", "\u0440\u0430\u0432\u043d\u044b\u0439", "\u0440\u0430\u0434\u043e\u0441\u0442\u044c", "\u0440\u0430\u0437\u0432\u0438\u0442\u0438\u0435", "\u0440\u0430\u0439\u043e\u043d", "\u0440\u0430\u043a\u0435\u0442\u0430", "\u0440\u0430\u043c\u043a\u0430", "\u0440\u0430\u043d\u043d\u0438\u0439", "\u0440\u0430\u043f\u043e\u0440\u0442", "\u0440\u0430\u0441\u0441\u043a\u0430\u0437", "\u0440\u0430\u0443\u043d\u0434", "\u0440\u0430\u0446\u0438\u044f", "\u0440\u0432\u0430\u0442\u044c", "\u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0439", "\u0440\u0435\u0431\u0435\u043d\u043e\u043a", "\u0440\u0435\u0432\u0435\u0442\u044c", "\u0440\u0435\u0433\u0438\u043e\u043d", "\u0440\u0435\u0434\u0430\u043a\u0446\u0438\u044f", "\u0440\u0435\u0435\u0441\u0442\u0440", "\u0440\u0435\u0436\u0438\u043c", "\u0440\u0435\u0437\u043a\u0438\u0439", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433", "\u0440\u0435\u043a\u0430", "\u0440\u0435\u043b\u0438\u0433\u0438\u044f", "\u0440\u0435\u043c\u043e\u043d\u0442", "\u0440\u0435\u043d\u0442\u0430", "\u0440\u0435\u043f\u043b\u0438\u043a\u0430", "\u0440\u0435\u0441\u0443\u0440\u0441", "\u0440\u0435\u0444\u043e\u0440\u043c\u0430", "\u0440\u0435\u0446\u0435\u043f\u0442", "\u0440\u0435\u0447\u044c", "\u0440\u0435\u0448\u0435\u043d\u0438\u0435", "\u0440\u0436\u0430\u0432\u044b\u0439", "\u0440\u0438\u0441\u0443\u043d\u043e\u043a", "\u0440\u0438\u0442\u043c", "\u0440\u0438\u0444\u043c\u0430", "\u0440\u043e\u0431\u043a\u0438\u0439", "\u0440\u043e\u0432\u043d\u044b\u0439", "\u0440\u043e\u0433\u0430\u0442\u044b\u0439", "\u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u0435", "\u0440\u043e\u0437\u043e\u0432\u044b\u0439", "\u0440\u043e\u043a\u043e\u0432\u043e\u0439", "\u0440\u043e\u043b\u044c", "\u0440\u043e\u043c\u0430\u043d", "\u0440\u043e\u043d\u044f\u0442\u044c", "\u0440\u043e\u0441\u0442", "\u0440\u043e\u0442\u0430", "\u0440\u043e\u0449\u0430", "\u0440\u043e\u044f\u043b\u044c", "\u0440\u0443\u0431\u043b\u044c", "\u0440\u0443\u0433\u0430\u0442\u044c", "\u0440\u0443\u0434\u0430", "\u0440\u0443\u0436\u044c\u0435", "\u0440\u0443\u0438\u043d\u044b", "\u0440\u0443\u043a\u0430", "\u0440\u0443\u043b\u044c", "\u0440\u0443\u043c\u044f\u043d\u044b\u0439", "\u0440\u0443\u0441\u0441\u043a\u0438\u0439", "\u0440\u0443\u0447\u043a\u0430", "\u0440\u044b\u0431\u0430", "\u0440\u044b\u0432\u043e\u043a", "\u0440\u044b\u0434\u0430\u0442\u044c", "\u0440\u044b\u0436\u0438\u0439", "\u0440\u044b\u043d\u043e\u043a", "\u0440\u044b\u0441\u044c", "\u0440\u044b\u0442\u044c", "\u0440\u044b\u0445\u043b\u044b\u0439", "\u0440\u044b\u0446\u0430\u0440\u044c", "\u0440\u044b\u0447\u0430\u0433", "\u0440\u044e\u043a\u0437\u0430\u043a", "\u0440\u044e\u043c\u043a\u0430", "\u0440\u044f\u0431\u043e\u0439", "\u0440\u044f\u0434\u043e\u0432\u043e\u0439", "\u0441\u0430\u0431\u043b\u044f", "\u0441\u0430\u0434\u043e\u0432\u044b\u0439", "\u0441\u0430\u0436\u0430\u0442\u044c", "\u0441\u0430\u043b\u043e\u043d", "\u0441\u0430\u043c\u043e\u043b\u0435\u0442", "\u0441\u0430\u043d\u0438", "\u0441\u0430\u043f\u043e\u0433", "\u0441\u0430\u0440\u0430\u0439", "\u0441\u0430\u0442\u0438\u0440\u0430", "\u0441\u0430\u0443\u043d\u0430", "\u0441\u0430\u0445\u0430\u0440", "\u0441\u0431\u0435\u0433\u0430\u0442\u044c", "\u0441\u0431\u0438\u0432\u0430\u0442\u044c", "\u0441\u0431\u043e\u0440", "\u0441\u0431\u044b\u0442", "\u0441\u0432\u0430\u0434\u044c\u0431\u0430", "\u0441\u0432\u0435\u0442", "\u0441\u0432\u0438\u0434\u0430\u043d\u0438\u0435", "\u0441\u0432\u043e\u0431\u043e\u0434\u0430", "\u0441\u0432\u044f\u0437\u044c", "\u0441\u0433\u043e\u0440\u0430\u0442\u044c", "\u0441\u0434\u0432\u0438\u0433\u0430\u0442\u044c", "\u0441\u0435\u0430\u043d\u0441", "\u0441\u0435\u0432\u0435\u0440\u043d\u044b\u0439", "\u0441\u0435\u0433\u043c\u0435\u043d\u0442", "\u0441\u0435\u0434\u043e\u0439", "\u0441\u0435\u0437\u043e\u043d", "\u0441\u0435\u0439\u0444", "\u0441\u0435\u043a\u0443\u043d\u0434\u0430", "\u0441\u0435\u043b\u044c\u0441\u043a\u0438\u0439", "\u0441\u0435\u043c\u044c\u044f", "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c", "\u0441\u0435\u0440\u0434\u0446\u0435", "\u0441\u0435\u0442\u044c", "\u0441\u0435\u0447\u0435\u043d\u0438\u0435", "\u0441\u0435\u044f\u0442\u044c", "\u0441\u0438\u0433\u043d\u0430\u043b", "\u0441\u0438\u0434\u0435\u0442\u044c", "\u0441\u0438\u0437\u044b\u0439", "\u0441\u0438\u043b\u0430", "\u0441\u0438\u043c\u0432\u043e\u043b", "\u0441\u0438\u043d\u0438\u0439", "\u0441\u0438\u0440\u043e\u0442\u0430", "\u0441\u0438\u0441\u0442\u0435\u043c\u0430", "\u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f", "\u0441\u0438\u044f\u0442\u044c", "\u0441\u043a\u0430\u0437\u0430\u0442\u044c", "\u0441\u043a\u0432\u0430\u0436\u0438\u043d\u0430", "\u0441\u043a\u0435\u043b\u0435\u0442", "\u0441\u043a\u0438\u0434\u043a\u0430", "\u0441\u043a\u043b\u0430\u0434", "\u0441\u043a\u043e\u0440\u044b\u0439", "\u0441\u043a\u0440\u044b\u0432\u0430\u0442\u044c", "\u0441\u043a\u0443\u0447\u043d\u044b\u0439", "\u0441\u043b\u0430\u0432\u0430", "\u0441\u043b\u0435\u0437\u0430", "\u0441\u043b\u0438\u044f\u043d\u0438\u0435", "\u0441\u043b\u043e\u0432\u043e", "\u0441\u043b\u0443\u0447\u0430\u0439", "\u0441\u043b\u044b\u0448\u0430\u0442\u044c", "\u0441\u043b\u044e\u043d\u0430", "\u0441\u043c\u0435\u0445", "\u0441\u043c\u0438\u0440\u0435\u043d\u0438\u0435", "\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c", "\u0441\u043c\u0443\u0442\u043d\u044b\u0439", "\u0441\u043c\u044b\u0441\u043b", "\u0441\u043c\u044f\u0442\u0435\u043d\u0438\u0435", "\u0441\u043d\u0430\u0440\u044f\u0434", "\u0441\u043d\u0435\u0433", "\u0441\u043d\u0438\u0436\u0435\u043d\u0438\u0435", "\u0441\u043d\u043e\u0441\u0438\u0442\u044c", "\u0441\u043d\u044f\u0442\u044c", "\u0441\u043e\u0431\u044b\u0442\u0438\u0435", "\u0441\u043e\u0432\u0435\u0442", "\u0441\u043e\u0433\u043b\u0430\u0441\u0438\u0435", "\u0441\u043e\u0436\u0430\u043b\u0435\u0442\u044c", "\u0441\u043e\u0439\u0442\u0438", "\u0441\u043e\u043a\u043e\u043b", "\u0441\u043e\u043b\u043d\u0446\u0435", "\u0441\u043e\u043c\u043d\u0435\u043d\u0438\u0435", "\u0441\u043e\u043d\u043d\u044b\u0439", "\u0441\u043e\u043e\u0431\u0449\u0430\u0442\u044c", "\u0441\u043e\u043f\u0435\u0440\u043d\u0438\u043a", "\u0441\u043e\u0440\u0442", "\u0441\u043e\u0441\u0442\u0430\u0432", "\u0441\u043e\u0442\u043d\u044f", "\u0441\u043e\u0443\u0441", "\u0441\u043e\u0446\u0438\u043e\u043b\u043e\u0433", "\u0441\u043e\u0447\u0438\u043d\u044f\u0442\u044c", "\u0441\u043e\u044e\u0437", "\u0441\u043f\u0430\u0442\u044c", "\u0441\u043f\u0435\u0448\u0438\u0442\u044c", "\u0441\u043f\u0438\u043d\u0430", "\u0441\u043f\u043b\u043e\u0448\u043d\u043e\u0439", "\u0441\u043f\u043e\u0441\u043e\u0431", "\u0441\u043f\u0443\u0442\u043d\u0438\u043a", "\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u043e", "\u0441\u0440\u043e\u043a", "\u0441\u0440\u044b\u0432\u0430\u0442\u044c", "\u0441\u0442\u0430\u0442\u044c", "\u0441\u0442\u0432\u043e\u043b", "\u0441\u0442\u0435\u043d\u0430", "\u0441\u0442\u0438\u0445\u0438", "\u0441\u0442\u043e\u0440\u043e\u043d\u0430", "\u0441\u0442\u0440\u0430\u043d\u0430", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442", "\u0441\u0442\u044b\u0434", "\u0441\u0443\u0431\u044a\u0435\u043a\u0442", "\u0441\u0443\u0432\u0435\u043d\u0438\u0440", "\u0441\u0443\u0433\u0440\u043e\u0431", "\u0441\u0443\u0434\u044c\u0431\u0430", "\u0441\u0443\u0435\u0442\u0430", "\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435", "\u0441\u0443\u043a\u043d\u043e", "\u0441\u0443\u043b\u0438\u0442\u044c", "\u0441\u0443\u043c\u043c\u0430", "\u0441\u0443\u043d\u0443\u0442\u044c", "\u0441\u0443\u043f\u0440\u0443\u0433", "\u0441\u0443\u0440\u043e\u0432\u044b\u0439", "\u0441\u0443\u0441\u0442\u0430\u0432", "\u0441\u0443\u0442\u044c", "\u0441\u0443\u0445\u043e\u0439", "\u0441\u0443\u0448\u0430", "\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e", "\u0441\u0444\u0435\u0440\u0430", "\u0441\u0445\u0435\u043c\u0430", "\u0441\u0446\u0435\u043d\u0430", "\u0441\u0447\u0430\u0441\u0442\u044c\u0435", "\u0441\u0447\u0435\u0442", "\u0441\u0447\u0438\u0442\u0430\u0442\u044c", "\u0441\u0448\u0438\u0432\u0430\u0442\u044c", "\u0441\u044a\u0435\u0437\u0434", "\u0441\u044b\u043d\u043e\u043a", "\u0441\u044b\u043f\u0430\u0442\u044c", "\u0441\u044b\u0440\u044c\u0435", "\u0441\u044b\u0442\u044b\u0439", "\u0441\u044b\u0449\u0438\u043a", "\u0441\u044e\u0436\u0435\u0442", "\u0441\u044e\u0440\u043f\u0440\u0438\u0437", "\u0442\u0430\u0431\u043b\u0438\u0446\u0430", "\u0442\u0430\u0435\u0436\u043d\u044b\u0439", "\u0442\u0430\u0438\u043d\u0441\u0442\u0432\u043e", "\u0442\u0430\u0439\u043d\u0430", "\u0442\u0430\u043a\u0441\u0438", "\u0442\u0430\u043b\u0430\u043d\u0442", "\u0442\u0430\u043c\u043e\u0436\u043d\u044f", "\u0442\u0430\u043d\u0435\u0446", "\u0442\u0430\u0440\u0435\u043b\u043a\u0430", "\u0442\u0430\u0441\u043a\u0430\u0442\u044c", "\u0442\u0430\u0445\u0442\u0430", "\u0442\u0430\u0447\u043a\u0430", "\u0442\u0430\u044f\u0442\u044c", "\u0442\u0432\u0430\u0440\u044c", "\u0442\u0432\u0435\u0440\u0434\u044b\u0439", "\u0442\u0432\u043e\u0440\u0438\u0442\u044c", "\u0442\u0435\u0430\u0442\u0440", "\u0442\u0435\u0437\u0438\u0441", "\u0442\u0435\u043a\u0441\u0442", "\u0442\u0435\u043b\u043e", "\u0442\u0435\u043c\u0430", "\u0442\u0435\u043d\u044c", "\u0442\u0435\u043e\u0440\u0438\u044f", "\u0442\u0435\u043f\u043b\u044b\u0439", "\u0442\u0435\u0440\u044f\u0442\u044c", "\u0442\u0435\u0441\u043d\u044b\u0439", "\u0442\u0435\u0442\u044f", "\u0442\u0435\u0445\u043d\u0438\u043a\u0430", "\u0442\u0435\u0447\u0435\u043d\u0438\u0435", "\u0442\u0438\u0433\u0440", "\u0442\u0438\u043f\u0438\u0447\u043d\u044b\u0439", "\u0442\u0438\u0440\u0430\u0436", "\u0442\u0438\u0442\u0443\u043b", "\u0442\u0438\u0445\u0438\u0439", "\u0442\u0438\u0448\u0438\u043d\u0430", "\u0442\u043a\u0430\u043d\u044c", "\u0442\u043e\u0432\u0430\u0440\u0438\u0449", "\u0442\u043e\u043b\u043f\u0430", "\u0442\u043e\u043d\u043a\u0438\u0439", "\u0442\u043e\u043f\u043b\u0438\u0432\u043e", "\u0442\u043e\u0440\u0433\u043e\u0432\u043b\u044f", "\u0442\u043e\u0441\u043a\u0430", "\u0442\u043e\u0447\u043a\u0430", "\u0442\u043e\u0449\u0438\u0439", "\u0442\u0440\u0430\u0434\u0438\u0446\u0438\u044f", "\u0442\u0440\u0435\u0432\u043e\u0433\u0430", "\u0442\u0440\u0438\u0431\u0443\u043d\u0430", "\u0442\u0440\u043e\u0433\u0430\u0442\u044c", "\u0442\u0440\u0443\u0434", "\u0442\u0440\u044e\u043a", "\u0442\u0440\u044f\u043f\u043a\u0430", "\u0442\u0443\u0430\u043b\u0435\u0442", "\u0442\u0443\u0433\u043e\u0439", "\u0442\u0443\u043b\u043e\u0432\u0438\u0449\u0435", "\u0442\u0443\u043c\u0430\u043d", "\u0442\u0443\u043d\u0434\u0440\u0430", "\u0442\u0443\u043f\u043e\u0439", "\u0442\u0443\u0440\u043d\u0438\u0440", "\u0442\u0443\u0441\u043a\u043b\u044b\u0439", "\u0442\u0443\u0444\u043b\u044f", "\u0442\u0443\u0447\u0430", "\u0442\u0443\u0448\u0430", "\u0442\u044b\u043a\u0430\u0442\u044c", "\u0442\u044b\u0441\u044f\u0447\u0430", "\u0442\u044c\u043c\u0430", "\u0442\u044e\u043b\u044c\u043f\u0430\u043d", "\u0442\u044e\u0440\u044c\u043c\u0430", "\u0442\u044f\u0433\u0430", "\u0442\u044f\u0436\u0435\u043b\u044b\u0439", "\u0442\u044f\u043d\u0443\u0442\u044c", "\u0443\u0431\u0435\u0436\u0434\u0430\u0442\u044c", "\u0443\u0431\u0438\u0440\u0430\u0442\u044c", "\u0443\u0431\u043e\u0433\u0438\u0439", "\u0443\u0431\u044b\u0442\u043e\u043a", "\u0443\u0432\u0430\u0436\u0435\u043d\u0438\u0435", "\u0443\u0432\u0435\u0440\u044f\u0442\u044c", "\u0443\u0432\u043b\u0435\u043a\u0430\u0442\u044c", "\u0443\u0433\u043d\u0430\u0442\u044c", "\u0443\u0433\u043e\u043b", "\u0443\u0433\u0440\u043e\u0437\u0430", "\u0443\u0434\u0430\u0440", "\u0443\u0434\u0438\u0432\u043b\u044f\u0442\u044c", "\u0443\u0434\u043e\u0431\u043d\u044b\u0439", "\u0443\u0435\u0437\u0434", "\u0443\u0436\u0430\u0441", "\u0443\u0436\u0438\u043d", "\u0443\u0437\u0435\u043b", "\u0443\u0437\u043a\u0438\u0439", "\u0443\u0437\u043d\u0430\u0432\u0430\u0442\u044c", "\u0443\u0437\u043e\u0440", "\u0443\u0439\u043c\u0430", "\u0443\u043a\u043b\u043e\u043d", "\u0443\u043a\u043e\u043b", "\u0443\u043a\u0441\u0443\u0441", "\u0443\u043b\u0435\u0442\u0430\u0442\u044c", "\u0443\u043b\u0438\u0446\u0430", "\u0443\u043b\u0443\u0447\u0448\u0430\u0442\u044c", "\u0443\u043b\u044b\u0431\u043a\u0430", "\u0443\u043c\u0435\u0442\u044c", "\u0443\u043c\u0438\u043b\u0435\u043d\u0438\u0435", "\u0443\u043c\u043d\u044b\u0439", "\u0443\u043c\u043e\u043b\u044f\u0442\u044c", "\u0443\u043c\u044b\u0441\u0435\u043b", "\u0443\u043d\u0438\u0436\u0430\u0442\u044c", "\u0443\u043d\u043e\u0441\u0438\u0442\u044c", "\u0443\u043d\u044b\u043d\u0438\u0435", "\u0443\u043f\u0430\u0441\u0442\u044c", "\u0443\u043f\u043b\u0430\u0442\u0430", "\u0443\u043f\u043e\u0440", "\u0443\u043f\u0440\u0435\u043a\u0430\u0442\u044c", "\u0443\u043f\u0443\u0441\u043a\u0430\u0442\u044c", "\u0443\u0440\u0430\u043d", "\u0443\u0440\u043d\u0430", "\u0443\u0440\u043e\u0432\u0435\u043d\u044c", "\u0443\u0441\u0430\u0434\u044c\u0431\u0430", "\u0443\u0441\u0435\u0440\u0434\u0438\u0435", "\u0443\u0441\u0438\u043b\u0438\u0435", "\u0443\u0441\u043a\u043e\u0440\u044f\u0442\u044c", "\u0443\u0441\u043b\u043e\u0432\u0438\u0435", "\u0443\u0441\u043c\u0435\u0448\u043a\u0430", "\u0443\u0441\u043d\u0443\u0442\u044c", "\u0443\u0441\u043f\u0435\u0442\u044c", "\u0443\u0441\u044b\u043f\u0430\u0442\u044c", "\u0443\u0442\u0435\u0448\u0430\u0442\u044c", "\u0443\u0442\u043a\u0430", "\u0443\u0442\u043e\u0447\u043d\u044f\u0442\u044c", "\u0443\u0442\u0440\u043e", "\u0443\u0442\u044e\u0433", "\u0443\u0445\u043e\u0434\u0438\u0442\u044c", "\u0443\u0446\u0435\u043b\u0435\u0442\u044c", "\u0443\u0447\u0430\u0441\u0442\u0438\u0435", "\u0443\u0447\u0435\u043d\u044b\u0439", "\u0443\u0447\u0438\u0442\u0435\u043b\u044c", "\u0443\u0448\u043a\u043e", "\u0443\u0449\u0435\u0440\u0431", "\u0443\u044e\u0442\u043d\u044b\u0439", "\u0443\u044f\u0441\u043d\u044f\u0442\u044c", "\u0444\u0430\u0431\u0440\u0438\u043a\u0430", "\u0444\u0430\u0432\u043e\u0440\u0438\u0442", "\u0444\u0430\u0437\u0430", "\u0444\u0430\u0439\u043b", "\u0444\u0430\u043a\u0442", "\u0444\u0430\u043c\u0438\u043b\u0438\u044f", "\u0444\u0430\u043d\u0442\u0430\u0437\u0438\u044f", "\u0444\u0430\u0440\u0430", "\u0444\u0430\u0441\u0430\u0434", "\u0444\u0435\u0432\u0440\u0430\u043b\u044c", "\u0444\u0435\u043b\u044c\u0434\u0448\u0435\u0440", "\u0444\u0435\u043d\u043e\u043c\u0435\u043d", "\u0444\u0435\u0440\u043c\u0430", "\u0444\u0438\u0433\u0443\u0440\u0430", "\u0444\u0438\u0437\u0438\u043a\u0430", "\u0444\u0438\u043b\u044c\u043c", "\u0444\u0438\u043d\u0430\u043b", "\u0444\u0438\u0440\u043c\u0430", "\u0444\u0438\u0448\u043a\u0430", "\u0444\u043b\u0430\u0433", "\u0444\u043b\u0435\u0439\u0442\u0430", "\u0444\u043b\u043e\u0442", "\u0444\u043e\u043a\u0443\u0441", "\u0444\u043e\u043b\u044c\u043a\u043b\u043e\u0440", "\u0444\u043e\u043d\u0434", "\u0444\u043e\u0440\u043c\u0430", "\u0444\u043e\u0442\u043e", "\u0444\u0440\u0430\u0437\u0430", "\u0444\u0440\u0435\u0441\u043a\u0430", "\u0444\u0440\u043e\u043d\u0442", "\u0444\u0440\u0443\u043a\u0442", "\u0444\u0443\u043d\u043a\u0446\u0438\u044f", "\u0444\u0443\u0440\u0430\u0436\u043a\u0430", "\u0444\u0443\u0442\u0431\u043e\u043b", "\u0444\u044b\u0440\u043a\u0430\u0442\u044c", "\u0445\u0430\u043b\u0430\u0442", "\u0445\u0430\u043c\u0441\u0442\u0432\u043e", "\u0445\u0430\u043e\u0441", "\u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440", "\u0445\u0430\u0442\u0430", "\u0445\u0432\u0430\u0442\u0430\u0442\u044c", "\u0445\u0432\u043e\u0441\u0442", "\u0445\u0438\u0436\u0438\u043d\u0430", "\u0445\u0438\u043b\u044b\u0439", "\u0445\u0438\u043c\u0438\u044f", "\u0445\u0438\u0440\u0443\u0440\u0433", "\u0445\u0438\u0442\u0440\u044b\u0439", "\u0445\u0438\u0449\u043d\u0438\u043a", "\u0445\u043b\u0430\u043c", "\u0445\u043b\u0435\u0431", "\u0445\u043b\u043e\u043f\u0430\u0442\u044c", "\u0445\u043c\u0443\u0440\u044b\u0439", "\u0445\u043e\u0434\u0438\u0442\u044c", "\u0445\u043e\u0437\u044f\u0438\u043d", "\u0445\u043e\u043a\u043a\u0435\u0439", "\u0445\u043e\u043b\u043e\u0434\u043d\u044b\u0439", "\u0445\u043e\u0440\u043e\u0448\u0438\u0439", "\u0445\u043e\u0442\u0435\u0442\u044c", "\u0445\u043e\u0445\u043e\u0442\u0430\u0442\u044c", "\u0445\u0440\u0430\u043c", "\u0445\u0440\u0435\u043d", "\u0445\u0440\u0438\u043f\u043b\u044b\u0439", "\u0445\u0440\u043e\u043d\u0438\u043a\u0430", "\u0445\u0440\u0443\u043f\u043a\u0438\u0439", "\u0445\u0443\u0434\u043e\u0436\u043d\u0438\u043a", "\u0445\u0443\u043b\u0438\u0433\u0430\u043d", "\u0445\u0443\u0442\u043e\u0440", "\u0446\u0430\u0440\u044c", "\u0446\u0432\u0435\u0442", "\u0446\u0435\u043b\u044c", "\u0446\u0435\u043c\u0435\u043d\u0442", "\u0446\u0435\u043d\u0442\u0440", "\u0446\u0435\u043f\u044c", "\u0446\u0435\u0440\u043a\u043e\u0432\u044c", "\u0446\u0438\u043a\u043b", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440", "\u0446\u0438\u043d\u0438\u0447\u043d\u044b\u0439", "\u0446\u0438\u0440\u043a", "\u0446\u0438\u0441\u0442\u0435\u0440\u043d\u0430", "\u0446\u0438\u0442\u0430\u0442\u0430", "\u0446\u0438\u0444\u0440\u0430", "\u0446\u044b\u043f\u043b\u0435\u043d\u043e\u043a", "\u0447\u0430\u0434\u043e", "\u0447\u0430\u0439\u043d\u0438\u043a", "\u0447\u0430\u0441\u0442\u044c", "\u0447\u0430\u0448\u043a\u0430", "\u0447\u0435\u043b\u043e\u0432\u0435\u043a", "\u0447\u0435\u043c\u043e\u0434\u0430\u043d", "\u0447\u0435\u043f\u0443\u0445\u0430", "\u0447\u0435\u0440\u043d\u044b\u0439", "\u0447\u0435\u0441\u0442\u044c", "\u0447\u0435\u0442\u043a\u0438\u0439", "\u0447\u0435\u0445\u043e\u043b", "\u0447\u0438\u043d\u043e\u0432\u043d\u0438\u043a", "\u0447\u0438\u0441\u043b\u043e", "\u0447\u0438\u0442\u0430\u0442\u044c", "\u0447\u043b\u0435\u043d\u0441\u0442\u0432\u043e", "\u0447\u0440\u0435\u0432\u0430\u0442\u044b\u0439", "\u0447\u0442\u0435\u043d\u0438\u0435", "\u0447\u0443\u0432\u0441\u0442\u0432\u043e", "\u0447\u0443\u0433\u0443\u043d\u043d\u044b\u0439", "\u0447\u0443\u0434\u043e", "\u0447\u0443\u0436\u043e\u0439", "\u0447\u0443\u043a\u0447\u0430", "\u0447\u0443\u043b\u043e\u043a", "\u0447\u0443\u043c\u0430", "\u0447\u0443\u0442\u043a\u0438\u0439", "\u0447\u0443\u0447\u0435\u043b\u043e", "\u0447\u0443\u0448\u044c", "\u0448\u0430\u0431\u043b\u043e\u043d", "\u0448\u0430\u0433\u0430\u0442\u044c", "\u0448\u0430\u0439\u043a\u0430", "\u0448\u0430\u043a\u0430\u043b", "\u0448\u0430\u043b\u0430\u0448", "\u0448\u0430\u043c\u043f\u0443\u043d\u044c", "\u0448\u0430\u043d\u0441", "\u0448\u0430\u043f\u043a\u0430", "\u0448\u0430\u0440\u0438\u043a", "\u0448\u0430\u0441\u0441\u0438", "\u0448\u0430\u0442\u0435\u0440", "\u0448\u0430\u0445\u0442\u0430", "\u0448\u0430\u0448\u043b\u044b\u043a", "\u0448\u0432\u0435\u0439\u043d\u044b\u0439", "\u0448\u0432\u044b\u0440\u044f\u0442\u044c", "\u0448\u0435\u0432\u0435\u043b\u0438\u0442\u044c", "\u0448\u0435\u0434\u0435\u0432\u0440", "\u0448\u0435\u0439\u043a\u0430", "\u0448\u0435\u043b\u043a\u043e\u0432\u044b\u0439", "\u0448\u0435\u043f\u0442\u0430\u0442\u044c", "\u0448\u0435\u0440\u0441\u0442\u044c", "\u0448\u0435\u0441\u0442\u0435\u0440\u043a\u0430", "\u0448\u0438\u043a\u0430\u0440\u043d\u044b\u0439", "\u0448\u0438\u043d\u0435\u043b\u044c", "\u0448\u0438\u043f\u0435\u0442\u044c", "\u0448\u0438\u0440\u043e\u043a\u0438\u0439", "\u0448\u0438\u0442\u044c", "\u0448\u0438\u0448\u043a\u0430", "\u0448\u043a\u0430\u0444", "\u0448\u043a\u043e\u043b\u0430", "\u0448\u043a\u0443\u0440\u0430", "\u0448\u043b\u0430\u043d\u0433", "\u0448\u043b\u0435\u043c", "\u0448\u043b\u044e\u043f\u043a\u0430", "\u0448\u043b\u044f\u043f\u0430", "\u0448\u043d\u0443\u0440", "\u0448\u043e\u043a\u043e\u043b\u0430\u0434", "\u0448\u043e\u0440\u043e\u0445", "\u0448\u043e\u0441\u0441\u0435", "\u0448\u043e\u0444\u0435\u0440", "\u0448\u043f\u0430\u0433\u0430", "\u0448\u043f\u0438\u043e\u043d", "\u0448\u043f\u0440\u0438\u0446", "\u0448\u0440\u0430\u043c", "\u0448\u0440\u0438\u0444\u0442", "\u0448\u0442\u0430\u0431", "\u0448\u0442\u043e\u0440\u0430", "\u0448\u0442\u0440\u0430\u0444", "\u0448\u0442\u0443\u043a\u0430", "\u0448\u0442\u044b\u043a", "\u0448\u0443\u0431\u0430", "\u0448\u0443\u043c\u0435\u0442\u044c", "\u0448\u0443\u0440\u0448\u0430\u0442\u044c", "\u0448\u0443\u0442\u043a\u0430", "\u0449\u0430\u0434\u0438\u0442\u044c", "\u0449\u0435\u0434\u0440\u044b\u0439", "\u0449\u0435\u043a\u0430", "\u0449\u0435\u043b\u044c", "\u0449\u0435\u043d\u043e\u043a", "\u0449\u0435\u043f\u043a\u0430", "\u0449\u0435\u0442\u043a\u0430", "\u0449\u0443\u043a\u0430", "\u044d\u0432\u043e\u043b\u044e\u0446\u0438\u044f", "\u044d\u0433\u043e\u0438\u0437\u043c", "\u044d\u043a\u0437\u0430\u043c\u0435\u043d", "\u044d\u043a\u0438\u043f\u0430\u0436", "\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u044f", "\u044d\u043a\u0440\u0430\u043d", "\u044d\u043a\u0441\u043f\u0435\u0440\u0442", "\u044d\u043b\u0435\u043c\u0435\u043d\u0442", "\u044d\u043b\u0438\u0442\u0430", "\u044d\u043c\u0431\u043b\u0435\u043c\u0430", "\u044d\u043c\u0438\u0433\u0440\u0430\u043d\u0442", "\u044d\u043c\u043e\u0446\u0438\u044f", "\u044d\u043d\u0435\u0440\u0433\u0438\u044f", "\u044d\u043f\u0438\u0437\u043e\u0434", "\u044d\u043f\u043e\u0445\u0430", "\u044d\u0441\u043a\u0438\u0437", "\u044d\u0441\u0441\u0435", "\u044d\u0441\u0442\u0440\u0430\u0434\u0430", "\u044d\u0442\u0430\u043f", "\u044d\u0442\u0438\u043a\u0430", "\u044d\u0442\u044e\u0434", "\u044d\u0444\u0438\u0440", "\u044d\u0444\u0444\u0435\u043a\u0442", "\u044d\u0448\u0435\u043b\u043e\u043d", "\u044e\u0431\u0438\u043b\u0435\u0439", "\u044e\u0431\u043a\u0430", "\u044e\u0436\u043d\u044b\u0439", "\u044e\u043c\u043e\u0440", "\u044e\u043d\u043e\u0448\u0430", "\u044e\u0440\u0438\u0441\u0442", "\u044f\u0431\u043b\u043e\u043a\u043e", "\u044f\u0432\u043b\u0435\u043d\u0438\u0435", "\u044f\u0433\u043e\u0434\u0430", "\u044f\u0434\u0435\u0440\u043d\u044b\u0439", "\u044f\u0434\u043e\u0432\u0438\u0442\u044b\u0439", "\u044f\u0434\u0440\u043e", "\u044f\u0437\u0432\u0430", "\u044f\u0437\u044b\u043a", "\u044f\u0439\u0446\u043e", "\u044f\u043a\u043e\u0440\u044c", "\u044f\u043d\u0432\u0430\u0440\u044c", "\u044f\u043f\u043e\u043d\u0435\u0446", "\u044f\u0440\u043a\u0438\u0439", "\u044f\u0440\u043c\u0430\u0440\u043a\u0430", "\u044f\u0440\u043e\u0441\u0442\u044c", "\u044f\u0440\u0443\u0441", "\u044f\u0441\u043d\u044b\u0439", "\u044f\u0445\u0442\u0430", "\u044f\u0447\u0435\u0439\u043a\u0430", "\u044f\u0449\u0438\u043a"]), type$.JSArray_String);
    B.MoneroNetwork_wEo = new A.MoneroNetwork("Mainnet", B.CoinConf_ka6, 0);
    B.MoneroNetwork_NsV = new A.MoneroNetwork("Testnet", B.CoinConf_o0y, 1);
    B.MoneroNetwork_A9U = new A.MoneroNetwork("Stagenet", B.CoinConf_uMa, 2);
    B.List_qZ9 = A._setArrayType(makeConstList([B.MoneroNetwork_wEo, B.MoneroNetwork_NsV, B.MoneroNetwork_A9U]), A.findType("JSArray<MoneroNetwork>"));
    B.List_ql0 = A._setArrayType(makeConstList(["abbinare", "abbonato", "abisso", "abitare", "abominio", "accadere", "accesso", "acciaio", "accordo", "accumulo", "acido", "acqua", "acrobata", "acustico", "adattare", "addetto", "addio", "addome", "adeguato", "aderire", "adorare", "adottare", "adozione", "adulto", "aereo", "aerobica", "affare", "affetto", "affidare", "affogato", "affronto", "africano", "afrodite", "agenzia", "aggancio", "aggeggio", "aggiunta", "agio", "agire", "agitare", "aglio", "agnello", "agosto", "aiutare", "albero", "albo", "alce", "alchimia", "alcool", "alfabeto", "algebra", "alimento", "allarme", "alleanza", "allievo", "alloggio", "alluce", "alpi", "alterare", "altro", "aluminio", "amante", "amarezza", "ambiente", "ambrosia", "america", "amico", "ammalare", "ammirare", "amnesia", "amnistia", "amore", "ampliare", "amputare", "analisi", "anamnesi", "ananas", "anarchia", "anatra", "anca", "ancorato", "andare", "androide", "aneddoto", "anello", "angelo", "angolino", "anguilla", "anidride", "anima", "annegare", "anno", "annuncio", "anomalia", "antenna", "anticipo", "aperto", "apostolo", "appalto", "appello", "appiglio", "applauso", "appoggio", "appurare", "aprile", "aquila", "arabo", "arachidi", "aragosta", "arancia", "arbitrio", "archivio", "arco", "argento", "argilla", "aria", "ariete", "arma", "armonia", "aroma", "arrivare", "arrosto", "arsenale", "arte", "artiglio", "asfalto", "asfissia", "asino", "asparagi", "aspirina", "assalire", "assegno", "assolto", "assurdo", "asta", "astratto", "atlante", "atletica", "atomo", "atropina", "attacco", "attesa", "attico", "atto", "attrarre", "auguri", "aula", "aumento", "aurora", "auspicio", "autista", "auto", "autunno", "avanzare", "avarizia", "avere", "aviatore", "avido", "avorio", "avvenire", "avviso", "avvocato", "azienda", "azione", "azzardo", "azzurro", "babbuino", "bacio", "badante", "baffi", "bagaglio", "bagliore", "bagno", "balcone", "balena", "ballare", "balordo", "balsamo", "bambola", "bancomat", "banda", "barato", "barba", "barista", "barriera", "basette", "basilico", "bassista", "bastare", "battello", "bavaglio", "beccare", "beduino", "bellezza", "bene", "benzina", "berretto", "bestia", "bevitore", "bianco", "bibbia", "biberon", "bibita", "bici", "bidone", "bilancia", "biliardo", "binario", "binocolo", "biologia", "biondina", "biopsia", "biossido", "birbante", "birra", "biscotto", "bisogno", "bistecca", "bivio", "blindare", "bloccare", "bocca", "bollire", "bombola", "bonifico", "borghese", "borsa", "bottino", "botulino", "braccio", "bradipo", "branco", "bravo", "bresaola", "bretelle", "brevetto", "briciola", "brigante", "brillare", "brindare", "brivido", "broccoli", "brontolo", "bruciare", "brufolo", "bucare", "buddista", "budino", "bufera", "buffo", "bugiardo", "buio", "buono", "burrone", "bussola", "bustina", "buttare", "cabernet", "cabina", "cacao", "cacciare", "cactus", "cadavere", "caffe", "calamari", "calcio", "caldaia", "calmare", "calunnia", "calvario", "calzone", "cambiare", "camera", "camion", "cammello", "campana", "canarino", "cancello", "candore", "cane", "canguro", "cannone", "canoa", "cantare", "canzone", "caos", "capanna", "capello", "capire", "capo", "capperi", "capra", "capsula", "caraffa", "carbone", "carciofo", "cardigan", "carenza", "caricare", "carota", "carrello", "carta", "casa", "cascare", "caserma", "cashmere", "casino", "cassetta", "castello", "catalogo", "catena", "catorcio", "cattivo", "causa", "cauzione", "cavallo", "caverna", "caviglia", "cavo", "cazzotto", "celibato", "cemento", "cenare", "centrale", "ceramica", "cercare", "ceretta", "cerniera", "certezza", "cervello", "cessione", "cestino", "cetriolo", "chiave", "chiedere", "chilo", "chimera", "chiodo", "chirurgo", "chitarra", "chiudere", "ciabatta", "ciao", "cibo", "ciccia", "cicerone", "ciclone", "cicogna", "cielo", "cifra", "cigno", "ciliegia", "cimitero", "cinema", "cinque", "cintura", "ciondolo", "ciotola", "cipolla", "cippato", "circuito", "cisterna", "citofono", "ciuccio", "civetta", "civico", "clausola", "cliente", "clima", "clinica", "cobra", "coccole", "cocktail", "cocomero", "codice", "coesione", "cogliere", "cognome", "colla", "colomba", "colpire", "coltello", "comando", "comitato", "commedia", "comodino", "compagna", "comune", "concerto", "condotto", "conforto", "congiura", "coniglio", "consegna", "conto", "convegno", "coperta", "copia", "coprire", "corazza", "corda", "corleone", "cornice", "corona", "corpo", "corrente", "corsa", "cortesia", "corvo", "coso", "costume", "cotone", "cottura", "cozza", "crampo", "cratere", "cravatta", "creare", "credere", "crema", "crescere", "crimine", "criterio", "croce", "crollare", "cronaca", "crostata", "croupier", "cubetto", "cucciolo", "cucina", "cultura", "cuoco", "cuore", "cupido", "cupola", "cura", "curva", "cuscino", "custode", "danzare", "data", "decennio", "decidere", "decollo", "dedicare", "dedurre", "definire", "delegare", "delfino", "delitto", "demone", "dentista", "denuncia", "deposito", "derivare", "deserto", "designer", "destino", "detonare", "dettagli", "diagnosi", "dialogo", "diamante", "diario", "diavolo", "dicembre", "difesa", "digerire", "digitare", "diluvio", "dinamica", "dipinto", "diploma", "diramare", "dire", "dirigere", "dirupo", "discesa", "disdetta", "disegno", "disporre", "dissenso", "distacco", "dito", "ditta", "diva", "divenire", "dividere", "divorare", "docente", "dolcetto", "dolore", "domatore", "domenica", "dominare", "donatore", "donna", "dorato", "dormire", "dorso", "dosaggio", "dottore", "dovere", "download", "dragone", "dramma", "dubbio", "dubitare", "duetto", "durata", "ebbrezza", "eccesso", "eccitare", "eclissi", "economia", "edera", "edificio", "editore", "edizione", "educare", "effetto", "egitto", "egiziano", "elastico", "elefante", "eleggere", "elemento", "elenco", "elezione", "elmetto", "elogio", "embrione", "emergere", "emettere", "eminenza", "emisfero", "emozione", "empatia", "energia", "enfasi", "enigma", "entrare", "enzima", "epidemia", "epilogo", "episodio", "epoca", "equivoco", "erba", "erede", "eroe", "erotico", "errore", "eruzione", "esaltare", "esame", "esaudire", "eseguire", "esempio", "esigere", "esistere", "esito", "esperto", "espresso", "essere", "estasi", "esterno", "estrarre", "eterno", "etica", "euforico", "europa", "evacuare", "evasione", "evento", "evidenza", "evitare", "evolvere", "fabbrica", "facciata", "fagiano", "fagotto", "falco", "fame", "famiglia", "fanale", "fango", "fantasia", "farfalla", "farmacia", "faro", "fase", "fastidio", "faticare", "fatto", "favola", "febbre", "femmina", "femore", "fenomeno", "fermata", "feromoni", "ferrari", "fessura", "festa", "fiaba", "fiamma", "fianco", "fiat", "fibbia", "fidare", "fieno", "figa", "figlio", "figura", "filetto", "filmato", "filosofo", "filtrare", "finanza", "finestra", "fingere", "finire", "finta", "finzione", "fiocco", "fioraio", "firewall", "firmare", "fisico", "fissare", "fittizio", "fiume", "flacone", "flagello", "flirtare", "flusso", "focaccia", "foglio", "fognario", "follia", "fonderia", "fontana", "forbici", "forcella", "foresta", "forgiare", "formare", "fornace", "foro", "fortuna", "forzare", "fosforo", "fotoni", "fracasso", "fragola", "frantumi", "fratello", "frazione", "freccia", "freddo", "frenare", "fresco", "friggere", "frittata", "frivolo", "frizione", "fronte", "frullato", "frumento", "frusta", "frutto", "fucile", "fuggire", "fulmine", "fumare", "funzione", "fuoco", "furbizia", "furgone", "furia", "furore", "fusibile", "fuso", "futuro", "gabbiano", "galassia", "gallina", "gamba", "gancio", "garanzia", "garofano", "gasolio", "gatto", "gazebo", "gazzetta", "gelato", "gemelli", "generare", "genitori", "gennaio", "geologia", "germania", "gestire", "gettare", "ghepardo", "ghiaccio", "giaccone", "giaguaro", "giallo", "giappone", "giardino", "gigante", "gioco", "gioiello", "giorno", "giovane", "giraffa", "giudizio", "giurare", "giusto", "globo", "gloria", "glucosio", "gnocca", "gocciola", "godere", "gomito", "gomma", "gonfiare", "gorilla", "governo", "gradire", "graffiti", "granchio", "grappolo", "grasso", "grattare", "gridare", "grissino", "grondaia", "grugnito", "gruppo", "guadagno", "guaio", "guancia", "guardare", "gufo", "guidare", "guscio", "gusto", "icona", "idea", "identico", "idolo", "idoneo", "idrante", "idrogeno", "igiene", "ignoto", "imbarco", "immagine", "immobile", "imparare", "impedire", "impianto", "importo", "impresa", "impulso", "incanto", "incendio", "incidere", "incontro", "incrocia", "incubo", "indagare", "indice", "indotto", "infanzia", "inferno", "infinito", "infranto", "ingerire", "inglese", "ingoiare", "ingresso", "iniziare", "innesco", "insalata", "inserire", "insicuro", "insonnia", "insulto", "interno", "introiti", "invasori", "inverno", "invito", "invocare", "ipnosi", "ipocrita", "ipotesi", "ironia", "irrigare", "iscritto", "isola", "ispirare", "isterico", "istinto", "istruire", "italiano", "jazz", "labbra", "labrador", "ladro", "lago", "lamento", "lampone", "lancetta", "lanterna", "lapide", "larva", "lasagne", "lasciare", "lastra", "latte", "laurea", "lavagna", "lavorare", "leccare", "legare", "leggere", "lenzuolo", "leone", "lepre", "letargo", "lettera", "levare", "levitare", "lezione", "liberare", "libidine", "libro", "licenza", "lievito", "limite", "lince", "lingua", "liquore", "lire", "listino", "litigare", "litro", "locale", "lottare", "lucciola", "lucidare", "luglio", "luna", "macchina", "madama", "madre", "maestro", "maggio", "magico", "maglione", "magnolia", "mago", "maialino", "maionese", "malattia", "male", "malloppo", "mancare", "mandorla", "mangiare", "manico", "manopola", "mansarda", "mantello", "manubrio", "manzo", "mappa", "mare", "margine", "marinaio", "marmotta", "marocco", "martello", "marzo", "maschera", "matrice", "maturare", "mazzetta", "meandri", "medaglia", "medico", "medusa", "megafono", "melone", "membrana", "menta", "mercato", "meritare", "merluzzo", "mese", "mestiere", "metafora", "meteo", "metodo", "mettere", "miele", "miglio", "miliardo", "mimetica", "minatore", "minuto", "miracolo", "mirtillo", "missile", "mistero", "misura", "mito", "mobile", "moda", "moderare", "moglie", "molecola", "molle", "momento", "moneta", "mongolia", "monologo", "montagna", "morale", "morbillo", "mordere", "mosaico", "mosca", "mostro", "motivare", "moto", "mulino", "mulo", "muovere", "muraglia", "muscolo", "museo", "musica", "mutande", "nascere", "nastro", "natale", "natura", "nave", "navigare", "negare", "negozio", "nemico", "nero", "nervo", "nessuno", "nettare", "neutroni", "neve", "nevicare", "nicotina", "nido", "nipote", "nocciola", "noleggio", "nome", "nonno", "norvegia", "notare", "notizia", "nove", "nucleo", "nuda", "nuotare", "nutrire", "obbligo", "occhio", "occupare", "oceano", "odissea", "odore", "offerta", "officina", "offrire", "oggetto", "oggi", "olfatto", "olio", "oliva", "ombelico", "ombrello", "omuncolo", "ondata", "onore", "opera", "opinione", "opuscolo", "opzione", "orario", "orbita", "orchidea", "ordine", "orecchio", "orgasmo", "orgoglio", "origine", "orologio", "oroscopo", "orso", "oscurare", "ospedale", "ospite", "ossigeno", "ostacolo", "ostriche", "ottenere", "ottimo", "ottobre", "ovest", "pacco", "pace", "pacifico", "padella", "pagare", "pagina", "pagnotta", "palazzo", "palestra", "palpebre", "pancetta", "panfilo", "panino", "pannello", "panorama", "papa", "paperino", "paradiso", "parcella", "parente", "parlare", "parodia", "parrucca", "partire", "passare", "pasta", "patata", "patente", "patogeno", "patriota", "pausa", "pazienza", "peccare", "pecora", "pedalare", "pelare", "pena", "pendenza", "penisola", "pennello", "pensare", "pentirsi", "percorso", "perdono", "perfetto", "perizoma", "perla", "permesso", "persona", "pesare", "pesce", "peso", "petardo", "petrolio", "pezzo", "piacere", "pianeta", "piastra", "piatto", "piazza", "piccolo", "piede", "piegare", "pietra", "pigiama", "pigliare", "pigrizia", "pilastro", "pilota", "pinguino", "pioggia", "piombo", "pionieri", "piovra", "pipa", "pirata", "pirolisi", "piscina", "pisolino", "pista", "pitone", "piumino", "pizza", "plastica", "platino", "poesia", "poiana", "polaroid", "polenta", "polimero", "pollo", "polmone", "polpetta", "poltrona", "pomodoro", "pompa", "popolo", "porco", "porta", "porzione", "possesso", "postino", "potassio", "potere", "poverino", "pranzo", "prato", "prefisso", "prelievo", "premio", "prendere", "prestare", "pretesa", "prezzo", "primario", "privacy", "problema", "processo", "prodotto", "profeta", "progetto", "promessa", "pronto", "proposta", "proroga", "prossimo", "proteina", "prova", "prudenza", "pubblico", "pudore", "pugilato", "pulire", "pulsante", "puntare", "pupazzo", "puzzle", "quaderno", "qualcuno", "quarzo", "quercia", "quintale", "rabbia", "racconto", "radice", "raffica", "ragazza", "ragione", "rammento", "ramo", "rana", "randagio", "rapace", "rapinare", "rapporto", "rasatura", "ravioli", "reagire", "realista", "reattore", "reazione", "recitare", "recluso", "record", "recupero", "redigere", "regalare", "regina", "regola", "relatore", "reliquia", "remare", "rendere", "reparto", "resina", "resto", "rete", "retorica", "rettile", "revocare", "riaprire", "ribadire", "ribelle", "ricambio", "ricetta", "richiamo", "ricordo", "ridurre", "riempire", "riferire", "riflesso", "righello", "rilancio", "rilevare", "rilievo", "rimanere", "rimborso", "rinforzo", "rinuncia", "riparo", "ripetere", "riposare", "ripulire", "risalita", "riscatto", "riserva", "riso", "rispetto", "ritaglio", "ritmo", "ritorno", "ritratto", "rituale", "riunione", "riuscire", "riva", "robotica", "rondine", "rosa", "rospo", "rosso", "rotonda", "rotta", "roulotte", "rubare", "rubrica", "ruffiano", "rumore", "ruota", "ruscello", "sabbia", "sacco", "saggio", "sale", "salire", "salmone", "salto", "salutare", "salvia", "sangue", "sanzioni", "sapere", "sapienza", "sarcasmo", "sardine", "sartoria", "sbalzo", "sbarcare", "sberla", "sborsare", "scadenza", "scafo", "scala", "scambio", "scappare", "scarpa", "scatola", "scelta", "scena", "sceriffo", "scheggia", "schiuma", "sciarpa", "scienza", "scimmia", "sciopero", "scivolo", "sclerare", "scolpire", "sconto", "scopa", "scordare", "scossa", "scrivere", "scrupolo", "scuderia", "scultore", "scuola", "scusare", "sdraiare", "secolo", "sedativo", "sedere", "sedia", "segare", "segreto", "seguire", "semaforo", "seme", "senape", "seno", "sentiero", "separare", "sepolcro", "sequenza", "serata", "serpente", "servizio", "sesso", "seta", "settore", "sfamare", "sfera", "sfidare", "sfiorare", "sfogare", "sgabello", "sicuro", "siepe", "sigaro", "silenzio", "silicone", "simbiosi", "simpatia", "simulare", "sinapsi", "sindrome", "sinergia", "sinonimo", "sintonia", "sirena", "siringa", "sistema", "sito", "smalto", "smentire", "smontare", "soccorso", "socio", "soffitto", "software", "soggetto", "sogliola", "sognare", "soldi", "sole", "sollievo", "solo", "sommario", "sondare", "sonno", "sorpresa", "sorriso", "sospiro", "sostegno", "sovrano", "spaccare", "spada", "spagnolo", "spalla", "sparire", "spavento", "spazio", "specchio", "spedire", "spegnere", "spendere", "speranza", "spessore", "spezzare", "spiaggia", "spiccare", "spiegare", "spiffero", "spingere", "sponda", "sporcare", "spostare", "spremuta", "spugna", "spumante", "spuntare", "squadra", "squillo", "staccare", "stadio", "stagione", "stallone", "stampa", "stancare", "starnuto", "statura", "stella", "stendere", "sterzo", "stilista", "stimolo", "stinco", "stiva", "stoffa", "storia", "strada", "stregone", "striscia", "studiare", "stufa", "stupendo", "subire", "successo", "sudare", "suono", "superare", "supporto", "surfista", "sussurro", "svelto", "svenire", "sviluppo", "svolta", "svuotare", "tabacco", "tabella", "tabu", "tacchino", "tacere", "taglio", "talento", "tangente", "tappeto", "tartufo", "tassello", "tastiera", "tavolo", "tazza", "teatro", "tedesco", "telaio", "telefono", "tema", "temere", "tempo", "tendenza", "tenebre", "tensione", "tentare", "teologia", "teorema", "termica", "terrazzo", "teschio", "tesi", "tesoro", "tessera", "testa", "thriller", "tifoso", "tigre", "timbrare", "timido", "tinta", "tirare", "tisana", "titano", "titolo", "toccare", "togliere", "topolino", "torcia", "torrente", "tovaglia", "traffico", "tragitto", "training", "tramonto", "transito", "trapezio", "trasloco", "trattore", "trazione", "treccia", "tregua", "treno", "triciclo", "tridente", "trilogia", "tromba", "troncare", "trota", "trovare", "trucco", "tubo", "tulipano", "tumulto", "tunisia", "tuono", "turista", "tuta", "tutelare", "tutore", "ubriaco", "uccello", "udienza", "udito", "uffa", "umanoide", "umore", "unghia", "unguento", "unicorno", "unione", "universo", "uomo", "uragano", "uranio", "urlare", "uscire", "utente", "utilizzo", "vacanza", "vacca", "vaglio", "vagonata", "valle", "valore", "valutare", "valvola", "vampiro", "vaniglia", "vanto", "vapore", "variante", "vasca", "vaselina", "vassoio", "vedere", "vegetale", "veglia", "veicolo", "vela", "veleno", "velivolo", "velluto", "vendere", "venerare", "venire", "vento", "veranda", "verbo", "verdura", "vergine", "verifica", "vernice", "vero", "verruca", "versare", "vertebra", "vescica", "vespaio", "vestito", "vesuvio", "veterano", "vetro", "vetta", "viadotto", "viaggio", "vibrare", "vicenda", "vichingo", "vietare", "vigilare", "vigneto", "villa", "vincere", "violino", "vipera", "virgola", "virtuoso", "visita", "vita", "vitello", "vittima", "vivavoce", "vivere", "viziato", "voglia", "volare", "volpe", "volto", "volume", "vongole", "voragine", "vortice", "votare", "vulcano", "vuotare", "zabaione", "zaffiro", "zainetto", "zampa", "zanzara", "zattera", "zavorra", "zenzero", "zero", "zingaro", "zittire", "zoccolo", "zolfo", "zombie", "zucchero"]), type$.JSArray_String);
    B.SigningRequestNetwork_N0T = new A.SigningRequestNetwork(B.List_32_100, 0, "bitcoin");
    B.List_32_101 = A._setArrayType(makeConstList([32, 101]), type$.JSArray_int);
    B.SigningRequestNetwork_iLh = new A.SigningRequestNetwork(B.List_32_101, 1, "eth");
    B.List_32_102 = A._setArrayType(makeConstList([32, 102]), type$.JSArray_int);
    B.SigningRequestNetwork_USZ = new A.SigningRequestNetwork(B.List_32_102, 2, "ripple");
    B.List_32_103 = A._setArrayType(makeConstList([32, 103]), type$.JSArray_int);
    B.SigningRequestNetwork_wDC = new A.SigningRequestNetwork(B.List_32_103, 3, "cardano");
    B.List_32_104 = A._setArrayType(makeConstList([32, 104]), type$.JSArray_int);
    B.SigningRequestNetwork_kCi = new A.SigningRequestNetwork(B.List_32_104, 4, "ton");
    B.SigningRequestNetwork_qJO = new A.SigningRequestNetwork(B.List_32_105, 5, "cosmos");
    B.List_32_106 = A._setArrayType(makeConstList([32, 106]), type$.JSArray_int);
    B.SigningRequestNetwork_KxY = new A.SigningRequestNetwork(B.List_32_106, 6, "solana");
    B.List_32_107 = A._setArrayType(makeConstList([32, 107]), type$.JSArray_int);
    B.SigningRequestNetwork_1CZ = new A.SigningRequestNetwork(B.List_32_107, 7, "tron");
    B.List_32_108 = A._setArrayType(makeConstList([32, 108]), type$.JSArray_int);
    B.SigningRequestNetwork_D6q = new A.SigningRequestNetwork(B.List_32_108, 8, "substrate");
    B.List_32_109 = A._setArrayType(makeConstList([32, 109]), type$.JSArray_int);
    B.SigningRequestNetwork_rNw = new A.SigningRequestNetwork(B.List_32_109, 9, "stellar");
    B.SigningRequestNetwork_Had = new A.SigningRequestNetwork(B.List_32_110, 10, "monero");
    B.List_qpl = A._setArrayType(makeConstList([B.SigningRequestNetwork_N0T, B.SigningRequestNetwork_iLh, B.SigningRequestNetwork_USZ, B.SigningRequestNetwork_wDC, B.SigningRequestNetwork_kCi, B.SigningRequestNetwork_qJO, B.SigningRequestNetwork_KxY, B.SigningRequestNetwork_1CZ, B.SigningRequestNetwork_D6q, B.SigningRequestNetwork_rNw, B.SigningRequestNetwork_Had]), A.findType("JSArray<SigningRequestNetwork>"));
    B.List_61_0 = A._setArrayType(makeConstList([61, 0]), type$.JSArray_int);
    B.NoneEncryptedCryptoRequestMethod_UAO = new A.NoneEncryptedCryptoRequestMethod(B.List_61_0, 0, "moneroFakeTx");
    B.List_61_1 = A._setArrayType(makeConstList([61, 1]), type$.JSArray_int);
    B.NoneEncryptedCryptoRequestMethod_J7U = new A.NoneEncryptedCryptoRequestMethod(B.List_61_1, 1, "generateRingOutput");
    B.NoneEncryptedCryptoRequestMethod_ubZ = new A.NoneEncryptedCryptoRequestMethod(B.List_111_37, 2, "hexToBytes");
    B.NoneEncryptedCryptoRequestMethod_mF3 = new A.NoneEncryptedCryptoRequestMethod(B.List_111_38, 3, "hashing");
    B.List_61_5 = A._setArrayType(makeConstList([61, 5]), type$.JSArray_int);
    B.NoneEncryptedCryptoRequestMethod_sM5 = new A.NoneEncryptedCryptoRequestMethod(B.List_61_5, 4, "moneroGenerateProof");
    B.List_61_6 = A._setArrayType(makeConstList([61, 6]), type$.JSArray_int);
    B.NoneEncryptedCryptoRequestMethod_kXN = new A.NoneEncryptedCryptoRequestMethod(B.List_61_6, 5, "moneroVerifyProof");
    B.NoneEncryptedCryptoRequestMethod_w4U = new A.NoneEncryptedCryptoRequestMethod(B.List_0_0_0_1, 6, "test");
    B.List_r60 = A._setArrayType(makeConstList([B.NoneEncryptedCryptoRequestMethod_UAO, B.NoneEncryptedCryptoRequestMethod_J7U, B.NoneEncryptedCryptoRequestMethod_ubZ, B.NoneEncryptedCryptoRequestMethod_mF3, B.NoneEncryptedCryptoRequestMethod_sM5, B.NoneEncryptedCryptoRequestMethod_kXN, B.NoneEncryptedCryptoRequestMethod_w4U]), A.findType("JSArray<NoneEncryptedCryptoRequestMethod>"));
    B.List_s6Q = A._setArrayType(makeConstList([B.CosmosKeysAlgs_0, B.CosmosKeysAlgs_1, B.CosmosKeysAlgs_2, B.CosmosKeysAlgs_3]), type$.JSArray_CosmosKeysAlgs);
    B.List_s8b = A._setArrayType(makeConstList([256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 256, 256, 256, 256, 256, 256, 256, 10, 11, 12, 13, 14, 15, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 10, 11, 12, 13, 14, 15, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256]), type$.JSArray_int);
    B.List_sYN = A._setArrayType(makeConstList([98, 117, 108, 108, 101, 116, 112, 114, 111, 111, 102, 95, 112, 108, 117, 115]), type$.JSArray_int);
    B.List_80_0_1 = A._setArrayType(makeConstList([80, 0, 1]), type$.JSArray_int);
    B.NetworkType_List_80_0_1 = new A.NetworkType(B.List_80_0_1);
    B.List_80_0_10 = A._setArrayType(makeConstList([80, 0, 10]), type$.JSArray_int);
    B.NetworkType_List_80_0_10 = new A.NetworkType(B.List_80_0_10);
    B.List_80_0_2 = A._setArrayType(makeConstList([80, 0, 2]), type$.JSArray_int);
    B.NetworkType_List_80_0_2 = new A.NetworkType(B.List_80_0_2);
    B.List_80_0_3 = A._setArrayType(makeConstList([80, 0, 3]), type$.JSArray_int);
    B.NetworkType_List_80_0_3 = new A.NetworkType(B.List_80_0_3);
    B.List_80_0_4 = A._setArrayType(makeConstList([80, 0, 4]), type$.JSArray_int);
    B.NetworkType_List_80_0_4 = new A.NetworkType(B.List_80_0_4);
    B.List_80_0_5 = A._setArrayType(makeConstList([80, 0, 5]), type$.JSArray_int);
    B.NetworkType_List_80_0_5 = new A.NetworkType(B.List_80_0_5);
    B.List_80_0_6 = A._setArrayType(makeConstList([80, 0, 6]), type$.JSArray_int);
    B.NetworkType_List_80_0_6 = new A.NetworkType(B.List_80_0_6);
    B.List_80_0_11 = A._setArrayType(makeConstList([80, 0, 11]), type$.JSArray_int);
    B.NetworkType_List_80_0_11 = new A.NetworkType(B.List_80_0_11);
    B.List_80_0_7 = A._setArrayType(makeConstList([80, 0, 7]), type$.JSArray_int);
    B.NetworkType_List_80_0_7 = new A.NetworkType(B.List_80_0_7);
    B.List_80_0_12 = A._setArrayType(makeConstList([80, 0, 12]), type$.JSArray_int);
    B.NetworkType_List_80_0_12 = new A.NetworkType(B.List_80_0_12);
    B.List_80_0_13 = A._setArrayType(makeConstList([80, 0, 13]), type$.JSArray_int);
    B.NetworkType_List_80_0_13 = new A.NetworkType(B.List_80_0_13);
    B.List_80_0_14 = A._setArrayType(makeConstList([80, 0, 14]), type$.JSArray_int);
    B.NetworkType_List_80_0_14 = new A.NetworkType(B.List_80_0_14);
    B.List_80_0_15 = A._setArrayType(makeConstList([80, 0, 15]), type$.JSArray_int);
    B.NetworkType_List_80_0_15 = new A.NetworkType(B.List_80_0_15);
    B.List_vHJ = A._setArrayType(makeConstList([B.NetworkType_List_80_0_1, B.NetworkType_List_80_0_10, B.NetworkType_List_80_0_2, B.NetworkType_List_80_0_3, B.NetworkType_List_80_0_4, B.NetworkType_List_80_0_5, B.NetworkType_List_80_0_6, B.NetworkType_List_80_0_11, B.NetworkType_List_80_0_7, B.NetworkType_List_80_0_12, B.NetworkType_List_80_0_13, B.NetworkType_List_80_0_14, B.NetworkType_List_80_0_15]), A.findType("JSArray<NetworkType>"));
    B.RCTType_rctTypeNull_0 = new A.RCTType("rctTypeNull", 0);
    B.RCTType_rctTypeFull_1 = new A.RCTType("rctTypeFull", 1);
    B.RCTType_rctTypeSimple_2 = new A.RCTType("rctTypeSimple", 2);
    B.RCTType_rctTypeBulletproof_3 = new A.RCTType("rctTypeBulletproof", 3);
    B.RCTType_rctTypeBulletproof2_4 = new A.RCTType("rctTypeBulletproof2", 4);
    B.RCTType_rctTypeCLSAG_5 = new A.RCTType("rctTypeCLSAG", 5);
    B.RCTType_rctTypeBulletproofPlus_6 = new A.RCTType("rctTypeBulletproofPlus", 6);
    B.List_vM5 = A._setArrayType(makeConstList([B.RCTType_rctTypeNull_0, B.RCTType_rctTypeFull_1, B.RCTType_rctTypeSimple_2, B.RCTType_rctTypeBulletproof_3, B.RCTType_rctTypeBulletproof2_4, B.RCTType_rctTypeCLSAG_5, B.RCTType_rctTypeBulletproofPlus_6]), A.findType("JSArray<RCTType>"));
    B.List_wGx = A._setArrayType(makeConstList([B.AddressDerivationType_656, B.AddressDerivationType_wEo, B.AddressDerivationType_AW6]), A.findType("JSArray<AddressDerivationType>"));
    B.List_34 = A._setArrayType(makeConstList([34]), type$.JSArray_int);
    B.CborBase64Types_List_34 = new A.CborBase64Types(B.List_34);
    B.List_33 = A._setArrayType(makeConstList([33]), type$.JSArray_int);
    B.CborBase64Types_List_33 = new A.CborBase64Types(B.List_33);
    B.List_21 = A._setArrayType(makeConstList([21]), type$.JSArray_int);
    B.CborBase64Types_List_21 = new A.CborBase64Types(B.List_21);
    B.CborBase64Types_List_22 = new A.CborBase64Types(B.List_22);
    B.CborBase64Types_List_23 = new A.CborBase64Types(B.List_23);
    B.List_ww8 = A._setArrayType(makeConstList([B.CborBase64Types_List_34, B.CborBase64Types_List_33, B.CborBase64Types_List_21, B.CborBase64Types_List_22, B.CborBase64Types_List_23]), A.findType("JSArray<CborBase64Types>"));
    B.List_yH3 = A._setArrayType(makeConstList([B.ADAAddressType_0_Base, B.ADAAddressType_14_Reward, B.ADAAddressType_6_Enterprise, B.ADAAddressType_4_Pointer, B.ADAAddressType_8_Byron]), A.findType("JSArray<ADAAddressType>"));
    B.Map_ENTq5 = new A.GeneralConstantMap([B.MoneroLanguages_chineseSimplified, 1, B.MoneroLanguages_dutch, 4, B.MoneroLanguages_english, 3, B.MoneroLanguages_french, 4, B.MoneroLanguages_german, 4, B.MoneroLanguages_italian, 4, B.MoneroLanguages_japanese, 4, B.MoneroLanguages_portuguese, 4, B.MoneroLanguages_spanish, 4, B.MoneroLanguages_russian, 4], A.findType("GeneralConstantMap<MnemonicLanguages,int>"));
    B.C_SubstrateScaleU8Encoder = new A.SubstrateScaleU8Encoder();
    B.C_SubstrateScaleU16Encoder = new A.SubstrateScaleU16Encoder();
    B.C_SubstrateScaleU32Encoder = new A.SubstrateScaleU32Encoder();
    B.C_SubstrateScaleU64Encoder = new A.SubstrateScaleU64Encoder();
    B.C_SubstrateScaleU128Encoder = new A.SubstrateScaleU128Encoder();
    B.C_SubstrateScaleU256Encoder = new A.SubstrateScaleU256Encoder();
    B.Map_SMvAv = new A.GeneralConstantMap([8, B.C_SubstrateScaleU8Encoder, 16, B.C_SubstrateScaleU16Encoder, 32, B.C_SubstrateScaleU32Encoder, 64, B.C_SubstrateScaleU64Encoder, 128, B.C_SubstrateScaleU128Encoder, 256, B.C_SubstrateScaleU256Encoder], A.findType("GeneralConstantMap<int,SubstrateScaleEncoderBase>"));
    B.Map_U36O8 = new A.GeneralConstantMap([400, "Bad Request: The server could not understand the request due to invalid syntax.", 401, "Unauthorized: Authentication is required or has failed.", 403, "Forbidden: You do not have permission to access this resource.", 404, "Not Found: The requested resource could not be found.", 405, "Method Not Allowed: The HTTP method used is not supported for this resource.", 409, "Conflict: The request could not be processed due to a conflict with the current state of the resource.", 422, "Unprocessable Entity: The request was well-formed but could not be processed.", 500, "Internal Server Error: The server encountered an unexpected condition.", 502, "Bad Gateway: The server received an invalid response from the upstream server.", 503, "Service Unavailable: The server is temporarily unable to handle the request.", 504, "Gateway Timeout: The server did not receive a timely response from the upstream server."], A.findType("GeneralConstantMap<int,String>"));
    B.Map_ap4AN = new A.GeneralConstantMap([B.Base58Alphabets_0, string$.x3123456, B.Base58Alphabets_1, "rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz"], A.findType("GeneralConstantMap<Base58Alphabets,String>"));
    B.Object_empty = {};
    B.Map_empty0 = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<String,String>"));
    B.Map_empty = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<String,@>"));
    B.Object_0 = {string: 0, bool: 1, address: 2, tuple: 3, array: 4, bytes: 5, function: 6, number: 7};
    B.C_StringCoder = new A.StringCoder();
    B.C_BooleanCoder = new A.BooleanCoder();
    B.C_AddressCoder = new A.AddressCoder();
    B.C_TupleCoder = new A.TupleCoder();
    B.C_ArrayCoder = new A.ArrayCoder();
    B.C_FunctionCoder = new A.FunctionCoder();
    B.Map_zPayp = new A.ConstantStringMap(B.Object_0, [B.C_StringCoder, B.C_BooleanCoder, B.C_AddressCoder, B.C_TupleCoder, B.C_ArrayCoder, B.C_BytesCoder, B.C_FunctionCoder, B.C_NumbersCoder], A.findType("ConstantStringMap<String,ABICoder<@>>"));
    B.MessageException_1Xk = new A.MessageException("Failure. This happens only with negligible probability.", null);
    B.MessageException_4QF = new A.MessageException("SHA3: cannot save finished state", null);
    B.MessageException_5YB = new A.MessageException("Output length must be zero except for PRF, send_MAC, and RATCHET operations.", null);
    B.MessageException_61x = new A.MessageException("The created signature does not pass verification.", null);
    B.MessageException_66y = new A.MessageException("SHA3: squeezing before padAndPermute", null);
    B.MessageException_6ln = new A.MessageException("A length should be set for this operation.", null);
    B.MessageException_GVQ = new A.MessageException("SHA3: can't update because hash was finished", null);
    B.MessageException_IMr = new A.MessageException("Invalid character in Base58 string", null);
    B.MessageException_NiJ = new A.MessageException("SHA512: can't update because hash was finished.", null);
    B.MessageException_Q5s = new A.MessageException("AES: encryption key is not available", null);
    B.MessageException_QW6 = new A.MessageException("SHA256: can't update because hash was finished.", null);
    B.MessageException_QWS = new A.MessageException("No suitable 'b' found.", null);
    B.MessageException_RMe = new A.MessageException("SHA256: cannot save finished state", null);
    B.MessageException_Zgr = new A.MessageException("Size is too large!", null);
    B.MessageException_Zgr0 = new A.MessageException("strobe: buffer is never supposed to reach strobeR", null);
    B.MessageException_asg = new A.MessageException("ChaCha: counter overflow", null);
    B.MessageException_c9P = new A.MessageException("blake2b: cannot save finished state", null);
    B.MessageException_j72 = new A.MessageException("unlucky random number r", null);
    B.MessageException_j720 = new A.MessageException("unlucky random number s", null);
    B.MessageException_kKo = new A.MessageException("Poly1305 was finished", null);
    B.MnemonicException_4e8 = new A.MnemonicException("TonMnemonicLanguages only support english", null);
    B.MnemonicException_5Qm = new A.MnemonicException("Invalid mnemonic words count. Words number must be between 8 and 48", null);
    B.MnemonicException_i2q = new A.MnemonicException("Invalid Ton mnemonic.", null);
    B.MnemonicException_ijv = new A.MnemonicException("Invalid Ton mnemonic. is Basic seed.", null);
    B.MoneroAccountKeysType_Multisig_1 = new A.MoneroAccountKeysType("Multisig", 1);
    B.MoneroAccountKeysType_Simple_0 = new A.MoneroAccountKeysType("Simple", 0);
    B.MoneroCoins_moneroMainnet = new A.MoneroCoins("moneroMainnet");
    B.MoneroCoins_moneroStagenet = new A.MoneroCoins("moneroStagenet");
    B.MoneroCoins_moneroTestnet = new A.MoneroCoins("moneroTestnet");
    B.MoneroCryptoException_0 = new A.MoneroCryptoException("Invalid number of bulletproofs: sum of amounts exceeds uint32 max value.", null);
    B.MoneroCryptoException_00 = new A.MoneroCryptoException("log2(max_outputs) is out of date: max_outputs must be 2^extraBits.", null);
    B.MoneroCryptoException_0dm = new A.MoneroCryptoException("Incompatible size for G", null);
    B.MoneroCryptoException_0dm0 = new A.MoneroCryptoException("Incompatible size for H", null);
    B.MoneroCryptoException_0dm1 = new A.MoneroCryptoException("Incompatible size for a", null);
    B.MoneroCryptoException_0dm2 = new A.MoneroCryptoException("Incompatible size for b", null);
    B.MoneroCryptoException_2jN = new A.MoneroCryptoException("Invalid _pow2 argument", null);
    B.MoneroCryptoException_43h0 = new A.MoneroCryptoException("No RCT values found in the range", null);
    B.MoneroCryptoException_43h = new A.MoneroCryptoException("invalid point", null);
    B.MoneroCryptoException_4ae = new A.MoneroCryptoException("Empty inamounts", null);
    B.MoneroCryptoException_6YB = new A.MoneroCryptoException("Need n > 0", null);
    B.MoneroCryptoException_6cO = new A.MoneroCryptoException("bad ECDH amount.", null);
    B.MoneroCryptoException_7JZ = new A.MoneroCryptoException("Different number of mixRing/inSk", null);
    B.MoneroCryptoException_7N7 = new A.MoneroCryptoException("Cannot invert zero.", null);
    B.MoneroCryptoException_8Gl = new A.MoneroCryptoException("Incompatible sizes of sv and gamma", null);
    B.MoneroCryptoException_8wU = new A.MoneroCryptoException("Bad cache base data", null);
    B.MoneroCryptoException_A6W = new A.MoneroCryptoException("sv/gamma are too large", null);
    B.MoneroCryptoException_APP = new A.MoneroCryptoException("Invalid bulletproof L size: L_size must not exceed 6 + extraBits.", null);
    B.MoneroCryptoException_Bj7 = new A.MoneroCryptoException("Incompatible sizes of a and maxN", null);
    B.MoneroCryptoException_CVN = new A.MoneroCryptoException("Vector size should be even", null);
    B.MoneroCryptoException_Cb0 = new A.MoneroCryptoException("Different number of amountKeys/destinations", null);
    B.MoneroCryptoException_Cfs = new A.MoneroCryptoException("Mismatched sizes of publickey and ECDH", null);
    B.MoneroCryptoException_E3b = new A.MoneroCryptoException("Invalid gamma input", null);
    B.MoneroCryptoException_FQN = new A.MoneroCryptoException("Invalid rct type.", null);
    B.MoneroCryptoException_GJk = new A.MoneroCryptoException("Invalid scalar key.", null);
    B.MoneroCryptoException_I4y = new A.MoneroCryptoException("key derivation is invalid", null);
    B.MoneroCryptoException_IYL = new A.MoneroCryptoException("Mismatched bulletproof L/R size: L size and R_size must be equal.", null);
    B.MoneroCryptoException_K12 = new A.MoneroCryptoException("message and mixRing required for generate mlsag hash.", null);
    B.MoneroCryptoException_KTP = new A.MoneroCryptoException("Different number of amounts/destinations", null);
    B.MoneroCryptoException_KrQ = new A.MoneroCryptoException("Invalid secret key.", null);
    B.MoneroCryptoException_OXJ = new A.MoneroCryptoException("Bad index into mixRing", null);
    B.MoneroCryptoException_OcK = new A.MoneroCryptoException("Integrated address detected in multi-transfer transaction.", null);
    B.MoneroCryptoException_P1W = new A.MoneroCryptoException("recipient spend pubkey is invalid", null);
    B.MoneroCryptoException_QcL = new A.MoneroCryptoException("V does not have the expected size", null);
    B.MoneroCryptoException_Qsc = new A.MoneroCryptoException("Bad offset calculation", null);
    B.MoneroCryptoException_SzJ = new A.MoneroCryptoException("Invalid a provided.", null);
    B.MoneroCryptoException_Vsy = new A.MoneroCryptoException("Invalid amounts/sk sizes", null);
    B.MoneroCryptoException_WZC = new A.MoneroCryptoException("Invalid point", null);
    B.MoneroCryptoException_XEw = new A.MoneroCryptoException("output index not found", null);
    B.MoneroCryptoException_YEW = new A.MoneroCryptoException("Incompatible sizes of a and b", null);
    B.MoneroCryptoException_YKi = new A.MoneroCryptoException("signature prunable required for calculate claw back.", null);
    B.MoneroCryptoException_Yf3 = new A.MoneroCryptoException("recipient view pubkey is invalid", null);
    B.MoneroCryptoException_aGl = new A.MoneroCryptoException("bad ECDH mask.", null);
    B.MoneroCryptoException_alO = new A.MoneroCryptoException("Invalid public key.", null);
    B.MoneroCryptoException_cc6 = new A.MoneroCryptoException("Bad cache base data.", null);
    B.MoneroCryptoException_eL6 = new A.MoneroCryptoException("Signing and commitment key vector sizes must match!", null);
    B.MoneroCryptoException_egt = new A.MoneroCryptoException("tx pubkey is invalid", null);
    B.MoneroCryptoException_exN = new A.MoneroCryptoException("amount decoded incorrectly, will be unable to spend", null);
    B.MoneroCryptoException_g78 = new A.MoneroCryptoException("size is too large", null);
    B.MoneroCryptoException_gbg = new A.MoneroCryptoException("Different number of index/inSk", null);
    B.MoneroCryptoException_ijF = new A.MoneroCryptoException("RCTSignature casting failed.", null);
    B.MoneroCryptoException_j3h = new A.MoneroCryptoException("Different number of inamounts/inSk", null);
    B.MoneroCryptoException_jF8 = new A.MoneroCryptoException("Exponent is point at infinity", null);
    B.MoneroCryptoException_k2a = new A.MoneroCryptoException("Invalid bulletproof L size: L size must be at least 6.", null);
    B.MoneroCryptoException_knt = new A.MoneroCryptoException("Incompatible sizes of v and gamma", null);
    B.MoneroCryptoException_oFp = new A.MoneroCryptoException("Invalid sv input", null);
    B.MoneroCryptoException_s8b = new A.MoneroCryptoException("Empty pubs", null);
    B.MoneroCryptoException_tEe = new A.MoneroCryptoException("Invalid point.", null);
    B.MoneroCryptoException_tEe0 = new A.MoneroCryptoException("Invalid pount.", null);
    B.MoneroCryptoException_tJe = new A.MoneroCryptoException("Signing index out of range!", null);
    B.MoneroCryptoException_yrt = new A.MoneroCryptoException("Bad index", null);
    B.MoneroKeyError_e7r = new A.MoneroKeyError("Watch-only class does not have a private spend key", null);
    B.MoneroOutputType_0_locked = new A.MoneroOutputType(0, "locked");
    B.MoneroOutputType_1_unlocked = new A.MoneroOutputType(1, "unlocked");
    B.MoneroParsingBlockStatus_1_0_failed = new A.MoneroParsingBlockStatus(1, 0, "failed");
    B.MoneroParsingBlockStatus_2_1_noBlock = new A.MoneroParsingBlockStatus(2, 1, "noBlock");
    B.MoneroParsingBlockStatus_3_2_success = new A.MoneroParsingBlockStatus(3, 2, "success");
    B.MoneroRequestApiType_0 = new A.MoneroRequestApiType(0, "daemon");
    B.MoneroSerializationException_GEl = new A.MoneroSerializationException("Unknown type: No associated flag found.", null);
    B.MoneroSerializationException_H37 = new A.MoneroSerializationException("Invalid array element type: Unable to decode untyped element.", null);
    B.MoneroSerializationException_RyU = new A.MoneroSerializationException("Invalid map: Object must be a Map<String, dynamic>.", null);
    B.MoneroSerializationException_V9x = new A.MoneroSerializationException("Invalid array values: Array must not be empty.", null);
    B.MoneroSerializationException_bDN = new A.MoneroSerializationException("The entry name must be between 1 and 255 characters.", null);
    B.MoneroSerializationException_k8P = new A.MoneroSerializationException("Missing or invalid signature and version information.", null);
    B.MoneroSerializationException_sES = new A.MoneroSerializationException("Invalid variant layout. only use enum layout to deserialize with `MoneroVariantSerialization.deserialize` method.", null);
    B.MoneroSerializationException_ujl = new A.MoneroSerializationException("Your environment cannot fully decode 62-bit varint.", null);
    B.MoneroStorageTypes_Unknown_0_false_false = new A.MoneroStorageTypes("Unknown", 0, false, false);
    B.List_200_202_18 = A._setArrayType(makeConstList([200, 202, 18]), type$.JSArray_int);
    B.MoneroSyncBlockResponseType_CTT = new A.MoneroSyncBlockResponseType(B.List_200_202_18, 1, "trackInfo");
    B.List_200_202_30 = A._setArrayType(makeConstList([200, 202, 30]), type$.JSArray_int);
    B.MoneroSyncBlockResponseType_iZe = new A.MoneroSyncBlockResponseType(B.List_200_202_30, 0, "blockInfo");
    B.MoneroUnlockPaymentRequestOutputStatus_0_0_unknown = new A.MoneroUnlockPaymentRequestOutputStatus(0, 0, "unknown");
    B.MoneroUnlockPaymentRequestStatus_1_0_success = new A.MoneroUnlockPaymentRequestStatus(1, 0, "success");
    B.MoneroUnlockPaymentRequestStatus_2_1_error = new A.MoneroUnlockPaymentRequestStatus(2, 1, "error");
    B.MoneroV1Signature_null = new A.MoneroV1Signature(null);
    B.NodeClientStatus_1 = new A.NodeClientStatus(1, "disconnect");
    B.RequestServiceType_0 = new A.RequestServiceType(0, "post");
    B.ServiceProtocol_0_http = new A.ServiceProtocol(0, "http");
    B.ServiceResponseType_0 = new A.ServiceResponseType(0, "error");
    B.ServiceResponseType_1 = new A.ServiceResponseType(1, "success");
    B.SolidityAbiException_2No = new A.SolidityAbiException("Invalid bytes length", null);
    B.SolidityAbiException_2Zi = new A.SolidityAbiException("Invalid data provided for bytes codec.", null);
    B.SolidityAbiException_DFh = new A.SolidityAbiException("Invalid array type name. size in invalid.", null);
    B.SolidityAbiException_j1u = new A.SolidityAbiException("invalid EIP712 json struct.", null);
    B.SolidityAbiException_xwo = new A.SolidityAbiException("Invalid argument length detected.", null);
    B.SquareRootError_LdP = new A.SquareRootError("The provided scalar exceeds the allowed range.", null);
    B.SquareRootError_epz = new A.SquareRootError("p is not prime", null);
    B.StringEncoding_0 = new A.StringEncoding(0, "ascii");
    B.StringEncoding_1 = new A.StringEncoding(1, "utf8");
    B.StringEncoding_2 = new A.StringEncoding(2, "base64");
    B.StrobeOperation_2 = new A.StrobeOperation(2);
    B.StrobeOperation_7 = new A.StrobeOperation(7);
    B.SubstrateKeyError_2zb = new A.SubstrateKeyError("Invalid private key", null);
    B.SubstrateKeyError_e4R = new A.SubstrateKeyError("Public child derivation cannot be used to create a hardened child key", null);
    B.SubstrateKeyError_tkC = new A.SubstrateKeyError("Invalid public key", null);
    B.SubstrateKeyError_vrN = new A.SubstrateKeyError(string$.Public, null);
    B.Tuple_false_false = new A.Tuple(false, false, type$.Tuple_bool_bool);
    B.Tuple_false_true = new A.Tuple(false, true, type$.Tuple_bool_bool);
    B.Tuple_true_true = new A.Tuple(true, true, type$.Tuple_bool_bool);
    B.Type_ByteBuffer_EOZ = A.typeLiteral("ByteBuffer");
    B.Type_ByteData_mF8 = A.typeLiteral("ByteData");
    B.Type_CborMapValue_ezS = A.typeLiteral("CborMapValue<@,@>");
    B.Type_Float32List_Ymk = A.typeLiteral("Float32List");
    B.Type_Float64List_Ymk = A.typeLiteral("Float64List");
    B.Type_Int16List_cot = A.typeLiteral("Int16List");
    B.Type_Int32List_m1p = A.typeLiteral("Int32List");
    B.Type_Int8List_woc = A.typeLiteral("Int8List");
    B.Type_JSObject_0ua = A.typeLiteral("JSObject");
    B.Type_Object_QJv = A.typeLiteral("Object");
    B.Type_String_J2O = A.typeLiteral("String");
    B.Type_Uint16List_2mh = A.typeLiteral("Uint16List");
    B.Type_Uint32List_2mh = A.typeLiteral("Uint32List");
    B.Type_Uint8ClampedList_9Bb = A.typeLiteral("Uint8ClampedList");
    B.Type_Uint8List_CSc = A.typeLiteral("Uint8List");
    B.Type_dynamic_PLF = A.typeLiteral("@");
    B.Utf8Decoder_false = new A.Utf8Decoder(false);
    B.Utf8Decoder_true = new A.Utf8Decoder(true);
    B.WalletException_5V3 = new A.WalletException("invalid_daemon_distribution_response", null);
    B.WalletException_GRW = new A.WalletException("Unsupported address type.", null);
    B.WalletException_O9i = new A.WalletException("Stake public key must be provided for base address type, please set it to null.", null);
    B.WalletException_Q8G = new A.WalletException("decoding cbor required object, bytes or hex. no value provided for decoding.", null);
    B.WalletException_WaB = new A.WalletException("private_key_is_not_available", null);
    B.WalletException_coin_not_found_null = new A.WalletException("coin_not_found", null);
    B.WalletException_data_verification_failed_null = new A.WalletException("data_verification_failed", null);
    B.WalletException_decryption_failed_null = new A.WalletException("decryption_failed", null);
    B.WalletException_extended_key_invalid_null = new A.WalletException("extended_key_invalid", null);
    B.WalletException_failed_to_unlock_output_null = new A.WalletException("failed_to_unlock_output", null);
    B.WalletException_generate_rct_faild_null = new A.WalletException("generate_rct_faild", null);
    B.WalletException_inaccessible_key_algorithm_null = new A.WalletException("inaccessible_key_algorithm", null);
    B.WalletException_incorrect_network_null = new A.WalletException("incorrect_network", null);
    B.WalletException_incorrect_password_null = new A.WalletException("incorrect_password", null);
    B.WalletException_invalid_account_details_null = new A.WalletException("invalid_account_details", null);
    B.WalletException_invalid_coin_null = new A.WalletException("invalid_coin", null);
    B.WalletException_invalid_mnemonic_null = new A.WalletException("invalid_mnemonic", null);
    B.WalletException_invalid_provider_infomarion_null = new A.WalletException("invalid_provider_infomarion", null);
    B.WalletException_invalid_request_null = new A.WalletException("invalid_request", null);
    B.WalletException_invalid_serialization_data_null = new A.WalletException("invalid_serialization_data", null);
    B.WalletException_key_already_exists_null = new A.WalletException("key_already_exists", null);
    B.WalletException_nmo = new A.WalletException("not_support_multisig_derivation", null);
    B.WalletException_private_key_invalid_null = new A.WalletException("private_key_invalid", null);
    B.WalletException_qlj = new A.WalletException("hdPath and hdPathKey should be used together.", null);
    B.WalletException_transaction_not_found_null = new A.WalletException("transaction_not_found", null);
    B.WalletException_unsuported_feature_null = new A.WalletException("unsuported_feature", null);
    B.WalletException_z3s = new A.WalletException("Stake public key is required for base address.", null);
    B.Web3SecretStorageDefinationV3Exception_0wg = new A.Web3SecretStorageDefinationV3Exception("Wrong password or the file is corrupted", null);
    B.Web3SecretStorageDefinationV3Exception_KLw = new A.Web3SecretStorageDefinationV3Exception("Invalid secret wallet cbor bytes", null);
    B.Web3SecretStorageDefinationV3Exception_MIP = new A.Web3SecretStorageDefinationV3Exception("Library only supports version 3", null);
    B.Web3SecretStorageDefinationV3Exception_anX = new A.Web3SecretStorageDefinationV3Exception("wrong password or the file is corrupted", null);
    B.Web3SecretStorageDefinationV3Exception_axY = new A.Web3SecretStorageDefinationV3Exception("invalid secret wallet cbor bytes", null);
    B.Web3SecretStorageDefinationV3Exception_b1T = new A.Web3SecretStorageDefinationV3Exception("invalid encoding", null);
    B.Web3SecretStorageDefinationV3Exception_c0h = new A.Web3SecretStorageDefinationV3Exception("invalid secret wallet cbor tag", null);
    B.XRPKeyAlgorithm_EllipticCurveTypes_ed25519 = new A.XRPKeyAlgorithm(B.EllipticCurveTypes_ed25519);
    B.XRPKeyAlgorithm_EllipticCurveTypes_secp256k1 = new A.XRPKeyAlgorithm(B.EllipticCurveTypes_secp256k1);
    B.XRPLAddressCodecException_aZ8 = new A.XRPLAddressCodecException("Invalid private key");
    B.XRPLAddressCodecException_o2Y = new A.XRPLAddressCodecException("Invalid ripple address");
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.toStringVisiting = A._setArrayType([], type$.JSArray_Object);
    $.Primitives__identityHashCodeProperty = null;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._Record__computedFieldKeys = A._setArrayType([], A.findType("JSArray<List<Object>?>"));
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._BigIntImpl__lastDividendDigits = null;
    $._BigIntImpl__lastDividendUsed = null;
    $._BigIntImpl__lastDivisorDigits = null;
    $._BigIntImpl__lastDivisorUsed = null;
    $._BigIntImpl____lastQuoRemDigits = A._Cell$named("_lastQuoRemDigits");
    $._BigIntImpl____lastQuoRemUsed = A._Cell$named("_lastQuoRemUsed");
    $._BigIntImpl____lastRemUsed = A._Cell$named("_lastRemUsed");
    $._BigIntImpl____lastRem_nsh = A._Cell$named("_lastRem_nsh");
    $.Uri__cachedBaseString = "";
    $.Uri__cachedBaseUri = null;
    $._Base32Const__b32rev = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, A.findType("Map<String,int>"));
    $.Bip39MnemonicConst_mnemonicWordNum = A._setArrayType([B.Bip39WordsNum_12, B.Bip39WordsNum_15, B.Bip39WordsNum_18, B.Bip39WordsNum_21, B.Bip39WordsNum_24], type$.JSArray_Bip39WordsNum);
    $._english = A._setArrayType(["abandon", "ability", "able", "about", "above", "absent", "absorb", "abstract", "absurd", "abuse", "access", "accident", "account", "accuse", "achieve", "acid", "acoustic", "acquire", "across", "act", "action", "actor", "actress", "actual", "adapt", "add", "addict", "address", "adjust", "admit", "adult", "advance", "advice", "aerobic", "affair", "afford", "afraid", "again", "age", "agent", "agree", "ahead", "aim", "air", "airport", "aisle", "alarm", "album", "alcohol", "alert", "alien", "all", "alley", "allow", "almost", "alone", "alpha", "already", "also", "alter", "always", "amateur", "amazing", "among", "amount", "amused", "analyst", "anchor", "ancient", "anger", "angle", "angry", "animal", "ankle", "announce", "annual", "another", "answer", "antenna", "antique", "anxiety", "any", "apart", "apology", "appear", "apple", "approve", "april", "arch", "arctic", "area", "arena", "argue", "arm", "armed", "armor", "army", "around", "arrange", "arrest", "arrive", "arrow", "art", "artefact", "artist", "artwork", "ask", "aspect", "assault", "asset", "assist", "assume", "asthma", "athlete", "atom", "attack", "attend", "attitude", "attract", "auction", "audit", "august", "aunt", "author", "auto", "autumn", "average", "avocado", "avoid", "awake", "aware", "away", "awesome", "awful", "awkward", "axis", "baby", "bachelor", "bacon", "badge", "bag", "balance", "balcony", "ball", "bamboo", "banana", "banner", "bar", "barely", "bargain", "barrel", "base", "basic", "basket", "battle", "beach", "bean", "beauty", "because", "become", "beef", "before", "begin", "behave", "behind", "believe", "below", "belt", "bench", "benefit", "best", "betray", "better", "between", "beyond", "bicycle", "bid", "bike", "bind", "biology", "bird", "birth", "bitter", "black", "blade", "blame", "blanket", "blast", "bleak", "bless", "blind", "blood", "blossom", "blouse", "blue", "blur", "blush", "board", "boat", "body", "boil", "bomb", "bone", "bonus", "book", "boost", "border", "boring", "borrow", "boss", "bottom", "bounce", "box", "boy", "bracket", "brain", "brand", "brass", "brave", "bread", "breeze", "brick", "bridge", "brief", "bright", "bring", "brisk", "broccoli", "broken", "bronze", "broom", "brother", "brown", "brush", "bubble", "buddy", "budget", "buffalo", "build", "bulb", "bulk", "bullet", "bundle", "bunker", "burden", "burger", "burst", "bus", "business", "busy", "butter", "buyer", "buzz", "cabbage", "cabin", "cable", "cactus", "cage", "cake", "call", "calm", "camera", "camp", "can", "canal", "cancel", "candy", "cannon", "canoe", "canvas", "canyon", "capable", "capital", "captain", "car", "carbon", "card", "cargo", "carpet", "carry", "cart", "case", "cash", "casino", "castle", "casual", "cat", "catalog", "catch", "category", "cattle", "caught", "cause", "caution", "cave", "ceiling", "celery", "cement", "census", "century", "cereal", "certain", "chair", "chalk", "champion", "change", "chaos", "chapter", "charge", "chase", "chat", "cheap", "check", "cheese", "chef", "cherry", "chest", "chicken", "chief", "child", "chimney", "choice", "choose", "chronic", "chuckle", "chunk", "churn", "cigar", "cinnamon", "circle", "citizen", "city", "civil", "claim", "clap", "clarify", "claw", "clay", "clean", "clerk", "clever", "click", "client", "cliff", "climb", "clinic", "clip", "clock", "clog", "close", "cloth", "cloud", "clown", "club", "clump", "cluster", "clutch", "coach", "coast", "coconut", "code", "coffee", "coil", "coin", "collect", "color", "column", "combine", "come", "comfort", "comic", "common", "company", "concert", "conduct", "confirm", "congress", "connect", "consider", "control", "convince", "cook", "cool", "copper", "copy", "coral", "core", "corn", "correct", "cost", "cotton", "couch", "country", "couple", "course", "cousin", "cover", "coyote", "crack", "cradle", "craft", "cram", "crane", "crash", "crater", "crawl", "crazy", "cream", "credit", "creek", "crew", "cricket", "crime", "crisp", "critic", "crop", "cross", "crouch", "crowd", "crucial", "cruel", "cruise", "crumble", "crunch", "crush", "cry", "crystal", "cube", "culture", "cup", "cupboard", "curious", "current", "curtain", "curve", "cushion", "custom", "cute", "cycle", "dad", "damage", "damp", "dance", "danger", "daring", "dash", "daughter", "dawn", "day", "deal", "debate", "debris", "decade", "december", "decide", "decline", "decorate", "decrease", "deer", "defense", "define", "defy", "degree", "delay", "deliver", "demand", "demise", "denial", "dentist", "deny", "depart", "depend", "deposit", "depth", "deputy", "derive", "describe", "desert", "design", "desk", "despair", "destroy", "detail", "detect", "develop", "device", "devote", "diagram", "dial", "diamond", "diary", "dice", "diesel", "diet", "differ", "digital", "dignity", "dilemma", "dinner", "dinosaur", "direct", "dirt", "disagree", "discover", "disease", "dish", "dismiss", "disorder", "display", "distance", "divert", "divide", "divorce", "dizzy", "doctor", "document", "dog", "doll", "dolphin", "domain", "donate", "donkey", "donor", "door", "dose", "double", "dove", "draft", "dragon", "drama", "drastic", "draw", "dream", "dress", "drift", "drill", "drink", "drip", "drive", "drop", "drum", "dry", "duck", "dumb", "dune", "during", "dust", "dutch", "duty", "dwarf", "dynamic", "eager", "eagle", "early", "earn", "earth", "easily", "east", "easy", "echo", "ecology", "economy", "edge", "edit", "educate", "effort", "egg", "eight", "either", "elbow", "elder", "electric", "elegant", "element", "elephant", "elevator", "elite", "else", "embark", "embody", "embrace", "emerge", "emotion", "employ", "empower", "empty", "enable", "enact", "end", "endless", "endorse", "enemy", "energy", "enforce", "engage", "engine", "enhance", "enjoy", "enlist", "enough", "enrich", "enroll", "ensure", "enter", "entire", "entry", "envelope", "episode", "equal", "equip", "era", "erase", "erode", "erosion", "error", "erupt", "escape", "essay", "essence", "estate", "eternal", "ethics", "evidence", "evil", "evoke", "evolve", "exact", "example", "excess", "exchange", "excite", "exclude", "excuse", "execute", "exercise", "exhaust", "exhibit", "exile", "exist", "exit", "exotic", "expand", "expect", "expire", "explain", "expose", "express", "extend", "extra", "eye", "eyebrow", "fabric", "face", "faculty", "fade", "faint", "faith", "fall", "false", "fame", "family", "famous", "fan", "fancy", "fantasy", "farm", "fashion", "fat", "fatal", "father", "fatigue", "fault", "favorite", "feature", "february", "federal", "fee", "feed", "feel", "female", "fence", "festival", "fetch", "fever", "few", "fiber", "fiction", "field", "figure", "file", "film", "filter", "final", "find", "fine", "finger", "finish", "fire", "firm", "first", "fiscal", "fish", "fit", "fitness", "fix", "flag", "flame", "flash", "flat", "flavor", "flee", "flight", "flip", "float", "flock", "floor", "flower", "fluid", "flush", "fly", "foam", "focus", "fog", "foil", "fold", "follow", "food", "foot", "force", "forest", "forget", "fork", "fortune", "forum", "forward", "fossil", "foster", "found", "fox", "fragile", "frame", "frequent", "fresh", "friend", "fringe", "frog", "front", "frost", "frown", "frozen", "fruit", "fuel", "fun", "funny", "furnace", "fury", "future", "gadget", "gain", "galaxy", "gallery", "game", "gap", "garage", "garbage", "garden", "garlic", "garment", "gas", "gasp", "gate", "gather", "gauge", "gaze", "general", "genius", "genre", "gentle", "genuine", "gesture", "ghost", "giant", "gift", "giggle", "ginger", "giraffe", "girl", "give", "glad", "glance", "glare", "glass", "glide", "glimpse", "globe", "gloom", "glory", "glove", "glow", "glue", "goat", "goddess", "gold", "good", "goose", "gorilla", "gospel", "gossip", "govern", "gown", "grab", "grace", "grain", "grant", "grape", "grass", "gravity", "great", "green", "grid", "grief", "grit", "grocery", "group", "grow", "grunt", "guard", "guess", "guide", "guilt", "guitar", "gun", "gym", "habit", "hair", "half", "hammer", "hamster", "hand", "happy", "harbor", "hard", "harsh", "harvest", "hat", "have", "hawk", "hazard", "head", "health", "heart", "heavy", "hedgehog", "height", "hello", "helmet", "help", "hen", "hero", "hidden", "high", "hill", "hint", "hip", "hire", "history", "hobby", "hockey", "hold", "hole", "holiday", "hollow", "home", "honey", "hood", "hope", "horn", "horror", "horse", "hospital", "host", "hotel", "hour", "hover", "hub", "huge", "human", "humble", "humor", "hundred", "hungry", "hunt", "hurdle", "hurry", "hurt", "husband", "hybrid", "ice", "icon", "idea", "identify", "idle", "ignore", "ill", "illegal", "illness", "image", "imitate", "immense", "immune", "impact", "impose", "improve", "impulse", "inch", "include", "income", "increase", "index", "indicate", "indoor", "industry", "infant", "inflict", "inform", "inhale", "inherit", "initial", "inject", "injury", "inmate", "inner", "innocent", "input", "inquiry", "insane", "insect", "inside", "inspire", "install", "intact", "interest", "into", "invest", "invite", "involve", "iron", "island", "isolate", "issue", "item", "ivory", "jacket", "jaguar", "jar", "jazz", "jealous", "jeans", "jelly", "jewel", "job", "join", "joke", "journey", "joy", "judge", "juice", "jump", "jungle", "junior", "junk", "just", "kangaroo", "keen", "keep", "ketchup", "key", "kick", "kid", "kidney", "kind", "kingdom", "kiss", "kit", "kitchen", "kite", "kitten", "kiwi", "knee", "knife", "knock", "know", "lab", "label", "labor", "ladder", "lady", "lake", "lamp", "language", "laptop", "large", "later", "latin", "laugh", "laundry", "lava", "law", "lawn", "lawsuit", "layer", "lazy", "leader", "leaf", "learn", "leave", "lecture", "left", "leg", "legal", "legend", "leisure", "lemon", "lend", "length", "lens", "leopard", "lesson", "letter", "level", "liar", "liberty", "library", "license", "life", "lift", "light", "like", "limb", "limit", "link", "lion", "liquid", "list", "little", "live", "lizard", "load", "loan", "lobster", "local", "lock", "logic", "lonely", "long", "loop", "lottery", "loud", "lounge", "love", "loyal", "lucky", "luggage", "lumber", "lunar", "lunch", "luxury", "lyrics", "machine", "mad", "magic", "magnet", "maid", "mail", "main", "major", "make", "mammal", "man", "manage", "mandate", "mango", "mansion", "manual", "maple", "marble", "march", "margin", "marine", "market", "marriage", "mask", "mass", "master", "match", "material", "math", "matrix", "matter", "maximum", "maze", "meadow", "mean", "measure", "meat", "mechanic", "medal", "media", "melody", "melt", "member", "memory", "mention", "menu", "mercy", "merge", "merit", "merry", "mesh", "message", "metal", "method", "middle", "midnight", "milk", "million", "mimic", "mind", "minimum", "minor", "minute", "miracle", "mirror", "misery", "miss", "mistake", "mix", "mixed", "mixture", "mobile", "model", "modify", "mom", "moment", "monitor", "monkey", "monster", "month", "moon", "moral", "more", "morning", "mosquito", "mother", "motion", "motor", "mountain", "mouse", "move", "movie", "much", "muffin", "mule", "multiply", "muscle", "museum", "mushroom", "music", "must", "mutual", "myself", "mystery", "myth", "naive", "name", "napkin", "narrow", "nasty", "nation", "nature", "near", "neck", "need", "negative", "neglect", "neither", "nephew", "nerve", "nest", "net", "network", "neutral", "never", "news", "next", "nice", "night", "noble", "noise", "nominee", "noodle", "normal", "north", "nose", "notable", "note", "nothing", "notice", "novel", "now", "nuclear", "number", "nurse", "nut", "oak", "obey", "object", "oblige", "obscure", "observe", "obtain", "obvious", "occur", "ocean", "october", "odor", "off", "offer", "office", "often", "oil", "okay", "old", "olive", "olympic", "omit", "once", "one", "onion", "online", "only", "open", "opera", "opinion", "oppose", "option", "orange", "orbit", "orchard", "order", "ordinary", "organ", "orient", "original", "orphan", "ostrich", "other", "outdoor", "outer", "output", "outside", "oval", "oven", "over", "own", "owner", "oxygen", "oyster", "ozone", "pact", "paddle", "page", "pair", "palace", "palm", "panda", "panel", "panic", "panther", "paper", "parade", "parent", "park", "parrot", "party", "pass", "patch", "path", "patient", "patrol", "pattern", "pause", "pave", "payment", "peace", "peanut", "pear", "peasant", "pelican", "pen", "penalty", "pencil", "people", "pepper", "perfect", "permit", "person", "pet", "phone", "photo", "phrase", "physical", "piano", "picnic", "picture", "piece", "pig", "pigeon", "pill", "pilot", "pink", "pioneer", "pipe", "pistol", "pitch", "pizza", "place", "planet", "plastic", "plate", "play", "please", "pledge", "pluck", "plug", "plunge", "poem", "poet", "point", "polar", "pole", "police", "pond", "pony", "pool", "popular", "portion", "position", "possible", "post", "potato", "pottery", "poverty", "powder", "power", "practice", "praise", "predict", "prefer", "prepare", "present", "pretty", "prevent", "price", "pride", "primary", "print", "priority", "prison", "private", "prize", "problem", "process", "produce", "profit", "program", "project", "promote", "proof", "property", "prosper", "protect", "proud", "provide", "public", "pudding", "pull", "pulp", "pulse", "pumpkin", "punch", "pupil", "puppy", "purchase", "purity", "purpose", "purse", "push", "put", "puzzle", "pyramid", "quality", "quantum", "quarter", "question", "quick", "quit", "quiz", "quote", "rabbit", "raccoon", "race", "rack", "radar", "radio", "rail", "rain", "raise", "rally", "ramp", "ranch", "random", "range", "rapid", "rare", "rate", "rather", "raven", "raw", "razor", "ready", "real", "reason", "rebel", "rebuild", "recall", "receive", "recipe", "record", "recycle", "reduce", "reflect", "reform", "refuse", "region", "regret", "regular", "reject", "relax", "release", "relief", "rely", "remain", "remember", "remind", "remove", "render", "renew", "rent", "reopen", "repair", "repeat", "replace", "report", "require", "rescue", "resemble", "resist", "resource", "response", "result", "retire", "retreat", "return", "reunion", "reveal", "review", "reward", "rhythm", "rib", "ribbon", "rice", "rich", "ride", "ridge", "rifle", "right", "rigid", "ring", "riot", "ripple", "risk", "ritual", "rival", "river", "road", "roast", "robot", "robust", "rocket", "romance", "roof", "rookie", "room", "rose", "rotate", "rough", "round", "route", "royal", "rubber", "rude", "rug", "rule", "run", "runway", "rural", "sad", "saddle", "sadness", "safe", "sail", "salad", "salmon", "salon", "salt", "salute", "same", "sample", "sand", "satisfy", "satoshi", "sauce", "sausage", "save", "say", "scale", "scan", "scare", "scatter", "scene", "scheme", "school", "science", "scissors", "scorpion", "scout", "scrap", "screen", "script", "scrub", "sea", "search", "season", "seat", "second", "secret", "section", "security", "seed", "seek", "segment", "select", "sell", "seminar", "senior", "sense", "sentence", "series", "service", "session", "settle", "setup", "seven", "shadow", "shaft", "shallow", "share", "shed", "shell", "sheriff", "shield", "shift", "shine", "ship", "shiver", "shock", "shoe", "shoot", "shop", "short", "shoulder", "shove", "shrimp", "shrug", "shuffle", "shy", "sibling", "sick", "side", "siege", "sight", "sign", "silent", "silk", "silly", "silver", "similar", "simple", "since", "sing", "siren", "sister", "situate", "six", "size", "skate", "sketch", "ski", "skill", "skin", "skirt", "skull", "slab", "slam", "sleep", "slender", "slice", "slide", "slight", "slim", "slogan", "slot", "slow", "slush", "small", "smart", "smile", "smoke", "smooth", "snack", "snake", "snap", "sniff", "snow", "soap", "soccer", "social", "sock", "soda", "soft", "solar", "soldier", "solid", "solution", "solve", "someone", "song", "soon", "sorry", "sort", "soul", "sound", "soup", "source", "south", "space", "spare", "spatial", "spawn", "speak", "special", "speed", "spell", "spend", "sphere", "spice", "spider", "spike", "spin", "spirit", "split", "spoil", "sponsor", "spoon", "sport", "spot", "spray", "spread", "spring", "spy", "square", "squeeze", "squirrel", "stable", "stadium", "staff", "stage", "stairs", "stamp", "stand", "start", "state", "stay", "steak", "steel", "stem", "step", "stereo", "stick", "still", "sting", "stock", "stomach", "stone", "stool", "story", "stove", "strategy", "street", "strike", "strong", "struggle", "student", "stuff", "stumble", "style", "subject", "submit", "subway", "success", "such", "sudden", "suffer", "sugar", "suggest", "suit", "summer", "sun", "sunny", "sunset", "super", "supply", "supreme", "sure", "surface", "surge", "surprise", "surround", "survey", "suspect", "sustain", "swallow", "swamp", "swap", "swarm", "swear", "sweet", "swift", "swim", "swing", "switch", "sword", "symbol", "symptom", "syrup", "system", "table", "tackle", "tag", "tail", "talent", "talk", "tank", "tape", "target", "task", "taste", "tattoo", "taxi", "teach", "team", "tell", "ten", "tenant", "tennis", "tent", "term", "test", "text", "thank", "that", "theme", "then", "theory", "there", "they", "thing", "this", "thought", "three", "thrive", "throw", "thumb", "thunder", "ticket", "tide", "tiger", "tilt", "timber", "time", "tiny", "tip", "tired", "tissue", "title", "toast", "tobacco", "today", "toddler", "toe", "together", "toilet", "token", "tomato", "tomorrow", "tone", "tongue", "tonight", "tool", "tooth", "top", "topic", "topple", "torch", "tornado", "tortoise", "toss", "total", "tourist", "toward", "tower", "town", "toy", "track", "trade", "traffic", "tragic", "train", "transfer", "trap", "trash", "travel", "tray", "treat", "tree", "trend", "trial", "tribe", "trick", "trigger", "trim", "trip", "trophy", "trouble", "truck", "true", "truly", "trumpet", "trust", "truth", "try", "tube", "tuition", "tumble", "tuna", "tunnel", "turkey", "turn", "turtle", "twelve", "twenty", "twice", "twin", "twist", "two", "type", "typical", "ugly", "umbrella", "unable", "unaware", "uncle", "uncover", "under", "undo", "unfair", "unfold", "unhappy", "uniform", "unique", "unit", "universe", "unknown", "unlock", "until", "unusual", "unveil", "update", "upgrade", "uphold", "upon", "upper", "upset", "urban", "urge", "usage", "use", "used", "useful", "useless", "usual", "utility", "vacant", "vacuum", "vague", "valid", "valley", "valve", "van", "vanish", "vapor", "various", "vast", "vault", "vehicle", "velvet", "vendor", "venture", "venue", "verb", "verify", "version", "very", "vessel", "veteran", "viable", "vibrant", "vicious", "victory", "video", "view", "village", "vintage", "violin", "virtual", "virus", "visa", "visit", "visual", "vital", "vivid", "vocal", "voice", "void", "volcano", "volume", "vote", "voyage", "wage", "wagon", "wait", "walk", "wall", "walnut", "want", "warfare", "warm", "warrior", "wash", "wasp", "waste", "water", "wave", "way", "wealth", "weapon", "wear", "weasel", "weather", "web", "wedding", "weekend", "weird", "welcome", "west", "wet", "whale", "what", "wheat", "wheel", "when", "where", "whip", "whisper", "wide", "width", "wife", "wild", "will", "win", "window", "wine", "wing", "wink", "winner", "winter", "wire", "wisdom", "wise", "wish", "witness", "wolf", "woman", "wonder", "wood", "wool", "word", "work", "world", "worry", "worth", "wrap", "wreck", "wrestle", "wrist", "write", "wrong", "yard", "year", "yellow", "you", "young", "youth", "zebra", "zero", "zone", "zoo"], type$.JSArray_String);
    $.MoneroEntropyGeneratorConst_entropyBitLen = A._setArrayType([128, 256], type$.JSArray_int);
    $._sigma = function() {
      var t1 = type$.JSArray_int;
      return A._setArrayType([A._setArrayType([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], t1), A._setArrayType([28, 20, 8, 16, 18, 30, 26, 12, 2, 24, 0, 4, 22, 14, 10, 6], t1), A._setArrayType([22, 16, 24, 0, 10, 4, 30, 26, 20, 28, 6, 12, 14, 2, 18, 8], t1), A._setArrayType([14, 18, 6, 2, 26, 24, 22, 28, 4, 12, 10, 20, 8, 0, 30, 16], t1), A._setArrayType([18, 0, 10, 14, 4, 8, 20, 30, 28, 2, 22, 24, 12, 16, 6, 26], t1), A._setArrayType([4, 24, 12, 20, 0, 22, 16, 6, 8, 26, 14, 10, 30, 28, 2, 18], t1), A._setArrayType([24, 10, 2, 30, 28, 26, 8, 20, 0, 14, 12, 6, 18, 4, 16, 22], t1), A._setArrayType([26, 22, 14, 28, 24, 2, 6, 18, 10, 0, 30, 8, 16, 12, 4, 20], t1), A._setArrayType([12, 30, 28, 18, 22, 6, 0, 16, 24, 4, 26, 14, 2, 8, 20, 10], t1), A._setArrayType([20, 4, 16, 8, 14, 12, 2, 10, 30, 22, 18, 28, 6, 24, 26, 0], t1), A._setArrayType([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], t1), A._setArrayType([28, 20, 8, 16, 18, 30, 26, 12, 2, 24, 0, 4, 22, 14, 10, 6], t1)], type$.JSArray_List_int);
    }();
    $._currentUriBase = null;
    $._current = null;
    $.___cryptoHandler = A._Cell$named("_cryptoHandler");
    $._init = false;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "nullFuture", "$get$nullFuture", () => B.C__RootZone.run$1$1(new A.nullFuture_closure(), A.findType("Future<Null>")));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "Future__nullFuture", "$get$Future__nullFuture", () => A.findType("_Future<Null>")._as($.$get$nullFuture()));
    _lazyFinal($, "_Utf8Decoder__reusableBuffer", "$get$_Utf8Decoder__reusableBuffer", () => A.NativeUint8List_NativeUint8List(4096));
    _lazyFinal($, "_Utf8Decoder__decoder", "$get$_Utf8Decoder__decoder", () => new A._Utf8Decoder__decoder_closure().call$0());
    _lazyFinal($, "_Utf8Decoder__decoderNonfatal", "$get$_Utf8Decoder__decoderNonfatal", () => new A._Utf8Decoder__decoderNonfatal_closure().call$0());
    _lazyFinal($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", () => A.NativeInt8List__create1(A._ensureNativeList(A._setArrayType([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], type$.JSArray_int))));
    _lazy($, "_Base64Decoder__emptyBuffer", "$get$_Base64Decoder__emptyBuffer", () => A.NativeUint8List_NativeUint8List(0));
    _lazyFinal($, "Encoding__nameToEncoding", "$get$Encoding__nameToEncoding", () => A.LinkedHashMap_LinkedHashMap$_literal(["iso_8859-1:1987", B.C_Latin1Codec, "iso-ir-100", B.C_Latin1Codec, "iso_8859-1", B.C_Latin1Codec, "iso-8859-1", B.C_Latin1Codec, "latin1", B.C_Latin1Codec, "l1", B.C_Latin1Codec, "ibm819", B.C_Latin1Codec, "cp819", B.C_Latin1Codec, "csisolatin1", B.C_Latin1Codec, "iso-ir-6", B.C_AsciiCodec, "ansi_x3.4-1968", B.C_AsciiCodec, "ansi_x3.4-1986", B.C_AsciiCodec, "iso_646.irv:1991", B.C_AsciiCodec, "iso646-us", B.C_AsciiCodec, "us-ascii", B.C_AsciiCodec, "us", B.C_AsciiCodec, "ibm367", B.C_AsciiCodec, "cp367", B.C_AsciiCodec, "csascii", B.C_AsciiCodec, "ascii", B.C_AsciiCodec, "csutf8", B.C_Utf8Codec, "utf-8", B.C_Utf8Codec], type$.String, A.findType("Encoding")));
    _lazyFinal($, "_dummyList", "$get$_dummyList", () => A.NativeUint16List_NativeUint16List(0));
    _lazyFinal($, "_BigIntImpl_zero", "$get$_BigIntImpl_zero", () => A._BigIntImpl__BigIntImpl$_fromInt(0));
    _lazyFinal($, "_BigIntImpl_one", "$get$_BigIntImpl_one", () => A._BigIntImpl__BigIntImpl$_fromInt(1));
    _lazyFinal($, "_BigIntImpl_two", "$get$_BigIntImpl_two", () => A._BigIntImpl__BigIntImpl$_fromInt(2));
    _lazyFinal($, "_BigIntImpl__minusOne", "$get$_BigIntImpl__minusOne", () => $.$get$_BigIntImpl_one().$negate(0));
    _lazyFinal($, "_BigIntImpl__bigInt10000", "$get$_BigIntImpl__bigInt10000", () => A._BigIntImpl__BigIntImpl$_fromInt(10000));
    _lazy($, "_BigIntImpl__parseRE", "$get$_BigIntImpl__parseRE", () => A.RegExp_RegExp("^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$", false));
    _lazyFinal($, "_BigIntImpl__bitsForFromDouble", "$get$_BigIntImpl__bitsForFromDouble", () => A.NativeUint8List_NativeUint8List(8));
    _lazyFinal($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", () => A.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", true));
    _lazyFinal($, "_Uri__useURLSearchParams", "$get$_Uri__useURLSearchParams", () => typeof URLSearchParams == "function");
    _lazyFinal($, "DateTime__parseFormat", "$get$DateTime__parseFormat", () => A.RegExp_RegExp("^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d+))?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$", true));
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_QJv));
    _lazyFinal($, "_scannerTables", "$get$_scannerTables", () => A._createTables());
    _lazyFinal($, "Random__secureRandom", "$get$Random__secureRandom", () => {
      var t1 = new A._JSSecureRandom(A.NativeByteData_NativeByteData(8));
      t1._JSSecureRandom$0();
      return t1;
    });
    _lazyFinal($, "Bip32Const_mainNetKeyNetVersions", "$get$Bip32Const_mainNetKeyNetVersions", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 136, 178, 30], true, t1), A.List_List$from([4, 136, 173, 228], true, t1));
    });
    _lazyFinal($, "Bip32Const_testNetKeyNetVersions", "$get$Bip32Const_testNetKeyNetVersions", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 53, 135, 207], true, t1), A.List_List$from([4, 53, 131, 148], true, t1));
    });
    _lazy($, "Bip32Const_kholawKeyNetVersions", "$get$Bip32Const_kholawKeyNetVersions", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 136, 178, 30], true, t1), A.List_List$from([15, 67, 49, 212], true, t1));
    });
    _lazyFinal($, "Bip44Coins__coinToConf", "$get$Bip44Coins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Bip44Coins_akashNetwork, $.$get$Bip44Conf_akashNetwork(), B.Bip44Coins_algorand, $.$get$Bip44Conf_algorand(), B.Bip44Coins_aptos, $.$get$Bip44Conf_aptos(), B.Bip44Coins_avaxCChain, $.$get$Bip44Conf_avaxCChain(), B.Bip44Coins_avaxPChain, $.$get$Bip44Conf_avaxPChain(), B.Bip44Coins_avaxXChain, $.$get$Bip44Conf_avaxXChain(), B.Bip44Coins_axelar, $.$get$Bip44Conf_axelar(), B.Bip44Coins_bandProtocol, $.$get$Bip44Conf_bandProtocol(), B.Bip44Coins_binanceChain, $.$get$Bip44Conf_binanceChain(), B.Bip44Coins_binanceSmartChain, $.$get$Bip44Conf_binanceSmartChain(), B.Bip44Coins_bitcoin, $.$get$Bip44Conf_bitcoinMainNet(), B.Bip44Coins_bitcoinTestnet, $.$get$Bip44Conf_bitcoinTestNet(), B.Bip44Coins_bitcoinCash, $.$get$Bip44Conf_bitcoinCashMainNet(), B.Bip44Coins_bitcoinCashTestnet, $.$get$Bip44Conf_bitcoinCashTestNet(), B.Bip44Coins_bitcoinCashSlp, $.$get$Bip44Conf_bitcoinCashSlpMainNet(), B.Bip44Coins_bitcoinCashSlpTestnet, $.$get$Bip44Conf_bitcoinCashSlpTestNet(), B.Bip44Coins_bitcoinSv, $.$get$Bip44Conf_bitcoinSvMainNet(), B.Bip44Coins_bitcoinSvTestnet, $.$get$Bip44Conf_bitcoinSvTestNet(), B.Bip44Coins_cardanoByronIcarus, $.$get$Bip44Conf_cardanoByronIcarus(), B.Bip44Coins_cardanoByronLedger, $.$get$Bip44Conf_cardanoByronLedger(), B.Bip44Coins_cardanoByronIcarusTestnet, $.$get$Bip44Conf_cardanoByronIcarusTestnet(), B.Bip44Coins_cardanoByronLedgerTestnet, $.$get$Bip44Conf_cardanoByronLedgerTestnet(), B.Bip44Coins_celo, $.$get$Bip44Conf_celo(), B.Bip44Coins_certik, $.$get$Bip44Conf_certik(), B.Bip44Coins_chihuahua, $.$get$Bip44Conf_chihuahua(), B.Bip44Coins_cosmos, $.$get$Bip44Conf_cosmos(), B.Bip44Coins_cosmosTestnet, $.$get$Bip44Conf_cosmosTestnet(), B.Bip44Coins_cosmosNist256p1, $.$get$Bip44Conf_cosmosNist256p1(), B.Bip44Coins_cosmosTestnetNist256p1, $.$get$Bip44Conf_cosmosTestnetNist256p1(), B.Bip44Coins_cosmosEd25519, $.$get$Bip44Conf_cosmosEd25519(), B.Bip44Coins_cosmosTestnetEd25519, $.$get$Bip44Conf_cosmosTestnetEd25519(), B.Bip44Coins_cosmosEthSecp256k1, $.$get$Bip44Conf_cosmosEthSecp256k1(), B.Bip44Coins_cosmosTestnetEthSecp256k1, $.$get$Bip44Conf_cosmosTestnetEthSecp256k1(), B.Bip44Coins_dash, $.$get$Bip44Conf_dashMainNet(), B.Bip44Coins_dashTestnet, $.$get$Bip44Conf_dashTestNet(), B.Bip44Coins_dogecoin, $.$get$Bip44Conf_dogecoinMainNet(), B.Bip44Coins_dogecoinTestnet, $.$get$Bip44Conf_dogecoinTestNet(), B.Bip44Coins_pepecoin, $.$get$Bip44Conf_pepeMainnet(), B.Bip44Coins_pepecoinTestnet, $.$get$Bip44Conf_pepeTestnet(), B.Bip44Coins_ecash, $.$get$Bip44Conf_ecashMainNet(), B.Bip44Coins_ecashTestnet, $.$get$Bip44Conf_ecashTestNet(), B.Bip44Coins_elrond, $.$get$Bip44Conf_elrond(), B.Bip44Coins_eos, $.$get$Bip44Conf_eos(), B.Bip44Coins_ergo, $.$get$Bip44Conf_ergoMainNet(), B.Bip44Coins_ergoTestnet, $.$get$Bip44Conf_ergoTestNet(), B.Bip44Coins_ethereum, $.$get$Bip44Conf_ethereum(), B.Bip44Coins_ethereumTestnet, $.$get$Bip44Conf_ethereumTestnet(), B.Bip44Coins_ethereumClassic, $.$get$Bip44Conf_ethereumClassic(), B.Bip44Coins_fantomOpera, $.$get$Bip44Conf_fantomOpera(), B.Bip44Coins_filecoin, $.$get$Bip44Conf_filecoin(), B.Bip44Coins_harmonyOneAtom, $.$get$Bip44Conf_harmonyOneAtom(), B.Bip44Coins_harmonyOneEth, $.$get$Bip44Conf_harmonyOneEth(), B.Bip44Coins_harmonyOneMetamask, $.$get$Bip44Conf_harmonyOneMetamask(), B.Bip44Coins_huobiChain, $.$get$Bip44Conf_huobiChain(), B.Bip44Coins_icon, $.$get$Bip44Conf_icon(), B.Bip44Coins_injective, $.$get$Bip44Conf_injective(), B.Bip44Coins_irisNet, $.$get$Bip44Conf_irisNet(), B.Bip44Coins_kava, $.$get$Bip44Conf_kava(), B.Bip44Coins_kusamaEd25519Slip, $.$get$Bip44Conf_kusamaEd25519Slip(), B.Bip44Coins_kusamaTestnetEd25519Slip, $.$get$Bip44Conf_kusamaTestnetEd25519Slip(), B.Bip44Coins_litecoin, $.$get$Bip44Conf_litecoinMainNet(), B.Bip44Coins_litecoinTestnet, $.$get$Bip44Conf_litecoinTestNet(), B.Bip44Coins_moneroEd25519Slip, $.$get$Bip44Conf_moneroEd25519Slip(), B.Bip44Coins_moneroSecp256k1, $.$get$Bip44Conf_moneroSecp256k1(), B.Bip44Coins_nano, $.$get$Bip44Conf_nano(), B.Bip44Coins_nearProtocol, $.$get$Bip44Conf_nearProtocol(), B.Bip44Coins_neo, $.$get$Bip44Conf_neo(), B.Bip44Coins_nineChroniclesGold, $.$get$Bip44Conf_nineChroniclesGold(), B.Bip44Coins_okexChainAtom, $.$get$Bip44Conf_okexChainAtom(), B.Bip44Coins_okexChainAtomOld, $.$get$Bip44Conf_okexChainAtomOld(), B.Bip44Coins_okexChainEth, $.$get$Bip44Conf_okexChainEth(), B.Bip44Coins_ontology, $.$get$Bip44Conf_ontology(), B.Bip44Coins_osmosis, $.$get$Bip44Conf_osmosis(), B.Bip44Coins_piNetwork, $.$get$Bip44Conf_piNetwork(), B.Bip44Coins_polkadotEd25519Slip, $.$get$Bip44Conf_polkadotEd25519Slip(), B.Bip44Coins_polkadotTestnetEd25519Slip, $.$get$Bip44Conf_polkadotTestnetEd25519Slip(), B.Bip44Coins_polygon, $.$get$Bip44Conf_polygon(), B.Bip44Coins_ripple, $.$get$Bip44Conf_ripple(), B.Bip44Coins_rippleTestnet, $.$get$Bip44Conf_rippleTestnet(), B.Bip44Coins_rippleED25519, $.$get$Bip44Conf_rippleEd25519(), B.Bip44Coins_rippleTestnetED25519, $.$get$Bip44Conf_rippleTestnetEd25519(), B.Bip44Coins_secretNetworkOld, $.$get$Bip44Conf_secretNetworkOld(), B.Bip44Coins_secretNetworkNew, $.$get$Bip44Conf_secretNetworkNew(), B.Bip44Coins_solana, $.$get$Bip44Conf_solana(), B.Bip44Coins_solanaTestnet, $.$get$Bip44Conf_solanaTestnet(), B.Bip44Coins_stellar, $.$get$Bip44Conf_stellar(), B.Bip44Coins_stellarTestnet, $.$get$Bip44Conf_stellarTestnet(), B.Bip44Coins_terra, $.$get$Bip44Conf_terra(), B.Bip44Coins_tezos, $.$get$Bip44Conf_tezos(), B.Bip44Coins_theta, $.$get$Bip44Conf_theta(), B.Bip44Coins_tron, $.$get$Bip44Conf_tron(), B.Bip44Coins_tronTestnet, $.$get$Bip44Conf_tronTestnet(), B.Bip44Coins_vechain, $.$get$Bip44Conf_vechain(), B.Bip44Coins_verge, $.$get$Bip44Conf_verge(), B.Bip44Coins_zcash, $.$get$Bip44Conf_zcashMainNet(), B.Bip44Coins_zcashTestnet, $.$get$Bip44Conf_zcashTestNet(), B.Bip44Coins_zilliqa, $.$get$Bip44Conf_zilliqa(), B.Bip44Coins_tonTestnet, $.$get$Bip44Conf_tonTestnet(), B.Bip44Coins_tonMainnet, $.$get$Bip44Conf_tonMainnet(), B.Bip44Coins_electraProtocol, $.$get$Bip44Conf_electraProtocolMainNet(), B.Bip44Coins_electraProtocolTestnet, $.$get$Bip44Conf_electraProtocolTestNet()], type$.Bip44Coins, type$.BipCoinConfig));
    _lazyFinal($, "Bip44Conf_bip44BtcKeyNetVerMain", "$get$Bip44Conf_bip44BtcKeyNetVerMain", () => $.$get$Bip32Const_mainNetKeyNetVersions());
    _lazyFinal($, "Bip44Conf_bip44BtcKeyNetVerTest", "$get$Bip44Conf_bip44BtcKeyNetVerTest", () => $.$get$Bip32Const_testNetKeyNetVersions());
    _lazyFinal($, "Bip44Conf_akashNetwork", "$get$Bip44Conf_akashNetwork", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "akash"], type$.String, type$.dynamic), new A.Bip44Conf_akashNetwork_closure(), B.ChainType_1_mainnet, 118, B.CoinNames_z8q, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_algorand", "$get$Bip44Conf_algorand", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_algorand_closure(), B.ChainType_1_mainnet, 283, B.CoinNames_Algorand, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_ed25519, null));
    _lazyFinal($, "Bip44Conf_aptos", "$get$Bip44Conf_aptos", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_aptos_closure(), B.ChainType_1_mainnet, 637, B.CoinNames_Aptos, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_ed25519, null));
    _lazyFinal($, "Bip44Conf_avaxCChain", "$get$Bip44Conf_avaxCChain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_avaxCChain_closure(), B.ChainType_1_mainnet, 60, B.CoinNames_AdS1, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_avaxPChain", "$get$Bip44Conf_avaxPChain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_avaxPChain_closure(), B.ChainType_1_mainnet, 9000, B.CoinNames_AdS0, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_avaxXChain", "$get$Bip44Conf_avaxXChain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_avaxXChain_closure(), B.ChainType_1_mainnet, 9000, B.CoinNames_AdS, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_axelar", "$get$Bip44Conf_axelar", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "axelar"], type$.String, type$.dynamic), new A.Bip44Conf_axelar_closure(), B.ChainType_1_mainnet, 118, B.CoinNames_Axelar, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_bandProtocol", "$get$Bip44Conf_bandProtocol", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "band"], type$.String, type$.dynamic), new A.Bip44Conf_bandProtocol_closure(), B.ChainType_1_mainnet, 494, B.CoinNames_FCG0, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_binanceChain", "$get$Bip44Conf_binanceChain", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "bnb"], type$.String, type$.dynamic), new A.Bip44Conf_binanceChain_closure(), B.ChainType_1_mainnet, 714, B.CoinNames_D4j, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_binanceSmartChain", "$get$Bip44Conf_binanceSmartChain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_binanceSmartChain_closure(), B.ChainType_1_mainnet, 60, B.CoinNames_Due, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_bitcoinMainNet", "$get$Bip44Conf_bitcoinMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0], type$.String, type$.dynamic), new A.Bip44Conf_bitcoinMainNet_closure(), B.ChainType_1_mainnet, 0, B.CoinNames_Bitcoin, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_bitcoinTestNet", "$get$Bip44Conf_bitcoinTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_111], type$.String, type$.dynamic), new A.Bip44Conf_bitcoinTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_tuc, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_bitcoinCashMainNet", "$get$Bip44Conf_bitcoinCashMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "bitcoincash"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_bitcoinCashMainNet_closure(), B.ChainType_1_mainnet, 145, B.CoinNames_CDm, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_bitcoinCashTestNet", "$get$Bip44Conf_bitcoinCashTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "bchtest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_111], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_bitcoinCashTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_Iot, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_bitcoinCashSlpMainNet", "$get$Bip44Conf_bitcoinCashSlpMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "simpleledger"], t2, type$.nullable_Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_bitcoinCashSlpMainNet_closure(), B.ChainType_1_mainnet, 145, B.CoinNames_rCZ, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_bitcoinCashSlpTestNet", "$get$Bip44Conf_bitcoinCashSlpTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "slptest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_111], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_bitcoinCashSlpTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_FCG, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_bitcoinSvMainNet", "$get$Bip44Conf_bitcoinSvMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0], type$.String, type$.dynamic), new A.Bip44Conf_bitcoinSvMainNet_closure(), B.ChainType_1_mainnet, 236, B.CoinNames_BitcoinSV, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_bitcoinSvTestNet", "$get$Bip44Conf_bitcoinSvTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_111], type$.String, type$.dynamic), new A.Bip44Conf_bitcoinSvTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_B2l, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_cardanoByronIcarus", "$get$Bip44Conf_cardanoByronIcarus", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true, "is_icarus", true], type$.String, type$.dynamic), new A.Bip44Conf_cardanoByronIcarus_closure(), B.ChainType_1_mainnet, 1815, B.CoinNames_Cardano, "0'/0/0", t1, B.EllipticCurveTypes_ed25519Kholaw, null);
    });
    _lazyFinal($, "Bip44Conf_cardanoByronLedger", "$get$Bip44Conf_cardanoByronLedger", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true], type$.String, type$.dynamic), new A.Bip44Conf_cardanoByronLedger_closure(), B.ChainType_1_mainnet, 1815, B.CoinNames_Cardano, "0'/0/0", t1, B.EllipticCurveTypes_ed25519Kholaw, null);
    });
    _lazyFinal($, "Bip44Conf_cardanoByronIcarusTestnet", "$get$Bip44Conf_cardanoByronIcarusTestnet", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true, "is_icarus", true], type$.String, type$.dynamic), new A.Bip44Conf_cardanoByronIcarusTestnet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_Cardano, "0'/0/0", t1, B.EllipticCurveTypes_ed25519Kholaw, null);
    });
    _lazyFinal($, "Bip44Conf_cardanoByronLedgerTestnet", "$get$Bip44Conf_cardanoByronLedgerTestnet", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true], type$.String, type$.dynamic), new A.Bip44Conf_cardanoByronLedgerTestnet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_Cardano, "0'/0/0", t1, B.EllipticCurveTypes_ed25519Kholaw, null);
    });
    _lazyFinal($, "Bip44Conf_celo", "$get$Bip44Conf_celo", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_celo_closure(), B.ChainType_1_mainnet, 52752, B.CoinNames_Celo, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_certik", "$get$Bip44Conf_certik", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "certik"], type$.String, type$.dynamic), new A.Bip44Conf_certik_closure(), B.ChainType_1_mainnet, 118, B.CoinNames_Certik, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_chihuahua", "$get$Bip44Conf_chihuahua", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "chihuahua"], type$.String, type$.dynamic), new A.Bip44Conf_chihuahua_closure(), B.ChainType_1_mainnet, 118, B.CoinNames_Chihuahua, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_cosmos", "$get$Bip44Conf_cosmos", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmos_closure(), B.ChainType_1_mainnet, 118, B.CoinNames_Cosmos, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosTestnet", "$get$Bip44Conf_cosmosTestnet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosTestnet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_Cosmos, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosEthSecp256k1", "$get$Bip44Conf_cosmosEthSecp256k1", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosEthSecp256k1_closure(), B.ChainType_1_mainnet, 118, B.CoinNames_Cosmos, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosTestnetEthSecp256k1", "$get$Bip44Conf_cosmosTestnetEthSecp256k1", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosTestnetEthSecp256k1_closure(), B.ChainType_0_testnet, 1, B.CoinNames_Cosmos, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosNist256p1", "$get$Bip44Conf_cosmosNist256p1", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosNist256p1_closure(), B.ChainType_1_mainnet, 118, B.CoinNames_Cosmos, "0'/0/0", t1, B.EllipticCurveTypes_nist256p1, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosTestnetNist256p1", "$get$Bip44Conf_cosmosTestnetNist256p1", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosTestnetNist256p1_closure(), B.ChainType_0_testnet, 1, B.CoinNames_Cosmos, "0'/0/0", t1, B.EllipticCurveTypes_nist256p1, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosEd25519", "$get$Bip44Conf_cosmosEd25519", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosEd25519_closure(), B.ChainType_1_mainnet, 118, B.CoinNames_Cosmos, "0'/0'/0'", t1, B.EllipticCurveTypes_ed25519, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosTestnetEd25519", "$get$Bip44Conf_cosmosTestnetEd25519", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosTestnetEd25519_closure(), B.ChainType_0_testnet, 1, B.CoinNames_Cosmos, "0'/0'/0'", t1, B.EllipticCurveTypes_ed25519, null);
    });
    _lazyFinal($, "Bip44Conf_dashMainNet", "$get$Bip44Conf_dashMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_76], type$.String, type$.dynamic), new A.Bip44Conf_dashMainNet_closure(), B.ChainType_1_mainnet, 5, B.CoinNames_Dash, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_204);
    });
    _lazyFinal($, "Bip44Conf_dashTestNet", "$get$Bip44Conf_dashTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_140], type$.String, type$.dynamic), new A.Bip44Conf_dashTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_MUB, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_dogecoinMainNet", "$get$Bip44Conf_dogecoinMainNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([2, 250, 202, 253], true, t1), A.List_List$from([2, 250, 195, 152], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_30], type$.String, type$.dynamic), new A.Bip44Conf_dogecoinMainNet_closure(), B.ChainType_1_mainnet, 3, B.CoinNames_Dogecoin, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_158);
    });
    _lazyFinal($, "Bip44Conf_dogecoinTestNet", "$get$Bip44Conf_dogecoinTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 50, 169, 168], true, t1), A.List_List$from([4, 50, 162, 67], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_113], type$.String, type$.dynamic), new A.Bip44Conf_dogecoinTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_OPN, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_241);
    });
    _lazyFinal($, "Bip44Conf_pepeMainnet", "$get$Bip44Conf_pepeMainnet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([2, 250, 202, 253], true, t1), A.List_List$from([2, 250, 195, 152], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_56], type$.String, type$.dynamic), new A.Bip44Conf_pepeMainnet_closure(), B.ChainType_1_mainnet, 3434, B.CoinNames_Pepecoin, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_158);
    });
    _lazyFinal($, "Bip44Conf_pepeTestnet", "$get$Bip44Conf_pepeTestnet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 50, 169, 168], true, t1), A.List_List$from([4, 50, 162, 67], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_113], type$.String, type$.dynamic), new A.Bip44Conf_pepeTestnet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_QyU, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_241);
    });
    _lazyFinal($, "Bip44Conf_ecashMainNet", "$get$Bip44Conf_ecashMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "ecash"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_ecashMainNet_closure(), B.ChainType_1_mainnet, 145, B.CoinNames_eCash, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_ecashTestNet", "$get$Bip44Conf_ecashTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "ectest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_111], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_ecashTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_HZw, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_elrond", "$get$Bip44Conf_elrond", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_elrond_closure(), B.ChainType_1_mainnet, 508, B.CoinNames_qxe, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_ed25519, null));
    _lazyFinal($, "Bip44Conf_eos", "$get$Bip44Conf_eos", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_eos_closure(), B.ChainType_1_mainnet, 194, B.CoinNames_EOS, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_ergoMainNet", "$get$Bip44Conf_ergoMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_type", B.ErgoNetworkTypes_0], type$.String, type$.dynamic), new A.Bip44Conf_ergoMainNet_closure(), B.ChainType_1_mainnet, 429, B.CoinNames_Ergo, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_ergoTestNet", "$get$Bip44Conf_ergoTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_type", B.ErgoNetworkTypes_16], type$.String, type$.dynamic), new A.Bip44Conf_ergoTestNet_closure(), B.ChainType_0_testnet, 429, B.CoinNames_4N8, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_ethereum", "$get$Bip44Conf_ethereum", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_ethereum_closure(), B.ChainType_1_mainnet, 60, B.CoinNames_Ethereum, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_ethereumTestnet", "$get$Bip44Conf_ethereumTestnet", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_ethereumTestnet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_Ethereum, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_ethereumClassic", "$get$Bip44Conf_ethereumClassic", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_ethereumClassic_closure(), B.ChainType_1_mainnet, 61, B.CoinNames_mqm, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_fantomOpera", "$get$Bip44Conf_fantomOpera", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_fantomOpera_closure(), B.ChainType_1_mainnet, 60, B.CoinNames_JiH, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_filecoin", "$get$Bip44Conf_filecoin", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_filecoin_closure(), B.ChainType_1_mainnet, 461, B.CoinNames_Filecoin, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_harmonyOneMetamask", "$get$Bip44Conf_harmonyOneMetamask", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_harmonyOneMetamask_closure(), B.ChainType_1_mainnet, 60, B.CoinNames_eHw, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_harmonyOneEth", "$get$Bip44Conf_harmonyOneEth", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_harmonyOneEth_closure(), B.ChainType_1_mainnet, 1023, B.CoinNames_eHw, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_harmonyOneAtom", "$get$Bip44Conf_harmonyOneAtom", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_harmonyOneAtom_closure(), B.ChainType_1_mainnet, 1023, B.CoinNames_eHw, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_huobiChain", "$get$Bip44Conf_huobiChain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_huobiChain_closure(), B.ChainType_1_mainnet, 60, B.CoinNames_MYA, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_icon", "$get$Bip44Conf_icon", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_icon_closure(), B.ChainType_1_mainnet, 74, B.CoinNames_Icon, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_injective", "$get$Bip44Conf_injective", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_injective_closure(), B.ChainType_1_mainnet, 60, B.CoinNames_Injective, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_irisNet", "$get$Bip44Conf_irisNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "iaa"], type$.String, type$.dynamic), new A.Bip44Conf_irisNet_closure(), B.ChainType_1_mainnet, 118, B.CoinNames_e9z, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_kava", "$get$Bip44Conf_kava", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "kava"], type$.String, type$.dynamic), new A.Bip44Conf_kava_closure(), B.ChainType_1_mainnet, 459, B.CoinNames_Kava, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_kusamaEd25519Slip", "$get$Bip44Conf_kusamaEd25519Slip", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ss58_format", 2], type$.String, type$.dynamic), new A.Bip44Conf_kusamaEd25519Slip_closure(), B.ChainType_1_mainnet, 434, B.CoinNames_Kusama, "0'/0'/0'", t1, B.EllipticCurveTypes_ed25519, null);
    });
    _lazyFinal($, "Bip44Conf_kusamaTestnetEd25519Slip", "$get$Bip44Conf_kusamaTestnetEd25519Slip", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ss58_format", 2], type$.String, type$.dynamic), new A.Bip44Conf_kusamaTestnetEd25519Slip_closure(), B.ChainType_1_mainnet, 1, B.CoinNames_Kusama, "0'/0'/0'", t1, B.EllipticCurveTypes_ed25519, null);
    });
    _lazyFinal($, "Bip44Conf_litecoinMainNet", "$get$Bip44Conf_litecoinMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain(),
        t2 = type$.int;
      t2 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([1, 157, 164, 98], true, t2), A.List_List$from([1, 157, 156, 254], true, t2));
      return A.BipLitecoinConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std_net_ver", B.List_48, "depr_net_ver", B.List_0], type$.String, type$.dynamic), new A.Bip44Conf_litecoinMainNet_closure(), t2, B.ChainType_1_mainnet, 2, B.CoinNames_Litecoin, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_176);
    });
    _lazyFinal($, "Bip44Conf_litecoinTestNet", "$get$Bip44Conf_litecoinTestNet", () => {
      var t1 = type$.int,
        t2 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 54, 246, 225], true, t1), A.List_List$from([4, 54, 239, 125], true, t1));
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 54, 246, 225], true, t1), A.List_List$from([4, 54, 239, 125], true, t1));
      return A.BipLitecoinConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std_net_ver", B.List_111, "depr_net_ver", B.List_111], type$.String, type$.dynamic), new A.Bip44Conf_litecoinTestNet_closure(), t1, B.ChainType_0_testnet, 1, B.CoinNames_IIS, "0'/0/0", t2, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_moneroEd25519Slip", "$get$Bip44Conf_moneroEd25519Slip", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_moneroEd25519Slip_closure(), B.ChainType_1_mainnet, 128, B.CoinNames_Monero, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_ed25519, null));
    _lazyFinal($, "Bip44Conf_moneroSecp256k1", "$get$Bip44Conf_moneroSecp256k1", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_moneroSecp256k1_closure(), B.ChainType_1_mainnet, 128, B.CoinNames_Monero, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_nano", "$get$Bip44Conf_nano", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_nano_closure(), B.ChainType_1_mainnet, 165, B.CoinNames_Nano, "0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_ed25519Blake2b, null));
    _lazyFinal($, "Bip44Conf_nearProtocol", "$get$Bip44Conf_nearProtocol", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_nearProtocol_closure(), B.ChainType_1_mainnet, 397, B.CoinNames_OWX, "0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_ed25519, null));
    _lazyFinal($, "Bip44Conf_neo", "$get$Bip44Conf_neo", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ver", B.List_23], type$.String, type$.dynamic), new A.Bip44Conf_neo_closure(), B.ChainType_1_mainnet, 888, B.CoinNames_NEO, "0'/0/0", t1, B.EllipticCurveTypes_nist256p1, null);
    });
    _lazyFinal($, "Bip44Conf_nineChroniclesGold", "$get$Bip44Conf_nineChroniclesGold", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_nineChroniclesGold_closure(), B.ChainType_1_mainnet, 567, B.CoinNames_NineChroniclesGold, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_okexChainEth", "$get$Bip44Conf_okexChainEth", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_okexChainEth_closure(), B.ChainType_1_mainnet, 60, B.CoinNames_OKExChain, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_okexChainAtom", "$get$Bip44Conf_okexChainAtom", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_okexChainAtom_closure(), B.ChainType_1_mainnet, 60, B.CoinNames_OKExChain, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_okexChainAtomOld", "$get$Bip44Conf_okexChainAtomOld", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_okexChainAtomOld_closure(), B.ChainType_1_mainnet, 996, B.CoinNames_OKExChain, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_ontology", "$get$Bip44Conf_ontology", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ver", B.List_23], type$.String, type$.dynamic), new A.Bip44Conf_ontology_closure(), B.ChainType_1_mainnet, 1024, B.CoinNames_Ontology, "0'/0/0", t1, B.EllipticCurveTypes_nist256p1, null);
    });
    _lazyFinal($, "Bip44Conf_osmosis", "$get$Bip44Conf_osmosis", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "osmo"], type$.String, type$.dynamic), new A.Bip44Conf_osmosis_closure(), B.ChainType_1_mainnet, 118, B.CoinNames_Osmosis, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_piNetwork", "$get$Bip44Conf_piNetwork", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["addr_type", B.XlmAddrTypes_48_PublicKey], type$.String, type$.dynamic), new A.Bip44Conf_piNetwork_closure(), B.ChainType_1_mainnet, 314159, B.CoinNames_adc, "0'", t1, B.EllipticCurveTypes_ed25519, null);
    });
    _lazyFinal($, "Bip44Conf_polkadotEd25519Slip", "$get$Bip44Conf_polkadotEd25519Slip", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ss58_format", 0], type$.String, type$.dynamic), new A.Bip44Conf_polkadotEd25519Slip_closure(), B.ChainType_1_mainnet, 354, B.CoinNames_Polkadot, "0'/0'/0'", t1, B.EllipticCurveTypes_ed25519, null);
    });
    _lazyFinal($, "Bip44Conf_polkadotTestnetEd25519Slip", "$get$Bip44Conf_polkadotTestnetEd25519Slip", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ss58_format", 42], type$.String, type$.dynamic), new A.Bip44Conf_polkadotTestnetEd25519Slip_closure(), B.ChainType_0_testnet, 1, B.CoinNames_Polkadot, "0'/0'/0'", t1, B.EllipticCurveTypes_ed25519, null);
    });
    _lazyFinal($, "Bip44Conf_polygon", "$get$Bip44Conf_polygon", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_polygon_closure(), B.ChainType_1_mainnet, 60, B.CoinNames_Polygon, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_ripple", "$get$Bip44Conf_ripple", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["prefix", B.List_5_68], type$.String, type$.dynamic), new A.Bip44Conf_ripple_closure(), B.ChainType_1_mainnet, 144, B.CoinNames_Ripple, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_rippleTestnet", "$get$Bip44Conf_rippleTestnet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["prefix", B.List_4_147], type$.String, type$.dynamic), new A.Bip44Conf_rippleTestnet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_Ripple, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_rippleEd25519", "$get$Bip44Conf_rippleEd25519", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["prefix", B.List_5_68, "curve_type", B.EllipticCurveTypes_ed25519], type$.String, type$.dynamic), new A.Bip44Conf_rippleEd25519_closure(), B.ChainType_1_mainnet, 144, B.CoinNames_Ripple, "0'/0'/0'", t1, B.EllipticCurveTypes_ed25519, null);
    });
    _lazyFinal($, "Bip44Conf_rippleTestnetEd25519", "$get$Bip44Conf_rippleTestnetEd25519", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["prefix", B.List_4_147, "curve_type", B.EllipticCurveTypes_ed25519], type$.String, type$.dynamic), new A.Bip44Conf_rippleTestnetEd25519_closure(), B.ChainType_0_testnet, 1, B.CoinNames_Ripple, "0'/0'/0'", t1, B.EllipticCurveTypes_ed25519, null);
    });
    _lazyFinal($, "Bip44Conf_secretNetworkOld", "$get$Bip44Conf_secretNetworkOld", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "secret"], type$.String, type$.dynamic), new A.Bip44Conf_secretNetworkOld_closure(), B.ChainType_1_mainnet, 118, B.CoinNames_ki8, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_secretNetworkNew", "$get$Bip44Conf_secretNetworkNew", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "secret"], type$.String, type$.dynamic), new A.Bip44Conf_secretNetworkNew_closure(), B.ChainType_1_mainnet, 529, B.CoinNames_ki8, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_solana", "$get$Bip44Conf_solana", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_solana_closure(), B.ChainType_1_mainnet, 501, B.CoinNames_Solana, "0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_ed25519, null));
    _lazyFinal($, "Bip44Conf_solanaTestnet", "$get$Bip44Conf_solanaTestnet", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_solanaTestnet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_Solana, "0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_ed25519, null));
    _lazyFinal($, "Bip44Conf_stellar", "$get$Bip44Conf_stellar", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["addr_type", B.XlmAddrTypes_48_PublicKey], type$.String, type$.dynamic), new A.Bip44Conf_stellar_closure(), B.ChainType_1_mainnet, 148, B.CoinNames_Stellar, "0'", t1, B.EllipticCurveTypes_ed25519, null);
    });
    _lazyFinal($, "Bip44Conf_stellarTestnet", "$get$Bip44Conf_stellarTestnet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["addr_type", B.XlmAddrTypes_48_PublicKey], type$.String, type$.dynamic), new A.Bip44Conf_stellarTestnet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_Stellar, "0'", t1, B.EllipticCurveTypes_ed25519, null);
    });
    _lazyFinal($, "Bip44Conf_terra", "$get$Bip44Conf_terra", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "terra"], type$.String, type$.dynamic), new A.Bip44Conf_terra_closure(), B.ChainType_1_mainnet, 330, B.CoinNames_Terra, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, null);
    });
    _lazyFinal($, "Bip44Conf_tezos", "$get$Bip44Conf_tezos", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["prefix", B.C_XtzAddrPrefixes], type$.String, type$.dynamic), new A.Bip44Conf_tezos_closure(), B.ChainType_1_mainnet, 1729, B.CoinNames_Tezos, "0'/0'", t1, B.EllipticCurveTypes_ed25519, null);
    });
    _lazyFinal($, "Bip44Conf_theta", "$get$Bip44Conf_theta", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_theta_closure(), B.ChainType_1_mainnet, 500, B.CoinNames_qd4, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_tron", "$get$Bip44Conf_tron", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_tron_closure(), B.ChainType_1_mainnet, 195, B.CoinNames_Tron, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_tronTestnet", "$get$Bip44Conf_tronTestnet", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_tronTestnet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_Tron, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_vechain", "$get$Bip44Conf_vechain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_vechain_closure(), B.ChainType_1_mainnet, 818, B.CoinNames_VeChain, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_verge", "$get$Bip44Conf_verge", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_30], type$.String, type$.dynamic), new A.Bip44Conf_verge_closure(), B.ChainType_1_mainnet, 77, B.CoinNames_Verge, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_158);
    });
    _lazyFinal($, "Bip44Conf_zcashMainNet", "$get$Bip44Conf_zcashMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_28_184], type$.String, type$.dynamic), new A.Bip44Conf_zcashMainNet_closure(), B.ChainType_1_mainnet, 133, B.CoinNames_Zcash, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_zcashTestNet", "$get$Bip44Conf_zcashTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_29_37], type$.String, type$.dynamic), new A.Bip44Conf_zcashTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_O1S, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_zilliqa", "$get$Bip44Conf_zilliqa", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_zilliqa_closure(), B.ChainType_1_mainnet, 313, B.CoinNames_Zilliqa, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), B.EllipticCurveTypes_secp256k1, null));
    _lazyFinal($, "Bip44Conf_tonMainnet", "$get$Bip44Conf_tonMainnet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["workchain", 0], type$.String, type$.dynamic), new A.Bip44Conf_tonMainnet_closure(), B.ChainType_1_mainnet, 607, B.CoinNames_aBy, "0'", t1, B.EllipticCurveTypes_ed25519, null);
    });
    _lazyFinal($, "Bip44Conf_tonTestnet", "$get$Bip44Conf_tonTestnet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["workchain", -1], type$.String, type$.dynamic), new A.Bip44Conf_tonTestnet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_aBy0, "0'", t1, B.EllipticCurveTypes_ed25519, null);
    });
    _lazyFinal($, "Bip44Conf_electraProtocolMainNet", "$get$Bip44Conf_electraProtocolMainNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 136, 178, 30], true, t1), A.List_List$from([4, 136, 173, 228], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_55], type$.String, type$.dynamic), new A.Bip44Conf_electraProtocolMainNet_closure(), B.ChainType_1_mainnet, 597, B.CoinNames_Ecu, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_162);
    });
    _lazyFinal($, "Bip44Conf_electraProtocolTestNet", "$get$Bip44Conf_electraProtocolTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 53, 135, 207], true, t1), A.List_List$from([4, 53, 131, 148], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_141], type$.String, type$.dynamic), new A.Bip44Conf_electraProtocolTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_CBI, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip49Coins__coinToConf", "$get$Bip49Coins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Bip49Coins_bitcoin, $.$get$Bip49Conf_bitcoinMainNet(), B.Bip49Coins_bitcoinTestnet, $.$get$Bip49Conf_bitcoinTestNet(), B.Bip49Coins_bitcoinCash, $.$get$Bip49Conf_bitcoinCashMainNet(), B.Bip49Coins_bitcoinCashTestnet, $.$get$Bip49Conf_bitcoinCashTestNet(), B.Bip49Coins_bitcoinCashSlp, $.$get$Bip49Conf_bitcoinCashSlpMainNet(), B.Bip49Coins_bitcoinCashSlpTestnet, $.$get$Bip49Conf_bitcoinCashSlpTestNet(), B.Bip49Coins_bitcoinSv, $.$get$Bip49Conf_bitcoinSvMainNet(), B.Bip49Coins_bitcoinSvTestnet, $.$get$Bip49Conf_bitcoinSvTestNet(), B.Bip49Coins_dash, $.$get$Bip49Conf_dashMainNet(), B.Bip49Coins_dashTestnet, $.$get$Bip49Conf_dashTestNet(), B.Bip49Coins_dogecoin, $.$get$Bip49Conf_dogecoinMainNet(), B.Bip49Coins_dogecoinTestnet, $.$get$Bip49Conf_dogecoinTestNet(), B.Bip49Coins_ecash, $.$get$Bip49Conf_ecashMainNet(), B.Bip49Coins_ecashTestnet, $.$get$Bip49Conf_ecashTestNet(), B.Bip49Coins_litecoin, $.$get$Bip49Conf_litecoinMainNet(), B.Bip49Coins_litecoinTestnet, $.$get$Bip49Conf_litecoinTestNet(), B.Bip49Coins_zcash, $.$get$Bip49Conf_zcashMainNet(), B.Bip49Coins_zcashTestnet, $.$get$Bip49Conf_zcashTestNet(), B.Bip49Coins_pepecoin, $.$get$Bip49Conf_pepeMainnet(), B.Bip49Coins_pepecoinTestnet, $.$get$Bip49Conf_pepeTestnet(), B.Bip49Coins_electraProtocol, $.$get$Bip49Conf_electraProtocolMainNet(), B.Bip49Coins_electraProtocolTestnet, $.$get$Bip49Conf_electraProtocolTestNet()], type$.Bip49Coins, type$.BipCoinConfig));
    _lazyFinal($, "Bip49Conf_bip49BtcKeyNetVerMain", "$get$Bip49Conf_bip49BtcKeyNetVerMain", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 157, 124, 178], true, t1), A.List_List$from([4, 157, 120, 120], true, t1));
    });
    _lazyFinal($, "Bip49Conf_bip49BtcKeyNetVerTest", "$get$Bip49Conf_bip49BtcKeyNetVerTest", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 74, 82, 98], true, t1), A.List_List$from([4, 74, 78, 40], true, t1));
    });
    _lazyFinal($, "Bip49Conf_dashMainNet", "$get$Bip49Conf_dashMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_16], type$.String, type$.dynamic), new A.Bip49Conf_dashMainNet_closure(), B.ChainType_1_mainnet, 5, B.CoinNames_Dash, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_204);
    });
    _lazyFinal($, "Bip49Conf_dashTestNet", "$get$Bip49Conf_dashTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_19], type$.String, type$.dynamic), new A.Bip49Conf_dashTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_MUB, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_dogecoinMainNet", "$get$Bip49Conf_dogecoinMainNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([2, 250, 202, 253], true, t1), A.List_List$from([2, 250, 195, 152], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_22], type$.String, type$.dynamic), new A.Bip49Conf_dogecoinMainNet_closure(), B.ChainType_1_mainnet, 3, B.CoinNames_Dogecoin, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_158);
    });
    _lazyFinal($, "Bip49Conf_dogecoinTestNet", "$get$Bip49Conf_dogecoinTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 50, 169, 168], true, t1), A.List_List$from([4, 50, 162, 67], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], type$.String, type$.dynamic), new A.Bip49Conf_dogecoinTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_OPN, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_241);
    });
    _lazyFinal($, "Bip49Conf_litecoinMainNet", "$get$Bip49Conf_litecoinMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain(),
        t2 = type$.int;
      t2 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([1, 178, 110, 246], true, t2), A.List_List$from([1, 178, 103, 146], true, t2));
      return A.BipLitecoinConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std_net_ver", B.List_50, "depr_net_ver", B.List_5], type$.String, type$.dynamic), new A.Bip49Conf_litecoinMainNet_closure(), t2, B.ChainType_1_mainnet, 2, B.CoinNames_Litecoin, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_176);
    });
    _lazyFinal($, "Bip49Conf_litecoinTestNet", "$get$Bip49Conf_litecoinTestNet", () => {
      var t1 = type$.int,
        t2 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 54, 246, 225], true, t1), A.List_List$from([4, 54, 239, 125], true, t1));
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 54, 246, 225], true, t1), A.List_List$from([4, 54, 239, 125], true, t1));
      return A.BipLitecoinConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std_net_ver", B.List_58, "depr_net_ver", B.List_196], type$.String, type$.dynamic), new A.Bip49Conf_litecoinTestNet_closure(), t1, B.ChainType_0_testnet, 1, B.CoinNames_IIS, "0'/0/0", t2, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_zcashMainNet", "$get$Bip49Conf_zcashMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_28_189], type$.String, type$.dynamic), new A.Bip49Conf_zcashMainNet_closure(), B.ChainType_1_mainnet, 133, B.CoinNames_Zcash, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_zcashTestNet", "$get$Bip49Conf_zcashTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_28_186], type$.String, type$.dynamic), new A.Bip49Conf_zcashTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_O1S, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_bitcoinMainNet", "$get$Bip49Conf_bitcoinMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_5], type$.String, type$.dynamic), new A.Bip49Conf_bitcoinMainNet_closure(), B.ChainType_1_mainnet, 0, B.CoinNames_Bitcoin, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_bitcoinTestNet", "$get$Bip49Conf_bitcoinTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], type$.String, type$.dynamic), new A.Bip49Conf_bitcoinTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_tuc, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_bitcoinSvMainNet", "$get$Bip49Conf_bitcoinSvMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_5], type$.String, type$.dynamic), new A.Bip49Conf_bitcoinSvMainNet_closure(), B.ChainType_1_mainnet, 236, B.CoinNames_BitcoinSV, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_bitcoinSvTestNet", "$get$Bip49Conf_bitcoinSvTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], type$.String, type$.dynamic), new A.Bip49Conf_bitcoinSvTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_B2l, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_bitcoinCashMainNet", "$get$Bip49Conf_bitcoinCashMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "bitcoincash"], t2, type$.nullable_Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_5], t2, type$.nullable_List_int)], t2, type$.dynamic), new A.Bip49Conf_bitcoinCashMainNet_closure(), B.ChainType_1_mainnet, 145, B.CoinNames_CDm, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_bitcoinCashTestNet", "$get$Bip49Conf_bitcoinCashTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "bchtest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], t2, type$.List_int)], t2, type$.dynamic), new A.Bip49Conf_bitcoinCashTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_Iot, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_bitcoinCashSlpMainNet", "$get$Bip49Conf_bitcoinCashSlpMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "simpleledger"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_5], t2, type$.List_int)], t2, type$.dynamic), new A.Bip49Conf_bitcoinCashSlpMainNet_closure(), B.ChainType_1_mainnet, 145, B.CoinNames_rCZ, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_bitcoinCashSlpTestNet", "$get$Bip49Conf_bitcoinCashSlpTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "slptest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], t2, type$.List_int)], t2, type$.dynamic), new A.Bip49Conf_bitcoinCashSlpTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_FCG, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_ecashMainNet", "$get$Bip49Conf_ecashMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "ecash"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_5], t2, type$.List_int)], t2, type$.dynamic), new A.Bip49Conf_ecashMainNet_closure(), B.ChainType_1_mainnet, 145, B.CoinNames_eCash, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_ecashTestNet", "$get$Bip49Conf_ecashTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "ectest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], t2, type$.List_int)], t2, type$.dynamic), new A.Bip49Conf_ecashTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_HZw, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_pepeMainnet", "$get$Bip49Conf_pepeMainnet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([2, 250, 202, 253], true, t1), A.List_List$from([2, 250, 195, 152], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_22], type$.String, type$.dynamic), new A.Bip49Conf_pepeMainnet_closure(), B.ChainType_1_mainnet, 3434, B.CoinNames_Pepecoin, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_158);
    });
    _lazyFinal($, "Bip49Conf_pepeTestnet", "$get$Bip49Conf_pepeTestnet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 50, 169, 168], true, t1), A.List_List$from([4, 50, 162, 67], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], type$.String, type$.dynamic), new A.Bip49Conf_pepeTestnet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_QyU, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_241);
    });
    _lazyFinal($, "Bip49Conf_electraProtocolMainNet", "$get$Bip49Conf_electraProtocolMainNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 136, 178, 30], true, t1), A.List_List$from([4, 136, 173, 228], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_137], type$.String, type$.dynamic), new A.Bip49Conf_electraProtocolMainNet_closure(), B.ChainType_1_mainnet, 597, B.CoinNames_Ecu, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_162);
    });
    _lazyFinal($, "Bip49Conf_electraProtocolTestNet", "$get$Bip49Conf_electraProtocolTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 53, 135, 207], true, t1), A.List_List$from([4, 53, 131, 148], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_19], type$.String, type$.dynamic), new A.Bip49Conf_electraProtocolTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_CBI, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip84Coins__coinToConf", "$get$Bip84Coins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Bip84Coins_bitcoin, $.$get$Bip84Conf_bitcoinMainNet(), B.Bip84Coins_bitcoinTestnet, $.$get$Bip84Conf_bitcoinTestNet(), B.Bip84Coins_litecoin, $.$get$Bip84Conf_litecoinMainNet(), B.Bip84Coins_litecoinTestnet, $.$get$Bip84Conf_litecoinTestNet(), B.Bip84Coins_electraProtocol, $.$get$Bip84Conf_electraProtocolMainNet(), B.Bip84Coins_electraProtocolTestnet, $.$get$Bip84Conf_electraProtocolTestNet()], type$.Bip84Coins, type$.BipCoinConfig));
    _lazyFinal($, "Bip84Conf_bip84BtcKeyNetVer", "$get$Bip84Conf_bip84BtcKeyNetVer", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 178, 71, 70], true, t1), A.List_List$from([4, 178, 67, 12], true, t1));
    });
    _lazyFinal($, "Bip84Conf_bitcoinMainNet", "$get$Bip84Conf_bitcoinMainNet", () => {
      var t1 = $.$get$Bip84Conf_bip84BtcKeyNetVer();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "bc"], type$.String, type$.dynamic), new A.Bip84Conf_bitcoinMainNet_closure(), B.ChainType_1_mainnet, 0, B.CoinNames_Bitcoin, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_128);
    });
    _lazyFinal($, "Bip84Conf_bitcoinTestNet", "$get$Bip84Conf_bitcoinTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 95, 28, 246], true, t1), A.List_List$from([4, 95, 24, 188], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "tb"], type$.String, type$.dynamic), new A.Bip84Conf_bitcoinTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_tuc, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip84Conf_litecoinMainNet", "$get$Bip84Conf_litecoinMainNet", () => {
      var t1 = $.$get$Bip84Conf_bip84BtcKeyNetVer();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "ltc"], type$.String, type$.dynamic), new A.Bip84Conf_litecoinMainNet_closure(), B.ChainType_1_mainnet, 2, B.CoinNames_Litecoin, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_176);
    });
    _lazyFinal($, "Bip84Conf_litecoinTestNet", "$get$Bip84Conf_litecoinTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 54, 246, 225], true, t1), A.List_List$from([4, 54, 239, 125], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "tltc"], type$.String, type$.dynamic), new A.Bip84Conf_litecoinTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_IIS, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip84Conf_electraProtocolMainNet", "$get$Bip84Conf_electraProtocolMainNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 136, 178, 30], true, t1), A.List_List$from([4, 136, 173, 228], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "ep"], type$.String, type$.dynamic), new A.Bip84Conf_electraProtocolMainNet_closure(), B.ChainType_1_mainnet, 597, B.CoinNames_Ecu, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_162);
    });
    _lazyFinal($, "Bip84Conf_electraProtocolTestNet", "$get$Bip84Conf_electraProtocolTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 53, 135, 207], true, t1), A.List_List$from([4, 53, 131, 148], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "ep"], type$.String, type$.dynamic), new A.Bip84Conf_electraProtocolTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_CBI, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Bip86Coins__coinToConf", "$get$Bip86Coins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Bip86Coins_bitcoin, $.$get$Bip86Conf_bitcoinMainNet(), B.Bip86Coins_bitcoinTestnet, $.$get$Bip86Conf_bitcoinTestNet()], type$.Bip86Coins, type$.BipCoinConfig));
    _lazyFinal($, "Bip86Conf_bip86BtcKeyNetVer", "$get$Bip86Conf_bip86BtcKeyNetVer", () => $.$get$Bip32Const_mainNetKeyNetVersions());
    _lazyFinal($, "Bip86Conf_bip86BtcKeyNetVerTest", "$get$Bip86Conf_bip86BtcKeyNetVerTest", () => $.$get$Bip32Const_testNetKeyNetVersions());
    _lazy($, "Bip86Conf_bitcoinMainNet", "$get$Bip86Conf_bitcoinMainNet", () => {
      var t1 = $.$get$Bip86Conf_bip86BtcKeyNetVer();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "bc"], type$.String, type$.dynamic), new A.Bip86Conf_bitcoinMainNet_closure(), B.ChainType_1_mainnet, 0, B.CoinNames_Bitcoin, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_128);
    });
    _lazy($, "Bip86Conf_bitcoinTestNet", "$get$Bip86Conf_bitcoinTestNet", () => {
      var t1 = $.$get$Bip86Conf_bip86BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "tb"], type$.String, type$.dynamic), new A.Bip86Conf_bitcoinTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_tuc, "0'/0/0", t1, B.EllipticCurveTypes_secp256k1, B.List_239);
    });
    _lazyFinal($, "Cip1852Coins__coinToConf", "$get$Cip1852Coins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Cip1852Coins_cardanoIcarus, $.$get$Cip1852Conf_cardanoIcarusMainNet(), B.Cip1852Coins_cardanoLedger, $.$get$Cip1852Conf_cardanoLedgerMainNet(), B.Cip1852Coins_cardanoIcarusTestnet, $.$get$Cip1852Conf_cardanoIcarusTestNet(), B.Cip1852Coins_cardanoLedgerTestnet, $.$get$Cip1852Conf_cardanoLedgerTestNet()], type$.Cip1852Coins, type$.BipCoinConfig));
    _lazyFinal($, "Cip1852Conf_cardanoIcarusMainNet", "$get$Cip1852Conf_cardanoIcarusMainNet", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_tag", B.ADANetwork_1_mainnet, "is_icarus", true], type$.String, type$.dynamic), new A.Cip1852Conf_cardanoIcarusMainNet_closure(), B.ChainType_1_mainnet, 1815, B.CoinNames_Cardano, "0'/0/0", t1, B.EllipticCurveTypes_ed25519Kholaw, null);
    });
    _lazyFinal($, "Cip1852Conf_cardanoIcarusTestNet", "$get$Cip1852Conf_cardanoIcarusTestNet", () => {
      var t1 = $.$get$Bip32Const_testNetKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_tag", B.ADANetwork_0_testnetPreview, "is_icarus", true], type$.String, type$.dynamic), new A.Cip1852Conf_cardanoIcarusTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_UiL, "0'/0/0", t1, B.EllipticCurveTypes_ed25519Kholaw, null);
    });
    _lazyFinal($, "Cip1852Conf_cardanoLedgerMainNet", "$get$Cip1852Conf_cardanoLedgerMainNet", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_tag", B.ADANetwork_1_mainnet], type$.String, type$.dynamic), new A.Cip1852Conf_cardanoLedgerMainNet_closure(), B.ChainType_1_mainnet, 1815, B.CoinNames_Cardano, "0'/0/0", t1, B.EllipticCurveTypes_ed25519Kholaw, null);
    });
    _lazyFinal($, "Cip1852Conf_cardanoLedgerTestNet", "$get$Cip1852Conf_cardanoLedgerTestNet", () => {
      var t1 = $.$get$Bip32Const_testNetKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_tag", B.ADANetwork_0_testnetPreview], type$.String, type$.dynamic), new A.Cip1852Conf_cardanoLedgerTestNet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_UiL, "0'/0/0", t1, B.EllipticCurveTypes_ed25519Kholaw, null);
    });
    _lazyFinal($, "MoneroCoins__coinToConf", "$get$MoneroCoins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.MoneroCoins_moneroMainnet, $.$get$MoneroConf_mainNet(), B.MoneroCoins_moneroStagenet, $.$get$MoneroConf_stageNet(), B.MoneroCoins_moneroTestnet, $.$get$MoneroConf_testNet()], type$.MoneroCoins, A.findType("MoneroCoinConf")));
    _lazyFinal($, "MoneroConf_mainNet", "$get$MoneroConf_mainNet", () => A.MoneroCoinConf_MoneroCoinConf$fromCoinConf(B.ChainType_1_mainnet, B.CoinConf_ka6));
    _lazyFinal($, "MoneroConf_stageNet", "$get$MoneroConf_stageNet", () => A.MoneroCoinConf_MoneroCoinConf$fromCoinConf(B.ChainType_0_testnet, B.CoinConf_uMa));
    _lazyFinal($, "MoneroConf_testNet", "$get$MoneroConf_testNet", () => A.MoneroCoinConf_MoneroCoinConf$fromCoinConf(B.ChainType_0_testnet, B.CoinConf_o0y));
    _lazyFinal($, "MoneroMnemonicGeneratorConst_wordsNumToEntropyLen", "$get$MoneroMnemonicGeneratorConst_wordsNumToEntropyLen", () => A.LinkedHashMap_LinkedHashMap$_literal([B.MoneroWordsNum_12, 128, B.MoneroWordsNum_13, 128, B.MoneroWordsNum_24, 256, B.MoneroWordsNum_25, 256], type$.MoneroWordsNum, type$.int));
    _lazyFinal($, "SubstrateCoins__coinToConf", "$get$SubstrateCoins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.SubstrateCoins_acalaEd25519, $.$get$SubstrateConf_acalaEd25519(), B.SubstrateCoins_acalaSecp256k1, $.$get$SubstrateConf_acalaSecp256k1(), B.SubstrateCoins_acalaSr25519, $.$get$SubstrateConf_acalaSr25519(), B.SubstrateCoins_bifrostEd25519, $.$get$SubstrateConf_bifrostEd25519(), B.SubstrateCoins_bifrostSecp256k1, $.$get$SubstrateConf_bifrostSecp256k1(), B.SubstrateCoins_bifrostSr25519, $.$get$SubstrateConf_bifrostSr25519(), B.SubstrateCoins_chainxEd25519, $.$get$SubstrateConf_chainXEd25519(), B.SubstrateCoins_chainxSecp256k1, $.$get$SubstrateConf_chainXSecp256k1(), B.SubstrateCoins_chainxSr25519, $.$get$SubstrateConf_chainXSr25519(), B.SubstrateCoins_edgewareEd25519, $.$get$SubstrateConf_edgewareEd25519(), B.SubstrateCoins_edgewareSecp256k1, $.$get$SubstrateConf_edgewareSecp256k1(), B.SubstrateCoins_edgewareSr25519, $.$get$SubstrateConf_edgewareSr25519(), B.SubstrateCoins_genericEd25519, $.$get$SubstrateConf_genericEd25519(), B.SubstrateCoins_genericSecp256k1, $.$get$SubstrateConf_genericSecp256k1(), B.SubstrateCoins_genericSr25519, $.$get$SubstrateConf_genericSr25519(), B.SubstrateCoins_karuraEd25519, $.$get$SubstrateConf_karuraEd25519(), B.SubstrateCoins_karuraSecp256k1, $.$get$SubstrateConf_karuraSecp256k1(), B.SubstrateCoins_karuraSr25519, $.$get$SubstrateConf_karuraSr25519(), B.SubstrateCoins_kusamaEd25519, $.$get$SubstrateConf_kusamaEd25519(), B.SubstrateCoins_kusamaSecp256k1, $.$get$SubstrateConf_kusamaSecp256k1(), B.SubstrateCoins_kusamaSr25519, $.$get$SubstrateConf_kusamaSr25519(), B.SubstrateCoins_moonbeamEd25519, $.$get$SubstrateConf_moonbeamEd25519(), B.SubstrateCoins_moonbeamSecp256k1, $.$get$SubstrateConf_moonbeamSecp256k1(), B.SubstrateCoins_moonbeamSr25519, $.$get$SubstrateConf_moonbeamSr25519(), B.SubstrateCoins_moonriverEd25519, $.$get$SubstrateConf_moonriverEd25519(), B.SubstrateCoins_moonriverSecp256k1, $.$get$SubstrateConf_moonriverSecp256k1(), B.SubstrateCoins_moonriverSr25519, $.$get$SubstrateConf_moonriverSr25519(), B.SubstrateCoins_phalaEd25519, $.$get$SubstrateConf_phalaEd25519(), B.SubstrateCoins_phalaSecp256k1, $.$get$SubstrateConf_phalaSecp256k1(), B.SubstrateCoins_phalaSr25519, $.$get$SubstrateConf_phalaSr25519(), B.SubstrateCoins_plasmEd25519, $.$get$SubstrateConf_plasmEd25519(), B.SubstrateCoins_plasmSecp256k1, $.$get$SubstrateConf_plasmSecp256k1(), B.SubstrateCoins_plasmSr25519, $.$get$SubstrateConf_plasmSr25519(), B.SubstrateCoins_polkadotEd25519, $.$get$SubstrateConf_polkadotEd25519(), B.SubstrateCoins_polkadotSecp256k1, $.$get$SubstrateConf_polkadotSecp256k1(), B.SubstrateCoins_polkadotSr25519, $.$get$SubstrateConf_polkadotSr25519(), B.SubstrateCoins_soraEd25519, $.$get$SubstrateConf_soraEd25519(), B.SubstrateCoins_soraSecp256k1, $.$get$SubstrateConf_soraSecp256k1(), B.SubstrateCoins_soraSr25519, $.$get$SubstrateConf_soraSr25519(), B.SubstrateCoins_stafiEd25519, $.$get$SubstrateConf_stafiEd25519(), B.SubstrateCoins_stafiSecp256k1, $.$get$SubstrateConf_stafiSecp256k1(), B.SubstrateCoins_stafiSr25519, $.$get$SubstrateConf_stafiSr25519()], type$.SubstrateCoins, A.findType("SubstrateCoinConf")));
    _lazyFinal($, "SubstrateConf_acalaEd25519", "$get$SubstrateConf_acalaEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_acalaEd25519_closure(), B.ChainType_1_mainnet, B.CoinConf_tXW, B.EllipticCurveTypes_ed25519));
    _lazyFinal($, "SubstrateConf_acalaSecp256k1", "$get$SubstrateConf_acalaSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_acalaSecp256k1_closure(), B.ChainType_1_mainnet, B.CoinConf_tXW, B.EllipticCurveTypes_secp256k1));
    _lazyFinal($, "SubstrateConf_acalaSr25519", "$get$SubstrateConf_acalaSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_acalaSr25519_closure(), B.ChainType_1_mainnet, B.CoinConf_tXW, B.EllipticCurveTypes_sr25519));
    _lazyFinal($, "SubstrateConf_bifrostEd25519", "$get$SubstrateConf_bifrostEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_bifrostEd25519_closure(), B.ChainType_1_mainnet, B.CoinConf_o6u, B.EllipticCurveTypes_ed25519));
    _lazyFinal($, "SubstrateConf_bifrostSecp256k1", "$get$SubstrateConf_bifrostSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_bifrostSecp256k1_closure(), B.ChainType_1_mainnet, B.CoinConf_o6u, B.EllipticCurveTypes_secp256k1));
    _lazyFinal($, "SubstrateConf_bifrostSr25519", "$get$SubstrateConf_bifrostSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_bifrostSr25519_closure(), B.ChainType_1_mainnet, B.CoinConf_o6u, B.EllipticCurveTypes_sr25519));
    _lazyFinal($, "SubstrateConf_chainXEd25519", "$get$SubstrateConf_chainXEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_chainXEd25519_closure(), B.ChainType_1_mainnet, B.CoinConf_qx4, B.EllipticCurveTypes_ed25519));
    _lazyFinal($, "SubstrateConf_chainXSecp256k1", "$get$SubstrateConf_chainXSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_chainXSecp256k1_closure(), B.ChainType_1_mainnet, B.CoinConf_qx4, B.EllipticCurveTypes_secp256k1));
    _lazyFinal($, "SubstrateConf_chainXSr25519", "$get$SubstrateConf_chainXSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_chainXSr25519_closure(), B.ChainType_1_mainnet, B.CoinConf_qx4, B.EllipticCurveTypes_sr25519));
    _lazyFinal($, "SubstrateConf_edgewareEd25519", "$get$SubstrateConf_edgewareEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_edgewareEd25519_closure(), B.ChainType_1_mainnet, B.CoinConf_1ck, B.EllipticCurveTypes_ed25519));
    _lazyFinal($, "SubstrateConf_edgewareSecp256k1", "$get$SubstrateConf_edgewareSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_edgewareSecp256k1_closure(), B.ChainType_1_mainnet, B.CoinConf_1ck, B.EllipticCurveTypes_secp256k1));
    _lazyFinal($, "SubstrateConf_edgewareSr25519", "$get$SubstrateConf_edgewareSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_edgewareSr25519_closure(), B.ChainType_1_mainnet, B.CoinConf_1ck, B.EllipticCurveTypes_sr25519));
    _lazyFinal($, "SubstrateConf_genericEd25519", "$get$SubstrateConf_genericEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_genericEd25519_closure(), B.ChainType_1_mainnet, B.CoinConf_Lhy, B.EllipticCurveTypes_ed25519));
    _lazyFinal($, "SubstrateConf_genericSecp256k1", "$get$SubstrateConf_genericSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_genericSecp256k1_closure(), B.ChainType_1_mainnet, B.CoinConf_Lhy, B.EllipticCurveTypes_secp256k1));
    _lazyFinal($, "SubstrateConf_genericSr25519", "$get$SubstrateConf_genericSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_genericSr25519_closure(), B.ChainType_1_mainnet, B.CoinConf_Lhy, B.EllipticCurveTypes_sr25519));
    _lazyFinal($, "SubstrateConf_karuraEd25519", "$get$SubstrateConf_karuraEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_karuraEd25519_closure(), B.ChainType_1_mainnet, B.CoinConf_Wvd, B.EllipticCurveTypes_ed25519));
    _lazyFinal($, "SubstrateConf_karuraSecp256k1", "$get$SubstrateConf_karuraSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_karuraSecp256k1_closure(), B.ChainType_1_mainnet, B.CoinConf_Wvd, B.EllipticCurveTypes_secp256k1));
    _lazyFinal($, "SubstrateConf_karuraSr25519", "$get$SubstrateConf_karuraSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_karuraSr25519_closure(), B.ChainType_1_mainnet, B.CoinConf_Wvd, B.EllipticCurveTypes_sr25519));
    _lazyFinal($, "SubstrateConf_kusamaEd25519", "$get$SubstrateConf_kusamaEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_kusamaEd25519_closure(), B.ChainType_1_mainnet, B.CoinConf_wdf, B.EllipticCurveTypes_ed25519));
    _lazyFinal($, "SubstrateConf_kusamaSecp256k1", "$get$SubstrateConf_kusamaSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_kusamaSecp256k1_closure(), B.ChainType_1_mainnet, B.CoinConf_wdf, B.EllipticCurveTypes_secp256k1));
    _lazyFinal($, "SubstrateConf_kusamaSr25519", "$get$SubstrateConf_kusamaSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_kusamaSr25519_closure(), B.ChainType_1_mainnet, B.CoinConf_wdf, B.EllipticCurveTypes_sr25519));
    _lazyFinal($, "SubstrateConf_moonbeamEd25519", "$get$SubstrateConf_moonbeamEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonbeamEd25519_closure(), B.ChainType_1_mainnet, B.CoinConf_E4y, B.EllipticCurveTypes_ed25519));
    _lazyFinal($, "SubstrateConf_moonbeamSecp256k1", "$get$SubstrateConf_moonbeamSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonbeamSecp256k1_closure(), B.ChainType_1_mainnet, B.CoinConf_E4y, B.EllipticCurveTypes_secp256k1));
    _lazyFinal($, "SubstrateConf_moonbeamSr25519", "$get$SubstrateConf_moonbeamSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonbeamSr25519_closure(), B.ChainType_1_mainnet, B.CoinConf_E4y, B.EllipticCurveTypes_sr25519));
    _lazyFinal($, "SubstrateConf_moonriverEd25519", "$get$SubstrateConf_moonriverEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonriverEd25519_closure(), B.ChainType_1_mainnet, B.CoinConf_Y2s, B.EllipticCurveTypes_ed25519));
    _lazyFinal($, "SubstrateConf_moonriverSecp256k1", "$get$SubstrateConf_moonriverSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonriverSecp256k1_closure(), B.ChainType_1_mainnet, B.CoinConf_Y2s, B.EllipticCurveTypes_secp256k1));
    _lazyFinal($, "SubstrateConf_moonriverSr25519", "$get$SubstrateConf_moonriverSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonriverSr25519_closure(), B.ChainType_1_mainnet, B.CoinConf_Y2s, B.EllipticCurveTypes_sr25519));
    _lazyFinal($, "SubstrateConf_phalaEd25519", "$get$SubstrateConf_phalaEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_phalaEd25519_closure(), B.ChainType_1_mainnet, B.CoinConf_Aeg, B.EllipticCurveTypes_ed25519));
    _lazyFinal($, "SubstrateConf_phalaSecp256k1", "$get$SubstrateConf_phalaSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_phalaSecp256k1_closure(), B.ChainType_1_mainnet, B.CoinConf_Aeg, B.EllipticCurveTypes_secp256k1));
    _lazyFinal($, "SubstrateConf_phalaSr25519", "$get$SubstrateConf_phalaSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_phalaSr25519_closure(), B.ChainType_1_mainnet, B.CoinConf_Aeg, B.EllipticCurveTypes_sr25519));
    _lazyFinal($, "SubstrateConf_plasmEd25519", "$get$SubstrateConf_plasmEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_plasmEd25519_closure(), B.ChainType_1_mainnet, B.CoinConf_9YE, B.EllipticCurveTypes_ed25519));
    _lazyFinal($, "SubstrateConf_plasmSecp256k1", "$get$SubstrateConf_plasmSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_plasmSecp256k1_closure(), B.ChainType_1_mainnet, B.CoinConf_9YE, B.EllipticCurveTypes_secp256k1));
    _lazyFinal($, "SubstrateConf_plasmSr25519", "$get$SubstrateConf_plasmSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_plasmSr25519_closure(), B.ChainType_1_mainnet, B.CoinConf_9YE, B.EllipticCurveTypes_sr25519));
    _lazyFinal($, "SubstrateConf_polkadotEd25519", "$get$SubstrateConf_polkadotEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_polkadotEd25519_closure(), B.ChainType_1_mainnet, B.CoinConf_6xV, B.EllipticCurveTypes_ed25519));
    _lazyFinal($, "SubstrateConf_polkadotSecp256k1", "$get$SubstrateConf_polkadotSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_polkadotSecp256k1_closure(), B.ChainType_1_mainnet, B.CoinConf_6xV, B.EllipticCurveTypes_secp256k1));
    _lazyFinal($, "SubstrateConf_polkadotSr25519", "$get$SubstrateConf_polkadotSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_polkadotSr25519_closure(), B.ChainType_1_mainnet, B.CoinConf_6xV, B.EllipticCurveTypes_sr25519));
    _lazyFinal($, "SubstrateConf_soraEd25519", "$get$SubstrateConf_soraEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_soraEd25519_closure(), B.ChainType_1_mainnet, B.CoinConf_WMI, B.EllipticCurveTypes_ed25519));
    _lazyFinal($, "SubstrateConf_soraSecp256k1", "$get$SubstrateConf_soraSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_soraSecp256k1_closure(), B.ChainType_1_mainnet, B.CoinConf_WMI, B.EllipticCurveTypes_secp256k1));
    _lazyFinal($, "SubstrateConf_soraSr25519", "$get$SubstrateConf_soraSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_soraSr25519_closure(), B.ChainType_1_mainnet, B.CoinConf_WMI, B.EllipticCurveTypes_sr25519));
    _lazyFinal($, "SubstrateConf_stafiEd25519", "$get$SubstrateConf_stafiEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_stafiEd25519_closure(), B.ChainType_1_mainnet, B.CoinConf_6ix, B.EllipticCurveTypes_ed25519));
    _lazyFinal($, "SubstrateConf_stafiSecp256k1", "$get$SubstrateConf_stafiSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_stafiSecp256k1_closure(), B.ChainType_1_mainnet, B.CoinConf_6ix, B.EllipticCurveTypes_secp256k1));
    _lazyFinal($, "SubstrateConf_stafiSr25519", "$get$SubstrateConf_stafiSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_stafiSr25519_closure(), B.ChainType_1_mainnet, B.CoinConf_6ix, B.EllipticCurveTypes_sr25519));
    _lazyFinal($, "SubstrateScaleCUintEncoderConst_singleByteModeMaxVal", "$get$SubstrateScaleCUintEncoderConst_singleByteModeMaxVal", () => {
      var t1 = $.$get$_BigIntImpl_one();
      return t1.$shl(0, 6).$sub(0, t1);
    });
    _lazyFinal($, "SubstrateScaleCUintEncoderConst_twoByteModeMaxVal", "$get$SubstrateScaleCUintEncoderConst_twoByteModeMaxVal", () => {
      var t1 = $.$get$_BigIntImpl_one();
      return t1.$shl(0, 14).$sub(0, t1);
    });
    _lazyFinal($, "SubstrateScaleCUintEncoderConst_fourByteModeMaxVal", "$get$SubstrateScaleCUintEncoderConst_fourByteModeMaxVal", () => {
      var t1 = $.$get$_BigIntImpl_one();
      return t1.$shl(0, 30).$sub(0, t1);
    });
    _lazyFinal($, "SubstrateScaleCUintEncoderConst_bigIntegerModeMaxVal", "$get$SubstrateScaleCUintEncoderConst_bigIntegerModeMaxVal", () => {
      var t1 = $.$get$_BigIntImpl_one();
      return t1.$shl(0, 536).$sub(0, t1);
    });
    _lazyFinal($, "AES__lib", "$get$AES__lib", () => $.$get$AESLib__aes());
    _lazyFinal($, "AESLib__aes", "$get$AESLib__aes", () => {
      var t1 = type$.int;
      t1 = new A.AESLib(A.List_List$from([1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47], true, t1), A.List_List$from([99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22], true, t1), A.List_List$from([82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125], true, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1));
      t1.initialize$0();
      return t1;
    });
    _lazyFinal($, "CryptoOps__bitMaskFor25", "$get$CryptoOps__bitMaskFor25", () => $.$get$_BigIntImpl_one().$shl(0, 25));
    _lazyFinal($, "CryptoOps__bitMaskFor24", "$get$CryptoOps__bitMaskFor24", () => $.$get$_BigIntImpl_one().$shl(0, 24));
    _lazyFinal($, "CryptoOps__bitMaskFor20", "$get$CryptoOps__bitMaskFor20", () => $.$get$_BigIntImpl_one().$shl(0, 20));
    _lazyFinal($, "CryptoOps__b2097151", "$get$CryptoOps__b2097151", () => A._BigIntImpl__BigIntImpl$from(2097151));
    _lazyFinal($, "Curves_curveEd25519", "$get$Curves_curveEd25519", () => {
      var t1 = A._BigIntImpl_parse("57896044618658097711785492504343953926634992332820282019728792003956564819949", null);
      return A.CurveED$(A._BigIntImpl__BigIntImpl$from(-1), A._BigIntImpl_parse("37095705934669439343138083508754565189542113879843219016388785533085940283555", null), A._BigIntImpl__BigIntImpl$from(8), A._BigIntImpl_parse(string$.x3723700, null), t1);
    });
    _lazyFinal($, "Curves_generatorED25519", "$get$Curves_generatorED25519", () => {
      var _null = null,
        t1 = $.$get$Curves_curveEd25519(),
        t2 = A._BigIntImpl_parse("15112221349535400772501151409588531511454012693041857206046113283949847762202", _null),
        t3 = A._BigIntImpl_parse("46316835694926478169428394003475163141307993866256225615783033603165251855960", _null),
        t4 = $.$get$_BigIntImpl_one(),
        t5 = A._BigIntImpl_parse("46827403850823179245072216630277197565144205554125654976674165829533817101731", _null);
      return A.EDPoint$(t1, true, A._BigIntImpl_parse(string$.x3723700, _null), t5, t2, t3, t4);
    });
    _lazyFinal($, "Curves_curveSecp256k1", "$get$Curves_curveSecp256k1", () => {
      var t1 = A._BigIntImpl_parse("115792089237316195423570985008687907853269984665640564039457584007908834671663", null);
      return A.CurveFp$($.$get$_BigIntImpl_zero(), A._BigIntImpl__BigIntImpl$from(7), $.$get$_BigIntImpl_one(), t1);
    });
    _lazyFinal($, "Curves_generatorSecp256k1", "$get$Curves_generatorSecp256k1", () => {
      var t1 = $.$get$Curves_curveSecp256k1(),
        t2 = A._BigIntImpl_parse("79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798", 16),
        t3 = A._BigIntImpl_parse("483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8", 16),
        t4 = $.$get$_BigIntImpl_one();
      return A.ProjectiveECCPoint_ProjectiveECCPoint(t1, true, A._BigIntImpl_parse("115792089237316195423570985008687907852837564279074904382605163141518161494337", null), t2, t3, t4);
    });
    _lazyFinal($, "Curves_curveEd448", "$get$Curves_curveEd448", () => {
      var t1 = A._BigIntImpl_parse("726838724295606890549323807888004534353641360687318060281490199180612328166730772686396383698676545930088884461843637361053498018365439", null);
      return A.CurveED$($.$get$_BigIntImpl_one(), A._BigIntImpl_parse("726838724295606890549323807888004534353641360687318060281490199180612328166730772686396383698676545930088884461843637361053498018326358", null), A._BigIntImpl__BigIntImpl$from(4), A._BigIntImpl_parse("181709681073901722637330951972001133588410340171829515070372549795146003961539585716195755291692375963310293709091662304773755859649779", null), t1);
    });
    _lazyFinal($, "Curves_curve256", "$get$Curves_curve256", () => {
      var t1 = A._BigIntImpl_parse("115792089210356248762697446949407573530086143415290314195533631308867097853951", null);
      return A.CurveFp$(A._BigIntImpl__BigIntImpl$from(-3), A._BigIntImpl_parse("5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B", 16), $.$get$_BigIntImpl_one(), t1);
    });
    _lazyFinal($, "Curves_generator256", "$get$Curves_generator256", () => {
      var t1 = $.$get$Curves_curve256(),
        t2 = A._BigIntImpl_parse("6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296", 16),
        t3 = A._BigIntImpl_parse("4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5", 16),
        t4 = $.$get$_BigIntImpl_one();
      return A.ProjectiveECCPoint_ProjectiveECCPoint(t1, true, A._BigIntImpl_parse("115792089210356248762697446949407573529996955224135760342422259061068512044369", null), t2, t3, t4);
    });
    _lazyFinal($, "sqrtM1", "$get$sqrtM1", () => A._BigIntImpl_parse("19681161376707505956807079304988542015446066515923890162744021073123829784752", null));
    _lazyFinal($, "invSqrt", "$get$invSqrt", () => A._BigIntImpl_parse("54469307008909316920995813868745141605393597292927456921205312896311721017578", null));
    _lazyFinal($, "_iv", "$get$_iv", () => A.List_List$unmodifiable(B.List_2yZ, type$.int));
    _lazyFinal($, "_hi", "$get$_hi", () => A.List_List$unmodifiable(B.List_8cU, type$.int));
    _lazyFinal($, "_lo", "$get$_lo", () => A.List_List$unmodifiable(B.List_2bH, type$.int));
    _lazyFinal($, "MD5__t", "$get$MD5__t", () => {
      var i, i0,
        _list = J.JSArray_JSArray$allocateGrowable(64, type$.int);
      for (i = 0; i < 64; i = i0) {
        i0 = i + 1;
        _list[i] = B.JSNumber_methods.toInt$0(Math.abs(Math.sin(i0) * 4294967296));
      }
      return _list;
    });
    _lazyFinal($, "QuickCrypto_prng", "$get$QuickCrypto_prng", () => {
      var k,
        t1 = type$.int,
        t2 = A.List_List$filled(16, 0, false, t1),
        t3 = A.List_List$filled(16, 0, false, t1);
      t2 = new A.FortunaPRNG(t2, t3);
      k = new A.SHAKE256(256, A.List_List$filled(25, 0, false, t1), A.List_List$filled(25, 0, false, t1), A.List_List$filled(200, 0, false, t1));
      k._Keccack$1(64);
      t1 = A._setArrayType([], type$.JSArray_int);
      k.update$1(t1);
      k.update$1(A.FortunaPRNG__generateSeed(32));
      B.JSArray_methods.setAll$2(t2.get$_key(), 0, k.digest$0());
      k.reset$0();
      t2._generateBlocks$2(t3, 1);
      return t2;
    });
    _lazy($, "QuickCrypto__generateRandom", "$get$QuickCrypto__generateRandom", () => new A.QuickCrypto__generateRandom_closure());
    _lazyFinal($, "CardanoSignerConst_ed25519Generator", "$get$CardanoSignerConst_ed25519Generator", () => $.$get$Curves_generatorED25519());
    _lazyFinal($, "ETHSignerConst_secp256", "$get$ETHSignerConst_secp256", () => $.$get$Curves_generatorSecp256k1());
    _lazyFinal($, "ETHSignerConst_digestLength", "$get$ETHSignerConst_digestLength", () => $.$get$ETHSignerConst_secp256().curve.get$baselen());
    _lazyFinal($, "ETHSignerConst_curveOrder", "$get$ETHSignerConst_curveOrder", () => {
      var t1 = $.$get$ETHSignerConst_secp256().order;
      t1.toString;
      return t1;
    });
    _lazyFinal($, "ETHSignerConst_orderHalf", "$get$ETHSignerConst_orderHalf", () => $.$get$ETHSignerConst_curveOrder().$shr(0, 1));
    _lazyFinal($, "SolanaSignerConst_ed25519Generator", "$get$SolanaSignerConst_ed25519Generator", () => $.$get$Curves_generatorED25519());
    _lazyFinal($, "_XrpSignerConst_ed25519Generator", "$get$_XrpSignerConst_ed25519Generator", () => $.$get$Curves_generatorED25519());
    _lazyFinal($, "_XrpSignerConst_secp256", "$get$_XrpSignerConst_secp256", () => $.$get$Curves_generatorSecp256k1());
    _lazyFinal($, "_XrpSignerConst_curveOrder", "$get$_XrpSignerConst_curveOrder", () => {
      var t1 = $.$get$_XrpSignerConst_secp256().order;
      t1.toString;
      return t1;
    });
    _lazyFinal($, "_XrpSignerConst_orderHalf", "$get$_XrpSignerConst_orderHalf", () => $.$get$_XrpSignerConst_curveOrder().$shr(0, 1));
    _lazyFinal($, "maxU64", "$get$maxU64", () => A._BigIntImpl_parse("18446744073709551615", null));
    _lazyFinal($, "BigRational_ten", "$get$BigRational_ten", () => {
      var t1 = A._BigIntImpl__BigIntImpl$from(10);
      return A.BigRational_BigRational(t1, A._BigIntImpl__BigIntImpl$from(1));
    });
    _lazyFinal($, "BigRational__one", "$get$BigRational__one", () => $.$get$_BigIntImpl_one());
    _lazyFinal($, "BigRational__zero", "$get$BigRational__zero", () => $.$get$_BigIntImpl_zero());
    _lazyFinal($, "BigRational__ten", "$get$BigRational__ten", () => A._BigIntImpl__BigIntImpl$from(10));
    _lazyFinal($, "StringUtils__hexBytesRegex", "$get$StringUtils__hexBytesRegex", () => A.RegExp_RegExp("^(0x|0X)?([0-9A-Fa-f]{2})+$", true));
    _lazyFinal($, "StringUtils__hexaDecimalRegex", "$get$StringUtils__hexaDecimalRegex", () => A.RegExp_RegExp("^(0x|0X)?[0-9A-Fa-f]+$", true));
    _lazyFinal($, "BaseRequest__tokenRE", "$get$BaseRequest__tokenRE", () => A.RegExp_RegExp("^[\\w!#%&'*+\\-.^`|~]+$", true));
    _lazyFinal($, "_digitRegex", "$get$_digitRegex", () => A.RegExp_RegExp("^\\d+$", true));
    _lazyFinal($, "_escapedChar", "$get$_escapedChar", () => A.RegExp_RegExp('["\\x00-\\x1F\\x7F]', true));
    _lazyFinal($, "token", "$get$token", () => A.RegExp_RegExp('[^()<>@,;:"\\\\/[\\]?={} \\t\\x00-\\x1F\\x7F]+', true));
    _lazyFinal($, "_lws", "$get$_lws", () => A.RegExp_RegExp("(?:\\r\\n)?[ \\t]+", true));
    _lazyFinal($, "_quotedString", "$get$_quotedString", () => A.RegExp_RegExp('"(?:[^"\\x00-\\x1F\\x7F]|\\\\.)*"', true));
    _lazyFinal($, "_quotedPair", "$get$_quotedPair", () => A.RegExp_RegExp("\\\\(.)", true));
    _lazyFinal($, "nonToken", "$get$nonToken", () => A.RegExp_RegExp('[()<>@,;:"\\\\/\\[\\]?={} \\t\\x00-\\x1F\\x7F]', true));
    _lazyFinal($, "whitespace", "$get$whitespace", () => A.RegExp_RegExp("(?:" + $.$get$_lws().pattern + ")*", true));
    _lazyFinal($, "MoneroTransactionHelper__trxDecimal", "$get$MoneroTransactionHelper__trxDecimal", () => A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(12), null));
    _lazyFinal($, "MoneroNetworkConst_unlockTime", "$get$MoneroNetworkConst_unlockTime", () => $.$get$_BigIntImpl_zero());
    _lazyFinal($, "_MonerTxBuilderConst_fakePubKey", "$get$_MonerTxBuilderConst_fakePubKey", () => A.MoneroPublicKey_MoneroPublicKey$fromBytes(A.BytesUtils_fromHexString("5540ce412a435b535772cf0f8aa8686ae4bd948931304b401188171627d75a4c")));
    _lazy($, "RetionalConst_bigR8", "$get$RetionalConst_bigR8", () => A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(8), null));
    _lazy($, "RetionalConst_bigR18", "$get$RetionalConst_bigR18", () => A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(18), null));
    _lazy($, "RetionalConst_bigR6", "$get$RetionalConst_bigR6", () => A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(6), null));
    _lazy($, "HTTPCaller__clientManager", "$get$HTTPCaller__clientManager", () => new A.HttpClientManager(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, A.findType("_CachedClientImpl<ProviderAuthenticated?>"))));
    _lazyFinal($, "HttpImpl__serviceCaller", "$get$HttpImpl__serviceCaller", () => $.$get$HTTPServiceWorker_instance());
    _lazyFinal($, "HTTPServiceWorker_instance", "$get$HTTPServiceWorker_instance", () => new A.WebHTTPServiceWorker(new A.ServicesHTTPCaller(), new A.ServicesHTTPCaller()));
    _lazyFinal($, "CustomCoins_byronLegacy", "$get$CustomCoins_byronLegacy", () => A.CustomCoins$_("Byron legacy", $.$get$CustomCurrencyConf_byronLegacy()));
    _lazyFinal($, "CustomCoins_byronLegacyTestnet", "$get$CustomCoins_byronLegacyTestnet", () => A.CustomCoins$_("Byron legacy testnet", $.$get$CustomCurrencyConf_byronLegacyTestnet()));
    _lazyFinal($, "CustomCoins_values", "$get$CustomCoins_values", () => A._setArrayType([$.$get$CustomCoins_byronLegacy(), $.$get$CustomCoins_byronLegacyTestnet()], A.findType("JSArray<CustomCoins>")));
    _lazy($, "CustomCurrencyConf_byronLegacy", "$get$CustomCurrencyConf_byronLegacy", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true], type$.String, type$.dynamic), new A.CustomCurrencyConf_byronLegacy_closure(), B.ChainType_1_mainnet, 0, B.CoinNames_xw8, "0/0", t1, B.EllipticCurveTypes_ed25519Kholaw, null);
    });
    _lazy($, "CustomCurrencyConf_byronLegacyTestnet", "$get$CustomCurrencyConf_byronLegacyTestnet", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true], type$.String, type$.dynamic), new A.CustomCurrencyConf_byronLegacyTestnet_closure(), B.ChainType_0_testnet, 1, B.CoinNames_PVK, "", t1, B.EllipticCurveTypes_ed25519Kholaw, null);
    });
    _lazyFinal($, "IsolateCryptoWoker_isolate", "$get$IsolateCryptoWoker_isolate", () => {
      A.createSentinel();
      return new A.BrowserCryptoWorker(new A._WorkerConnector(new A.SynchronizedLock(), A.LinkedHashMap_LinkedHashMap$_empty(A.findType("WorkerMode"), A.findType("_WorkerConnection")), new A._AsyncBroadcastStreamController(null, null, A.findType("_AsyncBroadcastStreamController<MessageArgsStream>"))));
    });
    _lazyFinal($, "_EIP712Utils_typeRegex", "$get$_EIP712Utils_typeRegex", () => A.RegExp_RegExp("^\\w+", true));
    _lazyFinal($, "_EIP712Utils_arrayRegex", "$get$_EIP712Utils_arrayRegex", () => A.RegExp_RegExp("^(.*)\\[([0-9]*?)]$", true));
    _lazyFinal($, "_ABIValidator_sizeDetectRegex", "$get$_ABIValidator_sizeDetectRegex", () => A.RegExp_RegExp("\\d+", true));
    _lazyFinal($, "context", "$get$context", () => new A.Context($.$get$Style_platform(), null));
    _lazyFinal($, "Style_posix", "$get$Style_posix", () => new A.PosixStyle(A.RegExp_RegExp("/", true), A.RegExp_RegExp("[^/]$", true), A.RegExp_RegExp("^/", true)));
    _lazyFinal($, "Style_windows", "$get$Style_windows", () => new A.WindowsStyle(A.RegExp_RegExp("[/\\\\]", true), A.RegExp_RegExp("[^/\\\\]$", true), A.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", true), A.RegExp_RegExp("^[/\\\\](?![/\\\\])", true)));
    _lazyFinal($, "Style_url", "$get$Style_url", () => new A.UrlStyle(A.RegExp_RegExp("/", true), A.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", true), A.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", true), A.RegExp_RegExp("^/", true)));
    _lazyFinal($, "Style_platform", "$get$Style_platform", () => A.Style__getPlatformStyle());
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: A.NativeByteBuffer, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Float32Array: A.NativeFloat32List, Float64Array: A.NativeFloat64List, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8ClampedArray: A.NativeUint8ClampedList, CanvasPixelArray: A.NativeUint8ClampedList, Uint8Array: A.NativeUint8List});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  Function.prototype.call$1$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$2$0 = function() {
    return this();
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i) {
        scripts[i].removeEventListener("load", onLoad, false);
      }
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].addEventListener("load", onLoad, false);
    }
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = function(args) {
      return A.main(A.convertMainArgumentList(args));
    };
    if (typeof dartMainRunner === "function") {
      dartMainRunner(callMain, []);
    } else {
      callMain([]);
    }
  });
})();

//# sourceMappingURL=crypto.js.map
