// Generated by dart2js (, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.8.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded. The loadPriority argument is an arbitrary argument
//    string forwarded from the 'dart2js:load-priority' pragma option.
// dartDeferredLibraryMultiLoader(uris, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of every URI in `uris`,
//    and call successCallback. If it fails to do so, it should call
//    errorCallback with an error. The loadId argument is the deferred import
//    that resulted in this uri being loaded. The loadPriority argument is an
//    arbitrary argument string forwarded from the 'dart2js:load-priority'
//    pragma option.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key)) {
        to[key] = from[key];
      }
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(Object.getPrototypeOf(object) && Object.getPrototypeOf(object).p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        Object.setPrototypeOf(cls.prototype, sup.prototype);
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++) {
      inherit(classes[i], sup);
    }
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        holder[name] = initializer();
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel) {
          A.throwLateFieldADI(name);
        }
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.$flags = 7;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i) {
      convertToFastObject(arrayOfObjects[i]);
    }
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number") {
      funType += typesOffset;
    }
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$allocateGrowable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      var t1 = A._setArrayType(allocation, $E._eval$1("JSArray<0>"));
      t1.$flags = 1;
      return t1;
    },
    JSArray__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    JSString__isWhitespace(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = string.charCodeAt(index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace(string, index) {
      var t1, index0, codeUnit;
      for (t1 = string.length; index > 0; index = index0) {
        index0 = index - 1;
        if (!(index0 < t1))
          return A.ioore(string, index0);
        codeUnit = string.charCodeAt(index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    set$length$asx(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    get$first$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$reversed$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$reversed(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (Array.isArray(receiver) || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    add$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    allMatches$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    asByteData$0$x(receiver) {
      return J.getInterceptor$x(receiver).asByteData$0(receiver);
    },
    asByteData$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).asByteData$2(receiver, a0, a1);
    },
    asUint32List$0$x(receiver) {
      return J.getInterceptor$x(receiver).asUint32List$0(receiver);
    },
    asUint8List$0$x(receiver) {
      return J.getInterceptor$x(receiver).asUint8List$0(receiver);
    },
    asUint8List$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).asUint8List$2(receiver, a0, a1);
    },
    cast$1$0$ax(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    getRange$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).getRange$2(receiver, a0, a1);
    },
    map$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    removeWhere$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).removeWhere$1(receiver, a0);
    },
    setRange$4$ax(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sublist$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
    },
    take$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).take$1(receiver, a0);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    whereType$1$0$ax(receiver, $T1) {
      return J.getInterceptor$ax(receiver).whereType$1$0(receiver, $T1);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JavaScriptBigInt: function JavaScriptBigInt() {
    },
    JavaScriptSymbol: function JavaScriptSymbol() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  A = {JS_CONST: function JS_CONST() {
    },
    CastIterable_CastIterable(source, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(source))
        return new A._EfficientLengthCastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_EfficientLengthCastIterable<1,2>"));
      return new A.CastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterable<1,2>"));
    },
    LateError$fieldADI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has been assigned during initialization.");
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$fieldAI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has already been initialized.");
    },
    hexDigitValue(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    isToStringVisiting(object) {
      var t1, i;
      for (t1 = $.toStringVisiting.length, i = 0; i < t1; ++i)
        if (object === $.toStringVisiting[i])
          return true;
      return false;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new A.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    SkipIterable_SkipIterable(iterable, count, $E) {
      var _s5_ = "count";
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        A.ArgumentError_checkNotNull(count, _s5_, type$.int);
        A.RangeError_checkNotNegative(count, _s5_);
        return new A.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      A.ArgumentError_checkNotNull(count, _s5_, type$.int);
      A.RangeError_checkNotNegative(count, _s5_);
      return new A.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    IterableElementError_tooFew() {
      return new A.StateError("Too few elements");
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    _CastListBase_removeWhere_closure: function _CastListBase_removeWhere_closure(t0, t1) {
      this.$this = t0;
      this.test = t1;
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap: function CastMap(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap_forEach_closure: function CastMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CastMap_entries_closure: function CastMap_entries_closure(t0) {
      this.$this = t0;
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this.__internal$_string = t0;
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    _ListIndicesIterable: function _ListIndicesIterable(t0) {
      this._backedList = t0;
    },
    ListMapView: function ListMapView(t0, t1) {
      this.__internal$_values = t0;
      this.$ti = t1;
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol() {
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap_ConstantMap$from(other, $K, $V) {
      var allStrings, k, object, index, index0, values, map,
        t1 = A._instanceType(other),
        keys = A.List_List$from(new A.LinkedHashMapKeysIterable(other, t1._eval$1("LinkedHashMapKeysIterable<1>")), true, $K),
        t2 = keys.length,
        _i = 0;
      while (true) {
        if (!(_i < t2)) {
          allStrings = true;
          break;
        }
        k = keys[_i];
        if (typeof k != "string" || "__proto__" === k) {
          allStrings = false;
          break;
        }
        ++_i;
      }
      if (allStrings) {
        object = {};
        for (index = 0, _i = 0; _i < keys.length; keys.length === t2 || (0, A.throwConcurrentModificationError)(keys), ++_i, index = index0) {
          k = keys[_i];
          $V._as(other.$index(0, k));
          index0 = index + 1;
          object[k] = index;
        }
        values = A.List_List$from(new A.LinkedHashMapValuesIterable(other, t1._eval$1("LinkedHashMapValuesIterable<2>")), true, $V);
        map = new A.ConstantStringMap(object, values, $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantStringMap<1,2>"));
        map.$keys = keys;
        return map;
      }
      return new A.ConstantMapView(A.LinkedHashMap_LinkedHashMap$from(other, $K, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantMapView<1,2>"));
    },
    ConstantMap__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i, _null = null,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      if (3 >= match.length)
        return A.ioore(match, 3);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((digitsPart.charCodeAt(i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_objectTypeName(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_safeToString(object) {
      if (object == null || typeof object == "number" || A._isBool(object))
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      if (object instanceof A.Closure)
        return object.toString$0(0);
      if (object instanceof A._Record)
        return object._toString$1(true);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, _i, i,
        a = A._setArrayType([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, A.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
          B.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          B.JSArray_methods.add$1(a, 55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          B.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw A.wrapException(A.argumentErrorValue(i));
      }
      return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
          throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
          return A.Primitives_stringFromCodePoints(charCodes);
      }
      return A.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_valueFromDecomposedDate(years, month, day, hours, minutes, seconds, milliseconds, microseconds, isUtc) {
      var remainder, value, t1,
        jsMonth = month - 1;
      if (0 <= years && years < 100) {
        years += 400;
        jsMonth -= 4800;
      }
      remainder = B.JSInt_methods.$mod(microseconds, 1000);
      milliseconds += B.JSInt_methods._tdivFast$1(microseconds - remainder, 1000);
      value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
      t1 = true;
      if (!isNaN(value))
        if (!(value < -864e13))
          if (!(value > 864e13))
            t1 = value === 864e13 && remainder !== 0;
      if (t1)
        return null;
      return value;
    },
    Primitives_lazyAsJsDate(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._core$_value);
      return receiver.date;
    },
    Primitives_getYear(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_extractStackTrace(error) {
      var jsError = error.$thrownJsError;
      if (jsError == null)
        return null;
      return A.getTraceFromException(jsError);
    },
    Primitives_trySetStackTrace(error, stackTrace) {
      var jsError;
      if (error.$thrownJsError == null) {
        jsError = new Error();
        A.initializeExceptionWrapper(error, jsError);
        error.$thrownJsError = jsError;
        jsError.stack = stackTrace.toString$0(0);
      }
    },
    iae(argument) {
      throw A.wrapException(A.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = J.get$length$asx(indexable);
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, null, _s5_);
      return A.RangeError$value(index, _s5_);
    },
    diagnoseRangeError(start, end, $length) {
      if (start < 0 || start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      return A.initializeExceptionWrapper(ex, new Error());
    },
    initializeExceptionWrapper(ex, wrapper) {
      var t1;
      if (ex == null)
        ex = new A.TypeError();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex, wrapper) {
      throw A.initializeExceptionWrapper(ex, wrapper == null ? new Error() : wrapper);
    },
    throwUnsupportedOperation(o, operation, verb) {
      var wrapper;
      if (operation == null)
        operation = 0;
      if (verb == null)
        verb = 0;
      wrapper = Error();
      A.throwExpression(A._diagnoseUnsupportedOperation(o, operation, verb), wrapper);
    },
    _diagnoseUnsupportedOperation(o, encodedOperation, encodedVerb) {
      var operation, table, tableLength, index, verb, object, flags, article, adjective;
      if (typeof encodedOperation == "string")
        operation = encodedOperation;
      else {
        table = "[]=;add;removeWhere;retainWhere;removeRange;setRange;setInt8;setInt16;setInt32;setUint8;setUint16;setUint32;setFloat32;setFloat64".split(";");
        tableLength = table.length;
        index = encodedOperation;
        if (index > tableLength) {
          encodedVerb = index / tableLength | 0;
          index %= tableLength;
        }
        operation = table[index];
      }
      verb = typeof encodedVerb == "string" ? encodedVerb : "modify;remove from;add to".split(";")[encodedVerb];
      object = type$.List_dynamic._is(o) ? "list" : "ByteData";
      flags = o.$flags | 0;
      article = "a ";
      if ((flags & 4) !== 0)
        adjective = "constant ";
      else if ((flags & 2) !== 0) {
        adjective = "unmodifiable ";
        article = "an ";
      } else
        adjective = (flags & 1) !== 0 ? "fixed-length " : "";
      return new A.UnsupportedError("'" + operation + "': Cannot " + verb + " " + article + adjective + object);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      var t1;
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace) {
        t1 = ex.dartException;
        return A.saveStackTrace(ex, t1 == null ? type$.Object._as(t1) : t1);
      }
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              A.S(message);
              return A.saveStackTrace(ex, new A.NullError());
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else if (nullCall.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefCall.matchTypeError$1(message) != null || undefLiteralCall.matchTypeError$1(message) != null || nullProperty.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefProperty.matchTypeError$1(message) != null || undefLiteralProperty.matchTypeError$1(message) != null) {
            A._asString(message);
            return A.saveStackTrace(ex, new A.NullError());
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, null, null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      trace = new A._StackTrace(exception);
      if (typeof exception === "object")
        exception.$cachedTrace = trace;
      return trace;
    },
    objectHashCode(object) {
      if (object == null)
        return J.get$hashCode$(object);
      if (typeof object == "object")
        return A.Primitives_objectHashCode(object);
      return J.get$hashCode$(object);
    },
    constantHashCode(key) {
      if (typeof key == "number")
        return B.JSNumber_methods.get$hashCode(key);
      if (key instanceof A._Type)
        return A.Primitives_objectHashCode(key);
      if (key instanceof A._Record)
        return key.get$hashCode(key);
      if (key instanceof A.Symbol)
        return key.get$hashCode(0);
      return A.objectHashCode(key);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    _invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = A.convertDartClosureToJSUncached(closure, arity);
      closure.$identity = $function;
      return $function;
    },
    convertDartClosureToJSUncached(closure, arity) {
      var entry;
      switch (arity) {
        case 0:
          entry = closure.call$0;
          break;
        case 1:
          entry = closure.call$1;
          break;
        case 2:
          entry = closure.call$2;
          break;
        case 3:
          entry = closure.call$3;
          break;
        case 4:
          entry = closure.call$4;
          break;
        default:
          entry = null;
      }
      if (entry != null)
        return entry.bind(closure);
      return function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A._invokeClosure);
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      $constructor = isStatic ? function static_tear_off() {
        this.$initialize();
      } : function tear_off(a, b) {
        this.$initialize(a, b);
      };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunction(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunction(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      return A.Closure_cspForwardCall($function.length, needsDirectAccess, stubName, $function);
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var names, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        t1 = Object.getOwnPropertyNames(template);
      t1.$flags = 1;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (Array.isArray(transformers))
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    createRecordTypePredicate(shape, fieldRtis) {
      var $length = fieldRtis.length,
        $function = init.rttc["" + $length + ";" + shape];
      if ($function == null)
        return null;
      if ($length === 0)
        return $function;
      if ($length === $function.length)
        return $function.apply(null, fieldRtis);
      return $function(fieldRtis);
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, extraFlags) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + extraFlags);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1;
      if (typeof other == "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else if (other instanceof A.JSSyntaxRegExp) {
        t1 = B.JSString_methods.substring$1(receiver, startIndex);
        return other._nativeRegExp.test(t1);
      } else
        return !J.allMatches$1$s(other, B.JSString_methods.substring$1(receiver, startIndex)).get$isEmpty(0);
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var nativeRegexp;
      if (typeof pattern == "string")
        return A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      if (pattern instanceof A.JSSyntaxRegExp) {
        nativeRegexp = pattern.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, A.escapeReplacement(replacement));
      }
      return A.stringReplaceAllGeneral(receiver, pattern, replacement);
    },
    stringReplaceAllGeneral(receiver, pattern, replacement) {
      var t1, startIndex, t2, match;
      for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), startIndex = 0, t2 = ""; t1.moveNext$0();) {
        match = t1.get$current();
        t2 = t2 + receiver.substring(startIndex, match.get$start()) + replacement;
        startIndex = match.get$end();
      }
      t1 = t2 + receiver.substring(startIndex);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      if (receiver.indexOf(pattern, 0) < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    _Record_2: function _Record_2(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantMap_map_closure: function ConstantMap_map_closure(t0, t1, t2) {
      this.$this = t0;
      this.transform = t1;
      this.result = t2;
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2) {
      this._jsIndex = t0;
      this._values = t1;
      this.$ti = t2;
    },
    _KeysOrValues: function _KeysOrValues(t0, t1) {
      this._elements = t0;
      this.$ti = t1;
    },
    _KeysOrValuesOrElementsIterator: function _KeysOrValuesOrElementsIterator(t0, t1, t2) {
      var _ = this;
      _._elements = t0;
      _.__js_helper$_length = t1;
      _.__js_helper$_index = 0;
      _.__js_helper$_current = null;
      _.$ti = t2;
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError() {
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeysIterable: function LinkedHashMapKeysIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2, t3) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _._cell = t2;
      _.__js_helper$_current = null;
      _.$ti = t3;
    },
    LinkedHashMapValuesIterable: function LinkedHashMapValuesIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapValueIterator: function LinkedHashMapValueIterator(t0, t1, t2, t3) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _._cell = t2;
      _.__js_helper$_current = null;
      _.$ti = t3;
    },
    LinkedHashMapEntriesIterable: function LinkedHashMapEntriesIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapEntryIterator: function LinkedHashMapEntryIterator(t0, t1, t2, t3) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _._cell = t2;
      _.__js_helper$_current = null;
      _.$ti = t3;
    },
    JsConstantLinkedHashMap: function JsConstantLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _Record: function _Record() {
    },
    _Record2: function _Record2() {
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._hasCapturesCache = _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this._string = t1;
      this.__js_helper$_start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    throwLateFieldNI(fieldName) {
      throw A.initializeExceptionWrapper(A.LateError$fieldNI(fieldName), new Error());
    },
    throwLateFieldAI(fieldName) {
      throw A.initializeExceptionWrapper(A.LateError$fieldAI(fieldName), new Error());
    },
    throwLateFieldADI(fieldName) {
      throw A.initializeExceptionWrapper(A.LateError$fieldADI(fieldName), new Error());
    },
    _Cell$named(_name) {
      var t1 = new A._Cell(_name);
      return t1.__late_helper$_value = t1;
    },
    _Cell: function _Cell(t0) {
      this.__late_helper$_name = t0;
      this.__late_helper$_value = null;
    },
    _checkViewArguments(buffer, offsetInBytes, $length) {
    },
    _ensureNativeList(list) {
      return list;
    },
    NativeByteData_NativeByteData($length) {
      return new DataView(new ArrayBuffer($length));
    },
    NativeByteData_NativeByteData$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new DataView(buffer, offsetInBytes) : new DataView(buffer, offsetInBytes, $length);
    },
    NativeInt8List__create1(arg) {
      return new Int8Array(arg);
    },
    NativeUint16List_NativeUint16List($length) {
      return new Uint16Array($length);
    },
    NativeUint32List_NativeUint32List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      $length = B.JSInt_methods._tdivFast$1(buffer.byteLength - offsetInBytes, 4);
      return new Uint32Array(buffer, offsetInBytes, $length);
    },
    NativeUint8List_NativeUint8List($length) {
      return new Uint8Array($length);
    },
    NativeUint8List_NativeUint8List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = start > $length;
        else
          t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    _UnmodifiableNativeByteBufferView: function _UnmodifiableNativeByteBufferView(t0) {
      this._data = t0;
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, t1, fields, substitutedFields, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 8:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 9:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 10:
          t1 = rti._primary;
          fields = rti._rest;
          substitutedFields = A._substituteArray(universe, fields, typeArguments, depth);
          if (substitutedFields === fields)
            return rti;
          return A._Universe__lookupRecordRti(universe, t1, substitutedFields);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      if (object instanceof A.Object)
        return A._instanceType(object);
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? Object.getPrototypeOf(Object.getPrototypeOf(instance)).constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeTypeOfDartObject(object) {
      return A.createRuntimeType(A._instanceType(object));
    },
    _structuralTypeOf(object) {
      var functionRti;
      if (object instanceof A._Record)
        return object._getRti$0();
      functionRti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      if (functionRti != null)
        return functionRti;
      if (type$.TrustedGetRuntimeType._is(object))
        return J.get$runtimeType$(object)._rti;
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A.instanceType(object);
    },
    createRuntimeType(rti) {
      var t1 = rti._cachedRuntimeType;
      return t1 == null ? rti._cachedRuntimeType = new A._Type(rti) : t1;
    },
    evaluateRtiForRecord(recordRecipe, valuesList) {
      var bindings, i,
        values = valuesList,
        $length = values.length;
      if ($length === 0)
        return type$.Record_0;
      if (0 >= $length)
        return A.ioore(values, 0);
      bindings = A._Universe_evalInEnvironment(init.typeUniverse, A._structuralTypeOf(values[0]), "@<0>");
      for (i = 1; i < $length; ++i) {
        if (!(i < values.length))
          return A.ioore(values, i);
        bindings = A._Universe_bind(init.typeUniverse, bindings, A._structuralTypeOf(values[i]));
      }
      return A._Universe_evalInEnvironment(init.typeUniverse, bindings, recordRecipe);
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var kind, isFn, $name, predicate, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (A.isTopType(testRti))
        return A._finishIsFn(testRti, object, A._isTop);
      kind = testRti._kind;
      if (kind === 6)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      if (kind === 1)
        return A._finishIsFn(testRti, object, A._isNever);
      if (kind === 7)
        return A._finishIsFn(testRti, object, A._isFutureOr);
      if (testRti === type$.int)
        isFn = A._isInt;
      else if (testRti === type$.double || testRti === type$.num)
        isFn = A._isNum;
      else if (testRti === type$.String)
        isFn = A._isString;
      else
        isFn = testRti === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (kind === 8) {
        $name = testRti._primary;
        if (testRti._rest.every(A.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (kind === 10) {
        predicate = A.createRecordTypePredicate(testRti._primary, testRti._rest);
        return A._finishIsFn(testRti, object, predicate == null ? A._isNever : predicate);
      }
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (A.isTopType(testRti))
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else if (A.isNullable(testRti))
        asFn = A._generalNullableAsCheckImplementation;
      if (testRti === type$.int)
        asFn = A._asInt;
      else if (testRti === type$.nullable_int)
        asFn = A._asIntQ;
      else if (testRti === type$.String)
        asFn = A._asString;
      else if (testRti === type$.nullable_String)
        asFn = A._asStringQ;
      else if (testRti === type$.bool)
        asFn = A._asBool;
      else if (testRti === type$.nullable_bool)
        asFn = A._asBoolQ;
      else if (testRti === type$.num)
        asFn = A._asNum;
      else if (testRti === type$.nullable_num)
        asFn = A._asNumQ;
      else if (testRti === type$.double)
        asFn = A._asDouble;
      else if (testRti === type$.nullable_double)
        asFn = A._asDoubleQ;
      testRti._as = asFn;
      return testRti._as(object);
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      return A.isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), testRti);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var testRti = this;
      if (object == null) {
        if (A.isNullable(testRti))
          return object;
      } else if (testRti._is(object))
        return object;
      throw A.initializeExceptionWrapper(A._errorForAsCheck(object, testRti), new Error());
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null || testRti._is(object))
        return object;
      throw A.initializeExceptionWrapper(A._errorForAsCheck(object, testRti), new Error());
    },
    _errorForAsCheck(object, testRti) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, A._rtiToString(testRti, null)));
    },
    checkTypeBound(type, bound, variable, methodName) {
      if (A.isSubtype(init.typeUniverse, type, bound))
        return type;
      throw A.initializeExceptionWrapper(A._TypeError$fromMessage("The type argument '" + A._rtiToString(type, null) + "' is not a subtype of the type variable bound '" + A._rtiToString(bound, null) + "' of type variable '" + variable + "' in '" + methodName + "'."), new Error());
    },
    _Error_compose(object, checkedTypeDescription) {
      return A.Error_safeToString(object) + ": type '" + A._rtiToString(A._structuralTypeOf(object), null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, type));
    },
    _isFutureOr(object) {
      var testRti = this;
      return testRti._primary._is(object) || A.Rti__getFutureFromFutureOr(init.typeUniverse, testRti)._is(object);
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "Object"), new Error());
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isNever(object) {
      return false;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "bool"), new Error());
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "bool?"), new Error());
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "double"), new Error());
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "double?"), new Error());
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "int"), new Error());
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "int?"), new Error());
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "num"), new Error());
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "num?"), new Error());
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "String"), new Error());
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "String?"), new Error());
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var fieldCount, names, namesIndex, s, comma, i,
        partialShape = recordType._primary,
        fields = recordType._rest;
      if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
      fieldCount = fields.length;
      names = partialShape.split(",");
      namesIndex = names.length - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
          s += " " + names[namesIndex];
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, offset, i, t1, typeParametersText, typeSep, t2, t3, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ", outerContextLength = null;
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null)
          genericContext = A._setArrayType([], type$.JSArray_String);
        else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t2 = genericContext.length;
          t3 = t2 - 1 - i;
          if (!(t3 >= 0))
            return A.ioore(genericContext, t3);
          typeParametersText = typeParametersText + typeSep + genericContext[t3];
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else
        typeParametersText = "";
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var questionArgument, s, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 7)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 8) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 10)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 11)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, false));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 9 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        t1 = true;
        if (!A.isTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 6)
              t1 = baseKind === 7 && A.isNullable(baseType._primary);
        if (t1)
          return baseType;
        else if (baseKind === 1)
          return type$.Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (A.isTopType(baseType) || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 9) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = partialShapeTag;
      rti._rest = fields;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, end, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              A._Parser_handleTypeArguments(parser, t1);
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(-3);
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              A._Parser_handleArguments(parser, t1);
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            case 43:
              end = source.indexOf("(", i);
              t1.push(source.substring(i, end));
              t1.push(-4);
              t1.push(parser.p);
              parser.p = t1.length;
              i = end + 1;
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 9)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleTypeArguments(parser, stack) {
      var base,
        t1 = parser.u,
        $arguments = A._Parser_collectArray(parser, stack),
        head = stack.pop();
      if (typeof head == "string")
        stack.push(A._Universe__lookupInterfaceRti(t1, head, $arguments));
      else {
        base = A._Parser_toType(t1, parser.e, head);
        switch (base._kind) {
          case 11:
            stack.push(A._Universe__lookupGenericFunctionRti(t1, base, $arguments, parser.n));
            break;
          default:
            stack.push(A._Universe__lookupBindingRti(t1, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleArguments(parser, stack) {
      var requiredPositional, returnType, parameters,
        t1 = parser.u,
        head = stack.pop(),
        optionalPositional = null, named = null;
      if (typeof head == "number")
        switch (head) {
          case -1:
            optionalPositional = stack.pop();
            break;
          case -2:
            named = stack.pop();
            break;
          default:
            stack.push(head);
            break;
        }
      else
        stack.push(head);
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = stack.pop();
      switch (head) {
        case -3:
          head = stack.pop();
          if (optionalPositional == null)
            optionalPositional = t1.sEA;
          if (named == null)
            named = t1.sEA;
          returnType = A._Parser_toType(t1, parser.e, head);
          parameters = new A._FunctionParameters();
          parameters._requiredPositional = requiredPositional;
          parameters._optionalPositional = optionalPositional;
          parameters._named = named;
          stack.push(A._Universe__lookupFunctionRti(t1, returnType, parameters));
          return;
        case -4:
          stack.push(A._Universe__lookupRecordRti(t1, stack.pop(), requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = stack.splice(parser.p);
      A._Parser_toTypes(parser.u, parser.e, array);
      parser.p = stack.pop();
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
      } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 9) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 8)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    isSubtype(universe, s, t) {
      var result,
        sCache = s._isSubtypeCache;
      if (sCache == null)
        sCache = s._isSubtypeCache = new Map();
      result = sCache.get(t);
      if (result == null) {
        result = A._isSubtype(universe, s, null, t, null);
        sCache.set(t, result);
      }
      return result;
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var sKind, leftTypeVariable, tKind, t1, t2, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (A.isTopType(t))
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isTopType(s))
        return false;
      if (s._kind === 1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = type$.Null;
      if (s === t1 || s === type$.JSNull) {
        if (tKind === 7)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === t1 || t === type$.JSNull || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 7)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 6;
      }
      if (sKind === 7) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 6)
        return A._isSubtype(universe, t1, sEnv, t, tEnv) && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 7) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 6)
        return A._isSubtype(universe, s, sEnv, t1, tEnv) || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      t2 = sKind === 10;
      if (t2 && t === type$.Record)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 8) {
        if (tKind !== 8)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      if (t2 && tKind === 10)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      return A._areArgumentsSubtypes(universe, s._rest, null, sEnv, t._rest, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i)
        if (!A._isSubtype(universe, sArgs[i], sEnv, tArgs[i], tEnv))
          return false;
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv) {
      var i,
        sFields = s._rest,
        tFields = t._rest,
        sCount = sFields.length;
      if (sCount !== tFields.length)
        return false;
      if (s._primary !== t._primary)
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv))
          return false;
      return true;
    },
    isNullable(t) {
      var kind = t._kind,
        t1 = true;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isTopType(t))
          if (kind !== 6)
            t1 = kind === 7 && A.isNullable(t._primary);
      return t1;
    },
    isTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._isSubtypeCache = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var t1, div, span;
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        t1 = {};
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      bodyFunction.toString;
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (object instanceof A._Future)
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true) {
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
          }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _SyncStarIterator__terminatedBody(_1, _2, _3) {
      return 0;
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B.C__StringStackTrace;
    },
    _interceptError(error, stackTrace) {
      if ($.Zone__current === B.C__RootZone)
        return null;
      return null;
    },
    _interceptUserError(error, stackTrace) {
      if ($.Zone__current !== B.C__RootZone)
        A._interceptError(error, stackTrace);
      if (stackTrace == null)
        if (type$.Error._is(error)) {
          stackTrace = error.get$stackTrace();
          if (stackTrace == null) {
            A.Primitives_trySetStackTrace(error, B.C__StringStackTrace);
            stackTrace = B.C__StringStackTrace;
          }
        } else
          stackTrace = B.C__StringStackTrace;
      else if (type$.Error._is(error))
        A.Primitives_trySetStackTrace(error, stackTrace);
      return new A.AsyncError(error, stackTrace);
    },
    _Future__chainCoreFuture(source, target, sync) {
      var t2, t3, ignoreError, listeners, _box_0 = {},
        t1 = _box_0.source = source;
      for (t2 = type$._Future_dynamic; t3 = t1._state, (t3 & 4) !== 0; t1 = source) {
        source = t2._as(t1._resultOrListeners);
        _box_0.source = source;
      }
      if (t1 === target) {
        t2 = A.StackTrace_current();
        target._asyncCompleteErrorObject$1(new A.AsyncError(new A.ArgumentError(true, t1, null, "Cannot complete a future with itself"), t2));
        return;
      }
      ignoreError = target._state & 1;
      t2 = t1._state = t3 | ignoreError;
      if ((t2 & 24) === 0) {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = target._state & 1 | 4;
        target._resultOrListeners = t1;
        t1._prependListeners$1(listeners);
        return;
      }
      if (!sync)
        if (target._resultOrListeners == null)
          t1 = (t2 & 16) === 0 || ignoreError !== 0;
        else
          t1 = false;
      else
        t1 = true;
      if (t1) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(_box_0.source);
        A._Future__propagateToListeners(target, listeners);
        return;
      }
      target._state ^= 2;
      A._rootScheduleMicrotask(null, null, target._zone, type$.void_Function._as(new A._Future__chainCoreFuture_closure(_box_0, target)));
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, _box_0, t4, t5, hasError, asyncError, nextListener, nextListener0, sourceResult, t6, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic; true;) {
        _box_0 = {};
        t4 = t1._state;
        t5 = (t4 & 16) === 0;
        hasError = !t5;
        if (listeners == null) {
          if (hasError && (t4 & 1) === 0) {
            asyncError = t2._as(t1._resultOrListeners);
            A._rootHandleError(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t4 = _box_1.source;
        sourceResult = t4._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t5) {
          t6 = t1.state;
          t6 = (t6 & 1) !== 0 || (t6 & 15) === 8;
        } else
          t6 = true;
        if (t6) {
          zone = t1.result._zone;
          if (hasError) {
            t4 = t4._zone === zone;
            t4 = !(t4 || t4);
          } else
            t4 = false;
          if (t4) {
            t2._as(sourceResult);
            A._rootHandleError(sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = t1.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t5) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t1 instanceof A._Future) {
            t4 = _box_0.listener.$ti;
            t4 = t4._eval$1("Future<2>")._is(t1) || !t4._rest[1]._is(t1);
          } else
            t4 = false;
          if (t4) {
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state & 30 | result._state & 1;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFuture(t1, result, true);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t4 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t4);
          result._state = 8;
          result._resultOrListeners = t4;
        } else {
          t2._as(t4);
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t4;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      var t1;
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      t1 = type$.dynamic_Function_Object;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    StreamIterator_StreamIterator(stream, $T) {
      A.checkNotNullable(stream, "stream", type$.Object);
      return new A._StreamIterator($T._eval$1("_StreamIterator<0>"));
    },
    Timer_Timer(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return A.Timer__createTimer(duration, type$.void_Function._as(callback));
      return A.Timer__createTimer(duration, type$.void_Function._as(t1.bindCallbackGuarded$1(callback)));
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      type$.void_Function._as(f);
      if (B.C__RootZone !== zone)
        f = zone.bindCallbackGuarded$1(f);
      A._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
      this._handle = null;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._body = t0;
      _._suspendedBodies = _._nestedIterator = _._datum = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    TimeoutException: function TimeoutException(t0, t1) {
      this.message = t0;
      this.duration = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainCoreFuture_closure: function _Future__chainCoreFuture_closure(t0, t1) {
      this._box_0 = t0;
      this.target = t1;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteErrorObject_closure: function _Future__asyncCompleteErrorObject_closure(t0, t1) {
      this.$this = t0;
      this.error = t1;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0, t1) {
      this.joinedResult = t0;
      this.originalSource = t1;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0: function _Future__propagateToListeners_handleWhenCompleteCallback_closure0(t0) {
      this.joinedResult = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _Future_timeout_closure: function _Future_timeout_closure(t0, t1) {
      this._future = t0;
      this.timeLimit = t1;
    },
    _Future_timeout_closure0: function _Future_timeout_closure0(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this._future = t2;
    },
    _Future_timeout_closure1: function _Future_timeout_closure1(t0, t1) {
      this._box_0 = t0;
      this._future = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    _StreamIterator: function _StreamIterator(t0) {
      this.$ti = t0;
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    LinkedHashMap_LinkedHashMap($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications, $E) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    LinkedHashMap_LinkedHashMap$from(other, $K, $V) {
      var result = A.LinkedHashMap_LinkedHashMap($K, $V);
      other.forEach$1(0, new A.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashSet_LinkedHashSet$from(elements, $E) {
      var t1, _i,
        result = A.LinkedHashSet_LinkedHashSet($E);
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, A.throwConcurrentModificationError)(elements), ++_i)
        result.add$1(0, $E._as(elements[_i]));
      return result;
    },
    MapBase_mapToString(m) {
      var result, t1;
      if (A.isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        t1 = {};
        B.JSArray_methods.add$1($.toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__fillMapWithMappedIterable(map, iterable, key, value) {
      var t1, t2, element;
      for (t1 = A._instanceType(iterable), t2 = new A.ListIterator(iterable, iterable.get$length(0), t1._eval$1("ListIterator<ListBase.E>")), t1 = t1._eval$1("ListBase.E"); t2.moveNext$0();) {
        element = t2.__internal$_current;
        if (element == null)
          element = t1._as(element);
        map.$indexSet(0, key.call$1(element), value.call$1(element));
      }
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    MapBase: function MapBase() {
    },
    MapBase_entries_closure: function MapBase_entries_closure(t0) {
      this.$this = t0;
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    UnmodifiableMapBase: function UnmodifiableMapBase() {
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_keys = t0;
      _._collection$_map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView() {
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _Utf8Decoder__makeNativeUint8List(codeUnits, start, end) {
      var bytes, i, t1, b,
        $length = end - start;
      if ($length <= 4096)
        bytes = $.$get$_Utf8Decoder__reusableBuffer();
      else
        bytes = new Uint8Array($length);
      for (i = 0; i < $length; ++i) {
        t1 = start + i;
        if (!(t1 < codeUnits.length))
          return A.ioore(codeUnits, t1);
        b = codeUnits[t1];
        if ((b & 255) !== b)
          b = 255;
        bytes[i] = b;
      }
      return bytes;
    },
    _Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$_Utf8Decoder__decoderNonfatal() : $.$get$_Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A._Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A._Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, end));
    },
    _Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    Base64Codec__checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (B.JSInt_methods.$mod($length, 4) !== 0)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder_encodeChunk(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var t1, t2, t3, i, byteOr, byte, outputIndex0, t4, t5, outputIndex1,
        bits = state >>> 2,
        expectedChars = 3 - (state & 3);
      for (t1 = bytes.length, t2 = alphabet.length, t3 = output.$flags | 0, i = start, byteOr = 0; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(bytes, i);
        byte = bytes[i];
        byteOr = (byteOr | byte) >>> 0;
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          outputIndex0 = outputIndex + 1;
          t4 = bits >>> 18 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          t3 & 2 && A.throwUnsupportedOperation(output);
          t5 = output.length;
          if (!(outputIndex < t5))
            return A.ioore(output, outputIndex);
          output[outputIndex] = alphabet.charCodeAt(t4);
          outputIndex = outputIndex0 + 1;
          t4 = bits >>> 12 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex0 < t5))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = alphabet.charCodeAt(t4);
          outputIndex0 = outputIndex + 1;
          t4 = bits >>> 6 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex < t5))
            return A.ioore(output, outputIndex);
          output[outputIndex] = alphabet.charCodeAt(t4);
          outputIndex = outputIndex0 + 1;
          t4 = bits & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex0 < t5))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = alphabet.charCodeAt(t4);
          bits = 0;
          expectedChars = 3;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (expectedChars < 3) {
          outputIndex0 = outputIndex + 1;
          outputIndex1 = outputIndex0 + 1;
          if (3 - expectedChars === 1) {
            t1 = bits >>> 2 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            t3 & 2 && A.throwUnsupportedOperation(output);
            t3 = output.length;
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = alphabet.charCodeAt(t1);
            t1 = bits << 4 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex0 < t3))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = alphabet.charCodeAt(t1);
            outputIndex = outputIndex1 + 1;
            if (!(outputIndex1 < t3))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = 61;
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          } else {
            t1 = bits >>> 10 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            t3 & 2 && A.throwUnsupportedOperation(output);
            t3 = output.length;
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = alphabet.charCodeAt(t1);
            t1 = bits >>> 4 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex0 < t3))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = alphabet.charCodeAt(t1);
            outputIndex = outputIndex1 + 1;
            t1 = bits << 2 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex1 < t3))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = alphabet.charCodeAt(t1);
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          }
          return 0;
        }
        return (bits << 2 | 3 - expectedChars) >>> 0;
      }
      for (i = start; i < end;) {
        if (!(i < t1))
          return A.ioore(bytes, i);
        byte = bytes[i];
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      if (!(i < t1))
        return A.ioore(bytes, i);
      throw A.wrapException(A.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + B.JSInt_methods.toRadixString$1(bytes[i], 16), null));
    },
    _Base64Decoder_decodeChunk(input, start, end, output, outIndex, state) {
      var t1, t2, t3, i, charOr, char, t4, code, outIndex0, expectedPadding,
        _s31_ = "Invalid encoding before padding",
        _s17_ = "Invalid character",
        bits = B.JSInt_methods._shrOtherPositive$1(state, 2),
        count = state & 3,
        inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t1 = input.length, t2 = inverseAlphabet.length, t3 = output.$flags | 0, i = start, charOr = 0; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(input, i);
        char = input.charCodeAt(i);
        charOr |= char;
        t4 = char & 127;
        if (!(t4 < t2))
          return A.ioore(inverseAlphabet, t4);
        code = inverseAlphabet[t4];
        if (code >= 0) {
          bits = (bits << 6 | code) & 16777215;
          count = count + 1 & 3;
          if (count === 0) {
            outIndex0 = outIndex + 1;
            t3 & 2 && A.throwUnsupportedOperation(output);
            t4 = output.length;
            if (!(outIndex < t4))
              return A.ioore(output, outIndex);
            output[outIndex] = bits >>> 16 & 255;
            outIndex = outIndex0 + 1;
            if (!(outIndex0 < t4))
              return A.ioore(output, outIndex0);
            output[outIndex0] = bits >>> 8 & 255;
            outIndex0 = outIndex + 1;
            if (!(outIndex < t4))
              return A.ioore(output, outIndex);
            output[outIndex] = bits & 255;
            outIndex = outIndex0;
            bits = 0;
          }
          continue;
        } else if (code === -1 && count > 1) {
          if (charOr > 127)
            break;
          if (count === 3) {
            if ((bits & 3) !== 0)
              throw A.wrapException(A.FormatException$(_s31_, input, i));
            outIndex0 = outIndex + 1;
            t3 & 2 && A.throwUnsupportedOperation(output);
            t1 = output.length;
            if (!(outIndex < t1))
              return A.ioore(output, outIndex);
            output[outIndex] = bits >>> 10;
            if (!(outIndex0 < t1))
              return A.ioore(output, outIndex0);
            output[outIndex0] = bits >>> 2;
          } else {
            if ((bits & 15) !== 0)
              throw A.wrapException(A.FormatException$(_s31_, input, i));
            t3 & 2 && A.throwUnsupportedOperation(output);
            if (!(outIndex < output.length))
              return A.ioore(output, outIndex);
            output[outIndex] = bits >>> 4;
          }
          expectedPadding = (3 - count) * 3;
          if (char === 37)
            expectedPadding += 2;
          return A._Base64Decoder__checkPadding(input, i + 1, end, -expectedPadding - 1);
        }
        throw A.wrapException(A.FormatException$(_s17_, input, i));
      }
      if (charOr >= 0 && charOr <= 127)
        return (bits << 2 | count) >>> 0;
      for (i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(input, i);
        if (input.charCodeAt(i) > 127)
          break;
      }
      throw A.wrapException(A.FormatException$(_s17_, input, i));
    },
    _Base64Decoder__allocateBuffer(input, start, end, state) {
      var paddingStart = A._Base64Decoder__trimPaddingChars(input, start, end),
        $length = (state & 3) + (paddingStart - start),
        bufferLength = B.JSInt_methods._shrOtherPositive$1($length, 2) * 3,
        remainderLength = $length & 3;
      if (remainderLength !== 0 && paddingStart < end)
        bufferLength += remainderLength - 1;
      if (bufferLength > 0)
        return new Uint8Array(bufferLength);
      return $.$get$_Base64Decoder__emptyBuffer();
    },
    _Base64Decoder__trimPaddingChars(input, start, end) {
      var char,
        t1 = input.length,
        newEnd = end,
        index = newEnd,
        padding = 0;
      while (true) {
        if (!(index > start && padding < 2))
          break;
        c$0: {
          --index;
          if (!(index >= 0 && index < t1))
            return A.ioore(input, index);
          char = input.charCodeAt(index);
          if (char === 61) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          if ((char | 32) === 100) {
            if (index === start)
              break;
            --index;
            if (!(index >= 0 && index < t1))
              return A.ioore(input, index);
            char = input.charCodeAt(index);
          }
          if (char === 51) {
            if (index === start)
              break;
            --index;
            if (!(index >= 0 && index < t1))
              return A.ioore(input, index);
            char = input.charCodeAt(index);
          }
          if (char === 37) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          break;
        }
      }
      return newEnd;
    },
    _Base64Decoder__checkPadding(input, start, end, state) {
      var expectedPadding, t1, char;
      if (start === end)
        return state;
      expectedPadding = -state - 1;
      for (t1 = input.length; expectedPadding > 0;) {
        if (!(start < t1))
          return A.ioore(input, start);
        char = input.charCodeAt(start);
        if (expectedPadding === 3) {
          if (char === 61) {
            expectedPadding -= 3;
            ++start;
            break;
          }
          if (char === 37) {
            --expectedPadding;
            ++start;
            if (start === end)
              break;
            if (!(start < t1))
              return A.ioore(input, start);
            char = input.charCodeAt(start);
          } else
            break;
        }
        if ((expectedPadding > 3 ? expectedPadding - 3 : expectedPadding) === 2) {
          if (char !== 51)
            break;
          ++start;
          --expectedPadding;
          if (start === end)
            break;
          if (!(start < t1))
            return A.ioore(input, start);
          char = input.charCodeAt(start);
        }
        if ((char | 32) !== 100)
          break;
        ++start;
        --expectedPadding;
        if (start === end)
          break;
      }
      if (start !== end)
        throw A.wrapException(A.FormatException$("Invalid padding character", input, start));
      return -expectedPadding - 1;
    },
    JsonUnsupportedObjectError$(unsupportedObject, cause, partialResult) {
      return new A.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier$(_sink, _toEncodable) {
      var t1 = _toEncodable == null ? A.convert___defaultToEncodable$closure() : _toEncodable;
      return new A._JsonStringStringifier(_sink, [], t1);
    },
    _JsonStringStringifier_stringify(object, toEncodable, indent) {
      var t1,
        output = new A.StringBuffer(""),
        stringifier = A._JsonStringStringifier$(output, toEncodable);
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _Utf8Decoder__decoder_closure: function _Utf8Decoder__decoder_closure() {
    },
    _Utf8Decoder__decoderNonfatal_closure: function _Utf8Decoder__decoderNonfatal_closure() {
    },
    AsciiCodec: function AsciiCodec() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder() {
    },
    _UnicodeSubsetDecoder: function _UnicodeSubsetDecoder() {
    },
    AsciiDecoder: function AsciiDecoder(t0) {
      this._allowInvalid = t0;
    },
    Base64Codec: function Base64Codec(t0) {
      this._encoder = t0;
    },
    Base64Encoder: function Base64Encoder(t0) {
      this._urlSafe = t0;
    },
    _Base64Encoder: function _Base64Encoder(t0) {
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    Base64Decoder: function Base64Decoder() {
    },
    _Base64Decoder: function _Base64Decoder() {
      this._convert$_state = 0;
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0, t1) {
      this.indent = t0;
      this._toEncodable = t1;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._convert$_buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    _BigIntImpl_parse(source, radix) {
      var result = A._BigIntImpl__tryParse(source, radix);
      if (result == null)
        throw A.wrapException(A.FormatException$("Could not parse BigInt", source, null));
      return result;
    },
    _BigIntImpl__parseDecimal(source, isNegative) {
      var part, i,
        result = $.$get$_BigIntImpl_zero(),
        t1 = source.length,
        digitInPartCount = 4 - t1 % 4;
      if (digitInPartCount === 4)
        digitInPartCount = 0;
      for (part = 0, i = 0; i < t1; ++i) {
        part = part * 10 + source.charCodeAt(i) - 48;
        ++digitInPartCount;
        if (digitInPartCount === 4) {
          result = result.$mul(0, $.$get$_BigIntImpl__bigInt10000()).$add(0, A._BigIntImpl__BigIntImpl$_fromInt(part));
          part = 0;
          digitInPartCount = 0;
        }
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__codeUnitToRadixValue(codeUnit) {
      if (48 <= codeUnit && codeUnit <= 57)
        return codeUnit - 48;
      return (codeUnit | 32) - 97 + 10;
    },
    _BigIntImpl__parseHex(source, startPos, isNegative) {
      var i, chunk, j, i0, digitValue, digitIndex, digitIndex0,
        t1 = source.length,
        sourceLength = t1 - startPos,
        chunkCount = B.JSNumber_methods.ceil$0(sourceLength / 4),
        digits = new Uint16Array(chunkCount),
        t2 = chunkCount - 1,
        lastDigitLength = sourceLength - t2 * 4;
      for (i = startPos, chunk = 0, j = 0; j < lastDigitLength; ++j, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(source, i);
        digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
        if (digitValue >= 16)
          return null;
        chunk = chunk * 16 + digitValue;
      }
      digitIndex = t2 - 1;
      if (!(t2 >= 0 && t2 < chunkCount))
        return A.ioore(digits, t2);
      digits[t2] = chunk;
      for (; i < t1; digitIndex = digitIndex0) {
        for (chunk = 0, j = 0; j < 4; ++j, i = i0) {
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(source, i);
          digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
          if (digitValue >= 16)
            return null;
          chunk = chunk * 16 + digitValue;
        }
        digitIndex0 = digitIndex - 1;
        if (!(digitIndex >= 0 && digitIndex < chunkCount))
          return A.ioore(digits, digitIndex);
        digits[digitIndex] = chunk;
      }
      if (chunkCount === 1) {
        if (0 >= chunkCount)
          return A.ioore(digits, 0);
        t1 = digits[0] === 0;
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_zero();
      t1 = A._BigIntImpl__normalize(chunkCount, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__parseRadix(source, radix, isNegative) {
      var t1, i, digitValue,
        result = $.$get$_BigIntImpl_zero(),
        base = A._BigIntImpl__BigIntImpl$_fromInt(radix);
      for (t1 = source.length, i = 0; i < t1; ++i) {
        digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
        if (digitValue >= radix)
          return null;
        result = result.$mul(0, base).$add(0, A._BigIntImpl__BigIntImpl$_fromInt(digitValue));
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__tryParse(source, radix) {
      var match, t1, t2, isNegative, decimalMatch, hexMatch, nonDecimalMatch, _null = null;
      if (source === "")
        return _null;
      match = $.$get$_BigIntImpl__parseRE().firstMatch$1(source);
      if (match == null)
        return _null;
      t1 = match._match;
      t2 = t1.length;
      if (1 >= t2)
        return A.ioore(t1, 1);
      isNegative = t1[1] === "-";
      if (4 >= t2)
        return A.ioore(t1, 4);
      decimalMatch = t1[4];
      hexMatch = t1[3];
      if (5 >= t2)
        return A.ioore(t1, 5);
      nonDecimalMatch = t1[5];
      if (radix == null) {
        if (decimalMatch != null)
          return A._BigIntImpl__parseDecimal(decimalMatch, isNegative);
        if (hexMatch != null)
          return A._BigIntImpl__parseHex(hexMatch, 2, isNegative);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return A._BigIntImpl__parseDecimal(decimalMatch, isNegative);
      if (radix === 16)
        t1 = decimalMatch != null || nonDecimalMatch != null;
      else
        t1 = false;
      if (t1) {
        if (decimalMatch == null) {
          nonDecimalMatch.toString;
          t1 = nonDecimalMatch;
        } else
          t1 = decimalMatch;
        return A._BigIntImpl__parseHex(t1, 0, isNegative);
      }
      t1 = decimalMatch == null ? nonDecimalMatch : decimalMatch;
      if (t1 == null) {
        hexMatch.toString;
        t1 = hexMatch;
      }
      return A._BigIntImpl__parseRadix(t1, radix, isNegative);
    },
    _BigIntImpl__normalize(used, digits) {
      var t2,
        t1 = digits.length;
      while (true) {
        if (used > 0) {
          t2 = used - 1;
          if (!(t2 < t1))
            return A.ioore(digits, t2);
          t2 = digits[t2] === 0;
        } else
          t2 = false;
        if (!t2)
          break;
        --used;
      }
      return used;
    },
    _BigIntImpl__cloneDigits(digits, from, to, $length) {
      var t1, i, t2,
        resultDigits = new Uint16Array($length),
        n = to - from;
      for (t1 = digits.length, i = 0; i < n; ++i) {
        t2 = from + i;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(digits, t2);
        t2 = digits[t2];
        if (!(i < $length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      return resultDigits;
    },
    _BigIntImpl__BigIntImpl$from(value) {
      var t1;
      if (value === 0)
        return $.$get$_BigIntImpl_zero();
      if (value === 1)
        return $.$get$_BigIntImpl_one();
      if (value === 2)
        return $.$get$_BigIntImpl_two();
      if (Math.abs(value) < 4294967296)
        return A._BigIntImpl__BigIntImpl$_fromInt(B.JSInt_methods.toInt$0(value));
      t1 = A._BigIntImpl__BigIntImpl$_fromDouble(value);
      return t1;
    },
    _BigIntImpl__BigIntImpl$_fromInt(value) {
      var digits, t1, i, i0,
        isNegative = value < 0;
      if (isNegative) {
        if (value === -9223372036854776e3) {
          digits = new Uint16Array(4);
          digits[3] = 32768;
          t1 = A._BigIntImpl__normalize(4, digits);
          return new A._BigIntImpl(t1 !== 0, digits, t1);
        }
        value = -value;
      }
      if (value < 65536) {
        digits = new Uint16Array(1);
        digits[0] = value;
        t1 = A._BigIntImpl__normalize(1, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      if (value <= 4294967295) {
        digits = new Uint16Array(2);
        digits[0] = value & 65535;
        digits[1] = B.JSInt_methods._shrOtherPositive$1(value, 16);
        t1 = A._BigIntImpl__normalize(2, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      t1 = B.JSInt_methods._tdivFast$1(B.JSInt_methods.get$bitLength(value) - 1, 16) + 1;
      digits = new Uint16Array(t1);
      for (i = 0; value !== 0; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(digits, i);
        digits[i] = value & 65535;
        value = B.JSInt_methods._tdivFast$1(value, 65536);
      }
      t1 = A._BigIntImpl__normalize(t1, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__BigIntImpl$_fromDouble(value) {
      var isNegative, bits, t1, i, exponent, unshiftedDigits, unshiftedBig, absResult;
      if (isNaN(value) || value == 1 / 0 || value == -1 / 0)
        throw A.wrapException(A.ArgumentError$("Value must be finite: " + value, null));
      isNegative = value < 0;
      if (isNegative)
        value = -value;
      value = Math.floor(value);
      if (value === 0)
        return $.$get$_BigIntImpl_zero();
      bits = $.$get$_BigIntImpl__bitsForFromDouble();
      for (t1 = bits.$flags | 0, i = 0; i < 8; ++i) {
        t1 & 2 && A.throwUnsupportedOperation(bits);
        if (!(i < 8))
          return A.ioore(bits, i);
        bits[i] = 0;
      }
      t1 = J.asByteData$0$x(B.NativeUint8List_methods.get$buffer(bits));
      t1.$flags & 2 && A.throwUnsupportedOperation(t1, 13);
      t1.setFloat64(0, value, true);
      exponent = (bits[7] << 4 >>> 0) + (bits[6] >>> 4) - 1075;
      unshiftedDigits = new Uint16Array(4);
      unshiftedDigits[0] = (bits[1] << 8 >>> 0) + bits[0];
      unshiftedDigits[1] = (bits[3] << 8 >>> 0) + bits[2];
      unshiftedDigits[2] = (bits[5] << 8 >>> 0) + bits[4];
      unshiftedDigits[3] = bits[6] & 15 | 16;
      unshiftedBig = new A._BigIntImpl(false, unshiftedDigits, 4);
      if (exponent < 0)
        absResult = unshiftedBig.$shr(0, -exponent);
      else
        absResult = exponent > 0 ? unshiftedBig.$shl(0, exponent) : unshiftedBig;
      if (isNegative)
        return absResult.$negate(0);
      return absResult;
    },
    _BigIntImpl__dlShiftDigits(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, t3, t4;
      if (xUsed === 0)
        return 0;
      if (n === 0 && resultDigits === xDigits)
        return xUsed;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.$flags | 0; i >= 0; --i) {
        t3 = i + n;
        if (!(i < t1))
          return A.ioore(xDigits, i);
        t4 = xDigits[i];
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(t3 >= 0 && t3 < resultDigits.length))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = t4;
      }
      for (i = n - 1; i >= 0; --i) {
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return xUsed + n;
    },
    _BigIntImpl__lsh(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, carry, digit, t3, t4,
        digitShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, carryBitShift) - 1;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.$flags | 0, carry = 0; i >= 0; --i) {
        if (!(i < t1))
          return A.ioore(xDigits, i);
        digit = xDigits[i];
        t3 = i + digitShift + 1;
        t4 = B.JSInt_methods._shrReceiverPositive$1(digit, carryBitShift);
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(t3 >= 0 && t3 < resultDigits.length))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = (t4 | carry) >>> 0;
        carry = B.JSInt_methods.$shl(digit & bitMask, bitShift);
      }
      t2 & 2 && A.throwUnsupportedOperation(resultDigits);
      if (!(digitShift >= 0 && digitShift < resultDigits.length))
        return A.ioore(resultDigits, digitShift);
      resultDigits[digitShift] = carry;
    },
    _BigIntImpl__lShiftDigits(xDigits, xUsed, n, resultDigits) {
      var resultUsed, t1, i,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16);
      if (B.JSInt_methods.$mod(n, 16) === 0)
        return A._BigIntImpl__dlShiftDigits(xDigits, xUsed, digitsShift, resultDigits);
      resultUsed = xUsed + digitsShift + 1;
      A._BigIntImpl__lsh(xDigits, xUsed, n, resultDigits);
      for (t1 = resultDigits.$flags | 0, i = digitsShift; --i, i >= 0;) {
        t1 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      t1 = resultUsed - 1;
      if (!(t1 >= 0 && t1 < resultDigits.length))
        return A.ioore(resultDigits, t1);
      if (resultDigits[t1] === 0)
        resultUsed = t1;
      return resultUsed;
    },
    _BigIntImpl__rsh(xDigits, xUsed, n, resultDigits) {
      var carry, last, t2, i, t3, digit,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, bitShift) - 1,
        t1 = xDigits.length;
      if (!(digitsShift >= 0 && digitsShift < t1))
        return A.ioore(xDigits, digitsShift);
      carry = B.JSInt_methods._shrReceiverPositive$1(xDigits[digitsShift], bitShift);
      last = xUsed - digitsShift - 1;
      for (t2 = resultDigits.$flags | 0, i = 0; i < last; ++i) {
        t3 = i + digitsShift + 1;
        if (!(t3 < t1))
          return A.ioore(xDigits, t3);
        digit = xDigits[t3];
        t3 = B.JSInt_methods.$shl((digit & bitMask) >>> 0, carryBitShift);
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = (t3 | carry) >>> 0;
        carry = B.JSInt_methods._shrReceiverPositive$1(digit, bitShift);
      }
      t2 & 2 && A.throwUnsupportedOperation(resultDigits);
      if (!(last >= 0 && last < resultDigits.length))
        return A.ioore(resultDigits, last);
      resultDigits[last] = carry;
    },
    _BigIntImpl__compareDigits(digits, used, otherDigits, otherUsed) {
      var i, t1, t2, t3,
        result = used - otherUsed;
      if (result === 0)
        for (i = used - 1, t1 = digits.length, t2 = otherDigits.length; i >= 0; --i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          t3 = digits[i];
          if (!(i < t2))
            return A.ioore(otherDigits, i);
          result = t3 - otherDigits[i];
          if (result !== 0)
            return result;
        }
      return result;
    },
    _BigIntImpl__absAdd(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.$flags | 0, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 + otherDigits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = carry >>> 16;
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = carry >>> 16;
      }
      t3 & 2 && A.throwUnsupportedOperation(resultDigits);
      if (!(used >= 0 && used < resultDigits.length))
        return A.ioore(resultDigits, used);
      resultDigits[used] = carry;
    },
    _BigIntImpl__absSub(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.$flags | 0, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 - otherDigits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
    },
    _BigIntImpl__mulAdd(x, multiplicandDigits, i, accumulatorDigits, j, n) {
      var t1, t2, t3, c, i0, t4, combined, j0, l;
      if (x === 0)
        return;
      for (t1 = multiplicandDigits.length, t2 = accumulatorDigits.length, t3 = accumulatorDigits.$flags | 0, c = 0; --n, n >= 0; j = j0, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(multiplicandDigits, i);
        t4 = multiplicandDigits[i];
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        combined = x * t4 + accumulatorDigits[j] + c;
        j0 = j + 1;
        t3 & 2 && A.throwUnsupportedOperation(accumulatorDigits);
        accumulatorDigits[j] = combined & 65535;
        c = B.JSInt_methods._tdivFast$1(combined, 65536);
      }
      for (; c !== 0; j = j0) {
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        l = accumulatorDigits[j] + c;
        j0 = j + 1;
        t3 & 2 && A.throwUnsupportedOperation(accumulatorDigits);
        accumulatorDigits[j] = l & 65535;
        c = B.JSInt_methods._tdivFast$1(l, 65536);
      }
    },
    _BigIntImpl__mulDigits(xDigits, xUsed, otherDigits, otherUsed, resultDigits) {
      var t1, i,
        resultUsed = xUsed + otherUsed;
      for (t1 = resultDigits.$flags | 0, i = resultUsed; --i, i >= 0;) {
        t1 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (!(i < t1))
          return A.ioore(otherDigits, i);
        A._BigIntImpl__mulAdd(otherDigits[i], xDigits, 0, resultDigits, i, xUsed);
        ++i;
      }
      return resultUsed;
    },
    _BigIntImpl__estimateQuotientDigit(topDigitDivisor, digits, i) {
      var t2, t3, quotientDigit,
        t1 = digits.length;
      if (!(i >= 0 && i < t1))
        return A.ioore(digits, i);
      t2 = digits[i];
      if (t2 === topDigitDivisor)
        return 65535;
      t3 = i - 1;
      if (!(t3 >= 0 && t3 < t1))
        return A.ioore(digits, t3);
      quotientDigit = B.JSInt_methods.$tdiv((t2 << 16 | digits[t3]) >>> 0, topDigitDivisor);
      if (quotientDigit > 65535)
        return 65535;
      return quotientDigit;
    },
    _BigIntImpl__binaryGcd(x, y, inv) {
      var t1, uDigits, vDigits, ac, abcdUsed, abcdLen, aDigits, cDigits, bDigits, dDigits, t2, t3, t4, aIsNegative, cIsNegative, bIsNegative, dIsNegative, t5, a_cmp_c, b_cmp_d, c_cmp_a, d_cmp_b, i,
        _s11_ = "Not coprime",
        xUsed = x._used,
        yUsed = y._used,
        maxUsed = xUsed > yUsed ? xUsed : yUsed,
        xDigits = A._BigIntImpl__cloneDigits(x._digits, 0, xUsed, maxUsed),
        yDigits = A._BigIntImpl__cloneDigits(y._digits, 0, yUsed, maxUsed);
      if (yUsed === 1) {
        if (0 >= yDigits.length)
          return A.ioore(yDigits, 0);
        t1 = yDigits[0] === 1;
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_one();
      if (yUsed !== 0) {
        if (0 >= yDigits.length)
          return A.ioore(yDigits, 0);
        if ((yDigits[0] & 1) === 0) {
          if (0 >= xDigits.length)
            return A.ioore(xDigits, 0);
          t1 = (xDigits[0] & 1) === 0;
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.Exception_Exception(_s11_));
      uDigits = A._BigIntImpl__cloneDigits(xDigits, 0, xUsed, maxUsed);
      vDigits = A._BigIntImpl__cloneDigits(yDigits, 0, yUsed, maxUsed + 2);
      if (0 >= xDigits.length)
        return A.ioore(xDigits, 0);
      ac = (xDigits[0] & 1) === 0;
      abcdUsed = maxUsed + 1;
      abcdLen = abcdUsed + 2;
      aDigits = $.$get$_dummyList();
      if (ac) {
        aDigits = new Uint16Array(abcdLen);
        if (0 >= abcdLen)
          return A.ioore(aDigits, 0);
        aDigits[0] = 1;
        cDigits = new Uint16Array(abcdLen);
      } else
        cDigits = aDigits;
      bDigits = new Uint16Array(abcdLen);
      dDigits = new Uint16Array(abcdLen);
      if (0 >= abcdLen)
        return A.ioore(dDigits, 0);
      dDigits[0] = 1;
      for (t1 = uDigits.length, t2 = vDigits.length, t3 = cDigits.length, t4 = aDigits.length, aIsNegative = false, cIsNegative = false, bIsNegative = false, dIsNegative = false; true;) {
        if (0 >= t1)
          return A.ioore(uDigits, 0);
        for (; (uDigits[0] & 1) === 0;) {
          A._BigIntImpl__rsh(uDigits, maxUsed, 1, uDigits);
          if (ac) {
            if (0 >= t4)
              return A.ioore(aDigits, 0);
            if ((aDigits[0] & 1) !== 1) {
              if (0 >= abcdLen)
                return A.ioore(bDigits, 0);
              t5 = (bDigits[0] & 1) === 1;
            } else
              t5 = true;
            if (t5) {
              if (aIsNegative) {
                if (!(maxUsed >= 0 && maxUsed < t4))
                  return A.ioore(aDigits, maxUsed);
                aIsNegative = aDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(aDigits, maxUsed, yDigits, maxUsed) > 0;
                if (aIsNegative)
                  A._BigIntImpl__absSub(aDigits, abcdUsed, yDigits, maxUsed, aDigits);
                else
                  A._BigIntImpl__absSub(yDigits, maxUsed, aDigits, maxUsed, aDigits);
              } else
                A._BigIntImpl__absAdd(aDigits, abcdUsed, yDigits, maxUsed, aDigits);
              if (bIsNegative)
                A._BigIntImpl__absAdd(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
              else {
                if (!(maxUsed >= 0 && maxUsed < abcdLen))
                  return A.ioore(bDigits, maxUsed);
                t5 = bDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(bDigits, maxUsed, xDigits, maxUsed) > 0;
                if (t5)
                  A._BigIntImpl__absSub(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
                else
                  A._BigIntImpl__absSub(xDigits, maxUsed, bDigits, maxUsed, bDigits);
                bIsNegative = !t5;
              }
            }
            A._BigIntImpl__rsh(aDigits, abcdUsed, 1, aDigits);
          } else {
            if (0 >= abcdLen)
              return A.ioore(bDigits, 0);
            if ((bDigits[0] & 1) === 1)
              if (bIsNegative)
                A._BigIntImpl__absAdd(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
              else {
                if (!(maxUsed >= 0 && maxUsed < abcdLen))
                  return A.ioore(bDigits, maxUsed);
                t5 = bDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(bDigits, maxUsed, xDigits, maxUsed) > 0;
                if (t5)
                  A._BigIntImpl__absSub(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
                else
                  A._BigIntImpl__absSub(xDigits, maxUsed, bDigits, maxUsed, bDigits);
                bIsNegative = !t5;
              }
          }
          A._BigIntImpl__rsh(bDigits, abcdUsed, 1, bDigits);
        }
        if (0 >= t2)
          return A.ioore(vDigits, 0);
        for (; (vDigits[0] & 1) === 0;) {
          A._BigIntImpl__rsh(vDigits, maxUsed, 1, vDigits);
          if (ac) {
            if (0 >= t3)
              return A.ioore(cDigits, 0);
            if ((cDigits[0] & 1) === 1 || (dDigits[0] & 1) === 1) {
              if (cIsNegative) {
                if (!(maxUsed >= 0 && maxUsed < t3))
                  return A.ioore(cDigits, maxUsed);
                cIsNegative = cDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(cDigits, maxUsed, yDigits, maxUsed) > 0;
                if (cIsNegative)
                  A._BigIntImpl__absSub(cDigits, abcdUsed, yDigits, maxUsed, cDigits);
                else
                  A._BigIntImpl__absSub(yDigits, maxUsed, cDigits, maxUsed, cDigits);
              } else
                A._BigIntImpl__absAdd(cDigits, abcdUsed, yDigits, maxUsed, cDigits);
              if (dIsNegative)
                A._BigIntImpl__absAdd(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
              else {
                if (!(maxUsed >= 0 && maxUsed < abcdLen))
                  return A.ioore(dDigits, maxUsed);
                t5 = dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) > 0;
                if (t5)
                  A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
                else
                  A._BigIntImpl__absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
                dIsNegative = !t5;
              }
            }
            A._BigIntImpl__rsh(cDigits, abcdUsed, 1, cDigits);
          } else if ((dDigits[0] & 1) === 1)
            if (dIsNegative)
              A._BigIntImpl__absAdd(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
            else {
              if (!(maxUsed >= 0 && maxUsed < abcdLen))
                return A.ioore(dDigits, maxUsed);
              t5 = dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) > 0;
              if (t5)
                A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
              else
                A._BigIntImpl__absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
              dIsNegative = !t5;
            }
          A._BigIntImpl__rsh(dDigits, abcdUsed, 1, dDigits);
        }
        if (A._BigIntImpl__compareDigits(uDigits, maxUsed, vDigits, maxUsed) >= 0) {
          A._BigIntImpl__absSub(uDigits, maxUsed, vDigits, maxUsed, uDigits);
          if (ac)
            if (aIsNegative === cIsNegative) {
              a_cmp_c = A._BigIntImpl__compareDigits(aDigits, abcdUsed, cDigits, abcdUsed);
              if (a_cmp_c > 0)
                A._BigIntImpl__absSub(aDigits, abcdUsed, cDigits, abcdUsed, aDigits);
              else {
                A._BigIntImpl__absSub(cDigits, abcdUsed, aDigits, abcdUsed, aDigits);
                aIsNegative = !aIsNegative && a_cmp_c !== 0;
              }
            } else
              A._BigIntImpl__absAdd(aDigits, abcdUsed, cDigits, abcdUsed, aDigits);
          if (bIsNegative === dIsNegative) {
            b_cmp_d = A._BigIntImpl__compareDigits(bDigits, abcdUsed, dDigits, abcdUsed);
            if (b_cmp_d > 0)
              A._BigIntImpl__absSub(bDigits, abcdUsed, dDigits, abcdUsed, bDigits);
            else {
              A._BigIntImpl__absSub(dDigits, abcdUsed, bDigits, abcdUsed, bDigits);
              bIsNegative = !bIsNegative && b_cmp_d !== 0;
            }
          } else
            A._BigIntImpl__absAdd(bDigits, abcdUsed, dDigits, abcdUsed, bDigits);
        } else {
          A._BigIntImpl__absSub(vDigits, maxUsed, uDigits, maxUsed, vDigits);
          if (ac)
            if (cIsNegative === aIsNegative) {
              c_cmp_a = A._BigIntImpl__compareDigits(cDigits, abcdUsed, aDigits, abcdUsed);
              if (c_cmp_a > 0)
                A._BigIntImpl__absSub(cDigits, abcdUsed, aDigits, abcdUsed, cDigits);
              else {
                A._BigIntImpl__absSub(aDigits, abcdUsed, cDigits, abcdUsed, cDigits);
                cIsNegative = !cIsNegative && c_cmp_a !== 0;
              }
            } else
              A._BigIntImpl__absAdd(cDigits, abcdUsed, aDigits, abcdUsed, cDigits);
          if (dIsNegative === bIsNegative) {
            d_cmp_b = A._BigIntImpl__compareDigits(dDigits, abcdUsed, bDigits, abcdUsed);
            if (d_cmp_b > 0)
              A._BigIntImpl__absSub(dDigits, abcdUsed, bDigits, abcdUsed, dDigits);
            else {
              A._BigIntImpl__absSub(bDigits, abcdUsed, dDigits, abcdUsed, dDigits);
              dIsNegative = !dIsNegative && d_cmp_b !== 0;
            }
          } else
            A._BigIntImpl__absAdd(dDigits, abcdUsed, bDigits, abcdUsed, dDigits);
        }
        i = maxUsed;
        while (true) {
          if (i > 0) {
            t5 = i - 1;
            if (!(t5 < t1))
              return A.ioore(uDigits, t5);
            t5 = uDigits[t5] === 0;
          } else
            t5 = false;
          if (!t5)
            break;
          --i;
        }
        if (i === 0)
          break;
      }
      i = maxUsed - 1;
      while (true) {
        if (i > 0) {
          if (!(i < t2))
            return A.ioore(vDigits, i);
          t1 = vDigits[i] === 0;
        } else
          t1 = false;
        if (!t1)
          break;
        --i;
      }
      if (i === 0) {
        if (0 >= t2)
          return A.ioore(vDigits, 0);
        t1 = vDigits[0] !== 1;
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.Exception_Exception(_s11_));
      if (dIsNegative) {
        if (!(maxUsed >= 0 && maxUsed < abcdLen))
          return A.ioore(dDigits, maxUsed);
        while (true) {
          if (!(dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) > 0))
            break;
          A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
        }
        A._BigIntImpl__absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
      } else {
        if (!(maxUsed >= 0 && maxUsed < abcdLen))
          return A.ioore(dDigits, maxUsed);
        while (true) {
          if (!(dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) >= 0))
            break;
          A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
        }
      }
      t1 = A._BigIntImpl__normalize(maxUsed, dDigits);
      return new A._BigIntImpl(false, dDigits, t1);
    },
    int_parse(source, radix) {
      var value = A.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null, null));
    },
    Error__throw(error, stackTrace) {
      error = A.initializeExceptionWrapper(error, new Error());
      if (error == null)
        error = type$.Object._as(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < $length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      if (growable)
        return list;
      list.$flags = 1;
      return list;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    List_List$unmodifiable(elements, $E) {
      var result = A.List_List$from(elements, false, $E);
      result.$flags = 3;
      return result;
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var t1, t2, maxLength, array, len;
      A.RangeError_checkNotNegative(start, "start");
      t1 = end == null;
      t2 = !t1;
      if (t2) {
        maxLength = end - start;
        if (maxLength < 0)
          throw A.wrapException(A.RangeError$range(end, start, null, "end", null));
        if (maxLength === 0)
          return "";
      }
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        if (t1)
          end = len;
        return A.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return A.String__stringFromUint8List(charCodes, start, end);
      if (t2)
        charCodes = J.take$1$ax(charCodes, end);
      if (start > 0)
        charCodes = J.skip$1$ax(charCodes, start);
      t1 = A.List_List$_of(charCodes, type$.int);
      return A.Primitives_stringFromCharCodes(t1);
    },
    String__stringFromUint8List(charCodes, start, endOrNull) {
      var len = charCodes.length;
      if (start >= len)
        return "";
      return A.Primitives_stringFromNativeUint8List(charCodes, start, endOrNull == null || endOrNull > len ? len : endOrNull);
    },
    RegExp_RegExp(source, caseSensitive) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, false, caseSensitive, false, false, ""));
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current());
      }
      return string;
    },
    StackTrace_current() {
      return A.getTraceFromException(new Error());
    },
    DateTime$fromMillisecondsSinceEpoch(millisecondsSinceEpoch) {
      if (millisecondsSinceEpoch < -864e13 || millisecondsSinceEpoch > 864e13)
        A.throwExpression(A.RangeError$range(millisecondsSinceEpoch, -864e13, 864e13, "millisecondsSinceEpoch", null));
      A.checkNotNullable(false, "isUtc", type$.bool);
      return new A.DateTime(millisecondsSinceEpoch, 0, false);
    },
    DateTime__finishParse(year, month, day, hour, minute, second, millisecond, microsecond, isUtc) {
      var value = A.Primitives_valueFromDecomposedDate(year, month, day, hour, minute, second, millisecond, microsecond, isUtc);
      if (value == null)
        return null;
      return new A.DateTime(A.DateTime__validate(value, microsecond, isUtc), microsecond, isUtc);
    },
    DateTime_parse(formattedString) {
      var t1, t2, t3, years, month, day, hour, minute, second, milliAndMicroseconds, millisecond, isUtc, tzSign, sign, hourDifference, result, _null = null,
        match = $.$get$DateTime__parseFormat().firstMatch$1(formattedString);
      if (match != null) {
        t1 = new A.DateTime_parse_parseIntOrZero();
        t2 = match._match;
        if (1 >= t2.length)
          return A.ioore(t2, 1);
        t3 = t2[1];
        t3.toString;
        years = A.int_parse(t3, _null);
        if (2 >= t2.length)
          return A.ioore(t2, 2);
        t3 = t2[2];
        t3.toString;
        month = A.int_parse(t3, _null);
        if (3 >= t2.length)
          return A.ioore(t2, 3);
        t3 = t2[3];
        t3.toString;
        day = A.int_parse(t3, _null);
        if (4 >= t2.length)
          return A.ioore(t2, 4);
        hour = t1.call$1(t2[4]);
        if (5 >= t2.length)
          return A.ioore(t2, 5);
        minute = t1.call$1(t2[5]);
        if (6 >= t2.length)
          return A.ioore(t2, 6);
        second = t1.call$1(t2[6]);
        if (7 >= t2.length)
          return A.ioore(t2, 7);
        milliAndMicroseconds = new A.DateTime_parse_parseMilliAndMicroseconds().call$1(t2[7]);
        millisecond = B.JSInt_methods._tdivFast$1(milliAndMicroseconds, 1000);
        t3 = t2.length;
        if (8 >= t3)
          return A.ioore(t2, 8);
        isUtc = t2[8] != null;
        if (isUtc) {
          if (9 >= t3)
            return A.ioore(t2, 9);
          tzSign = t2[9];
          if (tzSign != null) {
            sign = tzSign === "-" ? -1 : 1;
            if (10 >= t3)
              return A.ioore(t2, 10);
            t3 = t2[10];
            t3.toString;
            hourDifference = A.int_parse(t3, _null);
            if (11 >= t2.length)
              return A.ioore(t2, 11);
            minute -= sign * (t1.call$1(t2[11]) + 60 * hourDifference);
          }
        }
        result = A.DateTime__finishParse(years, month, day, hour, minute, second, millisecond, milliAndMicroseconds % 1000, isUtc);
        if (result == null)
          throw A.wrapException(A.FormatException$("Time out of range", formattedString, _null));
        return result;
      } else
        throw A.wrapException(A.FormatException$("Invalid date format", formattedString, _null));
    },
    DateTime__validate(millisecondsSinceEpoch, microsecond, isUtc) {
      var _s11_ = "microsecond";
      if (microsecond > 999)
        throw A.wrapException(A.RangeError$range(microsecond, 0, 999, _s11_, null));
      if (millisecondsSinceEpoch < -864e13 || millisecondsSinceEpoch > 864e13)
        throw A.wrapException(A.RangeError$range(millisecondsSinceEpoch, -864e13, 864e13, "millisecondsSinceEpoch", null));
      if (millisecondsSinceEpoch === 864e13 && microsecond !== 0)
        throw A.wrapException(A.ArgumentError$value(microsecond, _s11_, "Time including microseconds is outside valid range"));
      A.checkNotNullable(isUtc, "isUtc", type$.bool);
      return millisecondsSinceEpoch;
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__sixDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "+";
      if (absN >= 100000)
        return sign + absN;
      return sign + "0" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Primitives_safeToString(object);
    },
    Error_throwWithStackTrace(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      A.checkNotNullable(stackTrace, "stackTrace", type$.StackTrace);
      A.Error__throw(error, stackTrace);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError_checkNotNull(argument, $name, $T) {
      return argument;
    },
    RangeError$value(value, $name) {
      return new A.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw A.wrapException(A.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$withLength(invalidValue, $length, indexable, message, $name) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new A._Exception(message);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    Iterable_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A.isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Iterable_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A.isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    Map_castFrom(source, $K, $V, K2, V2) {
      return new A.CastMap(source, $K._eval$1("@<0>")._bind$1($V)._bind$1(K2)._bind$1(V2)._eval$1("CastMap<1,2,3,4>"));
    },
    Map_Map$fromEntries(entries, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap$_empty($K, $V);
      t1.addEntries$1(entries);
      return t1;
    },
    Object_hash(object1, object2, object3, object4) {
      var t1;
      if (B.C_SentinelValue === object3) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      if (B.C_SentinelValue === object4) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3));
      }
      t1 = J.get$hashCode$(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      object4 = J.get$hashCode$(object4);
      object4 = A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4));
      return object4;
    },
    _combineSurrogatePair(start, end) {
      return 65536 + ((start & 1023) << 10) + (end & 1023);
    },
    Uri_parse(uri, start, end) {
      var t1, t2, t3, t4, t5, delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, start0, schemeAuth, port, userInfoStart, userInfo, host, portNumber, path, query, _null = null;
      end = uri.length;
      t1 = start + 5;
      if (end >= t1) {
        t2 = start + 4;
        if (!(t2 < end))
          return A.ioore(uri, t2);
        if (!(start < end))
          return A.ioore(uri, start);
        t3 = start + 1;
        if (!(t3 < end))
          return A.ioore(uri, t3);
        t4 = start + 2;
        if (!(t4 < end))
          return A.ioore(uri, t4);
        t5 = start + 3;
        if (!(t5 < end))
          return A.ioore(uri, t5);
        delta = ((uri.charCodeAt(t2) ^ 58) * 3 | uri.charCodeAt(start) ^ 100 | uri.charCodeAt(t3) ^ 97 | uri.charCodeAt(t4) ^ 116 | uri.charCodeAt(t5) ^ 97) >>> 0;
        if (delta === 0)
          return A.UriData__parse(start > 0 || end < end ? B.JSString_methods.substring$2(uri, start, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return A.UriData__parse(B.JSString_methods.substring$2(uri, t1, end), 0, _null).get$uri();
      }
      indices = A.List_List$filled(8, 0, false, type$.int);
      B.JSArray_methods.$indexSet(indices, 0, 0);
      t2 = start - 1;
      B.JSArray_methods.$indexSet(indices, 1, t2);
      B.JSArray_methods.$indexSet(indices, 2, t2);
      B.JSArray_methods.$indexSet(indices, 7, t2);
      B.JSArray_methods.$indexSet(indices, 3, start);
      B.JSArray_methods.$indexSet(indices, 4, start);
      B.JSArray_methods.$indexSet(indices, 5, end);
      B.JSArray_methods.$indexSet(indices, 6, end);
      if (A._scan(uri, start, end, 0, indices) >= 14)
        B.JSArray_methods.$indexSet(indices, 7, end);
      schemeEnd = indices[1];
      if (schemeEnd >= start)
        if (A._scan(uri, start, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = indices[2] + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = indices[7] < start;
      scheme = _null;
      if (isSimple) {
        isSimple = false;
        if (!(hostStart > schemeEnd + 3)) {
          t2 = portStart > start;
          start0 = 0;
          if (!(t2 && portStart + 1 === pathStart)) {
            if (!B.JSString_methods.startsWith$2(uri, "\\", pathStart))
              if (hostStart > start)
                t3 = B.JSString_methods.startsWith$2(uri, "\\", hostStart - 1) || B.JSString_methods.startsWith$2(uri, "\\", hostStart - 2);
              else
                t3 = false;
            else
              t3 = true;
            if (!t3) {
              if (!(queryStart < end && queryStart === pathStart + 2 && B.JSString_methods.startsWith$2(uri, "..", pathStart)))
                t3 = queryStart > pathStart + 2 && B.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
              else
                t3 = true;
              if (!t3)
                if (schemeEnd === start + 4) {
                  if (B.JSString_methods.startsWith$2(uri, "file", start)) {
                    if (hostStart <= start) {
                      if (!B.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                        schemeAuth = "file:///";
                        delta = 3;
                      } else {
                        schemeAuth = "file://";
                        delta = 2;
                      }
                      uri = schemeAuth + B.JSString_methods.substring$2(uri, pathStart, end);
                      schemeEnd -= start;
                      t1 = delta - start;
                      queryStart += t1;
                      fragmentStart += t1;
                      end = uri.length;
                      start = start0;
                      hostStart = 7;
                      portStart = 7;
                      pathStart = 7;
                    } else if (pathStart === queryStart) {
                      t1 = start === 0;
                      t1;
                      if (t1) {
                        uri = B.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                        ++queryStart;
                        ++fragmentStart;
                        ++end;
                      } else {
                        uri = B.JSString_methods.substring$2(uri, start, pathStart) + "/" + B.JSString_methods.substring$2(uri, queryStart, end);
                        schemeEnd -= start;
                        hostStart -= start;
                        portStart -= start;
                        pathStart -= start;
                        t1 = 1 - start;
                        queryStart += t1;
                        fragmentStart += t1;
                        end = uri.length;
                        start = start0;
                      }
                    }
                    scheme = "file";
                  } else if (B.JSString_methods.startsWith$2(uri, "http", start)) {
                    if (t2 && portStart + 3 === pathStart && B.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                      t1 = start === 0;
                      t1;
                      if (t1) {
                        uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                        pathStart -= 3;
                        queryStart -= 3;
                        fragmentStart -= 3;
                        end -= 3;
                      } else {
                        uri = B.JSString_methods.substring$2(uri, start, portStart) + B.JSString_methods.substring$2(uri, pathStart, end);
                        schemeEnd -= start;
                        hostStart -= start;
                        portStart -= start;
                        t1 = 3 + start;
                        pathStart -= t1;
                        queryStart -= t1;
                        fragmentStart -= t1;
                        end = uri.length;
                        start = start0;
                      }
                    }
                    scheme = "http";
                  }
                } else if (schemeEnd === t1 && B.JSString_methods.startsWith$2(uri, "https", start)) {
                  if (t2 && portStart + 4 === pathStart && B.JSString_methods.startsWith$2(uri, "443", portStart + 1)) {
                    t1 = start === 0;
                    t1;
                    if (t1) {
                      uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                      pathStart -= 4;
                      queryStart -= 4;
                      fragmentStart -= 4;
                      end -= 3;
                    } else {
                      uri = B.JSString_methods.substring$2(uri, start, portStart) + B.JSString_methods.substring$2(uri, pathStart, end);
                      schemeEnd -= start;
                      hostStart -= start;
                      portStart -= start;
                      t1 = 4 + start;
                      pathStart -= t1;
                      queryStart -= t1;
                      fragmentStart -= t1;
                      end = uri.length;
                      start = start0;
                    }
                  }
                  scheme = "https";
                }
              isSimple = !t3;
            }
          }
        }
      }
      if (isSimple) {
        if (start > 0 || end < uri.length) {
          uri = B.JSString_methods.substring$2(uri, start, end);
          schemeEnd -= start;
          hostStart -= start;
          portStart -= start;
          pathStart -= start;
          queryStart -= start;
          fragmentStart -= start;
        }
        return new A._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      if (scheme == null)
        if (schemeEnd > start)
          scheme = A._Uri__makeScheme(uri, start, schemeEnd);
        else {
          if (schemeEnd === start)
            A._Uri__fail(uri, start, "Invalid empty scheme");
          scheme = "";
        }
      port = _null;
      if (hostStart > start) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? A._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = A._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = A.Primitives_parseInt(B.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = A._Uri__makePort(portNumber == null ? A.throwExpression(A.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        }
      } else {
        host = _null;
        userInfo = "";
      }
      path = A._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? A._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? A._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    Uri_tryParse(uri) {
      var t1, exception, start = 0, end = null;
      try {
        t1 = A.Uri_parse(uri, start, end);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.FormatException)
          return null;
        else
          throw exception;
      }
    },
    Uri__parseIPv4Address(host, start, end) {
      var t1, i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new A.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (t1 = host.length, i = start, partStart = i, partIndex = 0; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = A.int_parse(B.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (!(partIndex < 4))
            return A.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = A.int_parse(B.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (!(partIndex < 4))
        return A.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, last, bytes, wildCardLength, index, value, j, t2, _null = null,
        error = new A.Uri_parseIPv6Address_error(host),
        parseHex = new A.Uri_parseIPv6Address_parseHex(error, host),
        t1 = host.length;
      if (t1 < 2)
        error.call$2("address is too short", _null);
      parts = A._setArrayType([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (!(i < t1))
              return A.ioore(host, i);
            if (host.charCodeAt(i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            B.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$2("too few parts", _null);
      atEnd = partStart === end;
      t1 = B.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = A.Uri__parseIPv4Address(host, partStart, end);
          B.JSArray_methods.add$1(parts, (last[0] << 8 | last[1]) >>> 0);
          B.JSArray_methods.add$1(parts, (last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$2("an address with a wildcard must have less than 7 parts", _null);
      } else if (parts.length !== 8)
        error.call$2("an address without a wildcard must contain exactly 8 parts", _null);
      bytes = new Uint8Array(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            if (!(index >= 0 && index < 16))
              return A.ioore(bytes, index);
            bytes[index] = 0;
            t2 = index + 1;
            if (!(t2 < 16))
              return A.ioore(bytes, t2);
            bytes[t2] = 0;
            index += 2;
          }
        else {
          t2 = B.JSInt_methods._shrOtherPositive$1(value, 8);
          if (!(index >= 0 && index < 16))
            return A.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          if (!(t2 < 16))
            return A.ioore(bytes, t2);
          bytes[t2] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new A._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__defaultPort(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail(uri, index, message) {
      throw A.wrapException(A.FormatException$(message, uri, index));
    },
    _Uri__makePort(port, scheme) {
      if (port != null && port === A._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (start === end)
        return "";
      t1 = host.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(host, start);
      if (host.charCodeAt(start) === 91) {
        t2 = end - 1;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(host, t2);
        if (host.charCodeAt(t2) !== 93)
          A._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t1 = start + 1;
        index = A._Uri__checkZoneID(host, t1, t2);
        if (index < t2) {
          zoneIDstart = index + 1;
          zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t2, "%25");
        } else
          zoneID = "";
        A.Uri_parseIPv6Address(host, t1, index);
        return B.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      for (i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(host, i);
        if (host.charCodeAt(i) === 58) {
          index = B.JSString_methods.indexOf$2(host, "%", start);
          index = index >= start && index < end ? index : end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          A.Uri_parseIPv6Address(host, start, index);
          return "[" + B.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      }
      return A._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID(host, start, end) {
      var index = B.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__normalizeZoneID(host, start, end, prefix) {
      var t1, index, sectionStart, isNormalized, char, replacement, t2, t3, sourceLength, tail, slice,
        buffer = prefix !== "" ? new A.StringBuffer(prefix) : null;
      for (t1 = host.length, index = start, sectionStart = index, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          t3 = buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
          if (t2)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            A._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t3 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else if (char < 127 && (string$.x00_____.charCodeAt(char) & 1) !== 0) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = new A.StringBuffer("");
            if (sectionStart < index) {
              buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else {
          sourceLength = 1;
          if ((char & 64512) === 55296 && index + 1 < end) {
            t2 = index + 1;
            if (!(t2 < t1))
              return A.ioore(host, t2);
            tail = host.charCodeAt(t2);
            if ((tail & 64512) === 56320) {
              char = 65536 + ((char & 1023) << 10) + (tail & 1023);
              sourceLength = 2;
            }
          }
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t2 = buffer;
          } else
            t2 = buffer;
          t2._contents += slice;
          t3 = A._Uri__escapeChar(char);
          t2._contents += t3;
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName(host, start, end) {
      var t1, index, sectionStart, buffer, isNormalized, char, replacement, t2, slice, t3, sourceLength, tail,
        _s128_ = string$.x00_____;
      for (t1 = host.length, index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (!isNormalized)
            slice = slice.toLowerCase();
          t3 = buffer._contents += slice;
          sourceLength = 3;
          if (t2)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          }
          buffer._contents = t3 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else if (char < 127 && (_s128_.charCodeAt(char) & 32) !== 0) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = new A.StringBuffer("");
            if (sectionStart < index) {
              buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else if (char <= 93 && (_s128_.charCodeAt(char) & 1024) !== 0)
          A._Uri__fail(host, index, "Invalid character");
        else {
          sourceLength = 1;
          if ((char & 64512) === 55296 && index + 1 < end) {
            t2 = index + 1;
            if (!(t2 < t1))
              return A.ioore(host, t2);
            tail = host.charCodeAt(t2);
            if ((tail & 64512) === 56320) {
              char = 65536 + ((char & 1023) << 10) + (tail & 1023);
              sourceLength = 2;
            }
          }
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (!isNormalized)
            slice = slice.toLowerCase();
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t2 = buffer;
          } else
            t2 = buffer;
          t2._contents += slice;
          t3 = A._Uri__escapeChar(char);
          t2._contents += t3;
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        if (!isNormalized)
          slice = slice.toLowerCase();
        buffer._contents += slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme(scheme, start, end) {
      var t1, i, containsUpperCase, codeUnit;
      if (start === end)
        return "";
      t1 = scheme.length;
      if (!(start < t1))
        return A.ioore(scheme, start);
      if (!A._Uri__isAlphabeticCharacter(scheme.charCodeAt(start)))
        A._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(scheme, i);
        codeUnit = scheme.charCodeAt(i);
        if (!(codeUnit < 128 && (string$.x00_____.charCodeAt(codeUnit) & 8) !== 0))
          A._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = B.JSString_methods.substring$2(scheme, start, end);
      return A._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return A._Uri__normalizeOrSubstring(userInfo, start, end, 16, false, false);
    },
    _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
      var result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null)
        return isFile ? "/" : "";
      else
        result = A._Uri__normalizeOrSubstring(path, start, end, 128, true, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !B.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return A._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !B.JSString_methods.startsWith$1(path, "/") && !B.JSString_methods.startsWith$1(path, "\\"))
        return A._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return A._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery(query, start, end, queryParameters) {
      if (query != null)
        return A._Uri__normalizeOrSubstring(query, start, end, 256, true, false);
      return null;
    },
    _Uri__makeFragment(fragment, start, end) {
      if (fragment == null)
        return null;
      return A._Uri__normalizeOrSubstring(fragment, start, end, 256, true, false);
    },
    _Uri__normalizeEscape(source, index, lowerCase) {
      var t3, firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        _s128_ = string$.x00_____,
        t1 = index + 2,
        t2 = source.length;
      if (t1 >= t2)
        return "%";
      t3 = index + 1;
      if (!(t3 >= 0 && t3 < t2))
        return A.ioore(source, t3);
      firstDigit = source.charCodeAt(t3);
      if (!(t1 >= 0))
        return A.ioore(source, t1);
      secondDigit = source.charCodeAt(t1);
      firstDigitValue = A.hexDigitValue(firstDigit);
      secondDigitValue = A.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127) {
        if (!(value >= 0))
          return A.ioore(_s128_, value);
        t1 = (_s128_.charCodeAt(value) & 1) !== 0;
      } else
        t1 = false;
      if (t1)
        return A.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return B.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar(char) {
      var codeUnits, t1, flag, encodedBytes, index, byte, t2, t3,
        _s16_ = "0123456789ABCDEF";
      if (char <= 127) {
        codeUnits = new Uint8Array(3);
        codeUnits[0] = 37;
        t1 = char >>> 4;
        if (!(t1 < 16))
          return A.ioore(_s16_, t1);
        codeUnits[1] = _s16_.charCodeAt(t1);
        codeUnits[2] = _s16_.charCodeAt(char & 15);
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = 3 * encodedBytes;
        codeUnits = new Uint8Array(t1);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = B.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          if (!(index < t1))
            return A.ioore(codeUnits, index);
          codeUnits[index] = 37;
          t2 = index + 1;
          t3 = byte >>> 4;
          if (!(t3 < 16))
            return A.ioore(_s16_, t3);
          if (!(t2 < t1))
            return A.ioore(codeUnits, t2);
          codeUnits[t2] = _s16_.charCodeAt(t3);
          t3 = index + 2;
          if (!(t3 < t1))
            return A.ioore(codeUnits, t3);
          codeUnits[t3] = _s16_.charCodeAt(byte & 15);
          index += 3;
        }
      }
      return A.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring(component, start, end, charMask, escapeDelimiters, replaceBackslash) {
      var t1 = A._Uri__normalize(component, start, end, charMask, escapeDelimiters, replaceBackslash);
      return t1 == null ? B.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize(component, start, end, charMask, escapeDelimiters, replaceBackslash) {
      var t1, t2, index, sectionStart, buffer, char, sourceLength, replacement, t3, tail, _null = null,
        _s128_ = string$.x00_____;
      for (t1 = !escapeDelimiters, t2 = component.length, index = start, sectionStart = index, buffer = _null; index < end;) {
        if (!(index >= 0 && index < t2))
          return A.ioore(component, index);
        char = component.charCodeAt(index);
        if (char < 127 && (_s128_.charCodeAt(char) & charMask) !== 0)
          ++index;
        else {
          sourceLength = 1;
          if (char === 37) {
            replacement = A._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement)
              replacement = "%25";
            else
              sourceLength = 3;
          } else if (char === 92 && replaceBackslash)
            replacement = "/";
          else if (t1 && char <= 93 && (_s128_.charCodeAt(char) & 1024) !== 0) {
            A._Uri__fail(component, index, "Invalid character");
            sourceLength = _null;
            replacement = sourceLength;
          } else {
            if ((char & 64512) === 55296) {
              t3 = index + 1;
              if (t3 < end) {
                if (!(t3 < t2))
                  return A.ioore(component, t3);
                tail = component.charCodeAt(t3);
                if ((tail & 64512) === 56320) {
                  char = 65536 + ((char & 1023) << 10) + (tail & 1023);
                  sourceLength = 2;
                }
              }
            }
            replacement = A._Uri__escapeChar(char);
          }
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t3 = buffer;
          } else
            t3 = buffer;
          t3._contents = (t3._contents += B.JSString_methods.substring$2(component, sectionStart, index)) + replacement;
          if (typeof sourceLength !== "number")
            return A.iae(sourceLength);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return _null;
      if (sectionStart < end) {
        t1 = B.JSString_methods.substring$2(component, sectionStart, end);
        buffer._contents += t1;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments(path) {
      if (B.JSString_methods.startsWith$1(path, "."))
        return true;
      return B.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments(path) {
      var output, t1, t2, appendSlash, _i, segment, t3;
      if (!A._Uri__mayContainDotSegments(path))
        return path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (segment === "..") {
          t3 = output.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return A.ioore(output, -1);
            output.pop();
            if (output.length === 0)
              B.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else {
          appendSlash = "." === segment;
          if (!appendSlash)
            B.JSArray_methods.add$1(output, segment);
        }
      }
      if (appendSlash)
        B.JSArray_methods.add$1(output, "");
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return !allowScheme ? A._Uri__escapeScheme(path) : path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment) {
          appendSlash = output.length !== 0 && B.JSArray_methods.get$last(output) !== "..";
          if (appendSlash) {
            if (0 >= output.length)
              return A.ioore(output, -1);
            output.pop();
          } else
            B.JSArray_methods.add$1(output, "..");
        } else {
          appendSlash = "." === segment;
          if (!appendSlash)
            B.JSArray_methods.add$1(output, segment);
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        if (t1 === 1) {
          if (0 >= t1)
            return A.ioore(output, 0);
          t1 = output[0].length === 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || B.JSArray_methods.get$last(output) === "..")
        B.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return A.ioore(output, 0);
        B.JSArray_methods.$indexSet(output, 0, A._Uri__escapeScheme(output[0]));
      }
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme(path) {
      var i, char, t2,
        _s128_ = string$.x00_____,
        t1 = path.length;
      if (t1 >= 2 && A._Uri__isAlphabeticCharacter(path.charCodeAt(0)))
        for (i = 1; i < t1; ++i) {
          char = path.charCodeAt(i);
          if (char === 58)
            return B.JSString_methods.substring$2(path, 0, i) + "%3A" + B.JSString_methods.substring$1(path, i + 1);
          if (char <= 127) {
            if (!(char < 128))
              return A.ioore(_s128_, char);
            t2 = (_s128_.charCodeAt(char) & 8) === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__isAlphabeticCharacter(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__parse(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = A._setArrayType([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = text.charCodeAt(i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw A.wrapException(A.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw A.wrapException(A.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        B.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          if (!(i >= 0))
            return A.ioore(text, i);
          char = text.charCodeAt(i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          B.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = B.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !B.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw A.wrapException(A.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      B.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = B.Base64Codec_Base64Encoder_false.normalize$3(text, t2, t1);
      else {
        data = A._Uri__normalize(text, t2, t1, 256, true, false);
        if (data != null)
          text = B.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new A.UriData(text, indices, sourceUri);
    },
    _scan(uri, start, end, state, indices) {
      var t1, i, char, t2, transition,
        _s2112_ = '\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe3\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x0e\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xea\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\n\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xeb\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\xeb\xeb\xeb\x8b\xeb\xeb\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\xeb\x83\xeb\xeb\x8b\xeb\x8b\xeb\xcd\x8b\xeb\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x92\x83\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\xeb\x8b\xeb\x8b\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xebD\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x12D\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\xe5\xe5\xe5\x05\xe5D\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe8\x8a\xe5\xe5\x05\xe5\x05\xe5\xcd\x05\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x8a\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05f\x05\xe5\x05\xe5\xac\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\xe5\xe5\xe5\x05\xe5D\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\x8a\xe5\xe5\x05\xe5\x05\xe5\xcd\x05\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x8a\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05f\x05\xe5\x05\xe5\xac\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7D\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\xe7\xe7\xe7\xe7\xe7\xe7\xcd\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\xe7\x07\x07\x07\x07\x07\x07\x07\x07\x07\xe7\xe7\xe7\xe7\xe7\xac\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7D\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\xe7\xe7\xe7\xe7\xe7\xe7\xcd\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\xe7\xe7\xe7\xe7\xe7\xac\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\x05\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x10\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x12\n\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\v\n\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xec\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\xec\xec\xec\f\xec\xec\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\xec\xec\xec\xec\f\xec\f\xec\xcd\f\xec\f\f\f\f\f\f\f\f\f\xec\f\f\f\f\f\f\f\f\f\f\xec\f\xec\f\xec\f\xed\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\xed\xed\xed\r\xed\xed\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\xed\xed\xed\xed\r\xed\r\xed\xed\r\xed\r\r\r\r\r\r\r\r\r\xed\r\r\r\r\r\r\r\r\r\r\xed\r\xed\r\xed\r\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xea\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x0f\xea\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe9\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\t\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x11\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xe9\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\v\t\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x13\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\v\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xf5\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\x15\xf5\x15\x15\xf5\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\xf5\xf5\xf5\xf5\xf5\xf5';
      for (t1 = uri.length, i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(uri, i);
        char = uri.charCodeAt(i) ^ 96;
        if (char > 95)
          char = 31;
        t2 = state * 96 + char;
        if (!(t2 < 2112))
          return A.ioore(_s2112_, t2);
        transition = _s2112_.charCodeAt(t2);
        state = transition & 31;
        B.JSArray_methods.$indexSet(indices, transition >>> 5, i);
      }
      return state;
    },
    _BigIntImpl: function _BigIntImpl(t0, t1, t2) {
      this._isNegative = t0;
      this._digits = t1;
      this._used = t2;
    },
    _BigIntImpl_hashCode_combine: function _BigIntImpl_hashCode_combine() {
    },
    _BigIntImpl_hashCode_finish: function _BigIntImpl_hashCode_finish() {
    },
    _BigIntClassic: function _BigIntClassic(t0, t1) {
      this._modulus = t0;
      this._normalizedModulus = t1;
    },
    DateTime: function DateTime(t0, t1, t2) {
      this._core$_value = t0;
      this._microsecond = t1;
      this.isUtc = t2;
    },
    DateTime_parse_parseIntOrZero: function DateTime_parse_parseIntOrZero() {
    },
    DateTime_parse_parseMilliAndMicroseconds: function DateTime_parse_parseMilliAndMicroseconds() {
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    IntegerDivisionByZeroException: function IntegerDivisionByZeroException() {
    },
    Iterable: function Iterable() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    Runes: function Runes(t0) {
      this.string = t0;
    },
    RuneIterator: function RuneIterator(t0) {
      var _ = this;
      _.string = t0;
      _._nextPosition = _._position = 0;
      _._currentCodePoint = -1;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri__text_FI = $;
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri__text_FI = $;
    },
    Expando: function Expando(t0, t1) {
      this._jsWeakMap = t0;
      this.$ti = t1;
    },
    _functionToJS1(f) {
      var result;
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1) {
          return _call(f, arg1, arguments.length);
        };
      }(A._callDartFunctionFast1, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _functionToJS3(f) {
      var result;
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1, arg2, arg3) {
          return _call(f, arg1, arg2, arg3, arguments.length);
        };
      }(A._callDartFunctionFast3, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _callDartFunctionFast0(callback) {
      return type$.Function._as(callback).call$0();
    },
    _callDartFunctionFast1(callback, arg1, $length) {
      type$.Function._as(callback);
      if (A._asInt($length) >= 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _callDartFunctionFast3(callback, arg1, arg2, arg3, $length) {
      type$.Function._as(callback);
      A._asInt($length);
      if ($length >= 3)
        return callback.call$3(arg1, arg2, arg3);
      if ($length === 2)
        return callback.call$2(arg1, arg2);
      if ($length === 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    promiseToFuture(jsPromise, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      jsPromise.then(A.convertDartClosureToJS(new A.promiseToFuture_closure(completer, $T), 1), A.convertDartClosureToJS(new A.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    NullRejectionException: function NullRejectionException(t0) {
      this.isUndefined = t0;
    },
    _JSSecureRandom: function _JSSecureRandom(t0) {
      this._math$_buffer = t0;
    },
    Endian: function Endian() {
    },
    BitcoinAddressType_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_zF4, new A.BitcoinAddressType_fromValue_closure(value), new A.BitcoinAddressType_fromValue_closure0(value));
    },
    BitcoinBaseAddress_BitcoinBaseAddress$fromProgram(addressProgram, type) {
      var t1;
      if (type.get$isP2sh()) {
        t1 = type.cast$1$0(0, type$.P2shAddressType);
        return new A.P2shAddress(t1, A._BitcoinAddressUtils_validateAddressProgram(addressProgram, t1));
      }
      $label0$0: {
        if (B.PubKeyAddressType_P2PK === type) {
          if (!A.Secp256k1PublicKey_isValidBytes(A.BytesUtils_fromHexString(addressProgram, false)))
            A.throwExpression(B.DartBitcoinPluginException_Zyd);
          t1 = new A.P2pkAddress(A.StringUtils_strip0x(addressProgram.toLowerCase()), $);
          break $label0$0;
        }
        if (B.P2pkhAddressType_P2PKH === type || B.P2pkhAddressType_P2PKHWT === type) {
          t1 = type.cast$1$0(0, type$.P2pkhAddressType);
          t1 = new A.P2pkhAddress(t1, A._BitcoinAddressUtils_validateAddressProgram(addressProgram, t1));
          break $label0$0;
        }
        if (B.SegwitAddressType_P2WPKH === type) {
          t1 = new A.P2wpkhAddress(A._BitcoinAddressUtils_validateAddressProgram(addressProgram, B.SegwitAddressType_P2WPKH), 0);
          break $label0$0;
        }
        if (B.SegwitAddressType_P2WSH === type) {
          t1 = new A.P2wshAddress(A._BitcoinAddressUtils_validateAddressProgram(addressProgram, B.SegwitAddressType_P2WSH), 0);
          break $label0$0;
        }
        if (B.SegwitAddressType_P2TR === type) {
          t1 = new A.P2trAddress(A._BitcoinAddressUtils_validateAddressProgram(addressProgram, B.SegwitAddressType_P2TR), 1);
          break $label0$0;
        }
        t1 = A.throwExpression(A.DartBitcoinPluginException$("Unsuported bitcoin address type.", null));
      }
      return t1;
    },
    _BitcoinAddressUtils_validateAddressProgram(hash160, addressType) {
      var toBytes, t1, exception;
      try {
        toBytes = A.BytesUtils_fromHexString(hash160, false);
        if (J.get$length$asx(toBytes) === addressType.get$hashLength()) {
          t1 = A.StringUtils_strip0x(hash160.toLowerCase());
          return t1;
        }
      } catch (exception) {
      }
      throw A.wrapException(B.DartBitcoinPluginException_hzJ);
    },
    _BitcoinAddressUtils__getBchNetVersion(network, secriptLength, type) {
      var t1,
        isToken = B.JSString_methods.contains$1(type.value, "WT");
      if (!type.get$isP2sh()) {
        if (!isToken) {
          t1 = network.conf.params.p2pkhStdNetVer;
          t1.toString;
          return t1;
        }
        return B.List_16;
      } else {
        if (!isToken) {
          if (secriptLength === 20) {
            t1 = network.conf.params.p2shStdNetVer;
            t1.toString;
            return t1;
          }
          return B.List_11;
        }
        if (secriptLength === 20)
          return B.List_24;
        return B.List_27;
      }
    },
    _BitcoinAddressUtils_legacyToAddress(addressProgram, network, type) {
      var programBytes, netVersion, t1, t2, t3;
      if (network instanceof A.BitcoinCashNetwork) {
        programBytes = A.BytesUtils_fromHexString(addressProgram, false);
        netVersion = A._BitcoinAddressUtils__getBchNetVersion(network, programBytes.length, type);
        t1 = network.conf.params.p2pkhStdHrp;
        t1.toString;
        t2 = type$.int;
        t3 = A.List_List$_of(netVersion, t2);
        B.JSArray_methods.addAll$1(t3, programBytes);
        A.BytesUtils_validateListOfBytes(t3);
        return A.Bech32EncoderBase_encodeBech32(t1, A.Bech32BaseUtils_convertToBase32(A.List_List$unmodifiable(t3, t2)), ":", A.bch_bech32__BchBech32Utils_computeChecksum$closure());
      }
      programBytes = A.BytesUtils_fromHexString(addressProgram, false);
      switch (type) {
        case B.P2shAddressType_UPK:
        case B.P2shAddressType_YXg:
        case B.P2shAddressType_apR:
        case B.P2shAddressType_vvf:
          t1 = A.List_List$_of(network.get$p2shNetVer(), type$.int);
          B.JSArray_methods.addAll$1(t1, programBytes);
          programBytes = t1;
          break;
        case B.P2pkhAddressType_P2PKH:
        case B.PubKeyAddressType_P2PK:
          t1 = A.List_List$_of(network.get$p2pkhNetVer(), type$.int);
          B.JSArray_methods.addAll$1(t1, programBytes);
          programBytes = t1;
          break;
      }
      return A.Base58Encoder_checkEncode(programBytes);
    },
    BitcoinAddressType: function BitcoinAddressType() {
    },
    BitcoinAddressType_fromValue_closure: function BitcoinAddressType_fromValue_closure(t0) {
      this.value = t0;
    },
    BitcoinAddressType_fromValue_closure0: function BitcoinAddressType_fromValue_closure0(t0) {
      this.value = t0;
    },
    PubKeyAddressType: function PubKeyAddressType(t0) {
      this.value = t0;
    },
    P2pkhAddressType: function P2pkhAddressType(t0) {
      this.value = t0;
    },
    P2shAddressType: function P2shAddressType(t0, t1) {
      this.hashLength = t0;
      this.value = t1;
    },
    SegwitAddressType: function SegwitAddressType(t0) {
      this.value = t0;
    },
    LegacyAddress: function LegacyAddress() {
    },
    P2shAddress: function P2shAddress(t0, t1) {
      this.type = t0;
      this.__LegacyAddress__addressProgram_F = t1;
    },
    P2pkhAddress: function P2pkhAddress(t0, t1) {
      this.type = t0;
      this.__LegacyAddress__addressProgram_F = t1;
    },
    P2pkAddress: function P2pkAddress(t0, t1) {
      this.publicKey = t0;
      this.__LegacyAddress__addressProgram_F = t1;
    },
    SegwitAddress: function SegwitAddress() {
    },
    P2wpkhAddress: function P2wpkhAddress(t0, t1) {
      this.__SegwitAddress_addressProgram_F = t0;
      this.segwitVersion = t1;
    },
    P2trAddress: function P2trAddress(t0, t1) {
      this.__SegwitAddress_addressProgram_F = t0;
      this.segwitVersion = t1;
    },
    P2wshAddress: function P2wshAddress(t0, t1) {
      this.__SegwitAddress_addressProgram_F = t0;
      this.segwitVersion = t1;
    },
    DartBitcoinPluginException$(message, details) {
      return new A.DartBitcoinPluginException(message, details);
    },
    DartBitcoinPluginException: function DartBitcoinPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    BasedUtxoNetwork_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_m5n, new A.BasedUtxoNetwork_fromName_closure($name), new A.BasedUtxoNetwork_fromName_closure0());
    },
    BasedUtxoNetwork_fromName_closure: function BasedUtxoNetwork_fromName_closure(t0) {
      this.name = t0;
    },
    BasedUtxoNetwork_fromName_closure0: function BasedUtxoNetwork_fromName_closure0() {
    },
    BitcoinSVNetwork: function BitcoinSVNetwork(t0, t1, t2) {
      this.conf = t0;
      this.value = t1;
      this.identifier = t2;
    },
    BitcoinNetwork: function BitcoinNetwork(t0, t1, t2) {
      this.conf = t0;
      this.value = t1;
      this.identifier = t2;
    },
    LitecoinNetwork: function LitecoinNetwork(t0, t1, t2) {
      this.conf = t0;
      this.value = t1;
      this.identifier = t2;
    },
    DashNetwork: function DashNetwork(t0, t1, t2) {
      this.conf = t0;
      this.value = t1;
      this.identifier = t2;
    },
    DogecoinNetwork: function DogecoinNetwork(t0, t1, t2) {
      this.conf = t0;
      this.value = t1;
      this.identifier = t2;
    },
    BitcoinCashNetwork: function BitcoinCashNetwork(t0, t1, t2) {
      this.conf = t0;
      this.value = t1;
      this.identifier = t2;
    },
    PepeNetwork: function PepeNetwork() {
    },
    ElectraProtocolNetwork: function ElectraProtocolNetwork(t0, t1, t2) {
      this.conf = t0;
      this.value = t1;
      this.identifier = t2;
    },
    _Base32Utils_translateAlphabet(data, fromAlphabet, toAlphabet) {
      var t1 = type$.String,
        map = A.LinkedHashMap_LinkedHashMap(t1, t1);
      A.MapBase__fillMapWithMappedIterable(map, new A.CodeUnits(fromAlphabet), new A._Base32Utils_translateAlphabet_closure(), new A._Base32Utils_translateAlphabet_closure0(fromAlphabet, toAlphabet));
      return new A.MappedListIterable(A._setArrayType(data.split(""), type$.JSArray_String), type$.String_Function_String._as(new A._Base32Utils_translateAlphabet_closure1(map)), type$.MappedListIterable_String_String).join$1(0, "");
    },
    _Base32Utils__b32decode(alphabet, base32) {
      var t1, i, decoded, _box_0 = {};
      if (!$._Base32Const__b32rev.containsKey$1(alphabet)) {
        $._Base32Const__b32rev.$indexSet(0, alphabet, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int));
        for (t1 = alphabet.length, i = 0; i < t1; ++i)
          $._Base32Const__b32rev.$index(0, alphabet).$indexSet(0, alphabet[i], i);
      }
      _box_0.shift = 8;
      _box_0.carry = 0;
      decoded = A._setArrayType([], type$.JSArray_int);
      B.JSArray_methods.forEach$1(A._setArrayType(base32.split(""), type$.JSArray_String), new A._Base32Utils__b32decode_closure(_box_0, alphabet, decoded));
      if (_box_0.shift !== 8 && _box_0.carry !== 0) {
        B.JSArray_methods.add$1(decoded, _box_0.carry);
        _box_0.shift = 8;
        _box_0.carry = 0;
      }
      return decoded;
    },
    _Base32Utils__b32encode(alphabet, s) {
      var t1, padding, t2, encoded, t3, shift, carry, _i, byte, t4,
        leftover = B.JSInt_methods.$mod(s.length, 5);
      if (leftover !== 0) {
        t1 = type$.int;
        padding = A.List_List$filled(5 - leftover, 0, false, t1);
        t2 = A.List_List$_of(s, type$.dynamic);
        B.JSArray_methods.addAll$1(t2, padding);
        s = A.List_List$from(t2, true, t1);
      }
      t1 = type$.JSArray_int;
      encoded = A._setArrayType([], t1);
      for (t2 = s.length, t3 = alphabet.length, shift = 3, carry = 0, _i = 0; _i < s.length; s.length === t2 || (0, A.throwConcurrentModificationError)(s), ++_i) {
        byte = s[_i];
        t4 = (carry | B.JSInt_methods.$shr(byte, shift)) & 31;
        if (!(t4 < t3))
          return A.ioore(alphabet, t4);
        B.JSArray_methods.addAll$1(encoded, new A.CodeUnits(alphabet[t4]));
        if (shift > 5) {
          shift -= 5;
          t4 = B.JSInt_methods.$shr(byte, shift) & 31;
          if (!(t4 < t3))
            return A.ioore(alphabet, t4);
          B.JSArray_methods.addAll$1(encoded, new A.CodeUnits(alphabet[t4]));
        }
        shift = 5 - shift;
        carry = B.JSInt_methods.$shl(byte, shift);
        shift = 8 - shift;
      }
      if (shift !== 3) {
        t2 = carry & 31;
        if (!(t2 < t3))
          return A.ioore(alphabet, t2);
        B.JSArray_methods.addAll$1(encoded, new A.CodeUnits(alphabet[t2]));
      }
      if (leftover === 1)
        B.JSArray_methods.setAll$2(encoded, encoded.length - 6, A._setArrayType([61, 61, 61, 61, 61, 61], t1));
      else if (leftover === 2)
        B.JSArray_methods.setAll$2(encoded, encoded.length - 4, A._setArrayType([61, 61, 61, 61], t1));
      else if (leftover === 3)
        B.JSArray_methods.setAll$2(encoded, encoded.length - 3, A._setArrayType([61, 61, 61], t1));
      else if (leftover === 4)
        B.JSArray_methods.setAll$2(encoded, encoded.length - 1, A._setArrayType([61], t1));
      return A.List_List$from(encoded, true, type$.int);
    },
    Base32Decoder_decode(data) {
      var decodedBytes, data0, lastBlockWidth, t1, exception,
        _s32_ = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
        customAlphabet = null;
      data = data;
      try {
        data0 = data;
        lastBlockWidth = B.JSInt_methods.$mod(data0.length, 8);
        data = lastBlockWidth !== 0 ? data0 + B.JSString_methods.$mul("=", 8 - lastBlockWidth) : data0;
        if (customAlphabet != null)
          data = A._Base32Utils_translateAlphabet(data, customAlphabet, _s32_);
        decodedBytes = A._Base32Utils__b32decode(_s32_, data);
        t1 = A.List_List$from(decodedBytes, true, type$.int);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.ArgumentException_QQa);
      }
    },
    _Base32Utils_translateAlphabet_closure: function _Base32Utils_translateAlphabet_closure() {
    },
    _Base32Utils_translateAlphabet_closure0: function _Base32Utils_translateAlphabet_closure0(t0, t1) {
      this.fromAlphabet = t0;
      this.toAlphabet = t1;
    },
    _Base32Utils_translateAlphabet_closure1: function _Base32Utils_translateAlphabet_closure1(t0) {
      this.translationMap = t0;
    },
    _Base32Utils__b32decode_closure: function _Base32Utils__b32decode_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.alphabet = t1;
      this.decoded = t2;
    },
    Base58Encoder_encode(dataBytes, base58alphabets) {
      var val, t2, enc, t3, div, zero, _i,
        t1 = B.Map_0cXzp.$index(0, base58alphabets);
      t1.toString;
      val = A.BigintUtils_fromBytes(dataBytes, B.C_Endian, false);
      for (t2 = t1.length, enc = ""; val.compareTo$1(0, $.$get$_BigIntImpl_zero()) > 0; val = div) {
        t3 = A._BigIntImpl__BigIntImpl$from(58);
        if (t3._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        div = val._div$1(t3);
        t3 = val.$mod(0, A._BigIntImpl__BigIntImpl$from(58)).toInt$0(0);
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(t1, t3);
        enc = t1[t3] + enc;
      }
      for (t3 = dataBytes.length, zero = 0, _i = 0; _i < t3; ++_i)
        if (dataBytes[_i] === 0)
          ++zero;
        else
          break;
      if (0 >= t2)
        return A.ioore(t1, 0);
      return B.JSString_methods.$mul(t1[0], t3 - (t3 - zero)) + enc;
    },
    Base58Encoder_checkEncode(dataBytes) {
      var t1, checksum, t2;
      A.BytesUtils_validateListOfBytes(dataBytes);
      t1 = type$.int;
      dataBytes = A.List_List$unmodifiable(dataBytes, t1);
      checksum = B.JSArray_methods.sublist$2(A.SHA256_hash(A.SHA256_hash(dataBytes)), 0, 4);
      t2 = A.List_List$_of(dataBytes, type$.dynamic);
      B.JSArray_methods.addAll$1(t2, checksum);
      return A.Base58Encoder_encode(A.List_List$from(t2, true, t1), B.Base58Alphabets_0);
    },
    Base58Decoder_decode(data, base58alphabets) {
      var val, t2, t3, i, t4, charIndex, bytes, padLen,
        t1 = B.Map_0cXzp.$index(0, base58alphabets);
      t1.toString;
      val = $.$get$_BigIntImpl_zero();
      for (t2 = data.length, t3 = t2 - 1, i = 0; i < t2; ++i) {
        t4 = t3 - i;
        if (!(t4 >= 0))
          return A.ioore(data, t4);
        charIndex = B.JSString_methods.indexOf$1(t1, data[t4]);
        if (charIndex === -1)
          throw A.wrapException(B.MessageException_5ZN);
        val = val.$add(0, A._BigIntImpl__BigIntImpl$from(charIndex).$mul(0, A._BigIntImpl__BigIntImpl$from(58).pow$1(i)));
      }
      bytes = A.BigintUtils_toBytes(val, B.JSInt_methods._tdivFast$1((val._isNegative ? val.$negate(0) : val).get$bitLength(0) + 7, 8), B.C_Endian);
      for (t3 = t1.length, padLen = 0, i = 0; i < t2; ++i) {
        t4 = data[i];
        if (0 >= t3)
          return A.ioore(t1, 0);
        if (t4 === t1[0])
          ++padLen;
        else
          break;
      }
      t1 = type$.int;
      t2 = A.List_List$_of(A.List_List$filled(padLen, 0, false, t1), type$.dynamic);
      B.JSArray_methods.addAll$1(t2, bytes);
      return A.List_List$from(t2, true, t1);
    },
    Base58Alphabets: function Base58Alphabets(t0) {
      this._name = t0;
    },
    Base58ChecksumError: function Base58ChecksumError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    _BchBech32Utils_polyMod(values) {
      var _i, value, $top, valueBig, _i0, i, t2,
        t1 = type$.JSArray_BigInt,
        generator = [A._setArrayType([A._BigIntImpl__BigIntImpl$from(1), A._BigIntImpl__BigIntImpl$from(656907472481)], t1), A._setArrayType([A._BigIntImpl__BigIntImpl$from(2), A._BigIntImpl__BigIntImpl$from(522768456162)], t1), A._setArrayType([A._BigIntImpl__BigIntImpl$from(4), A._BigIntImpl__BigIntImpl$from(1044723512260)], t1), A._setArrayType([A._BigIntImpl__BigIntImpl$from(8), A._BigIntImpl__BigIntImpl$from(748107326120)], t1), A._setArrayType([A._BigIntImpl__BigIntImpl$from(16), A._BigIntImpl__BigIntImpl$from(130178868336)], t1)],
        chk = $.$get$_BigIntImpl_one();
      for (t1 = values.length, _i = 0; _i < values.length; values.length === t1 || (0, A.throwConcurrentModificationError)(values), ++_i) {
        value = values[_i];
        $top = chk.$shr(0, 35);
        valueBig = A._BigIntImpl__BigIntImpl$from(value);
        chk = chk.$and(0, A._BigIntImpl__BigIntImpl$from(34359738367)).$shl(0, 5).$xor(0, valueBig);
        for (_i0 = 0; _i0 < 5; ++_i0) {
          i = generator[_i0];
          if (0 >= i.length)
            return A.ioore(i, 0);
          t2 = $top.$and(0, i[0]).compareTo$1(0, $.$get$_BigIntImpl_zero());
          if (t2 !== 0) {
            if (1 >= i.length)
              return A.ioore(i, 1);
            chk = chk.$xor(0, i[1]);
          }
        }
      }
      return chk.$xor(0, $.$get$_BigIntImpl_one());
    },
    _BchBech32Utils_hrpExpand(hrp) {
      var expandedHrp,
        t1 = type$.Runes;
      t1 = A.MappedIterable_MappedIterable(new A.Runes(hrp), t1._eval$1("int(Iterable.E)")._as(new A._BchBech32Utils_hrpExpand_closure()), t1._eval$1("Iterable.E"), type$.int);
      expandedHrp = A.List_List$_of(t1, A._instanceType(t1)._eval$1("Iterable.E"));
      B.JSArray_methods.add$1(expandedHrp, 0);
      return expandedHrp;
    },
    _BchBech32Utils_computeChecksum(hrp, data) {
      var polymod, _list, i;
      type$.List_int._as(data);
      polymod = A._BchBech32Utils_polyMod(B.JSArray_methods.$add(B.JSArray_methods.$add(A._BchBech32Utils_hrpExpand(hrp), data), A._setArrayType([0, 0, 0, 0, 0, 0, 0, 0], type$.JSArray_int)));
      _list = J.JSArray_JSArray$allocateGrowable(8, type$.int);
      for (i = 0; i < 8; ++i)
        _list[i] = polymod.$shr(0, 5 * (7 - i)).$and(0, $.$get$_BchBech32Utils__mask5()).toInt$0(0);
      return _list;
    },
    _BchBech32Utils_hrpExpand_closure: function _BchBech32Utils_hrpExpand_closure() {
    },
    Bech32Utils_polyMod(values) {
      var t1, chk, _i, $top, i,
        generator = [996825010, 642813549, 513874426, 1027748829, 705979059];
      for (t1 = values.length, chk = 1, _i = 0; _i < t1; ++_i) {
        $top = chk >>> 25;
        chk = ((chk & 33554431) << 5 ^ values[_i]) >>> 0;
        for (i = 0; i < 5; ++i)
          chk = (chk ^ ((B.JSInt_methods._shrBothPositive$1($top, i) & 1) !== 0 ? generator[i] : 0)) >>> 0;
      }
      return chk;
    },
    Bech32Utils_hrpExpand(hrp) {
      var t1, i,
        expand = A._setArrayType([], type$.JSArray_int);
      for (t1 = hrp.length, i = 0; i < t1; ++i)
        B.JSArray_methods.add$1(expand, hrp.charCodeAt(i) >>> 5);
      B.JSArray_methods.add$1(expand, 0);
      for (i = 0; i < t1; ++i)
        B.JSArray_methods.add$1(expand, hrp.charCodeAt(i) & 31);
      return expand;
    },
    Bech32Utils_computeChecksum(hrp, data, encoding) {
      var t3, polymod, i,
        t1 = type$.int,
        t2 = A.List_List$_of(A.Bech32Utils_hrpExpand(hrp), t1);
      B.JSArray_methods.addAll$1(t2, data);
      t2 = A.List_List$_of(t2, t1);
      t2.push(0);
      t2.push(0);
      t2.push(0);
      t2.push(0);
      t2.push(0);
      t2.push(0);
      t2 = A.Bech32Utils_polyMod(t2);
      t3 = B.Map_xI32l.$index(0, encoding);
      t3.toString;
      polymod = (t2 ^ t3) >>> 0;
      t3 = [];
      for (i = 0; i < 6; ++i)
        t3.push(B.JSInt_methods._shrReceiverPositive$1(polymod, 5 * (5 - i)) & 31);
      return A.List_List$from(t3, true, t1);
    },
    Bech32Utils_verifyChecksum(hrp, data, encoding) {
      var t1;
      type$.List_int._as(data);
      t1 = A.List_List$_of(A.Bech32Utils_hrpExpand(hrp), type$.int);
      B.JSArray_methods.addAll$1(t1, data);
      return A.Bech32Utils_polyMod(t1) === B.Map_xI32l.$index(0, encoding);
    },
    Bech32Encodings: function Bech32Encodings(t0) {
      this._name = t0;
    },
    Bech32ChecksumError: function Bech32ChecksumError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    Bech32BaseUtils_convertToBase32(data) {
      var convData = A.Bech32BaseUtils__convertBits(data, 8, 5, true);
      if (convData == null)
        throw A.wrapException(B.ArgumentException_CKK);
      return convData;
    },
    Bech32BaseUtils__convertBits(data, fromBits, toBits, pad) {
      var t1, acc, bits, t2,
        maxOutVal = B.JSInt_methods._shlPositive$1(1, toBits) - 1,
        maxAcc = B.JSInt_methods.$shl(1, fromBits + toBits - 1) - 1,
        ret = A._setArrayType([], type$.JSArray_int);
      for (t1 = J.get$iterator$ax(data), acc = 0, bits = 0; t1.moveNext$0();) {
        t2 = t1.get$current();
        if (t2 < 0 || B.JSInt_methods._shrOtherPositive$1(t2, fromBits) !== 0)
          return null;
        acc = ((B.JSInt_methods._shlPositive$1(acc, fromBits) | t2) & maxAcc) >>> 0;
        bits += fromBits;
        for (; bits >= toBits;) {
          bits -= toBits;
          B.JSArray_methods.add$1(ret, (B.JSInt_methods._shrReceiverPositive$1(acc, bits) & maxOutVal) >>> 0);
        }
      }
      if (pad) {
        if (bits > 0)
          B.JSArray_methods.add$1(ret, (B.JSInt_methods.$shl(acc, toBits - bits) & maxOutVal) >>> 0);
      } else if (bits >= fromBits || (B.JSInt_methods.$shl(acc, toBits - bits) & maxOutVal) >>> 0 !== 0)
        return null;
      return A.List_List$from(ret, true, type$.int);
    },
    Bech32EncoderBase_encodeBech32(hrp, data, sep, computeChecksum) {
      var checksum = computeChecksum.call$2(hrp, data),
        t1 = A.List_List$_of(data, type$.dynamic);
      B.JSArray_methods.addAll$1(t1, checksum);
      data = A.List_List$from(t1, true, type$.int);
      t1 = A._arrayInstanceType(data);
      return hrp + sep + new A.MappedListIterable(data, t1._eval$1("String(1)")._as(new A.Bech32EncoderBase_encodeBech32_closure()), t1._eval$1("MappedListIterable<1,String>")).join$0(0);
    },
    Bech32DecoderBase_decodeBech32(bechStr, sep, checksumLen, verifyChecksum) {
      var sepPos, hrp, t1, dataPart, t2, intData,
        hasLowerCase = B.JSString_methods.contains$1(bechStr, A.RegExp_RegExp("[a-z]", true)),
        hasUpperCase = B.JSString_methods.contains$1(bechStr, A.RegExp_RegExp("[A-Z]", true));
      if (hasLowerCase && hasUpperCase)
        throw A.wrapException(B.ArgumentException_IrH);
      bechStr = bechStr.toLowerCase();
      sepPos = B.JSString_methods.lastIndexOf$1(bechStr, sep);
      if (sepPos === -1)
        throw A.wrapException(B.ArgumentException_iZH);
      hrp = B.JSString_methods.substring$2(bechStr, 0, sepPos);
      if (hrp.length !== 0) {
        t1 = new A.CodeUnits(hrp);
        t1 = t1.any$1(t1, new A.Bech32DecoderBase_decodeBech32_closure());
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.ArgumentException$("Invalid bech32 format (HRP not valid: " + hrp + ")", null));
      dataPart = B.JSString_methods.substring$1(bechStr, sepPos + 1);
      if (dataPart.length >= checksumLen + 1) {
        t1 = new A.CodeUnits(dataPart);
        t1 = t1.any$1(t1, new A.Bech32DecoderBase_decodeBech32_closure0());
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(B.ArgumentException_8to);
      t1 = type$.CodeUnits;
      t2 = t1._eval$1("MappedListIterable<ListBase.E,int>");
      intData = A.List_List$_of(new A.MappedListIterable(new A.CodeUnits(dataPart), t1._eval$1("int(ListBase.E)")._as(new A.Bech32DecoderBase_decodeBech32_closure1()), t2), t2._eval$1("ListIterable.E"));
      if (!verifyChecksum.call$2(hrp, intData))
        throw A.wrapException(B.Bech32ChecksumError_nNb);
      return new A.Tuple(hrp, A.List_List$from(B.JSArray_methods.sublist$2(intData, 0, intData.length - checksumLen), true, type$.int), type$.Tuple_of_String_and_List_int);
    },
    Bech32EncoderBase_encodeBech32_closure: function Bech32EncoderBase_encodeBech32_closure() {
    },
    Bech32DecoderBase_decodeBech32_closure: function Bech32DecoderBase_decodeBech32_closure() {
    },
    Bech32DecoderBase_decodeBech32_closure0: function Bech32DecoderBase_decodeBech32_closure0() {
    },
    Bech32DecoderBase_decodeBech32_closure1: function Bech32DecoderBase_decodeBech32_closure1() {
    },
    AdaByronIcarusAddrEncoder: function AdaByronIcarusAddrEncoder() {
    },
    AdaByronLegacyAddrEncoder: function AdaByronLegacyAddrEncoder() {
    },
    AdaShelleyAddrEncoder: function AdaShelleyAddrEncoder() {
    },
    ADANetwork: function ADANetwork(t0, t1) {
      this.value = t0;
      this.name = t1;
    },
    AlgoAddrEncoder: function AlgoAddrEncoder() {
    },
    AptosAddressUtils_praseAddressBytes(bytes) {
      var t1 = J.getInterceptor$asx(bytes);
      if (t1.get$length(bytes) !== 32)
        throw A.wrapException(A.AddressConverterException$("Invalid aptos address bytes length.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", 32, "length", t1.get$length(bytes)], type$.String, type$.dynamic)));
      return bytes;
    },
    AptosAddressUtils_addressToBytes(address) {
      var t1, bytes, byte;
      address = A.StringUtils_strip0x(address);
      t1 = address.length;
      bytes = A.BytesUtils_tryFromHexString(address, t1 === 1 || t1 === 63);
      if (bytes != null) {
        t1 = bytes.length;
        t1 = t1 !== 32 && t1 !== 1;
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.AddressConverterException$("Invalid aptos address.", A.LinkedHashMap_LinkedHashMap$_literal(["address", address], type$.String, type$.dynamic)));
      t1 = bytes.length;
      if (t1 === 1) {
        if (0 >= t1)
          return A.ioore(bytes, 0);
        byte = bytes[0];
        if (byte >= 16)
          throw A.wrapException(A.AddressConverterException$("Invalid special address.", A.LinkedHashMap_LinkedHashMap$_literal(["address", A.BytesUtils_toHexString(bytes, true, null)], type$.String, type$.dynamic)));
        bytes = A.List_List$filled(32, 0, false, type$.int);
        B.JSArray_methods.set$last(bytes, byte);
      }
      return A.AptosAddressUtils_praseAddressBytes(bytes);
    },
    AptosSingleKeyEd25519AddrEncoder: function AptosSingleKeyEd25519AddrEncoder() {
    },
    AptosSingleKeySecp256k1AddrEncoder: function AptosSingleKeySecp256k1AddrEncoder() {
    },
    AptosAddrEncoder: function AptosAddrEncoder() {
    },
    AtomAddressUtils_decode(address, hrp) {
      var decode, addressBytes, e, decode0, convData, t1, t2, exception;
      try {
        decode0 = A.Bech32DecoderBase_decodeBech32(address, "1", 6, A.bech32_base_Bech32Utils_verifyChecksum$closure());
        convData = A.Bech32BaseUtils__convertBits(decode0.item2, 5, 8, false);
        if (convData == null)
          A.throwExpression(B.ArgumentException_wwD);
        decode = new A.Tuple(decode0.item1, convData, type$.Tuple_of_String_and_List_int);
        addressBytes = decode.item2;
        t1 = addressBytes;
        t2 = J.getInterceptor$asx(t1);
        if (t2.get$length(t1) !== 20 && t2.get$length(t1) !== 32)
          A.throwExpression(A.AddressConverterException$("Invalid address bytes length.", A.LinkedHashMap_LinkedHashMap$_literal(["length", t2.get$length(t1), "Excepted", "20 or 32"], type$.String, type$.dynamic)));
        t1 = decode.item1;
        A.List_List$unmodifiable(addressBytes, type$.int);
        return new A.AtomAddressDecodeResult(t1);
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.AddressConverterException)
          throw exception;
        else {
          e = t1;
          t1 = A.AddressConverterException$("Invalid atom address.", A.LinkedHashMap_LinkedHashMap$_literal(["address", address, "error", J.toString$0$(e)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
      }
    },
    AtomAddressDecodeResult: function AtomAddressDecodeResult(t0) {
      this.hrp = t0;
    },
    AtomAddrEncoder: function AtomAddrEncoder() {
    },
    AtomEthSecp256k1AddrEncoder: function AtomEthSecp256k1AddrEncoder() {
    },
    AtomNist256P1AddrEncoder: function AtomNist256P1AddrEncoder() {
    },
    AtomEd25519AddrEncoder: function AtomEd25519AddrEncoder() {
    },
    AvaxPChainAddrEncoder: function AvaxPChainAddrEncoder() {
    },
    AvaxXChainAddrEncoder: function AvaxXChainAddrEncoder() {
    },
    EgldAddrEncoder: function EgldAddrEncoder() {
    },
    BlockchainAddressEncoder: function BlockchainAddressEncoder() {
    },
    EosAddrEncoder: function EosAddrEncoder() {
    },
    ErgoNetworkTypes: function ErgoNetworkTypes(t0) {
      this.value = t0;
    },
    ErgoP2PKHAddrEncoder: function ErgoP2PKHAddrEncoder() {
    },
    EthAddrUtils__checksumEncode(addr) {
      var t3, out, addrHexDigest,
        t1 = A.StringUtils_encode(addr.toLowerCase(), B.StringEncoding_1),
        t2 = type$.int,
        h = new A.Keccack(32, A.List_List$filled(25, 0, false, t2), A.List_List$filled(25, 0, false, t2), A.List_List$filled(200, 0, false, t2));
      h._Keccack$1(64);
      t3 = type$.List_int;
      h.super$_Keccack$update(t3._as(t1));
      out = A.List_List$filled(32, 0, false, t2);
      t3._as(out);
      if (!h._hash$_finished)
        h._padAndPermute$1(1);
      else
        h._pos = 0;
      h._squeeze$1(out);
      h.reset$0();
      addrHexDigest = A.BytesUtils_toHexString(out, true, null);
      return B.JSArray_methods.join$0(new A.ListMapView(A._setArrayType(addr.split(""), type$.JSArray_String), type$.ListMapView_String).get$entries().map$1$1(0, new A.EthAddrUtils__checksumEncode_closure(addrHexDigest), type$.String).toList$0(0));
    },
    EthAddrUtils_toChecksumAddress(addr) {
      var wihtoutPrefix = A.StringUtils_strip0x(addr),
        t1 = $.$get$StringUtils__hexBytesRegex();
      if (!t1._nativeRegExp.test(wihtoutPrefix))
        throw A.wrapException(A.AddressConverterException$("Invalid Ethereum address.", A.LinkedHashMap_LinkedHashMap$_literal(["address", addr], type$.String, type$.dynamic)));
      A.AddrDecUtils_validateLength(wihtoutPrefix, 40);
      return "0x" + A.EthAddrUtils__checksumEncode(wihtoutPrefix);
    },
    EthAddrUtils__checksumEncode_closure: function EthAddrUtils__checksumEncode_closure(t0) {
      this.addrHexDigest = t0;
    },
    EthAddrDecoder: function EthAddrDecoder() {
    },
    EthAddrEncoder: function EthAddrEncoder() {
    },
    AddressConverterException$(message, details) {
      return new A.AddressConverterException(message, details);
    },
    AddressConverterException: function AddressConverterException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    FilSecp256k1AddrEncoder: function FilSecp256k1AddrEncoder() {
    },
    IcxAddrEncoder: function IcxAddrEncoder() {
    },
    InjAddrEncoder: function InjAddrEncoder() {
    },
    NanoAddrEncoder: function NanoAddrEncoder() {
    },
    NearAddrEncoder: function NearAddrEncoder() {
    },
    NeoAddrEncoder: function NeoAddrEncoder() {
    },
    OkexAddrEncoder: function OkexAddrEncoder() {
    },
    OneAddrEncoder: function OneAddrEncoder() {
    },
    P2PKHAddrEncoder: function P2PKHAddrEncoder() {
    },
    BchP2PKHAddrEncoder: function BchP2PKHAddrEncoder() {
    },
    P2SHAddrEncoder: function P2SHAddrEncoder() {
    },
    BchP2SHAddrEncoder: function BchP2SHAddrEncoder() {
    },
    P2TRAddrEncoder: function P2TRAddrEncoder() {
    },
    P2WPKHAddrEncoder: function P2WPKHAddrEncoder() {
    },
    SolAddrEncoder: function SolAddrEncoder() {
    },
    SubstrateEd25519AddrEncoder: function SubstrateEd25519AddrEncoder() {
    },
    SubstrateSr25519AddrEncoder: function SubstrateSr25519AddrEncoder() {
    },
    SubstrateSecp256k1AddrEncoder: function SubstrateSecp256k1AddrEncoder() {
    },
    SuiSecp256k1AddrEncoder: function SuiSecp256k1AddrEncoder() {
    },
    SuiSecp256r1AddrEncoder: function SuiSecp256r1AddrEncoder() {
    },
    SuiAddrEncoder: function SuiAddrEncoder() {
    },
    TonAddressUtils_isFriendly(source) {
      var t1;
      if (source.length === 48) {
        t1 = $.$get$TonAddressUtils__friendlyRegixAddress();
        t1 = t1._nativeRegExp.test(source);
      } else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    TonAddressUtils_isRaw(source) {
      var hashBytes, exception,
        parts = A._setArrayType(source.split(":"), type$.JSArray_String);
      try {
        A.int_parse(J.$index$asx(parts, 0), null);
        hashBytes = A.BytesUtils_fromHexString(J.$index$asx(parts, 1), false);
        if (J.get$length$asx(hashBytes) === 32)
          return true;
        return false;
      } catch (exception) {
        return false;
      }
    },
    TonAddressUtils_fromRawAddress(address) {
      var parts, workChain, hash, t1, exception;
      try {
        parts = A._setArrayType(address.split(":"), type$.JSArray_String);
        workChain = A.int_parse(J.$index$asx(parts, 0), null);
        hash = A.BytesUtils_fromHexString(J.$index$asx(parts, 1), false);
        t1 = A.List_List$unmodifiable(A._setArrayType([], type$.JSArray_FriendlyAddressFlags), type$.FriendlyAddressFlags);
        return new A.DecodeAddressResult(workChain, hash, t1);
      } catch (exception) {
        t1 = A.AddressConverterException$("Invalid raw address", A.LinkedHashMap_LinkedHashMap$_literal(["address", address], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    TonAddressUtils_encodeAddress(bounceable, hash, testOnly, urlSafe, workChain) {
      var t1, t2, addr, encode,
        tag = bounceable ? 17 : 81;
      if (testOnly)
        tag |= 128;
      t1 = [tag, workChain & 255];
      B.JSArray_methods.addAll$1(t1, hash);
      t2 = type$.int;
      addr = A.List_List$unmodifiable(t1, t2);
      t1 = A.List_List$_of(addr, t2);
      B.JSArray_methods.addAll$1(t1, A.Crc16_quickIntDigest(addr));
      encode = A.StringUtils_decode(t1, false, B.StringEncoding_2);
      t1 = A.stringReplaceAllUnchecked(encode, "+", "-");
      return A.stringReplaceAllUnchecked(t1, "/", "_");
    },
    TonAddressUtils_decodeAddress(address) {
      var data, t1, addr, crc, calcedCrc, flags, tag, t2, workchain;
      if (A.TonAddressUtils_isFriendly(address)) {
        data = A.StringUtils_encode(address, B.StringEncoding_2);
        t1 = data.length;
        if (t1 !== 36)
          A.throwExpression(A.AddressConverterException$("Unknown address type. byte length is not equal to 36", A.LinkedHashMap_LinkedHashMap$_literal(["length", t1], type$.String, type$.dynamic)));
        addr = B.NativeUint8List_methods.sublist$2(data, 0, 34);
        crc = B.NativeUint8List_methods.sublist$2(data, 34, 36);
        calcedCrc = A.Crc16_quickIntDigest(addr);
        if (!A.BytesUtils_bytesEqual(crc, calcedCrc))
          A.throwExpression(A.AddressConverterException$("Invalid checksum", A.LinkedHashMap_LinkedHashMap$_literal(["expected", calcedCrc, "checksum", crc], type$.String, type$.dynamic)));
        flags = A._setArrayType([], type$.JSArray_FriendlyAddressFlags);
        t1 = addr.length;
        if (0 >= t1)
          return A.ioore(addr, 0);
        tag = addr[0];
        if ((tag & 128) !== 0) {
          B.JSArray_methods.add$1(flags, B.FriendlyAddressFlags_128);
          tag ^= 128;
        }
        t2 = tag === 17;
        if (!t2 && tag !== 81)
          A.throwExpression(A.AddressConverterException$("Unknown address tag", A.LinkedHashMap_LinkedHashMap$_literal(["tag", tag], type$.String, type$.dynamic)));
        if (t2)
          B.JSArray_methods.add$1(flags, B.FriendlyAddressFlags_17);
        else
          B.JSArray_methods.add$1(flags, B.FriendlyAddressFlags_81);
        if (1 >= t1)
          return A.ioore(addr, 1);
        workchain = addr[1];
        if (workchain === 255)
          workchain = -1;
        return new A.DecodeAddressResult(workchain, B.NativeUint8List_methods.sublist$2(addr, 2, 34), A.List_List$unmodifiable(flags, type$.FriendlyAddressFlags));
      } else if (A.TonAddressUtils_isRaw(address))
        return A.TonAddressUtils_fromRawAddress(address);
      else
        throw A.wrapException(A.AddressConverterException$("Unknown address type.", A.LinkedHashMap_LinkedHashMap$_literal(["address", address], type$.String, type$.dynamic)));
    },
    DecodeAddressResult: function DecodeAddressResult(t0, t1, t2) {
      this.workchain = t0;
      this.hash = t1;
      this.flags = t2;
    },
    FriendlyAddressFlags: function FriendlyAddressFlags(t0) {
      this.flag = t0;
    },
    TonAddrDecoder: function TonAddrDecoder() {
    },
    TonAddrEncoder: function TonAddrEncoder() {
    },
    TrxAddressUtils_fromHexBytes(bytes) {
      var t1,
        validateBytes = A.AddrDecUtils_validateAndRemovePrefixBytes(bytes, B.List_65);
      A.AddrDecUtils_validateBytesLength(validateBytes, 20);
      t1 = A.List_List$_of(B.List_65, type$.dynamic);
      B.JSArray_methods.addAll$1(t1, validateBytes);
      return A.Base58Encoder_checkEncode(A.List_List$from(t1, true, type$.int));
    },
    TrxAddrDecoder: function TrxAddrDecoder() {
    },
    TrxAddrEncoder: function TrxAddrEncoder() {
    },
    XlmAddrTypes_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_FN2, new A.XlmAddrTypes_fromTag_closure(tag), new A.XlmAddrTypes_fromTag_closure0(tag));
    },
    _XlmAddrUtils_computeChecksum(payloadBytes) {
      var t1 = A.XModemCrc__calculateXmodemCrc(type$.List_int._as(payloadBytes)),
        t2 = A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>");
      t1 = A.List_List$_of(new A.ReversedListIterable(t1, t2), t2._eval$1("ListIterable.E"));
      return t1;
    },
    XlmAddrTypes: function XlmAddrTypes(t0, t1) {
      this.value = t0;
      this.name = t1;
    },
    XlmAddrTypes_fromTag_closure: function XlmAddrTypes_fromTag_closure(t0) {
      this.tag = t0;
    },
    XlmAddrTypes_fromTag_closure0: function XlmAddrTypes_fromTag_closure0(t0) {
      this.tag = t0;
    },
    XlmAddrTypes_fromTag__closure: function XlmAddrTypes_fromTag__closure() {
    },
    XlmAddrDecoderResult: function XlmAddrDecoderResult(t0, t1, t2) {
      this.type = t0;
      this.baseAddress = t1;
      this.accountId = t2;
    },
    XlmAddrDecoder: function XlmAddrDecoder() {
    },
    XlmAddrEncoder: function XlmAddrEncoder() {
    },
    XmrAddrEncoder: function XmrAddrEncoder() {
    },
    XrpAddrEncoder: function XrpAddrEncoder() {
    },
    XtzAddrPrefixes: function XtzAddrPrefixes() {
    },
    XtzAddrEncoder: function XtzAddrEncoder() {
    },
    ZilAddrEncoder: function ZilAddrEncoder() {
    },
    Bip32KeyIndex_Bip32KeyIndex$hardenIndex(index) {
      return A.Bip32KeyIndex_Bip32KeyIndex((index | 2147483648) >>> 0);
    },
    Bip32KeyIndex_Bip32KeyIndex(index) {
      if (index < 0 || index > 4294967295)
        throw A.wrapException(A.ArgumentException$("Invalid key index (" + index + ")", null));
      return new A.Bip32KeyIndex(index);
    },
    Bip32KeyIndex: function Bip32KeyIndex(t0) {
      this.index = t0;
    },
    Bip32KeyNetVersions_Bip32KeyNetVersions(pubNetVer, privNetVer) {
      var t1;
      if (pubNetVer.length !== 4 || privNetVer.length !== 4)
        throw A.wrapException(B.ArgumentException_4i3);
      A.BytesUtils_validateListOfBytes(pubNetVer);
      t1 = type$.int;
      A.List_List$unmodifiable(pubNetVer, t1);
      A.BytesUtils_validateListOfBytes(privNetVer);
      A.List_List$unmodifiable(privNetVer, t1);
      return new A.Bip32KeyNetVersions();
    },
    Bip32KeyNetVersions: function Bip32KeyNetVersions() {
    },
    BipCoins_fromName($name, proposal) {
      switch (proposal) {
        case B.BipProposal_bip44:
          return A.Bip44Coins_fromName($name);
        case B.BipProposal_bip49:
          return A.Bip49Coins_fromName($name);
        case B.BipProposal_bip84:
          return A.Bip84Coins_fromName($name);
        case B.BipProposal_bip86:
          return A.Bip86Coins_fromName($name);
        default:
          return null;
      }
    },
    BipCoins: function BipCoins() {
    },
    BipProposal: function BipProposal(t0) {
      this.name = t0;
    },
    Bip44Coins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$Bip44Coins__coinToConf();
        t1 = new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>")).firstWhere$1(0, new A.Bip44Coins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    Bip44Coins: function Bip44Coins(t0) {
      this.name = t0;
    },
    Bip44Coins_fromName_closure: function Bip44Coins_fromName_closure(t0) {
      this.name = t0;
    },
    Bip44Conf_akashNetwork_closure: function Bip44Conf_akashNetwork_closure() {
    },
    Bip44Conf_algorand_closure: function Bip44Conf_algorand_closure() {
    },
    Bip44Conf_aptos_closure: function Bip44Conf_aptos_closure() {
    },
    Bip44Conf_aptosSingleKeySecp256k1_closure: function Bip44Conf_aptosSingleKeySecp256k1_closure() {
    },
    Bip44Conf_aptosSingleKeyEd25519_closure: function Bip44Conf_aptosSingleKeyEd25519_closure() {
    },
    Bip44Conf_avaxCChain_closure: function Bip44Conf_avaxCChain_closure() {
    },
    Bip44Conf_avaxPChain_closure: function Bip44Conf_avaxPChain_closure() {
    },
    Bip44Conf_avaxXChain_closure: function Bip44Conf_avaxXChain_closure() {
    },
    Bip44Conf_axelar_closure: function Bip44Conf_axelar_closure() {
    },
    Bip44Conf_bandProtocol_closure: function Bip44Conf_bandProtocol_closure() {
    },
    Bip44Conf_binanceChain_closure: function Bip44Conf_binanceChain_closure() {
    },
    Bip44Conf_binanceSmartChain_closure: function Bip44Conf_binanceSmartChain_closure() {
    },
    Bip44Conf_bitcoinMainNet_closure: function Bip44Conf_bitcoinMainNet_closure() {
    },
    Bip44Conf_bitcoinTestNet_closure: function Bip44Conf_bitcoinTestNet_closure() {
    },
    Bip44Conf_bitcoinCashMainNet_closure: function Bip44Conf_bitcoinCashMainNet_closure() {
    },
    Bip44Conf_bitcoinCashTestNet_closure: function Bip44Conf_bitcoinCashTestNet_closure() {
    },
    Bip44Conf_bitcoinCashSlpMainNet_closure: function Bip44Conf_bitcoinCashSlpMainNet_closure() {
    },
    Bip44Conf_bitcoinCashSlpTestNet_closure: function Bip44Conf_bitcoinCashSlpTestNet_closure() {
    },
    Bip44Conf_bitcoinSvMainNet_closure: function Bip44Conf_bitcoinSvMainNet_closure() {
    },
    Bip44Conf_bitcoinSvTestNet_closure: function Bip44Conf_bitcoinSvTestNet_closure() {
    },
    Bip44Conf_cardanoByronIcarus_closure: function Bip44Conf_cardanoByronIcarus_closure() {
    },
    Bip44Conf_cardanoByronLedger_closure: function Bip44Conf_cardanoByronLedger_closure() {
    },
    Bip44Conf_cardanoByronIcarusTestnet_closure: function Bip44Conf_cardanoByronIcarusTestnet_closure() {
    },
    Bip44Conf_cardanoByronLedgerTestnet_closure: function Bip44Conf_cardanoByronLedgerTestnet_closure() {
    },
    Bip44Conf_celo_closure: function Bip44Conf_celo_closure() {
    },
    Bip44Conf_certik_closure: function Bip44Conf_certik_closure() {
    },
    Bip44Conf_chihuahua_closure: function Bip44Conf_chihuahua_closure() {
    },
    Bip44Conf_cosmos_closure: function Bip44Conf_cosmos_closure() {
    },
    Bip44Conf_cosmosTestnet_closure: function Bip44Conf_cosmosTestnet_closure() {
    },
    Bip44Conf_cosmosEthSecp256k1_closure: function Bip44Conf_cosmosEthSecp256k1_closure() {
    },
    Bip44Conf_cosmosTestnetEthSecp256k1_closure: function Bip44Conf_cosmosTestnetEthSecp256k1_closure() {
    },
    Bip44Conf_cosmosNist256p1_closure: function Bip44Conf_cosmosNist256p1_closure() {
    },
    Bip44Conf_cosmosTestnetNist256p1_closure: function Bip44Conf_cosmosTestnetNist256p1_closure() {
    },
    Bip44Conf_cosmosEd25519_closure: function Bip44Conf_cosmosEd25519_closure() {
    },
    Bip44Conf_cosmosTestnetEd25519_closure: function Bip44Conf_cosmosTestnetEd25519_closure() {
    },
    Bip44Conf_dashMainNet_closure: function Bip44Conf_dashMainNet_closure() {
    },
    Bip44Conf_dashTestNet_closure: function Bip44Conf_dashTestNet_closure() {
    },
    Bip44Conf_dogecoinMainNet_closure: function Bip44Conf_dogecoinMainNet_closure() {
    },
    Bip44Conf_dogecoinTestNet_closure: function Bip44Conf_dogecoinTestNet_closure() {
    },
    Bip44Conf_pepeMainnet_closure: function Bip44Conf_pepeMainnet_closure() {
    },
    Bip44Conf_pepeTestnet_closure: function Bip44Conf_pepeTestnet_closure() {
    },
    Bip44Conf_ecashMainNet_closure: function Bip44Conf_ecashMainNet_closure() {
    },
    Bip44Conf_ecashTestNet_closure: function Bip44Conf_ecashTestNet_closure() {
    },
    Bip44Conf_elrond_closure: function Bip44Conf_elrond_closure() {
    },
    Bip44Conf_eos_closure: function Bip44Conf_eos_closure() {
    },
    Bip44Conf_ergoMainNet_closure: function Bip44Conf_ergoMainNet_closure() {
    },
    Bip44Conf_ergoTestNet_closure: function Bip44Conf_ergoTestNet_closure() {
    },
    Bip44Conf_ethereum_closure: function Bip44Conf_ethereum_closure() {
    },
    Bip44Conf_ethereumTestnet_closure: function Bip44Conf_ethereumTestnet_closure() {
    },
    Bip44Conf_ethereumClassic_closure: function Bip44Conf_ethereumClassic_closure() {
    },
    Bip44Conf_fantomOpera_closure: function Bip44Conf_fantomOpera_closure() {
    },
    Bip44Conf_filecoin_closure: function Bip44Conf_filecoin_closure() {
    },
    Bip44Conf_harmonyOneMetamask_closure: function Bip44Conf_harmonyOneMetamask_closure() {
    },
    Bip44Conf_harmonyOneEth_closure: function Bip44Conf_harmonyOneEth_closure() {
    },
    Bip44Conf_harmonyOneAtom_closure: function Bip44Conf_harmonyOneAtom_closure() {
    },
    Bip44Conf_huobiChain_closure: function Bip44Conf_huobiChain_closure() {
    },
    Bip44Conf_icon_closure: function Bip44Conf_icon_closure() {
    },
    Bip44Conf_injective_closure: function Bip44Conf_injective_closure() {
    },
    Bip44Conf_irisNet_closure: function Bip44Conf_irisNet_closure() {
    },
    Bip44Conf_kava_closure: function Bip44Conf_kava_closure() {
    },
    Bip44Conf_kusamaEd25519Slip_closure: function Bip44Conf_kusamaEd25519Slip_closure() {
    },
    Bip44Conf_kusamaTestnetEd25519Slip_closure: function Bip44Conf_kusamaTestnetEd25519Slip_closure() {
    },
    Bip44Conf_litecoinMainNet_closure: function Bip44Conf_litecoinMainNet_closure() {
    },
    Bip44Conf_litecoinTestNet_closure: function Bip44Conf_litecoinTestNet_closure() {
    },
    Bip44Conf_moneroEd25519Slip_closure: function Bip44Conf_moneroEd25519Slip_closure() {
    },
    Bip44Conf_moneroSecp256k1_closure: function Bip44Conf_moneroSecp256k1_closure() {
    },
    Bip44Conf_nano_closure: function Bip44Conf_nano_closure() {
    },
    Bip44Conf_nearProtocol_closure: function Bip44Conf_nearProtocol_closure() {
    },
    Bip44Conf_neo_closure: function Bip44Conf_neo_closure() {
    },
    Bip44Conf_nineChroniclesGold_closure: function Bip44Conf_nineChroniclesGold_closure() {
    },
    Bip44Conf_okexChainEth_closure: function Bip44Conf_okexChainEth_closure() {
    },
    Bip44Conf_okexChainAtom_closure: function Bip44Conf_okexChainAtom_closure() {
    },
    Bip44Conf_okexChainAtomOld_closure: function Bip44Conf_okexChainAtomOld_closure() {
    },
    Bip44Conf_ontology_closure: function Bip44Conf_ontology_closure() {
    },
    Bip44Conf_osmosis_closure: function Bip44Conf_osmosis_closure() {
    },
    Bip44Conf_piNetwork_closure: function Bip44Conf_piNetwork_closure() {
    },
    Bip44Conf_polkadotEd25519Slip_closure: function Bip44Conf_polkadotEd25519Slip_closure() {
    },
    Bip44Conf_polkadotTestnetEd25519Slip_closure: function Bip44Conf_polkadotTestnetEd25519Slip_closure() {
    },
    Bip44Conf_polygon_closure: function Bip44Conf_polygon_closure() {
    },
    Bip44Conf_ripple_closure: function Bip44Conf_ripple_closure() {
    },
    Bip44Conf_rippleTestnet_closure: function Bip44Conf_rippleTestnet_closure() {
    },
    Bip44Conf_rippleEd25519_closure: function Bip44Conf_rippleEd25519_closure() {
    },
    Bip44Conf_rippleTestnetEd25519_closure: function Bip44Conf_rippleTestnetEd25519_closure() {
    },
    Bip44Conf_secretNetworkOld_closure: function Bip44Conf_secretNetworkOld_closure() {
    },
    Bip44Conf_secretNetworkNew_closure: function Bip44Conf_secretNetworkNew_closure() {
    },
    Bip44Conf_solana_closure: function Bip44Conf_solana_closure() {
    },
    Bip44Conf_solanaTestnet_closure: function Bip44Conf_solanaTestnet_closure() {
    },
    Bip44Conf_stellar_closure: function Bip44Conf_stellar_closure() {
    },
    Bip44Conf_stellarTestnet_closure: function Bip44Conf_stellarTestnet_closure() {
    },
    Bip44Conf_terra_closure: function Bip44Conf_terra_closure() {
    },
    Bip44Conf_tezos_closure: function Bip44Conf_tezos_closure() {
    },
    Bip44Conf_theta_closure: function Bip44Conf_theta_closure() {
    },
    Bip44Conf_tron_closure: function Bip44Conf_tron_closure() {
    },
    Bip44Conf_tronTestnet_closure: function Bip44Conf_tronTestnet_closure() {
    },
    Bip44Conf_vechain_closure: function Bip44Conf_vechain_closure() {
    },
    Bip44Conf_verge_closure: function Bip44Conf_verge_closure() {
    },
    Bip44Conf_zcashMainNet_closure: function Bip44Conf_zcashMainNet_closure() {
    },
    Bip44Conf_zcashTestNet_closure: function Bip44Conf_zcashTestNet_closure() {
    },
    Bip44Conf_zilliqa_closure: function Bip44Conf_zilliqa_closure() {
    },
    Bip44Conf_tonMainnet_closure: function Bip44Conf_tonMainnet_closure() {
    },
    Bip44Conf_tonTestnet_closure: function Bip44Conf_tonTestnet_closure() {
    },
    Bip44Conf_electraProtocolMainNet_closure: function Bip44Conf_electraProtocolMainNet_closure() {
    },
    Bip44Conf_electraProtocolTestNet_closure: function Bip44Conf_electraProtocolTestNet_closure() {
    },
    Bip44Conf_suiSecp256k1_closure: function Bip44Conf_suiSecp256k1_closure() {
    },
    Bip44Conf_suiSecp256r1_closure: function Bip44Conf_suiSecp256r1_closure() {
    },
    Bip44Conf_suiEd25519_closure: function Bip44Conf_suiEd25519_closure() {
    },
    Bip49Coins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$Bip49Coins__coinToConf();
        t1 = new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>")).firstWhere$1(0, new A.Bip49Coins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    Bip49Coins: function Bip49Coins(t0) {
      this.name = t0;
    },
    Bip49Coins_fromName_closure: function Bip49Coins_fromName_closure(t0) {
      this.name = t0;
    },
    Bip49Conf_dashMainNet_closure: function Bip49Conf_dashMainNet_closure() {
    },
    Bip49Conf_dashTestNet_closure: function Bip49Conf_dashTestNet_closure() {
    },
    Bip49Conf_dogecoinMainNet_closure: function Bip49Conf_dogecoinMainNet_closure() {
    },
    Bip49Conf_dogecoinTestNet_closure: function Bip49Conf_dogecoinTestNet_closure() {
    },
    Bip49Conf_litecoinMainNet_closure: function Bip49Conf_litecoinMainNet_closure() {
    },
    Bip49Conf_litecoinTestNet_closure: function Bip49Conf_litecoinTestNet_closure() {
    },
    Bip49Conf_zcashMainNet_closure: function Bip49Conf_zcashMainNet_closure() {
    },
    Bip49Conf_zcashTestNet_closure: function Bip49Conf_zcashTestNet_closure() {
    },
    Bip49Conf_bitcoinMainNet_closure: function Bip49Conf_bitcoinMainNet_closure() {
    },
    Bip49Conf_bitcoinTestNet_closure: function Bip49Conf_bitcoinTestNet_closure() {
    },
    Bip49Conf_bitcoinSvMainNet_closure: function Bip49Conf_bitcoinSvMainNet_closure() {
    },
    Bip49Conf_bitcoinSvTestNet_closure: function Bip49Conf_bitcoinSvTestNet_closure() {
    },
    Bip49Conf_bitcoinCashMainNet_closure: function Bip49Conf_bitcoinCashMainNet_closure() {
    },
    Bip49Conf_bitcoinCashTestNet_closure: function Bip49Conf_bitcoinCashTestNet_closure() {
    },
    Bip49Conf_bitcoinCashSlpMainNet_closure: function Bip49Conf_bitcoinCashSlpMainNet_closure() {
    },
    Bip49Conf_bitcoinCashSlpTestNet_closure: function Bip49Conf_bitcoinCashSlpTestNet_closure() {
    },
    Bip49Conf_ecashMainNet_closure: function Bip49Conf_ecashMainNet_closure() {
    },
    Bip49Conf_ecashTestNet_closure: function Bip49Conf_ecashTestNet_closure() {
    },
    Bip49Conf_pepeMainnet_closure: function Bip49Conf_pepeMainnet_closure() {
    },
    Bip49Conf_pepeTestnet_closure: function Bip49Conf_pepeTestnet_closure() {
    },
    Bip49Conf_electraProtocolMainNet_closure: function Bip49Conf_electraProtocolMainNet_closure() {
    },
    Bip49Conf_electraProtocolTestNet_closure: function Bip49Conf_electraProtocolTestNet_closure() {
    },
    Bip84Coins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$Bip84Coins__coinToConf();
        t1 = new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>")).firstWhere$1(0, new A.Bip84Coins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    Bip84Coins: function Bip84Coins(t0) {
      this.name = t0;
    },
    Bip84Coins_fromName_closure: function Bip84Coins_fromName_closure(t0) {
      this.name = t0;
    },
    Bip84Conf_bitcoinMainNet_closure: function Bip84Conf_bitcoinMainNet_closure() {
    },
    Bip84Conf_bitcoinTestNet_closure: function Bip84Conf_bitcoinTestNet_closure() {
    },
    Bip84Conf_litecoinMainNet_closure: function Bip84Conf_litecoinMainNet_closure() {
    },
    Bip84Conf_litecoinTestNet_closure: function Bip84Conf_litecoinTestNet_closure() {
    },
    Bip84Conf_electraProtocolMainNet_closure: function Bip84Conf_electraProtocolMainNet_closure() {
    },
    Bip84Conf_electraProtocolTestNet_closure: function Bip84Conf_electraProtocolTestNet_closure() {
    },
    Bip86Coins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$Bip86Coins__coinToConf();
        t1 = new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>")).firstWhere$1(0, new A.Bip86Coins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    Bip86Coins: function Bip86Coins(t0) {
      this.name = t0;
    },
    Bip86Coins_fromName_closure: function Bip86Coins_fromName_closure(t0) {
      this.name = t0;
    },
    Bip86Conf_bitcoinMainNet_closure: function Bip86Conf_bitcoinMainNet_closure() {
    },
    Bip86Conf_bitcoinTestNet_closure: function Bip86Conf_bitcoinTestNet_closure() {
    },
    BipBitcoinCashConf$(addrParams, addressEncoder, chainType, coinIdx, coinNames, defPath, keyNetVer, type, wifNetVer) {
      return new A.BipBitcoinCashConf(type);
    },
    BipBitcoinCashConf: function BipBitcoinCashConf(t0) {
      this.type = t0;
    },
    BipCoinConfig$(addrParams, addressEncoder, chainType, coinIdx, coinNames, defPath, keyNetVer, purpose, type, wifNetVer) {
      return new A.BipCoinConfig(type);
    },
    BipCoinConfig: function BipCoinConfig(t0) {
      this.type = t0;
    },
    BipLitecoinConf$(addrParams, addressEncoder, altKeyNetVer, chainType, coinIdx, coinNames, defPath, keyNetVer, type, wifNetVer) {
      return new A.BipLitecoinConf(type);
    },
    BipLitecoinConf: function BipLitecoinConf(t0) {
      this.type = t0;
    },
    ChainType_fromValue(val) {
      if (A._isBool(val)) {
        if (val)
          return B.ChainType_mainnet;
        return B.ChainType_testnet;
      }
      return B.JSArray_methods.firstWhere$2$orElse(B.List_QzW, new A.ChainType_fromValue_closure(val), new A.ChainType_fromValue_closure0());
    },
    ChainType: function ChainType(t0) {
      this._name = t0;
    },
    ChainType_fromValue_closure: function ChainType_fromValue_closure(t0) {
      this.val = t0;
    },
    ChainType_fromValue_closure0: function ChainType_fromValue_closure0() {
    },
    CryptoCoins_getCoin($name, proposal) {
      switch (proposal) {
        case B.BipProposal_bip44:
        case B.BipProposal_bip49:
        case B.BipProposal_bip84:
        case B.BipProposal_bip86:
          return A.BipCoins_fromName($name, type$.BipProposal._as(proposal));
        case B.C_CipProposal:
          return A.Cip1852Coins_fromName($name);
        case B.C_SubstratePropoosal:
          return A.SubstrateCoins_fromName($name);
        case B.C_MoneroProposal:
          return A.MoneroCoins_fromName($name);
        default:
          return null;
      }
    },
    CoinProposal_fromName($name) {
      switch ($name) {
        case "cip1852":
          return B.C_CipProposal;
        case "substrate":
          return B.C_SubstratePropoosal;
        case "monero":
          return B.C_MoneroProposal;
        default:
          return B.JSArray_methods.firstWhere$2$orElse(B.List_8U7, new A.CoinProposal_fromName_closure($name), new A.CoinProposal_fromName_closure0($name));
      }
    },
    CoinProposal_fromName_closure: function CoinProposal_fromName_closure(t0) {
      this.name = t0;
    },
    CoinProposal_fromName_closure0: function CoinProposal_fromName_closure0(t0) {
      this.name = t0;
    },
    Cip1852Coins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$Cip1852Coins__coinToConf();
        t1 = new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>")).firstWhere$1(0, new A.Cip1852Coins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    Cip1852Coins: function Cip1852Coins(t0) {
      this.name = t0;
    },
    Cip1852Coins_fromName_closure: function Cip1852Coins_fromName_closure(t0) {
      this.name = t0;
    },
    CipProposal: function CipProposal() {
    },
    Cip1852Conf_cardanoIcarusMainNet_closure: function Cip1852Conf_cardanoIcarusMainNet_closure() {
    },
    Cip1852Conf_cardanoIcarusTestNet_closure: function Cip1852Conf_cardanoIcarusTestNet_closure() {
    },
    Cip1852Conf_cardanoLedgerMainNet_closure: function Cip1852Conf_cardanoLedgerMainNet_closure() {
    },
    Cip1852Conf_cardanoLedgerTestNet_closure: function Cip1852Conf_cardanoLedgerTestNet_closure() {
    },
    CoinConf: function CoinConf(t0, t1) {
      this.coinName = t0;
      this.params = t1;
    },
    CoinParams: function CoinParams(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20) {
      var _ = this;
      _.p2pkhNetVer = t0;
      _.p2shNetVer = t1;
      _.p2wpkhHrp = t2;
      _.p2trHrp = t3;
      _.wifNetVer = t4;
      _.addrSs58Format = t5;
      _.addrHrp = t6;
      _.addrPrefix = t7;
      _.p2pkhStdHrp = t8;
      _.p2pkhStdNetVer = t9;
      _.p2pkhLegacyNetVer = t10;
      _.p2shStdHrp = t11;
      _.p2shStdNetVer = t12;
      _.p2shLegacyNetVer = t13;
      _.p2pkhDeprNetVer = t14;
      _.p2shDeprNetVer = t15;
      _.addrNetVer = t16;
      _.addrIntNetVer = t17;
      _.subaddrNetVer = t18;
      _.addrVer = t19;
      _.workchain = t20;
    },
    CoinNames: function CoinNames(t0) {
      this.name = t0;
    },
    EllipticCurveTypes: function EllipticCurveTypes(t0) {
      this._name = t0;
    },
    Ed25519Blake2bPublicKey: function Ed25519Blake2bPublicKey(t0) {
      this._publicKey = t0;
    },
    Ed25519PublicKey: function Ed25519PublicKey(t0) {
      this._ed25519_keys$_publicKey = t0;
    },
    Ed25519PrivateKey: function Ed25519PrivateKey(t0) {
      this._privateKey = t0;
    },
    Ed25519KholawPublicKey: function Ed25519KholawPublicKey(t0) {
      this._ed25519_kholaw_keys$_publicKey = t0;
    },
    MoneroPublicKey: function MoneroPublicKey(t0) {
      this.publicKey = t0;
    },
    Nist256p1PublicKey: function Nist256p1PublicKey(t0) {
      this.publicKey = t0;
    },
    Nist256p1HybridPublicKey: function Nist256p1HybridPublicKey(t0) {
      this.publicKey = t0;
    },
    Secp256k1PublicKey_Secp256k1PublicKey$fromBytes(keyBytes) {
      var point = A.ProjectiveECCPoint_ProjectiveECCPoint$fromBytes($.$get$Curves_curveSecp256k1(), keyBytes, null);
      return new A.Secp256k1PublicKey(A.ECDSAPublicKey_ECDSAPublicKey($.$get$Curves_generatorSecp256k1(), point));
    },
    Secp256k1PublicKey_isValidBytes(keyBytes) {
      var exception;
      try {
        A.Secp256k1PublicKey_Secp256k1PublicKey$fromBytes(keyBytes);
        return true;
      } catch (exception) {
        return false;
      }
    },
    Secp256k1PublicKey: function Secp256k1PublicKey(t0) {
      this.publicKey = t0;
    },
    Sr25519PublicKey: function Sr25519PublicKey(t0) {
      this.publicKey = t0;
    },
    MoneroCoinConf_MoneroCoinConf$fromCoinConf(chainType, coinConf) {
      var t1 = coinConf.params;
      t1.addrNetVer.toString;
      t1.addrIntNetVer.toString;
      t1.subaddrNetVer.toString;
      return new A.MoneroCoinConf(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.List_int));
    },
    MoneroCoinConf: function MoneroCoinConf(t0) {
      this.addrParams = t0;
    },
    MoneroCoins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$MoneroCoins__coinToConf();
        t1 = new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>")).firstWhere$1(0, new A.MoneroCoins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    MoneroCoins: function MoneroCoins(t0) {
      this.name = t0;
    },
    MoneroCoins_fromName_closure: function MoneroCoins_fromName_closure(t0) {
      this.name = t0;
    },
    MoneroProposal: function MoneroProposal() {
    },
    SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(addressEncode, chainType, coinConf, type) {
      coinConf.params.addrSs58Format.toString;
      return new A.SubstrateCoinConf(type);
    },
    SubstrateCoinConf: function SubstrateCoinConf(t0) {
      this.type = t0;
    },
    SubstrateCoins_fromName($name) {
      var t1, exception;
      try {
        t1 = B.JSArray_methods.firstWhere$1(B.List_Zet, new A.SubstrateCoins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    SubstrateCoins: function SubstrateCoins(t0) {
      this.name = t0;
    },
    SubstrateCoins_fromName_closure: function SubstrateCoins_fromName_closure(t0) {
      this.name = t0;
    },
    SubstratePropoosal: function SubstratePropoosal() {
    },
    SubstrateConf_acalaEd25519_closure: function SubstrateConf_acalaEd25519_closure() {
    },
    SubstrateConf_acalaSecp256k1_closure: function SubstrateConf_acalaSecp256k1_closure() {
    },
    SubstrateConf_acalaSr25519_closure: function SubstrateConf_acalaSr25519_closure() {
    },
    SubstrateConf_bifrostEd25519_closure: function SubstrateConf_bifrostEd25519_closure() {
    },
    SubstrateConf_bifrostSecp256k1_closure: function SubstrateConf_bifrostSecp256k1_closure() {
    },
    SubstrateConf_bifrostSr25519_closure: function SubstrateConf_bifrostSr25519_closure() {
    },
    SubstrateConf_chainXEd25519_closure: function SubstrateConf_chainXEd25519_closure() {
    },
    SubstrateConf_chainXSecp256k1_closure: function SubstrateConf_chainXSecp256k1_closure() {
    },
    SubstrateConf_chainXSr25519_closure: function SubstrateConf_chainXSr25519_closure() {
    },
    SubstrateConf_edgewareEd25519_closure: function SubstrateConf_edgewareEd25519_closure() {
    },
    SubstrateConf_edgewareSecp256k1_closure: function SubstrateConf_edgewareSecp256k1_closure() {
    },
    SubstrateConf_edgewareSr25519_closure: function SubstrateConf_edgewareSr25519_closure() {
    },
    SubstrateConf_genericEd25519_closure: function SubstrateConf_genericEd25519_closure() {
    },
    SubstrateConf_genericSecp256k1_closure: function SubstrateConf_genericSecp256k1_closure() {
    },
    SubstrateConf_genericSr25519_closure: function SubstrateConf_genericSr25519_closure() {
    },
    SubstrateConf_karuraEd25519_closure: function SubstrateConf_karuraEd25519_closure() {
    },
    SubstrateConf_karuraSecp256k1_closure: function SubstrateConf_karuraSecp256k1_closure() {
    },
    SubstrateConf_karuraSr25519_closure: function SubstrateConf_karuraSr25519_closure() {
    },
    SubstrateConf_kusamaEd25519_closure: function SubstrateConf_kusamaEd25519_closure() {
    },
    SubstrateConf_kusamaSecp256k1_closure: function SubstrateConf_kusamaSecp256k1_closure() {
    },
    SubstrateConf_kusamaSr25519_closure: function SubstrateConf_kusamaSr25519_closure() {
    },
    SubstrateConf_moonbeamEd25519_closure: function SubstrateConf_moonbeamEd25519_closure() {
    },
    SubstrateConf_moonbeamSecp256k1_closure: function SubstrateConf_moonbeamSecp256k1_closure() {
    },
    SubstrateConf_moonbeamSr25519_closure: function SubstrateConf_moonbeamSr25519_closure() {
    },
    SubstrateConf_moonriverEd25519_closure: function SubstrateConf_moonriverEd25519_closure() {
    },
    SubstrateConf_moonriverSecp256k1_closure: function SubstrateConf_moonriverSecp256k1_closure() {
    },
    SubstrateConf_moonriverSr25519_closure: function SubstrateConf_moonriverSr25519_closure() {
    },
    SubstrateConf_phalaEd25519_closure: function SubstrateConf_phalaEd25519_closure() {
    },
    SubstrateConf_phalaSecp256k1_closure: function SubstrateConf_phalaSecp256k1_closure() {
    },
    SubstrateConf_phalaSr25519_closure: function SubstrateConf_phalaSr25519_closure() {
    },
    SubstrateConf_plasmEd25519_closure: function SubstrateConf_plasmEd25519_closure() {
    },
    SubstrateConf_plasmSecp256k1_closure: function SubstrateConf_plasmSecp256k1_closure() {
    },
    SubstrateConf_plasmSr25519_closure: function SubstrateConf_plasmSr25519_closure() {
    },
    SubstrateConf_polkadotEd25519_closure: function SubstrateConf_polkadotEd25519_closure() {
    },
    SubstrateConf_polkadotSecp256k1_closure: function SubstrateConf_polkadotSecp256k1_closure() {
    },
    SubstrateConf_polkadotSr25519_closure: function SubstrateConf_polkadotSr25519_closure() {
    },
    SubstrateConf_soraEd25519_closure: function SubstrateConf_soraEd25519_closure() {
    },
    SubstrateConf_soraSecp256k1_closure: function SubstrateConf_soraSecp256k1_closure() {
    },
    SubstrateConf_soraSr25519_closure: function SubstrateConf_soraSr25519_closure() {
    },
    SubstrateConf_stafiEd25519_closure: function SubstrateConf_stafiEd25519_closure() {
    },
    SubstrateConf_stafiSecp256k1_closure: function SubstrateConf_stafiSecp256k1_closure() {
    },
    SubstrateConf_stafiSr25519_closure: function SubstrateConf_stafiSr25519_closure() {
    },
    CborObject_CborObject$fromDynamic(value) {
      var t2, t3,
        t1 = type$.CborObject;
      if (t1._is(value))
        return value;
      else if (value == null)
        return B.C_CborNullValue;
      else if (A._isBool(value))
        return new A.CborBoleanValue(value);
      else if (A._isInt(value))
        return new A.CborIntValue(value);
      else if (typeof value == "number")
        return new A.CborFloatValue(value);
      else if (value instanceof A.DateTime)
        return new A.CborEpochFloatValue(value);
      else if (value instanceof A._BigIntImpl)
        return new A.CborBigIntValue(value);
      else if (typeof value == "string")
        return new A.CborStringValue(value);
      else if (type$.List_String._is(value))
        return new A.CborIndefiniteStringValue(A.List_List$unmodifiable(value, type$.String));
      else if (type$.List_int._is(value) && A.BytesUtils_isValidBytes(value)) {
        A.BytesUtils_validateListOfBytes(value);
        return new A.CborBytesValue(A.List_List$unmodifiable(value, type$.int));
      } else if (type$.List_List_int._is(value))
        return A.CborDynamicBytesValue$(value);
      else if (type$.Map_dynamic_dynamic._is(value)) {
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
        for (t2 = value.get$entries(), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          t3 = t2.get$current();
          t1.$indexSet(0, A.CborObject_CborObject$fromDynamic(t3.key), A.CborObject_CborObject$fromDynamic(t3.value));
        }
        return new A.CborMapValue(t1, true, type$.CborMapValue_CborObject_CborObject);
      } else if (type$.List_dynamic._is(value)) {
        t1 = J.map$1$1$ax(value, new A.CborObject_CborObject$fromDynamic_closure(), t1);
        t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
        return new A.CborListValue(t1, true, type$.CborListValue_CborObject);
      }
      throw A.wrapException(A.CborException$("cbor encoder not found for type " + J.get$runtimeType$(value).toString$0(0), null));
    },
    CborNumeric_getCborNumericValue(val) {
      if (val instanceof A.CborIntValue)
        return A._BigIntImpl__BigIntImpl$from(val.value);
      else if (val instanceof A.CborBigIntValue)
        return val.value;
      else if (val instanceof A.CborSafeIntValue)
        return val.value;
      throw A.wrapException(B.CborException_FFX);
    },
    CborObject_CborObject$fromDynamic_closure: function CborObject_CborObject$fromDynamic_closure() {
    },
    CborException$(message, details) {
      return new A.CborException(message, details);
    },
    CborException: function CborException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    CborBase64Types: function CborBase64Types(t0) {
      this.tag = t0;
    },
    CborBaseUrlValue: function CborBaseUrlValue(t0, t1) {
      this.value = t0;
      this.type = t1;
    },
    CborBigFloatValue: function CborBigFloatValue(t0, t1) {
      this.exponent = t0;
      this.mantissa = t1;
    },
    CborBigIntValue: function CborBigIntValue(t0) {
      this.value = t0;
    },
    CborBoleanValue: function CborBoleanValue(t0) {
      this.value = t0;
    },
    CborDynamicBytesValue$(value) {
      var t1 = type$.List_int,
        t2 = J.map$1$1$ax(value, new A.CborDynamicBytesValue_closure(), t1);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      return new A.CborDynamicBytesValue(A.List_List$unmodifiable(t2, t1));
    },
    CborBytesValue: function CborBytesValue(t0) {
      this.value = t0;
    },
    CborDynamicBytesValue: function CborDynamicBytesValue(t0) {
      this.value = t0;
    },
    CborDynamicBytesValue_closure: function CborDynamicBytesValue_closure() {
    },
    CborTagValue: function CborTagValue(t0, t1, t2) {
      this.tags = t0;
      this._value = t1;
      this.$ti = t2;
    },
    _CborDate: function _CborDate() {
    },
    CborStringDateValue: function CborStringDateValue(t0) {
      this.value = t0;
    },
    CborEpochFloatValue: function CborEpochFloatValue(t0) {
      this.value = t0;
    },
    CborEpochIntValue: function CborEpochIntValue(t0) {
      this.value = t0;
    },
    CborDecimalFracValue: function CborDecimalFracValue(t0, t1) {
      this.exponent = t0;
      this.mantissa = t1;
    },
    CborFloatValue: function CborFloatValue(t0) {
      this.value = t0;
      this.__CborFloatValue__decodFloat_FI = $;
    },
    CborIntValue: function CborIntValue(t0) {
      this.value = t0;
    },
    CborSafeIntValue: function CborSafeIntValue(t0) {
      this.value = t0;
    },
    CborListValue: function CborListValue(t0, t1, t2) {
      this.value = t0;
      this._isFixedLength = t1;
      this.$ti = t2;
    },
    CborMapValue: function CborMapValue(t0, t1, t2) {
      this.value = t0;
      this._map$_isFixedLength = t1;
      this.$ti = t2;
    },
    CborMimeValue: function CborMimeValue(t0) {
      this.value = t0;
    },
    CborNullValue: function CborNullValue() {
    },
    CborUndefinedValue: function CborUndefinedValue() {
    },
    CborRegxpValue: function CborRegxpValue(t0) {
      this.value = t0;
    },
    CborSetValue: function CborSetValue(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    CborString: function CborString() {
    },
    CborStringValue: function CborStringValue(t0) {
      this.value = t0;
    },
    CborIndefiniteStringValue: function CborIndefiniteStringValue(t0) {
      this.value = t0;
    },
    CborUriValue: function CborUriValue(t0) {
      this.value = t0;
    },
    CborUtils_parseRFC3339DateTime(dateTimeString) {
      var parts, t1;
      if (B.JSString_methods.contains$1(dateTimeString, "+")) {
        parts = dateTimeString.split("+");
        t1 = parts.length;
        if (t1 !== 2)
          throw A.wrapException(A.CborException$("Invalid RFC3339 format: " + dateTimeString, null));
        if (0 >= t1)
          return A.ioore(parts, 0);
        return A.DateTime_parse(parts[0]);
      } else
        return A.DateTime_parse(dateTimeString).toUtc$0();
    },
    CborUtils__decode(cborBytes, offset) {
      var t1, t2, i, consumed, first, majorTag, info, data, t3,
        tags = A._setArrayType([], type$.JSArray_int);
      $label0$1:
        for (t1 = J.getInterceptor$asx(cborBytes), t2 = type$.dynamic, i = offset, consumed = 0; i < t1.get$length(cborBytes);) {
          first = t1.$index(cborBytes, i);
          majorTag = B.JSInt_methods._shrOtherPositive$1(first, 5);
          info = first & 31;
          switch (majorTag) {
            case 5:
              if (info === 31) {
                t1 = A.CborUtils__decodeDynamicMap(cborBytes, info, i, tags);
                return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
              }
              t1 = A.CborUtils__decodeMap(cborBytes, info, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            case 1:
            case 0:
              t1 = A.CborUtils__parseInt(cborBytes, info, majorTag, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            case 6:
              data = A.CborUtils__decodeLength(info, cborBytes, i, t2);
              B.JSArray_methods.add$1(tags, A._asInt(data.value));
              t3 = data.consumed;
              i += t3;
              consumed += t3;
              continue $label0$1;
            case 2:
              t1 = A.CborUtils__decodeBytesString(cborBytes, info, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            case 3:
              t1 = A.CborUtils__decodeUtf8String(cborBytes, info, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            case 7:
              t1 = A.CborUtils__parseSimpleValue(cborBytes, info, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            case 4:
              if (info === 31) {
                t1 = A.CborUtils__decodeDynamicArray(cborBytes, info, i, tags);
                return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
              }
              t1 = A.CborUtils__decodeArray(cborBytes, info, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            default:
              throw A.wrapException(A.CborException$("invalid or unsuported cbor tag major: " + majorTag + " ", null));
          }
        }
      throw A.wrapException(B.CborException_lWr);
    },
    CborUtils__parsBytes(cborBytes, info, offset) {
      var end,
        len = A.CborUtils__decodeLength(info, cborBytes, offset, type$.int),
        t1 = len.consumed,
        t2 = len.value;
      if (typeof t2 !== "number")
        return A.iae(t2);
      end = t1 + t2;
      return new A._DecodeCborResult(J.sublist$2$ax(cborBytes, offset + t1, offset + end), end, type$._DecodeCborResult_List_int);
    },
    CborUtils__decodeLength(info, cborBytes, offset, $T) {
      var value, consumed, len, bytes, decode;
      if (info < 24) {
        value = info;
        consumed = 1;
      } else {
        ++offset;
        len = B.JSInt_methods.$shl(1, info - 24);
        bytes = J.sublist$2$ax(cborBytes, offset, offset + len);
        consumed = len + 1;
        if (len <= 4)
          value = A.IntUtils_fromBytes(bytes);
        else if (len <= 8) {
          decode = A.BigintUtils_fromBytes(bytes, B.C_Endian, false);
          if (decode.get$isValidInt())
            value = decode.toInt$0(0);
          else {
            if ($T._is(0))
              throw A.wrapException(B.CborException_xZj);
            value = decode;
          }
        } else
          throw A.wrapException(A.CborException$("Invalid additional info for int: " + info, null));
      }
      if (!$T._is(value))
        throw A.wrapException(A.CborException$("decode length casting faild.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", A.createRuntimeType($T).toString$0(0), "value", J.get$runtimeType$(value)], type$.String, type$.dynamic)));
      return new A._DecodeCborResult($T._as(value), consumed, $T._eval$1("_DecodeCborResult<0>"));
    },
    CborUtils__decodeUtf8String(cborBytes, info, offset, tags) {
      var toList, t1, t2, stringList, bytes;
      if (info === 31) {
        toList = A.CborUtils__decodeDynamicArray(cborBytes, info, offset, tags);
        t1 = type$.WhereTypeIterable_CborStringValue;
        t2 = type$.String;
        t1 = A.MappedIterable_MappedIterable(new A.WhereTypeIterable(type$.CborListValue_dynamic._as(toList.value).value, t1), t1._eval$1("String(Iterable.E)")._as(new A.CborUtils__decodeUtf8String_closure()), t1._eval$1("Iterable.E"), t2);
        stringList = A.List_List$_of(t1, A._instanceType(t1)._eval$1("Iterable.E"));
        if (tags.length !== 0) {
          t1 = A.List_List$unmodifiable(stringList, t2);
          return new A._DecodeCborResult(new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), new A.CborIndefiniteStringValue(t1), type$.CborTagValue_CborIndefiniteStringValue), toList.consumed, type$._DecodeCborResult_CborObject);
        }
        return new A._DecodeCborResult(new A.CborIndefiniteStringValue(A.List_List$unmodifiable(stringList, t2)), toList.consumed, type$._DecodeCborResult_CborObject);
      }
      bytes = A.CborUtils__parsBytes(cborBytes, info, offset);
      return new A._DecodeCborResult(A.CborUtils__toStringObject(bytes.value, tags), bytes.consumed, type$._DecodeCborResult_CborObject);
    },
    CborUtils__toStringObject(utf8Bytes, tags) {
      var toObj, baseType,
        $toString = A.StringUtils_decode(utf8Bytes, false, B.StringEncoding_1);
      if (tags.length === 0)
        toObj = new A.CborStringValue($toString);
      else if (B.JSArray_methods.any$1(B.List_Oij, new A.CborUtils__toStringObject_closure(tags))) {
        baseType = B.JSArray_methods.firstWhere$1(B.List_Oij, new A.CborUtils__toStringObject_closure0(tags));
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborBaseUrlValue($toString, baseType);
      } else if (A.BytesUtils_bytesEqual(tags, B.List_36)) {
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborMimeValue($toString);
      } else if (A.BytesUtils_bytesEqual(tags, B.List_32)) {
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborUriValue($toString);
      } else if (A.BytesUtils_bytesEqual(tags, B.List_35)) {
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborRegxpValue($toString);
      } else if (A.BytesUtils_bytesEqual(tags, B.List_0)) {
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborStringDateValue(A.CborUtils_parseRFC3339DateTime($toString));
      } else
        toObj = null;
      if (toObj == null)
        toObj = new A.CborStringValue($toString);
      return tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toObj, type$.CborTagValue_CborObject);
    },
    CborUtils__decodeBytesString(cborBytes, info, offset, tags) {
      var toList, t1, bytesList, bytes, big, val;
      if (info === 31) {
        toList = A.CborUtils__decodeDynamicArray(cborBytes, info, offset, tags);
        t1 = type$.WhereTypeIterable_CborBytesValue;
        t1 = A.MappedIterable_MappedIterable(new A.WhereTypeIterable(type$.CborListValue_dynamic._as(toList.value).value, t1), t1._eval$1("List<int>(Iterable.E)")._as(new A.CborUtils__decodeBytesString_closure()), t1._eval$1("Iterable.E"), type$.List_int);
        bytesList = A.List_List$_of(t1, A._instanceType(t1)._eval$1("Iterable.E"));
        if (tags.length !== 0) {
          t1 = A.CborDynamicBytesValue$(bytesList);
          return new A._DecodeCborResult(new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), t1, type$.CborTagValue_CborDynamicBytesValue), toList.consumed, type$._DecodeCborResult_CborObject);
        }
        return new A._DecodeCborResult(A.CborDynamicBytesValue$(bytesList), toList.consumed, type$._DecodeCborResult_CborObject);
      }
      bytes = A.CborUtils__parsBytes(cborBytes, info, offset);
      if (A.BytesUtils_bytesEqual(tags, B.List_3) || A.BytesUtils_bytesEqual(tags, B.List_2)) {
        big = A.BigintUtils_fromBytes(bytes.value, B.C_Endian, false);
        if (A.BytesUtils_bytesEqual(tags, B.List_3))
          big = big.$not(0);
        B.JSArray_methods.clear$0(tags);
        val = new A.CborBigIntValue(big);
      } else
        val = null;
      if (val == null) {
        t1 = bytes.value;
        A.BytesUtils_validateListOfBytes(t1);
        val = new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
      }
      t1 = tags.length === 0 ? val : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), val, type$.CborTagValue_CborObject);
      return new A._DecodeCborResult(t1, bytes.consumed, type$._DecodeCborResult_CborObject);
    },
    CborUtils__decodeMap(cborBytes, info, offset, tags) {
      var lI, decodeKey, decodeValue, toMap,
        t1 = type$.int,
        decodeLen = A.CborUtils__decodeLength(info, cborBytes, offset, t1),
        consumed = decodeLen.consumed,
        $length = decodeLen.value,
        t2 = type$.CborObject,
        objects = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
      for (lI = 0; lI < $length; ++lI) {
        decodeKey = A.CborUtils__decode(cborBytes, consumed + offset);
        consumed += decodeKey.consumed;
        decodeValue = A.CborUtils__decode(cborBytes, consumed + offset);
        objects.$indexSet(0, decodeKey.value, decodeValue.value);
        consumed += decodeValue.consumed;
      }
      toMap = new A.CborMapValue(objects, true, type$.CborMapValue_CborObject_CborObject);
      t1 = tags.length === 0 ? toMap : new A.CborTagValue(A.List_List$unmodifiable(tags, t1), toMap, type$.CborTagValue_CborMapValue_CborObject_CborObject);
      return new A._DecodeCborResult(t1, consumed, type$._DecodeCborResult_CborObject);
    },
    CborUtils__decodeDynamicMap(cborBytes, info, offset, tags) {
      var consumed, t2, decodeKey, decodeValue, toMap,
        t1 = type$.CborObject,
        objects = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      for (t1 = J.getInterceptor$asx(cborBytes), consumed = 1; t2 = offset + consumed, t1.$index(cborBytes, t2) !== 255;) {
        decodeKey = A.CborUtils__decode(cborBytes, t2);
        consumed += decodeKey.consumed;
        decodeValue = A.CborUtils__decode(cborBytes, offset + consumed);
        objects.$indexSet(0, decodeKey.value, decodeValue.value);
        consumed += decodeValue.consumed;
      }
      toMap = new A.CborMapValue(objects, false, type$.CborMapValue_CborObject_CborObject);
      t1 = tags.length === 0 ? toMap : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toMap, type$.CborTagValue_CborMapValue_CborObject_CborObject);
      return new A._DecodeCborResult(t1, consumed + 1, type$._DecodeCborResult_CborObject);
    },
    CborUtils__decodeArray(cborBytes, info, offset, tags) {
      var t2, lI, decodeData, toObj,
        t1 = type$.int,
        decodeLen = A.CborUtils__decodeLength(info, cborBytes, offset, t1),
        consumed = decodeLen.consumed,
        $length = decodeLen.value,
        objects = A._setArrayType([], type$.JSArray_CborObject);
      for (t2 = J.getInterceptor$asx(cborBytes), lI = 0; lI < $length; ++lI) {
        decodeData = A.CborUtils__decode(cborBytes, consumed + offset);
        B.JSArray_methods.add$1(objects, decodeData.value);
        consumed += decodeData.consumed;
        if (consumed + offset === t2.get$length(cborBytes))
          break;
      }
      if (A.BytesUtils_bytesEqual(tags, B.List_5) || A.BytesUtils_bytesEqual(tags, B.List_4))
        return new A._DecodeCborResult(A.CborUtils__decodeCborBigfloatOrDecimal(objects, tags), consumed, type$._DecodeCborResult_CborObject);
      if (A.BytesUtils_bytesEqual(tags, B.List_258)) {
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborSetValue(A.LinkedHashSet_LinkedHashSet$from(objects, type$.CborObject), type$.CborSetValue_CborObject);
        t1 = tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, t1), toObj, type$.CborTagValue_CborSetValue_CborObject);
        return new A._DecodeCborResult(t1, consumed, type$._DecodeCborResult_CborObject);
      }
      toObj = new A.CborListValue(objects, true, type$.CborListValue_CborObject);
      t1 = tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, t1), toObj, type$.CborTagValue_CborListValue_CborObject);
      return new A._DecodeCborResult(t1, consumed, type$._DecodeCborResult_CborObject);
    },
    CborUtils__decodeDynamicArray(cborBytes, info, offset, tags) {
      var t1, consomed, t2, decodeData, toObj,
        objects = A._setArrayType([], type$.JSArray_CborObject);
      for (t1 = J.getInterceptor$asx(cborBytes), consomed = 1; t2 = consomed + offset, t1.$index(cborBytes, t2) !== 255;) {
        decodeData = A.CborUtils__decode(cborBytes, t2);
        B.JSArray_methods.add$1(objects, decodeData.value);
        consomed += decodeData.consumed;
      }
      toObj = new A.CborListValue(objects, false, type$.CborListValue_CborObject);
      t1 = tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toObj, type$.CborTagValue_CborListValue_CborObject);
      return new A._DecodeCborResult(t1, consomed + 1, type$._DecodeCborResult_CborObject);
    },
    CborUtils__decodeCborBigfloatOrDecimal(objects, tags) {
      var t2, t3, toObj,
        t1 = type$.WhereTypeIterable_CborNumeric;
      objects = A.List_List$_of(new A.WhereTypeIterable(objects, t1), t1._eval$1("Iterable.E"));
      if (objects.length !== 2)
        throw A.wrapException(B.CborException_SJF);
      if (A.BytesUtils_bytesEqual(tags, B.List_4)) {
        B.JSArray_methods.clear$0(tags);
        t1 = objects.length;
        if (0 >= t1)
          return A.ioore(objects, 0);
        t2 = type$.CborNumeric;
        t3 = t2._as(objects[0]);
        if (1 >= t1)
          return A.ioore(objects, 1);
        t2 = t2._as(objects[1]);
        toObj = new A.CborDecimalFracValue(A.CborNumeric_getCborNumericValue(t3), A.CborNumeric_getCborNumericValue(t2));
        return tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toObj, type$.CborTagValue_CborDecimalFracValue);
      }
      B.JSArray_methods.clear$0(tags);
      t1 = objects.length;
      if (0 >= t1)
        return A.ioore(objects, 0);
      t2 = type$.CborNumeric;
      t3 = t2._as(objects[0]);
      if (1 >= t1)
        return A.ioore(objects, 1);
      t2 = t2._as(objects[1]);
      toObj = new A.CborBigFloatValue(A.CborNumeric_getCborNumericValue(t3), A.CborNumeric_getCborNumericValue(t2));
      return tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toObj, type$.CborTagValue_CborBigFloatValue);
    },
    CborUtils__parseSimpleValue(bytes, info, offset, tags) {
      var obj, t1, elementSize, end, int16Bits, sign, exponent, fraction, value, val, consumed, dt;
      switch (info) {
        case 20:
          obj = B.CborBoleanValue_false;
          break;
        case 21:
          obj = B.CborBoleanValue_true;
          break;
        case 22:
          obj = B.C_CborNullValue;
          break;
        case 23:
          obj = B.C_CborUndefinedValue;
          break;
        default:
          obj = null;
      }
      if (obj != null) {
        if (tags.length === 0)
          return new A._DecodeCborResult(obj, 1, type$._DecodeCborResult_CborObject);
        return new A._DecodeCborResult(new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), obj, type$.CborTagValue_CborObject), 1, type$._DecodeCborResult_CborObject);
      }
      ++offset;
      switch (info) {
        case 25:
          t1 = J.sublist$2$ax(bytes, offset, offset + 2);
          if (t1.length !== 2)
            A.throwExpression(B.CborException_gYX);
          t1 = new Uint8Array(A._ensureNativeList(t1));
          elementSize = t1.BYTES_PER_ELEMENT;
          end = A.RangeError_checkValidRange(0, null, B.JSInt_methods.$tdiv(t1.byteLength, elementSize));
          int16Bits = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(t1), t1.byteOffset + 0 * elementSize, end * elementSize).getInt16(0, false);
          sign = B.JSInt_methods._shrOtherPositive$1(int16Bits, 15) & 1;
          exponent = B.JSInt_methods._shrOtherPositive$1(int16Bits, 10) & 31;
          fraction = int16Bits & 1023;
          if (exponent === 31)
            if (fraction === 0)
              value = sign === 0 ? 1 / 0 : -1 / 0;
            else
              value = 0 / 0;
          else if (exponent === 0 && fraction === 0)
            value = sign === 0 ? 0 : -0.0;
          else {
            value = sign === 0 ? 1 : -1;
            value *= (1 + fraction / 1024) * Math.pow(2, exponent - 15);
          }
          val = value;
          consumed = 3;
          break;
        case 26:
          val = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(new Uint8Array(A._ensureNativeList(J.sublist$2$ax(bytes, offset, offset + 4)))), 0, null).getFloat32(0, false);
          consumed = 5;
          break;
        case 27:
          val = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(new Uint8Array(A._ensureNativeList(J.sublist$2$ax(bytes, offset, offset + 8)))), 0, null).getFloat64(0, false);
          consumed = 9;
          break;
        default:
          throw A.wrapException(B.CborException_6h4);
      }
      if (A.BytesUtils_bytesEqual(tags, B.List_1)) {
        dt = A.DateTime$fromMillisecondsSinceEpoch(B.JSNumber_methods.round$0(val * 1000));
        B.JSArray_methods.clear$0(tags);
        obj = new A.CborEpochFloatValue(dt);
      }
      if (obj == null)
        obj = new A.CborFloatValue(val);
      t1 = tags.length === 0 ? obj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), obj, type$.CborTagValue_CborObject);
      return new A._DecodeCborResult(t1, consumed, type$._DecodeCborResult_CborObject);
    },
    CborUtils__parseInt(cborBytes, info, mt, offset, tags) {
      var val, numericValue, dt, toObj, t1,
        data = A.CborUtils__decodeLength(info, cborBytes, offset, type$.dynamic),
        numb = data.value;
      if (numb instanceof A._BigIntImpl || mt === 1) {
        val = A.BigintUtils_parse(numb, true);
        if (mt === 1)
          val = val.$not(0);
        numericValue = val.get$isValidInt() ? new A.CborIntValue(val.toInt$0(0)) : null;
        if (numericValue == null)
          numericValue = new A.CborSafeIntValue(val);
      } else
        numericValue = new A.CborIntValue(A._asInt(numb));
      if (A.BytesUtils_bytesEqual(tags, B.List_1)) {
        dt = A.DateTime$fromMillisecondsSinceEpoch(numericValue.toInt$0(0) * 1000);
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborEpochIntValue(dt);
        t1 = tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toObj, type$.CborTagValue_CborEpochIntValue);
        return new A._DecodeCborResult(t1, data.consumed, type$._DecodeCborResult_CborObject);
      }
      t1 = tags.length === 0 ? numericValue : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), numericValue, type$.CborTagValue_CborNumeric);
      return new A._DecodeCborResult(t1, data.consumed, type$._DecodeCborResult_CborObject);
    },
    _DecodeCborResult: function _DecodeCborResult(t0, t1, t2) {
      this.value = t0;
      this.consumed = t1;
      this.$ti = t2;
    },
    CborUtils__decodeUtf8String_closure: function CborUtils__decodeUtf8String_closure() {
    },
    CborUtils__toStringObject_closure: function CborUtils__toStringObject_closure(t0) {
      this.tags = t0;
    },
    CborUtils__toStringObject_closure0: function CborUtils__toStringObject_closure0(t0) {
      this.tags = t0;
    },
    CborUtils__decodeBytesString_closure: function CborUtils__decodeBytesString_closure() {
    },
    CborBytesTracker: function CborBytesTracker(t0) {
      this._buffer = t0;
    },
    FloatUtils__decodeBits(bits) {
      var mantissa, exponent,
        mantissaBits = (bits & -1) >>> 0,
        exponentBits = B.JSInt_methods._shrBothPositive$1(bits, 52) & 2047,
        t1 = B.JSInt_methods._shrBothPositive$1(bits, 63);
      if (exponentBits === 0) {
        mantissa = mantissaBits;
        exponent = -1074;
      } else {
        exponent = exponentBits - 1023 - 52;
        mantissa = (mantissaBits | 0) >>> 0;
      }
      if (t1 !== 0)
        mantissa = -mantissa;
      while (true) {
        if (!((mantissa & 1) === 0 && mantissa !== 0))
          break;
        mantissa = B.JSInt_methods._shrOtherPositive$1(mantissa, 1);
        ++exponent;
      }
      return new A.Tuple(mantissa, exponent, type$.Tuple_int_int);
    },
    FloatUtils__toBits(value, endian) {
      var t1, bits, _i,
        toBytes = J.asUint8List$0$x(B.NativeFloat64List_methods.get$buffer(new Float64Array(A._ensureNativeList(A._setArrayType([value], type$.JSArray_double)))));
      toBytes = A.List_List$from(new A.ReversedListIterable(toBytes, A.instanceType(toBytes)._eval$1("ReversedListIterable<ListBase.E>")), false, type$.int);
      for (t1 = toBytes.length, bits = 0, _i = 0; _i < t1; ++_i)
        bits = (bits << 8 | toBytes[_i]) >>> 0;
      return bits;
    },
    FloatUtils__isLessThan(value) {
      var bits;
      if (isNaN(value) || value == 1 / 0 || value == -1 / 0)
        return B.Tuple_true_true;
      bits = A.FloatUtils__toBits(value, null);
      if (A.FloatUtils__dobuleLessThan(bits, B.FloatLength_5_10))
        return B.Tuple_true_true;
      if (A.FloatUtils__dobuleLessThan(bits, B.FloatLength_8_23))
        return B.Tuple_false_true;
      return B.Tuple_false_false;
    },
    FloatUtils__dobuleLessThan(bits, type) {
      var t3, t4, exponent, subnormalMantissaLength,
        mantissaBitLength = type.mantissaBitLength,
        exponentBitLength = type.exponentBitLength,
        exponentBias = B.JSInt_methods.$shl(1, exponentBitLength - 1) - 1,
        de = A.FloatUtils__decodeBits(bits),
        t1 = de.item1,
        t2 = J.getInterceptor$(t1);
      if (t2.$eq(t1, 0))
        return true;
      t3 = mantissaBitLength + 1;
      if (t3 < t2.get$bitLength(t1))
        return false;
      t4 = de.item2;
      if (typeof t4 !== "number")
        return t4.$add();
      exponent = t4 + mantissaBitLength + exponentBias + (t2.get$bitLength(t1) - t3);
      if (exponent >= B.JSInt_methods._shlPositive$1(1, exponentBitLength) - 1)
        return false;
      if (exponent >= 1)
        return true;
      subnormalMantissaLength = t2.get$bitLength(t1) + t4 - -(exponentBias - 1 + mantissaBitLength);
      return subnormalMantissaLength > 0 && subnormalMantissaLength <= mantissaBitLength;
    },
    FloatLength: function FloatLength(t0, t1) {
      this.exponentBitLength = t0;
      this.mantissaBitLength = t1;
    },
    FloatUtils: function FloatUtils(t0) {
      this.value = t0;
      this.__FloatUtils__isLess_FI = $;
    },
    AES$(key) {
      var t2, t3,
        t1 = new A.AES();
      t1.__AES__keyLen_A = 32;
      type$.List_int._as(key);
      t2 = type$.int;
      t3 = A.List_List$filled(60, 0, false, t2);
      t1._encKey = t3;
      t2 = t1._decKey = A.List_List$filled(60, 0, false, t2);
      $.$get$AES__lib().expandKey$3(key, t3, t2);
      return t1;
    },
    AES: function AES() {
      this.__AES__keyLen_A = $;
      this._decKey = this._encKey = null;
    },
    AESLib: function AESLib(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._te0 = t0;
      _._te1 = t1;
      _._te2 = t2;
      _._te3 = t3;
      _._td0 = t4;
      _._td1 = t5;
      _._td2 = t6;
      _._td3 = t7;
    },
    AESLib_initialize_mul: function AESLib_initialize_mul() {
    },
    AESLib_initialize_r24: function AESLib_initialize_r24() {
    },
    CurveFp$(a, b, h, p) {
      return new A.CurveFp(p, a, b, h);
    },
    CurveFp: function CurveFp(t0, t1, t2, t3) {
      var _ = this;
      _.p = t0;
      _.a = t1;
      _.b = t2;
      _.h = t3;
    },
    CurveED: function CurveED(t0, t1, t2, t3) {
      var _ = this;
      _.p = t0;
      _.a = t1;
      _.d = t2;
      _.h = t3;
    },
    Curve: function Curve() {
    },
    ECDSAPublicKey_ECDSAPublicKey(generator, point) {
      var t2, t3, leftSide,
        curve = generator.curve,
        n = generator.order,
        p = curve.p,
        t1 = $.$get$_BigIntImpl_zero();
      if (t1.compareTo$1(0, point.get$x()) <= 0 && point.get$x().compareTo$1(0, p) < 0)
        t2 = !(t1.compareTo$1(0, point.get$y()) <= 0 && point.get$y().compareTo$1(0, p) < 0);
      else
        t2 = true;
      if (t2)
        throw A.wrapException(B.CryptoException_5Ft);
      t2 = point.get$x();
      t3 = point.get$y();
      leftSide = t3.$mul(0, t3).$sub(0, t2.$mul(0, t2).$add(0, curve.a).$mul(0, t2).$add(0, curve.b)).$mod(0, p);
      t1 = leftSide.compareTo$1(0, t1);
      t1 = t1 !== 0;
      if (t1)
        throw A.wrapException(B.CryptoException_6hD);
      if (n == null)
        throw A.wrapException(B.CryptoException_hzd);
      t1 = curve.h.compareTo$1(0, $.$get$_BigIntImpl_one());
      t1 = t1 !== 0 && !point.$mul(0, n).get$isInfinity();
      if (t1)
        throw A.wrapException(B.CryptoException_Hdq);
      return new A.ECDSAPublicKey(generator, point);
    },
    ECDSAPublicKey: function ECDSAPublicKey(t0, t1) {
      this.generator = t0;
      this.point = t1;
    },
    EDDSAPrivateKey: function EDDSAPrivateKey(t0, t1) {
      this.generator = t0;
      this.key = t1;
    },
    EDDSAPublicKey_EDDSAPublicKey$fromPoint(generator, publicPoint) {
      var baselen = B.JSInt_methods._tdivFast$1(generator.curve.p.get$bitLength(0) + 1 + 7, 8),
        pubkeyBytes = publicPoint.toBytes$0();
      if (pubkeyBytes.length !== baselen)
        throw A.wrapException(A.CryptoException$("Incorrect size of the public key, expected: " + baselen + " bytes", null));
      A.BytesUtils_validateListOfBytes(pubkeyBytes);
      return new A.EDDSAPublicKey(generator, A.List_List$unmodifiable(pubkeyBytes, type$.int));
    },
    EDDSAPublicKey: function EDDSAPublicKey(t0, t1) {
      this.generator = t0;
      this._encoded = t1;
    },
    AbstractPoint_fromBytes(curve, data) {
      var p, expLen, t1, t2, y, x, keyLen, rawEncodingLength, encodeType, prefix, result;
      if (curve instanceof A.CurveED) {
        data = A.List_List$from(data, true, type$.int);
        p = curve.p;
        expLen = B.JSInt_methods._tdivFast$1(p.get$bitLength(0) + 1 + 7, 8);
        t1 = data.length;
        if (t1 !== expLen)
          A.throwExpression(B.CryptoException_997);
        t2 = expLen - 1;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(data, t2);
        t1 = data[t2];
        B.JSArray_methods.$indexSet(data, t2, t1 & 127);
        y = A.BigintUtils_fromBytes(data, B.C_Endian0, false);
        x = A.ECDSAUtils_modularSquareRootPrime(y.$mul(0, y).$sub(0, A._BigIntImpl__BigIntImpl$from(1)).$mul(0, A.BigintUtils_inverseMod(curve.d.$mul(0, y).$mul(0, y).$sub(0, curve.a), p)).$mod(0, p), p);
        if (!x.get$isEven(0) !== ((t1 >>> 7 & 1) === 1))
          x = x.$negate(0).$mod(0, p);
        return new A.Tuple(x, y, type$.Tuple_BigInt_BigInt);
      }
      keyLen = data.length;
      rawEncodingLength = 2 * A.BigintUtils_orderLen(curve.get$p());
      if (keyLen === rawEncodingLength)
        encodeType = B.EncodeType_2;
      else if (keyLen === rawEncodingLength + 1) {
        if (0 >= data.length)
          return A.ioore(data, 0);
        prefix = data[0];
        if (prefix === 4)
          encodeType = B.EncodeType_3;
        else {
          if (!(prefix === 6 || prefix === 7))
            throw A.wrapException(B.CryptoException_Pc3);
          encodeType = B.EncodeType_1;
        }
      } else {
        if (keyLen !== B.JSInt_methods._tdivFast$1(rawEncodingLength, 2) + 1)
          throw A.wrapException(B.CryptoException_Pc3);
        encodeType = B.EncodeType_0;
      }
      type$.CurveFp._as(curve);
      switch (encodeType) {
        case B.EncodeType_0:
          return A.AbstractPoint__fromCompressed(data, curve);
        case B.EncodeType_3:
          return A.AbstractPoint__fromRawEncoding(B.JSArray_methods.sublist$1(data, 1), rawEncodingLength);
        case B.EncodeType_1:
          result = A.AbstractPoint__fromRawEncoding(B.JSArray_methods.sublist$1(data, 1), rawEncodingLength);
          y = result.item2;
          t1 = $.$get$_BigIntImpl_one();
          prefix = y.$and(0, t1);
          t1 = prefix.compareTo$1(0, t1);
          if (t1 === 0) {
            if (0 >= data.length)
              return A.ioore(data, 0);
            t1 = data[0] !== 7;
          } else
            t1 = false;
          if (!t1) {
            t1 = prefix.compareTo$1(0, $.$get$_BigIntImpl_zero());
            if (t1 === 0) {
              if (0 >= data.length)
                return A.ioore(data, 0);
              t1 = data[0] !== 6;
            } else
              t1 = false;
          } else
            t1 = true;
          if (t1)
            A.throwExpression(B.CryptoException_Tbk);
          return new A.Tuple(result.item1, y, type$.Tuple_BigInt_BigInt);
        default:
          return A.AbstractPoint__fromRawEncoding(data, rawEncodingLength);
      }
    },
    AbstractPoint__fromRawEncoding(data, rawEncodingLength) {
      var t1 = B.JSInt_methods._tdivFast$1(rawEncodingLength, 2),
        xs = B.JSArray_methods.sublist$2(data, 0, t1),
        ys = B.JSArray_methods.sublist$1(data, t1);
      return new A.Tuple(A.BigintUtils_fromBytes(xs, B.C_Endian, false), A.BigintUtils_fromBytes(ys, B.C_Endian, false), type$.Tuple_BigInt_BigInt);
    },
    AbstractPoint__fromCompressed(data, curve) {
      var t1, t2, x, p, beta, t3;
      if (0 >= data.length)
        return A.ioore(data, 0);
      t1 = data[0];
      t2 = t1 === 2;
      if (!t2 && t1 !== 3)
        throw A.wrapException(B.CryptoException_RFf);
      x = A.BigintUtils_fromBytes(B.JSArray_methods.sublist$1(data, 1), B.C_Endian, false);
      p = curve.p;
      beta = A.ECDSAUtils_modularSquareRootPrime(x.modPow$2(0, A._BigIntImpl__BigIntImpl$from(3), p).$add(0, curve.a.$mul(0, x)).$add(0, curve.b).$mod(0, p), p);
      t1 = beta.$and(0, $.$get$_BigIntImpl_one()).compareTo$1(0, $.$get$_BigIntImpl_zero());
      t3 = type$.Tuple_BigInt_BigInt;
      if (t2 === (t1 !== 0))
        return new A.Tuple(x, p.$sub(0, beta), t3);
      else
        return new A.Tuple(x, beta, t3);
    },
    EncodeType: function EncodeType(t0) {
      this._name = t0;
    },
    AbstractPoint: function AbstractPoint() {
    },
    ProjectiveECCPoint_ProjectiveECCPoint(curve, generator, order, x, y, z) {
      var coords = A._setArrayType([x, y, z], type$.JSArray_BigInt);
      return new A.ProjectiveECCPoint(curve, order, generator && order != null, B.List_empty14, coords);
    },
    ProjectiveECCPoint_ProjectiveECCPoint$fromBytes(curve, data, order) {
      var coords = A.AbstractPoint_fromBytes(curve, data);
      coords = A._setArrayType([coords.item1, coords.item2, $.$get$_BigIntImpl_one()], type$.JSArray_BigInt);
      return new A.ProjectiveECCPoint(curve, order, false, B.List_empty14, coords);
    },
    ProjectiveECCPoint: function ProjectiveECCPoint(t0, t1, t2, t3, t4) {
      var _ = this;
      _.curve = t0;
      _.order = t1;
      _.generator = t2;
      _._precompute = t3;
      _._coords = t4;
    },
    EDPoint$(curve, generator, order, t, x, y, z) {
      return new A.EDPoint(curve, order, generator, B.List_empty14, A._setArrayType([x, y, z, t], type$.JSArray_BigInt));
    },
    EDPoint: function EDPoint(t0, t1, t2, t3, t4) {
      var _ = this;
      _.curve = t0;
      _.order = t1;
      _.generator = t2;
      _._edwards$_precompute = t3;
      _._edwards$_coords = t4;
    },
    RistrettoPoint_RistrettoPoint$fromEdwardsPoint(point) {
      var t2, t3, t4,
        coords = A.List_List$from(point._edwards$_coords, true, type$.BigInt),
        t1 = coords.length;
      if (0 >= t1)
        return A.ioore(coords, 0);
      t2 = coords[0];
      if (1 >= t1)
        return A.ioore(coords, 1);
      t3 = coords[1];
      if (2 >= t1)
        return A.ioore(coords, 2);
      t4 = coords[2];
      if (3 >= t1)
        return A.ioore(coords, 3);
      return new A.RistrettoPoint(point.curve, point.order, false, B.List_empty14, A._setArrayType([t2, t3, t4, coords[3]], type$.JSArray_BigInt));
    },
    RistrettoPoint: function RistrettoPoint(t0, t1, t2, t3, t4) {
      var _ = this;
      _.curve = t0;
      _.order = t1;
      _.generator = t2;
      _._edwards$_precompute = t3;
      _._edwards$_coords = t4;
    },
    ChaCha20Poly1305$(key) {
      var t2,
        t1 = new A.ChaCha20Poly1305();
      if (J.get$length$asx(key) !== 32)
        A.throwExpression(B.CryptoException_oAd);
      t2 = A.ListHelper_clone(key, type$.int);
      A.BytesUtils_validateListOfBytes(t2);
      t1.__ChaCha20Poly1305__key_A = type$.List_int._as(t2);
      return t1;
    },
    ChaCha20Poly1305: function ChaCha20Poly1305() {
      this.__ChaCha20Poly1305__key_A = $;
    },
    CTR$(cipher, iv) {
      var t1 = new A.CTR(),
        t2 = type$.int,
        t3 = type$.List_int,
        t4 = t3._as(A.List_List$filled(16, 0, false, t2));
      t1.__CTR__counter_F = t4;
      t2 = t3._as(A.List_List$filled(16, 0, false, t2));
      t1.__CTR__buffer_F = t2;
      type$.nullable_List_int._as(iv);
      if (16 !== t4.length)
        A.throwExpression(B.CryptoException_ULN);
      t1._cipher = cipher;
      B.JSArray_methods.setAll$2(t4, 0, iv);
      t1._bufpos = t2.length;
      return t1;
    },
    _incrementCounter(counter) {
      var i, carry;
      for (i = counter.length - 1, carry = 1; i >= 0; --i) {
        carry += counter[i] & 255;
        B.JSArray_methods.$indexSet(counter, i, carry & 255);
        carry = carry >>> 8;
      }
      if (carry > 0)
        throw A.wrapException(B.CryptoException_TXP);
    },
    CTR: function CTR() {
      var _ = this;
      _.__CTR__buffer_F = _.__CTR__counter_F = $;
      _._bufpos = 0;
      _._cipher = null;
    },
    CryptoException$(message, details) {
      return new A.CryptoException(message, details);
    },
    CryptoException: function CryptoException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    SquareRootError: function SquareRootError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    JacobiError: function JacobiError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    BLAKE2b$(config, digestLength) {
      var t1 = type$.int,
        t2 = A.List_List$from($.$get$_iv(), false, t1),
        t3 = new A.BLAKE2b(t2, A.List_List$filled(128, 0, false, t1), A.List_List$filled(4, 0, false, t1), A.List_List$filled(4, 0, false, t1), A.List_List$filled(32, 0, false, t1), A.List_List$filled(32, 0, false, t1));
      if (digestLength < 1 || digestLength > 64)
        A.throwExpression(B.CryptoException_HYf);
      t3.__BLAKE2b_getDigestLength_F = digestLength;
      if (0 >= t2.length)
        return A.ioore(t2, 0);
      B.JSArray_methods.$indexSet(t2, 0, (t2[0] ^ (digestLength | 16842752)) >>> 0);
      t3.__BLAKE2b__initialState_A = type$.List_int._as(A.List_List$from(t2, false, t1));
      return t3;
    },
    _keccakf(sh, sl, buf) {
      var i, t1, r, bch0, bch1, bch2, bch3, bch4, bcl0, bcl1, bcl2, bcl3, bcl4, th, tl, bch00, bcl00, t2;
      for (i = 0; i < 25; ++i) {
        t1 = i * 8;
        B.JSArray_methods.$indexSet(sl, i, A.readUint32LE(buf, t1));
        B.JSArray_methods.$indexSet(sh, i, A.readUint32LE(buf, t1 + 4));
      }
      for (r = 0; r < 24; ++r) {
        t1 = sh[0];
        bch0 = t1 ^ sh[5] ^ sh[10] ^ sh[15] ^ sh[20];
        bch1 = sh[1] ^ sh[6] ^ sh[11] ^ sh[16] ^ sh[21];
        bch2 = sh[2] ^ sh[7] ^ sh[12] ^ sh[17] ^ sh[22];
        bch3 = sh[3] ^ sh[8] ^ sh[13] ^ sh[18] ^ sh[23];
        bch4 = sh[4] ^ sh[9] ^ sh[14] ^ sh[19] ^ sh[24];
        bcl0 = sl[0] ^ sl[5] ^ sl[10] ^ sl[15] ^ sl[20];
        bcl1 = sl[1] ^ sl[6] ^ sl[11] ^ sl[16] ^ sl[21];
        bcl2 = sl[2] ^ sl[7] ^ sl[12] ^ sl[17] ^ sl[22];
        bcl3 = sl[3] ^ sl[8] ^ sl[13] ^ sl[18] ^ sl[23];
        bcl4 = sl[4] ^ sl[9] ^ sl[14] ^ sl[19] ^ sl[24];
        th = bch4 ^ (bch1 << 1 | bcl1 >>> 31);
        tl = bcl4 ^ (bcl1 << 1 | bch1 >>> 31);
        B.JSArray_methods.$indexSet(sh, 0, (t1 ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 5, (sh[5] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 10, (sh[10] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 15, (sh[15] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 20, (sh[20] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 0, (sl[0] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 5, (sl[5] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 10, (sl[10] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 15, (sl[15] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 20, (sl[20] ^ tl) >>> 0);
        th = bch0 ^ (bch2 << 1 | bcl2 >>> 31);
        tl = bcl0 ^ (bcl2 << 1 | bch2 >>> 31);
        B.JSArray_methods.$indexSet(sh, 1, (sh[1] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 6, (sh[6] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 11, (sh[11] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 16, (sh[16] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 21, (sh[21] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 1, (sl[1] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 6, (sl[6] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 11, (sl[11] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 16, (sl[16] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 21, (sl[21] ^ tl) >>> 0);
        th = bch1 ^ (bch3 << 1 | bcl3 >>> 31);
        tl = bcl1 ^ (bcl3 << 1 | bch3 >>> 31);
        B.JSArray_methods.$indexSet(sh, 2, (sh[2] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 7, (sh[7] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 12, (sh[12] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 17, (sh[17] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 22, (sh[22] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 2, (sl[2] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 7, (sl[7] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 12, (sl[12] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 17, (sl[17] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 22, (sl[22] ^ tl) >>> 0);
        th = bch2 ^ (bch4 << 1 | bcl4 >>> 31);
        tl = bcl2 ^ (bcl4 << 1 | bch4 >>> 31);
        B.JSArray_methods.$indexSet(sh, 3, (sh[3] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 3, (sl[3] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sh, 8, (sh[8] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 8, (sl[8] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sh, 13, (sh[13] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 13, (sl[13] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sh, 18, (sh[18] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 18, (sl[18] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sh, 23, (sh[23] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 23, (sl[23] ^ tl) >>> 0);
        th = bch3 ^ (bch0 << 1 | bcl0 >>> 31);
        tl = bcl3 ^ (bcl0 << 1 | bch0 >>> 31);
        B.JSArray_methods.$indexSet(sh, 4, (sh[4] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 9, (sh[9] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 14, (sh[14] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 19, (sh[19] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 24, (sh[24] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 4, (sl[4] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 9, (sl[9] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 14, (sl[14] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 19, (sl[19] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 24, (sl[24] ^ tl) >>> 0);
        th = sh[1];
        tl = sl[1];
        bch0 = sh[10];
        bcl0 = sl[10];
        B.JSArray_methods.$indexSet(sh, 10, (th << 1 | tl >>> 31) >>> 0);
        B.JSArray_methods.$indexSet(sl, 10, (tl << 1 | th >>> 31) >>> 0);
        bch00 = sh[7];
        bcl00 = sl[7];
        B.JSArray_methods.$indexSet(sh, 7, (bch0 << 3 | bcl0 >>> 29) >>> 0);
        B.JSArray_methods.$indexSet(sl, 7, (bcl0 << 3 | bch0 >>> 29) >>> 0);
        bch0 = sh[11];
        bcl0 = sl[11];
        B.JSArray_methods.$indexSet(sh, 11, (bch00 << 6 | bcl00 >>> 26) >>> 0);
        B.JSArray_methods.$indexSet(sl, 11, (bcl00 << 6 | bch00 >>> 26) >>> 0);
        bch00 = sh[17];
        bcl00 = sl[17];
        B.JSArray_methods.$indexSet(sh, 17, (bch0 << 10 | bcl0 >>> 22) >>> 0);
        B.JSArray_methods.$indexSet(sl, 17, (bcl0 << 10 | bch0 >>> 22) >>> 0);
        bch0 = sh[18];
        bcl0 = sl[18];
        B.JSArray_methods.$indexSet(sh, 18, (bch00 << 15 | bcl00 >>> 17) >>> 0);
        B.JSArray_methods.$indexSet(sl, 18, (bcl00 << 15 | bch00 >>> 17) >>> 0);
        bch00 = sh[3];
        bcl00 = sl[3];
        B.JSArray_methods.$indexSet(sh, 3, (bch0 << 21 | bcl0 >>> 11) >>> 0);
        B.JSArray_methods.$indexSet(sl, 3, (bcl0 << 21 | bch0 >>> 11) >>> 0);
        bch0 = sh[5];
        bcl0 = sl[5];
        B.JSArray_methods.$indexSet(sh, 5, (bch00 << 28 | bcl00 >>> 4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 5, (bcl00 << 28 | bch00 >>> 4) >>> 0);
        bch00 = sh[16];
        bcl00 = sl[16];
        B.JSArray_methods.$indexSet(sh, 16, (bcl0 << 4 | bch0 >>> 28) >>> 0);
        B.JSArray_methods.$indexSet(sl, 16, (bch0 << 4 | bcl0 >>> 28) >>> 0);
        bch0 = sh[8];
        bcl0 = sl[8];
        B.JSArray_methods.$indexSet(sh, 8, (bcl00 << 13 | bch00 >>> 19) >>> 0);
        B.JSArray_methods.$indexSet(sl, 8, (bch00 << 13 | bcl00 >>> 19) >>> 0);
        bch00 = sh[21];
        bcl00 = sl[21];
        B.JSArray_methods.$indexSet(sh, 21, (bcl0 << 23 | bch0 >>> 9) >>> 0);
        B.JSArray_methods.$indexSet(sl, 21, (bch0 << 23 | bcl0 >>> 9) >>> 0);
        bch0 = sh[24];
        bcl0 = sl[24];
        B.JSArray_methods.$indexSet(sh, 24, (bch00 << 2 | bcl00 >>> 30) >>> 0);
        B.JSArray_methods.$indexSet(sl, 24, (bcl00 << 2 | bch00 >>> 30) >>> 0);
        bch00 = sh[4];
        bcl00 = sl[4];
        B.JSArray_methods.$indexSet(sh, 4, (bch0 << 14 | bcl0 >>> 18) >>> 0);
        B.JSArray_methods.$indexSet(sl, 4, (bcl0 << 14 | bch0 >>> 18) >>> 0);
        bch0 = sh[15];
        bcl0 = sl[15];
        B.JSArray_methods.$indexSet(sh, 15, (bch00 << 27 | bcl00 >>> 5) >>> 0);
        B.JSArray_methods.$indexSet(sl, 15, (bcl00 << 27 | bch00 >>> 5) >>> 0);
        bch00 = sh[23];
        bcl00 = sl[23];
        B.JSArray_methods.$indexSet(sh, 23, (bcl0 << 9 | bch0 >>> 23) >>> 0);
        B.JSArray_methods.$indexSet(sl, 23, (bch0 << 9 | bcl0 >>> 23) >>> 0);
        bch0 = sh[19];
        bcl0 = sl[19];
        B.JSArray_methods.$indexSet(sh, 19, (bcl00 << 24 | bch00 >>> 8) >>> 0);
        B.JSArray_methods.$indexSet(sl, 19, (bch00 << 24 | bcl00 >>> 8) >>> 0);
        bch00 = sh[13];
        bcl00 = sl[13];
        B.JSArray_methods.$indexSet(sh, 13, (bch0 << 8 | bcl0 >>> 24) >>> 0);
        B.JSArray_methods.$indexSet(sl, 13, (bcl0 << 8 | bch0 >>> 24) >>> 0);
        bch0 = sh[12];
        bcl0 = sl[12];
        B.JSArray_methods.$indexSet(sh, 12, (bch00 << 25 | bcl00 >>> 7) >>> 0);
        B.JSArray_methods.$indexSet(sl, 12, (bcl00 << 25 | bch00 >>> 7) >>> 0);
        bch00 = sh[2];
        bcl00 = sl[2];
        B.JSArray_methods.$indexSet(sh, 2, (bcl0 << 11 | bch0 >>> 21) >>> 0);
        B.JSArray_methods.$indexSet(sl, 2, (bch0 << 11 | bcl0 >>> 21) >>> 0);
        bch0 = sh[20];
        bcl0 = sl[20];
        B.JSArray_methods.$indexSet(sh, 20, (bcl00 << 30 | bch00 >>> 2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 20, (bch00 << 30 | bcl00 >>> 2) >>> 0);
        bch00 = sh[14];
        bcl00 = sl[14];
        B.JSArray_methods.$indexSet(sh, 14, (bch0 << 18 | bcl0 >>> 14) >>> 0);
        B.JSArray_methods.$indexSet(sl, 14, (bcl0 << 18 | bch0 >>> 14) >>> 0);
        bch0 = sh[22];
        bcl0 = sl[22];
        B.JSArray_methods.$indexSet(sh, 22, (bcl00 << 7 | bch00 >>> 25) >>> 0);
        B.JSArray_methods.$indexSet(sl, 22, (bch00 << 7 | bcl00 >>> 25) >>> 0);
        bch00 = sh[9];
        bcl00 = sl[9];
        B.JSArray_methods.$indexSet(sh, 9, (bcl0 << 29 | bch0 >>> 3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 9, (bch0 << 29 | bcl0 >>> 3) >>> 0);
        bch0 = sh[6];
        bcl0 = sl[6];
        B.JSArray_methods.$indexSet(sh, 6, (bch00 << 20 | bcl00 >>> 12) >>> 0);
        B.JSArray_methods.$indexSet(sl, 6, (bcl00 << 20 | bch00 >>> 12) >>> 0);
        B.JSArray_methods.$indexSet(sh, 1, (bcl0 << 12 | bch0 >>> 20) >>> 0);
        B.JSArray_methods.$indexSet(sl, 1, (bch0 << 12 | bcl0 >>> 20) >>> 0);
        bch0 = sh[0];
        bch1 = sh[1];
        bch2 = sh[2];
        bch3 = sh[3];
        bch4 = sh[4];
        B.JSArray_methods.$indexSet(sh, 0, (bch0 ^ ~bch1 & bch2) >>> 0);
        B.JSArray_methods.$indexSet(sh, 1, (sh[1] ^ ~bch2 & bch3) >>> 0);
        B.JSArray_methods.$indexSet(sh, 2, (sh[2] ^ ~bch3 & bch4) >>> 0);
        B.JSArray_methods.$indexSet(sh, 3, (sh[3] ^ ~bch4 & bch0) >>> 0);
        B.JSArray_methods.$indexSet(sh, 4, (sh[4] ^ ~bch0 & bch1) >>> 0);
        bcl0 = sl[0];
        bcl1 = sl[1];
        bcl2 = sl[2];
        bcl3 = sl[3];
        bcl4 = sl[4];
        B.JSArray_methods.$indexSet(sl, 0, (bcl0 ^ ~bcl1 & bcl2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 1, (sl[1] ^ ~bcl2 & bcl3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 2, (sl[2] ^ ~bcl3 & bcl4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 3, (sl[3] ^ ~bcl4 & bcl0) >>> 0);
        B.JSArray_methods.$indexSet(sl, 4, (sl[4] ^ ~bcl0 & bcl1) >>> 0);
        bch0 = sh[5];
        bch1 = sh[6];
        bch2 = sh[7];
        bch3 = sh[8];
        bch4 = sh[9];
        B.JSArray_methods.$indexSet(sh, 5, (bch0 ^ ~bch1 & bch2) >>> 0);
        B.JSArray_methods.$indexSet(sh, 6, (sh[6] ^ ~bch2 & bch3) >>> 0);
        B.JSArray_methods.$indexSet(sh, 7, (sh[7] ^ ~bch3 & bch4) >>> 0);
        B.JSArray_methods.$indexSet(sh, 8, (sh[8] ^ ~bch4 & bch0) >>> 0);
        B.JSArray_methods.$indexSet(sh, 9, (sh[9] ^ ~bch0 & bch1) >>> 0);
        bcl0 = sl[5];
        bcl1 = sl[6];
        bcl2 = sl[7];
        bcl3 = sl[8];
        bcl4 = sl[9];
        B.JSArray_methods.$indexSet(sl, 5, (bcl0 ^ ~bcl1 & bcl2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 6, (sl[6] ^ ~bcl2 & bcl3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 7, (sl[7] ^ ~bcl3 & bcl4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 8, (sl[8] ^ ~bcl4 & bcl0) >>> 0);
        B.JSArray_methods.$indexSet(sl, 9, (sl[9] ^ ~bcl0 & bcl1) >>> 0);
        bch0 = sh[10];
        bch1 = sh[11];
        bch2 = sh[12];
        bch3 = sh[13];
        bch4 = sh[14];
        B.JSArray_methods.$indexSet(sh, 10, (bch0 ^ ~bch1 & bch2) >>> 0);
        B.JSArray_methods.$indexSet(sh, 11, (sh[11] ^ ~bch2 & bch3) >>> 0);
        B.JSArray_methods.$indexSet(sh, 12, (sh[12] ^ ~bch3 & bch4) >>> 0);
        B.JSArray_methods.$indexSet(sh, 13, (sh[13] ^ ~bch4 & bch0) >>> 0);
        B.JSArray_methods.$indexSet(sh, 14, (sh[14] ^ ~bch0 & bch1) >>> 0);
        bcl0 = sl[10];
        bcl1 = sl[11];
        bcl2 = sl[12];
        bcl3 = sl[13];
        bcl4 = sl[14];
        B.JSArray_methods.$indexSet(sl, 10, (bcl0 ^ ~bcl1 & bcl2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 11, (sl[11] ^ ~bcl2 & bcl3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 12, (sl[12] ^ ~bcl3 & bcl4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 13, (sl[13] ^ ~bcl4 & bcl0) >>> 0);
        B.JSArray_methods.$indexSet(sl, 14, (sl[14] ^ ~bcl0 & bcl1) >>> 0);
        bch0 = sh[15];
        bch1 = sh[16];
        bch2 = sh[17];
        bch3 = sh[18];
        bch4 = sh[19];
        B.JSArray_methods.$indexSet(sh, 15, (bch0 ^ ~bch1 & bch2) >>> 0);
        B.JSArray_methods.$indexSet(sh, 16, (sh[16] ^ ~bch2 & bch3) >>> 0);
        B.JSArray_methods.$indexSet(sh, 17, (sh[17] ^ ~bch3 & bch4) >>> 0);
        B.JSArray_methods.$indexSet(sh, 18, (sh[18] ^ ~bch4 & bch0) >>> 0);
        B.JSArray_methods.$indexSet(sh, 19, (sh[19] ^ ~bch0 & bch1) >>> 0);
        bcl0 = sl[15];
        bcl1 = sl[16];
        bcl2 = sl[17];
        bcl3 = sl[18];
        bcl4 = sl[19];
        B.JSArray_methods.$indexSet(sl, 15, (bcl0 ^ ~bcl1 & bcl2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 16, (sl[16] ^ ~bcl2 & bcl3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 17, (sl[17] ^ ~bcl3 & bcl4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 18, (sl[18] ^ ~bcl4 & bcl0) >>> 0);
        B.JSArray_methods.$indexSet(sl, 19, (sl[19] ^ ~bcl0 & bcl1) >>> 0);
        bch0 = sh[20];
        bch1 = sh[21];
        bch2 = sh[22];
        bch3 = sh[23];
        bch4 = sh[24];
        B.JSArray_methods.$indexSet(sh, 20, (bch0 ^ ~bch1 & bch2) >>> 0);
        B.JSArray_methods.$indexSet(sh, 21, (sh[21] ^ ~bch2 & bch3) >>> 0);
        B.JSArray_methods.$indexSet(sh, 22, (sh[22] ^ ~bch3 & bch4) >>> 0);
        B.JSArray_methods.$indexSet(sh, 23, (sh[23] ^ ~bch4 & bch0) >>> 0);
        B.JSArray_methods.$indexSet(sh, 24, (sh[24] ^ ~bch0 & bch1) >>> 0);
        bcl0 = sl[20];
        bcl1 = sl[21];
        bcl2 = sl[22];
        bcl3 = sl[23];
        bcl4 = sl[24];
        B.JSArray_methods.$indexSet(sl, 20, (bcl0 ^ ~bcl1 & bcl2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 21, (sl[21] ^ ~bcl2 & bcl3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 22, (sl[22] ^ ~bcl3 & bcl4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 23, (sl[23] ^ ~bcl4 & bcl0) >>> 0);
        B.JSArray_methods.$indexSet(sl, 24, (sl[24] ^ ~bcl0 & bcl1) >>> 0);
        t1 = sh[0];
        t2 = $.$get$_hi();
        if (!(r < t2.length))
          return A.ioore(t2, r);
        B.JSArray_methods.$indexSet(sh, 0, (t1 ^ t2[r]) >>> 0);
        t2 = sl[0];
        t1 = $.$get$_lo();
        if (!(r < t1.length))
          return A.ioore(t1, r);
        B.JSArray_methods.$indexSet(sl, 0, (t2 ^ t1[r]) >>> 0);
      }
      for (i = 0; i < 25; ++i) {
        t1 = i * 8;
        A.writeUint32LE(sl[i], buf, t1);
        A.writeUint32LE(sh[i], buf, t1 + 4);
      }
    },
    MD4__ff(x, y, z) {
      return (x & y | ~x & z) >>> 0;
    },
    MD4__gg(x, y, z) {
      return (x & y | x & z | y & z) >>> 0;
    },
    MD4__hh(x, y, z) {
      return (x ^ y ^ z) >>> 0;
    },
    _RidempUtils_T(i, bl, cl, dl) {
      if (i < 16)
        return (bl ^ cl ^ dl) >>> 0;
      if (i < 32)
        return ((bl & cl | ~bl & dl) >>> 0) + 1518500249 >>> 0;
      if (i < 48)
        return (((bl | ~cl) ^ dl) >>> 0) + 1859775393 >>> 0;
      if (i < 64)
        return ((bl & dl | cl & ~dl) >>> 0) + 2400959708 >>> 0;
      return ((bl ^ (cl | ~dl)) >>> 0) + 2840853838 >>> 0;
    },
    _RidempUtils_t64(i, br, cr, dr) {
      if (i < 16)
        return ((br & dr | cr & ~dr) >>> 0) + 1352829926 >>> 0;
      if (i < 32)
        return (((br | ~cr) ^ dr) >>> 0) + 1548603684 >>> 0;
      if (i < 48)
        return ((br & cr | ~br & dr) >>> 0) + 1836072691 >>> 0;
      return (br ^ cr ^ dr) >>> 0;
    },
    _RidempUtils_t80(i, br, cr, dr) {
      if (i < 16)
        return ((br ^ (cr | ~dr)) >>> 0) + 1352829926 >>> 0;
      if (i < 32)
        return ((br & dr | cr & ~dr) >>> 0) + 1548603684 >>> 0;
      if (i < 48)
        return (((br | ~cr) ^ dr) >>> 0) + 1836072691 >>> 0;
      if (i < 64)
        return ((br & cr | ~br & dr) >>> 0) + 2053994217 >>> 0;
      return (br ^ cr ^ dr) >>> 0;
    },
    _RidempUtils_readState(lengthInBytes) {
      var _3285377520 = 3285377520, _1985229328 = 1985229328, _4275878552 = 4275878552, _2309737967 = 2309737967,
        state = A.List_List$filled(B.JSInt_methods._tdivFast$1(lengthInBytes, 4), 0, false, type$.int);
      B.JSArray_methods.$indexSet(state, 0, 1732584193);
      B.JSArray_methods.$indexSet(state, 1, 4023233417);
      B.JSArray_methods.$indexSet(state, 2, 2562383102);
      B.JSArray_methods.$indexSet(state, 3, 271733878);
      switch (lengthInBytes) {
        case 20:
          B.JSArray_methods.$indexSet(state, 4, _3285377520);
          break;
        case 32:
          B.JSArray_methods.$indexSet(state, 4, _1985229328);
          B.JSArray_methods.$indexSet(state, 5, _4275878552);
          B.JSArray_methods.$indexSet(state, 6, _2309737967);
          B.JSArray_methods.$indexSet(state, 7, 19088743);
          break;
        case 40:
          B.JSArray_methods.$indexSet(state, 4, _3285377520);
          B.JSArray_methods.$indexSet(state, 5, _1985229328);
          B.JSArray_methods.$indexSet(state, 6, _4275878552);
          B.JSArray_methods.$indexSet(state, 7, _2309737967);
          B.JSArray_methods.$indexSet(state, 8, 19088743);
          B.JSArray_methods.$indexSet(state, 9, 1009589775);
          break;
      }
      return state;
    },
    SHA256_hash(data) {
      var out,
        t1 = type$.int,
        t2 = A.List_List$filled(8, 0, false, t1),
        t3 = A.List_List$filled(64, 0, false, t1),
        t4 = A.List_List$filled(128, 0, false, t1),
        h = new A.SHA256(t2, t3, t4, A.List_List$unmodifiable(B.List_H5O, t1));
      h.reset$0();
      h.update$1(data);
      out = A.List_List$filled(32, 0, false, t1);
      h.finish$1(out);
      A.zero(t4);
      A.zero(t3);
      h.reset$0();
      return out;
    },
    Blake2bConfig: function Blake2bConfig(t0, t1) {
      this.key = t0;
      this.salt = t1;
    },
    BLAKE2b: function BLAKE2b(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._hash$_state = t0;
      _._hash$_buffer = t1;
      _._bufferLength = 0;
      _._ctr = t2;
      _._flag = t3;
      _._hash$_finished = _._lastNode = false;
      _._vtmp = t4;
      _._mtmp = t5;
      _._paddedKey = null;
      _.__BLAKE2b_getDigestLength_F = _.__BLAKE2b__initialState_A = $;
    },
    _Keccack: function _Keccack() {
    },
    Keccack: function Keccack(t0, t1, t2, t3) {
      var _ = this;
      _.digestLength = t0;
      _._sh = t1;
      _._sl = t2;
      _._hash$_state = t3;
      _._pos = 0;
      _._hash$_finished = false;
      _.___Keccack_blockSize_F = $;
    },
    SHAKE: function SHAKE() {
    },
    SHAKE256: function SHAKE256(t0, t1, t2) {
      var _ = this;
      _._sh = t0;
      _._sl = t1;
      _._hash$_state = t2;
      _._pos = 0;
      _._hash$_finished = false;
      _.___Keccack_blockSize_F = $;
    },
    MD4: function MD4(t0, t1, t2) {
      var _ = this;
      _._hash$_buffer = t0;
      _._lengthInBytes = 0;
      _._hash$_state = t1;
      _._currentChunk = t2;
      _._hash$_finished = false;
    },
    RIPEMD160: function RIPEMD160(t0, t1) {
      var _ = this;
      _._hash$_buffer = t0;
      _._lengthInBytes = 0;
      _.___RIPEMD__state_F = $;
      _._currentChunk = t1;
      _._hash$_finished = false;
    },
    _RIPEMD: function _RIPEMD() {
    },
    SHA256: function SHA256(t0, t1, t2, t3) {
      var _ = this;
      _._hash$_state = t0;
      _._temp = t1;
      _._hash$_buffer = t2;
      _._bytesHashed = _._bufferLength = 0;
      _._hash$_finished = false;
      _._k = t3;
    },
    Poly1305: function Poly1305(t0, t1, t2, t3) {
      var _ = this;
      _._poly1305$_buffer = t0;
      _._r = t1;
      _._h = t2;
      _._pad = t3;
      _._fin = _._leftover = 0;
      _._finished = false;
    },
    FortunaPRNG__generateSeed(digestLen) {
      var i,
        rand = $.$get$Random__secureRandom(),
        seed = A.List_List$filled(digestLen, 0, false, type$.int);
      for (i = 0; i < digestLen; ++i)
        B.JSArray_methods.$indexSet(seed, i, rand.nextInt$1(256));
      return seed;
    },
    FortunaPRNG: function FortunaPRNG(t0, t1) {
      var _ = this;
      _.__FortunaPRNG__counter_FI = _.__FortunaPRNG__key_FI = $;
      _._zeroBlock = t0;
      _._out = t1;
      _._c = 0;
    },
    SchnorrkelPublicKey: function SchnorrkelPublicKey(t0) {
      this._keys$_publicKey = t0;
    },
    QuickCrypto__generateRandom_closure: function QuickCrypto__generateRandom_closure() {
    },
    ArgumentException$(message, details) {
      return new A.ArgumentException(message, details);
    },
    BlockchainUtilsException: function BlockchainUtilsException() {
    },
    BlockchainUtilsException_toString_closure: function BlockchainUtilsException_toString_closure() {
    },
    BlockchainUtilsException_toString_closure0: function BlockchainUtilsException_toString_closure0() {
    },
    ArgumentException: function ArgumentException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    MessageException: function MessageException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    GenericException: function GenericException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    _Hex: function _Hex() {
    },
    SS58ChecksumError: function SS58ChecksumError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    BigRational_BigRational(numerator, denominator) {
      var t1, t2;
      if (denominator == null)
        return new A.BigRational(numerator, $.$get$BigRational__one());
      t1 = $.$get$BigRational__zero();
      t2 = denominator.compareTo$1(0, t1);
      if (t2 === 0)
        throw A.wrapException(B.ArgumentException_Atw);
      t2 = numerator.compareTo$1(0, t1);
      if (t2 === 0)
        return new A.BigRational(t1, $.$get$BigRational__one());
      return A.BigRational__reduce(numerator, denominator);
    },
    BigRational_BigRational$from(numerator) {
      var t1 = A._BigIntImpl__BigIntImpl$from(numerator);
      return A.BigRational_BigRational(t1, A._BigIntImpl__BigIntImpl$from(1));
    },
    BigRational__gcd(a, b) {
      var t1, b0;
      while (true) {
        t1 = b.compareTo$1(0, $.$get$BigRational__zero());
        if (!(t1 !== 0))
          break;
        b0 = a.$mod(0, b);
        a = b;
        b = b0;
      }
      return a;
    },
    BigRational_BigRational$parseDecimal(decimal) {
      var t2, significand, exponent, isNegative, intPart, t3, decPart, multiple, a, b, _null = null,
        parts = B.JSString_methods.split$1(decimal, A.RegExp_RegExp("e", false)),
        t1 = parts.length;
      if (t1 > 2)
        throw A.wrapException(B.ArgumentException_KSi);
      if (t1 > 1) {
        t1 = parts[1];
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t2 = t1[0] === "-";
        if (t2)
          B.JSArray_methods.$indexSet(parts, 1, B.JSString_methods.substring$1(t1, 1));
        if (1 >= parts.length)
          return A.ioore(parts, 1);
        t1 = parts[1];
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        if (t1[0] === "+")
          B.JSArray_methods.$indexSet(parts, 1, B.JSString_methods.substring$1(t1, 1));
        if (0 >= parts.length)
          return A.ioore(parts, 0);
        significand = A.BigRational_BigRational$parseDecimal(parts[0]);
        t1 = $.$get$BigRational__ten();
        if (1 >= parts.length)
          return A.ioore(parts, 1);
        exponent = new A.BigRational(t1.pow$1(A.int_parse(parts[1], _null)), $.$get$BigRational__one());
        if (!t2)
          return significand.$mul(0, exponent);
        else
          return significand.$div(0, exponent);
      }
      parts = A._setArrayType(B.JSString_methods.trim$0(decimal).split("."), type$.JSArray_String);
      t1 = parts.length;
      if (t1 > 2)
        throw A.wrapException(B.ArgumentException_KSi0);
      if (t1 > 1) {
        t1 = parts[0];
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        isNegative = t1[0] === "-";
        if (isNegative)
          B.JSArray_methods.$indexSet(parts, 0, B.JSString_methods.substring$1(t1, 1));
        if (0 >= parts.length)
          return A.ioore(parts, 0);
        intPart = new A.BigRational(A._BigIntImpl_parse(parts[0], _null), $.$get$BigRational__one());
        if (1 >= parts.length)
          return A.ioore(parts, 1);
        t1 = parts[1];
        while (true) {
          if (1 >= parts.length)
            return A.ioore(parts, 1);
          t2 = parts[1];
          t3 = t2.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return A.ioore(t2, 0);
            t3 = t2[0] === "0";
          } else
            t3 = false;
          if (!t3)
            break;
          B.JSArray_methods.$indexSet(parts, 1, B.JSString_methods.substring$1(t2, 1));
        }
        t1 = B.JSString_methods.$mul("0", t1.length);
        if (1 >= parts.length)
          return A.ioore(parts, 1);
        t2 = parts[1];
        t2 = t2.length === 0 ? $.$get$BigRational__zero() : A._BigIntImpl_parse(t2, _null);
        decPart = A.BigRational__reduce(t2, A._BigIntImpl_parse("1" + t1, _null));
        t1 = intPart.denominator;
        t2 = decPart.denominator;
        multiple = t1.$mul(0, t2).$tdiv(0, A.BigRational__gcd(t1, t2));
        a = multiple.$tdiv(0, t1);
        b = multiple.$tdiv(0, t2);
        intPart = A.BigRational__reduce(intPart.numerator.$mul(0, a).$add(0, decPart.numerator.$mul(0, b)), multiple);
        return isNegative ? intPart.$not(0) : intPart;
      }
      return new A.BigRational(A._BigIntImpl_parse(decimal, _null), $.$get$BigRational__one());
    },
    BigRational__reduce(n, d) {
      var divisor = A.BigRational__gcd(n, d),
        num = n.$tdiv(0, divisor),
        denom = d.$tdiv(0, divisor);
      if (denom._isNegative)
        return new A.BigRational(num.$negate(0), denom.$negate(0));
      return new A.BigRational(num, denom);
    },
    BigRational: function BigRational(t0, t1) {
      this.numerator = t0;
      this.denominator = t1;
      this._inDecimal = null;
    },
    StringUtils_strip0x(value) {
      if (B.JSString_methods.startsWith$1(value.toLowerCase(), "0x"))
        return B.JSString_methods.substring$1(value, 2);
      return value;
    },
    StringUtils_add0x(value) {
      if (B.JSString_methods.startsWith$1(value.toLowerCase(), "0x"))
        return value;
      return "0x" + value;
    },
    StringUtils_encode(value, type) {
      switch (type) {
        case B.StringEncoding_1:
          return B.C_Utf8Encoder.convert$1(value);
        case B.StringEncoding_2:
        case B.StringEncoding_3:
          return B.C_Base64Decoder.convert$1(value);
        default:
          return B.C_AsciiEncoder.convert$1(value);
      }
    },
    StringUtils_decode(value, allowInvalidOrMalformed, type) {
      switch (type) {
        case B.StringEncoding_1:
          type$.List_int._as(value);
          return B.Utf8Decoder_false.convert$1(value);
        case B.StringEncoding_2:
          type$.Base64Codec._eval$1("Codec.S")._as(value);
          return B.Base64Codec_Base64Encoder_false.get$encoder().convert$1(value);
        case B.StringEncoding_3:
          type$.Base64Codec._eval$1("Codec.S")._as(value);
          return B.Base64Codec_Base64Encoder_true.get$encoder().convert$1(value);
        default:
          return B.C_AsciiCodec.decode$2$allowInvalid(value, false);
      }
    },
    StringUtils_tryDecode(value) {
      var t1, exception,
        allowInvalidOrMalformed = false,
        type = B.StringEncoding_1;
      if (value == null)
        return null;
      try {
        t1 = A.StringUtils_decode(value, allowInvalidOrMalformed, type);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    StringUtils_fromJson(data) {
      return B.C_JsonCodec.encode$2$toEncodable(data, null);
    },
    StringEncoding: function StringEncoding(t0) {
      this._name = t0;
    },
    Tuple: function Tuple(t0, t1, t2) {
      this.item1 = t0;
      this.item2 = t1;
      this.$ti = t2;
    },
    CosmosBaseAddress: function CosmosBaseAddress(t0, t1) {
      this.address = t0;
      this.hrp = t1;
    },
    CosmosKeysAlgs_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_vTY, new A.CosmosKeysAlgs_fromName_closure($name), new A.CosmosKeysAlgs_fromName_closure0($name));
    },
    CosmosKeysAlgs: function CosmosKeysAlgs(t0) {
      this._name = t0;
    },
    CosmosKeysAlgs_fromName_closure: function CosmosKeysAlgs_fromName_closure(t0) {
      this.name = t0;
    },
    CosmosKeysAlgs_fromName_closure0: function CosmosKeysAlgs_fromName_closure0(t0) {
      this.name = t0;
    },
    DartCosmosSdkPluginException: function DartCosmosSdkPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    DartMoneroPluginException: function DartMoneroPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    MoneroNetwork_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_SMS, new A.MoneroNetwork_fromName_closure($name), new A.MoneroNetwork_fromName_closure0($name));
    },
    MoneroNetwork: function MoneroNetwork(t0) {
      this.name = t0;
    },
    MoneroNetwork_fromName_closure: function MoneroNetwork_fromName_closure(t0) {
      this.name = t0;
    },
    MoneroNetwork_fromName_closure0: function MoneroNetwork_fromName_closure0(t0) {
      this.name = t0;
    },
    AptosAddress: function AptosAddress(t0, t1, t2) {
      this.address = t0;
      this.value = t1;
      this.argumentType = t2;
    },
    BcsSerializationException: function BcsSerializationException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    MoveArgumentType: function MoveArgumentType(t0) {
      this._name = t0;
    },
    MoveArgument: function MoveArgument() {
    },
    MoveAddress: function MoveAddress() {
    },
    BcsSerialization_toReadableObject(val) {
      var newMap, t1;
      if (type$.Map_dynamic_dynamic._is(val)) {
        newMap = val.map$2$1(0, new A.BcsSerialization_toReadableObject_closure(), type$.dynamic, type$.nullable_Object);
        newMap.removeWhere$1(0, new A.BcsSerialization_toReadableObject_closure0());
        return newMap;
      }
      if (typeof val == "string" || A._isInt(val))
        return val;
      if (val instanceof A._BigIntImpl)
        return val.toString$0(0);
      if (type$.List_int._is(val)) {
        t1 = A.BytesUtils_tryToHexString(val, "0x");
        return t1 == null ? val : t1;
      }
      if (type$.List_dynamic._is(val)) {
        t1 = J.map$1$1$ax(val, A.serialization_BcsSerialization_toReadableObject$closure(), type$.nullable_Object);
        t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
        return t1;
      }
      return J.toString$0$(val);
    },
    BcsSerialization: function BcsSerialization() {
    },
    BcsSerialization_toReadableObject_closure: function BcsSerialization_toReadableObject_closure() {
    },
    BcsSerialization_toReadableObject_closure0: function BcsSerialization_toReadableObject_closure0() {
    },
    BcsVariantSerialization: function BcsVariantSerialization() {
    },
    ETHAddress_ETHAddress(address) {
      var t1, exception,
        skipChecksum = true;
      try {
        new A.EthAddrDecoder().decodeAddr$2(address, A.LinkedHashMap_LinkedHashMap$_literal(["skip_chksum_enc", skipChecksum], type$.String, type$.dynamic));
        t1 = A.EthAddrUtils_toChecksumAddress(address);
        return new A.ETHAddress(t1, t1);
      } catch (exception) {
        t1 = A.LinkedHashMap_LinkedHashMap$_literal(["input", address], type$.String, type$.dynamic);
        throw A.wrapException(new A.ETHPluginException("invalid ethereum address", t1));
      }
    },
    ETHAddress: function ETHAddress(t0, t1) {
      this.address = t0;
      this._hexAddress = t1;
    },
    ETHPluginException: function ETHPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    SolAddress: function SolAddress(t0) {
      this.address = t0;
    },
    SolidityAddress: function SolidityAddress() {
    },
    SuiAddress: function SuiAddress(t0, t1, t2) {
      this.address = t0;
      this.value = t1;
      this.argumentType = t2;
    },
    DartSuiPluginException: function DartSuiPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    TronAddress_TronAddress(address) {
      var decode, t1, decode0, t2, addr, exception, _null = null, visible = null;
      try {
        if (visible == null) {
          t2 = $.$get$StringUtils__hexBytesRegex();
          if (t2._nativeRegExp.test(address)) {
            t1 = A.BytesUtils_fromHexString(address, false);
            addr = A.TrxAddressUtils_fromHexBytes(t1);
            t1 = A.BytesUtils_toHexString(t1, true, _null);
            return new A.TronAddress(addr, t1);
          }
          decode = new A.TrxAddrDecoder().decodeAddr$1(address);
          t2 = A.List_List$_of(B.List_65, type$.int);
          t1 = t2;
          J.addAll$1$ax(t1, decode);
          t1 = A.BytesUtils_toHexString(t1, true, _null);
          return new A.TronAddress(address, t1);
        } else if (visible) {
          decode0 = new A.TrxAddrDecoder().decodeAddr$1(address);
          t1 = A.List_List$_of(B.List_65, type$.int);
          t2 = t1;
          J.addAll$1$ax(t2, decode0);
          t1 = A.BytesUtils_toHexString(t2, true, _null);
          return new A.TronAddress(address, t1);
        } else {
          t1 = A.BytesUtils_fromHexString(address, false);
          addr = A.TrxAddressUtils_fromHexBytes(t1);
          t1 = A.BytesUtils_toHexString(t1, true, _null);
          return new A.TronAddress(addr, t1);
        }
      } catch (exception) {
        t1 = A.LinkedHashMap_LinkedHashMap$_literal(["input", address, "visible", visible], type$.String, type$.dynamic);
        throw A.wrapException(new A.TronPluginException("invalid tron address", t1));
      }
    },
    TronAddress: function TronAddress(t0, t1) {
      this._address = t0;
      this._hexAddress = t1;
    },
    TronPluginException: function TronPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    OnChainBridgeException$(message) {
      return new A.OnChainBridgeException(message);
    },
    OnChainBridgeException: function OnChainBridgeException(t0) {
      this.message = t0;
    },
    PlatformConfig: function PlatformConfig() {
    },
    AppPlatform: function AppPlatform(t0) {
      this._name = t0;
    },
    WalletEventTypes_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_Dpv, new A.WalletEventTypes_fromName_closure($name), new A.WalletEventTypes_fromName_closure0($name));
    },
    WalletEvent$(additional, clientId, data, platform, requestId, target, type) {
      return new A.WalletEvent(target, clientId, A.List_List$unmodifiable(data, type$.int), requestId, type, additional, platform);
    },
    WalletEventTypes: function WalletEventTypes(t0) {
      this._name = t0;
    },
    WalletEventTypes_fromName_closure: function WalletEventTypes_fromName_closure(t0) {
      this.name = t0;
    },
    WalletEventTypes_fromName_closure0: function WalletEventTypes_fromName_closure0(t0) {
      this.name = t0;
    },
    WalletEventTarget: function WalletEventTarget(t0) {
      this._name = t0;
    },
    WalletEvent: function WalletEvent(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.target = t0;
      _.clientId = t1;
      _.data = t2;
      _.requestId = t3;
      _.type = t4;
      _.additional = t5;
      _.platform = t6;
    },
    OnChainBridgeInterface: function OnChainBridgeInterface() {
    },
    SafestorageUtils_decrypt(encryptedValue, chacha) {
      var item, decode, t1, t2, t3, t4, exception;
      try {
        t1 = type$.CborListValue_dynamic._as(A.CborUtils__decode(A.BytesUtils_fromHexString(encryptedValue, false), 0).value).value;
        t2 = t1.length;
        if (0 >= t2)
          return A.ioore(t1, 0);
        t3 = type$.CborBytesValue;
        t4 = t3._as(t1[0]);
        if (1 >= t2)
          return A.ioore(t1, 1);
        t1 = t3._as(t1[1]);
        t3 = type$.int;
        item = new A.StorageItem(A.List_List$unmodifiable(t4.value, t3), A.List_List$unmodifiable(t1.value, t3));
        decode = chacha.decrypt$2(item.nonce, item.encryptedValue);
        t3 = A.StringUtils_tryDecode(decode);
        return t3;
      } catch (exception) {
        return null;
      }
    },
    SafestorageUtils_getOrCreateKey(key) {
      var r,
        toBytes = A.BytesUtils_tryFromHexString(key, false);
      if (toBytes != null && toBytes.length === 32) {
        key.toString;
        return new A._Record_2(key, A.ChaCha20Poly1305$(toBytes));
      }
      r = $.$get$QuickCrypto__generateRandom().call$1(32);
      return new A._Record_2(A.BytesUtils_toHexString(r, true, null), A.ChaCha20Poly1305$(r));
    },
    SafeStorage_init() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_IndexDbStorage),
        $async$returnValue;
      var $async$SafeStorage_init = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (type$.nullable_JSObject._as(init.G.indexedDB) == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return A._asyncAwait(A.IndexDbStorage_init(null, false), $async$SafeStorage_init);
            case 3:
              // returning from await.
              $async$returnValue = $async$result._0;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$SafeStorage_init, $async$completer);
    },
    SafeStorage: function SafeStorage() {
    },
    StorageItem: function StorageItem(t0, t1) {
      this.nonce = t0;
      this.encryptedValue = t1;
    },
    IndexDbStorage__requestHandler(request, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      request.onsuccess = A._functionToJS1(new A.IndexDbStorage__requestHandler_closure(completer, request, $T));
      request.onerror = A._functionToJS1(new A.IndexDbStorage__requestHandler_closure0(completer));
      return t1.timeout$1(B.Duration_10000000);
    },
    IndexDbStorage__getOrCreateKey(database) {
      return A.IndexDbStorage__getOrCreateKey$body(database);
    },
    IndexDbStorage__getOrCreateKey$body(database) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Record_2_bool_and_ChaCha20Poly1305),
        $async$returnValue, store, t1, t2, keyHex, key;
      var $async$IndexDbStorage__getOrCreateKey = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              store = A.IndexDbStorage_getStore(database, B.IndexDbStorageMode_0)._0;
              t1 = type$.JSObject;
              $async$goto = 3;
              return A._asyncAwait(A.IndexDbStorage__requestHandler(t1._as(store.get("ask")), type$.nullable_JSObject), $async$IndexDbStorage__getOrCreateKey);
            case 3:
              // returning from await.
              t2 = $async$result;
              keyHex = t2 == null ? null : A._asStringQ(t2.value);
              key = A.SafestorageUtils_getOrCreateKey(keyHex);
              t2 = key._0;
              $async$goto = t2 !== keyHex ? 4 : 5;
              break;
            case 4:
              // then
              $async$goto = 6;
              return A._asyncAwait(A.IndexDbStorage__requestHandler(t1._as(store.put({id: "ask", value: t2})), type$.String), $async$IndexDbStorage__getOrCreateKey);
            case 6:
              // returning from await.
              $async$returnValue = new A._Record_2(false, key._1);
              // goto return
              $async$goto = 1;
              break;
            case 5:
              // join
              $async$returnValue = new A._Record_2(true, key._1);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$IndexDbStorage__getOrCreateKey, $async$completer);
    },
    IndexDbStorage_getStore(database, mode) {
      var t1 = type$.JSObject,
        transaction = t1._as(database.transaction(A._setArrayType(["ONCHAIN_STORE"], type$.JSArray_String), mode._name));
      return new A._Record_2(t1._as(transaction.objectStore("ONCHAIN_STORE")), transaction);
    },
    IndexDbStorage_init(dbName, retry) {
      return A.IndexDbStorage_init$body(dbName, retry);
    },
    IndexDbStorage_init$body(dbName, retry) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Record_2_IndexDbStorage_and_bool),
        $async$returnValue, t1, request, t2, completer, database, chacha, db;
      var $async$IndexDbStorage_init = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              db = type$.nullable_JSObject._as(init.G.indexedDB);
              if (db == null)
                throw A.wrapException(A.OnChainBridgeException$("IndexedDB not supported on this browser."));
              t1 = type$.JSObject;
              request = t1._as(db.open("OnChain"));
              t2 = new A._Future($.Zone__current, type$._Future_JSObject);
              completer = new A._AsyncCompleter(t2, type$._AsyncCompleter_JSObject);
              request.onupgradeneeded = A._functionToJS1(new A.IndexDbStorage_init_closure(request));
              request.onsuccess = A._functionToJS1(new A.IndexDbStorage_init_closure0(completer, request));
              request.onerror = A._functionToJS1(new A.IndexDbStorage_init_closure1(completer));
              $async$goto = 3;
              return A._asyncAwait(t2, $async$IndexDbStorage_init);
            case 3:
              // returning from await.
              database = $async$result;
              $async$goto = !A._asBool(t1._as(database.objectStoreNames).contains("ONCHAIN_STORE")) ? 4 : 5;
              break;
            case 4:
              // then
              if (retry)
                throw A.wrapException(A.OnChainBridgeException$(string$.An_une));
              database.close();
              $async$goto = 6;
              return A._asyncAwait(A.IndexDbStorage__requestHandler(t1._as(db.deleteDatabase("OnChain")), type$.nullable_Object), $async$IndexDbStorage_init);
            case 6:
              // returning from await.
              $async$returnValue = A.IndexDbStorage_init(dbName, true);
              // goto return
              $async$goto = 1;
              break;
            case 5:
              // join
              $async$goto = 7;
              return A._asyncAwait(A.IndexDbStorage__getOrCreateKey(database), $async$IndexDbStorage_init);
            case 7:
              // returning from await.
              chacha = $async$result;
              $async$returnValue = new A._Record_2(new A.IndexDbStorage(database, chacha._1), chacha._0);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$IndexDbStorage_init, $async$completer);
    },
    IndexDbStorageMode: function IndexDbStorageMode(t0) {
      this._name = t0;
    },
    IndexDbStorage: function IndexDbStorage(t0, t1) {
      this.database = t0;
      this._chacha = t1;
    },
    IndexDbStorage__requestHandler_closure: function IndexDbStorage__requestHandler_closure(t0, t1, t2) {
      this.completer = t0;
      this.request = t1;
      this.T = t2;
    },
    IndexDbStorage__requestHandler_closure0: function IndexDbStorage__requestHandler_closure0(t0) {
      this.completer = t0;
    },
    IndexDbStorage_init_closure: function IndexDbStorage_init_closure(t0) {
      this.request = t0;
    },
    IndexDbStorage_init_closure0: function IndexDbStorage_init_closure0(t0, t1) {
      this.completer = t0;
      this.request = t1;
    },
    IndexDbStorage_init_closure1: function IndexDbStorage_init_closure1(t0) {
      this.completer = t0;
    },
    IndexDbStorage_all_closure: function IndexDbStorage_all_closure(t0) {
      this.prefix = t0;
    },
    JSWalletEvent_toEvent(_this) {
      var e, t1, t2, t3, t4, t5, t6, t7, t8, exception;
      try {
        t1 = A._asStringQ(_this.client_id);
        t1.toString;
        t2 = type$.nullable_JSArray_nullable_Object._as(_this.data);
        t2.toString;
        if (!type$.List_double._is(t2))
          t2 = new A.CastList(t2, A._arrayInstanceType(t2)._eval$1("CastList<1,double>"));
        t3 = type$.int;
        t2 = A.List_List$from(t2, true, t3);
        t4 = A._asStringQ(_this.request_id);
        t4.toString;
        t5 = A._asStringQ(_this.type);
        t5.toString;
        t5 = A.WalletEventTypes_fromName(t5);
        t6 = A._asStringQ(_this.additional);
        t7 = A._asStringQ(_this.platform);
        t8 = B.JSArray_methods.firstWhere$1(B.List_zqX, new A.JSWalletEvent_toEvent_closure(_this));
        t3 = A.List_List$unmodifiable(t2, t3);
        return new A.WalletEvent(t8, t1, t3, t4, t5, t6, t7);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.S(e);
        t2 = A._asStringQ(_this.client_id);
        t3 = type$.nullable_JSArray_nullable_Object._as(_this.data);
        t3.toString;
        if (!type$.List_double._is(t3))
          t3 = new A.CastList(t3, A._arrayInstanceType(t3)._eval$1("CastList<1,double>"));
        A.printString("got error " + t1 + " " + A.LinkedHashMap_LinkedHashMap$_literal(["id", t2, "data", A.List_List$from(t3, true, type$.int), "additional", A._asStringQ(_this.additional), "request_id", A._asStringQ(_this.request_id), "type", A._asStringQ(_this.type), "platform", A._asStringQ(_this.platform), "target", A._asStringQ(_this.target)], type$.String, type$.dynamic).toString$0(0));
        return null;
      }
    },
    ToJsEvent_toJsEvent(_this) {
      var t1 = _this.data,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,double>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("double(1)")._as(new A.ToJsEvent_toJsEvent_closure()), t3), t3._eval$1("ListIterable.E"));
      t1 = {data: t1, type: _this.type._name, additional: _this.additional, platform: _this.platform, target: _this.target._name};
      t1.client_id = _this.clientId;
      t1.request_id = _this.requestId;
      return t1;
    },
    JSWalletEvent_toEvent_closure: function JSWalletEvent_toEvent_closure(t0) {
      this._this = t0;
    },
    ToJsEvent_toJsEvent_closure: function ToJsEvent_toJsEvent_closure() {
    },
    WebPlatformInterface: function WebPlatformInterface() {
      this._storage = null;
    },
    WebPlatformInterface__initDatabase_closure: function WebPlatformInterface__initDatabase_closure(t0) {
      this.$this = t0;
    },
    WebPlatformInterface__initDatabase__closure: function WebPlatformInterface__initDatabase__closure(t0) {
      this.$this = t0;
    },
    WebPlatformInterface_getConfig_closure: function WebPlatformInterface_getConfig_closure() {
    },
    WalletException$invalidArgruments(_argruments) {
      return new A.WalletException("", _argruments);
    },
    WalletException$(message) {
      return new A.WalletException(message, null);
    },
    WalletException: function WalletException(t0, t1) {
      this.message = t0;
      this._argruments = t1;
    },
    Equatable: function Equatable() {
    },
    ProviderAuthType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_Pnc, new A.ProviderAuthType_fromName_closure($name), new A.ProviderAuthType_fromName_closure0());
    },
    ProviderAuthType_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_Pnc, new A.ProviderAuthType_fromTag_closure(tag), new A.ProviderAuthType_fromTag_closure0());
    },
    ProviderAuthenticated_ProviderAuthenticated$deserialize(obj) {
      var cbor, t1, t2, _null = null,
        values = A.CborSerializable_decode(_null, _null, obj, type$.CborTagValue_dynamic),
        type = A.ProviderAuthType_fromTag(values.tags);
      $label0$0: {
        if (B.ProviderAuthType_List_50_6_header === type || B.ProviderAuthType_List_50_6_query === type) {
          cbor = A.CborSerializable_decodeCborTags(_null, values, B.List_50_6, type$.CborListValue_dynamic);
          t1 = A.ProviderAuthType_fromName(A.ExtractCborList_elementAt(cbor, 0, type$.nullable_String));
          t2 = type$.String;
          t1 = new A.BasicProviderAuthenticated(A.ExtractCborList_elementAt(cbor, 1, t2), A.ExtractCborList_elementAt(cbor, 2, t2), t1);
          break $label0$0;
        }
        if (B.ProviderAuthType_List_50_7_digest === type) {
          values = A.CborSerializable_decodeCborTags(_null, values, B.List_50_7, type$.CborListValue_dynamic);
          t1 = type$.String;
          t1 = new A.DigestProviderAuthenticated(A.ExtractCborList_elementAs(values, 0, t1), A.ExtractCborList_elementAs(values, 1, t1), B.ProviderAuthType_List_50_7_digest);
          break $label0$0;
        }
        t1 = _null;
      }
      return t1;
    },
    ProviderAuthType: function ProviderAuthType(t0, t1) {
      this.tag = t0;
      this._name = t1;
    },
    ProviderAuthType_fromName_closure: function ProviderAuthType_fromName_closure(t0) {
      this.name = t0;
    },
    ProviderAuthType_fromName_closure0: function ProviderAuthType_fromName_closure0() {
    },
    ProviderAuthType_fromTag_closure: function ProviderAuthType_fromTag_closure(t0) {
      this.tag = t0;
    },
    ProviderAuthType_fromTag_closure0: function ProviderAuthType_fromTag_closure0() {
    },
    ProviderAuthenticated: function ProviderAuthenticated() {
    },
    BasicProviderAuthenticated: function BasicProviderAuthenticated(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.type = t2;
    },
    DigestProviderAuthenticated: function DigestProviderAuthenticated(t0, t1, t2) {
      this.password = t0;
      this.username = t1;
      this.type = t2;
    },
    _ProviderAuthenticated_Object_CborSerializable: function _ProviderAuthenticated_Object_CborSerializable() {
    },
    _ProviderAuthenticated_Object_CborSerializable_Equatable: function _ProviderAuthenticated_Object_CborSerializable_Equatable() {
    },
    ContentType_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_HVn, new A.ContentType_fromValue_closure(value), new A.ContentType_fromValue_closure0(null));
    },
    ContentType: function ContentType(t0, t1) {
      this.value = t0;
      this._name = t1;
    },
    ContentType_fromValue_closure: function ContentType_fromValue_closure(t0) {
      this.value = t0;
    },
    ContentType_fromValue_closure0: function ContentType_fromValue_closure0(t0) {
      this.defaultValue = t0;
    },
    APPImage$local(uri) {
      return new A.APPImage(B.ContentType_0_local, uri);
    },
    APPImage_network(imageUrl) {
      if (A.StrUtils_validateUri(imageUrl) == null)
        return null;
      imageUrl.toString;
      return new A.APPImage(B.ContentType_4_network, imageUrl);
    },
    APPImage_APPImage$deserialize(obj) {
      var cbor, uri, t1, exception, bytes = null;
      try {
        cbor = A.CborSerializable_cborTagValue(bytes, null, obj, B.List_50_1, type$.CborListValue_dynamic);
        uri = A.ExtractCborList_elementAs(cbor, 1, type$.String);
        t1 = A.ContentType_fromValue(A.ExtractCborList_elementAs(cbor, 0, type$.nullable_int));
        return new A.APPImage(t1, uri);
      } catch (exception) {
        throw A.wrapException(B.WalletException_data_verification_failed_null);
      }
    },
    APPImage: function APPImage(t0, t1) {
      this.type = t0;
      this.uri = t1;
    },
    _APPImage_Object_CborSerializable: function _APPImage_Object_CborSerializable() {
    },
    _APPImage_Object_CborSerializable_Equatable: function _APPImage_Object_CborSerializable_Equatable() {
    },
    CborSerializable_decodeCborTags(cborBytes, object, tags, $T) {
      var cbor;
      if (object == null) {
        cborBytes.toString;
        cbor = A.CborUtils__decode(cborBytes, 0).value;
      } else
        cbor = object;
      return A.CborSerializable_validateCbor(cbor, tags, $T);
    },
    CborSerializable_cborTagValue(cborBytes, hex, object, tags, $T) {
      if (object == null) {
        cborBytes = A.BytesUtils_tryFromHexString(hex, false);
        if (cborBytes == null)
          throw A.wrapException(B.WalletException_lCc);
        object = A.CborUtils__decode(cborBytes, 0).value;
      }
      return A.CborSerializable_validateCbor(object, tags, $T);
    },
    CborSerializable_validateCbor(cbor, tags, $T) {
      var t1;
      if (!(cbor instanceof A.CborTagValue) || !$T._is(cbor._value))
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      t1 = A.BytesUtils_bytesEqual(cbor.tags, tags);
      if (!t1)
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      return $T._as(cbor._value);
    },
    CborSerializable_decode(cborBytes, hex, object, $T) {
      var t1, exception;
      cborBytes = cborBytes;
      object = object;
      try {
        if (object == null) {
          if (cborBytes == null)
            cborBytes = A.BytesUtils_tryFromHexString(hex, false);
          if (cborBytes == null)
            throw A.wrapException(B.WalletException_lCc);
          object = A.CborUtils__decode(cborBytes, 0).value;
        }
        if (!$T._is(object)) {
          t1 = A.WalletException$invalidArgruments(A._setArrayType([A.createRuntimeType($T).toString$0(0) + A.getRuntimeTypeOfDartObject(object).toString$0(0)], type$.JSArray_String));
          throw A.wrapException(t1);
        }
        t1 = object;
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.WalletException)
          throw exception;
        else
          throw A.wrapException(B.WalletException_data_verification_failed_null);
      }
    },
    ExtractCborMap_generateMap(_this, onKey, onValue, $K, $V) {
      var t1 = type$.CborObject;
      return A.Map_Map$fromEntries(_this.value.cast$2$0(0, t1, t1).get$entries().map$1$1(0, new A.ExtractCborMap_generateMap_closure(onKey, onValue, $K, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("MapEntry<1,2>")), $K, $V);
    },
    ExtractCborList_elementAt(_this, index, $T) {
      var cborValue, v,
        t1 = _this.value;
      if (index > t1.length - 1) {
        $T._as(null);
        return null;
      }
      cborValue = t1[index];
      if (A.createRuntimeType($T) === B.Type_CborMapValue_DaJ) {
        if (cborValue instanceof A.CborMapValue)
          return $T._as(cborValue);
        $T._as(null);
        return null;
      }
      v = type$.CborObject._is(cborValue) ? cborValue.get$value() : cborValue;
      if (!$T._is(v)) {
        $T._as(null);
        return null;
      }
      return v;
    },
    ExtractCborList_elementAsListOf(_this, index, emyptyOnNull, $T) {
      var t1, exception;
      if (emyptyOnNull && index >= _this.value.length)
        return A._setArrayType([], $T._eval$1("JSArray<0>"));
      try {
        t1 = _this.value;
        if (!(index < t1.length))
          return A.ioore(t1, index);
        t1 = type$.CborListValue_dynamic._as(t1[index]).value;
        return new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("@<1>")._bind$1($T)._eval$1("CastList<1,2>"));
      } catch (exception) {
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      }
    },
    ExtractCborList_elementAs(_this, index, $T) {
      var cborValue, exception,
        t1 = _this.value;
      if (index > t1.length - 1) {
        if ($T._is(null)) {
          $T._as(null);
          return null;
        }
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      }
      try {
        cborValue = type$.nullable_CborObject._as(t1[index]);
        if ($T._is(null) && J.$eq$(cborValue, B.C_CborNullValue)) {
          $T._as(null);
          return null;
        }
        if ($T._is(cborValue.get$value())) {
          t1 = $T._as(cborValue.get$value());
          return t1;
        }
        t1 = $T._as(cborValue);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      }
    },
    ExtractCborList_elemetMybeAs(_this, index, onValue, $E, $T) {
      var cborValue, exception,
        t1 = _this.value;
      if (index > t1.length - 1)
        return null;
      try {
        cborValue = type$.CborObject._as(t1[index]);
        if (J.$eq$(cborValue, B.C_CborNullValue))
          return null;
        if ($T._is(cborValue)) {
          t1 = onValue.call$1($T._as(cborValue));
          return t1;
        }
        t1 = onValue.call$1($T._as(cborValue.get$value()));
        return t1;
      } catch (exception) {
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      }
    },
    ExtractCborList_getCborTag(_this, index) {
      var cborValue,
        t1 = _this.value;
      if (index > t1.length - 1)
        return null;
      cborValue = t1[index];
      if (!type$.CborObject._is(cborValue))
        return null;
      if (cborValue instanceof A.CborTagValue)
        return cborValue;
      if (cborValue.get$value() instanceof A.CborTagValue)
        return type$.nullable_CborTagValue_dynamic._as(cborValue.get$value());
      return null;
    },
    QuickCbor_to(_this, toe, $E, $T) {
      var t1;
      if ($T._is(_this))
        return toe.call$1($T._as(_this));
      t1 = _this._value;
      if (!$T._is(t1))
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      return toe.call$1($T._as(t1));
    },
    QuickCborTag_get_getList(_this) {
      var t1 = _this._value;
      if (!(t1 instanceof A.CborListValue))
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      return t1;
    },
    CborSerializable: function CborSerializable() {
    },
    ExtractCborMap_generateMap_closure: function ExtractCborMap_generateMap_closure(t0, t1, t2, t3) {
      var _ = this;
      _.onKey = t0;
      _.onValue = t1;
      _.K = t2;
      _.V = t3;
    },
    JsonSerialization: function JsonSerialization() {
    },
    SynchronizedLock: function SynchronizedLock() {
      this.last = null;
    },
    SynchronizedLock_synchronized_complete: function SynchronizedLock_synchronized_complete(t0, t1) {
      this.$this = t0;
      this.completer = t1;
    },
    SynchronizedLock_synchronized_closure: function SynchronizedLock_synchronized_closure(t0) {
      this.complete = t0;
    },
    CustomCoins$_($name, conf) {
      return new A.CustomCoins($name, conf);
    },
    CustomCoins_getSerializationCoin(serializationStr, $T) {
      var parts = serializationStr.split("#"),
        t1 = parts.length;
      if (t1 !== 2)
        throw A.wrapException(B.WalletException_data_verification_failed_null);
      if (1 >= t1)
        return A.ioore(parts, 1);
      return A.CustomCoins_getCoin(parts[1], parts[0], $T);
    },
    CustomCoins_getCoin($name, proposal, $T) {
      var coin;
      switch (proposal) {
        case "CIP-0019":
          coin = A.CustomCoins_fromName($name);
          break;
        default:
          coin = A.CryptoCoins_getCoin($name, A.CustomProposal_fromName(proposal));
          break;
      }
      if (coin == null)
        throw A.wrapException(B.WalletException_coin_not_found_null);
      if (!$T._is(coin))
        throw A.wrapException(B.WalletException_invalid_coin_null);
      return coin;
    },
    CustomCoins_fromName($name) {
      var t1, exception;
      try {
        t1 = B.JSArray_methods.firstWhere$1($.$get$CustomCoins_values(), new A.CustomCoins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    CustomProposal_fromName($name) {
      if ($name === "CIP-0019")
        return B.C_CustomProposal;
      return A.CoinProposal_fromName($name);
    },
    CustomCoins: function CustomCoins(t0, t1) {
      this.name = t0;
      this.conf = t1;
    },
    CustomCoins_fromName_closure: function CustomCoins_fromName_closure(t0) {
      this.name = t0;
    },
    CustomProposal: function CustomProposal() {
    },
    CustomCurrencyConf_byronLegacy_closure: function CustomCurrencyConf_byronLegacy_closure() {
    },
    CustomCurrencyConf_byronLegacyTestnet_closure: function CustomCurrencyConf_byronLegacyTestnet_closure() {
    },
    AddressDerivationType_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_jiT, new A.AddressDerivationType_fromTag_closure(tag), new A.AddressDerivationType_fromTag_closure0());
    },
    AddressDerivationIndex_AddressDerivationIndex$deserialize(obj) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, _null = null,
        cbor = A.CborSerializable_decode(_null, _null, obj, type$.CborTagValue_dynamic);
      switch (A.AddressDerivationType_fromTag(cbor.tags)) {
        case B.AddressDerivationType_List_200_81_bip32:
          cbor = A.CborSerializable_cborTagValue(_null, _null, cbor, B.List_200_81, type$.CborListValue_dynamic);
          t1 = type$.nullable_int;
          t2 = A.ExtractCborList_elementAs(cbor, 0, t1);
          t3 = A.ExtractCborList_elementAs(cbor, 1, t1);
          t4 = A.ExtractCborList_elementAs(cbor, 2, t1);
          t5 = A.ExtractCborList_elementAs(cbor, 3, t1);
          t6 = A.ExtractCborList_elementAs(cbor, 4, t1);
          t7 = A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAs(cbor, 5, type$.String), type$.CryptoCoins_CoinConfig);
          t1 = A.SeedTypes_fromValue(A.ExtractCborList_elementAs(cbor, 6, t1));
          t8 = type$.nullable_String;
          t9 = A.ExtractCborList_elementAs(cbor, 7, t8);
          return new A.Bip32AddressIndex(t2, t3, t4, t5, t6, t9, A.ExtractCborList_elementAs(cbor, 8, t8), A.Bip32AddressIndex__toPath(A._setArrayType([t2, t3, t4, t5, t6], type$.JSArray_nullable_int), t9), t1, t7);
        case B.AddressDerivationType_List_200_84_substrate:
          cbor = A.CborSerializable_cborTagValue(_null, _null, cbor, B.List_200_84, type$.CborListValue_dynamic);
          t1 = A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAs(cbor, 0, type$.String), type$.SubstrateCoins);
          t2 = type$.nullable_String;
          t3 = A.ExtractCborList_elementAs(cbor, 1, t2);
          return new A.SubstrateAddressIndex(A.ExtractCborList_elementAs(cbor, 2, t2), A.ExtractCborList_elementAs(cbor, 3, t2), t3, t1);
        case B.AddressDerivationType_List_200_83_multisig:
          return new A.MultiSigAddressIndex(_null);
      }
    },
    Bip32AddressIndex__toPath(indexses, importedKeyId) {
      var pathStr, _i,
        t1 = A._arrayInstanceType(indexses),
        t2 = t1._eval$1("MappedIterable<1,Bip32KeyIndex>"),
        bipIndexes = A.List_List$_of(new A.MappedIterable(new A.WhereIterable(indexses, t1._eval$1("bool(1)")._as(new A.Bip32AddressIndex__toPath_closure()), t1._eval$1("WhereIterable<1>")), t1._eval$1("Bip32KeyIndex(1)")._as(new A.Bip32AddressIndex__toPath_closure0()), t2), t2._eval$1("Iterable.E"));
      t1 = bipIndexes.length;
      if (t1 === 0)
        return null;
      for (pathStr = "m/", _i = 0; _i < t1; ++_i) {
        t2 = bipIndexes[_i].index;
        if ((t2 & 2147483648) >>> 0 === 0)
          pathStr += "" + t2 + "/";
        else
          pathStr += "" + (t2 & 2147483647) + "'/";
      }
      return B.JSString_methods.substring$2(pathStr, 0, pathStr.length - 1);
    },
    SeedTypes_fromValue(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_YjN, new A.SeedTypes_fromValue_closure(tag), new A.SeedTypes_fromValue_closure0());
    },
    AddressDerivationType: function AddressDerivationType(t0, t1) {
      this.tag = t0;
      this._name = t1;
    },
    AddressDerivationType_fromTag_closure: function AddressDerivationType_fromTag_closure(t0) {
      this.tag = t0;
    },
    AddressDerivationType_fromTag_closure0: function AddressDerivationType_fromTag_closure0() {
    },
    AddressDerivationIndex: function AddressDerivationIndex() {
    },
    Bip32AddressIndex: function Bip32AddressIndex(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.purpose = t0;
      _.coin = t1;
      _.accountLevel = t2;
      _.changeLevel = t3;
      _.addressIndex = t4;
      _.importedKeyId = t5;
      _.keyName = t6;
      _.hdPath = t7;
      _.seedGeneration = t8;
      _.currencyCoin = t9;
    },
    Bip32AddressIndex__toPath_closure: function Bip32AddressIndex__toPath_closure() {
    },
    Bip32AddressIndex__toPath_closure0: function Bip32AddressIndex__toPath_closure0() {
    },
    MultiSigAddressIndex: function MultiSigAddressIndex(t0) {
      this.keyName = t0;
    },
    SubstrateAddressIndex: function SubstrateAddressIndex(t0, t1, t2, t3) {
      var _ = this;
      _.importedKeyId = t0;
      _.keyName = t1;
      _.substratePath = t2;
      _.currencyCoin = t3;
    },
    SeedTypes: function SeedTypes(t0, t1, t2) {
      this.name = t0;
      this.value = t1;
      this._name = t2;
    },
    SeedTypes_fromValue_closure: function SeedTypes_fromValue_closure(t0) {
      this.tag = t0;
    },
    SeedTypes_fromValue_closure0: function SeedTypes_fromValue_closure0() {
    },
    _AddressDerivationIndex_Object_CborSerializable: function _AddressDerivationIndex_Object_CborSerializable() {
    },
    _AddressDerivationIndex_Object_CborSerializable_Equatable: function _AddressDerivationIndex_Object_CborSerializable_Equatable() {
    },
    NetworkType_fromTag(tag) {
      var t1 = {};
      t1.tag = tag;
      if (tag.length > 3)
        t1.tag = B.JSArray_methods.sublist$2(tag, 0, 3);
      return B.JSArray_methods.firstWhere$2$orElse(B.List_9gL, new A.NetworkType_fromTag_closure(t1), new A.NetworkType_fromTag_closure0());
    },
    NetworkType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_9gL, new A.NetworkType_fromName_closure($name), new A.NetworkType_fromName_closure0());
    },
    NetworkType: function NetworkType(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.tag = t1;
      _.mainNetworkId = t2;
      _.value = t3;
    },
    NetworkType_fromTag_closure: function NetworkType_fromTag_closure(t0) {
      this._box_0 = t0;
    },
    NetworkType_fromTag_closure0: function NetworkType_fromTag_closure0() {
    },
    NetworkType_fromName_closure: function NetworkType_fromName_closure(t0) {
      this.name = t0;
    },
    NetworkType_fromName_closure0: function NetworkType_fromName_closure0() {
    },
    ProvidersConst_getDefaultProvider(network, $T) {
      var providers = $.$get$ProvidersConst__providers().$index(0, network.get$value()),
        t1 = J.whereType$1$0$ax(providers == null ? A._setArrayType([], type$.JSArray_APIProvider) : providers, $T),
        t2 = t1.$ti,
        t3 = t2._eval$1("WhereIterable<Iterable.E>");
      t1 = A.List_List$_of(new A.WhereIterable(t1, t2._eval$1("bool(Iterable.E)")._as(new A.ProvidersConst_getDefaultProvider_closure($T)), t3), t3._eval$1("Iterable.E"));
      return t1;
    },
    ProvidersConst_getDefaultProvider_closure: function ProvidersConst_getDefaultProvider_closure(t0) {
      this.T = t0;
    },
    ProviderIdentifier_ProviderIdentifier$deserialize(cbor) {
      var values, network, _null = null,
        t1 = type$.CborTagValue_dynamic,
        tag = A.CborSerializable_decode(_null, _null, cbor, t1);
      $label0$0: {
        if (B.NetworkType_8zS === A.NetworkType_fromTag(tag.tags)) {
          values = A.CborSerializable_cborTagValue(_null, _null, tag, B.List_80_0_16, type$.CborListValue_dynamic);
          t1 = type$.String;
          t1 = new A.AptosProviderIdentifier(A.ExtractCborList_elementAs(values, 0, t1), A.ExtractCborList_elementAs(values, 1, t1), B.NetworkType_8zS);
          break $label0$0;
        }
        tag = A.CborSerializable_decode(_null, _null, tag, t1);
        network = A.NetworkType_fromTag(tag.tags);
        t1 = A.DefaultProviderIdentifier_DefaultProviderIdentifier(A.ExtractCborList_elementAs(A.QuickCborTag_get_getList(tag), 0, type$.String), network);
        break $label0$0;
      }
      return t1;
    },
    DefaultProviderIdentifier_DefaultProviderIdentifier(identifier, network) {
      switch (network) {
        case B.NetworkType_8zS:
          throw A.wrapException(B.WalletException_data_verification_failed_null);
      }
      return new A.DefaultProviderIdentifier(identifier, network);
    },
    APIProvider: function APIProvider() {
    },
    ProviderIdentifier: function ProviderIdentifier() {
    },
    DefaultProviderIdentifier: function DefaultProviderIdentifier(t0, t1) {
      this.identifier = t0;
      this.network = t1;
    },
    _APIProvider_Object_Equatable: function _APIProvider_Object_Equatable() {
    },
    _APIProvider_Object_Equatable_CborSerializable: function _APIProvider_Object_Equatable_CborSerializable() {
    },
    _ProviderIdentifier_Object_Equatable: function _ProviderIdentifier_Object_Equatable() {
    },
    _ProviderIdentifier_Object_Equatable_CborSerializable: function _ProviderIdentifier_Object_Equatable_CborSerializable() {
    },
    BitcoinExplorerProviderType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_9yH, new A.BitcoinExplorerProviderType_fromName_closure($name), new A.BitcoinExplorerProviderType_fromName_closure0());
    },
    BitcoinExplorerProviderType: function BitcoinExplorerProviderType(t0, t1) {
      this.url = t0;
      this._name = t1;
    },
    BitcoinExplorerProviderType_fromName_closure: function BitcoinExplorerProviderType_fromName_closure(t0) {
      this.name = t0;
    },
    BitcoinExplorerProviderType_fromName_closure0: function BitcoinExplorerProviderType_fromName_closure0() {
    },
    AptosAPIProviderType_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_Jb0, new A.AptosAPIProviderType_fromValue_closure(value), new A.AptosAPIProviderType_fromValue_closure0());
    },
    AptosAPIProvider$(auth, fullNodeUri, identifier, type) {
      return new A.AptosAPIProvider(type, fullNodeUri, identifier, B.ServiceProtocol_HTTP_0_http, auth, true);
    },
    AptosAPIProvider_AptosAPIProvider$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_decodeCborTags(null, obj, B.List_90_13, type$.CborListValue_dynamic),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAs(values, 0, t1);
      return A.AptosAPIProvider$(A.ExtractCborList_elemetMybeAs(values, 1, new A.AptosAPIProvider_AptosAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic), t2, A.ExtractCborList_elementAs(values, 2, t1), A.AptosAPIProviderType_fromValue(A.ExtractCborList_elementAs(values, 3, type$.nullable_int)));
    },
    AptosAPIProviderType: function AptosAPIProviderType(t0, t1) {
      this.value = t0;
      this._name = t1;
    },
    AptosAPIProviderType_fromValue_closure: function AptosAPIProviderType_fromValue_closure(t0) {
      this.value = t0;
    },
    AptosAPIProviderType_fromValue_closure0: function AptosAPIProviderType_fromValue_closure0() {
    },
    AptosAPIProvider: function AptosAPIProvider(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.type = t0;
      _.fullNodeUri = t1;
      _.identifier = t2;
      _.protocol = t3;
      _.auth = t4;
      _.allowInWeb3 = t5;
    },
    AptosAPIProvider_AptosAPIProvider$fromCborBytesOrObject_closure: function AptosAPIProvider_AptosAPIProvider$fromCborBytesOrObject_closure() {
    },
    AptosProviderIdentifier: function AptosProviderIdentifier(t0, t1, t2) {
      this.fullNodeIdentifier = t0;
      this.graphQlIdentifier = t1;
      this.network = t2;
    },
    BitcoinExplorerAPIProvider_BitcoinExplorerAPIProvider$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_decodeCborTags(null, obj, B.List_90_2, type$.CborListValue_dynamic),
        t1 = A.BitcoinExplorerProviderType_fromName(A.ExtractCborList_elementAs(values, 0, type$.nullable_String)),
        t2 = A.ExtractCborList_elemetMybeAs(values, 1, new A.BitcoinExplorerAPIProvider_BitcoinExplorerAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic);
      return new A.BitcoinExplorerAPIProvider(t1, A.ExtractCborList_elementAs(values, 2, type$.String), B.ServiceProtocol_HTTP_0_http, t2, true);
    },
    BitcoinExplorerAPIProvider: function BitcoinExplorerAPIProvider(t0, t1, t2, t3, t4) {
      var _ = this;
      _.explorerType = t0;
      _.identifier = t1;
      _.protocol = t2;
      _.auth = t3;
      _.allowInWeb3 = t4;
    },
    BitcoinExplorerAPIProvider_BitcoinExplorerAPIProvider$fromCborBytesOrObject_closure: function BitcoinExplorerAPIProvider_BitcoinExplorerAPIProvider$fromCborBytesOrObject_closure() {
    },
    ElectrumAPIProvider$_(auth, identifier, protocol, url) {
      return new A.ElectrumAPIProvider(url, identifier, protocol, auth, true);
    },
    ElectrumAPIProvider_ElectrumAPIProvider(identifier, protocol, url) {
      return A.ElectrumAPIProvider$_(null, identifier, protocol, url);
    },
    ElectrumAPIProvider_ElectrumAPIProvider$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_decodeCborTags(null, obj, B.List_90_0, type$.CborListValue_dynamic),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAs(values, 0, t1),
        t3 = A.ServiceProtocol_fromID(A.ExtractCborList_elementAs(values, 1, type$.int));
      return A.ElectrumAPIProvider$_(A.ExtractCborList_elemetMybeAs(values, 2, new A.ElectrumAPIProvider_ElectrumAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic), A.ExtractCborList_elementAs(values, 3, t1), t3, t2);
    },
    ElectrumAPIProvider: function ElectrumAPIProvider(t0, t1, t2, t3, t4) {
      var _ = this;
      _.url = t0;
      _.identifier = t1;
      _.protocol = t2;
      _.auth = t3;
      _.allowInWeb3 = t4;
    },
    ElectrumAPIProvider_ElectrumAPIProvider$fromCborBytesOrObject_closure: function ElectrumAPIProvider_ElectrumAPIProvider$fromCborBytesOrObject_closure() {
    },
    BaseBitcoinAPIProvider_BaseBitcoinAPIProvider$fromCborBytesOrObject(obj) {
      if (A.BytesUtils_bytesEqual(obj.tags, B.List_90_0))
        return A.ElectrumAPIProvider_ElectrumAPIProvider$fromCborBytesOrObject(obj);
      return A.BitcoinExplorerAPIProvider_BitcoinExplorerAPIProvider$fromCborBytesOrObject(obj);
    },
    BaseBitcoinAPIProvider: function BaseBitcoinAPIProvider() {
    },
    CardanoAPIProvider_CardanoAPIProvider(auth, identifier, serviceName, uri, websiteUri) {
      return new A.CardanoAPIProvider(uri, identifier, A.ServiceProtocol_fromURI(uri), auth, true);
    },
    CardanoAPIProvider_CardanoAPIProvider$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_decodeCborTags(null, obj, B.List_90_6, type$.CborListValue_dynamic),
        protocolId = A.ExtractCborList_elementAs(values, 1, type$.nullable_int),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAs(values, 0, t1),
        t3 = A.ServiceProtocol_fromID(protocolId == null ? 0 : protocolId),
        t4 = A.ExtractCborList_elemetMybeAs(values, 2, new A.CardanoAPIProvider_CardanoAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic);
      return new A.CardanoAPIProvider(t2, A.ExtractCborList_elementAs(values, 3, t1), t3, t4, true);
    },
    CardanoAPIProvider: function CardanoAPIProvider(t0, t1, t2, t3, t4) {
      var _ = this;
      _.uri = t0;
      _.identifier = t1;
      _.protocol = t2;
      _.auth = t3;
      _.allowInWeb3 = t4;
    },
    CardanoAPIProvider_CardanoAPIProvider$fromCborBytesOrObject_closure: function CardanoAPIProvider_CardanoAPIProvider$fromCborBytesOrObject_closure() {
    },
    CosmosAPIProvider_CosmosAPIProvider(identifier, uri) {
      return new A.CosmosAPIProvider(uri, identifier, A.ServiceProtocol_fromURI(uri), null, true);
    },
    CosmosAPIProvider_CosmosAPIProvider$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_decodeCborTags(null, obj, B.List_90_7, type$.CborListValue_dynamic),
        protocolId = A.ExtractCborList_elementAs(values, 1, type$.nullable_int),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAs(values, 0, t1),
        t3 = A.ServiceProtocol_fromID(protocolId == null ? 0 : protocolId),
        t4 = A.ExtractCborList_elemetMybeAs(values, 2, new A.CosmosAPIProvider_CosmosAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic);
      return new A.CosmosAPIProvider(t2, A.ExtractCborList_elementAs(values, 3, t1), t3, t4, true);
    },
    CosmosAPIProvider: function CosmosAPIProvider(t0, t1, t2, t3, t4) {
      var _ = this;
      _.uri = t0;
      _.identifier = t1;
      _.protocol = t2;
      _.auth = t3;
      _.allowInWeb3 = t4;
    },
    CosmosAPIProvider_CosmosAPIProvider$fromCborBytesOrObject_closure: function CosmosAPIProvider_CosmosAPIProvider$fromCborBytesOrObject_closure() {
    },
    EthereumAPIProvider_EthereumAPIProvider(identifier, uri) {
      return new A.EthereumAPIProvider(uri, identifier, A.ServiceProtocol_fromURI(uri), null, true);
    },
    EthereumAPIProvider_EthereumAPIProvider$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_decodeCborTags(null, obj, B.List_90_3, type$.CborListValue_dynamic),
        protocolId = A.ExtractCborList_elementAs(values, 1, type$.nullable_int),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAs(values, 0, t1),
        t3 = A.ServiceProtocol_fromID(protocolId == null ? 0 : protocolId),
        t4 = A.ExtractCborList_elemetMybeAs(values, 2, new A.EthereumAPIProvider_EthereumAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic);
      return new A.EthereumAPIProvider(t2, A.ExtractCborList_elementAs(values, 3, t1), t3, t4, A.ExtractCborList_elementAs(values, 4, type$.bool));
    },
    EthereumAPIProvider: function EthereumAPIProvider(t0, t1, t2, t3, t4) {
      var _ = this;
      _.uri = t0;
      _.identifier = t1;
      _.protocol = t2;
      _.auth = t3;
      _.allowInWeb3 = t4;
    },
    EthereumAPIProvider_EthereumAPIProvider$fromCborBytesOrObject_closure: function EthereumAPIProvider_EthereumAPIProvider$fromCborBytesOrObject_closure() {
    },
    MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_cborTagValue(null, null, obj, B.List_90_12, type$.CborListValue_dynamic),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAs(values, 0, t1),
        t3 = A.ExtractCborList_elemetMybeAs(values, 1, new A.MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic);
      return new A.MoneroAPIProvider(t2, A.ExtractCborList_elementAs(values, 2, t1), B.ServiceProtocol_HTTP_0_http, t3, true);
    },
    MoneroAPIProvider: function MoneroAPIProvider(t0, t1, t2, t3, t4) {
      var _ = this;
      _.httpNodeUri = t0;
      _.identifier = t1;
      _.protocol = t2;
      _.auth = t3;
      _.allowInWeb3 = t4;
    },
    MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject_closure: function MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject_closure() {
    },
    RippleAPIProvider_RippleAPIProvider(identifier, uri) {
      return new A.RippleAPIProvider(uri, identifier, A.ServiceProtocol_fromURI(uri), null, true);
    },
    RippleAPIProvider_RippleAPIProvider$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_decodeCborTags(null, obj, B.List_90_9, type$.CborListValue_dynamic),
        protocolId = A.ExtractCborList_elementAs(values, 1, type$.nullable_int),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAs(values, 0, t1),
        t3 = A.ServiceProtocol_fromID(protocolId == null ? 0 : protocolId),
        t4 = A.ExtractCborList_elemetMybeAs(values, 2, new A.RippleAPIProvider_RippleAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic);
      return new A.RippleAPIProvider(t2, A.ExtractCborList_elementAs(values, 3, t1), t3, t4, true);
    },
    RippleAPIProvider: function RippleAPIProvider(t0, t1, t2, t3, t4) {
      var _ = this;
      _.uri = t0;
      _.identifier = t1;
      _.protocol = t2;
      _.auth = t3;
      _.allowInWeb3 = t4;
    },
    RippleAPIProvider_RippleAPIProvider$fromCborBytesOrObject_closure: function RippleAPIProvider_RippleAPIProvider$fromCborBytesOrObject_closure() {
    },
    SolanaAPIProvider_SolanaAPIProvider$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_decodeCborTags(null, obj, B.List_90_5, type$.CborListValue_dynamic),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAs(values, 0, t1),
        t3 = A.ExtractCborList_elemetMybeAs(values, 1, new A.SolanaAPIProvider_SolanaAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic);
      return new A.SolanaAPIProvider(t2, A.ExtractCborList_elementAs(values, 2, t1), B.ServiceProtocol_HTTP_0_http, t3, true);
    },
    SolanaAPIProvider: function SolanaAPIProvider(t0, t1, t2, t3, t4) {
      var _ = this;
      _.httpNodeUri = t0;
      _.identifier = t1;
      _.protocol = t2;
      _.auth = t3;
      _.allowInWeb3 = t4;
    },
    SolanaAPIProvider_SolanaAPIProvider$fromCborBytesOrObject_closure: function SolanaAPIProvider_SolanaAPIProvider$fromCborBytesOrObject_closure() {
    },
    StellarAPIProvider_StellarAPIProvider$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_decodeCborTags(null, obj, B.List_90_11, type$.CborListValue_dynamic),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAs(values, 0, t1),
        t3 = A.ExtractCborList_elementAs(values, 1, t1),
        t4 = A.ExtractCborList_elemetMybeAs(values, 2, new A.StellarAPIProvider_StellarAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic);
      return new A.StellarAPIProvider(t2, t3, A.ExtractCborList_elementAs(values, 3, t1), B.ServiceProtocol_HTTP_0_http, t4, true);
    },
    StellarAPIProvider: function StellarAPIProvider(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.horizonUrl = t0;
      _.sorobanUrl = t1;
      _.identifier = t2;
      _.protocol = t3;
      _.auth = t4;
      _.allowInWeb3 = t5;
    },
    StellarAPIProvider_StellarAPIProvider$fromCborBytesOrObject_closure: function StellarAPIProvider_StellarAPIProvider$fromCborBytesOrObject_closure() {
    },
    SubstrateAPIProvider_SubstrateAPIProvider(identifier, uri) {
      return new A.SubstrateAPIProvider(uri, identifier, A.ServiceProtocol_fromURI(uri), null, true);
    },
    SubstrateAPIProvider_SubstrateAPIProvider$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_decodeCborTags(null, obj, B.List_90_10, type$.CborListValue_dynamic),
        protocolId = A.ExtractCborList_elementAs(values, 1, type$.nullable_int),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAs(values, 0, t1),
        t3 = A.ServiceProtocol_fromID(protocolId == null ? 0 : protocolId),
        t4 = A.ExtractCborList_elemetMybeAs(values, 2, new A.SubstrateAPIProvider_SubstrateAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic);
      return new A.SubstrateAPIProvider(t2, A.ExtractCborList_elementAs(values, 3, t1), t3, t4, true);
    },
    SubstrateAPIProvider: function SubstrateAPIProvider(t0, t1, t2, t3, t4) {
      var _ = this;
      _.uri = t0;
      _.identifier = t1;
      _.protocol = t2;
      _.auth = t3;
      _.allowInWeb3 = t4;
    },
    SubstrateAPIProvider_SubstrateAPIProvider$fromCborBytesOrObject_closure: function SubstrateAPIProvider_SubstrateAPIProvider$fromCborBytesOrObject_closure() {
    },
    SuiAPIProvider$(auth, fullNodeUri, identifier) {
      return new A.SuiAPIProvider(fullNodeUri, identifier, B.ServiceProtocol_HTTP_0_http, auth, true);
    },
    SuiAPIProvider_SuiAPIProvider$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_decodeCborTags(null, obj, B.List_90_14, type$.CborListValue_dynamic),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAs(values, 0, t1);
      return A.SuiAPIProvider$(A.ExtractCborList_elemetMybeAs(values, 1, new A.SuiAPIProvider_SuiAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic), t2, A.ExtractCborList_elementAs(values, 2, t1));
    },
    SuiAPIProvider: function SuiAPIProvider(t0, t1, t2, t3, t4) {
      var _ = this;
      _.fullNodeUri = t0;
      _.identifier = t1;
      _.protocol = t2;
      _.auth = t3;
      _.allowInWeb3 = t4;
    },
    SuiAPIProvider_SuiAPIProvider$fromCborBytesOrObject_closure: function SuiAPIProvider_SuiAPIProvider$fromCborBytesOrObject_closure() {
    },
    TonAPIProvider_TonAPIProvider(apiType, auth, identifier, serviceName, uri, websiteUri) {
      return new A.TonAPIProvider(apiType, uri, identifier, A.ServiceProtocol_fromURI(uri), auth, true);
    },
    TonAPIProvider_TonAPIProvider$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_decodeCborTags(null, obj, B.List_90_8, type$.CborListValue_dynamic),
        protocolId = A.ExtractCborList_elementAs(values, 1, type$.nullable_int),
        t1 = type$.String,
        apiType = A.TonApiType_TonApiType$fromValue(A.ExtractCborList_elementAs(values, 2, t1)),
        t2 = A.ExtractCborList_elementAs(values, 0, t1),
        t3 = A.ServiceProtocol_fromID(protocolId == null ? 0 : protocolId),
        t4 = A.ExtractCborList_elemetMybeAs(values, 3, new A.TonAPIProvider_TonAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic);
      return new A.TonAPIProvider(apiType, t2, A.ExtractCborList_elementAs(values, 4, t1), t3, t4, true);
    },
    TonAPIProvider: function TonAPIProvider(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.apiType = t0;
      _.uri = t1;
      _.identifier = t2;
      _.protocol = t3;
      _.auth = t4;
      _.allowInWeb3 = t5;
    },
    TonAPIProvider_TonAPIProvider$fromCborBytesOrObject_closure: function TonAPIProvider_TonAPIProvider$fromCborBytesOrObject_closure() {
    },
    TronAPIProvider$(auth, httpNodeUri, identifier, solidityProvider) {
      return new A.TronAPIProvider(httpNodeUri, solidityProvider, identifier, B.ServiceProtocol_HTTP_0_http, auth, true);
    },
    TronAPIProvider_TronAPIProvider$fromCborBytesOrObject(obj) {
      var cbor = A.CborSerializable_decodeCborTags(null, obj, B.List_90_4, type$.CborListValue_dynamic),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAs(cbor, 0, t1),
        t3 = A.EthereumAPIProvider_EthereumAPIProvider$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 1));
      return A.TronAPIProvider$(A.ExtractCborList_elemetMybeAs(cbor, 2, new A.TronAPIProvider_TronAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic), t2, A.ExtractCborList_elementAt(cbor, 3, t1), t3);
    },
    TronAPIProvider: function TronAPIProvider(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.httpNodeUri = t0;
      _.solidityProvider = t1;
      _.identifier = t2;
      _.protocol = t3;
      _.auth = t4;
      _.allowInWeb3 = t5;
    },
    TronAPIProvider_TronAPIProvider$fromCborBytesOrObject_closure: function TronAPIProvider_TronAPIProvider$fromCborBytesOrObject_closure() {
    },
    ServiceProtocol_fromID(id) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_G5k, new A.ServiceProtocol_fromID_closure(id), null);
    },
    ServiceProtocol_fromURI(url) {
      var lower = url.toLowerCase();
      if (B.JSString_methods.startsWith$1(lower, "http"))
        return B.ServiceProtocol_HTTP_0_http;
      else if (B.JSString_methods.startsWith$1(lower, "ws"))
        return B.ServiceProtocol_WebSocket_3_websocket;
      else
        throw A.wrapException(B.WalletException_Fui);
    },
    ServiceProtocol: function ServiceProtocol(t0, t1, t2) {
      this.value = t0;
      this.id = t1;
      this._name = t2;
    },
    ServiceProtocol_fromID_closure: function ServiceProtocol_fromID_closure(t0) {
      this.id = t0;
    },
    APIUtils__findProviders(identifier, providers, type) {
      var aptosProviders, aptosProviderIdentifier, t1, grapQl, fullnode;
      if (providers.length === 0)
        return A._setArrayType([], type$.JSArray_APIProvider);
      switch (type) {
        case B.NetworkType_8zS:
          aptosProviders = new A.CastList(providers, A._arrayInstanceType(providers)._eval$1("CastList<1,AptosAPIProvider>"));
          aptosProviderIdentifier = identifier == null ? null : identifier.cast$1$0(0, type$.AptosProviderIdentifier);
          t1 = type$.AptosAPIProvider;
          grapQl = A.MethodUtils_nullOnException(new A.APIUtils__findProviders_closure(aptosProviders, aptosProviderIdentifier), t1);
          fullnode = A.MethodUtils_nullOnException(new A.APIUtils__findProviders_closure0(aptosProviders, aptosProviderIdentifier), t1);
          if (fullnode == null || grapQl == null)
            return A._setArrayType([], type$.JSArray_APIProvider);
          return A._setArrayType([fullnode, grapQl], type$.JSArray_APIProvider);
        default:
          return A._setArrayType([B.JSArray_methods.firstWhere$2$orElse(providers, new A.APIUtils__findProviders_closure1(identifier == null ? null : identifier.cast$1$0(0, type$.DefaultProviderIdentifier)), new A.APIUtils__findProviders_closure2(providers))], type$.JSArray_APIProvider);
      }
    },
    APIUtils_findNetworkProvider(network, allowInWeb3, identifier, $T) {
      var serviceProvider, t1 = {},
        providers = t1.providers = network.getAllProviders$0(),
        t2 = A._arrayInstanceType(providers),
        t3 = t2._eval$1("bool(1)")._as(new A.APIUtils_findNetworkProvider_closure());
      t2 = t2._eval$1("WhereIterable<1>");
      providers = A.List_List$_of(new A.WhereIterable(providers, t3, t2), t2._eval$1("Iterable.E"));
      t1.providers = providers;
      serviceProvider = A.MethodUtils_nullOnException(new A.APIUtils_findNetworkProvider_closure0(t1, identifier, network), type$.List_APIProvider);
      if (serviceProvider == null)
        serviceProvider = t1.providers;
      t1 = J.getInterceptor$asx(serviceProvider);
      if (t1.get$isEmpty(serviceProvider))
        return null;
      t1 = t1.get$first(serviceProvider);
      A.checkTypeBound($T, type$.APIProvider, "T", "toProvider");
      if (!$T._is(t1))
        A.throwExpression(B.WalletException_invalid_provider_infomarion_null);
      return $T._as(t1);
    },
    APIUtils__findProviders_closure: function APIUtils__findProviders_closure(t0, t1) {
      this.aptosProviders = t0;
      this.aptosProviderIdentifier = t1;
    },
    APIUtils__findProviders__closure2: function APIUtils__findProviders__closure2() {
    },
    APIUtils__findProviders__closure3: function APIUtils__findProviders__closure3(t0) {
      this.aptosProviderIdentifier = t0;
    },
    APIUtils__findProviders__closure4: function APIUtils__findProviders__closure4(t0) {
      this.graphQlProviders = t0;
    },
    APIUtils__findProviders_closure0: function APIUtils__findProviders_closure0(t0, t1) {
      this.aptosProviders = t0;
      this.aptosProviderIdentifier = t1;
    },
    APIUtils__findProviders__closure: function APIUtils__findProviders__closure() {
    },
    APIUtils__findProviders__closure0: function APIUtils__findProviders__closure0(t0) {
      this.aptosProviderIdentifier = t0;
    },
    APIUtils__findProviders__closure1: function APIUtils__findProviders__closure1(t0) {
      this.fullnodeProviders = t0;
    },
    APIUtils__findProviders_closure1: function APIUtils__findProviders_closure1(t0) {
      this.defaultIdentifier = t0;
    },
    APIUtils__findProviders_closure2: function APIUtils__findProviders_closure2(t0) {
      this.providers = t0;
    },
    APIUtils_findNetworkProvider_closure: function APIUtils_findNetworkProvider_closure() {
    },
    APIUtils_findNetworkProvider_closure0: function APIUtils_findNetworkProvider_closure0(t0, t1, t2) {
      this._box_0 = t0;
      this.identifier = t1;
      this.network = t2;
    },
    IntegerBalance_IntegerBalance$token(balance, token, immutable) {
      var currencyDecimal = token.decimal,
        showDecimal = currencyDecimal > 8 ? 8 : currencyDecimal,
        currency = new A.IntegerBalance(token, true, $.$get$_BigIntImpl_zero(), showDecimal);
      currency._updateBalance$1(balance);
      return currency;
    },
    IntegerBalance: function IntegerBalance(t0, t1, t2, t3) {
      var _ = this;
      _._token = t0;
      _.allowNegative = t1;
      _._balance = t2;
      _.__IntegerBalance__price_A = $;
      _.__IntegerBalance_showDecimal_F = t3;
    },
    WalletNetwork_fromCborBytesOrObject(obj) {
      var t1, cbor, _null = null;
      if (obj == null) {
        null.toString;
        t1 = A.CborUtils__decode(null, 0).value;
      } else
        t1 = obj;
      type$.CborTagValue_dynamic._as(t1);
      switch (A.NetworkType_fromTag(t1.tags)) {
        case B.NetworkType_yCL:
          cbor = A.CborSerializable_decodeCborTags(_null, t1, B.List_80_0_1, type$.CborListValue_dynamic);
          return new A.WalletBitcoinNetwork(A.ExtractCborList_elementAt(cbor, 0, type$.int), A.BitcoinParams_BitcoinParams$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 1)));
        case B.NetworkType_ibN:
          cbor = A.CborSerializable_decodeCborTags(_null, t1, B.List_80_0_10, type$.CborListValue_dynamic);
          return new A.WalletBitcoinCashNetwork(A.ExtractCborList_elementAt(cbor, 0, type$.int), A.BitcoinParams_BitcoinParams$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 1)));
        case B.NetworkType_v4g:
          cbor = A.CborSerializable_decodeCborTags(_null, t1, B.List_80_0_2, type$.CborListValue_dynamic);
          return new A.WalletXRPNetwork(A.ExtractCborList_elementAt(cbor, 0, type$.int), A.RippleNetworkParams_RippleNetworkParams$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 1)));
        case B.NetworkType_ccB:
          cbor = A.CborSerializable_decodeCborTags(_null, t1, B.List_80_0_3, type$.CborListValue_dynamic);
          return new A.WalletEthereumNetwork(A.ExtractCborList_elementAt(cbor, 0, type$.int), A.EthereumNetworkParams_EthereumNetworkParams$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 1)));
        case B.NetworkType_Rlb:
          cbor = A.CborSerializable_decodeCborTags(_null, t1, B.List_80_0_5, type$.CborListValue_dynamic);
          return new A.WalletSolanaNetwork(A.ExtractCborList_elementAt(cbor, 0, type$.int), A.SolanaNetworkParams_SolanaNetworkParams$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 1)));
        case B.NetworkType_4By:
          cbor = A.CborSerializable_decodeCborTags(_null, t1, B.List_80_0_6, type$.CborListValue_dynamic);
          return new A.WalletCardanoNetwork(A.ExtractCborList_elementAt(cbor, 0, type$.int), A.CardanoNetworkParams_CardanoNetworkParams$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 1)));
        case B.NetworkType_kHF:
          cbor = A.CborSerializable_decodeCborTags(_null, t1, B.List_80_0_7, type$.CborListValue_dynamic);
          return new A.WalletCosmosNetwork(A.ExtractCborList_elementAt(cbor, 0, type$.int), A.CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 1)));
        case B.NetworkType_zIX:
          cbor = A.CborSerializable_decodeCborTags(_null, t1, B.List_80_0_11, type$.CborListValue_dynamic);
          return new A.WalletTonNetwork(A.ExtractCborList_elementAt(cbor, 0, type$.int), A.TonNetworkParams_TonNetworkParams$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 1)));
        case B.NetworkType_EUu:
          cbor = A.CborSerializable_decodeCborTags(_null, t1, B.List_80_0_4, type$.CborListValue_dynamic);
          return new A.WalletTronNetwork(A.ExtractCborList_elementAt(cbor, 0, type$.int), A.TronNetworkParams_TronNetworkParams$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 1)));
        case B.NetworkType_2OH:
          cbor = A.CborSerializable_decodeCborTags(_null, t1, B.List_80_0_12, type$.CborListValue_dynamic);
          return new A.WalletSubstrateNetwork(A.ExtractCborList_elementAt(cbor, 0, type$.int), A.SubstrateNetworkParams_SubstrateNetworkParams$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 1)));
        case B.NetworkType_rCZ:
          cbor = A.CborSerializable_decodeCborTags(_null, t1, B.List_80_0_14, type$.CborListValue_dynamic);
          return new A.WalletStellarNetwork(A.ExtractCborList_elementAt(cbor, 0, type$.int), A.StellarNetworkParams_StellarNetworkParams$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 1)));
        case B.NetworkType_NkQ:
          cbor = A.CborSerializable_decodeCborTags(_null, t1, B.List_80_0_15, type$.CborListValue_dynamic);
          return new A.WalletMoneroNetwork(A.ExtractCborList_elementAt(cbor, 0, type$.int), A.MoneroNetworkParams_MoneroNetworkParams$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 1)));
        case B.NetworkType_8zS:
          cbor = A.CborSerializable_decodeCborTags(_null, t1, B.List_80_0_16, type$.CborListValue_dynamic);
          return new A.WalletAptosNetwork(A.ExtractCborList_elementAt(cbor, 0, type$.int), A.AptosNetworkParams_AptosNetworkParams$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 1)));
        case B.NetworkType_cHa:
          cbor = A.CborSerializable_decodeCborTags(_null, t1, B.List_80_0_17, type$.CborListValue_dynamic);
          return new A.WalletSuiNetwork(A.ExtractCborList_elementAt(cbor, 0, type$.int), A.SuiNetworkParams_SuiNetworkParams$fromCborBytesOrObject(A.ExtractCborList_getCborTag(cbor, 1)));
        default:
          throw A.wrapException(A.UnimplementedError$("network does not exist."));
      }
    },
    WalletBitcoinNetwork$(value, coinParam) {
      return new A.WalletBitcoinNetwork(value, coinParam);
    },
    WalletBitcoinCashNetwork$(value, coinParam) {
      return new A.WalletBitcoinCashNetwork(value, coinParam);
    },
    WalletXRPNetwork$(value, coinParam) {
      return new A.WalletXRPNetwork(value, coinParam);
    },
    WalletEthereumNetwork$(value, coinParam) {
      return new A.WalletEthereumNetwork(value, coinParam);
    },
    WalletTronNetwork$(value, coinParam) {
      return new A.WalletTronNetwork(value, coinParam);
    },
    WalletSolanaNetwork$(value, coinParam) {
      return new A.WalletSolanaNetwork(value, coinParam);
    },
    WalletCardanoNetwork$(value, coinParam) {
      return new A.WalletCardanoNetwork(value, coinParam);
    },
    WalletCosmosNetwork$(value, coinParam) {
      return new A.WalletCosmosNetwork(value, coinParam);
    },
    WalletTonNetwork$(value, coinParam) {
      return new A.WalletTonNetwork(value, coinParam);
    },
    WalletSubstrateNetwork$(value, coinParam) {
      return new A.WalletSubstrateNetwork(value, coinParam);
    },
    WalletStellarNetwork$(value, coinParam) {
      return new A.WalletStellarNetwork(value, coinParam);
    },
    WalletMoneroNetwork$(value, coinParam) {
      return new A.WalletMoneroNetwork(value, coinParam);
    },
    WalletAptosNetwork$(value, coinParam) {
      return new A.WalletAptosNetwork(value, coinParam);
    },
    WalletSuiNetwork$(value, coinParam) {
      return new A.WalletSuiNetwork(value, coinParam);
    },
    WalletNetwork: function WalletNetwork() {
    },
    WalletNetwork_getAllProviders_closure: function WalletNetwork_getAllProviders_closure() {
    },
    WalletBitcoinNetwork: function WalletBitcoinNetwork(t0, t1) {
      this.value = t0;
      this.coinParam = t1;
    },
    WalletBitcoinCashNetwork: function WalletBitcoinCashNetwork(t0, t1) {
      this.value = t0;
      this.coinParam = t1;
    },
    WalletXRPNetwork: function WalletXRPNetwork(t0, t1) {
      this.value = t0;
      this.coinParam = t1;
    },
    WalletEthereumNetwork: function WalletEthereumNetwork(t0, t1) {
      this.value = t0;
      this.coinParam = t1;
    },
    WalletTronNetwork: function WalletTronNetwork(t0, t1) {
      this.value = t0;
      this.coinParam = t1;
    },
    WalletSolanaNetwork: function WalletSolanaNetwork(t0, t1) {
      this.value = t0;
      this.coinParam = t1;
    },
    WalletCardanoNetwork: function WalletCardanoNetwork(t0, t1) {
      this.value = t0;
      this.coinParam = t1;
    },
    WalletCosmosNetwork: function WalletCosmosNetwork(t0, t1) {
      this.value = t0;
      this.coinParam = t1;
    },
    WalletTonNetwork: function WalletTonNetwork(t0, t1) {
      this.value = t0;
      this.coinParam = t1;
    },
    WalletSubstrateNetwork: function WalletSubstrateNetwork(t0, t1) {
      this.value = t0;
      this.coinParam = t1;
    },
    WalletStellarNetwork: function WalletStellarNetwork(t0, t1) {
      this.value = t0;
      this.coinParam = t1;
    },
    WalletMoneroNetwork: function WalletMoneroNetwork(t0, t1) {
      this.value = t0;
      this.coinParam = t1;
    },
    WalletAptosNetwork: function WalletAptosNetwork(t0, t1) {
      this.value = t0;
      this.coinParam = t1;
    },
    WalletSuiNetwork: function WalletSuiNetwork(t0, t1) {
      this.value = t0;
      this.coinParam = t1;
    },
    _WalletNetwork_Object_Equatable: function _WalletNetwork_Object_Equatable() {
    },
    _WalletNetwork_Object_Equatable_CborSerializable: function _WalletNetwork_Object_Equatable_CborSerializable() {
    },
    NetworkCoinParams_validateUpdateParams(token, updateToken) {
      if (updateToken.decimal !== token.decimal || B.JSString_methods.trim$0(updateToken.name).length === 0 || B.JSString_methods.trim$0(updateToken.symbol).length === 0)
        throw A.wrapException(B.WalletException_invalid_token_information_null);
      return updateToken;
    },
    NetworkCoinParams: function NetworkCoinParams() {
    },
    _NetworkCoinParams_Object_CborSerializable: function _NetworkCoinParams_Object_CborSerializable() {
    },
    AptosChainType_fromValue(value) {
      if (value == null || value > 170)
        return B.AptosChainType_null_devnet;
      return B.JSArray_methods.firstWhere$2$orElse(B.List_9wx, new A.AptosChainType_fromValue_closure(value), new A.AptosChainType_fromValue_closure0());
    },
    AptosNetworkParams_AptosNetworkParams$fromCborBytesOrObject(obj) {
      var t3, t4, t5, t6, t7,
        values = A.CborSerializable_decodeCborTags(null, obj, B.List_80_1_12, type$.CborListValue_dynamic),
        t1 = A.Token_Token$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 1, false, type$.CborTagValue_dynamic), new A.AptosNetworkParams_AptosNetworkParams$fromCborBytesOrObject_closure(), type$.AptosAPIProvider);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      t3 = type$.nullable_int;
      t4 = A.AptosChainType_fromValue(A.ExtractCborList_elementAs(values, 2, t3));
      t5 = A.ChainType_fromValue(A.ExtractCborList_elementAs(values, 3, type$.dynamic));
      t6 = type$.nullable_String;
      t7 = A.ExtractCborList_elementAs(values, 4, t6);
      t6 = A.ExtractCborList_elementAs(values, 5, t6);
      return A.AptosNetworkParams$(t7, t4, A.ExtractCborList_elementAs(values, 6, t3), t5, t2, t1, t6);
    },
    AptosNetworkParams$(addressExplorer, aptosChainType, bip32CoinType, chainType, providers, token, transactionExplorer) {
      return new A.AptosNetworkParams(aptosChainType, transactionExplorer, addressExplorer, token, A.List_List$unmodifiable(providers, type$.AptosAPIProvider), chainType, bip32CoinType);
    },
    AptosChainType: function AptosChainType(t0, t1) {
      this.id = t0;
      this._name = t1;
    },
    AptosChainType_fromValue_closure: function AptosChainType_fromValue_closure(t0) {
      this.value = t0;
    },
    AptosChainType_fromValue_closure0: function AptosChainType_fromValue_closure0() {
    },
    AptosNetworkParams: function AptosNetworkParams(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.aptosChainType = t0;
      _.transactionExplorer = t1;
      _.addressExplorer = t2;
      _.token = t3;
      _.providers = t4;
      _.chainType = t5;
      _.bip32CoinType = t6;
    },
    AptosNetworkParams_AptosNetworkParams$fromCborBytesOrObject_closure: function AptosNetworkParams_AptosNetworkParams$fromCborBytesOrObject_closure() {
    },
    BitcoinParams_BitcoinParams$fromCborBytesOrObject(obj) {
      var t4,
        values = A.CborSerializable_cborTagValue(null, null, obj, B.List_80_1_1, type$.CborListValue_dynamic),
        t1 = A.Token_Token$deserialize(A.ExtractCborList_getCborTag(values, 2)),
        t2 = A.BasedUtxoNetwork_fromName(A.ExtractCborList_elementAs(values, 3, type$.String)),
        t3 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 4, false, type$.CborTagValue_dynamic), new A.BitcoinParams_BitcoinParams$fromCborBytesOrObject_closure(), type$.BaseBitcoinAPIProvider);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      t4 = type$.nullable_String;
      return A.BitcoinParams$(A.ExtractCborList_elementAs(values, 6, t4), t3, t1, t2, A.ExtractCborList_elementAs(values, 7, t4));
    },
    BitcoinParams$(addressExplorer, providers, token, transacationNetwork, transactionExplorer) {
      var t1 = transacationNetwork.get$isMainnet() ? B.ChainType_mainnet : B.ChainType_testnet;
      return new A.BitcoinParams(transacationNetwork, transactionExplorer, addressExplorer, token, A.List_List$unmodifiable(providers, type$.BaseBitcoinAPIProvider), t1, null);
    },
    BitcoinParams: function BitcoinParams(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.transacationNetwork = t0;
      _.transactionExplorer = t1;
      _.addressExplorer = t2;
      _.token = t3;
      _.providers = t4;
      _.chainType = t5;
      _.bip32CoinType = t6;
    },
    BitcoinParams_BitcoinParams$fromCborBytesOrObject_closure: function BitcoinParams_BitcoinParams$fromCborBytesOrObject_closure() {
    },
    CardanoNetworkParams_CardanoNetworkParams$fromCborBytesOrObject(obj) {
      var t3, t4, t5,
        values = A.CborSerializable_decodeCborTags(null, obj, B.List_80_1_5, type$.CborListValue_dynamic),
        t1 = A.Token_Token$deserialize(A.ExtractCborList_getCborTag(values, 2)),
        t2 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 3, false, type$.CborTagValue_dynamic), new A.CardanoNetworkParams_CardanoNetworkParams$fromCborBytesOrObject_closure(), type$.CardanoAPIProvider);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      t3 = A.ChainType_fromValue(A.ExtractCborList_elementAs(values, 4, type$.dynamic));
      t4 = A.ExtractCborList_elementAs(values, 5, type$.int);
      t5 = type$.nullable_String;
      return A.CardanoNetworkParams$(A.ExtractCborList_elementAs(values, 6, t5), t3, t4, t2, t1, A.ExtractCborList_elementAs(values, 7, t5));
    },
    CardanoNetworkParams$(addressExplorer, chainType, magic, providers, token, transactionExplorer) {
      return new A.CardanoNetworkParams(magic, transactionExplorer, addressExplorer, token, A.List_List$unmodifiable(providers, type$.CardanoAPIProvider), chainType, null);
    },
    CardanoNetworkParams: function CardanoNetworkParams(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.magic = t0;
      _.transactionExplorer = t1;
      _.addressExplorer = t2;
      _.token = t3;
      _.providers = t4;
      _.chainType = t5;
      _.bip32CoinType = t6;
    },
    CardanoNetworkParams_CardanoNetworkParams$fromCborBytesOrObject_closure: function CardanoNetworkParams_CardanoNetworkParams$fromCborBytesOrObject_closure() {
    },
    CosmosNetworkParams_CosmosNetworkParams(addressExplorer, bip32CoinType, chainId, chainRegisteryName, chainType, denom, feeTokens, hrp, keysAlgs, networkConstantUri, networkType, providers, token, transactionExplorer) {
      if (feeTokens.length === 0)
        throw A.wrapException(A.WalletException$("at_least_one_fee_token_required"));
      if (token.decimal > 18)
        throw A.wrapException(A.WalletException$("invalid_token_exponent"));
      return new A.CosmosNetworkParams(hrp, denom, networkType, chainId, networkConstantUri, keysAlgs, feeTokens, chainRegisteryName, transactionExplorer, addressExplorer, token, A.List_List$unmodifiable(providers, type$.CosmosAPIProvider), chainType, bip32CoinType);
    },
    CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject(obj) {
      var t4, t5, t6, t7, t8, t9, t10, t11, t12, t13,
        values = A.CborSerializable_decodeCborTags(null, obj, B.List_80_1_6, type$.CborListValue_dynamic),
        t1 = A.Token_Token$deserialize(A.ExtractCborList_getCborTag(values, 2)),
        t2 = type$.CborTagValue_dynamic,
        t3 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 3, false, t2), new A.CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject_closure(), type$.CosmosAPIProvider);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      t4 = A.ChainType_fromValue(A.ExtractCborList_elementAs(values, 4, type$.dynamic));
      t5 = type$.String;
      t6 = A.ExtractCborList_elementAs(values, 5, t5);
      t7 = A.ExtractCborList_elementAs(values, 6, t5);
      t2 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 7, false, t2), new A.CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject_closure0(), type$.CosmosFeeToken);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      t8 = A.CosmosNetworkTypes_CosmosNetworkTypes$fromValue(A.ExtractCborList_elementAs(values, 8, type$.int));
      t9 = A.ExtractCborList_elementAs(values, 9, type$.nullable_int);
      t5 = A.ExtractCborList_elementAs(values, 10, t5);
      t10 = type$.nullable_String;
      t11 = A.ExtractCborList_elementAs(values, 11, t10);
      t12 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 12, false, type$.CborStringValue), new A.CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject_closure1(), type$.CosmosKeysAlgs);
      t12 = A.List_List$_of(t12, t12.$ti._eval$1("ListIterable.E"));
      t13 = A.ExtractCborList_elementAs(values, 13, t10);
      return A.CosmosNetworkParams_CosmosNetworkParams(A.ExtractCborList_elementAs(values, 14, t10), t9, t5, A.ExtractCborList_elementAs(values, 15, t10), t4, t7, t2, t6, t12, t11, t8, t3, t1, t13);
    },
    CosmosNetworkParams: function CosmosNetworkParams(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13) {
      var _ = this;
      _.hrp = t0;
      _.denom = t1;
      _.networkType = t2;
      _.chainId = t3;
      _.networkConstantUri = t4;
      _.keysAlgs = t5;
      _.feeTokens = t6;
      _.chainRegisteryName = t7;
      _.transactionExplorer = t8;
      _.addressExplorer = t9;
      _.token = t10;
      _.providers = t11;
      _.chainType = t12;
      _.bip32CoinType = t13;
    },
    CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject_closure: function CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject_closure() {
    },
    CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject_closure0: function CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject_closure0() {
    },
    CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject_closure1: function CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject_closure1() {
    },
    EthereumNetworkParams_EthereumNetworkParams(addressExplorer, bip32CoinType, chainId, chainType, defaultNetwork, providers, supportEIP1559, token, transactionExplorer) {
      if (chainId._isNegative || token.decimal !== 18)
        throw A.wrapException(B.WalletException_invalid_network_information_null);
      return new A.EthereumNetworkParams(chainId, supportEIP1559, defaultNetwork, transactionExplorer, addressExplorer, token, A.List_List$unmodifiable(providers, type$.EthereumAPIProvider), chainType, bip32CoinType);
    },
    EthereumNetworkParams_EthereumNetworkParams$fromCborBytesOrObject(obj) {
      var t6, t7, t8,
        cbor = A.CborSerializable_decodeCborTags(null, obj, B.List_80_1_3, type$.CborListValue_dynamic),
        defaultNetwork = A.ExtractCborList_elementAt(cbor, 7, type$.nullable_bool),
        t1 = A.ExtractCborList_elementAt(cbor, 0, type$.BigInt),
        t2 = A.ExtractCborList_elementAt(cbor, 1, type$.bool),
        t3 = type$.dynamic,
        t4 = A.ChainType_fromValue(A.ExtractCborList_elementAt(cbor, 2, t3)),
        t5 = A.Token_Token$deserialize(A.ExtractCborList_getCborTag(cbor, 5));
      t3 = J.map$1$1$ax(type$.List_dynamic._as(A.ExtractCborList_elementAt(cbor, 6, t3)), new A.EthereumNetworkParams_EthereumNetworkParams$fromCborBytesOrObject_closure(), type$.EthereumAPIProvider);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      t6 = A.ExtractCborList_elementAt(cbor, 8, type$.nullable_int);
      t7 = type$.nullable_String;
      t8 = A.ExtractCborList_elementAt(cbor, 9, t7);
      return A.EthereumNetworkParams_EthereumNetworkParams(A.ExtractCborList_elementAt(cbor, 10, t7), t6, t1, t4, defaultNetwork !== false, t3, t2, t5, t8);
    },
    EthereumNetworkParams: function EthereumNetworkParams(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.chainId = t0;
      _.supportEIP1559 = t1;
      _.defaultNetwork = t2;
      _.transactionExplorer = t3;
      _.addressExplorer = t4;
      _.token = t5;
      _.providers = t6;
      _.chainType = t7;
      _.bip32CoinType = t8;
    },
    EthereumNetworkParams_EthereumNetworkParams$fromCborBytesOrObject_closure: function EthereumNetworkParams_EthereumNetworkParams$fromCborBytesOrObject_closure() {
    },
    MoneroNetworkParams_MoneroNetworkParams$fromCborBytesOrObject(obj) {
      var t3, t4, t5, t6,
        values = A.CborSerializable_decodeCborTags(null, obj, B.List_80_1_11, type$.CborListValue_dynamic),
        t1 = A.Token_Token$deserialize(A.ExtractCborList_getCborTag(values, 2)),
        t2 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 3, false, type$.CborObject), new A.MoneroNetworkParams_MoneroNetworkParams$fromCborBytesOrObject_closure(), type$.MoneroAPIProvider);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      t3 = A.ChainType_fromValue(A.ExtractCborList_elementAs(values, 4, type$.dynamic));
      t4 = type$.nullable_String;
      t5 = A.MoneroNetwork_fromName(A.ExtractCborList_elementAs(values, 5, t4));
      t6 = A.ExtractCborList_elementAs(values, 7, type$.int);
      return A.MoneroNetworkParams$(A.ExtractCborList_elementAs(values, 8, t4), t3, t5, t2, t6, t1, A.ExtractCborList_elementAs(values, 9, t4));
    },
    MoneroNetworkParams$(addressExplorer, chainType, network, providers, rctHeight, token, transactionExplorer) {
      return new A.MoneroNetworkParams(network, rctHeight, transactionExplorer, addressExplorer, token, A.List_List$unmodifiable(providers, type$.MoneroAPIProvider), chainType, null);
    },
    MoneroNetworkParams: function MoneroNetworkParams(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.network = t0;
      _.rctHeight = t1;
      _.transactionExplorer = t2;
      _.addressExplorer = t3;
      _.token = t4;
      _.providers = t5;
      _.chainType = t6;
      _.bip32CoinType = t7;
    },
    MoneroNetworkParams_MoneroNetworkParams$fromCborBytesOrObject_closure: function MoneroNetworkParams_MoneroNetworkParams$fromCborBytesOrObject_closure() {
    },
    RippleNetworkParams_RippleNetworkParams$fromCborBytesOrObject(obj) {
      var t3, t4, t5,
        values = A.CborSerializable_cborTagValue(null, null, obj, B.List_80_1_2, type$.CborListValue_dynamic),
        t1 = A.Token_Token$deserialize(A.ExtractCborList_getCborTag(values, 2)),
        t2 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 3, false, type$.CborTagValue_dynamic), new A.RippleNetworkParams_RippleNetworkParams$fromCborBytesOrObject_closure(), type$.RippleAPIProvider);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      t3 = A.ChainType_fromValue(A.ExtractCborList_elementAs(values, 4, type$.dynamic));
      t4 = A.ExtractCborList_elementAs(values, 5, type$.int);
      t5 = type$.nullable_String;
      return A.RippleNetworkParams$(A.ExtractCborList_elementAs(values, 6, t5), t3, t4, t2, t1, A.ExtractCborList_elementAs(values, 7, t5));
    },
    RippleNetworkParams$(addressExplorer, chainType, networkId, providers, token, transactionExplorer) {
      return new A.RippleNetworkParams(networkId, transactionExplorer, addressExplorer, token, A.List_List$unmodifiable(providers, type$.RippleAPIProvider), chainType, null);
    },
    RippleNetworkParams: function RippleNetworkParams(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.networkId = t0;
      _.transactionExplorer = t1;
      _.addressExplorer = t2;
      _.token = t3;
      _.providers = t4;
      _.chainType = t5;
      _.bip32CoinType = t6;
    },
    RippleNetworkParams_RippleNetworkParams$fromCborBytesOrObject_closure: function RippleNetworkParams_RippleNetworkParams$fromCborBytesOrObject_closure() {
    },
    SolanaNetworkType_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_ALU, new A.SolanaNetworkType_fromValue_closure(value), new A.SolanaNetworkType_fromValue_closure0());
    },
    SolanaNetworkParams_SolanaNetworkParams$fromCborBytesOrObject(obj) {
      var t3, t4, t5, t6,
        values = A.CborSerializable_decodeCborTags(null, obj, B.List_80_1_7, type$.CborListValue_dynamic),
        t1 = A.Token_Token$deserialize(A.ExtractCborList_getCborTag(values, 2)),
        t2 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 3, false, type$.CborTagValue_dynamic), new A.SolanaNetworkParams_SolanaNetworkParams$fromCborBytesOrObject_closure(), type$.SolanaAPIProvider);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      t3 = A.ChainType_fromValue(A.ExtractCborList_elementAs(values, 4, type$.dynamic));
      t4 = A.ExtractCborList_elementAs(values, 6, type$.int);
      t5 = A.SolanaNetworkType_fromValue(A.ExtractCborList_elementAs(values, 7, type$.nullable_int));
      t6 = type$.nullable_String;
      return A.SolanaNetworkParams$(A.ExtractCborList_elementAs(values, 8, t6), t4, t3, t2, t1, A.ExtractCborList_elementAs(values, 9, t6), t5);
    },
    SolanaNetworkParams$(addressExplorer, chainId, chainType, providers, token, transactionExplorer, type) {
      return new A.SolanaNetworkParams(chainId, type, transactionExplorer, addressExplorer, token, A.List_List$unmodifiable(providers, type$.SolanaAPIProvider), chainType, null);
    },
    SolanaNetworkType: function SolanaNetworkType(t0, t1, t2) {
      this.identifier = t0;
      this.value = t1;
      this._name = t2;
    },
    SolanaNetworkType_fromValue_closure: function SolanaNetworkType_fromValue_closure(t0) {
      this.value = t0;
    },
    SolanaNetworkType_fromValue_closure0: function SolanaNetworkType_fromValue_closure0() {
    },
    SolanaNetworkParams: function SolanaNetworkParams(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.chainId = t0;
      _.type = t1;
      _.transactionExplorer = t2;
      _.addressExplorer = t3;
      _.token = t4;
      _.providers = t5;
      _.chainType = t6;
      _.bip32CoinType = t7;
    },
    SolanaNetworkParams_SolanaNetworkParams$fromCborBytesOrObject_closure: function SolanaNetworkParams_SolanaNetworkParams$fromCborBytesOrObject_closure() {
    },
    StellarChainType_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_4NC, new A.StellarChainType_fromValue_closure(value), new A.StellarChainType_fromValue_closure0());
    },
    StellarNetworkParams_StellarNetworkParams$fromCborBytesOrObject(obj) {
      var t3, t4, t5,
        values = A.CborSerializable_cborTagValue(null, null, obj, B.List_80_1_10, type$.CborListValue_dynamic),
        t1 = A.Token_Token$deserialize(A.ExtractCborList_getCborTag(values, 2)),
        t2 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 3, false, type$.CborTagValue_dynamic), new A.StellarNetworkParams_StellarNetworkParams$fromCborBytesOrObject_closure(), type$.StellarAPIProvider);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      t3 = A.ChainType_fromValue(A.ExtractCborList_elementAs(values, 4, type$.dynamic));
      t4 = A.StellarChainType_fromValue(A.ExtractCborList_elementAs(values, 8, type$.nullable_int));
      t5 = type$.nullable_String;
      return A.StellarNetworkParams$(A.ExtractCborList_elementAs(values, 6, t5), t3, t2, t4, t1, A.ExtractCborList_elementAs(values, 7, t5));
    },
    StellarNetworkParams$(addressExplorer, chainType, providers, stellarChainType, token, transactionExplorer) {
      return new A.StellarNetworkParams(stellarChainType, transactionExplorer, addressExplorer, token, A.List_List$unmodifiable(providers, type$.StellarAPIProvider), chainType, null);
    },
    StellarChainType: function StellarChainType(t0, t1) {
      this.value = t0;
      this._name = t1;
    },
    StellarChainType_fromValue_closure: function StellarChainType_fromValue_closure(t0) {
      this.value = t0;
    },
    StellarChainType_fromValue_closure0: function StellarChainType_fromValue_closure0() {
    },
    StellarNetworkParams: function StellarNetworkParams(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.stellarChainType = t0;
      _.transactionExplorer = t1;
      _.addressExplorer = t2;
      _.token = t3;
      _.providers = t4;
      _.chainType = t5;
      _.bip32CoinType = t6;
    },
    StellarNetworkParams_StellarNetworkParams$fromCborBytesOrObject_closure: function StellarNetworkParams_StellarNetworkParams$fromCborBytesOrObject_closure() {
    },
    SubstrateNetworkParams_SubstrateNetworkParams$fromCborBytesOrObject(obj) {
      var t3, t4, t5, t6, t7, t8, t9, t10, t11,
        values = A.CborSerializable_cborTagValue(null, null, obj, B.List_80_1_9, type$.CborListValue_dynamic),
        t1 = A.Token_Token$deserialize(A.ExtractCborList_getCborTag(values, 2)),
        t2 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 3, false, type$.CborTagValue_dynamic), new A.SubstrateNetworkParams_SubstrateNetworkParams$fromCborBytesOrObject_closure(), type$.SubstrateAPIProvider);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      t3 = A.ChainType_fromValue(A.ExtractCborList_elementAs(values, 4, type$.dynamic));
      t4 = type$.int;
      t5 = A.ExtractCborList_elementAs(values, 5, t4);
      t6 = type$.nullable_int;
      t7 = A.SubstrateChainType_fromValue(A.ExtractCborList_elementAs(values, 8, t6));
      t8 = type$.nullable_String;
      t9 = A.ExtractCborList_elementAs(values, 9, t8);
      t6 = A.ExtractCborList_elementAs(values, 10, t6);
      t10 = A.ExtractCborList_elementAs(values, 11, t8);
      t8 = A.ExtractCborList_elementAs(values, 12, t8);
      t11 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 13, false, type$.CborIntValue), new A.SubstrateNetworkParams_SubstrateNetworkParams$fromCborBytesOrObject_closure0(), type$.SubstrateKeyAlgorithm);
      t11 = A.List_List$_of(t11, t11.$ti._eval$1("ListIterable.E"));
      return A.SubstrateNetworkParams$(t10, t6, t3, t9, t11, t2, A.ExtractCborList_elementAs(values, 14, t4), t5, t7, t1, t8);
    },
    SubstrateNetworkParams$(addressExplorer, bip32CoinType, chainType, gnesisBlock, keyAlgorithms, providers, specVersion, ss58Format, substrateChainType, token, transactionExplorer) {
      return new A.SubstrateNetworkParams(ss58Format, specVersion, gnesisBlock, substrateChainType, keyAlgorithms, transactionExplorer, addressExplorer, token, A.List_List$unmodifiable(providers, type$.SubstrateAPIProvider), chainType, bip32CoinType);
    },
    SubstrateNetworkParams: function SubstrateNetworkParams(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.ss58Format = t0;
      _.specVersion = t1;
      _.gnesisBlock = t2;
      _.substrateChainType = t3;
      _.keyAlgorithms = t4;
      _.transactionExplorer = t5;
      _.addressExplorer = t6;
      _.token = t7;
      _.providers = t8;
      _.chainType = t9;
      _.bip32CoinType = t10;
    },
    SubstrateNetworkParams_SubstrateNetworkParams$fromCborBytesOrObject_closure: function SubstrateNetworkParams_SubstrateNetworkParams$fromCborBytesOrObject_closure() {
    },
    SubstrateNetworkParams_SubstrateNetworkParams$fromCborBytesOrObject_closure0: function SubstrateNetworkParams_SubstrateNetworkParams$fromCborBytesOrObject_closure0() {
    },
    SuiChainType_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_1rA, new A.SuiChainType_fromValue_closure(value), new A.SuiChainType_fromValue_closure0());
    },
    SuiNetworkParams_SuiNetworkParams$fromCborBytesOrObject(obj) {
      var t3, t4, t5, t6, t7,
        values = A.CborSerializable_decodeCborTags(null, obj, B.List_80_1_13, type$.CborListValue_dynamic),
        t1 = A.Token_Token$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 1, false, type$.CborTagValue_dynamic), new A.SuiNetworkParams_SuiNetworkParams$fromCborBytesOrObject_closure(), type$.SuiAPIProvider);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      t3 = A.ChainType_fromValue(A.ExtractCborList_elementAs(values, 2, type$.dynamic));
      t4 = A.ExtractCborList_elementAs(values, 3, type$.String);
      t5 = type$.nullable_String;
      t6 = A.ExtractCborList_elementAs(values, 4, t5);
      t5 = A.ExtractCborList_elementAs(values, 5, t5);
      t7 = type$.nullable_int;
      return A.SuiNetworkParams$(t6, A.ExtractCborList_elementAs(values, 6, t7), t3, t4, t2, A.SuiChainType_fromValue(A.ExtractCborList_elementAs(values, 7, t7)), t1, t5);
    },
    SuiNetworkParams$(addressExplorer, bip32CoinType, chainType, identifier, providers, suiChain, token, transactionExplorer) {
      return new A.SuiNetworkParams(identifier, suiChain, transactionExplorer, addressExplorer, token, A.List_List$unmodifiable(providers, type$.SuiAPIProvider), chainType, bip32CoinType);
    },
    SuiChainType: function SuiChainType(t0, t1) {
      this.value = t0;
      this._name = t1;
    },
    SuiChainType_fromValue_closure: function SuiChainType_fromValue_closure(t0) {
      this.value = t0;
    },
    SuiChainType_fromValue_closure0: function SuiChainType_fromValue_closure0() {
    },
    SuiNetworkParams: function SuiNetworkParams(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.identifier = t0;
      _.suiChain = t1;
      _.transactionExplorer = t2;
      _.addressExplorer = t3;
      _.token = t4;
      _.providers = t5;
      _.chainType = t6;
      _.bip32CoinType = t7;
    },
    SuiNetworkParams_SuiNetworkParams$fromCborBytesOrObject_closure: function SuiNetworkParams_SuiNetworkParams$fromCborBytesOrObject_closure() {
    },
    TonNetworkParams$(addressExplorer, chainType, providers, token, transactionExplorer, workchain) {
      return new A.TonNetworkParams(workchain, transactionExplorer, addressExplorer, token, A.List_List$unmodifiable(providers, type$.TonAPIProvider), chainType, null);
    },
    TonNetworkParams_TonNetworkParams$fromCborBytesOrObject(obj) {
      var t5,
        values = A.CborSerializable_cborTagValue(null, null, obj, B.List_80_1_8, type$.CborListValue_dynamic),
        t1 = A.ExtractCborList_elementAs(values, 0, type$.int),
        t2 = A.ChainType_fromValue(A.ExtractCborList_elementAs(values, 1, type$.dynamic)),
        t3 = A.Token_Token$deserialize(A.ExtractCborList_getCborTag(values, 4)),
        t4 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 5, false, type$.CborTagValue_dynamic), new A.TonNetworkParams_TonNetworkParams$fromCborBytesOrObject_closure(), type$.TonAPIProvider);
      t4 = A.List_List$_of(t4, t4.$ti._eval$1("ListIterable.E"));
      t5 = type$.nullable_String;
      return A.TonNetworkParams$(A.ExtractCborList_elementAs(values, 6, t5), t2, t4, t3, A.ExtractCborList_elementAs(values, 7, t5), t1);
    },
    TonNetworkParams: function TonNetworkParams(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.workchain = t0;
      _.transactionExplorer = t1;
      _.addressExplorer = t2;
      _.token = t3;
      _.providers = t4;
      _.chainType = t5;
      _.bip32CoinType = t6;
    },
    TonNetworkParams_TonNetworkParams$fromCborBytesOrObject_closure: function TonNetworkParams_TonNetworkParams$fromCborBytesOrObject_closure() {
    },
    TronNetworkParams_TronNetworkParams$fromCborBytesOrObject(obj) {
      var t3, t4,
        values = A.CborSerializable_cborTagValue(null, null, obj, B.List_80_1_4, type$.CborListValue_dynamic),
        t1 = A.Token_Token$deserialize(A.ExtractCborList_getCborTag(values, 2)),
        t2 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 3, false, type$.CborTagValue_dynamic), new A.TronNetworkParams_TronNetworkParams$fromCborBytesOrObject_closure(), type$.TronAPIProvider);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      t3 = A.ChainType_fromValue(A.ExtractCborList_elementAt(values, 5, type$.dynamic));
      t4 = type$.nullable_String;
      return A.TronNetworkParams$(A.ExtractCborList_elementAs(values, 7, t4), t3, t2, t1, A.ExtractCborList_elementAs(values, 8, t4));
    },
    TronNetworkParams$(addressExplorer, chainType, providers, token, transactionExplorer) {
      return new A.TronNetworkParams(transactionExplorer, addressExplorer, token, A.List_List$unmodifiable(providers, type$.TronAPIProvider), chainType, null);
    },
    TronNetworkParams: function TronNetworkParams(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.transactionExplorer = t0;
      _.addressExplorer = t1;
      _.token = t2;
      _.providers = t3;
      _.chainType = t4;
      _.bip32CoinType = t5;
    },
    TronNetworkParams_TronNetworkParams$fromCborBytesOrObject_closure: function TronNetworkParams_TronNetworkParams$fromCborBytesOrObject_closure() {
    },
    CosmosFeeToken_CosmosFeeToken(averageGasPrice, denom, highGasPrice, lowGasPrice, token) {
      var networkDecimals, t1, t2, t3,
        e = token.decimal;
      if (e > 18)
        throw A.wrapException(A.WalletException$("invalid_token_exponent"));
      networkDecimals = A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(e), null);
      if (lowGasPrice == null)
        t1 = null;
      else {
        t1 = lowGasPrice.$mul(0, networkDecimals);
        t1 = A.IntegerBalance_IntegerBalance$token(t1.numerator.$tdiv(0, t1.denominator), token, false);
      }
      t2 = averageGasPrice.$mul(0, networkDecimals);
      t2 = A.IntegerBalance_IntegerBalance$token(t2.numerator.$tdiv(0, t2.denominator), token, false);
      if (highGasPrice == null)
        t3 = null;
      else {
        t3 = highGasPrice.$mul(0, networkDecimals);
        t3 = A.IntegerBalance_IntegerBalance$token(t3.numerator.$tdiv(0, t3.denominator), token, false);
      }
      return new A.CosmosFeeToken(token, denom, t1, t2, t3);
    },
    CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_decodeCborTags(null, obj, B.List_110_1, type$.CborListValue_dynamic),
        token = A.Token_Token$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t1 = type$.IntegerBalance,
        t2 = type$.BigInt;
      return new A.CosmosFeeToken(token, A.ExtractCborList_elementAs(values, 1, type$.String), A.ExtractCborList_elemetMybeAs(values, 2, new A.CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure(token), t1, t2), A.IntegerBalance_IntegerBalance$token(A.ExtractCborList_elementAs(values, 3, t2), token, true), A.ExtractCborList_elemetMybeAs(values, 4, new A.CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure0(token), t1, t2));
    },
    CosmosFeeToken: function CosmosFeeToken(t0, t1, t2, t3, t4) {
      var _ = this;
      _.token = t0;
      _.denom = t1;
      _.lowGasPrice = t2;
      _.averageGasPrice = t3;
      _.highGasPrice = t4;
    },
    CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure: function CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure(t0) {
      this.token = t0;
    },
    CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure0: function CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure0(t0) {
      this.token = t0;
    },
    _CosmosFeeToken_Object_CborSerializable: function _CosmosFeeToken_Object_CborSerializable() {
    },
    CosmosNetworkTypes_CosmosNetworkTypes$fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_Uht, new A.CosmosNetworkTypes_CosmosNetworkTypes$fromValue_closure(value), new A.CosmosNetworkTypes_CosmosNetworkTypes$fromValue_closure0());
    },
    CosmosNetworkTypes: function CosmosNetworkTypes(t0) {
      this.value = t0;
    },
    CosmosNetworkTypes_CosmosNetworkTypes$fromValue_closure: function CosmosNetworkTypes_CosmosNetworkTypes$fromValue_closure(t0) {
      this.value = t0;
    },
    CosmosNetworkTypes_CosmosNetworkTypes$fromValue_closure0: function CosmosNetworkTypes_CosmosNetworkTypes$fromValue_closure0() {
    },
    SubstrateChainType_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_doU, new A.SubstrateChainType_fromValue_closure(value), new A.SubstrateChainType_fromValue_closure0());
    },
    SubstrateChainType: function SubstrateChainType(t0, t1) {
      this.value = t0;
      this._name = t1;
    },
    SubstrateChainType_fromValue_closure: function SubstrateChainType_fromValue_closure(t0) {
      this.value = t0;
    },
    SubstrateChainType_fromValue_closure0: function SubstrateChainType_fromValue_closure0() {
    },
    TonAccountContextType_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_dRa, new A.TonAccountContextType_fromTag_closure(tag), new A.TonAccountContextType_fromTag_closure0());
    },
    TonAccountContext_TonAccountContext$deserialize(object) {
      var t1, t2,
        decode = A.CborSerializable_decode(null, null, object, type$.CborTagValue_dynamic),
        type = A.TonAccountContextType_fromTag(decode.tags),
        list = A.QuickCborTag_get_getList(decode),
        version = A.WalletVersion_WalletVersion$fromValue(A.ExtractCborList_elementAs(list, 0, type$.String)),
        bouncable = A.ExtractCborList_elementAt(list, 1, type$.bool);
      switch (type) {
        case B.TonAccountContextType_kI0:
          if (version.version > 2)
            A.throwExpression(B.WalletException_invalid_account_details_null);
          return new A.TonAccountLegacyContext(B.TonAccountContextType_kI0, version, bouncable);
        case B.TonAccountContextType_iax:
          t1 = A.ExtractCborList_elementAs(list, 2, type$.int);
          t2 = version.version;
          if (t2 < 3 || t2 > 4)
            A.throwExpression(B.WalletException_invalid_account_details_null);
          return new A.TonAccountSubWalletContext(t1, B.TonAccountContextType_iax, version, bouncable);
        case B.TonAccountContextType_Sw5:
          t1 = A.ExtractCborList_elementAs(list, 2, type$.int);
          if (version !== B.WalletVersion_v5R1_5)
            A.throwExpression(B.WalletException_invalid_account_details_null);
          return new A.TonAccountV5CustomContext(t1, B.TonAccountContextType_Sw5, B.WalletVersion_v5R1_5, bouncable);
        case B.TonAccountContextType_H4q:
          t1 = A.ExtractCborList_elementAs(list, 2, type$.int);
          if (version !== B.WalletVersion_v5R1_5)
            A.throwExpression(B.WalletException_invalid_account_details_null);
          return new A.TonAccountV5SubWalletContext(t1, B.TonAccountContextType_H4q, B.WalletVersion_v5R1_5, bouncable);
      }
    },
    TonAccountContextType: function TonAccountContextType(t0, t1) {
      this.tag = t0;
      this._name = t1;
    },
    TonAccountContextType_fromTag_closure: function TonAccountContextType_fromTag_closure(t0) {
      this.tag = t0;
    },
    TonAccountContextType_fromTag_closure0: function TonAccountContextType_fromTag_closure0() {
    },
    TonAccountContext: function TonAccountContext() {
    },
    TonAccountLegacyContext: function TonAccountLegacyContext(t0, t1, t2) {
      this.type = t0;
      this.version = t1;
      this.bouncable = t2;
    },
    TonAccountSubWalletContext: function TonAccountSubWalletContext(t0, t1, t2, t3) {
      var _ = this;
      _.subwalletId = t0;
      _.type = t1;
      _.version = t2;
      _.bouncable = t3;
    },
    TonAccountV5CustomContext: function TonAccountV5CustomContext(t0, t1, t2, t3) {
      var _ = this;
      _.walletId = t0;
      _.type = t1;
      _.version = t2;
      _.bouncable = t3;
    },
    TonAccountV5SubWalletContext: function TonAccountV5SubWalletContext(t0, t1, t2, t3) {
      var _ = this;
      _.subwalletId = t0;
      _.type = t1;
      _.version = t2;
      _.bouncable = t3;
    },
    _TonAccountContext_Object_CborSerializable: function _TonAccountContext_Object_CborSerializable() {
    },
    _TonAccountContext_Object_CborSerializable_Equatable: function _TonAccountContext_Object_CborSerializable_Equatable() {
    },
    TronChainType_fromId(id) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_ubO, new A.TronChainType_fromId_closure(id), new A.TronChainType_fromId_closure0());
    },
    TronChainType: function TronChainType(t0, t1, t2) {
      this.id = t0;
      this.genesisBlockNumber = t1;
      this._name = t2;
    },
    TronChainType_fromId_closure: function TronChainType_fromId_closure(t0) {
      this.id = t0;
    },
    TronChainType_fromId_closure0: function TronChainType_fromId_closure0() {
    },
    WalletLockTime_fromValue(value) {
      if (value === 0)
        return B.WalletLockTime_300_fiveMinute;
      return B.JSArray_methods.firstWhere$2$orElse(B.List_N4P, new A.WalletLockTime_fromValue_closure(value), new A.WalletLockTime_fromValue_closure0());
    },
    WalletLockTime: function WalletLockTime(t0, t1) {
      this.value = t0;
      this._name = t1;
    },
    WalletLockTime_fromValue_closure: function WalletLockTime_fromValue_closure(t0) {
      this.value = t0;
    },
    WalletLockTime_fromValue_closure0: function WalletLockTime_fromValue_closure0() {
    },
    CoingeckoCoin: function CoingeckoCoin(t0, t1, t2) {
      this.apiId = t0;
      this.coinName = t1;
      this.symbol = t2;
    },
    _CoingeckoCoin_Object_CborSerializable: function _CoingeckoCoin_Object_CborSerializable() {
    },
    _CoingeckoCoin_Object_CborSerializable_JsonSerialization: function _CoingeckoCoin_Object_CborSerializable_JsonSerialization() {
    },
    Token_Token$deserialize(obj) {
      var cbor, $name, symbol, decimal, image, market, t1, exception, bytes = null;
      try {
        cbor = A.CborSerializable_cborTagValue(bytes, null, obj, B.List_110, type$.CborListValue_dynamic);
        t1 = type$.String;
        $name = A.ExtractCborList_elementAs(cbor, 0, t1);
        symbol = A.ExtractCborList_elementAs(cbor, 1, t1);
        decimal = A.ExtractCborList_elementAs(cbor, 2, type$.int);
        t1 = type$.CborTagValue_dynamic;
        image = A.ExtractCborList_elemetMybeAs(cbor, 3, new A.Token_Token$deserialize_closure(), type$.APPImage, t1);
        market = A.ExtractCborList_elemetMybeAs(cbor, 4, new A.Token_Token$deserialize_closure0(), type$.CoingeckoCoin, t1);
        t1 = A.Token_Token(image, decimal, market, $name, symbol);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.WalletException_invalid_token_information_null);
      }
    },
    Token_Token(assetLogo, decimal, market, $name, symbol) {
      if (decimal < 0 || decimal > 255)
        throw A.wrapException(B.WalletException_invalid_token_information_null);
      A.StrUtils_substring($name, 20);
      A.StrUtils_substring(symbol, 5);
      return new A.Token(decimal, $name, symbol, market, assetLogo);
    },
    APPToken: function APPToken() {
    },
    Token: function Token(t0, t1, t2, t3, t4) {
      var _ = this;
      _.decimal = t0;
      _.name = t1;
      _.symbol = t2;
      _.market = t3;
      _.assetLogo = t4;
    },
    Token_Token$deserialize_closure: function Token_Token$deserialize_closure() {
    },
    Token_Token$deserialize_closure0: function Token_Token$deserialize_closure0() {
    },
    _APPToken_Object_CborSerializable: function _APPToken_Object_CborSerializable() {
    },
    _APPToken_Object_CborSerializable_Equatable: function _APPToken_Object_CborSerializable_Equatable() {
    },
    HDWallets_HDWallets$fromCborBytesOrObject(hex) {
      var t4,
        cbor = A.CborSerializable_cborTagValue(null, hex, null, B.List_60_1, type$.CborListValue_dynamic),
        t1 = type$.HDWallet,
        wallets = J.map$1$1$ax(A.ExtractCborList_elementAt(cbor, 0, type$.List_dynamic), new A.HDWallets_HDWallets$fromCborBytesOrObject_closure(), t1),
        t2 = wallets.$ti,
        t3 = type$.String;
      t2 = A.Map_Map$fromEntries(new A.MappedListIterable(wallets, t2._eval$1("MapEntry<String,HDWallet>(ListIterable.E)")._as(new A.HDWallets_HDWallets$fromCborBytesOrObject_closure0()), t2._eval$1("MappedListIterable<ListIterable.E,MapEntry<String,HDWallet>>")), t3, t1);
      t4 = A.ExtractCborList_elementAt(cbor, 1, type$.nullable_String);
      return new A.HDWallets(A.ConstantMap_ConstantMap$from(t2, t3, t1), t4);
    },
    HDWallets: function HDWallets(t0, t1) {
      this._wallets = t0;
      this._defaultWallet = t1;
    },
    HDWallets_HDWallets$fromCborBytesOrObject_closure: function HDWallets_HDWallets$fromCborBytesOrObject_closure() {
    },
    HDWallets_HDWallets$fromCborBytesOrObject_closure0: function HDWallets_HDWallets$fromCborBytesOrObject_closure0() {
    },
    HDWallet: function HDWallet(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._checksum = t0;
      _.name = t1;
      _._wallet_provider$_data = t2;
      _.requiredPassword = t3;
      _.protectWallet = t4;
      _.locktime = t5;
      _.network = t6;
      _.created = t7;
    },
    _HDWallets_Object_CborSerializable: function _HDWallets_Object_CborSerializable() {
    },
    Web3RequestException: function Web3RequestException(t0, t1, t2, t3) {
      var _ = this;
      _.message = t0;
      _.code = t1;
      _.walletCode = t2;
      _.data = t3;
    },
    _Web3RequestException_Object_Equatable: function _Web3RequestException_Object_Equatable() {
    },
    Web3ChainMessage: function Web3ChainMessage(t0, t1) {
      this.type = t0;
      this.authenticated = t1;
    },
    Web3EncryptedMessage: function Web3EncryptedMessage(t0, t1) {
      this.message = t0;
      this.nonce = t1;
    },
    _Web3EncryptedMessage_Object_CborSerializable: function _Web3EncryptedMessage_Object_CborSerializable() {
    },
    Web3ExceptionMessage: function Web3ExceptionMessage(t0, t1, t2, t3, t4) {
      var _ = this;
      _.message = t0;
      _.code = t1;
      _.walletCode = t2;
      _.data = t3;
      _.authenticated = t4;
    },
    Web3ExceptionMessage_toJson_closure: function Web3ExceptionMessage_toJson_closure() {
    },
    Web3WalletResponseMessage: function Web3WalletResponseMessage(t0, t1, t2) {
      this.authenticated = t0;
      this.result = t1;
      this.network = t2;
    },
    Web3MessageCore: function Web3MessageCore() {
    },
    _Web3MessageCore_Object_CborSerializable: function _Web3MessageCore_Object_CborSerializable() {
    },
    Web3MessageTypes: function Web3MessageTypes(t0, t1) {
      this.tag = t0;
      this._name = t1;
    },
    Web3AccountAcitvity: function Web3AccountAcitvity(t0, t1, t2, t3, t4) {
      var _ = this;
      _.method = t0;
      _.date = t1;
      _.path = t2;
      _.address = t3;
      _.id = t4;
    },
    _Web3AccountAcitvity_Object_CborSerializable: function _Web3AccountAcitvity_Object_CborSerializable() {
    },
    _Web3AccountAcitvity_Object_CborSerializable_Equatable: function _Web3AccountAcitvity_Object_CborSerializable_Equatable() {
    },
    Web3APPAuthentication_toApplicationId(url) {
      var t2, t3, scheme, userInfo, host, query, fragment, port, isFile, hasAuthority, path, _null = null,
        uri = A.Uri_tryParse(url == null ? "" : url),
        t1 = uri == null ? _null : uri.get$host().length === 0;
      if (t1 !== false)
        return _null;
      t1 = uri.get$host();
      t2 = uri.get$scheme();
      t3 = uri.get$port();
      scheme = A._Uri__makeScheme(t2, 0, t2.length);
      userInfo = A._Uri__makeUserInfo(_null, 0, 0);
      host = A._Uri__makeHost(t1, 0, t1.length, false);
      query = A._Uri__makeQuery(_null, 0, 0, _null);
      fragment = A._Uri__makeFragment(_null, 0, 0);
      port = A._Uri__makePort(t3, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = A._Uri__makePath(_null, 0, 0, _null, scheme, hasAuthority);
      t2 = scheme.length === 0;
      if (t2 && t1 && !B.JSString_methods.startsWith$1(path, "/"))
        path = A._Uri__normalizeRelativePath(path, !t2 || hasAuthority);
      else
        path = A._Uri__removeDotSegments(path);
      return A._Uri$_internal(scheme, userInfo, t1 && B.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment).normalizePath$0().get$_text();
    },
    Web3APPAuthentication$_(active, activities, applicationId, applicationKey, chains, icon, $name, token) {
      var t1 = A.ConstantMap_ConstantMap$from(chains, type$.NetworkType, type$.Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider);
      A.BytesUtils_validateListOfBytes(token);
      return new A.Web3APPAuthentication(applicationKey, $name, active, A.List_List$unmodifiable(token, type$.int), t1, A.List_List$unmodifiable(activities, type$.Web3AccountAcitvity), applicationId, icon);
    },
    Web3APPAuthentication_Web3APPAuthentication$deserialize(hex) {
      var t5, t6, t7, t8,
        values = A.CborSerializable_cborTagValue(null, hex, null, B.List_161_0_0, type$.CborListValue_dynamic),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAt(values, 0, t1),
        t3 = A.ExtractCborList_elementAt(values, 1, t1),
        t4 = A.ExtractCborList_getCborTag(values, 2);
      t4 = t4 == null ? null : A.QuickCbor_to(t4, new A.Web3APPAuthentication_Web3APPAuthentication$deserialize_closure(), type$.APPImage, type$.CborObject);
      t5 = A.ExtractCborMap_generateMap(A.ExtractCborList_elementAt(values, 3, type$.CborMapValue_dynamic_dynamic), new A.Web3APPAuthentication_Web3APPAuthentication$deserialize_closure0(), new A.Web3APPAuthentication_Web3APPAuthentication$deserialize_closure1(), type$.NetworkType, type$.Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider);
      t6 = A.ExtractCborList_elementAt(values, 4, type$.bool);
      t7 = A.ExtractCborList_elementAt(values, 5, type$.List_int);
      t1 = A.ExtractCborList_elementAt(values, 6, t1);
      t8 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 7, true, type$.CborTagValue_dynamic), new A.Web3APPAuthentication_Web3APPAuthentication$deserialize_closure2(), type$.Web3AccountAcitvity);
      t8 = A.List_List$_of(t8, t8.$ti._eval$1("ListIterable.E"));
      return A.Web3APPAuthentication$_(t6, t8, t2, t1, t5, t4, t3, t7);
    },
    Web3RequestAuthentication: function Web3RequestAuthentication() {
    },
    Web3APPAuthentication: function Web3APPAuthentication(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.applicationKey = t0;
      _._authenticated$_name = t1;
      _._active = t2;
      _.token = t3;
      _._chains = t4;
      _._activities = t5;
      _.applicationId = t6;
      _.icon = t7;
    },
    Web3APPAuthentication_createAuth_closure: function Web3APPAuthentication_createAuth_closure() {
    },
    Web3APPAuthentication_createAuth_closure0: function Web3APPAuthentication_createAuth_closure0(t0) {
      this.i = t0;
    },
    Web3APPAuthentication_Web3APPAuthentication$deserialize_closure: function Web3APPAuthentication_Web3APPAuthentication$deserialize_closure() {
    },
    Web3APPAuthentication_Web3APPAuthentication$deserialize_closure0: function Web3APPAuthentication_Web3APPAuthentication$deserialize_closure0() {
    },
    Web3APPAuthentication_Web3APPAuthentication$deserialize_closure1: function Web3APPAuthentication_Web3APPAuthentication$deserialize_closure1() {
    },
    Web3APPAuthentication_Web3APPAuthentication$deserialize_closure2: function Web3APPAuthentication_Web3APPAuthentication$deserialize_closure2() {
    },
    Web3APPAuthentication_toCbor_closure: function Web3APPAuthentication_toCbor_closure() {
    },
    Web3APPData: function Web3APPData(t0, t1, t2, t3, t4) {
      var _ = this;
      _.active = t0;
      _.applicationId = t1;
      _.token = t2;
      _.networks = t3;
      _._chains = t4;
    },
    Web3APPData_toCbor_closure: function Web3APPData_toCbor_closure() {
    },
    Web3APPData_toCbor_closure0: function Web3APPData_toCbor_closure0() {
    },
    _Web3APPAuthentication_Web3RequestAuthentication_CborSerializable: function _Web3APPAuthentication_Web3RequestAuthentication_CborSerializable() {
    },
    _Web3APPData_Object_CborSerializable: function _Web3APPData_Object_CborSerializable() {
    },
    _Web3RequestAuthentication_Object_CborSerializable: function _Web3RequestAuthentication_Object_CborSerializable() {
    },
    Web3ChainAccount: function Web3ChainAccount() {
    },
    Web3ChainIdnetifier: function Web3ChainIdnetifier() {
    },
    Web3ChainDefaultIdnetifier: function Web3ChainDefaultIdnetifier(t0, t1) {
      this.identifier = t0;
      this.id = t1;
    },
    Web3ChainAuthenticated: function Web3ChainAuthenticated() {
    },
    Web3ChainAuthenticated_toCbor_closure: function Web3ChainAuthenticated_toCbor_closure(t0) {
      this.$this = t0;
    },
    Web3ChainAuthenticated_toCbor_closure0: function Web3ChainAuthenticated_toCbor_closure0() {
    },
    _Web3ChainAccount_Object_CborSerializable: function _Web3ChainAccount_Object_CborSerializable() {
    },
    _Web3ChainAccount_Object_CborSerializable_Equatable: function _Web3ChainAccount_Object_CborSerializable_Equatable() {
    },
    _Web3ChainAuthenticated_Object_CborSerializable: function _Web3ChainAuthenticated_Object_CborSerializable() {
    },
    _Web3ChainIdnetifier_Object_CborSerializable: function _Web3ChainIdnetifier_Object_CborSerializable() {
    },
    _Web3ChainIdnetifier_Object_CborSerializable_Equatable: function _Web3ChainIdnetifier_Object_CborSerializable_Equatable() {
    },
    Web3Chain_Web3Chain$deserialize(object, NETWORKADDRESS, CHAIN, ACCOUNT, CHAINACCOUT, NETWORK) {
      var chain,
        decode = A.CborSerializable_decode(null, null, object, type$.CborTagValue_dynamic);
      switch (A.NetworkType_fromTag(decode.tags)) {
        case B.NetworkType_ccB:
          chain = A.Web3EthereumChain_Web3EthereumChain$deserialize(decode);
          break;
        case B.NetworkType_EUu:
          chain = A.Web3TronChain_Web3TronChain$deserialize(decode);
          break;
        case B.NetworkType_Rlb:
          chain = A.Web3SolanaChain_Web3SolanaChain$deserialize(decode);
          break;
        case B.NetworkType_zIX:
          chain = A.Web3TonChain_Web3TonChain$deserialize(decode);
          break;
        case B.NetworkType_rCZ:
          chain = A.Web3StellarChain_Web3StellarChain$deserialize(decode);
          break;
        case B.NetworkType_2OH:
          chain = A.Web3SubstrateChain_Web3SubstrateChain$deserialize(decode);
          break;
        case B.NetworkType_8zS:
          chain = A.Web3AptosChain_Web3AptosChain$deserialize(decode);
          break;
        case B.NetworkType_cHa:
          chain = A.Web3SuiChain_Web3SuiChain$deserialize(decode);
          break;
        case B.NetworkType_kHF:
          chain = A.Web3CosmosChain_Web3CosmosChain$deserialize(decode);
          break;
        case B.NetworkType_yCL:
          chain = A.Web3BitcoinChain_Web3BitcoinChain$deserialize(decode);
          break;
        default:
          throw A.wrapException(B.WalletException_unsuported_feature_null);
      }
      if (!NETWORKADDRESS._eval$1("@<0>")._bind$1(CHAIN)._bind$1(ACCOUNT)._bind$1(CHAINACCOUT)._bind$1(NETWORK)._eval$1("Web3Chain<1,2,3,4,5>")._is(chain))
        throw A.wrapException(B.WalletException_data_verification_failed_null);
      return chain;
    },
    Web3Chain: function Web3Chain() {
    },
    Web3Chain_getCurrentPermissionNetwork_closure: function Web3Chain_getCurrentPermissionNetwork_closure(t0) {
      this.$this = t0;
    },
    Web3Chain_getCurrentPermissionNetwork_closure0: function Web3Chain_getCurrentPermissionNetwork_closure0(t0, t1) {
      this.$this = t0;
      this.existsNetworks = t1;
    },
    Web3Chain_getCurrentPermissionNetwork_closure1: function Web3Chain_getCurrentPermissionNetwork_closure1(t0) {
      this.$this = t0;
    },
    Web3Chain_getCurrentPermissionNetwork_closure2: function Web3Chain_getCurrentPermissionNetwork_closure2(t0) {
      this.$this = t0;
    },
    Web3Chain_updateChainAccount_closure: function Web3Chain_updateChainAccount_closure(t0) {
      this.$this = t0;
    },
    Web3Chain_toCbor_closure: function Web3Chain_toCbor_closure(t0) {
      this.$this = t0;
    },
    _Web3Chain_Object_CborSerializable: function _Web3Chain_Object_CborSerializable() {
    },
    _Web3Chain_Object_CborSerializable_Equatable: function _Web3Chain_Object_CborSerializable_Equatable() {
    },
    Web3ClientInfo_info(clientId, faviIcon, $name, url) {
      var uri, t1,
        applicationId = A.Web3APPAuthentication_toApplicationId(url);
      if (applicationId == null || clientId == null)
        return null;
      uri = A.Uri_parse(applicationId, 0, null);
      url.toString;
      t1 = $name == null ? null : $name.length === 0;
      if (t1 !== false)
        t1 = uri.get$host();
      else {
        $name.toString;
        t1 = $name;
      }
      return new A.Web3ClientInfo(faviIcon, url, applicationId, t1, clientId);
    },
    Web3ClientInfo: function Web3ClientInfo(t0, t1, t2, t3, t4) {
      var _ = this;
      _.image = t0;
      _.url = t1;
      _.applicationId = t2;
      _.name = t3;
      _.clientId = t4;
    },
    _Web3ClientInfo_Object_Equatable: function _Web3ClientInfo_Object_Equatable() {
    },
    Web3ChainNetworkData: function Web3ChainNetworkData(t0, t1, t2) {
      this.network = t0;
      this.serviceIdentifier = t1;
      this.$ti = t2;
    },
    Web3AptosChainAccount: function Web3AptosChainAccount(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.id = t0;
      _.publicKey = t1;
      _.signingScheme = t2;
      _.network = t3;
      _.keyIndex = t4;
      _.address = t5;
      _._defaultAddress = t6;
    },
    Web3AptosChainIdnetifier: function Web3AptosChainIdnetifier(t0, t1, t2) {
      this.chainId = t0;
      this.identifier = t1;
      this.id = t2;
    },
    Web3AptosChainAuthenticated: function Web3AptosChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3AptosChain$_(accounts, id) {
      return new A.Web3AptosChain(B.NetworkType_8zS, id, A.List_List$unmodifiable(accounts, type$.Web3AptosChainAccount));
    },
    Web3AptosChain_Web3AptosChain$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_16, type$.CborListValue_dynamic),
        t1 = J.map$1$1$ax(A.ExtractCborList_elementAt(values, 0, type$.List_dynamic), new A.Web3AptosChain_Web3AptosChain$deserialize_closure(), type$.Web3AptosChainAccount);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return A.Web3AptosChain$_(t1, A.ExtractCborList_elementAt(values, 1, type$.int));
    },
    Web3AptosChain: function Web3AptosChain(t0, t1, t2) {
      this.network = t0;
      this._id = t1;
      this._accounts = t2;
    },
    Web3AptosChain_Web3AptosChain$deserialize_closure: function Web3AptosChain_Web3AptosChain$deserialize_closure() {
    },
    Web3AptosChain_createAuthenticated_closure: function Web3AptosChain_createAuthenticated_closure() {
    },
    Web3AptosChain_createAuthenticated_closure0: function Web3AptosChain_createAuthenticated_closure0() {
    },
    Web3BitcoinChainAccount: function Web3BitcoinChainAccount(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.id = t0;
      _.type = t1;
      _.network = t2;
      _.publicKey = t3;
      _.witnessScript = t4;
      _.redeemScript = t5;
      _.keyIndex = t6;
      _.address = t7;
      _._defaultAddress = t8;
    },
    Web3BitcoinChainAuthenticated: function Web3BitcoinChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3BitcoinChain$_(accounts, id) {
      return new A.Web3BitcoinChain(B.NetworkType_yCL, id, A.List_List$unmodifiable(accounts, type$.Web3BitcoinChainAccount));
    },
    Web3BitcoinChain_Web3BitcoinChain$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_1, type$.CborListValue_dynamic),
        t1 = J.map$1$1$ax(A.ExtractCborList_elementAt(values, 0, type$.List_dynamic), new A.Web3BitcoinChain_Web3BitcoinChain$deserialize_closure(), type$.Web3BitcoinChainAccount);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return A.Web3BitcoinChain$_(t1, A.ExtractCborList_elementAt(values, 1, type$.int));
    },
    Web3BitcoinChain: function Web3BitcoinChain(t0, t1, t2) {
      this.network = t0;
      this._id = t1;
      this._accounts = t2;
    },
    Web3BitcoinChain_Web3BitcoinChain$deserialize_closure: function Web3BitcoinChain_Web3BitcoinChain$deserialize_closure() {
    },
    Web3BitcoinChain_createAuthenticated_closure: function Web3BitcoinChain_createAuthenticated_closure() {
    },
    Web3BitcoinChain_createAuthenticated_closure0: function Web3BitcoinChain_createAuthenticated_closure0() {
    },
    Web3CosmosChainAccount: function Web3CosmosChainAccount(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.id = t0;
      _.publicKey = t1;
      _.algo = t2;
      _.keyIndex = t3;
      _.address = t4;
      _._defaultAddress = t5;
    },
    Web3CosmoshainIdnetifier: function Web3CosmoshainIdnetifier(t0, t1) {
      this.chainId = t0;
      this.id = t1;
    },
    Web3CosmosChainAuthenticated: function Web3CosmosChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3CosmosChain$_(accounts, id) {
      return new A.Web3CosmosChain(B.NetworkType_kHF, id, A.List_List$unmodifiable(accounts, type$.Web3CosmosChainAccount));
    },
    Web3CosmosChain_Web3CosmosChain$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_7, type$.CborListValue_dynamic),
        t1 = J.map$1$1$ax(A.ExtractCborList_elementAt(values, 0, type$.List_dynamic), new A.Web3CosmosChain_Web3CosmosChain$deserialize_closure(), type$.Web3CosmosChainAccount);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return A.Web3CosmosChain$_(t1, A.ExtractCborList_elementAt(values, 1, type$.int));
    },
    Web3CosmosChain: function Web3CosmosChain(t0, t1, t2) {
      this.network = t0;
      this._id = t1;
      this._accounts = t2;
    },
    Web3CosmosChain_Web3CosmosChain$deserialize_closure: function Web3CosmosChain_Web3CosmosChain$deserialize_closure() {
    },
    Web3CosmosChain_createAuthenticated_closure: function Web3CosmosChain_createAuthenticated_closure() {
    },
    Web3CosmosChain_createAuthenticated_closure0: function Web3CosmosChain_createAuthenticated_closure0() {
    },
    Web3EthereumChainAccount: function Web3EthereumChainAccount(t0, t1, t2, t3, t4) {
      var _ = this;
      _.id = t0;
      _.publicKey = t1;
      _.keyIndex = t2;
      _.address = t3;
      _._defaultAddress = t4;
    },
    Web3EthereumChainIdnetifier: function Web3EthereumChainIdnetifier(t0, t1, t2) {
      this.chainId = t0;
      this.supportEIP1559 = t1;
      this.id = t2;
    },
    Web3EthereumChainAuthenticated: function Web3EthereumChainAuthenticated(t0, t1, t2, t3, t4) {
      var _ = this;
      _.serviceIdentifier = t0;
      _.networks = t1;
      _.currentNetwork = t2;
      _.networkType = t3;
      _.accounts = t4;
    },
    Web3EthereumChainAuthenticated_toCbor_closure: function Web3EthereumChainAuthenticated_toCbor_closure() {
    },
    Web3EthereumChainAuthenticated_toCbor_closure0: function Web3EthereumChainAuthenticated_toCbor_closure0() {
    },
    Web3EthereumChain$_(accounts, id) {
      return new A.Web3EthereumChain(B.NetworkType_ccB, id, A.List_List$unmodifiable(accounts, type$.Web3EthereumChainAccount));
    },
    Web3EthereumChain_Web3EthereumChain$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_3, type$.CborListValue_dynamic),
        t1 = J.map$1$1$ax(A.ExtractCborList_elementAt(values, 0, type$.List_dynamic), new A.Web3EthereumChain_Web3EthereumChain$deserialize_closure(), type$.Web3EthereumChainAccount);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return A.Web3EthereumChain$_(t1, A.ExtractCborList_elementAt(values, 1, type$.int));
    },
    Web3EthereumChain: function Web3EthereumChain(t0, t1, t2) {
      this.network = t0;
      this._id = t1;
      this._accounts = t2;
    },
    Web3EthereumChain_Web3EthereumChain$deserialize_closure: function Web3EthereumChain_Web3EthereumChain$deserialize_closure() {
    },
    Web3EthereumChain_createAuthenticated_closure: function Web3EthereumChain_createAuthenticated_closure() {
    },
    Web3EthereumChain_createAuthenticated_closure0: function Web3EthereumChain_createAuthenticated_closure0() {
    },
    Web3EthereumChain_createAuthenticated_closure1: function Web3EthereumChain_createAuthenticated_closure1(t0) {
      this.currentNetwork = t0;
    },
    Web3SolanaChainAccount: function Web3SolanaChainAccount(t0, t1, t2, t3, t4) {
      var _ = this;
      _.id = t0;
      _.network = t1;
      _.keyIndex = t2;
      _.address = t3;
      _._defaultAddress = t4;
    },
    Web3SolanaChainAuthenticated: function Web3SolanaChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3SolanaChain$_(accounts, id) {
      return new A.Web3SolanaChain(B.NetworkType_Rlb, id, A.List_List$unmodifiable(accounts, type$.Web3SolanaChainAccount));
    },
    Web3SolanaChain_Web3SolanaChain$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_5, type$.CborListValue_dynamic),
        t1 = J.map$1$1$ax(A.ExtractCborList_elementAt(values, 0, type$.List_dynamic), new A.Web3SolanaChain_Web3SolanaChain$deserialize_closure(), type$.Web3SolanaChainAccount);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return A.Web3SolanaChain$_(t1, A.ExtractCborList_elementAt(values, 1, type$.int));
    },
    Web3SolanaChain: function Web3SolanaChain(t0, t1, t2) {
      this.network = t0;
      this._id = t1;
      this._accounts = t2;
    },
    Web3SolanaChain_Web3SolanaChain$deserialize_closure: function Web3SolanaChain_Web3SolanaChain$deserialize_closure() {
    },
    Web3SolanaChain_createAuthenticated_closure: function Web3SolanaChain_createAuthenticated_closure() {
    },
    Web3SolanaChain_createAuthenticated_closure0: function Web3SolanaChain_createAuthenticated_closure0() {
    },
    Web3StellarChainAccount: function Web3StellarChainAccount(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.id = t0;
      _.publicKey = t1;
      _.network = t2;
      _.keyIndex = t3;
      _.address = t4;
      _._defaultAddress = t5;
    },
    Web3StellarChainAuthenticated: function Web3StellarChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3StellarChain$_(accounts, id) {
      return new A.Web3StellarChain(B.NetworkType_rCZ, id, A.List_List$unmodifiable(accounts, type$.Web3StellarChainAccount));
    },
    Web3StellarChain_Web3StellarChain$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_14, type$.CborListValue_dynamic),
        t1 = J.map$1$1$ax(A.ExtractCborList_elementAt(values, 0, type$.List_dynamic), new A.Web3StellarChain_Web3StellarChain$deserialize_closure(), type$.Web3StellarChainAccount);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return A.Web3StellarChain$_(t1, A.ExtractCborList_elementAt(values, 1, type$.int));
    },
    Web3StellarChain: function Web3StellarChain(t0, t1, t2) {
      this.network = t0;
      this._id = t1;
      this._accounts = t2;
    },
    Web3StellarChain_Web3StellarChain$deserialize_closure: function Web3StellarChain_Web3StellarChain$deserialize_closure() {
    },
    Web3StellarChain_createAuthenticated_closure: function Web3StellarChain_createAuthenticated_closure() {
    },
    Web3StellarChain_createAuthenticated_closure0: function Web3StellarChain_createAuthenticated_closure0() {
    },
    Web3SubstrateChainAccount: function Web3SubstrateChainAccount(t0, t1, t2, t3, t4) {
      var _ = this;
      _.id = t0;
      _.publicKey = t1;
      _.keyIndex = t2;
      _.address = t3;
      _._defaultAddress = t4;
    },
    Web3SubstrateChainIdnetifier: function Web3SubstrateChainIdnetifier(t0, t1, t2) {
      this.genesisHash = t0;
      this.specVersion = t1;
      this.id = t2;
    },
    Web3SubstrateChainAuthenticated: function Web3SubstrateChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3SubstrateChain$_(accounts, id) {
      return new A.Web3SubstrateChain(B.NetworkType_2OH, id, A.List_List$unmodifiable(accounts, type$.Web3SubstrateChainAccount));
    },
    Web3SubstrateChain_Web3SubstrateChain$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_12, type$.CborListValue_dynamic),
        t1 = J.map$1$1$ax(A.ExtractCborList_elementAt(values, 0, type$.List_dynamic), new A.Web3SubstrateChain_Web3SubstrateChain$deserialize_closure(), type$.Web3SubstrateChainAccount);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return A.Web3SubstrateChain$_(t1, A.ExtractCborList_elementAt(values, 1, type$.int));
    },
    Web3SubstrateChain: function Web3SubstrateChain(t0, t1, t2) {
      this.network = t0;
      this._id = t1;
      this._accounts = t2;
    },
    Web3SubstrateChain_Web3SubstrateChain$deserialize_closure: function Web3SubstrateChain_Web3SubstrateChain$deserialize_closure() {
    },
    Web3SubstrateChain_createAuthenticated_closure: function Web3SubstrateChain_createAuthenticated_closure() {
    },
    Web3SubstrateChain_createAuthenticated_closure0: function Web3SubstrateChain_createAuthenticated_closure0() {
    },
    Web3SuiChainAccount: function Web3SuiChainAccount(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.id = t0;
      _.publicKey = t1;
      _.signingScheme = t2;
      _.network = t3;
      _.keyIndex = t4;
      _.address = t5;
      _._defaultAddress = t6;
    },
    Web3SuiChainAuthenticated: function Web3SuiChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3SuiChain$_(accounts, id) {
      return new A.Web3SuiChain(B.NetworkType_cHa, id, A.List_List$unmodifiable(accounts, type$.Web3SuiChainAccount));
    },
    Web3SuiChain_Web3SuiChain$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_17, type$.CborListValue_dynamic),
        t1 = J.map$1$1$ax(A.ExtractCborList_elementAt(values, 0, type$.List_dynamic), new A.Web3SuiChain_Web3SuiChain$deserialize_closure(), type$.Web3SuiChainAccount);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return A.Web3SuiChain$_(t1, A.ExtractCborList_elementAt(values, 1, type$.int));
    },
    Web3SuiChain: function Web3SuiChain(t0, t1, t2) {
      this.network = t0;
      this._id = t1;
      this._accounts = t2;
    },
    Web3SuiChain_Web3SuiChain$deserialize_closure: function Web3SuiChain_Web3SuiChain$deserialize_closure() {
    },
    Web3SuiChain_createAuthenticated_closure: function Web3SuiChain_createAuthenticated_closure() {
    },
    Web3SuiChain_createAuthenticated_closure0: function Web3SuiChain_createAuthenticated_closure0() {
    },
    Web3TonChainAccount: function Web3TonChainAccount(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.id = t0;
      _.accountContext = t1;
      _.publicKey = t2;
      _.network = t3;
      _.keyIndex = t4;
      _.address = t5;
      _._defaultAddress = t6;
    },
    Web3TonChainAuthenticated: function Web3TonChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3TonChain$_(accounts, id) {
      return new A.Web3TonChain(B.NetworkType_zIX, id, A.List_List$unmodifiable(accounts, type$.Web3TonChainAccount));
    },
    Web3TonChain_Web3TonChain$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_11, type$.CborListValue_dynamic),
        t1 = J.map$1$1$ax(A.ExtractCborList_elementAt(values, 0, type$.List_dynamic), new A.Web3TonChain_Web3TonChain$deserialize_closure(), type$.Web3TonChainAccount);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return A.Web3TonChain$_(t1, A.ExtractCborList_elementAt(values, 1, type$.int));
    },
    Web3TonChain: function Web3TonChain(t0, t1, t2) {
      this.network = t0;
      this._id = t1;
      this._accounts = t2;
    },
    Web3TonChain_Web3TonChain$deserialize_closure: function Web3TonChain_Web3TonChain$deserialize_closure() {
    },
    Web3TonChain_createAuthenticated_closure: function Web3TonChain_createAuthenticated_closure() {
    },
    Web3TonChain_createAuthenticated_closure0: function Web3TonChain_createAuthenticated_closure0() {
    },
    Web3TronChainAccount: function Web3TronChainAccount(t0, t1, t2, t3, t4) {
      var _ = this;
      _.id = t0;
      _.publicKey = t1;
      _.keyIndex = t2;
      _.address = t3;
      _._defaultAddress = t4;
    },
    Web3TronChainIdnetifier: function Web3TronChainIdnetifier(t0, t1, t2, t3) {
      var _ = this;
      _.chainId = t0;
      _.solidityNode = t1;
      _.fullNode = t2;
      _.id = t3;
    },
    Web3TronChainAuthenticated: function Web3TronChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3TronChain$_(accounts, id) {
      return new A.Web3TronChain(B.NetworkType_EUu, id, A.List_List$unmodifiable(accounts, type$.Web3TronChainAccount));
    },
    Web3TronChain_Web3TronChain$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_4, type$.CborListValue_dynamic),
        t1 = J.map$1$1$ax(A.ExtractCborList_elementAt(values, 0, type$.List_dynamic), new A.Web3TronChain_Web3TronChain$deserialize_closure(), type$.Web3TronChainAccount);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return A.Web3TronChain$_(t1, A.ExtractCborList_elementAt(values, 1, type$.int));
    },
    Web3TronChain: function Web3TronChain(t0, t1, t2) {
      this.network = t0;
      this._id = t1;
      this._accounts = t2;
    },
    Web3TronChain_Web3TronChain$deserialize_closure: function Web3TronChain_Web3TronChain$deserialize_closure() {
    },
    Web3TronChain_createAuthenticated_closure: function Web3TronChain_createAuthenticated_closure() {
    },
    Web3TronChain_createAuthenticated_closure0: function Web3TronChain_createAuthenticated_closure0() {
    },
    Web3TronChain_createAuthenticated_closure1: function Web3TronChain_createAuthenticated_closure1(t0) {
      this.currentNetwork = t0;
    },
    PlatformInterface: function PlatformInterface() {
    },
    BaseSubstrateAddress_BaseSubstrateAddress(address) {
      var t2, decBytes, t3, ss58Format, ss58FormatLen, t4, checkSumLength, dataBytes, checksumBytes, prefixAndData, h, digest, checksumBytesGot, _null = null,
        t1 = $.$get$StringUtils__hexBytesRegex();
      if (t1._nativeRegExp.test(address))
        return A.SubstrateEthereumAddress_SubstrateEthereumAddress(address);
      t1 = type$.dynamic;
      t2 = type$.int;
      A.AddrKeyValidator_nullOrValidateAddressArgs(type$.Map_String_dynamic._as(A.LinkedHashMap_LinkedHashMap$_literal(["ss58_format", null], type$.String, t1)), "ss58_format", t2);
      decBytes = A.Base58Decoder_decode(address, B.Base58Alphabets_0);
      t3 = decBytes.length;
      if (0 >= t3)
        return A.ioore(decBytes, 0);
      ss58Format = decBytes[0];
      if ((ss58Format & 64) !== 0) {
        if (1 >= t3)
          return A.ioore(decBytes, 1);
        t3 = decBytes[1];
        ss58Format = ((ss58Format & 63) << 2 | B.JSInt_methods._shrOtherPositive$1(t3, 6) | (t3 & 63) << 8) >>> 0;
        ss58FormatLen = 2;
      } else
        ss58FormatLen = 1;
      if (B.JSArray_methods.contains$1(B.List_46_47, ss58Format))
        A.throwExpression(A.ArgumentException$("Invalid SS58 format (" + ss58Format + ")", _null));
      t3 = decBytes.length;
      t4 = type$.JSArray_int;
      checkSumLength = B.JSArray_methods.contains$1(A._setArrayType([33, 34], t4), t3 - ss58FormatLen) ? 2 : 1;
      dataBytes = A.List_List$from(B.JSArray_methods.sublist$2(decBytes, ss58FormatLen, decBytes.length - checkSumLength), true, t2);
      checksumBytes = A.List_List$unmodifiable(B.JSArray_methods.sublist$1(decBytes, decBytes.length - checkSumLength), t2);
      t3 = B.JSArray_methods.sublist$2(decBytes, 0, decBytes.length - checkSumLength);
      t1 = A.List_List$_of($.$get$_Ss58Const_checksumPrefix(), t1);
      B.JSArray_methods.addAll$1(t1, t3);
      prefixAndData = A.List_List$from(t1, true, t2);
      h = A.BLAKE2b$(new A.Blake2bConfig(_null, _null), 64);
      h.update$1(prefixAndData);
      digest = h.digest$0();
      A.zero(h._vtmp);
      A.zero(h._mtmp);
      A.zero(h._hash$_state);
      A.zero(h._hash$_buffer);
      t1 = h.__BLAKE2b__initialState_A;
      t1 === $ && A.throwLateFieldNI("_initialState");
      A.zero(t1);
      t1 = h._paddedKey;
      if (t1 != null)
        A.zero(t1);
      h._bufferLength = 0;
      A.zero(h._ctr);
      A.zero(h._flag);
      h._hash$_finished = h._lastNode = false;
      t1 = t3.length;
      checksumBytesGot = B.JSArray_methods.sublist$2(digest, 0, B.JSArray_methods.contains$1(A._setArrayType([33, 34], t4), t1) ? 2 : 1);
      if (!A.BytesUtils_bytesEqual(checksumBytesGot, checksumBytes))
        A.throwExpression(new A.SS58ChecksumError("Invalid checksum (expected " + A.BytesUtils_toHexString(checksumBytesGot, true, _null) + ", got " + A.BytesUtils_toHexString(checksumBytes, true, _null) + ")", _null));
      t1 = dataBytes.length;
      if (t1 !== 32)
        A.throwExpression(A.AddressConverterException$("Invalid address bytes. (expected 32, got " + t1 + ")", _null));
      return new A.SubstrateAddress(ss58Format, address);
    },
    SubstrateEthereumAddress_SubstrateEthereumAddress(address) {
      var checksumAddress, e, exception, t1;
      try {
        checksumAddress = A.EthAddrUtils_toChecksumAddress(address);
        return new A.SubstrateEthereumAddress(checksumAddress);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.DartSubstratePluginException$("Invalid moonbeam address.", A.LinkedHashMap_LinkedHashMap$_literal(["address", address, "error", J.toString$0$(e)], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    BaseSubstrateAddress: function BaseSubstrateAddress() {
    },
    SubstrateAddress: function SubstrateAddress(t0, t1) {
      this.ss58Format = t0;
      this.address = t1;
    },
    SubstrateEthereumAddress: function SubstrateEthereumAddress(t0) {
      this.address = t0;
    },
    DartSubstratePluginException$(message, details) {
      return new A.DartSubstratePluginException(message, details);
    },
    DartSubstratePluginException: function DartSubstratePluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    SubstrateKeyAlgorithm_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_odx, new A.SubstrateKeyAlgorithm_fromValue_closure(value), new A.SubstrateKeyAlgorithm_fromValue_closure0());
    },
    SubstrateKeyAlgorithm: function SubstrateKeyAlgorithm(t0, t1) {
      this.value = t0;
      this._name = t1;
    },
    SubstrateKeyAlgorithm_fromValue_closure: function SubstrateKeyAlgorithm_fromValue_closure(t0) {
      this.value = t0;
    },
    SubstrateKeyAlgorithm_fromValue_closure0: function SubstrateKeyAlgorithm_fromValue_closure0() {
    },
    StellarAccountAddress_StellarAccountAddress(address) {
      var decode, e, s, t1, exception;
      try {
        decode = new A.XlmAddrDecoder().decode$1(address);
        if (decode.type !== B.XlmAddrTypes_48_PublicKey) {
          t1 = A.StellarAddressException$("Incorrect address type.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", "PublicKey", "type", decode.type.toString$0(0)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
        decode.toString;
        return new A.StellarAccountAddress(address);
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.StellarAddressException)
          throw exception;
        else {
          e = t1;
          s = A.getTraceFromException(exception);
          t1 = A.StellarAddressException$("Invalid Stellar ED25519 public key address.", A.LinkedHashMap_LinkedHashMap$_literal(["error", J.toString$0$(e), "stack", J.toString$0$(s)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
      }
    },
    StellarAccountAddress: function StellarAccountAddress(t0) {
      this.baseAddress = t0;
    },
    StellarContractAddress_StellarContractAddress(address) {
      var decode, e, s, t1, exception;
      try {
        decode = new A.XlmAddrDecoder().decode$1(address);
        if (decode.type !== B.XlmAddrTypes_16_Contract) {
          t1 = A.StellarAddressException$("Incorrect address type.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", "Contract", "type", decode.type.toString$0(0)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
        decode.toString;
        return new A.StellarContractAddress(address);
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.StellarAddressException)
          throw exception;
        else {
          e = t1;
          s = A.getTraceFromException(exception);
          t1 = A.StellarAddressException$("Invalid Stellar contract address.", A.LinkedHashMap_LinkedHashMap$_literal(["error", J.toString$0$(e), "stack", J.toString$0$(s)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
      }
    },
    StellarContractAddress: function StellarContractAddress(t0) {
      this.baseAddress = t0;
    },
    StellarMuxedAddress_StellarMuxedAddress(address) {
      var decode, e, s, t1, t2, exception;
      try {
        decode = new A.XlmAddrDecoder().decode$1(address);
        if (decode.type !== B.XlmAddrTypes_96_Muxed) {
          t1 = A.StellarAddressException$("Incorrect address type.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", "Muxed", "type", decode.type.toString$0(0)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
        t1 = decode.baseAddress;
        t2 = decode.accountId;
        if (t2._isNegative || t2.compareTo$1(0, $.$get$maxU64()) > 0)
          A.throwExpression(A.ArgumentException$("Invalid Unsigned BigInt 64.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", $.$get$maxU64().get$bitLength(0), "bitLength", t2.get$bitLength(0), "value", t2.toString$0(0)], type$.String, type$.dynamic)));
        return new A.StellarMuxedAddress(t2, address, t1);
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.StellarAddressException)
          throw exception;
        else {
          e = t1;
          s = A.getTraceFromException(exception);
          t1 = A.StellarAddressException$("Invalid Muxed address.", A.LinkedHashMap_LinkedHashMap$_literal(["error", J.toString$0$(e), "stack", J.toString$0$(s)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
      }
    },
    StellarMuxedAddress: function StellarMuxedAddress(t0, t1, t2) {
      this.accountId = t0;
      this.muxedAddress = t1;
      this.baseAddress = t2;
    },
    StellarAddress_StellarAddress$fromBase32Addr(address) {
      switch (new A.XlmAddrDecoder().decode$1(address).type) {
        case B.XlmAddrTypes_96_Muxed:
          return A.StellarMuxedAddress_StellarMuxedAddress(address);
        case B.XlmAddrTypes_48_PublicKey:
          return A.StellarAccountAddress_StellarAccountAddress(address);
        case B.XlmAddrTypes_16_Contract:
          return A.StellarContractAddress_StellarContractAddress(address);
        case B.XlmAddrTypes_144_SecretKey:
          throw A.wrapException(B.DartStellarPlugingException_1si);
        default:
          throw A.wrapException(B.DartStellarPlugingException_eIz);
      }
    },
    StellarAddress: function StellarAddress() {
    },
    StellarAddressException$(message, details) {
      return new A.StellarAddressException(message, details);
    },
    StellarAddressException: function StellarAddressException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    DartStellarPlugingException: function DartStellarPlugingException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    TonAddress: function TonAddress(t0, t1, t2) {
      this.workChain = t0;
      this.hash = t1;
      this.defaultFlags = t2;
    },
    TonChain_fromWorkchain(workchain) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_niy, new A.TonChain_fromWorkchain_closure(workchain), new A.TonChain_fromWorkchain_closure0());
    },
    TonChain: function TonChain(t0, t1) {
      this.workchain = t0;
      this.id = t1;
    },
    TonChain_fromWorkchain_closure: function TonChain_fromWorkchain_closure(t0) {
      this.workchain = t0;
    },
    TonChain_fromWorkchain_closure0: function TonChain_fromWorkchain_closure0() {
    },
    TonContractException: function TonContractException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    WalletVersion_WalletVersion$fromValue($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_nif, new A.WalletVersion_WalletVersion$fromValue_closure($name), new A.WalletVersion_WalletVersion$fromValue_closure0($name));
    },
    WalletVersion: function WalletVersion(t0, t1) {
      this.name = t0;
      this.version = t1;
    },
    WalletVersion_WalletVersion$fromValue_closure: function WalletVersion_WalletVersion$fromValue_closure(t0) {
      this.name = t0;
    },
    WalletVersion_WalletVersion$fromValue_closure0: function WalletVersion_WalletVersion$fromValue_closure0(t0) {
      this.name = t0;
    },
    TonDartPluginException$(message, details) {
      return new A.TonDartPluginException(message, details);
    },
    TonDartPluginException: function TonDartPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    TonApiType_TonApiType$fromValue($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_vow, new A.TonApiType_TonApiType$fromValue_closure($name), new A.TonApiType_TonApiType$fromValue_closure0($name));
    },
    TonApiType: function TonApiType(t0) {
      this.name = t0;
    },
    TonApiType_TonApiType$fromValue_closure: function TonApiType_TonApiType$fromValue_closure(t0) {
      this.name = t0;
    },
    TonApiType_TonApiType$fromValue_closure0: function TonApiType_TonApiType$fromValue_closure0(t0) {
      this.name = t0;
    },
    _JSBackgroundHandler_init() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$._JSBackgroundHandler),
        $async$returnValue;
      var $async$_JSBackgroundHandler_init = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($.$get$AppNativeMethods_platform().getConfig$0(), $async$_JSBackgroundHandler_init);
            case 3:
              // returning from await.
              $async$returnValue = new A._JSBackgroundHandler(new A.SynchronizedLock());
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_JSBackgroundHandler_init, $async$completer);
    },
    _JSBackgroundHandler_sendWalletMessage(msg) {
      var allowTargets = B.List_WalletEventTarget_0;
      return A._JSBackgroundHandler_sendWalletMessage$body(msg);
    },
    _JSBackgroundHandler_sendWalletMessage$body(msg) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WalletEvent),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], completer, onMessage, r, t1, exception, t2, allowTargets, hasListener, $async$exception;
      var $async$_JSBackgroundHandler_sendWalletMessage = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              allowTargets = B.List_WalletEventTarget_0;
              hasListener = false;
              $async$handler = 3;
              completer = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_WalletEvent), type$._AsyncCompleter_WalletEvent);
              onMessage = new A._JSBackgroundHandler_sendWalletMessage_onMessage(allowTargets, msg, completer);
              $async$handler = 7;
              $async$goto = 10;
              return A._asyncAwait(A.Runtime_sendMessage_(type$.JSObject._as(A.extension().runtime), msg), $async$_JSBackgroundHandler_sendWalletMessage);
            case 10:
              // returning from await.
              r = $async$result;
              t1 = r;
              t1.toString;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              $async$handler = 3;
              // goto after finally
              $async$goto = 9;
              break;
            case 7:
              // catch
              $async$handler = 6;
              $async$exception = $async$errorStack.pop();
              t1 = init.G;
              t1.OnBackgroundListener_ = A._functionToJS3(onMessage);
              t2 = type$.JSObject;
              t2._as(t2._as(A.extension().runtime).onMessage).addListener(type$.JavaScriptFunction._as(t1.OnBackgroundListener_));
              hasListener = true;
              $async$goto = 11;
              return A._asyncAwait(completer.future, $async$_JSBackgroundHandler_sendWalletMessage);
            case 11:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              // goto after finally
              $async$goto = 9;
              break;
            case 6:
              // uncaught
              // goto uncaught
              $async$goto = 3;
              break;
            case 9:
              // after finally
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              if (hasListener) {
                t1 = type$.JSObject;
                t1._as(t1._as(A.extension().runtime).onMessage).removeListener(type$.JavaScriptFunction._as(init.G.OnBackgroundListener_));
              }
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$_JSBackgroundHandler_sendWalletMessage, $async$completer);
    },
    main() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        handler, t1;
      var $async$main = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait(A._JSBackgroundHandler_init(), $async$main);
            case 2:
              // returning from await.
              handler = $async$result;
              t1 = type$.JSObject;
              t1._as(t1._as(A.extension().runtime).onInstalled).addListener(A._functionToJS1(new A.main_closure()));
              t1._as(t1._as(A.extension().runtime).onMessage).addListener(A._functionToJS3(new A.main_closure0(handler)));
              handler.sendAlive$0();
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$main, $async$completer);
    },
    _JSBackgroundHandler: function _JSBackgroundHandler(t0) {
      this.lock = t0;
    },
    _JSBackgroundHandler__readNetworks_closure: function _JSBackgroundHandler__readNetworks_closure(t0) {
      this.keys = t0;
    },
    _JSBackgroundHandler__readNetworks_closure0: function _JSBackgroundHandler__readNetworks_closure0() {
    },
    _JSBackgroundHandler__readNetworks_closure1: function _JSBackgroundHandler__readNetworks_closure1(t0) {
      this.values = t0;
    },
    _JSBackgroundHandler__readNetworks_closure2: function _JSBackgroundHandler__readNetworks_closure2(t0, t1) {
      this._box_0 = t0;
      this.values = t1;
    },
    _JSBackgroundHandler__readNetworks_closure3: function _JSBackgroundHandler__readNetworks_closure3(t0) {
      this.values = t0;
    },
    _JSBackgroundHandler_getPermission_closure: function _JSBackgroundHandler_getPermission_closure(t0) {
      this.permission = t0;
    },
    _JSBackgroundHandler_send_closure: function _JSBackgroundHandler_send_closure() {
    },
    _JSBackgroundHandler_sendWalletMessage_onMessage: function _JSBackgroundHandler_sendWalletMessage_onMessage(t0, t1, t2) {
      this.allowTargets = t0;
      this.msg = t1;
      this.completer = t2;
    },
    _JSBackgroundHandler_sendWalletMessage_onMessage_closure: function _JSBackgroundHandler_sendWalletMessage_onMessage_closure(t0) {
      this.completer = t0;
    },
    _JSBackgroundHandler_sendWalletMessage_onMessage_closure0: function _JSBackgroundHandler_sendWalletMessage_onMessage_closure0(t0) {
      this.completer = t0;
    },
    _JSBackgroundHandler_openPopup_closure: function _JSBackgroundHandler_openPopup_closure(t0) {
      this.event = t0;
    },
    _JSBackgroundHandler_openPopup__closure: function _JSBackgroundHandler_openPopup__closure() {
    },
    _JSBackgroundHandler_openPopup__closure0: function _JSBackgroundHandler_openPopup__closure0() {
    },
    main_closure: function main_closure() {
    },
    main_closure0: function main_closure0(t0) {
      this.handler = t0;
    },
    main__closure: function main__closure(t0) {
      this.sendResponse = t0;
    },
    main__closure0: function main__closure0(t0) {
      this.sendResponse = t0;
    },
    main__closure1: function main__closure1(t0) {
      this.sendResponse = t0;
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    SegwitBech32Encoder__computeChecksum(hrp, data) {
      type$.List_int._as(data);
      if (0 >= data.length)
        return A.ioore(data, 0);
      return A.Bech32Utils_computeChecksum(hrp, data, data[0] === 0 ? B.Bech32Encodings_0 : B.Bech32Encodings_1);
    },
    AddrDecUtils_validateAndRemovePrefixBytes(addr, prefix) {
      var prefixGot = B.JSArray_methods.sublist$2(addr, 0, prefix.length);
      if (!A.BytesUtils_bytesEqual(prefix, prefixGot))
        throw A.wrapException(A.AddressConverterException$("Invalid prefix (expected " + A.S(prefix) + ", got " + A.S(prefixGot) + ")", null));
      return B.JSArray_methods.sublist$1(addr, prefix.length);
    },
    AddrDecUtils_validateBytesLength(addr, lenExp) {
      var t1 = addr.length !== lenExp;
      if (t1)
        throw A.wrapException(A.AddressConverterException$("Invalid length (expected " + lenExp + ", got " + addr.length + ")", null));
    },
    AddrDecUtils_validateLength(addr, lenExp) {
      var t1 = addr.length;
      if (t1 !== lenExp)
        throw A.wrapException(A.AddressConverterException$("Invalid length (expected " + lenExp + ", got " + t1 + ")", null));
    },
    AddrKeyValidator_nullOrValidateAddressArgs(kwargs, key, $T) {
      kwargs.$index(0, key);
      return null;
    },
    IPublicKey_IPublicKey$fromBytes(keybytes, type) {
      var point, t1, c, a, $P, s, t2, s2, u1, u2, u1_2, u2_2, v, invSqrt, t3, x2, y2, x, y, t, prefix, keyBytes, _null = null;
      switch (type) {
        case B.EllipticCurveTypes_4:
          point = A.ProjectiveECCPoint_ProjectiveECCPoint$fromBytes($.$get$Curves_curve256(), keybytes, _null);
          return new A.Nist256p1PublicKey(A.ECDSAPublicKey_ECDSAPublicKey($.$get$Curves_generator256(), point));
        case B.EllipticCurveTypes_5:
          point = A.ProjectiveECCPoint_ProjectiveECCPoint$fromBytes($.$get$Curves_curve256(), keybytes, _null);
          return new A.Nist256p1HybridPublicKey(A.ECDSAPublicKey_ECDSAPublicKey($.$get$Curves_generator256(), point));
        case B.EllipticCurveTypes_7:
          t1 = keybytes.length;
          if (t1 !== 32)
            A.throwExpression(A.CryptoException$("invalid public key bytes length expected 32 but " + t1, _null));
          c = $.$get$Curves_curveEd25519();
          a = c.a;
          $P = c.p;
          s = A.BigintUtils_fromBytes(keybytes, B.C_Endian0, false);
          t1 = A.RistrettoUtils_positiveMod(s, $P);
          t2 = $.$get$_BigIntImpl_one();
          t1 = t1.$and(0, t2).compareTo$1(0, t2);
          if (t1 === 0)
            A.throwExpression(B.CryptoException_RbC);
          s2 = A.RistrettoUtils_positiveMod(s.$mul(0, s), $P);
          u1 = A.RistrettoUtils_positiveMod(t2.$add(0, a.$mul(0, s2)), $P);
          u2 = A.RistrettoUtils_positiveMod(t2.$sub(0, a.$mul(0, s2)), $P);
          u1_2 = A.RistrettoUtils_positiveMod(u1.$mul(0, u1), $P);
          u2_2 = A.RistrettoUtils_positiveMod(u2.$mul(0, u2), $P);
          v = A.RistrettoUtils_positiveMod(a.$mul(0, c.d).$mul(0, u1_2).$sub(0, u2_2), $P);
          invSqrt = A.RistrettoUtils_sqrtUV(t2, A.RistrettoUtils_positiveMod(v.$mul(0, u2_2), $P));
          t1 = invSqrt.item2;
          t3 = J.getInterceptor$ns(t1);
          x2 = A.RistrettoUtils_positiveMod(t3.$mul(t1, u2), $P);
          y2 = A.RistrettoUtils_positiveMod(t3.$mul(t1, x2).$mul(0, v), $P);
          x = A.RistrettoUtils_positiveMod(s.$add(0, s).$mul(0, x2), $P);
          t1 = A.RistrettoUtils_positiveMod(x, $P).$and(0, t2).compareTo$1(0, t2);
          if (t1 === 0)
            x = A.RistrettoUtils_positiveMod(x.$negate(0), $P);
          y = A.RistrettoUtils_positiveMod(u1.$mul(0, y2), $P);
          t = A.RistrettoUtils_positiveMod(x.$mul(0, y), $P);
          t1 = true;
          if (invSqrt.item1) {
            t3 = A.RistrettoUtils_positiveMod(t, $P).$and(0, t2).compareTo$1(0, t2);
            if (t3 !== 0)
              t1 = y.compareTo$1(0, $.$get$_BigIntImpl_zero()) === 0;
          }
          if (t1)
            A.throwExpression(B.CryptoException_RbC);
          A.RistrettoPoint_RistrettoPoint$fromEdwardsPoint(new A.EDPoint(c, _null, false, B.List_empty14, A._setArrayType([x, y, t2, t], type$.JSArray_BigInt)));
          A.BytesUtils_validateListOfBytes(keybytes);
          return new A.Sr25519PublicKey(new A.SchnorrkelPublicKey(A.List_List$unmodifiable(keybytes, type$.int)));
        case B.EllipticCurveTypes_0:
          if (keybytes.length === 33) {
            prefix = B.JSArray_methods.sublist$2(keybytes, 0, 1);
            keyBytes = A.BytesUtils_bytesEqual(prefix, B.List_0) || A.BytesUtils_bytesEqual(prefix, B.List_237) ? B.JSArray_methods.sublist$1(keybytes, 1) : keybytes;
          } else
            keyBytes = keybytes;
          return new A.Ed25519PublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint($.$get$Curves_generatorED25519(), A.Ed25519Utils_asPoint(keyBytes)));
        case B.EllipticCurveTypes_2:
          t1 = keybytes.length;
          if (t1 === 33) {
            if (0 >= t1)
              return A.ioore(keybytes, 0);
            t1 = keybytes[0] === 0;
          } else
            t1 = false;
          keyBytes = t1 ? B.JSArray_methods.sublist$1(keybytes, 1) : keybytes;
          return new A.Ed25519KholawPublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint($.$get$Curves_generatorED25519(), A.Ed25519Utils_asPoint(keyBytes)));
        case B.EllipticCurveTypes_3:
          keyBytes = keybytes.length === 33 ? B.JSArray_methods.sublist$1(keybytes, 1) : keybytes;
          return new A.MoneroPublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint($.$get$Curves_generatorED25519(), A.Ed25519Utils_asPoint(keyBytes)));
        case B.EllipticCurveTypes_1:
          t1 = keybytes.length;
          if (t1 === 33) {
            if (0 >= t1)
              return A.ioore(keybytes, 0);
            t1 = keybytes[0] === 0;
          } else
            t1 = false;
          keyBytes = t1 ? B.JSArray_methods.sublist$1(keybytes, 1) : keybytes;
          return new A.Ed25519Blake2bPublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint($.$get$Curves_generatorED25519(), A.Ed25519Utils_asPoint(keyBytes)));
        default:
          return A.Secp256k1PublicKey_Secp256k1PublicKey$fromBytes(keybytes);
      }
    },
    Ed25519Utils_asPoint(point) {
      var t1, coords, x, y, t, t2, exception;
      try {
        t1 = $.$get$Curves_curveEd25519();
        coords = A.AbstractPoint_fromBytes(t1, point);
        x = coords.item1;
        y = coords.item2;
        t = x.$mul(0, y);
        t2 = A._setArrayType([x, y, $.$get$_BigIntImpl_one(), t], type$.JSArray_BigInt);
        return new A.EDPoint(t1, null, false, B.List_empty14, t2);
      } catch (exception) {
        t1 = A.CryptoException$("Invalid ED25519 point bytes.", null);
        throw A.wrapException(t1);
      }
    },
    RistrettoUtils_positiveMod(a, b) {
      var result = a.$mod(0, b);
      return result.compareTo$1(0, $.$get$_BigIntImpl_zero()) >= 0 ? result : b.$add(0, result);
    },
    RistrettoUtils__mExp(x, power, modulo) {
      var res;
      for (res = x; power.compareTo$1(0, $.$get$_BigIntImpl_zero()) > 0;) {
        res = res.$mul(0, res).$mod(0, modulo);
        power = power.$sub(0, $.$get$_BigIntImpl_one());
      }
      return res;
    },
    RistrettoUtils_sqrtUV(u, v) {
      var root2, useRoot2, noRoot,
        $P = $.$get$Curves_curveEd25519().p,
        v3 = A.RistrettoUtils_positiveMod(v.$mul(0, v).$mul(0, v), $P),
        t1 = u.$mul(0, A.RistrettoUtils_positiveMod(v3.$mul(0, v3).$mul(0, v), $P)),
        xCubed = t1.$mul(0, t1).$mod(0, $P).$mul(0, t1).$mod(0, $P),
        t2 = $.$get$_BigIntImpl_two(),
        xTo4th = A.RistrettoUtils__mExp(xCubed, t2, $P).$mul(0, xCubed).$mod(0, $P),
        t3 = $.$get$_BigIntImpl_one(),
        xTo5th = A.RistrettoUtils__mExp(xTo4th, t3, $P).$mul(0, t1).$mod(0, $P),
        xTo10th = A.RistrettoUtils__mExp(xTo5th, A._BigIntImpl__BigIntImpl$from(5), $P).$mul(0, xTo5th).$mod(0, $P),
        xTo20th = A.RistrettoUtils__mExp(xTo10th, A._BigIntImpl__BigIntImpl$from(10), $P).$mul(0, xTo10th).$mod(0, $P),
        xTo40th = A.RistrettoUtils__mExp(xTo20th, A._BigIntImpl__BigIntImpl$from(20), $P).$mul(0, xTo20th).$mod(0, $P),
        xTo80th = A.RistrettoUtils__mExp(xTo40th, A._BigIntImpl__BigIntImpl$from(40), $P).$mul(0, xTo40th).$mod(0, $P),
        result = A.RistrettoUtils__mExp(A.RistrettoUtils__mExp(A.RistrettoUtils__mExp(A.RistrettoUtils__mExp(xTo80th, A._BigIntImpl__BigIntImpl$from(80), $P).$mul(0, xTo80th).$mod(0, $P), A._BigIntImpl__BigIntImpl$from(80), $P).$mul(0, xTo80th).$mod(0, $P), A._BigIntImpl__BigIntImpl$from(10), $P).$mul(0, xTo10th).$mod(0, $P), t2, $P).$mul(0, t1).$mod(0, $P),
        x = A.RistrettoUtils_positiveMod(u.$mul(0, v3).$mul(0, result), $P),
        vx2 = A.RistrettoUtils_positiveMod(v.$mul(0, x).$mul(0, x), $P);
      t1 = $.$get$RistrettoUtils_sqrtM1();
      root2 = A.RistrettoUtils_positiveMod(x.$mul(0, t1), $P);
      t2 = vx2.compareTo$1(0, u);
      useRoot2 = vx2.compareTo$1(0, A.RistrettoUtils_positiveMod(u.$negate(0), $P)) === 0;
      noRoot = vx2.compareTo$1(0, A.RistrettoUtils_positiveMod(u.$negate(0).$mul(0, t1), $P)) === 0;
      if (useRoot2 || noRoot)
        x = root2;
      t1 = A.RistrettoUtils_positiveMod(x, $P).$and(0, t3).compareTo$1(0, t3);
      if (t1 === 0)
        x = A.RistrettoUtils_positiveMod(x.$negate(0), $P);
      t1 = t2 === 0 || useRoot2;
      return new A.Tuple(t1, x, type$.Tuple_bool_BigInt);
    },
    ECDSAUtils_polynomialExponentiationMod(base, exponent, polymod, p) {
      var $G, t2, t3, t4, s, k,
        t1 = exponent.compareTo$1(0, $.$get$_BigIntImpl_zero());
      if (t1 === 0)
        return A._setArrayType([$.$get$_BigIntImpl_one()], type$.JSArray_BigInt);
      t1 = type$.BigInt;
      $G = A.List_List$from(base, true, t1);
      t2 = $.$get$_BigIntImpl_two();
      t3 = exponent.$mod(0, t2);
      t4 = $.$get$_BigIntImpl_one();
      t3 = t3.compareTo$1(0, t4);
      s = t3 === 0 ? A.List_List$from($G, true, t1) : A._setArrayType([t4], type$.JSArray_BigInt);
      for (k = exponent; k.compareTo$1(0, t4) > 0;) {
        if (t2._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        k = k._div$1(t2);
        $G = A.ECDSAUtils_polynomialMultiplyMod($G, $G, polymod, p);
        t1 = k.$mod(0, t2).compareTo$1(0, t4);
        if (t1 === 0)
          s = A.ECDSAUtils_polynomialMultiplyMod($G, s, polymod, p);
      }
      return s;
    },
    ECDSAUtils_modularSquareRootPrime(a, p) {
      var b, t3, quadraticForm, t4, result,
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = a.compareTo$1(0, t1);
      if (t2 === 0)
        return t1;
      t1 = p.compareTo$1(0, $.$get$_BigIntImpl_two());
      if (t1 === 0)
        return a;
      if (B.JSInt_methods.get$isNegative(A.ECDSAUtils_jacobi(a, p)))
        throw A.wrapException(new A.SquareRootError(a.toString$0(0) + " has no square root modulo " + p.toString$0(0), null));
      t1 = p.$mod(0, A._BigIntImpl__BigIntImpl$from(4)).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(3));
      if (t1 === 0)
        return a.modPow$2(0, p.$add(0, $.$get$_BigIntImpl_one()).$tdiv(0, A._BigIntImpl__BigIntImpl$from(4)), p);
      t1 = p.$mod(0, A._BigIntImpl__BigIntImpl$from(8)).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(5));
      if (t1 === 0) {
        t1 = $.$get$_BigIntImpl_one();
        t1 = a.modPow$2(0, p.$sub(0, t1).$tdiv(0, A._BigIntImpl__BigIntImpl$from(4)), p).compareTo$1(0, t1);
        if (t1 === 0)
          return a.modPow$2(0, p.$add(0, A._BigIntImpl__BigIntImpl$from(3)).$tdiv(0, A._BigIntImpl__BigIntImpl$from(8)), p);
        return A._BigIntImpl__BigIntImpl$from(2).$mul(0, a).$mul(0, A._BigIntImpl__BigIntImpl$from(4).$mul(0, a).modPow$2(0, p.$sub(0, A._BigIntImpl__BigIntImpl$from(5)).$tdiv(0, A._BigIntImpl__BigIntImpl$from(8)), p)).$mod(0, p);
      }
      for (b = A._BigIntImpl__BigIntImpl$from(2); b.compareTo$1(0, p) < 0; b = b.$add(0, $.$get$_BigIntImpl_one())) {
        t1 = A.ECDSAUtils_jacobi(b.$mul(0, b).$sub(0, A._BigIntImpl__BigIntImpl$from(4).$mul(0, a)), p);
        if (t1 === 0 ? 1 / t1 < 0 : t1 < 0) {
          t1 = b.$negate(0);
          t2 = $.$get$_BigIntImpl_one();
          t3 = type$.JSArray_BigInt;
          quadraticForm = A._setArrayType([a, t1, t2], t3);
          t1 = $.$get$_BigIntImpl_zero();
          t3 = A._setArrayType([t1, t2], t3);
          t2 = p.$add(0, t2);
          t4 = A._BigIntImpl__BigIntImpl$from(2);
          if (t4._used === 0)
            A.throwExpression(B.C_IntegerDivisionByZeroException);
          result = A.ECDSAUtils_polynomialExponentiationMod(t3, t2._div$1(t4), quadraticForm, p);
          if (1 >= result.length)
            return A.ioore(result, 1);
          t1 = result[1].compareTo$1(0, t1);
          if (t1 !== 0)
            throw A.wrapException(B.SquareRootError_j4B);
          if (0 >= result.length)
            return A.ioore(result, 0);
          return result[0];
        }
      }
      throw A.wrapException(B.SquareRootError_hZ7);
    },
    ECDSAUtils_polynomialMultiplyMod(m1, m2, polymod, p) {
      var i, j, t2, t3,
        t1 = m1.length + m2.length - 1,
        prod = A.List_List$filled(t1, $.$get$_BigIntImpl_zero(), false, type$.BigInt);
      for (i = 0; i < m1.length; ++i)
        for (j = 0; j < m2.length; ++j) {
          t2 = i + j;
          if (!(t2 < t1))
            return A.ioore(prod, t2);
          t3 = prod[t2];
          if (!(i < m1.length))
            return A.ioore(m1, i);
          B.JSArray_methods.$indexSet(prod, t2, t3.$add(0, m1[i].$mul(0, m2[j])).$mod(0, p));
        }
      return A.ECDSAUtils_polynomialReduceMod(prod, polymod, p);
    },
    ECDSAUtils_polynomialReduceMod(poly, polymod, p) {
      var t1, t2, t3, i;
      for (t1 = poly.length, t2 = t1 >= 3; t2;) {
        t3 = B.JSArray_methods.get$last(poly).compareTo$1(0, $.$get$_BigIntImpl_zero());
        if (t3 !== 0)
          for (i = 2; i <= 3; ++i) {
            t3 = t1 - i;
            B.JSArray_methods.$indexSet(poly, t3, poly[t3].$sub(0, B.JSArray_methods.get$last(poly).$mul(0, polymod[3 - i])).$mod(0, p));
          }
        B.JSArray_methods.removeLast$0(poly);
      }
      return poly;
    },
    ECDSAUtils_jacobi(a, n) {
      var t1, t2, t3, e, e0, a1, s;
      if (n.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(3)) < 0)
        throw A.wrapException(B.JacobiError_rAF);
      t1 = $.$get$_BigIntImpl_two();
      t2 = n.$mod(0, t1);
      t3 = $.$get$_BigIntImpl_one();
      t2 = t2.compareTo$1(0, t3);
      if (t2 !== 0)
        throw A.wrapException(B.JacobiError_uQy);
      a = a.$mod(0, n);
      e = $.$get$_BigIntImpl_zero();
      t2 = a.compareTo$1(0, e);
      if (t2 === 0)
        return 0;
      t2 = a.compareTo$1(0, t3);
      if (t2 === 0)
        return 1;
      e0 = e;
      a1 = a;
      while (true) {
        t2 = a1.$mod(0, t1).compareTo$1(0, e);
        if (!(t2 === 0))
          break;
        if (t1._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        a1 = a1._div$1(t1);
        e0 = e0.$add(0, t3);
      }
      t1 = e0.$mod(0, t1).compareTo$1(0, e);
      t2 = true;
      if (t1 !== 0) {
        t1 = n.$mod(0, A._BigIntImpl__BigIntImpl$from(8)).compareTo$1(0, t3);
        if (t1 !== 0)
          t1 = n.$mod(0, A._BigIntImpl__BigIntImpl$from(8)).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(7)) === 0;
        else
          t1 = t2;
      } else
        t1 = t2;
      s = t1 ? 1 : -1;
      t1 = a1.compareTo$1(0, t3);
      if (t1 === 0)
        return s;
      t1 = n.$mod(0, A._BigIntImpl__BigIntImpl$from(4)).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(3));
      if (t1 === 0)
        t1 = a1.$mod(0, A._BigIntImpl__BigIntImpl$from(4)).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(3)) === 0;
      else
        t1 = false;
      if (t1)
        s = -s;
      return s * A.ECDSAUtils_jacobi(n.$mod(0, a1), a1);
    },
    ChaCha20__quarterround(output, a, b, c, d) {
      var t1, t2;
      if (!(d < 16))
        return A.ioore(output, d);
      t1 = output[d];
      if (!(a < 16))
        return A.ioore(output, a);
      t2 = output[a];
      if (!(b < 16))
        return A.ioore(output, b);
      t2 += output[b];
      B.JSArray_methods.$indexSet(output, a, t2);
      B.JSArray_methods.$indexSet(output, d, A.rotl32((t1 ^ t2) >>> 0, 16));
      t2 = output[b];
      if (!(c < 16))
        return A.ioore(output, c);
      t1 = output[c] + output[d];
      B.JSArray_methods.$indexSet(output, c, t1);
      B.JSArray_methods.$indexSet(output, b, A.rotl32((t2 ^ t1) >>> 0, 12));
      t1 = output[d];
      t2 = output[a] + output[b];
      B.JSArray_methods.$indexSet(output, a, t2);
      B.JSArray_methods.$indexSet(output, d, A.rotl32((t1 ^ t2) >>> 0, 8));
      t2 = output[b];
      t1 = output[c] + output[d];
      B.JSArray_methods.$indexSet(output, c, t1);
      B.JSArray_methods.$indexSet(output, b, A.rotl32((t2 ^ t1) >>> 0, 7));
      B.JSArray_methods.$indexSet(output, a, output[a] >>> 0);
      B.JSArray_methods.$indexSet(output, b, output[b] >>> 0);
      B.JSArray_methods.$indexSet(output, c, output[c] >>> 0);
      B.JSArray_methods.$indexSet(output, d, output[d] >>> 0);
    },
    ChaCha20__core(out, input, key) {
      var i,
        mix = A.List_List$filled(16, 0, false, type$.int),
        t1 = J.getInterceptor$asx(key),
        j4 = (t1.$index(key, 3) << 24 | t1.$index(key, 2) << 16 | t1.$index(key, 1) << 8 | t1.$index(key, 0)) >>> 0,
        j5 = (t1.$index(key, 7) << 24 | t1.$index(key, 6) << 16 | t1.$index(key, 5) << 8 | t1.$index(key, 4)) >>> 0,
        j6 = (t1.$index(key, 11) << 24 | t1.$index(key, 10) << 16 | t1.$index(key, 9) << 8 | t1.$index(key, 8)) >>> 0,
        j7 = (t1.$index(key, 15) << 24 | t1.$index(key, 14) << 16 | t1.$index(key, 13) << 8 | t1.$index(key, 12)) >>> 0,
        j8 = (t1.$index(key, 19) << 24 | t1.$index(key, 18) << 16 | t1.$index(key, 17) << 8 | t1.$index(key, 16)) >>> 0,
        j9 = (t1.$index(key, 23) << 24 | t1.$index(key, 22) << 16 | t1.$index(key, 21) << 8 | t1.$index(key, 20)) >>> 0,
        j10 = (t1.$index(key, 27) << 24 | t1.$index(key, 26) << 16 | t1.$index(key, 25) << 8 | t1.$index(key, 24)) >>> 0,
        j11 = (t1.$index(key, 31) << 24 | t1.$index(key, 30) << 16 | t1.$index(key, 29) << 8 | t1.$index(key, 28)) >>> 0,
        j12 = (input[3] << 24 | input[2] << 16 | input[1] << 8 | input[0]) >>> 0,
        j13 = (input[7] << 24 | input[6] << 16 | input[5] << 8 | input[4]) >>> 0,
        j14 = (input[11] << 24 | input[10] << 16 | input[9] << 8 | input[8]) >>> 0,
        j15 = (input[15] << 24 | input[14] << 16 | input[13] << 8 | input[12]) >>> 0;
      B.JSArray_methods.$indexSet(mix, 0, 1634760805);
      B.JSArray_methods.$indexSet(mix, 1, 857760878);
      B.JSArray_methods.$indexSet(mix, 2, 2036477234);
      B.JSArray_methods.$indexSet(mix, 3, 1797285236);
      B.JSArray_methods.$indexSet(mix, 4, j4);
      B.JSArray_methods.$indexSet(mix, 5, j5);
      B.JSArray_methods.$indexSet(mix, 6, j6);
      B.JSArray_methods.$indexSet(mix, 7, j7);
      B.JSArray_methods.$indexSet(mix, 8, j8);
      B.JSArray_methods.$indexSet(mix, 9, j9);
      B.JSArray_methods.$indexSet(mix, 10, j10);
      B.JSArray_methods.$indexSet(mix, 11, j11);
      B.JSArray_methods.$indexSet(mix, 12, j12);
      B.JSArray_methods.$indexSet(mix, 13, j13);
      B.JSArray_methods.$indexSet(mix, 14, j14);
      B.JSArray_methods.$indexSet(mix, 15, j15);
      for (i = 0; i < 20; i += 2) {
        A.ChaCha20__quarterround(mix, 0, 4, 8, 12);
        A.ChaCha20__quarterround(mix, 1, 5, 9, 13);
        A.ChaCha20__quarterround(mix, 2, 6, 10, 14);
        A.ChaCha20__quarterround(mix, 3, 7, 11, 15);
        A.ChaCha20__quarterround(mix, 0, 5, 10, 15);
        A.ChaCha20__quarterround(mix, 1, 6, 11, 12);
        A.ChaCha20__quarterround(mix, 2, 7, 8, 13);
        A.ChaCha20__quarterround(mix, 3, 4, 9, 14);
      }
      A.writeUint32LE(mix[0] + 1634760805 >>> 0, out, 0);
      A.writeUint32LE(mix[1] + 857760878 >>> 0, out, 4);
      A.writeUint32LE(mix[2] + 2036477234 >>> 0, out, 8);
      A.writeUint32LE(mix[3] + 1797285236 >>> 0, out, 12);
      A.writeUint32LE(mix[4] + j4 >>> 0, out, 16);
      A.writeUint32LE(mix[5] + j5 >>> 0, out, 20);
      A.writeUint32LE(mix[6] + j6 >>> 0, out, 24);
      A.writeUint32LE(mix[7] + j7 >>> 0, out, 28);
      A.writeUint32LE(mix[8] + j8 >>> 0, out, 32);
      A.writeUint32LE(mix[9] + j9 >>> 0, out, 36);
      A.writeUint32LE(mix[10] + j10 >>> 0, out, 40);
      A.writeUint32LE(mix[11] + j11 >>> 0, out, 44);
      A.writeUint32LE(mix[12] + j12 >>> 0, out, 48);
      A.writeUint32LE(mix[13] + j13 >>> 0, out, 52);
      A.writeUint32LE(mix[14] + j14 >>> 0, out, 56);
      A.writeUint32LE(mix[15] + j15 >>> 0, out, 60);
    },
    ChaCha20__incrementCounter(counter, pos, len) {
      var carry;
      for (carry = 1; len > 0;) {
        if (!(pos < 16))
          return A.ioore(counter, pos);
        carry += counter[pos] & 255;
        B.JSArray_methods.$indexSet(counter, pos, carry & 255);
        carry = carry >>> 8;
        ++pos;
        --len;
      }
      if (carry > 0)
        throw A.wrapException(B.CryptoException_3cw);
    },
    ChaCha20_streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {
      var t1, t2, block, i, i0, j, t3, t4;
      if (J.get$length$asx(key) !== 32)
        throw A.wrapException(B.CryptoException_5YI);
      t1 = J.getInterceptor$asx(src);
      if (dst.length < t1.get$length(src))
        throw A.wrapException(B.CryptoException_Cmb);
      t2 = nonceInplaceCounterLength === 0;
      if (t2)
        throw A.wrapException(B.CryptoException_gl4);
      block = A.List_List$filled(64, 0, false, type$.int);
      for (i = 0; i < t1.get$length(src); i = i0) {
        A.ChaCha20__core(block, nonce, key);
        i0 = i + 64;
        j = i;
        while (true) {
          if (!(j < i0 && j < t1.get$length(src)))
            break;
          t3 = t1.$index(src, j);
          t4 = j - i;
          if (!(t4 >= 0 && t4 < 64))
            return A.ioore(block, t4);
          B.JSArray_methods.$indexSet(dst, j, t3 & 255 ^ block[t4]);
          ++j;
        }
        A.ChaCha20__incrementCounter(nonce, 0, nonceInplaceCounterLength);
      }
      A.zero(block);
      if (t2)
        A.zero(nonce);
      return dst;
    },
    Crc16_quickIntDigest(data) {
      var reg, _i, byte, mask,
        t1 = data.length + 2,
        t2 = type$.int,
        message = A.List_List$filled(t1, 0, false, t2);
      B.JSArray_methods.setAll$2(message, 0, data);
      for (reg = 0, _i = 0; _i < t1; ++_i) {
        byte = message[_i];
        for (mask = 128; mask > 0;) {
          reg = reg << 1 >>> 0;
          if ((byte & mask) !== 0)
            ++reg;
          mask = mask >>> 1;
          if (reg > 65535)
            reg = reg & 65535 ^ 4129;
        }
      }
      return A.List_List$from([reg >>> 8, reg & 255], true, t2);
    },
    XModemCrc__calculateXmodemCrc(bytes) {
      var t1, crc, i, crc0, crcBytes;
      for (t1 = J.get$iterator$ax(bytes), crc = 0; t1.moveNext$0();) {
        crc ^= t1.get$current() << 8;
        for (i = 0; i < 8; ++i) {
          crc0 = crc << 1;
          crc = (crc & 32768) !== 0 ? crc0 ^ 4129 : crc0;
        }
      }
      crcBytes = A.List_List$filled(2, 0, false, type$.int);
      B.JSArray_methods.$indexSet(crcBytes, 0, crc >>> 8 & 255);
      B.JSArray_methods.$indexSet(crcBytes, 1, crc & 255);
      return crcBytes;
    },
    ListHelper_clone(_this, $T) {
      return A.List_List$from(_this, true, $T);
    },
    writeUint64LE(value, out) {
      A.writeUint32LE(value, out, 0);
      A.writeUint32LE(B.JSInt_methods._shrBothPositive$1(value, 32), out, 4);
      return out;
    },
    writeUint32LE(value, out, offset) {
      B.JSArray_methods.$indexSet(out, offset, value & 255);
      B.JSArray_methods.$indexSet(out, offset + 1, B.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
      B.JSArray_methods.$indexSet(out, offset + 2, B.JSInt_methods._shrOtherPositive$1(value, 16) & 255);
      B.JSArray_methods.$indexSet(out, offset + 3, B.JSInt_methods._shrOtherPositive$1(value, 24) & 255);
    },
    readUint32LE(array, offset) {
      var t3, t4,
        t1 = offset + 3,
        t2 = array.length;
      if (!(t1 < t2))
        return A.ioore(array, t1);
      t1 = array[t1];
      t3 = offset + 2;
      if (!(t3 < t2))
        return A.ioore(array, t3);
      t3 = array[t3];
      t4 = offset + 1;
      if (!(t4 < t2))
        return A.ioore(array, t4);
      t4 = array[t4];
      if (!(offset < t2))
        return A.ioore(array, offset);
      return (t1 << 24 | t3 << 16 | t4 << 8 | array[offset]) >>> 0;
    },
    writeUint32BE(value, out, offset) {
      B.JSArray_methods.$indexSet(out, offset, B.JSInt_methods._shrOtherPositive$1(value, 24) & 255);
      B.JSArray_methods.$indexSet(out, offset + 1, B.JSInt_methods._shrOtherPositive$1(value, 16) & 255);
      B.JSArray_methods.$indexSet(out, offset + 2, B.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
      B.JSArray_methods.$indexSet(out, offset + 3, value & 255);
    },
    readUint32BE(array, offset) {
      var t1 = J.getInterceptor$asx(array);
      return (t1.$index(array, offset) << 24 | t1.$index(array, offset + 1) << 16 | t1.$index(array, offset + 2) << 8 | t1.$index(array, offset + 3)) >>> 0;
    },
    rotl32(val, shift) {
      var modShift = shift & 31;
      return (val << modShift | B.JSInt_methods._shrReceiverPositive$1(val >>> 0, 32 - modShift)) >>> 0;
    },
    zero(array) {
      var t1, i;
      for (t1 = array.length, i = 0; i < t1; ++i)
        B.JSArray_methods.$indexSet(array, i, 0);
    },
    BytesUtils_toHexString(dataBytes, lowerCase, prefix) {
      var toHex = B.C__Hex.encode$2$lowerCase(dataBytes, true);
      return (prefix == null ? "" : prefix) + toHex;
    },
    BytesUtils_tryToHexString(dataBytes, prefix) {
      var t1, exception,
        lowerCase = true;
      try {
        t1 = A.BytesUtils_toHexString(dataBytes, lowerCase, prefix);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    BytesUtils_fromHexString(data, paddingZero) {
      var hexString, t1, exception;
      try {
        hexString = A.StringUtils_strip0x(data);
        if (J.get$length$asx(hexString) === 0) {
          t1 = A._setArrayType([], type$.JSArray_int);
          return t1;
        }
        if (paddingZero && (J.get$length$asx(hexString) & 1) === 1)
          hexString = "0" + A.S(hexString);
        t1 = B.C__Hex.decode$1(hexString);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.ArgumentException_2aX);
      }
    },
    BytesUtils_tryFromHexString(data, paddingZero) {
      var t1, exception;
      if (data == null)
        return null;
      try {
        t1 = A.BytesUtils_fromHexString(data, paddingZero);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    BytesUtils_validateBytes(bytes, onError) {
      var t1, i, byte;
      for (t1 = J.getInterceptor$asx(bytes), i = 0; i < t1.get$length(bytes); ++i) {
        byte = t1.elementAt$1(bytes, i);
        if (byte < 0 || byte > 255)
          throw A.wrapException(A.ArgumentException$((onError == null ? "Invalid bytes" : onError) + " at index " + i + " " + A.S(byte), null));
      }
    },
    BytesUtils_validateListOfBytes(bytes) {
      var t1, i, byte;
      for (t1 = J.getInterceptor$asx(bytes), i = 0; i < t1.get$length(bytes); ++i) {
        byte = t1.$index(bytes, i);
        if (byte < 0 || byte > 255)
          throw A.wrapException(A.ArgumentError$("Invalid bytes at index " + i + ": " + byte, null));
      }
    },
    BytesUtils_isValidBytes(bytes) {
      var exception;
      try {
        A.BytesUtils_validateBytes(bytes, null);
        return true;
      } catch (exception) {
        return false;
      }
    },
    BytesUtils_bytesEqual(a, b) {
      var t1, t2, t3, index;
      if (a == null)
        return false;
      t1 = a.length;
      t2 = J.getInterceptor$asx(b);
      t3 = t2.get$length(b);
      if (t1 !== t3)
        return false;
      if (a === b)
        return true;
      for (index = 0; index < a.length; ++index)
        if (a[index] !== t2.$index(b, index))
          return false;
      return true;
    },
    CompareUtils_iterableIsEqual(a, b, $T) {
      var t1, t2, t3, t4, t5, index, valueA, valueB;
      if (a == null)
        return b == null;
      if (b == null || J.get$length$asx(a) !== J.get$length$asx(b))
        return false;
      if (a === b)
        return true;
      for (t1 = J.getInterceptor$asx(a), t2 = type$.Iterable_dynamic, t3 = type$.Map_dynamic_dynamic, t4 = J.getInterceptor$ax(b), t5 = type$.dynamic, index = 0; index < t1.get$length(a); ++index) {
        valueA = t1.elementAt$1(a, index);
        valueB = t4.elementAt$1(b, index);
        if (t3._is(valueA) && t3._is(valueB)) {
          if (!A.CompareUtils_mapIsEqual(valueA, valueB, t5, t5))
            return false;
        } else if (t2._is(valueA) && t2._is(valueB)) {
          if (!A.CompareUtils_iterableIsEqual(valueA, valueB, t5))
            return false;
        } else if (!J.$eq$(valueA, valueB))
          return false;
      }
      return true;
    },
    CompareUtils_mapIsEqual(a, b, $K, $V) {
      var t3, t4, key, valueA, valueB,
        t1 = a.get$length(a),
        t2 = b.get$length(b);
      if (t1 !== t2)
        return false;
      if (a === b)
        return true;
      for (t1 = a.get$keys(), t1 = t1.get$iterator(t1), t2 = type$.Iterable_dynamic, t3 = type$.Map_dynamic_dynamic, t4 = type$.dynamic; t1.moveNext$0();) {
        key = t1.get$current();
        if (!b.containsKey$1(key))
          return false;
        valueA = a.$index(0, key);
        valueB = b.$index(0, key);
        if (t3._is(valueA) && t3._is(valueB)) {
          if (!A.CompareUtils_mapIsEqual(valueA, valueB, t4, t4))
            return false;
        } else if (t2._is(valueA) && t2._is(valueB)) {
          if (!A.CompareUtils_iterableIsEqual(valueA, valueB, t4))
            return false;
        } else if (!J.$eq$(valueA, valueB))
          return false;
      }
      return true;
    },
    HashCodeGenerator_generateBytesHashCode(bytes, optional) {
      var t1, hash, _i;
      for (t1 = bytes.length, hash = 12, _i = 0; _i < t1; ++_i)
        hash = ((hash ^ bytes[_i]) >>> 0) * 31 >>> 0;
      return optional.length !== 0 ? (hash ^ A.HashCodeGenerator_generateHashCode(optional)) >>> 0 : hash;
    },
    HashCodeGenerator_generateHashCode(objects) {
      var t1, t2, hash, element;
      for (t1 = J.get$iterator$ax(objects), t2 = type$.Iterable_dynamic, hash = 12; t1.moveNext$0();) {
        element = t1.get$current();
        hash = t2._is(element) ? (hash ^ A.HashCodeGenerator_generateHashCode(element)) >>> 0 : (hash ^ J.get$hashCode$(element)) >>> 0;
      }
      return hash;
    },
    BigintUtils_orderLen(value) {
      return B.JSInt_methods._tdivFast$1(value.toRadixString$1(0, 16).length + 1, 2);
    },
    BigintUtils_inverseMod(a, m) {
      var lm, low, high, lm0, r, nm, newLow,
        hm = $.$get$_BigIntImpl_zero(),
        t1 = a.compareTo$1(0, hm);
      if (t1 === 0)
        return hm;
      lm = $.$get$_BigIntImpl_one();
      if (a.compareTo$1(0, lm) >= 0 && a.compareTo$1(0, m) < 0)
        return a.modInverse$1(0, m);
      low = a.$mod(0, m);
      for (high = m, lm0 = lm; low.compareTo$1(0, lm) > 0; high = low, low = newLow, hm = lm0, lm0 = nm) {
        if (low._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        r = high._div$1(low);
        nm = hm.$sub(0, lm0.$mul(0, r));
        newLow = high.$sub(0, low.$mul(0, r));
      }
      return lm0.$mod(0, m);
    },
    BigintUtils_computeNAF(mult) {
      var t1, t2, nafDigit,
        nafList = A._setArrayType([], type$.JSArray_BigInt);
      while (true) {
        t1 = $.$get$_BigIntImpl_zero();
        t2 = mult.compareTo$1(0, t1);
        if (!(t2 !== 0))
          break;
        if (mult._used !== 0) {
          t2 = mult._digits;
          if (0 >= t2.length)
            return A.ioore(t2, 0);
          t2 = (t2[0] & 1) === 0;
        } else
          t2 = true;
        if (!t2) {
          nafDigit = mult.$mod(0, A._BigIntImpl__BigIntImpl$from(4));
          if (nafDigit.compareTo$1(0, $.$get$_BigIntImpl_two()) >= 0)
            nafDigit = nafDigit.$sub(0, A._BigIntImpl__BigIntImpl$from(4));
          B.JSArray_methods.add$1(nafList, nafDigit);
          mult = mult.$sub(0, nafDigit);
        } else
          B.JSArray_methods.add$1(nafList, t1);
        t1 = $.$get$_BigIntImpl_two();
        if (t1._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        mult = mult._div$1(t1);
      }
      return nafList;
    },
    BigintUtils_toBytes(val, $length, order) {
      var bigMaskEight, byteList, i, t2,
        t1 = val.compareTo$1(0, $.$get$_BigIntImpl_zero());
      if (t1 === 0)
        return A.List_List$filled($length, 0, false, type$.int);
      bigMaskEight = A._BigIntImpl__BigIntImpl$from(255);
      t1 = type$.int;
      byteList = A.List_List$filled($length, 0, false, t1);
      for (i = 0; i < $length; ++i) {
        B.JSArray_methods.$indexSet(byteList, $length - i - 1, val.$and(0, bigMaskEight).toInt$0(0));
        val = val.$shr(0, 8);
      }
      if (order === B.C_Endian0) {
        t2 = A._arrayInstanceType(byteList)._eval$1("ReversedListIterable<1>");
        byteList = A.List_List$_of(new A.ReversedListIterable(byteList, t2), t2._eval$1("ListIterable.E"));
      }
      return A.List_List$from(byteList, true, t1);
    },
    BigintUtils_fromBytes(bytes, byteOrder, sign) {
      var t1, result, i;
      if (byteOrder === B.C_Endian0) {
        t1 = J.get$reversed$ax(bytes);
        bytes = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      }
      result = $.$get$_BigIntImpl_zero();
      for (t1 = J.getInterceptor$asx(bytes), i = 0; i < t1.get$length(bytes); ++i)
        result = result.$add(0, A._BigIntImpl__BigIntImpl$from(t1.$index(bytes, t1.get$length(bytes) - i - 1)).$shl(0, 8 * i));
      t1 = result.compareTo$1(0, $.$get$_BigIntImpl_zero());
      if (t1 === 0)
        return result;
      return result;
    },
    BigintUtils_parse(v, allowHex) {
      var t1, exception;
      try {
        if (v instanceof A._BigIntImpl)
          return v;
        if (A._isInt(v)) {
          t1 = A._BigIntImpl__BigIntImpl$from(v);
          return t1;
        }
      } catch (exception) {
      }
      throw A.wrapException(A.ArgumentException$("invalid input for parse bigint", A.LinkedHashMap_LinkedHashMap$_literal(["value", A.S(v)], type$.String, type$.dynamic)));
    },
    IntUtils_toBytes(val, $length) {
      var t1, byteList, i;
      if ($length > 4) {
        t1 = A.List_List$_of(A.IntUtils_toBytes(B.JSInt_methods._shrOtherPositive$1(val, 32), $length - 4), type$.int);
        B.JSArray_methods.addAll$1(t1, A.IntUtils_toBytes(val >>> 0, 4));
        return t1;
      }
      byteList = A.List_List$filled($length, 0, false, type$.int);
      for (i = 0; i < $length; ++i) {
        B.JSArray_methods.$indexSet(byteList, $length - i - 1, val & 255);
        val = B.JSInt_methods._shrOtherPositive$1(val, 8);
      }
      return byteList;
    },
    IntUtils_fromBytes(bytes) {
      var big, lowerPart, result, i,
        t1 = J.getInterceptor$asx(bytes);
      if (t1.get$length(bytes) > 6) {
        big = A.BigintUtils_fromBytes(bytes, B.C_Endian, false);
        if (big.get$isValidInt())
          return big.toInt$0(0);
        throw A.wrapException(A.ArgumentException$("Value too large to fit in a Dart int", null));
      }
      if (t1.get$length(bytes) > 4) {
        lowerPart = A.IntUtils_fromBytes(t1.sublist$2(bytes, t1.get$length(bytes) - 4, t1.get$length(bytes)));
        result = (B.JSInt_methods._shlPositive$1(A.IntUtils_fromBytes(t1.sublist$2(bytes, 0, t1.get$length(bytes) - 4)), 32) | lowerPart) >>> 0;
      } else
        for (result = 0, i = 0; i < t1.get$length(bytes); ++i)
          result = (result | B.JSInt_methods._shlPositive$1(t1.$index(bytes, t1.get$length(bytes) - i - 1), 8 * i)) >>> 0;
      return result;
    },
    IntUtils_max(a, b) {
      if (a > b)
        return a;
      return b;
    },
    IntUtils_min(a, b) {
      if (a > b)
        return b;
      return a;
    },
    MoveUtils_parseAddressBytes(value) {
      var t1, exception;
      try {
        t1 = A.AptosAddressUtils_praseAddressBytes(J.cast$1$0$ax(value, type$.int));
        return t1;
      } catch (exception) {
      }
      throw A.wrapException(new A.BcsSerializationException("Invalid value for move type 'Address': Expected a List<int> or a hexadecimal string.", A.LinkedHashMap_LinkedHashMap$_literal(["value", A.S(value)], type$.String, type$.dynamic)));
    },
    extension() {
      var t1 = init.G,
        t2 = type$.nullable_JSObject,
        t3 = t2._as(t1.chrome);
      if (t3 == null)
        t2 = null;
      else {
        t2 = t2._as(t3.runtime);
        t2 = t2 == null ? null : A._asStringQ(t2.id);
      }
      if (t2 != null)
        return type$.JSObject._as(t1.chrome);
      return type$.JSObject._as(t1.browser);
    },
    Runtime_sendMessage_(_this, message) {
      return A.Runtime_sendMessage_$body(_this, message);
    },
    Runtime_sendMessage_$body(_this, message) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_WalletEvent),
        $async$returnValue, result;
      var $async$Runtime_sendMessage_ = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(type$.JSObject._as(_this.sendMessage(null, A.ToJsEvent_toJsEvent(message), null)), type$.nullable_JSObject), $async$Runtime_sendMessage_);
            case 3:
              // returning from await.
              result = $async$result;
              $async$returnValue = result == null ? null : A.JSWalletEvent_toEvent(result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Runtime_sendMessage_, $async$completer);
    },
    Tabs_query_(_this) {
      return A.Tabs_query_$body(_this);
    },
    Tabs_query_$body(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.List_JSObject),
        $async$returnValue, result;
      var $async$Tabs_query_ = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(type$.JSObject._as(_this.query({active: null, audible: null, autoDiscardable: null, currentWindow: null, discarded: null, highlighted: null, index: null, lastFocusedWindow: null, muted: null, pinned: null, windowId: null, url: null})), type$.JSArray_nullable_Object), $async$Tabs_query_);
            case 3:
              // returning from await.
              result = $async$result;
              $async$returnValue = type$.List_JSObject._is(result) ? result : new A.CastList(result, A._arrayInstanceType(result)._eval$1("CastList<1,JSObject>"));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Tabs_query_, $async$completer);
    },
    Tabs_sendMessage_(_this, message, tabId) {
      return A.Tabs_sendMessage_$body(_this, message, tabId);
    },
    Tabs_sendMessage_$body(_this, message, tabId) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_WalletEvent),
        $async$returnValue, t1, $async$temp1;
      var $async$Tabs_sendMessage_ = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSObject;
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(t1._as(_this.sendMessage(tabId, message, null)), t1), $async$Tabs_sendMessage_);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.JSWalletEvent_toEvent($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Tabs_sendMessage_, $async$completer);
    },
    ChromeWindows_create_(_this, focused, height, left, $top, type, url, width) {
      return A.ChromeWindows_create_$body(_this, true, height, left, $top, type, url, width);
    },
    ChromeWindows_create_$body(_this, focused, height, left, $top, type, url, width) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, t1;
      var $async$ChromeWindows_create_ = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSObject;
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(t1._as(_this.create({focused: true, height: height, incognito: null, left: left, tabId: null, top: $top, url: url, width: width, type: type})), t1), $async$ChromeWindows_create_);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$ChromeWindows_create_, $async$completer);
    },
    ChromeWindows_getCurrent_(_this, populate) {
      return A.ChromeWindows_getCurrent_$body(_this, true);
    },
    ChromeWindows_getCurrent_$body(_this, populate) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, t1;
      var $async$ChromeWindows_getCurrent_ = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSObject;
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(t1._as(_this.getCurrent({populate: true, windowTypes: null})), t1), $async$ChromeWindows_getCurrent_);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$ChromeWindows_getCurrent_, $async$completer);
    },
    RetionalConst_fromDecimalNumber(decimal) {
      switch (decimal) {
        case 8:
          return $.$get$RetionalConst_bigR8();
        case 18:
          return $.$get$RetionalConst_bigR18();
        case 6:
          return $.$get$RetionalConst_bigR6();
        case 12:
          return $.$get$RetionalConst_bigR12();
        case 10:
          return $.$get$RetionalConst_bigR10();
        default:
          return A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(decimal), null);
      }
    },
    MethodUtils_nullOnException(t, $T) {
      var t1, exception, defaultValue = null;
      try {
        t1 = t.call$0();
        return t1;
      } catch (exception) {
        return defaultValue;
      }
    },
    StrUtils_to3Digits(number, separator) {
      var parts, t1, integerPart, fractionalPart, negative, groups, i, i0, result,
        hasDot = B.JSString_methods.contains$1(number, ".");
      if (hasDot) {
        parts = number.split(".");
        t1 = parts.length;
        if (0 >= t1)
          return A.ioore(parts, 0);
        integerPart = parts[0];
        if (1 >= t1)
          return A.ioore(parts, 1);
        fractionalPart = parts[1];
      } else {
        integerPart = number;
        fractionalPart = "";
      }
      negative = B.JSString_methods.startsWith$1(integerPart, "-");
      if (negative)
        integerPart = B.JSString_methods.substring$1(integerPart, 1);
      groups = A._setArrayType([], type$.JSArray_String);
      i = integerPart.length;
      for (; i > 0; i = i0) {
        i0 = i - 3;
        B.JSArray_methods.insert$2(groups, 0, B.JSString_methods.substring$2(integerPart, A.IntUtils_max(0, i0), i));
      }
      result = B.JSArray_methods.join$1(groups, separator);
      if (hasDot)
        if (!(fractionalPart.length === 0))
          result += "." + fractionalPart;
      if (negative)
        return "-" + result;
      return result;
    },
    StrUtils_validateUri(url) {
      var uri, _null = null;
      if (url == null)
        return _null;
      uri = A.Uri_tryParse(url);
      if (uri == null)
        return _null;
      if (uri.get$host().length === 0)
        return _null;
      if (!B.JSArray_methods.contains$1(B.List_http_https, uri.get$scheme().toLowerCase()))
        return _null;
      return uri.normalizePath$0().toString$0(0);
    },
    StrUtils_substring(value, $length) {
      var t1 = value.length;
      if (t1 > $length)
        return B.JSString_methods.replaceRange$3(value, $length - 1, t1, "");
      return value;
    },
    ChainConst_updateNetwork(network, networkId) {
      var t1, t2, t3, t4;
      if (networkId != null)
        t1 = network != null && networkId !== network.get$value();
      else
        t1 = true;
      if (t1)
        throw A.wrapException(B.WalletException_data_verification_failed_null);
      t1 = $.$get$ChainConst_defaultCoins();
      if (!t1.containsKey$1(networkId)) {
        if (network == null)
          throw A.wrapException(B.WalletException_data_verification_failed_null);
        return network;
      }
      t1 = t1.$index(0, networkId);
      t1.toString;
      if (network == null)
        return t1;
      t2 = t1.get$coinParam();
      t3 = network.get$coinParam();
      t4 = network.get$coinParam();
      return t1.copyWith$1$coinParam(t2.updateParams$4$addressExplorer$token$transactionExplorer$updateProviders(network.get$coinParam().addressExplorer, t4.token, network.get$coinParam().transactionExplorer, t3.providers));
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._instanceTypeFromConstructor(this));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    $or(receiver, other) {
      return other || receiver;
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.bool);
    },
    $isTrustedGetRuntimeType: 1,
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    $isTrustedGetRuntimeType: 1,
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {$isJSObject: 1};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return B.Type_JSObject_ttY;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JavaScriptBigInt.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JavaScriptSymbol.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JSArray.prototype = {
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A._arrayInstanceType(receiver)._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, 29);
      receiver.push(value);
    },
    insert$2(receiver, index, value) {
      var t1;
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "insert", 2);
      t1 = receiver.length;
      if (index > t1)
        throw A.wrapException(A.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    setAll$2(receiver, index, iterable) {
      var t1, element, index0;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, "setAll");
      A.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0(); index = index0) {
        element = t1.get$current();
        index0 = index + 1;
        if (!(index >= 0 && index < receiver.length))
          return A.ioore(receiver, index);
        receiver[index] = element;
      }
    },
    removeLast$0(receiver) {
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "removeLast", 1);
      if (receiver.length === 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    remove$1(receiver, element) {
      var i;
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "remove", 1);
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    removeWhere$1(receiver, test) {
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, 16);
      this._removeWhere$2(receiver, test, true);
    },
    _removeWhere$2(receiver, test, removeMatching) {
      var retained, end, i, element, t1;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      retained = [];
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (!test.call$1(element))
          retained.push(element);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      t1 = retained.length;
      if (t1 === end)
        return;
      this.set$length(receiver, t1);
      for (i = 0; i < retained.length; ++i)
        receiver[i] = retained[i];
    },
    where$1(receiver, f) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.WhereIterable(receiver, t1._eval$1("bool(1)")._as(f), t1._eval$1("WhereIterable<1>"));
    },
    addAll$1(receiver, collection) {
      var t1;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "addAll", 2);
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    clear$0(receiver) {
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "clear", "clear");
      receiver.length = 0;
    },
    forEach$1(receiver, f) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("~(1)")._as(f);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1(receiver, f, $T) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    join$0(receiver) {
      return this.join$1(receiver, "");
    },
    take$1(receiver, n) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(n, "count", type$.int), A._arrayInstanceType(receiver)._precomputed1);
    },
    skip$1(receiver, n) {
      return A.SubListIterable$(receiver, n, null, A._arrayInstanceType(receiver)._precomputed1);
    },
    firstWhere$2$orElse(receiver, test, orElse) {
      var end, i, element,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()?")._as(orElse);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (test.call$1(element))
          return element;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A.IterableElementError_noElement());
    },
    firstWhere$1(receiver, test) {
      test.toString;
      return this.firstWhere$2$orElse(receiver, test, null);
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, "start", null));
      if (end == null)
        end = receiver.length;
      else if (end < start || end > receiver.length)
        throw A.wrapException(A.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return A._setArrayType([], A._arrayInstanceType(receiver));
      return A._setArrayType(receiver.slice(start, end), A._arrayInstanceType(receiver));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    getRange$2(receiver, start, end) {
      A.RangeError_checkValidRange(start, end, receiver.length);
      return A.SubListIterable$(receiver, start, end, A._arrayInstanceType(receiver)._precomputed1);
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    removeRange$2(receiver, start, end) {
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, 18);
      A.RangeError_checkValidRange(start, end, receiver.length);
      receiver.splice(start, end - start);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, i;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, 5);
      A.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    any$1(receiver, test) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (test.call$1(receiver[i]))
          return true;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    get$reversed(receiver) {
      return new A.ReversedListIterable(receiver, A._arrayInstanceType(receiver)._eval$1("ReversedListIterable<1>"));
    },
    sort$1(receiver, compare) {
      var len, a, b, undefineds, i,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("int(1,1)?")._as(compare);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, "sort");
      len = receiver.length;
      if (len < 2)
        return;
      if (compare == null)
        compare = J._interceptors_JSArray__compareAny$closure();
      if (len === 2) {
        a = receiver[0];
        b = receiver[1];
        t1 = compare.call$2(a, b);
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 0) {
          receiver[0] = b;
          receiver[1] = a;
        }
        return;
      }
      undefineds = 0;
      if (t1._precomputed1._is(null))
        for (i = 0; i < receiver.length; ++i)
          if (receiver[i] === void 0) {
            receiver[i] = null;
            ++undefineds;
          }
      receiver.sort(A.convertDartClosureToJS(compare, 2));
      if (undefineds > 0)
        this._replaceSomeNullsWithUndefined$1(receiver, undefineds);
    },
    _replaceSomeNullsWithUndefined$1(receiver, count) {
      var i0,
        i = receiver.length;
      for (; i0 = i - 1, i > 0; i = i0)
        if (receiver[i0] === null) {
          receiver[i0] = void 0;
          --count;
          if (count === 0)
            break;
        }
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$length(receiver, newLength) {
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "set length", "change the length of");
      if (newLength < 0)
        throw A.wrapException(A.RangeError$range(newLength, 0, null, "newLength", null));
      if (newLength > receiver.length)
        A._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    whereType$1$0(receiver, $T) {
      return new A.WhereTypeIterable(receiver, $T._eval$1("WhereTypeIterable<0>"));
    },
    $add(receiver, other) {
      var t1 = A._arrayInstanceType(receiver);
      t1._eval$1("List<1>")._as(other);
      t1 = A.List_List$_of(receiver, t1._precomputed1);
      this.addAll$1(t1, other);
      return t1;
    },
    set$last(receiver, element) {
      var t1, t2;
      A._arrayInstanceType(receiver)._precomputed1._as(element);
      t1 = receiver.length;
      if (t1 === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      t2 = t1 - 1;
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      if (!(t2 >= 0))
        return A.ioore(receiver, t2);
      receiver[t2] = element;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._arrayInstanceType(receiver));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length) {
        t1 = A.throwConcurrentModificationError(t1);
        throw A.wrapException(t1);
      }
      t2 = _this._index;
      if (t2 >= $length) {
        _this._current = null;
        return false;
      }
      _this._current = t1[t2];
      _this._index = t2 + 1;
      return true;
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      A._asNum(b);
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    round$0(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".round()"));
    },
    toRadixString$1(receiver, radix) {
      var result, t1, t2, match, exponent;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      t1 = result.length;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(result, t2);
      if (result.charCodeAt(t2) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        A.throwExpression(A.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return A.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return A.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + B.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    $shl(receiver, other) {
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr(receiver, other) {
      var t1;
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
      if (0 > other)
        throw A.wrapException(A.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.num);
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$bitLength(receiver) {
      var wordBits,
        t1 = receiver < 0 ? -receiver - 1 : receiver,
        nonneg = t1;
      for (wordBits = 32; nonneg >= 4294967296;) {
        nonneg = this._tdivFast$1(nonneg, 4294967296);
        wordBits += 32;
      }
      return wordBits - Math.clz32(nonneg);
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.int);
    },
    $isTrustedGetRuntimeType: 1,
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.double);
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JSString.prototype = {
    allMatches$1(receiver, string) {
      return new A._StringAllMatchesIterable(string, receiver, 0);
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    split$1(receiver, pattern) {
      var t1;
      if (typeof pattern == "string")
        return A._setArrayType(receiver.split(pattern), type$.JSArray_String);
      else {
        if (pattern instanceof A.JSSyntaxRegExp) {
          t1 = pattern._hasCapturesCache;
          t1 = !(t1 == null ? pattern._hasCapturesCache = pattern._computeHasCaptures$0() : t1);
        } else
          t1 = false;
        if (t1)
          return A._setArrayType(receiver.split(pattern._nativeRegExp), type$.JSArray_String);
        else
          return this._defaultSplit$1(receiver, pattern);
      }
    },
    replaceRange$3(receiver, start, end, replacement) {
      var e = A.RangeError_checkValidRange(start, end, receiver.length);
      return receiver.substring(0, start) + replacement + receiver.substring(e);
    },
    _defaultSplit$1(receiver, pattern) {
      var t1, start, $length, match, matchStart, matchEnd,
        result = A._setArrayType([], type$.JSArray_String);
      for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), start = 0, $length = 1; t1.moveNext$0();) {
        match = t1.get$current();
        matchStart = match.get$start();
        matchEnd = match.get$end();
        $length = matchEnd - matchStart;
        if ($length === 0 && start === matchStart)
          continue;
        B.JSArray_methods.add$1(result, this.substring$2(receiver, start, matchStart));
        start = matchEnd;
      }
      if (start < receiver.length || $length > 0)
        B.JSArray_methods.add$1(result, this.substring$1(receiver, start));
      return result;
    },
    startsWith$2(receiver, pattern, index) {
      var endIndex;
      if (index < 0 || index > receiver.length)
        throw A.wrapException(A.RangeError$range(index, 0, receiver.length, null, null));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1(receiver, pattern) {
      return this.startsWith$2(receiver, pattern, 0);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1(receiver, start) {
      return this.substring$2(receiver, start, null);
    },
    trim$0(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (0 >= endIndex)
        return A.ioore(result, 0);
      if (result.charCodeAt(0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      if (!(t1 >= 0))
        return A.ioore(result, t1);
      endIndex0 = result.charCodeAt(t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    indexOf$2(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1(receiver, pattern) {
      return this.indexOf$2(receiver, pattern, 0);
    },
    lastIndexOf$1(receiver, pattern) {
      var start = receiver.length,
        t1 = pattern.length;
      if (start + t1 > start)
        start -= t1;
      return receiver.lastIndexOf(pattern, start);
    },
    contains$1(receiver, other) {
      return A.stringContainsUnchecked(receiver, other, 0);
    },
    compareTo$1(receiver, other) {
      var t1;
      A._asString(other);
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.String);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $isTrustedGetRuntimeType: 1,
    $isComparable: 1,
    $isPattern: 1,
    $isString: 1
  };
  A._CastIterableBase.prototype = {
    get$iterator(_) {
      return new A.CastIterator(J.get$iterator$ax(this.get$_source()), A._instanceType(this)._eval$1("CastIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    elementAt$1(_, index) {
      return A._instanceType(this)._rest[1]._as(J.elementAt$1$ax(this.get$_source(), index));
    },
    get$first(_) {
      return A._instanceType(this)._rest[1]._as(J.get$first$ax(this.get$_source()));
    },
    contains$1(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    toString$0(_) {
      return J.toString$0$(this.get$_source());
    }
  };
  A.CastIterator.prototype = {
    moveNext$0() {
      return this._source.moveNext$0();
    },
    get$current() {
      return this.$ti._rest[1]._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.CastIterable.prototype = {
    get$_source() {
      return this._source;
    }
  };
  A._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1};
  A._CastListBase.prototype = {
    $index(_, index) {
      return this.$ti._rest[1]._as(J.$index$asx(this._source, index));
    },
    $indexSet(_, index, value) {
      var t1 = this.$ti;
      J.$indexSet$ax(this._source, index, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    set$length(_, $length) {
      J.set$length$asx(this._source, $length);
    },
    removeWhere$1(_, test) {
      J.removeWhere$1$ax(this._source, new A._CastListBase_removeWhere_closure(this, this.$ti._eval$1("bool(2)")._as(test)));
    },
    getRange$2(_, start, end) {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(J.getRange$2$ax(this._source, start, end), t1._precomputed1, t1._rest[1]);
    },
    setRange$4(_, start, end, iterable, skipCount) {
      var t1 = this.$ti;
      J.setRange$4$ax(this._source, start, end, A.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(iterable), t1._rest[1], t1._precomputed1), skipCount);
    },
    setRange$3(_, start, end, iterable) {
      return this.setRange$4(0, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isList: 1
  };
  A._CastListBase_removeWhere_closure.prototype = {
    call$1(element) {
      var t1 = this.$this.$ti;
      return this.test.call$1(t1._rest[1]._as(t1._precomputed1._as(element)));
    },
    $signature() {
      return this.$this.$ti._eval$1("bool(1)");
    }
  };
  A.CastList.prototype = {
    cast$1$0(_, $R) {
      return new A.CastList(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    get$_source() {
      return this._source;
    }
  };
  A.CastMap.prototype = {
    containsKey$1(key) {
      return this._source.containsKey$1(key);
    },
    $index(_, key) {
      return this.$ti._eval$1("4?")._as(this._source.$index(0, key));
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      t1._rest[2]._as(key);
      t1._rest[3]._as(value);
      this._source.$indexSet(0, t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    remove$1(_, key) {
      return this.$ti._eval$1("4?")._as(this._source.remove$1(0, key));
    },
    forEach$1(_, f) {
      this._source.forEach$1(0, new A.CastMap_forEach_closure(this, this.$ti._eval$1("~(3,4)")._as(f)));
    },
    get$keys() {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(this._source.get$keys(), t1._precomputed1, t1._rest[2]);
    },
    get$values() {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(this._source.get$values(), t1._rest[1], t1._rest[3]);
    },
    get$length(_) {
      var t1 = this._source;
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this._source;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._source;
      return t1.get$isNotEmpty(t1);
    },
    get$entries() {
      return this._source.get$entries().map$1$1(0, new A.CastMap_entries_closure(this), this.$ti._eval$1("MapEntry<3,4>"));
    }
  };
  A.CastMap_forEach_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      this.f.call$2(t1._rest[2]._as(key), t1._rest[3]._as(value));
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1,2)");
    }
  };
  A.CastMap_entries_closure.prototype = {
    call$1(e) {
      var t1 = this.$this.$ti;
      t1._eval$1("MapEntry<1,2>")._as(e);
      return new A.MapEntry(t1._rest[2]._as(e.key), t1._rest[3]._as(e.value), t1._eval$1("MapEntry<3,4>"));
    },
    $signature() {
      return this.$this.$ti._eval$1("MapEntry<3,4>(MapEntry<1,2>)");
    }
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this._message;
    }
  };
  A.CodeUnits.prototype = {
    get$length(_) {
      return this.__internal$_string.length;
    },
    $index(_, i) {
      var t1 = this.__internal$_string;
      if (!(i >= 0 && i < t1.length))
        return A.ioore(t1, i);
      return t1.charCodeAt(i);
    }
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), A._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$first(_) {
      if (this.get$length(this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    contains$1(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = A.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    join$0(_) {
      return this.join$1(0, "");
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return new A.MappedListIterable(this, t1._bind$1($T)._eval$1("1(ListIterable.E)")._as(toElement), t1._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    skip$1(_, count) {
      return A.SubListIterable$(this, count, null, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    take$1(_, count) {
      return A.SubListIterable$(this, 0, A.checkNotNullable(count, "count", type$.int), A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$1$growable(_, growable) {
      var t1 = A.List_List$_of(this, A._instanceType(this)._eval$1("ListIterable.E"));
      return t1;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    }
  };
  A.SubListIterable.prototype = {
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw A.wrapException(A.IndexError$withLength(index, _this.get$length(0), _this, null, "index"));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
      var newStart, endOrLength, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      newStart = _this._start + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new A.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return A.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    toList$1$growable(_, growable) {
      var $length, result, i, _this = this,
        start = _this._start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = J.JSArray_JSArray$fixed(0, _this.$ti._precomputed1);
        return t1;
      }
      result = A.List_List$filled($length, t2.elementAt$1(t1, start), false, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        B.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.__internal$_current = null;
        return false;
      }
      _this.__internal$_current = t2.elementAt$1(t1, t3);
      ++_this.__internal$_index;
      return true;
    },
    $isIterator: 1
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      return new A.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, A._instanceType(this)._eval$1("MappedIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    }
  };
  A.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.__internal$_current = _this._f.call$1(t1.get$current());
        return true;
      }
      _this.__internal$_current = null;
      return false;
    },
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    $isIterator: 1
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return new A.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    },
    map$1$1(_, toElement, $T) {
      var t1 = this.$ti;
      return new A.MappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(toElement), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (t2.call$1(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.SkipIterable.prototype = {
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.SkipIterable(this.__internal$_iterable, this._skipCount + count, A._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator(_) {
      return new A.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, A._instanceType(this)._eval$1("SkipIterator<1>"));
    }
  };
  A.EfficientLengthSkipIterable.prototype = {
    get$length(_) {
      var $length = J.get$length$asx(this.__internal$_iterable) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  A.SkipIterator.prototype = {
    moveNext$0() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.EmptyIterable.prototype = {
    get$iterator(_) {
      return B.C_EmptyIterator;
    },
    get$isEmpty(_) {
      return true;
    },
    get$length(_) {
      return 0;
    },
    get$first(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    elementAt$1(_, index) {
      throw A.wrapException(A.RangeError$range(index, 0, 0, "index", null));
    },
    contains$1(_, element) {
      return false;
    },
    map$1$1(_, toElement, $T) {
      this.$ti._bind$1($T)._eval$1("1(2)")._as(toElement);
      return new A.EmptyIterable($T._eval$1("EmptyIterable<0>"));
    },
    skip$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    },
    toList$1$growable(_, growable) {
      var t1 = J.JSArray_JSArray$growable(0, this.$ti._precomputed1);
      return t1;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    }
  };
  A.EmptyIterator.prototype = {
    moveNext$0() {
      return false;
    },
    get$current() {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  A.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return new A.WhereTypeIterator(J.get$iterator$ax(this._source), this.$ti._eval$1("WhereTypeIterator<1>"));
    }
  };
  A.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0();)
        if (t2._is(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this.$ti._precomputed1._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.FixedLengthListMixin.prototype = {
    set$length(receiver, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    removeWhere$1(receiver, test) {
      A.instanceType(receiver)._eval$1("bool(FixedLengthListMixin.E)")._as(test);
      throw A.wrapException(A.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  };
  A.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length(_, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    removeWhere$1(_, test) {
      A._instanceType(this)._eval$1("bool(UnmodifiableListMixin.E)")._as(test);
      throw A.wrapException(A.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    setRange$4(_, start, end, iterable, skipCount) {
      A._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$3(_, start, end, iterable) {
      return this.setRange$4(0, start, end, iterable, 0);
    }
  };
  A.UnmodifiableListBase.prototype = {};
  A._ListIndicesIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._backedList);
    },
    elementAt$1(_, index) {
      var t1 = J.get$length$asx(this._backedList);
      if (0 > index || index >= t1)
        A.throwExpression(A.IndexError$withLength(index, t1, this, null, "index"));
      return index;
    }
  };
  A.ListMapView.prototype = {
    $index(_, key) {
      return this.containsKey$1(key) ? J.$index$asx(this.__internal$_values, A._asInt(key)) : null;
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_values);
    },
    get$values() {
      return A.SubListIterable$(this.__internal$_values, 0, null, this.$ti._precomputed1);
    },
    get$keys() {
      return new A._ListIndicesIterable(this.__internal$_values);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_values);
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.__internal$_values);
    },
    containsKey$1(key) {
      return A._isInt(key) && key >= 0 && key < J.get$length$asx(this.__internal$_values);
    },
    forEach$1(_, f) {
      var t1, t2, $length, i;
      this.$ti._eval$1("~(int,1)")._as(f);
      t1 = this.__internal$_values;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      for (i = 0; i < $length; ++i) {
        f.call$2(i, t2.$index(t1, i));
        if ($length !== t2.get$length(t1))
          throw A.wrapException(A.ConcurrentModificationError$(t1));
      }
    }
  };
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  A.Symbol.prototype = {};
  A.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  A._Record_2.prototype = {$recipe: "+(1,2)", $shape: 1};
  A.ConstantMapView.prototype = {};
  A.ConstantMap.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      A.ConstantMap__throwUnmodifiable();
    },
    remove$1(_, key) {
      A.ConstantMap__throwUnmodifiable();
    },
    get$entries() {
      return new A._SyncStarIterable(this.entries$body$ConstantMap(), A._instanceType(this)._eval$1("_SyncStarIterable<MapEntry<1,2>>"));
    },
    entries$body$ConstantMap() {
      var $async$self = this;
      return function() {
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], t1, t2, t3, key, t4;
        return function $async$get$entries($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.get$keys(), t1 = t1.get$iterator(t1), t2 = A._instanceType($async$self), t3 = t2._rest[1], t2 = t2._eval$1("MapEntry<1,2>");
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                key = t1.get$current();
                t4 = $async$self.$index(0, key);
                $async$goto = 4;
                return $async$iterator._async$_current = new A.MapEntry(key, t4 == null ? t3._as(t4) : t4, t2), 1;
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    },
    map$2$1(_, transform, K2, V2) {
      var result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      this.forEach$1(0, new A.ConstantMap_map_closure(this, A._instanceType(this)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), result));
      return result;
    },
    $isMap: 1
  };
  A.ConstantMap_map_closure.prototype = {
    call$2(key, value) {
      var t1 = A._instanceType(this.$this),
        entry = this.transform.call$2(t1._precomputed1._as(key), t1._rest[1]._as(value));
      this.result.$indexSet(0, entry.key, entry.value);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this._values.length;
    },
    get$_keys() {
      var keys = this.$keys;
      if (keys == null) {
        keys = Object.keys(this._jsIndex);
        this.$keys = keys;
      }
      return keys;
    },
    containsKey$1(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsIndex.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(key))
        return null;
      return this._values[this._jsIndex[key]];
    },
    forEach$1(_, f) {
      var keys, values, t1, i;
      this.$ti._eval$1("~(1,2)")._as(f);
      keys = this.get$_keys();
      values = this._values;
      for (t1 = keys.length, i = 0; i < t1; ++i)
        f.call$2(keys[i], values[i]);
    },
    get$keys() {
      return new A._KeysOrValues(this.get$_keys(), this.$ti._eval$1("_KeysOrValues<1>"));
    },
    get$values() {
      return new A._KeysOrValues(this._values, this.$ti._eval$1("_KeysOrValues<2>"));
    }
  };
  A._KeysOrValues.prototype = {
    get$length(_) {
      return this._elements.length;
    },
    get$isEmpty(_) {
      return 0 === this._elements.length;
    },
    get$isNotEmpty(_) {
      return 0 !== this._elements.length;
    },
    get$iterator(_) {
      var t1 = this._elements;
      return new A._KeysOrValuesOrElementsIterator(t1, t1.length, this.$ti._eval$1("_KeysOrValuesOrElementsIterator<1>"));
    }
  };
  A._KeysOrValuesOrElementsIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        t1 = _this.__js_helper$_index;
      if (t1 >= _this.__js_helper$_length) {
        _this.__js_helper$_current = null;
        return false;
      }
      _this.__js_helper$_current = _this._elements[t1];
      _this.__js_helper$_index = t1 + 1;
      return true;
    },
    $isIterator: 1
  };
  A.GeneralConstantMap.prototype = {
    _getMap$0() {
      var _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        backingMap = new A.JsConstantLinkedHashMap(_this.$ti._eval$1("JsConstantLinkedHashMap<1,2>"));
        A.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    containsKey$1(key) {
      return this._getMap$0().containsKey$1(key);
    },
    $index(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1(_, f) {
      this.$ti._eval$1("~(1,2)")._as(f);
      this._getMap$0().forEach$1(0, f);
    },
    get$keys() {
      var t1 = this._getMap$0();
      return new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>"));
    },
    get$values() {
      var t1 = this._getMap$0();
      return new A.LinkedHashMapValuesIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapValuesIterable<2>"));
    },
    get$length(_) {
      return this._getMap$0().__js_helper$_length;
    }
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      return "Null check operator used on a null value";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    }
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    get$runtimeType(_) {
      var rti = A.closureFunctionType(this);
      return A.createRuntimeType(rti == null ? A.instanceType(this) : rti);
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_length === 0;
    },
    get$isNotEmpty(_) {
      return this.__js_helper$_length !== 0;
    },
    get$keys() {
      return new A.LinkedHashMapKeysIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeysIterable<1>"));
    },
    get$values() {
      return new A.LinkedHashMapValuesIterable(this, A._instanceType(this)._eval$1("LinkedHashMapValuesIterable<2>"));
    },
    get$entries() {
      return new A.LinkedHashMapEntriesIterable(this, A._instanceType(this)._eval$1("LinkedHashMapEntriesIterable<1,2>"));
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$2(key, value)];
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string")
        return _this._removeHashTableEntry$2(_this._strings, key);
      else if (typeof key == "number" && (key & 0x3fffffff) === key)
        return _this._removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        delete rest[hash];
      return cell.hashMapCellValue;
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3(table, key, value) {
      var cell,
        t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = table[key];
      if (cell == null)
        return null;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.hashMapCellValue;
    },
    _modified$0() {
      this._modifications = this._modifications + 1 & 1073741823;
    },
    _newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this.__js_helper$_length;
      _this._modified$0();
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    $isLinkedHashMap: 1
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeysIterable.prototype = {
    get$length(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this._map;
      return new A.LinkedHashMapKeyIterator(t1, t1._modifications, t1._first, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
    },
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.__js_helper$_current = null;
        return false;
      } else {
        _this.__js_helper$_current = cell.hashMapCellKey;
        _this._cell = cell._next;
        return true;
      }
    },
    $isIterator: 1
  };
  A.LinkedHashMapValuesIterable.prototype = {
    get$length(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this._map;
      return new A.LinkedHashMapValueIterator(t1, t1._modifications, t1._first, this.$ti._eval$1("LinkedHashMapValueIterator<1>"));
    }
  };
  A.LinkedHashMapValueIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.__js_helper$_current = null;
        return false;
      } else {
        _this.__js_helper$_current = cell.hashMapCellValue;
        _this._cell = cell._next;
        return true;
      }
    },
    $isIterator: 1
  };
  A.LinkedHashMapEntriesIterable.prototype = {
    get$length(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this._map;
      return new A.LinkedHashMapEntryIterator(t1, t1._modifications, t1._first, this.$ti._eval$1("LinkedHashMapEntryIterator<1,2>"));
    }
  };
  A.LinkedHashMapEntryIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.__js_helper$_current = null;
        return false;
      } else {
        _this.__js_helper$_current = new A.MapEntry(cell.hashMapCellKey, cell.hashMapCellValue, _this.$ti._eval$1("MapEntry<1,2>"));
        _this._cell = cell._next;
        return true;
      }
    },
    $isIterator: 1
  };
  A.JsConstantLinkedHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return A.constantHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    }
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 45
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 117
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 85
  };
  A._Record.prototype = {
    get$runtimeType(_) {
      return A.createRuntimeType(this._getRti$0());
    },
    _getRti$0() {
      return A.evaluateRtiForRecord(this.$recipe, this._getFieldValues$0());
    },
    toString$0(_) {
      return this._toString$1(false);
    },
    _toString$1(safe) {
      var t2, separator, i, key, value,
        keys = this._fieldKeys$0(),
        values = this._getFieldValues$0(),
        t1 = (safe ? "" + "Record " : "") + "(";
      for (t2 = keys.length, separator = "", i = 0; i < t2; ++i, separator = ", ") {
        t1 += separator;
        key = keys[i];
        if (typeof key == "string")
          t1 = t1 + key + ": ";
        if (!(i < values.length))
          return A.ioore(values, i);
        value = values[i];
        t1 = safe ? t1 + A.Primitives_safeToString(value) : t1 + A.S(value);
      }
      t1 += ")";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _fieldKeys$0() {
      var t1,
        shapeTag = this.$shape;
      for (; $._Record__computedFieldKeys.length <= shapeTag;)
        B.JSArray_methods.add$1($._Record__computedFieldKeys, null);
      t1 = $._Record__computedFieldKeys[shapeTag];
      if (t1 == null) {
        t1 = this._computeFieldKeys$0();
        B.JSArray_methods.$indexSet($._Record__computedFieldKeys, shapeTag, t1);
      }
      return t1;
    },
    _computeFieldKeys$0() {
      var i, names, last,
        recipe = this.$recipe,
        position = recipe.indexOf("("),
        joinedNames = recipe.substring(1, position),
        fields = recipe.substring(position),
        arity = fields === "()" ? 0 : fields.replace(/[^,]/g, "").length + 1,
        t1 = type$.Object,
        result = J.JSArray_JSArray$allocateGrowable(arity, t1);
      for (i = 0; i < arity; ++i)
        result[i] = i;
      if (joinedNames !== "") {
        names = joinedNames.split(",");
        i = names.length;
        for (last = arity; i > 0;) {
          --last;
          --i;
          B.JSArray_methods.$indexSet(result, last, names[i]);
        }
      }
      return A.List_List$unmodifiable(result, t1);
    }
  };
  A._Record2.prototype = {
    _getFieldValues$0() {
      return [this._0, this._1];
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._Record2 && this.$shape === other.$shape && J.$eq$(this._0, other._0) && J.$eq$(this._1, other._1);
    },
    get$hashCode(_) {
      return A.Object_hash(this.$shape, this._0, this._1, B.C_SentinelValue);
    }
  };
  A.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, "g");
    },
    _computeHasCaptures$0() {
      var t2,
        t1 = this.pattern;
      if (!B.JSString_methods.contains$1(t1, "("))
        return false;
      t2 = this._nativeRegExp.unicode ? "u" : "";
      return new RegExp("(?:)|" + t1, t2).exec("").length > 1;
    },
    firstMatch$1(string) {
      var m = this._nativeRegExp.exec(string);
      if (m == null)
        return null;
      return new A._MatchImplementation(m);
    },
    allMatches$1(_, string) {
      return new A._AllMatchesIterable(this, string, 0);
    },
    _execGlobal$2(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new A._MatchImplementation(match);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  A._MatchImplementation.prototype = {
    get$start() {
      return this._match.index;
    },
    get$end() {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  A._AllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._AllMatchesIterator(this._re, this._string, this.__js_helper$_start);
    }
  };
  A._AllMatchesIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? type$.RegExpMatch._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, t3, match, nextIndex, t4, _this = this,
        string = _this._string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end();
          if (match._match.index === nextIndex) {
            t1 = false;
            if (t3._nativeRegExp.unicode) {
              t3 = _this._nextIndex;
              t4 = t3 + 1;
              if (t4 < t2) {
                if (!(t3 >= 0 && t3 < t2))
                  return A.ioore(string, t3);
                t3 = string.charCodeAt(t3);
                if (t3 >= 55296 && t3 <= 56319) {
                  if (!(t4 >= 0))
                    return A.ioore(string, t4);
                  t1 = string.charCodeAt(t4);
                  t1 = t1 >= 56320 && t1 <= 57343;
                }
              }
            }
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1
  };
  A.StringMatch.prototype = {
    get$end() {
      return this.start + this.pattern.length;
    },
    $isMatch: 1,
    get$start() {
      return this.start;
    }
  };
  A._StringAllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first(_) {
      var t1 = this._pattern,
        index = this._input.indexOf(t1, this.__js_helper$_index);
      if (index >= 0)
        return new A.StringMatch(index, t1);
      throw A.wrapException(A.IterableElementError_noElement());
    }
  };
  A._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new A.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    $isIterator: 1
  };
  A._Cell.prototype = {
    _readField$0() {
      var t1 = this.__late_helper$_value;
      if (t1 === this)
        throw A.wrapException(A.LateError$fieldNI(this.__late_helper$_name));
      return t1;
    }
  };
  A.NativeByteBuffer.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteBuffer_rqD;
    },
    asUint8List$2(receiver, offsetInBytes, $length) {
      A._checkViewArguments(receiver, offsetInBytes, $length);
      return $length == null ? new Uint8Array(receiver, offsetInBytes) : new Uint8Array(receiver, offsetInBytes, $length);
    },
    asUint8List$0(receiver) {
      return this.asUint8List$2(receiver, 0, null);
    },
    asUint32List$2(receiver, offsetInBytes, $length) {
      A._checkViewArguments(receiver, offsetInBytes, $length);
      $length = B.JSInt_methods._tdivFast$1(receiver.byteLength - offsetInBytes, 4);
      return new Uint32Array(receiver, offsetInBytes, $length);
    },
    asUint32List$0(receiver) {
      return this.asUint32List$2(receiver, 0, null);
    },
    asByteData$2(receiver, offsetInBytes, $length) {
      A._checkViewArguments(receiver, offsetInBytes, $length);
      return $length == null ? new DataView(receiver, offsetInBytes) : new DataView(receiver, offsetInBytes, $length);
    },
    asByteData$0(receiver) {
      return this.asByteData$2(receiver, 0, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeByteBuffer: 1
  };
  A.NativeTypedData.prototype = {
    get$buffer(receiver) {
      if (((receiver.$flags | 0) & 2) !== 0)
        return new A._UnmodifiableNativeByteBufferView(receiver.buffer);
      else
        return receiver.buffer;
    },
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = A.RangeError$range(position, 0, $length, $name, null);
      throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    }
  };
  A._UnmodifiableNativeByteBufferView.prototype = {
    asUint8List$2(_, offsetInBytes, $length) {
      var result = A.NativeUint8List_NativeUint8List$view(this._data, offsetInBytes, $length);
      result.$flags = 3;
      return result;
    },
    asUint8List$0(_) {
      return this.asUint8List$2(0, 0, null);
    },
    asUint32List$0(_) {
      var result = A.NativeUint32List_NativeUint32List$view(this._data, 0, null);
      result.$flags = 3;
      return result;
    },
    asByteData$2(_, offsetInBytes, $length) {
      var result = A.NativeByteData_NativeByteData$view(this._data, offsetInBytes, $length);
      result.$flags = 3;
      return result;
    },
    asByteData$0(_) {
      return this.asByteData$2(0, 0, null);
    }
  };
  A.NativeByteData.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteData_9dB;
    },
    $isTrustedGetRuntimeType: 1,
    $isByteData: 1
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    _setRangeFast$4(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw A.wrapException(A.RangeError$range(start, 0, end, null, null));
      count = end - start;
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw A.wrapException(A.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._asDouble(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      type$.Iterable_double._as(iterable);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, 5);
      if (type$.NativeTypedArrayOfDouble._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListBase$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._asInt(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      type$.Iterable_int._as(iterable);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, 5);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListBase$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeFloat32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float32List_9Kz;
    },
    sublist$2(receiver, start, end) {
      return new Float32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeFloat64List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float64List_9Kz;
    },
    sublist$2(receiver, start, end) {
      return new Float64Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeInt16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int16List_s5h;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeInt32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int32List_O8Z;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeInt8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int8List_rFV;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeUint16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint16List_kmP;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isUint16List: 1
  };
  A.NativeUint32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint32List_kmP;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeUint8ClampedList.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8ClampedList_04U;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8ClampedArray(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1
  };
  A.NativeUint8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8List_8Eb;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    }
  };
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(__wc0_formal) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 11
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 57
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 21
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 21
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    },
    cancel$0() {
      if (self.setTimeout != null) {
        var t1 = this._handle;
        if (t1 == null)
          return;
        self.clearTimeout(t1);
        this._handle = null;
      } else
        throw A.wrapException(A.UnsupportedError$("Canceling a timer."));
    }
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      this.$this._handle = null;
      this.callback.call$0();
    },
    $signature: 5
  };
  A._AsyncAwaitCompleter.prototype = {
    complete$1(value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        value = t1._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(value);
      }
    },
    completeError$2(e, st) {
      var t1 = this._future;
      if (this.isSync)
        t1._completeErrorObject$1(new A.AsyncError(e, st));
      else
        t1._asyncCompleteErrorObject$1(new A.AsyncError(e, st));
    }
  };
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 20
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 64
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(A._asInt(errorCode), result);
    },
    $signature: 77
  };
  A._SyncStarIterator.prototype = {
    get$current() {
      var t1 = this._async$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    _resumeBody$2(errorCode, errorValue) {
      var body, t1, exception;
      errorCode = A._asInt(errorCode);
      errorValue = errorValue;
      body = this._body;
      for (; true;)
        try {
          t1 = body(this, errorCode, errorValue);
          return t1;
        } catch (exception) {
          errorValue = exception;
          errorCode = 1;
        }
    },
    moveNext$0() {
      var nestedIterator, exception, value, suspendedBodies, _this = this, errorValue = null, errorCode = 0;
      for (; true;) {
        nestedIterator = _this._nestedIterator;
        if (nestedIterator != null)
          try {
            if (nestedIterator.moveNext$0()) {
              _this._async$_current = nestedIterator.get$current();
              return true;
            } else
              _this._nestedIterator = null;
          } catch (exception) {
            errorValue = exception;
            errorCode = 1;
            _this._nestedIterator = null;
          }
        value = _this._resumeBody$2(errorCode, errorValue);
        if (1 === value)
          return true;
        if (0 === value) {
          _this._async$_current = null;
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this._body = A._SyncStarIterator__terminatedBody;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._body = suspendedBodies.pop();
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (2 === value) {
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (3 === value) {
          errorValue = _this._datum;
          _this._datum = null;
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this._async$_current = null;
            _this._body = A._SyncStarIterator__terminatedBody;
            throw errorValue;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._body = suspendedBodies.pop();
          errorCode = 1;
          continue;
        }
        throw A.wrapException(A.StateError$("sync*"));
      }
      return false;
    },
    _yieldStar$1(iterable) {
      var t1, t2, _this = this;
      if (iterable instanceof A._SyncStarIterable) {
        t1 = iterable._outerHelper();
        t2 = _this._suspendedBodies;
        if (t2 == null)
          t2 = _this._suspendedBodies = [];
        B.JSArray_methods.add$1(t2, _this._body);
        _this._body = t1;
        return 2;
      } else {
        _this._nestedIterator = J.get$iterator$ax(iterable);
        return 2;
      }
    },
    $isIterator: 1
  };
  A._SyncStarIterable.prototype = {
    get$iterator(_) {
      return new A._SyncStarIterator(this._outerHelper(), this.$ti._eval$1("_SyncStarIterator<1>"));
    }
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A.TimeoutException.prototype = {
    toString$0(_) {
      var t1 = this.duration.toString$0(0);
      return "TimeoutException after " + t1 + ": " + this.message;
    }
  };
  A._Completer.prototype = {
    completeError$2(error, stackTrace) {
      if ((this.future._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      this._completeErrorObject$1(A._interceptUserError(error, stackTrace));
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    }
  };
  A._AsyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    },
    _completeErrorObject$1(error) {
      this.future._asyncCompleteErrorObject$1(error);
    }
  };
  A._SyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._complete$1(t1._eval$1("1/")._as(value));
    },
    complete$0() {
      return this.complete$1(null);
    },
    _completeErrorObject$1(error) {
      this.future._completeErrorObject$1(error);
    }
  };
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var exception, _this = this,
        errorCallback = _this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = _this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2);
      try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((_this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    then$1$2$onError(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        if (onError != null)
          onError = A._registerErrorHandler(onError, currentZone);
      }
      result = new A._Future(currentZone, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new A._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1(f, $R) {
      f.toString;
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    catchError$1(onError) {
      var t1 = this.$ti,
        t2 = $.Zone__current,
        result = new A._Future(t2, t1);
      if (t2 !== B.C__RootZone)
        onError = A._registerErrorHandler(onError, t2);
      this._addListener$1(new A._FutureListener(result, 2, null, onError, t1._eval$1("_FutureListener<1,1>")));
      return result;
    },
    _setErrorObject$1(error) {
      this._state = this._state & 1 | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._state = source._state & 30 | this._state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__addListener_closure(_this, listener)));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__prependListeners_closure(_box_0, _this)));
      }
    },
    _removeListeners$0() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        A._Future__chainCoreFuture(value, _this, true);
      else {
        listeners = _this._removeListeners$0();
        t1._precomputed1._as(value);
        _this._state = 8;
        _this._resultOrListeners = value;
        A._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeWithResultOf$1(source) {
      var t1, listeners, _this = this;
      if ((source._state & 16) !== 0) {
        t1 = _this._zone === source._zone;
        t1 = !(t1 || t1);
      } else
        t1 = false;
      if (t1)
        return;
      listeners = _this._removeListeners$0();
      _this._cloneResult$1(source);
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeErrorObject$1(error) {
      var listeners = this._removeListeners$0();
      this._setErrorObject$1(error);
      A._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(value);
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state ^= 2;
      A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__asyncCompleteWithValue_closure(_this, value)));
    },
    _chainFuture$1(value) {
      A._Future__chainCoreFuture(this.$ti._eval$1("Future<1>")._as(value), this, false);
      return;
    },
    _asyncCompleteErrorObject$1(error) {
      this._state ^= 2;
      A._rootScheduleMicrotask(null, null, this._zone, type$.void_Function._as(new A._Future__asyncCompleteErrorObject_closure(this, error)));
    },
    timeout$1(timeLimit) {
      var _future, _this = this, t1 = {};
      if ((_this._state & 24) !== 0) {
        t1 = new A._Future($.Zone__current, _this.$ti);
        t1._asyncComplete$1(_this);
        return t1;
      }
      _future = new A._Future($.Zone__current, _this.$ti);
      t1.timer = null;
      t1.timer = A.Timer_Timer(timeLimit, new A._Future_timeout_closure(_future, timeLimit));
      _this.then$1$2$onError(new A._Future_timeout_closure0(t1, _this, _future), new A._Future_timeout_closure1(t1, _future), type$.Null);
      return _future;
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 5
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 5
  };
  A._Future__chainCoreFuture_closure.prototype = {
    call$0() {
      A._Future__chainCoreFuture(this._box_0.source, this.target, true);
    },
    $signature: 5
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 5
  };
  A._Future__asyncCompleteErrorObject_closure.prototype = {
    call$0() {
      this.$this._completeErrorObject$1(this.error);
    },
    $signature: 5
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, t3, originalSource, joinedResult, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (_this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        } else {
          t1 = e;
          t2 = s;
          if (t2 == null)
            t2 = A.AsyncError_defaultStackTrace(t1);
          t3 = _this._box_0;
          t3.listenerValueOrError = new A.AsyncError(t1, t2);
          t1 = t3;
        }
        t1.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (completeResult instanceof A._Future) {
        originalSource = _this._box_1.source;
        joinedResult = new A._Future(originalSource._zone, originalSource.$ti);
        completeResult.then$1$2$onError(new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(joinedResult, originalSource), new A._Future__propagateToListeners_handleWhenCompleteCallback_closure0(joinedResult), type$.void);
        t1 = _this._box_0;
        t1.listenerValueOrError = joinedResult;
        t1.listenerHasError = false;
      }
    },
    $signature: 5
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(__wc0_formal) {
      this.joinedResult._completeWithResultOf$1(this.originalSource);
    },
    $signature: 11
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure0.prototype = {
    call$2(e, s) {
      type$.Object._as(e);
      type$.StackTrace._as(s);
      this.joinedResult._completeErrorObject$1(new A.AsyncError(e, s));
    },
    $signature: 41
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = e;
        t2 = s;
        if (t2 == null)
          t2 = A.AsyncError_defaultStackTrace(t1);
        t3 = this._box_0;
        t3.listenerValueOrError = new A.AsyncError(t1, t2);
        t3.listenerHasError = true;
      }
    },
    $signature: 5
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, t3, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        if (t1.error === e) {
          t2 = _this._box_0;
          t2.listenerValueOrError = t1;
          t1 = t2;
        } else {
          t1 = e;
          t2 = s;
          if (t2 == null)
            t2 = A.AsyncError_defaultStackTrace(t1);
          t3 = _this._box_0;
          t3.listenerValueOrError = new A.AsyncError(t1, t2);
          t1 = t3;
        }
        t1.listenerHasError = true;
      }
    },
    $signature: 5
  };
  A._Future_timeout_closure.prototype = {
    call$0() {
      var t1 = A.StackTrace_current();
      this._future._completeErrorObject$1(new A.AsyncError(new A.TimeoutException("Future not completed", this.timeLimit), t1));
    },
    $signature: 5
  };
  A._Future_timeout_closure0.prototype = {
    call$1(v) {
      var t1;
      this.$this.$ti._precomputed1._as(v);
      t1 = this._box_0.timer;
      if (t1._handle != null) {
        t1.cancel$0();
        this._future._completeWithValue$1(v);
      }
    },
    $signature() {
      return this.$this.$ti._eval$1("Null(1)");
    }
  };
  A._Future_timeout_closure1.prototype = {
    call$2(e, s) {
      var t1;
      type$.Object._as(e);
      type$.StackTrace._as(s);
      t1 = this._box_0.timer;
      if (t1._handle != null) {
        t1.cancel$0();
        this._future._completeErrorObject$1(new A.AsyncError(e, s));
      }
    },
    $signature: 41
  };
  A._AsyncCallbackEntry.prototype = {};
  A._StreamIterator.prototype = {};
  A._Zone.prototype = {$isZone: 1};
  A._rootHandleError_closure.prototype = {
    call$0() {
      A.Error_throwWithStackTrace(this.error, this.stackTrace);
    },
    $signature: 5
  };
  A._RootZone.prototype = {
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 5
  };
  A._LinkedHashSet.prototype = {
    get$iterator(_) {
      var _this = this,
        t1 = new A._LinkedHashSetIterator(_this, _this._collection$_modifications, A._instanceType(_this)._eval$1("_LinkedHashSetIterator<1>"));
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    contains$1(_, object) {
      var strings, nums;
      if (typeof object == "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(strings[object]) != null;
      } else if (typeof object == "number" && (object & 1073741823) === object) {
        nums = this._collection$_nums;
        if (nums == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(nums[object]) != null;
      } else
        return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    get$first(_) {
      var first = this._collection$_first;
      if (first == null)
        throw A.wrapException(A.StateError$("No elements"));
      return A._instanceType(this)._precomputed1._as(first._element);
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1(element) {
      var rest, hash, bucket, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    _collection$_addHashTableEntry$2(table, element) {
      A._instanceType(this)._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _collection$_newLinkedCell$1(element) {
      var _this = this,
        cell = new A._LinkedHashSetCell(A._instanceType(_this)._precomputed1._as(element));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else
        _this._collection$_last = _this._collection$_last._collection$_next = cell;
      ++_this._collection$_length;
      _this._collection$_modifications = _this._collection$_modifications + 1 & 1073741823;
      return cell;
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._collection$_cell,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this._collection$_current = null;
        return false;
      } else {
        _this._collection$_current = _this.$ti._eval$1("1?")._as(cell._element);
        _this._collection$_cell = cell._collection$_next;
        return true;
      }
    },
    $isIterator: 1
  };
  A.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 110
  };
  A.ListBase.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListBase.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    contains$1(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    any$1(receiver, test) {
      var $length, i;
      A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (test.call$1(this.$index(receiver, i)))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    firstWhere$2$orElse(receiver, test, orElse) {
      var $length, i, element;
      A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        element = this.$index(receiver, i);
        if (test.call$1(element))
          return element;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      throw A.wrapException(A.IterableElementError_noElement());
    },
    firstWhere$1(receiver, test) {
      test.toString;
      return this.firstWhere$2$orElse(receiver, test, null);
    },
    where$1(receiver, test) {
      var t1 = A.instanceType(receiver);
      return new A.WhereIterable(receiver, t1._eval$1("bool(ListBase.E)")._as(test), t1._eval$1("WhereIterable<ListBase.E>"));
    },
    whereType$1$0(receiver, $T) {
      return new A.WhereTypeIterable(receiver, $T._eval$1("WhereTypeIterable<0>"));
    },
    map$1$1(receiver, f, $T) {
      var t1 = A.instanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(ListBase.E)")._as(f), t1._eval$1("@<ListBase.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    skip$1(receiver, count) {
      return A.SubListIterable$(receiver, count, null, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    take$1(receiver, count) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(count, "count", type$.int), A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    removeWhere$1(receiver, test) {
      this._filter$2(receiver, A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test), false);
    },
    _filter$2(receiver, test, retainMatching) {
      var retained, $length, i, element, _this = this,
        t1 = A.instanceType(receiver);
      t1._eval$1("bool(ListBase.E)")._as(test);
      retained = A._setArrayType([], t1._eval$1("JSArray<ListBase.E>"));
      $length = _this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        element = _this.$index(receiver, i);
        if (J.$eq$(test.call$1(element), false))
          B.JSArray_methods.add$1(retained, element);
        if ($length !== _this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      if (retained.length !== _this.get$length(receiver)) {
        _this.setRange$3(receiver, 0, retained.length, retained);
        _this.set$length(receiver, retained.length);
      }
    },
    sublist$2(receiver, start, end) {
      var t1,
        listLength = this.get$length(receiver);
      if (end == null)
        end = listLength;
      A.RangeError_checkValidRange(start, end, listLength);
      t1 = A.List_List$_of(this.getRange$2(receiver, start, end), A.instanceType(receiver)._eval$1("ListBase.E"));
      return t1;
    },
    getRange$2(receiver, start, end) {
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      return A.SubListIterable$(receiver, start, end, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, t1, i;
      A.instanceType(receiver)._eval$1("Iterable<ListBase.E>")._as(iterable);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    get$reversed(receiver) {
      return new A.ReversedListIterable(receiver, A.instanceType(receiver)._eval$1("ReversedListIterable<ListBase.E>"));
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.MapBase.prototype = {
    cast$2$0(_, RK, RV) {
      var t1 = A._instanceType(this);
      return A.Map_castFrom(this, t1._eval$1("MapBase.K"), t1._eval$1("MapBase.V"), RK, RV);
    },
    forEach$1(_, action) {
      var t2, key, t3,
        t1 = A._instanceType(this);
      t1._eval$1("~(MapBase.K,MapBase.V)")._as(action);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
      }
    },
    get$entries() {
      return this.get$keys().map$1$1(0, new A.MapBase_entries_closure(this), A._instanceType(this)._eval$1("MapEntry<MapBase.K,MapBase.V>"));
    },
    map$2$1(_, transform, K2, V2) {
      var result, t2, key, t3, entry,
        t1 = A._instanceType(this);
      t1._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(MapBase.K,MapBase.V)")._as(transform);
      result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        entry = transform.call$2(key, t3 == null ? t1._as(t3) : t3);
        result.$indexSet(0, entry.key, entry.value);
      }
      return result;
    },
    addEntries$1(newEntries) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(A._instanceType(this)._eval$1("Iterable<MapEntry<MapBase.K,MapBase.V>>")._as(newEntries)); t1.moveNext$0();) {
        t2 = t1.get$current();
        this.$indexSet(0, t2.key, t2.value);
      }
    },
    removeWhere$1(_, test) {
      var keysToRemove, t2, key, t3, _i, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("bool(MapBase.K,MapBase.V)")._as(test);
      keysToRemove = A._setArrayType([], t1._eval$1("JSArray<MapBase.K>"));
      for (t2 = _this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = _this.$index(0, key);
        if (test.call$2(key, t3 == null ? t1._as(t3) : t3))
          B.JSArray_methods.add$1(keysToRemove, key);
      }
      for (t1 = keysToRemove.length, _i = 0; _i < keysToRemove.length; keysToRemove.length === t1 || (0, A.throwConcurrentModificationError)(keysToRemove), ++_i)
        _this.remove$1(0, keysToRemove[_i]);
    },
    containsKey$1(key) {
      return this.get$keys().contains$1(0, key);
    },
    get$length(_) {
      var t1 = this.get$keys();
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this.get$keys();
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this.get$keys();
      return t1.get$isNotEmpty(t1);
    },
    get$values() {
      return new A._MapBaseValueIterable(this, A._instanceType(this)._eval$1("_MapBaseValueIterable<MapBase.K,MapBase.V>"));
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.MapBase_entries_closure.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t2._eval$1("MapBase.K")._as(key);
      t1 = t1.$index(0, key);
      if (t1 == null)
        t1 = t2._eval$1("MapBase.V")._as(t1);
      return new A.MapEntry(key, t1, t2._eval$1("MapEntry<MapBase.K,MapBase.V>"));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("MapEntry<MapBase.K,MapBase.V>(MapBase.K)");
    }
  };
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = A.S(k);
      t1._contents = (t1._contents += t2) + ": ";
      t2 = A.S(v);
      t1._contents += t2;
    },
    $signature: 30
  };
  A.UnmodifiableMapBase.prototype = {};
  A._MapBaseValueIterable.prototype = {
    get$length(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this._collection$_map;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._collection$_map;
      return t1.get$isNotEmpty(t1);
    },
    get$first(_) {
      var t1 = this._collection$_map,
        t2 = t1.get$keys();
      t2 = t1.$index(0, t2.get$first(t2));
      return t2 == null ? this.$ti._rest[1]._as(t2) : t2;
    },
    get$iterator(_) {
      var t1 = this._collection$_map,
        t2 = t1.get$keys();
      return new A._MapBaseValueIterator(t2.get$iterator(t2), t1, this.$ti._eval$1("_MapBaseValueIterator<1,2>"));
    }
  };
  A._MapBaseValueIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._collection$_keys;
      if (t1.moveNext$0()) {
        _this._collection$_current = _this._collection$_map.$index(0, t1.get$current());
        return true;
      }
      _this._collection$_current = null;
      return false;
    },
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    $isIterator: 1
  };
  A._UnmodifiableMapMixin.prototype = {
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._eval$1("_UnmodifiableMapMixin.K")._as(key);
      t1._eval$1("_UnmodifiableMapMixin.V")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    remove$1(_, key) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  A.MapView.prototype = {
    $index(_, key) {
      return this._collection$_map.$index(0, key);
    },
    containsKey$1(key) {
      return this._collection$_map.containsKey$1(key);
    },
    forEach$1(_, action) {
      this._collection$_map.forEach$1(0, A._instanceType(this)._eval$1("~(1,2)")._as(action));
    },
    get$isEmpty(_) {
      var t1 = this._collection$_map;
      return t1.get$isEmpty(t1);
    },
    get$length(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    },
    get$keys() {
      return this._collection$_map.get$keys();
    },
    toString$0(_) {
      return this._collection$_map.toString$0(0);
    },
    get$values() {
      return this._collection$_map.get$values();
    },
    get$entries() {
      return this._collection$_map.get$entries();
    },
    map$2$1(_, transform, K2, V2) {
      return this._collection$_map.map$2$1(0, A._instanceType(this)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), K2, V2);
    },
    $isMap: 1
  };
  A.UnmodifiableMapView.prototype = {};
  A.SetBase.prototype = {
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    join$1(_, separator) {
      var t1, first, t2, t3,
        iterator = A._LinkedHashSetIterator$(this, this._collection$_modifications, A._instanceType(this)._precomputed1);
      if (!iterator.moveNext$0())
        return "";
      t1 = iterator._collection$_current;
      first = J.toString$0$(t1 == null ? iterator.$ti._precomputed1._as(t1) : t1);
      if (!iterator.moveNext$0())
        return first;
      t1 = iterator.$ti._precomputed1;
      if (separator.length === 0) {
        t2 = first;
        do {
          t3 = iterator._collection$_current;
          t2 += A.S(t3 == null ? t1._as(t3) : t3);
        } while (iterator.moveNext$0());
        t1 = t2;
      } else {
        t2 = first;
        do {
          t3 = iterator._collection$_current;
          t2 = t2 + separator + A.S(t3 == null ? t1._as(t3) : t3);
        } while (iterator.moveNext$0());
        t1 = t2;
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    skip$1(_, n) {
      return A.SkipIterable_SkipIterable(this, n, A._instanceType(this)._precomputed1);
    },
    get$first(_) {
      var t1,
        it = A._LinkedHashSetIterator$(this, this._collection$_modifications, A._instanceType(this)._precomputed1);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = it._collection$_current;
      return t1 == null ? it.$ti._precomputed1._as(t1) : t1;
    },
    elementAt$1(_, index) {
      var iterator, skipCount, t1, _this = this;
      A.RangeError_checkNotNegative(index, "index");
      iterator = A._LinkedHashSetIterator$(_this, _this._collection$_modifications, A._instanceType(_this)._precomputed1);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0) {
          t1 = iterator._collection$_current;
          return t1 == null ? iterator.$ti._precomputed1._as(t1) : t1;
        }
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, _this, null, "index"));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  A._SetBase.prototype = {};
  A._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  A._Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 26
  };
  A._Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 26
  };
  A.AsciiCodec.prototype = {
    decode$2$allowInvalid(bytes, allowInvalid) {
      type$.List_int._as(bytes);
      if (allowInvalid === true)
        return B.AsciiDecoder_true.convert$1(bytes);
      else
        return B.AsciiDecoder_false.convert$1(bytes);
    }
  };
  A._UnicodeSubsetEncoder.prototype = {
    convert$1(string) {
      var stringLength, end, result, i, codeUnit;
      A._asString(string);
      stringLength = string.length;
      end = A.RangeError_checkValidRange(0, null, stringLength);
      result = new Uint8Array(end);
      for (i = 0; i < end; ++i) {
        if (!(i < stringLength))
          return A.ioore(string, i);
        codeUnit = string.charCodeAt(i);
        if ((codeUnit & 4294967168) !== 0)
          throw A.wrapException(A.ArgumentError$value(string, "string", "Contains invalid characters."));
        if (!(i < end))
          return A.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    }
  };
  A.AsciiEncoder.prototype = {};
  A._UnicodeSubsetDecoder.prototype = {
    convert$1(bytes) {
      var t1, end, i, byte;
      type$.List_int._as(bytes);
      t1 = bytes.length;
      end = A.RangeError_checkValidRange(0, null, t1);
      for (i = 0; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(bytes, i);
        byte = bytes[i];
        if ((byte & 4294967168) >>> 0 !== 0) {
          if (!this._allowInvalid)
            throw A.wrapException(A.FormatException$("Invalid value in input: " + byte, null, null));
          return this._convertInvalid$3(bytes, 0, end);
        }
      }
      return A.String_String$fromCharCodes(bytes, 0, end);
    },
    _convertInvalid$3(bytes, start, end) {
      var i, t1, value;
      type$.List_int._as(bytes);
      for (i = start, t1 = ""; i < end; ++i) {
        if (!(i < bytes.length))
          return A.ioore(bytes, i);
        value = bytes[i];
        t1 += A.Primitives_stringFromCharCode((value & 4294967168) >>> 0 !== 0 ? 65533 : value);
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.AsciiDecoder.prototype = {};
  A.Base64Codec.prototype = {
    get$encoder() {
      return this._encoder;
    },
    normalize$3(source, start, end) {
      var inverseAlphabet, t2, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, t3, digit2, char0, value, t4, endLength, $length,
        _s64_ = string$.ABCDEF,
        _s31_ = "Invalid base64 encoding length ",
        t1 = source.length;
      end = A.RangeError_checkValidRange(start, end, t1);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t2 = inverseAlphabet.length, i = start, sliceStart = i, buffer = null, firstPadding = -1, firstPaddingSourceIndex = -1, paddingCount = 0; i < end; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(source, i);
        char = source.charCodeAt(i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            if (!(i0 < t1))
              return A.ioore(source, i0);
            digit1 = A.hexDigitValue(source.charCodeAt(i0));
            t3 = i0 + 1;
            if (!(t3 < t1))
              return A.ioore(source, t3);
            digit2 = A.hexDigitValue(source.charCodeAt(t3));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          if (!(char0 >= 0 && char0 < t2))
            return A.ioore(inverseAlphabet, char0);
          value = inverseAlphabet[char0];
          if (value >= 0) {
            if (!(value < 64))
              return A.ioore(_s64_, value);
            char0 = _s64_.charCodeAt(value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t3 = buffer == null ? null : buffer._contents.length;
                if (t3 == null)
                  t3 = 0;
                firstPadding = t3 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t3 = buffer;
            } else
              t3 = buffer;
            t3._contents += B.JSString_methods.substring$2(source, sliceStart, i);
            t4 = A.Primitives_stringFromCharCode(char);
            t3._contents += t4;
            sliceStart = i0;
            continue;
          }
        }
        throw A.wrapException(A.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = B.JSString_methods.substring$2(source, sliceStart, end);
        t1 = buffer._contents += t1;
        t2 = t1.length;
        if (firstPadding >= 0)
          A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = B.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw A.wrapException(A.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return B.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = B.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw A.wrapException(A.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = B.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    }
  };
  A.Base64Encoder.prototype = {
    convert$1(input) {
      var t1;
      type$.List_int._as(input);
      if (J.get$isEmpty$asx(input))
        return "";
      t1 = this._urlSafe ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_" : string$.ABCDEF;
      t1 = new A._Base64Encoder(t1).encode$4(input, 0, input.length, true);
      t1.toString;
      return A.String_String$fromCharCodes(t1, 0, null);
    }
  };
  A._Base64Encoder.prototype = {
    encode$4(bytes, start, end, isLast) {
      var t1, byteCount, fullChunks, bufferLength, output;
      type$.List_int._as(bytes);
      t1 = this._convert$_state;
      byteCount = (t1 & 3) + (end - start);
      fullChunks = B.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = new Uint8Array(bufferLength);
      this._convert$_state = A._Base64Encoder_encodeChunk(this._alphabet, bytes, start, end, true, output, 0, t1);
      if (bufferLength > 0)
        return output;
      return null;
    }
  };
  A.Base64Decoder.prototype = {
    convert$1(input) {
      var decoder, t1, t2,
        end = A.RangeError_checkValidRange(0, null, input.length);
      if (0 === end)
        return new Uint8Array(0);
      decoder = new A._Base64Decoder();
      t1 = decoder.decode$3(input, 0, end);
      t1.toString;
      t2 = decoder._convert$_state;
      if (t2 < -1)
        A.throwExpression(A.FormatException$("Missing padding character", input, end));
      if (t2 > 0)
        A.throwExpression(A.FormatException$("Invalid length, must be multiple of four", input, end));
      decoder._convert$_state = -1;
      return t1;
    }
  };
  A._Base64Decoder.prototype = {
    decode$3(input, start, end) {
      var buffer, _this = this,
        t1 = _this._convert$_state;
      if (t1 < 0) {
        _this._convert$_state = A._Base64Decoder__checkPadding(input, start, end, t1);
        return null;
      }
      if (start === end)
        return new Uint8Array(0);
      buffer = A._Base64Decoder__allocateBuffer(input, start, end, t1);
      _this._convert$_state = A._Base64Decoder_decodeChunk(input, start, end, buffer, 0, _this._convert$_state);
      return buffer;
    }
  };
  A.Codec.prototype = {};
  A.Converter.prototype = {};
  A.Encoding.prototype = {};
  A.JsonUnsupportedObjectError.prototype = {
    toString$0(_) {
      var safeString = A.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  A.JsonCyclicError.prototype = {
    toString$0(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  A.JsonCodec.prototype = {
    encode$2$toEncodable(value, toEncodable) {
      var t1;
      type$.nullable_nullable_Object_Function_dynamic._as(toEncodable);
      if (toEncodable == null)
        toEncodable = null;
      if (toEncodable == null) {
        t1 = this.get$encoder();
        return A._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
      }
      return A._JsonStringStringifier_stringify(value, toEncodable, null);
    },
    get$encoder() {
      return B.JsonEncoder_null_null;
    }
  };
  A.JsonEncoder.prototype = {};
  A._JsonStringifier.prototype = {
    writeStringContent$1(s) {
      var t1, offset, i, charCode, t2, t3,
        $length = s.length;
      for (t1 = this._sink, offset = 0, i = 0; i < $length; ++i) {
        charCode = s.charCodeAt(i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t2 = charCode & 64512;
            if (t2 === 55296) {
              t3 = i + 1;
              t3 = !(t3 < $length && (s.charCodeAt(t3) & 64512) === 56320);
            } else
              t3 = false;
            if (!t3)
              if (t2 === 56320) {
                t2 = i - 1;
                t2 = !(t2 >= 0 && (s.charCodeAt(t2) & 64512) === 55296);
              } else
                t2 = false;
            else
              t2 = true;
            if (t2) {
              if (i > offset)
                t1._contents += B.JSString_methods.substring$2(s, offset, i);
              offset = i + 1;
              t2 = A.Primitives_stringFromCharCode(92);
              t1._contents += t2;
              t2 = A.Primitives_stringFromCharCode(117);
              t1._contents += t2;
              t2 = A.Primitives_stringFromCharCode(100);
              t1._contents += t2;
              t2 = charCode >>> 8 & 15;
              t2 = A.Primitives_stringFromCharCode(t2 < 10 ? 48 + t2 : 87 + t2);
              t1._contents += t2;
              t2 = charCode >>> 4 & 15;
              t2 = A.Primitives_stringFromCharCode(t2 < 10 ? 48 + t2 : 87 + t2);
              t1._contents += t2;
              t2 = charCode & 15;
              t2 = A.Primitives_stringFromCharCode(t2 < 10 ? 48 + t2 : 87 + t2);
              t1._contents += t2;
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset)
            t1._contents += B.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2 = A.Primitives_stringFromCharCode(92);
          t1._contents += t2;
          switch (charCode) {
            case 8:
              t2 = A.Primitives_stringFromCharCode(98);
              t1._contents += t2;
              break;
            case 9:
              t2 = A.Primitives_stringFromCharCode(116);
              t1._contents += t2;
              break;
            case 10:
              t2 = A.Primitives_stringFromCharCode(110);
              t1._contents += t2;
              break;
            case 12:
              t2 = A.Primitives_stringFromCharCode(102);
              t1._contents += t2;
              break;
            case 13:
              t2 = A.Primitives_stringFromCharCode(114);
              t1._contents += t2;
              break;
            default:
              t2 = A.Primitives_stringFromCharCode(117);
              t1._contents += t2;
              t2 = A.Primitives_stringFromCharCode(48);
              t1._contents += t2;
              t2 = A.Primitives_stringFromCharCode(48);
              t1._contents += t2;
              t2 = charCode >>> 4 & 15;
              t2 = A.Primitives_stringFromCharCode(t2 < 10 ? 48 + t2 : 87 + t2);
              t1._contents += t2;
              t2 = charCode & 15;
              t2 = A.Primitives_stringFromCharCode(t2 < 10 ? 48 + t2 : 87 + t2);
              t1._contents += t2;
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            t1._contents += B.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2 = A.Primitives_stringFromCharCode(92);
          t1._contents += t2;
          t2 = A.Primitives_stringFromCharCode(charCode);
          t1._contents += t2;
        }
      }
      if (offset === 0)
        t1._contents += s;
      else if (offset < $length)
        t1._contents += B.JSString_methods.substring$2(s, offset, $length);
    },
    _checkCycle$1(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw A.wrapException(new A.JsonCyclicError(object, null));
      }
      B.JSArray_methods.add$1(t1, object);
    },
    writeObject$1(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = A.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw A.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw A.wrapException(t1);
      }
    },
    writeJsonValue$1(object) {
      var t1, t2, success, _this = this;
      if (typeof object == "number") {
        if (!isFinite(object))
          return false;
        t1 = _this._sink;
        t2 = B.JSNumber_methods.toString$0(object);
        t1._contents += t2;
        return true;
      } else if (object === true) {
        _this._sink._contents += "true";
        return true;
      } else if (object === false) {
        _this._sink._contents += "false";
        return true;
      } else if (object == null) {
        _this._sink._contents += "null";
        return true;
      } else if (typeof object == "string") {
        t1 = _this._sink;
        t1._contents += '"';
        _this.writeStringContent$1(object);
        t1._contents += '"';
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return success;
      } else
        return false;
    },
    writeList$1(list) {
      var t2, i,
        t1 = this._sink;
      t1._contents += "[";
      t2 = J.getInterceptor$asx(list);
      if (t2.get$isNotEmpty(list)) {
        this.writeObject$1(t2.$index(list, 0));
        for (i = 1; i < t2.get$length(list); ++i) {
          t1._contents += ",";
          this.writeObject$1(t2.$index(list, i));
        }
      }
      t1._contents += "]";
    },
    writeMap$1(map) {
      var t1, keyValueList, i, t2, separator, t3, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this._sink._contents += "{}";
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = A.List_List$filled(t1, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new A._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      t2 = _this._sink;
      t2._contents += "{";
      for (separator = '"'; i < t1; i += 2, separator = ',"') {
        t2._contents += separator;
        _this.writeStringContent$1(A._asString(keyValueList[i]));
        t2._contents += '":';
        t3 = i + 1;
        if (!(t3 < t1))
          return A.ioore(keyValueList, t3);
        _this.writeObject$1(keyValueList[t3]);
      }
      t2._contents += "}";
      return true;
    }
  };
  A._JsonStringifier_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      B.JSArray_methods.$indexSet(t1, t2.i++, key);
      B.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 30
  };
  A._JsonStringStringifier.prototype = {
    get$_partialResult() {
      var t1 = this._sink._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.Utf8Encoder.prototype = {
    convert$1(string) {
      var stringLength, end, t1, encoder, t2;
      A._asString(string);
      stringLength = string.length;
      end = A.RangeError_checkValidRange(0, null, stringLength);
      if (end === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array(end * 3);
      encoder = new A._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        t2 = end - 1;
        if (!(t2 >= 0 && t2 < stringLength))
          return A.ioore(string, t2);
        encoder._writeReplacementCharacter$0();
      }
      return B.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    }
  };
  A._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var t4, _this = this,
        t1 = _this._convert$_buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1;
      t1.$flags & 2 && A.throwUnsupportedOperation(t1);
      t4 = t1.length;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      if (!(t3 < t4))
        return A.ioore(t1, t3);
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, t4, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._convert$_buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t4 = t1.length;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1, t2, t3, t4, stringIndex, codeUnit, t5, t6, _this = this;
      if (start !== end) {
        t1 = end - 1;
        if (!(t1 >= 0 && t1 < str.length))
          return A.ioore(str, t1);
        t1 = (str.charCodeAt(t1) & 64512) === 55296;
      } else
        t1 = false;
      if (t1)
        --end;
      for (t1 = _this._convert$_buffer, t2 = t1.$flags | 0, t3 = t1.length, t4 = str.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        if (!(stringIndex < t4))
          return A.ioore(str, stringIndex);
        codeUnit = str.charCodeAt(stringIndex);
        if (codeUnit <= 127) {
          t5 = _this._bufferIndex;
          if (t5 >= t3)
            break;
          _this._bufferIndex = t5 + 1;
          t2 & 2 && A.throwUnsupportedOperation(t1);
          t1[t5] = codeUnit;
        } else {
          t5 = codeUnit & 64512;
          if (t5 === 55296) {
            if (_this._bufferIndex + 4 > t3)
              break;
            t5 = stringIndex + 1;
            if (!(t5 < t4))
              return A.ioore(str, t5);
            if (_this._writeSurrogate$2(codeUnit, str.charCodeAt(t5)))
              stringIndex = t5;
          } else if (t5 === 56320) {
            if (_this._bufferIndex + 3 > t3)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t5 = _this._bufferIndex;
            t6 = t5 + 1;
            if (t6 >= t3)
              break;
            _this._bufferIndex = t6;
            t2 & 2 && A.throwUnsupportedOperation(t1);
            if (!(t5 < t3))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t6 + 1;
            t1[t6] = codeUnit & 63 | 128;
          } else {
            t5 = _this._bufferIndex;
            if (t5 + 2 >= t3)
              break;
            t6 = _this._bufferIndex = t5 + 1;
            t2 & 2 && A.throwUnsupportedOperation(t1);
            if (!(t5 < t3))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit >>> 12 | 224;
            t5 = _this._bufferIndex = t6 + 1;
            if (!(t6 < t3))
              return A.ioore(t1, t6);
            t1[t6] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t5 + 1;
            if (!(t5 < t3))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  A.Utf8Decoder.prototype = {
    convert$1(codeUnits) {
      return new A._Utf8Decoder(this._allowMalformed)._convertGeneral$4(type$.List_int._as(codeUnits), 0, null, true);
    }
  };
  A._Utf8Decoder.prototype = {
    _convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var end, casted, bytes, errorOffset, t1, result, message, _this = this;
      type$.List_int._as(codeUnits);
      end = A.RangeError_checkValidRange(start, maybeEnd, codeUnits.length);
      if (start === end)
        return "";
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        bytes = casted;
        errorOffset = 0;
      } else {
        bytes = A._Utf8Decoder__makeNativeUint8List(codeUnits, start, end);
        end -= start;
        errorOffset = start;
        start = 0;
      }
      if (end - start >= 15) {
        t1 = _this.allowMalformed;
        result = A._Utf8Decoder__convertInterceptedUint8List(t1, bytes, start, end);
        if (result != null) {
          if (!t1)
            return result;
          if (result.indexOf("\ufffd") < 0)
            return result;
        }
      }
      result = _this._decodeRecursive$4(bytes, start, end, true);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = A._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw A.wrapException(A.FormatException$(message, codeUnits, errorOffset + _this._charOrIndex));
      }
      return result;
    },
    _decodeRecursive$4(bytes, start, end, single) {
      var mid, s1, _this = this;
      if (end - start > 1000) {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._decodeRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0)
          return s1;
        return s1 + _this._decodeRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    decodeGeneral$4(bytes, start, end, single) {
      var byte, t2, type, t3, i0, markEnd, i1, m, _this = this,
        _s256_ = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE",
        _s144_ = " \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA",
        _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new A.StringBuffer(""),
        i = start + 1,
        t1 = bytes.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(bytes, start);
      byte = bytes[start];
      $label0$0:
        for (t2 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            if (!(byte >= 0 && byte < 256))
              return A.ioore(_s256_, byte);
            type = _s256_.charCodeAt(byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            t3 = state + type;
            if (!(t3 >= 0 && t3 < 144))
              return A.ioore(_s144_, t3);
            state = _s144_.charCodeAt(t3);
            if (state === 0) {
              t3 = A.Primitives_stringFromCharCode(char);
              buffer._contents += t3;
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t2)
                switch (state) {
                  case 69:
                  case 67:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents += t3;
                    break;
                  case 65:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents += t3;
                    --i;
                    break;
                  default:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents = (buffer._contents += t3) + A.Primitives_stringFromCharCode(_65533);
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
              return A.ioore(bytes, i);
            byte = bytes[i];
          }
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(bytes, i);
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              if (!(i0 >= 0 && i0 < t1))
                return A.ioore(bytes, i0);
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m) {
                if (!(m < t1))
                  return A.ioore(bytes, m);
                t3 = A.Primitives_stringFromCharCode(bytes[m]);
                buffer._contents += t3;
              }
            else {
              t3 = A.String_String$fromCharCodes(bytes, i, markEnd);
              buffer._contents += t3;
            }
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t2) {
          t1 = A.Primitives_stringFromCharCode(_65533);
          buffer._contents += t1;
        } else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._BigIntImpl.prototype = {
    $negate(_) {
      var t2, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return _this;
      t2 = !_this._isNegative;
      t3 = _this._digits;
      t1 = A._BigIntImpl__normalize(t1, t3);
      return new A._BigIntImpl(t1 === 0 ? false : t2, t3, t1);
    },
    _dlShift$1(n) {
      var resultUsed, digits, resultDigits, i, t1, t2, t3,
        used = this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + n;
      digits = this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (i = used - 1, t1 = digits.length; i >= 0; --i) {
        t2 = i + n;
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 >= 0 && t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t1 = this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _drShift$1(n) {
      var resultUsed, digits, resultDigits, t1, i, t2, t3, result, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used - n;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, i = n; i < used; ++i) {
        t2 = i - n;
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t2 = _this._isNegative;
      t3 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t3 === 0 ? false : t2, resultDigits, t3);
      if (t2)
        for (i = 0; i < n; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      return result;
    },
    $shl(_, shiftAmount) {
      var t1, digitShift, resultUsed, resultDigits, t2, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      if (B.JSInt_methods.$mod(shiftAmount, 16) === 0)
        return _this._dlShift$1(digitShift);
      resultUsed = t1 + digitShift + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__lsh(_this._digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    $shr(_, shiftAmount) {
      var t1, digitShift, bitShift, resultUsed, digits, resultDigits, t2, result, i, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      bitShift = B.JSInt_methods.$mod(shiftAmount, 16);
      if (bitShift === 0)
        return _this._drShift$1(digitShift);
      resultUsed = t1 - digitShift;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__rsh(digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
      if (t1) {
        t1 = digits.length;
        if (!(digitShift >= 0 && digitShift < t1))
          return A.ioore(digits, digitShift);
        if ((digits[digitShift] & B.JSInt_methods.$shl(1, bitShift) - 1) !== 0)
          return result.$sub(0, $.$get$_BigIntImpl_one());
        for (i = 0; i < digitShift; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      }
      return result;
    },
    compareTo$1(_, other) {
      var t1, result;
      type$._BigIntImpl._as(other);
      t1 = this._isNegative;
      if (t1 === other._isNegative) {
        result = A._BigIntImpl__compareDigits(this._digits, this._used, other._digits, other._used);
        return t1 ? 0 - result : result;
      }
      return t1 ? -1 : 1;
    },
    _absAddSetSign$2(other, isNegative) {
      var resultUsed, resultDigits, t1, _this = this,
        used = _this._used,
        otherUsed = other._used;
      if (used < otherUsed)
        return other._absAddSetSign$2(_this, isNegative);
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultUsed = used + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__absAdd(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absSubSetSign$2(other, isNegative) {
      var otherUsed, resultDigits, t1, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      otherUsed = other._used;
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultDigits = new Uint16Array(used);
      A._BigIntImpl__absSub(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(used, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absAndSetSign$2(other, isNegative) {
      var digits, otherDigits, resultDigits, t1, t2, i, t3, t4,
        resultUsed = this._used,
        resultUsed0 = other._used;
      resultUsed = resultUsed < resultUsed0 ? resultUsed : resultUsed0;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < resultUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 & t4;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absAndNotSetSign$2(other, isNegative) {
      var t1, t2, i, t3, t4,
        resultUsed = this._used,
        digits = this._digits,
        otherDigits = other._digits,
        resultDigits = new Uint16Array(resultUsed),
        m = other._used;
      if (resultUsed < m)
        m = resultUsed;
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < m; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 & ~t4;
      }
      for (i = m; i < resultUsed; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t2 = digits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absOrSetSign$2(other, isNegative) {
      var m, l, t1, t2, i, t3, t4, lDigits,
        used = this._used,
        otherUsed = other._used,
        resultUsed = used > otherUsed ? used : otherUsed,
        digits = this._digits,
        otherDigits = other._digits,
        resultDigits = new Uint16Array(resultUsed);
      if (used < otherUsed) {
        m = used;
        l = other;
      } else {
        m = otherUsed;
        l = this;
      }
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < m; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 | t4;
      }
      lDigits = l._digits;
      for (t1 = lDigits.length, i = m; i < resultUsed; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(lDigits, i);
        t2 = lDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absXorSetSign$2(other, isNegative) {
      var m, l, t1, t2, i, t3, t4, lDigits,
        used = this._used,
        otherUsed = other._used,
        resultUsed = used > otherUsed ? used : otherUsed,
        digits = this._digits,
        otherDigits = other._digits,
        resultDigits = new Uint16Array(resultUsed);
      if (used < otherUsed) {
        m = used;
        l = other;
      } else {
        m = otherUsed;
        l = this;
      }
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < m; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 ^ t4;
      }
      lDigits = l._digits;
      for (t1 = lDigits.length, i = m; i < resultUsed; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(lDigits, i);
        t2 = lDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    $and(_, other) {
      var t1, n, p, _this = this;
      type$._BigIntImpl._as(other);
      if (_this._used === 0 || other._used === 0)
        return $.$get$_BigIntImpl_zero();
      t1 = _this._isNegative;
      if (t1 === other._isNegative) {
        if (t1) {
          t1 = $.$get$_BigIntImpl_one();
          return _this._absSubSetSign$2(t1, true)._absOrSetSign$2(other._absSubSetSign$2(t1, true), true)._absAddSetSign$2(t1, true);
        }
        return _this._absAndSetSign$2(other, false);
      }
      if (t1) {
        n = _this;
        p = other;
      } else {
        n = other;
        p = _this;
      }
      return p._absAndNotSetSign$2(n._absSubSetSign$2($.$get$_BigIntImpl_one(), false), false);
    },
    $xor(_, other) {
      var t1, n, p, _this = this;
      if (_this._used === 0)
        return other;
      if (other._used === 0)
        return _this;
      t1 = _this._isNegative;
      if (t1 === other._isNegative) {
        if (t1) {
          t1 = $.$get$_BigIntImpl_one();
          return _this._absSubSetSign$2(t1, true)._absXorSetSign$2(other._absSubSetSign$2(t1, true), false);
        }
        return _this._absXorSetSign$2(other, false);
      }
      if (t1) {
        n = _this;
        p = other;
      } else {
        n = other;
        p = _this;
      }
      t1 = $.$get$_BigIntImpl_one();
      return p._absXorSetSign$2(n._absSubSetSign$2(t1, true), true)._absAddSetSign$2(t1, true);
    },
    $not(_) {
      var _this = this;
      if (_this._used === 0)
        return $.$get$_BigIntImpl__minusOne();
      if (_this._isNegative)
        return _this._absSubSetSign$2($.$get$_BigIntImpl_one(), false);
      return _this._absAddSetSign$2($.$get$_BigIntImpl_one(), true);
    },
    $add(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other;
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative === other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $sub(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other.$negate(0);
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative !== other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $mul(_, other) {
      var resultUsed, digits, otherDigits, resultDigits, t1, i, t2,
        used = this._used,
        otherUsed = other._used;
      if (used === 0 || otherUsed === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + otherUsed;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (!(i < t1))
          return A.ioore(otherDigits, i);
        A._BigIntImpl__mulAdd(otherDigits[i], digits, 0, resultDigits, i, used);
        ++i;
      }
      t1 = this._isNegative !== other._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _div$1(other) {
      var lastQuo_used, quo_digits, t1, quo;
      if (this._used < other._used)
        return $.$get$_BigIntImpl_zero();
      this._divRem$1(other);
      lastQuo_used = $._BigIntImpl____lastQuoRemUsed._readField$0() - $._BigIntImpl____lastRemUsed._readField$0();
      quo_digits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastQuoRemUsed._readField$0(), lastQuo_used);
      t1 = A._BigIntImpl__normalize(lastQuo_used, quo_digits);
      quo = new A._BigIntImpl(false, quo_digits, t1);
      return this._isNegative !== other._isNegative && t1 > 0 ? quo.$negate(0) : quo;
    },
    _rem$1(other) {
      var remDigits, t1, rem, _this = this;
      if (_this._used < other._used)
        return _this;
      _this._divRem$1(other);
      remDigits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), 0, $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastRemUsed._readField$0());
      t1 = A._BigIntImpl__normalize($._BigIntImpl____lastRemUsed._readField$0(), remDigits);
      rem = new A._BigIntImpl(false, remDigits, t1);
      if ($._BigIntImpl____lastRem_nsh._readField$0() > 0)
        rem = rem.$shr(0, $._BigIntImpl____lastRem_nsh._readField$0());
      return _this._isNegative && rem._used > 0 ? rem.$negate(0) : rem;
    },
    _divRem$1(other) {
      var yDigits, yUsed, t1, nsh, yDigits0, yUsed0, resultDigits, resultUsed0, topDigitDivisor, j, tmpDigits, tmpUsed, resultUsed1, nyDigits, i, estimatedQuotientDigit, _this = this,
        resultUsed = _this._used;
      if (resultUsed === $._BigIntImpl__lastDividendUsed && other._used === $._BigIntImpl__lastDivisorUsed && _this._digits === $._BigIntImpl__lastDividendDigits && other._digits === $._BigIntImpl__lastDivisorDigits)
        return;
      yDigits = other._digits;
      yUsed = other._used;
      t1 = yUsed - 1;
      if (!(t1 >= 0 && t1 < yDigits.length))
        return A.ioore(yDigits, t1);
      nsh = 16 - B.JSInt_methods.get$bitLength(yDigits[t1]);
      if (nsh > 0) {
        yDigits0 = new Uint16Array(yUsed + 5);
        yUsed0 = A._BigIntImpl__lShiftDigits(yDigits, yUsed, nsh, yDigits0);
        resultDigits = new Uint16Array(resultUsed + 5);
        resultUsed0 = A._BigIntImpl__lShiftDigits(_this._digits, resultUsed, nsh, resultDigits);
      } else {
        resultDigits = A._BigIntImpl__cloneDigits(_this._digits, 0, resultUsed, resultUsed + 2);
        yUsed0 = yUsed;
        yDigits0 = yDigits;
        resultUsed0 = resultUsed;
      }
      t1 = yUsed0 - 1;
      if (!(t1 >= 0 && t1 < yDigits0.length))
        return A.ioore(yDigits0, t1);
      topDigitDivisor = yDigits0[t1];
      j = resultUsed0 - yUsed0;
      tmpDigits = new Uint16Array(resultUsed0);
      tmpUsed = A._BigIntImpl__dlShiftDigits(yDigits0, yUsed0, j, tmpDigits);
      resultUsed1 = resultUsed0 + 1;
      t1 = resultDigits.$flags | 0;
      if (A._BigIntImpl__compareDigits(resultDigits, resultUsed0, tmpDigits, tmpUsed) >= 0) {
        t1 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(resultUsed0 >= 0 && resultUsed0 < resultDigits.length))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 1;
        A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
      } else {
        t1 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(resultUsed0 >= 0 && resultUsed0 < resultDigits.length))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 0;
      }
      t1 = yUsed0 + 2;
      nyDigits = new Uint16Array(t1);
      if (!(yUsed0 >= 0 && yUsed0 < t1))
        return A.ioore(nyDigits, yUsed0);
      nyDigits[yUsed0] = 1;
      A._BigIntImpl__absSub(nyDigits, yUsed0 + 1, yDigits0, yUsed0, nyDigits);
      i = resultUsed0 - 1;
      for (t1 = resultDigits.length; j > 0;) {
        estimatedQuotientDigit = A._BigIntImpl__estimateQuotientDigit(topDigitDivisor, resultDigits, i);
        --j;
        A._BigIntImpl__mulAdd(estimatedQuotientDigit, nyDigits, 0, resultDigits, j, yUsed0);
        if (!(i >= 0 && i < t1))
          return A.ioore(resultDigits, i);
        if (resultDigits[i] < estimatedQuotientDigit) {
          tmpUsed = A._BigIntImpl__dlShiftDigits(nyDigits, yUsed0, j, tmpDigits);
          A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
          for (; --estimatedQuotientDigit, resultDigits[i] < estimatedQuotientDigit;)
            A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
        }
        --i;
      }
      $._BigIntImpl__lastDividendDigits = _this._digits;
      $._BigIntImpl__lastDividendUsed = resultUsed;
      $._BigIntImpl__lastDivisorDigits = yDigits;
      $._BigIntImpl__lastDivisorUsed = yUsed;
      $._BigIntImpl____lastQuoRemDigits.__late_helper$_value = resultDigits;
      $._BigIntImpl____lastQuoRemUsed.__late_helper$_value = resultUsed1;
      $._BigIntImpl____lastRemUsed.__late_helper$_value = yUsed0;
      $._BigIntImpl____lastRem_nsh.__late_helper$_value = nsh;
    },
    get$hashCode(_) {
      var hash, t2, t3, i,
        combine = new A._BigIntImpl_hashCode_combine(),
        t1 = this._used;
      if (t1 === 0)
        return 6707;
      hash = this._isNegative ? 83585 : 429689;
      for (t2 = this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        hash = combine.call$2(hash, t2[i]);
      }
      return new A._BigIntImpl_hashCode_finish().call$1(hash);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._BigIntImpl && this.compareTo$1(0, other) === 0;
    },
    get$bitLength(_) {
      var t2, t3, t4, highBits, $length, i,
        t1 = this._used;
      if (t1 === 0)
        return 0;
      t2 = this._digits;
      t3 = t1 - 1;
      t4 = t2.length;
      if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t2, t3);
      highBits = t2[t3];
      $length = 16 * t3 + B.JSInt_methods.get$bitLength(highBits);
      if (!this._isNegative)
        return $length;
      if ((highBits & highBits - 1) !== 0)
        return $length;
      for (i = t1 - 2; i >= 0; --i) {
        if (!(i < t4))
          return A.ioore(t2, i);
        if (t2[i] !== 0)
          return $length;
      }
      return $length - 1;
    },
    $tdiv(_, other) {
      if (other._used === 0)
        throw A.wrapException(B.C_IntegerDivisionByZeroException);
      return this._div$1(other);
    },
    remainder$1(_, other) {
      if (other._used === 0)
        throw A.wrapException(B.C_IntegerDivisionByZeroException);
      return this._rem$1(other);
    },
    $mod(_, other) {
      var result;
      if (other._used === 0)
        throw A.wrapException(B.C_IntegerDivisionByZeroException);
      result = this._rem$1(other);
      if (result._isNegative)
        result = other._isNegative ? result.$sub(0, other) : result.$add(0, other);
      return result;
    },
    get$isEven(_) {
      var t1;
      if (this._used !== 0) {
        t1 = this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = (t1[0] & 1) === 0;
      } else
        t1 = true;
      return t1;
    },
    pow$1(exponent) {
      var result, base;
      if (exponent < 0)
        throw A.wrapException(A.ArgumentError$("Exponent must not be negative: " + exponent, null));
      if (exponent === 0)
        return $.$get$_BigIntImpl_one();
      result = $.$get$_BigIntImpl_one();
      for (base = this; exponent !== 0;) {
        if ((exponent & 1) === 1)
          result = result.$mul(0, base);
        exponent = B.JSInt_methods._shrOtherPositive$1(exponent, 1);
        if (exponent !== 0)
          base = base.$mul(0, base);
      }
      return result;
    },
    modPow$2(_, exponent, modulus) {
      var modulusUsed, modulusUsed2p4, exponentBitlen, t1, t2, z, resultDigits, result2Digits, gDigits, gUsed, j, i, resultUsed, result2Used, t0;
      if (exponent._isNegative)
        throw A.wrapException(A.ArgumentError$("exponent must be positive: " + exponent.toString$0(0), null));
      if (modulus.compareTo$1(0, $.$get$_BigIntImpl_zero()) <= 0)
        throw A.wrapException(A.ArgumentError$("modulus must be strictly positive: " + modulus.toString$0(0), null));
      if (exponent._used === 0)
        return $.$get$_BigIntImpl_one();
      modulusUsed = modulus._used;
      modulusUsed2p4 = 2 * modulusUsed + 4;
      exponentBitlen = exponent.get$bitLength(0);
      if (exponentBitlen <= 0)
        return $.$get$_BigIntImpl_one();
      t1 = modulus._digits;
      t2 = modulusUsed - 1;
      if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
      z = new A._BigIntClassic(modulus, modulus.$shl(0, 16 - B.JSInt_methods.get$bitLength(t1[t2])));
      resultDigits = new Uint16Array(modulusUsed2p4);
      result2Digits = new Uint16Array(modulusUsed2p4);
      gDigits = new Uint16Array(modulusUsed);
      gUsed = z.convert$2(this, gDigits);
      for (j = gUsed - 1; j >= 0; --j) {
        if (!(j < modulusUsed))
          return A.ioore(gDigits, j);
        t1 = gDigits[j];
        if (!(j < modulusUsed2p4))
          return A.ioore(resultDigits, j);
        resultDigits[j] = t1;
      }
      for (i = exponentBitlen - 2, resultUsed = gUsed; i >= 0; --i) {
        result2Used = z.sqr$3(resultDigits, resultUsed, result2Digits);
        if (exponent.$and(0, $.$get$_BigIntImpl_one().$shl(0, i))._used !== 0)
          resultUsed = z._reduce$2(resultDigits, A._BigIntImpl__mulDigits(result2Digits, result2Used, gDigits, gUsed, resultDigits));
        else {
          resultUsed = result2Used;
          t0 = result2Digits;
          result2Digits = resultDigits;
          resultDigits = t0;
        }
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(false, resultDigits, t1);
    },
    modInverse$1(_, modulus) {
      var t2, _this = this,
        t1 = $.$get$_BigIntImpl_zero();
      if (modulus.compareTo$1(0, t1) <= 0)
        throw A.wrapException(A.ArgumentError$("Modulus must be strictly positive: " + modulus.toString$0(0), null));
      t2 = modulus.compareTo$1(0, $.$get$_BigIntImpl_one());
      if (t2 === 0)
        return t1;
      return A._BigIntImpl__binaryGcd(modulus, _this._isNegative || A._BigIntImpl__compareDigits(_this._digits, _this._used, modulus._digits, modulus._used) >= 0 ? _this.$mod(0, modulus) : _this, true);
    },
    get$isValidInt() {
      var asInt, t1;
      if (this._used <= 3)
        return true;
      asInt = this.toInt$0(0);
      if (!isFinite(asInt))
        return false;
      t1 = this.compareTo$1(0, A._BigIntImpl__BigIntImpl$_fromInt(asInt));
      return t1 === 0;
    },
    toInt$0(_) {
      var i, t1, t2, result;
      for (i = this._used - 1, t1 = this._digits, t2 = t1.length, result = 0; i >= 0; --i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        result = result * 65536 + t1[i];
      }
      return this._isNegative ? -result : result;
    },
    toString$0(_) {
      var decimalDigitChunks, rest, t2, digits4, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        if (_this._isNegative) {
          t1 = _this._digits;
          if (0 >= t1.length)
            return A.ioore(t1, 0);
          return B.JSInt_methods.toString$0(-t1[0]);
        }
        t1 = _this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        return B.JSInt_methods.toString$0(t1[0]);
      }
      decimalDigitChunks = A._setArrayType([], type$.JSArray_String);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (; rest._used > 1;) {
        t2 = $.$get$_BigIntImpl__bigInt10000();
        if (t2._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        digits4 = rest._rem$1(t2).toString$0(0);
        B.JSArray_methods.add$1(decimalDigitChunks, digits4);
        t3 = digits4.length;
        if (t3 === 1)
          B.JSArray_methods.add$1(decimalDigitChunks, "000");
        if (t3 === 2)
          B.JSArray_methods.add$1(decimalDigitChunks, "00");
        if (t3 === 3)
          B.JSArray_methods.add$1(decimalDigitChunks, "0");
        rest = rest._div$1(t2);
      }
      t2 = rest._digits;
      if (0 >= t2.length)
        return A.ioore(t2, 0);
      B.JSArray_methods.add$1(decimalDigitChunks, B.JSInt_methods.toString$0(t2[0]));
      if (t1)
        B.JSArray_methods.add$1(decimalDigitChunks, "-");
      return new A.ReversedListIterable(decimalDigitChunks, type$.ReversedListIterable_String).join$0(0);
    },
    _toRadixCodeUnit$1(digit) {
      if (digit < 10)
        return 48 + digit;
      return 97 + digit - 10;
    },
    toRadixString$1(_, radix) {
      var t1, digitString, base, reversedDigitCodeUnits, rest, t2, digit, _this = this;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, null, null));
      t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        t1 = _this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        digitString = B.JSInt_methods.toRadixString$1(t1[0], radix);
        if (_this._isNegative)
          return "-" + digitString;
        return digitString;
      }
      if (radix === 16)
        return _this._toHexString$0();
      base = A._BigIntImpl__BigIntImpl$_fromInt(radix);
      reversedDigitCodeUnits = A._setArrayType([], type$.JSArray_int);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (t2 = base._used === 0; rest._used !== 0;) {
        if (t2)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        digit = rest._rem$1(base).toInt$0(0);
        rest = rest._div$1(base);
        B.JSArray_methods.add$1(reversedDigitCodeUnits, _this._toRadixCodeUnit$1(digit));
      }
      digitString = A.String_String$fromCharCodes(new A.ReversedListIterable(reversedDigitCodeUnits, type$.ReversedListIterable_int), 0, null);
      if (t1)
        return "-" + digitString;
      return digitString;
    },
    _toHexString$0() {
      var t1, t2, t3, i, chunk, j, msbChunk, _this = this,
        chars = A._setArrayType([], type$.JSArray_int);
      for (t1 = _this._used - 1, t2 = _this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        chunk = t2[i];
        for (j = 0; j < 4; ++j) {
          B.JSArray_methods.add$1(chars, _this._toRadixCodeUnit$1(chunk & 15));
          chunk = chunk >>> 4;
        }
      }
      if (!(t1 >= 0 && t1 < t3))
        return A.ioore(t2, t1);
      msbChunk = t2[t1];
      for (; msbChunk !== 0;) {
        B.JSArray_methods.add$1(chars, _this._toRadixCodeUnit$1(msbChunk & 15));
        msbChunk = msbChunk >>> 4;
      }
      if (_this._isNegative)
        B.JSArray_methods.add$1(chars, 45);
      return A.String_String$fromCharCodes(new A.ReversedListIterable(chars, type$.ReversedListIterable_int), 0, null);
    },
    $isBigInt: 1,
    $isComparable: 1
  };
  A._BigIntImpl_hashCode_combine.prototype = {
    call$2(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    $signature: 22
  };
  A._BigIntImpl_hashCode_finish.prototype = {
    call$1(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    $signature: 17
  };
  A._BigIntClassic.prototype = {
    convert$2(x, resultDigits) {
      var t2, remainder, used, digits, i, t3,
        t1 = x._isNegative;
      if (!t1) {
        t2 = this._modulus;
        t2 = A._BigIntImpl__compareDigits(x._digits, x._used, t2._digits, t2._used) >= 0;
      } else
        t2 = true;
      if (t2) {
        t2 = this._modulus;
        remainder = x._rem$1(t2);
        if (t1 && remainder._used > 0)
          remainder = remainder.$add(0, t2);
        used = remainder._used;
        digits = remainder._digits;
      } else {
        used = x._used;
        digits = x._digits;
      }
      for (t1 = digits.length, t2 = resultDigits.$flags | 0, i = used; --i, i >= 0;) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3;
      }
      return used;
    },
    _reduce$2(xDigits, xUsed) {
      var t1;
      if (xUsed < this._modulus._used)
        return xUsed;
      t1 = A._BigIntImpl__normalize(xUsed, xDigits);
      return this.convert$2(new A._BigIntImpl(false, xDigits, t1)._rem$1(this._normalizedModulus), xDigits);
    },
    sqr$3(xDigits, xUsed, resultDigits) {
      var i, t2, t3, i0, t4,
        t1 = A._BigIntImpl__normalize(xUsed, xDigits),
        b = new A._BigIntImpl(false, xDigits, t1),
        b2 = b.$mul(0, b);
      for (i = b2._used, t1 = b2._digits, t2 = t1.length, t3 = resultDigits.$flags | 0, i0 = 0; i0 < i; ++i0) {
        if (!(i0 < t2))
          return A.ioore(t1, i0);
        t4 = t1[i0];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i0 < resultDigits.length))
          return A.ioore(resultDigits, i0);
        resultDigits[i0] = t4;
      }
      for (t1 = 2 * xUsed; i < t1; ++i) {
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i >= 0 && i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return this._reduce$2(resultDigits, t1);
    }
  };
  A.DateTime.prototype = {
    get$timeZoneOffset() {
      if (this.isUtc)
        return B.Duration_0;
      return new A.Duration(1000000 * B.JSNumber_methods.toInt$0(0 - A.Primitives_lazyAsJsDate(this).getTimezoneOffset() * 60));
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DateTime && this._core$_value === other._core$_value && this._microsecond === other._microsecond && this.isUtc === other.isUtc;
    },
    get$hashCode(_) {
      return A.Object_hash(this._core$_value, this._microsecond, B.C_SentinelValue, B.C_SentinelValue);
    },
    compareTo$1(_, other) {
      var r;
      type$.DateTime._as(other);
      r = B.JSInt_methods.compareTo$1(this._core$_value, other._core$_value);
      if (r !== 0)
        return r;
      return B.JSInt_methods.compareTo$1(this._microsecond, other._microsecond);
    },
    toUtc$0() {
      var _this = this;
      if (_this.isUtc)
        return _this;
      return new A.DateTime(_this._core$_value, _this._microsecond, true);
    },
    toString$0(_) {
      var _this = this,
        y = A.DateTime__fourDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this)),
        t1 = _this._microsecond,
        us = t1 === 0 ? "" : A.DateTime__threeDigits(t1);
      t1 = y + "-" + m;
      if (_this.isUtc)
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us + "Z";
      else
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us;
    },
    toIso8601String$0() {
      var _this = this,
        y = A.Primitives_getYear(_this) >= -9999 && A.Primitives_getYear(_this) <= 9999 ? A.DateTime__fourDigits(A.Primitives_getYear(_this)) : A.DateTime__sixDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this)),
        t1 = _this._microsecond,
        us = t1 === 0 ? "" : A.DateTime__threeDigits(t1);
      t1 = y + "-" + m;
      if (_this.isUtc)
        return t1 + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms + us + "Z";
      else
        return t1 + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms + us;
    },
    $isComparable: 1
  };
  A.DateTime_parse_parseIntOrZero.prototype = {
    call$1(matched) {
      if (matched == null)
        return 0;
      return A.int_parse(matched, null);
    },
    $signature: 35
  };
  A.DateTime_parse_parseMilliAndMicroseconds.prototype = {
    call$1(matched) {
      var t1, result, i;
      if (matched == null)
        return 0;
      for (t1 = matched.length, result = 0, i = 0; i < 6; ++i) {
        result *= 10;
        if (i < t1) {
          if (!(i < t1))
            return A.ioore(matched, i);
          result += matched.charCodeAt(i) ^ 48;
        }
      }
      return result;
    },
    $signature: 35
  };
  A.Duration.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && this._duration === other._duration;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._duration, type$.Duration._as(other)._duration);
    },
    toString$0(_) {
      var sign, minutes, minutesPadding, seconds, secondsPadding,
        microseconds = this._duration,
        hours = B.JSInt_methods._tdivFast$1(microseconds, 3600000000),
        microseconds0 = microseconds % 3600000000;
      if (microseconds < 0) {
        hours = 0 - hours;
        microseconds = 0 - microseconds0;
        sign = "-";
      } else {
        microseconds = microseconds0;
        sign = "";
      }
      minutes = B.JSInt_methods._tdivFast$1(microseconds, 60000000);
      microseconds %= 60000000;
      minutesPadding = minutes < 10 ? "0" : "";
      seconds = B.JSInt_methods._tdivFast$1(microseconds, 1000000);
      secondsPadding = seconds < 10 ? "0" : "";
      return sign + hours + ":" + minutesPadding + minutes + ":" + secondsPadding + seconds + "." + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(microseconds % 1000000), 6, "0");
    },
    $isComparable: 1
  };
  A._Enum.prototype = {
    toString$0(_) {
      return this._enumToString$0();
    }
  };
  A.Error.prototype = {
    get$stackTrace() {
      return A.Primitives_extractStackTrace(this);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue());
    },
    get$invalidValue() {
      return this.invalidValue;
    }
  };
  A.RangeError.prototype = {
    get$invalidValue() {
      return A._asNumQ(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$invalidValue() {
      return A._asInt(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      var message = this.message;
      return message != null ? "UnimplementedError: " + message : "UnimplementedError";
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    }
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var t1, lineEnd, lineNum, lineStart, previousCharWasCR, i, char, prefix, postfix, end, start,
        message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = B.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineEnd = source.length, lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          if (!(i < lineEnd))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        for (i = offset; i < lineEnd; ++i) {
          if (!(i >= 0))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        prefix = "";
        if (lineEnd - lineStart > 78) {
          postfix = "...";
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
            }
            prefix = "...";
          }
        } else {
          end = lineEnd;
          start = lineStart;
          postfix = "";
        }
        return report + prefix + B.JSString_methods.substring$2(source, start, end) + postfix + "\n" + B.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + A.S(offset) + ")") : report;
    }
  };
  A.IntegerDivisionByZeroException.prototype = {
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      return "IntegerDivisionByZeroException";
    },
    $isError: 1
  };
  A.Iterable.prototype = {
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(this, t1._bind$1($T)._eval$1("1(Iterable.E)")._as(toElement), t1._eval$1("Iterable.E"), $T);
    },
    where$1(_, test) {
      var t1 = A._instanceType(this);
      return new A.WhereIterable(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("WhereIterable<Iterable.E>"));
    },
    whereType$1$0(_, $T) {
      return new A.WhereTypeIterable(this, $T._eval$1("WhereTypeIterable<0>"));
    },
    contains$1(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(), element))
          return true;
      return false;
    },
    join$1(_, separator) {
      var first, t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      first = J.toString$0$(iterator.get$current());
      if (!iterator.moveNext$0())
        return first;
      if (separator.length === 0) {
        t1 = first;
        do
          t1 += J.toString$0$(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        t1 = first;
        do
          t1 = t1 + separator + J.toString$0$(iterator.get$current());
        while (iterator.moveNext$0());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toList$1$growable(_, growable) {
      var t1 = A._instanceType(this)._eval$1("Iterable.E");
      if (growable)
        t1 = A.List_List$_of(this, t1);
      else {
        t1 = A.List_List$_of(this, t1);
        t1.$flags = 1;
        t1 = t1;
      }
      return t1;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty(_) {
      return !this.get$isEmpty(this);
    },
    skip$1(_, count) {
      return A.SkipIterable_SkipIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    firstWhere$2$orElse(_, test, orElse) {
      var element,
        t1 = A._instanceType(this);
      t1._eval$1("bool(Iterable.E)")._as(test);
      t1._eval$1("Iterable.E()?")._as(orElse);
      for (t1 = this.get$iterator(this); t1.moveNext$0();) {
        element = t1.get$current();
        if (test.call$1(element))
          return element;
      }
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A.IterableElementError_noElement());
    },
    firstWhere$1(_, test) {
      test.toString;
      return this.firstWhere$2$orElse(0, test, null);
    },
    elementAt$1(_, index) {
      var iterator, skipCount;
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(this);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0)
          return iterator.get$current();
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, null, "index"));
    },
    toString$0(_) {
      return A.Iterable_iterableToShortString(this, "(", ")");
    }
  };
  A.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, 0);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    get$runtimeType(_) {
      return A.getRuntimeTypeOfDartObject(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return "";
    },
    $isStackTrace: 1
  };
  A.Runes.prototype = {
    get$iterator(_) {
      return new A.RuneIterator(this.string);
    }
  };
  A.RuneIterator.prototype = {
    get$current() {
      return this._currentCodePoint;
    },
    moveNext$0() {
      var codeUnit, nextPosition, nextCodeUnit, _this = this,
        t1 = _this._position = _this._nextPosition,
        t2 = _this.string,
        t3 = t2.length;
      if (t1 === t3) {
        _this._currentCodePoint = -1;
        return false;
      }
      if (!(t1 < t3))
        return A.ioore(t2, t1);
      codeUnit = t2.charCodeAt(t1);
      nextPosition = t1 + 1;
      if ((codeUnit & 64512) === 55296 && nextPosition < t3) {
        if (!(nextPosition < t3))
          return A.ioore(t2, nextPosition);
        nextCodeUnit = t2.charCodeAt(nextPosition);
        if ((nextCodeUnit & 64512) === 56320) {
          _this._nextPosition = nextPosition + 1;
          _this._currentCodePoint = A._combineSurrogatePair(codeUnit, nextCodeUnit);
          return true;
        }
      }
      _this._nextPosition = nextPosition;
      _this._currentCodePoint = codeUnit;
      return true;
    },
    $isIterator: 1
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  A.Uri__parseIPv4Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 95
  };
  A.Uri_parseIPv6Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    $signature: 101
  };
  A.Uri_parseIPv6Address_parseHex.prototype = {
    call$2(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = A.int_parse(B.JSString_methods.substring$2(this.host, start, end), 16);
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 22
  };
  A._Uri.prototype = {
    get$_text() {
      var t1, t2, t3, t4, _this = this,
        value = _this.___Uri__text_FI;
      if (value === $) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? "" + t1 + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._port;
          if (t2 != null)
            t1 = t1 + ":" + A.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        value !== $ && A.throwLateFieldADI("_text");
        value = _this.___Uri__text_FI = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return value;
    },
    get$hashCode(_) {
      var result, _this = this,
        value = _this.___Uri_hashCode_FI;
      if (value === $) {
        result = B.JSString_methods.get$hashCode(_this.get$_text());
        _this.___Uri_hashCode_FI !== $ && A.throwLateFieldADI("hashCode");
        _this.___Uri_hashCode_FI = result;
        value = result;
      }
      return value;
    },
    get$userInfo() {
      return this._userInfo;
    },
    get$host() {
      var host = this._host;
      if (host == null)
        return "";
      if (B.JSString_methods.startsWith$1(host, "["))
        return B.JSString_methods.substring$2(host, 1, host.length - 1);
      return host;
    },
    get$port() {
      var t1 = this._port;
      return t1 == null ? A._Uri__defaultPort(this.scheme) : t1;
    },
    get$query() {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    normalizePath$0() {
      var isFile, userInfo, port, _this = this,
        t1 = _this.path,
        scheme = _this.scheme,
        host = _this._host,
        t2 = host != null,
        path = A._Uri__normalizePath(t1, scheme, t2);
      if (path === t1)
        return _this;
      isFile = scheme === "file";
      userInfo = _this._userInfo;
      port = _this._port;
      if (!t2)
        host = userInfo.length !== 0 || port != null || isFile ? "" : null;
      path = A._Uri__makePath(path, 0, path.length, null, scheme, host != null);
      return A._Uri$_internal(scheme, userInfo, host, port, path, _this._query, _this._fragment);
    },
    get$hasAuthority() {
      return this._host != null;
    },
    get$hasQuery() {
      return this._query != null;
    },
    get$hasFragment() {
      return this._fragment != null;
    },
    toString$0(_) {
      return this.get$_text();
    },
    $eq(_, other) {
      var t1, t2, t3, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      t1 = false;
      if (type$.Uri._is(other))
        if (_this.scheme === other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo === other.get$userInfo())
              if (_this.get$host() === other.get$host())
                if (_this.get$port() === other.get$port())
                  if (_this.path === other.get$path()) {
                    t2 = _this._query;
                    t3 = t2 == null;
                    if (!t3 === other.get$hasQuery()) {
                      if (t3)
                        t2 = "";
                      if (t2 === other.get$query()) {
                        t2 = _this._fragment;
                        t3 = t2 == null;
                        if (!t3 === other.get$hasFragment()) {
                          t1 = t3 ? "" : t2;
                          t1 = t1 === other.get$fragment();
                        }
                      }
                    }
                  }
      return t1;
    },
    $isUri: 1,
    get$scheme() {
      return this.scheme;
    },
    get$path() {
      return this.path;
    }
  };
  A.UriData.prototype = {
    get$uri() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 == null) {
        t1 = _this._separatorIndices;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t2 = _this._text;
        t1 = t1[0] + 1;
        queryIndex = B.JSString_methods.indexOf$2(t2, "?", t1);
        end = t2.length;
        if (queryIndex >= 0) {
          query = A._Uri__normalizeOrSubstring(t2, queryIndex + 1, end, 256, false, false);
          end = queryIndex;
        } else
          query = _null;
        t1 = _this._uriCache = new A._DataUri("data", "", _null, _null, A._Uri__normalizeOrSubstring(t2, t1, end, 128, false, false), query, _null);
      }
      return t1;
    },
    toString$0(_) {
      var t2,
        t1 = this._separatorIndices;
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      t2 = this._text;
      return t1[0] === -1 ? "data:" + t2 : t2;
    }
  };
  A._SimpleUri.prototype = {
    get$hasAuthority() {
      return this._hostStart > 0;
    },
    get$hasPort() {
      return this._hostStart > 0 && this._portStart + 1 < this._pathStart;
    },
    get$hasQuery() {
      return this._queryStart < this._fragmentStart;
    },
    get$hasFragment() {
      return this._fragmentStart < this._uri.length;
    },
    get$scheme() {
      var t1 = this._schemeCache;
      return t1 == null ? this._schemeCache = this._computeScheme$0() : t1;
    },
    _computeScheme$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = t1 === 4;
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return "http";
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return "https";
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "file"))
        return "file";
      if (t1 === 7 && B.JSString_methods.startsWith$1(_this._uri, "package"))
        return "package";
      return B.JSString_methods.substring$2(_this._uri, 0, t1);
    },
    get$userInfo() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? B.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host() {
      var t1 = this._hostStart;
      return t1 > 0 ? B.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port() {
      var t1, _this = this;
      if (_this.get$hasPort())
        return A.int_parse(B.JSString_methods.substring$2(_this._uri, _this._portStart + 1, _this._pathStart), null);
      t1 = _this._schemeEnd;
      if (t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return 80;
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return 443;
      return 0;
    },
    get$path() {
      return B.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      return t1 < t2 ? B.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? B.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    normalizePath$0() {
      return this;
    },
    get$hashCode(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = B.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return type$.Uri._is(other) && this._uri === other.toString$0(0);
    },
    toString$0(_) {
      return this._uri;
    },
    $isUri: 1
  };
  A._DataUri.prototype = {};
  A.Expando.prototype = {
    toString$0(_) {
      return "Expando:null";
    }
  };
  A.promiseToFuture_closure.prototype = {
    call$1(r) {
      return this.completer.complete$1(this.T._eval$1("0/?")._as(r));
    },
    $signature: 20
  };
  A.promiseToFuture_closure0.prototype = {
    call$1(e) {
      if (e == null)
        return this.completer.completeError$1(new A.NullRejectionException(e === undefined));
      return this.completer.completeError$1(e);
    },
    $signature: 20
  };
  A.NullRejectionException.prototype = {
    toString$0(_) {
      return "Promise was rejected with a value of `" + (this.isUndefined ? "undefined" : "null") + "`.";
    }
  };
  A._JSSecureRandom.prototype = {
    _JSSecureRandom$0() {
      var $crypto = self.crypto;
      if ($crypto != null)
        if ($crypto.getRandomValues != null)
          return;
      throw A.wrapException(A.UnsupportedError$("No source of cryptographically secure random numbers available."));
    },
    nextInt$1(max) {
      var byteCount, t1, start, randomLimit, t2, t3, random, result, _null = null;
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(new A.RangeError(_null, _null, false, _null, _null, "max must be in range 0 < max \u2264 2^32, was " + max));
      if (max > 255)
        if (max > 65535)
          byteCount = max > 16777215 ? 4 : 3;
        else
          byteCount = 2;
      else
        byteCount = 1;
      t1 = this._math$_buffer;
      t1.$flags & 2 && A.throwUnsupportedOperation(t1, 11);
      t1.setUint32(0, 0, false);
      start = 4 - byteCount;
      randomLimit = A._asInt(Math.pow(256, byteCount));
      for (t2 = max - 1, t3 = (max & t2) === 0; true;) {
        crypto.getRandomValues(J.asUint8List$2$x(B.NativeByteData_methods.get$buffer(t1), start, byteCount));
        random = t1.getUint32(0, false);
        if (t3)
          return (random & t2) >>> 0;
        result = random % max;
        if (random - result + max < randomLimit)
          return result;
      }
    }
  };
  A.Endian.prototype = {};
  A.BitcoinAddressType.prototype = {
    cast$1$0(_, $T) {
      var _this = this;
      A.checkTypeBound($T, type$.BitcoinAddressType, "T", "cast");
      if (!$T._is(_this))
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid cast: expected " + A.getRuntimeTypeOfDartObject(A.createRuntimeType($T)).toString$0(0) + ", but found " + A.getRuntimeTypeOfDartObject(_this).toString$0(0) + ".", A.LinkedHashMap_LinkedHashMap$_literal(["expected", A.createRuntimeType($T).toString$0(0), "type", _this.value], type$.String, type$.dynamic)));
      return $T._as(_this);
    },
    toString$0(_) {
      return "BitcoinAddressType." + this.value;
    }
  };
  A.BitcoinAddressType_fromValue_closure.prototype = {
    call$1(element) {
      return type$.BitcoinAddressType._as(element).value === this.value;
    },
    $signature: 105
  };
  A.BitcoinAddressType_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartBitcoinPluginException$("Unknown address type. " + A.S(this.value), null));
    },
    $signature: 0
  };
  A.PubKeyAddressType.prototype = {
    get$isP2sh() {
      return false;
    },
    toString$0(_) {
      return "PubKeyAddressType." + this.value;
    }
  };
  A.P2pkhAddressType.prototype = {
    get$isP2sh() {
      return false;
    },
    get$hashLength() {
      return 20;
    },
    toString$0(_) {
      return "P2pkhAddressType." + this.value;
    }
  };
  A.P2shAddressType.prototype = {
    get$isP2sh() {
      return true;
    },
    toString$0(_) {
      return "P2shAddressType." + this.value;
    },
    get$hashLength() {
      return this.hashLength;
    }
  };
  A.SegwitAddressType.prototype = {
    get$isP2sh() {
      return false;
    },
    get$hashLength() {
      switch (this) {
        case B.SegwitAddressType_P2WPKH:
          return 20;
        default:
          return 32;
      }
    },
    toString$0(_) {
      return "SegwitAddressType." + this.value;
    }
  };
  A.LegacyAddress.prototype = {
    get$addressProgram() {
      if (this.get$type() === B.PubKeyAddressType_P2PK)
        throw A.wrapException(A.UnimplementedError$(null));
      var t1 = this.__LegacyAddress__addressProgram_F;
      t1 === $ && A.throwLateFieldNI("_addressProgram");
      return t1;
    },
    toAddress$1(network) {
      var t1;
      if (this.get$type() === B.PubKeyAddressType_P2PK)
        A.throwExpression(A.UnimplementedError$(null));
      t1 = this.__LegacyAddress__addressProgram_F;
      t1 === $ && A.throwLateFieldNI("_addressProgram");
      return A._BitcoinAddressUtils_legacyToAddress(t1, network, this.get$type());
    },
    $eq(_, other) {
      var t1, t2, _this = this,
        _s15_ = "_addressProgram";
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof A.LegacyAddress))
        return false;
      if (A.getRuntimeTypeOfDartObject(_this) !== A.getRuntimeTypeOfDartObject(other))
        return false;
      if (_this.get$type() !== other.get$type())
        return false;
      t1 = _this.__LegacyAddress__addressProgram_F;
      t1 === $ && A.throwLateFieldNI(_s15_);
      t2 = other.__LegacyAddress__addressProgram_F;
      t2 === $ && A.throwLateFieldNI(_s15_);
      return t1 === t2;
    },
    get$hashCode(_) {
      var t1 = this.__LegacyAddress__addressProgram_F;
      t1 === $ && A.throwLateFieldNI("_addressProgram");
      return A.HashCodeGenerator_generateHashCode([t1, this.get$type()]);
    },
    $isBitcoinBaseAddress: 1
  };
  A.P2shAddress.prototype = {
    toAddress$1(network) {
      var t1 = this.type;
      if (!B.JSArray_methods.contains$1(network.get$supportedAddress(), t1))
        throw A.wrapException(A.DartBitcoinPluginException$("network does not support " + t1.value + " address.", null));
      return this.super$LegacyAddress$toAddress(network);
    },
    $eq(_, other) {
      var t1, t2,
        _s15_ = "_addressProgram";
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.LegacyAddress))
        return false;
      if (A.getRuntimeTypeOfDartObject(this) !== A.getRuntimeTypeOfDartObject(other))
        return false;
      t1 = this.__LegacyAddress__addressProgram_F;
      t1 === $ && A.throwLateFieldNI(_s15_);
      t2 = other.__LegacyAddress__addressProgram_F;
      t2 === $ && A.throwLateFieldNI(_s15_);
      return t1 === t2;
    },
    get$hashCode(_) {
      var t1 = this.__LegacyAddress__addressProgram_F;
      t1 === $ && A.throwLateFieldNI("_addressProgram");
      return A.HashCodeGenerator_generateHashCode([t1]);
    },
    get$type() {
      return this.type;
    }
  };
  A.P2pkhAddress.prototype = {
    get$type() {
      return this.type;
    }
  };
  A.P2pkAddress.prototype = {
    toAddress$1(network) {
      var out,
        tmp = A.SHA256_hash(A.BytesUtils_fromHexString(this.publicKey, false)),
        t1 = type$.int,
        t2 = J.JSArray_JSArray$growable(0, t1),
        t3 = A.List_List$filled(16, 0, false, t1),
        h = new A.RIPEMD160(t2, t3),
        t4 = type$.List_int,
        t5 = t4._as(A.List_List$filled(5, 0, false, t1));
      h.___RIPEMD__state_F = t5;
      h.reset$0();
      t4._as(tmp);
      if (h._hash$_finished)
        A.throwExpression(B.CryptoException_PCa);
      h._lengthInBytes = h._lengthInBytes + tmp.length;
      A.BytesUtils_validateListOfBytes(tmp);
      B.JSArray_methods.addAll$1(t2, tmp);
      h._iterate$0();
      out = A.List_List$filled(t5.length * 4, 0, false, t1);
      h.finish$1(out);
      A.zero(t5);
      A.zero(t3);
      B.JSArray_methods.clear$0(t2);
      h.reset$0();
      return A._BitcoinAddressUtils_legacyToAddress(A.BytesUtils_toHexString(out, true, null), network, B.PubKeyAddressType_P2PK);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.P2pkAddress))
        return false;
      return this.publicKey === other.publicKey;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.publicKey, B.PubKeyAddressType_P2PK]);
    },
    get$type() {
      return B.PubKeyAddressType_P2PK;
    }
  };
  A.SegwitAddress.prototype = {
    get$addressProgram() {
      var t1 = this.__SegwitAddress_addressProgram_F;
      t1 === $ && A.throwLateFieldNI("addressProgram");
      return t1;
    },
    toAddress$1(network) {
      var t1, programBytes, t2, _this = this;
      if (!B.JSArray_methods.contains$1(network.get$supportedAddress(), _this.get$type()))
        throw A.wrapException(A.DartBitcoinPluginException$("network does not support " + _this.get$type().value + " address", null));
      t1 = _this.__SegwitAddress_addressProgram_F;
      t1 === $ && A.throwLateFieldNI("addressProgram");
      programBytes = A.BytesUtils_fromHexString(t1, false);
      t1 = network.get$p2wpkhHrp();
      t2 = [_this.segwitVersion];
      B.JSArray_methods.addAll$1(t2, A.Bech32BaseUtils_convertToBase32(programBytes));
      return A.Bech32EncoderBase_encodeBech32(t1, A.List_List$from(t2, true, type$.int), "1", A.segwit_bech32_SegwitBech32Encoder__computeChecksum$closure());
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof A.SegwitAddress))
        return false;
      if (A.getRuntimeTypeOfDartObject(_this) !== A.getRuntimeTypeOfDartObject(other))
        return false;
      if (_this.get$type() !== other.get$type())
        return false;
      _this.__SegwitAddress_addressProgram_F === $ && A.throwLateFieldNI("addressProgram");
      t1 = other.segwitVersion;
      return _this.segwitVersion === t1;
    },
    get$hashCode(_) {
      var t1 = this.__SegwitAddress_addressProgram_F;
      t1 === $ && A.throwLateFieldNI("addressProgram");
      return A.HashCodeGenerator_generateHashCode([t1, this.segwitVersion, this.get$type()]);
    },
    $isBitcoinBaseAddress: 1
  };
  A.P2wpkhAddress.prototype = {
    get$type() {
      return B.SegwitAddressType_P2WPKH;
    }
  };
  A.P2trAddress.prototype = {
    get$type() {
      return B.SegwitAddressType_P2TR;
    }
  };
  A.P2wshAddress.prototype = {
    get$type() {
      return B.SegwitAddressType_P2WSH;
    }
  };
  A.DartBitcoinPluginException.prototype = {};
  A.BasedUtxoNetwork_fromName_closure.prototype = {
    call$1(element) {
      return type$.BasedUtxoNetwork._as(element).get$value() === this.name;
    },
    $signature: 113
  };
  A.BasedUtxoNetwork_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartBitcoinPluginException$("No matching network found for the given name.", null));
    },
    $signature: 0
  };
  A.BitcoinSVNetwork.prototype = {
    get$p2pkhNetVer() {
      var t1 = this.conf.params.p2pkhNetVer;
      t1.toString;
      return t1;
    },
    get$p2shNetVer() {
      var t1 = this.conf.params.p2shNetVer;
      t1.toString;
      return t1;
    },
    get$p2wpkhHrp() {
      var t1 = this.conf.params.p2wpkhHrp;
      t1.toString;
      return t1;
    },
    get$isMainnet() {
      return this === B.BitcoinSVNetwork_f7v;
    },
    get$supportedAddress() {
      return A._setArrayType([B.P2pkhAddressType_P2PKH, B.PubKeyAddressType_P2PK], type$.JSArray_BitcoinAddressType);
    },
    $isBasedUtxoNetwork: 1,
    get$value() {
      return this.value;
    },
    get$identifier() {
      return this.identifier;
    }
  };
  A.BitcoinNetwork.prototype = {
    get$p2pkhNetVer() {
      var t1 = this.conf.params.p2pkhNetVer;
      t1.toString;
      return t1;
    },
    get$p2shNetVer() {
      var t1 = this.conf.params.p2shNetVer;
      t1.toString;
      return t1;
    },
    get$p2wpkhHrp() {
      var t1 = this.conf.params.p2wpkhHrp;
      t1.toString;
      return t1;
    },
    get$isMainnet() {
      return this === B.BitcoinNetwork_o5I;
    },
    get$supportedAddress() {
      return A._setArrayType([B.P2pkhAddressType_P2PKH, B.SegwitAddressType_P2WPKH, B.PubKeyAddressType_P2PK, B.SegwitAddressType_P2TR, B.SegwitAddressType_P2WSH, B.P2shAddressType_YXg, B.P2shAddressType_UPK, B.P2shAddressType_apR, B.P2shAddressType_vvf], type$.JSArray_BitcoinAddressType);
    },
    $isBasedUtxoNetwork: 1,
    get$value() {
      return this.value;
    },
    get$identifier() {
      return this.identifier;
    }
  };
  A.LitecoinNetwork.prototype = {
    get$p2pkhNetVer() {
      var t1 = this.conf.params.p2pkhStdNetVer;
      t1.toString;
      return t1;
    },
    get$p2shNetVer() {
      var t1 = this.conf.params.p2shStdNetVer;
      t1.toString;
      return t1;
    },
    get$p2wpkhHrp() {
      var t1 = this.conf.params.p2wpkhHrp;
      t1.toString;
      return t1;
    },
    get$isMainnet() {
      return this === B.LitecoinNetwork_A6S;
    },
    $isBasedUtxoNetwork: 1,
    get$value() {
      return this.value;
    },
    get$supportedAddress() {
      return B.List_DXH;
    },
    get$identifier() {
      return this.identifier;
    }
  };
  A.DashNetwork.prototype = {
    get$p2pkhNetVer() {
      var t1 = this.conf.params.p2pkhNetVer;
      t1.toString;
      return t1;
    },
    get$p2shNetVer() {
      var t1 = this.conf.params.p2shNetVer;
      t1.toString;
      return t1;
    },
    get$p2wpkhHrp() {
      return A.throwExpression(B.DartBitcoinPluginException_sru);
    },
    get$isMainnet() {
      return this === B.DashNetwork_rwj;
    },
    $isBasedUtxoNetwork: 1,
    get$supportedAddress() {
      return B.List_H7c;
    },
    get$value() {
      return this.value;
    },
    get$identifier() {
      return this.identifier;
    }
  };
  A.DogecoinNetwork.prototype = {
    get$p2pkhNetVer() {
      var t1 = this.conf.params.p2pkhNetVer;
      t1.toString;
      return t1;
    },
    get$p2shNetVer() {
      var t1 = this.conf.params.p2shNetVer;
      t1.toString;
      return t1;
    },
    get$p2wpkhHrp() {
      return A.throwExpression(B.DartBitcoinPluginException_vXF);
    },
    get$isMainnet() {
      return this === B.DogecoinNetwork_g3g;
    },
    $isBasedUtxoNetwork: 1,
    get$value() {
      return this.value;
    },
    get$supportedAddress() {
      return B.List_H7c;
    },
    get$identifier() {
      return this.identifier;
    }
  };
  A.BitcoinCashNetwork.prototype = {
    get$p2pkhNetVer() {
      var t1 = this.conf.params.p2pkhStdNetVer;
      t1.toString;
      return t1;
    },
    get$p2shNetVer() {
      var t1 = this.conf.params.p2shStdNetVer;
      t1.toString;
      return t1;
    },
    get$p2wpkhHrp() {
      return A.throwExpression(B.DartBitcoinPluginException_ovy);
    },
    get$isMainnet() {
      return this === B.BitcoinCashNetwork_DE4;
    },
    $isBasedUtxoNetwork: 1,
    get$value() {
      return this.value;
    },
    get$supportedAddress() {
      return B.List_PNR;
    },
    get$identifier() {
      return this.identifier;
    }
  };
  A.PepeNetwork.prototype = {
    get$p2pkhNetVer() {
      return B.List_56;
    },
    get$p2shNetVer() {
      return B.List_22;
    },
    get$p2wpkhHrp() {
      return A.throwExpression(B.DartBitcoinPluginException_vXF);
    },
    get$isMainnet() {
      return true;
    },
    $isBasedUtxoNetwork: 1,
    get$value() {
      return "pepecoinMainnet";
    },
    get$supportedAddress() {
      return B.List_H7c;
    },
    get$identifier() {
      return "pepecoin:mainnet";
    }
  };
  A.ElectraProtocolNetwork.prototype = {
    get$p2pkhNetVer() {
      var t1 = this.conf.params.p2pkhNetVer;
      t1.toString;
      return t1;
    },
    get$p2shNetVer() {
      var t1 = this.conf.params.p2shNetVer;
      t1.toString;
      return t1;
    },
    get$p2wpkhHrp() {
      var t1 = this.conf.params.p2wpkhHrp;
      t1.toString;
      return t1;
    },
    get$isMainnet() {
      return this === B.ElectraProtocolNetwork_Ni4;
    },
    $isBasedUtxoNetwork: 1,
    get$value() {
      return this.value;
    },
    get$supportedAddress() {
      return B.List_DXH;
    },
    get$identifier() {
      return this.identifier;
    }
  };
  A._Base32Utils_translateAlphabet_closure.prototype = {
    call$1(unit) {
      return A.Primitives_stringFromCharCode(A._asInt(unit));
    },
    $signature: 38
  };
  A._Base32Utils_translateAlphabet_closure0.prototype = {
    call$1(unit) {
      var index = B.JSString_methods.indexOf$1(this.fromAlphabet, A.Primitives_stringFromCharCode(A._asInt(unit))),
        t1 = this.toAlphabet;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $signature: 38
  };
  A._Base32Utils_translateAlphabet_closure1.prototype = {
    call$1(char) {
      var t1;
      A._asString(char);
      t1 = this.translationMap.$index(0, char);
      return t1 == null ? char : t1;
    },
    $signature: 213
  };
  A._Base32Utils__b32decode_closure.prototype = {
    call$1(char) {
      var t1, symbol, t2, t3, t4;
      A._asString(char);
      if (char === "=")
        return;
      t1 = $._Base32Const__b32rev.$index(0, this.alphabet).$index(0, char);
      symbol = (t1 == null ? 0 : t1) & 255;
      t1 = this._box_0;
      t2 = t1.shift -= 5;
      if (t2 > 0)
        t1.carry = t1.carry | B.JSInt_methods.$shl(symbol, t2) & 255;
      else {
        t3 = this.decoded;
        t4 = t1.carry;
        if (t2 < 0) {
          B.JSArray_methods.add$1(t3, t4 | B.JSInt_methods._shrReceiverPositive$1(symbol, -t2));
          t1.carry = B.JSInt_methods.$shl(symbol, t1.shift += 8) & 255;
        } else {
          B.JSArray_methods.add$1(t3, t4 | symbol);
          t1.shift = 8;
          t1.carry = 0;
        }
      }
    },
    $signature: 214
  };
  A.Base58Alphabets.prototype = {
    _enumToString$0() {
      return "Base58Alphabets." + this._name;
    }
  };
  A.Base58ChecksumError.prototype = {};
  A._BchBech32Utils_hrpExpand_closure.prototype = {
    call$1(rune) {
      return A._asInt(rune) & 31;
    },
    $signature: 17
  };
  A.Bech32Encodings.prototype = {
    _enumToString$0() {
      return "Bech32Encodings." + this._name;
    }
  };
  A.Bech32ChecksumError.prototype = {};
  A.Bech32EncoderBase_encodeBech32_closure.prototype = {
    call$1(e) {
      var _s32_ = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
      A._asInt(e);
      if (!(e >= 0 && e < 32))
        return A.ioore(_s32_, e);
      return _s32_[e];
    },
    $signature: 56
  };
  A.Bech32DecoderBase_decodeBech32_closure.prototype = {
    call$1(x) {
      A._asInt(x);
      return x < 33 || x > 126;
    },
    $signature: 39
  };
  A.Bech32DecoderBase_decodeBech32_closure0.prototype = {
    call$1(x) {
      return !B.JSString_methods.contains$1("qpzry9x8gf2tvdw0s3jn54khce6mua7l", A.Primitives_stringFromCharCode(A._asInt(x)));
    },
    $signature: 39
  };
  A.Bech32DecoderBase_decodeBech32_closure1.prototype = {
    call$1(x) {
      return B.JSString_methods.indexOf$1("qpzry9x8gf2tvdw0s3jn54khce6mua7l", A.Primitives_stringFromCharCode(A._asInt(x)));
    },
    $signature: 17
  };
  A.AdaByronIcarusAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AdaByronLegacyAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AdaShelleyAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.ADANetwork.prototype = {
    toString$0(_) {
      return "ADANetwork." + this.name;
    }
  };
  A.AlgoAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AptosSingleKeyEd25519AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AptosSingleKeySecp256k1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AptosAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AtomAddressDecodeResult.prototype = {};
  A.AtomAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AtomEthSecp256k1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AtomNist256P1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AtomEd25519AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AvaxPChainAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AvaxXChainAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.EgldAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.BlockchainAddressEncoder.prototype = {};
  A.EosAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.ErgoNetworkTypes.prototype = {};
  A.ErgoP2PKHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.EthAddrUtils__checksumEncode_closure.prototype = {
    call$1(entry) {
      var i, c, t1;
      type$.MapEntry_int_String._as(entry);
      i = entry.key;
      c = entry.value;
      t1 = this.addrHexDigest;
      if (i >>> 0 !== i || i >= t1.length)
        return A.ioore(t1, i);
      return A.int_parse(t1[i], 16) >= 8 ? c.toUpperCase() : c.toLowerCase();
    },
    $signature: 58
  };
  A.EthAddrDecoder.prototype = {
    decodeAddr$2(addr, kwargs) {
      var addrNoPrefix,
        t1 = type$.Map_String_dynamic._as(kwargs).$index(0, "skip_chksum_enc"),
        prefixGot = B.JSString_methods.substring$2(addr, 0, 2);
      if ("0x" !== prefixGot)
        A.throwExpression(A.AddressConverterException$("Invalid prefix (expected 0x, got " + prefixGot + ")", null));
      addrNoPrefix = B.JSString_methods.substring$1(addr, 2);
      A.AddrDecUtils_validateLength(addrNoPrefix, 40);
      if (t1 !== true && addrNoPrefix !== A.EthAddrUtils__checksumEncode(addrNoPrefix))
        throw A.wrapException(B.AddressConverterException_lgx);
      return A.BytesUtils_fromHexString(addrNoPrefix, false);
    }
  };
  A.EthAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AddressConverterException.prototype = {};
  A.FilSecp256k1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.IcxAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.InjAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.NanoAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.NearAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.NeoAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.OkexAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.OneAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.P2PKHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.BchP2PKHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.P2SHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.BchP2SHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.P2TRAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.P2WPKHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SolAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SubstrateEd25519AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SubstrateSr25519AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SubstrateSecp256k1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SuiSecp256k1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SuiSecp256r1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SuiAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.DecodeAddressResult.prototype = {};
  A.FriendlyAddressFlags.prototype = {};
  A.TonAddrDecoder.prototype = {};
  A.TonAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.TrxAddrDecoder.prototype = {
    decodeAddr$1(addr) {
      var tronPrefix, _null = null,
        decodedBytes = A.Base58Decoder_decode(addr, B.Base58Alphabets_0),
        dataBytes = B.JSArray_methods.sublist$2(decodedBytes, 0, decodedBytes.length - 4),
        checksumBytes = B.JSArray_methods.sublist$1(decodedBytes, decodedBytes.length - 4),
        computedChecksum = B.JSArray_methods.sublist$2(A.SHA256_hash(A.SHA256_hash(dataBytes)), 0, 4);
      if (!A.BytesUtils_bytesEqual(checksumBytes, computedChecksum))
        A.throwExpression(new A.Base58ChecksumError("Invalid checksum (expected " + A.BytesUtils_toHexString(computedChecksum, true, _null) + ", got " + A.BytesUtils_toHexString(checksumBytes, true, _null) + ")", _null));
      tronPrefix = A.BytesUtils_fromHexString("0x41", false);
      A.AddrDecUtils_validateBytesLength(dataBytes, 20 + tronPrefix.length);
      return new A.EthAddrDecoder().decodeAddr$2("0x" + A.BytesUtils_toHexString(A.AddrDecUtils_validateAndRemovePrefixBytes(dataBytes, tronPrefix), true, _null), A.LinkedHashMap_LinkedHashMap$_literal(["skip_chksum_enc", true], type$.String, type$.dynamic));
    }
  };
  A.TrxAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.XlmAddrTypes.prototype = {
    toString$0(_) {
      return "XlmAddrTypes." + this.name;
    }
  };
  A.XlmAddrTypes_fromTag_closure.prototype = {
    call$1(e) {
      return type$.XlmAddrTypes._as(e).value === this.tag;
    },
    $signature: 59
  };
  A.XlmAddrTypes_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.AddressConverterException$("Invalid or unsuported xlm address type.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", B.JSArray_methods.map$1$1(B.List_FN2, new A.XlmAddrTypes_fromTag__closure(), type$.int).join$1(0, ", "), "got", this.tag], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.XlmAddrTypes_fromTag__closure.prototype = {
    call$1(e) {
      return type$.XlmAddrTypes._as(e).value;
    },
    $signature: 60
  };
  A.XlmAddrDecoderResult.prototype = {
    toString$0(_) {
      return this.baseAddress;
    }
  };
  A.XlmAddrDecoder.prototype = {
    decode$1(addr) {
      var addrDecBytes, payloadBytes, type, t2, pubKeyBytes, accountId, pubKey, t3, checksumBytes, encoded,
        _s9_ = "addr_type",
        t1 = type$.XlmAddrTypes;
      A.AddrKeyValidator_nullOrValidateAddressArgs(B.Map_empty, _s9_, t1);
      addrDecBytes = A.Base32Decoder_decode(addr);
      B.JSArray_methods.sublist$1(addrDecBytes, addrDecBytes.length - 2);
      payloadBytes = B.JSArray_methods.sublist$2(addrDecBytes, 0, addrDecBytes.length - 2);
      if (0 >= payloadBytes.length)
        return A.ioore(payloadBytes, 0);
      type = A.XlmAddrTypes_fromTag(payloadBytes[0]);
      t2 = type === B.XlmAddrTypes_96_Muxed;
      A.AddrDecUtils_validateBytesLength(addrDecBytes, t2 ? 43 : 35);
      if (!A.BytesUtils_bytesEqual(B.JSArray_methods.sublist$1(addrDecBytes, addrDecBytes.length - 2), A._XlmAddrUtils_computeChecksum(payloadBytes)))
        A.throwExpression(B.AddressConverterException_zNG);
      pubKeyBytes = B.JSArray_methods.sublist$1(payloadBytes, 1);
      if (t2) {
        accountId = A.BigintUtils_fromBytes(B.JSArray_methods.sublist$1(pubKeyBytes, pubKeyBytes.length - 8), B.C_Endian, false);
        if (accountId.compareTo$1(0, $.$get$maxU64()) > 0 || accountId.compareTo$1(0, $.$get$_BigIntImpl_zero()) < 0)
          throw A.wrapException(B.AddressConverterException_jdZ);
        t2 = type$.int;
        pubKeyBytes = A.List_List$unmodifiable(B.JSArray_methods.sublist$2(pubKeyBytes, 0, pubKeyBytes.length - 8), t2);
        type$.List_int._as(pubKeyBytes);
        type$.Map_String_dynamic._as(B.Map_empty);
        pubKey = pubKeyBytes.length === 33 ? B.JSArray_methods.sublist$1(pubKeyBytes, 1) : pubKeyBytes;
        A.AddrKeyValidator_nullOrValidateAddressArgs(B.Map_empty, _s9_, t1);
        A.AddrDecUtils_validateBytesLength(pubKey, 32);
        A.IPublicKey_IPublicKey$fromBytes(pubKey, B.EllipticCurveTypes_0);
        t1 = [48];
        B.JSArray_methods.addAll$1(t1, pubKey);
        payloadBytes = A.List_List$from(t1, true, t2);
        t1 = A.XModemCrc__calculateXmodemCrc(payloadBytes);
        t3 = A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>");
        checksumBytes = A.List_List$_of(new A.ReversedListIterable(t1, t3), t3._eval$1("ListIterable.E"));
        t1 = A.List_List$_of(payloadBytes, type$.dynamic);
        B.JSArray_methods.addAll$1(t1, checksumBytes);
        t1 = A.List_List$from(t1, true, t2);
        A.BytesUtils_validateListOfBytes(t1);
        encoded = A.StringUtils_decode(A._Base32Utils__b32encode("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", A.List_List$unmodifiable(t1, t2)), false, B.StringEncoding_1);
        addr = A.stringReplaceAllUnchecked(encoded, "=", "");
      } else
        accountId = null;
      A.BytesUtils_validateListOfBytes(pubKeyBytes);
      A.List_List$unmodifiable(pubKeyBytes, type$.int);
      return new A.XlmAddrDecoderResult(type, addr, accountId);
    }
  };
  A.XlmAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.XmrAddrEncoder.prototype = {};
  A.XrpAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.XtzAddrPrefixes.prototype = {};
  A.XtzAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.ZilAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.Bip32KeyIndex.prototype = {
    toString$0(_) {
      return "index: " + this.index;
    }
  };
  A.Bip32KeyNetVersions.prototype = {};
  A.BipCoins.prototype = {
    toString$0(_) {
      return A.getRuntimeTypeOfDartObject(this).toString$0(0) + "." + this.get$coinName();
    },
    $isCryptoCoins: 1
  };
  A.BipProposal.prototype = {
    get$specName() {
      return this.name;
    },
    get$name() {
      return this.name;
    }
  };
  A.Bip44Coins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$Bip44Coins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.BipProposal_bip44;
    },
    toString$0(_) {
      return "Bip44Coins." + this.name;
    }
  };
  A.Bip44Coins_fromName_closure.prototype = {
    call$1(element) {
      return type$.Bip44Coins._as(element).name === this.name;
    },
    $signature: 62
  };
  A.Bip44Conf_akashNetwork_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_algorand_closure.prototype = {
    call$1(kwargs) {
      return new A.AlgoAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 69
  };
  A.Bip44Conf_aptos_closure.prototype = {
    call$1(kwargs) {
      return new A.AptosAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 71
  };
  A.Bip44Conf_aptosSingleKeySecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.AptosSingleKeySecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 72
  };
  A.Bip44Conf_aptosSingleKeyEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.AptosSingleKeyEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 73
  };
  A.Bip44Conf_avaxCChain_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_avaxPChain_closure.prototype = {
    call$1(kwargs) {
      return new A.AvaxPChainAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 80
  };
  A.Bip44Conf_avaxXChain_closure.prototype = {
    call$1(kwargs) {
      return new A.AvaxXChainAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 81
  };
  A.Bip44Conf_axelar_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_bandProtocol_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_binanceChain_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_binanceSmartChain_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_bitcoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_bitcoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_bitcoinCashMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.Bip44Conf_bitcoinCashTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.Bip44Conf_bitcoinCashSlpMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.Bip44Conf_bitcoinCashSlpTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.Bip44Conf_bitcoinSvMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_bitcoinSvTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_cardanoByronIcarus_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronIcarusAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip44Conf_cardanoByronLedger_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronIcarusAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip44Conf_cardanoByronIcarusTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronIcarusAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip44Conf_cardanoByronLedgerTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronIcarusAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip44Conf_celo_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_certik_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_chihuahua_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_cosmos_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_cosmosTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_cosmosEthSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomEthSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 37
  };
  A.Bip44Conf_cosmosTestnetEthSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomEthSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 37
  };
  A.Bip44Conf_cosmosNist256p1_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomNist256P1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 47
  };
  A.Bip44Conf_cosmosTestnetNist256p1_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomNist256P1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 47
  };
  A.Bip44Conf_cosmosEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 51
  };
  A.Bip44Conf_cosmosTestnetEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 51
  };
  A.Bip44Conf_dashMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_dashTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_dogecoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_dogecoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_pepeMainnet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_pepeTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_ecashMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.Bip44Conf_ecashTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.Bip44Conf_elrond_closure.prototype = {
    call$1(kwargs) {
      return new A.EgldAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 115
  };
  A.Bip44Conf_eos_closure.prototype = {
    call$1(kwargs) {
      return new A.EosAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 116
  };
  A.Bip44Conf_ergoMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.ErgoP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 27
  };
  A.Bip44Conf_ergoTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.ErgoP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 27
  };
  A.Bip44Conf_ethereum_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_ethereumTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_ethereumClassic_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_fantomOpera_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_filecoin_closure.prototype = {
    call$1(kwargs) {
      return new A.FilSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 140
  };
  A.Bip44Conf_harmonyOneMetamask_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_harmonyOneEth_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_harmonyOneAtom_closure.prototype = {
    call$1(kwargs) {
      return new A.OneAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 152
  };
  A.Bip44Conf_huobiChain_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_icon_closure.prototype = {
    call$1(kwargs) {
      return new A.IcxAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 201
  };
  A.Bip44Conf_injective_closure.prototype = {
    call$1(kwargs) {
      return new A.InjAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 210
  };
  A.Bip44Conf_irisNet_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_kava_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_kusamaEd25519Slip_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.Bip44Conf_kusamaTestnetEd25519Slip_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.Bip44Conf_litecoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_litecoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_moneroEd25519Slip_closure.prototype = {
    call$1(kwargs) {
      return new A.XmrAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 28
  };
  A.Bip44Conf_moneroSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.XmrAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 28
  };
  A.Bip44Conf_nano_closure.prototype = {
    call$1(kwargs) {
      return new A.NanoAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 54
  };
  A.Bip44Conf_nearProtocol_closure.prototype = {
    call$1(kwargs) {
      return new A.NearAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 55
  };
  A.Bip44Conf_neo_closure.prototype = {
    call$1(kwargs) {
      return new A.NeoAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 29
  };
  A.Bip44Conf_nineChroniclesGold_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_okexChainEth_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_okexChainAtom_closure.prototype = {
    call$1(kwargs) {
      return new A.OkexAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 52
  };
  A.Bip44Conf_okexChainAtomOld_closure.prototype = {
    call$1(kwargs) {
      return new A.OkexAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 52
  };
  A.Bip44Conf_ontology_closure.prototype = {
    call$1(kwargs) {
      return new A.NeoAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 29
  };
  A.Bip44Conf_osmosis_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_piNetwork_closure.prototype = {
    call$1(kwargs) {
      return new A.XlmAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 23
  };
  A.Bip44Conf_polkadotEd25519Slip_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.Bip44Conf_polkadotTestnetEd25519Slip_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.Bip44Conf_polygon_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_ripple_closure.prototype = {
    call$1(kwargs) {
      return new A.XrpAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 18
  };
  A.Bip44Conf_rippleTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.XrpAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 18
  };
  A.Bip44Conf_rippleEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.XrpAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 18
  };
  A.Bip44Conf_rippleTestnetEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.XrpAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 18
  };
  A.Bip44Conf_secretNetworkOld_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_secretNetworkNew_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_solana_closure.prototype = {
    call$1(kwargs) {
      return new A.SolAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 32
  };
  A.Bip44Conf_solanaTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.SolAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 32
  };
  A.Bip44Conf_stellar_closure.prototype = {
    call$1(kwargs) {
      return new A.XlmAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 23
  };
  A.Bip44Conf_stellarTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.XlmAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 23
  };
  A.Bip44Conf_terra_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip44Conf_tezos_closure.prototype = {
    call$1(kwargs) {
      return new A.XtzAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 61
  };
  A.Bip44Conf_theta_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_tron_closure.prototype = {
    call$1(kwargs) {
      return new A.TrxAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 33
  };
  A.Bip44Conf_tronTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.TrxAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 33
  };
  A.Bip44Conf_vechain_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 4
  };
  A.Bip44Conf_verge_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_zcashMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_zcashTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_zilliqa_closure.prototype = {
    call$1(kwargs) {
      return new A.ZilAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 63
  };
  A.Bip44Conf_tonMainnet_closure.prototype = {
    call$1(kwargs) {
      return new A.TonAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 34
  };
  A.Bip44Conf_tonTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.TonAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 34
  };
  A.Bip44Conf_electraProtocolMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_electraProtocolTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 2
  };
  A.Bip44Conf_suiSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SuiSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 65
  };
  A.Bip44Conf_suiSecp256r1_closure.prototype = {
    call$1(kwargs) {
      return new A.SuiSecp256r1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 66
  };
  A.Bip44Conf_suiEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SuiAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 67
  };
  A.Bip49Coins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$Bip49Coins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.BipProposal_bip49;
    }
  };
  A.Bip49Coins_fromName_closure.prototype = {
    call$1(element) {
      return type$.Bip49Coins._as(element).name === this.name;
    },
    $signature: 68
  };
  A.Bip49Conf_dashMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip49Conf_dashTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip49Conf_dogecoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip49Conf_dogecoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip49Conf_litecoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip49Conf_litecoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip49Conf_zcashMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip49Conf_zcashTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip49Conf_bitcoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip49Conf_bitcoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip49Conf_bitcoinSvMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip49Conf_bitcoinSvTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip49Conf_bitcoinCashMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.Bip49Conf_bitcoinCashTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.Bip49Conf_bitcoinCashSlpMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.Bip49Conf_bitcoinCashSlpTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.Bip49Conf_ecashMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.Bip49Conf_ecashTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 10
  };
  A.Bip49Conf_pepeMainnet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip49Conf_pepeTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip49Conf_electraProtocolMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip49Conf_electraProtocolTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 3
  };
  A.Bip84Coins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$Bip84Coins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.BipProposal_bip84;
    }
  };
  A.Bip84Coins_fromName_closure.prototype = {
    call$1(element) {
      return type$.Bip84Coins._as(element).name === this.name;
    },
    $signature: 70
  };
  A.Bip84Conf_bitcoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip84Conf_bitcoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip84Conf_litecoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip84Conf_litecoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip84Conf_electraProtocolMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip84Conf_electraProtocolTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.Bip86Coins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$Bip86Coins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.BipProposal_bip86;
    }
  };
  A.Bip86Coins_fromName_closure.prototype = {
    call$1(element) {
      return type$.Bip86Coins._as(element).name === this.name;
    },
    $signature: 53
  };
  A.Bip86Conf_bitcoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2TRAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 36
  };
  A.Bip86Conf_bitcoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2TRAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 36
  };
  A.BipBitcoinCashConf.prototype = {};
  A.BipCoinConfig.prototype = {$isCoinConfig: 1,
    get$type() {
      return this.type;
    }
  };
  A.BipLitecoinConf.prototype = {};
  A.ChainType.prototype = {
    _enumToString$0() {
      return "ChainType." + this._name;
    }
  };
  A.ChainType_fromValue_closure.prototype = {
    call$1(e) {
      return type$.ChainType._as(e)._name === this.val;
    },
    $signature: 74
  };
  A.ChainType_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(new A.GenericException("chain type not found.", null));
    },
    $signature: 0
  };
  A.CoinProposal_fromName_closure.prototype = {
    call$1(element) {
      return type$.BipProposal._as(element).get$name() === this.name;
    },
    $signature: 75
  };
  A.CoinProposal_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(new A.MessageException("Unable to locate a proposal with the given name.", A.LinkedHashMap_LinkedHashMap$_literal(["Name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.Cip1852Coins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$Cip1852Coins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.C_CipProposal;
    }
  };
  A.Cip1852Coins_fromName_closure.prototype = {
    call$1(element) {
      return type$.Cip1852Coins._as(element).name === this.name;
    },
    $signature: 76
  };
  A.CipProposal.prototype = {
    get$specName() {
      return "cip1852";
    },
    $isBipProposal: 1,
    get$name() {
      return "cip1852";
    }
  };
  A.Cip1852Conf_cardanoIcarusMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaShelleyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 19
  };
  A.Cip1852Conf_cardanoIcarusTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaShelleyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 19
  };
  A.Cip1852Conf_cardanoLedgerMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaShelleyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 19
  };
  A.Cip1852Conf_cardanoLedgerTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaShelleyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 19
  };
  A.CoinConf.prototype = {
    toString$0(_) {
      return this.coinName.name;
    }
  };
  A.CoinParams.prototype = {};
  A.CoinNames.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.EllipticCurveTypes.prototype = {
    _enumToString$0() {
      return "EllipticCurveTypes." + this._name;
    }
  };
  A.Ed25519Blake2bPublicKey.prototype = {
    get$length(_) {
      return 33;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Ed25519Blake2bPublicKey))
        return false;
      if (this === other)
        return true;
      t1 = this._publicKey.$eq(0, other._publicKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._publicKey, B.EllipticCurveTypes_1]);
    }
  };
  A.Ed25519PublicKey.prototype = {
    get$length(_) {
      return 33;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Ed25519PublicKey))
        return false;
      if (this === other)
        return true;
      t1 = this._ed25519_keys$_publicKey.$eq(0, other._ed25519_keys$_publicKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._ed25519_keys$_publicKey, B.EllipticCurveTypes_0]);
    }
  };
  A.Ed25519PrivateKey.prototype = {
    get$length(_) {
      return 32;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Ed25519PrivateKey))
        return false;
      if (this === other)
        return true;
      t1 = this._privateKey.$eq(0, other._privateKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._privateKey, B.EllipticCurveTypes_0]);
    }
  };
  A.Ed25519KholawPublicKey.prototype = {
    get$length(_) {
      return 33;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Ed25519KholawPublicKey))
        return false;
      if (this === other)
        return true;
      t1 = this._ed25519_kholaw_keys$_publicKey.$eq(0, other._ed25519_kholaw_keys$_publicKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._ed25519_kholaw_keys$_publicKey, B.EllipticCurveTypes_2]);
    }
  };
  A.MoneroPublicKey.prototype = {
    get$length(_) {
      return 32;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.MoneroPublicKey))
        return false;
      if (this === other)
        return true;
      t1 = this.publicKey.$eq(0, other.publicKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.publicKey, B.EllipticCurveTypes_3]);
    }
  };
  A.Nist256p1PublicKey.prototype = {
    get$length(_) {
      return 33;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Nist256p1PublicKey))
        return false;
      t1 = this.publicKey.$eq(0, other.publicKey);
      return t1;
    },
    get$hashCode(_) {
      var t1 = this.publicKey;
      return (A.HashCodeGenerator_generateHashCode([t1.generator.curve, t1.point]) ^ A.Primitives_objectHashCode(B.EllipticCurveTypes_4)) >>> 0;
    }
  };
  A.Nist256p1HybridPublicKey.prototype = {
    get$length(_) {
      return 33;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Nist256p1HybridPublicKey))
        return false;
      t1 = this.publicKey.$eq(0, other.publicKey);
      return t1;
    },
    get$hashCode(_) {
      var t1 = this.publicKey;
      return (A.HashCodeGenerator_generateHashCode([t1.generator.curve, t1.point]) ^ A.Primitives_objectHashCode(B.EllipticCurveTypes_5)) >>> 0;
    }
  };
  A.Secp256k1PublicKey.prototype = {
    get$length(_) {
      return 33;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Secp256k1PublicKey))
        return false;
      t1 = this.publicKey.$eq(0, other.publicKey);
      return t1;
    },
    get$hashCode(_) {
      var t1 = this.publicKey;
      return (A.HashCodeGenerator_generateHashCode([t1.generator.curve, t1.point]) ^ A.Primitives_objectHashCode(B.EllipticCurveTypes_6)) >>> 0;
    }
  };
  A.Sr25519PublicKey.prototype = {
    get$length(_) {
      return 32;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Sr25519PublicKey))
        return false;
      t1 = this.publicKey.$eq(0, other.publicKey);
      return t1;
    },
    get$hashCode(_) {
      return (A.HashCodeGenerator_generateBytesHashCode(this.publicKey._keys$_publicKey, B.List_empty15) ^ A.Primitives_objectHashCode(B.EllipticCurveTypes_7)) >>> 0;
    }
  };
  A.MoneroCoinConf.prototype = {
    get$type() {
      return B.EllipticCurveTypes_3;
    },
    $isCoinConfig: 1
  };
  A.MoneroCoins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$MoneroCoins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.C_MoneroProposal;
    },
    $isCryptoCoins: 1
  };
  A.MoneroCoins_fromName_closure.prototype = {
    call$1(element) {
      return type$.MoneroCoins._as(element).name === this.name;
    },
    $signature: 78
  };
  A.MoneroProposal.prototype = {
    get$specName() {
      return "monero";
    }
  };
  A.SubstrateCoinConf.prototype = {$isCoinConfig: 1,
    get$type() {
      return this.type;
    }
  };
  A.SubstrateCoins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$SubstrateCoins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.C_SubstratePropoosal;
    },
    $isCryptoCoins: 1
  };
  A.SubstrateCoins_fromName_closure.prototype = {
    call$1(element) {
      return type$.SubstrateCoins._as(element).name === this.name;
    },
    $signature: 79
  };
  A.SubstratePropoosal.prototype = {
    get$specName() {
      return "substrate";
    }
  };
  A.SubstrateConf_acalaEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.SubstrateConf_acalaSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_acalaSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.SubstrateConf_bifrostEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.SubstrateConf_bifrostSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_bifrostSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.SubstrateConf_chainXEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.SubstrateConf_chainXSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_chainXSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.SubstrateConf_edgewareEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.SubstrateConf_edgewareSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_edgewareSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.SubstrateConf_genericEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.SubstrateConf_genericSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_genericSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.SubstrateConf_karuraEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.SubstrateConf_karuraSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_karuraSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.SubstrateConf_kusamaEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.SubstrateConf_kusamaSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_kusamaSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.SubstrateConf_moonbeamEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.SubstrateConf_moonbeamSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_moonbeamSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.SubstrateConf_moonriverEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.SubstrateConf_moonriverSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_moonriverSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.SubstrateConf_phalaEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.SubstrateConf_phalaSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_phalaSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.SubstrateConf_plasmEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.SubstrateConf_plasmSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_plasmSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.SubstrateConf_polkadotEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.SubstrateConf_polkadotSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_polkadotSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.SubstrateConf_soraEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.SubstrateConf_soraSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_soraSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.SubstrateConf_stafiEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 1
  };
  A.SubstrateConf_stafiSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 8
  };
  A.SubstrateConf_stafiSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.CborObject_CborObject$fromDynamic_closure.prototype = {
    call$1(e) {
      return A.CborObject_CborObject$fromDynamic(e);
    },
    $signature: 82
  };
  A.CborException.prototype = {};
  A.CborBase64Types.prototype = {};
  A.CborBaseUrlValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(this.type.tag);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(new A.CborStringValue(this.value)._encode$0()));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.value;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborBaseUrlValue))
        return false;
      return this.value === other.value && this.type.tag === other.type.tag;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value) ^ B.JSInt_methods.get$hashCode(B.JSArray_methods.get$first(this.type.tag));
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborBigFloatValue.prototype = {
    get$value() {
      return A._setArrayType([this.exponent, this.mantissa], type$.JSArray_BigInt);
    },
    encode$0() {
      var t2, _this = this,
        t1 = A._setArrayType([], type$.JSArray_int),
        bytes = new A.CborBytesTracker(t1);
      bytes.pushTags$1(B.List_5);
      bytes.pushInt$2(4, 2);
      t2 = type$.List_int;
      B.JSArray_methods.addAll$1(t1, t2._as(_this._encodeValue$1(_this.exponent)));
      B.JSArray_methods.addAll$1(t1, t2._as(_this._encodeValue$1(_this.mantissa)));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    _encodeValue$1(value) {
      if (value.get$bitLength(0) > 64)
        return new A.CborBigIntValue(value).encode$0();
      return new A.CborSafeIntValue(value).encode$0();
    },
    toString$0(_) {
      return this.exponent.toString$0(0) + ", " + this.mantissa.toString$0(0);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.CborBigFloatValue))
        return false;
      t1 = type$.JSArray_BigInt;
      return A.CompareUtils_iterableIsEqual(A._setArrayType([this.exponent, this.mantissa], t1), A._setArrayType([other.exponent, other.mantissa], t1), type$.BigInt);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(A._setArrayType([this.exponent, this.mantissa], type$.JSArray_BigInt));
    },
    $isCborObject: 1
  };
  A.CborBigIntValue.prototype = {
    encode$0() {
      var toBytes,
        t1 = A._setArrayType([], type$.JSArray_int),
        bytes = new A.CborBytesTracker(t1),
        v = this.value;
      if (v._isNegative) {
        bytes.pushTags$1(B.List_3);
        v = v.$not(0);
      } else
        bytes.pushTags$1(B.List_2);
      toBytes = A.BigintUtils_toBytes(v, B.JSInt_methods._tdivFast$1((v._isNegative ? v.$negate(0) : v).get$bitLength(0) + 7, 8), B.C_Endian);
      bytes.pushInt$2(2, toBytes.length);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(toBytes));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toBigInt$0() {
      return this.value;
    },
    toString$0(_) {
      return this.value.toString$0(0);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.CborBigIntValue))
        return false;
      t1 = this.value.compareTo$1(0, other.value);
      return t1 === 0;
    },
    get$hashCode(_) {
      return this.value.get$hashCode(0);
    },
    $isCborObject: 1,
    $isCborNumeric: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborBoleanValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int),
        t2 = this.value ? 21 : 20;
      new A.CborBytesTracker(t1).pushInt$2(7, t2);
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return B.JSBool_methods.toString$0(this.value);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborBoleanValue))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSBool_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborBytesValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int),
        t2 = this.value;
      new A.CborBytesTracker(t1).pushInt$2(2, t2.length);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(t2));
      return t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborBytesValue))
        return false;
      return A.BytesUtils_bytesEqual(other.value, this.value);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this.value);
    },
    toString$0(_) {
      return A.BytesUtils_toHexString(this.value, true, null);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborDynamicBytesValue.prototype = {
    encode$0() {
      var t3, t4, t5, _i, v,
        t1 = type$.JSArray_int,
        t2 = A._setArrayType([], t1),
        bytes = new A.CborBytesTracker(t2);
      bytes.pushIndefinite$1(2);
      for (t3 = this.value, t4 = t3.length, t5 = type$.List_int, _i = 0; _i < t4; ++_i) {
        v = t3[_i];
        bytes.pushInt$2(2, J.get$length$asx(v));
        B.JSArray_methods.addAll$1(t2, t5._as(v));
      }
      B.JSArray_methods.addAll$1(t2, t5._as(A._setArrayType([255], t1)));
      return t2;
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this.value, "[", "]");
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborDynamicBytesValue))
        return false;
      return A.CompareUtils_iterableIsEqual(this.value, other.value, type$.List_int);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborDynamicBytesValue_closure.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return A.List_List$unmodifiable(e, type$.int);
    },
    $signature: 83
  };
  A.CborTagValue.prototype = {
    get$value() {
      return this._value;
    },
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(this.tags);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(A.CborObject_CborObject$fromDynamic(this._value).encode$0()));
      return t1;
    },
    toString$0(_) {
      return this._value.toString$0(0);
    },
    $isCborObject: 1
  };
  A._CborDate.prototype = {
    _getTags$0() {
      if (this instanceof A.CborStringDateValue)
        return B.List_0;
      return B.List_1;
    },
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(this._getTags$0());
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(this._datetime$_encode$0()));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.get$value().toIso8601String$0();
    },
    $eq(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (!(other instanceof A._CborDate))
        return false;
      if (A.getRuntimeTypeOfDartObject(other) !== A.getRuntimeTypeOfDartObject(this))
        return false;
      t1 = this.get$value();
      t2 = other.get$value();
      return 1000 * t1._core$_value + t1._microsecond === 1000 * t2._core$_value + t2._microsecond;
    },
    get$hashCode(_) {
      var t1 = this.get$value();
      return A.Object_hash(t1._core$_value, t1._microsecond, B.C_SentinelValue, B.C_SentinelValue);
    },
    $isCborObject: 1
  };
  A.CborStringDateValue.prototype = {
    _datetime$_encode$0() {
      var timeZoneOffsetSign, timeZoneOffsetMinutes, timeZoneOffsetFormatted, _s1_ = "0",
        t1 = this.value,
        year = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getYear(t1)), 4, _s1_),
        month = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getMonth(t1)), 2, _s1_),
        day = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getDay(t1)), 2, _s1_),
        hour = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getHours(t1)), 2, _s1_),
        minute = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getMinutes(t1)), 2, _s1_),
        second = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getSeconds(t1)), 2, _s1_),
        t2 = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getMilliseconds(t1)), 3, _s1_),
        t3 = A.RegExp_RegExp("0*$", true),
        millisecond = A.stringReplaceAllUnchecked(t2, t3, "");
      t2 = t1.isUtc;
      t1 = (t2 ? B.Duration_0 : t1.get$timeZoneOffset())._duration;
      timeZoneOffsetSign = t1 < 0 ? "-" : "+";
      t3 = B.JSInt_methods._tdivFast$1(t1, 3600000000);
      timeZoneOffsetMinutes = B.JSInt_methods.$mod(Math.abs(B.JSInt_methods._tdivFast$1(t1, 60000000)), 60);
      timeZoneOffsetFormatted = t2 ? "Z" : timeZoneOffsetSign + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(Math.abs(t3)), 2, _s1_) + ":" + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(timeZoneOffsetMinutes), 2, _s1_);
      return new A.CborStringValue(year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":" + second + "." + millisecond + timeZoneOffsetFormatted)._encode$0();
    },
    get$value() {
      return this.value;
    }
  };
  A.CborEpochFloatValue.prototype = {
    _datetime$_encode$0() {
      return new A.CborFloatValue(this.value._core$_value / 1000).encode$0();
    },
    get$value() {
      return this.value;
    }
  };
  A.CborEpochIntValue.prototype = {
    _datetime$_encode$0() {
      return new A.CborIntValue(B.JSNumber_methods.round$0(this.value._core$_value / 1000)).encode$0();
    },
    get$value() {
      return this.value;
    }
  };
  A.CborDecimalFracValue.prototype = {
    get$value() {
      return A._setArrayType([this.exponent, this.mantissa], type$.JSArray_BigInt);
    },
    encode$0() {
      var t2, _this = this,
        t1 = A._setArrayType([], type$.JSArray_int),
        bytes = new A.CborBytesTracker(t1);
      bytes.pushTags$1(B.List_4);
      bytes.pushInt$2(4, 2);
      t2 = type$.List_int;
      B.JSArray_methods.addAll$1(t1, t2._as(_this._decimal$_encodeValue$1(_this.exponent)));
      B.JSArray_methods.addAll$1(t1, t2._as(_this._decimal$_encodeValue$1(_this.mantissa)));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    _decimal$_encodeValue$1(value) {
      if (value.get$bitLength(0) > 64)
        return new A.CborBigIntValue(value).encode$0();
      return new A.CborSafeIntValue(value).encode$0();
    },
    toString$0(_) {
      return B.JSArray_methods.join$1(A._setArrayType([this.exponent, this.mantissa], type$.JSArray_BigInt), ", ");
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.CborDecimalFracValue))
        return false;
      t1 = type$.JSArray_BigInt;
      return A.CompareUtils_iterableIsEqual(A._setArrayType([this.exponent, this.mantissa], t1), A._setArrayType([other.exponent, other.mantissa], t1), type$.BigInt);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(A._setArrayType([this.exponent, this.mantissa], type$.JSArray_BigInt));
    },
    $isCborObject: 1
  };
  A.CborFloatValue.prototype = {
    encode$0() {
      var value, toBytes,
        t1 = type$.JSArray_int,
        t2 = A._setArrayType([], t1),
        bytes = new A.CborBytesTracker(t2),
        t3 = this.value;
      if (isNaN(t3)) {
        bytes.pushMajorTag$2(7, 25);
        B.JSArray_methods.addAll$1(t2, type$.List_int._as(A._setArrayType([126, 0], t1)));
        A.BytesUtils_validateListOfBytes(t2);
        return t2;
      }
      value = this.__CborFloatValue__decodFloat_FI;
      if (value === $) {
        value !== $ && A.throwLateFieldADI("_decodFloat");
        value = this.__CborFloatValue__decodFloat_FI = new A.FloatUtils(t3);
      }
      toBytes = value.toBytes$1(null);
      bytes.pushMajorTag$2(7, toBytes.item2.get$numBytes());
      B.JSArray_methods.addAll$1(t2, type$.List_int._as(toBytes.item1));
      A.BytesUtils_validateListOfBytes(t2);
      return t2;
    },
    toString$0(_) {
      return B.JSNumber_methods.toString$0(this.value);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.CborFloatValue))
        return false;
      t1 = other.value;
      return this.value === t1;
    },
    get$hashCode(_) {
      return B.JSNumber_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborIntValue.prototype = {
    encode$0() {
      var value, t3,
        t1 = A._setArrayType([], type$.JSArray_int),
        bytes = new A.CborBytesTracker(t1),
        t2 = this.value;
      if (B.JSInt_methods.get$bitLength(t2) > 31 && B.JSInt_methods.get$isNegative(t2)) {
        value = A._BigIntImpl_parse(B.JSInt_methods.toString$0(t2), null).$not(0);
        if (!value.get$isValidInt())
          throw A.wrapException(A.CborException$("Value is to large for encoding as CborInteger", A.LinkedHashMap_LinkedHashMap$_literal(["value", B.JSInt_methods.toString$0(t2)], type$.String, type$.dynamic)));
        bytes.pushInt$2(1, value.toInt$0(0));
      } else {
        t3 = B.JSInt_methods.get$isNegative(t2) ? 1 : 0;
        bytes.pushInt$2(t3, B.JSInt_methods.get$isNegative(t2) ? ~t2 >>> 0 : t2);
      }
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toBigInt$0() {
      return A._BigIntImpl__BigIntImpl$from(this.value);
    },
    toInt$0(_) {
      return this.value;
    },
    toString$0(_) {
      return B.JSInt_methods.toString$0(this.value);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!type$.CborNumeric._is(other))
        return false;
      if (other instanceof A.CborBigIntValue)
        return false;
      t1 = A._BigIntImpl__BigIntImpl$from(this.value).compareTo$1(0, other.toBigInt$0());
      return t1 === 0;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    $isCborNumeric: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborSafeIntValue.prototype = {
    encode$0() {
      var t2, t3, t4,
        t1 = this.value;
      if (t1.get$isValidInt())
        return new A.CborIntValue(t1.toInt$0(0)).encode$0();
      t2 = A._setArrayType([], type$.JSArray_int);
      t3 = t1._isNegative;
      t4 = t3 ? 1 : 0;
      new A.CborBytesTracker(t2).pushMajorTag$2(t4, 27);
      B.JSArray_methods.addAll$1(t2, type$.List_int._as(A.BigintUtils_toBytes(t3 ? t1.$not(0) : t1, 8, B.C_Endian)));
      A.BytesUtils_validateListOfBytes(t2);
      return t2;
    },
    toBigInt$0() {
      return this.value;
    },
    toInt$0(_) {
      return this.value.toInt$0(0);
    },
    toString$0(_) {
      return this.value.toString$0(0);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!type$.CborNumeric._is(other))
        return false;
      if (other instanceof A.CborBigIntValue)
        return false;
      t1 = this.value.compareTo$1(0, other.toBigInt$0());
      return t1 === 0;
    },
    get$hashCode(_) {
      return this.value.get$hashCode(0);
    },
    $isCborObject: 1,
    $isCborNumeric: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborListValue.prototype = {
    encode$0() {
      var t4, t5, t6, _i,
        t1 = type$.JSArray_int,
        t2 = A._setArrayType([], t1),
        bytes = new A.CborBytesTracker(t2),
        t3 = this._isFixedLength;
      if (t3)
        bytes.pushInt$2(4, this.value.length);
      else
        bytes.pushIndefinite$1(4);
      for (t4 = this.value, t5 = t4.length, t6 = type$.List_int, _i = 0; _i < t4.length; t4.length === t5 || (0, A.throwConcurrentModificationError)(t4), ++_i)
        B.JSArray_methods.addAll$1(t2, t6._as(A.CborObject_CborObject$fromDynamic(t4[_i]).encode$0()));
      if (!t3)
        B.JSArray_methods.addAll$1(t2, t6._as(A._setArrayType([255], t1)));
      A.BytesUtils_validateListOfBytes(t2);
      return t2;
    },
    toString$0(_) {
      return B.JSArray_methods.join$1(this.value, ",");
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborMapValue.prototype = {
    encode$0() {
      var t4, t5, v,
        t1 = type$.JSArray_int,
        t2 = A._setArrayType([], t1),
        bytes = new A.CborBytesTracker(t2),
        t3 = this._map$_isFixedLength;
      if (t3)
        bytes.pushInt$2(5, this.value.__js_helper$_length);
      else
        bytes.pushIndefinite$1(5);
      for (t4 = this.value, t4 = new A.LinkedHashMapEntriesIterable(t4, A._instanceType(t4)._eval$1("LinkedHashMapEntriesIterable<1,2>")).get$iterator(0), t5 = type$.List_int; t4.moveNext$0();) {
        v = t4.__js_helper$_current;
        B.JSArray_methods.addAll$1(t2, t5._as(A.CborObject_CborObject$fromDynamic(v.key).encode$0()));
        B.JSArray_methods.addAll$1(t2, t5._as(A.CborObject_CborObject$fromDynamic(v.value).encode$0()));
      }
      if (!t3)
        B.JSArray_methods.addAll$1(t2, t5._as(A._setArrayType([255], t1)));
      A.BytesUtils_validateListOfBytes(t2);
      return t2;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborMimeValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(B.List_36);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(new A.CborStringValue(this.value)._encode$0()));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.value;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborMimeValue))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborNullValue.prototype = {
    get$value() {
      return null;
    },
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushInt$2(7, 22);
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return "null";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborNullValue))
        return false;
      return true;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode("null");
    },
    $isCborObject: 1
  };
  A.CborUndefinedValue.prototype = {
    get$value() {
      return null;
    },
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushInt$2(7, 23);
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return "undefined";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborUndefinedValue))
        return false;
      return true;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode("undefined");
    },
    $isCborObject: 1
  };
  A.CborRegxpValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(B.List_35);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(new A.CborStringValue(this.value)._encode$0()));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.value;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborRegxpValue))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborSetValue.prototype = {
    encode$0() {
      var t2, t3, t4, v,
        t1 = A._setArrayType([], type$.JSArray_int),
        bytes = new A.CborBytesTracker(t1);
      bytes.pushTags$1(B.List_258);
      t2 = this.value;
      bytes.pushInt$2(4, t2._collection$_length);
      for (t2 = A._LinkedHashSetIterator$(t2, t2._collection$_modifications, A._instanceType(t2)._precomputed1), t3 = type$.List_int, t4 = t2.$ti._precomputed1; t2.moveNext$0();) {
        v = t2._collection$_current;
        B.JSArray_methods.addAll$1(t1, t3._as(A.CborObject_CborObject$fromDynamic(v == null ? t4._as(v) : v).encode$0()));
      }
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.value.join$1(0, ",");
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborSetValue))
        return false;
      return A.CompareUtils_iterableIsEqual(this.value, other.value, type$.dynamic);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborString.prototype = {
    encode$0() {
      return this._encode$0();
    },
    $isCborObject: 1
  };
  A.CborStringValue.prototype = {
    _encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int),
        toBytes = A.StringUtils_encode(this.value, B.StringEncoding_1);
      new A.CborBytesTracker(t1).pushInt$2(3, toBytes.length);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(toBytes));
      return t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborStringValue))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value);
    },
    toString$0(_) {
      return this.value;
    },
    get$value() {
      return this.value;
    }
  };
  A.CborIndefiniteStringValue.prototype = {
    _encode$0() {
      var t3, t4, t5, _i, toBytes,
        t1 = type$.JSArray_int,
        t2 = A._setArrayType([], t1),
        bytes = new A.CborBytesTracker(t2);
      bytes.pushIndefinite$1(3);
      for (t3 = this.value, t4 = t3.length, t5 = type$.List_int, _i = 0; _i < t4; ++_i) {
        toBytes = A.StringUtils_encode(t3[_i], B.StringEncoding_1);
        bytes.pushInt$2(3, toBytes.length);
        B.JSArray_methods.addAll$1(t2, t5._as(toBytes));
      }
      B.JSArray_methods.addAll$1(t2, t5._as(A._setArrayType([255], t1)));
      A.BytesUtils_validateListOfBytes(t2);
      return t2;
    },
    toString$0(_) {
      return B.JSArray_methods.join$1(this.value, ", ");
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborIndefiniteStringValue))
        return false;
      return A.CompareUtils_iterableIsEqual(this.value, other.value, type$.String);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this.value);
    },
    get$value() {
      return this.value;
    }
  };
  A.CborUriValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(B.List_32);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(new A.CborStringValue(this.value)._encode$0()));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.value;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborUriValue))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A._DecodeCborResult.prototype = {};
  A.CborUtils__decodeUtf8String_closure.prototype = {
    call$1(e) {
      return type$.CborStringValue._as(e).value;
    },
    $signature: 84
  };
  A.CborUtils__toStringObject_closure.prototype = {
    call$1(element) {
      return A.BytesUtils_bytesEqual(this.tags, type$.CborBase64Types._as(element).tag);
    },
    $signature: 46
  };
  A.CborUtils__toStringObject_closure0.prototype = {
    call$1(element) {
      return A.BytesUtils_bytesEqual(this.tags, type$.CborBase64Types._as(element).tag);
    },
    $signature: 46
  };
  A.CborUtils__decodeBytesString_closure.prototype = {
    call$1(e) {
      return type$.CborBytesValue._as(e).value;
    },
    $signature: 86
  };
  A.CborBytesTracker.prototype = {
    pushTags$1(tags) {
      var t1, _i;
      type$.List_int._as(tags);
      for (t1 = tags.length, _i = 0; _i < t1; ++_i)
        this.pushInt$2(6, tags[_i]);
    },
    pushIndefinite$1(majorTag) {
      B.JSArray_methods.addAll$1(this._buffer, type$.List_int._as(A._setArrayType([(majorTag << 5 | 31) >>> 0], type$.JSArray_int)));
    },
    pushMajorTag$2(majorTag, value) {
      B.JSArray_methods.addAll$1(this._buffer, type$.List_int._as(A._setArrayType([(majorTag << 5 | value) >>> 0], type$.JSArray_int)));
    },
    pushInt$2(majorTag, value) {
      var len,
        $length = this.bytesLength$1(value),
        t1 = $length == null,
        t2 = t1 ? value : $length,
        t3 = type$.List_int,
        t4 = this._buffer;
      B.JSArray_methods.addAll$1(t4, t3._as(A._setArrayType([(majorTag << 5 | t2) >>> 0], type$.JSArray_int)));
      if (t1)
        return;
      len = B.JSInt_methods.$shl(1, $length - 24);
      if (len <= 4)
        B.JSArray_methods.addAll$1(t4, t3._as(A.IntUtils_toBytes(value, len)));
      else
        B.JSArray_methods.addAll$1(t4, t3._as(A.BigintUtils_toBytes(A._BigIntImpl__BigIntImpl$from(value), 8, B.C_Endian)));
    },
    bytesLength$1(value) {
      if (value < 24)
        return null;
      else if (value <= 255)
        return 24;
      else if (value <= 65535)
        return 25;
      else if (value <= 4294967295)
        return 26;
      else
        return 27;
    }
  };
  A.FloatLength.prototype = {
    get$numBytes() {
      switch (this) {
        case B.FloatLength_11_52:
          return 27;
        case B.FloatLength_8_23:
          return 26;
        default:
          return 25;
      }
    }
  };
  A.FloatUtils.prototype = {
    get$_isLess() {
      var result, _this = this,
        value = _this.__FloatUtils__isLess_FI;
      if (value === $) {
        result = A.FloatUtils__isLessThan(_this.value);
        _this.__FloatUtils__isLess_FI !== $ && A.throwLateFieldADI("_isLess");
        _this.__FloatUtils__isLess_FI = result;
        value = result;
      }
      return value;
    },
    _encodeFloat16$1(endianness) {
      var t1, float32Bits, sign, exponent, fraction, newExponent, uint8List,
        float16View = new Uint16Array(1),
        float32View = new Float32Array(1);
      float32View[0] = this.value;
      t1 = J.asUint32List$0$x(B.NativeUint8List_methods.get$buffer(J.asUint8List$0$x(B.NativeFloat32List_methods.get$buffer(float32View))));
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      float32Bits = t1[0];
      sign = float32Bits >>> 31 & 1;
      exponent = float32Bits >>> 23 & 255;
      fraction = float32Bits & 8388607;
      if (exponent === 0)
        float16View[0] = sign << 15 | fraction >>> 13 & 1023;
      else if (exponent === 255)
        float16View[0] = sign << 15 | 31744;
      else {
        newExponent = exponent - 127 + 15;
        if (newExponent < 0)
          float16View[0] = sign << 15;
        else {
          t1 = sign << 15;
          if (newExponent > 31)
            float16View[0] = t1 | 31744;
          else
            float16View[0] = (t1 | newExponent << 10 | fraction >>> 13 & 1023) >>> 0;
        }
      }
      uint8List = J.asUint8List$0$x(B.NativeUint16List_methods.get$buffer(float16View));
      if (1 >= uint8List.length)
        return A.ioore(uint8List, 1);
      t1 = A.List_List$from([uint8List[1], uint8List[0]], true, type$.int);
      return t1;
    },
    _encodeFloat64$1(endianness) {
      var byteData = new DataView(new ArrayBuffer(8));
      byteData.setFloat64(0, this.value, false);
      return J.asUint8List$0$x(B.NativeByteData_methods.get$buffer(byteData));
    },
    _encodeFloat32$1(endianness) {
      var byteData = new DataView(new ArrayBuffer(4));
      byteData.setFloat32(0, this.value, false);
      return J.asUint8List$0$x(B.NativeByteData_methods.get$buffer(byteData));
    },
    toBytes$1(decodFloatType) {
      var _this = this;
      if (_this.get$_isLess().item1)
        return new A.Tuple(_this._encodeFloat16$1(null), B.FloatLength_5_10, type$.Tuple_of_List_int_and_FloatLength);
      else if (_this.get$_isLess().item2)
        return new A.Tuple(_this._encodeFloat32$1(null), B.FloatLength_8_23, type$.Tuple_of_List_int_and_FloatLength);
      return new A.Tuple(_this._encodeFloat64$1(null), B.FloatLength_11_52, type$.Tuple_of_List_int_and_FloatLength);
    }
  };
  A.AES.prototype = {
    setKey$2(key, noDecryption) {
      var t1, t2, _this = this;
      type$.List_int._as(key);
      t1 = _this.__AES__keyLen_A;
      t1 === $ && A.throwLateFieldNI("_keyLen");
      if (t1 !== 32)
        throw A.wrapException(B.CryptoException_5rc);
      if (_this._encKey == null)
        _this._encKey = A.List_List$filled(60, 0, false, type$.int);
      if (_this._decKey == null)
        _this._decKey = A.List_List$filled(60, 0, false, type$.int);
      t1 = $.$get$AES__lib();
      t2 = _this._encKey;
      t2.toString;
      t1.expandKey$3(key, t2, _this._decKey);
      return _this;
    },
    $isBlockCipher: 1
  };
  A.AESLib.prototype = {
    initialize$0() {
      var t1, t2, t3, t4, i, s, t5, t6, w, t7, t8, _this = this,
        mul = new A.AESLib_initialize_mul(),
        r24 = new A.AESLib_initialize_r24();
      for (t1 = _this._te0, t2 = _this._te1, t3 = _this._te2, t4 = _this._te3, i = 0; i < 256; ++i) {
        s = B.List_TrJ[i];
        t5 = mul.call$2(s, 2);
        if (typeof t5 !== "number")
          return t5.$shl();
        t6 = mul.call$2(s, 3);
        if (typeof t6 !== "number")
          return A.iae(t6);
        w = (t5 << 24 | s << 16 | s << 8 | t6) >>> 0;
        B.JSArray_methods.$indexSet(t1, i, w);
        w = r24.call$1(w);
        B.JSArray_methods.$indexSet(t2, i, w);
        w = r24.call$1(w);
        B.JSArray_methods.$indexSet(t3, i, w);
        w = r24.call$1(w);
        B.JSArray_methods.$indexSet(t4, i, w);
        r24.call$1(w);
      }
      for (t1 = _this._td0, t2 = _this._td1, t3 = _this._td2, t4 = _this._td3, i = 0; i < 256; ++i) {
        s = B.List_04A[i];
        t5 = mul.call$2(s, 14);
        if (typeof t5 !== "number")
          return t5.$shl();
        t6 = mul.call$2(s, 9);
        if (typeof t6 !== "number")
          return t6.$shl();
        t7 = mul.call$2(s, 13);
        if (typeof t7 !== "number")
          return t7.$shl();
        t8 = mul.call$2(s, 11);
        if (typeof t8 !== "number")
          return A.iae(t8);
        w = (t5 << 24 | t6 << 16 | t7 << 8 | t8) >>> 0;
        B.JSArray_methods.$indexSet(t1, i, w);
        w = r24.call$1(w);
        B.JSArray_methods.$indexSet(t2, i, w);
        w = r24.call$1(w);
        B.JSArray_methods.$indexSet(t3, i, w);
        w = r24.call$1(w);
        B.JSArray_methods.$indexSet(t4, i, w);
        r24.call$1(w);
      }
    },
    _subw$1(w) {
      return (B.List_TrJ[w >>> 24 & 255] << 24 | B.List_TrJ[w >>> 16 & 255] << 16 | B.List_TrJ[w >>> 8 & 255] << 8 | B.List_TrJ[w & 255]) >>> 0;
    },
    expandKey$3(key, encKey, decKey) {
      var n, i, t, t2, t3, t4, ei, t5, i0, t6, j, t7, x, t8, t9, t10, _this = this,
        t1 = type$.List_int;
      t1._as(key);
      t1._as(encKey);
      type$.nullable_List_int._as(decKey);
      n = encKey.length;
      for (i = 0; i < 8; ++i)
        B.JSArray_methods.$indexSet(encKey, i, A.readUint32BE(key, i * 4));
      for (i = 8; i < n; ++i) {
        t = encKey[i - 1];
        t1 = B.JSInt_methods.$mod(i, 8);
        if (t1 === 0) {
          t1 = _this._subw$1((t << 8 | t >>> 24) >>> 0);
          t2 = B.JSInt_methods._tdivFast$1(i, 8) - 1;
          if (!(t2 >= 0 && t2 < 16))
            return A.ioore(B.List_Cex, t2);
          t = t1 ^ B.List_Cex[t2] << 24;
        } else if (t1 === 4)
          t = _this._subw$1(t);
        B.JSArray_methods.$indexSet(encKey, i, (encKey[i - 8] ^ t) >>> 0);
      }
      if (decKey != null)
        for (t1 = _this._td0, t2 = _this._td1, t3 = _this._td2, t4 = _this._td3, i = 0; i < n; i = i0) {
          ei = n - i - 4;
          for (t5 = i > 0, i0 = i + 4, t6 = i0 < n, j = 0; j < 4; ++j) {
            t7 = ei + j;
            if (!(t7 >= 0))
              return A.ioore(encKey, t7);
            x = encKey[t7];
            if (t5 && t6) {
              t7 = B.List_TrJ[x >>> 24 & 255];
              if (!(t7 < 256))
                return A.ioore(t1, t7);
              t7 = t1[t7];
              t8 = B.List_TrJ[x >>> 16 & 255];
              if (!(t8 < 256))
                return A.ioore(t2, t8);
              t8 = t2[t8];
              t9 = B.List_TrJ[x >>> 8 & 255];
              if (!(t9 < 256))
                return A.ioore(t3, t9);
              t9 = t3[t9];
              t10 = B.List_TrJ[x & 255];
              if (!(t10 < 256))
                return A.ioore(t4, t10);
              x = (t7 ^ t8 ^ t9 ^ t4[t10]) >>> 0;
            }
            B.JSArray_methods.$indexSet(decKey, i + j, x);
          }
        }
    },
    encryptBlock$3(xk, src, dst) {
      var s0, s1, s2, s3, nr, t2, t3, t4, t5, t00, t10, t20, t30, k, r, t6, t7, t8, t9, t11, t12, t13, t14, t15, t16, t17, t18, _this = this,
        t1 = type$.List_int;
      t1._as(xk);
      t1._as(src);
      t1._as(dst);
      s0 = A.readUint32BE(src, 0);
      s1 = A.readUint32BE(src, 4);
      s2 = A.readUint32BE(src, 8);
      s3 = A.readUint32BE(src, 12);
      t1 = xk.length;
      if (0 >= t1)
        return A.ioore(xk, 0);
      s0 ^= xk[0];
      if (1 >= t1)
        return A.ioore(xk, 1);
      s1 ^= xk[1];
      if (2 >= t1)
        return A.ioore(xk, 2);
      s2 ^= xk[2];
      if (3 >= t1)
        return A.ioore(xk, 3);
      s3 ^= xk[3];
      nr = (t1 / 4 | 0) - 2;
      for (t2 = _this._te0, t3 = _this._te1, t4 = _this._te2, t5 = _this._te3, t00 = 0, t10 = 0, t20 = 0, t30 = 0, k = 4, r = 0; r < nr; ++r, s3 = t30, s2 = t20, s1 = t10, s0 = t00) {
        if (!(k < t1))
          return A.ioore(xk, k);
        t00 = xk[k] ^ t2[s0 >>> 24 & 255] ^ t3[s1 >>> 16 & 255] ^ t4[s2 >>> 8 & 255] ^ t5[s3 & 255];
        t6 = k + 1;
        if (!(t6 < t1))
          return A.ioore(xk, t6);
        t10 = xk[t6] ^ t2[s1 >>> 24 & 255] ^ t3[s2 >>> 16 & 255] ^ t4[s3 >>> 8 & 255] ^ t5[s0 & 255];
        t6 = k + 2;
        if (!(t6 < t1))
          return A.ioore(xk, t6);
        t20 = xk[t6] ^ t2[s2 >>> 24 & 255] ^ t3[s3 >>> 16 & 255] ^ t4[s0 >>> 8 & 255] ^ t5[s1 & 255];
        t6 = k + 3;
        if (!(t6 < t1))
          return A.ioore(xk, t6);
        t30 = xk[t6] ^ t2[s3 >>> 24 & 255] ^ t3[s0 >>> 16 & 255] ^ t4[s1 >>> 8 & 255] ^ t5[s2 & 255];
        k += 4;
      }
      t2 = t00 >>> 24;
      if (!(t2 < 256))
        return A.ioore(B.List_TrJ, t2);
      t2 = B.List_TrJ[t2];
      t3 = B.List_TrJ[t10 >>> 16 & 255];
      t4 = B.List_TrJ[t20 >>> 8 & 255];
      t5 = B.List_TrJ[t30 & 255];
      t6 = t10 >>> 24;
      if (!(t6 < 256))
        return A.ioore(B.List_TrJ, t6);
      t6 = B.List_TrJ[t6];
      t7 = B.List_TrJ[t20 >>> 16 & 255];
      t8 = B.List_TrJ[t30 >>> 8 & 255];
      t9 = B.List_TrJ[t00 & 255];
      t11 = t20 >>> 24;
      if (!(t11 < 256))
        return A.ioore(B.List_TrJ, t11);
      t11 = B.List_TrJ[t11];
      t12 = B.List_TrJ[t30 >>> 16 & 255];
      t13 = B.List_TrJ[t00 >>> 8 & 255];
      t14 = B.List_TrJ[t10 & 255];
      t30 = t30 >>> 24;
      if (!(t30 < 256))
        return A.ioore(B.List_TrJ, t30);
      t30 = B.List_TrJ[t30];
      t00 = B.List_TrJ[t00 >>> 16 & 255];
      t10 = B.List_TrJ[t10 >>> 8 & 255];
      t20 = B.List_TrJ[t20 & 255];
      if (!(k < t1))
        return A.ioore(xk, k);
      t15 = xk[k];
      t16 = k + 1;
      if (!(t16 < t1))
        return A.ioore(xk, t16);
      t16 = xk[t16];
      t17 = k + 2;
      if (!(t17 < t1))
        return A.ioore(xk, t17);
      t17 = xk[t17];
      t18 = k + 3;
      if (!(t18 < t1))
        return A.ioore(xk, t18);
      t18 = xk[t18];
      A.writeUint32BE(((t2 << 24 | t3 << 16 | t4 << 8 | t5) ^ t15) >>> 0, dst, 0);
      A.writeUint32BE(((t6 << 24 | t7 << 16 | t8 << 8 | t9) ^ t16) >>> 0, dst, 4);
      A.writeUint32BE(((t11 << 24 | t12 << 16 | t13 << 8 | t14) ^ t17) >>> 0, dst, 8);
      A.writeUint32BE(((t30 << 24 | t00 << 16 | t10 << 8 | t20) ^ t18) >>> 0, dst, 12);
    }
  };
  A.AESLib_initialize_mul.prototype = {
    call$2(b, c) {
      var j = c,
        i = b,
        s = 0, k = 1;
      while (true) {
        if (!(k < 256 && j !== 0))
          break;
        if ((j & k) >>> 0 !== 0) {
          s = (s ^ i) >>> 0;
          j = (j ^ k) >>> 0;
        }
        i = i << 1;
        if ((i & 256) !== 0)
          i ^= 283;
        k = k << 1 >>> 0;
      }
      return s;
    },
    $signature: 22
  };
  A.AESLib_initialize_r24.prototype = {
    call$1(x) {
      return A.rotl32(x, 24);
    },
    $signature: 17
  };
  A.CurveFp.prototype = {
    $eq(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (other instanceof A.CurveFp) {
        t1 = _this.p.compareTo$1(0, other.p);
        t2 = false;
        if (t1 === 0) {
          t1 = _this.a.compareTo$1(0, other.a);
          if (t1 === 0) {
            t1 = _this.b.compareTo$1(0, other.b);
            if (t1 === 0)
              t1 = _this.h.compareTo$1(0, other.h) === 0;
            else
              t1 = t2;
          } else
            t1 = t2;
        } else
          t1 = t2;
        return t1;
      }
      return false;
    },
    get$hashCode(_) {
      var _this = this;
      return _this.p.get$hashCode(0) ^ _this.a.get$hashCode(0) ^ _this.b.get$hashCode(0) ^ _this.h.get$hashCode(0);
    },
    get$p() {
      return this.p;
    }
  };
  A.CurveED.prototype = {
    $eq(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (other instanceof A.CurveED) {
        t1 = _this.p.compareTo$1(0, other.p);
        t2 = false;
        if (t1 === 0) {
          t1 = _this.a.compareTo$1(0, other.a);
          if (t1 === 0) {
            t1 = _this.d.compareTo$1(0, other.d);
            if (t1 === 0)
              t1 = _this.h.compareTo$1(0, other.h) === 0;
            else
              t1 = t2;
          } else
            t1 = t2;
        } else
          t1 = t2;
        return t1;
      }
      return false;
    },
    get$hashCode(_) {
      var _this = this;
      return _this.p.get$hashCode(0) ^ _this.d.get$hashCode(0) ^ _this.h.get$hashCode(0) ^ _this.a.get$hashCode(0);
    },
    get$p() {
      return this.p;
    }
  };
  A.Curve.prototype = {};
  A.ECDSAPublicKey.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof A.ECDSAPublicKey)
        return this.generator.curve.$eq(0, other.generator.curve) && this.point.$eq(0, other.point);
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.generator.curve, this.point]);
    }
  };
  A.EDDSAPrivateKey.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other instanceof A.EDDSAPrivateKey) {
        if (this === other)
          return true;
        return this.generator.curve.$eq(0, other.generator.curve) && A.BytesUtils_bytesEqual(this.key, other.key);
      }
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this.key, A._setArrayType([this.generator.curve], type$.JSArray_Object));
    }
  };
  A.EDDSAPublicKey.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other instanceof A.EDDSAPublicKey) {
        if (this === other)
          return true;
        return this.generator.curve.$eq(0, other.generator.curve) && A.BytesUtils_bytesEqual(this._encoded, other._encoded);
      }
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this._encoded, A._setArrayType([this.generator.curve], type$.JSArray_Object));
    }
  };
  A.EncodeType.prototype = {
    _enumToString$0() {
      return "EncodeType." + this._name;
    }
  };
  A.AbstractPoint.prototype = {
    toBytes$0() {
      var encLen, yStr, t1, t2, raw, xBytes, _this = this;
      if (_this instanceof A.EDPoint) {
        _this.scale$0();
        encLen = B.JSInt_methods._tdivFast$1(_this.curve.p.get$bitLength(0) + 1 + 7, 8);
        yStr = A.BigintUtils_toBytes(_this.get$y(), encLen, B.C_Endian0);
        t1 = _this.get$x().$mod(0, $.$get$_BigIntImpl_two()).compareTo$1(0, $.$get$_BigIntImpl_one());
        if (t1 === 0) {
          t1 = yStr.length;
          t2 = t1 - 1;
          if (!(t2 >= 0))
            return A.ioore(yStr, t2);
          B.JSArray_methods.$indexSet(yStr, t2, (yStr[t2] | 128) >>> 0);
        }
        return yStr;
      }
      switch (B.EncodeType_0) {
        case B.EncodeType_2:
          return _this._base$_encode$0();
        case B.EncodeType_3:
          t1 = [4];
          B.JSArray_methods.addAll$1(t1, _this._base$_encode$0());
          return A.List_List$from(t1, true, type$.int);
        case B.EncodeType_1:
          raw = _this._base$_encode$0();
          t1 = A._setArrayType([!_this.get$y().get$isEven(0) ? 7 : 6], type$.JSArray_int);
          B.JSArray_methods.addAll$1(t1, raw);
          return t1;
        default:
          xBytes = A.BigintUtils_toBytes(_this.get$x(), A.BigintUtils_orderLen(_this.get$curve().get$p()), B.C_Endian);
          t1 = A._setArrayType([!_this.get$y().get$isEven(0) ? 3 : 2], type$.JSArray_int);
          B.JSArray_methods.addAll$1(t1, xBytes);
          return t1;
      }
    },
    _base$_encode$0() {
      var _this = this,
        xBytes = A.BigintUtils_toBytes(_this.get$x(), A.BigintUtils_orderLen(_this.get$curve().get$p()), B.C_Endian),
        yBytes = A.BigintUtils_toBytes(_this.get$y(), A.BigintUtils_orderLen(_this.get$curve().get$p()), B.C_Endian),
        t1 = A.List_List$_of(xBytes, type$.int);
      B.JSArray_methods.addAll$1(t1, yBytes);
      return t1;
    },
    toString$0(_) {
      return "(" + this.get$x().toString$0(0) + ", " + this.get$y().toString$0(0) + ")";
    }
  };
  A.ProjectiveECCPoint.prototype = {
    get$isInfinity() {
      var t1 = this._coords[0],
        t2 = $.$get$_BigIntImpl_zero();
      t1 = t1.compareTo$1(0, t2);
      if (t1 === 0)
        t1 = this._coords[1].compareTo$1(0, t2) === 0;
      else
        t1 = false;
      return t1;
    },
    _precomputeIfNeeded$0() {
      var t1, precomputedPoints, i, t2, newOrder, t3, t4, doubler, _this = this;
      if (!_this.generator || _this._precompute.length !== 0)
        return;
      t1 = _this.order;
      t1.toString;
      precomputedPoints = A._setArrayType([], type$.JSArray_List_BigInt);
      i = $.$get$_BigIntImpl_one();
      t2 = $.$get$_BigIntImpl_two();
      newOrder = t1.$mul(0, t2);
      t3 = _this._coords;
      t4 = type$.JSArray_BigInt;
      t3 = A._setArrayType([t3[0], t3[1], t3[2]], t4);
      doubler = new A.ProjectiveECCPoint(_this.curve, t1, false, B.List_empty14, t3);
      newOrder = newOrder.$mul(0, t2);
      B.JSArray_methods.add$1(precomputedPoints, A._setArrayType([doubler.get$x(), doubler.get$y()], t4));
      for (; i.compareTo$1(0, newOrder) < 0;) {
        i = i.$mul(0, t2);
        doubler = doubler.doublePoint$0().scale$0();
        B.JSArray_methods.add$1(precomputedPoints, A._setArrayType([doubler.get$x(), doubler.get$y()], t4));
      }
      _this._precompute = precomputedPoints;
    },
    $eq(_, other) {
      var t1, x1, y1, z1, p, zz1, t2, x2, y2, z2, zz2;
      if (other == null)
        return false;
      if (!(other instanceof A.AbstractPoint))
        return false;
      t1 = this._coords;
      x1 = t1[0];
      y1 = t1[1];
      z1 = t1[2];
      t1 = this.curve;
      p = t1.p;
      zz1 = z1.$mul(0, z1).$mod(0, p);
      if (!(other instanceof A.ProjectiveECCPoint))
        return false;
      if (other.get$isInfinity()) {
        t1 = $.$get$_BigIntImpl_zero();
        t2 = y1.compareTo$1(0, t1);
        if (t2 !== 0)
          t1 = z1.compareTo$1(0, t1) === 0;
        else
          t1 = true;
        return t1;
      }
      t2 = other._coords;
      x2 = t2[0];
      y2 = t2[1];
      z2 = t2[2];
      if (!t1.$eq(0, other.curve))
        return false;
      zz2 = z2.$mul(0, z2).$mod(0, p);
      t1 = x1.$mul(0, zz2).$sub(0, x2.$mul(0, zz1)).$mod(0, p);
      t2 = $.$get$_BigIntImpl_zero();
      t1 = t1.compareTo$1(0, t2);
      if (t1 === 0)
        t1 = y1.$mul(0, zz2).$mul(0, z2).$sub(0, y2.$mul(0, zz1).$mul(0, z1)).$mod(0, p).compareTo$1(0, t2) === 0;
      else
        t1 = false;
      return t1;
    },
    get$x() {
      var p, zInverse,
        t1 = this._coords,
        xCoordinate = t1[0],
        zCoordinate = t1[2];
      t1 = zCoordinate.compareTo$1(0, $.$get$_BigIntImpl_one());
      if (t1 === 0)
        return xCoordinate;
      p = this.curve.p;
      zInverse = A.BigintUtils_inverseMod(zCoordinate, p);
      return xCoordinate.$mul(0, zInverse).$mul(0, zInverse).$mod(0, p);
    },
    get$y() {
      var zInverse,
        t1 = this._coords,
        yCoordinate = t1[1],
        zCoordinate = t1[2],
        primeField = this.curve.p;
      t1 = zCoordinate.compareTo$1(0, $.$get$_BigIntImpl_one());
      if (t1 === 0)
        return yCoordinate;
      zInverse = A.BigintUtils_inverseMod(zCoordinate, primeField);
      return yCoordinate.$mul(0, zInverse).$mul(0, zInverse).$mul(0, zInverse).$mod(0, primeField);
    },
    scale$0() {
      var currentY, currentX, primeField, zInverse, zInverseSquared, _this = this,
        currentZ = _this._coords[2],
        t1 = $.$get$_BigIntImpl_one(),
        t2 = currentZ.compareTo$1(0, t1);
      if (t2 === 0)
        return _this;
      t2 = _this._coords;
      currentY = t2[1];
      currentX = t2[0];
      primeField = _this.curve.p;
      zInverse = A.BigintUtils_inverseMod(currentZ, primeField);
      zInverseSquared = zInverse.$mul(0, zInverse).$mod(0, primeField);
      _this._coords = A._setArrayType([currentX.$mul(0, zInverseSquared).$mod(0, primeField), currentY.$mul(0, zInverseSquared).$mul(0, zInverse).$mod(0, primeField), t1], type$.JSArray_BigInt);
      return _this;
    },
    _doubleWithZ1$4(x1, y1, p, a) {
      var ySquaredSquared, s, m, t,
        xSquared = x1.$mul(0, x1).$mod(0, p),
        ySquared = y1.$mul(0, y1).$mod(0, p),
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = ySquared.compareTo$1(0, t1);
      if (t2 === 0)
        return A._setArrayType([t1, t1, $.$get$_BigIntImpl_one()], type$.JSArray_BigInt);
      ySquaredSquared = ySquared.$mul(0, ySquared).$mod(0, p);
      t1 = $.$get$_BigIntImpl_two();
      s = t1.$mul(0, x1.$add(0, ySquared).$mul(0, x1.$add(0, ySquared)).$sub(0, xSquared).$sub(0, ySquaredSquared)).$mod(0, p);
      m = A._BigIntImpl__BigIntImpl$from(3).$mul(0, xSquared).$add(0, a).$mod(0, p);
      t = m.$mul(0, m).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, s)).$mod(0, p);
      return A._setArrayType([t, m.$mul(0, s.$sub(0, t)).$sub(0, A._BigIntImpl__BigIntImpl$from(8).$mul(0, ySquaredSquared)).$mod(0, p), t1.$mul(0, y1).$mod(0, p)], type$.JSArray_BigInt);
    },
    _double$5(x1, y1, z1, p, a) {
      var t3, xSquared, ySquared, ySquaredSquared, zSquared, s, m, t,
        t1 = $.$get$_BigIntImpl_one(),
        t2 = z1.compareTo$1(0, t1);
      if (t2 === 0)
        return this._doubleWithZ1$4(x1, y1, p, a);
      t2 = $.$get$_BigIntImpl_zero();
      t3 = y1.compareTo$1(0, t2);
      if (t3 !== 0)
        t3 = z1.compareTo$1(0, t2) === 0;
      else
        t3 = true;
      if (t3)
        return A._setArrayType([t2, t2, t1], type$.JSArray_BigInt);
      xSquared = x1.$mul(0, x1).$mod(0, p);
      ySquared = y1.$mul(0, y1).$mod(0, p);
      t3 = ySquared.compareTo$1(0, t2);
      if (t3 === 0)
        return A._setArrayType([t2, t2, t1], type$.JSArray_BigInt);
      ySquaredSquared = ySquared.$mul(0, ySquared).$mod(0, p);
      zSquared = z1.$mul(0, z1).$mod(0, p);
      s = $.$get$_BigIntImpl_two().$mul(0, x1.$add(0, ySquared).$mul(0, x1.$add(0, ySquared)).$sub(0, xSquared).$sub(0, ySquaredSquared)).$mod(0, p);
      m = A._BigIntImpl__BigIntImpl$from(3).$mul(0, xSquared).$add(0, a.$mul(0, zSquared).$mul(0, zSquared)).$mod(0, p);
      t = m.$mul(0, m).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, s)).$mod(0, p);
      return A._setArrayType([t, m.$mul(0, s.$sub(0, t)).$sub(0, A._BigIntImpl__BigIntImpl$from(8).$mul(0, ySquaredSquared)).$mod(0, p), y1.$add(0, z1).$mul(0, y1.$add(0, z1)).$sub(0, ySquared).$sub(0, zSquared).$mod(0, p)], type$.JSArray_BigInt);
    },
    doublePoint$0() {
      var t2, result, t3, coords, _this = this,
        t1 = _this._coords,
        x1 = t1[0],
        y1 = t1[1],
        z1 = t1[2];
      t1 = $.$get$_BigIntImpl_zero();
      t2 = y1.compareTo$1(0, t1);
      if (t2 === 0) {
        t1 = A._setArrayType([t1, t1, t1], type$.JSArray_BigInt);
        return new A.ProjectiveECCPoint(_this.curve, null, false, B.List_empty14, t1);
      }
      t2 = _this.curve;
      result = _this._double$5(x1, y1, z1, t2.p, t2.a);
      t3 = result[1].compareTo$1(0, t1);
      if (t3 !== 0)
        t3 = result[2].compareTo$1(0, t1) === 0;
      else
        t3 = true;
      if (t3) {
        t1 = A._setArrayType([t1, t1, t1], type$.JSArray_BigInt);
        return new A.ProjectiveECCPoint(t2, null, false, B.List_empty14, t1);
      }
      coords = A._setArrayType([result[0], result[1], result[2]], type$.JSArray_BigInt);
      return new A.ProjectiveECCPoint(t2, _this.order, false, B.List_empty14, coords);
    },
    _addPointsWithZ1$5(x1, y1, x2, y2, p) {
      var $V, x3,
        diff = x2.$sub(0, x1),
        I = diff.$mul(0, diff).$mul(0, A._BigIntImpl__BigIntImpl$from(4)).$mod(0, p),
        $J = diff.$mul(0, I),
        scaledYDifference = y2.$sub(0, y1).$mul(0, A._BigIntImpl__BigIntImpl$from(2)),
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = diff.compareTo$1(0, t1);
      if (t2 === 0)
        t1 = scaledYDifference.compareTo$1(0, t1) === 0;
      else
        t1 = false;
      if (t1)
        return this._doubleWithZ1$4(x1, y1, p, this.curve.a);
      $V = x1.$mul(0, I);
      x3 = scaledYDifference.$mul(0, scaledYDifference).$sub(0, $J).$sub(0, $V.$mul(0, A._BigIntImpl__BigIntImpl$from(2))).$mod(0, p);
      return A._setArrayType([x3, scaledYDifference.$mul(0, $V.$sub(0, x3)).$sub(0, y1.$mul(0, $J).$mul(0, A._BigIntImpl__BigIntImpl$from(2))).$mod(0, p), diff.$mul(0, A._BigIntImpl__BigIntImpl$from(2)).$mod(0, p)], type$.JSArray_BigInt);
    },
    _addPointsWithCommonZ$6(x1, y1, z1, x2, y2, p) {
      var x3,
        $A = x2.$sub(0, x1).modPow$2(0, A._BigIntImpl__BigIntImpl$from(2), p),
        $B = x1.$mul(0, $A).$mod(0, p),
        $C = x2.$mul(0, $A),
        $D = y2.$sub(0, y1).modPow$2(0, A._BigIntImpl__BigIntImpl$from(2), p),
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = $A.compareTo$1(0, t1);
      if (t2 === 0)
        t1 = $D.compareTo$1(0, t1) === 0;
      else
        t1 = false;
      if (t1)
        return this._double$5(x1, y1, z1, p, this.curve.a);
      x3 = $D.$sub(0, $B).$sub(0, $C).$mod(0, p);
      return A._setArrayType([x3, y2.$sub(0, y1).$mul(0, $B.$sub(0, x3)).$sub(0, y1.$mul(0, $C.$sub(0, $B))).$mod(0, p), z1.$mul(0, x2.$sub(0, x1)).$mod(0, p)], type$.JSArray_BigInt);
    },
    _addPointsWithZ2EqualOne$6(x1, y1, z1, x2, y2, p) {
      var v, x3,
        z1z1 = z1.$mul(0, z1).$mod(0, p),
        u2 = x2.$mul(0, z1z1).$mod(0, p),
        s2 = y2.$mul(0, z1).$mul(0, z1z1).$mod(0, p),
        h = u2.$sub(0, x1).$mod(0, p),
        hh = h.$mul(0, h).$mod(0, p),
        i = A._BigIntImpl__BigIntImpl$from(4).$mul(0, hh).$mod(0, p),
        j = h.$mul(0, i).$mod(0, p),
        r = A._BigIntImpl__BigIntImpl$from(2).$mul(0, s2.$sub(0, y1)).$mod(0, p),
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = r.compareTo$1(0, t1);
      if (t2 === 0)
        t1 = h.compareTo$1(0, t1) === 0;
      else
        t1 = false;
      if (t1)
        return this._doubleWithZ1$4(x2, y2, p, this.curve.a);
      v = x1.$mul(0, i).$mod(0, p);
      x3 = r.$mul(0, r).$sub(0, j).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, v)).$mod(0, p);
      return A._setArrayType([x3, r.$mul(0, v.$sub(0, x3)).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, y1).$mul(0, j)).$mod(0, p), z1.$add(0, h).modPow$2(0, A._BigIntImpl__BigIntImpl$from(2), p).$sub(0, z1z1).$sub(0, hh).$mod(0, p)], type$.JSArray_BigInt);
    },
    _addPointsWithZNotEqual$7(x1, y1, z1, x2, y2, z2, p) {
      var v, x3,
        z1z1 = z1.$mul(0, z1).$mod(0, p),
        z2z2 = z2.$mul(0, z2).$mod(0, p),
        u1 = x1.$mul(0, z2z2).$mod(0, p),
        u2 = x2.$mul(0, z1z1).$mod(0, p),
        s1 = y1.$mul(0, z2).$mul(0, z2z2).$mod(0, p),
        s2 = y2.$mul(0, z1).$mul(0, z1z1).$mod(0, p),
        h = u2.$sub(0, u1).$mod(0, p),
        i = A._BigIntImpl__BigIntImpl$from(4).$mul(0, h).$mul(0, h).$mod(0, p),
        j = h.$mul(0, i).$mod(0, p),
        r = A._BigIntImpl__BigIntImpl$from(2).$mul(0, s2.$sub(0, s1)).$mod(0, p),
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = h.compareTo$1(0, t1);
      if (t2 === 0)
        t1 = r.compareTo$1(0, t1) === 0;
      else
        t1 = false;
      if (t1)
        return this._double$5(x1, y1, z1, p, this.curve.a);
      v = u1.$mul(0, i).$mod(0, p);
      x3 = r.$mul(0, r).$sub(0, j).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, v)).$mod(0, p);
      return A._setArrayType([x3, r.$mul(0, v.$sub(0, x3)).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, s1).$mul(0, j)).$mod(0, p), z1.$add(0, z2).modPow$2(0, A._BigIntImpl__BigIntImpl$from(2), p).$sub(0, z1z1).$sub(0, z2z2).$mul(0, h).$mod(0, p)], type$.JSArray_BigInt);
    },
    _addPoints$7(x1, y1, z1, x2, y2, z2, p) {
      var _this = this,
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = y1.compareTo$1(0, t1);
      if (t2 !== 0)
        t2 = z1.compareTo$1(0, t1) === 0;
      else
        t2 = true;
      if (t2)
        return A._setArrayType([x2, y2, z2], type$.JSArray_BigInt);
      t2 = y2.compareTo$1(0, t1);
      if (t2 !== 0)
        t1 = z2.compareTo$1(0, t1) === 0;
      else
        t1 = true;
      if (t1)
        return A._setArrayType([x1, y1, z1], type$.JSArray_BigInt);
      t1 = z1.compareTo$1(0, z2);
      if (t1 === 0) {
        t1 = z1.compareTo$1(0, $.$get$_BigIntImpl_one());
        if (t1 === 0)
          return _this._addPointsWithZ1$5(x1, y1, x2, y2, p);
        return _this._addPointsWithCommonZ$6(x1, y1, z1, x2, y2, p);
      }
      t1 = $.$get$_BigIntImpl_one();
      t2 = z1.compareTo$1(0, t1);
      if (t2 === 0)
        return _this._addPointsWithZ2EqualOne$6(x2, y2, z2, x1, y1, p);
      t1 = z2.compareTo$1(0, t1);
      if (t1 === 0)
        return _this._addPointsWithZ2EqualOne$6(x1, y1, z1, x2, y2, p);
      return _this._addPointsWithZNotEqual$7(x1, y1, z1, x2, y2, z2, p);
    },
    _multiplyWithPrecompute$1(scalar) {
      var resultY, i, t2, t3, x2, y2, flag, t4, addResult, _this = this,
        resultX = $.$get$_BigIntImpl_zero(),
        resultZ = $.$get$_BigIntImpl_one(),
        t1 = _this.curve,
        primeField = t1.p,
        precompute = A.List_List$from(_this._precompute, true, type$.List_BigInt);
      for (resultY = resultX, i = 0; i < precompute.length; ++i) {
        t2 = precompute[i];
        t3 = J.getInterceptor$asx(t2);
        x2 = t3.$index(t2, 0);
        y2 = t3.$index(t2, 1);
        if (scalar._used !== 0) {
          t2 = scalar._digits;
          if (0 >= t2.length)
            return A.ioore(t2, 0);
          t2 = (t2[0] & 1) === 0;
        } else
          t2 = true;
        if (!t2) {
          flag = scalar.$mod(0, A._BigIntImpl__BigIntImpl$from(4));
          t2 = $.$get$_BigIntImpl_two();
          if (flag.compareTo$1(0, t2) >= 0) {
            t3 = $.$get$_BigIntImpl_one();
            t4 = scalar.$add(0, t3);
            if (t2._used === 0)
              A.throwExpression(B.C_IntegerDivisionByZeroException);
            scalar = t4._div$1(t2);
            addResult = _this._addPoints$7(resultX, resultY, resultZ, x2, y2.$negate(0), t3, primeField);
            resultX = addResult[0];
            resultY = addResult[1];
            resultZ = addResult[2];
          } else {
            t3 = $.$get$_BigIntImpl_one();
            t4 = scalar.$sub(0, t3);
            if (t2._used === 0)
              A.throwExpression(B.C_IntegerDivisionByZeroException);
            scalar = t4._div$1(t2);
            addResult = _this._addPoints$7(resultX, resultY, resultZ, x2, y2, t3, primeField);
            resultX = addResult[0];
            resultY = addResult[1];
            resultZ = addResult[2];
          }
        } else {
          t2 = $.$get$_BigIntImpl_two();
          if (t2._used === 0)
            A.throwExpression(B.C_IntegerDivisionByZeroException);
          scalar = scalar._div$1(t2);
        }
      }
      t2 = $.$get$_BigIntImpl_zero();
      t3 = resultY.compareTo$1(0, t2);
      if (t3 !== 0)
        t3 = resultZ.compareTo$1(0, t2) === 0;
      else
        t3 = true;
      if (t3) {
        t2 = A._setArrayType([t2, t2, t2], type$.JSArray_BigInt);
        return new A.ProjectiveECCPoint(t1, null, false, B.List_empty14, t2);
      }
      t2 = A._setArrayType([resultX, resultY, resultZ], type$.JSArray_BigInt);
      return new A.ProjectiveECCPoint(t1, _this.order, false, B.List_empty14, t2);
    },
    $mul(_, scalar) {
      var z3, t2, x2, y2, primeField, curveA, nafList, i, y3, x30, double, add, t3, _this = this,
        t1 = _this._coords[1],
        x3 = $.$get$_BigIntImpl_zero();
      t1 = t1.compareTo$1(0, x3);
      if (t1 !== 0)
        t1 = scalar.compareTo$1(0, x3) === 0;
      else
        t1 = true;
      if (t1) {
        t1 = A._setArrayType([x3, x3, x3], type$.JSArray_BigInt);
        return new A.ProjectiveECCPoint(_this.curve, null, false, B.List_empty14, t1);
      }
      z3 = $.$get$_BigIntImpl_one();
      t1 = scalar.compareTo$1(0, z3);
      if (t1 === 0)
        return _this;
      t1 = _this.order;
      if (t1 != null)
        scalar = scalar.$mod(0, t1.$mul(0, $.$get$_BigIntImpl_two()));
      _this._precomputeIfNeeded$0();
      if (_this._precompute.length !== 0)
        return _this._multiplyWithPrecompute$1(scalar);
      _this.scale$0();
      t2 = _this._coords;
      x2 = t2[0];
      y2 = t2[1];
      t2 = _this.curve;
      primeField = t2.p;
      curveA = t2.a;
      nafList = A.BigintUtils_computeNAF(scalar);
      for (i = nafList.length - 1, y3 = x3, x30 = y3; i >= 0; --i) {
        double = _this._double$5(x30, y3, z3, primeField, curveA);
        x30 = double[0];
        y3 = double[1];
        z3 = double[2];
        if (!(i < nafList.length))
          return A.ioore(nafList, i);
        if (nafList[i].compareTo$1(0, x3) < 0) {
          add = _this._addPoints$7(x30, y3, z3, x2, y2.$negate(0), $.$get$_BigIntImpl_one(), primeField);
          x30 = add[0];
          y3 = add[1];
          z3 = add[2];
        } else {
          if (!(i < nafList.length))
            return A.ioore(nafList, i);
          if (nafList[i].compareTo$1(0, x3) > 0) {
            add = _this._addPoints$7(x30, y3, z3, x2, y2, $.$get$_BigIntImpl_one(), primeField);
            x30 = add[0];
            y3 = add[1];
            z3 = add[2];
          }
        }
      }
      t3 = y3.compareTo$1(0, x3);
      if (t3 !== 0)
        t3 = z3.compareTo$1(0, x3) === 0;
      else
        t3 = true;
      if (t3) {
        t1 = A._setArrayType([x3, x3, x3], type$.JSArray_BigInt);
        return new A.ProjectiveECCPoint(t2, null, false, B.List_empty14, t1);
      }
      t3 = A._setArrayType([x30, y3, z3], type$.JSArray_BigInt);
      return new A.ProjectiveECCPoint(t2, t1, false, B.List_empty14, t3);
    },
    get$hashCode(_) {
      return this.curve.get$hashCode(0) ^ this.get$x().get$hashCode(0) ^ this.get$y().get$hashCode(0);
    },
    get$curve() {
      return this.curve;
    }
  };
  A.EDPoint.prototype = {
    get$x() {
      var x1, z1, p,
        t1 = this._edwards$_coords,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      x1 = t1[0];
      if (2 >= t2)
        return A.ioore(t1, 2);
      z1 = t1[2];
      t1 = z1.compareTo$1(0, $.$get$_BigIntImpl_one());
      if (t1 === 0)
        return x1;
      p = this.curve.p;
      return x1.$mul(0, A.BigintUtils_inverseMod(z1, p)).$mod(0, p);
    },
    get$y() {
      var y1, z1, p,
        t1 = this._edwards$_coords,
        t2 = t1.length;
      if (1 >= t2)
        return A.ioore(t1, 1);
      y1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      z1 = t1[2];
      t1 = z1.compareTo$1(0, $.$get$_BigIntImpl_one());
      if (t1 === 0)
        return y1;
      p = this.curve.p;
      return y1.$mul(0, A.BigintUtils_inverseMod(z1, p)).$mod(0, p);
    },
    scale$0() {
      var z1, t2, t3, x1, y1, p, zInv, x, y, t, _this = this,
        t1 = _this._edwards$_coords;
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      z1 = t1[2];
      t2 = $.$get$_BigIntImpl_one();
      t3 = z1.compareTo$1(0, t2);
      if (t3 === 0)
        return _this;
      t3 = t1.length;
      if (0 >= t3)
        return A.ioore(t1, 0);
      x1 = t1[0];
      if (1 >= t3)
        return A.ioore(t1, 1);
      y1 = t1[1];
      p = _this.curve.p;
      zInv = A.BigintUtils_inverseMod(z1, p);
      x = x1.$mul(0, zInv).$mod(0, p);
      y = y1.$mul(0, zInv).$mod(0, p);
      t = x.$mul(0, y).$mod(0, p);
      B.JSArray_methods.$indexSet(t1, 0, x);
      B.JSArray_methods.$indexSet(t1, 1, y);
      B.JSArray_methods.$indexSet(t1, 2, t2);
      B.JSArray_methods.$indexSet(t1, 3, t);
      return _this;
    },
    $eq(_, other) {
      var t1, otherCoords, t2, t3, x1, y1, z1, t10, x2, y2, z2, t4, p, xn1, xn2, yn1, yn2;
      if (other == null)
        return false;
      if (other instanceof A.EDPoint) {
        t1 = other._edwards$_coords;
        otherCoords = A.List_List$from(t1, true, type$.BigInt);
        t2 = this._edwards$_coords;
        t3 = t2.length;
        if (0 >= t3)
          return A.ioore(t2, 0);
        x1 = t2[0];
        if (1 >= t3)
          return A.ioore(t2, 1);
        y1 = t2[1];
        if (2 >= t3)
          return A.ioore(t2, 2);
        z1 = t2[2];
        if (3 >= t3)
          return A.ioore(t2, 3);
        t10 = t2[3];
        t2 = otherCoords.length;
        if (0 >= t2)
          return A.ioore(otherCoords, 0);
        x2 = otherCoords[0];
        if (1 >= t2)
          return A.ioore(otherCoords, 1);
        y2 = otherCoords[1];
        if (2 >= t2)
          return A.ioore(otherCoords, 2);
        z2 = otherCoords[2];
        t2 = t1.length;
        t3 = true;
        if (t2 !== 0) {
          if (0 >= t2)
            return A.ioore(t1, 0);
          t2 = t1[0];
          t4 = $.$get$_BigIntImpl_zero();
          t2 = t2.compareTo$1(0, t4);
          if (t2 !== 0) {
            if (3 >= t1.length)
              return A.ioore(t1, 3);
            t1 = t1[3].compareTo$1(0, t4) === 0;
          } else
            t1 = t3;
        } else
          t1 = t3;
        if (t1) {
          t1 = $.$get$_BigIntImpl_zero();
          t2 = x1.compareTo$1(0, t1);
          if (t2 !== 0)
            t1 = t10.compareTo$1(0, t1) === 0;
          else
            t1 = true;
          return t1;
        }
        t1 = this.curve;
        if (!t1.$eq(0, other.curve))
          return false;
        p = t1.p;
        xn1 = x1.$mul(0, z2).$mod(0, p);
        xn2 = x2.$mul(0, z1).$mod(0, p);
        yn1 = y1.$mul(0, z2).$mod(0, p);
        yn2 = y2.$mul(0, z1).$mod(0, p);
        t1 = xn1.compareTo$1(0, xn2);
        if (t1 === 0)
          t1 = yn1.compareTo$1(0, yn2) === 0;
        else
          t1 = false;
        return t1;
      }
      return false;
    },
    get$hashCode(_) {
      return this.get$x().get$hashCode(0) ^ this.get$y().get$hashCode(0) ^ J.get$hashCode$(this.order);
    },
    get$curve() {
      return this.curve;
    }
  };
  A.RistrettoPoint.prototype = {};
  A.ChaCha20Poly1305.prototype = {
    encrypt$2(nonce, plaintext) {
      var t2, counter, authKey, resultLength, result, calculatedTag,
        t1 = type$.List_int;
      t1._as(nonce);
      t1._as(plaintext);
      t1 = J.getInterceptor$asx(nonce);
      if (t1.get$length(nonce) > 16)
        throw A.wrapException(B.CryptoException_a53);
      t2 = type$.int;
      counter = A.List_List$filled(16, 0, false, t2);
      t1 = t1.get$length(nonce);
      A.BytesUtils_validateListOfBytes(nonce);
      B.JSArray_methods.setRange$3(counter, 16 - t1, 16, nonce);
      authKey = A.List_List$filled(32, 0, false, t2);
      t1 = this.__ChaCha20Poly1305__key_A;
      t1 === $ && A.throwLateFieldNI("_key");
      A.zero(authKey);
      A.ChaCha20_streamXOR(t1, counter, authKey, authKey, 4);
      resultLength = plaintext.length + 16;
      result = A.List_List$filled(resultLength, 0, false, t2);
      t1 = this.__ChaCha20Poly1305__key_A;
      A.BytesUtils_validateListOfBytes(plaintext);
      A.ChaCha20_streamXOR(t1, counter, plaintext, result, 4);
      calculatedTag = A.List_List$filled(16, 0, false, t2);
      t2 = resultLength - 16;
      this._authenticate$4(calculatedTag, authKey, B.JSArray_methods.sublist$2(result, 0, t2), null);
      B.JSArray_methods.setRange$3(result, t2, resultLength, calculatedTag);
      A.zero(counter);
      return result;
    },
    decrypt$2(nonce, sealed) {
      var t2, t3, counter, authKey, calculatedTag, result,
        t1 = type$.List_int;
      t1._as(nonce);
      t1._as(sealed);
      t1 = nonce.length;
      if (t1 > 16)
        throw A.wrapException(B.CryptoException_a53);
      t2 = sealed.length;
      if (t2 < 16)
        return null;
      t3 = type$.int;
      counter = A.List_List$filled(16, 0, false, t3);
      B.JSArray_methods.setRange$3(counter, 16 - t1, 16, nonce);
      authKey = A.List_List$filled(32, 0, false, t3);
      t1 = this.__ChaCha20Poly1305__key_A;
      t1 === $ && A.throwLateFieldNI("_key");
      A.zero(authKey);
      A.ChaCha20_streamXOR(t1, counter, authKey, authKey, 4);
      calculatedTag = A.List_List$filled(16, 0, false, t3);
      t2 -= 16;
      this._authenticate$4(calculatedTag, authKey, B.JSArray_methods.sublist$2(sealed, 0, t2), null);
      if (!A.BytesUtils_bytesEqual(calculatedTag, B.JSArray_methods.sublist$1(sealed, t2)))
        return null;
      result = A.List_List$filled(t2, 0, false, t3);
      A.ChaCha20_streamXOR(this.__ChaCha20Poly1305__key_A, counter, B.JSArray_methods.sublist$2(sealed, 0, t2), result, 4);
      A.zero(counter);
      return result;
    },
    _authenticate$4(tagOut, authKey, ciphertext, associatedData) {
      var t2, t3, t4, t5, h, t00, t10, t30, t50, t6, t7, $length, mac, i,
        t1 = type$.List_int;
      t1._as(tagOut);
      t1._as(authKey);
      t1._as(ciphertext);
      t1 = type$.int;
      t2 = A.List_List$filled(16, 0, false, t1);
      t3 = A.List_List$filled(10, 0, false, t1);
      t4 = A.List_List$filled(10, 0, false, t1);
      t5 = A.List_List$filled(8, 0, false, t1);
      h = new A.Poly1305(t2, t3, t4, t5);
      t00 = authKey[0] | authKey[1] << 8;
      B.JSArray_methods.$indexSet(t3, 0, t00 & 8191);
      t10 = authKey[2] | authKey[3] << 8;
      B.JSArray_methods.$indexSet(t3, 1, (t00 >>> 13 | t10 << 3) & 8191);
      t2 = authKey[4] | authKey[5] << 8;
      B.JSArray_methods.$indexSet(t3, 2, (t10 >>> 10 | t2 << 6) & 7939);
      t30 = authKey[6] | authKey[7] << 8;
      B.JSArray_methods.$indexSet(t3, 3, (t2 >>> 7 | t30 << 9) & 8191);
      t4 = authKey[8] | authKey[9] << 8;
      B.JSArray_methods.$indexSet(t3, 4, (t30 >>> 4 | t4 << 12) & 255);
      B.JSArray_methods.$indexSet(t3, 5, t4 >>> 1 & 8190);
      t50 = authKey[10] | authKey[11] << 8;
      B.JSArray_methods.$indexSet(t3, 6, (t4 >>> 14 | t50 << 2) & 8191);
      t6 = authKey[12] | authKey[13] << 8;
      B.JSArray_methods.$indexSet(t3, 7, (t50 >>> 11 | t6 << 5) & 8065);
      t7 = authKey[14] | authKey[15] << 8;
      B.JSArray_methods.$indexSet(t3, 8, (t6 >>> 8 | t7 << 8) & 8191);
      B.JSArray_methods.$indexSet(t3, 9, t7 >>> 5 & 127);
      B.JSArray_methods.$indexSet(t5, 0, (authKey[16] | authKey[17] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 1, (authKey[18] | authKey[19] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 2, (authKey[20] | authKey[21] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 3, (authKey[22] | authKey[23] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 4, (authKey[24] | authKey[25] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 5, (authKey[26] | authKey[27] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 6, (authKey[28] | authKey[29] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 7, (authKey[30] | authKey[31] << 8) >>> 0);
      h.update$1(ciphertext);
      t2 = B.JSInt_methods.$mod(ciphertext.length, 16);
      if (t2 > 0)
        h.update$1(A.List_List$filled(16 - t2, 0, false, t1));
      $length = A.List_List$filled(8, 0, false, t1);
      h.update$1($length);
      A.writeUint64LE(ciphertext.length, $length);
      h.update$1($length);
      if (h._finished)
        A.throwExpression(B.CryptoException_aEB);
      mac = A.List_List$filled(16, 0, false, t1);
      h.finish$1(mac);
      for (i = 0; i < 16; ++i)
        B.JSArray_methods.$indexSet(tagOut, i, mac[i]);
      A.zero(h._poly1305$_buffer);
      A.zero(t3);
      A.zero(h._h);
      A.zero(t5);
      h._fin = h._leftover = 0;
      h._finished = true;
      A.zero(mac);
      A.zero($length);
    }
  };
  A.CTR.prototype = {
    setCipher$2(cipher, iv) {
      var t1, _this = this;
      type$.nullable_List_int._as(iv);
      _this._cipher = null;
      t1 = _this.__CTR__counter_F;
      t1 === $ && A.throwLateFieldNI("_counter");
      if (16 !== t1.length)
        throw A.wrapException(B.CryptoException_ULN);
      _this._cipher = cipher;
      B.JSArray_methods.setAll$2(t1, 0, iv);
      t1 = _this.__CTR__buffer_F;
      t1 === $ && A.throwLateFieldNI("_buffer");
      _this._bufpos = t1.length;
      return _this;
    },
    streamXOR$2(src, dst) {
      var t2, i, t3, t4, t5, t6, t7, _this = this,
        t1 = type$.List_int;
      t1._as(src);
      t1._as(dst);
      for (t2 = type$.nullable_List_int, i = 0; i < 16; ++i) {
        t3 = _this._bufpos;
        t4 = _this.__CTR__buffer_F;
        t4 === $ && A.throwLateFieldNI("_buffer");
        t5 = t4.length;
        if (t3 === t5) {
          t3 = _this._cipher;
          t3.toString;
          t6 = _this.__CTR__counter_F;
          t6 === $ && A.throwLateFieldNI("_counter");
          t1._as(t6);
          t2._as(t4);
          if (t6.length !== 16)
            A.throwExpression(B.CryptoException_yTp);
          if (t5 !== 16)
            A.throwExpression(B.CryptoException_UXg);
          t3 = t3._encKey;
          if (t3 == null)
            A.throwExpression(B.CryptoException_f8H);
          t7 = $.$get$AES__lib();
          A.BytesUtils_validateListOfBytes(t6);
          t7.encryptBlock$3(t3, t6, t4);
          _this._bufpos = 0;
          A._incrementCounter(t6);
        }
        t3 = src[i];
        t6 = _this._bufpos++;
        if (!(t6 < t5))
          return A.ioore(t4, t6);
        B.JSArray_methods.$indexSet(dst, i, t3 & 255 ^ t4[t6]);
      }
    }
  };
  A.CryptoException.prototype = {
    toString$0(_) {
      return this.message;
    }
  };
  A.SquareRootError.prototype = {};
  A.JacobiError.prototype = {};
  A.Blake2bConfig.prototype = {};
  A.BLAKE2b.prototype = {
    update$1(data) {
      var left, dataLength, t1, i, t2, dataPos, t3, _this = this;
      type$.List_int._as(data);
      if (_this._hash$_finished)
        throw A.wrapException(B.CryptoException_1Xx);
      left = 128 - _this._bufferLength;
      dataLength = data.length;
      if (dataLength === 0)
        return _this;
      if (dataLength > left) {
        for (t1 = _this._hash$_buffer, i = 0; i < left; ++i) {
          t2 = _this._bufferLength;
          if (!(i < data.length))
            return A.ioore(data, i);
          B.JSArray_methods.$indexSet(t1, t2 + i, data[i] & 255);
        }
        _this._processBlock$1(128);
        dataLength -= left;
        _this._bufferLength = 0;
        dataPos = left;
      } else
        dataPos = 0;
      for (t1 = _this._hash$_buffer; dataLength > 128;) {
        for (i = 0; i < 128; ++i) {
          t2 = dataPos + i;
          if (!(t2 >= 0 && t2 < data.length))
            return A.ioore(data, t2);
          B.JSArray_methods.$indexSet(t1, i, data[t2] & 255);
        }
        _this._processBlock$1(128);
        dataPos += 128;
        dataLength -= 128;
        _this._bufferLength = 0;
      }
      for (i = 0; i < dataLength; ++i) {
        t2 = _this._bufferLength;
        t3 = dataPos + i;
        if (!(t3 >= 0 && t3 < data.length))
          return A.ioore(data, t3);
        B.JSArray_methods.$indexSet(t1, t2 + i, data[t3] & 255);
      }
      _this._bufferLength += dataLength;
      return _this;
    },
    finish$1(out) {
      var i, t1, tmp, t2, _this = this, _4294967295 = 4294967295;
      type$.List_int._as(out);
      if (!_this._hash$_finished) {
        for (i = _this._bufferLength, t1 = _this._hash$_buffer; i < 128; ++i)
          B.JSArray_methods.$indexSet(t1, i, 0);
        t1 = _this._flag;
        B.JSArray_methods.$indexSet(t1, 0, _4294967295);
        B.JSArray_methods.$indexSet(t1, 1, _4294967295);
        _this._processBlock$1(_this._bufferLength);
        _this._hash$_finished = true;
      }
      tmp = A.List_List$filled(64, 0, false, type$.int);
      for (t1 = _this._hash$_state, t2 = t1.length, i = 0; i < 16; ++i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        A.writeUint32LE(t1[i], tmp, i * 4);
      }
      B.JSArray_methods.setRange$3(out, 0, out.length, tmp);
      return _this;
    },
    digest$0() {
      var out,
        t1 = this.__BLAKE2b_getDigestLength_F;
      t1 === $ && A.throwLateFieldNI("getDigestLength");
      out = A.List_List$filled(t1, 0, false, type$.int);
      this.finish$1(out);
      return out;
    },
    _g$13(v, al, bl, cl, dl, ah, bh, ch, dh, ml0, mh0, ml1, mh1) {
      var vla, vha, vlb, vhb, vlc, vhc, vld, vhd, t1, t2, w, x, y, w0, vld0, w1;
      type$.List_int._as(v);
      if (!(al < 32))
        return A.ioore(v, al);
      vla = v[al];
      if (!(ah < 32))
        return A.ioore(v, ah);
      vha = v[ah];
      if (!(bl < 32))
        return A.ioore(v, bl);
      vlb = v[bl];
      if (!(bh < 32))
        return A.ioore(v, bh);
      vhb = v[bh];
      if (!(cl < 32))
        return A.ioore(v, cl);
      vlc = v[cl];
      if (!(ch < 32))
        return A.ioore(v, ch);
      vhc = v[ch];
      if (!(dl < 32))
        return A.ioore(v, dl);
      vld = v[dl];
      if (!(dh < 32))
        return A.ioore(v, dh);
      vhd = v[dh];
      t1 = B.JSInt_methods._shrOtherPositive$1(vla, 16);
      t2 = B.JSInt_methods._shrOtherPositive$1(vha, 16);
      w = (vla & 65535) + (vlb & 65535);
      x = (t1 & 65535) + (B.JSInt_methods._shrOtherPositive$1(vlb, 16) & 65535) + (w >>> 16 & 65535);
      y = (vha & 65535) + (vhb & 65535) + (x >>> 16 & 65535);
      vha = y & 65535 | (t2 & 65535) + (B.JSInt_methods._shrOtherPositive$1(vhb, 16) & 65535) + (y >>> 16 & 65535) << 16;
      vla = w & 65535 | x << 16;
      w = (vla & 65535) + (ml0 & 65535);
      x = (vla >>> 16 & 65535) + (ml0 >>> 16 & 65535) + (w >>> 16 & 65535);
      y = (vha & 65535) + (mh0 & 65535) + (x >>> 16 & 65535);
      vha = y & 65535 | (vha >>> 16 & 65535) + (mh0 >>> 16 & 65535) + (y >>> 16 & 65535) << 16;
      vla = w & 65535 | x << 16;
      vld ^= vla;
      vhd ^= vha;
      w = (vlc & 65535) + (vhd & 65535);
      x = (B.JSInt_methods._shrOtherPositive$1(vlc, 16) & 65535) + (vhd >>> 16 & 65535) + (w >>> 16 & 65535);
      y = (vhc & 65535) + (vld & 65535) + (x >>> 16 & 65535);
      vhc = y & 65535 | (B.JSInt_methods._shrOtherPositive$1(vhc, 16) & 65535) + (vld >>> 16 & 65535) + (y >>> 16 & 65535) << 16;
      vlc = w & 65535 | x << 16;
      vlb ^= vlc;
      vhb ^= vhc;
      w = vlb << 8 | vhb >>> 24;
      vlb = vhb << 8 | vlb >>> 24;
      w0 = (vla & 65535) + (vlb & 65535);
      x = (vla >>> 16 & 65535) + (vlb >>> 16 & 65535) + (w0 >>> 16 & 65535);
      y = (vha & 65535) + (w & 65535) + (x >>> 16 & 65535);
      vha = y & 65535 | (vha >>> 16 & 65535) + (w >>> 16 & 65535) + (y >>> 16 & 65535) << 16;
      vla = w0 & 65535 | x << 16;
      w0 = (vla & 65535) + (ml1 & 65535);
      x = (vla >>> 16 & 65535) + (ml1 >>> 16 & 65535) + (w0 >>> 16 & 65535);
      y = (vha & 65535) + (mh1 & 65535) + (x >>> 16 & 65535);
      vha = (y & 65535 | (vha >>> 16 & 65535) + (mh1 >>> 16 & 65535) + (y >>> 16 & 65535) << 16) >>> 0;
      vla = (w0 & 65535 | x << 16) >>> 0;
      vld0 = vhd ^ vla;
      vhd = vld ^ vha;
      w0 = (vld0 << 16 | vhd >>> 16) >>> 0;
      vld = (vhd << 16 | vld0 >>> 16) >>> 0;
      w1 = (vlc & 65535) + (vld & 65535);
      x = (vlc >>> 16 & 65535) + (vld >>> 16 & 65535) + (w1 >>> 16 & 65535);
      y = (vhc & 65535) + (w0 & 65535) + (x >>> 16 & 65535);
      vhc = (y & 65535 | (vhc >>> 16 & 65535) + (w0 >>> 16 & 65535) + (y >>> 16 & 65535) << 16) >>> 0;
      vlc = (w1 & 65535 | x << 16) >>> 0;
      vlb ^= vlc;
      vhb = w ^ vhc;
      B.JSArray_methods.$indexSet(v, al, vla);
      B.JSArray_methods.$indexSet(v, ah, vha);
      B.JSArray_methods.$indexSet(v, bl, (vlb << 1 | vhb >>> 31) >>> 0);
      B.JSArray_methods.$indexSet(v, bh, (vhb << 1 | vlb >>> 31) >>> 0);
      B.JSArray_methods.$indexSet(v, cl, vlc);
      B.JSArray_methods.$indexSet(v, ch, vhc);
      B.JSArray_methods.$indexSet(v, dl, vld);
      B.JSArray_methods.$indexSet(v, dh, w0);
    },
    _processBlock$1($length) {
      var v, t1, t2, m, i, r, t3, t4, t5, _this = this;
      _this._incrementCounter$1($length);
      v = _this._vtmp;
      t1 = _this._hash$_state;
      B.JSArray_methods.setAll$2(v, 0, t1);
      B.JSArray_methods.setAll$2(v, 16, $.$get$_iv());
      t2 = _this._ctr;
      B.JSArray_methods.$indexSet(v, 24, (v[24] ^ t2[0]) >>> 0);
      B.JSArray_methods.$indexSet(v, 25, (v[25] ^ t2[1]) >>> 0);
      B.JSArray_methods.$indexSet(v, 26, (v[26] ^ t2[2]) >>> 0);
      B.JSArray_methods.$indexSet(v, 27, (v[27] ^ t2[3]) >>> 0);
      t2 = _this._flag;
      B.JSArray_methods.$indexSet(v, 28, (v[28] ^ t2[0]) >>> 0);
      B.JSArray_methods.$indexSet(v, 29, (v[29] ^ t2[1]) >>> 0);
      B.JSArray_methods.$indexSet(v, 30, (v[30] ^ t2[2]) >>> 0);
      B.JSArray_methods.$indexSet(v, 31, (v[31] ^ t2[3]) >>> 0);
      m = _this._mtmp;
      for (t2 = _this._hash$_buffer, i = 0; i < 32; ++i)
        B.JSArray_methods.$indexSet(m, i, A.readUint32LE(t2, i * 4));
      for (r = 0; r < 12; ++r) {
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 0);
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        t2 = m[t2];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 0) + 1;
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 1);
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 1) + 1;
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        _this._g$13(v, 0, 8, 16, 24, 1, 9, 17, 25, t2, t3, t4, m[t5]);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 2);
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        t5 = m[t5];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 2) + 1;
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 3);
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 3) + 1;
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        _this._g$13(v, 2, 10, 18, 26, 3, 11, 19, 27, t5, t4, t3, m[t2]);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 4);
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        t2 = m[t2];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 4) + 1;
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 5);
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 5) + 1;
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        _this._g$13(v, 4, 12, 20, 28, 5, 13, 21, 29, t2, t3, t4, m[t5]);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 6);
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        t5 = m[t5];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 6) + 1;
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 7);
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 7) + 1;
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        _this._g$13(v, 6, 14, 22, 30, 7, 15, 23, 31, t5, t4, t3, m[t2]);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 8);
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        t2 = m[t2];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 8) + 1;
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 9);
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 9) + 1;
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        _this._g$13(v, 0, 10, 20, 30, 1, 11, 21, 31, t2, t3, t4, m[t5]);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 10);
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        t5 = m[t5];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 10) + 1;
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 11);
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 11) + 1;
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        _this._g$13(v, 2, 12, 22, 24, 3, 13, 23, 25, t5, t4, t3, m[t2]);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 12);
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        t2 = m[t2];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 12) + 1;
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 13);
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 13) + 1;
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        _this._g$13(v, 4, 14, 16, 26, 5, 15, 17, 27, t2, t3, t4, m[t5]);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 14);
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        t5 = m[t5];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 14) + 1;
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 15);
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 15) + 1;
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        _this._g$13(v, 6, 8, 18, 28, 7, 9, 19, 29, t5, t4, t3, m[t2]);
      }
      for (t2 = t1.length, i = 0; i < 16; ++i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        B.JSArray_methods.$indexSet(t1, i, (t1[i] ^ v[i] ^ v[i + 16]) >>> 0);
      }
    },
    _incrementCounter$1($length) {
      var t1, i, a;
      for (t1 = this._ctr, i = 0; i < 3; ++i, $length = 1) {
        a = t1[i] + $length;
        B.JSArray_methods.$indexSet(t1, i, a >>> 0);
        if (t1[i] === a)
          return;
      }
    }
  };
  A._Keccack.prototype = {
    _Keccack$1(capacity) {
      if (capacity <= 0 || capacity > 128)
        throw A.wrapException(B.CryptoException_efd);
      this.___Keccack_blockSize_F !== $ && A.throwLateFieldAI("blockSize");
      this.___Keccack_blockSize_F = 200 - capacity;
    },
    reset$0() {
      var _this = this;
      A.zero(_this._sh);
      A.zero(_this._sl);
      A.zero(_this._hash$_state);
      _this._pos = 0;
      _this._hash$_finished = false;
      return _this;
    },
    update$1(data) {
      var t1, t2, t3, i, t4, t5, _this = this;
      type$.List_int._as(data);
      if (_this._hash$_finished)
        throw A.wrapException(B.CryptoException_nAM);
      for (t1 = _this._hash$_state, t2 = _this._sh, t3 = _this._sl, i = 0; i < data.length; ++i) {
        t4 = _this._pos++;
        if (!(t4 < 200))
          return A.ioore(t1, t4);
        B.JSArray_methods.$indexSet(t1, t4, t1[t4] ^ data[i] & 255);
        t4 = _this._pos;
        t5 = _this.___Keccack_blockSize_F;
        t5 === $ && A.throwLateFieldNI("blockSize");
        if (t4 >= t5) {
          A._keccakf(t2, t3, t1);
          _this._pos = 0;
        }
      }
      return _this;
    },
    _padAndPermute$1(paddingByte) {
      var _this = this,
        t1 = _this._hash$_state,
        t2 = _this._pos;
      if (!(t2 < 200))
        return A.ioore(t1, t2);
      B.JSArray_methods.$indexSet(t1, t2, t1[t2] ^ paddingByte);
      t2 = _this.___Keccack_blockSize_F;
      t2 === $ && A.throwLateFieldNI("blockSize");
      --t2;
      if (!(t2 >= 0 && t2 < 200))
        return A.ioore(t1, t2);
      B.JSArray_methods.$indexSet(t1, t2, t1[t2] ^ 128);
      A._keccakf(_this._sh, _this._sl, t1);
      _this._hash$_finished = true;
      _this._pos = 0;
    },
    _squeeze$1(dst) {
      var t1, t2, t3, t4, i, t5, t6, _this = this;
      type$.List_int._as(dst);
      if (!_this._hash$_finished)
        throw A.wrapException(B.CryptoException_k5E);
      for (t1 = dst.length, t2 = _this._hash$_state, t3 = _this._sh, t4 = _this._sl, i = 0; i < t1; ++i) {
        t5 = _this._pos;
        t6 = _this.___Keccack_blockSize_F;
        t6 === $ && A.throwLateFieldNI("blockSize");
        if (t5 === t6) {
          A._keccakf(t3, t4, t2);
          t5 = _this._pos = 0;
        }
        _this._pos = t5 + 1;
        if (!(t5 < 200))
          return A.ioore(t2, t5);
        B.JSArray_methods.$indexSet(dst, i, t2[t5]);
      }
    }
  };
  A.Keccack.prototype = {
    reset$0() {
      this.super$_Keccack$reset();
      return this;
    }
  };
  A.SHAKE.prototype = {
    reset$0() {
      this.super$_Keccack$reset();
      return this;
    },
    update$1(data) {
      this.super$_Keccack$update(type$.List_int._as(data));
      return this;
    }
  };
  A.SHAKE256.prototype = {};
  A.MD4.prototype = {
    finish$1(out) {
      var t1, i, _this = this;
      type$.List_int._as(out);
      if (!_this._hash$_finished) {
        _this._finalize$0();
        _this._iterate$0();
        _this._hash$_finished = true;
      }
      for (t1 = _this._hash$_state, i = 0; i < 4; ++i)
        A.writeUint32LE(t1[i], out, i * 4);
      return _this;
    },
    _finalize$0() {
      var contentsLength, t2, i, lengthInBits, offset, highBits,
        t1 = this._hash$_buffer;
      B.JSArray_methods.add$1(t1, 128);
      contentsLength = this._lengthInBytes + 1 + 8;
      for (t2 = ((contentsLength + 64 - 1 & -64) >>> 0) - contentsLength, i = 0; i < t2; ++i)
        B.JSArray_methods.add$1(t1, 0);
      lengthInBits = this._lengthInBytes * 8;
      offset = t1.length;
      B.JSArray_methods.addAll$1(t1, A.List_List$filled(8, 0, false, type$.int));
      highBits = B.JSInt_methods._tdivFast$1(lengthInBits, 4294967296);
      A.writeUint32LE(lengthInBits >>> 0, t1, offset);
      A.writeUint32LE(highBits, t1, offset + 4);
    },
    reset$0() {
      var _this = this,
        t1 = _this._hash$_state;
      B.JSArray_methods.$indexSet(t1, 0, 1732584193);
      B.JSArray_methods.$indexSet(t1, 1, 4023233417);
      B.JSArray_methods.$indexSet(t1, 2, 2562383102);
      B.JSArray_methods.$indexSet(t1, 3, 271733878);
      _this._hash$_finished = false;
      _this._lengthInBytes = 0;
      return _this;
    },
    _iterate$0() {
      var t2, t3, t4, i, t5, j, a, b, c, d, t6,
        t1 = this._hash$_buffer,
        pendingDataChunks = t1.length / 64 | 0;
      for (t2 = this._currentChunk, t3 = type$.List_int, t4 = this._hash$_state, i = 0; i < pendingDataChunks; ++i) {
        for (t5 = i * 64, j = 0; j < 16; ++j)
          B.JSArray_methods.$indexSet(t2, j, A.readUint32LE(t1, t5 + j * 4));
        t3._as(t2);
        a = t4[0];
        b = t4[1];
        c = t4[2];
        d = t4[3];
        t5 = t2[0];
        t6 = A.MD4__ff(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 0;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[1];
        t6 = A.MD4__ff(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 0;
        d = (t5 << 7 | t5 >>> 0 >>> 25) >>> 0;
        t5 = t2[2];
        t6 = A.MD4__ff(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 0;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[3];
        t6 = A.MD4__ff(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 0;
        b = (t5 << 19 | t5 >>> 0 >>> 13) >>> 0;
        t5 = t2[4];
        t6 = A.MD4__ff(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 0;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[5];
        t6 = A.MD4__ff(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 0;
        d = (t5 << 7 | t5 >>> 0 >>> 25) >>> 0;
        t5 = t2[6];
        t6 = A.MD4__ff(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 0;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[7];
        t6 = A.MD4__ff(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 0;
        b = (t5 << 19 | t5 >>> 0 >>> 13) >>> 0;
        t5 = t2[8];
        t6 = A.MD4__ff(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 0;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[9];
        t6 = A.MD4__ff(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 0;
        d = (t5 << 7 | t5 >>> 0 >>> 25) >>> 0;
        t5 = t2[10];
        t6 = A.MD4__ff(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 0;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[11];
        t6 = A.MD4__ff(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 0;
        b = (t5 << 19 | t5 >>> 0 >>> 13) >>> 0;
        t5 = t2[12];
        t6 = A.MD4__ff(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 0;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[13];
        t6 = A.MD4__ff(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 0;
        d = (t5 << 7 | t5 >>> 0 >>> 25) >>> 0;
        t5 = t2[14];
        t6 = A.MD4__ff(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 0;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[15];
        t6 = A.MD4__ff(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 0;
        b = (t5 << 19 | t5 >>> 0 >>> 13) >>> 0;
        t5 = t2[0];
        t6 = A.MD4__gg(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1518500249;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[4];
        t6 = A.MD4__gg(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1518500249;
        d = (t5 << 5 | t5 >>> 0 >>> 27) >>> 0;
        t5 = t2[8];
        t6 = A.MD4__gg(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1518500249;
        c = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[12];
        t6 = A.MD4__gg(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1518500249;
        b = (t5 << 13 | t5 >>> 0 >>> 19) >>> 0;
        t5 = t2[1];
        t6 = A.MD4__gg(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1518500249;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[5];
        t6 = A.MD4__gg(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1518500249;
        d = (t5 << 5 | t5 >>> 0 >>> 27) >>> 0;
        t5 = t2[9];
        t6 = A.MD4__gg(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1518500249;
        c = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[13];
        t6 = A.MD4__gg(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1518500249;
        b = (t5 << 13 | t5 >>> 0 >>> 19) >>> 0;
        t5 = t2[2];
        t6 = A.MD4__gg(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1518500249;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[6];
        t6 = A.MD4__gg(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1518500249;
        d = (t5 << 5 | t5 >>> 0 >>> 27) >>> 0;
        t5 = t2[10];
        t6 = A.MD4__gg(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1518500249;
        c = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[14];
        t6 = A.MD4__gg(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1518500249;
        b = (t5 << 13 | t5 >>> 0 >>> 19) >>> 0;
        t5 = t2[3];
        t6 = A.MD4__gg(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1518500249;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[7];
        t6 = A.MD4__gg(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1518500249;
        d = (t5 << 5 | t5 >>> 0 >>> 27) >>> 0;
        t5 = t2[11];
        t6 = A.MD4__gg(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1518500249;
        c = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[15];
        t6 = A.MD4__gg(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1518500249;
        b = (t5 << 13 | t5 >>> 0 >>> 19) >>> 0;
        t5 = t2[0];
        t6 = A.MD4__hh(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1859775393;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[8];
        t6 = A.MD4__hh(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1859775393;
        d = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[4];
        t6 = A.MD4__hh(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1859775393;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[12];
        t6 = A.MD4__hh(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1859775393;
        b = (t5 << 15 | t5 >>> 0 >>> 17) >>> 0;
        t5 = t2[2];
        t6 = A.MD4__hh(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1859775393;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[10];
        t6 = A.MD4__hh(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1859775393;
        d = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[6];
        t6 = A.MD4__hh(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1859775393;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[14];
        t6 = A.MD4__hh(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1859775393;
        b = (t5 << 15 | t5 >>> 0 >>> 17) >>> 0;
        t5 = t2[1];
        t6 = A.MD4__hh(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1859775393;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[9];
        t6 = A.MD4__hh(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1859775393;
        d = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[5];
        t6 = A.MD4__hh(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1859775393;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[13];
        t6 = A.MD4__hh(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1859775393;
        b = (t5 << 15 | t5 >>> 0 >>> 17) >>> 0;
        t5 = t2[3];
        t6 = A.MD4__hh(b, c, d);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = a + t6 + t5 + 1859775393;
        a = (t5 << 3 | t5 >>> 0 >>> 29) >>> 0;
        t5 = t2[11];
        t6 = A.MD4__hh(a, b, c);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = d + t6 + t5 + 1859775393;
        d = (t5 << 9 | t5 >>> 0 >>> 23) >>> 0;
        t5 = t2[7];
        t6 = A.MD4__hh(d, a, b);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = c + t6 + t5 + 1859775393;
        c = (t5 << 11 | t5 >>> 0 >>> 21) >>> 0;
        t5 = t2[15];
        t6 = A.MD4__hh(c, d, a);
        if (typeof t6 !== "number")
          return A.iae(t6);
        t5 = b + t6 + t5 + 1859775393;
        B.JSArray_methods.$indexSet(t4, 0, t4[0] + a >>> 0);
        B.JSArray_methods.$indexSet(t4, 1, t4[1] + ((t5 << 15 | t5 >>> 0 >>> 17) >>> 0) >>> 0);
        B.JSArray_methods.$indexSet(t4, 2, t4[2] + c >>> 0);
        B.JSArray_methods.$indexSet(t4, 3, t4[3] + d >>> 0);
      }
      B.JSArray_methods.removeRange$2(t1, 0, pendingDataChunks * 64);
    }
  };
  A.RIPEMD160.prototype = {};
  A._RIPEMD.prototype = {
    finish$1(out) {
      var i, t1, _this = this;
      type$.List_int._as(out);
      if (!_this._hash$_finished) {
        _this._finalize$0();
        _this._iterate$0();
        _this._hash$_finished = true;
      }
      i = 0;
      while (true) {
        t1 = _this.___RIPEMD__state_F;
        t1 === $ && A.throwLateFieldNI("_state");
        if (!(i < t1.length))
          break;
        A.writeUint32LE(t1[i], out, i * 4);
        ++i;
      }
      return _this;
    },
    _finalize$0() {
      var contentsLength, t2, i, lengthInBits, offset, highBits,
        t1 = this._hash$_buffer;
      B.JSArray_methods.add$1(t1, 128);
      contentsLength = this._lengthInBytes + 1 + 8;
      for (t2 = ((contentsLength + 64 - 1 & -64) >>> 0) - contentsLength, i = 0; i < t2; ++i)
        B.JSArray_methods.add$1(t1, 0);
      lengthInBits = this._lengthInBytes * 8;
      offset = t1.length;
      B.JSArray_methods.addAll$1(t1, A.List_List$filled(8, 0, false, type$.int));
      highBits = B.JSInt_methods._tdivFast$1(lengthInBits, 4294967296);
      A.writeUint32LE(lengthInBits >>> 0, t1, offset);
      A.writeUint32LE(highBits, t1, offset + 4);
    },
    reset$0() {
      var _this = this,
        t1 = _this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      B.JSArray_methods.setAll$2(t1, 0, A._RidempUtils_readState(t1.length * 4));
      _this._hash$_finished = false;
      _this._lengthInBytes = 0;
      return _this;
    },
    _iterate$0() {
      var t2, i, t3, j,
        t1 = this._hash$_buffer,
        pendingDataChunks = t1.length / 64 | 0;
      for (t2 = this._currentChunk, i = 0; i < pendingDataChunks; ++i) {
        for (t3 = i * 64, j = 0; j < 16; ++j)
          B.JSArray_methods.$indexSet(t2, j, A.readUint32LE(t1, t3 + j * 4));
        this._proccess$1(t2);
      }
      B.JSArray_methods.removeRange$2(t1, 0, pendingDataChunks * 64);
    },
    _proccess$1(chunk) {
      var t1, _this = this;
      type$.List_int._as(chunk);
      t1 = _this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      switch (t1.length * 4) {
        case 16:
          return _this._proccess128$1(chunk);
        case 20:
          return _this._proccess160$1(chunk);
        case 32:
          return _this._proccess256$1(chunk);
        default:
          return _this._proccess320$1(chunk);
      }
    },
    _proccess128$1(chunk) {
      var t1, t2, al, bl, cl, dl, dr, cr, br, ar, cl0, bl0, i, t, modShift;
      type$.List_int._as(chunk);
      t1 = this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      al = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      bl = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      cl = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      dl = t1[3];
      for (dr = dl, cr = cl, br = bl, ar = al, cl0 = cr, bl0 = br, i = 0; i < 64; ++i, ar = dr, dr = cr, cr = br, br = t2, al = dl, dl = cl0, cl0 = bl0, bl0 = t) {
        t2 = B.List_5lr[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t = (al + chunk[t2] >>> 0) + A._RidempUtils_T(i, bl0, cl0, dl) >>> 0;
        modShift = B.List_eXZ[i] & 31;
        t = (t << modShift | B.JSInt_methods._shrReceiverPositive$1(t, 32 - modShift)) >>> 0;
        t2 = B.List_Jr0[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t2 = (ar + chunk[t2] >>> 0) + A._RidempUtils_t64(i, br, cr, dr) >>> 0;
        modShift = B.List_Wl3[i] & 31;
        t2 = (t2 << modShift | B.JSInt_methods._shrReceiverPositive$1(t2, 32 - modShift)) >>> 0;
      }
      B.JSArray_methods.$indexSet(t1, 1, (cl + dl >>> 0) + ar >>> 0);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      B.JSArray_methods.$indexSet(t1, 2, (t1[3] + al >>> 0) + br >>> 0);
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      B.JSArray_methods.$indexSet(t1, 3, (t1[0] + bl0 >>> 0) + cr >>> 0);
      B.JSArray_methods.$indexSet(t1, 0, (bl + cl0 >>> 0) + dr >>> 0);
    },
    _proccess320$1(chunk) {
      var t1, t2, al, bl, cl, dl, el, ar, br, cr, dr, er, al0, i, t, modShift, dl0, dr0;
      type$.List_int._as(chunk);
      t1 = this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      al = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      bl = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      cl = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      dl = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      el = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      ar = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      br = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      cr = t1[7];
      if (8 >= t2)
        return A.ioore(t1, 8);
      dr = t1[8];
      if (9 >= t2)
        return A.ioore(t1, 9);
      er = t1[9];
      for (al0 = al, i = 0; i < 80; ++i) {
        t2 = B.List_5lr[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t = (al0 + chunk[t2] >>> 0) + A._RidempUtils_T(i, bl, cl, dl) >>> 0;
        modShift = B.List_eXZ[i] & 31;
        t = ((t << modShift | B.JSInt_methods._shrReceiverPositive$1(t, 32 - modShift)) >>> 0) + el >>> 0;
        dl0 = (cl << 10 | cl >>> 0 >>> 22) >>> 0;
        t2 = B.List_Jr0[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t2 = (ar + chunk[t2] >>> 0) + A._RidempUtils_t80(i, br, cr, dr) >>> 0;
        modShift = B.List_Wl3[i] & 31;
        t2 = ((t2 << modShift | B.JSInt_methods._shrReceiverPositive$1(t2, 32 - modShift)) >>> 0) + er >>> 0;
        dr0 = (cr << 10 | cr >>> 0 >>> 22) >>> 0;
        switch (i) {
          case 15:
            cr = br;
            br = t;
            ar = er;
            er = dr;
            dr = dr0;
            cl = bl;
            bl = t2;
            al0 = el;
            el = dl;
            dl = dl0;
            break;
          case 31:
            cr = br;
            br = t2;
            ar = er;
            er = dr;
            dr = dl0;
            cl = bl;
            bl = t;
            al0 = el;
            el = dl;
            dl = dr0;
            break;
          case 47:
            cr = br;
            br = t2;
            ar = el;
            el = dl;
            dl = dl0;
            cl = bl;
            bl = t;
            al0 = er;
            er = dr;
            dr = dr0;
            break;
          case 63:
            cr = bl;
            bl = t;
            ar = er;
            er = dr;
            dr = dr0;
            cl = br;
            br = t2;
            al0 = el;
            el = dl;
            dl = dl0;
            break;
          case 79:
            cr = br;
            br = t2;
            ar = er;
            er = dl;
            dl = dl0;
            cl = bl;
            bl = t;
            al0 = el;
            el = dr;
            dr = dr0;
            break;
          default:
            cr = br;
            br = t2;
            ar = er;
            er = dr;
            dr = dr0;
            cl = bl;
            bl = t;
            al0 = el;
            el = dl;
            dl = dl0;
        }
      }
      B.JSArray_methods.$indexSet(t1, 0, al + al0 >>> 0);
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      B.JSArray_methods.$indexSet(t1, 1, t1[1] + bl >>> 0);
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      B.JSArray_methods.$indexSet(t1, 2, t1[2] + cl >>> 0);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      B.JSArray_methods.$indexSet(t1, 3, t1[3] + dl >>> 0);
      if (4 >= t1.length)
        return A.ioore(t1, 4);
      B.JSArray_methods.$indexSet(t1, 4, t1[4] + el >>> 0);
      if (5 >= t1.length)
        return A.ioore(t1, 5);
      B.JSArray_methods.$indexSet(t1, 5, t1[5] + ar >>> 0);
      if (6 >= t1.length)
        return A.ioore(t1, 6);
      B.JSArray_methods.$indexSet(t1, 6, t1[6] + br >>> 0);
      if (7 >= t1.length)
        return A.ioore(t1, 7);
      B.JSArray_methods.$indexSet(t1, 7, t1[7] + cr >>> 0);
      if (8 >= t1.length)
        return A.ioore(t1, 8);
      B.JSArray_methods.$indexSet(t1, 8, t1[8] + dr >>> 0);
      if (9 >= t1.length)
        return A.ioore(t1, 9);
      B.JSArray_methods.$indexSet(t1, 9, t1[9] + er >>> 0);
    },
    _proccess256$1(chunk) {
      var t1, t2, al, bl, cl, dl, ar, br, cr, dr, al0, i, t, modShift;
      type$.List_int._as(chunk);
      t1 = this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      al = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      bl = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      cl = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      dl = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      ar = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      br = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      cr = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      dr = t1[7];
      for (al0 = al, i = 0; i < 64; ++i) {
        t2 = B.List_5lr[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t = (al0 + chunk[t2] >>> 0) + A._RidempUtils_T(i, bl, cl, dl) >>> 0;
        modShift = B.List_eXZ[i] & 31;
        t = (t << modShift | B.JSInt_methods._shrReceiverPositive$1(t, 32 - modShift)) >>> 0;
        t2 = B.List_Jr0[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t2 = (ar + chunk[t2] >>> 0) + A._RidempUtils_t64(i, br, cr, dr) >>> 0;
        modShift = B.List_Wl3[i] & 31;
        t2 = (t2 << modShift | B.JSInt_methods._shrReceiverPositive$1(t2, 32 - modShift)) >>> 0;
        switch (i) {
          case 15:
            ar = dl;
            dl = cl;
            cl = bl;
            bl = t;
            al0 = dr;
            dr = cr;
            cr = br;
            br = t2;
            break;
          case 31:
            ar = dr;
            dr = cr;
            cr = br;
            br = t;
            al0 = dl;
            dl = cl;
            cl = bl;
            bl = t2;
            break;
          case 47:
            ar = dr;
            dr = cr;
            cr = bl;
            bl = t;
            al0 = dl;
            dl = cl;
            cl = br;
            br = t2;
            break;
          case 63:
            ar = dr;
            dr = cl;
            cl = bl;
            bl = t;
            al0 = dl;
            dl = cr;
            cr = br;
            br = t2;
            break;
          default:
            ar = dr;
            dr = cr;
            cr = br;
            br = t2;
            al0 = dl;
            dl = cl;
            cl = bl;
            bl = t;
        }
      }
      B.JSArray_methods.$indexSet(t1, 0, al + al0 >>> 0);
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      B.JSArray_methods.$indexSet(t1, 1, t1[1] + bl >>> 0);
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      B.JSArray_methods.$indexSet(t1, 2, t1[2] + cl >>> 0);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      B.JSArray_methods.$indexSet(t1, 3, t1[3] + dl >>> 0);
      if (4 >= t1.length)
        return A.ioore(t1, 4);
      B.JSArray_methods.$indexSet(t1, 4, t1[4] + ar >>> 0);
      if (5 >= t1.length)
        return A.ioore(t1, 5);
      B.JSArray_methods.$indexSet(t1, 5, t1[5] + br >>> 0);
      if (6 >= t1.length)
        return A.ioore(t1, 6);
      B.JSArray_methods.$indexSet(t1, 6, t1[6] + cr >>> 0);
      if (7 >= t1.length)
        return A.ioore(t1, 7);
      B.JSArray_methods.$indexSet(t1, 7, t1[7] + dr >>> 0);
    },
    _proccess160$1(chunk) {
      var t1, t2, al, bl, cl, dl, el, er, dr, cr, br, ar, cl0, bl0, i, t, modShift, dl0, dr0;
      type$.List_int._as(chunk);
      t1 = this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      al = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      bl = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      cl = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      dl = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      el = t1[4];
      for (er = el, dr = dl, cr = cl, br = bl, ar = al, cl0 = cr, bl0 = br, i = 0; i < 80; ++i, cr = br, br = t2, ar = er, er = dr, dr = dr0, cl0 = bl0, bl0 = t, al = el, el = dl, dl = dl0) {
        t2 = B.List_5lr[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t = (al + chunk[t2] >>> 0) + A._RidempUtils_T(i, bl0, cl0, dl) >>> 0;
        modShift = B.List_eXZ[i] & 31;
        t = ((t << modShift | B.JSInt_methods._shrReceiverPositive$1(t, 32 - modShift)) >>> 0) + el >>> 0;
        dl0 = (cl0 << 10 | cl0 >>> 0 >>> 22) >>> 0;
        t2 = B.List_Jr0[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t2 = (ar + chunk[t2] >>> 0) + A._RidempUtils_t80(i, br, cr, dr);
        modShift = B.List_Wl3[i] & 31;
        t2 = ((t2 << modShift | B.JSInt_methods._shrReceiverPositive$1(t2 >>> 0, 32 - modShift)) >>> 0) + er >>> 0;
        dr0 = (cr << 10 | cr >>> 0 >>> 22) >>> 0;
      }
      B.JSArray_methods.$indexSet(t1, 1, (cl + dl >>> 0) + er >>> 0);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      B.JSArray_methods.$indexSet(t1, 2, (t1[3] + el >>> 0) + ar >>> 0);
      if (4 >= t1.length)
        return A.ioore(t1, 4);
      B.JSArray_methods.$indexSet(t1, 3, (t1[4] + al >>> 0) + br >>> 0);
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      B.JSArray_methods.$indexSet(t1, 4, (t1[0] + bl0 >>> 0) + cr >>> 0);
      B.JSArray_methods.$indexSet(t1, 0, (bl + cl0 >>> 0) + dr >>> 0);
    }
  };
  A.SHA256.prototype = {
    update$1(data) {
      var dataLength, dataPos, t1, t2, dataPos0, _this = this;
      type$.List_int._as(data);
      if (_this._hash$_finished)
        throw A.wrapException(B.CryptoException_VyX);
      dataLength = data.length;
      _this._bytesHashed += dataLength;
      dataPos = 0;
      if (_this._bufferLength > 0) {
        t1 = _this._hash$_buffer;
        while (true) {
          t2 = _this._bufferLength;
          if (!(t2 < 64 && dataLength > 0))
            break;
          _this._bufferLength = t2 + 1;
          dataPos0 = dataPos + 1;
          if (!(dataPos < data.length))
            return A.ioore(data, dataPos);
          B.JSArray_methods.$indexSet(t1, t2, data[dataPos] & 255);
          --dataLength;
          dataPos = dataPos0;
        }
        if (t2 === 64) {
          _this._hashBlocks$5(_this._temp, _this._hash$_state, t1, 0, 64);
          _this._bufferLength = 0;
        }
      }
      if (dataLength >= 64) {
        dataPos = _this._hashBlocks$5(_this._temp, _this._hash$_state, data, dataPos, dataLength);
        dataLength = B.JSInt_methods.$mod(dataLength, 64);
      }
      for (t1 = _this._hash$_buffer; dataLength > 0; dataPos = dataPos0) {
        t2 = _this._bufferLength++;
        dataPos0 = dataPos + 1;
        if (!(dataPos < data.length))
          return A.ioore(data, dataPos);
        B.JSArray_methods.$indexSet(t1, t2, data[dataPos] & 255);
        --dataLength;
      }
      return _this;
    },
    finish$1(out) {
      var bytesHashed, left, t1, padLength, t2, i, t3, _this = this;
      type$.List_int._as(out);
      if (!_this._hash$_finished) {
        bytesHashed = _this._bytesHashed;
        left = _this._bufferLength;
        t1 = B.JSInt_methods._tdivFast$1(bytesHashed, 536870912);
        padLength = B.JSInt_methods.$mod(bytesHashed, 64) < 56 ? 64 : 128;
        t2 = _this._hash$_buffer;
        B.JSArray_methods.$indexSet(t2, left, 128);
        for (i = left + 1, t3 = padLength - 8; i < t3; ++i)
          B.JSArray_methods.$indexSet(t2, i, 0);
        A.writeUint32BE(t1 >>> 0, t2, t3);
        A.writeUint32BE(bytesHashed << 3 >>> 0, t2, padLength - 4);
        _this._hashBlocks$5(_this._temp, _this._hash$_state, t2, 0, padLength);
        _this._hash$_finished = true;
      }
      for (t1 = _this._hash$_state, i = 0; i < 8; ++i)
        A.writeUint32BE(t1[i], out, i * 4);
      return _this;
    },
    reset$0() {
      var _this = this,
        t1 = _this._hash$_state;
      B.JSArray_methods.$indexSet(t1, 0, 1779033703);
      B.JSArray_methods.$indexSet(t1, 1, 3144134277);
      B.JSArray_methods.$indexSet(t1, 2, 1013904242);
      B.JSArray_methods.$indexSet(t1, 3, 2773480762);
      B.JSArray_methods.$indexSet(t1, 4, 1359893119);
      B.JSArray_methods.$indexSet(t1, 5, 2600822924);
      B.JSArray_methods.$indexSet(t1, 6, 528734635);
      B.JSArray_methods.$indexSet(t1, 7, 1541459225);
      _this._bytesHashed = _this._bufferLength = 0;
      _this._hash$_finished = false;
      return _this;
    },
    _hashBlocks$5(w, v, p, pos, len) {
      var t2, a, b, c, d, e, f, g, h, i, u, u0, t10, e0, a0,
        t1 = type$.List_int;
      t1._as(w);
      t1._as(v);
      t1._as(p);
      for (t1 = this._k, t2 = t1.length; len >= 64;) {
        a = v[0];
        b = v[1];
        c = v[2];
        d = v[3];
        e = v[4];
        f = v[5];
        g = v[6];
        h = v[7];
        for (i = 0; i < 16; ++i)
          B.JSArray_methods.$indexSet(w, i, A.readUint32BE(p, pos + i * 4));
        for (i = 16; i < 64; ++i) {
          u = w[i - 2];
          u0 = w[i - 15];
          B.JSArray_methods.$indexSet(w, i, (((((u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10) >>> 0) + w[i - 7] >>> 0) + (((u0 >>> 7 | u0 << 25) ^ (u0 >>> 18 | u0 << 14) ^ u0 >>> 3) >>> 0) >>> 0) + w[i - 16] >>> 0);
        }
        for (i = 0; i < 64; ++i, h = g, g = f, f = e, e = e0, d = c, c = b, b = a, a = a0) {
          if (!(i < t2))
            return A.ioore(t1, i);
          t10 = ((((e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7)) >>> 0) + ((e & f ^ ~e & g) >>> 0) >>> 0) + ((h + t1[i] >>> 0) + w[i] >>> 0) >>> 0;
          e0 = d + t10 >>> 0;
          a0 = t10 + ((((a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10)) >>> 0) + ((a & b ^ a & c ^ b & c) >>> 0) >>> 0) >>> 0;
        }
        B.JSArray_methods.$indexSet(v, 0, v[0] + a >>> 0);
        B.JSArray_methods.$indexSet(v, 1, v[1] + b >>> 0);
        B.JSArray_methods.$indexSet(v, 2, v[2] + c >>> 0);
        B.JSArray_methods.$indexSet(v, 3, v[3] + d >>> 0);
        B.JSArray_methods.$indexSet(v, 4, v[4] + e >>> 0);
        B.JSArray_methods.$indexSet(v, 5, v[5] + f >>> 0);
        B.JSArray_methods.$indexSet(v, 6, v[6] + g >>> 0);
        B.JSArray_methods.$indexSet(v, 7, v[7] + h >>> 0);
        pos += 64;
        len -= 64;
      }
      return pos;
    }
  };
  A.Poly1305.prototype = {
    _blocks$3(m, mpos, bytes) {
      var hibit, t1, h0, h1, h2, h3, h4, h5, h6, h7, h8, h9, t2, r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t00, t20, t30, t40, t50, t60, t70, d0, d00, d1, d10, d2, d20, d21, d3, d30, d31, d4, d40, d41, d5, d50, d51, d6, d60, d61, d7, d70, d71, d8, d80, d81, d9, d90, c;
      type$.List_int._as(m);
      hibit = this._fin !== 0 ? 0 : 2048;
      t1 = this._h;
      h0 = t1[0];
      h1 = t1[1];
      h2 = t1[2];
      h3 = t1[3];
      h4 = t1[4];
      h5 = t1[5];
      h6 = t1[6];
      h7 = t1[7];
      h8 = t1[8];
      h9 = t1[9];
      t2 = this._r;
      r0 = t2[0];
      r1 = t2[1];
      r2 = t2[2];
      r3 = t2[3];
      r4 = t2[4];
      r5 = t2[5];
      r6 = t2[6];
      r7 = t2[7];
      r8 = t2[8];
      r9 = t2[9];
      for (t2 = m.length, t3 = 5 * r9, t4 = 5 * r8, t5 = 5 * r7, t6 = 5 * r6, t7 = 5 * r5, t8 = 5 * r4, t9 = 5 * r3, t10 = 5 * r2, t11 = 5 * r1; bytes >= 16; h9 = d9, h8 = d81, h7 = d71, h6 = d61, h5 = d51, h4 = d41, h3 = d31, h2 = d21, h1 = d1, h0 = d0) {
        if (!(mpos >= 0 && mpos < t2))
          return A.ioore(m, mpos);
        t12 = m[mpos];
        t13 = mpos + 1;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t00 = t12 | m[t13] << 8;
        h0 += t00 & 8191;
        t13 = mpos + 2;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t13 = m[t13];
        t12 = mpos + 3;
        if (!(t12 < t2))
          return A.ioore(m, t12);
        t12 = t13 | m[t12] << 8;
        h1 += (t00 >>> 13 | t12 << 3) & 8191;
        t00 = mpos + 4;
        if (!(t00 < t2))
          return A.ioore(m, t00);
        t00 = m[t00];
        t13 = mpos + 5;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t20 = t00 | m[t13] << 8;
        h2 += (t12 >>> 10 | t20 << 6) & 8191;
        t12 = mpos + 6;
        if (!(t12 < t2))
          return A.ioore(m, t12);
        t12 = m[t12];
        t13 = mpos + 7;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t30 = t12 | m[t13] << 8;
        h3 += (t20 >>> 7 | t30 << 9) & 8191;
        t20 = mpos + 8;
        if (!(t20 < t2))
          return A.ioore(m, t20);
        t20 = m[t20];
        t13 = mpos + 9;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t40 = t20 | m[t13] << 8;
        h4 += (t30 >>> 4 | t40 << 12) & 8191;
        h5 += t40 >>> 1 & 8191;
        t30 = mpos + 10;
        if (!(t30 < t2))
          return A.ioore(m, t30);
        t30 = m[t30];
        t13 = mpos + 11;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t50 = t30 | m[t13] << 8;
        h6 += (t40 >>> 14 | t50 << 2) & 8191;
        t40 = mpos + 12;
        if (!(t40 < t2))
          return A.ioore(m, t40);
        t40 = m[t40];
        t13 = mpos + 13;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t60 = t40 | m[t13] << 8;
        h7 += (t50 >>> 11 | t60 << 5) & 8191;
        t50 = mpos + 14;
        if (!(t50 < t2))
          return A.ioore(m, t50);
        t50 = m[t50];
        t13 = mpos + 15;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t70 = t50 | m[t13] << 8;
        h8 += (t60 >>> 8 | t70 << 8) & 8191;
        h9 += (t70 >>> 5 | hibit) >>> 0;
        d0 = h0 * r0 + h1 * t3 + h2 * t4 + h3 * t5 + h4 * t6;
        d00 = (d0 & 8191) + h5 * t7 + h6 * t8 + h7 * t9 + h8 * t10 + h9 * t11;
        d1 = B.JSInt_methods._shrOtherPositive$1(d0, 13) + B.JSInt_methods._shrOtherPositive$1(d00, 13) + h0 * r1 + h1 * r0 + h2 * t3 + h3 * t4 + h4 * t5;
        d10 = (d1 & 8191) + h5 * t6 + h6 * t7 + h7 * t8 + h8 * t9 + h9 * t10;
        d2 = B.JSInt_methods._shrOtherPositive$1(d1, 13) + B.JSInt_methods._shrOtherPositive$1(d10, 13) + h0 * r2 + h1 * r1 + h2 * r0 + h3 * t3 + h4 * t4;
        d20 = (d2 & 8191) + h5 * t5 + h6 * t6 + h7 * t7 + h8 * t8 + h9 * t9;
        d21 = d20 & 8191;
        d3 = B.JSInt_methods._shrOtherPositive$1(d2, 13) + B.JSInt_methods._shrOtherPositive$1(d20, 13) + h0 * r3 + h1 * r2 + h2 * r1 + h3 * r0 + h4 * t3;
        d30 = (d3 & 8191) + h5 * t4 + h6 * t5 + h7 * t6 + h8 * t7 + h9 * t8;
        d31 = d30 & 8191;
        d4 = B.JSInt_methods._shrOtherPositive$1(d3, 13) + B.JSInt_methods._shrOtherPositive$1(d30, 13) + h0 * r4 + h1 * r3 + h2 * r2 + h3 * r1 + h4 * r0;
        d40 = (d4 & 8191) + h5 * t3 + h6 * t4 + h7 * t5 + h8 * t6 + h9 * t7;
        d41 = d40 & 8191;
        d5 = B.JSInt_methods._shrOtherPositive$1(d4, 13) + B.JSInt_methods._shrOtherPositive$1(d40, 13) + h0 * r5 + h1 * r4 + h2 * r3 + h3 * r2 + h4 * r1;
        d50 = (d5 & 8191) + h5 * r0 + h6 * t3 + h7 * t4 + h8 * t5 + h9 * t6;
        d51 = d50 & 8191;
        d6 = B.JSInt_methods._shrOtherPositive$1(d5, 13) + B.JSInt_methods._shrOtherPositive$1(d50, 13) + h0 * r6 + h1 * r5 + h2 * r4 + h3 * r3 + h4 * r2;
        d60 = (d6 & 8191) + h5 * r1 + h6 * r0 + h7 * t3 + h8 * t4 + h9 * t5;
        d61 = d60 & 8191;
        d7 = B.JSInt_methods._shrOtherPositive$1(d6, 13) + B.JSInt_methods._shrOtherPositive$1(d60, 13) + h0 * r7 + h1 * r6 + h2 * r5 + h3 * r4 + h4 * r3;
        d70 = (d7 & 8191) + h5 * r2 + h6 * r1 + h7 * r0 + h8 * t3 + h9 * t4;
        d71 = d70 & 8191;
        d8 = B.JSInt_methods._shrOtherPositive$1(d7, 13) + B.JSInt_methods._shrOtherPositive$1(d70, 13) + h0 * r8 + h1 * r7 + h2 * r6 + h3 * r5 + h4 * r4;
        d80 = (d8 & 8191) + h5 * r3 + h6 * r2 + h7 * r1 + h8 * r0 + h9 * t3;
        d81 = d80 & 8191;
        d9 = B.JSInt_methods._shrOtherPositive$1(d8, 13) + B.JSInt_methods._shrOtherPositive$1(d80, 13) + h0 * r9 + h1 * r8 + h2 * r7 + h3 * r6 + h4 * r5;
        d90 = (d9 & 8191) + h5 * r4 + h6 * r3 + h7 * r2 + h8 * r1 + h9 * r0;
        c = B.JSInt_methods._shrOtherPositive$1(d9, 13) + B.JSInt_methods._shrOtherPositive$1(d90, 13);
        d9 = d90 & 8191;
        c = (((c << 2 >>> 0) + c | 0) >>> 0) + (d00 & 8191) | 0;
        d0 = c & 8191;
        d1 = (d10 & 8191) + (c >>> 13);
        mpos += 16;
        bytes -= 16;
      }
      B.JSArray_methods.$indexSet(t1, 0, h0);
      B.JSArray_methods.$indexSet(t1, 1, h1);
      B.JSArray_methods.$indexSet(t1, 2, h2);
      B.JSArray_methods.$indexSet(t1, 3, h3);
      B.JSArray_methods.$indexSet(t1, 4, h4);
      B.JSArray_methods.$indexSet(t1, 5, h5);
      B.JSArray_methods.$indexSet(t1, 6, h6);
      B.JSArray_methods.$indexSet(t1, 7, h7);
      B.JSArray_methods.$indexSet(t1, 8, h8);
      B.JSArray_methods.$indexSet(t1, 9, h9);
    },
    finish$1(mac) {
      var g, t1, t2, i, c, mask, f, t3, _this = this;
      type$.List_int._as(mac);
      g = A.List_List$filled(10, 0, false, type$.int);
      t1 = _this._leftover;
      if (t1 !== 0) {
        t2 = _this._poly1305$_buffer;
        i = t1 + 1;
        B.JSArray_methods.$indexSet(t2, t1, 1);
        for (; i < 16; ++i)
          B.JSArray_methods.$indexSet(t2, i, 0);
        _this._fin = 1;
        _this._blocks$3(t2, 0, 16);
      }
      t1 = _this._h;
      t2 = t1[1];
      c = B.JSInt_methods._shrOtherPositive$1(t2, 13);
      B.JSArray_methods.$indexSet(t1, 1, t2 & 8191);
      for (i = 2; i < 10; ++i) {
        B.JSArray_methods.$indexSet(t1, i, t1[i] + c);
        t2 = t1[i];
        c = B.JSInt_methods._shrOtherPositive$1(t2, 13);
        B.JSArray_methods.$indexSet(t1, i, t2 & 8191);
      }
      B.JSArray_methods.$indexSet(t1, 0, t1[0] + c * 5);
      t2 = t1[0];
      c = B.JSInt_methods._shrOtherPositive$1(t2, 13);
      B.JSArray_methods.$indexSet(t1, 0, t2 & 8191);
      B.JSArray_methods.$indexSet(t1, 1, t1[1] + c);
      t2 = t1[1];
      c = B.JSInt_methods._shrOtherPositive$1(t2, 13);
      B.JSArray_methods.$indexSet(t1, 1, t2 & 8191);
      B.JSArray_methods.$indexSet(t1, 2, t1[2] + c);
      B.JSArray_methods.$indexSet(g, 0, t1[0] + 5);
      t2 = g[0];
      c = B.JSInt_methods._shrOtherPositive$1(t2, 13);
      B.JSArray_methods.$indexSet(g, 0, t2 & 8191);
      for (i = 1; i < 10; ++i) {
        B.JSArray_methods.$indexSet(g, i, t1[i] + c);
        t2 = g[i];
        c = B.JSInt_methods._shrOtherPositive$1(t2, 13);
        B.JSArray_methods.$indexSet(g, i, t2 & 8191);
      }
      B.JSArray_methods.$indexSet(g, 9, g[9] - 8192);
      mask = ((c ^ 1) >>> 0) - 1;
      for (i = 0; i < 10; ++i)
        B.JSArray_methods.$indexSet(g, i, (g[i] & mask) >>> 0);
      mask = ~mask;
      for (i = 0; i < 10; ++i)
        B.JSArray_methods.$indexSet(t1, i, (t1[i] & mask | g[i]) >>> 0);
      B.JSArray_methods.$indexSet(t1, 0, (t1[0] | t1[1] << 13) & 65535);
      B.JSArray_methods.$indexSet(t1, 1, (B.JSInt_methods._shrOtherPositive$1(t1[1], 3) | t1[2] << 10) & 65535);
      B.JSArray_methods.$indexSet(t1, 2, (B.JSInt_methods._shrOtherPositive$1(t1[2], 6) | t1[3] << 7) & 65535);
      B.JSArray_methods.$indexSet(t1, 3, (B.JSInt_methods._shrOtherPositive$1(t1[3], 9) | t1[4] << 4) & 65535);
      B.JSArray_methods.$indexSet(t1, 4, (B.JSInt_methods._shrOtherPositive$1(t1[4], 12) | t1[5] << 1 | t1[6] << 14) & 65535);
      B.JSArray_methods.$indexSet(t1, 5, (B.JSInt_methods._shrOtherPositive$1(t1[6], 2) | t1[7] << 11) & 65535);
      B.JSArray_methods.$indexSet(t1, 6, (B.JSInt_methods._shrOtherPositive$1(t1[7], 5) | t1[8] << 8) & 65535);
      B.JSArray_methods.$indexSet(t1, 7, (B.JSInt_methods._shrOtherPositive$1(t1[8], 8) | t1[9] << 5) & 65535);
      t2 = _this._pad;
      f = t1[0] + t2[0];
      B.JSArray_methods.$indexSet(t1, 0, f & 65535);
      for (i = 1; i < 8; ++i) {
        f = (((t1[i] + t2[i] | 0) >>> 0) + B.JSInt_methods._shrOtherPositive$1(f, 16) | 0) >>> 0;
        B.JSArray_methods.$indexSet(t1, i, f & 65535);
      }
      for (i = 0; i < 8; ++i) {
        t2 = t1[i];
        t3 = i * 2;
        B.JSArray_methods.$indexSet(mac, t3, t2 & 255);
        B.JSArray_methods.$indexSet(mac, t3 + 1, B.JSInt_methods._shrOtherPositive$1(t2, 8) & 255);
      }
      _this._finished = true;
      return _this;
    },
    update$1(data) {
      var bytes, t1, want, i, t2, mpos, t3, _this = this;
      type$.List_int._as(data);
      bytes = data.length;
      t1 = _this._leftover;
      if (t1 !== 0) {
        want = 16 - t1;
        if (want > bytes)
          want = bytes;
        for (t1 = _this._poly1305$_buffer, i = 0; i < want; ++i) {
          t2 = _this._leftover;
          if (!(i < data.length))
            return A.ioore(data, i);
          B.JSArray_methods.$indexSet(t1, t2 + i, data[i] & 255);
        }
        bytes -= want;
        if ((_this._leftover += want) < 16)
          return _this;
        _this._blocks$3(t1, 0, 16);
        _this._leftover = 0;
        mpos = want;
      } else
        mpos = 0;
      if (bytes >= 16) {
        want = bytes - B.JSInt_methods.$mod(bytes, 16);
        _this._blocks$3(data, mpos, want);
        mpos += want;
        bytes -= want;
      }
      if (bytes > 0) {
        for (t1 = _this._poly1305$_buffer, i = 0; i < bytes; ++i) {
          t2 = _this._leftover;
          t3 = mpos + i;
          if (!(t3 >= 0 && t3 < data.length))
            return A.ioore(data, t3);
          B.JSArray_methods.$indexSet(t1, t2 + i, data[t3] & 255);
        }
        _this._leftover += bytes;
      }
      return _this;
    }
  };
  A.FortunaPRNG.prototype = {
    get$_key() {
      var result,
        value = this.__FortunaPRNG__key_FI;
      if (value === $) {
        result = A.List_List$filled(32, 0, false, type$.int);
        this.__FortunaPRNG__key_FI !== $ && A.throwLateFieldADI("_key");
        this.__FortunaPRNG__key_FI = result;
        value = result;
      }
      return value;
    },
    get$_counter() {
      var result,
        value = this.__FortunaPRNG__counter_FI;
      if (value === $) {
        result = A.List_List$filled(16, 0, false, type$.int);
        this.__FortunaPRNG__counter_FI !== $ && A.throwLateFieldADI("_counter");
        this.__FortunaPRNG__counter_FI = result;
        value = result;
      }
      return value;
    },
    _generateBlocks$2(out, n) {
      var t2, tempBlock, t3, i, t4, t5, t6, ctr, newKey, _this = this,
        t1 = type$.List_int;
      t1._as(out);
      if (n === 0)
        return;
      if (n > 65536)
        throw A.wrapException(B.CryptoException_lMb);
      t2 = type$.int;
      tempBlock = A.List_List$filled(32, 0, false, t2);
      for (t3 = _this._zeroBlock, i = 0; i < n; ++i) {
        t4 = _this.get$_counter();
        t5 = _this.get$_key();
        t1._as(t4);
        t1._as(t3);
        t1._as(t5);
        t1._as(tempBlock);
        t6 = new A.AES();
        t6.__AES__keyLen_A = 32;
        t6.setKey$2(t5, false);
        ctr = new A.CTR();
        ctr.__CTR__counter_F = t1._as(A.List_List$filled(16, 0, false, t2));
        ctr.__CTR__buffer_F = t1._as(A.List_List$filled(16, 0, false, t2));
        ctr.setCipher$2(t6, t3);
        ctr.streamXOR$2(t4, tempBlock);
        t4 = i * 16;
        B.JSArray_methods.setRange$3(out, t4, t4 + 16, tempBlock);
        _this._count$0();
      }
      newKey = A.List_List$filled(32, 0, false, t2);
      t2 = _this.get$_counter();
      t4 = _this.get$_key();
      t1._as(t2);
      t1._as(t3);
      t1._as(t4);
      t1._as(tempBlock);
      A.CTR$(A.AES$(t4), t3).streamXOR$2(t2, tempBlock);
      B.JSArray_methods.setRange$3(newKey, 0, 16, tempBlock);
      _this._count$0();
      t2 = _this.get$_counter();
      t4 = _this.get$_key();
      t1._as(t2);
      A.CTR$(A.AES$(t1._as(t4)), t3).streamXOR$2(t2, tempBlock);
      B.JSArray_methods.setRange$3(newKey, 16, 32, tempBlock);
      _this._count$0();
      B.JSArray_methods.setAll$2(_this.get$_key(), 0, newKey);
    },
    _count$0() {
      var i, t1;
      for (i = 0; this.get$_counter(), i < 16; ++i) {
        t1 = this.get$_counter();
        B.JSArray_methods.$indexSet(t1, i, t1[i] + 1);
      }
    },
    nextBytes$1($length) {
      var t2, i, t3, out0, _this = this,
        t1 = type$.int,
        out = A.List_List$filled($length, 0, false, t1);
      for (t2 = _this._out, i = 0; i < $length; ++i) {
        t3 = _this._c;
        if (t3 === 16) {
          out0 = A.List_List$filled(16, 0, false, t1);
          _this._generateBlocks$2(out0, 1);
          B.JSArray_methods.setAll$2(t2, 0, out0);
          t3 = _this._c = 0;
        }
        _this._c = t3 + 1;
        if (!(t3 < 16))
          return A.ioore(t2, t3);
        B.JSArray_methods.$indexSet(out, i, t2[t3]);
      }
      return out;
    }
  };
  A.SchnorrkelPublicKey.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.SchnorrkelPublicKey))
        return false;
      return A.BytesUtils_bytesEqual(this._keys$_publicKey, other._keys$_publicKey);
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this._keys$_publicKey, B.List_empty15);
    }
  };
  A.QuickCrypto__generateRandom_closure.prototype = {
    call$1($length) {
      return $.$get$QuickCrypto_prng().nextBytes$1($length);
    },
    $signature: 87
  };
  A.BlockchainUtilsException.prototype = {
    toString$0(_) {
      var t2, infos,
        t1 = this.details;
      if (t1 == null)
        t1 = null;
      else {
        t2 = A._instanceType(t1)._eval$1("LinkedHashMapEntriesIterable<1,2>");
        t2 = new A.WhereIterable(new A.LinkedHashMapEntriesIterable(t1, t2), t2._eval$1("bool(Iterable.E)")._as(new A.BlockchainUtilsException_toString_closure()), t2._eval$1("WhereIterable<Iterable.E>"));
        t1 = t2;
      }
      if (t1 == null)
        t1 = A._setArrayType([], type$.JSArray_MapEntry_String_dynamic);
      t2 = type$.String;
      infos = A.Map_Map$fromEntries(t1, t2, type$.dynamic);
      if (infos.__js_helper$_length === 0)
        return this.message;
      t1 = A._instanceType(infos)._eval$1("LinkedHashMapEntriesIterable<1,2>");
      return this.message + " " + A.MappedIterable_MappedIterable(new A.LinkedHashMapEntriesIterable(infos, t1), t1._eval$1("String(Iterable.E)")._as(new A.BlockchainUtilsException_toString_closure0()), t1._eval$1("Iterable.E"), t2).join$1(0, ", ");
    }
  };
  A.BlockchainUtilsException_toString_closure.prototype = {
    call$1(element) {
      return type$.MapEntry_String_dynamic._as(element).value != null;
    },
    $signature: 88
  };
  A.BlockchainUtilsException_toString_closure0.prototype = {
    call$1(e) {
      type$.MapEntry_String_dynamic._as(e);
      return A.S(e.key) + ": " + A.S(e.value);
    },
    $signature: 89
  };
  A.ArgumentException.prototype = {};
  A.MessageException.prototype = {};
  A.GenericException.prototype = {};
  A._Hex.prototype = {
    encode$2$lowerCase(data, lowerCase) {
      var t1, $length, result, i, byte, t2, t3;
      type$.List_int._as(data);
      A.BytesUtils_validateBytes(data, "Invalid hex bytes");
      t1 = J.getInterceptor$asx(data);
      $length = t1.get$length(data);
      result = A.List_List$filled($length * 2, "", false, type$.String);
      for (i = 0; i < $length; ++i) {
        byte = t1.$index(data, i);
        t2 = i * 2;
        t3 = B.JSInt_methods._shrOtherPositive$1(byte, 4);
        if (!(t3 < 16))
          return A.ioore(B.List_5cT, t3);
        B.JSArray_methods.$indexSet(result, t2, B.List_5cT[t3]);
        t3 = byte & 15;
        if (!(t3 < 16))
          return A.ioore(B.List_5cT, t3);
        B.JSArray_methods.$indexSet(result, t2 + 1, B.List_5cT[t3]);
      }
      return B.JSArray_methods.join$0(result);
    },
    decode$1(hex) {
      var result, haveBad, i, t2, v0, v1,
        t1 = hex.length;
      if (t1 === 0) {
        t1 = J.JSArray_JSArray$fixed(0, type$.int);
        return t1;
      }
      if ((t1 & 1) !== 0)
        throw A.wrapException(B.ArgumentException_Cwt);
      result = A.List_List$filled(B.JSInt_methods._tdivFast$1(t1, 2), 0, false, type$.int);
      for (haveBad = false, i = 0; i < t1; i += 2) {
        t2 = hex.charCodeAt(i);
        v0 = t2 < 128 ? B.List_8ft[t2] : 256;
        t2 = i + 1;
        if (!(t2 < t1))
          return A.ioore(hex, t2);
        t2 = hex.charCodeAt(t2);
        v1 = t2 < 128 ? B.List_8ft[t2] : 256;
        B.JSArray_methods.$indexSet(result, B.JSInt_methods._tdivFast$1(i, 2), (v0 << 4 | v1) & 255);
        haveBad = B.JSBool_methods.$or(haveBad, B.JSBool_methods.$or(v0 === 256, v1 === 256));
      }
      if (haveBad)
        throw A.wrapException(B.ArgumentException_EMh);
      return result;
    }
  };
  A.SS58ChecksumError.prototype = {};
  A.BigRational.prototype = {
    $mul(_, other) {
      return A.BigRational__reduce(this.numerator.$mul(0, other.numerator), this.denominator.$mul(0, other.denominator));
    },
    $div(_, other) {
      return A.BigRational__reduce(this.numerator.$mul(0, other.denominator), this.denominator.$mul(0, other.numerator));
    },
    $not(_) {
      var t1 = this.denominator;
      if (t1._isNegative)
        return new A.BigRational(this.numerator, t1.$negate(0));
      return new A.BigRational(this.numerator.$negate(0), t1);
    },
    toDecimal$1$digits(digits) {
      var t2, nDive, nReminder, intPart, shiftedRemainder, t3, t4, decPart, decPartStr, _this = this,
        t1 = digits == null;
      if (t1 && _this._inDecimal != null) {
        t1 = _this._inDecimal;
        t1.toString;
        return t1;
      }
      if (t1)
        digits = _this.get$scale();
      t1 = _this.numerator;
      t2 = _this.denominator;
      nDive = t1.$tdiv(0, t2);
      nReminder = t1.remainder$1(0, t2);
      intPart = (nDive._isNegative ? nDive.$negate(0) : nDive).toString$0(0);
      shiftedRemainder = A.BigRational__reduce(nReminder._isNegative ? nReminder.$negate(0) : nReminder, t2).$mul(0, new A.BigRational($.$get$BigRational__ten().pow$1(digits), $.$get$BigRational__one()));
      t3 = shiftedRemainder.numerator;
      t4 = shiftedRemainder.denominator;
      decPart = t3.$tdiv(0, t4);
      if (t1._isNegative !== t2._isNegative) {
        t1 = t1.compareTo$1(0, $.$get$BigRational__zero());
        t1 = t1 !== 0;
      } else
        t1 = false;
      if (t1)
        intPart = "-" + intPart;
      t1 = $.$get$BigRational__zero();
      t2 = decPart.compareTo$1(0, t1);
      if (t2 === 0)
        return intPart;
      decPartStr = (decPart._isNegative ? decPart.$negate(0) : decPart).toString$0(0);
      t2 = decPartStr.length;
      if (t2 < digits)
        decPartStr = B.JSString_methods.$mul("0", digits - t2) + decPartStr;
      t1 = t3.$mod(0, t4).compareTo$1(0, t1);
      if (t1 === 0)
        for (; B.JSString_methods.endsWith$1(decPartStr, "0");)
          decPartStr = B.JSString_methods.substring$2(decPartStr, 0, decPartStr.length - 1);
      if (digits < 1)
        return intPart;
      return intPart + (decPart.compareTo$1(0, $.$get$BigRational__zero()) < 0 ? "" : ".") + decPartStr;
    },
    toDecimal$0() {
      return this.toDecimal$1$digits(null);
    },
    toString$0(_) {
      var t1 = this._inDecimal;
      return t1 == null ? this._inDecimal = this.toDecimal$0() : t1;
    },
    get$scale() {
      var t1, t2, scale = 0, r = this;
      while (true) {
        t1 = r.denominator;
        t2 = t1.compareTo$1(0, $.$get$_BigIntImpl_one());
        if (!(t2 !== 0))
          break;
        ++scale;
        t2 = $.$get$BigRational_ten();
        r = A.BigRational__reduce(r.numerator.$mul(0, t2.numerator), t1.$mul(0, t2.denominator));
        if (scale >= 20)
          break;
      }
      return scale;
    },
    $eq(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = false;
      if (other instanceof A.BigRational) {
        t2 = other.denominator.compareTo$1(0, this.denominator);
        if (t2 === 0)
          t1 = other.numerator.compareTo$1(0, this.numerator) === 0;
      }
      return t1;
    },
    get$hashCode(_) {
      return this.numerator.get$hashCode(0) ^ this.denominator.get$hashCode(0);
    }
  };
  A.StringEncoding.prototype = {
    _enumToString$0() {
      return "StringEncoding." + this._name;
    }
  };
  A.Tuple.prototype = {};
  A.CosmosBaseAddress.prototype = {
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (!(other instanceof A.CosmosBaseAddress))
        return false;
      if (_this !== other)
        t1 = A.getRuntimeTypeOfDartObject(_this) === A.getRuntimeTypeOfDartObject(other) && _this.address === other.address && _this.hrp === other.hrp;
      else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.address, this.hrp]);
    },
    toString$0(_) {
      return this.address;
    }
  };
  A.CosmosKeysAlgs.prototype = {
    _enumToString$0() {
      return "CosmosKeysAlgs." + this._name;
    }
  };
  A.CosmosKeysAlgs_fromName_closure.prototype = {
    call$1(element) {
      return type$.CosmosKeysAlgs._as(element)._name === this.name;
    },
    $signature: 90
  };
  A.CosmosKeysAlgs_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(new A.DartCosmosSdkPluginException("unknowmn key algorithm.", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.DartCosmosSdkPluginException.prototype = {};
  A.DartMoneroPluginException.prototype = {};
  A.MoneroNetwork.prototype = {
    toString$0(_) {
      return "MoneroNetwork." + this.name;
    }
  };
  A.MoneroNetwork_fromName_closure.prototype = {
    call$1(e) {
      return type$.MoneroNetwork._as(e).name === this.name;
    },
    $signature: 91
  };
  A.MoneroNetwork_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(new A.DartMoneroPluginException("The provided network name does not exist.", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.AptosAddress.prototype = {
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return this.address;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.AptosAddress))
        return false;
      return this.address === other.address;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.address);
    }
  };
  A.BcsSerializationException.prototype = {};
  A.MoveArgumentType.prototype = {
    _enumToString$0() {
      return "MoveArgumentType." + this._name;
    }
  };
  A.MoveArgument.prototype = {};
  A.MoveAddress.prototype = {
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.MoveAddress))
        return false;
      return A.BytesUtils_bytesEqual(this.value, other.value);
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this.value, B.List_empty15);
    }
  };
  A.BcsSerialization.prototype = {
    toJson$0() {
      return type$.Map_dynamic_dynamic._as(A.BcsSerialization_toReadableObject(this.toLayoutStruct$0())).cast$2$0(0, type$.String, type$.dynamic);
    }
  };
  A.BcsSerialization_toReadableObject_closure.prototype = {
    call$2(key, value) {
      return new A.MapEntry(key, A.BcsSerialization_toReadableObject(value), type$.MapEntry_of_dynamic_and_nullable_Object);
    },
    $signature: 92
  };
  A.BcsSerialization_toReadableObject_closure0.prototype = {
    call$2(e, k) {
      return k == null;
    },
    $signature: 93
  };
  A.BcsVariantSerialization.prototype = {
    toJson$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return type$.Map_dynamic_dynamic._as(A.BcsSerialization_toReadableObject(A.LinkedHashMap_LinkedHashMap$_literal([this.argumentType._name, this.toLayoutStruct$0()], t1, t2))).cast$2$0(0, t1, t2);
    }
  };
  A.ETHAddress.prototype = {
    toString$0(_) {
      return this.address;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.ETHAddress))
        return false;
      return this.address === other.address;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.address);
    }
  };
  A.ETHPluginException.prototype = {};
  A.SolAddress.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.SolAddress && other.address === this.address;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.address);
    },
    toString$0(_) {
      return this.address;
    }
  };
  A.SolidityAddress.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.SolidityAddress))
        return false;
      return this._hexAddress === other._hexAddress;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this._hexAddress);
    },
    toString$0(_) {
      return this._hexAddress;
    }
  };
  A.SuiAddress.prototype = {
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", A.BytesUtils_fromHexString(this.address, false)], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return this.address;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.SuiAddress))
        return false;
      return this.address === other.address;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.address);
    }
  };
  A.DartSuiPluginException.prototype = {};
  A.TronAddress.prototype = {
    toAddress$1(visible) {
      return this._address;
    },
    toAddress$0() {
      return this.toAddress$1(true);
    },
    toString$0(_) {
      return this.toAddress$1(true);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.TronAddress))
        return false;
      return this._address === other._address;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this._address);
    }
  };
  A.TronPluginException.prototype = {};
  A.OnChainBridgeException.prototype = {
    toString$0(_) {
      return "OnChainBridgeException{" + this.message + "}";
    }
  };
  A.PlatformConfig.prototype = {};
  A.AppPlatform.prototype = {
    _enumToString$0() {
      return "AppPlatform." + this._name;
    }
  };
  A.WalletEventTypes.prototype = {
    _enumToString$0() {
      return "WalletEventTypes." + this._name;
    }
  };
  A.WalletEventTypes_fromName_closure.prototype = {
    call$1(e) {
      return type$.WalletEventTypes._as(e)._name === this.name;
    },
    $signature: 94
  };
  A.WalletEventTypes_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.OnChainBridgeException$("Invalid wallet event type " + this.name));
    },
    $signature: 0
  };
  A.WalletEventTarget.prototype = {
    _enumToString$0() {
      return "WalletEventTarget." + this._name;
    }
  };
  A.WalletEvent.prototype = {
    copyWith$1$target(target) {
      var _this = this;
      return new A.WalletEvent(target, _this.clientId, A.List_List$unmodifiable(_this.data, type$.int), _this.requestId, _this.type, _this.additional, _this.platform);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["client_id", _this.clientId, "data", _this.data, "request_id", _this.requestId, "type", _this.type._name, "additional", _this.additional, "platform", _this.platform, "target", _this.target._name], type$.String, type$.dynamic);
    }
  };
  A.OnChainBridgeInterface.prototype = {};
  A.SafeStorage.prototype = {};
  A.StorageItem.prototype = {};
  A.IndexDbStorageMode.prototype = {
    _enumToString$0() {
      return "IndexDbStorageMode." + this._name;
    }
  };
  A.IndexDbStorage.prototype = {
    all$1$prefix(prefix) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_String),
        $async$returnValue, $async$self = this, t1, t2, result, t3, key, value, decode, response;
      var $async$all$1$prefix = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.IndexDbStorage__requestHandler(type$.JSObject._as(A.IndexDbStorage_getStore($async$self.database, B.IndexDbStorageMode_1)._0.getAll()), type$.JSArray_nullable_Object), $async$all$1$prefix);
            case 3:
              // returning from await.
              response = $async$result;
              response = type$.List_JSObject._is(response) ? response : new A.CastList(response, A._arrayInstanceType(response)._eval$1("CastList<1,JSObject>"));
              t1 = J.getInterceptor$ax(response);
              t1.removeWhere$1(response, new A.IndexDbStorage_all_closure(prefix));
              t2 = type$.String;
              result = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
              for (t1 = t1.get$iterator(response), t2 = $async$self._chacha; t1.moveNext$0();) {
                t3 = t1.get$current();
                key = A._asStringQ(t3.id);
                value = A._asStringQ(t3.value);
                if (key == null || value == null)
                  continue;
                decode = A.SafestorageUtils_decrypt(value, t2);
                if (decode == null)
                  continue;
                result.$indexSet(0, key, decode);
              }
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$all$1$prefix, $async$completer);
    },
    read$1(key) {
      return this.read$body$IndexDbStorage(key);
    },
    read$body$IndexDbStorage(key) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_String),
        $async$returnValue, $async$self = this, t1, response;
      var $async$read$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (key === "ask") {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = A.IndexDbStorage_getStore($async$self.database, B.IndexDbStorageMode_1);
              $async$goto = 3;
              return A._asyncAwait(A.IndexDbStorage__requestHandler(type$.JSObject._as(t1._0.get(key)), type$.nullable_JSObject), $async$read$1);
            case 3:
              // returning from await.
              t1 = $async$result;
              response = t1 == null ? null : A._asStringQ(t1.value);
              if (response == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = A.SafestorageUtils_decrypt(response, $async$self._chacha);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$read$1, $async$completer);
    },
    save$2(key, value) {
      return this.save$body$IndexDbStorage(key, value);
    },
    save$body$IndexDbStorage(key, value) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, t1, r, encryptedValue, t2, t3, scheme;
      var $async$save$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (key === "ask") {
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = A.StringUtils_encode(value, B.StringEncoding_1);
              r = $.$get$QuickCrypto__generateRandom().call$1(8);
              encryptedValue = $async$self._chacha.encrypt$2(r, t1);
              t1 = type$.int;
              t2 = A.List_List$unmodifiable(r, t1);
              t3 = A.List_List$unmodifiable(encryptedValue, t1);
              A.BytesUtils_validateListOfBytes(t2);
              t2 = A.List_List$unmodifiable(t2, t1);
              A.BytesUtils_validateListOfBytes(t3);
              scheme = {id: key, value: A.BytesUtils_toHexString(new A.CborListValue([new A.CborBytesValue(t2), new A.CborBytesValue(A.List_List$unmodifiable(t3, t1))], true, type$.CborListValue_dynamic).encode$0(), true, null)};
              $async$goto = 3;
              return A._asyncAwait(A.IndexDbStorage__requestHandler(type$.JSObject._as(A.IndexDbStorage_getStore($async$self.database, B.IndexDbStorageMode_0)._0.put(scheme)), type$.String), $async$save$2);
            case 3:
              // returning from await.
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$save$2, $async$completer);
    }
  };
  A.IndexDbStorage__requestHandler_closure.prototype = {
    call$1(_) {
      type$.Object._as(_);
      this.completer.complete$1(this.T._as(this.request.result));
    },
    $signature: 13
  };
  A.IndexDbStorage__requestHandler_closure0.prototype = {
    call$1(_) {
      type$.Object._as(_);
      this.completer.completeError$1(new A.OnChainBridgeException("An unexpected error occurred while sending request to IndexedDB database."));
    },
    $signature: 13
  };
  A.IndexDbStorage_init_closure.prototype = {
    call$1(_) {
      var t1, t2;
      type$.Object._as(_);
      t1 = this.request;
      t2 = type$.JSObject;
      if (!A._asBool(t2._as(t2._as(t1.result).objectStoreNames).contains("ONCHAIN_STORE")))
        t2._as(t2._as(t1.result).createObjectStore("ONCHAIN_STORE", {keyPath: "id", autoIncrement: true}));
    },
    $signature: 13
  };
  A.IndexDbStorage_init_closure0.prototype = {
    call$1(_) {
      type$.Object._as(_);
      this.completer.complete$1(type$.JSObject._as(this.request.result));
    },
    $signature: 13
  };
  A.IndexDbStorage_init_closure1.prototype = {
    call$1(_) {
      var t1;
      type$.Object._as(_);
      t1 = this.completer;
      if ((t1.future._state & 30) === 0)
        t1.completeError$1(new A.OnChainBridgeException(string$.An_une));
    },
    $signature: 13
  };
  A.IndexDbStorage_all_closure.prototype = {
    call$1(e) {
      var id = A._asStringQ(type$.JSObject._as(e).id);
      if (id == null)
        return true;
      return !B.JSString_methods.startsWith$1(id, this.prefix);
    },
    $signature: 96
  };
  A.JSWalletEvent_toEvent_closure.prototype = {
    call$1(e) {
      return type$.WalletEventTarget._as(e)._name === A._asStringQ(this._this.target);
    },
    $signature: 97
  };
  A.ToJsEvent_toJsEvent_closure.prototype = {
    call$1(e) {
      return A._asInt(e);
    },
    $signature: 98
  };
  A.WebPlatformInterface.prototype = {
    _initDatabase$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t2, result, t1;
      var $async$_initDatabase$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._storage;
              if (t1 != null)
                t1.database.close();
              $async$self._storage = null;
              $async$goto = 2;
              return A._asyncAwait(A.SafeStorage_init(), $async$_initDatabase$0);
            case 2:
              // returning from await.
              t1 = $async$self._storage = $async$result;
              if (t1 != null) {
                t1 = t1.database;
                t2 = new A.WebPlatformInterface__initDatabase_closure($async$self);
                if (typeof t2 == "function")
                  A.throwExpression(A.ArgumentError$("Attempting to rewrap a JS function.", null));
                result = function(_call, f) {
                  return function() {
                    return _call(f);
                  };
                }(A._callDartFunctionFast0, t2);
                result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = t2;
                t1.onclose = result;
              }
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_initDatabase$0, $async$completer);
    },
    readAllSecure$1$prefix(prefix) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_String),
        $async$returnValue, $async$self = this;
      var $async$readAllSecure$1$prefix = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $async$self._storage.all$1$prefix(prefix);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$readAllSecure$1$prefix, $async$completer);
    },
    readSecure$1(key) {
      return this.readSecure$body$WebPlatformInterface(key);
    },
    readSecure$body$WebPlatformInterface(key) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_String),
        $async$returnValue, $async$self = this;
      var $async$readSecure$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $async$self._storage.read$1(key);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$readSecure$1, $async$completer);
    },
    writeSecure$2(key, value) {
      return this.writeSecure$body$WebPlatformInterface(key, value);
    },
    writeSecure$body$WebPlatformInterface(key, value) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue, $async$self = this;
      var $async$writeSecure$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self._storage.save$2(key, value), $async$writeSecure$2);
            case 3:
              // returning from await.
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$writeSecure$2, $async$completer);
    },
    hasBarcodeScanner$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.bool),
        $async$returnValue;
      var $async$hasBarcodeScanner$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = type$.nullable_JSObject._as(type$.JSObject._as(init.G.window).BarcodeDetector) != null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$hasBarcodeScanner$0, $async$completer);
    },
    getConfig$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.PlatformConfig),
        $async$returnValue, $async$self = this;
      var $async$getConfig$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self._initDatabase$0(), $async$getConfig$0);
            case 3:
              // returning from await.
              $async$goto = 4;
              return A._asyncAwait($async$self.hasBarcodeScanner$0().catchError$1(new A.WebPlatformInterface_getConfig_closure()), $async$getConfig$0);
            case 4:
              // returning from await.
              $async$returnValue = new A.PlatformConfig();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getConfig$0, $async$completer);
    }
  };
  A.WebPlatformInterface__initDatabase_closure.prototype = {
    call$0() {
      A.SafeStorage_init().then$1$1(new A.WebPlatformInterface__initDatabase__closure(this.$this), type$.nullable_IndexDbStorage);
    },
    $signature: 21
  };
  A.WebPlatformInterface__initDatabase__closure.prototype = {
    call$1(e) {
      return this.$this._storage = type$.nullable_IndexDbStorage._as(e);
    },
    $signature: 99
  };
  A.WebPlatformInterface_getConfig_closure.prototype = {
    call$1(e) {
      return false;
    },
    $signature: 100
  };
  A.WalletException.prototype = {
    toString$0(_) {
      if (this._argruments != null)
        return "invalid_request";
      return this.message;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.WalletException))
        return false;
      return other.message === this.message && A.CompareUtils_iterableIsEqual(this._argruments, other._argruments, type$.String);
    },
    get$hashCode(_) {
      return A.Object_hash(this.message, this._argruments, B.C_SentinelValue, B.C_SentinelValue);
    }
  };
  A.Equatable.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!type$.Equatable._is(other))
        return false;
      if (A.getRuntimeTypeOfDartObject(other) !== A.getRuntimeTypeOfDartObject(this))
        return false;
      return A.CompareUtils_iterableIsEqual(this.get$variabels(), other.get$variabels(), type$.dynamic);
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode(this.get$variabels());
    }
  };
  A.ProviderAuthType.prototype = {
    _enumToString$0() {
      return "ProviderAuthType." + this._name;
    }
  };
  A.ProviderAuthType_fromName_closure.prototype = {
    call$1(e) {
      return type$.ProviderAuthType._as(e)._name === this.name;
    },
    $signature: 42
  };
  A.ProviderAuthType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_provider_infomarion_null);
    },
    $signature: 0
  };
  A.ProviderAuthType_fromTag_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_bytesEqual(this.tag, type$.ProviderAuthType._as(e).tag);
    },
    $signature: 42
  };
  A.ProviderAuthType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_provider_infomarion_null);
    },
    $signature: 0
  };
  A.ProviderAuthenticated.prototype = {};
  A.BasicProviderAuthenticated.prototype = {
    toCbor$0() {
      var t1 = this.type,
        t2 = A._setArrayType([t1._name, this.key, this.value], type$.JSArray_String);
      return new A.CborTagValue(A.List_List$unmodifiable(t1.tag, type$.int), new A.CborListValue(t2, true, type$.CborListValue_String), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.type, this.key, this.value];
    }
  };
  A.DigestProviderAuthenticated.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.password, this.username], type$.JSArray_String);
      return new A.CborTagValue(A.List_List$unmodifiable(this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_String), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.type, this.password, this.username];
    }
  };
  A._ProviderAuthenticated_Object_CborSerializable.prototype = {};
  A._ProviderAuthenticated_Object_CborSerializable_Equatable.prototype = {};
  A.ContentType.prototype = {
    _enumToString$0() {
      return "ContentType." + this._name;
    }
  };
  A.ContentType_fromValue_closure.prototype = {
    call$1(element) {
      return type$.ContentType._as(element).value === this.value;
    },
    $signature: 102
  };
  A.ContentType_fromValue_closure0.prototype = {
    call$0() {
      throw A.wrapException(B.WalletException_data_verification_failed_null);
    },
    $signature: 103
  };
  A.APPImage.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.type.value, new A.CborStringValue(this.uri)], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_50_1, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.type, this.uri];
    }
  };
  A._APPImage_Object_CborSerializable.prototype = {};
  A._APPImage_Object_CborSerializable_Equatable.prototype = {};
  A.CborSerializable.prototype = {};
  A.ExtractCborMap_generateMap_closure.prototype = {
    call$1(e) {
      var _this = this;
      type$.MapEntry_CborObject_CborObject._as(e);
      return new A.MapEntry(_this.onKey.call$1(e.key), _this.onValue.call$1(e.value), _this.K._eval$1("@<0>")._bind$1(_this.V)._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("MapEntry<1,2>(MapEntry<CborObject,CborObject>)");
    }
  };
  A.JsonSerialization.prototype = {};
  A.SynchronizedLock.prototype = {
    synchronized$1$1(func, $T) {
      var timeout = null;
      return this.synchronized$body$SynchronizedLock($T._eval$1("0/()")._as(func), $T, $T);
    },
    synchronized$body$SynchronizedLock(func, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], $async$self = this, result, complete, t1, t2, timeout, prev, completer;
      var $async$synchronized$1$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              timeout = null;
              prev = $async$self.last;
              completer = new A._SyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._SyncCompleter_void);
              $async$self.last = completer.future;
              $async$handler = 3;
              $async$goto = prev != null ? 6 : 7;
              break;
            case 6:
              // then
              $async$goto = timeout != null ? 8 : 10;
              break;
            case 8:
              // then
              $async$goto = 11;
              return A._asyncAwait(prev.timeout$1(timeout), $async$synchronized$1$1);
            case 11:
              // returning from await.
              // goto join
              $async$goto = 9;
              break;
            case 10:
              // else
              $async$goto = 12;
              return A._asyncAwait(prev, $async$synchronized$1$1);
            case 12:
              // returning from await.
            case 9:
              // join
            case 7:
              // join
              result = func.call$0();
              $async$goto = result instanceof A._Future ? 13 : 15;
              break;
            case 13:
              // then
              t1 = result;
              if (!$T._eval$1("Future<0>")._is(t1)) {
                $T._as(t1);
                t2 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
                t2._state = 8;
                t2._resultOrListeners = t1;
                t1 = t2;
              }
              $async$goto = 16;
              return A._asyncAwait(t1, $async$synchronized$1$1);
            case 16:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              // goto join
              $async$goto = 14;
              break;
            case 15:
              // else
              $async$returnValue = result;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
            case 14:
              // join
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              complete = new A.SynchronizedLock_synchronized_complete($async$self, completer);
              if (prev != null && timeout != null)
                prev.then$1$1(new A.SynchronizedLock_synchronized_closure(complete), type$.Null);
              else
                complete.call$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$synchronized$1$1, $async$completer);
    }
  };
  A.SynchronizedLock_synchronized_complete.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.completer;
      if (t1.last === t2.future)
        t1.last = null;
      t2.complete$0();
    },
    $signature: 5
  };
  A.SynchronizedLock_synchronized_closure.prototype = {
    call$1(_) {
      this.complete.call$0();
    },
    $signature: 11
  };
  A.CustomCoins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$proposal() {
      return B.C_CustomProposal;
    },
    get$conf() {
      return this.conf;
    }
  };
  A.CustomCoins_fromName_closure.prototype = {
    call$1(element) {
      return type$.CustomCoins._as(element).name === this.name;
    },
    $signature: 104
  };
  A.CustomProposal.prototype = {
    get$specName() {
      return "CIP-0019";
    },
    $isBipProposal: 1,
    get$name() {
      return "CIP-0019";
    }
  };
  A.CustomCurrencyConf_byronLegacy_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronLegacyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 43
  };
  A.CustomCurrencyConf_byronLegacyTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronLegacyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 43
  };
  A.AddressDerivationType.prototype = {
    _enumToString$0() {
      return "AddressDerivationType." + this._name;
    }
  };
  A.AddressDerivationType_fromTag_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_bytesEqual(type$.AddressDerivationType._as(e).tag, this.tag);
    },
    $signature: 106
  };
  A.AddressDerivationType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_account_details_null);
    },
    $signature: 0
  };
  A.AddressDerivationIndex.prototype = {};
  A.Bip32AddressIndex.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.currencyCoin,
        t2 = t1.get$proposal().get$specName();
      t1 = t1.get$coinName();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_81, type$.int), new A.CborListValue([_this.purpose, _this.coin, _this.accountLevel, _this.changeLevel, _this.addressIndex, new A.CborStringValue(t2 + "#" + t1), _this.seedGeneration.value, _this.importedKeyId, _this.keyName], false, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      var _this = this;
      return [_this.purpose, _this.coin, _this.accountLevel, _this.changeLevel, _this.addressIndex, _this.currencyCoin.get$conf().get$type(), _this.seedGeneration.name, _this.importedKeyId];
    },
    toString$0(_) {
      var t1 = this.hdPath;
      return t1 == null ? "non_derivation" : t1;
    }
  };
  A.Bip32AddressIndex__toPath_closure.prototype = {
    call$1(element) {
      return A._asIntQ(element) != null;
    },
    $signature: 107
  };
  A.Bip32AddressIndex__toPath_closure0.prototype = {
    call$1(e) {
      A._asIntQ(e);
      e.toString;
      return A.Bip32KeyIndex_Bip32KeyIndex(e);
    },
    $signature: 108
  };
  A.MultiSigAddressIndex.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.keyName], type$.JSArray_nullable_String);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_83, type$.int), new A.CborListValue(t1, true, type$.CborListValue_nullable_String), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [];
    },
    toString$0(_) {
      return "multi_signature";
    }
  };
  A.SubstrateAddressIndex.prototype = {
    toCbor$0() {
      var t3, _this = this,
        t1 = _this.currencyCoin,
        t2 = t1.get$proposal().get$specName();
      t1 = t1.get$coinName();
      t3 = _this.substratePath;
      if (t3 == null)
        t3 = B.C_CborNullValue;
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_84, type$.int), new A.CborListValue([new A.CborStringValue(t2 + "#" + t1), t3, _this.importedKeyId, _this.keyName], false, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [$.$get$SubstrateCoins__coinToConf().$index(0, this.currencyCoin).type, this.importedKeyId, this.substratePath];
    },
    toString$0(_) {
      var t1 = this.substratePath;
      return t1 == null ? "non_derivation" : t1;
    }
  };
  A.SeedTypes.prototype = {
    _enumToString$0() {
      return "SeedTypes." + this._name;
    }
  };
  A.SeedTypes_fromValue_closure.prototype = {
    call$1(e) {
      return type$.SeedTypes._as(e).value === this.tag;
    },
    $signature: 109
  };
  A.SeedTypes_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 0
  };
  A._AddressDerivationIndex_Object_CborSerializable.prototype = {};
  A._AddressDerivationIndex_Object_CborSerializable_Equatable.prototype = {};
  A.NetworkType.prototype = {
    toString$0(_) {
      return "NetworkType." + this.name;
    }
  };
  A.NetworkType_fromTag_closure.prototype = {
    call$1(e) {
      type$.NetworkType._as(e);
      return A.BytesUtils_bytesEqual(this._box_0.tag, e.tag);
    },
    $signature: 44
  };
  A.NetworkType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_incorrect_network_null);
    },
    $signature: 0
  };
  A.NetworkType_fromName_closure.prototype = {
    call$1(e) {
      return type$.NetworkType._as(e).name === this.name;
    },
    $signature: 44
  };
  A.NetworkType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_incorrect_network_null);
    },
    $signature: 0
  };
  A.ProvidersConst_getDefaultProvider_closure.prototype = {
    call$1(element) {
      var t1 = this.T._as(element).protocol.get$platforms();
      $.$get$PlatformInterface_instance();
      return B.JSArray_methods.contains$1(t1, B.AppPlatform_1);
    },
    $signature() {
      return this.T._eval$1("bool(0)");
    }
  };
  A.APIProvider.prototype = {
    get$variabels() {
      return [this.get$callUrl(), this.protocol, this.auth];
    }
  };
  A.ProviderIdentifier.prototype = {
    cast$1$0(_, $T) {
      A.checkTypeBound($T, type$.ProviderIdentifier, "T", "cast");
      if (!$T._is(this))
        throw A.wrapException(A.WalletException$invalidArgruments(A._setArrayType([A.createRuntimeType($T).toString$0(0), A.getRuntimeTypeOfDartObject(this).toString$0(0)], type$.JSArray_String)));
      return $T._as(this);
    }
  };
  A.DefaultProviderIdentifier.prototype = {
    get$variabels() {
      return [this.identifier];
    }
  };
  A._APIProvider_Object_Equatable.prototype = {};
  A._APIProvider_Object_Equatable_CborSerializable.prototype = {};
  A._ProviderIdentifier_Object_Equatable.prototype = {};
  A._ProviderIdentifier_Object_Equatable_CborSerializable.prototype = {};
  A.BitcoinExplorerProviderType.prototype = {
    _enumToString$0() {
      return "BitcoinExplorerProviderType." + this._name;
    }
  };
  A.BitcoinExplorerProviderType_fromName_closure.prototype = {
    call$1(element) {
      return type$.BitcoinExplorerProviderType._as(element)._name === this.name;
    },
    $signature: 111
  };
  A.BitcoinExplorerProviderType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_provider_infomarion_null);
    },
    $signature: 0
  };
  A.AptosAPIProviderType.prototype = {
    _enumToString$0() {
      return "AptosAPIProviderType." + this._name;
    }
  };
  A.AptosAPIProviderType_fromValue_closure.prototype = {
    call$1(e) {
      return type$.AptosAPIProviderType._as(e).value === this.value;
    },
    $signature: 112
  };
  A.AptosAPIProviderType_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 0
  };
  A.AptosAPIProvider.prototype = {
    get$callUrl() {
      return this.fullNodeUri;
    }
  };
  A.AptosAPIProvider_AptosAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 6
  };
  A.AptosProviderIdentifier.prototype = {
    get$variabels() {
      return [this.fullNodeIdentifier, this.graphQlIdentifier];
    }
  };
  A.BitcoinExplorerAPIProvider.prototype = {
    get$callUrl() {
      return this.explorerType.url;
    },
    get$variabels() {
      return [this.protocol, this.explorerType];
    }
  };
  A.BitcoinExplorerAPIProvider_BitcoinExplorerAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 6
  };
  A.ElectrumAPIProvider.prototype = {
    get$callUrl() {
      return this.url;
    }
  };
  A.ElectrumAPIProvider_ElectrumAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 6
  };
  A.BaseBitcoinAPIProvider.prototype = {};
  A.CardanoAPIProvider.prototype = {
    get$callUrl() {
      return this.uri;
    },
    get$variabels() {
      return [this.uri, this.protocol, this.auth];
    }
  };
  A.CardanoAPIProvider_CardanoAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 6
  };
  A.CosmosAPIProvider.prototype = {
    get$callUrl() {
      return this.uri;
    },
    get$variabels() {
      return [this.uri, this.protocol, this.auth];
    }
  };
  A.CosmosAPIProvider_CosmosAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 6
  };
  A.EthereumAPIProvider.prototype = {
    get$callUrl() {
      return this.uri;
    },
    toCbor$0() {
      var _this = this,
        t1 = _this.auth;
      t1 = t1 == null ? null : t1.toCbor$0();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_90_3, type$.int), new A.CborListValue([_this.uri, _this.protocol.id, t1, _this.identifier, _this.allowInWeb3], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.uri, this.protocol, this.auth];
    }
  };
  A.EthereumAPIProvider_EthereumAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 6
  };
  A.MoneroAPIProvider.prototype = {
    get$callUrl() {
      return this.httpNodeUri;
    }
  };
  A.MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 6
  };
  A.RippleAPIProvider.prototype = {
    get$callUrl() {
      return this.uri;
    }
  };
  A.RippleAPIProvider_RippleAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 6
  };
  A.SolanaAPIProvider.prototype = {
    get$callUrl() {
      return this.httpNodeUri;
    }
  };
  A.SolanaAPIProvider_SolanaAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 6
  };
  A.StellarAPIProvider.prototype = {
    get$callUrl() {
      return this.horizonUrl;
    },
    get$variabels() {
      return [this.horizonUrl, this.sorobanUrl, this.protocol];
    }
  };
  A.StellarAPIProvider_StellarAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 6
  };
  A.SubstrateAPIProvider.prototype = {
    get$callUrl() {
      return this.uri;
    },
    get$variabels() {
      return [this.uri, this.protocol];
    }
  };
  A.SubstrateAPIProvider_SubstrateAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 6
  };
  A.SuiAPIProvider.prototype = {
    get$callUrl() {
      return this.fullNodeUri;
    }
  };
  A.SuiAPIProvider_SuiAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 6
  };
  A.TonAPIProvider.prototype = {
    get$callUrl() {
      return this.uri;
    },
    get$variabels() {
      return [this.uri, this.protocol, this.apiType];
    }
  };
  A.TonAPIProvider_TonAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 6
  };
  A.TronAPIProvider.prototype = {
    get$callUrl() {
      return this.httpNodeUri;
    }
  };
  A.TronAPIProvider_TronAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 6
  };
  A.ServiceProtocol.prototype = {
    _enumToString$0() {
      return "ServiceProtocol." + this._name;
    },
    get$platforms() {
      switch (this) {
        case B.ServiceProtocol_HTTP_0_http:
        case B.ServiceProtocol_WebSocket_3_websocket:
          return B.List_unq;
        default:
          return A._setArrayType([B.AppPlatform_2, B.AppPlatform_0, B.AppPlatform_3, B.AppPlatform_4], type$.JSArray_AppPlatform);
      }
    },
    toString$0(_) {
      return this.value;
    }
  };
  A.ServiceProtocol_fromID_closure.prototype = {
    call$1(element) {
      return type$.ServiceProtocol._as(element).id === this.id;
    },
    $signature: 114
  };
  A.APIUtils__findProviders_closure.prototype = {
    call$0() {
      var t1 = this.aptosProviders,
        t2 = t1.$ti,
        graphQlProviders = new A.WhereIterable(t1, t2._eval$1("bool(ListBase.E)")._as(new A.APIUtils__findProviders__closure2()), t2._eval$1("WhereIterable<ListBase.E>"));
      return graphQlProviders.firstWhere$2$orElse(0, new A.APIUtils__findProviders__closure3(this.aptosProviderIdentifier), new A.APIUtils__findProviders__closure4(graphQlProviders));
    },
    $signature: 16
  };
  A.APIUtils__findProviders__closure2.prototype = {
    call$1(e) {
      return type$.AptosAPIProvider._as(e).type === B.AptosAPIProviderType_1_graphQl;
    },
    $signature: 15
  };
  A.APIUtils__findProviders__closure3.prototype = {
    call$1(e) {
      var t1;
      type$.AptosAPIProvider._as(e);
      t1 = this.aptosProviderIdentifier;
      t1 = t1 == null ? null : t1.graphQlIdentifier;
      return e.identifier === t1;
    },
    $signature: 15
  };
  A.APIUtils__findProviders__closure4.prototype = {
    call$0() {
      return this.graphQlProviders.get$first(0);
    },
    $signature: 16
  };
  A.APIUtils__findProviders_closure0.prototype = {
    call$0() {
      var t1 = this.aptosProviders,
        t2 = t1.$ti,
        fullnodeProviders = new A.WhereIterable(t1, t2._eval$1("bool(ListBase.E)")._as(new A.APIUtils__findProviders__closure()), t2._eval$1("WhereIterable<ListBase.E>"));
      return fullnodeProviders.firstWhere$2$orElse(0, new A.APIUtils__findProviders__closure0(this.aptosProviderIdentifier), new A.APIUtils__findProviders__closure1(fullnodeProviders));
    },
    $signature: 16
  };
  A.APIUtils__findProviders__closure.prototype = {
    call$1(e) {
      return type$.AptosAPIProvider._as(e).type === B.AptosAPIProviderType_0_fullnode;
    },
    $signature: 15
  };
  A.APIUtils__findProviders__closure0.prototype = {
    call$1(e) {
      var t1;
      type$.AptosAPIProvider._as(e);
      t1 = this.aptosProviderIdentifier;
      t1 = t1 == null ? null : t1.fullNodeIdentifier;
      return e.identifier === t1;
    },
    $signature: 15
  };
  A.APIUtils__findProviders__closure1.prototype = {
    call$0() {
      return this.fullnodeProviders.get$first(0);
    },
    $signature: 16
  };
  A.APIUtils__findProviders_closure1.prototype = {
    call$1(e) {
      var t1;
      type$.APIProvider._as(e);
      t1 = this.defaultIdentifier;
      t1 = t1 == null ? null : t1.identifier;
      return e.identifier === t1;
    },
    $signature: 25
  };
  A.APIUtils__findProviders_closure2.prototype = {
    call$0() {
      return B.JSArray_methods.get$first(this.providers);
    },
    $signature: 118
  };
  A.APIUtils_findNetworkProvider_closure.prototype = {
    call$1(e) {
      return type$.APIProvider._as(e).allowInWeb3;
    },
    $signature: 25
  };
  A.APIUtils_findNetworkProvider_closure0.prototype = {
    call$0() {
      return A.APIUtils__findProviders(this.identifier, this._box_0.providers, this.network.get$type());
    },
    $signature: 119
  };
  A.IntegerBalance.prototype = {
    _updateBalance$1(updateBalance) {
      var t2, _this = this,
        t1 = _this.__IntegerBalance_showDecimal_F;
      t1 === $ && A.throwLateFieldNI("showDecimal");
      t1 = A.BigRational_BigRational(updateBalance, null).$div(0, A.RetionalConst_fromDecimalNumber(_this._token.decimal)).toDecimal$1$digits(t1);
      _this.__IntegerBalance__price_A = t1;
      _this._balance = updateBalance;
      A.StrUtils_to3Digits(t1, ",");
      t1 = _this._balance;
      t2 = $.$get$_BigIntImpl_zero();
      t1.compareTo$1(0, t2);
      _this._balance.compareTo$1(0, t2);
    },
    toString$0(_) {
      var t1 = this.__IntegerBalance__price_A;
      t1 === $ && A.throwLateFieldNI("_price");
      return t1;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this !== other) {
        t1 = false;
        if (other instanceof A.IntegerBalance)
          if (this._token.$eq(0, other._token))
            t1 = other._balance.compareTo$1(0, this._balance) === 0;
      } else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._token, this._balance]);
    },
    $isBalanceCore: 1
  };
  A.WalletNetwork.prototype = {
    get$supportWeb3() {
      return false;
    },
    getAllProviders$0() {
      var t2, t3,
        t1 = type$.APIProvider;
      t1 = A.List_List$_of(A.ProvidersConst_getDefaultProvider(this, t1), t1);
      t2 = this.get$coinParam().providers;
      t3 = A._arrayInstanceType(t2);
      B.JSArray_methods.addAll$1(t1, new A.WhereIterable(t2, t3._eval$1("bool(1)")._as(new A.WalletNetwork_getAllProviders_closure()), t3._eval$1("WhereIterable<1>")));
      return t1;
    }
  };
  A.WalletNetwork_getAllProviders_closure.prototype = {
    call$1(element) {
      var t1 = type$.APIProvider._as(element).protocol.get$platforms();
      $.$get$PlatformInterface_instance();
      return B.JSArray_methods.contains$1(t1, B.AppPlatform_1);
    },
    $signature: 25
  };
  A.WalletBitcoinNetwork.prototype = {
    get$supportWeb3() {
      return true;
    },
    get$type() {
      return B.NetworkType_yCL;
    },
    get$variabels() {
      return [this.value];
    },
    copyWith$1$coinParam(coinParam) {
      type$.nullable_BitcoinParams._as(coinParam);
      return new A.WalletBitcoinNetwork(this.value, coinParam);
    },
    get$value() {
      return this.value;
    },
    get$coinParam() {
      return this.coinParam;
    }
  };
  A.WalletBitcoinCashNetwork.prototype = {
    copyWith$1$coinParam(coinParam) {
      type$.nullable_BitcoinParams._as(coinParam);
      return new A.WalletBitcoinCashNetwork(this.value, coinParam);
    },
    get$type() {
      return B.NetworkType_ibN;
    }
  };
  A.WalletXRPNetwork.prototype = {
    get$variabels() {
      return [this.value];
    },
    get$type() {
      return B.NetworkType_v4g;
    },
    copyWith$1$coinParam(coinParam) {
      type$.nullable_RippleNetworkParams._as(coinParam);
      return new A.WalletXRPNetwork(this.value, coinParam);
    },
    get$value() {
      return this.value;
    },
    get$coinParam() {
      return this.coinParam;
    }
  };
  A.WalletEthereumNetwork.prototype = {
    get$supportWeb3() {
      return true;
    },
    copyWith$1$coinParam(coinParam) {
      type$.nullable_EthereumNetworkParams._as(coinParam);
      return new A.WalletEthereumNetwork(this.value, coinParam);
    },
    get$variabels() {
      return [this.value];
    },
    get$type() {
      return B.NetworkType_ccB;
    },
    get$value() {
      return this.value;
    },
    get$coinParam() {
      return this.coinParam;
    }
  };
  A.WalletTronNetwork.prototype = {
    get$supportWeb3() {
      return true;
    },
    get$variabels() {
      return [this.value];
    },
    get$type() {
      return B.NetworkType_EUu;
    },
    copyWith$1$coinParam(coinParam) {
      type$.nullable_TronNetworkParams._as(coinParam);
      return new A.WalletTronNetwork(this.value, coinParam);
    },
    get$value() {
      return this.value;
    },
    get$coinParam() {
      return this.coinParam;
    }
  };
  A.WalletSolanaNetwork.prototype = {
    get$supportWeb3() {
      return true;
    },
    copyWith$1$coinParam(coinParam) {
      type$.nullable_SolanaNetworkParams._as(coinParam);
      return new A.WalletSolanaNetwork(this.value, coinParam);
    },
    get$variabels() {
      return [this.value];
    },
    get$type() {
      return B.NetworkType_Rlb;
    },
    get$value() {
      return this.value;
    },
    get$coinParam() {
      return this.coinParam;
    }
  };
  A.WalletCardanoNetwork.prototype = {
    get$variabels() {
      return [this.value];
    },
    get$type() {
      return B.NetworkType_4By;
    },
    copyWith$1$coinParam(coinParam) {
      type$.nullable_CardanoNetworkParams._as(coinParam);
      return new A.WalletCardanoNetwork(this.value, coinParam);
    },
    get$value() {
      return this.value;
    },
    get$coinParam() {
      return this.coinParam;
    }
  };
  A.WalletCosmosNetwork.prototype = {
    get$supportWeb3() {
      return true;
    },
    get$variabels() {
      return [this.value];
    },
    get$type() {
      return B.NetworkType_kHF;
    },
    copyWith$1$coinParam(coinParam) {
      type$.nullable_CosmosNetworkParams._as(coinParam);
      return new A.WalletCosmosNetwork(this.value, coinParam);
    },
    get$value() {
      return this.value;
    },
    get$coinParam() {
      return this.coinParam;
    }
  };
  A.WalletTonNetwork.prototype = {
    get$supportWeb3() {
      return true;
    },
    get$variabels() {
      return [this.value];
    },
    get$type() {
      return B.NetworkType_zIX;
    },
    copyWith$1$coinParam(coinParam) {
      type$.nullable_TonNetworkParams._as(coinParam);
      return new A.WalletTonNetwork(this.value, coinParam);
    },
    get$value() {
      return this.value;
    },
    get$coinParam() {
      return this.coinParam;
    }
  };
  A.WalletSubstrateNetwork.prototype = {
    get$variabels() {
      return [this.value];
    },
    get$type() {
      return B.NetworkType_2OH;
    },
    copyWith$1$coinParam(coinParam) {
      type$.nullable_SubstrateNetworkParams._as(coinParam);
      return new A.WalletSubstrateNetwork(this.value, coinParam);
    },
    get$genesisBlock() {
      var genesis,
        t1 = this.coinParam.gnesisBlock;
      if (t1 == null) {
        genesis = B.Map_G0e9e.$index(0, this.value);
        if (genesis == null)
          A.throwExpression(B.WalletException_network_does_not_exist_null);
        t1 = genesis;
      }
      return t1;
    },
    get$supportWeb3() {
      return true;
    },
    get$value() {
      return this.value;
    },
    get$coinParam() {
      return this.coinParam;
    }
  };
  A.WalletStellarNetwork.prototype = {
    get$supportWeb3() {
      return true;
    },
    get$variabels() {
      return [this.value];
    },
    get$type() {
      return B.NetworkType_rCZ;
    },
    copyWith$1$coinParam(coinParam) {
      type$.nullable_StellarNetworkParams._as(coinParam);
      return new A.WalletStellarNetwork(this.value, coinParam);
    },
    get$value() {
      return this.value;
    },
    get$coinParam() {
      return this.coinParam;
    }
  };
  A.WalletMoneroNetwork.prototype = {
    get$variabels() {
      return [this.value];
    },
    get$type() {
      return B.NetworkType_NkQ;
    },
    copyWith$1$coinParam(coinParam) {
      type$.nullable_MoneroNetworkParams._as(coinParam);
      return new A.WalletMoneroNetwork(this.value, coinParam);
    },
    get$value() {
      return this.value;
    },
    get$coinParam() {
      return this.coinParam;
    }
  };
  A.WalletAptosNetwork.prototype = {
    get$supportWeb3() {
      return true;
    },
    copyWith$1$coinParam(coinParam) {
      type$.nullable_AptosNetworkParams._as(coinParam);
      return new A.WalletAptosNetwork(this.value, coinParam);
    },
    get$variabels() {
      return [this.value];
    },
    get$type() {
      return B.NetworkType_8zS;
    },
    get$value() {
      return this.value;
    },
    get$coinParam() {
      return this.coinParam;
    }
  };
  A.WalletSuiNetwork.prototype = {
    get$supportWeb3() {
      return true;
    },
    copyWith$1$coinParam(coinParam) {
      type$.nullable_SuiNetworkParams._as(coinParam);
      return new A.WalletSuiNetwork(this.value, coinParam);
    },
    get$variabels() {
      return [this.value];
    },
    get$type() {
      return B.NetworkType_cHa;
    },
    get$value() {
      return this.value;
    },
    get$coinParam() {
      return this.coinParam;
    }
  };
  A._WalletNetwork_Object_Equatable.prototype = {};
  A._WalletNetwork_Object_Equatable_CborSerializable.prototype = {};
  A.NetworkCoinParams.prototype = {};
  A._NetworkCoinParams_Object_CborSerializable.prototype = {};
  A.AptosChainType.prototype = {
    _enumToString$0() {
      return "AptosChainType." + this._name;
    }
  };
  A.AptosChainType_fromValue_closure.prototype = {
    call$1(e) {
      return type$.AptosChainType._as(e).id === this.value;
    },
    $signature: 120
  };
  A.AptosChainType_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 0
  };
  A.AptosNetworkParams.prototype = {
    updateParams$4$addressExplorer$token$transactionExplorer$updateProviders(addressExplorer, token, transactionExplorer, updateProviders) {
      var t1, t2, _this = this;
      type$.nullable_List_APIProvider._as(updateProviders);
      t1 = A.NetworkCoinParams_validateUpdateParams(_this.token, token);
      t2 = new A.CastList(updateProviders, A._arrayInstanceType(updateProviders)._eval$1("CastList<1,AptosAPIProvider>"));
      return A.AptosNetworkParams$(addressExplorer, _this.aptosChainType, _this.bip32CoinType, _this.chainType, t2, t1, transactionExplorer);
    }
  };
  A.AptosNetworkParams_AptosNetworkParams$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.AptosAPIProvider_AptosAPIProvider$fromCborBytesOrObject(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 121
  };
  A.BitcoinParams.prototype = {
    updateParams$4$addressExplorer$token$transactionExplorer$updateProviders(addressExplorer, token, transactionExplorer, updateProviders) {
      var t1;
      type$.nullable_List_APIProvider._as(updateProviders);
      t1 = new A.CastList(updateProviders, A._arrayInstanceType(updateProviders)._eval$1("CastList<1,BaseBitcoinAPIProvider>"));
      return A.BitcoinParams$(addressExplorer, t1, A.NetworkCoinParams_validateUpdateParams(this.token, token), this.transacationNetwork, transactionExplorer);
    }
  };
  A.BitcoinParams_BitcoinParams$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.BaseBitcoinAPIProvider_BaseBitcoinAPIProvider$fromCborBytesOrObject(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 122
  };
  A.CardanoNetworkParams.prototype = {
    updateParams$4$addressExplorer$token$transactionExplorer$updateProviders(addressExplorer, token, transactionExplorer, updateProviders) {
      var t1, t2, _this = this;
      type$.nullable_List_APIProvider._as(updateProviders);
      t1 = A.NetworkCoinParams_validateUpdateParams(_this.token, token);
      t2 = new A.CastList(updateProviders, A._arrayInstanceType(updateProviders)._eval$1("CastList<1,CardanoAPIProvider>"));
      return A.CardanoNetworkParams$(addressExplorer, _this.chainType, _this.magic, t2, t1, transactionExplorer);
    }
  };
  A.CardanoNetworkParams_CardanoNetworkParams$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.CardanoAPIProvider_CardanoAPIProvider$fromCborBytesOrObject(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 123
  };
  A.CosmosNetworkParams.prototype = {
    updateParams$4$addressExplorer$token$transactionExplorer$updateProviders(addressExplorer, token, transactionExplorer, updateProviders) {
      var t1, t2, _this = this;
      type$.nullable_List_APIProvider._as(updateProviders);
      t1 = A.NetworkCoinParams_validateUpdateParams(_this.token, token);
      t2 = new A.CastList(updateProviders, A._arrayInstanceType(updateProviders)._eval$1("CastList<1,CosmosAPIProvider>"));
      return A.CosmosNetworkParams_CosmosNetworkParams(addressExplorer, null, _this.chainId, _this.chainRegisteryName, _this.chainType, _this.denom, _this.feeTokens, _this.hrp, _this.keysAlgs, _this.networkConstantUri, _this.networkType, t2, t1, transactionExplorer);
    }
  };
  A.CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.CosmosAPIProvider_CosmosAPIProvider$fromCborBytesOrObject(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 124
  };
  A.CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject_closure0.prototype = {
    call$1(e) {
      return A.CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 125
  };
  A.CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject_closure1.prototype = {
    call$1(e) {
      return A.CosmosKeysAlgs_fromName(type$.CborStringValue._as(e).value);
    },
    $signature: 126
  };
  A.EthereumNetworkParams.prototype = {
    updateParams$4$addressExplorer$token$transactionExplorer$updateProviders(addressExplorer, token, transactionExplorer, updateProviders) {
      var t1, t2, _this = this;
      type$.nullable_List_APIProvider._as(updateProviders);
      t1 = A.NetworkCoinParams_validateUpdateParams(_this.token, token);
      t2 = new A.CastList(updateProviders, A._arrayInstanceType(updateProviders)._eval$1("CastList<1,EthereumAPIProvider>"));
      return A.EthereumNetworkParams_EthereumNetworkParams(addressExplorer, null, _this.chainId, _this.chainType, _this.defaultNetwork, t2, _this.supportEIP1559, t1, transactionExplorer);
    }
  };
  A.EthereumNetworkParams_EthereumNetworkParams$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.EthereumAPIProvider_EthereumAPIProvider$fromCborBytesOrObject(type$.nullable_CborObject._as(e));
    },
    $signature: 127
  };
  A.MoneroNetworkParams.prototype = {
    updateParams$4$addressExplorer$token$transactionExplorer$updateProviders(addressExplorer, token, transactionExplorer, updateProviders) {
      var t1, t2, _this = this;
      type$.nullable_List_APIProvider._as(updateProviders);
      t1 = A.NetworkCoinParams_validateUpdateParams(_this.token, token);
      t2 = new A.CastList(updateProviders, A._arrayInstanceType(updateProviders)._eval$1("CastList<1,MoneroAPIProvider>"));
      return A.MoneroNetworkParams$(addressExplorer, _this.chainType, _this.network, t2, _this.rctHeight, t1, transactionExplorer);
    }
  };
  A.MoneroNetworkParams_MoneroNetworkParams$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject(type$.CborObject._as(e));
    },
    $signature: 128
  };
  A.RippleNetworkParams.prototype = {
    updateParams$4$addressExplorer$token$transactionExplorer$updateProviders(addressExplorer, token, transactionExplorer, updateProviders) {
      var t1, t2, _this = this;
      type$.nullable_List_APIProvider._as(updateProviders);
      t1 = A.NetworkCoinParams_validateUpdateParams(_this.token, token);
      t2 = new A.CastList(updateProviders, A._arrayInstanceType(updateProviders)._eval$1("CastList<1,RippleAPIProvider>"));
      return A.RippleNetworkParams$(addressExplorer, _this.chainType, _this.networkId, t2, t1, transactionExplorer);
    }
  };
  A.RippleNetworkParams_RippleNetworkParams$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.RippleAPIProvider_RippleAPIProvider$fromCborBytesOrObject(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 129
  };
  A.SolanaNetworkType.prototype = {
    _enumToString$0() {
      return "SolanaNetworkType." + this._name;
    }
  };
  A.SolanaNetworkType_fromValue_closure.prototype = {
    call$1(e) {
      return type$.SolanaNetworkType._as(e).value === this.value;
    },
    $signature: 130
  };
  A.SolanaNetworkType_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 0
  };
  A.SolanaNetworkParams.prototype = {
    updateParams$4$addressExplorer$token$transactionExplorer$updateProviders(addressExplorer, token, transactionExplorer, updateProviders) {
      var t1, t2, _this = this;
      type$.nullable_List_APIProvider._as(updateProviders);
      t1 = A.NetworkCoinParams_validateUpdateParams(_this.token, token);
      t2 = new A.CastList(updateProviders, A._arrayInstanceType(updateProviders)._eval$1("CastList<1,SolanaAPIProvider>"));
      return A.SolanaNetworkParams$(addressExplorer, _this.chainId, _this.chainType, t2, t1, transactionExplorer, _this.type);
    }
  };
  A.SolanaNetworkParams_SolanaNetworkParams$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.SolanaAPIProvider_SolanaAPIProvider$fromCborBytesOrObject(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 131
  };
  A.StellarChainType.prototype = {
    _enumToString$0() {
      return "StellarChainType." + this._name;
    }
  };
  A.StellarChainType_fromValue_closure.prototype = {
    call$1(e) {
      return type$.StellarChainType._as(e).value === this.value;
    },
    $signature: 132
  };
  A.StellarChainType_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 0
  };
  A.StellarNetworkParams.prototype = {
    updateParams$4$addressExplorer$token$transactionExplorer$updateProviders(addressExplorer, token, transactionExplorer, updateProviders) {
      var t1, t2, _this = this;
      type$.nullable_List_APIProvider._as(updateProviders);
      t1 = A.NetworkCoinParams_validateUpdateParams(_this.token, token);
      t2 = new A.CastList(updateProviders, A._arrayInstanceType(updateProviders)._eval$1("CastList<1,StellarAPIProvider>"));
      return A.StellarNetworkParams$(addressExplorer, _this.chainType, t2, _this.stellarChainType, t1, transactionExplorer);
    }
  };
  A.StellarNetworkParams_StellarNetworkParams$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.StellarAPIProvider_StellarAPIProvider$fromCborBytesOrObject(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 133
  };
  A.SubstrateNetworkParams.prototype = {
    updateParams$4$addressExplorer$token$transactionExplorer$updateProviders(addressExplorer, token, transactionExplorer, updateProviders) {
      var t1, t2, _this = this;
      type$.nullable_List_APIProvider._as(updateProviders);
      t1 = A.NetworkCoinParams_validateUpdateParams(_this.token, token);
      t2 = new A.CastList(updateProviders, A._arrayInstanceType(updateProviders)._eval$1("CastList<1,SubstrateAPIProvider>"));
      return A.SubstrateNetworkParams$(addressExplorer, null, _this.chainType, _this.gnesisBlock, _this.keyAlgorithms, t2, _this.specVersion, _this.ss58Format, _this.substrateChainType, t1, transactionExplorer);
    }
  };
  A.SubstrateNetworkParams_SubstrateNetworkParams$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.SubstrateAPIProvider_SubstrateAPIProvider$fromCborBytesOrObject(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 134
  };
  A.SubstrateNetworkParams_SubstrateNetworkParams$fromCborBytesOrObject_closure0.prototype = {
    call$1(e) {
      return A.SubstrateKeyAlgorithm_fromValue(type$.CborIntValue._as(e).value);
    },
    $signature: 135
  };
  A.SuiChainType.prototype = {
    _enumToString$0() {
      return "SuiChainType." + this._name;
    }
  };
  A.SuiChainType_fromValue_closure.prototype = {
    call$1(e) {
      return type$.SuiChainType._as(e).value === this.value;
    },
    $signature: 136
  };
  A.SuiChainType_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 0
  };
  A.SuiNetworkParams.prototype = {
    updateParams$4$addressExplorer$token$transactionExplorer$updateProviders(addressExplorer, token, transactionExplorer, updateProviders) {
      var t1, t2, _this = this;
      type$.nullable_List_APIProvider._as(updateProviders);
      t1 = A.NetworkCoinParams_validateUpdateParams(_this.token, token);
      t2 = new A.CastList(updateProviders, A._arrayInstanceType(updateProviders)._eval$1("CastList<1,SuiAPIProvider>"));
      return A.SuiNetworkParams$(addressExplorer, _this.bip32CoinType, _this.chainType, _this.identifier, t2, _this.suiChain, t1, transactionExplorer);
    }
  };
  A.SuiNetworkParams_SuiNetworkParams$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.SuiAPIProvider_SuiAPIProvider$fromCborBytesOrObject(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 137
  };
  A.TonNetworkParams.prototype = {
    get$tonChainIdentifier() {
      var _0_0 = A.TonChain_fromWorkchain(this.workchain);
      if (B.TonChain_m1_m3.$eq(0, _0_0))
        return "ton:testnet";
      if (B.TonChain_0_m239.$eq(0, _0_0))
        return "ton:mainnet";
      throw A.wrapException(A.UnimplementedError$("Invalid ton network."));
    },
    updateParams$4$addressExplorer$token$transactionExplorer$updateProviders(addressExplorer, token, transactionExplorer, updateProviders) {
      var t1, t2, _this = this;
      type$.nullable_List_APIProvider._as(updateProviders);
      t1 = A.NetworkCoinParams_validateUpdateParams(_this.token, token);
      t2 = new A.CastList(updateProviders, A._arrayInstanceType(updateProviders)._eval$1("CastList<1,TonAPIProvider>"));
      return A.TonNetworkParams$(addressExplorer, _this.chainType, t2, t1, transactionExplorer, _this.workchain);
    }
  };
  A.TonNetworkParams_TonNetworkParams$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.TonAPIProvider_TonAPIProvider$fromCborBytesOrObject(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 138
  };
  A.TronNetworkParams.prototype = {
    updateParams$4$addressExplorer$token$transactionExplorer$updateProviders(addressExplorer, token, transactionExplorer, updateProviders) {
      var t1, t2;
      type$.nullable_List_APIProvider._as(updateProviders);
      t1 = A.NetworkCoinParams_validateUpdateParams(this.token, token);
      t2 = new A.CastList(updateProviders, A._arrayInstanceType(updateProviders)._eval$1("CastList<1,TronAPIProvider>"));
      return A.TronNetworkParams$(addressExplorer, this.chainType, t2, t1, transactionExplorer);
    }
  };
  A.TronNetworkParams_TronNetworkParams$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.TronAPIProvider_TronAPIProvider$fromCborBytesOrObject(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 139
  };
  A.CosmosFeeToken.prototype = {};
  A.CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.IntegerBalance_IntegerBalance$token(type$.BigInt._as(e), this.token, true);
    },
    $signature: 48
  };
  A.CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure0.prototype = {
    call$1(e) {
      return A.IntegerBalance_IntegerBalance$token(type$.BigInt._as(e), this.token, true);
    },
    $signature: 48
  };
  A._CosmosFeeToken_Object_CborSerializable.prototype = {};
  A.CosmosNetworkTypes.prototype = {};
  A.CosmosNetworkTypes_CosmosNetworkTypes$fromValue_closure.prototype = {
    call$1(e) {
      return type$.CosmosNetworkTypes._as(e).value === this.value;
    },
    $signature: 141
  };
  A.CosmosNetworkTypes_CosmosNetworkTypes$fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_PNe);
    },
    $signature: 0
  };
  A.SubstrateChainType.prototype = {
    _enumToString$0() {
      return "SubstrateChainType." + this._name;
    }
  };
  A.SubstrateChainType_fromValue_closure.prototype = {
    call$1(e) {
      return type$.SubstrateChainType._as(e).value === this.value;
    },
    $signature: 142
  };
  A.SubstrateChainType_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 0
  };
  A.TonAccountContextType.prototype = {
    _enumToString$0() {
      return "TonAccountContextType." + this._name;
    }
  };
  A.TonAccountContextType_fromTag_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_bytesEqual(type$.TonAccountContextType._as(e).tag, this.tag);
    },
    $signature: 143
  };
  A.TonAccountContextType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_account_details_null);
    },
    $signature: 0
  };
  A.TonAccountContext.prototype = {};
  A.TonAccountLegacyContext.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.version.name, this.bouncable], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.version.name];
    }
  };
  A.TonAccountSubWalletContext.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.version.name, _this.bouncable, _this.subwalletId], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.version.name, this.subwalletId];
    }
  };
  A.TonAccountV5CustomContext.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.version.name, _this.bouncable, _this.walletId], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.version.name, this.walletId];
    }
  };
  A.TonAccountV5SubWalletContext.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.version.name, _this.bouncable, _this.subwalletId], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.version.name, this.subwalletId];
    }
  };
  A._TonAccountContext_Object_CborSerializable.prototype = {};
  A._TonAccountContext_Object_CborSerializable_Equatable.prototype = {};
  A.TronChainType.prototype = {
    _enumToString$0() {
      return "TronChainType." + this._name;
    }
  };
  A.TronChainType_fromId_closure.prototype = {
    call$1(e) {
      return type$.TronChainType._as(e).id === this.id;
    },
    $signature: 216
  };
  A.TronChainType_fromId_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_RyO);
    },
    $signature: 0
  };
  A.WalletLockTime.prototype = {
    _enumToString$0() {
      return "WalletLockTime." + this._name;
    }
  };
  A.WalletLockTime_fromValue_closure.prototype = {
    call$1(element) {
      return type$.WalletLockTime._as(element).value === this.value;
    },
    $signature: 145
  };
  A.WalletLockTime_fromValue_closure0.prototype = {
    call$0() {
      return B.WalletLockTime_300_fiveMinute;
    },
    $signature: 146
  };
  A.CoingeckoCoin.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["id", this.apiId, "name", this.coinName, "symbol", this.symbol], type$.String, type$.dynamic);
    }
  };
  A._CoingeckoCoin_Object_CborSerializable.prototype = {};
  A._CoingeckoCoin_Object_CborSerializable_JsonSerialization.prototype = {};
  A.APPToken.prototype = {};
  A.Token.prototype = {
    get$variabels() {
      return [this.name, this.symbol, this.decimal];
    },
    toString$0(_) {
      return "Token: " + this.name;
    }
  };
  A.Token_Token$deserialize_closure.prototype = {
    call$1(e) {
      return A.APPImage_APPImage$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 147
  };
  A.Token_Token$deserialize_closure0.prototype = {
    call$1(e) {
      var cbor = A.CborSerializable_decodeCborTags(null, type$.CborTagValue_dynamic._as(e), B.List_60_12, type$.CborListValue_dynamic),
        t1 = type$.nullable_String;
      return new A.CoingeckoCoin(A.ExtractCborList_elementAt(cbor, 0, type$.String), A.ExtractCborList_elementAt(cbor, 1, t1), A.ExtractCborList_elementAt(cbor, 2, t1));
    },
    $signature: 148
  };
  A._APPToken_Object_CborSerializable.prototype = {};
  A._APPToken_Object_CborSerializable_Equatable.prototype = {};
  A.HDWallets.prototype = {
    getInitializeWallet$0() {
      var t2,
        t1 = this._wallets;
      if (t1.get$isEmpty(t1))
        throw A.wrapException(B.WalletException_incomplete_wallet_setup_null);
      t2 = this._defaultWallet;
      if (t1.containsKey$1(t2)) {
        t1 = t1.$index(0, t2);
        t1.toString;
        return t1;
      }
      t1 = t1.get$values();
      return t1.get$first(t1);
    }
  };
  A.HDWallets_HDWallets$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      var t4, t5, t6, t7, lockTime0,
        cbor = A.CborSerializable_decodeCborTags(null, type$.nullable_CborObject._as(e), B.List_60, type$.CborListValue_dynamic),
        setting = A.ExtractCborList_elementAt(cbor, 5, type$.nullable_int),
        network = A.ExtractCborList_elementAt(cbor, 4, type$.int),
        lockTime = setting != null ? A.WalletLockTime_fromValue(setting) : B.WalletLockTime_300_fiveMinute,
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAt(cbor, 0, t1),
        t3 = A.ExtractCborList_elementAt(cbor, 1, t1);
      t1 = A.ExtractCborList_elementAt(cbor, 2, t1);
      t4 = A.ExtractCborList_elementAt(cbor, 3, type$.bool);
      t5 = A.ExtractCborList_elementAt(cbor, 6, type$.DateTime);
      t6 = A.ExtractCborList_elementAt(cbor, 7, type$.nullable_bool);
      if (t6 == null)
        t6 = true;
      if (B.JSString_methods.trim$0(t3).length !== 0) {
        t7 = t3.length;
        t7 = t7 < 3 || t7 > 15;
      } else
        t7 = true;
      if (t7)
        A.throwExpression(B.WalletException_data_verification_failed_null);
      lockTime0 = lockTime.value / 60 | 0;
      if (lockTime0 < 1 || lockTime0 > 30)
        A.throwExpression(B.WalletException_data_verification_failed_null);
      return new A.HDWallet(t2, t3, t1, t4, t6, lockTime, network, t5 == null ? new A.DateTime(Date.now(), 0, false) : t5);
    },
    $signature: 149
  };
  A.HDWallets_HDWallets$fromCborBytesOrObject_closure0.prototype = {
    call$1(e) {
      type$.HDWallet._as(e);
      return new A.MapEntry(e.name, e, type$.MapEntry_String_HDWallet);
    },
    $signature: 150
  };
  A.HDWallet.prototype = {};
  A._HDWallets_Object_CborSerializable.prototype = {};
  A.Web3RequestException.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["message", _this.message, "code", _this.code, "walletCode", _this.walletCode, "data", _this.data], type$.String, type$.dynamic);
    },
    toResponseMessage$0() {
      var _this = this;
      return new A.Web3ExceptionMessage(_this.message, _this.code, _this.walletCode, _this.data, null);
    },
    toString$0(_) {
      return this.message;
    },
    get$variabels() {
      return [this.code, this.message];
    }
  };
  A._Web3RequestException_Object_Equatable.prototype = {};
  A.Web3ChainMessage.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.authenticated.toCbor$0()], type$.JSArray_CborTagValue_dynamic);
      return new A.CborTagValue(A.List_List$unmodifiable(this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_CborTagValue_dynamic), type$.CborTagValue_dynamic);
    }
  };
  A.Web3EncryptedMessage.prototype = {
    toCbor$0() {
      var t2, t3,
        t1 = this.message;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = this.nonce;
      A.BytesUtils_validateListOfBytes(t3);
      t3 = A._setArrayType([new A.CborBytesValue(t1), new A.CborBytesValue(A.List_List$unmodifiable(t3, t2))], type$.JSArray_CborBytesValue);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_0_10_200_0, t2), new A.CborListValue(t3, true, type$.CborListValue_CborBytesValue), type$.CborTagValue_dynamic);
    }
  };
  A._Web3EncryptedMessage_Object_CborSerializable.prototype = {};
  A.Web3ExceptionMessage.prototype = {
    toCbor$0() {
      var _this = this;
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_15, type$.int), new A.CborListValue([_this.message, _this.code, _this.walletCode, _this.data, null], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    toJson$0() {
      var _this = this,
        t1 = A.LinkedHashMap_LinkedHashMap$_literal(["message", _this.message, "code", _this.code, "walletCode", _this.walletCode, "data", _this.data], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.Web3ExceptionMessage_toJson_closure());
      return t1;
    }
  };
  A.Web3ExceptionMessage_toJson_closure.prototype = {
    call$2(k, v) {
      A._asString(k);
      return v == null;
    },
    $signature: 151
  };
  A.Web3WalletResponseMessage.prototype = {
    toCbor$0() {
      var t4,
        t1 = A.StringUtils_fromJson(A.LinkedHashMap_LinkedHashMap$_literal(["result", true], type$.String, type$.nullable_Object)),
        t2 = this.authenticated.toCbor$0(),
        t3 = this.network.tag;
      A.BytesUtils_validateListOfBytes(t3);
      t4 = type$.int;
      t3 = A.List_List$unmodifiable(t3, t4);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_14, t4), new A.CborListValue([t1, t2, new A.CborBytesValue(t3)], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3MessageCore.prototype = {};
  A._Web3MessageCore_Object_CborSerializable.prototype = {};
  A.Web3MessageTypes.prototype = {
    _enumToString$0() {
      return "Web3MessageTypes." + this._name;
    }
  };
  A.Web3AccountAcitvity.prototype = {
    toCbor$0() {
      var _this = this;
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_151_1, type$.int), new A.CborListValue([_this.method, new A.CborEpochFloatValue(_this.date), _this.path, _this.address, _this.id], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      var _this = this;
      return [_this.method, _this.date, _this.path, _this.address, _this.id];
    }
  };
  A._Web3AccountAcitvity_Object_CborSerializable.prototype = {};
  A._Web3AccountAcitvity_Object_CborSerializable_Equatable.prototype = {};
  A.Web3RequestAuthentication.prototype = {};
  A.Web3APPAuthentication.prototype = {
    createAuth$1(networks) {
      var auths, t1, web3Networks, t2, t3, t4, _i, i, web3Chain, t5, relatedChains, _this = this;
      type$.List_Web3ChainNetworkData_WalletNetwork_NetworkCoinParams_APIProvider._as(networks);
      auths = A._setArrayType([], type$.JSArray_Web3ChainAuthenticated_Web3ChainAccount_dynamic);
      t1 = type$.NetworkType;
      web3Networks = A.ListHelper_clone(B.List_vIy, t1);
      for (t2 = web3Networks.length, t3 = J.getInterceptor$ax(networks), t4 = type$.Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider, _i = 0; _i < web3Networks.length; web3Networks.length === t2 || (0, A.throwConcurrentModificationError)(web3Networks), ++_i) {
        i = web3Networks[_i];
        web3Chain = _this.getChainFromNetworkType$1$2$allowDisable(i, true, t4);
        if (i === B.NetworkType_yCL || i === B.NetworkType_ibN) {
          t5 = t3.where$1(networks, new A.Web3APPAuthentication_createAuth_closure());
          relatedChains = A.List_List$_of(t5, t5.$ti._eval$1("Iterable.E"));
        } else {
          t5 = t3.where$1(networks, new A.Web3APPAuthentication_createAuth_closure0(i));
          relatedChains = A.List_List$_of(t5, t5.$ti._eval$1("Iterable.E"));
        }
        if (relatedChains.length === 0)
          continue;
        switch (i) {
          case B.NetworkType_ccB:
            B.JSArray_methods.add$1(auths, web3Chain.createAuthenticated$1(new A.CastList(relatedChains, A._arrayInstanceType(relatedChains)._eval$1("CastList<1,Web3ChainNetworkData<WalletEthereumNetwork>>"))));
            break;
          case B.NetworkType_Rlb:
            B.JSArray_methods.add$1(auths, web3Chain.createAuthenticated$1(new A.CastList(relatedChains, A._arrayInstanceType(relatedChains)._eval$1("CastList<1,Web3ChainNetworkData<WalletSolanaNetwork>>"))));
            break;
          case B.NetworkType_rCZ:
            B.JSArray_methods.add$1(auths, web3Chain.createAuthenticated$1(new A.CastList(relatedChains, A._arrayInstanceType(relatedChains)._eval$1("CastList<1,Web3ChainNetworkData<WalletStellarNetwork>>"))));
            break;
          case B.NetworkType_zIX:
            B.JSArray_methods.add$1(auths, web3Chain.createAuthenticated$1(new A.CastList(relatedChains, A._arrayInstanceType(relatedChains)._eval$1("CastList<1,Web3ChainNetworkData<WalletTonNetwork>>"))));
            break;
          case B.NetworkType_EUu:
            B.JSArray_methods.add$1(auths, web3Chain.createAuthenticated$1(new A.CastList(relatedChains, A._arrayInstanceType(relatedChains)._eval$1("CastList<1,Web3ChainNetworkData<WalletTronNetwork>>"))));
            break;
          case B.NetworkType_2OH:
            B.JSArray_methods.add$1(auths, web3Chain.createAuthenticated$1(new A.CastList(relatedChains, A._arrayInstanceType(relatedChains)._eval$1("CastList<1,Web3ChainNetworkData<WalletSubstrateNetwork>>"))));
            break;
          case B.NetworkType_8zS:
            B.JSArray_methods.add$1(auths, web3Chain.createAuthenticated$1(new A.CastList(relatedChains, A._arrayInstanceType(relatedChains)._eval$1("CastList<1,Web3ChainNetworkData<WalletAptosNetwork>>"))));
            break;
          case B.NetworkType_cHa:
            B.JSArray_methods.add$1(auths, web3Chain.createAuthenticated$1(new A.CastList(relatedChains, A._arrayInstanceType(relatedChains)._eval$1("CastList<1,Web3ChainNetworkData<WalletSuiNetwork>>"))));
            break;
          case B.NetworkType_kHF:
            B.JSArray_methods.add$1(auths, web3Chain.createAuthenticated$1(new A.CastList(relatedChains, A._arrayInstanceType(relatedChains)._eval$1("CastList<1,Web3ChainNetworkData<WalletCosmosNetwork>>"))));
            break;
          case B.NetworkType_yCL:
          case B.NetworkType_ibN:
            B.JSArray_methods.add$1(auths, web3Chain.createAuthenticated$1(new A.CastList(relatedChains, A._arrayInstanceType(relatedChains)._eval$1("CastList<1,Web3ChainNetworkData<WalletBitcoinNetwork>>"))));
            break;
        }
      }
      if (B.JSArray_methods.remove$1(web3Networks, B.NetworkType_ibN)) {
        t2 = A.List_List$_of(web3Networks, t1);
        t2.push(B.NetworkType_yCL);
        web3Networks = t2;
      }
      t2 = _this.token;
      t3 = A.LinkedHashSet_LinkedHashSet$from(web3Networks, A._arrayInstanceType(web3Networks)._precomputed1);
      t3 = A.List_List$_of(t3, A._instanceType(t3)._precomputed1);
      t4 = A.List_List$unmodifiable(auths, type$.Web3ChainAuthenticated_Web3ChainAccount_dynamic);
      A.BytesUtils_validateListOfBytes(t2);
      return new A.Web3APPData(_this._active, _this.applicationId, A.List_List$unmodifiable(t2, type$.int), A.List_List$unmodifiable(t3, t1), t4);
    },
    toCbor$0() {
      var t2, t3, t4, t5, t6, t7, t8, _this = this,
        t1 = _this.icon;
      t1 = t1 == null ? null : t1.toCbor$0();
      t2 = type$.CborTagValue_dynamic;
      t3 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, t2);
      for (t4 = _this._chains.get$entries(), t4 = t4.get$iterator(t4); t4.moveNext$0();) {
        t5 = t4.get$current();
        t3.$indexSet(0, t5.key.name, t5.value.toCbor$0());
      }
      t4 = _this.token;
      A.BytesUtils_validateListOfBytes(t4);
      t5 = type$.int;
      t4 = A.List_List$unmodifiable(t4, t5);
      t6 = _this._activities;
      t7 = A._arrayInstanceType(t6);
      t8 = t7._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t6 = A.List_List$_of(new A.MappedListIterable(t6, t7._eval$1("CborTagValue<@>(1)")._as(new A.Web3APPAuthentication_toCbor_closure()), t8), t8._eval$1("ListIterable.E"));
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_0_0, t5), new A.CborListValue([_this.applicationId, _this._authenticated$_name, t1, new A.CborMapValue(t3, true, type$.CborMapValue_of_String_and_CborTagValue_dynamic), _this._active, new A.CborBytesValue(t4), _this.applicationKey, new A.CborListValue(t6, true, type$.CborListValue_CborTagValue_dynamic)], true, type$.CborListValue_nullable_Object), t2);
    },
    disconnectChain$1(network) {
      var t2, chains,
        t1 = this._chains.$index(0, network),
        updateChain = t1 == null ? null : t1.disconnect$0();
      if (updateChain == null)
        return;
      t1 = type$.NetworkType;
      t2 = type$.Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider;
      chains = A.LinkedHashMap_LinkedHashMap$from(this._chains, t1, t2);
      chains.$indexSet(0, network, updateChain);
      this._chains = A.ConstantMap_ConstantMap$from(chains, t1, t2);
    },
    getChainFromNetworkType$1$2$allowDisable(network, allowDisable, $T) {
      var chain;
      A.checkTypeBound($T, type$.Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider, "T", "getChainFromNetworkType");
      chain = this._chains.$index(0, network);
      if (network === B.NetworkType_yCL || network === B.NetworkType_ibN)
        chain = this._chains.$index(0, B.NetworkType_yCL);
      switch (network) {
        case B.NetworkType_ccB:
          if (chain == null)
            chain = A.Web3EthereumChain$_(B.List_empty0, 100);
          break;
        case B.NetworkType_EUu:
          if (chain == null)
            chain = A.Web3TronChain$_(B.List_empty1, 1001);
          break;
        case B.NetworkType_Rlb:
          if (chain == null)
            chain = A.Web3SolanaChain$_(B.List_empty2, 33);
          break;
        case B.NetworkType_zIX:
          if (chain == null)
            chain = A.Web3TonChain$_(B.List_empty3, 300);
          break;
        case B.NetworkType_rCZ:
          if (chain == null)
            chain = A.Web3StellarChain$_(B.List_empty4, 600);
          break;
        case B.NetworkType_2OH:
          if (chain == null)
            chain = A.Web3SubstrateChain$_(B.List_empty5, 400);
          break;
        case B.NetworkType_8zS:
          if (chain == null)
            chain = A.Web3AptosChain$_(B.List_empty6, 810);
          break;
        case B.NetworkType_cHa:
          if (chain == null)
            chain = A.Web3SuiChain$_(B.List_empty7, 800);
          break;
        case B.NetworkType_kHF:
          if (chain == null)
            chain = A.Web3CosmosChain$_(B.List_empty8, 200);
          break;
        case B.NetworkType_yCL:
        case B.NetworkType_ibN:
          if (chain == null)
            chain = A.Web3BitcoinChain$_(B.List_empty9, 0);
          break;
        default:
          throw A.wrapException(B.Web3RequestException_UFn);
      }
      if (!$T._is(chain))
        throw A.wrapException(B.Web3RequestException_ce8);
      return chain;
    }
  };
  A.Web3APPAuthentication_createAuth_closure.prototype = {
    call$1(e) {
      var t1 = type$.Web3ChainNetworkData_WalletNetwork_NetworkCoinParams_APIProvider._as(e).network.get$type();
      return t1 === B.NetworkType_yCL || t1 === B.NetworkType_ibN;
    },
    $signature: 49
  };
  A.Web3APPAuthentication_createAuth_closure0.prototype = {
    call$1(e) {
      return type$.Web3ChainNetworkData_WalletNetwork_NetworkCoinParams_APIProvider._as(e).network.get$type() === this.i;
    },
    $signature: 49
  };
  A.Web3APPAuthentication_Web3APPAuthentication$deserialize_closure.prototype = {
    call$1(e) {
      return A.APPImage_APPImage$deserialize(e);
    },
    $signature: 153
  };
  A.Web3APPAuthentication_Web3APPAuthentication$deserialize_closure0.prototype = {
    call$1(e) {
      return A.NetworkType_fromName(A._asStringQ(e.get$value()));
    },
    $signature: 154
  };
  A.Web3APPAuthentication_Web3APPAuthentication$deserialize_closure1.prototype = {
    call$1(p0) {
      return A.Web3Chain_Web3Chain$deserialize(p0, type$.dynamic, type$.Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction, type$.ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction, type$.Web3ChainAccount_dynamic, type$.WalletNetwork_NetworkCoinParams_APIProvider);
    },
    $signature: 155
  };
  A.Web3APPAuthentication_Web3APPAuthentication$deserialize_closure2.prototype = {
    call$1(e) {
      var t5,
        values = A.CborSerializable_cborTagValue(null, null, type$.CborTagValue_dynamic._as(e), B.List_151_1, type$.CborListValue_dynamic),
        t1 = A.ExtractCborList_elementAt(values, 0, type$.String),
        t2 = A.ExtractCborList_elementAt(values, 1, type$.nullable_DateTime),
        t3 = type$.nullable_String,
        t4 = A.ExtractCborList_elementAt(values, 2, t3);
      t3 = A.ExtractCborList_elementAt(values, 3, t3);
      t5 = A.ExtractCborList_elementAs(values, 4, type$.nullable_int);
      return new A.Web3AccountAcitvity(t1, t2 == null ? new A.DateTime(Date.now(), 0, false) : t2, t4, t3, t5);
    },
    $signature: 156
  };
  A.Web3APPAuthentication_toCbor_closure.prototype = {
    call$1(e) {
      return type$.Web3AccountAcitvity._as(e).toCbor$0();
    },
    $signature: 157
  };
  A.Web3APPData.prototype = {
    toCbor$0() {
      var t4, t5, t6, _this = this,
        t1 = _this._chains,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("CborTagValue<@>(1)")._as(new A.Web3APPData_toCbor_closure()), t3), t3._eval$1("ListIterable.E"));
      t2 = _this.token;
      A.BytesUtils_validateListOfBytes(t2);
      t3 = type$.int;
      t2 = A.List_List$unmodifiable(t2, t3);
      t4 = _this.networks;
      t5 = A._arrayInstanceType(t4);
      t6 = t5._eval$1("MappedListIterable<1,CborBytesValue>");
      t4 = A.List_List$_of(new A.MappedListIterable(t4, t5._eval$1("CborBytesValue(1)")._as(new A.Web3APPData_toCbor_closure0()), t6), t6._eval$1("ListIterable.E"));
      t1 = A._setArrayType([new A.CborListValue(t1, true, type$.CborListValue_CborTagValue_dynamic), _this.active, new A.CborBytesValue(t2), new A.CborListValue(t4, true, type$.CborListValue_CborBytesValue), _this.applicationId], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_0_0, t3), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3APPData_toCbor_closure.prototype = {
    call$1(e) {
      return type$.Web3ChainAuthenticated_Web3ChainAccount_dynamic._as(e).toCbor$0();
    },
    $signature: 158
  };
  A.Web3APPData_toCbor_closure0.prototype = {
    call$1(e) {
      var t1 = type$.NetworkType._as(e).tag;
      A.BytesUtils_validateListOfBytes(t1);
      return new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
    },
    $signature: 159
  };
  A._Web3APPAuthentication_Web3RequestAuthentication_CborSerializable.prototype = {};
  A._Web3APPData_Object_CborSerializable.prototype = {};
  A._Web3RequestAuthentication_Object_CborSerializable.prototype = {};
  A.Web3ChainAccount.prototype = {
    get$variabels() {
      var _this = this;
      return [_this.keyIndex, _this.get$addressStr(), _this.get$id(), _this._defaultAddress];
    }
  };
  A.Web3ChainIdnetifier.prototype = {
    get$variabels() {
      return [this.id];
    }
  };
  A.Web3ChainDefaultIdnetifier.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.id, this.identifier], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_0_1, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3ChainAuthenticated.prototype = {
    toCbor$0() {
      var t4, t5, _this = this,
        t1 = _this.accounts,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("CborTagValue<@>(1)")._as(new A.Web3ChainAuthenticated_toCbor_closure(_this)), t3), t3._eval$1("ListIterable.E"));
      t2 = type$.CborListValue_CborTagValue_dynamic;
      t3 = _this.get$networks();
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("CborTagValue<@>(1)")._as(new A.Web3ChainAuthenticated_toCbor_closure0()), t5), t5._eval$1("ListIterable.E"));
      t1 = A._setArrayType([new A.CborListValue(t1, true, t2), new A.CborListValue(t3, true, t2), _this.get$currentNetwork().toCbor$0()], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.get$networkType().tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    },
    get$networkType() {
      return this.networkType;
    }
  };
  A.Web3ChainAuthenticated_toCbor_closure.prototype = {
    call$1(e) {
      return A._instanceType(this.$this)._eval$1("Web3ChainAuthenticated.0")._as(e).toCbor$0();
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("CborTagValue<@>(Web3ChainAuthenticated.0)");
    }
  };
  A.Web3ChainAuthenticated_toCbor_closure0.prototype = {
    call$1(e) {
      return type$.Web3ChainIdnetifier._as(e).toCbor$0();
    },
    $signature: 160
  };
  A._Web3ChainAccount_Object_CborSerializable.prototype = {};
  A._Web3ChainAccount_Object_CborSerializable_Equatable.prototype = {};
  A._Web3ChainAuthenticated_Object_CborSerializable.prototype = {};
  A._Web3ChainIdnetifier_Object_CborSerializable.prototype = {};
  A._Web3ChainIdnetifier_Object_CborSerializable_Equatable.prototype = {};
  A.Web3Chain.prototype = {
    get$activeAccounts() {
      var t1 = this._accounts;
      return new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("@<1>")._bind$1(A._instanceType(this)._eval$1("Web3Chain.3"))._eval$1("CastList<1,2>"));
    },
    getCurrentPermissionNetwork$1(networks) {
      var t2, existsNetworks, t3, t4, validAccoutnts, network, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("List<Web3Chain.4>")._as(networks);
      t2 = A._arrayInstanceType(networks);
      existsNetworks = new A.MappedListIterable(networks, t2._eval$1("int(1)")._as(new A.Web3Chain_getCurrentPermissionNetwork_closure(_this)), t2._eval$1("MappedListIterable<1,int>"));
      t2 = _this._accounts;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("WhereIterable<1>");
      validAccoutnts = A.List_List$_of(new A.WhereIterable(t2, t3._eval$1("bool(1)")._as(new A.Web3Chain_getCurrentPermissionNetwork_closure0(_this, existsNetworks)), t4), t4._eval$1("Iterable.E"));
      _this.updateChainAccount$1(validAccoutnts);
      network = existsNetworks.contains$1(0, _this._id) ? B.JSArray_methods.firstWhere$1(networks, new A.Web3Chain_getCurrentPermissionNetwork_closure1(_this)) : null;
      if (network != null)
        return network;
      t1 = t1._eval$1("Web3Chain.4")._as(B.JSArray_methods.firstWhere$1(networks, new A.Web3Chain_getCurrentPermissionNetwork_closure2(_this)));
      _this._id = t1.get$value();
      return t1;
    },
    updateChainAccount$1(updatedAccounts) {
      var t1 = A._instanceType(this),
        t2 = t1._eval$1("Web3Chain.3"),
        sortedAccounts = A.ListHelper_clone(t1._eval$1("List<Web3Chain.3>")._as(updatedAccounts), t2);
      B.JSArray_methods.sort$1(sortedAccounts, new A.Web3Chain_updateChainAccount_closure(this));
      this._accounts = A.List_List$unmodifiable(sortedAccounts, t2);
    },
    toCbor$0() {
      var _this = this,
        t1 = _this.get$activeAccounts(),
        t2 = t1.$ti,
        t3 = t2._eval$1("MappedListIterable<ListBase.E,CborTagValue<@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("CborTagValue<@>(ListBase.E)")._as(new A.Web3Chain_toCbor_closure(_this)), t3), t3._eval$1("ListIterable.E"));
      t1 = A._setArrayType([new A.CborListValue(t1, true, type$.CborListValue_CborTagValue_dynamic), _this._id], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.network.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this._accounts, this._id, this.network];
    }
  };
  A.Web3Chain_getCurrentPermissionNetwork_closure.prototype = {
    call$1(e) {
      return A._instanceType(this.$this)._eval$1("Web3Chain.4")._as(e).get$value();
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("int(Web3Chain.4)");
    }
  };
  A.Web3Chain_getCurrentPermissionNetwork_closure0.prototype = {
    call$1(e) {
      return this.existsNetworks.contains$1(0, A._instanceType(this.$this)._eval$1("Web3Chain.3")._as(e).get$id());
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(Web3Chain.3)");
    }
  };
  A.Web3Chain_getCurrentPermissionNetwork_closure1.prototype = {
    call$1(e) {
      var t1 = this.$this;
      return A._instanceType(t1)._eval$1("Web3Chain.4")._as(e).get$value() === t1._id;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(Web3Chain.4)");
    }
  };
  A.Web3Chain_getCurrentPermissionNetwork_closure2.prototype = {
    call$1(e) {
      var t1 = this.$this;
      return A._instanceType(t1)._eval$1("Web3Chain.4")._as(e).get$value() === t1.network.mainNetworkId;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(Web3Chain.4)");
    }
  };
  A.Web3Chain_updateChainAccount_closure.prototype = {
    call$2(a, b) {
      var t1 = A._instanceType(this.$this)._eval$1("Web3Chain.3");
      t1._as(a);
      t1._as(b);
      return B.JSString_methods.compareTo$1(a.get$addressStr(), b.get$addressStr());
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("int(Web3Chain.3,Web3Chain.3)");
    }
  };
  A.Web3Chain_toCbor_closure.prototype = {
    call$1(e) {
      return A._instanceType(this.$this)._eval$1("Web3Chain.3")._as(e).toCbor$0();
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("CborTagValue<@>(Web3Chain.3)");
    }
  };
  A._Web3Chain_Object_CborSerializable.prototype = {};
  A._Web3Chain_Object_CborSerializable_Equatable.prototype = {};
  A.Web3ClientInfo.prototype = {
    get$variabels() {
      return [this.applicationId, this.url];
    }
  };
  A._Web3ClientInfo_Object_Equatable.prototype = {};
  A.Web3ChainNetworkData.prototype = {};
  A.Web3AptosChainAccount.prototype = {
    toCbor$0() {
      var t3, _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = _this.publicKey;
      A.BytesUtils_validateListOfBytes(t2);
      t3 = type$.int;
      t2 = A.List_List$unmodifiable(t2, t3);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_6, t3), new A.CborListValue([t1, _this.address.address, _this.id, _this._defaultAddress, new A.CborBytesValue(t2), _this.signingScheme, _this.network.id], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.address;
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3AptosChainIdnetifier.prototype = {
    toCbor$0() {
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_0_5, type$.int), new A.CborListValue([this.chainId, this.id, this.identifier], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3AptosChainAuthenticated.prototype = {
    get$networkType() {
      return B.NetworkType_8zS;
    },
    get$networks() {
      return this.networks;
    },
    get$currentNetwork() {
      return this.currentNetwork;
    }
  };
  A.Web3AptosChain.prototype = {
    disconnect$0() {
      return A.Web3AptosChain$_(B.List_empty6, 810);
    },
    createAuthenticated$1(networks) {
      var t1, t2, currentNetwork, web3Networks;
      type$.List_Web3ChainNetworkData_WalletAptosNetwork._as(networks);
      t1 = networks.$ti;
      t2 = t1._eval$1("MappedListIterable<ListBase.E,WalletAptosNetwork>");
      t2 = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("WalletAptosNetwork(ListBase.E)")._as(new A.Web3AptosChain_createAuthenticated_closure()), t2), t2._eval$1("ListIterable.E"));
      currentNetwork = this.getCurrentPermissionNetwork$1(t2);
      t2 = t1._eval$1("MappedListIterable<ListBase.E,Web3AptosChainIdnetifier>");
      web3Networks = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("Web3AptosChainIdnetifier(ListBase.E)")._as(new A.Web3AptosChain_createAuthenticated_closure0()), t2), t2._eval$1("ListIterable.E"));
      t1 = currentNetwork.coinParam.aptosChainType;
      t2 = this._accounts;
      return new A.Web3AptosChainAuthenticated(A.List_List$unmodifiable(web3Networks, type$.Web3AptosChainIdnetifier), new A.Web3AptosChainIdnetifier(t1.id, "aptos:" + t1._name, currentNetwork.value), B.NetworkType_8zS, A.List_List$unmodifiable(new A.CastList(t2, A._arrayInstanceType(t2)._eval$1("@<1>")._bind$1(A._instanceType(this)._eval$1("Web3Chain.3"))._eval$1("CastList<1,2>")), type$.Web3AptosChainAccount));
    }
  };
  A.Web3AptosChain_Web3AptosChain$deserialize_closure.prototype = {
    call$1(e) {
      var t4, t5, t6, t7, t8, t9,
        values = A.CborSerializable_cborTagValue(null, null, type$.nullable_CborObject._as(e), B.List_161_2_6, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        addressBytes = A.AptosAddressUtils_praseAddressBytes(A.AptosAddressUtils_addressToBytes(A.ExtractCborList_elementAt(values, 1, type$.String))),
        t2 = A.BytesUtils_toHexString(addressBytes, true, "0x"),
        t3 = A.MoveUtils_parseAddressBytes(addressBytes);
      A.BytesUtils_validateListOfBytes(t3);
      t4 = type$.int;
      t3 = A.List_List$unmodifiable(t3, t4);
      t5 = A.ExtractCborList_elementAt(values, 2, t4);
      t6 = A.ExtractCborList_elementAt(values, 3, type$.bool);
      t7 = A.ExtractCborList_elementAs(values, 4, type$.List_int);
      t8 = A.ExtractCborList_elementAs(values, 5, t4);
      t9 = A.AptosChainType_fromValue(A.ExtractCborList_elementAs(values, 6, type$.nullable_int));
      A.BytesUtils_validateListOfBytes(t7);
      return new A.Web3AptosChainAccount(t5, A.List_List$unmodifiable(t7, t4), t8, t9, t1, new A.AptosAddress(t2, t3, B.MoveArgumentType_address), t6);
    },
    $signature: 161
  };
  A.Web3AptosChain_createAuthenticated_closure.prototype = {
    call$1(e) {
      return type$.Web3ChainNetworkData_WalletAptosNetwork._as(e).network;
    },
    $signature: 162
  };
  A.Web3AptosChain_createAuthenticated_closure0.prototype = {
    call$1(e) {
      var t1 = type$.Web3ChainNetworkData_WalletAptosNetwork._as(e).network,
        t2 = t1.coinParam.aptosChainType;
      return new A.Web3AptosChainIdnetifier(t2.id, "aptos:" + t2._name, t1.value);
    },
    $signature: 163
  };
  A.Web3BitcoinChainAccount.prototype = {
    toCbor$0() {
      var t5, _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = _this.address.get$addressProgram(),
        t3 = _this.network.get$value(),
        t4 = _this.publicKey;
      A.BytesUtils_validateListOfBytes(t4);
      t5 = type$.int;
      t4 = A.List_List$unmodifiable(t4, t5);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_9, t5), new A.CborListValue([t1, t2, _this.id, _this._defaultAddress, _this.type.value, t3, new A.CborBytesValue(t4), _this.witnessScript, _this.redeemScript], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.toAddress$1(this.network);
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3BitcoinChainAuthenticated.prototype = {
    get$networkType() {
      return B.NetworkType_yCL;
    },
    get$networks() {
      return this.networks;
    },
    get$currentNetwork() {
      return this.currentNetwork;
    }
  };
  A.Web3BitcoinChain.prototype = {
    disconnect$0() {
      return A.Web3BitcoinChain$_(B.List_empty9, 0);
    },
    createAuthenticated$1(networks) {
      var t1, t2, currentNetwork, web3Networks;
      type$.List_Web3ChainNetworkData_WalletBitcoinNetwork._as(networks);
      t1 = networks.$ti;
      t2 = t1._eval$1("MappedListIterable<ListBase.E,WalletBitcoinNetwork>");
      t2 = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("WalletBitcoinNetwork(ListBase.E)")._as(new A.Web3BitcoinChain_createAuthenticated_closure()), t2), t2._eval$1("ListIterable.E"));
      currentNetwork = this.getCurrentPermissionNetwork$1(t2);
      t2 = t1._eval$1("MappedListIterable<ListBase.E,Web3ChainDefaultIdnetifier>");
      web3Networks = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("Web3ChainDefaultIdnetifier(ListBase.E)")._as(new A.Web3BitcoinChain_createAuthenticated_closure0()), t2), t2._eval$1("ListIterable.E"));
      t1 = currentNetwork.coinParam.transacationNetwork.get$identifier();
      t2 = this._accounts;
      return new A.Web3BitcoinChainAuthenticated(A.List_List$unmodifiable(web3Networks, type$.Web3ChainDefaultIdnetifier), new A.Web3ChainDefaultIdnetifier(t1, currentNetwork.value), B.NetworkType_yCL, A.List_List$unmodifiable(new A.CastList(t2, A._arrayInstanceType(t2)._eval$1("@<1>")._bind$1(A._instanceType(this)._eval$1("Web3Chain.3"))._eval$1("CastList<1,2>")), type$.Web3BitcoinChainAccount));
    }
  };
  A.Web3BitcoinChain_Web3BitcoinChain$deserialize_closure.prototype = {
    call$1(e) {
      var t8, t9,
        values = A.CborSerializable_cborTagValue(null, null, type$.nullable_CborObject._as(e), B.List_161_2_9, type$.CborListValue_dynamic),
        t1 = type$.nullable_String,
        type = A.BitcoinAddressType_fromValue(A.ExtractCborList_elementAs(values, 4, t1)),
        t2 = type$.String,
        program = A.ExtractCborList_elementAt(values, 1, t2),
        t3 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t4 = A.BitcoinBaseAddress_BitcoinBaseAddress$fromProgram(program, type),
        t5 = type$.int,
        t6 = A.ExtractCborList_elementAt(values, 2, t5),
        t7 = A.ExtractCborList_elementAt(values, 3, type$.bool);
      t2 = A.BasedUtxoNetwork_fromName(A.ExtractCborList_elementAs(values, 5, t2));
      t8 = A.ExtractCborList_elementAs(values, 6, type$.List_int);
      t9 = A.ExtractCborList_elementAs(values, 7, t1);
      t1 = A.ExtractCborList_elementAs(values, 8, t1);
      A.BytesUtils_validateListOfBytes(t8);
      return new A.Web3BitcoinChainAccount(t6, type, t2, A.List_List$unmodifiable(t8, t5), t9, t1, t3, t4, t7);
    },
    $signature: 164
  };
  A.Web3BitcoinChain_createAuthenticated_closure.prototype = {
    call$1(e) {
      return type$.Web3ChainNetworkData_WalletBitcoinNetwork._as(e).network;
    },
    $signature: 165
  };
  A.Web3BitcoinChain_createAuthenticated_closure0.prototype = {
    call$1(e) {
      var t1 = type$.Web3ChainNetworkData_WalletBitcoinNetwork._as(e).network;
      return new A.Web3ChainDefaultIdnetifier(t1.coinParam.transacationNetwork.get$identifier(), t1.value);
    },
    $signature: 166
  };
  A.Web3CosmosChainAccount.prototype = {
    toCbor$0() {
      var t3, _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = _this.publicKey;
      A.BytesUtils_validateListOfBytes(t2);
      t3 = type$.int;
      t2 = A._setArrayType([t1, _this.address.address, _this.id, _this._defaultAddress, new A.CborBytesValue(A.List_List$unmodifiable(t2, t3)), _this.algo._name], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_8, t3), new A.CborListValue(t2, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.address;
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3CosmoshainIdnetifier.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.chainId, this.id], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_0_6, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3CosmosChainAuthenticated.prototype = {
    get$networks() {
      return this.networks;
    },
    get$currentNetwork() {
      return this.currentNetwork;
    }
  };
  A.Web3CosmosChain.prototype = {
    disconnect$0() {
      return A.Web3CosmosChain$_(B.List_empty8, 200);
    },
    createAuthenticated$1(networks) {
      var t1, t2, currentNetwork, web3Networks;
      type$.List_Web3ChainNetworkData_WalletCosmosNetwork._as(networks);
      t1 = networks.$ti;
      t2 = t1._eval$1("MappedListIterable<ListBase.E,WalletCosmosNetwork>");
      t2 = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("WalletCosmosNetwork(ListBase.E)")._as(new A.Web3CosmosChain_createAuthenticated_closure()), t2), t2._eval$1("ListIterable.E"));
      currentNetwork = this.getCurrentPermissionNetwork$1(t2);
      t2 = t1._eval$1("MappedListIterable<ListBase.E,Web3CosmoshainIdnetifier>");
      web3Networks = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("Web3CosmoshainIdnetifier(ListBase.E)")._as(new A.Web3CosmosChain_createAuthenticated_closure0()), t2), t2._eval$1("ListIterable.E"));
      t1 = this._accounts;
      return new A.Web3CosmosChainAuthenticated(A.List_List$unmodifiable(web3Networks, type$.Web3CosmoshainIdnetifier), new A.Web3CosmoshainIdnetifier(currentNetwork.coinParam.chainId, currentNetwork.value), B.NetworkType_kHF, A.List_List$unmodifiable(new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("@<1>")._bind$1(A._instanceType(this)._eval$1("Web3Chain.3"))._eval$1("CastList<1,2>")), type$.Web3CosmosChainAccount));
    }
  };
  A.Web3CosmosChain_Web3CosmosChain$deserialize_closure.prototype = {
    call$1(e) {
      var values = A.CborSerializable_cborTagValue(null, null, type$.nullable_CborObject._as(e), B.List_161_2_8, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = type$.String,
        t3 = A.ExtractCborList_elementAt(values, 1, t2),
        decode = A.AtomAddressUtils_decode(t3, null),
        t4 = type$.int,
        t5 = A.ExtractCborList_elementAt(values, 2, t4),
        t6 = A.ExtractCborList_elementAt(values, 3, type$.bool),
        t7 = A.ExtractCborList_elementAs(values, 4, type$.List_int);
      t2 = A.CosmosKeysAlgs_fromName(A.ExtractCborList_elementAs(values, 5, t2));
      A.BytesUtils_validateListOfBytes(t7);
      return new A.Web3CosmosChainAccount(t5, A.List_List$unmodifiable(t7, t4), t2, t1, new A.CosmosBaseAddress(t3, decode.hrp), t6);
    },
    $signature: 167
  };
  A.Web3CosmosChain_createAuthenticated_closure.prototype = {
    call$1(e) {
      return type$.Web3ChainNetworkData_WalletCosmosNetwork._as(e).network;
    },
    $signature: 168
  };
  A.Web3CosmosChain_createAuthenticated_closure0.prototype = {
    call$1(e) {
      var t1 = type$.Web3ChainNetworkData_WalletCosmosNetwork._as(e).network;
      return new A.Web3CosmoshainIdnetifier(t1.coinParam.chainId, t1.value);
    },
    $signature: 169
  };
  A.Web3EthereumChainAccount.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = _this.publicKey;
      if (t2 == null)
        t2 = null;
      else {
        A.BytesUtils_validateListOfBytes(t2);
        t2 = new A.CborBytesValue(A.List_List$unmodifiable(t2, type$.int));
      }
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_1_1, type$.int), new A.CborListValue([t1, _this.address.address, _this.id, _this._defaultAddress, t2], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.address;
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3EthereumChainIdnetifier.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.chainId, this.supportEIP1559, this.id], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_0_2, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3EthereumChainAuthenticated.prototype = {
    toCbor$0() {
      var t4, t5, t6, _this = this,
        t1 = _this.accounts,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("CborTagValue<@>(1)")._as(new A.Web3EthereumChainAuthenticated_toCbor_closure()), t3), t3._eval$1("ListIterable.E"));
      t2 = type$.CborListValue_CborTagValue_dynamic;
      t3 = _this.serviceIdentifier;
      t3 = t3 == null ? null : t3.toCbor$0();
      t4 = _this.networks;
      t5 = A._arrayInstanceType(t4);
      t6 = t5._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t4 = A.List_List$_of(new A.MappedListIterable(t4, t5._eval$1("CborTagValue<@>(1)")._as(new A.Web3EthereumChainAuthenticated_toCbor_closure0()), t6), t6._eval$1("ListIterable.E"));
      t1 = A._setArrayType([new A.CborListValue(t1, true, t2), t3, new A.CborListValue(t4, true, t2), _this.currentNetwork.toCbor$0()], type$.JSArray_nullable_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.networkType.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_nullable_CborObject), type$.CborTagValue_dynamic);
    },
    get$networks() {
      return this.networks;
    },
    get$currentNetwork() {
      return this.currentNetwork;
    }
  };
  A.Web3EthereumChainAuthenticated_toCbor_closure.prototype = {
    call$1(e) {
      return type$.Web3EthereumChainAccount._as(e).toCbor$0();
    },
    $signature: 170
  };
  A.Web3EthereumChainAuthenticated_toCbor_closure0.prototype = {
    call$1(e) {
      return type$.Web3EthereumChainIdnetifier._as(e).toCbor$0();
    },
    $signature: 171
  };
  A.Web3EthereumChain.prototype = {
    disconnect$0() {
      return A.Web3EthereumChain$_(B.List_empty0, 100);
    },
    createAuthenticated$1(networks) {
      var t1, t2, currentNetwork, web3Networks, network, provider;
      type$.List_Web3ChainNetworkData_WalletEthereumNetwork._as(networks);
      t1 = networks.$ti;
      t2 = t1._eval$1("MappedListIterable<ListBase.E,WalletEthereumNetwork>");
      t2 = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("WalletEthereumNetwork(ListBase.E)")._as(new A.Web3EthereumChain_createAuthenticated_closure()), t2), t2._eval$1("ListIterable.E"));
      currentNetwork = this.getCurrentPermissionNetwork$1(t2);
      t2 = t1._eval$1("MappedListIterable<ListBase.E,Web3EthereumChainIdnetifier>");
      web3Networks = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("Web3EthereumChainIdnetifier(ListBase.E)")._as(new A.Web3EthereumChain_createAuthenticated_closure0()), t2), t2._eval$1("ListIterable.E"));
      t1 = currentNetwork.coinParam;
      network = networks.firstWhere$1(networks, new A.Web3EthereumChain_createAuthenticated_closure1(currentNetwork));
      provider = A.APIUtils_findNetworkProvider(network.network, true, network.serviceIdentifier, type$.EthereumAPIProvider);
      t2 = this._accounts;
      return new A.Web3EthereumChainAuthenticated(provider, A.List_List$unmodifiable(web3Networks, type$.Web3EthereumChainIdnetifier), new A.Web3EthereumChainIdnetifier(t1.chainId, t1.supportEIP1559, currentNetwork.value), B.NetworkType_ccB, A.List_List$unmodifiable(new A.CastList(t2, A._arrayInstanceType(t2)._eval$1("@<1>")._bind$1(A._instanceType(this)._eval$1("Web3Chain.3"))._eval$1("CastList<1,2>")), type$.Web3EthereumChainAccount));
    }
  };
  A.Web3EthereumChain_Web3EthereumChain$deserialize_closure.prototype = {
    call$1(e) {
      var values = A.CborSerializable_cborTagValue(null, null, type$.nullable_CborObject._as(e), B.List_161_1_1, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = A.ETHAddress_ETHAddress(A.ExtractCborList_elementAt(values, 1, type$.String)),
        t3 = type$.int,
        t4 = A.ExtractCborList_elementAt(values, 2, t3),
        t5 = A.ExtractCborList_elementAt(values, 3, type$.bool),
        t6 = A.ExtractCborList_elementAs(values, 4, type$.nullable_List_int);
      if (t6 == null)
        t3 = null;
      else {
        A.BytesUtils_validateListOfBytes(t6);
        t3 = A.List_List$unmodifiable(t6, t3);
      }
      return new A.Web3EthereumChainAccount(t4, t3, t1, t2, t5);
    },
    $signature: 172
  };
  A.Web3EthereumChain_createAuthenticated_closure.prototype = {
    call$1(e) {
      return type$.Web3ChainNetworkData_WalletEthereumNetwork._as(e).network;
    },
    $signature: 173
  };
  A.Web3EthereumChain_createAuthenticated_closure0.prototype = {
    call$1(e) {
      var t1 = type$.Web3ChainNetworkData_WalletEthereumNetwork._as(e).network,
        t2 = t1.coinParam;
      return new A.Web3EthereumChainIdnetifier(t2.chainId, t2.supportEIP1559, t1.value);
    },
    $signature: 174
  };
  A.Web3EthereumChain_createAuthenticated_closure1.prototype = {
    call$1(e) {
      return type$.Web3ChainNetworkData_WalletEthereumNetwork._as(e).network.value === this.currentNetwork.value;
    },
    $signature: 175
  };
  A.Web3SolanaChainAccount.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.keyIndex.toCbor$0(), _this.address.address, _this.id, _this._defaultAddress, _this.network.value], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_2, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.address;
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3SolanaChainAuthenticated.prototype = {
    get$networks() {
      return this.networks;
    },
    get$currentNetwork() {
      return this.currentNetwork;
    }
  };
  A.Web3SolanaChain.prototype = {
    disconnect$0() {
      return A.Web3SolanaChain$_(B.List_empty2, 33);
    },
    createAuthenticated$1(networks) {
      var t1, t2, currentNetwork, web3Networks;
      type$.List_Web3ChainNetworkData_WalletSolanaNetwork._as(networks);
      t1 = networks.$ti;
      t2 = t1._eval$1("MappedListIterable<ListBase.E,WalletSolanaNetwork>");
      t2 = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("WalletSolanaNetwork(ListBase.E)")._as(new A.Web3SolanaChain_createAuthenticated_closure()), t2), t2._eval$1("ListIterable.E"));
      currentNetwork = this.getCurrentPermissionNetwork$1(t2);
      t2 = t1._eval$1("MappedListIterable<ListBase.E,Web3ChainDefaultIdnetifier>");
      web3Networks = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("Web3ChainDefaultIdnetifier(ListBase.E)")._as(new A.Web3SolanaChain_createAuthenticated_closure0()), t2), t2._eval$1("ListIterable.E"));
      t1 = this._accounts;
      return new A.Web3SolanaChainAuthenticated(A.List_List$unmodifiable(web3Networks, type$.Web3ChainDefaultIdnetifier), new A.Web3ChainDefaultIdnetifier(currentNetwork.coinParam.type.identifier, currentNetwork.value), B.NetworkType_Rlb, A.List_List$unmodifiable(new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("@<1>")._bind$1(A._instanceType(this)._eval$1("Web3Chain.3"))._eval$1("CastList<1,2>")), type$.Web3SolanaChainAccount));
    }
  };
  A.Web3SolanaChain_Web3SolanaChain$deserialize_closure.prototype = {
    call$1(e) {
      var addrDecBytes, t3, t4,
        values = A.CborSerializable_cborTagValue(null, null, type$.nullable_CborObject._as(e), B.List_161_2_2, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = A.ExtractCborList_elementAt(values, 1, type$.String);
      type$.Map_String_dynamic._as(B.Map_empty);
      addrDecBytes = A.Base58Decoder_decode(t2, B.Base58Alphabets_0);
      A.AddrDecUtils_validateBytesLength(addrDecBytes, 32);
      t3 = type$.int;
      A.List_List$from(addrDecBytes, true, t3);
      t3 = A.ExtractCborList_elementAt(values, 2, t3);
      t4 = A.ExtractCborList_elementAt(values, 3, type$.bool);
      return new A.Web3SolanaChainAccount(t3, A.SolanaNetworkType_fromValue(A.ExtractCborList_elementAs(values, 4, type$.nullable_int)), t1, new A.SolAddress(t2), t4);
    },
    $signature: 176
  };
  A.Web3SolanaChain_createAuthenticated_closure.prototype = {
    call$1(e) {
      return type$.Web3ChainNetworkData_WalletSolanaNetwork._as(e).network;
    },
    $signature: 177
  };
  A.Web3SolanaChain_createAuthenticated_closure0.prototype = {
    call$1(e) {
      var t1 = type$.Web3ChainNetworkData_WalletSolanaNetwork._as(e).network;
      return new A.Web3ChainDefaultIdnetifier(t1.coinParam.type.identifier, t1.value);
    },
    $signature: 178
  };
  A.Web3StellarChainAccount.prototype = {
    toCbor$0() {
      var t4, _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = J.toString$0$(_this.address),
        t3 = _this.publicKey;
      A.BytesUtils_validateListOfBytes(t3);
      t4 = type$.int;
      t3 = A._setArrayType([t1, t2, _this.id, _this._defaultAddress, new A.CborBytesValue(A.List_List$unmodifiable(t3, t4)), _this.network.value], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_4, t4), new A.CborListValue(t3, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return J.toString$0$(this.address);
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3StellarChainAuthenticated.prototype = {
    get$networks() {
      return this.networks;
    },
    get$currentNetwork() {
      return this.currentNetwork;
    }
  };
  A.Web3StellarChain.prototype = {
    disconnect$0() {
      return A.Web3StellarChain$_(B.List_empty4, 600);
    },
    createAuthenticated$1(networks) {
      var t1, t2, currentNetwork, web3Networks;
      type$.List_Web3ChainNetworkData_WalletStellarNetwork._as(networks);
      t1 = networks.$ti;
      t2 = t1._eval$1("MappedListIterable<ListBase.E,WalletStellarNetwork>");
      t2 = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("WalletStellarNetwork(ListBase.E)")._as(new A.Web3StellarChain_createAuthenticated_closure()), t2), t2._eval$1("ListIterable.E"));
      currentNetwork = this.getCurrentPermissionNetwork$1(t2);
      t2 = t1._eval$1("MappedListIterable<ListBase.E,Web3ChainDefaultIdnetifier>");
      web3Networks = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("Web3ChainDefaultIdnetifier(ListBase.E)")._as(new A.Web3StellarChain_createAuthenticated_closure0()), t2), t2._eval$1("ListIterable.E"));
      t1 = this._accounts;
      return new A.Web3StellarChainAuthenticated(A.List_List$unmodifiable(web3Networks, type$.Web3ChainDefaultIdnetifier), new A.Web3ChainDefaultIdnetifier("stellar:" + currentNetwork.coinParam.stellarChainType._name, currentNetwork.value), B.NetworkType_rCZ, A.List_List$unmodifiable(new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("@<1>")._bind$1(A._instanceType(this)._eval$1("Web3Chain.3"))._eval$1("CastList<1,2>")), type$.Web3StellarChainAccount));
    }
  };
  A.Web3StellarChain_Web3StellarChain$deserialize_closure.prototype = {
    call$1(e) {
      var values = A.CborSerializable_cborTagValue(null, null, type$.nullable_CborObject._as(e), B.List_161_2_4, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = A.StellarAddress_StellarAddress$fromBase32Addr(A.ExtractCborList_elementAt(values, 1, type$.String)),
        t3 = type$.int,
        t4 = A.ExtractCborList_elementAt(values, 2, t3),
        t5 = A.ExtractCborList_elementAt(values, 3, type$.bool),
        t6 = A.ExtractCborList_elementAs(values, 4, type$.List_int),
        t7 = A.StellarChainType_fromValue(A.ExtractCborList_elementAs(values, 5, type$.nullable_int));
      A.BytesUtils_validateListOfBytes(t6);
      return new A.Web3StellarChainAccount(t4, A.List_List$unmodifiable(t6, t3), t7, t1, t2, t5);
    },
    $signature: 179
  };
  A.Web3StellarChain_createAuthenticated_closure.prototype = {
    call$1(e) {
      return type$.Web3ChainNetworkData_WalletStellarNetwork._as(e).network;
    },
    $signature: 180
  };
  A.Web3StellarChain_createAuthenticated_closure0.prototype = {
    call$1(e) {
      var t1 = type$.Web3ChainNetworkData_WalletStellarNetwork._as(e).network;
      return new A.Web3ChainDefaultIdnetifier("stellar:" + t1.coinParam.stellarChainType._name, t1.value);
    },
    $signature: 181
  };
  A.Web3SubstrateChainAccount.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.keyIndex.toCbor$0(), _this.address.address, _this.id, _this._defaultAddress, _this.publicKey], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_5, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return J.toString$0$(this.address);
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3SubstrateChainIdnetifier.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.genesisHash, this.specVersion, this.id], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_0_3, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3SubstrateChainAuthenticated.prototype = {
    get$networks() {
      return this.networks;
    },
    get$currentNetwork() {
      return this.currentNetwork;
    }
  };
  A.Web3SubstrateChain.prototype = {
    disconnect$0() {
      return A.Web3SubstrateChain$_(B.List_empty5, 400);
    },
    createAuthenticated$1(networks) {
      var t1, t2, currentNetwork, web3Networks;
      type$.List_Web3ChainNetworkData_WalletSubstrateNetwork._as(networks);
      t1 = networks.$ti;
      t2 = t1._eval$1("MappedListIterable<ListBase.E,WalletSubstrateNetwork>");
      t2 = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("WalletSubstrateNetwork(ListBase.E)")._as(new A.Web3SubstrateChain_createAuthenticated_closure()), t2), t2._eval$1("ListIterable.E"));
      currentNetwork = this.getCurrentPermissionNetwork$1(t2);
      t2 = t1._eval$1("MappedListIterable<ListBase.E,Web3SubstrateChainIdnetifier>");
      web3Networks = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("Web3SubstrateChainIdnetifier(ListBase.E)")._as(new A.Web3SubstrateChain_createAuthenticated_closure0()), t2), t2._eval$1("ListIterable.E"));
      t1 = A.StringUtils_add0x(currentNetwork.get$genesisBlock());
      t2 = this._accounts;
      return new A.Web3SubstrateChainAuthenticated(A.List_List$unmodifiable(web3Networks, type$.Web3SubstrateChainIdnetifier), new A.Web3SubstrateChainIdnetifier(t1, currentNetwork.coinParam.specVersion, currentNetwork.value), B.NetworkType_2OH, A.List_List$unmodifiable(new A.CastList(t2, A._arrayInstanceType(t2)._eval$1("@<1>")._bind$1(A._instanceType(this)._eval$1("Web3Chain.3"))._eval$1("CastList<1,2>")), type$.Web3SubstrateChainAccount));
    }
  };
  A.Web3SubstrateChain_Web3SubstrateChain$deserialize_closure.prototype = {
    call$1(e) {
      var values = A.CborSerializable_cborTagValue(null, null, type$.nullable_CborObject._as(e), B.List_161_2_5, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = A.BaseSubstrateAddress_BaseSubstrateAddress(A.ExtractCborList_elementAt(values, 1, type$.String)),
        t3 = type$.int,
        t4 = A.ExtractCborList_elementAt(values, 2, t3),
        t5 = A.ExtractCborList_elementAt(values, 3, type$.bool),
        t6 = A.ExtractCborList_elementAs(values, 4, type$.List_int);
      A.BytesUtils_validateListOfBytes(t6);
      return new A.Web3SubstrateChainAccount(t4, A.List_List$unmodifiable(t6, t3), t1, t2, t5);
    },
    $signature: 182
  };
  A.Web3SubstrateChain_createAuthenticated_closure.prototype = {
    call$1(e) {
      return type$.Web3ChainNetworkData_WalletSubstrateNetwork._as(e).network;
    },
    $signature: 183
  };
  A.Web3SubstrateChain_createAuthenticated_closure0.prototype = {
    call$1(e) {
      var t1 = type$.Web3ChainNetworkData_WalletSubstrateNetwork._as(e).network;
      return new A.Web3SubstrateChainIdnetifier(A.StringUtils_add0x(t1.get$genesisBlock()), t1.coinParam.specVersion, t1.value);
    },
    $signature: 184
  };
  A.Web3SuiChainAccount.prototype = {
    toCbor$0() {
      var t3, _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = _this.publicKey;
      A.BytesUtils_validateListOfBytes(t2);
      t3 = type$.int;
      t2 = A._setArrayType([t1, _this.address.address, _this.id, _this._defaultAddress, new A.CborBytesValue(A.List_List$unmodifiable(t2, t3)), _this.signingScheme, _this.network.value], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_7, t3), new A.CborListValue(t2, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.address;
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3SuiChainAuthenticated.prototype = {
    get$networks() {
      return this.networks;
    },
    get$currentNetwork() {
      return this.currentNetwork;
    }
  };
  A.Web3SuiChain.prototype = {
    disconnect$0() {
      return A.Web3SuiChain$_(B.List_empty7, 800);
    },
    createAuthenticated$1(networks) {
      var t1, t2, currentNetwork, web3Networks;
      type$.List_Web3ChainNetworkData_WalletSuiNetwork._as(networks);
      t1 = networks.$ti;
      t2 = t1._eval$1("MappedListIterable<ListBase.E,WalletSuiNetwork>");
      t2 = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("WalletSuiNetwork(ListBase.E)")._as(new A.Web3SuiChain_createAuthenticated_closure()), t2), t2._eval$1("ListIterable.E"));
      currentNetwork = this.getCurrentPermissionNetwork$1(t2);
      t2 = t1._eval$1("MappedListIterable<ListBase.E,Web3ChainDefaultIdnetifier>");
      web3Networks = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("Web3ChainDefaultIdnetifier(ListBase.E)")._as(new A.Web3SuiChain_createAuthenticated_closure0()), t2), t2._eval$1("ListIterable.E"));
      t1 = this._accounts;
      return new A.Web3SuiChainAuthenticated(A.List_List$unmodifiable(web3Networks, type$.Web3ChainDefaultIdnetifier), new A.Web3ChainDefaultIdnetifier("sui:" + currentNetwork.coinParam.suiChain._name, currentNetwork.value), B.NetworkType_cHa, A.List_List$unmodifiable(new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("@<1>")._bind$1(A._instanceType(this)._eval$1("Web3Chain.3"))._eval$1("CastList<1,2>")), type$.Web3SuiChainAccount));
    }
  };
  A.Web3SuiChain_Web3SuiChain$deserialize_closure.prototype = {
    call$1(e) {
      var t3, byte, t4, t5, t6, t7, t8, t9,
        values = A.CborSerializable_cborTagValue(null, null, type$.nullable_CborObject._as(e), B.List_161_2_7, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = type$.String,
        address = A.StringUtils_strip0x(A.ExtractCborList_elementAt(values, 1, t2)),
        toBytes = A.BytesUtils_tryFromHexString(address, address.length === 1);
      if (toBytes == null)
        A.throwExpression(new A.DartSuiPluginException("Invalid sui address.", A.LinkedHashMap_LinkedHashMap$_literal(["address", address], t2, type$.dynamic)));
      t3 = toBytes.length;
      if (t3 === 1) {
        if (0 >= t3)
          return A.ioore(toBytes, 0);
        byte = toBytes[0];
        if (byte < 10) {
          toBytes = A.List_List$filled(32, 0, false, type$.int);
          B.JSArray_methods.set$last(toBytes, byte);
        }
      }
      t3 = toBytes.length;
      if (t3 !== 32)
        A.throwExpression(A.AddressConverterException$("Invalid sui address bytes length.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", 32, "length", t3], t2, type$.dynamic)));
      t2 = A.BytesUtils_toHexString(toBytes, true, "0x");
      t3 = A.MoveUtils_parseAddressBytes(toBytes);
      A.BytesUtils_validateListOfBytes(t3);
      t4 = type$.int;
      t3 = A.List_List$unmodifiable(t3, t4);
      t5 = A.ExtractCborList_elementAt(values, 2, t4);
      t6 = A.ExtractCborList_elementAt(values, 3, type$.bool);
      t7 = A.ExtractCborList_elementAs(values, 4, type$.List_int);
      t8 = A.ExtractCborList_elementAs(values, 5, t4);
      t9 = A.SuiChainType_fromValue(A.ExtractCborList_elementAs(values, 6, type$.nullable_int));
      A.BytesUtils_validateListOfBytes(t7);
      return new A.Web3SuiChainAccount(t5, A.List_List$unmodifiable(t7, t4), t8, t9, t1, new A.SuiAddress(t2, t3, B.MoveArgumentType_address), t6);
    },
    $signature: 185
  };
  A.Web3SuiChain_createAuthenticated_closure.prototype = {
    call$1(e) {
      return type$.Web3ChainNetworkData_WalletSuiNetwork._as(e).network;
    },
    $signature: 186
  };
  A.Web3SuiChain_createAuthenticated_closure0.prototype = {
    call$1(e) {
      var t1 = type$.Web3ChainNetworkData_WalletSuiNetwork._as(e).network;
      return new A.Web3ChainDefaultIdnetifier("sui:" + t1.coinParam.suiChain._name, t1.value);
    },
    $signature: 187
  };
  A.Web3TonChainAccount.prototype = {
    toCbor$0() {
      var t5, _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = _this.address.toFriendlyAddress$0(),
        t3 = _this.accountContext.toCbor$0(),
        t4 = _this.publicKey;
      A.BytesUtils_validateListOfBytes(t4);
      t5 = type$.int;
      t4 = A._setArrayType([t1, t2, _this.id, _this._defaultAddress, t3, new A.CborBytesValue(A.List_List$unmodifiable(t4, t5)), _this.network.workchain], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_3, t5), new A.CborListValue(t4, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.toFriendlyAddress$0();
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3TonChainAuthenticated.prototype = {
    get$networks() {
      return this.networks;
    },
    get$currentNetwork() {
      return this.currentNetwork;
    }
  };
  A.Web3TonChain.prototype = {
    disconnect$0() {
      return A.Web3TonChain$_(B.List_empty3, 300);
    },
    createAuthenticated$1(networks) {
      var t1, t2, currentNetwork, web3Networks;
      type$.List_Web3ChainNetworkData_WalletTonNetwork._as(networks);
      t1 = networks.$ti;
      t2 = t1._eval$1("MappedListIterable<ListBase.E,WalletTonNetwork>");
      t2 = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("WalletTonNetwork(ListBase.E)")._as(new A.Web3TonChain_createAuthenticated_closure()), t2), t2._eval$1("ListIterable.E"));
      currentNetwork = this.getCurrentPermissionNetwork$1(t2);
      t2 = t1._eval$1("MappedListIterable<ListBase.E,Web3ChainDefaultIdnetifier>");
      web3Networks = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("Web3ChainDefaultIdnetifier(ListBase.E)")._as(new A.Web3TonChain_createAuthenticated_closure0()), t2), t2._eval$1("ListIterable.E"));
      t1 = currentNetwork.coinParam.get$tonChainIdentifier();
      t2 = this._accounts;
      return new A.Web3TonChainAuthenticated(A.List_List$unmodifiable(web3Networks, type$.Web3ChainDefaultIdnetifier), new A.Web3ChainDefaultIdnetifier(t1, currentNetwork.value), B.NetworkType_zIX, A.List_List$unmodifiable(new A.CastList(t2, A._arrayInstanceType(t2)._eval$1("@<1>")._bind$1(A._instanceType(this)._eval$1("Web3Chain.3"))._eval$1("CastList<1,2>")), type$.Web3TonChainAccount));
    }
  };
  A.Web3TonChain_Web3TonChain$deserialize_closure.prototype = {
    call$1(e) {
      var t4, decode, flags, t5, t6, t7, t8,
        values = A.CborSerializable_cborTagValue(null, null, type$.nullable_CborObject._as(e), B.List_161_2_3, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = type$.String,
        t3 = A.ExtractCborList_elementAs(values, 1, t2);
      $.$get$TonAddress__decoder();
      t4 = type$.int;
      A.AddrKeyValidator_nullOrValidateAddressArgs(type$.Map_String_dynamic._as(A.LinkedHashMap_LinkedHashMap$_literal(["workchain", null], t2, type$.dynamic)), "workchain", t4);
      decode = A.TonAddressUtils_decodeAddress(t3);
      t2 = type$.FriendlyAddressFlags;
      flags = A.List_List$from(decode.flags, true, t2);
      t2 = A.List_List$unmodifiable(flags, t2);
      t3 = A.ExtractCborList_elementAs(values, 2, t4);
      t5 = A.ExtractCborList_elementAs(values, 3, type$.bool);
      t6 = A.TonAccountContext_TonAccountContext$deserialize(A.ExtractCborList_elementAs(values, 4, type$.CborTagValue_dynamic));
      t7 = A.ExtractCborList_elementAs(values, 5, type$.List_int);
      t8 = A.TonChain_fromWorkchain(A.ExtractCborList_elementAs(values, 6, type$.nullable_int));
      A.BytesUtils_validateListOfBytes(t7);
      return new A.Web3TonChainAccount(t3, t6, A.List_List$unmodifiable(t7, t4), t8, t1, new A.TonAddress(decode.workchain, decode.hash, t2), t5);
    },
    $signature: 188
  };
  A.Web3TonChain_createAuthenticated_closure.prototype = {
    call$1(e) {
      return type$.Web3ChainNetworkData_WalletTonNetwork._as(e).network;
    },
    $signature: 189
  };
  A.Web3TonChain_createAuthenticated_closure0.prototype = {
    call$1(e) {
      var t1 = type$.Web3ChainNetworkData_WalletTonNetwork._as(e).network;
      return new A.Web3ChainDefaultIdnetifier(t1.coinParam.get$tonChainIdentifier(), t1.value);
    },
    $signature: 190
  };
  A.Web3TronChainAccount.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = _this.address.toAddress$0(),
        t3 = _this.publicKey;
      if (t3 == null)
        t3 = null;
      else {
        A.BytesUtils_validateListOfBytes(t3);
        t3 = new A.CborBytesValue(A.List_List$unmodifiable(t3, type$.int));
      }
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_1, type$.int), new A.CborListValue([t1, t2, _this.id, _this._defaultAddress, t3], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.toAddress$0();
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3TronChainIdnetifier.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.chainId, _this.id, _this.fullNode, _this.solidityNode], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_0_4, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3TronChainAuthenticated.prototype = {
    get$networks() {
      return this.networks;
    },
    get$currentNetwork() {
      return this.currentNetwork;
    }
  };
  A.Web3TronChain.prototype = {
    get$activeAccounts() {
      var t1 = A.Web3Chain.prototype.get$activeAccounts.call(this);
      return new A.CastList(t1._source, t1.$ti._eval$1("CastList<1,Web3TronChainAccount>"));
    },
    disconnect$0() {
      return A.Web3TronChain$_(B.List_empty1, 1001);
    },
    createAuthenticated$1(networks) {
      var t1, t2, currentNetwork, web3Networks, currentWeb3Network;
      type$.List_Web3ChainNetworkData_WalletTronNetwork._as(networks);
      t1 = networks.$ti;
      t2 = t1._eval$1("MappedListIterable<ListBase.E,WalletTronNetwork>");
      t2 = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("WalletTronNetwork(ListBase.E)")._as(new A.Web3TronChain_createAuthenticated_closure()), t2), t2._eval$1("ListIterable.E"));
      currentNetwork = this.getCurrentPermissionNetwork$1(t2);
      t2 = t1._eval$1("MappedListIterable<ListBase.E,Web3TronChainIdnetifier>");
      web3Networks = A.List_List$_of(new A.MappedListIterable(networks, t1._eval$1("Web3TronChainIdnetifier(ListBase.E)")._as(new A.Web3TronChain_createAuthenticated_closure0()), t2), t2._eval$1("ListIterable.E"));
      currentWeb3Network = B.JSArray_methods.firstWhere$1(web3Networks, new A.Web3TronChain_createAuthenticated_closure1(currentNetwork));
      t1 = A.Web3Chain.prototype.get$activeAccounts.call(this);
      return new A.Web3TronChainAuthenticated(A.List_List$unmodifiable(web3Networks, type$.Web3TronChainIdnetifier), currentWeb3Network, B.NetworkType_EUu, A.List_List$unmodifiable(new A.CastList(t1._source, t1.$ti._eval$1("CastList<1,Web3TronChainAccount>")), type$.Web3TronChainAccount));
    }
  };
  A.Web3TronChain_Web3TronChain$deserialize_closure.prototype = {
    call$1(e) {
      var values = A.CborSerializable_cborTagValue(null, null, type$.nullable_CborObject._as(e), B.List_161_2_1, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = A.TronAddress_TronAddress(A.ExtractCborList_elementAt(values, 1, type$.String)),
        t3 = type$.int,
        t4 = A.ExtractCborList_elementAt(values, 2, t3),
        t5 = A.ExtractCborList_elementAt(values, 3, type$.bool),
        t6 = A.ExtractCborList_elementAs(values, 4, type$.nullable_List_int);
      if (t6 == null)
        t3 = null;
      else {
        A.BytesUtils_validateListOfBytes(t6);
        t3 = A.List_List$unmodifiable(t6, t3);
      }
      return new A.Web3TronChainAccount(t4, t3, t1, t2, t5);
    },
    $signature: 191
  };
  A.Web3TronChain_createAuthenticated_closure.prototype = {
    call$1(e) {
      return type$.Web3ChainNetworkData_WalletTronNetwork._as(e).network;
    },
    $signature: 192
  };
  A.Web3TronChain_createAuthenticated_closure0.prototype = {
    call$1(e) {
      var t1, tron;
      type$.Web3ChainNetworkData_WalletTronNetwork._as(e);
      t1 = e.network;
      tron = A.APIUtils_findNetworkProvider(t1, true, e.serviceIdentifier, type$.TronAPIProvider);
      t1 = t1.value;
      return new A.Web3TronChainIdnetifier(A.TronChainType_fromId(t1).genesisBlockNumber, tron.solidityProvider.uri, tron.httpNodeUri, t1);
    },
    $signature: 193
  };
  A.Web3TronChain_createAuthenticated_closure1.prototype = {
    call$1(e) {
      return type$.Web3TronChainIdnetifier._as(e).id === this.currentNetwork.value;
    },
    $signature: 194
  };
  A.PlatformInterface.prototype = {
    PlatformInterface$1$token(token) {
      var t1 = $.$get$PlatformInterface__instanceTokens();
      t1.$ti._eval$1("1?")._as(token);
      t1._jsWeakMap.set(this, token);
    }
  };
  A.BaseSubstrateAddress.prototype = {};
  A.SubstrateAddress.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.SubstrateAddress))
        return false;
      return other.address === this.address && other.ss58Format === this.ss58Format;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.address) ^ B.JSInt_methods.get$hashCode(this.ss58Format);
    },
    toString$0(_) {
      return this.address;
    }
  };
  A.SubstrateEthereumAddress.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.SubstrateEthereumAddress))
        return false;
      return other.address === this.address;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.address);
    },
    toString$0(_) {
      return this.address;
    }
  };
  A.DartSubstratePluginException.prototype = {};
  A.SubstrateKeyAlgorithm.prototype = {
    _enumToString$0() {
      return "SubstrateKeyAlgorithm." + this._name;
    }
  };
  A.SubstrateKeyAlgorithm_fromValue_closure.prototype = {
    call$1(e) {
      return type$.SubstrateKeyAlgorithm._as(e).value === this.value;
    },
    $signature: 195
  };
  A.SubstrateKeyAlgorithm_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartSubstratePluginException$("SubstrateKeyAlgorithm not found. The provided value is invalid.", null));
    },
    $signature: 0
  };
  A.StellarAccountAddress.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.StellarAccountAddress))
        return false;
      return other.baseAddress === this.baseAddress;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.baseAddress);
    }
  };
  A.StellarContractAddress.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.StellarContractAddress))
        return false;
      return other.baseAddress === this.baseAddress;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.baseAddress);
    }
  };
  A.StellarMuxedAddress.prototype = {
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.StellarMuxedAddress))
        return false;
      t1 = other.accountId.compareTo$1(0, this.accountId);
      return t1 === 0 && other.muxedAddress === this.muxedAddress;
    },
    get$hashCode(_) {
      return this.accountId.get$hashCode(0) ^ B.JSString_methods.get$hashCode(this.muxedAddress);
    },
    toString$0(_) {
      return this.muxedAddress;
    }
  };
  A.StellarAddress.prototype = {
    toString$0(_) {
      return this.baseAddress;
    }
  };
  A.StellarAddressException.prototype = {};
  A.DartStellarPlugingException.prototype = {};
  A.TonAddress.prototype = {
    toFriendlyAddress$0() {
      var t2, _this = this,
        t1 = _this.defaultFlags;
      t1 = t1.length === 0 || B.JSArray_methods.contains$1(t1, B.FriendlyAddressFlags_17);
      t2 = B.JSArray_methods.contains$1(_this.defaultFlags, B.FriendlyAddressFlags_128);
      return A.TonAddressUtils_encodeAddress(t1, _this.hash, t2, true, _this.workChain);
    },
    toString$0(_) {
      var _this = this;
      if (_this.defaultFlags.length === 0)
        return A.BytesUtils_toHexString(_this.hash, true, "" + _this.workChain + ":");
      return _this.toFriendlyAddress$0();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.TonAddress))
        return false;
      return A.BytesUtils_bytesEqual(other.hash, this.hash) && other.workChain === this.workChain;
    },
    get$hashCode(_) {
      return A.Object_hash(this.hash, this.workChain, B.C_SentinelValue, B.C_SentinelValue);
    }
  };
  A.TonChain.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.TonChain))
        return false;
      return this.workchain === other.workchain && this.id === other.id;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this.workchain) ^ B.JSInt_methods.get$hashCode(this.id);
    }
  };
  A.TonChain_fromWorkchain_closure.prototype = {
    call$1(e) {
      return type$.TonChain._as(e).workchain === this.workchain;
    },
    $signature: 196
  };
  A.TonChain_fromWorkchain_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.TonContractException_eUg);
    },
    $signature: 0
  };
  A.TonContractException.prototype = {};
  A.WalletVersion.prototype = {
    toString$0(_) {
      return "WalletVersion." + this.name;
    }
  };
  A.WalletVersion_WalletVersion$fromValue_closure.prototype = {
    call$1(element) {
      return type$.WalletVersion._as(element).name === this.name;
    },
    $signature: 197
  };
  A.WalletVersion_WalletVersion$fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(new A.TonContractException("Cannot find WalletVersion from provided status", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.TonDartPluginException.prototype = {};
  A.TonApiType.prototype = {};
  A.TonApiType_TonApiType$fromValue_closure.prototype = {
    call$1(element) {
      return type$.TonApiType._as(element).name === this.name;
    },
    $signature: 198
  };
  A.TonApiType_TonApiType$fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.TonDartPluginException$("Cannot find TonApiType from provided name", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A._JSBackgroundHandler.prototype = {
    _read$1$key(key) {
      return this._read$body$_JSBackgroundHandler(key);
    },
    _read$body$_JSBackgroundHandler(key) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_String),
        $async$returnValue;
      var $async$_read$1$key = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($.$get$AppNativeMethods_platform().readSecure$1(key), $async$_read$1$key);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_read$1$key, $async$completer);
    },
    _readAll$1$prefix(prefix) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_String),
        $async$returnValue;
      var $async$_readAll$1$prefix = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($.$get$AppNativeMethods_platform().readAllSecure$1$prefix(prefix), $async$_readAll$1$prefix);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_readAll$1$prefix, $async$completer);
    },
    _write$2$data$key(data, key) {
      return this._write$body$_JSBackgroundHandler(data, key);
    },
    _write$body$_JSBackgroundHandler(data, key) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void);
      var $async$_write$2$data$key = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($.$get$AppNativeMethods_platform().writeSecure$2(key, data), $async$_write$2$data$key);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_write$2$data$key, $async$completer);
    },
    _readNetworks$1(wallet) {
      return this._readNetworks$body$_JSBackgroundHandler(wallet);
    },
    _readNetworks$body$_JSBackgroundHandler(wallet) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.List_Web3ChainNetworkData_WalletNetwork_NetworkCoinParams_APIProvider),
        $async$returnValue, $async$self = this, i, obj, values, serviceIdentifier, t1, _0_0, n, t3, keyBytes, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, _i, _box_0, network, t26, exception, web3Chains, keys, t2, data;
      var $async$_readNetworks$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              web3Chains = A._setArrayType([], type$.JSArray_Web3ChainNetworkData_WalletNetwork_NetworkCoinParams_APIProvider);
              $async$goto = 3;
              return A._asyncAwait($async$self._readAll$1$prefix("HDW_" + wallet._checksum + "_"), $async$_readNetworks$1);
            case 3:
              // returning from await.
              keys = $async$result;
              t2 = keys.get$keys();
              data = t2.map$1$1(t2, new A._JSBackgroundHandler__readNetworks_closure(keys), type$.Record_2_String_and_String).toList$0(0);
              t2 = A._arrayInstanceType(data);
              t3 = t2._eval$1("MappedListIterable<1,List<int>>");
              keyBytes = A.List_List$_of(new A.MappedListIterable(data, t2._eval$1("List<int>(1)")._as(new A._JSBackgroundHandler__readNetworks_closure0()), t3), t3._eval$1("ListIterable.E"));
              for (t2 = keyBytes.length, t3 = type$.ProviderIdentifier, t4 = type$.CborListValue_dynamic, t5 = type$.WalletNetwork_NetworkCoinParams_APIProvider, t6 = type$.Web3ChainNetworkData_WalletBitcoinNetwork, t7 = type$.WalletBitcoinNetwork, t8 = type$.Web3ChainNetworkData_WalletCosmosNetwork, t9 = type$.WalletCosmosNetwork, t10 = type$.Web3ChainNetworkData_WalletSuiNetwork, t11 = type$.WalletSuiNetwork, t12 = type$.Web3ChainNetworkData_WalletAptosNetwork, t13 = type$.WalletAptosNetwork, t14 = type$.Web3ChainNetworkData_WalletSubstrateNetwork, t15 = type$.WalletSubstrateNetwork, t16 = type$.Web3ChainNetworkData_WalletTonNetwork, t17 = type$.WalletTonNetwork, t18 = type$.Web3ChainNetworkData_WalletStellarNetwork, t19 = type$.WalletStellarNetwork, t20 = type$.Web3ChainNetworkData_WalletSolanaNetwork, t21 = type$.WalletSolanaNetwork, t22 = type$.Web3ChainNetworkData_WalletTronNetwork, t23 = type$.WalletTronNetwork, t24 = type$.Web3ChainNetworkData_WalletEthereumNetwork, t25 = type$.WalletEthereumNetwork, _i = 0; _i < keyBytes.length; keyBytes.length === t2 || (0, A.throwConcurrentModificationError)(keyBytes), ++_i) {
                i = keyBytes[_i];
                try {
                  _box_0 = {};
                  obj = A.CborUtils__decode(i, 0).value;
                  values = A.CborSerializable_cborTagValue(null, null, obj, B.List_200, t4);
                  _box_0.network = A.MethodUtils_nullOnException(new A._JSBackgroundHandler__readNetworks_closure1(values), t5);
                  network = _box_0.network = A.MethodUtils_nullOnException(new A._JSBackgroundHandler__readNetworks_closure2(_box_0, values), t5);
                  if (network == null || !network.get$supportWeb3())
                    continue;
                  serviceIdentifier = A.MethodUtils_nullOnException(new A._JSBackgroundHandler__readNetworks_closure3(values), t3);
                  t1 = null;
                  _0_0 = _box_0.network.get$type();
                  $label0$1: {
                    if (B.NetworkType_ccB === _0_0) {
                      t26 = _box_0.network;
                      A.checkTypeBound(t25, t5, "T", "toNetwork");
                      if (!(t26 instanceof A.WalletEthereumNetwork))
                        A.throwExpression(B.WalletException_incorrect_network_null);
                      t1 = new A.Web3ChainNetworkData(t26, serviceIdentifier, t24);
                      break $label0$1;
                    }
                    if (B.NetworkType_EUu === _0_0) {
                      t26 = _box_0.network;
                      A.checkTypeBound(t23, t5, "T", "toNetwork");
                      if (!(t26 instanceof A.WalletTronNetwork))
                        A.throwExpression(B.WalletException_incorrect_network_null);
                      t1 = new A.Web3ChainNetworkData(t26, serviceIdentifier, t22);
                      break $label0$1;
                    }
                    if (B.NetworkType_Rlb === _0_0) {
                      t26 = _box_0.network;
                      A.checkTypeBound(t21, t5, "T", "toNetwork");
                      if (!(t26 instanceof A.WalletSolanaNetwork))
                        A.throwExpression(B.WalletException_incorrect_network_null);
                      t1 = new A.Web3ChainNetworkData(t26, serviceIdentifier, t20);
                      break $label0$1;
                    }
                    if (B.NetworkType_rCZ === _0_0) {
                      t26 = _box_0.network;
                      A.checkTypeBound(t19, t5, "T", "toNetwork");
                      if (!(t26 instanceof A.WalletStellarNetwork))
                        A.throwExpression(B.WalletException_incorrect_network_null);
                      t1 = new A.Web3ChainNetworkData(t26, serviceIdentifier, t18);
                      break $label0$1;
                    }
                    if (B.NetworkType_zIX === _0_0) {
                      t26 = _box_0.network;
                      A.checkTypeBound(t17, t5, "T", "toNetwork");
                      if (!(t26 instanceof A.WalletTonNetwork))
                        A.throwExpression(B.WalletException_incorrect_network_null);
                      t1 = new A.Web3ChainNetworkData(t26, serviceIdentifier, t16);
                      break $label0$1;
                    }
                    if (B.NetworkType_2OH === _0_0) {
                      t26 = _box_0.network;
                      A.checkTypeBound(t15, t5, "T", "toNetwork");
                      if (!(t26 instanceof A.WalletSubstrateNetwork))
                        A.throwExpression(B.WalletException_incorrect_network_null);
                      t1 = new A.Web3ChainNetworkData(t26, serviceIdentifier, t14);
                      break $label0$1;
                    }
                    if (B.NetworkType_8zS === _0_0) {
                      t26 = _box_0.network;
                      A.checkTypeBound(t13, t5, "T", "toNetwork");
                      if (!(t26 instanceof A.WalletAptosNetwork))
                        A.throwExpression(B.WalletException_incorrect_network_null);
                      t1 = new A.Web3ChainNetworkData(t26, serviceIdentifier, t12);
                      break $label0$1;
                    }
                    if (B.NetworkType_cHa === _0_0) {
                      t26 = _box_0.network;
                      A.checkTypeBound(t11, t5, "T", "toNetwork");
                      if (!(t26 instanceof A.WalletSuiNetwork))
                        A.throwExpression(B.WalletException_incorrect_network_null);
                      t1 = new A.Web3ChainNetworkData(t26, serviceIdentifier, t10);
                      break $label0$1;
                    }
                    if (B.NetworkType_kHF === _0_0) {
                      t26 = _box_0.network;
                      A.checkTypeBound(t9, t5, "T", "toNetwork");
                      if (!(t26 instanceof A.WalletCosmosNetwork))
                        A.throwExpression(B.WalletException_incorrect_network_null);
                      t1 = new A.Web3ChainNetworkData(t26, serviceIdentifier, t8);
                      break $label0$1;
                    }
                    if (B.NetworkType_yCL === _0_0 || B.NetworkType_ibN === _0_0) {
                      t26 = _box_0.network;
                      A.checkTypeBound(t7, t5, "T", "toNetwork");
                      if (!(t26 instanceof A.WalletBitcoinNetwork))
                        A.throwExpression(B.WalletException_incorrect_network_null);
                      t1 = new A.Web3ChainNetworkData(t26, serviceIdentifier, t6);
                      break $label0$1;
                    }
                    t26 = A.UnimplementedError$(null);
                    t1 = A.throwExpression(t26);
                  }
                  n = t1;
                  J.add$1$ax(web3Chains, n);
                } catch (exception) {
                }
              }
              $async$returnValue = web3Chains;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_readNetworks$1, $async$completer);
    },
    _readWallet$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_HDWallet),
        $async$returnValue, $async$self = this, wallet;
      var $async$_readWallet$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self._read$1$key("HDW"), $async$_readWallet$0);
            case 3:
              // returning from await.
              wallet = $async$result;
              if (wallet == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = A.HDWallets_HDWallets$fromCborBytesOrObject(wallet).getInitializeWallet$0();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_readWallet$0, $async$completer);
    },
    getPermission$2$info$wallet(info, wallet) {
      return this.getPermission$body$_JSBackgroundHandler(info, wallet);
    },
    getPermission$body$_JSBackgroundHandler(info, wallet) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3APPAuthentication),
        $async$returnValue, $async$self = this, t6, out, applicationKey, toPermission, r, permission, t1, t2, t3, t4, t5, h, $async$temp1, $async$temp2;
      var $async$getPermission$2$info$wallet = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = info.applicationId;
              t2 = type$.int;
              t3 = J.JSArray_JSArray$growable(0, t2);
              t4 = A.List_List$filled(4, 0, false, t2);
              t5 = A.List_List$filled(16, 0, false, t2);
              h = new A.MD4(t3, t4, t5);
              h.reset$0();
              t6 = type$.List_int._as(new A.CodeUnits(t1));
              if (h._hash$_finished)
                A.throwExpression(B.CryptoException_PCa);
              h._lengthInBytes = h._lengthInBytes + t1.length;
              A.BytesUtils_validateListOfBytes(t6);
              B.JSArray_methods.addAll$1(t3, t6);
              h._iterate$0();
              out = A.List_List$filled(16, 0, false, t2);
              h.finish$1(out);
              A.zero(t4);
              A.zero(t5);
              B.JSArray_methods.clear$0(t3);
              h.reset$0();
              applicationKey = A.BytesUtils_toHexString(out, true, null);
              t2 = "WEB3_" + wallet._checksum + "_";
              $async$temp1 = A;
              $async$temp2 = A;
              $async$goto = 3;
              return A._asyncAwait($async$self._read$1$key(t2 + applicationKey), $async$getPermission$2$info$wallet);
            case 3:
              // returning from await.
              toPermission = $async$temp1.MethodUtils_nullOnException(new $async$temp2._JSBackgroundHandler_getPermission_closure($async$result), type$.Web3APPAuthentication);
              $async$goto = toPermission == null ? 4 : 5;
              break;
            case 4:
              // then
              r = $.$get$QuickCrypto__generateRandom().call$1(32);
              if (A.Web3APPAuthentication_toApplicationId(t1) !== t1)
                A.throwExpression(B.Web3RequestException_8PI);
              permission = A.Web3APPAuthentication$_(true, A._setArrayType([], type$.JSArray_Web3AccountAcitvity), t1, applicationKey, A.LinkedHashMap_LinkedHashMap$_empty(type$.NetworkType, type$.Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider), info.image, info.name, r);
              $async$goto = 6;
              return A._asyncAwait($async$self._write$2$data$key(A.BytesUtils_toHexString(permission.toCbor$0().encode$0(), true, null), t2 + permission.applicationKey), $async$getPermission$2$info$wallet);
            case 6:
              // returning from await.
              toPermission = permission;
            case 5:
              // join
              $async$returnValue = toPermission;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getPermission$2$info$wallet, $async$completer);
    },
    toEncryptedMessage$2$key$message(key, message) {
      var t1 = type$.List_int;
      return this.toEncryptedMessage$body$_JSBackgroundHandler(t1._as(key), t1._as(message));
    },
    toEncryptedMessage$body$_JSBackgroundHandler(key, message) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3EncryptedMessage),
        $async$returnValue, chacha, r, encryptedKey;
      var $async$toEncryptedMessage$2$key$message = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              chacha = A.ChaCha20Poly1305$(key);
              r = $.$get$QuickCrypto__generateRandom().call$1(12);
              encryptedKey = chacha.encrypt$2(r, message);
              A.BytesUtils_validateListOfBytes(r);
              $async$returnValue = new A.Web3EncryptedMessage(encryptedKey, A.List_List$unmodifiable(r, type$.int));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$toEncryptedMessage$2$key$message, $async$completer);
    },
    _getOrCreateAppAuthenticated$2$info$wallet(info, wallet) {
      return this._getOrCreateAppAuthenticated$body$_JSBackgroundHandler(info, wallet);
    },
    _getOrCreateAppAuthenticated$body$_JSBackgroundHandler(info, wallet) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3EncryptedMessage),
        $async$returnValue, $async$self = this, toPermission, $async$temp1, $async$temp2, $async$temp3, $async$temp4;
      var $async$_getOrCreateAppAuthenticated$2$info$wallet = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.getPermission$2$info$wallet(info, wallet), $async$_getOrCreateAppAuthenticated$2$info$wallet);
            case 3:
              // returning from await.
              toPermission = $async$result;
              $async$temp1 = A.SHA256_hash(A.StringUtils_encode(info.clientId, B.StringEncoding_1));
              $async$temp2 = A;
              $async$temp3 = B.Web3MessageTypes_List_100_11_chains;
              $async$temp4 = toPermission;
              $async$goto = 4;
              return A._asyncAwait($async$self._readNetworks$1(wallet), $async$_getOrCreateAppAuthenticated$2$info$wallet);
            case 4:
              // returning from await.
              $async$returnValue = $async$self.toEncryptedMessage$2$key$message($async$temp1, new $async$temp2.Web3ChainMessage($async$temp3, $async$temp4.createAuth$1($async$result)).toCbor$0().encode$0());
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_getOrCreateAppAuthenticated$2$info$wallet, $async$completer);
    },
    send$2($event, tabId) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue;
      var $async$send$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (tabId == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return A._asyncAwait(A.Tabs_sendMessage_(type$.JSObject._as(A.extension().tabs), A.ToJsEvent_toJsEvent($event), tabId).catchError$1(new A._JSBackgroundHandler_send_closure()), $async$send$2);
            case 3:
              // returning from await.
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$send$2, $async$completer);
    },
    sendAlive$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3, result, $async$temp1;
      var $async$sendAlive$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = J;
              $async$goto = 2;
              return A._asyncAwait(A.Tabs_query_(type$.JSObject._as(A.extension().tabs)), $async$sendAlive$0);
            case 2:
              // returning from await.
              t1 = $async$temp1.get$iterator$ax($async$result), t2 = type$.int;
            case 3:
              // for condition
              if (!t1.moveNext$0()) {
                // goto after for
                $async$goto = 4;
                break;
              }
              t3 = t1.get$current();
              result = A.List_List$from(B.List_empty, false, t2);
              result.$flags = 3;
              $async$self.send$2(new A.WalletEvent(B.WalletEventTarget_1, "", result, "sendAlive", B.WalletEventTypes_4, null, null), A._asIntQ(t3.id));
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$sendAlive$0, $async$completer);
    },
    getWallet$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HDWallet),
        $async$returnValue, $async$self = this, wallet;
      var $async$getWallet$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self._readWallet$0(), $async$getWallet$0);
            case 3:
              // returning from await.
              wallet = $async$result;
              if (wallet == null)
                throw A.wrapException(B.Web3RequestException_Wf5);
              $async$returnValue = wallet;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getWallet$0, $async$completer);
    },
    buildClient$1(tab) {
      var t1, host, t2, client,
        image = A.APPImage_network(A._asStringQ(tab.favIconUrl));
      if (image == null) {
        t1 = A._asStringQ(tab.url);
        t1.toString;
        host = A.Uri_tryParse(t1);
        if (host != null)
          host.get$host();
        image = new A.APPImage(B.ContentType_5_favIcon, t1);
      }
      t1 = A._asIntQ(tab.id);
      t1 = t1 == null ? null : B.JSInt_methods.toString$0(t1);
      t2 = A._asStringQ(tab.url);
      client = A.Web3ClientInfo_info(t1, image, A._asStringQ(tab.title), t2);
      if (client == null)
        throw A.wrapException(B.Web3RequestException_8PI);
      return client;
    },
    openPopup$1($event) {
      return this.openPopup$body$_JSBackgroundHandler($event);
    },
    openPopup$body$_JSBackgroundHandler($event) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WalletEvent),
        $async$returnValue, $async$self = this;
      var $async$openPopup$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.lock.synchronized$1$1(new A._JSBackgroundHandler_openPopup_closure($event), type$.WalletEvent), $async$openPopup$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$openPopup$1, $async$completer);
    },
    onBackgroudMessage$2($event, tab) {
      return this.onBackgroudMessage$body$_JSBackgroundHandler($event, tab);
    },
    onBackgroudMessage$body$_JSBackgroundHandler($event, tab) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WalletEvent),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$self = this, wallet, client, type, appAuthenticated, networks, auth, response, message, e, t1, t2, exception, $async$exception;
      var $async$onBackgroudMessage$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait($async$self.getWallet$0(), $async$onBackgroudMessage$2);
            case 7:
              // returning from await.
              wallet = $async$result;
              client = $async$self.buildClient$1(tab);
              type = A.NetworkType_fromTag($event.data);
              $async$goto = 8;
              return A._asyncAwait($async$self.getPermission$2$info$wallet(client, wallet), $async$onBackgroudMessage$2);
            case 8:
              // returning from await.
              appAuthenticated = $async$result;
              appAuthenticated.disconnectChain$1(type);
              t1 = appAuthenticated.applicationKey;
              t2 = wallet._checksum;
              $async$goto = 9;
              return A._asyncAwait($async$self._write$2$data$key(A.BytesUtils_toHexString(appAuthenticated.toCbor$0().encode$0(), true, null), "WEB3_" + t2 + "_" + t1), $async$onBackgroudMessage$2);
            case 9:
              // returning from await.
              $async$goto = 10;
              return A._asyncAwait($async$self._readNetworks$1(wallet), $async$onBackgroudMessage$2);
            case 10:
              // returning from await.
              networks = $async$result;
              auth = appAuthenticated.createAuth$1(networks);
              response = new A.Web3WalletResponseMessage(auth, true, type);
              $async$goto = 11;
              return A._asyncAwait($async$self.toEncryptedMessage$2$key$message(appAuthenticated.token, response.toCbor$0().encode$0()), $async$onBackgroudMessage$2);
            case 11:
              // returning from await.
              message = $async$result;
              t1 = A._asIntQ(tab.id);
              t1.toString;
              t2 = A.List_List$unmodifiable(message.toCbor$0().encode$0(), type$.int);
              $async$returnValue = new A.WalletEvent(B.WalletEventTarget_1, "" + t1, t2, $event.requestId, B.WalletEventTypes_0, null, null);
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.Web3RequestException) {
                e = t1;
                t1 = A._asIntQ(tab.id);
                if (t1 == null)
                  t1 = -1;
                $async$returnValue = new A.WalletEvent(B.WalletEventTarget_1, "" + t1, A.List_List$unmodifiable(e.toResponseMessage$0().toCbor$0().encode$0(), type$.int), $event.requestId, B.WalletEventTypes_1, null, null);
                // goto return
                $async$goto = 1;
                break;
              } else {
                t1 = A._asIntQ(tab.id);
                if (t1 == null)
                  t1 = -1;
                $async$returnValue = new A.WalletEvent(B.WalletEventTarget_1, "" + t1, A.List_List$unmodifiable(B.Web3RequestException_ce8.toResponseMessage$0().toCbor$0().encode$0(), type$.int), $event.requestId, B.WalletEventTypes_1, null, null);
                // goto return
                $async$goto = 1;
                break;
              }
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$onBackgroudMessage$2, $async$completer);
    },
    tabInformation$2(tab, $event) {
      return this.tabInformation$body$_JSBackgroundHandler(tab, $event);
    },
    tabInformation$body$_JSBackgroundHandler(tab, $event) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WalletEvent),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$self = this, wallet, client, authenticated, e, t1, t2, exception, $async$exception;
      var $async$tabInformation$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait($async$self.getWallet$0(), $async$tabInformation$2);
            case 7:
              // returning from await.
              wallet = $async$result;
              client = $async$self.buildClient$1(tab);
              $async$goto = 8;
              return A._asyncAwait($async$self._getOrCreateAppAuthenticated$2$info$wallet(client, wallet), $async$tabInformation$2);
            case 8:
              // returning from await.
              authenticated = $async$result;
              t1 = A._asIntQ(tab.id);
              t1.toString;
              t2 = A.List_List$unmodifiable(authenticated.toCbor$0().encode$0(), type$.int);
              $async$returnValue = new A.WalletEvent(B.WalletEventTarget_1, "" + t1, t2, $event.requestId, B.WalletEventTypes_2, null, null);
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.Web3RequestException) {
                e = t1;
                t1 = A._asIntQ(tab.id);
                if (t1 == null)
                  t1 = -1;
                $async$returnValue = new A.WalletEvent(B.WalletEventTarget_1, "" + t1, A.List_List$unmodifiable(e.toResponseMessage$0().toCbor$0().encode$0(), type$.int), $event.requestId, B.WalletEventTypes_1, null, null);
                // goto return
                $async$goto = 1;
                break;
              } else {
                t1 = A._asIntQ(tab.id);
                if (t1 == null)
                  t1 = -1;
                $async$returnValue = new A.WalletEvent(B.WalletEventTarget_1, "" + t1, A.List_List$unmodifiable(B.Web3RequestException_ce8.toResponseMessage$0().toCbor$0().encode$0(), type$.int), $event.requestId, B.WalletEventTypes_1, null, null);
                // goto return
                $async$goto = 1;
                break;
              }
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$tabInformation$2, $async$completer);
    }
  };
  A._JSBackgroundHandler__readNetworks_closure.prototype = {
    call$1(e) {
      var t1;
      A._asString(e);
      t1 = this.keys.$index(0, e);
      t1.toString;
      return new A._Record_2(e, t1);
    },
    $signature: 199
  };
  A._JSBackgroundHandler__readNetworks_closure0.prototype = {
    call$1(e) {
      return A.BytesUtils_fromHexString(type$.Record_2_String_and_String._as(e)._1, false);
    },
    $signature: 200
  };
  A._JSBackgroundHandler__readNetworks_closure1.prototype = {
    call$0() {
      return A.WalletNetwork_fromCborBytesOrObject(A.ExtractCborList_getCborTag(this.values, 1));
    },
    $signature: 50
  };
  A._JSBackgroundHandler__readNetworks_closure2.prototype = {
    call$0() {
      var t1 = A.ExtractCborList_elementAs(this.values, 0, type$.nullable_int);
      return A.ChainConst_updateNetwork(this._box_0.network, t1);
    },
    $signature: 50
  };
  A._JSBackgroundHandler__readNetworks_closure3.prototype = {
    call$0() {
      var identifier = A.ExtractCborList_elementAs(this.values, 6, type$.nullable_CborTagValue_dynamic);
      if (identifier == null)
        return null;
      return A.ProviderIdentifier_ProviderIdentifier$deserialize(identifier);
    },
    $signature: 202
  };
  A._JSBackgroundHandler_getPermission_closure.prototype = {
    call$0() {
      return A.Web3APPAuthentication_Web3APPAuthentication$deserialize(this.permission);
    },
    $signature: 203
  };
  A._JSBackgroundHandler_send_closure.prototype = {
    call$1(e) {
      return null;
    },
    $signature: 11
  };
  A._JSBackgroundHandler_sendWalletMessage_onMessage.prototype = {
    call$3(message, sender, sendResponse) {
      var $event, result,
        t1 = type$.nullable_JSObject;
      t1._as(message);
      t1._as(sender);
      type$.nullable_JavaScriptFunction._as(sendResponse);
      $event = message == null ? null : A.JSWalletEvent_toEvent(message);
      if ($event == null)
        return false;
      if ($event.type !== B.WalletEventTypes_4)
        return false;
      if (!B.JSArray_methods.contains$1(this.allowTargets, $event.target))
        return false;
      result = A.Runtime_sendMessage_(type$.JSObject._as(A.extension().runtime), this.msg);
      t1 = this.completer;
      result.then$1$1(new A._JSBackgroundHandler_sendWalletMessage_onMessage_closure(t1), type$.Null);
      result.catchError$1(new A._JSBackgroundHandler_sendWalletMessage_onMessage_closure0(t1));
      return true;
    },
    $signature: 204
  };
  A._JSBackgroundHandler_sendWalletMessage_onMessage_closure.prototype = {
    call$1(e) {
      this.completer.complete$1(type$.nullable_WalletEvent._as(e));
    },
    $signature: 205
  };
  A._JSBackgroundHandler_sendWalletMessage_onMessage_closure0.prototype = {
    call$1(e) {
      var t1 = e == null ? type$.Object._as(e) : e;
      this.completer.completeError$1(t1);
      return null;
    },
    $signature: 11
  };
  A._JSBackgroundHandler_openPopup_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WalletEvent),
        $async$returnValue, $async$self = this, info, t2, newLeft, newTop, newWidth, newHeight, t1, windowIdResponse;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSObject;
              $async$goto = 3;
              return A._asyncAwait(A.Runtime_sendMessage_(t1._as(A.extension().runtime), $async$self.event.copyWith$1$target(B.WalletEventTarget_1)).then$1$1(new A._JSBackgroundHandler_openPopup__closure(), type$.nullable_WalletEvent).catchError$1(new A._JSBackgroundHandler_openPopup__closure0()), $async$call$0);
            case 3:
              // returning from await.
              windowIdResponse = $async$result;
              if (windowIdResponse != null) {
                $async$returnValue = windowIdResponse;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 4;
              return A._asyncAwait(A.ChromeWindows_getCurrent_(t1._as(A.extension().windows), true), $async$call$0);
            case 4:
              // returning from await.
              info = $async$result;
              t2 = A._asIntQ(info.left);
              t2.toString;
              newLeft = A.IntUtils_max(0, t2 + 100);
              t2 = A._asIntQ(info.top);
              t2.toString;
              newTop = A.IntUtils_max(0, t2 + 100);
              t2 = A._asIntQ(info.width);
              t2.toString;
              newWidth = A.IntUtils_min(t2, 400);
              t2 = A._asIntQ(info.height);
              t2.toString;
              newHeight = A.IntUtils_min(t2, 600);
              $async$goto = 5;
              return A._asyncAwait(A.ChromeWindows_create_(t1._as(A.extension().windows), true, newHeight, newLeft, newTop, "popup", A._asString(t1._as(A.extension().runtime).getURL("index.html")) + "?context=popup", newWidth), $async$call$0);
            case 5:
              // returning from await.
              $async$goto = 6;
              return A._asyncAwait(A._JSBackgroundHandler_sendWalletMessage($.$get$JSWalletConstant_openExtension().copyWith$1$target(B.WalletEventTarget_1)), $async$call$0);
            case 6:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 206
  };
  A._JSBackgroundHandler_openPopup__closure.prototype = {
    call$1(e) {
      return type$.nullable_WalletEvent._as(e);
    },
    $signature: 207
  };
  A._JSBackgroundHandler_openPopup__closure0.prototype = {
    call$1(e) {
      return null;
    },
    $signature: 11
  };
  A.main_closure.prototype = {
    call$1(details) {
      type$.JSObject._as(details);
    },
    $signature: 208
  };
  A.main_closure0.prototype = {
    call$3(message, sender, sendResponse) {
      var $event,
        t1 = type$.nullable_JSObject;
      t1._as(message);
      type$.JSObject._as(sender);
      type$.JavaScriptFunction._as(sendResponse);
      $event = message == null ? null : A.JSWalletEvent_toEvent(message);
      if ($event == null || $event.target !== B.WalletEventTarget_2)
        return false;
      switch ($event.type) {
        case B.WalletEventTypes_7:
          t1 = t1._as(sender.tab);
          t1.toString;
          this.handler.onBackgroudMessage$2($event, t1).then$1$1(new A.main__closure(sendResponse), type$.nullable_Object);
          return true;
        case B.WalletEventTypes_6:
          this.handler.openPopup$1($event).then$1$1(new A.main__closure0(sendResponse), type$.nullable_Object);
          return true;
        case B.WalletEventTypes_3:
          t1 = t1._as(sender.tab);
          t1.toString;
          this.handler.tabInformation$2(t1, $event).then$1$1(new A.main__closure1(sendResponse), type$.Null);
          return true;
        default:
          return false;
      }
    },
    $signature: 209
  };
  A.main__closure.prototype = {
    call$1(e) {
      var t1 = this.sendResponse;
      return t1.call(t1, A.ToJsEvent_toJsEvent(type$.WalletEvent._as(e)));
    },
    $signature: 40
  };
  A.main__closure0.prototype = {
    call$1(e) {
      var t1 = this.sendResponse;
      return t1.call(t1, A.ToJsEvent_toJsEvent(type$.WalletEvent._as(e)));
    },
    $signature: 40
  };
  A.main__closure1.prototype = {
    call$1(e) {
      var t1 = this.sendResponse;
      t1.call(t1, A.ToJsEvent_toJsEvent(type$.WalletEvent._as(e)));
    },
    $signature: 211
  };
  (function aliases() {
    var _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A.ListBase.prototype;
    _.super$ListBase$setRange = _.setRange$4;
    _ = A.LegacyAddress.prototype;
    _.super$LegacyAddress$toAddress = _.toAddress$1;
    _ = A._Keccack.prototype;
    _.super$_Keccack$reset = _.reset$0;
    _.super$_Keccack$update = _.update$1;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static = hunkHelpers.installStaticTearOff;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 212);
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 24);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 24);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 24);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 5);
    _static_1(A, "convert___defaultToEncodable$closure", "_defaultToEncodable", 45);
    _static_2(A, "bch_bech32__BchBech32Utils_computeChecksum$closure", "_BchBech32Utils_computeChecksum", 31);
    _static(A, "bech32_base_Bech32Utils_verifyChecksum$closure", 2, null, ["call$3", "call$2"], ["Bech32Utils_verifyChecksum", function(hrp, data) {
      return A.Bech32Utils_verifyChecksum(hrp, data, B.Bech32Encodings_0);
    }], 215, 0);
    _static_1(A, "serialization_BcsSerialization_toReadableObject$closure", "BcsSerialization_toReadableObject", 144);
    _static_2(A, "segwit_bech32_SegwitBech32Encoder__computeChecksum$closure", "SegwitBech32Encoder__computeChecksum", 31);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Iterable, A.CastIterator, A.Closure, A.MapBase, A.Error, A.ListBase, A.SentinelValue, A.ListIterator, A.MappedIterator, A.WhereIterator, A.SkipIterator, A.EmptyIterator, A.WhereTypeIterator, A.FixedLengthListMixin, A.UnmodifiableListMixin, A.Symbol, A._Record, A.MapView, A.ConstantMap, A._KeysOrValuesOrElementsIterator, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.LinkedHashMapValueIterator, A.LinkedHashMapEntryIterator, A.JSSyntaxRegExp, A._MatchImplementation, A._AllMatchesIterator, A.StringMatch, A._StringAllMatchesIterator, A._Cell, A._UnmodifiableNativeByteBufferView, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A._SyncStarIterator, A.AsyncError, A.TimeoutException, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A._StreamIterator, A._Zone, A.SetBase, A._LinkedHashSetCell, A._LinkedHashSetIterator, A._MapBaseValueIterator, A._UnmodifiableMapMixin, A.Codec, A.Converter, A._Base64Encoder, A._Base64Decoder, A._JsonStringifier, A._Utf8Encoder, A._Utf8Decoder, A._BigIntImpl, A._BigIntClassic, A.DateTime, A.Duration, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.IntegerDivisionByZeroException, A.MapEntry, A.Null, A._StringStackTrace, A.RuneIterator, A.StringBuffer, A._Uri, A.UriData, A._SimpleUri, A.Expando, A.NullRejectionException, A._JSSecureRandom, A.Endian, A.BitcoinAddressType, A.LegacyAddress, A.SegwitAddress, A.BlockchainUtilsException, A.BitcoinSVNetwork, A.BitcoinNetwork, A.LitecoinNetwork, A.DashNetwork, A.DogecoinNetwork, A.BitcoinCashNetwork, A.PepeNetwork, A.ElectraProtocolNetwork, A.AdaByronIcarusAddrEncoder, A.AdaByronLegacyAddrEncoder, A.AdaShelleyAddrEncoder, A.ADANetwork, A.AlgoAddrEncoder, A.AptosSingleKeyEd25519AddrEncoder, A.AptosSingleKeySecp256k1AddrEncoder, A.AptosAddrEncoder, A.AtomAddressDecodeResult, A.AtomAddrEncoder, A.AtomEthSecp256k1AddrEncoder, A.AtomNist256P1AddrEncoder, A.AtomEd25519AddrEncoder, A.AvaxPChainAddrEncoder, A.AvaxXChainAddrEncoder, A.EgldAddrEncoder, A.BlockchainAddressEncoder, A.EosAddrEncoder, A.ErgoNetworkTypes, A.ErgoP2PKHAddrEncoder, A.EthAddrDecoder, A.EthAddrEncoder, A.FilSecp256k1AddrEncoder, A.IcxAddrEncoder, A.InjAddrEncoder, A.NanoAddrEncoder, A.NearAddrEncoder, A.NeoAddrEncoder, A.OkexAddrEncoder, A.OneAddrEncoder, A.P2PKHAddrEncoder, A.BchP2PKHAddrEncoder, A.P2SHAddrEncoder, A.BchP2SHAddrEncoder, A.P2TRAddrEncoder, A.P2WPKHAddrEncoder, A.SolAddrEncoder, A.SubstrateEd25519AddrEncoder, A.SubstrateSr25519AddrEncoder, A.SubstrateSecp256k1AddrEncoder, A.SuiSecp256k1AddrEncoder, A.SuiSecp256r1AddrEncoder, A.SuiAddrEncoder, A.DecodeAddressResult, A.FriendlyAddressFlags, A.TonAddrDecoder, A.TonAddrEncoder, A.TrxAddrDecoder, A.TrxAddrEncoder, A.XlmAddrTypes, A.XlmAddrDecoderResult, A.XlmAddrDecoder, A.XlmAddrEncoder, A.XrpAddrEncoder, A.XtzAddrPrefixes, A.XtzAddrEncoder, A.ZilAddrEncoder, A.Bip32KeyIndex, A.Bip32KeyNetVersions, A.BipCoins, A.BipProposal, A.BipCoinConfig, A.CipProposal, A.CoinConf, A.CoinParams, A.CoinNames, A.Ed25519Blake2bPublicKey, A.Ed25519PublicKey, A.Ed25519PrivateKey, A.Ed25519KholawPublicKey, A.MoneroPublicKey, A.Nist256p1PublicKey, A.Nist256p1HybridPublicKey, A.Secp256k1PublicKey, A.Sr25519PublicKey, A.MoneroCoinConf, A.MoneroCoins, A.MoneroProposal, A.SubstrateCoinConf, A.SubstrateCoins, A.SubstratePropoosal, A.CborBase64Types, A.CborBaseUrlValue, A.CborBigFloatValue, A.CborBigIntValue, A.CborBoleanValue, A.CborBytesValue, A.CborDynamicBytesValue, A.CborTagValue, A._CborDate, A.CborDecimalFracValue, A.CborFloatValue, A.CborIntValue, A.CborSafeIntValue, A.CborListValue, A.CborMapValue, A.CborMimeValue, A.CborNullValue, A.CborUndefinedValue, A.CborRegxpValue, A.CborSetValue, A.CborString, A.CborUriValue, A._DecodeCborResult, A.CborBytesTracker, A.FloatLength, A.FloatUtils, A.AES, A.AESLib, A.Curve, A.ECDSAPublicKey, A.EDDSAPrivateKey, A.EDDSAPublicKey, A.AbstractPoint, A.ChaCha20Poly1305, A.CTR, A.Blake2bConfig, A.BLAKE2b, A._Keccack, A.MD4, A._RIPEMD, A.SHA256, A.Poly1305, A.FortunaPRNG, A.SchnorrkelPublicKey, A._Hex, A.BigRational, A.Tuple, A.CosmosBaseAddress, A.MoneroNetwork, A.BcsSerialization, A.SolidityAddress, A.SolAddress, A.OnChainBridgeException, A.PlatformConfig, A.WalletEvent, A.PlatformInterface, A.SafeStorage, A.StorageItem, A.WalletException, A.Equatable, A._ProviderAuthenticated_Object_CborSerializable, A._APPImage_Object_CborSerializable, A.CborSerializable, A.JsonSerialization, A.SynchronizedLock, A.CustomProposal, A._AddressDerivationIndex_Object_CborSerializable, A.NetworkType, A._APIProvider_Object_Equatable, A._ProviderIdentifier_Object_Equatable, A.IntegerBalance, A._WalletNetwork_Object_Equatable, A._NetworkCoinParams_Object_CborSerializable, A._CosmosFeeToken_Object_CborSerializable, A.CosmosNetworkTypes, A._TonAccountContext_Object_CborSerializable, A._CoingeckoCoin_Object_CborSerializable, A._APPToken_Object_CborSerializable, A._HDWallets_Object_CborSerializable, A.HDWallet, A._Web3RequestException_Object_Equatable, A._Web3MessageCore_Object_CborSerializable, A._Web3EncryptedMessage_Object_CborSerializable, A._Web3AccountAcitvity_Object_CborSerializable, A._Web3RequestAuthentication_Object_CborSerializable, A._Web3APPData_Object_CborSerializable, A._Web3ChainAccount_Object_CborSerializable, A._Web3ChainIdnetifier_Object_CborSerializable, A._Web3ChainAuthenticated_Object_CborSerializable, A._Web3Chain_Object_CborSerializable, A._Web3ClientInfo_Object_Equatable, A.Web3ChainNetworkData, A.BaseSubstrateAddress, A.StellarAddress, A.TonAddress, A.TonChain, A.WalletVersion, A.TonApiType, A._JSBackgroundHandler]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JavaScriptBigInt, J.JavaScriptSymbol, J.JSNumber, J.JSString]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, J.JSArray, A.NativeByteBuffer, A.NativeTypedData]);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Iterable, [A._CastIterableBase, A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable, A.SkipIterable, A.WhereTypeIterable, A._KeysOrValues, A._AllMatchesIterable, A._StringAllMatchesIterable, A._SyncStarIterable, A.Runes]);
    _inheritMany(A._CastIterableBase, [A.CastIterable, A.__CastListBase__CastIterableBase_ListMixin]);
    _inherit(A._EfficientLengthCastIterable, A.CastIterable);
    _inherit(A._CastListBase, A.__CastListBase__CastIterableBase_ListMixin);
    _inheritMany(A.Closure, [A._CastListBase_removeWhere_closure, A.Closure2Args, A.CastMap_entries_closure, A.Closure0Args, A.TearOffClosure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A._Future_timeout_closure0, A.MapBase_entries_closure, A._BigIntImpl_hashCode_finish, A.DateTime_parse_parseIntOrZero, A.DateTime_parse_parseMilliAndMicroseconds, A.promiseToFuture_closure, A.promiseToFuture_closure0, A.BitcoinAddressType_fromValue_closure, A.BasedUtxoNetwork_fromName_closure, A._Base32Utils_translateAlphabet_closure, A._Base32Utils_translateAlphabet_closure0, A._Base32Utils_translateAlphabet_closure1, A._Base32Utils__b32decode_closure, A._BchBech32Utils_hrpExpand_closure, A.Bech32EncoderBase_encodeBech32_closure, A.Bech32DecoderBase_decodeBech32_closure, A.Bech32DecoderBase_decodeBech32_closure0, A.Bech32DecoderBase_decodeBech32_closure1, A.EthAddrUtils__checksumEncode_closure, A.XlmAddrTypes_fromTag_closure, A.XlmAddrTypes_fromTag__closure, A.Bip44Coins_fromName_closure, A.Bip44Conf_akashNetwork_closure, A.Bip44Conf_algorand_closure, A.Bip44Conf_aptos_closure, A.Bip44Conf_aptosSingleKeySecp256k1_closure, A.Bip44Conf_aptosSingleKeyEd25519_closure, A.Bip44Conf_avaxCChain_closure, A.Bip44Conf_avaxPChain_closure, A.Bip44Conf_avaxXChain_closure, A.Bip44Conf_axelar_closure, A.Bip44Conf_bandProtocol_closure, A.Bip44Conf_binanceChain_closure, A.Bip44Conf_binanceSmartChain_closure, A.Bip44Conf_bitcoinMainNet_closure, A.Bip44Conf_bitcoinTestNet_closure, A.Bip44Conf_bitcoinCashMainNet_closure, A.Bip44Conf_bitcoinCashTestNet_closure, A.Bip44Conf_bitcoinCashSlpMainNet_closure, A.Bip44Conf_bitcoinCashSlpTestNet_closure, A.Bip44Conf_bitcoinSvMainNet_closure, A.Bip44Conf_bitcoinSvTestNet_closure, A.Bip44Conf_cardanoByronIcarus_closure, A.Bip44Conf_cardanoByronLedger_closure, A.Bip44Conf_cardanoByronIcarusTestnet_closure, A.Bip44Conf_cardanoByronLedgerTestnet_closure, A.Bip44Conf_celo_closure, A.Bip44Conf_certik_closure, A.Bip44Conf_chihuahua_closure, A.Bip44Conf_cosmos_closure, A.Bip44Conf_cosmosTestnet_closure, A.Bip44Conf_cosmosEthSecp256k1_closure, A.Bip44Conf_cosmosTestnetEthSecp256k1_closure, A.Bip44Conf_cosmosNist256p1_closure, A.Bip44Conf_cosmosTestnetNist256p1_closure, A.Bip44Conf_cosmosEd25519_closure, A.Bip44Conf_cosmosTestnetEd25519_closure, A.Bip44Conf_dashMainNet_closure, A.Bip44Conf_dashTestNet_closure, A.Bip44Conf_dogecoinMainNet_closure, A.Bip44Conf_dogecoinTestNet_closure, A.Bip44Conf_pepeMainnet_closure, A.Bip44Conf_pepeTestnet_closure, A.Bip44Conf_ecashMainNet_closure, A.Bip44Conf_ecashTestNet_closure, A.Bip44Conf_elrond_closure, A.Bip44Conf_eos_closure, A.Bip44Conf_ergoMainNet_closure, A.Bip44Conf_ergoTestNet_closure, A.Bip44Conf_ethereum_closure, A.Bip44Conf_ethereumTestnet_closure, A.Bip44Conf_ethereumClassic_closure, A.Bip44Conf_fantomOpera_closure, A.Bip44Conf_filecoin_closure, A.Bip44Conf_harmonyOneMetamask_closure, A.Bip44Conf_harmonyOneEth_closure, A.Bip44Conf_harmonyOneAtom_closure, A.Bip44Conf_huobiChain_closure, A.Bip44Conf_icon_closure, A.Bip44Conf_injective_closure, A.Bip44Conf_irisNet_closure, A.Bip44Conf_kava_closure, A.Bip44Conf_kusamaEd25519Slip_closure, A.Bip44Conf_kusamaTestnetEd25519Slip_closure, A.Bip44Conf_litecoinMainNet_closure, A.Bip44Conf_litecoinTestNet_closure, A.Bip44Conf_moneroEd25519Slip_closure, A.Bip44Conf_moneroSecp256k1_closure, A.Bip44Conf_nano_closure, A.Bip44Conf_nearProtocol_closure, A.Bip44Conf_neo_closure, A.Bip44Conf_nineChroniclesGold_closure, A.Bip44Conf_okexChainEth_closure, A.Bip44Conf_okexChainAtom_closure, A.Bip44Conf_okexChainAtomOld_closure, A.Bip44Conf_ontology_closure, A.Bip44Conf_osmosis_closure, A.Bip44Conf_piNetwork_closure, A.Bip44Conf_polkadotEd25519Slip_closure, A.Bip44Conf_polkadotTestnetEd25519Slip_closure, A.Bip44Conf_polygon_closure, A.Bip44Conf_ripple_closure, A.Bip44Conf_rippleTestnet_closure, A.Bip44Conf_rippleEd25519_closure, A.Bip44Conf_rippleTestnetEd25519_closure, A.Bip44Conf_secretNetworkOld_closure, A.Bip44Conf_secretNetworkNew_closure, A.Bip44Conf_solana_closure, A.Bip44Conf_solanaTestnet_closure, A.Bip44Conf_stellar_closure, A.Bip44Conf_stellarTestnet_closure, A.Bip44Conf_terra_closure, A.Bip44Conf_tezos_closure, A.Bip44Conf_theta_closure, A.Bip44Conf_tron_closure, A.Bip44Conf_tronTestnet_closure, A.Bip44Conf_vechain_closure, A.Bip44Conf_verge_closure, A.Bip44Conf_zcashMainNet_closure, A.Bip44Conf_zcashTestNet_closure, A.Bip44Conf_zilliqa_closure, A.Bip44Conf_tonMainnet_closure, A.Bip44Conf_tonTestnet_closure, A.Bip44Conf_electraProtocolMainNet_closure, A.Bip44Conf_electraProtocolTestNet_closure, A.Bip44Conf_suiSecp256k1_closure, A.Bip44Conf_suiSecp256r1_closure, A.Bip44Conf_suiEd25519_closure, A.Bip49Coins_fromName_closure, A.Bip49Conf_dashMainNet_closure, A.Bip49Conf_dashTestNet_closure, A.Bip49Conf_dogecoinMainNet_closure, A.Bip49Conf_dogecoinTestNet_closure, A.Bip49Conf_litecoinMainNet_closure, A.Bip49Conf_litecoinTestNet_closure, A.Bip49Conf_zcashMainNet_closure, A.Bip49Conf_zcashTestNet_closure, A.Bip49Conf_bitcoinMainNet_closure, A.Bip49Conf_bitcoinTestNet_closure, A.Bip49Conf_bitcoinSvMainNet_closure, A.Bip49Conf_bitcoinSvTestNet_closure, A.Bip49Conf_bitcoinCashMainNet_closure, A.Bip49Conf_bitcoinCashTestNet_closure, A.Bip49Conf_bitcoinCashSlpMainNet_closure, A.Bip49Conf_bitcoinCashSlpTestNet_closure, A.Bip49Conf_ecashMainNet_closure, A.Bip49Conf_ecashTestNet_closure, A.Bip49Conf_pepeMainnet_closure, A.Bip49Conf_pepeTestnet_closure, A.Bip49Conf_electraProtocolMainNet_closure, A.Bip49Conf_electraProtocolTestNet_closure, A.Bip84Coins_fromName_closure, A.Bip84Conf_bitcoinMainNet_closure, A.Bip84Conf_bitcoinTestNet_closure, A.Bip84Conf_litecoinMainNet_closure, A.Bip84Conf_litecoinTestNet_closure, A.Bip84Conf_electraProtocolMainNet_closure, A.Bip84Conf_electraProtocolTestNet_closure, A.Bip86Coins_fromName_closure, A.Bip86Conf_bitcoinMainNet_closure, A.Bip86Conf_bitcoinTestNet_closure, A.ChainType_fromValue_closure, A.CoinProposal_fromName_closure, A.Cip1852Coins_fromName_closure, A.Cip1852Conf_cardanoIcarusMainNet_closure, A.Cip1852Conf_cardanoIcarusTestNet_closure, A.Cip1852Conf_cardanoLedgerMainNet_closure, A.Cip1852Conf_cardanoLedgerTestNet_closure, A.MoneroCoins_fromName_closure, A.SubstrateCoins_fromName_closure, A.SubstrateConf_acalaEd25519_closure, A.SubstrateConf_acalaSecp256k1_closure, A.SubstrateConf_acalaSr25519_closure, A.SubstrateConf_bifrostEd25519_closure, A.SubstrateConf_bifrostSecp256k1_closure, A.SubstrateConf_bifrostSr25519_closure, A.SubstrateConf_chainXEd25519_closure, A.SubstrateConf_chainXSecp256k1_closure, A.SubstrateConf_chainXSr25519_closure, A.SubstrateConf_edgewareEd25519_closure, A.SubstrateConf_edgewareSecp256k1_closure, A.SubstrateConf_edgewareSr25519_closure, A.SubstrateConf_genericEd25519_closure, A.SubstrateConf_genericSecp256k1_closure, A.SubstrateConf_genericSr25519_closure, A.SubstrateConf_karuraEd25519_closure, A.SubstrateConf_karuraSecp256k1_closure, A.SubstrateConf_karuraSr25519_closure, A.SubstrateConf_kusamaEd25519_closure, A.SubstrateConf_kusamaSecp256k1_closure, A.SubstrateConf_kusamaSr25519_closure, A.SubstrateConf_moonbeamEd25519_closure, A.SubstrateConf_moonbeamSecp256k1_closure, A.SubstrateConf_moonbeamSr25519_closure, A.SubstrateConf_moonriverEd25519_closure, A.SubstrateConf_moonriverSecp256k1_closure, A.SubstrateConf_moonriverSr25519_closure, A.SubstrateConf_phalaEd25519_closure, A.SubstrateConf_phalaSecp256k1_closure, A.SubstrateConf_phalaSr25519_closure, A.SubstrateConf_plasmEd25519_closure, A.SubstrateConf_plasmSecp256k1_closure, A.SubstrateConf_plasmSr25519_closure, A.SubstrateConf_polkadotEd25519_closure, A.SubstrateConf_polkadotSecp256k1_closure, A.SubstrateConf_polkadotSr25519_closure, A.SubstrateConf_soraEd25519_closure, A.SubstrateConf_soraSecp256k1_closure, A.SubstrateConf_soraSr25519_closure, A.SubstrateConf_stafiEd25519_closure, A.SubstrateConf_stafiSecp256k1_closure, A.SubstrateConf_stafiSr25519_closure, A.CborObject_CborObject$fromDynamic_closure, A.CborDynamicBytesValue_closure, A.CborUtils__decodeUtf8String_closure, A.CborUtils__toStringObject_closure, A.CborUtils__toStringObject_closure0, A.CborUtils__decodeBytesString_closure, A.AESLib_initialize_r24, A.QuickCrypto__generateRandom_closure, A.BlockchainUtilsException_toString_closure, A.BlockchainUtilsException_toString_closure0, A.CosmosKeysAlgs_fromName_closure, A.MoneroNetwork_fromName_closure, A.WalletEventTypes_fromName_closure, A.IndexDbStorage__requestHandler_closure, A.IndexDbStorage__requestHandler_closure0, A.IndexDbStorage_init_closure, A.IndexDbStorage_init_closure0, A.IndexDbStorage_init_closure1, A.IndexDbStorage_all_closure, A.JSWalletEvent_toEvent_closure, A.ToJsEvent_toJsEvent_closure, A.WebPlatformInterface__initDatabase__closure, A.WebPlatformInterface_getConfig_closure, A.ProviderAuthType_fromName_closure, A.ProviderAuthType_fromTag_closure, A.ContentType_fromValue_closure, A.ExtractCborMap_generateMap_closure, A.SynchronizedLock_synchronized_closure, A.CustomCoins_fromName_closure, A.CustomCurrencyConf_byronLegacy_closure, A.CustomCurrencyConf_byronLegacyTestnet_closure, A.AddressDerivationType_fromTag_closure, A.Bip32AddressIndex__toPath_closure, A.Bip32AddressIndex__toPath_closure0, A.SeedTypes_fromValue_closure, A.NetworkType_fromTag_closure, A.NetworkType_fromName_closure, A.ProvidersConst_getDefaultProvider_closure, A.BitcoinExplorerProviderType_fromName_closure, A.AptosAPIProviderType_fromValue_closure, A.AptosAPIProvider_AptosAPIProvider$fromCborBytesOrObject_closure, A.BitcoinExplorerAPIProvider_BitcoinExplorerAPIProvider$fromCborBytesOrObject_closure, A.ElectrumAPIProvider_ElectrumAPIProvider$fromCborBytesOrObject_closure, A.CardanoAPIProvider_CardanoAPIProvider$fromCborBytesOrObject_closure, A.CosmosAPIProvider_CosmosAPIProvider$fromCborBytesOrObject_closure, A.EthereumAPIProvider_EthereumAPIProvider$fromCborBytesOrObject_closure, A.MoneroAPIProvider_MoneroAPIProvider$fromCborBytesOrObject_closure, A.RippleAPIProvider_RippleAPIProvider$fromCborBytesOrObject_closure, A.SolanaAPIProvider_SolanaAPIProvider$fromCborBytesOrObject_closure, A.StellarAPIProvider_StellarAPIProvider$fromCborBytesOrObject_closure, A.SubstrateAPIProvider_SubstrateAPIProvider$fromCborBytesOrObject_closure, A.SuiAPIProvider_SuiAPIProvider$fromCborBytesOrObject_closure, A.TonAPIProvider_TonAPIProvider$fromCborBytesOrObject_closure, A.TronAPIProvider_TronAPIProvider$fromCborBytesOrObject_closure, A.ServiceProtocol_fromID_closure, A.APIUtils__findProviders__closure2, A.APIUtils__findProviders__closure3, A.APIUtils__findProviders__closure, A.APIUtils__findProviders__closure0, A.APIUtils__findProviders_closure1, A.APIUtils_findNetworkProvider_closure, A.WalletNetwork_getAllProviders_closure, A.AptosChainType_fromValue_closure, A.AptosNetworkParams_AptosNetworkParams$fromCborBytesOrObject_closure, A.BitcoinParams_BitcoinParams$fromCborBytesOrObject_closure, A.CardanoNetworkParams_CardanoNetworkParams$fromCborBytesOrObject_closure, A.CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject_closure, A.CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject_closure0, A.CosmosNetworkParams_CosmosNetworkParams$fromCborBytesOrObject_closure1, A.EthereumNetworkParams_EthereumNetworkParams$fromCborBytesOrObject_closure, A.MoneroNetworkParams_MoneroNetworkParams$fromCborBytesOrObject_closure, A.RippleNetworkParams_RippleNetworkParams$fromCborBytesOrObject_closure, A.SolanaNetworkType_fromValue_closure, A.SolanaNetworkParams_SolanaNetworkParams$fromCborBytesOrObject_closure, A.StellarChainType_fromValue_closure, A.StellarNetworkParams_StellarNetworkParams$fromCborBytesOrObject_closure, A.SubstrateNetworkParams_SubstrateNetworkParams$fromCborBytesOrObject_closure, A.SubstrateNetworkParams_SubstrateNetworkParams$fromCborBytesOrObject_closure0, A.SuiChainType_fromValue_closure, A.SuiNetworkParams_SuiNetworkParams$fromCborBytesOrObject_closure, A.TonNetworkParams_TonNetworkParams$fromCborBytesOrObject_closure, A.TronNetworkParams_TronNetworkParams$fromCborBytesOrObject_closure, A.CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure, A.CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure0, A.CosmosNetworkTypes_CosmosNetworkTypes$fromValue_closure, A.SubstrateChainType_fromValue_closure, A.TonAccountContextType_fromTag_closure, A.TronChainType_fromId_closure, A.WalletLockTime_fromValue_closure, A.Token_Token$deserialize_closure, A.Token_Token$deserialize_closure0, A.HDWallets_HDWallets$fromCborBytesOrObject_closure, A.HDWallets_HDWallets$fromCborBytesOrObject_closure0, A.Web3APPAuthentication_createAuth_closure, A.Web3APPAuthentication_createAuth_closure0, A.Web3APPAuthentication_Web3APPAuthentication$deserialize_closure, A.Web3APPAuthentication_Web3APPAuthentication$deserialize_closure0, A.Web3APPAuthentication_Web3APPAuthentication$deserialize_closure1, A.Web3APPAuthentication_Web3APPAuthentication$deserialize_closure2, A.Web3APPAuthentication_toCbor_closure, A.Web3APPData_toCbor_closure, A.Web3APPData_toCbor_closure0, A.Web3ChainAuthenticated_toCbor_closure, A.Web3ChainAuthenticated_toCbor_closure0, A.Web3Chain_getCurrentPermissionNetwork_closure, A.Web3Chain_getCurrentPermissionNetwork_closure0, A.Web3Chain_getCurrentPermissionNetwork_closure1, A.Web3Chain_getCurrentPermissionNetwork_closure2, A.Web3Chain_toCbor_closure, A.Web3AptosChain_Web3AptosChain$deserialize_closure, A.Web3AptosChain_createAuthenticated_closure, A.Web3AptosChain_createAuthenticated_closure0, A.Web3BitcoinChain_Web3BitcoinChain$deserialize_closure, A.Web3BitcoinChain_createAuthenticated_closure, A.Web3BitcoinChain_createAuthenticated_closure0, A.Web3CosmosChain_Web3CosmosChain$deserialize_closure, A.Web3CosmosChain_createAuthenticated_closure, A.Web3CosmosChain_createAuthenticated_closure0, A.Web3EthereumChainAuthenticated_toCbor_closure, A.Web3EthereumChainAuthenticated_toCbor_closure0, A.Web3EthereumChain_Web3EthereumChain$deserialize_closure, A.Web3EthereumChain_createAuthenticated_closure, A.Web3EthereumChain_createAuthenticated_closure0, A.Web3EthereumChain_createAuthenticated_closure1, A.Web3SolanaChain_Web3SolanaChain$deserialize_closure, A.Web3SolanaChain_createAuthenticated_closure, A.Web3SolanaChain_createAuthenticated_closure0, A.Web3StellarChain_Web3StellarChain$deserialize_closure, A.Web3StellarChain_createAuthenticated_closure, A.Web3StellarChain_createAuthenticated_closure0, A.Web3SubstrateChain_Web3SubstrateChain$deserialize_closure, A.Web3SubstrateChain_createAuthenticated_closure, A.Web3SubstrateChain_createAuthenticated_closure0, A.Web3SuiChain_Web3SuiChain$deserialize_closure, A.Web3SuiChain_createAuthenticated_closure, A.Web3SuiChain_createAuthenticated_closure0, A.Web3TonChain_Web3TonChain$deserialize_closure, A.Web3TonChain_createAuthenticated_closure, A.Web3TonChain_createAuthenticated_closure0, A.Web3TronChain_Web3TronChain$deserialize_closure, A.Web3TronChain_createAuthenticated_closure, A.Web3TronChain_createAuthenticated_closure0, A.Web3TronChain_createAuthenticated_closure1, A.SubstrateKeyAlgorithm_fromValue_closure, A.TonChain_fromWorkchain_closure, A.WalletVersion_WalletVersion$fromValue_closure, A.TonApiType_TonApiType$fromValue_closure, A._JSBackgroundHandler__readNetworks_closure, A._JSBackgroundHandler__readNetworks_closure0, A._JSBackgroundHandler_send_closure, A._JSBackgroundHandler_sendWalletMessage_onMessage, A._JSBackgroundHandler_sendWalletMessage_onMessage_closure, A._JSBackgroundHandler_sendWalletMessage_onMessage_closure0, A._JSBackgroundHandler_openPopup__closure, A._JSBackgroundHandler_openPopup__closure0, A.main_closure, A.main_closure0, A.main__closure, A.main__closure0, A.main__closure1]);
    _inherit(A.CastList, A._CastListBase);
    _inheritMany(A.MapBase, [A.CastMap, A.UnmodifiableMapBase, A.JsLinkedHashMap]);
    _inheritMany(A.Closure2Args, [A.CastMap_forEach_closure, A.ConstantMap_map_closure, A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure0, A._Future_timeout_closure1, A.LinkedHashMap_LinkedHashMap$from_closure, A.MapBase_mapToString_closure, A._JsonStringifier_writeMap_closure, A._BigIntImpl_hashCode_combine, A.Uri__parseIPv4Address_error, A.Uri_parseIPv6Address_error, A.Uri_parseIPv6Address_parseHex, A.AESLib_initialize_mul, A.BcsSerialization_toReadableObject_closure, A.BcsSerialization_toReadableObject_closure0, A.Web3ExceptionMessage_toJson_closure, A.Web3Chain_updateChainAccount_closure]);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A.RuntimeError, A._Error, A.JsonUnsupportedObjectError, A.AssertionError, A.ArgumentError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError]);
    _inherit(A.UnmodifiableListBase, A.ListBase);
    _inherit(A.CodeUnits, A.UnmodifiableListBase);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.EmptyIterable, A.LinkedHashMapKeysIterable, A.LinkedHashMapValuesIterable, A.LinkedHashMapEntriesIterable, A._MapBaseValueIterable]);
    _inheritMany(A.ListIterable, [A.SubListIterable, A.MappedListIterable, A._ListIndicesIterable, A.ReversedListIterable]);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inherit(A.EfficientLengthSkipIterable, A.SkipIterable);
    _inherit(A.ListMapView, A.UnmodifiableMapBase);
    _inherit(A._Record2, A._Record);
    _inherit(A._Record_2, A._Record2);
    _inherit(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A.MapView);
    _inherit(A.UnmodifiableMapView, A._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(A.ConstantMapView, A.UnmodifiableMapView);
    _inheritMany(A.ConstantMap, [A.ConstantStringMap, A.GeneralConstantMap]);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inherit(A.JsConstantLinkedHashMap, A.JsLinkedHashMap);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfDouble, [A.NativeFloat32List, A.NativeFloat64List]);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8ClampedList, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A.Closure0Args, [A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainCoreFuture_closure, A._Future__asyncCompleteWithValue_closure, A._Future__asyncCompleteErrorObject_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A._Future_timeout_closure, A._rootHandleError_closure, A._RootZone_bindCallbackGuarded_closure, A._Utf8Decoder__decoder_closure, A._Utf8Decoder__decoderNonfatal_closure, A.BitcoinAddressType_fromValue_closure0, A.BasedUtxoNetwork_fromName_closure0, A.XlmAddrTypes_fromTag_closure0, A.ChainType_fromValue_closure0, A.CoinProposal_fromName_closure0, A.CosmosKeysAlgs_fromName_closure0, A.MoneroNetwork_fromName_closure0, A.WalletEventTypes_fromName_closure0, A.WebPlatformInterface__initDatabase_closure, A.ProviderAuthType_fromName_closure0, A.ProviderAuthType_fromTag_closure0, A.ContentType_fromValue_closure0, A.SynchronizedLock_synchronized_complete, A.AddressDerivationType_fromTag_closure0, A.SeedTypes_fromValue_closure0, A.NetworkType_fromTag_closure0, A.NetworkType_fromName_closure0, A.BitcoinExplorerProviderType_fromName_closure0, A.AptosAPIProviderType_fromValue_closure0, A.APIUtils__findProviders_closure, A.APIUtils__findProviders__closure4, A.APIUtils__findProviders_closure0, A.APIUtils__findProviders__closure1, A.APIUtils__findProviders_closure2, A.APIUtils_findNetworkProvider_closure0, A.AptosChainType_fromValue_closure0, A.SolanaNetworkType_fromValue_closure0, A.StellarChainType_fromValue_closure0, A.SuiChainType_fromValue_closure0, A.CosmosNetworkTypes_CosmosNetworkTypes$fromValue_closure0, A.SubstrateChainType_fromValue_closure0, A.TonAccountContextType_fromTag_closure0, A.TronChainType_fromId_closure0, A.WalletLockTime_fromValue_closure0, A.SubstrateKeyAlgorithm_fromValue_closure0, A.TonChain_fromWorkchain_closure0, A.WalletVersion_WalletVersion$fromValue_closure0, A.TonApiType_TonApiType$fromValue_closure0, A._JSBackgroundHandler__readNetworks_closure1, A._JSBackgroundHandler__readNetworks_closure2, A._JSBackgroundHandler__readNetworks_closure3, A._JSBackgroundHandler_getPermission_closure, A._JSBackgroundHandler_openPopup_closure]);
    _inheritMany(A._Completer, [A._AsyncCompleter, A._SyncCompleter]);
    _inherit(A._RootZone, A._Zone);
    _inherit(A._SetBase, A.SetBase);
    _inherit(A._LinkedHashSet, A._SetBase);
    _inheritMany(A.Codec, [A.Encoding, A.Base64Codec, A.JsonCodec]);
    _inherit(A.AsciiCodec, A.Encoding);
    _inheritMany(A.Converter, [A._UnicodeSubsetEncoder, A._UnicodeSubsetDecoder, A.Base64Encoder, A.Base64Decoder, A.JsonEncoder, A.Utf8Encoder, A.Utf8Decoder]);
    _inherit(A.AsciiEncoder, A._UnicodeSubsetEncoder);
    _inherit(A.AsciiDecoder, A._UnicodeSubsetDecoder);
    _inherit(A.JsonCyclicError, A.JsonUnsupportedObjectError);
    _inherit(A._JsonStringStringifier, A._JsonStringifier);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A._DataUri, A._Uri);
    _inheritMany(A.BitcoinAddressType, [A.PubKeyAddressType, A.P2pkhAddressType, A.P2shAddressType, A.SegwitAddressType]);
    _inheritMany(A.LegacyAddress, [A.P2shAddress, A.P2pkhAddress, A.P2pkAddress]);
    _inheritMany(A.SegwitAddress, [A.P2wpkhAddress, A.P2trAddress, A.P2wshAddress]);
    _inheritMany(A.BlockchainUtilsException, [A.DartBitcoinPluginException, A.Base58ChecksumError, A.Bech32ChecksumError, A.AddressConverterException, A.CborException, A.CryptoException, A.ArgumentException, A.MessageException, A.GenericException, A.SS58ChecksumError, A.DartCosmosSdkPluginException, A.DartMoneroPluginException, A.BcsSerializationException, A.ETHPluginException, A.DartSuiPluginException, A.TronPluginException, A.DartSubstratePluginException, A.DartStellarPlugingException, A.TonDartPluginException]);
    _inheritMany(A._Enum, [A.Base58Alphabets, A.Bech32Encodings, A.ChainType, A.EllipticCurveTypes, A.EncodeType, A.StringEncoding, A.CosmosKeysAlgs, A.MoveArgumentType, A.AppPlatform, A.WalletEventTypes, A.WalletEventTarget, A.IndexDbStorageMode, A.ProviderAuthType, A.ContentType, A.AddressDerivationType, A.SeedTypes, A.BitcoinExplorerProviderType, A.AptosAPIProviderType, A.ServiceProtocol, A.AptosChainType, A.SolanaNetworkType, A.StellarChainType, A.SuiChainType, A.SubstrateChainType, A.TonAccountContextType, A.TronChainType, A.WalletLockTime, A.Web3MessageTypes, A.SubstrateKeyAlgorithm]);
    _inherit(A.XmrAddrEncoder, A.BlockchainAddressEncoder);
    _inheritMany(A.BipCoins, [A.Bip44Coins, A.Bip49Coins, A.Bip84Coins, A.Bip86Coins, A.Cip1852Coins, A.CustomCoins]);
    _inheritMany(A.BipCoinConfig, [A.BipBitcoinCashConf, A.BipLitecoinConf]);
    _inheritMany(A._CborDate, [A.CborStringDateValue, A.CborEpochFloatValue, A.CborEpochIntValue]);
    _inheritMany(A.CborString, [A.CborStringValue, A.CborIndefiniteStringValue]);
    _inheritMany(A.Curve, [A.CurveFp, A.CurveED]);
    _inheritMany(A.AbstractPoint, [A.ProjectiveECCPoint, A.EDPoint]);
    _inherit(A.RistrettoPoint, A.EDPoint);
    _inheritMany(A.CryptoException, [A.SquareRootError, A.JacobiError]);
    _inheritMany(A._Keccack, [A.Keccack, A.SHAKE]);
    _inherit(A.SHAKE256, A.SHAKE);
    _inherit(A.RIPEMD160, A._RIPEMD);
    _inherit(A.BcsVariantSerialization, A.BcsSerialization);
    _inherit(A.MoveArgument, A.BcsVariantSerialization);
    _inherit(A.MoveAddress, A.MoveArgument);
    _inheritMany(A.MoveAddress, [A.AptosAddress, A.SuiAddress]);
    _inheritMany(A.SolidityAddress, [A.ETHAddress, A.TronAddress]);
    _inherit(A.OnChainBridgeInterface, A.PlatformInterface);
    _inherit(A.IndexDbStorage, A.SafeStorage);
    _inherit(A.WebPlatformInterface, A.OnChainBridgeInterface);
    _inherit(A._ProviderAuthenticated_Object_CborSerializable_Equatable, A._ProviderAuthenticated_Object_CborSerializable);
    _inherit(A.ProviderAuthenticated, A._ProviderAuthenticated_Object_CborSerializable_Equatable);
    _inheritMany(A.ProviderAuthenticated, [A.BasicProviderAuthenticated, A.DigestProviderAuthenticated]);
    _inherit(A._APPImage_Object_CborSerializable_Equatable, A._APPImage_Object_CborSerializable);
    _inherit(A.APPImage, A._APPImage_Object_CborSerializable_Equatable);
    _inherit(A._AddressDerivationIndex_Object_CborSerializable_Equatable, A._AddressDerivationIndex_Object_CborSerializable);
    _inherit(A.AddressDerivationIndex, A._AddressDerivationIndex_Object_CborSerializable_Equatable);
    _inheritMany(A.AddressDerivationIndex, [A.Bip32AddressIndex, A.MultiSigAddressIndex, A.SubstrateAddressIndex]);
    _inherit(A._APIProvider_Object_Equatable_CborSerializable, A._APIProvider_Object_Equatable);
    _inherit(A.APIProvider, A._APIProvider_Object_Equatable_CborSerializable);
    _inherit(A._ProviderIdentifier_Object_Equatable_CborSerializable, A._ProviderIdentifier_Object_Equatable);
    _inherit(A.ProviderIdentifier, A._ProviderIdentifier_Object_Equatable_CborSerializable);
    _inheritMany(A.ProviderIdentifier, [A.DefaultProviderIdentifier, A.AptosProviderIdentifier]);
    _inheritMany(A.APIProvider, [A.AptosAPIProvider, A.BaseBitcoinAPIProvider, A.CardanoAPIProvider, A.CosmosAPIProvider, A.EthereumAPIProvider, A.MoneroAPIProvider, A.RippleAPIProvider, A.SolanaAPIProvider, A.StellarAPIProvider, A.SubstrateAPIProvider, A.SuiAPIProvider, A.TonAPIProvider, A.TronAPIProvider]);
    _inheritMany(A.BaseBitcoinAPIProvider, [A.BitcoinExplorerAPIProvider, A.ElectrumAPIProvider]);
    _inherit(A._WalletNetwork_Object_Equatable_CborSerializable, A._WalletNetwork_Object_Equatable);
    _inherit(A.WalletNetwork, A._WalletNetwork_Object_Equatable_CborSerializable);
    _inheritMany(A.WalletNetwork, [A.WalletBitcoinNetwork, A.WalletXRPNetwork, A.WalletEthereumNetwork, A.WalletTronNetwork, A.WalletSolanaNetwork, A.WalletCardanoNetwork, A.WalletCosmosNetwork, A.WalletTonNetwork, A.WalletSubstrateNetwork, A.WalletStellarNetwork, A.WalletMoneroNetwork, A.WalletAptosNetwork, A.WalletSuiNetwork]);
    _inherit(A.WalletBitcoinCashNetwork, A.WalletBitcoinNetwork);
    _inherit(A.NetworkCoinParams, A._NetworkCoinParams_Object_CborSerializable);
    _inheritMany(A.NetworkCoinParams, [A.AptosNetworkParams, A.BitcoinParams, A.CardanoNetworkParams, A.CosmosNetworkParams, A.EthereumNetworkParams, A.MoneroNetworkParams, A.RippleNetworkParams, A.SolanaNetworkParams, A.StellarNetworkParams, A.SubstrateNetworkParams, A.SuiNetworkParams, A.TonNetworkParams, A.TronNetworkParams]);
    _inherit(A.CosmosFeeToken, A._CosmosFeeToken_Object_CborSerializable);
    _inherit(A._TonAccountContext_Object_CborSerializable_Equatable, A._TonAccountContext_Object_CborSerializable);
    _inherit(A.TonAccountContext, A._TonAccountContext_Object_CborSerializable_Equatable);
    _inheritMany(A.TonAccountContext, [A.TonAccountLegacyContext, A.TonAccountSubWalletContext, A.TonAccountV5CustomContext, A.TonAccountV5SubWalletContext]);
    _inherit(A._CoingeckoCoin_Object_CborSerializable_JsonSerialization, A._CoingeckoCoin_Object_CborSerializable);
    _inherit(A.CoingeckoCoin, A._CoingeckoCoin_Object_CborSerializable_JsonSerialization);
    _inherit(A._APPToken_Object_CborSerializable_Equatable, A._APPToken_Object_CborSerializable);
    _inherit(A.APPToken, A._APPToken_Object_CborSerializable_Equatable);
    _inherit(A.Token, A.APPToken);
    _inherit(A.HDWallets, A._HDWallets_Object_CborSerializable);
    _inherit(A.Web3RequestException, A._Web3RequestException_Object_Equatable);
    _inherit(A.Web3MessageCore, A._Web3MessageCore_Object_CborSerializable);
    _inheritMany(A.Web3MessageCore, [A.Web3ChainMessage, A.Web3ExceptionMessage, A.Web3WalletResponseMessage]);
    _inherit(A.Web3EncryptedMessage, A._Web3EncryptedMessage_Object_CborSerializable);
    _inherit(A._Web3AccountAcitvity_Object_CborSerializable_Equatable, A._Web3AccountAcitvity_Object_CborSerializable);
    _inherit(A.Web3AccountAcitvity, A._Web3AccountAcitvity_Object_CborSerializable_Equatable);
    _inherit(A.Web3RequestAuthentication, A._Web3RequestAuthentication_Object_CborSerializable);
    _inherit(A._Web3APPAuthentication_Web3RequestAuthentication_CborSerializable, A.Web3RequestAuthentication);
    _inherit(A.Web3APPAuthentication, A._Web3APPAuthentication_Web3RequestAuthentication_CborSerializable);
    _inherit(A.Web3APPData, A._Web3APPData_Object_CborSerializable);
    _inherit(A._Web3ChainAccount_Object_CborSerializable_Equatable, A._Web3ChainAccount_Object_CborSerializable);
    _inherit(A.Web3ChainAccount, A._Web3ChainAccount_Object_CborSerializable_Equatable);
    _inherit(A._Web3ChainIdnetifier_Object_CborSerializable_Equatable, A._Web3ChainIdnetifier_Object_CborSerializable);
    _inherit(A.Web3ChainIdnetifier, A._Web3ChainIdnetifier_Object_CborSerializable_Equatable);
    _inheritMany(A.Web3ChainIdnetifier, [A.Web3ChainDefaultIdnetifier, A.Web3AptosChainIdnetifier, A.Web3CosmoshainIdnetifier, A.Web3EthereumChainIdnetifier, A.Web3SubstrateChainIdnetifier, A.Web3TronChainIdnetifier]);
    _inherit(A.Web3ChainAuthenticated, A._Web3ChainAuthenticated_Object_CborSerializable);
    _inherit(A._Web3Chain_Object_CborSerializable_Equatable, A._Web3Chain_Object_CborSerializable);
    _inherit(A.Web3Chain, A._Web3Chain_Object_CborSerializable_Equatable);
    _inherit(A.Web3ClientInfo, A._Web3ClientInfo_Object_Equatable);
    _inheritMany(A.Web3ChainAccount, [A.Web3AptosChainAccount, A.Web3BitcoinChainAccount, A.Web3CosmosChainAccount, A.Web3EthereumChainAccount, A.Web3SolanaChainAccount, A.Web3StellarChainAccount, A.Web3SubstrateChainAccount, A.Web3SuiChainAccount, A.Web3TonChainAccount, A.Web3TronChainAccount]);
    _inheritMany(A.Web3ChainAuthenticated, [A.Web3AptosChainAuthenticated, A.Web3BitcoinChainAuthenticated, A.Web3CosmosChainAuthenticated, A.Web3EthereumChainAuthenticated, A.Web3SolanaChainAuthenticated, A.Web3StellarChainAuthenticated, A.Web3SubstrateChainAuthenticated, A.Web3SuiChainAuthenticated, A.Web3TonChainAuthenticated, A.Web3TronChainAuthenticated]);
    _inheritMany(A.Web3Chain, [A.Web3AptosChain, A.Web3BitcoinChain, A.Web3CosmosChain, A.Web3EthereumChain, A.Web3SolanaChain, A.Web3StellarChain, A.Web3SubstrateChain, A.Web3SuiChain, A.Web3TonChain, A.Web3TronChain]);
    _inheritMany(A.BaseSubstrateAddress, [A.SubstrateAddress, A.SubstrateEthereumAddress]);
    _inheritMany(A.StellarAddress, [A.StellarAccountAddress, A.StellarContractAddress, A.StellarMuxedAddress]);
    _inherit(A.StellarAddressException, A.DartStellarPlugingException);
    _inherit(A.TonContractException, A.TonDartPluginException);
    _mixin(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixin(A.__CastListBase__CastIterableBase_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A.UnmodifiableMapBase, A._UnmodifiableMapMixin);
    _mixin(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._UnmodifiableMapMixin);
    _mixin(A._ProviderAuthenticated_Object_CborSerializable, A.CborSerializable);
    _mixin(A._ProviderAuthenticated_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._APPImage_Object_CborSerializable, A.CborSerializable);
    _mixin(A._APPImage_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._AddressDerivationIndex_Object_CborSerializable, A.CborSerializable);
    _mixin(A._AddressDerivationIndex_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._APIProvider_Object_Equatable, A.Equatable);
    _mixin(A._APIProvider_Object_Equatable_CborSerializable, A.CborSerializable);
    _mixin(A._ProviderIdentifier_Object_Equatable, A.Equatable);
    _mixin(A._ProviderIdentifier_Object_Equatable_CborSerializable, A.CborSerializable);
    _mixin(A._WalletNetwork_Object_Equatable, A.Equatable);
    _mixin(A._WalletNetwork_Object_Equatable_CborSerializable, A.CborSerializable);
    _mixin(A._NetworkCoinParams_Object_CborSerializable, A.CborSerializable);
    _mixin(A._CosmosFeeToken_Object_CborSerializable, A.CborSerializable);
    _mixin(A._TonAccountContext_Object_CborSerializable, A.CborSerializable);
    _mixin(A._TonAccountContext_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._CoingeckoCoin_Object_CborSerializable, A.CborSerializable);
    _mixin(A._CoingeckoCoin_Object_CborSerializable_JsonSerialization, A.JsonSerialization);
    _mixin(A._APPToken_Object_CborSerializable, A.CborSerializable);
    _mixin(A._APPToken_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._HDWallets_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3RequestException_Object_Equatable, A.Equatable);
    _mixin(A._Web3EncryptedMessage_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3MessageCore_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3AccountAcitvity_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3AccountAcitvity_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._Web3APPAuthentication_Web3RequestAuthentication_CborSerializable, A.CborSerializable);
    _mixin(A._Web3APPData_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3RequestAuthentication_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3ChainAccount_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3ChainAccount_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._Web3ChainAuthenticated_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3ChainIdnetifier_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3ChainIdnetifier_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._Web3Chain_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3Chain_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._Web3ClientInfo_Object_Equatable, A.Equatable);
  })();
  var init = {
    G: typeof self != "undefined" ? self : globalThis,
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List", Object: "Object", Map: "Map"},
    mangledNames: {},
    types: ["0&()", "SubstrateEd25519AddrEncoder([@])", "P2PKHAddrEncoder([@])", "P2SHAddrEncoder([@])", "EthAddrEncoder([@])", "~()", "ProviderAuthenticated(CborTagValue<@>)", "AtomAddrEncoder([@])", "SubstrateSecp256k1AddrEncoder([@])", "SubstrateSr25519AddrEncoder([@])", "BlockchainAddressEncoder([@])", "Null(@)", "P2WPKHAddrEncoder([@])", "Null(Object)", "AdaByronIcarusAddrEncoder([@])", "bool(AptosAPIProvider)", "AptosAPIProvider()", "int(int)", "XrpAddrEncoder([@])", "AdaShelleyAddrEncoder([@])", "~(@)", "Null()", "int(int,int)", "XlmAddrEncoder([@])", "~(~())", "bool(APIProvider)", "@()", "ErgoP2PKHAddrEncoder([@])", "XmrAddrEncoder([@])", "NeoAddrEncoder([@])", "~(Object?,Object?)", "List<int>(String,List<int>)", "SolAddrEncoder([@])", "TrxAddrEncoder([@])", "TonAddrEncoder([@])", "int(String?)", "P2TRAddrEncoder([@])", "AtomEthSecp256k1AddrEncoder([@])", "String(@)", "bool(int)", "Object?(WalletEvent)", "Null(Object,StackTrace)", "bool(ProviderAuthType)", "AdaByronLegacyAddrEncoder([@])", "bool(NetworkType)", "@(@)", "bool(CborBase64Types)", "AtomNist256P1AddrEncoder([@])", "IntegerBalance(BigInt)", "bool(Web3ChainNetworkData<WalletNetwork<NetworkCoinParams<APIProvider>>>)", "WalletNetwork<NetworkCoinParams<APIProvider>>()", "AtomEd25519AddrEncoder([@])", "OkexAddrEncoder([@])", "bool(Bip86Coins)", "NanoAddrEncoder([@])", "NearAddrEncoder([@])", "String(int)", "Null(~())", "String(MapEntry<int,String>)", "bool(XlmAddrTypes)", "int(XlmAddrTypes)", "XtzAddrEncoder([@])", "bool(Bip44Coins)", "ZilAddrEncoder([@])", "Null(@,StackTrace)", "SuiSecp256k1AddrEncoder([@])", "SuiSecp256r1AddrEncoder([@])", "SuiAddrEncoder([@])", "bool(Bip49Coins)", "AlgoAddrEncoder([@])", "bool(Bip84Coins)", "AptosAddrEncoder([@])", "AptosSingleKeySecp256k1AddrEncoder([@])", "AptosSingleKeyEd25519AddrEncoder([@])", "bool(ChainType)", "bool(BipProposal)", "bool(Cip1852Coins)", "~(int,@)", "bool(MoneroCoins)", "bool(SubstrateCoins)", "AvaxPChainAddrEncoder([@])", "AvaxXChainAddrEncoder([@])", "CborObject(@)", "List<int>(List<int>)", "String(CborStringValue)", "@(String)", "List<int>(CborBytesValue)", "List<int>(int)", "bool(MapEntry<String,@>)", "String(MapEntry<String,@>)", "bool(CosmosKeysAlgs)", "bool(MoneroNetwork)", "MapEntry<@,Object?>(@,@)", "bool(@,Object?)", "bool(WalletEventTypes)", "~(String,int)", "bool(JSObject)", "bool(WalletEventTarget)", "double(int)", "IndexDbStorage?(IndexDbStorage?)", "bool(@)", "~(String,int?)", "bool(ContentType)", "ContentType()", "bool(CustomCoins)", "bool(BitcoinAddressType)", "bool(AddressDerivationType)", "bool(int?)", "Bip32KeyIndex(int?)", "bool(SeedTypes)", "~(@,@)", "bool(BitcoinExplorerProviderType)", "bool(AptosAPIProviderType)", "bool(BasedUtxoNetwork)", "bool(ServiceProtocol)", "EgldAddrEncoder([@])", "EosAddrEncoder([@])", "@(@,String)", "APIProvider()", "List<APIProvider>()", "bool(AptosChainType)", "AptosAPIProvider(CborTagValue<@>)", "BaseBitcoinAPIProvider(CborTagValue<@>)", "CardanoAPIProvider(CborTagValue<@>)", "CosmosAPIProvider(CborTagValue<@>)", "CosmosFeeToken(CborTagValue<@>)", "CosmosKeysAlgs(CborStringValue)", "EthereumAPIProvider(@)", "MoneroAPIProvider(CborObject)", "RippleAPIProvider(CborTagValue<@>)", "bool(SolanaNetworkType)", "SolanaAPIProvider(CborTagValue<@>)", "bool(StellarChainType)", "StellarAPIProvider(CborTagValue<@>)", "SubstrateAPIProvider(CborTagValue<@>)", "SubstrateKeyAlgorithm(CborIntValue)", "bool(SuiChainType)", "SuiAPIProvider(CborTagValue<@>)", "TonAPIProvider(CborTagValue<@>)", "TronAPIProvider(CborTagValue<@>)", "FilSecp256k1AddrEncoder([@])", "bool(CosmosNetworkTypes)", "bool(SubstrateChainType)", "bool(TonAccountContextType)", "Object?(Object?)", "bool(WalletLockTime)", "WalletLockTime()", "APPImage(CborTagValue<@>)", "CoingeckoCoin(CborTagValue<@>)", "HDWallet(@)", "MapEntry<String,HDWallet>(HDWallet)", "bool(String,@)", "OneAddrEncoder([@])", "APPImage(CborObject)", "NetworkType(CborObject)", "Web3Chain<@,Chain<APIProvider,NetworkCoinParams<APIProvider>,@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,WalletNetwork<NetworkCoinParams<APIProvider>>,NetworkClient<ChainTransaction,APIProvider>,ChainStorageKey,ChainConfig<ChainStorageKey>,ChainTransaction,ContactCore<@>,NewAccountParams<ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>>>,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,Web3ChainAccount<@>,WalletNetwork<NetworkCoinParams<APIProvider>>>(CborObject)", "Web3AccountAcitvity(CborTagValue<@>)", "CborTagValue<@>(Web3AccountAcitvity)", "CborTagValue<@>(Web3ChainAuthenticated<Web3ChainAccount<@>>)", "CborBytesValue(NetworkType)", "CborTagValue<@>(Web3ChainIdnetifier)", "Web3AptosChainAccount(@)", "WalletAptosNetwork(Web3ChainNetworkData<WalletAptosNetwork>)", "Web3AptosChainIdnetifier(Web3ChainNetworkData<WalletAptosNetwork>)", "Web3BitcoinChainAccount(@)", "WalletBitcoinNetwork(Web3ChainNetworkData<WalletBitcoinNetwork>)", "Web3ChainDefaultIdnetifier(Web3ChainNetworkData<WalletBitcoinNetwork>)", "Web3CosmosChainAccount(@)", "WalletCosmosNetwork(Web3ChainNetworkData<WalletCosmosNetwork>)", "Web3CosmoshainIdnetifier(Web3ChainNetworkData<WalletCosmosNetwork>)", "CborTagValue<@>(Web3EthereumChainAccount)", "CborTagValue<@>(Web3EthereumChainIdnetifier)", "Web3EthereumChainAccount(@)", "WalletEthereumNetwork(Web3ChainNetworkData<WalletEthereumNetwork>)", "Web3EthereumChainIdnetifier(Web3ChainNetworkData<WalletEthereumNetwork>)", "bool(Web3ChainNetworkData<WalletEthereumNetwork>)", "Web3SolanaChainAccount(@)", "WalletSolanaNetwork(Web3ChainNetworkData<WalletSolanaNetwork>)", "Web3ChainDefaultIdnetifier(Web3ChainNetworkData<WalletSolanaNetwork>)", "Web3StellarChainAccount(@)", "WalletStellarNetwork(Web3ChainNetworkData<WalletStellarNetwork>)", "Web3ChainDefaultIdnetifier(Web3ChainNetworkData<WalletStellarNetwork>)", "Web3SubstrateChainAccount(@)", "WalletSubstrateNetwork(Web3ChainNetworkData<WalletSubstrateNetwork>)", "Web3SubstrateChainIdnetifier(Web3ChainNetworkData<WalletSubstrateNetwork>)", "Web3SuiChainAccount(@)", "WalletSuiNetwork(Web3ChainNetworkData<WalletSuiNetwork>)", "Web3ChainDefaultIdnetifier(Web3ChainNetworkData<WalletSuiNetwork>)", "Web3TonChainAccount(@)", "WalletTonNetwork(Web3ChainNetworkData<WalletTonNetwork>)", "Web3ChainDefaultIdnetifier(Web3ChainNetworkData<WalletTonNetwork>)", "Web3TronChainAccount(@)", "WalletTronNetwork(Web3ChainNetworkData<WalletTronNetwork>)", "Web3TronChainIdnetifier(Web3ChainNetworkData<WalletTronNetwork>)", "bool(Web3TronChainIdnetifier)", "bool(SubstrateKeyAlgorithm)", "bool(TonChain)", "bool(WalletVersion)", "bool(TonApiType)", "+(String,String)(String)", "List<int>(+(String,String))", "IcxAddrEncoder([@])", "ProviderIdentifier?()", "Web3APPAuthentication()", "bool(JSObject?,JSObject?,JavaScriptFunction?)", "Null(WalletEvent?)", "Future<WalletEvent>()", "WalletEvent?(WalletEvent?)", "Null(JSObject)", "bool(JSObject?,JSObject,JavaScriptFunction)", "InjAddrEncoder([@])", "Null(WalletEvent)", "int(@,@)", "String(String)", "~(String)", "bool(String,List<int>[Bech32Encodings])", "bool(TronChainType)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti"),
    rttc: {
      "2;": (t1, t2) => o => o instanceof A._Record_2 && t1._is(o._0) && t2._is(o._1)
    }
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"JavaScriptFunction":"LegacyJavaScriptObject","PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"]},"JSBool":{"bool":[],"TrustedGetRuntimeType":[]},"JSNull":{"Null":[],"TrustedGetRuntimeType":[]},"JavaScriptObject":{"JSObject":[]},"LegacyJavaScriptObject":{"JSObject":[]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[],"Comparable":["num"]},"JSInt":{"double":[],"int":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSNumNotInt":{"double":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSString":{"String":[],"Comparable":["String"],"Pattern":[],"TrustedGetRuntimeType":[]},"_CastIterableBase":{"Iterable":["2"]},"CastIterator":{"Iterator":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_CastListBase":{"ListBase":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"ListBase":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListBase.E":"2","Iterable.E":"2"},"CastMap":{"MapBase":["3","4"],"Map":["3","4"],"MapBase.K":"3","MapBase.V":"4"},"LateError":{"Error":[]},"CodeUnits":{"ListBase":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListBase.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListIterable.E":"2","Iterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterator":{"Iterator":["1"]},"UnmodifiableListBase":{"ListBase":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_ListIndicesIterable":{"ListIterable":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListIterable.E":"int","Iterable.E":"int"},"ListMapView":{"MapBase":["int","1"],"_UnmodifiableMapMixin":["int","1"],"Map":["int","1"],"MapBase.K":"int","MapBase.V":"1","_UnmodifiableMapMixin.K":"int","_UnmodifiableMapMixin.V":"1"},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"_Record_2":{"_Record2":[],"_Record":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"],"_UnmodifiableMapMixin.K":"1","_UnmodifiableMapMixin.V":"2"},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_KeysOrValues":{"Iterable":["1"],"Iterable.E":"1"},"_KeysOrValuesOrElementsIterator":{"Iterator":["1"]},"GeneralConstantMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Function":[]},"Closure2Args":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"RuntimeError":{"Error":[]},"JsLinkedHashMap":{"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"LinkedHashMapKeysIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"LinkedHashMapValuesIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapValueIterator":{"Iterator":["1"]},"LinkedHashMapEntriesIterable":{"EfficientLengthIterable":["MapEntry<1,2>"],"Iterable":["MapEntry<1,2>"],"Iterable.E":"MapEntry<1,2>"},"LinkedHashMapEntryIterator":{"Iterator":["MapEntry<1,2>"]},"JsConstantLinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_Record2":{"_Record":[]},"JSSyntaxRegExp":{"RegExp":[],"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"Iterable":["RegExpMatch"],"Iterable.E":"RegExpMatch"},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"_StringAllMatchesIterator":{"Iterator":["Match"]},"NativeByteBuffer":{"JSObject":[],"TrustedGetRuntimeType":[]},"NativeTypedData":{"JSObject":[]},"NativeByteData":{"ByteData":[],"JSObject":[],"TrustedGetRuntimeType":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"JSObject":[]},"NativeTypedArrayOfDouble":{"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"NativeTypedArrayOfDouble":[],"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double","FixedLengthListMixin.E":"double"},"NativeFloat64List":{"NativeTypedArrayOfDouble":[],"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double","FixedLengthListMixin.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"Uint16List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"Uint8List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"_SyncStarIterator":{"Iterator":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"AsyncError":{"Error":[]},"_AsyncCompleter":{"_Completer":["1"]},"_SyncCompleter":{"_Completer":["1"]},"_Future":{"Future":["1"]},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_LinkedHashSet":{"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"ListBase":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"Map":["1","2"]},"UnmodifiableMapBase":{"MapBase":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_MapBaseValueIterable":{"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_MapBaseValueIterator":{"Iterator":["2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"],"_UnmodifiableMapMixin.K":"1","_UnmodifiableMapMixin.V":"2"},"SetBase":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SetBase":{"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"AsciiCodec":{"Codec":["String","List<int>"],"Codec.S":"String"},"Base64Codec":{"Codec":["List<int>","String"],"Codec.S":"List<int>"},"Encoding":{"Codec":["String","List<int>"]},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"Error":[]},"JsonCodec":{"Codec":["Object?","String"],"Codec.S":"Object?"},"BigInt":{"Comparable":["BigInt"]},"DateTime":{"Comparable":["DateTime"]},"double":{"num":[],"Comparable":["num"]},"Duration":{"Comparable":["Duration"]},"int":{"num":[],"Comparable":["num"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExpMatch":{"Match":[]},"String":{"Comparable":["String"],"Pattern":[]},"_BigIntImpl":{"BigInt":[],"Comparable":["BigInt"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"IntegerDivisionByZeroException":{"Error":[]},"_StringStackTrace":{"StackTrace":[]},"Runes":{"Iterable":["int"],"Iterable.E":"int"},"RuneIterator":{"Iterator":["int"]},"StringBuffer":{"StringSink":[]},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"Uri":[]},"Int8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8ClampedList":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Float32List":{"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"Float64List":{"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"P2pkhAddressType":{"BitcoinAddressType":[]},"P2shAddressType":{"BitcoinAddressType":[]},"PubKeyAddressType":{"BitcoinAddressType":[]},"SegwitAddressType":{"BitcoinAddressType":[]},"LegacyAddress":{"BitcoinBaseAddress":[]},"P2shAddress":{"BitcoinBaseAddress":[]},"P2pkhAddress":{"BitcoinBaseAddress":[]},"P2pkAddress":{"BitcoinBaseAddress":[]},"SegwitAddress":{"BitcoinBaseAddress":[]},"P2wpkhAddress":{"BitcoinBaseAddress":[]},"P2trAddress":{"BitcoinBaseAddress":[]},"P2wshAddress":{"BitcoinBaseAddress":[]},"BitcoinSVNetwork":{"BasedUtxoNetwork":[]},"BitcoinNetwork":{"BasedUtxoNetwork":[]},"LitecoinNetwork":{"BasedUtxoNetwork":[]},"DashNetwork":{"BasedUtxoNetwork":[]},"DogecoinNetwork":{"BasedUtxoNetwork":[]},"BitcoinCashNetwork":{"BasedUtxoNetwork":[]},"PepeNetwork":{"BasedUtxoNetwork":[]},"ElectraProtocolNetwork":{"BasedUtxoNetwork":[]},"AdaByronIcarusAddrEncoder":{"BlockchainAddressEncoder":[]},"AdaByronLegacyAddrEncoder":{"BlockchainAddressEncoder":[]},"AdaShelleyAddrEncoder":{"BlockchainAddressEncoder":[]},"AlgoAddrEncoder":{"BlockchainAddressEncoder":[]},"AptosSingleKeyEd25519AddrEncoder":{"BlockchainAddressEncoder":[]},"AptosSingleKeySecp256k1AddrEncoder":{"BlockchainAddressEncoder":[]},"AptosAddrEncoder":{"BlockchainAddressEncoder":[]},"AtomAddrEncoder":{"BlockchainAddressEncoder":[]},"AtomEthSecp256k1AddrEncoder":{"BlockchainAddressEncoder":[]},"AtomNist256P1AddrEncoder":{"BlockchainAddressEncoder":[]},"AtomEd25519AddrEncoder":{"BlockchainAddressEncoder":[]},"AvaxPChainAddrEncoder":{"BlockchainAddressEncoder":[]},"AvaxXChainAddrEncoder":{"BlockchainAddressEncoder":[]},"EgldAddrEncoder":{"BlockchainAddressEncoder":[]},"EosAddrEncoder":{"BlockchainAddressEncoder":[]},"ErgoP2PKHAddrEncoder":{"BlockchainAddressEncoder":[]},"EthAddrEncoder":{"BlockchainAddressEncoder":[]},"FilSecp256k1AddrEncoder":{"BlockchainAddressEncoder":[]},"IcxAddrEncoder":{"BlockchainAddressEncoder":[]},"InjAddrEncoder":{"BlockchainAddressEncoder":[]},"NanoAddrEncoder":{"BlockchainAddressEncoder":[]},"NearAddrEncoder":{"BlockchainAddressEncoder":[]},"NeoAddrEncoder":{"BlockchainAddressEncoder":[]},"OkexAddrEncoder":{"BlockchainAddressEncoder":[]},"OneAddrEncoder":{"BlockchainAddressEncoder":[]},"P2PKHAddrEncoder":{"BlockchainAddressEncoder":[]},"BchP2PKHAddrEncoder":{"BlockchainAddressEncoder":[]},"P2SHAddrEncoder":{"BlockchainAddressEncoder":[]},"BchP2SHAddrEncoder":{"BlockchainAddressEncoder":[]},"P2TRAddrEncoder":{"BlockchainAddressEncoder":[]},"P2WPKHAddrEncoder":{"BlockchainAddressEncoder":[]},"SolAddrEncoder":{"BlockchainAddressEncoder":[]},"SubstrateEd25519AddrEncoder":{"BlockchainAddressEncoder":[]},"SubstrateSr25519AddrEncoder":{"BlockchainAddressEncoder":[]},"SubstrateSecp256k1AddrEncoder":{"BlockchainAddressEncoder":[]},"SuiSecp256k1AddrEncoder":{"BlockchainAddressEncoder":[]},"SuiSecp256r1AddrEncoder":{"BlockchainAddressEncoder":[]},"SuiAddrEncoder":{"BlockchainAddressEncoder":[]},"TonAddrEncoder":{"BlockchainAddressEncoder":[]},"TrxAddrEncoder":{"BlockchainAddressEncoder":[]},"XlmAddrEncoder":{"BlockchainAddressEncoder":[]},"XmrAddrEncoder":{"BlockchainAddressEncoder":[]},"XrpAddrEncoder":{"BlockchainAddressEncoder":[]},"XtzAddrEncoder":{"BlockchainAddressEncoder":[]},"ZilAddrEncoder":{"BlockchainAddressEncoder":[]},"BipCoins":{"CryptoCoins":["BipCoinConfig"]},"Bip44Coins":{"CryptoCoins":["BipCoinConfig"]},"Bip49Coins":{"CryptoCoins":["BipCoinConfig"]},"Bip84Coins":{"CryptoCoins":["BipCoinConfig"]},"Bip86Coins":{"CryptoCoins":["BipCoinConfig"]},"BipBitcoinCashConf":{"BipCoinConfig":[],"CoinConfig":[]},"BipCoinConfig":{"CoinConfig":[]},"BipLitecoinConf":{"BipCoinConfig":[],"CoinConfig":[]},"Cip1852Coins":{"CryptoCoins":["BipCoinConfig"]},"CipProposal":{"BipProposal":[]},"MoneroCoinConf":{"CoinConfig":[]},"MoneroCoins":{"CryptoCoins":["MoneroCoinConf"]},"SubstrateCoinConf":{"CoinConfig":[]},"SubstrateCoins":{"CryptoCoins":["SubstrateCoinConf"]},"CborNumeric":{"CborObject":[]},"CborBaseUrlValue":{"CborObject":[]},"CborBigFloatValue":{"CborObject":[]},"CborBigIntValue":{"CborNumeric":[],"CborObject":[]},"CborBoleanValue":{"CborObject":[]},"CborBytesValue":{"CborObject":[]},"CborDynamicBytesValue":{"CborObject":[]},"CborTagValue":{"CborObject":[]},"CborEpochIntValue":{"CborObject":[]},"_CborDate":{"CborObject":[]},"CborStringDateValue":{"CborObject":[]},"CborEpochFloatValue":{"CborObject":[]},"CborDecimalFracValue":{"CborObject":[]},"CborFloatValue":{"CborObject":[]},"CborIntValue":{"CborNumeric":[],"CborObject":[]},"CborSafeIntValue":{"CborNumeric":[],"CborObject":[]},"CborListValue":{"CborObject":[]},"CborMapValue":{"CborObject":[]},"CborMimeValue":{"CborObject":[]},"CborNullValue":{"CborObject":[]},"CborUndefinedValue":{"CborObject":[]},"CborRegxpValue":{"CborObject":[]},"CborSetValue":{"CborObject":[]},"CborStringValue":{"CborObject":[]},"CborIndefiniteStringValue":{"CborObject":[]},"CborString":{"CborObject":[]},"CborUriValue":{"CborObject":[]},"AES":{"BlockCipher":[]},"RistrettoPoint":{"EDPoint":[]},"ProviderAuthenticated":{"Equatable":[]},"BasicProviderAuthenticated":{"ProviderAuthenticated":[],"Equatable":[]},"DigestProviderAuthenticated":{"ProviderAuthenticated":[],"Equatable":[]},"APPImage":{"Equatable":[]},"CustomCoins":{"CryptoCoins":["BipCoinConfig"]},"CustomProposal":{"BipProposal":[]},"AddressDerivationIndex":{"Equatable":[]},"Bip32AddressIndex":{"AddressDerivationIndex":[],"Equatable":[]},"MultiSigAddressIndex":{"AddressDerivationIndex":[],"Equatable":[]},"SubstrateAddressIndex":{"AddressDerivationIndex":[],"Equatable":[]},"APIProvider":{"Equatable":[]},"ProviderIdentifier":{"Equatable":[]},"DefaultProviderIdentifier":{"ProviderIdentifier":[],"Equatable":[]},"AptosAPIProvider":{"APIProvider":[],"Equatable":[]},"AptosProviderIdentifier":{"ProviderIdentifier":[],"Equatable":[]},"BitcoinExplorerAPIProvider":{"BaseBitcoinAPIProvider":[],"APIProvider":[],"Equatable":[]},"ElectrumAPIProvider":{"BaseBitcoinAPIProvider":[],"APIProvider":[],"Equatable":[]},"BaseBitcoinAPIProvider":{"APIProvider":[],"Equatable":[]},"CardanoAPIProvider":{"APIProvider":[],"Equatable":[]},"CosmosAPIProvider":{"APIProvider":[],"Equatable":[]},"EthereumAPIProvider":{"APIProvider":[],"Equatable":[]},"MoneroAPIProvider":{"APIProvider":[],"Equatable":[]},"RippleAPIProvider":{"APIProvider":[],"Equatable":[]},"SolanaAPIProvider":{"APIProvider":[],"Equatable":[]},"StellarAPIProvider":{"APIProvider":[],"Equatable":[]},"SubstrateAPIProvider":{"APIProvider":[],"Equatable":[]},"SuiAPIProvider":{"APIProvider":[],"Equatable":[]},"TonAPIProvider":{"APIProvider":[],"Equatable":[]},"TronAPIProvider":{"APIProvider":[],"Equatable":[]},"IntegerBalance":{"BalanceCore":["BigInt","Token"]},"ChainAccount":{"Equatable":[]},"AptosChain":{"Chain":["AptosAPIProvider","AptosNetworkParams","AptosAddress","AptosFATokens","NFTCore","IAptosAddress","WalletAptosNetwork","AptosClient","DefaultChainStorageKey","DefaultChainConfig","AptosWalletTransaction","AptosContact","AptosNewAddressParams"]},"IAptosAddress":{"ChainAccount":["AptosAddress","AptosFATokens","NFTCore","AptosWalletTransaction"],"Equatable":[]},"AptosNewAddressParams":{"NewAccountParams":["IAptosAddress"]},"BitcoinChain":{"Chain":["BaseBitcoinAPIProvider","BitcoinParams","BitcoinBaseAddress","TokenCore<BalanceCore<@,APPToken>,APPToken>","NFTCore","IBitcoinAddress","WalletBitcoinNetwork","BitcoinClient<IBitcoinAddress>","DefaultChainStorageKey","DefaultChainConfig","BitcoinWalletTransaction","BitcoinContact","BaseBitcoinNewAddressParams<IBitcoinAddress>"]},"IBitcoinAddress":{"ChainAccount":["BitcoinBaseAddress","TokenCore<BalanceCore<@,APPToken>,APPToken>","NFTCore","BitcoinWalletTransaction"],"Equatable":[]},"BaseBitcoinNewAddressParams":{"NewAccountParams":["1"]},"CosmosChainStorage":{"ChainStorageKey":[]},"CosmosChainConfig":{"ChainConfig":["CosmosChainStorage"],"Equatable":[]},"CosmosChain":{"Chain":["CosmosAPIProvider","CosmosNetworkParams","CosmosBaseAddress","CW20Token","NFTCore","ICosmosAddress","WalletCosmosNetwork","CosmosClient","ChainStorageKey","CosmosChainConfig","CosmosWalletTransaction","CosmosContact","CosmosNewAddressParams"]},"ICosmosAddress":{"ChainAccount":["CosmosBaseAddress","CW20Token","NFTCore","CosmosWalletTransaction"],"Equatable":[]},"CosmosNewAddressParams":{"NewAccountParams":["ICosmosAddress"]},"EthereumChain":{"Chain":["EthereumAPIProvider","EthereumNetworkParams","ETHAddress","ETHERC20Token","NFTCore","IEthAddress","WalletEthereumNetwork","EthereumClient","DefaultChainStorageKey","DefaultChainConfig","EthWalletTransaction","EthereumContact","EthereumNewAddressParams"]},"IEthAddress":{"ChainAccount":["ETHAddress","ETHERC20Token","NFTCore","EthWalletTransaction"],"Equatable":[]},"EthereumNewAddressParams":{"NewAccountParams":["IEthAddress"]},"SolanaChain":{"Chain":["SolanaAPIProvider","SolanaNetworkParams","SolAddress","SolanaSPLToken","NFTCore","ISolanaAddress","WalletSolanaNetwork","SolanaClient","DefaultChainStorageKey","DefaultChainConfig","SolanaWalletTransaction","SolanaContact","SolanaNewAddressParams"]},"ISolanaAddress":{"ChainAccount":["SolAddress","SolanaSPLToken","NFTCore","SolanaWalletTransaction"],"Equatable":[]},"SolanaNewAddressParams":{"NewAccountParams":["ISolanaAddress"]},"StellarChain":{"Chain":["StellarAPIProvider","StellarNetworkParams","StellarAddress","StellarIssueToken","NFTCore","IStellarAddress","WalletStellarNetwork","StellarClient","DefaultChainStorageKey","DefaultChainConfig","StellarWalletTransaction","StellarContact","StellarNewAddressParams"]},"IStellarAddress":{"ChainAccount":["StellarAddress","StellarIssueToken","NFTCore","StellarWalletTransaction"],"Equatable":[]},"StellarNewAddressParams":{"NewAccountParams":["IStellarAddress"]},"SubstrateChain":{"Chain":["SubstrateAPIProvider","SubstrateNetworkParams","BaseSubstrateAddress","TokenCore<BalanceCore<@,APPToken>,APPToken>","NFTCore","ISubstrateAddress","WalletSubstrateNetwork","SubstrateClient","DefaultChainStorageKey","DefaultChainConfig","SubstrateWalletTransaction","SubstrateContact","SubstrateNewAddressParams"]},"ISubstrateAddress":{"ChainAccount":["BaseSubstrateAddress","TokenCore<BalanceCore<@,APPToken>,APPToken>","NFTCore","SubstrateWalletTransaction"],"Equatable":[]},"SubstrateNewAddressParams":{"NewAccountParams":["ISubstrateAddress"]},"SuiChain":{"Chain":["SuiAPIProvider","SuiNetworkParams","SuiAddress","SuiToken","NFTCore","ISuiAddress","WalletSuiNetwork","SuiClient","DefaultChainStorageKey","DefaultChainConfig","SuiWalletTransaction","SuiContact","SuiNewAddressParams"]},"ISuiAddress":{"ChainAccount":["SuiAddress","SuiToken","NFTCore","SuiWalletTransaction"],"Equatable":[]},"SuiNewAddressParams":{"NewAccountParams":["ISuiAddress"]},"TheOpenNetworkChain":{"Chain":["TonAPIProvider","TonNetworkParams","TonAddress","TonJettonToken","NFTCore","ITonAddress","WalletTonNetwork","TonClient","DefaultChainStorageKey","DefaultChainConfig","TonWalletTransaction","TonContact","TonNewAddressParams"]},"ITonAddress":{"ChainAccount":["TonAddress","TonJettonToken","NFTCore","TonWalletTransaction"],"Equatable":[]},"TonNewAddressParams":{"NewAccountParams":["ITonAddress"]},"TronChainStorageKey":{"ChainStorageKey":[]},"TronChainConfig":{"ChainConfig":["TronChainStorageKey"],"Equatable":[]},"TronChain":{"Chain":["TronAPIProvider","TronNetworkParams","TronAddress","TronToken","NFTCore","ITronAddress","WalletTronNetwork","TronClient","TronChainStorageKey","TronChainConfig","TronWalletTransaction","TronContact","TronNewAddressParams"]},"ITronAddress":{"ChainAccount":["TronAddress","TronToken","NFTCore","TronWalletTransaction"],"Equatable":[]},"TronNewAddressParams":{"NewAccountParams":["ITronAddress"]},"AptosFATokens":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"TokenCore":{"Equatable":[]},"TronToken":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"CW20Token":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"ETHERC20Token":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"TonJettonToken":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"SolanaSPLToken":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"StellarIssueToken":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"SuiToken":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"ChainConfig":{"Equatable":[]},"DefaultChainStorageKey":{"ChainStorageKey":[]},"DefaultChainConfig":{"ChainConfig":["DefaultChainStorageKey"],"Equatable":[]},"WalletNetwork":{"Equatable":[]},"WalletBitcoinNetwork":{"WalletNetwork":["BitcoinParams"],"Equatable":[]},"WalletEthereumNetwork":{"WalletNetwork":["EthereumNetworkParams"],"Equatable":[]},"WalletTronNetwork":{"WalletNetwork":["TronNetworkParams"],"Equatable":[]},"WalletSolanaNetwork":{"WalletNetwork":["SolanaNetworkParams"],"Equatable":[]},"WalletCosmosNetwork":{"WalletNetwork":["CosmosNetworkParams"],"Equatable":[]},"WalletTonNetwork":{"WalletNetwork":["TonNetworkParams"],"Equatable":[]},"WalletSubstrateNetwork":{"WalletNetwork":["SubstrateNetworkParams"],"Equatable":[]},"WalletStellarNetwork":{"WalletNetwork":["StellarNetworkParams"],"Equatable":[]},"WalletAptosNetwork":{"WalletNetwork":["AptosNetworkParams"],"Equatable":[]},"WalletSuiNetwork":{"WalletNetwork":["SuiNetworkParams"],"Equatable":[]},"WalletBitcoinCashNetwork":{"WalletBitcoinNetwork":[],"WalletNetwork":["BitcoinParams"],"Equatable":[]},"WalletXRPNetwork":{"WalletNetwork":["RippleNetworkParams"],"Equatable":[]},"WalletCardanoNetwork":{"WalletNetwork":["CardanoNetworkParams"],"Equatable":[]},"WalletMoneroNetwork":{"WalletNetwork":["MoneroNetworkParams"],"Equatable":[]},"AptosNetworkParams":{"NetworkCoinParams":["AptosAPIProvider"],"NetworkCoinParams.0":"AptosAPIProvider"},"BitcoinParams":{"NetworkCoinParams":["BaseBitcoinAPIProvider"],"NetworkCoinParams.0":"BaseBitcoinAPIProvider"},"CardanoNetworkParams":{"NetworkCoinParams":["CardanoAPIProvider"],"NetworkCoinParams.0":"CardanoAPIProvider"},"CosmosNetworkParams":{"NetworkCoinParams":["CosmosAPIProvider"],"NetworkCoinParams.0":"CosmosAPIProvider"},"EthereumNetworkParams":{"NetworkCoinParams":["EthereumAPIProvider"],"NetworkCoinParams.0":"EthereumAPIProvider"},"MoneroNetworkParams":{"NetworkCoinParams":["MoneroAPIProvider"],"NetworkCoinParams.0":"MoneroAPIProvider"},"RippleNetworkParams":{"NetworkCoinParams":["RippleAPIProvider"],"NetworkCoinParams.0":"RippleAPIProvider"},"SolanaNetworkParams":{"NetworkCoinParams":["SolanaAPIProvider"],"NetworkCoinParams.0":"SolanaAPIProvider"},"StellarNetworkParams":{"NetworkCoinParams":["StellarAPIProvider"],"NetworkCoinParams.0":"StellarAPIProvider"},"SubstrateNetworkParams":{"NetworkCoinParams":["SubstrateAPIProvider"],"NetworkCoinParams.0":"SubstrateAPIProvider"},"SuiNetworkParams":{"NetworkCoinParams":["SuiAPIProvider"],"NetworkCoinParams.0":"SuiAPIProvider"},"TonNetworkParams":{"NetworkCoinParams":["TonAPIProvider"],"NetworkCoinParams.0":"TonAPIProvider"},"TronNetworkParams":{"NetworkCoinParams":["TronAPIProvider"],"NetworkCoinParams.0":"TronAPIProvider"},"TonAccountContext":{"Equatable":[]},"TonAccountLegacyContext":{"TonAccountContext":[],"Equatable":[]},"TonAccountSubWalletContext":{"TonAccountContext":[],"Equatable":[]},"TonAccountV5CustomContext":{"TonAccountContext":[],"Equatable":[]},"TonAccountV5SubWalletContext":{"TonAccountContext":[],"Equatable":[]},"APPToken":{"Equatable":[]},"Token":{"APPToken":[],"Equatable":[]},"Web3RequestException":{"Equatable":[]},"Web3AccountAcitvity":{"Equatable":[]},"Web3ChainAccount":{"Equatable":[]},"Web3ChainIdnetifier":{"Equatable":[]},"Web3ChainDefaultIdnetifier":{"Web3ChainIdnetifier":[],"Equatable":[]},"Web3Chain":{"Equatable":[]},"Web3ClientInfo":{"Equatable":[]},"Web3AptosChainAccount":{"Web3ChainAccount":["AptosAddress"],"Equatable":[],"Web3ChainAccount.0":"AptosAddress"},"Web3AptosChainIdnetifier":{"Web3ChainIdnetifier":[],"Equatable":[]},"Web3AptosChainAuthenticated":{"Web3ChainAuthenticated":["Web3AptosChainAccount"],"Web3ChainAuthenticated.0":"Web3AptosChainAccount"},"Web3AptosChain":{"Web3Chain":["AptosAddress","AptosChain","IAptosAddress","Web3AptosChainAccount","WalletAptosNetwork"],"Equatable":[],"Web3Chain.3":"Web3AptosChainAccount","Web3Chain.4":"WalletAptosNetwork"},"Web3BitcoinChainAccount":{"Web3ChainAccount":["BitcoinBaseAddress"],"Equatable":[],"Web3ChainAccount.0":"BitcoinBaseAddress"},"Web3BitcoinChainAuthenticated":{"Web3ChainAuthenticated":["Web3BitcoinChainAccount"],"Web3ChainAuthenticated.0":"Web3BitcoinChainAccount"},"Web3BitcoinChain":{"Web3Chain":["BitcoinBaseAddress","BitcoinChain","IBitcoinAddress","Web3BitcoinChainAccount","WalletBitcoinNetwork"],"Equatable":[],"Web3Chain.3":"Web3BitcoinChainAccount","Web3Chain.4":"WalletBitcoinNetwork"},"Web3CosmosChainAccount":{"Web3ChainAccount":["CosmosBaseAddress"],"Equatable":[],"Web3ChainAccount.0":"CosmosBaseAddress"},"Web3CosmoshainIdnetifier":{"Web3ChainIdnetifier":[],"Equatable":[]},"Web3CosmosChainAuthenticated":{"Web3ChainAuthenticated":["Web3CosmosChainAccount"],"Web3ChainAuthenticated.0":"Web3CosmosChainAccount"},"Web3CosmosChain":{"Web3Chain":["CosmosBaseAddress","CosmosChain","ICosmosAddress","Web3CosmosChainAccount","WalletCosmosNetwork"],"Equatable":[],"Web3Chain.3":"Web3CosmosChainAccount","Web3Chain.4":"WalletCosmosNetwork"},"Web3EthereumChainAccount":{"Web3ChainAccount":["ETHAddress"],"Equatable":[],"Web3ChainAccount.0":"ETHAddress"},"Web3EthereumChainIdnetifier":{"Web3ChainIdnetifier":[],"Equatable":[]},"Web3EthereumChainAuthenticated":{"Web3ChainAuthenticated":["Web3EthereumChainAccount"],"Web3ChainAuthenticated.0":"Web3EthereumChainAccount"},"Web3EthereumChain":{"Web3Chain":["ETHAddress","EthereumChain","IEthAddress","Web3EthereumChainAccount","WalletEthereumNetwork"],"Equatable":[],"Web3Chain.3":"Web3EthereumChainAccount","Web3Chain.4":"WalletEthereumNetwork"},"Web3SolanaChainAccount":{"Web3ChainAccount":["SolAddress"],"Equatable":[],"Web3ChainAccount.0":"SolAddress"},"Web3SolanaChainAuthenticated":{"Web3ChainAuthenticated":["Web3SolanaChainAccount"],"Web3ChainAuthenticated.0":"Web3SolanaChainAccount"},"Web3SolanaChain":{"Web3Chain":["SolAddress","SolanaChain","ISolanaAddress","Web3SolanaChainAccount","WalletSolanaNetwork"],"Equatable":[],"Web3Chain.3":"Web3SolanaChainAccount","Web3Chain.4":"WalletSolanaNetwork"},"Web3StellarChainAccount":{"Web3ChainAccount":["StellarAddress"],"Equatable":[],"Web3ChainAccount.0":"StellarAddress"},"Web3StellarChainAuthenticated":{"Web3ChainAuthenticated":["Web3StellarChainAccount"],"Web3ChainAuthenticated.0":"Web3StellarChainAccount"},"Web3StellarChain":{"Web3Chain":["StellarAddress","StellarChain","IStellarAddress","Web3StellarChainAccount","WalletStellarNetwork"],"Equatable":[],"Web3Chain.3":"Web3StellarChainAccount","Web3Chain.4":"WalletStellarNetwork"},"Web3SubstrateChainAccount":{"Web3ChainAccount":["BaseSubstrateAddress"],"Equatable":[],"Web3ChainAccount.0":"BaseSubstrateAddress"},"Web3SubstrateChainIdnetifier":{"Web3ChainIdnetifier":[],"Equatable":[]},"Web3SubstrateChainAuthenticated":{"Web3ChainAuthenticated":["Web3SubstrateChainAccount"],"Web3ChainAuthenticated.0":"Web3SubstrateChainAccount"},"Web3SubstrateChain":{"Web3Chain":["BaseSubstrateAddress","SubstrateChain","ISubstrateAddress","Web3SubstrateChainAccount","WalletSubstrateNetwork"],"Equatable":[],"Web3Chain.3":"Web3SubstrateChainAccount","Web3Chain.4":"WalletSubstrateNetwork"},"Web3SuiChainAccount":{"Web3ChainAccount":["SuiAddress"],"Equatable":[],"Web3ChainAccount.0":"SuiAddress"},"Web3SuiChainAuthenticated":{"Web3ChainAuthenticated":["Web3SuiChainAccount"],"Web3ChainAuthenticated.0":"Web3SuiChainAccount"},"Web3SuiChain":{"Web3Chain":["SuiAddress","SuiChain","ISuiAddress","Web3SuiChainAccount","WalletSuiNetwork"],"Equatable":[],"Web3Chain.3":"Web3SuiChainAccount","Web3Chain.4":"WalletSuiNetwork"},"Web3TonChainAccount":{"Web3ChainAccount":["TonAddress"],"Equatable":[],"Web3ChainAccount.0":"TonAddress"},"Web3TonChainAuthenticated":{"Web3ChainAuthenticated":["Web3TonChainAccount"],"Web3ChainAuthenticated.0":"Web3TonChainAccount"},"Web3TonChain":{"Web3Chain":["TonAddress","TheOpenNetworkChain","ITonAddress","Web3TonChainAccount","WalletTonNetwork"],"Equatable":[],"Web3Chain.3":"Web3TonChainAccount","Web3Chain.4":"WalletTonNetwork"},"Web3TronChainAccount":{"Web3ChainAccount":["TronAddress"],"Equatable":[],"Web3ChainAccount.0":"TronAddress"},"Web3TronChainIdnetifier":{"Web3ChainIdnetifier":[],"Equatable":[]},"Web3TronChainAuthenticated":{"Web3ChainAuthenticated":["Web3TronChainAccount"],"Web3ChainAuthenticated.0":"Web3TronChainAccount"},"Web3TronChain":{"Web3Chain":["TronAddress","TronChain","ITronAddress","Web3TronChainAccount","WalletTronNetwork"],"Equatable":[],"Web3Chain.3":"Web3TronChainAccount","Web3Chain.4":"WalletTronNetwork"},"SubstrateAddress":{"BaseSubstrateAddress":[]},"SubstrateEthereumAddress":{"BaseSubstrateAddress":[]},"StellarAccountAddress":{"StellarAddress":[]},"StellarContractAddress":{"StellarAddress":[]},"StellarMuxedAddress":{"StellarAddress":[]},"AptosClient":{"NetworkClient":["AptosWalletTransaction","AptosAPIProvider"]},"BitcoinClient":{"NetworkClient":["BitcoinWalletTransaction","BaseBitcoinAPIProvider"]},"CosmosClient":{"NetworkClient":["CosmosWalletTransaction","CosmosAPIProvider"]},"EthereumClient":{"NetworkClient":["EthWalletTransaction","EthereumAPIProvider"]},"SolanaClient":{"NetworkClient":["SolanaWalletTransaction","SolanaAPIProvider"]},"StellarClient":{"NetworkClient":["StellarWalletTransaction","StellarAPIProvider"]},"SubstrateClient":{"NetworkClient":["SubstrateWalletTransaction","SubstrateAPIProvider"]},"SuiClient":{"NetworkClient":["SuiWalletTransaction","SuiAPIProvider"]},"TonClient":{"NetworkClient":["TonWalletTransaction","TonAPIProvider"]},"TronClient":{"NetworkClient":["TronWalletTransaction","TronAPIProvider"]},"ContactCore":{"Equatable":[]},"AptosContact":{"ContactCore":["AptosAddress"],"Equatable":[]},"BitcoinContact":{"ContactCore":["BitcoinBaseAddress"],"Equatable":[]},"CosmosContact":{"ContactCore":["CosmosBaseAddress"],"Equatable":[]},"EthereumContact":{"ContactCore":["ETHAddress"],"Equatable":[]},"SolanaContact":{"ContactCore":["SolAddress"],"Equatable":[]},"StellarContact":{"ContactCore":["StellarAddress"],"Equatable":[]},"SubstrateContact":{"ContactCore":["BaseSubstrateAddress"],"Equatable":[]},"SuiContact":{"ContactCore":["SuiAddress"],"Equatable":[]},"TonContact":{"ContactCore":["TonAddress"],"Equatable":[]},"TronContact":{"ContactCore":["TronAddress"],"Equatable":[]},"ChainTransaction":{"Equatable":[]},"AptosWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"BitcoinWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"CosmosWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"EthWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"SolanaWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"StellarWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"SubstrateWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"SuiWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"TonWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"TronWalletTransaction":{"ChainTransaction":[],"Equatable":[]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"UnmodifiableListBase":1,"__CastListBase__CastIterableBase_ListMixin":2,"NativeTypedArray":1,"UnmodifiableMapBase":2,"_SetBase":1,"Converter":2,"MoveArgument":1,"BalanceCore":2,"NewAccountParams":1,"BaseBitcoinNewAddressParams":1,"TokenCore":2,"ChainConfig":1,"NetworkClient":2,"BitcoinClient":1,"ContactCore":1}'));
  var string$ = {
    x00_____: "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\u03f6\x00\u0404\u03f4 \u03f4\u03f6\u01f6\u01f6\u03f6\u03fc\u01f4\u03ff\u03ff\u0584\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u05d4\u01f4\x00\u01f4\x00\u0504\u05c4\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u0400\x00\u0400\u0200\u03f7\u0200\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u0200\u0200\u0200\u03f7\x00",
    x3000000: "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
    x3723700: "7237005577332262213973186563042994240857116359379907606001950938285454250989",
    ABCDEF: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    An_une: "An unexpected error occurred while opening the IndexedDB database.",
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type"
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      APIProvider: findType("APIProvider"),
      APPImage: findType("APPImage"),
      AddressDerivationType: findType("AddressDerivationType"),
      AptosAPIProvider: findType("AptosAPIProvider"),
      AptosAPIProviderType: findType("AptosAPIProviderType"),
      AptosChainType: findType("AptosChainType"),
      AptosProviderIdentifier: findType("AptosProviderIdentifier"),
      AsyncError: findType("AsyncError"),
      Base64Codec: findType("Base64Codec"),
      BaseBitcoinAPIProvider: findType("BaseBitcoinAPIProvider"),
      BasedUtxoNetwork: findType("BasedUtxoNetwork"),
      BigInt: findType("BigInt"),
      Bip44Coins: findType("Bip44Coins"),
      Bip49Coins: findType("Bip49Coins"),
      Bip84Coins: findType("Bip84Coins"),
      Bip86Coins: findType("Bip86Coins"),
      BipCoinConfig: findType("BipCoinConfig"),
      BipProposal: findType("BipProposal"),
      BitcoinAddressType: findType("BitcoinAddressType"),
      BitcoinExplorerProviderType: findType("BitcoinExplorerProviderType"),
      CardanoAPIProvider: findType("CardanoAPIProvider"),
      CborBase64Types: findType("CborBase64Types"),
      CborBytesValue: findType("CborBytesValue"),
      CborIntValue: findType("CborIntValue"),
      CborListValue_CborBytesValue: findType("CborListValue<CborBytesValue>"),
      CborListValue_CborObject: findType("CborListValue<CborObject>"),
      CborListValue_CborTagValue_dynamic: findType("CborListValue<CborTagValue<@>>"),
      CborListValue_Object: findType("CborListValue<Object>"),
      CborListValue_String: findType("CborListValue<String>"),
      CborListValue_dynamic: findType("CborListValue<@>"),
      CborListValue_nullable_CborObject: findType("CborListValue<CborObject?>"),
      CborListValue_nullable_Object: findType("CborListValue<Object?>"),
      CborListValue_nullable_String: findType("CborListValue<String?>"),
      CborMapValue_CborObject_CborObject: findType("CborMapValue<CborObject,CborObject>"),
      CborMapValue_dynamic_dynamic: findType("CborMapValue<@,@>"),
      CborMapValue_of_String_and_CborTagValue_dynamic: findType("CborMapValue<String,CborTagValue<@>>"),
      CborNumeric: findType("CborNumeric"),
      CborObject: findType("CborObject"),
      CborSetValue_CborObject: findType("CborSetValue<CborObject>"),
      CborStringValue: findType("CborStringValue"),
      CborTagValue_CborBigFloatValue: findType("CborTagValue<CborBigFloatValue>"),
      CborTagValue_CborDecimalFracValue: findType("CborTagValue<CborDecimalFracValue>"),
      CborTagValue_CborDynamicBytesValue: findType("CborTagValue<CborDynamicBytesValue>"),
      CborTagValue_CborEpochIntValue: findType("CborTagValue<CborEpochIntValue>"),
      CborTagValue_CborIndefiniteStringValue: findType("CborTagValue<CborIndefiniteStringValue>"),
      CborTagValue_CborListValue_CborObject: findType("CborTagValue<CborListValue<CborObject>>"),
      CborTagValue_CborMapValue_CborObject_CborObject: findType("CborTagValue<CborMapValue<CborObject,CborObject>>"),
      CborTagValue_CborNumeric: findType("CborTagValue<CborNumeric>"),
      CborTagValue_CborObject: findType("CborTagValue<CborObject>"),
      CborTagValue_CborSetValue_CborObject: findType("CborTagValue<CborSetValue<CborObject>>"),
      CborTagValue_dynamic: findType("CborTagValue<@>"),
      ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction: findType("ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>"),
      ChainType: findType("ChainType"),
      Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction: findType("Chain<APIProvider,NetworkCoinParams<APIProvider>,@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,WalletNetwork<NetworkCoinParams<APIProvider>>,NetworkClient<ChainTransaction,APIProvider>,ChainStorageKey,ChainConfig<ChainStorageKey>,ChainTransaction,ContactCore<@>,NewAccountParams<ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>>>"),
      Cip1852Coins: findType("Cip1852Coins"),
      CodeUnits: findType("CodeUnits"),
      CoingeckoCoin: findType("CoingeckoCoin"),
      Comparable_dynamic: findType("Comparable<@>"),
      ContentType: findType("ContentType"),
      CosmosAPIProvider: findType("CosmosAPIProvider"),
      CosmosFeeToken: findType("CosmosFeeToken"),
      CosmosKeysAlgs: findType("CosmosKeysAlgs"),
      CosmosNetworkTypes: findType("CosmosNetworkTypes"),
      CryptoCoins_CoinConfig: findType("CryptoCoins<CoinConfig>"),
      CurveFp: findType("CurveFp"),
      CustomCoins: findType("CustomCoins"),
      DateTime: findType("DateTime"),
      DefaultProviderIdentifier: findType("DefaultProviderIdentifier"),
      Duration: findType("Duration"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Equatable: findType("Equatable"),
      Error: findType("Error"),
      EthereumAPIProvider: findType("EthereumAPIProvider"),
      FriendlyAddressFlags: findType("FriendlyAddressFlags"),
      Function: findType("Function"),
      HDWallet: findType("HDWallet"),
      IntegerBalance: findType("IntegerBalance"),
      Iterable_double: findType("Iterable<double>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      JSArray_APIProvider: findType("JSArray<APIProvider>"),
      JSArray_AppPlatform: findType("JSArray<AppPlatform>"),
      JSArray_BaseBitcoinAPIProvider: findType("JSArray<BaseBitcoinAPIProvider>"),
      JSArray_BigInt: findType("JSArray<BigInt>"),
      JSArray_BitcoinAddressType: findType("JSArray<BitcoinAddressType>"),
      JSArray_CborBytesValue: findType("JSArray<CborBytesValue>"),
      JSArray_CborObject: findType("JSArray<CborObject>"),
      JSArray_CborTagValue_dynamic: findType("JSArray<CborTagValue<@>>"),
      JSArray_CosmosAPIProvider: findType("JSArray<CosmosAPIProvider>"),
      JSArray_CosmosFeeToken: findType("JSArray<CosmosFeeToken>"),
      JSArray_CosmosKeysAlgs: findType("JSArray<CosmosKeysAlgs>"),
      JSArray_EthereumAPIProvider: findType("JSArray<EthereumAPIProvider>"),
      JSArray_FriendlyAddressFlags: findType("JSArray<FriendlyAddressFlags>"),
      JSArray_List_BigInt: findType("JSArray<List<BigInt>>"),
      JSArray_MapEntry_String_dynamic: findType("JSArray<MapEntry<String,@>>"),
      JSArray_NetworkType: findType("JSArray<NetworkType>"),
      JSArray_Object: findType("JSArray<Object>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_SubstrateAPIProvider: findType("JSArray<SubstrateAPIProvider>"),
      JSArray_SubstrateKeyAlgorithm: findType("JSArray<SubstrateKeyAlgorithm>"),
      JSArray_WalletEventTarget: findType("JSArray<WalletEventTarget>"),
      JSArray_Web3AccountAcitvity: findType("JSArray<Web3AccountAcitvity>"),
      JSArray_Web3ChainAuthenticated_Web3ChainAccount_dynamic: findType("JSArray<Web3ChainAuthenticated<Web3ChainAccount<@>>>"),
      JSArray_Web3ChainNetworkData_WalletNetwork_NetworkCoinParams_APIProvider: findType("JSArray<Web3ChainNetworkData<WalletNetwork<NetworkCoinParams<APIProvider>>>>"),
      JSArray_double: findType("JSArray<double>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_CborObject: findType("JSArray<CborObject?>"),
      JSArray_nullable_Object: findType("JSArray<Object?>"),
      JSArray_nullable_String: findType("JSArray<String?>"),
      JSArray_nullable_int: findType("JSArray<int?>"),
      JSNull: findType("JSNull"),
      JSObject: findType("JSObject"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      ListMapView_String: findType("ListMapView<String>"),
      List_APIProvider: findType("List<APIProvider>"),
      List_BigInt: findType("List<BigInt>"),
      List_JSObject: findType("List<JSObject>"),
      List_List_int: findType("List<List<int>>"),
      List_String: findType("List<String>"),
      List_Web3ChainNetworkData_WalletAptosNetwork: findType("List<Web3ChainNetworkData<WalletAptosNetwork>>"),
      List_Web3ChainNetworkData_WalletBitcoinNetwork: findType("List<Web3ChainNetworkData<WalletBitcoinNetwork>>"),
      List_Web3ChainNetworkData_WalletCosmosNetwork: findType("List<Web3ChainNetworkData<WalletCosmosNetwork>>"),
      List_Web3ChainNetworkData_WalletEthereumNetwork: findType("List<Web3ChainNetworkData<WalletEthereumNetwork>>"),
      List_Web3ChainNetworkData_WalletNetwork_NetworkCoinParams_APIProvider: findType("List<Web3ChainNetworkData<WalletNetwork<NetworkCoinParams<APIProvider>>>>"),
      List_Web3ChainNetworkData_WalletSolanaNetwork: findType("List<Web3ChainNetworkData<WalletSolanaNetwork>>"),
      List_Web3ChainNetworkData_WalletStellarNetwork: findType("List<Web3ChainNetworkData<WalletStellarNetwork>>"),
      List_Web3ChainNetworkData_WalletSubstrateNetwork: findType("List<Web3ChainNetworkData<WalletSubstrateNetwork>>"),
      List_Web3ChainNetworkData_WalletSuiNetwork: findType("List<Web3ChainNetworkData<WalletSuiNetwork>>"),
      List_Web3ChainNetworkData_WalletTonNetwork: findType("List<Web3ChainNetworkData<WalletTonNetwork>>"),
      List_Web3ChainNetworkData_WalletTronNetwork: findType("List<Web3ChainNetworkData<WalletTronNetwork>>"),
      List_double: findType("List<double>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      MapEntry_CborObject_CborObject: findType("MapEntry<CborObject,CborObject>"),
      MapEntry_String_HDWallet: findType("MapEntry<String,HDWallet>"),
      MapEntry_String_dynamic: findType("MapEntry<String,@>"),
      MapEntry_int_String: findType("MapEntry<int,String>"),
      MapEntry_of_dynamic_and_nullable_Object: findType("MapEntry<@,Object?>"),
      Map_String_String: findType("Map<String,String>"),
      Map_String_dynamic: findType("Map<String,@>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      MappedListIterable_String_String: findType("MappedListIterable<String,String>"),
      MoneroAPIProvider: findType("MoneroAPIProvider"),
      MoneroCoins: findType("MoneroCoins"),
      MoneroNetwork: findType("MoneroNetwork"),
      NativeTypedArrayOfDouble: findType("NativeTypedArrayOfDouble"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeUint8List: findType("NativeUint8List"),
      NetworkType: findType("NetworkType"),
      Null: findType("Null"),
      Object: findType("Object"),
      P2pkhAddressType: findType("P2pkhAddressType"),
      P2shAddressType: findType("P2shAddressType"),
      PlatformConfig: findType("PlatformConfig"),
      ProviderAuthType: findType("ProviderAuthType"),
      ProviderAuthenticated: findType("ProviderAuthenticated"),
      ProviderIdentifier: findType("ProviderIdentifier"),
      Record: findType("Record"),
      Record_0: findType("+()"),
      Record_2_IndexDbStorage_and_bool: findType("+(IndexDbStorage,bool)"),
      Record_2_String_and_String: findType("+(String,String)"),
      Record_2_bool_and_ChaCha20Poly1305: findType("+(bool,ChaCha20Poly1305)"),
      RegExpMatch: findType("RegExpMatch"),
      ReversedListIterable_String: findType("ReversedListIterable<String>"),
      ReversedListIterable_int: findType("ReversedListIterable<int>"),
      RippleAPIProvider: findType("RippleAPIProvider"),
      Runes: findType("Runes"),
      SeedTypes: findType("SeedTypes"),
      ServiceProtocol: findType("ServiceProtocol"),
      SolanaAPIProvider: findType("SolanaAPIProvider"),
      SolanaNetworkType: findType("SolanaNetworkType"),
      StackTrace: findType("StackTrace"),
      StellarAPIProvider: findType("StellarAPIProvider"),
      StellarChainType: findType("StellarChainType"),
      String: findType("String"),
      String_Function_String: findType("String(String)"),
      SubstrateAPIProvider: findType("SubstrateAPIProvider"),
      SubstrateChainType: findType("SubstrateChainType"),
      SubstrateCoins: findType("SubstrateCoins"),
      SubstrateKeyAlgorithm: findType("SubstrateKeyAlgorithm"),
      SuiAPIProvider: findType("SuiAPIProvider"),
      SuiChainType: findType("SuiChainType"),
      TonAPIProvider: findType("TonAPIProvider"),
      TonAccountContextType: findType("TonAccountContextType"),
      TonApiType: findType("TonApiType"),
      TonChain: findType("TonChain"),
      TronAPIProvider: findType("TronAPIProvider"),
      TronChainType: findType("TronChainType"),
      TrustedGetRuntimeType: findType("TrustedGetRuntimeType"),
      Tuple_BigInt_BigInt: findType("Tuple<BigInt,BigInt>"),
      Tuple_bool_BigInt: findType("Tuple<bool,BigInt>"),
      Tuple_bool_bool: findType("Tuple<bool,bool>"),
      Tuple_int_int: findType("Tuple<int,int>"),
      Tuple_of_List_int_and_FloatLength: findType("Tuple<List<int>,FloatLength>"),
      Tuple_of_String_and_List_int: findType("Tuple<String,List<int>>"),
      TypeError: findType("TypeError"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      Uri: findType("Uri"),
      WalletAptosNetwork: findType("WalletAptosNetwork"),
      WalletBitcoinNetwork: findType("WalletBitcoinNetwork"),
      WalletCosmosNetwork: findType("WalletCosmosNetwork"),
      WalletEthereumNetwork: findType("WalletEthereumNetwork"),
      WalletEvent: findType("WalletEvent"),
      WalletEventTarget: findType("WalletEventTarget"),
      WalletEventTypes: findType("WalletEventTypes"),
      WalletLockTime: findType("WalletLockTime"),
      WalletNetwork_NetworkCoinParams_APIProvider: findType("WalletNetwork<NetworkCoinParams<APIProvider>>"),
      WalletSolanaNetwork: findType("WalletSolanaNetwork"),
      WalletStellarNetwork: findType("WalletStellarNetwork"),
      WalletSubstrateNetwork: findType("WalletSubstrateNetwork"),
      WalletSuiNetwork: findType("WalletSuiNetwork"),
      WalletTonNetwork: findType("WalletTonNetwork"),
      WalletTronNetwork: findType("WalletTronNetwork"),
      WalletVersion: findType("WalletVersion"),
      Web3APPAuthentication: findType("Web3APPAuthentication"),
      Web3AccountAcitvity: findType("Web3AccountAcitvity"),
      Web3AptosChainAccount: findType("Web3AptosChainAccount"),
      Web3AptosChainIdnetifier: findType("Web3AptosChainIdnetifier"),
      Web3BitcoinChainAccount: findType("Web3BitcoinChainAccount"),
      Web3ChainAccount_dynamic: findType("Web3ChainAccount<@>"),
      Web3ChainAuthenticated_Web3ChainAccount_dynamic: findType("Web3ChainAuthenticated<Web3ChainAccount<@>>"),
      Web3ChainDefaultIdnetifier: findType("Web3ChainDefaultIdnetifier"),
      Web3ChainIdnetifier: findType("Web3ChainIdnetifier"),
      Web3ChainNetworkData_WalletAptosNetwork: findType("Web3ChainNetworkData<WalletAptosNetwork>"),
      Web3ChainNetworkData_WalletBitcoinNetwork: findType("Web3ChainNetworkData<WalletBitcoinNetwork>"),
      Web3ChainNetworkData_WalletCosmosNetwork: findType("Web3ChainNetworkData<WalletCosmosNetwork>"),
      Web3ChainNetworkData_WalletEthereumNetwork: findType("Web3ChainNetworkData<WalletEthereumNetwork>"),
      Web3ChainNetworkData_WalletNetwork_NetworkCoinParams_APIProvider: findType("Web3ChainNetworkData<WalletNetwork<NetworkCoinParams<APIProvider>>>"),
      Web3ChainNetworkData_WalletSolanaNetwork: findType("Web3ChainNetworkData<WalletSolanaNetwork>"),
      Web3ChainNetworkData_WalletStellarNetwork: findType("Web3ChainNetworkData<WalletStellarNetwork>"),
      Web3ChainNetworkData_WalletSubstrateNetwork: findType("Web3ChainNetworkData<WalletSubstrateNetwork>"),
      Web3ChainNetworkData_WalletSuiNetwork: findType("Web3ChainNetworkData<WalletSuiNetwork>"),
      Web3ChainNetworkData_WalletTonNetwork: findType("Web3ChainNetworkData<WalletTonNetwork>"),
      Web3ChainNetworkData_WalletTronNetwork: findType("Web3ChainNetworkData<WalletTronNetwork>"),
      Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider: findType("Web3Chain<@,Chain<APIProvider,NetworkCoinParams<APIProvider>,@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,WalletNetwork<NetworkCoinParams<APIProvider>>,NetworkClient<ChainTransaction,APIProvider>,ChainStorageKey,ChainConfig<ChainStorageKey>,ChainTransaction,ContactCore<@>,NewAccountParams<ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>>>,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,Web3ChainAccount<@>,WalletNetwork<NetworkCoinParams<APIProvider>>>"),
      Web3CosmosChainAccount: findType("Web3CosmosChainAccount"),
      Web3CosmoshainIdnetifier: findType("Web3CosmoshainIdnetifier"),
      Web3EncryptedMessage: findType("Web3EncryptedMessage"),
      Web3EthereumChainAccount: findType("Web3EthereumChainAccount"),
      Web3EthereumChainIdnetifier: findType("Web3EthereumChainIdnetifier"),
      Web3SolanaChainAccount: findType("Web3SolanaChainAccount"),
      Web3StellarChainAccount: findType("Web3StellarChainAccount"),
      Web3SubstrateChainAccount: findType("Web3SubstrateChainAccount"),
      Web3SubstrateChainIdnetifier: findType("Web3SubstrateChainIdnetifier"),
      Web3SuiChainAccount: findType("Web3SuiChainAccount"),
      Web3TonChainAccount: findType("Web3TonChainAccount"),
      Web3TronChainAccount: findType("Web3TronChainAccount"),
      Web3TronChainIdnetifier: findType("Web3TronChainIdnetifier"),
      WhereTypeIterable_CborBytesValue: findType("WhereTypeIterable<CborBytesValue>"),
      WhereTypeIterable_CborNumeric: findType("WhereTypeIterable<CborNumeric>"),
      WhereTypeIterable_CborStringValue: findType("WhereTypeIterable<CborStringValue>"),
      XlmAddrTypes: findType("XlmAddrTypes"),
      _AsyncCompleter_JSObject: findType("_AsyncCompleter<JSObject>"),
      _AsyncCompleter_WalletEvent: findType("_AsyncCompleter<WalletEvent>"),
      _BigIntImpl: findType("_BigIntImpl"),
      _DecodeCborResult_CborObject: findType("_DecodeCborResult<CborObject>"),
      _DecodeCborResult_List_int: findType("_DecodeCborResult<List<int>>"),
      _Future_JSObject: findType("_Future<JSObject>"),
      _Future_WalletEvent: findType("_Future<WalletEvent>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_void: findType("_Future<~>"),
      _JSBackgroundHandler: findType("_JSBackgroundHandler"),
      _SyncCompleter_void: findType("_SyncCompleter<~>"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      int: findType("int"),
      nullable_AptosNetworkParams: findType("AptosNetworkParams?"),
      nullable_BitcoinParams: findType("BitcoinParams?"),
      nullable_CardanoNetworkParams: findType("CardanoNetworkParams?"),
      nullable_CborObject: findType("CborObject?"),
      nullable_CborTagValue_dynamic: findType("CborTagValue<@>?"),
      nullable_CosmosNetworkParams: findType("CosmosNetworkParams?"),
      nullable_DateTime: findType("DateTime?"),
      nullable_EthereumNetworkParams: findType("EthereumNetworkParams?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_HDWallet: findType("HDWallet?"),
      nullable_IndexDbStorage: findType("IndexDbStorage?"),
      nullable_JSArray_nullable_Object: findType("JSArray<Object?>?"),
      nullable_JSObject: findType("JSObject?"),
      nullable_JavaScriptFunction: findType("JavaScriptFunction?"),
      nullable_List_APIProvider: findType("List<APIProvider>?"),
      nullable_List_int: findType("List<int>?"),
      nullable_MoneroNetworkParams: findType("MoneroNetworkParams?"),
      nullable_Object: findType("Object?"),
      nullable_RippleNetworkParams: findType("RippleNetworkParams?"),
      nullable_SolanaNetworkParams: findType("SolanaNetworkParams?"),
      nullable_StellarNetworkParams: findType("StellarNetworkParams?"),
      nullable_String: findType("String?"),
      nullable_SubstrateNetworkParams: findType("SubstrateNetworkParams?"),
      nullable_SuiNetworkParams: findType("SuiNetworkParams?"),
      nullable_TonNetworkParams: findType("TonNetworkParams?"),
      nullable_TronNetworkParams: findType("TronNetworkParams?"),
      nullable_WalletEvent: findType("WalletEvent?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      nullable_bool: findType("bool?"),
      nullable_double: findType("double?"),
      nullable_int: findType("int?"),
      nullable_nullable_Object_Function_dynamic: findType("Object?(@)?"),
      nullable_num: findType("num?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSBool_methods = J.JSBool.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.NativeByteData_methods = A.NativeByteData.prototype;
    B.NativeFloat32List_methods = A.NativeFloat32List.prototype;
    B.NativeFloat64List_methods = A.NativeFloat64List.prototype;
    B.NativeUint16List_methods = A.NativeUint16List.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.ADANetwork_0_testnetPreview = new A.ADANetwork(0, "testnetPreview");
    B.ADANetwork_1_mainnet = new A.ADANetwork(1, "mainnet");
    B.AddressConverterException_jdZ = new A.AddressConverterException("Invalid muxed address account id.", null);
    B.AddressConverterException_lgx = new A.AddressConverterException("Invalid checksum encoding", null);
    B.AddressConverterException_zNG = new A.AddressConverterException("Invalid checksum", null);
    B.List_200_81 = A._setArrayType(makeConstList([200, 81]), type$.JSArray_int);
    B.AddressDerivationType_List_200_81_bip32 = new A.AddressDerivationType(B.List_200_81, "bip32");
    B.List_200_83 = A._setArrayType(makeConstList([200, 83]), type$.JSArray_int);
    B.AddressDerivationType_List_200_83_multisig = new A.AddressDerivationType(B.List_200_83, "multisig");
    B.List_200_84 = A._setArrayType(makeConstList([200, 84]), type$.JSArray_int);
    B.AddressDerivationType_List_200_84_substrate = new A.AddressDerivationType(B.List_200_84, "substrate");
    B.AppPlatform_0 = new A.AppPlatform("windows");
    B.AppPlatform_1 = new A.AppPlatform("web");
    B.AppPlatform_2 = new A.AppPlatform("android");
    B.AppPlatform_3 = new A.AppPlatform("ios");
    B.AppPlatform_4 = new A.AppPlatform("macos");
    B.AptosAPIProviderType_0_fullnode = new A.AptosAPIProviderType(0, "fullnode");
    B.AptosAPIProviderType_1_graphQl = new A.AptosAPIProviderType(1, "graphQl");
    B.AptosChainType_1_mainnet = new A.AptosChainType(1, "mainnet");
    B.AptosChainType_2_testnet = new A.AptosChainType(2, "testnet");
    B.AptosChainType_null_devnet = new A.AptosChainType(null, "devnet");
    B.ArgumentException_2aX = new A.ArgumentException("invalid hex bytes", null);
    B.ArgumentException_4i3 = new A.ArgumentException("Invalid key net version length", null);
    B.ArgumentException_8to = new A.ArgumentException("Invalid bech32 format (data part not valid)", null);
    B.ArgumentException_Atw = new A.ArgumentException("Denominator cannot be 0.", null);
    B.ArgumentException_CKK = new A.ArgumentException("Invalid data, cannot perform conversion to base32", null);
    B.ArgumentException_Cwt = new A.ArgumentException("Hex input string must be divisible by two", null);
    B.ArgumentException_EMh = new A.ArgumentException("Incorrect characters for hex decoding", null);
    B.ArgumentException_IrH = new A.ArgumentException("Invalid bech32 format (string is mixed case)", null);
    B.ArgumentException_KSi0 = new A.ArgumentException("Invalid input: too many '.' tokens", null);
    B.ArgumentException_KSi = new A.ArgumentException("Invalid input: too many 'e' tokens", null);
    B.ArgumentException_QQa = new A.ArgumentException("Invalid Base32 string", null);
    B.ArgumentException_iZH = new A.ArgumentException("Invalid bech32 format (no separator found)", null);
    B.ArgumentException_wwD = new A.ArgumentException("Invalid data, cannot perform conversion from base32", null);
    B.AsciiDecoder_false = new A.AsciiDecoder(false);
    B.AsciiDecoder_true = new A.AsciiDecoder(true);
    B.Base58Alphabets_0 = new A.Base58Alphabets("bitcoin");
    B.Base64Encoder_false = new A.Base64Encoder(false);
    B.Base64Codec_Base64Encoder_false = new A.Base64Codec(B.Base64Encoder_false);
    B.Base64Encoder_true = new A.Base64Encoder(true);
    B.Base64Codec_Base64Encoder_true = new A.Base64Codec(B.Base64Encoder_true);
    B.List_50_6 = A._setArrayType(makeConstList([50, 6]), type$.JSArray_int);
    B.ProviderAuthType_List_50_6_header = new A.ProviderAuthType(B.List_50_6, "header");
    B.BasicProviderAuthenticated_2EA = new A.BasicProviderAuthenticated("X-API-Key", "cc8597229bb486a012f29743732b56c2331aff7f87c3d2cb84d456a04213b3ac", B.ProviderAuthType_List_50_6_header);
    B.BasicProviderAuthenticated_DBl = new A.BasicProviderAuthenticated("project_id", "mainnetolePdeWQLX8TrfG9V6RVaAshQi4pWzbU", B.ProviderAuthType_List_50_6_header);
    B.BasicProviderAuthenticated_oxo = new A.BasicProviderAuthenticated("X-API-Key", "d3800f756738ac7b39599914b8a84465960ff869f555c2317664c9a62529baf3", B.ProviderAuthType_List_50_6_header);
    B.BasicProviderAuthenticated_qR6 = new A.BasicProviderAuthenticated("project_id", "preprodMVwzqm4PuBDBSfEULoMzoj5QZcy5o3z5", B.ProviderAuthType_List_50_6_header);
    B.Bech32ChecksumError_nNb = new A.Bech32ChecksumError("Invalid bech32 checksum", null);
    B.Bech32Encodings_0 = new A.Bech32Encodings("bech32");
    B.Bech32Encodings_1 = new A.Bech32Encodings("bech32m");
    B.Bip44Coins_akashNetwork = new A.Bip44Coins("akashNetwork");
    B.Bip44Coins_algorand = new A.Bip44Coins("algorand");
    B.Bip44Coins_aptos = new A.Bip44Coins("aptos");
    B.Bip44Coins_aptosEd25519SingleKey = new A.Bip44Coins("aptosEd25519SingleKey");
    B.Bip44Coins_aptosSecp256k1SingleKey = new A.Bip44Coins("aptosSecp256k1SingleKey");
    B.Bip44Coins_avaxCChain = new A.Bip44Coins("avaxCChain");
    B.Bip44Coins_avaxPChain = new A.Bip44Coins("avaxPChain");
    B.Bip44Coins_avaxXChain = new A.Bip44Coins("avaxXChain");
    B.Bip44Coins_axelar = new A.Bip44Coins("axelar");
    B.Bip44Coins_bandProtocol = new A.Bip44Coins("bandProtocol");
    B.Bip44Coins_binanceChain = new A.Bip44Coins("binanceChain");
    B.Bip44Coins_binanceSmartChain = new A.Bip44Coins("binanceSmartChain");
    B.Bip44Coins_bitcoin = new A.Bip44Coins("bitcoin");
    B.Bip44Coins_bitcoinCash = new A.Bip44Coins("bitcoinCash");
    B.Bip44Coins_bitcoinCashSlp = new A.Bip44Coins("bitcoinCashSlp");
    B.Bip44Coins_bitcoinCashSlpTestnet = new A.Bip44Coins("bitcoinCashSlpTestnet");
    B.Bip44Coins_bitcoinCashTestnet = new A.Bip44Coins("bitcoinCashTestnet");
    B.Bip44Coins_bitcoinSv = new A.Bip44Coins("bitcoinSv");
    B.Bip44Coins_bitcoinSvTestnet = new A.Bip44Coins("bitcoinSvTestnet");
    B.Bip44Coins_bitcoinTestnet = new A.Bip44Coins("bitcoinTestnet");
    B.Bip44Coins_cardanoByronIcarus = new A.Bip44Coins("cardanoByronIcarus");
    B.Bip44Coins_cardanoByronIcarusTestnet = new A.Bip44Coins("cardanoByronIcarusTestnet");
    B.Bip44Coins_cardanoByronLedger = new A.Bip44Coins("cardanoByronLedger");
    B.Bip44Coins_cardanoByronLedgerTestnet = new A.Bip44Coins("cardanoByronLedgerTestnet");
    B.Bip44Coins_celo = new A.Bip44Coins("celo");
    B.Bip44Coins_certik = new A.Bip44Coins("certik");
    B.Bip44Coins_chihuahua = new A.Bip44Coins("chihuahua");
    B.Bip44Coins_cosmos = new A.Bip44Coins("cosmos");
    B.Bip44Coins_cosmosEd25519 = new A.Bip44Coins("cosmosEd25519");
    B.Bip44Coins_cosmosEthSecp256k1 = new A.Bip44Coins("cosmosEthSecp256k1");
    B.Bip44Coins_cosmosNist256p1 = new A.Bip44Coins("cosmosNist256p1");
    B.Bip44Coins_cosmosTestnet = new A.Bip44Coins("cosmosTestnet");
    B.Bip44Coins_cosmosTestnetEd25519 = new A.Bip44Coins("cosmosTestnetEd25519");
    B.Bip44Coins_cosmosTestnetEthSecp256k1 = new A.Bip44Coins("cosmosTestnetEthSecp256k1");
    B.Bip44Coins_cosmosTestnetNist256p1 = new A.Bip44Coins("cosmosTestnetNist256p1");
    B.Bip44Coins_dash = new A.Bip44Coins("dash");
    B.Bip44Coins_dashTestnet = new A.Bip44Coins("dashTestnet");
    B.Bip44Coins_dogecoin = new A.Bip44Coins("dogecoin");
    B.Bip44Coins_dogecoinTestnet = new A.Bip44Coins("dogecoinTestnet");
    B.Bip44Coins_ecash = new A.Bip44Coins("ecash");
    B.Bip44Coins_ecashTestnet = new A.Bip44Coins("ecashTestnet");
    B.Bip44Coins_electraProtocol = new A.Bip44Coins("electraProtocol");
    B.Bip44Coins_electraProtocolTestnet = new A.Bip44Coins("electraProtocolTestnet");
    B.Bip44Coins_elrond = new A.Bip44Coins("elrond");
    B.Bip44Coins_eos = new A.Bip44Coins("eos");
    B.Bip44Coins_ergo = new A.Bip44Coins("ergo");
    B.Bip44Coins_ergoTestnet = new A.Bip44Coins("ergoTestnet");
    B.Bip44Coins_ethereum = new A.Bip44Coins("ethereum");
    B.Bip44Coins_ethereumClassic = new A.Bip44Coins("ethereumClassic");
    B.Bip44Coins_ethereumTestnet = new A.Bip44Coins("ethereumTestnet");
    B.Bip44Coins_fantomOpera = new A.Bip44Coins("fantomOpera");
    B.Bip44Coins_filecoin = new A.Bip44Coins("filecoin");
    B.Bip44Coins_harmonyOneAtom = new A.Bip44Coins("harmonyOneAtom");
    B.Bip44Coins_harmonyOneEth = new A.Bip44Coins("harmonyOneEth");
    B.Bip44Coins_harmonyOneMetamask = new A.Bip44Coins("harmonyOneMetamask");
    B.Bip44Coins_huobiChain = new A.Bip44Coins("huobiChain");
    B.Bip44Coins_icon = new A.Bip44Coins("icon");
    B.Bip44Coins_injective = new A.Bip44Coins("injective");
    B.Bip44Coins_irisNet = new A.Bip44Coins("irisNet");
    B.Bip44Coins_kava = new A.Bip44Coins("kava");
    B.Bip44Coins_kusamaEd25519Slip = new A.Bip44Coins("kusamaEd25519Slip");
    B.Bip44Coins_kusamaTestnetEd25519Slip = new A.Bip44Coins("kusamaTestnetEd25519Slip");
    B.Bip44Coins_litecoin = new A.Bip44Coins("litecoin");
    B.Bip44Coins_litecoinTestnet = new A.Bip44Coins("litecoinTestnet");
    B.Bip44Coins_moneroEd25519Slip = new A.Bip44Coins("moneroEd25519Slip");
    B.Bip44Coins_moneroSecp256k1 = new A.Bip44Coins("moneroSecp256k1");
    B.Bip44Coins_nano = new A.Bip44Coins("nano");
    B.Bip44Coins_nearProtocol = new A.Bip44Coins("nearProtocol");
    B.Bip44Coins_neo = new A.Bip44Coins("neo");
    B.Bip44Coins_nineChroniclesGold = new A.Bip44Coins("nineChroniclesGold");
    B.Bip44Coins_okexChainAtom = new A.Bip44Coins("okexChainAtom");
    B.Bip44Coins_okexChainAtomOld = new A.Bip44Coins("okexChainAtomOld");
    B.Bip44Coins_okexChainEth = new A.Bip44Coins("okexChainEth");
    B.Bip44Coins_ontology = new A.Bip44Coins("ontology");
    B.Bip44Coins_osmosis = new A.Bip44Coins("osmosis");
    B.Bip44Coins_pepecoin = new A.Bip44Coins("pepecoin");
    B.Bip44Coins_pepecoinTestnet = new A.Bip44Coins("pepecoinTestnet");
    B.Bip44Coins_piNetwork = new A.Bip44Coins("piNetwork");
    B.Bip44Coins_polkadotEd25519Slip = new A.Bip44Coins("polkadotEd25519Slip");
    B.Bip44Coins_polkadotTestnetEd25519Slip = new A.Bip44Coins("polkadotTestnetEd25519Slip");
    B.Bip44Coins_polygon = new A.Bip44Coins("polygon");
    B.Bip44Coins_ripple = new A.Bip44Coins("ripple");
    B.Bip44Coins_rippleED25519 = new A.Bip44Coins("rippleED25519");
    B.Bip44Coins_rippleTestnet = new A.Bip44Coins("rippleTestnet");
    B.Bip44Coins_rippleTestnetED25519 = new A.Bip44Coins("rippleTestnetED25519");
    B.Bip44Coins_secretNetworkNew = new A.Bip44Coins("secretNetworkNew");
    B.Bip44Coins_secretNetworkOld = new A.Bip44Coins("secretNetworkOld");
    B.Bip44Coins_solana = new A.Bip44Coins("solana");
    B.Bip44Coins_solanaTestnet = new A.Bip44Coins("solanaTestnet");
    B.Bip44Coins_stellar = new A.Bip44Coins("stellar");
    B.Bip44Coins_stellarTestnet = new A.Bip44Coins("stellarTestnet");
    B.Bip44Coins_sui = new A.Bip44Coins("sui");
    B.Bip44Coins_suiSecp256k1 = new A.Bip44Coins("suiSecp256k1");
    B.Bip44Coins_suiSecp256r1 = new A.Bip44Coins("suiSecp256r1");
    B.Bip44Coins_terra = new A.Bip44Coins("terra");
    B.Bip44Coins_tezos = new A.Bip44Coins("tezos");
    B.Bip44Coins_theta = new A.Bip44Coins("theta");
    B.Bip44Coins_tonMainnet = new A.Bip44Coins("tonMainnet");
    B.Bip44Coins_tonTestnet = new A.Bip44Coins("tonTestnet");
    B.Bip44Coins_tron = new A.Bip44Coins("tron");
    B.Bip44Coins_tronTestnet = new A.Bip44Coins("tronTestnet");
    B.Bip44Coins_vechain = new A.Bip44Coins("vechain");
    B.Bip44Coins_verge = new A.Bip44Coins("verge");
    B.Bip44Coins_zcash = new A.Bip44Coins("zcash");
    B.Bip44Coins_zcashTestnet = new A.Bip44Coins("zcashTestnet");
    B.Bip44Coins_zilliqa = new A.Bip44Coins("zilliqa");
    B.Bip49Coins_bitcoin = new A.Bip49Coins("bitcoin");
    B.Bip49Coins_bitcoinCash = new A.Bip49Coins("bitcoinCash");
    B.Bip49Coins_bitcoinCashSlp = new A.Bip49Coins("bitcoinCashSlp");
    B.Bip49Coins_bitcoinCashSlpTestnet = new A.Bip49Coins("bitcoinCashSlpTestnet");
    B.Bip49Coins_bitcoinCashTestnet = new A.Bip49Coins("bitcoinCashTestnet");
    B.Bip49Coins_bitcoinSv = new A.Bip49Coins("bitcoinSv");
    B.Bip49Coins_bitcoinSvTestnet = new A.Bip49Coins("bitcoinSvTestnet");
    B.Bip49Coins_bitcoinTestnet = new A.Bip49Coins("bitcoinTestnet");
    B.Bip49Coins_dash = new A.Bip49Coins("dash");
    B.Bip49Coins_dashTestnet = new A.Bip49Coins("dashTestnet");
    B.Bip49Coins_dogecoin = new A.Bip49Coins("dogecoin");
    B.Bip49Coins_dogecoinTestnet = new A.Bip49Coins("dogecoinTestnet");
    B.Bip49Coins_ecash = new A.Bip49Coins("ecash");
    B.Bip49Coins_ecashTestnet = new A.Bip49Coins("ecashTestnet");
    B.Bip49Coins_electraProtocol = new A.Bip49Coins("electraProtocol");
    B.Bip49Coins_electraProtocolTestnet = new A.Bip49Coins("electraProtocolTestnet");
    B.Bip49Coins_litecoin = new A.Bip49Coins("litecoin");
    B.Bip49Coins_litecoinTestnet = new A.Bip49Coins("litecoinTestnet");
    B.Bip49Coins_pepecoin = new A.Bip49Coins("pepecoin");
    B.Bip49Coins_pepecoinTestnet = new A.Bip49Coins("pepecoinTestnet");
    B.Bip49Coins_zcash = new A.Bip49Coins("zcash");
    B.Bip49Coins_zcashTestnet = new A.Bip49Coins("zcashTestnet");
    B.Bip84Coins_bitcoin = new A.Bip84Coins("bitcoin");
    B.Bip84Coins_bitcoinTestnet = new A.Bip84Coins("bitcoinTestnet");
    B.Bip84Coins_electraProtocol = new A.Bip84Coins("electraProtocol");
    B.Bip84Coins_electraProtocolTestnet = new A.Bip84Coins("electraProtocolTestnet");
    B.Bip84Coins_litecoin = new A.Bip84Coins("litecoin");
    B.Bip84Coins_litecoinTestnet = new A.Bip84Coins("litecoinTestnet");
    B.Bip86Coins_bitcoin = new A.Bip86Coins("bitcoin");
    B.Bip86Coins_bitcoinTestnet = new A.Bip86Coins("bitcoinTestnet");
    B.BipProposal_bip44 = new A.BipProposal("bip44");
    B.BipProposal_bip49 = new A.BipProposal("bip49");
    B.BipProposal_bip84 = new A.BipProposal("bip84");
    B.BipProposal_bip86 = new A.BipProposal("bip86");
    B.CoinNames_9E5 = new A.CoinNames("Bitcoin Cash");
    B.List_128 = A._setArrayType(makeConstList([128]), type$.JSArray_int);
    B.List_0 = A._setArrayType(makeConstList([0]), type$.JSArray_int);
    B.List_8 = A._setArrayType(makeConstList([8]), type$.JSArray_int);
    B.List_5 = A._setArrayType(makeConstList([5]), type$.JSArray_int);
    B.CoinParams_f9a = new A.CoinParams(null, null, null, null, B.List_128, null, null, null, "bitcoincash", B.List_0, B.List_0, "bitcoincash", B.List_8, B.List_5, null, null, null, null, null, null, null);
    B.CoinConf_C5C = new A.CoinConf(B.CoinNames_9E5, B.CoinParams_f9a);
    B.List_16 = A._setArrayType(makeConstList([16]), type$.JSArray_int);
    B.List_11 = A._setArrayType(makeConstList([11]), type$.JSArray_int);
    B.List_24 = A._setArrayType(makeConstList([24]), type$.JSArray_int);
    B.List_27 = A._setArrayType(makeConstList([27]), type$.JSArray_int);
    B.PubKeyAddressType_P2PK = new A.PubKeyAddressType("P2PK");
    B.P2pkhAddressType_P2PKH = new A.P2pkhAddressType("P2PKH");
    B.P2pkhAddressType_P2PKHWT = new A.P2pkhAddressType("P2PKHWT");
    B.P2shAddressType_apR = new A.P2shAddressType(20, "P2SH/P2PKH");
    B.P2shAddressType_vvf = new A.P2shAddressType(20, "P2SH/P2PK");
    B.P2shAddressType_rEf = new A.P2shAddressType(32, "P2SH32/P2PKH");
    B.P2shAddressType_yON = new A.P2shAddressType(32, "P2SH32/P2PK");
    B.P2shAddressType_mdM = new A.P2shAddressType(32, "P2SH32WT/P2PKH");
    B.P2shAddressType_Aj9 = new A.P2shAddressType(32, "P2SH32WT/P2PK");
    B.P2shAddressType_An7 = new A.P2shAddressType(20, "P2SHWT/P2PKH");
    B.P2shAddressType_xea = new A.P2shAddressType(20, "P2SHWT/P2PK");
    B.List_PNR = A._setArrayType(makeConstList([B.PubKeyAddressType_P2PK, B.P2pkhAddressType_P2PKH, B.P2pkhAddressType_P2PKHWT, B.P2shAddressType_apR, B.P2shAddressType_vvf, B.P2shAddressType_rEf, B.P2shAddressType_yON, B.P2shAddressType_mdM, B.P2shAddressType_Aj9, B.P2shAddressType_An7, B.P2shAddressType_xea]), type$.JSArray_BitcoinAddressType);
    B.BitcoinCashNetwork_DE4 = new A.BitcoinCashNetwork(B.CoinConf_C5C, "bitcoinCashMainnet", "bitcoincash:mainnet");
    B.CoinNames_1vL = new A.CoinNames("Bitcoin Cash TestNet");
    B.List_239 = A._setArrayType(makeConstList([239]), type$.JSArray_int);
    B.List_111 = A._setArrayType(makeConstList([111]), type$.JSArray_int);
    B.List_196 = A._setArrayType(makeConstList([196]), type$.JSArray_int);
    B.CoinParams_yr4 = new A.CoinParams(null, null, null, null, B.List_239, null, null, null, "bchtest", B.List_0, B.List_111, "bchtest", B.List_8, B.List_196, null, null, null, null, null, null, null);
    B.CoinConf_24w = new A.CoinConf(B.CoinNames_1vL, B.CoinParams_yr4);
    B.BitcoinCashNetwork_Ose = new A.BitcoinCashNetwork(B.CoinConf_24w, "bitcoinCashTestnet", "bitcoincash:testnet");
    B.BitcoinExplorerProviderType_SGC = new A.BitcoinExplorerProviderType("https://api.blockcypher.com", "blockcypher");
    B.ServiceProtocol_HTTP_0_http = new A.ServiceProtocol("HTTP", 0, "http");
    B.BitcoinExplorerAPIProvider_1R8 = new A.BitcoinExplorerAPIProvider(B.BitcoinExplorerProviderType_SGC, "blockCypher", B.ServiceProtocol_HTTP_0_http, null, true);
    B.BitcoinExplorerProviderType_cMs = new A.BitcoinExplorerProviderType("https://mempool.space", "mempool");
    B.BitcoinExplorerAPIProvider_Beg = new A.BitcoinExplorerAPIProvider(B.BitcoinExplorerProviderType_cMs, "mempool", B.ServiceProtocol_HTTP_0_http, null, true);
    B.CoinNames_gL8 = new A.CoinNames("Bitcoin TestNet");
    B.CoinParams_P5D = new A.CoinParams(B.List_111, B.List_196, "tb", "tb", B.List_239, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_khN = new A.CoinConf(B.CoinNames_gL8, B.CoinParams_P5D);
    B.BitcoinNetwork_IWD = new A.BitcoinNetwork(B.CoinConf_khN, "bitcoinTestnet4", "bitcoin:testnet4");
    B.CoinNames_Bitcoin = new A.CoinNames("Bitcoin");
    B.CoinParams_Btn = new A.CoinParams(B.List_0, B.List_5, "bc", "bc", B.List_128, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_6iT = new A.CoinConf(B.CoinNames_Bitcoin, B.CoinParams_Btn);
    B.BitcoinNetwork_o5I = new A.BitcoinNetwork(B.CoinConf_6iT, "bitcoinMainnet", "bitcoin:mainnet");
    B.BitcoinNetwork_o9i = new A.BitcoinNetwork(B.CoinConf_khN, "bitcoinTestnet", "bitcoin:testnet");
    B.CoinNames_BitcoinSV = new A.CoinNames("BitcoinSV");
    B.CoinParams_gFN = new A.CoinParams(B.List_0, B.List_5, null, null, B.List_128, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_jJJ = new A.CoinConf(B.CoinNames_BitcoinSV, B.CoinParams_gFN);
    B.BitcoinSVNetwork_f7v = new A.BitcoinSVNetwork(B.CoinConf_jJJ, "BitcoinSVMainnet", "bitcoinsv:mainnet");
    B.C_AsciiCodec = new A.AsciiCodec();
    B.C_AsciiEncoder = new A.AsciiEncoder();
    B.C_Base64Decoder = new A.Base64Decoder();
    B.C_CborNullValue = new A.CborNullValue();
    B.C_CborUndefinedValue = new A.CborUndefinedValue();
    B.C_CipProposal = new A.CipProposal();
    B.C_CustomProposal = new A.CustomProposal();
    B.C_EmptyIterator = new A.EmptyIterator(A.findType("EmptyIterator<0&>"));
    B.C_Endian = new A.Endian();
    B.C_Endian0 = new A.Endian();
    B.C_IntegerDivisionByZeroException = new A.IntegerDivisionByZeroException();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof HTMLElement == "function";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (typeof userAgent != "string") return hooks;
    if (userAgent.indexOf("DumpRenderTree") >= 0) return hooks;
    if (userAgent.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST5 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_JsonCodec = new A.JsonCodec();
    B.C_MoneroProposal = new A.MoneroProposal();
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.CoinNames_Pepecoin = new A.CoinNames("Pepecoin");
    B.List_56 = A._setArrayType(makeConstList([56]), type$.JSArray_int);
    B.List_22 = A._setArrayType(makeConstList([22]), type$.JSArray_int);
    B.List_158 = A._setArrayType(makeConstList([158]), type$.JSArray_int);
    B.CoinParams_qYa = new A.CoinParams(B.List_56, B.List_22, null, null, B.List_158, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_ALe = new A.CoinConf(B.CoinNames_Pepecoin, B.CoinParams_qYa);
    B.List_H7c = A._setArrayType(makeConstList([B.PubKeyAddressType_P2PK, B.P2pkhAddressType_P2PKH, B.P2shAddressType_apR, B.P2shAddressType_vvf]), type$.JSArray_BitcoinAddressType);
    B.C_PepeNetwork = new A.PepeNetwork();
    B.C_SentinelValue = new A.SentinelValue();
    B.C_SubstratePropoosal = new A.SubstratePropoosal();
    B.C_Utf8Encoder = new A.Utf8Encoder();
    B.List_6_161_159 = A._setArrayType(makeConstList([6, 161, 159]), type$.JSArray_int);
    B.C_XtzAddrPrefixes = new A.XtzAddrPrefixes();
    B.C__Hex = new A._Hex();
    B.C__RootZone = new A._RootZone();
    B.C__StringStackTrace = new A._StringStackTrace();
    B.CborBoleanValue_false = new A.CborBoleanValue(false);
    B.CborBoleanValue_true = new A.CborBoleanValue(true);
    B.CborException_6h4 = new A.CborException("Invalid simpleOrFloatTags", null);
    B.CborException_FFX = new A.CborException("invalid cbornumeric", null);
    B.CborException_SJF = new A.CborException("invalid bigFloat array length", null);
    B.CborException_gYX = new A.CborException("Input byte array must be exactly 2 bytes long for Float16", null);
    B.CborException_lWr = new A.CborException("invalid or unsuported cbor tag", null);
    B.CborException_xZj = new A.CborException("Length is to large for type int.", null);
    B.ChainType_mainnet = new A.ChainType("mainnet");
    B.ChainType_testnet = new A.ChainType("testnet");
    B.Cip1852Coins_cardanoIcarus = new A.Cip1852Coins("cardanoIcarus");
    B.Cip1852Coins_cardanoIcarusTestnet = new A.Cip1852Coins("cardanoIcarusTestnet");
    B.Cip1852Coins_cardanoLedger = new A.Cip1852Coins("cardanoLedger");
    B.Cip1852Coins_cardanoLedgerTestnet = new A.Cip1852Coins("cardanoLedgerTestnet");
    B.CoinNames_Stafi = new A.CoinNames("Stafi");
    B.CoinParams_jlr = new A.CoinParams(null, null, null, null, null, 20, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_1rN = new A.CoinConf(B.CoinNames_Stafi, B.CoinParams_jlr);
    B.CoinNames_kOE = new A.CoinNames("Generic Substrate");
    B.CoinParams_lEh = new A.CoinParams(null, null, null, null, null, 42, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_2Q3 = new A.CoinConf(B.CoinNames_kOE, B.CoinParams_lEh);
    B.CoinNames_Sck = new A.CoinNames("Plasm Network");
    B.CoinParams_7BH = new A.CoinParams(null, null, null, null, null, 5, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_9rY = new A.CoinConf(B.CoinNames_Sck, B.CoinParams_7BH);
    B.CoinNames_Moonbeam = new A.CoinNames("Moonbeam");
    B.CoinParams_aTs = new A.CoinParams(null, null, null, null, null, 1284, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_NFA = new A.CoinConf(B.CoinNames_Moonbeam, B.CoinParams_aTs);
    B.CoinNames_Monero = new A.CoinNames("Monero");
    B.List_18 = A._setArrayType(makeConstList([18]), type$.JSArray_int);
    B.List_19 = A._setArrayType(makeConstList([19]), type$.JSArray_int);
    B.List_42 = A._setArrayType(makeConstList([42]), type$.JSArray_int);
    B.CoinParams_mUl = new A.CoinParams(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, B.List_18, B.List_19, B.List_42, null, null);
    B.CoinConf_Z8a = new A.CoinConf(B.CoinNames_Monero, B.CoinParams_mUl);
    B.CoinNames_Sora = new A.CoinNames("Sora");
    B.CoinParams_KMt = new A.CoinParams(null, null, null, null, null, 69, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_cB1 = new A.CoinConf(B.CoinNames_Sora, B.CoinParams_KMt);
    B.CoinNames_Edgeware = new A.CoinNames("Edgeware");
    B.CoinParams_pgH = new A.CoinParams(null, null, null, null, null, 7, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_d50 = new A.CoinConf(B.CoinNames_Edgeware, B.CoinParams_pgH);
    B.CoinNames_ChainX = new A.CoinNames("ChainX");
    B.CoinParams_e7W = new A.CoinParams(null, null, null, null, null, 44, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_dz7 = new A.CoinConf(B.CoinNames_ChainX, B.CoinParams_e7W);
    B.CoinNames_Bifrost = new A.CoinNames("Bifrost");
    B.CoinParams_v9p = new A.CoinParams(null, null, null, null, null, 6, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_fWq = new A.CoinConf(B.CoinNames_Bifrost, B.CoinParams_v9p);
    B.CoinNames_r3G = new A.CoinNames("Phala Network");
    B.CoinParams_JN4 = new A.CoinParams(null, null, null, null, null, 30, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_htN = new A.CoinConf(B.CoinNames_r3G, B.CoinParams_JN4);
    B.CoinNames_Karura = new A.CoinNames("Karura");
    B.CoinParams_vDI = new A.CoinParams(null, null, null, null, null, 8, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_jfr = new A.CoinConf(B.CoinNames_Karura, B.CoinParams_vDI);
    B.CoinNames_Moonriver = new A.CoinNames("Moonriver");
    B.CoinParams_6O6 = new A.CoinParams(null, null, null, null, null, 1285, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_nB3 = new A.CoinConf(B.CoinNames_Moonriver, B.CoinParams_6O6);
    B.CoinNames_Acala = new A.CoinNames("Acala");
    B.CoinParams_OBv = new A.CoinParams(null, null, null, null, null, 10, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_rMV = new A.CoinConf(B.CoinNames_Acala, B.CoinParams_OBv);
    B.CoinNames_Polkadot = new A.CoinNames("Polkadot");
    B.CoinParams_FAx = new A.CoinParams(null, null, null, null, null, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_rfh = new A.CoinConf(B.CoinNames_Polkadot, B.CoinParams_FAx);
    B.CoinNames_A2d = new A.CoinNames("Monero TestNet");
    B.List_53 = A._setArrayType(makeConstList([53]), type$.JSArray_int);
    B.List_54 = A._setArrayType(makeConstList([54]), type$.JSArray_int);
    B.List_63 = A._setArrayType(makeConstList([63]), type$.JSArray_int);
    B.CoinParams_moJ = new A.CoinParams(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, B.List_53, B.List_54, B.List_63, null, null);
    B.CoinConf_sCL = new A.CoinConf(B.CoinNames_A2d, B.CoinParams_moJ);
    B.CoinNames_Kusama = new A.CoinNames("Kusama");
    B.CoinParams_0UQ = new A.CoinParams(null, null, null, null, null, 2, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_y1J = new A.CoinConf(B.CoinNames_Kusama, B.CoinParams_0UQ);
    B.CoinNames_MpY = new A.CoinNames("Monero StageNet");
    B.List_25 = A._setArrayType(makeConstList([25]), type$.JSArray_int);
    B.List_36 = A._setArrayType(makeConstList([36]), type$.JSArray_int);
    B.CoinParams_nwk = new A.CoinParams(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, B.List_24, B.List_25, B.List_36, null, null);
    B.CoinConf_yod = new A.CoinConf(B.CoinNames_MpY, B.CoinParams_nwk);
    B.CoinNames_2vZ = new A.CoinNames("Zcash TestNet");
    B.CoinNames_6I5 = new A.CoinNames("IRIS Network");
    B.CoinNames_6lR = new A.CoinNames("Byron legacy");
    B.CoinNames_A7Y = new A.CoinNames("eCash TestNet");
    B.CoinNames_Algorand = new A.CoinNames("Algorand");
    B.CoinNames_Aptos = new A.CoinNames("Aptos");
    B.CoinNames_Axelar = new A.CoinNames("Axelar");
    B.CoinNames_CQb = new A.CoinNames("BitcoinSV TestNet");
    B.CoinNames_Cardano = new A.CoinNames("Cardano");
    B.CoinNames_Celo = new A.CoinNames("Celo");
    B.CoinNames_Certik = new A.CoinNames("Certik");
    B.CoinNames_Chihuahua = new A.CoinNames("Chihuahua");
    B.CoinNames_Cosmos = new A.CoinNames("Cosmos");
    B.CoinNames_Dash = new A.CoinNames("Dash");
    B.CoinNames_Dogecoin = new A.CoinNames("Dogecoin");
    B.CoinNames_EOS = new A.CoinNames("EOS");
    B.CoinNames_Eq2 = new A.CoinNames("Huobi Token");
    B.CoinNames_Ergo = new A.CoinNames("Ergo");
    B.CoinNames_Ethereum = new A.CoinNames("Ethereum");
    B.CoinNames_Filecoin = new A.CoinNames("Filecoin");
    B.CoinNames_Gg4 = new A.CoinNames("The Open Network");
    B.CoinNames_Gg40 = new A.CoinNames("The Open Network");
    B.CoinNames_GqI = new A.CoinNames("Byron legacy testnet");
    B.CoinNames_HRl = new A.CoinNames("Akash Network");
    B.CoinNames_Hic = new A.CoinNames("Cardano TestNet");
    B.CoinNames_Icon = new A.CoinNames("Icon");
    B.CoinNames_Injective = new A.CoinNames("Injective");
    B.CoinNames_JXy = new A.CoinNames("Electra Protocol");
    B.CoinNames_Kava = new A.CoinNames("Kava");
    B.CoinNames_Kcg1 = new A.CoinNames("Avax C-Chain");
    B.CoinNames_Kcg0 = new A.CoinNames("Avax P-Chain");
    B.CoinNames_Kcg = new A.CoinNames("Avax X-Chain");
    B.CoinNames_Litecoin = new A.CoinNames("Litecoin");
    B.CoinNames_MFR = new A.CoinNames("Binance Smart Chain");
    B.CoinNames_NEO = new A.CoinNames("NEO");
    B.CoinNames_Nano = new A.CoinNames("Nano");
    B.CoinNames_NineChroniclesGold = new A.CoinNames("NineChroniclesGold");
    B.CoinNames_Nk6 = new A.CoinNames("Pepecoin TestNet");
    B.CoinNames_O05 = new A.CoinNames("Ergo TestNet");
    B.CoinNames_OKExChain = new A.CoinNames("OKExChain");
    B.CoinNames_Ontology = new A.CoinNames("Ontology");
    B.CoinNames_Osmosis = new A.CoinNames("Osmosis");
    B.CoinNames_Polygon = new A.CoinNames("Polygon");
    B.CoinNames_R7N = new A.CoinNames("Bitcoin Cash SLP");
    B.CoinNames_Ripple = new A.CoinNames("Ripple");
    B.CoinNames_Rp6 = new A.CoinNames("Binance Chain");
    B.CoinNames_Solana = new A.CoinNames("Solana");
    B.CoinNames_Stellar = new A.CoinNames("Stellar");
    B.CoinNames_Sui = new A.CoinNames("Sui");
    B.CoinNames_Tbu = new A.CoinNames("Electra Protocol TestNet");
    B.CoinNames_Terra = new A.CoinNames("Terra");
    B.CoinNames_Tezos = new A.CoinNames("Tezos");
    B.CoinNames_Tron = new A.CoinNames("Tron");
    B.CoinNames_UKI = new A.CoinNames("Band Protocol");
    B.CoinNames_USx = new A.CoinNames("Fantom Opera");
    B.CoinNames_VeChain = new A.CoinNames("VeChain");
    B.CoinNames_Verge = new A.CoinNames("Verge");
    B.CoinNames_ZAX = new A.CoinNames("Dogecoin TestNet");
    B.CoinNames_Zcash = new A.CoinNames("Zcash");
    B.CoinNames_Zilliqa = new A.CoinNames("Zilliqa");
    B.CoinNames_a8f = new A.CoinNames("Theta Network");
    B.CoinNames_cIT = new A.CoinNames("Litecoin TestNet");
    B.CoinNames_eCash = new A.CoinNames("eCash");
    B.CoinNames_jSo = new A.CoinNames("Near Protocol");
    B.CoinNames_jrx = new A.CoinNames("Elrond eGold");
    B.CoinNames_lRs = new A.CoinNames("Ethereum Classic");
    B.CoinNames_oQV = new A.CoinNames("Pi Network");
    B.CoinNames_tzl = new A.CoinNames("Harmony One");
    B.CoinNames_uYt = new A.CoinNames("Bitcoin Cash SLP TestNet");
    B.CoinNames_vl8 = new A.CoinNames("Secret Network");
    B.CoinNames_wNy = new A.CoinNames("Dash TestNet");
    B.CoingeckoCoin_35V = new A.CoingeckoCoin("cosmos", "cosmos-hub", null);
    B.CoingeckoCoin_7Um = new A.CoingeckoCoin("cacao", "maya-protocol", null);
    B.CoingeckoCoin_Me9 = new A.CoingeckoCoin("the-open-network", "toncoin", null);
    B.CoingeckoCoin_Ni5 = new A.CoingeckoCoin("avalanche-2", "avalanche", null);
    B.CoingeckoCoin_Src = new A.CoingeckoCoin("bitcoin-cash", "bitcoin-cash", null);
    B.CoingeckoCoin_acala_acala_ACA = new A.CoingeckoCoin("acala", "acala", "ACA");
    B.CoingeckoCoin_aptos_aptos_APT = new A.CoingeckoCoin("aptos", "aptos", "APT");
    B.CoingeckoCoin_arbitrum_arbitrum_null = new A.CoingeckoCoin("arbitrum", "arbitrum", null);
    B.CoingeckoCoin_astar_astar_ASTR = new A.CoingeckoCoin("astar", "astar", "ASTR");
    B.CoingeckoCoin_binancecoin_bnb_null = new A.CoingeckoCoin("binancecoin", "bnb", null);
    B.CoingeckoCoin_bitcoin_bitcoin_null = new A.CoingeckoCoin("bitcoin", "bitcoin", null);
    B.CoingeckoCoin_cardano_cardano_null = new A.CoingeckoCoin("cardano", "cardano", null);
    B.CoingeckoCoin_centrifuge_centrifuge_CFG = new A.CoingeckoCoin("centrifuge", "centrifuge", "CFG");
    B.CoingeckoCoin_dash_dash_null = new A.CoingeckoCoin("dash", "dash", null);
    B.CoingeckoCoin_dogecoin_dogecoin_null = new A.CoingeckoCoin("dogecoin", "dogecoin", null);
    B.CoingeckoCoin_ethereum_ethereum_null = new A.CoingeckoCoin("ethereum", "ethereum", null);
    B.CoingeckoCoin_kujira_kujira_null = new A.CoingeckoCoin("kujira", "kujira", null);
    B.CoingeckoCoin_kusama_kusama_KSM = new A.CoingeckoCoin("kusama", "kusama", "KSM");
    B.CoingeckoCoin_litecoin_litecoin_null = new A.CoingeckoCoin("litecoin", "litecoin", null);
    B.CoingeckoCoin_monero_monero_XMR = new A.CoingeckoCoin("monero", "monero", "XMR");
    B.CoingeckoCoin_moonbeam_moonbeam_GLMR = new A.CoingeckoCoin("moonbeam", "moonbeam", "GLMR");
    B.CoingeckoCoin_moonriver_moonriver_MOVR = new A.CoingeckoCoin("moonriver", "moonriver", "MOVR");
    B.CoingeckoCoin_oG2 = new A.CoingeckoCoin("pepecoin-network", "pepecoin-network", null);
    B.CoingeckoCoin_osmosis_osmosis_null = new A.CoingeckoCoin("osmosis", "osmosis", null);
    B.CoingeckoCoin_polkadot_polkadot_DOT = new A.CoingeckoCoin("polkadot", "polkadot", "DOT");
    B.CoingeckoCoin_qxy = new A.CoingeckoCoin("matic-network", "polygon", null);
    B.CoingeckoCoin_ripple_xrp_null = new A.CoingeckoCoin("ripple", "xrp", null);
    B.CoingeckoCoin_solana_solana_null = new A.CoingeckoCoin("solana", "solana", null);
    B.CoingeckoCoin_stellar_stellar_XLM = new A.CoingeckoCoin("stellar", "stellar", "XLM");
    B.CoingeckoCoin_sui_sui_SUI = new A.CoingeckoCoin("sui", "sui", "SUI");
    B.CoingeckoCoin_thorchain_thorchain_null = new A.CoingeckoCoin("thorchain", "thorchain", null);
    B.CoingeckoCoin_tron_tron_null = new A.CoingeckoCoin("tron", "tron", null);
    B.CoingeckoCoin_wKK = new A.CoingeckoCoin("bitcoin-cash-sv", "bitcoin-sv", null);
    B.ContentType_0_local = new A.ContentType(0, "local");
    B.ContentType_4_network = new A.ContentType(4, "network");
    B.ContentType_5_favIcon = new A.ContentType(5, "favIcon");
    B.CosmosKeysAlgs_secp256k1 = new A.CosmosKeysAlgs("secp256k1");
    B.CosmosNetworkTypes_0 = new A.CosmosNetworkTypes(0);
    B.CosmosNetworkTypes_1 = new A.CosmosNetworkTypes(1);
    B.CosmosNetworkTypes_2 = new A.CosmosNetworkTypes(2);
    B.CryptoException_1Xx = new A.CryptoException("blake2b: can't update because hash was finished.", null);
    B.CryptoException_3cw = new A.CryptoException("ChaCha: counter overflow", null);
    B.CryptoException_5Ft = new A.CryptoException("The public point has x or y out of range.", null);
    B.CryptoException_5YI = new A.CryptoException("ChaCha: key size must be 32 bytes", null);
    B.CryptoException_5rc = new A.CryptoException("AES: initialized with different key size", null);
    B.CryptoException_6hD = new A.CryptoException("AffinePointt does not lay on the curve", null);
    B.CryptoException_997 = new A.CryptoException("AffinePointt length doesn't match the curve.", null);
    B.CryptoException_Cmb = new A.CryptoException("ChaCha: destination is shorter than source", null);
    B.CryptoException_HYf = new A.CryptoException("blake2b: wrong digest length", null);
    B.CryptoException_Hdq = new A.CryptoException("Generator point order is bad.", null);
    B.CryptoException_PCa = new A.CryptoException("SHA512: can't update because hash was finished.", null);
    B.CryptoException_Pc3 = new A.CryptoException("invalid key length", null);
    B.CryptoException_RFf = new A.CryptoException("Malformed compressed point encoding", null);
    B.CryptoException_RbC = new A.CryptoException("Invalid RistrettoPoint", null);
    B.CryptoException_TXP = new A.CryptoException("CTR: counter overflow", null);
    B.CryptoException_Tbk = new A.CryptoException("Inconsistent hybrid point encoding", null);
    B.CryptoException_ULN = new A.CryptoException("CTR: iv length must be equal to cipher block size", null);
    B.CryptoException_UXg = new A.CryptoException("AES: invalid destination block size", null);
    B.CryptoException_VyX = new A.CryptoException("SHA256: can't update because hash was finished.", null);
    B.CryptoException_a53 = new A.CryptoException("ChaCha20Poly1305: incorrect nonce length", null);
    B.CryptoException_aEB = new A.CryptoException("Poly1305 was finished", null);
    B.CryptoException_efd = new A.CryptoException("SHA3: incorrect capacity", null);
    B.CryptoException_f8H = new A.CryptoException("AES: encryption key is not available", null);
    B.CryptoException_gl4 = new A.CryptoException("ChaCha nonce must be 8 or 12 bytes", null);
    B.CryptoException_hzd = new A.CryptoException("Generator point must have order.", null);
    B.CryptoException_k5E = new A.CryptoException("SHA3: squeezing before padAndPermute", null);
    B.CryptoException_lMb = new A.CryptoException("Size is too large!", null);
    B.CryptoException_nAM = new A.CryptoException("SHA3: can't update because hash was finished", null);
    B.CryptoException_oAd = new A.CryptoException("ChaCha20Poly1305 needs a 32-byte key", null);
    B.CryptoException_yTp = new A.CryptoException("AES: invalid source block size", null);
    B.DartBitcoinPluginException_Zyd = new A.DartBitcoinPluginException("Invalid Public key.", null);
    B.DartBitcoinPluginException_hzJ = new A.DartBitcoinPluginException("Invalid Bitcoin address program length (program length should be 32 or 20 bytes)", null);
    B.DartBitcoinPluginException_ovy = new A.DartBitcoinPluginException("network does not support p2wpkh HRP", null);
    B.DartBitcoinPluginException_sru = new A.DartBitcoinPluginException("DashNetwork network does not support P2WPKH/P2WSH", null);
    B.DartBitcoinPluginException_vXF = new A.DartBitcoinPluginException("DogecoinNetwork network does not support P2WPKH/P2WSH", null);
    B.DartStellarPlugingException_1si = new A.DartStellarPlugingException("Invalid address type. for secret key please use `StellarPrivateKey.fromBase32`", null);
    B.DartStellarPlugingException_eIz = new A.DartStellarPlugingException("Unknown address type.", null);
    B.List_76 = A._setArrayType(makeConstList([76]), type$.JSArray_int);
    B.List_204 = A._setArrayType(makeConstList([204]), type$.JSArray_int);
    B.CoinParams_4dj = new A.CoinParams(B.List_76, B.List_16, null, null, B.List_204, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_eUT = new A.CoinConf(B.CoinNames_Dash, B.CoinParams_4dj);
    B.DashNetwork_rwj = new A.DashNetwork(B.CoinConf_eUT, "dashMainnet", "dash:mainnet");
    B.List_30 = A._setArrayType(makeConstList([30]), type$.JSArray_int);
    B.CoinParams_XTz = new A.CoinParams(B.List_30, B.List_22, null, null, B.List_158, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_EIW = new A.CoinConf(B.CoinNames_Dogecoin, B.CoinParams_XTz);
    B.DogecoinNetwork_g3g = new A.DogecoinNetwork(B.CoinConf_EIW, "dogeMainnet", "dogecoin:mainnet");
    B.List_113 = A._setArrayType(makeConstList([113]), type$.JSArray_int);
    B.List_241 = A._setArrayType(makeConstList([241]), type$.JSArray_int);
    B.CoinParams_Zir = new A.CoinParams(B.List_113, B.List_196, null, null, B.List_241, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_DqC = new A.CoinConf(B.CoinNames_ZAX, B.CoinParams_Zir);
    B.DogecoinNetwork_htF = new A.DogecoinNetwork(B.CoinConf_DqC, "dogeTestnet", "dogecoin:testnet");
    B.Duration_0 = new A.Duration(0);
    B.Duration_10000000 = new A.Duration(10000000);
    B.List_55 = A._setArrayType(makeConstList([55]), type$.JSArray_int);
    B.List_137 = A._setArrayType(makeConstList([137]), type$.JSArray_int);
    B.List_162 = A._setArrayType(makeConstList([162]), type$.JSArray_int);
    B.CoinParams_zAj = new A.CoinParams(B.List_55, B.List_137, "ep", null, B.List_162, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_UUz = new A.CoinConf(B.CoinNames_JXy, B.CoinParams_zAj);
    B.SegwitAddressType_P2WPKH = new A.SegwitAddressType("P2WPKH");
    B.SegwitAddressType_P2WSH = new A.SegwitAddressType("P2WSH");
    B.P2shAddressType_YXg = new A.P2shAddressType(20, "P2SH/P2WSH");
    B.P2shAddressType_UPK = new A.P2shAddressType(20, "P2SH/P2WPKH");
    B.List_DXH = A._setArrayType(makeConstList([B.P2pkhAddressType_P2PKH, B.SegwitAddressType_P2WPKH, B.PubKeyAddressType_P2PK, B.SegwitAddressType_P2WSH, B.P2shAddressType_YXg, B.P2shAddressType_UPK, B.P2shAddressType_apR, B.P2shAddressType_vvf]), type$.JSArray_BitcoinAddressType);
    B.ElectraProtocolNetwork_Ni4 = new A.ElectraProtocolNetwork(B.CoinConf_UUz, "electraProtocolMainnet", "electra:mainnet");
    B.EllipticCurveTypes_0 = new A.EllipticCurveTypes("ed25519");
    B.EllipticCurveTypes_1 = new A.EllipticCurveTypes("ed25519Blake2b");
    B.EllipticCurveTypes_2 = new A.EllipticCurveTypes("ed25519Kholaw");
    B.EllipticCurveTypes_3 = new A.EllipticCurveTypes("ed25519Monero");
    B.EllipticCurveTypes_4 = new A.EllipticCurveTypes("nist256p1");
    B.EllipticCurveTypes_5 = new A.EllipticCurveTypes("nist256p1Hybrid");
    B.EllipticCurveTypes_6 = new A.EllipticCurveTypes("secp256k1");
    B.EllipticCurveTypes_7 = new A.EllipticCurveTypes("sr25519");
    B.EncodeType_0 = new A.EncodeType("comprossed");
    B.EncodeType_1 = new A.EncodeType("hybrid");
    B.EncodeType_2 = new A.EncodeType("raw");
    B.EncodeType_3 = new A.EncodeType("uncompressed");
    B.ErgoNetworkTypes_0 = new A.ErgoNetworkTypes(0);
    B.ErgoNetworkTypes_16 = new A.ErgoNetworkTypes(16);
    B.FloatLength_11_52 = new A.FloatLength(11, 52);
    B.FloatLength_5_10 = new A.FloatLength(5, 10);
    B.FloatLength_8_23 = new A.FloatLength(8, 23);
    B.FriendlyAddressFlags_128 = new A.FriendlyAddressFlags(128);
    B.FriendlyAddressFlags_17 = new A.FriendlyAddressFlags(17);
    B.FriendlyAddressFlags_81 = new A.FriendlyAddressFlags(81);
    B.IndexDbStorageMode_0 = new A.IndexDbStorageMode("readwrite");
    B.IndexDbStorageMode_1 = new A.IndexDbStorageMode("readonly");
    B.JacobiError_rAF = new A.JacobiError("n must be larger than 2.", null);
    B.JacobiError_uQy = new A.JacobiError("n must be odd.", null);
    B.JsonEncoder_null_null = new A.JsonEncoder(null, null);
    B.List_04A = A._setArrayType(makeConstList([82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125]), type$.JSArray_int);
    B.List_0_10_200_0 = A._setArrayType(makeConstList([0, 10, 200, 0]), type$.JSArray_int);
    B.List_1 = A._setArrayType(makeConstList([1]), type$.JSArray_int);
    B.List_100_14 = A._setArrayType(makeConstList([100, 14]), type$.JSArray_int);
    B.List_100_15 = A._setArrayType(makeConstList([100, 15]), type$.JSArray_int);
    B.List_110 = A._setArrayType(makeConstList([110]), type$.JSArray_int);
    B.List_110_1 = A._setArrayType(makeConstList([110, 1]), type$.JSArray_int);
    B.List_140 = A._setArrayType(makeConstList([140]), type$.JSArray_int);
    B.List_141 = A._setArrayType(makeConstList([141]), type$.JSArray_int);
    B.List_151_1 = A._setArrayType(makeConstList([151, 1]), type$.JSArray_int);
    B.List_161_0_0 = A._setArrayType(makeConstList([161, 0, 0]), type$.JSArray_int);
    B.List_161_0_1 = A._setArrayType(makeConstList([161, 0, 1]), type$.JSArray_int);
    B.List_161_0_2 = A._setArrayType(makeConstList([161, 0, 2]), type$.JSArray_int);
    B.List_161_0_3 = A._setArrayType(makeConstList([161, 0, 3]), type$.JSArray_int);
    B.List_161_0_4 = A._setArrayType(makeConstList([161, 0, 4]), type$.JSArray_int);
    B.List_161_0_5 = A._setArrayType(makeConstList([161, 0, 5]), type$.JSArray_int);
    B.List_161_0_6 = A._setArrayType(makeConstList([161, 0, 6]), type$.JSArray_int);
    B.List_161_1_1 = A._setArrayType(makeConstList([161, 1, 1]), type$.JSArray_int);
    B.List_161_2_1 = A._setArrayType(makeConstList([161, 2, 1]), type$.JSArray_int);
    B.List_161_2_2 = A._setArrayType(makeConstList([161, 2, 2]), type$.JSArray_int);
    B.List_161_2_3 = A._setArrayType(makeConstList([161, 2, 3]), type$.JSArray_int);
    B.List_161_2_4 = A._setArrayType(makeConstList([161, 2, 4]), type$.JSArray_int);
    B.List_161_2_5 = A._setArrayType(makeConstList([161, 2, 5]), type$.JSArray_int);
    B.List_161_2_6 = A._setArrayType(makeConstList([161, 2, 6]), type$.JSArray_int);
    B.List_161_2_7 = A._setArrayType(makeConstList([161, 2, 7]), type$.JSArray_int);
    B.List_161_2_8 = A._setArrayType(makeConstList([161, 2, 8]), type$.JSArray_int);
    B.List_161_2_9 = A._setArrayType(makeConstList([161, 2, 9]), type$.JSArray_int);
    B.List_176 = A._setArrayType(makeConstList([176]), type$.JSArray_int);
    B.SuiChainType_0_devnet = new A.SuiChainType(0, "devnet");
    B.SuiChainType_1_testnet = new A.SuiChainType(1, "testnet");
    B.SuiChainType_2_mainnet = new A.SuiChainType(2, "mainnet");
    B.List_1rA = A._setArrayType(makeConstList([B.SuiChainType_0_devnet, B.SuiChainType_1_testnet, B.SuiChainType_2_mainnet]), A.findType("JSArray<SuiChainType>"));
    B.List_2 = A._setArrayType(makeConstList([2]), type$.JSArray_int);
    B.List_200 = A._setArrayType(makeConstList([200]), type$.JSArray_int);
    B.List_23 = A._setArrayType(makeConstList([23]), type$.JSArray_int);
    B.List_237 = A._setArrayType(makeConstList([237]), type$.JSArray_int);
    B.List_258 = A._setArrayType(makeConstList([258]), type$.JSArray_int);
    B.List_28_184 = A._setArrayType(makeConstList([28, 184]), type$.JSArray_int);
    B.List_28_186 = A._setArrayType(makeConstList([28, 186]), type$.JSArray_int);
    B.List_28_189 = A._setArrayType(makeConstList([28, 189]), type$.JSArray_int);
    B.List_29_37 = A._setArrayType(makeConstList([29, 37]), type$.JSArray_int);
    B.List_3 = A._setArrayType(makeConstList([3]), type$.JSArray_int);
    B.List_32 = A._setArrayType(makeConstList([32]), type$.JSArray_int);
    B.List_35 = A._setArrayType(makeConstList([35]), type$.JSArray_int);
    B.List_4 = A._setArrayType(makeConstList([4]), type$.JSArray_int);
    B.List_46_47 = A._setArrayType(makeConstList([46, 47]), type$.JSArray_int);
    B.List_48 = A._setArrayType(makeConstList([48]), type$.JSArray_int);
    B.StellarChainType_1_testnet = new A.StellarChainType(1, "testnet");
    B.StellarChainType_2_mainnet = new A.StellarChainType(2, "mainnet");
    B.List_4NC = A._setArrayType(makeConstList([B.StellarChainType_1_testnet, B.StellarChainType_2_mainnet]), A.findType("JSArray<StellarChainType>"));
    B.List_4_147 = A._setArrayType(makeConstList([4, 147]), type$.JSArray_int);
    B.List_50 = A._setArrayType(makeConstList([50]), type$.JSArray_int);
    B.List_50_1 = A._setArrayType(makeConstList([50, 1]), type$.JSArray_int);
    B.List_50_7 = A._setArrayType(makeConstList([50, 7]), type$.JSArray_int);
    B.List_58 = A._setArrayType(makeConstList([58]), type$.JSArray_int);
    B.List_5_68 = A._setArrayType(makeConstList([5, 68]), type$.JSArray_int);
    B.List_5cT = A._setArrayType(makeConstList(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]), type$.JSArray_String);
    B.List_5lr = A._setArrayType(makeConstList([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]), type$.JSArray_int);
    B.List_60 = A._setArrayType(makeConstList([60]), type$.JSArray_int);
    B.List_60_1 = A._setArrayType(makeConstList([60, 1]), type$.JSArray_int);
    B.List_60_12 = A._setArrayType(makeConstList([60, 12]), type$.JSArray_int);
    B.List_65 = A._setArrayType(makeConstList([65]), type$.JSArray_int);
    B.List_80_0_1 = A._setArrayType(makeConstList([80, 0, 1]), type$.JSArray_int);
    B.List_80_0_10 = A._setArrayType(makeConstList([80, 0, 10]), type$.JSArray_int);
    B.List_80_0_11 = A._setArrayType(makeConstList([80, 0, 11]), type$.JSArray_int);
    B.List_80_0_12 = A._setArrayType(makeConstList([80, 0, 12]), type$.JSArray_int);
    B.List_80_0_14 = A._setArrayType(makeConstList([80, 0, 14]), type$.JSArray_int);
    B.List_80_0_15 = A._setArrayType(makeConstList([80, 0, 15]), type$.JSArray_int);
    B.List_80_0_16 = A._setArrayType(makeConstList([80, 0, 16]), type$.JSArray_int);
    B.List_80_0_17 = A._setArrayType(makeConstList([80, 0, 17]), type$.JSArray_int);
    B.List_80_0_2 = A._setArrayType(makeConstList([80, 0, 2]), type$.JSArray_int);
    B.List_80_0_3 = A._setArrayType(makeConstList([80, 0, 3]), type$.JSArray_int);
    B.List_80_0_4 = A._setArrayType(makeConstList([80, 0, 4]), type$.JSArray_int);
    B.List_80_0_5 = A._setArrayType(makeConstList([80, 0, 5]), type$.JSArray_int);
    B.List_80_0_6 = A._setArrayType(makeConstList([80, 0, 6]), type$.JSArray_int);
    B.List_80_0_7 = A._setArrayType(makeConstList([80, 0, 7]), type$.JSArray_int);
    B.List_80_1_1 = A._setArrayType(makeConstList([80, 1, 1]), type$.JSArray_int);
    B.List_80_1_10 = A._setArrayType(makeConstList([80, 1, 10]), type$.JSArray_int);
    B.List_80_1_11 = A._setArrayType(makeConstList([80, 1, 11]), type$.JSArray_int);
    B.List_80_1_12 = A._setArrayType(makeConstList([80, 1, 12]), type$.JSArray_int);
    B.List_80_1_13 = A._setArrayType(makeConstList([80, 1, 13]), type$.JSArray_int);
    B.List_80_1_2 = A._setArrayType(makeConstList([80, 1, 2]), type$.JSArray_int);
    B.List_80_1_3 = A._setArrayType(makeConstList([80, 1, 3]), type$.JSArray_int);
    B.List_80_1_4 = A._setArrayType(makeConstList([80, 1, 4]), type$.JSArray_int);
    B.List_80_1_5 = A._setArrayType(makeConstList([80, 1, 5]), type$.JSArray_int);
    B.List_80_1_6 = A._setArrayType(makeConstList([80, 1, 6]), type$.JSArray_int);
    B.List_80_1_7 = A._setArrayType(makeConstList([80, 1, 7]), type$.JSArray_int);
    B.List_80_1_8 = A._setArrayType(makeConstList([80, 1, 8]), type$.JSArray_int);
    B.List_80_1_9 = A._setArrayType(makeConstList([80, 1, 9]), type$.JSArray_int);
    B.List_8U7 = A._setArrayType(makeConstList([B.BipProposal_bip44, B.BipProposal_bip49, B.BipProposal_bip84, B.BipProposal_bip86]), A.findType("JSArray<BipProposal>"));
    B.List_8ft = A._setArrayType(makeConstList([256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 256, 256, 256, 256, 256, 256, 256, 10, 11, 12, 13, 14, 15, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 10, 11, 12, 13, 14, 15, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256]), type$.JSArray_int);
    B.List_90_0 = A._setArrayType(makeConstList([90, 0]), type$.JSArray_int);
    B.List_90_10 = A._setArrayType(makeConstList([90, 10]), type$.JSArray_int);
    B.List_90_11 = A._setArrayType(makeConstList([90, 11]), type$.JSArray_int);
    B.List_90_12 = A._setArrayType(makeConstList([90, 12]), type$.JSArray_int);
    B.List_90_13 = A._setArrayType(makeConstList([90, 13]), type$.JSArray_int);
    B.List_90_14 = A._setArrayType(makeConstList([90, 14]), type$.JSArray_int);
    B.List_90_2 = A._setArrayType(makeConstList([90, 2]), type$.JSArray_int);
    B.List_90_3 = A._setArrayType(makeConstList([90, 3]), type$.JSArray_int);
    B.List_90_4 = A._setArrayType(makeConstList([90, 4]), type$.JSArray_int);
    B.List_90_5 = A._setArrayType(makeConstList([90, 5]), type$.JSArray_int);
    B.List_90_6 = A._setArrayType(makeConstList([90, 6]), type$.JSArray_int);
    B.List_90_7 = A._setArrayType(makeConstList([90, 7]), type$.JSArray_int);
    B.List_90_8 = A._setArrayType(makeConstList([90, 8]), type$.JSArray_int);
    B.List_90_9 = A._setArrayType(makeConstList([90, 9]), type$.JSArray_int);
    B.NetworkType_yCL = new A.NetworkType("Bitcoin", B.List_80_0_1, 0, 0);
    B.NetworkType_ibN = new A.NetworkType("BitcoinCash", B.List_80_0_10, 0, 1);
    B.NetworkType_v4g = new A.NetworkType("XRPL", B.List_80_0_2, 30, 2);
    B.NetworkType_ccB = new A.NetworkType("Ethereum", B.List_80_0_3, 100, 3);
    B.NetworkType_EUu = new A.NetworkType("Tron", B.List_80_0_4, 1001, 4);
    B.NetworkType_Rlb = new A.NetworkType("Solana", B.List_80_0_5, 33, 5);
    B.NetworkType_4By = new A.NetworkType("Cardano", B.List_80_0_6, 50, 6);
    B.NetworkType_zIX = new A.NetworkType("TON", B.List_80_0_11, 300, 8);
    B.NetworkType_kHF = new A.NetworkType("Cosmos", B.List_80_0_7, 200, 7);
    B.NetworkType_2OH = new A.NetworkType("Substrate", B.List_80_0_12, 400, 9);
    B.NetworkType_rCZ = new A.NetworkType("Stellar", B.List_80_0_14, 600, 10);
    B.NetworkType_NkQ = new A.NetworkType("Monero", B.List_80_0_15, 700, 11);
    B.NetworkType_8zS = new A.NetworkType("Aptos", B.List_80_0_16, 810, 12);
    B.NetworkType_cHa = new A.NetworkType("Sui", B.List_80_0_17, 800, 13);
    B.List_9gL = A._setArrayType(makeConstList([B.NetworkType_yCL, B.NetworkType_ibN, B.NetworkType_v4g, B.NetworkType_ccB, B.NetworkType_EUu, B.NetworkType_Rlb, B.NetworkType_4By, B.NetworkType_zIX, B.NetworkType_kHF, B.NetworkType_2OH, B.NetworkType_rCZ, B.NetworkType_NkQ, B.NetworkType_8zS, B.NetworkType_cHa]), type$.JSArray_NetworkType);
    B.List_9wx = A._setArrayType(makeConstList([B.AptosChainType_null_devnet, B.AptosChainType_2_testnet, B.AptosChainType_1_mainnet]), A.findType("JSArray<AptosChainType>"));
    B.List_9yH = A._setArrayType(makeConstList([B.BitcoinExplorerProviderType_SGC, B.BitcoinExplorerProviderType_cMs]), A.findType("JSArray<BitcoinExplorerProviderType>"));
    B.SolanaNetworkType_Z3x = new A.SolanaNetworkType("solana:mainnet", 0, "mainnet");
    B.SolanaNetworkType_Lxm = new A.SolanaNetworkType("solana:testnet", 1, "testnet");
    B.SolanaNetworkType_QDD = new A.SolanaNetworkType("solana:devnet", 2, "devnet");
    B.List_ALU = A._setArrayType(makeConstList([B.SolanaNetworkType_Z3x, B.SolanaNetworkType_Lxm, B.SolanaNetworkType_QDD]), A.findType("JSArray<SolanaNetworkType>"));
    B.SubstrateKeyAlgorithm_1_ecdsa = new A.SubstrateKeyAlgorithm(1, "ecdsa");
    B.SubstrateKeyAlgorithm_0_sr25519 = new A.SubstrateKeyAlgorithm(0, "sr25519");
    B.SubstrateKeyAlgorithm_2_ed25519 = new A.SubstrateKeyAlgorithm(2, "ed25519");
    B.List_ANg = A._setArrayType(makeConstList([B.SubstrateKeyAlgorithm_1_ecdsa, B.SubstrateKeyAlgorithm_0_sr25519, B.SubstrateKeyAlgorithm_2_ed25519]), type$.JSArray_SubstrateKeyAlgorithm);
    B.List_Cex = A._setArrayType(makeConstList([1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47]), type$.JSArray_int);
    B.WalletEventTypes_0 = new A.WalletEventTypes("message");
    B.WalletEventTypes_1 = new A.WalletEventTypes("exception");
    B.WalletEventTypes_2 = new A.WalletEventTypes("activation");
    B.WalletEventTypes_3 = new A.WalletEventTypes("tabId");
    B.WalletEventTypes_4 = new A.WalletEventTypes("ping");
    B.WalletEventTypes_5 = new A.WalletEventTypes("windowId");
    B.WalletEventTypes_6 = new A.WalletEventTypes("openExtension");
    B.WalletEventTypes_7 = new A.WalletEventTypes("background");
    B.WalletEventTypes_8 = new A.WalletEventTypes("close");
    B.List_Dpv = A._setArrayType(makeConstList([B.WalletEventTypes_0, B.WalletEventTypes_1, B.WalletEventTypes_2, B.WalletEventTypes_3, B.WalletEventTypes_4, B.WalletEventTypes_5, B.WalletEventTypes_6, B.WalletEventTypes_7, B.WalletEventTypes_8]), A.findType("JSArray<WalletEventTypes>"));
    B.XlmAddrTypes_48_PublicKey = new A.XlmAddrTypes(48, "PublicKey");
    B.XlmAddrTypes_144_SecretKey = new A.XlmAddrTypes(144, "SecretKey");
    B.XlmAddrTypes_16_Contract = new A.XlmAddrTypes(16, "Contract");
    B.XlmAddrTypes_96_Muxed = new A.XlmAddrTypes(96, "Muxed");
    B.List_FN2 = A._setArrayType(makeConstList([B.XlmAddrTypes_48_PublicKey, B.XlmAddrTypes_144_SecretKey, B.XlmAddrTypes_16_Contract, B.XlmAddrTypes_96_Muxed]), A.findType("JSArray<XlmAddrTypes>"));
    B.ServiceProtocol_SSL_1_ssl = new A.ServiceProtocol("SSL", 1, "ssl");
    B.ServiceProtocol_TCP_2_tcp = new A.ServiceProtocol("TCP", 2, "tcp");
    B.ServiceProtocol_WebSocket_3_websocket = new A.ServiceProtocol("WebSocket", 3, "websocket");
    B.List_G5k = A._setArrayType(makeConstList([B.ServiceProtocol_HTTP_0_http, B.ServiceProtocol_SSL_1_ssl, B.ServiceProtocol_TCP_2_tcp, B.ServiceProtocol_WebSocket_3_websocket]), A.findType("JSArray<ServiceProtocol>"));
    B.List_H5O = A._setArrayType(makeConstList([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]), type$.JSArray_dynamic);
    B.ContentType_1_extenal = new A.ContentType(1, "extenal");
    B.ContentType_2_hex = new A.ContentType(2, "hex");
    B.ContentType_3_base64 = new A.ContentType(3, "base64");
    B.ContentType_4_lazy = new A.ContentType(4, "lazy");
    B.List_HVn = A._setArrayType(makeConstList([B.ContentType_0_local, B.ContentType_1_extenal, B.ContentType_2_hex, B.ContentType_3_base64, B.ContentType_4_network, B.ContentType_4_lazy, B.ContentType_5_favIcon]), A.findType("JSArray<ContentType>"));
    B.List_Jb0 = A._setArrayType(makeConstList([B.AptosAPIProviderType_0_fullnode, B.AptosAPIProviderType_1_graphQl]), A.findType("JSArray<AptosAPIProviderType>"));
    B.List_Jr0 = A._setArrayType(makeConstList([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]), type$.JSArray_int);
    B.WalletLockTime_120_twoMinute = new A.WalletLockTime(120, "twoMinute");
    B.WalletLockTime_300_fiveMinute = new A.WalletLockTime(300, "fiveMinute");
    B.WalletLockTime_600_tenMinute = new A.WalletLockTime(600, "tenMinute");
    B.WalletLockTime_1800_thirtyMinute = new A.WalletLockTime(1800, "thirtyMinute");
    B.List_N4P = A._setArrayType(makeConstList([B.WalletLockTime_120_twoMinute, B.WalletLockTime_300_fiveMinute, B.WalletLockTime_600_tenMinute, B.WalletLockTime_1800_thirtyMinute]), A.findType("JSArray<WalletLockTime>"));
    B.List_34 = A._setArrayType(makeConstList([34]), type$.JSArray_int);
    B.CborBase64Types_List_34 = new A.CborBase64Types(B.List_34);
    B.List_33 = A._setArrayType(makeConstList([33]), type$.JSArray_int);
    B.CborBase64Types_List_33 = new A.CborBase64Types(B.List_33);
    B.List_21 = A._setArrayType(makeConstList([21]), type$.JSArray_int);
    B.CborBase64Types_List_21 = new A.CborBase64Types(B.List_21);
    B.CborBase64Types_List_22 = new A.CborBase64Types(B.List_22);
    B.CborBase64Types_List_23 = new A.CborBase64Types(B.List_23);
    B.List_Oij = A._setArrayType(makeConstList([B.CborBase64Types_List_34, B.CborBase64Types_List_33, B.CborBase64Types_List_21, B.CborBase64Types_List_22, B.CborBase64Types_List_23]), A.findType("JSArray<CborBase64Types>"));
    B.ProviderAuthType_List_50_6_query = new A.ProviderAuthType(B.List_50_6, "query");
    B.ProviderAuthType_List_50_7_digest = new A.ProviderAuthType(B.List_50_7, "digest");
    B.List_Pnc = A._setArrayType(makeConstList([B.ProviderAuthType_List_50_6_header, B.ProviderAuthType_List_50_6_query, B.ProviderAuthType_List_50_7_digest]), A.findType("JSArray<ProviderAuthType>"));
    B.List_QzW = A._setArrayType(makeConstList([B.ChainType_testnet, B.ChainType_mainnet]), A.findType("JSArray<ChainType>"));
    B.MoneroNetwork_Mainnet = new A.MoneroNetwork("Mainnet");
    B.MoneroNetwork_Testnet = new A.MoneroNetwork("Testnet");
    B.MoneroNetwork_Stagenet = new A.MoneroNetwork("Stagenet");
    B.List_SMS = A._setArrayType(makeConstList([B.MoneroNetwork_Mainnet, B.MoneroNetwork_Testnet, B.MoneroNetwork_Stagenet]), A.findType("JSArray<MoneroNetwork>"));
    B.List_TrJ = A._setArrayType(makeConstList([99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22]), type$.JSArray_int);
    B.CosmosNetworkTypes_3 = new A.CosmosNetworkTypes(3);
    B.List_Uht = A._setArrayType(makeConstList([B.CosmosNetworkTypes_0, B.CosmosNetworkTypes_1, B.CosmosNetworkTypes_2, B.CosmosNetworkTypes_3]), A.findType("JSArray<CosmosNetworkTypes>"));
    B.WalletEventTarget_0 = new A.WalletEventTarget("wallet");
    B.List_WalletEventTarget_0 = A._setArrayType(makeConstList([B.WalletEventTarget_0]), type$.JSArray_WalletEventTarget);
    B.List_Wl3 = A._setArrayType(makeConstList([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]), type$.JSArray_int);
    B.SeedTypes_Bip39_0_bip39 = new A.SeedTypes("Bip39", 0, "bip39");
    B.SeedTypes_Bip39Entropy_1_bip39Entropy = new A.SeedTypes("Bip39Entropy", 1, "bip39Entropy");
    B.SeedTypes_ByronLegacySeed_2_byronLegacySeed = new A.SeedTypes("ByronLegacySeed", 2, "byronLegacySeed");
    B.SeedTypes_icarus_3_icarus = new A.SeedTypes("icarus", 3, "icarus");
    B.List_YjN = A._setArrayType(makeConstList([B.SeedTypes_Bip39_0_bip39, B.SeedTypes_Bip39Entropy_1_bip39Entropy, B.SeedTypes_ByronLegacySeed_2_byronLegacySeed, B.SeedTypes_icarus_3_icarus]), A.findType("JSArray<SeedTypes>"));
    B.SubstrateCoins_acalaEd25519 = new A.SubstrateCoins("acalaEd25519");
    B.SubstrateCoins_acalaSecp256k1 = new A.SubstrateCoins("acalaSecp256k1");
    B.SubstrateCoins_acalaSr25519 = new A.SubstrateCoins("acalaSr25519");
    B.SubstrateCoins_bifrostEd25519 = new A.SubstrateCoins("bifrostEd25519");
    B.SubstrateCoins_bifrostSecp256k1 = new A.SubstrateCoins("bifrostSecp256k1");
    B.SubstrateCoins_bifrostSr25519 = new A.SubstrateCoins("bifrostSr25519");
    B.SubstrateCoins_chainxEd25519 = new A.SubstrateCoins("chainxEd25519");
    B.SubstrateCoins_chainxSecp256k1 = new A.SubstrateCoins("chainxSecp256k1");
    B.SubstrateCoins_chainxSr25519 = new A.SubstrateCoins("chainxSr25519");
    B.SubstrateCoins_edgewareEd25519 = new A.SubstrateCoins("edgewareEd25519");
    B.SubstrateCoins_edgewareSecp256k1 = new A.SubstrateCoins("edgewareSecp256k1");
    B.SubstrateCoins_edgewareSr25519 = new A.SubstrateCoins("edgewareSr25519");
    B.SubstrateCoins_genericEd25519 = new A.SubstrateCoins("genericEd25519");
    B.SubstrateCoins_genericSecp256k1 = new A.SubstrateCoins("genericSecp256k1");
    B.SubstrateCoins_genericSr25519 = new A.SubstrateCoins("genericSr25519");
    B.SubstrateCoins_karuraEd25519 = new A.SubstrateCoins("karuraEd25519");
    B.SubstrateCoins_karuraSecp256k1 = new A.SubstrateCoins("karuraSecp256k1");
    B.SubstrateCoins_karuraSr25519 = new A.SubstrateCoins("karuraSr25519");
    B.SubstrateCoins_kusamaEd25519 = new A.SubstrateCoins("kusamaEd25519");
    B.SubstrateCoins_kusamaSecp256k1 = new A.SubstrateCoins("kusamaSecp256k1");
    B.SubstrateCoins_kusamaSr25519 = new A.SubstrateCoins("kusamaSr25519");
    B.SubstrateCoins_moonbeamEd25519 = new A.SubstrateCoins("moonbeamEd25519");
    B.SubstrateCoins_moonbeamSecp256k1 = new A.SubstrateCoins("moonbeamSecp256k1");
    B.SubstrateCoins_moonbeamSr25519 = new A.SubstrateCoins("moonbeamSr25519");
    B.SubstrateCoins_moonriverEd25519 = new A.SubstrateCoins("moonriverEd25519");
    B.SubstrateCoins_moonriverSecp256k1 = new A.SubstrateCoins("moonriverSecp256k1");
    B.SubstrateCoins_moonriverSr25519 = new A.SubstrateCoins("moonriverSr25519");
    B.SubstrateCoins_phalaEd25519 = new A.SubstrateCoins("phalaEd25519");
    B.SubstrateCoins_phalaSecp256k1 = new A.SubstrateCoins("phalaSecp256k1");
    B.SubstrateCoins_phalaSr25519 = new A.SubstrateCoins("phalaSr25519");
    B.SubstrateCoins_plasmEd25519 = new A.SubstrateCoins("plasmEd25519");
    B.SubstrateCoins_plasmSecp256k1 = new A.SubstrateCoins("plasmSecp256k1");
    B.SubstrateCoins_plasmSr25519 = new A.SubstrateCoins("plasmSr25519");
    B.SubstrateCoins_polkadotEd25519 = new A.SubstrateCoins("polkadotEd25519");
    B.SubstrateCoins_polkadotSecp256k1 = new A.SubstrateCoins("polkadotSecp256k1");
    B.SubstrateCoins_polkadotSr25519 = new A.SubstrateCoins("polkadotSr25519");
    B.SubstrateCoins_soraEd25519 = new A.SubstrateCoins("soraEd25519");
    B.SubstrateCoins_soraSecp256k1 = new A.SubstrateCoins("soraSecp256k1");
    B.SubstrateCoins_soraSr25519 = new A.SubstrateCoins("soraSr25519");
    B.SubstrateCoins_stafiEd25519 = new A.SubstrateCoins("stafiEd25519");
    B.SubstrateCoins_stafiSecp256k1 = new A.SubstrateCoins("stafiSecp256k1");
    B.SubstrateCoins_stafiSr25519 = new A.SubstrateCoins("stafiSr25519");
    B.List_Zet = A._setArrayType(makeConstList([B.SubstrateCoins_acalaEd25519, B.SubstrateCoins_acalaSecp256k1, B.SubstrateCoins_acalaSr25519, B.SubstrateCoins_bifrostEd25519, B.SubstrateCoins_bifrostSecp256k1, B.SubstrateCoins_bifrostSr25519, B.SubstrateCoins_chainxEd25519, B.SubstrateCoins_chainxSecp256k1, B.SubstrateCoins_chainxSr25519, B.SubstrateCoins_edgewareEd25519, B.SubstrateCoins_edgewareSecp256k1, B.SubstrateCoins_edgewareSr25519, B.SubstrateCoins_genericEd25519, B.SubstrateCoins_genericSecp256k1, B.SubstrateCoins_genericSr25519, B.SubstrateCoins_karuraEd25519, B.SubstrateCoins_karuraSecp256k1, B.SubstrateCoins_karuraSr25519, B.SubstrateCoins_kusamaEd25519, B.SubstrateCoins_kusamaSecp256k1, B.SubstrateCoins_kusamaSr25519, B.SubstrateCoins_moonbeamEd25519, B.SubstrateCoins_moonbeamSecp256k1, B.SubstrateCoins_moonbeamSr25519, B.SubstrateCoins_moonriverEd25519, B.SubstrateCoins_moonriverSecp256k1, B.SubstrateCoins_moonriverSr25519, B.SubstrateCoins_phalaEd25519, B.SubstrateCoins_phalaSecp256k1, B.SubstrateCoins_phalaSr25519, B.SubstrateCoins_plasmEd25519, B.SubstrateCoins_plasmSecp256k1, B.SubstrateCoins_plasmSr25519, B.SubstrateCoins_polkadotEd25519, B.SubstrateCoins_polkadotSecp256k1, B.SubstrateCoins_polkadotSr25519, B.SubstrateCoins_soraEd25519, B.SubstrateCoins_soraSecp256k1, B.SubstrateCoins_soraSr25519, B.SubstrateCoins_stafiEd25519, B.SubstrateCoins_stafiSecp256k1, B.SubstrateCoins_stafiSr25519]), A.findType("JSArray<SubstrateCoins>"));
    B.List_200_199_0 = A._setArrayType(makeConstList([200, 199, 0]), type$.JSArray_int);
    B.TonAccountContextType_kI0 = new A.TonAccountContextType(B.List_200_199_0, "legacy");
    B.List_200_199_1 = A._setArrayType(makeConstList([200, 199, 1]), type$.JSArray_int);
    B.TonAccountContextType_iax = new A.TonAccountContextType(B.List_200_199_1, "subwallet");
    B.List_200_199_2 = A._setArrayType(makeConstList([200, 199, 2]), type$.JSArray_int);
    B.TonAccountContextType_Sw5 = new A.TonAccountContextType(B.List_200_199_2, "v5");
    B.List_200_199_3 = A._setArrayType(makeConstList([200, 199, 3]), type$.JSArray_int);
    B.TonAccountContextType_H4q = new A.TonAccountContextType(B.List_200_199_3, "v5SubWallet");
    B.List_dRa = A._setArrayType(makeConstList([B.TonAccountContextType_kI0, B.TonAccountContextType_iax, B.TonAccountContextType_Sw5, B.TonAccountContextType_H4q]), A.findType("JSArray<TonAccountContextType>"));
    B.SubstrateChainType_0_substrate = new A.SubstrateChainType(0, "substrate");
    B.SubstrateChainType_1_ethereum = new A.SubstrateChainType(1, "ethereum");
    B.List_doU = A._setArrayType(makeConstList([B.SubstrateChainType_0_substrate, B.SubstrateChainType_1_ethereum]), A.findType("JSArray<SubstrateChainType>"));
    B.List_eXZ = A._setArrayType(makeConstList([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]), type$.JSArray_int);
    B.List_empty10 = A._setArrayType(makeConstList([]), A.findType("JSArray<AptosAPIProvider>"));
    B.List_empty14 = A._setArrayType(makeConstList([]), type$.JSArray_List_BigInt);
    B.List_empty12 = A._setArrayType(makeConstList([]), A.findType("JSArray<MoneroAPIProvider>"));
    B.List_empty15 = A._setArrayType(makeConstList([]), type$.JSArray_Object);
    B.List_empty13 = A._setArrayType(makeConstList([]), A.findType("JSArray<StellarAPIProvider>"));
    B.List_empty11 = A._setArrayType(makeConstList([]), A.findType("JSArray<SuiAPIProvider>"));
    B.List_empty6 = A._setArrayType(makeConstList([]), A.findType("JSArray<Web3AptosChainAccount>"));
    B.List_empty9 = A._setArrayType(makeConstList([]), A.findType("JSArray<Web3BitcoinChainAccount>"));
    B.List_empty8 = A._setArrayType(makeConstList([]), A.findType("JSArray<Web3CosmosChainAccount>"));
    B.List_empty0 = A._setArrayType(makeConstList([]), A.findType("JSArray<Web3EthereumChainAccount>"));
    B.List_empty2 = A._setArrayType(makeConstList([]), A.findType("JSArray<Web3SolanaChainAccount>"));
    B.List_empty4 = A._setArrayType(makeConstList([]), A.findType("JSArray<Web3StellarChainAccount>"));
    B.List_empty5 = A._setArrayType(makeConstList([]), A.findType("JSArray<Web3SubstrateChainAccount>"));
    B.List_empty7 = A._setArrayType(makeConstList([]), A.findType("JSArray<Web3SuiChainAccount>"));
    B.List_empty3 = A._setArrayType(makeConstList([]), A.findType("JSArray<Web3TonChainAccount>"));
    B.List_empty1 = A._setArrayType(makeConstList([]), A.findType("JSArray<Web3TronChainAccount>"));
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_int);
    B.List_http_https = A._setArrayType(makeConstList(["http", "https"]), type$.JSArray_String);
    B.List_j2A = A._setArrayType(makeConstList([4089235720, 1779033703, 2227873595, 3144134277, 4271175723, 1013904242, 1595750129, 2773480762, 2917565137, 1359893119, 725511199, 2600822924, 4215389547, 528734635, 327033209, 1541459225]), type$.JSArray_dynamic);
    B.List_jiT = A._setArrayType(makeConstList([B.AddressDerivationType_List_200_81_bip32, B.AddressDerivationType_List_200_84_substrate, B.AddressDerivationType_List_200_83_multisig]), A.findType("JSArray<AddressDerivationType>"));
    B.CoinParams_9zp = new A.CoinParams(null, null, "ltc", null, B.List_176, null, null, null, null, B.List_48, null, null, B.List_50, null, B.List_0, B.List_5, null, null, null, null, null);
    B.CoinConf_LrC = new A.CoinConf(B.CoinNames_Litecoin, B.CoinParams_9zp);
    B.LitecoinNetwork_A6S = new A.LitecoinNetwork(B.CoinConf_LrC, "litecoinMainnet", "litecoin:mainnet");
    B.CoinParams_mYf = new A.CoinParams(null, null, "tltc", null, B.List_239, null, null, null, null, B.List_111, null, null, B.List_58, null, B.List_111, B.List_196, null, null, null, null, null);
    B.CoinConf_Q7b = new A.CoinConf(B.CoinNames_cIT, B.CoinParams_mYf);
    B.LitecoinNetwork_n3A = new A.LitecoinNetwork(B.CoinConf_Q7b, "litecoinTestnet", "litecoin:testnet");
    B.CoinParams_GfC = new A.CoinParams(B.List_140, B.List_19, null, null, B.List_239, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_cKE = new A.CoinConf(B.CoinNames_wNy, B.CoinParams_GfC);
    B.DashNetwork_92e = new A.DashNetwork(B.CoinConf_cKE, "dashTestnet", "dash:testnet");
    B.CoinParams_BuO = new A.CoinParams(B.List_111, B.List_196, null, null, B.List_239, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_ldd = new A.CoinConf(B.CoinNames_CQb, B.CoinParams_BuO);
    B.BitcoinSVNetwork_Qce = new A.BitcoinSVNetwork(B.CoinConf_ldd, "BitcoinSVTestnet", "bitcoinsv:testnet");
    B.CoinParams_5YS = new A.CoinParams(B.List_141, B.List_19, "te", null, B.List_239, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_xKc = new A.CoinConf(B.CoinNames_Tbu, B.CoinParams_5YS);
    B.ElectraProtocolNetwork_u6n = new A.ElectraProtocolNetwork(B.CoinConf_xKc, "electraProtocolTestnet", "electra:testnet");
    B.List_m5n = A._setArrayType(makeConstList([B.BitcoinNetwork_o5I, B.BitcoinNetwork_o9i, B.BitcoinNetwork_IWD, B.LitecoinNetwork_A6S, B.LitecoinNetwork_n3A, B.DashNetwork_rwj, B.DashNetwork_92e, B.DogecoinNetwork_g3g, B.DogecoinNetwork_htF, B.BitcoinCashNetwork_DE4, B.BitcoinCashNetwork_Ose, B.BitcoinSVNetwork_f7v, B.BitcoinSVNetwork_Qce, B.C_PepeNetwork, B.ElectraProtocolNetwork_Ni4, B.ElectraProtocolNetwork_u6n]), A.findType("JSArray<BasedUtxoNetwork>"));
    B.WalletVersion_v1R1_1 = new A.WalletVersion("v1R1", 1);
    B.WalletVersion_v1R2_1 = new A.WalletVersion("v1R2", 1);
    B.WalletVersion_v1R3_1 = new A.WalletVersion("v1R3", 1);
    B.WalletVersion_v2R1_2 = new A.WalletVersion("v2R1", 2);
    B.WalletVersion_v2R2_2 = new A.WalletVersion("v2R2", 2);
    B.WalletVersion_v3R1_3 = new A.WalletVersion("v3R1", 3);
    B.WalletVersion_v3R2_3 = new A.WalletVersion("v3R2", 3);
    B.WalletVersion_v4_4 = new A.WalletVersion("v4", 4);
    B.WalletVersion_v5R1_5 = new A.WalletVersion("v5R1", 5);
    B.List_nif = A._setArrayType(makeConstList([B.WalletVersion_v1R1_1, B.WalletVersion_v1R2_1, B.WalletVersion_v1R3_1, B.WalletVersion_v2R1_2, B.WalletVersion_v2R2_2, B.WalletVersion_v3R1_3, B.WalletVersion_v3R2_3, B.WalletVersion_v4_4, B.WalletVersion_v5R1_5]), A.findType("JSArray<WalletVersion>"));
    B.TonChain_0_m239 = new A.TonChain(0, -239);
    B.TonChain_m1_m3 = new A.TonChain(-1, -3);
    B.List_niy = A._setArrayType(makeConstList([B.TonChain_0_m239, B.TonChain_m1_m3]), A.findType("JSArray<TonChain>"));
    B.SubstrateKeyAlgorithm_3_ethereum = new A.SubstrateKeyAlgorithm(3, "ethereum");
    B.List_odx = A._setArrayType(makeConstList([B.SubstrateKeyAlgorithm_0_sr25519, B.SubstrateKeyAlgorithm_1_ecdsa, B.SubstrateKeyAlgorithm_2_ed25519, B.SubstrateKeyAlgorithm_3_ethereum]), type$.JSArray_SubstrateKeyAlgorithm);
    B.List_sWD = A._setArrayType(makeConstList([1, 32898, 32906, 2147516416, 32907, 2147483649, 2147516545, 32777, 138, 136, 2147516425, 2147483658, 2147516555, 139, 32905, 32771, 32770, 128, 32778, 2147483658, 2147516545, 32896, 2147483649, 2147516424]), type$.JSArray_dynamic);
    B.TronChainType_1001_728126428_mainnet = new A.TronChainType(1001, 728126428, "mainnet");
    B.TronChainType_1002_2494104990_shasta = new A.TronChainType(1002, 2494104990, "shasta");
    B.TronChainType_1003_3448148188_nile = new A.TronChainType(1003, 3448148188, "nile");
    B.List_ubO = A._setArrayType(makeConstList([B.TronChainType_1001_728126428_mainnet, B.TronChainType_1002_2494104990_shasta, B.TronChainType_1003_3448148188_nile]), A.findType("JSArray<TronChainType>"));
    B.List_unq = A._setArrayType(makeConstList([B.AppPlatform_0, B.AppPlatform_1, B.AppPlatform_2, B.AppPlatform_3, B.AppPlatform_4]), type$.JSArray_AppPlatform);
    B.List_vIy = A._setArrayType(makeConstList([B.NetworkType_ccB, B.NetworkType_EUu, B.NetworkType_Rlb, B.NetworkType_zIX, B.NetworkType_rCZ, B.NetworkType_2OH, B.NetworkType_8zS, B.NetworkType_cHa, B.NetworkType_kHF, B.NetworkType_yCL]), type$.JSArray_NetworkType);
    B.CosmosKeysAlgs_ethsecp256k1 = new A.CosmosKeysAlgs("ethsecp256k1");
    B.CosmosKeysAlgs_ed25519 = new A.CosmosKeysAlgs("ed25519");
    B.CosmosKeysAlgs_secp256r1 = new A.CosmosKeysAlgs("secp256r1");
    B.CosmosKeysAlgs_bn254 = new A.CosmosKeysAlgs("bn254");
    B.List_vTY = A._setArrayType(makeConstList([B.CosmosKeysAlgs_secp256k1, B.CosmosKeysAlgs_ethsecp256k1, B.CosmosKeysAlgs_ed25519, B.CosmosKeysAlgs_secp256r1, B.CosmosKeysAlgs_bn254]), type$.JSArray_CosmosKeysAlgs);
    B.TonApiType_mze = new A.TonApiType("Ton API");
    B.TonApiType_jAT = new A.TonApiType("Ton Center");
    B.List_vow = A._setArrayType(makeConstList([B.TonApiType_mze, B.TonApiType_jAT]), A.findType("JSArray<TonApiType>"));
    B.List_yCw = A._setArrayType(makeConstList([0, 0, 2147483648, 2147483648, 0, 0, 2147483648, 2147483648, 0, 0, 0, 0, 0, 2147483648, 2147483648, 2147483648, 2147483648, 2147483648, 0, 2147483648, 2147483648, 2147483648, 0, 2147483648]), type$.JSArray_dynamic);
    B.SegwitAddressType_P2TR = new A.SegwitAddressType("P2TR");
    B.List_zF4 = A._setArrayType(makeConstList([B.P2pkhAddressType_P2PKH, B.SegwitAddressType_P2WPKH, B.SegwitAddressType_P2TR, B.SegwitAddressType_P2WSH, B.P2shAddressType_YXg, B.P2shAddressType_UPK, B.P2shAddressType_apR, B.P2shAddressType_vvf, B.P2shAddressType_rEf, B.P2shAddressType_yON, B.P2shAddressType_mdM, B.P2shAddressType_Aj9, B.P2shAddressType_An7, B.P2shAddressType_xea, B.P2pkhAddressType_P2PKHWT]), type$.JSArray_BitcoinAddressType);
    B.WalletEventTarget_1 = new A.WalletEventTarget("background");
    B.WalletEventTarget_2 = new A.WalletEventTarget("external");
    B.List_zqX = A._setArrayType(makeConstList([B.WalletEventTarget_0, B.WalletEventTarget_1, B.WalletEventTarget_2]), type$.JSArray_WalletEventTarget);
    B.Base58Alphabets_1 = new A.Base58Alphabets("ripple");
    B.Map_0cXzp = new A.GeneralConstantMap([B.Base58Alphabets_0, "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz", B.Base58Alphabets_1, "rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz"], A.findType("GeneralConstantMap<Base58Alphabets,String>"));
    B.Map_G0e9e = new A.GeneralConstantMap([0, string$.x3000000, 1, "000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943", 5, "00000000da84f2bafbbc53dee25a72ae507ff4914b867c565be350b0da8bf043", 2, "12a765e31ffd4059bada1e25190f6e98c99d9714d334efa41a195a7e7e04bfe2", 7, "4966625a4b2851d9fdee139e56211a0d88575f59ed816ff5e6a63deb4e3e29a0", 3, "1a91e3dace36e2be3bf030a65679fe821aa1d6ef92e7c9902eb318182c355691", 8, "bb0a78264637406b6360aad926284d544d7049f45189db5664f3c4d07350559e", 9, string$.x3000000, 4, "00000ffd590b1485b3caadc19b22e6379c733355108f107a430458cdf3407ab6", 10, string$.x3000000, 11, "000000001dd410c49a788668ce26751718cc797474d3152a5fc073dd44fd9f7b", 12, "37981c0c48b8d48965376c8a42ece9a0838daadb93ff975cb091f57f8c2a5faa", 400, "91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3", 401, "68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f", 402, "dcf691b5a3fbe24adc99ddc959c0561b973e329b1aef4c4b22e7bb2ddecb4464", 450, "b0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe", 451, "e143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e", 452, "67f9723393ef76214df0118c34bbbd3dbebc8ed46a10973a8c969d48fe7598c9", 453, "48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a", 454, "00dcb981df86429de8bbacf9803401f09485366c44efbf53af9ecfab03adc7e5", 455, "0441383e31d1266a92b4cb2ddd4c2e3661ac476996db7e5844c52433b81fe782", 461, "91bc6e169807aaa54802737e1c504b2577d4fafedd5a02c10293b1cd60e39527", 462, "401a1f9dca3da46f5c4091016c8a2f26dcea05865116b286f60f668207d1474b", 460, "fe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d", 463, "9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6", 464, "b3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82", 465, "fc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c", 466, "e566d149729892a803c3c4b1e652f09445926234d956a0f166be4d4dea91f536", 1001, "00000000000000001ebf88508a03865c71d452e25f4d51194196a1d22b6653dc", 1002, "0000000000000000de1aa88295e1fcf982742f773e0419c5a9c134c994a9059e", 1003, "0000000000000000d698d4192c56cb6be724a558448e2684802de4d6cd8690dc", 700, "418015bb9ae982a1975da7d79277c2705727a56894ba0fb246adaabb1f4632e3", 701, "76ee3cc98646292206cd3e86f74d88b4dcc1d937088645e9b0cbca84b7ce74eb", 33, "5eykt4UsFv8P8NJdTREpY1vzqKqZKvdpKuc147dw2N9d", 34, "4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY", 35, "EtWTRABZaYq6iMfeYKouRu166VU2xqa1wcaWoxPkrZBG"], A.findType("GeneralConstantMap<int,String>"));
    B.Object_empty = {};
    B.Map_empty0 = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<NetworkType,Web3Chain<@,Chain<APIProvider,NetworkCoinParams<APIProvider>,@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,WalletNetwork<NetworkCoinParams<APIProvider>>,NetworkClient<ChainTransaction,APIProvider>,ChainStorageKey,ChainConfig<ChainStorageKey>,ChainTransaction,ContactCore<@>,NewAccountParams<ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>>>,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,Web3ChainAccount<@>,WalletNetwork<NetworkCoinParams<APIProvider>>>>"));
    B.Map_empty = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<String,@>"));
    B.Map_xI32l = new A.GeneralConstantMap([B.Bech32Encodings_0, 1, B.Bech32Encodings_1, 734539939], A.findType("GeneralConstantMap<Bech32Encodings,int>"));
    B.MessageException_5ZN = new A.MessageException("Invalid character in Base58 string", null);
    B.MoneroAPIProvider_8Wn = new A.MoneroAPIProvider("http://node.xmr.rocks:18089", "default-700A", B.ServiceProtocol_HTTP_0_http, null, true);
    B.MoneroAPIProvider_9gP = new A.MoneroAPIProvider("http://node.tools.rino.io:18081", "default-700", B.ServiceProtocol_HTTP_0_http, null, true);
    B.MoneroAPIProvider_WHc = new A.MoneroAPIProvider("http://singapore.node.xmr.pm:38081", "default-702", B.ServiceProtocol_HTTP_0_http, null, true);
    B.MoneroAPIProvider_X4J = new A.MoneroAPIProvider("https://stagenet.xmr.ditatompel.com", "default-703", B.ServiceProtocol_HTTP_0_http, null, true);
    B.MoneroAPIProvider_bcm = new A.MoneroAPIProvider("http://stagenet.tools.rino.io:38081", "default-701", B.ServiceProtocol_HTTP_0_http, null, true);
    B.MoneroCoins_moneroMainnet = new A.MoneroCoins("moneroMainnet");
    B.MoneroCoins_moneroStagenet = new A.MoneroCoins("moneroStagenet");
    B.MoneroCoins_moneroTestnet = new A.MoneroCoins("moneroTestnet");
    B.MoveArgumentType_address = new A.MoveArgumentType("address");
    B.SolanaAPIProvider_4N8 = new A.SolanaAPIProvider("https://api.mainnet-beta.solana.com", "default-34", B.ServiceProtocol_HTTP_0_http, null, true);
    B.SolanaAPIProvider_Vi4 = new A.SolanaAPIProvider("https://api.devnet.solana.com", "default-200", B.ServiceProtocol_HTTP_0_http, null, true);
    B.SolanaAPIProvider_g6Y = new A.SolanaAPIProvider("https://api.testnet.solana.com", "default-35", B.ServiceProtocol_HTTP_0_http, null, true);
    B.SquareRootError_hZ7 = new A.SquareRootError("No suitable 'b' found.", null);
    B.SquareRootError_j4B = new A.SquareRootError("p is not prime", null);
    B.StellarAPIProvider_Vpq = new A.StellarAPIProvider("https://horizon-testnet.stellar.org", "https://soroban-testnet.stellar.org", "default-601", B.ServiceProtocol_HTTP_0_http, null, true);
    B.StellarAPIProvider_mYi = new A.StellarAPIProvider("https://horizon.stellar.org", "https://soroban-rpc.mainnet.stellar.gateway.fm", "default-600", B.ServiceProtocol_HTTP_0_http, null, true);
    B.StringEncoding_1 = new A.StringEncoding("utf8");
    B.StringEncoding_2 = new A.StringEncoding("base64");
    B.StringEncoding_3 = new A.StringEncoding("base64UrlSafe");
    B.TonContractException_eUg = new A.TonContractException("Invalid workchain.", null);
    B.Tuple_false_false = new A.Tuple(false, false, type$.Tuple_bool_bool);
    B.Tuple_false_true = new A.Tuple(false, true, type$.Tuple_bool_bool);
    B.Tuple_true_true = new A.Tuple(true, true, type$.Tuple_bool_bool);
    B.Type_ByteBuffer_rqD = A.typeLiteral("ByteBuffer");
    B.Type_ByteData_9dB = A.typeLiteral("ByteData");
    B.Type_CborMapValue_DaJ = A.typeLiteral("CborMapValue<@,@>");
    B.Type_Float32List_9Kz = A.typeLiteral("Float32List");
    B.Type_Float64List_9Kz = A.typeLiteral("Float64List");
    B.Type_Int16List_s5h = A.typeLiteral("Int16List");
    B.Type_Int32List_O8Z = A.typeLiteral("Int32List");
    B.Type_Int8List_rFV = A.typeLiteral("Int8List");
    B.Type_JSObject_ttY = A.typeLiteral("JSObject");
    B.Type_Object_A4p = A.typeLiteral("Object");
    B.Type_Uint16List_kmP = A.typeLiteral("Uint16List");
    B.Type_Uint32List_kmP = A.typeLiteral("Uint32List");
    B.Type_Uint8ClampedList_04U = A.typeLiteral("Uint8ClampedList");
    B.Type_Uint8List_8Eb = A.typeLiteral("Uint8List");
    B.Utf8Decoder_false = new A.Utf8Decoder(false);
    B.WalletException_Fui = new A.WalletException("Invalid URL. The ServiceProtocol.fromURI function is designed to work exclusively with http and websocket URIs.", null);
    B.WalletException_PNe = new A.WalletException("No CosmosNetworkTypes element found for the given value.", null);
    B.WalletException_coin_not_found_null = new A.WalletException("coin_not_found", null);
    B.WalletException_data_verification_failed_null = new A.WalletException("data_verification_failed", null);
    B.WalletException_incomplete_wallet_setup_null = new A.WalletException("incomplete_wallet_setup", null);
    B.WalletException_incorrect_network_null = new A.WalletException("incorrect_network", null);
    B.WalletException_invalid_account_details_null = new A.WalletException("invalid_account_details", null);
    B.WalletException_invalid_coin_null = new A.WalletException("invalid_coin", null);
    B.WalletException_invalid_network_information_null = new A.WalletException("invalid_network_information", null);
    B.WalletException_invalid_provider_infomarion_null = new A.WalletException("invalid_provider_infomarion", null);
    B.WalletException_invalid_serialization_data_null = new A.WalletException("invalid_serialization_data", null);
    B.WalletException_invalid_token_information_null = new A.WalletException("invalid_token_information", null);
    B.WalletException_lCc = new A.WalletException("decoding cbor required object, bytes or hex. no value provided for decoding.", null);
    B.WalletException_network_does_not_exist_null = new A.WalletException("network_does_not_exist", null);
    B.WalletException_unsuported_feature_null = new A.WalletException("unsuported_feature", null);
    B.List_100_11 = A._setArrayType(makeConstList([100, 11]), type$.JSArray_int);
    B.Web3MessageTypes_List_100_11_chains = new A.Web3MessageTypes(B.List_100_11, "chains");
    B.Web3RequestException_8PI = new A.Web3RequestException("Invalid host: Ensure that the request comes from a valid host and try again.", -1, "WEB3-4020", null);
    B.Web3RequestException_RyO = new A.Web3RequestException("The specified network is invalid or does not exist.", -32000, "WALLET-4000", null);
    B.Web3RequestException_UFn = new A.Web3RequestException("Invalid method parameters. The specified Network does not exist.", -32600, "WEB3-5080", null);
    B.Web3RequestException_Wf5 = new A.Web3RequestException("Wallet not initialized.", -1, "WEB3-5020", null);
    B.Web3RequestException_ce8 = new A.Web3RequestException("An error occurred during the request", -32603, "WALLET-000", null);
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.toStringVisiting = A._setArrayType([], type$.JSArray_Object);
    $.Primitives__identityHashCodeProperty = null;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._Record__computedFieldKeys = A._setArrayType([], A.findType("JSArray<List<Object>?>"));
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._BigIntImpl__lastDividendDigits = null;
    $._BigIntImpl__lastDividendUsed = null;
    $._BigIntImpl__lastDivisorDigits = null;
    $._BigIntImpl__lastDivisorUsed = null;
    $._BigIntImpl____lastQuoRemDigits = A._Cell$named("_lastQuoRemDigits");
    $._BigIntImpl____lastQuoRemUsed = A._Cell$named("_lastQuoRemUsed");
    $._BigIntImpl____lastRemUsed = A._Cell$named("_lastRemUsed");
    $._BigIntImpl____lastRem_nsh = A._Cell$named("_lastRem_nsh");
    $._Base32Const__b32rev = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, A.findType("Map<String,int>"));
    $._sigma = function() {
      var t1 = type$.JSArray_int;
      return A._setArrayType([A._setArrayType([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], t1), A._setArrayType([28, 20, 8, 16, 18, 30, 26, 12, 2, 24, 0, 4, 22, 14, 10, 6], t1), A._setArrayType([22, 16, 24, 0, 10, 4, 30, 26, 20, 28, 6, 12, 14, 2, 18, 8], t1), A._setArrayType([14, 18, 6, 2, 26, 24, 22, 28, 4, 12, 10, 20, 8, 0, 30, 16], t1), A._setArrayType([18, 0, 10, 14, 4, 8, 20, 30, 28, 2, 22, 24, 12, 16, 6, 26], t1), A._setArrayType([4, 24, 12, 20, 0, 22, 16, 6, 8, 26, 14, 10, 30, 28, 2, 18], t1), A._setArrayType([24, 10, 2, 30, 28, 26, 8, 20, 0, 14, 12, 6, 18, 4, 16, 22], t1), A._setArrayType([26, 22, 14, 28, 24, 2, 6, 18, 10, 0, 30, 8, 16, 12, 4, 20], t1), A._setArrayType([12, 30, 28, 18, 22, 6, 0, 16, 24, 4, 26, 14, 2, 8, 20, 10], t1), A._setArrayType([20, 4, 16, 8, 14, 12, 2, 10, 30, 22, 18, 28, 6, 24, 26, 0], t1), A._setArrayType([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], t1), A._setArrayType([28, 20, 8, 16, 18, 30, 26, 12, 2, 24, 0, 4, 22, 14, 10, 6], t1)], A.findType("JSArray<List<int>>"));
    }();
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "_Utf8Decoder__reusableBuffer", "$get$_Utf8Decoder__reusableBuffer", () => A.NativeUint8List_NativeUint8List(4096));
    _lazyFinal($, "_Utf8Decoder__decoder", "$get$_Utf8Decoder__decoder", () => new A._Utf8Decoder__decoder_closure().call$0());
    _lazyFinal($, "_Utf8Decoder__decoderNonfatal", "$get$_Utf8Decoder__decoderNonfatal", () => new A._Utf8Decoder__decoderNonfatal_closure().call$0());
    _lazyFinal($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", () => A.NativeInt8List__create1(A._ensureNativeList(A._setArrayType([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], type$.JSArray_int))));
    _lazy($, "_Base64Decoder__emptyBuffer", "$get$_Base64Decoder__emptyBuffer", () => A.NativeUint8List_NativeUint8List(0));
    _lazyFinal($, "_dummyList", "$get$_dummyList", () => A.NativeUint16List_NativeUint16List(0));
    _lazyFinal($, "_BigIntImpl_zero", "$get$_BigIntImpl_zero", () => A._BigIntImpl__BigIntImpl$_fromInt(0));
    _lazyFinal($, "_BigIntImpl_one", "$get$_BigIntImpl_one", () => A._BigIntImpl__BigIntImpl$_fromInt(1));
    _lazyFinal($, "_BigIntImpl_two", "$get$_BigIntImpl_two", () => A._BigIntImpl__BigIntImpl$_fromInt(2));
    _lazyFinal($, "_BigIntImpl__minusOne", "$get$_BigIntImpl__minusOne", () => $.$get$_BigIntImpl_one().$negate(0));
    _lazyFinal($, "_BigIntImpl__bigInt10000", "$get$_BigIntImpl__bigInt10000", () => A._BigIntImpl__BigIntImpl$_fromInt(10000));
    _lazy($, "_BigIntImpl__parseRE", "$get$_BigIntImpl__parseRE", () => A.RegExp_RegExp("^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$", false));
    _lazyFinal($, "_BigIntImpl__bitsForFromDouble", "$get$_BigIntImpl__bitsForFromDouble", () => A.NativeUint8List_NativeUint8List(8));
    _lazyFinal($, "DateTime__parseFormat", "$get$DateTime__parseFormat", () => A.RegExp_RegExp("^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d+))?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$", true));
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_A4p));
    _lazyFinal($, "Random__secureRandom", "$get$Random__secureRandom", () => {
      var t1 = new A._JSSecureRandom(A.NativeByteData_NativeByteData(8));
      t1._JSSecureRandom$0();
      return t1;
    });
    _lazyFinal($, "_BchBech32Utils__mask5", "$get$_BchBech32Utils__mask5", () => A._BigIntImpl__BigIntImpl$from(31));
    _lazyFinal($, "TonAddressUtils__friendlyRegixAddress", "$get$TonAddressUtils__friendlyRegixAddress", () => A.RegExp_RegExp("[A-Za-z0-9+/_-]+", true));
    _lazyFinal($, "Bip32Const_mainNetKeyNetVersions", "$get$Bip32Const_mainNetKeyNetVersions", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 136, 178, 30], true, t1), A.List_List$from([4, 136, 173, 228], true, t1));
    });
    _lazyFinal($, "Bip32Const_testNetKeyNetVersions", "$get$Bip32Const_testNetKeyNetVersions", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 53, 135, 207], true, t1), A.List_List$from([4, 53, 131, 148], true, t1));
    });
    _lazy($, "Bip32Const_kholawKeyNetVersions", "$get$Bip32Const_kholawKeyNetVersions", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 136, 178, 30], true, t1), A.List_List$from([15, 67, 49, 212], true, t1));
    });
    _lazyFinal($, "Bip44Coins__coinToConf", "$get$Bip44Coins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Bip44Coins_akashNetwork, $.$get$Bip44Conf_akashNetwork(), B.Bip44Coins_algorand, $.$get$Bip44Conf_algorand(), B.Bip44Coins_aptos, $.$get$Bip44Conf_aptos(), B.Bip44Coins_aptosEd25519SingleKey, $.$get$Bip44Conf_aptosSingleKeyEd25519(), B.Bip44Coins_aptosSecp256k1SingleKey, $.$get$Bip44Conf_aptosSingleKeySecp256k1(), B.Bip44Coins_sui, $.$get$Bip44Conf_suiEd25519(), B.Bip44Coins_suiSecp256k1, $.$get$Bip44Conf_suiSecp256k1(), B.Bip44Coins_suiSecp256r1, $.$get$Bip44Conf_suiSecp256r1(), B.Bip44Coins_avaxCChain, $.$get$Bip44Conf_avaxCChain(), B.Bip44Coins_avaxPChain, $.$get$Bip44Conf_avaxPChain(), B.Bip44Coins_avaxXChain, $.$get$Bip44Conf_avaxXChain(), B.Bip44Coins_axelar, $.$get$Bip44Conf_axelar(), B.Bip44Coins_bandProtocol, $.$get$Bip44Conf_bandProtocol(), B.Bip44Coins_binanceChain, $.$get$Bip44Conf_binanceChain(), B.Bip44Coins_binanceSmartChain, $.$get$Bip44Conf_binanceSmartChain(), B.Bip44Coins_bitcoin, $.$get$Bip44Conf_bitcoinMainNet(), B.Bip44Coins_bitcoinTestnet, $.$get$Bip44Conf_bitcoinTestNet(), B.Bip44Coins_bitcoinCash, $.$get$Bip44Conf_bitcoinCashMainNet(), B.Bip44Coins_bitcoinCashTestnet, $.$get$Bip44Conf_bitcoinCashTestNet(), B.Bip44Coins_bitcoinCashSlp, $.$get$Bip44Conf_bitcoinCashSlpMainNet(), B.Bip44Coins_bitcoinCashSlpTestnet, $.$get$Bip44Conf_bitcoinCashSlpTestNet(), B.Bip44Coins_bitcoinSv, $.$get$Bip44Conf_bitcoinSvMainNet(), B.Bip44Coins_bitcoinSvTestnet, $.$get$Bip44Conf_bitcoinSvTestNet(), B.Bip44Coins_cardanoByronIcarus, $.$get$Bip44Conf_cardanoByronIcarus(), B.Bip44Coins_cardanoByronLedger, $.$get$Bip44Conf_cardanoByronLedger(), B.Bip44Coins_cardanoByronIcarusTestnet, $.$get$Bip44Conf_cardanoByronIcarusTestnet(), B.Bip44Coins_cardanoByronLedgerTestnet, $.$get$Bip44Conf_cardanoByronLedgerTestnet(), B.Bip44Coins_celo, $.$get$Bip44Conf_celo(), B.Bip44Coins_certik, $.$get$Bip44Conf_certik(), B.Bip44Coins_chihuahua, $.$get$Bip44Conf_chihuahua(), B.Bip44Coins_cosmos, $.$get$Bip44Conf_cosmos(), B.Bip44Coins_cosmosTestnet, $.$get$Bip44Conf_cosmosTestnet(), B.Bip44Coins_cosmosNist256p1, $.$get$Bip44Conf_cosmosNist256p1(), B.Bip44Coins_cosmosTestnetNist256p1, $.$get$Bip44Conf_cosmosTestnetNist256p1(), B.Bip44Coins_cosmosEd25519, $.$get$Bip44Conf_cosmosEd25519(), B.Bip44Coins_cosmosTestnetEd25519, $.$get$Bip44Conf_cosmosTestnetEd25519(), B.Bip44Coins_cosmosEthSecp256k1, $.$get$Bip44Conf_cosmosEthSecp256k1(), B.Bip44Coins_cosmosTestnetEthSecp256k1, $.$get$Bip44Conf_cosmosTestnetEthSecp256k1(), B.Bip44Coins_dash, $.$get$Bip44Conf_dashMainNet(), B.Bip44Coins_dashTestnet, $.$get$Bip44Conf_dashTestNet(), B.Bip44Coins_dogecoin, $.$get$Bip44Conf_dogecoinMainNet(), B.Bip44Coins_dogecoinTestnet, $.$get$Bip44Conf_dogecoinTestNet(), B.Bip44Coins_pepecoin, $.$get$Bip44Conf_pepeMainnet(), B.Bip44Coins_pepecoinTestnet, $.$get$Bip44Conf_pepeTestnet(), B.Bip44Coins_ecash, $.$get$Bip44Conf_ecashMainNet(), B.Bip44Coins_ecashTestnet, $.$get$Bip44Conf_ecashTestNet(), B.Bip44Coins_elrond, $.$get$Bip44Conf_elrond(), B.Bip44Coins_eos, $.$get$Bip44Conf_eos(), B.Bip44Coins_ergo, $.$get$Bip44Conf_ergoMainNet(), B.Bip44Coins_ergoTestnet, $.$get$Bip44Conf_ergoTestNet(), B.Bip44Coins_ethereum, $.$get$Bip44Conf_ethereum(), B.Bip44Coins_ethereumTestnet, $.$get$Bip44Conf_ethereumTestnet(), B.Bip44Coins_ethereumClassic, $.$get$Bip44Conf_ethereumClassic(), B.Bip44Coins_fantomOpera, $.$get$Bip44Conf_fantomOpera(), B.Bip44Coins_filecoin, $.$get$Bip44Conf_filecoin(), B.Bip44Coins_harmonyOneAtom, $.$get$Bip44Conf_harmonyOneAtom(), B.Bip44Coins_harmonyOneEth, $.$get$Bip44Conf_harmonyOneEth(), B.Bip44Coins_harmonyOneMetamask, $.$get$Bip44Conf_harmonyOneMetamask(), B.Bip44Coins_huobiChain, $.$get$Bip44Conf_huobiChain(), B.Bip44Coins_icon, $.$get$Bip44Conf_icon(), B.Bip44Coins_injective, $.$get$Bip44Conf_injective(), B.Bip44Coins_irisNet, $.$get$Bip44Conf_irisNet(), B.Bip44Coins_kava, $.$get$Bip44Conf_kava(), B.Bip44Coins_kusamaEd25519Slip, $.$get$Bip44Conf_kusamaEd25519Slip(), B.Bip44Coins_kusamaTestnetEd25519Slip, $.$get$Bip44Conf_kusamaTestnetEd25519Slip(), B.Bip44Coins_litecoin, $.$get$Bip44Conf_litecoinMainNet(), B.Bip44Coins_litecoinTestnet, $.$get$Bip44Conf_litecoinTestNet(), B.Bip44Coins_moneroEd25519Slip, $.$get$Bip44Conf_moneroEd25519Slip(), B.Bip44Coins_moneroSecp256k1, $.$get$Bip44Conf_moneroSecp256k1(), B.Bip44Coins_nano, $.$get$Bip44Conf_nano(), B.Bip44Coins_nearProtocol, $.$get$Bip44Conf_nearProtocol(), B.Bip44Coins_neo, $.$get$Bip44Conf_neo(), B.Bip44Coins_nineChroniclesGold, $.$get$Bip44Conf_nineChroniclesGold(), B.Bip44Coins_okexChainAtom, $.$get$Bip44Conf_okexChainAtom(), B.Bip44Coins_okexChainAtomOld, $.$get$Bip44Conf_okexChainAtomOld(), B.Bip44Coins_okexChainEth, $.$get$Bip44Conf_okexChainEth(), B.Bip44Coins_ontology, $.$get$Bip44Conf_ontology(), B.Bip44Coins_osmosis, $.$get$Bip44Conf_osmosis(), B.Bip44Coins_piNetwork, $.$get$Bip44Conf_piNetwork(), B.Bip44Coins_polkadotEd25519Slip, $.$get$Bip44Conf_polkadotEd25519Slip(), B.Bip44Coins_polkadotTestnetEd25519Slip, $.$get$Bip44Conf_polkadotTestnetEd25519Slip(), B.Bip44Coins_polygon, $.$get$Bip44Conf_polygon(), B.Bip44Coins_ripple, $.$get$Bip44Conf_ripple(), B.Bip44Coins_rippleTestnet, $.$get$Bip44Conf_rippleTestnet(), B.Bip44Coins_rippleED25519, $.$get$Bip44Conf_rippleEd25519(), B.Bip44Coins_rippleTestnetED25519, $.$get$Bip44Conf_rippleTestnetEd25519(), B.Bip44Coins_secretNetworkOld, $.$get$Bip44Conf_secretNetworkOld(), B.Bip44Coins_secretNetworkNew, $.$get$Bip44Conf_secretNetworkNew(), B.Bip44Coins_solana, $.$get$Bip44Conf_solana(), B.Bip44Coins_solanaTestnet, $.$get$Bip44Conf_solanaTestnet(), B.Bip44Coins_stellar, $.$get$Bip44Conf_stellar(), B.Bip44Coins_stellarTestnet, $.$get$Bip44Conf_stellarTestnet(), B.Bip44Coins_terra, $.$get$Bip44Conf_terra(), B.Bip44Coins_tezos, $.$get$Bip44Conf_tezos(), B.Bip44Coins_theta, $.$get$Bip44Conf_theta(), B.Bip44Coins_tron, $.$get$Bip44Conf_tron(), B.Bip44Coins_tronTestnet, $.$get$Bip44Conf_tronTestnet(), B.Bip44Coins_vechain, $.$get$Bip44Conf_vechain(), B.Bip44Coins_verge, $.$get$Bip44Conf_verge(), B.Bip44Coins_zcash, $.$get$Bip44Conf_zcashMainNet(), B.Bip44Coins_zcashTestnet, $.$get$Bip44Conf_zcashTestNet(), B.Bip44Coins_zilliqa, $.$get$Bip44Conf_zilliqa(), B.Bip44Coins_tonTestnet, $.$get$Bip44Conf_tonTestnet(), B.Bip44Coins_tonMainnet, $.$get$Bip44Conf_tonMainnet(), B.Bip44Coins_electraProtocol, $.$get$Bip44Conf_electraProtocolMainNet(), B.Bip44Coins_electraProtocolTestnet, $.$get$Bip44Conf_electraProtocolTestNet()], type$.Bip44Coins, type$.BipCoinConfig));
    _lazyFinal($, "Bip44Conf_bip44BtcKeyNetVerMain", "$get$Bip44Conf_bip44BtcKeyNetVerMain", () => $.$get$Bip32Const_mainNetKeyNetVersions());
    _lazyFinal($, "Bip44Conf_bip44BtcKeyNetVerTest", "$get$Bip44Conf_bip44BtcKeyNetVerTest", () => $.$get$Bip32Const_testNetKeyNetVersions());
    _lazyFinal($, "Bip44Conf_akashNetwork", "$get$Bip44Conf_akashNetwork", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "akash"], type$.String, type$.dynamic), new A.Bip44Conf_akashNetwork_closure(), B.ChainType_mainnet, 118, B.CoinNames_HRl, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_algorand", "$get$Bip44Conf_algorand", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_algorand_closure(), B.ChainType_mainnet, 283, B.CoinNames_Algorand, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_aptos", "$get$Bip44Conf_aptos", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_aptos_closure(), B.ChainType_mainnet, 637, B.CoinNames_Aptos, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_aptosSingleKeySecp256k1", "$get$Bip44Conf_aptosSingleKeySecp256k1", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_aptosSingleKeySecp256k1_closure(), B.ChainType_mainnet, 637, B.CoinNames_Aptos, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_aptosSingleKeyEd25519", "$get$Bip44Conf_aptosSingleKeyEd25519", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_aptosSingleKeyEd25519_closure(), B.ChainType_mainnet, 637, B.CoinNames_Aptos, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_avaxCChain", "$get$Bip44Conf_avaxCChain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_avaxCChain_closure(), B.ChainType_mainnet, 60, B.CoinNames_Kcg1, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_avaxPChain", "$get$Bip44Conf_avaxPChain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_avaxPChain_closure(), B.ChainType_mainnet, 9000, B.CoinNames_Kcg0, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_avaxXChain", "$get$Bip44Conf_avaxXChain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_avaxXChain_closure(), B.ChainType_mainnet, 9000, B.CoinNames_Kcg, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_axelar", "$get$Bip44Conf_axelar", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "axelar"], type$.String, type$.dynamic), new A.Bip44Conf_axelar_closure(), B.ChainType_mainnet, 118, B.CoinNames_Axelar, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_bandProtocol", "$get$Bip44Conf_bandProtocol", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "band"], type$.String, type$.dynamic), new A.Bip44Conf_bandProtocol_closure(), B.ChainType_mainnet, 494, B.CoinNames_UKI, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_binanceChain", "$get$Bip44Conf_binanceChain", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "bnb"], type$.String, type$.dynamic), new A.Bip44Conf_binanceChain_closure(), B.ChainType_mainnet, 714, B.CoinNames_Rp6, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_binanceSmartChain", "$get$Bip44Conf_binanceSmartChain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_binanceSmartChain_closure(), B.ChainType_mainnet, 60, B.CoinNames_MFR, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_bitcoinMainNet", "$get$Bip44Conf_bitcoinMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0], type$.String, type$.dynamic), new A.Bip44Conf_bitcoinMainNet_closure(), B.ChainType_mainnet, 0, B.CoinNames_Bitcoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_bitcoinTestNet", "$get$Bip44Conf_bitcoinTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_111], type$.String, type$.dynamic), new A.Bip44Conf_bitcoinTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_gL8, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_bitcoinCashMainNet", "$get$Bip44Conf_bitcoinCashMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "bitcoincash"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_bitcoinCashMainNet_closure(), B.ChainType_mainnet, 145, B.CoinNames_9E5, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_bitcoinCashTestNet", "$get$Bip44Conf_bitcoinCashTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "bchtest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_111], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_bitcoinCashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_1vL, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_bitcoinCashSlpMainNet", "$get$Bip44Conf_bitcoinCashSlpMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "simpleledger"], t2, type$.nullable_Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_bitcoinCashSlpMainNet_closure(), B.ChainType_mainnet, 145, B.CoinNames_R7N, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_bitcoinCashSlpTestNet", "$get$Bip44Conf_bitcoinCashSlpTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "slptest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_111], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_bitcoinCashSlpTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_uYt, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_bitcoinSvMainNet", "$get$Bip44Conf_bitcoinSvMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0], type$.String, type$.dynamic), new A.Bip44Conf_bitcoinSvMainNet_closure(), B.ChainType_mainnet, 236, B.CoinNames_BitcoinSV, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_bitcoinSvTestNet", "$get$Bip44Conf_bitcoinSvTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_111], type$.String, type$.dynamic), new A.Bip44Conf_bitcoinSvTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_CQb, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_cardanoByronIcarus", "$get$Bip44Conf_cardanoByronIcarus", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true, "is_icarus", true], type$.String, type$.dynamic), new A.Bip44Conf_cardanoByronIcarus_closure(), B.ChainType_mainnet, 1815, B.CoinNames_Cardano, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "Bip44Conf_cardanoByronLedger", "$get$Bip44Conf_cardanoByronLedger", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true], type$.String, type$.dynamic), new A.Bip44Conf_cardanoByronLedger_closure(), B.ChainType_mainnet, 1815, B.CoinNames_Cardano, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "Bip44Conf_cardanoByronIcarusTestnet", "$get$Bip44Conf_cardanoByronIcarusTestnet", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true, "is_icarus", true], type$.String, type$.dynamic), new A.Bip44Conf_cardanoByronIcarusTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Cardano, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "Bip44Conf_cardanoByronLedgerTestnet", "$get$Bip44Conf_cardanoByronLedgerTestnet", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true], type$.String, type$.dynamic), new A.Bip44Conf_cardanoByronLedgerTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Cardano, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "Bip44Conf_celo", "$get$Bip44Conf_celo", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_celo_closure(), B.ChainType_mainnet, 52752, B.CoinNames_Celo, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_certik", "$get$Bip44Conf_certik", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "certik"], type$.String, type$.dynamic), new A.Bip44Conf_certik_closure(), B.ChainType_mainnet, 118, B.CoinNames_Certik, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_chihuahua", "$get$Bip44Conf_chihuahua", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "chihuahua"], type$.String, type$.dynamic), new A.Bip44Conf_chihuahua_closure(), B.ChainType_mainnet, 118, B.CoinNames_Chihuahua, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_cosmos", "$get$Bip44Conf_cosmos", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmos_closure(), B.ChainType_mainnet, 118, B.CoinNames_Cosmos, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosTestnet", "$get$Bip44Conf_cosmosTestnet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Cosmos, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosEthSecp256k1", "$get$Bip44Conf_cosmosEthSecp256k1", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosEthSecp256k1_closure(), B.ChainType_mainnet, 118, B.CoinNames_Cosmos, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosTestnetEthSecp256k1", "$get$Bip44Conf_cosmosTestnetEthSecp256k1", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosTestnetEthSecp256k1_closure(), B.ChainType_testnet, 1, B.CoinNames_Cosmos, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosNist256p1", "$get$Bip44Conf_cosmosNist256p1", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosNist256p1_closure(), B.ChainType_mainnet, 118, B.CoinNames_Cosmos, "0'/0/0", t1, null, B.EllipticCurveTypes_4, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosTestnetNist256p1", "$get$Bip44Conf_cosmosTestnetNist256p1", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosTestnetNist256p1_closure(), B.ChainType_testnet, 1, B.CoinNames_Cosmos, "0'/0/0", t1, null, B.EllipticCurveTypes_4, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosEd25519", "$get$Bip44Conf_cosmosEd25519", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosEd25519_closure(), B.ChainType_mainnet, 118, B.CoinNames_Cosmos, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosTestnetEd25519", "$get$Bip44Conf_cosmosTestnetEd25519", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosTestnetEd25519_closure(), B.ChainType_testnet, 1, B.CoinNames_Cosmos, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_dashMainNet", "$get$Bip44Conf_dashMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_76], type$.String, type$.dynamic), new A.Bip44Conf_dashMainNet_closure(), B.ChainType_mainnet, 5, B.CoinNames_Dash, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_204);
    });
    _lazyFinal($, "Bip44Conf_dashTestNet", "$get$Bip44Conf_dashTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_140], type$.String, type$.dynamic), new A.Bip44Conf_dashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_wNy, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_dogecoinMainNet", "$get$Bip44Conf_dogecoinMainNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([2, 250, 202, 253], true, t1), A.List_List$from([2, 250, 195, 152], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_30], type$.String, type$.dynamic), new A.Bip44Conf_dogecoinMainNet_closure(), B.ChainType_mainnet, 3, B.CoinNames_Dogecoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_158);
    });
    _lazyFinal($, "Bip44Conf_dogecoinTestNet", "$get$Bip44Conf_dogecoinTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 50, 169, 168], true, t1), A.List_List$from([4, 50, 162, 67], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_113], type$.String, type$.dynamic), new A.Bip44Conf_dogecoinTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_ZAX, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_241);
    });
    _lazyFinal($, "Bip44Conf_pepeMainnet", "$get$Bip44Conf_pepeMainnet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([2, 250, 202, 253], true, t1), A.List_List$from([2, 250, 195, 152], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_56], type$.String, type$.dynamic), new A.Bip44Conf_pepeMainnet_closure(), B.ChainType_mainnet, 3434, B.CoinNames_Pepecoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_158);
    });
    _lazyFinal($, "Bip44Conf_pepeTestnet", "$get$Bip44Conf_pepeTestnet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 50, 169, 168], true, t1), A.List_List$from([4, 50, 162, 67], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_113], type$.String, type$.dynamic), new A.Bip44Conf_pepeTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Nk6, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_241);
    });
    _lazyFinal($, "Bip44Conf_ecashMainNet", "$get$Bip44Conf_ecashMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "ecash"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_ecashMainNet_closure(), B.ChainType_mainnet, 145, B.CoinNames_eCash, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_ecashTestNet", "$get$Bip44Conf_ecashTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "ectest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_111], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_ecashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_A7Y, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_elrond", "$get$Bip44Conf_elrond", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_elrond_closure(), B.ChainType_mainnet, 508, B.CoinNames_jrx, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_eos", "$get$Bip44Conf_eos", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_eos_closure(), B.ChainType_mainnet, 194, B.CoinNames_EOS, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_ergoMainNet", "$get$Bip44Conf_ergoMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_type", B.ErgoNetworkTypes_0], type$.String, type$.dynamic), new A.Bip44Conf_ergoMainNet_closure(), B.ChainType_mainnet, 429, B.CoinNames_Ergo, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_ergoTestNet", "$get$Bip44Conf_ergoTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_type", B.ErgoNetworkTypes_16], type$.String, type$.dynamic), new A.Bip44Conf_ergoTestNet_closure(), B.ChainType_testnet, 429, B.CoinNames_O05, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_ethereum", "$get$Bip44Conf_ethereum", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_ethereum_closure(), B.ChainType_mainnet, 60, B.CoinNames_Ethereum, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_ethereumTestnet", "$get$Bip44Conf_ethereumTestnet", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_ethereumTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Ethereum, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_ethereumClassic", "$get$Bip44Conf_ethereumClassic", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_ethereumClassic_closure(), B.ChainType_mainnet, 61, B.CoinNames_lRs, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_fantomOpera", "$get$Bip44Conf_fantomOpera", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_fantomOpera_closure(), B.ChainType_mainnet, 60, B.CoinNames_USx, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_filecoin", "$get$Bip44Conf_filecoin", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_filecoin_closure(), B.ChainType_mainnet, 461, B.CoinNames_Filecoin, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_harmonyOneMetamask", "$get$Bip44Conf_harmonyOneMetamask", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_harmonyOneMetamask_closure(), B.ChainType_mainnet, 60, B.CoinNames_tzl, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_harmonyOneEth", "$get$Bip44Conf_harmonyOneEth", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_harmonyOneEth_closure(), B.ChainType_mainnet, 1023, B.CoinNames_tzl, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_harmonyOneAtom", "$get$Bip44Conf_harmonyOneAtom", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_harmonyOneAtom_closure(), B.ChainType_mainnet, 1023, B.CoinNames_tzl, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_huobiChain", "$get$Bip44Conf_huobiChain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_huobiChain_closure(), B.ChainType_mainnet, 60, B.CoinNames_Eq2, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_icon", "$get$Bip44Conf_icon", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_icon_closure(), B.ChainType_mainnet, 74, B.CoinNames_Icon, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_injective", "$get$Bip44Conf_injective", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_injective_closure(), B.ChainType_mainnet, 60, B.CoinNames_Injective, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_irisNet", "$get$Bip44Conf_irisNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "iaa"], type$.String, type$.dynamic), new A.Bip44Conf_irisNet_closure(), B.ChainType_mainnet, 118, B.CoinNames_6I5, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_kava", "$get$Bip44Conf_kava", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "kava"], type$.String, type$.dynamic), new A.Bip44Conf_kava_closure(), B.ChainType_mainnet, 459, B.CoinNames_Kava, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_kusamaEd25519Slip", "$get$Bip44Conf_kusamaEd25519Slip", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ss58_format", 2], type$.String, type$.dynamic), new A.Bip44Conf_kusamaEd25519Slip_closure(), B.ChainType_mainnet, 434, B.CoinNames_Kusama, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_kusamaTestnetEd25519Slip", "$get$Bip44Conf_kusamaTestnetEd25519Slip", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ss58_format", 2], type$.String, type$.dynamic), new A.Bip44Conf_kusamaTestnetEd25519Slip_closure(), B.ChainType_mainnet, 1, B.CoinNames_Kusama, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_litecoinMainNet", "$get$Bip44Conf_litecoinMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain(),
        t2 = type$.int;
      t2 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([1, 157, 164, 98], true, t2), A.List_List$from([1, 157, 156, 254], true, t2));
      return A.BipLitecoinConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std_net_ver", B.List_48, "depr_net_ver", B.List_0], type$.String, type$.dynamic), new A.Bip44Conf_litecoinMainNet_closure(), t2, B.ChainType_mainnet, 2, B.CoinNames_Litecoin, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_176);
    });
    _lazyFinal($, "Bip44Conf_litecoinTestNet", "$get$Bip44Conf_litecoinTestNet", () => {
      var t1 = type$.int,
        t2 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 54, 246, 225], true, t1), A.List_List$from([4, 54, 239, 125], true, t1));
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 54, 246, 225], true, t1), A.List_List$from([4, 54, 239, 125], true, t1));
      return A.BipLitecoinConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std_net_ver", B.List_111, "depr_net_ver", B.List_111], type$.String, type$.dynamic), new A.Bip44Conf_litecoinTestNet_closure(), t1, B.ChainType_testnet, 1, B.CoinNames_cIT, "0'/0/0", t2, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_moneroEd25519Slip", "$get$Bip44Conf_moneroEd25519Slip", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_moneroEd25519Slip_closure(), B.ChainType_mainnet, 128, B.CoinNames_Monero, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_moneroSecp256k1", "$get$Bip44Conf_moneroSecp256k1", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_moneroSecp256k1_closure(), B.ChainType_mainnet, 128, B.CoinNames_Monero, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_nano", "$get$Bip44Conf_nano", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_nano_closure(), B.ChainType_mainnet, 165, B.CoinNames_Nano, "0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_1, null));
    _lazyFinal($, "Bip44Conf_nearProtocol", "$get$Bip44Conf_nearProtocol", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_nearProtocol_closure(), B.ChainType_mainnet, 397, B.CoinNames_jSo, "0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_neo", "$get$Bip44Conf_neo", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ver", B.List_23], type$.String, type$.dynamic), new A.Bip44Conf_neo_closure(), B.ChainType_mainnet, 888, B.CoinNames_NEO, "0'/0/0", t1, null, B.EllipticCurveTypes_4, null);
    });
    _lazyFinal($, "Bip44Conf_nineChroniclesGold", "$get$Bip44Conf_nineChroniclesGold", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_nineChroniclesGold_closure(), B.ChainType_mainnet, 567, B.CoinNames_NineChroniclesGold, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_okexChainEth", "$get$Bip44Conf_okexChainEth", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_okexChainEth_closure(), B.ChainType_mainnet, 60, B.CoinNames_OKExChain, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_okexChainAtom", "$get$Bip44Conf_okexChainAtom", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_okexChainAtom_closure(), B.ChainType_mainnet, 60, B.CoinNames_OKExChain, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_okexChainAtomOld", "$get$Bip44Conf_okexChainAtomOld", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_okexChainAtomOld_closure(), B.ChainType_mainnet, 996, B.CoinNames_OKExChain, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_ontology", "$get$Bip44Conf_ontology", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ver", B.List_23], type$.String, type$.dynamic), new A.Bip44Conf_ontology_closure(), B.ChainType_mainnet, 1024, B.CoinNames_Ontology, "0'/0/0", t1, null, B.EllipticCurveTypes_4, null);
    });
    _lazyFinal($, "Bip44Conf_osmosis", "$get$Bip44Conf_osmosis", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "osmo"], type$.String, type$.dynamic), new A.Bip44Conf_osmosis_closure(), B.ChainType_mainnet, 118, B.CoinNames_Osmosis, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_piNetwork", "$get$Bip44Conf_piNetwork", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["addr_type", B.XlmAddrTypes_48_PublicKey], type$.String, type$.dynamic), new A.Bip44Conf_piNetwork_closure(), B.ChainType_mainnet, 314159, B.CoinNames_oQV, "0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_polkadotEd25519Slip", "$get$Bip44Conf_polkadotEd25519Slip", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ss58_format", 0], type$.String, type$.dynamic), new A.Bip44Conf_polkadotEd25519Slip_closure(), B.ChainType_mainnet, 354, B.CoinNames_Polkadot, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_polkadotTestnetEd25519Slip", "$get$Bip44Conf_polkadotTestnetEd25519Slip", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ss58_format", 42], type$.String, type$.dynamic), new A.Bip44Conf_polkadotTestnetEd25519Slip_closure(), B.ChainType_testnet, 1, B.CoinNames_Polkadot, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_polygon", "$get$Bip44Conf_polygon", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_polygon_closure(), B.ChainType_mainnet, 60, B.CoinNames_Polygon, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_ripple", "$get$Bip44Conf_ripple", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["prefix", B.List_5_68], type$.String, type$.dynamic), new A.Bip44Conf_ripple_closure(), B.ChainType_mainnet, 144, B.CoinNames_Ripple, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_rippleTestnet", "$get$Bip44Conf_rippleTestnet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["prefix", B.List_4_147], type$.String, type$.dynamic), new A.Bip44Conf_rippleTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Ripple, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_rippleEd25519", "$get$Bip44Conf_rippleEd25519", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["prefix", B.List_5_68, "curve_type", B.EllipticCurveTypes_0], type$.String, type$.dynamic), new A.Bip44Conf_rippleEd25519_closure(), B.ChainType_mainnet, 144, B.CoinNames_Ripple, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_rippleTestnetEd25519", "$get$Bip44Conf_rippleTestnetEd25519", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["prefix", B.List_4_147, "curve_type", B.EllipticCurveTypes_0], type$.String, type$.dynamic), new A.Bip44Conf_rippleTestnetEd25519_closure(), B.ChainType_testnet, 1, B.CoinNames_Ripple, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_secretNetworkOld", "$get$Bip44Conf_secretNetworkOld", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "secret"], type$.String, type$.dynamic), new A.Bip44Conf_secretNetworkOld_closure(), B.ChainType_mainnet, 118, B.CoinNames_vl8, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_secretNetworkNew", "$get$Bip44Conf_secretNetworkNew", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "secret"], type$.String, type$.dynamic), new A.Bip44Conf_secretNetworkNew_closure(), B.ChainType_mainnet, 529, B.CoinNames_vl8, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_solana", "$get$Bip44Conf_solana", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_solana_closure(), B.ChainType_mainnet, 501, B.CoinNames_Solana, "0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_solanaTestnet", "$get$Bip44Conf_solanaTestnet", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_solanaTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Solana, "0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_stellar", "$get$Bip44Conf_stellar", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["addr_type", B.XlmAddrTypes_48_PublicKey], type$.String, type$.dynamic), new A.Bip44Conf_stellar_closure(), B.ChainType_mainnet, 148, B.CoinNames_Stellar, "0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_stellarTestnet", "$get$Bip44Conf_stellarTestnet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["addr_type", B.XlmAddrTypes_48_PublicKey], type$.String, type$.dynamic), new A.Bip44Conf_stellarTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Stellar, "0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_terra", "$get$Bip44Conf_terra", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "terra"], type$.String, type$.dynamic), new A.Bip44Conf_terra_closure(), B.ChainType_mainnet, 330, B.CoinNames_Terra, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_tezos", "$get$Bip44Conf_tezos", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["prefix", B.C_XtzAddrPrefixes], type$.String, type$.dynamic), new A.Bip44Conf_tezos_closure(), B.ChainType_mainnet, 1729, B.CoinNames_Tezos, "0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_theta", "$get$Bip44Conf_theta", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_theta_closure(), B.ChainType_mainnet, 500, B.CoinNames_a8f, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_tron", "$get$Bip44Conf_tron", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_tron_closure(), B.ChainType_mainnet, 195, B.CoinNames_Tron, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_tronTestnet", "$get$Bip44Conf_tronTestnet", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_tronTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Tron, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_vechain", "$get$Bip44Conf_vechain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_vechain_closure(), B.ChainType_mainnet, 818, B.CoinNames_VeChain, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_verge", "$get$Bip44Conf_verge", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_30], type$.String, type$.dynamic), new A.Bip44Conf_verge_closure(), B.ChainType_mainnet, 77, B.CoinNames_Verge, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_158);
    });
    _lazyFinal($, "Bip44Conf_zcashMainNet", "$get$Bip44Conf_zcashMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_28_184], type$.String, type$.dynamic), new A.Bip44Conf_zcashMainNet_closure(), B.ChainType_mainnet, 133, B.CoinNames_Zcash, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_zcashTestNet", "$get$Bip44Conf_zcashTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_29_37], type$.String, type$.dynamic), new A.Bip44Conf_zcashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_2vZ, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_zilliqa", "$get$Bip44Conf_zilliqa", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_zilliqa_closure(), B.ChainType_mainnet, 313, B.CoinNames_Zilliqa, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_tonMainnet", "$get$Bip44Conf_tonMainnet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["workchain", 0], type$.String, type$.dynamic), new A.Bip44Conf_tonMainnet_closure(), B.ChainType_mainnet, 607, B.CoinNames_Gg4, "0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_tonTestnet", "$get$Bip44Conf_tonTestnet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["workchain", -1], type$.String, type$.dynamic), new A.Bip44Conf_tonTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Gg40, "0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_electraProtocolMainNet", "$get$Bip44Conf_electraProtocolMainNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 136, 178, 30], true, t1), A.List_List$from([4, 136, 173, 228], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_55], type$.String, type$.dynamic), new A.Bip44Conf_electraProtocolMainNet_closure(), B.ChainType_mainnet, 597, B.CoinNames_JXy, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_162);
    });
    _lazyFinal($, "Bip44Conf_electraProtocolTestNet", "$get$Bip44Conf_electraProtocolTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 53, 135, 207], true, t1), A.List_List$from([4, 53, 131, 148], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_141], type$.String, type$.dynamic), new A.Bip44Conf_electraProtocolTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_Tbu, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_suiSecp256k1", "$get$Bip44Conf_suiSecp256k1", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_suiSecp256k1_closure(), B.ChainType_mainnet, 784, B.CoinNames_Sui, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), A.Bip32KeyIndex_Bip32KeyIndex$hardenIndex(54), B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_suiSecp256r1", "$get$Bip44Conf_suiSecp256r1", () => {
      var t1 = A.Bip32KeyIndex_Bip32KeyIndex$hardenIndex(74);
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_suiSecp256r1_closure(), B.ChainType_mainnet, 784, B.CoinNames_Sui, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), t1, B.EllipticCurveTypes_5, null);
    });
    _lazyFinal($, "Bip44Conf_suiEd25519", "$get$Bip44Conf_suiEd25519", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_suiEd25519_closure(), B.ChainType_mainnet, 784, B.CoinNames_Sui, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip49Coins__coinToConf", "$get$Bip49Coins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Bip49Coins_bitcoin, $.$get$Bip49Conf_bitcoinMainNet(), B.Bip49Coins_bitcoinTestnet, $.$get$Bip49Conf_bitcoinTestNet(), B.Bip49Coins_bitcoinCash, $.$get$Bip49Conf_bitcoinCashMainNet(), B.Bip49Coins_bitcoinCashTestnet, $.$get$Bip49Conf_bitcoinCashTestNet(), B.Bip49Coins_bitcoinCashSlp, $.$get$Bip49Conf_bitcoinCashSlpMainNet(), B.Bip49Coins_bitcoinCashSlpTestnet, $.$get$Bip49Conf_bitcoinCashSlpTestNet(), B.Bip49Coins_bitcoinSv, $.$get$Bip49Conf_bitcoinSvMainNet(), B.Bip49Coins_bitcoinSvTestnet, $.$get$Bip49Conf_bitcoinSvTestNet(), B.Bip49Coins_dash, $.$get$Bip49Conf_dashMainNet(), B.Bip49Coins_dashTestnet, $.$get$Bip49Conf_dashTestNet(), B.Bip49Coins_dogecoin, $.$get$Bip49Conf_dogecoinMainNet(), B.Bip49Coins_dogecoinTestnet, $.$get$Bip49Conf_dogecoinTestNet(), B.Bip49Coins_ecash, $.$get$Bip49Conf_ecashMainNet(), B.Bip49Coins_ecashTestnet, $.$get$Bip49Conf_ecashTestNet(), B.Bip49Coins_litecoin, $.$get$Bip49Conf_litecoinMainNet(), B.Bip49Coins_litecoinTestnet, $.$get$Bip49Conf_litecoinTestNet(), B.Bip49Coins_zcash, $.$get$Bip49Conf_zcashMainNet(), B.Bip49Coins_zcashTestnet, $.$get$Bip49Conf_zcashTestNet(), B.Bip49Coins_pepecoin, $.$get$Bip49Conf_pepeMainnet(), B.Bip49Coins_pepecoinTestnet, $.$get$Bip49Conf_pepeTestnet(), B.Bip49Coins_electraProtocol, $.$get$Bip49Conf_electraProtocolMainNet(), B.Bip49Coins_electraProtocolTestnet, $.$get$Bip49Conf_electraProtocolTestNet()], type$.Bip49Coins, type$.BipCoinConfig));
    _lazyFinal($, "Bip49Conf_bip49BtcKeyNetVerMain", "$get$Bip49Conf_bip49BtcKeyNetVerMain", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 157, 124, 178], true, t1), A.List_List$from([4, 157, 120, 120], true, t1));
    });
    _lazyFinal($, "Bip49Conf_bip49BtcKeyNetVerTest", "$get$Bip49Conf_bip49BtcKeyNetVerTest", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 74, 82, 98], true, t1), A.List_List$from([4, 74, 78, 40], true, t1));
    });
    _lazyFinal($, "Bip49Conf_dashMainNet", "$get$Bip49Conf_dashMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_16], type$.String, type$.dynamic), new A.Bip49Conf_dashMainNet_closure(), B.ChainType_mainnet, 5, B.CoinNames_Dash, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_204);
    });
    _lazyFinal($, "Bip49Conf_dashTestNet", "$get$Bip49Conf_dashTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_19], type$.String, type$.dynamic), new A.Bip49Conf_dashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_wNy, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_dogecoinMainNet", "$get$Bip49Conf_dogecoinMainNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([2, 250, 202, 253], true, t1), A.List_List$from([2, 250, 195, 152], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_22], type$.String, type$.dynamic), new A.Bip49Conf_dogecoinMainNet_closure(), B.ChainType_mainnet, 3, B.CoinNames_Dogecoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_158);
    });
    _lazyFinal($, "Bip49Conf_dogecoinTestNet", "$get$Bip49Conf_dogecoinTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 50, 169, 168], true, t1), A.List_List$from([4, 50, 162, 67], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], type$.String, type$.dynamic), new A.Bip49Conf_dogecoinTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_ZAX, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_241);
    });
    _lazyFinal($, "Bip49Conf_litecoinMainNet", "$get$Bip49Conf_litecoinMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain(),
        t2 = type$.int;
      t2 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([1, 178, 110, 246], true, t2), A.List_List$from([1, 178, 103, 146], true, t2));
      return A.BipLitecoinConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std_net_ver", B.List_50, "depr_net_ver", B.List_5], type$.String, type$.dynamic), new A.Bip49Conf_litecoinMainNet_closure(), t2, B.ChainType_mainnet, 2, B.CoinNames_Litecoin, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_176);
    });
    _lazyFinal($, "Bip49Conf_litecoinTestNet", "$get$Bip49Conf_litecoinTestNet", () => {
      var t1 = type$.int,
        t2 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 54, 246, 225], true, t1), A.List_List$from([4, 54, 239, 125], true, t1));
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 54, 246, 225], true, t1), A.List_List$from([4, 54, 239, 125], true, t1));
      return A.BipLitecoinConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std_net_ver", B.List_58, "depr_net_ver", B.List_196], type$.String, type$.dynamic), new A.Bip49Conf_litecoinTestNet_closure(), t1, B.ChainType_testnet, 1, B.CoinNames_cIT, "0'/0/0", t2, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_zcashMainNet", "$get$Bip49Conf_zcashMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_28_189], type$.String, type$.dynamic), new A.Bip49Conf_zcashMainNet_closure(), B.ChainType_mainnet, 133, B.CoinNames_Zcash, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_zcashTestNet", "$get$Bip49Conf_zcashTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_28_186], type$.String, type$.dynamic), new A.Bip49Conf_zcashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_2vZ, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_bitcoinMainNet", "$get$Bip49Conf_bitcoinMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_5], type$.String, type$.dynamic), new A.Bip49Conf_bitcoinMainNet_closure(), B.ChainType_mainnet, 0, B.CoinNames_Bitcoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_bitcoinTestNet", "$get$Bip49Conf_bitcoinTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], type$.String, type$.dynamic), new A.Bip49Conf_bitcoinTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_gL8, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_bitcoinSvMainNet", "$get$Bip49Conf_bitcoinSvMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_5], type$.String, type$.dynamic), new A.Bip49Conf_bitcoinSvMainNet_closure(), B.ChainType_mainnet, 236, B.CoinNames_BitcoinSV, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_bitcoinSvTestNet", "$get$Bip49Conf_bitcoinSvTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], type$.String, type$.dynamic), new A.Bip49Conf_bitcoinSvTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_CQb, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_bitcoinCashMainNet", "$get$Bip49Conf_bitcoinCashMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "bitcoincash"], t2, type$.nullable_Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_5], t2, type$.nullable_List_int)], t2, type$.dynamic), new A.Bip49Conf_bitcoinCashMainNet_closure(), B.ChainType_mainnet, 145, B.CoinNames_9E5, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_bitcoinCashTestNet", "$get$Bip49Conf_bitcoinCashTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "bchtest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], t2, type$.List_int)], t2, type$.dynamic), new A.Bip49Conf_bitcoinCashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_1vL, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_bitcoinCashSlpMainNet", "$get$Bip49Conf_bitcoinCashSlpMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "simpleledger"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_5], t2, type$.List_int)], t2, type$.dynamic), new A.Bip49Conf_bitcoinCashSlpMainNet_closure(), B.ChainType_mainnet, 145, B.CoinNames_R7N, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_bitcoinCashSlpTestNet", "$get$Bip49Conf_bitcoinCashSlpTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "slptest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], t2, type$.List_int)], t2, type$.dynamic), new A.Bip49Conf_bitcoinCashSlpTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_uYt, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_ecashMainNet", "$get$Bip49Conf_ecashMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "ecash"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_5], t2, type$.List_int)], t2, type$.dynamic), new A.Bip49Conf_ecashMainNet_closure(), B.ChainType_mainnet, 145, B.CoinNames_eCash, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_ecashTestNet", "$get$Bip49Conf_ecashTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "ectest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], t2, type$.List_int)], t2, type$.dynamic), new A.Bip49Conf_ecashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_A7Y, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_pepeMainnet", "$get$Bip49Conf_pepeMainnet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([2, 250, 202, 253], true, t1), A.List_List$from([2, 250, 195, 152], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_22], type$.String, type$.dynamic), new A.Bip49Conf_pepeMainnet_closure(), B.ChainType_mainnet, 3434, B.CoinNames_Pepecoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_158);
    });
    _lazyFinal($, "Bip49Conf_pepeTestnet", "$get$Bip49Conf_pepeTestnet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 50, 169, 168], true, t1), A.List_List$from([4, 50, 162, 67], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], type$.String, type$.dynamic), new A.Bip49Conf_pepeTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Nk6, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_241);
    });
    _lazyFinal($, "Bip49Conf_electraProtocolMainNet", "$get$Bip49Conf_electraProtocolMainNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 136, 178, 30], true, t1), A.List_List$from([4, 136, 173, 228], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_137], type$.String, type$.dynamic), new A.Bip49Conf_electraProtocolMainNet_closure(), B.ChainType_mainnet, 597, B.CoinNames_JXy, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_162);
    });
    _lazyFinal($, "Bip49Conf_electraProtocolTestNet", "$get$Bip49Conf_electraProtocolTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 53, 135, 207], true, t1), A.List_List$from([4, 53, 131, 148], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_19], type$.String, type$.dynamic), new A.Bip49Conf_electraProtocolTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_Tbu, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip84Coins__coinToConf", "$get$Bip84Coins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Bip84Coins_bitcoin, $.$get$Bip84Conf_bitcoinMainNet(), B.Bip84Coins_bitcoinTestnet, $.$get$Bip84Conf_bitcoinTestNet(), B.Bip84Coins_litecoin, $.$get$Bip84Conf_litecoinMainNet(), B.Bip84Coins_litecoinTestnet, $.$get$Bip84Conf_litecoinTestNet(), B.Bip84Coins_electraProtocol, $.$get$Bip84Conf_electraProtocolMainNet(), B.Bip84Coins_electraProtocolTestnet, $.$get$Bip84Conf_electraProtocolTestNet()], type$.Bip84Coins, type$.BipCoinConfig));
    _lazyFinal($, "Bip84Conf_bip84BtcKeyNetVer", "$get$Bip84Conf_bip84BtcKeyNetVer", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 178, 71, 70], true, t1), A.List_List$from([4, 178, 67, 12], true, t1));
    });
    _lazyFinal($, "Bip84Conf_bitcoinMainNet", "$get$Bip84Conf_bitcoinMainNet", () => {
      var t1 = $.$get$Bip84Conf_bip84BtcKeyNetVer();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "bc"], type$.String, type$.dynamic), new A.Bip84Conf_bitcoinMainNet_closure(), B.ChainType_mainnet, 0, B.CoinNames_Bitcoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip84Conf_bitcoinTestNet", "$get$Bip84Conf_bitcoinTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 95, 28, 246], true, t1), A.List_List$from([4, 95, 24, 188], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "tb"], type$.String, type$.dynamic), new A.Bip84Conf_bitcoinTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_gL8, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip84Conf_litecoinMainNet", "$get$Bip84Conf_litecoinMainNet", () => {
      var t1 = $.$get$Bip84Conf_bip84BtcKeyNetVer();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "ltc"], type$.String, type$.dynamic), new A.Bip84Conf_litecoinMainNet_closure(), B.ChainType_mainnet, 2, B.CoinNames_Litecoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_176);
    });
    _lazyFinal($, "Bip84Conf_litecoinTestNet", "$get$Bip84Conf_litecoinTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 54, 246, 225], true, t1), A.List_List$from([4, 54, 239, 125], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "tltc"], type$.String, type$.dynamic), new A.Bip84Conf_litecoinTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_cIT, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip84Conf_electraProtocolMainNet", "$get$Bip84Conf_electraProtocolMainNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 136, 178, 30], true, t1), A.List_List$from([4, 136, 173, 228], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "ep"], type$.String, type$.dynamic), new A.Bip84Conf_electraProtocolMainNet_closure(), B.ChainType_mainnet, 597, B.CoinNames_JXy, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_162);
    });
    _lazyFinal($, "Bip84Conf_electraProtocolTestNet", "$get$Bip84Conf_electraProtocolTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 53, 135, 207], true, t1), A.List_List$from([4, 53, 131, 148], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "ep"], type$.String, type$.dynamic), new A.Bip84Conf_electraProtocolTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_Tbu, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip86Coins__coinToConf", "$get$Bip86Coins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Bip86Coins_bitcoin, $.$get$Bip86Conf_bitcoinMainNet(), B.Bip86Coins_bitcoinTestnet, $.$get$Bip86Conf_bitcoinTestNet()], type$.Bip86Coins, type$.BipCoinConfig));
    _lazyFinal($, "Bip86Conf_bip86BtcKeyNetVer", "$get$Bip86Conf_bip86BtcKeyNetVer", () => $.$get$Bip32Const_mainNetKeyNetVersions());
    _lazyFinal($, "Bip86Conf_bip86BtcKeyNetVerTest", "$get$Bip86Conf_bip86BtcKeyNetVerTest", () => $.$get$Bip32Const_testNetKeyNetVersions());
    _lazy($, "Bip86Conf_bitcoinMainNet", "$get$Bip86Conf_bitcoinMainNet", () => {
      var t1 = $.$get$Bip86Conf_bip86BtcKeyNetVer();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "bc"], type$.String, type$.dynamic), new A.Bip86Conf_bitcoinMainNet_closure(), B.ChainType_mainnet, 0, B.CoinNames_Bitcoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazy($, "Bip86Conf_bitcoinTestNet", "$get$Bip86Conf_bitcoinTestNet", () => {
      var t1 = $.$get$Bip86Conf_bip86BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "tb"], type$.String, type$.dynamic), new A.Bip86Conf_bitcoinTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_gL8, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Cip1852Coins__coinToConf", "$get$Cip1852Coins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Cip1852Coins_cardanoIcarus, $.$get$Cip1852Conf_cardanoIcarusMainNet(), B.Cip1852Coins_cardanoLedger, $.$get$Cip1852Conf_cardanoLedgerMainNet(), B.Cip1852Coins_cardanoIcarusTestnet, $.$get$Cip1852Conf_cardanoIcarusTestNet(), B.Cip1852Coins_cardanoLedgerTestnet, $.$get$Cip1852Conf_cardanoLedgerTestNet()], type$.Cip1852Coins, type$.BipCoinConfig));
    _lazyFinal($, "Cip1852Conf_cardanoIcarusMainNet", "$get$Cip1852Conf_cardanoIcarusMainNet", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_tag", B.ADANetwork_1_mainnet, "is_icarus", true], type$.String, type$.dynamic), new A.Cip1852Conf_cardanoIcarusMainNet_closure(), B.ChainType_mainnet, 1815, B.CoinNames_Cardano, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "Cip1852Conf_cardanoIcarusTestNet", "$get$Cip1852Conf_cardanoIcarusTestNet", () => {
      var t1 = $.$get$Bip32Const_testNetKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_tag", B.ADANetwork_0_testnetPreview, "is_icarus", true], type$.String, type$.dynamic), new A.Cip1852Conf_cardanoIcarusTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_Hic, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "Cip1852Conf_cardanoLedgerMainNet", "$get$Cip1852Conf_cardanoLedgerMainNet", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_tag", B.ADANetwork_1_mainnet], type$.String, type$.dynamic), new A.Cip1852Conf_cardanoLedgerMainNet_closure(), B.ChainType_mainnet, 1815, B.CoinNames_Cardano, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "Cip1852Conf_cardanoLedgerTestNet", "$get$Cip1852Conf_cardanoLedgerTestNet", () => {
      var t1 = $.$get$Bip32Const_testNetKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_tag", B.ADANetwork_0_testnetPreview], type$.String, type$.dynamic), new A.Cip1852Conf_cardanoLedgerTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_Hic, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "MoneroCoins__coinToConf", "$get$MoneroCoins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.MoneroCoins_moneroMainnet, $.$get$MoneroConf_mainNet(), B.MoneroCoins_moneroStagenet, $.$get$MoneroConf_stageNet(), B.MoneroCoins_moneroTestnet, $.$get$MoneroConf_testNet()], type$.MoneroCoins, A.findType("MoneroCoinConf")));
    _lazyFinal($, "MoneroConf_mainNet", "$get$MoneroConf_mainNet", () => A.MoneroCoinConf_MoneroCoinConf$fromCoinConf(B.ChainType_mainnet, B.CoinConf_Z8a));
    _lazyFinal($, "MoneroConf_stageNet", "$get$MoneroConf_stageNet", () => A.MoneroCoinConf_MoneroCoinConf$fromCoinConf(B.ChainType_testnet, B.CoinConf_yod));
    _lazyFinal($, "MoneroConf_testNet", "$get$MoneroConf_testNet", () => A.MoneroCoinConf_MoneroCoinConf$fromCoinConf(B.ChainType_testnet, B.CoinConf_sCL));
    _lazyFinal($, "SubstrateCoins__coinToConf", "$get$SubstrateCoins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.SubstrateCoins_acalaEd25519, $.$get$SubstrateConf_acalaEd25519(), B.SubstrateCoins_acalaSecp256k1, $.$get$SubstrateConf_acalaSecp256k1(), B.SubstrateCoins_acalaSr25519, $.$get$SubstrateConf_acalaSr25519(), B.SubstrateCoins_bifrostEd25519, $.$get$SubstrateConf_bifrostEd25519(), B.SubstrateCoins_bifrostSecp256k1, $.$get$SubstrateConf_bifrostSecp256k1(), B.SubstrateCoins_bifrostSr25519, $.$get$SubstrateConf_bifrostSr25519(), B.SubstrateCoins_chainxEd25519, $.$get$SubstrateConf_chainXEd25519(), B.SubstrateCoins_chainxSecp256k1, $.$get$SubstrateConf_chainXSecp256k1(), B.SubstrateCoins_chainxSr25519, $.$get$SubstrateConf_chainXSr25519(), B.SubstrateCoins_edgewareEd25519, $.$get$SubstrateConf_edgewareEd25519(), B.SubstrateCoins_edgewareSecp256k1, $.$get$SubstrateConf_edgewareSecp256k1(), B.SubstrateCoins_edgewareSr25519, $.$get$SubstrateConf_edgewareSr25519(), B.SubstrateCoins_genericEd25519, $.$get$SubstrateConf_genericEd25519(), B.SubstrateCoins_genericSecp256k1, $.$get$SubstrateConf_genericSecp256k1(), B.SubstrateCoins_genericSr25519, $.$get$SubstrateConf_genericSr25519(), B.SubstrateCoins_karuraEd25519, $.$get$SubstrateConf_karuraEd25519(), B.SubstrateCoins_karuraSecp256k1, $.$get$SubstrateConf_karuraSecp256k1(), B.SubstrateCoins_karuraSr25519, $.$get$SubstrateConf_karuraSr25519(), B.SubstrateCoins_kusamaEd25519, $.$get$SubstrateConf_kusamaEd25519(), B.SubstrateCoins_kusamaSecp256k1, $.$get$SubstrateConf_kusamaSecp256k1(), B.SubstrateCoins_kusamaSr25519, $.$get$SubstrateConf_kusamaSr25519(), B.SubstrateCoins_moonbeamEd25519, $.$get$SubstrateConf_moonbeamEd25519(), B.SubstrateCoins_moonbeamSecp256k1, $.$get$SubstrateConf_moonbeamSecp256k1(), B.SubstrateCoins_moonbeamSr25519, $.$get$SubstrateConf_moonbeamSr25519(), B.SubstrateCoins_moonriverEd25519, $.$get$SubstrateConf_moonriverEd25519(), B.SubstrateCoins_moonriverSecp256k1, $.$get$SubstrateConf_moonriverSecp256k1(), B.SubstrateCoins_moonriverSr25519, $.$get$SubstrateConf_moonriverSr25519(), B.SubstrateCoins_phalaEd25519, $.$get$SubstrateConf_phalaEd25519(), B.SubstrateCoins_phalaSecp256k1, $.$get$SubstrateConf_phalaSecp256k1(), B.SubstrateCoins_phalaSr25519, $.$get$SubstrateConf_phalaSr25519(), B.SubstrateCoins_plasmEd25519, $.$get$SubstrateConf_plasmEd25519(), B.SubstrateCoins_plasmSecp256k1, $.$get$SubstrateConf_plasmSecp256k1(), B.SubstrateCoins_plasmSr25519, $.$get$SubstrateConf_plasmSr25519(), B.SubstrateCoins_polkadotEd25519, $.$get$SubstrateConf_polkadotEd25519(), B.SubstrateCoins_polkadotSecp256k1, $.$get$SubstrateConf_polkadotSecp256k1(), B.SubstrateCoins_polkadotSr25519, $.$get$SubstrateConf_polkadotSr25519(), B.SubstrateCoins_soraEd25519, $.$get$SubstrateConf_soraEd25519(), B.SubstrateCoins_soraSecp256k1, $.$get$SubstrateConf_soraSecp256k1(), B.SubstrateCoins_soraSr25519, $.$get$SubstrateConf_soraSr25519(), B.SubstrateCoins_stafiEd25519, $.$get$SubstrateConf_stafiEd25519(), B.SubstrateCoins_stafiSecp256k1, $.$get$SubstrateConf_stafiSecp256k1(), B.SubstrateCoins_stafiSr25519, $.$get$SubstrateConf_stafiSr25519()], type$.SubstrateCoins, A.findType("SubstrateCoinConf")));
    _lazyFinal($, "SubstrateConf_acalaEd25519", "$get$SubstrateConf_acalaEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_acalaEd25519_closure(), B.ChainType_mainnet, B.CoinConf_rMV, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_acalaSecp256k1", "$get$SubstrateConf_acalaSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_acalaSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_rMV, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_acalaSr25519", "$get$SubstrateConf_acalaSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_acalaSr25519_closure(), B.ChainType_mainnet, B.CoinConf_rMV, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_bifrostEd25519", "$get$SubstrateConf_bifrostEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_bifrostEd25519_closure(), B.ChainType_mainnet, B.CoinConf_fWq, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_bifrostSecp256k1", "$get$SubstrateConf_bifrostSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_bifrostSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_fWq, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_bifrostSr25519", "$get$SubstrateConf_bifrostSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_bifrostSr25519_closure(), B.ChainType_mainnet, B.CoinConf_fWq, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_chainXEd25519", "$get$SubstrateConf_chainXEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_chainXEd25519_closure(), B.ChainType_mainnet, B.CoinConf_dz7, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_chainXSecp256k1", "$get$SubstrateConf_chainXSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_chainXSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_dz7, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_chainXSr25519", "$get$SubstrateConf_chainXSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_chainXSr25519_closure(), B.ChainType_mainnet, B.CoinConf_dz7, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_edgewareEd25519", "$get$SubstrateConf_edgewareEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_edgewareEd25519_closure(), B.ChainType_mainnet, B.CoinConf_d50, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_edgewareSecp256k1", "$get$SubstrateConf_edgewareSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_edgewareSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_d50, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_edgewareSr25519", "$get$SubstrateConf_edgewareSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_edgewareSr25519_closure(), B.ChainType_mainnet, B.CoinConf_d50, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_genericEd25519", "$get$SubstrateConf_genericEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_genericEd25519_closure(), B.ChainType_mainnet, B.CoinConf_2Q3, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_genericSecp256k1", "$get$SubstrateConf_genericSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_genericSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_2Q3, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_genericSr25519", "$get$SubstrateConf_genericSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_genericSr25519_closure(), B.ChainType_mainnet, B.CoinConf_2Q3, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_karuraEd25519", "$get$SubstrateConf_karuraEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_karuraEd25519_closure(), B.ChainType_mainnet, B.CoinConf_jfr, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_karuraSecp256k1", "$get$SubstrateConf_karuraSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_karuraSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_jfr, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_karuraSr25519", "$get$SubstrateConf_karuraSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_karuraSr25519_closure(), B.ChainType_mainnet, B.CoinConf_jfr, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_kusamaEd25519", "$get$SubstrateConf_kusamaEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_kusamaEd25519_closure(), B.ChainType_mainnet, B.CoinConf_y1J, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_kusamaSecp256k1", "$get$SubstrateConf_kusamaSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_kusamaSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_y1J, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_kusamaSr25519", "$get$SubstrateConf_kusamaSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_kusamaSr25519_closure(), B.ChainType_mainnet, B.CoinConf_y1J, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_moonbeamEd25519", "$get$SubstrateConf_moonbeamEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonbeamEd25519_closure(), B.ChainType_mainnet, B.CoinConf_NFA, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_moonbeamSecp256k1", "$get$SubstrateConf_moonbeamSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonbeamSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_NFA, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_moonbeamSr25519", "$get$SubstrateConf_moonbeamSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonbeamSr25519_closure(), B.ChainType_mainnet, B.CoinConf_NFA, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_moonriverEd25519", "$get$SubstrateConf_moonriverEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonriverEd25519_closure(), B.ChainType_mainnet, B.CoinConf_nB3, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_moonriverSecp256k1", "$get$SubstrateConf_moonriverSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonriverSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_nB3, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_moonriverSr25519", "$get$SubstrateConf_moonriverSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonriverSr25519_closure(), B.ChainType_mainnet, B.CoinConf_nB3, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_phalaEd25519", "$get$SubstrateConf_phalaEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_phalaEd25519_closure(), B.ChainType_mainnet, B.CoinConf_htN, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_phalaSecp256k1", "$get$SubstrateConf_phalaSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_phalaSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_htN, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_phalaSr25519", "$get$SubstrateConf_phalaSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_phalaSr25519_closure(), B.ChainType_mainnet, B.CoinConf_htN, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_plasmEd25519", "$get$SubstrateConf_plasmEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_plasmEd25519_closure(), B.ChainType_mainnet, B.CoinConf_9rY, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_plasmSecp256k1", "$get$SubstrateConf_plasmSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_plasmSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_9rY, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_plasmSr25519", "$get$SubstrateConf_plasmSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_plasmSr25519_closure(), B.ChainType_mainnet, B.CoinConf_9rY, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_polkadotEd25519", "$get$SubstrateConf_polkadotEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_polkadotEd25519_closure(), B.ChainType_mainnet, B.CoinConf_rfh, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_polkadotSecp256k1", "$get$SubstrateConf_polkadotSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_polkadotSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_rfh, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_polkadotSr25519", "$get$SubstrateConf_polkadotSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_polkadotSr25519_closure(), B.ChainType_mainnet, B.CoinConf_rfh, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_soraEd25519", "$get$SubstrateConf_soraEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_soraEd25519_closure(), B.ChainType_mainnet, B.CoinConf_cB1, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_soraSecp256k1", "$get$SubstrateConf_soraSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_soraSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_cB1, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_soraSr25519", "$get$SubstrateConf_soraSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_soraSr25519_closure(), B.ChainType_mainnet, B.CoinConf_cB1, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_stafiEd25519", "$get$SubstrateConf_stafiEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_stafiEd25519_closure(), B.ChainType_mainnet, B.CoinConf_1rN, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_stafiSecp256k1", "$get$SubstrateConf_stafiSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_stafiSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_1rN, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_stafiSr25519", "$get$SubstrateConf_stafiSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_stafiSr25519_closure(), B.ChainType_mainnet, B.CoinConf_1rN, B.EllipticCurveTypes_7));
    _lazyFinal($, "AES__lib", "$get$AES__lib", () => $.$get$AESLib__aes());
    _lazyFinal($, "AESLib__aes", "$get$AESLib__aes", () => {
      var t1 = type$.int;
      t1 = new A.AESLib(A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1));
      t1.initialize$0();
      return t1;
    });
    _lazyFinal($, "Curves_curveEd25519", "$get$Curves_curveEd25519", () => {
      var t1 = A._BigIntImpl_parse("57896044618658097711785492504343953926634992332820282019728792003956564819949", null),
        t2 = A._BigIntImpl__BigIntImpl$from(-1),
        t3 = A._BigIntImpl_parse("37095705934669439343138083508754565189542113879843219016388785533085940283555", null),
        t4 = A._BigIntImpl__BigIntImpl$from(8);
      A._BigIntImpl_parse(string$.x3723700, null);
      return new A.CurveED(t1, t2, t3, t4);
    });
    _lazyFinal($, "Curves_generatorED25519", "$get$Curves_generatorED25519", () => {
      var _null = null,
        t1 = $.$get$Curves_curveEd25519(),
        t2 = A._BigIntImpl_parse("15112221349535400772501151409588531511454012693041857206046113283949847762202", _null),
        t3 = A._BigIntImpl_parse("46316835694926478169428394003475163141307993866256225615783033603165251855960", _null),
        t4 = $.$get$_BigIntImpl_one(),
        t5 = A._BigIntImpl_parse("46827403850823179245072216630277197565144205554125654976674165829533817101731", _null);
      return A.EDPoint$(t1, true, A._BigIntImpl_parse(string$.x3723700, _null), t5, t2, t3, t4);
    });
    _lazyFinal($, "Curves_curveSecp256k1", "$get$Curves_curveSecp256k1", () => {
      var t1 = A._BigIntImpl_parse("115792089237316195423570985008687907853269984665640564039457584007908834671663", null);
      return A.CurveFp$($.$get$_BigIntImpl_zero(), A._BigIntImpl__BigIntImpl$from(7), $.$get$_BigIntImpl_one(), t1);
    });
    _lazyFinal($, "Curves_generatorSecp256k1", "$get$Curves_generatorSecp256k1", () => {
      var t1 = $.$get$Curves_curveSecp256k1(),
        t2 = A._BigIntImpl_parse("79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798", 16),
        t3 = A._BigIntImpl_parse("483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8", 16),
        t4 = $.$get$_BigIntImpl_one();
      return A.ProjectiveECCPoint_ProjectiveECCPoint(t1, true, A._BigIntImpl_parse("115792089237316195423570985008687907852837564279074904382605163141518161494337", null), t2, t3, t4);
    });
    _lazyFinal($, "Curves_curve256", "$get$Curves_curve256", () => {
      var t1 = A._BigIntImpl_parse("115792089210356248762697446949407573530086143415290314195533631308867097853951", null);
      return A.CurveFp$(A._BigIntImpl__BigIntImpl$from(-3), A._BigIntImpl_parse("5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B", 16), $.$get$_BigIntImpl_one(), t1);
    });
    _lazyFinal($, "Curves_generator256", "$get$Curves_generator256", () => {
      var t1 = $.$get$Curves_curve256(),
        t2 = A._BigIntImpl_parse("6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296", 16),
        t3 = A._BigIntImpl_parse("4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5", 16),
        t4 = $.$get$_BigIntImpl_one();
      return A.ProjectiveECCPoint_ProjectiveECCPoint(t1, true, A._BigIntImpl_parse("115792089210356248762697446949407573529996955224135760342422259061068512044369", null), t2, t3, t4);
    });
    _lazyFinal($, "RistrettoUtils_sqrtM1", "$get$RistrettoUtils_sqrtM1", () => A._BigIntImpl_parse("19681161376707505956807079304988542015446066515923890162744021073123829784752", null));
    _lazyFinal($, "_iv", "$get$_iv", () => A.List_List$unmodifiable(B.List_j2A, type$.int));
    _lazyFinal($, "_hi", "$get$_hi", () => A.List_List$unmodifiable(B.List_yCw, type$.int));
    _lazyFinal($, "_lo", "$get$_lo", () => A.List_List$unmodifiable(B.List_sWD, type$.int));
    _lazyFinal($, "QuickCrypto_prng", "$get$QuickCrypto_prng", () => {
      var k, t4, out,
        t1 = type$.int,
        t2 = A.List_List$filled(16, 0, false, t1),
        t3 = A.List_List$filled(16, 0, false, t1);
      t2 = new A.FortunaPRNG(t2, t3);
      k = new A.SHAKE256(A.List_List$filled(25, 0, false, t1), A.List_List$filled(25, 0, false, t1), A.List_List$filled(200, 0, false, t1));
      k._Keccack$1(64);
      t4 = A._setArrayType([], type$.JSArray_int);
      k.update$1(t4);
      k.update$1(A.FortunaPRNG__generateSeed(32));
      t4 = t2.get$_key();
      out = A.List_List$filled(32, 0, false, t1);
      type$.List_int._as(out);
      if (!k._hash$_finished)
        k._padAndPermute$1(31);
      k._squeeze$1(out);
      B.JSArray_methods.setAll$2(t4, 0, out);
      k.reset$0();
      t2._generateBlocks$2(t3, 1);
      return t2;
    });
    _lazy($, "QuickCrypto__generateRandom", "$get$QuickCrypto__generateRandom", () => new A.QuickCrypto__generateRandom_closure());
    _lazyFinal($, "_Ss58Const_checksumPrefix", "$get$_Ss58Const_checksumPrefix", () => A.List_List$unmodifiable(A._setArrayType([83, 83, 53, 56, 80, 82, 69], type$.JSArray_int), type$.int));
    _lazyFinal($, "maxU64", "$get$maxU64", () => A._BigIntImpl_parse("18446744073709551615", null));
    _lazyFinal($, "BigRational_ten", "$get$BigRational_ten", () => A.BigRational_BigRational$from(10));
    _lazyFinal($, "BigRational__one", "$get$BigRational__one", () => $.$get$_BigIntImpl_one());
    _lazyFinal($, "BigRational__zero", "$get$BigRational__zero", () => $.$get$_BigIntImpl_zero());
    _lazyFinal($, "BigRational__ten", "$get$BigRational__ten", () => A._BigIntImpl__BigIntImpl$from(10));
    _lazyFinal($, "StringUtils__hexBytesRegex", "$get$StringUtils__hexBytesRegex", () => A.RegExp_RegExp("^(0x|0X)?([0-9A-Fa-f]{2})+$", true));
    _lazyFinal($, "OnChainBridgeInterface__token", "$get$OnChainBridgeInterface__token", () => new A.Object());
    _lazyFinal($, "PlatformInterface_instance", "$get$PlatformInterface_instance", () => {
      var t1 = new A.WebPlatformInterface();
      t1.PlatformInterface$1$token($.$get$OnChainBridgeInterface__token());
      return t1;
    });
    _lazyFinal($, "APPConst_ltc", "$get$APPConst_ltc", () => A.APPImage$local("assets/image/ltc.png"));
    _lazyFinal($, "APPConst_bch", "$get$APPConst_bch", () => A.APPImage$local("assets/image/bch.png"));
    _lazyFinal($, "APPConst_btc", "$get$APPConst_btc", () => A.APPImage$local("assets/image/btc.png"));
    _lazyFinal($, "APPConst_doge", "$get$APPConst_doge", () => A.APPImage$local("assets/image/doge.png"));
    _lazyFinal($, "APPConst_pepecoin", "$get$APPConst_pepecoin", () => A.APPImage$local("assets/image/pepecoin.png"));
    _lazyFinal($, "APPConst_bsv", "$get$APPConst_bsv", () => A.APPImage$local("assets/image/bsv.png"));
    _lazyFinal($, "APPConst_dash", "$get$APPConst_dash", () => A.APPImage$local("assets/image/dash.png"));
    _lazyFinal($, "APPConst_xrp", "$get$APPConst_xrp", () => A.APPImage$local("assets/image/xrp.png"));
    _lazyFinal($, "APPConst_eth", "$get$APPConst_eth", () => A.APPImage$local("assets/image/eth.png"));
    _lazyFinal($, "APPConst_matic", "$get$APPConst_matic", () => A.APPImage$local("assets/image/matic.png"));
    _lazyFinal($, "APPConst_bnb", "$get$APPConst_bnb", () => A.APPImage$local("assets/image/bnb.png"));
    _lazyFinal($, "APPConst_trx", "$get$APPConst_trx", () => A.APPImage$local("assets/image/trx.png"));
    _lazyFinal($, "APPConst_sol", "$get$APPConst_sol", () => A.APPImage$local("assets/image/sol.png"));
    _lazyFinal($, "APPConst_ada", "$get$APPConst_ada", () => A.APPImage$local("assets/image/ada.png"));
    _lazyFinal($, "APPConst_atom", "$get$APPConst_atom", () => A.APPImage$local("assets/image/atom.png"));
    _lazyFinal($, "APPConst_cacao", "$get$APPConst_cacao", () => A.APPImage$local("assets/image/cacao.png"));
    _lazyFinal($, "APPConst_avalance", "$get$APPConst_avalance", () => A.APPImage$local("assets/image/avax.png"));
    _lazyFinal($, "APPConst_arbitrum", "$get$APPConst_arbitrum", () => A.APPImage$local("assets/image/arb.png"));
    _lazyFinal($, "APPConst_base", "$get$APPConst_base", () => A.APPImage$local("assets/image/base.png"));
    _lazyFinal($, "APPConst_optimistic", "$get$APPConst_optimistic", () => A.APPImage$local("assets/image/op.png"));
    _lazyFinal($, "APPConst_thor", "$get$APPConst_thor", () => A.APPImage$local("assets/image/thor.png"));
    _lazyFinal($, "APPConst_kujira", "$get$APPConst_kujira", () => A.APPImage$local("assets/image/kujira.png"));
    _lazyFinal($, "APPConst_osmo", "$get$APPConst_osmo", () => A.APPImage$local("assets/image/osmo.png"));
    _lazyFinal($, "APPConst_ton", "$get$APPConst_ton", () => A.APPImage$local("assets/image/ton.png"));
    _lazyFinal($, "APPConst_polkadot", "$get$APPConst_polkadot", () => A.APPImage$local("assets/image/polkadot.png"));
    _lazyFinal($, "APPConst_moonbeam", "$get$APPConst_moonbeam", () => A.APPImage$local("assets/image/moonbeam.png"));
    _lazyFinal($, "APPConst_moonriver", "$get$APPConst_moonriver", () => A.APPImage$local("assets/image/moonriver.png"));
    _lazyFinal($, "APPConst_astar", "$get$APPConst_astar", () => A.APPImage$local("assets/image/astar.png"));
    _lazyFinal($, "APPConst_centrifuge", "$get$APPConst_centrifuge", () => A.APPImage$local("assets/image/cfg.png"));
    _lazyFinal($, "APPConst_acala", "$get$APPConst_acala", () => A.APPImage$local("assets/image/acala.png"));
    _lazyFinal($, "APPConst_kusama", "$get$APPConst_kusama", () => A.APPImage$local("assets/image/ksm.png"));
    _lazyFinal($, "APPConst_stellar", "$get$APPConst_stellar", () => A.APPImage$local("assets/image/xlm.png"));
    _lazyFinal($, "APPConst_monero", "$get$APPConst_monero", () => A.APPImage$local("assets/image/monero.png"));
    _lazyFinal($, "APPConst_aptos", "$get$APPConst_aptos", () => A.APPImage$local("assets/image/aptos.png"));
    _lazyFinal($, "APPConst_sui", "$get$APPConst_sui", () => A.APPImage$local("assets/image/sui.png"));
    _lazy($, "RetionalConst_bigR8", "$get$RetionalConst_bigR8", () => A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(8), null));
    _lazy($, "RetionalConst_bigR18", "$get$RetionalConst_bigR18", () => A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(18), null));
    _lazy($, "RetionalConst_bigR6", "$get$RetionalConst_bigR6", () => A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(6), null));
    _lazy($, "RetionalConst_bigR12", "$get$RetionalConst_bigR12", () => A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(12), null));
    _lazy($, "RetionalConst_bigR10", "$get$RetionalConst_bigR10", () => A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(10), null));
    _lazy($, "AppNativeMethods_platform", "$get$AppNativeMethods_platform", () => $.$get$PlatformInterface_instance());
    _lazyFinal($, "CustomCoins_byronLegacy", "$get$CustomCoins_byronLegacy", () => A.CustomCoins$_("Byron legacy", $.$get$CustomCurrencyConf_byronLegacy()));
    _lazyFinal($, "CustomCoins_byronLegacyTestnet", "$get$CustomCoins_byronLegacyTestnet", () => A.CustomCoins$_("Byron legacy testnet", $.$get$CustomCurrencyConf_byronLegacyTestnet()));
    _lazyFinal($, "CustomCoins_values", "$get$CustomCoins_values", () => A._setArrayType([$.$get$CustomCoins_byronLegacy(), $.$get$CustomCoins_byronLegacyTestnet()], A.findType("JSArray<CustomCoins>")));
    _lazy($, "CustomCurrencyConf_byronLegacy", "$get$CustomCurrencyConf_byronLegacy", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true], type$.String, type$.dynamic), new A.CustomCurrencyConf_byronLegacy_closure(), B.ChainType_mainnet, 0, B.CoinNames_6lR, "0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazy($, "CustomCurrencyConf_byronLegacyTestnet", "$get$CustomCurrencyConf_byronLegacyTestnet", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true], type$.String, type$.dynamic), new A.CustomCurrencyConf_byronLegacyTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_GqI, "", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "ProvidersConst__providers", "$get$ProvidersConst__providers", () => {
      var _s9_ = "default-0",
        _s9_0 = "default-1",
        _s9_1 = "default-3",
        _s10_ = "default-24",
        _s10_0 = "blockfrost",
        _s13_ = "blockfrost.io",
        _s17_ = "https://tonapi.io",
        _null = null,
        _s9_2 = "TonCenter",
        _s20_ = "https://toncenter.io",
        _s10_1 = "default-60",
        _s11_ = "default-462",
        _s10_2 = "default-70",
        _s13_0 = "default-811_1",
        _s13_1 = "default-812_1",
        t1 = type$.JSArray_APIProvider,
        t2 = type$.dynamic;
      return A.ConstantMap_ConstantMap$from(A.LinkedHashMap_LinkedHashMap$_literal([0, A._setArrayType([A.ElectrumAPIProvider_ElectrumAPIProvider(_s9_, B.ServiceProtocol_SSL_1_ssl, "142.93.6.38:50002"), A.ElectrumAPIProvider_ElectrumAPIProvider(_s9_0, B.ServiceProtocol_WebSocket_3_websocket, "wss://bitcoin.aranguren.org:50004"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-2", B.ServiceProtocol_WebSocket_3_websocket, "wss://104.198.149.61:8443"), A.ElectrumAPIProvider_ElectrumAPIProvider(_s9_1, B.ServiceProtocol_SSL_1_ssl, "104.248.139.211:50002"), B.BitcoinExplorerAPIProvider_Beg, B.BitcoinExplorerAPIProvider_1R8], t1), 1, A._setArrayType([A.ElectrumAPIProvider_ElectrumAPIProvider("default-4", B.ServiceProtocol_WebSocket_3_websocket, "wss://testnet.aranguren.org:51004"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-5", B.ServiceProtocol_SSL_1_ssl, "testnet.aranguren.org:51002"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-6", B.ServiceProtocol_SSL_1_ssl, "blockstream.info:700"), B.BitcoinExplorerAPIProvider_Beg], t1), 5, A._setArrayType([A.ElectrumAPIProvider_ElectrumAPIProvider("default-tbtc4", B.ServiceProtocol_SSL_1_ssl, "testnet4-electrumx.wakiyamap.dev:51002"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-tbtc4_1", B.ServiceProtocol_TCP_2_tcp, "testnet4-electrumx.wakiyamap.dev:51001"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-tbtc4_2", B.ServiceProtocol_WebSocket_3_websocket, "wss://blackie.c3-soft.com:57012")], t1), 2, A._setArrayType([A.ElectrumAPIProvider_ElectrumAPIProvider("default-7", B.ServiceProtocol_WebSocket_3_websocket, "wss://electrum.qortal.link:50004"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-8", B.ServiceProtocol_WebSocket_3_websocket, "wss://46.101.3.154:50004"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-9", B.ServiceProtocol_SSL_1_ssl, "46.101.3.154:50002"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-10", B.ServiceProtocol_SSL_1_ssl, "backup.electrum-ltc.org:443"), B.BitcoinExplorerAPIProvider_1R8], t1), 7, A._setArrayType([A.ElectrumAPIProvider_ElectrumAPIProvider("default-11", B.ServiceProtocol_SSL_1_ssl, "electrum-ltc.bysh.me:51002"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-12", B.ServiceProtocol_SSL_1_ssl, "electrum.ltc.xurious.com:51002")], t1), 3, A._setArrayType([A.ElectrumAPIProvider_ElectrumAPIProvider("default-13", B.ServiceProtocol_SSL_1_ssl, "electrum.qortal.link:54002"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-14", B.ServiceProtocol_WebSocket_3_websocket, "wss://electrum.qortal.link:54004"), B.BitcoinExplorerAPIProvider_1R8], t1), 8, A._setArrayType([], t1), 9, A._setArrayType([A.ElectrumAPIProvider_ElectrumAPIProvider("default-15", B.ServiceProtocol_SSL_1_ssl, "electrumx.bitcoinsv.io:50002")], t1), 4, A._setArrayType([B.BitcoinExplorerAPIProvider_1R8], t1), 10, A._setArrayType([A.ElectrumAPIProvider_ElectrumAPIProvider("default-16", B.ServiceProtocol_WebSocket_3_websocket, "wss://electrum.imaginary.cash:50004"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-17", B.ServiceProtocol_SSL_1_ssl, "electrum.imaginary.cash:50002"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-18", B.ServiceProtocol_WebSocket_3_websocket, "wss://bch.loping.net:50004"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-19", B.ServiceProtocol_SSL_1_ssl, "bch.loping.net:50002")], t1), 11, A._setArrayType([A.ElectrumAPIProvider_ElectrumAPIProvider(_s9_, B.ServiceProtocol_WebSocket_3_websocket, "ws://cbch.loping.net:62103"), A.ElectrumAPIProvider_ElectrumAPIProvider(_s9_0, B.ServiceProtocol_WebSocket_3_websocket, "ws://cbch.loping.net:62104"), A.ElectrumAPIProvider_ElectrumAPIProvider(_s9_1, B.ServiceProtocol_SSL_1_ssl, "cbch.loping.net:62102"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-21", B.ServiceProtocol_SSL_1_ssl, "chipnet.imaginary.cash:50002")], t1), 12, A._setArrayType([A.ElectrumAPIProvider_ElectrumAPIProvider("default-22", B.ServiceProtocol_SSL_1_ssl, "mainnet.pepeblocks.com:50002"), A.ElectrumAPIProvider_ElectrumAPIProvider(_s10_, B.ServiceProtocol_TCP_2_tcp, "mainnet.pepeblocks.com:50001"), A.ElectrumAPIProvider_ElectrumAPIProvider(_s10_, B.ServiceProtocol_WebSocket_3_websocket, "wss://mainnet.pepeblocks.com:50004"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-25", B.ServiceProtocol_SSL_1_ssl, "mainnet.pepelum.site:50002"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-26", B.ServiceProtocol_TCP_2_tcp, "mainnet.pepelum.site:50001"), A.ElectrumAPIProvider_ElectrumAPIProvider("default-27", B.ServiceProtocol_WebSocket_3_websocket, "wss://mainnet.pepelum.site:50004")], t1), 30, A._setArrayType([A.RippleAPIProvider_RippleAPIProvider("default-28", "https://xrplcluster.com/"), A.RippleAPIProvider_RippleAPIProvider("default-29", "wss://xrplcluster.com/")], t1), 31, A._setArrayType([A.RippleAPIProvider_RippleAPIProvider("default-30", "https://s.altnet.rippletest.net:51234/"), A.RippleAPIProvider_RippleAPIProvider("default-31", "wss://s.altnet.rippletest.net:51233")], t1), 32, A._setArrayType([A.RippleAPIProvider_RippleAPIProvider("default-32", "https://s.devnet.rippletest.net:51234/"), A.RippleAPIProvider_RippleAPIProvider("default-33", "wss://s.devnet.rippletest.net:51233")], t1), 33, A._setArrayType([B.SolanaAPIProvider_4N8], t1), 34, A._setArrayType([B.SolanaAPIProvider_g6Y], t1), 35, A._setArrayType([B.SolanaAPIProvider_Vi4], t1), 50, A._setArrayType([A.CardanoAPIProvider_CardanoAPIProvider(B.BasicProviderAuthenticated_DBl, "default-36", _s10_0, "https://cardano-mainnet.blockfrost.io/api/v0/", _s13_)], t1), 51, A._setArrayType([A.CardanoAPIProvider_CardanoAPIProvider(B.BasicProviderAuthenticated_qR6, "default-37", _s10_0, "https://cardano-preprod.blockfrost.io/api/v0/", _s13_)], t1), 100, A._setArrayType([A.EthereumAPIProvider_EthereumAPIProvider("default-38", "wss://ethereum.publicnode.com"), A.EthereumAPIProvider_EthereumAPIProvider("default-39", "https://ethereum.publicnode.com")], t1), 101, A._setArrayType([A.EthereumAPIProvider_EthereumAPIProvider("default-40", "https://ethereum-sepolia.publicnode.com")], t1), 102, A._setArrayType([A.EthereumAPIProvider_EthereumAPIProvider("default-41", "https://polygon-bor.publicnode.com")], t1), 103, A._setArrayType([A.EthereumAPIProvider_EthereumAPIProvider("default-42", "https://polygon-mumbai-bor.publicnode.com")], t1), 104, A._setArrayType([A.EthereumAPIProvider_EthereumAPIProvider("default-43", "https://bsc.publicnode.com")], t1), 105, A._setArrayType([A.EthereumAPIProvider_EthereumAPIProvider("default-44", "https://bsc-testnet.publicnode.com")], t1), 200, A._setArrayType([A.CosmosAPIProvider_CosmosAPIProvider("default-45", "https://cosmos-rpc.publicnode.com:443")], t1), 206, A._setArrayType([A.CosmosAPIProvider_CosmosAPIProvider("default-46", "https://rpc.testnet.osmosis.zone/")], t1), 207, A._setArrayType([A.CosmosAPIProvider_CosmosAPIProvider("default-47", "https://rpc.osmosis.zone/")], t1), 201, A._setArrayType([A.CosmosAPIProvider_CosmosAPIProvider("default-48", "https://rpc.provider-sentry-02.ics-testnet.polypore.xyz")], t1), 202, A._setArrayType([A.CosmosAPIProvider_CosmosAPIProvider("default-49", "https://tendermint.mayachain.info")], t1), 203, A._setArrayType([A.CosmosAPIProvider_CosmosAPIProvider("default-50", "https://rpc.thorchain.liquify.com/")], t1), 204, A._setArrayType([A.CosmosAPIProvider_CosmosAPIProvider("default-51", "https://kujira-testnet-rpc.polkachu.com/")], t1), 205, A._setArrayType([A.CosmosAPIProvider_CosmosAPIProvider("default-52", "https://rpc.cosmos.directory/kujira")], t1), 300, A._setArrayType([A.TonAPIProvider_TonAPIProvider(B.TonApiType_mze, _null, "default-53", "TonAPI", _s17_, _s17_), A.TonAPIProvider_TonAPIProvider(B.TonApiType_jAT, B.BasicProviderAuthenticated_2EA, "default-54", _s9_2, "https://toncenter.com", _s20_)], t1), 301, A._setArrayType([A.TonAPIProvider_TonAPIProvider(B.TonApiType_mze, _null, "default-55", "TonAPI", "https://testnet.tonapi.io", _s17_), A.TonAPIProvider_TonAPIProvider(B.TonApiType_jAT, B.BasicProviderAuthenticated_oxo, "default-56", _s9_2, "https://testnet.toncenter.com", _s20_)], t1), 400, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider("default-57", "https://rpc.polkadot.io")], t1), 401, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider("default-401", "wss://polkadot-asset-hub-rpc.polkadot.io")], t1), 402, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider("default-402", "wss://polkadot-bridge-hub-rpc.polkadot.io")], t1), 450, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider("default-58", "https://kusama-rpc.polkadot.io")], t1), 451, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider("default-59", "wss://westend-rpc.polkadot.io"), A.SubstrateAPIProvider_SubstrateAPIProvider(_s10_1, "https://westend-rpc.polkadot.io")], t1), 452, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider("default-452", "wss://westmint-rpc.dwellir.com:443")], t1), 453, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider("default-453", "wss://kusama-asset-hub-rpc.polkadot.io")], t1), 454, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider("default-454", "wss://kusama-bridge-hub-rpc.polkadot.io")], t1), 455, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider("default-455", "wss://westend-bridge-hub-rpc.polkadot.io:443")], t1), 461, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider("default-461", "wss://moonbase-rpc.dwellir.com"), A.SubstrateAPIProvider_SubstrateAPIProvider("default-461/2", "wss://moonbeam-alpha.api.onfinality.io:443/public-ws")], t1), 460, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider("default-460", "wss://moonbeam-rpc.dwellir.com"), A.SubstrateAPIProvider_SubstrateAPIProvider("default-460/2", "wss://moonbeam.api.onfinality.io/public")], t1), 462, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider(_s11_, "wss://moonriver-rpc.dwellir.com"), A.SubstrateAPIProvider_SubstrateAPIProvider("default-462/2", "wss://moonriver.api.onfinality.io/public")], t1), 463, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider("default-463", "wss://astar-rpc.dwellir.com"), A.SubstrateAPIProvider_SubstrateAPIProvider("default-463/2", "wss://astar.api.onfinality.io/public")], t1), 464, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider(_s11_, "wss://centrifuge-rpc.dwellir.com")], t1), 465, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider("default-465", "wss://acala-rpc-0.aca-api.network")], t1), 466, A._setArrayType([A.SubstrateAPIProvider_SubstrateAPIProvider("default-466", "wss://rpc-pdot.chainflip.io:443")], t1), 600, A._setArrayType([B.StellarAPIProvider_mYi], t1), 601, A._setArrayType([B.StellarAPIProvider_Vpq], t1), 700, A._setArrayType([B.MoneroAPIProvider_9gP, B.MoneroAPIProvider_8Wn], t1), 701, A._setArrayType([B.MoneroAPIProvider_bcm, B.MoneroAPIProvider_WHc, B.MoneroAPIProvider_X4J], t1), 1001, A._setArrayType([A.TronAPIProvider$(_null, "https://api.trongrid.io", _s10_1, A.EthereumAPIProvider_EthereumAPIProvider("default-61", "https://api.trongrid.io/jsonrpc"))], t1), 1002, A._setArrayType([A.TronAPIProvider$(_null, "https://api.shasta.trongrid.io", "default-62", A.EthereumAPIProvider_EthereumAPIProvider("default-63", "https://api.shasta.trongrid.io/jsonrpc"))], t1), 1003, A._setArrayType([A.TronAPIProvider$(_null, "https://nile.trongrid.io", "default-64", A.EthereumAPIProvider_EthereumAPIProvider("default-65", "https://nile.trongrid.io/jsonrpc"))], t1), 106, A._setArrayType([A.EthereumAPIProvider_EthereumAPIProvider("default-66", "https://api.avax.network/ext/bc/C/rpc")], t1), 107, A._setArrayType([A.EthereumAPIProvider_EthereumAPIProvider("default-68", "https://arb1.arbitrum.io/rpc"), A.EthereumAPIProvider_EthereumAPIProvider("default-69 ", "https://arbitrum-one-rpc.publicnode.com")], t1), 108, A._setArrayType([A.EthereumAPIProvider_EthereumAPIProvider(_s10_2, "https://mainnet.base.org")], t1), 109, A._setArrayType([A.EthereumAPIProvider_EthereumAPIProvider(_s10_2, "https://mainnet.optimism.io"), A.EthereumAPIProvider_EthereumAPIProvider("default-71", "https://optimism-rpc.publicnode.com")], t1), 800, A._setArrayType([A.SuiAPIProvider$(_null, "https://fullnode.mainnet.sui.io:443", "default-800_1"), A.SuiAPIProvider$(_null, "https://sui-rpc.publicnode.com", "default-800_2")], t1), 801, A._setArrayType([A.SuiAPIProvider$(_null, "https://fullnode.devnet.sui.io:443", "default-801")], t1), 802, A._setArrayType([A.SuiAPIProvider$(_null, "https://fullnode.testnet.sui.io:443", "default-802")], t1), 810, A._setArrayType([A.AptosAPIProvider$(_null, "https://api.mainnet.aptoslabs.com/v1/", "default-810_1", B.AptosAPIProviderType_0_fullnode), A.AptosAPIProvider$(_null, "https://api.mainnet.aptoslabs.com/v1/graphql", _s13_0, B.AptosAPIProviderType_1_graphQl)], t1), 811, A._setArrayType([A.AptosAPIProvider$(_null, "https://api.testnet.aptoslabs.com/v1/", _s13_0, B.AptosAPIProviderType_0_fullnode), A.AptosAPIProvider$(_null, "https://api.testnet.aptoslabs.com/v1/graphql", _s13_0, B.AptosAPIProviderType_1_graphQl)], t1), 812, A._setArrayType([A.AptosAPIProvider$(_null, "https://api.devnet.aptoslabs.com/v1/", _s13_1, B.AptosAPIProviderType_0_fullnode), A.AptosAPIProvider$(_null, "https://api.devnet.aptoslabs.com/v1/graphql", _s13_1, B.AptosAPIProviderType_1_graphQl)], t1)], t2, t2), type$.int, type$.List_APIProvider);
    });
    _lazyFinal($, "_DefaultAppCoins_bitcoinCashMainnet", "$get$_DefaultAppCoins_bitcoinCashMainnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_bch(), 8, B.CoingeckoCoin_Src, "BitcoinCash", "BCH");
      return A.BitcoinParams$(null, A._setArrayType([], type$.JSArray_BaseBitcoinAPIProvider), t1, B.BitcoinCashNetwork_DE4, null);
    });
    _lazyFinal($, "_DefaultAppCoins_bitcoinCashChipnet", "$get$_DefaultAppCoins_bitcoinCashChipnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_bch(), 8, B.CoingeckoCoin_Src, "BitcoinCash chipnet", "tBCH");
      return A.BitcoinParams$(null, A._setArrayType([], type$.JSArray_BaseBitcoinAPIProvider), t1, B.BitcoinCashNetwork_Ose, null);
    });
    _lazyFinal($, "_DefaultAppCoins_bitcoinMainnet", "$get$_DefaultAppCoins_bitcoinMainnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_btc(), 8, B.CoingeckoCoin_bitcoin_bitcoin_null, "Bitcoin", "BTC");
      return A.BitcoinParams$(null, A._setArrayType([], type$.JSArray_BaseBitcoinAPIProvider), t1, B.BitcoinNetwork_o5I, null);
    });
    _lazyFinal($, "_DefaultAppCoins_bitcoinTestnet", "$get$_DefaultAppCoins_bitcoinTestnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_btc(), 8, B.CoingeckoCoin_bitcoin_bitcoin_null, "Bitcoin testnet", "tBTC");
      return A.BitcoinParams$(null, A._setArrayType([], type$.JSArray_BaseBitcoinAPIProvider), t1, B.BitcoinNetwork_o9i, null);
    });
    _lazyFinal($, "_DefaultAppCoins_bitcoinTestnet4", "$get$_DefaultAppCoins_bitcoinTestnet4", () => {
      var t1 = A.Token_Token($.$get$APPConst_btc(), 8, B.CoingeckoCoin_bitcoin_bitcoin_null, "Bitcoin testnet4", "tBTC");
      return A.BitcoinParams$(null, A._setArrayType([], type$.JSArray_BaseBitcoinAPIProvider), t1, B.BitcoinNetwork_IWD, null);
    });
    _lazyFinal($, "_DefaultAppCoins_litecoinMainnet", "$get$_DefaultAppCoins_litecoinMainnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_ltc(), 8, B.CoingeckoCoin_litecoin_litecoin_null, "Litecoin", "LTC");
      return A.BitcoinParams$(null, A._setArrayType([], type$.JSArray_BaseBitcoinAPIProvider), t1, B.LitecoinNetwork_A6S, null);
    });
    _lazyFinal($, "_DefaultAppCoins_litecoinTestnet", "$get$_DefaultAppCoins_litecoinTestnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_ltc(), 8, B.CoingeckoCoin_litecoin_litecoin_null, "Litecoin testnet", "tLTC");
      return A.BitcoinParams$(null, A._setArrayType([], type$.JSArray_BaseBitcoinAPIProvider), t1, B.LitecoinNetwork_n3A, null);
    });
    _lazyFinal($, "_DefaultAppCoins_dogecoinMainnet", "$get$_DefaultAppCoins_dogecoinMainnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_doge(), 8, B.CoingeckoCoin_dogecoin_dogecoin_null, "Dogecoin", "\u0189");
      return A.BitcoinParams$(null, A._setArrayType([], type$.JSArray_BaseBitcoinAPIProvider), t1, B.DogecoinNetwork_g3g, null);
    });
    _lazyFinal($, "_DefaultAppCoins_pepecoinMainnet", "$get$_DefaultAppCoins_pepecoinMainnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_pepecoin(), 8, B.CoingeckoCoin_oG2, "Pepecoin", "\u20b1");
      return A.BitcoinParams$(null, A._setArrayType([], type$.JSArray_BaseBitcoinAPIProvider), t1, B.C_PepeNetwork, null);
    });
    _lazyFinal($, "_DefaultAppCoins_dogeTestnet", "$get$_DefaultAppCoins_dogeTestnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_doge(), 8, B.CoingeckoCoin_dogecoin_dogecoin_null, "Dogecoin testnet", "t\u0189");
      return A.BitcoinParams$(null, A._setArrayType([], type$.JSArray_BaseBitcoinAPIProvider), t1, B.DogecoinNetwork_htF, null);
    });
    _lazyFinal($, "_DefaultAppCoins_bsvMainnet", "$get$_DefaultAppCoins_bsvMainnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_bsv(), 8, B.CoingeckoCoin_wKK, "BitcoinSV", "BSV");
      return A.BitcoinParams$(null, A._setArrayType([], type$.JSArray_BaseBitcoinAPIProvider), t1, B.BitcoinSVNetwork_f7v, null);
    });
    _lazyFinal($, "_DefaultAppCoins_dashMainnet", "$get$_DefaultAppCoins_dashMainnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_dash(), 8, B.CoingeckoCoin_dash_dash_null, "Dash", "DASH");
      return A.BitcoinParams$(null, A._setArrayType([], type$.JSArray_BaseBitcoinAPIProvider), t1, B.DashNetwork_rwj, null);
    });
    _lazyFinal($, "_DefaultAppCoins_xrpMainnet", "$get$_DefaultAppCoins_xrpMainnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_xrp(), 6, B.CoingeckoCoin_ripple_xrp_null, "Ripple", "XRP");
      return A.RippleNetworkParams$(null, B.ChainType_mainnet, 0, A._setArrayType([], A.findType("JSArray<RippleAPIProvider>")), t1, null);
    });
    _lazyFinal($, "_DefaultAppCoins_xrpTestnet", "$get$_DefaultAppCoins_xrpTestnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_xrp(), 6, B.CoingeckoCoin_ripple_xrp_null, "Ripple testnet", "tXRP");
      return A.RippleNetworkParams$(null, B.ChainType_testnet, 1, A._setArrayType([], A.findType("JSArray<RippleAPIProvider>")), t1, null);
    });
    _lazyFinal($, "_DefaultAppCoins_xrpDevnet", "$get$_DefaultAppCoins_xrpDevnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_xrp(), 6, B.CoingeckoCoin_ripple_xrp_null, "Ripple devnet", "tXRP");
      return A.RippleNetworkParams$(null, B.ChainType_testnet, 2, A._setArrayType([], A.findType("JSArray<RippleAPIProvider>")), t1, null);
    });
    _lazyFinal($, "_DefaultAppCoins_ethreumMainnet", "$get$_DefaultAppCoins_ethreumMainnet", () => {
      var t1 = $.$get$_BigIntImpl_one(),
        t2 = A.Token_Token($.$get$APPConst_eth(), 18, B.CoingeckoCoin_ethereum_ethereum_null, "Ethereum", "ETH");
      return A.EthereumNetworkParams_EthereumNetworkParams(null, null, t1, B.ChainType_mainnet, true, A._setArrayType([], type$.JSArray_EthereumAPIProvider), true, t2, null);
    });
    _lazyFinal($, "_DefaultAppCoins_avalanche", "$get$_DefaultAppCoins_avalanche", () => {
      var t1 = A._BigIntImpl__BigIntImpl$from(43114),
        t2 = A.Token_Token($.$get$APPConst_avalance(), 18, B.CoingeckoCoin_Ni5, "Avalanche", "AVAX");
      return A.EthereumNetworkParams_EthereumNetworkParams(null, null, t1, B.ChainType_mainnet, true, A._setArrayType([], type$.JSArray_EthereumAPIProvider), true, t2, null);
    });
    _lazyFinal($, "_DefaultAppCoins_arbitrum", "$get$_DefaultAppCoins_arbitrum", () => {
      var t1 = A._BigIntImpl__BigIntImpl$from(42161),
        t2 = A.Token_Token($.$get$APPConst_arbitrum(), 18, B.CoingeckoCoin_arbitrum_arbitrum_null, "Arbitrum", "ARB");
      return A.EthereumNetworkParams_EthereumNetworkParams(null, null, t1, B.ChainType_mainnet, true, A._setArrayType([], type$.JSArray_EthereumAPIProvider), true, t2, null);
    });
    _lazyFinal($, "_DefaultAppCoins_base", "$get$_DefaultAppCoins_base", () => {
      var _null = null,
        t1 = A._BigIntImpl__BigIntImpl$from(8453),
        t2 = A.Token_Token($.$get$APPConst_base(), 18, _null, "Base Mainnet", "ETH");
      return A.EthereumNetworkParams_EthereumNetworkParams(_null, _null, t1, B.ChainType_mainnet, true, A._setArrayType([], type$.JSArray_EthereumAPIProvider), true, t2, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_optimism", "$get$_DefaultAppCoins_optimism", () => {
      var _null = null,
        t1 = A._BigIntImpl__BigIntImpl$from(10),
        t2 = A.Token_Token($.$get$APPConst_optimistic(), 18, _null, "OP Mainnet", "ETH");
      return A.EthereumNetworkParams_EthereumNetworkParams(_null, _null, t1, B.ChainType_mainnet, true, A._setArrayType([], type$.JSArray_EthereumAPIProvider), true, t2, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_ethreumTestnet", "$get$_DefaultAppCoins_ethreumTestnet", () => {
      var t1 = A._BigIntImpl__BigIntImpl$from(11155111),
        t2 = A.Token_Token($.$get$APPConst_eth(), 18, B.CoingeckoCoin_ethereum_ethereum_null, "Ethereum Sepolia testnet", "tETH");
      return A.EthereumNetworkParams_EthereumNetworkParams(null, null, t1, B.ChainType_testnet, true, A._setArrayType([], type$.JSArray_EthereumAPIProvider), true, t2, null);
    });
    _lazyFinal($, "_DefaultAppCoins_polygon", "$get$_DefaultAppCoins_polygon", () => {
      var t1 = A._BigIntImpl__BigIntImpl$from(137),
        t2 = A.Token_Token($.$get$APPConst_matic(), 18, B.CoingeckoCoin_qxy, "Polygon", "MATIC");
      return A.EthereumNetworkParams_EthereumNetworkParams(null, null, t1, B.ChainType_mainnet, true, A._setArrayType([], type$.JSArray_EthereumAPIProvider), true, t2, null);
    });
    _lazyFinal($, "_DefaultAppCoins_polygonTestnet", "$get$_DefaultAppCoins_polygonTestnet", () => {
      var t1 = A._BigIntImpl__BigIntImpl$from(80001),
        t2 = A.Token_Token($.$get$APPConst_matic(), 18, B.CoingeckoCoin_qxy, "Polygon mumbai testnet", "tMATIC");
      return A.EthereumNetworkParams_EthereumNetworkParams(null, null, t1, B.ChainType_testnet, true, A._setArrayType([], type$.JSArray_EthereumAPIProvider), true, t2, null);
    });
    _lazyFinal($, "_DefaultAppCoins_bnb", "$get$_DefaultAppCoins_bnb", () => {
      var t1 = A._BigIntImpl__BigIntImpl$from(56),
        t2 = A.Token_Token($.$get$APPConst_bnb(), 18, B.CoingeckoCoin_binancecoin_bnb_null, "BNB Smart Chain", "BNB");
      return A.EthereumNetworkParams_EthereumNetworkParams(null, null, t1, B.ChainType_mainnet, true, A._setArrayType([], type$.JSArray_EthereumAPIProvider), false, t2, null);
    });
    _lazyFinal($, "_DefaultAppCoins_bnbTestnet", "$get$_DefaultAppCoins_bnbTestnet", () => {
      var t1 = A._BigIntImpl__BigIntImpl$from(97),
        t2 = A.Token_Token($.$get$APPConst_bnb(), 18, B.CoingeckoCoin_binancecoin_bnb_null, "BNB Smart chain testnet", "tBNB");
      return A.EthereumNetworkParams_EthereumNetworkParams(null, null, t1, B.ChainType_testnet, true, A._setArrayType([], type$.JSArray_EthereumAPIProvider), false, t2, null);
    });
    _lazyFinal($, "_DefaultAppCoins_tronShasta", "$get$_DefaultAppCoins_tronShasta", () => {
      var t1 = A.Token_Token($.$get$APPConst_trx(), 6, B.CoingeckoCoin_tron_tron_null, "Tron shasta testnet", "tTRX");
      return A.TronNetworkParams$(null, B.ChainType_testnet, A._setArrayType([], A.findType("JSArray<TronAPIProvider>")), t1, null);
    });
    _lazyFinal($, "_DefaultAppCoins_tronNile", "$get$_DefaultAppCoins_tronNile", () => {
      var t1 = A.Token_Token($.$get$APPConst_trx(), 6, B.CoingeckoCoin_tron_tron_null, "Tron nile testnet", "tTRX");
      return A.TronNetworkParams$(null, B.ChainType_testnet, A._setArrayType([], A.findType("JSArray<TronAPIProvider>")), t1, null);
    });
    _lazyFinal($, "_DefaultAppCoins_tron", "$get$_DefaultAppCoins_tron", () => {
      var t1 = A.Token_Token($.$get$APPConst_trx(), 6, B.CoingeckoCoin_tron_tron_null, "Tron", "TRX");
      return A.TronNetworkParams$(null, B.ChainType_mainnet, A._setArrayType([], A.findType("JSArray<TronAPIProvider>")), t1, null);
    });
    _lazyFinal($, "_DefaultAppCoins_solana", "$get$_DefaultAppCoins_solana", () => {
      var t1 = A.Token_Token($.$get$APPConst_sol(), 9, B.CoingeckoCoin_solana_solana_null, "Solana", "SOL");
      return A.SolanaNetworkParams$(null, 101, B.ChainType_mainnet, A._setArrayType([], A.findType("JSArray<SolanaAPIProvider>")), t1, null, B.SolanaNetworkType_Z3x);
    });
    _lazyFinal($, "_DefaultAppCoins_solanaTestnet", "$get$_DefaultAppCoins_solanaTestnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_sol(), 9, B.CoingeckoCoin_solana_solana_null, "Solana testnet", "tSOL");
      return A.SolanaNetworkParams$(null, 102, B.ChainType_testnet, A._setArrayType([], A.findType("JSArray<SolanaAPIProvider>")), t1, null, B.SolanaNetworkType_Lxm);
    });
    _lazyFinal($, "_DefaultAppCoins_solanaDevnet", "$get$_DefaultAppCoins_solanaDevnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_sol(), 9, B.CoingeckoCoin_solana_solana_null, "Solana devnet", "tSOL");
      return A.SolanaNetworkParams$(null, 103, B.ChainType_testnet, A._setArrayType([], A.findType("JSArray<SolanaAPIProvider>")), t1, null, B.SolanaNetworkType_QDD);
    });
    _lazyFinal($, "_DefaultAppCoins_cardanoPreprod", "$get$_DefaultAppCoins_cardanoPreprod", () => {
      var t1 = A.Token_Token($.$get$APPConst_ada(), 6, B.CoingeckoCoin_cardano_cardano_null, "Cardano preprod", "tADA");
      return A.CardanoNetworkParams$(null, B.ChainType_testnet, 1, A._setArrayType([], A.findType("JSArray<CardanoAPIProvider>")), t1, null);
    });
    _lazyFinal($, "_DefaultAppCoins_cardano", "$get$_DefaultAppCoins_cardano", () => {
      var t1 = A.Token_Token($.$get$APPConst_ada(), 6, B.CoingeckoCoin_cardano_cardano_null, "Cardano", "ADA");
      return A.CardanoNetworkParams$(null, B.ChainType_mainnet, 764824073, A._setArrayType([], A.findType("JSArray<CardanoAPIProvider>")), t1, null);
    });
    _lazyFinal($, "_DefaultAppCoins_cosmosTestnet", "$get$_DefaultAppCoins_cosmosTestnet", () => {
      var _s20_ = "ICS Provider Testnet",
        _null = null,
        t1 = A.BigRational_BigRational$parseDecimal("0.025"),
        t2 = A.BigRational_BigRational$parseDecimal("0.03"),
        t3 = A.BigRational_BigRational$parseDecimal("0.01"),
        t4 = $.$get$APPConst_atom();
      t3 = A._setArrayType([A.CosmosFeeToken_CosmosFeeToken(t1, "uatom", t2, t3, A.Token_Token(t4, 6, B.CoingeckoCoin_35V, _s20_, "tATOM"))], type$.JSArray_CosmosFeeToken);
      t4 = A.Token_Token(t4, 6, B.CoingeckoCoin_35V, _s20_, "tATOM");
      t2 = A._setArrayType([], type$.JSArray_CosmosAPIProvider);
      return A.CosmosNetworkParams_CosmosNetworkParams(_null, _null, "provider", "cosmosicsprovidertestnet", B.ChainType_testnet, "uatom", t3, "cosmos", A._setArrayType([B.CosmosKeysAlgs_secp256k1], type$.JSArray_CosmosKeysAlgs), _null, B.CosmosNetworkTypes_0, t2, t4, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_cosmos", "$get$_DefaultAppCoins_cosmos", () => {
      var _s10_ = "Cosmos hub",
        _null = null,
        t1 = A.BigRational_BigRational$parseDecimal("0.025"),
        t2 = A.BigRational_BigRational$parseDecimal("0.03"),
        t3 = A.BigRational_BigRational$parseDecimal("0.01"),
        t4 = $.$get$APPConst_atom();
      t3 = A._setArrayType([A.CosmosFeeToken_CosmosFeeToken(t1, "uatom", t2, t3, A.Token_Token(t4, 6, B.CoingeckoCoin_35V, _s10_, "ATOM"))], type$.JSArray_CosmosFeeToken);
      t4 = A.Token_Token(t4, 6, B.CoingeckoCoin_35V, _s10_, "ATOM");
      t2 = A._setArrayType([], type$.JSArray_CosmosAPIProvider);
      return A.CosmosNetworkParams_CosmosNetworkParams(_null, _null, "cosmoshub-4", "cosmoshub", B.ChainType_mainnet, "uatom", t3, "cosmos", A._setArrayType([B.CosmosKeysAlgs_secp256k1], type$.JSArray_CosmosKeysAlgs), _null, B.CosmosNetworkTypes_0, t2, t4, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_maya", "$get$_DefaultAppCoins_maya", () => {
      var t3,
        _s13_ = "Maya Protocol",
        _null = null,
        t1 = A.BigRational_BigRational$from(2000000000),
        t2 = $.$get$APPConst_cacao();
      t1 = A._setArrayType([A.CosmosFeeToken_CosmosFeeToken(t1, "cacao", _null, _null, A.Token_Token(t2, 10, B.CoingeckoCoin_7Um, _s13_, "Cacao"))], type$.JSArray_CosmosFeeToken);
      t2 = A.Token_Token(t2, 10, B.CoingeckoCoin_7Um, _s13_, "Cacao");
      t3 = A._setArrayType([], type$.JSArray_CosmosAPIProvider);
      return A.CosmosNetworkParams_CosmosNetworkParams(_null, _null, "mayachain-mainnet-v1", "mayachain", B.ChainType_mainnet, "cacao", t1, "maya", A._setArrayType([B.CosmosKeysAlgs_secp256k1], type$.JSArray_CosmosKeysAlgs), "https://mayanode.mayachain.info/mayachain/constants", B.CosmosNetworkTypes_2, t3, t2, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_thorchain", "$get$_DefaultAppCoins_thorchain", () => {
      var t3,
        _s9_ = "THORChain",
        _null = null,
        t1 = A.BigRational_BigRational$from(2000000),
        t2 = $.$get$APPConst_thor();
      t1 = A._setArrayType([A.CosmosFeeToken_CosmosFeeToken(t1, "rune", _null, _null, A.Token_Token(t2, 8, B.CoingeckoCoin_thorchain_thorchain_null, _s9_, "Rune"))], type$.JSArray_CosmosFeeToken);
      t2 = A.Token_Token(t2, 8, B.CoingeckoCoin_thorchain_thorchain_null, _s9_, "Rune");
      t3 = A._setArrayType([], type$.JSArray_CosmosAPIProvider);
      return A.CosmosNetworkParams_CosmosNetworkParams(_null, 931, "thorchain-1", "thorchain", B.ChainType_mainnet, "rune", t1, "thor", A._setArrayType([B.CosmosKeysAlgs_secp256k1], type$.JSArray_CosmosKeysAlgs), "https://thornode.ninerealms.com/thorchain/constants", B.CosmosNetworkTypes_2, t3, t2, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_kujiraTestnet", "$get$_DefaultAppCoins_kujiraTestnet", () => {
      var _s14_ = "Kujira Testnet",
        _null = null,
        t1 = A.BigRational_BigRational$parseDecimal("0.0051"),
        t2 = A.BigRational_BigRational$parseDecimal("0.00681"),
        t3 = A.BigRational_BigRational$parseDecimal("0.0034"),
        t4 = $.$get$APPConst_kujira();
      t3 = A._setArrayType([A.CosmosFeeToken_CosmosFeeToken(t1, "ukuji", t2, t3, A.Token_Token(t4, 6, B.CoingeckoCoin_kujira_kujira_null, _s14_, "tKuji"))], type$.JSArray_CosmosFeeToken);
      t4 = A.Token_Token(t4, 6, B.CoingeckoCoin_kujira_kujira_null, _s14_, "tKuji");
      t2 = A._setArrayType([], type$.JSArray_CosmosAPIProvider);
      return A.CosmosNetworkParams_CosmosNetworkParams(_null, _null, "harpoon-4", "kujiratestnet", B.ChainType_testnet, "ukuji", t3, "kujira", A._setArrayType([B.CosmosKeysAlgs_secp256k1], type$.JSArray_CosmosKeysAlgs), _null, B.CosmosNetworkTypes_1, t2, t4, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_kujira", "$get$_DefaultAppCoins_kujira", () => {
      var _null = null,
        t1 = A.BigRational_BigRational$parseDecimal("0.0051"),
        t2 = A.BigRational_BigRational$parseDecimal("0.00681"),
        t3 = A.BigRational_BigRational$parseDecimal("0.0034"),
        t4 = $.$get$APPConst_kujira();
      t3 = A._setArrayType([A.CosmosFeeToken_CosmosFeeToken(t1, "ukuji", t2, t3, A.Token_Token(t4, 6, B.CoingeckoCoin_kujira_kujira_null, "Kujira", "Kuji"))], type$.JSArray_CosmosFeeToken);
      t4 = A.Token_Token(t4, 6, B.CoingeckoCoin_kujira_kujira_null, "Kujira", "Kuji");
      t2 = A._setArrayType([], type$.JSArray_CosmosAPIProvider);
      return A.CosmosNetworkParams_CosmosNetworkParams(_null, _null, "kaiyo-1", "kujira", B.ChainType_mainnet, "ukuji", t3, "kujira", A._setArrayType([B.CosmosKeysAlgs_secp256k1], type$.JSArray_CosmosKeysAlgs), _null, B.CosmosNetworkTypes_1, t2, t4, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_osmosisTestnet", "$get$_DefaultAppCoins_osmosisTestnet", () => {
      var _s12_ = "Osmo testnet",
        _null = null,
        t1 = A.BigRational_BigRational$parseDecimal("0.025"),
        t2 = A.BigRational_BigRational$parseDecimal("0.04"),
        t3 = A.BigRational_BigRational$parseDecimal("0.0025"),
        t4 = $.$get$APPConst_osmo();
      t3 = A._setArrayType([A.CosmosFeeToken_CosmosFeeToken(t1, "uosmo", t2, t3, A.Token_Token(t4, 6, B.CoingeckoCoin_osmosis_osmosis_null, _s12_, "tOsmo"))], type$.JSArray_CosmosFeeToken);
      t4 = A.Token_Token(t4, 6, B.CoingeckoCoin_osmosis_osmosis_null, _s12_, "tOsmo");
      t2 = A._setArrayType([], type$.JSArray_CosmosAPIProvider);
      return A.CosmosNetworkParams_CosmosNetworkParams(_null, _null, "osmo-test-5", "osmosistestnet", B.ChainType_testnet, "uosmo", t3, "osmo", A._setArrayType([B.CosmosKeysAlgs_secp256k1], type$.JSArray_CosmosKeysAlgs), _null, B.CosmosNetworkTypes_0, t2, t4, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_osmosis", "$get$_DefaultAppCoins_osmosis", () => {
      var _null = null,
        t1 = A.BigRational_BigRational$parseDecimal("0.025"),
        t2 = A.BigRational_BigRational$parseDecimal("0.04"),
        t3 = A.BigRational_BigRational$parseDecimal("0.0025"),
        t4 = $.$get$APPConst_osmo();
      t3 = A._setArrayType([A.CosmosFeeToken_CosmosFeeToken(t1, "uosmo", t2, t3, A.Token_Token(t4, 6, B.CoingeckoCoin_osmosis_osmosis_null, "Osmosis", "Osmo"))], type$.JSArray_CosmosFeeToken);
      t4 = A.Token_Token(t4, 6, B.CoingeckoCoin_osmosis_osmosis_null, "Osmosis", "Osmo");
      t2 = A._setArrayType([], type$.JSArray_CosmosAPIProvider);
      return A.CosmosNetworkParams_CosmosNetworkParams(_null, _null, "osmosis-1", "osmosis", B.ChainType_mainnet, "uosmo", t3, "osmo", A._setArrayType([B.CosmosKeysAlgs_secp256k1], type$.JSArray_CosmosKeysAlgs), _null, B.CosmosNetworkTypes_0, t2, t4, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_tonTestnet", "$get$_DefaultAppCoins_tonTestnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_ton(), 9, B.CoingeckoCoin_Me9, "TonCoin testnet", "tTon");
      return A.TonNetworkParams$(null, B.ChainType_testnet, A._setArrayType([], A.findType("JSArray<TonAPIProvider>")), t1, null, -1);
    });
    _lazyFinal($, "_DefaultAppCoins_tonMainnet", "$get$_DefaultAppCoins_tonMainnet", () => {
      var t1 = A.Token_Token($.$get$APPConst_ton(), 9, B.CoingeckoCoin_Me9, "TonCoin", "Ton");
      return A.TonNetworkParams$(null, B.ChainType_mainnet, A._setArrayType([], A.findType("JSArray<TonAPIProvider>")), t1, null, 0);
    });
    _lazyFinal($, "_DefaultAppCoins_westend", "$get$_DefaultAppCoins_westend", () => {
      var _null = null,
        t1 = A.Token_Token(_null, 12, _null, "Westend", "WND");
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_testnet, _null, B.List_ANg, A._setArrayType([], type$.JSArray_SubstrateAPIProvider), 1017001, 42, B.SubstrateChainType_0_substrate, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_cf", "$get$_DefaultAppCoins_cf", () => {
      var _null = null,
        t1 = A.Token_Token(_null, 10, _null, "ChainFlip", "tDOT");
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_testnet, _null, B.List_ANg, A._setArrayType([], type$.JSArray_SubstrateAPIProvider), 1017001, 0, B.SubstrateChainType_0_substrate, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_westendAssetHub", "$get$_DefaultAppCoins_westendAssetHub", () => {
      var _null = null,
        t1 = A.Token_Token(_null, 12, _null, "Westend Asset Hub", "WND");
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_testnet, _null, B.List_ANg, A._setArrayType([], type$.JSArray_SubstrateAPIProvider), 1017004, 42, B.SubstrateChainType_0_substrate, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_westendBridgeHub", "$get$_DefaultAppCoins_westendBridgeHub", () => {
      var _null = null,
        t1 = A.Token_Token(_null, 12, _null, "Westend Bridge Hub", "WND");
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_testnet, _null, B.List_ANg, A._setArrayType([], type$.JSArray_SubstrateAPIProvider), 1017001, 42, B.SubstrateChainType_0_substrate, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_polkadot", "$get$_DefaultAppCoins_polkadot", () => {
      var _null = null,
        t1 = A.Token_Token($.$get$APPConst_polkadot(), 10, B.CoingeckoCoin_polkadot_polkadot_DOT, "Polkadot", "DOT");
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_mainnet, _null, B.List_ANg, A._setArrayType([], type$.JSArray_SubstrateAPIProvider), 1003004, 0, B.SubstrateChainType_0_substrate, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_polkadotAssetHub", "$get$_DefaultAppCoins_polkadotAssetHub", () => {
      var _null = null,
        t1 = A.Token_Token($.$get$APPConst_polkadot(), 10, B.CoingeckoCoin_polkadot_polkadot_DOT, "Polkadot Asset Hub", "DOT");
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_mainnet, _null, B.List_ANg, A._setArrayType([], type$.JSArray_SubstrateAPIProvider), 1003004, 0, B.SubstrateChainType_0_substrate, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_polkadotBridgeHub", "$get$_DefaultAppCoins_polkadotBridgeHub", () => {
      var _null = null,
        t1 = A.Token_Token($.$get$APPConst_polkadot(), 10, B.CoingeckoCoin_polkadot_polkadot_DOT, "polkadot Bridge Hub", "DOT");
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_mainnet, _null, B.List_ANg, A._setArrayType([], type$.JSArray_SubstrateAPIProvider), 1003003, 0, B.SubstrateChainType_0_substrate, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_kusama", "$get$_DefaultAppCoins_kusama", () => {
      var _null = null,
        t1 = A.Token_Token($.$get$APPConst_kusama(), 12, B.CoingeckoCoin_kusama_kusama_KSM, "Kusama", "KSM");
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_mainnet, _null, B.List_ANg, A._setArrayType([], type$.JSArray_SubstrateAPIProvider), 1003003, 2, B.SubstrateChainType_0_substrate, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_kusamaAssetHub", "$get$_DefaultAppCoins_kusamaAssetHub", () => {
      var _null = null,
        t1 = A.Token_Token($.$get$APPConst_kusama(), 12, B.CoingeckoCoin_kusama_kusama_KSM, "Kusama Asset Hub", "KSM");
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_mainnet, _null, B.List_ANg, A._setArrayType([], type$.JSArray_SubstrateAPIProvider), 1003004, 2, B.SubstrateChainType_0_substrate, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_kusamaBridgeHub", "$get$_DefaultAppCoins_kusamaBridgeHub", () => {
      var _null = null,
        t1 = A.Token_Token($.$get$APPConst_kusama(), 12, B.CoingeckoCoin_kusama_kusama_KSM, "Kusama Bridge Hub", "KSM");
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_mainnet, _null, B.List_ANg, A._setArrayType([], type$.JSArray_SubstrateAPIProvider), 1003003, 2, B.SubstrateChainType_0_substrate, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_moonBase", "$get$_DefaultAppCoins_moonBase", () => {
      var _null = null,
        t1 = A.Token_Token($.$get$APPConst_moonbeam(), 18, B.CoingeckoCoin_moonbeam_moonbeam_GLMR, "Moonbase Alpha", "GLMR"),
        t2 = A._setArrayType([], type$.JSArray_SubstrateAPIProvider);
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_testnet, _null, A._setArrayType([B.SubstrateKeyAlgorithm_3_ethereum], type$.JSArray_SubstrateKeyAlgorithm), t2, 3400, 1284, B.SubstrateChainType_1_ethereum, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_moonbeam", "$get$_DefaultAppCoins_moonbeam", () => {
      var _null = null,
        t1 = A.Token_Token($.$get$APPConst_moonbeam(), 18, B.CoingeckoCoin_moonbeam_moonbeam_GLMR, "Moonbeam", "GLMR"),
        t2 = A._setArrayType([], type$.JSArray_SubstrateAPIProvider);
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_mainnet, _null, A._setArrayType([B.SubstrateKeyAlgorithm_3_ethereum], type$.JSArray_SubstrateKeyAlgorithm), t2, 3300, 1284, B.SubstrateChainType_1_ethereum, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_moonriver", "$get$_DefaultAppCoins_moonriver", () => {
      var _null = null,
        t1 = A.Token_Token($.$get$APPConst_moonriver(), 18, B.CoingeckoCoin_moonriver_moonriver_MOVR, "Moonriver", "MOVR"),
        t2 = A._setArrayType([], type$.JSArray_SubstrateAPIProvider);
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_mainnet, _null, A._setArrayType([B.SubstrateKeyAlgorithm_3_ethereum], type$.JSArray_SubstrateKeyAlgorithm), t2, 3400, 1285, B.SubstrateChainType_1_ethereum, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_astar", "$get$_DefaultAppCoins_astar", () => {
      var _null = null,
        t1 = A.Token_Token($.$get$APPConst_astar(), 18, B.CoingeckoCoin_astar_astar_ASTR, "Astar", "ASTR");
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_mainnet, _null, B.List_ANg, A._setArrayType([], type$.JSArray_SubstrateAPIProvider), 1200, 5, B.SubstrateChainType_0_substrate, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_centrifuge", "$get$_DefaultAppCoins_centrifuge", () => {
      var _null = null,
        t1 = A.Token_Token($.$get$APPConst_centrifuge(), 18, B.CoingeckoCoin_centrifuge_centrifuge_CFG, "Centrifuge", "CFG");
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_mainnet, _null, B.List_ANg, A._setArrayType([], type$.JSArray_SubstrateAPIProvider), 1400, 36, B.SubstrateChainType_0_substrate, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_acala", "$get$_DefaultAppCoins_acala", () => {
      var _null = null,
        t1 = A.Token_Token($.$get$APPConst_acala(), 12, B.CoingeckoCoin_acala_acala_ACA, "Acala", "ACA");
      return A.SubstrateNetworkParams$(_null, _null, B.ChainType_mainnet, _null, B.List_ANg, A._setArrayType([], type$.JSArray_SubstrateAPIProvider), 2270, 10, B.SubstrateChainType_0_substrate, t1, _null);
    });
    _lazyFinal($, "_DefaultAppCoins_stellarMainnet", "$get$_DefaultAppCoins_stellarMainnet", () => A.StellarNetworkParams$(null, B.ChainType_mainnet, B.List_empty13, B.StellarChainType_2_mainnet, A.Token_Token($.$get$APPConst_stellar(), 7, B.CoingeckoCoin_stellar_stellar_XLM, "Stellar", "XLM"), null));
    _lazyFinal($, "_DefaultAppCoins_stellarTestnet", "$get$_DefaultAppCoins_stellarTestnet", () => A.StellarNetworkParams$(null, B.ChainType_testnet, B.List_empty13, B.StellarChainType_1_testnet, A.Token_Token($.$get$APPConst_stellar(), 7, B.CoingeckoCoin_stellar_stellar_XLM, "Stellar testnet", "tXLM"), null));
    _lazyFinal($, "_DefaultAppCoins_moneroTestnet", "$get$_DefaultAppCoins_moneroTestnet", () => A.MoneroNetworkParams$(null, B.ChainType_testnet, B.MoneroNetwork_Stagenet, B.List_empty12, 96211, A.Token_Token($.$get$APPConst_monero(), 12, B.CoingeckoCoin_monero_monero_XMR, "Monero stagenet", "tXMR"), null));
    _lazyFinal($, "_DefaultAppCoins_monero", "$get$_DefaultAppCoins_monero", () => A.MoneroNetworkParams$(null, B.ChainType_mainnet, B.MoneroNetwork_Mainnet, B.List_empty12, 1220517, A.Token_Token($.$get$APPConst_monero(), 12, B.CoingeckoCoin_monero_monero_XMR, "Monero", "XMR"), null));
    _lazyFinal($, "_DefaultAppCoins_aptos", "$get$_DefaultAppCoins_aptos", () => A.AptosNetworkParams$(null, B.AptosChainType_1_mainnet, null, B.ChainType_mainnet, B.List_empty10, A.Token_Token($.$get$APPConst_aptos(), 8, B.CoingeckoCoin_aptos_aptos_APT, "Aptos", "APT"), null));
    _lazyFinal($, "_DefaultAppCoins_aptosTestnet", "$get$_DefaultAppCoins_aptosTestnet", () => A.AptosNetworkParams$(null, B.AptosChainType_2_testnet, 1, B.ChainType_testnet, B.List_empty10, A.Token_Token($.$get$APPConst_aptos(), 8, B.CoingeckoCoin_aptos_aptos_APT, "Aptos Testnet", "tAPT"), null));
    _lazyFinal($, "_DefaultAppCoins_aptosDevnet", "$get$_DefaultAppCoins_aptosDevnet", () => A.AptosNetworkParams$(null, B.AptosChainType_null_devnet, 1, B.ChainType_testnet, B.List_empty10, A.Token_Token($.$get$APPConst_aptos(), 8, B.CoingeckoCoin_aptos_aptos_APT, "Aptos Devnet", "tAPT"), null));
    _lazyFinal($, "_DefaultAppCoins_sui", "$get$_DefaultAppCoins_sui", () => A.SuiNetworkParams$(null, null, B.ChainType_mainnet, "35834a8a", B.List_empty11, B.SuiChainType_2_mainnet, A.Token_Token($.$get$APPConst_sui(), 9, B.CoingeckoCoin_sui_sui_SUI, "Sui", "SUI"), null));
    _lazyFinal($, "_DefaultAppCoins_suiDevnet", "$get$_DefaultAppCoins_suiDevnet", () => A.SuiNetworkParams$(null, 1, B.ChainType_testnet, "5c7c5411", B.List_empty11, B.SuiChainType_0_devnet, A.Token_Token($.$get$APPConst_sui(), 9, B.CoingeckoCoin_sui_sui_SUI, "Sui Devnet", "tSUI"), null));
    _lazyFinal($, "_DefaultAppCoins_suiTestnet", "$get$_DefaultAppCoins_suiTestnet", () => A.SuiNetworkParams$(null, 1, B.ChainType_testnet, "4c78adac", B.List_empty11, B.SuiChainType_1_testnet, A.Token_Token($.$get$APPConst_sui(), 9, B.CoingeckoCoin_sui_sui_SUI, "Sui Testnet", "tSUI"), null));
    _lazyFinal($, "ChainConst_defaultCoins", "$get$ChainConst_defaultCoins", () => {
      var t1 = type$.dynamic;
      return A.ConstantMap_ConstantMap$from(A.LinkedHashMap_LinkedHashMap$_literal([0, A.WalletBitcoinNetwork$(0, $.$get$_DefaultAppCoins_bitcoinMainnet()), 1, A.WalletBitcoinNetwork$(1, $.$get$_DefaultAppCoins_bitcoinTestnet()), 5, A.WalletBitcoinNetwork$(5, $.$get$_DefaultAppCoins_bitcoinTestnet4()), 2, A.WalletBitcoinNetwork$(2, $.$get$_DefaultAppCoins_litecoinMainnet()), 7, A.WalletBitcoinNetwork$(7, $.$get$_DefaultAppCoins_litecoinTestnet()), 3, A.WalletBitcoinNetwork$(3, $.$get$_DefaultAppCoins_dogecoinMainnet()), 8, A.WalletBitcoinNetwork$(8, $.$get$_DefaultAppCoins_dogeTestnet()), 9, A.WalletBitcoinNetwork$(9, $.$get$_DefaultAppCoins_bsvMainnet()), 4, A.WalletBitcoinNetwork$(4, $.$get$_DefaultAppCoins_dashMainnet()), 10, A.WalletBitcoinCashNetwork$(10, $.$get$_DefaultAppCoins_bitcoinCashMainnet()), 11, A.WalletBitcoinCashNetwork$(11, $.$get$_DefaultAppCoins_bitcoinCashChipnet()), 12, A.WalletBitcoinNetwork$(12, $.$get$_DefaultAppCoins_pepecoinMainnet()), 30, A.WalletXRPNetwork$(30, $.$get$_DefaultAppCoins_xrpMainnet()), 31, A.WalletXRPNetwork$(31, $.$get$_DefaultAppCoins_xrpTestnet()), 32, A.WalletXRPNetwork$(32, $.$get$_DefaultAppCoins_xrpDevnet()), 33, A.WalletSolanaNetwork$(33, $.$get$_DefaultAppCoins_solana()), 34, A.WalletSolanaNetwork$(34, $.$get$_DefaultAppCoins_solanaTestnet()), 35, A.WalletSolanaNetwork$(35, $.$get$_DefaultAppCoins_solanaDevnet()), 50, A.WalletCardanoNetwork$(50, $.$get$_DefaultAppCoins_cardano()), 51, A.WalletCardanoNetwork$(51, $.$get$_DefaultAppCoins_cardanoPreprod()), 100, A.WalletEthereumNetwork$(100, $.$get$_DefaultAppCoins_ethreumMainnet()), 101, A.WalletEthereumNetwork$(101, $.$get$_DefaultAppCoins_ethreumTestnet()), 102, A.WalletEthereumNetwork$(102, $.$get$_DefaultAppCoins_polygon()), 103, A.WalletEthereumNetwork$(103, $.$get$_DefaultAppCoins_polygonTestnet()), 104, A.WalletEthereumNetwork$(104, $.$get$_DefaultAppCoins_bnb()), 105, A.WalletEthereumNetwork$(105, $.$get$_DefaultAppCoins_bnbTestnet()), 106, A.WalletEthereumNetwork$(106, $.$get$_DefaultAppCoins_avalanche()), 107, A.WalletEthereumNetwork$(107, $.$get$_DefaultAppCoins_arbitrum()), 108, A.WalletEthereumNetwork$(108, $.$get$_DefaultAppCoins_base()), 109, A.WalletEthereumNetwork$(109, $.$get$_DefaultAppCoins_optimism()), 200, A.WalletCosmosNetwork$(200, $.$get$_DefaultAppCoins_cosmos()), 201, A.WalletCosmosNetwork$(201, $.$get$_DefaultAppCoins_cosmosTestnet()), 202, A.WalletCosmosNetwork$(202, $.$get$_DefaultAppCoins_maya()), 203, A.WalletCosmosNetwork$(203, $.$get$_DefaultAppCoins_thorchain()), 204, A.WalletCosmosNetwork$(204, $.$get$_DefaultAppCoins_kujiraTestnet()), 205, A.WalletCosmosNetwork$(205, $.$get$_DefaultAppCoins_kujira()), 206, A.WalletCosmosNetwork$(206, $.$get$_DefaultAppCoins_osmosisTestnet()), 207, A.WalletCosmosNetwork$(207, $.$get$_DefaultAppCoins_osmosis()), 300, A.WalletTonNetwork$(300, $.$get$_DefaultAppCoins_tonMainnet()), 301, A.WalletTonNetwork$(301, $.$get$_DefaultAppCoins_tonTestnet()), 400, A.WalletSubstrateNetwork$(400, $.$get$_DefaultAppCoins_polkadot()), 401, A.WalletSubstrateNetwork$(401, $.$get$_DefaultAppCoins_polkadotAssetHub()), 402, A.WalletSubstrateNetwork$(402, $.$get$_DefaultAppCoins_polkadotBridgeHub()), 450, A.WalletSubstrateNetwork$(450, $.$get$_DefaultAppCoins_kusama()), 451, A.WalletSubstrateNetwork$(451, $.$get$_DefaultAppCoins_westend()), 452, A.WalletSubstrateNetwork$(452, $.$get$_DefaultAppCoins_westendAssetHub()), 453, A.WalletSubstrateNetwork$(453, $.$get$_DefaultAppCoins_kusamaAssetHub()), 454, A.WalletSubstrateNetwork$(454, $.$get$_DefaultAppCoins_kusamaBridgeHub()), 455, A.WalletSubstrateNetwork$(455, $.$get$_DefaultAppCoins_westendBridgeHub()), 460, A.WalletSubstrateNetwork$(460, $.$get$_DefaultAppCoins_moonbeam()), 461, A.WalletSubstrateNetwork$(461, $.$get$_DefaultAppCoins_moonBase()), 462, A.WalletSubstrateNetwork$(462, $.$get$_DefaultAppCoins_moonriver()), 463, A.WalletSubstrateNetwork$(463, $.$get$_DefaultAppCoins_astar()), 464, A.WalletSubstrateNetwork$(464, $.$get$_DefaultAppCoins_centrifuge()), 465, A.WalletSubstrateNetwork$(465, $.$get$_DefaultAppCoins_acala()), 466, A.WalletSubstrateNetwork$(466, $.$get$_DefaultAppCoins_cf()), 600, A.WalletStellarNetwork$(600, $.$get$_DefaultAppCoins_stellarMainnet()), 601, A.WalletStellarNetwork$(601, $.$get$_DefaultAppCoins_stellarTestnet()), 700, A.WalletMoneroNetwork$(700, $.$get$_DefaultAppCoins_monero()), 701, A.WalletMoneroNetwork$(701, $.$get$_DefaultAppCoins_moneroTestnet()), 800, A.WalletSuiNetwork$(800, $.$get$_DefaultAppCoins_sui()), 801, A.WalletSuiNetwork$(801, $.$get$_DefaultAppCoins_suiDevnet()), 802, A.WalletSuiNetwork$(802, $.$get$_DefaultAppCoins_suiTestnet()), 810, A.WalletAptosNetwork$(810, $.$get$_DefaultAppCoins_aptos()), 811, A.WalletAptosNetwork$(811, $.$get$_DefaultAppCoins_aptosTestnet()), 812, A.WalletAptosNetwork$(812, $.$get$_DefaultAppCoins_aptosDevnet()), 1001, A.WalletTronNetwork$(1001, $.$get$_DefaultAppCoins_tron()), 1002, A.WalletTronNetwork$(1002, $.$get$_DefaultAppCoins_tronShasta()), 1003, A.WalletTronNetwork$(1003, $.$get$_DefaultAppCoins_tronNile())], t1, t1), type$.int, type$.WalletNetwork_NetworkCoinParams_APIProvider);
    });
    _lazyFinal($, "PlatformInterface__instanceTokens", "$get$PlatformInterface__instanceTokens", () => new A.Expando(new WeakMap(), A.findType("Expando<Object>")));
    _lazyFinal($, "TonAddress__decoder", "$get$TonAddress__decoder", () => new A.TonAddrDecoder());
    _lazyFinal($, "JSWalletConstant_openExtension", "$get$JSWalletConstant_openExtension", () => A.WalletEvent$(null, "content_script", B.List_empty, null, "0", B.WalletEventTarget_2, B.WalletEventTypes_6));
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: A.NativeByteBuffer, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Float32Array: A.NativeFloat32List, Float64Array: A.NativeFloat64List, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8ClampedArray: A.NativeUint8ClampedList, CanvasPixelArray: A.NativeUint8ClampedList, Uint8Array: A.NativeUint8List});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  Function.prototype.call$2$1 = function(a) {
    return this(a);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i) {
        scripts[i].removeEventListener("load", onLoad, false);
      }
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].addEventListener("load", onLoad, false);
    }
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function") {
      dartMainRunner(callMain, []);
    } else {
      callMain([]);
    }
  });
})();
