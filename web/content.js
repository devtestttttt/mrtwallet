// Generated by dart2js (, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.8.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded. The loadPriority argument is an arbitrary argument
//    string forwarded from the 'dart2js:load-priority' pragma option.
// dartDeferredLibraryMultiLoader(uris, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of every URI in `uris`,
//    and call successCallback. If it fails to do so, it should call
//    errorCallback with an error. The loadId argument is the deferred import
//    that resulted in this uri being loaded. The loadPriority argument is an
//    arbitrary argument string forwarded from the 'dart2js:load-priority'
//    pragma option.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key)) {
        to[key] = from[key];
      }
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(Object.getPrototypeOf(object) && Object.getPrototypeOf(object).p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        Object.setPrototypeOf(cls.prototype, sup.prototype);
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++) {
      inherit(classes[i], sup);
    }
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        holder[name] = initializer();
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel) {
          A.throwLateFieldADI(name);
        }
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.$flags = 7;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i) {
      convertToFastObject(arrayOfObjects[i]);
    }
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number") {
      funType += typesOffset;
    }
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$allocateGrowable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      var t1 = A._setArrayType(allocation, $E._eval$1("JSArray<0>"));
      t1.$flags = 1;
      return t1;
    },
    JSArray__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    JSString__isWhitespace(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = string.charCodeAt(index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace(string, index) {
      var t1, index0, codeUnit;
      for (t1 = string.length; index > 0; index = index0) {
        index0 = index - 1;
        if (!(index0 < t1))
          return A.ioore(string, index0);
        codeUnit = string.charCodeAt(index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$n(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    set$length$asx(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    get$first$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNegative$n(receiver) {
      return J.getInterceptor$n(receiver).get$isNegative(receiver);
    },
    get$isNotEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$last$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$last(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$reversed$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$reversed(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    $add$ansx(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (Array.isArray(receiver) || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    add$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    allMatches$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    asByteData$0$x(receiver) {
      return J.getInterceptor$x(receiver).asByteData$0(receiver);
    },
    asByteData$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).asByteData$2(receiver, a0, a1);
    },
    asUint32List$0$x(receiver) {
      return J.getInterceptor$x(receiver).asUint32List$0(receiver);
    },
    asUint8List$0$x(receiver) {
      return J.getInterceptor$x(receiver).asUint8List$0(receiver);
    },
    asUint8List$2$x(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).asUint8List$2(receiver, a0, a1);
    },
    cast$1$0$ax(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    endsWith$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
    },
    every$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).every$1(receiver, a0);
    },
    firstWhere$2$orElse$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).firstWhere$2$orElse(receiver, a0, a1);
    },
    fold$1$2$ax(receiver, a0, a1, $T1) {
      return J.getInterceptor$ax(receiver).fold$1$2(receiver, a0, a1, $T1);
    },
    getRange$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).getRange$2(receiver, a0, a1);
    },
    indexWhere$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).indexWhere$1(receiver, a0);
    },
    map$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    matchAsPrefix$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    removeWhere$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).removeWhere$1(receiver, a0);
    },
    setRange$4$ax(receiver, a0, a1, a2, a3) {
      return J.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sort$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
    },
    split$0$s(receiver) {
      return J.getInterceptor$s(receiver).split$0(receiver);
    },
    startsWith$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
    },
    sublist$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).sublist$1(receiver, a0);
    },
    sublist$2$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
    },
    take$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).take$1(receiver, a0);
    },
    toInt$0$n(receiver) {
      return J.getInterceptor$n(receiver).toInt$0(receiver);
    },
    toList$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JavaScriptBigInt: function JavaScriptBigInt() {
    },
    JavaScriptSymbol: function JavaScriptSymbol() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  A = {JS_CONST: function JS_CONST() {
    },
    CastIterable_CastIterable(source, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(source))
        return new A._EfficientLengthCastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("_EfficientLengthCastIterable<1,2>"));
      return new A.CastIterable(source, $S._eval$1("@<0>")._bind$1($T)._eval$1("CastIterable<1,2>"));
    },
    LateError$fieldADI(fieldName) {
      return new A.LateError("Field '" + fieldName + string$.x27_has_);
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$fieldAI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has already been initialized.");
    },
    hexDigitValue(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    isToStringVisiting(object) {
      var t1, i;
      for (t1 = $.toStringVisiting.length, i = 0; i < t1; ++i)
        if (object === $.toStringVisiting[i])
          return true;
      return false;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      A.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        A.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          A.throwExpression(A.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new A.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new A.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    TakeIterable_TakeIterable(iterable, takeCount, $E) {
      var _s9_ = "takeCount";
      A.ArgumentError_checkNotNull(takeCount, _s9_, type$.int);
      A.RangeError_checkNotNegative(takeCount, _s9_);
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new A.EfficientLengthTakeIterable(iterable, takeCount, $E._eval$1("EfficientLengthTakeIterable<0>"));
      return new A.TakeIterable(iterable, takeCount, $E._eval$1("TakeIterable<0>"));
    },
    SkipIterable_SkipIterable(iterable, count, $E) {
      var _s5_ = "count";
      if (type$.EfficientLengthIterable_dynamic._is(iterable)) {
        A.ArgumentError_checkNotNull(count, _s5_, type$.int);
        A.RangeError_checkNotNegative(count, _s5_);
        return new A.EfficientLengthSkipIterable(iterable, count, $E._eval$1("EfficientLengthSkipIterable<0>"));
      }
      A.ArgumentError_checkNotNull(count, _s5_, type$.int);
      A.RangeError_checkNotNegative(count, _s5_);
      return new A.SkipIterable(iterable, count, $E._eval$1("SkipIterable<0>"));
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    IterableElementError_tooFew() {
      return new A.StateError("Too few elements");
    },
    Sort__doSort(a, left, right, compare, $E) {
      if (right - left <= 32)
        A.Sort__insertionSort(a, left, right, compare, $E);
      else
        A.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort(a, left, right, compare, $E) {
      var i, t1, el, j, t2, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (j > left) {
            t2 = compare.call$2(t1.$index(a, j - 1), el);
            if (typeof t2 !== "number")
              return t2.$gt();
            t2 = t2 > 0;
          } else
            t2 = false;
          if (!t2)
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort(a, left, right, compare, $E) {
      var t0, less, great, pivots_are_equal, k, ak, comp, great0, less0,
        sixth = B.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = B.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5),
        t2 = compare.call$2(el1, el2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t2 = compare.call$2(el1, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el1, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el3, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      t2 = compare.call$2(el2, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      pivots_are_equal = J.$eq$(compare.call$2(el2, el4), 0);
      if (pivots_are_equal)
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
      else
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) > 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) > 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      A.Sort__doSort(a, left, less - 2, compare, $E);
      A.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                great0 = great - 1;
                if (compare.call$2(t1.$index(a, great), el2) < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        A.Sort__doSort(a, less, great, compare, $E);
      } else
        A.Sort__doSort(a, less, great, compare, $E);
    },
    CastStream: function CastStream(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastStreamSubscription: function CastStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._source = t0;
      _.__internal$_zone = t1;
      _._handleError = _._handleData = null;
      _.$ti = t2;
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    _CastListBase_sort_closure: function _CastListBase_sort_closure(t0, t1) {
      this.$this = t0;
      this.compare = t1;
    },
    _CastListBase_removeWhere_closure: function _CastListBase_removeWhere_closure(t0, t1) {
      this.$this = t0;
      this.test = t1;
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap: function CastMap(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastMap_forEach_closure: function CastMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CastMap_entries_closure: function CastMap_entries_closure(t0) {
      this.$this = t0;
    },
    CastMap_removeWhere_closure: function CastMap_removeWhere_closure(t0, t1) {
      this.$this = t0;
      this.test = t1;
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this.__internal$_string = t0;
    },
    nullFuture_closure: function nullFuture_closure() {
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
      _.$ti = t3;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1, t2) {
      this._iterator = t0;
      this._remaining = t1;
      this.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    _ListIndicesIterable: function _ListIndicesIterable(t0) {
      this._backedList = t0;
    },
    ListMapView: function ListMapView(t0, t1) {
      this._values = t0;
      this.$ti = t1;
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol() {
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap_ConstantMap$from(other, $K, $V) {
      var allStrings, k, object, index, index0, values, map,
        keys = A.List_List$from(other.get$keys(), true, $K),
        t1 = keys.length,
        _i = 0;
      while (true) {
        if (!(_i < t1)) {
          allStrings = true;
          break;
        }
        k = keys[_i];
        if (typeof k != "string" || "__proto__" === k) {
          allStrings = false;
          break;
        }
        ++_i;
      }
      if (allStrings) {
        object = {};
        for (index = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i, index = index0) {
          k = keys[_i];
          $V._as(other.$index(0, k));
          index0 = index + 1;
          object[k] = index;
        }
        values = A.List_List$from(other.get$values(), true, $V);
        map = new A.ConstantStringMap(object, values, $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantStringMap<1,2>"));
        map.$keys = keys;
        return map;
      }
      return new A.ConstantMapView(A.LinkedHashMap_LinkedHashMap$from(other, $K, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("ConstantMapView<1,2>"));
    },
    ConstantMap__throwUnmodifiable() {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    instantiate1(f, T1) {
      var t1 = new A.Instantiation1(f, T1._eval$1("Instantiation1<0>"));
      t1.Instantiation$1(f);
      return t1;
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch, maxCharCode, digitsPart, t1, i, _null = null,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      if (3 >= match.length)
        return A.ioore(match, 3);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((digitsPart.charCodeAt(i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_objectTypeName(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_safeToString(object) {
      if (object == null || typeof object == "number" || A._isBool(object))
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      if (object instanceof A.Closure)
        return object.toString$0(0);
      if (object instanceof A._Record)
        return object._toString$1(true);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Primitives_currentUri() {
      if (!!self.location)
        return self.location.href;
      return null;
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, _i, i,
        a = A._setArrayType([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, A.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i <= 65535)
          B.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          B.JSArray_methods.add$1(a, 55296 + (B.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          B.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw A.wrapException(A.argumentErrorValue(i));
      }
      return A.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!A._isInt(i))
          throw A.wrapException(A.argumentErrorValue(i));
        if (i < 0)
          throw A.wrapException(A.argumentErrorValue(i));
        if (i > 65535)
          return A.Primitives_stringFromCodePoints(charCodes);
      }
      return A.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((B.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw A.wrapException(A.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_valueFromDecomposedDate(years, month, day, hours, minutes, seconds, milliseconds, microseconds, isUtc) {
      var remainder, value, t1,
        jsMonth = month - 1;
      if (0 <= years && years < 100) {
        years += 400;
        jsMonth -= 4800;
      }
      remainder = B.JSInt_methods.$mod(microseconds, 1000);
      milliseconds += B.JSInt_methods._tdivFast$1(microseconds - remainder, 1000);
      value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
      t1 = true;
      if (!isNaN(value))
        if (!(value < -864e13))
          if (!(value > 864e13))
            t1 = value === 864e13 && remainder !== 0;
      if (t1)
        return null;
      return value;
    },
    Primitives_lazyAsJsDate(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._core$_value);
      return receiver.date;
    },
    Primitives_getYear(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_extractStackTrace(error) {
      var jsError = error.$thrownJsError;
      if (jsError == null)
        return null;
      return A.getTraceFromException(jsError);
    },
    Primitives_trySetStackTrace(error, stackTrace) {
      var jsError;
      if (error.$thrownJsError == null) {
        jsError = new Error();
        A.initializeExceptionWrapper(error, jsError);
        error.$thrownJsError = jsError;
        jsError.stack = stackTrace.toString$0(0);
      }
    },
    iae(argument) {
      throw A.wrapException(A.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = A._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, null, _s5_);
      return A.RangeError$value(index, _s5_);
    },
    diagnoseRangeError(start, end, $length) {
      if (start < 0 || start > $length)
        return A.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return A.RangeError$range(end, start, $length, "end", null);
      return new A.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new A.ArgumentError(true, object, null, null);
    },
    wrapException(ex) {
      return A.initializeExceptionWrapper(ex, new Error());
    },
    initializeExceptionWrapper(ex, wrapper) {
      var t1;
      if (ex == null)
        ex = new A.TypeError();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex, wrapper) {
      throw A.initializeExceptionWrapper(ex, wrapper == null ? new Error() : wrapper);
    },
    throwUnsupportedOperation(o, operation, verb) {
      var wrapper;
      if (operation == null)
        operation = 0;
      if (verb == null)
        verb = 0;
      wrapper = Error();
      A.throwExpression(A._diagnoseUnsupportedOperation(o, operation, verb), wrapper);
    },
    _diagnoseUnsupportedOperation(o, encodedOperation, encodedVerb) {
      var operation, table, tableLength, index, verb, object, flags, article, adjective;
      if (typeof encodedOperation == "string")
        operation = encodedOperation;
      else {
        table = "[]=;add;removeWhere;retainWhere;removeRange;setRange;setInt8;setInt16;setInt32;setUint8;setUint16;setUint32;setFloat32;setFloat64".split(";");
        tableLength = table.length;
        index = encodedOperation;
        if (index > tableLength) {
          encodedVerb = index / tableLength | 0;
          index %= tableLength;
        }
        operation = table[index];
      }
      verb = typeof encodedVerb == "string" ? encodedVerb : "modify;remove from;add to".split(";")[encodedVerb];
      object = type$.List_dynamic._is(o) ? "list" : "ByteData";
      flags = o.$flags | 0;
      article = "a ";
      if ((flags & 4) !== 0)
        adjective = "constant ";
      else if ((flags & 2) !== 0) {
        adjective = "unmodifiable ";
        article = "an ";
      } else
        adjective = (flags & 1) !== 0 ? "fixed-length " : "";
      return new A.UnsupportedError("'" + operation + "': Cannot " + verb + " " + article + adjective + object);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      var t1;
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace) {
        t1 = ex.dartException;
        return A.saveStackTrace(ex, t1 == null ? type$.Object._as(t1) : t1);
      }
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              A.S(message);
              return A.saveStackTrace(ex, new A.NullError());
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else if (nullCall.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefCall.matchTypeError$1(message) != null || undefLiteralCall.matchTypeError$1(message) != null || nullProperty.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefProperty.matchTypeError$1(message) != null || undefLiteralProperty.matchTypeError$1(message) != null) {
            A._asString(message);
            return A.saveStackTrace(ex, new A.NullError());
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, null, null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      trace = new A._StackTrace(exception);
      if (typeof exception === "object")
        exception.$cachedTrace = trace;
      return trace;
    },
    objectHashCode(object) {
      if (object == null)
        return J.get$hashCode$(object);
      if (typeof object == "object")
        return A.Primitives_objectHashCode(object);
      return J.get$hashCode$(object);
    },
    constantHashCode(key) {
      if (typeof key == "number")
        return B.JSNumber_methods.get$hashCode(key);
      if (key instanceof A._Type)
        return A.Primitives_objectHashCode(key);
      if (key instanceof A._Record)
        return key.get$hashCode(key);
      if (key instanceof A.Symbol)
        return key.get$hashCode(0);
      return A.objectHashCode(key);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    _invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = A.convertDartClosureToJSUncached(closure, arity);
      closure.$identity = $function;
      return $function;
    },
    convertDartClosureToJSUncached(closure, arity) {
      var entry;
      switch (arity) {
        case 0:
          entry = closure.call$0;
          break;
        case 1:
          entry = closure.call$1;
          break;
        case 2:
          entry = closure.call$2;
          break;
        case 3:
          entry = closure.call$3;
          break;
        case 4:
          entry = closure.call$4;
          break;
        default:
          entry = null;
      }
      if (entry != null)
        return entry.bind(closure);
      return function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A._invokeClosure);
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      $constructor = isStatic ? function static_tear_off() {
        this.$initialize();
      } : function tear_off(a, b) {
        this.$initialize(a, b);
      };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunction(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunction(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      return A.Closure_cspForwardCall($function.length, needsDirectAccess, stubName, $function);
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var names, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        t1 = Object.getOwnPropertyNames(template);
      t1.$flags = 1;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (Array.isArray(transformers))
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    createRecordTypePredicate(shape, fieldRtis) {
      var $length = fieldRtis.length,
        $function = init.rttc["" + $length + ";" + shape];
      if ($function == null)
        return null;
      if ($length === 0)
        return $function;
      if ($length === $function.length)
        return $function.apply(null, fieldRtis);
      return $function(fieldRtis);
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, extraFlags) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + extraFlags);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1;
      if (typeof other == "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else if (other instanceof A.JSSyntaxRegExp) {
        t1 = B.JSString_methods.substring$1(receiver, startIndex);
        return other._nativeRegExp.test(t1);
      } else
        return !J.allMatches$1$s(other, B.JSString_methods.substring$1(receiver, startIndex)).get$isEmpty(0);
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var nativeRegexp;
      if (typeof pattern == "string")
        return A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      if (pattern instanceof A.JSSyntaxRegExp) {
        nativeRegexp = pattern.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, A.escapeReplacement(replacement));
      }
      return A.stringReplaceAllGeneral(receiver, pattern, replacement);
    },
    stringReplaceAllGeneral(receiver, pattern, replacement) {
      var t1, startIndex, t2, match;
      for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), startIndex = 0, t2 = ""; t1.moveNext$0();) {
        match = t1.get$current();
        t2 = t2 + receiver.substring(startIndex, match.get$start()) + replacement;
        startIndex = match.get$end();
      }
      t1 = t2 + receiver.substring(startIndex);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      if (receiver.indexOf(pattern, 0) < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    _stringIdentity(string) {
      return string;
    },
    stringReplaceAllFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
      var t1, t2, startIndex, t3, match, t4, t5;
      for (t1 = pattern.allMatches$1(0, receiver), t1 = new A._AllMatchesIterator(t1._re, t1._string, t1.__js_helper$_start), t2 = type$.RegExpMatch, startIndex = 0, t3 = ""; t1.moveNext$0();) {
        match = t1.__js_helper$_current;
        if (match == null)
          match = t2._as(match);
        t4 = match._match;
        t5 = t4.index;
        t3 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$2(receiver, startIndex, t5))) + A.S(onMatch.call$1(match));
        startIndex = t5 + t4[0].length;
      }
      t1 = t3 + A.S(A._stringIdentity(B.JSString_methods.substring$1(receiver, startIndex)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
      var index = receiver.indexOf(pattern, startIndex);
      if (index < 0)
        return receiver;
      return A.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
    },
    stringReplaceRangeUnchecked(receiver, start, end, replacement) {
      return receiver.substring(0, start) + replacement + receiver.substring(end);
    },
    _Record_2: function _Record_2(t0, t1) {
      this._0 = t0;
      this._1 = t1;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantMap_map_closure: function ConstantMap_map_closure(t0, t1, t2) {
      this.$this = t0;
      this.transform = t1;
      this.result = t2;
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2) {
      this._jsIndex = t0;
      this.__js_helper$_values = t1;
      this.$ti = t2;
    },
    _KeysOrValues: function _KeysOrValues(t0, t1) {
      this._elements = t0;
      this.$ti = t1;
    },
    _KeysOrValuesOrElementsIterator: function _KeysOrValuesOrElementsIterator(t0, t1, t2) {
      var _ = this;
      _._elements = t0;
      _.__js_helper$_length = t1;
      _.__js_helper$_index = 0;
      _.__js_helper$_current = null;
      _.$ti = t2;
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError() {
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeysIterable: function LinkedHashMapKeysIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2, t3) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _._cell = t2;
      _.__js_helper$_current = null;
      _.$ti = t3;
    },
    LinkedHashMapValuesIterable: function LinkedHashMapValuesIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapValueIterator: function LinkedHashMapValueIterator(t0, t1, t2, t3) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _._cell = t2;
      _.__js_helper$_current = null;
      _.$ti = t3;
    },
    LinkedHashMapEntriesIterable: function LinkedHashMapEntriesIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapEntryIterator: function LinkedHashMapEntryIterator(t0, t1, t2, t3) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _._cell = t2;
      _.__js_helper$_current = null;
      _.$ti = t3;
    },
    JsIdentityLinkedHashMap: function JsIdentityLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsConstantLinkedHashMap: function JsConstantLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    _Record: function _Record() {
    },
    _Record2: function _Record2() {
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._hasCapturesCache = _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this._string = t1;
      this.__js_helper$_start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this._input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    throwLateFieldNI(fieldName) {
      throw A.initializeExceptionWrapper(A.LateError$fieldNI(fieldName), new Error());
    },
    throwLateFieldAI(fieldName) {
      throw A.initializeExceptionWrapper(A.LateError$fieldAI(fieldName), new Error());
    },
    throwLateFieldADI(fieldName) {
      throw A.initializeExceptionWrapper(A.LateError$fieldADI(fieldName), new Error());
    },
    _Cell$named(_name) {
      var t1 = new A._Cell(_name);
      return t1.__late_helper$_value = t1;
    },
    _InitializedCell$named(_name, _initializer) {
      var t1 = new A._InitializedCell(_name, _initializer);
      return t1.__late_helper$_value = t1;
    },
    _Cell: function _Cell(t0) {
      this.__late_helper$_name = t0;
      this.__late_helper$_value = null;
    },
    _InitializedCell: function _InitializedCell(t0, t1) {
      this.__late_helper$_name = t0;
      this.__late_helper$_value = null;
      this._initializer = t1;
    },
    _checkViewArguments(buffer, offsetInBytes, $length) {
    },
    _ensureNativeList(list) {
      var t1, result, i;
      if (type$.JSIndexable_dynamic._is(list))
        return list;
      t1 = J.getInterceptor$asx(list);
      result = A.List_List$filled(t1.get$length(list), null, false, type$.dynamic);
      for (i = 0; i < t1.get$length(list); ++i)
        B.JSArray_methods.$indexSet(result, i, t1.$index(list, i));
      return result;
    },
    NativeByteData_NativeByteData($length) {
      return new DataView(new ArrayBuffer($length));
    },
    NativeByteData_NativeByteData$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new DataView(buffer, offsetInBytes) : new DataView(buffer, offsetInBytes, $length);
    },
    NativeInt8List__create1(arg) {
      return new Int8Array(arg);
    },
    NativeUint16List_NativeUint16List($length) {
      return new Uint16Array($length);
    },
    NativeUint32List_NativeUint32List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      $length = B.JSInt_methods._tdivFast$1(buffer.byteLength - offsetInBytes, 4);
      return new Uint32Array(buffer, offsetInBytes, $length);
    },
    NativeUint8List_NativeUint8List($length) {
      return new Uint8Array($length);
    },
    NativeUint8List_NativeUint8List$view(buffer, offsetInBytes, $length) {
      A._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw A.wrapException(A.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        if (end == null)
          t1 = start > $length;
        else
          t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw A.wrapException(A.diagnoseRangeError(start, end, $length));
      if (end == null)
        return $length;
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    _UnmodifiableNativeByteBufferView: function _UnmodifiableNativeByteBufferView(t0) {
      this._data = t0;
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    instantiatedGenericFunctionType(genericFunctionRti, instantiationRti) {
      var t1, cache, key, probe, rti;
      if (genericFunctionRti == null)
        return null;
      t1 = instantiationRti._rest;
      cache = genericFunctionRti._bindCache;
      if (cache == null)
        cache = genericFunctionRti._bindCache = new Map();
      key = instantiationRti._canonicalRecipe;
      probe = cache.get(key);
      if (probe != null)
        return probe;
      rti = A._substitute(init.typeUniverse, genericFunctionRti._primary, t1, 0);
      cache.set(key, rti);
      return rti;
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, t1, fields, substitutedFields, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 8:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 9:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 10:
          t1 = rti._primary;
          fields = rti._rest;
          substitutedFields = A._substituteArray(universe, fields, typeArguments, depth);
          if (substitutedFields === fields)
            return rti;
          return A._Universe__lookupRecordRti(universe, t1, substitutedFields);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      if (object instanceof A.Object)
        return A._instanceType(object);
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? Object.getPrototypeOf(Object.getPrototypeOf(instance)).constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeTypeOfDartObject(object) {
      return A.createRuntimeType(A._instanceType(object));
    },
    getRuntimeTypeOfClosure(closure) {
      var rti = A.closureFunctionType(closure);
      return A.createRuntimeType(rti == null ? A.instanceType(closure) : rti);
    },
    _structuralTypeOf(object) {
      var functionRti;
      if (object instanceof A._Record)
        return object._getRti$0();
      functionRti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      if (functionRti != null)
        return functionRti;
      if (type$.TrustedGetRuntimeType._is(object))
        return J.get$runtimeType$(object)._rti;
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A.instanceType(object);
    },
    createRuntimeType(rti) {
      var t1 = rti._cachedRuntimeType;
      return t1 == null ? rti._cachedRuntimeType = new A._Type(rti) : t1;
    },
    evaluateRtiForRecord(recordRecipe, valuesList) {
      var bindings, i,
        values = valuesList,
        $length = values.length;
      if ($length === 0)
        return type$.Record_0;
      if (0 >= $length)
        return A.ioore(values, 0);
      bindings = A._Universe_evalInEnvironment(init.typeUniverse, A._structuralTypeOf(values[0]), "@<0>");
      for (i = 1; i < $length; ++i) {
        if (!(i < values.length))
          return A.ioore(values, i);
        bindings = A._Universe_bind(init.typeUniverse, bindings, A._structuralTypeOf(values[i]));
      }
      return A._Universe_evalInEnvironment(init.typeUniverse, bindings, recordRecipe);
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var kind, isFn, $name, predicate, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (A.isTopType(testRti))
        return A._finishIsFn(testRti, object, A._isTop);
      kind = testRti._kind;
      if (kind === 6)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      if (kind === 1)
        return A._finishIsFn(testRti, object, A._isNever);
      if (kind === 7)
        return A._finishIsFn(testRti, object, A._isFutureOr);
      if (testRti === type$.int)
        isFn = A._isInt;
      else if (testRti === type$.double || testRti === type$.num)
        isFn = A._isNum;
      else if (testRti === type$.String)
        isFn = A._isString;
      else
        isFn = testRti === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (kind === 8) {
        $name = testRti._primary;
        if (testRti._rest.every(A.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (kind === 10) {
        predicate = A.createRecordTypePredicate(testRti._primary, testRti._rest);
        return A._finishIsFn(testRti, object, predicate == null ? A._isNever : predicate);
      }
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (A.isTopType(testRti))
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else if (A.isNullable(testRti))
        asFn = A._generalNullableAsCheckImplementation;
      if (testRti === type$.int)
        asFn = A._asInt;
      else if (testRti === type$.nullable_int)
        asFn = A._asIntQ;
      else if (testRti === type$.String)
        asFn = A._asString;
      else if (testRti === type$.nullable_String)
        asFn = A._asStringQ;
      else if (testRti === type$.bool)
        asFn = A._asBool;
      else if (testRti === type$.nullable_bool)
        asFn = A._asBoolQ;
      else if (testRti === type$.num)
        asFn = A._asNum;
      else if (testRti === type$.nullable_num)
        asFn = A._asNumQ;
      else if (testRti === type$.double)
        asFn = A._asDouble;
      else if (testRti === type$.nullable_double)
        asFn = A._asDoubleQ;
      testRti._as = asFn;
      return testRti._as(object);
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      return A.isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), testRti);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var testRti = this;
      if (object == null) {
        if (A.isNullable(testRti))
          return object;
      } else if (testRti._is(object))
        return object;
      throw A.initializeExceptionWrapper(A._errorForAsCheck(object, testRti), new Error());
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null || testRti._is(object))
        return object;
      throw A.initializeExceptionWrapper(A._errorForAsCheck(object, testRti), new Error());
    },
    _errorForAsCheck(object, testRti) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, A._rtiToString(testRti, null)));
    },
    checkTypeBound(type, bound, variable, methodName) {
      if (A.isSubtype(init.typeUniverse, type, bound))
        return type;
      throw A.initializeExceptionWrapper(A._TypeError$fromMessage("The type argument '" + A._rtiToString(type, null) + "' is not a subtype of the type variable bound '" + A._rtiToString(bound, null) + "' of type variable '" + variable + "' in '" + methodName + "'."), new Error());
    },
    _Error_compose(object, checkedTypeDescription) {
      return A.Error_safeToString(object) + ": type '" + A._rtiToString(A._structuralTypeOf(object), null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError$fromMessage(message) {
      return new A._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, type));
    },
    _isFutureOr(object) {
      var testRti = this;
      return testRti._primary._is(object) || A.Rti__getFutureFromFutureOr(init.typeUniverse, testRti)._is(object);
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "Object"), new Error());
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isNever(object) {
      return false;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "bool"), new Error());
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "bool?"), new Error());
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "double"), new Error());
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "double?"), new Error());
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "int"), new Error());
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "int?"), new Error());
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "num"), new Error());
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "num?"), new Error());
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "String"), new Error());
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "String?"), new Error());
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var fieldCount, names, namesIndex, s, comma, i,
        partialShape = recordType._primary,
        fields = recordType._rest;
      if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
      fieldCount = fields.length;
      names = partialShape.split(",");
      namesIndex = names.length - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
          s += " " + names[namesIndex];
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, offset, i, t1, typeParametersText, typeSep, t2, t3, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ", outerContextLength = null;
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null)
          genericContext = A._setArrayType([], type$.JSArray_String);
        else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t2 = genericContext.length;
          t3 = t2 - 1 - i;
          if (!(t3 >= 0))
            return A.ioore(genericContext, t3);
          typeParametersText = typeParametersText + typeSep + genericContext[t3];
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else
        typeParametersText = "";
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var questionArgument, s, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 7)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 8) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 10)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 11)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, false));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 9 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        t1 = true;
        if (!A.isTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 6)
              t1 = baseKind === 7 && A.isNullable(baseType._primary);
        if (t1)
          return baseType;
        else if (baseKind === 1)
          return type$.Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (A.isTopType(baseType) || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 9) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = partialShapeTag;
      rti._rest = fields;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, end, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              A._Parser_handleTypeArguments(parser, t1);
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(-3);
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              A._Parser_handleArguments(parser, t1);
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            case 43:
              end = source.indexOf("(", i);
              t1.push(source.substring(i, end));
              t1.push(-4);
              t1.push(parser.p);
              parser.p = t1.length;
              i = end + 1;
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 9)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleTypeArguments(parser, stack) {
      var base,
        t1 = parser.u,
        $arguments = A._Parser_collectArray(parser, stack),
        head = stack.pop();
      if (typeof head == "string")
        stack.push(A._Universe__lookupInterfaceRti(t1, head, $arguments));
      else {
        base = A._Parser_toType(t1, parser.e, head);
        switch (base._kind) {
          case 11:
            stack.push(A._Universe__lookupGenericFunctionRti(t1, base, $arguments, parser.n));
            break;
          default:
            stack.push(A._Universe__lookupBindingRti(t1, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleArguments(parser, stack) {
      var requiredPositional, returnType, parameters,
        t1 = parser.u,
        head = stack.pop(),
        optionalPositional = null, named = null;
      if (typeof head == "number")
        switch (head) {
          case -1:
            optionalPositional = stack.pop();
            break;
          case -2:
            named = stack.pop();
            break;
          default:
            stack.push(head);
            break;
        }
      else
        stack.push(head);
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = stack.pop();
      switch (head) {
        case -3:
          head = stack.pop();
          if (optionalPositional == null)
            optionalPositional = t1.sEA;
          if (named == null)
            named = t1.sEA;
          returnType = A._Parser_toType(t1, parser.e, head);
          parameters = new A._FunctionParameters();
          parameters._requiredPositional = requiredPositional;
          parameters._optionalPositional = optionalPositional;
          parameters._named = named;
          stack.push(A._Universe__lookupFunctionRti(t1, returnType, parameters));
          return;
        case -4:
          stack.push(A._Universe__lookupRecordRti(t1, stack.pop(), requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = stack.splice(parser.p);
      A._Parser_toTypes(parser.u, parser.e, array);
      parser.p = stack.pop();
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
      } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 9) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 8)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    isSubtype(universe, s, t) {
      var result,
        sCache = s._isSubtypeCache;
      if (sCache == null)
        sCache = s._isSubtypeCache = new Map();
      result = sCache.get(t);
      if (result == null) {
        result = A._isSubtype(universe, s, null, t, null);
        sCache.set(t, result);
      }
      return result;
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var sKind, leftTypeVariable, tKind, t1, t2, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (A.isTopType(t))
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isTopType(s))
        return false;
      if (s._kind === 1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = type$.Null;
      if (s === t1 || s === type$.JSNull) {
        if (tKind === 7)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === t1 || t === type$.JSNull || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 7)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 6;
      }
      if (sKind === 7) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 6)
        return A._isSubtype(universe, t1, sEnv, t, tEnv) && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 7) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 6)
        return A._isSubtype(universe, s, sEnv, t1, tEnv) || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      t2 = sKind === 10;
      if (t2 && t === type$.Record)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 8) {
        if (tKind !== 8)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      if (t2 && tKind === 10)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      return A._areArgumentsSubtypes(universe, s._rest, null, sEnv, t._rest, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i)
        if (!A._isSubtype(universe, sArgs[i], sEnv, tArgs[i], tEnv))
          return false;
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv) {
      var i,
        sFields = s._rest,
        tFields = t._rest,
        sCount = sFields.length;
      if (sCount !== tFields.length)
        return false;
      if (s._primary !== t._primary)
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv))
          return false;
      return true;
    },
    isNullable(t) {
      var kind = t._kind,
        t1 = true;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isTopType(t))
          if (kind !== 6)
            t1 = kind === 7 && A.isNullable(t._primary);
      return t1;
    },
    isTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._isSubtypeCache = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var t1, div, span;
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        t1 = {};
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      bodyFunction.toString;
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(A.unwrapException(object), A.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (object instanceof A._Future)
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true) {
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
          }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _asyncStarHelper(object, bodyFunctionOrErrorCode, controller) {
      var t1, t2, t3,
        _s10_ = "controller";
      if (bodyFunctionOrErrorCode === 0) {
        t1 = controller.cancelationFuture;
        if (t1 != null)
          t1._completeWithValue$1(null);
        else {
          t1 = controller.___AsyncStarStreamController_controller_A;
          t1 === $ && A.throwLateFieldNI(_s10_);
          t1.close$0();
        }
        return;
      } else if (bodyFunctionOrErrorCode === 1) {
        t1 = controller.cancelationFuture;
        if (t1 != null) {
          t2 = A.unwrapException(object);
          t3 = A.getTraceFromException(object);
          t1._completeErrorObject$1(new A.AsyncError(t2, t3));
        } else {
          t1 = A.unwrapException(object);
          t2 = A.getTraceFromException(object);
          t3 = controller.___AsyncStarStreamController_controller_A;
          t3 === $ && A.throwLateFieldNI(_s10_);
          t3.addError$2(t1, t2);
          controller.___AsyncStarStreamController_controller_A.close$0();
        }
        return;
      }
      type$.void_Function_int_dynamic._as(bodyFunctionOrErrorCode);
      if (object instanceof A._IterationMarker) {
        if (controller.cancelationFuture != null) {
          bodyFunctionOrErrorCode.call$2(2, null);
          return;
        }
        t1 = object.state;
        if (t1 === 0) {
          t1 = object.value;
          t2 = controller.___AsyncStarStreamController_controller_A;
          t2 === $ && A.throwLateFieldNI(_s10_);
          t2.add$1(0, controller.$ti._precomputed1._as(t1));
          A.scheduleMicrotask(new A._asyncStarHelper_closure(controller, bodyFunctionOrErrorCode));
          return;
        } else if (t1 === 1) {
          t1 = controller.$ti._eval$1("Stream<1>")._as(type$.Stream_dynamic._as(object.value));
          t2 = controller.___AsyncStarStreamController_controller_A;
          t2 === $ && A.throwLateFieldNI(_s10_);
          t2.addStream$2$cancelOnError(t1, false).then$1$1(new A._asyncStarHelper_closure0(controller, bodyFunctionOrErrorCode), type$.Null);
          return;
        }
      }
      A._awaitOnObject(object, bodyFunctionOrErrorCode);
    },
    _streamOfController(controller) {
      var t1 = controller.___AsyncStarStreamController_controller_A;
      t1 === $ && A.throwLateFieldNI("controller");
      return new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>"));
    },
    _AsyncStarStreamController$(body, $T) {
      var t1 = new A._AsyncStarStreamController($T._eval$1("_AsyncStarStreamController<0>"));
      t1._AsyncStarStreamController$1(body, $T);
      return t1;
    },
    _makeAsyncStarStreamController(body, $T) {
      body.toString;
      return A._AsyncStarStreamController$(body, $T);
    },
    _IterationMarker_yieldStar(values) {
      return new A._IterationMarker(values, 1);
    },
    _IterationMarker_yieldSingle(value) {
      return new A._IterationMarker(value, 0);
    },
    _SyncStarIterator__terminatedBody(_1, _2, _3) {
      return 0;
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B.C__StringStackTrace;
    },
    Future_Future$delayed(duration, computation, $T) {
      var result;
      if (computation == null && !$T._is(null))
        throw A.wrapException(A.ArgumentError$value(null, "computation", "The type parameter is not nullable"));
      result = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      A.Timer_Timer(duration, new A.Future_Future$delayed_closure(computation, result, $T));
      return result;
    },
    Future_wait(futures, $T) {
      var handleError, future, pos, e, s, t1, t2, _i, t3, exception, t4, _box_0 = {}, cleanUp = null,
        eagerError = false,
        _future = new A._Future($.Zone__current, $T._eval$1("_Future<List<0>>"));
      _box_0.values = null;
      _box_0.remaining = 0;
      _box_0.stackTrace = _box_0.error = null;
      handleError = new A.Future_wait_handleError(_box_0, cleanUp, eagerError, _future);
      try {
        for (t1 = futures.length, t2 = type$.Null, _i = 0, t3 = 0; _i < futures.length; futures.length === t1 || (0, A.throwConcurrentModificationError)(futures), ++_i) {
          future = futures[_i];
          pos = t3;
          future.then$1$2$onError(new A.Future_wait_closure(_box_0, pos, _future, $T, cleanUp, eagerError), handleError, t2);
          t3 = ++_box_0.remaining;
        }
        if (t3 === 0) {
          t1 = _future;
          t1._completeWithValue$1(A._setArrayType([], $T._eval$1("JSArray<0>")));
          return t1;
        }
        _box_0.values = A.List_List$filled(t3, null, false, $T._eval$1("0?"));
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (_box_0.remaining === 0 || eagerError) {
          t1 = _future;
          t2 = e;
          t3 = s;
          t4 = A._interceptError(t2, t3);
          t2 = new A.AsyncError(t2, t3 == null ? A.AsyncError_defaultStackTrace(t2) : t3);
          t1._asyncCompleteErrorObject$1(t2);
          return t1;
        } else {
          _box_0.error = e;
          _box_0.stackTrace = s;
        }
      }
      return _future;
    },
    _interceptError(error, stackTrace) {
      if ($.Zone__current === B.C__RootZone)
        return null;
      return null;
    },
    _interceptUserError(error, stackTrace) {
      if ($.Zone__current !== B.C__RootZone)
        A._interceptError(error, stackTrace);
      if (stackTrace == null)
        if (type$.Error._is(error)) {
          stackTrace = error.get$stackTrace();
          if (stackTrace == null) {
            A.Primitives_trySetStackTrace(error, B.C__StringStackTrace);
            stackTrace = B.C__StringStackTrace;
          }
        } else
          stackTrace = B.C__StringStackTrace;
      else if (type$.Error._is(error))
        A.Primitives_trySetStackTrace(error, stackTrace);
      return new A.AsyncError(error, stackTrace);
    },
    _Future$value(value, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      $T._as(value);
      t1._state = 8;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future__chainCoreFuture(source, target, sync) {
      var t2, t3, ignoreError, listeners, _box_0 = {},
        t1 = _box_0.source = source;
      for (t2 = type$._Future_dynamic; t3 = t1._state, (t3 & 4) !== 0; t1 = source) {
        source = t2._as(t1._resultOrListeners);
        _box_0.source = source;
      }
      if (t1 === target) {
        t2 = A.StackTrace_current();
        target._asyncCompleteErrorObject$1(new A.AsyncError(new A.ArgumentError(true, t1, null, "Cannot complete a future with itself"), t2));
        return;
      }
      ignoreError = target._state & 1;
      t2 = t1._state = t3 | ignoreError;
      if ((t2 & 24) === 0) {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = target._state & 1 | 4;
        target._resultOrListeners = t1;
        t1._prependListeners$1(listeners);
        return;
      }
      if (!sync)
        if (target._resultOrListeners == null)
          t1 = (t2 & 16) === 0 || ignoreError !== 0;
        else
          t1 = false;
      else
        t1 = true;
      if (t1) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(_box_0.source);
        A._Future__propagateToListeners(target, listeners);
        return;
      }
      target._state ^= 2;
      A._rootScheduleMicrotask(null, null, target._zone, type$.void_Function._as(new A._Future__chainCoreFuture_closure(_box_0, target)));
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, _box_0, t4, t5, hasError, asyncError, nextListener, nextListener0, sourceResult, t6, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic; true;) {
        _box_0 = {};
        t4 = t1._state;
        t5 = (t4 & 16) === 0;
        hasError = !t5;
        if (listeners == null) {
          if (hasError && (t4 & 1) === 0) {
            asyncError = t2._as(t1._resultOrListeners);
            A._rootHandleError(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t4 = _box_1.source;
        sourceResult = t4._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t5) {
          t6 = t1.state;
          t6 = (t6 & 1) !== 0 || (t6 & 15) === 8;
        } else
          t6 = true;
        if (t6) {
          zone = t1.result._zone;
          if (hasError) {
            t4 = t4._zone === zone;
            t4 = !(t4 || t4);
          } else
            t4 = false;
          if (t4) {
            t2._as(sourceResult);
            A._rootHandleError(sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = t1.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t5) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t1 instanceof A._Future) {
            t4 = _box_0.listener.$ti;
            t4 = t4._eval$1("Future<2>")._is(t1) || !t4._rest[1]._is(t1);
          } else
            t4 = false;
          if (t4) {
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state & 30 | result._state & 1;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFuture(t1, result, true);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t4 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t4);
          result._state = 8;
          result._resultOrListeners = t4;
        } else {
          t2._as(t4);
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t4;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      var t1;
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      t1 = type$.dynamic_Function_Object;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var _null = null,
        currentZone = $.Zone__current;
      if (B.C__RootZone === currentZone) {
        A._rootScheduleMicrotask(_null, _null, B.C__RootZone, callback);
        return;
      }
      A._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(currentZone.bindCallbackGuarded$1(callback)));
    },
    Stream_Stream$value(value, $T) {
      var _null = null,
        t1 = $T._eval$1("_AsyncStreamController<0>"),
        t2 = new A._AsyncStreamController(_null, _null, _null, _null, t1);
      t2._async$_add$1(value);
      t2._closeUnchecked$0();
      return new A._ControllerStream(t2, t1._eval$1("_ControllerStream<1>"));
    },
    StreamIterator_StreamIterator(stream, $T) {
      A.checkNotNullable(stream, "stream", type$.Object);
      return new A._StreamIterator($T._eval$1("_StreamIterator<0>"));
    },
    StreamController_StreamController(onCancel, onListen, onPause, onResume, sync, $T) {
      return sync ? new A._SyncStreamController(onListen, onPause, onResume, onCancel, $T._eval$1("_SyncStreamController<0>")) : new A._AsyncStreamController(onListen, onPause, onResume, onCancel, $T._eval$1("_AsyncStreamController<0>"));
    },
    _runGuarded(notificationHandler) {
      var e, s, exception;
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    _ControllerSubscription$(_controller, onData, onError, onDone, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0,
        t3 = onError != null ? 32 : 0,
        t4 = A._BufferingStreamSubscription__registerDataHandler(t1, onData, $T),
        t5 = A._BufferingStreamSubscription__registerErrorHandler(t1, onError),
        t6 = onDone == null ? A.async___nullDoneHandler$closure() : onDone;
      return new A._ControllerSubscription(_controller, t4, t5, type$.void_Function._as(t6), t1, t2 | t3, $T._eval$1("_ControllerSubscription<0>"));
    },
    _AddStreamState_makeErrorHandler(controller) {
      return new A._AddStreamState_makeErrorHandler_closure(controller);
    },
    _BufferingStreamSubscription__registerDataHandler(zone, handleData, $T) {
      var t1 = handleData == null ? A.async___nullDataHandler$closure() : handleData;
      return type$.$env_1_1_void._bind$1($T)._eval$1("1(2)")._as(t1);
    },
    _BufferingStreamSubscription__registerErrorHandler(zone, handleError) {
      if (handleError == null)
        handleError = A.async___nullErrorHandler$closure();
      if (type$.void_Function_Object_StackTrace._is(handleError))
        return zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      if (type$.void_Function_Object._is(handleError))
        return type$.dynamic_Function_Object._as(handleError);
      throw A.wrapException(A.ArgumentError$(string$.handle, null));
    },
    _nullDataHandler(value) {
    },
    _nullErrorHandler(error, stackTrace) {
      A._rootHandleError(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    _nullDoneHandler() {
    },
    _DoneStreamSubscription$(onDone, $T) {
      var t1 = new A._DoneStreamSubscription($.Zone__current, $T._eval$1("_DoneStreamSubscription<0>"));
      A.scheduleMicrotask(t1.get$_onMicrotask());
      if (onDone != null)
        t1._onDone = type$.void_Function._as(onDone);
      return t1;
    },
    Timer_Timer(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return A.Timer__createTimer(duration, type$.void_Function._as(callback));
      return A.Timer__createTimer(duration, type$.void_Function._as(t1.bindCallbackGuarded$1(callback)));
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      type$.void_Function._as(f);
      if (B.C__RootZone !== zone)
        f = zone.bindCallbackGuarded$1(f);
      A._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
      this._handle = null;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _asyncStarHelper_closure: function _asyncStarHelper_closure(t0, t1) {
      this.controller = t0;
      this.bodyFunction = t1;
    },
    _asyncStarHelper_closure0: function _asyncStarHelper_closure0(t0, t1) {
      this.controller = t0;
      this.bodyFunction = t1;
    },
    _AsyncStarStreamController: function _AsyncStarStreamController(t0) {
      var _ = this;
      _.___AsyncStarStreamController_controller_A = $;
      _.isSuspended = false;
      _.cancelationFuture = null;
      _.$ti = t0;
    },
    _AsyncStarStreamController__resumeBody: function _AsyncStarStreamController__resumeBody(t0) {
      this.body = t0;
    },
    _AsyncStarStreamController__resumeBody_closure: function _AsyncStarStreamController__resumeBody_closure(t0) {
      this.body = t0;
    },
    _AsyncStarStreamController_closure0: function _AsyncStarStreamController_closure0(t0) {
      this._resumeBody = t0;
    },
    _AsyncStarStreamController_closure1: function _AsyncStarStreamController_closure1(t0, t1) {
      this.$this = t0;
      this._resumeBody = t1;
    },
    _AsyncStarStreamController_closure: function _AsyncStarStreamController_closure(t0, t1) {
      this.$this = t0;
      this.body = t1;
    },
    _AsyncStarStreamController__closure: function _AsyncStarStreamController__closure(t0) {
      this.body = t0;
    },
    _IterationMarker: function _IterationMarker(t0, t1) {
      this.value = t0;
      this.state = t1;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._body = t0;
      _._suspendedBodies = _._nestedIterator = _._datum = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _BroadcastSubscription: function _BroadcastSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._eventState = 0;
      _._async$_previous = _._async$_next = null;
      _._async$_controller = t0;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _BroadcastStreamController: function _BroadcastStreamController() {
    },
    _AsyncBroadcastStreamController: function _AsyncBroadcastStreamController(t0, t1, t2) {
      var _ = this;
      _.onListen = t0;
      _.onCancel = t1;
      _._state = 0;
      _._doneFuture = _._addStreamState = _._lastSubscription = _._firstSubscription = null;
      _.$ti = t2;
    },
    Future_Future$delayed_closure: function Future_Future$delayed_closure(t0, t1, t2) {
      this.computation = t0;
      this.result = t1;
      this.T = t2;
    },
    Future_wait_handleError: function Future_wait_handleError(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.cleanUp = t1;
      _.eagerError = t2;
      _._future = t3;
    },
    Future_wait_closure: function Future_wait_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.pos = t1;
      _._future = t2;
      _.T = t3;
      _.cleanUp = t4;
      _.eagerError = t5;
    },
    TimeoutException: function TimeoutException(t0, t1) {
      this.message = t0;
      this.duration = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainCoreFuture_closure: function _Future__chainCoreFuture_closure(t0, t1) {
      this._box_0 = t0;
      this.target = t1;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteErrorObject_closure: function _Future__asyncCompleteErrorObject_closure(t0, t1) {
      this.$this = t0;
      this.error = t1;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0, t1) {
      this.joinedResult = t0;
      this.originalSource = t1;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0: function _Future__propagateToListeners_handleWhenCompleteCallback_closure0(t0) {
      this.joinedResult = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _Future_timeout_closure: function _Future_timeout_closure(t0, t1) {
      this._future = t0;
      this.timeLimit = t1;
    },
    _Future_timeout_closure0: function _Future_timeout_closure0(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this._future = t2;
    },
    _Future_timeout_closure1: function _Future_timeout_closure1(t0, t1) {
      this._box_0 = t0;
      this._future = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamView: function StreamView() {
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _SyncStreamController: function _SyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._async$_controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._async$_controller = t0;
      _._onData = t1;
      _._onError = t2;
      _._onDone = t3;
      _._zone = t4;
      _._state = t5;
      _._pending = _._cancelFuture = null;
      _.$ti = t6;
    },
    _StreamSinkWrapper: function _StreamSinkWrapper(t0, t1) {
      this._target = t0;
      this.$ti = t1;
    },
    _AddStreamState: function _AddStreamState() {
    },
    _AddStreamState_makeErrorHandler_closure: function _AddStreamState_makeErrorHandler_closure(t0) {
      this.controller = t0;
    },
    _AddStreamState_cancel_closure: function _AddStreamState_cancel_closure(t0) {
      this.$this = t0;
    },
    _StreamControllerAddStreamState: function _StreamControllerAddStreamState(t0, t1, t2, t3) {
      var _ = this;
      _._varData = t0;
      _.addStreamFuture = t1;
      _.addSubscription = t2;
      _.$ti = t3;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription() {
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents(t0) {
      var _ = this;
      _._state = 0;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _.$ti = t0;
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _DoneStreamSubscription: function _DoneStreamSubscription(t0, t1) {
      var _ = this;
      _._state = 1;
      _._zone = t0;
      _._onDone = null;
      _.$ti = t1;
    },
    _StreamIterator: function _StreamIterator(t0) {
      this.$ti = t0;
    },
    _EmptyStream: function _EmptyStream(t0) {
      this.$ti = t0;
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _HashMap__getTableEntry(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable() {
      var table = Object.create(null);
      A._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashMap_LinkedHashMap(equals, hashCode, $K, $V) {
      if (hashCode == null) {
        if (equals == null)
          return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
        hashCode = A.collection___defaultHashCode$closure();
      } else {
        if (A.core__identityHashCode$closure() === hashCode && A.core__identical$closure() === equals)
          return new A.JsIdentityLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsIdentityLinkedHashMap<1,2>"));
        if (equals == null)
          equals = A.collection___defaultEquals$closure();
      }
      return A._LinkedCustomHashMap$(equals, hashCode, null, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    _LinkedCustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      return new A._LinkedCustomHashMap(_equals, _hashCode, new A._LinkedCustomHashMap_closure($K), $K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedCustomHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications, $E) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    _defaultEquals(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode(a) {
      return J.get$hashCode$(a);
    },
    LinkedHashMap_LinkedHashMap$from(other, $K, $V) {
      var result = A.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      other.forEach$1(0, new A.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashMap_LinkedHashMap$of(other, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap(null, null, $K, $V);
      t1.addAll$1(0, other);
      return t1;
    },
    LinkedHashSet_LinkedHashSet$from(elements, $E) {
      var t1, _i,
        result = A.LinkedHashSet_LinkedHashSet($E);
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, A.throwConcurrentModificationError)(elements), ++_i)
        result.add$1(0, $E._as(elements[_i]));
      return result;
    },
    ListBase__compareAny(a, b) {
      var t1 = type$.Comparable_dynamic;
      return J.compareTo$1$ns(t1._as(a), t1._as(b));
    },
    MapBase_mapToString(m) {
      var result, t1;
      if (A.isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        t1 = {};
        B.JSArray_methods.add$1($.toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__fillMapWithMappedIterable(map, iterable, key, value) {
      var t1, t2, element;
      for (t1 = A._instanceType(iterable), t2 = new A.ListIterator(iterable, iterable.get$length(0), t1._eval$1("ListIterator<ListBase.E>")), t1 = t1._eval$1("ListBase.E"); t2.moveNext$0();) {
        element = t2.__internal$_current;
        if (element == null)
          element = t1._as(element);
        map.$indexSet(0, key.call$1(element), value.call$1(element));
      }
    },
    _HashMap: function _HashMap() {
    },
    _HashMap_values_closure: function _HashMap_values_closure(t0) {
      this.$this = t0;
    },
    _IdentityHashMap: function _IdentityHashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_map = t0;
      _._collection$_keys = t1;
      _._collection$_offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _.__js_helper$_length = 0;
      _._last = _._first = _.__js_helper$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
      this.K = t0;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListBase: function ListBase() {
    },
    MapBase: function MapBase() {
    },
    MapBase_entries_closure: function MapBase_entries_closure(t0) {
      this.$this = t0;
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    UnmodifiableMapBase: function UnmodifiableMapBase() {
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_keys = t0;
      _._collection$_map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _parseJson(source, reviver) {
      var e, exception, t1, parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.FormatException$(String(e), null, null);
        throw A.wrapException(t1);
      }
      t1 = A._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy(object) {
      var i;
      if (object == null)
        return null;
      if (typeof object != "object")
        return object;
      if (!Array.isArray(object))
        return new A._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = A._convertJsonToDartLazy(object[i]);
      return object;
    },
    _Utf8Decoder__makeNativeUint8List(codeUnits, start, end) {
      var bytes, t1, i, b,
        $length = end - start;
      if ($length <= 4096)
        bytes = $.$get$_Utf8Decoder__reusableBuffer();
      else
        bytes = new Uint8Array($length);
      for (t1 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
        b = t1.$index(codeUnits, start + i);
        if ((b & 255) !== b)
          b = 255;
        bytes[i] = b;
      }
      return bytes;
    },
    _Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$_Utf8Decoder__decoderNonfatal() : $.$get$_Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return A._Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return A._Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, end));
    },
    _Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
      }
      return null;
    },
    Base64Codec__checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (B.JSInt_methods.$mod($length, 4) !== 0)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw A.wrapException(A.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Base64Encoder_encodeChunk(alphabet, bytes, start, end, isLast, output, outputIndex, state) {
      var t1, t2, t3, i, byteOr, byte, outputIndex0, t4, t5, outputIndex1,
        bits = state >>> 2,
        expectedChars = 3 - (state & 3);
      for (t1 = J.getInterceptor$asx(bytes), t2 = alphabet.length, t3 = output.$flags | 0, i = start, byteOr = 0; i < end; ++i) {
        byte = t1.$index(bytes, i);
        byteOr = (byteOr | byte) >>> 0;
        bits = (bits << 8 | byte) & 16777215;
        --expectedChars;
        if (expectedChars === 0) {
          outputIndex0 = outputIndex + 1;
          t4 = bits >>> 18 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          t3 & 2 && A.throwUnsupportedOperation(output);
          t5 = output.length;
          if (!(outputIndex < t5))
            return A.ioore(output, outputIndex);
          output[outputIndex] = alphabet.charCodeAt(t4);
          outputIndex = outputIndex0 + 1;
          t4 = bits >>> 12 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex0 < t5))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = alphabet.charCodeAt(t4);
          outputIndex0 = outputIndex + 1;
          t4 = bits >>> 6 & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex < t5))
            return A.ioore(output, outputIndex);
          output[outputIndex] = alphabet.charCodeAt(t4);
          outputIndex = outputIndex0 + 1;
          t4 = bits & 63;
          if (!(t4 < t2))
            return A.ioore(alphabet, t4);
          if (!(outputIndex0 < t5))
            return A.ioore(output, outputIndex0);
          output[outputIndex0] = alphabet.charCodeAt(t4);
          bits = 0;
          expectedChars = 3;
        }
      }
      if (byteOr >= 0 && byteOr <= 255) {
        if (expectedChars < 3) {
          outputIndex0 = outputIndex + 1;
          outputIndex1 = outputIndex0 + 1;
          if (3 - expectedChars === 1) {
            t1 = bits >>> 2 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            t3 & 2 && A.throwUnsupportedOperation(output);
            t3 = output.length;
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = alphabet.charCodeAt(t1);
            t1 = bits << 4 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex0 < t3))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = alphabet.charCodeAt(t1);
            outputIndex = outputIndex1 + 1;
            if (!(outputIndex1 < t3))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = 61;
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          } else {
            t1 = bits >>> 10 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            t3 & 2 && A.throwUnsupportedOperation(output);
            t3 = output.length;
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = alphabet.charCodeAt(t1);
            t1 = bits >>> 4 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex0 < t3))
              return A.ioore(output, outputIndex0);
            output[outputIndex0] = alphabet.charCodeAt(t1);
            outputIndex = outputIndex1 + 1;
            t1 = bits << 2 & 63;
            if (!(t1 < t2))
              return A.ioore(alphabet, t1);
            if (!(outputIndex1 < t3))
              return A.ioore(output, outputIndex1);
            output[outputIndex1] = alphabet.charCodeAt(t1);
            if (!(outputIndex < t3))
              return A.ioore(output, outputIndex);
            output[outputIndex] = 61;
          }
          return 0;
        }
        return (bits << 2 | 3 - expectedChars) >>> 0;
      }
      for (i = start; i < end;) {
        byte = t1.$index(bytes, i);
        if (byte < 0 || byte > 255)
          break;
        ++i;
      }
      throw A.wrapException(A.ArgumentError$value(bytes, "Not a byte value at index " + i + ": 0x" + B.JSInt_methods.toRadixString$1(t1.$index(bytes, i), 16), null));
    },
    _Base64Decoder_decodeChunk(input, start, end, output, outIndex, state) {
      var t1, t2, t3, i, charOr, char, t4, code, outIndex0, expectedPadding,
        _s31_ = "Invalid encoding before padding",
        _s17_ = "Invalid character",
        bits = B.JSInt_methods._shrOtherPositive$1(state, 2),
        count = state & 3,
        inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t1 = input.length, t2 = inverseAlphabet.length, t3 = output.$flags | 0, i = start, charOr = 0; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(input, i);
        char = input.charCodeAt(i);
        charOr |= char;
        t4 = char & 127;
        if (!(t4 < t2))
          return A.ioore(inverseAlphabet, t4);
        code = inverseAlphabet[t4];
        if (code >= 0) {
          bits = (bits << 6 | code) & 16777215;
          count = count + 1 & 3;
          if (count === 0) {
            outIndex0 = outIndex + 1;
            t3 & 2 && A.throwUnsupportedOperation(output);
            t4 = output.length;
            if (!(outIndex < t4))
              return A.ioore(output, outIndex);
            output[outIndex] = bits >>> 16 & 255;
            outIndex = outIndex0 + 1;
            if (!(outIndex0 < t4))
              return A.ioore(output, outIndex0);
            output[outIndex0] = bits >>> 8 & 255;
            outIndex0 = outIndex + 1;
            if (!(outIndex < t4))
              return A.ioore(output, outIndex);
            output[outIndex] = bits & 255;
            outIndex = outIndex0;
            bits = 0;
          }
          continue;
        } else if (code === -1 && count > 1) {
          if (charOr > 127)
            break;
          if (count === 3) {
            if ((bits & 3) !== 0)
              throw A.wrapException(A.FormatException$(_s31_, input, i));
            outIndex0 = outIndex + 1;
            t3 & 2 && A.throwUnsupportedOperation(output);
            t1 = output.length;
            if (!(outIndex < t1))
              return A.ioore(output, outIndex);
            output[outIndex] = bits >>> 10;
            if (!(outIndex0 < t1))
              return A.ioore(output, outIndex0);
            output[outIndex0] = bits >>> 2;
          } else {
            if ((bits & 15) !== 0)
              throw A.wrapException(A.FormatException$(_s31_, input, i));
            t3 & 2 && A.throwUnsupportedOperation(output);
            if (!(outIndex < output.length))
              return A.ioore(output, outIndex);
            output[outIndex] = bits >>> 4;
          }
          expectedPadding = (3 - count) * 3;
          if (char === 37)
            expectedPadding += 2;
          return A._Base64Decoder__checkPadding(input, i + 1, end, -expectedPadding - 1);
        }
        throw A.wrapException(A.FormatException$(_s17_, input, i));
      }
      if (charOr >= 0 && charOr <= 127)
        return (bits << 2 | count) >>> 0;
      for (i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(input, i);
        if (input.charCodeAt(i) > 127)
          break;
      }
      throw A.wrapException(A.FormatException$(_s17_, input, i));
    },
    _Base64Decoder__allocateBuffer(input, start, end, state) {
      var paddingStart = A._Base64Decoder__trimPaddingChars(input, start, end),
        $length = (state & 3) + (paddingStart - start),
        bufferLength = B.JSInt_methods._shrOtherPositive$1($length, 2) * 3,
        remainderLength = $length & 3;
      if (remainderLength !== 0 && paddingStart < end)
        bufferLength += remainderLength - 1;
      if (bufferLength > 0)
        return new Uint8Array(bufferLength);
      return $.$get$_Base64Decoder__emptyBuffer();
    },
    _Base64Decoder__trimPaddingChars(input, start, end) {
      var char,
        t1 = input.length,
        newEnd = end,
        index = newEnd,
        padding = 0;
      while (true) {
        if (!(index > start && padding < 2))
          break;
        c$0: {
          --index;
          if (!(index >= 0 && index < t1))
            return A.ioore(input, index);
          char = input.charCodeAt(index);
          if (char === 61) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          if ((char | 32) === 100) {
            if (index === start)
              break;
            --index;
            if (!(index >= 0 && index < t1))
              return A.ioore(input, index);
            char = input.charCodeAt(index);
          }
          if (char === 51) {
            if (index === start)
              break;
            --index;
            if (!(index >= 0 && index < t1))
              return A.ioore(input, index);
            char = input.charCodeAt(index);
          }
          if (char === 37) {
            ++padding;
            newEnd = index;
            break c$0;
          }
          break;
        }
      }
      return newEnd;
    },
    _Base64Decoder__checkPadding(input, start, end, state) {
      var expectedPadding, t1, char;
      if (start === end)
        return state;
      expectedPadding = -state - 1;
      for (t1 = input.length; expectedPadding > 0;) {
        if (!(start < t1))
          return A.ioore(input, start);
        char = input.charCodeAt(start);
        if (expectedPadding === 3) {
          if (char === 61) {
            expectedPadding -= 3;
            ++start;
            break;
          }
          if (char === 37) {
            --expectedPadding;
            ++start;
            if (start === end)
              break;
            if (!(start < t1))
              return A.ioore(input, start);
            char = input.charCodeAt(start);
          } else
            break;
        }
        if ((expectedPadding > 3 ? expectedPadding - 3 : expectedPadding) === 2) {
          if (char !== 51)
            break;
          ++start;
          --expectedPadding;
          if (start === end)
            break;
          if (!(start < t1))
            return A.ioore(input, start);
          char = input.charCodeAt(start);
        }
        if ((char | 32) !== 100)
          break;
        ++start;
        --expectedPadding;
        if (start === end)
          break;
      }
      if (start !== end)
        throw A.wrapException(A.FormatException$("Invalid padding character", input, start));
      return -expectedPadding - 1;
    },
    Encoding_getByName($name) {
      return $.$get$Encoding__nameToEncoding().$index(0, $name.toLowerCase());
    },
    JsonUnsupportedObjectError$(unsupportedObject, cause, partialResult) {
      return new A.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier$(_sink, _toEncodable) {
      var t1 = _toEncodable == null ? A.convert___defaultToEncodable$closure() : _toEncodable;
      return new A._JsonStringStringifier(_sink, [], t1);
    },
    _JsonStringStringifier_stringify(object, toEncodable, indent) {
      var t1,
        output = new A.StringBuffer(""),
        stringifier = A._JsonStringStringifier$(output, toEncodable);
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._convert$_data = null;
    },
    _JsonMap_values_closure: function _JsonMap_values_closure(t0) {
      this.$this = t0;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._parent = t0;
    },
    _Utf8Decoder__decoder_closure: function _Utf8Decoder__decoder_closure() {
    },
    _Utf8Decoder__decoderNonfatal_closure: function _Utf8Decoder__decoderNonfatal_closure() {
    },
    AsciiCodec: function AsciiCodec() {
    },
    _UnicodeSubsetEncoder: function _UnicodeSubsetEncoder() {
    },
    AsciiEncoder: function AsciiEncoder(t0) {
      this._subsetMask = t0;
    },
    _UnicodeSubsetDecoder: function _UnicodeSubsetDecoder() {
    },
    AsciiDecoder: function AsciiDecoder(t0, t1) {
      this._allowInvalid = t0;
      this._subsetMask = t1;
    },
    Base64Codec: function Base64Codec(t0) {
      this._encoder = t0;
    },
    Base64Encoder: function Base64Encoder(t0) {
      this._urlSafe = t0;
    },
    _Base64Encoder: function _Base64Encoder(t0) {
      this._convert$_state = 0;
      this._alphabet = t0;
    },
    Base64Decoder: function Base64Decoder() {
    },
    _Base64Decoder: function _Base64Decoder() {
      this._convert$_state = 0;
    },
    ByteConversionSink: function ByteConversionSink() {
    },
    _ByteCallbackSink: function _ByteCallbackSink(t0, t1) {
      this._callback = t0;
      this._convert$_buffer = t1;
      this._bufferIndex = 0;
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0, t1) {
      this.indent = t0;
      this._toEncodable = t1;
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    Latin1Codec: function Latin1Codec() {
    },
    Latin1Encoder: function Latin1Encoder(t0) {
      this._subsetMask = t0;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._convert$_buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    _BigIntImpl_parse(source, radix) {
      var result = A._BigIntImpl__tryParse(source, radix);
      if (result == null)
        throw A.wrapException(A.FormatException$("Could not parse BigInt", source, null));
      return result;
    },
    _BigIntImpl__parseDecimal(source, isNegative) {
      var part, i,
        result = $.$get$_BigIntImpl_zero(),
        t1 = source.length,
        digitInPartCount = 4 - t1 % 4;
      if (digitInPartCount === 4)
        digitInPartCount = 0;
      for (part = 0, i = 0; i < t1; ++i) {
        part = part * 10 + source.charCodeAt(i) - 48;
        ++digitInPartCount;
        if (digitInPartCount === 4) {
          result = result.$mul(0, $.$get$_BigIntImpl__bigInt10000()).$add(0, A._BigIntImpl__BigIntImpl$_fromInt(part));
          part = 0;
          digitInPartCount = 0;
        }
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__codeUnitToRadixValue(codeUnit) {
      if (48 <= codeUnit && codeUnit <= 57)
        return codeUnit - 48;
      return (codeUnit | 32) - 97 + 10;
    },
    _BigIntImpl__parseHex(source, startPos, isNegative) {
      var i, chunk, j, i0, digitValue, digitIndex, digitIndex0,
        t1 = source.length,
        sourceLength = t1 - startPos,
        chunkCount = B.JSNumber_methods.ceil$0(sourceLength / 4),
        digits = new Uint16Array(chunkCount),
        t2 = chunkCount - 1,
        lastDigitLength = sourceLength - t2 * 4;
      for (i = startPos, chunk = 0, j = 0; j < lastDigitLength; ++j, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(source, i);
        digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
        if (digitValue >= 16)
          return null;
        chunk = chunk * 16 + digitValue;
      }
      digitIndex = t2 - 1;
      if (!(t2 >= 0 && t2 < chunkCount))
        return A.ioore(digits, t2);
      digits[t2] = chunk;
      for (; i < t1; digitIndex = digitIndex0) {
        for (chunk = 0, j = 0; j < 4; ++j, i = i0) {
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(source, i);
          digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
          if (digitValue >= 16)
            return null;
          chunk = chunk * 16 + digitValue;
        }
        digitIndex0 = digitIndex - 1;
        if (!(digitIndex >= 0 && digitIndex < chunkCount))
          return A.ioore(digits, digitIndex);
        digits[digitIndex] = chunk;
      }
      if (chunkCount === 1) {
        if (0 >= chunkCount)
          return A.ioore(digits, 0);
        t1 = digits[0] === 0;
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_zero();
      t1 = A._BigIntImpl__normalize(chunkCount, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__parseRadix(source, radix, isNegative) {
      var t1, i, digitValue,
        result = $.$get$_BigIntImpl_zero(),
        base = A._BigIntImpl__BigIntImpl$_fromInt(radix);
      for (t1 = source.length, i = 0; i < t1; ++i) {
        digitValue = A._BigIntImpl__codeUnitToRadixValue(source.charCodeAt(i));
        if (digitValue >= radix)
          return null;
        result = result.$mul(0, base).$add(0, A._BigIntImpl__BigIntImpl$_fromInt(digitValue));
      }
      if (isNegative)
        return result.$negate(0);
      return result;
    },
    _BigIntImpl__tryParse(source, radix) {
      var match, t1, t2, isNegative, decimalMatch, hexMatch, nonDecimalMatch, _null = null;
      if (source === "")
        return _null;
      match = $.$get$_BigIntImpl__parseRE().firstMatch$1(source);
      if (match == null)
        return _null;
      t1 = match._match;
      t2 = t1.length;
      if (1 >= t2)
        return A.ioore(t1, 1);
      isNegative = t1[1] === "-";
      if (4 >= t2)
        return A.ioore(t1, 4);
      decimalMatch = t1[4];
      hexMatch = t1[3];
      if (5 >= t2)
        return A.ioore(t1, 5);
      nonDecimalMatch = t1[5];
      if (radix == null) {
        if (decimalMatch != null)
          return A._BigIntImpl__parseDecimal(decimalMatch, isNegative);
        if (hexMatch != null)
          return A._BigIntImpl__parseHex(hexMatch, 2, isNegative);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return A._BigIntImpl__parseDecimal(decimalMatch, isNegative);
      if (radix === 16)
        t1 = decimalMatch != null || nonDecimalMatch != null;
      else
        t1 = false;
      if (t1) {
        if (decimalMatch == null) {
          nonDecimalMatch.toString;
          t1 = nonDecimalMatch;
        } else
          t1 = decimalMatch;
        return A._BigIntImpl__parseHex(t1, 0, isNegative);
      }
      t1 = decimalMatch == null ? nonDecimalMatch : decimalMatch;
      if (t1 == null) {
        hexMatch.toString;
        t1 = hexMatch;
      }
      return A._BigIntImpl__parseRadix(t1, radix, isNegative);
    },
    _BigIntImpl__normalize(used, digits) {
      var t2,
        t1 = digits.length;
      while (true) {
        if (used > 0) {
          t2 = used - 1;
          if (!(t2 < t1))
            return A.ioore(digits, t2);
          t2 = digits[t2] === 0;
        } else
          t2 = false;
        if (!t2)
          break;
        --used;
      }
      return used;
    },
    _BigIntImpl__cloneDigits(digits, from, to, $length) {
      var t1, i, t2,
        resultDigits = new Uint16Array($length),
        n = to - from;
      for (t1 = digits.length, i = 0; i < n; ++i) {
        t2 = from + i;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(digits, t2);
        t2 = digits[t2];
        if (!(i < $length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      return resultDigits;
    },
    _BigIntImpl__BigIntImpl$from(value) {
      var t1;
      if (value === 0)
        return $.$get$_BigIntImpl_zero();
      if (value === 1)
        return $.$get$_BigIntImpl_one();
      if (value === 2)
        return $.$get$_BigIntImpl_two();
      if (Math.abs(value) < 4294967296)
        return A._BigIntImpl__BigIntImpl$_fromInt(B.JSInt_methods.toInt$0(value));
      t1 = A._BigIntImpl__BigIntImpl$_fromDouble(value);
      return t1;
    },
    _BigIntImpl__BigIntImpl$_fromInt(value) {
      var digits, t1, i, i0,
        isNegative = value < 0;
      if (isNegative) {
        if (value === -9223372036854776e3) {
          digits = new Uint16Array(4);
          digits[3] = 32768;
          t1 = A._BigIntImpl__normalize(4, digits);
          return new A._BigIntImpl(t1 !== 0, digits, t1);
        }
        value = -value;
      }
      if (value < 65536) {
        digits = new Uint16Array(1);
        digits[0] = value;
        t1 = A._BigIntImpl__normalize(1, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      if (value <= 4294967295) {
        digits = new Uint16Array(2);
        digits[0] = value & 65535;
        digits[1] = B.JSInt_methods._shrOtherPositive$1(value, 16);
        t1 = A._BigIntImpl__normalize(2, digits);
        return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
      }
      t1 = B.JSInt_methods._tdivFast$1(B.JSInt_methods.get$bitLength(value) - 1, 16) + 1;
      digits = new Uint16Array(t1);
      for (i = 0; value !== 0; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(digits, i);
        digits[i] = value & 65535;
        value = B.JSInt_methods._tdivFast$1(value, 65536);
      }
      t1 = A._BigIntImpl__normalize(t1, digits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, digits, t1);
    },
    _BigIntImpl__BigIntImpl$_fromDouble(value) {
      var isNegative, bits, t1, i, exponent, unshiftedDigits, unshiftedBig, absResult;
      if (isNaN(value) || value == 1 / 0 || value == -1 / 0)
        throw A.wrapException(A.ArgumentError$("Value must be finite: " + value, null));
      isNegative = value < 0;
      if (isNegative)
        value = -value;
      value = Math.floor(value);
      if (value === 0)
        return $.$get$_BigIntImpl_zero();
      bits = $.$get$_BigIntImpl__bitsForFromDouble();
      for (t1 = bits.$flags | 0, i = 0; i < 8; ++i) {
        t1 & 2 && A.throwUnsupportedOperation(bits);
        if (!(i < 8))
          return A.ioore(bits, i);
        bits[i] = 0;
      }
      t1 = J.asByteData$0$x(B.NativeUint8List_methods.get$buffer(bits));
      t1.$flags & 2 && A.throwUnsupportedOperation(t1, 13);
      t1.setFloat64(0, value, true);
      exponent = (bits[7] << 4 >>> 0) + (bits[6] >>> 4) - 1075;
      unshiftedDigits = new Uint16Array(4);
      unshiftedDigits[0] = (bits[1] << 8 >>> 0) + bits[0];
      unshiftedDigits[1] = (bits[3] << 8 >>> 0) + bits[2];
      unshiftedDigits[2] = (bits[5] << 8 >>> 0) + bits[4];
      unshiftedDigits[3] = bits[6] & 15 | 16;
      unshiftedBig = new A._BigIntImpl(false, unshiftedDigits, 4);
      if (exponent < 0)
        absResult = unshiftedBig.$shr(0, -exponent);
      else
        absResult = exponent > 0 ? unshiftedBig.$shl(0, exponent) : unshiftedBig;
      if (isNegative)
        return absResult.$negate(0);
      return absResult;
    },
    _BigIntImpl__dlShiftDigits(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, t3, t4;
      if (xUsed === 0)
        return 0;
      if (n === 0 && resultDigits === xDigits)
        return xUsed;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.$flags | 0; i >= 0; --i) {
        t3 = i + n;
        if (!(i < t1))
          return A.ioore(xDigits, i);
        t4 = xDigits[i];
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(t3 >= 0 && t3 < resultDigits.length))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = t4;
      }
      for (i = n - 1; i >= 0; --i) {
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return xUsed + n;
    },
    _BigIntImpl__lsh(xDigits, xUsed, n, resultDigits) {
      var i, t1, t2, carry, digit, t3, t4,
        digitShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, carryBitShift) - 1;
      for (i = xUsed - 1, t1 = xDigits.length, t2 = resultDigits.$flags | 0, carry = 0; i >= 0; --i) {
        if (!(i < t1))
          return A.ioore(xDigits, i);
        digit = xDigits[i];
        t3 = i + digitShift + 1;
        t4 = B.JSInt_methods._shrReceiverPositive$1(digit, carryBitShift);
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(t3 >= 0 && t3 < resultDigits.length))
          return A.ioore(resultDigits, t3);
        resultDigits[t3] = (t4 | carry) >>> 0;
        carry = B.JSInt_methods.$shl(digit & bitMask, bitShift);
      }
      t2 & 2 && A.throwUnsupportedOperation(resultDigits);
      if (!(digitShift >= 0 && digitShift < resultDigits.length))
        return A.ioore(resultDigits, digitShift);
      resultDigits[digitShift] = carry;
    },
    _BigIntImpl__lShiftDigits(xDigits, xUsed, n, resultDigits) {
      var resultUsed, t1, i,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16);
      if (B.JSInt_methods.$mod(n, 16) === 0)
        return A._BigIntImpl__dlShiftDigits(xDigits, xUsed, digitsShift, resultDigits);
      resultUsed = xUsed + digitsShift + 1;
      A._BigIntImpl__lsh(xDigits, xUsed, n, resultDigits);
      for (t1 = resultDigits.$flags | 0, i = digitsShift; --i, i >= 0;) {
        t1 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      t1 = resultUsed - 1;
      if (!(t1 >= 0 && t1 < resultDigits.length))
        return A.ioore(resultDigits, t1);
      if (resultDigits[t1] === 0)
        resultUsed = t1;
      return resultUsed;
    },
    _BigIntImpl__rsh(xDigits, xUsed, n, resultDigits) {
      var carry, last, t2, i, t3, digit,
        digitsShift = B.JSInt_methods._tdivFast$1(n, 16),
        bitShift = B.JSInt_methods.$mod(n, 16),
        carryBitShift = 16 - bitShift,
        bitMask = B.JSInt_methods.$shl(1, bitShift) - 1,
        t1 = xDigits.length;
      if (!(digitsShift >= 0 && digitsShift < t1))
        return A.ioore(xDigits, digitsShift);
      carry = B.JSInt_methods._shrReceiverPositive$1(xDigits[digitsShift], bitShift);
      last = xUsed - digitsShift - 1;
      for (t2 = resultDigits.$flags | 0, i = 0; i < last; ++i) {
        t3 = i + digitsShift + 1;
        if (!(t3 < t1))
          return A.ioore(xDigits, t3);
        digit = xDigits[t3];
        t3 = B.JSInt_methods.$shl((digit & bitMask) >>> 0, carryBitShift);
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = (t3 | carry) >>> 0;
        carry = B.JSInt_methods._shrReceiverPositive$1(digit, bitShift);
      }
      t2 & 2 && A.throwUnsupportedOperation(resultDigits);
      if (!(last >= 0 && last < resultDigits.length))
        return A.ioore(resultDigits, last);
      resultDigits[last] = carry;
    },
    _BigIntImpl__compareDigits(digits, used, otherDigits, otherUsed) {
      var i, t1, t2, t3,
        result = used - otherUsed;
      if (result === 0)
        for (i = used - 1, t1 = digits.length, t2 = otherDigits.length; i >= 0; --i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          t3 = digits[i];
          if (!(i < t2))
            return A.ioore(otherDigits, i);
          result = t3 - otherDigits[i];
          if (result !== 0)
            return result;
        }
      return result;
    },
    _BigIntImpl__absAdd(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.$flags | 0, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 + otherDigits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = carry >>> 16;
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = carry >>> 16;
      }
      t3 & 2 && A.throwUnsupportedOperation(resultDigits);
      if (!(used >= 0 && used < resultDigits.length))
        return A.ioore(resultDigits, used);
      resultDigits[used] = carry;
    },
    _BigIntImpl__absSub(digits, used, otherDigits, otherUsed, resultDigits) {
      var t1, t2, t3, carry, i, t4;
      for (t1 = digits.length, t2 = otherDigits.length, t3 = resultDigits.$flags | 0, carry = 0, i = 0; i < otherUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t4 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        carry += t4 - otherDigits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
      for (i = otherUsed; i < used; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        carry += digits[i];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = carry & 65535;
        carry = 0 - (B.JSInt_methods._shrOtherPositive$1(carry, 16) & 1);
      }
    },
    _BigIntImpl__mulAdd(x, multiplicandDigits, i, accumulatorDigits, j, n) {
      var t1, t2, t3, c, i0, t4, combined, j0, l;
      if (x === 0)
        return;
      for (t1 = multiplicandDigits.length, t2 = accumulatorDigits.length, t3 = accumulatorDigits.$flags | 0, c = 0; --n, n >= 0; j = j0, i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(multiplicandDigits, i);
        t4 = multiplicandDigits[i];
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        combined = x * t4 + accumulatorDigits[j] + c;
        j0 = j + 1;
        t3 & 2 && A.throwUnsupportedOperation(accumulatorDigits);
        accumulatorDigits[j] = combined & 65535;
        c = B.JSInt_methods._tdivFast$1(combined, 65536);
      }
      for (; c !== 0; j = j0) {
        if (!(j >= 0 && j < t2))
          return A.ioore(accumulatorDigits, j);
        l = accumulatorDigits[j] + c;
        j0 = j + 1;
        t3 & 2 && A.throwUnsupportedOperation(accumulatorDigits);
        accumulatorDigits[j] = l & 65535;
        c = B.JSInt_methods._tdivFast$1(l, 65536);
      }
    },
    _BigIntImpl__mulDigits(xDigits, xUsed, otherDigits, otherUsed, resultDigits) {
      var t1, i,
        resultUsed = xUsed + otherUsed;
      for (t1 = resultDigits.$flags | 0, i = resultUsed; --i, i >= 0;) {
        t1 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (!(i < t1))
          return A.ioore(otherDigits, i);
        A._BigIntImpl__mulAdd(otherDigits[i], xDigits, 0, resultDigits, i, xUsed);
        ++i;
      }
      return resultUsed;
    },
    _BigIntImpl__estimateQuotientDigit(topDigitDivisor, digits, i) {
      var t2, t3, quotientDigit,
        t1 = digits.length;
      if (!(i >= 0 && i < t1))
        return A.ioore(digits, i);
      t2 = digits[i];
      if (t2 === topDigitDivisor)
        return 65535;
      t3 = i - 1;
      if (!(t3 >= 0 && t3 < t1))
        return A.ioore(digits, t3);
      quotientDigit = B.JSInt_methods.$tdiv((t2 << 16 | digits[t3]) >>> 0, topDigitDivisor);
      if (quotientDigit > 65535)
        return 65535;
      return quotientDigit;
    },
    _BigIntImpl__binaryGcd(x, y, inv) {
      var t1, uDigits, vDigits, ac, abcdUsed, abcdLen, aDigits, cDigits, bDigits, dDigits, t2, t3, t4, aIsNegative, cIsNegative, bIsNegative, dIsNegative, t5, a_cmp_c, b_cmp_d, c_cmp_a, d_cmp_b, i,
        _s11_ = "Not coprime",
        xUsed = x._used,
        yUsed = y._used,
        maxUsed = xUsed > yUsed ? xUsed : yUsed,
        xDigits = A._BigIntImpl__cloneDigits(x._digits, 0, xUsed, maxUsed),
        yDigits = A._BigIntImpl__cloneDigits(y._digits, 0, yUsed, maxUsed);
      if (yUsed === 1) {
        if (0 >= yDigits.length)
          return A.ioore(yDigits, 0);
        t1 = yDigits[0] === 1;
      } else
        t1 = false;
      if (t1)
        return $.$get$_BigIntImpl_one();
      if (yUsed !== 0) {
        if (0 >= yDigits.length)
          return A.ioore(yDigits, 0);
        if ((yDigits[0] & 1) === 0) {
          if (0 >= xDigits.length)
            return A.ioore(xDigits, 0);
          t1 = (xDigits[0] & 1) === 0;
        } else
          t1 = false;
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.Exception_Exception(_s11_));
      uDigits = A._BigIntImpl__cloneDigits(xDigits, 0, xUsed, maxUsed);
      vDigits = A._BigIntImpl__cloneDigits(yDigits, 0, yUsed, maxUsed + 2);
      if (0 >= xDigits.length)
        return A.ioore(xDigits, 0);
      ac = (xDigits[0] & 1) === 0;
      abcdUsed = maxUsed + 1;
      abcdLen = abcdUsed + 2;
      aDigits = $.$get$_dummyList();
      if (ac) {
        aDigits = new Uint16Array(abcdLen);
        if (0 >= abcdLen)
          return A.ioore(aDigits, 0);
        aDigits[0] = 1;
        cDigits = new Uint16Array(abcdLen);
      } else
        cDigits = aDigits;
      bDigits = new Uint16Array(abcdLen);
      dDigits = new Uint16Array(abcdLen);
      if (0 >= abcdLen)
        return A.ioore(dDigits, 0);
      dDigits[0] = 1;
      for (t1 = uDigits.length, t2 = vDigits.length, t3 = cDigits.length, t4 = aDigits.length, aIsNegative = false, cIsNegative = false, bIsNegative = false, dIsNegative = false; true;) {
        if (0 >= t1)
          return A.ioore(uDigits, 0);
        for (; (uDigits[0] & 1) === 0;) {
          A._BigIntImpl__rsh(uDigits, maxUsed, 1, uDigits);
          if (ac) {
            if (0 >= t4)
              return A.ioore(aDigits, 0);
            if ((aDigits[0] & 1) !== 1) {
              if (0 >= abcdLen)
                return A.ioore(bDigits, 0);
              t5 = (bDigits[0] & 1) === 1;
            } else
              t5 = true;
            if (t5) {
              if (aIsNegative) {
                if (!(maxUsed >= 0 && maxUsed < t4))
                  return A.ioore(aDigits, maxUsed);
                aIsNegative = aDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(aDigits, maxUsed, yDigits, maxUsed) > 0;
                if (aIsNegative)
                  A._BigIntImpl__absSub(aDigits, abcdUsed, yDigits, maxUsed, aDigits);
                else
                  A._BigIntImpl__absSub(yDigits, maxUsed, aDigits, maxUsed, aDigits);
              } else
                A._BigIntImpl__absAdd(aDigits, abcdUsed, yDigits, maxUsed, aDigits);
              if (bIsNegative)
                A._BigIntImpl__absAdd(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
              else {
                if (!(maxUsed >= 0 && maxUsed < abcdLen))
                  return A.ioore(bDigits, maxUsed);
                t5 = bDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(bDigits, maxUsed, xDigits, maxUsed) > 0;
                if (t5)
                  A._BigIntImpl__absSub(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
                else
                  A._BigIntImpl__absSub(xDigits, maxUsed, bDigits, maxUsed, bDigits);
                bIsNegative = !t5;
              }
            }
            A._BigIntImpl__rsh(aDigits, abcdUsed, 1, aDigits);
          } else {
            if (0 >= abcdLen)
              return A.ioore(bDigits, 0);
            if ((bDigits[0] & 1) === 1)
              if (bIsNegative)
                A._BigIntImpl__absAdd(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
              else {
                if (!(maxUsed >= 0 && maxUsed < abcdLen))
                  return A.ioore(bDigits, maxUsed);
                t5 = bDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(bDigits, maxUsed, xDigits, maxUsed) > 0;
                if (t5)
                  A._BigIntImpl__absSub(bDigits, abcdUsed, xDigits, maxUsed, bDigits);
                else
                  A._BigIntImpl__absSub(xDigits, maxUsed, bDigits, maxUsed, bDigits);
                bIsNegative = !t5;
              }
          }
          A._BigIntImpl__rsh(bDigits, abcdUsed, 1, bDigits);
        }
        if (0 >= t2)
          return A.ioore(vDigits, 0);
        for (; (vDigits[0] & 1) === 0;) {
          A._BigIntImpl__rsh(vDigits, maxUsed, 1, vDigits);
          if (ac) {
            if (0 >= t3)
              return A.ioore(cDigits, 0);
            if ((cDigits[0] & 1) === 1 || (dDigits[0] & 1) === 1) {
              if (cIsNegative) {
                if (!(maxUsed >= 0 && maxUsed < t3))
                  return A.ioore(cDigits, maxUsed);
                cIsNegative = cDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(cDigits, maxUsed, yDigits, maxUsed) > 0;
                if (cIsNegative)
                  A._BigIntImpl__absSub(cDigits, abcdUsed, yDigits, maxUsed, cDigits);
                else
                  A._BigIntImpl__absSub(yDigits, maxUsed, cDigits, maxUsed, cDigits);
              } else
                A._BigIntImpl__absAdd(cDigits, abcdUsed, yDigits, maxUsed, cDigits);
              if (dIsNegative)
                A._BigIntImpl__absAdd(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
              else {
                if (!(maxUsed >= 0 && maxUsed < abcdLen))
                  return A.ioore(dDigits, maxUsed);
                t5 = dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) > 0;
                if (t5)
                  A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
                else
                  A._BigIntImpl__absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
                dIsNegative = !t5;
              }
            }
            A._BigIntImpl__rsh(cDigits, abcdUsed, 1, cDigits);
          } else if ((dDigits[0] & 1) === 1)
            if (dIsNegative)
              A._BigIntImpl__absAdd(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
            else {
              if (!(maxUsed >= 0 && maxUsed < abcdLen))
                return A.ioore(dDigits, maxUsed);
              t5 = dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) > 0;
              if (t5)
                A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
              else
                A._BigIntImpl__absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
              dIsNegative = !t5;
            }
          A._BigIntImpl__rsh(dDigits, abcdUsed, 1, dDigits);
        }
        if (A._BigIntImpl__compareDigits(uDigits, maxUsed, vDigits, maxUsed) >= 0) {
          A._BigIntImpl__absSub(uDigits, maxUsed, vDigits, maxUsed, uDigits);
          if (ac)
            if (aIsNegative === cIsNegative) {
              a_cmp_c = A._BigIntImpl__compareDigits(aDigits, abcdUsed, cDigits, abcdUsed);
              if (a_cmp_c > 0)
                A._BigIntImpl__absSub(aDigits, abcdUsed, cDigits, abcdUsed, aDigits);
              else {
                A._BigIntImpl__absSub(cDigits, abcdUsed, aDigits, abcdUsed, aDigits);
                aIsNegative = !aIsNegative && a_cmp_c !== 0;
              }
            } else
              A._BigIntImpl__absAdd(aDigits, abcdUsed, cDigits, abcdUsed, aDigits);
          if (bIsNegative === dIsNegative) {
            b_cmp_d = A._BigIntImpl__compareDigits(bDigits, abcdUsed, dDigits, abcdUsed);
            if (b_cmp_d > 0)
              A._BigIntImpl__absSub(bDigits, abcdUsed, dDigits, abcdUsed, bDigits);
            else {
              A._BigIntImpl__absSub(dDigits, abcdUsed, bDigits, abcdUsed, bDigits);
              bIsNegative = !bIsNegative && b_cmp_d !== 0;
            }
          } else
            A._BigIntImpl__absAdd(bDigits, abcdUsed, dDigits, abcdUsed, bDigits);
        } else {
          A._BigIntImpl__absSub(vDigits, maxUsed, uDigits, maxUsed, vDigits);
          if (ac)
            if (cIsNegative === aIsNegative) {
              c_cmp_a = A._BigIntImpl__compareDigits(cDigits, abcdUsed, aDigits, abcdUsed);
              if (c_cmp_a > 0)
                A._BigIntImpl__absSub(cDigits, abcdUsed, aDigits, abcdUsed, cDigits);
              else {
                A._BigIntImpl__absSub(aDigits, abcdUsed, cDigits, abcdUsed, cDigits);
                cIsNegative = !cIsNegative && c_cmp_a !== 0;
              }
            } else
              A._BigIntImpl__absAdd(cDigits, abcdUsed, aDigits, abcdUsed, cDigits);
          if (dIsNegative === bIsNegative) {
            d_cmp_b = A._BigIntImpl__compareDigits(dDigits, abcdUsed, bDigits, abcdUsed);
            if (d_cmp_b > 0)
              A._BigIntImpl__absSub(dDigits, abcdUsed, bDigits, abcdUsed, dDigits);
            else {
              A._BigIntImpl__absSub(bDigits, abcdUsed, dDigits, abcdUsed, dDigits);
              dIsNegative = !dIsNegative && d_cmp_b !== 0;
            }
          } else
            A._BigIntImpl__absAdd(dDigits, abcdUsed, bDigits, abcdUsed, dDigits);
        }
        i = maxUsed;
        while (true) {
          if (i > 0) {
            t5 = i - 1;
            if (!(t5 < t1))
              return A.ioore(uDigits, t5);
            t5 = uDigits[t5] === 0;
          } else
            t5 = false;
          if (!t5)
            break;
          --i;
        }
        if (i === 0)
          break;
      }
      i = maxUsed - 1;
      while (true) {
        if (i > 0) {
          if (!(i < t2))
            return A.ioore(vDigits, i);
          t1 = vDigits[i] === 0;
        } else
          t1 = false;
        if (!t1)
          break;
        --i;
      }
      if (i === 0) {
        if (0 >= t2)
          return A.ioore(vDigits, 0);
        t1 = vDigits[0] !== 1;
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.Exception_Exception(_s11_));
      if (dIsNegative) {
        if (!(maxUsed >= 0 && maxUsed < abcdLen))
          return A.ioore(dDigits, maxUsed);
        while (true) {
          if (!(dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) > 0))
            break;
          A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
        }
        A._BigIntImpl__absSub(xDigits, maxUsed, dDigits, maxUsed, dDigits);
      } else {
        if (!(maxUsed >= 0 && maxUsed < abcdLen))
          return A.ioore(dDigits, maxUsed);
        while (true) {
          if (!(dDigits[maxUsed] !== 0 || A._BigIntImpl__compareDigits(dDigits, maxUsed, xDigits, maxUsed) >= 0))
            break;
          A._BigIntImpl__absSub(dDigits, abcdUsed, xDigits, maxUsed, dDigits);
        }
      }
      t1 = A._BigIntImpl__normalize(maxUsed, dDigits);
      return new A._BigIntImpl(false, dDigits, t1);
    },
    identityHashCode(object) {
      return A.objectHashCode(object);
    },
    int_parse(source, radix) {
      var value = A.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null, null));
    },
    Error__throw(error, stackTrace) {
      error = A.initializeExceptionWrapper(error, new Error());
      if (error == null)
        error = type$.Object._as(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      if (growable)
        return list;
      list.$flags = 1;
      return list;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    List_List$generate($length, generator, $E) {
      var i,
        result = J.JSArray_JSArray$growable($length, $E);
      for (i = 0; i < $length; ++i)
        B.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    List_List$unmodifiable(elements, $E) {
      var result = A.List_List$from(elements, false, $E);
      result.$flags = 3;
      return result;
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var t1, t2, maxLength, array, len;
      A.RangeError_checkNotNegative(start, "start");
      t1 = end == null;
      t2 = !t1;
      if (t2) {
        maxLength = end - start;
        if (maxLength < 0)
          throw A.wrapException(A.RangeError$range(end, start, null, "end", null));
        if (maxLength === 0)
          return "";
      }
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        if (t1)
          end = len;
        return A.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return A.String__stringFromUint8List(charCodes, start, end);
      if (t2)
        charCodes = J.take$1$ax(charCodes, end);
      if (start > 0)
        charCodes = J.skip$1$ax(charCodes, start);
      t1 = A.List_List$_of(charCodes, type$.int);
      return A.Primitives_stringFromCharCodes(t1);
    },
    String__stringFromUint8List(charCodes, start, endOrNull) {
      var len = charCodes.length;
      if (start >= len)
        return "";
      return A.Primitives_stringFromNativeUint8List(charCodes, start, endOrNull == null || endOrNull > len ? len : endOrNull);
    },
    RegExp_RegExp(source, caseSensitive) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, false, caseSensitive, false, false, ""));
    },
    identical(a, b) {
      return a == null ? b == null : a === b;
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current());
      }
      return string;
    },
    Uri_base() {
      var cachedUri, uri,
        current = A.Primitives_currentUri();
      if (current == null)
        throw A.wrapException(A.UnsupportedError$("'Uri.base' is not supported"));
      cachedUri = $.Uri__cachedBaseUri;
      if (cachedUri != null && current === $.Uri__cachedBaseString)
        return cachedUri;
      uri = A.Uri_parse(current, 0, null);
      $.Uri__cachedBaseUri = uri;
      $.Uri__cachedBaseString = current;
      return uri;
    },
    _Uri__uriEncode(canonicalMask, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, byte,
        _s16_ = "0123456789ABCDEF";
      if (encoding === B.C_Utf8Codec) {
        t1 = $.$get$_Uri__needsNoEncoding();
        t1 = t1._nativeRegExp.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      bytes = encoding.encode$1(text);
      for (t1 = bytes.length, i = 0, t2 = ""; i < t1; ++i) {
        byte = bytes[i];
        if (byte < 128 && (string$.x00_____.charCodeAt(byte) & canonicalMask) !== 0)
          t2 += A.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[byte >>> 4 & 15] + _s16_[byte & 15];
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    _Uri__makeQueryFromParameters(queryParameters) {
      var params, encoded, $length;
      if (!$.$get$_Uri__useURLSearchParams())
        return A._Uri__makeQueryFromParametersDefault(queryParameters);
      params = new URLSearchParams();
      queryParameters.forEach$1(0, new A._Uri__makeQueryFromParameters_closure(params));
      encoded = params.toString();
      $length = encoded.length;
      if ($length > 0 && encoded[$length - 1] === "=")
        encoded = B.JSString_methods.substring$2(encoded, 0, $length - 1);
      return encoded.replace(/=&|\*|%7E/g, m => m === "=&" ? "&" : m === "*" ? "%2A" : "~");
    },
    StackTrace_current() {
      return A.getTraceFromException(new Error());
    },
    DateTime__finishParse(year, month, day, hour, minute, second, millisecond, microsecond, isUtc) {
      var value = A.Primitives_valueFromDecomposedDate(year, month, day, hour, minute, second, millisecond, microsecond, isUtc);
      if (value == null)
        return null;
      return new A.DateTime(A.DateTime__validate(value, microsecond, isUtc), microsecond, isUtc);
    },
    DateTime_parse(formattedString) {
      var t1, t2, t3, years, month, day, hour, minute, second, milliAndMicroseconds, millisecond, isUtc, tzSign, sign, hourDifference, result, _null = null,
        match = $.$get$DateTime__parseFormat().firstMatch$1(formattedString);
      if (match != null) {
        t1 = new A.DateTime_parse_parseIntOrZero();
        t2 = match._match;
        if (1 >= t2.length)
          return A.ioore(t2, 1);
        t3 = t2[1];
        t3.toString;
        years = A.int_parse(t3, _null);
        if (2 >= t2.length)
          return A.ioore(t2, 2);
        t3 = t2[2];
        t3.toString;
        month = A.int_parse(t3, _null);
        if (3 >= t2.length)
          return A.ioore(t2, 3);
        t3 = t2[3];
        t3.toString;
        day = A.int_parse(t3, _null);
        if (4 >= t2.length)
          return A.ioore(t2, 4);
        hour = t1.call$1(t2[4]);
        if (5 >= t2.length)
          return A.ioore(t2, 5);
        minute = t1.call$1(t2[5]);
        if (6 >= t2.length)
          return A.ioore(t2, 6);
        second = t1.call$1(t2[6]);
        if (7 >= t2.length)
          return A.ioore(t2, 7);
        milliAndMicroseconds = new A.DateTime_parse_parseMilliAndMicroseconds().call$1(t2[7]);
        millisecond = B.JSInt_methods._tdivFast$1(milliAndMicroseconds, 1000);
        t3 = t2.length;
        if (8 >= t3)
          return A.ioore(t2, 8);
        isUtc = t2[8] != null;
        if (isUtc) {
          if (9 >= t3)
            return A.ioore(t2, 9);
          tzSign = t2[9];
          if (tzSign != null) {
            sign = tzSign === "-" ? -1 : 1;
            if (10 >= t3)
              return A.ioore(t2, 10);
            t3 = t2[10];
            t3.toString;
            hourDifference = A.int_parse(t3, _null);
            if (11 >= t2.length)
              return A.ioore(t2, 11);
            minute -= sign * (t1.call$1(t2[11]) + 60 * hourDifference);
          }
        }
        result = A.DateTime__finishParse(years, month, day, hour, minute, second, millisecond, milliAndMicroseconds % 1000, isUtc);
        if (result == null)
          throw A.wrapException(A.FormatException$("Time out of range", formattedString, _null));
        return result;
      } else
        throw A.wrapException(A.FormatException$("Invalid date format", formattedString, _null));
    },
    DateTime_tryParse(formattedString) {
      var t1, exception;
      try {
        t1 = A.DateTime_parse(formattedString);
        return t1;
      } catch (exception) {
        if (type$.FormatException._is(A.unwrapException(exception)))
          return null;
        else
          throw exception;
      }
    },
    DateTime__validate(millisecondsSinceEpoch, microsecond, isUtc) {
      var _s11_ = "microsecond";
      if (microsecond < 0 || microsecond > 999)
        throw A.wrapException(A.RangeError$range(microsecond, 0, 999, _s11_, null));
      if (millisecondsSinceEpoch < -864e13 || millisecondsSinceEpoch > 864e13)
        throw A.wrapException(A.RangeError$range(millisecondsSinceEpoch, -864e13, 864e13, "millisecondsSinceEpoch", null));
      if (millisecondsSinceEpoch === 864e13 && microsecond !== 0)
        throw A.wrapException(A.ArgumentError$value(microsecond, _s11_, string$.Time_i));
      A.checkNotNullable(isUtc, "isUtc", type$.bool);
      return millisecondsSinceEpoch;
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__sixDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "+";
      if (absN >= 100000)
        return sign + absN;
      return sign + "0" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Primitives_safeToString(object);
    },
    Error_throwWithStackTrace(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      A.checkNotNullable(stackTrace, "stackTrace", type$.StackTrace);
      A.Error__throw(error, stackTrace);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    ArgumentError_checkNotNull(argument, $name, $T) {
      return argument;
    },
    RangeError$(message) {
      var _null = null;
      return new A.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value(value, $name) {
      return new A.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw A.wrapException(A.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$withLength(invalidValue, $length, indexable, message, $name) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new A._Exception(message);
    },
    FormatException$(message, source, offset) {
      return new A.FormatException(message, source, offset);
    },
    Iterable_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A.isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Iterable_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A.isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    Map_castFrom(source, $K, $V, K2, V2) {
      return new A.CastMap(source, $K._eval$1("@<0>")._bind$1($V)._bind$1(K2)._bind$1(V2)._eval$1("CastMap<1,2,3,4>"));
    },
    Map_Map$fromEntries(entries, $K, $V) {
      var t1 = A.LinkedHashMap_LinkedHashMap$_empty($K, $V);
      t1.addEntries$1(entries);
      return t1;
    },
    Object_hash(object1, object2, object3, object4) {
      var t1;
      if (B.C_SentinelValue === object3) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      }
      if (B.C_SentinelValue === object4) {
        t1 = J.get$hashCode$(object1);
        object2 = J.get$hashCode$(object2);
        object3 = J.get$hashCode$(object3);
        return A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3));
      }
      t1 = J.get$hashCode$(object1);
      object2 = J.get$hashCode$(object2);
      object3 = J.get$hashCode$(object3);
      object4 = J.get$hashCode$(object4);
      object4 = A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2), object3), object4));
      return object4;
    },
    Object_hashAll(objects) {
      var t1, _i,
        hash = $.$get$_hashSeed();
      for (t1 = objects.length, _i = 0; _i < objects.length; objects.length === t1 || (0, A.throwConcurrentModificationError)(objects), ++_i)
        hash = A.SystemHash_combine(hash, J.get$hashCode$(objects[_i]));
      return A.SystemHash_finish(hash);
    },
    _combineSurrogatePair(start, end) {
      return 65536 + ((start & 1023) << 10) + (end & 1023);
    },
    Uri_parse(uri, start, end) {
      var t1, t2, t3, t4, t5, delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, start0, schemeAuth, port, userInfoStart, userInfo, host, portNumber, path, query, _null = null;
      end = uri.length;
      t1 = start + 5;
      if (end >= t1) {
        t2 = start + 4;
        if (!(t2 < end))
          return A.ioore(uri, t2);
        if (!(start < end))
          return A.ioore(uri, start);
        t3 = start + 1;
        if (!(t3 < end))
          return A.ioore(uri, t3);
        t4 = start + 2;
        if (!(t4 < end))
          return A.ioore(uri, t4);
        t5 = start + 3;
        if (!(t5 < end))
          return A.ioore(uri, t5);
        delta = ((uri.charCodeAt(t2) ^ 58) * 3 | uri.charCodeAt(start) ^ 100 | uri.charCodeAt(t3) ^ 97 | uri.charCodeAt(t4) ^ 116 | uri.charCodeAt(t5) ^ 97) >>> 0;
        if (delta === 0)
          return A.UriData__parse(start > 0 || end < end ? B.JSString_methods.substring$2(uri, start, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return A.UriData__parse(B.JSString_methods.substring$2(uri, t1, end), 0, _null).get$uri();
      }
      indices = A.List_List$filled(8, 0, false, type$.int);
      B.JSArray_methods.$indexSet(indices, 0, 0);
      t2 = start - 1;
      B.JSArray_methods.$indexSet(indices, 1, t2);
      B.JSArray_methods.$indexSet(indices, 2, t2);
      B.JSArray_methods.$indexSet(indices, 7, t2);
      B.JSArray_methods.$indexSet(indices, 3, start);
      B.JSArray_methods.$indexSet(indices, 4, start);
      B.JSArray_methods.$indexSet(indices, 5, end);
      B.JSArray_methods.$indexSet(indices, 6, end);
      if (A._scan(uri, start, end, 0, indices) >= 14)
        B.JSArray_methods.$indexSet(indices, 7, end);
      schemeEnd = indices[1];
      if (schemeEnd >= start)
        if (A._scan(uri, start, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = indices[2] + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = indices[7] < start;
      scheme = _null;
      if (isSimple) {
        isSimple = false;
        if (!(hostStart > schemeEnd + 3)) {
          t2 = portStart > start;
          start0 = 0;
          if (!(t2 && portStart + 1 === pathStart)) {
            if (!B.JSString_methods.startsWith$2(uri, "\\", pathStart))
              if (hostStart > start)
                t3 = B.JSString_methods.startsWith$2(uri, "\\", hostStart - 1) || B.JSString_methods.startsWith$2(uri, "\\", hostStart - 2);
              else
                t3 = false;
            else
              t3 = true;
            if (!t3) {
              if (!(queryStart < end && queryStart === pathStart + 2 && B.JSString_methods.startsWith$2(uri, "..", pathStart)))
                t3 = queryStart > pathStart + 2 && B.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
              else
                t3 = true;
              if (!t3)
                if (schemeEnd === start + 4) {
                  if (B.JSString_methods.startsWith$2(uri, "file", start)) {
                    if (hostStart <= start) {
                      if (!B.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                        schemeAuth = "file:///";
                        delta = 3;
                      } else {
                        schemeAuth = "file://";
                        delta = 2;
                      }
                      uri = schemeAuth + B.JSString_methods.substring$2(uri, pathStart, end);
                      schemeEnd -= start;
                      t1 = delta - start;
                      queryStart += t1;
                      fragmentStart += t1;
                      end = uri.length;
                      start = start0;
                      hostStart = 7;
                      portStart = 7;
                      pathStart = 7;
                    } else if (pathStart === queryStart) {
                      t1 = start === 0;
                      t1;
                      if (t1) {
                        uri = B.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                        ++queryStart;
                        ++fragmentStart;
                        ++end;
                      } else {
                        uri = B.JSString_methods.substring$2(uri, start, pathStart) + "/" + B.JSString_methods.substring$2(uri, queryStart, end);
                        schemeEnd -= start;
                        hostStart -= start;
                        portStart -= start;
                        pathStart -= start;
                        t1 = 1 - start;
                        queryStart += t1;
                        fragmentStart += t1;
                        end = uri.length;
                        start = start0;
                      }
                    }
                    scheme = "file";
                  } else if (B.JSString_methods.startsWith$2(uri, "http", start)) {
                    if (t2 && portStart + 3 === pathStart && B.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                      t1 = start === 0;
                      t1;
                      if (t1) {
                        uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                        pathStart -= 3;
                        queryStart -= 3;
                        fragmentStart -= 3;
                        end -= 3;
                      } else {
                        uri = B.JSString_methods.substring$2(uri, start, portStart) + B.JSString_methods.substring$2(uri, pathStart, end);
                        schemeEnd -= start;
                        hostStart -= start;
                        portStart -= start;
                        t1 = 3 + start;
                        pathStart -= t1;
                        queryStart -= t1;
                        fragmentStart -= t1;
                        end = uri.length;
                        start = start0;
                      }
                    }
                    scheme = "http";
                  }
                } else if (schemeEnd === t1 && B.JSString_methods.startsWith$2(uri, "https", start)) {
                  if (t2 && portStart + 4 === pathStart && B.JSString_methods.startsWith$2(uri, "443", portStart + 1)) {
                    t1 = start === 0;
                    t1;
                    if (t1) {
                      uri = B.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                      pathStart -= 4;
                      queryStart -= 4;
                      fragmentStart -= 4;
                      end -= 3;
                    } else {
                      uri = B.JSString_methods.substring$2(uri, start, portStart) + B.JSString_methods.substring$2(uri, pathStart, end);
                      schemeEnd -= start;
                      hostStart -= start;
                      portStart -= start;
                      t1 = 4 + start;
                      pathStart -= t1;
                      queryStart -= t1;
                      fragmentStart -= t1;
                      end = uri.length;
                      start = start0;
                    }
                  }
                  scheme = "https";
                }
              isSimple = !t3;
            }
          }
        }
      }
      if (isSimple) {
        if (start > 0 || end < uri.length) {
          uri = B.JSString_methods.substring$2(uri, start, end);
          schemeEnd -= start;
          hostStart -= start;
          portStart -= start;
          pathStart -= start;
          queryStart -= start;
          fragmentStart -= start;
        }
        return new A._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      if (scheme == null)
        if (schemeEnd > start)
          scheme = A._Uri__makeScheme(uri, start, schemeEnd);
        else {
          if (schemeEnd === start)
            A._Uri__fail(uri, start, "Invalid empty scheme");
          scheme = "";
        }
      port = _null;
      if (hostStart > start) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? A._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = A._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = A.Primitives_parseInt(B.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = A._Uri__makePort(portNumber == null ? A.throwExpression(A.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        }
      } else {
        host = _null;
        userInfo = "";
      }
      path = A._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? A._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? A._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    Uri_tryParse(uri) {
      var t1, exception, start = 0, end = null;
      try {
        t1 = A.Uri_parse(uri, start, end);
        return t1;
      } catch (exception) {
        if (type$.FormatException._is(A.unwrapException(exception)))
          return null;
        else
          throw exception;
      }
    },
    Uri_decodeComponent(encodedComponent) {
      A._asString(encodedComponent);
      return A._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, B.C_Utf8Codec, false);
    },
    Uri__parseIPv4Address(host, start, end) {
      var t1, i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new A.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (t1 = host.length, i = start, partStart = i, partIndex = 0; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = A.int_parse(B.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (!(partIndex < 4))
            return A.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = A.int_parse(B.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (!(partIndex < 4))
        return A.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, last, bytes, wildCardLength, index, value, j, t2, _null = null,
        error = new A.Uri_parseIPv6Address_error(host),
        parseHex = new A.Uri_parseIPv6Address_parseHex(error, host),
        t1 = host.length;
      if (t1 < 2)
        error.call$2("address is too short", _null);
      parts = A._setArrayType([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(host, i);
        char = host.charCodeAt(i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (!(i < t1))
              return A.ioore(host, i);
            if (host.charCodeAt(i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            B.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$2("too few parts", _null);
      atEnd = partStart === end;
      t1 = B.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          B.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = A.Uri__parseIPv4Address(host, partStart, end);
          B.JSArray_methods.add$1(parts, (last[0] << 8 | last[1]) >>> 0);
          B.JSArray_methods.add$1(parts, (last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$2("an address with a wildcard must have less than 7 parts", _null);
      } else if (parts.length !== 8)
        error.call$2("an address without a wildcard must contain exactly 8 parts", _null);
      bytes = new Uint8Array(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            if (!(index >= 0 && index < 16))
              return A.ioore(bytes, index);
            bytes[index] = 0;
            t2 = index + 1;
            if (!(t2 < 16))
              return A.ioore(bytes, t2);
            bytes[t2] = 0;
            index += 2;
          }
        else {
          t2 = B.JSInt_methods._shrOtherPositive$1(value, 8);
          if (!(index >= 0 && index < 16))
            return A.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          if (!(t2 < 16))
            return A.ioore(bytes, t2);
          bytes[t2] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new A._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__Uri(host, path, pathSegments, port, scheme) {
      var userInfo, query, fragment, isFile, t1, hasAuthority, t2, _null = null;
      scheme = scheme == null ? "" : A._Uri__makeScheme(scheme, 0, scheme.length);
      userInfo = A._Uri__makeUserInfo(_null, 0, 0);
      host = A._Uri__makeHost(host, 0, host == null ? 0 : host.length, false);
      query = A._Uri__makeQuery(_null, 0, 0, _null);
      fragment = A._Uri__makeFragment(_null, 0, 0);
      port = A._Uri__makePort(port, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = A._Uri__makePath(path, 0, path == null ? 0 : path.length, pathSegments, scheme, hasAuthority);
      t2 = scheme.length === 0;
      if (t2 && t1 && !B.JSString_methods.startsWith$1(path, "/"))
        path = A._Uri__normalizeRelativePath(path, !t2 || hasAuthority);
      else
        path = A._Uri__removeDotSegments(path);
      return A._Uri$_internal(scheme, userInfo, t1 && B.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail(uri, index, message) {
      throw A.wrapException(A.FormatException$(message, uri, index));
    },
    _Uri__checkNonWindowsPathReservedCharacters(segments, argumentError) {
      var t1, _i, segment;
      for (t1 = segments.length, _i = 0; _i < t1; ++_i) {
        segment = segments[_i];
        if (B.JSString_methods.contains$1(segment, "/")) {
          t1 = A.UnsupportedError$("Illegal path character " + segment);
          throw A.wrapException(t1);
        }
      }
    },
    _Uri__makePort(port, scheme) {
      if (port != null && port === A._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return null;
      if (start === end)
        return "";
      t1 = host.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(host, start);
      if (host.charCodeAt(start) === 91) {
        t2 = end - 1;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(host, t2);
        if (host.charCodeAt(t2) !== 93)
          A._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        t1 = start + 1;
        index = A._Uri__checkZoneID(host, t1, t2);
        if (index < t2) {
          zoneIDstart = index + 1;
          zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t2, "%25");
        } else
          zoneID = "";
        A.Uri_parseIPv6Address(host, t1, index);
        return B.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      for (i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(host, i);
        if (host.charCodeAt(i) === 58) {
          index = B.JSString_methods.indexOf$2(host, "%", start);
          index = index >= start && index < end ? index : end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = A._Uri__normalizeZoneID(host, B.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          A.Uri_parseIPv6Address(host, start, index);
          return "[" + B.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      }
      return A._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID(host, start, end) {
      var index = B.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__normalizeZoneID(host, start, end, prefix) {
      var t1, index, sectionStart, isNormalized, char, replacement, t2, t3, sourceLength, tail, slice,
        buffer = prefix !== "" ? new A.StringBuffer(prefix) : null;
      for (t1 = host.length, index = start, sectionStart = index, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          t3 = buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
          if (t2)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%")
            A._Uri__fail(host, index, "ZoneID should not contain % anymore");
          buffer._contents = t3 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else if (char < 127 && (string$.x00_____.charCodeAt(char) & 1) !== 0) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = new A.StringBuffer("");
            if (sectionStart < index) {
              buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else {
          sourceLength = 1;
          if ((char & 64512) === 55296 && index + 1 < end) {
            t2 = index + 1;
            if (!(t2 < t1))
              return A.ioore(host, t2);
            tail = host.charCodeAt(t2);
            if ((tail & 64512) === 56320) {
              char = 65536 + ((char & 1023) << 10) + (tail & 1023);
              sourceLength = 2;
            }
          }
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t2 = buffer;
          } else
            t2 = buffer;
          t2._contents += slice;
          t3 = A._Uri__escapeChar(char);
          t2._contents += t3;
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName(host, start, end) {
      var t1, index, sectionStart, buffer, isNormalized, char, replacement, t2, slice, t3, sourceLength, tail,
        _s128_ = string$.x00_____;
      for (t1 = host.length, index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        if (!(index >= 0 && index < t1))
          return A.ioore(host, index);
        char = host.charCodeAt(index);
        if (char === 37) {
          replacement = A._Uri__normalizeEscape(host, index, true);
          t2 = replacement == null;
          if (t2 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new A.StringBuffer("");
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (!isNormalized)
            slice = slice.toLowerCase();
          t3 = buffer._contents += slice;
          sourceLength = 3;
          if (t2)
            replacement = B.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          }
          buffer._contents = t3 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else if (char < 127 && (_s128_.charCodeAt(char) & 32) !== 0) {
          if (isNormalized && 65 <= char && 90 >= char) {
            if (buffer == null)
              buffer = new A.StringBuffer("");
            if (sectionStart < index) {
              buffer._contents += B.JSString_methods.substring$2(host, sectionStart, index);
              sectionStart = index;
            }
            isNormalized = false;
          }
          ++index;
        } else if (char <= 93 && (_s128_.charCodeAt(char) & 1024) !== 0)
          A._Uri__fail(host, index, "Invalid character");
        else {
          sourceLength = 1;
          if ((char & 64512) === 55296 && index + 1 < end) {
            t2 = index + 1;
            if (!(t2 < t1))
              return A.ioore(host, t2);
            tail = host.charCodeAt(t2);
            if ((tail & 64512) === 56320) {
              char = 65536 + ((char & 1023) << 10) + (tail & 1023);
              sourceLength = 2;
            }
          }
          slice = B.JSString_methods.substring$2(host, sectionStart, index);
          if (!isNormalized)
            slice = slice.toLowerCase();
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t2 = buffer;
          } else
            t2 = buffer;
          t2._contents += slice;
          t3 = A._Uri__escapeChar(char);
          t2._contents += t3;
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return B.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = B.JSString_methods.substring$2(host, sectionStart, end);
        if (!isNormalized)
          slice = slice.toLowerCase();
        buffer._contents += slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme(scheme, start, end) {
      var t1, i, containsUpperCase, codeUnit;
      if (start === end)
        return "";
      t1 = scheme.length;
      if (!(start < t1))
        return A.ioore(scheme, start);
      if (!A._Uri__isAlphabeticCharacter(scheme.charCodeAt(start)))
        A._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(scheme, i);
        codeUnit = scheme.charCodeAt(i);
        if (!(codeUnit < 128 && (string$.x00_____.charCodeAt(codeUnit) & 8) !== 0))
          A._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = B.JSString_methods.substring$2(scheme, start, end);
      return A._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return A._Uri__normalizeOrSubstring(userInfo, start, end, 16, false, false);
    },
    _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
      var t1, result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null) {
        if (pathSegments == null)
          return isFile ? "/" : "";
        t1 = A._arrayInstanceType(pathSegments);
        result = new A.MappedListIterable(pathSegments, t1._eval$1("String(1)")._as(new A._Uri__makePath_closure()), t1._eval$1("MappedListIterable<1,String>")).join$1(0, "/");
      } else if (pathSegments != null)
        throw A.wrapException(A.ArgumentError$("Both path and pathSegments specified", null));
      else
        result = A._Uri__normalizeOrSubstring(path, start, end, 128, true, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !B.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return A._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !B.JSString_methods.startsWith$1(path, "/") && !B.JSString_methods.startsWith$1(path, "\\"))
        return A._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return A._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery(query, start, end, queryParameters) {
      if (query != null) {
        if (queryParameters != null)
          throw A.wrapException(A.ArgumentError$("Both query and queryParameters specified", null));
        return A._Uri__normalizeOrSubstring(query, start, end, 256, true, false);
      }
      if (queryParameters == null)
        return null;
      return A._Uri__makeQueryFromParameters(queryParameters);
    },
    _Uri__makeQueryFromParametersDefault(queryParameters) {
      var t1 = {},
        result = new A.StringBuffer("");
      t1.separator = "";
      queryParameters.forEach$1(0, new A._Uri__makeQueryFromParametersDefault_closure(new A._Uri__makeQueryFromParametersDefault_writeParameter(t1, result)));
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeFragment(fragment, start, end) {
      if (fragment == null)
        return null;
      return A._Uri__normalizeOrSubstring(fragment, start, end, 256, true, false);
    },
    _Uri__normalizeEscape(source, index, lowerCase) {
      var t3, firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        _s128_ = string$.x00_____,
        t1 = index + 2,
        t2 = source.length;
      if (t1 >= t2)
        return "%";
      t3 = index + 1;
      if (!(t3 >= 0 && t3 < t2))
        return A.ioore(source, t3);
      firstDigit = source.charCodeAt(t3);
      if (!(t1 >= 0))
        return A.ioore(source, t1);
      secondDigit = source.charCodeAt(t1);
      firstDigitValue = A.hexDigitValue(firstDigit);
      secondDigitValue = A.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127) {
        if (!(value >= 0))
          return A.ioore(_s128_, value);
        t1 = (_s128_.charCodeAt(value) & 1) !== 0;
      } else
        t1 = false;
      if (t1)
        return A.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return B.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar(char) {
      var codeUnits, t1, flag, encodedBytes, index, byte, t2, t3,
        _s16_ = "0123456789ABCDEF";
      if (char <= 127) {
        codeUnits = new Uint8Array(3);
        codeUnits[0] = 37;
        t1 = char >>> 4;
        if (!(t1 < 16))
          return A.ioore(_s16_, t1);
        codeUnits[1] = _s16_.charCodeAt(t1);
        codeUnits[2] = _s16_.charCodeAt(char & 15);
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = 3 * encodedBytes;
        codeUnits = new Uint8Array(t1);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = B.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          if (!(index < t1))
            return A.ioore(codeUnits, index);
          codeUnits[index] = 37;
          t2 = index + 1;
          t3 = byte >>> 4;
          if (!(t3 < 16))
            return A.ioore(_s16_, t3);
          if (!(t2 < t1))
            return A.ioore(codeUnits, t2);
          codeUnits[t2] = _s16_.charCodeAt(t3);
          t3 = index + 2;
          if (!(t3 < t1))
            return A.ioore(codeUnits, t3);
          codeUnits[t3] = _s16_.charCodeAt(byte & 15);
          index += 3;
        }
      }
      return A.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring(component, start, end, charMask, escapeDelimiters, replaceBackslash) {
      var t1 = A._Uri__normalize(component, start, end, charMask, escapeDelimiters, replaceBackslash);
      return t1 == null ? B.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize(component, start, end, charMask, escapeDelimiters, replaceBackslash) {
      var t1, t2, index, sectionStart, buffer, char, sourceLength, replacement, t3, tail, _null = null,
        _s128_ = string$.x00_____;
      for (t1 = !escapeDelimiters, t2 = component.length, index = start, sectionStart = index, buffer = _null; index < end;) {
        if (!(index >= 0 && index < t2))
          return A.ioore(component, index);
        char = component.charCodeAt(index);
        if (char < 127 && (_s128_.charCodeAt(char) & charMask) !== 0)
          ++index;
        else {
          sourceLength = 1;
          if (char === 37) {
            replacement = A._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement)
              replacement = "%25";
            else
              sourceLength = 3;
          } else if (char === 92 && replaceBackslash)
            replacement = "/";
          else if (t1 && char <= 93 && (_s128_.charCodeAt(char) & 1024) !== 0) {
            A._Uri__fail(component, index, "Invalid character");
            sourceLength = _null;
            replacement = sourceLength;
          } else {
            if ((char & 64512) === 55296) {
              t3 = index + 1;
              if (t3 < end) {
                if (!(t3 < t2))
                  return A.ioore(component, t3);
                tail = component.charCodeAt(t3);
                if ((tail & 64512) === 56320) {
                  char = 65536 + ((char & 1023) << 10) + (tail & 1023);
                  sourceLength = 2;
                }
              }
            }
            replacement = A._Uri__escapeChar(char);
          }
          if (buffer == null) {
            buffer = new A.StringBuffer("");
            t3 = buffer;
          } else
            t3 = buffer;
          t3._contents = (t3._contents += B.JSString_methods.substring$2(component, sectionStart, index)) + replacement;
          if (typeof sourceLength !== "number")
            return A.iae(sourceLength);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return _null;
      if (sectionStart < end) {
        t1 = B.JSString_methods.substring$2(component, sectionStart, end);
        buffer._contents += t1;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments(path) {
      if (B.JSString_methods.startsWith$1(path, "."))
        return true;
      return B.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments(path) {
      var output, t1, t2, appendSlash, _i, segment, t3;
      if (!A._Uri__mayContainDotSegments(path))
        return path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (segment === "..") {
          t3 = output.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return A.ioore(output, -1);
            output.pop();
            if (output.length === 0)
              B.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else {
          appendSlash = "." === segment;
          if (!appendSlash)
            B.JSArray_methods.add$1(output, segment);
        }
      }
      if (appendSlash)
        B.JSArray_methods.add$1(output, "");
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!A._Uri__mayContainDotSegments(path))
        return !allowScheme ? A._Uri__escapeScheme(path) : path;
      output = A._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment) {
          appendSlash = output.length !== 0 && B.JSArray_methods.get$last(output) !== "..";
          if (appendSlash) {
            if (0 >= output.length)
              return A.ioore(output, -1);
            output.pop();
          } else
            B.JSArray_methods.add$1(output, "..");
        } else {
          appendSlash = "." === segment;
          if (!appendSlash)
            B.JSArray_methods.add$1(output, segment);
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        if (t1 === 1) {
          if (0 >= t1)
            return A.ioore(output, 0);
          t1 = output[0].length === 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || B.JSArray_methods.get$last(output) === "..")
        B.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return A.ioore(output, 0);
        B.JSArray_methods.$indexSet(output, 0, A._Uri__escapeScheme(output[0]));
      }
      return B.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme(path) {
      var i, char, t2,
        _s128_ = string$.x00_____,
        t1 = path.length;
      if (t1 >= 2 && A._Uri__isAlphabeticCharacter(path.charCodeAt(0)))
        for (i = 1; i < t1; ++i) {
          char = path.charCodeAt(i);
          if (char === 58)
            return B.JSString_methods.substring$2(path, 0, i) + "%3A" + B.JSString_methods.substring$1(path, i + 1);
          if (char <= 127) {
            if (!(char < 128))
              return A.ioore(_s128_, char);
            t2 = (_s128_.charCodeAt(char) & 8) === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__packageNameEnd(uri, path) {
      if (uri.isScheme$1("package") && uri._host == null)
        return A._skipPackageNameChars(path, 0, path.length);
      return -1;
    },
    _Uri__hexCharPairToByte(s, pos) {
      var t1, byte, i, t2, charCode;
      for (t1 = s.length, byte = 0, i = 0; i < 2; ++i) {
        t2 = pos + i;
        if (!(t2 < t1))
          return A.ioore(s, t2);
        charCode = s.charCodeAt(t2);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw A.wrapException(A.ArgumentError$("Invalid URL encoding", null));
        }
      }
      return byte;
    },
    _Uri__uriDecode(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t2, bytes,
        t1 = text.length,
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        if (!(i < t1))
          return A.ioore(text, i);
        codeUnit = text.charCodeAt(i);
        if (codeUnit <= 127)
          t2 = codeUnit === 37;
        else
          t2 = true;
        if (t2) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple)
        if (B.C_Utf8Codec === encoding)
          return B.JSString_methods.substring$2(text, start, end);
        else
          bytes = new A.CodeUnits(B.JSString_methods.substring$2(text, start, end));
      else {
        bytes = A._setArrayType([], type$.JSArray_int);
        for (i = start; i < end; ++i) {
          if (!(i < t1))
            return A.ioore(text, i);
          codeUnit = text.charCodeAt(i);
          if (codeUnit > 127)
            throw A.wrapException(A.ArgumentError$("Illegal percent encoding in URI", null));
          if (codeUnit === 37) {
            if (i + 3 > t1)
              throw A.wrapException(A.ArgumentError$("Truncated URI", null));
            B.JSArray_methods.add$1(bytes, A._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else
            B.JSArray_methods.add$1(bytes, codeUnit);
        }
      }
      return encoding.decode$1(bytes);
    },
    _Uri__isAlphabeticCharacter(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__parse(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = A._setArrayType([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = text.charCodeAt(i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw A.wrapException(A.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw A.wrapException(A.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        B.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          if (!(i >= 0))
            return A.ioore(text, i);
          char = text.charCodeAt(i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          B.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = B.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !B.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw A.wrapException(A.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      B.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = B.Base64Codec_Base64Encoder_false.normalize$3(text, t2, t1);
      else {
        data = A._Uri__normalize(text, t2, t1, 256, true, false);
        if (data != null)
          text = B.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new A.UriData(text, indices, sourceUri);
    },
    _scan(uri, start, end, state, indices) {
      var t1, i, char, t2, transition,
        _s2112_ = '\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe3\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x0e\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xea\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\n\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xeb\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\xeb\xeb\xeb\x8b\xeb\xeb\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\xeb\x83\xeb\xeb\x8b\xeb\x8b\xeb\xcd\x8b\xeb\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x92\x83\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\x8b\xeb\x8b\xeb\x8b\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xebD\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x12D\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\xe5\xe5\xe5\x05\xe5D\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe8\x8a\xe5\xe5\x05\xe5\x05\xe5\xcd\x05\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x8a\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05f\x05\xe5\x05\xe5\xac\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\xe5\xe5\xe5\x05\xe5D\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\xe5\x8a\xe5\xe5\x05\xe5\x05\xe5\xcd\x05\xe5\x05\x05\x05\x05\x05\x05\x05\x05\x05\x8a\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05f\x05\xe5\x05\xe5\xac\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7D\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\xe7\xe7\xe7\xe7\xe7\xe7\xcd\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\xe7\x07\x07\x07\x07\x07\x07\x07\x07\x07\xe7\xe7\xe7\xe7\xe7\xac\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7D\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\xe7\xe7\xe7\xe7\xe7\xe7\xcd\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\xe7\x8a\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\xe7\xe7\xe7\xe7\xe7\xac\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\x05\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x10\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x12\n\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\v\n\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xec\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\xec\xec\xec\f\xec\xec\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\f\xec\xec\xec\xec\f\xec\f\xec\xcd\f\xec\f\f\f\f\f\f\f\f\f\xec\f\f\f\f\f\f\f\f\f\f\xec\f\xec\f\xec\f\xed\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\xed\xed\xed\r\xed\xed\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\xed\xed\xed\xed\r\xed\r\xed\xed\r\xed\r\r\r\r\r\r\r\r\r\xed\r\r\r\r\r\r\r\r\r\r\xed\r\xed\r\xed\r\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xea\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x0f\xea\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe1\xe1\x01\xe1\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\xe1\xe9\xe1\xe1\x01\xe1\x01\xe1\xcd\x01\xe1\x01\x01\x01\x01\x01\x01\x01\x01\x01\t\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"\x01\xe1\x01\xe1\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x11\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xe9\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\v\t\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\x13\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xeb\xeb\v\xeb\xeb\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\xeb\xea\xeb\xeb\v\xeb\v\xeb\xcd\v\xeb\v\v\v\v\v\v\v\v\v\xea\v\v\v\v\v\v\v\v\v\v\xeb\v\xeb\v\xeb\xac\xf5\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\xf5\x15\xf5\x15\x15\xf5\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\xf5\xf5\xf5\xf5\xf5\xf5';
      for (t1 = uri.length, i = start; i < end; ++i) {
        if (!(i < t1))
          return A.ioore(uri, i);
        char = uri.charCodeAt(i) ^ 96;
        if (char > 95)
          char = 31;
        t2 = state * 96 + char;
        if (!(t2 < 2112))
          return A.ioore(_s2112_, t2);
        transition = _s2112_.charCodeAt(t2);
        state = transition & 31;
        B.JSArray_methods.$indexSet(indices, transition >>> 5, i);
      }
      return state;
    },
    _SimpleUri__packageNameEnd(uri) {
      if (uri._schemeEnd === 7 && B.JSString_methods.startsWith$1(uri._uri, "package") && uri._hostStart <= 0)
        return A._skipPackageNameChars(uri._uri, uri._pathStart, uri._queryStart);
      return -1;
    },
    _skipPackageNameChars(source, start, end) {
      var t1, i, dots, char;
      for (t1 = source.length, i = start, dots = 0; i < end; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(source, i);
        char = source.charCodeAt(i);
        if (char === 47)
          return dots !== 0 ? i : -1;
        if (char === 37 || char === 58)
          return -1;
        dots |= char ^ 46;
      }
      return -1;
    },
    _caseInsensitiveCompareStart(prefix, string, start) {
      var t1, t2, result, i, t3, stringChar, delta, lowerChar;
      for (t1 = prefix.length, t2 = string.length, result = 0, i = 0; i < t1; ++i) {
        t3 = start + i;
        if (!(t3 < t2))
          return A.ioore(string, t3);
        stringChar = string.charCodeAt(t3);
        delta = prefix.charCodeAt(i) ^ stringChar;
        if (delta !== 0) {
          if (delta === 32) {
            lowerChar = stringChar | delta;
            if (97 <= lowerChar && lowerChar <= 122) {
              result = 32;
              continue;
            }
          }
          return -1;
        }
      }
      return result;
    },
    _BigIntImpl: function _BigIntImpl(t0, t1, t2) {
      this._isNegative = t0;
      this._digits = t1;
      this._used = t2;
    },
    _BigIntImpl_hashCode_combine: function _BigIntImpl_hashCode_combine() {
    },
    _BigIntImpl_hashCode_finish: function _BigIntImpl_hashCode_finish() {
    },
    _BigIntClassic: function _BigIntClassic(t0, t1) {
      this._modulus = t0;
      this._normalizedModulus = t1;
    },
    _Uri__makeQueryFromParameters_closure: function _Uri__makeQueryFromParameters_closure(t0) {
      this.params = t0;
    },
    DateTime: function DateTime(t0, t1, t2) {
      this._core$_value = t0;
      this._microsecond = t1;
      this.isUtc = t2;
    },
    DateTime_parse_parseIntOrZero: function DateTime_parse_parseIntOrZero() {
    },
    DateTime_parse_parseMilliAndMicroseconds: function DateTime_parse_parseMilliAndMicroseconds() {
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    IntegerDivisionByZeroException: function IntegerDivisionByZeroException() {
    },
    Iterable: function Iterable() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    Runes: function Runes(t0) {
      this.string = t0;
    },
    RuneIterator: function RuneIterator(t0) {
      var _ = this;
      _.string = t0;
      _._nextPosition = _._position = 0;
      _._currentCodePoint = -1;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._core$_port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure() {
    },
    _Uri__makeQueryFromParametersDefault_writeParameter: function _Uri__makeQueryFromParametersDefault_writeParameter(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    _Uri__makeQueryFromParametersDefault_closure: function _Uri__makeQueryFromParametersDefault_closure(t0) {
      this.writeParameter = t0;
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._core$_port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode_FI = _.___Uri_pathSegments_FI = _.___Uri__text_FI = $;
    },
    _functionToJS1(f) {
      var result;
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1) {
          return _call(f, arg1, arguments.length);
        };
      }(A._callDartFunctionFast1, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _functionToJS2(f) {
      var result;
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1, arg2) {
          return _call(f, arg1, arg2, arguments.length);
        };
      }(A._callDartFunctionFast2, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _functionToJS3(f) {
      var result;
      if (typeof f == "function")
        throw A.wrapException(A.ArgumentError$("Attempting to rewrap a JS function.", null));
      result = function(_call, f) {
        return function(arg1, arg2, arg3) {
          return _call(f, arg1, arg2, arg3, arguments.length);
        };
      }(A._callDartFunctionFast3, f);
      result[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      return result;
    },
    _callDartFunctionFast1(callback, arg1, $length) {
      type$.Function._as(callback);
      if (A._asInt($length) >= 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _callDartFunctionFast2(callback, arg1, arg2, $length) {
      type$.Function._as(callback);
      A._asInt($length);
      if ($length >= 2)
        return callback.call$2(arg1, arg2);
      if ($length === 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _callDartFunctionFast3(callback, arg1, arg2, arg3, $length) {
      type$.Function._as(callback);
      A._asInt($length);
      if ($length >= 3)
        return callback.call$3(arg1, arg2, arg3);
      if ($length === 2)
        return callback.call$2(arg1, arg2);
      if ($length === 1)
        return callback.call$1(arg1);
      return callback.call$0();
    },
    _noJsifyRequired(o) {
      return o == null || A._isBool(o) || typeof o == "number" || typeof o == "string" || type$.Int8List._is(o) || type$.Uint8List._is(o) || type$.Uint8ClampedList._is(o) || type$.Int16List._is(o) || type$.Uint16List._is(o) || type$.Int32List._is(o) || type$.Uint32List._is(o) || type$.Float32List._is(o) || type$.Float64List._is(o) || type$.ByteBuffer._is(o) || type$.ByteData._is(o);
    },
    jsify(object) {
      if (A._noJsifyRequired(object))
        return object;
      return new A.jsify__convert(new A._IdentityHashMap(type$._IdentityHashMap_of_nullable_Object_and_nullable_Object)).call$1(object);
    },
    getProperty(o, $name, $T) {
      return $T._as(o[$name]);
    },
    promiseToFuture(jsPromise, $T) {
      var t1 = new A._Future($.Zone__current, $T._eval$1("_Future<0>")),
        completer = new A._AsyncCompleter(t1, $T._eval$1("_AsyncCompleter<0>"));
      jsPromise.then(A.convertDartClosureToJS(new A.promiseToFuture_closure(completer, $T), 1), A.convertDartClosureToJS(new A.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    _noDartifyRequired(o) {
      return o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string" || o instanceof Int8Array || o instanceof Uint8Array || o instanceof Uint8ClampedArray || o instanceof Int16Array || o instanceof Uint16Array || o instanceof Int32Array || o instanceof Uint32Array || o instanceof Float32Array || o instanceof Float64Array || o instanceof ArrayBuffer || o instanceof DataView;
    },
    dartify(o) {
      if (A._noDartifyRequired(o))
        return o;
      return new A.dartify_convert(new A._IdentityHashMap(type$._IdentityHashMap_of_nullable_Object_and_nullable_Object)).call$1(o);
    },
    jsify__convert: function jsify__convert(t0) {
      this._convertedObjects = t0;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    dartify_convert: function dartify_convert(t0) {
      this._convertedObjects = t0;
    },
    NullRejectionException: function NullRejectionException(t0) {
      this.isUndefined = t0;
    },
    max(a, b, $T) {
      A.checkTypeBound($T, type$.num, "T", "max");
      return Math.max($T._as(a), $T._as(b));
    },
    _JSSecureRandom: function _JSSecureRandom(t0) {
      this._math$_buffer = t0;
    },
    Endian: function Endian() {
    },
    FutureGroup: function FutureGroup(t0, t1, t2) {
      var _ = this;
      _._future_group$_pending = 0;
      _._closed = false;
      _._future_group$_completer = t0;
      _._future_group$_values = t1;
      _.$ti = t2;
    },
    FutureGroup_add_closure: function FutureGroup_add_closure(t0, t1) {
      this.$this = t0;
      this.index = t1;
    },
    FutureGroup_add_closure0: function FutureGroup_add_closure0(t0) {
      this.$this = t0;
    },
    ErrorResult: function ErrorResult(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    ValueResult: function ValueResult(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    StreamSplitter: function StreamSplitter(t0, t1, t2, t3, t4) {
      var _ = this;
      _._stream_splitter$_stream = t0;
      _._stream_splitter$_subscription = null;
      _._stream_splitter$_buffer = t1;
      _._controllers = t2;
      _._closeGroup = t3;
      _._isDone = false;
      _.$ti = t4;
    },
    StreamSplitter_split_closure: function StreamSplitter_split_closure(t0, t1) {
      this.$this = t0;
      this.controller = t1;
    },
    StreamSplitter__onPause_closure: function StreamSplitter__onPause_closure(t0) {
      this.$this = t0;
    },
    BitcoinAddressType_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_zF4, new A.BitcoinAddressType_fromValue_closure(value), new A.BitcoinAddressType_fromValue_closure0(value));
    },
    BitcoinBaseAddress_BitcoinBaseAddress$fromProgram(addressProgram, type) {
      var t1;
      if (type.get$isP2sh()) {
        t1 = type.cast$1$0(0, type$.P2shAddressType);
        return new A.P2shAddress(t1, A._BitcoinAddressUtils_validateAddressProgram(addressProgram, t1));
      }
      $label0$0: {
        if (B.PubKeyAddressType_P2PK === type) {
          t1 = A.P2pkAddress_P2pkAddress(addressProgram);
          break $label0$0;
        }
        if (B.P2pkhAddressType_P2PKH === type || B.P2pkhAddressType_P2PKHWT === type) {
          t1 = type.cast$1$0(0, type$.P2pkhAddressType);
          t1 = new A.P2pkhAddress(t1, A._BitcoinAddressUtils_validateAddressProgram(addressProgram, t1));
          break $label0$0;
        }
        if (B.SegwitAddressType_P2WPKH === type) {
          t1 = new A.P2wpkhAddress(A._BitcoinAddressUtils_validateAddressProgram(addressProgram, B.SegwitAddressType_P2WPKH), 0);
          break $label0$0;
        }
        if (B.SegwitAddressType_P2WSH === type) {
          t1 = new A.P2wshAddress(A._BitcoinAddressUtils_validateAddressProgram(addressProgram, B.SegwitAddressType_P2WSH), 0);
          break $label0$0;
        }
        if (B.SegwitAddressType_P2TR === type) {
          t1 = new A.P2trAddress(A._BitcoinAddressUtils_validateAddressProgram(addressProgram, B.SegwitAddressType_P2TR), 1);
          break $label0$0;
        }
        t1 = A.throwExpression(A.DartBitcoinPluginException$("Unsuported bitcoin address type.", null));
      }
      return t1;
    },
    P2pkAddress_P2pkAddress(publicKey) {
      if (!A.Secp256k1PublicKey_isValidBytes(A.BytesUtils_fromHexString(publicKey, false)))
        throw A.wrapException(B.DartBitcoinPluginException_Zyd);
      return new A.P2pkAddress(A.StringUtils_strip0x(publicKey.toLowerCase()), $);
    },
    BitcoinNetworkAddress_parse(address, network, ADDRESS) {
      var baseAddress, decodeAddress;
      switch (network) {
        case B.BitcoinSVNetwork_f7v:
        case B.BitcoinSVNetwork_Qce:
          baseAddress = new A.BitcoinSVAddress(A._BitcoinAddressUtils_decodeAddress(address, type$.BitcoinSVNetwork._as(network)), address);
          break;
        case B.BitcoinNetwork_o5I:
        case B.BitcoinNetwork_o9i:
        case B.BitcoinNetwork_IWD:
          baseAddress = new A.BitcoinAddress(A._BitcoinAddressUtils_decodeAddress(address, type$.BitcoinNetwork._as(network)), address);
          break;
        case B.LitecoinNetwork_A6S:
        case B.LitecoinNetwork_n3A:
          baseAddress = new A.LitecoinAddress(A._BitcoinAddressUtils_decodeAddress(address, type$.LitecoinNetwork._as(network)), address);
          break;
        case B.DashNetwork_rwj:
        case B.DashNetwork_92e:
          baseAddress = new A.DashAddress(A._BitcoinAddressUtils_decodeAddress(address, type$.DashNetwork._as(network)), address);
          break;
        case B.DogecoinNetwork_g3g:
        case B.DogecoinNetwork_htF:
          baseAddress = new A.DogeAddress(A._BitcoinAddressUtils_decodeAddress(address, type$.DogecoinNetwork._as(network)), address);
          break;
        case B.BitcoinCashNetwork_DE4:
        case B.BitcoinCashNetwork_Ose:
          type$.BitcoinCashNetwork._as(network);
          decodeAddress = A._BitcoinAddressUtils_decodeBchAddress(address, network, false);
          if (decodeAddress == null)
            A.throwExpression(A.DartBitcoinPluginException$("Invalid " + network.value + " address.", null));
          baseAddress = new A.BitcoinCashAddress(decodeAddress, address);
          break;
        case B.C_PepeNetwork:
          baseAddress = new A.PepeAddress(A._BitcoinAddressUtils_decodeAddress(address, type$.PepeNetwork._as(network)), address);
          break;
        case B.ElectraProtocolNetwork_Ni4:
        case B.ElectraProtocolNetwork_u6n:
          baseAddress = new A.ElectraProtocolAddress(A._BitcoinAddressUtils_decodeAddress(address, type$.ElectraProtocolNetwork._as(network)), address);
          break;
        default:
          throw A.wrapException(A.DartBitcoinPluginException$("Unknown network. " + network.get$value(), null));
      }
      if (!ADDRESS._is(baseAddress))
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid cast: expected " + A.getRuntimeTypeOfDartObject(A.createRuntimeType(ADDRESS)).toString$0(0) + ", but found " + A.getRuntimeTypeOfDartObject(baseAddress).toString$0(0) + ".", null));
      return baseAddress;
    },
    BitcoinNetworkAddress_tryParse(address, network, ADDRESS) {
      var t1, exception;
      try {
        t1 = A.BitcoinNetworkAddress_parse(address, network, ADDRESS);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    _BitcoinAddressUtils_decodeLagacyAddress(address) {
      var decode, scriptBytes, version, data, checksum, hash, exception;
      try {
        decode = A.List_List$unmodifiable(A.Base58Decoder_decode(address, B.Base58Alphabets_0), type$.int);
        scriptBytes = J.sublist$2$ax(decode, 1, J.get$length$asx(decode) - 4);
        if (J.get$length$asx(scriptBytes) !== 20)
          return null;
        version = A._setArrayType([J.$index$asx(decode, 0)], type$.JSArray_int);
        data = J.sublist$2$ax(decode, 0, J.get$length$asx(decode) - 4);
        checksum = J.sublist$1$ax(decode, J.get$length$asx(decode) - 4);
        hash = B.JSArray_methods.sublist$2(A.SHA256_hash(A.SHA256_hash(data)), 0, 4);
        if (!A.BytesUtils_bytesEqual(checksum, hash))
          return null;
        return new A.Tuple(scriptBytes, version, type$.Tuple_of_List_int_and_List_int);
      } catch (exception) {
        return null;
      }
    },
    _BitcoinAddressUtils_toLegacy(address, networks) {
      var decodedHex, t1,
        decode = A._BitcoinAddressUtils_decodeLagacyAddress(address);
      if (decode == null)
        return null;
      decodedHex = A.BytesUtils_toHexString(decode.item1, true, null);
      t1 = decode.item2;
      if (A.BytesUtils_bytesEqual(t1, networks.get$p2pkhNetVer()))
        return new A.P2pkhAddress(B.P2pkhAddressType_P2PKH, A._BitcoinAddressUtils_validateAddressProgram(decodedHex, B.P2pkhAddressType_P2PKH));
      else if (A.BytesUtils_bytesEqual(t1, networks.get$p2shNetVer()))
        return new A.P2shAddress(B.P2shAddressType_vvf, A._BitcoinAddressUtils_validateAddressProgram(decodedHex, B.P2shAddressType_vvf));
      return null;
    },
    _BitcoinAddressUtils_toSegwitAddress(address, network) {
      var convert, witnessVersion, decodedBytesHex, t1, decoded, hrpGot, data, convData, t2, witVer, exception, _null = null;
      try {
        t1 = network.get$p2wpkhHrp();
        decoded = A.Bech32DecoderBase_decodeBech32(address, "1", 6, A.segwit_bech32_SegwitBech32Decoder__verifyChecksum$closure());
        hrpGot = decoded.item1;
        data = decoded.item2;
        if (t1 !== hrpGot)
          A.throwExpression(A.ArgumentException$("Invalid format (HRP not valid, expected " + t1 + ", got " + hrpGot + ")", _null));
        t1 = J.getInterceptor$ax(data);
        convData = A.Bech32BaseUtils_convertFromBase32(t1.sublist$1(data, 1));
        t2 = convData.length;
        if (t2 < 2 || t2 > 40)
          A.throwExpression(A.ArgumentException$("Invalid format (witness program length not valid: " + t2 + ")", _null));
        witVer = t1.$index(data, 0);
        if (witVer > 16)
          A.throwExpression(A.ArgumentException$("Invalid format (witness version not valid: " + witVer + ")", _null));
        if (witVer === 0 && !B.JSArray_methods.contains$1(B.List_20_32, convData.length))
          A.throwExpression(A.ArgumentException$("Invalid format (length not valid: " + convData.length + ")", _null));
        convert = new A.Tuple(witVer, convData, type$.Tuple_of_int_and_List_int);
        witnessVersion = convert.item1;
        decodedBytesHex = A.BytesUtils_toHexString(convert.item2, true, _null);
        if (J.$eq$(witnessVersion, 1)) {
          t1 = A._BitcoinAddressUtils_validateAddressProgram(decodedBytesHex, B.SegwitAddressType_P2TR);
          return new A.P2trAddress(t1, 1);
        } else if (J.$eq$(witnessVersion, 0))
          if (J.get$length$asx(convert.item2) === 20) {
            t1 = A._BitcoinAddressUtils_validateAddressProgram(decodedBytesHex, B.SegwitAddressType_P2WPKH);
            return new A.P2wpkhAddress(t1, 0);
          } else if (J.get$length$asx(convert.item2) === 32) {
            t1 = A._BitcoinAddressUtils_validateAddressProgram(decodedBytesHex, B.SegwitAddressType_P2WSH);
            return new A.P2wshAddress(t1, 0);
          }
        return _null;
      } catch (exception) {
        return _null;
      }
    },
    _BitcoinAddressUtils_validateAddress(address, network) {
      if (B.JSArray_methods.contains$1(network.get$supportedAddress(), address.get$type()))
        return address;
      throw A.wrapException(A.DartBitcoinPluginException$(network.get$value() + " does not support " + address.get$type().value + " address", null));
    },
    _BitcoinAddressUtils_decodeAddress(address, network) {
      var baseAddress = B.JSArray_methods.contains$1(network.get$supportedAddress(), B.SegwitAddressType_P2WPKH) ? A._BitcoinAddressUtils_toSegwitAddress(address, network) : null;
      if (baseAddress == null)
        baseAddress = A._BitcoinAddressUtils_toLegacy(address, network);
      if (baseAddress == null)
        throw A.wrapException(B.DartBitcoinPluginException_8u7);
      return A._BitcoinAddressUtils_validateAddress(baseAddress, network);
    },
    _BitcoinAddressUtils_validateAddressProgram(hash160, addressType) {
      var toBytes, t1, exception;
      try {
        toBytes = A.BytesUtils_fromHexString(hash160, false);
        if (J.get$length$asx(toBytes) === addressType.get$hashLength()) {
          t1 = A.StringUtils_strip0x(hash160.toLowerCase());
          return t1;
        }
      } catch (exception) {
      }
      throw A.wrapException(B.DartBitcoinPluginException_hzJ);
    },
    _BitcoinAddressUtils_decodeBchAddress(address, network, validateNetworkHRP) {
      var hrp, decode, scriptBytes, version, hrp0, t1, decode0, convData, ver, exception;
      try {
        hrp0 = B.JSString_methods.substring$2(address, 0, B.JSString_methods.indexOf$1(address, ":"));
        hrp = hrp0;
        t1 = hrp;
        decode0 = A.Bech32DecoderBase_decodeBech32(address, ":", 8, A.bch_bech32__BchBech32Utils_verifyChecksum$closure());
        if (!J.$eq$(decode0.item1, t1))
          A.throwExpression(A.ArgumentException$("Invalid format (HRP not valid, expected " + t1 + ", got " + A.S(decode0.item2) + ")", null));
        convData = A.Bech32BaseUtils_convertFromBase32(decode0.item2);
        if (0 >= convData.length)
          return A.ioore(convData, 0);
        ver = convData[0];
        decode = new A.Tuple(A.IntUtils_toBytes(ver, B.C_Endian0, A.IntUtils_bitlengthInBytes(ver)), B.JSArray_methods.sublist$1(convData, 1), type$.Tuple_of_List_int_and_List_int);
        scriptBytes = decode.item2;
        version = decode.item1;
        t1 = A._BitcoinAddressUtils__validateBchScriptBytes(network, scriptBytes, version);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    _BitcoinAddressUtils__validateBchScriptBytes(network, scriptBytes, version) {
      var t2, legacyP2pk, legacyP2sh,
        scriptHex = A.BytesUtils_toHexString(scriptBytes, true, null),
        scriptLength = J.get$length$asx(scriptBytes),
        t1 = scriptLength === 20;
      if (!t1 && scriptLength !== 32)
        return null;
      if (t1) {
        t1 = network.conf.params;
        t2 = t1.p2pkhStdNetVer;
        t2.toString;
        legacyP2pk = A.BytesUtils_bytesEqual(t2, version);
        if (A.BytesUtils_bytesEqual(t2, version) || A.BytesUtils_bytesEqual(B.List_16, version)) {
          t1 = legacyP2pk ? B.P2pkhAddressType_P2PKH : B.P2pkhAddressType_P2PKHWT;
          return new A.P2pkhAddress(t1, A._BitcoinAddressUtils_validateAddressProgram(scriptHex, t1));
        }
        t1 = t1.p2shStdNetVer;
        t1.toString;
        legacyP2sh = A.BytesUtils_bytesEqual(t1, version);
        if (A.BytesUtils_bytesEqual(t1, version) || A.BytesUtils_bytesEqual(B.List_24, version)) {
          t1 = legacyP2sh ? B.P2shAddressType_apR : B.P2shAddressType_An7;
          return new A.P2shAddress(t1, A._BitcoinAddressUtils_validateAddressProgram(scriptHex, t1));
        }
      } else {
        legacyP2sh = A.BytesUtils_bytesEqual(B.List_11, version);
        if (A.BytesUtils_bytesEqual(B.List_11, version) || A.BytesUtils_bytesEqual(B.List_27, version)) {
          t1 = legacyP2sh ? B.P2shAddressType_rEf : B.P2shAddressType_mdM;
          return new A.P2shAddress(t1, A._BitcoinAddressUtils_validateAddressProgram(scriptHex, t1));
        }
      }
      return null;
    },
    _BitcoinAddressUtils__getBchNetVersion(network, secriptLength, type) {
      var t1,
        isToken = B.JSString_methods.contains$1(type.value, "WT");
      if (!type.get$isP2sh()) {
        if (!isToken) {
          t1 = network.conf.params.p2pkhStdNetVer;
          t1.toString;
          return t1;
        }
        return B.List_16;
      } else {
        if (!isToken) {
          if (secriptLength === 20) {
            t1 = network.conf.params.p2shStdNetVer;
            t1.toString;
            return t1;
          }
          return B.List_11;
        }
        if (secriptLength === 20)
          return B.List_24;
        return B.List_27;
      }
    },
    _BitcoinAddressUtils_legacyToAddress(addressProgram, network, type) {
      var programBytes, netVersion, t1, t2, t3;
      if (network instanceof A.BitcoinCashNetwork) {
        programBytes = A.BytesUtils_fromHexString(addressProgram, false);
        netVersion = A._BitcoinAddressUtils__getBchNetVersion(network, programBytes.length, type);
        t1 = network.conf.params.p2pkhStdHrp;
        t1.toString;
        t2 = type$.int;
        t3 = A.List_List$_of(netVersion, t2);
        B.JSArray_methods.addAll$1(t3, programBytes);
        A.BytesUtils_validateListOfBytes(t3);
        return A.Bech32EncoderBase_encodeBech32(t1, A.Bech32BaseUtils_convertToBase32(A.List_List$unmodifiable(t3, t2)), ":", A.bch_bech32__BchBech32Utils_computeChecksum$closure());
      }
      programBytes = A.BytesUtils_fromHexString(addressProgram, false);
      switch (type) {
        case B.P2shAddressType_UPK:
        case B.P2shAddressType_YXg:
        case B.P2shAddressType_apR:
        case B.P2shAddressType_vvf:
          t1 = A.List_List$_of(network.get$p2shNetVer(), type$.int);
          B.JSArray_methods.addAll$1(t1, programBytes);
          programBytes = t1;
          break;
        case B.P2pkhAddressType_P2PKH:
        case B.PubKeyAddressType_P2PK:
          t1 = A.List_List$_of(network.get$p2pkhNetVer(), type$.int);
          B.JSArray_methods.addAll$1(t1, programBytes);
          programBytes = t1;
          break;
      }
      return A.Base58Encoder_checkEncode(programBytes);
    },
    BitcoinAddressType: function BitcoinAddressType() {
    },
    BitcoinAddressType_fromValue_closure: function BitcoinAddressType_fromValue_closure(t0) {
      this.value = t0;
    },
    BitcoinAddressType_fromValue_closure0: function BitcoinAddressType_fromValue_closure0(t0) {
      this.value = t0;
    },
    PubKeyAddressType: function PubKeyAddressType(t0) {
      this.value = t0;
    },
    P2pkhAddressType: function P2pkhAddressType(t0) {
      this.value = t0;
    },
    P2shAddressType: function P2shAddressType(t0, t1) {
      this.hashLength = t0;
      this.value = t1;
    },
    SegwitAddressType: function SegwitAddressType(t0) {
      this.value = t0;
    },
    LegacyAddress: function LegacyAddress() {
    },
    P2shAddress: function P2shAddress(t0, t1) {
      this.type = t0;
      this.__LegacyAddress__addressProgram_F = t1;
    },
    P2pkhAddress: function P2pkhAddress(t0, t1) {
      this.type = t0;
      this.__LegacyAddress__addressProgram_F = t1;
    },
    P2pkAddress: function P2pkAddress(t0, t1) {
      this.publicKey = t0;
      this.__LegacyAddress__addressProgram_F = t1;
    },
    BitcoinNetworkAddress: function BitcoinNetworkAddress() {
    },
    BitcoinAddress: function BitcoinAddress(t0, t1) {
      this.baseAddress = t0;
      this.address = t1;
    },
    DogeAddress: function DogeAddress(t0, t1) {
      this.baseAddress = t0;
      this.address = t1;
    },
    PepeAddress: function PepeAddress(t0, t1) {
      this.baseAddress = t0;
      this.address = t1;
    },
    LitecoinAddress: function LitecoinAddress(t0, t1) {
      this.baseAddress = t0;
      this.address = t1;
    },
    BitcoinCashAddress: function BitcoinCashAddress(t0, t1) {
      this.baseAddress = t0;
      this.address = t1;
    },
    DashAddress: function DashAddress(t0, t1) {
      this.baseAddress = t0;
      this.address = t1;
    },
    BitcoinSVAddress: function BitcoinSVAddress(t0, t1) {
      this.baseAddress = t0;
      this.address = t1;
    },
    ElectraProtocolAddress: function ElectraProtocolAddress(t0, t1) {
      this.baseAddress = t0;
      this.address = t1;
    },
    SegwitAddress: function SegwitAddress() {
    },
    P2wpkhAddress: function P2wpkhAddress(t0, t1) {
      this.__SegwitAddress_addressProgram_F = t0;
      this.segwitVersion = t1;
    },
    P2trAddress: function P2trAddress(t0, t1) {
      this.__SegwitAddress_addressProgram_F = t0;
      this.segwitVersion = t1;
    },
    P2wshAddress: function P2wshAddress(t0, t1) {
      this.__SegwitAddress_addressProgram_F = t0;
      this.segwitVersion = t1;
    },
    TxInput_TxInput(scriptSig, sequance, txId, txIndex) {
      var txBytes, t2,
        t1 = sequance.length;
      if (t1 !== 4)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid sequence length: expected 4, but got " + t1 + ".", null));
      txBytes = A.BytesUtils_tryFromHexString(txId, false);
      if ((txBytes == null ? null : txBytes.length) !== 32)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid transaction ID: Expected 32 bytes, but received a different length.", A.LinkedHashMap_LinkedHashMap$_literal(["transactionID", txId], type$.String, type$.dynamic)));
      t1 = A.StringUtils_strip0x(txId.toLowerCase());
      A.BytesUtils_validateListOfBytes(sequance);
      t2 = A.List_List$unmodifiable(sequance, type$.int);
      return new A.TxInput(t1, txIndex, scriptSig == null ? A.Script_Script([]) : scriptSig, t2);
    },
    TxInput: function TxInput(t0, t1, t2, t3) {
      var _ = this;
      _.txId = t0;
      _.txIndex = t1;
      _.scriptSig = t2;
      _.sequence = t3;
    },
    BitcoinOpcode_findByName($name) {
      return A.IterableHelper_firstWhereNullable(B.List_9qw, new A.BitcoinOpcode_findByName_closure($name), type$.BitcoinOpcode);
    },
    BitcoinOpcode_findByValue(value) {
      return A.IterableHelper_firstWhereNullable(B.List_9qw, new A.BitcoinOpcode_findByValue_closure(value), type$.BitcoinOpcode);
    },
    BitcoinOpcode: function BitcoinOpcode(t0, t1, t2) {
      this.name = t0;
      this.value = t1;
      this._name = t2;
    },
    BitcoinOpcode_findByName_closure: function BitcoinOpcode_findByName_closure(t0) {
      this.name = t0;
    },
    BitcoinOpcode_findByValue_closure: function BitcoinOpcode_findByValue_closure(t0) {
      this.value = t0;
    },
    TxOutput_TxOutput(amount, cashToken, scriptPubKey) {
      var t1, exception;
      try {
        t1 = A.BigIntHelper_get_asInt64(amount);
        return new A.TxOutput(cashToken, t1, scriptPubKey);
      } catch (exception) {
        t1 = A.DartBitcoinPluginException$("Invalid output amount.", null);
        throw A.wrapException(t1);
      }
    },
    TxOutput: function TxOutput(t0, t1, t2) {
      this.cashToken = t0;
      this.amount = t1;
      this.scriptPubKey = t2;
    },
    Script_Script(script) {
      var t1, _i, i, t2, scripts, token, opcode, tokenBytes,
        _s108_ = string$.A_vali;
      for (t1 = script.length, _i = 0; _i < t1; ++_i) {
        i = script[_i];
        if (typeof i != "string")
          t2 = !(i instanceof A.BitcoinOpcode);
        else
          t2 = false;
        if (t2)
          throw A.wrapException(A.DartBitcoinPluginException$(_s108_, null));
      }
      scripts = [];
      for (_i = 0; _i < script.length; script.length === t1 || (0, A.throwConcurrentModificationError)(script), ++_i) {
        token = script[_i];
        if (token instanceof A.BitcoinOpcode) {
          if (token === B.BitcoinOpcode_OP_PUSHDATA1_76_opPushData1 || token === B.BitcoinOpcode_OP_PUSHDATA2_77_opPushData2 || token === B.BitcoinOpcode_OP_PUSHDATA4_78_opPushData4)
            continue;
          scripts.push(token.name);
          continue;
        }
        opcode = A.BitcoinOpcode_findByName(J.toString$0$(token));
        if (opcode != null)
          scripts.push(opcode.name);
        else {
          A._asStringQ(token);
          tokenBytes = A.BytesUtils_tryFromHexString(token, false);
          if (tokenBytes == null)
            throw A.wrapException(A.DartBitcoinPluginException$(_s108_, null));
          scripts.push(A.StringUtils_strip0x(token.toLowerCase()));
        }
      }
      t1 = A.List_List$unmodifiable(scripts, type$.dynamic);
      t2 = A.Script__toBytes(scripts);
      A.BytesUtils_validateListOfBytes(t2);
      return new A.Script(t1, A.List_List$unmodifiable(t2, type$.int));
    },
    Script_Script$deserialize(bytes) {
      var t1, index, opcode, t2, index0, toHex, viAndSize, dataSize, size, lastIndex,
        commands = A._setArrayType([], type$.JSArray_String);
      for (t1 = J.getInterceptor$asx(bytes), index = 0; index < t1.get$length(bytes);) {
        opcode = A.BitcoinOpcode_findByValue(t1.$index(bytes, index));
        if (opcode != null) {
          t2 = opcode === B.BitcoinOpcode_OP_PUSHDATA1_76_opPushData1;
          if (!(t2 || opcode === B.BitcoinOpcode_OP_PUSHDATA2_77_opPushData2 || opcode === B.BitcoinOpcode_OP_PUSHDATA4_78_opPushData4))
            B.JSArray_methods.add$1(commands, opcode.name);
          ++index;
          if (t2) {
            index0 = index + 1;
            index = index0 + t1.$index(bytes, index);
            toHex = B.C__Hex.encode$2$lowerCase(t1.sublist$2(bytes, index0, index), true);
            B.JSArray_methods.add$1(commands, toHex);
          } else if (opcode === B.BitcoinOpcode_OP_PUSHDATA2_77_opPushData2) {
            index0 = index + 2;
            index = index0 + ((t1.$index(bytes, index + 1) << 8 | t1.$index(bytes, index)) >>> 0);
            toHex = B.C__Hex.encode$2$lowerCase(t1.sublist$2(bytes, index0, index), true);
            B.JSArray_methods.add$1(commands, toHex);
          } else if (opcode === B.BitcoinOpcode_OP_PUSHDATA4_78_opPushData4) {
            index0 = index + 4;
            index = index0 + A.readUint32LE(bytes, index);
            toHex = B.C__Hex.encode$2$lowerCase(t1.sublist$2(bytes, index0, index), true);
            B.JSArray_methods.add$1(commands, toHex);
          }
        } else {
          viAndSize = A.IntUtils_decodeVarint(t1.sublist$1(bytes, index));
          dataSize = viAndSize.item1;
          size = viAndSize.item2;
          t2 = index + size;
          lastIndex = t2 + dataSize;
          toHex = B.C__Hex.encode$2$lowerCase(t1.sublist$2(bytes, t2, lastIndex > t1.get$length(bytes) ? t1.get$length(bytes) : lastIndex), true);
          B.JSArray_methods.add$1(commands, toHex);
          index = index + dataSize + size;
        }
      }
      return A.Script_Script(commands);
    },
    Script__toBytes(script) {
      var t1, t2, t3, t4, t5, _i, token, opcode, t6, tokenBytes;
      if (script.length === 0)
        return A._setArrayType([], type$.JSArray_int);
      t1 = type$.int;
      t2 = J.JSArray_JSArray$growable(0, t1);
      for (t3 = script.length, t4 = type$.List_int, t5 = type$.JSArray_int, _i = 0; _i < script.length; script.length === t3 || (0, A.throwConcurrentModificationError)(script), ++_i) {
        token = script[_i];
        opcode = A.BitcoinOpcode_findByName(J.toString$0$(token));
        if (opcode != null) {
          t6 = t4._as(A._setArrayType([opcode.value], t5));
          A.BytesUtils_validateListOfBytes(t6);
          B.JSArray_methods.addAll$1(t2, t6);
        } else if (A._isInt(token)) {
          t6 = t4._as(A.BitcoinScriptUtils_pushInteger(token));
          A.BytesUtils_validateListOfBytes(t6);
          B.JSArray_methods.addAll$1(t2, t6);
        } else {
          tokenBytes = A.BytesUtils_tryFromHexString(A._asStringQ(token), false);
          if (tokenBytes == null)
            throw A.wrapException(A.DartBitcoinPluginException$(string$.A_vali, null));
          t6 = t4._as(A.BitcoinScriptUtils_opPushData(tokenBytes));
          A.BytesUtils_validateListOfBytes(t6);
          B.JSArray_methods.addAll$1(t2, t6);
        }
      }
      return A.List_List$from(t2, true, t1);
    },
    Script: function Script(t0, t1) {
      this.script = t0;
      this._scriptBytes = t1;
    },
    BtcTransaction_deserialize(txBytes, allowWitness) {
      var version, cursor, hasWitness, vi, inputs, index, inp, outputs, viOut, index0, inp0, witnesses, n, wVi, witnessesTmp, n0, witness, wtVi, locktime, e, t1, t2, t3, t4, inpHash, outputN, vi0, cursor0, unlockingScript, sequenceNumberData, toHex, signMask, value, token, t5, t6, t7, t8, result, exception;
      try {
        version = B.JSArray_methods.sublist$2(txBytes, 0, 4);
        cursor = 4;
        hasWitness = false;
        t1 = false;
        if (allowWitness) {
          t2 = txBytes.length;
          if (4 >= t2)
            return A.ioore(txBytes, 4);
          if (txBytes[4] === 0) {
            if (5 >= t2)
              return A.ioore(txBytes, 5);
            t1 = txBytes[5] === 1;
          }
        }
        if (t1) {
          hasWitness = true;
          t1 = cursor;
          if (typeof t1 !== "number")
            return t1.$add();
          cursor = t1 + 2;
        }
        vi = A.IntUtils_decodeVarint(B.JSArray_methods.sublist$1(txBytes, cursor));
        t1 = cursor;
        t2 = vi.item2;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return A.iae(t2);
        cursor = t1 + t2;
        inputs = A._setArrayType([], type$.JSArray_TxInput);
        index = 0;
        t1 = type$.Tuple_TxInput_int;
        while (true) {
          t2 = index;
          t3 = vi.item1;
          if (typeof t2 !== "number")
            return t2.$lt();
          if (typeof t3 !== "number")
            return A.iae(t3);
          if (!(t2 < t3))
            break;
          t2 = cursor;
          t3 = t2 + 32;
          t2 = B.JSArray_methods.sublist$2(txBytes, t2, t3);
          t4 = A._arrayInstanceType(t2)._eval$1("ReversedListIterable<1>");
          inpHash = A.List_List$_of(new A.ReversedListIterable(t2, t4), t4._eval$1("ListIterable.E"));
          t2 = t3 + 4;
          outputN = A.IntUtils_fromBytes(B.JSArray_methods.sublist$2(txBytes, t3, t2), B.C_Endian0, false);
          vi0 = A.IntUtils_decodeVarint(B.JSArray_methods.sublist$1(txBytes, t2));
          t3 = vi0.item2;
          if (typeof t3 !== "number")
            return A.iae(t3);
          cursor0 = t2 + t3;
          t3 = vi0.item1;
          if (typeof t3 !== "number")
            return A.iae(t3);
          t3 = cursor0 + t3;
          unlockingScript = B.JSArray_methods.sublist$2(txBytes, cursor0, t3);
          t2 = t3 + 4;
          sequenceNumberData = B.JSArray_methods.sublist$2(txBytes, t3, t2);
          toHex = B.C__Hex.encode$2$lowerCase(inpHash, true);
          inp = new A.Tuple(A.TxInput_TxInput(A.Script_Script$deserialize(unlockingScript), sequenceNumberData, toHex, outputN), t2, t1);
          J.add$1$ax(inputs, inp.item1);
          cursor = inp.item2;
          t2 = index;
          if (typeof t2 !== "number")
            return t2.$add();
          index = t2 + 1;
        }
        outputs = A._setArrayType([], type$.JSArray_TxOutput);
        viOut = A.IntUtils_decodeVarint(B.JSArray_methods.sublist$1(txBytes, cursor));
        t1 = cursor;
        t2 = viOut.item2;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return A.iae(t2);
        cursor = t1 + t2;
        index0 = 0;
        t1 = type$.Tuple_TxOutput_int;
        while (true) {
          t2 = index0;
          t3 = viOut.item1;
          if (typeof t2 !== "number")
            return t2.$lt();
          if (typeof t3 !== "number")
            return A.iae(t3);
          if (!(t2 < t3))
            break;
          t2 = cursor;
          t3 = t2 + 8;
          t2 = A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(txBytes, t2, t3), B.C_Endian0, false);
          t4 = $.$get$_BigIntImpl_one();
          signMask = t4.$shl(0, 63);
          value = t2.$and(0, signMask.$sub(0, t4)).$sub(0, t2.$and(0, signMask));
          vi = A.IntUtils_decodeVarint(B.JSArray_methods.sublist$1(txBytes, t3));
          t2 = vi.item2;
          if (typeof t2 !== "number")
            return A.iae(t2);
          cursor0 = t3 + t2;
          token = A.CashToken_deserialize(B.JSArray_methods.sublist$1(txBytes, cursor0));
          t2 = token.item2;
          if (typeof t2 !== "number")
            return A.iae(t2);
          t3 = vi.item1;
          if (typeof t3 !== "number")
            return A.iae(t3);
          t3 = cursor0 + t3;
          inp0 = new A.Tuple(A.TxOutput_TxOutput(value, token.item1, A.Script_Script$deserialize(B.JSArray_methods.sublist$2(txBytes, cursor0 + t2, t3))), t3, t1);
          J.add$1$ax(outputs, inp0.item1);
          cursor = inp0.item2;
          t2 = index0;
          if (typeof t2 !== "number")
            return t2.$add();
          index0 = t2 + 1;
        }
        witnesses = A._setArrayType([], type$.JSArray_TxWitnessInput);
        if (hasWitness) {
          t1 = cursor;
          if (typeof t1 !== "number")
            return t1.$add();
          if (t1 + 4 < txBytes.length) {
            n = 0;
            t1 = type$.String;
            t2 = type$.JSArray_int;
            t3 = type$.JSArray_String;
            while (true) {
              t4 = n;
              t5 = J.get$length$asx(inputs);
              if (typeof t4 !== "number")
                return t4.$lt();
              if (!(t4 < t5))
                break;
              wVi = A.IntUtils_decodeVarint(B.JSArray_methods.sublist$1(txBytes, cursor));
              t4 = cursor;
              t5 = wVi.item2;
              if (typeof t4 !== "number")
                return t4.$add();
              if (typeof t5 !== "number")
                return A.iae(t5);
              cursor = t4 + t5;
              witnessesTmp = A._setArrayType([], t3);
              n0 = 0;
              while (true) {
                t4 = n0;
                t5 = wVi.item1;
                if (typeof t4 !== "number")
                  return t4.$lt();
                if (typeof t5 !== "number")
                  return A.iae(t5);
                if (!(t4 < t5))
                  break;
                witness = A._setArrayType([], t2);
                wtVi = A.IntUtils_decodeVarint(B.JSArray_methods.sublist$1(txBytes, cursor));
                if (!J.$eq$(wtVi.item1, 0)) {
                  t4 = cursor;
                  t5 = wtVi.item2;
                  if (typeof t4 !== "number")
                    return t4.$add();
                  if (typeof t5 !== "number")
                    return A.iae(t5);
                  t6 = cursor;
                  t7 = wtVi.item1;
                  if (typeof t6 !== "number")
                    return t6.$add();
                  if (typeof t7 !== "number")
                    return A.iae(t7);
                  t8 = wtVi.item2;
                  if (typeof t8 !== "number")
                    return A.iae(t8);
                  witness = B.JSArray_methods.sublist$2(txBytes, t4 + t5, t6 + t7 + t8);
                }
                t4 = cursor;
                t5 = wtVi.item1;
                t6 = wtVi.item2;
                if (typeof t5 !== "number")
                  return t5.$add();
                if (typeof t6 !== "number")
                  return A.iae(t6);
                if (typeof t4 !== "number")
                  return t4.$add();
                cursor = t4 + (t5 + t6);
                toHex = B.C__Hex.encode$2$lowerCase(witness, true);
                J.add$1$ax(witnessesTmp, toHex);
                t4 = n0;
                if (typeof t4 !== "number")
                  return t4.$add();
                n0 = t4 + 1;
              }
              result = A.List_List$from(witnessesTmp, false, t1);
              result.$flags = 3;
              J.add$1$ax(witnesses, new A.TxWitnessInput(result));
              t4 = n;
              if (typeof t4 !== "number")
                return t4.$add();
              n = t4 + 1;
            }
          }
        }
        locktime = B.List_0_0_0_0;
        t1 = cursor;
        if (typeof t1 !== "number")
          return A.iae(t1);
        if (txBytes.length - t1 >= 4) {
          t1 = cursor;
          t2 = cursor;
          if (typeof t2 !== "number")
            return t2.$add();
          locktime = B.JSArray_methods.sublist$2(txBytes, t1, t2 + 4);
          t2 = cursor;
          if (typeof t2 !== "number")
            return t2.$add();
          cursor = t2 + 4;
        }
        t1 = version;
        t2 = locktime;
        t3 = J.getInterceptor$asx(t2);
        if (t3.get$length(t2) !== 4)
          A.throwExpression(A.DartBitcoinPluginException$("Invalid locktime length: expected 4, but got " + t3.get$length(t2) + ".", null));
        t3 = J.getInterceptor$asx(t1);
        if (t3.get$length(t1) !== 4)
          A.throwExpression(A.DartBitcoinPluginException$("Invalid version length: expected 4, but got " + t3.get$length(t1) + ".", null));
        A.BytesUtils_validateListOfBytes(t2);
        t3 = type$.int;
        t2 = A.List_List$unmodifiable(t2, t3);
        A.BytesUtils_validateListOfBytes(t1);
        t3 = A.List_List$unmodifiable(t1, t3);
        t1 = A.List_List$unmodifiable(inputs, type$.TxInput);
        t4 = A.List_List$unmodifiable(outputs, type$.TxOutput);
        t5 = A.List_List$unmodifiable(witnesses, type$.TxWitnessInput);
        return new A.BtcTransaction(t1, t4, t2, t3, t5);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.DartBitcoinPluginException$("Transaction deserialization failed.", A.LinkedHashMap_LinkedHashMap$_literal(["error", J.toString$0$(e)], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    BtcTransaction: function BtcTransaction(t0, t1, t2, t3, t4) {
      var _ = this;
      _.inputs = t0;
      _.outputs = t1;
      _.locktime = t2;
      _.version = t3;
      _.witnesses = t4;
    },
    BtcTransaction_toJson_closure: function BtcTransaction_toJson_closure() {
    },
    BtcTransaction_toJson_closure0: function BtcTransaction_toJson_closure0() {
    },
    BtcTransaction_toJson_closure1: function BtcTransaction_toJson_closure1() {
    },
    TxWitnessInput_TxWitnessInput$deserialize(bytes) {
      var t2, n, witness, itemLen, t3, toHex,
        $length = A.IntUtils_decodeVarint(bytes),
        offset = $length.item2,
        stack = A._setArrayType([], type$.JSArray_String),
        t1 = $length.item1;
      if (typeof t1 !== "number")
        return A.iae(t1);
      t2 = type$.JSArray_int;
      n = 0;
      for (; n < t1; ++n) {
        witness = A._setArrayType([], t2);
        itemLen = A.IntUtils_decodeVarint(B.JSArray_methods.sublist$1(bytes, offset));
        t3 = itemLen.item2;
        if (typeof t3 !== "number")
          return A.iae(t3);
        offset += t3;
        t3 = itemLen.item1;
        if (!J.$eq$(t3, 0)) {
          if (typeof t3 !== "number")
            return A.iae(t3);
          witness = B.JSArray_methods.sublist$2(bytes, offset, offset + t3);
        }
        if (typeof t3 !== "number")
          return A.iae(t3);
        offset += t3;
        toHex = B.C__Hex.encode$2$lowerCase(witness, true);
        B.JSArray_methods.add$1(stack, toHex);
      }
      return new A.TxWitnessInput(A.List_List$unmodifiable(stack, type$.String));
    },
    TxWitnessInput: function TxWitnessInput(t0) {
      this.stack = t0;
    },
    TaprootTree: function TaprootTree() {
    },
    TaprootLeaf: function TaprootLeaf(t0, t1, t2) {
      this.script = t0;
      this.leafVersion = t1;
      this._hash = t2;
    },
    TaprootControlBlock: function TaprootControlBlock(t0, t1, t2) {
      this.xOnly = t0;
      this.merklePath = t1;
      this.leafVersion = t2;
    },
    CashTokenUtils__decodeVarintBigInt(byteint) {
      var ni, size;
      if (0 >= byteint.length)
        return A.ioore(byteint, 0);
      ni = byteint[0];
      if (ni < 253)
        return new A.Tuple(A._BigIntImpl__BigIntImpl$from(ni), 1, type$.Tuple_BigInt_int);
      if (ni === 253)
        size = 2;
      else
        size = ni === 254 ? 4 : 8;
      return new A.Tuple(A.BigintUtils_fromBytes(J.sublist$2$ax(byteint, 1, 1 + size), B.C_Endian0, false), size + 1, type$.Tuple_BigInt_int);
    },
    CashTokenUtils_isValidBitfield(bitfield) {
      var t1, t2,
        highNibble = bitfield & 240;
      if (highNibble >= 128 || highNibble === 0)
        return false;
      t1 = bitfield & 15;
      if (t1 > 2)
        return false;
      t2 = (bitfield & 32) === 0;
      if (t2 && (bitfield & 16) === 0)
        return false;
      if (t2 && t1 !== 0)
        return false;
      if (t2 && (bitfield & 64) !== 0)
        return false;
      return true;
    },
    CashToken_deserialize(scriptBytes) {
      var id, bitfield, commitment, t2, vi, t3, cursor, cursor0, amount, amount0,
        t1 = J.getInterceptor$asx(scriptBytes);
      if (t1.get$isEmpty(scriptBytes) || t1.$index(scriptBytes, 0) !== 239)
        return B.Tuple_null_0;
      id = t1.sublist$2(scriptBytes, 1, 33);
      bitfield = t1.$index(scriptBytes, 33);
      commitment = A._setArrayType([], type$.JSArray_int);
      t2 = (bitfield & 64) !== 0;
      if (t2) {
        vi = A.IntUtils_decodeVarint(t1.sublist$2(scriptBytes, 34, t1.get$length(scriptBytes)));
        t3 = vi.item2;
        if (typeof t3 !== "number")
          return A.iae(t3);
        cursor = 34 + t3;
        t3 = vi.item1;
        if (typeof t3 !== "number")
          return A.iae(t3);
        cursor0 = cursor + t3;
        commitment = t1.sublist$2(scriptBytes, cursor, cursor0);
        cursor = cursor0;
      } else
        cursor = 34;
      amount = $.$get$_BigIntImpl_zero();
      if ((bitfield & 16) !== 0) {
        vi = A.CashTokenUtils__decodeVarintBigInt(t1.sublist$2(scriptBytes, cursor, t1.get$length(scriptBytes)));
        amount0 = vi.item1;
        t1 = vi.item2;
        if (typeof t1 !== "number")
          return A.iae(t1);
        cursor += t1;
      } else
        amount0 = amount;
      t1 = true;
      if (A.CashTokenUtils_isValidBitfield(bitfield))
        if (amount0.compareTo$1(0, amount) >= 0)
          if (amount0.compareTo$1(0, $.$get$CashTokenUtils_maxTokenAmount()) <= 0)
            t1 = t2 && J.get$isEmpty$asx(commitment);
      if (t1)
        throw A.wrapException(B.DartBitcoinPluginException_c2A);
      t1 = J.get$reversed$ax(id);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      t1 = A.BytesUtils_toHexString(t1, true, null);
      if (!A.CashTokenUtils_isValidBitfield(bitfield))
        A.throwExpression(B.DartBitcoinPluginException_s4L);
      if (amount0.compareTo$1(0, amount) < 0 || amount0.compareTo$1(0, $.$get$CashTokenUtils_maxTokenAmount()) > 0)
        A.throwExpression(B.DartBitcoinPluginException_TzO);
      t3 = $.$get$StringUtils__hexBytesRegex();
      if (!t3._nativeRegExp.test(t1))
        A.throwExpression(B.DartBitcoinPluginException_OoQ);
      if (A.BytesUtils_fromHexString(t1, false).length !== 32)
        A.throwExpression(B.DartBitcoinPluginException_zeS);
      if (t2)
        t2 = J.get$isEmpty$asx(commitment);
      else
        t2 = false;
      if (t2)
        A.throwExpression(B.DartBitcoinPluginException_zmA);
      t1 = A.StringUtils_strip0x(t1.toLowerCase());
      t2 = commitment;
      A.BytesUtils_validateListOfBytes(t2);
      return new A.Tuple(new A.CashToken(t1, amount0, A.List_List$unmodifiable(t2, type$.int), bitfield), cursor, type$.Tuple_of_nullable_CashToken_and_int);
    },
    CashToken: function CashToken(t0, t1, t2, t3) {
      var _ = this;
      _.category = t0;
      _.amount = t1;
      _.commitment = t2;
      _.bitfield = t3;
      _.__CashToken_commitmentInHex_FI = _.__CashToken_hasCommitment_FI = _.__CashToken_hasNFT_FI = $;
    },
    ECPublic: function ECPublic(t0) {
      this.publicKey = t0;
    },
    DartBitcoinPluginException$(message, details) {
      return new A.DartBitcoinPluginException(message, details);
    },
    DartBitcoinPluginException: function DartBitcoinPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    BasedUtxoNetwork_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_m5n, new A.BasedUtxoNetwork_fromName_closure($name), new A.BasedUtxoNetwork_fromName_closure0());
    },
    BasedUtxoNetwork_fromName_closure: function BasedUtxoNetwork_fromName_closure(t0) {
      this.name = t0;
    },
    BasedUtxoNetwork_fromName_closure0: function BasedUtxoNetwork_fromName_closure0() {
    },
    BitcoinSVNetwork: function BitcoinSVNetwork(t0, t1, t2) {
      this.conf = t0;
      this.value = t1;
      this.identifier = t2;
    },
    BitcoinNetwork: function BitcoinNetwork(t0, t1, t2) {
      this.conf = t0;
      this.value = t1;
      this.identifier = t2;
    },
    LitecoinNetwork: function LitecoinNetwork(t0, t1, t2) {
      this.conf = t0;
      this.value = t1;
      this.identifier = t2;
    },
    DashNetwork: function DashNetwork(t0, t1, t2) {
      this.conf = t0;
      this.value = t1;
      this.identifier = t2;
    },
    DogecoinNetwork: function DogecoinNetwork(t0, t1, t2) {
      this.conf = t0;
      this.value = t1;
      this.identifier = t2;
    },
    BitcoinCashNetwork: function BitcoinCashNetwork(t0, t1, t2) {
      this.conf = t0;
      this.value = t1;
      this.identifier = t2;
    },
    PepeNetwork: function PepeNetwork() {
    },
    ElectraProtocolNetwork: function ElectraProtocolNetwork(t0, t1, t2) {
      this.conf = t0;
      this.value = t1;
      this.identifier = t2;
    },
    PsbtBuilder_fromPsbt(psbt, PSBTBUILDER) {
      var t1 = psbt.global,
        t2 = t1.version;
      switch (t2) {
        case B.PsbtVersion_0_V0_v0:
          t1 = new A.PsbtBuilderV0(new A.Psbt(A.PsbtGlobal_PsbtGlobal(A.ListHelper_clone(t1._global$_entries, type$.PsbtGlobalData), t2), psbt.input.clone$0(), psbt.output.clone$0()));
          break;
        case B.PsbtVersion_2_V2_v2:
          t1 = new A.PsbtBuilderV2(new A.Psbt(A.PsbtGlobal_PsbtGlobal(A.ListHelper_clone(t1._global$_entries, type$.PsbtGlobalData), t2), psbt.input.clone$0(), psbt.output.clone$0()));
          break;
        default:
          t1 = null;
      }
      if (!PSBTBUILDER._is(t1))
        throw A.wrapException(A.DartBitcoinPluginException$("Failed to initialize PSBT builder. Type mismatch: Expected PsbtBuilder<" + A.createRuntimeType(PSBTBUILDER).toString$0(0) + ">, but got " + A.getRuntimeTypeOfDartObject(t1).toString$0(0) + ".", null));
      return t1;
    },
    PsbtBuilderImpl: function PsbtBuilderImpl() {
    },
    PsbtBuilder: function PsbtBuilder() {
    },
    PsbtInputImpl: function PsbtInputImpl() {
    },
    PsbtOutputImpl: function PsbtOutputImpl() {
    },
    PsbtSignerImpl: function PsbtSignerImpl() {
    },
    PsbtBuilderV0: function PsbtBuilderV0(t0) {
      this._psbt = t0;
    },
    PsbtBuilderV2: function PsbtBuilderV2(t0) {
      this._psbt = t0;
    },
    _PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl: function _PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl() {
    },
    _PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl_PsbtInputImpl: function _PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl_PsbtInputImpl() {
    },
    _PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl_PsbtInputImpl_PsbtOutputImpl: function _PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl_PsbtInputImpl_PsbtOutputImpl() {
    },
    PsbtTransactionInput: function PsbtTransactionInput(t0, t1) {
      this.address = t0;
      this.scriptPubKey = t1;
    },
    PsbtByteReader: function PsbtByteReader(t0) {
      this.bytes = t0;
      this._offset = 0;
    },
    PsbtGlobalTypes_find(flag) {
      var type = A.IterableHelper_firstWhereNullable(B.List_MX0, new A.PsbtGlobalTypes_find_closure(flag), type$.PsbtGlobalTypes);
      if (type != null)
        return type;
      return B.PsbtGlobalTypes_TuU;
    },
    PsbtGlobal_PsbtGlobal(entries, version) {
      var _i, t3,
        t1 = A._arrayInstanceType(entries),
        t2 = t1._eval$1("MappedListIterable<1,PsbtKey>"),
        keys = A.List_List$_of(new A.MappedListIterable(entries, t1._eval$1("PsbtKey(1)")._as(new A.PsbtGlobal_PsbtGlobal_closure()), t2), t2._eval$1("ListIterable.E"));
      if (A.LinkedHashSet_LinkedHashSet$from(keys, A._arrayInstanceType(keys)._precomputed1)._collection$_length !== keys.length)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Global: Duplicate entry detected.", null));
      for (t1 = entries.length, _i = 0; _i < t1; ++_i) {
        t2 = entries[_i].type;
        t3 = t2.allowedVersion;
        if (t3 == null)
          continue;
        if (version !== t3)
          throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Global: " + t2.psbtName + " is not allowed in PSBT version " + version.name + ".", null));
      }
      t1 = type$.bool_Function_PsbtGlobalTypes._as(new A.PsbtGlobal_PsbtGlobal_closure0(version));
      for (t2 = B.JSArray_methods.get$iterator(B.List_MX0), t1 = new A.WhereIterator(t2, t1, type$.WhereIterator_PsbtGlobalTypes); t1.moveNext$0();) {
        t3 = t2.get$current();
        B.JSArray_methods.firstWhere$2$orElse(entries, new A.PsbtGlobal_PsbtGlobal_closure1(t3), new A.PsbtGlobal_PsbtGlobal_closure2(t3, version));
      }
      return new A.PsbtGlobal(A.List_List$unmodifiable(entries, type$.PsbtGlobalData), version);
    },
    PsbtGlobalData___deserialize_tearOff(keypair) {
      return A.PsbtGlobalData_PsbtGlobalData$deserialize(type$.PsbtKeyPair._as(keypair));
    },
    PsbtGlobalData_PsbtGlobalData$deserialize(keypair) {
      var t1;
      switch (A.PsbtGlobalTypes_find(keypair.key.type)) {
        case B.PsbtGlobalTypes_L0R:
          t1 = A.PsbtGlobalUnsignedTransaction_PsbtGlobalUnsignedTransaction$deserialize(keypair);
          break;
        case B.PsbtGlobalTypes_TZ9:
          t1 = A.PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey$deserialize(keypair);
          break;
        case B.PsbtGlobalTypes_a5U:
          t1 = A.PsbtGlobalTransactionVersion_PsbtGlobalTransactionVersion$deserialize(keypair);
          break;
        case B.PsbtGlobalTypes_fFZ:
          t1 = A.PsbtGlobalFallbackLocktime_PsbtGlobalFallbackLocktime$deserialize(keypair);
          break;
        case B.PsbtGlobalTypes_0Hb:
          t1 = A.PsbtGlobalInputCount_PsbtGlobalInputCount$deserialize(keypair);
          break;
        case B.PsbtGlobalTypes_pZG:
          t1 = A.PsbtGlobalOutputCount_PsbtGlobalOutputCount$deserialize(keypair);
          break;
        case B.PsbtGlobalTypes_SkF:
          t1 = A.PsbtGlobalTransactionModifiableFlags_PsbtGlobalTransactionModifiableFlags$deserialize(keypair);
          break;
        case B.PsbtGlobalTypes_qkL:
          t1 = A.PsbtGlobalSilentPaymentGlobalECDHShare_PsbtGlobalSilentPaymentGlobalECDHShare$deserialize(keypair);
          break;
        case B.PsbtGlobalTypes_8EA:
          t1 = A.PsbtGlobalSilentPaymentGlobalDLEQProof_PsbtGlobalSilentPaymentGlobalDLEQProof$deserialize(keypair);
          break;
        case B.PsbtGlobalTypes_LF6:
          t1 = A.PsbtGlobalPSBTVersionNumber_PsbtGlobalPSBTVersionNumber$deserialize(keypair);
          break;
        case B.PsbtGlobalTypes_kLG:
          t1 = A.PsbtGlobalProprietaryUseType_PsbtGlobalProprietaryUseType$deserialize(keypair);
          break;
        case B.PsbtGlobalTypes_TuU:
          t1 = new A.PsbtGlobalUnknow(B.PsbtGlobalTypes_TuU, keypair);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    PsbtGlobalUnsignedTransaction_PsbtGlobalUnsignedTransaction$deserialize(keypair) {
      var transaction, exception,
        t1 = keypair.key;
      if (t1.type !== 0)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Unsigned Transaction type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Unsigned Transaction key data.", null));
      try {
        transaction = A.BtcTransaction_deserialize(keypair.value.data, false);
        if (transaction.witnesses.length === 0 && B.JSArray_methods.every$1(transaction.inputs, new A.PsbtGlobalUnsignedTransaction_PsbtGlobalUnsignedTransaction$deserialize_closure()))
          return new A.PsbtGlobalUnsignedTransaction(transaction, B.PsbtGlobalTypes_L0R, keypair);
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Unsigned Transaction data.", null));
    },
    PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey(fingerprint, indexes, xPub) {
      var t1, t2, t3;
      if (xPub.length === 78 && fingerprint.length === 4) {
        t1 = new A.PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey_closure(indexes, xPub, fingerprint).call$0();
        A.BytesUtils_validateListOfBytes(xPub);
        t2 = type$.int;
        t3 = A.List_List$unmodifiable(xPub, t2);
        A.BytesUtils_validateListOfBytes(fingerprint);
        return new A.PsbtGlobalExtendedPublicKey(t3, A.List_List$unmodifiable(fingerprint, t2), A.List_List$unmodifiable(indexes, type$.Bip32KeyIndex), B.PsbtGlobalTypes_TZ9, t1);
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Extended Public Key data.", null));
    },
    PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey$deserialize(keypair) {
      var fingerPrint, indexesBytes, indexCount, bip32Indexes, t2, exception,
        t1 = keypair.key;
      if (t1.type !== 1)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Extended Public Key type flag", null));
      try {
        t2 = keypair.value.data;
        fingerPrint = B.JSArray_methods.sublist$2(t2, 0, 4);
        indexesBytes = B.JSArray_methods.sublist$1(t2, 4);
        indexCount = J.get$length$asx(indexesBytes) / 4 | 0;
        bip32Indexes = A.List_List$generate(indexCount, new A.PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey$deserialize_closure(indexesBytes), type$.Bip32KeyIndex);
        t1 = t1.extraData;
        if (t1 == null)
          t1 = A._setArrayType([], type$.JSArray_int);
        t1 = A.PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey(fingerPrint, bip32Indexes, t1);
        return t1;
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Extended Public Key data.", null));
    },
    PsbtGlobalTransactionVersion_PsbtGlobalTransactionVersion$deserialize(keypair) {
      var version, exception,
        t1 = keypair.key;
      if (t1.type !== 2)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Transaction Version type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Transaction Version key data.", null));
      t1 = keypair.value.data;
      if (t1.length === 4)
        try {
          version = A.IntUtils_fromBytes(t1, B.C_Endian0, false);
          t1 = A.IntHelper_get_asUint32(version);
          return new A.PsbtGlobalTransactionVersion(t1, B.PsbtGlobalTypes_a5U, keypair);
        } catch (exception) {
        }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Transaction Version data.", null));
    },
    PsbtGlobalFallbackLocktime_PsbtGlobalFallbackLocktime$deserialize(keypair) {
      var locktime, exception,
        t1 = keypair.key;
      if (t1.type !== 3)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Fallback Locktime type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Fallback Locktime key data.", null));
      t1 = keypair.value.data;
      if (t1.length === 4)
        try {
          locktime = A.IntUtils_fromBytes(t1, B.C_Endian0, false);
          t1 = A.IntHelper_get_asUint32(locktime);
          return new A.PsbtGlobalFallbackLocktime(t1, B.PsbtGlobalTypes_fFZ, keypair);
        } catch (exception) {
        }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Fallback Locktime data.", null));
    },
    PsbtGlobalInputCount_PsbtGlobalInputCount$deserialize(keypair) {
      var inputCount, exception,
        t1 = keypair.key;
      if (t1.type !== 4)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Input Count type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Input Count key data.", null));
      try {
        inputCount = A.IntUtils_decodeVarint(keypair.value.data).item1;
        t1 = A.IntHelper_get_asUint32(inputCount);
        return new A.PsbtGlobalInputCount(t1, B.PsbtGlobalTypes_0Hb, keypair);
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Input Count data.", null));
    },
    PsbtGlobalOutputCount_PsbtGlobalOutputCount$deserialize(keypair) {
      var outputCount, exception,
        t1 = keypair.key;
      if (t1.type !== 5)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Output Count type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Output Count key data.", null));
      try {
        outputCount = A.IntUtils_decodeVarint(keypair.value.data).item1;
        t1 = A.IntHelper_get_asUint32(outputCount);
        return new A.PsbtGlobalOutputCount(t1, B.PsbtGlobalTypes_pZG, keypair);
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Output Count data.", null));
    },
    PsbtGlobalTransactionModifiableFlags_PsbtGlobalTransactionModifiableFlags$deserialize(keypair) {
      var t1 = keypair.key;
      if (t1.type !== 6)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Transaction Modifiable Flags type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Transaction Modifiable Flags key data.", null));
      t1 = keypair.value.data;
      if (t1.length === 1)
        return new A.PsbtGlobalTransactionModifiableFlags(A.IntHelper_get_asUint8(B.JSArray_methods.get$first(t1)), B.PsbtGlobalTypes_SkF, keypair);
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Transaction Modifiable Flags data.", null));
    },
    PsbtGlobalSilentPaymentGlobalECDHShare_PsbtGlobalSilentPaymentGlobalECDHShare$deserialize(keypair) {
      var t2, t3,
        t1 = keypair.key;
      if (t1.type !== 7)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Silent Payment Global ECDH Share type flag", null));
      t1 = t1.extraData;
      t2 = t1 == null;
      if ((t2 ? null : t1.length) === 33 && keypair.value.data.length === 33) {
        if (t2)
          t1 = A._setArrayType([], type$.JSArray_int);
        t2 = keypair.value.data;
        A.BytesUtils_validateListOfBytes(t1);
        t3 = type$.int;
        t1 = A.List_List$unmodifiable(t1, t3);
        A.BytesUtils_validateListOfBytes(t2);
        return new A.PsbtGlobalSilentPaymentGlobalECDHShare(t1, A.List_List$unmodifiable(t2, t3), B.PsbtGlobalTypes_qkL, keypair);
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Silent Payment Global ECDH Share data.", null));
    },
    PsbtGlobalSilentPaymentGlobalDLEQProof_PsbtGlobalSilentPaymentGlobalDLEQProof$deserialize(keypair) {
      var t2, t3,
        t1 = keypair.key;
      if (t1.type !== 8)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Silent Payment Global DLEQ Proof type flag", null));
      t1 = t1.extraData;
      t2 = t1 == null;
      if ((t2 ? null : t1.length) === 33 && keypair.value.data.length === 64) {
        if (t2)
          t1 = A._setArrayType([], type$.JSArray_int);
        t2 = keypair.value.data;
        A.BytesUtils_validateListOfBytes(t1);
        t3 = type$.int;
        t1 = A.List_List$unmodifiable(t1, t3);
        A.BytesUtils_validateListOfBytes(t2);
        return new A.PsbtGlobalSilentPaymentGlobalDLEQProof(t1, A.List_List$unmodifiable(t2, t3), B.PsbtGlobalTypes_8EA, keypair);
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Silent Payment Global DLEQ Proof data.", null));
    },
    PsbtGlobalPSBTVersionNumber_PsbtGlobalPSBTVersionNumber$deserialize(keypair) {
      var version, exception,
        t1 = keypair.key;
      if (t1.type !== 251)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Version Number type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Version Number key data.", null));
      try {
        t1 = keypair.value.data;
        if (t1.length === 4) {
          version = A.IntUtils_fromBytes(t1, B.C_Endian0, false);
          t1 = B.JSArray_methods.firstWhere$2$orElse(B.List_P3v, new A.PsbtGlobalPSBTVersionNumber_PsbtGlobalPSBTVersionNumber$deserialize_closure(version), new A.PsbtGlobalPSBTVersionNumber_PsbtGlobalPSBTVersionNumber$deserialize_closure0(version));
          return new A.PsbtGlobalPSBTVersionNumber(t1, B.PsbtGlobalTypes_LF6, keypair);
        }
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.DartBitcoinPluginException)
          throw exception;
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Version Number data.", null));
    },
    PsbtGlobalProprietaryUseType_PsbtGlobalProprietaryUseType$deserialize(keypair) {
      var keyBytes, identifierSize, identifier, subtypeOffset, subkeydata, t2, t3, t4, exception,
        t1 = keypair.key;
      if (t1.type !== 252)
        throw A.wrapException(A.DartBitcoinPluginException$(string$.InvaliPP, null));
      try {
        t1 = t1.extraData;
        t1.toString;
        keyBytes = t1;
        identifierSize = A.IntUtils_decodeVarint(keyBytes);
        t1 = identifierSize.item2;
        t2 = identifierSize.item1;
        t3 = identifierSize.item2;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t3 !== "number")
          return A.iae(t3);
        identifier = J.sublist$2$ax(keyBytes, t1, t2 + t3);
        t3 = identifierSize.item1;
        t2 = identifierSize.item2;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t2 !== "number")
          return A.iae(t2);
        subtypeOffset = t3 + t2;
        subkeydata = J.sublist$1$ax(keyBytes, subtypeOffset);
        t2 = identifier;
        t3 = subkeydata;
        t1 = keypair.value.data;
        A.BytesUtils_validateListOfBytes(t2);
        t4 = type$.int;
        t2 = A.List_List$unmodifiable(t2, t4);
        A.BytesUtils_validateListOfBytes(t3);
        t3 = A.List_List$unmodifiable(t3, t4);
        A.BytesUtils_validateListOfBytes(t1);
        t4 = A.List_List$unmodifiable(t1, t4);
        return new A.PsbtGlobalProprietaryUseType(t2, t3, t4, B.PsbtGlobalTypes_kLG, keypair);
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Proprietary Use Type data", null));
    },
    PsbtGlobalTypes: function PsbtGlobalTypes(t0, t1, t2, t3, t4) {
      var _ = this;
      _.flag = t0;
      _.psbtName = t1;
      _.required = t2;
      _.allowedVersion = t3;
      _._name = t4;
    },
    PsbtGlobalTypes_find_closure: function PsbtGlobalTypes_find_closure(t0) {
      this.flag = t0;
    },
    PsbtGlobal: function PsbtGlobal(t0, t1) {
      this._global$_entries = t0;
      this.version = t1;
    },
    PsbtGlobal_PsbtGlobal_closure: function PsbtGlobal_PsbtGlobal_closure() {
    },
    PsbtGlobal_PsbtGlobal_closure0: function PsbtGlobal_PsbtGlobal_closure0(t0) {
      this.version = t0;
    },
    PsbtGlobal_PsbtGlobal_closure1: function PsbtGlobal_PsbtGlobal_closure1(t0) {
      this.i = t0;
    },
    PsbtGlobal_PsbtGlobal_closure2: function PsbtGlobal_PsbtGlobal_closure2(t0, t1) {
      this.i = t0;
      this.version = t1;
    },
    PsbtGlobal_toKeyPairs_closure: function PsbtGlobal_toKeyPairs_closure() {
    },
    PsbtGlobal_toJson_closure: function PsbtGlobal_toJson_closure() {
    },
    PsbtGlobalData: function PsbtGlobalData() {
    },
    PsbtGlobalUnsignedTransaction: function PsbtGlobalUnsignedTransaction(t0, t1, t2) {
      this.transaction = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtGlobalUnsignedTransaction_PsbtGlobalUnsignedTransaction$deserialize_closure: function PsbtGlobalUnsignedTransaction_PsbtGlobalUnsignedTransaction$deserialize_closure() {
    },
    PsbtGlobalExtendedPublicKey: function PsbtGlobalExtendedPublicKey(t0, t1, t2, t3, t4) {
      var _ = this;
      _.xPub = t0;
      _.fingerprint = t1;
      _.indexes = t2;
      _.type = t3;
      _.keyPair = t4;
    },
    PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey_closure: function PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey_closure(t0, t1, t2) {
      this.indexes = t0;
      this.xPub = t1;
      this.fingerprint = t2;
    },
    PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey__closure: function PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey__closure() {
    },
    PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey__closure0: function PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey__closure0() {
    },
    PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey$deserialize_closure: function PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey$deserialize_closure(t0) {
      this.indexesBytes = t0;
    },
    PsbtGlobalExtendedPublicKey_toJson_closure: function PsbtGlobalExtendedPublicKey_toJson_closure() {
    },
    PsbtGlobalTransactionVersion: function PsbtGlobalTransactionVersion(t0, t1, t2) {
      this.version = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtGlobalFallbackLocktime: function PsbtGlobalFallbackLocktime(t0, t1, t2) {
      this.locktime = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtGlobalInputCount: function PsbtGlobalInputCount(t0, t1, t2) {
      this.count = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtGlobalOutputCount: function PsbtGlobalOutputCount(t0, t1, t2) {
      this.count = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtGlobalTransactionModifiableFlags: function PsbtGlobalTransactionModifiableFlags(t0, t1, t2) {
      this.flags = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtGlobalSilentPaymentGlobalECDHShare: function PsbtGlobalSilentPaymentGlobalECDHShare(t0, t1, t2, t3) {
      var _ = this;
      _.scanKey = t0;
      _.share = t1;
      _.type = t2;
      _.keyPair = t3;
    },
    PsbtGlobalSilentPaymentGlobalDLEQProof: function PsbtGlobalSilentPaymentGlobalDLEQProof(t0, t1, t2, t3) {
      var _ = this;
      _.scanKey = t0;
      _.proof = t1;
      _.type = t2;
      _.keyPair = t3;
    },
    PsbtGlobalPSBTVersionNumber: function PsbtGlobalPSBTVersionNumber(t0, t1, t2) {
      this.version = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtGlobalPSBTVersionNumber_PsbtGlobalPSBTVersionNumber$deserialize_closure: function PsbtGlobalPSBTVersionNumber_PsbtGlobalPSBTVersionNumber$deserialize_closure(t0) {
      this.version = t0;
    },
    PsbtGlobalPSBTVersionNumber_PsbtGlobalPSBTVersionNumber$deserialize_closure0: function PsbtGlobalPSBTVersionNumber_PsbtGlobalPSBTVersionNumber$deserialize_closure0(t0) {
      this.version = t0;
    },
    PsbtGlobalProprietaryUseType: function PsbtGlobalProprietaryUseType(t0, t1, t2, t3, t4) {
      var _ = this;
      _.identifier = t0;
      _.subkeydata = t1;
      _.data = t2;
      _.type = t3;
      _.keyPair = t4;
    },
    PsbtGlobalUnknow: function PsbtGlobalUnknow(t0, t1) {
      this.type = t0;
      this.keyPair = t1;
    },
    PsbtInputTypes_find(flag) {
      var type = A.IterableHelper_firstWhereNullable(B.List_72z, new A.PsbtInputTypes_find_closure(flag), type$.PsbtInputTypes);
      if (type != null)
        return type;
      return B.PsbtInputTypes_aWK;
    },
    PsbtInput$_(entries, version) {
      var t1 = A._arrayInstanceType(entries);
      return new A.PsbtInput(version, A.List_List$unmodifiable(new A.MappedListIterable(entries, t1._eval$1("List<PsbtInputData>(1)")._as(new A.PsbtInput$__closure()), t1._eval$1("MappedListIterable<1,List<PsbtInputData>>")), type$.List_PsbtInputData));
    },
    PsbtInput_PsbtInput(entries, version) {
      var t2, t3, t4, _i, e, t5, t6, keys, t7, t8,
        t1 = type$.bool_Function_PsbtInputTypes._as(new A.PsbtInput_PsbtInput_closure(version));
      for (t2 = entries.length, t3 = type$.WhereIterator_PsbtInputTypes, t4 = type$.PsbtKey, _i = 0; _i < entries.length; entries.length === t2 || (0, A.throwConcurrentModificationError)(entries), ++_i) {
        e = entries[_i];
        t5 = J.getInterceptor$ax(e);
        t6 = t5.map$1$1(e, new A.PsbtInput_PsbtInput_closure0(), t4);
        keys = A.List_List$_of(t6, t6.$ti._eval$1("ListIterable.E"));
        if (A.LinkedHashSet_LinkedHashSet$from(keys, A._arrayInstanceType(keys)._precomputed1)._collection$_length !== keys.length)
          throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Input: Duplicate entry detected.", null));
        for (t6 = t5.get$iterator(e); t6.moveNext$0();) {
          t7 = t6.get$current().type;
          t8 = t7.allowedVersion;
          if (t8 == null)
            continue;
          if (version !== t8)
            throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Input: " + t7.psbtName + " is not allowed in PSBT version " + version.name + ".", null));
        }
        for (t6 = B.JSArray_methods.get$iterator(B.List_72z), t7 = new A.WhereIterator(t6, t1, t3); t7.moveNext$0();) {
          t8 = t6.get$current();
          t5.firstWhere$2$orElse(e, new A.PsbtInput_PsbtInput_closure1(t8), new A.PsbtInput_PsbtInput_closure2(t8, version));
        }
      }
      return A.PsbtInput$_(entries, version);
    },
    PsbtInput_PsbtInput$fromKeyPairs(keypairs, version) {
      var t1 = A._arrayInstanceType(keypairs),
        t2 = t1._eval$1("MappedListIterable<1,List<PsbtInputData>>");
      t1 = A.List_List$_of(new A.MappedListIterable(keypairs, t1._eval$1("List<PsbtInputData>(1)")._as(new A.PsbtInput_PsbtInput$fromKeyPairs_closure()), t2), t2._eval$1("ListIterable.E"));
      return A.PsbtInput_PsbtInput(t1, version);
    },
    PsbtInputData___deserialize_tearOff(keypair) {
      return A.PsbtInputData_PsbtInputData$deserialize(type$.PsbtKeyPair._as(keypair));
    },
    PsbtInputData_PsbtInputData$deserialize(keypair) {
      var bytes, amount, scriptLength, offset, script, _null = null,
        t1 = keypair.key,
        t2 = t1.type;
      switch (A.PsbtInputTypes_find(t2)) {
        case B.PsbtInputTypes_kAy:
          t1 = A.PsbtInputNonWitnessUtxo_PsbtInputNonWitnessUtxo$deserialize(keypair);
          break;
        case B.PsbtInputTypes_NZJ:
          if (t2 !== 1)
            A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT Witness UTXO type flag", _null));
          if (t1.extraData != null)
            A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT Witness UTXO key data.", _null));
          bytes = keypair.value.data;
          amount = A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(bytes, 0, 8), B.C_Endian0, false);
          scriptLength = A.IntUtils_decodeVarint(B.JSArray_methods.sublist$1(bytes, 8));
          t1 = scriptLength.item2;
          if (typeof t1 !== "number")
            return A.iae(t1);
          offset = 8 + t1;
          script = A.Script_Script$deserialize(B.JSArray_methods.sublist$2(bytes, offset, offset + scriptLength.item1));
          t1 = new A.PsbtInputWitnessUtxo(A.BigIntHelper_get_asUint64(amount), script, B.PsbtInputTypes_NZJ, keypair);
          break;
        case B.PsbtInputTypes_stM:
          t1 = A.PsbtInputPartialSig_PsbtInputPartialSig$deserialize(keypair);
          break;
        case B.PsbtInputTypes_yXA:
          t1 = A.PsbtInputSigHash_PsbtInputSigHash$deserialize(keypair);
          break;
        case B.PsbtInputTypes_Icn:
          t1 = A.PsbtInputRedeemScript_PsbtInputRedeemScript$deserialize(keypair);
          break;
        case B.PsbtInputTypes_6OA:
          t1 = A.PsbtInputWitnessScript_PsbtInputWitnessScript$deserialize(keypair);
          break;
        case B.PsbtInputTypes_Dje:
          t1 = A.PsbtInputBip32DerivationPath_PsbtInputBip32DerivationPath$deserialize(keypair);
          break;
        case B.PsbtInputTypes_N6D:
          t1 = A.PsbtInputFinalizedScriptSig_PsbtInputFinalizedScriptSig$deserialize(keypair);
          break;
        case B.PsbtInputTypes_T86:
          t1 = A.PsbtInputFinalizedScriptWitness_PsbtInputFinalizedScriptWitness$deserialize(keypair);
          break;
        case B.PsbtInputTypes_NDL:
          t1 = A.PsbtInputPorCommitments_PsbtInputPorCommitments$deserialize(keypair);
          break;
        case B.PsbtInputTypes_QB6:
          t1 = A.PsbtInputRipemd160_PsbtInputRipemd160$deserialize(keypair);
          break;
        case B.PsbtInputTypes_XkO:
          t1 = A.PsbtInputSha256_PsbtInputSha256$deserialize(keypair);
          break;
        case B.PsbtInputTypes_RiO:
          t1 = A.PsbtInputHash160_PsbtInputHash160$deserialize(keypair);
          break;
        case B.PsbtInputTypes_htP:
          t1 = A.PsbtInputHash256_PsbtInputHash256$deserialize(keypair);
          break;
        case B.PsbtInputTypes_JVk:
          t1 = A.PsbtInputPreviousTXID_PsbtInputPreviousTXID$deserialize(keypair);
          break;
        case B.PsbtInputTypes_lMe:
          t1 = A.PsbtInputSpentOutputIndex_PsbtInputSpentOutputIndex$deserialize(keypair);
          break;
        case B.PsbtInputTypes_r7v:
          t1 = A.PsbtInputSequenceNumber_PsbtInputSequenceNumber$deserialize(keypair);
          break;
        case B.PsbtInputTypes_4FU:
          t1 = A.PsbtInputRequiredTimeBasedLockTime_PsbtInputRequiredTimeBasedLockTime$deserialize(keypair);
          break;
        case B.PsbtInputTypes_rhP:
          t1 = A.PsbtInputRequiredHeightBasedLockTime_PsbtInputRequiredHeightBasedLockTime$deserialize(keypair);
          break;
        case B.PsbtInputTypes_Wq6:
          if (t2 !== 19)
            A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT Taproot Key Spend Signature type flag", _null));
          if (t1.extraData != null)
            A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT Taproot Key Spend Signature key data.", _null));
          t1 = keypair.value.data;
          if (!A.CryptoSignatureUtils_isValidSchnorrSignature(t1))
            A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT Taproot Key Spend Signature data.", _null));
          A.BytesUtils_validateListOfBytes(t1);
          t1 = new A.PsbtInputTaprootKeySpendSignature(A.List_List$unmodifiable(t1, type$.int), B.PsbtInputTypes_Wq6, keypair);
          break;
        case B.PsbtInputTypes_vjI:
          t1 = A.PsbtInputTaprootScriptSpendSignature_PsbtInputTaprootScriptSpendSignature$deserialize(keypair);
          break;
        case B.PsbtInputTypes_9aL:
          t1 = A.PsbtInputTaprootLeafScript_PsbtInputTaprootLeafScript$deserialize(keypair);
          break;
        case B.PsbtInputTypes_hTD:
          t1 = A.PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize(keypair);
          break;
        case B.PsbtInputTypes_2Rv:
          if (t2 !== 23)
            A.throwExpression(A.DartBitcoinPluginException$(string$.InvaliPTI, _null));
          if (t1.extraData != null)
            A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT Taproot Internal key key data.", _null));
          t1 = keypair.value.data;
          if (t1.length !== 32)
            A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT Taproot Internal Key data.", _null));
          A.BytesUtils_validateListOfBytes(t1);
          t1 = new A.PsbtInputTaprootInternalKey(A.List_List$unmodifiable(t1, type$.int), B.PsbtInputTypes_2Rv, keypair);
          break;
        case B.PsbtInputTypes_Xfr:
          if (t2 !== 24)
            A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT Taproot Merkle Root type flag", _null));
          if (t1.extraData != null)
            A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT Taproot Merkle Root key data.", _null));
          t1 = keypair.value.data;
          if (t1.length !== 32)
            A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT Taproot Merkle Root data.", _null));
          A.BytesUtils_validateListOfBytes(t1);
          t1 = new A.PsbtInputTaprootMerkleRoot(A.List_List$unmodifiable(t1, type$.int), B.PsbtInputTypes_Xfr, keypair);
          break;
        case B.PsbtInputTypes_Z4Y:
          t1 = A.PsbtInputMuSig2ParticipantPublicKeys_PsbtInputMuSig2ParticipantPublicKeys$deserialize(keypair);
          break;
        case B.PsbtInputTypes_mT2:
          t1 = A.PsbtInputMuSig2PublicNonce_PsbtInputMuSig2PublicNonce$deserialize(keypair);
          break;
        case B.PsbtInputTypes_Dni:
          t1 = A.PsbtInputMuSig2ParticipantPartialSignature_PsbtInputMuSig2ParticipantPartialSignature$deserialize(keypair);
          break;
        case B.PsbtInputTypes_2zv:
          t1 = A.PsbtInputSilentPaymentInputECDHShare_PsbtInputSilentPaymentInputECDHShare$deserialize(keypair);
          break;
        case B.PsbtInputTypes_aLR:
          t1 = A.PsbtInputSilentPaymentInputDLEQProof_PsbtInputSilentPaymentInputDLEQProof$deserialize(keypair);
          break;
        case B.PsbtInputTypes_gBp:
          t1 = A.PsbtInputProprietaryUseType_PsbtInputProprietaryUseType$deserialize(keypair);
          break;
        case B.PsbtInputTypes_aWK:
          t1 = new A.PsbtInputUnknow(B.PsbtInputTypes_aWK, keypair);
          break;
        default:
          t1 = _null;
      }
      return t1;
    },
    PsbtInputNonWitnessUtxo_PsbtInputNonWitnessUtxo$deserialize(keypair) {
      var transaction, exception,
        t1 = keypair.key;
      if (t1.type !== 0)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Non-Witness UTXO type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Non-Witness UTXO key data.", null));
      try {
        transaction = A.BtcTransaction_deserialize(keypair.value.data, true);
        return new A.PsbtInputNonWitnessUtxo(transaction, B.PsbtInputTypes_kAy, keypair);
      } catch (exception) {
        t1 = A.DartBitcoinPluginException$("Invalid PSBT Non-Witness UTXO data.", null);
        throw A.wrapException(t1);
      }
    },
    PsbtInputPartialSig_PsbtInputPartialSig$deserialize(keypair) {
      var mode, t2, publicKey, t3, exception,
        t1 = keypair.key;
      if (t1.type !== 2)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Partial Signature type flag.", null));
      t2 = keypair.value.data;
      if (A.CryptoSignatureUtils_isValidBitcoinDERSignature(t2) || A.CryptoSignatureUtils_isValidSchnorrSignature(t2))
        try {
          t1 = t1.extraData;
          mode = (t1 == null ? null : t1.length) === 33 ? B.PubKeyModes_compressed : B.PubKeyModes_uncompressed;
          t1.toString;
          publicKey = A.Secp256k1PublicKey_Secp256k1PublicKey$fromBytes(t1);
          A.BytesUtils_validateListOfBytes(t1);
          t3 = type$.int;
          A.List_List$unmodifiable(t1, t3);
          A.BytesUtils_validateListOfBytes(t2);
          t3 = A.List_List$unmodifiable(t2, t3);
          return new A.PsbtInputPartialSig(new A.ECPublic(publicKey), mode, t3, B.PsbtInputTypes_stM, keypair);
        } catch (exception) {
        }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Partial Signature data.", null));
    },
    PsbtInputSigHash_PsbtInputSigHash$deserialize(keypair) {
      var exception,
        t1 = keypair.key;
      if (t1.type !== 3)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT sighash type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT sighash type key data.", null));
      try {
        t1 = keypair.value.data;
        if (t1.length === 4) {
          t1 = A.IntHelper_get_asUint32(A.IntHelper_get_asUint32(A.IntUtils_fromBytes(t1, B.C_Endian0, false)));
          return new A.PsbtInputSigHash(t1, B.PsbtInputTypes_yXA, keypair);
        }
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT sighash type data.", null));
    },
    PsbtInputRedeemScript_PsbtInputRedeemScript$deserialize(keypair) {
      var redeemScript, exception,
        t1 = keypair.key;
      if (t1.type !== 4)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Redeem Script type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Redeem Script key data.", null));
      redeemScript = null;
      try {
        redeemScript = A.Script_Script$deserialize(keypair.value.data);
      } catch (exception) {
        t1 = A.DartBitcoinPluginException$("Invalid PSBT Redeem Script data.", null);
        throw A.wrapException(t1);
      }
      return new A.PsbtInputRedeemScript(redeemScript, B.PsbtInputTypes_Icn, keypair);
    },
    PsbtInputWitnessScript_PsbtInputWitnessScript$deserialize(keypair) {
      var witnessScript, exception,
        t1 = keypair.key;
      if (t1.type !== 5)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Witness Script type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Witness Script key data.", null));
      witnessScript = null;
      try {
        witnessScript = A.Script_Script$deserialize(keypair.value.data);
      } catch (exception) {
        t1 = A.DartBitcoinPluginException$("Invalid PSBT Witness Script data.", null);
        throw A.wrapException(t1);
      }
      return new A.PsbtInputWitnessScript(witnessScript, B.PsbtInputTypes_6OA, keypair);
    },
    PsbtInputBip32DerivationPath_PsbtInputBip32DerivationPath$deserialize(keypair) {
      var fingerPrint, indexesBytes, indexCount, bip32Indexes, t2, t3, t4, t5, exception,
        t1 = keypair.key;
      if (t1.type !== 6)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT BIP 32 Derivation Path type flag", null));
      t2 = keypair.value.data;
      t3 = t2.length;
      if (t3 < 4 || B.JSInt_methods.$mod(t3, 4) !== 0)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT BIP 32 Derivation Path fingerprint or bip32 index.", null));
      fingerPrint = B.JSArray_methods.sublist$2(t2, 0, 4);
      indexesBytes = B.JSArray_methods.sublist$1(t2, 4);
      indexCount = J.get$length$asx(indexesBytes) / 4 | 0;
      bip32Indexes = null;
      try {
        t2 = type$.Bip32KeyIndex;
        bip32Indexes = A.List_List$generate(indexCount, new A.PsbtInputBip32DerivationPath_PsbtInputBip32DerivationPath$deserialize_closure(indexesBytes), t2);
        if (J.get$length$asx(fingerPrint) === 4) {
          t3 = t1.extraData;
          t3 = A.Secp256k1PublicKey_isValidBytes(t3 == null ? A._setArrayType([], type$.JSArray_int) : t3);
        } else
          t3 = false;
        if (t3) {
          t3 = fingerPrint;
          t4 = bip32Indexes;
          t1 = t1.extraData;
          if (t1 == null)
            t1 = A._setArrayType([], type$.JSArray_int);
          A.BytesUtils_validateListOfBytes(t3);
          t5 = type$.int;
          t3 = A.List_List$unmodifiable(t3, t5);
          A.BytesUtils_validateListOfBytes(t1);
          t5 = A.List_List$unmodifiable(t1, t5);
          t2 = A.List_List$unmodifiable(t4, t2);
          return new A.PsbtInputBip32DerivationPath(t3, t2, t5, B.PsbtInputTypes_Dje, keypair);
        }
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid BIP 32 Derivation Path indexes.", null));
    },
    PsbtInputFinalizedScriptSig_PsbtInputFinalizedScriptSig$deserialize(keypair) {
      var finalizedScriptSig, exception,
        t1 = keypair.key;
      if (t1.type !== 7)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Finalized scriptSig type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Finalized scriptSig key data.", null));
      try {
        finalizedScriptSig = A.Script_Script$deserialize(keypair.value.data);
        return new A.PsbtInputFinalizedScriptSig(finalizedScriptSig, B.PsbtInputTypes_N6D, keypair);
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Finalized scriptSig data.", null));
    },
    PsbtInputFinalizedScriptWitness_PsbtInputFinalizedScriptWitness$deserialize(keypair) {
      var finalizedScriptWitness, exception,
        t1 = keypair.key;
      if (t1.type !== 8)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Finalized scriptWitness type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Finalized scriptWitness key data.", null));
      try {
        finalizedScriptWitness = A.TxWitnessInput_TxWitnessInput$deserialize(keypair.value.data);
        return new A.PsbtInputFinalizedScriptWitness(finalizedScriptWitness, B.PsbtInputTypes_T86, keypair);
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Finalized scriptWitness data.", null));
    },
    PsbtInputPorCommitments_PsbtInputPorCommitments$deserialize(keypair) {
      var message, exception,
        t1 = keypair.key;
      if (t1.type !== 9)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Proof-of-reserves commitment type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Proof-of-reserves commitment key data.", null));
      try {
        message = A.StringUtils_decode(keypair.value.data, false, B.StringEncoding_1);
        return new A.PsbtInputPorCommitments(message, B.PsbtInputTypes_NDL, keypair);
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Proof-of-reserves commitment data.", null));
    },
    PsbtInputRipemd160_PsbtInputRipemd160$deserialize(keypair) {
      var t2, t3,
        t1 = keypair.key;
      if (t1.type !== 10)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT RIPEMD160 preimage type flag", null));
      t1 = t1.extraData;
      t2 = t1 == null;
      if ((t2 ? null : t1.length) === 20) {
        if (t2)
          t1 = A._setArrayType([], type$.JSArray_int);
        t2 = keypair.value.data;
        A.BytesUtils_validateListOfBytes(t2);
        t3 = type$.int;
        t2 = A.List_List$unmodifiable(t2, t3);
        A.BytesUtils_validateListOfBytes(t1);
        return new A.PsbtInputRipemd160(t2, A.List_List$unmodifiable(t1, t3), B.PsbtInputTypes_QB6, keypair);
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT RIPEMD160 preimage date", null));
    },
    PsbtInputSha256_PsbtInputSha256$deserialize(keypair) {
      var t2, t3,
        t1 = keypair.key;
      if (t1.type !== 11)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT SHA256 preimage type flag", null));
      t1 = t1.extraData;
      if ((t1 == null ? null : t1.length) === 32) {
        t1.toString;
        t2 = keypair.value.data;
        A.BytesUtils_validateListOfBytes(t2);
        t3 = type$.int;
        t2 = A.List_List$unmodifiable(t2, t3);
        A.BytesUtils_validateListOfBytes(t1);
        return new A.PsbtInputSha256(t2, A.List_List$unmodifiable(t1, t3), B.PsbtInputTypes_XkO, keypair);
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT SHA256 preimage data", null));
    },
    PsbtInputHash160_PsbtInputHash160$deserialize(keypair) {
      var t2, t3,
        _s39_ = "Invalid PSBT HASH160 preimage type flag",
        t1 = keypair.key;
      if (t1.type !== 12)
        throw A.wrapException(A.DartBitcoinPluginException$(_s39_, null));
      t1 = t1.extraData;
      if ((t1 == null ? null : t1.length) === 20) {
        t1.toString;
        t2 = keypair.value.data;
        A.BytesUtils_validateListOfBytes(t2);
        t3 = type$.int;
        t2 = A.List_List$unmodifiable(t2, t3);
        A.BytesUtils_validateListOfBytes(t1);
        return new A.PsbtInputHash160(t2, A.List_List$unmodifiable(t1, t3), B.PsbtInputTypes_RiO, keypair);
      }
      throw A.wrapException(A.DartBitcoinPluginException$(_s39_, null));
    },
    PsbtInputHash256_PsbtInputHash256$deserialize(keypair) {
      var t2, t3,
        t1 = keypair.key;
      if (t1.type !== 13)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT HASH256 preimage type flag", null));
      t1 = t1.extraData;
      t2 = t1 == null;
      if ((t2 ? null : t1.length) === 32) {
        if (t2)
          t1 = A._setArrayType([], type$.JSArray_int);
        t2 = keypair.value.data;
        A.BytesUtils_validateListOfBytes(t2);
        t3 = type$.int;
        t2 = A.List_List$unmodifiable(t2, t3);
        A.BytesUtils_validateListOfBytes(t1);
        return new A.PsbtInputHash256(t2, A.List_List$unmodifiable(t1, t3), B.PsbtInputTypes_htP, keypair);
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT HASH256 preimage data.", null));
    },
    PsbtInputPreviousTXID_PsbtInputPreviousTXID$deserialize(keypair) {
      var _s36_ = "Invalid PSBT Previous TXID key data.",
        t1 = keypair.key;
      if (t1.type !== 14)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Previous TXID type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$(_s36_, null));
      t1 = keypair.value.data;
      if (t1.length === 32) {
        A.BytesUtils_validateListOfBytes(t1);
        return new A.PsbtInputPreviousTXID(A.List_List$unmodifiable(t1, type$.int), B.PsbtInputTypes_JVk, keypair);
      }
      throw A.wrapException(A.DartBitcoinPluginException$(_s36_, null));
    },
    PsbtInputSpentOutputIndex_PsbtInputSpentOutputIndex(index) {
      var t1 = new A.PsbtInputSpentOutputIndex_PsbtInputSpentOutputIndex_closure(index).call$0();
      return new A.PsbtInputSpentOutputIndex(A.IntHelper_get_asUint32(index), B.PsbtInputTypes_lMe, t1);
    },
    PsbtInputSpentOutputIndex_PsbtInputSpentOutputIndex$deserialize(keypair) {
      var exception,
        t1 = keypair.key;
      if (t1.type !== 15)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Spent Output Index type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Spent Output Index key data.", null));
      try {
        t1 = keypair.value.data;
        if (t1.length === 4) {
          t1 = A.PsbtInputSpentOutputIndex_PsbtInputSpentOutputIndex(A.IntHelper_get_asUint32(A.IntUtils_fromBytes(t1, B.C_Endian0, false)));
          return t1;
        }
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Spent Output Index data.", null));
    },
    PsbtInputSequenceNumber_PsbtInputSequenceNumber(sequence) {
      var t1 = new A.PsbtInputSequenceNumber_PsbtInputSequenceNumber_closure(sequence).call$0();
      return new A.PsbtInputSequenceNumber(A.IntHelper_get_asUint32(sequence), B.PsbtInputTypes_r7v, t1);
    },
    PsbtInputSequenceNumber_PsbtInputSequenceNumber$deserialize(keypair) {
      var exception,
        t1 = keypair.key;
      if (t1.type !== 16)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Sequence Number type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Sequence Number key data.", null));
      try {
        t1 = keypair.value.data;
        if (t1.length === 4) {
          t1 = A.PsbtInputSequenceNumber_PsbtInputSequenceNumber(A.IntHelper_get_asUint32(A.IntUtils_fromBytes(t1, B.C_Endian0, false)));
          return t1;
        }
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Sequence Number data.", null));
    },
    PsbtInputRequiredTimeBasedLockTime_PsbtInputRequiredTimeBasedLockTime$deserialize(keypair) {
      var locktime, exception, _null = null,
        _s47_ = "Invalid PSBT Required Time-based Locktime data.",
        t1 = keypair.key;
      if (t1.type !== 17)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Required Time-based Locktime type flag", _null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Required Time-based Locktime key data.", _null));
      try {
        t1 = keypair.value.data;
        if (t1.length === 4) {
          locktime = A.IntHelper_get_asUint32(A.IntUtils_fromBytes(t1, B.C_Endian0, false));
          t1 = locktime;
          if (typeof t1 !== "number")
            return t1.$lt();
          if (!(t1 < 500000000)) {
            t1 = locktime;
            if (typeof t1 !== "number")
              return t1.$gt();
            t1 = t1 > 4294967295;
          } else
            t1 = true;
          if (t1) {
            t1 = A.DartBitcoinPluginException$(_s47_, _null);
            throw A.wrapException(t1);
          }
          t1 = A.IntHelper_get_asUint32(locktime);
          return new A.PsbtInputRequiredTimeBasedLockTime(t1, B.PsbtInputTypes_4FU, keypair);
        }
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$(_s47_, _null));
    },
    PsbtInputRequiredHeightBasedLockTime_PsbtInputRequiredHeightBasedLockTime$deserialize(keypair) {
      var height, exception, _null = null,
        _s49_ = "Invalid PSBT Required Height-based Locktime data.",
        t1 = keypair.key;
      if (t1.type !== 18)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Required Height-based Locktime type flag", _null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Required Height-based Locktime key data.", _null));
      try {
        t1 = keypair.value.data;
        if (t1.length === 4) {
          height = A.IntHelper_get_asUint32(A.IntUtils_fromBytes(t1, B.C_Endian0, false));
          if (!J.get$isNegative$n(height)) {
            t1 = height;
            if (typeof t1 !== "number")
              return t1.$ge();
            t1 = t1 >= 500000000;
          } else
            t1 = true;
          if (t1) {
            t1 = A.DartBitcoinPluginException$(_s49_, _null);
            throw A.wrapException(t1);
          }
          t1 = A.IntHelper_get_asUint32(height);
          return new A.PsbtInputRequiredHeightBasedLockTime(t1, B.PsbtInputTypes_rhP, keypair);
        }
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$(_s49_, _null));
    },
    PsbtInputTaprootScriptSpendSignature_PsbtInputTaprootScriptSpendSignature$deserialize(keypair) {
      var signature, t2, t3,
        t1 = keypair.key;
      if (t1.type !== 20)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Taproot Script Spend Signature type flag", null));
      signature = keypair.value.data;
      t1 = t1.extraData;
      if ((t1 == null ? null : t1.length) === 64 && A.CryptoSignatureUtils_isValidSchnorrSignature(signature)) {
        t1.toString;
        t2 = B.JSArray_methods.sublist$2(t1, 0, 32);
        t1 = B.JSArray_methods.sublist$1(t1, 32);
        A.BytesUtils_validateListOfBytes(t2);
        t3 = type$.int;
        t2 = A.List_List$unmodifiable(t2, t3);
        A.BytesUtils_validateListOfBytes(t1);
        t1 = A.List_List$unmodifiable(t1, t3);
        A.BytesUtils_validateListOfBytes(signature);
        return new A.PsbtInputTaprootScriptSpendSignature(t2, t1, A.List_List$unmodifiable(signature, t3), B.PsbtInputTypes_vjI, keypair);
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Taproot Script Spend Signature data.", null));
    },
    PsbtInputTaprootLeafScript_PsbtInputTaprootLeafScript$deserialize(keypair) {
      var script, version, t2, path, t3, t4, t5, t6, t7, exception, _null = null,
        t1 = keypair.key;
      if (t1.type !== 21)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Taproot Leaf Script type flag", _null));
      t1 = t1.extraData;
      if (t1 == null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Taproot Leaf Script key data.", _null));
      try {
        t2 = keypair.value.data;
        script = A.Script_Script$deserialize(B.JSArray_methods.sublist$2(t2, 0, t2.length - 1));
        version = B.JSArray_methods.get$last(t2);
        t2 = t1.length;
        if (t2 < 33)
          A.throwExpression(A.DartBitcoinPluginException$("Invalid control block bytes length.", _null));
        path = B.JSArray_methods.sublist$1(t1, 33);
        if (B.JSInt_methods.$mod(path.length, 32) !== 0)
          A.throwExpression(A.DartBitcoinPluginException$("Invalid control block: too short (must be at least 33 bytes, got " + t2 + ")", _null));
        t3 = B.JSArray_methods.sublist$2(t1, 1, 33);
        if (0 >= t2)
          return A.ioore(t1, 0);
        t1 = t1[0];
        t2 = path.length;
        t2 = t2 !== 0 && B.JSInt_methods.$mod(t2, 32) !== 0;
        if (t2)
          A.throwExpression(A.DartBitcoinPluginException$("Invalid Merkle path: Length (" + path.length + ") is not a multiple of 32 bytes.", _null));
        t2 = t3.length;
        if (t2 !== 32)
          A.throwExpression(A.DartBitcoinPluginException$("Invalid x-only public key length: Expected 32 bytes, got " + t2 + " bytes.", _null));
        A.BytesUtils_validateListOfBytes(path);
        t2 = type$.int;
        t4 = A.List_List$unmodifiable(path, t2);
        A.BytesUtils_validateListOfBytes(t3);
        t3 = A.List_List$unmodifiable(t3, t2);
        t5 = type$.JSArray_int;
        t1 = A._setArrayType([t1], t5);
        B.JSArray_methods.addAll$1(t1, t3);
        B.JSArray_methods.addAll$1(t1, t4);
        t4 = script;
        t3 = version;
        A.BytesUtils_validateListOfBytes(t1);
        t1 = A.List_List$unmodifiable(t1, t2);
        t6 = A.IntHelper_get_asUint8(t3);
        t5 = A._setArrayType([t3], t5);
        t3 = A.ListHelper_clone(t4._scriptBytes, t2);
        t7 = A.List_List$_of(A.IntUtils_encodeVarint(t3.length), t2);
        B.JSArray_methods.addAll$1(t7, t3);
        B.JSArray_methods.addAll$1(t5, t7);
        t3 = A.List_List$_of(B.List_6Je, t2);
        B.JSArray_methods.addAll$1(t3, B.List_6Je);
        B.JSArray_methods.addAll$1(t3, t5);
        t3 = A.SHA256_hash(t3);
        A.BytesUtils_validateListOfBytes(t3);
        A.List_List$unmodifiable(t3, t2);
        return new A.PsbtInputTaprootLeafScript(t1, t4, t6, B.PsbtInputTypes_9aL, keypair);
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Taproot Leaf Script data.", _null));
    },
    PsbtInputTaprootKeyBip32DerivationPath$_(fingerprint, indexes, keyPair, leavesHashes, xOnlyPubKey) {
      var t2, t3, t4,
        t1 = A._arrayInstanceType(leavesHashes);
      t1 = A.List_List$unmodifiable(new A.MappedListIterable(leavesHashes, t1._eval$1("List<int>(1)")._as(new A.PsbtInputTaprootKeyBip32DerivationPath$__closure()), t1._eval$1("MappedListIterable<1,List<int>>")), type$.List_int);
      A.BytesUtils_validateListOfBytes(fingerprint);
      t2 = type$.int;
      t3 = A.List_List$unmodifiable(fingerprint, t2);
      t4 = A.List_List$unmodifiable(indexes, type$.Bip32KeyIndex);
      A.BytesUtils_validateListOfBytes(xOnlyPubKey);
      return new A.PsbtInputTaprootKeyBip32DerivationPath(A.List_List$unmodifiable(xOnlyPubKey, t2), t1, t3, t4, B.PsbtInputTypes_hTD, keyPair);
    },
    PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize(keypair) {
      var vlen, $length, data, leavesHashes, fingerprintOffset, fingerprint, indexesBytes, inIndexesCount, indexes, t2, exception,
        t1 = keypair.key;
      if (t1.type !== 22)
        throw A.wrapException(A.DartBitcoinPluginException$(string$.InvaliPTK, null));
      try {
        t2 = keypair.value.data;
        vlen = A.IntUtils_decodeVarint(t2);
        $length = vlen.item1;
        data = B.JSArray_methods.sublist$1(t2, vlen.item2);
        leavesHashes = A.List_List$generate($length, new A.PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize_closure(data), type$.List_int);
        fingerprintOffset = J.get$length$asx(leavesHashes) * 32;
        t2 = fingerprintOffset;
        if (typeof t2 !== "number")
          return t2.$add();
        fingerprint = J.sublist$2$ax(data, fingerprintOffset, t2 + 4);
        t2 = fingerprintOffset;
        if (typeof t2 !== "number")
          return t2.$add();
        indexesBytes = J.sublist$1$ax(data, t2 + 4);
        if (B.JSInt_methods.$mod(J.get$length$asx(indexesBytes), 4) === 0) {
          inIndexesCount = J.get$length$asx(indexesBytes) / 4 | 0;
          indexes = A.List_List$generate(inIndexesCount, new A.PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize_closure0(indexesBytes), type$.Bip32KeyIndex);
          if (J.get$length$asx(fingerprint) === 4) {
            t2 = t1.extraData;
            t2 = (t2 == null ? null : t2.length) === 32 && J.every$1$ax(leavesHashes, new A.PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize_closure1());
          } else
            t2 = false;
          if (t2) {
            t1 = t1.extraData;
            t1.toString;
            t1 = A.PsbtInputTaprootKeyBip32DerivationPath$_(fingerprint, indexes, keypair, leavesHashes, t1);
            return t1;
          }
        }
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$(string$.InvaliT, null));
    },
    PsbtInputMuSig2ParticipantPublicKeys_PsbtInputMuSig2ParticipantPublicKeys$deserialize(keypair) {
      var pubKeysData, pubkeysLength, pubKeys, i, offset, key, t2, t3, t4, t5, result, coords, publicKey, exception, _null = null,
        t1 = keypair.key;
      if (t1.type !== 26)
        throw A.wrapException(A.DartBitcoinPluginException$(string$.InvaliPMt, _null));
      t1 = t1.extraData;
      if ((t1 == null ? _null : t1.length) === 33)
        try {
          pubKeysData = keypair.value.data;
          if (B.JSInt_methods.$mod(J.get$length$asx(pubKeysData), 33) === 0) {
            pubkeysLength = J.get$length$asx(pubKeysData) / 33 | 0;
            pubKeys = A._setArrayType([], type$.JSArray_ECPublic);
            i = 0;
            t2 = type$.int;
            t3 = type$.JSArray_BigInt;
            while (true) {
              t4 = i;
              t5 = pubkeysLength;
              if (typeof t4 !== "number")
                return t4.$lt();
              if (typeof t5 !== "number")
                return A.iae(t5);
              if (!(t4 < t5))
                break;
              t4 = i;
              if (typeof t4 !== "number")
                return t4.$mul();
              offset = t4 * 33;
              t4 = offset;
              if (typeof t4 !== "number")
                return t4.$add();
              t4 = J.sublist$2$ax(pubKeysData, offset, t4 + 33);
              A.BytesUtils_validateListOfBytes(t4);
              result = A.List_List$from(t4, false, t2);
              result.$flags = 3;
              key = result;
              t4 = $.$get$Curves_curveSecp256k1();
              coords = A.AbstractPoint_fromBytes(t4, key);
              coords = A._setArrayType([coords.item1, coords.item2, $.$get$_BigIntImpl_one()], t3);
              J.add$1$ax(pubKeys, new A.ECPublic(new A.Secp256k1PublicKey(A.ECDSAPublicKey_ECDSAPublicKey($.$get$Curves_generatorSecp256k1(), new A.ProjectiveECCPoint(t4, _null, false, B.List_empty0, coords)))));
              t4 = i;
              if (typeof t4 !== "number")
                return t4.$add();
              i = t4 + 1;
            }
            t1.toString;
            publicKey = A.Secp256k1PublicKey_Secp256k1PublicKey$fromBytes(t1);
            t1 = A.List_List$unmodifiable(pubKeys, type$.ECPublic);
            return new A.PsbtInputMuSig2ParticipantPublicKeys(new A.ECPublic(publicKey), t1, B.PsbtInputTypes_Z4Y, keypair);
          }
        } catch (exception) {
        }
      throw A.wrapException(A.DartBitcoinPluginException$(string$.InvaliPMd, _null));
    },
    PsbtInputMuSig2PublicNonce_PsbtInputMuSig2PublicNonce$deserialize(keypair) {
      var publicKey, plainPublicKey, hash, t2, publicKey0, exception, _null = null,
        t1 = keypair.key;
      if (t1.type !== 27)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT MuSig2 Public Nonce type flag", _null));
      t1 = t1.extraData;
      t2 = t1 == null;
      if ((t2 ? _null : t1.length) !== 66)
        t2 = (t2 ? _null : t1.length) === 98 && keypair.value.data.length === 66;
      else
        t2 = true;
      if (t2)
        try {
          t1.toString;
          publicKey = B.JSArray_methods.sublist$2(t1, 0, 33);
          plainPublicKey = B.JSArray_methods.sublist$2(t1, 33, 66);
          hash = t1.length === 66 ? _null : B.JSArray_methods.sublist$1(t1, 66);
          t1 = false;
          if (J.get$length$asx(publicKey) === 33)
            if (A.Secp256k1PublicKey_isValidBytes(publicKey))
              if (J.get$length$asx(plainPublicKey) === 33)
                if (A.Secp256k1PublicKey_isValidBytes(plainPublicKey))
                  t1 = (hash == null || J.get$length$asx(hash) === 32) && keypair.value.data.length === 66;
          if (t1) {
            publicKey = A.Secp256k1PublicKey_Secp256k1PublicKey$fromBytes(publicKey);
            publicKey0 = A.Secp256k1PublicKey_Secp256k1PublicKey$fromBytes(plainPublicKey);
            t1 = hash;
            t2 = keypair.value.data;
            if (t1 == null)
              t1 = _null;
            else {
              A.BytesUtils_validateListOfBytes(t1);
              t1 = A.List_List$unmodifiable(t1, type$.int);
            }
            A.BytesUtils_validateListOfBytes(t2);
            t2 = A.List_List$unmodifiable(t2, type$.int);
            return new A.PsbtInputMuSig2PublicNonce(new A.ECPublic(publicKey), new A.ECPublic(publicKey0), t1, t2, B.PsbtInputTypes_mT2, keypair);
          }
        } catch (exception) {
        }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT MuSig2 Public Nonce data", _null));
    },
    PsbtInputMuSig2ParticipantPartialSignature_PsbtInputMuSig2ParticipantPartialSignature$deserialize(keypair) {
      var publicKey, plainPublicKey, hash, t2, t3, publicKey0, exception, _null = null,
        t1 = keypair.key;
      if (t1.type !== 28)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT MuSig2 Participant Partial Signature type flag", _null));
      t1 = t1.extraData;
      t2 = t1 == null;
      if ((t2 ? _null : t1.length) !== 66) {
        t3 = (t2 ? _null : t1.length) === 98;
        t2 = t3;
      } else
        t2 = true;
      if (t2)
        try {
          t1.toString;
          publicKey = B.JSArray_methods.sublist$2(t1, 0, 33);
          plainPublicKey = B.JSArray_methods.sublist$2(t1, 33, 66);
          hash = t1.length === 66 ? _null : B.JSArray_methods.sublist$1(t1, 66);
          t1 = false;
          if (J.get$length$asx(publicKey) === 33)
            if (A.Secp256k1PublicKey_isValidBytes(publicKey))
              if (J.get$length$asx(plainPublicKey) === 33)
                if (A.Secp256k1PublicKey_isValidBytes(plainPublicKey))
                  t1 = (hash == null || J.get$length$asx(hash) === 32) && keypair.value.data.length === 32;
          if (t1) {
            publicKey = A.Secp256k1PublicKey_Secp256k1PublicKey$fromBytes(publicKey);
            publicKey0 = A.Secp256k1PublicKey_Secp256k1PublicKey$fromBytes(plainPublicKey);
            t1 = hash;
            t2 = keypair.value.data;
            if (t1 == null)
              t1 = _null;
            else {
              A.BytesUtils_validateListOfBytes(t1);
              t1 = A.List_List$unmodifiable(t1, type$.int);
            }
            A.BytesUtils_validateListOfBytes(t2);
            t2 = A.List_List$unmodifiable(t2, type$.int);
            return new A.PsbtInputMuSig2ParticipantPartialSignature(new A.ECPublic(publicKey), new A.ECPublic(publicKey0), t1, t2, B.PsbtInputTypes_Dni, keypair);
          }
        } catch (exception) {
        }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT MuSig2 Participant Partial Signature data", _null));
    },
    PsbtInputSilentPaymentInputECDHShare_PsbtInputSilentPaymentInputECDHShare$deserialize(keypair) {
      var t2, t3,
        t1 = keypair.key;
      if (t1.type !== 29)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Silent Payment Input ECDH Share type flag", null));
      t1 = t1.extraData;
      t2 = t1 == null;
      if ((t2 ? null : t1.length) === 33 && keypair.value.data.length === 33) {
        if (t2)
          t1 = A._setArrayType([], type$.JSArray_int);
        t2 = keypair.value.data;
        A.BytesUtils_validateListOfBytes(t1);
        t3 = type$.int;
        t1 = A.List_List$unmodifiable(t1, t3);
        A.BytesUtils_validateListOfBytes(t2);
        return new A.PsbtInputSilentPaymentInputECDHShare(t1, A.List_List$unmodifiable(t2, t3), B.PsbtInputTypes_2zv, keypair);
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Silent Payment Input ECDH Share type", null));
    },
    PsbtInputSilentPaymentInputDLEQProof_PsbtInputSilentPaymentInputDLEQProof$deserialize(keypair) {
      var t2, t3,
        t1 = keypair.key;
      if (t1.type !== 30)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Silent Payment Input DLEQ Proof type flag", null));
      t1 = t1.extraData;
      if ((t1 == null ? null : t1.length) === 33 && keypair.value.data.length === 64) {
        t1.toString;
        t2 = keypair.value.data;
        A.BytesUtils_validateListOfBytes(t1);
        t3 = type$.int;
        t1 = A.List_List$unmodifiable(t1, t3);
        A.BytesUtils_validateListOfBytes(t2);
        return new A.PsbtInputSilentPaymentInputDLEQProof(t1, A.List_List$unmodifiable(t2, t3), B.PsbtInputTypes_aLR, keypair);
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Silent Payment Input DLEQ Proof data", null));
    },
    PsbtInputProprietaryUseType_PsbtInputProprietaryUseType$deserialize(keypair) {
      var keyBytes, identifierSize, identifier, subtypeOffset, subkeydata, t2, t3, t4, exception,
        t1 = keypair.key;
      if (t1.type !== 252)
        throw A.wrapException(A.DartBitcoinPluginException$(string$.InvaliPP, null));
      try {
        t1 = t1.extraData;
        t1.toString;
        keyBytes = t1;
        identifierSize = A.IntUtils_decodeVarint(keyBytes);
        t1 = identifierSize.item2;
        t2 = identifierSize.item1;
        t3 = identifierSize.item2;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t3 !== "number")
          return A.iae(t3);
        identifier = J.sublist$2$ax(keyBytes, t1, t2 + t3);
        t3 = identifierSize.item1;
        t2 = identifierSize.item2;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t2 !== "number")
          return A.iae(t2);
        subtypeOffset = t3 + t2;
        subkeydata = J.sublist$1$ax(keyBytes, subtypeOffset);
        t2 = identifier;
        t3 = subkeydata;
        t1 = keypair.value.data;
        A.BytesUtils_validateListOfBytes(t2);
        t4 = type$.int;
        t2 = A.List_List$unmodifiable(t2, t4);
        A.BytesUtils_validateListOfBytes(t3);
        t3 = A.List_List$unmodifiable(t3, t4);
        A.BytesUtils_validateListOfBytes(t1);
        t4 = A.List_List$unmodifiable(t1, t4);
        return new A.PsbtInputProprietaryUseType(t2, t3, t4, B.PsbtInputTypes_gBp, keypair);
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Proprietary Use Type data", null));
    },
    PsbtInputTypes: function PsbtInputTypes(t0, t1, t2, t3, t4) {
      var _ = this;
      _.psbtName = t0;
      _.required = t1;
      _.allowedVersion = t2;
      _.flag = t3;
      _._name = t4;
    },
    PsbtInputTypes_find_closure: function PsbtInputTypes_find_closure(t0) {
      this.flag = t0;
    },
    PsbtInput: function PsbtInput(t0, t1) {
      this.version = t0;
      this._inputs$_entries = t1;
    },
    PsbtInput$__closure: function PsbtInput$__closure() {
    },
    PsbtInput_PsbtInput_closure: function PsbtInput_PsbtInput_closure(t0) {
      this.version = t0;
    },
    PsbtInput_PsbtInput_closure0: function PsbtInput_PsbtInput_closure0() {
    },
    PsbtInput_PsbtInput_closure1: function PsbtInput_PsbtInput_closure1(t0) {
      this.i = t0;
    },
    PsbtInput_PsbtInput_closure2: function PsbtInput_PsbtInput_closure2(t0, t1) {
      this.i = t0;
      this.version = t1;
    },
    PsbtInput_PsbtInput$fromKeyPairs_closure: function PsbtInput_PsbtInput$fromKeyPairs_closure() {
    },
    PsbtInput_getInput_closure: function PsbtInput_getInput_closure(t0) {
      this.type = t0;
    },
    PsbtInput_getInputs_closure: function PsbtInput_getInputs_closure(t0) {
      this.type = t0;
    },
    PsbtInput_toJson_closure: function PsbtInput_toJson_closure() {
    },
    PsbtInput_toJson__closure: function PsbtInput_toJson__closure() {
    },
    PsbtInput_toKeyPairs_closure: function PsbtInput_toKeyPairs_closure() {
    },
    PsbtInput_toKeyPairs__closure: function PsbtInput_toKeyPairs__closure() {
    },
    PsbtInput_clone_closure: function PsbtInput_clone_closure() {
    },
    PsbtInputData: function PsbtInputData() {
    },
    PsbtInputNonWitnessUtxo: function PsbtInputNonWitnessUtxo(t0, t1, t2) {
      this.transaction = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtInputWitnessUtxo: function PsbtInputWitnessUtxo(t0, t1, t2, t3) {
      var _ = this;
      _.amount = t0;
      _.scriptPubKey = t1;
      _.type = t2;
      _.keyPair = t3;
    },
    PsbtInputPartialSig: function PsbtInputPartialSig(t0, t1, t2, t3, t4) {
      var _ = this;
      _.publicKey = t0;
      _.mode = t1;
      _.signature = t2;
      _.type = t3;
      _.keyPair = t4;
    },
    PsbtInputSigHash: function PsbtInputSigHash(t0, t1, t2) {
      this.sighash = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtInputRedeemScript: function PsbtInputRedeemScript(t0, t1, t2) {
      this.redeemScript = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtInputWitnessScript: function PsbtInputWitnessScript(t0, t1, t2) {
      this.witnessScript = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtInputBip32DerivationPath: function PsbtInputBip32DerivationPath(t0, t1, t2, t3, t4) {
      var _ = this;
      _.fingerprint = t0;
      _.indexes = t1;
      _.publicKey = t2;
      _.type = t3;
      _.keyPair = t4;
    },
    PsbtInputBip32DerivationPath_PsbtInputBip32DerivationPath$deserialize_closure: function PsbtInputBip32DerivationPath_PsbtInputBip32DerivationPath$deserialize_closure(t0) {
      this.indexesBytes = t0;
    },
    PsbtInputBip32DerivationPath_toJson_closure: function PsbtInputBip32DerivationPath_toJson_closure() {
    },
    PsbtInputFinalizedScriptSig: function PsbtInputFinalizedScriptSig(t0, t1, t2) {
      this.finalizedScriptSig = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtInputFinalizedScriptWitness: function PsbtInputFinalizedScriptWitness(t0, t1, t2) {
      this.finalizedScriptWitness = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtInputPorCommitments: function PsbtInputPorCommitments(t0, t1, t2) {
      this.commitmentMessage = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtInputRipemd160: function PsbtInputRipemd160(t0, t1, t2, t3) {
      var _ = this;
      _.preimage = t0;
      _.hash = t1;
      _.type = t2;
      _.keyPair = t3;
    },
    PsbtInputSha256: function PsbtInputSha256(t0, t1, t2, t3) {
      var _ = this;
      _.preimage = t0;
      _.hash = t1;
      _.type = t2;
      _.keyPair = t3;
    },
    PsbtInputHash160: function PsbtInputHash160(t0, t1, t2, t3) {
      var _ = this;
      _.preimage = t0;
      _.hash = t1;
      _.type = t2;
      _.keyPair = t3;
    },
    PsbtInputHash256: function PsbtInputHash256(t0, t1, t2, t3) {
      var _ = this;
      _.preimage = t0;
      _.hash = t1;
      _.type = t2;
      _.keyPair = t3;
    },
    PsbtInputPreviousTXID: function PsbtInputPreviousTXID(t0, t1, t2) {
      this.txId = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtInputSpentOutputIndex: function PsbtInputSpentOutputIndex(t0, t1, t2) {
      this.index = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtInputSpentOutputIndex_PsbtInputSpentOutputIndex_closure: function PsbtInputSpentOutputIndex_PsbtInputSpentOutputIndex_closure(t0) {
      this.index = t0;
    },
    PsbtInputSequenceNumber: function PsbtInputSequenceNumber(t0, t1, t2) {
      this.sequence = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtInputSequenceNumber_PsbtInputSequenceNumber_closure: function PsbtInputSequenceNumber_PsbtInputSequenceNumber_closure(t0) {
      this.sequence = t0;
    },
    PsbtInputRequiredTimeBasedLockTime: function PsbtInputRequiredTimeBasedLockTime(t0, t1, t2) {
      this.locktime = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtInputRequiredHeightBasedLockTime: function PsbtInputRequiredHeightBasedLockTime(t0, t1, t2) {
      this.height = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtInputDataSignature: function PsbtInputDataSignature() {
    },
    PsbtInputTaprootKeySpendSignature: function PsbtInputTaprootKeySpendSignature(t0, t1, t2) {
      this.signature = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtInputTaprootScriptSpendSignature: function PsbtInputTaprootScriptSpendSignature(t0, t1, t2, t3, t4) {
      var _ = this;
      _.xOnlyPubKey = t0;
      _.leafHash = t1;
      _.signature = t2;
      _.type = t3;
      _.keyPair = t4;
    },
    PsbtInputTaprootLeafScript: function PsbtInputTaprootLeafScript(t0, t1, t2, t3, t4) {
      var _ = this;
      _.controllBlock = t0;
      _.script = t1;
      _.leafVersion = t2;
      _.type = t3;
      _.keyPair = t4;
    },
    PsbtInputTaprootKeyBip32DerivationPath: function PsbtInputTaprootKeyBip32DerivationPath(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.xOnlyPubKey = t0;
      _.leavesHashes = t1;
      _.fingerprint = t2;
      _.indexes = t3;
      _.type = t4;
      _.keyPair = t5;
    },
    PsbtInputTaprootKeyBip32DerivationPath$__closure: function PsbtInputTaprootKeyBip32DerivationPath$__closure() {
    },
    PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize_closure: function PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize_closure(t0) {
      this.data = t0;
    },
    PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize_closure0: function PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize_closure0(t0) {
      this.indexesBytes = t0;
    },
    PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize_closure1: function PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize_closure1() {
    },
    PsbtInputTaprootKeyBip32DerivationPath_toJson_closure: function PsbtInputTaprootKeyBip32DerivationPath_toJson_closure() {
    },
    PsbtInputTaprootKeyBip32DerivationPath_toJson_closure0: function PsbtInputTaprootKeyBip32DerivationPath_toJson_closure0() {
    },
    PsbtInputTaprootInternalKey: function PsbtInputTaprootInternalKey(t0, t1, t2) {
      this.xOnlyPubKey = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtInputTaprootMerkleRoot: function PsbtInputTaprootMerkleRoot(t0, t1, t2) {
      this.hash = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtInputMuSig2ParticipantPublicKeys: function PsbtInputMuSig2ParticipantPublicKeys(t0, t1, t2, t3) {
      var _ = this;
      _.aggregatePubKey = t0;
      _.pubKeys = t1;
      _.type = t2;
      _.keyPair = t3;
    },
    PsbtInputMuSig2ParticipantPublicKeys_toJson_closure: function PsbtInputMuSig2ParticipantPublicKeys_toJson_closure() {
    },
    PsbtInputMuSig2PublicNonce: function PsbtInputMuSig2PublicNonce(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.publicKey = t0;
      _.plainPublicKey = t1;
      _.tapleafHash = t2;
      _.publicNonce = t3;
      _.type = t4;
      _.keyPair = t5;
    },
    PsbtInputMuSig2ParticipantPartialSignature: function PsbtInputMuSig2ParticipantPartialSignature(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.publicKey = t0;
      _.plainPublicKey = t1;
      _.tapleafHash = t2;
      _.signature = t3;
      _.type = t4;
      _.keyPair = t5;
    },
    PsbtInputSilentPaymentInputECDHShare: function PsbtInputSilentPaymentInputECDHShare(t0, t1, t2, t3) {
      var _ = this;
      _.scanKey = t0;
      _.share = t1;
      _.type = t2;
      _.keyPair = t3;
    },
    PsbtInputSilentPaymentInputDLEQProof: function PsbtInputSilentPaymentInputDLEQProof(t0, t1, t2, t3) {
      var _ = this;
      _.scanKey = t0;
      _.proof = t1;
      _.type = t2;
      _.keyPair = t3;
    },
    PsbtInputProprietaryUseType: function PsbtInputProprietaryUseType(t0, t1, t2, t3, t4) {
      var _ = this;
      _.identifier = t0;
      _.subkeydata = t1;
      _.data = t2;
      _.type = t3;
      _.keyPair = t4;
    },
    PsbtInputUnknow: function PsbtInputUnknow(t0, t1) {
      this.type = t0;
      this.keyPair = t1;
    },
    PsbtOutputTypes_find(flag) {
      var type = A.IterableHelper_firstWhereNullable(B.List_548, new A.PsbtOutputTypes_find_closure(flag), type$.PsbtOutputTypes);
      if (type != null)
        return type;
      return B.PsbtOutputTypes_IDj;
    },
    PsbtOutput$_(entries, version) {
      var t1 = A._arrayInstanceType(entries);
      return new A.PsbtOutput(version, A.List_List$unmodifiable(new A.MappedListIterable(entries, t1._eval$1("List<PsbtOutputData>(1)")._as(new A.PsbtOutput$__closure()), t1._eval$1("MappedListIterable<1,List<PsbtOutputData>>")), type$.List_PsbtOutputData));
    },
    PsbtOutput_PsbtOutput(entries, version) {
      var t2, t3, t4, _i, e, t5, t6, keys, t7, t8,
        t1 = type$.bool_Function_PsbtOutputTypes._as(new A.PsbtOutput_PsbtOutput_closure(version));
      for (t2 = entries.length, t3 = type$.WhereIterator_PsbtOutputTypes, t4 = type$.PsbtKey, _i = 0; _i < entries.length; entries.length === t2 || (0, A.throwConcurrentModificationError)(entries), ++_i) {
        e = entries[_i];
        t5 = J.getInterceptor$ax(e);
        t6 = t5.map$1$1(e, new A.PsbtOutput_PsbtOutput_closure0(), t4);
        keys = A.List_List$_of(t6, t6.$ti._eval$1("ListIterable.E"));
        if (A.LinkedHashSet_LinkedHashSet$from(keys, A._arrayInstanceType(keys)._precomputed1)._collection$_length !== keys.length)
          throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Output: Duplicate entry detected.", null));
        for (t6 = t5.get$iterator(e); t6.moveNext$0();) {
          t7 = t6.get$current().type;
          t8 = t7.allowedVersion;
          if (t8 == null)
            continue;
          if (version !== t8)
            throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Output: " + t7.psbtName + " is not allowed in PSBT version " + version.name + ".", null));
        }
        for (t6 = B.JSArray_methods.get$iterator(B.List_548), t7 = new A.WhereIterator(t6, t1, t3); t7.moveNext$0();) {
          t8 = t6.get$current();
          t5.firstWhere$2$orElse(e, new A.PsbtOutput_PsbtOutput_closure1(t8), new A.PsbtOutput_PsbtOutput_closure2(t8, version));
        }
      }
      return A.PsbtOutput$_(entries, version);
    },
    PsbtOutput_PsbtOutput$fromKeyPairs(keypairs, version) {
      var t1 = A._arrayInstanceType(keypairs),
        t2 = t1._eval$1("MappedListIterable<1,List<PsbtOutputData>>");
      t1 = A.List_List$_of(new A.MappedListIterable(keypairs, t1._eval$1("List<PsbtOutputData>(1)")._as(new A.PsbtOutput_PsbtOutput$fromKeyPairs_closure()), t2), t2._eval$1("ListIterable.E"));
      return A.PsbtOutput_PsbtOutput(t1, version);
    },
    PsbtOutputData___deserialize_tearOff(keypair) {
      return A.PsbtOutputData_PsbtOutputData$deserialize(type$.PsbtKeyPair._as(keypair));
    },
    PsbtOutputData_PsbtOutputData$deserialize(keypair) {
      var t1;
      switch (A.PsbtOutputTypes_find(keypair.key.type)) {
        case B.PsbtOutputTypes_xVf:
          t1 = A.PsbtOutputRedeemScript_PsbtOutputRedeemScript$deserialize(keypair);
          break;
        case B.PsbtOutputTypes_5kO:
          t1 = A.PsbtOutputWitnessScript_PsbtOutputWitnessScript$deserialize(keypair);
          break;
        case B.PsbtOutputTypes_02N:
          t1 = A.PsbtOutputBip32DerivationPath_PsbtOutputBip32DerivationPath$deserialize(keypair);
          break;
        case B.PsbtOutputTypes_vXE:
          t1 = A.PsbtOutputAmount_PsbtOutputAmount$deserialize(keypair);
          break;
        case B.PsbtOutputTypes_MR7:
          t1 = A.PsbtOutputScript_PsbtOutputScript$deserialize(keypair);
          break;
        case B.PsbtOutputTypes_fR7:
          t1 = A.PsbtOutputTaprootInternalKey_PsbtOutputTaprootInternalKey$deserialize(keypair);
          break;
        case B.PsbtOutputTypes_CMe:
          t1 = A.PsbtOutputTaprootTree_PsbtOutputTaprootTree$deserialize(keypair);
          break;
        case B.PsbtOutputTypes_rmR:
          t1 = A.PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize(keypair);
          break;
        case B.PsbtOutputTypes_spc:
          t1 = A.PsbtOutputMuSig2ParticipantPublicKeys_PsbtOutputMuSig2ParticipantPublicKeys$deserialize(keypair);
          break;
        case B.PsbtOutputTypes_r1i:
          t1 = A.PsbtOutputSilentPaymentData_PsbtOutputSilentPaymentData$deserialize(keypair);
          break;
        case B.PsbtOutputTypes_QVH:
          t1 = A.PsbtOutputSilentPaymentLabel_PsbtOutputSilentPaymentLabel$deserialize(keypair);
          break;
        case B.PsbtOutputTypes_gWS:
          t1 = A.PsbtOutputBIP353DNSSECProof_PsbtOutputBIP353DNSSECProof$deserialize(keypair);
          break;
        case B.PsbtOutputTypes_22F:
          t1 = A.PsbtOutputProprietaryUseType_PsbtOutputProprietaryUseType$deserialize(keypair);
          break;
        case B.PsbtOutputTypes_IDj:
          t1 = new A.PsbtOutputUnknow(B.PsbtOutputTypes_IDj, keypair);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    PsbtOutputRedeemScript_PsbtOutputRedeemScript$deserialize(keypair) {
      var exception,
        t1 = keypair.key;
      if (t1.type !== 0)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Redeem Script type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Redeem Script key data.", null));
      try {
        t1 = A.Script_Script$deserialize(keypair.value.data);
        return new A.PsbtOutputRedeemScript(t1, B.PsbtOutputTypes_xVf, keypair);
      } catch (exception) {
        t1 = A.DartBitcoinPluginException$("Invalid PSBT Redeem Script data.", null);
        throw A.wrapException(t1);
      }
    },
    PsbtOutputWitnessScript_PsbtOutputWitnessScript$deserialize(keypair) {
      var exception,
        t1 = keypair.key;
      if (t1.type !== 1)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Witness Script type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Witness Script key data.", null));
      try {
        t1 = A.Script_Script$deserialize(keypair.value.data);
        return new A.PsbtOutputWitnessScript(t1, B.PsbtOutputTypes_5kO, keypair);
      } catch (exception) {
        t1 = A.DartBitcoinPluginException$("Invalid PSBT Witness  Script data.", null);
        throw A.wrapException(t1);
      }
    },
    PsbtOutputBip32DerivationPath_PsbtOutputBip32DerivationPath$deserialize(keypair) {
      var fingerPrint, indexesBytes, indexCount, bip32Indexes, t2, t3, t4, t5, exception, _null = null,
        t1 = keypair.key;
      if (t1.type !== 2)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT bip32 derivation path type flag", _null));
      t1 = t1.extraData;
      if (t1 == null || !A.Secp256k1PublicKey_isValidBytes(t1))
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT bip32 derivation public key.", _null));
      t2 = keypair.value.data;
      t3 = t2.length;
      if (t3 < 4 || B.JSInt_methods.$mod(t3, 4) !== 0)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT bip32 derivation fingerprint or bip32 index.", _null));
      fingerPrint = B.JSArray_methods.sublist$2(t2, 0, 4);
      indexesBytes = B.JSArray_methods.sublist$1(t2, 4);
      indexCount = J.get$length$asx(indexesBytes) / 4 | 0;
      bip32Indexes = null;
      try {
        t2 = type$.Bip32KeyIndex;
        bip32Indexes = A.List_List$generate(indexCount, new A.PsbtOutputBip32DerivationPath_PsbtOutputBip32DerivationPath$deserialize_closure(indexesBytes), t2);
        if (J.get$length$asx(fingerPrint) === 4 && A.Secp256k1PublicKey_isValidBytes(t1)) {
          t3 = fingerPrint;
          t4 = bip32Indexes;
          A.BytesUtils_validateListOfBytes(t3);
          t5 = type$.int;
          t3 = A.List_List$unmodifiable(t3, t5);
          A.BytesUtils_validateListOfBytes(t1);
          t5 = A.List_List$unmodifiable(t1, t5);
          t2 = A.List_List$unmodifiable(t4, t2);
          return new A.PsbtOutputBip32DerivationPath(t3, t2, t5, B.PsbtOutputTypes_02N, keypair);
        }
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT bip32 derivation indexes.", _null));
    },
    PsbtOutputAmount_PsbtOutputAmount$deserialize(keypair) {
      var amount, exception,
        t1 = keypair.key;
      if (t1.type !== 3)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Output Amount type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Output Amount key data.", null));
      try {
        t1 = keypair.value.data;
        if (t1.length === 8) {
          amount = A.BigintUtils_fromBytes(t1, B.C_Endian0, true);
          t1 = A.BigIntHelper_get_asInt64(amount);
          return new A.PsbtOutputAmount(t1, B.PsbtOutputTypes_vXE, keypair);
        }
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Output Amount data.", null));
    },
    PsbtOutputScript_PsbtOutputScript$deserialize(keypair) {
      var exception,
        t1 = keypair.key;
      if (t1.type !== 4)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Output Script type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Output Script key data.", null));
      try {
        t1 = A.Script_Script$deserialize(keypair.value.data);
        return new A.PsbtOutputScript(t1, B.PsbtOutputTypes_MR7, keypair);
      } catch (exception) {
        t1 = A.DartBitcoinPluginException$("Invalid PSBT Output Script data.", null);
        throw A.wrapException(t1);
      }
    },
    PsbtOutputTaprootInternalKey_PsbtOutputTaprootInternalKey$deserialize(keypair) {
      var exception,
        _s39_ = "Invalid PSBT Taproot Internal Key data.",
        t1 = keypair.key;
      if (t1.type !== 5)
        throw A.wrapException(A.DartBitcoinPluginException$(string$.InvaliPTI, null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$(_s39_, null));
      try {
        t1 = keypair.value.data;
        if (t1.length === 32) {
          A.BytesUtils_validateListOfBytes(t1);
          t1 = A.List_List$unmodifiable(t1, type$.int);
          return new A.PsbtOutputTaprootInternalKey(t1, B.PsbtOutputTypes_fR7, keypair);
        }
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$(_s39_, null));
    },
    PsbtOutputTaprootTree_PsbtOutputTaprootTree$deserialize(keypair) {
      var taprootTrees, offset, data, depth, leafVersion, scriptLength, script, tree, t2, t3, exception,
        t1 = keypair.key;
      if (t1.type !== 6)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Taproot Tree type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Taproot Tree Key data.", null));
      taprootTrees = A._setArrayType([], type$.JSArray_PsbtTapTree);
      try {
        offset = 0;
        data = keypair.value.data;
        while (true) {
          t1 = offset;
          t2 = J.get$length$asx(data);
          if (typeof t1 !== "number")
            return t1.$lt();
          if (!(t1 < t2))
            break;
          t1 = offset;
          if (typeof t1 !== "number")
            return t1.$add();
          offset = t1 + 1;
          depth = J.$index$asx(data, t1);
          t1 = offset;
          if (typeof t1 !== "number")
            return t1.$add();
          offset = t1 + 1;
          leafVersion = J.$index$asx(data, t1);
          scriptLength = A.IntUtils_decodeVarint(J.sublist$1$ax(data, offset));
          t1 = offset;
          t2 = scriptLength.item2;
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t2 !== "number")
            return A.iae(t2);
          offset = t1 + t2;
          t2 = offset;
          t1 = offset;
          t3 = scriptLength.item1;
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t3 !== "number")
            return A.iae(t3);
          script = A.Script_Script$deserialize(J.sublist$2$ax(data, t2, t1 + t3));
          tree = new A.PsbtTapTree(A.IntHelper_get_asUint8(depth), A.IntHelper_get_asUint8(leafVersion), script);
          J.add$1$ax(taprootTrees, tree);
          t3 = offset;
          t1 = scriptLength.item1;
          if (typeof t3 !== "number")
            return t3.$add();
          if (typeof t1 !== "number")
            return A.iae(t1);
          offset = t3 + t1;
        }
        t1 = A.List_List$unmodifiable(taprootTrees, type$.PsbtTapTree);
        return new A.PsbtOutputTaprootTree(t1, B.PsbtOutputTypes_CMe, keypair);
      } catch (exception) {
        t1 = A.DartBitcoinPluginException$("Invalid Invalid PSBT Taproot Tree data.", null);
        throw A.wrapException(t1);
      }
    },
    PsbtOutputTaprootKeyBip32DerivationPath$_(derivationIndexes, fingerprint, keyPair, leavesHashes, xOnlyPubKey) {
      var t2, t3, t4,
        t1 = A._arrayInstanceType(leavesHashes);
      t1 = A.List_List$unmodifiable(new A.MappedListIterable(leavesHashes, t1._eval$1("List<int>(1)")._as(new A.PsbtOutputTaprootKeyBip32DerivationPath$__closure()), t1._eval$1("MappedListIterable<1,List<int>>")), type$.List_int);
      A.BytesUtils_validateListOfBytes(fingerprint);
      t2 = type$.int;
      t3 = A.List_List$unmodifiable(fingerprint, t2);
      t4 = A.List_List$unmodifiable(derivationIndexes, type$.Bip32KeyIndex);
      A.BytesUtils_validateListOfBytes(xOnlyPubKey);
      return new A.PsbtOutputTaprootKeyBip32DerivationPath(A.List_List$unmodifiable(xOnlyPubKey, t2), t1, t3, t4, B.PsbtOutputTypes_rmR, keyPair);
    },
    PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize(keypair) {
      var vlen, $length, data, leavesHashes, fingerprintOffset, fingerprint, indexesBytes, inIndexesCount, indexes, t2, t3, exception, _null = null,
        t1 = keypair.key;
      if (t1.type !== 7)
        throw A.wrapException(A.DartBitcoinPluginException$(string$.InvaliPTK, _null));
      t1 = t1.extraData;
      t2 = t1 == null;
      if ((t2 ? _null : t1.length) !== 32)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid Taproot Key BIP 32 Derivation Path key data.", _null));
      try {
        t3 = keypair.value.data;
        vlen = A.IntUtils_decodeVarint(t3);
        $length = vlen.item1;
        data = B.JSArray_methods.sublist$1(t3, vlen.item2);
        leavesHashes = A.List_List$generate($length, new A.PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize_closure(data), type$.List_int);
        fingerprintOffset = J.get$length$asx(leavesHashes) * 32;
        t3 = fingerprintOffset;
        if (typeof t3 !== "number")
          return t3.$add();
        fingerprint = J.sublist$2$ax(data, fingerprintOffset, t3 + 4);
        t3 = fingerprintOffset;
        if (typeof t3 !== "number")
          return t3.$add();
        indexesBytes = J.sublist$1$ax(data, t3 + 4);
        if (B.JSInt_methods.$mod(J.get$length$asx(indexesBytes), 4) === 0) {
          inIndexesCount = J.get$length$asx(indexesBytes) / 4 | 0;
          indexes = A.List_List$generate(inIndexesCount, new A.PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize_closure0(indexesBytes), type$.Bip32KeyIndex);
          if (J.get$length$asx(fingerprint) === 4)
            t2 = (t2 ? _null : t1.length) === 32 && J.every$1$ax(leavesHashes, new A.PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize_closure1());
          else
            t2 = false;
          if (t2) {
            t1.toString;
            t1 = A.PsbtOutputTaprootKeyBip32DerivationPath$_(indexes, fingerprint, keypair, leavesHashes, t1);
            return t1;
          }
        }
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$(string$.InvaliT, _null));
    },
    PsbtOutputMuSig2ParticipantPublicKeys$_(aggregatePubKey, keyPair, pubKeys) {
      var t1;
      A.BytesUtils_validateListOfBytes(aggregatePubKey);
      t1 = A._arrayInstanceType(pubKeys);
      return new A.PsbtOutputMuSig2ParticipantPublicKeys(A.List_List$unmodifiable(aggregatePubKey, type$.int), A.List_List$unmodifiable(new A.MappedListIterable(pubKeys, t1._eval$1("List<int>(1)")._as(new A.PsbtOutputMuSig2ParticipantPublicKeys$__closure()), t1._eval$1("MappedListIterable<1,List<int>>")), type$.List_int), B.PsbtOutputTypes_spc, keyPair);
    },
    PsbtOutputMuSig2ParticipantPublicKeys_PsbtOutputMuSig2ParticipantPublicKeys$deserialize(keypair) {
      var pubKeysData, pubkeysLength, pubKeys, i, offset, key, t2, t3, exception,
        t1 = keypair.key;
      if (t1.type !== 8)
        throw A.wrapException(A.DartBitcoinPluginException$(string$.InvaliPMt, null));
      t1 = t1.extraData;
      if ((t1 == null ? null : t1.length) === 33)
        try {
          pubKeysData = keypair.value.data;
          if (B.JSInt_methods.$mod(J.get$length$asx(pubKeysData), 33) === 0) {
            pubkeysLength = J.get$length$asx(pubKeysData) / 33 | 0;
            pubKeys = A._setArrayType([], type$.JSArray_List_int);
            i = 0;
            while (true) {
              t2 = i;
              t3 = pubkeysLength;
              if (typeof t2 !== "number")
                return t2.$lt();
              if (typeof t3 !== "number")
                return A.iae(t3);
              if (!(t2 < t3))
                break;
              t2 = i;
              if (typeof t2 !== "number")
                return t2.$mul();
              offset = t2 * 33;
              t2 = offset;
              if (typeof t2 !== "number")
                return t2.$add();
              key = J.sublist$2$ax(pubKeysData, offset, t2 + 33);
              J.add$1$ax(pubKeys, key);
              t2 = i;
              if (typeof t2 !== "number")
                return t2.$add();
              i = t2 + 1;
            }
            t1.toString;
            if (A.Secp256k1PublicKey_isValidBytes(t1) && J.every$1$ax(pubKeys, A.secp256k1_keys_ecdsa_Secp256k1PublicKey_isValidBytes$closure())) {
              t1 = A.PsbtOutputMuSig2ParticipantPublicKeys$_(t1, keypair, pubKeys);
              return t1;
            }
          }
        } catch (exception) {
        }
      throw A.wrapException(A.DartBitcoinPluginException$(string$.InvaliPMd, null));
    },
    PsbtOutputSilentPaymentData_PsbtOutputSilentPaymentData$deserialize(keypair) {
      var t2, t3, exception,
        t1 = keypair.key;
      if (t1.type !== 9)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Silent Payment Data type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Silent Payment Data key data.", null));
      try {
        t1 = keypair.value.data;
        if (t1.length === 66) {
          t2 = B.JSArray_methods.sublist$2(t1, 0, 33);
          t1 = B.JSArray_methods.sublist$1(t1, 33);
          A.BytesUtils_validateListOfBytes(t2);
          t3 = type$.int;
          t2 = A.List_List$unmodifiable(t2, t3);
          A.BytesUtils_validateListOfBytes(t1);
          t3 = A.List_List$unmodifiable(t1, t3);
          return new A.PsbtOutputSilentPaymentData(t2, t3, B.PsbtOutputTypes_r1i, keypair);
        }
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Silent Payment Data data", null));
    },
    PsbtOutputSilentPaymentLabel_PsbtOutputSilentPaymentLabel$deserialize(keypair) {
      var label, exception,
        t1 = keypair.key;
      if (t1.type !== 10)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Silent Payment Label type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Silent Payment Label key data.", null));
      try {
        t1 = keypair.value.data;
        if (t1.length === 4) {
          label = A.IntUtils_fromBytes(t1, B.C_Endian0, false);
          t1 = A.IntHelper_get_asUint32(label);
          return new A.PsbtOutputSilentPaymentLabel(t1, B.PsbtOutputTypes_QVH, keypair);
        }
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Silent Payment Label data", null));
    },
    PsbtOutputBIP353DNSSECProof_PsbtOutputBIP353DNSSECProof$deserialize(keypair) {
      var nameLength, $name, proof, t2, exception,
        t1 = keypair.key;
      if (t1.type !== 53)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid BIP 353 DNSSEC proof type flag", null));
      if (t1.extraData != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid BIP 353 DNSSEC proof key data.", null));
      try {
        t1 = keypair.value.data;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        nameLength = t1[0];
        $name = A.StringUtils_decode(B.JSArray_methods.sublist$2(t1, 1, nameLength), false, B.StringEncoding_1);
        t2 = nameLength;
        if (typeof t2 !== "number")
          return A.iae(t2);
        proof = B.JSArray_methods.sublist$1(t1, 1 + t2);
        t2 = proof;
        A.BytesUtils_validateListOfBytes(t2);
        t2 = A.List_List$unmodifiable(t2, type$.int);
        return new A.PsbtOutputBIP353DNSSECProof($name, t2, B.PsbtOutputTypes_gWS, keypair);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.DartBitcoinPluginException)
          throw exception;
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid BIP 353 DNSSEC proof data", null));
    },
    PsbtOutputProprietaryUseType_PsbtOutputProprietaryUseType$deserialize(keypair) {
      var keyBytes, identifierSize, identifier, subtypeOffset, subkeydata, t2, t3, t4, exception,
        t1 = keypair.key;
      if (t1.type !== 252)
        throw A.wrapException(A.DartBitcoinPluginException$(string$.InvaliPP, null));
      try {
        t1 = t1.extraData;
        t1.toString;
        keyBytes = t1;
        identifierSize = A.IntUtils_decodeVarint(keyBytes);
        t1 = identifierSize.item2;
        t2 = identifierSize.item1;
        t3 = identifierSize.item2;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t3 !== "number")
          return A.iae(t3);
        identifier = J.sublist$2$ax(keyBytes, t1, t2 + t3);
        t3 = identifierSize.item1;
        t2 = identifierSize.item2;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t2 !== "number")
          return A.iae(t2);
        subtypeOffset = t3 + t2;
        subkeydata = J.sublist$1$ax(keyBytes, subtypeOffset);
        t2 = identifier;
        t3 = subkeydata;
        t1 = keypair.value.data;
        A.BytesUtils_validateListOfBytes(t2);
        t4 = type$.int;
        t2 = A.List_List$unmodifiable(t2, t4);
        A.BytesUtils_validateListOfBytes(t3);
        t3 = A.List_List$unmodifiable(t3, t4);
        A.BytesUtils_validateListOfBytes(t1);
        t4 = A.List_List$unmodifiable(t1, t4);
        return new A.PsbtOutputProprietaryUseType(t2, t3, t4, B.PsbtOutputTypes_22F, keypair);
      } catch (exception) {
      }
      throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT Proprietary Use Type data", null));
    },
    PsbtOutputTypes: function PsbtOutputTypes(t0, t1, t2, t3, t4) {
      var _ = this;
      _.flag = t0;
      _.psbtName = t1;
      _.required = t2;
      _.allowedVersion = t3;
      _._name = t4;
    },
    PsbtOutputTypes_find_closure: function PsbtOutputTypes_find_closure(t0) {
      this.flag = t0;
    },
    PsbtOutput: function PsbtOutput(t0, t1) {
      this.version = t0;
      this._entries = t1;
    },
    PsbtOutput$__closure: function PsbtOutput$__closure() {
    },
    PsbtOutput_PsbtOutput_closure: function PsbtOutput_PsbtOutput_closure(t0) {
      this.version = t0;
    },
    PsbtOutput_PsbtOutput_closure0: function PsbtOutput_PsbtOutput_closure0() {
    },
    PsbtOutput_PsbtOutput_closure1: function PsbtOutput_PsbtOutput_closure1(t0) {
      this.i = t0;
    },
    PsbtOutput_PsbtOutput_closure2: function PsbtOutput_PsbtOutput_closure2(t0, t1) {
      this.i = t0;
      this.version = t1;
    },
    PsbtOutput_PsbtOutput$fromKeyPairs_closure: function PsbtOutput_PsbtOutput$fromKeyPairs_closure() {
    },
    PsbtOutput_toKeyPairs_closure: function PsbtOutput_toKeyPairs_closure() {
    },
    PsbtOutput_toKeyPairs__closure: function PsbtOutput_toKeyPairs__closure() {
    },
    PsbtOutput_toJson_closure: function PsbtOutput_toJson_closure() {
    },
    PsbtOutput_toJson__closure: function PsbtOutput_toJson__closure() {
    },
    PsbtOutput_clone_closure: function PsbtOutput_clone_closure() {
    },
    PsbtOutputData: function PsbtOutputData() {
    },
    PsbtOutputRedeemScript: function PsbtOutputRedeemScript(t0, t1, t2) {
      this.redeemScript = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtOutputWitnessScript: function PsbtOutputWitnessScript(t0, t1, t2) {
      this.witnessScript = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtOutputBip32DerivationPath: function PsbtOutputBip32DerivationPath(t0, t1, t2, t3, t4) {
      var _ = this;
      _.fingerprint = t0;
      _.indexes = t1;
      _.publicKey = t2;
      _.type = t3;
      _.keyPair = t4;
    },
    PsbtOutputBip32DerivationPath_PsbtOutputBip32DerivationPath$deserialize_closure: function PsbtOutputBip32DerivationPath_PsbtOutputBip32DerivationPath$deserialize_closure(t0) {
      this.indexesBytes = t0;
    },
    PsbtOutputBip32DerivationPath_toJson_closure: function PsbtOutputBip32DerivationPath_toJson_closure() {
    },
    PsbtOutputAmount: function PsbtOutputAmount(t0, t1, t2) {
      this.amount = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtOutputScript: function PsbtOutputScript(t0, t1, t2) {
      this.script = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtOutputTaprootInternalKey: function PsbtOutputTaprootInternalKey(t0, t1, t2) {
      this.xOnlyPubKey = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtOutputTaprootTree: function PsbtOutputTaprootTree(t0, t1, t2) {
      this.taprootTrees = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtOutputTaprootTree_toJson_closure: function PsbtOutputTaprootTree_toJson_closure() {
    },
    PsbtOutputTaprootKeyBip32DerivationPath: function PsbtOutputTaprootKeyBip32DerivationPath(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.xOnlyPubKey = t0;
      _.leavesHashes = t1;
      _.fingerprint = t2;
      _.derivationIndexes = t3;
      _.type = t4;
      _.keyPair = t5;
    },
    PsbtOutputTaprootKeyBip32DerivationPath$__closure: function PsbtOutputTaprootKeyBip32DerivationPath$__closure() {
    },
    PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize_closure: function PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize_closure(t0) {
      this.data = t0;
    },
    PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize_closure0: function PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize_closure0(t0) {
      this.indexesBytes = t0;
    },
    PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize_closure1: function PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize_closure1() {
    },
    PsbtOutputTaprootKeyBip32DerivationPath_toJson_closure: function PsbtOutputTaprootKeyBip32DerivationPath_toJson_closure() {
    },
    PsbtOutputTaprootKeyBip32DerivationPath_toJson_closure0: function PsbtOutputTaprootKeyBip32DerivationPath_toJson_closure0() {
    },
    PsbtOutputMuSig2ParticipantPublicKeys: function PsbtOutputMuSig2ParticipantPublicKeys(t0, t1, t2, t3) {
      var _ = this;
      _.aggregatePubKey = t0;
      _.pubKeys = t1;
      _.type = t2;
      _.keyPair = t3;
    },
    PsbtOutputMuSig2ParticipantPublicKeys_toJson_closure: function PsbtOutputMuSig2ParticipantPublicKeys_toJson_closure() {
    },
    PsbtOutputMuSig2ParticipantPublicKeys$__closure: function PsbtOutputMuSig2ParticipantPublicKeys$__closure() {
    },
    PsbtOutputSilentPaymentData: function PsbtOutputSilentPaymentData(t0, t1, t2, t3) {
      var _ = this;
      _.scanKey = t0;
      _.spendKey = t1;
      _.type = t2;
      _.keyPair = t3;
    },
    PsbtOutputSilentPaymentLabel: function PsbtOutputSilentPaymentLabel(t0, t1, t2) {
      this.label = t0;
      this.type = t1;
      this.keyPair = t2;
    },
    PsbtOutputBIP353DNSSECProof: function PsbtOutputBIP353DNSSECProof(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.proof = t1;
      _.type = t2;
      _.keyPair = t3;
    },
    PsbtOutputProprietaryUseType: function PsbtOutputProprietaryUseType(t0, t1, t2, t3, t4) {
      var _ = this;
      _.identifier = t0;
      _.subkeydata = t1;
      _.data = t2;
      _.type = t3;
      _.keyPair = t4;
    },
    PsbtOutputUnknow: function PsbtOutputUnknow(t0, t1) {
      this.type = t0;
      this.keyPair = t1;
    },
    PsbtKey$(type, extraData) {
      var t1;
      if (extraData == null)
        t1 = null;
      else {
        A.BytesUtils_validateListOfBytes(extraData);
        t1 = A.List_List$unmodifiable(extraData, type$.int);
      }
      return new A.PsbtKey(A.IntHelper_get_asUint8(type), t1);
    },
    PsbtKeyPair_PsbtKeyPair$deserialize(reader) {
      var keyData0, t1, key,
        keyData = reader.read$1(reader.readLength$0());
      if (keyData.length === 0)
        A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT key bytes length.", null));
      keyData0 = B.JSArray_methods.sublist$1(keyData, 1);
      if (0 >= keyData.length)
        return A.ioore(keyData, 0);
      t1 = keyData[0];
      key = A.PsbtKey$(t1, keyData0.length === 0 ? null : keyData0);
      t1 = reader.read$1(reader.readLength$0());
      A.BytesUtils_validateListOfBytes(t1);
      return new A.PsbtKeyPair(key, new A.PsbtValue(A.List_List$unmodifiable(t1, type$.int)));
    },
    Psbt_Psbt$deserialize(bytes) {
      var reader, global, pair, psbtVersionKeyType, v, inputLength, outputLength, unsignedTx, btcTransaction, inputCount, outputCount, inputs, i, input, pair0, outputs, i0, output, pair1, e, _box_0, t1, t2, t3, t4, inputs0, version, exception;
      try {
        _box_0 = {};
        reader = new A.PsbtByteReader(A.List_List$unmodifiable(bytes, type$.int));
        if (reader.bytes.length < 5 || !A.BytesUtils_bytesEqual(reader.read$1(4), B.List_112_115_98_116)) {
          t1 = A.DartBitcoinPluginException$("Invalid PSBT magic bytes.", null);
          throw A.wrapException(t1);
        }
        ++reader._offset;
        t1 = type$.JSArray_PsbtKeyPair;
        global = A._setArrayType([], t1);
        while (true) {
          t2 = reader;
          t3 = t2.bytes;
          t2 = t2._offset;
          if (!(t2 >= 0 && t2 < t3.length))
            return A.ioore(t3, t2);
          if (!(t3[t2] !== 0))
            break;
          pair = A.PsbtKeyPair_PsbtKeyPair$deserialize(reader);
          J.add$1$ax(global, pair);
        }
        _box_0.psbtVersion = B.PsbtVersion_0_V0_v0;
        psbtVersionKeyType = A.IterableHelper_firstWhereNullable(global, new A.Psbt_Psbt$deserialize_closure(), type$.PsbtKeyPair);
        if (psbtVersionKeyType != null) {
          v = A.PsbtGlobalPSBTVersionNumber_PsbtGlobalPSBTVersionNumber$deserialize(psbtVersionKeyType);
          _box_0.psbtVersion = v.version;
        }
        inputLength = null;
        outputLength = null;
        switch (_box_0.psbtVersion) {
          case B.PsbtVersion_0_V0_v0:
            unsignedTx = J.firstWhere$2$orElse$ax(global, new A.Psbt_Psbt$deserialize_closure0(), new A.Psbt_Psbt$deserialize_closure1());
            btcTransaction = A.BtcTransaction_deserialize(unsignedTx.value.data, true);
            inputLength = btcTransaction.inputs.length;
            outputLength = btcTransaction.outputs.length;
            break;
          case B.PsbtVersion_2_V2_v2:
            inputCount = J.firstWhere$2$orElse$ax(global, new A.Psbt_Psbt$deserialize_closure2(), new A.Psbt_Psbt$deserialize_closure3(_box_0));
            outputCount = J.firstWhere$2$orElse$ax(global, new A.Psbt_Psbt$deserialize_closure4(), new A.Psbt_Psbt$deserialize_closure5(_box_0));
            inputLength = A.PsbtGlobalInputCount_PsbtGlobalInputCount$deserialize(inputCount).count;
            outputLength = A.PsbtGlobalOutputCount_PsbtGlobalOutputCount$deserialize(outputCount).count;
            break;
        }
        ++reader._offset;
        t2 = type$.JSArray_List_PsbtKeyPair;
        inputs = A._setArrayType([], t2);
        i = 0;
        while (true) {
          t3 = i;
          t4 = inputLength;
          if (typeof t3 !== "number")
            return t3.$lt();
          if (typeof t4 !== "number")
            return A.iae(t4);
          if (!(t3 < t4))
            break;
          input = A._setArrayType([], t1);
          while (true) {
            t3 = reader;
            t4 = t3.bytes;
            t3 = t3._offset;
            if (!(t3 >= 0 && t3 < t4.length))
              return A.ioore(t4, t3);
            if (!(t4[t3] !== 0))
              break;
            pair0 = A.PsbtKeyPair_PsbtKeyPair$deserialize(reader);
            J.add$1$ax(input, pair0);
          }
          ++reader._offset;
          J.add$1$ax(inputs, input);
          t3 = i;
          if (typeof t3 !== "number")
            return t3.$add();
          i = t3 + 1;
        }
        outputs = A._setArrayType([], t2);
        i0 = 0;
        while (true) {
          t2 = i0;
          t3 = outputLength;
          if (typeof t2 !== "number")
            return t2.$lt();
          if (typeof t3 !== "number")
            return A.iae(t3);
          if (!(t2 < t3))
            break;
          output = A._setArrayType([], t1);
          while (true) {
            t2 = reader;
            t3 = t2.bytes;
            t2 = t2._offset;
            if (!(t2 >= 0 && t2 < t3.length))
              return A.ioore(t3, t2);
            if (!(t3[t2] !== 0))
              break;
            pair1 = A.PsbtKeyPair_PsbtKeyPair$deserialize(reader);
            J.add$1$ax(output, pair1);
          }
          ++reader._offset;
          J.add$1$ax(outputs, output);
          t2 = i0;
          if (typeof t2 !== "number")
            return t2.$add();
          i0 = t2 + 1;
        }
        t1 = _box_0.psbtVersion;
        t2 = global;
        t3 = A._arrayInstanceType(t2);
        t4 = t3._eval$1("MappedListIterable<1,PsbtGlobalData>");
        inputs0 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("PsbtGlobalData(1)")._as(A.global_PsbtGlobalData___deserialize_tearOff$closure()), t4), t4._eval$1("ListIterable.E"));
        t1 = A.PsbtGlobal_PsbtGlobal(inputs0, t1);
        t2 = A.PsbtInput_PsbtInput$fromKeyPairs(inputs, _box_0.psbtVersion);
        t3 = A.PsbtOutput_PsbtOutput$fromKeyPairs(outputs, _box_0.psbtVersion);
        version = t1.version;
        if (t2.version !== version)
          A.throwExpression(A.DartBitcoinPluginException$("Missmatch version between PSBT global and input", null));
        if (t3.version !== version)
          A.throwExpression(A.DartBitcoinPluginException$("Missmatch version between PSBT global and output", null));
        return new A.Psbt(t1, t2, t3);
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.DartBitcoinPluginException)
          throw exception;
        else {
          e = t1;
          t1 = A.DartBitcoinPluginException$("PSBT deserialization failed: Unable to parse the PSBT structure.", A.LinkedHashMap_LinkedHashMap$_literal(["error", J.toString$0$(e)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
      }
    },
    PsbtVersion: function PsbtVersion(t0, t1, t2) {
      this.version = t0;
      this.name = t1;
      this._name = t2;
    },
    PsbtKey: function PsbtKey(t0, t1) {
      this.type = t0;
      this.extraData = t1;
    },
    PsbtValue: function PsbtValue(t0) {
      this.data = t0;
    },
    PsbtKeyPair: function PsbtKeyPair(t0, t1) {
      this.key = t0;
      this.value = t1;
    },
    Psbt: function Psbt(t0, t1, t2) {
      this.global = t0;
      this.input = t1;
      this.output = t2;
    },
    Psbt_Psbt$deserialize_closure: function Psbt_Psbt$deserialize_closure() {
    },
    Psbt_Psbt$deserialize_closure0: function Psbt_Psbt$deserialize_closure0() {
    },
    Psbt_Psbt$deserialize_closure1: function Psbt_Psbt$deserialize_closure1() {
    },
    Psbt_Psbt$deserialize_closure2: function Psbt_Psbt$deserialize_closure2() {
    },
    Psbt_Psbt$deserialize_closure3: function Psbt_Psbt$deserialize_closure3(t0) {
      this._box_0 = t0;
    },
    Psbt_Psbt$deserialize_closure4: function Psbt_Psbt$deserialize_closure4() {
    },
    Psbt_Psbt$deserialize_closure5: function Psbt_Psbt$deserialize_closure5(t0) {
      this._box_0 = t0;
    },
    Psbt_serialize_closure: function Psbt_serialize_closure() {
    },
    Psbt_serialize_closure0: function Psbt_serialize_closure0() {
    },
    Psbt_serialize__closure0: function Psbt_serialize__closure0() {
    },
    Psbt_serialize_closure1: function Psbt_serialize_closure1() {
    },
    Psbt_serialize__closure: function Psbt_serialize__closure() {
    },
    PsbtTapTree: function PsbtTapTree(t0, t1, t2) {
      this.depth = t0;
      this.leafVersion = t1;
      this.script = t2;
    },
    _Base32Utils_translateAlphabet(data, fromAlphabet, toAlphabet) {
      var t1 = type$.String,
        map = A.LinkedHashMap_LinkedHashMap(null, null, t1, t1);
      A.MapBase__fillMapWithMappedIterable(map, new A.CodeUnits(fromAlphabet), new A._Base32Utils_translateAlphabet_closure(), new A._Base32Utils_translateAlphabet_closure0(fromAlphabet, toAlphabet));
      return new A.MappedListIterable(A._setArrayType(data.split(""), type$.JSArray_String), type$.String_Function_String._as(new A._Base32Utils_translateAlphabet_closure1(map)), type$.MappedListIterable_String_String).join$1(0, "");
    },
    _Base32Utils__b32decode(alphabet, base32) {
      var t1, i, decoded, _box_0 = {};
      if (!$._Base32Const__b32rev.containsKey$1(alphabet)) {
        $._Base32Const__b32rev.$indexSet(0, alphabet, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.int));
        for (t1 = alphabet.length, i = 0; i < t1; ++i)
          $._Base32Const__b32rev.$index(0, alphabet).$indexSet(0, alphabet[i], i);
      }
      _box_0.shift = 8;
      _box_0.carry = 0;
      decoded = A._setArrayType([], type$.JSArray_int);
      B.JSArray_methods.forEach$1(A._setArrayType(base32.split(""), type$.JSArray_String), new A._Base32Utils__b32decode_closure(_box_0, alphabet, decoded));
      if (_box_0.shift !== 8 && _box_0.carry !== 0) {
        B.JSArray_methods.add$1(decoded, _box_0.carry);
        _box_0.shift = 8;
        _box_0.carry = 0;
      }
      return decoded;
    },
    _Base32Utils__b32encode(alphabet, s) {
      var t1, padding, t2, encoded, t3, shift, carry, _i, byte, t4,
        leftover = B.JSInt_methods.$mod(s.length, 5);
      if (leftover !== 0) {
        t1 = type$.int;
        padding = A.List_List$filled(5 - leftover, 0, false, t1);
        t2 = A.List_List$_of(s, type$.dynamic);
        B.JSArray_methods.addAll$1(t2, padding);
        s = A.List_List$from(t2, true, t1);
      }
      t1 = type$.JSArray_int;
      encoded = A._setArrayType([], t1);
      for (t2 = s.length, t3 = alphabet.length, shift = 3, carry = 0, _i = 0; _i < s.length; s.length === t2 || (0, A.throwConcurrentModificationError)(s), ++_i) {
        byte = s[_i];
        t4 = (carry | B.JSInt_methods.$shr(byte, shift)) & 31;
        if (!(t4 < t3))
          return A.ioore(alphabet, t4);
        B.JSArray_methods.addAll$1(encoded, new A.CodeUnits(alphabet[t4]));
        if (shift > 5) {
          shift -= 5;
          t4 = B.JSInt_methods.$shr(byte, shift) & 31;
          if (!(t4 < t3))
            return A.ioore(alphabet, t4);
          B.JSArray_methods.addAll$1(encoded, new A.CodeUnits(alphabet[t4]));
        }
        shift = 5 - shift;
        carry = B.JSInt_methods.$shl(byte, shift);
        shift = 8 - shift;
      }
      if (shift !== 3) {
        t2 = carry & 31;
        if (!(t2 < t3))
          return A.ioore(alphabet, t2);
        B.JSArray_methods.addAll$1(encoded, new A.CodeUnits(alphabet[t2]));
      }
      if (leftover === 1)
        B.JSArray_methods.setAll$2(encoded, encoded.length - 6, A._setArrayType([61, 61, 61, 61, 61, 61], t1));
      else if (leftover === 2)
        B.JSArray_methods.setAll$2(encoded, encoded.length - 4, A._setArrayType([61, 61, 61, 61], t1));
      else if (leftover === 3)
        B.JSArray_methods.setAll$2(encoded, encoded.length - 3, A._setArrayType([61, 61, 61], t1));
      else if (leftover === 4)
        B.JSArray_methods.setAll$2(encoded, encoded.length - 1, A._setArrayType([61], t1));
      return A.List_List$from(encoded, true, type$.int);
    },
    Base32Decoder_decode(data) {
      var decodedBytes, data0, lastBlockWidth, t1, exception,
        _s32_ = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
        customAlphabet = null;
      data = data;
      try {
        data0 = data;
        lastBlockWidth = B.JSInt_methods.$mod(data0.length, 8);
        data = lastBlockWidth !== 0 ? data0 + B.JSString_methods.$mul("=", 8 - lastBlockWidth) : data0;
        if (customAlphabet != null)
          data = A._Base32Utils_translateAlphabet(data, customAlphabet, _s32_);
        decodedBytes = A._Base32Utils__b32decode(_s32_, data);
        t1 = A.List_List$from(decodedBytes, true, type$.int);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.ArgumentException_QQa);
      }
    },
    _Base32Utils_translateAlphabet_closure: function _Base32Utils_translateAlphabet_closure() {
    },
    _Base32Utils_translateAlphabet_closure0: function _Base32Utils_translateAlphabet_closure0(t0, t1) {
      this.fromAlphabet = t0;
      this.toAlphabet = t1;
    },
    _Base32Utils_translateAlphabet_closure1: function _Base32Utils_translateAlphabet_closure1(t0) {
      this.translationMap = t0;
    },
    _Base32Utils__b32decode_closure: function _Base32Utils__b32decode_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.alphabet = t1;
      this.decoded = t2;
    },
    Base58Encoder_encode(dataBytes, base58alphabets) {
      var val, t2, enc, t3, div, zero, _i,
        t1 = B.Map_0cXzp.$index(0, base58alphabets);
      t1.toString;
      val = A.BigintUtils_fromBytes(dataBytes, B.C_Endian, false);
      for (t2 = t1.length, enc = ""; val.compareTo$1(0, $.$get$_BigIntImpl_zero()) > 0; val = div) {
        t3 = A._BigIntImpl__BigIntImpl$from(58);
        if (t3._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        div = val._div$1(t3);
        t3 = val.$mod(0, A._BigIntImpl__BigIntImpl$from(58)).toInt$0(0);
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(t1, t3);
        enc = t1[t3] + enc;
      }
      for (t3 = dataBytes.length, zero = 0, _i = 0; _i < t3; ++_i)
        if (dataBytes[_i] === 0)
          ++zero;
        else
          break;
      if (0 >= t2)
        return A.ioore(t1, 0);
      return B.JSString_methods.$mul(t1[0], t3 - (t3 - zero)) + enc;
    },
    Base58Encoder_checkEncode(dataBytes) {
      var t1, checksum, t2;
      A.BytesUtils_validateListOfBytes(dataBytes);
      t1 = type$.int;
      dataBytes = A.List_List$unmodifiable(dataBytes, t1);
      checksum = B.JSArray_methods.sublist$2(A.SHA256_hash(A.SHA256_hash(dataBytes)), 0, 4);
      t2 = A.List_List$_of(dataBytes, type$.dynamic);
      B.JSArray_methods.addAll$1(t2, checksum);
      return A.Base58Encoder_encode(A.List_List$from(t2, true, t1), B.Base58Alphabets_0);
    },
    Base58Decoder_decode(data, base58alphabets) {
      var val, t2, t3, i, t4, charIndex, bytes, padLen,
        t1 = B.Map_0cXzp.$index(0, base58alphabets);
      t1.toString;
      val = $.$get$_BigIntImpl_zero();
      for (t2 = data.length, t3 = t2 - 1, i = 0; i < t2; ++i) {
        t4 = t3 - i;
        if (!(t4 >= 0))
          return A.ioore(data, t4);
        charIndex = B.JSString_methods.indexOf$1(t1, data[t4]);
        if (charIndex === -1)
          throw A.wrapException(B.MessageException_5ZN);
        val = val.$add(0, A._BigIntImpl__BigIntImpl$from(charIndex).$mul(0, A._BigIntImpl__BigIntImpl$from(58).pow$1(i)));
      }
      bytes = A.BigintUtils_toBytes(val, B.JSInt_methods._tdivFast$1((val._isNegative ? val.$negate(0) : val).get$bitLength(0) + 7, 8), B.C_Endian);
      for (t3 = t1.length, padLen = 0, i = 0; i < t2; ++i) {
        t4 = data[i];
        if (0 >= t3)
          return A.ioore(t1, 0);
        if (t4 === t1[0])
          ++padLen;
        else
          break;
      }
      t1 = type$.int;
      t2 = A.List_List$_of(A.List_List$filled(padLen, 0, false, t1), type$.dynamic);
      B.JSArray_methods.addAll$1(t2, bytes);
      return A.List_List$from(t2, true, t1);
    },
    Base58Alphabets: function Base58Alphabets(t0) {
      this._name = t0;
    },
    Base58ChecksumError: function Base58ChecksumError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    _BchBech32Utils_polyMod(values) {
      var _i, value, $top, valueBig, _i0, i, t2,
        t1 = type$.JSArray_BigInt,
        generator = [A._setArrayType([A._BigIntImpl__BigIntImpl$from(1), A._BigIntImpl__BigIntImpl$from(656907472481)], t1), A._setArrayType([A._BigIntImpl__BigIntImpl$from(2), A._BigIntImpl__BigIntImpl$from(522768456162)], t1), A._setArrayType([A._BigIntImpl__BigIntImpl$from(4), A._BigIntImpl__BigIntImpl$from(1044723512260)], t1), A._setArrayType([A._BigIntImpl__BigIntImpl$from(8), A._BigIntImpl__BigIntImpl$from(748107326120)], t1), A._setArrayType([A._BigIntImpl__BigIntImpl$from(16), A._BigIntImpl__BigIntImpl$from(130178868336)], t1)],
        chk = $.$get$_BigIntImpl_one();
      for (t1 = values.length, _i = 0; _i < values.length; values.length === t1 || (0, A.throwConcurrentModificationError)(values), ++_i) {
        value = values[_i];
        $top = chk.$shr(0, 35);
        valueBig = A._BigIntImpl__BigIntImpl$from(value);
        chk = chk.$and(0, A._BigIntImpl__BigIntImpl$from(34359738367)).$shl(0, 5).$xor(0, valueBig);
        for (_i0 = 0; _i0 < 5; ++_i0) {
          i = generator[_i0];
          if (0 >= i.length)
            return A.ioore(i, 0);
          t2 = $top.$and(0, i[0]).compareTo$1(0, $.$get$_BigIntImpl_zero());
          if (t2 !== 0) {
            if (1 >= i.length)
              return A.ioore(i, 1);
            chk = chk.$xor(0, i[1]);
          }
        }
      }
      return chk.$xor(0, $.$get$_BigIntImpl_one());
    },
    _BchBech32Utils_hrpExpand(hrp) {
      var expandedHrp,
        t1 = type$.Runes;
      t1 = A.MappedIterable_MappedIterable(new A.Runes(hrp), t1._eval$1("int(Iterable.E)")._as(new A._BchBech32Utils_hrpExpand_closure()), t1._eval$1("Iterable.E"), type$.int);
      expandedHrp = A.List_List$_of(t1, A._instanceType(t1)._eval$1("Iterable.E"));
      B.JSArray_methods.add$1(expandedHrp, 0);
      return expandedHrp;
    },
    _BchBech32Utils_computeChecksum(hrp, data) {
      var polymod, _list, i;
      type$.List_int._as(data);
      polymod = A._BchBech32Utils_polyMod(B.JSArray_methods.$add(B.JSArray_methods.$add(A._BchBech32Utils_hrpExpand(hrp), data), A._setArrayType([0, 0, 0, 0, 0, 0, 0, 0], type$.JSArray_int)));
      _list = J.JSArray_JSArray$allocateGrowable(8, type$.int);
      for (i = 0; i < 8; ++i)
        _list[i] = polymod.$shr(0, 5 * (7 - i)).$and(0, $.$get$_BchBech32Utils__mask5()).toInt$0(0);
      return _list;
    },
    _BchBech32Utils_verifyChecksum(hrp, data) {
      var t1;
      type$.List_int._as(data);
      t1 = A.List_List$_of(A._BchBech32Utils_hrpExpand(hrp), type$.int);
      B.JSArray_methods.addAll$1(t1, data);
      t1 = A._BchBech32Utils_polyMod(t1).compareTo$1(0, $.$get$_BigIntImpl_zero());
      return t1 === 0;
    },
    _BchBech32Utils_hrpExpand_closure: function _BchBech32Utils_hrpExpand_closure() {
    },
    Bech32Utils_polyMod(values) {
      var t1, chk, _i, $top, i,
        generator = [996825010, 642813549, 513874426, 1027748829, 705979059];
      for (t1 = values.length, chk = 1, _i = 0; _i < t1; ++_i) {
        $top = chk >>> 25;
        chk = ((chk & 33554431) << 5 ^ values[_i]) >>> 0;
        for (i = 0; i < 5; ++i)
          chk = (chk ^ ((B.JSInt_methods._shrBothPositive$1($top, i) & 1) !== 0 ? generator[i] : 0)) >>> 0;
      }
      return chk;
    },
    Bech32Utils_hrpExpand(hrp) {
      var t1, i,
        expand = A._setArrayType([], type$.JSArray_int);
      for (t1 = hrp.length, i = 0; i < t1; ++i)
        B.JSArray_methods.add$1(expand, hrp.charCodeAt(i) >>> 5);
      B.JSArray_methods.add$1(expand, 0);
      for (i = 0; i < t1; ++i)
        B.JSArray_methods.add$1(expand, hrp.charCodeAt(i) & 31);
      return expand;
    },
    Bech32Utils_computeChecksum(hrp, data, encoding) {
      var t3, polymod, i,
        t1 = type$.int,
        t2 = A.List_List$_of(A.Bech32Utils_hrpExpand(hrp), t1);
      B.JSArray_methods.addAll$1(t2, data);
      t2 = A.List_List$_of(t2, t1);
      t2.push(0);
      t2.push(0);
      t2.push(0);
      t2.push(0);
      t2.push(0);
      t2.push(0);
      t2 = A.Bech32Utils_polyMod(t2);
      t3 = B.Map_xI32l.$index(0, encoding);
      t3.toString;
      polymod = (t2 ^ t3) >>> 0;
      t3 = [];
      for (i = 0; i < 6; ++i)
        t3.push(B.JSInt_methods._shrReceiverPositive$1(polymod, 5 * (5 - i)) & 31);
      return A.List_List$from(t3, true, t1);
    },
    Bech32Utils_verifyChecksum(hrp, data, encoding) {
      var t1;
      A._asString(hrp);
      type$.List_int._as(data);
      type$.Bech32Encodings._as(encoding);
      t1 = A.List_List$_of(A.Bech32Utils_hrpExpand(hrp), type$.int);
      B.JSArray_methods.addAll$1(t1, data);
      return A.Bech32Utils_polyMod(t1) === B.Map_xI32l.$index(0, encoding);
    },
    Bech32Encodings: function Bech32Encodings(t0) {
      this._name = t0;
    },
    Bech32ChecksumError: function Bech32ChecksumError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    Bech32BaseUtils_convertToBase32(data) {
      var convData = A.Bech32BaseUtils__convertBits(data, 8, 5, true);
      if (convData == null)
        throw A.wrapException(B.ArgumentException_CKK);
      return convData;
    },
    Bech32BaseUtils_convertFromBase32(data) {
      var convData = A.Bech32BaseUtils__convertBits(data, 5, 8, false);
      if (convData == null)
        throw A.wrapException(B.ArgumentException_wwD);
      return convData;
    },
    Bech32BaseUtils__convertBits(data, fromBits, toBits, pad) {
      var t1, acc, bits, t2,
        maxOutVal = B.JSInt_methods._shlPositive$1(1, toBits) - 1,
        maxAcc = B.JSInt_methods.$shl(1, fromBits + toBits - 1) - 1,
        ret = A._setArrayType([], type$.JSArray_int);
      for (t1 = J.get$iterator$ax(data), acc = 0, bits = 0; t1.moveNext$0();) {
        t2 = t1.get$current();
        if (t2 < 0 || B.JSInt_methods._shrOtherPositive$1(t2, fromBits) !== 0)
          return null;
        acc = ((B.JSInt_methods._shlPositive$1(acc, fromBits) | t2) & maxAcc) >>> 0;
        bits += fromBits;
        for (; bits >= toBits;) {
          bits -= toBits;
          B.JSArray_methods.add$1(ret, (B.JSInt_methods._shrReceiverPositive$1(acc, bits) & maxOutVal) >>> 0);
        }
      }
      if (pad) {
        if (bits > 0)
          B.JSArray_methods.add$1(ret, (B.JSInt_methods.$shl(acc, toBits - bits) & maxOutVal) >>> 0);
      } else if (bits >= fromBits || (B.JSInt_methods.$shl(acc, toBits - bits) & maxOutVal) >>> 0 !== 0)
        return null;
      return A.List_List$from(ret, true, type$.int);
    },
    Bech32EncoderBase_encodeBech32(hrp, data, sep, computeChecksum) {
      var checksum = computeChecksum.call$2(hrp, data),
        t1 = A.List_List$_of(data, type$.dynamic);
      B.JSArray_methods.addAll$1(t1, checksum);
      data = A.List_List$from(t1, true, type$.int);
      t1 = A._arrayInstanceType(data);
      return hrp + sep + new A.MappedListIterable(data, t1._eval$1("String(1)")._as(new A.Bech32EncoderBase_encodeBech32_closure()), t1._eval$1("MappedListIterable<1,String>")).join$0(0);
    },
    Bech32DecoderBase_decodeBech32(bechStr, sep, checksumLen, verifyChecksum) {
      var sepPos, hrp, t1, dataPart, t2, intData,
        hasLowerCase = B.JSString_methods.contains$1(bechStr, A.RegExp_RegExp("[a-z]", true)),
        hasUpperCase = B.JSString_methods.contains$1(bechStr, A.RegExp_RegExp("[A-Z]", true));
      if (hasLowerCase && hasUpperCase)
        throw A.wrapException(B.ArgumentException_IrH);
      bechStr = bechStr.toLowerCase();
      sepPos = B.JSString_methods.lastIndexOf$1(bechStr, sep);
      if (sepPos === -1)
        throw A.wrapException(B.ArgumentException_iZH);
      hrp = B.JSString_methods.substring$2(bechStr, 0, sepPos);
      if (hrp.length !== 0) {
        t1 = new A.CodeUnits(hrp);
        t1 = t1.any$1(t1, new A.Bech32DecoderBase_decodeBech32_closure());
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.ArgumentException$("Invalid bech32 format (HRP not valid: " + hrp + ")", null));
      dataPart = B.JSString_methods.substring$1(bechStr, sepPos + 1);
      if (dataPart.length >= checksumLen + 1) {
        t1 = new A.CodeUnits(dataPart);
        t1 = t1.any$1(t1, new A.Bech32DecoderBase_decodeBech32_closure0());
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(B.ArgumentException_8to);
      t1 = type$.CodeUnits;
      t2 = t1._eval$1("MappedListIterable<ListBase.E,int>");
      intData = A.List_List$_of(new A.MappedListIterable(new A.CodeUnits(dataPart), t1._eval$1("int(ListBase.E)")._as(new A.Bech32DecoderBase_decodeBech32_closure1()), t2), t2._eval$1("ListIterable.E"));
      if (!verifyChecksum.call$2(hrp, intData))
        throw A.wrapException(B.Bech32ChecksumError_nNb);
      return new A.Tuple(hrp, A.List_List$from(B.JSArray_methods.sublist$2(intData, 0, intData.length - checksumLen), true, type$.int), type$.Tuple_of_String_and_List_int);
    },
    Bech32EncoderBase_encodeBech32_closure: function Bech32EncoderBase_encodeBech32_closure() {
    },
    Bech32DecoderBase_decodeBech32_closure: function Bech32DecoderBase_decodeBech32_closure() {
    },
    Bech32DecoderBase_decodeBech32_closure0: function Bech32DecoderBase_decodeBech32_closure0() {
    },
    Bech32DecoderBase_decodeBech32_closure1: function Bech32DecoderBase_decodeBech32_closure1() {
    },
    AdaByronIcarusAddrEncoder: function AdaByronIcarusAddrEncoder() {
    },
    AdaByronLegacyAddrEncoder: function AdaByronLegacyAddrEncoder() {
    },
    AdaShelleyAddrEncoder: function AdaShelleyAddrEncoder() {
    },
    ADANetwork: function ADANetwork(t0) {
      this.name = t0;
    },
    AlgoAddrEncoder: function AlgoAddrEncoder() {
    },
    AptosAddressUtils_praseAddressBytes(bytes) {
      var t1 = J.getInterceptor$asx(bytes);
      if (t1.get$length(bytes) !== 32)
        throw A.wrapException(A.AddressConverterException$("Invalid aptos address bytes length.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", 32, "length", t1.get$length(bytes)], type$.String, type$.dynamic)));
      return bytes;
    },
    AptosAddressUtils_addressToBytes(address) {
      var t1, bytes, byte;
      address = A.StringUtils_strip0x(address);
      t1 = address.length;
      bytes = A.BytesUtils_tryFromHexString(address, t1 === 1 || t1 === 63);
      if (bytes != null) {
        t1 = bytes.length;
        t1 = t1 !== 32 && t1 !== 1;
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.AddressConverterException$("Invalid aptos address.", A.LinkedHashMap_LinkedHashMap$_literal(["address", address], type$.String, type$.dynamic)));
      t1 = bytes.length;
      if (t1 === 1) {
        if (0 >= t1)
          return A.ioore(bytes, 0);
        byte = bytes[0];
        if (byte >= 16)
          throw A.wrapException(A.AddressConverterException$("Invalid special address.", A.LinkedHashMap_LinkedHashMap$_literal(["address", A.BytesUtils_toHexString(bytes, true, null)], type$.String, type$.dynamic)));
        bytes = A.List_List$filled(32, 0, false, type$.int);
        B.JSArray_methods.set$last(bytes, byte);
      }
      return A.AptosAddressUtils_praseAddressBytes(bytes);
    },
    AptosSingleKeyEd25519AddrEncoder: function AptosSingleKeyEd25519AddrEncoder() {
    },
    AptosSingleKeySecp256k1AddrEncoder: function AptosSingleKeySecp256k1AddrEncoder() {
    },
    AptosAddrEncoder: function AptosAddrEncoder() {
    },
    AtomAddressUtils_decode(address, hrp) {
      var decode, addressBytes, e, decode0, t1, t2, exception;
      try {
        decode0 = A.Bech32DecoderBase_decodeBech32(address, "1", 6, A.bech32_base_Bech32Utils_verifyChecksum$closure());
        decode = new A.Tuple(decode0.item1, A.Bech32BaseUtils_convertFromBase32(decode0.item2), type$.Tuple_of_String_and_List_int);
        addressBytes = decode.item2;
        t1 = addressBytes;
        t2 = J.getInterceptor$asx(t1);
        if (t2.get$length(t1) !== 20 && t2.get$length(t1) !== 32)
          A.throwExpression(A.AddressConverterException$("Invalid address bytes length.", A.LinkedHashMap_LinkedHashMap$_literal(["length", t2.get$length(t1), "Excepted", "20 or 32"], type$.String, type$.dynamic)));
        t1 = decode.item1;
        A.List_List$unmodifiable(addressBytes, type$.int);
        return new A.AtomAddressDecodeResult(t1);
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.AddressConverterException)
          throw exception;
        else {
          e = t1;
          t1 = A.AddressConverterException$("Invalid atom address.", A.LinkedHashMap_LinkedHashMap$_literal(["address", address, "error", J.toString$0$(e)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
      }
    },
    AtomAddressDecodeResult: function AtomAddressDecodeResult(t0) {
      this.hrp = t0;
    },
    AtomAddrEncoder: function AtomAddrEncoder() {
    },
    AtomEthSecp256k1AddrEncoder: function AtomEthSecp256k1AddrEncoder() {
    },
    AtomNist256P1AddrEncoder: function AtomNist256P1AddrEncoder() {
    },
    AtomEd25519AddrEncoder: function AtomEd25519AddrEncoder() {
    },
    AvaxPChainAddrEncoder: function AvaxPChainAddrEncoder() {
    },
    AvaxXChainAddrEncoder: function AvaxXChainAddrEncoder() {
    },
    EgldAddrEncoder: function EgldAddrEncoder() {
    },
    BlockchainAddressEncoder: function BlockchainAddressEncoder() {
    },
    EosAddrEncoder: function EosAddrEncoder() {
    },
    ErgoNetworkTypes: function ErgoNetworkTypes() {
    },
    ErgoP2PKHAddrEncoder: function ErgoP2PKHAddrEncoder() {
    },
    EthAddrUtils__checksumEncode(addr) {
      var t3, out, addrHexDigest,
        t1 = A.StringUtils_encode(addr.toLowerCase(), B.StringEncoding_1),
        t2 = type$.int,
        h = new A.Keccack(32, A.List_List$filled(25, 0, false, t2), A.List_List$filled(25, 0, false, t2), A.List_List$filled(200, 0, false, t2));
      h._Keccack$1(64);
      t3 = type$.List_int;
      h.super$_Keccack$update(t3._as(t1));
      out = A.List_List$filled(32, 0, false, t2);
      t3._as(out);
      if (!h._hash$_finished)
        h._padAndPermute$1(1);
      else
        h._pos = 0;
      h._squeeze$1(out);
      h.reset$0();
      addrHexDigest = A.BytesUtils_toHexString(out, true, null);
      return B.JSArray_methods.join$0(new A.ListMapView(A._setArrayType(addr.split(""), type$.JSArray_String), type$.ListMapView_String).get$entries().map$1$1(0, new A.EthAddrUtils__checksumEncode_closure(addrHexDigest), type$.String).toList$0(0));
    },
    EthAddrUtils_toChecksumAddress(addr) {
      var wihtoutPrefix = A.StringUtils_strip0x(addr),
        t1 = $.$get$StringUtils__hexBytesRegex();
      if (!t1._nativeRegExp.test(wihtoutPrefix))
        throw A.wrapException(A.AddressConverterException$("Invalid Ethereum address.", A.LinkedHashMap_LinkedHashMap$_literal(["address", addr], type$.String, type$.dynamic)));
      A.AddrDecUtils_validateLength(wihtoutPrefix, 40);
      return "0x" + A.EthAddrUtils__checksumEncode(wihtoutPrefix);
    },
    EthAddrUtils__checksumEncode_closure: function EthAddrUtils__checksumEncode_closure(t0) {
      this.addrHexDigest = t0;
    },
    EthAddrDecoder: function EthAddrDecoder() {
    },
    EthAddrEncoder: function EthAddrEncoder() {
    },
    AddressConverterException$(message, details) {
      return new A.AddressConverterException(message, details);
    },
    AddressConverterException: function AddressConverterException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    FilSecp256k1AddrEncoder: function FilSecp256k1AddrEncoder() {
    },
    IcxAddrEncoder: function IcxAddrEncoder() {
    },
    InjAddrEncoder: function InjAddrEncoder() {
    },
    NanoAddrEncoder: function NanoAddrEncoder() {
    },
    NearAddrEncoder: function NearAddrEncoder() {
    },
    NeoAddrEncoder: function NeoAddrEncoder() {
    },
    OkexAddrEncoder: function OkexAddrEncoder() {
    },
    OneAddrEncoder: function OneAddrEncoder() {
    },
    P2PKHAddrEncoder: function P2PKHAddrEncoder() {
    },
    BchP2PKHAddrEncoder: function BchP2PKHAddrEncoder() {
    },
    P2SHAddrEncoder: function P2SHAddrEncoder() {
    },
    BchP2SHAddrEncoder: function BchP2SHAddrEncoder() {
    },
    P2TRAddrEncoder: function P2TRAddrEncoder() {
    },
    P2WPKHAddrEncoder: function P2WPKHAddrEncoder() {
    },
    SolAddrDecoder: function SolAddrDecoder() {
    },
    SolAddrEncoder: function SolAddrEncoder() {
    },
    SubstrateEd25519AddrEncoder: function SubstrateEd25519AddrEncoder() {
    },
    SubstrateSr25519AddrEncoder: function SubstrateSr25519AddrEncoder() {
    },
    SubstrateSecp256k1AddrEncoder: function SubstrateSecp256k1AddrEncoder() {
    },
    SuiSecp256k1AddrEncoder: function SuiSecp256k1AddrEncoder() {
    },
    SuiSecp256r1AddrEncoder: function SuiSecp256r1AddrEncoder() {
    },
    SuiAddrEncoder: function SuiAddrEncoder() {
    },
    TonAddressUtils_isFriendly(source) {
      var t1;
      if (source.length === 48) {
        t1 = $.$get$TonAddressUtils__friendlyRegixAddress();
        t1 = t1._nativeRegExp.test(source);
      } else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    TonAddressUtils_isRaw(source) {
      var hashBytes, exception,
        parts = A._setArrayType(source.split(":"), type$.JSArray_String);
      try {
        A.int_parse(J.$index$asx(parts, 0), null);
        hashBytes = A.BytesUtils_fromHexString(J.$index$asx(parts, 1), false);
        if (J.get$length$asx(hashBytes) === 32)
          return true;
        return false;
      } catch (exception) {
        return false;
      }
    },
    TonAddressUtils_fromRawAddress(address) {
      var parts, workChain, hash, t1, exception;
      try {
        parts = A._setArrayType(address.split(":"), type$.JSArray_String);
        workChain = A.int_parse(J.$index$asx(parts, 0), null);
        hash = A.BytesUtils_fromHexString(J.$index$asx(parts, 1), false);
        t1 = A.List_List$unmodifiable(A._setArrayType([], type$.JSArray_FriendlyAddressFlags), type$.FriendlyAddressFlags);
        return new A.DecodeAddressResult(workChain, hash, t1);
      } catch (exception) {
        t1 = A.AddressConverterException$("Invalid raw address", A.LinkedHashMap_LinkedHashMap$_literal(["address", address], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    TonAddressUtils_encodeAddress(bounceable, hash, testOnly, urlSafe, workChain) {
      var t1, t2, addr, encode,
        tag = bounceable ? 17 : 81;
      if (testOnly)
        tag |= 128;
      t1 = [tag, workChain & 255];
      B.JSArray_methods.addAll$1(t1, hash);
      t2 = type$.int;
      addr = A.List_List$unmodifiable(t1, t2);
      t1 = A.List_List$_of(addr, t2);
      B.JSArray_methods.addAll$1(t1, A.Crc16_quickIntDigest(addr));
      encode = A.StringUtils_decode(t1, false, B.StringEncoding_2);
      t1 = A.stringReplaceAllUnchecked(encode, "+", "-");
      return A.stringReplaceAllUnchecked(t1, "/", "_");
    },
    TonAddressUtils_decodeAddress(address) {
      var data, t1, addr, crc, calcedCrc, flags, tag, t2, workchain;
      if (A.TonAddressUtils_isFriendly(address)) {
        data = A.StringUtils_encode(address, B.StringEncoding_2);
        t1 = data.length;
        if (t1 !== 36)
          A.throwExpression(A.AddressConverterException$("Unknown address type. byte length is not equal to 36", A.LinkedHashMap_LinkedHashMap$_literal(["length", t1], type$.String, type$.dynamic)));
        addr = B.NativeUint8List_methods.sublist$2(data, 0, 34);
        crc = B.NativeUint8List_methods.sublist$2(data, 34, 36);
        calcedCrc = A.Crc16_quickIntDigest(addr);
        if (!A.BytesUtils_bytesEqual(crc, calcedCrc))
          A.throwExpression(A.AddressConverterException$("Invalid checksum", A.LinkedHashMap_LinkedHashMap$_literal(["expected", calcedCrc, "checksum", crc], type$.String, type$.dynamic)));
        flags = A._setArrayType([], type$.JSArray_FriendlyAddressFlags);
        t1 = addr.length;
        if (0 >= t1)
          return A.ioore(addr, 0);
        tag = addr[0];
        if ((tag & 128) !== 0) {
          B.JSArray_methods.add$1(flags, B.FriendlyAddressFlags_128);
          tag ^= 128;
        }
        t2 = tag === 17;
        if (!t2 && tag !== 81)
          A.throwExpression(A.AddressConverterException$("Unknown address tag", A.LinkedHashMap_LinkedHashMap$_literal(["tag", tag], type$.String, type$.dynamic)));
        if (t2)
          B.JSArray_methods.add$1(flags, B.FriendlyAddressFlags_17);
        else
          B.JSArray_methods.add$1(flags, B.FriendlyAddressFlags_81);
        if (1 >= t1)
          return A.ioore(addr, 1);
        workchain = addr[1];
        if (workchain === 255)
          workchain = -1;
        return new A.DecodeAddressResult(workchain, B.NativeUint8List_methods.sublist$2(addr, 2, 34), A.List_List$unmodifiable(flags, type$.FriendlyAddressFlags));
      } else if (A.TonAddressUtils_isRaw(address))
        return A.TonAddressUtils_fromRawAddress(address);
      else
        throw A.wrapException(A.AddressConverterException$("Unknown address type.", A.LinkedHashMap_LinkedHashMap$_literal(["address", address], type$.String, type$.dynamic)));
    },
    DecodeAddressResult: function DecodeAddressResult(t0, t1, t2) {
      this.workchain = t0;
      this.hash = t1;
      this.flags = t2;
    },
    FriendlyAddressFlags: function FriendlyAddressFlags(t0) {
      this.flag = t0;
    },
    TonAddrDecoder: function TonAddrDecoder() {
    },
    TonAddrEncoder: function TonAddrEncoder() {
    },
    TrxAddressUtils_fromHexBytes(bytes) {
      var t1,
        validateBytes = A.AddrDecUtils_validateAndRemovePrefixBytes(bytes, B.List_65);
      A.AddrDecUtils_validateBytesLength(validateBytes, 20);
      t1 = A.List_List$_of(B.List_65, type$.dynamic);
      B.JSArray_methods.addAll$1(t1, validateBytes);
      return A.Base58Encoder_checkEncode(A.List_List$from(t1, true, type$.int));
    },
    TrxAddrDecoder: function TrxAddrDecoder() {
    },
    TrxAddrEncoder: function TrxAddrEncoder() {
    },
    XlmAddrTypes_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_FN2, new A.XlmAddrTypes_fromTag_closure(tag), new A.XlmAddrTypes_fromTag_closure0(tag));
    },
    _XlmAddrUtils_computeChecksum(payloadBytes) {
      var t1 = A.XModemCrc__calculateXmodemCrc(type$.List_int._as(payloadBytes)),
        t2 = A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>");
      t1 = A.List_List$_of(new A.ReversedListIterable(t1, t2), t2._eval$1("ListIterable.E"));
      return t1;
    },
    XlmAddrTypes: function XlmAddrTypes(t0, t1) {
      this.value = t0;
      this.name = t1;
    },
    XlmAddrTypes_fromTag_closure: function XlmAddrTypes_fromTag_closure(t0) {
      this.tag = t0;
    },
    XlmAddrTypes_fromTag_closure0: function XlmAddrTypes_fromTag_closure0(t0) {
      this.tag = t0;
    },
    XlmAddrTypes_fromTag__closure: function XlmAddrTypes_fromTag__closure() {
    },
    XlmAddrDecoderResult: function XlmAddrDecoderResult(t0, t1, t2) {
      this.type = t0;
      this.baseAddress = t1;
      this.accountId = t2;
    },
    XlmAddrDecoder: function XlmAddrDecoder() {
    },
    XlmAddrEncoder: function XlmAddrEncoder() {
    },
    XmrAddrEncoder: function XmrAddrEncoder() {
    },
    XrpAddrEncoder: function XrpAddrEncoder() {
    },
    XtzAddrPrefixes: function XtzAddrPrefixes() {
    },
    XtzAddrEncoder: function XtzAddrEncoder() {
    },
    ZilAddrEncoder: function ZilAddrEncoder() {
    },
    Bip32KeyIndex_Bip32KeyIndex$hardenIndex(index) {
      return A.Bip32KeyIndex_Bip32KeyIndex((index | 2147483648) >>> 0);
    },
    Bip32KeyIndex_Bip32KeyIndex(index) {
      if (index < 0 || index > 4294967295)
        throw A.wrapException(A.ArgumentException$("Invalid key index (" + index + ")", null));
      return new A.Bip32KeyIndex(index);
    },
    Bip32KeyIndex: function Bip32KeyIndex(t0) {
      this.index = t0;
    },
    Bip32KeyNetVersions_Bip32KeyNetVersions(pubNetVer, privNetVer) {
      var t1;
      if (pubNetVer.length !== 4 || privNetVer.length !== 4)
        throw A.wrapException(B.ArgumentException_4i3);
      A.BytesUtils_validateListOfBytes(pubNetVer);
      t1 = type$.int;
      A.List_List$unmodifiable(pubNetVer, t1);
      A.BytesUtils_validateListOfBytes(privNetVer);
      A.List_List$unmodifiable(privNetVer, t1);
      return new A.Bip32KeyNetVersions();
    },
    Bip32KeyNetVersions: function Bip32KeyNetVersions() {
    },
    BipCoins_fromName($name, proposal) {
      switch (proposal) {
        case B.BipProposal_bip44:
          return A.Bip44Coins_fromName($name);
        case B.BipProposal_bip49:
          return A.Bip49Coins_fromName($name);
        case B.BipProposal_bip84:
          return A.Bip84Coins_fromName($name);
        case B.BipProposal_bip86:
          return A.Bip86Coins_fromName($name);
        default:
          return null;
      }
    },
    BipCoins: function BipCoins() {
    },
    BipProposal: function BipProposal(t0) {
      this.name = t0;
    },
    Bip44Coins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$Bip44Coins__coinToConf();
        t1 = new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>")).firstWhere$1(0, new A.Bip44Coins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    Bip44Coins: function Bip44Coins(t0) {
      this.name = t0;
    },
    Bip44Coins_fromName_closure: function Bip44Coins_fromName_closure(t0) {
      this.name = t0;
    },
    Bip44Conf_akashNetwork_closure: function Bip44Conf_akashNetwork_closure() {
    },
    Bip44Conf_algorand_closure: function Bip44Conf_algorand_closure() {
    },
    Bip44Conf_aptos_closure: function Bip44Conf_aptos_closure() {
    },
    Bip44Conf_aptosSingleKeySecp256k1_closure: function Bip44Conf_aptosSingleKeySecp256k1_closure() {
    },
    Bip44Conf_aptosSingleKeyEd25519_closure: function Bip44Conf_aptosSingleKeyEd25519_closure() {
    },
    Bip44Conf_avaxCChain_closure: function Bip44Conf_avaxCChain_closure() {
    },
    Bip44Conf_avaxPChain_closure: function Bip44Conf_avaxPChain_closure() {
    },
    Bip44Conf_avaxXChain_closure: function Bip44Conf_avaxXChain_closure() {
    },
    Bip44Conf_axelar_closure: function Bip44Conf_axelar_closure() {
    },
    Bip44Conf_bandProtocol_closure: function Bip44Conf_bandProtocol_closure() {
    },
    Bip44Conf_binanceChain_closure: function Bip44Conf_binanceChain_closure() {
    },
    Bip44Conf_binanceSmartChain_closure: function Bip44Conf_binanceSmartChain_closure() {
    },
    Bip44Conf_bitcoinMainNet_closure: function Bip44Conf_bitcoinMainNet_closure() {
    },
    Bip44Conf_bitcoinTestNet_closure: function Bip44Conf_bitcoinTestNet_closure() {
    },
    Bip44Conf_bitcoinCashMainNet_closure: function Bip44Conf_bitcoinCashMainNet_closure() {
    },
    Bip44Conf_bitcoinCashTestNet_closure: function Bip44Conf_bitcoinCashTestNet_closure() {
    },
    Bip44Conf_bitcoinCashSlpMainNet_closure: function Bip44Conf_bitcoinCashSlpMainNet_closure() {
    },
    Bip44Conf_bitcoinCashSlpTestNet_closure: function Bip44Conf_bitcoinCashSlpTestNet_closure() {
    },
    Bip44Conf_bitcoinSvMainNet_closure: function Bip44Conf_bitcoinSvMainNet_closure() {
    },
    Bip44Conf_bitcoinSvTestNet_closure: function Bip44Conf_bitcoinSvTestNet_closure() {
    },
    Bip44Conf_cardanoByronIcarus_closure: function Bip44Conf_cardanoByronIcarus_closure() {
    },
    Bip44Conf_cardanoByronLedger_closure: function Bip44Conf_cardanoByronLedger_closure() {
    },
    Bip44Conf_cardanoByronIcarusTestnet_closure: function Bip44Conf_cardanoByronIcarusTestnet_closure() {
    },
    Bip44Conf_cardanoByronLedgerTestnet_closure: function Bip44Conf_cardanoByronLedgerTestnet_closure() {
    },
    Bip44Conf_celo_closure: function Bip44Conf_celo_closure() {
    },
    Bip44Conf_certik_closure: function Bip44Conf_certik_closure() {
    },
    Bip44Conf_chihuahua_closure: function Bip44Conf_chihuahua_closure() {
    },
    Bip44Conf_cosmos_closure: function Bip44Conf_cosmos_closure() {
    },
    Bip44Conf_cosmosTestnet_closure: function Bip44Conf_cosmosTestnet_closure() {
    },
    Bip44Conf_cosmosEthSecp256k1_closure: function Bip44Conf_cosmosEthSecp256k1_closure() {
    },
    Bip44Conf_cosmosTestnetEthSecp256k1_closure: function Bip44Conf_cosmosTestnetEthSecp256k1_closure() {
    },
    Bip44Conf_cosmosNist256p1_closure: function Bip44Conf_cosmosNist256p1_closure() {
    },
    Bip44Conf_cosmosTestnetNist256p1_closure: function Bip44Conf_cosmosTestnetNist256p1_closure() {
    },
    Bip44Conf_cosmosEd25519_closure: function Bip44Conf_cosmosEd25519_closure() {
    },
    Bip44Conf_cosmosTestnetEd25519_closure: function Bip44Conf_cosmosTestnetEd25519_closure() {
    },
    Bip44Conf_dashMainNet_closure: function Bip44Conf_dashMainNet_closure() {
    },
    Bip44Conf_dashTestNet_closure: function Bip44Conf_dashTestNet_closure() {
    },
    Bip44Conf_dogecoinMainNet_closure: function Bip44Conf_dogecoinMainNet_closure() {
    },
    Bip44Conf_dogecoinTestNet_closure: function Bip44Conf_dogecoinTestNet_closure() {
    },
    Bip44Conf_pepeMainnet_closure: function Bip44Conf_pepeMainnet_closure() {
    },
    Bip44Conf_pepeTestnet_closure: function Bip44Conf_pepeTestnet_closure() {
    },
    Bip44Conf_ecashMainNet_closure: function Bip44Conf_ecashMainNet_closure() {
    },
    Bip44Conf_ecashTestNet_closure: function Bip44Conf_ecashTestNet_closure() {
    },
    Bip44Conf_elrond_closure: function Bip44Conf_elrond_closure() {
    },
    Bip44Conf_eos_closure: function Bip44Conf_eos_closure() {
    },
    Bip44Conf_ergoMainNet_closure: function Bip44Conf_ergoMainNet_closure() {
    },
    Bip44Conf_ergoTestNet_closure: function Bip44Conf_ergoTestNet_closure() {
    },
    Bip44Conf_ethereum_closure: function Bip44Conf_ethereum_closure() {
    },
    Bip44Conf_ethereumTestnet_closure: function Bip44Conf_ethereumTestnet_closure() {
    },
    Bip44Conf_ethereumClassic_closure: function Bip44Conf_ethereumClassic_closure() {
    },
    Bip44Conf_fantomOpera_closure: function Bip44Conf_fantomOpera_closure() {
    },
    Bip44Conf_filecoin_closure: function Bip44Conf_filecoin_closure() {
    },
    Bip44Conf_harmonyOneMetamask_closure: function Bip44Conf_harmonyOneMetamask_closure() {
    },
    Bip44Conf_harmonyOneEth_closure: function Bip44Conf_harmonyOneEth_closure() {
    },
    Bip44Conf_harmonyOneAtom_closure: function Bip44Conf_harmonyOneAtom_closure() {
    },
    Bip44Conf_huobiChain_closure: function Bip44Conf_huobiChain_closure() {
    },
    Bip44Conf_icon_closure: function Bip44Conf_icon_closure() {
    },
    Bip44Conf_injective_closure: function Bip44Conf_injective_closure() {
    },
    Bip44Conf_irisNet_closure: function Bip44Conf_irisNet_closure() {
    },
    Bip44Conf_kava_closure: function Bip44Conf_kava_closure() {
    },
    Bip44Conf_kusamaEd25519Slip_closure: function Bip44Conf_kusamaEd25519Slip_closure() {
    },
    Bip44Conf_kusamaTestnetEd25519Slip_closure: function Bip44Conf_kusamaTestnetEd25519Slip_closure() {
    },
    Bip44Conf_litecoinMainNet_closure: function Bip44Conf_litecoinMainNet_closure() {
    },
    Bip44Conf_litecoinTestNet_closure: function Bip44Conf_litecoinTestNet_closure() {
    },
    Bip44Conf_moneroEd25519Slip_closure: function Bip44Conf_moneroEd25519Slip_closure() {
    },
    Bip44Conf_moneroSecp256k1_closure: function Bip44Conf_moneroSecp256k1_closure() {
    },
    Bip44Conf_nano_closure: function Bip44Conf_nano_closure() {
    },
    Bip44Conf_nearProtocol_closure: function Bip44Conf_nearProtocol_closure() {
    },
    Bip44Conf_neo_closure: function Bip44Conf_neo_closure() {
    },
    Bip44Conf_nineChroniclesGold_closure: function Bip44Conf_nineChroniclesGold_closure() {
    },
    Bip44Conf_okexChainEth_closure: function Bip44Conf_okexChainEth_closure() {
    },
    Bip44Conf_okexChainAtom_closure: function Bip44Conf_okexChainAtom_closure() {
    },
    Bip44Conf_okexChainAtomOld_closure: function Bip44Conf_okexChainAtomOld_closure() {
    },
    Bip44Conf_ontology_closure: function Bip44Conf_ontology_closure() {
    },
    Bip44Conf_osmosis_closure: function Bip44Conf_osmosis_closure() {
    },
    Bip44Conf_piNetwork_closure: function Bip44Conf_piNetwork_closure() {
    },
    Bip44Conf_polkadotEd25519Slip_closure: function Bip44Conf_polkadotEd25519Slip_closure() {
    },
    Bip44Conf_polkadotTestnetEd25519Slip_closure: function Bip44Conf_polkadotTestnetEd25519Slip_closure() {
    },
    Bip44Conf_polygon_closure: function Bip44Conf_polygon_closure() {
    },
    Bip44Conf_ripple_closure: function Bip44Conf_ripple_closure() {
    },
    Bip44Conf_rippleTestnet_closure: function Bip44Conf_rippleTestnet_closure() {
    },
    Bip44Conf_rippleEd25519_closure: function Bip44Conf_rippleEd25519_closure() {
    },
    Bip44Conf_rippleTestnetEd25519_closure: function Bip44Conf_rippleTestnetEd25519_closure() {
    },
    Bip44Conf_secretNetworkOld_closure: function Bip44Conf_secretNetworkOld_closure() {
    },
    Bip44Conf_secretNetworkNew_closure: function Bip44Conf_secretNetworkNew_closure() {
    },
    Bip44Conf_solana_closure: function Bip44Conf_solana_closure() {
    },
    Bip44Conf_solanaTestnet_closure: function Bip44Conf_solanaTestnet_closure() {
    },
    Bip44Conf_stellar_closure: function Bip44Conf_stellar_closure() {
    },
    Bip44Conf_stellarTestnet_closure: function Bip44Conf_stellarTestnet_closure() {
    },
    Bip44Conf_terra_closure: function Bip44Conf_terra_closure() {
    },
    Bip44Conf_tezos_closure: function Bip44Conf_tezos_closure() {
    },
    Bip44Conf_theta_closure: function Bip44Conf_theta_closure() {
    },
    Bip44Conf_tron_closure: function Bip44Conf_tron_closure() {
    },
    Bip44Conf_tronTestnet_closure: function Bip44Conf_tronTestnet_closure() {
    },
    Bip44Conf_vechain_closure: function Bip44Conf_vechain_closure() {
    },
    Bip44Conf_verge_closure: function Bip44Conf_verge_closure() {
    },
    Bip44Conf_zcashMainNet_closure: function Bip44Conf_zcashMainNet_closure() {
    },
    Bip44Conf_zcashTestNet_closure: function Bip44Conf_zcashTestNet_closure() {
    },
    Bip44Conf_zilliqa_closure: function Bip44Conf_zilliqa_closure() {
    },
    Bip44Conf_tonMainnet_closure: function Bip44Conf_tonMainnet_closure() {
    },
    Bip44Conf_tonTestnet_closure: function Bip44Conf_tonTestnet_closure() {
    },
    Bip44Conf_electraProtocolMainNet_closure: function Bip44Conf_electraProtocolMainNet_closure() {
    },
    Bip44Conf_electraProtocolTestNet_closure: function Bip44Conf_electraProtocolTestNet_closure() {
    },
    Bip44Conf_suiSecp256k1_closure: function Bip44Conf_suiSecp256k1_closure() {
    },
    Bip44Conf_suiSecp256r1_closure: function Bip44Conf_suiSecp256r1_closure() {
    },
    Bip44Conf_suiEd25519_closure: function Bip44Conf_suiEd25519_closure() {
    },
    Bip49Coins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$Bip49Coins__coinToConf();
        t1 = new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>")).firstWhere$1(0, new A.Bip49Coins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    Bip49Coins: function Bip49Coins(t0) {
      this.name = t0;
    },
    Bip49Coins_fromName_closure: function Bip49Coins_fromName_closure(t0) {
      this.name = t0;
    },
    Bip49Conf_dashMainNet_closure: function Bip49Conf_dashMainNet_closure() {
    },
    Bip49Conf_dashTestNet_closure: function Bip49Conf_dashTestNet_closure() {
    },
    Bip49Conf_dogecoinMainNet_closure: function Bip49Conf_dogecoinMainNet_closure() {
    },
    Bip49Conf_dogecoinTestNet_closure: function Bip49Conf_dogecoinTestNet_closure() {
    },
    Bip49Conf_litecoinMainNet_closure: function Bip49Conf_litecoinMainNet_closure() {
    },
    Bip49Conf_litecoinTestNet_closure: function Bip49Conf_litecoinTestNet_closure() {
    },
    Bip49Conf_zcashMainNet_closure: function Bip49Conf_zcashMainNet_closure() {
    },
    Bip49Conf_zcashTestNet_closure: function Bip49Conf_zcashTestNet_closure() {
    },
    Bip49Conf_bitcoinMainNet_closure: function Bip49Conf_bitcoinMainNet_closure() {
    },
    Bip49Conf_bitcoinTestNet_closure: function Bip49Conf_bitcoinTestNet_closure() {
    },
    Bip49Conf_bitcoinSvMainNet_closure: function Bip49Conf_bitcoinSvMainNet_closure() {
    },
    Bip49Conf_bitcoinSvTestNet_closure: function Bip49Conf_bitcoinSvTestNet_closure() {
    },
    Bip49Conf_bitcoinCashMainNet_closure: function Bip49Conf_bitcoinCashMainNet_closure() {
    },
    Bip49Conf_bitcoinCashTestNet_closure: function Bip49Conf_bitcoinCashTestNet_closure() {
    },
    Bip49Conf_bitcoinCashSlpMainNet_closure: function Bip49Conf_bitcoinCashSlpMainNet_closure() {
    },
    Bip49Conf_bitcoinCashSlpTestNet_closure: function Bip49Conf_bitcoinCashSlpTestNet_closure() {
    },
    Bip49Conf_ecashMainNet_closure: function Bip49Conf_ecashMainNet_closure() {
    },
    Bip49Conf_ecashTestNet_closure: function Bip49Conf_ecashTestNet_closure() {
    },
    Bip49Conf_pepeMainnet_closure: function Bip49Conf_pepeMainnet_closure() {
    },
    Bip49Conf_pepeTestnet_closure: function Bip49Conf_pepeTestnet_closure() {
    },
    Bip49Conf_electraProtocolMainNet_closure: function Bip49Conf_electraProtocolMainNet_closure() {
    },
    Bip49Conf_electraProtocolTestNet_closure: function Bip49Conf_electraProtocolTestNet_closure() {
    },
    Bip84Coins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$Bip84Coins__coinToConf();
        t1 = new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>")).firstWhere$1(0, new A.Bip84Coins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    Bip84Coins: function Bip84Coins(t0) {
      this.name = t0;
    },
    Bip84Coins_fromName_closure: function Bip84Coins_fromName_closure(t0) {
      this.name = t0;
    },
    Bip84Conf_bitcoinMainNet_closure: function Bip84Conf_bitcoinMainNet_closure() {
    },
    Bip84Conf_bitcoinTestNet_closure: function Bip84Conf_bitcoinTestNet_closure() {
    },
    Bip84Conf_litecoinMainNet_closure: function Bip84Conf_litecoinMainNet_closure() {
    },
    Bip84Conf_litecoinTestNet_closure: function Bip84Conf_litecoinTestNet_closure() {
    },
    Bip84Conf_electraProtocolMainNet_closure: function Bip84Conf_electraProtocolMainNet_closure() {
    },
    Bip84Conf_electraProtocolTestNet_closure: function Bip84Conf_electraProtocolTestNet_closure() {
    },
    Bip86Coins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$Bip86Coins__coinToConf();
        t1 = new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>")).firstWhere$1(0, new A.Bip86Coins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    Bip86Coins: function Bip86Coins(t0) {
      this.name = t0;
    },
    Bip86Coins_fromName_closure: function Bip86Coins_fromName_closure(t0) {
      this.name = t0;
    },
    Bip86Conf_bitcoinMainNet_closure: function Bip86Conf_bitcoinMainNet_closure() {
    },
    Bip86Conf_bitcoinTestNet_closure: function Bip86Conf_bitcoinTestNet_closure() {
    },
    BipBitcoinCashConf$(addrParams, addressEncoder, chainType, coinIdx, coinNames, defPath, keyNetVer, type, wifNetVer) {
      return new A.BipBitcoinCashConf(type);
    },
    BipBitcoinCashConf: function BipBitcoinCashConf(t0) {
      this.type = t0;
    },
    BipCoinConfig$(addrParams, addressEncoder, chainType, coinIdx, coinNames, defPath, keyNetVer, purpose, type, wifNetVer) {
      return new A.BipCoinConfig(type);
    },
    BipCoinConfig: function BipCoinConfig(t0) {
      this.type = t0;
    },
    BipLitecoinConf$(addrParams, addressEncoder, altKeyNetVer, chainType, coinIdx, coinNames, defPath, keyNetVer, type, wifNetVer) {
      return new A.BipLitecoinConf(type);
    },
    BipLitecoinConf: function BipLitecoinConf(t0) {
      this.type = t0;
    },
    ChainType: function ChainType(t0) {
      this._name = t0;
    },
    CryptoCoins_getCoin($name, proposal) {
      switch (proposal) {
        case B.BipProposal_bip44:
        case B.BipProposal_bip49:
        case B.BipProposal_bip84:
        case B.BipProposal_bip86:
          return A.BipCoins_fromName($name, type$.BipProposal._as(proposal));
        case B.C_CipProposal:
          return A.Cip1852Coins_fromName($name);
        case B.C_SubstratePropoosal:
          return A.SubstrateCoins_fromName($name);
        case B.C_MoneroProposal:
          return A.MoneroCoins_fromName($name);
        default:
          return null;
      }
    },
    CoinProposal_fromName($name) {
      switch ($name) {
        case "cip1852":
          return B.C_CipProposal;
        case "substrate":
          return B.C_SubstratePropoosal;
        case "monero":
          return B.C_MoneroProposal;
        default:
          return B.JSArray_methods.firstWhere$2$orElse(B.List_8U7, new A.CoinProposal_fromName_closure($name), new A.CoinProposal_fromName_closure0($name));
      }
    },
    CoinProposal_fromName_closure: function CoinProposal_fromName_closure(t0) {
      this.name = t0;
    },
    CoinProposal_fromName_closure0: function CoinProposal_fromName_closure0(t0) {
      this.name = t0;
    },
    PubKeyModes: function PubKeyModes(t0) {
      this._name = t0;
    },
    Cip1852Coins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$Cip1852Coins__coinToConf();
        t1 = new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>")).firstWhere$1(0, new A.Cip1852Coins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    Cip1852Coins: function Cip1852Coins(t0) {
      this.name = t0;
    },
    Cip1852Coins_fromName_closure: function Cip1852Coins_fromName_closure(t0) {
      this.name = t0;
    },
    CipProposal: function CipProposal() {
    },
    Cip1852Conf_cardanoIcarusMainNet_closure: function Cip1852Conf_cardanoIcarusMainNet_closure() {
    },
    Cip1852Conf_cardanoIcarusTestNet_closure: function Cip1852Conf_cardanoIcarusTestNet_closure() {
    },
    Cip1852Conf_cardanoLedgerMainNet_closure: function Cip1852Conf_cardanoLedgerMainNet_closure() {
    },
    Cip1852Conf_cardanoLedgerTestNet_closure: function Cip1852Conf_cardanoLedgerTestNet_closure() {
    },
    CoinConf: function CoinConf(t0, t1) {
      this.coinName = t0;
      this.params = t1;
    },
    CoinParams: function CoinParams(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20) {
      var _ = this;
      _.p2pkhNetVer = t0;
      _.p2shNetVer = t1;
      _.p2wpkhHrp = t2;
      _.p2trHrp = t3;
      _.wifNetVer = t4;
      _.addrSs58Format = t5;
      _.addrHrp = t6;
      _.addrPrefix = t7;
      _.p2pkhStdHrp = t8;
      _.p2pkhStdNetVer = t9;
      _.p2pkhLegacyNetVer = t10;
      _.p2shStdHrp = t11;
      _.p2shStdNetVer = t12;
      _.p2shLegacyNetVer = t13;
      _.p2pkhDeprNetVer = t14;
      _.p2shDeprNetVer = t15;
      _.addrNetVer = t16;
      _.addrIntNetVer = t17;
      _.subaddrNetVer = t18;
      _.addrVer = t19;
      _.workchain = t20;
    },
    CoinNames: function CoinNames(t0) {
      this.name = t0;
    },
    EllipticCurveTypes: function EllipticCurveTypes(t0) {
      this._name = t0;
    },
    Ed25519Blake2bPublicKey: function Ed25519Blake2bPublicKey(t0) {
      this._publicKey = t0;
    },
    Ed25519PublicKey_Ed25519PublicKey$fromBytes(keyBytes) {
      var prefix;
      if (keyBytes.length === 33) {
        prefix = B.JSArray_methods.sublist$2(keyBytes, 0, 1);
        if (A.BytesUtils_bytesEqual(prefix, B.List_0) || A.BytesUtils_bytesEqual(prefix, B.List_237))
          keyBytes = B.JSArray_methods.sublist$1(keyBytes, 1);
      }
      return new A.Ed25519PublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint($.$get$Curves_generatorED25519(), A.Ed25519Utils_asPoint(keyBytes)));
    },
    Ed25519PublicKey: function Ed25519PublicKey(t0) {
      this._ed25519_keys$_publicKey = t0;
    },
    Ed25519PrivateKey: function Ed25519PrivateKey(t0) {
      this._privateKey = t0;
    },
    Ed25519KholawPublicKey: function Ed25519KholawPublicKey(t0) {
      this._ed25519_kholaw_keys$_publicKey = t0;
    },
    MoneroPublicKey: function MoneroPublicKey(t0) {
      this.publicKey = t0;
    },
    Nist256p1PublicKey: function Nist256p1PublicKey(t0) {
      this.publicKey = t0;
    },
    Nist256p1HybridPublicKey: function Nist256p1HybridPublicKey(t0) {
      this.publicKey = t0;
    },
    Secp256k1PublicKey_Secp256k1PublicKey$fromBytes(keyBytes) {
      var point = A.ProjectiveECCPoint_ProjectiveECCPoint$fromBytes($.$get$Curves_curveSecp256k1(), keyBytes, null);
      return new A.Secp256k1PublicKey(A.ECDSAPublicKey_ECDSAPublicKey($.$get$Curves_generatorSecp256k1(), point));
    },
    Secp256k1PublicKey_isValidBytes(keyBytes) {
      var exception;
      type$.List_int._as(keyBytes);
      try {
        A.Secp256k1PublicKey_Secp256k1PublicKey$fromBytes(keyBytes);
        return true;
      } catch (exception) {
        return false;
      }
    },
    Secp256k1PublicKey: function Secp256k1PublicKey(t0) {
      this.publicKey = t0;
    },
    Sr25519PublicKey: function Sr25519PublicKey(t0) {
      this.publicKey = t0;
    },
    MoneroCoinConf_MoneroCoinConf$fromCoinConf(chainType, coinConf) {
      var t1 = coinConf.params;
      t1.addrNetVer.toString;
      t1.addrIntNetVer.toString;
      t1.subaddrNetVer.toString;
      return new A.MoneroCoinConf(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.List_int));
    },
    MoneroCoinConf: function MoneroCoinConf(t0) {
      this.addrParams = t0;
    },
    MoneroCoins_fromName($name) {
      var t1, exception;
      try {
        t1 = $.$get$MoneroCoins__coinToConf();
        t1 = new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>")).firstWhere$1(0, new A.MoneroCoins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    MoneroCoins: function MoneroCoins(t0) {
      this.name = t0;
    },
    MoneroCoins_fromName_closure: function MoneroCoins_fromName_closure(t0) {
      this.name = t0;
    },
    MoneroProposal: function MoneroProposal() {
    },
    SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(addressEncode, chainType, coinConf, type) {
      coinConf.params.addrSs58Format.toString;
      return new A.SubstrateCoinConf(type);
    },
    SubstrateCoinConf: function SubstrateCoinConf(t0) {
      this.type = t0;
    },
    SubstrateCoins_fromName($name) {
      var t1, exception;
      try {
        t1 = B.JSArray_methods.firstWhere$1(B.List_Zet, new A.SubstrateCoins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    SubstrateCoins: function SubstrateCoins(t0) {
      this.name = t0;
    },
    SubstrateCoins_fromName_closure: function SubstrateCoins_fromName_closure(t0) {
      this.name = t0;
    },
    SubstratePropoosal: function SubstratePropoosal() {
    },
    SubstrateConf_acalaEd25519_closure: function SubstrateConf_acalaEd25519_closure() {
    },
    SubstrateConf_acalaSecp256k1_closure: function SubstrateConf_acalaSecp256k1_closure() {
    },
    SubstrateConf_acalaSr25519_closure: function SubstrateConf_acalaSr25519_closure() {
    },
    SubstrateConf_bifrostEd25519_closure: function SubstrateConf_bifrostEd25519_closure() {
    },
    SubstrateConf_bifrostSecp256k1_closure: function SubstrateConf_bifrostSecp256k1_closure() {
    },
    SubstrateConf_bifrostSr25519_closure: function SubstrateConf_bifrostSr25519_closure() {
    },
    SubstrateConf_chainXEd25519_closure: function SubstrateConf_chainXEd25519_closure() {
    },
    SubstrateConf_chainXSecp256k1_closure: function SubstrateConf_chainXSecp256k1_closure() {
    },
    SubstrateConf_chainXSr25519_closure: function SubstrateConf_chainXSr25519_closure() {
    },
    SubstrateConf_edgewareEd25519_closure: function SubstrateConf_edgewareEd25519_closure() {
    },
    SubstrateConf_edgewareSecp256k1_closure: function SubstrateConf_edgewareSecp256k1_closure() {
    },
    SubstrateConf_edgewareSr25519_closure: function SubstrateConf_edgewareSr25519_closure() {
    },
    SubstrateConf_genericEd25519_closure: function SubstrateConf_genericEd25519_closure() {
    },
    SubstrateConf_genericSecp256k1_closure: function SubstrateConf_genericSecp256k1_closure() {
    },
    SubstrateConf_genericSr25519_closure: function SubstrateConf_genericSr25519_closure() {
    },
    SubstrateConf_karuraEd25519_closure: function SubstrateConf_karuraEd25519_closure() {
    },
    SubstrateConf_karuraSecp256k1_closure: function SubstrateConf_karuraSecp256k1_closure() {
    },
    SubstrateConf_karuraSr25519_closure: function SubstrateConf_karuraSr25519_closure() {
    },
    SubstrateConf_kusamaEd25519_closure: function SubstrateConf_kusamaEd25519_closure() {
    },
    SubstrateConf_kusamaSecp256k1_closure: function SubstrateConf_kusamaSecp256k1_closure() {
    },
    SubstrateConf_kusamaSr25519_closure: function SubstrateConf_kusamaSr25519_closure() {
    },
    SubstrateConf_moonbeamEd25519_closure: function SubstrateConf_moonbeamEd25519_closure() {
    },
    SubstrateConf_moonbeamSecp256k1_closure: function SubstrateConf_moonbeamSecp256k1_closure() {
    },
    SubstrateConf_moonbeamSr25519_closure: function SubstrateConf_moonbeamSr25519_closure() {
    },
    SubstrateConf_moonriverEd25519_closure: function SubstrateConf_moonriverEd25519_closure() {
    },
    SubstrateConf_moonriverSecp256k1_closure: function SubstrateConf_moonriverSecp256k1_closure() {
    },
    SubstrateConf_moonriverSr25519_closure: function SubstrateConf_moonriverSr25519_closure() {
    },
    SubstrateConf_phalaEd25519_closure: function SubstrateConf_phalaEd25519_closure() {
    },
    SubstrateConf_phalaSecp256k1_closure: function SubstrateConf_phalaSecp256k1_closure() {
    },
    SubstrateConf_phalaSr25519_closure: function SubstrateConf_phalaSr25519_closure() {
    },
    SubstrateConf_plasmEd25519_closure: function SubstrateConf_plasmEd25519_closure() {
    },
    SubstrateConf_plasmSecp256k1_closure: function SubstrateConf_plasmSecp256k1_closure() {
    },
    SubstrateConf_plasmSr25519_closure: function SubstrateConf_plasmSr25519_closure() {
    },
    SubstrateConf_polkadotEd25519_closure: function SubstrateConf_polkadotEd25519_closure() {
    },
    SubstrateConf_polkadotSecp256k1_closure: function SubstrateConf_polkadotSecp256k1_closure() {
    },
    SubstrateConf_polkadotSr25519_closure: function SubstrateConf_polkadotSr25519_closure() {
    },
    SubstrateConf_soraEd25519_closure: function SubstrateConf_soraEd25519_closure() {
    },
    SubstrateConf_soraSecp256k1_closure: function SubstrateConf_soraSecp256k1_closure() {
    },
    SubstrateConf_soraSr25519_closure: function SubstrateConf_soraSr25519_closure() {
    },
    SubstrateConf_stafiEd25519_closure: function SubstrateConf_stafiEd25519_closure() {
    },
    SubstrateConf_stafiSecp256k1_closure: function SubstrateConf_stafiSecp256k1_closure() {
    },
    SubstrateConf_stafiSr25519_closure: function SubstrateConf_stafiSr25519_closure() {
    },
    SubstrateScaleEncoderBase: function SubstrateScaleEncoderBase() {
    },
    SubstrateScaleCUintEncoder: function SubstrateScaleCUintEncoder() {
    },
    CborObject_CborObject$fromDynamic(value) {
      var t2, t3,
        t1 = type$.CborObject;
      if (t1._is(value))
        return value;
      else if (value == null)
        return B.C_CborNullValue;
      else if (A._isBool(value))
        return new A.CborBoleanValue(value);
      else if (A._isInt(value))
        return new A.CborIntValue(value);
      else if (typeof value == "number")
        return new A.CborFloatValue(value);
      else if (value instanceof A.DateTime)
        return new A.CborEpochFloatValue(value);
      else if (value instanceof A._BigIntImpl)
        return new A.CborBigIntValue(value);
      else if (typeof value == "string")
        return new A.CborStringValue(value);
      else if (type$.List_String._is(value))
        return new A.CborIndefiniteStringValue(A.List_List$unmodifiable(value, type$.String));
      else if (type$.List_int._is(value) && A.BytesUtils_isValidBytes(value)) {
        A.BytesUtils_validateListOfBytes(value);
        return new A.CborBytesValue(A.List_List$unmodifiable(value, type$.int));
      } else if (type$.List_List_int._is(value))
        return A.CborDynamicBytesValue$(value);
      else if (type$.Map_dynamic_dynamic._is(value)) {
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
        for (t2 = value.get$entries(), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          t3 = t2.get$current();
          t1.$indexSet(0, A.CborObject_CborObject$fromDynamic(t3.key), A.CborObject_CborObject$fromDynamic(t3.value));
        }
        return new A.CborMapValue(t1, true, type$.CborMapValue_CborObject_CborObject);
      } else if (type$.List_dynamic._is(value)) {
        t1 = J.map$1$1$ax(value, new A.CborObject_CborObject$fromDynamic_closure(), t1);
        t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
        return new A.CborListValue(t1, true, type$.CborListValue_CborObject);
      }
      throw A.wrapException(A.CborException$("cbor encoder not found for type " + J.get$runtimeType$(value).toString$0(0), null));
    },
    CborNumeric_getCborNumericValue(val) {
      if (val instanceof A.CborIntValue)
        return A._BigIntImpl__BigIntImpl$from(val.value);
      else if (val instanceof A.CborBigIntValue)
        return val.value;
      else if (val instanceof A.CborSafeIntValue)
        return val.value;
      throw A.wrapException(B.CborException_FFX);
    },
    CborObject_CborObject$fromDynamic_closure: function CborObject_CborObject$fromDynamic_closure() {
    },
    CborException$(message, details) {
      return new A.CborException(message, details);
    },
    CborException: function CborException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    CborBase64Types: function CborBase64Types(t0) {
      this.tag = t0;
    },
    CborBaseUrlValue: function CborBaseUrlValue(t0, t1) {
      this.value = t0;
      this.type = t1;
    },
    CborBigFloatValue: function CborBigFloatValue(t0, t1) {
      this.exponent = t0;
      this.mantissa = t1;
    },
    CborBigIntValue: function CborBigIntValue(t0) {
      this.value = t0;
    },
    CborBoleanValue: function CborBoleanValue(t0) {
      this.value = t0;
    },
    CborDynamicBytesValue$(value) {
      var t1 = type$.List_int,
        t2 = J.map$1$1$ax(value, new A.CborDynamicBytesValue_closure(), t1);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      return new A.CborDynamicBytesValue(A.List_List$unmodifiable(t2, t1));
    },
    CborBytesValue: function CborBytesValue(t0) {
      this.value = t0;
    },
    CborDynamicBytesValue: function CborDynamicBytesValue(t0) {
      this.value = t0;
    },
    CborDynamicBytesValue_closure: function CborDynamicBytesValue_closure() {
    },
    CborTagValue: function CborTagValue(t0, t1, t2) {
      this.tags = t0;
      this._value = t1;
      this.$ti = t2;
    },
    _CborDate: function _CborDate() {
    },
    CborStringDateValue: function CborStringDateValue(t0) {
      this.value = t0;
    },
    CborEpochFloatValue: function CborEpochFloatValue(t0) {
      this.value = t0;
    },
    CborEpochIntValue: function CborEpochIntValue(t0) {
      this.value = t0;
    },
    CborDecimalFracValue: function CborDecimalFracValue(t0, t1) {
      this.exponent = t0;
      this.mantissa = t1;
    },
    CborFloatValue: function CborFloatValue(t0) {
      this.value = t0;
      this.__CborFloatValue__decodFloat_FI = $;
    },
    CborIntValue: function CborIntValue(t0) {
      this.value = t0;
    },
    CborSafeIntValue: function CborSafeIntValue(t0) {
      this.value = t0;
    },
    CborListValue: function CborListValue(t0, t1, t2) {
      this.value = t0;
      this._isFixedLength = t1;
      this.$ti = t2;
    },
    CborMapValue: function CborMapValue(t0, t1, t2) {
      this.value = t0;
      this._map$_isFixedLength = t1;
      this.$ti = t2;
    },
    CborMimeValue: function CborMimeValue(t0) {
      this.value = t0;
    },
    CborNullValue: function CborNullValue() {
    },
    CborUndefinedValue: function CborUndefinedValue() {
    },
    CborRegxpValue: function CborRegxpValue(t0) {
      this.value = t0;
    },
    CborSetValue: function CborSetValue(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    CborString: function CborString() {
    },
    CborStringValue: function CborStringValue(t0) {
      this.value = t0;
    },
    CborIndefiniteStringValue: function CborIndefiniteStringValue(t0) {
      this.value = t0;
    },
    CborUriValue: function CborUriValue(t0) {
      this.value = t0;
    },
    CborUtils_parseRFC3339DateTime(dateTimeString) {
      var parts, t1;
      if (B.JSString_methods.contains$1(dateTimeString, "+")) {
        parts = dateTimeString.split("+");
        t1 = parts.length;
        if (t1 !== 2)
          throw A.wrapException(A.CborException$("Invalid RFC3339 format: " + dateTimeString, null));
        if (0 >= t1)
          return A.ioore(parts, 0);
        return A.DateTime_parse(parts[0]);
      } else
        return A.DateTime_parse(dateTimeString).toUtc$0();
    },
    CborUtils__decode(cborBytes, offset) {
      var t1, i, consumed, t2, first, majorTag, info, data,
        tags = A._setArrayType([], type$.JSArray_int);
      $label0$1:
        for (t1 = type$.dynamic, i = offset, consumed = 0; t2 = cborBytes.length, i < t2;) {
          if (!(i >= 0))
            return A.ioore(cborBytes, i);
          first = cborBytes[i];
          majorTag = B.JSInt_methods._shrOtherPositive$1(first, 5);
          info = first & 31;
          switch (majorTag) {
            case 5:
              if (info === 31) {
                t1 = A.CborUtils__decodeDynamicMap(cborBytes, info, i, tags);
                return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
              }
              t1 = A.CborUtils__decodeMap(cborBytes, info, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            case 1:
            case 0:
              t1 = A.CborUtils__parseInt(cborBytes, info, majorTag, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            case 6:
              data = A.CborUtils__decodeLength(info, cborBytes, i, t1);
              B.JSArray_methods.add$1(tags, A._asInt(data.value));
              t2 = data.consumed;
              i += t2;
              consumed += t2;
              continue $label0$1;
            case 2:
              t1 = A.CborUtils__decodeBytesString(cborBytes, info, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            case 3:
              t1 = A.CborUtils__decodeUtf8String(cborBytes, info, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            case 7:
              t1 = A.CborUtils__parseSimpleValue(cborBytes, info, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            case 4:
              if (info === 31) {
                t1 = A.CborUtils__decodeDynamicArray(cborBytes, info, i, tags);
                return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
              }
              t1 = A.CborUtils__decodeArray(cborBytes, info, i, tags);
              return new A._DecodeCborResult(t1.value, consumed + t1.consumed, t1.$ti);
            default:
              throw A.wrapException(A.CborException$("invalid or unsuported cbor tag major: " + majorTag + " ", null));
          }
        }
      throw A.wrapException(B.CborException_lWr);
    },
    CborUtils__parsBytes(cborBytes, info, offset) {
      var end,
        len = A.CborUtils__decodeLength(info, cborBytes, offset, type$.int),
        t1 = len.consumed,
        t2 = len.value;
      if (typeof t2 !== "number")
        return A.iae(t2);
      end = t1 + t2;
      return new A._DecodeCborResult(B.JSArray_methods.sublist$2(cborBytes, offset + t1, offset + end), end, type$._DecodeCborResult_List_int);
    },
    CborUtils__decodeLength(info, cborBytes, offset, $T) {
      var value, consumed, len, bytes, decode;
      if (info < 24) {
        value = info;
        consumed = 1;
      } else {
        ++offset;
        len = B.JSInt_methods.$shl(1, info - 24);
        bytes = B.JSArray_methods.sublist$2(cborBytes, offset, offset + len);
        consumed = len + 1;
        if (len <= 4)
          value = A.IntUtils_fromBytes(bytes, B.C_Endian, false);
        else if (len <= 8) {
          decode = A.BigintUtils_fromBytes(bytes, B.C_Endian, false);
          if (decode.get$isValidInt())
            value = decode.toInt$0(0);
          else {
            if ($T._is(0))
              throw A.wrapException(B.CborException_xZj);
            value = decode;
          }
        } else
          throw A.wrapException(A.CborException$("Invalid additional info for int: " + info, null));
      }
      if (!$T._is(value))
        throw A.wrapException(A.CborException$("decode length casting faild.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", A.createRuntimeType($T).toString$0(0), "value", J.get$runtimeType$(value)], type$.String, type$.dynamic)));
      return new A._DecodeCborResult($T._as(value), consumed, $T._eval$1("_DecodeCborResult<0>"));
    },
    CborUtils__decodeUtf8String(cborBytes, info, offset, tags) {
      var toList, t1, t2, stringList, bytes;
      if (info === 31) {
        toList = A.CborUtils__decodeDynamicArray(cborBytes, info, offset, tags);
        t1 = type$.WhereTypeIterable_CborStringValue;
        t2 = type$.String;
        t1 = A.MappedIterable_MappedIterable(new A.WhereTypeIterable(type$.CborListValue_dynamic._as(toList.value).value, t1), t1._eval$1("String(Iterable.E)")._as(new A.CborUtils__decodeUtf8String_closure()), t1._eval$1("Iterable.E"), t2);
        stringList = A.List_List$_of(t1, A._instanceType(t1)._eval$1("Iterable.E"));
        if (tags.length !== 0) {
          t1 = A.List_List$unmodifiable(stringList, t2);
          return new A._DecodeCborResult(new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), new A.CborIndefiniteStringValue(t1), type$.CborTagValue_CborIndefiniteStringValue), toList.consumed, type$._DecodeCborResult_CborObject);
        }
        return new A._DecodeCborResult(new A.CborIndefiniteStringValue(A.List_List$unmodifiable(stringList, t2)), toList.consumed, type$._DecodeCborResult_CborObject);
      }
      bytes = A.CborUtils__parsBytes(cborBytes, info, offset);
      return new A._DecodeCborResult(A.CborUtils__toStringObject(bytes.value, tags), bytes.consumed, type$._DecodeCborResult_CborObject);
    },
    CborUtils__toStringObject(utf8Bytes, tags) {
      var toObj, baseType,
        $toString = A.StringUtils_decode(utf8Bytes, false, B.StringEncoding_1);
      if (tags.length === 0)
        toObj = new A.CborStringValue($toString);
      else if (B.JSArray_methods.any$1(B.List_Oij, new A.CborUtils__toStringObject_closure(tags))) {
        baseType = B.JSArray_methods.firstWhere$1(B.List_Oij, new A.CborUtils__toStringObject_closure0(tags));
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborBaseUrlValue($toString, baseType);
      } else if (A.BytesUtils_bytesEqual(tags, B.List_36)) {
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborMimeValue($toString);
      } else if (A.BytesUtils_bytesEqual(tags, B.List_32)) {
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborUriValue($toString);
      } else if (A.BytesUtils_bytesEqual(tags, B.List_35)) {
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborRegxpValue($toString);
      } else if (A.BytesUtils_bytesEqual(tags, B.List_0)) {
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborStringDateValue(A.CborUtils_parseRFC3339DateTime($toString));
      } else
        toObj = null;
      if (toObj == null)
        toObj = new A.CborStringValue($toString);
      return tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toObj, type$.CborTagValue_CborObject);
    },
    CborUtils__decodeBytesString(cborBytes, info, offset, tags) {
      var toList, t1, bytesList, bytes, big, val;
      if (info === 31) {
        toList = A.CborUtils__decodeDynamicArray(cborBytes, info, offset, tags);
        t1 = type$.WhereTypeIterable_CborBytesValue;
        t1 = A.MappedIterable_MappedIterable(new A.WhereTypeIterable(type$.CborListValue_dynamic._as(toList.value).value, t1), t1._eval$1("List<int>(Iterable.E)")._as(new A.CborUtils__decodeBytesString_closure()), t1._eval$1("Iterable.E"), type$.List_int);
        bytesList = A.List_List$_of(t1, A._instanceType(t1)._eval$1("Iterable.E"));
        if (tags.length !== 0) {
          t1 = A.CborDynamicBytesValue$(bytesList);
          return new A._DecodeCborResult(new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), t1, type$.CborTagValue_CborDynamicBytesValue), toList.consumed, type$._DecodeCborResult_CborObject);
        }
        return new A._DecodeCborResult(A.CborDynamicBytesValue$(bytesList), toList.consumed, type$._DecodeCborResult_CborObject);
      }
      bytes = A.CborUtils__parsBytes(cborBytes, info, offset);
      if (A.BytesUtils_bytesEqual(tags, B.List_3) || A.BytesUtils_bytesEqual(tags, B.List_2)) {
        big = A.BigintUtils_fromBytes(bytes.value, B.C_Endian, false);
        if (A.BytesUtils_bytesEqual(tags, B.List_3))
          big = big.$not(0);
        B.JSArray_methods.clear$0(tags);
        val = new A.CborBigIntValue(big);
      } else
        val = null;
      if (val == null) {
        t1 = bytes.value;
        A.BytesUtils_validateListOfBytes(t1);
        val = new A.CborBytesValue(A.List_List$unmodifiable(t1, type$.int));
      }
      t1 = tags.length === 0 ? val : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), val, type$.CborTagValue_CborObject);
      return new A._DecodeCborResult(t1, bytes.consumed, type$._DecodeCborResult_CborObject);
    },
    CborUtils__decodeMap(cborBytes, info, offset, tags) {
      var lI, decodeKey, decodeValue, toMap,
        t1 = type$.int,
        decodeLen = A.CborUtils__decodeLength(info, cborBytes, offset, t1),
        consumed = decodeLen.consumed,
        $length = decodeLen.value,
        t2 = type$.CborObject,
        objects = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
      for (lI = 0; lI < $length; ++lI) {
        decodeKey = A.CborUtils__decode(cborBytes, consumed + offset);
        consumed += decodeKey.consumed;
        decodeValue = A.CborUtils__decode(cborBytes, consumed + offset);
        objects.$indexSet(0, decodeKey.value, decodeValue.value);
        consumed += decodeValue.consumed;
      }
      toMap = new A.CborMapValue(objects, true, type$.CborMapValue_CborObject_CborObject);
      t1 = tags.length === 0 ? toMap : new A.CborTagValue(A.List_List$unmodifiable(tags, t1), toMap, type$.CborTagValue_CborMapValue_CborObject_CborObject);
      return new A._DecodeCborResult(t1, consumed, type$._DecodeCborResult_CborObject);
    },
    CborUtils__decodeDynamicMap(cborBytes, info, offset, tags) {
      var decodeKey, decodeValue, toMap,
        t1 = type$.CborObject,
        objects = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1),
        consumed = 1;
      while (true) {
        t1 = offset + consumed;
        if (!(t1 >= 0 && t1 < cborBytes.length))
          return A.ioore(cborBytes, t1);
        if (!(cborBytes[t1] !== 255))
          break;
        decodeKey = A.CborUtils__decode(cborBytes, t1);
        consumed += decodeKey.consumed;
        decodeValue = A.CborUtils__decode(cborBytes, offset + consumed);
        objects.$indexSet(0, decodeKey.value, decodeValue.value);
        consumed += decodeValue.consumed;
      }
      toMap = new A.CborMapValue(objects, false, type$.CborMapValue_CborObject_CborObject);
      t1 = tags.length === 0 ? toMap : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toMap, type$.CborTagValue_CborMapValue_CborObject_CborObject);
      return new A._DecodeCborResult(t1, consumed + 1, type$._DecodeCborResult_CborObject);
    },
    CborUtils__decodeArray(cborBytes, info, offset, tags) {
      var lI, decodeData, toObj,
        t1 = type$.int,
        decodeLen = A.CborUtils__decodeLength(info, cborBytes, offset, t1),
        consumed = decodeLen.consumed,
        $length = decodeLen.value,
        objects = A._setArrayType([], type$.JSArray_CborObject);
      for (lI = 0; lI < $length; ++lI) {
        decodeData = A.CborUtils__decode(cborBytes, consumed + offset);
        B.JSArray_methods.add$1(objects, decodeData.value);
        consumed += decodeData.consumed;
        if (consumed + offset === cborBytes.length)
          break;
      }
      if (A.BytesUtils_bytesEqual(tags, B.List_5) || A.BytesUtils_bytesEqual(tags, B.List_4))
        return new A._DecodeCborResult(A.CborUtils__decodeCborBigfloatOrDecimal(objects, tags), consumed, type$._DecodeCborResult_CborObject);
      if (A.BytesUtils_bytesEqual(tags, B.List_258)) {
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborSetValue(A.LinkedHashSet_LinkedHashSet$from(objects, type$.CborObject), type$.CborSetValue_CborObject);
        t1 = tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, t1), toObj, type$.CborTagValue_CborSetValue_CborObject);
        return new A._DecodeCborResult(t1, consumed, type$._DecodeCborResult_CborObject);
      }
      toObj = new A.CborListValue(objects, true, type$.CborListValue_CborObject);
      t1 = tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, t1), toObj, type$.CborTagValue_CborListValue_CborObject);
      return new A._DecodeCborResult(t1, consumed, type$._DecodeCborResult_CborObject);
    },
    CborUtils__decodeDynamicArray(cborBytes, info, offset, tags) {
      var t1, decodeData, toObj,
        objects = A._setArrayType([], type$.JSArray_CborObject),
        consomed = 1;
      while (true) {
        t1 = consomed + offset;
        if (!(t1 >= 0 && t1 < cborBytes.length))
          return A.ioore(cborBytes, t1);
        if (!(cborBytes[t1] !== 255))
          break;
        decodeData = A.CborUtils__decode(cborBytes, t1);
        B.JSArray_methods.add$1(objects, decodeData.value);
        consomed += decodeData.consumed;
      }
      toObj = new A.CborListValue(objects, false, type$.CborListValue_CborObject);
      t1 = tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toObj, type$.CborTagValue_CborListValue_CborObject);
      return new A._DecodeCborResult(t1, consomed + 1, type$._DecodeCborResult_CborObject);
    },
    CborUtils__decodeCborBigfloatOrDecimal(objects, tags) {
      var t2, t3, toObj,
        t1 = type$.WhereTypeIterable_CborNumeric;
      objects = A.List_List$_of(new A.WhereTypeIterable(objects, t1), t1._eval$1("Iterable.E"));
      if (objects.length !== 2)
        throw A.wrapException(B.CborException_SJF);
      if (A.BytesUtils_bytesEqual(tags, B.List_4)) {
        B.JSArray_methods.clear$0(tags);
        t1 = objects.length;
        if (0 >= t1)
          return A.ioore(objects, 0);
        t2 = type$.CborNumeric;
        t3 = t2._as(objects[0]);
        if (1 >= t1)
          return A.ioore(objects, 1);
        t2 = t2._as(objects[1]);
        toObj = new A.CborDecimalFracValue(A.CborNumeric_getCborNumericValue(t3), A.CborNumeric_getCborNumericValue(t2));
        return tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toObj, type$.CborTagValue_CborDecimalFracValue);
      }
      B.JSArray_methods.clear$0(tags);
      t1 = objects.length;
      if (0 >= t1)
        return A.ioore(objects, 0);
      t2 = type$.CborNumeric;
      t3 = t2._as(objects[0]);
      if (1 >= t1)
        return A.ioore(objects, 1);
      t2 = t2._as(objects[1]);
      toObj = new A.CborBigFloatValue(A.CborNumeric_getCborNumericValue(t3), A.CborNumeric_getCborNumericValue(t2));
      return tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toObj, type$.CborTagValue_CborBigFloatValue);
    },
    CborUtils__parseSimpleValue(bytes, info, offset, tags) {
      var obj, t1, elementSize, end, int16Bits, sign, exponent, fraction, value, val, consumed;
      switch (info) {
        case 20:
          obj = B.CborBoleanValue_false;
          break;
        case 21:
          obj = B.CborBoleanValue_true;
          break;
        case 22:
          obj = B.C_CborNullValue;
          break;
        case 23:
          obj = B.C_CborUndefinedValue;
          break;
        default:
          obj = null;
      }
      if (obj != null) {
        if (tags.length === 0)
          return new A._DecodeCborResult(obj, 1, type$._DecodeCborResult_CborObject);
        return new A._DecodeCborResult(new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), obj, type$.CborTagValue_CborObject), 1, type$._DecodeCborResult_CborObject);
      }
      ++offset;
      switch (info) {
        case 25:
          t1 = B.JSArray_methods.sublist$2(bytes, offset, offset + 2);
          if (t1.length !== 2)
            A.throwExpression(B.CborException_gYX);
          t1 = new Uint8Array(A._ensureNativeList(t1));
          elementSize = t1.BYTES_PER_ELEMENT;
          end = A.RangeError_checkValidRange(0, null, B.JSInt_methods.$tdiv(t1.byteLength, elementSize));
          int16Bits = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(t1), t1.byteOffset + 0 * elementSize, end * elementSize).getInt16(0, false);
          sign = B.JSInt_methods._shrOtherPositive$1(int16Bits, 15) & 1;
          exponent = B.JSInt_methods._shrOtherPositive$1(int16Bits, 10) & 31;
          fraction = int16Bits & 1023;
          if (exponent === 31)
            if (fraction === 0)
              value = sign === 0 ? 1 / 0 : -1 / 0;
            else
              value = 0 / 0;
          else if (exponent === 0 && fraction === 0)
            value = sign === 0 ? 0 : -0.0;
          else {
            value = sign === 0 ? 1 : -1;
            value *= (1 + fraction / 1024) * Math.pow(2, exponent - 15);
          }
          val = value;
          consumed = 3;
          break;
        case 26:
          val = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(new Uint8Array(A._ensureNativeList(B.JSArray_methods.sublist$2(bytes, offset, offset + 4)))), 0, null).getFloat32(0, false);
          consumed = 5;
          break;
        case 27:
          val = J.asByteData$2$x(B.NativeUint8List_methods.get$buffer(new Uint8Array(A._ensureNativeList(B.JSArray_methods.sublist$2(bytes, offset, offset + 8)))), 0, null).getFloat64(0, false);
          consumed = 9;
          break;
        default:
          throw A.wrapException(B.CborException_6h4);
      }
      if (A.BytesUtils_bytesEqual(tags, B.List_1)) {
        t1 = A.DateTime__validate(B.JSNumber_methods.round$0(val * 1000), 0, false);
        B.JSArray_methods.clear$0(tags);
        obj = new A.CborEpochFloatValue(new A.DateTime(t1, 0, false));
      }
      if (obj == null)
        obj = new A.CborFloatValue(val);
      t1 = tags.length === 0 ? obj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), obj, type$.CborTagValue_CborObject);
      return new A._DecodeCborResult(t1, consumed, type$._DecodeCborResult_CborObject);
    },
    CborUtils__parseInt(cborBytes, info, mt, offset, tags) {
      var val, numericValue, t1, toObj,
        data = A.CborUtils__decodeLength(info, cborBytes, offset, type$.dynamic),
        numb = data.value;
      if (numb instanceof A._BigIntImpl || mt === 1) {
        val = A.BigintUtils_parse(numb, true);
        if (mt === 1)
          val = val.$not(0);
        numericValue = val.get$isValidInt() ? new A.CborIntValue(val.toInt$0(0)) : null;
        if (numericValue == null)
          numericValue = new A.CborSafeIntValue(val);
      } else
        numericValue = new A.CborIntValue(A._asInt(numb));
      if (A.BytesUtils_bytesEqual(tags, B.List_1)) {
        t1 = A.DateTime__validate(numericValue.toInt$0(0) * 1000, 0, false);
        B.JSArray_methods.clear$0(tags);
        toObj = new A.CborEpochIntValue(new A.DateTime(t1, 0, false));
        t1 = tags.length === 0 ? toObj : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), toObj, type$.CborTagValue_CborEpochIntValue);
        return new A._DecodeCborResult(t1, data.consumed, type$._DecodeCborResult_CborObject);
      }
      t1 = tags.length === 0 ? numericValue : new A.CborTagValue(A.List_List$unmodifiable(tags, type$.int), numericValue, type$.CborTagValue_CborNumeric);
      return new A._DecodeCborResult(t1, data.consumed, type$._DecodeCborResult_CborObject);
    },
    _DecodeCborResult: function _DecodeCborResult(t0, t1, t2) {
      this.value = t0;
      this.consumed = t1;
      this.$ti = t2;
    },
    CborUtils__decodeUtf8String_closure: function CborUtils__decodeUtf8String_closure() {
    },
    CborUtils__toStringObject_closure: function CborUtils__toStringObject_closure(t0) {
      this.tags = t0;
    },
    CborUtils__toStringObject_closure0: function CborUtils__toStringObject_closure0(t0) {
      this.tags = t0;
    },
    CborUtils__decodeBytesString_closure: function CborUtils__decodeBytesString_closure() {
    },
    CborBytesTracker: function CborBytesTracker(t0) {
      this._dynamic_bytes$_buffer = t0;
    },
    FloatUtils__decodeBits(bits) {
      var mantissa, exponent,
        mantissaBits = (bits & -1) >>> 0,
        exponentBits = B.JSInt_methods._shrBothPositive$1(bits, 52) & 2047,
        t1 = B.JSInt_methods._shrBothPositive$1(bits, 63);
      if (exponentBits === 0) {
        mantissa = mantissaBits;
        exponent = -1074;
      } else {
        exponent = exponentBits - 1023 - 52;
        mantissa = (mantissaBits | 0) >>> 0;
      }
      if (t1 !== 0)
        mantissa = -mantissa;
      while (true) {
        if (!((mantissa & 1) === 0 && mantissa !== 0))
          break;
        mantissa = B.JSInt_methods._shrOtherPositive$1(mantissa, 1);
        ++exponent;
      }
      return new A.Tuple(mantissa, exponent, type$.Tuple_int_int);
    },
    FloatUtils__toBits(value, endian) {
      var t1, bits, _i,
        toBytes = J.asUint8List$0$x(B.NativeFloat64List_methods.get$buffer(new Float64Array(A._ensureNativeList(A._setArrayType([value], type$.JSArray_double)))));
      toBytes = A.List_List$from(new A.ReversedListIterable(toBytes, A.instanceType(toBytes)._eval$1("ReversedListIterable<ListBase.E>")), false, type$.int);
      for (t1 = toBytes.length, bits = 0, _i = 0; _i < t1; ++_i)
        bits = (bits << 8 | toBytes[_i]) >>> 0;
      return bits;
    },
    FloatUtils__isLessThan(value) {
      var bits;
      if (isNaN(value) || value == 1 / 0 || value == -1 / 0)
        return B.Tuple_true_true;
      bits = A.FloatUtils__toBits(value, null);
      if (A.FloatUtils__dobuleLessThan(bits, B.FloatLength_5_10))
        return B.Tuple_true_true;
      if (A.FloatUtils__dobuleLessThan(bits, B.FloatLength_8_23))
        return B.Tuple_false_true;
      return B.Tuple_false_false;
    },
    FloatUtils__dobuleLessThan(bits, type) {
      var t3, t4, exponent, subnormalMantissaLength,
        mantissaBitLength = type.mantissaBitLength,
        exponentBitLength = type.exponentBitLength,
        exponentBias = B.JSInt_methods.$shl(1, exponentBitLength - 1) - 1,
        de = A.FloatUtils__decodeBits(bits),
        t1 = de.item1,
        t2 = J.getInterceptor$(t1);
      if (t2.$eq(t1, 0))
        return true;
      t3 = mantissaBitLength + 1;
      if (t3 < t2.get$bitLength(t1))
        return false;
      t4 = de.item2;
      if (typeof t4 !== "number")
        return t4.$add();
      exponent = t4 + mantissaBitLength + exponentBias + (t2.get$bitLength(t1) - t3);
      if (exponent >= B.JSInt_methods._shlPositive$1(1, exponentBitLength) - 1)
        return false;
      if (exponent >= 1)
        return true;
      subnormalMantissaLength = t2.get$bitLength(t1) + t4 - -(exponentBias - 1 + mantissaBitLength);
      return subnormalMantissaLength > 0 && subnormalMantissaLength <= mantissaBitLength;
    },
    FloatLength: function FloatLength(t0, t1) {
      this.exponentBitLength = t0;
      this.mantissaBitLength = t1;
    },
    FloatUtils: function FloatUtils(t0) {
      this.value = t0;
      this.__FloatUtils__isLess_FI = $;
    },
    AES$(key) {
      var t2, t3,
        t1 = new A.AES();
      t1.__AES__keyLen_A = 32;
      type$.List_int._as(key);
      t2 = type$.int;
      t3 = A.List_List$filled(60, 0, false, t2);
      t1._encKey = t3;
      t2 = t1._decKey = A.List_List$filled(60, 0, false, t2);
      $.$get$AES__lib().expandKey$3(key, t3, t2);
      return t1;
    },
    AES: function AES() {
      this.__AES__keyLen_A = $;
      this._decKey = this._encKey = null;
    },
    AESLib: function AESLib(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._te0 = t0;
      _._te1 = t1;
      _._te2 = t2;
      _._te3 = t3;
      _._td0 = t4;
      _._td1 = t5;
      _._td2 = t6;
      _._td3 = t7;
    },
    AESLib_initialize_mul: function AESLib_initialize_mul() {
    },
    AESLib_initialize_r24: function AESLib_initialize_r24() {
    },
    CurveFp$(a, b, h, p) {
      return new A.CurveFp(p, a, b, h);
    },
    CurveFp: function CurveFp(t0, t1, t2, t3) {
      var _ = this;
      _.p = t0;
      _.a = t1;
      _.b = t2;
      _.h = t3;
    },
    CurveED: function CurveED(t0, t1, t2, t3) {
      var _ = this;
      _.p = t0;
      _.a = t1;
      _.d = t2;
      _.h = t3;
    },
    Curve: function Curve() {
    },
    ECDSAPublicKey_ECDSAPublicKey(generator, point) {
      var t2, t3, leftSide,
        curve = generator.curve,
        n = generator.order,
        p = curve.p,
        t1 = $.$get$_BigIntImpl_zero();
      if (t1.compareTo$1(0, point.get$x()) <= 0 && point.get$x().compareTo$1(0, p) < 0)
        t2 = !(t1.compareTo$1(0, point.get$y()) <= 0 && point.get$y().compareTo$1(0, p) < 0);
      else
        t2 = true;
      if (t2)
        throw A.wrapException(B.CryptoException_5Ft);
      t2 = point.get$x();
      t3 = point.get$y();
      leftSide = t3.$mul(0, t3).$sub(0, t2.$mul(0, t2).$add(0, curve.a).$mul(0, t2).$add(0, curve.b)).$mod(0, p);
      t1 = leftSide.compareTo$1(0, t1);
      t1 = t1 !== 0;
      if (t1)
        throw A.wrapException(B.CryptoException_6hD);
      if (n == null)
        throw A.wrapException(B.CryptoException_hzd);
      t1 = curve.h.compareTo$1(0, $.$get$_BigIntImpl_one());
      t1 = t1 !== 0 && !point.$mul(0, n).get$isInfinity();
      if (t1)
        throw A.wrapException(B.CryptoException_Hdq);
      return new A.ECDSAPublicKey(generator, point);
    },
    ECDSAPublicKey: function ECDSAPublicKey(t0, t1) {
      this.generator = t0;
      this.point = t1;
    },
    EDDSAPrivateKey: function EDDSAPrivateKey(t0, t1) {
      this.generator = t0;
      this.key = t1;
    },
    EDDSAPublicKey_EDDSAPublicKey$fromPoint(generator, publicPoint) {
      var baselen = B.JSInt_methods._tdivFast$1(generator.curve.p.get$bitLength(0) + 1 + 7, 8),
        pubkeyBytes = publicPoint.toBytes$0();
      if (pubkeyBytes.length !== baselen)
        throw A.wrapException(A.CryptoException$("Incorrect size of the public key, expected: " + baselen + " bytes", null));
      A.BytesUtils_validateListOfBytes(pubkeyBytes);
      return new A.EDDSAPublicKey(generator, A.List_List$unmodifiable(pubkeyBytes, type$.int), publicPoint);
    },
    EDDSAPublicKey: function EDDSAPublicKey(t0, t1, t2) {
      this.generator = t0;
      this._encoded = t1;
      this._point = t2;
    },
    AbstractPoint_fromBytes(curve, data) {
      var p, expLen, t1, t2, y, x, keyLen, rawEncodingLength, encodeType, prefix, result;
      if (curve instanceof A.CurveED) {
        data = A.List_List$from(data, true, type$.int);
        p = curve.p;
        expLen = B.JSInt_methods._tdivFast$1(p.get$bitLength(0) + 1 + 7, 8);
        t1 = data.length;
        if (t1 !== expLen)
          A.throwExpression(B.CryptoException_997);
        t2 = expLen - 1;
        if (!(t2 >= 0 && t2 < t1))
          return A.ioore(data, t2);
        t1 = data[t2];
        B.JSArray_methods.$indexSet(data, t2, t1 & 127);
        y = A.BigintUtils_fromBytes(data, B.C_Endian0, false);
        x = A.ECDSAUtils_modularSquareRootPrime(y.$mul(0, y).$sub(0, A._BigIntImpl__BigIntImpl$from(1)).$mul(0, A.BigintUtils_inverseMod(curve.d.$mul(0, y).$mul(0, y).$sub(0, curve.a), p)).$mod(0, p), p);
        if (!x.get$isEven(0) !== ((t1 >>> 7 & 1) === 1))
          x = x.$negate(0).$mod(0, p);
        return new A.Tuple(x, y, type$.Tuple_BigInt_BigInt);
      }
      t1 = J.getInterceptor$asx(data);
      keyLen = t1.get$length(data);
      rawEncodingLength = 2 * A.BigintUtils_orderLen(curve.get$p());
      if (keyLen === rawEncodingLength)
        encodeType = B.EncodeType_2;
      else if (keyLen === rawEncodingLength + 1) {
        prefix = t1.$index(data, 0);
        if (prefix === 4)
          encodeType = B.EncodeType_3;
        else {
          if (!(prefix === 6 || prefix === 7))
            throw A.wrapException(B.CryptoException_Pc3);
          encodeType = B.EncodeType_1;
        }
      } else {
        if (keyLen !== B.JSInt_methods._tdivFast$1(rawEncodingLength, 2) + 1)
          throw A.wrapException(B.CryptoException_Pc3);
        encodeType = B.EncodeType_0;
      }
      type$.CurveFp._as(curve);
      switch (encodeType) {
        case B.EncodeType_0:
          return A.AbstractPoint__fromCompressed(data, curve);
        case B.EncodeType_3:
          return A.AbstractPoint__fromRawEncoding(t1.sublist$1(data, 1), rawEncodingLength);
        case B.EncodeType_1:
          result = A.AbstractPoint__fromRawEncoding(t1.sublist$1(data, 1), rawEncodingLength);
          y = result.item2;
          t2 = $.$get$_BigIntImpl_one();
          prefix = y.$and(0, t2);
          t2 = prefix.compareTo$1(0, t2);
          if (!(t2 === 0 && t1.$index(data, 0) !== 7)) {
            t2 = prefix.compareTo$1(0, $.$get$_BigIntImpl_zero());
            t1 = t2 === 0 && t1.$index(data, 0) !== 6;
          } else
            t1 = true;
          if (t1)
            A.throwExpression(B.CryptoException_Tbk);
          return new A.Tuple(result.item1, y, type$.Tuple_BigInt_BigInt);
        default:
          return A.AbstractPoint__fromRawEncoding(data, rawEncodingLength);
      }
    },
    AbstractPoint__fromRawEncoding(data, rawEncodingLength) {
      var t1 = B.JSInt_methods._tdivFast$1(rawEncodingLength, 2),
        t2 = J.getInterceptor$ax(data),
        xs = t2.sublist$2(data, 0, t1),
        ys = t2.sublist$1(data, t1);
      return new A.Tuple(A.BigintUtils_fromBytes(xs, B.C_Endian, false), A.BigintUtils_fromBytes(ys, B.C_Endian, false), type$.Tuple_BigInt_BigInt);
    },
    AbstractPoint__fromCompressed(data, curve) {
      var t2, x, p, beta, t3,
        t1 = J.getInterceptor$asx(data);
      if (t1.$index(data, 0) !== 2 && t1.$index(data, 0) !== 3)
        throw A.wrapException(B.CryptoException_RFf);
      t2 = t1.$index(data, 0);
      x = A.BigintUtils_fromBytes(t1.sublist$1(data, 1), B.C_Endian, false);
      p = curve.p;
      beta = A.ECDSAUtils_modularSquareRootPrime(x.modPow$2(0, A._BigIntImpl__BigIntImpl$from(3), p).$add(0, curve.a.$mul(0, x)).$add(0, curve.b).$mod(0, p), p);
      t1 = beta.$and(0, $.$get$_BigIntImpl_one()).compareTo$1(0, $.$get$_BigIntImpl_zero());
      t3 = type$.Tuple_BigInt_BigInt;
      if (t2 === 2 === (t1 !== 0))
        return new A.Tuple(x, p.$sub(0, beta), t3);
      else
        return new A.Tuple(x, beta, t3);
    },
    EncodeType: function EncodeType(t0) {
      this._name = t0;
    },
    AbstractPoint: function AbstractPoint() {
    },
    ProjectiveECCPoint_ProjectiveECCPoint(curve, generator, order, x, y, z) {
      var coords = A._setArrayType([x, y, z], type$.JSArray_BigInt);
      return new A.ProjectiveECCPoint(curve, order, generator && order != null, B.List_empty0, coords);
    },
    ProjectiveECCPoint_ProjectiveECCPoint$fromBytes(curve, data, order) {
      var coords = A.AbstractPoint_fromBytes(curve, data);
      coords = A._setArrayType([coords.item1, coords.item2, $.$get$_BigIntImpl_one()], type$.JSArray_BigInt);
      return new A.ProjectiveECCPoint(curve, order, false, B.List_empty0, coords);
    },
    ProjectiveECCPoint: function ProjectiveECCPoint(t0, t1, t2, t3, t4) {
      var _ = this;
      _.curve = t0;
      _.order = t1;
      _.generator = t2;
      _._precompute = t3;
      _._coords = t4;
    },
    EDPoint$(curve, generator, order, t, x, y, z) {
      return new A.EDPoint(curve, order, generator, B.List_empty0, A._setArrayType([x, y, z, t], type$.JSArray_BigInt));
    },
    EDPoint: function EDPoint(t0, t1, t2, t3, t4) {
      var _ = this;
      _.curve = t0;
      _.order = t1;
      _.generator = t2;
      _._edwards$_precompute = t3;
      _._edwards$_coords = t4;
    },
    RistrettoPoint_RistrettoPoint$fromEdwardsPoint(point) {
      var t2, t3, t4,
        coords = A.List_List$from(point._edwards$_coords, true, type$.BigInt),
        t1 = coords.length;
      if (0 >= t1)
        return A.ioore(coords, 0);
      t2 = coords[0];
      if (1 >= t1)
        return A.ioore(coords, 1);
      t3 = coords[1];
      if (2 >= t1)
        return A.ioore(coords, 2);
      t4 = coords[2];
      if (3 >= t1)
        return A.ioore(coords, 3);
      return new A.RistrettoPoint(point.curve, point.order, false, B.List_empty0, A._setArrayType([t2, t3, t4, coords[3]], type$.JSArray_BigInt));
    },
    RistrettoPoint: function RistrettoPoint(t0, t1, t2, t3, t4) {
      var _ = this;
      _.curve = t0;
      _.order = t1;
      _.generator = t2;
      _._edwards$_precompute = t3;
      _._edwards$_coords = t4;
    },
    ChaCha20Poly1305$(key) {
      var t2,
        t1 = new A.ChaCha20Poly1305();
      if (key.length !== 32)
        A.throwExpression(B.CryptoException_oAd);
      t2 = A.ListHelper_clone(key, type$.int);
      A.BytesUtils_validateListOfBytes(t2);
      t1.__ChaCha20Poly1305__key_A = type$.List_int._as(t2);
      return t1;
    },
    ChaCha20Poly1305: function ChaCha20Poly1305() {
      this.__ChaCha20Poly1305__key_A = $;
    },
    CTR$(cipher, iv) {
      var t1 = new A.CTR(),
        t2 = type$.int,
        t3 = type$.List_int,
        t4 = t3._as(A.List_List$filled(16, 0, false, t2));
      t1.__CTR__counter_F = t4;
      t2 = t3._as(A.List_List$filled(16, 0, false, t2));
      t1.__CTR__buffer_F = t2;
      type$.nullable_List_int._as(iv);
      if (16 !== t4.length)
        A.throwExpression(B.CryptoException_ULN);
      t1._cipher = cipher;
      B.JSArray_methods.setAll$2(t4, 0, iv);
      t1._bufpos = t2.length;
      return t1;
    },
    _incrementCounter(counter) {
      var i, carry;
      for (i = counter.length - 1, carry = 1; i >= 0; --i) {
        carry += counter[i] & 255;
        B.JSArray_methods.$indexSet(counter, i, carry & 255);
        carry = carry >>> 8;
      }
      if (carry > 0)
        throw A.wrapException(B.CryptoException_TXP);
    },
    CTR: function CTR() {
      var _ = this;
      _.__CTR__buffer_F = _.__CTR__counter_F = $;
      _._bufpos = 0;
      _._cipher = null;
    },
    CryptoException$(message, details) {
      return new A.CryptoException(message, details);
    },
    CryptoException: function CryptoException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    SquareRootError: function SquareRootError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    JacobiError: function JacobiError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    BLAKE2b$(config, digestLength) {
      var t1 = type$.int,
        t2 = A.List_List$from($.$get$_iv(), false, t1),
        t3 = new A.BLAKE2b(t2, A.List_List$filled(128, 0, false, t1), A.List_List$filled(4, 0, false, t1), A.List_List$filled(4, 0, false, t1), A.List_List$filled(32, 0, false, t1), A.List_List$filled(32, 0, false, t1));
      if (digestLength < 1 || digestLength > 64)
        A.throwExpression(B.CryptoException_HYf);
      t3.__BLAKE2b_getDigestLength_F = digestLength;
      if (0 >= t2.length)
        return A.ioore(t2, 0);
      B.JSArray_methods.$indexSet(t2, 0, (t2[0] ^ (digestLength | 16842752)) >>> 0);
      t3.__BLAKE2b__initialState_A = type$.List_int._as(A.List_List$from(t2, false, t1));
      return t3;
    },
    _keccakf(sh, sl, buf) {
      var i, t1, r, bch0, bch1, bch2, bch3, bch4, bcl0, bcl1, bcl2, bcl3, bcl4, th, tl, bch00, bcl00, t2;
      for (i = 0; i < 25; ++i) {
        t1 = i * 8;
        B.JSArray_methods.$indexSet(sl, i, A.readUint32LE(buf, t1));
        B.JSArray_methods.$indexSet(sh, i, A.readUint32LE(buf, t1 + 4));
      }
      for (r = 0; r < 24; ++r) {
        t1 = sh[0];
        bch0 = t1 ^ sh[5] ^ sh[10] ^ sh[15] ^ sh[20];
        bch1 = sh[1] ^ sh[6] ^ sh[11] ^ sh[16] ^ sh[21];
        bch2 = sh[2] ^ sh[7] ^ sh[12] ^ sh[17] ^ sh[22];
        bch3 = sh[3] ^ sh[8] ^ sh[13] ^ sh[18] ^ sh[23];
        bch4 = sh[4] ^ sh[9] ^ sh[14] ^ sh[19] ^ sh[24];
        bcl0 = sl[0] ^ sl[5] ^ sl[10] ^ sl[15] ^ sl[20];
        bcl1 = sl[1] ^ sl[6] ^ sl[11] ^ sl[16] ^ sl[21];
        bcl2 = sl[2] ^ sl[7] ^ sl[12] ^ sl[17] ^ sl[22];
        bcl3 = sl[3] ^ sl[8] ^ sl[13] ^ sl[18] ^ sl[23];
        bcl4 = sl[4] ^ sl[9] ^ sl[14] ^ sl[19] ^ sl[24];
        th = bch4 ^ (bch1 << 1 | bcl1 >>> 31);
        tl = bcl4 ^ (bcl1 << 1 | bch1 >>> 31);
        B.JSArray_methods.$indexSet(sh, 0, (t1 ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 5, (sh[5] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 10, (sh[10] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 15, (sh[15] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 20, (sh[20] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 0, (sl[0] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 5, (sl[5] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 10, (sl[10] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 15, (sl[15] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 20, (sl[20] ^ tl) >>> 0);
        th = bch0 ^ (bch2 << 1 | bcl2 >>> 31);
        tl = bcl0 ^ (bcl2 << 1 | bch2 >>> 31);
        B.JSArray_methods.$indexSet(sh, 1, (sh[1] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 6, (sh[6] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 11, (sh[11] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 16, (sh[16] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 21, (sh[21] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 1, (sl[1] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 6, (sl[6] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 11, (sl[11] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 16, (sl[16] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 21, (sl[21] ^ tl) >>> 0);
        th = bch1 ^ (bch3 << 1 | bcl3 >>> 31);
        tl = bcl1 ^ (bcl3 << 1 | bch3 >>> 31);
        B.JSArray_methods.$indexSet(sh, 2, (sh[2] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 7, (sh[7] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 12, (sh[12] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 17, (sh[17] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 22, (sh[22] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 2, (sl[2] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 7, (sl[7] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 12, (sl[12] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 17, (sl[17] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 22, (sl[22] ^ tl) >>> 0);
        th = bch2 ^ (bch4 << 1 | bcl4 >>> 31);
        tl = bcl2 ^ (bcl4 << 1 | bch4 >>> 31);
        B.JSArray_methods.$indexSet(sh, 3, (sh[3] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 3, (sl[3] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sh, 8, (sh[8] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 8, (sl[8] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sh, 13, (sh[13] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 13, (sl[13] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sh, 18, (sh[18] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 18, (sl[18] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sh, 23, (sh[23] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 23, (sl[23] ^ tl) >>> 0);
        th = bch3 ^ (bch0 << 1 | bcl0 >>> 31);
        tl = bcl3 ^ (bcl0 << 1 | bch0 >>> 31);
        B.JSArray_methods.$indexSet(sh, 4, (sh[4] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 9, (sh[9] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 14, (sh[14] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 19, (sh[19] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sh, 24, (sh[24] ^ th) >>> 0);
        B.JSArray_methods.$indexSet(sl, 4, (sl[4] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 9, (sl[9] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 14, (sl[14] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 19, (sl[19] ^ tl) >>> 0);
        B.JSArray_methods.$indexSet(sl, 24, (sl[24] ^ tl) >>> 0);
        th = sh[1];
        tl = sl[1];
        bch0 = sh[10];
        bcl0 = sl[10];
        B.JSArray_methods.$indexSet(sh, 10, (th << 1 | tl >>> 31) >>> 0);
        B.JSArray_methods.$indexSet(sl, 10, (tl << 1 | th >>> 31) >>> 0);
        bch00 = sh[7];
        bcl00 = sl[7];
        B.JSArray_methods.$indexSet(sh, 7, (bch0 << 3 | bcl0 >>> 29) >>> 0);
        B.JSArray_methods.$indexSet(sl, 7, (bcl0 << 3 | bch0 >>> 29) >>> 0);
        bch0 = sh[11];
        bcl0 = sl[11];
        B.JSArray_methods.$indexSet(sh, 11, (bch00 << 6 | bcl00 >>> 26) >>> 0);
        B.JSArray_methods.$indexSet(sl, 11, (bcl00 << 6 | bch00 >>> 26) >>> 0);
        bch00 = sh[17];
        bcl00 = sl[17];
        B.JSArray_methods.$indexSet(sh, 17, (bch0 << 10 | bcl0 >>> 22) >>> 0);
        B.JSArray_methods.$indexSet(sl, 17, (bcl0 << 10 | bch0 >>> 22) >>> 0);
        bch0 = sh[18];
        bcl0 = sl[18];
        B.JSArray_methods.$indexSet(sh, 18, (bch00 << 15 | bcl00 >>> 17) >>> 0);
        B.JSArray_methods.$indexSet(sl, 18, (bcl00 << 15 | bch00 >>> 17) >>> 0);
        bch00 = sh[3];
        bcl00 = sl[3];
        B.JSArray_methods.$indexSet(sh, 3, (bch0 << 21 | bcl0 >>> 11) >>> 0);
        B.JSArray_methods.$indexSet(sl, 3, (bcl0 << 21 | bch0 >>> 11) >>> 0);
        bch0 = sh[5];
        bcl0 = sl[5];
        B.JSArray_methods.$indexSet(sh, 5, (bch00 << 28 | bcl00 >>> 4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 5, (bcl00 << 28 | bch00 >>> 4) >>> 0);
        bch00 = sh[16];
        bcl00 = sl[16];
        B.JSArray_methods.$indexSet(sh, 16, (bcl0 << 4 | bch0 >>> 28) >>> 0);
        B.JSArray_methods.$indexSet(sl, 16, (bch0 << 4 | bcl0 >>> 28) >>> 0);
        bch0 = sh[8];
        bcl0 = sl[8];
        B.JSArray_methods.$indexSet(sh, 8, (bcl00 << 13 | bch00 >>> 19) >>> 0);
        B.JSArray_methods.$indexSet(sl, 8, (bch00 << 13 | bcl00 >>> 19) >>> 0);
        bch00 = sh[21];
        bcl00 = sl[21];
        B.JSArray_methods.$indexSet(sh, 21, (bcl0 << 23 | bch0 >>> 9) >>> 0);
        B.JSArray_methods.$indexSet(sl, 21, (bch0 << 23 | bcl0 >>> 9) >>> 0);
        bch0 = sh[24];
        bcl0 = sl[24];
        B.JSArray_methods.$indexSet(sh, 24, (bch00 << 2 | bcl00 >>> 30) >>> 0);
        B.JSArray_methods.$indexSet(sl, 24, (bcl00 << 2 | bch00 >>> 30) >>> 0);
        bch00 = sh[4];
        bcl00 = sl[4];
        B.JSArray_methods.$indexSet(sh, 4, (bch0 << 14 | bcl0 >>> 18) >>> 0);
        B.JSArray_methods.$indexSet(sl, 4, (bcl0 << 14 | bch0 >>> 18) >>> 0);
        bch0 = sh[15];
        bcl0 = sl[15];
        B.JSArray_methods.$indexSet(sh, 15, (bch00 << 27 | bcl00 >>> 5) >>> 0);
        B.JSArray_methods.$indexSet(sl, 15, (bcl00 << 27 | bch00 >>> 5) >>> 0);
        bch00 = sh[23];
        bcl00 = sl[23];
        B.JSArray_methods.$indexSet(sh, 23, (bcl0 << 9 | bch0 >>> 23) >>> 0);
        B.JSArray_methods.$indexSet(sl, 23, (bch0 << 9 | bcl0 >>> 23) >>> 0);
        bch0 = sh[19];
        bcl0 = sl[19];
        B.JSArray_methods.$indexSet(sh, 19, (bcl00 << 24 | bch00 >>> 8) >>> 0);
        B.JSArray_methods.$indexSet(sl, 19, (bch00 << 24 | bcl00 >>> 8) >>> 0);
        bch00 = sh[13];
        bcl00 = sl[13];
        B.JSArray_methods.$indexSet(sh, 13, (bch0 << 8 | bcl0 >>> 24) >>> 0);
        B.JSArray_methods.$indexSet(sl, 13, (bcl0 << 8 | bch0 >>> 24) >>> 0);
        bch0 = sh[12];
        bcl0 = sl[12];
        B.JSArray_methods.$indexSet(sh, 12, (bch00 << 25 | bcl00 >>> 7) >>> 0);
        B.JSArray_methods.$indexSet(sl, 12, (bcl00 << 25 | bch00 >>> 7) >>> 0);
        bch00 = sh[2];
        bcl00 = sl[2];
        B.JSArray_methods.$indexSet(sh, 2, (bcl0 << 11 | bch0 >>> 21) >>> 0);
        B.JSArray_methods.$indexSet(sl, 2, (bch0 << 11 | bcl0 >>> 21) >>> 0);
        bch0 = sh[20];
        bcl0 = sl[20];
        B.JSArray_methods.$indexSet(sh, 20, (bcl00 << 30 | bch00 >>> 2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 20, (bch00 << 30 | bcl00 >>> 2) >>> 0);
        bch00 = sh[14];
        bcl00 = sl[14];
        B.JSArray_methods.$indexSet(sh, 14, (bch0 << 18 | bcl0 >>> 14) >>> 0);
        B.JSArray_methods.$indexSet(sl, 14, (bcl0 << 18 | bch0 >>> 14) >>> 0);
        bch0 = sh[22];
        bcl0 = sl[22];
        B.JSArray_methods.$indexSet(sh, 22, (bcl00 << 7 | bch00 >>> 25) >>> 0);
        B.JSArray_methods.$indexSet(sl, 22, (bch00 << 7 | bcl00 >>> 25) >>> 0);
        bch00 = sh[9];
        bcl00 = sl[9];
        B.JSArray_methods.$indexSet(sh, 9, (bcl0 << 29 | bch0 >>> 3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 9, (bch0 << 29 | bcl0 >>> 3) >>> 0);
        bch0 = sh[6];
        bcl0 = sl[6];
        B.JSArray_methods.$indexSet(sh, 6, (bch00 << 20 | bcl00 >>> 12) >>> 0);
        B.JSArray_methods.$indexSet(sl, 6, (bcl00 << 20 | bch00 >>> 12) >>> 0);
        B.JSArray_methods.$indexSet(sh, 1, (bcl0 << 12 | bch0 >>> 20) >>> 0);
        B.JSArray_methods.$indexSet(sl, 1, (bch0 << 12 | bcl0 >>> 20) >>> 0);
        bch0 = sh[0];
        bch1 = sh[1];
        bch2 = sh[2];
        bch3 = sh[3];
        bch4 = sh[4];
        B.JSArray_methods.$indexSet(sh, 0, (bch0 ^ ~bch1 & bch2) >>> 0);
        B.JSArray_methods.$indexSet(sh, 1, (sh[1] ^ ~bch2 & bch3) >>> 0);
        B.JSArray_methods.$indexSet(sh, 2, (sh[2] ^ ~bch3 & bch4) >>> 0);
        B.JSArray_methods.$indexSet(sh, 3, (sh[3] ^ ~bch4 & bch0) >>> 0);
        B.JSArray_methods.$indexSet(sh, 4, (sh[4] ^ ~bch0 & bch1) >>> 0);
        bcl0 = sl[0];
        bcl1 = sl[1];
        bcl2 = sl[2];
        bcl3 = sl[3];
        bcl4 = sl[4];
        B.JSArray_methods.$indexSet(sl, 0, (bcl0 ^ ~bcl1 & bcl2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 1, (sl[1] ^ ~bcl2 & bcl3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 2, (sl[2] ^ ~bcl3 & bcl4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 3, (sl[3] ^ ~bcl4 & bcl0) >>> 0);
        B.JSArray_methods.$indexSet(sl, 4, (sl[4] ^ ~bcl0 & bcl1) >>> 0);
        bch0 = sh[5];
        bch1 = sh[6];
        bch2 = sh[7];
        bch3 = sh[8];
        bch4 = sh[9];
        B.JSArray_methods.$indexSet(sh, 5, (bch0 ^ ~bch1 & bch2) >>> 0);
        B.JSArray_methods.$indexSet(sh, 6, (sh[6] ^ ~bch2 & bch3) >>> 0);
        B.JSArray_methods.$indexSet(sh, 7, (sh[7] ^ ~bch3 & bch4) >>> 0);
        B.JSArray_methods.$indexSet(sh, 8, (sh[8] ^ ~bch4 & bch0) >>> 0);
        B.JSArray_methods.$indexSet(sh, 9, (sh[9] ^ ~bch0 & bch1) >>> 0);
        bcl0 = sl[5];
        bcl1 = sl[6];
        bcl2 = sl[7];
        bcl3 = sl[8];
        bcl4 = sl[9];
        B.JSArray_methods.$indexSet(sl, 5, (bcl0 ^ ~bcl1 & bcl2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 6, (sl[6] ^ ~bcl2 & bcl3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 7, (sl[7] ^ ~bcl3 & bcl4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 8, (sl[8] ^ ~bcl4 & bcl0) >>> 0);
        B.JSArray_methods.$indexSet(sl, 9, (sl[9] ^ ~bcl0 & bcl1) >>> 0);
        bch0 = sh[10];
        bch1 = sh[11];
        bch2 = sh[12];
        bch3 = sh[13];
        bch4 = sh[14];
        B.JSArray_methods.$indexSet(sh, 10, (bch0 ^ ~bch1 & bch2) >>> 0);
        B.JSArray_methods.$indexSet(sh, 11, (sh[11] ^ ~bch2 & bch3) >>> 0);
        B.JSArray_methods.$indexSet(sh, 12, (sh[12] ^ ~bch3 & bch4) >>> 0);
        B.JSArray_methods.$indexSet(sh, 13, (sh[13] ^ ~bch4 & bch0) >>> 0);
        B.JSArray_methods.$indexSet(sh, 14, (sh[14] ^ ~bch0 & bch1) >>> 0);
        bcl0 = sl[10];
        bcl1 = sl[11];
        bcl2 = sl[12];
        bcl3 = sl[13];
        bcl4 = sl[14];
        B.JSArray_methods.$indexSet(sl, 10, (bcl0 ^ ~bcl1 & bcl2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 11, (sl[11] ^ ~bcl2 & bcl3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 12, (sl[12] ^ ~bcl3 & bcl4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 13, (sl[13] ^ ~bcl4 & bcl0) >>> 0);
        B.JSArray_methods.$indexSet(sl, 14, (sl[14] ^ ~bcl0 & bcl1) >>> 0);
        bch0 = sh[15];
        bch1 = sh[16];
        bch2 = sh[17];
        bch3 = sh[18];
        bch4 = sh[19];
        B.JSArray_methods.$indexSet(sh, 15, (bch0 ^ ~bch1 & bch2) >>> 0);
        B.JSArray_methods.$indexSet(sh, 16, (sh[16] ^ ~bch2 & bch3) >>> 0);
        B.JSArray_methods.$indexSet(sh, 17, (sh[17] ^ ~bch3 & bch4) >>> 0);
        B.JSArray_methods.$indexSet(sh, 18, (sh[18] ^ ~bch4 & bch0) >>> 0);
        B.JSArray_methods.$indexSet(sh, 19, (sh[19] ^ ~bch0 & bch1) >>> 0);
        bcl0 = sl[15];
        bcl1 = sl[16];
        bcl2 = sl[17];
        bcl3 = sl[18];
        bcl4 = sl[19];
        B.JSArray_methods.$indexSet(sl, 15, (bcl0 ^ ~bcl1 & bcl2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 16, (sl[16] ^ ~bcl2 & bcl3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 17, (sl[17] ^ ~bcl3 & bcl4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 18, (sl[18] ^ ~bcl4 & bcl0) >>> 0);
        B.JSArray_methods.$indexSet(sl, 19, (sl[19] ^ ~bcl0 & bcl1) >>> 0);
        bch0 = sh[20];
        bch1 = sh[21];
        bch2 = sh[22];
        bch3 = sh[23];
        bch4 = sh[24];
        B.JSArray_methods.$indexSet(sh, 20, (bch0 ^ ~bch1 & bch2) >>> 0);
        B.JSArray_methods.$indexSet(sh, 21, (sh[21] ^ ~bch2 & bch3) >>> 0);
        B.JSArray_methods.$indexSet(sh, 22, (sh[22] ^ ~bch3 & bch4) >>> 0);
        B.JSArray_methods.$indexSet(sh, 23, (sh[23] ^ ~bch4 & bch0) >>> 0);
        B.JSArray_methods.$indexSet(sh, 24, (sh[24] ^ ~bch0 & bch1) >>> 0);
        bcl0 = sl[20];
        bcl1 = sl[21];
        bcl2 = sl[22];
        bcl3 = sl[23];
        bcl4 = sl[24];
        B.JSArray_methods.$indexSet(sl, 20, (bcl0 ^ ~bcl1 & bcl2) >>> 0);
        B.JSArray_methods.$indexSet(sl, 21, (sl[21] ^ ~bcl2 & bcl3) >>> 0);
        B.JSArray_methods.$indexSet(sl, 22, (sl[22] ^ ~bcl3 & bcl4) >>> 0);
        B.JSArray_methods.$indexSet(sl, 23, (sl[23] ^ ~bcl4 & bcl0) >>> 0);
        B.JSArray_methods.$indexSet(sl, 24, (sl[24] ^ ~bcl0 & bcl1) >>> 0);
        t1 = sh[0];
        t2 = $.$get$_hi();
        if (!(r < t2.length))
          return A.ioore(t2, r);
        B.JSArray_methods.$indexSet(sh, 0, (t1 ^ t2[r]) >>> 0);
        t2 = sl[0];
        t1 = $.$get$_lo();
        if (!(r < t1.length))
          return A.ioore(t1, r);
        B.JSArray_methods.$indexSet(sl, 0, (t2 ^ t1[r]) >>> 0);
      }
      for (i = 0; i < 25; ++i) {
        t1 = i * 8;
        A.writeUint32LE(sl[i], buf, t1);
        A.writeUint32LE(sh[i], buf, t1 + 4);
      }
    },
    MD5__ff(x, y, z) {
      return (x & y | ~x & z) >>> 0;
    },
    MD5__gg(x, y, z) {
      return (x & z | y & ~z) >>> 0;
    },
    MD5__hh(x, y, z) {
      return (x ^ y ^ z) >>> 0;
    },
    MD5__ii(x, y, z) {
      return (y ^ (x | ~z)) >>> 0;
    },
    _RidempUtils_T(i, bl, cl, dl) {
      if (i < 16)
        return (bl ^ cl ^ dl) >>> 0;
      if (i < 32)
        return ((bl & cl | ~bl & dl) >>> 0) + 1518500249 >>> 0;
      if (i < 48)
        return (((bl | ~cl) ^ dl) >>> 0) + 1859775393 >>> 0;
      if (i < 64)
        return ((bl & dl | cl & ~dl) >>> 0) + 2400959708 >>> 0;
      return ((bl ^ (cl | ~dl)) >>> 0) + 2840853838 >>> 0;
    },
    _RidempUtils_t64(i, br, cr, dr) {
      if (i < 16)
        return ((br & dr | cr & ~dr) >>> 0) + 1352829926 >>> 0;
      if (i < 32)
        return (((br | ~cr) ^ dr) >>> 0) + 1548603684 >>> 0;
      if (i < 48)
        return ((br & cr | ~br & dr) >>> 0) + 1836072691 >>> 0;
      return (br ^ cr ^ dr) >>> 0;
    },
    _RidempUtils_t80(i, br, cr, dr) {
      if (i < 16)
        return ((br ^ (cr | ~dr)) >>> 0) + 1352829926 >>> 0;
      if (i < 32)
        return ((br & dr | cr & ~dr) >>> 0) + 1548603684 >>> 0;
      if (i < 48)
        return (((br | ~cr) ^ dr) >>> 0) + 1836072691 >>> 0;
      if (i < 64)
        return ((br & cr | ~br & dr) >>> 0) + 2053994217 >>> 0;
      return (br ^ cr ^ dr) >>> 0;
    },
    _RidempUtils_readState(lengthInBytes) {
      var _3285377520 = 3285377520, _1985229328 = 1985229328, _4275878552 = 4275878552, _2309737967 = 2309737967,
        state = A.List_List$filled(B.JSInt_methods._tdivFast$1(lengthInBytes, 4), 0, false, type$.int);
      B.JSArray_methods.$indexSet(state, 0, 1732584193);
      B.JSArray_methods.$indexSet(state, 1, 4023233417);
      B.JSArray_methods.$indexSet(state, 2, 2562383102);
      B.JSArray_methods.$indexSet(state, 3, 271733878);
      switch (lengthInBytes) {
        case 20:
          B.JSArray_methods.$indexSet(state, 4, _3285377520);
          break;
        case 32:
          B.JSArray_methods.$indexSet(state, 4, _1985229328);
          B.JSArray_methods.$indexSet(state, 5, _4275878552);
          B.JSArray_methods.$indexSet(state, 6, _2309737967);
          B.JSArray_methods.$indexSet(state, 7, 19088743);
          break;
        case 40:
          B.JSArray_methods.$indexSet(state, 4, _3285377520);
          B.JSArray_methods.$indexSet(state, 5, _1985229328);
          B.JSArray_methods.$indexSet(state, 6, _4275878552);
          B.JSArray_methods.$indexSet(state, 7, _2309737967);
          B.JSArray_methods.$indexSet(state, 8, 19088743);
          B.JSArray_methods.$indexSet(state, 9, 1009589775);
          break;
      }
      return state;
    },
    SHA256$() {
      var t1 = type$.int;
      t1 = new A.SHA256(A.List_List$filled(8, 0, false, t1), A.List_List$filled(64, 0, false, t1), A.List_List$filled(128, 0, false, t1), A.List_List$unmodifiable(B.List_H5O, t1));
      t1.reset$0();
      return t1;
    },
    SHA256_hash(data) {
      var out,
        t1 = type$.int,
        t2 = A.List_List$filled(8, 0, false, t1),
        t3 = A.List_List$filled(64, 0, false, t1),
        t4 = A.List_List$filled(128, 0, false, t1),
        h = new A.SHA256(t2, t3, t4, A.List_List$unmodifiable(B.List_H5O, t1));
      h.reset$0();
      h.update$1(data);
      out = A.List_List$filled(32, 0, false, t1);
      h.finish$1(out);
      A.zero(t4);
      A.zero(t3);
      h.reset$0();
      return out;
    },
    SHA512$() {
      var t1 = type$.int;
      t1 = new A.SHA512(A.List_List$filled(8, 0, false, t1), A.List_List$filled(8, 0, false, t1), A.List_List$filled(16, 0, false, t1), A.List_List$filled(16, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$unmodifiable(B.List_INy, t1));
      t1.reset$0();
      return t1;
    },
    Blake2bConfig: function Blake2bConfig(t0, t1) {
      this.key = t0;
      this.salt = t1;
    },
    BLAKE2b: function BLAKE2b(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._hash$_state = t0;
      _._hash$_buffer = t1;
      _._bufferLength = 0;
      _._ctr = t2;
      _._flag = t3;
      _._hash$_finished = _._lastNode = false;
      _._vtmp = t4;
      _._mtmp = t5;
      _._paddedKey = null;
      _.__BLAKE2b_getDigestLength_F = _.__BLAKE2b__initialState_A = $;
    },
    _Keccack: function _Keccack() {
    },
    Keccack: function Keccack(t0, t1, t2, t3) {
      var _ = this;
      _.digestLength = t0;
      _._sh = t1;
      _._sl = t2;
      _._hash$_state = t3;
      _._pos = 0;
      _._hash$_finished = false;
      _.___Keccack_blockSize_F = $;
    },
    SHAKE: function SHAKE() {
    },
    SHAKE256: function SHAKE256(t0, t1, t2) {
      var _ = this;
      _._sh = t0;
      _._sl = t1;
      _._hash$_state = t2;
      _._pos = 0;
      _._hash$_finished = false;
      _.___Keccack_blockSize_F = $;
    },
    MD5: function MD5(t0, t1, t2) {
      var _ = this;
      _._hash$_buffer = t0;
      _._lengthInBytes = 0;
      _._hash$_state = t1;
      _._currentChunk = t2;
      _._hash$_finished = false;
    },
    RIPEMD160: function RIPEMD160(t0, t1) {
      var _ = this;
      _._hash$_buffer = t0;
      _._lengthInBytes = 0;
      _.___RIPEMD__state_F = $;
      _._currentChunk = t1;
      _._hash$_finished = false;
    },
    _RIPEMD: function _RIPEMD() {
    },
    SHA256: function SHA256(t0, t1, t2, t3) {
      var _ = this;
      _._hash$_state = t0;
      _._temp = t1;
      _._hash$_buffer = t2;
      _._bytesHashed = _._bufferLength = 0;
      _._hash$_finished = false;
      _._k = t3;
    },
    SHA512: function SHA512(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._stateHi = t0;
      _._stateLo = t1;
      _._tempHi = t2;
      _._tempLo = t3;
      _._hash$_buffer = t4;
      _._bytesHashed = _._bufferLength = 0;
      _._hash$_finished = false;
      _._k = t5;
    },
    SHA512256: function SHA512256(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._stateHi = t0;
      _._stateLo = t1;
      _._tempHi = t2;
      _._tempLo = t3;
      _._hash$_buffer = t4;
      _._bytesHashed = _._bufferLength = 0;
      _._hash$_finished = false;
      _._k = t5;
    },
    Poly1305: function Poly1305(t0, t1, t2, t3) {
      var _ = this;
      _._buffer = t0;
      _._r = t1;
      _._h = t2;
      _._pad = t3;
      _._fin = _._leftover = 0;
      _._finished = false;
    },
    FortunaPRNG__generateSeed(digestLen) {
      var i,
        rand = $.$get$Random__secureRandom(),
        seed = A.List_List$filled(digestLen, 0, false, type$.int);
      for (i = 0; i < digestLen; ++i)
        B.JSArray_methods.$indexSet(seed, i, rand.nextInt$1(256));
      return seed;
    },
    FortunaPRNG: function FortunaPRNG(t0, t1) {
      var _ = this;
      _.__FortunaPRNG__counter_FI = _.__FortunaPRNG__key_FI = $;
      _._zeroBlock = t0;
      _._out = t1;
      _._c = 0;
    },
    SchnorrkelPublicKey: function SchnorrkelPublicKey(t0) {
      this._keys$_publicKey = t0;
    },
    QuickCrypto__generateRandom_closure: function QuickCrypto__generateRandom_closure() {
    },
    ArgumentException$(message, details) {
      return new A.ArgumentException(message, details);
    },
    BlockchainUtilsException: function BlockchainUtilsException() {
    },
    BlockchainUtilsException_toString_closure: function BlockchainUtilsException_toString_closure() {
    },
    BlockchainUtilsException_toString_closure0: function BlockchainUtilsException_toString_closure0() {
    },
    ArgumentException: function ArgumentException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    MessageException: function MessageException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    RPCError$(details, errorCode, message, request) {
      return new A.RPCError(errorCode, message, details);
    },
    RPCError: function RPCError(t0, t1, t2) {
      this.errorCode = t0;
      this.message = t1;
      this.details = t2;
    },
    RPCError_toString_closure: function RPCError_toString_closure() {
    },
    RPCError_toString_closure0: function RPCError_toString_closure0() {
    },
    _Hex: function _Hex() {
    },
    LayoutByteReader: function LayoutByteReader(t0) {
      this._bytes = t0;
    },
    LayoutByteWriter: function LayoutByteWriter(t0, t1) {
      this.growable = t0;
      this._byte_handler$_buffer = t1;
    },
    LayoutConst_optional(layout, property) {
      return A.OptionalLayout_OptionalLayout(layout, null, false, property, type$.dynamic);
    },
    LayoutConst_boolean(property) {
      var t1 = A.IntegerLayout$(1, B.C_Endian0, null, false);
      return new A.CustomLayout(t1, new A.LayoutConst_boolean_closure(), new A.LayoutConst_boolean_closure0(property), t1.span, property, type$.CustomLayout_int_bool);
    },
    LayoutConst_rustEnum(variants, property, useKeyAndValue) {
      var t1 = A.IntegerLayout$(1, B.C_Endian0, null, false),
        unionLayout = A.Union_Union(t1, null, null);
      new A.ListMapView(variants, A._arrayInstanceType(variants)._eval$1("ListMapView<1>")).forEach$1(0, new A.LayoutConst_rustEnum_closure(unionLayout));
      return new A.CustomLayout(unionLayout, new A.LayoutConst_rustEnum_closure0(), new A.LayoutConst_rustEnum_closure1(useKeyAndValue), unionLayout.span, property, type$.CustomLayout_of_Map_String_dynamic_and_Map_String_dynamic);
    },
    LayoutConst_compactString(property) {
      return new A.CustomLayout(new A.CompactBytes(-1, null), new A.LayoutConst_compactString_closure(), new A.LayoutConst_compactString_closure0(), -1, property, type$.CustomLayout_of_List_int_and_String);
    },
    LayoutConst_compactMap(keyLayout, valueLayout, property, $K, $V) {
      var layout = A.StructLayout_StructLayout(A._setArrayType([A.SequenceLayout_SequenceLayout(new A.CompactOffsetLayout(-1, null), A.MapEntryLayout$(keyLayout, "", valueLayout), "values", type$.dynamic)], type$.JSArray_Layout_dynamic), false, null);
      return new A.CustomLayout(layout, new A.LayoutConst_compactMap_closure($K, $V), new A.LayoutConst_compactMap_closure0($K, $V), layout.span, property, type$.$env_1_1_Map_String_dynamic._bind$1($K._eval$1("@<0>")._bind$1($V)._eval$1("Map<1,2>"))._eval$1("CustomLayout<1,2>"));
    },
    LayoutConst_compactVec(elementLayout, property, $T) {
      var layout = A.StructLayout_StructLayout(A._setArrayType([A.SequenceLayout_SequenceLayout(new A.CompactOffsetLayout(-1, null), elementLayout, "values", type$.dynamic)], type$.JSArray_Layout_dynamic), false, null);
      return new A.CustomLayout(layout, new A.LayoutConst_compactVec_closure($T), new A.LayoutConst_compactVec_closure0($T), layout.span, property, type$.$env_1_1_Map_String_dynamic._bind$1($T._eval$1("List<0>"))._eval$1("CustomLayout<1,2>"));
    },
    LayoutConst_bcsString(property) {
      var t1 = A.LayoutConst_bcsVector(A.IntegerLayout$(1, B.C_Endian0, null, false), null, type$.int);
      return new A.CustomLayout(t1, new A.LayoutConst_bcsString_closure(), new A.LayoutConst_bcsString_closure0(), t1.span, property, type$.CustomLayout_of_List_int_and_String);
    },
    LayoutConst_bcsVector(elementLayout, property, $T) {
      var layout = A.StructLayout_StructLayout(A._setArrayType([A.SequenceLayout_SequenceLayout(A.LEB128U32OffsetLayout$(null), elementLayout, "values", type$.dynamic)], type$.JSArray_Layout_dynamic), false, null);
      return new A.CustomLayout(layout, new A.LayoutConst_bcsVector_closure($T), new A.LayoutConst_bcsVector_closure0($T), layout.span, property, type$.$env_1_1_Map_String_dynamic._bind$1($T._eval$1("List<0>"))._eval$1("CustomLayout<1,2>"));
    },
    LayoutConst_bcsLazyEnum(variants, property) {
      var unionLayout = new A.LazyUnion(A.UnionLayoutDiscriminatorLayout$(A.LEB128U32OffsetLayout$(null), null), A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.LazyVariantLayout), -1, null);
      new A.ListMapView(variants, A._arrayInstanceType(variants)._eval$1("ListMapView<1>")).forEach$1(0, new A.LayoutConst_bcsLazyEnum_closure(unionLayout));
      return new A.CustomLayout(unionLayout, new A.LayoutConst_bcsLazyEnum_closure0(), new A.LayoutConst_bcsLazyEnum_closure1(), -1, property, type$.CustomLayout_of_Map_String_dynamic_and_Map_String_dynamic);
    },
    LayoutConst_boolean_closure0: function LayoutConst_boolean_closure0(t0) {
      this.property = t0;
    },
    LayoutConst_boolean_closure: function LayoutConst_boolean_closure() {
    },
    LayoutConst_rustEnum_closure: function LayoutConst_rustEnum_closure(t0) {
      this.unionLayout = t0;
    },
    LayoutConst_rustEnum_closure1: function LayoutConst_rustEnum_closure1(t0) {
      this.useKeyAndValue = t0;
    },
    LayoutConst_rustEnum_closure0: function LayoutConst_rustEnum_closure0() {
    },
    LayoutConst_compactString_closure0: function LayoutConst_compactString_closure0() {
    },
    LayoutConst_compactString_closure: function LayoutConst_compactString_closure() {
    },
    LayoutConst_compactMap_closure0: function LayoutConst_compactMap_closure0(t0, t1) {
      this.K = t0;
      this.V = t1;
    },
    LayoutConst_compactMap_closure: function LayoutConst_compactMap_closure(t0, t1) {
      this.K = t0;
      this.V = t1;
    },
    LayoutConst_compactVec_closure: function LayoutConst_compactVec_closure(t0) {
      this.T = t0;
    },
    LayoutConst_compactVec_closure0: function LayoutConst_compactVec_closure0(t0) {
      this.T = t0;
    },
    LayoutConst_bcsString_closure0: function LayoutConst_bcsString_closure0() {
    },
    LayoutConst_bcsString_closure: function LayoutConst_bcsString_closure() {
    },
    LayoutConst_bcsVector_closure: function LayoutConst_bcsVector_closure(t0) {
      this.T = t0;
    },
    LayoutConst_bcsVector_closure0: function LayoutConst_bcsVector_closure0(t0) {
      this.T = t0;
    },
    LayoutConst_bcsLazyEnum_closure: function LayoutConst_bcsLazyEnum_closure(t0) {
      this.unionLayout = t0;
    },
    LayoutConst_bcsLazyEnum_closure1: function LayoutConst_bcsLazyEnum_closure1() {
    },
    LayoutConst_bcsLazyEnum_closure0: function LayoutConst_bcsLazyEnum_closure0() {
    },
    Layout: function Layout() {
    },
    LayoutDecodeResult: function LayoutDecodeResult(t0, t1, t2) {
      this.consumed = t0;
      this.value = t1;
      this.$ti = t2;
    },
    SequenceLayout_SequenceLayout(count, elementLayout, property, $T) {
      count.isCount$0();
      count.isCount$0();
      return new A.SequenceLayout(elementLayout, count, -1, property, $T._eval$1("SequenceLayout<0>"));
    },
    SequenceLayout: function SequenceLayout(t0, t1, t2, t3, t4) {
      var _ = this;
      _.elementLayout = t0;
      _.count = t1;
      _.span = t2;
      _.property = t3;
      _.$ti = t4;
    },
    SequenceLayout_encode_closure: function SequenceLayout_encode_closure(t0, t1, t2) {
      this.$this = t0;
      this.writer = t1;
      this.offset = t2;
    },
    CompactOffsetLayout: function CompactOffsetLayout(t0, t1) {
      this.span = t0;
      this.property = t1;
    },
    CompactBytes: function CompactBytes(t0, t1) {
      this.span = t0;
      this.property = t1;
    },
    CustomLayout: function CustomLayout(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.layout = t0;
      _.encoder = t1;
      _.decoder = t2;
      _.span = t3;
      _.property = t4;
      _.$ti = t5;
    },
    LazyVariantModel: function LazyVariantModel(t0, t1, t2, t3) {
      var _ = this;
      _.layout = t0;
      _.property = t1;
      _.index = t2;
      _.$ti = t3;
    },
    LazyUnion: function LazyUnion(t0, t1, t2, t3) {
      var _ = this;
      _.discriminator = t0;
      _._registry = t1;
      _.span = t2;
      _.property = t3;
    },
    LazyUnion_defaultGetSourceVariant_closure: function LazyUnion_defaultGetSourceVariant_closure() {
    },
    LazyVariantLayout: function LazyVariantLayout(t0, t1, t2, t3) {
      var _ = this;
      _.union = t0;
      _.layout = t1;
      _.span = t2;
      _.property = t3;
    },
    LEB128IntLayout_readVarint(bytes) {
      var t1, result, shift, i, byte;
      for (t1 = bytes.length, result = 0, shift = 0, i = 0; i < t1; ++i) {
        byte = bytes[i];
        result = (result | B.JSInt_methods._shlPositive$1(byte & 127, shift)) >>> 0;
        shift += 7;
        if ((byte & 128) === 0)
          break;
      }
      return result;
    },
    LEB128IntLayout_writeVarint(value) {
      var dest = A._setArrayType([], type$.JSArray_int);
      for (; value >= 128;) {
        B.JSArray_methods.add$1(dest, value & 127 | 128);
        value = B.JSInt_methods._shrOtherPositive$1(value, 7);
      }
      B.JSArray_methods.add$1(dest, value & 127);
      return dest;
    },
    LEB128IntLayout: function LEB128IntLayout(t0, t1, t2) {
      this.layout = t0;
      this.span = t1;
      this.property = t2;
    },
    LEB128U32OffsetLayout$(property) {
      return new A.LEB128U32OffsetLayout(new A.LEB128IntLayout(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, null), -1, property);
    },
    LEB128U32OffsetLayout: function LEB128U32OffsetLayout(t0, t1, t2) {
      this.layout = t0;
      this.span = t1;
      this.property = t2;
    },
    MapEntryLayout$(keyLayout, property, valueLayout) {
      var t1 = keyLayout.span;
      return new A.MapEntryLayout(keyLayout, valueLayout, t1 >= 0 && valueLayout.span >= 0 ? t1 + valueLayout.span : -1, property);
    },
    MapEntryLayout: function MapEntryLayout(t0, t1, t2, t3) {
      var _ = this;
      _.keyLayout = t0;
      _.valueLayout = t1;
      _.span = t2;
      _.property = t3;
    },
    NoneLayout: function NoneLayout(t0, t1) {
      this.span = t0;
      this.property = t1;
    },
    IntegerLayout$(span, order, property, sign) {
      var t1 = new A.IntegerLayout(false, order, span, property);
      if (6 < span)
        A.throwExpression(A.LayoutException$("span must not exceed 6 bytes", A.LinkedHashMap_LinkedHashMap$_literal(["property", property, "layout", A.getRuntimeTypeOfDartObject(t1).toString$0(0), "sign", false, "span", span], type$.String, type$.dynamic)));
      return t1;
    },
    UnionLayoutDiscriminatorLayout$(layout, property) {
      var t1 = layout.property;
      return new A.UnionLayoutDiscriminatorLayout(layout, 0, t1 == null ? "variant" : t1);
    },
    OffsetLayout$(layout, offset, property) {
      return new A.OffsetLayout(layout, offset, layout.span, layout.property);
    },
    CompactIntLayout$(layout, property) {
      return new A.CompactIntLayout(layout, -1, property);
    },
    ExternalLayout: function ExternalLayout() {
    },
    ExternalOffsetLayout: function ExternalOffsetLayout() {
    },
    BaseIntiger: function BaseIntiger() {
    },
    IntegerLayout: function IntegerLayout(t0, t1, t2, t3) {
      var _ = this;
      _.sign = t0;
      _.order = t1;
      _.span = t2;
      _.property = t3;
    },
    BigIntLayout: function BigIntLayout(t0, t1, t2, t3) {
      var _ = this;
      _.sign = t0;
      _.order = t1;
      _.span = t2;
      _.property = t3;
    },
    UnionDiscriminatorLayout: function UnionDiscriminatorLayout() {
    },
    UnionLayoutDiscriminatorLayout: function UnionLayoutDiscriminatorLayout(t0, t1, t2) {
      this.layout = t0;
      this.span = t1;
      this.property = t2;
    },
    OffsetLayout: function OffsetLayout(t0, t1, t2, t3) {
      var _ = this;
      _.layout = t0;
      _.offset = t1;
      _.span = t2;
      _.property = t3;
    },
    CompactIntLayout: function CompactIntLayout(t0, t1, t2) {
      this.layout = t0;
      this.span = t1;
      this.property = t2;
    },
    OptionalLayout_OptionalLayout(layout, discriminator, keepLayoutSize, property, $T) {
      var size, t1, result;
      discriminator = A.IntegerLayout$(1, B.C_Endian0, null, false);
      size = A._InitializedCell$named("size", new A.OptionalLayout_OptionalLayout_closure(false, layout, discriminator));
      t1 = size.__late_helper$_value;
      if (t1 === size) {
        result = size._initializer.call$0();
        if (size.__late_helper$_value !== size)
          A.throwExpression(new A.LateError("Local '" + size.__late_helper$_name + string$.x27_has_));
        size.__late_helper$_value = result;
        t1 = result;
      }
      return new A.OptionalLayout(layout, discriminator, t1, -1, property, $T._eval$1("OptionalLayout<0>"));
    },
    OptionalLayout__validateOption(property, value) {
      if (value !== 0 && value !== 1)
        throw A.wrapException(A.LayoutException$("Invalid option bytes.", A.LinkedHashMap_LinkedHashMap$_literal(["property", property, "value", value], type$.String, type$.dynamic)));
    },
    OptionalLayout: function OptionalLayout(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.layout = t0;
      _.discriminator = t1;
      _.size = t2;
      _.span = t3;
      _.property = t4;
      _.$ti = t5;
    },
    OptionalLayout_OptionalLayout_closure: function OptionalLayout_OptionalLayout_closure(t0, t1, t2) {
      this.keepLayoutSize = t0;
      this.layout = t1;
      this.disc = t2;
    },
    PaddingLayout: function PaddingLayout(t0, t1, t2, t3) {
      var _ = this;
      _.layout = t0;
      _.span = t1;
      _.property = t2;
      _.$ti = t3;
    },
    RawBytesLayout_RawBytesLayout($length, property) {
      if (B.JSInt_methods.get$isNegative($length))
        throw A.wrapException(A.LayoutException$("The length must be a positive integer.", A.LinkedHashMap_LinkedHashMap$_literal(["property", property, "length", $length], type$.String, type$.dynamic)));
      return new A.RawBytesLayout($length, $length, property);
    },
    RawBytesLayout: function RawBytesLayout(t0, t1, t2) {
      this.length = t0;
      this.span = t1;
      this.property = t2;
    },
    StructLayout_StructLayout(fields, decodePrefixes, property) {
      var span, t1, _i, exception;
      for (t1 = fields.length, _i = 0; _i < t1; ++_i)
        if (fields[_i].property == null) {
          t1 = type$.String;
          throw A.wrapException(A.LayoutException$("fields cannot contain unnamed layout", A.LinkedHashMap_LinkedHashMap$_literal(["property", property, "fields", B.JSArray_methods.map$1$1(fields, new A.StructLayout_StructLayout_closure(), t1).join$1(0, ", ")], t1, type$.dynamic)));
        }
      span = 0;
      try {
        span = B.JSArray_methods.fold$1$2(fields, 0, new A.StructLayout_StructLayout_closure0(), type$.int);
      } catch (exception) {
        span = -1;
      }
      t1 = span;
      return new A.StructLayout(A.List_List$unmodifiable(fields, type$.Layout_dynamic), false, t1, property);
    },
    StructLayout: function StructLayout(t0, t1, t2, t3) {
      var _ = this;
      _.fields = t0;
      _.decodePrefixes = t1;
      _.span = t2;
      _.property = t3;
    },
    StructLayout_StructLayout_closure: function StructLayout_StructLayout_closure() {
    },
    StructLayout_StructLayout_closure0: function StructLayout_StructLayout_closure0() {
    },
    StructLayout_getSpan_closure: function StructLayout_getSpan_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.bytes = t1;
      this.source = t2;
    },
    Union_Union(discr, defaultLayout, property) {
      var t2, usesPrefixDiscriminator, discriminator,
        _s70_ = "discr must be a UnionDiscriminatorLayout or an unsigned integer layout",
        t1 = !(discr instanceof A.UnionLayoutDiscriminatorLayout);
      if (t1)
        t2 = !(discr instanceof A.IntegerLayout);
      else
        t2 = false;
      if (t2)
        throw A.wrapException(A.LayoutException$(_s70_, A.LinkedHashMap_LinkedHashMap$_literal(["property", property], type$.String, type$.dynamic)));
      usesPrefixDiscriminator = discr instanceof A.IntegerLayout;
      if (usesPrefixDiscriminator)
        discriminator = A.UnionLayoutDiscriminatorLayout$(A.OffsetLayout$(new A.PaddingLayout(discr, discr.span, null, type$.PaddingLayout_int), 0, null), null);
      else {
        if (t1)
          throw A.wrapException(A.LayoutException$(_s70_, A.LinkedHashMap_LinkedHashMap$_literal(["property", property], type$.String, type$.dynamic)));
        discriminator = discr;
      }
      return new A.Union(discriminator, usesPrefixDiscriminator, defaultLayout, A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.VariantLayout), -1, property);
    },
    Union: function Union(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.discriminator = t0;
      _.usesPrefixDiscriminator = t1;
      _.defaultLayout = t2;
      _._union$_registry = t3;
      _.span = t4;
      _.property = t5;
    },
    Union_defaultGetSourceVariant_closure: function Union_defaultGetSourceVariant_closure() {
    },
    VariantLayout: function VariantLayout(t0, t1, t2, t3, t4) {
      var _ = this;
      _.union = t0;
      _.variant = t1;
      _.layout = t2;
      _.span = t3;
      _.property = t4;
    },
    LayoutException$(message, details) {
      return new A.LayoutException(message, details);
    },
    LayoutException: function LayoutException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    RequestServiceType: function RequestServiceType(t0) {
      this._name = t0;
    },
    ServiceResponseType: function ServiceResponseType(t0) {
      this._name = t0;
    },
    BaseServiceResponse: function BaseServiceResponse() {
    },
    ServiceSuccessRespose: function ServiceSuccessRespose(t0, t1, t2, t3) {
      var _ = this;
      _.response = t0;
      _.statusCode = t1;
      _.type = t2;
      _.$ti = t3;
    },
    ServiceErrorResponse: function ServiceErrorResponse(t0, t1, t2, t3) {
      var _ = this;
      _.error = t0;
      _.statusCode = t1;
      _.type = t2;
      _.$ti = t3;
    },
    BaseServiceRequestParams: function BaseServiceRequestParams() {
    },
    BaseServiceRequest: function BaseServiceRequest() {
    },
    BaseProvider: function BaseProvider() {
    },
    ServiceProviderUtils_findError(object, statusCode) {
      if (statusCode === 401 || statusCode === 403)
        return null;
      return null;
    },
    ServiceProviderUtils_isSuccessStatusCode(statusCode) {
      return statusCode >= 200 && statusCode < 300;
    },
    ServiceProviderUtils_parseResponse(object, params, $T) {
      var e, t1, t2, exception;
      try {
        if ($T._is(object))
          return object;
        if (object == null && $T._is(null)) {
          $T._as(null);
          return null;
        }
        if ($T._is(B.Type_dynamic_wn9)) {
          $T._as(object);
          return object;
        }
        t1 = type$.String;
        t2 = type$.dynamic;
        if ($T._is(A.LinkedHashMap_LinkedHashMap$_empty(t1, t2))) {
          if (type$.Map_dynamic_dynamic._is(object)) {
            t1 = $T._as(object.cast$2$0(0, t1, t2));
            return t1;
          }
          if (typeof object == "string") {
            t1 = $T._as(A.StringUtils_toJson(object, null, type$.Map_String_dynamic));
            return t1;
          }
        }
        if ($T._is(A._setArrayType([], type$.JSArray_Map_String_dynamic))) {
          if (typeof object == "string") {
            t1 = J.map$1$1$ax(A.StringUtils_toJson(object, null, type$.List_dynamic), new A.ServiceProviderUtils_parseResponse_closure(), type$.Map_String_dynamic);
            t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
            $T._as(t1);
            return t1;
          }
          t1 = J.map$1$1$ax(type$.List_dynamic._as(object), new A.ServiceProviderUtils_parseResponse_closure0(), type$.Map_String_dynamic);
          t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
          $T._as(t1);
          return t1;
        }
        if ($T._is(A._setArrayType([], type$.JSArray_int))) {
          if (type$.List_int._is(object)) {
            t1 = $T._as(A.StringUtils_encode(A._asString(object), B.StringEncoding_1));
            return t1;
          }
          t1 = $T._as(type$.List_dynamic._as(B.Type_Object_A4p).cast$1$0(0, type$.int));
          return t1;
        }
        $T._as(object);
        return object;
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = params.toJson$0();
        t1 = A.RPCError$(A.LinkedHashMap_LinkedHashMap$_literal(["error", J.toString$0$(e), "excepted", A.createRuntimeType($T).toString$0(0)], type$.String, type$.dynamic), null, "Parsing response failed.", t1);
        throw A.wrapException(t1);
      }
    },
    ServiceProviderUtils_parseResponse_closure: function ServiceProviderUtils_parseResponse_closure() {
    },
    ServiceProviderUtils_parseResponse_closure0: function ServiceProviderUtils_parseResponse_closure0() {
    },
    SS58ChecksumError: function SS58ChecksumError(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    DynamicByteTracker: function DynamicByteTracker(t0) {
      this._bytes_tracker$_buffer = t0;
    },
    BytesUtils_toHexString(dataBytes, lowerCase, prefix) {
      var toHex = B.C__Hex.encode$2$lowerCase(dataBytes, lowerCase);
      return (prefix == null ? "" : prefix) + toHex;
    },
    BytesUtils_tryToHexString(dataBytes, prefix) {
      var t1, exception,
        lowerCase = true;
      if (dataBytes == null)
        return null;
      try {
        t1 = A.BytesUtils_toHexString(dataBytes, lowerCase, prefix);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    BytesUtils_fromHexString(data, paddingZero) {
      var hexString, t1, exception;
      try {
        hexString = A.StringUtils_strip0x(data);
        if (J.get$length$asx(hexString) === 0) {
          t1 = A._setArrayType([], type$.JSArray_int);
          return t1;
        }
        if (paddingZero && (J.get$length$asx(hexString) & 1) === 1)
          hexString = "0" + A.S(hexString);
        t1 = B.C__Hex.decode$1(hexString);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.ArgumentException_2aX);
      }
    },
    BytesUtils_tryFromHexString(data, paddingZero) {
      var t1, exception;
      if (data == null)
        return null;
      try {
        t1 = A.BytesUtils_fromHexString(data, paddingZero);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    BytesUtils_toBytes(bytes, unmodifiable) {
      var t1 = type$.int,
        toBytes = J.map$1$1$ax(bytes, new A.BytesUtils_toBytes_closure(), t1).toList$0(0);
      if (unmodifiable)
        return A.List_List$unmodifiable(toBytes, t1);
      return toBytes;
    },
    BytesUtils_tryToBytes(bytes, unmodifiable) {
      if (bytes == null)
        return null;
      return A.BytesUtils_toBytes(bytes, unmodifiable);
    },
    BytesUtils_validateBytes(bytes, onError) {
      var t1, i, byte;
      for (t1 = J.getInterceptor$asx(bytes), i = 0; i < t1.get$length(bytes); ++i) {
        byte = t1.elementAt$1(bytes, i);
        if (byte < 0 || byte > 255)
          throw A.wrapException(A.ArgumentException$((onError == null ? "Invalid bytes" : onError) + " at index " + i + " " + A.S(byte), null));
      }
    },
    BytesUtils_validateListOfBytes(bytes) {
      var t1, i, byte;
      for (t1 = J.getInterceptor$asx(bytes), i = 0; i < t1.get$length(bytes); ++i) {
        byte = t1.$index(bytes, i);
        if (byte < 0 || byte > 255)
          throw A.wrapException(A.ArgumentError$("Invalid bytes at index " + i + ": " + byte, null));
      }
    },
    BytesUtils_isValidBytes(bytes) {
      var exception;
      try {
        A.BytesUtils_validateBytes(bytes, null);
        return true;
      } catch (exception) {
        return false;
      }
    },
    BytesUtils_bytesEqual(a, b) {
      var t1, t2, index;
      if (a == null)
        return b == null;
      if (b == null || J.get$length$asx(a) !== J.get$length$asx(b))
        return false;
      if (a === b)
        return true;
      for (t1 = J.getInterceptor$asx(a), t2 = J.getInterceptor$asx(b), index = 0; index < t1.get$length(a); ++index)
        if (t1.$index(a, index) !== t2.$index(b, index))
          return false;
      return true;
    },
    BytesUtils_toBytes_closure: function BytesUtils_toBytes_closure() {
    },
    BigRational_BigRational(numerator, denominator) {
      var t1, t2;
      if (denominator == null)
        return new A.BigRational(numerator, $.$get$BigRational__one());
      t1 = $.$get$BigRational__zero();
      t2 = denominator.compareTo$1(0, t1);
      if (t2 === 0)
        throw A.wrapException(B.ArgumentException_Atw);
      t2 = numerator.compareTo$1(0, t1);
      if (t2 === 0)
        return new A.BigRational(t1, $.$get$BigRational__one());
      return A.BigRational__reduce(numerator, denominator);
    },
    BigRational__gcd(a, b) {
      var t1, b0;
      while (true) {
        t1 = b.compareTo$1(0, $.$get$BigRational__zero());
        if (!(t1 !== 0))
          break;
        b0 = a.$mod(0, b);
        a = b;
        b = b0;
      }
      return a;
    },
    BigRational_tryParseDecimaal(decimal) {
      var t1, exception;
      try {
        t1 = A.BigRational_BigRational$parseDecimal(decimal);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    BigRational_BigRational$parseDecimal(decimal) {
      var t2, significand, exponent, isNegative, intPart, t3, decPart, multiple, a, b, _null = null,
        parts = B.JSString_methods.split$1(decimal, A.RegExp_RegExp("e", false)),
        t1 = parts.length;
      if (t1 > 2)
        throw A.wrapException(B.ArgumentException_KSi);
      if (t1 > 1) {
        t1 = parts[1];
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t2 = t1[0] === "-";
        if (t2)
          B.JSArray_methods.$indexSet(parts, 1, B.JSString_methods.substring$1(t1, 1));
        if (1 >= parts.length)
          return A.ioore(parts, 1);
        t1 = parts[1];
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        if (t1[0] === "+")
          B.JSArray_methods.$indexSet(parts, 1, B.JSString_methods.substring$1(t1, 1));
        if (0 >= parts.length)
          return A.ioore(parts, 0);
        significand = A.BigRational_BigRational$parseDecimal(parts[0]);
        t1 = $.$get$BigRational__ten();
        if (1 >= parts.length)
          return A.ioore(parts, 1);
        exponent = new A.BigRational(t1.pow$1(A.int_parse(parts[1], _null)), $.$get$BigRational__one());
        if (!t2)
          return significand.$mul(0, exponent);
        else
          return significand.$div(0, exponent);
      }
      parts = A._setArrayType(B.JSString_methods.trim$0(decimal).split("."), type$.JSArray_String);
      t1 = parts.length;
      if (t1 > 2)
        throw A.wrapException(B.ArgumentException_KSi0);
      if (t1 > 1) {
        t1 = parts[0];
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        isNegative = t1[0] === "-";
        if (isNegative)
          B.JSArray_methods.$indexSet(parts, 0, B.JSString_methods.substring$1(t1, 1));
        if (0 >= parts.length)
          return A.ioore(parts, 0);
        intPart = new A.BigRational(A._BigIntImpl_parse(parts[0], _null), $.$get$BigRational__one());
        if (1 >= parts.length)
          return A.ioore(parts, 1);
        t1 = parts[1];
        while (true) {
          if (1 >= parts.length)
            return A.ioore(parts, 1);
          t2 = parts[1];
          t3 = t2.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return A.ioore(t2, 0);
            t3 = t2[0] === "0";
          } else
            t3 = false;
          if (!t3)
            break;
          B.JSArray_methods.$indexSet(parts, 1, B.JSString_methods.substring$1(t2, 1));
        }
        t1 = B.JSString_methods.$mul("0", t1.length);
        if (1 >= parts.length)
          return A.ioore(parts, 1);
        t2 = parts[1];
        t2 = t2.length === 0 ? $.$get$BigRational__zero() : A._BigIntImpl_parse(t2, _null);
        decPart = A.BigRational__reduce(t2, A._BigIntImpl_parse("1" + t1, _null));
        t1 = intPart.denominator;
        t2 = decPart.denominator;
        multiple = t1.$mul(0, t2).$tdiv(0, A.BigRational__gcd(t1, t2));
        a = multiple.$tdiv(0, t1);
        b = multiple.$tdiv(0, t2);
        intPart = A.BigRational__reduce(intPart.numerator.$mul(0, a).$add(0, decPart.numerator.$mul(0, b)), multiple);
        return isNegative ? intPart.$not(0) : intPart;
      }
      return new A.BigRational(A._BigIntImpl_parse(decimal, _null), $.$get$BigRational__one());
    },
    BigRational__reduce(n, d) {
      var divisor = A.BigRational__gcd(n, d),
        num = n.$tdiv(0, divisor),
        denom = d.$tdiv(0, divisor);
      if (denom._isNegative)
        return new A.BigRational(num.$negate(0), denom.$negate(0));
      return new A.BigRational(num, denom);
    },
    BigRational: function BigRational(t0, t1) {
      this.numerator = t0;
      this.denominator = t1;
      this._inDecimal = null;
    },
    StringUtils_toBytes(v) {
      var t1 = $.$get$StringUtils__hexBytesRegex();
      if (t1._nativeRegExp.test(v))
        return A.BytesUtils_fromHexString(v, false);
      else
        return A.StringUtils_encode(v, B.StringEncoding_1);
    },
    StringUtils_strip0x(value) {
      if (B.JSString_methods.startsWith$1(value.toLowerCase(), "0x"))
        return B.JSString_methods.substring$1(value, 2);
      return value;
    },
    StringUtils_add0x(value) {
      if (B.JSString_methods.startsWith$1(value.toLowerCase(), "0x"))
        return value;
      return "0x" + value;
    },
    StringUtils_encode(value, type) {
      switch (type) {
        case B.StringEncoding_1:
          return B.C_Utf8Encoder.convert$1(value);
        case B.StringEncoding_2:
        case B.StringEncoding_3:
          return B.C_Base64Decoder.convert$1(value);
        default:
          return B.AsciiEncoder_127.convert$1(value);
      }
    },
    StringUtils_tryEncode(value, type) {
      var t1, exception;
      if (value == null)
        return null;
      try {
        t1 = A.StringUtils_encode(value, type);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    StringUtils_decode(value, allowInvalidOrMalformed, type) {
      switch (type) {
        case B.StringEncoding_1:
          return B.C_Utf8Codec.decode$2$allowMalformed(value, false);
        case B.StringEncoding_2:
          type$.Base64Codec._eval$1("Codec.S")._as(value);
          return B.Base64Codec_Base64Encoder_false.get$encoder().convert$1(value);
        case B.StringEncoding_3:
          type$.Base64Codec._eval$1("Codec.S")._as(value);
          return B.Base64Codec_Base64Encoder_true.get$encoder().convert$1(value);
        default:
          return B.C_AsciiCodec.decode$2$allowInvalid(value, false);
      }
    },
    StringUtils_tryDecode(value, type) {
      var t1, exception,
        allowInvalidOrMalformed = false;
      if (value == null)
        return null;
      try {
        t1 = A.StringUtils_decode(value, allowInvalidOrMalformed, type);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    StringUtils_fromJson(data, indent, toEncodable, toStringEncodable) {
      return B.C_JsonCodec.encode$2$toEncodable(data, toEncodable);
    },
    StringUtils_toJson(data, reviver, $T) {
      var decode;
      if (typeof data != "string") {
        if (!$T._is(data))
          throw A.wrapException(A.ArgumentException$("Invalid data encountered during JSON conversion.", A.LinkedHashMap_LinkedHashMap$_literal(["data", data], type$.String, type$.dynamic)));
        return data;
      }
      decode = B.C_JsonCodec.decode$2$reviver(data, reviver);
      if (!$T._is(decode))
        throw A.wrapException(A.ArgumentException$("Invalid json casting. expected: " + A.createRuntimeType($T).toString$0(0) + " got: " + J.get$runtimeType$(decode).toString$0(0), null));
      return decode;
    },
    StringUtils_tryFromJson(data) {
      var t1, exception, indent = null, toEncodable = null,
        toStringEncodable = false;
      try {
        data.toString;
        t1 = A.StringUtils_fromJson(data, indent, toEncodable, toStringEncodable);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    StringUtils_tryToJson(data, $T) {
      var t1, exception, reviver = null;
      try {
        t1 = A.StringUtils_toJson(data, reviver, $T);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    StringEncoding: function StringEncoding(t0) {
      this._name = t0;
    },
    Tuple: function Tuple(t0, t1, t2) {
      this.item1 = t0;
      this.item2 = t1;
      this.$ti = t2;
    },
    UUID_generateUUIDv4() {
      var t1, t2, hexBytes,
        bytes = A.List_List$generate(16, new A.UUID_generateUUIDv4_closure($.$get$Random__secureRandom()), type$.int);
      B.JSArray_methods.$indexSet(bytes, 6, bytes[6] & 15 | 64);
      B.JSArray_methods.$indexSet(bytes, 8, bytes[8] & 63 | 128);
      t1 = A._arrayInstanceType(bytes);
      t2 = t1._eval$1("MappedListIterable<1,String>");
      hexBytes = A.List_List$_of(new A.MappedListIterable(bytes, t1._eval$1("String(1)")._as(new A.UUID_generateUUIDv4_closure0()), t2), t2._eval$1("ListIterable.E"));
      return B.JSArray_methods.join$1(B.JSArray_methods.sublist$2(hexBytes, 0, 4), "") + "-" + B.JSArray_methods.join$1(B.JSArray_methods.sublist$2(hexBytes, 4, 6), "") + "-" + B.JSArray_methods.join$1(B.JSArray_methods.sublist$2(hexBytes, 6, 8), "") + "-" + B.JSArray_methods.join$1(B.JSArray_methods.sublist$2(hexBytes, 8, 10), "") + "-" + B.JSArray_methods.join$1(B.JSArray_methods.sublist$1(hexBytes, 10), "");
    },
    UUID_generateUUIDv4_closure: function UUID_generateUUIDv4_closure(t0) {
      this.random = t0;
    },
    UUID_generateUUIDv4_closure0: function UUID_generateUUIDv4_closure0() {
    },
    CanonicalizedMap: function CanonicalizedMap() {
    },
    CanonicalizedMap_addAll_closure: function CanonicalizedMap_addAll_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_entries_closure: function CanonicalizedMap_entries_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_forEach_closure: function CanonicalizedMap_forEach_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    CanonicalizedMap_keys_closure: function CanonicalizedMap_keys_closure(t0) {
      this.$this = t0;
    },
    CanonicalizedMap_map_closure: function CanonicalizedMap_map_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.transform = t1;
      _.K2 = t2;
      _.V2 = t3;
    },
    CanonicalizedMap_values_closure: function CanonicalizedMap_values_closure(t0) {
      this.$this = t0;
    },
    CosmosBaseAddress_CosmosBaseAddress(addr) {
      return new A.CosmosBaseAddress(addr, A.AtomAddressUtils_decode(addr, null).hrp);
    },
    CosmosBaseAddress: function CosmosBaseAddress(t0, t1) {
      this.address = t0;
      this.hrp = t1;
    },
    CosmosKeysAlgs_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_vTY, new A.CosmosKeysAlgs_fromName_closure($name), new A.CosmosKeysAlgs_fromName_closure0($name));
    },
    CosmosKeysAlgs: function CosmosKeysAlgs(t0) {
      this._name = t0;
    },
    CosmosKeysAlgs_fromName_closure: function CosmosKeysAlgs_fromName_closure(t0) {
      this.name = t0;
    },
    CosmosKeysAlgs_fromName_closure0: function CosmosKeysAlgs_fromName_closure0(t0) {
      this.name = t0;
    },
    CosmosCryptoKeysTypes: function CosmosCryptoKeysTypes(t0, t1) {
      this.typeUrl = t0;
      this.aminoType = t1;
    },
    DartCosmosSdkPluginException$(message, details) {
      return new A.DartCosmosSdkPluginException(message, details);
    },
    AminoJsonParserException$(message) {
      return new A.AminoJsonParserException(message, null);
    },
    DartCosmosSdkPluginException: function DartCosmosSdkPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    AminoJsonParserException: function AminoJsonParserException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    AminoTx_AminoTx$fromJson(json) {
      var messages, i, msg, payer, granter, payerAddress, granterAddress, t2, accountNumber, sequence, msgs, t3, _i, exception, memo, fee, gas, amounts,
        t1 = type$.String,
        chainId = A.QuickMap_as(json, "chain_id", new A.AminoTx_AminoTx$fromJson_closure(), t1);
      if (chainId.length === 0)
        throw A.wrapException(A.AminoJsonParserException$("'chain_id' must be a non-empty, valid string."));
      t2 = type$.BigInt;
      accountNumber = A.QuickMap_asBigInt(json, "account_number", new A.AminoTx_AminoTx$fromJson_closure0(), false, t2);
      sequence = A.QuickMap_asBigInt(json, "sequence", new A.AminoTx_AminoTx$fromJson_closure1(), false, t2);
      msgs = A.QuickMap_asListOfMap(json, "msgs", new A.AminoTx_AminoTx$fromJson_closure2(), true);
      if (msgs.length === 0)
        throw A.wrapException(B.AminoJsonParserException_XOU);
      messages = A._setArrayType([], type$.JSArray_AminoMessage_CosmosMessage);
      for (t3 = msgs.length, _i = 0; _i < msgs.length; msgs.length === t3 || (0, A.throwConcurrentModificationError)(msgs), ++_i) {
        i = msgs[_i];
        try {
          msg = A.AminoMessage_fromJson(i);
          J.add$1$ax(messages, msg);
        } catch (exception) {
          if (A.unwrapException(exception) instanceof A.AminoJsonParserException)
            throw exception;
          else {
            t2 = A.AminoJsonParserException$("Failed to parse Amino message of type: " + A.S(A.QuickMap_as(i, "type", null, t1)) + ". Verify the message structure and format.");
            throw A.wrapException(t2);
          }
        }
      }
      t1 = type$.nullable_String;
      memo = A.QuickMap_as(json, "memo", new A.AminoTx_AminoTx$fromJson_closure3(), t1);
      fee = A.QuickMap_asMap(json, "fee", new A.AminoTx_AminoTx$fromJson_closure4(), type$.Map_String_dynamic);
      gas = A.QuickMap_asBigInt(fee, "gas", new A.AminoTx_AminoTx$fromJson_closure5(), false, t2);
      t2 = A.QuickMap_asListOfMap(fee, "amount", new A.AminoTx_AminoTx$fromJson_closure6(), true);
      t2.toString;
      payer = A.QuickMap_as(json, "payer", new A.AminoTx_AminoTx$fromJson_closure7(), t1);
      granter = A.QuickMap_as(json, "granter", new A.AminoTx_AminoTx$fromJson_closure8(), t1);
      payerAddress = null;
      granterAddress = null;
      if (payer != null)
        try {
          payerAddress = A.CosmosBaseAddress_CosmosBaseAddress(payer);
        } catch (exception) {
          t1 = A.AminoJsonParserException$("'payer' must be a valid address.");
          throw A.wrapException(t1);
        }
      if (granter != null)
        try {
          granterAddress = A.CosmosBaseAddress_CosmosBaseAddress(granter);
        } catch (exception) {
          t1 = A.AminoJsonParserException$("'granter' must be a valid address.");
          throw A.wrapException(t1);
        }
      t1 = A._arrayInstanceType(t2);
      t3 = t1._eval$1("MappedListIterable<1,Coin>");
      amounts = A.List_List$_of(new A.MappedListIterable(t2, t1._eval$1("Coin(1)")._as(new A.AminoTx_AminoTx$fromJson_closure9()), t3), t3._eval$1("ListIterable.E"));
      t1 = granterAddress;
      t2 = payerAddress;
      t3 = memo == null ? "" : memo;
      return new A.AminoTx(chainId, accountNumber, sequence, new A.Fee(amounts, gas, t2, t1), messages, t3);
    },
    AminoTx: function AminoTx(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.chainId = t0;
      _.accountNumber = t1;
      _.sequence = t2;
      _.fee = t3;
      _.messages = t4;
      _.memo = t5;
    },
    AminoTx_AminoTx$fromJson_closure: function AminoTx_AminoTx$fromJson_closure() {
    },
    AminoTx_AminoTx$fromJson_closure0: function AminoTx_AminoTx$fromJson_closure0() {
    },
    AminoTx_AminoTx$fromJson_closure1: function AminoTx_AminoTx$fromJson_closure1() {
    },
    AminoTx_AminoTx$fromJson_closure2: function AminoTx_AminoTx$fromJson_closure2() {
    },
    AminoTx_AminoTx$fromJson_closure3: function AminoTx_AminoTx$fromJson_closure3() {
    },
    AminoTx_AminoTx$fromJson_closure4: function AminoTx_AminoTx$fromJson_closure4() {
    },
    AminoTx_AminoTx$fromJson_closure5: function AminoTx_AminoTx$fromJson_closure5() {
    },
    AminoTx_AminoTx$fromJson_closure6: function AminoTx_AminoTx$fromJson_closure6() {
    },
    AminoTx_AminoTx$fromJson_closure7: function AminoTx_AminoTx$fromJson_closure7() {
    },
    AminoTx_AminoTx$fromJson_closure8: function AminoTx_AminoTx$fromJson_closure8() {
    },
    AminoTx_AminoTx$fromJson_closure9: function AminoTx_AminoTx$fromJson_closure9() {
    },
    AminoTx_toJson_closure: function AminoTx_toJson_closure() {
    },
    UnknownAminoService: function UnknownAminoService(t0, t1) {
      this.value = t0;
      this.aminoType = t1;
    },
    _UnknownAminoService_ServiceMessage_AminoMessage: function _UnknownAminoService_ServiceMessage_AminoMessage() {
    },
    CCTPV1Service_fromJson(amino, json, typeUrl, $T) {
      var t1, t2, t3, t4, _null = null, _s4_ = "from", _s6_ = "amount",
        _s11_ = "local_token",
        _s9_ = "domain_id",
        _s16_ = "original_message",
        _s20_ = "original_attestation",
        _s22_ = "new_destination_caller",
        _s18_ = "destination_domain",
        _s10_ = "burn_token",
        _s14_ = "mint_recipient",
        _s9_0 = "recipient",
        _s12_ = "message_body",
        _s18_0 = "destination_caller",
        _s8_ = "attester",
        _s13_ = "remote_domain",
        _s12_0 = "remote_token",
        type = A.CCTPV1Types_findService(typeUrl, true);
      $label0$0: {
        if (B.CCTPV1Types_Nlv === type) {
          t1 = new A.CCTPV1MsgAcceptOwner(A.QuickMap_as(json, _s4_, _null, type$.String));
          break $label0$0;
        }
        if (B.CCTPV1Types_Nrb === type) {
          t1 = type$.String;
          t1 = new A.CCTPV1MsgUpdateOwner(A.QuickMap_as(json, _s4_, _null, t1), A.QuickMap_as(json, "new_owner", _null, t1));
          break $label0$0;
        }
        if (B.CCTPV1Types_8wT === type) {
          t1 = type$.String;
          t1 = new A.CCTPV1MsgUpdatePauser(A.QuickMap_as(json, _s4_, _null, t1), A.QuickMap_as(json, "new_pauser", _null, t1));
          break $label0$0;
        }
        if (B.CCTPV1Types_Sk1 === type) {
          t1 = new A.CCTPV1MsgUpdateSignatureThreshold(A.QuickMap_as(json, _s4_, _null, type$.String), A.QuickMap_as(json, _s6_, _null, type$.int));
          break $label0$0;
        }
        if (B.CCTPV1Types_2ky === type) {
          t1 = type$.String;
          t1 = new A.CCTPV1MsgUpdateTokenController(A.QuickMap_as(json, _s4_, _null, t1), A.QuickMap_as(json, "new_token_controller", _null, t1));
          break $label0$0;
        }
        if (B.CCTPV1Types_DvS === type) {
          t1 = type$.String;
          t1 = new A.CCTPV1MsgUpdateAttesterManager(A.QuickMap_as(json, _s4_, _null, t1), A.QuickMap_as(json, "new_attester_manager", _null, t1));
          break $label0$0;
        }
        if (B.CCTPV1Types_8nl === type) {
          t1 = new A.CCTPV1MsgUpdateMaxMessageBodySize(A.QuickMap_as(json, _s4_, _null, type$.String), A.QuickMap_asBigInt(json, "message_size", _null, true, type$.BigInt));
          break $label0$0;
        }
        if (B.CCTPV1Types_thd === type) {
          t1 = type$.String;
          t1 = new A.CCTPV1MsgSetMaxBurnAmountPerMessage(A.QuickMap_as(json, _s4_, _null, t1), A.QuickMap_as(json, _s11_, _null, t1), A.QuickMap_as(json, _s6_, _null, t1));
          break $label0$0;
        }
        if (B.CCTPV1Types_GQU === type) {
          t1 = new A.CCTPV1MsgPauseBurningAndMinting(A.QuickMap_as(json, _s4_, _null, type$.String));
          break $label0$0;
        }
        if (B.CCTPV1Types_lKR === type) {
          t1 = new A.CCTPV1MsgUnpauseBurningAndMinting(A.QuickMap_as(json, _s4_, _null, type$.String));
          break $label0$0;
        }
        if (B.CCTPV1Types_ABG === type) {
          t1 = new A.CCTPV1MsgPauseSendingAndReceivingMessages(A.QuickMap_as(json, _s4_, _null, type$.String));
          break $label0$0;
        }
        if (B.CCTPV1Types_a3E === type) {
          t1 = new A.CCTPV1MsgUnpauseSendingAndReceivingMessages(A.QuickMap_as(json, _s4_, _null, type$.String));
          break $label0$0;
        }
        if (B.CCTPV1Types_LV1 === type) {
          t1 = A.QuickMap_as(json, _s4_, _null, type$.nullable_String);
          t2 = A.QuickMap_asBytes(json, "address", false);
          t2 = new A.CCTPV1MsgAddRemoteTokenMessenger(t1, A.QuickMap_as(json, _s9_, _null, type$.nullable_int), t2);
          t1 = t2;
          break $label0$0;
        }
        if (B.CCTPV1Types_UMf === type) {
          t1 = new A.CCTPV1MsgReplaceDepositForBurn(A.QuickMap_as(json, _s4_, _null, type$.nullable_String), A.QuickMap_asBytes(json, _s16_, false), A.QuickMap_asBytes(json, _s20_, false), A.QuickMap_asBytes(json, _s22_, false), A.QuickMap_asBytes(json, "new_mint_recipient", false));
          break $label0$0;
        }
        if (B.CCTPV1Types_ZmI === type) {
          t1 = new A.CCTPV1MsgReplaceMessage(A.QuickMap_as(json, _s4_, _null, type$.nullable_String), A.QuickMap_asBytes(json, _s16_, false), A.QuickMap_asBytes(json, _s20_, false), A.QuickMap_asBytes(json, "new_message_body", false), A.QuickMap_asBytes(json, _s22_, false));
          break $label0$0;
        }
        if (B.CCTPV1Types_NCP === type) {
          t1 = new A.CCTPV1MsgRemoveRemoteTokenMessenger(A.QuickMap_as(json, _s4_, _null, type$.nullable_String), A.QuickMap_as(json, _s9_, _null, type$.nullable_int));
          break $label0$0;
        }
        if (B.CCTPV1Types_2rV === type) {
          t1 = type$.nullable_String;
          t2 = A.QuickMap_as(json, _s4_, _null, t1);
          t3 = A.QuickMap_as(json, _s6_, _null, t1);
          t4 = A.QuickMap_as(json, _s18_, _null, type$.nullable_int);
          t1 = A.QuickMap_as(json, _s10_, _null, t1);
          t1 = new A.CCTPV1MsgDepositForBurn(t2, t3, t4, A.QuickMap_asBytes(json, _s14_, false), t1);
          break $label0$0;
        }
        if (B.CCTPV1Types_GeE === type) {
          t1 = new A.CCTPV1MsgSendMessage(A.QuickMap_as(json, _s4_, _null, type$.nullable_String), A.QuickMap_as(json, _s18_, _null, type$.nullable_int), A.QuickMap_asBytes(json, _s9_0, false), A.QuickMap_asBytes(json, _s12_, false));
          break $label0$0;
        }
        if (B.CCTPV1Types_L7D === type) {
          t1 = new A.CCTPV1MsgSendMessageWithCaller(A.QuickMap_as(json, _s4_, _null, type$.nullable_String), A.QuickMap_as(json, _s18_, _null, type$.nullable_int), A.QuickMap_asBytes(json, _s9_0, false), A.QuickMap_asBytes(json, _s12_, false), A.QuickMap_asBytes(json, _s18_0, false));
          break $label0$0;
        }
        if (B.CCTPV1Types_fgb === type) {
          t1 = type$.nullable_String;
          t2 = A.QuickMap_as(json, _s4_, _null, t1);
          t3 = A.QuickMap_as(json, _s6_, _null, t1);
          t4 = A.QuickMap_as(json, _s18_, _null, type$.nullable_int);
          t1 = A.QuickMap_as(json, _s10_, _null, t1);
          t1 = new A.CCTPV1MsgDepositForBurnWithCaller(t2, t3, t4, A.QuickMap_asBytes(json, _s14_, false), t1, A.QuickMap_asBytes(json, _s18_0, false));
          break $label0$0;
        }
        if (B.CCTPV1Types_81S === type) {
          t1 = type$.nullable_String;
          t1 = new A.CCTPV1MsgDisableAttester(A.QuickMap_as(json, _s4_, _null, t1), A.QuickMap_as(json, _s8_, _null, t1));
          break $label0$0;
        }
        if (B.CCTPV1Types_XiD === type) {
          t1 = type$.nullable_String;
          t1 = new A.CCTPV1MsgEnableAttester(A.QuickMap_as(json, _s4_, _null, t1), A.QuickMap_as(json, _s8_, _null, t1));
          break $label0$0;
        }
        if (B.CCTPV1Types_in6 === type) {
          t1 = type$.nullable_String;
          t1 = new A.CCTPV1MsgLinkTokenPair(A.QuickMap_as(json, _s4_, _null, t1), A.QuickMap_as(json, _s13_, _null, type$.nullable_int), A.QuickMap_asBytes(json, _s12_0, false), A.QuickMap_as(json, _s11_, _null, t1));
          break $label0$0;
        }
        if (B.CCTPV1Types_ilW === type) {
          t1 = type$.nullable_String;
          t1 = new A.CCTPV1MsgUnlinkTokenPair(A.QuickMap_as(json, _s4_, _null, t1), A.QuickMap_as(json, _s13_, _null, type$.nullable_int), A.QuickMap_asBytes(json, _s12_0, false), A.QuickMap_as(json, _s11_, _null, t1));
          break $label0$0;
        }
        if (B.CCTPV1Types_C5S === type) {
          t1 = new A.CCTPV1MsgReceiveMessage(A.QuickMap_as(json, _s4_, _null, type$.nullable_String), A.QuickMap_asBytes(json, "message", false), A.QuickMap_asBytes(json, "attestation", false));
          break $label0$0;
        }
        t1 = _null;
        break $label0$0;
      }
      type$.nullable_ServiceMessage_CosmosMessage._as(t1);
      if (t1 == null)
        return _null;
      if (!$T._is(t1)) {
        t2 = A.createRuntimeType($T).toString$0(0);
        t1 = A.getRuntimeTypeOfDartObject(t1).toString$0(0);
        throw A.wrapException(A.DartCosmosSdkPluginException$("Invalid CCTP V1 Service.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", t2, "service", t1, "type", type == null ? _null : type.typeUrl], type$.String, type$.dynamic)));
      }
      return t1;
    },
    CCTPV1Service: function CCTPV1Service() {
    },
    CCTPV1MsgAcceptOwner: function CCTPV1MsgAcceptOwner(t0) {
      this.from = t0;
    },
    _CCTPV1MsgAcceptOwner_CCTPV1Service_AminoMessage: function _CCTPV1MsgAcceptOwner_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgDepositForBurn: function CCTPV1MsgDepositForBurn(t0, t1, t2, t3, t4) {
      var _ = this;
      _.from = t0;
      _.amount = t1;
      _.destinationDomain = t2;
      _.mintRecipient = t3;
      _.burnToken = t4;
    },
    _CCTPV1MsgDepositForBurn_CCTPV1Service_AminoMessage: function _CCTPV1MsgDepositForBurn_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgDepositForBurnWithCaller: function CCTPV1MsgDepositForBurnWithCaller(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.from = t0;
      _.amount = t1;
      _.destinationDomain = t2;
      _.mintRecipient = t3;
      _.burnToken = t4;
      _.destinationCaller = t5;
    },
    _CCTPV1MsgDepositForBurnWithCaller_CCTPV1Service_AminoMessage: function _CCTPV1MsgDepositForBurnWithCaller_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgDisableAttester: function CCTPV1MsgDisableAttester(t0, t1) {
      this.from = t0;
      this.attester = t1;
    },
    _CCTPV1MsgDisableAttester_CCTPV1Service_AminoMessage: function _CCTPV1MsgDisableAttester_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgEnableAttester: function CCTPV1MsgEnableAttester(t0, t1) {
      this.from = t0;
      this.attester = t1;
    },
    _CCTPV1MsgEnableAttester_CCTPV1Service_AminoMessage: function _CCTPV1MsgEnableAttester_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgLinkTokenPair: function CCTPV1MsgLinkTokenPair(t0, t1, t2, t3) {
      var _ = this;
      _.from = t0;
      _.remoteDomain = t1;
      _.remoteToken = t2;
      _.localToken = t3;
    },
    _CCTPV1MsgLinkTokenPair_CCTPV1Service_AminoMessage: function _CCTPV1MsgLinkTokenPair_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgSetMaxBurnAmountPerMessage: function CCTPV1MsgSetMaxBurnAmountPerMessage(t0, t1, t2) {
      this.from = t0;
      this.localToken = t1;
      this.amount = t2;
    },
    _CCTPV1MsgSetMaxBurnAmountPerMessage_CCTPV1Service_AminoMessage: function _CCTPV1MsgSetMaxBurnAmountPerMessage_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgReceiveMessage: function CCTPV1MsgReceiveMessage(t0, t1, t2) {
      this.from = t0;
      this.message = t1;
      this.attestation = t2;
    },
    _CCTPV1MsgReceiveMessage_CCTPV1Service_AminoMessage: function _CCTPV1MsgReceiveMessage_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgPauseBurningAndMinting: function CCTPV1MsgPauseBurningAndMinting(t0) {
      this.from = t0;
    },
    _CCTPV1MsgPauseBurningAndMinting_CCTPV1Service_AminoMessage: function _CCTPV1MsgPauseBurningAndMinting_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgPauseSendingAndReceivingMessages: function CCTPV1MsgPauseSendingAndReceivingMessages(t0) {
      this.from = t0;
    },
    _CCTPV1MsgPauseSendingAndReceivingMessages_CCTPV1Service_AminoMessage: function _CCTPV1MsgPauseSendingAndReceivingMessages_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgAddRemoteTokenMessenger: function CCTPV1MsgAddRemoteTokenMessenger(t0, t1, t2) {
      this.from = t0;
      this.domainId = t1;
      this.address = t2;
    },
    _CCTPV1MsgAddRemoteTokenMessenger_CCTPV1Service_AminoMessage: function _CCTPV1MsgAddRemoteTokenMessenger_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgRemoveRemoteTokenMessenger: function CCTPV1MsgRemoveRemoteTokenMessenger(t0, t1) {
      this.from = t0;
      this.domainId = t1;
    },
    _CCTPV1MsgRemoveRemoteTokenMessenger_CCTPV1Service_AminoMessage: function _CCTPV1MsgRemoveRemoteTokenMessenger_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgReplaceDepositForBurn: function CCTPV1MsgReplaceDepositForBurn(t0, t1, t2, t3, t4) {
      var _ = this;
      _.from = t0;
      _.originalMessage = t1;
      _.originalAttestation = t2;
      _.newDestinationCaller = t3;
      _.newMintRecipient = t4;
    },
    _CCTPV1MsgReplaceDepositForBurn_CCTPV1Service_AminoMessage: function _CCTPV1MsgReplaceDepositForBurn_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgReplaceMessage: function CCTPV1MsgReplaceMessage(t0, t1, t2, t3, t4) {
      var _ = this;
      _.from = t0;
      _.originalMessage = t1;
      _.originalAttestation = t2;
      _.newMessageBody = t3;
      _.newDestinationCaller = t4;
    },
    _CCTPV1MsgReplaceMessage_CCTPV1Service_AminoMessage: function _CCTPV1MsgReplaceMessage_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgSendMessage: function CCTPV1MsgSendMessage(t0, t1, t2, t3) {
      var _ = this;
      _.from = t0;
      _.destinationDomain = t1;
      _.recipient = t2;
      _.messageBody = t3;
    },
    _CCTPV1MsgSendMessage_CCTPV1Service_AminoMessage: function _CCTPV1MsgSendMessage_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgSendMessageWithCaller: function CCTPV1MsgSendMessageWithCaller(t0, t1, t2, t3, t4) {
      var _ = this;
      _.from = t0;
      _.destinationDomain = t1;
      _.recipient = t2;
      _.messageBody = t3;
      _.destinationCaller = t4;
    },
    _CCTPV1MsgSendMessageWithCaller_CCTPV1Service_AminoMessage: function _CCTPV1MsgSendMessageWithCaller_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgUnlinkTokenPair: function CCTPV1MsgUnlinkTokenPair(t0, t1, t2, t3) {
      var _ = this;
      _.from = t0;
      _.remoteDomain = t1;
      _.remoteToken = t2;
      _.localToken = t3;
    },
    _CCTPV1MsgUnlinkTokenPair_CCTPV1Service_AminoMessage: function _CCTPV1MsgUnlinkTokenPair_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgUnpauseBurningAndMinting: function CCTPV1MsgUnpauseBurningAndMinting(t0) {
      this.from = t0;
    },
    _CCTPV1MsgUnpauseBurningAndMinting_CCTPV1Service_AminoMessage: function _CCTPV1MsgUnpauseBurningAndMinting_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgUnpauseSendingAndReceivingMessages: function CCTPV1MsgUnpauseSendingAndReceivingMessages(t0) {
      this.from = t0;
    },
    _CCTPV1MsgUnpauseSendingAndReceivingMessages_CCTPV1Service_AminoMessage: function _CCTPV1MsgUnpauseSendingAndReceivingMessages_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgUpdateAttesterManager: function CCTPV1MsgUpdateAttesterManager(t0, t1) {
      this.from = t0;
      this.newAttesterManager = t1;
    },
    _CCTPV1MsgUpdateAttesterManager_CCTPV1Service_AminoMessage: function _CCTPV1MsgUpdateAttesterManager_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgUpdateMaxMessageBodySize: function CCTPV1MsgUpdateMaxMessageBodySize(t0, t1) {
      this.from = t0;
      this.messageSize = t1;
    },
    _CCTPV1MsgUpdateMaxMessageBodySize_CCTPV1Service_AminoMessage: function _CCTPV1MsgUpdateMaxMessageBodySize_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgUpdateOwner: function CCTPV1MsgUpdateOwner(t0, t1) {
      this.from = t0;
      this.newOwner = t1;
    },
    _CCTPV1MsgUpdateOwner_CCTPV1Service_AminoMessage: function _CCTPV1MsgUpdateOwner_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgUpdatePauser: function CCTPV1MsgUpdatePauser(t0, t1) {
      this.from = t0;
      this.newPauser = t1;
    },
    _CCTPV1MsgUpdatePauser_CCTPV1Service_AminoMessage: function _CCTPV1MsgUpdatePauser_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgUpdateSignatureThreshold: function CCTPV1MsgUpdateSignatureThreshold(t0, t1) {
      this.from = t0;
      this.amount = t1;
    },
    _CCTPV1MsgUpdateSignatureThreshold_CCTPV1Service_AminoMessage: function _CCTPV1MsgUpdateSignatureThreshold_CCTPV1Service_AminoMessage() {
    },
    CCTPV1MsgUpdateTokenController: function CCTPV1MsgUpdateTokenController(t0, t1) {
      this.from = t0;
      this.newTokenController = t1;
    },
    _CCTPV1MsgUpdateTokenController_CCTPV1Service_AminoMessage: function _CCTPV1MsgUpdateTokenController_CCTPV1Service_AminoMessage() {
    },
    CCTPV1Types_findService(type, amino) {
      var t1 = A.IterableHelper_firstWhereNullable(B.List_e1o, new A.CCTPV1Types_findService_closure(type), type$.TypeUrl);
      return t1;
    },
    CCTPV1Types: function CCTPV1Types(t0, t1) {
      this.typeUrl = t0;
      this.aminoType = t1;
    },
    CCTPV1Types_findService_closure: function CCTPV1Types_findService_closure(t0) {
      this.type = t0;
    },
    EvmosService_fromJson(amino, json, typeUrl, $T) {
      var t1, t2, t3, t4, t5, t6, t7, t8, _null = null,
        _s16_ = "contract_address",
        _s8_ = "receiver",
        _s9_ = "authority",
        _s6_ = "params",
        _s16_0 = "deployer_address",
        _s14_ = "funder_address",
        _s15_ = "vesting_address",
        type = A.EvmosErc20V1Types_findService(typeUrl, true);
      $label0$0: {
        if (B.EvmosErc20V1Types_sO8 === type) {
          t1 = type$.nullable_String;
          t1 = new A.EvmosErc20V1MsgConvertERC20(A.QuickMap_as(json, _s16_, _null, t1), A.QuickMap_as(json, "amount", _null, t1), A.QuickMap_as(json, _s8_, _null, t1), A.QuickMap_as(json, "sender", _null, t1));
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_HXx === type) {
          t1 = new A.EvmosInflationV1MsgUpdateParams(A.QuickMap_as(json, _s9_, _null, type$.nullable_String), A.QuickMap_maybeAs(json, _s6_, A.params_EvmosInflationV1Params___fromJson_tearOff$closure(), type$.EvmosInflationV1Params, type$.Map_String_dynamic));
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_QOj === type) {
          t1 = type$.nullable_String;
          t1 = new A.EvmosErc20V1MsgConvertCoin(A.QuickMap_maybeAs(json, "coin", A.coin_Coin___fromJson_tearOff$closure(), type$.Coin, type$.Map_String_dynamic), A.QuickMap_as(json, _s8_, _null, t1), A.QuickMap_as(json, "sender", _null, t1));
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_AdM === type) {
          t1 = new A.EvmosErc20V1MsgUpdateParams(A.QuickMap_as(json, _s9_, _null, type$.nullable_String), A.QuickMap_maybeAs(json, _s6_, A.params0_EvmosErc20V1Params___fromJson_tearOff$closure(), type$.EvmosErc20V1Params, type$.Map_String_dynamic));
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_5mW === type) {
          t1 = new A.EvmosErc20V1MsgRegisterERC20(A.QuickMap_as(json, _s9_, _null, type$.nullable_String), A.QuickMap_asListOfString(json, "erc20addresses", false));
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_h6w === type) {
          t1 = type$.nullable_String;
          t1 = new A.EvmosErc20V1MsgToggleConversion(A.QuickMap_as(json, _s9_, _null, t1), A.QuickMap_as(json, "token", _null, t1));
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_clp === type) {
          t1 = A.EvmosRevenueV1MsgRegisterRevenue_EvmosRevenueV1MsgRegisterRevenue$fromJson(json);
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_zvJ === type) {
          t1 = type$.nullable_String;
          t1 = new A.EvmosRevenueV1MsgUpdateRevenue(A.QuickMap_as(json, _s16_, _null, t1), A.QuickMap_as(json, _s16_0, _null, t1), A.QuickMap_as(json, "withdrawer_address", _null, t1));
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_7jk === type) {
          t1 = type$.nullable_String;
          t1 = new A.EvmosRevenueV1MsgCancelRevenue(A.QuickMap_as(json, _s16_, _null, t1), A.QuickMap_as(json, _s16_0, _null, t1));
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_oZ2 === type) {
          t1 = new A.EvmosRevenueV1MsgUpdateParams(A.QuickMap_as(json, _s9_, _null, type$.nullable_String), A.QuickMap_maybeAs(json, _s6_, A.params1_EvmosRevenueV1Params___fromJson_tearOff$closure(), type$.EvmosRevenueV1Params, type$.Map_String_dynamic));
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_E2n === type) {
          t1 = type$.nullable_String;
          t1 = new A.EvmosVestingV2MsgCreateClawbackVestingAccount(A.QuickMap_as(json, _s14_, _null, t1), A.QuickMap_as(json, _s15_, _null, t1), A.QuickMap_as(json, "enable_gov_clawback", _null, type$.nullable_bool));
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_X6N === type) {
          t1 = type$.nullable_String;
          t2 = A.QuickMap_as(json, _s14_, _null, t1);
          t1 = A.QuickMap_as(json, _s15_, _null, t1);
          t3 = A.QuickMap_maybeAs(json, "start_time", A.timestamp_ProtobufTimestamp___fromString_tearOff$closure(), type$.ProtobufTimestamp, type$.String);
          t4 = A.QuickMap_asListOfMap(json, "lockup_periods", _null, false);
          if (t4 == null)
            t4 = _null;
          else {
            t5 = A._arrayInstanceType(t4);
            t6 = t5._eval$1("MappedListIterable<1,EvmosVestingV1Period>");
            t4 = A.List_List$_of(new A.MappedListIterable(t4, t5._eval$1("EvmosVestingV1Period(1)")._as(A.period_EvmosVestingV1Period___fromJson_tearOff$closure()), t6), t6._eval$1("ListIterable.E"));
          }
          t5 = A.QuickMap_asListOfMap(json, "vesting_periods", _null, false);
          if (t5 == null)
            t5 = _null;
          else {
            t6 = A._arrayInstanceType(t5);
            t7 = t6._eval$1("MappedListIterable<1,EvmosVestingV1Period>");
            t5 = A.List_List$_of(new A.MappedListIterable(t5, t6._eval$1("EvmosVestingV1Period(1)")._as(A.period_EvmosVestingV1Period___fromJson_tearOff$closure()), t7), t7._eval$1("ListIterable.E"));
          }
          t5 = new A.EvmosVestingV2MsgFundVestingAccount(t2, t1, t3, t4, t5);
          t1 = t5;
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_2IE === type) {
          t1 = type$.nullable_String;
          t1 = new A.EvmosVestingV2MsgClawback(A.QuickMap_as(json, _s14_, _null, t1), A.QuickMap_as(json, "account_address", _null, t1), A.QuickMap_as(json, "dest_address", _null, t1));
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_kbj === type) {
          t1 = type$.nullable_String;
          t1 = new A.EvmosVestingV2MsgUpdateVestingFunder(A.QuickMap_as(json, _s14_, _null, t1), A.QuickMap_as(json, "new_funder_address", _null, t1), A.QuickMap_as(json, _s15_, _null, t1));
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_uXw === type) {
          t1 = new A.EvmosVestingV2MsgConvertVestingAccount(A.QuickMap_as(json, _s15_, _null, type$.nullable_String));
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_Elm === type) {
          t1 = A.EvmosEthermintEVMV1MsgEthereumTxResponse_EvmosEthermintEVMV1MsgEthereumTxResponse$fromJson(json);
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_hnd === type) {
          t1 = type$.Map_String_dynamic._as(json.$index(0, "data"));
          A._asString(t1.$index(0, "@type"));
          t2 = A._asNumQ(json.$index(0, "size"));
          if (t2 == null)
            t2 = _null;
          t2 = new A.EvmosEthermintEVMV1MsgEthereumTx(new A.AnyJsonMessage(t1), t2, A._asString(json.$index(0, "hash")), A._asString(json.$index(0, "from")));
          t1 = t2;
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_USN === type) {
          t1 = new A.EvmosEthermintEVMV1MsgUpdateParams(A.QuickMap_as(json, _s9_, _null, type$.String), A.EvmosEthermintEVMV1Params_EvmosEthermintEVMV1Params$fromJson(A.QuickMap_asMap(json, _s6_, _null, type$.Map_String_dynamic)));
          break $label0$0;
        }
        if (B.EvmosErc20V1Types_YH9 === type) {
          t1 = A.QuickMap_as(json, _s9_, _null, type$.String);
          t2 = A.QuickMap_asMap(json, _s6_, _null, type$.Map_String_dynamic);
          t3 = A._asString(t2.$index(0, "base_fee"));
          t4 = A.IntUtils_parse(t2.$index(0, "base_fee_change_denominator"), true);
          t5 = A.IntUtils_parse(t2.$index(0, "elasticity_multiplier"), true);
          t6 = A.BigintUtils_parse(t2.$index(0, "enable_height"), true);
          t7 = A._asString(t2.$index(0, "min_gas_multiplier"));
          t8 = A._asString(t2.$index(0, "min_gas_price"));
          t7 = new A.EvmosEthermintFeeMarketV1MsgUpdateParams(t1, new A.EvmosEthermintFeeMarketV1Params(A._asBool(t2.$index(0, "no_base_fee")), t4, t5, t6, t3, t8, t7));
          t1 = t7;
          break $label0$0;
        }
        t1 = _null;
        break $label0$0;
      }
      type$.nullable_ServiceMessage_CosmosMessage._as(t1);
      if (t1 == null)
        return _null;
      if (!$T._is(t1))
        throw A.wrapException(A.DartCosmosSdkPluginException$("Invalid Ethermint Service.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", A.createRuntimeType($T).toString$0(0), "service", A.getRuntimeTypeOfDartObject(t1).toString$0(0)], type$.String, type$.dynamic)));
      return t1;
    },
    EvmosService: function EvmosService() {
    },
    EvmosErc20V1Params___fromJson_tearOff(json) {
      var t1, t2, t3;
      type$.Map_String_dynamic._as(json);
      t1 = A.QuickMap_as(json, "enable_erc20", null, type$.nullable_bool);
      t2 = A.QuickMap_asListOfString(json, "native_precompiles", false);
      t3 = A.QuickMap_asListOfString(json, "dynamic_precompiles", false);
      t2 = t2 == null ? null : A.List_List$unmodifiable(t2, type$.String);
      return new A.EvmosErc20V1Params(t1, t2, t3 == null ? null : A.List_List$unmodifiable(t3, type$.String));
    },
    EvmosErc20V1Params: function EvmosErc20V1Params(t0, t1, t2) {
      this.enableErc20 = t0;
      this.nativePrecompiles = t1;
      this.dynamicPrecompiles = t2;
    },
    EvmosErc20V1MsgConvertCoin: function EvmosErc20V1MsgConvertCoin(t0, t1, t2) {
      this.coin = t0;
      this.receiver = t1;
      this.sender = t2;
    },
    _EvmosErc20V1MsgConvertCoin_EvmosService_AminoMessage: function _EvmosErc20V1MsgConvertCoin_EvmosService_AminoMessage() {
    },
    EvmosErc20V1MsgConvertERC20: function EvmosErc20V1MsgConvertERC20(t0, t1, t2, t3) {
      var _ = this;
      _.contractAddress = t0;
      _.amount = t1;
      _.receiver = t2;
      _.sender = t3;
    },
    _EvmosErc20V1MsgConvertERC20_EvmosService_AminoMessage: function _EvmosErc20V1MsgConvertERC20_EvmosService_AminoMessage() {
    },
    EvmosErc20V1MsgRegisterERC20: function EvmosErc20V1MsgRegisterERC20(t0, t1) {
      this.authority = t0;
      this.erc20addresses = t1;
    },
    _EvmosErc20V1MsgRegisterERC20_EvmosService_AminoMessage: function _EvmosErc20V1MsgRegisterERC20_EvmosService_AminoMessage() {
    },
    EvmosErc20V1MsgToggleConversion: function EvmosErc20V1MsgToggleConversion(t0, t1) {
      this.authority = t0;
      this.token = t1;
    },
    _EvmosErc20V1MsgToggleConversion_EvmosService_AminoMessage: function _EvmosErc20V1MsgToggleConversion_EvmosService_AminoMessage() {
    },
    EvmosErc20V1MsgUpdateParams: function EvmosErc20V1MsgUpdateParams(t0, t1) {
      this.authority = t0;
      this.params = t1;
    },
    _EvmosErc20V1MsgUpdateParams_EvmosService_AminoMessage: function _EvmosErc20V1MsgUpdateParams_EvmosService_AminoMessage() {
    },
    EvmosEthermintEVMV1ChainConfig: function EvmosEthermintEVMV1ChainConfig(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18) {
      var _ = this;
      _.homesteadBlock = t0;
      _.daoForkBlock = t1;
      _.daoForkSupport = t2;
      _.eip150Block = t3;
      _.eip150Hash = t4;
      _.eip155Block = t5;
      _.eip158Block = t6;
      _.byzantiumBlock = t7;
      _.constantinopleBlock = t8;
      _.petersburgBlock = t9;
      _.istanbulBlock = t10;
      _.muirGlacierBlock = t11;
      _.berlinBlock = t12;
      _.londonBlock = t13;
      _.arrowGlacierBlock = t14;
      _.grayGlacierBlock = t15;
      _.mergeNetsplitBlock = t16;
      _.shanghaiBlock = t17;
      _.cancunBlock = t18;
    },
    EvmosEthermintEVMV1Log: function EvmosEthermintEVMV1Log(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.address = t0;
      _.topics = t1;
      _.data = t2;
      _.blockNumber = t3;
      _.transactionHash = t4;
      _.transactionIndex = t5;
      _.blockHash = t6;
      _.logIndex = t7;
      _.removed = t8;
    },
    EvmosEthermintEVMV1Params_EvmosEthermintEVMV1Params$fromJson(json) {
      var t3, t4, t5, t6,
        _s12_ = "chain_config",
        t1 = A._asBoolQ(json.$index(0, "enable_call")),
        t2 = A._asBoolQ(json.$index(0, "allow_unprotected_txs"));
      if (json.$index(0, _s12_) == null)
        t3 = null;
      else {
        t3 = type$.Map_String_dynamic._as(json.$index(0, _s12_));
        t3 = new A.EvmosEthermintEVMV1ChainConfig(A.BigintUtils_tryParse(t3.$index(0, "homestead_block")), A.BigintUtils_tryParse(t3.$index(0, "dao_fork_block")), A._asBool(t3.$index(0, "dao_fork_support")), A.BigintUtils_tryParse(t3.$index(0, "eip150_block")), A._asStringQ(t3.$index(0, "eip150_hash")), A.BigintUtils_tryParse(t3.$index(0, "eip155_block")), A.BigintUtils_tryParse(t3.$index(0, "eip158_block")), A.BigintUtils_tryParse(t3.$index(0, "byzantium_block")), A.BigintUtils_tryParse(t3.$index(0, "constantinople_block")), A.BigintUtils_tryParse(t3.$index(0, "petersburg_block")), A.BigintUtils_tryParse(t3.$index(0, "istanbul_block")), A.BigintUtils_tryParse(t3.$index(0, "muir_glacier_block")), A.BigintUtils_tryParse(t3.$index(0, "berlin_block")), A.BigintUtils_tryParse(t3.$index(0, "london_block")), A.BigintUtils_tryParse(t3.$index(0, "arrow_glacier_block")), A.BigintUtils_tryParse(t3.$index(0, "gray_glacier_block")), A.BigintUtils_tryParse(t3.$index(0, "merge_netsplit_block")), A.BigintUtils_tryParse(t3.$index(0, "shanghai_block")), A.BigintUtils_tryParse(t3.$index(0, "cancun_block")));
      }
      t4 = A._asBoolQ(json.$index(0, "enable_create"));
      t5 = A._asStringQ(json.$index(0, "evm_denom"));
      t6 = type$.nullable_List_dynamic._as(json.$index(0, "extra_eips"));
      if (t6 == null)
        t6 = null;
      else {
        t6 = J.map$1$1$ax(t6, new A.EvmosEthermintEVMV1Params_EvmosEthermintEVMV1Params$fromJson_closure(), type$.List_int);
        t6 = A.List_List$_of(t6, t6.$ti._eval$1("ListIterable.E"));
      }
      return new A.EvmosEthermintEVMV1Params(t5, t4, t1, t6, t3, t2);
    },
    EvmosEthermintEVMV1Params: function EvmosEthermintEVMV1Params(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.evmDenom = t0;
      _.enableCreate = t1;
      _.enableCall = t2;
      _.extraEips = t3;
      _.chainConfig = t4;
      _.allowUnprotectedTxs = t5;
    },
    EvmosEthermintEVMV1Params_EvmosEthermintEVMV1Params$fromJson_closure: function EvmosEthermintEVMV1Params_EvmosEthermintEVMV1Params$fromJson_closure() {
    },
    EvmosEthermintEVMV1Params_toJson_closure: function EvmosEthermintEVMV1Params_toJson_closure() {
    },
    EvmosEthermintEVMV1MsgEthereumTx: function EvmosEthermintEVMV1MsgEthereumTx(t0, t1, t2, t3) {
      var _ = this;
      _.data = t0;
      _.size = t1;
      _.hash = t2;
      _.from = t3;
    },
    _EvmosEthermintEVMV1MsgEthereumTx_EvmosService_AminoMessage: function _EvmosEthermintEVMV1MsgEthereumTx_EvmosService_AminoMessage() {
    },
    EvmosEthermintEVMV1MsgEthereumTxResponse_EvmosEthermintEVMV1MsgEthereumTxResponse$fromJson(json) {
      var t1 = A._asString(json.$index(0, "hash")),
        t2 = type$.nullable_List_dynamic._as(json.$index(0, "logs"));
      if (t2 == null)
        t2 = null;
      else {
        t2 = J.map$1$1$ax(t2, new A.EvmosEthermintEVMV1MsgEthereumTxResponse_EvmosEthermintEVMV1MsgEthereumTxResponse$fromJson_closure(), type$.EvmosEthermintEVMV1Log);
        t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      }
      if (t2 == null)
        t2 = A._setArrayType([], type$.JSArray_EvmosEthermintEVMV1Log);
      return new A.EvmosEthermintEVMV1MsgEthereumTxResponse(t1, t2, A.CosmosUtils_tryToBytes(A._asStringQ(json.$index(0, "ret"))), A._asStringQ(json.$index(0, "vm_error")), A.BigintUtils_parse(json.$index(0, "gas_used"), true));
    },
    EvmosEthermintEVMV1MsgEthereumTxResponse: function EvmosEthermintEVMV1MsgEthereumTxResponse(t0, t1, t2, t3, t4) {
      var _ = this;
      _.hash = t0;
      _.logs = t1;
      _.ret = t2;
      _.vmError = t3;
      _.gasUsed = t4;
    },
    EvmosEthermintEVMV1MsgEthereumTxResponse_EvmosEthermintEVMV1MsgEthereumTxResponse$fromJson_closure: function EvmosEthermintEVMV1MsgEthereumTxResponse_EvmosEthermintEVMV1MsgEthereumTxResponse$fromJson_closure() {
    },
    EvmosEthermintEVMV1MsgEthereumTxResponse_toJson_closure: function EvmosEthermintEVMV1MsgEthereumTxResponse_toJson_closure() {
    },
    EvmosEthermintEVMV1MsgUpdateParams: function EvmosEthermintEVMV1MsgUpdateParams(t0, t1) {
      this.authority = t0;
      this.params = t1;
    },
    _EvmosEthermintEVMV1MsgUpdateParams_EvmosService_AminoMessage: function _EvmosEthermintEVMV1MsgUpdateParams_EvmosService_AminoMessage() {
    },
    EvmosEthermintFeeMarketV1Params: function EvmosEthermintFeeMarketV1Params(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.noBaseFee = t0;
      _.baseFeeChangeDenominator = t1;
      _.elasticityMultiplier = t2;
      _.enableHeight = t3;
      _.baseFee = t4;
      _.minGasPrice = t5;
      _.minGasMultiplier = t6;
    },
    EvmosEthermintFeeMarketV1MsgUpdateParams: function EvmosEthermintFeeMarketV1MsgUpdateParams(t0, t1) {
      this.authority = t0;
      this.params = t1;
    },
    _EvmosEthermintFeeMarketV1MsgUpdateParams_EvmosService_AminoMessage: function _EvmosEthermintFeeMarketV1MsgUpdateParams_EvmosService_AminoMessage() {
    },
    EvmosInflationV1ExponentialCalculation___fromJson_tearOff(json) {
      var t1, _null = null;
      type$.Map_String_dynamic._as(json);
      t1 = type$.nullable_String;
      return new A.EvmosInflationV1ExponentialCalculation(A.QuickMap_as(json, "a", _null, t1), A.QuickMap_as(json, "r", _null, t1), A.QuickMap_as(json, "c", _null, t1), A.QuickMap_as(json, "bonding_target", _null, t1), A.QuickMap_as(json, "max_variance", _null, t1));
    },
    EvmosInflationV1ExponentialCalculation: function EvmosInflationV1ExponentialCalculation(t0, t1, t2, t3, t4) {
      var _ = this;
      _.a = t0;
      _.r = t1;
      _.c = t2;
      _.bondingTarget = t3;
      _.maxVariance = t4;
    },
    EvmosInflationV1InflationDistribution___fromJson_tearOff(json) {
      var t1;
      type$.Map_String_dynamic._as(json);
      t1 = type$.nullable_String;
      return new A.EvmosInflationV1InflationDistribution(A.QuickMap_as(json, "staking_rewards", null, t1), A.QuickMap_as(json, "usage_incentives", null, t1), A.QuickMap_as(json, "community_pool", null, t1));
    },
    EvmosInflationV1InflationDistribution: function EvmosInflationV1InflationDistribution(t0, t1, t2) {
      this.stakingRewards = t0;
      this.usageIncentives = t1;
      this.communityPool = t2;
    },
    EvmosInflationV1Params___fromJson_tearOff(json) {
      var t2, t3,
        t1 = type$.Map_String_dynamic;
      t1._as(json);
      t2 = A.QuickMap_as(json, "mint_denom", null, type$.nullable_String);
      t3 = A.QuickMap_as(json, "enable_inflation", null, type$.nullable_bool);
      return new A.EvmosInflationV1Params(t2, A.QuickMap_maybeAs(json, "exponential_calculation", A.exponential_calculation_EvmosInflationV1ExponentialCalculation___fromJson_tearOff$closure(), type$.EvmosInflationV1ExponentialCalculation, t1), A.QuickMap_maybeAs(json, "inflation_distribution", A.inflation_distribution_EvmosInflationV1InflationDistribution___fromJson_tearOff$closure(), type$.EvmosInflationV1InflationDistribution, t1), t3);
    },
    EvmosInflationV1Params: function EvmosInflationV1Params(t0, t1, t2, t3) {
      var _ = this;
      _.mintDenom = t0;
      _.exponentialCalculation = t1;
      _.inflationDistribution = t2;
      _.enableInflation = t3;
    },
    EvmosInflationV1MsgUpdateParams: function EvmosInflationV1MsgUpdateParams(t0, t1) {
      this.authority = t0;
      this.params = t1;
    },
    _EvmosInflationV1MsgUpdateParams_EvmosService_AminoMessage: function _EvmosInflationV1MsgUpdateParams_EvmosService_AminoMessage() {
    },
    EvmosRevenueV1Params___fromJson_tearOff(json) {
      type$.Map_String_dynamic._as(json);
      return new A.EvmosRevenueV1Params(A.QuickMap_as(json, "enable_revenue", null, type$.nullable_bool), A.QuickMap_as(json, "developer_shares", null, type$.nullable_String), A.QuickMap_asBigInt(json, "addr_derivation_cost_create", null, true, type$.nullable_BigInt));
    },
    EvmosRevenueV1Params: function EvmosRevenueV1Params(t0, t1, t2) {
      this.enableRevenue = t0;
      this.developerShares = t1;
      this.addrDerivationCostCreate = t2;
    },
    EvmosRevenueV1MsgCancelRevenue: function EvmosRevenueV1MsgCancelRevenue(t0, t1) {
      this.contractAddress = t0;
      this.deployerAddress = t1;
    },
    _EvmosRevenueV1MsgCancelRevenue_EvmosService_AminoMessage: function _EvmosRevenueV1MsgCancelRevenue_EvmosService_AminoMessage() {
    },
    EvmosRevenueV1MsgRegisterRevenue_EvmosRevenueV1MsgRegisterRevenue$fromJson(json) {
      var t4, _null = null,
        t1 = type$.nullable_String,
        t2 = A.QuickMap_as(json, "contract_address", _null, t1),
        t3 = A.QuickMap_as(json, "deployer_address", _null, t1);
      t1 = A.QuickMap_as(json, "withdrawer_address", _null, t1);
      t4 = J.map$1$1$ax(A.QuickMap_as(json, "nonces", _null, type$.List_dynamic), new A.EvmosRevenueV1MsgRegisterRevenue_EvmosRevenueV1MsgRegisterRevenue$fromJson_closure(), type$.BigInt);
      t4 = A.List_List$_of(t4, t4.$ti._eval$1("ListIterable.E"));
      return new A.EvmosRevenueV1MsgRegisterRevenue(t2, t3, t1, t4);
    },
    EvmosRevenueV1MsgRegisterRevenue: function EvmosRevenueV1MsgRegisterRevenue(t0, t1, t2, t3) {
      var _ = this;
      _.contractAddress = t0;
      _.deployerAddress = t1;
      _.withdrawerAddress = t2;
      _.nonces = t3;
    },
    EvmosRevenueV1MsgRegisterRevenue_EvmosRevenueV1MsgRegisterRevenue$fromJson_closure: function EvmosRevenueV1MsgRegisterRevenue_EvmosRevenueV1MsgRegisterRevenue$fromJson_closure() {
    },
    EvmosRevenueV1MsgRegisterRevenue_toJson_closure: function EvmosRevenueV1MsgRegisterRevenue_toJson_closure() {
    },
    _EvmosRevenueV1MsgRegisterRevenue_EvmosService_AminoMessage: function _EvmosRevenueV1MsgRegisterRevenue_EvmosService_AminoMessage() {
    },
    EvmosRevenueV1MsgUpdateParams: function EvmosRevenueV1MsgUpdateParams(t0, t1) {
      this.authority = t0;
      this.params = t1;
    },
    _EvmosRevenueV1MsgUpdateParams_EvmosService_AminoMessage: function _EvmosRevenueV1MsgUpdateParams_EvmosService_AminoMessage() {
    },
    EvmosRevenueV1MsgUpdateRevenue: function EvmosRevenueV1MsgUpdateRevenue(t0, t1, t2) {
      this.contractAddress = t0;
      this.deployerAddress = t1;
      this.withdrawerAddress = t2;
    },
    _EvmosRevenueV1MsgUpdateRevenue_EvmosService_AminoMessage: function _EvmosRevenueV1MsgUpdateRevenue_EvmosService_AminoMessage() {
    },
    EvmosErc20V1Types_findService(type, amino) {
      var t1 = A.IterableHelper_firstWhereNullable(B.List_m95, new A.EvmosErc20V1Types_findService_closure(type), type$.EvmosErc20V1Types);
      return t1;
    },
    EvmosErc20V1Types: function EvmosErc20V1Types(t0, t1) {
      this.typeUrl = t0;
      this.aminoType = t1;
    },
    EvmosErc20V1Types_findService_closure: function EvmosErc20V1Types_findService_closure(t0) {
      this.type = t0;
    },
    EvmosVestingV1Period___fromJson_tearOff(json) {
      type$.Map_String_dynamic._as(json);
      return new A.EvmosVestingV1Period(A.QuickMap_asBigInt(json, "length", null, true, type$.nullable_BigInt), A.QuickMap_maybeAs(json, "amount", A.coin_Coin___deserialize_tearOff$closure(), type$.Coin, type$.List_int));
    },
    EvmosVestingV1Period: function EvmosVestingV1Period(t0, t1) {
      this.length = t0;
      this.amount = t1;
    },
    EvmosVestingV2MsgConvertVestingAccount: function EvmosVestingV2MsgConvertVestingAccount(t0) {
      this.vestingAddress = t0;
    },
    _EvmosVestingV2MsgConvertVestingAccount_EvmosService_AminoMessage: function _EvmosVestingV2MsgConvertVestingAccount_EvmosService_AminoMessage() {
    },
    EvmosVestingV2MsgCreateClawbackVestingAccount: function EvmosVestingV2MsgCreateClawbackVestingAccount(t0, t1, t2) {
      this.funderAddress = t0;
      this.vestingAddress = t1;
      this.enableGovClawback = t2;
    },
    _EvmosVestingV2MsgCreateClawbackVestingAccount_EvmosService_AminoMessage: function _EvmosVestingV2MsgCreateClawbackVestingAccount_EvmosService_AminoMessage() {
    },
    EvmosVestingV2MsgFundVestingAccount: function EvmosVestingV2MsgFundVestingAccount(t0, t1, t2, t3, t4) {
      var _ = this;
      _.funderAddress = t0;
      _.vestingAddress = t1;
      _.startTime = t2;
      _.lockupPeriods = t3;
      _.vestingPeriods = t4;
    },
    EvmosVestingV2MsgFundVestingAccount_toJson_closure: function EvmosVestingV2MsgFundVestingAccount_toJson_closure() {
    },
    EvmosVestingV2MsgFundVestingAccount_toJson_closure0: function EvmosVestingV2MsgFundVestingAccount_toJson_closure0() {
    },
    _EvmosVestingV2MsgFundVestingAccount_EvmosService_AminoMessage: function _EvmosVestingV2MsgFundVestingAccount_EvmosService_AminoMessage() {
    },
    EvmosVestingV2MsgClawback: function EvmosVestingV2MsgClawback(t0, t1, t2) {
      this.funderAddress = t0;
      this.accountAddress = t1;
      this.destAddress = t2;
    },
    _EvmosVestingV2MsgClawback_EvmosService_AminoMessage: function _EvmosVestingV2MsgClawback_EvmosService_AminoMessage() {
    },
    EvmosVestingV2MsgUpdateVestingFunder: function EvmosVestingV2MsgUpdateVestingFunder(t0, t1, t2) {
      this.funderAddress = t0;
      this.newFunderAddress = t1;
      this.vestingAddress = t2;
    },
    _EvmosVestingV2MsgUpdateVestingFunder_EvmosService_AminoMessage: function _EvmosVestingV2MsgUpdateVestingFunder_EvmosService_AminoMessage() {
    },
    AnyMessage: function AnyMessage() {
    },
    AnyJsonMessage: function AnyJsonMessage(t0) {
      this.message = t0;
    },
    IbcService: function IbcService() {
    },
    MsgTransfer: function MsgTransfer(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.sourcePort = t0;
      _.sourceChannel = t1;
      _.token = t2;
      _.sender = t3;
      _.receiver = t4;
      _.timeoutHeight = t5;
      _.timeoutTimestamp = t6;
      _.memo = t7;
    },
    MsgTransfer_toAminoJson_closure: function MsgTransfer_toAminoJson_closure() {
    },
    _MsgTransfer_IbcService_AminoMessage: function _MsgTransfer_IbcService_AminoMessage() {
    },
    IbcClientHeight___fromJson_tearOff(json) {
      var t1;
      type$.Map_String_dynamic._as(json);
      t1 = A.BigintUtils_tryParse(json.$index(0, "revision_height"));
      return new A.IbcClientHeight(A.BigintUtils_tryParse(json.$index(0, "revision_number")), t1);
    },
    IbcClientHeight: function IbcClientHeight(t0, t1) {
      this.revisionNumber = t0;
      this.revisionHeight = t1;
    },
    IbcTypes: function IbcTypes(t0, t1) {
      this.typeUrl = t0;
      this.aminoType = t1;
    },
    OpInitService_fromJson(amino, json, typeUrl, $T) {
      var t1, t2, t3, t4, t5, _null = null;
      $label0$0: {
        if (B.OpInitOpHostV1Types_uN3 === A.OpInitOpHostV1Types_findService(typeUrl, true)) {
          t1 = type$.nullable_String;
          t2 = A.QuickMap_as(json, "sender", _null, t1);
          t3 = A.QuickMap_asBigInt(json, "bridge_id", _null, true, type$.nullable_BigInt);
          t1 = A.QuickMap_as(json, "to", _null, t1);
          t4 = A.QuickMap_maybeAs(json, "amount", A.coin_Coin___fromJson_tearOff$closure(), type$.Coin, type$.Map_String_dynamic);
          t5 = A.QuickMap_asBytes(json, "data", false);
          if (t5 == null)
            t5 = _null;
          else {
            A.BytesUtils_validateListOfBytes(t5);
            t5 = A.List_List$unmodifiable(t5, type$.int);
          }
          t5 = new A.OpInitOpHostV1MsgInitiateTokenDeposit(t2, t3, t1, t4, t5);
          t1 = t5;
          break $label0$0;
        }
        t1 = _null;
        break $label0$0;
      }
      if (t1 == null)
        return _null;
      if (!$T._is(t1))
        throw A.wrapException(A.DartCosmosSdkPluginException$("Invalid OpInit Service.", A.LinkedHashMap_LinkedHashMap$_literal(["excepted", A.createRuntimeType($T).toString$0(0), "service", A.getRuntimeTypeOfDartObject(t1).toString$0(0)], type$.String, type$.dynamic)));
      return t1;
    },
    OpInitService: function OpInitService() {
    },
    OpInitOpHostV1MsgInitiateTokenDeposit: function OpInitOpHostV1MsgInitiateTokenDeposit(t0, t1, t2, t3, t4) {
      var _ = this;
      _.sender = t0;
      _.bridgeId = t1;
      _.to = t2;
      _.amount = t3;
      _.data = t4;
    },
    _OpInitOpHostV1MsgInitiateTokenDeposit_OpInitService_AminoMessage: function _OpInitOpHostV1MsgInitiateTokenDeposit_OpInitService_AminoMessage() {
    },
    OpInitOpHostV1Types_findService(type, amino) {
      var t1 = A.IterableHelper_firstWhereNullable(B.List_ecs, new A.OpInitOpHostV1Types_findService_closure(type), type$.OpInitOpHostV1Types);
      return t1;
    },
    OpInitOpHostV1Types: function OpInitOpHostV1Types(t0, t1) {
      this.typeUrl = t0;
      this.aminoType = t1;
    },
    OpInitOpHostV1Types_findService_closure: function OpInitOpHostV1Types_findService_closure(t0) {
      this.type = t0;
    },
    BankV1Beta1Service: function BankV1Beta1Service() {
    },
    Input_Input$fromJson(json) {
      var t3, t4,
        t1 = A.CosmosBaseAddress_CosmosBaseAddress(A.QuickMap_as(json, "address", null, type$.String)),
        t2 = A.QuickMap_asListOfMap(json, "coins", null, false);
      t2.toString;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,Coin>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Coin(1)")._as(new A.Input_Input$fromJson_closure()), t4), t4._eval$1("ListIterable.E"));
      return new A.Input(t1, t2);
    },
    Input: function Input(t0, t1) {
      this.address = t0;
      this.coins = t1;
    },
    Input_Input$fromJson_closure: function Input_Input$fromJson_closure() {
    },
    Input_toJson_closure: function Input_toJson_closure() {
    },
    Output_Output$fromJson(json) {
      var t3, t4,
        t1 = A.CosmosBaseAddress_CosmosBaseAddress(A.QuickMap_as(json, "address", null, type$.String)),
        t2 = A.QuickMap_asListOfMap(json, "coins", null, false);
      t2.toString;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,Coin>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Coin(1)")._as(new A.Output_Output$fromJson_closure()), t4), t4._eval$1("ListIterable.E"));
      return new A.Output(t1, t2);
    },
    Output: function Output(t0, t1) {
      this.address = t0;
      this.coins = t1;
    },
    Output_Output$fromJson_closure: function Output_Output$fromJson_closure() {
    },
    Output_toJson_closure: function Output_toJson_closure() {
    },
    MsgMultiSend_MsgMultiSend$fromJson(json) {
      var t2, t3, t4,
        t1 = A.QuickMap_asListOfMap(json, "outputs", null, false);
      t1.toString;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,Output>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Output(1)")._as(new A.MsgMultiSend_MsgMultiSend$fromJson_closure()), t3), t3._eval$1("ListIterable.E"));
      t2 = A.QuickMap_asListOfMap(json, "inputs", null, false);
      t2.toString;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,Input>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Input(1)")._as(new A.MsgMultiSend_MsgMultiSend$fromJson_closure0()), t4), t4._eval$1("ListIterable.E"));
      return new A.MsgMultiSend(A.List_List$unmodifiable(t2, type$.Input), A.List_List$unmodifiable(t1, type$.Output));
    },
    MsgMultiSend: function MsgMultiSend(t0, t1) {
      this.inputs = t0;
      this.outputs = t1;
    },
    MsgMultiSend_MsgMultiSend$fromJson_closure: function MsgMultiSend_MsgMultiSend$fromJson_closure() {
    },
    MsgMultiSend_MsgMultiSend$fromJson_closure0: function MsgMultiSend_MsgMultiSend$fromJson_closure0() {
    },
    MsgMultiSend_toJson_closure: function MsgMultiSend_toJson_closure() {
    },
    MsgMultiSend_toJson_closure0: function MsgMultiSend_toJson_closure0() {
    },
    _MsgMultiSend_BankV1Beta1Service_AminoMessage: function _MsgMultiSend_BankV1Beta1Service_AminoMessage() {
    },
    MsgSend_MsgSend$fromJson(json) {
      var t3, t4, t5,
        t1 = type$.String,
        t2 = A.CosmosBaseAddress_CosmosBaseAddress(A.QuickMap_as(json, "from_address", null, t1));
      t1 = A.CosmosBaseAddress_CosmosBaseAddress(A.QuickMap_as(json, "to_address", null, t1));
      t3 = A.QuickMap_asListOfMap(json, "amount", null, false);
      t3.toString;
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,Coin>");
      t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("Coin(1)")._as(new A.MsgSend_MsgSend$fromJson_closure()), t5), t5._eval$1("ListIterable.E"));
      return new A.MsgSend(t2, t1, A.List_List$unmodifiable(t3, type$.Coin));
    },
    MsgSend: function MsgSend(t0, t1, t2) {
      this.fromAddress = t0;
      this.toAddress = t1;
      this.amount = t2;
    },
    MsgSend_MsgSend$fromJson_closure: function MsgSend_MsgSend$fromJson_closure() {
    },
    MsgSend_toJson_closure: function MsgSend_toJson_closure() {
    },
    _MsgSend_BankV1Beta1Service_AminoMessage: function _MsgSend_BankV1Beta1Service_AminoMessage() {
    },
    BankV1beta1Types: function BankV1beta1Types(t0, t1) {
      this.typeUrl = t0;
      this.aminoType = t1;
    },
    Coin___deserialize_tearOff(data) {
      var decode = A.ProtocolBufferDecoder_decode(type$.List_int._as(data)),
        t1 = type$.String;
      return new A.Coin(A.QuickProtocolBufferResults_getField(decode, 1, t1), A.BigintUtils_parse(A.QuickProtocolBufferResults_getField(decode, 2, t1), true));
    },
    Coin___fromJson_tearOff(json) {
      return A.Coin_Coin$fromJson(type$.Map_String_dynamic._as(json));
    },
    Coin_Coin$fromJson(json) {
      return new A.Coin(A._asString(json.$index(0, "denom")), A._BigIntImpl_parse(A._asString(json.$index(0, "amount")), null));
    },
    Coin: function Coin(t0, t1) {
      this.denom = t0;
      this.amount = t1;
    },
    CrisisV1Beta1Service: function CrisisV1Beta1Service() {
    },
    MsgVerifyInvariant_MsgVerifyInvariant$fromJson(json) {
      var t1 = type$.nullable_String;
      return new A.MsgVerifyInvariant(A.QuickMap_maybeAs(json, "sender", new A.MsgVerifyInvariant_MsgVerifyInvariant$fromJson_closure(), type$.CosmosBaseAddress, type$.String), A.QuickMap_as(json, "invariant_module_name", null, t1), A.QuickMap_as(json, "invariant_route", null, t1));
    },
    MsgVerifyInvariant: function MsgVerifyInvariant(t0, t1, t2) {
      this.sender = t0;
      this.invariantModuleName = t1;
      this.invariantRoute = t2;
    },
    MsgVerifyInvariant_MsgVerifyInvariant$fromJson_closure: function MsgVerifyInvariant_MsgVerifyInvariant$fromJson_closure() {
    },
    _MsgVerifyInvariant_CrisisV1Beta1Service_AminoMessage: function _MsgVerifyInvariant_CrisisV1Beta1Service_AminoMessage() {
    },
    CrisisV1beta1: function CrisisV1beta1(t0, t1) {
      this.typeUrl = t0;
      this.aminoType = t1;
    },
    DistributionV1Beta1Service: function DistributionV1Beta1Service() {
    },
    DistributionMsgFundCommunityPool_DistributionMsgFundCommunityPool$fromJson(json) {
      var t2, t3, _null = null,
        t1 = A.QuickMap_asListOfMap(json, "amount", _null, false);
      if (t1 == null)
        t1 = _null;
      else {
        t2 = A._arrayInstanceType(t1);
        t3 = t2._eval$1("MappedListIterable<1,Coin>");
        t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Coin(1)")._as(new A.DistributionMsgFundCommunityPool_DistributionMsgFundCommunityPool$fromJson_closure()), t3), t3._eval$1("ListIterable.E"));
      }
      t2 = A.QuickMap_as(json, "depositor", _null, type$.nullable_String);
      return new A.DistributionMsgFundCommunityPool(t1 == null ? _null : A.List_List$unmodifiable(t1, type$.Coin), t2);
    },
    DistributionMsgFundCommunityPool: function DistributionMsgFundCommunityPool(t0, t1) {
      this.amount = t0;
      this.depositor = t1;
    },
    DistributionMsgFundCommunityPool_DistributionMsgFundCommunityPool$fromJson_closure: function DistributionMsgFundCommunityPool_DistributionMsgFundCommunityPool$fromJson_closure() {
    },
    DistributionMsgFundCommunityPool_toJson_closure: function DistributionMsgFundCommunityPool_toJson_closure() {
    },
    _DistributionMsgFundCommunityPool_DistributionV1Beta1Service_AminoMessage: function _DistributionMsgFundCommunityPool_DistributionV1Beta1Service_AminoMessage() {
    },
    DistributionMsgSetWithdrawAddress: function DistributionMsgSetWithdrawAddress(t0, t1) {
      this.delegatorAddress = t0;
      this.withdrawAddress = t1;
    },
    _DistributionMsgSetWithdrawAddress_DistributionV1Beta1Service_AminoMessage: function _DistributionMsgSetWithdrawAddress_DistributionV1Beta1Service_AminoMessage() {
    },
    DistributionMsgWithdrawDelegatorReward: function DistributionMsgWithdrawDelegatorReward(t0, t1) {
      this.delegatorAddress = t0;
      this.validatorAddress = t1;
    },
    _DistributionMsgWithdrawDelegatorReward_DistributionV1Beta1Service_AminoMessage: function _DistributionMsgWithdrawDelegatorReward_DistributionV1Beta1Service_AminoMessage() {
    },
    DistributionMsgWithdrawValidatorCommission: function DistributionMsgWithdrawValidatorCommission(t0) {
      this.validatorAddress = t0;
    },
    _DistributionMsgWithdrawValidatorCommission_DistributionV1Beta1Service_AminoMessage: function _DistributionMsgWithdrawValidatorCommission_DistributionV1Beta1Service_AminoMessage() {
    },
    DistributionV1beta1Types: function DistributionV1beta1Types(t0, t1) {
      this.typeUrl = t0;
      this.aminoType = t1;
    },
    GovV1Beta1Service: function GovV1Beta1Service() {
    },
    GovVoteOption_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_P6X, new A.GovVoteOption_fromName_closure($name), new A.GovVoteOption_fromName_closure0($name));
    },
    GovVoteOption: function GovVoteOption(t0, t1) {
      this.value = t0;
      this.name = t1;
    },
    GovVoteOption_fromName_closure: function GovVoteOption_fromName_closure(t0) {
      this.name = t0;
    },
    GovVoteOption_fromName_closure0: function GovVoteOption_fromName_closure0(t0) {
      this.name = t0;
    },
    GovMsgDeposit_GovMsgDeposit$fromJson(json) {
      var t4, t5,
        t1 = A.QuickMap_asBigInt(json, "proposal_id", null, true, type$.BigInt),
        t2 = A.QuickMap_asAddress(json, "depositor", type$.nullable_CosmosBaseAddress),
        t3 = A.QuickMap_asListOfMap(json, "amount", null, false);
      if (t3 == null)
        t3 = null;
      else {
        t4 = A._arrayInstanceType(t3);
        t5 = t4._eval$1("MappedListIterable<1,Coin>");
        t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("Coin(1)")._as(new A.GovMsgDeposit_GovMsgDeposit$fromJson_closure()), t5), t5._eval$1("ListIterable.E"));
      }
      return new A.GovMsgDeposit(t1, t2, t3 == null ? A._setArrayType([], type$.JSArray_Coin) : t3);
    },
    GovMsgDeposit: function GovMsgDeposit(t0, t1, t2) {
      this.proposalId = t0;
      this.depositor = t1;
      this.amount = t2;
    },
    GovMsgDeposit_GovMsgDeposit$fromJson_closure: function GovMsgDeposit_GovMsgDeposit$fromJson_closure() {
    },
    GovMsgDeposit_toJson_closure: function GovMsgDeposit_toJson_closure() {
    },
    _GovMsgDeposit_GovV1Beta1Service_AminoMessage: function _GovMsgDeposit_GovV1Beta1Service_AminoMessage() {
    },
    GovMsgVote_GovMsgVote$fromJson(json) {
      return new A.GovMsgVote(A.QuickMap_asBigInt(json, "proposalId", null, true, type$.nullable_BigInt), A.QuickMap_asAddress(json, "voter", type$.nullable_CosmosBaseAddress), A.QuickMap_maybeAs(json, "option", new A.GovMsgVote_GovMsgVote$fromJson_closure(), type$.GovVoteOption, type$.String));
    },
    GovMsgVote: function GovMsgVote(t0, t1, t2) {
      this.proposalId = t0;
      this.voter = t1;
      this.option = t2;
    },
    GovMsgVote_GovMsgVote$fromJson_closure: function GovMsgVote_GovMsgVote$fromJson_closure() {
    },
    _GovMsgVote_GovV1Beta1Service_AminoMessage: function _GovMsgVote_GovV1Beta1Service_AminoMessage() {
    },
    GovV1beta1types: function GovV1beta1types(t0, t1) {
      this.typeUrl = t0;
      this.aminoType = t1;
    },
    SlashingV1Beta1Service: function SlashingV1Beta1Service() {
    },
    SlashingMsgUnjail: function SlashingMsgUnjail(t0) {
      this.validatorAddr = t0;
    },
    _SlashingMsgUnjail_SlashingV1Beta1Service_AminoMessage: function _SlashingMsgUnjail_SlashingV1Beta1Service_AminoMessage() {
    },
    SlashingV1beta1Types: function SlashingV1beta1Types(t0, t1) {
      this.typeUrl = t0;
      this.aminoType = t1;
    },
    StakingV1Beta1Service: function StakingV1Beta1Service() {
    },
    CommissionRates: function CommissionRates(t0, t1, t2) {
      this.rate = t0;
      this.maxRate = t1;
      this.maxChangeRate = t2;
    },
    Description_Description$fromJson(json) {
      var t1 = A._asStringQ(json.$index(0, "details")),
        t2 = A._asStringQ(json.$index(0, "identity")),
        t3 = A._asStringQ(json.$index(0, "moniker")),
        t4 = A._asStringQ(json.$index(0, "security_contact"));
      return new A.Description(t3, t2, A._asStringQ(json.$index(0, "website")), t4, t1);
    },
    Description: function Description(t0, t1, t2, t3, t4) {
      var _ = this;
      _.moniker = t0;
      _.identity = t1;
      _.website = t2;
      _.securityContact = t3;
      _.details = t4;
    },
    MsgBeginRedelegate: function MsgBeginRedelegate(t0, t1, t2, t3) {
      var _ = this;
      _.delegatorAddress = t0;
      _.validatorSrcAddress = t1;
      _.validatorDstAddress = t2;
      _.amount = t3;
    },
    _MsgBeginRedelegate_StakingV1Beta1Service_AminoMessage: function _MsgBeginRedelegate_StakingV1Beta1Service_AminoMessage() {
    },
    MsgCreateValidator_MsgCreateValidator$fromJson(json) {
      var _null = null,
        t1 = type$.Map_String_dynamic,
        t2 = A.Description_Description$fromJson(A.QuickMap_asMap(json, "description", _null, t1)),
        t3 = A.QuickMap_asMap(json, "commission", _null, t1),
        t4 = A._asString(t3.$index(0, "max_change_rate")),
        t5 = A._asString(t3.$index(0, "max_rate")),
        t6 = type$.nullable_CosmosBaseAddress;
      return new A.MsgCreateValidator(t2, new A.CommissionRates(A._asString(t3.$index(0, "rate")), t5, t4), A.QuickMap_asBigInt(json, "min_self_delegation", _null, true, type$.BigInt), A.QuickMap_asAddress(json, "delegator_address", t6), A.QuickMap_asAddress(json, "validator_address", t6), A.QuickMap_maybeAs(json, "pubkey", new A.MsgCreateValidator_MsgCreateValidator$fromJson_closure(), type$.Any, t1), A.Coin_Coin$fromJson(A.QuickMap_asMap(json, "value", _null, t1)));
    },
    MsgCreateValidator: function MsgCreateValidator(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.description = t0;
      _.commission = t1;
      _.minSelfDelegation = t2;
      _.delegatorAddress = t3;
      _.validatorAddress = t4;
      _.pubkey = t5;
      _.value = t6;
    },
    MsgCreateValidator_MsgCreateValidator$fromJson_closure: function MsgCreateValidator_MsgCreateValidator$fromJson_closure() {
    },
    MsgCreateValidator_toAminoJson_closure: function MsgCreateValidator_toAminoJson_closure() {
    },
    _MsgCreateValidator_StakingV1Beta1Service_AminoMessage: function _MsgCreateValidator_StakingV1Beta1Service_AminoMessage() {
    },
    MsgDelegate: function MsgDelegate(t0, t1, t2) {
      this.delegatorAddress = t0;
      this.validatorAddress = t1;
      this.amount = t2;
    },
    _MsgDelegate_StakingV1Beta1Service_AminoMessage: function _MsgDelegate_StakingV1Beta1Service_AminoMessage() {
    },
    MsgEditValidator: function MsgEditValidator(t0, t1, t2, t3) {
      var _ = this;
      _.description = t0;
      _.validatorAddress = t1;
      _.commissionRate = t2;
      _.minSelfDelegation = t3;
    },
    _MsgEditValidator_StakingV1Beta1Service_AminoMessage: function _MsgEditValidator_StakingV1Beta1Service_AminoMessage() {
    },
    MsgUndelegate: function MsgUndelegate(t0, t1, t2) {
      this.delegatorAddress = t0;
      this.validatorAddress = t1;
      this.amount = t2;
    },
    _MsgUndelegate_StakingV1Beta1Service_AminoMessage: function _MsgUndelegate_StakingV1Beta1Service_AminoMessage() {
    },
    StakingV1beta1Types: function StakingV1beta1Types(t0, t1) {
      this.typeUrl = t0;
      this.aminoType = t1;
    },
    Fee: function Fee(t0, t1, t2, t3) {
      var _ = this;
      _.amount = t0;
      _.gasLimit = t1;
      _.payer = t2;
      _.granter = t3;
    },
    Fee_toJson_closure: function Fee_toJson_closure() {
    },
    Fee_toAminoJson_closure: function Fee_toAminoJson_closure() {
    },
    Fee_toAminoJson_closure0: function Fee_toAminoJson_closure0() {
    },
    SignDoc: function SignDoc(t0, t1, t2, t3) {
      var _ = this;
      _.bodyBytes = t0;
      _.authInfoBytes = t1;
      _.chainId = t2;
      _.accountNumber = t3;
    },
    VestingV1Beta1Service: function VestingV1Beta1Service() {
    },
    MsgCreateVestingAccount_MsgCreateVestingAccount$fromJson(json) {
      var t3, t4, t5, _null = null,
        t1 = type$.nullable_CosmosBaseAddress,
        t2 = A.QuickMap_asAddress(json, "from_address", t1);
      t1 = A.QuickMap_asAddress(json, "to_address", t1);
      t3 = A.QuickMap_asListOfMap(json, "amount", _null, false);
      if (t3 == null)
        t3 = _null;
      else {
        t4 = A._arrayInstanceType(t3);
        t5 = t4._eval$1("MappedListIterable<1,Coin>");
        t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("Coin(1)")._as(new A.MsgCreateVestingAccount_MsgCreateVestingAccount$fromJson_closure()), t5), t5._eval$1("ListIterable.E"));
      }
      if (t3 == null)
        t3 = A._setArrayType([], type$.JSArray_Coin);
      t4 = type$.nullable_BigInt;
      return new A.MsgCreateVestingAccount(t2, t1, t3, A.QuickMap_asBigInt(json, "end_time", _null, true, t4), A.QuickMap_as(json, "delayed", _null, type$.bool), A.QuickMap_asBigInt(json, "start_time", _null, true, t4));
    },
    MsgCreateVestingAccount: function MsgCreateVestingAccount(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.fromAddress = t0;
      _.toAddress = t1;
      _.amount = t2;
      _.endTime = t3;
      _.delayed = t4;
      _.startTime = t5;
    },
    MsgCreateVestingAccount_MsgCreateVestingAccount$fromJson_closure: function MsgCreateVestingAccount_MsgCreateVestingAccount$fromJson_closure() {
    },
    MsgCreateVestingAccount_toJson_closure: function MsgCreateVestingAccount_toJson_closure() {
    },
    _MsgCreateVestingAccount_VestingV1Beta1Service_AminoMessage: function _MsgCreateVestingAccount_VestingV1Beta1Service_AminoMessage() {
    },
    VestingV1beta1Types: function VestingV1beta1Types(t0, t1) {
      this.typeUrl = t0;
      this.aminoType = t1;
    },
    CosmosSDKService: function CosmosSDKService() {
    },
    ProtocolBufferDecoder_decode(bytes) {
      var t1, t2, index, decodeTag, tag, fieldId, decodeLength, t3, index0, decodeInt,
        results = A._setArrayType([], type$.JSArray_ProtocolBufferDecoderResult_dynamic);
      $label0$1:
        for (t1 = J.getInterceptor$asx(bytes), t2 = type$.ProtocolBufferDecoderResult_dynamic, index = 0; index < t1.get$length(bytes);) {
          decodeTag = A.ProtocolBufferDecoder__decodeVarint(t1.sublist$1(bytes, index));
          index += decodeTag.consumed;
          tag = decodeTag.value;
          fieldId = tag >>> 3;
          switch (tag & 7) {
            case 2:
              decodeLength = A.ProtocolBufferDecoder__decodeVarint(t1.sublist$1(bytes, index));
              index += decodeLength.consumed;
              t3 = decodeLength.value;
              if (typeof t3 !== "number")
                return A.iae(t3);
              index0 = index + t3;
              B.JSArray_methods.add$1(results, new A.ProtocolBufferDecoderResult(fieldId, t1.sublist$2(bytes, index, index0), t2));
              index = index0;
              continue $label0$1;
            case 0:
              decodeInt = A.ProtocolBufferDecoder__decodeInt(t1.sublist$1(bytes, index));
              index += decodeInt.consumed;
              B.JSArray_methods.add$1(results, new A.ProtocolBufferDecoderResult(fieldId, decodeInt.value, t2));
              continue $label0$1;
            default:
              throw A.wrapException(A.UnimplementedError$("protobuf wiretype not supported."));
          }
        }
      return results;
    },
    ProtocolBufferDecoder__decodeVarint(data) {
      var t1, value, shift, index, index0, byte;
      for (t1 = data.length, value = 0, shift = 0, index = 0; true; index = index0) {
        index0 = index + 1;
        if (!(index < t1))
          return A.ioore(data, index);
        byte = data[index];
        value = (value | B.JSInt_methods._shlPositive$1(byte & 127, shift)) >>> 0;
        if ((byte & 128) === 0) {
          index = index0;
          break;
        }
        shift += 7;
      }
      return new A._Result(value, index, type$._Result_int);
    },
    ProtocolBufferDecoder__decodeBigVarint(data) {
      var shift, index, index0, byte,
        value = $.$get$_BigIntImpl_zero();
      for (shift = 0, index = 0; true; index = index0) {
        index0 = index + 1;
        if (!(index < data.length))
          return A.ioore(data, index);
        byte = data[index];
        value = value.$or(0, A._BigIntImpl__BigIntImpl$from(byte & 127).$shl(0, shift));
        if ((byte & 128) === 0) {
          index = index0;
          break;
        }
        shift += 7;
      }
      return new A._Result(value, index, type$._Result_BigInt);
    },
    ProtocolBufferDecoder__decodeInt(data) {
      if (J.indexWhere$1$ax(data, new A.ProtocolBufferDecoder__decodeInt_closure()) < 4)
        return A.ProtocolBufferDecoder__decodeVarint(data);
      return A.ProtocolBufferDecoder__decodeBigVarint(data);
    },
    QuickProtocolBufferResults_getField(_this, tag, $T) {
      var result, defaultValue, t1, exception,
        setDefault = false;
      try {
        result = B.JSArray_methods.firstWhere$1(_this, new A.QuickProtocolBufferResults_getField_closure(tag));
        t1 = A.QuickProtocolBufferResult_get(result, $T);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError) {
          if ($T._is(null)) {
            $T._as(null);
            return null;
          }
          if (setDefault) {
            defaultValue = A.QuickProtocolBufferResults__getDefault(_this, $T);
            if (defaultValue != null)
              return defaultValue;
          }
          throw A.wrapException(A.DartCosmosSdkPluginException$("field id does not exist.", A.LinkedHashMap_LinkedHashMap$_literal(["fieldIds", B.JSArray_methods.map$1$1(_this, new A.QuickProtocolBufferResults_getField_closure0(), type$.int).join$1(0, ", "), "id", tag], type$.String, type$.dynamic)));
        } else
          throw exception;
      }
    },
    QuickProtocolBufferResults__getDefault(_this, $T) {
      if (A.createRuntimeType($T) === B.Type_bool_wF1)
        return $T._as(false);
      if (A.createRuntimeType($T) === B.Type_int_T7V)
        return $T._as(0);
      if (A.createRuntimeType($T) === B.Type_BigInt_DZK)
        return $T._as($.$get$_BigIntImpl_zero());
      return null;
    },
    QuickProtocolBufferResult__returnString(_this, value, $T) {
      var t1, exception;
      try {
        if ($T._is("")) {
          $T._as(value);
          return value;
        }
        if ($T._is($.$get$_BigIntImpl_zero())) {
          t1 = $T._as(A.BigintUtils_parse(value, true));
          return t1;
        }
        if ($T._is(0)) {
          t1 = $T._as(A.IntUtils_parse(value, true));
          return t1;
        }
      } catch (exception) {
      }
      throw A.wrapException(A.DartCosmosSdkPluginException$("Invalid type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", A.createRuntimeType($T).toString$0(0), "Excepted", B.JSString_methods.get$runtimeType(value).toString$0(0)], type$.String, type$.dynamic)));
    },
    QuickProtocolBufferResult_get(_this, $T) {
      var decode,
        t1 = _this.value;
      if ($T._is(t1))
        return $T._as(t1);
      if (type$.List_int._is(t1)) {
        decode = A.StringUtils_tryDecode(type$.nullable_List_int._as(t1), B.StringEncoding_1);
        if (decode != null)
          return A.QuickProtocolBufferResult__returnString(_this, decode, $T);
      }
      if (A._isInt(t1))
        if ($T._is($.$get$_BigIntImpl_zero()))
          return $T._as(A._BigIntImpl__BigIntImpl$from(t1));
        else if ($T._is(false)) {
          if (t1 !== 0 && t1 !== 1)
            throw A.wrapException(A.DartCosmosSdkPluginException$("Invalid boolean value.", A.LinkedHashMap_LinkedHashMap$_literal(["value", t1], type$.String, type$.dynamic)));
          return $T._as(t1 === 1);
        }
      throw A.wrapException(A.DartCosmosSdkPluginException$("Invalid type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", A.createRuntimeType($T).toString$0(0), "Excepted", J.get$runtimeType$(t1).toString$0(0)], type$.String, type$.dynamic)));
    },
    ProtocolBufferDecoder__decodeInt_closure: function ProtocolBufferDecoder__decodeInt_closure() {
    },
    ProtocolBufferDecoderResult: function ProtocolBufferDecoderResult(t0, t1, t2) {
      this.tagNumber = t0;
      this.value = t1;
      this.$ti = t2;
    },
    _Result: function _Result(t0, t1, t2) {
      this.value = t0;
      this.consumed = t1;
      this.$ti = t2;
    },
    QuickProtocolBufferResults_getField_closure: function QuickProtocolBufferResults_getField_closure(t0) {
      this.tag = t0;
    },
    QuickProtocolBufferResults_getField_closure0: function QuickProtocolBufferResults_getField_closure0() {
    },
    Any_Any$fromJson(json) {
      var t2,
        t1 = A.QuickMap_asBytes(json, "value", true);
      t1.toString;
      t2 = A.QuickMap_as(json, "type_url", null, type$.nullable_String);
      return new A.Any(t1, t2 == null ? A.QuickMap_as(json, "type", null, type$.String) : t2);
    },
    Any: function Any(t0, t1) {
      this.value = t0;
      this.typeUrl = t1;
    },
    ProtobufTimestamp___fromString_tearOff(time) {
      var t1 = A.DateTime_parse(A._asString(time))._core$_value;
      return new A.ProtobufTimestamp(A._BigIntImpl__BigIntImpl$from(B.JSInt_methods._tdivFast$1(t1, 1000)), A._BigIntImpl__BigIntImpl$from(B.JSInt_methods.$mod(t1, 1000) * 1000000));
    },
    ProtobufTimestamp: function ProtobufTimestamp(t0, t1) {
      this.seconds = t0;
      this.nanos = t1;
    },
    AminoTypes_fromType(type) {
      return A.IterableHelper_firstWhereNullable(B.List_eGD, new A.AminoTypes_fromType_closure(type), type$.AminoTypes);
    },
    AminoMessage_fromJson(json) {
      var t2, _null = null,
        _s17_ = "delegator_address",
        _s17_0 = "validator_address",
        _s6_ = "amount",
        typeStr = A.QuickMap_as(json, "type", new A.AminoMessage_fromJson_closure(), type$.String),
        t1 = type$.Map_String_dynamic,
        value = A.QuickMap_asMap(json, "value", new A.AminoMessage_fromJson_closure0(), t1),
        type = A.AminoTypes_fromType(typeStr);
      if (type == null)
        return new A.UnknownAminoService(value, typeStr);
      $label0$0: {
        if (B.AminoTypes_icZ === type) {
          t2 = type$.nullable_String;
          t2 = new A.MsgTransfer(A.QuickMap_as(value, "source_port", _null, t2), A.QuickMap_as(value, "source_channel", _null, t2), A.Coin_Coin$fromJson(A.QuickMap_asMap(value, "token", _null, t1)), A.QuickMap_as(value, "sender", _null, t2), A.QuickMap_as(value, "receiver", _null, t2), A.QuickMap_maybeAs(value, "timeout_height", A.height_IbcClientHeight___fromJson_tearOff$closure(), type$.IbcClientHeight, t1), A.QuickMap_asBigInt(value, "timeout_timestamp", _null, true, type$.nullable_BigInt), A.QuickMap_as(value, "memo", _null, t2));
          t1 = t2;
          break $label0$0;
        }
        if (B.AminoTypes_YB3 === type) {
          t1 = A.MsgSend_MsgSend$fromJson(value);
          break $label0$0;
        }
        if (B.AminoTypes_G0e === type) {
          t1 = A.MsgMultiSend_MsgMultiSend$fromJson(json);
          break $label0$0;
        }
        if (B.AminoTypes_jIj === type) {
          t1 = A.MsgVerifyInvariant_MsgVerifyInvariant$fromJson(json);
          break $label0$0;
        }
        if (B.AminoTypes_wEL === type) {
          t1 = type$.nullable_CosmosBaseAddress;
          t1 = new A.DistributionMsgSetWithdrawAddress(A.QuickMap_asAddress(json, _s17_, t1), A.QuickMap_asAddress(json, "withdraw_address", t1));
          break $label0$0;
        }
        if (B.AminoTypes_LGL === type) {
          t1 = type$.nullable_CosmosBaseAddress;
          t1 = new A.DistributionMsgWithdrawDelegatorReward(A.QuickMap_asAddress(json, _s17_, t1), A.QuickMap_asAddress(json, _s17_0, t1));
          break $label0$0;
        }
        if (B.AminoTypes_R1T === type) {
          t1 = new A.DistributionMsgWithdrawValidatorCommission(A.QuickMap_asAddress(json, _s17_0, type$.nullable_CosmosBaseAddress));
          break $label0$0;
        }
        if (B.AminoTypes_kX4 === type) {
          t1 = A.DistributionMsgFundCommunityPool_DistributionMsgFundCommunityPool$fromJson(json);
          break $label0$0;
        }
        if (B.AminoTypes_sYG === type) {
          t1 = A.GovMsgVote_GovMsgVote$fromJson(json);
          break $label0$0;
        }
        if (B.AminoTypes_pe4 === type) {
          t1 = A.GovMsgDeposit_GovMsgDeposit$fromJson(json);
          break $label0$0;
        }
        if (B.AminoTypes_M8n === type) {
          t1 = new A.SlashingMsgUnjail(A.QuickMap_asAddress(json, "validator_addr", type$.CosmosBaseAddress));
          break $label0$0;
        }
        if (B.AminoTypes_raa === type) {
          t2 = type$.nullable_CosmosBaseAddress;
          t1 = new A.MsgBeginRedelegate(A.QuickMap_asAddress(json, _s17_, t2), A.QuickMap_asAddress(json, "validator_src_address", t2), A.QuickMap_asAddress(json, "validator_dst_address", t2), A.Coin_Coin$fromJson(A.QuickMap_asMap(json, _s6_, _null, t1)));
          break $label0$0;
        }
        if (B.AminoTypes_p9m === type) {
          t1 = A.MsgCreateValidator_MsgCreateValidator$fromJson(json);
          break $label0$0;
        }
        if (B.AminoTypes_SIk === type) {
          t2 = type$.nullable_CosmosBaseAddress;
          t1 = new A.MsgDelegate(A.QuickMap_asAddress(json, _s17_, t2), A.QuickMap_asAddress(json, _s17_0, t2), A.Coin_Coin$fromJson(A.QuickMap_asMap(json, _s6_, _null, t1)));
          break $label0$0;
        }
        if (B.AminoTypes_jXu === type) {
          t2 = A.QuickMap_asAddress(json, _s17_0, type$.nullable_CosmosBaseAddress);
          t2 = new A.MsgEditValidator(A.Description_Description$fromJson(A.QuickMap_asMap(json, "description", _null, t1)), t2, A.QuickMap_as(json, "commission_rate", _null, type$.nullable_String), A.QuickMap_asBigInt(json, "min_self_delegation", _null, true, type$.nullable_BigInt));
          t1 = t2;
          break $label0$0;
        }
        if (B.AminoTypes_9Vm === type) {
          t2 = type$.nullable_CosmosBaseAddress;
          t1 = new A.MsgUndelegate(A.QuickMap_asAddress(json, _s17_, t2), A.QuickMap_asAddress(json, _s17_0, t2), A.Coin_Coin$fromJson(A.QuickMap_asMap(json, _s6_, _null, t1)));
          break $label0$0;
        }
        if (B.AminoTypes_n6G === type) {
          t1 = A.MsgCreateVestingAccount_MsgCreateVestingAccount$fromJson(json);
          break $label0$0;
        }
        if (B.AminoTypes_cctp_cctp === type) {
          t1 = A.CCTPV1Service_fromJson(true, json, typeStr, type$.ServiceMessage_CosmosMessage);
          break $label0$0;
        }
        if (B.AminoTypes_evmos_evmos === type || B.AminoTypes_ethermint_ethermint === type) {
          t1 = A.EvmosService_fromJson(true, json, typeStr, type$.ServiceMessage_CosmosMessage);
          break $label0$0;
        }
        if (B.AminoTypes_ophost_ophost === type) {
          t1 = A.OpInitService_fromJson(true, json, typeStr, type$.ServiceMessage_CosmosMessage);
          break $label0$0;
        }
        t1 = _null;
      }
      return type$.AminoMessage_CosmosMessage._as(t1);
    },
    CosmosProtocolBuffer: function CosmosProtocolBuffer() {
    },
    TypeUrl: function TypeUrl() {
    },
    CosmosMessage: function CosmosMessage() {
    },
    AminoTypes: function AminoTypes(t0, t1) {
      this.type = t0;
      this._name = t1;
    },
    AminoTypes_fromType_closure: function AminoTypes_fromType_closure(t0) {
      this.type = t0;
    },
    AminoMessage: function AminoMessage() {
    },
    AminoMessage_fromJson_closure: function AminoMessage_fromJson_closure() {
    },
    AminoMessage_fromJson_closure0: function AminoMessage_fromJson_closure0() {
    },
    AminoMessage_toAminoJson_closure: function AminoMessage_toAminoJson_closure() {
    },
    ServiceMessage: function ServiceMessage() {
    },
    QuickMap_as(_this, key, onError, $T) {
      var t1, exception,
        value = _this.$index(0, key);
      if (value == null) {
        if ($T._is(null)) {
          $T._as(null);
          return null;
        }
        if (onError != null)
          throw A.wrapException(onError.call$1(true));
        throw A.wrapException(A.DartCosmosSdkPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      }
      try {
        t1 = $T._as(value);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if (onError != null)
            throw A.wrapException(onError.call$1(false));
          throw A.wrapException(A.DartCosmosSdkPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "expected", A.createRuntimeType($T).toString$0(0), "value", J.get$runtimeType$(value), "data", _this], type$.String, type$.dynamic)));
        } else
          throw exception;
      }
    },
    QuickMap_asBigInt(_this, key, onError, sign, $T) {
      var v, t1, exception,
        value = _this.$index(0, key);
      if (value == null) {
        if ($T._is(null)) {
          $T._as(null);
          return null;
        }
        if (onError != null)
          throw A.wrapException(onError.call$1(true));
        throw A.wrapException(A.DartCosmosSdkPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      }
      try {
        v = A.BigintUtils_parse(value, true);
        if (!sign && v._isNegative) {
          if (onError != null) {
            t1 = onError.call$1(false);
            throw A.wrapException(t1);
          }
          t1 = A.DartCosmosSdkPluginException$("Incorrect Unsigned value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "expected", A.createRuntimeType($T).toString$0(0), "value", A.getRuntimeTypeOfDartObject(v), "data", _this], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
        t1 = $T._as(v);
        return t1;
      } catch (exception) {
        if (onError != null)
          throw A.wrapException(onError.call$1(false));
        throw A.wrapException(A.DartCosmosSdkPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "expected", A.createRuntimeType($T).toString$0(0), "value", J.get$runtimeType$(value), "data", _this], type$.String, type$.dynamic)));
      }
    },
    QuickMap_asMap(_this, key, onError, $E) {
      var value, t1, exception;
      if (!$E._is(B.Map_empty))
        throw A.wrapException(B.DartCosmosSdkPluginException_GGa);
      value = A.QuickMap_as(_this, key, null, type$.nullable_Map_dynamic_dynamic);
      if (value == null) {
        if ($E._is(null)) {
          $E._as(null);
          return null;
        }
        if (onError != null)
          throw A.wrapException(onError.call$1(true));
        throw A.wrapException(A.DartCosmosSdkPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      }
      try {
        t1 = $E._as(value.cast$2$0(0, type$.String, type$.dynamic));
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if (onError != null)
            throw A.wrapException(onError.call$1(false));
          throw A.wrapException(A.DartCosmosSdkPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "expected", A.createRuntimeType($E).toString$0(0), "value", A.getRuntimeTypeOfDartObject(value), "data", _this], type$.String, type$.dynamic)));
        } else
          throw exception;
      }
    },
    QuickMap_asBytes(_this, key, throwOnNull) {
      var t1, exception,
        value = A.QuickMap_as(_this, key, null, type$.nullable_String);
      if (value == null) {
        if (throwOnNull)
          throw A.wrapException(A.DartCosmosSdkPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
        return null;
      }
      try {
        t1 = A.CosmosUtils_toBytes(value);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception)))
          throw A.wrapException(A.DartCosmosSdkPluginException$("Incorrect value .", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
        else
          throw exception;
      }
    },
    QuickMap_asListOfMap(_this, key, onError, throwOnNull) {
      var e, s, t1, exception,
        value = A.QuickMap_as(_this, key, null, type$.nullable_List_dynamic);
      if (value == null) {
        if (!throwOnNull)
          return null;
        if (onError != null)
          onError.call$1(true);
        throw A.wrapException(A.DartCosmosSdkPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      }
      try {
        t1 = J.map$1$1$ax(value, new A.QuickMap_asListOfMap_closure(), type$.Map_String_dynamic);
        t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
        return t1;
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (onError != null)
          onError.call$1(false);
        throw A.wrapException(A.DartCosmosSdkPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "value", J.get$runtimeType$(value), "data", _this, "error", J.toString$0$(e), "stack", J.toString$0$(s)], type$.String, type$.dynamic)));
      }
    },
    QuickMap_asListOfString(_this, key, throwOnNull) {
      var e, s, t1, exception,
        value = A.QuickMap_as(_this, key, null, type$.nullable_List_dynamic);
      if (value == null)
        return null;
      try {
        t1 = J.cast$1$0$ax(value, type$.String);
        return t1;
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        throw A.wrapException(A.DartCosmosSdkPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "value", J.get$runtimeType$(value), "data", _this, "error", J.toString$0$(e), "stack", J.toString$0$(s)], type$.String, type$.dynamic)));
      }
    },
    QuickMap__valueAsList(_this, key, $T, $E) {
      var value, t1, exception;
      if (!$E._is(B.List_empty2))
        throw A.wrapException(B.DartCosmosSdkPluginException_1E8);
      value = A.QuickMap_as(_this, key, null, type$.nullable_List_dynamic);
      if (value == null) {
        if ($E._is(null)) {
          $E._as(null);
          return null;
        }
        throw A.wrapException(A.DartCosmosSdkPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      }
      try {
        if ($T._is(B.Map_empty)) {
          t1 = J.map$1$1$ax(value, new A.QuickMap__valueAsList_closure(), type$.Map_String_dynamic);
          t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
          $E._as(t1);
          return t1;
        }
        t1 = $E._as(J.cast$1$0$ax(value, $T));
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception)))
          throw A.wrapException(A.DartCosmosSdkPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "expected", A.createRuntimeType($T).toString$0(0), "value", J.get$runtimeType$(value), "data", _this], type$.String, type$.dynamic)));
        else
          throw exception;
      }
    },
    QuickMap_maybeAs(_this, key, onValue, $E, $T) {
      if (_this.$index(0, key) != null) {
        if ($T._is(B.Map_empty))
          return onValue.call$1(A.QuickMap_asMap(_this, key, null, $T));
        if ($T._is(B.List_empty2))
          return onValue.call$1(A.QuickMap__valueAsList(_this, key, type$.dynamic, $T));
        return onValue.call$1(A.QuickMap_as(_this, key, null, $T));
      }
      return null;
    },
    QuickMap_asAddress(_this, key, $A) {
      var t1, exception,
        value = _this.$index(0, key);
      if (value == null) {
        if ($A._is(null)) {
          $A._as(null);
          return null;
        }
        throw A.wrapException(A.DartCosmosSdkPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      }
      try {
        t1 = $A._as(A.CosmosBaseAddress_CosmosBaseAddress(A._asString(value)));
        return t1;
      } catch (exception) {
        t1 = A.DartCosmosSdkPluginException$("Invalid cosmos address.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "value", J.toString$0$(value)], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    QuickMap_asListOfMap_closure: function QuickMap_asListOfMap_closure() {
    },
    QuickMap__valueAsList_closure: function QuickMap__valueAsList_closure() {
    },
    CosmosUtils_toBytes(data) {
      var t1, exception;
      try {
        t1 = $.$get$StringUtils__hexBytesRegex();
        if (t1._nativeRegExp.test(data)) {
          t1 = A.BytesUtils_fromHexString(data, false);
          return t1;
        }
        t1 = A.StringUtils_encode(data, B.StringEncoding_2);
        return t1;
      } catch (exception) {
        t1 = A.DartCosmosSdkPluginException$("Invalid bytes data.", null);
        throw A.wrapException(t1);
      }
    },
    CosmosUtils_tryToBytes(data) {
      var t1, exception;
      if (data == null)
        return null;
      try {
        t1 = $.$get$StringUtils__hexBytesRegex();
        if (t1._nativeRegExp.test(data)) {
          t1 = A.BytesUtils_fromHexString(data, false);
          return t1;
        }
        t1 = A.StringUtils_encode(data, B.StringEncoding_2);
        return t1;
      } catch (exception) {
        t1 = A.DartCosmosSdkPluginException$("Invalid bytes data.", null);
        throw A.wrapException(t1);
      }
    },
    CosmosUtils_sortAminoJsonTx(obj) {
      var t1, t2, keys, result, _i, i;
      if (type$.Map_dynamic_dynamic._is(obj)) {
        t1 = obj.get$keys();
        t2 = type$.String;
        t1 = t1.cast$1$0(t1, t2);
        keys = t1.toList$0(t1);
        B.JSArray_methods.sort$1(keys, new A.CosmosUtils_sortAminoJsonTx_closure());
        result = A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.dynamic);
        for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
          i = keys[_i];
          result.$indexSet(0, i, A.CosmosUtils_sortAminoJsonTx(obj.$index(0, i)));
        }
        return result;
      } else if (type$.List_dynamic._is(obj)) {
        t1 = J.map$1$1$ax(obj, new A.CosmosUtils_sortAminoJsonTx_closure0(), type$.nullable_Object);
        t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
        return t1;
      }
      return obj;
    },
    CosmosUtils_sortAminoJsonTx_closure: function CosmosUtils_sortAminoJsonTx_closure() {
    },
    CosmosUtils_sortAminoJsonTx_closure0: function CosmosUtils_sortAminoJsonTx_closure0() {
    },
    RetryClient$(_inner, when) {
      A.RangeError_checkNotNegative(3, "retries");
      return new A.RetryClient(_inner, when);
    },
    _defaultWhen(response) {
      return type$.BaseResponse._as(response).statusCode === 503;
    },
    _defaultWhenError(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      return false;
    },
    _defaultDelay(retryCount) {
      return new A.Duration(B.JSNumber_methods.round$0(500000 * Math.pow(1.5, retryCount)));
    },
    RetryClient: function RetryClient(t0, t1) {
      this._inner = t0;
      this._when = t1;
    },
    RetryClient_send_closure: function RetryClient_send_closure() {
    },
    RetryClient_send_closure0: function RetryClient_send_closure0() {
    },
    BaseClient: function BaseClient() {
    },
    BaseRequest: function BaseRequest() {
    },
    BaseRequest_closure: function BaseRequest_closure() {
    },
    BaseRequest_closure0: function BaseRequest_closure0() {
    },
    BaseResponse: function BaseResponse() {
    },
    _rethrowAsClientException(e, st, request) {
      var message;
      if (!(e instanceof A.ClientException)) {
        message = J.toString$0$(e);
        if (B.JSString_methods.startsWith$1(message, "TypeError: "))
          message = B.JSString_methods.substring$1(message, 11);
        e = new A.ClientException(message, request.url);
      }
      A.Error_throwWithStackTrace(e, st);
    },
    _readBody(request, response) {
      return A._readBody$body(request, response);
    },
    _readBody$body(request, response) {
      var $async$_readBody = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        switch ($async$errorCode) {
          case 2:
            $async$next = $async$nextWhenCanceled;
            $async$goto = $async$next.pop();
            break;
          case 1:
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              _box_0 = {};
              t1 = type$.nullable_JSObject._as(response.body);
              bodyStreamReader = t1 == null ? null : type$.JSObject._as(t1.getReader());
              if (bodyStreamReader == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              isDone = false;
              _box_0.isError = false;
              $async$handler = 4;
              t1 = type$.NativeUint8List, t2 = type$.JSObject;
            case 7:
              // for condition
              // trivial condition
              $async$goto = 9;
              return A._asyncStarHelper(A.promiseToFuture(t2._as(bodyStreamReader.read()), t2), $async$_readBody, $async$controller);
            case 9:
              // returning from await.
              chunk = $async$result;
              if (A._asBool(chunk.done)) {
                isDone = true;
                // goto after for
                $async$goto = 8;
                break;
              }
              t3 = chunk.value;
              t3.toString;
              $async$goto = 10;
              $async$nextWhenCanceled = [1, 5];
              return A._asyncStarHelper(A._IterationMarker_yieldSingle(t1._as(t3)), $async$_readBody, $async$controller);
            case 10:
              // after yield
              // goto for condition
              $async$goto = 7;
              break;
            case 8:
              // after for
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              e = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              _box_0.isError = true;
              A._rethrowAsClientException(e, st, request);
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              $async$goto = !isDone ? 11 : 12;
              break;
            case 11:
              // then
              $async$handler = 14;
              $async$goto = 17;
              return A._asyncStarHelper(A.promiseToFuture(type$.JSObject._as(bodyStreamReader.cancel()), type$.nullable_Object).catchError$2$test(new A._readBody_closure(), new A._readBody_closure0(_box_0)), $async$_readBody, $async$controller);
            case 17:
              // returning from await.
              $async$handler = 2;
              // goto after finally
              $async$goto = 16;
              break;
            case 14:
              // catch
              $async$handler = 13;
              $async$exception1 = $async$errorStack.pop();
              e0 = A.unwrapException($async$exception1);
              st0 = A.getTraceFromException($async$exception1);
              if (!_box_0.isError)
                A._rethrowAsClientException(e0, st0, request);
              // goto after finally
              $async$goto = 16;
              break;
            case 13:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 16:
              // after finally
            case 12:
              // join
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncStarHelper(null, 0, $async$controller);
            case 2:
              // rethrow
              return A._asyncStarHelper($async$errorStack.at(-1), 1, $async$controller);
          }
      });
      var $async$goto = 0,
        $async$controller = A._makeAsyncStarStreamController($async$_readBody, type$.List_int),
        $async$nextWhenCanceled, $async$handler = 2, $async$errorStack = [], $async$next = [], isDone, chunk, e, st, e0, st0, t2, t3, exception, _box_0, t1, bodyStreamReader, $async$exception, $async$exception1;
      return A._streamOfController($async$controller);
    },
    BrowserClient: function BrowserClient(t0) {
      this._abortController = t0;
      this._isClosed = false;
    },
    BrowserClient_send_closure: function BrowserClient_send_closure(t0) {
      this.headers = t0;
    },
    _readBody_closure: function _readBody_closure() {
    },
    _readBody_closure0: function _readBody_closure0(t0) {
      this._box_0 = t0;
    },
    ByteStream: function ByteStream(t0) {
      this._stream = t0;
    },
    ByteStream_toBytes_closure: function ByteStream_toBytes_closure(t0) {
      this.completer = t0;
    },
    ClientException$(message, uri) {
      return new A.ClientException(message, uri);
    },
    ClientException: function ClientException(t0, t1) {
      this.message = t0;
      this.uri = t1;
    },
    Request$(method, url) {
      var t1 = new Uint8Array(0),
        t2 = $.$get$BaseRequest__tokenRE();
      if (!t2._nativeRegExp.test(method))
        A.throwExpression(A.ArgumentError$value(method, "method", "Not a valid method"));
      t2 = type$.String;
      return new A.Request(B.C_Utf8Codec, t1, method, url, A.LinkedHashMap_LinkedHashMap(new A.BaseRequest_closure(), new A.BaseRequest_closure0(), t2, t2));
    },
    Request: function Request(t0, t1, t2, t3, t4) {
      var _ = this;
      _._defaultEncoding = t0;
      _._bodyBytes = t1;
      _.method = t2;
      _.url = t3;
      _._contentLength = null;
      _._followRedirects = _._persistentConnection = true;
      _._maxRedirects = 5;
      _.headers = t4;
      _._finalized = false;
    },
    Response_fromStream(response) {
      return A.Response_fromStream$body(response);
    },
    Response_fromStream$body(response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, body, t1, t2, t3, t4, t5, t6;
      var $async$Response_fromStream = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(response.stream.toBytes$0(), $async$Response_fromStream);
            case 3:
              // returning from await.
              body = $async$result;
              t1 = response.statusCode;
              t2 = response.request;
              t3 = response.headers;
              t4 = response.reasonPhrase;
              t5 = A.toUint8List(body);
              t6 = body.length;
              t5 = new A.Response(t5, t2, t1, t4, t6, t3, false, true);
              t5.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(t1, t6, t3, false, true, t4, t2);
              $async$returnValue = t5;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Response_fromStream, $async$completer);
    },
    Response: function Response(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.bodyBytes = t0;
      _.request = t1;
      _.statusCode = t2;
      _.reasonPhrase = t3;
      _.contentLength = t4;
      _.headers = t5;
      _.isRedirect = t6;
      _.persistentConnection = t7;
    },
    StreamedRequest$(method, url) {
      var _null = null,
        t1 = A.StreamController_StreamController(_null, _null, _null, _null, true, type$.List_int),
        t2 = $.$get$BaseRequest__tokenRE();
      if (!t2._nativeRegExp.test(method))
        A.throwExpression(A.ArgumentError$value(method, "method", "Not a valid method"));
      t2 = type$.String;
      return new A.StreamedRequest(t1, method, url, A.LinkedHashMap_LinkedHashMap(new A.BaseRequest_closure(), new A.BaseRequest_closure0(), t2, t2));
    },
    StreamedRequest: function StreamedRequest(t0, t1, t2, t3) {
      var _ = this;
      _._streamed_request$_controller = t0;
      _.method = t1;
      _.url = t2;
      _._contentLength = null;
      _._followRedirects = _._persistentConnection = true;
      _._maxRedirects = 5;
      _.headers = t3;
      _._finalized = false;
    },
    StreamedResponse: function StreamedResponse() {
    },
    StreamedResponseV2: function StreamedResponseV2(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.stream = t0;
      _.request = t1;
      _.statusCode = t2;
      _.reasonPhrase = t3;
      _.contentLength = t4;
      _.headers = t5;
      _.isRedirect = t6;
      _.persistentConnection = t7;
    },
    mapToQuery(map, encoding) {
      return map.get$entries().map$1$1(0, new A.mapToQuery_closure(encoding), type$.String).join$1(0, "&");
    },
    toUint8List(input) {
      if (type$.Uint8List._is(input))
        return input;
      if (type$.TypedData._is(input))
        return J.asUint8List$2$x(B.NativeUint8List_methods.get$buffer(input), 0, null);
      return new Uint8Array(A._ensureNativeList(input));
    },
    toByteStream(stream) {
      return new A.ByteStream(stream);
    },
    mapToQuery_closure: function mapToQuery_closure(t0) {
      this.encoding = t0;
    },
    CaseInsensitiveMap__canonicalizer(key) {
      return A._asString(key).toLowerCase();
    },
    CaseInsensitiveMap: function CaseInsensitiveMap(t0, t1, t2) {
      this._canonicalize = t0;
      this._base = t1;
      this.$ti = t2;
    },
    MediaType_MediaType$parse(mediaType) {
      return A.wrapFormatException("media type", mediaType, new A.MediaType_MediaType$parse_closure(mediaType), type$.MediaType);
    },
    MediaType$(type, subtype, parameters) {
      var t1 = type$.String;
      if (parameters == null)
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      else {
        t1 = new A.CaseInsensitiveMap(A.case_insensitive_map_CaseInsensitiveMap__canonicalizer$closure(), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.MapEntry_String_String), type$.CaseInsensitiveMap_String);
        t1.addAll$1(0, parameters);
      }
      return new A.MediaType(type.toLowerCase(), subtype.toLowerCase(), new A.UnmodifiableMapView(t1, type$.UnmodifiableMapView_String_String));
    },
    MediaType: function MediaType(t0, t1, t2) {
      this.type = t0;
      this.subtype = t1;
      this.parameters = t2;
    },
    MediaType_MediaType$parse_closure: function MediaType_MediaType$parse_closure(t0) {
      this.mediaType = t0;
    },
    MediaType_toString_closure: function MediaType_toString_closure(t0) {
      this.buffer = t0;
    },
    MediaType_toString__closure: function MediaType_toString__closure() {
    },
    expectQuotedString(scanner) {
      var string;
      scanner.expect$2$name($.$get$_quotedString(), "quoted string");
      string = scanner.get$lastMatch().$index(0, 0);
      return A.stringReplaceAllFuncUnchecked(B.JSString_methods.substring$2(string, 1, string.length - 1), $.$get$_quotedPair(), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(new A.expectQuotedString_closure())), null);
    },
    expectQuotedString_closure: function expectQuotedString_closure() {
    },
    AptosAddress_AptosAddress$fromBytes(bytes) {
      var addressBytes = A.AptosAddressUtils_praseAddressBytes(bytes),
        t1 = A.BytesUtils_toHexString(addressBytes, true, "0x"),
        t2 = A.MoveUtils_parseAddressBytes(addressBytes);
      A.BytesUtils_validateListOfBytes(t2);
      return new A.AptosAddress(t1, A.List_List$unmodifiable(t2, type$.int), B.MoveArgumentType_3_address);
    },
    AptosAddress: function AptosAddress(t0, t1, t2) {
      this.address = t0;
      this.value = t1;
      this.argumentType = t2;
    },
    DartAptosPluginException$(message, details) {
      return new A.DartAptosPluginException(message, details);
    },
    DartAptosPluginException: function DartAptosPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    AptosModuleId_layout(property) {
      var t1 = type$.JSArray_Layout_dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "value")], t1), false, "address"), A.LayoutConst_bcsString("name")], t1), false, property);
    },
    AptosTypeTags_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_1Sk, new A.AptosTypeTags_fromName_closure($name), new A.AptosTypeTags_fromName_closure0($name));
    },
    AptosTypeTag_layout(property) {
      var t1 = type$.LazyVariantModel_dynamic;
      return A.LayoutConst_bcsLazyEnum(A._setArrayType([new A.LazyVariantModel(A.types_AptosTypeTagNumeric_layout$closure(), "u8", 1, t1), new A.LazyVariantModel(A.types_AptosTypeTagNumeric_layout$closure(), "u16", 8, t1), new A.LazyVariantModel(A.types_AptosTypeTagNumeric_layout$closure(), "u32", 9, t1), new A.LazyVariantModel(A.types_AptosTypeTagNumeric_layout$closure(), "u64", 2, t1), new A.LazyVariantModel(A.types_AptosTypeTagNumeric_layout$closure(), "u128", 3, t1), new A.LazyVariantModel(A.types_AptosTypeTagNumeric_layout$closure(), "u256", 10, t1), new A.LazyVariantModel(A.types_AptosTypeTagNumeric_layout$closure(), "boolean", 0, t1), new A.LazyVariantModel(A.types_AptosTypeTagSigner_layout$closure(), "signer", 5, t1), new A.LazyVariantModel(A.types_AptosTypeTagAddress_layout$closure(), "address", 4, t1), new A.LazyVariantModel(A.types_AptosTypeTagStruct_layout$closure(), "struct", 7, t1), new A.LazyVariantModel(A.types_AptosTypeTagVector_layout$closure(), "vector", 6, t1), new A.LazyVariantModel(A.types_AptosTypeTagReference_layout$closure(), "reference", 254, t1), new A.LazyVariantModel(A.types_AptosTypeTagGeneric_layout$closure(), "generic", 255, t1)], type$.JSArray_LazyVariantModel_dynamic), property);
    },
    AptosTypeTag_AptosTypeTag$fromStruct(json) {
      var t2, _s5_ = "value",
        t1 = A.BcsVariantSerialization_toVariantDecodeResult(json).result,
        type = A.AptosTypeTags_fromName(A._asString(t1.$index(0, "key")));
      if (type === B.AptosTypeTags_1_u8 || type === B.AptosTypeTags_8_u16 || type === B.AptosTypeTags_9_u32 || type === B.AptosTypeTags_2_u64 || type === B.AptosTypeTags_3_u128 || type === B.AptosTypeTags_10_u256)
        return new A.AptosTypeTagNumeric(type);
      $label0$0: {
        if (B.AptosTypeTags_5_signer === type) {
          t1 = new A.AptosTypeTagSigner(B.AptosTypeTags_5_signer);
          break $label0$0;
        }
        if (B.AptosTypeTags_4_address === type) {
          t1 = new A.AptosTypeTagAddress(B.AptosTypeTags_4_address);
          break $label0$0;
        }
        if (B.AptosTypeTags_6_vector === type) {
          t2 = type$.Map_String_dynamic;
          t2 = new A.AptosTypeTagVector(A.AptosTypeTag_AptosTypeTag$fromStruct(A.QuickMap_asMap0(t2._as(t1.$index(0, _s5_)), _s5_, t2)), B.AptosTypeTags_6_vector);
          t1 = t2;
          break $label0$0;
        }
        if (B.AptosTypeTags_7_struct === type) {
          t2 = type$.Map_String_dynamic;
          t2 = new A.AptosTypeTagStruct(A.AptosStructTag_AptosStructTag$fromStruct(A.QuickMap_asMap0(t2._as(t1.$index(0, _s5_)), _s5_, t2)), B.AptosTypeTags_7_struct);
          t1 = t2;
          break $label0$0;
        }
        if (B.AptosTypeTags_255_generic === type) {
          t1 = new A.AptosTypeTagGeneric(A.IntHelper_get_asUint32(A.QuickMap_as0(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), "index", type$.int)), B.AptosTypeTags_255_generic);
          break $label0$0;
        }
        if (B.AptosTypeTags_0_boolean === type) {
          t1 = new A.AptosTypeTagBoolean(B.AptosTypeTags_0_boolean);
          break $label0$0;
        }
        t1 = A.throwExpression(A.DartAptosPluginException$("Invalid type tag.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type._name], type$.String, type$.dynamic)));
      }
      return t1;
    },
    AptosTypeTagNumeric_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, property);
    },
    AptosTypeTagAddress_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, property);
    },
    AptosTypeTagSigner_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, property);
    },
    AptosTypeTagReference_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, property);
    },
    AptosTypeTagGeneric_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.IntegerLayout$(4, B.C_Endian0, "index", false)], type$.JSArray_Layout_dynamic), false, property);
    },
    AptosTypeTagVector_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.AptosTypeTag_layout("value")], type$.JSArray_Layout_dynamic), false, property);
    },
    AptosStructTag_AptosStructTag$fromStruct(json) {
      var t4, t5, t6,
        t1 = A.AptosAddress_AptosAddress$fromBytes(A.QuickMap_asBytes0(A.QuickMap_asMap0(json, "address", type$.Map_String_dynamic), "value", type$.List_int)),
        t2 = type$.String,
        t3 = A.QuickMap_as0(json, "moduleName", t2);
      t2 = A.QuickMap_as0(json, "name", t2);
      t4 = A.QuickMap_asListOfMap0(json, "typeArgs");
      t4.toString;
      t5 = A._arrayInstanceType(t4);
      t6 = t5._eval$1("MappedListIterable<1,AptosTypeTag>");
      t4 = A.List_List$_of(new A.MappedListIterable(t4, t5._eval$1("AptosTypeTag(1)")._as(new A.AptosStructTag_AptosStructTag$fromStruct_closure()), t6), t6._eval$1("ListIterable.E"));
      return new A.AptosStructTag(t1, t3, t2, A.List_List$unmodifiable(t4, type$.AptosTypeTag));
    },
    AptosStructTag_layout(property) {
      var t1 = type$.JSArray_Layout_dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "value")], t1), false, "address"), A.LayoutConst_bcsString("moduleName"), A.LayoutConst_bcsString("name"), A.LayoutConst_bcsVector(A.AptosTypeTag_layout(null), "typeArgs", type$.Map_String_dynamic)], t1), false, property);
    },
    AptosTypeTagStruct_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.AptosStructTag_layout("value")], type$.JSArray_Layout_dynamic), false, property);
    },
    AptosTransactionPayloads_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_Rxo, new A.AptosTransactionPayloads_fromName_closure($name), new A.AptosTransactionPayloads_fromName_closure0($name));
    },
    AptosTransactionPayload_AptosTransactionPayload$fromStruct(json) {
      var t2, _s5_ = "value",
        t1 = A.BcsVariantSerialization_toVariantDecodeResult(json).result,
        type = A.AptosTransactionPayloads_fromName(A._asString(t1.$index(0, "key")));
      $label0$0: {
        if (B.AptosTransactionPayloads_0_script === type) {
          t2 = type$.Map_String_dynamic;
          t2 = new A.AptosTransactionPayloadScript(A.AptosScript_AptosScript$fromStruct(A.QuickMap_asMap0(t2._as(t1.$index(0, _s5_)), "script", t2)), B.AptosTransactionPayloads_0_script);
          t1 = t2;
          break $label0$0;
        }
        if (B.AptosTransactionPayloads_2_entryFunction === type) {
          t2 = type$.Map_String_dynamic;
          t2 = new A.AptosTransactionPayloadEntryFunction(A.AptosTransactionEntryFunction_AptosTransactionEntryFunction$fromStruct(A.QuickMap_asMap0(t2._as(t1.$index(0, _s5_)), "entryFunction", t2)), B.AptosTransactionPayloads_2_entryFunction);
          t1 = t2;
          break $label0$0;
        }
        if (B.AptosTransactionPayloads_3_multisig === type) {
          t2 = type$.Map_String_dynamic;
          t2 = new A.AptosTransactionPayloadMultisig(A.AptosMultisig_AptosMultisig$fromStruct(A.QuickMap_asMap0(t2._as(t1.$index(0, _s5_)), "multisig", t2)), B.AptosTransactionPayloads_3_multisig);
          t1 = t2;
          break $label0$0;
        }
        t1 = A.throwExpression(A.DartAptosPluginException$("unsuported transaction payload.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type._name], type$.String, type$.dynamic)));
      }
      return t1;
    },
    AptosScript$($arguments, byteCode, typeArgs) {
      var t1;
      A.BytesUtils_validateListOfBytes(byteCode);
      t1 = A._arrayInstanceType($arguments);
      return new A.AptosScript(A.List_List$unmodifiable(byteCode, type$.int), A.List_List$unmodifiable(typeArgs, type$.AptosTypeTag), A.List_List$unmodifiable(new A.MappedListIterable($arguments, t1._eval$1("MoveArgument<@>(1)")._as(new A.AptosScript_closure()), t1._eval$1("MappedListIterable<1,MoveArgument<@>>")), type$.MoveArgument_dynamic));
    },
    AptosScript_AptosScript$fromStruct(json) {
      var t3, t4, t5,
        t1 = A.QuickMap_asBytes0(json, "byteCode", type$.List_int),
        t2 = A.QuickMap_asListOfMap0(json, "typeArgs");
      t2.toString;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,AptosTypeTag>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("AptosTypeTag(1)")._as(new A.AptosScript_AptosScript$fromStruct_closure()), t4), t4._eval$1("ListIterable.E"));
      t3 = A.QuickMap_asListOfMap0(json, "args");
      t3.toString;
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,MoveArgument<@>>");
      t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("MoveArgument<@>(1)")._as(new A.AptosScript_AptosScript$fromStruct_closure0()), t5), t5._eval$1("ListIterable.E"));
      return A.AptosScript$(t3, t1, t2);
    },
    AptosScript_layout(property) {
      var t1 = type$.Map_String_dynamic,
        t2 = type$.LazyVariantModel_dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_bcsVector(A.IntegerLayout$(1, B.C_Endian0, null, false), "byteCode", type$.int), A.LayoutConst_bcsVector(A.AptosTypeTag_layout(null), "typeArgs", t1), A.LayoutConst_bcsVector(A.LayoutConst_bcsLazyEnum(A._setArrayType([new A.LazyVariantModel(A.types0_MoveU8_layout$closure(), "u8", 0, t2), new A.LazyVariantModel(A.types0_MoveU16_layout$closure(), "u16", 6, t2), new A.LazyVariantModel(A.types0_MoveU32_layout$closure(), "u32", 7, t2), new A.LazyVariantModel(A.types0_MoveU64_layout$closure(), "u64", 1, t2), new A.LazyVariantModel(A.types0_MoveU128_layout$closure(), "u128", 2, t2), new A.LazyVariantModel(A.types0_MoveU256_layout$closure(), "u256", 8, t2), new A.LazyVariantModel(A.types0_MoveBool_layout$closure(), "boolean", 5, t2), new A.LazyVariantModel(A.types0_MoveAddress_layout$closure(), "address", 3, t2), new A.LazyVariantModel(A.types0_MoveU8Vector_layout$closure(), "u8Vector", 4, t2), new A.LazyVariantModel(A.types0_MoveSerialized_layout$closure(), "serialized", 9, t2)], type$.JSArray_LazyVariantModel_dynamic), null), "args", t1)], type$.JSArray_Layout_dynamic), false, property);
    },
    AptosTransactionPayloadScript_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.AptosScript_layout("script")], type$.JSArray_Layout_dynamic), false, property);
    },
    AptosTransactionEntryFunction_AptosTransactionEntryFunction$fromStruct(json) {
      var t3, t4, t5, t6, t7,
        t1 = type$.Map_String_dynamic,
        t2 = A.QuickMap_asMap0(json, "moduleId", t1);
      t1 = A.AptosAddress_AptosAddress$fromBytes(A.QuickMap_asBytes0(A.QuickMap_asMap0(t2, "address", t1), "value", type$.List_int));
      t3 = type$.String;
      t2 = A.AptosTransactionUtils_validateIdentifier(A.QuickMap_as0(t2, "name", t3));
      t3 = A.QuickMap_as0(json, "functionName", t3);
      t4 = A.QuickMap_asListOfMap0(json, "typeArgs");
      t4.toString;
      t5 = A._arrayInstanceType(t4);
      t6 = t5._eval$1("MappedListIterable<1,AptosTypeTag>");
      t4 = A.List_List$_of(new A.MappedListIterable(t4, t5._eval$1("AptosTypeTag(1)")._as(new A.AptosTransactionEntryFunction_AptosTransactionEntryFunction$fromStruct_closure()), t6), t6._eval$1("ListIterable.E"));
      t5 = A.QuickMap_asListOfBytes(json, "args");
      t5.toString;
      t6 = A._arrayInstanceType(t5);
      t7 = t6._eval$1("MappedListIterable<1,AptosTransactionArgumentBytes>");
      t5 = A.List_List$_of(new A.MappedListIterable(t5, t6._eval$1("AptosTransactionArgumentBytes(1)")._as(new A.AptosTransactionEntryFunction_AptosTransactionEntryFunction$fromStruct_closure0()), t7), t7._eval$1("ListIterable.E"));
      t4 = A.List_List$unmodifiable(t4, type$.AptosTypeTag);
      t5 = A.List_List$unmodifiable(t5, type$.AptosEntryFunctionArguments_dynamic);
      return new A.AptosTransactionEntryFunction(new A.AptosModuleId(t1, t2), A.AptosTransactionUtils_validateIdentifier(t3), t4, t5);
    },
    AptosTransactionEntryFunction_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.AptosModuleId_layout("moduleId"), A.LayoutConst_bcsString("functionName"), A.LayoutConst_bcsVector(A.AptosTypeTag_layout(null), "typeArgs", type$.Map_String_dynamic), A.LayoutConst_bcsVector(A.LayoutConst_bcsVector(A.IntegerLayout$(1, B.C_Endian0, null, false), null, type$.int), "args", type$.List_int)], type$.JSArray_Layout_dynamic), false, property);
    },
    AptosTransactionPayloadEntryFunction_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.AptosTransactionEntryFunction_layout("entryFunction")], type$.JSArray_Layout_dynamic), false, property);
    },
    AptosMultisigTransactionPayloads_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_yMU, new A.AptosMultisigTransactionPayloads_fromName_closure($name), new A.AptosMultisigTransactionPayloads_fromName_closure0($name));
    },
    AptosMultisigTransactionPayload_AptosMultisigTransactionPayload$fromStruct(json) {
      var t2,
        t1 = A.BcsVariantSerialization_toVariantDecodeResult(json).result;
      switch (A.AptosMultisigTransactionPayloads_fromName(A._asString(t1.$index(0, "key")))) {
        case B.AptosMultisigTransactionPayloads_entryFunction:
          t2 = type$.Map_String_dynamic;
          t2 = new A.AptosMultisigTransactionPayloadEntryFunction(A.AptosTransactionEntryFunction_AptosTransactionEntryFunction$fromStruct(A.QuickMap_asMap0(t2._as(t1.$index(0, "value")), "entryFunction", t2)), B.AptosMultisigTransactionPayloads_entryFunction);
          t1 = t2;
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    AptosMultisigTransactionPayloadEntryFunction_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.AptosTransactionEntryFunction_layout("entryFunction")], type$.JSArray_Layout_dynamic), false, property);
    },
    AptosMultisig_AptosMultisig$fromStruct(json) {
      var t1 = type$.Map_String_dynamic;
      return new A.AptosMultisig(A.AptosAddress_AptosAddress$fromBytes(A.QuickMap_asBytes0(A.QuickMap_asMap0(json, "multisigAddress", t1), "value", type$.List_int)), A.QuickMap_mybeAs(json, "transactionPayload", new A.AptosMultisig_AptosMultisig$fromStruct_closure(), type$.AptosMultisigTransactionPayload, t1));
    },
    AptosMultisig_layout(property) {
      var t1 = type$.JSArray_Layout_dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "value")], t1), false, "multisigAddress"), A.LayoutConst_optional(A.LayoutConst_bcsLazyEnum(A._setArrayType([new A.LazyVariantModel(A.types_AptosMultisigTransactionPayloadEntryFunction_layout$closure(), "entryFunction", 0, type$.LazyVariantModel_dynamic)], type$.JSArray_LazyVariantModel_dynamic), null), "transactionPayload")], t1), false, property);
    },
    AptosTransactionPayloadMultisig_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.AptosMultisig_layout("multisig")], type$.JSArray_Layout_dynamic), false, property);
    },
    AptosRawTransaction_AptosRawTransaction$fromStruct(json) {
      var t5, t6, t7,
        t1 = type$.Map_String_dynamic,
        t2 = A.AptosAddress_AptosAddress$fromBytes(A.QuickMap_asBytes0(A.QuickMap_asMap0(json, "sender", t1), "value", type$.List_int)),
        t3 = type$.BigInt,
        t4 = A.QuickMap_as0(json, "sequenceNumber", t3);
      t1 = A.AptosTransactionPayload_AptosTransactionPayload$fromStruct(A.QuickMap_asMap0(json, "transactionPayload", t1));
      t5 = A.QuickMap_as0(json, "maxGasAmount", t3);
      t6 = A.QuickMap_as0(json, "gasUnitPrice", t3);
      t3 = A.QuickMap_as0(json, "expirationTimestampSecs", t3);
      t7 = A.QuickMap_as0(json, "chainId", type$.int);
      return new A.AptosRawTransaction(t2, A.BigIntHelper_get_asUint64(t4), t1, A.BigIntHelper_get_asUint64(t5), A.BigIntHelper_get_asUint64(t6), A.BigIntHelper_get_asUint64(t3), A.IntHelper_get_asUint8(t7));
    },
    AptosRawTransaction_layout(property) {
      var t1 = type$.JSArray_Layout_dynamic,
        t2 = type$.LazyVariantModel_dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "value")], t1), false, "sender"), new A.BigIntLayout(false, B.C_Endian0, 8, "sequenceNumber"), A.LayoutConst_bcsLazyEnum(A._setArrayType([new A.LazyVariantModel(A.types_AptosTransactionPayloadScript_layout$closure(), "script", 0, t2), new A.LazyVariantModel(A.types_AptosTransactionPayloadEntryFunction_layout$closure(), "entryFunction", 2, t2), new A.LazyVariantModel(A.types_AptosTransactionPayloadMultisig_layout$closure(), "multisig", 3, t2)], type$.JSArray_LazyVariantModel_dynamic), "transactionPayload"), new A.BigIntLayout(false, B.C_Endian0, 8, "maxGasAmount"), new A.BigIntLayout(false, B.C_Endian0, 8, "gasUnitPrice"), new A.BigIntLayout(false, B.C_Endian0, 8, "expirationTimestampSecs"), A.IntegerLayout$(1, B.C_Endian0, "chainId", false)], t1), false, property);
    },
    AptosMultiAgentTransaction_AptosMultiAgentTransaction$fromStruct(json) {
      var t4, t5,
        t1 = type$.Map_String_dynamic,
        t2 = A.AptosRawTransaction_AptosRawTransaction$fromStruct(A.QuickMap_asMap0(json, "rawTransaction", t1)),
        t3 = A.QuickMap_asListOfMap0(json, "secondarySignerAddresses");
      t3.toString;
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,AptosAddress>");
      t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("AptosAddress(1)")._as(new A.AptosMultiAgentTransaction_AptosMultiAgentTransaction$fromStruct_closure()), t5), t5._eval$1("ListIterable.E"));
      t4 = type$.AptosAddress;
      t1 = A.QuickMap_mybeAs(json, "feePayerAddress", new A.AptosMultiAgentTransaction_AptosMultiAgentTransaction$fromStruct_closure0(), t4, t1);
      return new A.AptosMultiAgentTransaction(t2, A.List_List$unmodifiable(t3, t4), t1);
    },
    AptosMultiAgentTransaction_layout(property) {
      var t1 = type$.JSArray_Layout_dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.AptosRawTransaction_layout("rawTransaction"), A.LayoutConst_bcsVector(A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "value")], t1), false, null), "secondarySignerAddresses", type$.Map_String_dynamic), A.LayoutConst_optional(A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "value")], t1), false, null), "feePayerAddress")], t1), false, property);
    },
    AptosSimpleTransaction_AptosSimpleTransaction$fromStruct(json) {
      var t1 = type$.Map_String_dynamic;
      return new A.AptosSimpleTransaction(A.AptosRawTransaction_AptosRawTransaction$fromStruct(A.QuickMap_asMap0(json, "rawTransaction", t1)), A.QuickMap_mybeAs(json, "feePayerAddress", new A.AptosSimpleTransaction_AptosSimpleTransaction$fromStruct_closure(), type$.AptosAddress, t1));
    },
    AptosSimpleTransaction_layout(property) {
      var t1 = type$.JSArray_Layout_dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.AptosRawTransaction_layout("rawTransaction"), A.LayoutConst_optional(A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "value")], t1), false, null), "feePayerAddress")], t1), false, property);
    },
    AptosModuleId: function AptosModuleId(t0, t1) {
      this.address = t0;
      this.name = t1;
    },
    AptosTypeTags: function AptosTypeTags(t0, t1) {
      this.value = t0;
      this._name = t1;
    },
    AptosTypeTags_fromName_closure: function AptosTypeTags_fromName_closure(t0) {
      this.name = t0;
    },
    AptosTypeTags_fromName_closure0: function AptosTypeTags_fromName_closure0(t0) {
      this.name = t0;
    },
    AptosTypeTag: function AptosTypeTag() {
    },
    AptosTypeTagNumeric: function AptosTypeTagNumeric(t0) {
      this.type = t0;
    },
    AptosTypeTagBoolean: function AptosTypeTagBoolean(t0) {
      this.type = t0;
    },
    AptosTypeTagAddress: function AptosTypeTagAddress(t0) {
      this.type = t0;
    },
    AptosTypeTagSigner: function AptosTypeTagSigner(t0) {
      this.type = t0;
    },
    AptosTypeTagGeneric: function AptosTypeTagGeneric(t0, t1) {
      this.index = t0;
      this.type = t1;
    },
    AptosTypeTagVector: function AptosTypeTagVector(t0, t1) {
      this.value = t0;
      this.type = t1;
    },
    AptosStructTag: function AptosStructTag(t0, t1, t2, t3) {
      var _ = this;
      _.address = t0;
      _.moduleName = t1;
      _.name = t2;
      _.typeArgs = t3;
    },
    AptosStructTag_AptosStructTag$fromStruct_closure: function AptosStructTag_AptosStructTag$fromStruct_closure() {
    },
    AptosStructTag_toLayoutStruct_closure: function AptosStructTag_toLayoutStruct_closure() {
    },
    AptosTypeTagStruct: function AptosTypeTagStruct(t0, t1) {
      this.value = t0;
      this.type = t1;
    },
    AptosTransactionPayloads: function AptosTransactionPayloads(t0, t1) {
      this.value = t0;
      this._name = t1;
    },
    AptosTransactionPayloads_fromName_closure: function AptosTransactionPayloads_fromName_closure(t0) {
      this.name = t0;
    },
    AptosTransactionPayloads_fromName_closure0: function AptosTransactionPayloads_fromName_closure0(t0) {
      this.name = t0;
    },
    AptosTransactionPayload: function AptosTransactionPayload() {
    },
    AptosScript: function AptosScript(t0, t1, t2) {
      this.byteCode = t0;
      this.typeArgs = t1;
      this.$arguments = t2;
    },
    AptosScript_closure: function AptosScript_closure() {
    },
    AptosScript_AptosScript$fromStruct_closure: function AptosScript_AptosScript$fromStruct_closure() {
    },
    AptosScript_AptosScript$fromStruct_closure0: function AptosScript_AptosScript$fromStruct_closure0() {
    },
    AptosScript_toLayoutStruct_closure: function AptosScript_toLayoutStruct_closure() {
    },
    AptosScript_toLayoutStruct_closure0: function AptosScript_toLayoutStruct_closure0() {
    },
    AptosTransactionPayloadScript: function AptosTransactionPayloadScript(t0, t1) {
      this.script = t0;
      this.type = t1;
    },
    AptosTransactionArgumentBytes: function AptosTransactionArgumentBytes(t0) {
      this.value = t0;
    },
    AptosTransactionEntryFunction: function AptosTransactionEntryFunction(t0, t1, t2, t3) {
      var _ = this;
      _.moduleId = t0;
      _.functionName = t1;
      _.typeArgs = t2;
      _.args = t3;
    },
    AptosTransactionEntryFunction_AptosTransactionEntryFunction$fromStruct_closure: function AptosTransactionEntryFunction_AptosTransactionEntryFunction$fromStruct_closure() {
    },
    AptosTransactionEntryFunction_AptosTransactionEntryFunction$fromStruct_closure0: function AptosTransactionEntryFunction_AptosTransactionEntryFunction$fromStruct_closure0() {
    },
    AptosTransactionEntryFunction_toLayoutStruct_closure: function AptosTransactionEntryFunction_toLayoutStruct_closure() {
    },
    AptosTransactionEntryFunction_toLayoutStruct_closure0: function AptosTransactionEntryFunction_toLayoutStruct_closure0() {
    },
    AptosTransactionPayloadEntryFunction: function AptosTransactionPayloadEntryFunction(t0, t1) {
      this.entryFunction = t0;
      this.type = t1;
    },
    AptosMultisigTransactionPayloads: function AptosMultisigTransactionPayloads(t0) {
      this._name = t0;
    },
    AptosMultisigTransactionPayloads_fromName_closure: function AptosMultisigTransactionPayloads_fromName_closure(t0) {
      this.name = t0;
    },
    AptosMultisigTransactionPayloads_fromName_closure0: function AptosMultisigTransactionPayloads_fromName_closure0(t0) {
      this.name = t0;
    },
    AptosMultisigTransactionPayload: function AptosMultisigTransactionPayload() {
    },
    AptosMultisigTransactionPayloadEntryFunction: function AptosMultisigTransactionPayloadEntryFunction(t0, t1) {
      this.entryFunction = t0;
      this.type = t1;
    },
    AptosMultisig: function AptosMultisig(t0, t1) {
      this.multisigAddress = t0;
      this.transactionPayload = t1;
    },
    AptosMultisig_AptosMultisig$fromStruct_closure: function AptosMultisig_AptosMultisig$fromStruct_closure() {
    },
    AptosTransactionPayloadMultisig: function AptosTransactionPayloadMultisig(t0, t1) {
      this.multisig = t0;
      this.type = t1;
    },
    AptosRawTransaction: function AptosRawTransaction(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.sender = t0;
      _.sequenceNumber = t1;
      _.transactionPayload = t2;
      _.maxGasAmount = t3;
      _.gasUnitPrice = t4;
      _.expirationTimestampSecs = t5;
      _.chainId = t6;
    },
    AptosAnyTransaction: function AptosAnyTransaction() {
    },
    AptosMultiAgentTransaction: function AptosMultiAgentTransaction(t0, t1, t2) {
      this.rawTransaction = t0;
      this.secondarySignerAddresses = t1;
      this.feePayerAddress = t2;
    },
    AptosMultiAgentTransaction_AptosMultiAgentTransaction$fromStruct_closure: function AptosMultiAgentTransaction_AptosMultiAgentTransaction$fromStruct_closure() {
    },
    AptosMultiAgentTransaction_AptosMultiAgentTransaction$fromStruct_closure0: function AptosMultiAgentTransaction_AptosMultiAgentTransaction$fromStruct_closure0() {
    },
    AptosMultiAgentTransaction_toLayoutStruct_closure: function AptosMultiAgentTransaction_toLayoutStruct_closure() {
    },
    AptosSimpleTransaction: function AptosSimpleTransaction(t0, t1) {
      this.rawTransaction = t0;
      this.feePayerAddress = t1;
    },
    AptosSimpleTransaction_AptosSimpleTransaction$fromStruct_closure: function AptosSimpleTransaction_AptosSimpleTransaction$fromStruct_closure() {
    },
    BcsSerializationException$(message, details) {
      return new A.BcsSerializationException(message, details);
    },
    BcsSerializationException: function BcsSerializationException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    MoveArgumentType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_zxt, new A.MoveArgumentType_fromName_closure($name), new A.MoveArgumentType_fromName_closure0($name));
    },
    MoveArgument_MoveArgument$fromStruct(json, $T) {
      var _s5_ = "value",
        t1 = A.BcsVariantSerialization_toVariantDecodeResult(json).result;
      switch (A.MoveArgumentType_fromName(A._asString(t1.$index(0, "key")))) {
        case B.MoveArgumentType_0_u8:
          t1 = new A.MoveU8(A.MoveUtils_parseU8(A.QuickMap_as0(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), _s5_, type$.int)), B.MoveArgumentType_0_u8);
          break;
        case B.MoveArgumentType_6_u16:
          t1 = new A.MoveU16(A.MoveUtils_parseU16(A.QuickMap_as0(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), _s5_, type$.int)), B.MoveArgumentType_6_u16);
          break;
        case B.MoveArgumentType_7_u32:
          t1 = new A.MoveU32(A.MoveUtils_parseU32(A.QuickMap_as0(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), _s5_, type$.int)), B.MoveArgumentType_7_u32);
          break;
        case B.MoveArgumentType_1_u64:
          t1 = new A.MoveU64(A.MoveUtils_parseU64(A.QuickMap_as0(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), _s5_, type$.BigInt)), B.MoveArgumentType_1_u64);
          break;
        case B.MoveArgumentType_2_u128:
          t1 = new A.MoveU128(A.MoveUtils_parseU128(A.QuickMap_as0(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), _s5_, type$.BigInt)), B.MoveArgumentType_2_u128);
          break;
        case B.MoveArgumentType_8_u256:
          t1 = new A.MoveU256(A.MoveUtils_parseU256(A.QuickMap_as0(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), _s5_, type$.BigInt)), B.MoveArgumentType_8_u256);
          break;
        case B.MoveArgumentType_3_address:
          t1 = A.MoveUtils_parseAddressBytes(A.QuickMap_asBytes0(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), _s5_, type$.List_int));
          A.BytesUtils_validateListOfBytes(t1);
          t1 = new A.MoveAddress(A.List_List$unmodifiable(t1, type$.int), B.MoveArgumentType_3_address);
          break;
        case B.MoveArgumentType_5_boolean:
          t1 = new A.MoveBool(A.QuickMap_as0(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), _s5_, type$.bool), B.MoveArgumentType_5_boolean);
          break;
        case B.MoveArgumentType_4_u8Vector:
          t1 = A.QuickMap_asBytes0(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), _s5_, type$.List_int);
          A.BytesUtils_validateListOfBytes(t1);
          t1 = new A.MoveU8Vector(A.List_List$unmodifiable(t1, type$.int), B.MoveArgumentType_4_u8Vector);
          break;
        case B.MoveArgumentType_9_serialized:
          t1 = A.QuickMap_asBytes0(type$.Map_String_dynamic._as(t1.$index(0, _s5_)), _s5_, type$.List_int);
          A.BytesUtils_validateListOfBytes(t1);
          t1 = new A.MoveSerialized(A.List_List$unmodifiable(t1, type$.int), B.MoveArgumentType_9_serialized);
          break;
        default:
          t1 = null;
      }
      if (!$T._eval$1("MoveArgument<0>")._is(t1))
        throw A.wrapException(A.BcsSerializationException$("Invalid argument. expected: " + A.createRuntimeType($T).toString$0(0) + ", got: " + A.getRuntimeTypeOfDartObject(t1).toString$0(0), null));
      return t1;
    },
    MoveU8_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.IntegerLayout$(1, B.C_Endian0, "value", false)], type$.JSArray_Layout_dynamic), false, property);
    },
    MoveU16_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.IntegerLayout$(2, B.C_Endian0, "value", false)], type$.JSArray_Layout_dynamic), false, property);
    },
    MoveU32_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.IntegerLayout$(4, B.C_Endian0, "value", false)], type$.JSArray_Layout_dynamic), false, property);
    },
    MoveU64_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([new A.BigIntLayout(false, B.C_Endian0, 8, "value")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoveU128_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([new A.BigIntLayout(false, B.C_Endian0, 16, "value")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoveU256_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([new A.BigIntLayout(false, B.C_Endian0, 32, "value")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoveBool_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_boolean("value")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoveAddress_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "value")], type$.JSArray_Layout_dynamic), false, property);
    },
    MoveU8Vector_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_bcsVector(A.IntegerLayout$(1, B.C_Endian0, null, false), "value", type$.int)], type$.JSArray_Layout_dynamic), false, property);
    },
    MoveSerialized_layout(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_bcsVector(A.IntegerLayout$(1, B.C_Endian0, null, false), "value", type$.int)], type$.JSArray_Layout_dynamic), false, property);
    },
    MoveArgumentType: function MoveArgumentType(t0, t1) {
      this.value = t0;
      this._name = t1;
    },
    MoveArgumentType_fromName_closure: function MoveArgumentType_fromName_closure(t0) {
      this.name = t0;
    },
    MoveArgumentType_fromName_closure0: function MoveArgumentType_fromName_closure0(t0) {
      this.name = t0;
    },
    MoveType: function MoveType() {
    },
    AptosEntryFunctionArguments: function AptosEntryFunctionArguments() {
    },
    MoveArgument: function MoveArgument() {
    },
    MoveU8: function MoveU8(t0, t1) {
      this.value = t0;
      this.argumentType = t1;
    },
    MoveU16: function MoveU16(t0, t1) {
      this.value = t0;
      this.argumentType = t1;
    },
    MoveU32: function MoveU32(t0, t1) {
      this.value = t0;
      this.argumentType = t1;
    },
    MoveU64: function MoveU64(t0, t1) {
      this.value = t0;
      this.argumentType = t1;
    },
    MoveU128: function MoveU128(t0, t1) {
      this.value = t0;
      this.argumentType = t1;
    },
    MoveU256: function MoveU256(t0, t1) {
      this.value = t0;
      this.argumentType = t1;
    },
    MoveBool: function MoveBool(t0, t1) {
      this.value = t0;
      this.argumentType = t1;
    },
    MoveAddress: function MoveAddress(t0, t1) {
      this.value = t0;
      this.argumentType = t1;
    },
    MoveU8Vector: function MoveU8Vector(t0, t1) {
      this.value = t0;
      this.argumentType = t1;
    },
    MoveSerialized: function MoveSerialized(t0, t1) {
      this.value = t0;
      this.argumentType = t1;
    },
    BcsSerialization_deserialize(bytes, layout) {
      return layout.deserialize$1(bytes).value;
    },
    BcsSerialization_toReadableObject(val) {
      var newMap, t1;
      if (type$.Map_dynamic_dynamic._is(val)) {
        newMap = val.map$2$1(0, new A.BcsSerialization_toReadableObject_closure(), type$.dynamic, type$.nullable_Object);
        newMap.removeWhere$1(0, new A.BcsSerialization_toReadableObject_closure0());
        return newMap;
      }
      if (typeof val == "string" || A._isInt(val))
        return val;
      if (val instanceof A._BigIntImpl)
        return val.toString$0(0);
      if (type$.List_int._is(val)) {
        t1 = A.BytesUtils_tryToHexString(val, "0x");
        return t1 == null ? val : t1;
      }
      if (type$.List_dynamic._is(val)) {
        t1 = J.map$1$1$ax(val, A.serialization_BcsSerialization_toReadableObject$closure(), type$.nullable_Object);
        t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
        return t1;
      }
      return J.toString$0$(val);
    },
    BcsVariantSerialization_toVariantDecodeResult(json) {
      if (typeof json.$index(0, "key") != "string" || !json.containsKey$1("value"))
        throw A.wrapException(B.BcsSerializationException_kOf);
      return new A.BcsVariantDecodeResult(A.ConstantMap_ConstantMap$from(json, type$.String, type$.dynamic));
    },
    BcsSerialization: function BcsSerialization() {
    },
    BcsSerialization_toReadableObject_closure: function BcsSerialization_toReadableObject_closure() {
    },
    BcsSerialization_toReadableObject_closure0: function BcsSerialization_toReadableObject_closure0() {
    },
    BcsVariantDecodeResult: function BcsVariantDecodeResult(t0) {
      this.result = t0;
    },
    BcsVariantSerialization: function BcsVariantSerialization() {
    },
    ETHAddress_ETHAddress(address) {
      var t1, exception,
        skipChecksum = true;
      try {
        new A.EthAddrDecoder().decodeAddr$2(address, A.LinkedHashMap_LinkedHashMap$_literal(["skip_chksum_enc", skipChecksum], type$.String, type$.dynamic));
        t1 = A.EthAddrUtils_toChecksumAddress(address);
        return new A.ETHAddress(t1, t1);
      } catch (exception) {
        t1 = A.LinkedHashMap_LinkedHashMap$_literal(["input", address], type$.String, type$.dynamic);
        throw A.wrapException(new A.ETHPluginException("invalid ethereum address", t1));
      }
    },
    ETHAddress: function ETHAddress(t0, t1) {
      this.address = t0;
      this._hexAddress = t1;
    },
    EIP4631Exception$(message) {
      return new A.EIP4631Exception(message, null);
    },
    EIP4631Exception: function EIP4631Exception(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    EIP4631_EIP4631(address, chainId, domain, expirationTime, issuedAt, nonce, notBefore, requestId, resources, statement, uri, version) {
      var parse, t1, _i,
        _s28_ = '". Unable to parse the date.';
      if (version != null && version !== "1")
        throw A.wrapException(A.EIP4631Exception$('Invalid version. The "version" field must be exactly "1".'));
      if (A.Uri_tryParse(domain) == null)
        throw A.wrapException(A.EIP4631Exception$('Invalid Domain. The "Domain" must follow the format specified by RFC 3986.'));
      if (uri != null) {
        parse = A.Uri_tryParse(uri);
        if (parse == null || !parse.get$isAbsolute())
          throw A.wrapException(A.EIP4631Exception$('Invalid URI. The "uri" must follow the format specified by RFC 3986.'));
      }
      if (expirationTime != null)
        if (A.DateTime_tryParse(expirationTime) == null)
          throw A.wrapException(A.EIP4631Exception$('Invalid expirationTime: "' + expirationTime + _s28_));
      if (notBefore != null)
        if (A.DateTime_tryParse(notBefore) == null)
          throw A.wrapException(A.EIP4631Exception$('Invalid notBefore: "' + notBefore + _s28_));
      if (issuedAt != null)
        if (A.DateTime_tryParse(issuedAt) == null)
          throw A.wrapException(A.EIP4631Exception$('Invalid issuedAt: "' + issuedAt + _s28_));
      if (resources != null)
        for (t1 = resources.length, _i = 0; _i < resources.length; resources.length === t1 || (0, A.throwConcurrentModificationError)(resources), ++_i) {
          parse = A.Uri_tryParse(resources[_i]);
          if (parse == null || !parse.get$isAbsolute())
            throw A.wrapException(A.EIP4631Exception$('Invalid resource. The "resource" must follow the format specified by RFC 3986.'));
        }
      return new A.EIP4631(domain, address, statement, uri, version, chainId, nonce, issuedAt, expirationTime, notBefore, requestId, resources);
    },
    EIP4631: function EIP4631(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.domain = t0;
      _.address = t1;
      _.statement = t2;
      _.uri = t3;
      _.version = t4;
      _.chainId = t5;
      _.nonce = t6;
      _.issuedAt = t7;
      _.expirationTime = t8;
      _.notBefore = t9;
      _.requestId = t10;
      _.resources = t11;
    },
    ETHPluginException: function ETHPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    EthereumRequestDetails: function EthereumRequestDetails(t0, t1, t2, t3, t4) {
      var _ = this;
      _.method = t0;
      _.jsonBody = t1;
      _.headers = t2;
      _.type = t3;
      _.requestID = t4;
    },
    EthereumRequest: function EthereumRequest() {
    },
    EthereumRequest_buildRequest_closure: function EthereumRequest_buildRequest_closure() {
    },
    EthereumRequest_buildRequest_closure0: function EthereumRequest_buildRequest_closure0() {
    },
    EthereumMethods_fromName($name) {
      var t1, exception;
      try {
        t1 = B.JSArray_methods.firstWhere$1(B.List_azr, new A.EthereumMethods_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    EthereumMethods: function EthereumMethods(t0) {
      this.value = t0;
    },
    EthereumMethods_fromName_closure: function EthereumMethods_fromName_closure(t0) {
      this.name = t0;
    },
    EthereumRequestDynamic: function EthereumRequestDynamic(t0, t1, t2) {
      this.methodName = t0;
      this.params = t1;
      this.$ti = t2;
    },
    EthereumProvider: function EthereumProvider(t0) {
      this.rpc = t0;
      this._provider$_id = 0;
    },
    ETHTransactionType_fromPrefix(prefix) {
      return B.JSArray_methods.firstWhere$1(B.List_JMn, new A.ETHTransactionType_fromPrefix_closure(prefix));
    },
    ETHTransactionType: function ETHTransactionType(t0) {
      this.prefix = t0;
    },
    ETHTransactionType_fromPrefix_closure: function ETHTransactionType_fromPrefix_closure(t0) {
      this.prefix = t0;
    },
    SolAddress_SolAddress$uncheckBytes(keyBytes) {
      if (keyBytes.length !== 32)
        throw A.wrapException(B.SolanaPluginException_hVv);
      return new A.SolAddress(A.Base58Encoder_encode(keyBytes, B.Base58Alphabets_0));
    },
    SolAddress: function SolAddress(t0) {
      this.address = t0;
    },
    SolanaPluginException: function SolanaPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    AddressTableLookup: function AddressTableLookup(t0, t1, t2) {
      this.accountKey = t0;
      this.writableIndexes = t1;
      this.readonlyIndexes = t2;
    },
    CompiledInstruction: function CompiledInstruction(t0, t1, t2) {
      this.programIdIndex = t0;
      this.accounts = t1;
      this.data = t2;
    },
    Commitment: function Commitment(t0) {
      this.value = t0;
    },
    Message: function Message() {
    },
    MessageV0: function MessageV0() {
    },
    EIP712Version_fromVersion(version) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_jky, new A.EIP712Version_fromVersion_closure(version), new A.EIP712Version_fromVersion_closure0(version));
    },
    EIP712Base_EIP712Base$fromJson(json) {
      var version = A.EIP712Version_fromVersion(A._asIntQ(json.$index(0, "version")));
      switch (version) {
        case B.EIP712Version_1:
          return A.EIP712Legacy_EIP712Legacy$fromJson(type$.List_dynamic._as(json.$index(0, "types")));
        default:
          return A.Eip712TypedData_Eip712TypedData$fromJson(json, version);
      }
    },
    Eip712TypedData_Eip712TypedData$fromJson(json, version) {
      var jsonTypes, types, i, values, eip712Types, t1, t2, t3, eip712Types0, exception;
      try {
        t1 = type$.String;
        jsonTypes = A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(json.$index(0, "types")), t1, type$.List_dynamic);
        types = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List_Eip712TypeDetails);
        for (t1 = jsonTypes, t1 = new A.LinkedHashMapEntriesIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapEntriesIterable<1,2>")).get$iterator(0), t2 = type$.Eip712TypeDetails; t1.moveNext$0();) {
          t3 = t1.__js_helper$_current;
          t3.toString;
          i = t3;
          values = i.value;
          t3 = J.map$1$1$ax(values, new A.Eip712TypedData_Eip712TypedData$fromJson_closure(), t2);
          eip712Types0 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
          eip712Types = eip712Types0;
          J.$indexSet$ax(types, i.key, eip712Types);
        }
        t1 = A._asString(json.$index(0, "primaryType"));
        t2 = type$.Map_String_dynamic;
        t3 = t2._as(json.$index(0, "domain"));
        t2 = t2._as(json.$index(0, "message"));
        return new A.Eip712TypedData(types, t1, t3, t2, version);
      } catch (exception) {
        throw A.wrapException(B.SolidityAbiException_NJ0);
      }
    },
    EIP712Legacy_EIP712Legacy$fromJson(messages) {
      var t1 = J.map$1$1$ax(messages, new A.EIP712Legacy_EIP712Legacy$fromJson_closure(), type$.Eip712TypedDataV1);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return new A.EIP712Legacy(t1);
    },
    _EIP712Utils_ensureBytes(type, value) {
      if (!B.JSString_methods.startsWith$1(type, "bytes"))
        throw A.wrapException(B.SolidityAbiException_jNe);
      if (typeof value != "string" && !type$.List_int._is(value))
        throw A.wrapException(B.SolidityAbiException_jNe);
      if (type$.List_int._is(value))
        return A.BytesUtils_toBytes(value, false);
      return A.StringUtils_toBytes(A._asString(value));
    },
    _EIP712Utils_ensureCorrectValues(type, value) {
      var childType, t2,
        match = $.$get$_EIP712Utils_arrayRegex().firstMatch$1(type),
        t1 = match == null;
      if (t1)
        childType = null;
      else {
        t2 = match._match;
        if (1 >= t2.length)
          return A.ioore(t2, 1);
        childType = t2[1];
      }
      if (!t1) {
        if (!type$.List_dynamic._is(value))
          throw A.wrapException(A.SolidityAbiException$("Invalid data provided for array codec.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type, "value", value], type$.String, type$.dynamic)));
        t1 = J.map$1$1$ax(value, new A._EIP712Utils_ensureCorrectValues_closure(childType), type$.dynamic);
        t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
        return t1;
      }
      if (B.JSString_methods.startsWith$1(type, "uint") || B.JSString_methods.startsWith$1(type, "int"))
        return A.BigintUtils_parse(value, true);
      switch (type) {
        case "address":
          return A._EIP712Utils_ensureIsAddress(value);
        case "bool":
          if (!A._isBool(value))
            A.throwExpression(A.SolidityAbiException$("Invalid data provided for boolean codec.", A.LinkedHashMap_LinkedHashMap$_literal(["input", value], type$.String, type$.dynamic)));
          return value;
        case "string":
          if (typeof value != "string")
            A.throwExpression(A.SolidityAbiException$("invalid data provided for string codec.", A.LinkedHashMap_LinkedHashMap$_literal(["input", value], type$.String, type$.dynamic)));
          return value;
        default:
          if (B.JSString_methods.startsWith$1(type, "bytes"))
            return A._EIP712Utils_ensureBytes(type, value);
          throw A.wrapException(A.SolidityAbiException$("Unsuported type. codec not found.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type], type$.String, type$.dynamic)));
      }
    },
    _EIP712Utils_eip712TypedDataV1ValueToJson(type, value) {
      var childType, t2,
        match = $.$get$_EIP712Utils_arrayRegex().firstMatch$1(type),
        t1 = match == null;
      if (t1)
        childType = null;
      else {
        t2 = match._match;
        if (1 >= t2.length)
          return A.ioore(t2, 1);
        childType = t2[1];
      }
      if (!t1) {
        if (!type$.List_dynamic._is(value))
          throw A.wrapException(A.SolidityAbiException$("Invalid data provided for array codec.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type, "value", value], type$.String, type$.dynamic)));
        t1 = J.map$1$1$ax(value, new A._EIP712Utils_eip712TypedDataV1ValueToJson_closure(childType), type$.dynamic);
        t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
        return t1;
      }
      if (B.JSString_methods.startsWith$1(type, "uint") || B.JSString_methods.startsWith$1(type, "int"))
        return J.toString$0$(value);
      switch (type) {
        case "address":
          if (typeof value == "string")
            return value;
          if (value instanceof A.SolidityAddress)
            return value._hexAddress;
          break;
        case "bool":
        case "string":
          return value;
        default:
          return A.BytesUtils_toHexString(type$.List_int._as(value), true, "0x");
      }
    },
    _EIP712Utils_ensureIsAddress(value) {
      var t1, exception;
      try {
        if (value instanceof A.SolidityAddress)
          return value;
        if (type$.List_int._is(value)) {
          t1 = A.SolidityAddress_SolidityAddress(A.BytesUtils_toHexString(value, true, null));
          return t1;
        } else if (typeof value == "string") {
          t1 = $.$get$StringUtils__hexBytesRegex();
          if (t1._nativeRegExp.test(value)) {
            t1 = A.SolidityAddress_SolidityAddress(value);
            return t1;
          }
          t1 = A.TronAddress_TronAddress(value);
          return t1;
        }
      } catch (exception) {
      }
      throw A.wrapException(A.SolidityAbiException$("Invalid data provided for address codec.", A.LinkedHashMap_LinkedHashMap$_literal(["input", value], type$.String, type$.dynamic)));
    },
    SolidityAbiException$(message, details) {
      return new A.SolidityAbiException(message, details);
    },
    EIP712Version: function EIP712Version(t0) {
      this.version = t0;
    },
    EIP712Version_fromVersion_closure: function EIP712Version_fromVersion_closure(t0) {
      this.version = t0;
    },
    EIP712Version_fromVersion_closure0: function EIP712Version_fromVersion_closure0(t0) {
      this.version = t0;
    },
    EIP712Version_fromVersion__closure: function EIP712Version_fromVersion__closure() {
    },
    Eip712TypeDetails: function Eip712TypeDetails(t0, t1) {
      this.name = t0;
      this.type = t1;
    },
    Eip712TypedData: function Eip712TypedData(t0, t1, t2, t3, t4) {
      var _ = this;
      _.types = t0;
      _.primaryType = t1;
      _.domain = t2;
      _.message = t3;
      _.version = t4;
    },
    Eip712TypedData_Eip712TypedData$fromJson_closure: function Eip712TypedData_Eip712TypedData$fromJson_closure() {
    },
    Eip712TypedData_toJson_closure: function Eip712TypedData_toJson_closure() {
    },
    Eip712TypedData_toJson__closure: function Eip712TypedData_toJson__closure() {
    },
    Eip712TypedDataV1: function Eip712TypedDataV1(t0, t1, t2) {
      this.name = t0;
      this.type = t1;
      this.value = t2;
    },
    EIP712Legacy: function EIP712Legacy(t0) {
      this.typesData = t0;
    },
    EIP712Legacy_EIP712Legacy$fromJson_closure: function EIP712Legacy_EIP712Legacy$fromJson_closure() {
    },
    EIP712Legacy_toJson_closure: function EIP712Legacy_toJson_closure() {
    },
    _EIP712Utils_ensureCorrectValues_closure: function _EIP712Utils_ensureCorrectValues_closure(t0) {
      this.childType = t0;
    },
    _EIP712Utils_eip712TypedDataV1ValueToJson_closure: function _EIP712Utils_eip712TypedDataV1ValueToJson_closure(t0) {
      this.childType = t0;
    },
    SolidityAbiException: function SolidityAbiException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    SolidityAddress_SolidityAddress(address) {
      address = A.StringUtils_strip0x(address);
      if (address.length > 40 && B.JSString_methods.startsWith$1(address.toLowerCase(), "41"))
        address = B.JSString_methods.substring$1(address, 2);
      new A.EthAddrDecoder().decodeAddr$2("0x" + address, A.LinkedHashMap_LinkedHashMap$_literal(["skip_chksum_enc", true], type$.String, type$.dynamic));
      return new A.SolidityAddress(A.EthAddrUtils_toChecksumAddress(address));
    },
    SolidityAddress: function SolidityAddress(t0) {
      this._hexAddress = t0;
    },
    SuiAddress_SuiAddress(address) {
      var toBytes, t1, byte, t2;
      address = A.StringUtils_strip0x(address);
      toBytes = A.BytesUtils_tryFromHexString(address, address.length === 1);
      if (toBytes == null)
        throw A.wrapException(A.DartSuiPluginException$("Invalid sui address.", A.LinkedHashMap_LinkedHashMap$_literal(["address", address], type$.String, type$.dynamic)));
      t1 = toBytes.length;
      if (t1 === 1) {
        if (0 >= t1)
          return A.ioore(toBytes, 0);
        byte = toBytes[0];
        if (byte < 10) {
          toBytes = A.List_List$filled(32, 0, false, type$.int);
          B.JSArray_methods.set$last(toBytes, byte);
        }
      }
      t1 = toBytes.length;
      if (t1 !== 32)
        A.throwExpression(A.AddressConverterException$("Invalid sui address bytes length.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", 32, "length", t1], type$.String, type$.dynamic)));
      t1 = A.BytesUtils_toHexString(toBytes, true, "0x");
      t2 = A.MoveUtils_parseAddressBytes(toBytes);
      A.BytesUtils_validateListOfBytes(t2);
      return new A.SuiAddress(t1, A.List_List$unmodifiable(t2, type$.int), B.MoveArgumentType_3_address);
    },
    SuiAddress: function SuiAddress(t0, t1, t2) {
      this.address = t0;
      this.value = t1;
      this.argumentType = t2;
    },
    DartSuiPluginException$(message, details) {
      return new A.DartSuiPluginException(message, details);
    },
    DartSuiPluginException: function DartSuiPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    SuiApiTransactionBlockResponseOptions: function SuiApiTransactionBlockResponseOptions(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.showBalanceChange = t0;
      _.showEffects = t1;
      _.showEvents = t2;
      _.showInput = t3;
      _.showObjectChanges = t4;
      _.showRawEffects = t5;
      _.showRawInput = t6;
    },
    SuiApiTransactionBlockResponseOptions_toJson_closure: function SuiApiTransactionBlockResponseOptions_toJson_closure() {
    },
    SuiApiExecuteTransactionRequestType: function SuiApiExecuteTransactionRequestType(t0, t1) {
      this.name = t0;
      this._name = t1;
    },
    TronAddress_TronAddress(address) {
      var decode, t1, decode0, t2, addr, exception, _null = null, visible = null;
      try {
        if (visible == null) {
          t2 = $.$get$StringUtils__hexBytesRegex();
          if (t2._nativeRegExp.test(address)) {
            t1 = A.BytesUtils_fromHexString(address, false);
            addr = A.TrxAddressUtils_fromHexBytes(t1);
            t1 = A.BytesUtils_toHexString(t1, true, _null);
            return new A.TronAddress(addr, t1);
          }
          decode = new A.TrxAddrDecoder().decodeAddr$1(address);
          t2 = A.List_List$_of(B.List_65, type$.int);
          t1 = t2;
          J.addAll$1$ax(t1, decode);
          t1 = A.BytesUtils_toHexString(t1, true, _null);
          return new A.TronAddress(address, t1);
        } else if (visible) {
          decode0 = new A.TrxAddrDecoder().decodeAddr$1(address);
          t1 = A.List_List$_of(B.List_65, type$.int);
          t2 = t1;
          J.addAll$1$ax(t2, decode0);
          t1 = A.BytesUtils_toHexString(t2, true, _null);
          return new A.TronAddress(address, t1);
        } else {
          t1 = A.BytesUtils_fromHexString(address, false);
          addr = A.TrxAddressUtils_fromHexBytes(t1);
          t1 = A.BytesUtils_toHexString(t1, true, _null);
          return new A.TronAddress(addr, t1);
        }
      } catch (exception) {
        t1 = A.TronPluginException$("invalid tron address", A.LinkedHashMap_LinkedHashMap$_literal(["input", address, "visible", visible], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    TronAddress: function TronAddress(t0, t1) {
      this._address = t0;
      this._hexAddress = t1;
    },
    TronPluginException$(message, details) {
      return new A.TronPluginException(message, details);
    },
    TronPluginException: function TronPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    AccountCreateContract_AccountCreateContract$deserialize(bytes) {
      var addr0, t3,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        addr = A.TrxAddressUtils_fromHexBytes(t2);
      t2 = A.BytesUtils_toHexString(t2, true, null);
      t1 = A.QuickProtocolBufferResults_getField0(decode, 2, t1);
      addr0 = A.TrxAddressUtils_fromHexBytes(t1);
      t1 = A.BytesUtils_toHexString(t1, true, null);
      t3 = A.QuickProtocolBufferResults_getResult(decode, 3, type$.nullable_ProtocolBufferDecoderResult_dynamic);
      t3 = t3 == null ? null : A.QuickProtocolBufferResult_castTo(t3, new A.AccountCreateContract_AccountCreateContract$deserialize_closure(), type$.AccountType, type$.int);
      if (t3 == null)
        t3 = B.AccountType_0_Normal;
      return new A.AccountCreateContract(new A.TronAddress(addr, t2), new A.TronAddress(addr0, t1), t3);
    },
    AccountCreateContract: function AccountCreateContract(t0, t1, t2) {
      this.ownerAddress = t0;
      this.accountAddress = t1;
      this.type = t2;
    },
    AccountCreateContract_AccountCreateContract$deserialize_closure: function AccountCreateContract_AccountCreateContract$deserialize_closure() {
    },
    AccountCreateContract_toJson_closure: function AccountCreateContract_toJson_closure() {
    },
    AccountId: function AccountId(t0, t1) {
      this.address = t0;
      this.name = t1;
    },
    AccountId_toJson_closure: function AccountId_toJson_closure() {
    },
    AccountPermissionUpdateContract_AccountPermissionUpdateContract$fromJson(json) {
      var t4, t5, t6,
        _s13_ = "owner_address",
        _s7_ = "witness",
        t1 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress),
        t2 = type$.dynamic,
        t3 = A.OnChainUtils_parseMap("owner", true, json.$index(0, "owner"), type$.String, t2);
      t3.toString;
      t3 = A.Permission_Permission$fromJson(t3);
      t4 = A.OnChainUtils_parseMap(_s7_, false, json.$index(0, _s7_), t2, t2) == null ? null : A.Permission_Permission$fromJson(type$.Map_String_dynamic._as(json.$index(0, _s7_)));
      t2 = A.OnChainUtils_parseList("actives", false, json.$index(0, "actives"), t2);
      if (t2 == null)
        t2 = null;
      else {
        t5 = A._arrayInstanceType(t2);
        t6 = t5._eval$1("MappedListIterable<1,Permission>");
        t2 = A.List_List$_of(new A.MappedListIterable(t2, t5._eval$1("Permission(1)")._as(new A.AccountPermissionUpdateContract_AccountPermissionUpdateContract$fromJson_closure()), t6), t6._eval$1("ListIterable.E"));
      }
      if (t2 == null)
        t2 = A._setArrayType([], type$.JSArray_Permission);
      return new A.AccountPermissionUpdateContract(t1, t3, t4, A.List_List$unmodifiable(t2, type$.Permission));
    },
    AccountPermissionUpdateContract_AccountPermissionUpdateContract$deserialize(bytes) {
      var t3, t4, t5, t6,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        addr = A.TrxAddressUtils_fromHexBytes(t2);
      t2 = A.BytesUtils_toHexString(t2, true, null);
      t3 = A.Permission_Permission$deserialize(A.QuickProtocolBufferResults_getField0(decode, 2, t1));
      t4 = A.QuickProtocolBufferResults_getResult(decode, 3, type$.nullable_ProtocolBufferDecoderResult_dynamic);
      t4 = t4 == null ? null : A.QuickProtocolBufferResult_castTo(t4, new A.AccountPermissionUpdateContract_AccountPermissionUpdateContract$deserialize_closure(), type$.Permission, t1);
      t1 = A.QuickProtocolBufferResults_getFields(decode, 4, t1);
      t5 = A._arrayInstanceType(t1);
      t6 = t5._eval$1("MappedListIterable<1,Permission>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t5._eval$1("Permission(1)")._as(new A.AccountPermissionUpdateContract_AccountPermissionUpdateContract$deserialize_closure0()), t6), t6._eval$1("ListIterable.E"));
      return new A.AccountPermissionUpdateContract(new A.TronAddress(addr, t2), t3, t4, A.List_List$unmodifiable(t1, type$.Permission));
    },
    AccountPermissionUpdateContract: function AccountPermissionUpdateContract(t0, t1, t2, t3) {
      var _ = this;
      _.ownerAddress = t0;
      _.owner = t1;
      _.witness = t2;
      _.actives = t3;
    },
    AccountPermissionUpdateContract_AccountPermissionUpdateContract$fromJson_closure: function AccountPermissionUpdateContract_AccountPermissionUpdateContract$fromJson_closure() {
    },
    AccountPermissionUpdateContract_AccountPermissionUpdateContract$deserialize_closure: function AccountPermissionUpdateContract_AccountPermissionUpdateContract$deserialize_closure() {
    },
    AccountPermissionUpdateContract_AccountPermissionUpdateContract$deserialize_closure0: function AccountPermissionUpdateContract_AccountPermissionUpdateContract$deserialize_closure0() {
    },
    AccountPermissionUpdateContract_toJson_closure: function AccountPermissionUpdateContract_toJson_closure() {
    },
    AccountPermissionUpdateContract_toJson_closure0: function AccountPermissionUpdateContract_toJson_closure0() {
    },
    AccountType_fromName($name) {
      var t1, exception;
      if ($name == null)
        return null;
      try {
        t1 = B.JSArray_methods.firstWhere$1(B.List_GTJ, new A.AccountType_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          return null;
      }
    },
    AccountType_fromValue(value) {
      return B.JSArray_methods.firstWhere$1(B.List_GTJ, new A.AccountType_fromValue_closure(value));
    },
    AccountType: function AccountType(t0, t1) {
      this.value = t0;
      this.name = t1;
    },
    AccountType_fromName_closure: function AccountType_fromName_closure(t0) {
      this.name = t0;
    },
    AccountType_fromValue_closure: function AccountType_fromValue_closure(t0) {
      this.value = t0;
    },
    AccountUpdateContract_AccountUpdateContract$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1);
      return new A.AccountUpdateContract(new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t2), A.BytesUtils_toHexString(t2, true, null)), A.BytesUtils_toBytes(A.QuickProtocolBufferResults_getField0(decode, 2, t1), true));
    },
    AccountUpdateContract: function AccountUpdateContract(t0, t1) {
      this.ownerAddress = t0;
      this.accountName = t1;
    },
    Authority_Authority$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getResult(decode, 1, type$.nullable_ProtocolBufferDecoderResult_dynamic);
      t1 = t1 == null ? null : A.QuickProtocolBufferResult_castTo(t1, new A.Authority_Authority$deserialize_closure(), type$.AccountId, type$.List_int);
      return new A.Authority(t1, A.BytesUtils_tryToBytes(A.QuickProtocolBufferResults_getField0(decode, 2, type$.nullable_List_int), true));
    },
    Authority: function Authority(t0, t1) {
      this.account = t0;
      this.permissionName = t1;
    },
    Authority_Authority$deserialize_closure: function Authority_Authority$deserialize_closure() {
    },
    TronKey: function TronKey(t0, t1) {
      this.address = t0;
      this.weight = t1;
    },
    Permission_Permission$fromJson(json) {
      var t5, t6, t7, t8,
        _s15_ = "permission_name",
        _s10_ = "operations",
        _s9_ = "parent_id",
        _s9_0 = "threshold",
        t1 = type$.nullable_String,
        t2 = A.PermissionType_fromName(A.OnChainUtils_parseString("type", json.$index(0, "type"), t1), B.PermissionType_Owner_0),
        t3 = type$.nullable_int,
        t4 = A.OnChainUtils_parseInt("id", json.$index(0, "id"), t3);
      t1 = A.OnChainUtils_parseString(_s15_, json.$index(0, _s15_), t1);
      t5 = A.OnChainUtils_parseHex(_s10_, json.$index(0, _s10_), type$.nullable_List_int);
      t6 = A.OnChainUtils_parseList("keys", false, json.$index(0, "keys"), type$.dynamic);
      if (t6 == null)
        t6 = null;
      else {
        t7 = A._arrayInstanceType(t6);
        t8 = t7._eval$1("MappedListIterable<1,TronKey>");
        t6 = A.List_List$_of(new A.MappedListIterable(t6, t7._eval$1("TronKey(1)")._as(new A.Permission_Permission$fromJson_closure()), t8), t8._eval$1("ListIterable.E"));
      }
      return A.Permission$(t4, t6, t5, A.OnChainUtils_parseInt(_s9_, json.$index(0, _s9_), t3), t1, A.OnChainUtils_parseBigInt(_s9_0, json.$index(0, _s9_0), type$.nullable_BigInt), t2);
    },
    Permission$(id, keys, operations, parentId, permissionName, threshold, type) {
      var t1 = A.BytesUtils_tryToBytes(operations, true);
      return new A.Permission(type, id, permissionName, threshold, parentId, t1, keys == null ? null : A.List_List$unmodifiable(keys, type$.TronKey));
    },
    Permission_Permission$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.nullable_int,
        t2 = A.PermissionType_fromValue(A.QuickProtocolBufferResults_getField0(decode, 1, t1), B.PermissionType_Owner_0),
        t3 = A.QuickProtocolBufferResults_getField0(decode, 2, t1),
        t4 = A.QuickProtocolBufferResults_getField0(decode, 3, type$.nullable_String),
        t5 = A.QuickProtocolBufferResults_getField0(decode, 6, type$.nullable_List_int),
        t6 = A.QuickProtocolBufferResults_getFields(decode, 7, type$.List_int),
        t7 = A._arrayInstanceType(t6),
        t8 = t7._eval$1("MappedListIterable<1,TronKey>");
      t6 = A.List_List$_of(new A.MappedListIterable(t6, t7._eval$1("TronKey(1)")._as(new A.Permission_Permission$deserialize_closure()), t8), t8._eval$1("ListIterable.E"));
      return A.Permission$(t3, t6, t5, A.QuickProtocolBufferResults_getField0(decode, 5, t1), t4, A.QuickProtocolBufferResults_getField0(decode, 4, type$.nullable_BigInt), t2);
    },
    Permission: function Permission(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.type = t0;
      _.id = t1;
      _.permissionName = t2;
      _.threshold = t3;
      _.parentId = t4;
      _.operations = t5;
      _.keys = t6;
    },
    Permission_Permission$fromJson_closure: function Permission_Permission$fromJson_closure() {
    },
    Permission_Permission$deserialize_closure: function Permission_Permission$deserialize_closure() {
    },
    Permission_toJson_closure: function Permission_toJson_closure() {
    },
    Permission_toJson_closure0: function Permission_toJson_closure0() {
    },
    PermissionType_fromName($name, defaultPermission) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_oK2, new A.PermissionType_fromName_closure($name), new A.PermissionType_fromName_closure0(defaultPermission));
    },
    PermissionType_fromValue(value, defaultPermission) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_oK2, new A.PermissionType_fromValue_closure(value), new A.PermissionType_fromValue_closure0(defaultPermission));
    },
    PermissionType: function PermissionType(t0, t1) {
      this.name = t0;
      this.value = t1;
    },
    PermissionType_fromName_closure: function PermissionType_fromName_closure(t0) {
      this.name = t0;
    },
    PermissionType_fromName_closure0: function PermissionType_fromName_closure0(t0) {
      this.defaultPermission = t0;
    },
    PermissionType_fromValue_closure: function PermissionType_fromValue_closure(t0) {
      this.value = t0;
    },
    PermissionType_fromValue_closure0: function PermissionType_fromValue_closure0(t0) {
      this.defaultPermission = t0;
    },
    SetAccountIdContract_SetAccountIdContract$deserialize(bytes) {
      var addr,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1);
      t1 = A.QuickProtocolBufferResults_getField0(decode, 2, t1);
      addr = A.TrxAddressUtils_fromHexBytes(t1);
      t1 = A.BytesUtils_toHexString(t1, true, null);
      return new A.SetAccountIdContract(A.BytesUtils_toBytes(t2, true), new A.TronAddress(addr, t1));
    },
    SetAccountIdContract: function SetAccountIdContract(t0, t1) {
      this.accountId = t0;
      this.ownerAddress = t1;
    },
    AssetIssueContract_AssetIssueContract$fromJson(json) {
      var t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18,
        _s13_ = "owner_address",
        _s4_ = "name",
        _s12_ = "total_supply",
        _s13_0 = "frozen_supply",
        _s9_ = "precision",
        _s10_ = "start_time",
        _s8_ = "end_time",
        _s10_0 = "vote_score",
        _s11_ = "description",
        _s25_ = "public_free_asset_netimit",
        _s27_ = "public_free_asset_net_usage",
        _s25_0 = "publicatest_free_net_time",
        t1 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress),
        t2 = type$.List_int,
        t3 = A.OnChainUtils_parseBytes(_s4_, json.$index(0, _s4_), t2);
      t2 = A.OnChainUtils_parseBytes("abbr", json.$index(0, "abbr"), t2);
      t4 = type$.BigInt;
      t5 = A.OnChainUtils_parseBigInt(_s12_, json.$index(0, _s12_), t4);
      t6 = A.OnChainUtils_parseList(_s13_0, false, json.$index(0, _s13_0), type$.dynamic);
      if (t6 == null)
        t6 = null;
      else {
        t7 = A._arrayInstanceType(t6);
        t8 = t7._eval$1("MappedListIterable<1,AssetIssueContractFrozenSupply>");
        t6 = A.List_List$_of(new A.MappedListIterable(t6, t7._eval$1("AssetIssueContractFrozenSupply(1)")._as(new A.AssetIssueContract_AssetIssueContract$fromJson_closure()), t8), t8._eval$1("ListIterable.E"));
      }
      t7 = type$.int;
      t8 = A.OnChainUtils_parseInt("trx_num", json.$index(0, "trx_num"), t7);
      t9 = type$.nullable_int;
      t10 = A.OnChainUtils_parseInt(_s9_, json.$index(0, _s9_), t9);
      t7 = A.OnChainUtils_parseInt("num", json.$index(0, "num"), t7);
      t11 = A.OnChainUtils_parseBigInt(_s10_, json.$index(0, _s10_), t4);
      t4 = A.OnChainUtils_parseBigInt(_s8_, json.$index(0, _s8_), t4);
      t12 = type$.nullable_BigInt;
      t13 = A.OnChainUtils_parseBigInt("order", json.$index(0, "order"), t12);
      t9 = A.OnChainUtils_parseInt(_s10_0, json.$index(0, _s10_0), t9);
      t14 = type$.nullable_List_int;
      t15 = A.OnChainUtils_parseBytes(_s11_, json.$index(0, _s11_), t14);
      t14 = A.OnChainUtils_parseBytes("url", json.$index(0, "url"), t14);
      t16 = A.OnChainUtils_parseBigInt(_s4_, json.$index(0, "free_asset_netimit"), t12);
      t17 = A.OnChainUtils_parseBigInt(_s25_, json.$index(0, _s25_), t12);
      t18 = A.OnChainUtils_parseBigInt(_s27_, json.$index(0, _s27_), t12);
      t12 = A.OnChainUtils_parseBigInt(_s25_0, json.$index(0, _s25_0), t12);
      return A.AssetIssueContract$(t2, t15, t4, t16, t6, A.OnChainUtils_parseString("id", json.$index(0, "id"), type$.nullable_String), t3, t7, t13, t1, t10, t17, t18, t12, t11, t5, t8, t14, t9);
    },
    AssetIssueContract$(abbr, description, endTime, freeAssetNetLimit, frozenSupply, id, $name, num, order, ownerAddress, precision, publicFreeAssetNetLimit, publicFreeAssetNetUsage, publicLatestFreeNetTime, startTime, totalSupply, trxNum, url, voteScore) {
      var t1 = A.BytesUtils_toBytes($name, true),
        t2 = A.BytesUtils_toBytes(abbr, true),
        t3 = frozenSupply == null ? null : frozenSupply.length !== 0;
      if (t3 === true) {
        frozenSupply.toString;
        t3 = A.List_List$unmodifiable(frozenSupply, type$.AssetIssueContractFrozenSupply);
      } else
        t3 = null;
      return new A.AssetIssueContract(ownerAddress, t1, t2, totalSupply, t3, trxNum, precision, num, startTime, endTime, order, voteScore, A.BytesUtils_tryToBytes(description, true), A.BytesUtils_tryToBytes(url, true), freeAssetNetLimit, publicFreeAssetNetLimit, publicFreeAssetNetUsage, publicLatestFreeNetTime, id);
    },
    AssetIssueContract_AssetIssueContract$deserialize(bytes) {
      var t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        addr = A.TrxAddressUtils_fromHexBytes(t2);
      t2 = A.BytesUtils_toHexString(t2, true, null);
      t3 = A.QuickProtocolBufferResults_getField0(decode, 2, t1);
      t4 = A.QuickProtocolBufferResults_getField0(decode, 3, t1);
      t5 = type$.BigInt;
      t6 = A.QuickProtocolBufferResults_getField0(decode, 4, t5);
      t1 = A.QuickProtocolBufferResults_getFields(decode, 5, t1);
      t7 = A._arrayInstanceType(t1);
      t8 = t7._eval$1("MappedListIterable<1,AssetIssueContractFrozenSupply>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t7._eval$1("AssetIssueContractFrozenSupply(1)")._as(new A.AssetIssueContract_AssetIssueContract$deserialize_closure()), t8), t8._eval$1("ListIterable.E"));
      t7 = type$.int;
      t8 = A.QuickProtocolBufferResults_getField0(decode, 6, t7);
      t9 = type$.nullable_int;
      t10 = A.QuickProtocolBufferResults_getField0(decode, 7, t9);
      t7 = A.QuickProtocolBufferResults_getField0(decode, 8, t7);
      t11 = A.QuickProtocolBufferResults_getField0(decode, 9, t5);
      t5 = A.QuickProtocolBufferResults_getField0(decode, 10, t5);
      t12 = type$.nullable_BigInt;
      t13 = A.QuickProtocolBufferResults_getField0(decode, 11, t12);
      t9 = A.QuickProtocolBufferResults_getField0(decode, 16, t9);
      t14 = type$.nullable_List_int;
      t15 = A.QuickProtocolBufferResults_getField0(decode, 20, t14);
      t14 = A.QuickProtocolBufferResults_getField0(decode, 21, t14);
      t16 = A.QuickProtocolBufferResults_getField0(decode, 22, t12);
      t17 = A.QuickProtocolBufferResults_getField0(decode, 23, t12);
      t18 = A.QuickProtocolBufferResults_getField0(decode, 24, t12);
      t12 = A.QuickProtocolBufferResults_getField0(decode, 25, t12);
      return A.AssetIssueContract$(t4, t15, t5, t16, t1, A.QuickProtocolBufferResults_getField0(decode, 41, type$.nullable_String), t3, t7, t13, new A.TronAddress(addr, t2), t10, t17, t18, t12, t11, t6, t8, t14, t9);
    },
    AssetIssueContract: function AssetIssueContract(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18) {
      var _ = this;
      _.ownerAddress = t0;
      _.name = t1;
      _.abbr = t2;
      _.totalSupply = t3;
      _.frozenSupply = t4;
      _.trxNum = t5;
      _.precision = t6;
      _.num = t7;
      _.startTime = t8;
      _.endTime = t9;
      _.order = t10;
      _.voteScore = t11;
      _.description = t12;
      _.url = t13;
      _.freeAssetNetLimit = t14;
      _.publicFreeAssetNetLimit = t15;
      _.publicFreeAssetNetUsage = t16;
      _.publicLatestFreeNetTime = t17;
      _.id = t18;
    },
    AssetIssueContract_AssetIssueContract$fromJson_closure: function AssetIssueContract_AssetIssueContract$fromJson_closure() {
    },
    AssetIssueContract_AssetIssueContract$deserialize_closure: function AssetIssueContract_AssetIssueContract$deserialize_closure() {
    },
    AssetIssueContract_toJson_closure: function AssetIssueContract_toJson_closure() {
    },
    AssetIssueContract_toJson_closure0: function AssetIssueContract_toJson_closure0() {
    },
    AssetIssueContractFrozenSupply: function AssetIssueContractFrozenSupply(t0, t1) {
      this.frozenAmount = t0;
      this.frozenDays = t1;
    },
    ParticipateAssetIssueContract_ParticipateAssetIssueContract$deserialize(bytes) {
      var t3, addr0, t4,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        addr = A.TrxAddressUtils_fromHexBytes(t2);
      t2 = A.BytesUtils_toHexString(t2, true, null);
      t3 = A.QuickProtocolBufferResults_getField0(decode, 2, t1);
      addr0 = A.TrxAddressUtils_fromHexBytes(t3);
      t3 = A.BytesUtils_toHexString(t3, true, null);
      t1 = A.QuickProtocolBufferResults_getField0(decode, 3, t1);
      t4 = A.QuickProtocolBufferResults_getField0(decode, 4, type$.BigInt);
      return new A.ParticipateAssetIssueContract(new A.TronAddress(addr, t2), new A.TronAddress(addr0, t3), A.BytesUtils_toBytes(t1, true), t4);
    },
    ParticipateAssetIssueContract: function ParticipateAssetIssueContract(t0, t1, t2, t3) {
      var _ = this;
      _.ownerAddress = t0;
      _.toAddress = t1;
      _.assetName = t2;
      _.amount = t3;
    },
    TransferAssetContract_TransferAssetContract$deserialize(bytes) {
      var t3, addr0, t4,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 2, t1),
        addr = A.TrxAddressUtils_fromHexBytes(t2);
      t2 = A.BytesUtils_toHexString(t2, true, null);
      t3 = A.QuickProtocolBufferResults_getField0(decode, 3, t1);
      addr0 = A.TrxAddressUtils_fromHexBytes(t3);
      t3 = A.BytesUtils_toHexString(t3, true, null);
      t1 = A.QuickProtocolBufferResults_getField0(decode, 1, t1);
      t4 = A.QuickProtocolBufferResults_getField0(decode, 4, type$.BigInt);
      return new A.TransferAssetContract(A.BytesUtils_toBytes(t1, true), new A.TronAddress(addr, t2), new A.TronAddress(addr0, t3), t4);
    },
    TransferAssetContract: function TransferAssetContract(t0, t1, t2, t3) {
      var _ = this;
      _.assetName = t0;
      _.ownerAddress = t1;
      _.toAddress = t2;
      _.amount = t3;
    },
    TransferAssetContract_toJson_closure: function TransferAssetContract_toJson_closure() {
    },
    UnfreezeAssetContract_UnfreezeAssetContract$deserialize(bytes) {
      var t1 = A.QuickProtocolBufferResults_getField0(A.ProtocolBufferDecoder_decode0(bytes), 1, type$.List_int);
      return new A.UnfreezeAssetContract(new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)));
    },
    UnfreezeAssetContract: function UnfreezeAssetContract(t0) {
      this.ownerAddress = t0;
    },
    UpdateAssetContract_UpdateAssetContract$deserialize(bytes) {
      var t2, t3, t4, t5,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int),
        addr = A.TrxAddressUtils_fromHexBytes(t1);
      t1 = A.BytesUtils_toHexString(t1, true, null);
      t2 = type$.nullable_List_int;
      t3 = A.QuickProtocolBufferResults_getField0(decode, 2, t2);
      t2 = A.QuickProtocolBufferResults_getField0(decode, 3, t2);
      t4 = type$.nullable_BigInt;
      t5 = A.QuickProtocolBufferResults_getField0(decode, 4, t4);
      t4 = A.QuickProtocolBufferResults_getField0(decode, 5, t4);
      t2 = A.BytesUtils_tryToBytes(t2, true);
      return new A.UpdateAssetContract(new A.TronAddress(addr, t1), A.BytesUtils_tryToBytes(t3, true), t2, t5, t4);
    },
    UpdateAssetContract: function UpdateAssetContract(t0, t1, t2, t3, t4) {
      var _ = this;
      _.ownerAddress = t0;
      _.description = t1;
      _.url = t2;
      _.newLimit = t3;
      _.newPublicLimit = t4;
    },
    UpdateAssetContract_toJson_closure: function UpdateAssetContract_toJson_closure() {
    },
    CancelAllUnfreezeV2Contract_CancelAllUnfreezeV2Contract$deserialize(bytes) {
      var t1 = A.QuickProtocolBufferResults_getField0(A.ProtocolBufferDecoder_decode0(bytes), 1, type$.List_int);
      return new A.CancelAllUnfreezeV2Contract(new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)));
    },
    CancelAllUnfreezeV2Contract: function CancelAllUnfreezeV2Contract(t0) {
      this.ownerAddress = t0;
    },
    DelegateResourceContract_DelegateResourceContract$deserialize(bytes) {
      var t3, t4,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        addr = A.TrxAddressUtils_fromHexBytes(t2);
      t2 = A.BytesUtils_toHexString(t2, true, null);
      t3 = A.QuickProtocolBufferResults_getResult(decode, 2, type$.nullable_ProtocolBufferDecoderResult_dynamic);
      t3 = t3 == null ? null : A.QuickProtocolBufferResult_castTo(t3, new A.DelegateResourceContract_DelegateResourceContract$deserialize_closure(decode), type$.ResourceCode, type$.int);
      t4 = A.QuickProtocolBufferResults_getField0(decode, 3, type$.BigInt);
      t1 = A.QuickProtocolBufferResults_getField0(decode, 4, t1);
      return new A.DelegateResourceContract(new A.TronAddress(addr, t2), t3, t4, new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)), A.QuickProtocolBufferResults_getField0(decode, 5, type$.nullable_bool), A.QuickProtocolBufferResults_getField0(decode, 6, type$.nullable_BigInt));
    },
    DelegateResourceContract: function DelegateResourceContract(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.ownerAddress = t0;
      _.resource = t1;
      _.balance = t2;
      _.receiverAddress = t3;
      _.lock = t4;
      _.lockPeriod = t5;
    },
    DelegateResourceContract_DelegateResourceContract$deserialize_closure: function DelegateResourceContract_DelegateResourceContract$deserialize_closure(t0) {
      this.decode = t0;
    },
    DelegateResourceContract_toJson_closure: function DelegateResourceContract_toJson_closure() {
    },
    FreezeBalanceContract_FreezeBalanceContract$deserialize(bytes) {
      var t3, t4, t5, t6,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        addr = A.TrxAddressUtils_fromHexBytes(t2);
      t2 = A.BytesUtils_toHexString(t2, true, null);
      t3 = type$.nullable_BigInt;
      t4 = A.QuickProtocolBufferResults_getField0(decode, 2, t3);
      t3 = A.QuickProtocolBufferResults_getField0(decode, 3, t3);
      t5 = A.ResourceCode_fromValue(A.QuickProtocolBufferResults_getField0(decode, 10, type$.nullable_int), B.ResourceCode_0_BANDWIDTH);
      t6 = A.QuickProtocolBufferResults_getResult(decode, 15, type$.nullable_ProtocolBufferDecoderResult_dynamic);
      t1 = t6 == null ? null : A.QuickProtocolBufferResult_castTo(t6, new A.FreezeBalanceContract_FreezeBalanceContract$deserialize_closure(), type$.TronAddress, t1);
      return new A.FreezeBalanceContract(new A.TronAddress(addr, t2), t4, t3, t5, t1);
    },
    FreezeBalanceContract: function FreezeBalanceContract(t0, t1, t2, t3, t4) {
      var _ = this;
      _.ownerAddress = t0;
      _.frozenBalance = t1;
      _.frozenDuration = t2;
      _.resource = t3;
      _.receiverAddress = t4;
    },
    FreezeBalanceContract_FreezeBalanceContract$deserialize_closure: function FreezeBalanceContract_FreezeBalanceContract$deserialize_closure() {
    },
    FreezeBalanceV2Contract_FreezeBalanceV2Contract$deserialize(bytes) {
      var t2, t3,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int),
        addr = A.TrxAddressUtils_fromHexBytes(t1);
      t1 = A.BytesUtils_toHexString(t1, true, null);
      t2 = A.QuickProtocolBufferResults_getField0(decode, 2, type$.BigInt);
      t3 = A.QuickProtocolBufferResults_getResult(decode, 3, type$.nullable_ProtocolBufferDecoderResult_dynamic);
      t3 = t3 == null ? null : A.QuickProtocolBufferResult_castTo(t3, new A.FreezeBalanceV2Contract_FreezeBalanceV2Contract$deserialize_closure(), type$.ResourceCode, type$.int);
      return new A.FreezeBalanceV2Contract(new A.TronAddress(addr, t1), t2, t3);
    },
    FreezeBalanceV2Contract: function FreezeBalanceV2Contract(t0, t1, t2) {
      this.ownerAddress = t0;
      this.frozenBalance = t1;
      this.resource = t2;
    },
    FreezeBalanceV2Contract_FreezeBalanceV2Contract$deserialize_closure: function FreezeBalanceV2Contract_FreezeBalanceV2Contract$deserialize_closure() {
    },
    FreezeBalanceV2Contract_toJson_closure: function FreezeBalanceV2Contract_toJson_closure() {
    },
    TransferContract_TransferContract$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 3, type$.BigInt),
        t2 = type$.List_int,
        t3 = A.QuickProtocolBufferResults_getField0(decode, 2, t2),
        addr = A.TrxAddressUtils_fromHexBytes(t3);
      t3 = A.BytesUtils_toHexString(t3, true, null);
      t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t2);
      return new A.TransferContract(new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t2), A.BytesUtils_toHexString(t2, true, null)), new A.TronAddress(addr, t3), t1);
    },
    TransferContract: function TransferContract(t0, t1, t2) {
      this.ownerAddress = t0;
      this.toAddress = t1;
      this.amount = t2;
    },
    TransferContract_toJson_closure: function TransferContract_toJson_closure() {
    },
    UnDelegateResourceContract_UnDelegateResourceContract$deserialize(bytes) {
      var t3, t4,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        addr = A.TrxAddressUtils_fromHexBytes(t2);
      t2 = A.BytesUtils_toHexString(t2, true, null);
      t3 = A.QuickProtocolBufferResults_getField0(decode, 3, type$.BigInt);
      t4 = A.QuickProtocolBufferResults_getResult(decode, 2, type$.nullable_ProtocolBufferDecoderResult_dynamic);
      t4 = t4 == null ? null : A.QuickProtocolBufferResult_castTo(t4, new A.UnDelegateResourceContract_UnDelegateResourceContract$deserialize_closure(), type$.ResourceCode, type$.int);
      t1 = A.QuickProtocolBufferResults_getField0(decode, 4, t1);
      return new A.UnDelegateResourceContract(new A.TronAddress(addr, t2), t4, t3, new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)));
    },
    UnDelegateResourceContract: function UnDelegateResourceContract(t0, t1, t2, t3) {
      var _ = this;
      _.ownerAddress = t0;
      _.resource = t1;
      _.balance = t2;
      _.receiverAddress = t3;
    },
    UnDelegateResourceContract_UnDelegateResourceContract$deserialize_closure: function UnDelegateResourceContract_UnDelegateResourceContract$deserialize_closure() {
    },
    UnDelegateResourceContract_toJson_closure: function UnDelegateResourceContract_toJson_closure() {
    },
    UnfreezeBalanceContract_UnfreezeBalanceContract$deserialize(bytes) {
      var t3,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        addr = A.TrxAddressUtils_fromHexBytes(t2);
      t2 = A.BytesUtils_toHexString(t2, true, null);
      t3 = A.QuickProtocolBufferResults_getResult(decode, 10, type$.nullable_ProtocolBufferDecoderResult_dynamic);
      t3 = t3 == null ? null : A.QuickProtocolBufferResult_castTo(t3, new A.UnfreezeBalanceContract_UnfreezeBalanceContract$deserialize_closure(), type$.ResourceCode, type$.int);
      t1 = A.QuickProtocolBufferResults_getField0(decode, 15, t1);
      return new A.UnfreezeBalanceContract(new A.TronAddress(addr, t2), t3, new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)));
    },
    UnfreezeBalanceContract: function UnfreezeBalanceContract(t0, t1, t2) {
      this.ownerAddress = t0;
      this.resource = t1;
      this.receiverAddress = t2;
    },
    UnfreezeBalanceContract_UnfreezeBalanceContract$deserialize_closure: function UnfreezeBalanceContract_UnfreezeBalanceContract$deserialize_closure() {
    },
    UnfreezeBalanceV2Contract_UnfreezeBalanceV2Contract$deserialize(bytes) {
      var t2,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int),
        addr = A.TrxAddressUtils_fromHexBytes(t1);
      t1 = A.BytesUtils_toHexString(t1, true, null);
      t2 = A.QuickProtocolBufferResults_getResult(decode, 3, type$.nullable_ProtocolBufferDecoderResult_dynamic);
      t2 = t2 == null ? null : A.QuickProtocolBufferResult_castTo(t2, new A.UnfreezeBalanceV2Contract_UnfreezeBalanceV2Contract$deserialize_closure(), type$.ResourceCode, type$.int);
      return new A.UnfreezeBalanceV2Contract(new A.TronAddress(addr, t1), A.QuickProtocolBufferResults_getField0(decode, 2, type$.BigInt), t2);
    },
    UnfreezeBalanceV2Contract: function UnfreezeBalanceV2Contract(t0, t1, t2) {
      this.ownerAddress = t0;
      this.unfreezeBalance = t1;
      this.resource = t2;
    },
    UnfreezeBalanceV2Contract_UnfreezeBalanceV2Contract$deserialize_closure: function UnfreezeBalanceV2Contract_UnfreezeBalanceV2Contract$deserialize_closure() {
    },
    UnfreezeBalanceV2Contract_toJson_closure: function UnfreezeBalanceV2Contract_toJson_closure() {
    },
    WithdrawBalanceContract_WithdrawBalanceContract$deserialize(bytes) {
      var t1 = A.QuickProtocolBufferResults_getField0(A.ProtocolBufferDecoder_decode0(bytes), 1, type$.List_int);
      return new A.WithdrawBalanceContract(new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)));
    },
    WithdrawBalanceContract: function WithdrawBalanceContract(t0) {
      this.ownerAddress = t0;
    },
    WithdrawExpireUnfreezeContract_WithdrawExpireUnfreezeContract$deserialize(bytes) {
      var t1 = A.QuickProtocolBufferResults_getField0(A.ProtocolBufferDecoder_decode0(bytes), 1, type$.List_int);
      return new A.WithdrawExpireUnfreezeContract(new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)));
    },
    WithdrawExpireUnfreezeContract: function WithdrawExpireUnfreezeContract(t0) {
      this.ownerAddress = t0;
    },
    TronBaseContract_TronBaseContract$deserialize(contractBytes, contractType) {
      switch (contractType) {
        case B.TransactionContractType_1_TransferContract:
          return A.TransferContract_TransferContract$deserialize(contractBytes);
        case B.TransactionContractType_6_AssetIssueContract:
          return A.AssetIssueContract_AssetIssueContract$deserialize(contractBytes);
        case B.TransactionContractType_59_CancelAllUnfreezeV2Contract:
          return A.CancelAllUnfreezeV2Contract_CancelAllUnfreezeV2Contract$deserialize(contractBytes);
        case B.TransactionContractType_15_UpdateAssetContract:
          return A.UpdateAssetContract_UpdateAssetContract$deserialize(contractBytes);
        case B.TransactionContractType_9_ParticipateAssetIssueContract:
          return A.ParticipateAssetIssueContract_ParticipateAssetIssueContract$deserialize(contractBytes);
        case B.TransactionContractType_2_TransferAssetContract:
          return A.TransferAssetContract_TransferAssetContract$deserialize(contractBytes);
        case B.TransactionContractType_0_AccountCreateContract:
          return A.AccountCreateContract_AccountCreateContract$deserialize(contractBytes);
        case B.TransactionContractType_10_AccountUpdateContract:
          return A.AccountUpdateContract_AccountUpdateContract$deserialize(contractBytes);
        case B.TransactionContractType_54_FreezeBalanceV2Contract:
          return A.FreezeBalanceV2Contract_FreezeBalanceV2Contract$deserialize(contractBytes);
        case B.TransactionContractType_55_UnfreezeBalanceV2Contract:
          return A.UnfreezeBalanceV2Contract_UnfreezeBalanceV2Contract$deserialize(contractBytes);
        case B.TransactionContractType_13_WithdrawBalanceContract:
          return A.WithdrawBalanceContract_WithdrawBalanceContract$deserialize(contractBytes);
        case B.TransactionContractType_uit:
          return A.WithdrawExpireUnfreezeContract_WithdrawExpireUnfreezeContract$deserialize(contractBytes);
        case B.TransactionContractType_57_DelegateResourceContract:
          return A.DelegateResourceContract_DelegateResourceContract$deserialize(contractBytes);
        case B.TransactionContractType_58_UnDelegateResourceContract:
          return A.UnDelegateResourceContract_UnDelegateResourceContract$deserialize(contractBytes);
        case B.TransactionContractType_12_UnfreezeBalanceContract:
          return A.UnfreezeBalanceContract_UnfreezeBalanceContract$deserialize(contractBytes);
        case B.TransactionContractType_11_FreezeBalanceContract:
          return A.FreezeBalanceContract_FreezeBalanceContract$deserialize(contractBytes);
        case B.TransactionContractType_T2s:
          return A.AccountPermissionUpdateContract_AccountPermissionUpdateContract$deserialize(contractBytes);
        case B.TransactionContractType_31_TriggerSmartContract:
          return A.TriggerSmartContract_TriggerSmartContract$deserialize(contractBytes);
        case B.TransactionContractType_30_CreateSmartContract:
          return A.CreateSmartContract_CreateSmartContract$deserialize(contractBytes);
        case B.TransactionContractType_19_SetAccountIdContract:
          return A.SetAccountIdContract_SetAccountIdContract$deserialize(contractBytes);
        case B.TransactionContractType_41_ExchangeCreateContract:
          return A.ExchangeCreateContract_ExchangeCreateContract$deserialize(contractBytes);
        case B.TransactionContractType_42_ExchangeInjectContract:
          return A.ExchangeInjectContract_ExchangeInjectContract$deserialize(contractBytes);
        case B.TransactionContractType_44_ExchangeTransactionContract:
          return A.ExchangeTransactionContract_ExchangeTransactionContract$deserialize(contractBytes);
        case B.TransactionContractType_43_ExchangeWithdrawContract:
          return A.ExchangeWithdrawContract_ExchangeWithdrawContract$deserialize(contractBytes);
        case B.TransactionContractType_53_MarketCancelOrderContract:
          return A.MarketCancelOrderContract_MarketCancelOrderContract$deserialize(contractBytes);
        case B.TransactionContractType_52_MarketSellAssetContract:
          return A.MarketSellAssetContract_MarketSellAssetContract$deserialize(contractBytes);
        case B.TransactionContractType_17_ProposalApproveContract:
          return A.ProposalApproveContract_ProposalApproveContract$deserialize(contractBytes);
        case B.TransactionContractType_16_ProposalCreateContract:
          return A.ProposalCreateContract_ProposalCreateContract$deserialize(contractBytes);
        case B.TransactionContractType_18_ProposalDeleteContract:
          return A.ProposalDeleteContract_ProposalDeleteContract$deserialize(contractBytes);
        case B.TransactionContractType_51_ShieldedTransferContract:
          return A.ShieldedTransferContract_ShieldedTransferContract$deserialize(contractBytes);
        case B.TransactionContractType_48_ClearABIContract:
          return A.ClearABIContract_ClearABIContract$deserialize(contractBytes);
        case B.TransactionContractType_45_UpdateEnergyLimitContract:
          return A.UpdateEnergyLimitContract_UpdateEnergyLimitContract$deserialize(contractBytes);
        case B.TransactionContractType_33_UpdateSettingContract:
          return A.UpdateSettingContract_UpdateSettingContract$deserialize(contractBytes);
        case B.TransactionContractType_49_UpdateBrokerageContract:
          return A.UpdateBrokerageContract_UpdateBrokerageContract$deserialize(contractBytes);
        case B.TransactionContractType_3_VoteAssetContract:
          return A.VoteAssetContract_VoteAssetContract$deserialize(contractBytes);
        case B.TransactionContractType_4_VoteWitnessContract:
          return A.VoteWitnessContract_VoteWitnessContract$deserialize(contractBytes);
        case B.TransactionContractType_14_UnfreezeAssetContract:
          return A.UnfreezeAssetContract_UnfreezeAssetContract$deserialize(contractBytes);
        case B.TransactionContractType_8_WitnessUpdateContract:
          return A.WitnessUpdateContract_WitnessUpdateContract$deserialize(contractBytes);
        case B.TransactionContractType_5_WitnessCreateContract:
          return A.WitnessCreateContract_WitnessCreateContract$deserialize(contractBytes);
        default:
          throw A.wrapException(A.TronPluginException$("Unsupported contract", A.LinkedHashMap_LinkedHashMap$_literal(["contract", contractType.name], type$.String, type$.dynamic)));
      }
    },
    TronBaseContract_TronBaseContract$fromJson(contractType, json) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, _null = null, _s6_ = "amount",
        _s13_ = "owner_address",
        _s10_ = "to_address",
        _s11_ = "description",
        _s3_ = "url",
        _s9_ = "new_limit",
        _s16_ = "new_public_limit",
        _s10_0 = "asset_name",
        _s15_ = "account_address",
        _s12_ = "account_name",
        _s14_ = "frozen_balance",
        _s8_ = "resource",
        _s16_0 = "unfreeze_balance",
        _s7_ = "balance",
        _s16_1 = "receiver_address",
        _s11_0 = "lock_period",
        _s16_2 = "contract_address",
        _s16_3 = "call_token_value",
        _s10_1 = "call_value",
        _s8_0 = "token_id",
        _s12_0 = "new_contract",
        _s14_0 = "origin_address",
        _s8_1 = "bytecode",
        _s29_ = "consume_user_resource_percent",
        _s19_ = "origin_energy_limit",
        _s8_2 = "trx_hash",
        _s9_0 = "code_hash",
        _s10_2 = "account_id",
        _s14_1 = "first_token_id",
        _s19_0 = "first_token_balance",
        _s15_0 = "second_token_id",
        _s20_ = "second_token_balance",
        _s11_1 = "exchange_id",
        _s5_ = "quant",
        _s8_3 = "expected",
        _s8_4 = "order_id",
        _s13_0 = "sell_token_id",
        _s19_1 = "sell_token_quantity",
        _s12_1 = "buy_token_id",
        _s18_ = "buy_token_quantity",
        _s11_2 = "proposal_id",
        _s15_1 = "is_add_approval",
        _s9_1 = "brokerage",
        _s10_3 = "update_url";
      switch (contractType) {
        case B.TransactionContractType_1_TransferContract:
          t1 = A.OnChainUtils_parseBigInt(_s6_, json.$index(0, _s6_), type$.BigInt);
          t2 = type$.TronAddress;
          return new A.TransferContract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), t2), A.OnChainUtils_parseTronAddress(_s10_, json.$index(0, _s10_), t2), t1);
        case B.TransactionContractType_6_AssetIssueContract:
          return A.AssetIssueContract_AssetIssueContract$fromJson(json);
        case B.TransactionContractType_59_CancelAllUnfreezeV2Contract:
          return new A.CancelAllUnfreezeV2Contract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress));
        case B.TransactionContractType_15_UpdateAssetContract:
          t1 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress);
          t2 = type$.nullable_List_int;
          t3 = A.OnChainUtils_parseBytes(_s11_, json.$index(0, _s11_), t2);
          t2 = A.OnChainUtils_parseBytes(_s3_, json.$index(0, _s3_), t2);
          t4 = type$.nullable_BigInt;
          t5 = A.OnChainUtils_parseBigInt(_s9_, json.$index(0, _s9_), t4);
          t4 = A.OnChainUtils_parseBigInt(_s16_, json.$index(0, _s16_), t4);
          t2 = A.BytesUtils_tryToBytes(t2, true);
          return new A.UpdateAssetContract(t1, A.BytesUtils_tryToBytes(t3, true), t2, t5, t4);
        case B.TransactionContractType_9_ParticipateAssetIssueContract:
          t1 = type$.TronAddress;
          t2 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), t1);
          t1 = A.OnChainUtils_parseTronAddress(_s10_, json.$index(0, _s10_), t1);
          t3 = A.OnChainUtils_parseBytes(_s10_0, json.$index(0, _s10_0), type$.List_int);
          t4 = A.OnChainUtils_parseBigInt(_s6_, json.$index(0, _s6_), type$.BigInt);
          return new A.ParticipateAssetIssueContract(t2, t1, A.BytesUtils_toBytes(t3, true), t4);
        case B.TransactionContractType_2_TransferAssetContract:
          t1 = A.OnChainUtils_parseBytes(_s10_0, json.$index(0, _s10_0), type$.List_int);
          t2 = type$.TronAddress;
          t3 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), t2);
          t2 = A.OnChainUtils_parseTronAddress(_s10_, json.$index(0, _s10_), t2);
          t4 = A.OnChainUtils_parseBigInt(_s6_, json.$index(0, _s6_), type$.BigInt);
          return new A.TransferAssetContract(A.BytesUtils_toBytes(t1, true), t3, t2, t4);
        case B.TransactionContractType_0_AccountCreateContract:
          t1 = type$.TronAddress;
          t2 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), t1);
          t1 = A.OnChainUtils_parseTronAddress(_s15_, json.$index(0, _s15_), t1);
          t3 = A.AccountType_fromName(A.OnChainUtils_parseString("type", json.$index(0, "type"), type$.nullable_String));
          return new A.AccountCreateContract(t2, t1, t3 == null ? B.AccountType_0_Normal : t3);
        case B.TransactionContractType_10_AccountUpdateContract:
          return new A.AccountUpdateContract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress), A.BytesUtils_toBytes(A.OnChainUtils_parseBytes(_s12_, json.$index(0, _s12_), type$.List_int), true));
        case B.TransactionContractType_54_FreezeBalanceV2Contract:
          return new A.FreezeBalanceV2Contract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress), A.OnChainUtils_parseBigInt(_s14_, json.$index(0, _s14_), type$.BigInt), A.ResourceCode_fromName(A.OnChainUtils_parseString(_s8_, json.$index(0, _s8_), type$.nullable_String), B.ResourceCode_0_BANDWIDTH));
        case B.TransactionContractType_55_UnfreezeBalanceV2Contract:
          return new A.UnfreezeBalanceV2Contract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress), A.OnChainUtils_parseBigInt(_s16_0, json.$index(0, _s16_0), type$.BigInt), A.ResourceCode_fromName(A.OnChainUtils_parseString(_s8_, json.$index(0, _s8_), type$.nullable_String), B.ResourceCode_0_BANDWIDTH));
        case B.TransactionContractType_13_WithdrawBalanceContract:
          return new A.WithdrawBalanceContract(A.TronAddress_TronAddress(A._asString(json.$index(0, _s13_))));
        case B.TransactionContractType_uit:
          return new A.WithdrawExpireUnfreezeContract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress));
        case B.TransactionContractType_57_DelegateResourceContract:
          t1 = type$.TronAddress;
          t2 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), t1);
          t3 = A.OnChainUtils_parseBigInt(_s7_, json.$index(0, _s7_), type$.BigInt);
          t1 = A.OnChainUtils_parseTronAddress(_s16_1, json.$index(0, _s16_1), t1);
          t4 = A.OnChainUtils_parseBoolean("lock", json.$index(0, "lock"), type$.nullable_bool);
          return new A.DelegateResourceContract(t2, A.ResourceCode_fromName(A.OnChainUtils_parseString(_s8_, json.$index(0, _s8_), type$.nullable_String), B.ResourceCode_0_BANDWIDTH), t3, t1, t4, A.OnChainUtils_parseBigInt(_s11_0, json.$index(0, _s11_0), type$.nullable_BigInt));
        case B.TransactionContractType_58_UnDelegateResourceContract:
          t1 = A.TronAddress_TronAddress(A._asString(json.$index(0, _s13_)));
          t2 = A.BigintUtils_parse(json.$index(0, _s7_), true);
          t3 = A.TronAddress_TronAddress(A._asString(json.$index(0, _s16_1)));
          return new A.UnDelegateResourceContract(t1, A.ResourceCode_fromName(A._asStringQ(json.$index(0, _s8_)), _null), t2, t3);
        case B.TransactionContractType_12_UnfreezeBalanceContract:
          t1 = A.TronAddress_TronAddress(A._asString(json.$index(0, _s13_)));
          t2 = A.ResourceCode_fromName(A._asStringQ(json.$index(0, _s8_)), _null);
          return new A.UnfreezeBalanceContract(t1, t2, json.$index(0, _s16_1) == null ? _null : A.TronAddress_TronAddress(A._asString(json.$index(0, _s16_1))));
        case B.TransactionContractType_11_FreezeBalanceContract:
          t1 = A.TronAddress_TronAddress(A._asString(json.$index(0, _s13_)));
          t2 = A.BigintUtils_tryParse(json.$index(0, _s14_));
          t3 = A.BigintUtils_tryParse(json.$index(0, _s14_));
          t4 = A.ResourceCode_fromName(A._asStringQ(json.$index(0, _s8_)), _null);
          return new A.FreezeBalanceContract(t1, t2, t3, t4, json.$index(0, _s16_1) == null ? _null : A.TronAddress_TronAddress(A._asString(json.$index(0, _s16_1))));
        case B.TransactionContractType_T2s:
          return A.AccountPermissionUpdateContract_AccountPermissionUpdateContract$fromJson(json);
        case B.TransactionContractType_31_TriggerSmartContract:
          t1 = type$.TronAddress;
          t2 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), t1);
          t1 = A.OnChainUtils_parseTronAddress(_s16_2, json.$index(0, _s16_2), t1);
          t3 = A.OnChainUtils_parseHex("data", json.$index(0, "data"), type$.nullable_List_int);
          t4 = type$.nullable_BigInt;
          t5 = A.OnChainUtils_parseBigInt(_s16_3, json.$index(0, _s16_3), t4);
          t6 = A.OnChainUtils_parseBigInt(_s10_1, json.$index(0, _s10_1), t4);
          t4 = A.OnChainUtils_parseBigInt(_s8_0, json.$index(0, _s8_0), t4);
          return new A.TriggerSmartContract(t2, t1, t6, A.BytesUtils_tryToBytes(t3, true), t5, t4);
        case B.TransactionContractType_30_CreateSmartContract:
          t1 = type$.TronAddress;
          t2 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), t1);
          t3 = type$.String;
          t4 = type$.dynamic;
          t5 = A.OnChainUtils_parseMap(_s12_0, true, json.$index(0, _s12_0), t3, t4);
          t1 = A.OnChainUtils_parseTronAddress(_s14_0, t5.$index(0, _s14_0), t1);
          t6 = A.OnChainUtils_parseHex(_s8_1, t5.$index(0, _s8_1), type$.List_int);
          t7 = type$.nullable_BigInt;
          t8 = A.OnChainUtils_parseBigInt(_s10_1, t5.$index(0, _s10_1), t7);
          t3 = A.OnChainUtils_parseMap("abi", false, t5.$index(0, "abi"), t3, t4) == null ? _null : A.SmartContractABI_SmartContractABI$fromJson(type$.Map_String_dynamic._as(t5.$index(0, "abi")));
          t4 = A.OnChainUtils_parseBigInt(_s29_, t5.$index(0, _s29_), t7);
          t9 = A.OnChainUtils_parseString("name", t5.$index(0, "name"), type$.nullable_String);
          t10 = A.OnChainUtils_parseBigInt(_s19_, t5.$index(0, _s19_), t7);
          t11 = type$.nullable_List_int;
          t12 = A.OnChainUtils_parseHex(_s8_2, t5.$index(0, _s8_2), t11);
          t11 = A.OnChainUtils_parseHex(_s9_0, t5.$index(0, _s9_0), t11);
          t13 = A.OnChainUtils_parseInt("version", t5.$index(0, "version"), type$.nullable_int);
          t13 = A.SmartContract$(t3, t6, t8, t11, t4, A.OnChainUtils_parseTronAddress(_s16_2, t5.$index(0, _s16_2), type$.nullable_TronAddress), t9, t1, t10, t12, t13);
          t12 = A.OnChainUtils_parseBigInt(_s16_3, json.$index(0, _s16_3), t7);
          t7 = A.OnChainUtils_parseBigInt(_s8_0, json.$index(0, _s8_0), t7);
          return new A.CreateSmartContract(t2, t13, J.$eq$(t12, $.$get$_BigIntImpl_zero()) ? _null : t12, t7);
        case B.TransactionContractType_19_SetAccountIdContract:
          t1 = A.OnChainUtils_parseBytes(_s10_2, json.$index(0, _s10_2), type$.List_int);
          t2 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress);
          return new A.SetAccountIdContract(A.BytesUtils_toBytes(t1, true), t2);
        case B.TransactionContractType_41_ExchangeCreateContract:
          t1 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress);
          t2 = type$.nullable_List_int;
          t3 = A.OnChainUtils_parseBytes(_s14_1, json.$index(0, _s14_1), t2);
          t4 = type$.nullable_BigInt;
          t5 = A.OnChainUtils_parseBigInt(_s19_0, json.$index(0, _s19_0), t4);
          t2 = A.OnChainUtils_parseBytes(_s15_0, json.$index(0, _s15_0), t2);
          t4 = A.OnChainUtils_parseBigInt(_s20_, json.$index(0, _s20_), t4);
          return new A.ExchangeCreateContract(t1, A.BytesUtils_tryToBytes(t3, true), t5, A.BytesUtils_tryToBytes(t2, true), t4);
        case B.TransactionContractType_42_ExchangeInjectContract:
          t1 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress);
          t2 = type$.nullable_BigInt;
          t3 = A.OnChainUtils_parseBigInt(_s11_1, json.$index(0, _s11_1), t2);
          t4 = A.OnChainUtils_parseBytes(_s8_0, json.$index(0, _s8_0), type$.nullable_List_int);
          t2 = A.OnChainUtils_parseBigInt(_s5_, json.$index(0, _s5_), t2);
          return new A.ExchangeInjectContract(t1, t3, A.BytesUtils_tryToBytes(t4, false), t2);
        case B.TransactionContractType_44_ExchangeTransactionContract:
          t1 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress);
          t2 = type$.nullable_BigInt;
          t3 = A.OnChainUtils_parseBigInt(_s11_1, json.$index(0, _s11_1), t2);
          t4 = A.OnChainUtils_parseBytes(_s8_0, json.$index(0, _s8_0), type$.nullable_List_int);
          t5 = A.OnChainUtils_parseBigInt(_s5_, json.$index(0, _s5_), t2);
          t2 = A.OnChainUtils_parseBigInt(_s8_3, json.$index(0, _s8_3), t2);
          return new A.ExchangeTransactionContract(t1, t3, A.BytesUtils_tryToBytes(t4, false), t5, t2);
        case B.TransactionContractType_43_ExchangeWithdrawContract:
          t1 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress);
          t2 = type$.nullable_BigInt;
          t3 = A.OnChainUtils_parseBigInt(_s11_1, json.$index(0, _s11_1), t2);
          t4 = A.OnChainUtils_parseBytes(_s8_0, json.$index(0, _s8_0), type$.nullable_List_int);
          t2 = A.OnChainUtils_parseBigInt(_s5_, json.$index(0, _s5_), t2);
          return new A.ExchangeWithdrawContract(t1, t3, A.BytesUtils_tryToBytes(t4, false), t2);
        case B.TransactionContractType_53_MarketCancelOrderContract:
          return new A.MarketCancelOrderContract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress), A.BytesUtils_tryToBytes(A.OnChainUtils_parseBytes(_s8_4, json.$index(0, _s8_4), type$.nullable_List_int), true));
        case B.TransactionContractType_52_MarketSellAssetContract:
          t1 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress);
          t2 = type$.nullable_List_int;
          t3 = A.OnChainUtils_parseBytes(_s13_0, json.$index(0, _s13_0), t2);
          t4 = type$.nullable_BigInt;
          t5 = A.OnChainUtils_parseBigInt(_s19_1, json.$index(0, _s19_1), t4);
          t2 = A.OnChainUtils_parseBytes(_s12_1, json.$index(0, _s12_1), t2);
          t4 = A.OnChainUtils_parseBigInt(_s18_, json.$index(0, _s18_), t4);
          return new A.MarketSellAssetContract(t1, A.BytesUtils_tryToBytes(t3, true), t5, A.BytesUtils_tryToBytes(t2, true), t4);
        case B.TransactionContractType_17_ProposalApproveContract:
          return new A.ProposalApproveContract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress), A.OnChainUtils_parseBigInt(_s11_2, json.$index(0, _s11_2), type$.nullable_BigInt), A.OnChainUtils_parseBoolean(_s15_1, json.$index(0, _s15_1), type$.nullable_bool));
        case B.TransactionContractType_16_ProposalCreateContract:
          return A.ProposalCreateContract_ProposalCreateContract$fromJson(json);
        case B.TransactionContractType_18_ProposalDeleteContract:
          return new A.ProposalDeleteContract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress), A.OnChainUtils_parseBigInt(_s11_2, json.$index(0, _s11_2), type$.nullable_BigInt));
        case B.TransactionContractType_51_ShieldedTransferContract:
          return A.ShieldedTransferContract_ShieldedTransferContract$fromJson(json);
        case B.TransactionContractType_48_ClearABIContract:
          t1 = type$.TronAddress;
          return new A.ClearABIContract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), t1), A.OnChainUtils_parseTronAddress(_s16_2, json.$index(0, _s16_2), t1));
        case B.TransactionContractType_45_UpdateEnergyLimitContract:
          t1 = type$.TronAddress;
          return new A.UpdateEnergyLimitContract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), t1), A.OnChainUtils_parseTronAddress(_s16_2, json.$index(0, _s16_2), t1), A.OnChainUtils_parseBigInt(_s19_, json.$index(0, _s19_), type$.nullable_BigInt));
        case B.TransactionContractType_33_UpdateSettingContract:
          t1 = type$.TronAddress;
          return new A.UpdateSettingContract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), t1), A.OnChainUtils_parseTronAddress(_s16_2, json.$index(0, _s16_2), t1), A.OnChainUtils_parseBigInt(_s29_, json.$index(0, _s29_), type$.nullable_BigInt));
        case B.TransactionContractType_49_UpdateBrokerageContract:
          return new A.UpdateBrokerageContract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress), A.OnChainUtils_parseInt(_s9_1, json.$index(0, _s9_1), type$.nullable_int));
        case B.TransactionContractType_3_VoteAssetContract:
          return A.VoteAssetContract_VoteAssetContract$fromJson(json);
        case B.TransactionContractType_4_VoteWitnessContract:
          return A.VoteWitnessContract_VoteWitnessContract$fromJson(json);
        case B.TransactionContractType_14_UnfreezeAssetContract:
          return new A.UnfreezeAssetContract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress));
        case B.TransactionContractType_8_WitnessUpdateContract:
          return new A.WitnessUpdateContract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress), A.BytesUtils_tryToBytes(A.OnChainUtils_parseBytes(_s10_3, json.$index(0, _s10_3), type$.nullable_List_int), true));
        case B.TransactionContractType_5_WitnessCreateContract:
          return new A.WitnessCreateContract(A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress), A.BytesUtils_tryToBytes(A.OnChainUtils_parseBytes(_s3_, json.$index(0, _s3_), type$.nullable_List_int), true));
        default:
          throw A.wrapException(A.TronPluginException$("Unsupported contract", A.LinkedHashMap_LinkedHashMap$_literal(["contract", contractType.name], type$.String, type$.dynamic)));
      }
    },
    TronProtocolBufferImpl: function TronProtocolBufferImpl() {
    },
    TronBaseContract: function TronBaseContract() {
    },
    ResourceCode_fromName($name, orElse) {
      var t1, exception;
      try {
        t1 = orElse == null ? null : new A.ResourceCode_fromName_closure(orElse);
        t1 = B.JSArray_methods.firstWhere$2$orElse(B.List_XsZ, new A.ResourceCode_fromName_closure0($name), t1);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    ResourceCode_fromValue(val, orElse) {
      var t1 = orElse == null ? null : new A.ResourceCode_fromValue_closure(orElse);
      return B.JSArray_methods.firstWhere$2$orElse(B.List_XsZ, new A.ResourceCode_fromValue_closure0(val), t1);
    },
    ResourceCode: function ResourceCode(t0, t1) {
      this.value = t0;
      this.name = t1;
    },
    ResourceCode_fromName_closure0: function ResourceCode_fromName_closure0(t0) {
      this.name = t0;
    },
    ResourceCode_fromName_closure: function ResourceCode_fromName_closure(t0) {
      this.orElse = t0;
    },
    ResourceCode_fromValue_closure0: function ResourceCode_fromValue_closure0(t0) {
      this.val = t0;
    },
    ResourceCode_fromValue_closure: function ResourceCode_fromValue_closure(t0) {
      this.orElse = t0;
    },
    TransactionContractType_findByName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_5KX, new A.TransactionContractType_findByName_closure($name), new A.TransactionContractType_findByName_closure0());
    },
    TransactionContractType_findByValue(value) {
      var t1, exception;
      try {
        t1 = B.JSArray_methods.firstWhere$1(B.List_5KX, new A.TransactionContractType_findByValue_closure(value));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    TransactionContractType: function TransactionContractType(t0, t1) {
      this.value = t0;
      this.name = t1;
    },
    TransactionContractType_findByName_closure: function TransactionContractType_findByName_closure(t0) {
      this.name = t0;
    },
    TransactionContractType_findByName_closure0: function TransactionContractType_findByName_closure0() {
    },
    TransactionContractType_findByValue_closure: function TransactionContractType_findByValue_closure(t0) {
      this.value = t0;
    },
    ExchangeCreateContract_ExchangeCreateContract$deserialize(bytes) {
      var t2, t3, t4, t5,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int),
        addr = A.TrxAddressUtils_fromHexBytes(t1);
      t1 = A.BytesUtils_toHexString(t1, true, null);
      t2 = type$.nullable_List_int;
      t3 = A.QuickProtocolBufferResults_getField0(decode, 2, t2);
      t4 = type$.nullable_BigInt;
      t5 = A.QuickProtocolBufferResults_getField0(decode, 3, t4);
      t2 = A.QuickProtocolBufferResults_getField0(decode, 4, t2);
      t4 = A.QuickProtocolBufferResults_getField0(decode, 5, t4);
      return new A.ExchangeCreateContract(new A.TronAddress(addr, t1), A.BytesUtils_tryToBytes(t3, true), t5, A.BytesUtils_tryToBytes(t2, true), t4);
    },
    ExchangeCreateContract: function ExchangeCreateContract(t0, t1, t2, t3, t4) {
      var _ = this;
      _.ownerAddress = t0;
      _.firstTokenId = t1;
      _.firstTokenBalance = t2;
      _.secondTokenId = t3;
      _.secondTokenBalance = t4;
    },
    ExchangeCreateContract_toJson_closure: function ExchangeCreateContract_toJson_closure() {
    },
    ExchangeInjectContract_ExchangeInjectContract$deserialize(bytes) {
      var t2, t3, t4,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int),
        addr = A.TrxAddressUtils_fromHexBytes(t1);
      t1 = A.BytesUtils_toHexString(t1, true, null);
      t2 = type$.nullable_BigInt;
      t3 = A.QuickProtocolBufferResults_getField0(decode, 2, t2);
      t4 = A.QuickProtocolBufferResults_getField0(decode, 3, type$.nullable_List_int);
      t2 = A.QuickProtocolBufferResults_getField0(decode, 4, t2);
      return new A.ExchangeInjectContract(new A.TronAddress(addr, t1), t3, A.BytesUtils_tryToBytes(t4, false), t2);
    },
    ExchangeInjectContract: function ExchangeInjectContract(t0, t1, t2, t3) {
      var _ = this;
      _.ownerAddress = t0;
      _.exchangeId = t1;
      _.tokenId = t2;
      _.quant = t3;
    },
    ExchangeInjectContract_toJson_closure: function ExchangeInjectContract_toJson_closure() {
    },
    ExchangeTransactionContract_ExchangeTransactionContract$deserialize(bytes) {
      var t2, t3, t4, t5,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int),
        addr = A.TrxAddressUtils_fromHexBytes(t1);
      t1 = A.BytesUtils_toHexString(t1, true, null);
      t2 = type$.nullable_BigInt;
      t3 = A.QuickProtocolBufferResults_getField0(decode, 2, t2);
      t4 = A.QuickProtocolBufferResults_getField0(decode, 3, type$.nullable_List_int);
      t5 = A.QuickProtocolBufferResults_getField0(decode, 4, t2);
      t2 = A.QuickProtocolBufferResults_getField0(decode, 5, t2);
      return new A.ExchangeTransactionContract(new A.TronAddress(addr, t1), t3, A.BytesUtils_tryToBytes(t4, false), t5, t2);
    },
    ExchangeTransactionContract: function ExchangeTransactionContract(t0, t1, t2, t3, t4) {
      var _ = this;
      _.ownerAddress = t0;
      _.exchangeId = t1;
      _.tokenId = t2;
      _.quant = t3;
      _.expected = t4;
    },
    ExchangeTransactionContract_toJson_closure: function ExchangeTransactionContract_toJson_closure() {
    },
    ExchangeWithdrawContract_ExchangeWithdrawContract$deserialize(bytes) {
      var t2, t3, t4,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int),
        addr = A.TrxAddressUtils_fromHexBytes(t1);
      t1 = A.BytesUtils_toHexString(t1, true, null);
      t2 = type$.nullable_BigInt;
      t3 = A.QuickProtocolBufferResults_getField0(decode, 2, t2);
      t4 = A.QuickProtocolBufferResults_getField0(decode, 3, type$.nullable_List_int);
      t2 = A.QuickProtocolBufferResults_getField0(decode, 4, t2);
      return new A.ExchangeWithdrawContract(new A.TronAddress(addr, t1), t3, A.BytesUtils_tryToBytes(t4, false), t2);
    },
    ExchangeWithdrawContract: function ExchangeWithdrawContract(t0, t1, t2, t3) {
      var _ = this;
      _.ownerAddress = t0;
      _.exchangeId = t1;
      _.tokenId = t2;
      _.quant = t3;
    },
    ExchangeWithdrawContract_toJson_closure: function ExchangeWithdrawContract_toJson_closure() {
    },
    MarketCancelOrderContract_MarketCancelOrderContract$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int);
      return new A.MarketCancelOrderContract(new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)), A.BytesUtils_tryToBytes(A.QuickProtocolBufferResults_getField0(decode, 2, type$.nullable_List_int), true));
    },
    MarketCancelOrderContract: function MarketCancelOrderContract(t0, t1) {
      this.ownerAddress = t0;
      this.orderId = t1;
    },
    MarketCancelOrderContract_toJson_closure: function MarketCancelOrderContract_toJson_closure() {
    },
    MarketSellAssetContract_MarketSellAssetContract$deserialize(bytes) {
      var t2, t3, t4, t5,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int),
        addr = A.TrxAddressUtils_fromHexBytes(t1);
      t1 = A.BytesUtils_toHexString(t1, true, null);
      t2 = type$.nullable_List_int;
      t3 = A.QuickProtocolBufferResults_getField0(decode, 2, t2);
      t4 = type$.nullable_BigInt;
      t5 = A.QuickProtocolBufferResults_getField0(decode, 3, t4);
      t2 = A.QuickProtocolBufferResults_getField0(decode, 4, t2);
      t4 = A.QuickProtocolBufferResults_getField0(decode, 5, t4);
      return new A.MarketSellAssetContract(new A.TronAddress(addr, t1), A.BytesUtils_tryToBytes(t3, true), t5, A.BytesUtils_tryToBytes(t2, true), t4);
    },
    MarketSellAssetContract: function MarketSellAssetContract(t0, t1, t2, t3, t4) {
      var _ = this;
      _.ownerAddress = t0;
      _.sellTokenId = t1;
      _.sellTokenQuantity = t2;
      _.buyTokenId = t3;
      _.buyTokenQuantity = t4;
    },
    MarketSellAssetContract_toJson_closure: function MarketSellAssetContract_toJson_closure() {
    },
    ProposalApproveContract_ProposalApproveContract$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int);
      return new A.ProposalApproveContract(new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)), A.QuickProtocolBufferResults_getField0(decode, 2, type$.nullable_BigInt), A.QuickProtocolBufferResults_getField0(decode, 3, type$.nullable_bool));
    },
    ProposalApproveContract: function ProposalApproveContract(t0, t1, t2) {
      this.ownerAddress = t0;
      this.proposalId = t1;
      this.isAddApproval = t2;
    },
    ProposalApproveContract_toJson_closure: function ProposalApproveContract_toJson_closure() {
    },
    ProposalCreateContract_ProposalCreateContract$fromJson(json) {
      var t3,
        _s13_ = "owner_address",
        _s10_ = "parameters",
        t1 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress),
        t2 = type$.dynamic;
      if (A.OnChainUtils_parseMap(_s10_, false, json.$index(0, _s10_), t2, t2) == null)
        t2 = null;
      else {
        t2 = type$.BigInt;
        t2 = type$.Map_dynamic_dynamic._as(json.$index(0, _s10_)).map$2$1(0, new A.ProposalCreateContract_ProposalCreateContract$fromJson_closure(), t2, t2);
      }
      if (t2 == null)
        t2 = null;
      else {
        t3 = type$.BigInt;
        t3 = A.ConstantMap_ConstantMap$from(t2, t3, t3);
        t2 = t3;
      }
      return new A.ProposalCreateContract(t1, t2);
    },
    ProposalCreateContract_ProposalCreateContract$deserialize(bytes) {
      var t2,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int),
        addr = A.TrxAddressUtils_fromHexBytes(t1);
      t1 = A.BytesUtils_toHexString(t1, true, null);
      t2 = type$.BigInt;
      t2 = A.ConstantMap_ConstantMap$from(A.QuickProtocolBufferResults_getMap(decode, 2, t2, t2), t2, t2);
      return new A.ProposalCreateContract(new A.TronAddress(addr, t1), t2);
    },
    ProposalCreateContract: function ProposalCreateContract(t0, t1) {
      this.ownerAddress = t0;
      this.parameters = t1;
    },
    ProposalCreateContract_ProposalCreateContract$fromJson_closure: function ProposalCreateContract_ProposalCreateContract$fromJson_closure() {
    },
    ProposalCreateContract_toJson_closure: function ProposalCreateContract_toJson_closure() {
    },
    ProposalDeleteContract_ProposalDeleteContract$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int);
      return new A.ProposalDeleteContract(new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)), A.QuickProtocolBufferResults_getField0(decode, 2, type$.nullable_BigInt));
    },
    ProposalDeleteContract: function ProposalDeleteContract(t0, t1) {
      this.ownerAddress = t0;
      this.proposalId = t1;
    },
    ReceiveDescription$(cEnc, cOut, epk, noteCommitment, valueCommitment, zkproof) {
      return new A.ReceiveDescription(A.BytesUtils_tryToBytes(valueCommitment, true), A.BytesUtils_tryToBytes(noteCommitment, true), A.BytesUtils_tryToBytes(epk, true), A.BytesUtils_tryToBytes(cEnc, true), A.BytesUtils_tryToBytes(cOut, true), A.BytesUtils_tryToBytes(zkproof, true));
    },
    ReceiveDescription: function ReceiveDescription(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.valueCommitment = t0;
      _.noteCommitment = t1;
      _.epk = t2;
      _.cEnc = t3;
      _.cOut = t4;
      _.zkproof = t5;
    },
    ReceiveDescription_toJson_closure: function ReceiveDescription_toJson_closure() {
    },
    ShieldedTransferContract_ShieldedTransferContract$fromJson(json) {
      var t5, t6,
        t1 = A.BytesUtils_tryFromHexString(A._asStringQ(json.$index(0, "transparent_from_address")), false),
        t2 = A.BigintUtils_tryParse(json.$index(0, "from_amount")),
        t3 = type$.nullable_List_dynamic,
        t4 = t3._as(json.$index(0, "spend_description"));
      if (t4 == null)
        t4 = null;
      else {
        t4 = J.map$1$1$ax(t4, new A.ShieldedTransferContract_ShieldedTransferContract$fromJson_closure(), type$.SpendDescription);
        t4 = A.List_List$_of(t4, t4.$ti._eval$1("ListIterable.E"));
      }
      t3 = t3._as(json.$index(0, "receive_description"));
      if (t3 == null)
        t3 = null;
      else {
        t3 = J.map$1$1$ax(t3, new A.ShieldedTransferContract_ShieldedTransferContract$fromJson_closure0(), type$.ReceiveDescription);
        t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      }
      t5 = A.BytesUtils_tryFromHexString(A._asStringQ(json.$index(0, "binding_signature")), false);
      t6 = A.BytesUtils_tryFromHexString(A._asStringQ(json.$index(0, "transparent_to_address")), false);
      return A.ShieldedTransferContract$(t5, t2, t3, t4, A.BigintUtils_tryParse(json.$index(0, "to_amount")), t1, t6);
    },
    ShieldedTransferContract_ShieldedTransferContract$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.nullable_List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        t3 = type$.nullable_BigInt,
        t4 = A.QuickProtocolBufferResults_getField0(decode, 2, t3),
        t5 = type$.dynamic,
        t6 = A.QuickProtocolBufferResults_getFields(decode, 3, t5),
        t7 = A._arrayInstanceType(t6),
        t8 = t7._eval$1("MappedListIterable<1,SpendDescription>");
      t6 = A.List_List$_of(new A.MappedListIterable(t6, t7._eval$1("SpendDescription(1)")._as(new A.ShieldedTransferContract_ShieldedTransferContract$deserialize_closure()), t8), t8._eval$1("ListIterable.E"));
      t5 = A.QuickProtocolBufferResults_getFields(decode, 4, t5);
      t7 = A._arrayInstanceType(t5);
      t8 = t7._eval$1("MappedListIterable<1,ReceiveDescription>");
      t5 = A.List_List$_of(new A.MappedListIterable(t5, t7._eval$1("ReceiveDescription(1)")._as(new A.ShieldedTransferContract_ShieldedTransferContract$deserialize_closure0()), t8), t8._eval$1("ListIterable.E"));
      t7 = A.QuickProtocolBufferResults_getField0(decode, 5, t1);
      t1 = A.QuickProtocolBufferResults_getField0(decode, 6, t1);
      return A.ShieldedTransferContract$(t7, t4, t5, t6, A.QuickProtocolBufferResults_getField0(decode, 7, t3), t2, t1);
    },
    ShieldedTransferContract$(bindingSignature, fromAmount, receiveDescription, spendDescription, toAmount, transparentFromAddress, transparentToAddress) {
      var t1 = A.BytesUtils_tryToBytes(transparentFromAddress, true),
        t2 = A.BytesUtils_tryToBytes(bindingSignature, true),
        t3 = A.BytesUtils_tryToBytes(transparentToAddress, true),
        t4 = spendDescription == null ? null : A.List_List$unmodifiable(spendDescription, type$.SpendDescription);
      return new A.ShieldedTransferContract(t1, fromAmount, t4, receiveDescription == null ? null : A.List_List$unmodifiable(receiveDescription, type$.ReceiveDescription), t2, t3, toAmount);
    },
    ShieldedTransferContract: function ShieldedTransferContract(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.transparentFromAddress = t0;
      _.fromAmount = t1;
      _.spendDescription = t2;
      _.receiveDescription = t3;
      _.bindingSignature = t4;
      _.transparentToAddress = t5;
      _.toAmount = t6;
    },
    ShieldedTransferContract_ShieldedTransferContract$fromJson_closure: function ShieldedTransferContract_ShieldedTransferContract$fromJson_closure() {
    },
    ShieldedTransferContract_ShieldedTransferContract$fromJson_closure0: function ShieldedTransferContract_ShieldedTransferContract$fromJson_closure0() {
    },
    ShieldedTransferContract_ShieldedTransferContract$deserialize_closure: function ShieldedTransferContract_ShieldedTransferContract$deserialize_closure() {
    },
    ShieldedTransferContract_ShieldedTransferContract$deserialize_closure0: function ShieldedTransferContract_ShieldedTransferContract$deserialize_closure0() {
    },
    ShieldedTransferContract_toJson_closure: function ShieldedTransferContract_toJson_closure() {
    },
    ShieldedTransferContract_toJson_closure0: function ShieldedTransferContract_toJson_closure0() {
    },
    ShieldedTransferContract_toJson_closure1: function ShieldedTransferContract_toJson_closure1() {
    },
    SpendDescription$(anchor, nullifier, rk, spendAuthoritySignature, valueCommitment, zkproof) {
      var t1 = A.BytesUtils_tryToBytes(valueCommitment, true),
        t2 = A.BytesUtils_tryToBytes(anchor, true),
        t3 = A.BytesUtils_tryToBytes(nullifier, true),
        t4 = A.BytesUtils_tryToBytes(rk, true),
        t5 = A.BytesUtils_tryToBytes(spendAuthoritySignature, true);
      return new A.SpendDescription(t1, t2, t3, t4, A.BytesUtils_tryToBytes(zkproof, true), t5);
    },
    SpendDescription: function SpendDescription(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.valueCommitment = t0;
      _.anchor = t1;
      _.nullifier = t2;
      _.rk = t3;
      _.zkproof = t4;
      _.spendAuthoritySignature = t5;
    },
    SpendDescription_toJson_closure: function SpendDescription_toJson_closure() {
    },
    SmartContractAbiEntryType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_PnG, new A.SmartContractAbiEntryType_fromName_closure($name), new A.SmartContractAbiEntryType_fromName_closure0());
    },
    SmartContractAbiEntryType_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_PnG, new A.SmartContractAbiEntryType_fromValue_closure(value), new A.SmartContractAbiEntryType_fromValue_closure0(null));
    },
    SmartContractAbiStateMutabilityType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_iKl, new A.SmartContractAbiStateMutabilityType_fromName_closure($name), new A.SmartContractAbiStateMutabilityType_fromName_closure0());
    },
    SmartContractAbiStateMutabilityType_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_iKl, new A.SmartContractAbiStateMutabilityType_fromValue_closure(value), new A.SmartContractAbiStateMutabilityType_fromValue_closure0(null));
    },
    SmartContractAbiEntryType: function SmartContractAbiEntryType(t0, t1) {
      this.value = t0;
      this.name = t1;
    },
    SmartContractAbiEntryType_fromName_closure: function SmartContractAbiEntryType_fromName_closure(t0) {
      this.name = t0;
    },
    SmartContractAbiEntryType_fromName_closure0: function SmartContractAbiEntryType_fromName_closure0() {
    },
    SmartContractAbiEntryType_fromValue_closure: function SmartContractAbiEntryType_fromValue_closure(t0) {
      this.value = t0;
    },
    SmartContractAbiEntryType_fromValue_closure0: function SmartContractAbiEntryType_fromValue_closure0(t0) {
      this.orElese = t0;
    },
    SmartContractAbiStateMutabilityType: function SmartContractAbiStateMutabilityType(t0, t1) {
      this.name = t0;
      this.value = t1;
    },
    SmartContractAbiStateMutabilityType_fromName_closure: function SmartContractAbiStateMutabilityType_fromName_closure(t0) {
      this.name = t0;
    },
    SmartContractAbiStateMutabilityType_fromName_closure0: function SmartContractAbiStateMutabilityType_fromName_closure0() {
    },
    SmartContractAbiStateMutabilityType_fromValue_closure: function SmartContractAbiStateMutabilityType_fromValue_closure(t0) {
      this.value = t0;
    },
    SmartContractAbiStateMutabilityType_fromValue_closure0: function SmartContractAbiStateMutabilityType_fromValue_closure0(t0) {
      this.orElese = t0;
    },
    ClearABIContract_ClearABIContract$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        addr = A.TrxAddressUtils_fromHexBytes(t2);
      t2 = A.BytesUtils_toHexString(t2, true, null);
      t1 = A.QuickProtocolBufferResults_getField0(decode, 2, t1);
      return new A.ClearABIContract(new A.TronAddress(addr, t2), new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)));
    },
    ClearABIContract: function ClearABIContract(t0, t1) {
      this.ownerAddress = t0;
      this.contractAddress = t1;
    },
    CreateSmartContract_CreateSmartContract$deserialize(bytes) {
      var t3, t4,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        addr = A.TrxAddressUtils_fromHexBytes(t2);
      t2 = A.BytesUtils_toHexString(t2, true, null);
      t1 = A.SmartContract_SmartContract$deserialize(A.QuickProtocolBufferResults_getField0(decode, 2, t1));
      t3 = type$.nullable_BigInt;
      t4 = A.QuickProtocolBufferResults_getField0(decode, 3, t3);
      t3 = A.QuickProtocolBufferResults_getField0(decode, 4, t3);
      if (J.$eq$(t4, $.$get$_BigIntImpl_zero()))
        t4 = null;
      return new A.CreateSmartContract(new A.TronAddress(addr, t2), t1, t4, t3);
    },
    CreateSmartContract: function CreateSmartContract(t0, t1, t2, t3) {
      var _ = this;
      _.ownerAddress = t0;
      _.newContract = t1;
      _.callTokenValue = t2;
      _.tokenId = t3;
    },
    CreateSmartContract_toJson_closure: function CreateSmartContract_toJson_closure() {
    },
    SmartContract_SmartContract$deserialize(bytes) {
      var t3, t4, t5, t6, t7, t8, t9, t10, t11, t12,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        addr = A.TrxAddressUtils_fromHexBytes(t2);
      t2 = A.BytesUtils_toHexString(t2, true, null);
      t3 = A.QuickProtocolBufferResults_getField0(decode, 4, t1);
      t4 = type$.nullable_BigInt;
      t5 = A.QuickProtocolBufferResults_getField0(decode, 5, t4);
      t6 = type$.nullable_ProtocolBufferDecoderResult_dynamic;
      t7 = A.QuickProtocolBufferResults_getResult(decode, 3, t6);
      t7 = t7 == null ? null : A.QuickProtocolBufferResult_castTo(t7, new A.SmartContract_SmartContract$deserialize_closure(), type$.SmartContractABI, t1);
      t8 = A.QuickProtocolBufferResults_getField0(decode, 6, t4);
      t9 = A.QuickProtocolBufferResults_getField0(decode, 7, type$.nullable_String);
      t4 = A.QuickProtocolBufferResults_getField0(decode, 8, t4);
      t10 = type$.nullable_List_int;
      t11 = A.QuickProtocolBufferResults_getField0(decode, 10, t10);
      t10 = A.QuickProtocolBufferResults_getField0(decode, 9, t10);
      t12 = A.QuickProtocolBufferResults_getField0(decode, 11, type$.nullable_int);
      t6 = A.QuickProtocolBufferResults_getResult(decode, 2, t6);
      t1 = t6 == null ? null : A.QuickProtocolBufferResult_castTo(t6, new A.SmartContract_SmartContract$deserialize_closure0(), type$.TronAddress, t1);
      return A.SmartContract$(t7, t3, t5, t10, t8, t1, t9, new A.TronAddress(addr, t2), t4, t11, t12);
    },
    SmartContract$(abi, bytecode, callValue, codeHash, consumeUserResourcePercent, contractAddress, $name, originAddress, originEnergyLimit, trxHash, version) {
      var t1 = A.BytesUtils_toBytes(bytecode, true),
        t2 = A.BytesUtils_tryToBytes(trxHash, true);
      return new A.SmartContract(originAddress, contractAddress, abi, t1, callValue, consumeUserResourcePercent, $name, originEnergyLimit, A.BytesUtils_tryToBytes(codeHash, true), t2, version);
    },
    SmartContract: function SmartContract(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.originAddress = t0;
      _.contractAddress = t1;
      _.abi = t2;
      _.bytecode = t3;
      _.callValue = t4;
      _.consumeUserResourcePercent = t5;
      _.name = t6;
      _.originEnergyLimit = t7;
      _.codeHash = t8;
      _.trxHash = t9;
      _.version = t10;
    },
    SmartContract_SmartContract$deserialize_closure: function SmartContract_SmartContract$deserialize_closure() {
    },
    SmartContract_SmartContract$deserialize_closure0: function SmartContract_SmartContract$deserialize_closure0() {
    },
    SmartContract_toJson_closure: function SmartContract_toJson_closure() {
    },
    SmartContractABI_SmartContractABI$fromJson(json) {
      var t2, t3,
        t1 = A.OnChainUtils_parseList("entrys", false, json.$index(0, "entrys"), type$.dynamic);
      if (t1 == null)
        t1 = null;
      else {
        t2 = A._arrayInstanceType(t1);
        t3 = t2._eval$1("MappedListIterable<1,SmartContractABIEntry>");
        t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("SmartContractABIEntry(1)")._as(new A.SmartContractABI_SmartContractABI$fromJson_closure()), t3), t3._eval$1("ListIterable.E"));
      }
      if (t1 == null)
        t1 = A._setArrayType([], type$.JSArray_SmartContractABIEntry);
      return new A.SmartContractABI(A.List_List$unmodifiable(t1, type$.SmartContractABIEntry));
    },
    SmartContractABI_SmartContractABI$deserialize(bytes) {
      var t1 = A.QuickProtocolBufferResults_getFields(A.ProtocolBufferDecoder_decode0(bytes), 1, type$.List_int),
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,SmartContractABIEntry>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("SmartContractABIEntry(1)")._as(new A.SmartContractABI_SmartContractABI$deserialize_closure()), t3), t3._eval$1("ListIterable.E"));
      return new A.SmartContractABI(A.List_List$unmodifiable(t1, type$.SmartContractABIEntry));
    },
    SmartContractABI: function SmartContractABI(t0) {
      this.entrys = t0;
    },
    SmartContractABI_SmartContractABI$fromJson_closure: function SmartContractABI_SmartContractABI$fromJson_closure() {
    },
    SmartContractABI_SmartContractABI$deserialize_closure: function SmartContractABI_SmartContractABI$deserialize_closure() {
    },
    SmartContractABI_toJson_closure: function SmartContractABI_toJson_closure() {
    },
    SmartContractABIEntry_SmartContractABIEntry$fromJson(json) {
      var t8, t9,
        _s9_ = "anonymous",
        _s15_ = "stateMutability",
        _s8_ = "constant",
        t1 = type$.nullable_bool,
        t2 = A.OnChainUtils_parseBoolean(_s9_, json.$index(0, _s9_), t1),
        t3 = A.SmartContractAbiEntryType_fromName(A.OnChainUtils_parseString("type", json.$index(0, "type"), type$.String)),
        t4 = type$.nullable_String,
        t5 = A.OnChainUtils_parseString(_s15_, json.$index(0, _s15_), t4) == null ? null : A.SmartContractAbiStateMutabilityType_fromName(A._asString(json.$index(0, _s15_))),
        t6 = type$.dynamic,
        t7 = A.OnChainUtils_parseList("inputs", false, json.$index(0, "inputs"), t6);
      if (t7 == null)
        t7 = null;
      else {
        t8 = A._arrayInstanceType(t7);
        t9 = t8._eval$1("MappedListIterable<1,SmartContractBABIEntryParam>");
        t7 = A.List_List$_of(new A.MappedListIterable(t7, t8._eval$1("SmartContractBABIEntryParam(1)")._as(new A.SmartContractABIEntry_SmartContractABIEntry$fromJson_closure()), t9), t9._eval$1("ListIterable.E"));
      }
      t6 = A.OnChainUtils_parseList("outputs", false, json.$index(0, "outputs"), t6);
      if (t6 == null)
        t6 = null;
      else {
        t8 = A._arrayInstanceType(t6);
        t9 = t8._eval$1("MappedListIterable<1,SmartContractBABIEntryParam>");
        t6 = A.List_List$_of(new A.MappedListIterable(t6, t8._eval$1("SmartContractBABIEntryParam(1)")._as(new A.SmartContractABIEntry_SmartContractABIEntry$fromJson_closure0()), t9), t9._eval$1("ListIterable.E"));
      }
      return A.SmartContractABIEntry$(t2, A.OnChainUtils_parseBoolean(_s8_, json.$index(0, _s8_), t1), t7, A.OnChainUtils_parseString("name", json.$index(0, "name"), t4), t6, A.OnChainUtils_parseBoolean("payable", json.$index(0, "payable"), t1), t5, t3);
    },
    SmartContractABIEntry$(anonymous, constant, inputs, $name, outputs, payable, stateMutability, type) {
      var t1, t2, _null = null;
      if (inputs == null)
        t1 = _null;
      else {
        t1 = B.JSArray_methods.get$isEmpty(inputs) ? _null : inputs;
        t1 = t1 == null ? _null : A.List_List$unmodifiable(t1, type$.SmartContractBABIEntryParam);
      }
      if (outputs == null)
        t2 = _null;
      else {
        t2 = B.JSArray_methods.get$isEmpty(outputs) ? _null : outputs;
        t2 = t2 == null ? _null : A.List_List$unmodifiable(t2, type$.SmartContractBABIEntryParam);
      }
      return new A.SmartContractABIEntry(anonymous, constant, $name, t1, t2, type, payable, stateMutability);
    },
    SmartContractABIEntry_SmartContractABIEntry$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.nullable_bool,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        t3 = A.QuickProtocolBufferResults_getField0(decode, 2, t1),
        t4 = A.QuickProtocolBufferResults_getField0(decode, 3, type$.nullable_String),
        t5 = type$.dynamic,
        t6 = A.QuickProtocolBufferResults_getFields(decode, 4, t5),
        t7 = A._arrayInstanceType(t6),
        t8 = t7._eval$1("MappedListIterable<1,SmartContractBABIEntryParam>");
      t6 = A.List_List$_of(new A.MappedListIterable(t6, t7._eval$1("SmartContractBABIEntryParam(1)")._as(new A.SmartContractABIEntry_SmartContractABIEntry$deserialize_closure()), t8), t8._eval$1("ListIterable.E"));
      t5 = A.QuickProtocolBufferResults_getFields(decode, 5, t5);
      t7 = A._arrayInstanceType(t5);
      t8 = t7._eval$1("MappedListIterable<1,SmartContractBABIEntryParam>");
      t5 = A.List_List$_of(new A.MappedListIterable(t5, t7._eval$1("SmartContractBABIEntryParam(1)")._as(new A.SmartContractABIEntry_SmartContractABIEntry$deserialize_closure0()), t8), t8._eval$1("ListIterable.E"));
      t7 = type$.nullable_int;
      t8 = A.SmartContractAbiEntryType_fromValue(A.QuickProtocolBufferResults_getField0(decode, 6, t7));
      t1 = A.QuickProtocolBufferResults_getField0(decode, 7, t1);
      return A.SmartContractABIEntry$(t2, t3, t6, t4, t5, t1, A.QuickProtocolBufferResults_getField0(decode, 8, t7) == null ? null : A.SmartContractAbiStateMutabilityType_fromValue(A.QuickProtocolBufferResults_getField0(decode, 8, t7)), t8);
    },
    SmartContractABIEntry: function SmartContractABIEntry(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.anonymous = t0;
      _.constant = t1;
      _.name = t2;
      _.inputs = t3;
      _.outputs = t4;
      _.type = t5;
      _.payable = t6;
      _.stateMutability = t7;
    },
    SmartContractABIEntry_SmartContractABIEntry$fromJson_closure: function SmartContractABIEntry_SmartContractABIEntry$fromJson_closure() {
    },
    SmartContractABIEntry_SmartContractABIEntry$fromJson_closure0: function SmartContractABIEntry_SmartContractABIEntry$fromJson_closure0() {
    },
    SmartContractABIEntry_SmartContractABIEntry$deserialize_closure: function SmartContractABIEntry_SmartContractABIEntry$deserialize_closure() {
    },
    SmartContractABIEntry_SmartContractABIEntry$deserialize_closure0: function SmartContractABIEntry_SmartContractABIEntry$deserialize_closure0() {
    },
    SmartContractABIEntry_toJson_closure: function SmartContractABIEntry_toJson_closure() {
    },
    SmartContractABIEntry_toJson_closure0: function SmartContractABIEntry_toJson_closure0() {
    },
    SmartContractBABIEntryParam_SmartContractBABIEntryParam$fromJson(json) {
      var t1 = A.OnChainUtils_parseString("type", json.$index(0, "type"), type$.String),
        t2 = A.OnChainUtils_parseString("name", json.$index(0, "name"), type$.nullable_String);
      return new A.SmartContractBABIEntryParam(A.OnChainUtils_parseBoolean("indexed", json.$index(0, "indexed"), type$.nullable_bool), t2, t1);
    },
    SmartContractBABIEntryParam_SmartContractBABIEntryParam$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 3, type$.String),
        t2 = A.QuickProtocolBufferResults_getField0(decode, 2, type$.nullable_String);
      return new A.SmartContractBABIEntryParam(A.QuickProtocolBufferResults_getField0(decode, 1, type$.nullable_bool), t2, t1);
    },
    SmartContractBABIEntryParam: function SmartContractBABIEntryParam(t0, t1, t2) {
      this.indexed = t0;
      this.name = t1;
      this.type = t2;
    },
    SmartContractBABIEntryParam_toJson_closure: function SmartContractBABIEntryParam_toJson_closure() {
    },
    TriggerSmartContract_TriggerSmartContract$deserialize(bytes) {
      var addr0, t3, t4, t5, t6,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        addr = A.TrxAddressUtils_fromHexBytes(t2);
      t2 = A.BytesUtils_toHexString(t2, true, null);
      t1 = A.QuickProtocolBufferResults_getField0(decode, 2, t1);
      addr0 = A.TrxAddressUtils_fromHexBytes(t1);
      t1 = A.BytesUtils_toHexString(t1, true, null);
      t3 = type$.nullable_BigInt;
      t4 = A.QuickProtocolBufferResults_getField0(decode, 3, t3);
      t5 = A.QuickProtocolBufferResults_getField0(decode, 4, type$.nullable_List_int);
      t6 = A.QuickProtocolBufferResults_getField0(decode, 5, t3);
      t3 = A.QuickProtocolBufferResults_getField0(decode, 6, t3);
      return new A.TriggerSmartContract(new A.TronAddress(addr, t2), new A.TronAddress(addr0, t1), t4, A.BytesUtils_tryToBytes(t5, true), t6, t3);
    },
    TriggerSmartContract: function TriggerSmartContract(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.ownerAddress = t0;
      _.contractAddress = t1;
      _.callValue = t2;
      _.data = t3;
      _.callTokenValue = t4;
      _.tokenId = t5;
    },
    TriggerSmartContract_toJson_closure: function TriggerSmartContract_toJson_closure() {
    },
    UpdateEnergyLimitContract_UpdateEnergyLimitContract$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        addr = A.TrxAddressUtils_fromHexBytes(t2);
      t2 = A.BytesUtils_toHexString(t2, true, null);
      t1 = A.QuickProtocolBufferResults_getField0(decode, 2, t1);
      return new A.UpdateEnergyLimitContract(new A.TronAddress(addr, t2), new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)), A.QuickProtocolBufferResults_getField0(decode, 3, type$.nullable_BigInt));
    },
    UpdateEnergyLimitContract: function UpdateEnergyLimitContract(t0, t1, t2) {
      this.ownerAddress = t0;
      this.contractAddress = t1;
      this.originEnergyLimit = t2;
    },
    UpdateEnergyLimitContract_toJson_closure: function UpdateEnergyLimitContract_toJson_closure() {
    },
    UpdateSettingContract_UpdateSettingContract$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        addr = A.TrxAddressUtils_fromHexBytes(t2);
      t2 = A.BytesUtils_toHexString(t2, true, null);
      t1 = A.QuickProtocolBufferResults_getField0(decode, 2, t1);
      return new A.UpdateSettingContract(new A.TronAddress(addr, t2), new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)), A.QuickProtocolBufferResults_getField0(decode, 3, type$.nullable_BigInt));
    },
    UpdateSettingContract: function UpdateSettingContract(t0, t1, t2) {
      this.ownerAddress = t0;
      this.contractAddress = t1;
      this.consumeUserResourcePercent = t2;
    },
    UpdateSettingContract_toJson_closure: function UpdateSettingContract_toJson_closure() {
    },
    UpdateBrokerageContract_UpdateBrokerageContract$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int);
      return new A.UpdateBrokerageContract(new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)), A.QuickProtocolBufferResults_getField0(decode, 2, type$.nullable_int));
    },
    UpdateBrokerageContract: function UpdateBrokerageContract(t0, t1) {
      this.ownerAddress = t0;
      this.brokerage = t1;
    },
    Any_Any$deserialize(bytes) {
      var contractType, contractBytes, contract,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.String,
        typeUrl = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        parts = typeUrl.split("type.googleapis.com/protocol.");
      if (parts.length !== 2)
        throw A.wrapException(B.TronPluginException_0cD);
      contractType = A.TransactionContractType_findByName(B.JSArray_methods.get$last(parts));
      contractBytes = A.QuickProtocolBufferResults_getField0(decode, 2, type$.List_int);
      switch (contractType) {
        case B.TransactionContractType_1_TransferContract:
          contract = A.TransferContract_TransferContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_6_AssetIssueContract:
          contract = A.AssetIssueContract_AssetIssueContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_59_CancelAllUnfreezeV2Contract:
          contract = A.CancelAllUnfreezeV2Contract_CancelAllUnfreezeV2Contract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_15_UpdateAssetContract:
          contract = A.UpdateAssetContract_UpdateAssetContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_9_ParticipateAssetIssueContract:
          contract = A.ParticipateAssetIssueContract_ParticipateAssetIssueContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_2_TransferAssetContract:
          contract = A.TransferAssetContract_TransferAssetContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_0_AccountCreateContract:
          contract = A.AccountCreateContract_AccountCreateContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_10_AccountUpdateContract:
          contract = A.AccountUpdateContract_AccountUpdateContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_54_FreezeBalanceV2Contract:
          contract = A.FreezeBalanceV2Contract_FreezeBalanceV2Contract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_55_UnfreezeBalanceV2Contract:
          contract = A.UnfreezeBalanceV2Contract_UnfreezeBalanceV2Contract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_13_WithdrawBalanceContract:
          contract = A.WithdrawBalanceContract_WithdrawBalanceContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_uit:
          contract = A.WithdrawExpireUnfreezeContract_WithdrawExpireUnfreezeContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_57_DelegateResourceContract:
          contract = A.DelegateResourceContract_DelegateResourceContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_58_UnDelegateResourceContract:
          contract = A.UnDelegateResourceContract_UnDelegateResourceContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_12_UnfreezeBalanceContract:
          contract = A.UnfreezeBalanceContract_UnfreezeBalanceContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_11_FreezeBalanceContract:
          contract = A.FreezeBalanceContract_FreezeBalanceContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_T2s:
          contract = A.AccountPermissionUpdateContract_AccountPermissionUpdateContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_31_TriggerSmartContract:
          contract = A.TriggerSmartContract_TriggerSmartContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_30_CreateSmartContract:
          contract = A.CreateSmartContract_CreateSmartContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_19_SetAccountIdContract:
          contract = A.SetAccountIdContract_SetAccountIdContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_41_ExchangeCreateContract:
          contract = A.ExchangeCreateContract_ExchangeCreateContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_42_ExchangeInjectContract:
          contract = A.ExchangeInjectContract_ExchangeInjectContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_44_ExchangeTransactionContract:
          contract = A.ExchangeTransactionContract_ExchangeTransactionContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_43_ExchangeWithdrawContract:
          contract = A.ExchangeWithdrawContract_ExchangeWithdrawContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_53_MarketCancelOrderContract:
          contract = A.MarketCancelOrderContract_MarketCancelOrderContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_52_MarketSellAssetContract:
          contract = A.MarketSellAssetContract_MarketSellAssetContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_17_ProposalApproveContract:
          contract = A.ProposalApproveContract_ProposalApproveContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_16_ProposalCreateContract:
          contract = A.ProposalCreateContract_ProposalCreateContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_18_ProposalDeleteContract:
          contract = A.ProposalDeleteContract_ProposalDeleteContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_51_ShieldedTransferContract:
          contract = A.ShieldedTransferContract_ShieldedTransferContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_48_ClearABIContract:
          contract = A.ClearABIContract_ClearABIContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_45_UpdateEnergyLimitContract:
          contract = A.UpdateEnergyLimitContract_UpdateEnergyLimitContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_33_UpdateSettingContract:
          contract = A.UpdateSettingContract_UpdateSettingContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_49_UpdateBrokerageContract:
          contract = A.UpdateBrokerageContract_UpdateBrokerageContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_3_VoteAssetContract:
          contract = A.VoteAssetContract_VoteAssetContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_4_VoteWitnessContract:
          contract = A.VoteWitnessContract_VoteWitnessContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_14_UnfreezeAssetContract:
          contract = A.UnfreezeAssetContract_UnfreezeAssetContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_8_WitnessUpdateContract:
          contract = A.WitnessUpdateContract_WitnessUpdateContract$deserialize(contractBytes);
          break;
        case B.TransactionContractType_5_WitnessCreateContract:
          contract = A.WitnessCreateContract_WitnessCreateContract$deserialize(contractBytes);
          break;
        default:
          throw A.wrapException(A.TronPluginException$("Unsupported contract", A.LinkedHashMap_LinkedHashMap$_literal(["contract", contractType.name], t1, type$.dynamic)));
      }
      return new A.Any0(typeUrl, contract);
    },
    Any_Any$fromJson0(json) {
      var contractType, t2, t3, contractBytes,
        _s8_ = "type_url",
        _s5_ = "value",
        t1 = type$.String,
        typeUrl = A.OnChainUtils_parseString(_s8_, json.$index(0, _s8_), t1),
        parts = typeUrl.split("type.googleapis.com/protocol.");
      if (parts.length !== 2)
        throw A.wrapException(B.TronPluginException_zSB);
      contractType = A.TransactionContractType_findByName(B.JSArray_methods.get$last(parts));
      if (typeof json.$index(0, _s5_) == "string") {
        t2 = A._asString(json.$index(0, _s5_));
        t3 = $.$get$StringUtils__hexBytesRegex();
        t2 = t3._nativeRegExp.test(t2);
      } else
        t2 = false;
      if (t2) {
        contractBytes = A.BytesUtils_tryFromHexString(A._asStringQ(json.$index(0, _s5_)), false);
        if (contractBytes != null)
          return new A.Any0(typeUrl, A.TronBaseContract_TronBaseContract$deserialize(contractBytes, contractType));
      }
      t1 = A.OnChainUtils_parseMap(_s5_, true, json.$index(0, _s5_), t1, type$.dynamic);
      t1.toString;
      return new A.Any0(typeUrl, A.TronBaseContract_TronBaseContract$fromJson(contractType, t1));
    },
    Any0: function Any0(t0, t1) {
      this.typeUrl = t0;
      this.value = t1;
    },
    Transaction_Transaction$fromJson(json) {
      var signature,
        rawData = A.TransactionRaw_TransactionRaw$fromJson(type$.Map_String_dynamic._as(json.$index(0, "raw_data"))),
        t1 = type$.nullable_List_dynamic._as(json.$index(0, "signature"));
      if (t1 == null)
        signature = null;
      else {
        t1 = J.map$1$1$ax(t1, new A.Transaction_Transaction$fromJson_closure(), type$.List_int);
        t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
        signature = t1;
      }
      return A.Transaction$(rawData, signature == null ? A._setArrayType([], type$.JSArray_List_int) : signature);
    },
    Transaction$(rawData, signature) {
      var t1 = A._arrayInstanceType(signature),
        t2 = t1._eval$1("MappedListIterable<1,List<int>>");
      t1 = A.List_List$_of(new A.MappedListIterable(signature, t1._eval$1("List<int>(1)")._as(new A.Transaction_closure()), t2), t2._eval$1("ListIterable.E"));
      return new A.Transaction(rawData, t1);
    },
    Transaction_Transaction$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int;
      return A.Transaction$(A.TransactionRaw_TransactionRaw$deserialize(A.QuickProtocolBufferResults_getField0(decode, 1, t1)), A.QuickProtocolBufferResults_getFields(decode, 2, t1));
    },
    Transaction: function Transaction(t0, t1) {
      this.rawData = t0;
      this.signature = t1;
      this.__Transaction_length_FI = $;
    },
    Transaction_Transaction$fromJson_closure: function Transaction_Transaction$fromJson_closure() {
    },
    Transaction_closure: function Transaction_closure() {
    },
    Transaction_toJson_closure: function Transaction_toJson_closure() {
    },
    TransactionContract: function TransactionContract(t0, t1, t2, t3, t4) {
      var _ = this;
      _.type = t0;
      _.parameter = t1;
      _.provider = t2;
      _.contractName = t3;
      _.permissionId = t4;
    },
    TransactionContract_toJson_closure: function TransactionContract_toJson_closure() {
    },
    TransactionRaw_TransactionRaw$fromJson(json) {
      var t3, t4, contractList, t5, t6, t7, t8, t9, t10, t11,
        _s8_ = "contract",
        _s15_ = "ref_block_bytes",
        _s14_ = "ref_block_hash",
        _s10_ = "expiration",
        _s9_ = "timestamp",
        _s9_0 = "fee_limit",
        _s13_ = "ref_block_num",
        t1 = type$.dynamic,
        t2 = A.OnChainUtils_parseList(_s8_, true, json.$index(0, _s8_), t1);
      t2.toString;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,TransactionContract>");
      contractList = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("TransactionContract(1)")._as(new A.TransactionRaw_TransactionRaw$fromJson_closure()), t4), t4._eval$1("ListIterable.E"));
      if (contractList.length !== 1)
        throw A.wrapException(B.TronPluginException_8A0);
      t2 = type$.List_int;
      t3 = A.OnChainUtils_parseHex(_s15_, json.$index(0, _s15_), t2);
      t2 = A.OnChainUtils_parseHex(_s14_, json.$index(0, _s14_), t2);
      t4 = type$.BigInt;
      t5 = A.OnChainUtils_parseBigInt(_s10_, json.$index(0, _s10_), t4);
      t4 = A.OnChainUtils_parseBigInt(_s9_, json.$index(0, _s9_), t4);
      t6 = type$.nullable_List_int;
      t7 = A.OnChainUtils_parseBytes("data", json.$index(0, "data"), t6);
      t8 = type$.nullable_BigInt;
      t9 = A.OnChainUtils_parseBigInt(_s9_0, json.$index(0, _s9_0), t8);
      t8 = A.OnChainUtils_parseBigInt(_s13_, json.$index(0, _s13_), t8);
      t6 = A.OnChainUtils_parseHex("scripts", json.$index(0, "scripts"), t6);
      t1 = A.OnChainUtils_parseList("auths", false, json.$index(0, "auths"), t1);
      if (t1 == null)
        t1 = null;
      else {
        t10 = A._arrayInstanceType(t1);
        t11 = t10._eval$1("MappedListIterable<1,Authority>");
        t1 = A.List_List$_of(new A.MappedListIterable(t1, t10._eval$1("Authority(1)")._as(new A.TransactionRaw_TransactionRaw$fromJson_closure0()), t11), t11._eval$1("ListIterable.E"));
      }
      return A.TransactionRaw$(t1, contractList, t7, t5, t9, t3, t2, t8, t6, t4);
    },
    TransactionRaw_TransactionRaw$deserialize(bytes) {
      var t5, t6, t7, t8, t9,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = type$.List_int,
        t2 = A.QuickProtocolBufferResults_getFields(decode, 11, t1),
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,TransactionContract>"),
        contracts = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("TransactionContract(1)")._as(new A.TransactionRaw_TransactionRaw$deserialize_closure()), t4), t4._eval$1("ListIterable.E"));
      if (contracts.length !== 1)
        throw A.wrapException(B.TronPluginException_8A0);
      t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1);
      t3 = type$.nullable_BigInt;
      t4 = A.QuickProtocolBufferResults_getField0(decode, 3, t3);
      t5 = A.QuickProtocolBufferResults_getField0(decode, 4, t1);
      t6 = type$.BigInt;
      t7 = A.QuickProtocolBufferResults_getField0(decode, 8, t6);
      t1 = A.QuickProtocolBufferResults_getFields(decode, 9, t1);
      t8 = A._arrayInstanceType(t1);
      t9 = t8._eval$1("MappedListIterable<1,Authority>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t8._eval$1("Authority(1)")._as(new A.TransactionRaw_TransactionRaw$deserialize_closure0()), t9), t9._eval$1("ListIterable.E"));
      t8 = type$.nullable_List_int;
      t9 = A.QuickProtocolBufferResults_getField0(decode, 10, t8);
      t8 = A.QuickProtocolBufferResults_getField0(decode, 12, t8);
      t6 = A.QuickProtocolBufferResults_getField0(decode, 14, t6);
      return A.TransactionRaw$(t1, contracts, t9, t7, A.QuickProtocolBufferResults_getField0(decode, 18, t3), t2, t5, t4, t8, t6);
    },
    TransactionRaw$(auths, contract, data, expiration, feeLimit, refBlockBytes, refBlockHash, refBlockNum, scripts, timestamp) {
      var t1, t2, t3, t4, t5, t6, _null = null;
      A.BytesUtils_validateListOfBytes(refBlockBytes);
      t1 = type$.int;
      t2 = A.List_List$unmodifiable(refBlockBytes, t1);
      A.BytesUtils_validateListOfBytes(refBlockHash);
      t3 = A.List_List$unmodifiable(refBlockHash, t1);
      t4 = _null;
      if (!(data == null)) {
        t5 = J.get$isEmpty$asx(data) ? _null : data;
        if (!(t5 == null)) {
          A.BytesUtils_validateListOfBytes(t5);
          t4 = A.List_List$unmodifiable(t5, t1);
        }
      }
      t5 = _null;
      if (scripts == null)
        t1 = t5;
      else {
        t6 = J.get$isEmpty$asx(scripts) ? _null : scripts;
        if (t6 == null)
          t1 = t5;
        else {
          A.BytesUtils_validateListOfBytes(t6);
          t1 = A.List_List$unmodifiable(t6, t1);
        }
      }
      if (auths == null)
        t5 = _null;
      else {
        t5 = B.JSArray_methods.get$isEmpty(auths) ? _null : auths;
        t5 = t5 == null ? _null : A.List_List$unmodifiable(t5, type$.Authority);
      }
      return new A.TransactionRaw(t2, refBlockNum, t3, expiration, t5, t4, A.List_List$unmodifiable(contract, type$.TransactionContract), t1, timestamp, feeLimit);
    },
    TransactionRaw: function TransactionRaw(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.refBlockBytes = t0;
      _.refBlockNum = t1;
      _.refBlockHash = t2;
      _.expiration = t3;
      _.auths = t4;
      _.data = t5;
      _.contract = t6;
      _.scripts = t7;
      _.timestamp = t8;
      _.feeLimit = t9;
      _.__TransactionRaw_length_FI = _.__TransactionRaw_txID_FI = $;
    },
    TransactionRaw_TransactionRaw$fromJson_closure: function TransactionRaw_TransactionRaw$fromJson_closure() {
    },
    TransactionRaw_TransactionRaw$fromJson_closure0: function TransactionRaw_TransactionRaw$fromJson_closure0() {
    },
    TransactionRaw_TransactionRaw$deserialize_closure: function TransactionRaw_TransactionRaw$deserialize_closure() {
    },
    TransactionRaw_TransactionRaw$deserialize_closure0: function TransactionRaw_TransactionRaw$deserialize_closure0() {
    },
    TransactionRaw_toJson_closure: function TransactionRaw_toJson_closure() {
    },
    TransactionRaw_toJson_closure0: function TransactionRaw_toJson_closure0() {
    },
    TransactionRaw_toJson_closure1: function TransactionRaw_toJson_closure1() {
    },
    VoteAssetContract_VoteAssetContract$fromJson(json) {
      var t4, t5,
        _s13_ = "owner_address",
        _s12_ = "vote_address",
        t1 = type$.TronAddress,
        t2 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), t1),
        t3 = A.OnChainUtils_parseList(_s12_, true, json.$index(0, _s12_), type$.String);
      t3.toString;
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,TronAddress>");
      t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("TronAddress(1)")._as(new A.VoteAssetContract_VoteAssetContract$fromJson_closure()), t5), t5._eval$1("ListIterable.E"));
      t4 = A.OnChainUtils_parseBoolean("support", json.$index(0, "support"), type$.nullable_bool);
      t5 = A.OnChainUtils_parseInt("count", json.$index(0, "count"), type$.nullable_int);
      return new A.VoteAssetContract(t2, A.List_List$unmodifiable(t3, t1), t4, t5);
    },
    VoteAssetContract_VoteAssetContract$deserialize(bytes) {
      var t2, t3, t4,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int),
        addr = A.TrxAddressUtils_fromHexBytes(t1);
      t1 = A.BytesUtils_toHexString(t1, true, null);
      t2 = A.QuickProtocolBufferResults_getFields(decode, 2, type$.dynamic);
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,TronAddress>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("TronAddress(1)")._as(new A.VoteAssetContract_VoteAssetContract$deserialize_closure()), t4), t4._eval$1("ListIterable.E"));
      t3 = A.QuickProtocolBufferResults_getField0(decode, 3, type$.nullable_bool);
      t4 = A.QuickProtocolBufferResults_getField0(decode, 5, type$.nullable_int);
      return new A.VoteAssetContract(new A.TronAddress(addr, t1), A.List_List$unmodifiable(t2, type$.TronAddress), t3, t4);
    },
    VoteAssetContract: function VoteAssetContract(t0, t1, t2, t3) {
      var _ = this;
      _.ownerAddress = t0;
      _.voteAddress = t1;
      _.support = t2;
      _.count = t3;
    },
    VoteAssetContract_VoteAssetContract$fromJson_closure: function VoteAssetContract_VoteAssetContract$fromJson_closure() {
    },
    VoteAssetContract_VoteAssetContract$deserialize_closure: function VoteAssetContract_VoteAssetContract$deserialize_closure() {
    },
    VoteAssetContract_toJson_closure: function VoteAssetContract_toJson_closure() {
    },
    VoteAssetContract_toJson_closure0: function VoteAssetContract_toJson_closure0() {
    },
    VoteWitnessContract_VoteWitnessContract$fromJson(json) {
      var t3, t4,
        _s13_ = "owner_address",
        t1 = A.OnChainUtils_parseTronAddress(_s13_, json.$index(0, _s13_), type$.TronAddress),
        t2 = A.OnChainUtils_parseList("votes", false, json.$index(0, "votes"), type$.dynamic);
      if (t2 == null)
        t2 = null;
      else {
        t3 = A._arrayInstanceType(t2);
        t4 = t3._eval$1("MappedListIterable<1,VoteWitnessContractVote>");
        t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("VoteWitnessContractVote(1)")._as(new A.VoteWitnessContract_VoteWitnessContract$fromJson_closure()), t4), t4._eval$1("ListIterable.E"));
      }
      t3 = A.OnChainUtils_parseBoolean("support", json.$index(0, "support"), type$.nullable_bool);
      return new A.VoteWitnessContract(t1, t2 == null ? null : A.List_List$unmodifiable(t2, type$.VoteWitnessContractVote), t3);
    },
    VoteWitnessContract_VoteWitnessContract$deserialize(bytes) {
      var t2, t3, t4,
        decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int),
        addr = A.TrxAddressUtils_fromHexBytes(t1);
      t1 = A.BytesUtils_toHexString(t1, true, null);
      t2 = A.QuickProtocolBufferResults_getFields(decode, 2, type$.dynamic);
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,VoteWitnessContractVote>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("VoteWitnessContractVote(1)")._as(new A.VoteWitnessContract_VoteWitnessContract$deserialize_closure()), t4), t4._eval$1("ListIterable.E"));
      t3 = A.QuickProtocolBufferResults_getField0(decode, 3, type$.nullable_bool);
      t2 = A.List_List$unmodifiable(t2, type$.VoteWitnessContractVote);
      return new A.VoteWitnessContract(new A.TronAddress(addr, t1), t2, t3);
    },
    VoteWitnessContract: function VoteWitnessContract(t0, t1, t2) {
      this.ownerAddress = t0;
      this.votes = t1;
      this.support = t2;
    },
    VoteWitnessContract_VoteWitnessContract$fromJson_closure: function VoteWitnessContract_VoteWitnessContract$fromJson_closure() {
    },
    VoteWitnessContract_VoteWitnessContract$deserialize_closure: function VoteWitnessContract_VoteWitnessContract$deserialize_closure() {
    },
    VoteWitnessContract_toJson_closure: function VoteWitnessContract_toJson_closure() {
    },
    VoteWitnessContract_toJson_closure0: function VoteWitnessContract_toJson_closure0() {
    },
    VoteWitnessContractVote: function VoteWitnessContractVote(t0, t1) {
      this.voteAddress = t0;
      this.voteCount = t1;
    },
    WitnessUpdateContract_WitnessUpdateContract$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int);
      return new A.WitnessUpdateContract(new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)), A.BytesUtils_tryToBytes(A.QuickProtocolBufferResults_getField0(decode, 2, type$.nullable_List_int), true));
    },
    WitnessUpdateContract: function WitnessUpdateContract(t0, t1) {
      this.ownerAddress = t0;
      this.updateUrl = t1;
    },
    WitnessUpdateContract_toJson_closure: function WitnessUpdateContract_toJson_closure() {
    },
    WitnessCreateContract_WitnessCreateContract$deserialize(bytes) {
      var decode = A.ProtocolBufferDecoder_decode0(bytes),
        t1 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.List_int);
      return new A.WitnessCreateContract(new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)), A.BytesUtils_tryToBytes(A.QuickProtocolBufferResults_getField0(decode, 2, type$.nullable_List_int), true));
    },
    WitnessCreateContract: function WitnessCreateContract(t0, t1) {
      this.ownerAddress = t0;
      this.url = t1;
    },
    WitnessCreateContract_toJson_closure: function WitnessCreateContract_toJson_closure() {
    },
    ProtocolBufferDecoder_decode0(bytes) {
      var t1, t2, t3, index, decodeTag, tag, fieldId, wireType, decodeLength, t4, index0, decodeInt,
        results = A._setArrayType([], type$.JSArray_ProtocolBufferDecoderResult_dynamic_2);
      for (t1 = J.getInterceptor$asx(bytes), t2 = type$.ProtocolBufferDecoderResult_dynamic_2, t3 = type$.ProtocolBufferDecoderResult_List_int, index = 0; index < t1.get$length(bytes);) {
        decodeTag = A.ProtocolBufferDecoder__decodeVarint0(t1.sublist$1(bytes, index));
        index += decodeTag.consumed;
        tag = decodeTag.value;
        fieldId = tag >>> 3;
        wireType = tag & 7;
        switch (wireType) {
          case 2:
            decodeLength = A.ProtocolBufferDecoder__decodeVarint0(t1.sublist$1(bytes, index));
            index += decodeLength.consumed;
            t4 = decodeLength.value;
            if (typeof t4 !== "number")
              return A.iae(t4);
            index0 = index + t4;
            B.JSArray_methods.add$1(results, new A.ProtocolBufferDecoderResult0(fieldId, t1.sublist$2(bytes, index, index0), t3));
            index = index0;
            break;
          case 0:
            decodeInt = A.ProtocolBufferDecoder__decodeInt0(t1.sublist$1(bytes, index));
            index += decodeInt.consumed;
            B.JSArray_methods.add$1(results, new A.ProtocolBufferDecoderResult0(fieldId, decodeInt.value, t2));
            break;
          default:
            throw A.wrapException(A.TronPluginException$("protobuf wiretype not supported. filedId :" + fieldId + " " + wireType + " " + A.S(tag), null));
        }
      }
      return results;
    },
    ProtocolBufferDecoder__decodeVarint0(data) {
      var t1, value, shift, index, index0, byte;
      for (t1 = data.length, value = 0, shift = 0, index = 0; true; index = index0) {
        index0 = index + 1;
        if (!(index < t1))
          return A.ioore(data, index);
        byte = data[index];
        value = (value | B.JSInt_methods._shlPositive$1(byte & 127, shift)) >>> 0;
        if ((byte & 128) === 0) {
          index = index0;
          break;
        }
        shift += 7;
      }
      return new A._Result0(value, index, type$._Result_int_2);
    },
    ProtocolBufferDecoder__decodeBigVarint0(data) {
      var shift, index, index0, byte,
        value = $.$get$_BigIntImpl_zero();
      for (shift = 0, index = 0; true; index = index0) {
        index0 = index + 1;
        if (!(index < data.length))
          return A.ioore(data, index);
        byte = data[index];
        value = value.$or(0, A._BigIntImpl__BigIntImpl$from(byte & 127).$shl(0, shift));
        if ((byte & 128) === 0) {
          index = index0;
          break;
        }
        shift += 7;
      }
      return new A._Result0(value, index, type$._Result_BigInt_2);
    },
    ProtocolBufferDecoder__decodeInt0(data) {
      if (J.indexWhere$1$ax(data, new A.ProtocolBufferDecoder__decodeInt_closure0()) < 4)
        return A.ProtocolBufferDecoder__decodeVarint0(data);
      return A.ProtocolBufferDecoder__decodeBigVarint0(data);
    },
    QuickProtocolBufferResults_getField0(_this, tag, $T) {
      var result, t1, exception;
      try {
        result = B.JSArray_methods.firstWhere$1(_this, new A.QuickProtocolBufferResults_getField_closure1(tag));
        t1 = A.QuickProtocolBufferResult_get0(result, $T);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError) {
          if ($T._is(null)) {
            $T._as(null);
            return null;
          }
          throw A.wrapException(A.TronPluginException$("field id does not exist.", A.LinkedHashMap_LinkedHashMap$_literal(["fieldIds", B.JSArray_methods.map$1$1(_this, new A.QuickProtocolBufferResults_getField_closure2(), type$.int).join$1(0, ", "), "id", tag], type$.String, type$.dynamic)));
        } else
          throw exception;
      }
    },
    QuickProtocolBufferResults_getResult(_this, id, $T) {
      var result, t1, exception;
      try {
        result = B.JSArray_methods.firstWhere$1(_this, new A.QuickProtocolBufferResults_getResult_closure(id));
        t1 = $T._as(result);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError) {
          if ($T._is(null)) {
            $T._as(null);
            return null;
          }
          throw A.wrapException(A.TronPluginException$("field id does not exist.", A.LinkedHashMap_LinkedHashMap$_literal(["fieldIds", B.JSArray_methods.map$1$1(_this, new A.QuickProtocolBufferResults_getResult_closure0(), type$.int).join$1(0, ", "), "id", id], type$.String, type$.dynamic)));
        } else
          throw exception;
      }
    },
    QuickProtocolBufferResults_getFields(_this, tag, $T) {
      var t1 = A._arrayInstanceType(_this),
        t2 = t1._eval$1("WhereIterable<1>"),
        result = new A.WhereIterable(_this, t1._eval$1("bool(1)")._as(new A.QuickProtocolBufferResults_getFields_closure(tag)), t2);
      result.get$iterator(0).moveNext$0();
      t1 = t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedIterable<1,2>");
      t1 = A.List_List$_of(new A.MappedIterable(result, t2._bind$1($T)._eval$1("1(2)")._as(new A.QuickProtocolBufferResults_getFields_closure0($T)), t1), t1._eval$1("Iterable.E"));
      return t1;
    },
    QuickProtocolBufferResults_getMap(_this, tagId, $K, $V) {
      var data, t3, decode,
        t1 = A._arrayInstanceType(_this),
        t2 = t1._eval$1("bool(1)")._as(new A.QuickProtocolBufferResults_getMap_closure(tagId));
      new A.WhereIterable(_this, t2, t1._eval$1("WhereIterable<1>")).get$iterator(0).moveNext$0();
      data = A.LinkedHashMap_LinkedHashMap$_empty($K, $V);
      for (t3 = B.JSArray_methods.get$iterator(_this), t1 = new A.WhereIterator(t3, t2, t1._eval$1("WhereIterator<1>")), t2 = type$.List_int; t1.moveNext$0();) {
        decode = A.ProtocolBufferDecoder_decode0(t2._as(t3.get$current().value));
        data.addAll$1(0, A.LinkedHashMap_LinkedHashMap$_literal([A.QuickProtocolBufferResults_getField0(decode, 1, $K), A.QuickProtocolBufferResults_getField0(decode, 2, $V)], $K, $V));
      }
      return data;
    },
    QuickProtocolBufferResult_get0(_this, $T) {
      var t2,
        t1 = _this.value;
      if ($T._is(t1))
        return $T._as(t1);
      t2 = type$.List_int;
      if (t2._is(t1) && $T._is(""))
        return $T._as(A.StringUtils_decode(t2._as(t1), false, B.StringEncoding_1));
      if (A._isInt(t1)) {
        if ($T._is($.$get$_BigIntImpl_zero()))
          return $T._as(A._BigIntImpl__BigIntImpl$from(t1));
        else if ($T._is(false)) {
          if (t1 !== 0 && t1 !== 1)
            throw A.wrapException(A.TronPluginException$("Invalid boolean value.", A.LinkedHashMap_LinkedHashMap$_literal(["value", t1], type$.String, type$.dynamic)));
          return $T._as(t1 === 1);
        }
      } else if (t1 instanceof A._BigIntImpl && $T._is(0))
        return $T._as(t1.toInt$0(0));
      throw A.wrapException(A.TronPluginException$("Invalid type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", A.createRuntimeType($T).toString$0(0), "expected", J.get$runtimeType$(t1).toString$0(0)], type$.String, type$.dynamic)));
    },
    QuickProtocolBufferResult_cast(_this, $T) {
      var t2,
        t1 = _this.value;
      if ($T._is(t1))
        return $T._as(t1);
      if (A._isInt(t1))
        if ($T._is($.$get$_BigIntImpl_zero()))
          return $T._as(A._BigIntImpl__BigIntImpl$from(t1));
        else if (A.createRuntimeType($T) === B.Type_bool_wF1) {
          if (t1 !== 0 && t1 !== 1)
            throw A.wrapException(A.TronPluginException$("Invalid boolean value.", A.LinkedHashMap_LinkedHashMap$_literal(["value", t1], type$.String, type$.dynamic)));
          return $T._as(t1 === 1);
        }
      if (t1 instanceof A._BigIntImpl && $T._is(0))
        if (t1.get$isValidInt())
          return $T._as(t1.toInt$0(0));
      t2 = type$.List_int;
      if (t2._is(t1) && A.createRuntimeType($T) === B.Type_String_AXU)
        return $T._as(A.StringUtils_decode(t2._as(t1), false, B.StringEncoding_1));
      throw A.wrapException(A.TronPluginException$("cannot cast value.", A.LinkedHashMap_LinkedHashMap$_literal(["Type", A.createRuntimeType($T).toString$0(0), "expected", J.get$runtimeType$(t1).toString$0(0), "value", t1], type$.String, type$.dynamic)));
    },
    QuickProtocolBufferResult_castTo(_this, toe, $E, $T) {
      return toe.call$1(A.QuickProtocolBufferResult_cast(_this, $T));
    },
    ProtocolBufferDecoder__decodeInt_closure0: function ProtocolBufferDecoder__decodeInt_closure0() {
    },
    ProtocolBufferDecoderResult0: function ProtocolBufferDecoderResult0(t0, t1, t2) {
      this.tagNumber = t0;
      this.value = t1;
      this.$ti = t2;
    },
    _Result0: function _Result0(t0, t1, t2) {
      this.value = t0;
      this.consumed = t1;
      this.$ti = t2;
    },
    QuickProtocolBufferResults_getField_closure1: function QuickProtocolBufferResults_getField_closure1(t0) {
      this.tag = t0;
    },
    QuickProtocolBufferResults_getField_closure2: function QuickProtocolBufferResults_getField_closure2() {
    },
    QuickProtocolBufferResults_getResult_closure: function QuickProtocolBufferResults_getResult_closure(t0) {
      this.id = t0;
    },
    QuickProtocolBufferResults_getResult_closure0: function QuickProtocolBufferResults_getResult_closure0() {
    },
    QuickProtocolBufferResults_getFields_closure: function QuickProtocolBufferResults_getFields_closure(t0) {
      this.tag = t0;
    },
    QuickProtocolBufferResults_getFields_closure0: function QuickProtocolBufferResults_getFields_closure0(t0) {
      this.T = t0;
    },
    QuickProtocolBufferResults_getMap_closure: function QuickProtocolBufferResults_getMap_closure(t0) {
      this.tagId = t0;
    },
    QuickMap_as0(_this, key, $T) {
      var t1, exception,
        value = _this.$index(0, key);
      if (value == null) {
        if ($T._is(null)) {
          $T._as(null);
          return null;
        }
        throw A.wrapException(A.DartSuiPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      }
      try {
        t1 = $T._as(value);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception)))
          throw A.wrapException(A.DartSuiPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "expected", A.createRuntimeType($T).toString$0(0), "value", J.get$runtimeType$(value), "data", _this], type$.String, type$.dynamic)));
        else
          throw exception;
      }
    },
    QuickMap_asMap0(_this, key, $E) {
      var value, t1, exception;
      if (!$E._is(B.Map_empty))
        throw A.wrapException(B.DartSuiPluginException_Tkp);
      value = A.QuickMap_as0(_this, key, type$.nullable_Map_dynamic_dynamic);
      if (value == null) {
        if ($E._is(null)) {
          $E._as(null);
          return null;
        }
        throw A.wrapException(A.DartSuiPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      }
      try {
        t1 = $E._as(value.cast$2$0(0, type$.String, type$.dynamic));
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception)))
          throw A.wrapException(A.DartSuiPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "expected", A.createRuntimeType($E).toString$0(0), "value", A.getRuntimeTypeOfDartObject(value), "data", _this], type$.String, type$.dynamic)));
        else
          throw exception;
      }
    },
    QuickMap_asBytes0(_this, key, $E) {
      var value, t1, exception;
      if (!$E._is(A._setArrayType([], type$.JSArray_int)))
        throw A.wrapException(B.DartSuiPluginException_97b);
      value = A.QuickMap_as0(_this, key, type$.nullable_List_dynamic);
      if (value == null) {
        if ($E._is(null)) {
          $E._as(null);
          return null;
        }
        throw A.wrapException(A.DartSuiPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      }
      try {
        t1 = $E._as(J.cast$1$0$ax(value, type$.int));
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception)))
          throw A.wrapException(A.DartSuiPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "expected", A.createRuntimeType($E).toString$0(0), "value", J.get$runtimeType$(value), "data", _this], type$.String, type$.dynamic)));
        else
          throw exception;
      }
    },
    QuickMap_asListOfMap0(_this, key) {
      var e, s, t1, exception,
        value = A.QuickMap_as0(_this, key, type$.nullable_List_dynamic);
      if (value == null)
        throw A.wrapException(A.DartSuiPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      try {
        t1 = J.map$1$1$ax(value, new A.QuickMap_asListOfMap_closure0(), type$.Map_String_dynamic);
        t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
        return t1;
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        throw A.wrapException(A.DartSuiPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "value", J.get$runtimeType$(value), "data", _this, "error", J.toString$0$(e), "stack", J.toString$0$(s)], type$.String, type$.dynamic)));
      }
    },
    QuickMap_asListOfBytes(_this, key) {
      var e, s, t1, exception,
        value = A.QuickMap_as0(_this, key, type$.nullable_List_dynamic);
      if (value == null)
        throw A.wrapException(A.DartSuiPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      try {
        t1 = J.map$1$1$ax(value, new A.QuickMap_asListOfBytes_closure(), type$.List_int);
        t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
        return t1;
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        throw A.wrapException(A.DartSuiPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "value", J.get$runtimeType$(value), "data", _this, "error", J.toString$0$(e), "stack", J.toString$0$(s)], type$.String, type$.dynamic)));
      }
    },
    QuickMap__valueAsList0(_this, key, $T, $E) {
      var value, t1, exception;
      if (!$E._is(B.List_empty2))
        throw A.wrapException(B.DartSuiPluginException_JbI);
      value = A.QuickMap_as0(_this, key, type$.nullable_List_dynamic);
      if (value == null) {
        if ($E._is(null)) {
          $E._as(null);
          return null;
        }
        throw A.wrapException(A.DartSuiPluginException$("Key not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "data", _this], type$.String, type$.dynamic)));
      }
      try {
        if ($T._is(B.Map_empty)) {
          t1 = J.map$1$1$ax(value, new A.QuickMap__valueAsList_closure0(), type$.Map_String_dynamic);
          t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
          $E._as(t1);
          return t1;
        }
        t1 = $E._as(J.cast$1$0$ax(value, $T));
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception)))
          throw A.wrapException(A.DartSuiPluginException$("Incorrect value.", A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "expected", A.createRuntimeType($T).toString$0(0), "value", J.get$runtimeType$(value), "data", _this], type$.String, type$.dynamic)));
        else
          throw exception;
      }
    },
    QuickMap_mybeAs(_this, key, onValue, $E, $T) {
      if (_this.$index(0, key) != null) {
        if ($T._is(B.Map_empty))
          return onValue.call$1(A.QuickMap_asMap0(_this, key, $T));
        if ($T._is(B.List_empty2))
          return onValue.call$1(A.QuickMap__valueAsList0(_this, key, type$.dynamic, $T));
        return onValue.call$1(A.QuickMap_as0(_this, key, $T));
      }
      return null;
    },
    QuickMap_asListOfMap_closure0: function QuickMap_asListOfMap_closure0() {
    },
    QuickMap_asListOfBytes_closure: function QuickMap_asListOfBytes_closure() {
    },
    QuickMap__valueAsList_closure0: function QuickMap__valueAsList_closure0() {
    },
    OnChainBridgeException: function OnChainBridgeException(t0) {
      this.message = t0;
    },
    AppPlatform: function AppPlatform(t0) {
      this._name = t0;
    },
    WalletEventTypes_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_Dpv, new A.WalletEventTypes_fromName_closure($name), new A.WalletEventTypes_fromName_closure0($name));
    },
    WalletEvent$(additional, clientId, data, platform, requestId, target, type) {
      return new A.WalletEvent(target, clientId, A.List_List$unmodifiable(data, type$.int), requestId, type, additional, platform);
    },
    WalletEventTypes: function WalletEventTypes(t0) {
      this._name = t0;
    },
    WalletEventTypes_fromName_closure: function WalletEventTypes_fromName_closure(t0) {
      this.name = t0;
    },
    WalletEventTypes_fromName_closure0: function WalletEventTypes_fromName_closure0(t0) {
      this.name = t0;
    },
    WalletEventTarget: function WalletEventTarget(t0) {
      this._name = t0;
    },
    WalletEvent: function WalletEvent(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.target = t0;
      _.clientId = t1;
      _.data = t2;
      _.requestId = t3;
      _.type = t4;
      _.additional = t5;
      _.platform = t6;
    },
    JSOBJ_keys_(val) {
      var t1;
      if (val == null)
        return null;
      t1 = type$.nullable_JSArray_nullable_Object._as(init.G.Object.keys(val));
      if (t1 == null)
        t1 = null;
      else {
        t1 = type$.List_String._is(t1) ? t1 : new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("CastList<1,String>"));
        t1 = J.map$1$1$ax(t1, new A.JSOBJ_keys__closure(), type$.String);
        t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      }
      return t1;
    },
    JSOBJ_as(keys, object, $T) {
      var properties, i, t1, _i, exception;
      try {
        properties = A.JSOBJ_keys_(object);
        if (properties == null)
          return null;
        for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
          i = keys[_i];
          if (!J.contains$1$asx(properties, i))
            return null;
        }
        $T._as(object);
        return object;
      } catch (exception) {
        return null;
      }
    },
    JSOBJ_keys__closure: function JSOBJ_keys__closure() {
    },
    JSWebSocket_constructor_create(url, protocols) {
      var t1 = init.G.WebSocket,
        t2 = A._arrayInstanceType(protocols),
        t3 = t2._eval$1("MappedListIterable<1,String>");
      t2 = A.List_List$_of(new A.MappedListIterable(protocols, t2._eval$1("String(1)")._as(new A.JSWebSocket_constructor_create_closure()), t3), t3._eval$1("ListIterable.E"));
      return type$.JSObject._as(new t1(url, t2));
    },
    JSWebSocket_constructor_create_closure: function JSWebSocket_constructor_create_closure() {
    },
    Window_fetch_(_this, url) {
      return A.Window_fetch_$body(_this, url);
    },
    Window_fetch_$body(_this, url) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, t1;
      var $async$Window_fetch_ = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = type$.JSObject;
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(t1._as(_this.fetch(url)), t1), $async$Window_fetch_);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Window_fetch_, $async$completer);
    },
    Response_text_(_this) {
      return A.Response_text_$body(_this);
    },
    Response_text_$body(_this) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue;
      var $async$Response_text_ = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(type$.JSObject._as(_this.text()), type$.String), $async$Response_text_);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Response_text_, $async$completer);
    },
    WebEventStream_stream(_this, type, $T) {
      var _null = null,
        controller = A.StreamController_StreamController(_null, _null, _null, _null, false, $T),
        callback = A._functionToJS1(new A.WebEventStream_stream_closure(controller, $T));
      controller.set$onCancel(new A.WebEventStream_stream_closure0(_this, type, callback));
      _this.addEventListener(type, callback);
      return new A._ControllerStream(controller, A._instanceType(controller)._eval$1("_ControllerStream<1>"));
    },
    CustomEvent_constructor_create(clone, detail, type) {
      var t1, t2;
      if (A.isExtension() && type$.nullable_JavaScriptFunction._as(init.G.cloneInto) != null) {
        t1 = init.G;
        t2 = type$.JSObject;
        detail = type$.Object._as(t1.cloneInto(detail, t2._as(t2._as(t1.window).document).defaultView));
      }
      return type$.JSObject._as(new init.G.CustomEvent(type, {bubbles: true, cancelable: false, detail: detail, data: null}));
    },
    WebEventStream_stream_closure: function WebEventStream_stream_closure(t0, t1) {
      this.controller = t0;
      this.T = t1;
    },
    WebEventStream_stream_closure0: function WebEventStream_stream_closure0(t0, t1, t2) {
      this._this = t0;
      this.type = t1;
      this.callback = t2;
    },
    JSWalletEvent_toEvent(_this) {
      var e, t1, t2, t3, t4, t5, t6, t7, t8, exception;
      try {
        t1 = A._asStringQ(_this.client_id);
        t1.toString;
        t2 = type$.nullable_JSArray_nullable_Object._as(_this.data);
        t2.toString;
        if (!type$.List_double._is(t2))
          t2 = new A.CastList(t2, A._arrayInstanceType(t2)._eval$1("CastList<1,double>"));
        t3 = type$.int;
        t2 = A.List_List$from(t2, true, t3);
        t4 = A._asStringQ(_this.request_id);
        t4.toString;
        t5 = A._asStringQ(_this.type);
        t5.toString;
        t5 = A.WalletEventTypes_fromName(t5);
        t6 = A._asStringQ(_this.additional);
        t7 = A._asStringQ(_this.platform);
        t8 = B.JSArray_methods.firstWhere$1(B.List_zqX, new A.JSWalletEvent_toEvent_closure(_this));
        t3 = A.List_List$unmodifiable(t2, t3);
        return new A.WalletEvent(t8, t1, t3, t4, t5, t6, t7);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.S(e);
        t2 = A._asStringQ(_this.client_id);
        t3 = type$.nullable_JSArray_nullable_Object._as(_this.data);
        t3.toString;
        if (!type$.List_double._is(t3))
          t3 = new A.CastList(t3, A._arrayInstanceType(t3)._eval$1("CastList<1,double>"));
        A.printString("got error " + t1 + " " + A.LinkedHashMap_LinkedHashMap$_literal(["id", t2, "data", A.List_List$from(t3, true, type$.int), "additional", A._asStringQ(_this.additional), "request_id", A._asStringQ(_this.request_id), "type", A._asStringQ(_this.type), "platform", A._asStringQ(_this.platform), "target", A._asStringQ(_this.target)], type$.String, type$.dynamic).toString$0(0));
        return null;
      }
    },
    ToJsEvent_toJsEvent(_this) {
      var t1 = _this.data,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,double>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("double(1)")._as(new A.ToJsEvent_toJsEvent_closure()), t3), t3._eval$1("ListIterable.E"));
      t1 = {data: t1, type: _this.type._name, additional: _this.additional, platform: _this.platform, target: _this.target._name};
      t1.client_id = _this.clientId;
      t1.request_id = _this.requestId;
      return t1;
    },
    JSWalletEvent_toEvent_closure: function JSWalletEvent_toEvent_closure(t0) {
      this._this = t0;
    },
    ToJsEvent_toJsEvent_closure: function ToJsEvent_toJsEvent_closure() {
    },
    ApiProviderException$_(code, message, responseData, statusCode) {
      return new A.ApiProviderException(message, code);
    },
    ApiProviderException_ApiProviderException$error(message) {
      return new A.ApiProviderException(message, null);
    },
    ApiProviderException_ApiProviderException$fromException(message, statusCode) {
      var t1, t2, decode, t3, msg, _null = null,
        defaultError = B.JSArray_methods.contains$1(B.List_RqR, statusCode) ? "http_error_" + A.S(statusCode) : "request_error";
      if (message == null)
        return new A.ApiProviderException(defaultError, _null);
      else if (message instanceof A.ClientException)
        return new A.ApiProviderException("api_http_client_error", _null);
      else if (message instanceof A.TimeoutException)
        return new A.ApiProviderException("api_http_timeout_error", _null);
      else if (type$.FormatException._is(message))
        return new A.ApiProviderException("format_exception", _null);
      else if (message instanceof A.ApiProviderException)
        return message;
      else if (message instanceof A.RPCError)
        return new A.ApiProviderException(message.message, message.errorCode);
      else {
        t1 = typeof message == "string";
        if (t1) {
          t2 = A.RegExp_RegExp("<(html|head|body|title|h1|h2|h3|h4|h5|h6|p|div|span|a|form|table|img)[^>]*>", false);
          t2 = t2._nativeRegExp.test(message);
        } else
          t2 = false;
        if (t2)
          return new A.ApiProviderException(defaultError, _null);
      }
      decode = A.StringUtils_tryToJson(message, type$.Map_String_dynamic);
      t2 = decode == null;
      t3 = t2 ? _null : decode.$index(0, "message");
      if (t3 == null)
        t3 = t2 ? _null : decode.$index(0, "error");
      if (t3 == null)
        t2 = t2 ? _null : decode.$index(0, "Error");
      else
        t2 = t3;
      msg = t2 == null ? _null : J.toString$0$(t2);
      if (msg == null && t1 && B.JSString_methods.trim$0(message).length !== 0)
        msg = message;
      t1 = msg == null;
      if (t1 && !B.JSArray_methods.contains$1(B.List_RqR, statusCode))
        return new A.ApiProviderException("api_unknown_error", _null);
      return new A.ApiProviderException(t1 ? defaultError : msg, _null);
    },
    ApiProviderException: function ApiProviderException(t0, t1) {
      this.message = t0;
      this.code = t1;
    },
    WalletException$invalidArgruments(_argruments) {
      return new A.WalletException("", _argruments);
    },
    WalletException$(message) {
      return new A.WalletException(message, null);
    },
    WalletException: function WalletException(t0, t1) {
      this.message = t0;
      this._argruments = t1;
    },
    Equatable: function Equatable() {
    },
    HTTPCaller_post(authenticated, body, clientType, headers, platform, timeout, type, uri) {
      return A.HTTPCaller_post$body(authenticated, body, clientType, headers, platform, timeout, type, uri);
    },
    HTTPCaller_post$body(authenticated, body, clientType, headers, platform, timeout, type, uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HTTPCallerResponse),
        $async$returnValue, data;
      var $async$HTTPCaller_post = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($.$get$HTTPCaller__clientManager().call$6$authenticated$clientType$headers$method$t$uri(authenticated, clientType, headers, B.HTTPRequestType_POST_post, new A.HTTPCaller_post_closure(body, timeout), uri), $async$HTTPCaller_post);
            case 3:
              // returning from await.
              data = $async$result;
              $async$returnValue = A.HTTPCallerResponse_HTTPCallerResponse$parse(data.bodyBytes, platform, data.statusCode, type);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$HTTPCaller_post, $async$completer);
    },
    HTTPCaller_get(authenticated, clientType, headers, platform, timeout, type, uri) {
      return A.HTTPCaller_get$body(authenticated, clientType, headers, platform, timeout, type, uri);
    },
    HTTPCaller_get$body(authenticated, clientType, headers, platform, timeout, type, uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HTTPCallerResponse),
        $async$returnValue, data;
      var $async$HTTPCaller_get = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($.$get$HTTPCaller__clientManager().call$6$authenticated$clientType$headers$method$t$uri(authenticated, clientType, headers, B.HTTPRequestType_POST_post, new A.HTTPCaller_get_closure(timeout), uri), $async$HTTPCaller_get);
            case 3:
              // returning from await.
              data = $async$result;
              $async$returnValue = A.HTTPCallerResponse_HTTPCallerResponse$parse(data.bodyBytes, platform, data.statusCode, type);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$HTTPCaller_get, $async$completer);
    },
    HTTPCaller_post_closure: function HTTPCaller_post_closure(t0, t1) {
      this.body = t0;
      this.timeout = t1;
    },
    HTTPCaller_get_closure: function HTTPCaller_get_closure(t0) {
      this.timeout = t0;
    },
    HttpImpl: function HttpImpl() {
    },
    HTTPServiceWorker: function HTTPServiceWorker() {
    },
    FailedHttpIsolateInitialization: function FailedHttpIsolateInitialization() {
    },
    ServicesHTTPCaller__getExceptionMessage(e) {
      if (e instanceof A.TimeoutException)
        return "api_http_timeout_error";
      if (e instanceof A.ClientException)
        return "api_http_client_error";
      return J.toString$0$(e);
    },
    ServicesHTTPCaller: function ServicesHTTPCaller() {
    },
    _WorkerConnection_loadFileText(path) {
      return A._WorkerConnection_loadFileText$body(path);
    },
    _WorkerConnection_loadFileText$body(path) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$temp1;
      var $async$_WorkerConnection_loadFileText = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = A;
              $async$goto = 4;
              return A._asyncAwait(A.Window_fetch_(type$.JSObject._as(init.G.window), path), $async$_WorkerConnection_loadFileText);
            case 4:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait($async$temp1.Response_text_($async$result), $async$_WorkerConnection_loadFileText);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_WorkerConnection_loadFileText, $async$completer);
    },
    _WorkerConnection__loadWasm(isJs) {
      return A._WorkerConnection__loadWasm$body(true);
    },
    _WorkerConnection__loadWasm$body(isJs) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_ByteBuffer),
        $async$returnValue;
      var $async$_WorkerConnection__loadWasm = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_WorkerConnection__loadWasm, $async$completer);
    },
    _WorkerConnection__buildExtentionWorker() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, url, t1, t2;
      var $async$_WorkerConnection__buildExtentionWorker = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              url = A.toAssetPath("assets/wasm/wasm.mjs", null);
              t1 = init.G.Worker;
              t2 = {};
              t2.type = "module";
              $async$returnValue = type$.JSObject._as(new t1(url, t2));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_WorkerConnection__buildExtentionWorker, $async$completer);
    },
    _WorkerConnection__buildWorker() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue;
      var $async$_WorkerConnection__buildWorker = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = A._WorkerConnection__buildExtentionWorker();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_WorkerConnection__buildWorker, $async$completer);
    },
    _WorkerConnection__scriptPath(isJs) {
      return "assets/wasm/http.js";
    },
    _WorkerConnection__loadModuleScript(isJs) {
      return A._WorkerConnection__loadModuleScript$body(true);
    },
    _WorkerConnection__loadModuleScript$body(isJs) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_String),
        $async$returnValue;
      var $async$_WorkerConnection__loadModuleScript = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($.$get$_WorkerConnection_isExtention()) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return A._asyncAwait(A._WorkerConnection_loadFileText(A.toAssetPath(A._WorkerConnection__scriptPath(true), null)), $async$_WorkerConnection__loadModuleScript);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_WorkerConnection__loadModuleScript, $async$completer);
    },
    _WorkerConnection__init(onDone) {
      var isJs = true;
      return A._WorkerConnection__init$body(onDone);
    },
    _WorkerConnection__init$body(onDone) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$._WorkerConnection),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], exception, worker, t2, t3, t4, result, isJs, t1, moudle, wasm, $async$exception;
      var $async$_WorkerConnection__init = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              isJs = true;
              t1 = new A._Future($.Zone__current, type$._Future__WorkerConnection);
              moudle = null;
              wasm = null;
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(A._WorkerConnection__loadWasm(isJs), $async$_WorkerConnection__init);
            case 7:
              // returning from await.
              wasm = $async$result;
              $async$goto = 8;
              return A._asyncAwait(A._WorkerConnection__loadModuleScript(isJs), $async$_WorkerConnection__init);
            case 8:
              // returning from await.
              moudle = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              throw A.wrapException(B.C_FailedHttpIsolateInitialization);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              $async$goto = 9;
              return A._asyncAwait(A._WorkerConnection__buildWorker(), $async$_WorkerConnection__init);
            case 9:
              // returning from await.
              worker = $async$result;
              t2 = init.G;
              t2.serviceErrorListener_ = A._functionToJS1(new A._WorkerConnection__init_closure(onDone, B.HttpWorkerMode_main));
              t3 = type$.JavaScriptFunction;
              worker.addEventListener("error", t3._as(t2.serviceErrorListener_));
              t2.serviceWorkerListener_ = A._functionToJS1(new A._WorkerConnection__init_onEvent(new A._AsyncCompleter(t1, type$._AsyncCompleter__WorkerConnection), worker));
              worker.addEventListener("message", t3._as(t2.serviceWorkerListener_));
              t4 = A.jsify(A.LinkedHashMap_LinkedHashMap$_literal(["module", moudle, "wasm", wasm, "isWasm", !isJs, "isHttp", true], type$.String, type$.nullable_Object));
              t4.toString;
              worker.postMessage(t4);
              $async$goto = 10;
              return A._asyncAwait(t1.timeout$1(B.Duration_20000000), $async$_WorkerConnection__init);
            case 10:
              // returning from await.
              result = $async$result;
              worker.removeEventListener("message", t3._as(t2.serviceWorkerListener_));
              worker.addEventListener("message", A._functionToJS1(result.get$onResponse()));
              worker.removeEventListener("error", t3._as(t2.serviceErrorListener_));
              worker.addEventListener("error", A._functionToJS1(new A._WorkerConnection__init_closure0(onDone, B.HttpWorkerMode_main)));
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$_WorkerConnection__init, $async$completer);
    },
    WebHTTPServiceWorker: function WebHTTPServiceWorker(t0, t1) {
      this.connector = t0;
      this.caller = t1;
    },
    _WorkerConnector: function _WorkerConnector(t0, t1) {
      this._service$_lock = t0;
      this._workers = t1;
    },
    _WorkerConnector__onError_closure: function _WorkerConnector__onError_closure(t0, t1) {
      this.$this = t0;
      this.id = t1;
    },
    _WorkerConnector_getConnector_closure: function _WorkerConnector_getConnector_closure(t0, t1) {
      this.$this = t0;
      this.mode = t1;
    },
    _WorkerConnection: function _WorkerConnection(t0, t1, t2) {
      var _ = this;
      _._service$_requests = t0;
      _.worker = t1;
      _._service$_lock = t2;
      _._requestId = 0;
    },
    _WorkerConnection__init_onEvent: function _WorkerConnection__init_onEvent(t0, t1) {
      this.completer = t0;
      this.worker = t1;
    },
    _WorkerConnection__init_closure: function _WorkerConnection__init_closure(t0, t1) {
      this.onDone = t0;
      this.mode = t1;
    },
    _WorkerConnection__init_closure0: function _WorkerConnection__init_closure0(t0, t1) {
      this.onDone = t0;
      this.mode = t1;
    },
    _WorkerConnection__getRequestId_closure: function _WorkerConnection__getRequestId_closure(t0) {
      this.$this = t0;
    },
    _WorkerConnection__sentRequest_closure: function _WorkerConnection__sentRequest_closure(t0, t1) {
      this.$this = t0;
      this.id = t1;
    },
    HTTPWorkerResponse_HTTPWorkerResponse$fromJs(json) {
      var t1, responseType, $status,
        _s8_ = "response";
      if (json.containsKey$1(_s8_)) {
        t1 = type$.Map_dynamic_dynamic._as(json.$index(0, _s8_)).cast$2$0(0, type$.String, type$.dynamic);
        responseType = A.HTTPResponseType_fromName(A._asStringQ(t1.$index(0, "responseType")));
        $status = A._asInt(t1.$index(0, "statusCode"));
        t1 = $status >= 200 && $status < 300 ? A.HTTPCallerResponse_fromJsObject(t1.$index(0, "result"), responseType) : t1.$index(0, "result");
        return new A.HTTPWorkerResponseSuccess(new A.HTTPCallerResponse(t1, $status, responseType), A._asInt(json.$index(0, "id")), type$.HTTPWorkerResponseSuccess_dynamic);
      }
      return new A.HTTPWorkerResponseError(A._asString(json.$index(0, "message")), A._asInt(json.$index(0, "id")), type$.HTTPWorkerResponseError_dynamic);
    },
    HTTPRequestType: function HTTPRequestType(t0, t1) {
      this.name = t0;
      this._name = t1;
    },
    HTTPWorkerMessage: function HTTPWorkerMessage(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.type = t0;
      _.url = t1;
      _.params = t2;
      _.headers = t3;
      _.timeout = t4;
      _.responseType = t5;
      _.clientType = t6;
      _.authenticated = t7;
    },
    HTTPWorkerRequest: function HTTPWorkerRequest(t0, t1) {
      this.id = t0;
      this.message = t1;
    },
    HTTPWorkerResponse: function HTTPWorkerResponse() {
    },
    HTTPWorkerResponseSuccess: function HTTPWorkerResponseSuccess(t0, t1, t2) {
      this.response = t0;
      this.id = t1;
      this.$ti = t2;
    },
    HTTPWorkerResponseError: function HTTPWorkerResponseError(t0, t1, t2) {
      this.message = t0;
      this.id = t1;
      this.$ti = t2;
    },
    HTTPWorkerMessageCompleter: function HTTPWorkerMessageCompleter(t0, t1) {
      this.id = t0;
      this._messageCompleter = t1;
    },
    HttpWorkerMode: function HttpWorkerMode(t0) {
      this._name = t0;
    },
    ProviderAuthType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_Pnc, new A.ProviderAuthType_fromName_closure($name), new A.ProviderAuthType_fromName_closure0());
    },
    ProviderAuthType_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_Pnc, new A.ProviderAuthType_fromTag_closure(tag), new A.ProviderAuthType_fromTag_closure0());
    },
    ProviderAuthenticated_ProviderAuthenticated$deserialize(obj) {
      var cbor, t1, t2, _null = null,
        values = A.CborSerializable_decode(_null, _null, obj, type$.CborTagValue_dynamic),
        type = A.ProviderAuthType_fromTag(values.tags);
      $label0$0: {
        if (B.ProviderAuthType_List_50_6_header === type || B.ProviderAuthType_List_50_6_query === type) {
          cbor = A.CborSerializable_decodeCborTags(_null, values, B.List_50_6, type$.CborListValue_dynamic);
          t1 = A.ProviderAuthType_fromName(A.ExtractCborList_elementAt(cbor, 0, type$.nullable_String));
          t2 = type$.String;
          t1 = new A.BasicProviderAuthenticated(A.ExtractCborList_elementAt(cbor, 1, t2), A.ExtractCborList_elementAt(cbor, 2, t2), t1);
          break $label0$0;
        }
        if (B.ProviderAuthType_List_50_7_digest === type) {
          values = A.CborSerializable_decodeCborTags(_null, values, B.List_50_7, type$.CborListValue_dynamic);
          t1 = type$.String;
          t1 = new A.DigestProviderAuthenticated(A.ExtractCborList_elementAs(values, 0, t1), A.ExtractCborList_elementAs(values, 1, t1), B.ProviderAuthType_List_50_7_digest);
          break $label0$0;
        }
        t1 = _null;
      }
      return t1;
    },
    ProviderAuthType: function ProviderAuthType(t0, t1) {
      this.tag = t0;
      this._name = t1;
    },
    ProviderAuthType_fromName_closure: function ProviderAuthType_fromName_closure(t0) {
      this.name = t0;
    },
    ProviderAuthType_fromName_closure0: function ProviderAuthType_fromName_closure0() {
    },
    ProviderAuthType_fromTag_closure: function ProviderAuthType_fromTag_closure(t0) {
      this.tag = t0;
    },
    ProviderAuthType_fromTag_closure0: function ProviderAuthType_fromTag_closure0() {
    },
    ProviderAuthenticated: function ProviderAuthenticated() {
    },
    BasicProviderAuthenticated: function BasicProviderAuthenticated(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.type = t2;
    },
    DigestProviderAuthenticated: function DigestProviderAuthenticated(t0, t1, t2) {
      this.password = t0;
      this.username = t1;
      this.type = t2;
    },
    _ProviderAuthenticated_Object_CborSerializable: function _ProviderAuthenticated_Object_CborSerializable() {
    },
    _ProviderAuthenticated_Object_CborSerializable_Equatable: function _ProviderAuthenticated_Object_CborSerializable_Equatable() {
    },
    HttpClientManager: function HttpClientManager(t0) {
      this._clients = t0;
    },
    HttpClientManager_call_closure: function HttpClientManager_call_closure(t0) {
      this.t = t0;
    },
    HttpClientManager_getCashedClient_closure: function HttpClientManager_getCashedClient_closure() {
    },
    HttpClientManager_getCashedClient_closure0: function HttpClientManager_getCashedClient_closure0(t0, t1) {
      this.$this = t0;
      this.identifier = t1;
    },
    HttpClientManager_getCashedClient_closure1: function HttpClientManager_getCashedClient_closure1(t0, t1) {
      this.$this = t0;
      this.identifier = t1;
    },
    _Client: function _Client(t0, t1, t2) {
      this.client = t0;
      this.authenticated = t1;
      this.$ti = t2;
    },
    _CachedClientImpl: function _CachedClientImpl() {
    },
    _CachedClientImpl__startTimer_closure: function _CachedClientImpl__startTimer_closure(t0) {
      this.$this = t0;
    },
    _CachedClient: function _CachedClient(t0, t1, t2, t3) {
      var _ = this;
      _.onDispose = t0;
      _.idleTimeout = t1;
      _._timer = null;
      _.client = t2;
      _.authenticated = t3;
    },
    _DigestAuthClient: function _DigestAuthClient(t0, t1, t2, t3) {
      var _ = this;
      _._DigestAuthClientImpl__id = t0;
      _._DigestAuthClientImpl__challenge = t1;
      _.client = t2;
      _.authenticated = t3;
    },
    _DigestAuthCachedClient: function _DigestAuthCachedClient(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._DigestAuthClientImpl__id = t0;
      _._DigestAuthClientImpl__challenge = t1;
      _.onDispose = t2;
      _.idleTimeout = t3;
      _._timer = null;
      _.client = t4;
      _.authenticated = t5;
    },
    _DigestAuthClientImpl: function _DigestAuthClientImpl() {
    },
    __DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl: function __DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl() {
    },
    __DigestAuthClient__Client__DigestAuthClientImpl: function __DigestAuthClient__Client__DigestAuthClientImpl() {
    },
    HTTPResponseType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_mqY, new A.HTTPResponseType_fromName_closure($name), new A.HTTPResponseType_fromName_closure0());
    },
    HTTPCallerResponse_stringToJsonObject(data, type) {
      var t1;
      switch (type) {
        case B.HTTPResponseType_2:
          return A.StringUtils_toJson(data, null, type$.Object);
        case B.HTTPResponseType_3:
          return A.StringUtils_toJson(data, null, type$.Map_String_dynamic);
        case B.HTTPResponseType_4:
          t1 = J.map$1$1$ax(A.StringUtils_toJson(data, null, type$.List_dynamic), new A.HTTPCallerResponse_stringToJsonObject_closure(), type$.Map_String_dynamic);
          t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
          return t1;
        default:
          return data;
      }
    },
    HTTPCallerResponse_fromJsObject(fromJsObject, type) {
      if (fromJsObject == null)
        return null;
      switch (type) {
        case B.HTTPResponseType_0:
          return J.cast$1$0$ax(type$.List_dynamic._as(fromJsObject), type$.int);
        default:
          return A.HTTPCallerResponse_stringToJsonObject(A._asString(fromJsObject), type);
      }
    },
    HTTPCallerResponse_HTTPCallerResponse$parse(bodyBytes, platform, statusCode, type) {
      var body, t1, body0, exception;
      if (!(statusCode >= 200 && statusCode < 300))
        return new A.HTTPCallerResponse(A.StringUtils_tryDecode(bodyBytes, B.StringEncoding_1), statusCode, type);
      body = null;
      try {
        if (platform === B.AppPlatform_1 && type !== B.HTTPResponseType_0)
          body = A.StringUtils_decode(bodyBytes, false, B.StringEncoding_1);
        else
          switch (type) {
            case B.HTTPResponseType_0:
              body = bodyBytes;
              break;
            case B.HTTPResponseType_1:
              body = A.StringUtils_decode(bodyBytes, false, B.StringEncoding_1);
              break;
            case B.HTTPResponseType_2:
              body = A.StringUtils_toJson(A.StringUtils_decode(bodyBytes, false, B.StringEncoding_1), null, type$.Object);
              break;
            case B.HTTPResponseType_3:
              body = A.StringUtils_toJson(A.StringUtils_decode(bodyBytes, false, B.StringEncoding_1), null, type$.Map_String_dynamic);
              break;
            case B.HTTPResponseType_4:
              t1 = J.map$1$1$ax(A.StringUtils_toJson(A.StringUtils_decode(bodyBytes, false, B.StringEncoding_1), null, type$.List_dynamic), new A.HTTPCallerResponse_HTTPCallerResponse$parse_closure(), type$.Map_String_dynamic);
              body0 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
              body = body0;
              break;
          }
        t1 = body;
        return new A.HTTPCallerResponse(t1, statusCode, type);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.ApiProviderException)
          throw exception;
        else {
          t1 = A.ApiProviderException_ApiProviderException$error("invalid_request_type");
          throw A.wrapException(t1);
        }
      }
    },
    DigestAuthHeadersAlg_fromName($name) {
      if ($name == null)
        return B.DigestAuthHeadersAlg_MD5_md5;
      return B.JSArray_methods.firstWhere$2$orElse(B.List_8bU, new A.DigestAuthHeadersAlg_fromName_closure($name), new A.DigestAuthHeadersAlg_fromName_closure0());
    },
    DigestAuthQop_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_Y8B, new A.DigestAuthQop_fromName_closure($name), new A.DigestAuthQop_fromName_closure0());
    },
    HTTPClientType: function HTTPClientType(t0) {
      this._name = t0;
    },
    HTTPResponseType: function HTTPResponseType(t0) {
      this._name = t0;
    },
    HTTPResponseType_fromName_closure: function HTTPResponseType_fromName_closure(t0) {
      this.name = t0;
    },
    HTTPResponseType_fromName_closure0: function HTTPResponseType_fromName_closure0() {
    },
    HTTPCallerResponse: function HTTPCallerResponse(t0, t1, t2) {
      this.result = t0;
      this.statusCode = t1;
      this.responseType = t2;
    },
    HTTPCallerResponse_stringToJsonObject_closure: function HTTPCallerResponse_stringToJsonObject_closure() {
    },
    HTTPCallerResponse_HTTPCallerResponse$parse_closure: function HTTPCallerResponse_HTTPCallerResponse$parse_closure() {
    },
    DigestAuthHeadersAlg: function DigestAuthHeadersAlg(t0, t1) {
      this.name = t0;
      this._name = t1;
    },
    DigestAuthHeadersAlg_fromName_closure: function DigestAuthHeadersAlg_fromName_closure(t0) {
      this.name = t0;
    },
    DigestAuthHeadersAlg_fromName_closure0: function DigestAuthHeadersAlg_fromName_closure0() {
    },
    DigestAuthQop: function DigestAuthQop(t0, t1) {
      this.name = t0;
      this._name = t1;
    },
    DigestAuthQop_fromName_closure: function DigestAuthQop_fromName_closure(t0) {
      this.name = t0;
    },
    DigestAuthQop_fromName_closure0: function DigestAuthQop_fromName_closure0() {
    },
    DigestAuthHeaders: function DigestAuthHeaders(t0, t1, t2, t3, t4) {
      var _ = this;
      _.nonce = t0;
      _.qop = t1;
      _.realm = t2;
      _.algorithm = t3;
      _.opaque = t4;
    },
    DigestAuthenticatedUtils_generateDigestAuthHeader(authenticated, body, count, method, params, uri) {
      var t3, t4, t5, digest, _null = null,
        realm = params.realm,
        nonce = params.nonce,
        qop = params.qop,
        algorithm = params.algorithm,
        path = uri.get$path(),
        cnonce = A.BytesUtils_toHexString($.$get$QuickCrypto__generateRandom().call$1(8), true, _null),
        nc = B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(count, 16), 8, "0"),
        t1 = authenticated.username,
        ha1 = A.BytesUtils_toHexString(algorithm.hashBytes$1(A.StringUtils_encode(t1 + ":" + realm + ":" + authenticated.password, B.StringEncoding_1)), true, _null),
        t2 = algorithm.name;
      if (B.JSString_methods.endsWith$1(t2, "sess"))
        ha1 = A.BytesUtils_toHexString(algorithm.hashBytes$1(A.StringUtils_encode(ha1 + ":" + nonce + ":" + cnonce, B.StringEncoding_1)), true, _null);
      $label0$0: {
        t3 = B.DigestAuthQop_auth_auth !== qop;
        if (!t3 || qop == null) {
          t4 = A.BytesUtils_toHexString(algorithm.hashBytes$1(A.StringUtils_encode(method.name + ":" + path, B.StringEncoding_1)), true, _null);
          break $label0$0;
        }
        if (B.DigestAuthQop_zIr === qop) {
          t4 = uri.toString$0(0);
          t5 = A._setArrayType([], type$.JSArray_int);
          t4 = A.BytesUtils_toHexString(algorithm.hashBytes$1(A.StringUtils_encode(method.name + ":" + t4 + ":" + A.S(algorithm.hashBytes$1(t5)), B.StringEncoding_1)), true, _null);
          break $label0$0;
        }
        t4 = _null;
      }
      $label1$1: {
        if (!t3 || B.DigestAuthQop_zIr === qop) {
          t3 = A.BytesUtils_toHexString(algorithm.hashBytes$1(A.StringUtils_encode(ha1 + ":" + nonce + ":" + nc + ":" + cnonce + ":" + qop.name + ":" + t4, B.StringEncoding_1)), true, _null);
          break $label1$1;
        }
        if (qop == null) {
          t3 = A.BytesUtils_toHexString(algorithm.hashBytes$1(A.StringUtils_encode(ha1 + ":" + nonce + ":" + t4, B.StringEncoding_1)), true, _null);
          break $label1$1;
        }
        t3 = _null;
      }
      digest = 'Digest username="' + t1 + '", realm="' + realm + '", nonce="' + nonce + '", uri="' + path + '", nc=' + nc + ', cnonce="' + cnonce + '", response="' + t3 + '", algorithm=' + t2;
      if (qop != null)
        digest += ", qop=" + qop.name;
      t1 = params.opaque;
      return t1 != null ? digest + (", opaque=" + t1) : digest;
    },
    DigestAuthenticatedUtils_getChallenges(headers) {
      var challenges,
        _s16_ = "www-authenticate",
        t1 = headers.$index(0, _s16_);
      t1 = t1 == null ? null : B.JSString_methods.contains$1(t1, "Digest ");
      if (t1 !== true)
        return null;
      t1 = headers.$index(0, _s16_);
      t1.toString;
      challenges = A.DigestAuthenticatedUtils_parseDigestHeader(t1);
      if (challenges.length === 0)
        throw A.wrapException(A.WalletException$("unsuported_digest_auth_qop"));
      return B.JSArray_methods.get$first(challenges);
    },
    DigestAuthenticatedUtils_getDigestAuthenticatedHeader(authenticated, count, method, params, uri) {
      return A.LinkedHashMap_LinkedHashMap$_literal(["Authorization", A.DigestAuthenticatedUtils_generateDigestAuthHeader(authenticated, null, count, method, params, uri)], type$.String, type$.dynamic);
    },
    DigestAuthenticatedUtils_parseDigestHeader(header) {
      var auth, params, digestParams, t1, t2, t3, t4, digestParts, t5, t6, t7, _i, challenge, t8, _i0, part, match, t9, t10, t11, key, exception;
      if (!B.JSString_methods.contains$1(header, "Digest "))
        throw A.wrapException(A.WalletException$("invalid_dgiest_auth_headers"));
      t1 = type$.JSArray_String;
      t2 = type$.String_Function_String;
      t3 = type$.MappedListIterable_String_String;
      t4 = new A.MappedListIterable(A._setArrayType(header.split("Digest "), t1), t2._as(new A.DigestAuthenticatedUtils_parseDigestHeader_closure()), t3).super$Iterable$where(0, t3._eval$1("bool(ListIterable.E)")._as(new A.DigestAuthenticatedUtils_parseDigestHeader_closure0()));
      digestParts = A.List_List$_of(t4, t4.$ti._eval$1("Iterable.E"));
      auth = A._setArrayType([], type$.JSArray_DigestAuthHeaders);
      for (t4 = digestParts.length, t5 = type$.String, t6 = type$.dynamic, t7 = t3._eval$1("ListIterable.E"), _i = 0; _i < digestParts.length; digestParts.length === t4 || (0, A.throwConcurrentModificationError)(digestParts), ++_i) {
        challenge = A.List_List$_of(new A.MappedListIterable(A._setArrayType(digestParts[_i].split(","), t1), t2._as(new A.DigestAuthenticatedUtils_parseDigestHeader_closure1()), t3), t7);
        params = A.LinkedHashMap_LinkedHashMap$_empty(t5, t6);
        for (t8 = challenge.length, _i0 = 0; _i0 < challenge.length; challenge.length === t8 || (0, A.throwConcurrentModificationError)(challenge), ++_i0) {
          part = challenge[_i0];
          match = A.RegExp_RegExp("^(.*?)=(.*)$", true).firstMatch$1(part);
          if (match != null) {
            t9 = match._match;
            t10 = t9.length;
            if (1 >= t10)
              return A.ioore(t9, 1);
            t11 = t9[1];
            t11.toString;
            key = B.JSString_methods.trim$0(t11);
            if (2 >= t10)
              return A.ioore(t9, 2);
            t9 = t9[2];
            t9.toString;
            J.$indexSet$ax(params, key, B.JSString_methods.trim$0(A.stringReplaceAllUnchecked(t9, '"', "")));
          }
        }
        try {
          t8 = params;
          t9 = A._asString(t8.$index(0, "nonce"));
          t10 = t8.$index(0, "qop") == null ? null : A.DigestAuthQop_fromName(t8.$index(0, "qop"));
          digestParams = new A.DigestAuthHeaders(t9, t10, A._asString(t8.$index(0, "realm")), A.DigestAuthHeadersAlg_fromName(t8.$index(0, "algorithm")), t8.$index(0, "opaque"));
          J.add$1$ax(auth, digestParams);
        } catch (exception) {
          if (!(A.unwrapException(exception) instanceof A.WalletException))
            throw exception;
        }
      }
      return auth;
    },
    DigestAuthenticatedUtils_parseDigestHeader_closure: function DigestAuthenticatedUtils_parseDigestHeader_closure() {
    },
    DigestAuthenticatedUtils_parseDigestHeader_closure0: function DigestAuthenticatedUtils_parseDigestHeader_closure0() {
    },
    DigestAuthenticatedUtils_parseDigestHeader_closure1: function DigestAuthenticatedUtils_parseDigestHeader_closure1() {
    },
    APPIsolate: function APPIsolate(t0) {
      this._name = t0;
    },
    StreamListenable: function StreamListenable() {
    },
    StreamListenable__controller_closure0: function StreamListenable__controller_closure0() {
    },
    StreamListenable__controller_closure: function StreamListenable__controller_closure() {
    },
    StreamValue: function StreamValue(t0, t1) {
      this._live$_value = t0;
      this.__StreamListenable__controller_FI = $;
      this.$ti = t1;
    },
    ContentType_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_HVn, new A.ContentType_fromValue_closure(value), new A.ContentType_fromValue_closure0(null));
    },
    ContentType: function ContentType(t0, t1) {
      this.value = t0;
      this._name = t1;
    },
    ContentType_fromValue_closure: function ContentType_fromValue_closure(t0) {
      this.value = t0;
    },
    ContentType_fromValue_closure0: function ContentType_fromValue_closure0(t0) {
      this.defaultValue = t0;
    },
    APPImage_APPImage$deserialize(obj) {
      var cbor, uri, t1, exception, bytes = null;
      try {
        cbor = A.CborSerializable_cborTagValue(bytes, null, obj, B.List_50_1, type$.CborListValue_dynamic);
        uri = A.ExtractCborList_elementAs(cbor, 1, type$.String);
        t1 = A.ContentType_fromValue(A.ExtractCborList_elementAs(cbor, 0, type$.nullable_int));
        return new A.APPImage(t1, uri);
      } catch (exception) {
        throw A.wrapException(B.WalletException_data_verification_failed_null);
      }
    },
    APPImage: function APPImage(t0, t1) {
      this.type = t0;
      this.uri = t1;
    },
    _APPImage_Object_CborSerializable: function _APPImage_Object_CborSerializable() {
    },
    _APPImage_Object_CborSerializable_Equatable: function _APPImage_Object_CborSerializable_Equatable() {
    },
    CborSerializable_decodeCborTags(cborBytes, object, tags, $T) {
      return A.CborSerializable_validateCbor(object, tags, $T);
    },
    CborSerializable_cborTagValue(cborBytes, hex, object, tags, $T) {
      if (object == null) {
        if (cborBytes == null)
          cborBytes = A.BytesUtils_tryFromHexString(hex, false);
        if (cborBytes == null)
          throw A.wrapException(B.WalletException_lCc);
        object = A.CborUtils__decode(cborBytes, 0).value;
      }
      return A.CborSerializable_validateCbor(object, tags, $T);
    },
    CborSerializable_validateCbor(cbor, tags, $T) {
      var t1;
      if (!(cbor instanceof A.CborTagValue) || !$T._is(cbor._value))
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      t1 = A.BytesUtils_bytesEqual(cbor.tags, tags);
      if (!t1)
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      return $T._as(cbor._value);
    },
    CborSerializable_decode(cborBytes, hex, object, $T) {
      var t1, exception;
      cborBytes = cborBytes;
      object = object;
      try {
        if (object == null) {
          if (cborBytes == null)
            cborBytes = A.BytesUtils_tryFromHexString(hex, false);
          if (cborBytes == null)
            throw A.wrapException(B.WalletException_lCc);
          object = A.CborUtils__decode(cborBytes, 0).value;
        }
        if (!$T._is(object)) {
          t1 = A.WalletException$invalidArgruments(A._setArrayType([A.createRuntimeType($T).toString$0(0) + A.getRuntimeTypeOfDartObject(object).toString$0(0)], type$.JSArray_String));
          throw A.wrapException(t1);
        }
        t1 = object;
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.WalletException)
          throw exception;
        else
          throw A.wrapException(B.WalletException_data_verification_failed_null);
      }
    },
    ExtractCborList_elementAt(_this, index, $T) {
      var cborValue, v,
        t1 = _this.value;
      if (index > t1.length - 1) {
        $T._as(null);
        return null;
      }
      cborValue = t1[index];
      if (A.createRuntimeType($T) === B.Type_CborMapValue_DaJ) {
        if (cborValue instanceof A.CborMapValue)
          return $T._as(cborValue);
        $T._as(null);
        return null;
      }
      v = type$.CborObject._is(cborValue) ? cborValue.get$value() : cborValue;
      if (!$T._is(v)) {
        $T._as(null);
        return null;
      }
      return v;
    },
    ExtractCborList_elementAsListOf(_this, index, $T) {
      var t1, exception;
      try {
        t1 = _this.value;
        if (!(index < t1.length))
          return A.ioore(t1, index);
        t1 = type$.CborListValue_dynamic._as(t1[index]).value;
        return new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("@<1>")._bind$1($T)._eval$1("CastList<1,2>"));
      } catch (exception) {
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      }
    },
    ExtractCborList_elementAs(_this, index, $T) {
      var cborValue, exception,
        t1 = _this.value;
      if (index > t1.length - 1) {
        if ($T._is(null)) {
          $T._as(null);
          return null;
        }
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      }
      try {
        cborValue = type$.nullable_CborObject._as(t1[index]);
        if ($T._is(null) && J.$eq$(cborValue, B.C_CborNullValue)) {
          $T._as(null);
          return null;
        }
        if ($T._is(cborValue.get$value())) {
          t1 = $T._as(cborValue.get$value());
          return t1;
        }
        t1 = $T._as(cborValue);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      }
    },
    ExtractCborList_elemetMybeAs(_this, index, onValue, $E, $T) {
      var cborValue, exception,
        t1 = _this.value;
      if (index > t1.length - 1)
        return null;
      try {
        cborValue = type$.CborObject._as(t1[index]);
        if (J.$eq$(cborValue, B.C_CborNullValue))
          return null;
        if ($T._is(cborValue)) {
          t1 = onValue.call$1($T._as(cborValue));
          return t1;
        }
        t1 = onValue.call$1($T._as(cborValue.get$value()));
        return t1;
      } catch (exception) {
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      }
    },
    ExtractCborList_cast(_this, $T) {
      var t2, i,
        t1 = A._setArrayType([], $T._eval$1("JSArray<0>"));
      for (t2 = _this.value, i = 0; i < t2.length; ++i)
        t1.push(A.ExtractCborList_elementAt(_this, i, $T));
      return t1;
    },
    ExtractCborList_castValue(_this, $T) {
      var t2, i,
        t1 = A._setArrayType([], $T._eval$1("JSArray<0>"));
      for (t2 = _this.value, i = 0; i < t2.length; ++i)
        t1.push(A.ExtractCborList_elementAs(_this, i, $T));
      return t1;
    },
    ExtractCborList_getCborTag(_this, index) {
      var cborValue,
        t1 = _this.value;
      if (index > t1.length - 1)
        return null;
      cborValue = t1[index];
      if (!type$.CborObject._is(cborValue))
        return null;
      if (cborValue instanceof A.CborTagValue)
        return cborValue;
      if (cborValue.get$value() instanceof A.CborTagValue)
        return type$.nullable_CborTagValue_dynamic._as(cborValue.get$value());
      return null;
    },
    ExtractCborList_getElement(_this, index, $T) {
      var obj,
        t1 = _this.value;
      if (index >= t1.length) {
        if ($T._is(null)) {
          $T._as(null);
          return null;
        }
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      }
      obj = type$.CborObject._as(t1[index]);
      if ($T._is(null) && obj.$eq(0, B.C_CborNullValue)) {
        $T._as(null);
        return null;
      }
      if ($T._is(obj))
        return $T._as(obj);
      throw A.wrapException(B.WalletException_invalid_serialization_data_null);
    },
    QuickCborTag_get_getList(_this) {
      var t1 = _this._value;
      if (!(t1 instanceof A.CborListValue))
        throw A.wrapException(B.WalletException_invalid_serialization_data_null);
      return t1;
    },
    CborSerializable: function CborSerializable() {
    },
    JsonSerialization: function JsonSerialization() {
    },
    SynchronizedLock: function SynchronizedLock() {
      this.last = null;
    },
    SynchronizedLock_synchronized_complete: function SynchronizedLock_synchronized_complete(t0, t1) {
      this.$this = t0;
      this.completer = t1;
    },
    SynchronizedLock_synchronized_closure: function SynchronizedLock_synchronized_closure(t0) {
      this.complete = t0;
    },
    MethodUtils_wait(duration) {
      return A.MethodUtils_wait$body(duration);
    },
    MethodUtils_wait$body(duration) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue;
      var $async$MethodUtils_wait = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.Future_Future$delayed(duration, null, type$.void), $async$MethodUtils_wait);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$MethodUtils_wait, $async$completer);
    },
    MethodUtils_call(t, $T) {
      var cancelable = null, delay = null, timeout = null, waitAtError = null;
      return A.MethodUtils_call$body(t, $T, $T._eval$1("MethodResult<0>"));
    },
    MethodUtils_call$body(t, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], r, completer, result, e, stackTrace, exception, t1, cancelable, delay, timeout, waitAtError, $async$exception;
      var $async$MethodUtils_call = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              cancelable = null;
              delay = null;
              timeout = null;
              waitAtError = null;
              $async$handler = 4;
              $async$goto = delay != null ? 7 : 8;
              break;
            case 7:
              // then
              $async$goto = 9;
              return A._asyncAwait(A.Future_Future$delayed(delay, null, type$.dynamic), $async$MethodUtils_call);
            case 9:
              // returning from await.
            case 8:
              // join
              r = null;
              if (cancelable == null)
                r = t.call$0();
              else {
                completer = new A._AsyncCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncCompleter<0>"));
                cancelable.setup$1(A.instantiate1(new A.MethodUtils_call_closure(completer, $T), type$.dynamic));
                cancelable.success$1(t);
                r = completer.future;
              }
              if (timeout != null)
                r = r.timeout$1(timeout);
              $async$goto = 10;
              return A._asyncAwait(r, $async$MethodUtils_call);
            case 10:
              // returning from await.
              result = $async$result;
              $async$returnValue = new A.MethodResult(result, null, null, $T._eval$1("MethodResult<0>"));
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              e = A.unwrapException($async$exception);
              stackTrace = A.getTraceFromException($async$exception);
              $async$goto = waitAtError != null ? 11 : 12;
              break;
            case 11:
              // then
              $async$goto = 13;
              return A._asyncAwait(A.MethodUtils_wait(waitAtError), $async$MethodUtils_call);
            case 13:
              // returning from await.
            case 12:
              // join
              t1 = e;
              $async$returnValue = new A.MethodResult($, t1, A.MethodResult__errorMessage(t1)._0, $T._eval$1("MethodResult<0>"));
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$MethodUtils_call, $async$completer);
    },
    MethodUtils_nullOnException(t, $T) {
      var t1, exception, defaultValue = null;
      try {
        t1 = t.call$0();
        return t1;
      } catch (exception) {
        return defaultValue;
      }
    },
    MethodResult__errorMessage(exception) {
      if (exception instanceof A.WalletException || exception instanceof A.ApiProviderException || exception instanceof A.BlockchainUtilsException || exception instanceof A.RPCError || exception instanceof A.ArgumentError)
        return new A._Record_2(J.toString$0$(exception), false);
      return new A._Record_2(J.toString$0$(exception), true);
    },
    MethodUtils_call_closure: function MethodUtils_call_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    MethodResult: function MethodResult(t0, t1, t2, t3) {
      var _ = this;
      _.__MethodResult__result_F = t0;
      _.exception = t1;
      _.error = t2;
      _.$ti = t3;
    },
    StrUtils_to3Digits(number, separator) {
      var parts, t1, integerPart, fractionalPart, negative, groups, i, i0, result,
        hasDot = B.JSString_methods.contains$1(number, ".");
      if (hasDot) {
        parts = number.split(".");
        t1 = parts.length;
        if (0 >= t1)
          return A.ioore(parts, 0);
        integerPart = parts[0];
        if (1 >= t1)
          return A.ioore(parts, 1);
        fractionalPart = parts[1];
      } else {
        integerPart = number;
        fractionalPart = "";
      }
      negative = B.JSString_methods.startsWith$1(integerPart, "-");
      if (negative)
        integerPart = B.JSString_methods.substring$1(integerPart, 1);
      groups = A._setArrayType([], type$.JSArray_String);
      i = integerPart.length;
      for (; i > 0; i = i0) {
        i0 = i - 3;
        B.JSArray_methods.insert$2(groups, 0, B.JSString_methods.substring$2(integerPart, A.IntUtils_max(0, i0), i));
      }
      result = B.JSArray_methods.join$1(groups, separator);
      if (hasDot)
        if (!(fractionalPart.length === 0))
          result += "." + fractionalPart;
      if (negative)
        return "-" + result;
      return result;
    },
    StrUtils_substring(value, $length) {
      var t1 = value.length;
      if (t1 > $length)
        return B.JSString_methods.replaceRange$3(value, $length - 1, t1, "");
      return value;
    },
    StrUtils_toSnakeCase(input) {
      var t1,
        snakeCase = A.stringReplaceAllFuncUnchecked(input, A.RegExp_RegExp("[A-Z]", true), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(new A.StrUtils_toSnakeCase_closure())), null);
      if (B.JSString_methods.startsWith$1(snakeCase, "_"))
        snakeCase = B.JSString_methods.substring$1(snakeCase, 1);
      t1 = A.RegExp_RegExp("\\s+|[^a-zA-Z0-9]+", true);
      return A.stringReplaceAllUnchecked(snakeCase, t1, "_");
    },
    StrUtils_toSnakeCase_closure: function StrUtils_toSnakeCase_closure() {
    },
    connectSoc(url, protocols) {
      return A.connectSoc$body(url, protocols);
    },
    connectSoc$body(url, protocols) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.PlatformWebScoket),
        $async$returnValue;
      var $async$connectSoc = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.WebsocketWeb_connect(url), $async$connectSoc);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$connectSoc, $async$completer);
    },
    WebsocketWeb$_(_socket) {
      var t1 = new A.WebsocketWeb(_socket, new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_WebsocketWeb), type$._AsyncCompleter_WebsocketWeb));
      t1.WebsocketWeb$_$1(_socket);
      return t1;
    },
    WebsocketWeb_connect(url) {
      return A.WebsocketWeb_connect$body(url);
    },
    WebsocketWeb_connect$body(url) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WebsocketWeb),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], t1, exception, socket, $async$exception;
      var $async$WebsocketWeb_connect = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              socket = A.WebsocketWeb$_(A.JSWebSocket_constructor_create(url, B.List_empty5));
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(socket._connectedCompleter.future, $async$WebsocketWeb_connect);
            case 7:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              if (A.unwrapException($async$exception) instanceof A.ApiProviderException)
                throw $async$exception;
              else {
                socket.get$_streamController().close$0();
                throw $async$exception;
              }
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$WebsocketWeb_connect, $async$completer);
    },
    WebsocketWeb: function WebsocketWeb(t0, t1) {
      var _ = this;
      _._web$_socket = t0;
      _.__WebsocketWeb__streamController_FI = $;
      _._connectedCompleter = t1;
      _._onMessage = _._web$_onClose = _._onOpen = null;
    },
    WebsocketWeb$__closure: function WebsocketWeb$__closure(t0) {
      this.$this = t0;
    },
    WebsocketWeb$__closure0: function WebsocketWeb$__closure0(t0) {
      this.$this = t0;
    },
    WebsocketWeb$__closure1: function WebsocketWeb$__closure1(t0) {
      this.$this = t0;
    },
    CustomCoins$_($name, conf) {
      return new A.CustomCoins($name, conf);
    },
    CustomCoins_getSerializationCoin(serializationStr, $T) {
      var parts = serializationStr.split("#"),
        t1 = parts.length;
      if (t1 !== 2)
        throw A.wrapException(B.WalletException_data_verification_failed_null);
      if (1 >= t1)
        return A.ioore(parts, 1);
      return A.CustomCoins_getCoin(parts[1], parts[0], $T);
    },
    CustomCoins_getCoin($name, proposal, $T) {
      var coin;
      switch (proposal) {
        case "CIP-0019":
          coin = A.CustomCoins_fromName($name);
          break;
        default:
          coin = A.CryptoCoins_getCoin($name, A.CustomProposal_fromName(proposal));
          break;
      }
      if (coin == null)
        throw A.wrapException(B.WalletException_coin_not_found_null);
      if (!$T._is(coin))
        throw A.wrapException(B.WalletException_invalid_coin_null);
      return coin;
    },
    CustomCoins_fromName($name) {
      var t1, exception;
      try {
        t1 = B.JSArray_methods.firstWhere$1($.$get$CustomCoins_values(), new A.CustomCoins_fromName_closure($name));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    CustomProposal_fromName($name) {
      if ($name === "CIP-0019")
        return B.C_CustomProposal;
      return A.CoinProposal_fromName($name);
    },
    CustomCoins: function CustomCoins(t0, t1) {
      this.name = t0;
      this.conf = t1;
    },
    CustomCoins_fromName_closure: function CustomCoins_fromName_closure(t0) {
      this.name = t0;
    },
    CustomProposal: function CustomProposal() {
    },
    CustomCurrencyConf_byronLegacy_closure: function CustomCurrencyConf_byronLegacy_closure() {
    },
    CustomCurrencyConf_byronLegacyTestnet_closure: function CustomCurrencyConf_byronLegacyTestnet_closure() {
    },
    AddressDerivationType_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_jiT, new A.AddressDerivationType_fromTag_closure(tag), new A.AddressDerivationType_fromTag_closure0());
    },
    AddressDerivationIndex_AddressDerivationIndex$deserialize(obj) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, _null = null,
        cbor = A.CborSerializable_decode(_null, _null, obj, type$.CborTagValue_dynamic);
      switch (A.AddressDerivationType_fromTag(cbor.tags)) {
        case B.AddressDerivationType_List_200_81_bip32:
          cbor = A.CborSerializable_cborTagValue(_null, _null, cbor, B.List_200_81, type$.CborListValue_dynamic);
          t1 = type$.nullable_int;
          t2 = A.ExtractCborList_elementAs(cbor, 0, t1);
          t3 = A.ExtractCborList_elementAs(cbor, 1, t1);
          t4 = A.ExtractCborList_elementAs(cbor, 2, t1);
          t5 = A.ExtractCborList_elementAs(cbor, 3, t1);
          t6 = A.ExtractCborList_elementAs(cbor, 4, t1);
          t7 = A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAs(cbor, 5, type$.String), type$.CryptoCoins_CoinConfig);
          t1 = A.SeedTypes_fromValue(A.ExtractCborList_elementAs(cbor, 6, t1));
          t8 = type$.nullable_String;
          t9 = A.ExtractCborList_elementAs(cbor, 7, t8);
          return new A.Bip32AddressIndex(t2, t3, t4, t5, t6, t9, A.ExtractCborList_elementAs(cbor, 8, t8), A.Bip32AddressIndex__toPath(A._setArrayType([t2, t3, t4, t5, t6], type$.JSArray_nullable_int), t9), t1, t7);
        case B.AddressDerivationType_List_200_84_substrate:
          cbor = A.CborSerializable_cborTagValue(_null, _null, cbor, B.List_200_84, type$.CborListValue_dynamic);
          t1 = A.CustomCoins_getSerializationCoin(A.ExtractCborList_elementAs(cbor, 0, type$.String), type$.SubstrateCoins);
          t2 = type$.nullable_String;
          t3 = A.ExtractCborList_elementAs(cbor, 1, t2);
          return new A.SubstrateAddressIndex(A.ExtractCborList_elementAs(cbor, 2, t2), A.ExtractCborList_elementAs(cbor, 3, t2), t3, t1);
        case B.AddressDerivationType_List_200_83_multisig:
          return new A.MultiSigAddressIndex(_null);
      }
    },
    Bip32AddressIndex__toPath(indexses, importedKeyId) {
      var pathStr, _i,
        t1 = A._arrayInstanceType(indexses),
        t2 = t1._eval$1("MappedIterable<1,Bip32KeyIndex>"),
        bipIndexes = A.List_List$_of(new A.MappedIterable(new A.WhereIterable(indexses, t1._eval$1("bool(1)")._as(new A.Bip32AddressIndex__toPath_closure()), t1._eval$1("WhereIterable<1>")), t1._eval$1("Bip32KeyIndex(1)")._as(new A.Bip32AddressIndex__toPath_closure0()), t2), t2._eval$1("Iterable.E"));
      t1 = bipIndexes.length;
      if (t1 === 0)
        return null;
      for (pathStr = "m/", _i = 0; _i < t1; ++_i) {
        t2 = bipIndexes[_i].index;
        if ((t2 & 2147483648) >>> 0 === 0)
          pathStr += "" + t2 + "/";
        else
          pathStr += "" + (t2 & 2147483647) + "'/";
      }
      return B.JSString_methods.substring$2(pathStr, 0, pathStr.length - 1);
    },
    SeedTypes_fromValue(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_YjN, new A.SeedTypes_fromValue_closure(tag), new A.SeedTypes_fromValue_closure0());
    },
    AddressDerivationType: function AddressDerivationType(t0, t1) {
      this.tag = t0;
      this._name = t1;
    },
    AddressDerivationType_fromTag_closure: function AddressDerivationType_fromTag_closure(t0) {
      this.tag = t0;
    },
    AddressDerivationType_fromTag_closure0: function AddressDerivationType_fromTag_closure0() {
    },
    AddressDerivationIndex: function AddressDerivationIndex() {
    },
    Bip32AddressIndex: function Bip32AddressIndex(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.purpose = t0;
      _.coin = t1;
      _.accountLevel = t2;
      _.changeLevel = t3;
      _.addressIndex = t4;
      _.importedKeyId = t5;
      _.keyName = t6;
      _.hdPath = t7;
      _.seedGeneration = t8;
      _.currencyCoin = t9;
    },
    Bip32AddressIndex__toPath_closure: function Bip32AddressIndex__toPath_closure() {
    },
    Bip32AddressIndex__toPath_closure0: function Bip32AddressIndex__toPath_closure0() {
    },
    MultiSigAddressIndex: function MultiSigAddressIndex(t0) {
      this.keyName = t0;
    },
    SubstrateAddressIndex: function SubstrateAddressIndex(t0, t1, t2, t3) {
      var _ = this;
      _.importedKeyId = t0;
      _.keyName = t1;
      _.substratePath = t2;
      _.currencyCoin = t3;
    },
    SeedTypes: function SeedTypes(t0, t1, t2) {
      this.name = t0;
      this.value = t1;
      this._name = t2;
    },
    SeedTypes_fromValue_closure: function SeedTypes_fromValue_closure(t0) {
      this.tag = t0;
    },
    SeedTypes_fromValue_closure0: function SeedTypes_fromValue_closure0() {
    },
    _AddressDerivationIndex_Object_CborSerializable: function _AddressDerivationIndex_Object_CborSerializable() {
    },
    _AddressDerivationIndex_Object_CborSerializable_Equatable: function _AddressDerivationIndex_Object_CborSerializable_Equatable() {
    },
    NetworkType_fromTag(tag) {
      var t1 = {};
      t1.tag = tag;
      if (tag != null && J.get$length$asx(tag) > 3)
        t1.tag = J.sublist$2$ax(tag, 0, 3);
      return B.JSArray_methods.firstWhere$2$orElse(B.List_7CR, new A.NetworkType_fromTag_closure(t1), new A.NetworkType_fromTag_closure0());
    },
    NetworkType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_7CR, new A.NetworkType_fromName_closure($name), new A.NetworkType_fromName_closure0());
    },
    NetworkType: function NetworkType(t0, t1) {
      this.name = t0;
      this.tag = t1;
    },
    NetworkType_fromTag_closure: function NetworkType_fromTag_closure(t0) {
      this._box_0 = t0;
    },
    NetworkType_fromTag_closure0: function NetworkType_fromTag_closure0() {
    },
    NetworkType_fromName_closure: function NetworkType_fromName_closure(t0) {
      this.name = t0;
    },
    NetworkType_fromName_closure0: function NetworkType_fromName_closure0() {
    },
    APIProvider: function APIProvider() {
    },
    _APIProvider_Object_Equatable: function _APIProvider_Object_Equatable() {
    },
    _APIProvider_Object_Equatable_CborSerializable: function _APIProvider_Object_Equatable_CborSerializable() {
    },
    EthereumAPIProvider_EthereumAPIProvider$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_decodeCborTags(null, obj, B.List_90_3, type$.CborListValue_dynamic),
        protocolId = A.ExtractCborList_elementAs(values, 1, type$.nullable_int),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAs(values, 0, t1),
        t3 = A.ServiceProtocol_fromID(protocolId == null ? 0 : protocolId),
        t4 = A.ExtractCborList_elemetMybeAs(values, 2, new A.EthereumAPIProvider_EthereumAPIProvider$fromCborBytesOrObject_closure(), type$.ProviderAuthenticated, type$.CborTagValue_dynamic);
      return new A.EthereumAPIProvider(t2, A.ExtractCborList_elementAs(values, 3, t1), t3, t4, A.ExtractCborList_elementAs(values, 4, type$.bool));
    },
    EthereumAPIProvider: function EthereumAPIProvider(t0, t1, t2, t3, t4) {
      var _ = this;
      _.uri = t0;
      _.identifier = t1;
      _.protocol = t2;
      _.auth = t3;
      _.allowInWeb3 = t4;
    },
    EthereumAPIProvider_EthereumAPIProvider$fromCborBytesOrObject_closure: function EthereumAPIProvider_EthereumAPIProvider$fromCborBytesOrObject_closure() {
    },
    BaseServiceProtocol: function BaseServiceProtocol() {
    },
    APIServiceTracker: function APIServiceTracker(t0, t1) {
      var _ = this;
      _.status = t0;
      _._requests = t1;
      _._totalError = _._totalSuccess = 0;
    },
    APIServiceTracker__checkStatus_closure: function APIServiceTracker__checkStatus_closure() {
    },
    HTTPService: function HTTPService() {
    },
    HTTPService_serviceRequest_closure: function HTTPService_serviceRequest_closure(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.$this = t0;
      _.request = t1;
      _.toUri = t2;
      _.timeout = t3;
      _.headers = t4;
      _.type = t5;
      _.authenticated = t6;
    },
    _HTTPService_Object_HttpImpl: function _HTTPService_Object_HttpImpl() {
    },
    BaseSocketService: function BaseSocketService() {
    },
    WebSocketService: function WebSocketService() {
    },
    WebSocketService__onClose_closure: function WebSocketService__onClose_closure() {
    },
    WebSocketService_connect_closure: function WebSocketService_connect_closure(t0) {
      this.$this = t0;
    },
    WebSocketService_connect__closure: function WebSocketService_connect__closure(t0) {
      this.$this = t0;
    },
    WebSocketService_addMessage_closure: function WebSocketService_addMessage_closure(t0, t1, t2) {
      this.$this = t0;
      this.message = t1;
      this.timeout = t2;
    },
    ServiceProtocol_fromID(id) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_G5k, new A.ServiceProtocol_fromID_closure(id), null);
    },
    ServiceProtocol_isValid(url) {
      var parse = A.Uri_tryParse(url);
      if (parse == null)
        return false;
      return B.JSString_methods.startsWith$1(parse.get$scheme(), "http") || B.JSString_methods.startsWith$1(parse.get$scheme(), "ws");
    },
    ServiceProtocol: function ServiceProtocol(t0, t1, t2) {
      this.value = t0;
      this.id = t1;
      this._name = t2;
    },
    ServiceProtocol_fromID_closure: function ServiceProtocol_fromID_closure(t0) {
      this.id = t0;
    },
    ApiRequest: function ApiRequest(t0, t1) {
      this.identifier = t0;
      this.error = t1;
    },
    SocketRequestCompleter: function SocketRequestCompleter(t0, t1, t2) {
      this.completer = t0;
      this.params = t1;
      this.id = t2;
    },
    SocketStatus: function SocketStatus(t0) {
      this._name = t0;
    },
    APIServiceStatus: function APIServiceStatus(t0) {
      this._name = t0;
    },
    EthereumSubscribeResult: function EthereumSubscribeResult(t0, t1) {
      this.subscription = t0;
      this.result = t1;
    },
    EthereumHTTPService: function EthereumHTTPService(t0, t1, t2, t3) {
      var _ = this;
      _.provider = t0;
      _.requestTimeout = t1;
      _.tracker = t2;
      _._lock = t3;
    },
    EthereumWebsocketService: function EthereumWebsocketService(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._listeners = t0;
      _.provider = t1;
      _.tracker = t2;
      _._websocket$_lock = t3;
      _._socket = null;
      _._status = t4;
      _._websocket$_subscription = null;
      _._websocket$_requests = t5;
    },
    EthereumWebsocketService__emitListeners_closure: function EthereumWebsocketService__emitListeners_closure(t0, t1) {
      this.i = t0;
      this.result = t1;
    },
    EthereumWebsocketService_onMessge_closure: function EthereumWebsocketService_onMessge_closure(t0) {
      this.message = t0;
    },
    IntegerBalance_IntegerBalance$token(balance, token, immutable) {
      var currencyDecimal = token.decimal,
        showDecimal = currencyDecimal > 8 ? 8 : currencyDecimal,
        currency = new A.IntegerBalance(token, true, $.$get$_BigIntImpl_zero(), showDecimal);
      currency._updateBalance$1(balance);
      return currency;
    },
    IntegerBalance: function IntegerBalance(t0, t1, t2, t3) {
      var _ = this;
      _._token = t0;
      _.allowNegative = t1;
      _._balance = t2;
      _.__IntegerBalance__price_A = $;
      _.__IntegerBalance_showDecimal_F = t3;
    },
    AptosChainType_fromValue(value) {
      if (value == null || value > 170)
        return B.AptosChainType_null_devnet;
      return B.JSArray_methods.firstWhere$2$orElse(B.List_9wx, new A.AptosChainType_fromValue_closure(value), new A.AptosChainType_fromValue_closure0());
    },
    AptosChainType: function AptosChainType(t0, t1) {
      this.id = t0;
      this._name = t1;
    },
    AptosChainType_fromValue_closure: function AptosChainType_fromValue_closure(t0) {
      this.value = t0;
    },
    AptosChainType_fromValue_closure0: function AptosChainType_fromValue_closure0() {
    },
    SolanaNetworkType_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_ALU, new A.SolanaNetworkType_fromValue_closure(value), new A.SolanaNetworkType_fromValue_closure0());
    },
    SolanaNetworkType: function SolanaNetworkType(t0, t1, t2) {
      this.identifier = t0;
      this.value = t1;
      this._name = t2;
    },
    SolanaNetworkType_fromValue_closure: function SolanaNetworkType_fromValue_closure(t0) {
      this.value = t0;
    },
    SolanaNetworkType_fromValue_closure0: function SolanaNetworkType_fromValue_closure0() {
    },
    StellarChainType_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_4NC, new A.StellarChainType_fromValue_closure(value), new A.StellarChainType_fromValue_closure0());
    },
    StellarChainType: function StellarChainType(t0, t1) {
      this.value = t0;
      this._name = t1;
    },
    StellarChainType_fromValue_closure: function StellarChainType_fromValue_closure(t0) {
      this.value = t0;
    },
    StellarChainType_fromValue_closure0: function StellarChainType_fromValue_closure0() {
    },
    SuiChainType_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_1rA, new A.SuiChainType_fromValue_closure(value), new A.SuiChainType_fromValue_closure0());
    },
    SuiChainType: function SuiChainType(t0, t1) {
      this.value = t0;
      this._name = t1;
    },
    SuiChainType_fromValue_closure: function SuiChainType_fromValue_closure(t0) {
      this.value = t0;
    },
    SuiChainType_fromValue_closure0: function SuiChainType_fromValue_closure0() {
    },
    CosmosFeeToken_CosmosFeeToken(averageGasPrice, denom, highGasPrice, lowGasPrice, token) {
      var networkDecimals, t1, t2, t3,
        e = token.decimal;
      if (e > 18)
        throw A.wrapException(A.WalletException$("invalid_token_exponent"));
      networkDecimals = A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(e), null);
      if (lowGasPrice == null)
        t1 = null;
      else {
        t1 = lowGasPrice.$mul(0, networkDecimals);
        t1 = A.IntegerBalance_IntegerBalance$token(t1.numerator.$tdiv(0, t1.denominator), token, false);
      }
      t2 = averageGasPrice.$mul(0, networkDecimals);
      t2 = A.IntegerBalance_IntegerBalance$token(t2.numerator.$tdiv(0, t2.denominator), token, false);
      if (highGasPrice == null)
        t3 = null;
      else {
        t3 = highGasPrice.$mul(0, networkDecimals);
        t3 = A.IntegerBalance_IntegerBalance$token(t3.numerator.$tdiv(0, t3.denominator), token, false);
      }
      return new A.CosmosFeeToken(token, denom, t1, t2, t3);
    },
    CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject(obj) {
      var values = A.CborSerializable_decodeCborTags(null, obj, B.List_110_1, type$.CborListValue_dynamic),
        token = A.Token_Token$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t1 = type$.IntegerBalance,
        t2 = type$.BigInt;
      return new A.CosmosFeeToken(token, A.ExtractCborList_elementAs(values, 1, type$.String), A.ExtractCborList_elemetMybeAs(values, 2, new A.CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure(token), t1, t2), A.IntegerBalance_IntegerBalance$token(A.ExtractCborList_elementAs(values, 3, t2), token, true), A.ExtractCborList_elemetMybeAs(values, 4, new A.CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure0(token), t1, t2));
    },
    CosmosFeeToken: function CosmosFeeToken(t0, t1, t2, t3, t4) {
      var _ = this;
      _.token = t0;
      _.denom = t1;
      _.lowGasPrice = t2;
      _.averageGasPrice = t3;
      _.highGasPrice = t4;
    },
    CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure: function CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure(t0) {
      this.token = t0;
    },
    CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure0: function CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure0(t0) {
      this.token = t0;
    },
    _CosmosFeeToken_Object_CborSerializable: function _CosmosFeeToken_Object_CborSerializable() {
    },
    EIP712Domain_fromJson(message) {
      var t1, exception;
      try {
        A._asString(message.$index(0, "name"));
        t1 = A.BigintUtils_tryParse(message.$index(0, "chainId"));
        A._asString(message.$index(0, "version"));
        A.ETHAddress_ETHAddress(A._asString(message.$index(0, "verifyingContract")));
        if (message.$index(0, "salt") != null)
          A.BytesUtils_toHexString(A.BytesUtils_fromHexString(A._asString(message.$index(0, "salt")), false), true, "0x");
        return new A.EIP712Domain(t1);
      } catch (exception) {
        return null;
      }
    },
    EIP712Domain: function EIP712Domain(t0) {
      this.chainId = t0;
    },
    SolanaWeb3TransactionSignResponse: function SolanaWeb3TransactionSignResponse(t0) {
      this.signedTransaction = t0;
    },
    SolanaWeb3TransactionSendResponse: function SolanaWeb3TransactionSendResponse(t0) {
      this.signature = t0;
    },
    TonAccountContextType_fromTag(tag) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_dRa, new A.TonAccountContextType_fromTag_closure(tag), new A.TonAccountContextType_fromTag_closure0());
    },
    TonAccountContext_TonAccountContext$deserialize(object) {
      var t1, t2,
        decode = A.CborSerializable_decode(null, null, object, type$.CborTagValue_dynamic),
        type = A.TonAccountContextType_fromTag(decode.tags),
        list = A.QuickCborTag_get_getList(decode),
        version = A.WalletVersion_WalletVersion$fromValue(A.ExtractCborList_elementAs(list, 0, type$.String)),
        bouncable = A.ExtractCborList_elementAt(list, 1, type$.bool);
      switch (type) {
        case B.TonAccountContextType_kI0:
          if (version.version > 2)
            A.throwExpression(B.WalletException_invalid_account_details_null);
          return new A.TonAccountLegacyContext(B.TonAccountContextType_kI0, version, bouncable);
        case B.TonAccountContextType_iax:
          t1 = A.ExtractCborList_elementAs(list, 2, type$.int);
          t2 = version.version;
          if (t2 < 3 || t2 > 4)
            A.throwExpression(B.WalletException_invalid_account_details_null);
          return new A.TonAccountSubWalletContext(t1, B.TonAccountContextType_iax, version, bouncable);
        case B.TonAccountContextType_Sw5:
          t1 = A.ExtractCborList_elementAs(list, 2, type$.int);
          if (version !== B.WalletVersion_v5R1_5)
            A.throwExpression(B.WalletException_invalid_account_details_null);
          return new A.TonAccountV5CustomContext(t1, B.TonAccountContextType_Sw5, B.WalletVersion_v5R1_5, bouncable);
        case B.TonAccountContextType_H4q:
          t1 = A.ExtractCborList_elementAs(list, 2, type$.int);
          if (version !== B.WalletVersion_v5R1_5)
            A.throwExpression(B.WalletException_invalid_account_details_null);
          return new A.TonAccountV5SubWalletContext(t1, B.TonAccountContextType_H4q, B.WalletVersion_v5R1_5, bouncable);
      }
    },
    TonAccountContextType: function TonAccountContextType(t0, t1) {
      this.tag = t0;
      this._name = t1;
    },
    TonAccountContextType_fromTag_closure: function TonAccountContextType_fromTag_closure(t0) {
      this.tag = t0;
    },
    TonAccountContextType_fromTag_closure0: function TonAccountContextType_fromTag_closure0() {
    },
    TonAccountContext: function TonAccountContext() {
    },
    TonAccountLegacyContext: function TonAccountLegacyContext(t0, t1, t2) {
      this.type = t0;
      this.version = t1;
      this.bouncable = t2;
    },
    TonAccountSubWalletContext: function TonAccountSubWalletContext(t0, t1, t2, t3) {
      var _ = this;
      _.subwalletId = t0;
      _.type = t1;
      _.version = t2;
      _.bouncable = t3;
    },
    TonAccountV5CustomContext: function TonAccountV5CustomContext(t0, t1, t2, t3) {
      var _ = this;
      _.walletId = t0;
      _.type = t1;
      _.version = t2;
      _.bouncable = t3;
    },
    TonAccountV5SubWalletContext: function TonAccountV5SubWalletContext(t0, t1, t2, t3) {
      var _ = this;
      _.subwalletId = t0;
      _.type = t1;
      _.version = t2;
      _.bouncable = t3;
    },
    _TonAccountContext_Object_CborSerializable: function _TonAccountContext_Object_CborSerializable() {
    },
    _TonAccountContext_Object_CborSerializable_Equatable: function _TonAccountContext_Object_CborSerializable_Equatable() {
    },
    CoingeckoCoin: function CoingeckoCoin(t0, t1, t2) {
      this.apiId = t0;
      this.coinName = t1;
      this.symbol = t2;
    },
    _CoingeckoCoin_Object_CborSerializable: function _CoingeckoCoin_Object_CborSerializable() {
    },
    _CoingeckoCoin_Object_CborSerializable_JsonSerialization: function _CoingeckoCoin_Object_CborSerializable_JsonSerialization() {
    },
    Token_Token$deserialize(obj) {
      var cbor, $name, symbol, decimal, image, market, t1, exception, bytes = null;
      try {
        cbor = A.CborSerializable_cborTagValue(bytes, null, obj, B.List_110, type$.CborListValue_dynamic);
        t1 = type$.String;
        $name = A.ExtractCborList_elementAs(cbor, 0, t1);
        symbol = A.ExtractCborList_elementAs(cbor, 1, t1);
        decimal = A.ExtractCborList_elementAs(cbor, 2, type$.int);
        t1 = type$.CborTagValue_dynamic;
        image = A.ExtractCborList_elemetMybeAs(cbor, 3, new A.Token_Token$deserialize_closure(), type$.APPImage, t1);
        market = A.ExtractCborList_elemetMybeAs(cbor, 4, new A.Token_Token$deserialize_closure0(), type$.CoingeckoCoin, t1);
        t1 = A.Token_Token(image, decimal, market, $name, symbol);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.WalletException_invalid_token_information_null);
      }
    },
    Token_Token(assetLogo, decimal, market, $name, symbol) {
      if (decimal < 0 || decimal > 255)
        throw A.wrapException(B.WalletException_invalid_token_information_null);
      A.StrUtils_substring($name, 20);
      A.StrUtils_substring(symbol, 5);
      return new A.Token(decimal, $name, symbol, market, assetLogo);
    },
    APPToken: function APPToken() {
    },
    Token: function Token(t0, t1, t2, t3, t4) {
      var _ = this;
      _.decimal = t0;
      _.name = t1;
      _.symbol = t2;
      _.market = t3;
      _.assetLogo = t4;
    },
    Token_Token$deserialize_closure: function Token_Token$deserialize_closure() {
    },
    Token_Token$deserialize_closure0: function Token_Token$deserialize_closure0() {
    },
    _APPToken_Object_CborSerializable: function _APPToken_Object_CborSerializable() {
    },
    _APPToken_Object_CborSerializable_Equatable: function _APPToken_Object_CborSerializable_Equatable() {
    },
    Web3RequestException$(code, data, message, walletCode) {
      return new A.Web3RequestException(message, code, walletCode, data);
    },
    Web3RequestException: function Web3RequestException(t0, t1, t2, t3) {
      var _ = this;
      _.message = t0;
      _.code = t1;
      _.walletCode = t2;
      _.data = t3;
    },
    _Web3RequestException_Object_Equatable: function _Web3RequestException_Object_Equatable() {
    },
    Web3ChainMessage_Web3ChainMessage$deserialize(bytes, object) {
      var tag = A.CborSerializable_decode(bytes, null, object, type$.CborTagValue_dynamic);
      return new A.Web3ChainMessage(A.Web3MessageTypes_fromTag(tag.tags), A.Web3APPData_Web3APPData$deserialize(A.ExtractCborList_getCborTag(A.QuickCborTag_get_getList(tag), 0)));
    },
    Web3ChainMessage: function Web3ChainMessage(t0, t1) {
      this.type = t0;
      this.authenticated = t1;
    },
    Web3EncryptedMessage_Web3EncryptedMessage$deserialize(bytes) {
      var values, t1, t2, exception, hex = null, object = null;
      try {
        values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_0_10_200_0, type$.CborListValue_dynamic);
        t1 = type$.List_int;
        t2 = A.ExtractCborList_elementAt(values, 0, t1);
        t1 = A.ExtractCborList_elementAt(values, 1, t1);
        A.BytesUtils_validateListOfBytes(t1);
        t1 = A.List_List$unmodifiable(t1, type$.int);
        return new A.Web3EncryptedMessage(t2, t1);
      } catch (exception) {
        throw A.wrapException(B.Web3RequestException_ce8);
      }
    },
    Web3EncryptedMessage: function Web3EncryptedMessage(t0, t1) {
      this.message = t0;
      this.nonce = t1;
    },
    _Web3EncryptedMessage_Object_CborSerializable: function _Web3EncryptedMessage_Object_CborSerializable() {
    },
    Web3ExceptionMessage_Web3ExceptionMessage$deserialize(bytes, object) {
      var values = A.CborSerializable_cborTagValue(bytes, null, object, B.List_100_15, type$.CborListValue_dynamic),
        t1 = type$.String;
      return new A.Web3ExceptionMessage(A.ExtractCborList_elementAt(values, 0, t1), A.ExtractCborList_elementAt(values, 1, type$.int), A.ExtractCborList_elementAt(values, 2, t1), A.ExtractCborList_elementAt(values, 3, type$.nullable_String), A.ExtractCborList_elemetMybeAs(values, 4, new A.Web3ExceptionMessage_Web3ExceptionMessage$deserialize_closure(), type$.Web3APPData, type$.CborObject));
    },
    Web3ExceptionMessage: function Web3ExceptionMessage(t0, t1, t2, t3, t4) {
      var _ = this;
      _.message = t0;
      _.code = t1;
      _.walletCode = t2;
      _.data = t3;
      _.authenticated = t4;
    },
    Web3ExceptionMessage_Web3ExceptionMessage$deserialize_closure: function Web3ExceptionMessage_Web3ExceptionMessage$deserialize_closure() {
    },
    Web3ExceptionMessage_toJson_closure: function Web3ExceptionMessage_toJson_closure() {
    },
    Web3GlobalResponseMessage_Web3GlobalResponseMessage$deserialize(object) {
      return new A.Web3GlobalResponseMessage(A.ExtractCborList_elemetMybeAs(A.CborSerializable_cborTagValue(null, null, object, B.List_100_18, type$.CborListValue_dynamic), 0, new A.Web3GlobalResponseMessage_Web3GlobalResponseMessage$deserialize_closure(), type$.Web3APPData, type$.CborTagValue_dynamic));
    },
    Web3GlobalResponseMessage: function Web3GlobalResponseMessage(t0) {
      this.authenticated = t0;
    },
    Web3GlobalResponseMessage_Web3GlobalResponseMessage$deserialize_closure: function Web3GlobalResponseMessage_Web3GlobalResponseMessage$deserialize_closure() {
    },
    Web3WalletResponseMessage_Web3WalletResponseMessage$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_100_14, type$.CborListValue_dynamic),
        t1 = A.StringUtils_toJson(A.ExtractCborList_elementAt(values, 0, type$.String), null, type$.Map_String_dynamic).$index(0, "result");
      return new A.Web3WalletResponseMessage(A.ExtractCborList_elemetMybeAs(values, 1, new A.Web3WalletResponseMessage_Web3WalletResponseMessage$deserialize_closure(), type$.Web3APPData, type$.CborTagValue_dynamic), t1, A.NetworkType_fromTag(A.ExtractCborList_elementAt(values, 2, type$.nullable_List_int)));
    },
    Web3WalletResponseMessage: function Web3WalletResponseMessage(t0, t1, t2) {
      this.authenticated = t0;
      this.result = t1;
      this.network = t2;
    },
    Web3WalletResponseMessage_Web3WalletResponseMessage$deserialize_closure: function Web3WalletResponseMessage_Web3WalletResponseMessage$deserialize_closure() {
    },
    Web3MessageCore_Web3MessageCore$deserialize(bytes) {
      var cbor, type, t1, exception, hex = null, object = null;
      try {
        cbor = A.CborSerializable_decode(bytes, hex, object, type$.CborTagValue_dynamic);
        type = A.Web3MessageTypes_fromTag(cbor.tags);
        switch (type) {
          case B.Web3MessageTypes_List_100_11_chains:
            t1 = A.Web3ChainMessage_Web3ChainMessage$deserialize(null, cbor);
            return t1;
          case B.Web3MessageTypes_List_100_14_walletResponse:
            t1 = A.Web3WalletResponseMessage_Web3WalletResponseMessage$deserialize(cbor);
            return t1;
          case B.Web3MessageTypes_List_100_12_walletRequest:
            t1 = type$.dynamic;
            t1 = A.Web3RequestParams_Web3RequestParams$deserialize(cbor, t1, t1, type$.Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction, type$.ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction, type$.Web3ChainAccount_dynamic, type$.Web3Chain_of_nullable_Object_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider);
            return t1;
          case B.Web3MessageTypes_List_100_17_walletGlobalRequest:
            t1 = A.Web3GlobalRequestParams_Web3GlobalRequestParams$deserialize(cbor, type$.dynamic);
            return t1;
          case B.Web3MessageTypes_List_100_18_globalResponse:
            t1 = A.Web3GlobalResponseMessage_Web3GlobalResponseMessage$deserialize(cbor);
            return t1;
          case B.Web3MessageTypes_List_100_15_error:
            t1 = A.Web3ExceptionMessage_Web3ExceptionMessage$deserialize(null, cbor);
            return t1;
        }
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
        else
          throw A.wrapException(B.Web3RequestException_ce8);
      }
    },
    Web3MessageCore: function Web3MessageCore() {
    },
    _Web3MessageCore_Object_CborSerializable: function _Web3MessageCore_Object_CborSerializable() {
    },
    Web3MessageTypes_fromTag(tags) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_KQt, new A.Web3MessageTypes_fromTag_closure(tags), new A.Web3MessageTypes_fromTag_closure0());
    },
    Web3MessageTypes: function Web3MessageTypes(t0, t1) {
      this.tag = t0;
      this._name = t1;
    },
    Web3MessageTypes_fromTag_closure: function Web3MessageTypes_fromTag_closure(t0) {
      this.tags = t0;
    },
    Web3MessageTypes_fromTag_closure0: function Web3MessageTypes_fromTag_closure0() {
    },
    Web3NetworkRequestMethods_fromTag(tag) {
      switch (A.NetworkType_fromTag(tag)) {
        case B.NetworkType_TUr:
          tag.toString;
          return A.Web3EthereumRequestMethods_fromId(J.get$last$ax(tag));
        case B.NetworkType_KPy:
          tag.toString;
          return A.Web3TronRequestMethods_fromId(J.get$last$ax(tag));
        case B.NetworkType_406:
          tag.toString;
          return A.Web3SolanaRequestMethods_fromId(J.get$last$ax(tag));
        case B.NetworkType_9gG:
          tag.toString;
          return A.Web3TonRequestMethods_fromId(J.get$last$ax(tag));
        case B.NetworkType_mux:
          tag.toString;
          return A.Web3StellarRequestMethods_fromId(J.get$last$ax(tag));
        case B.NetworkType_SDW:
          tag.toString;
          return A.Web3SubstrateRequestMethods_fromId(J.get$last$ax(tag));
        case B.NetworkType_2nn:
          tag.toString;
          return A.Web3AptosRequestMethods_fromId(J.get$last$ax(tag));
        case B.NetworkType_AXR:
          tag.toString;
          return A.Web3SuiRequestMethods_fromId(J.get$last$ax(tag));
        case B.NetworkType_iOs:
          tag.toString;
          return A.Web3CosmosRequestMethods_fromId(J.get$last$ax(tag));
        case B.NetworkType_ugS:
          tag.toString;
          return A.Web3BitcoinRequestMethods_fromId(J.get$last$ax(tag));
        default:
          throw A.wrapException(B.Web3RequestException_RyO);
      }
    },
    Web3RequestMethods: function Web3RequestMethods() {
    },
    Web3NetworkRequestMethods: function Web3NetworkRequestMethods() {
    },
    Web3APPAuthentication_toApplicationId(url) {
      var t2, _null = null,
        uri = A.Uri_tryParse(url),
        t1 = uri == null ? _null : uri.get$host().length === 0;
      if (t1 !== false)
        return _null;
      t1 = uri.get$host();
      t2 = uri.get$scheme();
      return A._Uri__Uri(t1, _null, _null, uri.get$port(), t2).normalizePath$0().get$_text();
    },
    Web3APPData_Web3APPData$deserialize(object) {
      var t3, t4, t5, t6, t7,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_0_0, type$.CborListValue_dynamic),
        t1 = type$.Web3ChainAuthenticated_Web3ChainAccount_dynamic,
        t2 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 0, type$.CborTagValue_dynamic), new A.Web3APPData_Web3APPData$deserialize_closure(), t1);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      t3 = A.ExtractCborList_elementAt(values, 1, type$.bool);
      t4 = A.ExtractCborList_elementAt(values, 2, type$.List_int);
      t5 = type$.NetworkType;
      t6 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 3, type$.CborBytesValue), new A.Web3APPData_Web3APPData$deserialize_closure0(), t5);
      t6 = A.List_List$_of(t6, t6.$ti._eval$1("ListIterable.E"));
      t7 = A.ExtractCborList_elementAs(values, 4, type$.String);
      t1 = A.List_List$unmodifiable(t2, t1);
      A.BytesUtils_validateListOfBytes(t4);
      return new A.Web3APPData(t3, t7, A.List_List$unmodifiable(t4, type$.int), A.List_List$unmodifiable(t6, t5), t1);
    },
    Web3APPData: function Web3APPData(t0, t1, t2, t3, t4) {
      var _ = this;
      _.active = t0;
      _.applicationId = t1;
      _.token = t2;
      _.networks = t3;
      _._chains = t4;
    },
    Web3APPData_getAuth_closure: function Web3APPData_getAuth_closure() {
    },
    Web3APPData_getAuth_closure0: function Web3APPData_getAuth_closure0(t0) {
      this.networkType = t0;
    },
    Web3APPData_Web3APPData$deserialize_closure: function Web3APPData_Web3APPData$deserialize_closure() {
    },
    Web3APPData_Web3APPData$deserialize_closure0: function Web3APPData_Web3APPData$deserialize_closure0() {
    },
    _Web3APPData_Object_CborSerializable: function _Web3APPData_Object_CborSerializable() {
    },
    Web3ChainDefaultIdnetifier_Web3ChainDefaultIdnetifier$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_0_1, type$.CborListValue_dynamic),
        t1 = A.ExtractCborList_elementAs(values, 0, type$.int);
      return new A.Web3ChainDefaultIdnetifier(A.ExtractCborList_elementAs(values, 1, type$.String), t1);
    },
    Web3ChainAuthenticated_Web3ChainAuthenticated$deserialize(object, CHAINACCOUNT) {
      var t1,
        tag = A.CborSerializable_decode(null, null, object, type$.CborTagValue_dynamic),
        type = A.NetworkType_fromTag(tag.tags);
      $label0$0: {
        if (B.NetworkType_406 === type) {
          t1 = A.Web3SolanaChainAuthenticated_Web3SolanaChainAuthenticated$deserialize(tag);
          break $label0$0;
        }
        if (B.NetworkType_TUr === type) {
          t1 = A.Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize(tag);
          break $label0$0;
        }
        if (B.NetworkType_9gG === type) {
          t1 = A.Web3TonChainAuthenticated_Web3TonChainAuthenticated$deserialize(tag);
          break $label0$0;
        }
        if (B.NetworkType_KPy === type) {
          t1 = A.Web3TronChainAuthenticated_Web3TronChainAuthenticated$deserialize(tag);
          break $label0$0;
        }
        if (B.NetworkType_mux === type) {
          t1 = A.Web3StellarChainAuthenticated_Web3StellarChainAuthenticated$deserialize(tag);
          break $label0$0;
        }
        if (B.NetworkType_SDW === type) {
          t1 = A.Web3SubstrateChainAuthenticated_Web3SubstrateChainAuthenticated$deserialize(tag);
          break $label0$0;
        }
        if (B.NetworkType_2nn === type) {
          t1 = A.Web3AptosChainAuthenticated_Web3AptosChainAuthenticated$deserialize(tag);
          break $label0$0;
        }
        if (B.NetworkType_AXR === type) {
          t1 = A.Web3SuiChainAuthenticated_Web3SuiChainAuthenticated$deserialize(tag);
          break $label0$0;
        }
        if (B.NetworkType_iOs === type) {
          t1 = A.Web3CosmosChainAuthenticated_Web3CosmosChainAuthenticated$deserialize(tag);
          break $label0$0;
        }
        if (B.NetworkType_ugS === type) {
          t1 = A.Web3BitcoinChainAuthenticated_Web3BitcoinChainAuthenticated$deserialize(tag);
          break $label0$0;
        }
        t1 = A.throwExpression(B.WalletException_data_verification_failed_null);
      }
      return CHAINACCOUNT._eval$1("Web3ChainAuthenticated<0>")._as(t1);
    },
    Web3ChainAccount: function Web3ChainAccount() {
    },
    Web3ChainIdnetifier: function Web3ChainIdnetifier() {
    },
    Web3ChainDefaultIdnetifier: function Web3ChainDefaultIdnetifier(t0, t1) {
      this.identifier = t0;
      this.id = t1;
    },
    Web3ChainAuthenticated: function Web3ChainAuthenticated() {
    },
    _Web3ChainAccount_Object_CborSerializable: function _Web3ChainAccount_Object_CborSerializable() {
    },
    _Web3ChainAccount_Object_CborSerializable_Equatable: function _Web3ChainAccount_Object_CborSerializable_Equatable() {
    },
    _Web3ChainAuthenticated_Object_CborSerializable: function _Web3ChainAuthenticated_Object_CborSerializable() {
    },
    _Web3ChainIdnetifier_Object_CborSerializable: function _Web3ChainIdnetifier_Object_CborSerializable() {
    },
    _Web3ChainIdnetifier_Object_CborSerializable_Equatable: function _Web3ChainIdnetifier_Object_CborSerializable_Equatable() {
    },
    Web3GlobalRequestParams_Web3GlobalRequestParams$deserialize(object, RESPONSE) {
      var param, values, _null = null,
        t1 = type$.CborListValue_dynamic;
      switch (A.Web3GlobalRequestMethods_fromId(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(_null, _null, object, B.List_100_17, t1), 0, type$.nullable_int))) {
        case B.Web3GlobalRequestMethods_0_disconnect_List_empty:
          param = new A.Web3DisconnectApplication(A.NetworkType_fromName(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(_null, _null, object, B.List_100_17, t1), 1, type$.nullable_String)));
          break;
        case B.Web3GlobalRequestMethods_2_switch_network_List_empty:
          values = A.CborSerializable_cborTagValue(_null, _null, object, B.List_100_17, t1);
          param = new A.Web3SwitchApplicationNetwork(A.NetworkType_fromName(A.ExtractCborList_elementAs(values, 1, type$.nullable_String)), A.ExtractCborList_elementAs(values, 2, type$.int));
          break;
        case B.Web3GlobalRequestMethods_1_connect_List_empty:
          param = A.Web3ConnectApplication_Web3ConnectApplication$deserialize(_null, _null, object);
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      if (!RESPONSE._eval$1("Web3GlobalRequestParams<0>")._is(param))
        throw A.wrapException(B.Web3RequestException_ce8);
      return param;
    },
    Web3RequestParams_Web3RequestParams$deserialize(object, RESPONSE, NETWORKADDRESS, CHAIN, WALLETACCOUNT, CHAINACCOUNT, WEB3CHAIN) {
      var param, _null = null;
      switch (A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(_null, _null, object, B.List_100_12, type$.CborListValue_dynamic), 0, type$.nullable_List_int)).get$network()) {
        case B.NetworkType_TUr:
          param = A.Web3EthereumRequestParam_Web3EthereumRequestParam$deserialize(_null, _null, object, type$.dynamic);
          break;
        case B.NetworkType_KPy:
          param = A.Web3TronRequestParam_Web3TronRequestParam$deserialize(_null, _null, object, type$.dynamic);
          break;
        case B.NetworkType_406:
          param = A.Web3SolanaRequestParam_Web3SolanaRequestParam$deserialize(_null, _null, object, type$.dynamic);
          break;
        case B.NetworkType_9gG:
          param = A.Web3TonRequestParam_Web3TonRequestParam$deserialize(_null, _null, object, type$.dynamic);
          break;
        case B.NetworkType_mux:
          param = A.Web3StellarRequestParam_Web3StellarRequestParam$deserialize(_null, _null, object, type$.dynamic);
          break;
        case B.NetworkType_SDW:
          param = A.Web3SubstrateRequestParam_Web3SubstrateRequestParam$deserialize(_null, _null, object, type$.dynamic);
          break;
        case B.NetworkType_2nn:
          param = A.Web3AptosRequestParam_Web3AptosRequestParam$deserialize(_null, _null, object, type$.dynamic);
          break;
        case B.NetworkType_AXR:
          param = A.Web3SuiRequestParam_Web3SuiRequestParam$deserialize(_null, _null, object, type$.dynamic);
          break;
        case B.NetworkType_iOs:
          param = A.Web3CosmosRequestParam_Web3CosmosRequestParam$deserialize(_null, _null, object, type$.dynamic);
          break;
        case B.NetworkType_ugS:
          param = A.Web3BitcoinRequestParam_Web3BitcoinRequestParam$deserialize(_null, _null, object, type$.dynamic);
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      if (!RESPONSE._eval$1("@<0>")._bind$1(NETWORKADDRESS)._bind$1(CHAIN)._bind$1(WALLETACCOUNT)._bind$1(CHAINACCOUNT)._bind$1(WEB3CHAIN)._eval$1("Web3RequestParams<1,2,3,4,5,6>")._is(param))
        throw A.wrapException(B.Web3RequestException_ce8);
      return param;
    },
    Web3WalletRequestParams: function Web3WalletRequestParams() {
    },
    Web3GlobalRequestParams: function Web3GlobalRequestParams() {
    },
    Web3RequestParams: function Web3RequestParams() {
    },
    Web3AptosRequestMethods_fromId(id) {
      return B.JSArray_methods.firstWhere$2$orElse($.Web3AptosRequestMethods_values, new A.Web3AptosRequestMethods_fromId_closure(id), new A.Web3AptosRequestMethods_fromId_closure0());
    },
    Web3AptosRequestMethods_fromName($name) {
      return A.QuickImutableList_firstWhereOrNull($.Web3AptosRequestMethods_values, new A.Web3AptosRequestMethods_fromName_closure($name), type$.Web3AptosRequestMethods);
    },
    Web3AptosRequestMethods: function Web3AptosRequestMethods(t0, t1, t2) {
      this.id = t0;
      this.name = t1;
      this.methodsName = t2;
    },
    Web3AptosRequestMethods_fromId_closure: function Web3AptosRequestMethods_fromId_closure(t0) {
      this.id = t0;
    },
    Web3AptosRequestMethods_fromId_closure0: function Web3AptosRequestMethods_fromId_closure0() {
    },
    Web3AptosRequestMethods_fromName_closure: function Web3AptosRequestMethods_fromName_closure(t0) {
      this.name = t0;
    },
    Web3AptosRequestParam_Web3AptosRequestParam$deserialize(bytes, hex, object, RESPONSE) {
      var param, values, t2, t3, t4, t5, t6,
        t1 = type$.CborListValue_dynamic;
      switch (A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1), 0, type$.nullable_List_int))) {
        case B.Web3AptosRequestMethods_qFM:
        case B.Web3AptosRequestMethods_oY4:
        case B.Web3AptosRequestMethods_yoF:
          param = A.Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize(bytes, hex, object);
          break;
        case B.Web3AptosRequestMethods_102_aptos_signMessage_List_empty:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          t1 = A.Web3AptosChainAccount_Web3AptosChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic));
          t2 = type$.nullable_String;
          t3 = A.ExtractCborList_elementAs(values, 2, t2);
          t4 = type$.nullable_bool;
          t5 = A.ExtractCborList_elementAs(values, 3, t4);
          t6 = A.ExtractCborList_elementAs(values, 4, t4);
          t4 = A.ExtractCborList_elementAs(values, 5, t4);
          param = new A.Web3AptosSignMessage(t3, A.ExtractCborList_elementAs(values, 6, t2), t4, t5, t6, A.ExtractCborList_elementAs(values, 7, t2), t1);
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      if (!RESPONSE._eval$1("Web3AptosRequestParam<0>")._is(param))
        throw A.wrapException(B.Web3RequestException_ce8);
      return param;
    },
    Web3AptosRequestParam: function Web3AptosRequestParam() {
    },
    Web3AptosSignMessageResponse: function Web3AptosSignMessageResponse(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.message = t0;
      _.nonce = t1;
      _.chainId = t2;
      _.address = t3;
      _.application = t4;
      _.prefix = t5;
      _.fullMessage = t6;
      _.signature = t7;
    },
    Web3AptosSignMessage: function Web3AptosSignMessage(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.message = t0;
      _.nonce = t1;
      _.chainId = t2;
      _.address = t3;
      _.application = t4;
      _.messageBytes = t5;
      _.accessAccount = t6;
    },
    Web3AptosSendTransaction_Web3AptosSendTransaction(account, feePayer, method, socondarySignerAddresses, transaction) {
      switch (method) {
        case B.Web3AptosRequestMethods_oY4:
        case B.Web3AptosRequestMethods_yoF:
        case B.Web3AptosRequestMethods_qFM:
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      type$.Web3AptosRequestMethods._as(method);
      return new A.Web3AptosSendTransaction(transaction, feePayer, socondarySignerAddresses == null ? null : A.List_List$unmodifiable(socondarySignerAddresses, type$.AptosAddress), account, method);
    },
    Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize(bytes, hex, object) {
      var t1 = type$.CborListValue_dynamic,
        values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1),
        method = A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAt(values, 0, type$.nullable_List_int)),
        t2 = A.Web3AptosChainAccount_Web3AptosChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic)),
        t3 = A.AptosRawTransaction_AptosRawTransaction$fromStruct(A.BcsSerialization_deserialize(A.ExtractCborList_elementAs(values, 2, type$.List_int), A.AptosRawTransaction_layout(null)));
      return A.Web3AptosSendTransaction_Web3AptosSendTransaction(t2, A.ExtractCborList_elemetMybeAs(values, 3, new A.Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize_closure(), type$.AptosAddress, type$.CborStringValue), method, A.ExtractCborList_elemetMybeAs(values, 4, new A.Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize_closure0(), type$.List_AptosAddress, t1), t3);
    },
    Web3AptosSendTransaction: function Web3AptosSendTransaction(t0, t1, t2, t3, t4) {
      var _ = this;
      _.transaction = t0;
      _.feePayer = t1;
      _.secondarySignerAddresses = t2;
      _.accessAccount = t3;
      _.method = t4;
    },
    Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize_closure: function Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize_closure() {
    },
    Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize_closure0: function Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize_closure0() {
    },
    Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize__closure: function Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize__closure() {
    },
    Web3AptosSendTransaction_toCbor_closure: function Web3AptosSendTransaction_toCbor_closure() {
    },
    Web3AptosChainAccount_Web3AptosChainAccount$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_2_6, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = A.AptosAddress_AptosAddress$fromBytes(A.AptosAddressUtils_addressToBytes(A.ExtractCborList_elementAt(values, 1, type$.String))),
        t3 = type$.int,
        t4 = A.ExtractCborList_elementAt(values, 2, t3),
        t5 = A.ExtractCborList_elementAt(values, 3, type$.bool),
        t6 = A.ExtractCborList_elementAs(values, 4, type$.List_int),
        t7 = A.ExtractCborList_elementAs(values, 5, t3),
        t8 = A.AptosChainType_fromValue(A.ExtractCborList_elementAs(values, 6, type$.nullable_int));
      A.BytesUtils_validateListOfBytes(t6);
      return new A.Web3AptosChainAccount(t4, A.List_List$unmodifiable(t6, t3), t7, t8, t1, t2, t5);
    },
    Web3AptosChainIdnetifier_Web3AptosChainIdnetifier$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_0_5, type$.CborListValue_dynamic),
        t1 = A.ExtractCborList_elementAs(values, 0, type$.nullable_int),
        t2 = A.ExtractCborList_elementAs(values, 1, type$.int);
      return new A.Web3AptosChainIdnetifier(t1, A.ExtractCborList_elementAs(values, 2, type$.String), t2);
    },
    Web3AptosChainAuthenticated_Web3AptosChainAuthenticated$deserialize(object) {
      var t4, t5,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_16, type$.CborListValue_dynamic),
        t1 = type$.CborTagValue_dynamic,
        t2 = type$.Web3AptosChainAccount,
        t3 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 0, t1), new A.Web3AptosChainAuthenticated_Web3AptosChainAuthenticated$deserialize_closure(), t2);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      t4 = type$.Web3AptosChainIdnetifier;
      t5 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 1, t1), new A.Web3AptosChainAuthenticated_Web3AptosChainAuthenticated$deserialize_closure0(), t4);
      t5 = A.List_List$_of(t5, t5.$ti._eval$1("ListIterable.E"));
      t1 = A.Web3AptosChainIdnetifier_Web3AptosChainIdnetifier$deserialize(A.ExtractCborList_elementAs(values, 2, t1));
      return new A.Web3AptosChainAuthenticated(A.List_List$unmodifiable(t5, t4), t1, B.NetworkType_2nn, A.List_List$unmodifiable(t3, t2));
    },
    Web3AptosChainAccount: function Web3AptosChainAccount(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.id = t0;
      _.publicKey = t1;
      _.signingScheme = t2;
      _.network = t3;
      _.keyIndex = t4;
      _.address = t5;
      _._defaultAddress = t6;
    },
    Web3AptosChainIdnetifier: function Web3AptosChainIdnetifier(t0, t1, t2) {
      var _ = this;
      _.chainId = t0;
      _.identifier = t1;
      _.__Web3AptosChainIdnetifier_aptosChain_FI = $;
      _.id = t2;
    },
    Web3AptosChainAuthenticated: function Web3AptosChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3AptosChainAuthenticated_Web3AptosChainAuthenticated$deserialize_closure: function Web3AptosChainAuthenticated_Web3AptosChainAuthenticated$deserialize_closure() {
    },
    Web3AptosChainAuthenticated_Web3AptosChainAuthenticated$deserialize_closure0: function Web3AptosChainAuthenticated_Web3AptosChainAuthenticated$deserialize_closure0() {
    },
    Web3BitcoinRequestMethods_fromId(id) {
      return B.JSArray_methods.firstWhere$2$orElse($.Web3BitcoinRequestMethods_values, new A.Web3BitcoinRequestMethods_fromId_closure(id), new A.Web3BitcoinRequestMethods_fromId_closure0());
    },
    Web3BitcoinRequestMethods_fromName($name) {
      return A.QuickImutableList_firstWhereOrNull($.Web3BitcoinRequestMethods_values, new A.Web3BitcoinRequestMethods_fromName_closure($name), type$.Web3BitcoinRequestMethods);
    },
    Web3BitcoinRequestMethods: function Web3BitcoinRequestMethods(t0, t1, t2) {
      this.id = t0;
      this.name = t1;
      this.methodsName = t2;
    },
    Web3BitcoinRequestMethods_fromId_closure: function Web3BitcoinRequestMethods_fromId_closure(t0) {
      this.id = t0;
    },
    Web3BitcoinRequestMethods_fromId_closure0: function Web3BitcoinRequestMethods_fromId_closure0() {
    },
    Web3BitcoinRequestMethods_fromName_closure: function Web3BitcoinRequestMethods_fromName_closure(t0) {
      this.name = t0;
    },
    Web3BitcoinRequestParam_Web3BitcoinRequestParam$deserialize(bytes, hex, object, RESPONSE) {
      var param, values, t2, t3, t4,
        t1 = type$.CborListValue_dynamic;
      switch (A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1), 0, type$.nullable_List_int))) {
        case B.Web3BitcoinRequestMethods_2wh:
          param = A.Web3BitcoinSignTransaction_Web3BitcoinSignTransaction$deserialize(bytes, hex, object);
          break;
        case B.Web3BitcoinRequestMethods_9zY:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          t1 = A.Web3BitcoinChainAccount_Web3BitcoinChainAccount$deserialize(A.ExtractCborList_getCborTag(values, 1));
          t2 = A.ExtractCborList_elementAs(values, 2, type$.String);
          t3 = type$.nullable_String;
          t4 = A.ExtractCborList_elementAs(values, 3, t3);
          param = new A.Web3BitcoinSignMessage(t2, A.ExtractCborList_elementAs(values, 4, t3), t4, t1);
          break;
        case B.Web3BitcoinRequestMethods_C8u:
          param = A.Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize(bytes, hex, object);
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      if (!RESPONSE._eval$1("Web3BitcoinRequestParam<0>")._is(param))
        throw A.wrapException(B.Web3RequestException_ce8);
      return param;
    },
    Web3BitcoinRequestParam: function Web3BitcoinRequestParam() {
    },
    Web3BitcoinSendTransactionOutput_Web3BitcoinSendTransactionOutput(address, scriptPubKey, value) {
      if (value._isNegative)
        throw A.wrapException(A.Web3RequestExceptionConst_failedToParse("value"));
      return new A.Web3BitcoinSendTransactionOutput(value, scriptPubKey, address);
    },
    Web3BitcoinSendTransaction_Web3BitcoinSendTransaction(accounts, outputs, requiredAccount) {
      var t1 = A._arrayInstanceType(accounts);
      if (new A.MappedListIterable(accounts, t1._eval$1("BasedUtxoNetwork(1)")._as(new A.Web3BitcoinSendTransaction_Web3BitcoinSendTransaction_closure()), t1._eval$1("MappedListIterable<1,BasedUtxoNetwork>")).toSet$0(0)._collection$_length !== 1)
        throw A.wrapException(B.Web3RequestException_ce8);
      if (requiredAccount != null && !B.JSArray_methods.contains$1(accounts, requiredAccount))
        throw A.wrapException(B.Web3RequestException_ce8);
      if (outputs.length === 0)
        throw A.wrapException(A.Web3BitcoinExceptionConstant_emptyOutput());
      if (0 >= accounts.length)
        return A.ioore(accounts, 0);
      return new A.Web3BitcoinSendTransaction(A.List_List$unmodifiable(accounts, type$.Web3BitcoinChainAccount), A.List_List$unmodifiable(outputs, type$.Web3BitcoinSendTransactionOutput), requiredAccount);
    },
    Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize(bytes, hex, object) {
      var t4,
        values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, type$.CborListValue_dynamic),
        t1 = type$.CborTagValue_dynamic,
        t2 = type$.Web3BitcoinChainAccount,
        t3 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 1, t1), new A.Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize_closure(), t2);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      t4 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 2, t1), new A.Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize_closure0(), type$.Web3BitcoinSendTransactionOutput);
      t4 = A.List_List$_of(t4, t4.$ti._eval$1("ListIterable.E"));
      return A.Web3BitcoinSendTransaction_Web3BitcoinSendTransaction(t3, t4, A.ExtractCborList_elemetMybeAs(values, 3, new A.Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize_closure1(), t2, t1));
    },
    Web3BitcoinSendTransactionOutput: function Web3BitcoinSendTransactionOutput(t0, t1, t2) {
      this.value = t0;
      this.scriptPubKey = t1;
      this.address = t2;
    },
    Web3BitcoinSendTransaction: function Web3BitcoinSendTransaction(t0, t1, t2) {
      this.accounts = t0;
      this.outputs = t1;
      this.requiredAccount = t2;
    },
    Web3BitcoinSendTransaction_Web3BitcoinSendTransaction_closure: function Web3BitcoinSendTransaction_Web3BitcoinSendTransaction_closure() {
    },
    Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize_closure: function Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize_closure() {
    },
    Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize_closure0: function Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize_closure0() {
    },
    Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize_closure1: function Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize_closure1() {
    },
    Web3BitcoinSendTransaction_toCbor_closure: function Web3BitcoinSendTransaction_toCbor_closure() {
    },
    Web3BitcoinSendTransaction_toCbor_closure0: function Web3BitcoinSendTransaction_toCbor_closure0() {
    },
    _Web3BitcoinSendTransactionOutput_Object_CborSerializable: function _Web3BitcoinSendTransactionOutput_Object_CborSerializable() {
    },
    Web3BitcoinSignMessageResponse: function Web3BitcoinSignMessageResponse(t0, t1) {
      this.signature = t0;
      this.digest = t1;
    },
    Web3BitcoinSignMessage: function Web3BitcoinSignMessage(t0, t1, t2, t3) {
      var _ = this;
      _.message = t0;
      _.messagePrefix = t1;
      _.content = t2;
      _.accessAccount = t3;
    },
    Web3BitcoinSignTransaction_Web3BitcoinSignTransaction(accounts, psbt) {
      var t1 = A._arrayInstanceType(accounts);
      if (new A.MappedListIterable(accounts, t1._eval$1("BasedUtxoNetwork(1)")._as(new A.Web3BitcoinSignTransaction_Web3BitcoinSignTransaction_closure()), t1._eval$1("MappedListIterable<1,BasedUtxoNetwork>")).toSet$0(0)._collection$_length !== 1)
        throw A.wrapException(B.Web3RequestException_ce8);
      if (0 >= accounts.length)
        return A.ioore(accounts, 0);
      return new A.Web3BitcoinSignTransaction(accounts, psbt);
    },
    Web3BitcoinSignTransaction_Web3BitcoinSignTransaction$deserialize(bytes, hex, object) {
      var values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, type$.CborListValue_dynamic),
        t1 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 1, type$.CborTagValue_dynamic), new A.Web3BitcoinSignTransaction_Web3BitcoinSignTransaction$deserialize_closure(), type$.Web3BitcoinChainAccount);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return A.Web3BitcoinSignTransaction_Web3BitcoinSignTransaction(t1, A.Psbt_Psbt$deserialize(A.ExtractCborList_elementAs(values, 2, type$.List_int)));
    },
    Web3BitcoinSignTransaction: function Web3BitcoinSignTransaction(t0, t1) {
      this.accounts = t0;
      this.psbt = t1;
    },
    Web3BitcoinSignTransaction_Web3BitcoinSignTransaction_closure: function Web3BitcoinSignTransaction_Web3BitcoinSignTransaction_closure() {
    },
    Web3BitcoinSignTransaction_Web3BitcoinSignTransaction$deserialize_closure: function Web3BitcoinSignTransaction_Web3BitcoinSignTransaction$deserialize_closure() {
    },
    Web3BitcoinSignTransaction_toCbor_closure: function Web3BitcoinSignTransaction_toCbor_closure() {
    },
    Web3BitcoinChainAccount_Web3BitcoinChainAccount$deserialize(object) {
      var t8, t9,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_2_9, type$.CborListValue_dynamic),
        t1 = type$.nullable_String,
        type = A.BitcoinAddressType_fromValue(A.ExtractCborList_elementAs(values, 4, t1)),
        t2 = type$.String,
        program = A.ExtractCborList_elementAt(values, 1, t2),
        t3 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t4 = A.BitcoinBaseAddress_BitcoinBaseAddress$fromProgram(program, type),
        t5 = type$.int,
        t6 = A.ExtractCborList_elementAt(values, 2, t5),
        t7 = A.ExtractCborList_elementAt(values, 3, type$.bool);
      t2 = A.BasedUtxoNetwork_fromName(A.ExtractCborList_elementAs(values, 5, t2));
      t8 = A.ExtractCborList_elementAs(values, 6, type$.List_int);
      t9 = A.ExtractCborList_elementAs(values, 7, t1);
      t1 = A.ExtractCborList_elementAs(values, 8, t1);
      A.BytesUtils_validateListOfBytes(t8);
      return new A.Web3BitcoinChainAccount(t6, type, t2, A.List_List$unmodifiable(t8, t5), t9, t1, t3, t4, t7);
    },
    Web3BitcoinChainAuthenticated_Web3BitcoinChainAuthenticated$deserialize(object) {
      var t4, t5,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_1, type$.CborListValue_dynamic),
        t1 = type$.CborTagValue_dynamic,
        t2 = type$.Web3BitcoinChainAccount,
        t3 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 0, t1), new A.Web3BitcoinChainAuthenticated_Web3BitcoinChainAuthenticated$deserialize_closure(), t2);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      t4 = type$.Web3ChainDefaultIdnetifier;
      t5 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 1, t1), new A.Web3BitcoinChainAuthenticated_Web3BitcoinChainAuthenticated$deserialize_closure0(), t4);
      t5 = A.List_List$_of(t5, t5.$ti._eval$1("ListIterable.E"));
      t1 = A.Web3ChainDefaultIdnetifier_Web3ChainDefaultIdnetifier$deserialize(A.ExtractCborList_elementAs(values, 2, t1));
      return new A.Web3BitcoinChainAuthenticated(A.List_List$unmodifiable(t5, t4), t1, B.NetworkType_ugS, A.List_List$unmodifiable(t3, t2));
    },
    Web3BitcoinChainAccount: function Web3BitcoinChainAccount(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.id = t0;
      _.type = t1;
      _.network = t2;
      _.publicKey = t3;
      _.witnessScript = t4;
      _.redeemScript = t5;
      _.keyIndex = t6;
      _.address = t7;
      _._defaultAddress = t8;
    },
    Web3BitcoinChainAuthenticated: function Web3BitcoinChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3BitcoinChainAuthenticated_Web3BitcoinChainAuthenticated$deserialize_closure: function Web3BitcoinChainAuthenticated_Web3BitcoinChainAuthenticated$deserialize_closure() {
    },
    Web3BitcoinChainAuthenticated_Web3BitcoinChainAuthenticated$deserialize_closure0: function Web3BitcoinChainAuthenticated_Web3BitcoinChainAuthenticated$deserialize_closure0() {
    },
    Web3CosmosRequestMethods_fromId(id) {
      return B.JSArray_methods.firstWhere$2$orElse($.Web3CosmosRequestMethods_values, new A.Web3CosmosRequestMethods_fromId_closure(id), new A.Web3CosmosRequestMethods_fromId_closure0());
    },
    Web3CosmosRequestMethods_fromName($name) {
      return A.QuickImutableList_firstWhereOrNull($.Web3CosmosRequestMethods_values, new A.Web3CosmosRequestMethods_fromName_closure($name), type$.Web3CosmosRequestMethods);
    },
    Web3CosmosRequestMethods: function Web3CosmosRequestMethods(t0, t1, t2) {
      this.id = t0;
      this.name = t1;
      this.methodsName = t2;
    },
    Web3CosmosRequestMethods_fromId_closure: function Web3CosmosRequestMethods_fromId_closure(t0) {
      this.id = t0;
    },
    Web3CosmosRequestMethods_fromId_closure0: function Web3CosmosRequestMethods_fromId_closure0() {
    },
    Web3CosmosRequestMethods_fromName_closure: function Web3CosmosRequestMethods_fromName_closure(t0) {
      this.name = t0;
    },
    Web3CosmosRequestParam_Web3CosmosRequestParam$deserialize(bytes, hex, object, RESPONSE) {
      var values, t2, t3, t4, param,
        t1 = type$.CborListValue_dynamic;
      switch (A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1), 0, type$.nullable_List_int))) {
        case B.Web3CosmosRequestMethods_fHX:
        case B.Web3CosmosRequestMethods_VZC:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          t1 = A.Web3CosmosChainAccount_Web3CosmosChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic));
          t2 = A.ExtractCborList_elementAs(values, 2, type$.String);
          t3 = A.Web3CosmosSignTransactionParams_Web3CosmosSignTransactionParams$deserialize(A.ExtractCborList_getCborTag(values, 3));
          t4 = type$.nullable_bool;
          param = A.Web3CosmosSignTransaction_Web3CosmosSignTransaction(t1, t2, A.ExtractCborList_elementAs(values, 4, t4), A.ExtractCborList_elementAs(values, 5, t4), A.ExtractCborList_elementAs(values, 6, t4), t3);
          break;
        case B.Web3CosmosRequestMethods_103_cosmos_addNewChain_List_empty:
          param = A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize(bytes, hex, object);
          break;
        case B.Web3CosmosRequestMethods_101_cosmos_signMessage_List_empty:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          t1 = A.Web3CosmosChainAccount_Web3CosmosChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic));
          param = new A.Web3CosmosSignMessage(A.ExtractCborList_elementAs(values, 2, type$.String), A.ExtractCborList_elementAs(values, 3, type$.nullable_String), t1);
          break;
        default:
          throw A.wrapException(B.Web3RequestException_qYU);
      }
      if (!RESPONSE._eval$1("Web3CosmosRequestParam<0>")._is(param))
        throw A.wrapException(B.Web3RequestException_ce8);
      return param;
    },
    Web3CosmosRequestParam: function Web3CosmosRequestParam() {
    },
    Web3CosmosAddNewChain$(chainId, feeTokens, hrp, keyAlgorithm, $name, nativeToken, rpc) {
      var t1, t2, _null = null;
      if (feeTokens == null)
        t1 = _null;
      else {
        t1 = B.JSArray_methods.get$isEmpty(feeTokens) ? _null : feeTokens;
        t1 = t1 == null ? _null : A.List_List$unmodifiable(t1, type$.CosmosFeeToken);
      }
      if (keyAlgorithm == null)
        t2 = _null;
      else {
        t2 = J.get$isEmpty$asx(keyAlgorithm) ? _null : keyAlgorithm;
        t2 = t2 == null ? _null : A.List_List$unmodifiable(t2, type$.String);
      }
      return new A.Web3CosmosAddNewChain(chainId, rpc, $name, nativeToken, t1, t2, hrp);
    },
    Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson(json) {
      var t1 = type$.String,
        t2 = A.Web3ValidatorUtils_parseString(json, "chainId", B.Web3CosmosRequestMethods_103_cosmos_addNewChain_List_empty, t1),
        t3 = A.Web3ValidatorUtils_parseString(json, "rpc", B.Web3CosmosRequestMethods_103_cosmos_addNewChain_List_empty, t1),
        t4 = type$.nullable_String,
        t5 = A.Web3ValidatorUtils_parseString(json, "name", B.Web3CosmosRequestMethods_103_cosmos_addNewChain_List_empty, t4),
        t6 = type$.Map_String_dynamic,
        t7 = A.Web3ValidatorUtils_praseObject(json, "nativeToken", B.Web3CosmosRequestMethods_103_cosmos_addNewChain_List_empty, new A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson_closure(B.Web3CosmosRequestMethods_103_cosmos_addNewChain_List_empty), type$.nullable_CosmosFeeToken, t6);
      t1 = A.Web3ValidatorUtils_parseList(false, json, "keyAlgos", null, B.Web3CosmosRequestMethods_103_cosmos_addNewChain_List_empty, type$.nullable_List_String, t1);
      t4 = A.Web3ValidatorUtils_parseString(json, "hrp", B.Web3CosmosRequestMethods_103_cosmos_addNewChain_List_empty, t4);
      t6 = A.Web3ValidatorUtils_parseList(false, json, "feeTokens", null, B.Web3CosmosRequestMethods_103_cosmos_addNewChain_List_empty, type$.nullable_List_Map_String_dynamic, t6);
      if (t6 == null)
        t6 = null;
      else {
        t6 = J.map$1$1$ax(t6, new A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson_closure0(B.Web3CosmosRequestMethods_103_cosmos_addNewChain_List_empty), type$.CosmosFeeToken);
        t6 = A.List_List$_of(t6, t6.$ti._eval$1("ListIterable.E"));
      }
      return A.Web3CosmosAddNewChain$(t2, t6, t4, t1, t5, t7, t3);
    },
    Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize(bytes, hex, object) {
      var values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, type$.CborListValue_dynamic),
        t1 = type$.String,
        t2 = A.ExtractCborList_elementAt(values, 1, t1),
        t3 = A.ExtractCborList_elementAs(values, 2, t1),
        t4 = type$.nullable_String,
        t5 = A.ExtractCborList_elementAs(values, 3, t4),
        t6 = type$.CosmosFeeToken,
        t7 = type$.CborTagValue_dynamic,
        t8 = A.ExtractCborList_elemetMybeAs(values, 4, new A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize_closure(), t6, t7);
      t6 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 5, t7), new A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize_closure0(), t6);
      t6 = A.List_List$_of(t6, t6.$ti._eval$1("ListIterable.E"));
      t1 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 6, type$.CborStringValue), new A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize_closure1(), t1);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return A.Web3CosmosAddNewChain$(t2, t6, A.ExtractCborList_elementAs(values, 7, t4), t1, t5, t8, t3);
    },
    Web3CosmosAddNewChain: function Web3CosmosAddNewChain(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.chainId = t0;
      _.rpc = t1;
      _.name = t2;
      _.nativeToken = t3;
      _.feeTokens = t4;
      _.keyAlgorithm = t5;
      _.hrp = t6;
    },
    Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson_closure: function Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson_closure(t0) {
      this.method = t0;
    },
    Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson__closure0: function Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson__closure0() {
    },
    Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson_closure0: function Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson_closure0(t0) {
      this.method = t0;
    },
    Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson__closure: function Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson__closure() {
    },
    Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize_closure: function Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize_closure() {
    },
    Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize_closure0: function Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize_closure0() {
    },
    Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize_closure1: function Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize_closure1() {
    },
    Web3CosmosAddNewChain_toCbor_closure: function Web3CosmosAddNewChain_toCbor_closure() {
    },
    Web3CosmosSignMessageResponse: function Web3CosmosSignMessageResponse(t0, t1) {
      this.messageBytes = t0;
      this.signature = t1;
    },
    Web3CosmosSignMessage: function Web3CosmosSignMessage(t0, t1, t2) {
      this.challeng = t0;
      this.content = t1;
      this.accessAccount = t2;
    },
    Web3CosmosSignTransactionResponse_Web3CosmosSignTransactionResponse$fromJson(json) {
      var t1, t2, t3, t4, t5, t6, t7,
        _s9_ = "signature",
        method = A.Web3CosmosRequestMethods_fromName(A._asStringQ(json.$index(0, "method")));
      $label0$0: {
        if (B.Web3CosmosRequestMethods_VZC === method) {
          t1 = type$.List_dynamic;
          t2 = type$.int;
          t3 = J.cast$1$0$ax(t1._as(json.$index(0, "bodyBytes")), t2);
          t4 = J.cast$1$0$ax(t1._as(json.$index(0, "authInfoBytes")), t2);
          t1 = J.cast$1$0$ax(t1._as(json.$index(0, _s9_)), t2);
          t5 = A._asString(json.$index(0, "chainId"));
          t6 = A.BigintUtils_parse(json.$index(0, "accountNumber"), true);
          t7 = A.Any_Any$fromJson(type$.Map_String_dynamic._as(json.$index(0, "pubKey")));
          A.BytesUtils_validateListOfBytes(t3);
          t3 = A.List_List$unmodifiable(t3, t2);
          A.BytesUtils_validateListOfBytes(t4);
          t4 = A.List_List$unmodifiable(t4, t2);
          A.BytesUtils_validateListOfBytes(t1);
          t7 = new A.Web3CosmosSignTransactionDirectSignResponse(t3, t4, t5, t6, B.Web3CosmosRequestMethods_VZC, A.List_List$unmodifiable(t1, t2), t7);
          t1 = t7;
          break $label0$0;
        }
        if (B.Web3CosmosRequestMethods_fHX === method) {
          t1 = type$.int;
          t2 = J.cast$1$0$ax(type$.List_dynamic._as(json.$index(0, _s9_)), t1);
          t3 = type$.Map_String_dynamic;
          t4 = A.AminoTx_AminoTx$fromJson(t3._as(json.$index(0, "tx")));
          t3 = A.Any_Any$fromJson(t3._as(json.$index(0, "pubKey")));
          A.BytesUtils_validateListOfBytes(t2);
          t3 = new A.Web3CosmosSignTransactionAminoSignResponse(t4, B.Web3CosmosRequestMethods_fHX, A.List_List$unmodifiable(t2, t1), t3);
          t1 = t3;
          break $label0$0;
        }
        t1 = A.throwExpression(B.Web3RequestException_8vd);
      }
      return t1;
    },
    Web3CosmosSignTransactionParams_Web3CosmosSignTransactionParams$deserialize(obj) {
      var t1, values, t2, _null = null,
        tag = A.CborSerializable_decode(_null, _null, obj, type$.CborTagValue_dynamic),
        method = A.Web3CosmosRequestMethods_fromId(A.QuickImutableList_get_firstOrNull(tag.tags, type$.int));
      $label0$0: {
        if (B.Web3CosmosRequestMethods_fHX === method) {
          t1 = new A.Web3CosmosSignTransactionAminoParams(A.AminoTx_AminoTx$fromJson(type$.Map_String_dynamic._as(A.StringUtils_toJson(A.StringUtils_decode(A.ExtractCborList_elementAs(A.CborSerializable_cborTagValue(_null, _null, tag, A._setArrayType([105], type$.JSArray_int), type$.CborListValue_dynamic), 0, type$.List_int), false, B.StringEncoding_1), _null, type$.dynamic))), B.Web3CosmosRequestMethods_fHX);
          break $label0$0;
        }
        if (B.Web3CosmosRequestMethods_VZC === method) {
          values = A.CborSerializable_cborTagValue(_null, _null, tag, A._setArrayType([106], type$.JSArray_int), type$.CborListValue_dynamic);
          t1 = A.ExtractCborList_elementAs(values, 0, type$.List_int);
          t2 = A.ExtractCborList_elementAs(values, 1, type$.nullable_List_int);
          t1 = A.Web3CosmosSignTransactionDirectParams$(A.ExtractCborList_elementAs(values, 2, type$.nullable_BigInt), t2, t1);
          break $label0$0;
        }
        t1 = A.throwExpression(B.Web3RequestException_8vd);
      }
      return t1;
    },
    Web3CosmosSignTransactionDirectParams$(accountNumber, authInfos, bodyBytes) {
      var t1, t2;
      A.BytesUtils_validateListOfBytes(bodyBytes);
      t1 = type$.int;
      t2 = A.List_List$unmodifiable(bodyBytes, t1);
      if (authInfos == null)
        t1 = null;
      else {
        A.BytesUtils_validateListOfBytes(authInfos);
        t1 = A.List_List$unmodifiable(authInfos, t1);
      }
      return new A.Web3CosmosSignTransactionDirectParams(t2, t1, B.Web3CosmosRequestMethods_VZC);
    },
    Web3CosmosSignTransaction_Web3CosmosSignTransaction(account, chainId, disableBalanceCheck, preferNoSetFee, preferNoSetMemo, transaction) {
      switch (transaction.method) {
        case B.Web3CosmosRequestMethods_fHX:
        case B.Web3CosmosRequestMethods_VZC:
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      return new A.Web3CosmosSignTransaction(account, chainId, transaction, preferNoSetFee, preferNoSetMemo, disableBalanceCheck);
    },
    Web3CosmosSignTransactionResponse: function Web3CosmosSignTransactionResponse() {
    },
    Web3CosmosSignTransactionDirectSignResponse: function Web3CosmosSignTransactionDirectSignResponse(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.bodyBytes = t0;
      _.authInfoBytes = t1;
      _.chainId = t2;
      _.accountNumber = t3;
      _.method = t4;
      _.signature = t5;
      _.publicKey = t6;
    },
    Web3CosmosSignTransactionAminoSignResponse: function Web3CosmosSignTransactionAminoSignResponse(t0, t1, t2, t3) {
      var _ = this;
      _.tx = t0;
      _.method = t1;
      _.signature = t2;
      _.publicKey = t3;
    },
    Web3CosmosSignTransactionParams: function Web3CosmosSignTransactionParams() {
    },
    Web3CosmosSignTransactionDirectParams: function Web3CosmosSignTransactionDirectParams(t0, t1, t2) {
      this.bodyBytes = t0;
      this.authInfos = t1;
      this.method = t2;
    },
    Web3CosmosSignTransactionAminoParams: function Web3CosmosSignTransactionAminoParams(t0, t1) {
      this.tx = t0;
      this.method = t1;
    },
    Web3CosmosSignTransaction: function Web3CosmosSignTransaction(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.accessAccount = t0;
      _.chainId = t1;
      _.transaction = t2;
      _.preferNoSetFee = t3;
      _.preferNoSetMemo = t4;
      _.disableBalanceCheck = t5;
    },
    _Web3CosmosSignTransactionParams_Object_CborSerializable: function _Web3CosmosSignTransactionParams_Object_CborSerializable() {
    },
    Web3CosmosChainAccount_Web3CosmosChainAccount$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_2_8, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = type$.String,
        t3 = A.CosmosBaseAddress_CosmosBaseAddress(A.ExtractCborList_elementAt(values, 1, t2)),
        t4 = type$.int,
        t5 = A.ExtractCborList_elementAt(values, 2, t4),
        t6 = A.ExtractCborList_elementAt(values, 3, type$.bool),
        t7 = A.ExtractCborList_elementAs(values, 4, type$.List_int);
      t2 = A.CosmosKeysAlgs_fromName(A.ExtractCborList_elementAs(values, 5, t2));
      A.BytesUtils_validateListOfBytes(t7);
      return new A.Web3CosmosChainAccount(t5, A.List_List$unmodifiable(t7, t4), t2, t1, t3, t6);
    },
    Web3CosmoshainIdnetifier_Web3CosmoshainIdnetifier$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_0_6, type$.CborListValue_dynamic);
      return new A.Web3CosmoshainIdnetifier(A.ExtractCborList_elementAs(values, 0, type$.String), A.ExtractCborList_elementAs(values, 1, type$.int));
    },
    Web3CosmosChainAuthenticated_Web3CosmosChainAuthenticated$deserialize(object) {
      var t4, t5,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_7, type$.CborListValue_dynamic),
        t1 = type$.CborTagValue_dynamic,
        t2 = type$.Web3CosmosChainAccount,
        t3 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 0, t1), new A.Web3CosmosChainAuthenticated_Web3CosmosChainAuthenticated$deserialize_closure(), t2);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      t4 = type$.Web3CosmoshainIdnetifier;
      t5 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 1, t1), new A.Web3CosmosChainAuthenticated_Web3CosmosChainAuthenticated$deserialize_closure0(), t4);
      t5 = A.List_List$_of(t5, t5.$ti._eval$1("ListIterable.E"));
      t1 = A.Web3CosmoshainIdnetifier_Web3CosmoshainIdnetifier$deserialize(A.ExtractCborList_elementAs(values, 2, t1));
      return new A.Web3CosmosChainAuthenticated(A.List_List$unmodifiable(t5, t4), t1, B.NetworkType_iOs, A.List_List$unmodifiable(t3, t2));
    },
    Web3CosmosChainAccount: function Web3CosmosChainAccount(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.id = t0;
      _.publicKey = t1;
      _.algo = t2;
      _.keyIndex = t3;
      _.address = t4;
      _._defaultAddress = t5;
    },
    Web3CosmoshainIdnetifier: function Web3CosmoshainIdnetifier(t0, t1) {
      this.chainId = t0;
      this.id = t1;
    },
    Web3CosmosChainAuthenticated: function Web3CosmosChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3CosmosChainAuthenticated_Web3CosmosChainAuthenticated$deserialize_closure: function Web3CosmosChainAuthenticated_Web3CosmosChainAuthenticated$deserialize_closure() {
    },
    Web3CosmosChainAuthenticated_Web3CosmosChainAuthenticated$deserialize_closure0: function Web3CosmosChainAuthenticated_Web3CosmosChainAuthenticated$deserialize_closure0() {
    },
    Web3EthereumRequestMethods_fromId(id) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_hR4, new A.Web3EthereumRequestMethods_fromId_closure(id), new A.Web3EthereumRequestMethods_fromId_closure0());
    },
    Web3EthereumRequestMethods_fromName($name) {
      return A.QuickImutableList_firstWhereOrNull(B.List_hR4, new A.Web3EthereumRequestMethods_fromName_closure($name), type$.Web3EthereumRequestMethods);
    },
    Web3EthereumRequestMethods: function Web3EthereumRequestMethods(t0, t1, t2) {
      this.id = t0;
      this.name = t1;
      this.methodsName = t2;
    },
    Web3EthereumRequestMethods_fromId_closure: function Web3EthereumRequestMethods_fromId_closure(t0) {
      this.id = t0;
    },
    Web3EthereumRequestMethods_fromId_closure0: function Web3EthereumRequestMethods_fromId_closure0() {
    },
    Web3EthereumRequestMethods_fromName_closure: function Web3EthereumRequestMethods_fromName_closure(t0) {
      this.name = t0;
    },
    Web3EthereumRequestParam_Web3EthereumRequestParam$deserialize(bytes, hex, object, RESPONSE) {
      var values, t2, t3, t4, t5, t6, t7, t8, param, challeng, to, trType, t9, typedData, domain, _null = null,
        t1 = type$.CborListValue_dynamic;
      switch (A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1), 0, type$.nullable_List_int))) {
        case B.Web3EthereumRequestMethods_grW:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          t2 = A.ExtractCborList_elementAt(values, 1, type$.BigInt);
          t3 = type$.String;
          t4 = A.ExtractCborList_elementAt(values, 2, t3);
          t5 = A.ExtractCborList_elementAt(values, 3, t3);
          t6 = A.ExtractCborList_elementAt(values, 4, t3);
          t1 = A.ExtractCborList_cast(A.ExtractCborList_getElement(values, 5, t1), t3);
          t7 = type$.nullable_CborListValue_dynamic;
          t8 = A.ExtractCborList_getElement(values, 6, t7);
          t8 = t8 == null ? _null : A.ExtractCborList_cast(t8, t3);
          t7 = A.ExtractCborList_getElement(values, 7, t7);
          t3 = t7 == null ? _null : A.ExtractCborList_cast(t7, t3);
          param = A.Web3EthereumAddNewChain_Web3EthereumAddNewChain(t8, t4, A.ExtractCborList_elementAt(values, 8, type$.int), t3, t5, t2, t1, t6);
          break;
        case B.Web3EthereumRequestMethods_1_personal_sign_List_eth_sign:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          challeng = A.ExtractCborList_elementAs(values, 2, type$.List_int);
          param = new A.Web3EthreumPersonalSign(A.Web3EthereumChainAccount_Web3EthereumChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic)), A.BytesUtils_toHexString(challeng, true, "0x"), A.ExtractCborList_elementAs(values, 3, type$.nullable_String));
          break;
        case B.Web3EthereumRequestMethods_0_eth_sendTransaction_List_empty:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          to = A.ExtractCborList_elementAt(values, 2, type$.nullable_String);
          t1 = type$.nullable_int;
          trType = A.ExtractCborList_elementAt(values, 10, t1);
          t2 = A.Web3EthereumChainAccount_Web3EthereumChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic));
          t3 = to == null ? _null : A.ETHAddress_ETHAddress(to);
          t1 = A.ExtractCborList_elementAt(values, 3, t1);
          t4 = type$.nullable_BigInt;
          t5 = A.ExtractCborList_elementAt(values, 4, t4);
          t6 = A.ExtractCborList_elementAt(values, 5, t4);
          t7 = A.ExtractCborList_elementAt(values, 6, t4);
          t8 = A.ExtractCborList_elementAt(values, 7, type$.BigInt);
          t9 = A.ExtractCborList_elementAt(values, 8, type$.List_int);
          t4 = A.ExtractCborList_elementAt(values, 9, t4);
          param = A.Web3EthreumSendTransaction$_(t2, t4, t9, t1, t5, t6, t7, t3, trType == null ? _null : A.ETHTransactionType_fromPrefix(trType), t8);
          break;
        case B.Web3EthereumRequestMethods_uLq:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          typedData = A.EIP712Base_EIP712Base$fromJson(A.StringUtils_toJson(A.ExtractCborList_elementAt(values, 2, type$.nullable_Object), _null, type$.Map_String_dynamic));
          domain = typedData.get$version() !== B.EIP712Version_1 ? A.EIP712Domain_fromJson(type$.Eip712TypedData._as(typedData).domain) : _null;
          param = A.Web3EthreumTypdedData$_(A.Web3EthereumChainAccount_Web3EthereumChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic)), domain, typedData);
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      if (!RESPONSE._eval$1("Web3EthereumRequestParam<0>")._is(param))
        throw A.wrapException(B.Web3RequestException_ce8);
      return param;
    },
    Web3EthereumRequestParam: function Web3EthereumRequestParam() {
    },
    Web3EthereumAddNewChain_Web3EthereumAddNewChain(blockExplorerUrls, chainName, decimals, iconUrls, $name, newChainId, rpcUrls, symbol) {
      var t2, t3, t4, _null = null,
        t1 = blockExplorerUrls == null ? _null : blockExplorerUrls.length === 0;
      t1 = t1 !== false ? _null : blockExplorerUrls;
      t2 = iconUrls == null ? _null : iconUrls.length === 0;
      t2 = t2 !== false ? _null : iconUrls;
      t3 = type$.String;
      t4 = A.List_List$unmodifiable(rpcUrls, t3);
      if (t1 == null)
        t1 = _null;
      else
        t1 = t1.length === 0 ? _null : A.List_List$unmodifiable(t1, t3);
      if (t2 == null)
        t2 = _null;
      else
        t2 = t2.length === 0 ? _null : A.List_List$unmodifiable(t2, t3);
      return new A.Web3EthereumAddNewChain(newChainId, chainName, $name, symbol, t4, t1, t2, decimals);
    },
    Web3EthereumAddNewChain: function Web3EthereumAddNewChain(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.newChainId = t0;
      _.chainName = t1;
      _.name = t2;
      _.symbol = t3;
      _.rpcUrls = t4;
      _.blockExplorerUrls = t5;
      _.iconUrls = t6;
      _.decimals = t7;
    },
    Web3EthreumPersonalSign_Web3EthreumPersonalSign(message, account) {
      var t1,
        $content = A.StringUtils_tryDecode(A.BytesUtils_fromHexString(message, false), B.StringEncoding_1);
      if ($content != null) {
        t1 = A.stringReplaceAllUnchecked($content, "\\", "\\\\");
        t1 = A.stringReplaceAllUnchecked(t1, "\n", "\\n");
        t1 = A.stringReplaceAllUnchecked(t1, "\r", "\\r");
        t1 = A.stringReplaceAllUnchecked(t1, "\t", "\\t");
        t1 = A.stringReplaceAllUnchecked(t1, "$", "\\$");
        t1 = A.stringReplaceAllUnchecked(t1, '"', '\\"');
        t1 = A.stringReplaceAllUnchecked(t1, "'", "\\'");
        t1 = A.stringReplaceAllUnchecked(t1, "\f", "\\f");
        t1 = A.stringReplaceAllUnchecked(t1, "\x00", "\\u0000");
        t1 = A.stringReplaceAllUnchecked(t1, "\x01", "\\u0001");
        t1 = A.stringReplaceAllUnchecked(t1, "\x02", "\\u0002");
        t1 = A.stringReplaceAllUnchecked(t1, "\x03", "\\u0003");
        t1 = A.stringReplaceAllUnchecked(t1, "\x04", "\\u0004");
        t1 = A.stringReplaceAllUnchecked(t1, "\x05", "\\u0005");
        t1 = A.stringReplaceAllUnchecked(t1, "\x06", "\\u0006");
        t1 = A.stringReplaceAllUnchecked(t1, "\x07", "\\u0007");
        t1 = A.stringReplaceAllUnchecked(t1, "\b", "\\u0008");
        t1 = A.stringReplaceAllUnchecked(t1, "\t", "\\u0009");
        t1 = A.stringReplaceAllUnchecked(t1, "\n", "\\u000A");
        t1 = A.stringReplaceAllUnchecked(t1, "\v", "\\u000B");
        t1 = A.stringReplaceAllUnchecked(t1, "\f", "\\u000C");
        t1 = A.stringReplaceAllUnchecked(t1, "\r", "\\u000D");
        t1 = A.stringReplaceAllUnchecked(t1, "\x0e", "\\u000E");
        t1 = A.stringReplaceAllUnchecked(t1, "\x0f", "\\u000F");
        t1 = A.stringReplaceAllUnchecked(t1, "\x10", "\\u0010");
        t1 = A.stringReplaceAllUnchecked(t1, "\x11", "\\u0011");
        t1 = A.stringReplaceAllUnchecked(t1, "\x12", "\\u0012");
        t1 = A.stringReplaceAllUnchecked(t1, "\x13", "\\u0013");
        t1 = A.stringReplaceAllUnchecked(t1, "\x14", "\\u0014");
        t1 = A.stringReplaceAllUnchecked(t1, "\x15", "\\u0015");
        t1 = A.stringReplaceAllUnchecked(t1, "\x16", "\\u0016");
        t1 = A.stringReplaceAllUnchecked(t1, "\x17", "\\u0017");
        t1 = A.stringReplaceAllUnchecked(t1, "\x18", "\\u0018");
        t1 = A.stringReplaceAllUnchecked(t1, "\x19", "\\u0019");
        t1 = A.stringReplaceAllUnchecked(t1, "\x1a", "\\u001A");
        t1 = A.stringReplaceAllUnchecked(t1, "\x1b", "\\u001B");
        t1 = A.stringReplaceAllUnchecked(t1, "\x1c", "\\u001C");
        t1 = A.stringReplaceAllUnchecked(t1, "\x1d", "\\u001D");
        t1 = A.stringReplaceAllUnchecked(t1, "\x1e", "\\u001E");
        t1 = A.stringReplaceAllUnchecked(t1, "\x1f", "\\u001F");
        $content = A.stringReplaceAllUnchecked(t1, "\x7f", "\\u007F");
      }
      return new A.Web3EthreumPersonalSign(account, message, $content);
    },
    Web3EthreumPersonalSign: function Web3EthreumPersonalSign(t0, t1, t2) {
      this.accessAccount = t0;
      this.message = t1;
      this.content = t2;
    },
    Web3EthreumTransactionAccessList$(address, storageKeys) {
      var t1 = A._arrayInstanceType(storageKeys);
      return new A.Web3EthreumTransactionAccessList(address, A.List_List$unmodifiable(new A.MappedListIterable(storageKeys, t1._eval$1("List<int>(1)")._as(new A.Web3EthreumTransactionAccessList_closure()), t1._eval$1("MappedListIterable<1,List<int>>")), type$.List_int));
    },
    Web3EthreumSendTransaction$_(accessAccount, chainId, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, to, transactionType, value) {
      A.BytesUtils_validateListOfBytes(data);
      return new A.Web3EthreumSendTransaction(accessAccount, to, gas, chainId, gasPrice, maxFeePerGas, maxPriorityFeePerGas, value, A.List_List$unmodifiable(data, type$.int), transactionType);
    },
    Web3EthreumSendTransaction_Web3EthreumSendTransaction(accessList, account, chainId, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, to, transactionType, value) {
      var t2, t3, ethTransactionType,
        _s84_ = "The provided transaction type does not correspond with the specified gas parameters.",
        t1 = accessList == null ? null : accessList.length === 0;
      if (t1 === true)
        accessList = null;
      t1 = gasPrice != null;
      if (t1)
        t2 = maxFeePerGas != null || maxPriorityFeePerGas != null;
      else
        t2 = false;
      if (t2)
        throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters("cannot use both legacy and EIP-1559 gas parameters simultaneously."));
      t2 = maxFeePerGas == null;
      t3 = !t2;
      if (!(t3 && maxPriorityFeePerGas == null))
        t2 = t2 && maxPriorityFeePerGas != null;
      else
        t2 = true;
      if (t2)
        throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters("To use EIP-1559 gas metrics, you must fill both maxFeePerGas and maxPriorityFeePerGas fields."));
      ethTransactionType = A.QuickImutableList_firstWhereOrNull(B.List_JMn, new A.Web3EthreumSendTransaction_Web3EthreumSendTransaction_closure(transactionType), type$.ETHTransactionType);
      if (transactionType != null && ethTransactionType == null)
        throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters("Invalid Transaction type."));
      if (ethTransactionType != null) {
        if (t3)
          if (ethTransactionType !== B.ETHTransactionType_2)
            throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters(_s84_));
        if (t1)
          if (ethTransactionType === B.ETHTransactionType_2)
            throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters(_s84_));
        if (accessList != null)
          if (ethTransactionType === B.ETHTransactionType_0)
            throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters("The provided transaction type does not support Ethereum transaction accessList parameters."));
      } else if (t3)
        ethTransactionType = B.ETHTransactionType_2;
      else if (accessList != null)
        ethTransactionType = B.ETHTransactionType_1;
      else if (t1)
        ethTransactionType = B.ETHTransactionType_0;
      return A.Web3EthreumSendTransaction$_(account, chainId, data == null ? B.List_empty : data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, to, ethTransactionType, value);
    },
    Web3EthreumTransactionAccessList: function Web3EthreumTransactionAccessList(t0, t1) {
      this.address = t0;
      this.storageKeys = t1;
    },
    Web3EthreumTransactionAccessList_closure: function Web3EthreumTransactionAccessList_closure() {
    },
    Web3EthreumSendTransaction: function Web3EthreumSendTransaction(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.accessAccount = t0;
      _.to = t1;
      _.gas = t2;
      _.chainId = t3;
      _.gasPrice = t4;
      _.maxFeePerGas = t5;
      _.maxPriorityFeePerGas = t6;
      _.value = t7;
      _.data = t8;
      _.transactionType = t9;
    },
    Web3EthreumSendTransaction_Web3EthreumSendTransaction_closure: function Web3EthreumSendTransaction_Web3EthreumSendTransaction_closure(t0) {
      this.transactionType = t0;
    },
    _Web3EthreumTransactionAccessList_Object_CborSerializable: function _Web3EthreumTransactionAccessList_Object_CborSerializable() {
    },
    Web3EthreumTypdedData$_(accessAccount, domain, typedData) {
      return new A.Web3EthreumTypdedData(typedData, domain, accessAccount);
    },
    Web3EthreumTypdedData_Web3EthreumTypdedData(typedData, account) {
      return A.Web3EthreumTypdedData$_(account, typedData.get$version() !== B.EIP712Version_1 ? A.EIP712Domain_fromJson(type$.Eip712TypedData._as(typedData).domain) : null, typedData);
    },
    Web3EthreumTypdedData: function Web3EthreumTypdedData(t0, t1, t2) {
      this.typedData = t0;
      this.domain = t1;
      this.accessAccount = t2;
    },
    Web3EthereumChainAccount_Web3EthereumChainAccount$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_1_1, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = A.ETHAddress_ETHAddress(A.ExtractCborList_elementAt(values, 1, type$.String)),
        t3 = type$.int,
        t4 = A.ExtractCborList_elementAt(values, 2, t3),
        t5 = A.ExtractCborList_elementAt(values, 3, type$.bool),
        t6 = A.ExtractCborList_elementAs(values, 4, type$.nullable_List_int);
      if (t6 == null)
        t3 = null;
      else {
        A.BytesUtils_validateListOfBytes(t6);
        t3 = A.List_List$unmodifiable(t6, t3);
      }
      return new A.Web3EthereumChainAccount(t4, t3, t1, t2, t5);
    },
    Web3EthereumChainIdnetifier_Web3EthereumChainIdnetifier$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_0_2, type$.CborListValue_dynamic);
      return new A.Web3EthereumChainIdnetifier(A.ExtractCborList_elementAs(values, 0, type$.BigInt), A.ExtractCborList_elementAs(values, 1, type$.bool), A.ExtractCborList_elementAs(values, 2, type$.int));
    },
    Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize(object) {
      var t4, t5, t6,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_3, type$.CborListValue_dynamic),
        t1 = type$.CborTagValue_dynamic,
        t2 = type$.Web3EthereumChainAccount,
        t3 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 0, t1), new A.Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize_closure(), t2);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      t4 = A.ExtractCborList_elemetMybeAs(values, 1, new A.Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize_closure0(), type$.EthereumAPIProvider, t1);
      t5 = type$.Web3EthereumChainIdnetifier;
      t6 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 2, t1), new A.Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize_closure1(), t5);
      t6 = A.List_List$_of(t6, t6.$ti._eval$1("ListIterable.E"));
      t1 = A.Web3EthereumChainIdnetifier_Web3EthereumChainIdnetifier$deserialize(A.ExtractCborList_elementAs(values, 3, t1));
      return new A.Web3EthereumChainAuthenticated(t4, A.List_List$unmodifiable(t6, t5), t1, B.NetworkType_TUr, A.List_List$unmodifiable(t3, t2));
    },
    Web3EthereumChainAccount: function Web3EthereumChainAccount(t0, t1, t2, t3, t4) {
      var _ = this;
      _.id = t0;
      _.publicKey = t1;
      _.keyIndex = t2;
      _.address = t3;
      _._defaultAddress = t4;
    },
    Web3EthereumChainIdnetifier: function Web3EthereumChainIdnetifier(t0, t1, t2) {
      this.chainId = t0;
      this.supportEIP1559 = t1;
      this.id = t2;
    },
    Web3EthereumChainAuthenticated: function Web3EthereumChainAuthenticated(t0, t1, t2, t3, t4) {
      var _ = this;
      _.serviceIdentifier = t0;
      _.networks = t1;
      _.currentNetwork = t2;
      _.networkType = t3;
      _.accounts = t4;
    },
    Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize_closure: function Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize_closure() {
    },
    Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize_closure0: function Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize_closure0() {
    },
    Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize_closure1: function Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize_closure1() {
    },
    Web3GlobalRequestMethods_fromId(id) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_t0u, new A.Web3GlobalRequestMethods_fromId_closure(id), new A.Web3GlobalRequestMethods_fromId_closure0());
    },
    Web3GlobalRequestMethods_fromName($name) {
      return A.QuickImutableList_firstWhereOrNull(B.List_t0u, new A.Web3GlobalRequestMethods_fromName_closure($name), type$.Web3GlobalRequestMethods);
    },
    Web3GlobalRequestMethods: function Web3GlobalRequestMethods(t0, t1, t2) {
      this.id = t0;
      this.name = t1;
      this.methodsName = t2;
    },
    Web3GlobalRequestMethods_fromId_closure: function Web3GlobalRequestMethods_fromId_closure(t0) {
      this.id = t0;
    },
    Web3GlobalRequestMethods_fromId_closure0: function Web3GlobalRequestMethods_fromId_closure0() {
    },
    Web3GlobalRequestMethods_fromName_closure: function Web3GlobalRequestMethods_fromName_closure(t0) {
      this.name = t0;
    },
    Web3ConnectApplication_Web3ConnectApplication$deserialize(bytes, hex, object) {
      return new A.Web3ConnectApplication(A.ExtractCborList_elemetMybeAs(A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_17, type$.CborListValue_dynamic), 1, new A.Web3ConnectApplication_Web3ConnectApplication$deserialize_closure(), type$.NetworkType, type$.CborStringValue));
    },
    Web3ConnectApplication: function Web3ConnectApplication(t0) {
      this.chain = t0;
    },
    Web3ConnectApplication_Web3ConnectApplication$deserialize_closure: function Web3ConnectApplication_Web3ConnectApplication$deserialize_closure() {
    },
    Web3DisconnectApplication: function Web3DisconnectApplication(t0) {
      this.chain = t0;
    },
    Web3SwitchApplicationNetwork: function Web3SwitchApplicationNetwork(t0, t1) {
      this.chain = t0;
      this.id = t1;
    },
    Web3SolanaRequestMethods_fromId(id) {
      return B.JSArray_methods.firstWhere$2$orElse($.Web3SolanaRequestMethods_values, new A.Web3SolanaRequestMethods_fromId_closure(id), new A.Web3SolanaRequestMethods_fromId_closure0());
    },
    Web3SolanaRequestMethods_fromName($name) {
      return A.QuickImutableList_firstWhereOrNull($.Web3SolanaRequestMethods_values, new A.Web3SolanaRequestMethods_fromName_closure($name), type$.Web3SolanaRequestMethods);
    },
    Web3SolanaRequestMethods: function Web3SolanaRequestMethods(t0, t1, t2) {
      this.id = t0;
      this.name = t1;
      this.methodsName = t2;
    },
    Web3SolanaRequestMethods_fromId_closure: function Web3SolanaRequestMethods_fromId_closure(t0) {
      this.id = t0;
    },
    Web3SolanaRequestMethods_fromId_closure0: function Web3SolanaRequestMethods_fromId_closure0() {
    },
    Web3SolanaRequestMethods_fromName_closure: function Web3SolanaRequestMethods_fromName_closure(t0) {
      this.name = t0;
    },
    Web3SolanaRequestParam_Web3SolanaRequestParam$deserialize(bytes, hex, object, RESPONSE) {
      var param;
      switch (A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, type$.CborListValue_dynamic), 0, type$.nullable_List_int))) {
        case B.Web3SolanaRequestMethods_95z:
        case B.Web3SolanaRequestMethods_H9E:
        case B.Web3SolanaRequestMethods_aGo:
          param = A.Web3SolanaSendTransaction_Web3SolanaSendTransaction$deserialize(bytes, hex, object);
          break;
        case B.Web3SolanaRequestMethods_106_solana_signIn_List_empty:
        case B.Web3SolanaRequestMethods_102_solana_signMessage_List_empty:
          param = A.Web3SolanaSignMessage_Web3SolanaSignMessage$deserialize(bytes, hex, object);
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      if (!RESPONSE._eval$1("Web3SolanaRequestParam<0>")._is(param))
        throw A.wrapException(B.Web3RequestException_ce8);
      return param;
    },
    Web3SolanaRequestParam: function Web3SolanaRequestParam() {
    },
    Web3SolanaSignInParams$(account, message) {
      return new A.Web3SolanaSignInParams(message, account, A.BytesUtils_toHexString(A.StringUtils_encode(message.toMessage$0(), B.StringEncoding_1), true, null));
    },
    Web3SolanaSignMessage_Web3SolanaSignMessage(messages, method) {
      switch (method) {
        case B.Web3SolanaRequestMethods_102_solana_signMessage_List_empty:
        case B.Web3SolanaRequestMethods_106_solana_signIn_List_empty:
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      if (messages.length === 0)
        throw A.wrapException(A.Web3RequestExceptionConst_invalidWalletStandardSignMessage());
      return new A.Web3SolanaSignMessage(A.List_List$unmodifiable(messages, type$.Web3SolanaSignParams), method);
    },
    Web3SolanaSignMessage_Web3SolanaSignMessage$deserialize(bytes, hex, object) {
      var t1,
        values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, type$.CborListValue_dynamic),
        method = A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAs(values, 0, type$.nullable_List_int));
      switch (method) {
        case B.Web3SolanaRequestMethods_102_solana_signMessage_List_empty:
          t1 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 1, type$.CborTagValue_dynamic), new A.Web3SolanaSignMessage_Web3SolanaSignMessage$deserialize_closure(), type$.Web3SolanaSignMessageParams);
          t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
          return A.Web3SolanaSignMessage_Web3SolanaSignMessage(t1, type$.Web3SolanaRequestMethods._as(method));
        case B.Web3SolanaRequestMethods_106_solana_signIn_List_empty:
          t1 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 1, type$.CborTagValue_dynamic), new A.Web3SolanaSignMessage_Web3SolanaSignMessage$deserialize_closure0(), type$.Web3SolanaSignInParams);
          t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
          return A.Web3SolanaSignMessage_Web3SolanaSignMessage(t1, type$.Web3SolanaRequestMethods._as(method));
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
    },
    Web3SolanaSignInParams: function Web3SolanaSignInParams(t0, t1, t2) {
      this.message = t0;
      this.account = t1;
      this.data = t2;
    },
    Web3SolanaSignMessageResponse: function Web3SolanaSignMessageResponse(t0, t1, t2) {
      this.address = t0;
      this.signature = t1;
      this.signedMessage = t2;
    },
    Web3SolanaSignParams: function Web3SolanaSignParams() {
    },
    Web3SolanaSignMessageParams: function Web3SolanaSignMessageParams(t0, t1, t2) {
      this.content = t0;
      this.account = t1;
      this.data = t2;
    },
    Web3SolanaSignMessage: function Web3SolanaSignMessage(t0, t1) {
      this.messages = t0;
      this.method = t1;
    },
    Web3SolanaSignMessage_Web3SolanaSignMessage$deserialize_closure: function Web3SolanaSignMessage_Web3SolanaSignMessage$deserialize_closure() {
    },
    Web3SolanaSignMessage_Web3SolanaSignMessage$deserialize_closure0: function Web3SolanaSignMessage_Web3SolanaSignMessage$deserialize_closure0() {
    },
    Web3SolanaSignMessage_toCbor_closure: function Web3SolanaSignMessage_toCbor_closure() {
    },
    _Web3SolanaSignParams_Object_CborSerializable: function _Web3SolanaSignParams_Object_CborSerializable() {
    },
    Web3SolanaSendTransactionData_Web3SolanaSendTransactionData$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_1_2, type$.CborListValue_dynamic),
        t1 = type$.CborTagValue_dynamic,
        t2 = A.Web3SolanaChainAccount_Web3SolanaChainAccount$deserialize(A.ExtractCborList_elementAs(values, 0, t1)),
        t3 = A.ExtractCborList_elementAt(values, 1, type$.List_int);
      t1 = A.ExtractCborList_elemetMybeAs(values, 2, new A.Web3SolanaSendTransactionData_Web3SolanaSendTransactionData$deserialize_closure(), type$.Web3SolanaSendTransactionOptions, t1);
      A.BytesUtils_validateListOfBytes(t3);
      return new A.Web3SolanaSendTransactionData(t2, A.List_List$unmodifiable(t3, type$.int), t1);
    },
    SolanaSignAndSendAllTransactionMode_SolanaSignAndSendAllTransactionMode$fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_hAt, new A.SolanaSignAndSendAllTransactionMode_SolanaSignAndSendAllTransactionMode$fromName_closure($name), new A.SolanaSignAndSendAllTransactionMode_SolanaSignAndSendAllTransactionMode$fromName_closure0());
    },
    Web3SolanaSendTransaction_Web3SolanaSendTransaction(messages, method, mode) {
      switch (method) {
        case B.Web3SolanaRequestMethods_H9E:
        case B.Web3SolanaRequestMethods_aGo:
        case B.Web3SolanaRequestMethods_95z:
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      if (messages.length === 0)
        throw A.wrapException(A.Web3RequestExceptionConst_invalidAccountOrTransaction());
      return new A.Web3SolanaSendTransaction(messages, mode, type$.Web3SolanaRequestMethods._as(method));
    },
    Web3SolanaSendTransaction_Web3SolanaSendTransaction$deserialize(bytes, hex, object) {
      var t2, t3,
        t1 = type$.CborListValue_dynamic,
        values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1),
        method = A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAt(values, 0, type$.nullable_List_int));
      t1 = A.ExtractCborList_castValue(A.ExtractCborList_elementAs(values, 1, t1), type$.CborTagValue_dynamic);
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,Web3SolanaSendTransactionData>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Web3SolanaSendTransactionData(1)")._as(new A.Web3SolanaSendTransaction_Web3SolanaSendTransaction$deserialize_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.Web3SolanaSendTransaction_Web3SolanaSendTransaction(t1, method, A.ExtractCborList_elemetMybeAs(values, 2, new A.Web3SolanaSendTransaction_Web3SolanaSendTransaction$deserialize_closure0(), type$.SolanaSignAndSendAllTransactionMode, type$.CborStringValue));
    },
    Web3SolanaSendTransactionOptions: function Web3SolanaSendTransactionOptions(t0, t1, t2, t3, t4) {
      var _ = this;
      _.preflightCommitment = t0;
      _.minContextSlot = t1;
      _.skipPreflight = t2;
      _.commitment = t3;
      _.maxRetries = t4;
    },
    Web3SolanaSendTransactionData: function Web3SolanaSendTransactionData(t0, t1, t2) {
      this.account = t0;
      this.messageBytes = t1;
      this.sendConfig = t2;
    },
    Web3SolanaSendTransactionData_Web3SolanaSendTransactionData$deserialize_closure: function Web3SolanaSendTransactionData_Web3SolanaSendTransactionData$deserialize_closure() {
    },
    SolanaSignAndSendAllTransactionMode: function SolanaSignAndSendAllTransactionMode(t0) {
      this._name = t0;
    },
    SolanaSignAndSendAllTransactionMode_SolanaSignAndSendAllTransactionMode$fromName_closure: function SolanaSignAndSendAllTransactionMode_SolanaSignAndSendAllTransactionMode$fromName_closure(t0) {
      this.name = t0;
    },
    SolanaSignAndSendAllTransactionMode_SolanaSignAndSendAllTransactionMode$fromName_closure0: function SolanaSignAndSendAllTransactionMode_SolanaSignAndSendAllTransactionMode$fromName_closure0() {
    },
    Web3SolanaSendTransaction: function Web3SolanaSendTransaction(t0, t1, t2) {
      this.messages = t0;
      this.mode = t1;
      this.method = t2;
    },
    Web3SolanaSendTransaction_Web3SolanaSendTransaction$deserialize_closure: function Web3SolanaSendTransaction_Web3SolanaSendTransaction$deserialize_closure() {
    },
    Web3SolanaSendTransaction_Web3SolanaSendTransaction$deserialize_closure0: function Web3SolanaSendTransaction_Web3SolanaSendTransaction$deserialize_closure0() {
    },
    Web3SolanaSendTransaction_toCbor_closure: function Web3SolanaSendTransaction_toCbor_closure() {
    },
    _Web3SolanaSendTransactionData_Object_CborSerializable: function _Web3SolanaSendTransactionData_Object_CborSerializable() {
    },
    _Web3SolanaSendTransactionOptions_Object_CborSerializable: function _Web3SolanaSendTransactionOptions_Object_CborSerializable() {
    },
    Web3SolanaChainAccount_Web3SolanaChainAccount$deserialize(object) {
      var t3, t4,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_2_2, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = A.ExtractCborList_elementAt(values, 1, type$.String);
      new A.SolAddrDecoder().decodeAddr$1(t2);
      t3 = A.ExtractCborList_elementAt(values, 2, type$.int);
      t4 = A.ExtractCborList_elementAt(values, 3, type$.bool);
      return new A.Web3SolanaChainAccount(t3, A.SolanaNetworkType_fromValue(A.ExtractCborList_elementAs(values, 4, type$.nullable_int)), t1, new A.SolAddress(t2), t4);
    },
    Web3SolanaChainAuthenticated_Web3SolanaChainAuthenticated$deserialize(object) {
      var t4, t5,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_5, type$.CborListValue_dynamic),
        t1 = type$.CborTagValue_dynamic,
        t2 = type$.Web3SolanaChainAccount,
        t3 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 0, t1), new A.Web3SolanaChainAuthenticated_Web3SolanaChainAuthenticated$deserialize_closure(), t2);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      t4 = type$.Web3ChainDefaultIdnetifier;
      t5 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 1, t1), new A.Web3SolanaChainAuthenticated_Web3SolanaChainAuthenticated$deserialize_closure0(), t4);
      t5 = A.List_List$_of(t5, t5.$ti._eval$1("ListIterable.E"));
      t1 = A.Web3ChainDefaultIdnetifier_Web3ChainDefaultIdnetifier$deserialize(A.ExtractCborList_elementAs(values, 2, t1));
      return new A.Web3SolanaChainAuthenticated(A.List_List$unmodifiable(t5, t4), t1, B.NetworkType_406, A.List_List$unmodifiable(t3, t2));
    },
    Web3SolanaChainAccount: function Web3SolanaChainAccount(t0, t1, t2, t3, t4) {
      var _ = this;
      _.id = t0;
      _.network = t1;
      _.keyIndex = t2;
      _.address = t3;
      _._defaultAddress = t4;
    },
    Web3SolanaChainAuthenticated: function Web3SolanaChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3SolanaChainAuthenticated_Web3SolanaChainAuthenticated$deserialize_closure: function Web3SolanaChainAuthenticated_Web3SolanaChainAuthenticated$deserialize_closure() {
    },
    Web3SolanaChainAuthenticated_Web3SolanaChainAuthenticated$deserialize_closure0: function Web3SolanaChainAuthenticated_Web3SolanaChainAuthenticated$deserialize_closure0() {
    },
    Web3StellarRequestMethods_fromId(id) {
      return B.JSArray_methods.firstWhere$2$orElse($.Web3StellarRequestMethods_values, new A.Web3StellarRequestMethods_fromId_closure(id), new A.Web3StellarRequestMethods_fromId_closure0());
    },
    Web3StellarRequestMethods_fromName($name) {
      return A.QuickImutableList_firstWhereOrNull($.Web3StellarRequestMethods_values, new A.Web3StellarRequestMethods_fromName_closure($name), type$.Web3StellarRequestMethods);
    },
    Web3StellarRequestMethods: function Web3StellarRequestMethods(t0, t1, t2) {
      this.id = t0;
      this.name = t1;
      this.methodsName = t2;
    },
    Web3StellarRequestMethods_fromId_closure: function Web3StellarRequestMethods_fromId_closure(t0) {
      this.id = t0;
    },
    Web3StellarRequestMethods_fromId_closure0: function Web3StellarRequestMethods_fromId_closure0() {
    },
    Web3StellarRequestMethods_fromName_closure: function Web3StellarRequestMethods_fromName_closure(t0) {
      this.name = t0;
    },
    Web3StellarRequestParam_Web3StellarRequestParam$deserialize(bytes, hex, object, RESPONSE) {
      var values, t2, t3, param, challeng,
        t1 = type$.CborListValue_dynamic;
      switch (A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1), 0, type$.nullable_List_int))) {
        case B.Web3StellarRequestMethods_tp5:
        case B.Web3StellarRequestMethods_oQm:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          t1 = A.Web3StellarChainAccount_Web3StellarChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic));
          t2 = type$.List_int;
          t3 = A.ExtractCborList_elementAt(values, 2, t2);
          param = A.Web3StellarSendTransaction_Web3StellarSendTransaction(t1, A.Web3StellarRequestMethods_fromId(J.get$last$ax(A.ExtractCborList_elementAt(values, 0, t2))), t3);
          break;
        case B.Web3StellarRequestMethods_102_stellar_signMessage_List_empty:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          challeng = A.ExtractCborList_elementAt(values, 2, type$.List_int);
          param = new A.Web3StellarSignMessage(A.Web3StellarChainAccount_Web3StellarChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic)), A.BytesUtils_toHexString(challeng, true, "0x"), A.ExtractCborList_elementAt(values, 3, type$.nullable_String));
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      if (!RESPONSE._eval$1("Web3StellarRequestParam<0>")._is(param))
        throw A.wrapException(B.Web3RequestException_ce8);
      return param;
    },
    Web3StellarRequestParam: function Web3StellarRequestParam() {
    },
    Web3StellarSignMessage: function Web3StellarSignMessage(t0, t1, t2) {
      this.accessAccount = t0;
      this.challeng = t1;
      this.content = t2;
    },
    Web3StellarSendTransaction_Web3StellarSendTransaction(account, method, transaction) {
      switch (method) {
        case B.Web3StellarRequestMethods_oQm:
        case B.Web3StellarRequestMethods_tp5:
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      A.BytesUtils_validateListOfBytes(transaction);
      return new A.Web3StellarSendTransaction(A.List_List$unmodifiable(transaction, type$.int), method, account);
    },
    Web3StellarSendTransactionResponse: function Web3StellarSendTransactionResponse(t0, t1) {
      this.envlope = t0;
      this.txHash = t1;
    },
    Web3StellarSendTransaction: function Web3StellarSendTransaction(t0, t1, t2) {
      this.transaction = t0;
      this.method = t1;
      this.accessAccount = t2;
    },
    Web3StellarChainAccount_Web3StellarChainAccount$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_2_4, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = A.StellarAddress_StellarAddress$fromBase32Addr(A.ExtractCborList_elementAt(values, 1, type$.String)),
        t3 = type$.int,
        t4 = A.ExtractCborList_elementAt(values, 2, t3),
        t5 = A.ExtractCborList_elementAt(values, 3, type$.bool),
        t6 = A.ExtractCborList_elementAs(values, 4, type$.List_int),
        t7 = A.StellarChainType_fromValue(A.ExtractCborList_elementAs(values, 5, type$.nullable_int));
      A.BytesUtils_validateListOfBytes(t6);
      return new A.Web3StellarChainAccount(t4, A.List_List$unmodifiable(t6, t3), t7, t1, t2, t5);
    },
    Web3StellarChainAuthenticated_Web3StellarChainAuthenticated$deserialize(object) {
      var t4, t5,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_14, type$.CborListValue_dynamic),
        t1 = type$.CborTagValue_dynamic,
        t2 = type$.Web3StellarChainAccount,
        t3 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 0, t1), new A.Web3StellarChainAuthenticated_Web3StellarChainAuthenticated$deserialize_closure(), t2);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      t4 = type$.Web3ChainDefaultIdnetifier;
      t5 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 1, t1), new A.Web3StellarChainAuthenticated_Web3StellarChainAuthenticated$deserialize_closure0(), t4);
      t5 = A.List_List$_of(t5, t5.$ti._eval$1("ListIterable.E"));
      t1 = A.Web3ChainDefaultIdnetifier_Web3ChainDefaultIdnetifier$deserialize(A.ExtractCborList_elementAs(values, 2, t1));
      return new A.Web3StellarChainAuthenticated(A.List_List$unmodifiable(t5, t4), t1, B.NetworkType_mux, A.List_List$unmodifiable(t3, t2));
    },
    Web3StellarChainAccount: function Web3StellarChainAccount(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.id = t0;
      _.publicKey = t1;
      _.network = t2;
      _.keyIndex = t3;
      _.address = t4;
      _._defaultAddress = t5;
    },
    Web3StellarChainAuthenticated: function Web3StellarChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3StellarChainAuthenticated_Web3StellarChainAuthenticated$deserialize_closure: function Web3StellarChainAuthenticated_Web3StellarChainAuthenticated$deserialize_closure() {
    },
    Web3StellarChainAuthenticated_Web3StellarChainAuthenticated$deserialize_closure0: function Web3StellarChainAuthenticated_Web3StellarChainAuthenticated$deserialize_closure0() {
    },
    Web3SubstrateRequestMethods_fromId(id) {
      return B.JSArray_methods.firstWhere$2$orElse($.Web3SubstrateRequestMethods_values, new A.Web3SubstrateRequestMethods_fromId_closure(id), new A.Web3SubstrateRequestMethods_fromId_closure0());
    },
    Web3SubstrateRequestMethods_fromName($name) {
      return A.QuickImutableList_firstWhereOrNull($.Web3SubstrateRequestMethods_values, new A.Web3SubstrateRequestMethods_fromName_closure($name), type$.Web3SubstrateRequestMethods);
    },
    Web3SubstrateRequestMethods: function Web3SubstrateRequestMethods(t0, t1, t2) {
      this.id = t0;
      this.name = t1;
      this.methodsName = t2;
    },
    Web3SubstrateRequestMethods_fromId_closure: function Web3SubstrateRequestMethods_fromId_closure(t0) {
      this.id = t0;
    },
    Web3SubstrateRequestMethods_fromId_closure0: function Web3SubstrateRequestMethods_fromId_closure0() {
    },
    Web3SubstrateRequestMethods_fromName_closure: function Web3SubstrateRequestMethods_fromName_closure(t0) {
      this.name = t0;
    },
    Web3SubstrateRequestParam_Web3SubstrateRequestParam$deserialize(bytes, hex, object, RESPONSE) {
      var param, values, challeng, t2, t3, t4, t5, t6,
        t1 = type$.CborListValue_dynamic;
      switch (A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1), 0, type$.nullable_List_int))) {
        case B.Web3SubstrateRequestMethods_aSQ:
          param = A.Web3SubstrateSendTransaction_Web3SubstrateSendTransaction$deserialize(bytes, hex, object);
          break;
        case B.Web3SubstrateRequestMethods_TSV:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          challeng = A.ExtractCborList_elementAt(values, 2, type$.List_int);
          param = new A.Web3SubstrateSignMessage(A.Web3SubstrateChainAccount_Web3SubstrateChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic)), A.BytesUtils_toHexString(challeng, true, "0x"), A.ExtractCborList_elementAt(values, 3, type$.nullable_String));
          break;
        case B.Web3SubstrateRequestMethods_zJd:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          t1 = type$.String;
          t2 = A.ExtractCborList_elementAs(values, 1, t1);
          t3 = A.ExtractCborList_elementAs(values, 2, type$.nullable_String);
          t4 = A.ExtractCborList_elementAs(values, 3, t1);
          t5 = type$.int;
          t6 = A.ExtractCborList_elementAs(values, 4, t5);
          param = new A.Web3SubstrateAddNewChain(t2, t4, A.ExtractCborList_elementAs(values, 5, t5), t3, t6, A.ExtractCborList_elementAs(values, 6, t5), A.ExtractCborList_elementAs(values, 7, t1));
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      if (!RESPONSE._eval$1("Web3SubstrateRequestParam<0>")._is(param))
        throw A.wrapException(B.Web3RequestException_ce8);
      return param;
    },
    Web3SubstrateRequestParam: function Web3SubstrateRequestParam() {
    },
    Web3SubstrateAddNewChain: function Web3SubstrateAddNewChain(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.chain = t0;
      _.genesisHash = t1;
      _.ss58Format = t2;
      _.chainType = t3;
      _.specVersion = t4;
      _.tokenDecimals = t5;
      _.tokenSymbol = t6;
    },
    Web3SubstrateSignMessage: function Web3SubstrateSignMessage(t0, t1, t2) {
      this.accessAccount = t0;
      this.challeng = t1;
      this.content = t2;
    },
    Web3SubstrateSendTransaction$_(accessAccount, assetId, blockHash, blockNumber, $call, era, genesisHash, metadataHash, mode, nonce, signedExtensions, specVersion, tip, transactionVersion, version, withSignedTransaction) {
      return new A.Web3SubstrateSendTransaction(assetId, blockHash, blockNumber, era, genesisHash, metadataHash, $call, mode, nonce, specVersion, tip, transactionVersion, signedExtensions, version, withSignedTransaction, accessAccount);
    },
    Web3SubstrateSendTransaction_Web3SubstrateSendTransaction$deserialize(bytes, hex, object) {
      var t10, t11, t12, t13, t14, t15,
        values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, type$.CborListValue_dynamic),
        t1 = A.Web3SubstrateChainAccount_Web3SubstrateChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic)),
        t2 = type$.nullable_List_int,
        t3 = A.ExtractCborList_elementAs(values, 2, t2),
        t4 = type$.List_int,
        t5 = A.ExtractCborList_elementAs(values, 3, t4),
        t6 = type$.int,
        t7 = A.ExtractCborList_elementAs(values, 4, t6),
        t8 = A.ExtractCborList_elementAs(values, 5, t4),
        t9 = A.ExtractCborList_elementAs(values, 6, t4);
      t2 = A.ExtractCborList_elementAs(values, 7, t2);
      t4 = A.ExtractCborList_elementAs(values, 8, t4);
      t10 = A.ExtractCborList_elementAs(values, 9, type$.nullable_int);
      t11 = A.ExtractCborList_elementAs(values, 10, t6);
      t12 = A.ExtractCborList_elementAs(values, 11, t6);
      t13 = A.ExtractCborList_elementAs(values, 12, type$.BigInt);
      t14 = A.ExtractCborList_elementAs(values, 13, t6);
      t15 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 14, type$.CborStringValue), new A.Web3SubstrateSendTransaction_Web3SubstrateSendTransaction$deserialize_closure(), type$.String);
      t15 = A.List_List$_of(t15, t15.$ti._eval$1("ListIterable.E"));
      return A.Web3SubstrateSendTransaction$_(t1, t3, t5, t7, t4, t8, t9, t2, t10, t11, t15, t12, t13, t14, A.ExtractCborList_elementAs(values, 15, t6), A.ExtractCborList_elementAs(values, 16, type$.nullable_bool));
    },
    Web3SubstrateSendTransaction: function Web3SubstrateSendTransaction(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15) {
      var _ = this;
      _.assetId = t0;
      _.blockHash = t1;
      _.blockNumber = t2;
      _.era = t3;
      _.genesisHash = t4;
      _.metadataHash = t5;
      _.$call = t6;
      _.mode = t7;
      _.nonce = t8;
      _.specVersion = t9;
      _.tip = t10;
      _.transactionVersion = t11;
      _.signedExtensions = t12;
      _.version = t13;
      _.withSignedTransaction = t14;
      _.accessAccount = t15;
    },
    Web3SubstrateSendTransaction_Web3SubstrateSendTransaction$deserialize_closure: function Web3SubstrateSendTransaction_Web3SubstrateSendTransaction$deserialize_closure() {
    },
    Web3SubstrateSendTransaction_toCbor_closure: function Web3SubstrateSendTransaction_toCbor_closure() {
    },
    Web3SubstrateChainAccount_Web3SubstrateChainAccount$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_2_5, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = A.BaseSubstrateAddress_BaseSubstrateAddress(A.ExtractCborList_elementAt(values, 1, type$.String)),
        t3 = type$.int,
        t4 = A.ExtractCborList_elementAt(values, 2, t3),
        t5 = A.ExtractCborList_elementAt(values, 3, type$.bool),
        t6 = A.ExtractCborList_elementAs(values, 4, type$.List_int);
      A.BytesUtils_validateListOfBytes(t6);
      return new A.Web3SubstrateChainAccount(t4, A.List_List$unmodifiable(t6, t3), t1, t2, t5);
    },
    Web3SubstrateChainIdnetifier_Web3SubstrateChainIdnetifier$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_0_3, type$.CborListValue_dynamic),
        t1 = A.ExtractCborList_elementAs(values, 0, type$.String),
        t2 = type$.int,
        t3 = A.ExtractCborList_elementAs(values, 1, t2);
      t2 = A.ExtractCborList_elementAs(values, 2, t2);
      return new A.Web3SubstrateChainIdnetifier(A.StringUtils_add0x(t1), t3, t2);
    },
    Web3SubstrateChainAuthenticated_Web3SubstrateChainAuthenticated$deserialize(object) {
      var t4, t5,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_12, type$.CborListValue_dynamic),
        t1 = type$.CborTagValue_dynamic,
        t2 = type$.Web3SubstrateChainAccount,
        t3 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 0, t1), new A.Web3SubstrateChainAuthenticated_Web3SubstrateChainAuthenticated$deserialize_closure(), t2);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      t4 = type$.Web3SubstrateChainIdnetifier;
      t5 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 1, t1), new A.Web3SubstrateChainAuthenticated_Web3SubstrateChainAuthenticated$deserialize_closure0(), t4);
      t5 = A.List_List$_of(t5, t5.$ti._eval$1("ListIterable.E"));
      t1 = A.Web3SubstrateChainIdnetifier_Web3SubstrateChainIdnetifier$deserialize(A.ExtractCborList_elementAs(values, 2, t1));
      return new A.Web3SubstrateChainAuthenticated(A.List_List$unmodifiable(t5, t4), t1, B.NetworkType_SDW, A.List_List$unmodifiable(t3, t2));
    },
    Web3SubstrateChainAccount: function Web3SubstrateChainAccount(t0, t1, t2, t3, t4) {
      var _ = this;
      _.id = t0;
      _.publicKey = t1;
      _.keyIndex = t2;
      _.address = t3;
      _._defaultAddress = t4;
    },
    Web3SubstrateChainIdnetifier: function Web3SubstrateChainIdnetifier(t0, t1, t2) {
      this.genesisHash = t0;
      this.specVersion = t1;
      this.id = t2;
    },
    Web3SubstrateChainAuthenticated: function Web3SubstrateChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3SubstrateChainAuthenticated_Web3SubstrateChainAuthenticated$deserialize_closure: function Web3SubstrateChainAuthenticated_Web3SubstrateChainAuthenticated$deserialize_closure() {
    },
    Web3SubstrateChainAuthenticated_Web3SubstrateChainAuthenticated$deserialize_closure0: function Web3SubstrateChainAuthenticated_Web3SubstrateChainAuthenticated$deserialize_closure0() {
    },
    Web3SuiRequestMethods_fromId(id) {
      return B.JSArray_methods.firstWhere$2$orElse($.Web3SuiRequestMethods_values, new A.Web3SuiRequestMethods_fromId_closure(id), new A.Web3SuiRequestMethods_fromId_closure0());
    },
    Web3SuiRequestMethods_fromName($name) {
      return A.QuickImutableList_firstWhereOrNull($.Web3SuiRequestMethods_values, new A.Web3SuiRequestMethods_fromName_closure($name), type$.Web3SuiRequestMethods);
    },
    Web3SuiRequestMethods: function Web3SuiRequestMethods(t0, t1, t2) {
      this.id = t0;
      this.name = t1;
      this.methodsName = t2;
    },
    Web3SuiRequestMethods_fromId_closure: function Web3SuiRequestMethods_fromId_closure(t0) {
      this.id = t0;
    },
    Web3SuiRequestMethods_fromId_closure0: function Web3SuiRequestMethods_fromId_closure0() {
    },
    Web3SuiRequestMethods_fromName_closure: function Web3SuiRequestMethods_fromName_closure(t0) {
      this.name = t0;
    },
    Web3SuiRequestParam_Web3SuiRequestParam$deserialize(bytes, hex, object, RESPONSE) {
      var param, values, method,
        t1 = type$.CborListValue_dynamic,
        t2 = type$.nullable_List_int;
      switch (A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1), 0, t2))) {
        case B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty:
        case B.Web3SuiRequestMethods_wTN:
        case B.Web3SuiRequestMethods_UFD:
        case B.Web3SuiRequestMethods_zFW:
          param = A.Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize(bytes, hex, object);
          break;
        case B.Web3SuiRequestMethods_102_sui_signMessage_List_empty:
        case B.Web3SuiRequestMethods_SxN:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          method = A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAt(values, 0, t2));
          param = A.Web3SuiSignMessage_Web3SuiSignMessage(A.Web3SuiChainAccount_Web3SuiChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic)), A.ExtractCborList_elementAs(values, 2, type$.String), A.ExtractCborList_elementAs(values, 3, type$.nullable_String), method);
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      if (!RESPONSE._eval$1("Web3SuiRequestParam<0>")._is(param))
        throw A.wrapException(B.Web3RequestException_ce8);
      return param;
    },
    Web3SuiRequestParam: function Web3SuiRequestParam() {
    },
    Web3SuiSignMessageResponse_Web3SuiSignMessageResponse$fromJson(json) {
      return new A.Web3SuiSignMessageResponse(A._asString(json.$index(0, "messageBytes")), A._asString(json.$index(0, "signature")));
    },
    Web3SuiSignMessage_Web3SuiSignMessage(account, challeng, $content, method) {
      switch (method) {
        case B.Web3SuiRequestMethods_102_sui_signMessage_List_empty:
        case B.Web3SuiRequestMethods_SxN:
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      return new A.Web3SuiSignMessage(challeng, $content, type$.Web3SuiRequestMethods._as(method), account);
    },
    Web3SuiSignMessageResponse: function Web3SuiSignMessageResponse(t0, t1) {
      this.messageBytes = t0;
      this.signature = t1;
    },
    Web3SuiSignMessage: function Web3SuiSignMessage(t0, t1, t2, t3) {
      var _ = this;
      _.challeng = t0;
      _.content = t1;
      _.method = t2;
      _.accessAccount = t3;
    },
    Web3SuiTransactionCallArgs_fromName($name) {
      return B.JSArray_methods.firstWhere$1(B.List_qJ7, new A.Web3SuiTransactionCallArgs_fromName_closure($name));
    },
    Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJson(json) {
      var key, type,
        t1 = type$.MappedListIterable_Web3SuiTransactionCallArgs_String;
      t1 = A.List_List$_of(new A.MappedListIterable(B.List_qJ7, type$.String_Function_Web3SuiTransactionCallArgs._as(new A.Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJson_closure()), t1), t1._eval$1("ListIterable.E"));
      key = A.Web3ValidatorUtils_containsOnlyOnce(json, t1, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, "CallArg");
      type = A.Web3SuiTransactionCallArgs_fromName(key);
      json = A.Web3ValidatorUtils_parseMap(json, key, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.Map_String_dynamic);
      switch (type) {
        case B.Web3SuiTransactionCallArgs_Object_object:
          t1 = new A.Web3SuiTransactionObject(A.Web3SuiTransactionObjectArg_Web3SuiTransactionObjectArg$fromJson(json), B.Web3SuiTransactionCallArgs_Object_object);
          break;
        case B.Web3SuiTransactionCallArgs_Pure_pure:
          t1 = new A.Web3SuiTransactionPureArg(A.Web3ValidatorUtils_parseBase64(json, "bytes", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.String), B.Web3SuiTransactionCallArgs_Pure_pure);
          break;
        case B.Web3SuiTransactionCallArgs_UnresolvedPure_unresolvedPure:
          t1 = new A.Web3SuiTransactionUnresolvedPurePureArg(json.$index(0, "value"), B.Web3SuiTransactionCallArgs_UnresolvedPure_unresolvedPure);
          break;
        case B.Web3SuiTransactionCallArgs_fy6:
          t1 = A.Web3SuiTransactionUnresolvedObject_Web3SuiTransactionUnresolvedObject$fromJson(json);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJsonV1(json) {
      if (!J.$eq$(json.$index(0, "kind"), "Input"))
        throw A.wrapException(A.Web3RequestExceptionConst_failedToParse("kind"));
      return A.Web3ValidatorUtils_parse(B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJsonV1_closure(), new A.Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJsonV1_closure0(), json, type$.Web3SuiTransactionCallArg, type$.Map_String_dynamic);
    },
    Web3SuiObjectArgs_fromName($name) {
      return B.JSArray_methods.firstWhere$1(B.List_3p5, new A.Web3SuiObjectArgs_fromName_closure($name));
    },
    Web3SuiTransactionObject_Web3SuiTransactionObject$fromJsonV1(json) {
      return new A.Web3SuiTransactionObject(A.Web3ValidatorUtils_parse(B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionObject_Web3SuiTransactionObject$fromJsonV1_closure(), new A.Web3SuiTransactionObject_Web3SuiTransactionObject$fromJsonV1_closure0(), json, type$.Web3SuiTransactionObjectArg, type$.Map_String_dynamic), B.Web3SuiTransactionCallArgs_Object_object);
    },
    Web3SuiTransactionObjectArg_Web3SuiTransactionObjectArg$fromJson(json) {
      var key, type,
        t1 = type$.MappedListIterable_Web3SuiObjectArgs_String;
      t1 = A.List_List$_of(new A.MappedListIterable(B.List_3p5, type$.String_Function_Web3SuiObjectArgs._as(new A.Web3SuiTransactionObjectArg_Web3SuiTransactionObjectArg$fromJson_closure()), t1), t1._eval$1("ListIterable.E"));
      key = A.Web3ValidatorUtils_containsOnlyOnce(json, t1, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, "ObjectArg");
      type = A.Web3SuiObjectArgs_fromName(key);
      json = A.Web3ValidatorUtils_parseMap(json, key, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.Map_String_dynamic);
      switch (type) {
        case B.Web3SuiObjectArgs_Xnd:
          t1 = A.Web3SuiTransactionImmOrOwnedObject_Web3SuiTransactionImmOrOwnedObject$fromJson(json);
          break;
        case B.Web3SuiObjectArgs_SharedObject_sharedObject:
          t1 = A.Web3SuiTransactionSharedObject_Web3SuiTransactionSharedObject$fromJson(json);
          break;
        case B.Web3SuiObjectArgs_Receiving_receiving:
          t1 = A.Web3SuiTransactionReceiving_Web3SuiTransactionReceiving$fromJson(json);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    Web3SuiTransactionImmOrOwnedObject_Web3SuiTransactionImmOrOwnedObject$fromJson(json) {
      var _s8_ = "objectId";
      return new A.Web3SuiTransactionImmOrOwnedObject(A.Web3ValidatorUtils_parseAddress(_s8_, json, _s8_, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionImmOrOwnedObject_Web3SuiTransactionImmOrOwnedObject$fromJson_closure(), type$.SuiAddress), A.Web3ValidatorUtils_parseBigInt(json, "version", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, type$.BigInt), A.Web3ValidatorUtils_parseBase58(json, "digest", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.String), B.Web3SuiObjectArgs_Xnd);
    },
    Web3SuiTransactionSharedObject_Web3SuiTransactionSharedObject$fromJson(json) {
      var _s8_ = "objectId";
      return new A.Web3SuiTransactionSharedObject(A.Web3ValidatorUtils_parseAddress(_s8_, json, _s8_, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionSharedObject_Web3SuiTransactionSharedObject$fromJson_closure(), type$.SuiAddress), A.Web3ValidatorUtils_parseBigInt(json, "initialSharedVersion", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, type$.BigInt), A.Web3ValidatorUtils_parseBool(json, "mutable", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.bool), B.Web3SuiObjectArgs_SharedObject_sharedObject);
    },
    Web3SuiTransactionReceiving_Web3SuiTransactionReceiving$fromJson(json) {
      var _s8_ = "objectId";
      return new A.Web3SuiTransactionReceiving(A.Web3ValidatorUtils_parseAddress(_s8_, json, _s8_, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionReceiving_Web3SuiTransactionReceiving$fromJson_closure(), type$.SuiAddress), A.Web3ValidatorUtils_parseBigInt(json, "version", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, type$.BigInt), A.Web3ValidatorUtils_parseBase58(json, "digest", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.String), B.Web3SuiObjectArgs_Receiving_receiving);
    },
    Web3SuiTransactionUnresolvedObject_Web3SuiTransactionUnresolvedObject$fromJson(json) {
      var _s8_ = "objectId",
        t1 = type$.nullable_BigInt;
      return new A.Web3SuiTransactionUnresolvedObject(A.Web3ValidatorUtils_parseAddress(_s8_, json, _s8_, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionUnresolvedObject_Web3SuiTransactionUnresolvedObject$fromJson_closure(), type$.SuiAddress), A.Web3ValidatorUtils_parseBigInt(json, "version", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, t1), A.Web3ValidatorUtils_parseBase58(json, "digest", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.nullable_String), A.Web3ValidatorUtils_parseBigInt(json, "initialSharedVersion", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, t1), B.Web3SuiTransactionCallArgs_fy6);
    },
    Web3SuiArguments_fromName($name) {
      return B.JSArray_methods.firstWhere$1(B.List_rA3, new A.Web3SuiArguments_fromName_closure($name));
    },
    Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJson(json) {
      var t1, r;
      switch (A.Web3SuiArguments_fromName(A.Web3ValidatorUtils_containsOnlyOnce(json, A._setArrayType(["GasCoin", "Input", "Result", "NestedResult"], type$.JSArray_String), B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, "Argument"))) {
        case B.Web3SuiArguments_0:
          A.Web3ValidatorUtils_parseBool(json, "GasCoin", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.nullable_bool);
          t1 = new A.Web3SuiTransactionArgumentGasCoin();
          break;
        case B.Web3SuiArguments_1:
          t1 = new A.Web3SuiTransactionArgumentInput(A.Web3ValidatorUtils_parseInt(json, "Input", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, type$.int));
          break;
        case B.Web3SuiArguments_2:
          t1 = new A.Web3SuiTransactionArgumentResult(A.Web3ValidatorUtils_parseInt(json, "Result", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, type$.int));
          break;
        case B.Web3SuiArguments_3:
          r = A.Web3ValidatorUtils_parseList(false, json, "NestedResult", 2, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.List_int, type$.int);
          t1 = J.getInterceptor$ax(r);
          t1 = new A.Web3SuiTransactionArgumentNestedResult(t1.get$first(r), t1.get$last(r));
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJsonV1(json) {
      var t1, _s5_ = "index";
      switch (A.Web3SuiArguments_fromName(A.Web3ValidatorUtils_parseString(json, "kind", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.nullable_String))) {
        case B.Web3SuiArguments_0:
          t1 = new A.Web3SuiTransactionArgumentGasCoin();
          break;
        case B.Web3SuiArguments_1:
          t1 = new A.Web3SuiTransactionArgumentInput(A.Web3ValidatorUtils_parseInt(json, _s5_, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, type$.int));
          break;
        case B.Web3SuiArguments_2:
          t1 = new A.Web3SuiTransactionArgumentResult(A.Web3ValidatorUtils_parseInt(json, _s5_, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, type$.int));
          break;
        case B.Web3SuiArguments_3:
          t1 = type$.int;
          t1 = new A.Web3SuiTransactionArgumentNestedResult(A.Web3ValidatorUtils_parseInt(json, _s5_, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, t1), A.Web3ValidatorUtils_parseInt(json, "resultIndex", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, t1));
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJson(json) {
      var t5,
        t1 = A.Web3ValidatorUtils_parseAddress("Package", json, "package", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJson_closure(), type$.SuiAddress),
        t2 = type$.String,
        t3 = A.Web3ValidatorUtils_parseString(json, "module", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t2),
        t4 = A.Web3ValidatorUtils_parseString(json, "function", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t2);
      t2 = A.Web3ValidatorUtils_parseList(true, json, "typeArguments", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.List_String, t2);
      t5 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(true, json, "arguments", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.List_Map_String_dynamic, type$.Map_String_dynamic), new A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJson_closure0(), type$.Web3SuiTransactionArgument);
      t5 = A.List_List$_of(t5, t5.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionCommandMoveCall(t1, t3, t4, t2, t5, B.Web3SuiTransactionCommands_MoveCall_moveCall);
    },
    Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1(json) {
      var t1 = type$.List_String,
        t2 = type$.String,
        target = A.Web3ValidatorUtils_praseObject(json, "target", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure(), t1, t2),
        t3 = J.getInterceptor$asx(target),
        t4 = A.Web3ValidatorUtils_parse(B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure0(target), new A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure1(), t3.$index(target, 0), type$.SuiAddress, t2),
        t5 = t3.$index(target, 1);
      t3 = t3.$index(target, 2);
      t2 = A.Web3ValidatorUtils_parseList(true, json, "typeArguments", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t1, t2);
      t1 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(true, json, "arguments", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.List_Map_String_dynamic, type$.Map_String_dynamic), new A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure2(), type$.Web3SuiTransactionArgument);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionCommandMoveCall(t4, t5, t3, t2, t1, B.Web3SuiTransactionCommands_MoveCall_moveCall);
    },
    Web3SuiTransactionCommandTransferObjects_Web3SuiTransactionCommandTransferObjects$fromJson(json) {
      var t1 = type$.Map_String_dynamic,
        t2 = A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJson(A.Web3ValidatorUtils_parseMap(json, "address", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t1));
      t1 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(false, json, "objects", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.List_Map_String_dynamic, t1), new A.Web3SuiTransactionCommandTransferObjects_Web3SuiTransactionCommandTransferObjects$fromJson_closure(), type$.Web3SuiTransactionArgument);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionCommandTransferObjects(t2, t1, B.Web3SuiTransactionCommands_TransferObjects_transferObject);
    },
    Web3SuiTransactionCommandTransferObjects_Web3SuiTransactionCommandTransferObjects$fromJsonV1(json) {
      var t1 = type$.Map_String_dynamic,
        t2 = A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJsonV1(A.Web3ValidatorUtils_parseMap(json, "address", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t1));
      t1 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(false, json, "objects", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.List_Map_String_dynamic, t1), new A.Web3SuiTransactionCommandTransferObjects_Web3SuiTransactionCommandTransferObjects$fromJsonV1_closure(), type$.Web3SuiTransactionArgument);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionCommandTransferObjects(t2, t1, B.Web3SuiTransactionCommands_TransferObjects_transferObject);
    },
    Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJson(json) {
      switch (A.Web3ValidatorUtils_parseInt(json, "version", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, type$.nullable_int)) {
        case 1:
          return A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1(json);
        case 2:
          return A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2(json);
        default:
          throw A.wrapException(A.Web3RequestException$(4200, null, "Unsuported features: Unknow transaction version.", "WEB3-4030"));
      }
    },
    Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2(json) {
      var t1, t2, t3, t4, t5, t6;
      A.Web3ValidatorUtils_parseInt(json, "version", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, type$.int);
      t1 = A.Web3ValidatorUtils_parseAddress("Ethereum address", json, "sender", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure(), type$.nullable_SuiAddress);
      t2 = type$.Map_String_dynamic;
      t3 = A.Web3ValidatorUtils_parse(B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure0(), new A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure1(), json.$index(0, "expiration"), type$.nullable_Web3SuiTransactionExpiration, t2);
      t4 = A.Web3SuiTransactionGasData_Web3SuiTransactionGasData$fromJson(A.Web3ValidatorUtils_parseMap(json, "gasData", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t2));
      t5 = type$.List_Map_String_dynamic;
      t6 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(true, json, "inputs", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t5, t2), new A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure2(), type$.Web3SuiTransactionCallArg);
      t6 = A.List_List$_of(t6, t6.$ti._eval$1("ListIterable.E"));
      t2 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(true, json, "commands", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t5, t2), new A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure3(), type$.Web3SuiTransactionCommand);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionDataV2(t1, t3, t4, t6, t2, json.$index(0, "extensions"));
    },
    Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1(json) {
      var t1, t2, t3, t4, t5, t6;
      A.Web3ValidatorUtils_parseInt(json, "version", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, type$.int);
      t1 = A.Web3ValidatorUtils_parseAddress("Ethereum address", json, "sender", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure(), type$.nullable_SuiAddress);
      t2 = type$.Map_String_dynamic;
      t3 = A.Web3ValidatorUtils_parse(B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure0(), new A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure1(), json.$index(0, "expiration"), type$.nullable_Web3SuiTransactionExpiration, t2);
      t4 = A.Web3SuiTransactionGasData_Web3SuiTransactionGasData$fromJson(A.Web3ValidatorUtils_parseMap(json, "gasConfig", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t2));
      t5 = type$.List_Map_String_dynamic;
      t6 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(true, json, "inputs", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t5, t2), new A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure2(), type$.Web3SuiTransactionCallArg);
      t6 = A.List_List$_of(t6, t6.$ti._eval$1("ListIterable.E"));
      t2 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(true, json, "transactions", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t5, t2), new A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure3(), type$.Web3SuiTransactionCommand);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionDataV2(t1, t3, t4, t6, t2, json.$index(0, "extensions"));
    },
    Web3SuiTransactionExpirations_fromName($name) {
      return B.JSArray_methods.firstWhere$1(B.List_rNq, new A.Web3SuiTransactionExpirations_fromName_closure($name));
    },
    Web3SuiTransactionExpiration_Web3SuiTransactionExpiration$fromJson(json) {
      var t1 = type$.MappedListIterable_Web3SuiTransactionExpirations_String;
      t1 = A.List_List$_of(new A.MappedListIterable(B.List_rNq, type$.String_Function_Web3SuiTransactionExpirations._as(new A.Web3SuiTransactionExpiration_Web3SuiTransactionExpiration$fromJson_closure()), t1), t1._eval$1("ListIterable.E"));
      switch (A.Web3SuiTransactionExpirations_fromName(A.Web3ValidatorUtils_containsOnlyOnce(json, t1, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, "Expiration"))) {
        case B.Web3SuiTransactionExpirations_None_none:
          A.Web3ValidatorUtils_parseBool(json, "None", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.nullable_bool);
          t1 = new A.Web3SuiTransactionExpirationNone(B.Web3SuiTransactionExpirations_None_none);
          break;
        case B.Web3SuiTransactionExpirations_Epoch_epoch:
          t1 = new A.Web3SuiTransactionExpirationEpoch(A.Web3ValidatorUtils_parseBigInt(json, "Epoch", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, type$.BigInt), B.Web3SuiTransactionExpirations_Epoch_epoch);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    Web3SuiTransactionGasData_Web3SuiTransactionGasData$fromJson(json) {
      var t3, t4,
        t1 = type$.nullable_BigInt,
        t2 = A.Web3ValidatorUtils_parseBigInt(json, "budget", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, t1);
      t1 = A.Web3ValidatorUtils_parseBigInt(json, "price", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, true, t1);
      t3 = A.Web3ValidatorUtils_parseAddress("Ethereum address", json, "owner", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionGasData_Web3SuiTransactionGasData$fromJson_closure(), type$.nullable_SuiAddress);
      t4 = A.Web3ValidatorUtils_parseList(true, json, "payment", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.nullable_List_Map_String_dynamic, type$.Map_String_dynamic);
      if (t4 == null)
        t4 = null;
      else {
        t4 = J.map$1$1$ax(t4, new A.Web3SuiTransactionGasData_Web3SuiTransactionGasData$fromJson_closure0(), type$.Web3SuiTransactionImmOrOwnedObject);
        t4 = A.List_List$_of(t4, t4.$ti._eval$1("ListIterable.E"));
      }
      return new A.Web3SuiTransactionGasData(t2, t1, t3, t4);
    },
    Web3SuiTransactionCommandSplitCoins_Web3SuiTransactionCommandSplitCoins$fromJson(json) {
      var t1 = type$.Map_String_dynamic,
        t2 = A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJson(A.Web3ValidatorUtils_parseMap(json, "coin", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t1));
      t1 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(false, json, "amounts", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.List_Map_String_dynamic, t1), new A.Web3SuiTransactionCommandSplitCoins_Web3SuiTransactionCommandSplitCoins$fromJson_closure(), type$.Web3SuiTransactionArgument);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionCommandSplitCoins(t2, t1, B.Web3SuiTransactionCommands_SplitCoins_splitCoins);
    },
    Web3SuiTransactionCommandSplitCoins_Web3SuiTransactionCommandSplitCoins$fromJsonV1(json) {
      var t1 = type$.Map_String_dynamic,
        t2 = A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJsonV1(A.Web3ValidatorUtils_parseMap(json, "coin", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t1));
      t1 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(false, json, "amounts", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.List_Map_String_dynamic, t1), new A.Web3SuiTransactionCommandSplitCoins_Web3SuiTransactionCommandSplitCoins$fromJsonV1_closure(), type$.Web3SuiTransactionArgument);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionCommandSplitCoins(t2, t1, B.Web3SuiTransactionCommands_SplitCoins_splitCoins);
    },
    Web3SuiTransactionCommandMergeCoins_Web3SuiTransactionCommandMergeCoins$fromJson(json) {
      var t1 = type$.Map_String_dynamic,
        t2 = A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJson(A.Web3ValidatorUtils_parseMap(json, "destination", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t1));
      t1 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(false, json, "sources", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.List_Map_String_dynamic, t1), new A.Web3SuiTransactionCommandMergeCoins_Web3SuiTransactionCommandMergeCoins$fromJson_closure(), type$.Web3SuiTransactionArgument);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionCommandMergeCoins(t2, t1, B.Web3SuiTransactionCommands_MergeCoins_mergeCoins);
    },
    Web3SuiTransactionCommandMergeCoins_Web3SuiTransactionCommandMergeCoins$fromJsonV1(json) {
      var t1 = type$.Map_String_dynamic,
        t2 = A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJsonV1(A.Web3ValidatorUtils_parseMap(json, "destination", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t1));
      t1 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(false, json, "sources", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.List_Map_String_dynamic, t1), new A.Web3SuiTransactionCommandMergeCoins_Web3SuiTransactionCommandMergeCoins$fromJsonV1_closure(), type$.Web3SuiTransactionArgument);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionCommandMergeCoins(t2, t1, B.Web3SuiTransactionCommands_MergeCoins_mergeCoins);
    },
    Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJson(json) {
      var t1 = type$.List_String,
        t2 = type$.String,
        t3 = A.Web3ValidatorUtils_parseList(false, json, "modules", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t1, t2);
      t2 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(true, json, "dependencies", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t1, t2), new A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJson_closure(), type$.SuiAddress);
      t1 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionCommandPublish(t3, t1, B.Web3SuiTransactionCommands_Publish_publish);
    },
    Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1(json) {
      var t1 = type$.List_String,
        t2 = A.Web3ValidatorUtils_parse(B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1_closure(), new A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1_closure0(), json.$index(0, "modules"), t1, type$.List_dynamic);
      t1 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(true, json, "dependencies", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t1, type$.String), new A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1_closure1(), type$.SuiAddress);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionCommandPublish(t2, t1, B.Web3SuiTransactionCommands_Publish_publish);
    },
    Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJson(json) {
      var t1 = A.Web3ValidatorUtils_parseString(json, "type", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.nullable_String),
        t2 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(true, json, "elements", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.List_Map_String_dynamic, type$.Map_String_dynamic), new A.Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJson_closure(), type$.Web3SuiTransactionArgument);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionCommandMakeMoveVec(t1, t2, B.Web3SuiTransactionCommands_MakeMoveVec_makeMoveVec);
    },
    Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1(json) {
      var t1 = A.Web3ValidatorUtils_parse(B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1_closure(), new A.Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1_closure0(), json.$index(0, "type"), type$.nullable_String, type$.Map_dynamic_dynamic),
        t2 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(true, json, "objects", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.List_Map_String_dynamic, type$.Map_String_dynamic), new A.Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1_closure1(), type$.Web3SuiTransactionArgument);
      t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionCommandMakeMoveVec(t1, t2, B.Web3SuiTransactionCommands_MakeMoveVec_makeMoveVec);
    },
    Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJson(json) {
      var t1 = type$.List_String,
        t2 = type$.String,
        t3 = A.Web3ValidatorUtils_parseList(false, json, "modules", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t1, t2),
        t4 = type$.SuiAddress;
      t2 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(true, json, "dependencies", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t1, t2), new A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJson_closure(), t4);
      t1 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionCommandUpgrade(t3, t1, A.Web3ValidatorUtils_parseAddress("package", json, "package", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJson_closure0(), t4), A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJson(A.Web3ValidatorUtils_parseMap(json, "ticket", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.Map_String_dynamic)), B.Web3SuiTransactionCommands_Upgrade_upgrade);
    },
    Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1(json) {
      var t1 = type$.List_String,
        t2 = A.Web3ValidatorUtils_parse(B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure(), new A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure0(), json.$index(0, "modules"), t1, type$.List_dynamic),
        t3 = type$.SuiAddress;
      t1 = J.map$1$1$ax(A.Web3ValidatorUtils_parseList(true, json, "dependencies", null, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, t1, type$.String), new A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure1(), t3);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return new A.Web3SuiTransactionCommandUpgrade(t2, t1, A.Web3ValidatorUtils_parseAddress("package", json, "packageId", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure2(), t3), A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJsonV1(A.Web3ValidatorUtils_parseMap(json, "ticket", B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.Map_String_dynamic)), B.Web3SuiTransactionCommands_Upgrade_upgrade);
    },
    Web3SuiTransactionCommands_fromName($name) {
      return B.JSArray_methods.firstWhere$1(B.List_peN, new A.Web3SuiTransactionCommands_fromName_closure($name));
    },
    Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJson(json) {
      var key, type,
        t1 = type$.MappedListIterable_Web3SuiTransactionCommands_String;
      t1 = A.List_List$_of(new A.MappedListIterable(B.List_peN, type$.String_Function_Web3SuiTransactionCommands._as(new A.Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJson_closure()), t1), t1._eval$1("ListIterable.E"));
      key = A.Web3ValidatorUtils_containsOnlyOnce(json, t1, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, "Command");
      type = A.Web3SuiTransactionCommands_fromName(key);
      json = A.Web3ValidatorUtils_parseMap(json, key, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, type$.Map_String_dynamic);
      switch (type) {
        case B.Web3SuiTransactionCommands_MoveCall_moveCall:
          t1 = A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJson(json);
          break;
        case B.Web3SuiTransactionCommands_TransferObjects_transferObject:
          t1 = A.Web3SuiTransactionCommandTransferObjects_Web3SuiTransactionCommandTransferObjects$fromJson(json);
          break;
        case B.Web3SuiTransactionCommands_SplitCoins_splitCoins:
          t1 = A.Web3SuiTransactionCommandSplitCoins_Web3SuiTransactionCommandSplitCoins$fromJson(json);
          break;
        case B.Web3SuiTransactionCommands_MergeCoins_mergeCoins:
          t1 = A.Web3SuiTransactionCommandMergeCoins_Web3SuiTransactionCommandMergeCoins$fromJson(json);
          break;
        case B.Web3SuiTransactionCommands_Publish_publish:
          t1 = A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJson(json);
          break;
        case B.Web3SuiTransactionCommands_MakeMoveVec_makeMoveVec:
          t1 = A.Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJson(json);
          break;
        case B.Web3SuiTransactionCommands_Upgrade_upgrade:
          t1 = A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJson(json);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJsonV1(json) {
      var t1;
      switch (A.Web3ValidatorUtils_parse(B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, new A.Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJsonV1_closure(), new A.Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJsonV1_closure0(), json.$index(0, "kind"), type$.Web3SuiTransactionCommands, type$.String)) {
        case B.Web3SuiTransactionCommands_MoveCall_moveCall:
          t1 = A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1(json);
          break;
        case B.Web3SuiTransactionCommands_TransferObjects_transferObject:
          t1 = A.Web3SuiTransactionCommandTransferObjects_Web3SuiTransactionCommandTransferObjects$fromJsonV1(json);
          break;
        case B.Web3SuiTransactionCommands_SplitCoins_splitCoins:
          t1 = A.Web3SuiTransactionCommandSplitCoins_Web3SuiTransactionCommandSplitCoins$fromJsonV1(json);
          break;
        case B.Web3SuiTransactionCommands_MergeCoins_mergeCoins:
          t1 = A.Web3SuiTransactionCommandMergeCoins_Web3SuiTransactionCommandMergeCoins$fromJsonV1(json);
          break;
        case B.Web3SuiTransactionCommands_Publish_publish:
          t1 = A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1(json);
          break;
        case B.Web3SuiTransactionCommands_MakeMoveVec_makeMoveVec:
          t1 = A.Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1(json);
          break;
        case B.Web3SuiTransactionCommands_Upgrade_upgrade:
          t1 = A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1(json);
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    Web3SuiSignTransactionResponse_Web3SuiSignTransactionResponse$fromJson(json) {
      return new A.Web3SuiSignTransactionResponse(A._asString(json.$index(0, "bytes")), A._asString(json.$index(0, "signature")), A._asString(json.$index(0, "digest")));
    },
    Web3SuiSignAndExecuteTransactionResponse_Web3SuiSignAndExecuteTransactionResponse$fromJson(json) {
      return new A.Web3SuiSignAndExecuteTransactionResponse(A._asString(json.$index(0, "digest")), A._asString(json.$index(0, "effects")), type$.Map_String_dynamic._as(json.$index(0, "excuteResponse")));
    },
    Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction(account, executeOptions, executeType, method, transaction) {
      switch (method) {
        case B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty:
        case B.Web3SuiRequestMethods_UFD:
        case B.Web3SuiRequestMethods_zFW:
        case B.Web3SuiRequestMethods_wTN:
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      return new A.Web3SuiSignOrExecuteTransaction(executeOptions, executeType, transaction, account, type$.Web3SuiRequestMethods._as(method));
    },
    Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize(bytes, hex, object) {
      var values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, type$.CborListValue_dynamic),
        transaction = A.StringUtils_toJson(A.ExtractCborList_elementAs(values, 2, type$.String), null, type$.Map_String_dynamic),
        method = A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAt(values, 0, type$.nullable_List_int)),
        t1 = A.Web3SuiChainAccount_Web3SuiChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic)),
        t2 = A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJson(transaction),
        t3 = type$.CborStringValue;
      return A.Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction(t1, A.ExtractCborList_elemetMybeAs(values, 3, new A.Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize_closure(), type$.SuiApiTransactionBlockResponseOptions, t3), A.ExtractCborList_elemetMybeAs(values, 4, new A.Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize_closure0(), type$.SuiApiExecuteTransactionRequestType, t3), method, t2);
    },
    Web3SuiTransactionCallArgs: function Web3SuiTransactionCallArgs(t0, t1) {
      this.name = t0;
      this._name = t1;
    },
    Web3SuiTransactionCallArgs_fromName_closure: function Web3SuiTransactionCallArgs_fromName_closure(t0) {
      this.name = t0;
    },
    Web3SuiTransactionCallArg: function Web3SuiTransactionCallArg() {
    },
    Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJson_closure: function Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJson_closure() {
    },
    Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJsonV1_closure0: function Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJsonV1_closure0() {
    },
    Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJsonV1_closure: function Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJsonV1_closure() {
    },
    Web3SuiObjectArgs: function Web3SuiObjectArgs(t0, t1) {
      this.name = t0;
      this._name = t1;
    },
    Web3SuiObjectArgs_fromName_closure: function Web3SuiObjectArgs_fromName_closure(t0) {
      this.name = t0;
    },
    Web3SuiTransactionObject: function Web3SuiTransactionObject(t0, t1) {
      this.objectArg = t0;
      this.type = t1;
    },
    Web3SuiTransactionObject_Web3SuiTransactionObject$fromJsonV1_closure0: function Web3SuiTransactionObject_Web3SuiTransactionObject$fromJsonV1_closure0() {
    },
    Web3SuiTransactionObject_Web3SuiTransactionObject$fromJsonV1_closure: function Web3SuiTransactionObject_Web3SuiTransactionObject$fromJsonV1_closure() {
    },
    Web3SuiTransactionObjectArg: function Web3SuiTransactionObjectArg() {
    },
    Web3SuiTransactionObjectArg_Web3SuiTransactionObjectArg$fromJson_closure: function Web3SuiTransactionObjectArg_Web3SuiTransactionObjectArg$fromJson_closure() {
    },
    Web3SuiTransactionImmOrOwnedObject: function Web3SuiTransactionImmOrOwnedObject(t0, t1, t2, t3) {
      var _ = this;
      _.objectId = t0;
      _.version = t1;
      _.digest = t2;
      _.type = t3;
    },
    Web3SuiTransactionImmOrOwnedObject_Web3SuiTransactionImmOrOwnedObject$fromJson_closure: function Web3SuiTransactionImmOrOwnedObject_Web3SuiTransactionImmOrOwnedObject$fromJson_closure() {
    },
    Web3SuiTransactionSharedObject: function Web3SuiTransactionSharedObject(t0, t1, t2, t3) {
      var _ = this;
      _.objectId = t0;
      _.initialSharedVersion = t1;
      _.mutable = t2;
      _.type = t3;
    },
    Web3SuiTransactionSharedObject_Web3SuiTransactionSharedObject$fromJson_closure: function Web3SuiTransactionSharedObject_Web3SuiTransactionSharedObject$fromJson_closure() {
    },
    Web3SuiTransactionReceiving: function Web3SuiTransactionReceiving(t0, t1, t2, t3) {
      var _ = this;
      _.objectId = t0;
      _.version = t1;
      _.digest = t2;
      _.type = t3;
    },
    Web3SuiTransactionReceiving_Web3SuiTransactionReceiving$fromJson_closure: function Web3SuiTransactionReceiving_Web3SuiTransactionReceiving$fromJson_closure() {
    },
    Web3SuiTransactionPureArg: function Web3SuiTransactionPureArg(t0, t1) {
      this.bytes = t0;
      this.type = t1;
    },
    Web3SuiTransactionUnresolvedPurePureArg: function Web3SuiTransactionUnresolvedPurePureArg(t0, t1) {
      this.value = t0;
      this.type = t1;
    },
    Web3SuiTransactionUnresolvedObject: function Web3SuiTransactionUnresolvedObject(t0, t1, t2, t3, t4) {
      var _ = this;
      _.objectId = t0;
      _.version = t1;
      _.digest = t2;
      _.initialSharedVersion = t3;
      _.type = t4;
    },
    Web3SuiTransactionUnresolvedObject_Web3SuiTransactionUnresolvedObject$fromJson_closure: function Web3SuiTransactionUnresolvedObject_Web3SuiTransactionUnresolvedObject$fromJson_closure() {
    },
    Web3SuiArguments: function Web3SuiArguments(t0) {
      this._name = t0;
    },
    Web3SuiArguments_fromName_closure: function Web3SuiArguments_fromName_closure(t0) {
      this.name = t0;
    },
    Web3SuiTransactionArgument: function Web3SuiTransactionArgument() {
    },
    Web3SuiTransactionArgumentGasCoin: function Web3SuiTransactionArgumentGasCoin() {
    },
    Web3SuiTransactionArgumentInput: function Web3SuiTransactionArgumentInput(t0) {
      this.input = t0;
    },
    Web3SuiTransactionArgumentResult: function Web3SuiTransactionArgumentResult(t0) {
      this.result = t0;
    },
    Web3SuiTransactionArgumentNestedResult: function Web3SuiTransactionArgumentNestedResult(t0, t1) {
      this.index = t0;
      this.resultIndex = t1;
    },
    Web3SuiTransactionCommandMoveCall: function Web3SuiTransactionCommandMoveCall(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$package = t0;
      _.module = t1;
      _.$function = t2;
      _.typeArguments = t3;
      _.$arguments = t4;
      _.type = t5;
    },
    Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJson_closure: function Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJson_closure() {
    },
    Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJson_closure0: function Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJson_closure0() {
    },
    Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure: function Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure() {
    },
    Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure1: function Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure1() {
    },
    Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure0: function Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure0(t0) {
      this.target = t0;
    },
    Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure2: function Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure2() {
    },
    Web3SuiTransactionCommandMoveCall_toJson_closure: function Web3SuiTransactionCommandMoveCall_toJson_closure() {
    },
    Web3SuiTransactionCommandTransferObjects: function Web3SuiTransactionCommandTransferObjects(t0, t1, t2) {
      this.address = t0;
      this.objects = t1;
      this.type = t2;
    },
    Web3SuiTransactionCommandTransferObjects_Web3SuiTransactionCommandTransferObjects$fromJson_closure: function Web3SuiTransactionCommandTransferObjects_Web3SuiTransactionCommandTransferObjects$fromJson_closure() {
    },
    Web3SuiTransactionCommandTransferObjects_Web3SuiTransactionCommandTransferObjects$fromJsonV1_closure: function Web3SuiTransactionCommandTransferObjects_Web3SuiTransactionCommandTransferObjects$fromJsonV1_closure() {
    },
    Web3SuiTransactionCommandTransferObjects_toJson_closure: function Web3SuiTransactionCommandTransferObjects_toJson_closure() {
    },
    Web3SuiTransactionDataV2: function Web3SuiTransactionDataV2(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.sender = t0;
      _.expiration = t1;
      _.gasData = t2;
      _.inputs = t3;
      _.commands = t4;
      _.extensions = t5;
    },
    Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure: function Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure() {
    },
    Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure1: function Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure1() {
    },
    Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure0: function Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure0() {
    },
    Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure2: function Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure2() {
    },
    Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure3: function Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure3() {
    },
    Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure: function Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure() {
    },
    Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure1: function Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure1() {
    },
    Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure0: function Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure0() {
    },
    Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure2: function Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure2() {
    },
    Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure3: function Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure3() {
    },
    Web3SuiTransactionDataV2_toJson_closure: function Web3SuiTransactionDataV2_toJson_closure() {
    },
    Web3SuiTransactionDataV2_toJson_closure0: function Web3SuiTransactionDataV2_toJson_closure0() {
    },
    Web3SuiTransactionExpirations: function Web3SuiTransactionExpirations(t0, t1) {
      this.name = t0;
      this._name = t1;
    },
    Web3SuiTransactionExpirations_fromName_closure: function Web3SuiTransactionExpirations_fromName_closure(t0) {
      this.name = t0;
    },
    Web3SuiTransactionExpiration: function Web3SuiTransactionExpiration() {
    },
    Web3SuiTransactionExpiration_Web3SuiTransactionExpiration$fromJson_closure: function Web3SuiTransactionExpiration_Web3SuiTransactionExpiration$fromJson_closure() {
    },
    Web3SuiTransactionExpirationNone: function Web3SuiTransactionExpirationNone(t0) {
      this.type = t0;
    },
    Web3SuiTransactionExpirationEpoch: function Web3SuiTransactionExpirationEpoch(t0, t1) {
      this.epoch = t0;
      this.type = t1;
    },
    Web3SuiTransactionGasData: function Web3SuiTransactionGasData(t0, t1, t2, t3) {
      var _ = this;
      _.budget = t0;
      _.price = t1;
      _.owner = t2;
      _.payment = t3;
    },
    Web3SuiTransactionGasData_Web3SuiTransactionGasData$fromJson_closure: function Web3SuiTransactionGasData_Web3SuiTransactionGasData$fromJson_closure() {
    },
    Web3SuiTransactionGasData_Web3SuiTransactionGasData$fromJson_closure0: function Web3SuiTransactionGasData_Web3SuiTransactionGasData$fromJson_closure0() {
    },
    Web3SuiTransactionGasData_toJson_closure: function Web3SuiTransactionGasData_toJson_closure() {
    },
    Web3SuiTransactionCommandSplitCoins: function Web3SuiTransactionCommandSplitCoins(t0, t1, t2) {
      this.coin = t0;
      this.amounts = t1;
      this.type = t2;
    },
    Web3SuiTransactionCommandSplitCoins_Web3SuiTransactionCommandSplitCoins$fromJson_closure: function Web3SuiTransactionCommandSplitCoins_Web3SuiTransactionCommandSplitCoins$fromJson_closure() {
    },
    Web3SuiTransactionCommandSplitCoins_Web3SuiTransactionCommandSplitCoins$fromJsonV1_closure: function Web3SuiTransactionCommandSplitCoins_Web3SuiTransactionCommandSplitCoins$fromJsonV1_closure() {
    },
    Web3SuiTransactionCommandSplitCoins_toJson_closure: function Web3SuiTransactionCommandSplitCoins_toJson_closure() {
    },
    Web3SuiTransactionCommandMergeCoins: function Web3SuiTransactionCommandMergeCoins(t0, t1, t2) {
      this.destination = t0;
      this.sources = t1;
      this.type = t2;
    },
    Web3SuiTransactionCommandMergeCoins_Web3SuiTransactionCommandMergeCoins$fromJson_closure: function Web3SuiTransactionCommandMergeCoins_Web3SuiTransactionCommandMergeCoins$fromJson_closure() {
    },
    Web3SuiTransactionCommandMergeCoins_Web3SuiTransactionCommandMergeCoins$fromJsonV1_closure: function Web3SuiTransactionCommandMergeCoins_Web3SuiTransactionCommandMergeCoins$fromJsonV1_closure() {
    },
    Web3SuiTransactionCommandMergeCoins_toJson_closure: function Web3SuiTransactionCommandMergeCoins_toJson_closure() {
    },
    Web3SuiTransactionCommandPublish: function Web3SuiTransactionCommandPublish(t0, t1, t2) {
      this.modules = t0;
      this.dependencies = t1;
      this.type = t2;
    },
    Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJson_closure: function Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJson_closure() {
    },
    Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1_closure0: function Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1_closure0() {
    },
    Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1__closure: function Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1__closure() {
    },
    Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1__closure0: function Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1__closure0() {
    },
    Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1_closure: function Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1_closure() {
    },
    Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1_closure1: function Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1_closure1() {
    },
    Web3SuiTransactionCommandPublish_toJson_closure: function Web3SuiTransactionCommandPublish_toJson_closure() {
    },
    Web3SuiTransactionCommandMakeMoveVec: function Web3SuiTransactionCommandMakeMoveVec(t0, t1, t2) {
      this.typeArgument = t0;
      this.elements = t1;
      this.type = t2;
    },
    Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJson_closure: function Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJson_closure() {
    },
    Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1_closure0: function Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1_closure0() {
    },
    Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1_closure: function Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1_closure() {
    },
    Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1_closure1: function Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1_closure1() {
    },
    Web3SuiTransactionCommandMakeMoveVec_toJson_closure: function Web3SuiTransactionCommandMakeMoveVec_toJson_closure() {
    },
    Web3SuiTransactionCommandUpgrade: function Web3SuiTransactionCommandUpgrade(t0, t1, t2, t3, t4) {
      var _ = this;
      _.modules = t0;
      _.dependencies = t1;
      _.$package = t2;
      _.ticket = t3;
      _.type = t4;
    },
    Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJson_closure: function Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJson_closure() {
    },
    Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJson_closure0: function Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJson_closure0() {
    },
    Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure0: function Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure0() {
    },
    Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1__closure: function Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1__closure() {
    },
    Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1__closure0: function Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1__closure0() {
    },
    Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure: function Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure() {
    },
    Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure1: function Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure1() {
    },
    Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure2: function Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure2() {
    },
    Web3SuiTransactionCommandUpgrade_toJson_closure: function Web3SuiTransactionCommandUpgrade_toJson_closure() {
    },
    Web3SuiTransactionCommands: function Web3SuiTransactionCommands(t0, t1) {
      this.name = t0;
      this._name = t1;
    },
    Web3SuiTransactionCommands_fromName_closure: function Web3SuiTransactionCommands_fromName_closure(t0) {
      this.name = t0;
    },
    Web3SuiTransactionCommand: function Web3SuiTransactionCommand() {
    },
    Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJson_closure: function Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJson_closure() {
    },
    Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJsonV1_closure0: function Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJsonV1_closure0() {
    },
    Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJsonV1_closure: function Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJsonV1_closure() {
    },
    Web3SuiSignTransactionResponse: function Web3SuiSignTransactionResponse(t0, t1, t2) {
      this.bytes = t0;
      this.signature = t1;
      this.digest = t2;
    },
    Web3SuiSignAndExecuteTransactionResponse: function Web3SuiSignAndExecuteTransactionResponse(t0, t1, t2) {
      this.digest = t0;
      this.effects = t1;
      this.excuteResponse = t2;
    },
    Web3SuiSignOrExecuteTransaction: function Web3SuiSignOrExecuteTransaction(t0, t1, t2, t3, t4) {
      var _ = this;
      _.executeOptions = t0;
      _.executeType = t1;
      _.transaction = t2;
      _.accessAccount = t3;
      _.method = t4;
    },
    Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize_closure: function Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize_closure() {
    },
    Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize_closure0: function Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize_closure0() {
    },
    Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize__closure: function Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize__closure(t0) {
      this.e = t0;
    },
    Web3SuiChainAccount_Web3SuiChainAccount$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_2_7, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = A.SuiAddress_SuiAddress(A.ExtractCborList_elementAt(values, 1, type$.String)),
        t3 = type$.int,
        t4 = A.ExtractCborList_elementAt(values, 2, t3),
        t5 = A.ExtractCborList_elementAt(values, 3, type$.bool),
        t6 = A.ExtractCborList_elementAs(values, 4, type$.List_int),
        t7 = A.ExtractCborList_elementAs(values, 5, t3),
        t8 = A.SuiChainType_fromValue(A.ExtractCborList_elementAs(values, 6, type$.nullable_int));
      A.BytesUtils_validateListOfBytes(t6);
      return new A.Web3SuiChainAccount(t4, A.List_List$unmodifiable(t6, t3), t7, t8, t1, t2, t5);
    },
    Web3SuiChainAuthenticated_Web3SuiChainAuthenticated$deserialize(object) {
      var t4, t5,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_17, type$.CborListValue_dynamic),
        t1 = type$.CborTagValue_dynamic,
        t2 = type$.Web3SuiChainAccount,
        t3 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 0, t1), new A.Web3SuiChainAuthenticated_Web3SuiChainAuthenticated$deserialize_closure(), t2);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      t4 = type$.Web3ChainDefaultIdnetifier;
      t5 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 1, t1), new A.Web3SuiChainAuthenticated_Web3SuiChainAuthenticated$deserialize_closure0(), t4);
      t5 = A.List_List$_of(t5, t5.$ti._eval$1("ListIterable.E"));
      t1 = A.Web3ChainDefaultIdnetifier_Web3ChainDefaultIdnetifier$deserialize(A.ExtractCborList_elementAs(values, 2, t1));
      return new A.Web3SuiChainAuthenticated(A.List_List$unmodifiable(t5, t4), t1, B.NetworkType_AXR, A.List_List$unmodifiable(t3, t2));
    },
    Web3SuiChainAccount: function Web3SuiChainAccount(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.id = t0;
      _.publicKey = t1;
      _.signingScheme = t2;
      _.network = t3;
      _.keyIndex = t4;
      _.address = t5;
      _._defaultAddress = t6;
    },
    Web3SuiChainAuthenticated: function Web3SuiChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3SuiChainAuthenticated_Web3SuiChainAuthenticated$deserialize_closure: function Web3SuiChainAuthenticated_Web3SuiChainAuthenticated$deserialize_closure() {
    },
    Web3SuiChainAuthenticated_Web3SuiChainAuthenticated$deserialize_closure0: function Web3SuiChainAuthenticated_Web3SuiChainAuthenticated$deserialize_closure0() {
    },
    Web3TonRequestMethods_fromId(id) {
      return B.JSArray_methods.firstWhere$2$orElse($.Web3TonRequestMethods_values, new A.Web3TonRequestMethods_fromId_closure(id), new A.Web3TonRequestMethods_fromId_closure0());
    },
    Web3TonRequestMethods_fromName($name) {
      return A.QuickImutableList_firstWhereOrNull($.Web3TonRequestMethods_values, new A.Web3TonRequestMethods_fromName_closure($name), type$.Web3TonRequestMethods);
    },
    Web3TonRequestMethods: function Web3TonRequestMethods(t0, t1, t2) {
      this.id = t0;
      this.name = t1;
      this.methodsName = t2;
    },
    Web3TonRequestMethods_fromId_closure: function Web3TonRequestMethods_fromId_closure(t0) {
      this.id = t0;
    },
    Web3TonRequestMethods_fromId_closure0: function Web3TonRequestMethods_fromId_closure0() {
    },
    Web3TonRequestMethods_fromName_closure: function Web3TonRequestMethods_fromName_closure(t0) {
      this.name = t0;
    },
    Web3TonRequestParam_Web3TonRequestParam$deserialize(bytes, hex, object, RESPONSE) {
      var param, values, challeng,
        t1 = type$.CborListValue_dynamic;
      switch (A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1), 0, type$.nullable_List_int))) {
        case B.Web3TonRequestMethods_103_ton_sendTransaction_List_empty:
        case B.Web3TonRequestMethods_101_ton_signTransaction_List_empty:
          param = A.Web3TonSendTransaction_Web3TonSendTransaction$deserialize(bytes, hex, object);
          break;
        case B.Web3TonRequestMethods_102_ton_signMessage_List_empty:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          challeng = A.ExtractCborList_elementAt(values, 2, type$.List_int);
          param = new A.Web3TonSignMessage(A.Web3TonChainAccount_Web3TonChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic)), A.BytesUtils_toHexString(challeng, true, "0x"), A.ExtractCborList_elementAt(values, 3, type$.nullable_String));
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      if (!RESPONSE._eval$1("Web3TonRequestParam<0>")._is(param))
        throw A.wrapException(B.Web3RequestException_ce8);
      return param;
    },
    Web3TonRequestParam: function Web3TonRequestParam() {
    },
    Web3TonSignMessage: function Web3TonSignMessage(t0, t1, t2) {
      this.accessAccount = t0;
      this.challeng = t1;
      this.content = t2;
    },
    Web3TonSendTransaction_Web3TonSendTransaction(account, messages, method, validUntil) {
      var t1;
      switch (method) {
        case B.Web3TonRequestMethods_103_ton_sendTransaction_List_empty:
        case B.Web3TonRequestMethods_101_ton_signTransaction_List_empty:
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      t1 = messages.length;
      if (t1 === 0 || t1 > 4)
        throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters("Invalid transaction messages. one to four message entries are required."));
      type$.Web3TonRequestMethods._as(method);
      return new A.Web3TonSendTransaction(account, validUntil, A.List_List$unmodifiable(messages, type$.Web3TonTransactionMessage), method);
    },
    Web3TonSendTransaction_Web3TonSendTransaction$deserialize(bytes, hex, object) {
      var t3, t4,
        t1 = type$.CborListValue_dynamic,
        values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1),
        method = A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAs(values, 0, type$.nullable_List_int)),
        t2 = A.Web3TonChainAccount_Web3TonChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic));
      t1 = A.ExtractCborList_elementAs(values, 2, t1).value;
      t3 = A._arrayInstanceType(t1)._eval$1("CastList<1,CborTagValue<@>>");
      t4 = t3._eval$1("MappedListIterable<ListBase.E,Web3TonTransactionMessage>");
      t1 = A.List_List$_of(new A.MappedListIterable(new A.CastList(t1, t3), t3._eval$1("Web3TonTransactionMessage(ListBase.E)")._as(new A.Web3TonSendTransaction_Web3TonSendTransaction$deserialize_closure()), t4), t4._eval$1("ListIterable.E"));
      return A.Web3TonSendTransaction_Web3TonSendTransaction(t2, t1, method, A.ExtractCborList_elementAt(values, 3, type$.int));
    },
    Web3TonTransactionMessage: function Web3TonTransactionMessage(t0, t1, t2, t3) {
      var _ = this;
      _.address = t0;
      _.amount = t1;
      _.stateInit = t2;
      _.payload = t3;
    },
    Web3TonSendTransactionResponse: function Web3TonSendTransactionResponse(t0, t1) {
      this.message = t0;
      this.txHash = t1;
    },
    Web3TonSendTransaction: function Web3TonSendTransaction(t0, t1, t2, t3) {
      var _ = this;
      _.accessAccount = t0;
      _.validUntil = t1;
      _.messages = t2;
      _.method = t3;
    },
    Web3TonSendTransaction_Web3TonSendTransaction$deserialize_closure: function Web3TonSendTransaction_Web3TonSendTransaction$deserialize_closure() {
    },
    Web3TonSendTransaction_toCbor_closure: function Web3TonSendTransaction_toCbor_closure() {
    },
    _Web3TonTransactionMessage_Object_CborSerializable: function _Web3TonTransactionMessage_Object_CborSerializable() {
    },
    Web3TonChainAccount_Web3TonChainAccount$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_2_3, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = A.TonAddress_TonAddress(A.ExtractCborList_elementAs(values, 1, type$.String)),
        t3 = type$.int,
        t4 = A.ExtractCborList_elementAs(values, 2, t3),
        t5 = A.ExtractCborList_elementAs(values, 3, type$.bool),
        t6 = A.TonAccountContext_TonAccountContext$deserialize(A.ExtractCborList_elementAs(values, 4, type$.CborTagValue_dynamic)),
        t7 = A.ExtractCborList_elementAs(values, 5, type$.List_int),
        t8 = A.TonChain_fromWorkchain(A.ExtractCborList_elementAs(values, 6, type$.nullable_int));
      A.BytesUtils_validateListOfBytes(t7);
      return new A.Web3TonChainAccount(t4, t6, A.List_List$unmodifiable(t7, t3), t8, t1, t2, t5);
    },
    Web3TonChainAuthenticated_Web3TonChainAuthenticated$deserialize(object) {
      var t4, t5,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_11, type$.CborListValue_dynamic),
        t1 = type$.CborTagValue_dynamic,
        t2 = type$.Web3TonChainAccount,
        t3 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 0, t1), new A.Web3TonChainAuthenticated_Web3TonChainAuthenticated$deserialize_closure(), t2);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      t4 = type$.Web3ChainDefaultIdnetifier;
      t5 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 1, t1), new A.Web3TonChainAuthenticated_Web3TonChainAuthenticated$deserialize_closure0(), t4);
      t5 = A.List_List$_of(t5, t5.$ti._eval$1("ListIterable.E"));
      t1 = A.Web3ChainDefaultIdnetifier_Web3ChainDefaultIdnetifier$deserialize(A.ExtractCborList_elementAs(values, 2, t1));
      return new A.Web3TonChainAuthenticated(A.List_List$unmodifiable(t5, t4), t1, B.NetworkType_9gG, A.List_List$unmodifiable(t3, t2));
    },
    Web3TonChainAccount: function Web3TonChainAccount(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.id = t0;
      _.accountContext = t1;
      _.publicKey = t2;
      _.network = t3;
      _.keyIndex = t4;
      _.address = t5;
      _._defaultAddress = t6;
    },
    Web3TonChainAuthenticated: function Web3TonChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3TonChainAuthenticated_Web3TonChainAuthenticated$deserialize_closure: function Web3TonChainAuthenticated_Web3TonChainAuthenticated$deserialize_closure() {
    },
    Web3TonChainAuthenticated_Web3TonChainAuthenticated$deserialize_closure0: function Web3TonChainAuthenticated_Web3TonChainAuthenticated$deserialize_closure0() {
    },
    Web3TronRequestMethods_fromId(id) {
      return B.JSArray_methods.firstWhere$2$orElse($.Web3TronRequestMethods_values, new A.Web3TronRequestMethods_fromId_closure(id), new A.Web3TronRequestMethods_fromId_closure0());
    },
    Web3TronRequestMethods_fromName($name) {
      return A.QuickImutableList_firstWhereOrNull($.Web3TronRequestMethods_values, new A.Web3TronRequestMethods_fromName_closure($name), type$.Web3TronRequestMethods);
    },
    Web3TronRequestMethods: function Web3TronRequestMethods(t0, t1, t2) {
      this.id = t0;
      this.name = t1;
      this.methodsName = t2;
    },
    Web3TronRequestMethods_fromId_closure: function Web3TronRequestMethods_fromId_closure(t0) {
      this.id = t0;
    },
    Web3TronRequestMethods_fromId_closure0: function Web3TronRequestMethods_fromId_closure0() {
    },
    Web3TronRequestMethods_fromName_closure: function Web3TronRequestMethods_fromName_closure(t0) {
      this.name = t0;
    },
    Web3TronRequestParam_Web3TronRequestParam$deserialize(bytes, hex, object, RESPONSE) {
      var values, t2, t3, param, challeng,
        t1 = type$.CborListValue_dynamic;
      switch (A.Web3NetworkRequestMethods_fromTag(A.ExtractCborList_elementAt(A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1), 0, type$.nullable_List_int))) {
        case B.Web3TronRequestMethods_ndr:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          t1 = A.ExtractCborList_elementAt(values, 1, type$.List_int);
          t2 = A.ExtractCborList_elementAt(values, 2, type$.nullable_String);
          t3 = A.Web3TronChainAccount_Web3TronChainAccount$deserialize(A.ExtractCborList_elementAs(values, 3, type$.CborTagValue_dynamic));
          A.BytesUtils_validateListOfBytes(t1);
          param = new A.Web3TronSendTransaction(A.List_List$unmodifiable(t1, type$.int), t2, t3);
          break;
        case B.Web3TronRequestMethods_102_tron_signMessageV2_List_empty:
          values = A.CborSerializable_cborTagValue(bytes, hex, object, B.List_100_12, t1);
          challeng = A.ExtractCborList_elementAt(values, 2, type$.List_int);
          param = new A.Web3TronSignMessageV2(A.Web3TronChainAccount_Web3TronChainAccount$deserialize(A.ExtractCborList_elementAs(values, 1, type$.CborTagValue_dynamic)), A.BytesUtils_toHexString(challeng, true, "0x"), A.ExtractCborList_elementAt(values, 3, type$.nullable_String));
          break;
        default:
          throw A.wrapException(B.Web3RequestException_ce8);
      }
      if (!RESPONSE._eval$1("Web3TronRequestParam<0>")._is(param))
        throw A.wrapException(B.Web3RequestException_ce8);
      return param;
    },
    Web3TronRequestParam: function Web3TronRequestParam() {
    },
    Web3TronSignMessageV2: function Web3TronSignMessageV2(t0, t1, t2) {
      this.accessAccount = t0;
      this.challeng = t1;
      this.content = t2;
    },
    Web3TronSendTransaction: function Web3TronSendTransaction(t0, t1, t2) {
      this.transaction = t0;
      this.txId = t1;
      this.accessAccount = t2;
    },
    Web3TronChainAccount_Web3TronChainAccount$deserialize(object) {
      var values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_2_1, type$.CborListValue_dynamic),
        t1 = A.AddressDerivationIndex_AddressDerivationIndex$deserialize(A.ExtractCborList_getCborTag(values, 0)),
        t2 = A.TronAddress_TronAddress(A.ExtractCborList_elementAt(values, 1, type$.String)),
        t3 = type$.int,
        t4 = A.ExtractCborList_elementAt(values, 2, t3),
        t5 = A.ExtractCborList_elementAt(values, 3, type$.bool),
        t6 = A.ExtractCborList_elementAs(values, 4, type$.nullable_List_int);
      if (t6 == null)
        t3 = null;
      else {
        A.BytesUtils_validateListOfBytes(t6);
        t3 = A.List_List$unmodifiable(t6, t3);
      }
      return new A.Web3TronChainAccount(t4, t3, t1, t2, t5);
    },
    Web3TronChainIdnetifier_Web3TronChainIdnetifier$deserialize(object) {
      var t3, t4,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_161_0_4, type$.CborListValue_dynamic),
        t1 = type$.int,
        t2 = A.ExtractCborList_elementAs(values, 0, t1);
      t1 = A.ExtractCborList_elementAs(values, 1, t1);
      t3 = type$.String;
      t4 = A.ExtractCborList_elementAs(values, 2, t3);
      return new A.Web3TronChainIdnetifier(t2, A.ExtractCborList_elementAs(values, 3, t3), t4, t1);
    },
    Web3TronChainAuthenticated_Web3TronChainAuthenticated$deserialize(object) {
      var t4, t5,
        values = A.CborSerializable_cborTagValue(null, null, object, B.List_80_0_4, type$.CborListValue_dynamic),
        t1 = type$.CborTagValue_dynamic,
        t2 = type$.Web3TronChainAccount,
        t3 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 0, t1), new A.Web3TronChainAuthenticated_Web3TronChainAuthenticated$deserialize_closure(), t2);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      t4 = type$.Web3TronChainIdnetifier;
      t5 = J.map$1$1$ax(A.ExtractCborList_elementAsListOf(values, 1, t1), new A.Web3TronChainAuthenticated_Web3TronChainAuthenticated$deserialize_closure0(), t4);
      t5 = A.List_List$_of(t5, t5.$ti._eval$1("ListIterable.E"));
      t1 = A.Web3TronChainIdnetifier_Web3TronChainIdnetifier$deserialize(A.ExtractCborList_elementAs(values, 2, t1));
      return new A.Web3TronChainAuthenticated(A.List_List$unmodifiable(t5, t4), t1, B.NetworkType_KPy, A.List_List$unmodifiable(t3, t2));
    },
    Web3TronChainAccount: function Web3TronChainAccount(t0, t1, t2, t3, t4) {
      var _ = this;
      _.id = t0;
      _.publicKey = t1;
      _.keyIndex = t2;
      _.address = t3;
      _._defaultAddress = t4;
    },
    Web3TronChainIdnetifier: function Web3TronChainIdnetifier(t0, t1, t2, t3) {
      var _ = this;
      _.chainId = t0;
      _.solidityNode = t1;
      _.fullNode = t2;
      _.id = t3;
    },
    Web3TronChainAuthenticated: function Web3TronChainAuthenticated(t0, t1, t2, t3) {
      var _ = this;
      _.networks = t0;
      _.currentNetwork = t1;
      _.networkType = t2;
      _.accounts = t3;
    },
    Web3TronChainAuthenticated_Web3TronChainAuthenticated$deserialize_closure: function Web3TronChainAuthenticated_Web3TronChainAuthenticated$deserialize_closure() {
    },
    Web3TronChainAuthenticated_Web3TronChainAuthenticated$deserialize_closure0: function Web3TronChainAuthenticated_Web3TronChainAuthenticated$deserialize_closure0() {
    },
    Web3ValidatorUtils_parse(method, onFailed, onParse, value, $T, $V) {
      var v, t1, exception;
      if (value == null && $T._is(null)) {
        $T._as(null);
        return null;
      }
      v = null;
      try {
        v = onParse.call$1($V._as(value));
        if (v == null && $T._is(null)) {
          $T._as(null);
          return null;
        }
        if (v != null) {
          t1 = v;
          return t1;
        }
      } catch (exception) {
      }
      throw A.wrapException(onFailed.call$0());
    },
    Web3ValidatorUtils_praseObject(json, key, method, onParse, $T, $V) {
      var value, obj,
        t1 = json.$index(0, key);
      if (t1 == null)
        t1 = json.$index(0, A.StrUtils_toSnakeCase(key));
      value = t1 == null ? null : J.toString$0$(t1);
      if (value == null && $T._is(null)) {
        $T._as(null);
        return null;
      }
      if (!$V._is(value))
        throw A.wrapException(A.throwExpression(A.Web3RequestExceptionConst_failedToParse(key)));
      obj = A.MethodUtils_nullOnException(new A.Web3ValidatorUtils_praseObject_closure(onParse, value, $V, $T), $T);
      if (obj != null)
        return obj;
      throw A.wrapException(A.throwExpression(A.Web3RequestExceptionConst_failedToParse(key)));
    },
    Web3ValidatorUtils_parseAddress(addressName, json, key, method, onParse, $T) {
      var value, addr, exception,
        t1 = json.$index(0, key);
      if (t1 == null)
        t1 = json.$index(0, A.StrUtils_toSnakeCase(key));
      value = t1 == null ? null : J.toString$0$(t1);
      if (value == null && $T._is(null)) {
        $T._as(null);
        return null;
      }
      if (typeof value != "string")
        throw A.wrapException(A.Web3RequestExceptionConst_invalidStringArgrument(addressName));
      addr = null;
      try {
        addr = onParse.call$1(value);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
      }
      if (addr != null)
        return addr;
      throw A.wrapException(A.Web3RequestException$(-32602, null, "Invalid method parameters. Invalid address argument provided for " + addressName + ".", "WEB3-0030"));
    },
    Web3ValidatorUtils_parseHex(json, key, method, $T) {
      var value,
        t1 = json.$index(0, key);
      if (t1 == null)
        t1 = json.$index(0, A.StrUtils_toSnakeCase(key));
      value = t1 == null ? null : J.toString$0$(t1);
      if ($T._is(null) && value == null) {
        $T._as(null);
        return null;
      }
      if (value != null) {
        t1 = $.$get$StringUtils__hexBytesRegex();
        t1 = t1._nativeRegExp.test(value);
      } else
        t1 = false;
      if (t1) {
        t1 = B.JSString_methods.startsWith$1(value, "0x");
        if (t1) {
          if (A.createRuntimeType($T) === B.Type_String_AXU) {
            t1 = $T._as(A.StringUtils_strip0x(value).toLowerCase());
            return t1;
          }
          return $T._as(A.BytesUtils_fromHexString(value, false));
        }
      }
      throw A.wrapException(A.Web3RequestException$(-32602, null, "Invalid method parameters. Invalid hex string for " + key + ".", "WEB3-0040"));
    },
    Web3ValidatorUtils_parseBase64(json, key, method, $T) {
      var value, toBytes, t2,
        t1 = json.$index(0, key);
      if (t1 == null)
        t1 = json.$index(0, A.StrUtils_toSnakeCase(key));
      value = t1 == null ? null : J.toString$0$(t1);
      t1 = $T._is(null);
      if (t1 && value == null) {
        $T._as(null);
        return null;
      }
      if ((value == null ? "" : value).length === 0)
        toBytes = A._setArrayType([], type$.JSArray_int);
      else {
        t2 = A.StringUtils_tryEncode(value, B.StringEncoding_2);
        toBytes = t2 == null ? A.StringUtils_tryEncode(value, B.StringEncoding_3) : t2;
      }
      if (toBytes != null) {
        if (A.createRuntimeType($T) === B.Type_String_AXU) {
          if (value.length === 0 && t1) {
            $T._as(null);
            return null;
          }
          return $T._as(value);
        }
        return $T._as(toBytes);
      }
      throw A.wrapException(A.Web3RequestException$(-32602, null, "Invalid method parameters. Invalid base64 string for " + key + ".", "WEB3-0040"));
    },
    Web3ValidatorUtils_parseBase58(json, key, method, $T) {
      var value, toBytes,
        t1 = json.$index(0, key);
      if (t1 == null)
        t1 = json.$index(0, A.StrUtils_toSnakeCase(key));
      value = t1 == null ? null : J.toString$0$(t1);
      t1 = $T._is(null);
      if (t1 && value == null) {
        $T._as(null);
        return null;
      }
      toBytes = A.MethodUtils_nullOnException(new A.Web3ValidatorUtils_parseBase58_closure(value), type$.List_int);
      if (toBytes != null) {
        if (A.createRuntimeType($T) === B.Type_String_AXU) {
          if (value.length === 0 && t1) {
            $T._as(null);
            return null;
          }
          return $T._as(value);
        }
        return $T._as(toBytes);
      }
      throw A.wrapException(A.Web3RequestException$(-32602, null, "Invalid method parameters. Invalid base58 string for " + key + ".", "WEB3-0040"));
    },
    Web3ValidatorUtils_parseList(allowEmpty, json, key, $length, method, $T, $E) {
      var t1, toList, t2,
        _s57_ = "Invalid method parameters. Invalid list argument provided",
        _s9_ = "WEB3-0050",
        value = json.$index(0, key);
      if (value == null)
        value = json.$index(0, A.StrUtils_toSnakeCase(key));
      t1 = $T._is(null);
      if (t1 && value == null) {
        $T._as(null);
        return null;
      }
      toList = A.MethodUtils_nullOnException(new A.Web3ValidatorUtils_parseList_closure(value, $E), $E._eval$1("List<0>"));
      if (toList != null)
        t2 = $length == null || $length === J.get$length$asx(toList);
      else
        t2 = false;
      if (t2)
        if (J.get$isEmpty$asx(toList)) {
          if (t1) {
            $T._as(null);
            return null;
          }
          if (allowEmpty)
            return $T._as(toList);
          throw A.wrapException(A.Web3RequestException$(-32602, null, _s57_ + (" for " + key) + ".", _s9_));
        } else
          return $T._as(toList);
      throw A.wrapException(A.Web3RequestException$(-32602, null, _s57_ + (" for " + key) + ".", _s9_));
    },
    Web3ValidatorUtils_parseMap(json, key, method, $T) {
      var toMap,
        value = json.$index(0, key);
      if (value == null)
        value = json.$index(0, A.StrUtils_toSnakeCase(key));
      if ($T._is(null) && value == null) {
        $T._as(null);
        return null;
      }
      toMap = A.MethodUtils_nullOnException(new A.Web3ValidatorUtils_parseMap_closure(value), type$.Map_String_dynamic);
      if (toMap != null)
        return $T._as(toMap);
      throw A.wrapException(A.Web3RequestException$(-32602, null, "Invalid method parameters. Invalid map argument provided" + (" for " + key) + ".", "WEB3-0060"));
    },
    Web3ValidatorUtils_parseString(json, key, method, $T) {
      var value = json.$index(0, key);
      if (value == null)
        value = json.$index(0, A.StrUtils_toSnakeCase(key));
      if ($T._is(null) && value == null) {
        $T._as(null);
        return null;
      }
      if (value != null && typeof value == "string")
        return $T._as(value);
      throw A.wrapException(A.Web3RequestExceptionConst_invalidStringArgrument(key));
    },
    Web3ValidatorUtils_parseDouble(json, key, method, $T) {
      var ratinal,
        value = json.$index(0, key);
      if (value == null)
        value = json.$index(0, A.StrUtils_toSnakeCase(key));
      if ($T._is(null) && value == null) {
        $T._as(null);
        return null;
      }
      ratinal = A.BigRational_tryParseDecimaal(J.toString$0$(value));
      if (ratinal != null)
        return $T._as(ratinal);
      throw A.wrapException(A.Web3RequestExceptionConst_invalidNumbers(key));
    },
    Web3ValidatorUtils_parseBigInt(json, key, method, sign, $T) {
      var toBigInt,
        value = json.$index(0, key);
      if (value == null)
        value = json.$index(0, A.StrUtils_toSnakeCase(key));
      if ($T._is(null) && value == null) {
        $T._as(null);
        return null;
      }
      toBigInt = A.BigintUtils_tryParse(value);
      if (toBigInt != null)
        if (sign || !toBigInt._isNegative)
          return $T._as(toBigInt);
      throw A.wrapException(A.Web3RequestExceptionConst_invalidNumbers(key));
    },
    Web3ValidatorUtils_containsOnlyOnce(json, keys, method, $name) {
      var t1, key, _i, i, t2, _null = null;
      for (t1 = keys.length, key = _null, _i = 0; _i < keys.length; keys.length === t1 || (0, A.throwConcurrentModificationError)(keys), ++_i) {
        i = keys[_i];
        t2 = json.containsKey$1(i);
        if (t2 === true) {
          if (key != null) {
            key = _null;
            break;
          }
          key = i;
        }
      }
      if (key != null)
        return key;
      throw A.wrapException(A.Web3RequestException$(-32602, _null, "Invalid method parameters. Invalid " + $name + " object. The object must contain one of the following keys: " + B.JSArray_methods.join$1(keys, ", "), "WEB3-0070"));
    },
    Web3ValidatorUtils_parseInt(json, key, method, sign, $T) {
      var toInt,
        value = json.$index(0, key);
      if (value == null)
        value = json.$index(0, A.StrUtils_toSnakeCase(key));
      if ($T._is(null) && value == null) {
        $T._as(null);
        return null;
      }
      toInt = A.IntUtils_tryParse(value);
      if (toInt != null)
        if (sign || !B.JSInt_methods.get$isNegative(toInt))
          return $T._as(toInt);
      throw A.wrapException(A.Web3RequestExceptionConst_invalidNumbers(key));
    },
    Web3ValidatorUtils_parseBool(json, key, method, $T) {
      var value = json.$index(0, key);
      if (value == null)
        value = json.$index(0, A.StrUtils_toSnakeCase(key));
      if ($T._is(null) && value == null) {
        $T._as(null);
        return null;
      }
      if (A._isBool(value))
        return $T._as(value);
      throw A.wrapException(A.Web3RequestException$(-32602, null, "Invalid method parameters. Invalid boolean argument provided for " + key + ".", "WEB3-0020"));
    },
    Web3ValidatorUtils_praseObject_closure: function Web3ValidatorUtils_praseObject_closure(t0, t1, t2, t3) {
      var _ = this;
      _.onParse = t0;
      _.value = t1;
      _.V = t2;
      _.T = t3;
    },
    Web3ValidatorUtils_parseBase58_closure: function Web3ValidatorUtils_parseBase58_closure(t0) {
      this.value = t0;
    },
    Web3ValidatorUtils_parseList_closure: function Web3ValidatorUtils_parseList_closure(t0, t1) {
      this.value = t0;
      this.E = t1;
    },
    Web3ValidatorUtils_parseMap_closure: function Web3ValidatorUtils_parseMap_closure(t0) {
      this.value = t0;
    },
    _parseUri(uri) {
      return uri;
    },
    _validateArgList(method, args) {
      var numArgs, i, numArgs0, message, t1, t2, t3, t4;
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new A.StringBuffer("");
        t1 = "" + (method + "(");
        message._contents = t1;
        t2 = A._arrayInstanceType(args);
        t3 = t2._eval$1("SubListIterable<1>");
        t4 = new A.SubListIterable(args, 0, numArgs, t3);
        t4.SubListIterable$3(args, 0, numArgs, t2._precomputed1);
        t3 = t1 + new A.MappedListIterable(t4, t3._eval$1("String(ListIterable.E)")._as(new A._validateArgList_closure()), t3._eval$1("MappedListIterable<ListIterable.E,String>")).join$1(0, ", ");
        message._contents = t3;
        message._contents = t3 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw A.wrapException(A.ArgumentError$(message.toString$0(0), null));
      }
    },
    Context: function Context(t0, t1) {
      this.style = t0;
      this._context$_current = t1;
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    InternalStyle: function InternalStyle() {
    },
    ParsedPath_ParsedPath$parse(path, style) {
      var t1, parts, separators, t2, start, i,
        root = style.getRoot$1(path);
      style.isRootRelative$1(path);
      if (root != null)
        path = B.JSString_methods.substring$1(path, root.length);
      t1 = type$.JSArray_String;
      parts = A._setArrayType([], t1);
      separators = A._setArrayType([], t1);
      t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t2 = style.isSeparator$1(path.charCodeAt(0));
      } else
        t2 = false;
      if (t2) {
        if (0 >= t1)
          return A.ioore(path, 0);
        B.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        B.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (i = start; i < t1; ++i)
        if (style.isSeparator$1(path.charCodeAt(i))) {
          B.JSArray_methods.add$1(parts, B.JSString_methods.substring$2(path, start, i));
          B.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        B.JSArray_methods.add$1(parts, B.JSString_methods.substring$1(path, start));
        B.JSArray_methods.add$1(separators, "");
      }
      return new A.ParsedPath(style, root, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
    },
    PathException$(message) {
      return new A.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    Style__getPlatformStyle() {
      var _null = null;
      if (A.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      if (!B.JSString_methods.endsWith$1(A.Uri_base().get$path(), "/"))
        return $.$get$Style_url();
      if (A._Uri__Uri(_null, "a/b", _null, _null, _null).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    },
    PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    BaseSubstrateAddress_BaseSubstrateAddress(address) {
      var t2, decBytes, t3, ss58Format, ss58FormatLen, t4, checkSumLength, dataBytes, checksumBytes, prefixAndData, h, digest, checksumBytesGot, _null = null,
        t1 = $.$get$StringUtils__hexBytesRegex();
      if (t1._nativeRegExp.test(address))
        return A.SubstrateEthereumAddress_SubstrateEthereumAddress(address);
      t1 = type$.dynamic;
      t2 = type$.int;
      A.AddrKeyValidator_nullOrValidateAddressArgs(type$.Map_String_dynamic._as(A.LinkedHashMap_LinkedHashMap$_literal(["ss58_format", null], type$.String, t1)), "ss58_format", t2);
      decBytes = A.Base58Decoder_decode(address, B.Base58Alphabets_0);
      t3 = decBytes.length;
      if (0 >= t3)
        return A.ioore(decBytes, 0);
      ss58Format = decBytes[0];
      if ((ss58Format & 64) !== 0) {
        if (1 >= t3)
          return A.ioore(decBytes, 1);
        t3 = decBytes[1];
        ss58Format = ((ss58Format & 63) << 2 | B.JSInt_methods._shrOtherPositive$1(t3, 6) | (t3 & 63) << 8) >>> 0;
        ss58FormatLen = 2;
      } else
        ss58FormatLen = 1;
      if (B.JSArray_methods.contains$1(B.List_46_47, ss58Format))
        A.throwExpression(A.ArgumentException$("Invalid SS58 format (" + ss58Format + ")", _null));
      t3 = decBytes.length;
      t4 = type$.JSArray_int;
      checkSumLength = B.JSArray_methods.contains$1(A._setArrayType([33, 34], t4), t3 - ss58FormatLen) ? 2 : 1;
      dataBytes = A.List_List$from(B.JSArray_methods.sublist$2(decBytes, ss58FormatLen, decBytes.length - checkSumLength), true, t2);
      checksumBytes = A.List_List$unmodifiable(B.JSArray_methods.sublist$1(decBytes, decBytes.length - checkSumLength), t2);
      t3 = B.JSArray_methods.sublist$2(decBytes, 0, decBytes.length - checkSumLength);
      t1 = A.List_List$_of($.$get$_Ss58Const_checksumPrefix(), t1);
      B.JSArray_methods.addAll$1(t1, t3);
      prefixAndData = A.List_List$from(t1, true, t2);
      h = A.BLAKE2b$(new A.Blake2bConfig(_null, _null), 64);
      h.update$1(prefixAndData);
      digest = h.digest$0();
      A.zero(h._vtmp);
      A.zero(h._mtmp);
      A.zero(h._hash$_state);
      A.zero(h._hash$_buffer);
      t1 = h.__BLAKE2b__initialState_A;
      t1 === $ && A.throwLateFieldNI("_initialState");
      A.zero(t1);
      t1 = h._paddedKey;
      if (t1 != null)
        A.zero(t1);
      h._bufferLength = 0;
      A.zero(h._ctr);
      A.zero(h._flag);
      h._hash$_finished = h._lastNode = false;
      t1 = t3.length;
      checksumBytesGot = B.JSArray_methods.sublist$2(digest, 0, B.JSArray_methods.contains$1(A._setArrayType([33, 34], t4), t1) ? 2 : 1);
      if (!A.BytesUtils_bytesEqual(checksumBytesGot, checksumBytes))
        A.throwExpression(new A.SS58ChecksumError("Invalid checksum (expected " + A.BytesUtils_toHexString(checksumBytesGot, true, _null) + ", got " + A.BytesUtils_toHexString(checksumBytes, true, _null) + ")", _null));
      t1 = dataBytes.length;
      if (t1 !== 32)
        A.throwExpression(A.AddressConverterException$("Invalid address bytes. (expected 32, got " + t1 + ")", _null));
      return new A.SubstrateAddress(ss58Format, address);
    },
    SubstrateEthereumAddress_SubstrateEthereumAddress(address) {
      var checksumAddress, e, exception, t1;
      try {
        checksumAddress = A.EthAddrUtils_toChecksumAddress(address);
        return new A.SubstrateEthereumAddress(checksumAddress);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.DartSubstratePluginException$("Invalid moonbeam address.", A.LinkedHashMap_LinkedHashMap$_literal(["address", address, "error", J.toString$0$(e)], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    BaseSubstrateAddress: function BaseSubstrateAddress() {
    },
    SubstrateAddress: function SubstrateAddress(t0, t1) {
      this.ss58Format = t0;
      this.address = t1;
    },
    SubstrateEthereumAddress: function SubstrateEthereumAddress(t0) {
      this.address = t0;
    },
    DartSubstratePluginException$(message, details) {
      return new A.DartSubstratePluginException(message, details);
    },
    DartSubstratePluginException: function DartSubstratePluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    SubstrateMetadata: function SubstrateMetadata() {
    },
    ScaleTypeDef: function ScaleTypeDef() {
    },
    MetadataException$(message, details) {
      return new A.MetadataException(message, details);
    },
    MetadataException: function MetadataException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    LatestMetadataInterface: function LatestMetadataInterface() {
    },
    PrimitiveTypes_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_6OW, new A.PrimitiveTypes_fromValue_closure(value), new A.PrimitiveTypes_fromValue_closure0(value));
    },
    PrimitiveTypes: function PrimitiveTypes(t0) {
      this.name = t0;
    },
    PrimitiveTypes_fromValue_closure: function PrimitiveTypes_fromValue_closure(t0) {
      this.value = t0;
    },
    PrimitiveTypes_fromValue_closure0: function PrimitiveTypes_fromValue_closure0(t0) {
      this.value = t0;
    },
    UnsupportedMetadata: function UnsupportedMetadata(t0) {
      this.bytes = t0;
    },
    Si0TypeDefPrimitive: function Si0TypeDefPrimitive() {
    },
    Si0TypeDefPrimitive$deserializeJson_closure: function Si0TypeDefPrimitive$deserializeJson_closure() {
    },
    Si1Field$deserializeJson(json) {
      var t1 = A._asStringQ(json.$index(0, "name")),
        t2 = J.cast$1$0$ax(type$.List_dynamic._as(json.$index(0, "docs")), type$.String);
      return new A.Si1Field(t1, A._asInt(json.$index(0, "type")), A._asStringQ(json.$index(0, "typeName")), t2);
    },
    Si1Field: function Si1Field(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.type = t1;
      _.typeName = t2;
      _.docs = t3;
    },
    Si1TypeDefHistoricMetaCompat: function Si1TypeDefHistoricMetaCompat(t0) {
      this.type = t0;
    },
    Si1Type$deserializeJson(json) {
      var t1 = type$.List_String,
        t2 = t1._as(json.$index(0, "path")),
        t3 = J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "params")), new A.Si1Type$deserializeJson_closure(), type$.Si1TypeParameter);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      t1 = t1._as(json.$index(0, "docs"));
      return new A.Si1Type(t2, A.Si1TypeDef_Si1TypeDef$deserializeJson(type$.Map_String_dynamic._as(json.$index(0, "def")), type$.dynamic), t3, t1);
    },
    Si1Type: function Si1Type(t0, t1, t2, t3) {
      var _ = this;
      _.path = t0;
      _.def = t1;
      _.params = t2;
      _.docs = t3;
    },
    Si1Type$deserializeJson_closure: function Si1Type$deserializeJson_closure() {
    },
    Si1Type_scaleJsonSerialize_closure: function Si1Type_scaleJsonSerialize_closure() {
    },
    Si1TypeDefsIndexesConst_fromValue($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_pYy, new A.Si1TypeDefsIndexesConst_fromValue_closure($name), new A.Si1TypeDefsIndexesConst_fromValue_closure0($name));
    },
    Si1TypeDef_Si1TypeDef$deserializeJson(json, $T) {
      var def, t1, _s4_ = "type",
        key = A.Si1TypeDefsIndexesConst_fromValue(A.SubstrateEnumSerializationUtils_getScaleEnumKey(json, null, null));
      $label0$0: {
        if (B.Si1TypeDefsIndexesConst_Composite.$eq(0, key)) {
          def = A.Si1TypeDefComposite$deserializeJson(A.SubstrateEnumSerializationUtils_getScaleEnumValue(json, key.name, type$.Map_String_dynamic));
          break $label0$0;
        }
        if (B.Si1TypeDefsIndexesConst_Variant.$eq(0, key)) {
          def = A.Si1TypeDefVariant$deserializeJson(A.SubstrateEnumSerializationUtils_getScaleEnumValue(json, key.name, type$.Map_String_dynamic));
          break $label0$0;
        }
        if (B.Si1TypeDefsIndexesConst_Array.$eq(0, key)) {
          t1 = A.SubstrateEnumSerializationUtils_getScaleEnumValue(json, key.name, type$.Map_String_dynamic);
          def = new A.Si1TypeDefArray(A._asInt(t1.$index(0, "len")), A._asInt(t1.$index(0, _s4_)));
          break $label0$0;
        }
        if (B.Si1TypeDefsIndexesConst_Tuple.$eq(0, key)) {
          def = new A.Si1TypeDefTuple(A.List_List$unmodifiable(A.SubstrateEnumSerializationUtils_getScaleEnumValue(json, key.name, type$.List_int), type$.int));
          break $label0$0;
        }
        if (B.Si1TypeDefsIndexesConst_Primitive.$eq(0, key)) {
          def = A.Si1TypeDefPrimitive$deserializeJson(A.SubstrateEnumSerializationUtils_getScaleEnumValue(json, key.name, type$.Map_String_dynamic));
          break $label0$0;
        }
        if (B.Si1TypeDefsIndexesConst_Sequence.$eq(0, key)) {
          def = new A.Si1TypeDefSequence(A._asInt(A.SubstrateEnumSerializationUtils_getScaleEnumValue(json, key.name, type$.Map_String_dynamic).$index(0, _s4_)));
          break $label0$0;
        }
        if (B.Si1TypeDefsIndexesConst_Compact.$eq(0, key)) {
          def = new A.Si1TypeDefCompact(A._asInt(A.SubstrateEnumSerializationUtils_getScaleEnumValue(json, key.name, type$.Map_String_dynamic).$index(0, _s4_)));
          break $label0$0;
        }
        if (B.Si1TypeDefsIndexesConst_BitSequence.$eq(0, key)) {
          t1 = A.SubstrateEnumSerializationUtils_getScaleEnumValue(json, key.name, type$.Map_String_dynamic);
          def = new A.Si1TypeDefBitSequence(A._asInt(t1.$index(0, "bitStoreType")), A._asInt(t1.$index(0, "bitOrderType")));
          break $label0$0;
        }
        def = new A.Si1TypeDefHistoricMetaCompat(A.SubstrateEnumSerializationUtils_getScaleEnumValue(json, key.name, type$.String));
        break $label0$0;
      }
      return $T._eval$1("Si1TypeDef<0>")._as(def);
    },
    Si1TypeDefsIndexesConst: function Si1TypeDefsIndexesConst(t0) {
      this.name = t0;
    },
    Si1TypeDefsIndexesConst_fromValue_closure: function Si1TypeDefsIndexesConst_fromValue_closure(t0) {
      this.name = t0;
    },
    Si1TypeDefsIndexesConst_fromValue_closure0: function Si1TypeDefsIndexesConst_fromValue_closure0(t0) {
      this.name = t0;
    },
    Si1TypeDef: function Si1TypeDef() {
    },
    Si1TypeDefArray: function Si1TypeDefArray(t0, t1) {
      this.len = t0;
      this.type = t1;
    },
    Si1TypeDefBitSequence: function Si1TypeDefBitSequence(t0, t1) {
      this.bitStoreType = t0;
      this.bitOrderType = t1;
    },
    Si1TypeDefCompact: function Si1TypeDefCompact(t0) {
      this.type = t0;
    },
    Si1TypeDefComposite$deserializeJson(json) {
      var t1 = J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "fields")), new A.Si1TypeDefComposite$deserializeJson_closure(), type$.Si1Field);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return new A.Si1TypeDefComposite(t1);
    },
    Si1TypeDefComposite: function Si1TypeDefComposite(t0) {
      this.fields = t0;
    },
    Si1TypeDefComposite$deserializeJson_closure: function Si1TypeDefComposite$deserializeJson_closure() {
    },
    Si1TypeDefComposite_scaleJsonSerialize_closure: function Si1TypeDefComposite_scaleJsonSerialize_closure() {
    },
    Si1TypeDefPrimitive$deserializeJson(json) {
      var t1 = type$.MappedListIterable_PrimitiveTypes_String;
      t1 = A.List_List$_of(new A.MappedListIterable(B.List_6OW, type$.String_Function_PrimitiveTypes._as(new A.Si0TypeDefPrimitive$deserializeJson_closure()), t1), t1._eval$1("ListIterable.E"));
      return new A.Si1TypeDefPrimitive(A.PrimitiveTypes_fromValue(A.SubstrateEnumSerializationUtils_getScaleEnumKey(json, null, t1)));
    },
    Si1TypeDefPrimitive: function Si1TypeDefPrimitive(t0) {
      this.type = t0;
    },
    Si1TypeDefSequence: function Si1TypeDefSequence(t0) {
      this.type = t0;
    },
    Si1TypeDefTuple: function Si1TypeDefTuple(t0) {
      this.values = t0;
    },
    Si1TypeDefVariant$deserializeJson(json) {
      return new A.Si1TypeDefVariant(A.List_List$unmodifiable(J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "variants")), new A.Si1TypeDefVariant$deserializeJson_closure(), type$.dynamic), type$.Si1Variant));
    },
    Si1TypeDefVariant: function Si1TypeDefVariant(t0) {
      this.variants = t0;
    },
    Si1TypeDefVariant$deserializeJson_closure: function Si1TypeDefVariant$deserializeJson_closure() {
    },
    Si1TypeDefVariant_scaleJsonSerialize_closure: function Si1TypeDefVariant_scaleJsonSerialize_closure() {
    },
    Si1TypeParameter: function Si1TypeParameter(t0, t1) {
      this.name = t0;
      this.type = t1;
    },
    Si1Variant$deserializeJson(json) {
      var t1 = A._asString(json.$index(0, "name")),
        t2 = A.List_List$unmodifiable(type$.Iterable_dynamic._as(json.$index(0, "docs")), type$.String);
      return new A.Si1Variant(t1, A.List_List$unmodifiable(J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "fields")), new A.Si1Variant$deserializeJson_closure(), type$.dynamic), type$.Si1Field), A._asInt(json.$index(0, "index")), t2);
    },
    Si1Variant: function Si1Variant(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.fields = t1;
      _.index = t2;
      _.docs = t3;
    },
    Si1Variant$deserializeJson_closure: function Si1Variant$deserializeJson_closure() {
    },
    Si1Variant_scaleJsonSerialize_closure: function Si1Variant_scaleJsonSerialize_closure() {
    },
    StorageHasherV11Options_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_gtx, new A.StorageHasherV11Options_fromValue_closure(value), new A.StorageHasherV11Options_fromValue_closure0(value));
    },
    StorageHasherV11Options: function StorageHasherV11Options(t0) {
      this.name = t0;
    },
    StorageHasherV11Options_fromValue_closure: function StorageHasherV11Options_fromValue_closure(t0) {
      this.value = t0;
    },
    StorageHasherV11Options_fromValue_closure0: function StorageHasherV11Options_fromValue_closure0(t0) {
      this.value = t0;
    },
    StorageHasherV11: function StorageHasherV11() {
    },
    StorageHasherV14: function StorageHasherV14(t0) {
      this.option = t0;
    },
    StorageEntryModifierV14: function StorageEntryModifierV14(t0) {
      this.name = t0;
    },
    ExtrinsicMetadataV14$deserializeJson(json) {
      var t1 = A.List_List$unmodifiable(J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "signedExtensions")), new A.ExtrinsicMetadataV14$deserializeJson_closure(), type$.dynamic), type$.SignedExtensionMetadataV14),
        t2 = A._asInt(json.$index(0, "type"));
      return new A.ExtrinsicMetadataV14(A._asInt(json.$index(0, "version")), t2, t1);
    },
    ExtrinsicMetadataV14: function ExtrinsicMetadataV14(t0, t1, t2) {
      this.version = t0;
      this.type = t1;
      this.signedExtensions = t2;
    },
    ExtrinsicMetadataV14$deserializeJson_closure: function ExtrinsicMetadataV14$deserializeJson_closure() {
    },
    ExtrinsicMetadataV14_scaleJsonSerialize_closure: function ExtrinsicMetadataV14_scaleJsonSerialize_closure() {
    },
    MetadataV14$deserializeJson(json) {
      var t1 = type$.Map_String_dynamic,
        t2 = type$.dynamic;
      return new A.MetadataV14(A.PortableRegistryV14$deserializeJson(t1._as(json.$index(0, "lookup"))), A.ConstantMap_ConstantMap$from(A.Map_Map$fromEntries(J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "pallets")), new A.MetadataV14$deserializeJson_closure(), type$.MapEntry_dynamic_dynamic), t2, t2), type$.int, type$.PalletMetadataV14), A.ExtrinsicMetadataV14$deserializeJson(t1._as(json.$index(0, "extrinsic"))), A._asInt(json.$index(0, "type")));
    },
    MetadataV14: function MetadataV14(t0, t1, t2, t3) {
      var _ = this;
      _.lookup = t0;
      _.pallets = t1;
      _.extrinsic = t2;
      _.type = t3;
    },
    MetadataV14$deserializeJson_closure: function MetadataV14$deserializeJson_closure() {
    },
    MetadataV14_scaleJsonSerialize_closure: function MetadataV14_scaleJsonSerialize_closure() {
    },
    _MetadataV14_SubstrateMetadata_LatestMetadataInterface: function _MetadataV14_SubstrateMetadata_LatestMetadataInterface() {
    },
    PalletCallMetadata: function PalletCallMetadata() {
    },
    PalletCallMetadataV14: function PalletCallMetadataV14(t0) {
      this.type = t0;
    },
    PalletConstantMetadataV14$deserializeJson(json) {
      var t6,
        t1 = A._asString(json.$index(0, "name")),
        t2 = A._asInt(json.$index(0, "type")),
        t3 = type$.List_dynamic,
        t4 = type$.int,
        t5 = J.cast$1$0$ax(t3._as(json.$index(0, "value")), t4);
      A.BytesUtils_validateListOfBytes(t5);
      t6 = type$.String;
      return new A.PalletConstantMetadataV14(t1, t2, A.List_List$unmodifiable(t5, t4), A.List_List$unmodifiable(J.cast$1$0$ax(t3._as(json.$index(0, "docs")), t6), t6));
    },
    PalletConstantMetadata: function PalletConstantMetadata() {
    },
    PalletConstantMetadataV14: function PalletConstantMetadataV14(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.type = t1;
      _.value = t2;
      _.docs = t3;
    },
    PalletErrorMetadata: function PalletErrorMetadata() {
    },
    PalletErrorMetadataV14: function PalletErrorMetadataV14(t0) {
      this.type = t0;
    },
    PalletEventMetadata: function PalletEventMetadata() {
    },
    PalletEventMetadataV14: function PalletEventMetadataV14(t0) {
      this.type = t0;
    },
    PalletMetadataV14$deserializeJson(json) {
      var t9, _null = null, _s4_ = "type",
        t1 = json.$index(0, "storage") == null ? _null : A.PalletStorageMetadataV14$deserializeJson(type$.Map_String_dynamic._as(json.$index(0, "storage"))),
        t2 = A.List_List$unmodifiable(J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "constants")), new A.PalletMetadataV14$deserializeJson_closure(), type$.dynamic), type$.PalletConstantMetadataV14),
        t3 = json.$index(0, "calls") == null ? _null : new A.PalletCallMetadataV14(A._asInt(type$.Map_String_dynamic._as(json.$index(0, "calls")).$index(0, _s4_))),
        t4 = json.$index(0, "events") == null ? _null : new A.PalletEventMetadataV14(A._asInt(type$.Map_String_dynamic._as(json.$index(0, "events")).$index(0, _s4_))),
        t5 = json.$index(0, "errors") == null ? _null : new A.PalletErrorMetadataV14(A._asInt(type$.Map_String_dynamic._as(json.$index(0, "errors")).$index(0, _s4_))),
        t6 = A._asString(json.$index(0, "name")),
        t7 = A._asInt(json.$index(0, "index")),
        t8 = type$.nullable_List_dynamic._as(json.$index(0, "docs"));
      if (t8 == null)
        t8 = _null;
      else {
        t9 = type$.String;
        t9 = A.List_List$unmodifiable(J.cast$1$0$ax(t8, t9), t9);
        t8 = t9;
      }
      return new A.PalletMetadataV14(t1, t3, t4, t2, t5, t6, t7, t8);
    },
    PalletMetadataV14: function PalletMetadataV14(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.storage = t0;
      _.calls = t1;
      _.events = t2;
      _.constants = t3;
      _.errors = t4;
      _.name = t5;
      _.index = t6;
      _.docs = t7;
    },
    PalletMetadataV14$deserializeJson_closure: function PalletMetadataV14$deserializeJson_closure() {
    },
    PalletStorageMetadataV14$deserializeJson(json) {
      return new A.PalletStorageMetadataV14(A._asString(json.$index(0, "prefix")), A.List_List$unmodifiable(J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "items")), new A.PalletStorageMetadataV14$deserializeJson_closure(), type$.dynamic), type$.StorageEntryMetadataV14));
    },
    PalletStorageMetadata: function PalletStorageMetadata() {
    },
    PalletStorageMetadataV14: function PalletStorageMetadataV14(t0, t1) {
      this.prefix = t0;
      this.items = t1;
    },
    PalletStorageMetadataV14$deserializeJson_closure: function PalletStorageMetadataV14$deserializeJson_closure() {
    },
    PalletStorageMetadataV14_scaleJsonSerialize_closure: function PalletStorageMetadataV14_scaleJsonSerialize_closure() {
    },
    PortableRegistryV14$deserializeJson(json) {
      var t1 = type$.int,
        t2 = type$.PortableTypeV14;
      return new A.PortableRegistryV14(A.ConstantMap_ConstantMap$from(A.Map_Map$fromEntries(J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "types")), new A.PortableRegistryV14$deserializeJson_closure(), type$.MapEntry_int_PortableTypeV14), t1, t2), t1, t2));
    },
    PortableRegistryV14: function PortableRegistryV14(t0) {
      this.types = t0;
    },
    PortableRegistryV14$deserializeJson_closure: function PortableRegistryV14$deserializeJson_closure() {
    },
    PortableRegistryV14_scaleJsonSerialize_closure: function PortableRegistryV14_scaleJsonSerialize_closure() {
    },
    PortableTypeV14: function PortableTypeV14(t0, t1) {
      this.id = t0;
      this.type = t1;
    },
    SignedExtensionMetadataV14$deserializeJson(json) {
      return new A.SignedExtensionMetadataV14(A._asInt(json.$index(0, "additionalSigned")), A._asString(json.$index(0, "identifier")), A._asInt(json.$index(0, "type")));
    },
    SignedExtensionMetadataV14: function SignedExtensionMetadataV14(t0, t1, t2) {
      this.additionalSigned = t0;
      this.identifier = t1;
      this.type = t2;
    },
    StorageEntryTypeV14_StorageEntryTypeV14$deserializeJson(json, $T) {
      var val,
        key = A.SubstrateEnumSerializationUtils_getScaleEnumKey(json, "StorageEntryTypeV14Types", A._setArrayType(["Map", "Plain"], type$.JSArray_String));
      switch (key) {
        case "Map":
          val = A.StorageEntryTypeV14Map$deserializeJson(A.SubstrateEnumSerializationUtils_getScaleEnumValue(json, key, type$.Map_String_dynamic));
          break;
        default:
          val = new A.StorageEntryTypeV14Plain(A.SubstrateEnumSerializationUtils_getScaleEnumValue(json, key, type$.int));
          break;
      }
      return $T._eval$1("StorageEntryTypeV14<0>")._as(val);
    },
    StorageEntryTypeV14Map$deserializeJson(json) {
      return new A.StorageEntryTypeV14Map(A.List_List$unmodifiable(J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "hashers")), new A.StorageEntryTypeV14Map$deserializeJson_closure(), type$.dynamic), type$.StorageHasherV14), A._asInt(json.$index(0, "key")), A._asInt(json.$index(0, "value")));
    },
    StorageEntryTypeV14: function StorageEntryTypeV14() {
    },
    StorageEntryTypeV14Map: function StorageEntryTypeV14Map(t0, t1, t2) {
      this.hashers = t0;
      this.key = t1;
      this.value = t2;
    },
    StorageEntryTypeV14Map$deserializeJson_closure: function StorageEntryTypeV14Map$deserializeJson_closure() {
    },
    StorageEntryTypeV14Map_scaleJsonSerialize_closure: function StorageEntryTypeV14Map_scaleJsonSerialize_closure() {
    },
    StorageEntryTypeV14Plain: function StorageEntryTypeV14Plain(t0) {
      this.plain = t0;
    },
    StorageEntryMetadataV14$deserializeJson(json) {
      var t1 = type$.Map_String_dynamic;
      return new A.StorageEntryMetadataV14(A._asString(json.$index(0, "name")), new A.StorageEntryModifierV14(A.StorageEntryModifierV9_fromValue(A.SubstrateEnumSerializationUtils_getScaleEnumKey(t1._as(json.$index(0, "modifier")), null, null)).name), A.StorageEntryTypeV14_StorageEntryTypeV14$deserializeJson(t1._as(json.$index(0, "type")), type$.dynamic), A.BytesUtils_toBytes(type$.Iterable_int._as(json.$index(0, "fallback")), true), A.List_List$unmodifiable(type$.Iterable_dynamic._as(json.$index(0, "docs")), type$.String));
    },
    StorageEntryMetadataV14: function StorageEntryMetadataV14(t0, t1, t2, t3, t4) {
      var _ = this;
      _.name = t0;
      _.modifier = t1;
      _.type = t2;
      _.fallback = t3;
      _.docs = t4;
    },
    CustomMetadata15$deserializeJson(json) {
      var t3, t4, t5, t6, t7,
        t1 = type$.String,
        t2 = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.dynamic);
      for (t3 = type$.Map_dynamic_dynamic._as(json.$index(0, "map")).get$entries(), t3 = t3.get$iterator(t3), t4 = type$.Map_String_dynamic, t5 = type$.Iterable_int; t3.moveNext$0();) {
        t6 = t3.get$current();
        t7 = A._asString(t6.key);
        t6 = t4._as(t6.value);
        t2.$indexSet(0, t7, new A.CustomValueMetadata15(A._asInt(t6.$index(0, "type")), A.BytesUtils_toBytes(t5._as(t6.$index(0, "value")), true)));
      }
      return new A.CustomMetadata15(A.ConstantMap_ConstantMap$from(t2, t1, type$.CustomValueMetadata15));
    },
    CustomMetadata15: function CustomMetadata15(t0) {
      this.map = t0;
    },
    CustomValueMetadata15: function CustomValueMetadata15(t0, t1) {
      this.type = t0;
      this.value = t1;
    },
    ExtrinsicMetadataV15$deserializeJson(json) {
      var t1 = A.List_List$unmodifiable(J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "signedExtensions")), new A.ExtrinsicMetadataV15$deserializeJson_closure(), type$.dynamic), type$.SignedExtensionMetadataV14),
        t2 = A._asInt(json.$index(0, "addressType")),
        t3 = A._asInt(json.$index(0, "callType")),
        t4 = A._asInt(json.$index(0, "signatureType")),
        t5 = A._asInt(json.$index(0, "extraType"));
      return new A.ExtrinsicMetadataV15(A._asInt(json.$index(0, "version")), t2, t3, t4, t5, t1);
    },
    ExtrinsicMetadataV15: function ExtrinsicMetadataV15(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.version = t0;
      _.addressType = t1;
      _.callType = t2;
      _.signatureType = t3;
      _.extraType = t4;
      _.signedExtensions = t5;
    },
    ExtrinsicMetadataV15$deserializeJson_closure: function ExtrinsicMetadataV15$deserializeJson_closure() {
    },
    ExtrinsicMetadataV15_scaleJsonSerialize_closure: function ExtrinsicMetadataV15_scaleJsonSerialize_closure() {
    },
    MetadataV15$deserializeJson(json) {
      var t1 = type$.Map_String_dynamic,
        t2 = type$.List_dynamic,
        t3 = type$.dynamic;
      return new A.MetadataV15(A.PortableRegistryV14$deserializeJson(t1._as(json.$index(0, "lookup"))), A.ConstantMap_ConstantMap$from(A.Map_Map$fromEntries(J.map$1$1$ax(t2._as(json.$index(0, "pallets")), new A.MetadataV15$deserializeJson_closure(), type$.MapEntry_dynamic_dynamic), t3, t3), type$.int, type$.PalletMetadataV15), A.ExtrinsicMetadataV15$deserializeJson(t1._as(json.$index(0, "extrinsic"))), A._asInt(json.$index(0, "type")), A.List_List$unmodifiable(J.map$1$1$ax(t2._as(json.$index(0, "apis")), new A.MetadataV15$deserializeJson_closure0(), t3), type$.RuntimeApiMetadataV15), A.OuterEnums15$deserializeJson(t1._as(json.$index(0, "outerEnums"))), A.CustomMetadata15$deserializeJson(t1._as(json.$index(0, "custom"))));
    },
    MetadataV15: function MetadataV15(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.lookup = t0;
      _.pallets = t1;
      _.extrinsic = t2;
      _.type = t3;
      _.apis = t4;
      _.outerEnums = t5;
      _.custom = t6;
    },
    MetadataV15$deserializeJson_closure: function MetadataV15$deserializeJson_closure() {
    },
    MetadataV15$deserializeJson_closure0: function MetadataV15$deserializeJson_closure0() {
    },
    MetadataV15_scaleJsonSerialize_closure: function MetadataV15_scaleJsonSerialize_closure() {
    },
    MetadataV15_scaleJsonSerialize_closure0: function MetadataV15_scaleJsonSerialize_closure0() {
    },
    _MetadataV15_SubstrateMetadata_LatestMetadataInterface: function _MetadataV15_SubstrateMetadata_LatestMetadataInterface() {
    },
    OuterEnums15$deserializeJson(json) {
      return new A.OuterEnums15(A._asInt(json.$index(0, "callType")), A._asInt(json.$index(0, "eventType")), A._asInt(json.$index(0, "errorType")));
    },
    OuterEnums15: function OuterEnums15(t0, t1, t2) {
      this.callType = t0;
      this.eventType = t1;
      this.errorType = t2;
    },
    PalletMetadataV15$deserializeJson(json) {
      var t9, _null = null, _s4_ = "type",
        t1 = json.$index(0, "storage") == null ? _null : A.PalletStorageMetadataV14$deserializeJson(type$.Map_String_dynamic._as(json.$index(0, "storage"))),
        t2 = A.List_List$unmodifiable(J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "constants")), new A.PalletMetadataV15$deserializeJson_closure(), type$.dynamic), type$.PalletConstantMetadataV14),
        t3 = json.$index(0, "calls") == null ? _null : new A.PalletCallMetadataV14(A._asInt(type$.Map_String_dynamic._as(json.$index(0, "calls")).$index(0, _s4_))),
        t4 = json.$index(0, "events") == null ? _null : new A.PalletEventMetadataV14(A._asInt(type$.Map_String_dynamic._as(json.$index(0, "events")).$index(0, _s4_))),
        t5 = json.$index(0, "errors") == null ? _null : new A.PalletErrorMetadataV14(A._asInt(type$.Map_String_dynamic._as(json.$index(0, "errors")).$index(0, _s4_))),
        t6 = A._asString(json.$index(0, "name")),
        t7 = A._asInt(json.$index(0, "index")),
        t8 = type$.nullable_List_dynamic._as(json.$index(0, "docs"));
      if (t8 == null)
        t8 = _null;
      else {
        t9 = type$.String;
        t9 = A.List_List$unmodifiable(J.cast$1$0$ax(t8, t9), t9);
        t8 = t9;
      }
      return new A.PalletMetadataV15(t1, t3, t4, t2, t5, t6, t7, t8);
    },
    PalletMetadataV15: function PalletMetadataV15(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.storage = t0;
      _.calls = t1;
      _.events = t2;
      _.constants = t3;
      _.errors = t4;
      _.name = t5;
      _.index = t6;
      _.docs = t7;
    },
    PalletMetadataV15$deserializeJson_closure: function PalletMetadataV15$deserializeJson_closure() {
    },
    RuntimeApiMetadataV15$deserializeJson(json) {
      return new A.RuntimeApiMetadataV15(A.List_List$unmodifiable(J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "methods")), new A.RuntimeApiMetadataV15$deserializeJson_closure(), type$.dynamic), type$.RuntimeApiMethodMetadataV15), A._asString(json.$index(0, "name")), A.List_List$unmodifiable(type$.Iterable_dynamic._as(json.$index(0, "docs")), type$.String));
    },
    RuntimeApiMetadata: function RuntimeApiMetadata() {
    },
    RuntimeApiMetadata_scaleJsonSerialize_closure: function RuntimeApiMetadata_scaleJsonSerialize_closure(t0) {
      this.$this = t0;
    },
    RuntimeApiMetadataV15: function RuntimeApiMetadataV15(t0, t1, t2) {
      this.methods = t0;
      this.name = t1;
      this.docs = t2;
    },
    RuntimeApiMetadataV15$deserializeJson_closure: function RuntimeApiMetadataV15$deserializeJson_closure() {
    },
    RuntimeApiMethodMetadataV15$deserializeJson(json) {
      return new A.RuntimeApiMethodMetadataV15(A._asString(json.$index(0, "name")), A.List_List$unmodifiable(J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "inputs")), new A.RuntimeApiMethodMetadata$deserializeJson_closure(), type$.dynamic), type$.RuntimeApiMethodParamMetadataV15), A._asInt(json.$index(0, "output")), A.List_List$unmodifiable(type$.Iterable_dynamic._as(json.$index(0, "docs")), type$.String));
    },
    RuntimeApiMethodMetadata: function RuntimeApiMethodMetadata() {
    },
    RuntimeApiMethodMetadata$deserializeJson_closure: function RuntimeApiMethodMetadata$deserializeJson_closure() {
    },
    RuntimeApiMethodMetadata_scaleJsonSerialize_closure: function RuntimeApiMethodMetadata_scaleJsonSerialize_closure() {
    },
    RuntimeApiMethodMetadataV15: function RuntimeApiMethodMetadataV15(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.inputs = t1;
      _.output = t2;
      _.docs = t3;
    },
    RuntimeApiMethodParamMetadataV15: function RuntimeApiMethodParamMetadataV15(t0, t1) {
      this.name = t0;
      this.type = t1;
    },
    DeprecationInfoTypes_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_soA, new A.DeprecationInfoTypes_fromName_closure($name), new A.DeprecationInfoTypes_fromName_closure0($name));
    },
    MetadataDeprecationInfo_MetadataDeprecationInfo$deserializeJson(json) {
      var t2,
        t1 = A.SubstrateVariantSerialization_toVariantDecodeResult(json).result;
      switch (A.DeprecationInfoTypes_fromName(A._asString(t1.$index(0, "key")))) {
        case B.DeprecationInfoTypes_2:
          return A.MetadataVariantsDeprecated_MetadataVariantsDeprecated$deserializeJson(type$.Map_String_dynamic._as(t1.$index(0, "value")));
        case B.DeprecationInfoTypes_0:
          return new A.MetadataNotDeprecated(B.DeprecationInfoTypes_0);
        case B.DeprecationInfoTypes_1:
          t2 = type$.Map_String_dynamic;
          return new A.MetadataItemDeprecated(A.DeprecationStatus_DeprecationStatus$deserializeJson(t2._as(t2._as(t1.$index(0, "value")).$index(0, "status"))), B.DeprecationInfoTypes_1);
      }
    },
    MetadataVariantsDeprecated_MetadataVariantsDeprecated$deserializeJson(json) {
      var t1 = type$.int,
        t2 = type$.DeprecationStatus;
      return new A.MetadataVariantsDeprecated(A.ConstantMap_ConstantMap$from(type$.Map_dynamic_dynamic._as(json.$index(0, "depecreatedVariants")).map$2$1(0, new A.MetadataVariantsDeprecated_MetadataVariantsDeprecated$deserializeJson_closure(), t1, t2), t1, t2), B.DeprecationInfoTypes_2);
    },
    DeprecationInfoTypes: function DeprecationInfoTypes(t0) {
      this._name = t0;
    },
    DeprecationInfoTypes_fromName_closure: function DeprecationInfoTypes_fromName_closure(t0) {
      this.name = t0;
    },
    DeprecationInfoTypes_fromName_closure0: function DeprecationInfoTypes_fromName_closure0(t0) {
      this.name = t0;
    },
    DeprecationInfoTypes_fromName__closure: function DeprecationInfoTypes_fromName__closure() {
    },
    MetadataDeprecationInfo: function MetadataDeprecationInfo() {
    },
    MetadataVariantsDeprecated: function MetadataVariantsDeprecated(t0, t1) {
      this.depecreatedVariants = t0;
      this.type = t1;
    },
    MetadataVariantsDeprecated_MetadataVariantsDeprecated$deserializeJson_closure: function MetadataVariantsDeprecated_MetadataVariantsDeprecated$deserializeJson_closure() {
    },
    MetadataVariantsDeprecated_scaleJsonSerialize_closure: function MetadataVariantsDeprecated_scaleJsonSerialize_closure() {
    },
    MetadataNotDeprecated: function MetadataNotDeprecated(t0) {
      this.type = t0;
    },
    MetadataItemDeprecated: function MetadataItemDeprecated(t0, t1) {
      this.status = t0;
      this.type = t1;
    },
    DeprecationStatusTypes_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_Jou, new A.DeprecationStatusTypes_fromName_closure($name), new A.DeprecationStatusTypes_fromName_closure0($name));
    },
    DeprecationStatus_DeprecationStatus$deserializeJson(json) {
      var t1 = A.SubstrateVariantSerialization_toVariantDecodeResult(json).result;
      switch (A.DeprecationStatusTypes_fromName(A._asString(t1.$index(0, "key")))) {
        case B.DeprecationStatusTypes_2:
          t1 = type$.Map_String_dynamic._as(t1.$index(0, "value"));
          return new A.MetadataStatusDeprecated(A._asString(t1.$index(0, "note")), A._asStringQ(t1.$index(0, "since")), B.DeprecationStatusTypes_2);
        case B.DeprecationStatusTypes_0:
          return new A.MetadataStatusNotDeprecated(B.DeprecationStatusTypes_0);
        case B.DeprecationStatusTypes_1:
          return new A.MetadataStatusDeprecatedWithoutNote(B.DeprecationStatusTypes_1);
      }
    },
    DeprecationStatusTypes: function DeprecationStatusTypes(t0) {
      this._name = t0;
    },
    DeprecationStatusTypes_fromName_closure: function DeprecationStatusTypes_fromName_closure(t0) {
      this.name = t0;
    },
    DeprecationStatusTypes_fromName_closure0: function DeprecationStatusTypes_fromName_closure0(t0) {
      this.name = t0;
    },
    DeprecationStatusTypes_fromName__closure: function DeprecationStatusTypes_fromName__closure() {
    },
    DeprecationStatus: function DeprecationStatus() {
    },
    MetadataStatusDeprecated: function MetadataStatusDeprecated(t0, t1, t2) {
      this.note = t0;
      this.since = t1;
      this.type = t2;
    },
    MetadataStatusNotDeprecated: function MetadataStatusNotDeprecated(t0) {
      this.type = t0;
    },
    MetadataStatusDeprecatedWithoutNote: function MetadataStatusDeprecatedWithoutNote(t0) {
      this.type = t0;
    },
    ExtrinsicMetadataV16$deserializeJson(json) {
      var t1 = type$.List_dynamic,
        t2 = A.List_List$unmodifiable(J.map$1$1$ax(t1._as(json.$index(0, "transaction_extensions")), new A.ExtrinsicMetadataV16$deserializeJson_closure(), type$.dynamic), type$.TransactionExtensionMetadata),
        t3 = A._asInt(json.$index(0, "addressType")),
        t4 = A._asInt(json.$index(0, "signatureType")),
        t5 = type$.int,
        t6 = type$.List_int;
      t6 = A.ConstantMap_ConstantMap$from(type$.Map_dynamic_dynamic._as(json.$index(0, "transaction_extensions_by_version")).map$2$1(0, new A.ExtrinsicMetadataV16$deserializeJson_closure0(), t5, t6), t5, t6);
      return new A.ExtrinsicMetadataV16(A.List_List$unmodifiable(J.cast$1$0$ax(t1._as(json.$index(0, "versions")), t5), t5), t3, t4, t6, t2);
    },
    ExtrinsicMetadataV16: function ExtrinsicMetadataV16(t0, t1, t2, t3, t4) {
      var _ = this;
      _.versions = t0;
      _.addressType = t1;
      _.signatureType = t2;
      _.transactionExtensionsByVersion = t3;
      _.transactionExtensions = t4;
    },
    ExtrinsicMetadataV16$deserializeJson_closure: function ExtrinsicMetadataV16$deserializeJson_closure() {
    },
    ExtrinsicMetadataV16$deserializeJson_closure0: function ExtrinsicMetadataV16$deserializeJson_closure0() {
    },
    ExtrinsicMetadataV16_scaleJsonSerialize_closure: function ExtrinsicMetadataV16_scaleJsonSerialize_closure() {
    },
    MetadataV16$deserializeJson(json) {
      var t1 = type$.Map_String_dynamic,
        t2 = type$.List_dynamic,
        t3 = type$.int,
        t4 = type$.PalletMetadataV16,
        t5 = type$.RuntimeApiMetadataV16;
      return new A.MetadataV16(A.PortableRegistryV14$deserializeJson(t1._as(json.$index(0, "lookup"))), A.ConstantMap_ConstantMap$from(A.Map_Map$fromEntries(J.map$1$1$ax(t2._as(json.$index(0, "pallets")), new A.MetadataV16$deserializeJson_closure(), type$.MapEntry_int_PalletMetadataV16), t3, t4), t3, t4), A.ExtrinsicMetadataV16$deserializeJson(t1._as(json.$index(0, "extrinsic"))), A.List_List$unmodifiable(J.map$1$1$ax(t2._as(json.$index(0, "apis")), new A.MetadataV16$deserializeJson_closure0(), t5), t5), A.OuterEnums15$deserializeJson(t1._as(json.$index(0, "outerEnums"))), A.CustomMetadata15$deserializeJson(t1._as(json.$index(0, "custom"))));
    },
    MetadataV16: function MetadataV16(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.lookup = t0;
      _.pallets = t1;
      _.extrinsic = t2;
      _.apis = t3;
      _.outerEnums = t4;
      _.custom = t5;
    },
    MetadataV16$deserializeJson_closure: function MetadataV16$deserializeJson_closure() {
    },
    MetadataV16$deserializeJson_closure0: function MetadataV16$deserializeJson_closure0() {
    },
    MetadataV16_scaleJsonSerialize_closure: function MetadataV16_scaleJsonSerialize_closure() {
    },
    MetadataV16_scaleJsonSerialize_closure0: function MetadataV16_scaleJsonSerialize_closure0() {
    },
    _MetadataV16_SubstrateMetadata_LatestMetadataInterface: function _MetadataV16_SubstrateMetadata_LatestMetadataInterface() {
    },
    PalletAssociatedTypeMetadata: function PalletAssociatedTypeMetadata(t0, t1, t2) {
      this.name = t0;
      this.type = t1;
      this.docs = t2;
    },
    PalletCallMetadataV16: function PalletCallMetadataV16(t0, t1) {
      this.type = t0;
      this.deprecationInfo = t1;
    },
    PalletConstantMetadataV16: function PalletConstantMetadataV16(t0, t1, t2, t3, t4) {
      var _ = this;
      _.deprecationInfo = t0;
      _.name = t1;
      _.type = t2;
      _.value = t3;
      _.docs = t4;
    },
    PalletErrorMetadataV16: function PalletErrorMetadataV16(t0, t1) {
      this.type = t0;
      this.deprecationInfo = t1;
    },
    PalletEventMetadataV16: function PalletEventMetadataV16(t0, t1) {
      this.type = t0;
      this.deprecationInfo = t1;
    },
    PalletMetadataV16$deserializeJson(json) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, _null = null, _s4_ = "type",
        _s16_ = "deprecation_info",
        t1 = json.$index(0, "storage") == null ? _null : A.PalletStorageMetadataV16$deserializeJson(type$.Map_String_dynamic._as(json.$index(0, "storage")));
      if (json.$index(0, "calls") == null)
        t2 = _null;
      else {
        t2 = type$.Map_String_dynamic;
        t3 = t2._as(json.$index(0, "calls"));
        t3 = new A.PalletCallMetadataV16(A._asInt(t3.$index(0, _s4_)), A.MetadataDeprecationInfo_MetadataDeprecationInfo$deserializeJson(t2._as(t3.$index(0, _s16_))));
        t2 = t3;
      }
      t3 = type$.List_dynamic;
      t4 = type$.PalletConstantMetadataV16;
      t4 = A.List_List$unmodifiable(J.map$1$1$ax(t3._as(json.$index(0, "constants")), new A.PalletMetadataV16$deserializeJson_closure(), t4), t4);
      t5 = type$.PalletAssociatedTypeMetadata;
      t5 = A.List_List$unmodifiable(J.map$1$1$ax(t3._as(json.$index(0, "associated_types")), new A.PalletMetadataV16$deserializeJson_closure0(), t5), t5);
      if (json.$index(0, "events") == null)
        t3 = _null;
      else {
        t3 = type$.Map_String_dynamic;
        t6 = t3._as(json.$index(0, "events"));
        t6 = new A.PalletEventMetadataV16(A._asInt(t6.$index(0, _s4_)), A.MetadataDeprecationInfo_MetadataDeprecationInfo$deserializeJson(t3._as(t6.$index(0, _s16_))));
        t3 = t6;
      }
      if (json.$index(0, "errors") == null)
        t6 = _null;
      else {
        t6 = type$.Map_String_dynamic;
        t7 = t6._as(json.$index(0, "errors"));
        t7 = new A.PalletErrorMetadataV16(A._asInt(t7.$index(0, _s4_)), A.MetadataDeprecationInfo_MetadataDeprecationInfo$deserializeJson(t6._as(t7.$index(0, _s16_))));
        t6 = t7;
      }
      t7 = A.DeprecationStatus_DeprecationStatus$deserializeJson(type$.Map_String_dynamic._as(json.$index(0, _s16_)));
      t8 = A._asString(json.$index(0, "name"));
      t9 = A._asInt(json.$index(0, "index"));
      t10 = type$.nullable_List_dynamic._as(json.$index(0, "docs"));
      if (t10 == null)
        t10 = _null;
      else {
        t11 = type$.String;
        t11 = A.List_List$unmodifiable(J.cast$1$0$ax(t10, t11), t11);
        t10 = t11;
      }
      return new A.PalletMetadataV16(t1, t2, t3, t6, t4, t5, t7, t8, t9, t10);
    },
    PalletMetadataV16: function PalletMetadataV16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.storage = t0;
      _.calls = t1;
      _.events = t2;
      _.errors = t3;
      _.constants = t4;
      _.associatedTypes = t5;
      _.deprecationInfo = t6;
      _.name = t7;
      _.index = t8;
      _.docs = t9;
    },
    PalletMetadataV16$deserializeJson_closure: function PalletMetadataV16$deserializeJson_closure() {
    },
    PalletMetadataV16$deserializeJson_closure0: function PalletMetadataV16$deserializeJson_closure0() {
    },
    PalletMetadataV16_scaleJsonSerialize_closure: function PalletMetadataV16_scaleJsonSerialize_closure() {
    },
    RuntimeApiMetadataV16$deserializeJson(json) {
      return new A.RuntimeApiMetadataV16(A.List_List$unmodifiable(J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "methods")), new A.RuntimeApiMetadataV16$deserializeJson_closure(), type$.dynamic), type$.RuntimeApiMethodMetadataV16), A.DeprecationStatus_DeprecationStatus$deserializeJson(type$.Map_String_dynamic._as(json.$index(0, "deprecation_info"))), A._asString(json.$index(0, "name")), A.List_List$unmodifiable(type$.Iterable_dynamic._as(json.$index(0, "docs")), type$.String));
    },
    RuntimeApiMetadataV16: function RuntimeApiMetadataV16(t0, t1, t2, t3) {
      var _ = this;
      _.methods = t0;
      _.deprecationInfo = t1;
      _.name = t2;
      _.docs = t3;
    },
    RuntimeApiMetadataV16$deserializeJson_closure: function RuntimeApiMetadataV16$deserializeJson_closure() {
    },
    RuntimeApiMethodMetadataV16$deserializeJson(json) {
      return new A.RuntimeApiMethodMetadataV16(A.DeprecationStatus_DeprecationStatus$deserializeJson(type$.Map_String_dynamic._as(json.$index(0, "deprecation_info"))), A._asString(json.$index(0, "name")), A.List_List$unmodifiable(J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "inputs")), new A.RuntimeApiMethodMetadata$deserializeJson_closure(), type$.dynamic), type$.RuntimeApiMethodParamMetadataV15), A._asInt(json.$index(0, "output")), A.List_List$unmodifiable(type$.Iterable_dynamic._as(json.$index(0, "docs")), type$.String));
    },
    RuntimeApiMethodMetadataV16: function RuntimeApiMethodMetadataV16(t0, t1, t2, t3, t4) {
      var _ = this;
      _.deprecationInfo = t0;
      _.name = t1;
      _.inputs = t2;
      _.output = t3;
      _.docs = t4;
    },
    StorageEntryMetadataV16: function StorageEntryMetadataV16(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.deprecationInfo = t0;
      _.name = t1;
      _.modifier = t2;
      _.type = t3;
      _.fallback = t4;
      _.docs = t5;
    },
    PalletStorageMetadataV16$deserializeJson(json) {
      return new A.PalletStorageMetadataV16(A._asString(json.$index(0, "prefix")), A.List_List$unmodifiable(J.map$1$1$ax(type$.List_dynamic._as(json.$index(0, "items")), new A.PalletStorageMetadataV16$deserializeJson_closure(), type$.dynamic), type$.StorageEntryMetadataV16));
    },
    PalletStorageMetadataV16: function PalletStorageMetadataV16(t0, t1) {
      this.prefix = t0;
      this.items = t1;
    },
    PalletStorageMetadataV16$deserializeJson_closure: function PalletStorageMetadataV16$deserializeJson_closure() {
    },
    PalletStorageMetadataV16_scaleJsonSerialize_closure: function PalletStorageMetadataV16_scaleJsonSerialize_closure() {
    },
    TransactionExtensionMetadata: function TransactionExtensionMetadata(t0, t1, t2) {
      this.implicit = t0;
      this.identifier = t1;
      this.type = t2;
    },
    StorageEntryModifierV9_fromValue(value) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_kCv, new A.StorageEntryModifierV9_fromValue_closure(value), new A.StorageEntryModifierV9_fromValue_closure0(value));
    },
    StorageEntryModifierV9: function StorageEntryModifierV9(t0) {
      this.name = t0;
    },
    StorageEntryModifierV9_fromValue_closure: function StorageEntryModifierV9_fromValue_closure(t0) {
      this.value = t0;
    },
    StorageEntryModifierV9_fromValue_closure0: function StorageEntryModifierV9_fromValue_closure0(t0) {
      this.value = t0;
    },
    ExtrinsicMetadata: function ExtrinsicMetadata() {
    },
    SignedExtensionMetadata: function SignedExtensionMetadata() {
    },
    PalletMetadata: function PalletMetadata() {
    },
    PalletMetadata_scaleJsonSerialize_closure: function PalletMetadata_scaleJsonSerialize_closure(t0) {
      this.$this = t0;
    },
    VersionedMetadata_VersionedMetadata$fromBytes(bytes, $T) {
      var t2, getNumber, version, magicNumber, metadataBytes, metadata, t3, t4, t5, _null = null,
        _s11_ = "magicNumber",
        _s7_ = "version",
        _s6_ = "lookup", _s4_ = "name",
        _s7_0 = "storage",
        _s5_ = "calls", _s6_0 = "events",
        _s9_ = "constants",
        _s6_1 = "errors", _s5_0 = "index",
        _s7_1 = "pallets",
        _s9_0 = "extrinsic",
        _s4_0 = "type",
        _s16_ = "signedExtensions",
        _s4_1 = "docs",
        _s11_0 = "addressType",
        _s13_ = "signatureType",
        _s10_ = "outerEnums",
        _s16_0 = "deprecation_info",
        t1 = J.getInterceptor$asx(bytes);
      if (t1.get$length(bytes) < 5)
        throw A.wrapException(B.MetadataException_JcO);
      t2 = type$.JSArray_Layout_dynamic;
      getNumber = A.StructLayout_StructLayout(A._setArrayType([A.IntegerLayout$(4, B.C_Endian0, _s11_, false), A.IntegerLayout$(1, B.C_Endian0, _s7_, false)], t2), false, _null).deserialize$1(t1.sublist$2(bytes, 0, 5)).value;
      version = A._asInt(getNumber.$index(0, _s7_));
      magicNumber = A._asInt(getNumber.$index(0, _s11_));
      metadataBytes = t1.sublist$1(bytes, 5);
      if (!B.JSArray_methods.contains$1(B.List_14_15_16, version))
        metadata = new A.UnsupportedMetadata(A.BytesUtils_toBytes(metadataBytes, true));
      else
        switch (version) {
          case 14:
            t1 = type$.Map_String_dynamic;
            metadata = A.MetadataV14$deserializeJson(A.StructLayout_StructLayout(A._setArrayType([A.SubstrateMetadataLayouts_portableRegistry(_s6_), A.LayoutConst_compactVec(A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString(_s4_), A.LayoutConst_optional(A.SubstrateMetadataLayouts_palletStorageMetadataV14(), _s7_0), A.LayoutConst_optional(A.SubstrateMetadataLayouts_palletCallMetadataV14(), _s5_), A.LayoutConst_optional(A.SubstrateMetadataLayouts_palletEventMetadataV14(), _s6_0), A.LayoutConst_compactVec(A.SubstrateMetadataLayouts_palletConstantMetadataV14(), _s9_, t1), A.LayoutConst_optional(A.SubstrateMetadataLayouts_palletErrorMetadataV14(), _s6_1), A.IntegerLayout$(1, B.C_Endian0, _s5_0, false)], t2), false, _null), _s7_1, t1), A.StructLayout_StructLayout(A._setArrayType([new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s4_0), A.IntegerLayout$(1, B.C_Endian0, _s7_, false), A.LayoutConst_compactVec(A.SubstrateMetadataLayouts_signedExtensionMetadataV14(), _s16_, t1)], t2), false, _s9_0), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s4_0)], t2), false, _null).deserialize$1(metadataBytes).value);
            break;
          case 15:
            t1 = type$.Map_String_dynamic;
            t3 = type$.String;
            metadata = A.MetadataV15$deserializeJson(A.StructLayout_StructLayout(A._setArrayType([A.SubstrateMetadataLayouts_portableRegistry(_s6_), A.LayoutConst_compactVec(A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString(_s4_), A.LayoutConst_optional(A.SubstrateMetadataLayouts_palletStorageMetadataV14(), _s7_0), A.LayoutConst_optional(A.SubstrateMetadataLayouts_palletCallMetadataV14(), _s5_), A.LayoutConst_optional(A.SubstrateMetadataLayouts_palletEventMetadataV14(), _s6_0), A.LayoutConst_compactVec(A.SubstrateMetadataLayouts_palletConstantMetadataV14(), _s9_, t1), A.LayoutConst_optional(A.SubstrateMetadataLayouts_palletErrorMetadataV14(), _s6_1), A.IntegerLayout$(1, B.C_Endian0, _s5_0, false), A.LayoutConst_compactVec(A.LayoutConst_compactString(_null), _s4_1, t3)], t2), false, _null), _s7_1, t1), A.StructLayout_StructLayout(A._setArrayType([A.IntegerLayout$(1, B.C_Endian0, _s7_, false), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s11_0), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "callType"), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s13_), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "extraType"), A.LayoutConst_compactVec(A.SubstrateMetadataLayouts_signedExtensionMetadataV14(), _s16_, t1)], t2), false, _s9_0), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s4_0), A.LayoutConst_compactVec(A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString(_s4_), A.LayoutConst_compactVec(A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString(_s4_), A.LayoutConst_compactVec(A.SubstrateMetadataLayouts_runtimeApiMethodParamMetadataV15(), "inputs", t1), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "output"), A.LayoutConst_compactVec(A.LayoutConst_compactString(_null), _s4_1, t3)], t2), false, _null), "methods", t1), A.LayoutConst_compactVec(A.LayoutConst_compactString(_null), _s4_1, t3)], t2), false, _null), "apis", t1), A.SubstrateMetadataLayouts_outerEnums15(_s10_), A.SubstrateMetadataLayouts_customMetadata15("custom")], t2), false, _null).deserialize$1(metadataBytes).value);
            break;
          case 16:
            t1 = type$.String;
            t3 = type$.Map_String_dynamic;
            t4 = type$.int;
            t5 = type$.dynamic;
            metadata = A.MetadataV16$deserializeJson(A.StructLayout_StructLayout(A._setArrayType([A.SubstrateMetadataLayouts_portableRegistry(_s6_), A.LayoutConst_compactVec(A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString(_s4_), A.LayoutConst_optional(A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString("prefix"), A.LayoutConst_compactVec(A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString(_s4_), A.SubstrateMetadataLayouts_storageEntryModifierV9("modifier"), A.SubstrateMetadataLayouts_storageEntryTypeV14(_s4_0), new A.CompactBytes(-1, "fallback"), A.LayoutConst_compactVec(A.LayoutConst_compactString(_null), _s4_1, t1), A.SubstrateMetadataLayouts_depecratedStatusV16(_s16_0)], t2), false, _null), "items", t3)], t2), false, _null), _s7_0), A.LayoutConst_optional(A.StructLayout_StructLayout(A._setArrayType([new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s4_0), A.SubstrateMetadataLayouts_depecratedInfo(_s16_0)], t2), false, _null), _s5_), A.LayoutConst_optional(A.StructLayout_StructLayout(A._setArrayType([new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s4_0), A.SubstrateMetadataLayouts_depecratedInfo(_s16_0)], t2), false, _null), _s6_0), A.LayoutConst_compactVec(A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString(_s4_), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s4_0), new A.CompactBytes(-1, "value"), A.LayoutConst_compactVec(A.LayoutConst_compactString(_null), _s4_1, t1), A.SubstrateMetadataLayouts_depecratedStatusV16(_s16_0)], t2), false, _null), _s9_, t3), A.LayoutConst_optional(A.StructLayout_StructLayout(A._setArrayType([new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s4_0), A.SubstrateMetadataLayouts_depecratedInfo(_s16_0)], t2), false, _null), _s6_1), A.LayoutConst_compactVec(A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString(_s4_), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s4_0), A.LayoutConst_compactVec(A.LayoutConst_compactString(_null), _s4_1, t1)], t2), false, _null), "associated_types", t3), A.IntegerLayout$(1, B.C_Endian0, _s5_0, false), A.LayoutConst_compactVec(A.LayoutConst_compactString(_null), _s4_1, t1), A.SubstrateMetadataLayouts_depecratedStatusV16(_s16_0)], t2), false, _null), _s7_1, t3), A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactVec(A.IntegerLayout$(1, B.C_Endian0, _null, false), "versions", t4), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s11_0), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s13_), A.LayoutConst_compactMap(A.IntegerLayout$(1, B.C_Endian0, _null, false), A.LayoutConst_compactVec(A.IntegerLayout$(4, B.C_Endian0, _null, false), _null, t4), "transaction_extensions_by_version", t5, t5), A.LayoutConst_compactVec(A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString("identifier"), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s4_0), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "implicit")], t2), false, _null), "transaction_extensions", t3)], t2), false, _s9_0), A.LayoutConst_compactVec(A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString(_s4_), A.LayoutConst_compactVec(A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString(_s4_), A.LayoutConst_compactVec(A.SubstrateMetadataLayouts_runtimeApiMethodParamMetadataV15(), "inputs", t3), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "output"), A.LayoutConst_compactVec(A.LayoutConst_compactString(_null), _s4_1, t1), A.SubstrateMetadataLayouts_depecratedStatusV16(_s16_0)], t2), false, _null), "methods", t3), A.LayoutConst_compactVec(A.LayoutConst_compactString(_null), _s4_1, t1), A.SubstrateMetadataLayouts_depecratedInfo(_s16_0)], t2), false, _null), "apis", t3), A.SubstrateMetadataLayouts_outerEnums15(_s10_), A.SubstrateMetadataLayouts_customMetadata15("custom")], t2), false, _null).deserialize$1(metadataBytes).value);
            break;
          default:
            throw A.wrapException(A.DartSubstratePluginException$("Unsuported metadata version.", A.LinkedHashMap_LinkedHashMap$_literal(["version", "" + version], type$.String, type$.dynamic)));
        }
      if (!$T._is(metadata))
        throw A.wrapException(A.DartSubstratePluginException$("Incorrect metadata version.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", A.createRuntimeType($T).toString$0(0), "version", "" + version], type$.String, type$.dynamic)));
      return new A.VersionedMetadata(metadata, version, magicNumber, $T._eval$1("VersionedMetadata<0>"));
    },
    VersionedMetadata: function VersionedMetadata(t0, t1, t2, t3) {
      var _ = this;
      _.metadata = t0;
      _.version = t1;
      _.magicNumber = t2;
      _.$ti = t3;
    },
    SubstrateVariantSerialization_toVariantDecodeResult(json) {
      if (typeof json.$index(0, "key") != "string" || !json.containsKey$1("value"))
        throw A.wrapException(B.DartSubstratePluginException_jlC);
      return new A.SubstrateVariantDecodeResult(A.ConstantMap_ConstantMap$from(json, type$.String, type$.dynamic));
    },
    SubstrateSerialization: function SubstrateSerialization() {
    },
    SubstrateVariantDecodeResult: function SubstrateVariantDecodeResult(t0) {
      this.result = t0;
    },
    SubstrateVariantSerialization: function SubstrateVariantSerialization() {
    },
    FileLocation$_(file, offset) {
      if (offset < 0)
        A.throwExpression(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > file._decodedChars.length)
        A.throwExpression(A.RangeError$("Offset " + offset + string$.x20must_ + file.get$length(0) + "."));
      return new A.FileLocation(file, offset);
    },
    SourceFile: function SourceFile(t0, t1, t2) {
      var _ = this;
      _.url = t0;
      _._lineStarts = t1;
      _._decodedChars = t2;
      _._cachedLine = null;
    },
    FileLocation: function FileLocation(t0, t1) {
      this.file = t0;
      this.offset = t1;
    },
    _FileSpan: function _FileSpan(t0, t1, t2) {
      this.file = t0;
      this._file$_start = t1;
      this._end = t2;
    },
    Highlighter$(span, color) {
      var t1 = A.Highlighter__collateLines(A._setArrayType([A._Highlight$(span, true)], type$.JSArray__Highlight)),
        t2 = new A.Highlighter_closure(color).call$0(),
        t3 = B.JSInt_methods.toString$0(B.JSArray_methods.get$last(t1).number + 1),
        t4 = A.Highlighter__contiguous(t1) ? 0 : 3,
        t5 = A._arrayInstanceType(t1);
      return new A.Highlighter(t1, t2, null, 1 + Math.max(t3.length, t4), new A.MappedListIterable(t1, t5._eval$1("int(1)")._as(new A.Highlighter$__closure()), t5._eval$1("MappedListIterable<1,int>")).reduce$1(0, B.CONSTANT), !A.isAllTheSame(new A.MappedListIterable(t1, t5._eval$1("Object?(1)")._as(new A.Highlighter$__closure0()), t5._eval$1("MappedListIterable<1,Object?>"))), new A.StringBuffer(""));
    },
    Highlighter__contiguous(lines) {
      var i, thisLine, nextLine;
      for (i = 0; i < lines.length - 1;) {
        thisLine = lines[i];
        ++i;
        nextLine = lines[i];
        if (thisLine.number + 1 !== nextLine.number && J.$eq$(thisLine.url, nextLine.url))
          return false;
      }
      return true;
    },
    Highlighter__collateLines(highlights) {
      var t1, t2,
        highlightsByUrl = A.groupBy(highlights, new A.Highlighter__collateLines_closure(), type$._Highlight, type$.Object);
      for (t1 = A._instanceType(highlightsByUrl), t2 = new A.LinkedHashMapValueIterator(highlightsByUrl, highlightsByUrl._modifications, highlightsByUrl._first, t1._eval$1("LinkedHashMapValueIterator<2>")); t2.moveNext$0();)
        J.sort$1$ax(t2.__js_helper$_current, new A.Highlighter__collateLines_closure0());
      t1 = t1._eval$1("LinkedHashMapEntriesIterable<1,2>");
      t2 = t1._eval$1("ExpandIterable<Iterable.E,_Line>");
      t1 = A.List_List$_of(new A.ExpandIterable(new A.LinkedHashMapEntriesIterable(highlightsByUrl, t1), t1._eval$1("Iterable<_Line>(Iterable.E)")._as(new A.Highlighter__collateLines_closure1()), t2), t2._eval$1("Iterable.E"));
      return t1;
    },
    _Highlight$(span, primary) {
      var t1 = new A._Highlight_closure(span).call$0();
      return new A._Highlight(t1, true, null);
    },
    _Highlight__normalizeNewlines(span) {
      var endOffset, t1, i, t2, t3, t4,
        text = span.get$text();
      if (!B.JSString_methods.contains$1(text, "\r\n"))
        return span;
      endOffset = span.get$end().get$offset();
      for (t1 = text.length - 1, i = 0; i < t1; ++i)
        if (text.charCodeAt(i) === 13 && text.charCodeAt(i + 1) === 10)
          --endOffset;
      t1 = span.get$start();
      t2 = span.get$sourceUrl();
      t3 = span.get$end().get$line();
      t2 = A.SourceLocation$(endOffset, span.get$end().get$column(), t3, t2);
      t3 = A.stringReplaceAllUnchecked(text, "\r\n", "\n");
      t4 = span.get$context();
      return A.SourceSpanWithContext$(t1, t2, t3, A.stringReplaceAllUnchecked(t4, "\r\n", "\n"));
    },
    _Highlight__normalizeTrailingNewline(span) {
      var context, text, start, end, t1, t2, t3;
      if (!B.JSString_methods.endsWith$1(span.get$context(), "\n"))
        return span;
      if (B.JSString_methods.endsWith$1(span.get$text(), "\n\n"))
        return span;
      context = B.JSString_methods.substring$2(span.get$context(), 0, span.get$context().length - 1);
      text = span.get$text();
      start = span.get$start();
      end = span.get$end();
      if (B.JSString_methods.endsWith$1(span.get$text(), "\n")) {
        t1 = A.findLineStart(span.get$context(), span.get$text(), span.get$start().get$column());
        t1.toString;
        t1 = t1 + span.get$start().get$column() + span.get$length(span) === span.get$context().length;
      } else
        t1 = false;
      if (t1) {
        text = B.JSString_methods.substring$2(span.get$text(), 0, span.get$text().length - 1);
        if (text.length === 0)
          end = start;
        else {
          t1 = span.get$end().get$offset();
          t2 = span.get$sourceUrl();
          t3 = span.get$end().get$line();
          end = A.SourceLocation$(t1 - 1, A._Highlight__lastLineLength(context), t3 - 1, t2);
          start = span.get$start().get$offset() === span.get$end().get$offset() ? end : span.get$start();
        }
      }
      return A.SourceSpanWithContext$(start, end, text, context);
    },
    _Highlight__normalizeEndOfLine(span) {
      var text, t1, t2, t3, t4;
      if (span.get$end().get$column() !== 0)
        return span;
      if (span.get$end().get$line() === span.get$start().get$line())
        return span;
      text = B.JSString_methods.substring$2(span.get$text(), 0, span.get$text().length - 1);
      t1 = span.get$start();
      t2 = span.get$end().get$offset();
      t3 = span.get$sourceUrl();
      t4 = span.get$end().get$line();
      t3 = A.SourceLocation$(t2 - 1, text.length - B.JSString_methods.lastIndexOf$1(text, "\n") - 1, t4 - 1, t3);
      return A.SourceSpanWithContext$(t1, t3, text, B.JSString_methods.endsWith$1(span.get$context(), "\n") ? B.JSString_methods.substring$2(span.get$context(), 0, span.get$context().length - 1) : span.get$context());
    },
    _Highlight__lastLineLength(text) {
      var t2,
        t1 = text.length;
      if (t1 === 0)
        return 0;
      else {
        t2 = t1 - 1;
        if (!(t2 >= 0))
          return A.ioore(text, t2);
        if (text.charCodeAt(t2) === 10)
          return t1 === 1 ? 0 : t1 - B.JSString_methods.lastIndexOf$2(text, "\n", t1 - 2) - 1;
        else
          return t1 - B.JSString_methods.lastIndexOf$1(text, "\n") - 1;
      }
    },
    Highlighter: function Highlighter(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._lines = t0;
      _._primaryColor = t1;
      _._secondaryColor = t2;
      _._paddingBeforeSidebar = t3;
      _._maxMultilineSpans = t4;
      _._multipleFiles = t5;
      _._highlighter$_buffer = t6;
    },
    Highlighter_closure: function Highlighter_closure(t0) {
      this.color = t0;
    },
    Highlighter$__closure: function Highlighter$__closure() {
    },
    Highlighter$___closure: function Highlighter$___closure() {
    },
    Highlighter$__closure0: function Highlighter$__closure0() {
    },
    Highlighter__collateLines_closure: function Highlighter__collateLines_closure() {
    },
    Highlighter__collateLines_closure0: function Highlighter__collateLines_closure0() {
    },
    Highlighter__collateLines_closure1: function Highlighter__collateLines_closure1() {
    },
    Highlighter__collateLines__closure: function Highlighter__collateLines__closure(t0) {
      this.line = t0;
    },
    Highlighter_highlight_closure: function Highlighter_highlight_closure() {
    },
    Highlighter__writeFileStart_closure: function Highlighter__writeFileStart_closure(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure: function Highlighter__writeMultilineHighlights_closure(t0, t1, t2) {
      this.$this = t0;
      this.startLine = t1;
      this.line = t2;
    },
    Highlighter__writeMultilineHighlights_closure0: function Highlighter__writeMultilineHighlights_closure0(t0, t1) {
      this.$this = t0;
      this.highlight = t1;
    },
    Highlighter__writeMultilineHighlights_closure1: function Highlighter__writeMultilineHighlights_closure1(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure2: function Highlighter__writeMultilineHighlights_closure2(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.current = t2;
      _.startLine = t3;
      _.line = t4;
      _.highlight = t5;
      _.endLine = t6;
    },
    Highlighter__writeMultilineHighlights__closure: function Highlighter__writeMultilineHighlights__closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Highlighter__writeMultilineHighlights__closure0: function Highlighter__writeMultilineHighlights__closure0(t0, t1) {
      this.$this = t0;
      this.vertical = t1;
    },
    Highlighter__writeHighlightedText_closure: function Highlighter__writeHighlightedText_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.text = t1;
      _.startColumn = t2;
      _.endColumn = t3;
    },
    Highlighter__writeIndicator_closure: function Highlighter__writeIndicator_closure(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure0: function Highlighter__writeIndicator_closure0(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure1: function Highlighter__writeIndicator_closure1(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.coversWholeLine = t1;
      _.line = t2;
      _.highlight = t3;
    },
    Highlighter__writeSidebar_closure: function Highlighter__writeSidebar_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.end = t2;
    },
    _Highlight: function _Highlight(t0, t1, t2) {
      this.span = t0;
      this.isPrimary = t1;
      this.label = t2;
    },
    _Highlight_closure: function _Highlight_closure(t0) {
      this.span = t0;
    },
    _Line: function _Line(t0, t1, t2, t3) {
      var _ = this;
      _.text = t0;
      _.number = t1;
      _.url = t2;
      _.highlights = t3;
    },
    SourceLocation$(offset, column, line, sourceUrl) {
      if (offset < 0)
        A.throwExpression(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (line < 0)
        A.throwExpression(A.RangeError$("Line may not be negative, was " + line + "."));
      else if (column < 0)
        A.throwExpression(A.RangeError$("Column may not be negative, was " + column + "."));
      return new A.SourceLocation(sourceUrl, offset, line, column);
    },
    SourceLocation: function SourceLocation(t0, t1, t2, t3) {
      var _ = this;
      _.sourceUrl = t0;
      _.offset = t1;
      _.line = t2;
      _.column = t3;
    },
    SourceLocationMixin: function SourceLocationMixin() {
    },
    SourceSpanBase: function SourceSpanBase() {
    },
    SourceSpanFormatException$(message, span, source) {
      return new A.SourceSpanFormatException(source, message, span);
    },
    SourceSpanException: function SourceSpanException() {
    },
    SourceSpanFormatException: function SourceSpanFormatException(t0, t1, t2) {
      this.source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    SourceSpanMixin: function SourceSpanMixin() {
    },
    SourceSpanWithContext$(start, end, text, _context) {
      var t1 = new A.SourceSpanWithContext(_context, start, end, text);
      t1.SourceSpanBase$3(start, end, text);
      if (!B.JSString_methods.contains$1(_context, text))
        A.throwExpression(A.ArgumentError$('The context line "' + _context + '" must contain "' + text + '".', null));
      if (A.findLineStart(_context, text, start.get$column()) == null)
        A.throwExpression(A.ArgumentError$('The span text "' + text + '" must start at column ' + (start.get$column() + 1) + ' in a line within "' + _context + '".', null));
      return t1;
    },
    SourceSpanWithContext: function SourceSpanWithContext(t0, t1, t2, t3) {
      var _ = this;
      _._context = t0;
      _.start = t1;
      _.end = t2;
      _.text = t3;
    },
    StellarAccountAddress_StellarAccountAddress(address) {
      var decode, e, s, t1, exception;
      try {
        decode = new A.XlmAddrDecoder().decode$1(address);
        if (decode.type !== B.XlmAddrTypes_48_PublicKey) {
          t1 = A.StellarAddressException$("Incorrect address type.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", "PublicKey", "type", decode.type.toString$0(0)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
        decode.toString;
        return new A.StellarAccountAddress(address);
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.StellarAddressException)
          throw exception;
        else {
          e = t1;
          s = A.getTraceFromException(exception);
          t1 = A.StellarAddressException$("Invalid Stellar ED25519 public key address.", A.LinkedHashMap_LinkedHashMap$_literal(["error", J.toString$0$(e), "stack", J.toString$0$(s)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
      }
    },
    StellarAccountAddress: function StellarAccountAddress(t0) {
      this.baseAddress = t0;
    },
    StellarContractAddress_StellarContractAddress(address) {
      var decode, e, s, t1, exception;
      try {
        decode = new A.XlmAddrDecoder().decode$1(address);
        if (decode.type !== B.XlmAddrTypes_16_Contract) {
          t1 = A.StellarAddressException$("Incorrect address type.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", "Contract", "type", decode.type.toString$0(0)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
        decode.toString;
        return new A.StellarContractAddress(address);
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.StellarAddressException)
          throw exception;
        else {
          e = t1;
          s = A.getTraceFromException(exception);
          t1 = A.StellarAddressException$("Invalid Stellar contract address.", A.LinkedHashMap_LinkedHashMap$_literal(["error", J.toString$0$(e), "stack", J.toString$0$(s)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
      }
    },
    StellarContractAddress: function StellarContractAddress(t0) {
      this.baseAddress = t0;
    },
    StellarMuxedAddress_StellarMuxedAddress(address) {
      var decode, e, s, t1, t2, exception;
      try {
        decode = new A.XlmAddrDecoder().decode$1(address);
        if (decode.type !== B.XlmAddrTypes_96_Muxed) {
          t1 = A.StellarAddressException$("Incorrect address type.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", "Muxed", "type", decode.type.toString$0(0)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
        t1 = decode.baseAddress;
        t2 = decode.accountId;
        t2.toString;
        t2 = A.BigIntHelper_get_asUint64(t2);
        return new A.StellarMuxedAddress(t2, address, t1);
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.StellarAddressException)
          throw exception;
        else {
          e = t1;
          s = A.getTraceFromException(exception);
          t1 = A.StellarAddressException$("Invalid Muxed address.", A.LinkedHashMap_LinkedHashMap$_literal(["error", J.toString$0$(e), "stack", J.toString$0$(s)], type$.String, type$.dynamic));
          throw A.wrapException(t1);
        }
      }
    },
    StellarMuxedAddress: function StellarMuxedAddress(t0, t1, t2) {
      this.accountId = t0;
      this.muxedAddress = t1;
      this.baseAddress = t2;
    },
    StellarAddress_StellarAddress$fromBase32Addr(address) {
      switch (new A.XlmAddrDecoder().decode$1(address).type) {
        case B.XlmAddrTypes_96_Muxed:
          return A.StellarMuxedAddress_StellarMuxedAddress(address);
        case B.XlmAddrTypes_48_PublicKey:
          return A.StellarAccountAddress_StellarAccountAddress(address);
        case B.XlmAddrTypes_16_Contract:
          return A.StellarContractAddress_StellarContractAddress(address);
        case B.XlmAddrTypes_144_SecretKey:
          throw A.wrapException(B.DartStellarPlugingException_1si);
        default:
          throw A.wrapException(B.DartStellarPlugingException_eIz);
      }
    },
    StellarAddress: function StellarAddress() {
    },
    StellarAddressException$(message, details) {
      return new A.StellarAddressException(message, details);
    },
    StellarAddressException: function StellarAddressException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    DartStellarPlugingException: function DartStellarPlugingException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    StringScannerException: function StringScannerException(t0, t1, t2) {
      this.source = t0;
      this._span_exception$_message = t1;
      this._span = t2;
    },
    StringScanner: function StringScanner(t0, t1) {
      var _ = this;
      _.sourceUrl = t0;
      _.string = t1;
      _._string_scanner$_position = 0;
      _._lastMatchPosition = _._lastMatch = null;
    },
    TonAddress_TonAddress$fromState(bounceable, state, workChain) {
      var hash,
        t1 = new A.Builder(A.BitBuilder$(1023), A._setArrayType([], type$.JSArray_Cell));
      state.store$1(t1);
      hash = t1.endCell$0().hash$0();
      t1 = A._setArrayType([], type$.JSArray_FriendlyAddressFlags);
      if (bounceable)
        t1.push(B.FriendlyAddressFlags_17);
      else
        t1.push(B.FriendlyAddressFlags_81);
      return new A.TonAddress(workChain, hash, A.List_List$unmodifiable(t1, type$.FriendlyAddressFlags));
    },
    TonAddress_TonAddress(address) {
      var decode, t1, flags;
      $.$get$TonAddress__decoder();
      A.AddrKeyValidator_nullOrValidateAddressArgs(type$.Map_String_dynamic._as(A.LinkedHashMap_LinkedHashMap$_literal(["workchain", null], type$.String, type$.dynamic)), "workchain", type$.int);
      decode = A.TonAddressUtils_decodeAddress(address);
      t1 = type$.FriendlyAddressFlags;
      flags = A.List_List$from(decode.flags, true, t1);
      return new A.TonAddress(decode.workchain, decode.hash, A.List_List$unmodifiable(flags, t1));
    },
    TonAddress: function TonAddress(t0, t1, t2) {
      this.workChain = t0;
      this.hash = t1;
      this.defaultFlags = t2;
    },
    _BitBuilderUtils_validateBits(bits) {
      if (bits < 0)
        throw A.wrapException(A.BocException$("Invalid bit length.", A.LinkedHashMap_LinkedHashMap$_literal(["length", bits], type$.String, type$.dynamic)));
    },
    _BitBuilderUtils_parseBigint(value, sign) {
      var val,
        t1 = A._isInt(value);
      if (!t1 && !(value instanceof A._BigIntImpl))
        throw A.wrapException(A.BocException$("Invalid integer type. value must be int or BigInt.", A.LinkedHashMap_LinkedHashMap$_literal(["value", value, "type", J.get$runtimeType$(value).toString$0(0)], type$.String, type$.dynamic)));
      val = t1 ? A._BigIntImpl__BigIntImpl$from(value) : type$.BigInt._as(value);
      if (!sign && val._isNegative)
        throw A.wrapException(A.BocException$("Invalid unsigned integer.", A.LinkedHashMap_LinkedHashMap$_literal(["value", val], type$.String, type$.dynamic)));
      return val;
    },
    BitBuilder$(size) {
      return new A.BitBuilder(A.List_List$filled(B.JSNumber_methods.ceil$0(size / 8), 0, false, type$.int));
    },
    BitBuilder: function BitBuilder(t0) {
      this._bit_builder$_bytes = t0;
      this._bit_builder$_length = 0;
    },
    BitReader: function BitReader(t0, t1, t2) {
      this._checkpoints = t0;
      this._bits = t1;
      this._bit_reader$_offset = t2;
    },
    _BitStringUtils_validateOffset(offset, $length, at) {
      var index,
        _s23_ = "Offset is out of bounds";
      if (B.JSInt_methods.get$isNegative(offset))
        throw A.wrapException(A.BocException$(_s23_, A.LinkedHashMap_LinkedHashMap$_literal(["offset", offset, "length", $length, "at", at], type$.String, type$.dynamic)));
      index = offset + (at == null ? 0 : at);
      if (index > $length)
        throw A.wrapException(A.BocException$(_s23_, A.LinkedHashMap_LinkedHashMap$_literal(["offset", index, "length", $length, "at", at], type$.String, type$.dynamic)));
    },
    BitString_BitString(data, offset, $length) {
      if ($length < 0)
        throw A.wrapException(A.BocException$("Length is out of bounds", A.LinkedHashMap_LinkedHashMap$_literal(["length", $length], type$.String, type$.dynamic)));
      return new A.BitString(offset, $length, A.BytesUtils_toBytes(data, true));
    },
    BitString: function BitString(t0, t1, t2) {
      this._bit_string$_offset = t0;
      this._bit_string$_length = t1;
      this._bit_string$_data = t2;
    },
    Builder: function Builder(t0, t1) {
      this._builder$_bits = t0;
      this._refs = t1;
    },
    Cell_Cell$fromBytes(src) {
      var parsed = A.BocSerialization_deserialize(src),
        t1 = parsed.length;
      if (t1 !== 1)
        throw A.wrapException(A.BocException$("Deserialized more than one cell.", A.LinkedHashMap_LinkedHashMap$_literal(["cells", parsed], type$.String, type$.dynamic)));
      if (0 >= t1)
        return A.ioore(parsed, 0);
      return parsed[0];
    },
    Cell$_(bits, depths, hashes, mask, refs, type) {
      var t2,
        t1 = A._arrayInstanceType(hashes);
      t1 = A.List_List$unmodifiable(new A.MappedListIterable(hashes, t1._eval$1("@(1)")._as(new A.Cell$__closure()), t1._eval$1("MappedListIterable<1,@>")), type$.List_int);
      t2 = A.List_List$unmodifiable(depths, type$.int);
      return new A.Cell(type, bits, A.List_List$unmodifiable(refs, type$.Cell), mask, t1, t2);
    },
    Cell_Cell(bits, exotic, refs) {
      var type, wonders, mask, depths, hashes, t1;
      if (exotic) {
        type = A.CellUtils_resolveExotic(bits, refs).type;
        wonders = A.CellUtils_wonderCalculator(type, bits, refs);
        mask = wonders.mask;
        depths = wonders.depths;
        hashes = wonders.hashes;
      } else {
        if (refs.length > 4)
          throw A.wrapException(A.BocException$("Invalid number of references", null));
        t1 = bits._bit_string$_length;
        if (t1 > 1023)
          throw A.wrapException(A.BocException$("Bits overflow", A.LinkedHashMap_LinkedHashMap$_literal(["maximum_length", 1023, "length", t1], type$.String, type$.dynamic)));
        wonders = A.CellUtils_wonderCalculator(B.CellType_Ordinary_m1, bits, refs);
        mask = wonders.mask;
        depths = wonders.depths;
        hashes = wonders.hashes;
        type = B.CellType_Ordinary_m1;
      }
      return A.Cell$_(bits, depths, hashes, mask, refs, type);
    },
    Cell: function Cell(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.type = t0;
      _.bits = t1;
      _.refs = t2;
      _.mask = t3;
      _._hashes = t4;
      _._depths = t5;
    },
    Cell$__closure: function Cell$__closure() {
    },
    CellType_fromValue(tag) {
      var t1, exception;
      try {
        t1 = B.JSArray_methods.firstWhere$1(B.List_6Oo, new A.CellType_fromValue_closure(tag));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    CellType: function CellType(t0, t1) {
      this.name = t0;
      this.tag = t1;
    },
    CellType_fromValue_closure: function CellType_fromValue_closure(t0) {
      this.tag = t0;
    },
    Slice: function Slice(t0, t1) {
      this._reader = t0;
      this._slice$_refs = t1;
      this._refsOffset = 0;
    },
    BocException$(message, details) {
      return new A.BocException(message, details);
    },
    BocException: function BocException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    ExoticMerkleProof: function ExoticMerkleProof() {
    },
    ExoticMerkleUpdate: function ExoticMerkleUpdate() {
    },
    Pruned: function Pruned(t0, t1) {
      this.hash = t0;
      this.depth = t1;
    },
    ExoticPruned: function ExoticPruned(t0, t1) {
      this.mask = t0;
      this.pruned = t1;
    },
    _LevelMaskUtils_countSetBits(n) {
      n -= B.JSInt_methods._shrOtherPositive$1(n, 1) & 1431655765;
      n = (n & 858993459) + (B.JSInt_methods._shrOtherPositive$1(n, 2) & 858993459);
      return (n + (n >>> 4) & 252645135) * 16843009 >>> 24;
    },
    LevelMask_LevelMask(mask) {
      var hashIndex,
        n = mask - (B.JSInt_methods._shrOtherPositive$1(mask, 1) & 1431655765);
      n = (n & 858993459) + (B.JSInt_methods._shrOtherPositive$1(n, 2) & 858993459);
      hashIndex = (n + (n >>> 4) & 252645135) * 16843009 >>> 24;
      return new A.LevelMask(mask, hashIndex, hashIndex + 1);
    },
    LevelMask: function LevelMask(t0, t1, t2) {
      var _ = this;
      _._mask = t0;
      _._hashIndex = t1;
      _._hashCount = t2;
      _.__LevelMask_level_FI = $;
    },
    ResolvedCellResult$(depths, hashes, mask, type) {
      var t1 = A._arrayInstanceType(hashes);
      return new A.ResolvedCellResult(type, A.List_List$unmodifiable(new A.MappedListIterable(hashes, t1._eval$1("@(1)")._as(new A.ResolvedCellResult_closure()), t1._eval$1("MappedListIterable<1,@>")), type$.List_int), A.List_List$unmodifiable(depths, type$.int), mask);
    },
    ResolvedCellResult: function ResolvedCellResult(t0, t1, t2, t3) {
      var _ = this;
      _.type = t0;
      _.hashes = t1;
      _.depths = t2;
      _.mask = t3;
    },
    ResolvedCellResult_closure: function ResolvedCellResult_closure() {
    },
    CellTopoloigicalSort: function CellTopoloigicalSort(t0, t1) {
      this.cell = t0;
      this.refs = t1;
    },
    _ParseBocResult$(absent, cellData, cells, hasCrc32, hasIndex, index, magicNumber, offBytes, root, roots, size, totalCellSize) {
      A.BytesUtils_tryToBytes(index, true);
      return new A._ParseBocResult(size, cells, A.BytesUtils_toBytes(cellData, true), A.BytesUtils_toBytes(root, true));
    },
    _BocSerializationUtils_getHashesCountFromMask(mask) {
      var n, i;
      for (n = 0, i = 0; i < 3; ++i) {
        n += mask & 1;
        mask = mask >>> 1;
      }
      return n + 1;
    },
    _BocSerializationUtils_parseBoc(src) {
      var size, offBytes, cells, roots, absent, totalCellSize, index, cellData, crc32, hasIdx, hasCrc32c, root, i, loaded, _null = null,
        _s14_ = "Invalid CRC32C",
        t1 = J.getInterceptor$asx(src),
        t2 = A.BitString_BitString(src, 0, t1.get$length(src) * 8),
        t3 = type$.JSArray_int,
        reader = new A.BitReader(A._setArrayType([], t3), t2, 0),
        magic = reader.loadUintBig$1(32).toInt$0(0);
      switch (magic) {
        case 1761568243:
          size = reader.loadUintBig$1(8).toInt$0(0);
          offBytes = reader.loadUintBig$1(8).toInt$0(0);
          t1 = size * 8;
          cells = reader.loadUintBig$1(t1).toInt$0(0);
          roots = reader.loadUintBig$1(t1).toInt$0(0);
          absent = reader.loadUintBig$1(t1).toInt$0(0);
          totalCellSize = reader.loadUintBig$1(offBytes * 8).toInt$0(0);
          index = reader.loadBuffer$1(cells * offBytes);
          return A._ParseBocResult$(absent, reader.loadBuffer$1(totalCellSize), cells, _null, _null, index, magic, offBytes, A._setArrayType([0], t3), roots, size, totalCellSize);
        case 2898503464:
          size = reader.loadUintBig$1(8).toInt$0(0);
          offBytes = reader.loadUintBig$1(8).toInt$0(0);
          t2 = size * 8;
          cells = reader.loadUintBig$1(t2).toInt$0(0);
          roots = reader.loadUintBig$1(t2).toInt$0(0);
          absent = reader.loadUintBig$1(t2).toInt$0(0);
          totalCellSize = reader.loadUintBig$1(offBytes * 8).toInt$0(0);
          index = reader.loadBuffer$1(cells * offBytes);
          cellData = reader.loadBuffer$1(totalCellSize);
          crc32 = reader.loadBuffer$1(4);
          if (!A.BytesUtils_bytesEqual(A.CryptoUtils_crc32c(t1.sublist$2(src, 0, t1.get$length(src) - 4)), crc32))
            throw A.wrapException(A.BocException$(_s14_, A.LinkedHashMap_LinkedHashMap$_literal(["crc32", crc32, "expected", t1.sublist$2(src, 0, t1.get$length(src) - 4)], type$.String, type$.dynamic)));
          return A._ParseBocResult$(absent, cellData, cells, _null, _null, index, magic, offBytes, A._setArrayType([0], t3), roots, size, totalCellSize);
        case 3052313714:
          hasIdx = reader.loadBit$0();
          hasCrc32c = reader.loadBit$0();
          reader.loadUintBig$1(1).toInt$0(0);
          reader.loadUintBig$1(2).toInt$0(0);
          size = reader.loadUintBig$1(3).toInt$0(0);
          offBytes = reader.loadUintBig$1(8).toInt$0(0);
          t2 = size * 8;
          cells = reader.loadUintBig$1(t2).toInt$0(0);
          roots = reader.loadUintBig$1(t2).toInt$0(0);
          absent = reader.loadUintBig$1(t2).toInt$0(0);
          totalCellSize = reader.loadUintBig$1(offBytes * 8).toInt$0(0);
          root = A._setArrayType([], t3);
          for (i = 0; i < roots; ++i) {
            loaded = reader._preloadUint$2(t2, reader._bit_reader$_offset);
            reader._bit_reader$_offset += t2;
            B.JSArray_methods.add$1(root, loaded.toInt$0(0));
          }
          index = hasIdx ? reader.loadBuffer$1(cells * offBytes) : _null;
          cellData = reader.loadBuffer$1(totalCellSize);
          if (hasCrc32c) {
            crc32 = reader.loadBuffer$1(4);
            if (!A.BytesUtils_bytesEqual(A.CryptoUtils_crc32c(t1.sublist$2(src, 0, t1.get$length(src) - 4)), crc32))
              throw A.wrapException(A.BocException$(_s14_, A.LinkedHashMap_LinkedHashMap$_literal(["crc32", crc32, "expected", t1.sublist$2(src, 0, t1.get$length(src) - 4)], type$.String, type$.dynamic)));
          }
          return A._ParseBocResult$(absent, cellData, cells, hasCrc32c, hasIdx, index, magic, offBytes, root, roots, size, totalCellSize);
        default:
          throw A.wrapException(A.BocException$("Invalid magic number.", A.LinkedHashMap_LinkedHashMap$_literal(["magic", magic, "expected", B.JSArray_methods.join$1(A._setArrayType([1761568243, 2898503464, 3052313714], t3), "or ")], type$.String, type$.dynamic)));
      }
    },
    _BocSerializationUtils_writeCellToBuilder(cell, refs, sizeBytes, to) {
      var t2, _i,
        d1 = A.CellUtils_getRefsDescriptor(cell.refs, cell.mask._mask, cell.type),
        t1 = cell.bits,
        d2 = A.CellUtils_getBitsDescriptor(t1);
      to.writeUint$2(d1, 8);
      to.writeUint$2(d2, 8);
      to.writeBuffer$1(A.BocUtils_bitsToPaddedBuffer(t1).buffer$0(0));
      for (t1 = refs.length, t2 = sizeBytes * 8, _i = 0; _i < t1; ++_i)
        to.writeUint$2(refs[_i], t2);
    },
    _BocSerializationUtils_readCell(reader, sizeBytes) {
      var t2, bits, refsList, i, loaded,
        d1 = reader.loadUintBig$1(8).toInt$0(0),
        refsCount = B.JSInt_methods.$mod(d1, 8),
        d2 = reader.loadUintBig$1(8).toInt$0(0),
        dataBytesize = B.JSNumber_methods.ceil$0(d2 / 2),
        t1 = B.JSInt_methods.$mod(d2, 2),
        levelMask = B.JSInt_methods._shrOtherPositive$1(d1, 5),
        hasHashes = (d1 & 16) !== 0,
        hashesSize = hasHashes ? A._BocSerializationUtils_getHashesCountFromMask(levelMask & 7) * 32 : 0,
        depthSize = hasHashes ? A._BocSerializationUtils_getHashesCountFromMask(levelMask & 7) * 2 : 0;
      reader.skip$1(0, hashesSize * 8);
      reader.skip$1(0, depthSize * 8);
      if (dataBytesize > 0) {
        t2 = dataBytesize * 8;
        bits = t1 !== 0 ? reader.loadPaddedBits$1(t2) : reader.loadBits$1(t2);
      } else
        bits = B.BitString_0_0_List_empty;
      refsList = A._setArrayType([], type$.JSArray_int);
      for (t1 = sizeBytes * 8, i = 0; i < refsCount; ++i) {
        loaded = reader._preloadUint$2(t1, reader._bit_reader$_offset);
        reader._bit_reader$_offset += t1;
        B.JSArray_methods.add$1(refsList, loaded.toInt$0(0));
      }
      return new A._ReadCellResult(bits, A.List_List$unmodifiable(refsList, type$.int), (d1 & 8) !== 0, null);
    },
    BocSerialization_serialize(crc32, idx, root) {
      var t1, totalCellSize, _i, t2, offsetBytes, totalSize, builder, i, res,
        allCells = A.CellUtils_topologicalSort(root),
        cellsNum = allCells.length,
        sizeBytes = B.JSNumber_methods.toInt$0(B.JSInt_methods.clamp$2(B.JSNumber_methods.ceil$0(B.JSInt_methods.toRadixString$1(cellsNum, 2).length / 8), 1, 3)),
        index = A._setArrayType([], type$.JSArray_int);
      for (t1 = allCells.length, totalCellSize = 0, _i = 0; _i < allCells.length; allCells.length === t1 || (0, A.throwConcurrentModificationError)(allCells), ++_i) {
        t2 = allCells[_i].cell;
        totalCellSize += 2 + B.JSInt_methods._tdivFast$1(t2.bits._bit_string$_length + 7, 8) + t2.refs.length * sizeBytes;
        B.JSArray_methods.add$1(index, totalCellSize);
      }
      offsetBytes = B.JSNumber_methods.toInt$0(B.JSInt_methods.clamp$2(B.JSNumber_methods.ceil$0(B.JSInt_methods.toRadixString$1(totalCellSize, 2).length / 8), 1, 3));
      totalSize = (6 + 3 * sizeBytes + offsetBytes + sizeBytes + totalCellSize + 4) * 8;
      builder = A.BitBuilder$(totalSize);
      builder.writeUint$2(3052313714, 32);
      builder.writeBit$1(false);
      builder.writeBit$1(true);
      builder.writeBit$1(false);
      builder.writeUint$2(0, 2);
      builder.writeUint$2(sizeBytes, 3);
      builder.writeUint$2(offsetBytes, 8);
      t1 = sizeBytes * 8;
      builder.writeUint$2(cellsNum, t1);
      builder.writeUint$2(1, t1);
      builder.writeUint$2(0, t1);
      builder.writeUint$2(totalCellSize, offsetBytes * 8);
      builder.writeUint$2(0, t1);
      for (i = 0; i < cellsNum; ++i) {
        if (!(i < allCells.length))
          return A.ioore(allCells, i);
        t1 = allCells[i];
        A._BocSerializationUtils_writeCellToBuilder(t1.cell, t1.refs, sizeBytes, builder);
      }
      builder.writeBuffer$1(A.CryptoUtils_crc32c(builder.buffer$0(0)));
      res = builder.buffer$0(0);
      t1 = res.length;
      t2 = B.JSInt_methods._tdivFast$1(totalSize, 8);
      if (t1 !== t2)
        throw A.wrapException(A.BocException$("Serialization cannot verify length.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", t2, "length", t1], type$.String, type$.dynamic)));
      return res;
    },
    BocSerialization_deserialize(src) {
      var reader, _length, cells, index, i, t2, refs, cell, t3, t4, _i, r, result, roots,
        boc = A._BocSerializationUtils_parseBoc(src),
        t1 = boc.cellData;
      t1 = A.BitString_BitString(t1, 0, t1.length * 8);
      reader = new A.BitReader(A._setArrayType([], type$.JSArray_int), t1, 0);
      _length = boc.cells;
      cells = J.JSArray_JSArray$allocateGrowable(_length, type$._ReadCellResult);
      for (t1 = boc.size, index = 0; index < _length; ++index)
        cells[index] = A._BocSerializationUtils_readCell(reader, t1);
      for (t1 = cells.length, i = t1 - 1, t2 = type$.JSArray_Cell; i >= 0; --i) {
        refs = A._setArrayType([], t2);
        cell = cells[i];
        for (t3 = cell.refsList, t4 = t3.length, _i = 0; _i < t4; ++_i) {
          r = t3[_i];
          if (!(r >= 0 && r < t1))
            return A.ioore(cells, r);
          result = cells[r].result;
          if (result == null)
            throw A.wrapException(A.BocException$("Invalid BOC file", null));
          B.JSArray_methods.add$1(refs, result);
        }
        cell.result = A.Cell_Cell(cell.bits, cell.exotic, refs);
      }
      roots = A._setArrayType([], t2);
      for (t2 = boc.root, i = 0; i < t2.length; ++i) {
        t3 = t2[i];
        if (!(t3 >= 0 && t3 < t1))
          return A.ioore(cells, t3);
        t3 = cells[t3].result;
        t3.toString;
        B.JSArray_methods.add$1(roots, t3);
      }
      return roots;
    },
    _ParseBocResult: function _ParseBocResult(t0, t1, t2, t3) {
      var _ = this;
      _.size = t0;
      _.cells = t1;
      _.cellData = t2;
      _.root = t3;
    },
    _ReadCellResult: function _ReadCellResult(t0, t1, t2, t3) {
      var _ = this;
      _.bits = t0;
      _.refsList = t1;
      _.exotic = t2;
      _.result = t3;
    },
    CellUtils_topologicalSort(src) {
      var t3, t4, cells, t5, _i, cell, t6, t7, t8, toHex, _i0, visit, first, indexes, i,
        t1 = type$.JSArray_Cell,
        pending = A._setArrayType([src], t1),
        t2 = type$.String,
        allCells = A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.Map_String_dynamic),
        notPermCells = A.LinkedHashSet_LinkedHashSet$_empty(t2),
        sorted = A._setArrayType([], type$.JSArray_String);
      for (t3 = type$.dynamic, t4 = type$.Cell; pending.length !== 0;) {
        cells = A.List_List$from(pending, true, t4);
        pending = A._setArrayType([], t1);
        for (t5 = cells.length, _i = 0; _i < cells.length; cells.length === t5 || (0, A.throwConcurrentModificationError)(cells), ++_i) {
          cell = cells[_i];
          t6 = cell._hashes;
          t7 = t6.length;
          t8 = Math.min(t7 - 1, 3);
          if (t8 >>> 0 !== t8 || t8 >= t7)
            return A.ioore(t6, t8);
          toHex = B.C__Hex.encode$2$lowerCase(t6[t8], true);
          if (allCells.containsKey$1(toHex))
            continue;
          notPermCells.add$1(0, toHex);
          t6 = cell.refs;
          t7 = A._arrayInstanceType(t6);
          t8 = t7._eval$1("MappedListIterable<1,String>");
          t7 = A.List_List$_of(new A.MappedListIterable(t6, t7._eval$1("String(1)")._as(new A.CellUtils_topologicalSort_closure()), t8), t8._eval$1("ListIterable.E"));
          allCells.$indexSet(0, toHex, A.LinkedHashMap_LinkedHashMap$_literal(["cell", cell, "refs", t7], t2, t3));
          for (t7 = t6.length, _i0 = 0; _i0 < t7; ++_i0)
            B.JSArray_methods.add$1(pending, t6[_i0]);
        }
      }
      visit = new A.CellUtils_topologicalSort_visit(notPermCells, A.LinkedHashSet_LinkedHashSet$_empty(t2), allCells, sorted);
      for (t1 = notPermCells.$ti._precomputed1; notPermCells._collection$_length !== 0;) {
        first = notPermCells._collection$_first;
        if (first == null)
          A.throwExpression(A.StateError$("No elements"));
        visit.call$1(t1._as(first._element));
      }
      indexes = A.LinkedHashMap_LinkedHashMap$_empty(t2, type$.int);
      for (i = 0; t1 = sorted.length, i < t1; ++i) {
        t2 = t1 - i - 1;
        if (!(t2 >= 0))
          return A.ioore(sorted, t2);
        indexes.$indexSet(0, sorted[t2], i);
      }
      t1 = type$.ReversedListIterable_String;
      t2 = t1._eval$1("MappedListIterable<ListIterable.E,CellTopoloigicalSort>");
      t1 = A.List_List$_of(new A.MappedListIterable(new A.ReversedListIterable(sorted, t1), t1._eval$1("CellTopoloigicalSort(ListIterable.E)")._as(new A.CellUtils_topologicalSort_closure0(allCells, indexes)), t2), t2._eval$1("ListIterable.E"));
      return t1;
    },
    CellUtils_getRefsDescriptor(refs, levelMask, type) {
      var t1 = refs.length;
      return t1 + (type !== B.CellType_Ordinary_m1 ? 1 : 0) * 8 + levelMask * 32;
    },
    CellUtils_getBitsDescriptor(bits) {
      var t1 = bits._bit_string$_length / 8;
      return B.JSInt_methods.toInt$0(B.JSNumber_methods.ceil$0(t1) + B.JSNumber_methods.floor$0(t1));
    },
    CellUtils_getRepr(originalBits, bits, refs, level, levelMask, type) {
      var buff, t1, i, t2, t3, t4, _i, t5, c, t6, t7, childDepth, reprCursor0, childHash,
        reprCursor = 2 + B.JSNumber_methods.ceil$0(bits._bit_string$_length / 8),
        repr = A.List_List$filled(reprCursor + 34 * refs.length, 0, false, type$.int);
      B.JSArray_methods.$indexSet(repr, 0, A.CellUtils_getRefsDescriptor(refs, levelMask, type));
      B.JSArray_methods.$indexSet(repr, 1, A.CellUtils_getBitsDescriptor(originalBits));
      buff = A.BocUtils_bitsToPaddedBuffer(bits).buffer$0(0);
      for (t1 = buff.length, i = 0; i < t1; ++i)
        B.JSArray_methods.$indexSet(repr, 2 + i, buff[i]);
      for (t1 = refs.length, t2 = type !== B.CellType_MerkleProof_3, t3 = type === B.CellType_MerkleUpdate_4, t4 = level + 1, _i = 0; t5 = refs.length, _i < t5; refs.length === t1 || (0, A.throwConcurrentModificationError)(refs), ++_i) {
        c = refs[_i];
        t5 = !t2 || t3;
        t6 = c._depths;
        t7 = t6.length;
        if (t5) {
          t5 = Math.min(t7 - 1, t4);
          if (t5 >>> 0 !== t5 || t5 >= t7)
            return A.ioore(t6, t5);
          childDepth = t6[t5];
        } else {
          t5 = Math.min(t7 - 1, level);
          if (t5 >>> 0 !== t5 || t5 >= t7)
            return A.ioore(t6, t5);
          childDepth = t6[t5];
        }
        reprCursor0 = reprCursor + 1;
        B.JSArray_methods.$indexSet(repr, reprCursor, B.JSNumber_methods.floor$0(childDepth / 256));
        reprCursor = reprCursor0 + 1;
        B.JSArray_methods.$indexSet(repr, reprCursor0, B.JSInt_methods.$mod(childDepth, 256));
      }
      for (_i = 0; _i < refs.length; refs.length === t5 || (0, A.throwConcurrentModificationError)(refs), ++_i, reprCursor = reprCursor0) {
        c = refs[_i];
        t1 = !t2 || t3;
        t6 = c._hashes;
        t7 = t6.length;
        if (t1) {
          t1 = Math.min(t7 - 1, t4);
          if (t1 >>> 0 !== t1 || t1 >= t7)
            return A.ioore(t6, t1);
          childHash = t6[t1];
        } else {
          t1 = Math.min(t7 - 1, level);
          if (t1 >>> 0 !== t1 || t1 >= t7)
            return A.ioore(t6, t1);
          childHash = t6[t1];
        }
        reprCursor0 = reprCursor + 32;
        B.JSArray_methods.setRange$3(repr, reprCursor, reprCursor0, childHash);
      }
      return repr;
    },
    CellUtils_exoticLibrary(bits, refs) {
      var type,
        t1 = A._setArrayType([], type$.JSArray_int),
        t2 = bits._bit_string$_length;
      if (t2 !== 264)
        throw A.wrapException(A.BocException$("Invalid Library cell bits length", A.LinkedHashMap_LinkedHashMap$_literal(["expected", "8 + 256", "length", t2], type$.String, type$.dynamic)));
      type = new A.BitReader(t1, bits, 0).loadUintBig$1(8).toInt$0(0);
      if (type !== 2) {
        t1 = A.CellType_fromValue(type);
        throw A.wrapException(A.BocException$("Invalid Library cell type.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", B.CellType_Library_2, "type", t1 == null ? "" + type : t1], type$.String, type$.dynamic)));
      }
    },
    CellUtils_exoticMerkleProof(bits, refs) {
      var type, proofHash, proofDepth, refHash,
        reader = new A.BitReader(A._setArrayType([], type$.JSArray_int), bits, 0),
        t1 = bits._bit_string$_length;
      if (t1 !== 280)
        throw A.wrapException(A.BocException$("Invalid Merkle Proof cell bits length.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", 280, "length", t1], type$.String, type$.dynamic)));
      t1 = refs.length;
      if (t1 !== 1)
        throw A.wrapException(A.BocException$("Invalid Merkle Proof cell reference length.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", 1, "length", t1], type$.String, type$.dynamic)));
      type = reader.loadUintBig$1(8).toInt$0(0);
      if (type !== 3) {
        t1 = A.CellType_fromValue(type);
        throw A.wrapException(A.BocException$("Merkle Proof cell type.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", B.CellType_MerkleProof_3, "type", t1 == null ? "" + type : t1], type$.String, type$.dynamic)));
      }
      proofHash = reader.loadBuffer$1(32);
      proofDepth = reader.loadUintBig$1(16).toInt$0(0);
      if (0 >= refs.length)
        return A.ioore(refs, 0);
      refHash = refs[0].hash$1$level(0);
      if (0 >= refs.length)
        return A.ioore(refs, 0);
      if (proofDepth !== refs[0].depth$1$level(0) || !A.BytesUtils_bytesEqual(proofHash, refHash))
        throw A.wrapException(A.BocException$("Mismatch in reference", null));
      A.BytesUtils_toBytes(proofHash, true);
      return new A.ExoticMerkleProof();
    },
    CellUtils_exoticMerkleUpdate(bits, refs) {
      var type, proofHash1, proofHash2, proofDepth1, proofDepth2, _null = null,
        reader = new A.BitReader(A._setArrayType([], type$.JSArray_int), bits, 0),
        t1 = bits._bit_string$_length;
      if (t1 !== 552)
        throw A.wrapException(A.BocException$("Invalid Merkle Update cell bits length.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", 552, "length", t1], type$.String, type$.dynamic)));
      t1 = refs.length;
      if (t1 !== 2)
        throw A.wrapException(A.BocException$("Invalid Merkle Update cell refs length.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", 2, "length", t1], type$.String, type$.dynamic)));
      type = reader.loadUintBig$1(8).toInt$0(0);
      if (type !== 4) {
        t1 = A.CellType_fromValue(type);
        throw A.wrapException(A.BocException$("Invalid Merkle Update cell type.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", B.CellType_MerkleUpdate_4, "type", t1 == null ? "" + type : t1], type$.String, type$.dynamic)));
      }
      proofHash1 = reader.loadBuffer$1(32);
      proofHash2 = reader.loadBuffer$1(32);
      proofDepth1 = reader.loadUintBig$1(16).toInt$0(0);
      proofDepth2 = reader.loadUintBig$1(16).toInt$0(0);
      if (0 >= refs.length)
        return A.ioore(refs, 0);
      if (proofDepth1 !== refs[0].depth$1$level(0))
        throw A.wrapException(A.BocException$("Mismatch in reference 1", _null));
      if (0 >= refs.length)
        return A.ioore(refs, 0);
      if (!A.BytesUtils_bytesEqual(proofHash1, refs[0].hash$1$level(0)))
        throw A.wrapException(A.BocException$("Invalid Merkle Update cell reference hash.", _null));
      if (1 >= refs.length)
        return A.ioore(refs, 1);
      if (proofDepth2 !== refs[1].depth$1$level(0))
        throw A.wrapException(A.BocException$("Mismatch in reference 2", _null));
      if (1 >= refs.length)
        return A.ioore(refs, 1);
      if (!A.BytesUtils_bytesEqual(proofHash2, refs[1].hash$1$level(0)))
        throw A.wrapException(A.BocException$("Invalid Merkle Update cell reference 2 hash.", _null));
      A.BytesUtils_toBytes(proofHash1, true);
      A.BytesUtils_toBytes(proofHash2, true);
      return new A.ExoticMerkleUpdate();
    },
    CellUtils_exoticPruned(bits, refs) {
      var t2, mask, size, pruned, hashes, depths, i, buf, loaded,
        t1 = type$.JSArray_int,
        reader = new A.BitReader(A._setArrayType([], t1), bits, 0),
        type = reader.loadUintBig$1(8).toInt$0(0);
      if (type !== 1) {
        t1 = A.CellType_fromValue(type);
        throw A.wrapException(A.BocException$("Invalid Pruned branch cell type.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", B.CellType_PrunedBranch_1, "type", t1 == null ? "" + type : t1], type$.String, type$.dynamic)));
      }
      if (refs.length !== 0)
        throw A.wrapException(A.BocException$("Pruned Branch cell have refs", null));
      t2 = bits._bit_string$_length;
      if (t2 === 280)
        mask = A.LevelMask_LevelMask(1);
      else {
        mask = A.LevelMask_LevelMask(reader.loadUintBig$1(8).toInt$0(0));
        if (mask.get$level() < 1 || mask.get$level() > 3)
          throw A.wrapException(A.BocException$("Invalid Pruned Branch cell level", A.LinkedHashMap_LinkedHashMap$_literal(["level", mask.get$level(), "expected", B.JSArray_methods.join$1(A._setArrayType([1, 2, 3], t1), ", ")], type$.String, type$.dynamic)));
        size = 16 + mask.apply$1(mask.get$level() - 1)._hashCount * 272;
        if (t2 !== size)
          throw A.wrapException(A.BocException$("Invalid Pruned branch cell bits length.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", size, "length", t2], type$.String, type$.dynamic)));
      }
      pruned = A._setArrayType([], type$.JSArray_Pruned);
      hashes = A._setArrayType([], type$.JSArray_List_int);
      depths = A._setArrayType([], t1);
      for (i = 0; i < mask.get$level(); ++i) {
        buf = reader._preloadBuffer$2(32, reader._bit_reader$_offset);
        reader._bit_reader$_offset += 256;
        B.JSArray_methods.add$1(hashes, buf);
      }
      for (i = 0; i < mask.get$level(); ++i) {
        loaded = reader._preloadUint$2(16, reader._bit_reader$_offset);
        reader._bit_reader$_offset += 16;
        B.JSArray_methods.add$1(depths, loaded.toInt$0(0));
      }
      for (i = 0; i < mask.get$level(); ++i) {
        if (!(i < hashes.length))
          return A.ioore(hashes, i);
        t1 = hashes[i];
        if (!(i < depths.length))
          return A.ioore(depths, i);
        t2 = depths[i];
        B.JSArray_methods.add$1(pruned, new A.Pruned(A.BytesUtils_toBytes(t1, true), t2));
      }
      return new A.ExoticPruned(mask._mask, pruned);
    },
    CellUtils_resolveExotic(bits, refs) {
      var mask, pruned, t2, t3,
        t1 = type$.JSArray_int,
        typeTag = new A.BitReader(A._setArrayType([], t1), bits, 0)._preloadUint$2(8, 0).toInt$0(0),
        type = A.CellType_fromValue(typeTag),
        depths = A._setArrayType([], t1),
        hashes = A._setArrayType([], type$.JSArray_List_int);
      switch (type) {
        case B.CellType_Library_2:
          A.CellUtils_exoticLibrary(bits, refs);
          mask = A.LevelMask_LevelMask(0);
          break;
        case B.CellType_MerkleProof_3:
          A.CellUtils_exoticMerkleProof(bits, refs);
          if (0 >= refs.length)
            return A.ioore(refs, 0);
          mask = A.LevelMask_LevelMask(B.JSInt_methods._shrOtherPositive$1(refs[0].mask.get$level(), 1));
          break;
        case B.CellType_MerkleUpdate_4:
          A.CellUtils_exoticMerkleUpdate(bits, refs);
          if (0 >= refs.length)
            return A.ioore(refs, 0);
          t1 = refs[0].mask.get$level();
          if (1 >= refs.length)
            return A.ioore(refs, 1);
          mask = A.LevelMask_LevelMask((t1 | refs[1].mask.get$level()) >>> 1);
          break;
        case B.CellType_PrunedBranch_1:
          pruned = A.CellUtils_exoticPruned(bits, refs);
          mask = A.LevelMask_LevelMask(pruned.mask);
          t1 = pruned.pruned;
          t2 = A._arrayInstanceType(t1);
          t3 = t2._eval$1("MappedListIterable<1,List<int>>");
          hashes = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("List<int>(1)")._as(new A.CellUtils_resolveExotic_closure()), t3), t3._eval$1("ListIterable.E"));
          t3 = t2._eval$1("MappedListIterable<1,int>");
          depths = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("int(1)")._as(new A.CellUtils_resolveExotic_closure0()), t3), t3._eval$1("ListIterable.E"));
          break;
        default:
          throw A.wrapException(A.BocException$("Invalid exotic cell type.", A.LinkedHashMap_LinkedHashMap$_literal(["type", type == null ? "" + typeTag : type], type$.String, type$.dynamic)));
      }
      type.toString;
      return A.ResolvedCellResult$(depths, hashes, mask, type);
    },
    CellUtils_wonderCalculator(type, bits, refs) {
      var t1, mask, _i, levelMask, t2, depths, hashes, t3, hashCount, hashIOffset, t4, t5, t6, t7, t8, levelI, hashI, t9, currentBits, t10, currentDepth, r, t11, t12, t13, childDepth, repr, h, out, destI, resolvedHashes, resolvedDepths, thisHashIndex, i, hashIndex,
        _s14_ = "Invalid Level.",
        pruned = null;
      switch (type) {
        case B.CellType_Ordinary_m1:
          for (t1 = refs.length, mask = 0, _i = 0; _i < t1; ++_i)
            mask = (mask | refs[_i].mask._mask) >>> 0;
          levelMask = A.LevelMask_LevelMask(mask);
          break;
        case B.CellType_PrunedBranch_1:
          pruned = A.CellUtils_exoticPruned(bits, refs);
          levelMask = A.LevelMask_LevelMask(pruned.mask);
          break;
        case B.CellType_MerkleProof_3:
          A.CellUtils_exoticMerkleProof(bits, refs);
          if (0 >= refs.length)
            return A.ioore(refs, 0);
          levelMask = A.LevelMask_LevelMask(B.JSInt_methods._shrOtherPositive$1(refs[0].mask._mask, 1));
          break;
        case B.CellType_MerkleUpdate_4:
          A.CellUtils_exoticMerkleUpdate(bits, refs);
          t1 = refs.length;
          if (0 >= t1)
            return A.ioore(refs, 0);
          t2 = refs[0];
          if (1 >= t1)
            return A.ioore(refs, 1);
          levelMask = A.LevelMask_LevelMask((t2.mask._mask | refs[1].mask._mask) >>> 1);
          break;
        case B.CellType_Library_2:
          A.CellUtils_exoticLibrary(bits, refs);
          levelMask = A.LevelMask_LevelMask(0);
          break;
        default:
          throw A.wrapException(A.BocException$("Unsupported exotic type", A.LinkedHashMap_LinkedHashMap$_literal(["type", type], type$.String, type$.dynamic)));
      }
      t1 = type$.JSArray_int;
      depths = A._setArrayType([], t1);
      t2 = type$.JSArray_List_int;
      hashes = A._setArrayType([], t2);
      t3 = type === B.CellType_PrunedBranch_1;
      hashCount = t3 ? 1 : levelMask._hashCount;
      hashIOffset = levelMask._hashCount - hashCount;
      for (t4 = levelMask._mask, t5 = type$.int, t6 = type !== B.CellType_MerkleProof_3, t7 = type === B.CellType_MerkleUpdate_4, t8 = !t3, levelI = 0, hashI = 0; levelI <= levelMask.get$level(); ++levelI) {
        t9 = levelI !== 0;
        if (!(!t9 || (B.JSInt_methods.$shr(t4, levelI - 1) & 1) !== 0))
          continue;
        if (hashI < hashIOffset) {
          ++hashI;
          continue;
        }
        if (hashI === hashIOffset) {
          if (!(!t9 || t3))
            throw A.wrapException(A.BocException$(_s14_, A.LinkedHashMap_LinkedHashMap$_literal(["level", levelI, "type", type], type$.String, type$.dynamic)));
          currentBits = bits;
        } else {
          if (!(t9 && t8))
            throw A.wrapException(A.BocException$(_s14_, A.LinkedHashMap_LinkedHashMap$_literal(["level", levelI, "type", type], type$.String, type$.dynamic)));
          t9 = hashI - hashIOffset - 1;
          if (!(t9 >= 0 && t9 < hashes.length))
            return A.ioore(hashes, t9);
          t9 = hashes[t9];
          currentBits = new A.BitString(0, 256, A.BytesUtils_toBytes(t9, true));
        }
        for (t9 = refs.length, t10 = levelI + 1, currentDepth = 0, _i = 0; _i < t9; ++_i) {
          r = refs[_i];
          t11 = !t6 || t7;
          t12 = r._depths;
          t13 = t12.length;
          if (t11) {
            t11 = Math.min(t13 - 1, t10);
            if (t11 >>> 0 !== t11 || t11 >= t13)
              return A.ioore(t12, t11);
            childDepth = t12[t11];
          } else {
            t11 = Math.min(t13 - 1, levelI);
            if (t11 >>> 0 !== t11 || t11 >= t13)
              return A.ioore(t12, t11);
            childDepth = t12[t11];
          }
          currentDepth = Math.max(currentDepth, childDepth);
        }
        if (t9 !== 0)
          ++currentDepth;
        t9 = (t4 & B.JSInt_methods._shlPositive$1(1, levelI) - 1) >>> 0;
        A._LevelMaskUtils_countSetBits(t9);
        repr = A.CellUtils_getRepr(bits, currentBits, refs, levelI, t9, type);
        h = A.SHA256$();
        h.update$1(repr);
        out = A.List_List$filled(32, 0, false, t5);
        h.finish$1(out);
        A.zero(h._hash$_buffer);
        A.zero(h._temp);
        h._initState$0();
        h._bytesHashed = h._bufferLength = 0;
        h._hash$_finished = false;
        destI = hashI - hashIOffset;
        B.JSArray_methods.insert$2(depths, destI, currentDepth);
        B.JSArray_methods.insert$2(hashes, destI, out);
        ++hashI;
      }
      resolvedHashes = A._setArrayType([], t2);
      resolvedDepths = A._setArrayType([], t1);
      if (pruned != null)
        for (thisHashIndex = levelMask._hashIndex, t1 = pruned.pruned, i = 0; i < 4; ++i) {
          hashIndex = A._LevelMaskUtils_countSetBits((t4 & B.JSInt_methods._shlPositive$1(1, i) - 1) >>> 0);
          if (hashIndex !== thisHashIndex) {
            if (!(hashIndex < t1.length))
              return A.ioore(t1, hashIndex);
            B.JSArray_methods.add$1(resolvedHashes, t1[hashIndex].hash);
            if (!(hashIndex < t1.length))
              return A.ioore(t1, hashIndex);
            B.JSArray_methods.add$1(resolvedDepths, t1[hashIndex].depth);
          } else {
            if (0 >= hashes.length)
              return A.ioore(hashes, 0);
            B.JSArray_methods.add$1(resolvedHashes, hashes[0]);
            if (0 >= depths.length)
              return A.ioore(depths, 0);
            B.JSArray_methods.add$1(resolvedDepths, depths[0]);
          }
        }
      else
        for (i = 0; i < 4; ++i) {
          t1 = (t4 & B.JSInt_methods._shlPositive$1(1, i) - 1) >>> 0;
          hashIndex = A._LevelMaskUtils_countSetBits(t1);
          if (!(hashIndex < hashes.length))
            return A.ioore(hashes, hashIndex);
          B.JSArray_methods.add$1(resolvedHashes, hashes[hashIndex]);
          hashIndex = A._LevelMaskUtils_countSetBits(t1);
          if (!(hashIndex < depths.length))
            return A.ioore(depths, hashIndex);
          B.JSArray_methods.add$1(resolvedDepths, depths[hashIndex]);
        }
      return A.ResolvedCellResult$(resolvedDepths, resolvedHashes, levelMask, type);
    },
    CellUtils_topologicalSort_closure: function CellUtils_topologicalSort_closure() {
    },
    CellUtils_topologicalSort_visit: function CellUtils_topologicalSort_visit(t0, t1, t2, t3) {
      var _ = this;
      _.notPermCells = t0;
      _.tempMark = t1;
      _.allCells = t2;
      _.sorted = t3;
    },
    CellUtils_topologicalSort_closure0: function CellUtils_topologicalSort_closure0(t0, t1) {
      this.allCells = t0;
      this.indexes = t1;
    },
    CellUtils_topologicalSort__closure: function CellUtils_topologicalSort__closure(t0) {
      this.indexes = t0;
    },
    CellUtils_resolveExotic_closure: function CellUtils_resolveExotic_closure() {
    },
    CellUtils_resolveExotic_closure0: function CellUtils_resolveExotic_closure0() {
    },
    TonChain_fromWorkchain(workchain) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_niy, new A.TonChain_fromWorkchain_closure(workchain), new A.TonChain_fromWorkchain_closure0());
    },
    TonChain: function TonChain(t0, t1) {
      this.workchain = t0;
      this.id = t1;
    },
    TonChain_fromWorkchain_closure: function TonChain_fromWorkchain_closure(t0) {
      this.workchain = t0;
    },
    TonChain_fromWorkchain_closure0: function TonChain_fromWorkchain_closure0() {
    },
    TonContract: function TonContract() {
    },
    _TonContract_Object_ContractProvider: function _TonContract_Object_ContractProvider() {
    },
    ContractProvider: function ContractProvider() {
    },
    TonContractException: function TonContractException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    WalletV1R1: function WalletV1R1(t0, t1) {
      this.state = t0;
      this.address = t1;
    },
    WalletV1R2: function WalletV1R2(t0, t1) {
      this.state = t0;
      this.address = t1;
    },
    WalletV1R3: function WalletV1R3(t0, t1) {
      this.state = t0;
      this.address = t1;
    },
    WalletV2R1: function WalletV2R1(t0, t1) {
      this.state = t0;
      this.address = t1;
    },
    WalletV2R2: function WalletV2R2(t0, t1) {
      this.state = t0;
      this.address = t1;
    },
    WalletV3R1: function WalletV3R1(t0, t1) {
      this.state = t0;
      this.address = t1;
    },
    WalletV3R2: function WalletV3R2(t0, t1) {
      this.state = t0;
      this.address = t1;
    },
    WalletV4: function WalletV4(t0, t1) {
      this.state = t0;
      this.address = t1;
    },
    WalletV5R1_WalletV5R1$create(bounceableAddress, chain, context, publicKey) {
      var state, t1, t2;
      if (context instanceof A.V5R1ClientContext)
        chain = context.chain;
      A.List_List$unmodifiable(B.List_empty11, type$.TonAddress);
      state = new A.V5VersionedWalletState(context, A.TonPublicKey_TonPublicKey$fromBytes(publicKey), B.WalletVersion_v5R1_5);
      t1 = state.initialState$0();
      t2 = chain.workchain;
      t1 = A.TonAddress_TonAddress$fromState(bounceableAddress, t1, t2 == null ? 0 : t2);
      A.TonChain_fromWorkchain(t1.workChain);
      return new A.WalletV5R1(state, t1);
    },
    WalletV5R1: function WalletV5R1(t0, t1) {
      this.state = t0;
      this.address = t1;
    },
    WalletContract: function WalletContract() {
    },
    WalletVersion_WalletVersion$fromValue($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_nif, new A.WalletVersion_WalletVersion$fromValue_closure($name), new A.WalletVersion_WalletVersion$fromValue_closure0($name));
    },
    WalletVersion: function WalletVersion(t0, t1) {
      this.name = t0;
      this.version = t1;
    },
    WalletVersion_WalletVersion$fromValue_closure: function WalletVersion_WalletVersion$fromValue_closure(t0) {
      this.name = t0;
    },
    WalletVersion_WalletVersion$fromValue_closure0: function WalletVersion_WalletVersion$fromValue_closure0(t0) {
      this.name = t0;
    },
    VersionedWalletContract: function VersionedWalletContract() {
    },
    _VersionedWalletContract_WalletContract_VerionedProviderImpl: function _VersionedWalletContract_WalletContract_VerionedProviderImpl() {
    },
    VerionedProviderImpl: function VerionedProviderImpl() {
    },
    V5R1Context: function V5R1Context() {
    },
    V5R1CustomContext: function V5R1CustomContext(t0, t1) {
      this.context = t0;
      this.chain = t1;
    },
    V5R1ClientContext: function V5R1ClientContext(t0, t1) {
      this.subwalletNumber = t0;
      this.chain = t1;
    },
    NoneSubWalletVersionedWalletState$(publicKey, version) {
      return new A.NoneSubWalletVersionedWalletState(A.TonPublicKey_TonPublicKey$fromBytes(publicKey), version);
    },
    SubWalletVersionedWalletState$(publicKey, subwallet, version) {
      return new A.SubWalletVersionedWalletState(subwallet, A.TonPublicKey_TonPublicKey$fromBytes(publicKey), version);
    },
    VersionedWalletState: function VersionedWalletState() {
    },
    NoneSubWalletVersionedWalletState: function NoneSubWalletVersionedWalletState(t0, t1) {
      this.publicKey = t0;
      this.version = t1;
    },
    SubWalletVersionedWalletState: function SubWalletVersionedWalletState(t0, t1, t2) {
      this.subwallet = t0;
      this.publicKey = t1;
      this.version = t2;
    },
    V5VersionedWalletState: function V5VersionedWalletState(t0, t1, t2) {
      this.context = t0;
      this.publicKey = t1;
      this.version = t2;
    },
    KeyException: function KeyException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    TonPublicKey_TonPublicKey$fromBytes(keyBytes) {
      var e, t1, exception;
      try {
        t1 = A.Ed25519PublicKey_Ed25519PublicKey$fromBytes(keyBytes);
        return new A.TonPublicKey(t1);
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.LinkedHashMap_LinkedHashMap$_literal(["key", A.BytesUtils_toHexString(keyBytes, true, null), "error", J.toString$0$(e)], type$.String, type$.dynamic);
        throw A.wrapException(new A.KeyException("Invalid Ton Public key. Public key must be a valid Ed25519 key.", t1));
      }
    },
    TonPublicKey: function TonPublicKey(t0) {
      this._publickKey = t0;
    },
    DictionaryCodecs_createBigUintKey(bits) {
      return new A.DictionaryKey(bits, new A.DictionaryCodecs_createBigUintKey_closure(bits), type$.DictionaryKey_BigInt);
    },
    DictionaryCodecs_createBigUintKey_closure: function DictionaryCodecs_createBigUintKey_closure(t0) {
      this.bits = t0;
    },
    Dictionary_empty(key, value, $K, $V) {
      return new A.Dictionary(key, value, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, $V), $K._eval$1("@<0>")._bind$1($V)._eval$1("Dictionary<1,2>"));
    },
    Dictionary_fromEnteries(key, map, value, $K, $V) {
      var t1, t2, t3, t4, t5, t6,
        dict = A.Dictionary_empty(key, value, $K, $V);
      for (t1 = map.get$entries(), t1 = t1.get$iterator(t1), t2 = dict.$ti, t3 = t2._precomputed1, t2 = t2._rest[1], t4 = dict._dictionary$_map; t1.moveNext$0();) {
        t5 = t1.get$current();
        t6 = t5.key;
        t5 = t5.value;
        t3._as(t6);
        t2._as(t5);
        t4.$indexSet(0, A.DictionaryUtils_serializeInternalKey(t6), t5);
      }
      return dict;
    },
    Dictionary: function Dictionary(t0, t1, t2, t3) {
      var _ = this;
      _._dictionary$_key = t0;
      _._dictionary$_value = t1;
      _._dictionary$_map = t2;
      _.$ti = t3;
    },
    Dictionary_store_closure: function Dictionary_store_closure(t0, t1) {
      this.$this = t0;
      this.resolvedKey = t1;
    },
    DictionaryKey: function DictionaryKey(t0, t1, t2) {
      this.bits = t0;
      this.serialize = t1;
      this.$ti = t2;
    },
    DictionaryValue: function DictionaryValue(t0, t1) {
      this.serialize = t0;
      this.$ti = t1;
    },
    DictException$(message, details) {
      return new A.DictException(message, details);
    },
    DictException: function DictException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    _DictSerializationUtils_pad(src, size) {
      for (; src.length < size;)
        src = "0" + src;
      return src;
    },
    _DictSerializationUtils_forkMap(src, prefixLen, $T) {
      var t1, left, right, t2, k, d;
      if (src.get$isEmpty(src))
        throw A.wrapException(A.DictException$("Internal inconsistency", null));
      t1 = type$.String;
      left = A.LinkedHashMap_LinkedHashMap$_empty(t1, $T);
      right = A.LinkedHashMap_LinkedHashMap$_empty(t1, $T);
      for (t1 = src.get$entries(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current();
        k = t2.key;
        d = t2.value;
        if (!(prefixLen >= 0 && prefixLen < k.length))
          return A.ioore(k, prefixLen);
        if (k[prefixLen] === "0")
          left.$indexSet(0, k, d);
        else
          right.$indexSet(0, k, d);
      }
      if (left.__js_helper$_length === 0)
        throw A.wrapException(A.DictException$("Internal inconsistency. Left emtpy.", null));
      if (right.__js_helper$_length === 0)
        throw A.wrapException(A.DictException$("Internal inconsistency. Right emtpy.", null));
      return new A.Tuple(left, right, $T._eval$1("Tuple<Map<String,0>,Map<String,0>>"));
    },
    _DictSerializationUtils_buildNode(src, prefixLen, $T) {
      var t1, fork;
      if (src.get$isEmpty(src))
        throw A.wrapException(A.DictException$("Internal inconsistency", null));
      if (src.get$length(src) === 1) {
        t1 = src.get$values();
        return new A._Node($, $, true, t1.get$first(t1), $T._eval$1("_Node<0>"));
      }
      fork = A._DictSerializationUtils_forkMap(src, prefixLen, $T);
      t1 = prefixLen + 1;
      return new A._Node(A._DictSerializationUtils_buildEdge(fork.item1, t1, $T), A._DictSerializationUtils_buildEdge(fork.item2, t1, $T), false, $, $T._eval$1("_Node<0>"));
    },
    _DictSerializationUtils_buildEdge(src, prefixLen, $T) {
      var t1, label;
      if (src.get$isEmpty(src))
        throw A.wrapException(A.DictException$("Internal inconsistency", null));
      t1 = src.get$keys();
      label = A.DictionaryUtils_findCommonPrefix(t1.toList$0(t1), prefixLen);
      return new A._Edge(label, A._DictSerializationUtils_buildNode(src, label.length + prefixLen, $T), $T._eval$1("_Edge<0>"));
    },
    _DictSerializationUtils_buildTree(src, keyLength, $T) {
      var converted = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, $T);
      src.forEach$1(0, new A._DictSerializationUtils_buildTree_closure(keyLength, converted, $T));
      return A._DictSerializationUtils_buildEdge(converted, 0, $T);
    },
    _DictSerializationUtils_writeLabelShort(src, to) {
      var t1, t2, i;
      to.storeBit$1(0);
      for (t1 = src.length, t2 = to._builder$_bits, i = 0; i < t1; ++i)
        t2.writeBit$1(true);
      to.storeBit$1(0);
      if (t1 !== 0)
        t2.writeUint$2(A._BigIntImpl_parse(src, 2), t1);
      return src;
    },
    _DictSerializationUtils_isSame(src) {
      var i,
        t1 = src.length;
      if (t1 === 0 || t1 === 1)
        return true;
      for (i = 1; i < t1; ++i)
        if (src[i] !== src[0])
          return false;
      return true;
    },
    _DictSerializationUtils_writeLabel(src, keyLength, to) {
      var kind, t3,
        t1 = src.length,
        kindLength = 1 + t1 + 1 + t1,
        t2 = keyLength + 1,
        longLength = 2 + B.JSNumber_methods.ceil$0(Math.log(t2) / Math.log(2)) + t1;
      if (longLength < kindLength) {
        kindLength = longLength;
        kind = 1;
      } else
        kind = 0;
      if (A._DictSerializationUtils_isSame(src))
        if (3 + B.JSInt_methods.ceil$0(B.JSNumber_methods.ceil$0(Math.log(t2) / Math.log(2))) < kindLength)
          kind = 2;
      switch (kind) {
        case 0:
          A._DictSerializationUtils_writeLabelShort(src, to);
          break;
        case 1:
          to.storeBit$1(1);
          to.storeBit$1(0);
          t3 = to._builder$_bits;
          t3.writeUint$2(t1, B.JSNumber_methods.ceil$0(Math.log(t2) / Math.log(2)));
          if (t1 !== 0)
            t3.writeUint$2(A._BigIntImpl_parse(src, 2), t1);
          break;
        default:
          if (0 >= t1)
            return A.ioore(src, 0);
          t3 = src[0];
          to.storeBit$1(1);
          to.storeBit$1(1);
          to.storeBit$1(t3 === "1" ? 1 : 0);
          to._builder$_bits.writeUint$2(t1, B.JSNumber_methods.ceil$0(Math.log(t2) / Math.log(2)));
          break;
      }
    },
    _DictSerializationUtils_writeEdge(src, keyLength, serializer, to, $T) {
      var t2, t3, t4, leftCell, rightCell,
        t1 = src.label;
      A._DictSerializationUtils_writeLabel(t1, keyLength, to);
      t2 = src.node;
      t3 = t2.isLeaf;
      if (t3) {
        t4 = t2.___Node_value_F;
        t4 === $ && A.throwLateFieldNI("value");
        serializer.call$2(t4, to);
      }
      if (!t3) {
        t3 = type$.JSArray_Cell;
        leftCell = new A.Builder(A.BitBuilder$(1023), A._setArrayType([], t3));
        rightCell = new A.Builder(A.BitBuilder$(1023), A._setArrayType([], t3));
        t3 = t2.___Node_left_A;
        t3 === $ && A.throwLateFieldNI("left");
        t1 = keyLength - t1.length - 1;
        A._DictSerializationUtils_writeEdge(t3, t1, serializer, leftCell, $T);
        t2 = t2.___Node_right_A;
        t2 === $ && A.throwLateFieldNI("right");
        A._DictSerializationUtils_writeEdge(t2, t1, serializer, rightCell, $T);
        to.storeRef$1(leftCell.endCell$0());
        to.storeRef$1(rightCell.endCell$0());
      }
    },
    _Node: function _Node(t0, t1, t2, t3, t4) {
      var _ = this;
      _.___Node_left_A = t0;
      _.___Node_right_A = t1;
      _.isLeaf = t2;
      _.___Node_value_F = t3;
      _.$ti = t4;
    },
    _Edge: function _Edge(t0, t1, t2) {
      this.label = t0;
      this.node = t1;
      this.$ti = t2;
    },
    _DictSerializationUtils_buildTree_closure: function _DictSerializationUtils_buildTree_closure(t0, t1, t2) {
      this.keyLength = t0;
      this.converted = t1;
      this.T = t2;
    },
    TonDartPluginException$(message, details) {
      return new A.TonDartPluginException(message, details);
    },
    TonDartPluginException: function TonDartPluginException(t0, t1) {
      this.message = t0;
      this.details = t1;
    },
    SimpleLibraryCodecs_codec_closure: function SimpleLibraryCodecs_codec_closure() {
    },
    StateInit: function StateInit(t0, t1, t2) {
      this.code = t0;
      this.data = t1;
      this.libraries = t2;
    },
    StateInit_store_closure: function StateInit_store_closure() {
    },
    StateInit_toJson_closure: function StateInit_toJson_closure() {
    },
    JsonSerialization0: function JsonSerialization0() {
    },
    TonSerialization: function TonSerialization() {
    },
    _TonSerialization_Object_JsonSerialization: function _TonSerialization_Object_JsonSerialization() {
    },
    AptosWeb3State$_(accounts, chains, defaultAccount, defaultChain, state) {
      var t1 = type$.AptosAddress,
        t2 = type$.Web3AptosChainAccount,
        t3 = type$.JSObject,
        t4 = A._arrayInstanceType(accounts),
        t5 = t4._eval$1("WhereIterable<1>");
      t4 = A.List_List$_of(new A.WhereIterable(accounts, t4._eval$1("bool(1)")._as(new A.WalletStandardChainWeb3State_closure(defaultChain, t1, t2, t3)), t5), t5._eval$1("Iterable.E"));
      t4 = A.WalletStandardChainWeb3State__sortAccounts(t4, defaultAccount, t1, t2, t3);
      t5 = A.WalletStandardChainWeb3State__sortChains(chains, type$.Web3AptosChainIdnetifier);
      return new A.AptosWeb3State(state, defaultAccount, A.WalletStandardChainWeb3State__sortAccounts(accounts, null, t1, t2, t3), t4, t5, defaultChain);
    },
    AptosWeb3State_AptosWeb3State(authenticated) {
      var t1, t2, t3, accounts, defaultAddress, t4;
      if (authenticated == null)
        return A.AptosWeb3State$_(B.List_empty7, A._setArrayType([], type$.JSArray_Web3AptosChainIdnetifier), null, null, B.JSNetworkState_2);
      t1 = authenticated.accounts;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,JSWalletStateAccount<AptosAddress,Web3AptosChainAccount,JSObject>>");
      accounts = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("JSWalletStateAccount<AptosAddress,Web3AptosChainAccount,JSObject>(1)")._as(new A.AptosWeb3State_AptosWeb3State_closure()), t3), t3._eval$1("ListIterable.E"));
      defaultAddress = A.QuickImutableList_firstWhereOrNull(t1, new A.AptosWeb3State_AptosWeb3State_closure0(authenticated), type$.Web3AptosChainAccount);
      t1 = authenticated.networks;
      t2 = authenticated.currentNetwork;
      if (defaultAddress == null)
        t3 = null;
      else {
        t3 = defaultAddress.signingScheme;
        t4 = defaultAddress.publicKey;
        t4 = A.JSAptosPublicKey_constructor_setup(t4, A.BytesUtils_toHexString(t4, true, "0x"));
        t3 = new A.JSWalletStateAccount(defaultAddress, A.JSAptosWalletAccount_constructor_setup(defaultAddress.address.address, "aptos:" + defaultAddress.network._name, t4, t3), t2.identifier, type$.JSWalletStateAccount_AptosAddress_Web3AptosChainAccount_JSObject);
      }
      return A.AptosWeb3State$_(accounts, t1, t3, t2, B.JSNetworkState_0);
    },
    AptosWeb3State: function AptosWeb3State(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.state = t0;
      _.defaultAccount = t1;
      _.accounts = t2;
      _.networkAccounts = t3;
      _.chains = t4;
      _.defaultChain = t5;
    },
    AptosWeb3State_AptosWeb3State_closure: function AptosWeb3State_AptosWeb3State_closure() {
    },
    AptosWeb3State_AptosWeb3State_closure0: function AptosWeb3State_AptosWeb3State_closure0(t0) {
      this.authenticated = t0;
    },
    JSAptosHandler: function JSAptosHandler(t0, t1, t2) {
      var _ = this;
      _.__JSWalletStandardNetworkHandler__state_AI = $;
      _.lock = t0;
      _.sendMessageToClient = t1;
      _.sendInternalMessage = t2;
      _.__JSWalletStandardNetworkHandler_jsNetworkType_FI = $;
    },
    JSAptosHandler__parseSwitchChain_closure: function JSAptosHandler__parseSwitchChain_closure(t0) {
      this.networkInfo = t0;
    },
    JSAptosHandler__parseSwitchChain_closure0: function JSAptosHandler__parseSwitchChain_closure0() {
    },
    BitcoinJSConstant_accountFeatures(chain, allowPersonalMessage) {
      var t1 = A._setArrayType([], type$.JSArray_String);
      if (allowPersonalMessage)
        t1.push("bitcoin:signPersonalMessage");
      t1.push("bitcoin:signTransaction");
      t1.push("bitcoin:sendTransaction");
      return t1;
    },
    JSBitcoinWalletAccount_constructor_setup(address, chain, features, publicKey, redeemScript, type, witnessScript) {
      var t1, t2, _this = {};
      _this.address = address;
      _this.publicKey = type$.Object._as(init.G.Uint8Array.from(A.jsify(publicKey)));
      _this.chains = A._setArrayType([chain], type$.JSArray_String);
      _this.type = type;
      _this.witnessScript = witnessScript;
      _this.redeemScript = redeemScript;
      t1 = A._arrayInstanceType(features);
      t2 = t1._eval$1("MappedListIterable<1,String>");
      t1 = A.List_List$_of(new A.MappedListIterable(features, t1._eval$1("String(1)")._as(new A.JSBitcoinWalletAccount_constructor_setup_closure()), t2), t2._eval$1("ListIterable.E"));
      _this.features = t1;
      return _this;
    },
    JSBitcoinWalletAccount_constructor_setup_closure: function JSBitcoinWalletAccount_constructor_setup_closure() {
    },
    BitcoinWeb3State$_(accounts, chains, defaultAccount, defaultChain, state) {
      var t1 = type$.BitcoinBaseAddress,
        t2 = type$.Web3BitcoinChainAccount,
        t3 = type$.JSObject,
        t4 = A._arrayInstanceType(accounts),
        t5 = t4._eval$1("WhereIterable<1>");
      t4 = A.List_List$_of(new A.WhereIterable(accounts, t4._eval$1("bool(1)")._as(new A.WalletStandardChainWeb3State_closure(defaultChain, t1, t2, t3)), t5), t5._eval$1("Iterable.E"));
      t4 = A.WalletStandardChainWeb3State__sortAccounts(t4, defaultAccount, t1, t2, t3);
      t5 = A.WalletStandardChainWeb3State__sortChains(chains, type$.Web3ChainDefaultIdnetifier);
      return new A.BitcoinWeb3State(state, defaultAccount, A.WalletStandardChainWeb3State__sortAccounts(accounts, null, t1, t2, t3), t4, t5, defaultChain);
    },
    BitcoinWeb3State_BitcoinWeb3State(authenticated) {
      var t1, t2, t3, accounts, defaultAddress, t4, t5, t6, t7, t8, t9;
      if (authenticated == null)
        return A.BitcoinWeb3State$_(B.List_empty3, A._setArrayType([], type$.JSArray_Web3ChainDefaultIdnetifier), null, null, B.JSNetworkState_2);
      t1 = authenticated.accounts;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,JSWalletStateAccount<BitcoinBaseAddress,Web3BitcoinChainAccount,JSObject>>");
      accounts = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("JSWalletStateAccount<BitcoinBaseAddress,Web3BitcoinChainAccount,JSObject>(1)")._as(new A.BitcoinWeb3State_BitcoinWeb3State_closure()), t3), t3._eval$1("ListIterable.E"));
      defaultAddress = A.QuickImutableList_firstWhereOrNull(t1, new A.BitcoinWeb3State_BitcoinWeb3State_closure0(authenticated), type$.Web3BitcoinChainAccount);
      t1 = authenticated.networks;
      t2 = authenticated.currentNetwork;
      if (defaultAddress == null)
        t3 = null;
      else {
        t3 = defaultAddress.address;
        t4 = defaultAddress.network;
        t3 = t3.toAddress$1(t4);
        t5 = defaultAddress.redeemScript;
        t6 = defaultAddress.type;
        t7 = defaultAddress.witnessScript;
        t8 = A.BitcoinJSConstant_accountFeatures(t4.get$identifier(), t6.get$supportBip137());
        t9 = defaultAddress.publicKey;
        t7 = new A.JSWalletStateAccount(defaultAddress, A.JSBitcoinWalletAccount_constructor_setup(t3, t4.get$identifier(), t8, t9, t5, t6.value, t7), t2.identifier, type$.JSWalletStateAccount_BitcoinBaseAddress_Web3BitcoinChainAccount_JSObject);
        t3 = t7;
      }
      return A.BitcoinWeb3State$_(accounts, t1, t3, t2, B.JSNetworkState_0);
    },
    BitcoinWeb3State: function BitcoinWeb3State(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.state = t0;
      _.defaultAccount = t1;
      _.accounts = t2;
      _.networkAccounts = t3;
      _.chains = t4;
      _.defaultChain = t5;
    },
    BitcoinWeb3State_BitcoinWeb3State_closure: function BitcoinWeb3State_BitcoinWeb3State_closure() {
    },
    BitcoinWeb3State_BitcoinWeb3State_closure0: function BitcoinWeb3State_BitcoinWeb3State_closure0(t0) {
      this.authenticated = t0;
    },
    JSBitcoinHandler: function JSBitcoinHandler(t0, t1, t2) {
      var _ = this;
      _.__JSWalletStandardNetworkHandler__state_AI = $;
      _.lock = t0;
      _.sendMessageToClient = t1;
      _.sendInternalMessage = t2;
      _.__JSWalletStandardNetworkHandler_jsNetworkType_FI = $;
    },
    JSBitcoinHandler__parseOutput_closure: function JSBitcoinHandler__parseOutput_closure(t0) {
      this.scriptBytes = t0;
    },
    JSBitcoinHandler__parseSendTransaction_closure: function JSBitcoinHandler__parseSendTransaction_closure() {
    },
    JSBitcoinHandler__parseSendTransaction_closure0: function JSBitcoinHandler__parseSendTransaction_closure0(t0, t1) {
      this.$this = t0;
      this.network = t1;
    },
    JSBitcoinHandler__parseTransaction_closure: function JSBitcoinHandler__parseTransaction_closure() {
    },
    JSBitcoinHandler__parseTransaction_closure0: function JSBitcoinHandler__parseTransaction_closure0(t0) {
      this.psbtInput = t0;
    },
    MessageCompleterHandler: function MessageCompleterHandler(t0) {
      this._awaitingMessages = t0;
    },
    MessageCompleter: function MessageCompleter(t0, t1) {
      this.id = t0;
      this._completer = t1;
    },
    JSCosmosWalletAccount_constructor_setup(address, algo, chain, publicKey, typeUrl) {
      var t1, t2, _this = {};
      _this.address = address;
      _this.algo = algo;
      t1 = init.G;
      t2 = type$.Object;
      _this.publicKey = t2._as(t1.Uint8Array.from(A.jsify(publicKey)));
      _this.pubkey = t2._as(t1.Uint8Array.from(A.jsify(publicKey)));
      _this.chains = A._setArrayType([chain], type$.JSArray_String);
      _this.features = $.$get$JSTronConst_defaultAccountFeatures();
      _this.typeUrl = typeUrl;
      return _this;
    },
    JSCosmosPubKey_constructor_setup(type, value) {
      var _this = {};
      _this.type = type;
      _this.value = value;
      return _this;
    },
    JSCosmosStdSignature_constructor_setup(pubKey, signature) {
      var _this = {};
      _this.pub_key = pubKey;
      _this.signature = signature;
      return _this;
    },
    CosmosAddNewChainParams_toJson(_this) {
      var t1 = A._asStringQ(_this.rpc),
        t2 = A._asStringQ(_this.chainId),
        t3 = A._asStringQ(_this.name),
        t4 = A._asStringQ(_this.hrp),
        t5 = type$.nullable_JSArray_nullable_Object,
        t6 = t5._as(_this.keyAlgos),
        t7 = _this.nativeToken;
      t7 = t7 == null ? null : A.LinkedHashMap_LinkedHashMap$_literal(["name", A._asStringQ(t7.name), "symbol", A._asStringQ(t7.symbol), "denom", A._asStringQ(t7.denom), "decimals", A._asIntQ(t7.decimals), "coingeckoId", A._asStringQ(t7.coingeckoId)], type$.String, type$.dynamic);
      t5 = t5._as(_this.feeTokens);
      if (t5 == null)
        t5 = null;
      else {
        t5 = type$.List_Object._is(t5) ? t5 : new A.CastList(t5, A._arrayInstanceType(t5)._eval$1("CastList<1,Object>"));
        t5 = J.map$1$1$ax(t5, new A.CosmosAddNewChainParams_toJson_closure(), type$.Map_String_dynamic);
        t5 = A.List_List$_of(t5, t5.$ti._eval$1("ListIterable.E"));
      }
      return A.LinkedHashMap_LinkedHashMap$_literal(["rpc", t1, "chainId", t2, "name", t3, "hrp", t4, "keyAlgos", t6, "nativeToken", t7, "feeTokens", t5], type$.String, type$.dynamic);
    },
    CosmosAddNewChainParams_toJson_closure: function CosmosAddNewChainParams_toJson_closure() {
    },
    CosmosWeb3State$_(accounts, chains, defaultAccount, defaultChain, state) {
      var t1 = type$.CosmosBaseAddress,
        t2 = type$.Web3CosmosChainAccount,
        t3 = type$.JSObject,
        t4 = A._arrayInstanceType(accounts),
        t5 = t4._eval$1("WhereIterable<1>");
      t4 = A.List_List$_of(new A.WhereIterable(accounts, t4._eval$1("bool(1)")._as(new A.WalletStandardChainWeb3State_closure(defaultChain, t1, t2, t3)), t5), t5._eval$1("Iterable.E"));
      t4 = A.WalletStandardChainWeb3State__sortAccounts(t4, defaultAccount, t1, t2, t3);
      t5 = A.WalletStandardChainWeb3State__sortChains(chains, type$.Web3CosmoshainIdnetifier);
      return new A.CosmosWeb3State(state, defaultAccount, A.WalletStandardChainWeb3State__sortAccounts(accounts, null, t1, t2, t3), t4, t5, defaultChain);
    },
    CosmosWeb3State_CosmosWeb3State(authenticated) {
      var t1, t2, t3, _i, i, t4, t5, accounts, defaultAddress, t6, t7;
      if (authenticated == null)
        return A.CosmosWeb3State$_(B.List_empty4, A._setArrayType([], type$.JSArray_Web3CosmoshainIdnetifier), null, null, B.JSNetworkState_2);
      t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.Web3CosmoshainIdnetifier);
      for (t2 = authenticated.networks, t3 = t2.length, _i = 0; _i < t3; ++_i) {
        i = t2[_i];
        t1.$indexSet(0, i.id, i);
      }
      t3 = authenticated.accounts;
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,JSWalletStateAccount<CosmosBaseAddress,Web3CosmosChainAccount,JSObject>>");
      accounts = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("JSWalletStateAccount<CosmosBaseAddress,Web3CosmosChainAccount,JSObject>(1)")._as(new A.CosmosWeb3State_CosmosWeb3State_closure(t1)), t5), t5._eval$1("ListIterable.E"));
      defaultAddress = A.QuickImutableList_firstWhereOrNull(t3, new A.CosmosWeb3State_CosmosWeb3State_closure0(authenticated), type$.Web3CosmosChainAccount);
      t3 = authenticated.currentNetwork;
      if (defaultAddress == null)
        t1 = null;
      else {
        t4 = defaultAddress.address;
        t5 = defaultAddress.publicKey;
        t6 = defaultAddress.algo;
        t7 = t6.get$pubKeyTypeUrl();
        t7 = new A.JSWalletStateAccount(defaultAddress, A.JSCosmosWalletAccount_constructor_setup(t4.address, t6._name, "cosmos:" + t1.$index(0, defaultAddress.id).chainId, t5, t7.typeUrl), "cosmos:" + t3.chainId, type$.JSWalletStateAccount_CosmosBaseAddress_Web3CosmosChainAccount_JSObject);
        t1 = t7;
      }
      return A.CosmosWeb3State$_(accounts, t2, t1, t3, B.JSNetworkState_0);
    },
    CosmosWeb3State: function CosmosWeb3State(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.state = t0;
      _.defaultAccount = t1;
      _.accounts = t2;
      _.networkAccounts = t3;
      _.chains = t4;
      _.defaultChain = t5;
    },
    CosmosWeb3State_chainExist_closure: function CosmosWeb3State_chainExist_closure(t0) {
      this.chainId = t0;
    },
    CosmosWeb3State_getChainIdJsAccounts_closure0: function CosmosWeb3State_getChainIdJsAccounts_closure0(t0) {
      this.chainId = t0;
    },
    CosmosWeb3State_getChainIdJsAccounts_closure1: function CosmosWeb3State_getChainIdJsAccounts_closure1() {
    },
    CosmosWeb3State_getChainIdJsAccounts_closure: function CosmosWeb3State_getChainIdJsAccounts_closure(t0) {
      this.network = t0;
    },
    CosmosWeb3State_getChainIdJsAccounts_closure2: function CosmosWeb3State_getChainIdJsAccounts_closure2() {
    },
    CosmosWeb3State_CosmosWeb3State_closure: function CosmosWeb3State_CosmosWeb3State_closure(t0) {
      this.networks = t0;
    },
    CosmosWeb3State_CosmosWeb3State_closure0: function CosmosWeb3State_CosmosWeb3State_closure0(t0) {
      this.authenticated = t0;
    },
    JSCosmosHandler: function JSCosmosHandler(t0, t1, t2) {
      var _ = this;
      _.__JSWalletStandardNetworkHandler__state_AI = $;
      _.lock = t0;
      _.sendMessageToClient = t1;
      _.sendInternalMessage = t2;
      _.__JSWalletStandardNetworkHandler_jsNetworkType_FI = $;
    },
    EthereumWeb3State$_(accounts, chains, client, defaultAccount, defaultChain, state) {
      var t1 = type$.ETHAddress,
        t2 = type$.Web3EthereumChainAccount,
        t3 = type$.JSObject,
        t4 = A._arrayInstanceType(accounts),
        t5 = t4._eval$1("WhereIterable<1>");
      t4 = A.List_List$_of(new A.WhereIterable(accounts, t4._eval$1("bool(1)")._as(new A.WalletStandardChainWeb3State_closure(defaultChain, t1, t2, t3)), t5), t5._eval$1("Iterable.E"));
      t4 = A.WalletStandardChainWeb3State__sortAccounts(t4, defaultAccount, t1, t2, t3);
      t5 = A.WalletStandardChainWeb3State__sortChains(chains, type$.Web3EthereumChainIdnetifier);
      return new A.EthereumWeb3State(client, state, defaultAccount, A.WalletStandardChainWeb3State__sortAccounts(accounts, null, t1, t2, t3), t4, t5, defaultChain);
    },
    EthereumWeb3State_EthereumWeb3State(authenticated) {
      var t1, t2, t3, _i, i, t4, t5, accounts, defaultAddress, provider, t6, _null = null;
      if (authenticated == null)
        return A.EthereumWeb3State$_(B.List_empty14, A._setArrayType([], type$.JSArray_Web3EthereumChainIdnetifier), _null, _null, _null, B.JSNetworkState_2);
      t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.Web3EthereumChainIdnetifier);
      for (t2 = authenticated.networks, t3 = t2.length, _i = 0; _i < t3; ++_i) {
        i = t2[_i];
        t1.$indexSet(0, i.id, i);
      }
      t3 = authenticated.accounts;
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,JSWalletStateAccount<ETHAddress,Web3EthereumChainAccount,JSObject>>");
      accounts = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("JSWalletStateAccount<ETHAddress,Web3EthereumChainAccount,JSObject>(1)")._as(new A.EthereumWeb3State_EthereumWeb3State_closure(t1)), t5), t5._eval$1("ListIterable.E"));
      defaultAddress = A.QuickImutableList_firstWhereOrNull(t3, new A.EthereumWeb3State_EthereumWeb3State_closure0(authenticated), type$.Web3EthereumChainAccount);
      provider = authenticated.serviceIdentifier;
      t3 = provider == null ? _null : A.JSEthereumClient_JSEthereumClient(provider);
      t4 = authenticated.currentNetwork;
      if (defaultAddress == null)
        t1 = _null;
      else {
        t5 = t4.chainId.toString$0(0);
        t6 = defaultAddress.publicKey;
        t5 = new A.JSWalletStateAccount(defaultAddress, A.JSSEthereumWalletAccount_constructor_setup(defaultAddress.address.address, "ethereum:" + t1.$index(0, defaultAddress.id).chainId.toString$0(0), t6), "ethereum:" + t5, type$.JSWalletStateAccount_ETHAddress_Web3EthereumChainAccount_JSObject);
        t1 = t5;
      }
      return A.EthereumWeb3State$_(accounts, t2, t3, t1, t4, B.JSNetworkState_0);
    },
    JSEthereumHandler__typedDataVersion(methodName) {
      var version,
        t1 = methodName.length,
        t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(methodName, t2);
      version = A.Primitives_parseInt(methodName[t2], null);
      return A.EIP712Version_fromVersion(version == null ? 1 : version);
    },
    JSEthereumHandler__parseWalletStandardTypedData(params, state) {
      var param, version, account, data, typdedDataParams, t1, exception;
      try {
        param = A.PageMessageRequest_elementAs(params, 0, B.List_account_typedData, type$.JSObject);
        if (param == null) {
          t1 = A.Web3RequestExceptionConst_invalidParameters("Invalid account or message. The parameters must contain both 'account' and 'typeData' as object.");
          throw A.wrapException(t1);
        }
        version = A.JSEthereumHandler__typedDataVersion(A._asString(params.method));
        account = state.getJsAddressChainAccountOrThrow$1(type$.nullable_JSObject._as(param.account));
        data = null;
        t1 = type$.EIP712Base;
        if (version === B.EIP712Version_1)
          data = A.MethodUtils_nullOnException(new A.JSEthereumHandler__parseWalletStandardTypedData_closure(param), t1);
        else
          data = A.MethodUtils_nullOnException(new A.JSEthereumHandler__parseWalletStandardTypedData_closure0(param, version), t1);
        if (data == null) {
          version.toString;
          t1 = A.Web3RequestExceptionConst_failedToParse("typedData");
          throw A.wrapException(t1);
        }
        typdedDataParams = A.Web3EthreumTypdedData_Web3EthreumTypdedData(data, account);
        return typdedDataParams;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
        else {
          t1 = A.Web3EthereumExceptionConst_invalidTypeData();
          throw A.wrapException(t1);
        }
      }
    },
    JSEthereumHandler__parseTypedData(params, state) {
      var version, address, data, typdedDataParams, t1, t2, exception;
      try {
        version = A.JSEthereumHandler__typedDataVersion(A._asString(params.method));
        address = null;
        data = null;
        t1 = type$.ETHAddress;
        t2 = type$.EIP712Base;
        if (version === B.EIP712Version_1) {
          address = A.MethodUtils_nullOnException(new A.JSEthereumHandler__parseTypedData_closure(params), t1);
          data = A.MethodUtils_nullOnException(new A.JSEthereumHandler__parseTypedData_closure0(params), t2);
        } else {
          address = A.MethodUtils_nullOnException(new A.JSEthereumHandler__parseTypedData_closure1(params), t1);
          data = A.MethodUtils_nullOnException(new A.JSEthereumHandler__parseTypedData_closure2(params, version), t2);
        }
        if (address == null || data == null) {
          t1 = A.Web3EthereumExceptionConst_invalidTypeData();
          throw A.wrapException(t1);
        }
        typdedDataParams = A.Web3EthreumTypdedData_Web3EthreumTypdedData(data, state.getAddressNetworkChainAccountOrThrow$1(address));
        return typdedDataParams;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
        else {
          t1 = A.Web3EthereumExceptionConst_invalidTypeData();
          throw A.wrapException(t1);
        }
      }
    },
    JSEthereumHandler__parseSwitchEthereumChain(params) {
      var param, t1, exception;
      try {
        param = A.PageMessageRequest_elementAs(params, 0, B.List_empty5, type$.JSObject);
        t1 = param;
        t1 = A.BigintUtils_parse(t1 == null ? null : A._asString(t1.chainId), true);
        return t1;
      } catch (exception) {
        t1 = A.Web3RequestExceptionConst_failedToParse("chainId");
        throw A.wrapException(t1);
      }
    },
    JSEthereumHandler__parseTransaction(account, param, params, state) {
      var maxFeePerGas, gasPrice, value, maxPriorityFeePerGas, gas, type, t1, to, data, accessList, t2, t3, accessListDart, t4, t5, t6, address, dartStorageKeys, storageKeys, storageKey, _null = null,
        chainId = A.BigintUtils_tryParse(A._asStringQ(param.chainId));
      if (chainId != null)
        if (state.getChainFromChainId$1(chainId).id !== account.id)
          throw A.wrapException(A.Web3RequestExceptionConst_message(string$.Invalits, _null));
      maxFeePerGas = A.BigintUtils_tryParse(A._asStringQ(param.maxFeePerGas));
      gasPrice = A.BigintUtils_tryParse(A._asStringQ(param.gasPrice));
      value = A.BigintUtils_tryParse(A._asStringQ(param.value));
      maxPriorityFeePerGas = A.BigintUtils_tryParse(A._asStringQ(param.maxPriorityFeePerGas));
      gas = A.IntUtils_tryParse(A._asStringQ(param.gasLimit));
      if (A._asStringQ(param.value) != null && value == null)
        throw A.wrapException(A.Web3RequestExceptionConst_failedToParse("value"));
      type = A.IntUtils_tryParse(A._asStringQ(param.type));
      t1 = type$.ETHAddress;
      to = A.MethodUtils_nullOnException(new A.JSEthereumHandler__parseTransaction_closure(param), t1);
      if (A._asStringQ(param.to) != null && to == null)
        throw A.wrapException(A.Web3RequestExceptionConst_failedToParse("to"));
      if (A._asStringQ(param.data) != null) {
        data = A.BytesUtils_tryFromHexString(A._asStringQ(param.data), false);
        if (data == null)
          throw A.wrapException(A.Web3RequestExceptionConst_failedToParse("data"));
      } else
        data = _null;
      accessList = A._setArrayType([], type$.JSArray_Web3EthreumTransactionAccessList);
      t2 = type$.nullable_JSArray_nullable_Object;
      if (t2._as(param.accessList) != null) {
        t3 = t2._as(param.accessList);
        t3.toString;
        if (type$.List_JSObject._is(t3))
          accessListDart = t3;
        else
          accessListDart = new A.CastList(t3, A._arrayInstanceType(t3)._eval$1("CastList<1,JSObject>"));
        for (t3 = J.get$iterator$ax(accessListDart), t4 = type$.JSArray_List_int, t5 = type$.List_String; t3.moveNext$0();) {
          t6 = t3.get$current();
          address = A.MethodUtils_nullOnException(new A.JSEthereumHandler__parseTransaction_closure0(t6), t1);
          t6 = t2._as(t6.storageKeys);
          if (t6 == null)
            dartStorageKeys = _null;
          else
            dartStorageKeys = t5._is(t6) ? t6 : new A.CastList(t6, A._arrayInstanceType(t6)._eval$1("CastList<1,String>"));
          if (address == null || dartStorageKeys == null || J.get$isEmpty$asx(dartStorageKeys))
            throw A.wrapException(A.Web3EthereumExceptionConst_invalidAccessListParams());
          storageKeys = A._setArrayType([], t4);
          for (t6 = J.get$iterator$ax(dartStorageKeys); t6.moveNext$0();) {
            storageKey = A.BytesUtils_tryFromHexString(t6.get$current(), false);
            if (storageKey == null)
              throw A.wrapException(A.Web3EthereumExceptionConst_invalidAccessListParams());
            B.JSArray_methods.add$1(storageKeys, storageKey);
          }
          B.JSArray_methods.add$1(accessList, A.Web3EthreumTransactionAccessList$(address, storageKeys));
        }
      }
      t1 = value == null;
      t2 = t1 ? $.$get$_BigIntImpl_zero() : value;
      if (A.Web3EthreumSendTransaction_Web3EthreumSendTransaction(accessList.length === 0 ? _null : accessList, account, chainId, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, to, type, t2).transactionType === B.ETHTransactionType_2 && !state.defaultChain.supportEIP1559)
        throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters("The current network does not support EIP-1559 transactions."));
      t1 = t1 ? $.$get$_BigIntImpl_zero() : value;
      return A.Web3EthreumSendTransaction_Web3EthreumSendTransaction(accessList.length === 0 ? _null : accessList, account, chainId, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, to, type, t1);
    },
    JSEthereumHandler__parseTransactionRequest(params, state) {
      var t2, from, wsParam, account, param, t1 = {};
      t1.param = null;
      t2 = type$.JSObject;
      from = null;
      if (A.PageRequestType_fromName(A._asString(params.providerType)) === B.PageRequestType_0) {
        wsParam = A.PageMessageRequest_elementAs(params, 0, B.List_account_transaction, t2);
        if (wsParam == null)
          throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters("Invalid account or transaction. The parameters must contain both 'account' and 'transaction' as object."));
        t2 = type$.nullable_JSObject;
        account = state.getJsAddressChainAccountOrThrow$1(t2._as(wsParam.account));
        param = t2._as(wsParam.transaction);
        t1.param = param;
        if (param == null)
          throw A.wrapException(A.Web3EthereumExceptionConst_missingTransactionRequiredFields());
      } else {
        param = t1.param = A.PageMessageRequest_elementAs(params, 0, B.List_empty5, t2);
        if ((param == null ? null : A._asStringQ(param.from)) != null) {
          from = A.MethodUtils_nullOnException(new A.JSEthereumHandler__parseTransactionRequest_closure(t1), type$.ETHAddress);
          account = state.getAddressNetworkChainAccountOrThrow$1(from);
        } else
          account = state.get$defaultNetworkChainAccountOrThrow();
      }
      t2 = t1.param;
      if (t2 == null)
        throw A.wrapException(A.Web3EthereumExceptionConst_missingTransactionRequiredFields());
      if (A._asStringQ(t2.from) != null) {
        if (from == null)
          from = A.MethodUtils_nullOnException(new A.JSEthereumHandler__parseTransactionRequest_closure0(t1), type$.ETHAddress);
        if (from == null)
          throw A.wrapException(A.Web3RequestExceptionConst_failedToParse("from"));
        if (!from.$eq(0, account.address))
          throw A.wrapException(A.Web3RequestExceptionConst_message("Invalid transaction from. Mismatch between account and transaction from address.", null));
      }
      return A.JSEthereumHandler__parseTransaction(account, t1.param, params, state);
    },
    EthereumWeb3State: function EthereumWeb3State(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.client = t0;
      _.state = t1;
      _.defaultAccount = t2;
      _.accounts = t3;
      _.networkAccounts = t4;
      _.chains = t5;
      _.defaultChain = t6;
    },
    EthereumWeb3State_chainExist_closure: function EthereumWeb3State_chainExist_closure(t0) {
      this.chainId = t0;
    },
    EthereumWeb3State_getChainFromChainId_closure: function EthereumWeb3State_getChainFromChainId_closure(t0) {
      this.chainId = t0;
    },
    EthereumWeb3State_getChainFromChainId_closure0: function EthereumWeb3State_getChainFromChainId_closure0() {
    },
    EthereumWeb3State_EthereumWeb3State_closure: function EthereumWeb3State_EthereumWeb3State_closure(t0) {
      this.networks = t0;
    },
    EthereumWeb3State_EthereumWeb3State_closure0: function EthereumWeb3State_EthereumWeb3State_closure0(t0) {
      this.authenticated = t0;
    },
    JSEthereumHandler: function JSEthereumHandler(t0, t1, t2) {
      var _ = this;
      _.__JSWalletStandardNetworkHandler__state_AI = $;
      _.lock = t0;
      _.sendMessageToClient = t1;
      _.sendInternalMessage = t2;
      _.__JSWalletStandardNetworkHandler_jsNetworkType_FI = $;
    },
    JSEthereumHandler__parseWalletStandardTypedData_closure: function JSEthereumHandler__parseWalletStandardTypedData_closure(t0) {
      this.param = t0;
    },
    JSEthereumHandler__parseWalletStandardTypedData_closure0: function JSEthereumHandler__parseWalletStandardTypedData_closure0(t0, t1) {
      this.param = t0;
      this.version = t1;
    },
    JSEthereumHandler__parseTypedData_closure: function JSEthereumHandler__parseTypedData_closure(t0) {
      this.params = t0;
    },
    JSEthereumHandler__parseTypedData_closure0: function JSEthereumHandler__parseTypedData_closure0(t0) {
      this.params = t0;
    },
    JSEthereumHandler__parseTypedData_closure1: function JSEthereumHandler__parseTypedData_closure1(t0) {
      this.params = t0;
    },
    JSEthereumHandler__parseTypedData_closure2: function JSEthereumHandler__parseTypedData_closure2(t0, t1) {
      this.params = t0;
      this.version = t1;
    },
    JSEthereumHandler__parseAddEthereumChain_closure: function JSEthereumHandler__parseAddEthereumChain_closure() {
    },
    JSEthereumHandler__parseAddEthereumChain_closure0: function JSEthereumHandler__parseAddEthereumChain_closure0() {
    },
    JSEthereumHandler__parseAddEthereumChain_closure1: function JSEthereumHandler__parseAddEthereumChain_closure1() {
    },
    JSEthereumHandler__parseAddEthereumChain_closure2: function JSEthereumHandler__parseAddEthereumChain_closure2() {
    },
    JSEthereumHandler__parseTransaction_closure: function JSEthereumHandler__parseTransaction_closure(t0) {
      this.param = t0;
    },
    JSEthereumHandler__parseTransaction_closure0: function JSEthereumHandler__parseTransaction_closure0(t0) {
      this.i = t0;
    },
    JSEthereumHandler__parseTransactionRequest_closure: function JSEthereumHandler__parseTransactionRequest_closure(t0) {
      this._box_0 = t0;
    },
    JSEthereumHandler__parseTransactionRequest_closure0: function JSEthereumHandler__parseTransactionRequest_closure0(t0) {
      this._box_0 = t0;
    },
    JSEthereumHandler__personalSign_closure: function JSEthereumHandler__personalSign_closure(t0) {
      this.address = t0;
    },
    JSEthereumClient_JSEthereumClient(provider) {
      var t1;
      if (provider.protocol === B.ServiceProtocol_WebSocket_3_websocket) {
        t1 = type$.int;
        return new A.JSEthereumClient(new A.EthereumProvider(new A.EthereumWebsocketService(A._setArrayType([], type$.JSArray_of_void_Function_EthereumSubscribeResult), provider, new A.APIServiceTracker(new A.StreamValue(B.APIServiceStatus_0, type$.StreamValue_APIServiceStatus), A._setArrayType([], type$.JSArray_ApiRequest)), new A.SynchronizedLock(), B.SocketStatus_1, A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.SocketRequestCompleter))), A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Completer_dynamic));
      }
      return new A.JSEthereumClient(new A.EthereumProvider(new A.EthereumHTTPService(provider, null, new A.APIServiceTracker(new A.StreamValue(B.APIServiceStatus_0, type$.StreamValue_APIServiceStatus), A._setArrayType([], type$.JSArray_ApiRequest)), new A.SynchronizedLock())), A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.Completer_dynamic));
    },
    JSEthereumClient: function JSEthereumClient(t0, t1) {
      this.provider = t0;
      this._completers = t1;
      this._id = 0;
    },
    QuickJSStringList_get_toJS(_this) {
      var t1 = A._arrayInstanceType(_this),
        t2 = t1._eval$1("MappedListIterable<1,String>");
      t1 = A.List_List$_of(new A.MappedListIterable(_this, t1._eval$1("String(1)")._as(new A.QuickJSStringList_get_toJS_closure()), t2), t2._eval$1("ListIterable.E"));
      return t1;
    },
    QuickJSStringList_get_toJS_closure: function QuickJSStringList_get_toJS_closure() {
    },
    WalletStandardChainWeb3State__sortAccounts(accounts, defaultAccount, NETWORKADDRESS, CHAINACCOUNT, JSACCOUNT) {
      var t1 = NETWORKADDRESS._eval$1("@<0>")._bind$1(CHAINACCOUNT)._bind$1(JSACCOUNT)._eval$1("JSWalletStateAccount<1,2,3>"),
        clone = A.ListHelper_clone(accounts, t1);
      if (defaultAccount == null) {
        B.JSArray_methods.sort$1(clone, new A.WalletStandardChainWeb3State__sortAccounts_closure(NETWORKADDRESS, CHAINACCOUNT, JSACCOUNT));
        return A.List_List$unmodifiable(clone, t1);
      }
      B.JSArray_methods.sort$1(clone, new A.WalletStandardChainWeb3State__sortAccounts_closure0(defaultAccount, NETWORKADDRESS, CHAINACCOUNT, JSACCOUNT));
      return A.List_List$unmodifiable(clone, t1);
    },
    WalletStandardChainWeb3State__sortChains(chains, CHAIN) {
      var clone = A.ListHelper_clone(chains, CHAIN);
      B.JSArray_methods.sort$1(clone, new A.WalletStandardChainWeb3State__sortChains_closure(CHAIN));
      return A.List_List$unmodifiable(clone, CHAIN);
    },
    JSWalletStateAccount: function JSWalletStateAccount(t0, t1, t2, t3) {
      var _ = this;
      _.chainaccount = t0;
      _.jsAccount = t1;
      _.identifier = t2;
      _.$ti = t3;
    },
    WalletStandardChainWeb3State: function WalletStandardChainWeb3State() {
    },
    WalletStandardChainWeb3State__sortAccounts_closure: function WalletStandardChainWeb3State__sortAccounts_closure(t0, t1, t2) {
      this.NETWORKADDRESS = t0;
      this.CHAINACCOUNT = t1;
      this.JSACCOUNT = t2;
    },
    WalletStandardChainWeb3State__sortAccounts_closure0: function WalletStandardChainWeb3State__sortAccounts_closure0(t0, t1, t2, t3) {
      var _ = this;
      _.defaultAccount = t0;
      _.NETWORKADDRESS = t1;
      _.CHAINACCOUNT = t2;
      _.JSACCOUNT = t3;
    },
    WalletStandardChainWeb3State__sortChains_closure: function WalletStandardChainWeb3State__sortChains_closure(t0) {
      this.CHAIN = t0;
    },
    WalletStandardChainWeb3State_closure: function WalletStandardChainWeb3State_closure(t0, t1, t2, t3) {
      var _ = this;
      _.defaultChain = t0;
      _.NETWORKADDRESS = t1;
      _.CHAINACCOUNT = t2;
      _.JSACCOUNT = t3;
    },
    WalletStandardChainWeb3State_jsAccounts_closure: function WalletStandardChainWeb3State_jsAccounts_closure(t0) {
      this.$this = t0;
    },
    WalletStandardChainWeb3State_networkJsAccounts_closure: function WalletStandardChainWeb3State_networkJsAccounts_closure(t0) {
      this.$this = t0;
    },
    WalletStandardChainWeb3State_networkAccountChanged_closure: function WalletStandardChainWeb3State_networkAccountChanged_closure(t0) {
      this.$this = t0;
    },
    WalletStandardChainWeb3State_networkAccountChanged_closure0: function WalletStandardChainWeb3State_networkAccountChanged_closure0(t0) {
      this.$this = t0;
    },
    WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure: function WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure(t0, t1, t2) {
      this.$this = t0;
      this.address = t1;
      this.identifier = t2;
    },
    WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure0: function WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure0() {
    },
    WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure1: function WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure1(t0, t1) {
      this.$this = t0;
      this.address = t1;
    },
    WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure2: function WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure2() {
    },
    WalletStandardChainWeb3State_getAddressNetworkChainAccountOrThrow_closure: function WalletStandardChainWeb3State_getAddressNetworkChainAccountOrThrow_closure(t0, t1) {
      this.$this = t0;
      this.address = t1;
    },
    WalletStandardChainWeb3State_getAddressNetworkChainAccountOrThrow_closure0: function WalletStandardChainWeb3State_getAddressNetworkChainAccountOrThrow_closure0() {
    },
    WalletStandardChainWeb3State_getAccountChain_closure: function WalletStandardChainWeb3State_getAccountChain_closure(t0, t1) {
      this.$this = t0;
      this.account = t1;
    },
    WalletStandardChainWeb3State_getAccountChain_closure0: function WalletStandardChainWeb3State_getAccountChain_closure0() {
    },
    WalletStandardChainWeb3State_getJsAddressChainAccountOrThrow_closure: function WalletStandardChainWeb3State_getJsAddressChainAccountOrThrow_closure(t0, t1, t2) {
      this.$this = t0;
      this.jsAccount = t1;
      this.chain = t2;
    },
    WalletStandardChainWeb3State_getJsAddressChainAccountOrThrow_closure0: function WalletStandardChainWeb3State_getJsAddressChainAccountOrThrow_closure0() {
    },
    WalletStandardChainWeb3State_getJsAddressChainAccountOrThrow_closure1: function WalletStandardChainWeb3State_getJsAddressChainAccountOrThrow_closure1(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    WalletStandardChainWeb3State_defaultNetworkAddresses_closure: function WalletStandardChainWeb3State_defaultNetworkAddresses_closure(t0) {
      this.$this = t0;
    },
    WalletStandardChainWeb3State_getJSAccountOrThrow_closure: function WalletStandardChainWeb3State_getJSAccountOrThrow_closure(t0, t1, t2) {
      this.$this = t0;
      this.address = t1;
      this.identifier = t2;
    },
    WalletStandardChainWeb3State_getJSAccountOrThrow_closure0: function WalletStandardChainWeb3State_getJSAccountOrThrow_closure0() {
    },
    JSWalletStandardNetworkHandler: function JSWalletStandardNetworkHandler() {
    },
    JSWalletStandardNetworkHandler_createStateEvent_closure: function JSWalletStandardNetworkHandler_createStateEvent_closure(t0) {
      this.$this = t0;
    },
    JSWalletStandardNetworkHandler_getState_closure: function JSWalletStandardNetworkHandler_getState_closure(t0) {
      this.$this = t0;
    },
    JSWalletStandardNetworkHandler_initChain_closure: function JSWalletStandardNetworkHandler_initChain_closure(t0, t1) {
      this.$this = t0;
      this.authenticated = t1;
    },
    JSWalletStandardNetworkHandler_createEvent_closure: function JSWalletStandardNetworkHandler_createEvent_closure(t0) {
      this.$this = t0;
    },
    JSNetworkState: function JSNetworkState(t0) {
      this._name = t0;
    },
    _JSWalletStateAccount_Object_Equatable: function _JSWalletStateAccount_Object_Equatable() {
    },
    JSEventType_name($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_Dyb, new A.JSEventType_name_closure($name), new A.JSEventType_name_closure0());
    },
    JSWalletResponseType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_sIQ, new A.JSWalletResponseType_fromName_closure($name), new A.JSWalletResponseType_fromName_closure0());
    },
    JSClientType_fronNetworkName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_fke, new A.JSClientType_fronNetworkName_closure($name), new A.JSClientType_fronNetworkName_closure0());
    },
    JSClientType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_fke, new A.JSClientType_fromName_closure($name), new A.JSClientType_fromName_closure0());
    },
    PageMessageType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_qGz, new A.PageMessageType_fromName_closure($name), new A.PageMessageType_fromName_closure0());
    },
    PageRequestType_fromName($name) {
      return B.JSArray_methods.firstWhere$2$orElse(B.List_m0J, new A.PageRequestType_fromName_closure($name), new A.PageRequestType_fromName_closure0());
    },
    WalletMessage_constructor_response(client, data, requestId) {
      var t1 = client == null ? null : client._name;
      return {requestId: requestId, client: t1, data: data};
    },
    WalletMessage_constructor_event(client, data) {
      var t1 = client == null ? null : client._name;
      return {requestId: "event", client: t1, data: data};
    },
    PageMessageData_asRequest(_this) {
      if (A._asString(_this.type) !== "request")
        throw A.wrapException(B.Web3RequestException_ce8);
      return _this;
    },
    PageMessageData_asEvent(_this) {
      if (A._asString(_this.type) !== "event")
        throw A.wrapException(B.Web3RequestException_ce8);
      return _this;
    },
    PageMessageRequest_get_dartParams(_this) {
      var t1 = type$.nullable_JSArray_nullable_Object._as(_this.params);
      if (t1 == null)
        t1 = null;
      else {
        t1 = B.JSArray_methods.map$1$1(t1, new A.PageMessageRequest_get_dartParams_closure(), type$.nullable_Object);
        t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      }
      return t1 == null ? [] : t1;
    },
    PageMessageRequest_getElementAt(_this, index, $T) {
      var item, t1, exception;
      try {
        item = type$.nullable_JSArray_nullable_Object._as(_this.params)[index];
        t1 = $T._as(item);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    PageMessageRequest_elementAs(_this, index, peroperties, $T) {
      var item, t1, exception;
      try {
        item = type$.nullable_JSArray_nullable_Object._as(_this.params)[index];
        t1 = A.JSOBJ_as(peroperties, item, $T);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    JSArrayFuture_elemetAt(_this, index, $T, $E) {
      var t1, exception;
      try {
        t1 = $E._as($T._eval$1("0?")._as(_this[index]));
        return t1;
      } catch (exception) {
        $E._as(null);
        return null;
      }
    },
    JSNetworkEventType: function JSNetworkEventType(t0) {
      this._name = t0;
    },
    JSEventType: function JSEventType(t0) {
      this._name = t0;
    },
    JSEventType_name_closure: function JSEventType_name_closure(t0) {
      this.name = t0;
    },
    JSEventType_name_closure0: function JSEventType_name_closure0() {
    },
    JSWalletResponseType: function JSWalletResponseType(t0) {
      this._name = t0;
    },
    JSWalletResponseType_fromName_closure: function JSWalletResponseType_fromName_closure(t0) {
      this.name = t0;
    },
    JSWalletResponseType_fromName_closure0: function JSWalletResponseType_fromName_closure0() {
    },
    JSClientType: function JSClientType(t0, t1) {
      this.networkName = t0;
      this._name = t1;
    },
    JSClientType_fronNetworkName_closure: function JSClientType_fronNetworkName_closure(t0) {
      this.name = t0;
    },
    JSClientType_fronNetworkName_closure0: function JSClientType_fronNetworkName_closure0() {
    },
    JSClientType_fromName_closure: function JSClientType_fromName_closure(t0) {
      this.name = t0;
    },
    JSClientType_fromName_closure0: function JSClientType_fromName_closure0() {
    },
    PageMessageType: function PageMessageType(t0) {
      this._name = t0;
    },
    PageMessageType_fromName_closure: function PageMessageType_fromName_closure(t0) {
      this.name = t0;
    },
    PageMessageType_fromName_closure0: function PageMessageType_fromName_closure0() {
    },
    PageRequestType: function PageRequestType(t0) {
      this._name = t0;
    },
    PageRequestType_fromName_closure: function PageRequestType_fromName_closure(t0) {
      this.name = t0;
    },
    PageRequestType_fromName_closure0: function PageRequestType_fromName_closure0() {
    },
    PageMessageRequest_get_dartParams_closure: function PageMessageRequest_get_dartParams_closure() {
    },
    SolanaWeb3State$_(accounts, applicationId, chains, defaultAccount, defaultChain, state) {
      var t1 = type$.SolAddress,
        t2 = type$.Web3SolanaChainAccount,
        t3 = type$.JSObject,
        t4 = A._arrayInstanceType(accounts),
        t5 = t4._eval$1("WhereIterable<1>");
      t4 = A.List_List$_of(new A.WhereIterable(accounts, t4._eval$1("bool(1)")._as(new A.WalletStandardChainWeb3State_closure(defaultChain, t1, t2, t3)), t5), t5._eval$1("Iterable.E"));
      t4 = A.WalletStandardChainWeb3State__sortAccounts(t4, defaultAccount, t1, t2, t3);
      t5 = A.WalletStandardChainWeb3State__sortChains(chains, type$.Web3ChainDefaultIdnetifier);
      return new A.SolanaWeb3State(applicationId, state, defaultAccount, A.WalletStandardChainWeb3State__sortAccounts(accounts, null, t1, t2, t3), t4, t5, defaultChain);
    },
    SolanaWeb3State_SolanaWeb3State(authenticated, applicationId) {
      var t1, t2, t3, accounts, defaultAddress, t4, _null = null;
      if (authenticated == null)
        return A.SolanaWeb3State$_(B.List_empty12, _null, A._setArrayType([], type$.JSArray_Web3ChainDefaultIdnetifier), _null, _null, B.JSNetworkState_2);
      t1 = authenticated.accounts;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,JSWalletStateAccount<SolAddress,Web3SolanaChainAccount,JSObject>>");
      accounts = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("JSWalletStateAccount<SolAddress,Web3SolanaChainAccount,JSObject>(1)")._as(new A.SolanaWeb3State_SolanaWeb3State_closure()), t3), t3._eval$1("ListIterable.E"));
      defaultAddress = A.QuickImutableList_firstWhereOrNull(t1, new A.SolanaWeb3State_SolanaWeb3State_closure0(authenticated), type$.Web3SolanaChainAccount);
      t1 = authenticated.networks;
      t2 = authenticated.currentNetwork;
      if (defaultAddress == null)
        t3 = _null;
      else {
        t3 = defaultAddress.address.address;
        t4 = A.List_List$from(new A.SolAddrDecoder().decodeAddr$1(t3), true, type$.int);
        t4 = new A.JSWalletStateAccount(defaultAddress, A.JSSolanaWalletAccount_constructor_setup(t3, defaultAddress.network.identifier, t4), t2.identifier, type$.JSWalletStateAccount_SolAddress_Web3SolanaChainAccount_JSObject);
        t3 = t4;
      }
      return A.SolanaWeb3State$_(accounts, applicationId, t1, t3, t2, B.JSNetworkState_0);
    },
    SolanaWeb3State: function SolanaWeb3State(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.applicationId = t0;
      _.state = t1;
      _.defaultAccount = t2;
      _.accounts = t3;
      _.networkAccounts = t4;
      _.chains = t5;
      _.defaultChain = t6;
    },
    SolanaWeb3State_SolanaWeb3State_closure: function SolanaWeb3State_SolanaWeb3State_closure() {
    },
    SolanaWeb3State_SolanaWeb3State_closure0: function SolanaWeb3State_SolanaWeb3State_closure0(t0) {
      this.authenticated = t0;
    },
    JSSolanaHandler: function JSSolanaHandler(t0, t1, t2) {
      var _ = this;
      _.__JSWalletStandardNetworkHandler__state_AI = $;
      _.lock = t0;
      _.sendMessageToClient = t1;
      _.sendInternalMessage = t2;
      _.__JSWalletStandardNetworkHandler_jsNetworkType_FI = $;
    },
    JSSolanaHandler__parseTransaction_closure: function JSSolanaHandler__parseTransaction_closure(t0) {
      this.transaction = t0;
    },
    JSSolanaHandler__parseTransaction_closure0: function JSSolanaHandler__parseTransaction_closure0() {
    },
    JSSolanaHandler__parseTransaction_closure1: function JSSolanaHandler__parseTransaction_closure1(t0) {
      this.transaction = t0;
    },
    JSSolanaHandler__parseTransaction_closure2: function JSSolanaHandler__parseTransaction_closure2() {
    },
    JSSolanaHandler__parseSignMessage_closure: function JSSolanaHandler__parseSignMessage_closure(t0) {
      this.message = t0;
    },
    JSSolanaHandler__parseSignIn_closure: function JSSolanaHandler__parseSignIn_closure(t0) {
      this.signIn = t0;
    },
    JSSolanaHandler__parseSignIn_closure0: function JSSolanaHandler__parseSignIn_closure0() {
    },
    JSSolanaHandler_finalizeWalletResponse_closure: function JSSolanaHandler_finalizeWalletResponse_closure() {
    },
    JSSolanaHandler_finalizeWalletResponse_closure0: function JSSolanaHandler_finalizeWalletResponse_closure0() {
    },
    JSSolanaHandler_finalizeWalletResponse_closure1: function JSSolanaHandler_finalizeWalletResponse_closure1() {
    },
    JSSolanaHandler_finalizeWalletResponse_closure2: function JSSolanaHandler_finalizeWalletResponse_closure2() {
    },
    JSSolanaHandler_finalizeWalletResponse_closure3: function JSSolanaHandler_finalizeWalletResponse_closure3() {
    },
    StellarWeb3State$_(accounts, chains, defaultAccount, defaultChain, state) {
      var t1 = type$.StellarAddress,
        t2 = type$.Web3StellarChainAccount,
        t3 = type$.JSObject,
        t4 = A._arrayInstanceType(accounts),
        t5 = t4._eval$1("WhereIterable<1>");
      t4 = A.List_List$_of(new A.WhereIterable(accounts, t4._eval$1("bool(1)")._as(new A.WalletStandardChainWeb3State_closure(defaultChain, t1, t2, t3)), t5), t5._eval$1("Iterable.E"));
      t4 = A.WalletStandardChainWeb3State__sortAccounts(t4, defaultAccount, t1, t2, t3);
      t5 = A.WalletStandardChainWeb3State__sortChains(chains, type$.Web3ChainDefaultIdnetifier);
      return new A.StellarWeb3State(state, defaultAccount, A.WalletStandardChainWeb3State__sortAccounts(accounts, null, t1, t2, t3), t4, t5, defaultChain);
    },
    StellarWeb3State_StellarWeb3State(authenticated) {
      var t1, t2, t3, accounts, defaultAddress, t4;
      if (authenticated == null)
        return A.StellarWeb3State$_(B.List_empty9, A._setArrayType([], type$.JSArray_Web3ChainDefaultIdnetifier), null, null, B.JSNetworkState_2);
      t1 = authenticated.accounts;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,JSWalletStateAccount<StellarAddress,Web3StellarChainAccount,JSObject>>");
      accounts = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("JSWalletStateAccount<StellarAddress,Web3StellarChainAccount,JSObject>(1)")._as(new A.StellarWeb3State_StellarWeb3State_closure()), t3), t3._eval$1("ListIterable.E"));
      defaultAddress = A.QuickImutableList_firstWhereOrNull(t1, new A.StellarWeb3State_StellarWeb3State_closure0(authenticated), type$.Web3StellarChainAccount);
      t1 = authenticated.networks;
      t2 = authenticated.currentNetwork;
      if (defaultAddress == null)
        t3 = null;
      else {
        t3 = J.toString$0$(defaultAddress.address);
        t4 = defaultAddress.publicKey;
        t4 = new A.JSWalletStateAccount(defaultAddress, A.JSStellarWalletAccount_constructor_setup(t3, "stellar:" + defaultAddress.network._name, t4), t2.identifier, type$.JSWalletStateAccount_StellarAddress_Web3StellarChainAccount_JSObject);
        t3 = t4;
      }
      return A.StellarWeb3State$_(accounts, t1, t3, t2, B.JSNetworkState_0);
    },
    StellarWeb3State: function StellarWeb3State(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.state = t0;
      _.defaultAccount = t1;
      _.accounts = t2;
      _.networkAccounts = t3;
      _.chains = t4;
      _.defaultChain = t5;
    },
    StellarWeb3State_StellarWeb3State_closure: function StellarWeb3State_StellarWeb3State_closure() {
    },
    StellarWeb3State_StellarWeb3State_closure0: function StellarWeb3State_StellarWeb3State_closure0(t0) {
      this.authenticated = t0;
    },
    JSStellarHandler: function JSStellarHandler(t0, t1, t2) {
      var _ = this;
      _.__JSWalletStandardNetworkHandler__state_AI = $;
      _.lock = t0;
      _.sendMessageToClient = t1;
      _.sendInternalMessage = t2;
      _.__JSWalletStandardNetworkHandler_jsNetworkType_FI = $;
    },
    JSStellarHandler__signMessage_closure: function JSStellarHandler__signMessage_closure(t0) {
      this.data = t0;
    },
    JSSubstrateWalletAccount_constructor_setup(address, chain, genesisHash, publicKey) {
      var t1, t2, _this = {};
      _this.address = address;
      _this.chains = A._setArrayType([chain], type$.JSArray_String);
      _this.genesisHash = genesisHash;
      t1 = $.$get$SubstrateJSConst_defaultAccountFeatures();
      t2 = init.G;
      _this.features = type$.JSArray_nullable_Object._as(t2.Object.freeze(t1));
      _this.publicKey = type$.Object._as(t2.Uint8Array.from(A.jsify(publicKey)));
      return _this;
    },
    JSSubstrateTransaction_toJson(_this) {
      var t15,
        t1 = A._asString(_this.address),
        t2 = A._asStringQ(_this.assetId),
        t3 = A._asString(_this.blockHash),
        t4 = A._asString(_this.blockNumber),
        t5 = A._asString(_this.era),
        t6 = A._asString(_this.genesisHash),
        t7 = A._asStringQ(_this.metadataHash),
        t8 = A._asString(_this.method),
        t9 = A._asIntQ(_this.mode),
        t10 = A._asString(_this.nonce),
        t11 = A._asString(_this.specVersion),
        t12 = A._asString(_this.transactionVersion),
        t13 = A._asString(_this.tip),
        t14 = type$.JSArray_nullable_Object._as(_this.signedExtensions);
      t14 = type$.List_String._is(t14) ? t14 : new A.CastList(t14, A._arrayInstanceType(t14)._eval$1("CastList<1,String>"));
      t15 = type$.String;
      t14 = J.map$1$1$ax(t14, new A.JSSubstrateTransaction_toJson_closure(), t15);
      t14 = A.List_List$_of(t14, t14.$ti._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["address", t1, "assetId", t2, "blockHash", t3, "blockNumber", t4, "era", t5, "genesisHash", t6, "metadataHash", t7, "method", t8, "mode", t9, "nonce", t10, "specVersion", t11, "transactionVersion", t12, "tip", t13, "signedExtensions", t14, "version", A._asInt(_this.version), "withSignedTransaction", A._asBoolQ(_this.withSignedTransaction)], t15, type$.dynamic);
    },
    JSSubstrateTransaction_toJson_closure: function JSSubstrateTransaction_toJson_closure() {
    },
    SubstrateWeb3State$_(accounts, chains, defaultAccount, defaultChain, state) {
      var t1 = type$.BaseSubstrateAddress,
        t2 = type$.Web3SubstrateChainAccount,
        t3 = type$.JSObject,
        t4 = A._arrayInstanceType(accounts),
        t5 = t4._eval$1("WhereIterable<1>");
      t4 = A.List_List$_of(new A.WhereIterable(accounts, t4._eval$1("bool(1)")._as(new A.WalletStandardChainWeb3State_closure(defaultChain, t1, t2, t3)), t5), t5._eval$1("Iterable.E"));
      t4 = A.WalletStandardChainWeb3State__sortAccounts(t4, defaultAccount, t1, t2, t3);
      t5 = A.WalletStandardChainWeb3State__sortChains(chains, type$.Web3SubstrateChainIdnetifier);
      return new A.SubstrateWeb3State(state, defaultAccount, A.WalletStandardChainWeb3State__sortAccounts(accounts, null, t1, t2, t3), t4, t5, defaultChain);
    },
    SubstrateWeb3State_SubstrateWeb3State(authenticated) {
      var t1, t2, t3, _i, i, t4, t5, accounts, defaultAddress, t6, t7;
      if (authenticated == null)
        return A.SubstrateWeb3State$_(B.List_empty8, A._setArrayType([], type$.JSArray_Web3SubstrateChainIdnetifier), null, null, B.JSNetworkState_2);
      t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.Web3SubstrateChainIdnetifier);
      for (t2 = authenticated.networks, t3 = t2.length, _i = 0; _i < t3; ++_i) {
        i = t2[_i];
        t1.$indexSet(0, i.id, i);
      }
      t3 = authenticated.accounts;
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,JSWalletStateAccount<BaseSubstrateAddress,Web3SubstrateChainAccount,JSObject>>");
      accounts = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("JSWalletStateAccount<BaseSubstrateAddress,Web3SubstrateChainAccount,JSObject>(1)")._as(new A.SubstrateWeb3State_SubstrateWeb3State_closure(t1)), t5), t5._eval$1("ListIterable.E"));
      defaultAddress = A.QuickImutableList_firstWhereOrNull(t3, new A.SubstrateWeb3State_SubstrateWeb3State_closure0(authenticated), type$.Web3SubstrateChainAccount);
      t3 = authenticated.currentNetwork;
      if (defaultAddress == null)
        t1 = null;
      else {
        t4 = J.toString$0$(defaultAddress.address);
        t5 = defaultAddress.publicKey;
        t6 = defaultAddress.id;
        t7 = t1.$index(0, t6).genesisHash;
        t5 = new A.JSWalletStateAccount(defaultAddress, A.JSSubstrateWalletAccount_constructor_setup(t4, "substrate:" + t1.$index(0, t6).genesisHash, t7, t5), "substrate:" + t3.genesisHash, type$.JSWalletStateAccount_BaseSubstrateAddress_Web3SubstrateChainAccount_JSObject);
        t1 = t5;
      }
      return A.SubstrateWeb3State$_(accounts, t2, t1, t3, B.JSNetworkState_0);
    },
    SubstrateWeb3State: function SubstrateWeb3State(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.state = t0;
      _.defaultAccount = t1;
      _.accounts = t2;
      _.networkAccounts = t3;
      _.chains = t4;
      _.defaultChain = t5;
    },
    SubstrateWeb3State_knownMetadatas_closure: function SubstrateWeb3State_knownMetadatas_closure() {
    },
    SubstrateWeb3State_SubstrateWeb3State_closure: function SubstrateWeb3State_SubstrateWeb3State_closure(t0) {
      this.networks = t0;
    },
    SubstrateWeb3State_SubstrateWeb3State_closure0: function SubstrateWeb3State_SubstrateWeb3State_closure0(t0) {
      this.authenticated = t0;
    },
    JSSubstrateHandler: function JSSubstrateHandler(t0, t1, t2) {
      var _ = this;
      _.__JSWalletStandardNetworkHandler__state_AI = $;
      _.lock = t0;
      _.sendMessageToClient = t1;
      _.sendInternalMessage = t2;
      _.__JSWalletStandardNetworkHandler_jsNetworkType_FI = $;
    },
    JSSubstrateHandler__signMessage_closure: function JSSubstrateHandler__signMessage_closure(t0) {
      this.param = t0;
    },
    JSSubstrateHandler__parseTransaction_closure: function JSSubstrateHandler__parseTransaction_closure(t0) {
      this.param = t0;
    },
    SuiWeb3State$_(accounts, chains, defaultAccount, defaultChain, state) {
      var t1 = type$.SuiAddress,
        t2 = type$.Web3SuiChainAccount,
        t3 = type$.JSObject,
        t4 = A._arrayInstanceType(accounts),
        t5 = t4._eval$1("WhereIterable<1>");
      t4 = A.List_List$_of(new A.WhereIterable(accounts, t4._eval$1("bool(1)")._as(new A.WalletStandardChainWeb3State_closure(defaultChain, t1, t2, t3)), t5), t5._eval$1("Iterable.E"));
      t4 = A.WalletStandardChainWeb3State__sortAccounts(t4, defaultAccount, t1, t2, t3);
      t5 = A.WalletStandardChainWeb3State__sortChains(chains, type$.Web3ChainDefaultIdnetifier);
      return new A.SuiWeb3State(state, defaultAccount, A.WalletStandardChainWeb3State__sortAccounts(accounts, null, t1, t2, t3), t4, t5, defaultChain);
    },
    SuiWeb3State_SuiWeb3State(authenticated) {
      var t1, t2, t3, accounts, defaultAddress, t4, t5;
      if (authenticated == null)
        return A.SuiWeb3State$_(B.List_empty6, A._setArrayType([], type$.JSArray_Web3ChainDefaultIdnetifier), null, null, B.JSNetworkState_2);
      t1 = authenticated.accounts;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,JSWalletStateAccount<SuiAddress,Web3SuiChainAccount,JSObject>>");
      accounts = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("JSWalletStateAccount<SuiAddress,Web3SuiChainAccount,JSObject>(1)")._as(new A.SuiWeb3State_SuiWeb3State_closure()), t3), t3._eval$1("ListIterable.E"));
      defaultAddress = A.QuickImutableList_firstWhereOrNull(t1, new A.SuiWeb3State_SuiWeb3State_closure0(authenticated), type$.Web3SuiChainAccount);
      t1 = authenticated.networks;
      t2 = authenticated.currentNetwork;
      if (defaultAddress == null)
        t3 = null;
      else {
        t3 = defaultAddress.address;
        t4 = defaultAddress.publicKey;
        t5 = defaultAddress.signingScheme;
        t5 = new A.JSWalletStateAccount(defaultAddress, A.JSSuiWalletAccount_constructor_setup(t3.address, "sui:" + defaultAddress.network._name, t4, t5), t2.identifier, type$.JSWalletStateAccount_SuiAddress_Web3SuiChainAccount_JSObject);
        t3 = t5;
      }
      return A.SuiWeb3State$_(accounts, t1, t3, t2, B.JSNetworkState_0);
    },
    SuiWeb3State: function SuiWeb3State(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.state = t0;
      _.defaultAccount = t1;
      _.accounts = t2;
      _.networkAccounts = t3;
      _.chains = t4;
      _.defaultChain = t5;
    },
    SuiWeb3State_SuiWeb3State_closure: function SuiWeb3State_SuiWeb3State_closure() {
    },
    SuiWeb3State_SuiWeb3State_closure0: function SuiWeb3State_SuiWeb3State_closure0(t0) {
      this.authenticated = t0;
    },
    JSSuiHandler: function JSSuiHandler(t0, t1, t2) {
      var _ = this;
      _.__JSWalletStandardNetworkHandler__state_AI = $;
      _.lock = t0;
      _.sendMessageToClient = t1;
      _.sendInternalMessage = t2;
      _.__JSWalletStandardNetworkHandler_jsNetworkType_FI = $;
    },
    JSSuiHandler__parseTransaction_closure: function JSSuiHandler__parseTransaction_closure(t0) {
      this.transaction = t0;
    },
    TonWeb3State$_(accounts, chains, defaultAccount, defaultChain, state) {
      var t1 = type$.TonAddress,
        t2 = type$.Web3TonChainAccount,
        t3 = type$.JSObject,
        t4 = A._arrayInstanceType(accounts),
        t5 = t4._eval$1("WhereIterable<1>");
      t4 = A.List_List$_of(new A.WhereIterable(accounts, t4._eval$1("bool(1)")._as(new A.WalletStandardChainWeb3State_closure(defaultChain, t1, t2, t3)), t5), t5._eval$1("Iterable.E"));
      t4 = A.WalletStandardChainWeb3State__sortAccounts(t4, defaultAccount, t1, t2, t3);
      t5 = A.WalletStandardChainWeb3State__sortChains(chains, type$.Web3ChainDefaultIdnetifier);
      return new A.TonWeb3State(state, defaultAccount, A.WalletStandardChainWeb3State__sortAccounts(accounts, null, t1, t2, t3), t4, t5, defaultChain);
    },
    TonWeb3State_TonWeb3State(authenticated) {
      var t1, t2, t3, accounts, defaultAddress, t4, t5;
      if (authenticated == null)
        return A.TonWeb3State$_(B.List_empty10, A._setArrayType([], type$.JSArray_Web3ChainDefaultIdnetifier), null, null, B.JSNetworkState_2);
      t1 = authenticated.accounts;
      t2 = A._arrayInstanceType(t1);
      t3 = t2._eval$1("MappedListIterable<1,JSWalletStateAccount<TonAddress,Web3TonChainAccount,JSObject>>");
      accounts = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("JSWalletStateAccount<TonAddress,Web3TonChainAccount,JSObject>(1)")._as(new A.TonWeb3State_TonWeb3State_closure()), t3), t3._eval$1("ListIterable.E"));
      defaultAddress = A.QuickImutableList_firstWhereOrNull(t1, new A.TonWeb3State_TonWeb3State_closure0(authenticated), type$.Web3TonChainAccount);
      t1 = authenticated.networks;
      t2 = authenticated.currentNetwork;
      if (defaultAddress == null)
        t3 = null;
      else {
        t3 = defaultAddress.address.toFriendlyAddress$0();
        t4 = defaultAddress.publicKey;
        t5 = defaultAddress.get$accountState();
        t5 = new A.JSWalletStateAccount(defaultAddress, A.JSTonWalletAccount_constructor_setup(t3, defaultAddress.get$identifier(), t4, t5), t2.identifier, type$.JSWalletStateAccount_TonAddress_Web3TonChainAccount_JSObject);
        t3 = t5;
      }
      return A.TonWeb3State$_(accounts, t1, t3, t2, B.JSNetworkState_0);
    },
    TonWeb3State: function TonWeb3State(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.state = t0;
      _.defaultAccount = t1;
      _.accounts = t2;
      _.networkAccounts = t3;
      _.chains = t4;
      _.defaultChain = t5;
    },
    TonWeb3State_TonWeb3State_closure: function TonWeb3State_TonWeb3State_closure() {
    },
    TonWeb3State_TonWeb3State_closure0: function TonWeb3State_TonWeb3State_closure0(t0) {
      this.authenticated = t0;
    },
    JSTonHandler: function JSTonHandler(t0, t1, t2) {
      var _ = this;
      _.__JSWalletStandardNetworkHandler__state_AI = $;
      _.lock = t0;
      _.sendMessageToClient = t1;
      _.sendInternalMessage = t2;
      _.__JSWalletStandardNetworkHandler_jsNetworkType_FI = $;
    },
    JSTonHandler__signMessage_closure: function JSTonHandler__signMessage_closure(t0) {
      this.signParams = t0;
    },
    JSTonHandler__parseTransaction_closure: function JSTonHandler__parseTransaction_closure(t0) {
      this.message = t0;
    },
    JSTonHandler__parseTransaction_closure0: function JSTonHandler__parseTransaction_closure0(t0) {
      this.message = t0;
    },
    JSTonHandler__parseTransaction_closure1: function JSTonHandler__parseTransaction_closure1(t0) {
      this.message = t0;
    },
    TronWeb3State$_(accounts, chains, defaultAccount, defaultChain, state) {
      var t1 = type$.TronAddress,
        t2 = type$.Web3TronChainAccount,
        t3 = type$.JSObject,
        t4 = A._arrayInstanceType(accounts),
        t5 = t4._eval$1("WhereIterable<1>");
      t4 = A.List_List$_of(new A.WhereIterable(accounts, t4._eval$1("bool(1)")._as(new A.WalletStandardChainWeb3State_closure(defaultChain, t1, t2, t3)), t5), t5._eval$1("Iterable.E"));
      t4 = A.WalletStandardChainWeb3State__sortAccounts(t4, defaultAccount, t1, t2, t3);
      t5 = A.WalletStandardChainWeb3State__sortChains(chains, type$.Web3TronChainIdnetifier);
      return new A.TronWeb3State(state, defaultAccount, A.WalletStandardChainWeb3State__sortAccounts(accounts, null, t1, t2, t3), t4, t5, defaultChain);
    },
    TronWeb3State_TronWeb3State(authenticated) {
      var t1, t2, t3, _i, i, t4, t5, accounts, defaultAddress, t6;
      if (authenticated == null)
        return A.TronWeb3State$_(B.List_empty13, A._setArrayType([], type$.JSArray_Web3TronChainIdnetifier), null, null, B.JSNetworkState_2);
      t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.Web3TronChainIdnetifier);
      for (t2 = authenticated.networks, t3 = t2.length, _i = 0; _i < t3; ++_i) {
        i = t2[_i];
        t1.$indexSet(0, i.id, i);
      }
      t3 = authenticated.accounts;
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,JSWalletStateAccount<TronAddress,Web3TronChainAccount,JSObject>>");
      accounts = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("JSWalletStateAccount<TronAddress,Web3TronChainAccount,JSObject>(1)")._as(new A.TronWeb3State_TronWeb3State_closure(t1)), t5), t5._eval$1("ListIterable.E"));
      defaultAddress = A.QuickImutableList_firstWhereOrNull(t3, new A.TronWeb3State_TronWeb3State_closure0(authenticated), type$.Web3TronChainAccount);
      t3 = authenticated.currentNetwork;
      if (defaultAddress == null)
        t1 = null;
      else {
        t4 = defaultAddress.address;
        t5 = t4.toAddress$0();
        t6 = defaultAddress.publicKey;
        t4 = t4.toAddress$1(false);
        t6 = new A.JSWalletStateAccount(defaultAddress, A.JSSTronWalletAccount_constructor_setup(t5, "tron:" + t1.$index(0, defaultAddress.id).chainId, t4, t6), "tron:" + t3.chainId, type$.JSWalletStateAccount_TronAddress_Web3TronChainAccount_JSObject);
        t1 = t6;
      }
      return A.TronWeb3State$_(accounts, t2, t1, t3, B.JSNetworkState_0);
    },
    JSTronHandler__parseSwitchTronChain(params) {
      var toObject, t1, exception;
      try {
        toObject = A.JsUtils_toDartMap(A.PageMessageRequest_elementAs(params, 0, B.List_empty5, type$.Object));
        if (toObject == null)
          throw A.wrapException(B.Web3RequestException_pXe);
        t1 = A.IntUtils_parse(toObject.$index(0, "chainId"), true);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.Web3RequestException_pXe);
      }
    },
    TronWeb3State: function TronWeb3State(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.state = t0;
      _.defaultAccount = t1;
      _.accounts = t2;
      _.networkAccounts = t3;
      _.chains = t4;
      _.defaultChain = t5;
    },
    TronWeb3State_getChainFromChainId_closure: function TronWeb3State_getChainFromChainId_closure(t0) {
      this.chainId = t0;
    },
    TronWeb3State_getChainFromChainId_closure0: function TronWeb3State_getChainFromChainId_closure0() {
    },
    TronWeb3State_TronWeb3State_closure: function TronWeb3State_TronWeb3State_closure(t0) {
      this.networks = t0;
    },
    TronWeb3State_TronWeb3State_closure0: function TronWeb3State_TronWeb3State_closure0(t0) {
      this.authenticated = t0;
    },
    JSTronHandler: function JSTronHandler(t0, t1, t2) {
      var _ = this;
      _.__JSWalletStandardNetworkHandler__state_AI = $;
      _.lock = t0;
      _.sendMessageToClient = t1;
      _.sendInternalMessage = t2;
      _.__JSWalletStandardNetworkHandler_jsNetworkType_FI = $;
    },
    JSTronHandler__parseWalletStandardTransaction_closure: function JSTronHandler__parseWalletStandardTransaction_closure(t0) {
      this.param = t0;
    },
    JSTronHandler_finalizeWalletResponse_closure: function JSTronHandler_finalizeWalletResponse_closure() {
    },
    JsUtils_compareAddress(a, b, defaultAddress) {
      if (a === defaultAddress)
        return -1;
      else if (b === defaultAddress)
        return 1;
      return B.JSString_methods.compareTo$1(a, b);
    },
    JsUtils_toDartMap(object) {
      var t1, exception, _null = null;
      try {
        if (object == null)
          return _null;
        if (typeof object === "string") {
          t1 = A.StringUtils_toJson(A._asString(object), _null, type$.Map_String_dynamic);
          return t1;
        }
        t1 = A.StringUtils_toJson(A._asString(type$.JSObject._as(init.G.JSON).stringify(object)), _null, type$.Map_String_dynamic);
        return t1;
      } catch (exception) {
        return _null;
      }
    },
    JsUtils_toListOfMap(object) {
      var t1, exception, _null = null;
      try {
        if (object == null)
          return _null;
        if (typeof object === "string") {
          t1 = J.map$1$1$ax(A.StringUtils_toJson(object, _null, type$.List_dynamic), new A.JsUtils_toListOfMap_closure(), type$.Map_String_dynamic);
          t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
          return t1;
        }
        t1 = J.map$1$1$ax(A.StringUtils_toJson(A._asString(type$.JSObject._as(init.G.JSON).stringify(object)), _null, type$.List_dynamic), new A.JsUtils_toListOfMap_closure0(), type$.Map_String_dynamic);
        t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
        return t1;
      } catch (exception) {
        return _null;
      }
    },
    JsUtils_convertInt53(int53) {
      var t1,
        low = A._BigIntImpl__BigIntImpl$from(A._asInt(int53.low)),
        int256 = A._BigIntImpl__BigIntImpl$from(A._asInt(int53.high)).$shl(0, 32).$or(0, low.$and(0, A._BigIntImpl__BigIntImpl$from(4294967295)));
      if (A._asBool(int53.unsigned)) {
        t1 = $.$get$_BigIntImpl_one();
        return int256.$and(0, t1.$shl(0, 53).$sub(0, t1)).toInt$0(0);
      }
      return int256.toInt$0(0);
    },
    JsUtils_parseNumber(object) {
      var n, t1, exception;
      try {
        if (object == null)
          return null;
        if (typeof object === "number") {
          t1 = A._BigIntImpl__BigIntImpl$from(A._asInt(A._asDouble(object)));
          return t1;
        }
        if (typeof object === "bigint") {
          t1 = A.BigintUtils_parse(J.toString$0$(object), true);
          return t1;
        }
        if (typeof object === "string") {
          t1 = A.BigintUtils_parse(A._asString(object), true);
          return t1;
        }
        n = A.JSOBJ_as(B.List_low_high_unsigned, object, type$.JSObject);
        if (n != null) {
          t1 = A._BigIntImpl__BigIntImpl$from(A.JsUtils_convertInt53(n));
          return t1;
        }
        t1 = A.BigintUtils_parse(J.toString$0$(object), true);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    JsUtils_parseHexString(obj) {
      var hex, msgBytes, exception,
        required0x = true;
      try {
        if (obj != null && typeof obj === "string") {
          hex = obj.toLowerCase();
          if (required0x && !J.startsWith$1$s(hex, "0x"))
            return null;
          msgBytes = A.BytesUtils_tryFromHexString(hex, false);
          if (msgBytes != null)
            return hex;
          return hex;
        }
      } catch (exception) {
      }
      return null;
    },
    JsUtils_toListOfMap_closure: function JsUtils_toListOfMap_closure() {
    },
    JsUtils_toListOfMap_closure0: function JsUtils_toListOfMap_closure0() {
    },
    JSExtentionWallet__pingPort(newPort) {
      return A.JSExtentionWallet__pingPort$body(newPort);
    },
    JSExtentionWallet__pingPort$body(newPort) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_JSObject),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], completer, onEmitMessage, result, t1;
      var $async$JSExtentionWallet__pingPort = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (newPort == null) {
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              }
              completer = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_JSObject), type$._AsyncCompleter_JSObject);
              $async$handler = 3;
              onEmitMessage = new A.JSExtentionWallet__pingPort_onEmitMessage(completer);
              t1 = init.G;
              t1.PINGREFRENCE_ = A._functionToJS2(onEmitMessage);
              newPort.postMessage(A.ToJsEvent_toJsEvent(new A.WalletEvent(B.WalletEventTarget_2, "", A.List_List$unmodifiable(B.List_empty, type$.int), "extension newPort", B.WalletEventTypes_4, null, null)));
              type$.JSObject._as(newPort.onMessage).addListener(type$.JavaScriptFunction._as(t1.PINGREFRENCE_));
              $async$goto = 6;
              return A._asyncAwait(completer.future, $async$JSExtentionWallet__pingPort);
            case 6:
              // returning from await.
              result = $async$result;
              $async$returnValue = result;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              t1 = init.G;
              type$.JSObject._as(newPort.onMessage).removeListener(type$.JavaScriptFunction._as(t1.PINGREFRENCE_));
              t1.PINGREFRENCE_ = null;
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$JSExtentionWallet__pingPort, $async$completer);
    },
    JSExtentionWallet_sendBackgroudMessage(msg, allowTargets) {
      return A.JSExtentionWallet_sendBackgroudMessage$body(msg, allowTargets);
    },
    JSExtentionWallet_sendBackgroudMessage$body(msg, allowTargets) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.WalletEvent),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], completer, onMessage, r, t1, exception, t2, hasListener, $async$exception;
      var $async$JSExtentionWallet_sendBackgroudMessage = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              hasListener = false;
              $async$handler = 3;
              completer = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_WalletEvent), type$._AsyncCompleter_WalletEvent);
              onMessage = new A.JSExtentionWallet_sendBackgroudMessage_onMessage(allowTargets, msg, completer);
              $async$handler = 7;
              $async$goto = 10;
              return A._asyncAwait(A.Runtime_sendMessage_(type$.JSObject._as(A.extension().runtime), msg), $async$JSExtentionWallet_sendBackgroudMessage);
            case 10:
              // returning from await.
              r = $async$result;
              t1 = r;
              t1.toString;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              $async$handler = 3;
              // goto after finally
              $async$goto = 9;
              break;
            case 7:
              // catch
              $async$handler = 6;
              $async$exception = $async$errorStack.pop();
              t1 = init.G;
              t1.OnBackgroundListener_ = A._functionToJS3(onMessage);
              t2 = type$.JSObject;
              t2._as(t2._as(A.extension().runtime).onMessage).addListener(type$.JavaScriptFunction._as(t1.OnBackgroundListener_));
              hasListener = true;
              $async$goto = 11;
              return A._asyncAwait(completer.future, $async$JSExtentionWallet_sendBackgroudMessage);
            case 11:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              // goto after finally
              $async$goto = 9;
              break;
            case 6:
              // uncaught
              // goto uncaught
              $async$goto = 3;
              break;
            case 9:
              // after finally
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              if (hasListener) {
                t1 = type$.JSObject;
                t1._as(t1._as(A.extension().runtime).onMessage).removeListener(type$.JavaScriptFunction._as(init.G.OnBackgroundListener_));
              }
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$JSExtentionWallet_sendBackgroudMessage, $async$completer);
    },
    JSWalletHandler: function JSWalletHandler() {
    },
    JSWalletHandler_handleClientMessage_closure: function JSWalletHandler_handleClientMessage_closure(t0, t1) {
      this.$this = t0;
      this.request = t1;
    },
    JSWalletStandardHandler: function JSWalletStandardHandler() {
    },
    JSWalletStandardHandler__getWalletChange_closure: function JSWalletStandardHandler__getWalletChange_closure() {
    },
    JSWalletStandardHandler__getWalletChange_closure0: function JSWalletStandardHandler__getWalletChange_closure0() {
    },
    JSWalletStandardHandler__getWalletChange_closure1: function JSWalletStandardHandler__getWalletChange_closure1() {
    },
    JSWalletStandardHandler__getWalletChange_closure2: function JSWalletStandardHandler__getWalletChange_closure2() {
    },
    JSWalletStandardHandler__getWalletChange_closure3: function JSWalletStandardHandler__getWalletChange_closure3() {
    },
    JSWalletStandardHandler__getWalletChange_closure4: function JSWalletStandardHandler__getWalletChange_closure4() {
    },
    JSExtentionWallet: function JSExtentionWallet(t0, t1, t2, t3, t4) {
      var _ = this;
      _._portLock = t0;
      _.clientId = t1;
      _._port = null;
      _._initializeAuthenticated = t2;
      _.__JSWalletHandler__id_FI = _.__JSWalletHandler__networks_FI = $;
      _.completer = t3;
      _._crypto = t4;
    },
    JSExtentionWallet__onExtentionPortDiscounect_closure: function JSExtentionWallet__onExtentionPortDiscounect_closure(t0) {
      this.$this = t0;
    },
    JSExtentionWallet__pingPort_onEmitMessage: function JSExtentionWallet__pingPort_onEmitMessage(t0) {
      this.completer = t0;
    },
    JSExtentionWallet__getPort_closure: function JSExtentionWallet__getPort_closure(t0) {
      this.$this = t0;
    },
    JSExtentionWallet__openPort_closure: function JSExtentionWallet__openPort_closure(t0) {
      this.$this = t0;
    },
    JSExtentionWallet_sendBackgroudMessage_onMessage: function JSExtentionWallet_sendBackgroudMessage_onMessage(t0, t1, t2) {
      this.allowTargets = t0;
      this.msg = t1;
      this.completer = t2;
    },
    JSExtentionWallet_sendBackgroudMessage_onMessage_closure: function JSExtentionWallet_sendBackgroudMessage_onMessage_closure(t0) {
      this.completer = t0;
    },
    JSExtentionWallet_sendBackgroudMessage_onMessage_closure0: function JSExtentionWallet_sendBackgroudMessage_onMessage_closure0(t0) {
      this.completer = t0;
    },
    JSExtentionWallet__sendMessageToExtention_closure: function JSExtentionWallet__sendMessageToExtention_closure() {
    },
    JSExtentionWallet__sendMessageToExtention_onDisconnect: function JSExtentionWallet__sendMessageToExtention_onDisconnect(t0, t1) {
      this.$this = t0;
      this.requestId = t1;
    },
    JSExtentionWallet__sendMessageToExtention_onMessage: function JSExtentionWallet__sendMessageToExtention_onMessage(t0, t1) {
      this.$this = t0;
      this.requestId = t1;
    },
    _JSWalletHandler_Object_JSWalletStandardHandler: function _JSWalletHandler_Object_JSWalletStandardHandler() {
    },
    JSWalletStandardConnect_constructor_setup(accounts) {
      var _this = {};
      _this.accounts = type$.JSArray_nullable_Object._as(accounts);
      return _this;
    },
    JSWalletStandardChange_constructor_setup(accounts, chains) {
      var t1, _this = {};
      if (chains == null)
        t1 = null;
      else {
        t1 = J.map$1$1$ax(chains, new A.JSWalletStandardChange_constructor_setup_closure(), type$.String);
        t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      }
      _this.chains = t1;
      t1 = accounts == null ? null : type$.JSArray_nullable_Object._as(accounts);
      _this.accounts = t1;
      return _this;
    },
    JSWalletNetworkEvent_constructor_(account, change, events, message, networkAccounts) {
      var _this = {},
        t1 = A._arrayInstanceType(events),
        t2 = t1._eval$1("MappedListIterable<1,String>");
      t1 = A.List_List$_of(new A.MappedListIterable(events, t1._eval$1("String(1)")._as(new A.JSWalletNetworkEvent_constructor__closure()), t2), t2._eval$1("ListIterable.E"));
      _this.types = t1;
      _this.change = change;
      _this.networkAccounts = networkAccounts;
      _this.disconnect = null;
      _this.chainChanged = null;
      _this.account = account;
      _this.message = message;
      return _this;
    },
    JSWalletConnectEvent_constructor_setup(accounts) {
      var _this = {};
      _this.accounts = accounts;
      return _this;
    },
    JSWalletStandardChange_constructor_setup_closure: function JSWalletStandardChange_constructor_setup_closure() {
    },
    JSWalletNetworkEvent_constructor__closure: function JSWalletNetworkEvent_constructor__closure() {
    },
    PlatformWebScoket_connect(url) {
      return A.PlatformWebScoket_connect$body(url);
    },
    PlatformWebScoket_connect$body(url) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.PlatformWebScoket),
        $async$returnValue;
      var $async$PlatformWebScoket_connect = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = A.connectSoc(url, null);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$PlatformWebScoket_connect, $async$completer);
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    ListToJSArray_get_toJS(_this, $T) {
      return type$.JSArray_nullable_Object._as(_this);
    },
    BitcoinScriptUtils_scriptContains(elements, script) {
      var i, element,
        t1 = script.script,
        t2 = t1.length;
      if (elements.length !== t2)
        return false;
      for (i = 0; i < t2; ++i) {
        if (!(i < elements.length))
          return A.ioore(elements, i);
        element = elements[i];
        if (element != null)
          if (!J.$eq$(t1[i], element.name))
            return false;
      }
      return true;
    },
    BitcoinScriptUtils_isP2pkh(script) {
      var t1, addressProgram;
      if (A.BitcoinScriptUtils_scriptContains([B.BitcoinOpcode_OP_DUP_118_opDup, B.BitcoinOpcode_OP_HASH160_169_opHash160, null, B.BitcoinOpcode_OP_EQUALVERIFY_136_opEqualVerify, B.BitcoinOpcode_OP_CHECKSIG_172_opCheckSig], script)) {
        t1 = script.script;
        if (2 >= t1.length)
          return A.ioore(t1, 2);
        addressProgram = t1[2];
        return typeof addressProgram == "string" && addressProgram.length === 40;
      }
      return false;
    },
    BitcoinScriptUtils_isP2sh(script) {
      var t1, pubKeyBytes;
      if (A.BitcoinScriptUtils_scriptContains([B.BitcoinOpcode_OP_HASH160_169_opHash160, null, B.BitcoinOpcode_OP_EQUAL_135_opEqual], script)) {
        t1 = script.script;
        if (1 >= t1.length)
          return A.ioore(t1, 1);
        pubKeyBytes = A.BytesUtils_tryFromHexString(A._asStringQ(t1[1]), false);
        return (pubKeyBytes == null ? null : pubKeyBytes.length) === 20;
      }
      return false;
    },
    BitcoinScriptUtils_isP2sh32(script) {
      var t1, pubKeyBytes;
      if (A.BitcoinScriptUtils_scriptContains([B.BitcoinOpcode_OP_HASH256_170_opHash256, null, B.BitcoinOpcode_OP_EQUAL_135_opEqual], script)) {
        t1 = script.script;
        if (1 >= t1.length)
          return A.ioore(t1, 1);
        pubKeyBytes = A.BytesUtils_tryFromHexString(A._asStringQ(t1[1]), false);
        return (pubKeyBytes == null ? null : pubKeyBytes.length) === 32;
      }
      return false;
    },
    BitcoinScriptUtils_isP2pk(script) {
      var t1, pubKeyBytes, t2;
      if (A.BitcoinScriptUtils_scriptContains([null, B.BitcoinOpcode_OP_CHECKSIG_172_opCheckSig], script)) {
        t1 = script.script;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        pubKeyBytes = A.BytesUtils_tryFromHexString(A._asStringQ(t1[0]), false);
        t1 = pubKeyBytes == null;
        if ((t1 ? null : pubKeyBytes.length) !== 33) {
          t2 = (t1 ? null : pubKeyBytes.length) === 65;
          t1 = t2;
        } else
          t1 = true;
        return t1;
      }
      return false;
    },
    BitcoinScriptUtils_isP2tr(script) {
      var t1, pubKeyBytes;
      if (A.BitcoinScriptUtils_scriptContains([B.BitcoinOpcode_OP_1_81_op1, null], script)) {
        t1 = script.script;
        if (1 >= t1.length)
          return A.ioore(t1, 1);
        pubKeyBytes = A.BytesUtils_tryFromHexString(A._asStringQ(t1[1]), false);
        t1 = pubKeyBytes == null ? null : pubKeyBytes.length;
        return t1 === B.SegwitAddressType_P2TR.get$hashLength();
      }
      return false;
    },
    BitcoinScriptUtils_isP2wpkh(script) {
      var t1, pubKeyBytes;
      if (A.BitcoinScriptUtils_scriptContains([B.BitcoinOpcode_OP_0_0_op0, null], script)) {
        t1 = script.script;
        if (1 >= t1.length)
          return A.ioore(t1, 1);
        pubKeyBytes = A.BytesUtils_tryFromHexString(A._asStringQ(t1[1]), false);
        t1 = pubKeyBytes == null ? null : pubKeyBytes.length;
        return t1 === B.SegwitAddressType_P2WPKH.get$hashLength();
      }
      return false;
    },
    BitcoinScriptUtils_isP2wsh(script) {
      var t1, pubKeyBytes;
      if (A.BitcoinScriptUtils_scriptContains([B.BitcoinOpcode_OP_0_0_op0, null], script)) {
        t1 = script.script;
        if (1 >= t1.length)
          return A.ioore(t1, 1);
        pubKeyBytes = A.BytesUtils_tryFromHexString(A._asStringQ(t1[1]), false);
        t1 = pubKeyBytes == null ? null : pubKeyBytes.length;
        return t1 === B.SegwitAddressType_P2WSH.get$hashLength();
      }
      return false;
    },
    BitcoinScriptUtils_opPushData(dataBytes) {
      var lengthBytes,
        t1 = dataBytes.length;
      if (t1 < 76) {
        t1 = A._setArrayType([t1], type$.JSArray_int);
        B.JSArray_methods.addAll$1(t1, dataBytes);
        return t1;
      } else if (t1 < 255) {
        t1 = A._setArrayType([76, t1], type$.JSArray_int);
        B.JSArray_methods.addAll$1(t1, dataBytes);
        return t1;
      } else if (t1 < 65535) {
        lengthBytes = A.IntUtils_toBytes(t1, B.C_Endian0, 2);
        t1 = A._setArrayType([77], type$.JSArray_int);
        B.JSArray_methods.addAll$1(t1, lengthBytes);
        B.JSArray_methods.addAll$1(t1, dataBytes);
        return t1;
      } else if (t1 < 4294967295) {
        lengthBytes = A.IntUtils_toBytes(t1, B.C_Endian0, 4);
        t1 = A._setArrayType([78], type$.JSArray_int);
        B.JSArray_methods.addAll$1(t1, lengthBytes);
        B.JSArray_methods.addAll$1(t1, dataBytes);
        return t1;
      } else
        throw A.wrapException(B.DartBitcoinPluginException_rmC);
    },
    BitcoinScriptUtils_pushInteger(integer) {
      var numberOfBytes, t1, integerBytes, i, t2;
      if (integer < 0)
        throw A.wrapException(B.DartBitcoinPluginException_724);
      numberOfBytes = B.JSInt_methods._tdivFast$1(B.JSInt_methods.get$bitLength(integer) + 7, 8);
      t1 = type$.int;
      integerBytes = A.List_List$filled(numberOfBytes, 0, false, t1);
      for (i = 0; i < numberOfBytes; ++i)
        B.JSArray_methods.$indexSet(integerBytes, i, B.JSInt_methods._shrOtherPositive$1(integer, i * 8) & 255);
      if ((integer & B.JSInt_methods.$shl(1, numberOfBytes * 8 - 1)) >>> 0 !== 0) {
        t2 = A.List_List$_of(integerBytes, type$.dynamic);
        t2.push(0);
        integerBytes = A.List_List$from(t2, true, t1);
      }
      return A.BitcoinScriptUtils_opPushData(integerBytes);
    },
    PsbtUtils_getInputScriptPubKey(index, input, psbtInput) {
      var t1, t2, t3, witnessUtxo,
        noneWitnessUtxo = psbtInput.getInput$1$2(index, B.PsbtInputTypes_kAy, type$.PsbtInputNonWitnessUtxo);
      if (noneWitnessUtxo != null) {
        t1 = input.txIndex;
        t2 = noneWitnessUtxo.transaction.outputs;
        t3 = t2.length;
        if (t1 >= t3)
          throw A.wrapException(A.DartBitcoinPluginException$("Invalid input " + index + ". The provided non-Witness UTXO does not contain the given index.", null));
        if (!(t1 >= 0))
          return A.ioore(t2, t1);
        return t2[t1].scriptPubKey;
      }
      witnessUtxo = psbtInput.getInput$1$2(index, B.PsbtInputTypes_NZJ, type$.PsbtInputWitnessUtxo);
      if (witnessUtxo != null)
        return witnessUtxo.scriptPubKey;
      throw A.wrapException(A.DartBitcoinPluginException$("Missing scriptPubKey for input at index " + index + ".", null));
    },
    SegwitBech32Encoder__computeChecksum(hrp, data) {
      type$.List_int._as(data);
      if (0 >= data.length)
        return A.ioore(data, 0);
      return A.Bech32Utils_computeChecksum(hrp, data, data[0] === 0 ? B.Bech32Encodings_0 : B.Bech32Encodings_1);
    },
    SegwitBech32Decoder__verifyChecksum(hrp, data) {
      type$.List_int._as(data);
      if (0 >= data.length)
        return A.ioore(data, 0);
      return A.Bech32Utils_verifyChecksum(hrp, data, data[0] === 0 ? B.Bech32Encodings_0 : B.Bech32Encodings_1);
    },
    AddrDecUtils_validateAndRemovePrefixBytes(addr, prefix) {
      var t1 = J.getInterceptor$ax(addr),
        prefixGot = t1.sublist$2(addr, 0, prefix.length);
      if (!A.BytesUtils_bytesEqual(prefix, prefixGot))
        throw A.wrapException(A.AddressConverterException$("Invalid prefix (expected " + A.S(prefix) + ", got " + A.S(prefixGot) + ")", null));
      return t1.sublist$1(addr, prefix.length);
    },
    AddrDecUtils_validateBytesLength(addr, lenExp) {
      var t1 = addr.length !== lenExp;
      if (t1)
        throw A.wrapException(A.AddressConverterException$("Invalid length (expected " + lenExp + ", got " + addr.length + ")", null));
    },
    AddrDecUtils_validateLength(addr, lenExp) {
      var t1 = addr.length;
      if (t1 !== lenExp)
        throw A.wrapException(A.AddressConverterException$("Invalid length (expected " + lenExp + ", got " + t1 + ")", null));
    },
    AddrKeyValidator_nullOrValidateAddressArgs(kwargs, key, $T) {
      kwargs.$index(0, key);
      return null;
    },
    IPublicKey_IPublicKey$fromBytes(keybytes, type) {
      var point, t1, c, a, $P, s, t2, s2, u1, u2, u1_2, u2_2, v, invSqrt, t3, x2, y2, x, y, t, keyBytes, _null = null;
      switch (type) {
        case B.EllipticCurveTypes_4:
          point = A.ProjectiveECCPoint_ProjectiveECCPoint$fromBytes($.$get$Curves_curve256(), keybytes, _null);
          return new A.Nist256p1PublicKey(A.ECDSAPublicKey_ECDSAPublicKey($.$get$Curves_generator256(), point));
        case B.EllipticCurveTypes_5:
          point = A.ProjectiveECCPoint_ProjectiveECCPoint$fromBytes($.$get$Curves_curve256(), keybytes, _null);
          return new A.Nist256p1HybridPublicKey(A.ECDSAPublicKey_ECDSAPublicKey($.$get$Curves_generator256(), point));
        case B.EllipticCurveTypes_7:
          t1 = keybytes.length;
          if (t1 !== 32)
            A.throwExpression(A.CryptoException$("invalid public key bytes length expected 32 but " + t1, _null));
          c = $.$get$Curves_curveEd25519();
          a = c.a;
          $P = c.p;
          s = A.BigintUtils_fromBytes(keybytes, B.C_Endian0, false);
          t1 = A.RistrettoUtils_positiveMod(s, $P);
          t2 = $.$get$_BigIntImpl_one();
          t1 = t1.$and(0, t2).compareTo$1(0, t2);
          if (t1 === 0)
            A.throwExpression(B.CryptoException_RbC);
          s2 = A.RistrettoUtils_positiveMod(s.$mul(0, s), $P);
          u1 = A.RistrettoUtils_positiveMod(t2.$add(0, a.$mul(0, s2)), $P);
          u2 = A.RistrettoUtils_positiveMod(t2.$sub(0, a.$mul(0, s2)), $P);
          u1_2 = A.RistrettoUtils_positiveMod(u1.$mul(0, u1), $P);
          u2_2 = A.RistrettoUtils_positiveMod(u2.$mul(0, u2), $P);
          v = A.RistrettoUtils_positiveMod(a.$mul(0, c.d).$mul(0, u1_2).$sub(0, u2_2), $P);
          invSqrt = A.RistrettoUtils_sqrtUV(t2, A.RistrettoUtils_positiveMod(v.$mul(0, u2_2), $P));
          t1 = invSqrt.item2;
          t3 = J.getInterceptor$ns(t1);
          x2 = A.RistrettoUtils_positiveMod(t3.$mul(t1, u2), $P);
          y2 = A.RistrettoUtils_positiveMod(t3.$mul(t1, x2).$mul(0, v), $P);
          x = A.RistrettoUtils_positiveMod(s.$add(0, s).$mul(0, x2), $P);
          t1 = A.RistrettoUtils_positiveMod(x, $P).$and(0, t2).compareTo$1(0, t2);
          if (t1 === 0)
            x = A.RistrettoUtils_positiveMod(x.$negate(0), $P);
          y = A.RistrettoUtils_positiveMod(u1.$mul(0, y2), $P);
          t = A.RistrettoUtils_positiveMod(x.$mul(0, y), $P);
          t1 = true;
          if (invSqrt.item1) {
            t3 = A.RistrettoUtils_positiveMod(t, $P).$and(0, t2).compareTo$1(0, t2);
            if (t3 !== 0)
              t1 = y.compareTo$1(0, $.$get$_BigIntImpl_zero()) === 0;
          }
          if (t1)
            A.throwExpression(B.CryptoException_RbC);
          A.RistrettoPoint_RistrettoPoint$fromEdwardsPoint(new A.EDPoint(c, _null, false, B.List_empty0, A._setArrayType([x, y, t2, t], type$.JSArray_BigInt)));
          A.BytesUtils_validateListOfBytes(keybytes);
          return new A.Sr25519PublicKey(new A.SchnorrkelPublicKey(A.List_List$unmodifiable(keybytes, type$.int)));
        case B.EllipticCurveTypes_0:
          return A.Ed25519PublicKey_Ed25519PublicKey$fromBytes(keybytes);
        case B.EllipticCurveTypes_2:
          t1 = keybytes.length;
          if (t1 === 33) {
            if (0 >= t1)
              return A.ioore(keybytes, 0);
            t1 = keybytes[0] === 0;
          } else
            t1 = false;
          keyBytes = t1 ? B.JSArray_methods.sublist$1(keybytes, 1) : keybytes;
          return new A.Ed25519KholawPublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint($.$get$Curves_generatorED25519(), A.Ed25519Utils_asPoint(keyBytes)));
        case B.EllipticCurveTypes_3:
          keyBytes = keybytes.length === 33 ? B.JSArray_methods.sublist$1(keybytes, 1) : keybytes;
          return new A.MoneroPublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint($.$get$Curves_generatorED25519(), A.Ed25519Utils_asPoint(keyBytes)));
        case B.EllipticCurveTypes_1:
          t1 = keybytes.length;
          if (t1 === 33) {
            if (0 >= t1)
              return A.ioore(keybytes, 0);
            t1 = keybytes[0] === 0;
          } else
            t1 = false;
          keyBytes = t1 ? B.JSArray_methods.sublist$1(keybytes, 1) : keybytes;
          return new A.Ed25519Blake2bPublicKey(A.EDDSAPublicKey_EDDSAPublicKey$fromPoint($.$get$Curves_generatorED25519(), A.Ed25519Utils_asPoint(keyBytes)));
        default:
          return A.Secp256k1PublicKey_Secp256k1PublicKey$fromBytes(keybytes);
      }
    },
    Ed25519Utils_asPoint(point) {
      var t1, coords, x, y, t, t2, exception;
      try {
        t1 = $.$get$Curves_curveEd25519();
        coords = A.AbstractPoint_fromBytes(t1, point);
        x = coords.item1;
        y = coords.item2;
        t = x.$mul(0, y);
        t2 = A._setArrayType([x, y, $.$get$_BigIntImpl_one(), t], type$.JSArray_BigInt);
        return new A.EDPoint(t1, null, false, B.List_empty0, t2);
      } catch (exception) {
        t1 = A.CryptoException$("Invalid ED25519 point bytes.", null);
        throw A.wrapException(t1);
      }
    },
    RistrettoUtils_positiveMod(a, b) {
      var result = a.$mod(0, b);
      return result.compareTo$1(0, $.$get$_BigIntImpl_zero()) >= 0 ? result : b.$add(0, result);
    },
    RistrettoUtils__mExp(x, power, modulo) {
      var res;
      for (res = x; power.compareTo$1(0, $.$get$_BigIntImpl_zero()) > 0;) {
        res = res.$mul(0, res).$mod(0, modulo);
        power = power.$sub(0, $.$get$_BigIntImpl_one());
      }
      return res;
    },
    RistrettoUtils_sqrtUV(u, v) {
      var root2, useRoot2, noRoot,
        $P = $.$get$Curves_curveEd25519().p,
        v3 = A.RistrettoUtils_positiveMod(v.$mul(0, v).$mul(0, v), $P),
        t1 = u.$mul(0, A.RistrettoUtils_positiveMod(v3.$mul(0, v3).$mul(0, v), $P)),
        xCubed = t1.$mul(0, t1).$mod(0, $P).$mul(0, t1).$mod(0, $P),
        t2 = $.$get$_BigIntImpl_two(),
        xTo4th = A.RistrettoUtils__mExp(xCubed, t2, $P).$mul(0, xCubed).$mod(0, $P),
        t3 = $.$get$_BigIntImpl_one(),
        xTo5th = A.RistrettoUtils__mExp(xTo4th, t3, $P).$mul(0, t1).$mod(0, $P),
        xTo10th = A.RistrettoUtils__mExp(xTo5th, A._BigIntImpl__BigIntImpl$from(5), $P).$mul(0, xTo5th).$mod(0, $P),
        xTo20th = A.RistrettoUtils__mExp(xTo10th, A._BigIntImpl__BigIntImpl$from(10), $P).$mul(0, xTo10th).$mod(0, $P),
        xTo40th = A.RistrettoUtils__mExp(xTo20th, A._BigIntImpl__BigIntImpl$from(20), $P).$mul(0, xTo20th).$mod(0, $P),
        xTo80th = A.RistrettoUtils__mExp(xTo40th, A._BigIntImpl__BigIntImpl$from(40), $P).$mul(0, xTo40th).$mod(0, $P),
        result = A.RistrettoUtils__mExp(A.RistrettoUtils__mExp(A.RistrettoUtils__mExp(A.RistrettoUtils__mExp(xTo80th, A._BigIntImpl__BigIntImpl$from(80), $P).$mul(0, xTo80th).$mod(0, $P), A._BigIntImpl__BigIntImpl$from(80), $P).$mul(0, xTo80th).$mod(0, $P), A._BigIntImpl__BigIntImpl$from(10), $P).$mul(0, xTo10th).$mod(0, $P), t2, $P).$mul(0, t1).$mod(0, $P),
        x = A.RistrettoUtils_positiveMod(u.$mul(0, v3).$mul(0, result), $P),
        vx2 = A.RistrettoUtils_positiveMod(v.$mul(0, x).$mul(0, x), $P);
      t1 = $.$get$RistrettoUtils_sqrtM1();
      root2 = A.RistrettoUtils_positiveMod(x.$mul(0, t1), $P);
      t2 = vx2.compareTo$1(0, u);
      useRoot2 = vx2.compareTo$1(0, A.RistrettoUtils_positiveMod(u.$negate(0), $P)) === 0;
      noRoot = vx2.compareTo$1(0, A.RistrettoUtils_positiveMod(u.$negate(0).$mul(0, t1), $P)) === 0;
      if (useRoot2 || noRoot)
        x = root2;
      t1 = A.RistrettoUtils_positiveMod(x, $P).$and(0, t3).compareTo$1(0, t3);
      if (t1 === 0)
        x = A.RistrettoUtils_positiveMod(x.$negate(0), $P);
      t1 = t2 === 0 || useRoot2;
      return new A.Tuple(t1, x, type$.Tuple_bool_BigInt);
    },
    ECDSAUtils_polynomialExponentiationMod(base, exponent, polymod, p) {
      var $G, t2, t3, t4, s, k,
        t1 = exponent.compareTo$1(0, $.$get$_BigIntImpl_zero());
      if (t1 === 0)
        return A._setArrayType([$.$get$_BigIntImpl_one()], type$.JSArray_BigInt);
      t1 = type$.BigInt;
      $G = A.List_List$from(base, true, t1);
      t2 = $.$get$_BigIntImpl_two();
      t3 = exponent.$mod(0, t2);
      t4 = $.$get$_BigIntImpl_one();
      t3 = t3.compareTo$1(0, t4);
      s = t3 === 0 ? A.List_List$from($G, true, t1) : A._setArrayType([t4], type$.JSArray_BigInt);
      for (k = exponent; k.compareTo$1(0, t4) > 0;) {
        if (t2._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        k = k._div$1(t2);
        $G = A.ECDSAUtils_polynomialMultiplyMod($G, $G, polymod, p);
        t1 = k.$mod(0, t2).compareTo$1(0, t4);
        if (t1 === 0)
          s = A.ECDSAUtils_polynomialMultiplyMod($G, s, polymod, p);
      }
      return s;
    },
    ECDSAUtils_modularSquareRootPrime(a, p) {
      var b, t3, quadraticForm, t4, result,
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = a.compareTo$1(0, t1);
      if (t2 === 0)
        return t1;
      t1 = p.compareTo$1(0, $.$get$_BigIntImpl_two());
      if (t1 === 0)
        return a;
      if (B.JSInt_methods.get$isNegative(A.ECDSAUtils_jacobi(a, p)))
        throw A.wrapException(new A.SquareRootError(a.toString$0(0) + " has no square root modulo " + p.toString$0(0), null));
      t1 = p.$mod(0, A._BigIntImpl__BigIntImpl$from(4)).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(3));
      if (t1 === 0)
        return a.modPow$2(0, p.$add(0, $.$get$_BigIntImpl_one()).$tdiv(0, A._BigIntImpl__BigIntImpl$from(4)), p);
      t1 = p.$mod(0, A._BigIntImpl__BigIntImpl$from(8)).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(5));
      if (t1 === 0) {
        t1 = $.$get$_BigIntImpl_one();
        t1 = a.modPow$2(0, p.$sub(0, t1).$tdiv(0, A._BigIntImpl__BigIntImpl$from(4)), p).compareTo$1(0, t1);
        if (t1 === 0)
          return a.modPow$2(0, p.$add(0, A._BigIntImpl__BigIntImpl$from(3)).$tdiv(0, A._BigIntImpl__BigIntImpl$from(8)), p);
        return A._BigIntImpl__BigIntImpl$from(2).$mul(0, a).$mul(0, A._BigIntImpl__BigIntImpl$from(4).$mul(0, a).modPow$2(0, p.$sub(0, A._BigIntImpl__BigIntImpl$from(5)).$tdiv(0, A._BigIntImpl__BigIntImpl$from(8)), p)).$mod(0, p);
      }
      for (b = A._BigIntImpl__BigIntImpl$from(2); b.compareTo$1(0, p) < 0; b = b.$add(0, $.$get$_BigIntImpl_one())) {
        t1 = A.ECDSAUtils_jacobi(b.$mul(0, b).$sub(0, A._BigIntImpl__BigIntImpl$from(4).$mul(0, a)), p);
        if (t1 === 0 ? 1 / t1 < 0 : t1 < 0) {
          t1 = b.$negate(0);
          t2 = $.$get$_BigIntImpl_one();
          t3 = type$.JSArray_BigInt;
          quadraticForm = A._setArrayType([a, t1, t2], t3);
          t1 = $.$get$_BigIntImpl_zero();
          t3 = A._setArrayType([t1, t2], t3);
          t2 = p.$add(0, t2);
          t4 = A._BigIntImpl__BigIntImpl$from(2);
          if (t4._used === 0)
            A.throwExpression(B.C_IntegerDivisionByZeroException);
          result = A.ECDSAUtils_polynomialExponentiationMod(t3, t2._div$1(t4), quadraticForm, p);
          if (1 >= result.length)
            return A.ioore(result, 1);
          t1 = result[1].compareTo$1(0, t1);
          if (t1 !== 0)
            throw A.wrapException(B.SquareRootError_j4B);
          if (0 >= result.length)
            return A.ioore(result, 0);
          return result[0];
        }
      }
      throw A.wrapException(B.SquareRootError_hZ7);
    },
    ECDSAUtils_polynomialMultiplyMod(m1, m2, polymod, p) {
      var i, j, t2, t3,
        t1 = m1.length + m2.length - 1,
        prod = A.List_List$filled(t1, $.$get$_BigIntImpl_zero(), false, type$.BigInt);
      for (i = 0; i < m1.length; ++i)
        for (j = 0; j < m2.length; ++j) {
          t2 = i + j;
          if (!(t2 < t1))
            return A.ioore(prod, t2);
          t3 = prod[t2];
          if (!(i < m1.length))
            return A.ioore(m1, i);
          B.JSArray_methods.$indexSet(prod, t2, t3.$add(0, m1[i].$mul(0, m2[j])).$mod(0, p));
        }
      return A.ECDSAUtils_polynomialReduceMod(prod, polymod, p);
    },
    ECDSAUtils_polynomialReduceMod(poly, polymod, p) {
      var t1, t2, t3, i;
      for (t1 = poly.length, t2 = t1 >= 3; t2;) {
        t3 = B.JSArray_methods.get$last(poly).compareTo$1(0, $.$get$_BigIntImpl_zero());
        if (t3 !== 0)
          for (i = 2; i <= 3; ++i) {
            t3 = t1 - i;
            B.JSArray_methods.$indexSet(poly, t3, poly[t3].$sub(0, B.JSArray_methods.get$last(poly).$mul(0, polymod[3 - i])).$mod(0, p));
          }
        B.JSArray_methods.removeLast$0(poly);
      }
      return poly;
    },
    ECDSAUtils_jacobi(a, n) {
      var t1, t2, t3, e, e0, a1, s;
      if (n.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(3)) < 0)
        throw A.wrapException(B.JacobiError_rAF);
      t1 = $.$get$_BigIntImpl_two();
      t2 = n.$mod(0, t1);
      t3 = $.$get$_BigIntImpl_one();
      t2 = t2.compareTo$1(0, t3);
      if (t2 !== 0)
        throw A.wrapException(B.JacobiError_uQy);
      a = a.$mod(0, n);
      e = $.$get$_BigIntImpl_zero();
      t2 = a.compareTo$1(0, e);
      if (t2 === 0)
        return 0;
      t2 = a.compareTo$1(0, t3);
      if (t2 === 0)
        return 1;
      e0 = e;
      a1 = a;
      while (true) {
        t2 = a1.$mod(0, t1).compareTo$1(0, e);
        if (!(t2 === 0))
          break;
        if (t1._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        a1 = a1._div$1(t1);
        e0 = e0.$add(0, t3);
      }
      t1 = e0.$mod(0, t1).compareTo$1(0, e);
      t2 = true;
      if (t1 !== 0) {
        t1 = n.$mod(0, A._BigIntImpl__BigIntImpl$from(8)).compareTo$1(0, t3);
        if (t1 !== 0)
          t1 = n.$mod(0, A._BigIntImpl__BigIntImpl$from(8)).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(7)) === 0;
        else
          t1 = t2;
      } else
        t1 = t2;
      s = t1 ? 1 : -1;
      t1 = a1.compareTo$1(0, t3);
      if (t1 === 0)
        return s;
      t1 = n.$mod(0, A._BigIntImpl__BigIntImpl$from(4)).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(3));
      if (t1 === 0)
        t1 = a1.$mod(0, A._BigIntImpl__BigIntImpl$from(4)).compareTo$1(0, A._BigIntImpl__BigIntImpl$from(3)) === 0;
      else
        t1 = false;
      if (t1)
        s = -s;
      return s * A.ECDSAUtils_jacobi(n.$mod(0, a1), a1);
    },
    ChaCha20__quarterround(output, a, b, c, d) {
      var t1, t2;
      if (!(d < 16))
        return A.ioore(output, d);
      t1 = output[d];
      if (!(a < 16))
        return A.ioore(output, a);
      t2 = output[a];
      if (!(b < 16))
        return A.ioore(output, b);
      t2 += output[b];
      B.JSArray_methods.$indexSet(output, a, t2);
      B.JSArray_methods.$indexSet(output, d, A.rotl32((t1 ^ t2) >>> 0, 16));
      t2 = output[b];
      if (!(c < 16))
        return A.ioore(output, c);
      t1 = output[c] + output[d];
      B.JSArray_methods.$indexSet(output, c, t1);
      B.JSArray_methods.$indexSet(output, b, A.rotl32((t2 ^ t1) >>> 0, 12));
      t1 = output[d];
      t2 = output[a] + output[b];
      B.JSArray_methods.$indexSet(output, a, t2);
      B.JSArray_methods.$indexSet(output, d, A.rotl32((t1 ^ t2) >>> 0, 8));
      t2 = output[b];
      t1 = output[c] + output[d];
      B.JSArray_methods.$indexSet(output, c, t1);
      B.JSArray_methods.$indexSet(output, b, A.rotl32((t2 ^ t1) >>> 0, 7));
      B.JSArray_methods.$indexSet(output, a, output[a] >>> 0);
      B.JSArray_methods.$indexSet(output, b, output[b] >>> 0);
      B.JSArray_methods.$indexSet(output, c, output[c] >>> 0);
      B.JSArray_methods.$indexSet(output, d, output[d] >>> 0);
    },
    ChaCha20__core(out, input, key) {
      var i,
        mix = A.List_List$filled(16, 0, false, type$.int),
        t1 = J.getInterceptor$asx(key),
        j4 = (t1.$index(key, 3) << 24 | t1.$index(key, 2) << 16 | t1.$index(key, 1) << 8 | t1.$index(key, 0)) >>> 0,
        j5 = (t1.$index(key, 7) << 24 | t1.$index(key, 6) << 16 | t1.$index(key, 5) << 8 | t1.$index(key, 4)) >>> 0,
        j6 = (t1.$index(key, 11) << 24 | t1.$index(key, 10) << 16 | t1.$index(key, 9) << 8 | t1.$index(key, 8)) >>> 0,
        j7 = (t1.$index(key, 15) << 24 | t1.$index(key, 14) << 16 | t1.$index(key, 13) << 8 | t1.$index(key, 12)) >>> 0,
        j8 = (t1.$index(key, 19) << 24 | t1.$index(key, 18) << 16 | t1.$index(key, 17) << 8 | t1.$index(key, 16)) >>> 0,
        j9 = (t1.$index(key, 23) << 24 | t1.$index(key, 22) << 16 | t1.$index(key, 21) << 8 | t1.$index(key, 20)) >>> 0,
        j10 = (t1.$index(key, 27) << 24 | t1.$index(key, 26) << 16 | t1.$index(key, 25) << 8 | t1.$index(key, 24)) >>> 0,
        j11 = (t1.$index(key, 31) << 24 | t1.$index(key, 30) << 16 | t1.$index(key, 29) << 8 | t1.$index(key, 28)) >>> 0,
        j12 = (input[3] << 24 | input[2] << 16 | input[1] << 8 | input[0]) >>> 0,
        j13 = (input[7] << 24 | input[6] << 16 | input[5] << 8 | input[4]) >>> 0,
        j14 = (input[11] << 24 | input[10] << 16 | input[9] << 8 | input[8]) >>> 0,
        j15 = (input[15] << 24 | input[14] << 16 | input[13] << 8 | input[12]) >>> 0;
      B.JSArray_methods.$indexSet(mix, 0, 1634760805);
      B.JSArray_methods.$indexSet(mix, 1, 857760878);
      B.JSArray_methods.$indexSet(mix, 2, 2036477234);
      B.JSArray_methods.$indexSet(mix, 3, 1797285236);
      B.JSArray_methods.$indexSet(mix, 4, j4);
      B.JSArray_methods.$indexSet(mix, 5, j5);
      B.JSArray_methods.$indexSet(mix, 6, j6);
      B.JSArray_methods.$indexSet(mix, 7, j7);
      B.JSArray_methods.$indexSet(mix, 8, j8);
      B.JSArray_methods.$indexSet(mix, 9, j9);
      B.JSArray_methods.$indexSet(mix, 10, j10);
      B.JSArray_methods.$indexSet(mix, 11, j11);
      B.JSArray_methods.$indexSet(mix, 12, j12);
      B.JSArray_methods.$indexSet(mix, 13, j13);
      B.JSArray_methods.$indexSet(mix, 14, j14);
      B.JSArray_methods.$indexSet(mix, 15, j15);
      for (i = 0; i < 20; i += 2) {
        A.ChaCha20__quarterround(mix, 0, 4, 8, 12);
        A.ChaCha20__quarterround(mix, 1, 5, 9, 13);
        A.ChaCha20__quarterround(mix, 2, 6, 10, 14);
        A.ChaCha20__quarterround(mix, 3, 7, 11, 15);
        A.ChaCha20__quarterround(mix, 0, 5, 10, 15);
        A.ChaCha20__quarterround(mix, 1, 6, 11, 12);
        A.ChaCha20__quarterround(mix, 2, 7, 8, 13);
        A.ChaCha20__quarterround(mix, 3, 4, 9, 14);
      }
      A.writeUint32LE(mix[0] + 1634760805 >>> 0, out, 0);
      A.writeUint32LE(mix[1] + 857760878 >>> 0, out, 4);
      A.writeUint32LE(mix[2] + 2036477234 >>> 0, out, 8);
      A.writeUint32LE(mix[3] + 1797285236 >>> 0, out, 12);
      A.writeUint32LE(mix[4] + j4 >>> 0, out, 16);
      A.writeUint32LE(mix[5] + j5 >>> 0, out, 20);
      A.writeUint32LE(mix[6] + j6 >>> 0, out, 24);
      A.writeUint32LE(mix[7] + j7 >>> 0, out, 28);
      A.writeUint32LE(mix[8] + j8 >>> 0, out, 32);
      A.writeUint32LE(mix[9] + j9 >>> 0, out, 36);
      A.writeUint32LE(mix[10] + j10 >>> 0, out, 40);
      A.writeUint32LE(mix[11] + j11 >>> 0, out, 44);
      A.writeUint32LE(mix[12] + j12 >>> 0, out, 48);
      A.writeUint32LE(mix[13] + j13 >>> 0, out, 52);
      A.writeUint32LE(mix[14] + j14 >>> 0, out, 56);
      A.writeUint32LE(mix[15] + j15 >>> 0, out, 60);
    },
    ChaCha20__incrementCounter(counter, pos, len) {
      var carry;
      for (carry = 1; len > 0;) {
        if (!(pos < 16))
          return A.ioore(counter, pos);
        carry += counter[pos] & 255;
        B.JSArray_methods.$indexSet(counter, pos, carry & 255);
        carry = carry >>> 8;
        ++pos;
        --len;
      }
      if (carry > 0)
        throw A.wrapException(B.CryptoException_3cw);
    },
    ChaCha20_streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {
      var t1, t2, block, i, i0, j, t3, t4;
      if (J.get$length$asx(key) !== 32)
        throw A.wrapException(B.CryptoException_5YI);
      t1 = J.getInterceptor$asx(src);
      if (dst.length < t1.get$length(src))
        throw A.wrapException(B.CryptoException_Cmb);
      t2 = nonceInplaceCounterLength === 0;
      if (t2)
        throw A.wrapException(B.CryptoException_gl4);
      block = A.List_List$filled(64, 0, false, type$.int);
      for (i = 0; i < t1.get$length(src); i = i0) {
        A.ChaCha20__core(block, nonce, key);
        i0 = i + 64;
        j = i;
        while (true) {
          if (!(j < i0 && j < t1.get$length(src)))
            break;
          t3 = t1.$index(src, j);
          t4 = j - i;
          if (!(t4 >= 0 && t4 < 64))
            return A.ioore(block, t4);
          B.JSArray_methods.$indexSet(dst, j, t3 & 255 ^ block[t4]);
          ++j;
        }
        A.ChaCha20__incrementCounter(nonce, 0, nonceInplaceCounterLength);
      }
      A.zero(block);
      if (t2)
        A.zero(nonce);
      return dst;
    },
    Crc16_quickIntDigest(data) {
      var reg, _i, byte, mask,
        t1 = data.length + 2,
        t2 = type$.int,
        message = A.List_List$filled(t1, 0, false, t2);
      B.JSArray_methods.setAll$2(message, 0, data);
      for (reg = 0, _i = 0; _i < t1; ++_i) {
        byte = message[_i];
        for (mask = 128; mask > 0;) {
          reg = reg << 1 >>> 0;
          if ((byte & mask) !== 0)
            ++reg;
          mask = mask >>> 1;
          if (reg > 65535)
            reg = reg & 65535 ^ 4129;
        }
      }
      return A.List_List$from([reg >>> 8, reg & 255], true, t2);
    },
    XModemCrc__calculateXmodemCrc(bytes) {
      var t1, crc, i, crc0, crcBytes;
      for (t1 = J.get$iterator$ax(bytes), crc = 0; t1.moveNext$0();) {
        crc ^= t1.get$current() << 8;
        for (i = 0; i < 8; ++i) {
          crc0 = crc << 1;
          crc = (crc & 32768) !== 0 ? crc0 ^ 4129 : crc0;
        }
      }
      crcBytes = A.List_List$filled(2, 0, false, type$.int);
      B.JSArray_methods.$indexSet(crcBytes, 0, crc >>> 8 & 255);
      B.JSArray_methods.$indexSet(crcBytes, 1, crc & 255);
      return crcBytes;
    },
    IterableHelper_firstWhereNullable(_this, test, $T) {
      var t1, exception;
      try {
        t1 = B.JSArray_methods.firstWhere$1(_this, test);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError)
          return null;
        else
          throw exception;
      }
    },
    ListHelper_clone(_this, $T) {
      return A.List_List$from(_this, true, $T);
    },
    BigIntHelper_get_asUint64(_this) {
      if (_this._isNegative || _this.compareTo$1(0, $.$get$maxU64()) > 0)
        throw A.wrapException(A.ArgumentException$("Invalid Unsigned BigInt 64.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", $.$get$maxU64().get$bitLength(0), "bitLength", _this.get$bitLength(0), "value", _this.toString$0(0)], type$.String, type$.dynamic)));
      return _this;
    },
    BigIntHelper_get_asInt64(_this) {
      if (_this.compareTo$1(0, $.$get$maxInt64()) > 0 || _this.compareTo$1(0, $.$get$minInt64()) < 0)
        throw A.wrapException(A.ArgumentException$("Invalid Signed BigInt 64.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", $.$get$maxU64().get$bitLength(0), "bitLength", _this.get$bitLength(0), "value", _this.toString$0(0)], type$.String, type$.dynamic)));
      return _this;
    },
    IntHelper_get_asUint32(_this) {
      if (B.JSInt_methods.get$isNegative(_this) || _this > 4294967295)
        throw A.wrapException(A.ArgumentException$("Invalid Unsigned int 32.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", B.JSInt_methods.get$bitLength(4294967295), "bitLength", B.JSInt_methods.get$bitLength(_this), "value", B.JSInt_methods.toString$0(_this)], type$.String, type$.dynamic)));
      return _this;
    },
    IntHelper_get_asUint8(_this) {
      if (B.JSInt_methods.get$isNegative(_this) || _this > 255)
        throw A.wrapException(A.ArgumentException$("Invalid Unsigned int 8.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", B.JSInt_methods.get$bitLength(4294967295), "bitLength", B.JSInt_methods.get$bitLength(_this), "value", B.JSInt_methods.toString$0(_this)], type$.String, type$.dynamic)));
      return _this;
    },
    LayoutSerializationUtils_decodeLength(bytes, sign) {
      var byte, t1, o;
      if (0 >= bytes.length)
        return A.ioore(bytes, 0);
      byte = bytes[0];
      t1 = type$.Tuple_int_BigInt;
      switch (byte & 3) {
        case 0:
          return new A.Tuple(1, A._BigIntImpl__BigIntImpl$from(byte).$shr(0, 2), t1);
        case 1:
          return new A.Tuple(2, A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(bytes, 0, 2), B.C_Endian0, false).$shr(0, 2), t1);
        case 2:
          return new A.Tuple(4, A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(bytes, 0, 4), B.C_Endian0, false).$shr(0, 2), t1);
        default:
          o = B.JSInt_methods._shrOtherPositive$1(byte, 2) + 5;
          return new A.Tuple(o, A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(bytes, 1, o), B.C_Endian0, false), t1);
      }
    },
    LayoutSerializationUtils_getDataCompactOffset(bytes) {
      switch (bytes & 3) {
        case 0:
          return 1;
        case 1:
          return 2;
        case 2:
          return 4;
        default:
          return B.JSInt_methods._shrOtherPositive$1(bytes, 2) + 5;
      }
    },
    CryptoSignatureUtils_isValidSchnorrSignature(signature) {
      var r, s,
        t1 = signature.length;
      if (t1 !== 64 && t1 !== 65)
        return false;
      r = A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(signature, 0, 32), B.C_Endian, false);
      s = A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(signature, 32, 64), B.C_Endian, false);
      if (r.compareTo$1(0, $.$get$Curves_curveSecp256k1().p) < 0) {
        t1 = $.$get$Curves_generatorSecp256k1().order;
        t1.toString;
        t1 = s.compareTo$1(0, t1) >= 0;
      } else
        t1 = true;
      if (t1)
        return false;
      return true;
    },
    CryptoSignatureUtils_isValidBitcoinDERSignature(signature) {
      var lenR, t2, lenS, total, t3,
        t1 = signature.length;
      if (t1 < 9 || t1 > 73)
        return false;
      if (0 >= t1)
        return A.ioore(signature, 0);
      if (signature[0] !== 48)
        return false;
      if (1 >= t1)
        return A.ioore(signature, 1);
      if (signature[1] > t1 - 2)
        return false;
      if (3 >= t1)
        return A.ioore(signature, 3);
      lenR = signature[3];
      t2 = 5 + lenR;
      if (t2 >= t1)
        return false;
      if (!(t2 >= 0))
        return A.ioore(signature, t2);
      lenS = signature[t2];
      total = lenR + lenS + 6;
      if (total !== t1 && total + 1 !== t1)
        return false;
      if (4 >= t1)
        return A.ioore(signature, 4);
      t2 = signature[4];
      if ((t2 & 128) !== 0)
        return false;
      t3 = false;
      if (lenR > 1)
        if (t2 === 0) {
          if (5 >= t1)
            return A.ioore(signature, 5);
          t2 = (signature[5] & 128) === 0;
        } else
          t2 = t3;
      else
        t2 = t3;
      if (t2)
        return false;
      t2 = lenR + 4;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(signature, t2);
      if (signature[t2] !== 2)
        return false;
      if (lenS === 0)
        return false;
      t2 = lenR + 6;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(signature, t2);
      t2 = signature[t2];
      if ((t2 & 128) !== 0)
        return false;
      t3 = false;
      if (lenS > 1)
        if (t2 === 0) {
          t2 = lenR + 7;
          if (!(t2 >= 0 && t2 < t1))
            return A.ioore(signature, t2);
          t2 = (signature[t2] & 128) === 0;
          t1 = t2;
        } else
          t1 = t3;
      else
        t1 = t3;
      if (t1)
        return false;
      return true;
    },
    writeUint64LE(value, out) {
      A.writeUint32LE(value >>> 0, out, 0);
      A.writeUint32LE(B.JSInt_methods._shrOtherPositive$1(value, 32), out, 4);
      return out;
    },
    writeUint32LE(value, out, offset) {
      B.JSArray_methods.$indexSet(out, offset, value & 255);
      B.JSArray_methods.$indexSet(out, offset + 1, B.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
      B.JSArray_methods.$indexSet(out, offset + 2, B.JSInt_methods._shrOtherPositive$1(value, 16) & 255);
      B.JSArray_methods.$indexSet(out, offset + 3, B.JSInt_methods._shrOtherPositive$1(value, 24) & 255);
    },
    writeUint16LE(value, out, offset) {
      B.JSArray_methods.$indexSet(out, offset, value & 255);
      B.JSArray_methods.$indexSet(out, offset + 1, B.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
    },
    readUint32LE(array, offset) {
      var t1 = J.getInterceptor$asx(array);
      return (t1.$index(array, offset + 3) << 24 | t1.$index(array, offset + 2) << 16 | t1.$index(array, offset + 1) << 8 | t1.$index(array, offset)) >>> 0;
    },
    writeUint32BE(value, out, offset) {
      B.JSArray_methods.$indexSet(out, offset, B.JSInt_methods._shrOtherPositive$1(value, 24) & 255);
      B.JSArray_methods.$indexSet(out, offset + 1, B.JSInt_methods._shrOtherPositive$1(value, 16) & 255);
      B.JSArray_methods.$indexSet(out, offset + 2, B.JSInt_methods._shrOtherPositive$1(value, 8) & 255);
      B.JSArray_methods.$indexSet(out, offset + 3, value & 255);
    },
    readUint32BE(array, offset) {
      var t1 = J.getInterceptor$asx(array);
      return (t1.$index(array, offset) << 24 | t1.$index(array, offset + 1) << 16 | t1.$index(array, offset + 2) << 8 | t1.$index(array, offset + 3)) >>> 0;
    },
    rotl32(val, shift) {
      var modShift = shift & 31;
      return (val << modShift | B.JSInt_methods._shrReceiverPositive$1(val >>> 0, 32 - modShift)) >>> 0;
    },
    zero(array) {
      var t1, i;
      for (t1 = array.length, i = 0; i < t1; ++i)
        B.JSArray_methods.$indexSet(array, i, 0);
    },
    CompareUtils_iterableIsEqual(a, b, $T) {
      var t1, t2, t3, t4, t5, index, valueA, valueB;
      if (a == null)
        return b == null;
      if (b == null || J.get$length$asx(a) !== J.get$length$asx(b))
        return false;
      if (a === b)
        return true;
      for (t1 = J.getInterceptor$asx(a), t2 = type$.Iterable_dynamic, t3 = type$.Map_dynamic_dynamic, t4 = J.getInterceptor$ax(b), t5 = type$.dynamic, index = 0; index < t1.get$length(a); ++index) {
        valueA = t1.elementAt$1(a, index);
        valueB = t4.elementAt$1(b, index);
        if (t3._is(valueA) && t3._is(valueB)) {
          if (!A.CompareUtils_mapIsEqual(valueA, valueB, t5, t5))
            return false;
        } else if (t2._is(valueA) && t2._is(valueB)) {
          if (!A.CompareUtils_iterableIsEqual(valueA, valueB, t5))
            return false;
        } else if (!J.$eq$(valueA, valueB))
          return false;
      }
      return true;
    },
    CompareUtils_mapIsEqual(a, b, $K, $V) {
      var t3, t4, key, valueA, valueB,
        t1 = a.get$length(a),
        t2 = b.get$length(b);
      if (t1 !== t2)
        return false;
      if (a === b)
        return true;
      for (t1 = a.get$keys(), t1 = t1.get$iterator(t1), t2 = type$.Iterable_dynamic, t3 = type$.Map_dynamic_dynamic, t4 = type$.dynamic; t1.moveNext$0();) {
        key = t1.get$current();
        if (!b.containsKey$1(key))
          return false;
        valueA = a.$index(0, key);
        valueB = b.$index(0, key);
        if (t3._is(valueA) && t3._is(valueB)) {
          if (!A.CompareUtils_mapIsEqual(valueA, valueB, t4, t4))
            return false;
        } else if (t2._is(valueA) && t2._is(valueB)) {
          if (!A.CompareUtils_iterableIsEqual(valueA, valueB, t4))
            return false;
        } else if (!J.$eq$(valueA, valueB))
          return false;
      }
      return true;
    },
    HashCodeGenerator_generateBytesHashCode(bytes, optional) {
      var t1, hash, _i;
      for (t1 = bytes.length, hash = 12, _i = 0; _i < t1; ++_i)
        hash = ((hash ^ bytes[_i]) >>> 0) * 31 >>> 0;
      return optional.length !== 0 ? (hash ^ A.HashCodeGenerator_generateHashCode(optional)) >>> 0 : hash;
    },
    HashCodeGenerator_generateHashCode(objects) {
      var t1, t2, hash, element;
      for (t1 = J.get$iterator$ax(objects), t2 = type$.Iterable_dynamic, hash = 12; t1.moveNext$0();) {
        element = t1.get$current();
        hash = t2._is(element) ? (hash ^ A.HashCodeGenerator_generateHashCode(element)) >>> 0 : (hash ^ J.get$hashCode$(element)) >>> 0;
      }
      return hash;
    },
    BigintUtils_orderLen(value) {
      return B.JSInt_methods._tdivFast$1(value.toRadixString$1(0, 16).length + 1, 2);
    },
    BigintUtils_inverseMod(a, m) {
      var lm, low, high, lm0, r, nm, newLow,
        hm = $.$get$_BigIntImpl_zero(),
        t1 = a.compareTo$1(0, hm);
      if (t1 === 0)
        return hm;
      lm = $.$get$_BigIntImpl_one();
      if (a.compareTo$1(0, lm) >= 0 && a.compareTo$1(0, m) < 0)
        return a.modInverse$1(0, m);
      low = a.$mod(0, m);
      for (high = m, lm0 = lm; low.compareTo$1(0, lm) > 0; high = low, low = newLow, hm = lm0, lm0 = nm) {
        if (low._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        r = high._div$1(low);
        nm = hm.$sub(0, lm0.$mul(0, r));
        newLow = high.$sub(0, low.$mul(0, r));
      }
      return lm0.$mod(0, m);
    },
    BigintUtils_computeNAF(mult) {
      var t1, t2, nafDigit,
        nafList = A._setArrayType([], type$.JSArray_BigInt);
      while (true) {
        t1 = $.$get$_BigIntImpl_zero();
        t2 = mult.compareTo$1(0, t1);
        if (!(t2 !== 0))
          break;
        if (mult._used !== 0) {
          t2 = mult._digits;
          if (0 >= t2.length)
            return A.ioore(t2, 0);
          t2 = (t2[0] & 1) === 0;
        } else
          t2 = true;
        if (!t2) {
          nafDigit = mult.$mod(0, A._BigIntImpl__BigIntImpl$from(4));
          if (nafDigit.compareTo$1(0, $.$get$_BigIntImpl_two()) >= 0)
            nafDigit = nafDigit.$sub(0, A._BigIntImpl__BigIntImpl$from(4));
          B.JSArray_methods.add$1(nafList, nafDigit);
          mult = mult.$sub(0, nafDigit);
        } else
          B.JSArray_methods.add$1(nafList, t1);
        t1 = $.$get$_BigIntImpl_two();
        if (t1._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        mult = mult._div$1(t1);
      }
      return nafList;
    },
    BigintUtils_toBytes(val, $length, order) {
      var bigMaskEight, byteList, i, t2,
        t1 = val.compareTo$1(0, $.$get$_BigIntImpl_zero());
      if (t1 === 0)
        return A.List_List$filled($length, 0, false, type$.int);
      bigMaskEight = A._BigIntImpl__BigIntImpl$from(255);
      t1 = type$.int;
      byteList = A.List_List$filled($length, 0, false, t1);
      for (i = 0; i < $length; ++i) {
        B.JSArray_methods.$indexSet(byteList, $length - i - 1, val.$and(0, bigMaskEight).toInt$0(0));
        val = val.$shr(0, 8);
      }
      if (order === B.C_Endian0) {
        t2 = A._arrayInstanceType(byteList)._eval$1("ReversedListIterable<1>");
        byteList = A.List_List$_of(new A.ReversedListIterable(byteList, t2), t2._eval$1("ListIterable.E"));
      }
      return A.List_List$from(byteList, true, t1);
    },
    BigintUtils_fromBytes(bytes, byteOrder, sign) {
      var t1, result, i, t2;
      if (byteOrder === B.C_Endian0) {
        t1 = J.get$reversed$ax(bytes);
        bytes = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      }
      result = $.$get$_BigIntImpl_zero();
      for (t1 = J.getInterceptor$asx(bytes), i = 0; i < t1.get$length(bytes); ++i)
        result = result.$add(0, A._BigIntImpl__BigIntImpl$from(t1.$index(bytes, t1.get$length(bytes) - i - 1)).$shl(0, 8 * i));
      t2 = result.compareTo$1(0, $.$get$_BigIntImpl_zero());
      if (t2 === 0)
        return result;
      if (sign && (t1.$index(bytes, 0) & 128) !== 0)
        return result.toSigned$1(0, B.JSInt_methods._tdivFast$1((result._isNegative ? result.$negate(0) : result).get$bitLength(0) + 7, 8) * 8);
      return result;
    },
    BigintUtils_parse(v, allowHex) {
      var parse, t1, t2, exception;
      try {
        if (v instanceof A._BigIntImpl)
          return v;
        if (A._isInt(v)) {
          t1 = A._BigIntImpl__BigIntImpl$from(v);
          return t1;
        }
        if (typeof v == "string") {
          parse = A._BigIntImpl__tryParse(v, null);
          t1 = false;
          if (parse == null) {
            t2 = $.$get$StringUtils__hexaDecimalRegex();
            t1 = t2._nativeRegExp.test(v);
          }
          if (t1)
            parse = A._BigIntImpl_parse(A.StringUtils_strip0x(v), 16);
          t1 = parse;
          t1.toString;
          return t1;
        }
      } catch (exception) {
      }
      throw A.wrapException(A.ArgumentException$("invalid input for parse bigint", A.LinkedHashMap_LinkedHashMap$_literal(["value", A.S(v)], type$.String, type$.dynamic)));
    },
    BigintUtils_tryParse(v) {
      var t1, exception,
        allowHex = true;
      if (v == null)
        return null;
      try {
        t1 = A.BigintUtils_parse(v, allowHex);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.ArgumentException)
          return null;
        else
          throw exception;
      }
    },
    IntUtils_decodeVarint(byteint) {
      var ni, size, value;
      if (0 >= byteint.length)
        return A.ioore(byteint, 0);
      ni = byteint[0];
      if (ni < 253)
        return new A.Tuple(ni, 1, type$.Tuple_int_int);
      if (ni === 253)
        size = 2;
      else
        size = ni === 254 ? 4 : 8;
      value = A.BigintUtils_fromBytes(J.sublist$2$ax(byteint, 1, 1 + size), B.C_Endian0, false);
      if (!value.get$isValidInt())
        throw A.wrapException(B.ArgumentException_ngs);
      return new A.Tuple(value.toInt$0(0), size + 1, type$.Tuple_int_int);
    },
    IntUtils_encodeVarint(i) {
      var bytes;
      if (i < 253)
        return A._setArrayType([i], type$.JSArray_int);
      else if (i < 65536) {
        bytes = A.List_List$filled(3, 0, false, type$.int);
        B.JSArray_methods.$indexSet(bytes, 0, 253);
        A.writeUint16LE(i, bytes, 1);
        return bytes;
      } else if (i < 4294967296) {
        bytes = A.List_List$filled(5, 0, false, type$.int);
        B.JSArray_methods.$indexSet(bytes, 0, 254);
        A.writeUint32LE(i, bytes, 1);
        return bytes;
      } else
        throw A.wrapException(A.ArgumentException$("Integer is too large: " + i, null));
    },
    IntUtils_bitlengthInBytes(val) {
      var bitlength = B.JSInt_methods.get$bitLength(val);
      if (bitlength === 0)
        return 1;
      return B.JSInt_methods._tdivFast$1((B.JSInt_methods.get$isNegative(val) ? bitlength + 1 : bitlength) + 7, 8);
    },
    IntUtils_toBytes(val, byteOrder, $length) {
      var t1, t2, byteList, i;
      if ($length > 4) {
        t1 = A.List_List$_of(A.IntUtils_toBytes(B.JSInt_methods._shrOtherPositive$1(val, 32), B.C_Endian, $length - 4), type$.int);
        B.JSArray_methods.addAll$1(t1, A.IntUtils_toBytes(val >>> 0, B.C_Endian, 4));
        if (byteOrder === B.C_Endian0) {
          t2 = A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>");
          t1 = A.List_List$_of(new A.ReversedListIterable(t1, t2), t2._eval$1("ListIterable.E"));
          return t1;
        }
        return t1;
      }
      byteList = A.List_List$filled($length, 0, false, type$.int);
      for (i = 0; i < $length; ++i) {
        B.JSArray_methods.$indexSet(byteList, $length - i - 1, val & 255);
        val = B.JSInt_methods._shrOtherPositive$1(val, 8);
      }
      if (byteOrder === B.C_Endian0) {
        t1 = A._arrayInstanceType(byteList)._eval$1("ReversedListIterable<1>");
        t1 = A.List_List$_of(new A.ReversedListIterable(byteList, t1), t1._eval$1("ListIterable.E"));
        return t1;
      }
      return byteList;
    },
    IntUtils_fromBytes(bytes, byteOrder, sign) {
      var big, t1, lowerPart, result, i, t2;
      if (bytes.length > 6) {
        big = A.BigintUtils_fromBytes(bytes, byteOrder, false);
        if (big.get$isValidInt())
          return big.toInt$0(0);
        throw A.wrapException(A.ArgumentException$("Value too large to fit in a Dart int", null));
      }
      if (byteOrder === B.C_Endian0) {
        t1 = A._arrayInstanceType(bytes)._eval$1("ReversedListIterable<1>");
        t1 = A.List_List$_of(new A.ReversedListIterable(bytes, t1), t1._eval$1("ListIterable.E"));
        bytes = A.List_List$from(t1, true, type$.int);
      }
      t1 = bytes.length;
      if (t1 > 4) {
        lowerPart = A.IntUtils_fromBytes(B.JSArray_methods.sublist$2(bytes, t1 - 4, t1), B.C_Endian, false);
        result = (B.JSInt_methods._shlPositive$1(A.IntUtils_fromBytes(B.JSArray_methods.sublist$2(bytes, 0, bytes.length - 4), B.C_Endian, false), 32) | lowerPart) >>> 0;
      } else
        for (result = 0, i = 0; i < t1; ++i) {
          t2 = t1 - i - 1;
          if (!(t2 >= 0))
            return A.ioore(bytes, t2);
          result = (result | B.JSInt_methods._shlPositive$1(bytes[t2], 8 * i)) >>> 0;
        }
      return result;
    },
    IntUtils_parse(v, allowHex) {
      var parse, t1, t2, exception;
      try {
        if (A._isInt(v))
          return v;
        if (v instanceof A._BigIntImpl) {
          if (!v.get$isValidInt()) {
            t1 = A.ArgumentException$("value is to large for integer.", A.LinkedHashMap_LinkedHashMap$_literal(["value", v.toString$0(0)], type$.String, type$.dynamic));
            throw A.wrapException(t1);
          }
          t1 = v.toInt$0(0);
          return t1;
        }
        if (typeof v == "string") {
          parse = A.Primitives_parseInt(v, null);
          t1 = false;
          if (parse == null) {
            t2 = $.$get$StringUtils__hexaDecimalRegex();
            t1 = t2._nativeRegExp.test(v);
          }
          if (t1)
            parse = A.int_parse(A.StringUtils_strip0x(v), 16);
          t1 = parse;
          t1.toString;
          return t1;
        }
      } catch (exception) {
      }
      throw A.wrapException(A.ArgumentException$("invalid input for parse int", A.LinkedHashMap_LinkedHashMap$_literal(["value", A.S(v)], type$.String, type$.dynamic)));
    },
    IntUtils_tryParse(v) {
      var t1, exception,
        allowHex = true;
      if (v == null)
        return null;
      try {
        t1 = A.IntUtils_parse(v, allowHex);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.ArgumentException)
          return null;
        else
          throw exception;
      }
    },
    IntUtils_max(a, b) {
      if (a > b)
        return a;
      return b;
    },
    groupBy(values, key, $S, $T) {
      var t1, _i, element, t2, t3,
        map = A.LinkedHashMap_LinkedHashMap$_empty($T, $S._eval$1("List<0>"));
      for (t1 = $S._eval$1("JSArray<0>"), _i = 0; _i < 1; ++_i) {
        element = values[_i];
        t2 = key.call$1(element);
        t3 = map.$index(0, t2);
        if (t3 == null) {
          t3 = A._setArrayType([], t1);
          map.$indexSet(0, t2, t3);
          t2 = t3;
        } else
          t2 = t3;
        J.add$1$ax(t2, element);
      }
      return map;
    },
    ProtocolBufferEncoder__validateBigInt(value) {
      if (value.get$bitLength(0) <= 64)
        return;
      throw A.wrapException(A.DartCosmosSdkPluginException$(string$.Value_o6, A.LinkedHashMap_LinkedHashMap$_literal(["input", value], type$.String, type$.dynamic)));
    },
    ProtocolBufferEncoder__validateInt(value) {
      if (B.JSInt_methods.get$bitLength(value) <= 31)
        return;
      throw A.wrapException(A.DartCosmosSdkPluginException$(string$.Value_o3, A.LinkedHashMap_LinkedHashMap$_literal(["input", value], type$.String, type$.dynamic)));
    },
    ProtocolBufferEncoder_encode(fieldNumber, value) {
      if (value instanceof A._BigIntImpl)
        return A.ProtocolBufferEncoder__encodeBigInt(fieldNumber, value, true);
      else if (A._isInt(value))
        return A.ProtocolBufferEncoder__encodeInt(fieldNumber, value);
      else if (value instanceof A.GovVoteOption)
        return A.ProtocolBufferEncoder__encodeInt(fieldNumber, value.value);
      else if (value instanceof A.CosmosBaseAddress)
        return A.ProtocolBufferEncoder__encodeBytes(fieldNumber, A.StringUtils_encode(value.address, B.StringEncoding_1));
      else if (type$.List_int._is(value))
        return A.ProtocolBufferEncoder__encodeBytes(fieldNumber, value);
      else if (typeof value == "string")
        return A.ProtocolBufferEncoder__encodeBytes(fieldNumber, A.StringUtils_encode(value, B.StringEncoding_1));
      else if (value instanceof A.CosmosProtocolBuffer)
        return A.ProtocolBufferEncoder__encodeBytes(fieldNumber, value.toBuffer$0());
      else if (type$.List_BigInt._is(value))
        return A.ProtocolBufferEncoder__encodeListBigInt(fieldNumber, value);
      else if (type$.List_dynamic._is(value))
        return A.ProtocolBufferEncoder__encodeList(fieldNumber, value);
      else if (A._isBool(value))
        return A.ProtocolBufferEncoder__encodeInt(fieldNumber, value ? 1 : 0);
      else if (type$.Map_dynamic_dynamic._is(value))
        return A.ProtocolBufferEncoder__encodeMap(fieldNumber, value);
      throw A.wrapException(A.DartCosmosSdkPluginException$("unsupported type", A.LinkedHashMap_LinkedHashMap$_literal(["runtime", J.get$runtimeType$(value), "value", value], type$.String, type$.dynamic)));
    },
    ProtocolBufferEncoder__encodeMap(fieldNumber, value) {
      var t1, t2, key, val,
        result = A._setArrayType([], type$.JSArray_int);
      for (t1 = value.get$entries(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current();
        key = A.ProtocolBufferEncoder_encode(1, t2.key);
        val = A.ProtocolBufferEncoder_encode(2, t2.value);
        B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeLength(fieldNumber, key.length + val.length));
        B.JSArray_methods.addAll$1(result, key);
        B.JSArray_methods.addAll$1(result, val);
      }
      return result;
    },
    ProtocolBufferEncoder__encodeLength(fieldNumber, value) {
      var result;
      A.ProtocolBufferEncoder__validateInt(value);
      result = A._setArrayType([], type$.JSArray_int);
      B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeVarint32((fieldNumber << 3 | 2) >>> 0));
      B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeVarint32(value));
      return result;
    },
    ProtocolBufferEncoder__encodeList(fieldNumber, value) {
      var result,
        t1 = J.getInterceptor$asx(value);
      if (t1.get$isEmpty(value))
        return A._setArrayType([], type$.JSArray_int);
      result = A._setArrayType([], type$.JSArray_int);
      for (t1 = t1.get$iterator(value); t1.moveNext$0();)
        B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder_encode(fieldNumber, t1.get$current()));
      return result;
    },
    ProtocolBufferEncoder__encodeListBigInt(fieldNumber, value) {
      var t2, result, t3, t4, result0,
        t1 = J.getInterceptor$asx(value);
      if (t1.get$isEmpty(value))
        return A._setArrayType([], type$.JSArray_int);
      t2 = type$.JSArray_int;
      result = A._setArrayType([], t2);
      for (t1 = t1.get$iterator(value), t3 = type$.BigInt; t1.moveNext$0();) {
        t4 = A.ProtocolBufferEncoder__encodeBigInt(fieldNumber, t3._as(t1.get$current()), false);
        result0 = A._setArrayType([], t2);
        B.JSArray_methods.addAll$1(result0, A.ProtocolBufferEncoder__encodeLength(fieldNumber, t4.length));
        B.JSArray_methods.addAll$1(result0, t4);
        B.JSArray_methods.addAll$1(result, result0);
      }
      return result;
    },
    ProtocolBufferEncoder__encodeBigInt(fieldNumber, value, withFieldNumber) {
      var result;
      A.ProtocolBufferEncoder__validateBigInt(value);
      result = A._setArrayType([], type$.JSArray_int);
      if (withFieldNumber)
        B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeVarint32((fieldNumber << 3 | 0) >>> 0));
      B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeVarintBigInt(value._isNegative ? value.$and(0, $.$get$ProtocolBufferEncoder__maxInt64()).$or(0, $.$get$ProtocolBufferEncoder__minInt64()) : value));
      return result;
    },
    ProtocolBufferEncoder__encodeVarintBigInt(value) {
      var result = A._setArrayType([], type$.JSArray_int);
      for (; value.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(127)) > 0;) {
        B.JSArray_methods.add$1(result, value.$and(0, A._BigIntImpl__BigIntImpl$from(127)).$or(0, A._BigIntImpl__BigIntImpl$from(128)).toInt$0(0));
        value = value.$shr(0, 7);
      }
      B.JSArray_methods.add$1(result, value.toInt$0(0));
      return result;
    },
    ProtocolBufferEncoder__encodeVarint32(value) {
      var result = A._setArrayType([], type$.JSArray_int);
      for (; value > 127;) {
        B.JSArray_methods.add$1(result, value & 127 | 128);
        value = B.JSInt_methods._shrOtherPositive$1(value, 7);
      }
      B.JSArray_methods.add$1(result, value);
      return result;
    },
    ProtocolBufferEncoder__encodeInt(fieldNumber, value) {
      var result;
      A.ProtocolBufferEncoder__validateInt(value);
      result = A._setArrayType([], type$.JSArray_int);
      B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeVarint32((fieldNumber << 3 | 0) >>> 0));
      if (B.JSInt_methods.get$isNegative(value)) {
        B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeVarintBigInt(A._BigIntImpl__BigIntImpl$from(value).$and(0, $.$get$ProtocolBufferEncoder__maxInt64()).$or(0, $.$get$ProtocolBufferEncoder__minInt64())));
        return result;
      }
      B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeVarint32(value));
      return result;
    },
    ProtocolBufferEncoder__encodeBytes(fieldNumber, value) {
      var result = A._setArrayType([], type$.JSArray_int);
      B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeLength(fieldNumber, J.get$length$asx(value)));
      B.JSArray_methods.addAll$1(result, value);
      return result;
    },
    zoneClient() {
      return null;
    },
    wrapFormatException($name, value, body, $T) {
      var error, error0, t1, exception;
      try {
        t1 = body.call$0();
        return t1;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.SourceSpanFormatException) {
          error = t1;
          throw A.wrapException(A.SourceSpanFormatException$("Invalid " + $name + ": " + error._span_exception$_message, error._span, error.get$source()));
        } else if (type$.FormatException._is(t1)) {
          error0 = t1;
          throw A.wrapException(A.FormatException$("Invalid " + $name + ' "' + value + '": ' + error0.get$message(), error0.get$source(), error0.get$offset()));
        } else
          throw exception;
      }
    },
    AptosTransactionUtils_validateIdentifier(input) {
      var regExp = A.RegExp_RegExp("^[a-zA-Z_][a-zA-Z0-9_]*$", true);
      if (regExp._nativeRegExp.test(input))
        return input;
      throw A.wrapException(A.DartAptosPluginException$("Invalid Aptos identifier: An Aptos identifier must start with a letter or underscore and can only contain letters, numbers, and underscores.", A.LinkedHashMap_LinkedHashMap$_literal(["identifier", input], type$.String, type$.dynamic)));
    },
    MoveUtils_parseU8(value) {
      var toint, t1, exception;
      try {
        toint = A.IntUtils_parse(value, true);
        t1 = A.IntHelper_get_asUint8(toint);
        return t1;
      } catch (exception) {
        t1 = A.BcsSerializationException$("Invalid value for move type 'U8': Expected an unsigned 8-bit integer (0\u2013255).", A.LinkedHashMap_LinkedHashMap$_literal(["value", "" + value], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    MoveUtils_parseU16(value) {
      var toint, t1, exception;
      try {
        toint = A.IntUtils_parse(value, true);
        t1 = toint;
        if (B.JSInt_methods.get$isNegative(t1) || t1 > 65535)
          A.throwExpression(A.ArgumentException$("Invalid Unsigned int 16.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", B.JSInt_methods.get$bitLength(65535), "bitLength", B.JSInt_methods.get$bitLength(t1), "value", B.JSInt_methods.toString$0(t1)], type$.String, type$.dynamic)));
        return t1;
      } catch (exception) {
        t1 = A.BcsSerializationException$("Invalid value for move type 'U16': Expected an unsigned 16-bit integer (0\u201365,535).", A.LinkedHashMap_LinkedHashMap$_literal(["value", "" + value], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    MoveUtils_parseU32(value) {
      var toint, t1, exception;
      try {
        toint = A.IntUtils_parse(value, true);
        t1 = A.IntHelper_get_asUint32(toint);
        return t1;
      } catch (exception) {
        t1 = A.BcsSerializationException$("Invalid value for move type 'U32': Expected an unsigned 32-bit integer (0\u20134,294,967,295).", A.LinkedHashMap_LinkedHashMap$_literal(["value", "" + value], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    MoveUtils_parseU64(value) {
      var toint, t1, exception;
      try {
        toint = A.BigintUtils_parse(value, true);
        t1 = A.BigIntHelper_get_asUint64(toint);
        return t1;
      } catch (exception) {
        t1 = A.BcsSerializationException$("Invalid value for move type 'U64': Expected an unsigned 64-bit integer (0\u20132^64\u22121).", A.LinkedHashMap_LinkedHashMap$_literal(["value", value.toString$0(0)], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    MoveUtils_parseU128(value) {
      var toint, t1, exception;
      try {
        toint = A.BigintUtils_parse(value, true);
        t1 = toint;
        if (t1._isNegative || t1.compareTo$1(0, $.$get$maxU128()) > 0)
          A.throwExpression(A.ArgumentException$("Invalid Unsigned BigInt 128.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", $.$get$maxU128().get$bitLength(0), "bitLength", t1.get$bitLength(0), "value", t1.toString$0(0)], type$.String, type$.dynamic)));
        return t1;
      } catch (exception) {
        t1 = A.BcsSerializationException$("Invalid value for move type 'U128': Expected an unsigned 128-bit integer (0\u20132^128\u22121).", A.LinkedHashMap_LinkedHashMap$_literal(["value", value.toString$0(0)], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    MoveUtils_parseU256(value) {
      var toint, t1, exception;
      try {
        toint = A.BigintUtils_parse(value, true);
        t1 = toint;
        if (t1._isNegative || t1.compareTo$1(0, $.$get$maxU256()) > 0)
          A.throwExpression(A.ArgumentException$("Invalid Unsigned BigInt 256.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", $.$get$maxU256().get$bitLength(0), "bitLength", t1.get$bitLength(0), "value", t1.toString$0(0)], type$.String, type$.dynamic)));
        return t1;
      } catch (exception) {
        t1 = A.BcsSerializationException$("Invalid value for move type 'U256': Expected an unsigned 256-bit integer (0\u20132^256\u22121).", A.LinkedHashMap_LinkedHashMap$_literal(["value", value.toString$0(0)], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    MoveUtils_parseAddressBytes(value) {
      var t1, exception;
      try {
        t1 = A.AptosAddressUtils_praseAddressBytes(J.cast$1$0$ax(value, type$.int));
        return t1;
      } catch (exception) {
      }
      throw A.wrapException(A.BcsSerializationException$("Invalid value for move type 'Address': Expected a List<int> or a hexadecimal string.", A.LinkedHashMap_LinkedHashMap$_literal(["value", A.S(value)], type$.String, type$.dynamic)));
    },
    VersionedMessage_VersionedMessage$fromBuffer(serializedMessage) {
      var prefix = J.$index$asx(serializedMessage, 0);
      if ((prefix & 127) === prefix)
        return A.SolanaTransactionUtils_deserializeMessageLegacy(serializedMessage);
      return A.SolanaTransactionUtils_deserializeV0(serializedMessage);
    },
    SolanaTransactionUtils__decodeLength(bytes) {
      var len, size, elem;
      for (len = 0, size = 0; true;) {
        elem = B.JSArray_methods.removeAt$1(bytes, 0);
        len = (len | B.JSInt_methods._shlPositive$1(elem & 127, size * 7)) >>> 0;
        ++size;
        if ((elem & 128) === 0)
          break;
      }
      return len;
    },
    SolanaTransactionUtils_deserializeV0(serializedMessage) {
      var staticAccountKeys, staticAccountKeysLength, i, t2, instructionCount, compiledInstructions, programIdIndex, accountKeyIndexesLength, accountKeyIndexes, dataLength, data, result, result0, addressTableLookupsCount, addressTableLookups, writableIndexesLength, writableIndexes, readonlyIndexesLength, readonlyIndexes,
        t1 = type$.int,
        byteArray = A.List_List$from(serializedMessage, true, t1);
      B.JSArray_methods.removeAt$1(byteArray, 0);
      B.JSArray_methods.removeAt$1(byteArray, 0);
      B.JSArray_methods.removeAt$1(byteArray, 0);
      B.JSArray_methods.removeAt$1(byteArray, 0);
      staticAccountKeys = A._setArrayType([], type$.JSArray_SolAddress);
      staticAccountKeysLength = A.SolanaTransactionUtils__decodeLength(byteArray);
      for (i = 0; i < staticAccountKeysLength; ++i) {
        t2 = B.JSArray_methods.sublist$2(byteArray, 0, 32);
        if (t2.length !== 32)
          A.throwExpression(B.SolanaPluginException_hVv);
        B.JSArray_methods.add$1(staticAccountKeys, new A.SolAddress(A.Base58Encoder_encode(t2, B.Base58Alphabets_0)));
        byteArray.$flags & 1 && A.throwUnsupportedOperation(byteArray, 18);
        A.RangeError_checkValidRange(0, 32, byteArray.length);
        byteArray.splice(0, 32);
      }
      A.SolAddress_SolAddress$uncheckBytes(B.JSArray_methods.sublist$2(byteArray, 0, 32));
      B.JSArray_methods.removeRange$2(byteArray, 0, 32);
      instructionCount = A.SolanaTransactionUtils__decodeLength(byteArray);
      compiledInstructions = A._setArrayType([], type$.JSArray_CompiledInstruction);
      for (i = 0; i < instructionCount; ++i) {
        programIdIndex = B.JSArray_methods.removeAt$1(byteArray, 0);
        accountKeyIndexesLength = A.SolanaTransactionUtils__decodeLength(byteArray);
        accountKeyIndexes = B.JSArray_methods.sublist$2(byteArray, 0, accountKeyIndexesLength);
        byteArray.$flags & 1 && A.throwUnsupportedOperation(byteArray, 18);
        A.RangeError_checkValidRange(0, accountKeyIndexesLength, byteArray.length);
        byteArray.splice(0, accountKeyIndexesLength);
        dataLength = A.SolanaTransactionUtils__decodeLength(byteArray);
        data = B.JSArray_methods.sublist$2(byteArray, 0, dataLength);
        byteArray.$flags & 1 && A.throwUnsupportedOperation(byteArray, 18);
        A.RangeError_checkValidRange(0, dataLength, byteArray.length);
        byteArray.splice(0, dataLength);
        result = A.List_List$from(data, false, t1);
        result.$flags = 3;
        result0 = A.List_List$from(accountKeyIndexes, false, t1);
        result0.$flags = 3;
        B.JSArray_methods.add$1(compiledInstructions, new A.CompiledInstruction(programIdIndex, result0, result));
      }
      addressTableLookupsCount = A.SolanaTransactionUtils__decodeLength(byteArray);
      addressTableLookups = A._setArrayType([], type$.JSArray_AddressTableLookup);
      for (i = 0; i < addressTableLookupsCount; ++i) {
        t2 = B.JSArray_methods.sublist$2(byteArray, 0, 32);
        if (t2.length !== 32)
          A.throwExpression(B.SolanaPluginException_hVv);
        t2 = A.Base58Encoder_encode(t2, B.Base58Alphabets_0);
        byteArray.$flags & 1 && A.throwUnsupportedOperation(byteArray, 18);
        A.RangeError_checkValidRange(0, 32, byteArray.length);
        byteArray.splice(0, 32);
        writableIndexesLength = A.SolanaTransactionUtils__decodeLength(byteArray);
        writableIndexes = B.JSArray_methods.sublist$2(byteArray, 0, writableIndexesLength);
        byteArray.$flags & 1 && A.throwUnsupportedOperation(byteArray, 18);
        A.RangeError_checkValidRange(0, writableIndexesLength, byteArray.length);
        byteArray.splice(0, writableIndexesLength);
        readonlyIndexesLength = A.SolanaTransactionUtils__decodeLength(byteArray);
        readonlyIndexes = B.JSArray_methods.sublist$2(byteArray, 0, readonlyIndexesLength);
        byteArray.$flags & 1 && A.throwUnsupportedOperation(byteArray, 18);
        A.RangeError_checkValidRange(0, readonlyIndexesLength, byteArray.length);
        byteArray.splice(0, readonlyIndexesLength);
        result = A.List_List$from(writableIndexes, false, t1);
        result.$flags = 3;
        result0 = A.List_List$from(readonlyIndexes, false, t1);
        result0.$flags = 3;
        B.JSArray_methods.add$1(addressTableLookups, new A.AddressTableLookup(new A.SolAddress(t2), result, result0));
      }
      return new A.MessageV0();
    },
    SolanaTransactionUtils_deserializeMessageLegacy(bytes) {
      var accountCount, accountKeys, i, account, recentBlockhash, instructionCount, instructions, programIdIndex, accounts, dataLength, data, result, result0,
        t1 = type$.int,
        byteArray = A.List_List$from(bytes, true, t1),
        numRequiredSignatures = B.JSArray_methods.removeAt$1(byteArray, 0);
      if (numRequiredSignatures !== (numRequiredSignatures & 127))
        throw A.wrapException(B.SolanaPluginException_QHD);
      B.JSArray_methods.removeAt$1(byteArray, 0);
      B.JSArray_methods.removeAt$1(byteArray, 0);
      accountCount = A.SolanaTransactionUtils__decodeLength(byteArray);
      accountKeys = A._setArrayType([], type$.JSArray_SolAddress);
      for (i = 0; i < accountCount; ++i) {
        account = B.JSArray_methods.sublist$2(byteArray, 0, 32);
        byteArray = B.JSArray_methods.sublist$1(byteArray, 32);
        if (account.length !== 32)
          A.throwExpression(B.SolanaPluginException_hVv);
        B.JSArray_methods.add$1(accountKeys, new A.SolAddress(A.Base58Encoder_encode(account, B.Base58Alphabets_0)));
      }
      recentBlockhash = B.JSArray_methods.sublist$2(byteArray, 0, 32);
      byteArray = B.JSArray_methods.sublist$1(byteArray, 32);
      instructionCount = A.SolanaTransactionUtils__decodeLength(byteArray);
      instructions = A._setArrayType([], type$.JSArray_CompiledInstruction);
      for (i = 0; i < instructionCount; ++i) {
        programIdIndex = B.JSArray_methods.removeAt$1(byteArray, 0);
        accountCount = A.SolanaTransactionUtils__decodeLength(byteArray);
        accounts = B.JSArray_methods.sublist$2(byteArray, 0, accountCount);
        byteArray = B.JSArray_methods.sublist$1(byteArray, accountCount);
        dataLength = A.SolanaTransactionUtils__decodeLength(byteArray);
        data = B.JSArray_methods.sublist$2(byteArray, 0, dataLength);
        byteArray = B.JSArray_methods.sublist$1(byteArray, dataLength);
        result = A.List_List$from(data, false, t1);
        result.$flags = 3;
        result0 = A.List_List$from(accounts, false, t1);
        result0.$flags = 3;
        B.JSArray_methods.add$1(instructions, new A.CompiledInstruction(programIdIndex, result0, result));
      }
      A.SolAddress_SolAddress$uncheckBytes(recentBlockhash);
      return new A.Message();
    },
    ProtocolBufferEncoder__validateBigInt0(value) {
      if (value.get$bitLength(0) <= 63)
        return;
      throw A.wrapException(A.TronPluginException$(string$.Value_o6, A.LinkedHashMap_LinkedHashMap$_literal(["input", value], type$.String, type$.dynamic)));
    },
    ProtocolBufferEncoder__validateInt0(value) {
      if (B.JSInt_methods.get$bitLength(value) <= 31)
        return;
      throw A.wrapException(A.TronPluginException$(string$.Value_o3, A.LinkedHashMap_LinkedHashMap$_literal(["input", value], type$.String, type$.dynamic)));
    },
    ProtocolBufferEncoder_encode0(fieldNumber, value) {
      var result, mybeZigZag;
      if (value instanceof A._BigIntImpl) {
        A.ProtocolBufferEncoder__validateBigInt0(value);
        result = A._setArrayType([], type$.JSArray_int);
        mybeZigZag = value._isNegative ? value.$and(0, $.$get$ProtocolBufferEncoder__maxInt640()).$or(0, $.$get$ProtocolBufferEncoder__minInt640()) : value;
        B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeVarint320((fieldNumber << 3 | 0) >>> 0));
        B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeVarintBigInt0(mybeZigZag));
        return result;
      } else if (A._isInt(value))
        return A.ProtocolBufferEncoder__encodeInt0(fieldNumber, value);
      else if (type$.TronEnumerate._is(value))
        return A.ProtocolBufferEncoder__encodeInt0(fieldNumber, value.get$value());
      else if (value instanceof A.TronAddress)
        return A.ProtocolBufferEncoder__encodeBytes0(fieldNumber, A.BytesUtils_fromHexString(value._hexAddress, false));
      else if (type$.List_int._is(value))
        return A.ProtocolBufferEncoder__encodeBytes0(fieldNumber, value);
      else if (typeof value == "string")
        return A.ProtocolBufferEncoder__encodeBytes0(fieldNumber, A.StringUtils_encode(value, B.StringEncoding_1));
      else if (value instanceof A.TronProtocolBufferImpl)
        return A.ProtocolBufferEncoder__encodeBytes0(fieldNumber, value.toBuffer$0());
      else if (type$.List_dynamic._is(value))
        return A.ProtocolBufferEncoder__encodeList0(fieldNumber, value);
      else if (A._isBool(value))
        return A.ProtocolBufferEncoder__encodeInt0(fieldNumber, value ? 1 : 0);
      else if (type$.Map_dynamic_dynamic._is(value))
        return A.ProtocolBufferEncoder__encodeMap0(fieldNumber, value);
      throw A.wrapException(A.TronPluginException$("unsupported type", A.LinkedHashMap_LinkedHashMap$_literal(["runtime", J.get$runtimeType$(value), "value", value], type$.String, type$.dynamic)));
    },
    ProtocolBufferEncoder__encodeMap0(fieldNumber, value) {
      var t1, t2, key, val,
        result = A._setArrayType([], type$.JSArray_int);
      for (t1 = value.get$entries(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current();
        key = A.ProtocolBufferEncoder_encode0(1, t2.key);
        val = A.ProtocolBufferEncoder_encode0(2, t2.value);
        B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeLength0(fieldNumber, key.length + val.length));
        B.JSArray_methods.addAll$1(result, key);
        B.JSArray_methods.addAll$1(result, val);
      }
      return result;
    },
    ProtocolBufferEncoder__encodeLength0(fieldNumber, value) {
      var result;
      A.ProtocolBufferEncoder__validateInt0(value);
      result = A._setArrayType([], type$.JSArray_int);
      B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeVarint320((fieldNumber << 3 | 2) >>> 0));
      B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeVarint320(value));
      return result;
    },
    ProtocolBufferEncoder__encodeList0(fieldNumber, value) {
      var result,
        t1 = J.getInterceptor$asx(value);
      if (t1.get$isEmpty(value))
        return A._setArrayType([], type$.JSArray_int);
      result = A._setArrayType([], type$.JSArray_int);
      for (t1 = t1.get$iterator(value); t1.moveNext$0();)
        B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder_encode0(fieldNumber, t1.get$current()));
      return result;
    },
    ProtocolBufferEncoder__encodeVarintBigInt0(value) {
      var result = A._setArrayType([], type$.JSArray_int);
      for (; value.compareTo$1(0, A._BigIntImpl__BigIntImpl$from(127)) > 0;) {
        B.JSArray_methods.add$1(result, value.$and(0, A._BigIntImpl__BigIntImpl$from(127)).$or(0, A._BigIntImpl__BigIntImpl$from(128)).toInt$0(0));
        value = value.$shr(0, 7);
      }
      B.JSArray_methods.add$1(result, value.toInt$0(0));
      return result;
    },
    ProtocolBufferEncoder__encodeVarint320(value) {
      var result = A._setArrayType([], type$.JSArray_int);
      for (; value > 127;) {
        B.JSArray_methods.add$1(result, value & 127 | 128);
        value = B.JSInt_methods._shrOtherPositive$1(value, 7);
      }
      B.JSArray_methods.add$1(result, value);
      return result;
    },
    ProtocolBufferEncoder__encodeInt0(fieldNumber, value) {
      var result;
      A.ProtocolBufferEncoder__validateInt0(value);
      result = A._setArrayType([], type$.JSArray_int);
      B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeVarint320((fieldNumber << 3 | 0) >>> 0));
      if (B.JSInt_methods.get$isNegative(value)) {
        B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeVarintBigInt0(A._BigIntImpl__BigIntImpl$from(value).$and(0, $.$get$ProtocolBufferEncoder__maxInt640()).$or(0, $.$get$ProtocolBufferEncoder__minInt640())));
        return result;
      }
      B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeVarint320(value));
      return result;
    },
    ProtocolBufferEncoder__encodeBytes0(fieldNumber, value) {
      var result = A._setArrayType([], type$.JSArray_int);
      B.JSArray_methods.addAll$1(result, A.ProtocolBufferEncoder__encodeLength0(fieldNumber, J.get$length$asx(value)));
      B.JSArray_methods.addAll$1(result, value);
      return result;
    },
    OnChainUtils_parseInt($name, value, $T) {
      var t1, parse;
      if (!$T._is(0))
        throw A.wrapException(B.TronPluginException_Qrw);
      t1 = value == null;
      if (t1 && $T._is(null)) {
        $T._as(null);
        return null;
      }
      if (t1)
        throw A.wrapException(A.TronPluginException$("Missing parameter: " + $name + ".", null));
      parse = A.IntUtils_tryParse(value);
      if (parse != null)
        return $T._as(parse);
      throw A.wrapException(A.TronPluginException$("Invalid numeric value for parameter: " + $name + ".", null));
    },
    OnChainUtils_parseBigInt($name, value, $T) {
      var t1, parse;
      if (!$T._is($.$get$_BigIntImpl_one()))
        throw A.wrapException(B.TronPluginException_zJF0);
      t1 = value == null;
      if (t1 && $T._is(null)) {
        $T._as(null);
        return null;
      }
      if (t1)
        throw A.wrapException(A.TronPluginException$("Missing parameter: " + $name + ".", null));
      parse = A.BigintUtils_tryParse(value);
      if (parse != null)
        return $T._as(parse);
      throw A.wrapException(A.TronPluginException$("Invalid BigInt value for parameter: " + $name + ".", null));
    },
    OnChainUtils_parseHex($name, value, $T) {
      var t1, parse;
      if (!$T._is(A._setArrayType([], type$.JSArray_int)))
        throw A.wrapException(B.TronPluginException_zJF);
      t1 = value == null;
      if (t1 && $T._is(null)) {
        $T._as(null);
        return null;
      }
      if (t1)
        throw A.wrapException(A.TronPluginException$("Missing parameter: " + $name + ".", null));
      if (typeof value == "string") {
        parse = A.BytesUtils_tryFromHexString(value, false);
        if (parse != null)
          return $T._as(parse);
      }
      throw A.wrapException(A.TronPluginException$("Invalid Hex bytes value for parameter: " + $name + ".", null));
    },
    OnChainUtils_parseString($name, value, $T) {
      var t1;
      if (!$T._is(""))
        throw A.wrapException(B.TronPluginException_zJF);
      t1 = value == null;
      if (t1 && $T._is(null)) {
        $T._as(null);
        return null;
      }
      if (t1)
        throw A.wrapException(A.TronPluginException$("Missing parameter: " + $name + ".", null));
      if (typeof value == "string")
        return $T._as(value);
      throw A.wrapException(A.TronPluginException$("Invalid String value for parameter: " + $name + ".", null));
    },
    OnChainUtils_parseTronAddress($name, value, $T) {
      var result, exception,
        t1 = value == null;
      if (t1 && $T._is(null)) {
        $T._as(null);
        return null;
      }
      if (t1)
        throw A.wrapException(A.TronPluginException$("Missing parameter: " + $name + ".", null));
      result = A.OnChainUtils_parseString($name, value, type$.String);
      try {
        t1 = $T._as(A.TronAddress_TronAddress(result));
        return t1;
      } catch (exception) {
        t1 = A.TronPluginException$("Invalid String value for parameter: " + $name + ".", null);
        throw A.wrapException(t1);
      }
    },
    OnChainUtils_parseBytes($name, value, $T) {
      var t1;
      if (!$T._is(A._setArrayType([], type$.JSArray_int)))
        throw A.wrapException(B.TronPluginException_Cbl);
      t1 = value == null;
      if (t1 && $T._is(null)) {
        $T._as(null);
        return null;
      }
      if (t1)
        throw A.wrapException(A.TronPluginException$("Missing parameter: " + $name + ".", null));
      if (typeof value == "string")
        return $T._as(A.StringUtils_toBytes(value));
      throw A.wrapException(A.TronPluginException$("Invalid value for parameter: " + $name + ".", null));
    },
    OnChainUtils_parseMap($name, throwOnNull, value, $K, $V) {
      var t1, exception;
      try {
        t1 = A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(value), $K, $V);
        return t1;
      } catch (exception) {
        if (!throwOnNull)
          return null;
      }
      if (value == null)
        throw A.wrapException(A.TronPluginException$("Missing parameter: " + $name + ".", null));
      throw A.wrapException(A.TronPluginException$("Invalid value for parameter: " + $name + ".", null));
    },
    OnChainUtils_parseList($name, throwOnNull, value, $T) {
      var t2, exception, _null = null,
        t1 = value == null;
      if (t1 && !throwOnNull)
        return _null;
      try {
        t2 = A.List_List$from(type$.List_dynamic._as(value), true, $T);
        return t2;
      } catch (exception) {
        if (!throwOnNull)
          return _null;
      }
      if (t1)
        throw A.wrapException(A.TronPluginException$("Missing parameter: " + $name + ".", _null));
      throw A.wrapException(A.TronPluginException$("Invalid List value for parameter: " + $name + ".", _null));
    },
    OnChainUtils_parseBoolean($name, value, $T) {
      var t1;
      if (!$T._is(true))
        throw A.wrapException(B.TronPluginException_zJF0);
      t1 = value == null;
      if (t1 && $T._is(null))
        return $T._as(null);
      if (t1)
        throw A.wrapException(A.TronPluginException$("Missing parameter: " + $name + ".", null));
      if (A._isBool(value))
        return $T._as(value);
      throw A.wrapException(A.TronPluginException$("Invalid boolean value for parameter: " + $name + ".", null));
    },
    extension() {
      var t1 = init.G,
        t2 = type$.nullable_JSObject,
        t3 = t2._as(t1.chrome);
      if (t3 == null)
        t2 = null;
      else {
        t2 = t2._as(t3.runtime);
        t2 = t2 == null ? null : A._asStringQ(t2.id);
      }
      if (t2 != null)
        return type$.JSObject._as(t1.chrome);
      return type$.JSObject._as(t1.browser);
    },
    isExtension() {
      var _null = null,
        t1 = init.G,
        t2 = type$.nullable_JSObject,
        t3 = t2._as(t1.chrome);
      if (t3 == null)
        t3 = _null;
      else {
        t3 = t2._as(t3.runtime);
        t3 = t3 == null ? _null : A._asStringQ(t3.id);
      }
      if (t3 == null) {
        t1 = t2._as(t1.browser);
        if (t1 == null)
          t1 = _null;
        else {
          t1 = t2._as(t1.runtime);
          t1 = t1 == null ? _null : A._asStringQ(t1.id);
        }
        t1 = t1 != null;
      } else
        t1 = true;
      return t1;
    },
    Runtime_sendMessage_(_this, message) {
      return A.Runtime_sendMessage_$body(_this, message);
    },
    Runtime_sendMessage_$body(_this, message) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_WalletEvent),
        $async$returnValue, result;
      var $async$Runtime_sendMessage_ = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.promiseToFuture(type$.JSObject._as(_this.sendMessage(null, A.ToJsEvent_toJsEvent(message), null)), type$.nullable_JSObject), $async$Runtime_sendMessage_);
            case 3:
              // returning from await.
              result = $async$result;
              $async$returnValue = result == null ? null : A.JSWalletEvent_toEvent(result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$Runtime_sendMessage_, $async$completer);
    },
    RetionalConst_fromDecimalNumber(decimal) {
      switch (decimal) {
        case 8:
          return $.$get$RetionalConst_bigR8();
        case 18:
          return $.$get$RetionalConst_bigR18();
        case 6:
          return $.$get$RetionalConst_bigR6();
        case 12:
          return $.$get$RetionalConst_bigR12();
        case 10:
          return $.$get$RetionalConst_bigR10();
        default:
          return A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(decimal), null);
      }
    },
    toAssetPath(assetPath, $package) {
      return "assets/" + assetPath;
    },
    QuickImutableList_firstWhereOrNull(_this, test, $T) {
      var t1, exception, orElse = null;
      try {
        t1 = B.JSArray_methods.firstWhere$1(_this, test);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.StateError) {
          t1 = orElse;
          t1 = t1 == null ? null : t1.call$0();
          return t1;
        } else
          throw exception;
      }
    },
    QuickImutableList_get_firstOrNull(_this, $T) {
      if (_this.length === 0)
        return null;
      return B.JSArray_methods.get$first(_this);
    },
    Web3RequestExceptionConst_fromException(exception) {
      var t1,
        _s10_ = "WALLET-001";
      if (exception instanceof A.Web3RequestException)
        return exception;
      if (exception instanceof A.RPCError) {
        t1 = exception.errorCode;
        if (t1 == null)
          t1 = -1;
        return new A.Web3RequestException(exception.message, t1, _s10_, A.StringUtils_tryFromJson(exception.details));
      } else if (exception instanceof A.ApiProviderException)
        return new A.Web3RequestException("The Provider is disconnected.", 4901, _s10_, exception.code === 10001 ? "Request timeout" : exception.message);
      return B.Web3RequestException_ce8;
    },
    Web3RequestExceptionConst_invalidStringArgrument(parameterName) {
      return new A.Web3RequestException("Invalid method parameters. Invalid string argument provided for " + parameterName + ".", -32602, "WEB3-0020", null);
    },
    Web3RequestExceptionConst_invalidNumbers(parameterName) {
      return new A.Web3RequestException("Invalid method parameters. Invalid number argument provided for " + parameterName, -32602, "WEB3-0070", null);
    },
    Web3RequestExceptionConst_invalidParameters(message) {
      return new A.Web3RequestException("Invalid method parameters: " + message, -32602, "WEB3-5100", message);
    },
    Web3RequestExceptionConst_invalidWalletStandardSignMessage() {
      return new A.Web3RequestException("Invalid method parameters: Invalid account or message. The parameters must contain both 'account' and 'message' as uint8Array.", -32602, "WEB3-5100", "Invalid account or message. The parameters must contain both 'account' and 'message' as uint8Array.");
    },
    Web3RequestExceptionConst_invalidAccountOrTransaction() {
      return new A.Web3RequestException("Invalid method parameters: Invalid account or transaction. The parameters must contain both 'account' and 'transaction' as uint8Array.", -32602, "WEB3-5100", "Invalid account or transaction. The parameters must contain both 'account' and 'transaction' as uint8Array.");
    },
    Web3RequestExceptionConst_mismatchAccountAndTransactionChainId() {
      return new A.Web3RequestException(string$.Invalits, -32602, "WEB3-5100", null);
    },
    Web3RequestExceptionConst_invalidTransaction() {
      return new A.Web3RequestException("Invalid method parameters: Invalid transaction: Failed to parse or validate the transaction parameters.", -32602, "WEB3-5100", "Invalid transaction: Failed to parse or validate the transaction parameters.");
    },
    Web3RequestExceptionConst_failedToParse(key) {
      return new A.Web3RequestException("Invalid method parameters: failed to parse '" + key + "'.", -32602, "WEB3-5100", null);
    },
    Web3RequestExceptionConst_message(message, data) {
      return new A.Web3RequestException(message, -32602, "WEB3-5100", data);
    },
    Web3AptosExceptionConstant_invalidAptosSigningMessage() {
      return new A.Web3RequestException("Invalid method parameters: Invalid Aptos sign message. Must include 'message', and 'nonce' fields", -32602, "WEB3-5100", "Invalid Aptos sign message. Must include 'message', and 'nonce' fields");
    },
    Web3BitcoinExceptionConstant_invalidTransaction() {
      return new A.Web3RequestException("Invalid method parameters: Invalid account or transaction. The parameters must contain both 'accounts' and 'psbt' as base64-encoded.", -32602, "WEB3-5100", "Invalid account or transaction. The parameters must contain both 'accounts' and 'psbt' as base64-encoded.");
    },
    Web3BitcoinExceptionConstant_invalidSendTransaction() {
      return new A.Web3RequestException("Invalid method parameters: Invalid accounts or transaction. The parameters must contain both 'accounts' and at least one 'outputs'.", -32602, "WEB3-5100", "Invalid accounts or transaction. The parameters must contain both 'accounts' and at least one 'outputs'.");
    },
    Web3BitcoinExceptionConstant_invalidTransactionAccount() {
      return new A.Web3RequestException("Invalid method parameters: Invalid accounts: All accounts must belong to the same network.", -32602, "WEB3-5100", "Invalid accounts: All accounts must belong to the same network.");
    },
    Web3BitcoinExceptionConstant_emptyOutput() {
      return new A.Web3RequestException("Invalid method parameters: At least one output required for create transaction.", -32602, "WEB3-5100", "At least one output required for create transaction.");
    },
    Web3BitcoinExceptionConstant_invalidOutput() {
      return new A.Web3RequestException("Invalid method parameters: Output object must contain either an address or a script, but not both. Value must be an integer represented as a string.", -32602, "WEB3-5100", "Output object must contain either an address or a script, but not both. Value must be an integer represented as a string.");
    },
    Web3CosmosExceptionConstant_mismatchChainId() {
      return new A.Web3RequestException("Invalid method parameters: Chain ID mismatch. 'request' chain ID does not match 'signDoc' chain ID.", -32602, "WEB3-5100", "Chain ID mismatch. 'request' chain ID does not match 'signDoc' chain ID.");
    },
    Web3EthereumExceptionConst_invalidAccessListParams() {
      return new A.Web3RequestException("Invalid method parameters: failed to parse 'accessList'.", -32602, "WEB3-5100", null);
    },
    Web3EthereumExceptionConst_missingChainId() {
      return new A.Web3RequestException("Invalid method parameters: failed to parse 'chainId'.", -32602, "WEB3-5100", null);
    },
    Web3EthereumExceptionConst_invalidTypeData() {
      return new A.Web3RequestException("Invalid method parameters: failed to parse 'typeData'.", -32602, "WEB3-5100", null);
    },
    Web3EthereumExceptionConst_missingTransactionRequiredFields() {
      return new A.Web3RequestException("Invalid method parameters: Some required fields are missing: from, value.", -32602, "WEB3-5100", "Some required fields are missing: from, value.");
    },
    Web3SolanaExceptionConstant_invalidCommitmentOptions() {
      return new A.Web3RequestException("Invalid method parameters: Invalid Commitment option: only 'processed', 'confirmed' or 'finalized' are allowed.", -32602, "WEB3-5100", "Invalid Commitment option: only 'processed', 'confirmed' or 'finalized' are allowed.");
    },
    Web3SolanaExceptionConstant_invalidSignInParams() {
      return new A.Web3RequestException("Invalid method parameters: Failed to parse or validate the Sign-In parameters.", -32602, "WEB3-5100", "Failed to parse or validate the Sign-In parameters.");
    },
    Web3StellarExceptionConstant_invalidAccountOrTransaction() {
      return new A.Web3RequestException("Invalid method parameters: Invalid account or transaction. The parameters must contain both 'account' and 'transaction' as base64(envlope).", -32602, "WEB3-5100", "Invalid account or transaction. The parameters must contain both 'account' and 'transaction' as base64(envlope).");
    },
    Web3SubstrateExceptionConstant_metadataParsingFailed() {
      return new A.Web3RequestException("Invalid metadata: Failed to parse or validate the metadata parameters.", -32602, "WEB3-5100", null);
    },
    Web3SuiExceptionConstant_fialedToParseTransactionObject(objectId) {
      return new A.Web3RequestException(string$.Invalita + objectId, -32602, "WEB3-5100", null);
    },
    Web3TonExceptionConstant_invalidTxMessage() {
      return new A.Web3RequestException("Invalid method parameters: Invalid transaction messages. Failed to parse or validate transaction messages.", -32602, "WEB3-5100", "Invalid transaction messages. Failed to parse or validate transaction messages.");
    },
    current() {
      var exception, t1, path, lastIndex, uri = null;
      try {
        uri = A.Uri_base();
      } catch (exception) {
        if (type$.Exception._is(A.unwrapException(exception))) {
          t1 = $._current;
          if (t1 != null)
            return t1;
          throw exception;
        } else
          throw exception;
      }
      if (J.$eq$(uri, $._currentUriBase)) {
        t1 = $._current;
        t1.toString;
        return t1;
      }
      $._currentUriBase = uri;
      if ($.$get$Style_platform() === $.$get$Style_url())
        t1 = $._current = uri.resolve$1(".").toString$0(0);
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        t1 = $._current = lastIndex === 0 ? path : B.JSString_methods.substring$2(path, 0, lastIndex);
      }
      return t1;
    },
    isAlphabetic(char) {
      var t1;
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    driveLetterEnd(path, index) {
      var t2, t3, _null = null,
        t1 = path.length,
        index0 = index + 2;
      if (t1 < index0)
        return _null;
      if (!(index >= 0 && index < t1))
        return A.ioore(path, index);
      if (!A.isAlphabetic(path.charCodeAt(index)))
        return _null;
      t2 = index + 1;
      if (!(t2 < t1))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 58) {
        t3 = index + 4;
        if (t1 < t3)
          return _null;
        if (B.JSString_methods.substring$2(path, t2, t3).toLowerCase() !== "%3a")
          return _null;
        index = index0;
      }
      t2 = index + 2;
      if (t1 === t2)
        return t2;
      if (!(t2 >= 0 && t2 < t1))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 47)
        return _null;
      return index + 3;
    },
    SubstrateMetadataLayouts_si1Field() {
      var _null = null;
      return A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_optional(A.LayoutConst_compactString(_null), "name"), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "type"), A.LayoutConst_optional(A.LayoutConst_compactString(_null), "typeName"), A.LayoutConst_compactVec(A.LayoutConst_compactString(_null), "docs", type$.String)], type$.JSArray_Layout_dynamic), false, _null);
    },
    SubstrateMetadataLayouts_portableRegistry(property) {
      var _null = null, _s4_ = "type",
        t1 = type$.String,
        t2 = type$.JSArray_Layout_dynamic,
        t3 = type$.Map_String_dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactVec(A.StructLayout_StructLayout(A._setArrayType([new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "id"), A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactVec(A.LayoutConst_compactString(_null), "path", t1), A.LayoutConst_compactVec(A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString("name"), A.LayoutConst_optional(new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _null), _s4_)], t2), false, _null), "params", t3), A.LayoutConst_rustEnum(A._setArrayType([A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactVec(A.SubstrateMetadataLayouts_si1Field(), "fields", t3)], t2), false, "Composite"), A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactVec(A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString("name"), A.LayoutConst_compactVec(A.SubstrateMetadataLayouts_si1Field(), "fields", t3), A.IntegerLayout$(1, B.C_Endian0, "index", false), A.LayoutConst_compactVec(A.LayoutConst_compactString(_null), "docs", t1)], t2), false, _null), "variants", t3)], t2), false, "Variant"), A.StructLayout_StructLayout(A._setArrayType([new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s4_)], t2), false, "Sequence"), A.StructLayout_StructLayout(A._setArrayType([A.IntegerLayout$(4, B.C_Endian0, "len", false), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s4_)], t2), false, "Array"), A.LayoutConst_compactVec(new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _null), "Tuple", type$.int), A.LayoutConst_rustEnum(A._setArrayType([new A.NoneLayout(0, "Bool"), new A.NoneLayout(0, "Char"), new A.NoneLayout(0, "Str"), new A.NoneLayout(0, "U8"), new A.NoneLayout(0, "U16"), new A.NoneLayout(0, "U32"), new A.NoneLayout(0, "U64"), new A.NoneLayout(0, "U128"), new A.NoneLayout(0, "U256"), new A.NoneLayout(0, "I8"), new A.NoneLayout(0, "I16"), new A.NoneLayout(0, "I32"), new A.NoneLayout(0, "I64"), new A.NoneLayout(0, "I128"), new A.NoneLayout(0, "I256")], t2), "Primitive", false), A.StructLayout_StructLayout(A._setArrayType([new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, _s4_)], t2), false, "Compact"), A.StructLayout_StructLayout(A._setArrayType([new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "bitStoreType"), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "bitOrderType")], t2), false, "BitSequence"), A.LayoutConst_compactString("HistoricMetaCompat")], t2), "def", false), A.LayoutConst_compactVec(A.LayoutConst_compactString(_null), "docs", t1)], t2), false, _s4_)], t2), false, _null), "types", t3)], t2), false, property);
    },
    SubstrateMetadataLayouts_signedExtensionMetadataV14() {
      return A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString("identifier"), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, "type"), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, "additionalSigned")], type$.JSArray_Layout_dynamic), false, null);
    },
    SubstrateMetadataLayouts_storageEntryModifierV9(property) {
      return A.LayoutConst_rustEnum(A._setArrayType([new A.NoneLayout(0, "Optional"), new A.NoneLayout(0, "Default"), new A.NoneLayout(0, "Required")], type$.JSArray_Layout_dynamic), property, false);
    },
    SubstrateMetadataLayouts_storageEntryTypeV14(property) {
      var _null = null,
        t1 = type$.JSArray_Layout_dynamic;
      return A.LayoutConst_rustEnum(A._setArrayType([new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "Plain"), A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactVec(A.LayoutConst_rustEnum(A._setArrayType([new A.NoneLayout(0, "Blake2128"), new A.NoneLayout(0, "Blake2256"), new A.NoneLayout(0, "Blake2128Concat"), new A.NoneLayout(0, "Twox128"), new A.NoneLayout(0, "Twox256"), new A.NoneLayout(0, "Twox64Concat"), new A.NoneLayout(0, "Identity")], t1), _null, false), "hashers", type$.Map_String_dynamic), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "key"), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, _null, false), -1, "value")], t1), false, "Map")], t1), property, false);
    },
    SubstrateMetadataLayouts_palletStorageMetadataV14() {
      var t1 = type$.JSArray_Layout_dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString("prefix"), A.LayoutConst_compactVec(A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString("name"), A.SubstrateMetadataLayouts_storageEntryModifierV9("modifier"), A.SubstrateMetadataLayouts_storageEntryTypeV14("type"), new A.CompactBytes(-1, "fallback"), A.LayoutConst_compactVec(A.LayoutConst_compactString(null), "docs", type$.String)], t1), false, null), "items", type$.Map_String_dynamic)], t1), false, null);
    },
    SubstrateMetadataLayouts_palletCallMetadataV14() {
      return A.StructLayout_StructLayout(A._setArrayType([new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, "type")], type$.JSArray_Layout_dynamic), false, null);
    },
    SubstrateMetadataLayouts_palletEventMetadataV14() {
      return A.StructLayout_StructLayout(A._setArrayType([new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, "type")], type$.JSArray_Layout_dynamic), false, null);
    },
    SubstrateMetadataLayouts_palletConstantMetadataV14() {
      return A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString("name"), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, "type"), new A.CompactBytes(-1, "value"), A.LayoutConst_compactVec(A.LayoutConst_compactString(null), "docs", type$.String)], type$.JSArray_Layout_dynamic), false, null);
    },
    SubstrateMetadataLayouts_palletErrorMetadataV14() {
      return A.StructLayout_StructLayout(A._setArrayType([new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, "type")], type$.JSArray_Layout_dynamic), false, null);
    },
    SubstrateMetadataLayouts_runtimeApiMethodParamMetadataV15() {
      return A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString("name"), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, "type")], type$.JSArray_Layout_dynamic), false, null);
    },
    SubstrateMetadataLayouts_outerEnums15(property) {
      return A.StructLayout_StructLayout(A._setArrayType([new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, "callType"), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, "eventType"), new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, "errorType")], type$.JSArray_Layout_dynamic), false, property);
    },
    SubstrateMetadataLayouts_customMetadata15(property) {
      var t1 = type$.JSArray_Layout_dynamic;
      return A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactMap(A.LayoutConst_compactString(null), A.StructLayout_StructLayout(A._setArrayType([new A.CompactIntLayout(A.IntegerLayout$(4, B.C_Endian0, null, false), -1, "type"), new A.CompactBytes(-1, "value")], t1), false, null), "map", type$.String, type$.dynamic)], t1), false, property);
    },
    SubstrateMetadataLayouts_depecratedStatusV16(property) {
      var t1 = type$.JSArray_Layout_dynamic;
      return A.LayoutConst_rustEnum(A._setArrayType([A.StructLayout_StructLayout(A._setArrayType([], t1), false, "notDeprecated"), A.StructLayout_StructLayout(A._setArrayType([], t1), false, "deprecatedWithoutNote"), A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactString("note"), A.LayoutConst_optional(A.LayoutConst_compactString(null), "since")], t1), false, "deprecated")], t1), property, true);
    },
    SubstrateMetadataLayouts_depecratedInfo(property) {
      var t1 = type$.JSArray_Layout_dynamic,
        t2 = type$.dynamic;
      return A.LayoutConst_rustEnum(A._setArrayType([A.StructLayout_StructLayout(A._setArrayType([], t1), false, "notDeprecated"), A.StructLayout_StructLayout(A._setArrayType([A.SubstrateMetadataLayouts_depecratedStatusV16("status")], t1), false, "itemDeprecated"), A.StructLayout_StructLayout(A._setArrayType([A.LayoutConst_compactMap(A.IntegerLayout$(1, B.C_Endian0, null, false), A.SubstrateMetadataLayouts_depecratedStatusV16(null), "depecreatedVariants", t2, t2)], t1), false, "variantsDeprecated")], t1), property, true);
    },
    MetadataCastingUtils_mapOrNull(value, $K, $V) {
      var t1, exception;
      try {
        t1 = value.cast$2$0(0, $K, $V);
        return t1;
      } catch (exception) {
        return null;
      }
    },
    SubstrateEnumSerializationUtils_getScaleEnumKey(value, className, keys) {
      var inMap, key, t1, t2, map, t3, exception,
        _s17_ = "Invalid enum key.";
      try {
        t1 = type$.String;
        t2 = type$.dynamic;
        map = A.MetadataCastingUtils_mapOrNull(value, t1, t2);
        if (map == null)
          A.throwExpression(A.MetadataException$("Invalid Map value.", A.LinkedHashMap_LinkedHashMap$_literal(["property", null, "type", null, "value", value], t1, t2)));
        inMap = map;
        t3 = inMap.get$keys();
        key = t3.get$first(t3);
        if (keys != null && !B.JSArray_methods.contains$1(keys, key)) {
          t1 = A.DartSubstratePluginException$(_s17_, A.LinkedHashMap_LinkedHashMap$_literal(["key", key, "expected", B.JSArray_methods.join$1(keys, ", "), "runtime", className], t1, t2));
          throw A.wrapException(t1);
        }
        return key;
      } catch (exception) {
        t1 = A.DartSubstratePluginException$(_s17_, A.LinkedHashMap_LinkedHashMap$_literal(["value", value, "runtime", className], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    SubstrateEnumSerializationUtils_getScaleEnumValue(json, key, $T) {
      var value = json.$index(0, key);
      if (!$T._is(value))
        throw A.wrapException(A.DartSubstratePluginException$("Invalid enum values.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", A.createRuntimeType($T).toString$0(0), "value", value, "key", key, "runtime", null], type$.String, type$.dynamic)));
      return value;
    },
    isAllTheSame(iter) {
      var firstValue, t1, t2, value;
      if (iter.get$length(0) === 0)
        return true;
      firstValue = iter.get$first(0);
      for (t1 = A.SubListIterable$(iter, 1, null, iter.$ti._eval$1("ListIterable.E")), t2 = t1.$ti, t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListIterable.E>")), t2 = t2._eval$1("ListIterable.E"); t1.moveNext$0();) {
        value = t1.__internal$_current;
        if (!J.$eq$(value == null ? t2._as(value) : value, firstValue))
          return false;
      }
      return true;
    },
    replaceFirstNull(list, element, $E) {
      var index = B.JSArray_methods.indexOf$1(list, null);
      if (index < 0)
        throw A.wrapException(A.ArgumentError$(A.S(list) + " contains no null elements.", null));
      B.JSArray_methods.$indexSet(list, index, element);
    },
    replaceWithNull(list, element, $E) {
      var index = B.JSArray_methods.indexOf$1(list, element);
      if (index < 0)
        throw A.wrapException(A.ArgumentError$(A.S(list) + " contains no elements matching " + element.toString$0(0) + ".", null));
      B.JSArray_methods.$indexSet(list, index, null);
    },
    countCodeUnits(string, codeUnit) {
      var t1, t2, count, t3;
      for (t1 = new A.CodeUnits(string), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListBase.E>")), t2 = t2._eval$1("ListBase.E"), count = 0; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if ((t3 == null ? t2._as(t3) : t3) === codeUnit)
          ++count;
      }
      return count;
    },
    findLineStart(context, text, column) {
      var beginningOfLine, index, lineStart;
      if (text.length === 0)
        for (beginningOfLine = 0; true;) {
          index = B.JSString_methods.indexOf$2(context, "\n", beginningOfLine);
          if (index === -1)
            return context.length - beginningOfLine >= column ? beginningOfLine : null;
          if (index - beginningOfLine >= column)
            return beginningOfLine;
          beginningOfLine = index + 1;
        }
      index = B.JSString_methods.indexOf$1(context, text);
      for (; index !== -1;) {
        lineStart = index === 0 ? 0 : B.JSString_methods.lastIndexOf$2(context, "\n", index - 1) + 1;
        if (column === index - lineStart)
          return lineStart;
        index = B.JSString_methods.indexOf$2(context, text, index + 1);
      }
      return null;
    },
    BocUtils_bitsToPaddedBuffer(bits) {
      var padding, i,
        t1 = bits._bit_string$_length,
        t2 = t1 / 8,
        builder = A.BitBuilder$(B.JSNumber_methods.ceil$0(t2) * 8);
      builder.writeBits$1(bits);
      padding = B.JSNumber_methods.ceil$0(t2) * 8 - t1;
      for (i = 0; i < padding; ++i)
        builder.writeBit$1(i === 0);
      return builder;
    },
    BocUtils_paddedBufferToBits(buff) {
      var bitLen, t1, bitPos,
        i = buff.length - 1;
      while (true) {
        if (!(i >= 0)) {
          bitLen = 0;
          break;
        }
        t1 = buff[i];
        if (t1 !== 0) {
          bitPos = (t1 & -t1) >>> 0;
          if ((bitPos & 1) === 0)
            bitPos = B.JSNumber_methods.ceil$0(Math.log(bitPos) / Math.log(2)) + 1;
          bitLen = i > 0 ? i << 3 >>> 0 : 0;
          bitLen += 8 - bitPos;
          break;
        }
        --i;
      }
      return A.BitString_BitString(buff, 0, bitLen);
    },
    DictionaryUtils_findCommonPrefix(src, startPos) {
      var r, i, s,
        t1 = src.length;
      if (t1 === 0)
        return "";
      if (0 >= t1)
        return A.ioore(src, 0);
      r = B.JSString_methods.substring$1(src[0], startPos);
      for (i = 1; i < t1; ++i) {
        s = src[i];
        for (; !B.JSString_methods.startsWith$2(s, r, startPos);) {
          r = B.JSString_methods.substring$2(r, 0, r.length - 1);
          if (r.length === 0)
            return r;
        }
      }
      return r;
    },
    DictionaryUtils_serializeInternalKey(value) {
      if (A._isInt(value)) {
        if (!isFinite(value))
          throw A.wrapException(A.DictException$("Invalid key type. not a safe integer.", null));
        return "n:" + B.JSInt_methods.toString$0(value);
      } else if (value instanceof A._BigIntImpl)
        return "b:" + value.toString$0(0);
      else if (value instanceof A.TonAddress)
        return "a:" + value.toString$0(0);
      else if (type$.List_int._is(value))
        return "f:" + A.BytesUtils_toHexString(value, true, null);
      else if (value instanceof A.BitString)
        return "B:" + value.toString$0(0);
      else
        throw A.wrapException(A.DictException$("Invalid key type.", A.LinkedHashMap_LinkedHashMap$_literal(["key", value, "type", J.get$runtimeType$(value).toString$0(0)], type$.String, type$.dynamic)));
    },
    DictionaryUtils__deserializeInternalKey(value) {
      var lastDash, t1, charLen, padded,
        k = B.JSString_methods.substring$2(value, 0, 2),
        v = B.JSString_methods.substring$1(value, 2);
      switch (k) {
        case "n:":
          return A.int_parse(v, null);
        case "b:":
          return A._BigIntImpl_parse(v, null);
        case "a:":
          return A.TonAddress_TonAddress(v);
        case "f:":
          return A.BytesUtils_fromHexString(v, false);
        case "B:":
          lastDash = B.JSString_methods.endsWith$1(v, "_");
          t1 = !lastDash;
          if (!t1 || B.JSInt_methods.$mod(v.length, 2) !== 0) {
            charLen = v.length;
            if (lastDash)
              --charLen;
            padded = B.JSString_methods.substring$2(v, 0, charLen) + "0";
            if (t1 && (charLen & 1) !== 0)
              return A.BitString_BitString(A.BytesUtils_fromHexString(padded, false), 0, charLen << 2 >>> 0);
            else {
              t1 = padded.length;
              return A.BocUtils_paddedBufferToBits(A.BytesUtils_fromHexString((t1 & 1) === 1 ? B.JSString_methods.substring$2(padded, 0, t1 - 1) : padded, false));
            }
          } else
            return A.BitString_BitString(A.BytesUtils_fromHexString(v, false), 0, v.length << 2 >>> 0);
        default:
          throw A.wrapException(A.DictException$("Invalid key type.", A.LinkedHashMap_LinkedHashMap$_literal(["key", k, "type", B.JSString_methods.get$runtimeType(k).toString$0(0)], type$.String, type$.dynamic)));
      }
    },
    Base64Utils_encodeBase64(bytes, urlSafe) {
      var encode = A.StringUtils_decode(bytes, false, B.StringEncoding_2);
      return encode;
    },
    Base64Utils_decodeBase64(base64) {
      var b64, reminder, t1, t2, exception;
      try {
        b64 = base64;
        reminder = B.JSInt_methods.$mod(J.get$length$asx(b64), 4);
        if (!J.$eq$(reminder, 0) && !J.endsWith$1$s(b64, "=")) {
          t1 = b64;
          t2 = reminder;
          if (typeof t2 !== "number")
            return A.iae(t2);
          b64 = J.$add$ansx(t1, B.JSString_methods.$mul("=", 4 - t2));
        }
        t1 = A.StringUtils_encode(b64, B.StringEncoding_2);
        return t1;
      } catch (exception) {
        t1 = A.TonDartPluginException$("Invalid base64 string.", A.LinkedHashMap_LinkedHashMap$_literal(["value", base64], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
    },
    CryptoUtils_crc32c(source) {
      var t1, crc, n, i, crc0;
      for (t1 = source.length, crc = 4294967295, n = 0; n < t1; ++n) {
        crc ^= source[n];
        for (i = 0; i < 8; ++i) {
          crc0 = crc >>> 1;
          crc = (crc & 1) === 1 ? crc0 ^ 2197175160 : crc0;
        }
      }
      return A.IntUtils_toBytes((crc ^ 4294967295) >>> 0, B.C_Endian0, 4);
    },
    MathUtils_clz32(x) {
      var n;
      if (x === 0)
        return 32;
      if (B.JSInt_methods._shrOtherPositive$1(x, 16) === 0) {
        x = x << 16 >>> 0;
        n = 17;
      } else
        n = 1;
      if (B.JSInt_methods._shrOtherPositive$1(x, 24) === 0) {
        n += 8;
        x = x << 8 >>> 0;
      }
      if (B.JSInt_methods._shrOtherPositive$1(x, 28) === 0) {
        n += 4;
        x = x << 4 >>> 0;
      }
      if (B.JSInt_methods._shrOtherPositive$1(x, 30) === 0) {
        n += 2;
        x = x << 2 >>> 0;
      }
      return n - B.JSInt_methods._shrOtherPositive$1(x, 31);
    },
    JSAptosNetworkInfo_constructor_setup(chainId, $name) {
      var _this = {};
      _this.name = $name;
      _this.chainId = chainId;
      _this.url = null;
      return _this;
    },
    JSAptosPublicKey_constructor_setup(publicKey, publicKeyHex) {
      var _this = {};
      _this.data = type$.Object._as(init.G.Uint8Array.from(A.jsify(publicKey)));
      _this.dataHex = publicKeyHex;
      return _this;
    },
    JSAptosWalletAccount_constructor_setup(address, chain, publicKey, signingScheme) {
      var _this = {};
      _this.address = address;
      _this.publicKey = publicKey;
      _this.signingScheme = signingScheme;
      _this.chains = A._setArrayType([chain], type$.JSArray_String);
      _this.features = $.$get$AptosJSConstant_aptosDefaultAccountFeatures();
      _this.ansName = null;
      return _this;
    },
    JSAptosSwitchChainResponse_constructor_success() {
      var _this = {};
      _this.success = true;
      return _this;
    },
    JSAptosWalletStandardUserResponse_constructor_approved(args, ARGS) {
      var _this = {};
      _this.status = "Approved";
      _this.args = args;
      return _this;
    },
    JSAptosWalletStandardUserResponse_constructor_rejected(ARGS) {
      var _this = {};
      _this.status = "Rejected";
      return _this;
    },
    main() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        backgroundEvent, message, t3, chacha, encryptedMessage, t4, handler, result, wallet, t1, t2;
      var $async$main = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = init.G;
              t2 = type$.JSObject;
              if (A.Web3APPAuthentication_toApplicationId(A._asString(t2._as(t2._as(t1.window).location).origin)) == null)
                throw A.wrapException(B.Web3RequestException_8PI);
              $async$goto = 2;
              return A._asyncAwait(A.JSExtentionWallet_sendBackgroudMessage($.$get$JSWalletConstant_requestAuthEvent(), A._setArrayType([B.WalletEventTarget_0, B.WalletEventTarget_1], type$.JSArray_WalletEventTarget)), $async$main);
            case 2:
              // returning from await.
              backgroundEvent = $async$result;
              message = backgroundEvent.type === B.WalletEventTypes_1 ? {type: "response", status: "failed", data: A.jsify(A.Web3ExceptionMessage_Web3ExceptionMessage$deserialize(backgroundEvent.data, null).toJson$0())} : {type: "response", status: "success", data: A.jsify(backgroundEvent.clientId)};
              if (A.JSWalletResponseType_fromName(A._asString(message.status)) === B.JSWalletResponseType_0) {
                t3 = backgroundEvent.clientId;
                chacha = A.ChaCha20Poly1305$(A.SHA256_hash(A.StringUtils_encode(t3, B.StringEncoding_1)));
                encryptedMessage = A.Web3EncryptedMessage_Web3EncryptedMessage$deserialize(A.List_List$from(backgroundEvent.data, true, type$.int));
                t4 = A.Web3ChainMessage_Web3ChainMessage$deserialize(chacha.decrypt$2(encryptedMessage.nonce, encryptedMessage.message), null).authenticated;
                handler = new A.JSExtentionWallet(new A.SynchronizedLock(), t3, t4, new A.MessageCompleterHandler(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.MessageCompleter)), A.ChaCha20Poly1305$(t4.token));
                t4 = t2._as(t1.window);
                result = "WALLET_" + t3;
                handler.__JSWalletHandler__id_FI = result;
                t4.addEventListener(result, A._functionToJS1(handler.get$_onClientEvent()));
                t2._as(t2._as(A.extension().runtime).onMessage).addListener(A._functionToJS3(handler.get$onMessage()));
                wallet = handler;
              } else
                wallet = null;
              t2._as(t1.window).dispatchEvent(A.CustomEvent_constructor_create(true, A.WalletMessage_constructor_response(B.JSClientType_3G4, message, "0"), "WALLET_ACTIVATION"));
              if (wallet != null)
                wallet.initClients$0();
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$main, $async$completer);
    },
    JSSEthereumWalletAccount_constructor_setup(address, chain, publicKey) {
      var t1, _this = {};
      _this.address = address;
      t1 = publicKey == null ? null : type$.Object._as(init.G.Uint8Array.from(A.jsify(publicKey)));
      _this.publicKey = t1;
      _this.chains = A._setArrayType([chain], type$.JSArray_String);
      _this.features = $.$get$JSEthereumConst_defaultAccountFeatures();
      return _this;
    },
    APPJSUint8Array_toListInt(_this) {
      var t1 = type$.nullable_List_dynamic._as(A.dartify(_this));
      t1 = t1 == null ? null : J.cast$1$0$ax(t1, type$.int);
      return t1 == null ? A._setArrayType([], type$.JSArray_int) : t1;
    },
    JSSolanaWalletAccount_constructor_setup(address, chain, publicKey) {
      var t1, t2, _this = {};
      _this.address = address;
      _this.chains = A._setArrayType([chain], type$.JSArray_String);
      t1 = $.$get$SolanaJSConstant_solanaDefaultAccountFeatures();
      t2 = init.G;
      _this.features = type$.JSArray_nullable_Object._as(t2.Object.freeze(t1));
      _this.publicKey = type$.Object._as(t2.Uint8Array.from(A.jsify(publicKey)));
      return _this;
    },
    JSStellarWalletAccount_constructor_setup(address, chain, publicKey) {
      var t1, t2, _this = {};
      _this.address = address;
      _this.chains = A._setArrayType([chain], type$.JSArray_String);
      t1 = $.$get$StellarJSConst_solanaDefaultAccountFeatures();
      t2 = init.G;
      _this.features = type$.JSArray_nullable_Object._as(t2.Object.freeze(t1));
      _this.publicKey = type$.Object._as(t2.Uint8Array.from(A.jsify(publicKey)));
      return _this;
    },
    JSSuiWalletAccount_constructor_setup(address, chain, publicKey, signingScheme) {
      var _this = {};
      _this.address = address;
      _this.publicKey = type$.Object._as(init.G.Uint8Array.from(A.jsify(publicKey)));
      _this.signingScheme = signingScheme;
      _this.chains = A._setArrayType([chain], type$.JSArray_String);
      _this.features = $.$get$SuiJSConstant_suiDefaultAccountFeatures();
      return _this;
    },
    JSTonWalletAccount_constructor_setup(address, chain, publicKey, walletStateInit) {
      var t1, t2, _this = {};
      _this.address = address;
      _this.chains = A._setArrayType([chain], type$.JSArray_String);
      t1 = $.$get$TonJSConst_defaultAccountFeatures();
      t2 = init.G;
      _this.features = type$.JSArray_nullable_Object._as(t2.Object.freeze(t1));
      t1 = type$.Object;
      _this.publicKey = t1._as(t2.Uint8Array.from(A.jsify(publicKey)));
      _this.walletStateInit = t1._as(t2.Uint8Array.from(A.jsify(walletStateInit)));
      return _this;
    },
    JSSTronWalletAccount_constructor_setup(address, chain, hex, publicKey) {
      var t1, _this = {};
      _this.address = address;
      t1 = publicKey == null ? null : type$.Object._as(init.G.Uint8Array.from(A.jsify(publicKey)));
      _this.publicKey = t1;
      _this.chains = A._setArrayType([chain], type$.JSArray_String);
      _this.features = $.$get$JSTronConst_defaultAccountFeatures();
      _this.hex = hex;
      return _this;
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._instanceTypeFromConstructor(this));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    $or(receiver, other) {
      return other || receiver;
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.bool);
    },
    $isTrustedGetRuntimeType: 1,
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.Null);
    },
    $isTrustedGetRuntimeType: 1,
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {$isJSObject: 1};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return B.Type_JSObject_ttY;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JavaScriptBigInt.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JavaScriptSymbol.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JSArray.prototype = {
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A._arrayInstanceType(receiver)._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, 29);
      receiver.push(value);
    },
    removeAt$1(receiver, index) {
      var t1;
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "removeAt", 1);
      t1 = receiver.length;
      if (index >= t1)
        throw A.wrapException(A.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "insert", 2);
      if (index < 0 || index > receiver.length)
        throw A.wrapException(A.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2(receiver, index, iterable) {
      var insertionLength, end;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "insertAll", 2);
      A.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      if (!type$.EfficientLengthIterable_dynamic._is(iterable))
        iterable = J.toList$0$ax(iterable);
      insertionLength = J.get$length$asx(iterable);
      receiver.length = receiver.length + insertionLength;
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    setAll$2(receiver, index, iterable) {
      var t1, element, index0;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, "setAll");
      A.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0(); index = index0) {
        element = t1.get$current();
        index0 = index + 1;
        if (!(index >= 0 && index < receiver.length))
          return A.ioore(receiver, index);
        receiver[index] = element;
      }
    },
    removeLast$0(receiver) {
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "removeLast", 1);
      if (receiver.length === 0)
        throw A.wrapException(A.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    removeWhere$1(receiver, test) {
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, 16);
      this._removeWhere$2(receiver, test, true);
    },
    _removeWhere$2(receiver, test, removeMatching) {
      var retained, end, i, element, t1;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      retained = [];
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (!test.call$1(element))
          retained.push(element);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      t1 = retained.length;
      if (t1 === end)
        return;
      this.set$length(receiver, t1);
      for (i = 0; i < retained.length; ++i)
        receiver[i] = retained[i];
    },
    addAll$1(receiver, collection) {
      var t1;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "addAll", 2);
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw A.wrapException(A.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    clear$0(receiver) {
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "clear", "clear");
      receiver.length = 0;
    },
    forEach$1(receiver, f) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("~(1)")._as(f);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1(receiver, f, $T) {
      var t1 = A._arrayInstanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    join$0(receiver) {
      return this.join$1(receiver, "");
    },
    take$1(receiver, n) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(n, "count", type$.int), A._arrayInstanceType(receiver)._precomputed1);
    },
    skip$1(receiver, n) {
      return A.SubListIterable$(receiver, n, null, A._arrayInstanceType(receiver)._precomputed1);
    },
    fold$1$2(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      A._arrayInstanceType(receiver)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    firstWhere$2$orElse(receiver, test, orElse) {
      var end, i, element,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("bool(1)")._as(test);
      t1._eval$1("1()?")._as(orElse);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (test.call$1(element))
          return element;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      if (orElse != null)
        return orElse.call$0();
      throw A.wrapException(A.IterableElementError_noElement());
    },
    firstWhere$1(receiver, test) {
      test.toString;
      return this.firstWhere$2$orElse(receiver, test, null);
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, "start", null));
      if (end == null)
        end = receiver.length;
      else if (end < start || end > receiver.length)
        throw A.wrapException(A.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return A._setArrayType([], A._arrayInstanceType(receiver));
      return A._setArrayType(receiver.slice(start, end), A._arrayInstanceType(receiver));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    getRange$2(receiver, start, end) {
      A.RangeError_checkValidRange(start, end, receiver.length);
      return A.SubListIterable$(receiver, start, end, A._arrayInstanceType(receiver)._precomputed1);
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    removeRange$2(receiver, start, end) {
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, 18);
      A.RangeError_checkValidRange(start, end, receiver.length);
      receiver.splice(start, end - start);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, otherStart, t1, i;
      A._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, 5);
      A.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherList = iterable;
        otherStart = skipCount;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    any$1(receiver, test) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (test.call$1(receiver[i]))
          return true;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1(receiver, test) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (!test.call$1(receiver[i]))
          return false;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    get$reversed(receiver) {
      return new A.ReversedListIterable(receiver, A._arrayInstanceType(receiver)._eval$1("ReversedListIterable<1>"));
    },
    sort$1(receiver, compare) {
      var len, a, b, undefineds, i,
        t1 = A._arrayInstanceType(receiver);
      t1._eval$1("int(1,1)?")._as(compare);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, "sort");
      len = receiver.length;
      if (len < 2)
        return;
      if (compare == null)
        compare = J._interceptors_JSArray__compareAny$closure();
      if (len === 2) {
        a = receiver[0];
        b = receiver[1];
        t1 = compare.call$2(a, b);
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 0) {
          receiver[0] = b;
          receiver[1] = a;
        }
        return;
      }
      undefineds = 0;
      if (t1._precomputed1._is(null))
        for (i = 0; i < receiver.length; ++i)
          if (receiver[i] === void 0) {
            receiver[i] = null;
            ++undefineds;
          }
      receiver.sort(A.convertDartClosureToJS(compare, 2));
      if (undefineds > 0)
        this._replaceSomeNullsWithUndefined$1(receiver, undefineds);
    },
    _replaceSomeNullsWithUndefined$1(receiver, count) {
      var i0,
        i = receiver.length;
      for (; i0 = i - 1, i > 0; i = i0)
        if (receiver[i0] === null) {
          receiver[i0] = void 0;
          --count;
          if (count === 0)
            break;
        }
    },
    indexOf$1(receiver, element) {
      var i,
        $length = receiver.length;
      if (0 >= $length)
        return -1;
      for (i = 0; i < $length; ++i) {
        if (!(i < receiver.length))
          return A.ioore(receiver, i);
        if (J.$eq$(receiver[i], element))
          return i;
      }
      return -1;
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable(receiver, growable) {
      var t1 = A._setArrayType(receiver.slice(0), A._arrayInstanceType(receiver));
      return t1;
    },
    toList$0(receiver) {
      return this.toList$1$growable(receiver, true);
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$length(receiver, newLength) {
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, "set length", "change the length of");
      if (newLength < 0)
        throw A.wrapException(A.RangeError$range(newLength, 0, null, "newLength", null));
      if (newLength > receiver.length)
        A._arrayInstanceType(receiver)._precomputed1._as(null);
      receiver.length = newLength;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $add(receiver, other) {
      var t1 = A._arrayInstanceType(receiver);
      t1._eval$1("List<1>")._as(other);
      t1 = A.List_List$_of(receiver, t1._precomputed1);
      this.addAll$1(t1, other);
      return t1;
    },
    indexWhere$1(receiver, test) {
      var i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      if (0 >= receiver.length)
        return -1;
      for (i = 0; i < receiver.length; ++i)
        if (test.call$1(receiver[i]))
          return i;
      return -1;
    },
    set$last(receiver, element) {
      var t1, t2;
      A._arrayInstanceType(receiver)._precomputed1._as(element);
      t1 = receiver.length;
      if (t1 === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      t2 = t1 - 1;
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      if (!(t2 >= 0))
        return A.ioore(receiver, t2);
      receiver[t2] = element;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._arrayInstanceType(receiver));
    },
    $isJSIndexable: 1,
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length) {
        t1 = A.throwConcurrentModificationError(t1);
        throw A.wrapException(t1);
      }
      t2 = _this._index;
      if (t2 >= $length) {
        _this._current = null;
        return false;
      }
      _this._current = t1[t2];
      _this._index = t2 + 1;
      return true;
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      A._asNum(b);
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".round()"));
    },
    clamp$2(receiver, lowerLimit, upperLimit) {
      if (B.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
        throw A.wrapException(A.argumentErrorValue(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toRadixString$1(receiver, radix) {
      var result, t1, t2, match, exponent;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      t1 = result.length;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(result, t2);
      if (result.charCodeAt(t2) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        A.throwExpression(A.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return A.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return A.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + B.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $add(receiver, other) {
      return receiver + other;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    $tdiv(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    $shl(receiver, other) {
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr(receiver, other) {
      var t1;
      if (other < 0)
        throw A.wrapException(A.argumentErrorValue(other));
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
      if (0 > other)
        throw A.wrapException(A.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $gt(receiver, other) {
      return receiver > other;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.num);
    },
    $isComparable: 1,
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$bitLength(receiver) {
      var wordBits,
        t1 = receiver < 0 ? -receiver - 1 : receiver,
        nonneg = t1;
      for (wordBits = 32; nonneg >= 4294967296;) {
        nonneg = this._tdivFast$1(nonneg, 4294967296);
        wordBits += 32;
      }
      return wordBits - Math.clz32(nonneg);
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.int);
    },
    $isTrustedGetRuntimeType: 1,
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.double);
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JSString.prototype = {
    allMatches$2(receiver, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._StringAllMatchesIterable(string, receiver, start);
    },
    allMatches$1(receiver, string) {
      return this.allMatches$2(receiver, string, 0);
    },
    matchAsPrefix$2(receiver, string, start) {
      var t1, t2, i, t3, _null = null;
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, _null, _null));
      t1 = receiver.length;
      t2 = string.length;
      if (start + t1 > t2)
        return _null;
      for (i = 0; i < t1; ++i) {
        t3 = start + i;
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(string, t3);
        if (string.charCodeAt(t3) !== receiver.charCodeAt(i))
          return _null;
      }
      return new A.StringMatch(start, receiver);
    },
    $add(receiver, other) {
      return receiver + other;
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    split$1(receiver, pattern) {
      var t1;
      if (typeof pattern == "string")
        return A._setArrayType(receiver.split(pattern), type$.JSArray_String);
      else {
        if (pattern instanceof A.JSSyntaxRegExp) {
          t1 = pattern._hasCapturesCache;
          t1 = !(t1 == null ? pattern._hasCapturesCache = pattern._computeHasCaptures$0() : t1);
        } else
          t1 = false;
        if (t1)
          return A._setArrayType(receiver.split(pattern._nativeRegExp), type$.JSArray_String);
        else
          return this._defaultSplit$1(receiver, pattern);
      }
    },
    replaceRange$3(receiver, start, end, replacement) {
      var e = A.RangeError_checkValidRange(start, end, receiver.length);
      return A.stringReplaceRangeUnchecked(receiver, start, e, replacement);
    },
    _defaultSplit$1(receiver, pattern) {
      var t1, start, $length, match, matchStart, matchEnd,
        result = A._setArrayType([], type$.JSArray_String);
      for (t1 = J.allMatches$1$s(pattern, receiver), t1 = t1.get$iterator(t1), start = 0, $length = 1; t1.moveNext$0();) {
        match = t1.get$current();
        matchStart = match.get$start();
        matchEnd = match.get$end();
        $length = matchEnd - matchStart;
        if ($length === 0 && start === matchStart)
          continue;
        B.JSArray_methods.add$1(result, this.substring$2(receiver, start, matchStart));
        start = matchEnd;
      }
      if (start < receiver.length || $length > 0)
        B.JSArray_methods.add$1(result, this.substring$1(receiver, start));
      return result;
    },
    startsWith$2(receiver, pattern, index) {
      var endIndex;
      if (index < 0 || index > receiver.length)
        throw A.wrapException(A.RangeError$range(index, 0, receiver.length, null, null));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1(receiver, pattern) {
      return this.startsWith$2(receiver, pattern, 0);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1(receiver, start) {
      return this.substring$2(receiver, start, null);
    },
    trim$0(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (0 >= endIndex)
        return A.ioore(result, 0);
      if (result.charCodeAt(0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      if (!(t1 >= 0))
        return A.ioore(result, t1);
      endIndex0 = result.charCodeAt(t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    trimRight$0(receiver) {
      var t1,
        result = receiver.trimEnd(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      t1 = endIndex - 1;
      if (!(t1 >= 0))
        return A.ioore(result, t1);
      if (result.charCodeAt(t1) !== 133)
        return result;
      return result.substring(0, J.JSString__skipTrailingWhitespace(result, t1));
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    padRight$1(receiver, width) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return receiver + this.$mul(" ", delta);
    },
    indexOf$2(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1(receiver, pattern) {
      return this.indexOf$2(receiver, pattern, 0);
    },
    lastIndexOf$2(receiver, pattern, start) {
      var t1, t2;
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw A.wrapException(A.RangeError$range(start, 0, receiver.length, null, null));
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1(receiver, pattern) {
      return this.lastIndexOf$2(receiver, pattern, null);
    },
    contains$1(receiver, other) {
      return A.stringContainsUnchecked(receiver, other, 0);
    },
    compareTo$1(receiver, other) {
      var t1;
      A._asString(other);
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.String);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isTrustedGetRuntimeType: 1,
    $isComparable: 1,
    $isPattern: 1,
    $isString: 1
  };
  A.CastStream.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("~(2)?")._as(onData);
      t2 = this._source.listen$3$cancelOnError$onDone(null, cancelOnError, type$.nullable_void_Function._as(onDone));
      t1 = new A.CastStreamSubscription(t2, $.Zone__current, t1._eval$1("CastStreamSubscription<1,2>"));
      t2.onData$1(t1.get$__internal$_onData());
      t1.onData$1(onData);
      t1.onError$1(onError);
      return t1;
    },
    listen$2$onDone(onData, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, null);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    }
  };
  A.CastStreamSubscription.prototype = {
    cancel$0() {
      return this._source.cancel$0();
    },
    onData$1(handleData) {
      var t1 = this.$ti;
      t1._eval$1("~(2)?")._as(handleData);
      this._handleData = handleData == null ? null : type$.$env_1_1_dynamic._bind$1(t1._rest[1])._eval$1("1(2)")._as(handleData);
    },
    onError$1(handleError) {
      var _this = this;
      _this._source.onError$1(handleError);
      if (handleError == null)
        _this._handleError = null;
      else if (type$.void_Function_Object_StackTrace._is(handleError))
        _this._handleError = _this.__internal$_zone.registerBinaryCallback$3$1(handleError, type$.dynamic, type$.Object, type$.StackTrace);
      else if (type$.void_Function_Object._is(handleError))
        _this._handleError = type$.dynamic_Function_Object._as(handleError);
      else
        throw A.wrapException(A.ArgumentError$(string$.handle, null));
    },
    __internal$_onData$1(data) {
      var targetData, error, stack, handleError, t2, exception, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(data);
      t2 = _this._handleData;
      if (t2 == null)
        return;
      targetData = null;
      try {
        targetData = t1._rest[1]._as(data);
      } catch (exception) {
        error = A.unwrapException(exception);
        stack = A.getTraceFromException(exception);
        handleError = _this._handleError;
        if (handleError == null)
          A._rootHandleError(type$.Object._as(error), type$.StackTrace._as(stack));
        else {
          t1 = type$.Object;
          t2 = _this.__internal$_zone;
          if (type$.void_Function_Object_StackTrace._is(handleError))
            t2.runBinaryGuarded$2$3(handleError, error, stack, t1, type$.StackTrace);
          else
            t2.runUnaryGuarded$1$2(type$.void_Function_Object._as(handleError), error, t1);
        }
        return;
      }
      _this.__internal$_zone.runUnaryGuarded$1$2(t2, targetData, t1._rest[1]);
    },
    pause$1(resumeSignal) {
      this._source.pause$1(resumeSignal);
    },
    pause$0() {
      return this.pause$1(null);
    },
    resume$0() {
      this._source.resume$0();
    },
    $isStreamSubscription: 1
  };
  A._CastIterableBase.prototype = {
    get$iterator(_) {
      return new A.CastIterator(J.get$iterator$ax(this.get$_source()), A._instanceType(this)._eval$1("CastIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    take$1(_, count) {
      var t1 = A._instanceType(this);
      return A.CastIterable_CastIterable(J.take$1$ax(this.get$_source(), count), t1._precomputed1, t1._rest[1]);
    },
    elementAt$1(_, index) {
      return A._instanceType(this)._rest[1]._as(J.elementAt$1$ax(this.get$_source(), index));
    },
    get$first(_) {
      return A._instanceType(this)._rest[1]._as(J.get$first$ax(this.get$_source()));
    },
    get$last(_) {
      return A._instanceType(this)._rest[1]._as(J.get$last$ax(this.get$_source()));
    },
    contains$1(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    toString$0(_) {
      return J.toString$0$(this.get$_source());
    }
  };
  A.CastIterator.prototype = {
    moveNext$0() {
      return this._source.moveNext$0();
    },
    get$current() {
      return this.$ti._rest[1]._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.CastIterable.prototype = {
    cast$1$0(_, $R) {
      return A.CastIterable_CastIterable(this._source, A._instanceType(this)._precomputed1, $R);
    },
    get$_source() {
      return this._source;
    }
  };
  A._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1};
  A._CastListBase.prototype = {
    $index(_, index) {
      return this.$ti._rest[1]._as(J.$index$asx(this._source, A._asInt(index)));
    },
    $indexSet(_, index, value) {
      var t1 = this.$ti;
      J.$indexSet$ax(this._source, index, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    set$length(_, $length) {
      J.set$length$asx(this._source, $length);
    },
    add$1(_, value) {
      var t1 = this.$ti;
      J.add$1$ax(this._source, t1._precomputed1._as(t1._rest[1]._as(value)));
    },
    sort$1(_, compare) {
      var t1;
      this.$ti._eval$1("int(2,2)?")._as(compare);
      t1 = compare == null ? null : new A._CastListBase_sort_closure(this, compare);
      J.sort$1$ax(this._source, t1);
    },
    removeWhere$1(_, test) {
      J.removeWhere$1$ax(this._source, new A._CastListBase_removeWhere_closure(this, this.$ti._eval$1("bool(2)")._as(test)));
    },
    getRange$2(_, start, end) {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(J.getRange$2$ax(this._source, start, end), t1._precomputed1, t1._rest[1]);
    },
    setRange$4(_, start, end, iterable, skipCount) {
      var t1 = this.$ti;
      J.setRange$4$ax(this._source, start, end, A.CastIterable_CastIterable(t1._eval$1("Iterable<2>")._as(iterable), t1._rest[1], t1._precomputed1), skipCount);
    },
    setRange$3(_, start, end, iterable) {
      return this.setRange$4(0, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isList: 1
  };
  A._CastListBase_sort_closure.prototype = {
    call$2(v1, v2) {
      var t1 = this.$this.$ti,
        t2 = t1._precomputed1;
      t2._as(v1);
      t2._as(v2);
      t1 = t1._rest[1];
      return this.compare.call$2(t1._as(v1), t1._as(v2));
    },
    $signature() {
      return this.$this.$ti._eval$1("int(1,1)");
    }
  };
  A._CastListBase_removeWhere_closure.prototype = {
    call$1(element) {
      var t1 = this.$this.$ti;
      return this.test.call$1(t1._rest[1]._as(t1._precomputed1._as(element)));
    },
    $signature() {
      return this.$this.$ti._eval$1("bool(1)");
    }
  };
  A.CastList.prototype = {
    cast$1$0(_, $R) {
      return new A.CastList(this._source, this.$ti._eval$1("@<1>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    get$_source() {
      return this._source;
    }
  };
  A.CastMap.prototype = {
    cast$2$0(_, RK, RV) {
      return new A.CastMap(this._source, this.$ti._eval$1("@<1,2>")._bind$1(RK)._bind$1(RV)._eval$1("CastMap<1,2,3,4>"));
    },
    containsKey$1(key) {
      return this._source.containsKey$1(key);
    },
    $index(_, key) {
      return this.$ti._eval$1("4?")._as(this._source.$index(0, key));
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      t1._rest[2]._as(key);
      t1._rest[3]._as(value);
      this._source.$indexSet(0, t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    remove$1(_, key) {
      return this.$ti._eval$1("4?")._as(this._source.remove$1(0, key));
    },
    forEach$1(_, f) {
      this._source.forEach$1(0, new A.CastMap_forEach_closure(this, this.$ti._eval$1("~(3,4)")._as(f)));
    },
    get$keys() {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(this._source.get$keys(), t1._precomputed1, t1._rest[2]);
    },
    get$values() {
      var t1 = this.$ti;
      return A.CastIterable_CastIterable(this._source.get$values(), t1._rest[1], t1._rest[3]);
    },
    get$length(_) {
      var t1 = this._source;
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this._source;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._source;
      return t1.get$isNotEmpty(t1);
    },
    get$entries() {
      var t1 = this._source.get$entries();
      return t1.map$1$1(t1, new A.CastMap_entries_closure(this), this.$ti._eval$1("MapEntry<3,4>"));
    },
    removeWhere$1(_, test) {
      this._source.removeWhere$1(0, new A.CastMap_removeWhere_closure(this, this.$ti._eval$1("bool(3,4)")._as(test)));
    }
  };
  A.CastMap_forEach_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      this.f.call$2(t1._rest[2]._as(key), t1._rest[3]._as(value));
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1,2)");
    }
  };
  A.CastMap_entries_closure.prototype = {
    call$1(e) {
      var t1 = this.$this.$ti;
      t1._eval$1("MapEntry<1,2>")._as(e);
      return new A.MapEntry(t1._rest[2]._as(e.key), t1._rest[3]._as(e.value), t1._eval$1("MapEntry<3,4>"));
    },
    $signature() {
      return this.$this.$ti._eval$1("MapEntry<3,4>(MapEntry<1,2>)");
    }
  };
  A.CastMap_removeWhere_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      return this.test.call$2(t1._rest[2]._as(key), t1._rest[3]._as(value));
    },
    $signature() {
      return this.$this.$ti._eval$1("bool(1,2)");
    }
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this._message;
    }
  };
  A.CodeUnits.prototype = {
    get$length(_) {
      return this.__internal$_string.length;
    },
    $index(_, i) {
      var t1;
      A._asInt(i);
      t1 = this.__internal$_string;
      if (!(i >= 0 && i < t1.length))
        return A.ioore(t1, i);
      return t1.charCodeAt(i);
    }
  };
  A.nullFuture_closure.prototype = {
    call$0() {
      var t1 = new A._Future($.Zone__current, type$._Future_void);
      t1._asyncComplete$1(null);
      return t1;
    },
    $signature: 225
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), A._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$first(_) {
      if (this.get$length(this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    get$last(_) {
      var _this = this;
      if (_this.get$length(_this) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return _this.elementAt$1(0, _this.get$length(_this) - 1);
    },
    contains$1(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = A.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    join$0(_) {
      return this.join$1(0, "");
    },
    where$1(_, test) {
      return this.super$Iterable$where(0, A._instanceType(this)._eval$1("bool(ListIterable.E)")._as(test));
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return new A.MappedListIterable(this, t1._bind$1($T)._eval$1("1(ListIterable.E)")._as(toElement), t1._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    reduce$1(_, combine) {
      var $length, value, i, _this = this;
      A._instanceType(_this)._eval$1("ListIterable.E(ListIterable.E,ListIterable.E)")._as(combine);
      $length = _this.get$length(_this);
      if ($length === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      value = _this.elementAt$1(0, 0);
      for (i = 1; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return value;
    },
    skip$1(_, count) {
      return A.SubListIterable$(this, count, null, A._instanceType(this)._eval$1("ListIterable.E"));
    },
    take$1(_, count) {
      return A.SubListIterable$(this, 0, A.checkNotNullable(count, "count", type$.int), A._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$1$growable(_, growable) {
      var t1 = A.List_List$_of(this, A._instanceType(this)._eval$1("ListIterable.E"));
      return t1;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    toSet$0(_) {
      var i, _this = this,
        result = A.LinkedHashSet_LinkedHashSet(A._instanceType(_this)._eval$1("ListIterable.E"));
      for (i = 0; i < _this.get$length(_this); ++i)
        result.add$1(0, _this.elementAt$1(0, i));
      return result;
    }
  };
  A.SubListIterable.prototype = {
    SubListIterable$3(_iterable, _start, _endOrLength, $E) {
      var endOrLength,
        t1 = this._start;
      A.RangeError_checkNotNegative(t1, "start");
      endOrLength = this._endOrLength;
      if (endOrLength != null) {
        A.RangeError_checkNotNegative(endOrLength, "end");
        if (t1 > endOrLength)
          throw A.wrapException(A.RangeError$range(t1, 0, endOrLength, "start", null));
      }
    },
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this._start;
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var _this = this,
        realIndex = _this.get$_startIndex() + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw A.wrapException(A.IndexError$withLength(index, _this.get$length(0), _this, null, "index"));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
      var newStart, endOrLength, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      newStart = _this._start + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new A.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return A.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    take$1(_, count) {
      var endOrLength, t1, newEnd, _this = this;
      A.RangeError_checkNotNegative(count, "count");
      endOrLength = _this._endOrLength;
      t1 = _this._start;
      if (endOrLength == null)
        return A.SubListIterable$(_this.__internal$_iterable, t1, B.JSInt_methods.$add(t1, count), _this.$ti._precomputed1);
      else {
        newEnd = B.JSInt_methods.$add(t1, count);
        if (endOrLength < newEnd)
          return _this;
        return A.SubListIterable$(_this.__internal$_iterable, t1, newEnd, _this.$ti._precomputed1);
      }
    },
    toList$1$growable(_, growable) {
      var $length, result, i, _this = this,
        start = _this._start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      $length = end - start;
      if ($length <= 0) {
        t1 = _this.$ti._precomputed1;
        return growable ? J.JSArray_JSArray$growable(0, t1) : J.JSArray_JSArray$fixed(0, t1);
      }
      result = A.List_List$filled($length, t2.elementAt$1(t1, start), growable, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        B.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.__internal$_current = null;
        return false;
      }
      _this.__internal$_current = t2.elementAt$1(t1, t3);
      ++_this.__internal$_index;
      return true;
    },
    $isIterator: 1
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      return new A.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, A._instanceType(this)._eval$1("MappedIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    get$first(_) {
      return this._f.call$1(J.get$first$ax(this.__internal$_iterable));
    },
    get$last(_) {
      return this._f.call$1(J.get$last$ax(this.__internal$_iterable));
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    }
  };
  A.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.__internal$_current = _this._f.call$1(t1.get$current());
        return true;
      }
      _this.__internal$_current = null;
      return false;
    },
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    $isIterator: 1
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return new A.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    },
    map$1$1(_, toElement, $T) {
      var t1 = this.$ti;
      return new A.MappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(toElement), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (t2.call$1(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.ExpandIterable.prototype = {
    get$iterator(_) {
      return new A.ExpandIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, B.C_EmptyIterator, this.$ti._eval$1("ExpandIterator<1,2>"));
    }
  };
  A.ExpandIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    moveNext$0() {
      var t2, t3, _this = this,
        t1 = _this._currentExpansion;
      if (t1 == null)
        return false;
      for (t2 = _this._iterator, t3 = _this._f; !t1.moveNext$0();) {
        _this.__internal$_current = null;
        if (t2.moveNext$0()) {
          _this._currentExpansion = null;
          t1 = J.get$iterator$ax(t3.call$1(t2.get$current()));
          _this._currentExpansion = t1;
        } else
          return false;
      }
      _this.__internal$_current = _this._currentExpansion.get$current();
      return true;
    },
    $isIterator: 1
  };
  A.TakeIterable.prototype = {
    get$iterator(_) {
      return new A.TakeIterator(J.get$iterator$ax(this.__internal$_iterable), this._takeCount, A._instanceType(this)._eval$1("TakeIterator<1>"));
    }
  };
  A.EfficientLengthTakeIterable.prototype = {
    get$length(_) {
      var iterableLength = J.get$length$asx(this.__internal$_iterable),
        t1 = this._takeCount;
      if (B.JSInt_methods.$gt(iterableLength, t1))
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  A.TakeIterator.prototype = {
    moveNext$0() {
      if (--this._remaining >= 0)
        return this._iterator.moveNext$0();
      this._remaining = -1;
      return false;
    },
    get$current() {
      if (this._remaining < 0) {
        this.$ti._precomputed1._as(null);
        return null;
      }
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.SkipIterable.prototype = {
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.SkipIterable(this.__internal$_iterable, this._skipCount + count, A._instanceType(this)._eval$1("SkipIterable<1>"));
    },
    get$iterator(_) {
      return new A.SkipIterator(J.get$iterator$ax(this.__internal$_iterable), this._skipCount, A._instanceType(this)._eval$1("SkipIterator<1>"));
    }
  };
  A.EfficientLengthSkipIterable.prototype = {
    get$length(_) {
      var $length = J.get$length$asx(this.__internal$_iterable) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1(_, count) {
      A.ArgumentError_checkNotNull(count, "count", type$.int);
      A.RangeError_checkNotNegative(count, "count");
      return new A.EfficientLengthSkipIterable(this.__internal$_iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  A.SkipIterator.prototype = {
    moveNext$0() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.EmptyIterable.prototype = {
    get$iterator(_) {
      return B.C_EmptyIterator;
    },
    get$isEmpty(_) {
      return true;
    },
    get$length(_) {
      return 0;
    },
    get$first(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    get$last(_) {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    elementAt$1(_, index) {
      throw A.wrapException(A.RangeError$range(index, 0, 0, "index", null));
    },
    contains$1(_, element) {
      return false;
    },
    join$1(_, separator) {
      return "";
    },
    where$1(_, test) {
      this.$ti._eval$1("bool(1)")._as(test);
      return this;
    },
    map$1$1(_, toElement, $T) {
      this.$ti._bind$1($T)._eval$1("1(2)")._as(toElement);
      return new A.EmptyIterable($T._eval$1("EmptyIterable<0>"));
    },
    skip$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    },
    take$1(_, count) {
      A.RangeError_checkNotNegative(count, "count");
      return this;
    },
    toList$1$growable(_, growable) {
      var t1 = this.$ti._precomputed1;
      return growable ? J.JSArray_JSArray$growable(0, t1) : J.JSArray_JSArray$fixed(0, t1);
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    }
  };
  A.EmptyIterator.prototype = {
    moveNext$0() {
      return false;
    },
    get$current() {
      throw A.wrapException(A.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  A.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return new A.WhereTypeIterator(J.get$iterator$ax(this._source), this.$ti._eval$1("WhereTypeIterator<1>"));
    }
  };
  A.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0();)
        if (t2._is(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this.$ti._precomputed1._as(this._source.get$current());
    },
    $isIterator: 1
  };
  A.FixedLengthListMixin.prototype = {
    set$length(receiver, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1(receiver, value) {
      A.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    removeWhere$1(receiver, test) {
      A.instanceType(receiver)._eval$1("bool(FixedLengthListMixin.E)")._as(test);
      throw A.wrapException(A.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  };
  A.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length(_, newLength) {
      throw A.wrapException(A.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1(_, value) {
      A._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    removeWhere$1(_, test) {
      A._instanceType(this)._eval$1("bool(UnmodifiableListMixin.E)")._as(test);
      throw A.wrapException(A.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    sort$1(_, compare) {
      A._instanceType(this)._eval$1("int(UnmodifiableListMixin.E,UnmodifiableListMixin.E)?")._as(compare);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$4(_, start, end, iterable, skipCount) {
      A._instanceType(this)._eval$1("Iterable<UnmodifiableListMixin.E>")._as(iterable);
      throw A.wrapException(A.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    setRange$3(_, start, end, iterable) {
      return this.setRange$4(0, start, end, iterable, 0);
    }
  };
  A.UnmodifiableListBase.prototype = {};
  A._ListIndicesIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._backedList);
    },
    elementAt$1(_, index) {
      var t1 = J.get$length$asx(this._backedList);
      if (0 > index || index >= t1)
        A.throwExpression(A.IndexError$withLength(index, t1, this, null, "index"));
      return index;
    }
  };
  A.ListMapView.prototype = {
    $index(_, key) {
      return this.containsKey$1(key) ? J.$index$asx(this._values, A._asInt(key)) : null;
    },
    get$length(_) {
      return J.get$length$asx(this._values);
    },
    get$values() {
      return A.SubListIterable$(this._values, 0, null, this.$ti._precomputed1);
    },
    get$keys() {
      return new A._ListIndicesIterable(this._values);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this._values);
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this._values);
    },
    containsKey$1(key) {
      return A._isInt(key) && key >= 0 && key < J.get$length$asx(this._values);
    },
    forEach$1(_, f) {
      var t1, t2, $length, i;
      this.$ti._eval$1("~(int,1)")._as(f);
      t1 = this._values;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      for (i = 0; i < $length; ++i) {
        f.call$2(i, t2.$index(t1, i));
        if ($length !== t2.get$length(t1))
          throw A.wrapException(A.ConcurrentModificationError$(t1));
      }
    }
  };
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  A.Symbol.prototype = {};
  A.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  A._Record_2.prototype = {$recipe: "+(1,2)", $shape: 1};
  A.ConstantMapView.prototype = {};
  A.ConstantMap.prototype = {
    cast$2$0(_, RK, RV) {
      var t1 = A._instanceType(this);
      return A.Map_castFrom(this, t1._precomputed1, t1._rest[1], RK, RV);
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      A.ConstantMap__throwUnmodifiable();
    },
    remove$1(_, key) {
      A.ConstantMap__throwUnmodifiable();
    },
    get$entries() {
      return new A._SyncStarIterable(this.entries$body$ConstantMap(), A._instanceType(this)._eval$1("_SyncStarIterable<MapEntry<1,2>>"));
    },
    entries$body$ConstantMap() {
      var $async$self = this;
      return function() {
        var $async$goto = 0, $async$handler = 1, $async$errorStack = [], t1, t2, t3, key, t4;
        return function $async$get$entries($async$iterator, $async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$errorStack.push($async$result);
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self.get$keys(), t1 = t1.get$iterator(t1), t2 = A._instanceType($async$self), t3 = t2._rest[1], t2 = t2._eval$1("MapEntry<1,2>");
              case 2:
                // for condition
                if (!t1.moveNext$0()) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                key = t1.get$current();
                t4 = $async$self.$index(0, key);
                $async$goto = 4;
                return $async$iterator._async$_current = new A.MapEntry(key, t4 == null ? t3._as(t4) : t4, t2), 1;
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return 0;
              case 1:
                // rethrow
                return $async$iterator._datum = $async$errorStack.at(-1), 3;
            }
        };
      };
    },
    map$2$1(_, transform, K2, V2) {
      var result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      this.forEach$1(0, new A.ConstantMap_map_closure(this, A._instanceType(this)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), result));
      return result;
    },
    removeWhere$1(_, test) {
      A._instanceType(this)._eval$1("bool(1,2)")._as(test);
      A.ConstantMap__throwUnmodifiable();
    },
    $isMap: 1
  };
  A.ConstantMap_map_closure.prototype = {
    call$2(key, value) {
      var t1 = A._instanceType(this.$this),
        entry = this.transform.call$2(t1._precomputed1._as(key), t1._rest[1]._as(value));
      this.result.$indexSet(0, entry.key, entry.value);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.ConstantStringMap.prototype = {
    get$length(_) {
      return this.__js_helper$_values.length;
    },
    get$_keys() {
      var keys = this.$keys;
      if (keys == null) {
        keys = Object.keys(this._jsIndex);
        this.$keys = keys;
      }
      return keys;
    },
    containsKey$1(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsIndex.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(key))
        return null;
      return this.__js_helper$_values[this._jsIndex[key]];
    },
    forEach$1(_, f) {
      var keys, values, t1, i;
      this.$ti._eval$1("~(1,2)")._as(f);
      keys = this.get$_keys();
      values = this.__js_helper$_values;
      for (t1 = keys.length, i = 0; i < t1; ++i)
        f.call$2(keys[i], values[i]);
    },
    get$keys() {
      return new A._KeysOrValues(this.get$_keys(), this.$ti._eval$1("_KeysOrValues<1>"));
    },
    get$values() {
      return new A._KeysOrValues(this.__js_helper$_values, this.$ti._eval$1("_KeysOrValues<2>"));
    }
  };
  A._KeysOrValues.prototype = {
    get$length(_) {
      return this._elements.length;
    },
    get$isEmpty(_) {
      return 0 === this._elements.length;
    },
    get$isNotEmpty(_) {
      return 0 !== this._elements.length;
    },
    get$iterator(_) {
      var t1 = this._elements;
      return new A._KeysOrValuesOrElementsIterator(t1, t1.length, this.$ti._eval$1("_KeysOrValuesOrElementsIterator<1>"));
    }
  };
  A._KeysOrValuesOrElementsIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        t1 = _this.__js_helper$_index;
      if (t1 >= _this.__js_helper$_length) {
        _this.__js_helper$_current = null;
        return false;
      }
      _this.__js_helper$_current = _this._elements[t1];
      _this.__js_helper$_index = t1 + 1;
      return true;
    },
    $isIterator: 1
  };
  A.GeneralConstantMap.prototype = {
    _getMap$0() {
      var _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        backingMap = new A.JsConstantLinkedHashMap(_this.$ti._eval$1("JsConstantLinkedHashMap<1,2>"));
        A.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    containsKey$1(key) {
      return this._getMap$0().containsKey$1(key);
    },
    $index(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1(_, f) {
      this.$ti._eval$1("~(1,2)")._as(f);
      this._getMap$0().forEach$1(0, f);
    },
    get$keys() {
      var t1 = this._getMap$0();
      return new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>"));
    },
    get$values() {
      var t1 = this._getMap$0();
      return new A.LinkedHashMapValuesIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapValuesIterable<2>"));
    },
    get$length(_) {
      return this._getMap$0().__js_helper$_length;
    }
  };
  A.Instantiation.prototype = {
    Instantiation$1(_genericClosure) {
      if (false)
        A.instantiatedGenericFunctionType(0, 0);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Instantiation1 && this._genericClosure.$eq(0, other._genericClosure) && A.getRuntimeTypeOfClosure(this) === A.getRuntimeTypeOfClosure(other);
    },
    get$hashCode(_) {
      return A.Object_hash(this._genericClosure, A.getRuntimeTypeOfClosure(this), B.C_SentinelValue, B.C_SentinelValue);
    },
    toString$0(_) {
      var t1 = B.JSArray_methods.join$1([A.createRuntimeType(this.$ti._precomputed1)], ", ");
      return this._genericClosure.toString$0(0) + " with " + ("<" + t1 + ">");
    }
  };
  A.Instantiation1.prototype = {
    call$0() {
      return this._genericClosure.call$1$0(this.$ti._rest[0]);
    },
    call$2(a0, a1) {
      return this._genericClosure.call$1$2(a0, a1, this.$ti._rest[0]);
    },
    $signature() {
      return A.instantiatedGenericFunctionType(A.closureFunctionType(this._genericClosure), this.$ti);
    }
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      return "Null check operator used on a null value";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    },
    $isException: 1
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    get$runtimeType(_) {
      var rti = A.closureFunctionType(this);
      return A.createRuntimeType(rti == null ? A.instanceType(this) : rti);
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_length === 0;
    },
    get$isNotEmpty(_) {
      return this.__js_helper$_length !== 0;
    },
    get$keys() {
      return new A.LinkedHashMapKeysIterable(this, A._instanceType(this)._eval$1("LinkedHashMapKeysIterable<1>"));
    },
    get$values() {
      return new A.LinkedHashMapValuesIterable(this, A._instanceType(this)._eval$1("LinkedHashMapValuesIterable<2>"));
    },
    get$entries() {
      return new A.LinkedHashMapEntriesIterable(this, A._instanceType(this)._eval$1("LinkedHashMapEntriesIterable<1,2>"));
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    addAll$1(_, other) {
      A._instanceType(this)._eval$1("Map<1,2>")._as(other).forEach$1(0, new A.JsLinkedHashMap_addAll_closure(this));
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this._strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$2(key, value)];
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string")
        return _this._removeHashTableEntry$2(_this._strings, key);
      else if (typeof key == "number" && (key & 0x3fffffff) === key)
        return _this._removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      hash = _this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        delete rest[hash];
      return cell.hashMapCellValue;
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      A._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3(table, key, value) {
      var cell,
        t1 = A._instanceType(this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2(table, key) {
      var cell;
      if (table == null)
        return null;
      cell = table[key];
      if (cell == null)
        return null;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.hashMapCellValue;
    },
    _modified$0() {
      this._modifications = this._modifications + 1 & 1073741823;
    },
    _newLinkedCell$2(key, value) {
      var _this = this,
        t1 = A._instanceType(_this),
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this.__js_helper$_length;
      _this._modified$0();
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    $isLinkedHashMap: 1
  };
  A.JsLinkedHashMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t1.$indexSet(0, t2._precomputed1._as(key), t2._rest[1]._as(value));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(1,2)");
    }
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeysIterable.prototype = {
    get$length(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this._map;
      return new A.LinkedHashMapKeyIterator(t1, t1._modifications, t1._first, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
    },
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.__js_helper$_current = null;
        return false;
      } else {
        _this.__js_helper$_current = cell.hashMapCellKey;
        _this._cell = cell._next;
        return true;
      }
    },
    $isIterator: 1
  };
  A.LinkedHashMapValuesIterable.prototype = {
    get$length(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this._map;
      return new A.LinkedHashMapValueIterator(t1, t1._modifications, t1._first, this.$ti._eval$1("LinkedHashMapValueIterator<1>"));
    }
  };
  A.LinkedHashMapValueIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.__js_helper$_current = null;
        return false;
      } else {
        _this.__js_helper$_current = cell.hashMapCellValue;
        _this._cell = cell._next;
        return true;
      }
    },
    $isIterator: 1
  };
  A.LinkedHashMapEntriesIterable.prototype = {
    get$length(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this._map;
      return new A.LinkedHashMapEntryIterator(t1, t1._modifications, t1._first, this.$ti._eval$1("LinkedHashMapEntryIterator<1,2>"));
    }
  };
  A.LinkedHashMapEntryIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this._cell;
      if (cell == null) {
        _this.__js_helper$_current = null;
        return false;
      } else {
        _this.__js_helper$_current = new A.MapEntry(cell.hashMapCellKey, cell.hashMapCellValue, _this.$ti._eval$1("MapEntry<1,2>"));
        _this._cell = cell._next;
        return true;
      }
    },
    $isIterator: 1
  };
  A.JsIdentityLinkedHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return A.objectHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i].hashMapCellKey;
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A.JsConstantLinkedHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return A.constantHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    }
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 32
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 268
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 153
  };
  A._Record.prototype = {
    get$runtimeType(_) {
      return A.createRuntimeType(this._getRti$0());
    },
    _getRti$0() {
      return A.evaluateRtiForRecord(this.$recipe, this._getFieldValues$0());
    },
    toString$0(_) {
      return this._toString$1(false);
    },
    _toString$1(safe) {
      var t2, separator, i, key, value,
        keys = this._fieldKeys$0(),
        values = this._getFieldValues$0(),
        t1 = (safe ? "" + "Record " : "") + "(";
      for (t2 = keys.length, separator = "", i = 0; i < t2; ++i, separator = ", ") {
        t1 += separator;
        key = keys[i];
        if (typeof key == "string")
          t1 = t1 + key + ": ";
        if (!(i < values.length))
          return A.ioore(values, i);
        value = values[i];
        t1 = safe ? t1 + A.Primitives_safeToString(value) : t1 + A.S(value);
      }
      t1 += ")";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _fieldKeys$0() {
      var t1,
        shapeTag = this.$shape;
      for (; $._Record__computedFieldKeys.length <= shapeTag;)
        B.JSArray_methods.add$1($._Record__computedFieldKeys, null);
      t1 = $._Record__computedFieldKeys[shapeTag];
      if (t1 == null) {
        t1 = this._computeFieldKeys$0();
        B.JSArray_methods.$indexSet($._Record__computedFieldKeys, shapeTag, t1);
      }
      return t1;
    },
    _computeFieldKeys$0() {
      var i, names, last,
        recipe = this.$recipe,
        position = recipe.indexOf("("),
        joinedNames = recipe.substring(1, position),
        fields = recipe.substring(position),
        arity = fields === "()" ? 0 : fields.replace(/[^,]/g, "").length + 1,
        t1 = type$.Object,
        result = J.JSArray_JSArray$allocateGrowable(arity, t1);
      for (i = 0; i < arity; ++i)
        result[i] = i;
      if (joinedNames !== "") {
        names = joinedNames.split(",");
        i = names.length;
        for (last = arity; i > 0;) {
          --last;
          --i;
          B.JSArray_methods.$indexSet(result, last, names[i]);
        }
      }
      return A.List_List$unmodifiable(result, t1);
    }
  };
  A._Record2.prototype = {
    _getFieldValues$0() {
      return [this._0, this._1];
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._Record2 && this.$shape === other.$shape && J.$eq$(this._0, other._0) && J.$eq$(this._1, other._1);
    },
    get$hashCode(_) {
      return A.Object_hash(this.$shape, this._0, this._1, B.C_SentinelValue);
    }
  };
  A.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, "g");
    },
    get$_nativeAnchoredVersion() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeAnchoredRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, "y");
    },
    _computeHasCaptures$0() {
      var t2,
        t1 = this.pattern;
      if (!B.JSString_methods.contains$1(t1, "("))
        return false;
      t2 = this._nativeRegExp.unicode ? "u" : "";
      return new RegExp("(?:)|" + t1, t2).exec("").length > 1;
    },
    firstMatch$1(string) {
      var m = this._nativeRegExp.exec(string);
      if (m == null)
        return null;
      return new A._MatchImplementation(m);
    },
    allMatches$2(_, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw A.wrapException(A.RangeError$range(start, 0, t1, null, null));
      return new A._AllMatchesIterable(this, string, start);
    },
    allMatches$1(_, string) {
      return this.allMatches$2(0, string, 0);
    },
    _execGlobal$2(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new A._MatchImplementation(match);
    },
    _execAnchored$2(string, start) {
      var match,
        regexp = this.get$_nativeAnchoredVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new A._MatchImplementation(match);
    },
    matchAsPrefix$2(_, string, start) {
      if (start < 0 || start > string.length)
        throw A.wrapException(A.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  A._MatchImplementation.prototype = {
    get$start() {
      return this._match.index;
    },
    get$end() {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    group$1(index) {
      var t1 = this._match;
      if (!(index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $index(_, index) {
      var t1;
      A._asInt(index);
      t1 = this._match;
      if (!(index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  A._AllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._AllMatchesIterator(this._re, this._string, this.__js_helper$_start);
    }
  };
  A._AllMatchesIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? type$.RegExpMatch._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, t3, match, nextIndex, t4, _this = this,
        string = _this._string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end();
          if (match._match.index === nextIndex) {
            t1 = false;
            if (t3._nativeRegExp.unicode) {
              t3 = _this._nextIndex;
              t4 = t3 + 1;
              if (t4 < t2) {
                if (!(t3 >= 0 && t3 < t2))
                  return A.ioore(string, t3);
                t3 = string.charCodeAt(t3);
                if (t3 >= 55296 && t3 <= 56319) {
                  if (!(t4 >= 0))
                    return A.ioore(string, t4);
                  t1 = string.charCodeAt(t4);
                  t1 = t1 >= 56320 && t1 <= 57343;
                }
              }
            }
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1
  };
  A.StringMatch.prototype = {
    get$end() {
      return this.start + this.pattern.length;
    },
    $index(_, g) {
      A._asInt(g);
      if (g !== 0)
        A.throwExpression(A.RangeError$value(g, null));
      return this.pattern;
    },
    group$1(group_) {
      if (group_ !== 0)
        throw A.wrapException(A.RangeError$value(group_, null));
      return this.pattern;
    },
    $isMatch: 1,
    get$start() {
      return this.start;
    }
  };
  A._StringAllMatchesIterable.prototype = {
    get$iterator(_) {
      return new A._StringAllMatchesIterator(this._input, this._pattern, this.__js_helper$_index);
    },
    get$first(_) {
      var t1 = this._pattern,
        index = this._input.indexOf(t1, this.__js_helper$_index);
      if (index >= 0)
        return new A.StringMatch(index, t1);
      throw A.wrapException(A.IterableElementError_noElement());
    }
  };
  A._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new A.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    $isIterator: 1
  };
  A._Cell.prototype = {
    _readField$0() {
      var t1 = this.__late_helper$_value;
      if (t1 === this)
        throw A.wrapException(A.LateError$fieldNI(this.__late_helper$_name));
      return t1;
    }
  };
  A._InitializedCell.prototype = {};
  A.NativeByteBuffer.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteBuffer_rqD;
    },
    asUint8List$2(receiver, offsetInBytes, $length) {
      A._checkViewArguments(receiver, offsetInBytes, $length);
      return $length == null ? new Uint8Array(receiver, offsetInBytes) : new Uint8Array(receiver, offsetInBytes, $length);
    },
    asUint8List$0(receiver) {
      return this.asUint8List$2(receiver, 0, null);
    },
    asUint32List$2(receiver, offsetInBytes, $length) {
      A._checkViewArguments(receiver, offsetInBytes, $length);
      $length = B.JSInt_methods._tdivFast$1(receiver.byteLength - offsetInBytes, 4);
      return new Uint32Array(receiver, offsetInBytes, $length);
    },
    asUint32List$0(receiver) {
      return this.asUint32List$2(receiver, 0, null);
    },
    asByteData$2(receiver, offsetInBytes, $length) {
      A._checkViewArguments(receiver, offsetInBytes, $length);
      return $length == null ? new DataView(receiver, offsetInBytes) : new DataView(receiver, offsetInBytes, $length);
    },
    asByteData$0(receiver) {
      return this.asByteData$2(receiver, 0, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeByteBuffer: 1,
    $isByteBuffer: 1
  };
  A.NativeTypedData.prototype = {
    get$buffer(receiver) {
      if (((receiver.$flags | 0) & 2) !== 0)
        return new A._UnmodifiableNativeByteBufferView(receiver.buffer);
      else
        return receiver.buffer;
    },
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = A.RangeError$range(position, 0, $length, $name, null);
      throw A.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isTypedData: 1
  };
  A._UnmodifiableNativeByteBufferView.prototype = {
    asUint8List$2(_, offsetInBytes, $length) {
      var result = A.NativeUint8List_NativeUint8List$view(this._data, offsetInBytes, $length);
      result.$flags = 3;
      return result;
    },
    asUint8List$0(_) {
      return this.asUint8List$2(0, 0, null);
    },
    asUint32List$0(_) {
      var result = A.NativeUint32List_NativeUint32List$view(this._data, 0, null);
      result.$flags = 3;
      return result;
    },
    asByteData$2(_, offsetInBytes, $length) {
      var result = A.NativeByteData_NativeByteData$view(this._data, offsetInBytes, $length);
      result.$flags = 3;
      return result;
    },
    asByteData$0(_) {
      return this.asByteData$2(0, 0, null);
    },
    $isByteBuffer: 1
  };
  A.NativeByteData.prototype = {
    get$runtimeType(receiver) {
      return B.Type_ByteData_9dB;
    },
    $isTrustedGetRuntimeType: 1,
    $isByteData: 1
  };
  A.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    _setRangeFast$4(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw A.wrapException(A.RangeError$range(start, 0, end, null, null));
      count = end - start;
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw A.wrapException(A.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJSIndexable: 1,
    $isJavaScriptIndexingBehavior: 1
  };
  A.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      A._asDouble(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      type$.Iterable_double._as(iterable);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, 5);
      if (type$.NativeTypedArrayOfDouble._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListBase$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      A._asInt(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      A._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      type$.Iterable_int._as(iterable);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver, 5);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListBase$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.NativeFloat32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float32List_9Kz;
    },
    sublist$2(receiver, start, end) {
      return new Float32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isFloat32List: 1
  };
  A.NativeFloat64List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Float64List_9Kz;
    },
    sublist$2(receiver, start, end) {
      return new Float64Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isFloat64List: 1
  };
  A.NativeInt16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int16List_s5h;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isInt16List: 1
  };
  A.NativeInt32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int32List_O8Z;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isInt32List: 1
  };
  A.NativeInt8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Int8List_rFV;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isInt8List: 1
  };
  A.NativeUint16List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint16List_kmP;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isUint16List: 1
  };
  A.NativeUint32List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint32List_kmP;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isUint32List: 1
  };
  A.NativeUint8ClampedList.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8ClampedList_04U;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8ClampedArray(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isUint8ClampedList: 1
  };
  A.NativeUint8List.prototype = {
    get$runtimeType(receiver) {
      return B.Type_Uint8List_8Eb;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      A._asInt(index);
      A._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, A._checkValidRange(start, end, receiver.length)));
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    $isTrustedGetRuntimeType: 1,
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    }
  };
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(__wc0_formal) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 20
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 471
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 10
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 10
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    },
    cancel$0() {
      if (self.setTimeout != null) {
        var t1 = this._handle;
        if (t1 == null)
          return;
        self.clearTimeout(t1);
        this._handle = null;
      } else
        throw A.wrapException(A.UnsupportedError$("Canceling a timer."));
    },
    $isTimer: 1
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      this.$this._handle = null;
      this.callback.call$0();
    },
    $signature: 1
  };
  A._AsyncAwaitCompleter.prototype = {
    complete$1(value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (value == null)
        value = t1._precomputed1._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(value);
      }
    },
    completeError$2(e, st) {
      var t1;
      if (st == null)
        st = A.AsyncError_defaultStackTrace(e);
      t1 = this._future;
      if (this.isSync)
        t1._completeErrorObject$1(new A.AsyncError(e, st));
      else
        t1._asyncCompleteErrorObject$1(new A.AsyncError(e, st));
    },
    completeError$1(e) {
      return this.completeError$2(e, null);
    },
    get$isCompleted() {
      return (this._future._state & 30) !== 0;
    },
    $isCompleter: 1
  };
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 23
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 527
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(A._asInt(errorCode), result);
    },
    $signature: 520
  };
  A._asyncStarHelper_closure.prototype = {
    call$0() {
      var t3,
        t1 = this.controller,
        t2 = t1.___AsyncStarStreamController_controller_A;
      t2 === $ && A.throwLateFieldNI("controller");
      t3 = t2._state;
      if ((t3 & 1) !== 0 ? (t2.get$_subscription()._state & 4) !== 0 : (t3 & 2) === 0) {
        t1.isSuspended = true;
        return;
      }
      t1 = t1.cancelationFuture != null ? 2 : 0;
      this.bodyFunction.call$2(t1, null);
    },
    $signature: 1
  };
  A._asyncStarHelper_closure0.prototype = {
    call$1(__wc0_formal) {
      var errorCode = this.controller.cancelationFuture != null ? 2 : 0;
      this.bodyFunction.call$2(errorCode, null);
    },
    $signature: 20
  };
  A._AsyncStarStreamController.prototype = {
    _AsyncStarStreamController$1(body, $T) {
      var _this = this,
        t1 = new A._AsyncStarStreamController__resumeBody(body);
      _this.___AsyncStarStreamController_controller_A = _this.$ti._eval$1("StreamController<1>")._as(A.StreamController_StreamController(new A._AsyncStarStreamController_closure(_this, body), new A._AsyncStarStreamController_closure0(t1), null, new A._AsyncStarStreamController_closure1(_this, t1), false, $T));
    }
  };
  A._AsyncStarStreamController__resumeBody.prototype = {
    call$0() {
      A.scheduleMicrotask(new A._AsyncStarStreamController__resumeBody_closure(this.body));
    },
    $signature: 10
  };
  A._AsyncStarStreamController__resumeBody_closure.prototype = {
    call$0() {
      this.body.call$2(0, null);
    },
    $signature: 1
  };
  A._AsyncStarStreamController_closure0.prototype = {
    call$0() {
      this._resumeBody.call$0();
    },
    $signature: 1
  };
  A._AsyncStarStreamController_closure1.prototype = {
    call$0() {
      var t1 = this.$this;
      if (t1.isSuspended) {
        t1.isSuspended = false;
        this._resumeBody.call$0();
      }
    },
    $signature: 1
  };
  A._AsyncStarStreamController_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1.___AsyncStarStreamController_controller_A;
      t2 === $ && A.throwLateFieldNI("controller");
      if ((t2._state & 4) === 0) {
        t1.cancelationFuture = new A._Future($.Zone__current, type$._Future_dynamic);
        if (t1.isSuspended) {
          t1.isSuspended = false;
          A.scheduleMicrotask(new A._AsyncStarStreamController__closure(this.body));
        }
        return t1.cancelationFuture;
      }
    },
    $signature: 505
  };
  A._AsyncStarStreamController__closure.prototype = {
    call$0() {
      this.body.call$2(2, null);
    },
    $signature: 1
  };
  A._IterationMarker.prototype = {
    toString$0(_) {
      return "IterationMarker(" + this.state + ", " + A.S(this.value) + ")";
    }
  };
  A._SyncStarIterator.prototype = {
    get$current() {
      var t1 = this._async$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    _resumeBody$2(errorCode, errorValue) {
      var body, t1, exception;
      errorCode = A._asInt(errorCode);
      errorValue = errorValue;
      body = this._body;
      for (; true;)
        try {
          t1 = body(this, errorCode, errorValue);
          return t1;
        } catch (exception) {
          errorValue = exception;
          errorCode = 1;
        }
    },
    moveNext$0() {
      var nestedIterator, exception, value, suspendedBodies, _this = this, errorValue = null, errorCode = 0;
      for (; true;) {
        nestedIterator = _this._nestedIterator;
        if (nestedIterator != null)
          try {
            if (nestedIterator.moveNext$0()) {
              _this._async$_current = nestedIterator.get$current();
              return true;
            } else
              _this._nestedIterator = null;
          } catch (exception) {
            errorValue = exception;
            errorCode = 1;
            _this._nestedIterator = null;
          }
        value = _this._resumeBody$2(errorCode, errorValue);
        if (1 === value)
          return true;
        if (0 === value) {
          _this._async$_current = null;
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this._body = A._SyncStarIterator__terminatedBody;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._body = suspendedBodies.pop();
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (2 === value) {
          errorCode = 0;
          errorValue = null;
          continue;
        }
        if (3 === value) {
          errorValue = _this._datum;
          _this._datum = null;
          suspendedBodies = _this._suspendedBodies;
          if (suspendedBodies == null || suspendedBodies.length === 0) {
            _this._async$_current = null;
            _this._body = A._SyncStarIterator__terminatedBody;
            throw errorValue;
            return false;
          }
          if (0 >= suspendedBodies.length)
            return A.ioore(suspendedBodies, -1);
          _this._body = suspendedBodies.pop();
          errorCode = 1;
          continue;
        }
        throw A.wrapException(A.StateError$("sync*"));
      }
      return false;
    },
    _yieldStar$1(iterable) {
      var t1, t2, _this = this;
      if (iterable instanceof A._SyncStarIterable) {
        t1 = iterable._outerHelper();
        t2 = _this._suspendedBodies;
        if (t2 == null)
          t2 = _this._suspendedBodies = [];
        B.JSArray_methods.add$1(t2, _this._body);
        _this._body = t1;
        return 2;
      } else {
        _this._nestedIterator = J.get$iterator$ax(iterable);
        return 2;
      }
    },
    $isIterator: 1
  };
  A._SyncStarIterable.prototype = {
    get$iterator(_) {
      return new A._SyncStarIterator(this._outerHelper(), this.$ti._eval$1("_SyncStarIterator<1>"));
    }
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A._BroadcastSubscription.prototype = {
    _onPause$0() {
    },
    _onResume$0() {
    },
    set$_async$_next(_next) {
      this._async$_next = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_next);
    },
    set$_async$_previous(_previous) {
      this._async$_previous = this.$ti._eval$1("_BroadcastSubscription<1>?")._as(_previous);
    }
  };
  A._BroadcastStreamController.prototype = {
    get$isPaused() {
      return false;
    },
    get$_mayAddEvent() {
      return this._state < 4;
    },
    _removeListener$1(subscription) {
      var previous, next;
      A._instanceType(this)._eval$1("_BroadcastSubscription<1>")._as(subscription);
      previous = subscription._async$_previous;
      next = subscription._async$_next;
      if (previous == null)
        this._firstSubscription = next;
      else
        previous.set$_async$_next(next);
      if (next == null)
        this._lastSubscription = previous;
      else
        next.set$_async$_previous(previous);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
    },
    _async$_subscribe$4(onData, onError, onDone, cancelOnError) {
      var t2, t3, t4, t5, t6, t7, subscription, oldLast, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 4) !== 0)
        return A._DoneStreamSubscription$(onDone, t1._precomputed1);
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t4 = onError != null ? 32 : 0;
      t5 = A._BufferingStreamSubscription__registerDataHandler(t2, onData, t1._precomputed1);
      t6 = A._BufferingStreamSubscription__registerErrorHandler(t2, onError);
      t7 = onDone == null ? A.async___nullDoneHandler$closure() : onDone;
      t1 = t1._eval$1("_BroadcastSubscription<1>");
      subscription = new A._BroadcastSubscription(_this, t5, t6, type$.void_Function._as(t7), t2, t3 | t4, t1);
      subscription._async$_previous = subscription;
      subscription._async$_next = subscription;
      t1._as(subscription);
      subscription._eventState = _this._state & 1;
      oldLast = _this._lastSubscription;
      _this._lastSubscription = subscription;
      subscription.set$_async$_next(null);
      subscription.set$_async$_previous(oldLast);
      if (oldLast == null)
        _this._firstSubscription = subscription;
      else
        oldLast.set$_async$_next(subscription);
      if (_this._firstSubscription == _this._lastSubscription)
        A._runGuarded(_this.onListen);
      return subscription;
    },
    _recordCancel$1(sub) {
      var _this = this,
        t1 = A._instanceType(_this);
      sub = t1._eval$1("_BroadcastSubscription<1>")._as(t1._eval$1("StreamSubscription<1>")._as(sub));
      if (sub._async$_next === sub)
        return null;
      t1 = sub._eventState;
      if ((t1 & 2) !== 0)
        sub._eventState = t1 | 4;
      else {
        _this._removeListener$1(sub);
        if ((_this._state & 2) === 0 && _this._firstSubscription == null)
          _this._callOnCancel$0();
      }
      return null;
    },
    _recordPause$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _recordResume$1(subscription) {
      A._instanceType(this)._eval$1("StreamSubscription<1>")._as(subscription);
    },
    _addEventError$0() {
      if ((this._state & 4) !== 0)
        return new A.StateError("Cannot add new events after calling close");
      return new A.StateError("Cannot add new events while doing an addStream");
    },
    add$1(_, data) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(data);
      if (!_this.get$_mayAddEvent())
        throw A.wrapException(_this._addEventError$0());
      _this._sendData$1(data);
    },
    addError$2(error, stackTrace) {
      var _0_0;
      if (!this.get$_mayAddEvent())
        throw A.wrapException(this._addEventError$0());
      _0_0 = A._interceptUserError(error, stackTrace);
      this._sendError$2(_0_0.error, _0_0.stackTrace);
    },
    close$0() {
      var t1, doneFuture, _this = this;
      if ((_this._state & 4) !== 0) {
        t1 = _this._doneFuture;
        t1.toString;
        return t1;
      }
      if (!_this.get$_mayAddEvent())
        throw A.wrapException(_this._addEventError$0());
      _this._state |= 4;
      doneFuture = _this._doneFuture;
      if (doneFuture == null)
        doneFuture = _this._doneFuture = new A._Future($.Zone__current, type$._Future_void);
      _this._sendDone$0();
      return doneFuture;
    },
    _addError$2(error, stackTrace) {
      this._sendError$2(type$.Object._as(error), type$.StackTrace._as(stackTrace));
    },
    _close$0() {
      var t1 = this._addStreamState;
      t1.toString;
      this._addStreamState = null;
      this._state &= 4294967287;
      t1.addStreamFuture._asyncComplete$1(null);
    },
    _callOnCancel$0() {
      if ((this._state & 4) !== 0) {
        var doneFuture = this._doneFuture;
        if ((doneFuture._state & 30) === 0)
          doneFuture._asyncComplete$1(null);
      }
      A._runGuarded(this.onCancel);
    },
    $isEventSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventDispatch: 1
  };
  A._AsyncBroadcastStreamController.prototype = {
    _sendData$1(data) {
      var subscription,
        t1 = this.$ti;
      t1._precomputed1._as(data);
      for (subscription = this._firstSubscription, t1 = t1._eval$1("_DelayedData<1>"); subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(new A._DelayedData(data, t1));
    },
    _sendError$2(error, stackTrace) {
      var subscription;
      for (subscription = this._firstSubscription; subscription != null; subscription = subscription._async$_next)
        subscription._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _sendDone$0() {
      var subscription = this._firstSubscription;
      if (subscription != null)
        for (; subscription != null; subscription = subscription._async$_next)
          subscription._addPending$1(B.C__DelayedDone);
      else
        this._doneFuture._asyncComplete$1(null);
    }
  };
  A.Future_Future$delayed_closure.prototype = {
    call$0() {
      var computationResult, e, s, exception, t2, t3, _this = this,
        t1 = _this.computation;
      if (t1 == null) {
        _this.T._as(null);
        _this.result._complete$1(null);
      } else {
        computationResult = null;
        try {
          computationResult = t1.call$0();
        } catch (exception) {
          e = A.unwrapException(exception);
          s = A.getTraceFromException(exception);
          t1 = e;
          t2 = s;
          t3 = A._interceptError(t1, t2);
          t1 = new A.AsyncError(t1, t2);
          _this.result._completeErrorObject$1(t1);
          return;
        }
        _this.result._complete$1(computationResult);
      }
    },
    $signature: 1
  };
  A.Future_wait_handleError.prototype = {
    call$2(theError, theStackTrace) {
      var t1, t2, _this = this;
      type$.Object._as(theError);
      type$.StackTrace._as(theStackTrace);
      t1 = _this._box_0;
      t2 = --t1.remaining;
      if (t1.values != null) {
        t1.values = null;
        t1.error = theError;
        t1.stackTrace = theStackTrace;
        if (t2 === 0 || _this.eagerError)
          _this._future._completeErrorObject$1(new A.AsyncError(theError, theStackTrace));
      } else if (t2 === 0 && !_this.eagerError) {
        t2 = t1.error;
        t2.toString;
        t1 = t1.stackTrace;
        t1.toString;
        _this._future._completeErrorObject$1(new A.AsyncError(t2, t1));
      }
    },
    $signature: 37
  };
  A.Future_wait_closure.prototype = {
    call$1(value) {
      var remainingResults, valueList, t1, value0, t3, t4, _i, t5, _this = this,
        t2 = _this.T;
      t2._as(value);
      t3 = _this._box_0;
      remainingResults = --t3.remaining;
      valueList = t3.values;
      if (valueList != null) {
        J.$indexSet$ax(valueList, _this.pos, value);
        if (J.$eq$(remainingResults, 0)) {
          t1 = A._setArrayType([], t2._eval$1("JSArray<0>"));
          for (t3 = valueList, t4 = t3.length, _i = 0; _i < t3.length; t3.length === t4 || (0, A.throwConcurrentModificationError)(t3), ++_i) {
            value0 = t3[_i];
            t5 = value0;
            if (t5 == null)
              t5 = t2._as(t5);
            J.add$1$ax(t1, t5);
          }
          _this._future._completeWithValue$1(t1);
        }
      } else if (J.$eq$(remainingResults, 0) && !_this.eagerError) {
        t1 = t3.error;
        t1.toString;
        t3 = t3.stackTrace;
        t3.toString;
        _this._future._completeErrorObject$1(new A.AsyncError(t1, t3));
      }
    },
    $signature() {
      return this.T._eval$1("Null(0)");
    }
  };
  A.TimeoutException.prototype = {
    toString$0(_) {
      var t1 = this.duration.toString$0(0);
      return "TimeoutException after " + t1 + ": " + this.message;
    },
    $isException: 1
  };
  A._Completer.prototype = {
    completeError$2(error, stackTrace) {
      type$.Object._as(error);
      type$.nullable_StackTrace._as(stackTrace);
      if ((this.future._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      this._completeErrorObject$1(A._interceptUserError(error, stackTrace));
    },
    completeError$1(error) {
      return this.completeError$2(error, null);
    },
    get$isCompleted() {
      return (this.future._state & 30) !== 0;
    },
    $isCompleter: 1
  };
  A._AsyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._asyncComplete$1(t1._eval$1("1/")._as(value));
    },
    _completeErrorObject$1(error) {
      this.future._asyncCompleteErrorObject$1(error);
    }
  };
  A._SyncCompleter.prototype = {
    complete$1(value) {
      var t2,
        t1 = this.$ti;
      t1._eval$1("1/?")._as(value);
      t2 = this.future;
      if ((t2._state & 30) !== 0)
        throw A.wrapException(A.StateError$("Future already completed"));
      t2._complete$1(t1._eval$1("1/")._as(value));
    },
    complete$0() {
      return this.complete$1(null);
    },
    _completeErrorObject$1(error) {
      this.future._completeErrorObject$1(error);
    }
  };
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var exception, _this = this,
        errorCallback = _this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = _this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2);
      try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((_this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    then$1$2$onError(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        if (onError != null)
          onError = A._registerErrorHandler(onError, currentZone);
      }
      result = new A._Future(currentZone, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new A._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1(f, $R) {
      f.toString;
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    catchError$2$test(onError, test) {
      var t1, t2, result;
      type$.nullable_bool_Function_Object._as(test);
      t1 = this.$ti;
      t2 = $.Zone__current;
      result = new A._Future(t2, t1);
      if (t2 !== B.C__RootZone) {
        onError = A._registerErrorHandler(onError, t2);
        if (test != null)
          test = type$.bool_Function_Object._as(test);
      }
      t2 = test == null ? 2 : 6;
      this._addListener$1(new A._FutureListener(result, t2, test, onError, t1._eval$1("_FutureListener<1,1>")));
      return result;
    },
    catchError$1(onError) {
      return this.catchError$2$test(onError, null);
    },
    whenComplete$1(action) {
      var t1, result;
      type$.dynamic_Function._as(action);
      t1 = this.$ti;
      result = new A._Future($.Zone__current, t1);
      this._addListener$1(new A._FutureListener(result, 8, action, null, t1._eval$1("_FutureListener<1,1>")));
      return result;
    },
    _setErrorObject$1(error) {
      this._state = this._state & 1 | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._state = source._state & 30 | this._state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__addListener_closure(_this, listener)));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__prependListeners_closure(_box_0, _this)));
      }
    },
    _removeListeners$0() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value))
        A._Future__chainCoreFuture(value, _this, true);
      else {
        listeners = _this._removeListeners$0();
        t1._precomputed1._as(value);
        _this._state = 8;
        _this._resultOrListeners = value;
        A._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeWithResultOf$1(source) {
      var t1, listeners, _this = this;
      if ((source._state & 16) !== 0) {
        t1 = _this._zone === source._zone;
        t1 = !(t1 || t1);
      } else
        t1 = false;
      if (t1)
        return;
      listeners = _this._removeListeners$0();
      _this._cloneResult$1(source);
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeErrorObject$1(error) {
      var listeners = this._removeListeners$0();
      this._setErrorObject$1(error);
      A._Future__propagateToListeners(this, listeners);
    },
    _completeError$2(error, stackTrace) {
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      this._completeErrorObject$1(new A.AsyncError(error, stackTrace));
    },
    _asyncComplete$1(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(value);
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state ^= 2;
      A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__asyncCompleteWithValue_closure(_this, value)));
    },
    _chainFuture$1(value) {
      A._Future__chainCoreFuture(this.$ti._eval$1("Future<1>")._as(value), this, false);
      return;
    },
    _asyncCompleteErrorObject$1(error) {
      this._state ^= 2;
      A._rootScheduleMicrotask(null, null, this._zone, type$.void_Function._as(new A._Future__asyncCompleteErrorObject_closure(this, error)));
    },
    timeout$1(timeLimit) {
      var _future, _this = this, t1 = {};
      if ((_this._state & 24) !== 0) {
        t1 = new A._Future($.Zone__current, _this.$ti);
        t1._asyncComplete$1(_this);
        return t1;
      }
      _future = new A._Future($.Zone__current, _this.$ti);
      t1.timer = null;
      t1.timer = A.Timer_Timer(timeLimit, new A._Future_timeout_closure(_future, timeLimit));
      _this.then$1$2$onError(new A._Future_timeout_closure0(t1, _this, _future), new A._Future_timeout_closure1(t1, _future), type$.Null);
      return _future;
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 1
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 1
  };
  A._Future__chainCoreFuture_closure.prototype = {
    call$0() {
      A._Future__chainCoreFuture(this._box_0.source, this.target, true);
    },
    $signature: 1
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 1
  };
  A._Future__asyncCompleteErrorObject_closure.prototype = {
    call$0() {
      this.$this._completeErrorObject$1(this.error);
    },
    $signature: 1
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, t3, originalSource, joinedResult, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (_this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        } else {
          t1 = e;
          t2 = s;
          if (t2 == null)
            t2 = A.AsyncError_defaultStackTrace(t1);
          t3 = _this._box_0;
          t3.listenerValueOrError = new A.AsyncError(t1, t2);
          t1 = t3;
        }
        t1.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (completeResult instanceof A._Future) {
        originalSource = _this._box_1.source;
        joinedResult = new A._Future(originalSource._zone, originalSource.$ti);
        completeResult.then$1$2$onError(new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(joinedResult, originalSource), new A._Future__propagateToListeners_handleWhenCompleteCallback_closure0(joinedResult), type$.void);
        t1 = _this._box_0;
        t1.listenerValueOrError = joinedResult;
        t1.listenerHasError = false;
      }
    },
    $signature: 1
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(__wc0_formal) {
      this.joinedResult._completeWithResultOf$1(this.originalSource);
    },
    $signature: 20
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure0.prototype = {
    call$2(e, s) {
      type$.Object._as(e);
      type$.StackTrace._as(s);
      this.joinedResult._completeErrorObject$1(new A.AsyncError(e, s));
    },
    $signature: 40
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = e;
        t2 = s;
        if (t2 == null)
          t2 = A.AsyncError_defaultStackTrace(t1);
        t3 = this._box_0;
        t3.listenerValueOrError = new A.AsyncError(t1, t2);
        t3.listenerHasError = true;
      }
    },
    $signature: 1
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, t3, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        if (t1.error === e) {
          t2 = _this._box_0;
          t2.listenerValueOrError = t1;
          t1 = t2;
        } else {
          t1 = e;
          t2 = s;
          if (t2 == null)
            t2 = A.AsyncError_defaultStackTrace(t1);
          t3 = _this._box_0;
          t3.listenerValueOrError = new A.AsyncError(t1, t2);
          t1 = t3;
        }
        t1.listenerHasError = true;
      }
    },
    $signature: 1
  };
  A._Future_timeout_closure.prototype = {
    call$0() {
      var t1 = A.StackTrace_current();
      this._future._completeErrorObject$1(new A.AsyncError(new A.TimeoutException("Future not completed", this.timeLimit), t1));
    },
    $signature: 1
  };
  A._Future_timeout_closure0.prototype = {
    call$1(v) {
      var t1;
      this.$this.$ti._precomputed1._as(v);
      t1 = this._box_0.timer;
      if (t1._handle != null) {
        t1.cancel$0();
        this._future._completeWithValue$1(v);
      }
    },
    $signature() {
      return this.$this.$ti._eval$1("Null(1)");
    }
  };
  A._Future_timeout_closure1.prototype = {
    call$2(e, s) {
      var t1;
      type$.Object._as(e);
      type$.StackTrace._as(s);
      t1 = this._box_0.timer;
      if (t1._handle != null) {
        t1.cancel$0();
        this._future._completeErrorObject$1(new A.AsyncError(e, s));
      }
    },
    $signature: 40
  };
  A._AsyncCallbackEntry.prototype = {};
  A.Stream.prototype = {
    get$length(_) {
      var t1 = {},
        future = new A._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new A.Stream_length_closure(t1, this), true, new A.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    }
  };
  A.Stream_length_closure.prototype = {
    call$1(__wc0_formal) {
      A._instanceType(this.$this)._eval$1("Stream.T")._as(__wc0_formal);
      ++this._box_0.count;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("~(Stream.T)");
    }
  };
  A.Stream_length_closure0.prototype = {
    call$0() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 1
  };
  A.StreamView.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      return this._stream.listen$4$cancelOnError$onDone$onError(A._instanceType(this)._eval$1("~(StreamView.T)?")._as(onData), cancelOnError, type$.nullable_void_Function._as(onDone), onError);
    },
    listen$3$onDone$onError(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    }
  };
  A._StreamController.prototype = {
    get$isPaused() {
      var t1 = this._state;
      return (t1 & 1) !== 0 ? (this.get$_subscription()._state & 4) !== 0 : (t1 & 2) === 0;
    },
    get$_pendingEvents() {
      var t1, _this = this;
      if ((_this._state & 8) === 0)
        return A._instanceType(_this)._eval$1("_PendingEvents<1>?")._as(_this._varData);
      t1 = A._instanceType(_this);
      return t1._eval$1("_PendingEvents<1>?")._as(t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData)._varData);
    },
    _ensurePendingEvents$0() {
      var events, t1, state, _this = this;
      if ((_this._state & 8) === 0) {
        events = _this._varData;
        if (events == null)
          events = _this._varData = new A._PendingEvents(A._instanceType(_this)._eval$1("_PendingEvents<1>"));
        return A._instanceType(_this)._eval$1("_PendingEvents<1>")._as(events);
      }
      t1 = A._instanceType(_this);
      state = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      events = state._varData;
      if (events == null)
        events = state._varData = new A._PendingEvents(t1._eval$1("_PendingEvents<1>"));
      return t1._eval$1("_PendingEvents<1>")._as(events);
    },
    get$_subscription() {
      var varData = this._varData;
      if ((this._state & 8) !== 0)
        varData = type$._StreamControllerAddStreamState_nullable_Object._as(varData)._varData;
      return A._instanceType(this)._eval$1("_ControllerSubscription<1>")._as(varData);
    },
    _badEventState$0() {
      if ((this._state & 4) !== 0)
        return new A.StateError("Cannot add event after closing");
      return new A.StateError("Cannot add event while adding a stream");
    },
    addStream$2$cancelOnError(source, cancelOnError) {
      var t2, t3, t4, t5, t6, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("Stream<1>")._as(source);
      t2 = _this._state;
      if (t2 >= 4)
        throw A.wrapException(_this._badEventState$0());
      if ((t2 & 2) !== 0) {
        t1 = new A._Future($.Zone__current, type$._Future_dynamic);
        t1._asyncComplete$1(null);
        return t1;
      }
      t2 = _this._varData;
      t3 = cancelOnError === true;
      t4 = new A._Future($.Zone__current, type$._Future_dynamic);
      t5 = t1._eval$1("~(1)")._as(_this.get$_async$_add());
      t6 = t3 ? A._AddStreamState_makeErrorHandler(_this) : _this.get$_addError();
      t6 = source.listen$4$cancelOnError$onDone$onError(t5, t3, _this.get$_close(), t6);
      t3 = _this._state;
      if ((t3 & 1) !== 0 ? (_this.get$_subscription()._state & 4) !== 0 : (t3 & 2) === 0)
        t6.pause$0();
      _this._varData = new A._StreamControllerAddStreamState(t2, t4, t6, t1._eval$1("_StreamControllerAddStreamState<1>"));
      _this._state |= 8;
      return t4;
    },
    _ensureDoneFuture$0() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : new A._Future($.Zone__current, type$._Future_void);
      return t1;
    },
    add$1(_, value) {
      var _this = this;
      A._instanceType(_this)._precomputed1._as(value);
      if (_this._state >= 4)
        throw A.wrapException(_this._badEventState$0());
      _this._async$_add$1(value);
    },
    addError$2(error, stackTrace) {
      var _0_0;
      if (this._state >= 4)
        throw A.wrapException(this._badEventState$0());
      _0_0 = A._interceptUserError(error, stackTrace);
      this._addError$2(_0_0.error, _0_0.stackTrace);
    },
    close$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return _this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw A.wrapException(_this._badEventState$0());
      _this._closeUnchecked$0();
      return _this._ensureDoneFuture$0();
    },
    _closeUnchecked$0() {
      var t1 = this._state |= 4;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, B.C__DelayedDone);
    },
    _async$_add$1(value) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(value);
      t2 = _this._state;
      if ((t2 & 1) !== 0)
        _this._sendData$1(value);
      else if ((t2 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new A._DelayedData(value, t1._eval$1("_DelayedData<1>")));
    },
    _addError$2(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new A._DelayedError(error, stackTrace));
    },
    _close$0() {
      var _this = this,
        addState = A._instanceType(_this)._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
      _this._varData = addState._varData;
      _this._state &= 4294967287;
      addState.addStreamFuture._asyncComplete$1(null);
    },
    _async$_subscribe$4(onData, onError, onDone, cancelOnError) {
      var subscription, pendingEvents, addState, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      if ((_this._state & 3) !== 0)
        throw A.wrapException(A.StateError$("Stream has already been listened to."));
      subscription = A._ControllerSubscription$(_this, onData, onError, onDone, cancelOnError, t1._precomputed1);
      pendingEvents = _this.get$_pendingEvents();
      if (((_this._state |= 1) & 8) !== 0) {
        addState = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData);
        addState._varData = subscription;
        addState.addSubscription.resume$0();
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new A._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1(subscription) {
      var result, onCancel, cancelResult, e, s, exception, result0, t2, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      result = null;
      if ((_this._state & 8) !== 0)
        result = t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).cancel$0();
      _this._varData = null;
      _this._state = _this._state & 4294967286 | 2;
      onCancel = _this.onCancel;
      if (onCancel != null)
        if (result == null)
          try {
            cancelResult = onCancel.call$0();
            if (cancelResult instanceof A._Future)
              result = cancelResult;
          } catch (exception) {
            e = A.unwrapException(exception);
            s = A.getTraceFromException(exception);
            result0 = new A._Future($.Zone__current, type$._Future_void);
            t1 = type$.Object._as(e);
            t2 = type$.StackTrace._as(s);
            result0._asyncCompleteErrorObject$1(new A.AsyncError(t1, t2));
            result = result0;
          }
        else
          result = result.whenComplete$1(onCancel);
      t1 = new A._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    _recordPause$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).addSubscription.pause$0();
      A._runGuarded(_this.onPause);
    },
    _recordResume$1(subscription) {
      var _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("StreamSubscription<1>")._as(subscription);
      if ((_this._state & 8) !== 0)
        t1._eval$1("_StreamControllerAddStreamState<1>")._as(_this._varData).addSubscription.resume$0();
      A._runGuarded(_this.onResume);
    },
    set$onCancel(onCancel) {
      this.onCancel = type$.nullable_void_Function._as(onCancel);
    },
    $isEventSink: 1,
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventDispatch: 1
  };
  A._StreamController__subscribe_closure.prototype = {
    call$0() {
      A._runGuarded(this.$this.onListen);
    },
    $signature: 1
  };
  A._StreamController__recordCancel_complete.prototype = {
    call$0() {
      var doneFuture = this.$this._doneFuture;
      if (doneFuture != null && (doneFuture._state & 30) === 0)
        doneFuture._asyncComplete$1(null);
    },
    $signature: 1
  };
  A._SyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      this.$ti._precomputed1._as(data);
      this.get$_subscription()._async$_add$1(data);
    },
    _sendError$2(error, stackTrace) {
      this.get$_subscription()._addError$2(error, stackTrace);
    },
    _sendDone$0() {
      this.get$_subscription()._close$0();
    }
  };
  A._AsyncStreamControllerDispatch.prototype = {
    _sendData$1(data) {
      var t1 = this.$ti;
      t1._precomputed1._as(data);
      this.get$_subscription()._addPending$1(new A._DelayedData(data, t1._eval$1("_DelayedData<1>")));
    },
    _sendError$2(error, stackTrace) {
      this.get$_subscription()._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _sendDone$0() {
      this.get$_subscription()._addPending$1(B.C__DelayedDone);
    }
  };
  A._AsyncStreamController.prototype = {};
  A._SyncStreamController.prototype = {};
  A._ControllerStream.prototype = {
    get$hashCode(_) {
      return (A.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof A._ControllerStream && other._async$_controller === this._async$_controller;
    }
  };
  A._ControllerSubscription.prototype = {
    _onCancel$0() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0() {
      this._async$_controller._recordPause$1(this);
    },
    _onResume$0() {
      this._async$_controller._recordResume$1(this);
    }
  };
  A._StreamSinkWrapper.prototype = {
    add$1(_, data) {
      this._target.add$1(0, this.$ti._precomputed1._as(data));
    },
    addError$2(error, stackTrace) {
      this._target.addError$2(type$.Object._as(error), type$.nullable_StackTrace._as(stackTrace));
    },
    addError$1(error) {
      return this.addError$2(error, null);
    },
    close$0() {
      return this._target.close$0();
    },
    $isEventSink: 1
  };
  A._AddStreamState.prototype = {
    cancel$0() {
      var cancel = this.addSubscription.cancel$0();
      return cancel.whenComplete$1(new A._AddStreamState_cancel_closure(this));
    }
  };
  A._AddStreamState_makeErrorHandler_closure.prototype = {
    call$2(e, s) {
      var t1 = this.controller;
      t1._addError$2(type$.Object._as(e), type$.StackTrace._as(s));
      t1._close$0();
    },
    $signature: 40
  };
  A._AddStreamState_cancel_closure.prototype = {
    call$0() {
      this.$this.addStreamFuture._asyncComplete$1(null);
    },
    $signature: 10
  };
  A._StreamControllerAddStreamState.prototype = {};
  A._BufferingStreamSubscription.prototype = {
    _setPendingEvents$1(pendingEvents) {
      var _this = this;
      A._instanceType(_this)._eval$1("_PendingEvents<1>?")._as(pendingEvents);
      if (pendingEvents == null)
        return;
      _this._pending = pendingEvents;
      if (pendingEvents.lastPendingEvent != null) {
        _this._state = (_this._state | 128) >>> 0;
        pendingEvents.schedule$1(_this);
      }
    },
    onData$1(handleData) {
      var t1 = A._instanceType(this);
      this._onData = A._BufferingStreamSubscription__registerDataHandler(this._zone, t1._eval$1("~(1)?")._as(handleData), t1._precomputed1);
    },
    onError$1(handleError) {
      var _this = this,
        t1 = _this._state;
      if (handleError == null)
        _this._state = (t1 & 4294967263) >>> 0;
      else
        _this._state = (t1 | 32) >>> 0;
      _this._onError = A._BufferingStreamSubscription__registerErrorHandler(_this._zone, handleError);
    },
    pause$1(resumeSignal) {
      var t2, t3, _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t2 = (t1 + 256 | 4) >>> 0;
      _this._state = t2;
      if (t1 < 256) {
        t3 = _this._pending;
        if (t3 != null)
          if (t3._state === 1)
            t3._state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 64) === 0)
        _this._guardCallback$1(_this.get$_onPause());
    },
    pause$0() {
      return this.pause$1(null);
    },
    resume$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 256) {
        t1 = _this._state = t1 - 256;
        if (t1 < 256)
          if ((t1 & 128) !== 0 && _this._pending.lastPendingEvent != null)
            _this._pending.schedule$1(_this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            _this._state = t1;
            if ((t1 & 64) === 0)
              _this._guardCallback$1(_this.get$_onResume());
          }
      }
    },
    cancel$0() {
      var _this = this,
        t1 = (_this._state & 4294967279) >>> 0;
      _this._state = t1;
      if ((t1 & 8) === 0)
        _this._cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    _cancel$0() {
      var t2, _this = this,
        t1 = _this._state = (_this._state | 8) >>> 0;
      if ((t1 & 128) !== 0) {
        t2 = _this._pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 64) === 0)
        _this._pending = null;
      _this._cancelFuture = _this._onCancel$0();
    },
    _async$_add$1(data) {
      var t2, _this = this,
        t1 = A._instanceType(_this);
      t1._precomputed1._as(data);
      t2 = _this._state;
      if ((t2 & 8) !== 0)
        return;
      if (t2 < 64)
        _this._sendData$1(data);
      else
        _this._addPending$1(new A._DelayedData(data, t1._eval$1("_DelayedData<1>")));
    },
    _addError$2(error, stackTrace) {
      var t1;
      if (type$.Error._is(error))
        A.Primitives_trySetStackTrace(error, stackTrace);
      t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 64)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new A._DelayedError(error, stackTrace));
    },
    _close$0() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      _this._state = t1;
      if (t1 < 64)
        _this._sendDone$0();
      else
        _this._addPending$1(B.C__DelayedDone);
    },
    _onPause$0() {
    },
    _onResume$0() {
    },
    _onCancel$0() {
      return null;
    },
    _addPending$1($event) {
      var t1, _this = this,
        pending = _this._pending;
      if (pending == null)
        pending = _this._pending = new A._PendingEvents(A._instanceType(_this)._eval$1("_PendingEvents<1>"));
      pending.add$1(0, $event);
      t1 = _this._state;
      if ((t1 & 128) === 0) {
        t1 = (t1 | 128) >>> 0;
        _this._state = t1;
        if (t1 < 256)
          pending.schedule$1(_this);
      }
    },
    _sendData$1(data) {
      var t2, _this = this,
        t1 = A._instanceType(_this)._precomputed1;
      t1._as(data);
      t2 = _this._state;
      _this._state = (t2 | 64) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._onData, data, t1);
      _this._state = (_this._state & 4294967231) >>> 0;
      _this._checkState$1((t2 & 4) !== 0);
    },
    _sendError$2(error, stackTrace) {
      var cancelFuture, _this = this,
        t1 = _this._state,
        t2 = new A._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        _this._state = (t1 | 16) >>> 0;
        _this._cancel$0();
        cancelFuture = _this._cancelFuture;
        if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
          cancelFuture.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        _this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0() {
      var cancelFuture, _this = this,
        t1 = new A._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._cancel$0();
      _this._state = (_this._state | 16) >>> 0;
      cancelFuture = _this._cancelFuture;
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1(callback) {
      var t1, _this = this;
      type$.void_Function._as(callback);
      t1 = _this._state;
      _this._state = (t1 | 64) >>> 0;
      callback.call$0();
      _this._state = (_this._state & 4294967231) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1(wasInputPaused) {
      var t2, isInputPaused, _this = this,
        t1 = _this._state;
      if ((t1 & 128) !== 0 && _this._pending.lastPendingEvent == null) {
        t1 = _this._state = (t1 & 4294967167) >>> 0;
        t2 = false;
        if ((t1 & 4) !== 0)
          if (t1 < 256) {
            t2 = _this._pending;
            t2 = t2 == null ? null : t2.lastPendingEvent == null;
            t2 = t2 !== false;
          }
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          _this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          _this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        _this._state = (t1 ^ 64) >>> 0;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        t1 = (_this._state & 4294967231) >>> 0;
        _this._state = t1;
      }
      if ((t1 & 128) !== 0 && t1 < 256)
        _this._pending.schedule$1(_this);
    },
    $isStreamSubscription: 1,
    $is_EventDispatch: 1
  };
  A._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0() {
      var onError, t3, t4,
        t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 64) >>> 0;
      onError = t1._onError;
      t2 = this.error;
      t3 = type$.Object;
      t4 = t1._zone;
      if (type$.void_Function_Object_StackTrace._is(onError))
        t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, type$.StackTrace);
      else
        t4.runUnaryGuarded$1$2(type$.void_Function_Object._as(onError), t2, t3);
      t1._state = (t1._state & 4294967231) >>> 0;
    },
    $signature: 1
  };
  A._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 74) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967231) >>> 0;
    },
    $signature: 1
  };
  A._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = A._instanceType(this);
      t1._eval$1("~(1)?")._as(onData);
      type$.nullable_void_Function._as(onDone);
      return this._async$_controller._async$_subscribe$4(t1._eval$1("~(1)?")._as(onData), onError, onDone, cancelOnError === true);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    },
    listen$1(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }
  };
  A._DelayedEvent.prototype = {
    set$next(next) {
      this.next = type$.nullable__DelayedEvent_dynamic._as(next);
    },
    get$next() {
      return this.next;
    }
  };
  A._DelayedData.prototype = {
    perform$1(dispatch) {
      this.$ti._eval$1("_EventDispatch<1>")._as(dispatch)._sendData$1(this.value);
    }
  };
  A._DelayedError.prototype = {
    perform$1(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  };
  A._DelayedDone.prototype = {
    perform$1(dispatch) {
      dispatch._sendDone$0();
    },
    get$next() {
      return null;
    },
    set$next(__wc0_formal) {
      throw A.wrapException(A.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1
  };
  A._PendingEvents.prototype = {
    schedule$1(dispatch) {
      var t1, _this = this;
      _this.$ti._eval$1("_EventDispatch<1>")._as(dispatch);
      t1 = _this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      A.scheduleMicrotask(new A._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    },
    add$1(_, $event) {
      var _this = this,
        lastEvent = _this.lastPendingEvent;
      if (lastEvent == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        lastEvent.set$next($event);
        _this.lastPendingEvent = $event;
      }
    }
  };
  A._PendingEvents_schedule_closure.prototype = {
    call$0() {
      var t2, $event, nextEvent,
        t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t2 = t1.$ti._eval$1("_EventDispatch<1>")._as(this.dispatch);
      $event = t1.firstPendingEvent;
      nextEvent = $event.get$next();
      t1.firstPendingEvent = nextEvent;
      if (nextEvent == null)
        t1.lastPendingEvent = null;
      $event.perform$1(t2);
    },
    $signature: 1
  };
  A._DoneStreamSubscription.prototype = {
    onData$1(handleData) {
      this.$ti._eval$1("~(1)?")._as(handleData);
    },
    onError$1(handleError) {
    },
    pause$1(resumeSignal) {
      var t1 = this._state;
      if (t1 >= 0)
        this._state = t1 + 2;
    },
    pause$0() {
      return this.pause$1(null);
    },
    resume$0() {
      var _this = this,
        resumeState = _this._state - 2;
      if (resumeState < 0)
        return;
      if (resumeState === 0) {
        _this._state = 1;
        A.scheduleMicrotask(_this.get$_onMicrotask());
      } else
        _this._state = resumeState;
    },
    cancel$0() {
      this._state = -1;
      this._onDone = null;
      return $.$get$Future__nullFuture();
    },
    _onMicrotask$0() {
      var _0_0, _this = this,
        unscheduledState = _this._state - 1;
      if (unscheduledState === 0) {
        _this._state = -1;
        _0_0 = _this._onDone;
        if (_0_0 != null) {
          _this._onDone = null;
          _this._zone.runGuarded$1(_0_0);
        }
      } else
        _this._state = unscheduledState;
    },
    $isStreamSubscription: 1
  };
  A._StreamIterator.prototype = {};
  A._EmptyStream.prototype = {
    listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError) {
      var t1 = this.$ti;
      t1._eval$1("~(1)?")._as(onData);
      return A._DoneStreamSubscription$(type$.nullable_void_Function._as(onDone), t1._precomputed1);
    },
    listen$3$cancelOnError$onDone(onData, cancelOnError, onDone) {
      return this.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, null);
    }
  };
  A._Zone.prototype = {$isZone: 1};
  A._rootHandleError_closure.prototype = {
    call$0() {
      A.Error_throwWithStackTrace(this.error, this.stackTrace);
    },
    $signature: 1
  };
  A._RootZone.prototype = {
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        A._rootRunUnary(null, null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runBinaryGuarded$2$3(f, arg1, arg2, T1, T2) {
      var e, s, exception;
      T1._eval$1("@<0>")._bind$1(T2)._eval$1("~(1,2)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        A._rootRunBinary(null, null, this, f, arg1, arg2, type$.void, T1, T2);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    $index(_, key) {
      return null;
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 1
  };
  A._HashMap.prototype = {
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    get$keys() {
      return new A._HashMapKeyIterable(this, this.$ti._eval$1("_HashMapKeyIterable<1>"));
    },
    get$values() {
      var t1 = this.$ti;
      return A.MappedIterable_MappedIterable(new A._HashMapKeyIterable(this, t1._eval$1("_HashMapKeyIterable<1>")), new A._HashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
      var strings, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    $index(_, key) {
      var strings, t1, nums;
      if (typeof key == "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        t1 = strings == null ? null : A._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : A._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1(key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return null;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet(_, key, value) {
      var strings, nums, rest, hash, bucket, index, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string" && key !== "__proto__") {
        strings = _this._collection$_strings;
        _this._collection$_addHashTableEntry$3(strings == null ? _this._collection$_strings = A._HashMap__newHashTable() : strings, key, value);
      } else if (typeof key == "number" && (key & 1073741823) === key) {
        nums = _this._collection$_nums;
        _this._collection$_addHashTableEntry$3(nums == null ? _this._collection$_nums = A._HashMap__newHashTable() : nums, key, value);
      } else {
        rest = _this._collection$_rest;
        if (rest == null)
          rest = _this._collection$_rest = A._HashMap__newHashTable();
        hash = A.objectHashCode(key) & 1073741823;
        bucket = rest[hash];
        if (bucket == null) {
          A._HashMap__setTableEntry(rest, hash, [key, value]);
          ++_this._collection$_length;
          _this._collection$_keys = null;
        } else {
          index = _this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index + 1] = value;
          else {
            bucket.push(key, value);
            ++_this._collection$_length;
            _this._collection$_keys = null;
          }
        }
      }
    },
    remove$1(_, key) {
      var _this = this;
      if (typeof key == "string" && key !== "__proto__")
        return _this._collection$_removeHashTableEntry$2(_this._collection$_strings, key);
      else if (typeof key == "number" && (key & 1073741823) === key)
        return _this._collection$_removeHashTableEntry$2(_this._collection$_nums, key);
      else
        return _this._remove$1(key);
    },
    _remove$1(key) {
      var hash, bucket, index, result, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return null;
      hash = A.objectHashCode(key) & 1073741823;
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      --_this._collection$_length;
      _this._collection$_keys = null;
      result = bucket.splice(index, 2)[1];
      if (0 === bucket.length)
        delete rest[hash];
      return result;
    },
    forEach$1(_, action) {
      var keys, $length, t2, i, key, t3, _this = this,
        t1 = _this.$ti;
      t1._eval$1("~(1,2)")._as(action);
      keys = _this._collection$_computeKeys$0();
      for ($length = keys.length, t2 = t1._precomputed1, t1 = t1._rest[1], i = 0; i < $length; ++i) {
        key = keys[i];
        t2._as(key);
        t3 = _this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
        if (keys !== _this._collection$_keys)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _collection$_computeKeys$0() {
      var strings, index, names, entries, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._collection$_keys;
      if (result != null)
        return result;
      result = A.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._collection$_strings;
      index = 0;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      }
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._collection$_keys = result;
    },
    _collection$_addHashTableEntry$3(table, key, value) {
      var t1 = this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (table[key] == null) {
        ++this._collection$_length;
        this._collection$_keys = null;
      }
      A._HashMap__setTableEntry(table, key, value);
    },
    _collection$_removeHashTableEntry$2(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = this.$ti._rest[1]._as(A._HashMap__getTableEntry(table, key));
        delete table[key];
        --this._collection$_length;
        this._collection$_keys = null;
        return value;
      } else
        return null;
    },
    _getBucket$2(table, key) {
      return table[A.objectHashCode(key) & 1073741823];
    }
  };
  A._HashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this,
        t2 = t1.$ti;
      t1 = t1.$index(0, t2._precomputed1._as(each));
      return t1 == null ? t2._rest[1]._as(t1) : t1;
    },
    $signature() {
      return this.$this.$ti._eval$1("2(1)");
    }
  };
  A._IdentityHashMap.prototype = {
    _findBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  A._HashMapKeyIterable.prototype = {
    get$length(_) {
      return this._collection$_map._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_map._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_map._collection$_length !== 0;
    },
    get$iterator(_) {
      var t1 = this._collection$_map;
      return new A._HashMapKeyIterator(t1, t1._collection$_computeKeys$0(), this.$ti._eval$1("_HashMapKeyIterator<1>"));
    },
    contains$1(_, element) {
      return this._collection$_map.containsKey$1(element);
    }
  };
  A._HashMapKeyIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        keys = _this._collection$_keys,
        offset = _this._collection$_offset,
        t1 = _this._collection$_map;
      if (keys !== t1._collection$_keys)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this._collection$_current = null;
        return false;
      } else {
        _this._collection$_current = keys[offset];
        _this._collection$_offset = offset + 1;
        return true;
      }
    },
    $isIterator: 1
  };
  A._LinkedCustomHashMap.prototype = {
    $index(_, key) {
      if (!this._validKey.call$1(key))
        return null;
      return this.super$JsLinkedHashMap$internalGet(key);
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      this.super$JsLinkedHashMap$internalSet(t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(key) {
      if (!this._validKey.call$1(key))
        return false;
      return this.super$JsLinkedHashMap$internalContainsKey(key);
    },
    remove$1(_, key) {
      if (!this._validKey.call$1(key))
        return null;
      return this.super$JsLinkedHashMap$internalRemove(key);
    },
    internalComputeHashCode$1(key) {
      return this._hashCode.call$1(this.$ti._precomputed1._as(key)) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this.$ti._precomputed1, t2 = this._equals, i = 0; i < $length; ++i)
        if (t2.call$2(t1._as(bucket[i].hashMapCellKey), t1._as(key)))
          return i;
      return -1;
    }
  };
  A._LinkedCustomHashMap_closure.prototype = {
    call$1(v) {
      return this.K._is(v);
    },
    $signature: 346
  };
  A._LinkedHashSet.prototype = {
    get$iterator(_) {
      var _this = this,
        t1 = new A._LinkedHashSetIterator(_this, _this._collection$_modifications, A._instanceType(_this)._eval$1("_LinkedHashSetIterator<1>"));
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    contains$1(_, object) {
      var strings, nums;
      if (typeof object == "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(strings[object]) != null;
      } else if (typeof object == "number" && (object & 1073741823) === object) {
        nums = this._collection$_nums;
        if (nums == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(nums[object]) != null;
      } else
        return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    get$first(_) {
      var first = this._collection$_first;
      if (first == null)
        throw A.wrapException(A.StateError$("No elements"));
      return A._instanceType(this)._precomputed1._as(first._element);
    },
    get$last(_) {
      var last = this._collection$_last;
      if (last == null)
        throw A.wrapException(A.StateError$("No elements"));
      return A._instanceType(this)._precomputed1._as(last._element);
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1(element) {
      var rest, hash, bucket, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1(_, object) {
      var t1;
      if (typeof object == "string" && object !== "__proto__")
        return this._collection$_removeHashTableEntry$2(this._collection$_strings, object);
      else {
        t1 = this._remove$1(object);
        return t1;
      }
    },
    _remove$1(object) {
      var hash, bucket, index, cell, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      hash = _this._computeHashCode$1(object);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      cell = bucket.splice(index, 1)[0];
      if (0 === bucket.length)
        delete rest[hash];
      _this._collection$_unlinkCell$1(cell);
      return true;
    },
    _collection$_addHashTableEntry$2(table, element) {
      A._instanceType(this)._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _collection$_removeHashTableEntry$2(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = type$.nullable__LinkedHashSetCell._as(table[element]);
      if (cell == null)
        return false;
      this._collection$_unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _collection$_modified$0() {
      this._collection$_modifications = this._collection$_modifications + 1 & 1073741823;
    },
    _collection$_newLinkedCell$1(element) {
      var t1, _this = this,
        cell = new A._LinkedHashSetCell(A._instanceType(_this)._precomputed1._as(element));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        t1 = _this._collection$_last;
        t1.toString;
        cell._collection$_previous = t1;
        _this._collection$_last = t1._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._collection$_modified$0();
      return cell;
    },
    _collection$_unlinkCell$1(cell) {
      var _this = this,
        previous = cell._collection$_previous,
        next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --_this._collection$_length;
      _this._collection$_modified$0();
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._collection$_cell,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this._collection$_current = null;
        return false;
      } else {
        _this._collection$_current = _this.$ti._eval$1("1?")._as(cell._element);
        _this._collection$_cell = cell._collection$_next;
        return true;
      }
    },
    $isIterator: 1
  };
  A.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2(k, v) {
      this.result.$indexSet(0, this.K._as(k), this.V._as(v));
    },
    $signature: 344
  };
  A.ListBase.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListBase.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    get$last(receiver) {
      if (this.get$length(receiver) === 0)
        throw A.wrapException(A.IterableElementError_noElement());
      return this.$index(receiver, this.get$length(receiver) - 1);
    },
    contains$1(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    any$1(receiver, test) {
      var $length, i;
      A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (test.call$1(this.$index(receiver, i)))
          return true;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    firstWhere$2$orElse(receiver, test, orElse) {
      var $length, i, element,
        t1 = A.instanceType(receiver);
      t1._eval$1("bool(ListBase.E)")._as(test);
      t1._eval$1("ListBase.E()?")._as(orElse);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        element = this.$index(receiver, i);
        if (test.call$1(element))
          return element;
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return orElse.call$0();
    },
    where$1(receiver, test) {
      var t1 = A.instanceType(receiver);
      return new A.WhereIterable(receiver, t1._eval$1("bool(ListBase.E)")._as(test), t1._eval$1("WhereIterable<ListBase.E>"));
    },
    map$1$1(receiver, f, $T) {
      var t1 = A.instanceType(receiver);
      return new A.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(ListBase.E)")._as(f), t1._eval$1("@<ListBase.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    fold$1$2(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      A.instanceType(receiver)._bind$1($T)._eval$1("1(1,ListBase.E)")._as(combine);
      $length = this.get$length(receiver);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    skip$1(receiver, count) {
      return A.SubListIterable$(receiver, count, null, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    take$1(receiver, count) {
      return A.SubListIterable$(receiver, 0, A.checkNotNullable(count, "count", type$.int), A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    toList$1$growable(receiver, growable) {
      var t1, first, result, i, _this = this;
      if (_this.get$isEmpty(receiver)) {
        t1 = J.JSArray_JSArray$growable(0, A.instanceType(receiver)._eval$1("ListBase.E"));
        return t1;
      }
      first = _this.$index(receiver, 0);
      result = A.List_List$filled(_this.get$length(receiver), first, true, A.instanceType(receiver)._eval$1("ListBase.E"));
      for (i = 1; i < _this.get$length(receiver); ++i)
        B.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
      return result;
    },
    toList$0(receiver) {
      return this.toList$1$growable(receiver, true);
    },
    add$1(receiver, element) {
      var t1;
      A.instanceType(receiver)._eval$1("ListBase.E")._as(element);
      t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    removeWhere$1(receiver, test) {
      this._filter$2(receiver, A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test), false);
    },
    _filter$2(receiver, test, retainMatching) {
      var retained, $length, i, element, _this = this,
        t1 = A.instanceType(receiver);
      t1._eval$1("bool(ListBase.E)")._as(test);
      retained = A._setArrayType([], t1._eval$1("JSArray<ListBase.E>"));
      $length = _this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        element = _this.$index(receiver, i);
        if (J.$eq$(test.call$1(element), false))
          B.JSArray_methods.add$1(retained, element);
        if ($length !== _this.get$length(receiver))
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      if (retained.length !== _this.get$length(receiver)) {
        _this.setRange$3(receiver, 0, retained.length, retained);
        _this.set$length(receiver, retained.length);
      }
    },
    cast$1$0(receiver, $R) {
      return new A.CastList(receiver, A.instanceType(receiver)._eval$1("@<ListBase.E>")._bind$1($R)._eval$1("CastList<1,2>"));
    },
    sort$1(receiver, compare) {
      var t2,
        t1 = A.instanceType(receiver);
      t1._eval$1("int(ListBase.E,ListBase.E)?")._as(compare);
      t2 = compare == null ? A.collection_ListBase__compareAny$closure() : compare;
      A.Sort__doSort(receiver, 0, this.get$length(receiver) - 1, t2, t1._eval$1("ListBase.E"));
    },
    sublist$2(receiver, start, end) {
      var t1,
        listLength = this.get$length(receiver);
      if (end == null)
        end = listLength;
      A.RangeError_checkValidRange(start, end, listLength);
      t1 = A.List_List$_of(this.getRange$2(receiver, start, end), A.instanceType(receiver)._eval$1("ListBase.E"));
      return t1;
    },
    sublist$1(receiver, start) {
      return this.sublist$2(receiver, start, null);
    },
    getRange$2(receiver, start, end) {
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      return A.SubListIterable$(receiver, start, end, A.instanceType(receiver)._eval$1("ListBase.E"));
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, t1, i;
      A.instanceType(receiver)._eval$1("Iterable<ListBase.E>")._as(iterable);
      A.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      A.RangeError_checkNotNegative(skipCount, "skipCount");
      if (type$.List_dynamic._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw A.wrapException(A.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    setRange$3(receiver, start, end, iterable) {
      return this.setRange$4(receiver, start, end, iterable, 0);
    },
    indexWhere$1(receiver, test) {
      var i;
      A.instanceType(receiver)._eval$1("bool(ListBase.E)")._as(test);
      for (i = 0; i < this.get$length(receiver); ++i)
        if (test.call$1(this.$index(receiver, i)))
          return i;
      return -1;
    },
    get$reversed(receiver) {
      return new A.ReversedListIterable(receiver, A.instanceType(receiver)._eval$1("ReversedListIterable<ListBase.E>"));
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.MapBase.prototype = {
    cast$2$0(_, RK, RV) {
      var t1 = A._instanceType(this);
      return A.Map_castFrom(this, t1._eval$1("MapBase.K"), t1._eval$1("MapBase.V"), RK, RV);
    },
    forEach$1(_, action) {
      var t2, key, t3,
        t1 = A._instanceType(this);
      t1._eval$1("~(MapBase.K,MapBase.V)")._as(action);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
      }
    },
    get$entries() {
      var t1 = this.get$keys();
      return t1.map$1$1(t1, new A.MapBase_entries_closure(this), A._instanceType(this)._eval$1("MapEntry<MapBase.K,MapBase.V>"));
    },
    map$2$1(_, transform, K2, V2) {
      var result, t2, key, t3, entry,
        t1 = A._instanceType(this);
      t1._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(MapBase.K,MapBase.V)")._as(transform);
      result = A.LinkedHashMap_LinkedHashMap$_empty(K2, V2);
      for (t2 = this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        entry = transform.call$2(key, t3 == null ? t1._as(t3) : t3);
        result.$indexSet(0, entry.key, entry.value);
      }
      return result;
    },
    addEntries$1(newEntries) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(A._instanceType(this)._eval$1("Iterable<MapEntry<MapBase.K,MapBase.V>>")._as(newEntries)); t1.moveNext$0();) {
        t2 = t1.get$current();
        this.$indexSet(0, t2.key, t2.value);
      }
    },
    removeWhere$1(_, test) {
      var keysToRemove, t2, key, t3, _i, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("bool(MapBase.K,MapBase.V)")._as(test);
      keysToRemove = A._setArrayType([], t1._eval$1("JSArray<MapBase.K>"));
      for (t2 = _this.get$keys(), t2 = t2.get$iterator(t2), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = _this.$index(0, key);
        if (test.call$2(key, t3 == null ? t1._as(t3) : t3))
          B.JSArray_methods.add$1(keysToRemove, key);
      }
      for (t1 = keysToRemove.length, _i = 0; _i < keysToRemove.length; keysToRemove.length === t1 || (0, A.throwConcurrentModificationError)(keysToRemove), ++_i)
        _this.remove$1(0, keysToRemove[_i]);
    },
    containsKey$1(key) {
      var t1 = this.get$keys();
      return t1.contains$1(t1, key);
    },
    get$length(_) {
      var t1 = this.get$keys();
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this.get$keys();
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this.get$keys();
      return t1.get$isNotEmpty(t1);
    },
    get$values() {
      return new A._MapBaseValueIterable(this, A._instanceType(this)._eval$1("_MapBaseValueIterable<MapBase.K,MapBase.V>"));
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.MapBase_entries_closure.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = A._instanceType(t1);
      t2._eval$1("MapBase.K")._as(key);
      t1 = t1.$index(0, key);
      if (t1 == null)
        t1 = t2._eval$1("MapBase.V")._as(t1);
      return new A.MapEntry(key, t1, t2._eval$1("MapEntry<MapBase.K,MapBase.V>"));
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("MapEntry<MapBase.K,MapBase.V>(MapBase.K)");
    }
  };
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = A.S(k);
      t1._contents = (t1._contents += t2) + ": ";
      t2 = A.S(v);
      t1._contents += t2;
    },
    $signature: 104
  };
  A.UnmodifiableMapBase.prototype = {};
  A._MapBaseValueIterable.prototype = {
    get$length(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    },
    get$isEmpty(_) {
      var t1 = this._collection$_map;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._collection$_map;
      return t1.get$isNotEmpty(t1);
    },
    get$first(_) {
      var t1 = this._collection$_map,
        t2 = t1.get$keys();
      t2 = t1.$index(0, t2.get$first(t2));
      return t2 == null ? this.$ti._rest[1]._as(t2) : t2;
    },
    get$last(_) {
      var t1 = this._collection$_map,
        t2 = t1.get$keys();
      t2 = t1.$index(0, t2.get$last(t2));
      return t2 == null ? this.$ti._rest[1]._as(t2) : t2;
    },
    get$iterator(_) {
      var t1 = this._collection$_map,
        t2 = t1.get$keys();
      return new A._MapBaseValueIterator(t2.get$iterator(t2), t1, this.$ti._eval$1("_MapBaseValueIterator<1,2>"));
    }
  };
  A._MapBaseValueIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._collection$_keys;
      if (t1.moveNext$0()) {
        _this._collection$_current = _this._collection$_map.$index(0, t1.get$current());
        return true;
      }
      _this._collection$_current = null;
      return false;
    },
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    $isIterator: 1
  };
  A._UnmodifiableMapMixin.prototype = {
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      t1._eval$1("_UnmodifiableMapMixin.K")._as(key);
      t1._eval$1("_UnmodifiableMapMixin.V")._as(value);
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    remove$1(_, key) {
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    removeWhere$1(_, test) {
      A._instanceType(this)._eval$1("bool(_UnmodifiableMapMixin.K,_UnmodifiableMapMixin.V)")._as(test);
      throw A.wrapException(A.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  A.MapView.prototype = {
    cast$2$0(_, RK, RV) {
      return this._collection$_map.cast$2$0(0, RK, RV);
    },
    $index(_, key) {
      return this._collection$_map.$index(0, key);
    },
    $indexSet(_, key, value) {
      var t1 = A._instanceType(this);
      this._collection$_map.$indexSet(0, t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(key) {
      return this._collection$_map.containsKey$1(key);
    },
    forEach$1(_, action) {
      this._collection$_map.forEach$1(0, A._instanceType(this)._eval$1("~(1,2)")._as(action));
    },
    get$isEmpty(_) {
      var t1 = this._collection$_map;
      return t1.get$isEmpty(t1);
    },
    get$length(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    },
    get$keys() {
      return this._collection$_map.get$keys();
    },
    toString$0(_) {
      return this._collection$_map.toString$0(0);
    },
    get$values() {
      return this._collection$_map.get$values();
    },
    get$entries() {
      return this._collection$_map.get$entries();
    },
    map$2$1(_, transform, K2, V2) {
      return this._collection$_map.map$2$1(0, A._instanceType(this)._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(3,4)")._as(transform), K2, V2);
    },
    $isMap: 1
  };
  A.UnmodifiableMapView.prototype = {
    cast$2$0(_, RK, RV) {
      return new A.UnmodifiableMapView(this._collection$_map.cast$2$0(0, RK, RV), RK._eval$1("@<0>")._bind$1(RV)._eval$1("UnmodifiableMapView<1,2>"));
    }
  };
  A.SetBase.prototype = {
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    map$1$1(_, f, $T) {
      var t1 = A._instanceType(this);
      return new A.EfficientLengthMappedIterable(this, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    every$1(_, f) {
      var t2, element,
        t1 = A._instanceType(this);
      t1._eval$1("bool(1)")._as(f);
      for (t1 = A._LinkedHashSetIterator$(this, this._collection$_modifications, t1._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        element = t1._collection$_current;
        if (!f.call$1(element == null ? t2._as(element) : element))
          return false;
      }
      return true;
    },
    join$1(_, separator) {
      var t1, first, t2, t3,
        iterator = A._LinkedHashSetIterator$(this, this._collection$_modifications, A._instanceType(this)._precomputed1);
      if (!iterator.moveNext$0())
        return "";
      t1 = iterator._collection$_current;
      first = J.toString$0$(t1 == null ? iterator.$ti._precomputed1._as(t1) : t1);
      if (!iterator.moveNext$0())
        return first;
      t1 = iterator.$ti._precomputed1;
      if (separator.length === 0) {
        t2 = first;
        do {
          t3 = iterator._collection$_current;
          t2 += A.S(t3 == null ? t1._as(t3) : t3);
        } while (iterator.moveNext$0());
        t1 = t2;
      } else {
        t2 = first;
        do {
          t3 = iterator._collection$_current;
          t2 = t2 + separator + A.S(t3 == null ? t1._as(t3) : t3);
        } while (iterator.moveNext$0());
        t1 = t2;
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    take$1(_, n) {
      return A.TakeIterable_TakeIterable(this, n, A._instanceType(this)._precomputed1);
    },
    skip$1(_, n) {
      return A.SkipIterable_SkipIterable(this, n, A._instanceType(this)._precomputed1);
    },
    get$first(_) {
      var t1,
        it = A._LinkedHashSetIterator$(this, this._collection$_modifications, A._instanceType(this)._precomputed1);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = it._collection$_current;
      return t1 == null ? it.$ti._precomputed1._as(t1) : t1;
    },
    get$last(_) {
      var t1, result,
        it = A._LinkedHashSetIterator$(this, this._collection$_modifications, A._instanceType(this)._precomputed1);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      t1 = it.$ti._precomputed1;
      do {
        result = it._collection$_current;
        if (result == null)
          result = t1._as(result);
      } while (it.moveNext$0());
      return result;
    },
    elementAt$1(_, index) {
      var iterator, skipCount, t1, _this = this;
      A.RangeError_checkNotNegative(index, "index");
      iterator = A._LinkedHashSetIterator$(_this, _this._collection$_modifications, A._instanceType(_this)._precomputed1);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0) {
          t1 = iterator._collection$_current;
          return t1 == null ? iterator.$ti._precomputed1._as(t1) : t1;
        }
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, _this, null, "index"));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  A._SetBase.prototype = {};
  A._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  A._JsonMap.prototype = {
    $index(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._convert$_data.$index(0, key);
      else if (typeof key != "string")
        return null;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length(_) {
      return this._processed == null ? this._convert$_data.__js_helper$_length : this._computeKeys$0().length;
    },
    get$isEmpty(_) {
      return this.get$length(0) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(0) > 0;
    },
    get$keys() {
      if (this._processed == null) {
        var t1 = this._convert$_data;
        return new A.LinkedHashMapKeysIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapKeysIterable<1>"));
      }
      return new A._JsonMapKeyIterable(this);
    },
    get$values() {
      var t1, _this = this;
      if (_this._processed == null) {
        t1 = _this._convert$_data;
        return new A.LinkedHashMapValuesIterable(t1, A._instanceType(t1)._eval$1("LinkedHashMapValuesIterable<2>"));
      }
      return A.MappedIterable_MappedIterable(_this._computeKeys$0(), new A._JsonMap_values_closure(_this), type$.String, type$.dynamic);
    },
    $indexSet(_, key, value) {
      var processed, original, _this = this;
      A._asString(key);
      if (_this._processed == null)
        _this._convert$_data.$indexSet(0, key, value);
      else if (_this.containsKey$1(key)) {
        processed = _this._processed;
        processed[key] = value;
        original = _this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        _this._upgrade$0().$indexSet(0, key, value);
    },
    containsKey$1(key) {
      if (this._processed == null)
        return this._convert$_data.containsKey$1(key);
      if (typeof key != "string")
        return false;
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    remove$1(_, key) {
      if (this._processed != null && !this.containsKey$1(key))
        return null;
      return this._upgrade$0().remove$1(0, key);
    },
    forEach$1(_, f) {
      var keys, i, key, value, _this = this;
      type$.void_Function_String_dynamic._as(f);
      if (_this._processed == null)
        return _this._convert$_data.forEach$1(0, f);
      keys = _this._computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = A._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._convert$_data)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0() {
      var keys = type$.nullable_List_dynamic._as(this._convert$_data);
      if (keys == null)
        keys = this._convert$_data = A._setArrayType(Object.keys(this._original), type$.JSArray_String);
      return keys;
    },
    _upgrade$0() {
      var result, keys, i, t1, key, _this = this;
      if (_this._processed == null)
        return _this._convert$_data;
      result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      keys = _this._computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, _this.$index(0, key));
      }
      if (t1 === 0)
        B.JSArray_methods.add$1(keys, "");
      else
        B.JSArray_methods.clear$0(keys);
      _this._original = _this._processed = null;
      return _this._convert$_data = result;
    },
    _process$1(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return null;
      result = A._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    }
  };
  A._JsonMap_values_closure.prototype = {
    call$1(each) {
      return this.$this.$index(0, A._asString(each));
    },
    $signature: 153
  };
  A._JsonMapKeyIterable.prototype = {
    get$length(_) {
      return this._parent.get$length(0);
    },
    elementAt$1(_, index) {
      var t1 = this._parent;
      if (t1._processed == null)
        t1 = t1.get$keys().elementAt$1(0, index);
      else {
        t1 = t1._computeKeys$0();
        if (!(index >= 0 && index < t1.length))
          return A.ioore(t1, index);
        t1 = t1[index];
      }
      return t1;
    },
    get$iterator(_) {
      var t1 = this._parent;
      if (t1._processed == null) {
        t1 = t1.get$keys();
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
      }
      return t1;
    },
    contains$1(_, key) {
      return this._parent.containsKey$1(key);
    }
  };
  A._Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 121
  };
  A._Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
      }
      return null;
    },
    $signature: 121
  };
  A.AsciiCodec.prototype = {
    get$name() {
      return "us-ascii";
    },
    encode$1(source) {
      return B.AsciiEncoder_127.convert$1(source);
    },
    decode$2$allowInvalid(bytes, allowInvalid) {
      type$.List_int._as(bytes);
      if (allowInvalid === true)
        return B.AsciiDecoder_true_127.convert$1(bytes);
      else
        return B.AsciiDecoder_false_127.convert$1(bytes);
    }
  };
  A._UnicodeSubsetEncoder.prototype = {
    convert$1(string) {
      var stringLength, end, result, t1, i, codeUnit;
      A._asString(string);
      stringLength = string.length;
      end = A.RangeError_checkValidRange(0, null, stringLength);
      result = new Uint8Array(end);
      for (t1 = ~this._subsetMask, i = 0; i < end; ++i) {
        if (!(i < stringLength))
          return A.ioore(string, i);
        codeUnit = string.charCodeAt(i);
        if ((codeUnit & t1) !== 0)
          throw A.wrapException(A.ArgumentError$value(string, "string", "Contains invalid characters."));
        if (!(i < end))
          return A.ioore(result, i);
        result[i] = codeUnit;
      }
      return result;
    }
  };
  A.AsciiEncoder.prototype = {};
  A._UnicodeSubsetDecoder.prototype = {
    convert$1(bytes) {
      var t1, end, t2, i, byte;
      type$.List_int._as(bytes);
      t1 = J.getInterceptor$asx(bytes);
      end = A.RangeError_checkValidRange(0, null, t1.get$length(bytes));
      for (t2 = ~this._subsetMask, i = 0; i < end; ++i) {
        byte = t1.$index(bytes, i);
        if ((byte & t2) >>> 0 !== 0) {
          if (!this._allowInvalid)
            throw A.wrapException(A.FormatException$("Invalid value in input: " + byte, null, null));
          return this._convertInvalid$3(bytes, 0, end);
        }
      }
      return A.String_String$fromCharCodes(bytes, 0, end);
    },
    _convertInvalid$3(bytes, start, end) {
      var t1, t2, i, t3, value;
      type$.List_int._as(bytes);
      for (t1 = ~this._subsetMask, t2 = J.getInterceptor$asx(bytes), i = start, t3 = ""; i < end; ++i) {
        value = t2.$index(bytes, i);
        t3 += A.Primitives_stringFromCharCode((value & t1) >>> 0 !== 0 ? 65533 : value);
      }
      return t3.charCodeAt(0) == 0 ? t3 : t3;
    }
  };
  A.AsciiDecoder.prototype = {};
  A.Base64Codec.prototype = {
    get$encoder() {
      return this._encoder;
    },
    normalize$3(source, start, end) {
      var inverseAlphabet, t2, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, t3, digit2, char0, value, t4, endLength, $length,
        _s64_ = string$.ABCDEF,
        _s31_ = "Invalid base64 encoding length ",
        t1 = source.length;
      end = A.RangeError_checkValidRange(start, end, t1);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t2 = inverseAlphabet.length, i = start, sliceStart = i, buffer = null, firstPadding = -1, firstPaddingSourceIndex = -1, paddingCount = 0; i < end; i = i0) {
        i0 = i + 1;
        if (!(i < t1))
          return A.ioore(source, i);
        char = source.charCodeAt(i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            if (!(i0 < t1))
              return A.ioore(source, i0);
            digit1 = A.hexDigitValue(source.charCodeAt(i0));
            t3 = i0 + 1;
            if (!(t3 < t1))
              return A.ioore(source, t3);
            digit2 = A.hexDigitValue(source.charCodeAt(t3));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          if (!(char0 >= 0 && char0 < t2))
            return A.ioore(inverseAlphabet, char0);
          value = inverseAlphabet[char0];
          if (value >= 0) {
            if (!(value < 64))
              return A.ioore(_s64_, value);
            char0 = _s64_.charCodeAt(value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t3 = buffer == null ? null : buffer._contents.length;
                if (t3 == null)
                  t3 = 0;
                firstPadding = t3 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null) {
              buffer = new A.StringBuffer("");
              t3 = buffer;
            } else
              t3 = buffer;
            t3._contents += B.JSString_methods.substring$2(source, sliceStart, i);
            t4 = A.Primitives_stringFromCharCode(char);
            t3._contents += t4;
            sliceStart = i0;
            continue;
          }
        }
        throw A.wrapException(A.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = B.JSString_methods.substring$2(source, sliceStart, end);
        t1 = buffer._contents += t1;
        t2 = t1.length;
        if (firstPadding >= 0)
          A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = B.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw A.wrapException(A.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return B.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        A.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = B.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw A.wrapException(A.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = B.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    }
  };
  A.Base64Encoder.prototype = {
    convert$1(input) {
      var t1, t2;
      type$.List_int._as(input);
      t1 = J.getInterceptor$asx(input);
      if (t1.get$isEmpty(input))
        return "";
      t2 = this._urlSafe ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_" : string$.ABCDEF;
      t1 = new A._Base64Encoder(t2).encode$4(input, 0, t1.get$length(input), true);
      t1.toString;
      return A.String_String$fromCharCodes(t1, 0, null);
    }
  };
  A._Base64Encoder.prototype = {
    encode$4(bytes, start, end, isLast) {
      var t1, byteCount, fullChunks, bufferLength, output;
      type$.List_int._as(bytes);
      t1 = this._convert$_state;
      byteCount = (t1 & 3) + (end - start);
      fullChunks = B.JSInt_methods._tdivFast$1(byteCount, 3);
      bufferLength = fullChunks * 4;
      if (byteCount - fullChunks * 3 > 0)
        bufferLength += 4;
      output = new Uint8Array(bufferLength);
      this._convert$_state = A._Base64Encoder_encodeChunk(this._alphabet, bytes, start, end, true, output, 0, t1);
      if (bufferLength > 0)
        return output;
      return null;
    }
  };
  A.Base64Decoder.prototype = {
    convert$1(input) {
      var end, decoder, t1, t2;
      A._asString(input);
      end = A.RangeError_checkValidRange(0, null, input.length);
      if (0 === end)
        return new Uint8Array(0);
      decoder = new A._Base64Decoder();
      t1 = decoder.decode$3(input, 0, end);
      t1.toString;
      t2 = decoder._convert$_state;
      if (t2 < -1)
        A.throwExpression(A.FormatException$("Missing padding character", input, end));
      if (t2 > 0)
        A.throwExpression(A.FormatException$("Invalid length, must be multiple of four", input, end));
      decoder._convert$_state = -1;
      return t1;
    }
  };
  A._Base64Decoder.prototype = {
    decode$3(input, start, end) {
      var buffer, _this = this,
        t1 = _this._convert$_state;
      if (t1 < 0) {
        _this._convert$_state = A._Base64Decoder__checkPadding(input, start, end, t1);
        return null;
      }
      if (start === end)
        return new Uint8Array(0);
      buffer = A._Base64Decoder__allocateBuffer(input, start, end, t1);
      _this._convert$_state = A._Base64Decoder_decodeChunk(input, start, end, buffer, 0, _this._convert$_state);
      return buffer;
    }
  };
  A.ByteConversionSink.prototype = {};
  A._ByteCallbackSink.prototype = {
    add$1(_, chunk) {
      var t1, t2, t3, v, grown, _this = this;
      type$.Iterable_int._as(chunk);
      t1 = _this._convert$_buffer;
      t2 = _this._bufferIndex;
      t3 = J.getInterceptor$asx(chunk);
      if (t3.get$length(chunk) > t1.length - t2) {
        t1 = _this._convert$_buffer;
        v = t3.get$length(chunk) + t1.length - 1;
        v |= B.JSInt_methods._shrOtherPositive$1(v, 1);
        v |= v >>> 2;
        v |= v >>> 4;
        v |= v >>> 8;
        grown = new Uint8Array((((v | v >>> 16) >>> 0) + 1) * 2);
        t1 = _this._convert$_buffer;
        B.NativeUint8List_methods.setRange$3(grown, 0, t1.length, t1);
        _this._convert$_buffer = grown;
      }
      t1 = _this._convert$_buffer;
      t2 = _this._bufferIndex;
      B.NativeUint8List_methods.setRange$3(t1, t2, t2 + t3.get$length(chunk), chunk);
      _this._bufferIndex = _this._bufferIndex + t3.get$length(chunk);
    },
    close$0() {
      this._callback.call$1(B.NativeUint8List_methods.sublist$2(this._convert$_buffer, 0, this._bufferIndex));
    }
  };
  A.Codec.prototype = {};
  A.Converter.prototype = {};
  A.Encoding.prototype = {};
  A.JsonUnsupportedObjectError.prototype = {
    toString$0(_) {
      var safeString = A.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  A.JsonCyclicError.prototype = {
    toString$0(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  A.JsonCodec.prototype = {
    decode$2$reviver(source, reviver) {
      var t1 = A._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    encode$2$toEncodable(value, toEncodable) {
      var t1;
      type$.nullable_nullable_Object_Function_dynamic._as(toEncodable);
      if (toEncodable == null)
        toEncodable = null;
      if (toEncodable == null) {
        t1 = this.get$encoder();
        return A._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
      }
      return A._JsonStringStringifier_stringify(value, toEncodable, null);
    },
    get$encoder() {
      return B.JsonEncoder_null_null;
    },
    get$decoder() {
      return B.JsonDecoder_null;
    }
  };
  A.JsonEncoder.prototype = {};
  A.JsonDecoder.prototype = {};
  A._JsonStringifier.prototype = {
    writeStringContent$1(s) {
      var t1, offset, i, charCode, t2, t3,
        $length = s.length;
      for (t1 = this._sink, offset = 0, i = 0; i < $length; ++i) {
        charCode = s.charCodeAt(i);
        if (charCode > 92) {
          if (charCode >= 55296) {
            t2 = charCode & 64512;
            if (t2 === 55296) {
              t3 = i + 1;
              t3 = !(t3 < $length && (s.charCodeAt(t3) & 64512) === 56320);
            } else
              t3 = false;
            if (!t3)
              if (t2 === 56320) {
                t2 = i - 1;
                t2 = !(t2 >= 0 && (s.charCodeAt(t2) & 64512) === 55296);
              } else
                t2 = false;
            else
              t2 = true;
            if (t2) {
              if (i > offset)
                t1._contents += B.JSString_methods.substring$2(s, offset, i);
              offset = i + 1;
              t2 = A.Primitives_stringFromCharCode(92);
              t1._contents += t2;
              t2 = A.Primitives_stringFromCharCode(117);
              t1._contents += t2;
              t2 = A.Primitives_stringFromCharCode(100);
              t1._contents += t2;
              t2 = charCode >>> 8 & 15;
              t2 = A.Primitives_stringFromCharCode(t2 < 10 ? 48 + t2 : 87 + t2);
              t1._contents += t2;
              t2 = charCode >>> 4 & 15;
              t2 = A.Primitives_stringFromCharCode(t2 < 10 ? 48 + t2 : 87 + t2);
              t1._contents += t2;
              t2 = charCode & 15;
              t2 = A.Primitives_stringFromCharCode(t2 < 10 ? 48 + t2 : 87 + t2);
              t1._contents += t2;
            }
          }
          continue;
        }
        if (charCode < 32) {
          if (i > offset)
            t1._contents += B.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2 = A.Primitives_stringFromCharCode(92);
          t1._contents += t2;
          switch (charCode) {
            case 8:
              t2 = A.Primitives_stringFromCharCode(98);
              t1._contents += t2;
              break;
            case 9:
              t2 = A.Primitives_stringFromCharCode(116);
              t1._contents += t2;
              break;
            case 10:
              t2 = A.Primitives_stringFromCharCode(110);
              t1._contents += t2;
              break;
            case 12:
              t2 = A.Primitives_stringFromCharCode(102);
              t1._contents += t2;
              break;
            case 13:
              t2 = A.Primitives_stringFromCharCode(114);
              t1._contents += t2;
              break;
            default:
              t2 = A.Primitives_stringFromCharCode(117);
              t1._contents += t2;
              t2 = A.Primitives_stringFromCharCode(48);
              t1._contents += t2;
              t2 = A.Primitives_stringFromCharCode(48);
              t1._contents += t2;
              t2 = charCode >>> 4 & 15;
              t2 = A.Primitives_stringFromCharCode(t2 < 10 ? 48 + t2 : 87 + t2);
              t1._contents += t2;
              t2 = charCode & 15;
              t2 = A.Primitives_stringFromCharCode(t2 < 10 ? 48 + t2 : 87 + t2);
              t1._contents += t2;
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            t1._contents += B.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2 = A.Primitives_stringFromCharCode(92);
          t1._contents += t2;
          t2 = A.Primitives_stringFromCharCode(charCode);
          t1._contents += t2;
        }
      }
      if (offset === 0)
        t1._contents += s;
      else if (offset < $length)
        t1._contents += B.JSString_methods.substring$2(s, offset, $length);
    },
    _checkCycle$1(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw A.wrapException(new A.JsonCyclicError(object, null));
      }
      B.JSArray_methods.add$1(t1, object);
    },
    writeObject$1(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = A.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw A.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = A.unwrapException(exception);
        t1 = A.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw A.wrapException(t1);
      }
    },
    writeJsonValue$1(object) {
      var t1, t2, success, _this = this;
      if (typeof object == "number") {
        if (!isFinite(object))
          return false;
        t1 = _this._sink;
        t2 = B.JSNumber_methods.toString$0(object);
        t1._contents += t2;
        return true;
      } else if (object === true) {
        _this._sink._contents += "true";
        return true;
      } else if (object === false) {
        _this._sink._contents += "false";
        return true;
      } else if (object == null) {
        _this._sink._contents += "null";
        return true;
      } else if (typeof object == "string") {
        t1 = _this._sink;
        t1._contents += '"';
        _this.writeStringContent$1(object);
        t1._contents += '"';
        return true;
      } else if (type$.List_dynamic._is(object)) {
        _this._checkCycle$1(object);
        _this.writeList$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return true;
      } else if (type$.Map_dynamic_dynamic._is(object)) {
        _this._checkCycle$1(object);
        success = _this.writeMap$1(object);
        t1 = _this._seen;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        return success;
      } else
        return false;
    },
    writeList$1(list) {
      var t2, i,
        t1 = this._sink;
      t1._contents += "[";
      t2 = J.getInterceptor$asx(list);
      if (t2.get$isNotEmpty(list)) {
        this.writeObject$1(t2.$index(list, 0));
        for (i = 1; i < t2.get$length(list); ++i) {
          t1._contents += ",";
          this.writeObject$1(t2.$index(list, i));
        }
      }
      t1._contents += "]";
    },
    writeMap$1(map) {
      var t1, keyValueList, i, t2, separator, t3, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this._sink._contents += "{}";
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = A.List_List$filled(t1, null, false, type$.nullable_Object);
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new A._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      t2 = _this._sink;
      t2._contents += "{";
      for (separator = '"'; i < t1; i += 2, separator = ',"') {
        t2._contents += separator;
        _this.writeStringContent$1(A._asString(keyValueList[i]));
        t2._contents += '":';
        t3 = i + 1;
        if (!(t3 < t1))
          return A.ioore(keyValueList, t3);
        _this.writeObject$1(keyValueList[t3]);
      }
      t2._contents += "}";
      return true;
    }
  };
  A._JsonStringifier_writeMap_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      if (typeof key != "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      B.JSArray_methods.$indexSet(t1, t2.i++, key);
      B.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 104
  };
  A._JsonStringStringifier.prototype = {
    get$_partialResult() {
      var t1 = this._sink._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.Latin1Codec.prototype = {
    get$name() {
      return "iso-8859-1";
    },
    encode$1(source) {
      return B.Latin1Encoder_255.convert$1(source);
    }
  };
  A.Latin1Encoder.prototype = {};
  A.Utf8Codec.prototype = {
    get$name() {
      return "utf-8";
    },
    decode$2$allowMalformed(codeUnits, allowMalformed) {
      type$.List_int._as(codeUnits);
      return (allowMalformed === true ? B.Utf8Decoder_true : B.Utf8Decoder_false).convert$1(codeUnits);
    },
    decode$1(codeUnits) {
      return this.decode$2$allowMalformed(codeUnits, null);
    },
    encode$1(string) {
      return B.C_Utf8Encoder.convert$1(string);
    }
  };
  A.Utf8Encoder.prototype = {
    convert$1(string) {
      var stringLength, end, t1, encoder, t2;
      A._asString(string);
      stringLength = string.length;
      end = A.RangeError_checkValidRange(0, null, stringLength);
      if (end === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array(end * 3);
      encoder = new A._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        t2 = end - 1;
        if (!(t2 >= 0 && t2 < stringLength))
          return A.ioore(string, t2);
        encoder._writeReplacementCharacter$0();
      }
      return B.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    }
  };
  A._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var t4, _this = this,
        t1 = _this._convert$_buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1;
      t1.$flags & 2 && A.throwUnsupportedOperation(t1);
      t4 = t1.length;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      if (!(t3 < t4))
        return A.ioore(t1, t3);
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      if (!(t2 < t4))
        return A.ioore(t1, t2);
      t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, t4, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._convert$_buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t1.$flags & 2 && A.throwUnsupportedOperation(t1);
        t4 = t1.length;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        if (!(t3 < t4))
          return A.ioore(t1, t3);
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1, t2, t3, t4, stringIndex, codeUnit, t5, t6, _this = this;
      if (start !== end) {
        t1 = end - 1;
        if (!(t1 >= 0 && t1 < str.length))
          return A.ioore(str, t1);
        t1 = (str.charCodeAt(t1) & 64512) === 55296;
      } else
        t1 = false;
      if (t1)
        --end;
      for (t1 = _this._convert$_buffer, t2 = t1.$flags | 0, t3 = t1.length, t4 = str.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        if (!(stringIndex < t4))
          return A.ioore(str, stringIndex);
        codeUnit = str.charCodeAt(stringIndex);
        if (codeUnit <= 127) {
          t5 = _this._bufferIndex;
          if (t5 >= t3)
            break;
          _this._bufferIndex = t5 + 1;
          t2 & 2 && A.throwUnsupportedOperation(t1);
          t1[t5] = codeUnit;
        } else {
          t5 = codeUnit & 64512;
          if (t5 === 55296) {
            if (_this._bufferIndex + 4 > t3)
              break;
            t5 = stringIndex + 1;
            if (!(t5 < t4))
              return A.ioore(str, t5);
            if (_this._writeSurrogate$2(codeUnit, str.charCodeAt(t5)))
              stringIndex = t5;
          } else if (t5 === 56320) {
            if (_this._bufferIndex + 3 > t3)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t5 = _this._bufferIndex;
            t6 = t5 + 1;
            if (t6 >= t3)
              break;
            _this._bufferIndex = t6;
            t2 & 2 && A.throwUnsupportedOperation(t1);
            if (!(t5 < t3))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t6 + 1;
            t1[t6] = codeUnit & 63 | 128;
          } else {
            t5 = _this._bufferIndex;
            if (t5 + 2 >= t3)
              break;
            t6 = _this._bufferIndex = t5 + 1;
            t2 & 2 && A.throwUnsupportedOperation(t1);
            if (!(t5 < t3))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit >>> 12 | 224;
            t5 = _this._bufferIndex = t6 + 1;
            if (!(t6 < t3))
              return A.ioore(t1, t6);
            t1[t6] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t5 + 1;
            if (!(t5 < t3))
              return A.ioore(t1, t5);
            t1[t5] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  A.Utf8Decoder.prototype = {
    convert$1(codeUnits) {
      return new A._Utf8Decoder(this._allowMalformed)._convertGeneral$4(type$.List_int._as(codeUnits), 0, null, true);
    }
  };
  A._Utf8Decoder.prototype = {
    _convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var end, casted, bytes, errorOffset, t1, result, message, _this = this;
      type$.List_int._as(codeUnits);
      end = A.RangeError_checkValidRange(start, maybeEnd, J.get$length$asx(codeUnits));
      if (start === end)
        return "";
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        bytes = casted;
        errorOffset = 0;
      } else {
        bytes = A._Utf8Decoder__makeNativeUint8List(codeUnits, start, end);
        end -= start;
        errorOffset = start;
        start = 0;
      }
      if (end - start >= 15) {
        t1 = _this.allowMalformed;
        result = A._Utf8Decoder__convertInterceptedUint8List(t1, bytes, start, end);
        if (result != null) {
          if (!t1)
            return result;
          if (result.indexOf("\ufffd") < 0)
            return result;
        }
      }
      result = _this._decodeRecursive$4(bytes, start, end, true);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = A._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw A.wrapException(A.FormatException$(message, codeUnits, errorOffset + _this._charOrIndex));
      }
      return result;
    },
    _decodeRecursive$4(bytes, start, end, single) {
      var mid, s1, _this = this;
      if (end - start > 1000) {
        mid = B.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._decodeRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0)
          return s1;
        return s1 + _this._decodeRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    decodeGeneral$4(bytes, start, end, single) {
      var byte, t2, type, t3, i0, markEnd, i1, m, _this = this,
        _s256_ = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE",
        _s144_ = " \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA",
        _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new A.StringBuffer(""),
        i = start + 1,
        t1 = bytes.length;
      if (!(start >= 0 && start < t1))
        return A.ioore(bytes, start);
      byte = bytes[start];
      $label0$0:
        for (t2 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            if (!(byte >= 0 && byte < 256))
              return A.ioore(_s256_, byte);
            type = _s256_.charCodeAt(byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            t3 = state + type;
            if (!(t3 >= 0 && t3 < 144))
              return A.ioore(_s144_, t3);
            state = _s144_.charCodeAt(t3);
            if (state === 0) {
              t3 = A.Primitives_stringFromCharCode(char);
              buffer._contents += t3;
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t2)
                switch (state) {
                  case 69:
                  case 67:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents += t3;
                    break;
                  case 65:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents += t3;
                    --i;
                    break;
                  default:
                    t3 = A.Primitives_stringFromCharCode(_65533);
                    buffer._contents = (buffer._contents += t3) + A.Primitives_stringFromCharCode(_65533);
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            if (!(i >= 0 && i < t1))
              return A.ioore(bytes, i);
            byte = bytes[i];
          }
          i0 = i + 1;
          if (!(i >= 0 && i < t1))
            return A.ioore(bytes, i);
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              if (!(i0 >= 0 && i0 < t1))
                return A.ioore(bytes, i0);
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m) {
                if (!(m < t1))
                  return A.ioore(bytes, m);
                t3 = A.Primitives_stringFromCharCode(bytes[m]);
                buffer._contents += t3;
              }
            else {
              t3 = A.String_String$fromCharCodes(bytes, i, markEnd);
              buffer._contents += t3;
            }
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t2) {
          t1 = A.Primitives_stringFromCharCode(_65533);
          buffer._contents += t1;
        } else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._BigIntImpl.prototype = {
    $negate(_) {
      var t2, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return _this;
      t2 = !_this._isNegative;
      t3 = _this._digits;
      t1 = A._BigIntImpl__normalize(t1, t3);
      return new A._BigIntImpl(t1 === 0 ? false : t2, t3, t1);
    },
    _dlShift$1(n) {
      var resultUsed, digits, resultDigits, i, t1, t2, t3,
        used = this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + n;
      digits = this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (i = used - 1, t1 = digits.length; i >= 0; --i) {
        t2 = i + n;
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 >= 0 && t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t1 = this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _drShift$1(n) {
      var resultUsed, digits, resultDigits, t1, i, t2, t3, result, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used - n;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, i = n; i < used; ++i) {
        t2 = i - n;
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(t2 < resultUsed))
          return A.ioore(resultDigits, t2);
        resultDigits[t2] = t3;
      }
      t2 = _this._isNegative;
      t3 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t3 === 0 ? false : t2, resultDigits, t3);
      if (t2)
        for (i = 0; i < n; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      return result;
    },
    $shl(_, shiftAmount) {
      var t1, digitShift, resultUsed, resultDigits, t2, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      if (B.JSInt_methods.$mod(shiftAmount, 16) === 0)
        return _this._dlShift$1(digitShift);
      resultUsed = t1 + digitShift + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__lsh(_this._digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    $shr(_, shiftAmount) {
      var t1, digitShift, bitShift, resultUsed, digits, resultDigits, t2, result, i, _this = this;
      if (shiftAmount < 0)
        throw A.wrapException(A.ArgumentError$("shift-amount must be posititve " + shiftAmount, null));
      t1 = _this._used;
      if (t1 === 0)
        return _this;
      digitShift = B.JSInt_methods._tdivFast$1(shiftAmount, 16);
      bitShift = B.JSInt_methods.$mod(shiftAmount, 16);
      if (bitShift === 0)
        return _this._drShift$1(digitShift);
      resultUsed = t1 - digitShift;
      if (resultUsed <= 0)
        return _this._isNegative ? $.$get$_BigIntImpl__minusOne() : $.$get$_BigIntImpl_zero();
      digits = _this._digits;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__rsh(digits, t1, shiftAmount, resultDigits);
      t1 = _this._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      result = new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
      if (t1) {
        t1 = digits.length;
        if (!(digitShift >= 0 && digitShift < t1))
          return A.ioore(digits, digitShift);
        if ((digits[digitShift] & B.JSInt_methods.$shl(1, bitShift) - 1) !== 0)
          return result.$sub(0, $.$get$_BigIntImpl_one());
        for (i = 0; i < digitShift; ++i) {
          if (!(i < t1))
            return A.ioore(digits, i);
          if (digits[i] !== 0)
            return result.$sub(0, $.$get$_BigIntImpl_one());
        }
      }
      return result;
    },
    compareTo$1(_, other) {
      var t1, result;
      type$._BigIntImpl._as(other);
      t1 = this._isNegative;
      if (t1 === other._isNegative) {
        result = A._BigIntImpl__compareDigits(this._digits, this._used, other._digits, other._used);
        return t1 ? 0 - result : result;
      }
      return t1 ? -1 : 1;
    },
    _absAddSetSign$2(other, isNegative) {
      var resultUsed, resultDigits, t1, _this = this,
        used = _this._used,
        otherUsed = other._used;
      if (used < otherUsed)
        return other._absAddSetSign$2(_this, isNegative);
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultUsed = used + 1;
      resultDigits = new Uint16Array(resultUsed);
      A._BigIntImpl__absAdd(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absSubSetSign$2(other, isNegative) {
      var otherUsed, resultDigits, t1, _this = this,
        used = _this._used;
      if (used === 0)
        return $.$get$_BigIntImpl_zero();
      otherUsed = other._used;
      if (otherUsed === 0)
        return _this._isNegative === isNegative ? _this : _this.$negate(0);
      resultDigits = new Uint16Array(used);
      A._BigIntImpl__absSub(_this._digits, used, other._digits, otherUsed, resultDigits);
      t1 = A._BigIntImpl__normalize(used, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absAndSetSign$2(other, isNegative) {
      var digits, otherDigits, resultDigits, t1, t2, i, t3, t4,
        resultUsed = this._used,
        resultUsed0 = other._used;
      resultUsed = resultUsed < resultUsed0 ? resultUsed : resultUsed0;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < resultUsed; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 & t4;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absAndNotSetSign$2(other, isNegative) {
      var t1, t2, i, t3, t4,
        resultUsed = this._used,
        digits = this._digits,
        otherDigits = other._digits,
        resultDigits = new Uint16Array(resultUsed),
        m = other._used;
      if (resultUsed < m)
        m = resultUsed;
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < m; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 & ~t4;
      }
      for (i = m; i < resultUsed; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(digits, i);
        t2 = digits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absOrSetSign$2(other, isNegative) {
      var m, l, t1, t2, i, t3, t4, lDigits,
        used = this._used,
        otherUsed = other._used,
        resultUsed = used > otherUsed ? used : otherUsed,
        digits = this._digits,
        otherDigits = other._digits,
        resultDigits = new Uint16Array(resultUsed);
      if (used < otherUsed) {
        m = used;
        l = other;
      } else {
        m = otherUsed;
        l = this;
      }
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < m; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 | t4;
      }
      lDigits = l._digits;
      for (t1 = lDigits.length, i = m; i < resultUsed; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(lDigits, i);
        t2 = lDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    _absXorSetSign$2(other, isNegative) {
      var m, l, t1, t2, i, t3, t4, lDigits,
        used = this._used,
        otherUsed = other._used,
        resultUsed = used > otherUsed ? used : otherUsed,
        digits = this._digits,
        otherDigits = other._digits,
        resultDigits = new Uint16Array(resultUsed);
      if (used < otherUsed) {
        m = used;
        l = other;
      } else {
        m = otherUsed;
        l = this;
      }
      for (t1 = digits.length, t2 = otherDigits.length, i = 0; i < m; ++i) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        if (!(i < t2))
          return A.ioore(otherDigits, i);
        t4 = otherDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3 ^ t4;
      }
      lDigits = l._digits;
      for (t1 = lDigits.length, i = m; i < resultUsed; ++i) {
        if (!(i >= 0 && i < t1))
          return A.ioore(lDigits, i);
        t2 = lDigits[i];
        if (!(i < resultUsed))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t2;
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t1 === 0 ? false : isNegative, resultDigits, t1);
    },
    $and(_, other) {
      var t1, n, p, _this = this;
      type$._BigIntImpl._as(other);
      if (_this._used === 0 || other._used === 0)
        return $.$get$_BigIntImpl_zero();
      t1 = _this._isNegative;
      if (t1 === other._isNegative) {
        if (t1) {
          t1 = $.$get$_BigIntImpl_one();
          return _this._absSubSetSign$2(t1, true)._absOrSetSign$2(other._absSubSetSign$2(t1, true), true)._absAddSetSign$2(t1, true);
        }
        return _this._absAndSetSign$2(other, false);
      }
      if (t1) {
        n = _this;
        p = other;
      } else {
        n = other;
        p = _this;
      }
      return p._absAndNotSetSign$2(n._absSubSetSign$2($.$get$_BigIntImpl_one(), false), false);
    },
    $or(_, other) {
      var t1, n, p, _this = this;
      if (_this._used === 0)
        return other;
      if (other._used === 0)
        return _this;
      t1 = _this._isNegative;
      if (t1 === other._isNegative) {
        if (t1) {
          t1 = $.$get$_BigIntImpl_one();
          return _this._absSubSetSign$2(t1, true)._absAndSetSign$2(other._absSubSetSign$2(t1, true), true)._absAddSetSign$2(t1, true);
        }
        return _this._absOrSetSign$2(other, false);
      }
      if (t1) {
        n = _this;
        p = other;
      } else {
        n = other;
        p = _this;
      }
      t1 = $.$get$_BigIntImpl_one();
      return n._absSubSetSign$2(t1, true)._absAndNotSetSign$2(p, true)._absAddSetSign$2(t1, true);
    },
    $xor(_, other) {
      var t1, n, p, _this = this;
      if (_this._used === 0)
        return other;
      if (other._used === 0)
        return _this;
      t1 = _this._isNegative;
      if (t1 === other._isNegative) {
        if (t1) {
          t1 = $.$get$_BigIntImpl_one();
          return _this._absSubSetSign$2(t1, true)._absXorSetSign$2(other._absSubSetSign$2(t1, true), false);
        }
        return _this._absXorSetSign$2(other, false);
      }
      if (t1) {
        n = _this;
        p = other;
      } else {
        n = other;
        p = _this;
      }
      t1 = $.$get$_BigIntImpl_one();
      return p._absXorSetSign$2(n._absSubSetSign$2(t1, true), true)._absAddSetSign$2(t1, true);
    },
    $not(_) {
      var _this = this;
      if (_this._used === 0)
        return $.$get$_BigIntImpl__minusOne();
      if (_this._isNegative)
        return _this._absSubSetSign$2($.$get$_BigIntImpl_one(), false);
      return _this._absAddSetSign$2($.$get$_BigIntImpl_one(), true);
    },
    $add(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other;
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative === other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $sub(_, other) {
      var t2, isNegative, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return other.$negate(0);
      t2 = other._used;
      if (t2 === 0)
        return _this;
      isNegative = _this._isNegative;
      if (isNegative !== other._isNegative)
        return _this._absAddSetSign$2(other, isNegative);
      if (A._BigIntImpl__compareDigits(_this._digits, t1, other._digits, t2) >= 0)
        return _this._absSubSetSign$2(other, isNegative);
      return other._absSubSetSign$2(_this, !isNegative);
    },
    $mul(_, other) {
      var resultUsed, digits, otherDigits, resultDigits, t1, i, t2,
        used = this._used,
        otherUsed = other._used;
      if (used === 0 || otherUsed === 0)
        return $.$get$_BigIntImpl_zero();
      resultUsed = used + otherUsed;
      digits = this._digits;
      otherDigits = other._digits;
      resultDigits = new Uint16Array(resultUsed);
      for (t1 = otherDigits.length, i = 0; i < otherUsed;) {
        if (!(i < t1))
          return A.ioore(otherDigits, i);
        A._BigIntImpl__mulAdd(otherDigits[i], digits, 0, resultDigits, i, used);
        ++i;
      }
      t1 = this._isNegative !== other._isNegative;
      t2 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(t2 === 0 ? false : t1, resultDigits, t2);
    },
    _div$1(other) {
      var lastQuo_used, quo_digits, t1, quo;
      if (this._used < other._used)
        return $.$get$_BigIntImpl_zero();
      this._divRem$1(other);
      lastQuo_used = $._BigIntImpl____lastQuoRemUsed._readField$0() - $._BigIntImpl____lastRemUsed._readField$0();
      quo_digits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastQuoRemUsed._readField$0(), lastQuo_used);
      t1 = A._BigIntImpl__normalize(lastQuo_used, quo_digits);
      quo = new A._BigIntImpl(false, quo_digits, t1);
      return this._isNegative !== other._isNegative && t1 > 0 ? quo.$negate(0) : quo;
    },
    _rem$1(other) {
      var remDigits, t1, rem, _this = this;
      if (_this._used < other._used)
        return _this;
      _this._divRem$1(other);
      remDigits = A._BigIntImpl__cloneDigits($._BigIntImpl____lastQuoRemDigits._readField$0(), 0, $._BigIntImpl____lastRemUsed._readField$0(), $._BigIntImpl____lastRemUsed._readField$0());
      t1 = A._BigIntImpl__normalize($._BigIntImpl____lastRemUsed._readField$0(), remDigits);
      rem = new A._BigIntImpl(false, remDigits, t1);
      if ($._BigIntImpl____lastRem_nsh._readField$0() > 0)
        rem = rem.$shr(0, $._BigIntImpl____lastRem_nsh._readField$0());
      return _this._isNegative && rem._used > 0 ? rem.$negate(0) : rem;
    },
    _divRem$1(other) {
      var yDigits, yUsed, t1, nsh, yDigits0, yUsed0, resultDigits, resultUsed0, topDigitDivisor, j, tmpDigits, tmpUsed, resultUsed1, nyDigits, i, estimatedQuotientDigit, _this = this,
        resultUsed = _this._used;
      if (resultUsed === $._BigIntImpl__lastDividendUsed && other._used === $._BigIntImpl__lastDivisorUsed && _this._digits === $._BigIntImpl__lastDividendDigits && other._digits === $._BigIntImpl__lastDivisorDigits)
        return;
      yDigits = other._digits;
      yUsed = other._used;
      t1 = yUsed - 1;
      if (!(t1 >= 0 && t1 < yDigits.length))
        return A.ioore(yDigits, t1);
      nsh = 16 - B.JSInt_methods.get$bitLength(yDigits[t1]);
      if (nsh > 0) {
        yDigits0 = new Uint16Array(yUsed + 5);
        yUsed0 = A._BigIntImpl__lShiftDigits(yDigits, yUsed, nsh, yDigits0);
        resultDigits = new Uint16Array(resultUsed + 5);
        resultUsed0 = A._BigIntImpl__lShiftDigits(_this._digits, resultUsed, nsh, resultDigits);
      } else {
        resultDigits = A._BigIntImpl__cloneDigits(_this._digits, 0, resultUsed, resultUsed + 2);
        yUsed0 = yUsed;
        yDigits0 = yDigits;
        resultUsed0 = resultUsed;
      }
      t1 = yUsed0 - 1;
      if (!(t1 >= 0 && t1 < yDigits0.length))
        return A.ioore(yDigits0, t1);
      topDigitDivisor = yDigits0[t1];
      j = resultUsed0 - yUsed0;
      tmpDigits = new Uint16Array(resultUsed0);
      tmpUsed = A._BigIntImpl__dlShiftDigits(yDigits0, yUsed0, j, tmpDigits);
      resultUsed1 = resultUsed0 + 1;
      t1 = resultDigits.$flags | 0;
      if (A._BigIntImpl__compareDigits(resultDigits, resultUsed0, tmpDigits, tmpUsed) >= 0) {
        t1 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(resultUsed0 >= 0 && resultUsed0 < resultDigits.length))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 1;
        A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
      } else {
        t1 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(resultUsed0 >= 0 && resultUsed0 < resultDigits.length))
          return A.ioore(resultDigits, resultUsed0);
        resultDigits[resultUsed0] = 0;
      }
      t1 = yUsed0 + 2;
      nyDigits = new Uint16Array(t1);
      if (!(yUsed0 >= 0 && yUsed0 < t1))
        return A.ioore(nyDigits, yUsed0);
      nyDigits[yUsed0] = 1;
      A._BigIntImpl__absSub(nyDigits, yUsed0 + 1, yDigits0, yUsed0, nyDigits);
      i = resultUsed0 - 1;
      for (t1 = resultDigits.length; j > 0;) {
        estimatedQuotientDigit = A._BigIntImpl__estimateQuotientDigit(topDigitDivisor, resultDigits, i);
        --j;
        A._BigIntImpl__mulAdd(estimatedQuotientDigit, nyDigits, 0, resultDigits, j, yUsed0);
        if (!(i >= 0 && i < t1))
          return A.ioore(resultDigits, i);
        if (resultDigits[i] < estimatedQuotientDigit) {
          tmpUsed = A._BigIntImpl__dlShiftDigits(nyDigits, yUsed0, j, tmpDigits);
          A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
          for (; --estimatedQuotientDigit, resultDigits[i] < estimatedQuotientDigit;)
            A._BigIntImpl__absSub(resultDigits, resultUsed1, tmpDigits, tmpUsed, resultDigits);
        }
        --i;
      }
      $._BigIntImpl__lastDividendDigits = _this._digits;
      $._BigIntImpl__lastDividendUsed = resultUsed;
      $._BigIntImpl__lastDivisorDigits = yDigits;
      $._BigIntImpl__lastDivisorUsed = yUsed;
      $._BigIntImpl____lastQuoRemDigits.__late_helper$_value = resultDigits;
      $._BigIntImpl____lastQuoRemUsed.__late_helper$_value = resultUsed1;
      $._BigIntImpl____lastRemUsed.__late_helper$_value = yUsed0;
      $._BigIntImpl____lastRem_nsh.__late_helper$_value = nsh;
    },
    get$hashCode(_) {
      var hash, t2, t3, i,
        combine = new A._BigIntImpl_hashCode_combine(),
        t1 = this._used;
      if (t1 === 0)
        return 6707;
      hash = this._isNegative ? 83585 : 429689;
      for (t2 = this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        hash = combine.call$2(hash, t2[i]);
      }
      return new A._BigIntImpl_hashCode_finish().call$1(hash);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A._BigIntImpl && this.compareTo$1(0, other) === 0;
    },
    get$bitLength(_) {
      var t2, t3, t4, highBits, $length, i,
        t1 = this._used;
      if (t1 === 0)
        return 0;
      t2 = this._digits;
      t3 = t1 - 1;
      t4 = t2.length;
      if (!(t3 >= 0 && t3 < t4))
        return A.ioore(t2, t3);
      highBits = t2[t3];
      $length = 16 * t3 + B.JSInt_methods.get$bitLength(highBits);
      if (!this._isNegative)
        return $length;
      if ((highBits & highBits - 1) !== 0)
        return $length;
      for (i = t1 - 2; i >= 0; --i) {
        if (!(i < t4))
          return A.ioore(t2, i);
        if (t2[i] !== 0)
          return $length;
      }
      return $length - 1;
    },
    $tdiv(_, other) {
      if (other._used === 0)
        throw A.wrapException(B.C_IntegerDivisionByZeroException);
      return this._div$1(other);
    },
    remainder$1(_, other) {
      if (other._used === 0)
        throw A.wrapException(B.C_IntegerDivisionByZeroException);
      return this._rem$1(other);
    },
    $mod(_, other) {
      var result;
      if (other._used === 0)
        throw A.wrapException(B.C_IntegerDivisionByZeroException);
      result = this._rem$1(other);
      if (result._isNegative)
        result = other._isNegative ? result.$sub(0, other) : result.$add(0, other);
      return result;
    },
    get$isEven(_) {
      var t1;
      if (this._used !== 0) {
        t1 = this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = (t1[0] & 1) === 0;
      } else
        t1 = true;
      return t1;
    },
    pow$1(exponent) {
      var result, base;
      if (exponent < 0)
        throw A.wrapException(A.ArgumentError$("Exponent must not be negative: " + exponent, null));
      if (exponent === 0)
        return $.$get$_BigIntImpl_one();
      result = $.$get$_BigIntImpl_one();
      for (base = this; exponent !== 0;) {
        if ((exponent & 1) === 1)
          result = result.$mul(0, base);
        exponent = B.JSInt_methods._shrOtherPositive$1(exponent, 1);
        if (exponent !== 0)
          base = base.$mul(0, base);
      }
      return result;
    },
    modPow$2(_, exponent, modulus) {
      var modulusUsed, modulusUsed2p4, exponentBitlen, t1, t2, z, resultDigits, result2Digits, gDigits, gUsed, j, i, resultUsed, result2Used, t0;
      if (exponent._isNegative)
        throw A.wrapException(A.ArgumentError$("exponent must be positive: " + exponent.toString$0(0), null));
      if (modulus.compareTo$1(0, $.$get$_BigIntImpl_zero()) <= 0)
        throw A.wrapException(A.ArgumentError$("modulus must be strictly positive: " + modulus.toString$0(0), null));
      if (exponent._used === 0)
        return $.$get$_BigIntImpl_one();
      modulusUsed = modulus._used;
      modulusUsed2p4 = 2 * modulusUsed + 4;
      exponentBitlen = exponent.get$bitLength(0);
      if (exponentBitlen <= 0)
        return $.$get$_BigIntImpl_one();
      t1 = modulus._digits;
      t2 = modulusUsed - 1;
      if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
      z = new A._BigIntClassic(modulus, modulus.$shl(0, 16 - B.JSInt_methods.get$bitLength(t1[t2])));
      resultDigits = new Uint16Array(modulusUsed2p4);
      result2Digits = new Uint16Array(modulusUsed2p4);
      gDigits = new Uint16Array(modulusUsed);
      gUsed = z.convert$2(this, gDigits);
      for (j = gUsed - 1; j >= 0; --j) {
        if (!(j < modulusUsed))
          return A.ioore(gDigits, j);
        t1 = gDigits[j];
        if (!(j < modulusUsed2p4))
          return A.ioore(resultDigits, j);
        resultDigits[j] = t1;
      }
      for (i = exponentBitlen - 2, resultUsed = gUsed; i >= 0; --i) {
        result2Used = z.sqr$3(resultDigits, resultUsed, result2Digits);
        if (exponent.$and(0, $.$get$_BigIntImpl_one().$shl(0, i))._used !== 0)
          resultUsed = z._reduce$2(resultDigits, A._BigIntImpl__mulDigits(result2Digits, result2Used, gDigits, gUsed, resultDigits));
        else {
          resultUsed = result2Used;
          t0 = result2Digits;
          result2Digits = resultDigits;
          resultDigits = t0;
        }
      }
      t1 = A._BigIntImpl__normalize(resultUsed, resultDigits);
      return new A._BigIntImpl(false, resultDigits, t1);
    },
    modInverse$1(_, modulus) {
      var t2, _this = this,
        t1 = $.$get$_BigIntImpl_zero();
      if (modulus.compareTo$1(0, t1) <= 0)
        throw A.wrapException(A.ArgumentError$("Modulus must be strictly positive: " + modulus.toString$0(0), null));
      t2 = modulus.compareTo$1(0, $.$get$_BigIntImpl_one());
      if (t2 === 0)
        return t1;
      return A._BigIntImpl__binaryGcd(modulus, _this._isNegative || A._BigIntImpl__compareDigits(_this._digits, _this._used, modulus._digits, modulus._used) >= 0 ? _this.$mod(0, modulus) : _this, true);
    },
    toSigned$1(_, width) {
      var t1 = $.$get$_BigIntImpl_one(),
        signMask = t1.$shl(0, width - 1);
      return this.$and(0, signMask.$sub(0, t1)).$sub(0, this.$and(0, signMask));
    },
    get$isValidInt() {
      var asInt, t1;
      if (this._used <= 3)
        return true;
      asInt = this.toInt$0(0);
      if (!isFinite(asInt))
        return false;
      t1 = this.compareTo$1(0, A._BigIntImpl__BigIntImpl$_fromInt(asInt));
      return t1 === 0;
    },
    toInt$0(_) {
      var i, t1, t2, result;
      for (i = this._used - 1, t1 = this._digits, t2 = t1.length, result = 0; i >= 0; --i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        result = result * 65536 + t1[i];
      }
      return this._isNegative ? -result : result;
    },
    toString$0(_) {
      var decimalDigitChunks, rest, t2, digits4, t3, _this = this,
        t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        if (_this._isNegative) {
          t1 = _this._digits;
          if (0 >= t1.length)
            return A.ioore(t1, 0);
          return B.JSInt_methods.toString$0(-t1[0]);
        }
        t1 = _this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        return B.JSInt_methods.toString$0(t1[0]);
      }
      decimalDigitChunks = A._setArrayType([], type$.JSArray_String);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (; rest._used > 1;) {
        t2 = $.$get$_BigIntImpl__bigInt10000();
        if (t2._used === 0)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        digits4 = rest._rem$1(t2).toString$0(0);
        B.JSArray_methods.add$1(decimalDigitChunks, digits4);
        t3 = digits4.length;
        if (t3 === 1)
          B.JSArray_methods.add$1(decimalDigitChunks, "000");
        if (t3 === 2)
          B.JSArray_methods.add$1(decimalDigitChunks, "00");
        if (t3 === 3)
          B.JSArray_methods.add$1(decimalDigitChunks, "0");
        rest = rest._div$1(t2);
      }
      t2 = rest._digits;
      if (0 >= t2.length)
        return A.ioore(t2, 0);
      B.JSArray_methods.add$1(decimalDigitChunks, B.JSInt_methods.toString$0(t2[0]));
      if (t1)
        B.JSArray_methods.add$1(decimalDigitChunks, "-");
      return new A.ReversedListIterable(decimalDigitChunks, type$.ReversedListIterable_String).join$0(0);
    },
    _toRadixCodeUnit$1(digit) {
      if (digit < 10)
        return 48 + digit;
      return 97 + digit - 10;
    },
    toRadixString$1(_, radix) {
      var t1, digitString, base, reversedDigitCodeUnits, rest, t2, digit, _this = this;
      if (radix < 2 || radix > 36)
        throw A.wrapException(A.RangeError$range(radix, 2, 36, null, null));
      t1 = _this._used;
      if (t1 === 0)
        return "0";
      if (t1 === 1) {
        t1 = _this._digits;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        digitString = B.JSInt_methods.toRadixString$1(t1[0], radix);
        if (_this._isNegative)
          return "-" + digitString;
        return digitString;
      }
      if (radix === 16)
        return _this._toHexString$0();
      base = A._BigIntImpl__BigIntImpl$_fromInt(radix);
      reversedDigitCodeUnits = A._setArrayType([], type$.JSArray_int);
      t1 = _this._isNegative;
      rest = t1 ? _this.$negate(0) : _this;
      for (t2 = base._used === 0; rest._used !== 0;) {
        if (t2)
          A.throwExpression(B.C_IntegerDivisionByZeroException);
        digit = rest._rem$1(base).toInt$0(0);
        rest = rest._div$1(base);
        B.JSArray_methods.add$1(reversedDigitCodeUnits, _this._toRadixCodeUnit$1(digit));
      }
      digitString = A.String_String$fromCharCodes(new A.ReversedListIterable(reversedDigitCodeUnits, type$.ReversedListIterable_int), 0, null);
      if (t1)
        return "-" + digitString;
      return digitString;
    },
    _toHexString$0() {
      var t1, t2, t3, i, chunk, j, msbChunk, _this = this,
        chars = A._setArrayType([], type$.JSArray_int);
      for (t1 = _this._used - 1, t2 = _this._digits, t3 = t2.length, i = 0; i < t1; ++i) {
        if (!(i < t3))
          return A.ioore(t2, i);
        chunk = t2[i];
        for (j = 0; j < 4; ++j) {
          B.JSArray_methods.add$1(chars, _this._toRadixCodeUnit$1(chunk & 15));
          chunk = chunk >>> 4;
        }
      }
      if (!(t1 >= 0 && t1 < t3))
        return A.ioore(t2, t1);
      msbChunk = t2[t1];
      for (; msbChunk !== 0;) {
        B.JSArray_methods.add$1(chars, _this._toRadixCodeUnit$1(msbChunk & 15));
        msbChunk = msbChunk >>> 4;
      }
      if (_this._isNegative)
        B.JSArray_methods.add$1(chars, 45);
      return A.String_String$fromCharCodes(new A.ReversedListIterable(chars, type$.ReversedListIterable_int), 0, null);
    },
    $isBigInt: 1,
    $isComparable: 1
  };
  A._BigIntImpl_hashCode_combine.prototype = {
    call$2(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    $signature: 59
  };
  A._BigIntImpl_hashCode_finish.prototype = {
    call$1(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    $signature: 27
  };
  A._BigIntClassic.prototype = {
    convert$2(x, resultDigits) {
      var t2, remainder, used, digits, i, t3,
        t1 = x._isNegative;
      if (!t1) {
        t2 = this._modulus;
        t2 = A._BigIntImpl__compareDigits(x._digits, x._used, t2._digits, t2._used) >= 0;
      } else
        t2 = true;
      if (t2) {
        t2 = this._modulus;
        remainder = x._rem$1(t2);
        if (t1 && remainder._used > 0)
          remainder = remainder.$add(0, t2);
        used = remainder._used;
        digits = remainder._digits;
      } else {
        used = x._used;
        digits = x._digits;
      }
      for (t1 = digits.length, t2 = resultDigits.$flags | 0, i = used; --i, i >= 0;) {
        if (!(i < t1))
          return A.ioore(digits, i);
        t3 = digits[i];
        t2 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = t3;
      }
      return used;
    },
    _reduce$2(xDigits, xUsed) {
      var t1;
      if (xUsed < this._modulus._used)
        return xUsed;
      t1 = A._BigIntImpl__normalize(xUsed, xDigits);
      return this.convert$2(new A._BigIntImpl(false, xDigits, t1)._rem$1(this._normalizedModulus), xDigits);
    },
    sqr$3(xDigits, xUsed, resultDigits) {
      var i, t2, t3, i0, t4,
        t1 = A._BigIntImpl__normalize(xUsed, xDigits),
        b = new A._BigIntImpl(false, xDigits, t1),
        b2 = b.$mul(0, b);
      for (i = b2._used, t1 = b2._digits, t2 = t1.length, t3 = resultDigits.$flags | 0, i0 = 0; i0 < i; ++i0) {
        if (!(i0 < t2))
          return A.ioore(t1, i0);
        t4 = t1[i0];
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i0 < resultDigits.length))
          return A.ioore(resultDigits, i0);
        resultDigits[i0] = t4;
      }
      for (t1 = 2 * xUsed; i < t1; ++i) {
        t3 & 2 && A.throwUnsupportedOperation(resultDigits);
        if (!(i >= 0 && i < resultDigits.length))
          return A.ioore(resultDigits, i);
        resultDigits[i] = 0;
      }
      return this._reduce$2(resultDigits, t1);
    }
  };
  A._Uri__makeQueryFromParameters_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      A._asString(key);
      if (typeof value == "string")
        this.params.set(key, value);
      else if (value == null)
        this.params.set(key, "");
      else
        for (t1 = J.get$iterator$ax(type$.Iterable_dynamic._as(value)), t2 = this.params; t1.moveNext$0();) {
          value = t1.get$current();
          if (typeof value == "string")
            t2.append(key, value);
          else if (value == null)
            t2.append(key, "");
          else
            A._asStringQ(value);
        }
    },
    $signature: 132
  };
  A.DateTime.prototype = {
    get$timeZoneOffset() {
      if (this.isUtc)
        return B.Duration_0;
      return new A.Duration(1000000 * B.JSNumber_methods.toInt$0(0 - A.Primitives_lazyAsJsDate(this).getTimezoneOffset() * 60));
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DateTime && this._core$_value === other._core$_value && this._microsecond === other._microsecond && this.isUtc === other.isUtc;
    },
    get$hashCode(_) {
      return A.Object_hash(this._core$_value, this._microsecond, B.C_SentinelValue, B.C_SentinelValue);
    },
    compareTo$1(_, other) {
      var r;
      type$.DateTime._as(other);
      r = B.JSInt_methods.compareTo$1(this._core$_value, other._core$_value);
      if (r !== 0)
        return r;
      return B.JSInt_methods.compareTo$1(this._microsecond, other._microsecond);
    },
    toLocal$0() {
      var _this = this;
      if (_this.isUtc)
        return new A.DateTime(_this._core$_value, _this._microsecond, false);
      return _this;
    },
    toUtc$0() {
      var _this = this;
      if (_this.isUtc)
        return _this;
      return new A.DateTime(_this._core$_value, _this._microsecond, true);
    },
    toString$0(_) {
      var _this = this,
        y = A.DateTime__fourDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this)),
        t1 = _this._microsecond,
        us = t1 === 0 ? "" : A.DateTime__threeDigits(t1);
      t1 = y + "-" + m;
      if (_this.isUtc)
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us + "Z";
      else
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us;
    },
    toIso8601String$0() {
      var _this = this,
        y = A.Primitives_getYear(_this) >= -9999 && A.Primitives_getYear(_this) <= 9999 ? A.DateTime__fourDigits(A.Primitives_getYear(_this)) : A.DateTime__sixDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this)),
        t1 = _this._microsecond,
        us = t1 === 0 ? "" : A.DateTime__threeDigits(t1);
      t1 = y + "-" + m;
      if (_this.isUtc)
        return t1 + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms + us + "Z";
      else
        return t1 + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms + us;
    },
    $isComparable: 1
  };
  A.DateTime_parse_parseIntOrZero.prototype = {
    call$1(matched) {
      if (matched == null)
        return 0;
      return A.int_parse(matched, null);
    },
    $signature: 147
  };
  A.DateTime_parse_parseMilliAndMicroseconds.prototype = {
    call$1(matched) {
      var t1, result, i;
      if (matched == null)
        return 0;
      for (t1 = matched.length, result = 0, i = 0; i < 6; ++i) {
        result *= 10;
        if (i < t1) {
          if (!(i < t1))
            return A.ioore(matched, i);
          result += matched.charCodeAt(i) ^ 48;
        }
      }
      return result;
    },
    $signature: 147
  };
  A.Duration.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && this._duration === other._duration;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1(_, other) {
      return B.JSInt_methods.compareTo$1(this._duration, type$.Duration._as(other)._duration);
    },
    toString$0(_) {
      var sign, minutes, minutesPadding, seconds, secondsPadding,
        microseconds = this._duration,
        hours = B.JSInt_methods._tdivFast$1(microseconds, 3600000000),
        microseconds0 = microseconds % 3600000000;
      if (microseconds < 0) {
        hours = 0 - hours;
        microseconds = 0 - microseconds0;
        sign = "-";
      } else {
        microseconds = microseconds0;
        sign = "";
      }
      minutes = B.JSInt_methods._tdivFast$1(microseconds, 60000000);
      microseconds %= 60000000;
      minutesPadding = minutes < 10 ? "0" : "";
      seconds = B.JSInt_methods._tdivFast$1(microseconds, 1000000);
      secondsPadding = seconds < 10 ? "0" : "";
      return sign + hours + ":" + minutesPadding + minutes + ":" + secondsPadding + seconds + "." + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(microseconds % 1000000), 6, "0");
    },
    $isComparable: 1
  };
  A._Enum.prototype = {
    toString$0(_) {
      return this._enumToString$0();
    }
  };
  A.Error.prototype = {
    get$stackTrace() {
      return A.Primitives_extractStackTrace(this);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + A.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue());
    },
    get$invalidValue() {
      return this.invalidValue;
    }
  };
  A.RangeError.prototype = {
    get$invalidValue() {
      return A._asNumQ(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$invalidValue() {
      return A._asInt(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      var message = this.message;
      return message != null ? "UnimplementedError: " + message : "UnimplementedError";
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    },
    $isException: 1
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var t1, lineEnd, lineNum, lineStart, previousCharWasCR, i, char, prefix, postfix, end, start,
        message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = B.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineEnd = source.length, lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          if (!(i < lineEnd))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        for (i = offset; i < lineEnd; ++i) {
          if (!(i >= 0))
            return A.ioore(source, i);
          char = source.charCodeAt(i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        prefix = "";
        if (lineEnd - lineStart > 78) {
          postfix = "...";
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
            }
            prefix = "...";
          }
        } else {
          end = lineEnd;
          start = lineStart;
          postfix = "";
        }
        return report + prefix + B.JSString_methods.substring$2(source, start, end) + postfix + "\n" + B.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + A.S(offset) + ")") : report;
    },
    $isException: 1,
    get$message() {
      return this.message;
    },
    get$source() {
      return this.source;
    },
    get$offset() {
      return this.offset;
    }
  };
  A.IntegerDivisionByZeroException.prototype = {
    get$stackTrace() {
      return null;
    },
    toString$0(_) {
      return "IntegerDivisionByZeroException";
    },
    $isError: 1,
    $isException: 1
  };
  A.Iterable.prototype = {
    cast$1$0(_, $R) {
      return A.CastIterable_CastIterable(this, A._instanceType(this)._eval$1("Iterable.E"), $R);
    },
    map$1$1(_, toElement, $T) {
      var t1 = A._instanceType(this);
      return A.MappedIterable_MappedIterable(this, t1._bind$1($T)._eval$1("1(Iterable.E)")._as(toElement), t1._eval$1("Iterable.E"), $T);
    },
    where$1(_, test) {
      var t1 = A._instanceType(this);
      return new A.WhereIterable(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("WhereIterable<Iterable.E>"));
    },
    contains$1(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(), element))
          return true;
      return false;
    },
    fold$1$2(_, initialValue, combine, $T) {
      var t1, value;
      $T._as(initialValue);
      A._instanceType(this)._bind$1($T)._eval$1("1(1,Iterable.E)")._as(combine);
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    join$1(_, separator) {
      var first, t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      first = J.toString$0$(iterator.get$current());
      if (!iterator.moveNext$0())
        return first;
      if (separator.length === 0) {
        t1 = first;
        do
          t1 += J.toString$0$(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        t1 = first;
        do
          t1 = t1 + separator + J.toString$0$(iterator.get$current());
        while (iterator.moveNext$0());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toList$1$growable(_, growable) {
      var t1 = A._instanceType(this)._eval$1("Iterable.E");
      if (growable)
        t1 = A.List_List$_of(this, t1);
      else {
        t1 = A.List_List$_of(this, t1);
        t1.$flags = 1;
        t1 = t1;
      }
      return t1;
    },
    toList$0(_) {
      return this.toList$1$growable(0, true);
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty(_) {
      return !this.get$isEmpty(this);
    },
    take$1(_, count) {
      return A.TakeIterable_TakeIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    skip$1(_, count) {
      return A.SkipIterable_SkipIterable(this, count, A._instanceType(this)._eval$1("Iterable.E"));
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      return it.get$current();
    },
    get$last(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    firstWhere$2$orElse(_, test, orElse) {
      var t1, element;
      A._instanceType(this)._eval$1("bool(Iterable.E)")._as(test);
      for (t1 = this.get$iterator(this); t1.moveNext$0();) {
        element = t1.get$current();
        if (test.call$1(element))
          return element;
      }
      throw A.wrapException(A.IterableElementError_noElement());
    },
    firstWhere$1(_, test) {
      test.toString;
      return this.firstWhere$2$orElse(0, test, null);
    },
    elementAt$1(_, index) {
      var iterator, skipCount;
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(this);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0)
          return iterator.get$current();
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, null, "index"));
    },
    toString$0(_) {
      return A.Iterable_iterableToShortString(this, "(", ")");
    }
  };
  A.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + A.S(this.key) + ": " + A.S(this.value) + ")";
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, 0);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    get$runtimeType(_) {
      return A.getRuntimeTypeOfDartObject(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return "";
    },
    $isStackTrace: 1
  };
  A.Runes.prototype = {
    get$iterator(_) {
      return new A.RuneIterator(this.string);
    },
    get$last(_) {
      var t3, code, previousCode,
        t1 = this.string,
        t2 = t1.length;
      if (t2 === 0)
        throw A.wrapException(A.StateError$("No elements."));
      t3 = t2 - 1;
      if (!(t3 >= 0))
        return A.ioore(t1, t3);
      code = t1.charCodeAt(t3);
      if ((code & 64512) === 56320 && t2 > 1) {
        t3 = t2 - 2;
        if (!(t3 >= 0))
          return A.ioore(t1, t3);
        previousCode = t1.charCodeAt(t3);
        if ((previousCode & 64512) === 55296)
          return A._combineSurrogatePair(previousCode, code);
      }
      return code;
    }
  };
  A.RuneIterator.prototype = {
    get$current() {
      return this._currentCodePoint;
    },
    moveNext$0() {
      var codeUnit, nextPosition, nextCodeUnit, _this = this,
        t1 = _this._position = _this._nextPosition,
        t2 = _this.string,
        t3 = t2.length;
      if (t1 === t3) {
        _this._currentCodePoint = -1;
        return false;
      }
      if (!(t1 < t3))
        return A.ioore(t2, t1);
      codeUnit = t2.charCodeAt(t1);
      nextPosition = t1 + 1;
      if ((codeUnit & 64512) === 55296 && nextPosition < t3) {
        if (!(nextPosition < t3))
          return A.ioore(t2, nextPosition);
        nextCodeUnit = t2.charCodeAt(nextPosition);
        if ((nextCodeUnit & 64512) === 56320) {
          _this._nextPosition = nextPosition + 1;
          _this._currentCodePoint = A._combineSurrogatePair(codeUnit, nextCodeUnit);
          return true;
        }
      }
      _this._nextPosition = nextPosition;
      _this._currentCodePoint = codeUnit;
      return true;
    },
    $isIterator: 1
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  A.Uri__parseIPv4Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 239
  };
  A.Uri_parseIPv6Address_error.prototype = {
    call$2(msg, position) {
      throw A.wrapException(A.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    $signature: 237
  };
  A.Uri_parseIPv6Address_parseHex.prototype = {
    call$2(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = A.int_parse(B.JSString_methods.substring$2(this.host, start, end), 16);
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 59
  };
  A._Uri.prototype = {
    get$_text() {
      var t1, t2, t3, t4, _this = this,
        value = _this.___Uri__text_FI;
      if (value === $) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? "" + t1 + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._core$_port;
          if (t2 != null)
            t1 = t1 + ":" + A.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        value !== $ && A.throwLateFieldADI("_text");
        value = _this.___Uri__text_FI = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return value;
    },
    get$pathSegments() {
      var pathToSplit, t1, result, _this = this,
        value = _this.___Uri_pathSegments_FI;
      if (value === $) {
        pathToSplit = _this.path;
        t1 = pathToSplit.length;
        if (t1 !== 0) {
          if (0 >= t1)
            return A.ioore(pathToSplit, 0);
          t1 = pathToSplit.charCodeAt(0) === 47;
        } else
          t1 = false;
        if (t1)
          pathToSplit = B.JSString_methods.substring$1(pathToSplit, 1);
        result = pathToSplit.length === 0 ? B.List_empty5 : A.List_List$unmodifiable(new A.MappedListIterable(A._setArrayType(pathToSplit.split("/"), type$.JSArray_String), type$.dynamic_Function_String._as(A.core_Uri_decodeComponent$closure()), type$.MappedListIterable_String_dynamic), type$.String);
        _this.___Uri_pathSegments_FI !== $ && A.throwLateFieldADI("pathSegments");
        value = _this.___Uri_pathSegments_FI = result;
      }
      return value;
    },
    get$hashCode(_) {
      var result, _this = this,
        value = _this.___Uri_hashCode_FI;
      if (value === $) {
        result = B.JSString_methods.get$hashCode(_this.get$_text());
        _this.___Uri_hashCode_FI !== $ && A.throwLateFieldADI("hashCode");
        _this.___Uri_hashCode_FI = result;
        value = result;
      }
      return value;
    },
    get$userInfo() {
      return this._userInfo;
    },
    get$host() {
      var host = this._host;
      if (host == null)
        return "";
      if (B.JSString_methods.startsWith$1(host, "["))
        return B.JSString_methods.substring$2(host, 1, host.length - 1);
      return host;
    },
    get$port() {
      var t1 = this._core$_port;
      return t1 == null ? A._Uri__defaultPort(this.scheme) : t1;
    },
    get$query() {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    isScheme$1(scheme) {
      var thisScheme = this.scheme;
      if (scheme.length !== thisScheme.length)
        return false;
      return A._caseInsensitiveCompareStart(scheme, thisScheme, 0) >= 0;
    },
    replace$3$path$queryParameters$scheme(path, queryParameters, scheme) {
      var scheme0, schemeChanged, isFile, userInfo, port, host, hasAuthority, t1, currentPath, query, _this = this;
      type$.nullable_Map_String_dynamic._as(queryParameters);
      scheme0 = _this.scheme;
      if (scheme != null) {
        scheme = A._Uri__makeScheme(scheme, 0, scheme.length);
        schemeChanged = scheme !== scheme0;
      } else {
        scheme = scheme0;
        schemeChanged = false;
      }
      isFile = scheme === "file";
      userInfo = _this._userInfo;
      port = _this._core$_port;
      if (schemeChanged)
        port = A._Uri__makePort(port, scheme);
      host = _this._host;
      if (!(host != null))
        host = userInfo.length !== 0 || port != null || isFile ? "" : null;
      hasAuthority = host != null;
      if (path != null) {
        t1 = path.length;
        path = A._Uri__makePath(path, 0, t1, null, scheme, hasAuthority);
      } else {
        currentPath = _this.path;
        if (!isFile)
          t1 = hasAuthority && currentPath.length !== 0;
        else
          t1 = true;
        if (t1 && !B.JSString_methods.startsWith$1(currentPath, "/"))
          currentPath = "/" + currentPath;
        path = currentPath;
      }
      if (queryParameters != null)
        query = A._Uri__makeQuery(null, 0, 0, queryParameters);
      else
        query = _this._query;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, _this._fragment);
    },
    replace$1$scheme(scheme) {
      return this.replace$3$path$queryParameters$scheme(null, null, scheme);
    },
    replace$1$queryParameters(queryParameters) {
      return this.replace$3$path$queryParameters$scheme(null, queryParameters, null);
    },
    replace$1$path(path) {
      return this.replace$3$path$queryParameters$scheme(path, null, null);
    },
    normalizePath$0() {
      var _this = this,
        t1 = _this.path,
        path = A._Uri__normalizePath(t1, _this.scheme, _this._host != null);
      if (path === t1)
        return _this;
      return _this.replace$1$path(path);
    },
    get$isAbsolute() {
      if (this.scheme !== "") {
        var t1 = this._fragment;
        t1 = (t1 == null ? "" : t1) === "";
      } else
        t1 = false;
      return t1;
    },
    _mergePaths$2(base, reference) {
      var backCount, refStart, baseEnd, t1, newEnd, delta, t2, t3, t4;
      for (backCount = 0, refStart = 0; B.JSString_methods.startsWith$2(reference, "../", refStart);) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = B.JSString_methods.lastIndexOf$1(base, "/");
      t1 = base.length;
      while (true) {
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = B.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t2 = delta !== 2;
        t3 = false;
        if (!t2 || delta === 3) {
          t4 = newEnd + 1;
          if (!(t4 < t1))
            return A.ioore(base, t4);
          if (base.charCodeAt(t4) === 46)
            if (t2) {
              t2 = newEnd + 2;
              if (!(t2 < t1))
                return A.ioore(base, t2);
              t2 = base.charCodeAt(t2) === 46;
            } else
              t2 = true;
          else
            t2 = t3;
        } else
          t2 = t3;
        if (t2)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return B.JSString_methods.replaceRange$3(base, baseEnd + 1, null, B.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1(reference) {
      return this.resolveUri$1(A.Uri_parse(reference, 0, null));
    },
    resolveUri$1(reference) {
      var targetScheme, t1, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, packageNameEnd, packageName, mergedPath, fragment, _this = this;
      if (reference.get$scheme().length !== 0)
        return reference;
      else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          t1 = reference.replace$1$scheme(targetScheme);
          return t1;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._core$_port;
          targetPath = _this.path;
          if (reference.get$hasEmptyPath())
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _this._query;
          else {
            packageNameEnd = A._Uri__packageNameEnd(_this, targetPath);
            if (packageNameEnd > 0) {
              packageName = B.JSString_methods.substring$2(targetPath, 0, packageNameEnd);
              targetPath = reference.get$hasAbsolutePath() ? packageName + A._Uri__removeDotSegments(reference.get$path()) : packageName + A._Uri__removeDotSegments(_this._mergePaths$2(B.JSString_methods.substring$1(targetPath, packageName.length), reference.get$path()));
            } else if (reference.get$hasAbsolutePath())
              targetPath = A._Uri__removeDotSegments(reference.get$path());
            else if (targetPath.length === 0)
              if (targetHost == null)
                targetPath = targetScheme.length === 0 ? reference.get$path() : A._Uri__removeDotSegments(reference.get$path());
              else
                targetPath = A._Uri__removeDotSegments("/" + reference.get$path());
            else {
              mergedPath = _this._mergePaths$2(targetPath, reference.get$path());
              t1 = targetScheme.length === 0;
              if (!t1 || targetHost != null || B.JSString_methods.startsWith$1(targetPath, "/"))
                targetPath = A._Uri__removeDotSegments(mergedPath);
              else
                targetPath = A._Uri__normalizeRelativePath(mergedPath, !t1 || targetHost != null);
            }
            targetQuery = reference.get$hasQuery() ? reference.get$query() : null;
          }
        }
      }
      fragment = reference.get$hasFragment() ? reference.get$fragment() : null;
      return A._Uri$_internal(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, fragment);
    },
    get$hasAuthority() {
      return this._host != null;
    },
    get$hasQuery() {
      return this._query != null;
    },
    get$hasFragment() {
      return this._fragment != null;
    },
    get$hasEmptyPath() {
      return this.path.length === 0;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$1(this.path, "/");
    },
    toFilePath$0() {
      var pathSegments, _this = this,
        t1 = _this.scheme;
      if (t1 !== "" && t1 !== "file")
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + t1 + " URI"));
      t1 = _this._query;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannotfq));
      t1 = _this._fragment;
      if ((t1 == null ? "" : t1) !== "")
        throw A.wrapException(A.UnsupportedError$(string$.Cannotff));
      if (_this._host != null && _this.get$host() !== "")
        A.throwExpression(A.UnsupportedError$(string$.Cannotn));
      pathSegments = _this.get$pathSegments();
      A._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
      t1 = A.StringBuffer__writeAll(B.JSString_methods.startsWith$1(_this.path, "/") ? "" + "/" : "", pathSegments, "/");
      t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
      return t1;
    },
    toString$0(_) {
      return this.get$_text();
    },
    $eq(_, other) {
      var t1, t2, t3, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      t1 = false;
      if (type$.Uri._is(other))
        if (_this.scheme === other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo === other.get$userInfo())
              if (_this.get$host() === other.get$host())
                if (_this.get$port() === other.get$port())
                  if (_this.path === other.get$path()) {
                    t2 = _this._query;
                    t3 = t2 == null;
                    if (!t3 === other.get$hasQuery()) {
                      if (t3)
                        t2 = "";
                      if (t2 === other.get$query()) {
                        t2 = _this._fragment;
                        t3 = t2 == null;
                        if (!t3 === other.get$hasFragment()) {
                          t1 = t3 ? "" : t2;
                          t1 = t1 === other.get$fragment();
                        }
                      }
                    }
                  }
      return t1;
    },
    $isUri: 1,
    get$scheme() {
      return this.scheme;
    },
    get$path() {
      return this.path;
    }
  };
  A._Uri__makePath_closure.prototype = {
    call$1(s) {
      return A._Uri__uriEncode(64, A._asString(s), B.C_Utf8Codec, false);
    },
    $signature: 4
  };
  A._Uri__makeQueryFromParametersDefault_writeParameter.prototype = {
    call$2(key, value) {
      var t1 = this.result,
        t2 = this._box_0;
      t1._contents += t2.separator;
      t2.separator = "&";
      t2 = A._Uri__uriEncode(1, key, B.C_Utf8Codec, true);
      t2 = t1._contents += t2;
      if (value != null && value.length !== 0) {
        t1._contents = t2 + "=";
        t2 = A._Uri__uriEncode(1, value, B.C_Utf8Codec, true);
        t1._contents += t2;
      }
    },
    $signature: 221
  };
  A._Uri__makeQueryFromParametersDefault_closure.prototype = {
    call$2(key, value) {
      var t1, t2;
      A._asString(key);
      if (value == null || typeof value == "string")
        this.writeParameter.call$2(key, A._asStringQ(value));
      else
        for (t1 = J.get$iterator$ax(type$.Iterable_dynamic._as(value)), t2 = this.writeParameter; t1.moveNext$0();)
          t2.call$2(key, A._asString(t1.get$current()));
    },
    $signature: 132
  };
  A.UriData.prototype = {
    get$uri() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 == null) {
        t1 = _this._separatorIndices;
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t2 = _this._text;
        t1 = t1[0] + 1;
        queryIndex = B.JSString_methods.indexOf$2(t2, "?", t1);
        end = t2.length;
        if (queryIndex >= 0) {
          query = A._Uri__normalizeOrSubstring(t2, queryIndex + 1, end, 256, false, false);
          end = queryIndex;
        } else
          query = _null;
        t1 = _this._uriCache = new A._DataUri("data", "", _null, _null, A._Uri__normalizeOrSubstring(t2, t1, end, 128, false, false), query, _null);
      }
      return t1;
    },
    toString$0(_) {
      var t2,
        t1 = this._separatorIndices;
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      t2 = this._text;
      return t1[0] === -1 ? "data:" + t2 : t2;
    }
  };
  A._SimpleUri.prototype = {
    get$hasAuthority() {
      return this._hostStart > 0;
    },
    get$hasPort() {
      return this._hostStart > 0 && this._portStart + 1 < this._pathStart;
    },
    get$hasQuery() {
      return this._queryStart < this._fragmentStart;
    },
    get$hasFragment() {
      return this._fragmentStart < this._uri.length;
    },
    get$hasAbsolutePath() {
      return B.JSString_methods.startsWith$2(this._uri, "/", this._pathStart);
    },
    get$hasEmptyPath() {
      return this._pathStart === this._queryStart;
    },
    get$isAbsolute() {
      return this._schemeEnd > 0 && this._fragmentStart >= this._uri.length;
    },
    get$scheme() {
      var t1 = this._schemeCache;
      return t1 == null ? this._schemeCache = this._computeScheme$0() : t1;
    },
    _computeScheme$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = t1 === 4;
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return "http";
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return "https";
      if (t2 && B.JSString_methods.startsWith$1(_this._uri, "file"))
        return "file";
      if (t1 === 7 && B.JSString_methods.startsWith$1(_this._uri, "package"))
        return "package";
      return B.JSString_methods.substring$2(_this._uri, 0, t1);
    },
    get$userInfo() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? B.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host() {
      var t1 = this._hostStart;
      return t1 > 0 ? B.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port() {
      var t1, _this = this;
      if (_this.get$hasPort())
        return A.int_parse(B.JSString_methods.substring$2(_this._uri, _this._portStart + 1, _this._pathStart), null);
      t1 = _this._schemeEnd;
      if (t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "http"))
        return 80;
      if (t1 === 5 && B.JSString_methods.startsWith$1(_this._uri, "https"))
        return 443;
      return 0;
    },
    get$path() {
      return B.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      return t1 < t2 ? B.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? B.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    _isPort$1(port) {
      var portDigitStart = this._portStart + 1;
      return portDigitStart + port.length === this._pathStart && B.JSString_methods.startsWith$2(this._uri, port, portDigitStart);
    },
    removeFragment$0() {
      var _this = this,
        t1 = _this._fragmentStart,
        t2 = _this._uri;
      if (t1 >= t2.length)
        return _this;
      return new A._SimpleUri(B.JSString_methods.substring$2(t2, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    replace$2$queryParameters$scheme(queryParameters, scheme) {
      var schemeChanged, isFile, t1, userInfo, port, host, t2, path, t3, query, fragment, _this = this, _null = null;
      type$.nullable_Map_String_dynamic._as(queryParameters);
      if (scheme != null) {
        scheme = A._Uri__makeScheme(scheme, 0, scheme.length);
        schemeChanged = !(_this._schemeEnd === scheme.length && B.JSString_methods.startsWith$1(_this._uri, scheme));
      } else {
        scheme = _this.get$scheme();
        schemeChanged = false;
      }
      isFile = scheme === "file";
      t1 = _this._hostStart;
      userInfo = t1 > 0 ? B.JSString_methods.substring$2(_this._uri, _this._schemeEnd + 3, t1) : "";
      port = _this.get$hasPort() ? _this.get$port() : _null;
      if (schemeChanged)
        port = A._Uri__makePort(port, scheme);
      t1 = _this._hostStart;
      if (t1 > 0)
        host = B.JSString_methods.substring$2(_this._uri, t1, _this._portStart);
      else
        host = userInfo.length !== 0 || port != null || isFile ? "" : _null;
      t1 = _this._uri;
      t2 = _this._queryStart;
      path = B.JSString_methods.substring$2(t1, _this._pathStart, t2);
      if (!isFile)
        t3 = host != null && path.length !== 0;
      else
        t3 = true;
      if (t3 && !B.JSString_methods.startsWith$1(path, "/"))
        path = "/" + path;
      if (queryParameters != null)
        query = A._Uri__makeQuery(_null, 0, 0, queryParameters);
      else {
        t3 = _this._fragmentStart;
        query = t2 < t3 ? B.JSString_methods.substring$2(t1, t2 + 1, t3) : _null;
      }
      t2 = _this._fragmentStart;
      fragment = t2 < t1.length ? B.JSString_methods.substring$1(t1, t2 + 1) : _null;
      return A._Uri$_internal(scheme, userInfo, host, port, path, query, fragment);
    },
    replace$1$scheme(scheme) {
      return this.replace$2$queryParameters$scheme(null, scheme);
    },
    replace$1$queryParameters(queryParameters) {
      return this.replace$2$queryParameters$scheme(queryParameters, null);
    },
    resolve$1(reference) {
      return this.resolveUri$1(A.Uri_parse(reference, 0, null));
    },
    resolveUri$1(reference) {
      if (reference instanceof A._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2(base, ref) {
      var t2, t3, t4, isSimple, delta, refStart, basePathStart, packageNameEnd, basePathStart0, baseStart, baseEnd, baseUri, baseStart0, backCount, refStart0, insert,
        t1 = ref._schemeEnd;
      if (t1 > 0)
        return ref;
      t2 = ref._hostStart;
      if (t2 > 0) {
        t3 = base._schemeEnd;
        if (t3 <= 0)
          return ref;
        t4 = t3 === 4;
        if (t4 && B.JSString_methods.startsWith$1(base._uri, "file"))
          isSimple = ref._pathStart !== ref._queryStart;
        else if (t4 && B.JSString_methods.startsWith$1(base._uri, "http"))
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !(t3 === 5 && B.JSString_methods.startsWith$1(base._uri, "https")) || !ref._isPort$1("443");
        if (isSimple) {
          delta = t3 + 1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, delta) + B.JSString_methods.substring$1(ref._uri, t1 + 1), t3, t2 + delta, ref._portStart + delta, ref._pathStart + delta, ref._queryStart + delta, ref._fragmentStart + delta, base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      refStart = ref._pathStart;
      t1 = ref._queryStart;
      if (refStart === t1) {
        t2 = ref._fragmentStart;
        if (t1 < t2) {
          t3 = base._queryStart;
          delta = t3 - t1;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(ref._uri, t1), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, t1 + delta, t2 + delta, base._schemeCache);
        }
        t1 = ref._uri;
        if (t2 < t1.length) {
          t3 = base._fragmentStart;
          return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, t3) + B.JSString_methods.substring$1(t1, t2), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t2 + (t3 - t2), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      t2 = ref._uri;
      if (B.JSString_methods.startsWith$2(t2, "/", refStart)) {
        basePathStart = base._pathStart;
        packageNameEnd = A._SimpleUri__packageNameEnd(this);
        basePathStart0 = packageNameEnd > 0 ? packageNameEnd : basePathStart;
        delta = basePathStart0 - refStart;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, basePathStart0) + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, basePathStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      if (baseStart === baseEnd && base._hostStart > 0) {
        for (; B.JSString_methods.startsWith$2(t2, "../", refStart);)
          refStart += 3;
        delta = baseStart - refStart + 1;
        return new A._SimpleUri(B.JSString_methods.substring$2(base._uri, 0, baseStart) + "/" + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseUri = base._uri;
      packageNameEnd = A._SimpleUri__packageNameEnd(this);
      if (packageNameEnd >= 0)
        baseStart0 = packageNameEnd;
      else
        for (baseStart0 = baseStart; B.JSString_methods.startsWith$2(baseUri, "../", baseStart0);)
          baseStart0 += 3;
      backCount = 0;
      while (true) {
        refStart0 = refStart + 3;
        if (!(refStart0 <= t1 && B.JSString_methods.startsWith$2(t2, "../", refStart)))
          break;
        ++backCount;
        refStart = refStart0;
      }
      for (t3 = baseUri.length, insert = ""; baseEnd > baseStart0;) {
        --baseEnd;
        if (!(baseEnd >= 0 && baseEnd < t3))
          return A.ioore(baseUri, baseEnd);
        if (baseUri.charCodeAt(baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && base._schemeEnd <= 0 && !B.JSString_methods.startsWith$2(baseUri, "/", baseStart)) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      return new A._SimpleUri(B.JSString_methods.substring$2(baseUri, 0, baseEnd) + insert + B.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
    },
    toFilePath$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 >= 0) {
        t2 = !(t1 === 4 && B.JSString_methods.startsWith$1(_this._uri, "file"));
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        throw A.wrapException(A.UnsupportedError$("Cannot extract a file path from a " + _this.get$scheme() + " URI"));
      t1 = _this._queryStart;
      t2 = _this._uri;
      if (t1 < t2.length) {
        if (t1 < _this._fragmentStart)
          throw A.wrapException(A.UnsupportedError$(string$.Cannotfq));
        throw A.wrapException(A.UnsupportedError$(string$.Cannotff));
      }
      if (_this._hostStart < _this._portStart)
        A.throwExpression(A.UnsupportedError$(string$.Cannotn));
      t1 = B.JSString_methods.substring$2(t2, _this._pathStart, t1);
      return t1;
    },
    get$hashCode(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = B.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return type$.Uri._is(other) && this._uri === other.toString$0(0);
    },
    _toNonSimple$0() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = _this._hostStart > 0 ? _this.get$host() : _null,
        t4 = _this.get$hasPort() ? _this.get$port() : _null,
        t5 = _this._uri,
        t6 = _this._queryStart,
        t7 = B.JSString_methods.substring$2(t5, _this._pathStart, t6),
        t8 = _this._fragmentStart;
      t6 = t6 < t8 ? _this.get$query() : _null;
      return A._Uri$_internal(t1, t2, t3, t4, t7, t6, t8 < t5.length ? _this.get$fragment() : _null);
    },
    toString$0(_) {
      return this._uri;
    },
    $isUri: 1
  };
  A._DataUri.prototype = {};
  A.jsify__convert.prototype = {
    call$1(o) {
      var t1, convertedMap, key, convertedList;
      if (A._noJsifyRequired(o))
        return o;
      t1 = this._convertedObjects;
      if (t1.containsKey$1(o))
        return t1.$index(0, o);
      if (type$.Map_dynamic_dynamic._is(o)) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = o.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          key = t1.get$current();
          convertedMap[key] = this.call$1(o.$index(0, key));
        }
        return convertedMap;
      } else if (type$.Iterable_dynamic._is(o)) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        B.JSArray_methods.addAll$1(convertedList, J.map$1$1$ax(o, this, type$.dynamic));
        return convertedList;
      } else
        return o;
    },
    $signature: 45
  };
  A.promiseToFuture_closure.prototype = {
    call$1(r) {
      return this.completer.complete$1(this.T._eval$1("0/?")._as(r));
    },
    $signature: 23
  };
  A.promiseToFuture_closure0.prototype = {
    call$1(e) {
      if (e == null)
        return this.completer.completeError$1(new A.NullRejectionException(e === undefined));
      return this.completer.completeError$1(e);
    },
    $signature: 23
  };
  A.dartify_convert.prototype = {
    call$1(o) {
      var t1, proto, t2, dartObject, originalKeys, dartKeys, i, jsKey, dartKey, l, $length;
      if (A._noDartifyRequired(o))
        return o;
      t1 = this._convertedObjects;
      o.toString;
      if (t1.containsKey$1(o))
        return t1.$index(0, o);
      if (o instanceof Date)
        return new A.DateTime(A.DateTime__validate(o.getTime(), 0, true), 0, true);
      if (o instanceof RegExp)
        throw A.wrapException(A.ArgumentError$("structured clone of RegExp", null));
      if (typeof Promise != "undefined" && o instanceof Promise)
        return A.promiseToFuture(o, type$.nullable_Object);
      proto = Object.getPrototypeOf(o);
      if (proto === Object.prototype || proto === null) {
        t2 = type$.nullable_Object;
        dartObject = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        t1.$indexSet(0, o, dartObject);
        originalKeys = Object.keys(o);
        dartKeys = [];
        for (t1 = J.getInterceptor$ax(originalKeys), t2 = t1.get$iterator(originalKeys); t2.moveNext$0();)
          dartKeys.push(A.dartify(t2.get$current()));
        for (i = 0; i < t1.get$length(originalKeys); ++i) {
          jsKey = t1.$index(originalKeys, i);
          if (!(i < dartKeys.length))
            return A.ioore(dartKeys, i);
          dartKey = dartKeys[i];
          if (jsKey != null)
            dartObject.$indexSet(0, dartKey, this.call$1(o[jsKey]));
        }
        return dartObject;
      }
      if (o instanceof Array) {
        l = o;
        dartObject = [];
        t1.$indexSet(0, o, dartObject);
        $length = A._asInt(o.length);
        for (t1 = J.getInterceptor$asx(l), i = 0; i < $length; ++i)
          dartObject.push(this.call$1(t1.$index(l, i)));
        return dartObject;
      }
      return o;
    },
    $signature: 45
  };
  A.NullRejectionException.prototype = {
    toString$0(_) {
      return "Promise was rejected with a value of `" + (this.isUndefined ? "undefined" : "null") + "`.";
    },
    $isException: 1
  };
  A._JSSecureRandom.prototype = {
    _JSSecureRandom$0() {
      var $crypto = self.crypto;
      if ($crypto != null)
        if ($crypto.getRandomValues != null)
          return;
      throw A.wrapException(A.UnsupportedError$("No source of cryptographically secure random numbers available."));
    },
    nextInt$1(max) {
      var byteCount, t1, start, randomLimit, t2, t3, random, result;
      if (max <= 0 || max > 4294967296)
        throw A.wrapException(A.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      if (max > 255)
        if (max > 65535)
          byteCount = max > 16777215 ? 4 : 3;
        else
          byteCount = 2;
      else
        byteCount = 1;
      t1 = this._math$_buffer;
      t1.$flags & 2 && A.throwUnsupportedOperation(t1, 11);
      t1.setUint32(0, 0, false);
      start = 4 - byteCount;
      randomLimit = A._asInt(Math.pow(256, byteCount));
      for (t2 = max - 1, t3 = (max & t2) === 0; true;) {
        crypto.getRandomValues(J.asUint8List$2$x(B.NativeByteData_methods.get$buffer(t1), start, byteCount));
        random = t1.getUint32(0, false);
        if (t3)
          return (random & t2) >>> 0;
        result = random % max;
        if (random - result + max < randomLimit)
          return result;
      }
    }
  };
  A.Endian.prototype = {};
  A.FutureGroup.prototype = {
    add$1(_, task) {
      var t1, index, _this = this;
      _this.$ti._eval$1("Future<1>")._as(task);
      if (_this._closed)
        throw A.wrapException(A.StateError$("The FutureGroup is closed."));
      t1 = _this._future_group$_values;
      index = t1.length;
      B.JSArray_methods.add$1(t1, null);
      ++_this._future_group$_pending;
      task.then$1$1(new A.FutureGroup_add_closure(_this, index), type$.Null).catchError$1(new A.FutureGroup_add_closure0(_this));
    }
  };
  A.FutureGroup_add_closure.prototype = {
    call$1(value) {
      var t3, t4,
        t1 = this.$this,
        t2 = t1.$ti;
      t2._precomputed1._as(value);
      t3 = t1._future_group$_completer;
      if ((t3.future._state & 30) !== 0)
        return null;
      --t1._future_group$_pending;
      t4 = t1._future_group$_values;
      B.JSArray_methods.$indexSet(t4, this.index, value);
      if (t1._future_group$_pending !== 0)
        return null;
      if (!t1._closed)
        return null;
      t1 = t2._eval$1("WhereTypeIterable<1>");
      t1 = A.List_List$_of(new A.WhereTypeIterable(t4, t1), t1._eval$1("Iterable.E"));
      t3.complete$1(t1);
    },
    $signature() {
      return this.$this.$ti._eval$1("Null(1)");
    }
  };
  A.FutureGroup_add_closure0.prototype = {
    call$2(error, stackTrace) {
      var t1;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      t1 = this.$this._future_group$_completer;
      if ((t1.future._state & 30) !== 0)
        return null;
      t1.completeError$2(error, stackTrace);
    },
    $signature: 40
  };
  A.ErrorResult.prototype = {
    addTo$1(sink) {
      sink.addError$2(this.error, this.stackTrace);
    },
    get$hashCode(_) {
      return (J.get$hashCode$(this.error) ^ A.Primitives_objectHashCode(this.stackTrace) ^ 492929599) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.ErrorResult && J.$eq$(this.error, other.error) && this.stackTrace === other.stackTrace;
    },
    $isResult: 1
  };
  A.ValueResult.prototype = {
    addTo$1(sink) {
      this.$ti._eval$1("EventSink<1>")._as(sink).add$1(0, this.value);
    },
    get$hashCode(_) {
      return (J.get$hashCode$(this.value) ^ 842997089) >>> 0;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.ValueResult && J.$eq$(this.value, other.value);
    },
    $isResult: 1
  };
  A.StreamSplitter.prototype = {
    split$0(_) {
      var t1, t2, _i, _this = this,
        controller = A.StreamController_StreamController(null, _this.get$_onListen(), _this.get$_stream_splitter$_onPause(), _this.get$_stream_splitter$_onResume(), false, _this.$ti._precomputed1);
      controller.set$onCancel(new A.StreamSplitter_split_closure(_this, controller));
      for (t1 = _this._stream_splitter$_buffer, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].addTo$1(controller);
      if (_this._isDone)
        _this._closeGroup.add$1(0, controller.close$0());
      else
        _this._controllers.add$1(0, controller);
      return new A._ControllerStream(controller, A._instanceType(controller)._eval$1("_ControllerStream<1>"));
    },
    _onListen$0() {
      var t1, _this = this;
      if (_this._isDone)
        return;
      t1 = _this._stream_splitter$_subscription;
      if (t1 != null)
        t1.resume$0();
      else
        _this._stream_splitter$_subscription = _this._stream_splitter$_stream.listen$3$onDone$onError(_this.get$_stream_splitter$_onData(), _this.get$_stream_splitter$_onDone(), _this.get$_stream_splitter$_onError());
    },
    _stream_splitter$_onPause$0() {
      if (!this._controllers.every$1(0, new A.StreamSplitter__onPause_closure(this)))
        return;
      this._stream_splitter$_subscription.pause$0();
    },
    _stream_splitter$_onResume$0() {
      this._stream_splitter$_subscription.resume$0();
    },
    _stream_splitter$_onCancel$1(controller) {
      var t1 = this._controllers;
      t1.remove$1(0, controller);
      if (t1._collection$_length !== 0)
        return;
      this._stream_splitter$_subscription.pause$0();
    },
    _stream_splitter$_onData$1(data) {
      var t2, t3,
        t1 = this.$ti;
      t1._precomputed1._as(data);
      B.JSArray_methods.add$1(this._stream_splitter$_buffer, new A.ValueResult(data, t1._eval$1("ValueResult<1>")));
      for (t1 = this._controllers, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        t3 = t1._collection$_current;
        (t3 == null ? t2._as(t3) : t3).add$1(0, data);
      }
    },
    _stream_splitter$_onError$2(error, stackTrace) {
      var t1, t2, t3;
      type$.Object._as(error);
      type$.StackTrace._as(stackTrace);
      B.JSArray_methods.add$1(this._stream_splitter$_buffer, new A.ErrorResult(error, stackTrace));
      for (t1 = this._controllers, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t2 = t1.$ti._precomputed1; t1.moveNext$0();) {
        t3 = t1._collection$_current;
        (t3 == null ? t2._as(t3) : t3).addError$2(error, stackTrace);
      }
    },
    _stream_splitter$_onDone$0() {
      var t1, t2, t3, t4;
      this._isDone = true;
      for (t1 = this._controllers, t1 = A._LinkedHashSetIterator$(t1, t1._collection$_modifications, A._instanceType(t1)._precomputed1), t2 = this._closeGroup, t3 = t1.$ti._precomputed1; t1.moveNext$0();) {
        t4 = t1._collection$_current;
        t2.add$1(0, (t4 == null ? t3._as(t4) : t4).close$0());
      }
    }
  };
  A.StreamSplitter_split_closure.prototype = {
    call$0() {
      return this.$this._stream_splitter$_onCancel$1(this.controller);
    },
    $signature: 1
  };
  A.StreamSplitter__onPause_closure.prototype = {
    call$1(controller) {
      return this.$this.$ti._eval$1("StreamController<1>")._as(controller).get$isPaused();
    },
    $signature() {
      return this.$this.$ti._eval$1("bool(StreamController<1>)");
    }
  };
  A.BitcoinAddressType.prototype = {
    get$supportBip137() {
      var t1, _this = this;
      $label0$0: {
        t1 = true;
        if (B.P2pkhAddressType_P2PKH === _this || B.P2pkhAddressType_P2PKHWT === _this)
          break $label0$0;
        if (B.P2shAddressType_UPK === _this)
          break $label0$0;
        if (B.SegwitAddressType_P2WPKH === _this)
          break $label0$0;
        t1 = false;
        break $label0$0;
      }
      return t1;
    },
    cast$1$0(_, $T) {
      var _this = this;
      A.checkTypeBound($T, type$.BitcoinAddressType, "T", "cast");
      if (!$T._is(_this))
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid cast: expected " + A.getRuntimeTypeOfDartObject(A.createRuntimeType($T)).toString$0(0) + ", but found " + A.getRuntimeTypeOfDartObject(_this).toString$0(0) + ".", A.LinkedHashMap_LinkedHashMap$_literal(["expected", A.createRuntimeType($T).toString$0(0), "type", _this.value], type$.String, type$.dynamic)));
      return $T._as(_this);
    },
    toString$0(_) {
      return "BitcoinAddressType." + this.value;
    }
  };
  A.BitcoinAddressType_fromValue_closure.prototype = {
    call$1(element) {
      return type$.BitcoinAddressType._as(element).value === this.value;
    },
    $signature: 183
  };
  A.BitcoinAddressType_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartBitcoinPluginException$("Unknown address type. " + A.S(this.value), null));
    },
    $signature: 0
  };
  A.PubKeyAddressType.prototype = {
    get$isP2sh() {
      return false;
    },
    toString$0(_) {
      return "PubKeyAddressType." + this.value;
    }
  };
  A.P2pkhAddressType.prototype = {
    get$isP2sh() {
      return false;
    },
    get$hashLength() {
      return 20;
    },
    toString$0(_) {
      return "P2pkhAddressType." + this.value;
    }
  };
  A.P2shAddressType.prototype = {
    get$isP2sh() {
      return true;
    },
    toString$0(_) {
      return "P2shAddressType." + this.value;
    },
    get$hashLength() {
      return this.hashLength;
    }
  };
  A.SegwitAddressType.prototype = {
    get$isP2sh() {
      return false;
    },
    get$hashLength() {
      switch (this) {
        case B.SegwitAddressType_P2WPKH:
          return 20;
        default:
          return 32;
      }
    },
    toString$0(_) {
      return "SegwitAddressType." + this.value;
    }
  };
  A.LegacyAddress.prototype = {
    get$addressProgram() {
      if (this.get$type() === B.PubKeyAddressType_P2PK)
        throw A.wrapException(A.UnimplementedError$(null));
      var t1 = this.__LegacyAddress__addressProgram_F;
      t1 === $ && A.throwLateFieldNI("_addressProgram");
      return t1;
    },
    toAddress$1(network) {
      var t1;
      if (this.get$type() === B.PubKeyAddressType_P2PK)
        A.throwExpression(A.UnimplementedError$(null));
      t1 = this.__LegacyAddress__addressProgram_F;
      t1 === $ && A.throwLateFieldNI("_addressProgram");
      return A._BitcoinAddressUtils_legacyToAddress(t1, network, this.get$type());
    },
    $eq(_, other) {
      var t1, t2, _this = this,
        _s15_ = "_addressProgram";
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof A.LegacyAddress))
        return false;
      if (A.getRuntimeTypeOfDartObject(_this) !== A.getRuntimeTypeOfDartObject(other))
        return false;
      if (_this.get$type() !== other.get$type())
        return false;
      t1 = _this.__LegacyAddress__addressProgram_F;
      t1 === $ && A.throwLateFieldNI(_s15_);
      t2 = other.__LegacyAddress__addressProgram_F;
      t2 === $ && A.throwLateFieldNI(_s15_);
      return t1 === t2;
    },
    get$hashCode(_) {
      var t1 = this.__LegacyAddress__addressProgram_F;
      t1 === $ && A.throwLateFieldNI("_addressProgram");
      return A.HashCodeGenerator_generateHashCode([t1, this.get$type()]);
    },
    $isBitcoinBaseAddress: 1
  };
  A.P2shAddress.prototype = {
    toAddress$1(network) {
      var t1 = this.type;
      if (!B.JSArray_methods.contains$1(network.get$supportedAddress(), t1))
        throw A.wrapException(A.DartBitcoinPluginException$("network does not support " + t1.value + " address.", null));
      return this.super$LegacyAddress$toAddress(network);
    },
    toScriptPubKey$0() {
      var t1 = this.__LegacyAddress__addressProgram_F;
      t1 === $ && A.throwLateFieldNI("_addressProgram");
      if (t1.length === 64)
        return A.Script_Script([B.BitcoinOpcode_OP_HASH256_170_opHash256, t1, B.BitcoinOpcode_OP_EQUAL_135_opEqual]);
      return A.Script_Script([B.BitcoinOpcode_OP_HASH160_169_opHash160, t1, B.BitcoinOpcode_OP_EQUAL_135_opEqual]);
    },
    $eq(_, other) {
      var t1, t2,
        _s15_ = "_addressProgram";
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.LegacyAddress))
        return false;
      if (A.getRuntimeTypeOfDartObject(this) !== A.getRuntimeTypeOfDartObject(other))
        return false;
      t1 = this.__LegacyAddress__addressProgram_F;
      t1 === $ && A.throwLateFieldNI(_s15_);
      t2 = other.__LegacyAddress__addressProgram_F;
      t2 === $ && A.throwLateFieldNI(_s15_);
      return t1 === t2;
    },
    get$hashCode(_) {
      var t1 = this.__LegacyAddress__addressProgram_F;
      t1 === $ && A.throwLateFieldNI("_addressProgram");
      return A.HashCodeGenerator_generateHashCode([t1]);
    },
    get$type() {
      return this.type;
    }
  };
  A.P2pkhAddress.prototype = {
    toScriptPubKey$0() {
      var t1 = this.__LegacyAddress__addressProgram_F;
      t1 === $ && A.throwLateFieldNI("_addressProgram");
      return A.Script_Script([B.BitcoinOpcode_OP_DUP_118_opDup, B.BitcoinOpcode_OP_HASH160_169_opHash160, t1, B.BitcoinOpcode_OP_EQUALVERIFY_136_opEqualVerify, B.BitcoinOpcode_OP_CHECKSIG_172_opCheckSig]);
    },
    get$type() {
      return this.type;
    }
  };
  A.P2pkAddress.prototype = {
    toScriptPubKey$0() {
      return A.Script_Script([this.publicKey, B.BitcoinOpcode_OP_CHECKSIG_172_opCheckSig]);
    },
    toAddress$1(network) {
      var out,
        tmp = A.SHA256_hash(A.BytesUtils_fromHexString(this.publicKey, false)),
        t1 = type$.int,
        t2 = J.JSArray_JSArray$growable(0, t1),
        t3 = A.List_List$filled(16, 0, false, t1),
        h = new A.RIPEMD160(t2, t3),
        t4 = type$.List_int,
        t5 = t4._as(A.List_List$filled(5, 0, false, t1));
      h.___RIPEMD__state_F = t5;
      h.reset$0();
      t4._as(tmp);
      if (h._hash$_finished)
        A.throwExpression(B.CryptoException_PCa);
      h._lengthInBytes = h._lengthInBytes + tmp.length;
      A.BytesUtils_validateListOfBytes(tmp);
      B.JSArray_methods.addAll$1(t2, tmp);
      h._iterate$0();
      out = A.List_List$filled(t5.length * 4, 0, false, t1);
      h.finish$1(out);
      A.zero(t5);
      A.zero(t3);
      B.JSArray_methods.clear$0(t2);
      h.reset$0();
      return A._BitcoinAddressUtils_legacyToAddress(A.BytesUtils_toHexString(out, true, null), network, B.PubKeyAddressType_P2PK);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.P2pkAddress))
        return false;
      return this.publicKey === other.publicKey;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.publicKey, B.PubKeyAddressType_P2PK]);
    },
    get$type() {
      return B.PubKeyAddressType_P2PK;
    }
  };
  A.BitcoinNetworkAddress.prototype = {};
  A.BitcoinAddress.prototype = {};
  A.DogeAddress.prototype = {};
  A.PepeAddress.prototype = {};
  A.LitecoinAddress.prototype = {};
  A.BitcoinCashAddress.prototype = {};
  A.DashAddress.prototype = {};
  A.BitcoinSVAddress.prototype = {};
  A.ElectraProtocolAddress.prototype = {};
  A.SegwitAddress.prototype = {
    get$addressProgram() {
      var t1 = this.__SegwitAddress_addressProgram_F;
      t1 === $ && A.throwLateFieldNI("addressProgram");
      return t1;
    },
    toAddress$1(network) {
      var t1, programBytes, t2, _this = this;
      if (!B.JSArray_methods.contains$1(network.get$supportedAddress(), _this.get$type()))
        throw A.wrapException(A.DartBitcoinPluginException$("network does not support " + _this.get$type().value + " address", null));
      t1 = _this.__SegwitAddress_addressProgram_F;
      t1 === $ && A.throwLateFieldNI("addressProgram");
      programBytes = A.BytesUtils_fromHexString(t1, false);
      t1 = network.get$p2wpkhHrp();
      t2 = [_this.segwitVersion];
      B.JSArray_methods.addAll$1(t2, A.Bech32BaseUtils_convertToBase32(programBytes));
      return A.Bech32EncoderBase_encodeBech32(t1, A.List_List$from(t2, true, type$.int), "1", A.segwit_bech32_SegwitBech32Encoder__computeChecksum$closure());
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof A.SegwitAddress))
        return false;
      if (A.getRuntimeTypeOfDartObject(_this) !== A.getRuntimeTypeOfDartObject(other))
        return false;
      if (_this.get$type() !== other.get$type())
        return false;
      _this.__SegwitAddress_addressProgram_F === $ && A.throwLateFieldNI("addressProgram");
      t1 = other.segwitVersion;
      return _this.segwitVersion === t1;
    },
    get$hashCode(_) {
      var t1 = this.__SegwitAddress_addressProgram_F;
      t1 === $ && A.throwLateFieldNI("addressProgram");
      return A.HashCodeGenerator_generateHashCode([t1, this.segwitVersion, this.get$type()]);
    },
    $isBitcoinBaseAddress: 1
  };
  A.P2wpkhAddress.prototype = {
    toScriptPubKey$0() {
      var t1 = this.__SegwitAddress_addressProgram_F;
      t1 === $ && A.throwLateFieldNI("addressProgram");
      return A.Script_Script([B.BitcoinOpcode_OP_0_0_op0, t1]);
    },
    get$type() {
      return B.SegwitAddressType_P2WPKH;
    }
  };
  A.P2trAddress.prototype = {
    toScriptPubKey$0() {
      var t1 = this.__SegwitAddress_addressProgram_F;
      t1 === $ && A.throwLateFieldNI("addressProgram");
      return A.Script_Script([B.BitcoinOpcode_OP_1_81_op1, t1]);
    },
    get$type() {
      return B.SegwitAddressType_P2TR;
    }
  };
  A.P2wshAddress.prototype = {
    toScriptPubKey$0() {
      var t1 = this.__SegwitAddress_addressProgram_F;
      t1 === $ && A.throwLateFieldNI("addressProgram");
      return A.Script_Script([B.BitcoinOpcode_OP_0_0_op0, t1]);
    },
    get$type() {
      return B.SegwitAddressType_P2WSH;
    }
  };
  A.TxInput.prototype = {
    toJson$0() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["txid", _this.txId, "txIndex", _this.txIndex, "scriptSig", A.LinkedHashMap_LinkedHashMap$_literal(["script", _this.scriptSig.script], t1, t2), "sequance", A.BytesUtils_toHexString(_this.sequence, true, null)], t1, t2);
    },
    toString$0(_) {
      var _this = this;
      return "TxInput{txId: " + _this.txId + ", txIndex: " + _this.txIndex + ", scriptSig: " + _this.scriptSig.toString$0(0) + ", sequence: " + A.BytesUtils_toHexString(_this.sequence, true, null) + "}";
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof A.TxInput))
        return false;
      return _this.txIndex === other.txIndex && _this.txId === other.txId && A.BytesUtils_bytesEqual(_this.sequence, other.sequence);
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.txIndex, this.txId, this.sequence]);
    }
  };
  A.BitcoinOpcode.prototype = {
    _enumToString$0() {
      return "BitcoinOpcode." + this._name;
    }
  };
  A.BitcoinOpcode_findByName_closure.prototype = {
    call$1(e) {
      return type$.BitcoinOpcode._as(e).name === this.name;
    },
    $signature: 133
  };
  A.BitcoinOpcode_findByValue_closure.prototype = {
    call$1(e) {
      return type$.BitcoinOpcode._as(e).value === this.value;
    },
    $signature: 133
  };
  A.TxOutput.prototype = {
    toJson$0() {
      var t1 = this.cashToken;
      t1 = t1 == null ? null : t1.toJson$0();
      return A.LinkedHashMap_LinkedHashMap$_literal(["cashToken", t1, "amount", this.amount.toString$0(0), "scriptPubKey", this.scriptPubKey.script], type$.String, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.cashToken;
      t1 = t1 == null ? null : t1.toString$0(0);
      return "TxOutput{cashToken: " + A.S(t1) + "}, amount: " + this.amount.toString$0(0) + ", script: " + A.Iterable_iterableToFullString(this.scriptPubKey.script, "[", "]") + "}";
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof A.TxOutput))
        return false;
      t1 = _this.amount.compareTo$1(0, other.amount);
      return t1 === 0 && _this.scriptPubKey.$eq(0, other.scriptPubKey) && J.$eq$(_this.cashToken, other.cashToken);
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.amount, this.scriptPubKey, this.cashToken]);
    }
  };
  A.Script.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["script", this.script], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this.script, "[", "]");
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof A.Script)
        return A.BytesUtils_bytesEqual(this._scriptBytes, other._scriptBytes);
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this._scriptBytes, B.List_empty1);
    }
  };
  A.BtcTransaction.prototype = {
    toJson$0() {
      var t4, t5, t6, t7, _this = this,
        t1 = _this.inputs,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.BtcTransaction_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      t2 = _this.outputs;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,Map<String,@>>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Map<String,@>(1)")._as(new A.BtcTransaction_toJson_closure0()), t4), t4._eval$1("ListIterable.E"));
      t3 = A.BytesUtils_toHexString(_this.locktime, true, null);
      t4 = A.BytesUtils_toHexString(_this.version, true, null);
      t5 = _this.witnesses;
      t6 = A._arrayInstanceType(t5);
      t7 = t6._eval$1("MappedListIterable<1,Map<String,@>>");
      t5 = A.List_List$_of(new A.MappedListIterable(t5, t6._eval$1("Map<String,@>(1)")._as(new A.BtcTransaction_toJson_closure1()), t7), t7._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["inputs", t1, "outputs", t2, "locktime", t3, "version", t4, "witnesses", t5], type$.String, type$.dynamic);
    },
    toString$0(_) {
      var _this = this;
      return "BtcTransaction{inputs: " + B.JSArray_methods.join$1(_this.inputs, ", ") + ", outputs: " + B.JSArray_methods.join$1(_this.outputs, ", ") + ", locktime: " + A.BytesUtils_toHexString(_this.locktime, true, null) + "}, version: " + A.BytesUtils_toHexString(_this.version, true, null) + ", witnesses:" + B.JSArray_methods.join$1(_this.witnesses, ",") + " ";
    }
  };
  A.BtcTransaction_toJson_closure.prototype = {
    call$1(e) {
      return type$.TxInput._as(e).toJson$0();
    },
    $signature: 320
  };
  A.BtcTransaction_toJson_closure0.prototype = {
    call$1(e) {
      return type$.TxOutput._as(e).toJson$0();
    },
    $signature: 357
  };
  A.BtcTransaction_toJson_closure1.prototype = {
    call$1(e) {
      return A.LinkedHashMap_LinkedHashMap$_literal(["stack", type$.TxWitnessInput._as(e).stack], type$.String, type$.dynamic);
    },
    $signature: 359
  };
  A.TxWitnessInput.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["stack", this.stack], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "TxWitnessInput{stack: " + B.JSArray_methods.join$1(this.stack, ", ") + "}";
    }
  };
  A.TaprootTree.prototype = {};
  A.TaprootLeaf.prototype = {
    toJson$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["script", A.LinkedHashMap_LinkedHashMap$_literal(["script", this.script.script], t1, t2), "leaf_version", this.leafVersion], t1, t2);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof A.TaprootLeaf && A.BytesUtils_bytesEqual(this._hash, other._hash))
        return true;
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this._hash, B.List_empty1);
    }
  };
  A.TaprootControlBlock.prototype = {};
  A.CashToken.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["category", _this.category, "amount", _this.amount.toString$0(0), "bitfield", _this.bitfield, "commitment", A.BytesUtils_toHexString(_this.commitment, true, null)], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof A.CashToken))
        return false;
      if (_this.category === other.category) {
        t1 = _this.amount.compareTo$1(0, other.amount);
        t1 = t1 === 0 && _this.bitfield === other.bitfield && A.BytesUtils_bytesEqual(_this.commitment, other.commitment);
      } else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return A.HashCodeGenerator_generateBytesHashCode(_this.commitment, A._setArrayType([_this.category, _this.amount, _this.bitfield], type$.JSArray_Object));
    },
    toString$0(_) {
      var value0, result, _this = this,
        t1 = _this.bitfield,
        value = _this.__CashToken_commitmentInHex_FI;
      if (value === $) {
        value = _this.__CashToken_hasCommitment_FI;
        if (value === $) {
          value0 = _this.__CashToken_hasNFT_FI;
          if (value0 === $) {
            value0 !== $ && A.throwLateFieldADI("hasNFT");
            value0 = _this.__CashToken_hasNFT_FI = (t1 & 32) !== 0;
          }
          result = !value0 ? false : (t1 & 64) !== 0;
          value !== $ && A.throwLateFieldADI("hasCommitment");
          value = _this.__CashToken_hasCommitment_FI = result;
        }
        result = value ? A.BytesUtils_toHexString(_this.commitment, true, null) : null;
        _this.__CashToken_commitmentInHex_FI !== $ && A.throwLateFieldADI("commitmentInHex");
        value = _this.__CashToken_commitmentInHex_FI = result;
      }
      return "CashToken{bitfield: " + t1 + ", commitment: " + A.S(value) + ", amount: " + _this.amount.toString$0(0) + ", category: " + _this.category + "}";
    }
  };
  A.ECPublic.prototype = {
    toBytes$1$mode(mode) {
      switch (mode) {
        case B.PubKeyModes_uncompressed:
          return this.publicKey.publicKey.point.toBytes$1(B.EncodeType_3);
        case B.PubKeyModes_compressed:
          return this.publicKey.publicKey.point.toBytes$1(B.EncodeType_0);
      }
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.ECPublic))
        return false;
      return other.publicKey.$eq(0, this.publicKey);
    },
    get$hashCode(_) {
      var t1 = this.publicKey.publicKey;
      return (A.HashCodeGenerator_generateHashCode([t1.generator.curve, t1.point]) ^ A.Primitives_objectHashCode(B.EllipticCurveTypes_6)) >>> 0;
    }
  };
  A.DartBitcoinPluginException.prototype = {};
  A.BasedUtxoNetwork_fromName_closure.prototype = {
    call$1(element) {
      return type$.BasedUtxoNetwork._as(element).get$value() === this.name;
    },
    $signature: 362
  };
  A.BasedUtxoNetwork_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartBitcoinPluginException$("No matching network found for the given name.", null));
    },
    $signature: 0
  };
  A.BitcoinSVNetwork.prototype = {
    get$p2pkhNetVer() {
      var t1 = this.conf.params.p2pkhNetVer;
      t1.toString;
      return t1;
    },
    get$p2shNetVer() {
      var t1 = this.conf.params.p2shNetVer;
      t1.toString;
      return t1;
    },
    get$p2wpkhHrp() {
      var t1 = this.conf.params.p2wpkhHrp;
      t1.toString;
      return t1;
    },
    get$supportedAddress() {
      return A._setArrayType([B.P2pkhAddressType_P2PKH, B.PubKeyAddressType_P2PK], type$.JSArray_BitcoinAddressType);
    },
    $isBasedUtxoNetwork: 1,
    get$value() {
      return this.value;
    },
    get$identifier() {
      return this.identifier;
    }
  };
  A.BitcoinNetwork.prototype = {
    get$p2pkhNetVer() {
      var t1 = this.conf.params.p2pkhNetVer;
      t1.toString;
      return t1;
    },
    get$p2shNetVer() {
      var t1 = this.conf.params.p2shNetVer;
      t1.toString;
      return t1;
    },
    get$p2wpkhHrp() {
      var t1 = this.conf.params.p2wpkhHrp;
      t1.toString;
      return t1;
    },
    get$supportedAddress() {
      return A._setArrayType([B.P2pkhAddressType_P2PKH, B.SegwitAddressType_P2WPKH, B.PubKeyAddressType_P2PK, B.SegwitAddressType_P2TR, B.SegwitAddressType_P2WSH, B.P2shAddressType_YXg, B.P2shAddressType_UPK, B.P2shAddressType_apR, B.P2shAddressType_vvf], type$.JSArray_BitcoinAddressType);
    },
    $isBasedUtxoNetwork: 1,
    get$value() {
      return this.value;
    },
    get$identifier() {
      return this.identifier;
    }
  };
  A.LitecoinNetwork.prototype = {
    get$p2pkhNetVer() {
      var t1 = this.conf.params.p2pkhStdNetVer;
      t1.toString;
      return t1;
    },
    get$p2shNetVer() {
      var t1 = this.conf.params.p2shStdNetVer;
      t1.toString;
      return t1;
    },
    get$p2wpkhHrp() {
      var t1 = this.conf.params.p2wpkhHrp;
      t1.toString;
      return t1;
    },
    $isBasedUtxoNetwork: 1,
    get$value() {
      return this.value;
    },
    get$supportedAddress() {
      return B.List_DXH;
    },
    get$identifier() {
      return this.identifier;
    }
  };
  A.DashNetwork.prototype = {
    get$p2pkhNetVer() {
      var t1 = this.conf.params.p2pkhNetVer;
      t1.toString;
      return t1;
    },
    get$p2shNetVer() {
      var t1 = this.conf.params.p2shNetVer;
      t1.toString;
      return t1;
    },
    get$p2wpkhHrp() {
      return A.throwExpression(B.DartBitcoinPluginException_sru);
    },
    $isBasedUtxoNetwork: 1,
    get$supportedAddress() {
      return B.List_H7c;
    },
    get$value() {
      return this.value;
    },
    get$identifier() {
      return this.identifier;
    }
  };
  A.DogecoinNetwork.prototype = {
    get$p2pkhNetVer() {
      var t1 = this.conf.params.p2pkhNetVer;
      t1.toString;
      return t1;
    },
    get$p2shNetVer() {
      var t1 = this.conf.params.p2shNetVer;
      t1.toString;
      return t1;
    },
    get$p2wpkhHrp() {
      return A.throwExpression(B.DartBitcoinPluginException_vXF);
    },
    $isBasedUtxoNetwork: 1,
    get$value() {
      return this.value;
    },
    get$supportedAddress() {
      return B.List_H7c;
    },
    get$identifier() {
      return this.identifier;
    }
  };
  A.BitcoinCashNetwork.prototype = {
    get$p2pkhNetVer() {
      var t1 = this.conf.params.p2pkhStdNetVer;
      t1.toString;
      return t1;
    },
    get$p2shNetVer() {
      var t1 = this.conf.params.p2shStdNetVer;
      t1.toString;
      return t1;
    },
    get$p2wpkhHrp() {
      return A.throwExpression(B.DartBitcoinPluginException_ovy);
    },
    $isBasedUtxoNetwork: 1,
    get$value() {
      return this.value;
    },
    get$supportedAddress() {
      return B.List_PNR;
    },
    get$identifier() {
      return this.identifier;
    }
  };
  A.PepeNetwork.prototype = {
    get$p2pkhNetVer() {
      return B.List_56;
    },
    get$p2shNetVer() {
      return B.List_22;
    },
    get$p2wpkhHrp() {
      return A.throwExpression(B.DartBitcoinPluginException_vXF);
    },
    $isBasedUtxoNetwork: 1,
    get$value() {
      return "pepecoinMainnet";
    },
    get$supportedAddress() {
      return B.List_H7c;
    },
    get$identifier() {
      return "pepecoin:mainnet";
    }
  };
  A.ElectraProtocolNetwork.prototype = {
    get$p2pkhNetVer() {
      var t1 = this.conf.params.p2pkhNetVer;
      t1.toString;
      return t1;
    },
    get$p2shNetVer() {
      var t1 = this.conf.params.p2shNetVer;
      t1.toString;
      return t1;
    },
    get$p2wpkhHrp() {
      var t1 = this.conf.params.p2wpkhHrp;
      t1.toString;
      return t1;
    },
    $isBasedUtxoNetwork: 1,
    get$value() {
      return this.value;
    },
    get$supportedAddress() {
      return B.List_DXH;
    },
    get$identifier() {
      return this.identifier;
    }
  };
  A.PsbtBuilderImpl.prototype = {
    toJson$0() {
      return this._psbt.toJson$0();
    }
  };
  A.PsbtBuilder.prototype = {};
  A.PsbtInputImpl.prototype = {};
  A.PsbtOutputImpl.prototype = {};
  A.PsbtSignerImpl.prototype = {};
  A.PsbtBuilderV0.prototype = {
    txInputs$0() {
      return A.ListHelper_clone(new A.WhereTypeIterable(this._psbt.global._global$_entries, type$.WhereTypeIterable_PsbtGlobalUnsignedTransaction).get$first(0).transaction.inputs, type$.TxInput);
    }
  };
  A.PsbtBuilderV2.prototype = {
    _buildInputSequence$1(index) {
      var t2, t3, sequenceBytes,
        t1 = this._psbt.input,
        sequence = t1.getInput$1$2(index, B.PsbtInputTypes_r7v, type$.PsbtInputSequenceNumber),
        locktime = t1.getInput$1$2(index, B.PsbtInputTypes_4FU, type$.PsbtInputRequiredTimeBasedLockTime),
        heightNumber = t1.getInput$1$2(index, B.PsbtInputTypes_rhP, type$.PsbtInputRequiredHeightBasedLockTime);
      t1 = sequence == null;
      if (t1 && locktime == null && heightNumber == null)
        return B.List_255_255_255_255;
      t2 = locktime == null;
      t3 = !t2;
      if (t3 && heightNumber != null)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT input " + index + ": Only one locktime field (PSBT_IN_REQUIRED_TIME_LOCKTIME or PSBT_IN_REQUIRED_HEIGHT_LOCKTIME) can be set.", null));
      if (!t1) {
        sequenceBytes = A.IntUtils_toBytes(sequence.sequence, B.C_Endian0, 4);
        if (t2 && heightNumber == null)
          return sequenceBytes;
        else if (A.BytesUtils_bytesEqual(B.List_255_255_255_255, sequenceBytes)) {
          if (t3 && A.BytesUtils_bytesEqual(B.List_255_255_255_255, A.IntUtils_toBytes(locktime.locktime, B.C_Endian0, 4)))
            return sequenceBytes;
          throw A.wrapException(A.DartBitcoinPluginException$("Invalid PSBT input: Locktime is set, but sequence is 0xFFFFFFFF (disable locktime).", null));
        }
      }
      t1 = t2 ? null : A.IntUtils_toBytes(locktime.locktime, B.C_Endian0, 4);
      return t1 == null ? A.IntUtils_toBytes(heightNumber.height, B.C_Endian0, 4) : t1;
    },
    txInputs$0() {
      var t2, t3, i, txId, txIndex, sequence, t4, t5, toHex,
        _s19_ = "Invalid Psbt input ",
        t1 = this._psbt.input,
        _length = t1._inputs$_entries.length,
        _list = J.JSArray_JSArray$allocateGrowable(_length, type$.TxInput);
      for (t2 = type$.PsbtInputPreviousTXID, t3 = type$.PsbtInputSpentOutputIndex, i = 0; i < _length; ++i) {
        txId = t1.getInput$1$2(i, B.PsbtInputTypes_JVk, t2);
        txIndex = t1.getInput$1$2(i, B.PsbtInputTypes_lMe, t3);
        if (txId == null)
          A.throwExpression(A.DartBitcoinPluginException$(_s19_ + i + ": Missing required field: previous tx id (PSBT_IN_PREVIOUS_TXID)", null));
        if (txIndex == null)
          A.throwExpression(A.DartBitcoinPluginException$(_s19_ + i + ": Missing required field: spent output index (PSBT_IN_OUTPUT_INDEX)", null));
        sequence = this._buildInputSequence$1(i);
        t4 = txId.txId;
        t5 = A._arrayInstanceType(t4)._eval$1("ReversedListIterable<1>");
        t4 = A.List_List$_of(new A.ReversedListIterable(t4, t5), t5._eval$1("ListIterable.E"));
        toHex = B.C__Hex.encode$2$lowerCase(t4, true);
        _list[i] = A.TxInput_TxInput(null, sequence, toHex, txIndex.index);
      }
      return _list;
    }
  };
  A._PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl.prototype = {};
  A._PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl_PsbtInputImpl.prototype = {};
  A._PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl_PsbtInputImpl_PsbtOutputImpl.prototype = {};
  A.PsbtTransactionInput.prototype = {};
  A.PsbtByteReader.prototype = {
    get$length(_) {
      return this.bytes.length;
    },
    read$1($length) {
      var t1 = this._offset,
        bytes = B.JSArray_methods.sublist$2(this.bytes, t1, t1 + $length);
      this._offset += $length;
      return bytes;
    },
    readLength$0() {
      var _this = this,
        $length = A.IntUtils_decodeVarint(B.JSArray_methods.sublist$1(_this.bytes, _this._offset)),
        t1 = _this._offset,
        t2 = $length.item2;
      if (typeof t2 !== "number")
        return A.iae(t2);
      _this._offset = t1 + t2;
      return $length.item1;
    }
  };
  A.PsbtGlobalTypes.prototype = {
    _enumToString$0() {
      return "PsbtGlobalTypes." + this._name;
    }
  };
  A.PsbtGlobalTypes_find_closure.prototype = {
    call$1(e) {
      return type$.PsbtGlobalTypes._as(e).flag === this.flag;
    },
    $signature: 86
  };
  A.PsbtGlobal.prototype = {
    toKeyPairs$0() {
      var t1 = this._global$_entries,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,PsbtKeyPair>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("PsbtKeyPair(1)")._as(new A.PsbtGlobal_toKeyPairs_closure()), t3), t3._eval$1("ListIterable.E"));
      return t1;
    },
    toJson$0() {
      var t1 = this._global$_entries,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.PsbtGlobal_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["entries", t1], type$.String, type$.dynamic);
    }
  };
  A.PsbtGlobal_PsbtGlobal_closure.prototype = {
    call$1(e) {
      return type$.PsbtGlobalData._as(e).keyPair.key;
    },
    $signature: 477
  };
  A.PsbtGlobal_PsbtGlobal_closure0.prototype = {
    call$1(e) {
      var t1;
      type$.PsbtGlobalTypes._as(e);
      if (e.required) {
        t1 = e.allowedVersion;
        t1 = t1 == null || t1 === this.version;
      } else
        t1 = false;
      return t1;
    },
    $signature: 86
  };
  A.PsbtGlobal_PsbtGlobal_closure1.prototype = {
    call$1(e) {
      return type$.PsbtGlobalData._as(e).type === this.i;
    },
    $signature: 536
  };
  A.PsbtGlobal_PsbtGlobal_closure2.prototype = {
    call$0() {
      return A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT global: Missing required field " + this.i.psbtName + " for PSBT version " + this.version.name + ".", null));
    },
    $signature: 0
  };
  A.PsbtGlobal_toKeyPairs_closure.prototype = {
    call$1(e) {
      return type$.PsbtGlobalData._as(e).keyPair;
    },
    $signature: 535
  };
  A.PsbtGlobal_toJson_closure.prototype = {
    call$1(e) {
      return type$.PsbtGlobalData._as(e).toJson$0();
    },
    $signature: 530
  };
  A.PsbtGlobalData.prototype = {
    toString$0(_) {
      return this.type._name;
    }
  };
  A.PsbtGlobalUnsignedTransaction.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "transaction", this.transaction.toJson$0()], type$.String, type$.dynamic);
    }
  };
  A.PsbtGlobalUnsignedTransaction_PsbtGlobalUnsignedTransaction$deserialize_closure.prototype = {
    call$1(e) {
      return type$.TxInput._as(e).scriptSig.$eq(0, $.$get$Script_empty());
    },
    $signature: 529
  };
  A.PsbtGlobalExtendedPublicKey.prototype = {
    toJson$0() {
      var _this = this,
        t1 = A.BytesUtils_toHexString(_this.xPub, true, null),
        t2 = A.BytesUtils_toHexString(_this.fingerprint, true, null),
        t3 = _this.indexes,
        t4 = A._arrayInstanceType(t3),
        t5 = t4._eval$1("MappedListIterable<1,int>");
      t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("int(1)")._as(new A.PsbtGlobalExtendedPublicKey_toJson_closure()), t5), t5._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type._name, "xPub", t1, "fingerprint", t2, "indexes", t3], type$.String, type$.dynamic);
    }
  };
  A.PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey_closure.prototype = {
    call$0() {
      var t1 = this.indexes,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,List<int>>"),
        t4 = t3._eval$1("ExpandIterable<Iterable.E,int>"),
        indexesBytes = A.List_List$_of(new A.ExpandIterable(new A.MappedListIterable(t1, t2._eval$1("List<int>(1)")._as(new A.PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey__closure()), t3), t3._eval$1("Iterable<int>(Iterable.E)")._as(new A.PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey__closure0()), t4), t4._eval$1("Iterable.E"));
      t1 = A.PsbtKey$(1, this.xPub);
      t2 = type$.int;
      t3 = A.List_List$_of(this.fingerprint, t2);
      B.JSArray_methods.addAll$1(t3, indexesBytes);
      A.BytesUtils_validateListOfBytes(t3);
      return new A.PsbtKeyPair(t1, new A.PsbtValue(A.List_List$unmodifiable(t3, t2)));
    },
    $signature: 56
  };
  A.PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey__closure.prototype = {
    call$1(e) {
      return A.IntUtils_toBytes(type$.Bip32KeyIndex._as(e).index, B.C_Endian0, 4);
    },
    $signature: 528
  };
  A.PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey__closure0.prototype = {
    call$1(e) {
      return type$.List_int._as(e);
    },
    $signature: 19
  };
  A.PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey$deserialize_closure.prototype = {
    call$1(i) {
      var offset = i * 4,
        t1 = offset;
      if (typeof t1 !== "number")
        return t1.$add();
      return A.Bip32KeyIndex_Bip32KeyIndex(A.IntUtils_fromBytes(B.JSArray_methods.sublist$2(this.indexesBytes, offset, t1 + 4), B.C_Endian0, false));
    },
    $signature: 29
  };
  A.PsbtGlobalExtendedPublicKey_toJson_closure.prototype = {
    call$1(e) {
      return type$.Bip32KeyIndex._as(e).index;
    },
    $signature: 28
  };
  A.PsbtGlobalTransactionVersion.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "version", this.version], type$.String, type$.dynamic);
    }
  };
  A.PsbtGlobalFallbackLocktime.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "locktime", this.locktime], type$.String, type$.dynamic);
    }
  };
  A.PsbtGlobalInputCount.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "count", this.count], type$.String, type$.dynamic);
    }
  };
  A.PsbtGlobalOutputCount.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "count", this.count], type$.String, type$.dynamic);
    }
  };
  A.PsbtGlobalTransactionModifiableFlags.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "flags", this.flags], type$.String, type$.dynamic);
    }
  };
  A.PsbtGlobalSilentPaymentGlobalECDHShare.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "scanKey", A.BytesUtils_toHexString(this.scanKey, true, null), "share", A.BytesUtils_toHexString(this.share, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtGlobalSilentPaymentGlobalDLEQProof.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "scanKey", A.BytesUtils_toHexString(this.scanKey, true, null), "proof", A.BytesUtils_toHexString(this.proof, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtGlobalPSBTVersionNumber.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "version", this.version.version], type$.String, type$.dynamic);
    }
  };
  A.PsbtGlobalPSBTVersionNumber_PsbtGlobalPSBTVersionNumber$deserialize_closure.prototype = {
    call$1(e) {
      return type$.PsbtVersion._as(e).version === this.version;
    },
    $signature: 499
  };
  A.PsbtGlobalPSBTVersionNumber_PsbtGlobalPSBTVersionNumber$deserialize_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartBitcoinPluginException$("Unsported PSBT Version " + this.version, null));
    },
    $signature: 0
  };
  A.PsbtGlobalProprietaryUseType.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type._name, "identifier", A.BytesUtils_toHexString(_this.identifier, true, null), "subkeydata", A.BytesUtils_toHexString(_this.subkeydata, true, null), "data", A.BytesUtils_toHexString(_this.data, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtGlobalUnknow.prototype = {
    toJson$0() {
      var t1 = this.keyPair,
        t2 = t1.key,
        t3 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "key", A.LinkedHashMap_LinkedHashMap$_literal(["keyType", t2.type, "keyData", A.BytesUtils_tryToHexString(t2.extraData, null)], t3, type$.nullable_Object), "value", A.LinkedHashMap_LinkedHashMap$_literal(["data", A.BytesUtils_toHexString(t1.value.data, true, null)], t3, t3)], t3, type$.dynamic);
    }
  };
  A.PsbtInputTypes.prototype = {
    _enumToString$0() {
      return "PsbtInputTypes." + this._name;
    }
  };
  A.PsbtInputTypes_find_closure.prototype = {
    call$1(e) {
      return type$.PsbtInputTypes._as(e).flag === this.flag;
    },
    $signature: 136
  };
  A.PsbtInput.prototype = {
    get$length(_) {
      return this._inputs$_entries.length;
    },
    _validateIndex$1(inputIndex) {
      var t1 = this._inputs$_entries;
      if (inputIndex >= t1.length)
        throw A.wrapException(A.DartBitcoinPluginException$("Invalid input index: " + inputIndex + ". The index exceeds the number of available entries.", null));
      return A.ListHelper_clone(t1[inputIndex], type$.PsbtInputData);
    },
    getInput$1$2(index, type, $T) {
      var input, t2, data,
        t1 = type$.PsbtInputData;
      A.checkTypeBound($T, t1, "T", "getInput");
      input = this._validateIndex$1(index);
      t2 = A._arrayInstanceType(input);
      data = new A.WhereIterable(input, t2._eval$1("bool(1)")._as(new A.PsbtInput_getInput_closure(type)), t2._eval$1("WhereIterable<1>"));
      if (!data.get$iterator(0).moveNext$0())
        return null;
      if (data.get$length(0) !== 1)
        throw A.wrapException(A.DartBitcoinPluginException$("Multiple inputs with type '" + type._name + "' found. Use 'getInputs' to retrieve data for multiple globals", null));
      t2 = data.get$first(0);
      A.checkTypeBound($T, t1, "T", "cast");
      if (!$T._is(t2))
        A.throwExpression(A.DartBitcoinPluginException$("Invalid cast: expected " + A.getRuntimeTypeOfDartObject(A.createRuntimeType($T)).toString$0(0) + ", but found " + A.getRuntimeTypeOfDartObject(t2).toString$0(0) + ".", A.LinkedHashMap_LinkedHashMap$_literal(["expected", A.createRuntimeType($T).toString$0(0), "type", A.getRuntimeTypeOfDartObject(t2).toString$0(0)], type$.String, type$.dynamic)));
      return $T._as(t2);
    },
    getInputs$1$2(index, type, $T) {
      var input, t1, t2, data;
      A.checkTypeBound($T, type$.PsbtInputData, "T", "getInputs");
      input = this._validateIndex$1(index);
      t1 = A._arrayInstanceType(input);
      t2 = t1._eval$1("WhereIterable<1>");
      data = new A.WhereIterable(input, t1._eval$1("bool(1)")._as(new A.PsbtInput_getInputs_closure(type)), t2);
      if (!data.get$iterator(0).moveNext$0())
        return null;
      t1 = A.List_List$_of(data, t2._eval$1("Iterable.E"));
      return new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("@<1>")._bind$1($T)._eval$1("CastList<1,2>"));
    },
    toJson$0() {
      var t1 = this._inputs$_entries,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,List<Map<String,@>>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("List<Map<String,@>>(1)")._as(new A.PsbtInput_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["entries", t1], type$.String, type$.dynamic);
    },
    toKeyPairs$0() {
      var t1 = this._inputs$_entries,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,List<PsbtKeyPair>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("List<PsbtKeyPair>(1)")._as(new A.PsbtInput_toKeyPairs_closure()), t3), t3._eval$1("ListIterable.E"));
      return t1;
    },
    clone$0() {
      var t1 = this._inputs$_entries,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,List<PsbtInputData>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("List<PsbtInputData>(1)")._as(new A.PsbtInput_clone_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.PsbtInput_PsbtInput(t1, this.version);
    },
    toString$0(_) {
      return "inputs: " + B.JSArray_methods.join$1(this._inputs$_entries, ", ");
    }
  };
  A.PsbtInput$__closure.prototype = {
    call$1(e) {
      return A.List_List$unmodifiable(type$.List_PsbtInputData._as(e), type$.PsbtInputData);
    },
    $signature: 166
  };
  A.PsbtInput_PsbtInput_closure.prototype = {
    call$1(e) {
      var t1;
      type$.PsbtInputTypes._as(e);
      if (e.required) {
        t1 = e.allowedVersion;
        t1 = t1 == null || t1 === this.version;
      } else
        t1 = false;
      return t1;
    },
    $signature: 136
  };
  A.PsbtInput_PsbtInput_closure0.prototype = {
    call$1(e) {
      return type$.PsbtInputData._as(e).keyPair.key;
    },
    $signature: 495
  };
  A.PsbtInput_PsbtInput_closure1.prototype = {
    call$1(e) {
      return type$.PsbtInputData._as(e).type === this.i;
    },
    $signature: 52
  };
  A.PsbtInput_PsbtInput_closure2.prototype = {
    call$0() {
      return A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT Input: Missing required field " + this.i.psbtName + " for PSBT version " + this.version.name + ".", null));
    },
    $signature: 0
  };
  A.PsbtInput_PsbtInput$fromKeyPairs_closure.prototype = {
    call$1(e) {
      var t1 = J.map$1$1$ax(type$.List_PsbtKeyPair._as(e), A.inputs_PsbtInputData___deserialize_tearOff$closure(), type$.PsbtInputData);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return t1;
    },
    $signature: 486
  };
  A.PsbtInput_getInput_closure.prototype = {
    call$1(e) {
      return type$.PsbtInputData._as(e).type === this.type;
    },
    $signature: 52
  };
  A.PsbtInput_getInputs_closure.prototype = {
    call$1(e) {
      return type$.PsbtInputData._as(e).type === this.type;
    },
    $signature: 52
  };
  A.PsbtInput_toJson_closure.prototype = {
    call$1(e) {
      var t1 = J.map$1$1$ax(type$.List_PsbtInputData._as(e), new A.PsbtInput_toJson__closure(), type$.Map_String_dynamic);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return t1;
    },
    $signature: 481
  };
  A.PsbtInput_toJson__closure.prototype = {
    call$1(e) {
      return type$.PsbtInputData._as(e).toJson$0();
    },
    $signature: 478
  };
  A.PsbtInput_toKeyPairs_closure.prototype = {
    call$1(e) {
      var t1 = J.map$1$1$ax(type$.List_PsbtInputData._as(e), new A.PsbtInput_toKeyPairs__closure(), type$.PsbtKeyPair);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return t1;
    },
    $signature: 476
  };
  A.PsbtInput_toKeyPairs__closure.prototype = {
    call$1(e) {
      return type$.PsbtInputData._as(e).keyPair;
    },
    $signature: 475
  };
  A.PsbtInput_clone_closure.prototype = {
    call$1(e) {
      return A.ListHelper_clone(type$.List_PsbtInputData._as(e), type$.PsbtInputData);
    },
    $signature: 166
  };
  A.PsbtInputData.prototype = {
    toString$0(_) {
      return this.type._name;
    }
  };
  A.PsbtInputNonWitnessUtxo.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "transaction", this.transaction.toJson$0()], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputWitnessUtxo.prototype = {
    toJson$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "amount", this.amount.toString$0(0), "scriptPubKey", A.LinkedHashMap_LinkedHashMap$_literal(["script", this.scriptPubKey.script], t1, t2)], t1, t2);
    }
  };
  A.PsbtInputPartialSig.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type._name, "signature", A.BytesUtils_toHexString(_this.signature, true, null), "publicKey", A.BytesUtils_toHexString(_this.publicKey.toBytes$1$mode(_this.mode), true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputSigHash.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "sighash", this.sighash], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputRedeemScript.prototype = {
    toJson$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "redeemScript", A.LinkedHashMap_LinkedHashMap$_literal(["script", this.redeemScript.script], t1, t2)], t1, t2);
    }
  };
  A.PsbtInputWitnessScript.prototype = {
    toJson$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "witnessScript", A.LinkedHashMap_LinkedHashMap$_literal(["script", this.witnessScript.script], t1, t2)], t1, t2);
    }
  };
  A.PsbtInputBip32DerivationPath.prototype = {
    toJson$0() {
      var _this = this,
        t1 = A.BytesUtils_toHexString(_this.fingerprint, true, null),
        t2 = _this.indexes,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,int>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("int(1)")._as(new A.PsbtInputBip32DerivationPath_toJson_closure()), t4), t4._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type._name, "fingerprint", t1, "indexes", t2, "publicKey", A.BytesUtils_toHexString(_this.publicKey, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputBip32DerivationPath_PsbtInputBip32DerivationPath$deserialize_closure.prototype = {
    call$1(i) {
      var offset = i * 4,
        t1 = offset;
      if (typeof t1 !== "number")
        return t1.$add();
      return A.Bip32KeyIndex_Bip32KeyIndex(A.IntUtils_fromBytes(B.JSArray_methods.sublist$2(this.indexesBytes, offset, t1 + 4), B.C_Endian0, false));
    },
    $signature: 29
  };
  A.PsbtInputBip32DerivationPath_toJson_closure.prototype = {
    call$1(e) {
      return type$.Bip32KeyIndex._as(e).index;
    },
    $signature: 28
  };
  A.PsbtInputFinalizedScriptSig.prototype = {
    toJson$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "finalizedScriptSig", A.LinkedHashMap_LinkedHashMap$_literal(["script", this.finalizedScriptSig.script], t1, t2)], t1, t2);
    }
  };
  A.PsbtInputFinalizedScriptWitness.prototype = {
    toJson$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "finalizedScriptWitness", A.LinkedHashMap_LinkedHashMap$_literal(["stack", this.finalizedScriptWitness.stack], t1, t2)], t1, t2);
    }
  };
  A.PsbtInputPorCommitments.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "commitmentMessage", this.commitmentMessage], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputRipemd160.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "preimage", A.BytesUtils_toHexString(this.preimage, true, null), "hash", A.BytesUtils_toHexString(this.hash, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputSha256.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "preimage", A.BytesUtils_toHexString(this.preimage, true, null), "hash", A.BytesUtils_toHexString(this.hash, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputHash160.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "preimage", A.BytesUtils_toHexString(this.preimage, true, null), "hash", A.BytesUtils_toHexString(this.hash, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputHash256.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "preimage", A.BytesUtils_toHexString(this.preimage, true, null), "hash", A.BytesUtils_toHexString(this.hash, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputPreviousTXID.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof A.PsbtInputPreviousTXID && A.BytesUtils_bytesEqual(other.txId, this.txId))
        return true;
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this.txId, A._setArrayType([this.type], type$.JSArray_Object));
    },
    toJson$0() {
      var t1 = this.txId,
        t2 = A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>");
      t1 = A.List_List$_of(new A.ReversedListIterable(t1, t2), t2._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "txId", A.BytesUtils_toHexString(t1, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputSpentOutputIndex.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof A.PsbtInputSpentOutputIndex && this.index === other.index)
        return true;
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.index, this.type]);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "index", this.index], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputSpentOutputIndex_PsbtInputSpentOutputIndex_closure.prototype = {
    call$0() {
      var indexBytes = A.IntUtils_toBytes(this.index, B.C_Endian0, 4),
        t1 = A.PsbtKey$(15, null);
      A.BytesUtils_validateListOfBytes(indexBytes);
      return new A.PsbtKeyPair(t1, new A.PsbtValue(A.List_List$unmodifiable(indexBytes, type$.int)));
    },
    $signature: 56
  };
  A.PsbtInputSequenceNumber.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "sequence", this.sequence], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputSequenceNumber_PsbtInputSequenceNumber_closure.prototype = {
    call$0() {
      var sequenceBytes = A.IntUtils_toBytes(this.sequence, B.C_Endian0, 4),
        t1 = A.PsbtKey$(16, null);
      A.BytesUtils_validateListOfBytes(sequenceBytes);
      return new A.PsbtKeyPair(t1, new A.PsbtValue(A.List_List$unmodifiable(sequenceBytes, type$.int)));
    },
    $signature: 56
  };
  A.PsbtInputRequiredTimeBasedLockTime.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "locktime", this.locktime], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputRequiredHeightBasedLockTime.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "height", this.height], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputDataSignature.prototype = {};
  A.PsbtInputTaprootKeySpendSignature.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "signature", A.BytesUtils_toHexString(this.signature, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputTaprootScriptSpendSignature.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type._name, "signature", A.BytesUtils_toHexString(_this.signature, true, null), "xOnlyPubKey", A.BytesUtils_toHexString(_this.xOnlyPubKey, true, null), "leafHash", A.BytesUtils_toHexString(_this.leafHash, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputTaprootLeafScript.prototype = {
    toJson$0() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type._name, "controllBlock", A.BytesUtils_toHexString(_this.controllBlock, true, null), "script", A.LinkedHashMap_LinkedHashMap$_literal(["script", _this.script.script], t1, t2), "leafVersion", _this.leafVersion], t1, t2);
    }
  };
  A.PsbtInputTaprootKeyBip32DerivationPath.prototype = {
    toJson$0() {
      var t6, _this = this,
        t1 = A.BytesUtils_toHexString(_this.xOnlyPubKey, true, null),
        t2 = A.BytesUtils_toHexString(_this.fingerprint, true, null),
        t3 = _this.leavesHashes,
        t4 = A._arrayInstanceType(t3),
        t5 = t4._eval$1("MappedListIterable<1,String>");
      t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("String(1)")._as(new A.PsbtInputTaprootKeyBip32DerivationPath_toJson_closure()), t5), t5._eval$1("ListIterable.E"));
      t4 = _this.indexes;
      t5 = A._arrayInstanceType(t4);
      t6 = t5._eval$1("MappedListIterable<1,int>");
      t4 = A.List_List$_of(new A.MappedListIterable(t4, t5._eval$1("int(1)")._as(new A.PsbtInputTaprootKeyBip32DerivationPath_toJson_closure0()), t6), t6._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type._name, "xOnlyPubKey", t1, "fingerprint", t2, "leavesHashes", t3, "indexes", t4], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputTaprootKeyBip32DerivationPath$__closure.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return A.List_List$unmodifiable(e, type$.int);
    },
    $signature: 19
  };
  A.PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize_closure.prototype = {
    call$1(i) {
      var offset = i * 32,
        t1 = offset;
      if (typeof t1 !== "number")
        return t1.$add();
      return B.JSArray_methods.sublist$2(this.data, offset, t1 + 32);
    },
    $signature: 53
  };
  A.PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize_closure0.prototype = {
    call$1(i) {
      var offset = i * 4,
        t1 = offset;
      if (typeof t1 !== "number")
        return t1.$add();
      return A.Bip32KeyIndex_Bip32KeyIndex(A.IntUtils_fromBytes(B.JSArray_methods.sublist$2(this.indexesBytes, offset, t1 + 4), B.C_Endian0, false));
    },
    $signature: 29
  };
  A.PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize_closure1.prototype = {
    call$1(element) {
      return J.get$length$asx(type$.List_int._as(element)) === 32;
    },
    $signature: 54
  };
  A.PsbtInputTaprootKeyBip32DerivationPath_toJson_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_toHexString(type$.List_int._as(e), true, null);
    },
    $signature: 17
  };
  A.PsbtInputTaprootKeyBip32DerivationPath_toJson_closure0.prototype = {
    call$1(e) {
      return type$.Bip32KeyIndex._as(e).index;
    },
    $signature: 28
  };
  A.PsbtInputTaprootInternalKey.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "xOnlyPubKey", A.BytesUtils_toHexString(this.xOnlyPubKey, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputTaprootMerkleRoot.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "hash", A.BytesUtils_toHexString(this.hash, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputMuSig2ParticipantPublicKeys.prototype = {
    toJson$0() {
      var t1 = A.BytesUtils_toHexString(this.aggregatePubKey.toBytes$1$mode(B.PubKeyModes_compressed), true, null),
        t2 = this.pubKeys,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,String>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("String(1)")._as(new A.PsbtInputMuSig2ParticipantPublicKeys_toJson_closure()), t4), t4._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "aggregatePubKey", t1, "pubKeys", t2], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputMuSig2ParticipantPublicKeys_toJson_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_toHexString(type$.ECPublic._as(e).toBytes$1$mode(B.PubKeyModes_compressed), true, null);
    },
    $signature: 466
  };
  A.PsbtInputMuSig2PublicNonce.prototype = {
    toJson$0() {
      var _this = this, _null = null;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type._name, "publicKey", A.BytesUtils_toHexString(_this.publicKey.toBytes$1$mode(B.PubKeyModes_compressed), true, _null), "plainPublicKey", A.BytesUtils_toHexString(_this.plainPublicKey.toBytes$1$mode(B.PubKeyModes_compressed), true, _null), "tapleafHash", A.BytesUtils_tryToHexString(_this.tapleafHash, _null), "publicNonce", A.BytesUtils_toHexString(_this.publicNonce, true, _null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputMuSig2ParticipantPartialSignature.prototype = {
    toJson$0() {
      var _this = this, _null = null;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type._name, "publicKey", A.BytesUtils_toHexString(_this.publicKey.toBytes$1$mode(B.PubKeyModes_compressed), true, _null), "plainPublicKey", A.BytesUtils_toHexString(_this.plainPublicKey.toBytes$1$mode(B.PubKeyModes_compressed), true, _null), "tapleafHash", A.BytesUtils_tryToHexString(_this.tapleafHash, _null), "partialSignature", A.BytesUtils_toHexString(_this.signature, true, _null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputSilentPaymentInputECDHShare.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "scanKey", A.BytesUtils_toHexString(this.scanKey, true, null), "share", A.BytesUtils_toHexString(this.share, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputSilentPaymentInputDLEQProof.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "scanKey", A.BytesUtils_toHexString(this.scanKey, true, null), "proof", A.BytesUtils_toHexString(this.proof, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputProprietaryUseType.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type._name, "identifier", A.BytesUtils_toHexString(_this.identifier, true, null), "subkeydata", A.BytesUtils_toHexString(_this.subkeydata, true, null), "data", A.BytesUtils_toHexString(_this.data, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtInputUnknow.prototype = {
    toJson$0() {
      var t1 = this.keyPair,
        t2 = t1.key,
        t3 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "key", A.LinkedHashMap_LinkedHashMap$_literal(["keyType", t2.type, "keyData", A.BytesUtils_tryToHexString(t2.extraData, null)], t3, type$.nullable_Object), "value", A.LinkedHashMap_LinkedHashMap$_literal(["data", A.BytesUtils_toHexString(t1.value.data, true, null)], t3, t3)], t3, type$.dynamic);
    }
  };
  A.PsbtOutputTypes.prototype = {
    _enumToString$0() {
      return "PsbtOutputTypes." + this._name;
    }
  };
  A.PsbtOutputTypes_find_closure.prototype = {
    call$1(e) {
      return type$.PsbtOutputTypes._as(e).flag === this.flag;
    },
    $signature: 143
  };
  A.PsbtOutput.prototype = {
    get$length(_) {
      return this._entries.length;
    },
    toKeyPairs$0() {
      var t1 = this._entries,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,List<PsbtKeyPair>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("List<PsbtKeyPair>(1)")._as(new A.PsbtOutput_toKeyPairs_closure()), t3), t3._eval$1("ListIterable.E"));
      return t1;
    },
    toJson$0() {
      var t1 = this._entries,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,List<Map<String,@>>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("List<Map<String,@>>(1)")._as(new A.PsbtOutput_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["entries", t1], type$.String, type$.dynamic);
    },
    clone$0() {
      var t1 = this._entries,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,List<PsbtOutputData>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("List<PsbtOutputData>(1)")._as(new A.PsbtOutput_clone_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.PsbtOutput_PsbtOutput(t1, this.version);
    }
  };
  A.PsbtOutput$__closure.prototype = {
    call$1(e) {
      return A.List_List$unmodifiable(type$.List_PsbtOutputData._as(e), type$.PsbtOutputData);
    },
    $signature: 148
  };
  A.PsbtOutput_PsbtOutput_closure.prototype = {
    call$1(e) {
      var t1;
      type$.PsbtOutputTypes._as(e);
      if (e.required) {
        t1 = e.allowedVersion;
        t1 = t1 == null || t1 === this.version;
      } else
        t1 = false;
      return t1;
    },
    $signature: 143
  };
  A.PsbtOutput_PsbtOutput_closure0.prototype = {
    call$1(e) {
      return type$.PsbtOutputData._as(e).keyPair.key;
    },
    $signature: 462
  };
  A.PsbtOutput_PsbtOutput_closure1.prototype = {
    call$1(e) {
      return type$.PsbtOutputData._as(e).type === this.i;
    },
    $signature: 440
  };
  A.PsbtOutput_PsbtOutput_closure2.prototype = {
    call$0() {
      return A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT Output: Missing required field " + this.i.psbtName + " for PSBT version " + this.version.name + ".", null));
    },
    $signature: 0
  };
  A.PsbtOutput_PsbtOutput$fromKeyPairs_closure.prototype = {
    call$1(e) {
      var t1 = J.map$1$1$ax(type$.List_PsbtKeyPair._as(e), A.outputs_PsbtOutputData___deserialize_tearOff$closure(), type$.PsbtOutputData);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return t1;
    },
    $signature: 405
  };
  A.PsbtOutput_toKeyPairs_closure.prototype = {
    call$1(e) {
      var t1 = J.map$1$1$ax(type$.List_PsbtOutputData._as(e), new A.PsbtOutput_toKeyPairs__closure(), type$.PsbtKeyPair);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return t1;
    },
    $signature: 403
  };
  A.PsbtOutput_toKeyPairs__closure.prototype = {
    call$1(e) {
      return type$.PsbtOutputData._as(e).keyPair;
    },
    $signature: 402
  };
  A.PsbtOutput_toJson_closure.prototype = {
    call$1(e) {
      var t1 = J.map$1$1$ax(type$.List_PsbtOutputData._as(e), new A.PsbtOutput_toJson__closure(), type$.Map_String_dynamic);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return t1;
    },
    $signature: 401
  };
  A.PsbtOutput_toJson__closure.prototype = {
    call$1(e) {
      return type$.PsbtOutputData._as(e).toJson$0();
    },
    $signature: 397
  };
  A.PsbtOutput_clone_closure.prototype = {
    call$1(e) {
      return A.ListHelper_clone(type$.List_PsbtOutputData._as(e), type$.PsbtOutputData);
    },
    $signature: 148
  };
  A.PsbtOutputData.prototype = {
    toString$0(_) {
      return this.type._name;
    }
  };
  A.PsbtOutputRedeemScript.prototype = {
    toJson$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "redeemScript", A.LinkedHashMap_LinkedHashMap$_literal(["script", this.redeemScript.script], t1, t2)], t1, t2);
    }
  };
  A.PsbtOutputWitnessScript.prototype = {
    toJson$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "witnessScript", A.LinkedHashMap_LinkedHashMap$_literal(["script", this.witnessScript.script], t1, t2)], t1, t2);
    }
  };
  A.PsbtOutputBip32DerivationPath.prototype = {
    toJson$0() {
      var _this = this,
        t1 = A.BytesUtils_toHexString(_this.fingerprint, true, null),
        t2 = _this.indexes,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,int>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("int(1)")._as(new A.PsbtOutputBip32DerivationPath_toJson_closure()), t4), t4._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type._name, "fingerprint", t1, "indexes", t2, "public_key", A.BytesUtils_toHexString(_this.publicKey, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtOutputBip32DerivationPath_PsbtOutputBip32DerivationPath$deserialize_closure.prototype = {
    call$1(i) {
      var offset = i * 4,
        t1 = offset;
      if (typeof t1 !== "number")
        return t1.$add();
      return A.Bip32KeyIndex_Bip32KeyIndex(A.IntUtils_fromBytes(B.JSArray_methods.sublist$2(this.indexesBytes, offset, t1 + 4), B.C_Endian0, false));
    },
    $signature: 29
  };
  A.PsbtOutputBip32DerivationPath_toJson_closure.prototype = {
    call$1(e) {
      return type$.Bip32KeyIndex._as(e).index;
    },
    $signature: 28
  };
  A.PsbtOutputAmount.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "amount", this.amount.toString$0(0)], type$.String, type$.dynamic);
    }
  };
  A.PsbtOutputScript.prototype = {
    toJson$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "script", A.LinkedHashMap_LinkedHashMap$_literal(["script", this.script.script], t1, t2)], t1, t2);
    }
  };
  A.PsbtOutputTaprootInternalKey.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "xOnlyPubKey", A.BytesUtils_toHexString(this.xOnlyPubKey, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtOutputTaprootTree.prototype = {
    toJson$0() {
      var t1 = this.taprootTrees,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.PsbtOutputTaprootTree_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "tree", t1], type$.String, type$.dynamic);
    }
  };
  A.PsbtOutputTaprootTree_toJson_closure.prototype = {
    call$1(e) {
      return type$.PsbtTapTree._as(e).toJson$0();
    },
    $signature: 396
  };
  A.PsbtOutputTaprootKeyBip32DerivationPath.prototype = {
    toJson$0() {
      var t5, t6, _this = this,
        t1 = A.BytesUtils_toHexString(_this.xOnlyPubKey, true, null),
        t2 = _this.leavesHashes,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,String>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("String(1)")._as(new A.PsbtOutputTaprootKeyBip32DerivationPath_toJson_closure()), t4), t4._eval$1("ListIterable.E"));
      t3 = A.BytesUtils_toHexString(_this.fingerprint, true, null);
      t4 = _this.derivationIndexes;
      t5 = A._arrayInstanceType(t4);
      t6 = t5._eval$1("MappedListIterable<1,int>");
      t4 = A.List_List$_of(new A.MappedListIterable(t4, t5._eval$1("int(1)")._as(new A.PsbtOutputTaprootKeyBip32DerivationPath_toJson_closure0()), t6), t6._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type._name, "xOnlyPubKey", t1, "leavesHashes", t2, "fingerprint", t3, "derivationIndexes", t4], type$.String, type$.dynamic);
    }
  };
  A.PsbtOutputTaprootKeyBip32DerivationPath$__closure.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return A.List_List$unmodifiable(e, type$.int);
    },
    $signature: 19
  };
  A.PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize_closure.prototype = {
    call$1(i) {
      var offset = i * 32,
        t1 = offset;
      if (typeof t1 !== "number")
        return t1.$add();
      return B.JSArray_methods.sublist$2(this.data, offset, t1 + 32);
    },
    $signature: 53
  };
  A.PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize_closure0.prototype = {
    call$1(i) {
      var offset = i * 4,
        t1 = offset;
      if (typeof t1 !== "number")
        return t1.$add();
      return A.Bip32KeyIndex_Bip32KeyIndex(A.IntUtils_fromBytes(B.JSArray_methods.sublist$2(this.indexesBytes, offset, t1 + 4), B.C_Endian0, false));
    },
    $signature: 29
  };
  A.PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize_closure1.prototype = {
    call$1(element) {
      return J.get$length$asx(type$.List_int._as(element)) === 32;
    },
    $signature: 54
  };
  A.PsbtOutputTaprootKeyBip32DerivationPath_toJson_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_toHexString(type$.List_int._as(e), true, null);
    },
    $signature: 17
  };
  A.PsbtOutputTaprootKeyBip32DerivationPath_toJson_closure0.prototype = {
    call$1(e) {
      return type$.Bip32KeyIndex._as(e).index;
    },
    $signature: 28
  };
  A.PsbtOutputMuSig2ParticipantPublicKeys.prototype = {
    toJson$0() {
      var t1 = A.BytesUtils_toHexString(this.aggregatePubKey, true, null),
        t2 = this.pubKeys,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,String>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("String(1)")._as(new A.PsbtOutputMuSig2ParticipantPublicKeys_toJson_closure()), t4), t4._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "aggregatePubKey", t1, "pubKeys", t2], type$.String, type$.dynamic);
    }
  };
  A.PsbtOutputMuSig2ParticipantPublicKeys_toJson_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_toHexString(type$.List_int._as(e), true, null);
    },
    $signature: 17
  };
  A.PsbtOutputMuSig2ParticipantPublicKeys$__closure.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return A.List_List$unmodifiable(e, type$.int);
    },
    $signature: 19
  };
  A.PsbtOutputSilentPaymentData.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "scanKey", A.BytesUtils_toHexString(this.scanKey, true, null), "spendKey", A.BytesUtils_toHexString(this.spendKey, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtOutputSilentPaymentLabel.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "label", this.label], type$.String, type$.dynamic);
    }
  };
  A.PsbtOutputBIP353DNSSECProof.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "name", this.name, "proof", A.BytesUtils_toHexString(this.proof, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtOutputProprietaryUseType.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type._name, "subkeydata", A.BytesUtils_toHexString(_this.subkeydata, true, null), "identifier", A.BytesUtils_toHexString(_this.identifier, true, null), "data", A.BytesUtils_toHexString(_this.data, true, null)], type$.String, type$.dynamic);
    }
  };
  A.PsbtOutputUnknow.prototype = {
    toJson$0() {
      var t1 = this.keyPair,
        t2 = t1.key,
        t3 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type._name, "key", A.LinkedHashMap_LinkedHashMap$_literal(["keyType", t2.type, "keyData", A.BytesUtils_tryToHexString(t2.extraData, null)], t3, type$.nullable_Object), "value", A.LinkedHashMap_LinkedHashMap$_literal(["data", A.BytesUtils_toHexString(t1.value.data, true, null)], t3, t3)], t3, type$.dynamic);
    }
  };
  A.PsbtVersion.prototype = {
    _enumToString$0() {
      return "PsbtVersion." + this._name;
    }
  };
  A.PsbtKey.prototype = {
    serialize$0() {
      var t1 = type$.JSArray_int,
        t2 = A._setArrayType([this.type], t1),
        t3 = this.extraData;
      B.JSArray_methods.addAll$1(t2, t3 == null ? A._setArrayType([], t1) : t3);
      t1 = A.List_List$_of(A.IntUtils_encodeVarint(t2.length), type$.int);
      B.JSArray_methods.addAll$1(t1, t2);
      return t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof A.PsbtKey && other.type === this.type && A.BytesUtils_bytesEqual(this.extraData, other.extraData))
        return true;
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.extraData, this.type]);
    }
  };
  A.PsbtValue.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof A.PsbtValue && A.BytesUtils_bytesEqual(this.data, other.data))
        return true;
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this.data, B.List_empty1);
    }
  };
  A.PsbtKeyPair.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof A.PsbtKeyPair && this.key.$eq(0, other.key) && this.value.$eq(0, other.value))
        return true;
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.key, this.value]);
    }
  };
  A.Psbt.prototype = {
    serialize$0() {
      var globalKeyPairs, inputKeyPairs, outputKeyPairs, t3, _i, i, t4, t5, t6, t7,
        t1 = type$.int,
        t2 = A.List_List$_of(B.List_112_115_98_116, t1);
      t2.push(255);
      globalKeyPairs = this.global.toKeyPairs$0();
      inputKeyPairs = this.input.toKeyPairs$0();
      outputKeyPairs = this.output.toKeyPairs$0();
      t3 = A._arrayInstanceType(globalKeyPairs);
      if (new A.MappedListIterable(globalKeyPairs, t3._eval$1("PsbtKey(1)")._as(new A.Psbt_serialize_closure()), t3._eval$1("MappedListIterable<1,PsbtKey>")).toSet$0(0)._collection$_length !== globalKeyPairs.length)
        throw A.wrapException(A.DartBitcoinPluginException$("Duplicate global entries found.", null));
      if (B.JSArray_methods.any$1(inputKeyPairs, new A.Psbt_serialize_closure0()))
        throw A.wrapException(A.DartBitcoinPluginException$("Duplicate inputs entries found.", null));
      if (B.JSArray_methods.any$1(outputKeyPairs, new A.Psbt_serialize_closure1()))
        throw A.wrapException(A.DartBitcoinPluginException$("Duplicate output entries found.", null));
      for (t3 = globalKeyPairs.length, _i = 0; _i < globalKeyPairs.length; globalKeyPairs.length === t3 || (0, A.throwConcurrentModificationError)(globalKeyPairs), ++_i) {
        i = globalKeyPairs[_i];
        t4 = A.List_List$_of(i.key.serialize$0(), t1);
        t5 = i.value.data;
        t6 = A.List_List$_of(A.IntUtils_encodeVarint(t5.length), t1);
        B.JSArray_methods.addAll$1(t6, t5);
        B.JSArray_methods.addAll$1(t4, t6);
        B.JSArray_methods.addAll$1(t2, t4);
      }
      B.JSArray_methods.add$1(t2, 0);
      for (t3 = inputKeyPairs.length, _i = 0; _i < inputKeyPairs.length; inputKeyPairs.length === t3 || (0, A.throwConcurrentModificationError)(inputKeyPairs), ++_i) {
        i = inputKeyPairs[_i];
        t4 = J.getInterceptor$asx(i);
        if (t4.get$isEmpty(i)) {
          B.JSArray_methods.add$1(t2, 0);
          continue;
        }
        for (t4 = t4.get$iterator(i); t4.moveNext$0();) {
          t5 = t4.get$current();
          t6 = A.List_List$_of(t5.key.serialize$0(), t1);
          t5 = t5.value.data;
          t7 = A.List_List$_of(A.IntUtils_encodeVarint(t5.length), t1);
          B.JSArray_methods.addAll$1(t7, t5);
          B.JSArray_methods.addAll$1(t6, t7);
          B.JSArray_methods.addAll$1(t2, t6);
        }
        B.JSArray_methods.add$1(t2, 0);
      }
      for (t3 = outputKeyPairs.length, _i = 0; _i < outputKeyPairs.length; outputKeyPairs.length === t3 || (0, A.throwConcurrentModificationError)(outputKeyPairs), ++_i) {
        i = outputKeyPairs[_i];
        t4 = J.getInterceptor$asx(i);
        if (t4.get$isEmpty(i)) {
          B.JSArray_methods.add$1(t2, 0);
          continue;
        }
        for (t4 = t4.get$iterator(i); t4.moveNext$0();) {
          t5 = t4.get$current();
          t6 = A.List_List$_of(t5.key.serialize$0(), t1);
          t5 = t5.value.data;
          t7 = A.List_List$_of(A.IntUtils_encodeVarint(t5.length), t1);
          B.JSArray_methods.addAll$1(t7, t5);
          B.JSArray_methods.addAll$1(t6, t7);
          B.JSArray_methods.addAll$1(t2, t6);
        }
        B.JSArray_methods.add$1(t2, 0);
      }
      return t2;
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["global", this.global.toJson$0(), "input", this.input.toJson$0(), "output", this.output.toJson$0()], type$.String, type$.dynamic);
    }
  };
  A.Psbt_Psbt$deserialize_closure.prototype = {
    call$1(e) {
      return type$.PsbtKeyPair._as(e).key.type === 251;
    },
    $signature: 39
  };
  A.Psbt_Psbt$deserialize_closure0.prototype = {
    call$1(element) {
      return type$.PsbtKeyPair._as(element).key.type === 0;
    },
    $signature: 39
  };
  A.Psbt_Psbt$deserialize_closure1.prototype = {
    call$0() {
      return A.throwExpression(A.DartBitcoinPluginException$("PSBTv0 Global unsigned tx required.", null));
    },
    $signature: 0
  };
  A.Psbt_Psbt$deserialize_closure2.prototype = {
    call$1(e) {
      return type$.PsbtKeyPair._as(e).key.type === 4;
    },
    $signature: 39
  };
  A.Psbt_Psbt$deserialize_closure3.prototype = {
    call$0() {
      return A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT global: Missing required field PSBT_GLOBAL_INPUT_COUNT for PSBT version " + this._box_0.psbtVersion.name + ".", null));
    },
    $signature: 0
  };
  A.Psbt_Psbt$deserialize_closure4.prototype = {
    call$1(e) {
      return type$.PsbtKeyPair._as(e).key.type === 5;
    },
    $signature: 39
  };
  A.Psbt_Psbt$deserialize_closure5.prototype = {
    call$0() {
      return A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT global: Missing required field PSBT_GLOBAL_OUTPUT_COUNT for PSBT version " + this._box_0.psbtVersion.name + ".", null));
    },
    $signature: 0
  };
  A.Psbt_serialize_closure.prototype = {
    call$1(e) {
      return type$.PsbtKeyPair._as(e).key;
    },
    $signature: 57
  };
  A.Psbt_serialize_closure0.prototype = {
    call$1(e) {
      var t1;
      type$.List_PsbtKeyPair._as(e);
      t1 = J.getInterceptor$ax(e);
      return t1.map$1$1(e, new A.Psbt_serialize__closure0(), type$.PsbtKey).toSet$0(0)._collection$_length !== t1.get$length(e);
    },
    $signature: 74
  };
  A.Psbt_serialize__closure0.prototype = {
    call$1(e) {
      return type$.PsbtKeyPair._as(e).key;
    },
    $signature: 57
  };
  A.Psbt_serialize_closure1.prototype = {
    call$1(e) {
      var t1;
      type$.List_PsbtKeyPair._as(e);
      t1 = J.getInterceptor$ax(e);
      return t1.map$1$1(e, new A.Psbt_serialize__closure(), type$.PsbtKey).toSet$0(0)._collection$_length !== t1.get$length(e);
    },
    $signature: 74
  };
  A.Psbt_serialize__closure.prototype = {
    call$1(e) {
      return type$.PsbtKeyPair._as(e).key;
    },
    $signature: 57
  };
  A.PsbtTapTree.prototype = {
    toJson$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["depth", this.depth, "leafVersion", this.leafVersion, "script", A.LinkedHashMap_LinkedHashMap$_literal(["script", this.script.script], t1, t2)], t1, t2);
    }
  };
  A._Base32Utils_translateAlphabet_closure.prototype = {
    call$1(unit) {
      return A.Primitives_stringFromCharCode(A._asInt(unit));
    },
    $signature: 75
  };
  A._Base32Utils_translateAlphabet_closure0.prototype = {
    call$1(unit) {
      var index = B.JSString_methods.indexOf$1(this.fromAlphabet, A.Primitives_stringFromCharCode(A._asInt(unit))),
        t1 = this.toAlphabet;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    },
    $signature: 75
  };
  A._Base32Utils_translateAlphabet_closure1.prototype = {
    call$1(char) {
      var t1;
      A._asString(char);
      t1 = this.translationMap.$index(0, char);
      return t1 == null ? char : t1;
    },
    $signature: 4
  };
  A._Base32Utils__b32decode_closure.prototype = {
    call$1(char) {
      var t1, symbol, t2, t3, t4;
      A._asString(char);
      if (char === "=")
        return;
      t1 = $._Base32Const__b32rev.$index(0, this.alphabet).$index(0, char);
      symbol = (t1 == null ? 0 : t1) & 255;
      t1 = this._box_0;
      t2 = t1.shift -= 5;
      if (t2 > 0)
        t1.carry = t1.carry | B.JSInt_methods.$shl(symbol, t2) & 255;
      else {
        t3 = this.decoded;
        t4 = t1.carry;
        if (t2 < 0) {
          B.JSArray_methods.add$1(t3, t4 | B.JSInt_methods._shrReceiverPositive$1(symbol, -t2));
          t1.carry = B.JSInt_methods.$shl(symbol, t1.shift += 8) & 255;
        } else {
          B.JSArray_methods.add$1(t3, t4 | symbol);
          t1.shift = 8;
          t1.carry = 0;
        }
      }
    },
    $signature: 76
  };
  A.Base58Alphabets.prototype = {
    _enumToString$0() {
      return "Base58Alphabets." + this._name;
    }
  };
  A.Base58ChecksumError.prototype = {};
  A._BchBech32Utils_hrpExpand_closure.prototype = {
    call$1(rune) {
      return A._asInt(rune) & 31;
    },
    $signature: 27
  };
  A.Bech32Encodings.prototype = {
    _enumToString$0() {
      return "Bech32Encodings." + this._name;
    }
  };
  A.Bech32ChecksumError.prototype = {};
  A.Bech32EncoderBase_encodeBech32_closure.prototype = {
    call$1(e) {
      var _s32_ = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
      A._asInt(e);
      if (!(e >= 0 && e < 32))
        return A.ioore(_s32_, e);
      return _s32_[e];
    },
    $signature: 77
  };
  A.Bech32DecoderBase_decodeBech32_closure.prototype = {
    call$1(x) {
      A._asInt(x);
      return x < 33 || x > 126;
    },
    $signature: 30
  };
  A.Bech32DecoderBase_decodeBech32_closure0.prototype = {
    call$1(x) {
      return !B.JSString_methods.contains$1("qpzry9x8gf2tvdw0s3jn54khce6mua7l", A.Primitives_stringFromCharCode(A._asInt(x)));
    },
    $signature: 30
  };
  A.Bech32DecoderBase_decodeBech32_closure1.prototype = {
    call$1(x) {
      return B.JSString_methods.indexOf$1("qpzry9x8gf2tvdw0s3jn54khce6mua7l", A.Primitives_stringFromCharCode(A._asInt(x)));
    },
    $signature: 27
  };
  A.AdaByronIcarusAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AdaByronLegacyAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AdaShelleyAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.ADANetwork.prototype = {
    toString$0(_) {
      return "ADANetwork." + this.name;
    }
  };
  A.AlgoAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AptosSingleKeyEd25519AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AptosSingleKeySecp256k1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AptosAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AtomAddressDecodeResult.prototype = {};
  A.AtomAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AtomEthSecp256k1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AtomNist256P1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AtomEd25519AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AvaxPChainAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AvaxXChainAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.EgldAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.BlockchainAddressEncoder.prototype = {};
  A.EosAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.ErgoNetworkTypes.prototype = {};
  A.ErgoP2PKHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.EthAddrUtils__checksumEncode_closure.prototype = {
    call$1(entry) {
      var i, c, t1;
      type$.MapEntry_int_String._as(entry);
      i = entry.key;
      c = entry.value;
      t1 = this.addrHexDigest;
      if (i >>> 0 !== i || i >= t1.length)
        return A.ioore(t1, i);
      return A.int_parse(t1[i], 16) >= 8 ? c.toUpperCase() : c.toLowerCase();
    },
    $signature: 389
  };
  A.EthAddrDecoder.prototype = {
    decodeAddr$2(addr, kwargs) {
      var addrNoPrefix,
        t1 = type$.Map_String_dynamic._as(kwargs).$index(0, "skip_chksum_enc"),
        prefixGot = B.JSString_methods.substring$2(addr, 0, 2);
      if ("0x" !== prefixGot)
        A.throwExpression(A.AddressConverterException$("Invalid prefix (expected 0x, got " + prefixGot + ")", null));
      addrNoPrefix = B.JSString_methods.substring$1(addr, 2);
      A.AddrDecUtils_validateLength(addrNoPrefix, 40);
      if (t1 !== true && addrNoPrefix !== A.EthAddrUtils__checksumEncode(addrNoPrefix))
        throw A.wrapException(B.AddressConverterException_lgx);
      return A.BytesUtils_fromHexString(addrNoPrefix, false);
    }
  };
  A.EthAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.AddressConverterException.prototype = {};
  A.FilSecp256k1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.IcxAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.InjAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.NanoAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.NearAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.NeoAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.OkexAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.OneAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.P2PKHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.BchP2PKHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.P2SHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.BchP2SHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.P2TRAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.P2WPKHAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SolAddrDecoder.prototype = {
    decodeAddr$1(addr) {
      var addrDecBytes = A.Base58Decoder_decode(addr, B.Base58Alphabets_0);
      A.AddrDecUtils_validateBytesLength(addrDecBytes, 32);
      return A.List_List$from(addrDecBytes, true, type$.int);
    }
  };
  A.SolAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SubstrateEd25519AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SubstrateSr25519AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SubstrateSecp256k1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SuiSecp256k1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SuiSecp256r1AddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.SuiAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.DecodeAddressResult.prototype = {};
  A.FriendlyAddressFlags.prototype = {};
  A.TonAddrDecoder.prototype = {};
  A.TonAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.TrxAddrDecoder.prototype = {
    decodeAddr$1(addr) {
      var tronPrefix, _null = null,
        decodedBytes = A.Base58Decoder_decode(addr, B.Base58Alphabets_0),
        dataBytes = B.JSArray_methods.sublist$2(decodedBytes, 0, decodedBytes.length - 4),
        checksumBytes = B.JSArray_methods.sublist$1(decodedBytes, decodedBytes.length - 4),
        computedChecksum = B.JSArray_methods.sublist$2(A.SHA256_hash(A.SHA256_hash(dataBytes)), 0, 4);
      if (!A.BytesUtils_bytesEqual(checksumBytes, computedChecksum))
        A.throwExpression(new A.Base58ChecksumError("Invalid checksum (expected " + A.BytesUtils_toHexString(computedChecksum, true, _null) + ", got " + A.BytesUtils_toHexString(checksumBytes, true, _null) + ")", _null));
      tronPrefix = A.BytesUtils_fromHexString("0x41", false);
      A.AddrDecUtils_validateBytesLength(dataBytes, 20 + tronPrefix.length);
      return new A.EthAddrDecoder().decodeAddr$2("0x" + A.BytesUtils_toHexString(A.AddrDecUtils_validateAndRemovePrefixBytes(dataBytes, tronPrefix), true, _null), A.LinkedHashMap_LinkedHashMap$_literal(["skip_chksum_enc", true], type$.String, type$.dynamic));
    }
  };
  A.TrxAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.XlmAddrTypes.prototype = {
    toString$0(_) {
      return "XlmAddrTypes." + this.name;
    }
  };
  A.XlmAddrTypes_fromTag_closure.prototype = {
    call$1(e) {
      return type$.XlmAddrTypes._as(e).value === this.tag;
    },
    $signature: 386
  };
  A.XlmAddrTypes_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.AddressConverterException$("Invalid or unsuported xlm address type.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", B.JSArray_methods.map$1$1(B.List_FN2, new A.XlmAddrTypes_fromTag__closure(), type$.int).join$1(0, ", "), "got", this.tag], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.XlmAddrTypes_fromTag__closure.prototype = {
    call$1(e) {
      return type$.XlmAddrTypes._as(e).value;
    },
    $signature: 382
  };
  A.XlmAddrDecoderResult.prototype = {
    toString$0(_) {
      return this.baseAddress;
    }
  };
  A.XlmAddrDecoder.prototype = {
    decode$1(addr) {
      var addrDecBytes, payloadBytes, type, t2, pubKeyBytes, accountId, pubKey, t3, checksumBytes, encoded,
        _s9_ = "addr_type",
        t1 = type$.XlmAddrTypes;
      A.AddrKeyValidator_nullOrValidateAddressArgs(B.Map_empty, _s9_, t1);
      addrDecBytes = A.Base32Decoder_decode(addr);
      B.JSArray_methods.sublist$1(addrDecBytes, addrDecBytes.length - 2);
      payloadBytes = B.JSArray_methods.sublist$2(addrDecBytes, 0, addrDecBytes.length - 2);
      if (0 >= payloadBytes.length)
        return A.ioore(payloadBytes, 0);
      type = A.XlmAddrTypes_fromTag(payloadBytes[0]);
      t2 = type === B.XlmAddrTypes_96_Muxed;
      A.AddrDecUtils_validateBytesLength(addrDecBytes, t2 ? 43 : 35);
      if (!A.BytesUtils_bytesEqual(B.JSArray_methods.sublist$1(addrDecBytes, addrDecBytes.length - 2), A._XlmAddrUtils_computeChecksum(payloadBytes)))
        A.throwExpression(B.AddressConverterException_zNG);
      pubKeyBytes = B.JSArray_methods.sublist$1(payloadBytes, 1);
      if (t2) {
        accountId = A.BigintUtils_fromBytes(B.JSArray_methods.sublist$1(pubKeyBytes, pubKeyBytes.length - 8), B.C_Endian, false);
        if (accountId.compareTo$1(0, $.$get$maxU64()) > 0 || accountId.compareTo$1(0, $.$get$_BigIntImpl_zero()) < 0)
          throw A.wrapException(B.AddressConverterException_jdZ);
        t2 = type$.int;
        pubKeyBytes = A.List_List$unmodifiable(B.JSArray_methods.sublist$2(pubKeyBytes, 0, pubKeyBytes.length - 8), t2);
        type$.List_int._as(pubKeyBytes);
        type$.Map_String_dynamic._as(B.Map_empty);
        pubKey = pubKeyBytes.length === 33 ? B.JSArray_methods.sublist$1(pubKeyBytes, 1) : pubKeyBytes;
        A.AddrKeyValidator_nullOrValidateAddressArgs(B.Map_empty, _s9_, t1);
        A.AddrDecUtils_validateBytesLength(pubKey, 32);
        A.IPublicKey_IPublicKey$fromBytes(pubKey, B.EllipticCurveTypes_0);
        t1 = [48];
        B.JSArray_methods.addAll$1(t1, pubKey);
        payloadBytes = A.List_List$from(t1, true, t2);
        t1 = A.XModemCrc__calculateXmodemCrc(payloadBytes);
        t3 = A._arrayInstanceType(t1)._eval$1("ReversedListIterable<1>");
        checksumBytes = A.List_List$_of(new A.ReversedListIterable(t1, t3), t3._eval$1("ListIterable.E"));
        t1 = A.List_List$_of(payloadBytes, type$.dynamic);
        B.JSArray_methods.addAll$1(t1, checksumBytes);
        t1 = A.List_List$from(t1, true, t2);
        A.BytesUtils_validateListOfBytes(t1);
        encoded = A.StringUtils_decode(A._Base32Utils__b32encode("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", A.List_List$unmodifiable(t1, t2)), false, B.StringEncoding_1);
        addr = A.stringReplaceAllUnchecked(encoded, "=", "");
      } else
        accountId = null;
      A.BytesUtils_validateListOfBytes(pubKeyBytes);
      A.List_List$unmodifiable(pubKeyBytes, type$.int);
      return new A.XlmAddrDecoderResult(type, addr, accountId);
    }
  };
  A.XlmAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.XmrAddrEncoder.prototype = {};
  A.XrpAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.XtzAddrPrefixes.prototype = {};
  A.XtzAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.ZilAddrEncoder.prototype = {$isBlockchainAddressEncoder: 1};
  A.Bip32KeyIndex.prototype = {
    toString$0(_) {
      return "index: " + this.index;
    }
  };
  A.Bip32KeyNetVersions.prototype = {};
  A.BipCoins.prototype = {
    toString$0(_) {
      return A.getRuntimeTypeOfDartObject(this).toString$0(0) + "." + this.get$coinName();
    },
    $isCryptoCoins: 1
  };
  A.BipProposal.prototype = {
    get$specName() {
      return this.name;
    },
    get$name() {
      return this.name;
    }
  };
  A.Bip44Coins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$Bip44Coins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.BipProposal_bip44;
    },
    toString$0(_) {
      return "Bip44Coins." + this.name;
    }
  };
  A.Bip44Coins_fromName_closure.prototype = {
    call$1(element) {
      return type$.Bip44Coins._as(element).name === this.name;
    },
    $signature: 380
  };
  A.Bip44Conf_akashNetwork_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 11
  };
  A.Bip44Conf_algorand_closure.prototype = {
    call$1(kwargs) {
      return new A.AlgoAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 373
  };
  A.Bip44Conf_aptos_closure.prototype = {
    call$1(kwargs) {
      return new A.AptosAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 372
  };
  A.Bip44Conf_aptosSingleKeySecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.AptosSingleKeySecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 365
  };
  A.Bip44Conf_aptosSingleKeyEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.AptosSingleKeyEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 364
  };
  A.Bip44Conf_avaxCChain_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_avaxPChain_closure.prototype = {
    call$1(kwargs) {
      return new A.AvaxPChainAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 361
  };
  A.Bip44Conf_avaxXChain_closure.prototype = {
    call$1(kwargs) {
      return new A.AvaxXChainAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 350
  };
  A.Bip44Conf_axelar_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 11
  };
  A.Bip44Conf_bandProtocol_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 11
  };
  A.Bip44Conf_binanceChain_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 11
  };
  A.Bip44Conf_binanceSmartChain_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_bitcoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_bitcoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_bitcoinCashMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip44Conf_bitcoinCashTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip44Conf_bitcoinCashSlpMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip44Conf_bitcoinCashSlpTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip44Conf_bitcoinSvMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_bitcoinSvTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_cardanoByronIcarus_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronIcarusAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 41
  };
  A.Bip44Conf_cardanoByronLedger_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronIcarusAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 41
  };
  A.Bip44Conf_cardanoByronIcarusTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronIcarusAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 41
  };
  A.Bip44Conf_cardanoByronLedgerTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronIcarusAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 41
  };
  A.Bip44Conf_celo_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_certik_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 11
  };
  A.Bip44Conf_chihuahua_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 11
  };
  A.Bip44Conf_cosmos_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 11
  };
  A.Bip44Conf_cosmosTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 11
  };
  A.Bip44Conf_cosmosEthSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomEthSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 94
  };
  A.Bip44Conf_cosmosTestnetEthSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomEthSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 94
  };
  A.Bip44Conf_cosmosNist256p1_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomNist256P1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 95
  };
  A.Bip44Conf_cosmosTestnetNist256p1_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomNist256P1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 95
  };
  A.Bip44Conf_cosmosEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 96
  };
  A.Bip44Conf_cosmosTestnetEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 96
  };
  A.Bip44Conf_dashMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_dashTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_dogecoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_dogecoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_pepeMainnet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_pepeTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_ecashMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip44Conf_ecashTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip44Conf_elrond_closure.prototype = {
    call$1(kwargs) {
      return new A.EgldAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 334
  };
  A.Bip44Conf_eos_closure.prototype = {
    call$1(kwargs) {
      return new A.EosAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 332
  };
  A.Bip44Conf_ergoMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.ErgoP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 99
  };
  A.Bip44Conf_ergoTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.ErgoP2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 99
  };
  A.Bip44Conf_ethereum_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_ethereumTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_ethereumClassic_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_fantomOpera_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_filecoin_closure.prototype = {
    call$1(kwargs) {
      return new A.FilSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 328
  };
  A.Bip44Conf_harmonyOneMetamask_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_harmonyOneEth_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_harmonyOneAtom_closure.prototype = {
    call$1(kwargs) {
      return new A.OneAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 324
  };
  A.Bip44Conf_huobiChain_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_icon_closure.prototype = {
    call$1(kwargs) {
      return new A.IcxAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 323
  };
  A.Bip44Conf_injective_closure.prototype = {
    call$1(kwargs) {
      return new A.InjAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 322
  };
  A.Bip44Conf_irisNet_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 11
  };
  A.Bip44Conf_kava_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 11
  };
  A.Bip44Conf_kusamaEd25519Slip_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_kusamaTestnetEd25519Slip_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_litecoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_litecoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_moneroEd25519Slip_closure.prototype = {
    call$1(kwargs) {
      return new A.XmrAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 105
  };
  A.Bip44Conf_moneroSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.XmrAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 105
  };
  A.Bip44Conf_nano_closure.prototype = {
    call$1(kwargs) {
      return new A.NanoAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 321
  };
  A.Bip44Conf_nearProtocol_closure.prototype = {
    call$1(kwargs) {
      return new A.NearAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 318
  };
  A.Bip44Conf_neo_closure.prototype = {
    call$1(kwargs) {
      return new A.NeoAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 108
  };
  A.Bip44Conf_nineChroniclesGold_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_okexChainEth_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_okexChainAtom_closure.prototype = {
    call$1(kwargs) {
      return new A.OkexAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 109
  };
  A.Bip44Conf_okexChainAtomOld_closure.prototype = {
    call$1(kwargs) {
      return new A.OkexAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 109
  };
  A.Bip44Conf_ontology_closure.prototype = {
    call$1(kwargs) {
      return new A.NeoAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 108
  };
  A.Bip44Conf_osmosis_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 11
  };
  A.Bip44Conf_piNetwork_closure.prototype = {
    call$1(kwargs) {
      return new A.XlmAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 58
  };
  A.Bip44Conf_polkadotEd25519Slip_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_polkadotTestnetEd25519Slip_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.Bip44Conf_polygon_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_ripple_closure.prototype = {
    call$1(kwargs) {
      return new A.XrpAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 42
  };
  A.Bip44Conf_rippleTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.XrpAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 42
  };
  A.Bip44Conf_rippleEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.XrpAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 42
  };
  A.Bip44Conf_rippleTestnetEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.XrpAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 42
  };
  A.Bip44Conf_secretNetworkOld_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 11
  };
  A.Bip44Conf_secretNetworkNew_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 11
  };
  A.Bip44Conf_solana_closure.prototype = {
    call$1(kwargs) {
      return new A.SolAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 112
  };
  A.Bip44Conf_solanaTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.SolAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 112
  };
  A.Bip44Conf_stellar_closure.prototype = {
    call$1(kwargs) {
      return new A.XlmAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 58
  };
  A.Bip44Conf_stellarTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.XlmAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 58
  };
  A.Bip44Conf_terra_closure.prototype = {
    call$1(kwargs) {
      return new A.AtomAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 11
  };
  A.Bip44Conf_tezos_closure.prototype = {
    call$1(kwargs) {
      return new A.XtzAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 316
  };
  A.Bip44Conf_theta_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_tron_closure.prototype = {
    call$1(kwargs) {
      return new A.TrxAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 114
  };
  A.Bip44Conf_tronTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.TrxAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 114
  };
  A.Bip44Conf_vechain_closure.prototype = {
    call$1(kwargs) {
      return new A.EthAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 9
  };
  A.Bip44Conf_verge_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_zcashMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_zcashTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_zilliqa_closure.prototype = {
    call$1(kwargs) {
      return new A.ZilAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 315
  };
  A.Bip44Conf_tonMainnet_closure.prototype = {
    call$1(kwargs) {
      return new A.TonAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 116
  };
  A.Bip44Conf_tonTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.TonAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 116
  };
  A.Bip44Conf_electraProtocolMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_electraProtocolTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2PKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 6
  };
  A.Bip44Conf_suiSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SuiSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 314
  };
  A.Bip44Conf_suiSecp256r1_closure.prototype = {
    call$1(kwargs) {
      return new A.SuiSecp256r1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 307
  };
  A.Bip44Conf_suiEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SuiAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 304
  };
  A.Bip49Coins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$Bip49Coins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.BipProposal_bip49;
    }
  };
  A.Bip49Coins_fromName_closure.prototype = {
    call$1(element) {
      return type$.Bip49Coins._as(element).name === this.name;
    },
    $signature: 302
  };
  A.Bip49Conf_dashMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip49Conf_dashTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip49Conf_dogecoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip49Conf_dogecoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip49Conf_litecoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip49Conf_litecoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip49Conf_zcashMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip49Conf_zcashTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip49Conf_bitcoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip49Conf_bitcoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip49Conf_bitcoinSvMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip49Conf_bitcoinSvTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip49Conf_bitcoinCashMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip49Conf_bitcoinCashTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip49Conf_bitcoinCashSlpMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip49Conf_bitcoinCashSlpTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip49Conf_ecashMainNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip49Conf_ecashTestNet_closure.prototype = {
    call$1(legacy) {
      return new A.BchP2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 14
  };
  A.Bip49Conf_pepeMainnet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip49Conf_pepeTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip49Conf_electraProtocolMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip49Conf_electraProtocolTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2SHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 7
  };
  A.Bip84Coins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$Bip84Coins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.BipProposal_bip84;
    }
  };
  A.Bip84Coins_fromName_closure.prototype = {
    call$1(element) {
      return type$.Bip84Coins._as(element).name === this.name;
    },
    $signature: 297
  };
  A.Bip84Conf_bitcoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 25
  };
  A.Bip84Conf_bitcoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 25
  };
  A.Bip84Conf_litecoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 25
  };
  A.Bip84Conf_litecoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 25
  };
  A.Bip84Conf_electraProtocolMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 25
  };
  A.Bip84Conf_electraProtocolTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2WPKHAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 25
  };
  A.Bip86Coins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$Bip86Coins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.BipProposal_bip86;
    }
  };
  A.Bip86Coins_fromName_closure.prototype = {
    call$1(element) {
      return type$.Bip86Coins._as(element).name === this.name;
    },
    $signature: 283
  };
  A.Bip86Conf_bitcoinMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2TRAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 125
  };
  A.Bip86Conf_bitcoinTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.P2TRAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 125
  };
  A.BipBitcoinCashConf.prototype = {};
  A.BipCoinConfig.prototype = {$isCoinConfig: 1,
    get$type() {
      return this.type;
    }
  };
  A.BipLitecoinConf.prototype = {};
  A.ChainType.prototype = {
    _enumToString$0() {
      return "ChainType." + this._name;
    }
  };
  A.CoinProposal_fromName_closure.prototype = {
    call$1(element) {
      return type$.BipProposal._as(element).get$name() === this.name;
    },
    $signature: 278
  };
  A.CoinProposal_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(new A.MessageException("Unable to locate a proposal with the given name.", A.LinkedHashMap_LinkedHashMap$_literal(["Name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.PubKeyModes.prototype = {
    _enumToString$0() {
      return "PubKeyModes." + this._name;
    }
  };
  A.Cip1852Coins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$Cip1852Coins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.C_CipProposal;
    }
  };
  A.Cip1852Coins_fromName_closure.prototype = {
    call$1(element) {
      return type$.Cip1852Coins._as(element).name === this.name;
    },
    $signature: 274
  };
  A.CipProposal.prototype = {
    get$specName() {
      return "cip1852";
    },
    $isBipProposal: 1,
    get$name() {
      return "cip1852";
    }
  };
  A.Cip1852Conf_cardanoIcarusMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaShelleyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 43
  };
  A.Cip1852Conf_cardanoIcarusTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaShelleyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 43
  };
  A.Cip1852Conf_cardanoLedgerMainNet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaShelleyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 43
  };
  A.Cip1852Conf_cardanoLedgerTestNet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaShelleyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 43
  };
  A.CoinConf.prototype = {
    toString$0(_) {
      return this.coinName.name;
    }
  };
  A.CoinParams.prototype = {};
  A.CoinNames.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.EllipticCurveTypes.prototype = {
    _enumToString$0() {
      return "EllipticCurveTypes." + this._name;
    }
  };
  A.Ed25519Blake2bPublicKey.prototype = {
    get$length(_) {
      return 33;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Ed25519Blake2bPublicKey))
        return false;
      if (this === other)
        return true;
      t1 = this._publicKey.$eq(0, other._publicKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._publicKey, B.EllipticCurveTypes_1]);
    }
  };
  A.Ed25519PublicKey.prototype = {
    get$length(_) {
      return 33;
    },
    get$compressed() {
      var t1 = A.List_List$_of(B.List_0, type$.dynamic);
      B.JSArray_methods.addAll$1(t1, this._ed25519_keys$_publicKey._point.toBytes$0());
      return A.List_List$from(t1, true, type$.int);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Ed25519PublicKey))
        return false;
      if (this === other)
        return true;
      t1 = this._ed25519_keys$_publicKey.$eq(0, other._ed25519_keys$_publicKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._ed25519_keys$_publicKey, B.EllipticCurveTypes_0]);
    }
  };
  A.Ed25519PrivateKey.prototype = {
    get$length(_) {
      return 32;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Ed25519PrivateKey))
        return false;
      if (this === other)
        return true;
      t1 = this._privateKey.$eq(0, other._privateKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._privateKey, B.EllipticCurveTypes_0]);
    }
  };
  A.Ed25519KholawPublicKey.prototype = {
    get$length(_) {
      return 33;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Ed25519KholawPublicKey))
        return false;
      if (this === other)
        return true;
      t1 = this._ed25519_kholaw_keys$_publicKey.$eq(0, other._ed25519_kholaw_keys$_publicKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._ed25519_kholaw_keys$_publicKey, B.EllipticCurveTypes_2]);
    }
  };
  A.MoneroPublicKey.prototype = {
    get$length(_) {
      return 32;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.MoneroPublicKey))
        return false;
      if (this === other)
        return true;
      t1 = this.publicKey.$eq(0, other.publicKey);
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.publicKey, B.EllipticCurveTypes_3]);
    }
  };
  A.Nist256p1PublicKey.prototype = {
    get$length(_) {
      return 33;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Nist256p1PublicKey))
        return false;
      t1 = this.publicKey.$eq(0, other.publicKey);
      return t1;
    },
    get$hashCode(_) {
      var t1 = this.publicKey;
      return (A.HashCodeGenerator_generateHashCode([t1.generator.curve, t1.point]) ^ A.Primitives_objectHashCode(B.EllipticCurveTypes_4)) >>> 0;
    }
  };
  A.Nist256p1HybridPublicKey.prototype = {
    get$length(_) {
      return 33;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Nist256p1HybridPublicKey))
        return false;
      t1 = this.publicKey.$eq(0, other.publicKey);
      return t1;
    },
    get$hashCode(_) {
      var t1 = this.publicKey;
      return (A.HashCodeGenerator_generateHashCode([t1.generator.curve, t1.point]) ^ A.Primitives_objectHashCode(B.EllipticCurveTypes_5)) >>> 0;
    }
  };
  A.Secp256k1PublicKey.prototype = {
    get$length(_) {
      return 33;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Secp256k1PublicKey))
        return false;
      t1 = this.publicKey.$eq(0, other.publicKey);
      return t1;
    },
    get$hashCode(_) {
      var t1 = this.publicKey;
      return (A.HashCodeGenerator_generateHashCode([t1.generator.curve, t1.point]) ^ A.Primitives_objectHashCode(B.EllipticCurveTypes_6)) >>> 0;
    }
  };
  A.Sr25519PublicKey.prototype = {
    get$length(_) {
      return 32;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.Sr25519PublicKey))
        return false;
      t1 = this.publicKey.$eq(0, other.publicKey);
      return t1;
    },
    get$hashCode(_) {
      return (A.HashCodeGenerator_generateBytesHashCode(this.publicKey._keys$_publicKey, B.List_empty1) ^ A.Primitives_objectHashCode(B.EllipticCurveTypes_7)) >>> 0;
    }
  };
  A.MoneroCoinConf.prototype = {
    get$type() {
      return B.EllipticCurveTypes_3;
    },
    $isCoinConfig: 1
  };
  A.MoneroCoins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$MoneroCoins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.C_MoneroProposal;
    },
    $isCryptoCoins: 1
  };
  A.MoneroCoins_fromName_closure.prototype = {
    call$1(element) {
      return type$.MoneroCoins._as(element).name === this.name;
    },
    $signature: 270
  };
  A.MoneroProposal.prototype = {
    get$specName() {
      return "monero";
    }
  };
  A.SubstrateCoinConf.prototype = {$isCoinConfig: 1,
    get$type() {
      return this.type;
    }
  };
  A.SubstrateCoins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$conf() {
      var t1 = $.$get$SubstrateCoins__coinToConf().$index(0, this);
      t1.toString;
      return t1;
    },
    get$proposal() {
      return B.C_SubstratePropoosal;
    },
    $isCryptoCoins: 1
  };
  A.SubstrateCoins_fromName_closure.prototype = {
    call$1(element) {
      return type$.SubstrateCoins._as(element).name === this.name;
    },
    $signature: 269
  };
  A.SubstratePropoosal.prototype = {
    get$specName() {
      return "substrate";
    }
  };
  A.SubstrateConf_acalaEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.SubstrateConf_acalaSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.SubstrateConf_acalaSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 13
  };
  A.SubstrateConf_bifrostEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.SubstrateConf_bifrostSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.SubstrateConf_bifrostSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 13
  };
  A.SubstrateConf_chainXEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.SubstrateConf_chainXSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.SubstrateConf_chainXSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 13
  };
  A.SubstrateConf_edgewareEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.SubstrateConf_edgewareSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.SubstrateConf_edgewareSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 13
  };
  A.SubstrateConf_genericEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.SubstrateConf_genericSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.SubstrateConf_genericSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 13
  };
  A.SubstrateConf_karuraEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.SubstrateConf_karuraSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.SubstrateConf_karuraSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 13
  };
  A.SubstrateConf_kusamaEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.SubstrateConf_kusamaSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.SubstrateConf_kusamaSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 13
  };
  A.SubstrateConf_moonbeamEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.SubstrateConf_moonbeamSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.SubstrateConf_moonbeamSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 13
  };
  A.SubstrateConf_moonriverEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.SubstrateConf_moonriverSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.SubstrateConf_moonriverSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 13
  };
  A.SubstrateConf_phalaEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.SubstrateConf_phalaSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.SubstrateConf_phalaSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 13
  };
  A.SubstrateConf_plasmEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.SubstrateConf_plasmSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.SubstrateConf_plasmSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 13
  };
  A.SubstrateConf_polkadotEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.SubstrateConf_polkadotSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.SubstrateConf_polkadotSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 13
  };
  A.SubstrateConf_soraEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.SubstrateConf_soraSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.SubstrateConf_soraSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 13
  };
  A.SubstrateConf_stafiEd25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateEd25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 5
  };
  A.SubstrateConf_stafiSecp256k1_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSecp256k1AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 12
  };
  A.SubstrateConf_stafiSr25519_closure.prototype = {
    call$1(kwargs) {
      return new A.SubstrateSr25519AddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 13
  };
  A.SubstrateScaleEncoderBase.prototype = {};
  A.SubstrateScaleCUintEncoder.prototype = {
    encode$1(value) {
      var valueBytes, t1,
        v = A._BigIntImpl_parse(value, null);
      if (v.compareTo$1(0, $.$get$SubstrateScaleCUintEncoderConst_singleByteModeMaxVal()) <= 0)
        return A.BigintUtils_toBytes(v.$shl(0, 2), 1, B.C_Endian0);
      if (v.compareTo$1(0, $.$get$SubstrateScaleCUintEncoderConst_twoByteModeMaxVal()) <= 0)
        return A.BigintUtils_toBytes(v.$shl(0, 2).$or(0, A._BigIntImpl__BigIntImpl$from(1)), 2, B.C_Endian0);
      if (v.compareTo$1(0, $.$get$SubstrateScaleCUintEncoderConst_fourByteModeMaxVal()) <= 0)
        return A.BigintUtils_toBytes(v.$shl(0, 2).$or(0, A._BigIntImpl__BigIntImpl$from(2)), 4, B.C_Endian0);
      if (v.compareTo$1(0, $.$get$SubstrateScaleCUintEncoderConst_bigIntegerModeMaxVal()) <= 0) {
        valueBytes = A.BigintUtils_toBytes(v, A.BigintUtils_orderLen(v), B.C_Endian0);
        t1 = A.List_List$_of(A.IntUtils_toBytes((valueBytes.length - 4 << 2 | 3) >>> 0, B.C_Endian0, 1), type$.dynamic);
        B.JSArray_methods.addAll$1(t1, valueBytes);
        return A.List_List$from(t1, true, type$.int);
      }
      throw A.wrapException(A.ArgumentException$("Out of range integer value (" + value + ")", null));
    }
  };
  A.CborObject_CborObject$fromDynamic_closure.prototype = {
    call$1(e) {
      return A.CborObject_CborObject$fromDynamic(e);
    },
    $signature: 267
  };
  A.CborException.prototype = {};
  A.CborBase64Types.prototype = {};
  A.CborBaseUrlValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(this.type.tag);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(new A.CborStringValue(this.value)._encode$0()));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.value;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborBaseUrlValue))
        return false;
      return this.value === other.value && this.type.tag === other.type.tag;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value) ^ B.JSInt_methods.get$hashCode(B.JSArray_methods.get$first(this.type.tag));
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborBigFloatValue.prototype = {
    get$value() {
      return A._setArrayType([this.exponent, this.mantissa], type$.JSArray_BigInt);
    },
    encode$0() {
      var t2, _this = this,
        t1 = A._setArrayType([], type$.JSArray_int),
        bytes = new A.CborBytesTracker(t1);
      bytes.pushTags$1(B.List_5);
      bytes.pushInt$2(4, 2);
      t2 = type$.List_int;
      B.JSArray_methods.addAll$1(t1, t2._as(_this._encodeValue$1(_this.exponent)));
      B.JSArray_methods.addAll$1(t1, t2._as(_this._encodeValue$1(_this.mantissa)));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    _encodeValue$1(value) {
      if (value.get$bitLength(0) > 64)
        return new A.CborBigIntValue(value).encode$0();
      return new A.CborSafeIntValue(value).encode$0();
    },
    toString$0(_) {
      return this.exponent.toString$0(0) + ", " + this.mantissa.toString$0(0);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.CborBigFloatValue))
        return false;
      t1 = type$.JSArray_BigInt;
      return A.CompareUtils_iterableIsEqual(A._setArrayType([this.exponent, this.mantissa], t1), A._setArrayType([other.exponent, other.mantissa], t1), type$.BigInt);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(A._setArrayType([this.exponent, this.mantissa], type$.JSArray_BigInt));
    },
    $isCborObject: 1
  };
  A.CborBigIntValue.prototype = {
    encode$0() {
      var toBytes,
        t1 = A._setArrayType([], type$.JSArray_int),
        bytes = new A.CborBytesTracker(t1),
        v = this.value;
      if (v._isNegative) {
        bytes.pushTags$1(B.List_3);
        v = v.$not(0);
      } else
        bytes.pushTags$1(B.List_2);
      toBytes = A.BigintUtils_toBytes(v, B.JSInt_methods._tdivFast$1((v._isNegative ? v.$negate(0) : v).get$bitLength(0) + 7, 8), B.C_Endian);
      bytes.pushInt$2(2, toBytes.length);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(toBytes));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toBigInt$0() {
      return this.value;
    },
    toString$0(_) {
      return this.value.toString$0(0);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.CborBigIntValue))
        return false;
      t1 = this.value.compareTo$1(0, other.value);
      return t1 === 0;
    },
    get$hashCode(_) {
      return this.value.get$hashCode(0);
    },
    $isCborObject: 1,
    $isCborNumeric: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborBoleanValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int),
        t2 = this.value ? 21 : 20;
      new A.CborBytesTracker(t1).pushInt$2(7, t2);
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return B.JSBool_methods.toString$0(this.value);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborBoleanValue))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSBool_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborBytesValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int),
        t2 = this.value;
      new A.CborBytesTracker(t1).pushInt$2(2, t2.length);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(t2));
      return t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborBytesValue))
        return false;
      return A.BytesUtils_bytesEqual(other.value, this.value);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this.value);
    },
    toString$0(_) {
      return A.BytesUtils_toHexString(this.value, true, null);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborDynamicBytesValue.prototype = {
    encode$0() {
      var t3, t4, t5, _i, v,
        t1 = type$.JSArray_int,
        t2 = A._setArrayType([], t1),
        bytes = new A.CborBytesTracker(t2);
      bytes.pushIndefinite$1(2);
      for (t3 = this.value, t4 = t3.length, t5 = type$.List_int, _i = 0; _i < t4; ++_i) {
        v = t3[_i];
        bytes.pushInt$2(2, J.get$length$asx(v));
        B.JSArray_methods.addAll$1(t2, t5._as(v));
      }
      B.JSArray_methods.addAll$1(t2, t5._as(A._setArrayType([255], t1)));
      return t2;
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this.value, "[", "]");
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborDynamicBytesValue))
        return false;
      return A.CompareUtils_iterableIsEqual(this.value, other.value, type$.List_int);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborDynamicBytesValue_closure.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return A.List_List$unmodifiable(e, type$.int);
    },
    $signature: 19
  };
  A.CborTagValue.prototype = {
    get$value() {
      return this._value;
    },
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(this.tags);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(A.CborObject_CborObject$fromDynamic(this._value).encode$0()));
      return t1;
    },
    toString$0(_) {
      return this._value.toString$0(0);
    },
    $isCborObject: 1
  };
  A._CborDate.prototype = {
    _getTags$0() {
      if (this instanceof A.CborStringDateValue)
        return B.List_0;
      return B.List_1;
    },
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(this._getTags$0());
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(this._datetime$_encode$0()));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.get$value().toIso8601String$0();
    },
    $eq(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (!(other instanceof A._CborDate))
        return false;
      if (A.getRuntimeTypeOfDartObject(other) !== A.getRuntimeTypeOfDartObject(this))
        return false;
      t1 = this.get$value();
      t2 = other.get$value();
      return 1000 * t1._core$_value + t1._microsecond === 1000 * t2._core$_value + t2._microsecond;
    },
    get$hashCode(_) {
      var t1 = this.get$value();
      return A.Object_hash(t1._core$_value, t1._microsecond, B.C_SentinelValue, B.C_SentinelValue);
    },
    $isCborObject: 1
  };
  A.CborStringDateValue.prototype = {
    _datetime$_encode$0() {
      var timeZoneOffsetSign, timeZoneOffsetMinutes, timeZoneOffsetFormatted, _s1_ = "0",
        t1 = this.value,
        year = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getYear(t1)), 4, _s1_),
        month = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getMonth(t1)), 2, _s1_),
        day = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getDay(t1)), 2, _s1_),
        hour = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getHours(t1)), 2, _s1_),
        minute = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getMinutes(t1)), 2, _s1_),
        second = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getSeconds(t1)), 2, _s1_),
        t2 = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getMilliseconds(t1)), 3, _s1_),
        t3 = A.RegExp_RegExp("0*$", true),
        millisecond = A.stringReplaceAllUnchecked(t2, t3, "");
      t2 = t1.isUtc;
      t1 = (t2 ? B.Duration_0 : t1.get$timeZoneOffset())._duration;
      timeZoneOffsetSign = t1 < 0 ? "-" : "+";
      t3 = B.JSInt_methods._tdivFast$1(t1, 3600000000);
      timeZoneOffsetMinutes = B.JSInt_methods.$mod(Math.abs(B.JSInt_methods._tdivFast$1(t1, 60000000)), 60);
      timeZoneOffsetFormatted = t2 ? "Z" : timeZoneOffsetSign + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(Math.abs(t3)), 2, _s1_) + ":" + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(timeZoneOffsetMinutes), 2, _s1_);
      return new A.CborStringValue(year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":" + second + "." + millisecond + timeZoneOffsetFormatted)._encode$0();
    },
    get$value() {
      return this.value;
    }
  };
  A.CborEpochFloatValue.prototype = {
    _datetime$_encode$0() {
      return new A.CborFloatValue(this.value._core$_value / 1000).encode$0();
    },
    get$value() {
      return this.value;
    }
  };
  A.CborEpochIntValue.prototype = {
    _datetime$_encode$0() {
      return new A.CborIntValue(B.JSNumber_methods.round$0(this.value._core$_value / 1000)).encode$0();
    },
    get$value() {
      return this.value;
    }
  };
  A.CborDecimalFracValue.prototype = {
    get$value() {
      return A._setArrayType([this.exponent, this.mantissa], type$.JSArray_BigInt);
    },
    encode$0() {
      var t2, _this = this,
        t1 = A._setArrayType([], type$.JSArray_int),
        bytes = new A.CborBytesTracker(t1);
      bytes.pushTags$1(B.List_4);
      bytes.pushInt$2(4, 2);
      t2 = type$.List_int;
      B.JSArray_methods.addAll$1(t1, t2._as(_this._decimal$_encodeValue$1(_this.exponent)));
      B.JSArray_methods.addAll$1(t1, t2._as(_this._decimal$_encodeValue$1(_this.mantissa)));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    _decimal$_encodeValue$1(value) {
      if (value.get$bitLength(0) > 64)
        return new A.CborBigIntValue(value).encode$0();
      return new A.CborSafeIntValue(value).encode$0();
    },
    toString$0(_) {
      return B.JSArray_methods.join$1(A._setArrayType([this.exponent, this.mantissa], type$.JSArray_BigInt), ", ");
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.CborDecimalFracValue))
        return false;
      t1 = type$.JSArray_BigInt;
      return A.CompareUtils_iterableIsEqual(A._setArrayType([this.exponent, this.mantissa], t1), A._setArrayType([other.exponent, other.mantissa], t1), type$.BigInt);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(A._setArrayType([this.exponent, this.mantissa], type$.JSArray_BigInt));
    },
    $isCborObject: 1
  };
  A.CborFloatValue.prototype = {
    encode$0() {
      var value, toBytes,
        t1 = type$.JSArray_int,
        t2 = A._setArrayType([], t1),
        bytes = new A.CborBytesTracker(t2),
        t3 = this.value;
      if (isNaN(t3)) {
        bytes.pushMajorTag$2(7, 25);
        B.JSArray_methods.addAll$1(t2, type$.List_int._as(A._setArrayType([126, 0], t1)));
        A.BytesUtils_validateListOfBytes(t2);
        return t2;
      }
      value = this.__CborFloatValue__decodFloat_FI;
      if (value === $) {
        value !== $ && A.throwLateFieldADI("_decodFloat");
        value = this.__CborFloatValue__decodFloat_FI = new A.FloatUtils(t3);
      }
      toBytes = value.toBytes$1(null);
      bytes.pushMajorTag$2(7, toBytes.item2.get$numBytes());
      B.JSArray_methods.addAll$1(t2, type$.List_int._as(toBytes.item1));
      A.BytesUtils_validateListOfBytes(t2);
      return t2;
    },
    toString$0(_) {
      return B.JSNumber_methods.toString$0(this.value);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.CborFloatValue))
        return false;
      t1 = other.value;
      return this.value === t1;
    },
    get$hashCode(_) {
      return B.JSNumber_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborIntValue.prototype = {
    encode$0() {
      var value, t3,
        t1 = A._setArrayType([], type$.JSArray_int),
        bytes = new A.CborBytesTracker(t1),
        t2 = this.value;
      if (B.JSInt_methods.get$bitLength(t2) > 31 && B.JSInt_methods.get$isNegative(t2)) {
        value = A._BigIntImpl_parse(B.JSInt_methods.toString$0(t2), null).$not(0);
        if (!value.get$isValidInt())
          throw A.wrapException(A.CborException$("Value is to large for encoding as CborInteger", A.LinkedHashMap_LinkedHashMap$_literal(["value", B.JSInt_methods.toString$0(t2)], type$.String, type$.dynamic)));
        bytes.pushInt$2(1, value.toInt$0(0));
      } else {
        t3 = B.JSInt_methods.get$isNegative(t2) ? 1 : 0;
        bytes.pushInt$2(t3, B.JSInt_methods.get$isNegative(t2) ? ~t2 >>> 0 : t2);
      }
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toBigInt$0() {
      return A._BigIntImpl__BigIntImpl$from(this.value);
    },
    toInt$0(_) {
      return this.value;
    },
    toString$0(_) {
      return B.JSInt_methods.toString$0(this.value);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!type$.CborNumeric._is(other))
        return false;
      if (other instanceof A.CborBigIntValue)
        return false;
      t1 = A._BigIntImpl__BigIntImpl$from(this.value).compareTo$1(0, other.toBigInt$0());
      return t1 === 0;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    $isCborNumeric: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborSafeIntValue.prototype = {
    encode$0() {
      var t2, t3, t4,
        t1 = this.value;
      if (t1.get$isValidInt())
        return new A.CborIntValue(t1.toInt$0(0)).encode$0();
      t2 = A._setArrayType([], type$.JSArray_int);
      t3 = t1._isNegative;
      t4 = t3 ? 1 : 0;
      new A.CborBytesTracker(t2).pushMajorTag$2(t4, 27);
      B.JSArray_methods.addAll$1(t2, type$.List_int._as(A.BigintUtils_toBytes(t3 ? t1.$not(0) : t1, 8, B.C_Endian)));
      A.BytesUtils_validateListOfBytes(t2);
      return t2;
    },
    toBigInt$0() {
      return this.value;
    },
    toInt$0(_) {
      return this.value.toInt$0(0);
    },
    toString$0(_) {
      return this.value.toString$0(0);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!type$.CborNumeric._is(other))
        return false;
      if (other instanceof A.CborBigIntValue)
        return false;
      t1 = this.value.compareTo$1(0, other.toBigInt$0());
      return t1 === 0;
    },
    get$hashCode(_) {
      return this.value.get$hashCode(0);
    },
    $isCborObject: 1,
    $isCborNumeric: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborListValue.prototype = {
    encode$0() {
      var t4, t5, t6, _i,
        t1 = type$.JSArray_int,
        t2 = A._setArrayType([], t1),
        bytes = new A.CborBytesTracker(t2),
        t3 = this._isFixedLength;
      if (t3)
        bytes.pushInt$2(4, this.value.length);
      else
        bytes.pushIndefinite$1(4);
      for (t4 = this.value, t5 = t4.length, t6 = type$.List_int, _i = 0; _i < t4.length; t4.length === t5 || (0, A.throwConcurrentModificationError)(t4), ++_i)
        B.JSArray_methods.addAll$1(t2, t6._as(A.CborObject_CborObject$fromDynamic(t4[_i]).encode$0()));
      if (!t3)
        B.JSArray_methods.addAll$1(t2, t6._as(A._setArrayType([255], t1)));
      A.BytesUtils_validateListOfBytes(t2);
      return t2;
    },
    toString$0(_) {
      return B.JSArray_methods.join$1(this.value, ",");
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborMapValue.prototype = {
    encode$0() {
      var t4, t5, v,
        t1 = type$.JSArray_int,
        t2 = A._setArrayType([], t1),
        bytes = new A.CborBytesTracker(t2),
        t3 = this._map$_isFixedLength;
      if (t3)
        bytes.pushInt$2(5, this.value.__js_helper$_length);
      else
        bytes.pushIndefinite$1(5);
      for (t4 = this.value, t4 = new A.LinkedHashMapEntriesIterable(t4, A._instanceType(t4)._eval$1("LinkedHashMapEntriesIterable<1,2>")).get$iterator(0), t5 = type$.List_int; t4.moveNext$0();) {
        v = t4.__js_helper$_current;
        B.JSArray_methods.addAll$1(t2, t5._as(A.CborObject_CborObject$fromDynamic(v.key).encode$0()));
        B.JSArray_methods.addAll$1(t2, t5._as(A.CborObject_CborObject$fromDynamic(v.value).encode$0()));
      }
      if (!t3)
        B.JSArray_methods.addAll$1(t2, t5._as(A._setArrayType([255], t1)));
      A.BytesUtils_validateListOfBytes(t2);
      return t2;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborMimeValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(B.List_36);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(new A.CborStringValue(this.value)._encode$0()));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.value;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborMimeValue))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborNullValue.prototype = {
    get$value() {
      return null;
    },
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushInt$2(7, 22);
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return "null";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborNullValue))
        return false;
      return true;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode("null");
    },
    $isCborObject: 1
  };
  A.CborUndefinedValue.prototype = {
    get$value() {
      return null;
    },
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushInt$2(7, 23);
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return "undefined";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborUndefinedValue))
        return false;
      return true;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode("undefined");
    },
    $isCborObject: 1
  };
  A.CborRegxpValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(B.List_35);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(new A.CborStringValue(this.value)._encode$0()));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.value;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborRegxpValue))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborSetValue.prototype = {
    encode$0() {
      var t2, t3, t4, v,
        t1 = A._setArrayType([], type$.JSArray_int),
        bytes = new A.CborBytesTracker(t1);
      bytes.pushTags$1(B.List_258);
      t2 = this.value;
      bytes.pushInt$2(4, t2._collection$_length);
      for (t2 = A._LinkedHashSetIterator$(t2, t2._collection$_modifications, A._instanceType(t2)._precomputed1), t3 = type$.List_int, t4 = t2.$ti._precomputed1; t2.moveNext$0();) {
        v = t2._collection$_current;
        B.JSArray_methods.addAll$1(t1, t3._as(A.CborObject_CborObject$fromDynamic(v == null ? t4._as(v) : v).encode$0()));
      }
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.value.join$1(0, ",");
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborSetValue))
        return false;
      return A.CompareUtils_iterableIsEqual(this.value, other.value, type$.dynamic);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A.CborString.prototype = {
    encode$0() {
      return this._encode$0();
    },
    $isCborObject: 1
  };
  A.CborStringValue.prototype = {
    _encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int),
        toBytes = A.StringUtils_encode(this.value, B.StringEncoding_1);
      new A.CborBytesTracker(t1).pushInt$2(3, toBytes.length);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(toBytes));
      return t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborStringValue))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value);
    },
    toString$0(_) {
      return this.value;
    },
    get$value() {
      return this.value;
    }
  };
  A.CborIndefiniteStringValue.prototype = {
    _encode$0() {
      var t3, t4, t5, _i, toBytes,
        t1 = type$.JSArray_int,
        t2 = A._setArrayType([], t1),
        bytes = new A.CborBytesTracker(t2);
      bytes.pushIndefinite$1(3);
      for (t3 = this.value, t4 = t3.length, t5 = type$.List_int, _i = 0; _i < t4; ++_i) {
        toBytes = A.StringUtils_encode(t3[_i], B.StringEncoding_1);
        bytes.pushInt$2(3, toBytes.length);
        B.JSArray_methods.addAll$1(t2, t5._as(toBytes));
      }
      B.JSArray_methods.addAll$1(t2, t5._as(A._setArrayType([255], t1)));
      A.BytesUtils_validateListOfBytes(t2);
      return t2;
    },
    toString$0(_) {
      return B.JSArray_methods.join$1(this.value, ", ");
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborIndefiniteStringValue))
        return false;
      return A.CompareUtils_iterableIsEqual(this.value, other.value, type$.String);
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this.value);
    },
    get$value() {
      return this.value;
    }
  };
  A.CborUriValue.prototype = {
    encode$0() {
      var t1 = A._setArrayType([], type$.JSArray_int);
      new A.CborBytesTracker(t1).pushTags$1(B.List_32);
      B.JSArray_methods.addAll$1(t1, type$.List_int._as(new A.CborStringValue(this.value)._encode$0()));
      A.BytesUtils_validateListOfBytes(t1);
      return t1;
    },
    toString$0(_) {
      return this.value;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.CborUriValue))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.value);
    },
    $isCborObject: 1,
    get$value() {
      return this.value;
    }
  };
  A._DecodeCborResult.prototype = {};
  A.CborUtils__decodeUtf8String_closure.prototype = {
    call$1(e) {
      return type$.CborStringValue._as(e).value;
    },
    $signature: 61
  };
  A.CborUtils__toStringObject_closure.prototype = {
    call$1(element) {
      return A.BytesUtils_bytesEqual(this.tags, type$.CborBase64Types._as(element).tag);
    },
    $signature: 135
  };
  A.CborUtils__toStringObject_closure0.prototype = {
    call$1(element) {
      return A.BytesUtils_bytesEqual(this.tags, type$.CborBase64Types._as(element).tag);
    },
    $signature: 135
  };
  A.CborUtils__decodeBytesString_closure.prototype = {
    call$1(e) {
      return type$.CborBytesValue._as(e).value;
    },
    $signature: 264
  };
  A.CborBytesTracker.prototype = {
    pushTags$1(tags) {
      var t1, _i;
      type$.List_int._as(tags);
      for (t1 = tags.length, _i = 0; _i < t1; ++_i)
        this.pushInt$2(6, tags[_i]);
    },
    pushIndefinite$1(majorTag) {
      B.JSArray_methods.addAll$1(this._dynamic_bytes$_buffer, type$.List_int._as(A._setArrayType([(majorTag << 5 | 31) >>> 0], type$.JSArray_int)));
    },
    pushMajorTag$2(majorTag, value) {
      B.JSArray_methods.addAll$1(this._dynamic_bytes$_buffer, type$.List_int._as(A._setArrayType([(majorTag << 5 | value) >>> 0], type$.JSArray_int)));
    },
    pushInt$2(majorTag, value) {
      var len,
        $length = this.bytesLength$1(value),
        t1 = $length == null,
        t2 = t1 ? value : $length,
        t3 = type$.List_int,
        t4 = this._dynamic_bytes$_buffer;
      B.JSArray_methods.addAll$1(t4, t3._as(A._setArrayType([(majorTag << 5 | t2) >>> 0], type$.JSArray_int)));
      if (t1)
        return;
      len = B.JSInt_methods.$shl(1, $length - 24);
      if (len <= 4)
        B.JSArray_methods.addAll$1(t4, t3._as(A.IntUtils_toBytes(value, B.C_Endian, len)));
      else
        B.JSArray_methods.addAll$1(t4, t3._as(A.BigintUtils_toBytes(A._BigIntImpl__BigIntImpl$from(value), 8, B.C_Endian)));
    },
    bytesLength$1(value) {
      if (value < 24)
        return null;
      else if (value <= 255)
        return 24;
      else if (value <= 65535)
        return 25;
      else if (value <= 4294967295)
        return 26;
      else
        return 27;
    }
  };
  A.FloatLength.prototype = {
    get$numBytes() {
      switch (this) {
        case B.FloatLength_11_52:
          return 27;
        case B.FloatLength_8_23:
          return 26;
        default:
          return 25;
      }
    }
  };
  A.FloatUtils.prototype = {
    get$_isLess() {
      var result, _this = this,
        value = _this.__FloatUtils__isLess_FI;
      if (value === $) {
        result = A.FloatUtils__isLessThan(_this.value);
        _this.__FloatUtils__isLess_FI !== $ && A.throwLateFieldADI("_isLess");
        _this.__FloatUtils__isLess_FI = result;
        value = result;
      }
      return value;
    },
    _encodeFloat16$1(endianness) {
      var t1, float32Bits, sign, exponent, fraction, newExponent, uint8List,
        float16View = new Uint16Array(1),
        float32View = new Float32Array(1);
      float32View[0] = this.value;
      t1 = J.asUint32List$0$x(B.NativeUint8List_methods.get$buffer(J.asUint8List$0$x(B.NativeFloat32List_methods.get$buffer(float32View))));
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      float32Bits = t1[0];
      sign = float32Bits >>> 31 & 1;
      exponent = float32Bits >>> 23 & 255;
      fraction = float32Bits & 8388607;
      if (exponent === 0)
        float16View[0] = sign << 15 | fraction >>> 13 & 1023;
      else if (exponent === 255)
        float16View[0] = sign << 15 | 31744;
      else {
        newExponent = exponent - 127 + 15;
        if (newExponent < 0)
          float16View[0] = sign << 15;
        else {
          t1 = sign << 15;
          if (newExponent > 31)
            float16View[0] = t1 | 31744;
          else
            float16View[0] = (t1 | newExponent << 10 | fraction >>> 13 & 1023) >>> 0;
        }
      }
      uint8List = J.asUint8List$0$x(B.NativeUint16List_methods.get$buffer(float16View));
      if (1 >= uint8List.length)
        return A.ioore(uint8List, 1);
      t1 = A.List_List$from([uint8List[1], uint8List[0]], true, type$.int);
      return t1;
    },
    _encodeFloat64$1(endianness) {
      var byteData = new DataView(new ArrayBuffer(8));
      byteData.setFloat64(0, this.value, false);
      return J.asUint8List$0$x(B.NativeByteData_methods.get$buffer(byteData));
    },
    _encodeFloat32$1(endianness) {
      var byteData = new DataView(new ArrayBuffer(4));
      byteData.setFloat32(0, this.value, false);
      return J.asUint8List$0$x(B.NativeByteData_methods.get$buffer(byteData));
    },
    toBytes$1(decodFloatType) {
      var _this = this;
      if (_this.get$_isLess().item1)
        return new A.Tuple(_this._encodeFloat16$1(null), B.FloatLength_5_10, type$.Tuple_of_List_int_and_FloatLength);
      else if (_this.get$_isLess().item2)
        return new A.Tuple(_this._encodeFloat32$1(null), B.FloatLength_8_23, type$.Tuple_of_List_int_and_FloatLength);
      return new A.Tuple(_this._encodeFloat64$1(null), B.FloatLength_11_52, type$.Tuple_of_List_int_and_FloatLength);
    }
  };
  A.AES.prototype = {
    setKey$2(key, noDecryption) {
      var t1, t2, _this = this;
      type$.List_int._as(key);
      t1 = _this.__AES__keyLen_A;
      t1 === $ && A.throwLateFieldNI("_keyLen");
      if (t1 !== 32)
        throw A.wrapException(B.CryptoException_5rc);
      if (_this._encKey == null)
        _this._encKey = A.List_List$filled(60, 0, false, type$.int);
      if (_this._decKey == null)
        _this._decKey = A.List_List$filled(60, 0, false, type$.int);
      t1 = $.$get$AES__lib();
      t2 = _this._encKey;
      t2.toString;
      t1.expandKey$3(key, t2, _this._decKey);
      return _this;
    },
    $isBlockCipher: 1
  };
  A.AESLib.prototype = {
    initialize$0() {
      var t1, t2, t3, t4, i, s, t5, t6, w, t7, t8, _this = this,
        mul = new A.AESLib_initialize_mul(),
        r24 = new A.AESLib_initialize_r24();
      for (t1 = _this._te0, t2 = _this._te1, t3 = _this._te2, t4 = _this._te3, i = 0; i < 256; ++i) {
        s = B.List_TrJ[i];
        t5 = mul.call$2(s, 2);
        if (typeof t5 !== "number")
          return t5.$shl();
        t6 = mul.call$2(s, 3);
        if (typeof t6 !== "number")
          return A.iae(t6);
        w = (t5 << 24 | s << 16 | s << 8 | t6) >>> 0;
        B.JSArray_methods.$indexSet(t1, i, w);
        w = r24.call$1(w);
        B.JSArray_methods.$indexSet(t2, i, w);
        w = r24.call$1(w);
        B.JSArray_methods.$indexSet(t3, i, w);
        w = r24.call$1(w);
        B.JSArray_methods.$indexSet(t4, i, w);
        r24.call$1(w);
      }
      for (t1 = _this._td0, t2 = _this._td1, t3 = _this._td2, t4 = _this._td3, i = 0; i < 256; ++i) {
        s = B.List_04A[i];
        t5 = mul.call$2(s, 14);
        if (typeof t5 !== "number")
          return t5.$shl();
        t6 = mul.call$2(s, 9);
        if (typeof t6 !== "number")
          return t6.$shl();
        t7 = mul.call$2(s, 13);
        if (typeof t7 !== "number")
          return t7.$shl();
        t8 = mul.call$2(s, 11);
        if (typeof t8 !== "number")
          return A.iae(t8);
        w = (t5 << 24 | t6 << 16 | t7 << 8 | t8) >>> 0;
        B.JSArray_methods.$indexSet(t1, i, w);
        w = r24.call$1(w);
        B.JSArray_methods.$indexSet(t2, i, w);
        w = r24.call$1(w);
        B.JSArray_methods.$indexSet(t3, i, w);
        w = r24.call$1(w);
        B.JSArray_methods.$indexSet(t4, i, w);
        r24.call$1(w);
      }
    },
    _subw$1(w) {
      return (B.List_TrJ[w >>> 24 & 255] << 24 | B.List_TrJ[w >>> 16 & 255] << 16 | B.List_TrJ[w >>> 8 & 255] << 8 | B.List_TrJ[w & 255]) >>> 0;
    },
    expandKey$3(key, encKey, decKey) {
      var n, i, t, t2, t3, t4, ei, t5, i0, t6, j, t7, x, t8, t9, t10, _this = this,
        t1 = type$.List_int;
      t1._as(key);
      t1._as(encKey);
      type$.nullable_List_int._as(decKey);
      n = encKey.length;
      for (i = 0; i < 8; ++i)
        B.JSArray_methods.$indexSet(encKey, i, A.readUint32BE(key, i * 4));
      for (i = 8; i < n; ++i) {
        t = encKey[i - 1];
        t1 = B.JSInt_methods.$mod(i, 8);
        if (t1 === 0) {
          t1 = _this._subw$1((t << 8 | t >>> 24) >>> 0);
          t2 = B.JSInt_methods._tdivFast$1(i, 8) - 1;
          if (!(t2 >= 0 && t2 < 16))
            return A.ioore(B.List_Cex, t2);
          t = t1 ^ B.List_Cex[t2] << 24;
        } else if (t1 === 4)
          t = _this._subw$1(t);
        B.JSArray_methods.$indexSet(encKey, i, (encKey[i - 8] ^ t) >>> 0);
      }
      if (decKey != null)
        for (t1 = _this._td0, t2 = _this._td1, t3 = _this._td2, t4 = _this._td3, i = 0; i < n; i = i0) {
          ei = n - i - 4;
          for (t5 = i > 0, i0 = i + 4, t6 = i0 < n, j = 0; j < 4; ++j) {
            t7 = ei + j;
            if (!(t7 >= 0))
              return A.ioore(encKey, t7);
            x = encKey[t7];
            if (t5 && t6) {
              t7 = B.List_TrJ[x >>> 24 & 255];
              if (!(t7 < 256))
                return A.ioore(t1, t7);
              t7 = t1[t7];
              t8 = B.List_TrJ[x >>> 16 & 255];
              if (!(t8 < 256))
                return A.ioore(t2, t8);
              t8 = t2[t8];
              t9 = B.List_TrJ[x >>> 8 & 255];
              if (!(t9 < 256))
                return A.ioore(t3, t9);
              t9 = t3[t9];
              t10 = B.List_TrJ[x & 255];
              if (!(t10 < 256))
                return A.ioore(t4, t10);
              x = (t7 ^ t8 ^ t9 ^ t4[t10]) >>> 0;
            }
            B.JSArray_methods.$indexSet(decKey, i + j, x);
          }
        }
    },
    encryptBlock$3(xk, src, dst) {
      var s0, s1, s2, s3, nr, t2, t3, t4, t5, t00, t10, t20, t30, k, r, t6, t7, t8, t9, t11, t12, t13, t14, t15, t16, t17, t18, _this = this,
        t1 = type$.List_int;
      t1._as(xk);
      t1._as(src);
      t1._as(dst);
      s0 = A.readUint32BE(src, 0);
      s1 = A.readUint32BE(src, 4);
      s2 = A.readUint32BE(src, 8);
      s3 = A.readUint32BE(src, 12);
      t1 = xk.length;
      if (0 >= t1)
        return A.ioore(xk, 0);
      s0 ^= xk[0];
      if (1 >= t1)
        return A.ioore(xk, 1);
      s1 ^= xk[1];
      if (2 >= t1)
        return A.ioore(xk, 2);
      s2 ^= xk[2];
      if (3 >= t1)
        return A.ioore(xk, 3);
      s3 ^= xk[3];
      nr = (t1 / 4 | 0) - 2;
      for (t2 = _this._te0, t3 = _this._te1, t4 = _this._te2, t5 = _this._te3, t00 = 0, t10 = 0, t20 = 0, t30 = 0, k = 4, r = 0; r < nr; ++r, s3 = t30, s2 = t20, s1 = t10, s0 = t00) {
        if (!(k < t1))
          return A.ioore(xk, k);
        t00 = xk[k] ^ t2[s0 >>> 24 & 255] ^ t3[s1 >>> 16 & 255] ^ t4[s2 >>> 8 & 255] ^ t5[s3 & 255];
        t6 = k + 1;
        if (!(t6 < t1))
          return A.ioore(xk, t6);
        t10 = xk[t6] ^ t2[s1 >>> 24 & 255] ^ t3[s2 >>> 16 & 255] ^ t4[s3 >>> 8 & 255] ^ t5[s0 & 255];
        t6 = k + 2;
        if (!(t6 < t1))
          return A.ioore(xk, t6);
        t20 = xk[t6] ^ t2[s2 >>> 24 & 255] ^ t3[s3 >>> 16 & 255] ^ t4[s0 >>> 8 & 255] ^ t5[s1 & 255];
        t6 = k + 3;
        if (!(t6 < t1))
          return A.ioore(xk, t6);
        t30 = xk[t6] ^ t2[s3 >>> 24 & 255] ^ t3[s0 >>> 16 & 255] ^ t4[s1 >>> 8 & 255] ^ t5[s2 & 255];
        k += 4;
      }
      t2 = t00 >>> 24;
      if (!(t2 < 256))
        return A.ioore(B.List_TrJ, t2);
      t2 = B.List_TrJ[t2];
      t3 = B.List_TrJ[t10 >>> 16 & 255];
      t4 = B.List_TrJ[t20 >>> 8 & 255];
      t5 = B.List_TrJ[t30 & 255];
      t6 = t10 >>> 24;
      if (!(t6 < 256))
        return A.ioore(B.List_TrJ, t6);
      t6 = B.List_TrJ[t6];
      t7 = B.List_TrJ[t20 >>> 16 & 255];
      t8 = B.List_TrJ[t30 >>> 8 & 255];
      t9 = B.List_TrJ[t00 & 255];
      t11 = t20 >>> 24;
      if (!(t11 < 256))
        return A.ioore(B.List_TrJ, t11);
      t11 = B.List_TrJ[t11];
      t12 = B.List_TrJ[t30 >>> 16 & 255];
      t13 = B.List_TrJ[t00 >>> 8 & 255];
      t14 = B.List_TrJ[t10 & 255];
      t30 = t30 >>> 24;
      if (!(t30 < 256))
        return A.ioore(B.List_TrJ, t30);
      t30 = B.List_TrJ[t30];
      t00 = B.List_TrJ[t00 >>> 16 & 255];
      t10 = B.List_TrJ[t10 >>> 8 & 255];
      t20 = B.List_TrJ[t20 & 255];
      if (!(k < t1))
        return A.ioore(xk, k);
      t15 = xk[k];
      t16 = k + 1;
      if (!(t16 < t1))
        return A.ioore(xk, t16);
      t16 = xk[t16];
      t17 = k + 2;
      if (!(t17 < t1))
        return A.ioore(xk, t17);
      t17 = xk[t17];
      t18 = k + 3;
      if (!(t18 < t1))
        return A.ioore(xk, t18);
      t18 = xk[t18];
      A.writeUint32BE(((t2 << 24 | t3 << 16 | t4 << 8 | t5) ^ t15) >>> 0, dst, 0);
      A.writeUint32BE(((t6 << 24 | t7 << 16 | t8 << 8 | t9) ^ t16) >>> 0, dst, 4);
      A.writeUint32BE(((t11 << 24 | t12 << 16 | t13 << 8 | t14) ^ t17) >>> 0, dst, 8);
      A.writeUint32BE(((t30 << 24 | t00 << 16 | t10 << 8 | t20) ^ t18) >>> 0, dst, 12);
    }
  };
  A.AESLib_initialize_mul.prototype = {
    call$2(b, c) {
      var j = c,
        i = b,
        s = 0, k = 1;
      while (true) {
        if (!(k < 256 && j !== 0))
          break;
        if ((j & k) >>> 0 !== 0) {
          s = (s ^ i) >>> 0;
          j = (j ^ k) >>> 0;
        }
        i = i << 1;
        if ((i & 256) !== 0)
          i ^= 283;
        k = k << 1 >>> 0;
      }
      return s;
    },
    $signature: 59
  };
  A.AESLib_initialize_r24.prototype = {
    call$1(x) {
      return A.rotl32(x, 24);
    },
    $signature: 27
  };
  A.CurveFp.prototype = {
    $eq(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (other instanceof A.CurveFp) {
        t1 = _this.p.compareTo$1(0, other.p);
        t2 = false;
        if (t1 === 0) {
          t1 = _this.a.compareTo$1(0, other.a);
          if (t1 === 0) {
            t1 = _this.b.compareTo$1(0, other.b);
            if (t1 === 0)
              t1 = _this.h.compareTo$1(0, other.h) === 0;
            else
              t1 = t2;
          } else
            t1 = t2;
        } else
          t1 = t2;
        return t1;
      }
      return false;
    },
    get$hashCode(_) {
      var _this = this;
      return _this.p.get$hashCode(0) ^ _this.a.get$hashCode(0) ^ _this.b.get$hashCode(0) ^ _this.h.get$hashCode(0);
    },
    get$p() {
      return this.p;
    }
  };
  A.CurveED.prototype = {
    $eq(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (other instanceof A.CurveED) {
        t1 = _this.p.compareTo$1(0, other.p);
        t2 = false;
        if (t1 === 0) {
          t1 = _this.a.compareTo$1(0, other.a);
          if (t1 === 0) {
            t1 = _this.d.compareTo$1(0, other.d);
            if (t1 === 0)
              t1 = _this.h.compareTo$1(0, other.h) === 0;
            else
              t1 = t2;
          } else
            t1 = t2;
        } else
          t1 = t2;
        return t1;
      }
      return false;
    },
    get$hashCode(_) {
      var _this = this;
      return _this.p.get$hashCode(0) ^ _this.d.get$hashCode(0) ^ _this.h.get$hashCode(0) ^ _this.a.get$hashCode(0);
    },
    get$p() {
      return this.p;
    }
  };
  A.Curve.prototype = {};
  A.ECDSAPublicKey.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (other instanceof A.ECDSAPublicKey)
        return this.generator.curve.$eq(0, other.generator.curve) && this.point.$eq(0, other.point);
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.generator.curve, this.point]);
    }
  };
  A.EDDSAPrivateKey.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other instanceof A.EDDSAPrivateKey) {
        if (this === other)
          return true;
        return this.generator.curve.$eq(0, other.generator.curve) && A.BytesUtils_bytesEqual(this.key, other.key);
      }
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this.key, A._setArrayType([this.generator.curve], type$.JSArray_Object));
    }
  };
  A.EDDSAPublicKey.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (other instanceof A.EDDSAPublicKey) {
        if (this === other)
          return true;
        return this.generator.curve.$eq(0, other.generator.curve) && A.BytesUtils_bytesEqual(this._encoded, other._encoded);
      }
      return false;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this._encoded, A._setArrayType([this.generator.curve], type$.JSArray_Object));
    }
  };
  A.EncodeType.prototype = {
    _enumToString$0() {
      return "EncodeType." + this._name;
    }
  };
  A.AbstractPoint.prototype = {
    toBytes$1(encodeType) {
      var encLen, yStr, t1, t2, raw, xBytes, _this = this;
      if (_this instanceof A.EDPoint) {
        _this.scale$0();
        encLen = B.JSInt_methods._tdivFast$1(_this.curve.p.get$bitLength(0) + 1 + 7, 8);
        yStr = A.BigintUtils_toBytes(_this.get$y(), encLen, B.C_Endian0);
        t1 = _this.get$x().$mod(0, $.$get$_BigIntImpl_two()).compareTo$1(0, $.$get$_BigIntImpl_one());
        if (t1 === 0) {
          t1 = yStr.length;
          t2 = t1 - 1;
          if (!(t2 >= 0))
            return A.ioore(yStr, t2);
          B.JSArray_methods.$indexSet(yStr, t2, (yStr[t2] | 128) >>> 0);
        }
        return yStr;
      }
      switch (encodeType) {
        case B.EncodeType_2:
          return _this._base$_encode$0();
        case B.EncodeType_3:
          t1 = [4];
          B.JSArray_methods.addAll$1(t1, _this._base$_encode$0());
          return A.List_List$from(t1, true, type$.int);
        case B.EncodeType_1:
          raw = _this._base$_encode$0();
          t1 = A._setArrayType([!_this.get$y().get$isEven(0) ? 7 : 6], type$.JSArray_int);
          B.JSArray_methods.addAll$1(t1, raw);
          return t1;
        default:
          xBytes = A.BigintUtils_toBytes(_this.get$x(), A.BigintUtils_orderLen(_this.get$curve().get$p()), B.C_Endian);
          t1 = A._setArrayType([!_this.get$y().get$isEven(0) ? 3 : 2], type$.JSArray_int);
          B.JSArray_methods.addAll$1(t1, xBytes);
          return t1;
      }
    },
    toBytes$0() {
      return this.toBytes$1(B.EncodeType_0);
    },
    _base$_encode$0() {
      var _this = this,
        xBytes = A.BigintUtils_toBytes(_this.get$x(), A.BigintUtils_orderLen(_this.get$curve().get$p()), B.C_Endian),
        yBytes = A.BigintUtils_toBytes(_this.get$y(), A.BigintUtils_orderLen(_this.get$curve().get$p()), B.C_Endian),
        t1 = A.List_List$_of(xBytes, type$.int);
      B.JSArray_methods.addAll$1(t1, yBytes);
      return t1;
    },
    toString$0(_) {
      return "(" + this.get$x().toString$0(0) + ", " + this.get$y().toString$0(0) + ")";
    }
  };
  A.ProjectiveECCPoint.prototype = {
    get$isInfinity() {
      var t1 = this._coords[0],
        t2 = $.$get$_BigIntImpl_zero();
      t1 = t1.compareTo$1(0, t2);
      if (t1 === 0)
        t1 = this._coords[1].compareTo$1(0, t2) === 0;
      else
        t1 = false;
      return t1;
    },
    _precomputeIfNeeded$0() {
      var t1, precomputedPoints, i, t2, newOrder, t3, t4, doubler, _this = this;
      if (!_this.generator || _this._precompute.length !== 0)
        return;
      t1 = _this.order;
      t1.toString;
      precomputedPoints = A._setArrayType([], type$.JSArray_List_BigInt);
      i = $.$get$_BigIntImpl_one();
      t2 = $.$get$_BigIntImpl_two();
      newOrder = t1.$mul(0, t2);
      t3 = _this._coords;
      t4 = type$.JSArray_BigInt;
      t3 = A._setArrayType([t3[0], t3[1], t3[2]], t4);
      doubler = new A.ProjectiveECCPoint(_this.curve, t1, false, B.List_empty0, t3);
      newOrder = newOrder.$mul(0, t2);
      B.JSArray_methods.add$1(precomputedPoints, A._setArrayType([doubler.get$x(), doubler.get$y()], t4));
      for (; i.compareTo$1(0, newOrder) < 0;) {
        i = i.$mul(0, t2);
        doubler = doubler.doublePoint$0().scale$0();
        B.JSArray_methods.add$1(precomputedPoints, A._setArrayType([doubler.get$x(), doubler.get$y()], t4));
      }
      _this._precompute = precomputedPoints;
    },
    $eq(_, other) {
      var t1, x1, y1, z1, p, zz1, t2, x2, y2, z2, zz2;
      if (other == null)
        return false;
      if (!(other instanceof A.AbstractPoint))
        return false;
      t1 = this._coords;
      x1 = t1[0];
      y1 = t1[1];
      z1 = t1[2];
      t1 = this.curve;
      p = t1.p;
      zz1 = z1.$mul(0, z1).$mod(0, p);
      if (!(other instanceof A.ProjectiveECCPoint))
        return false;
      if (other.get$isInfinity()) {
        t1 = $.$get$_BigIntImpl_zero();
        t2 = y1.compareTo$1(0, t1);
        if (t2 !== 0)
          t1 = z1.compareTo$1(0, t1) === 0;
        else
          t1 = true;
        return t1;
      }
      t2 = other._coords;
      x2 = t2[0];
      y2 = t2[1];
      z2 = t2[2];
      if (!t1.$eq(0, other.curve))
        return false;
      zz2 = z2.$mul(0, z2).$mod(0, p);
      t1 = x1.$mul(0, zz2).$sub(0, x2.$mul(0, zz1)).$mod(0, p);
      t2 = $.$get$_BigIntImpl_zero();
      t1 = t1.compareTo$1(0, t2);
      if (t1 === 0)
        t1 = y1.$mul(0, zz2).$mul(0, z2).$sub(0, y2.$mul(0, zz1).$mul(0, z1)).$mod(0, p).compareTo$1(0, t2) === 0;
      else
        t1 = false;
      return t1;
    },
    get$x() {
      var p, zInverse,
        t1 = this._coords,
        xCoordinate = t1[0],
        zCoordinate = t1[2];
      t1 = zCoordinate.compareTo$1(0, $.$get$_BigIntImpl_one());
      if (t1 === 0)
        return xCoordinate;
      p = this.curve.p;
      zInverse = A.BigintUtils_inverseMod(zCoordinate, p);
      return xCoordinate.$mul(0, zInverse).$mul(0, zInverse).$mod(0, p);
    },
    get$y() {
      var zInverse,
        t1 = this._coords,
        yCoordinate = t1[1],
        zCoordinate = t1[2],
        primeField = this.curve.p;
      t1 = zCoordinate.compareTo$1(0, $.$get$_BigIntImpl_one());
      if (t1 === 0)
        return yCoordinate;
      zInverse = A.BigintUtils_inverseMod(zCoordinate, primeField);
      return yCoordinate.$mul(0, zInverse).$mul(0, zInverse).$mul(0, zInverse).$mod(0, primeField);
    },
    scale$0() {
      var currentY, currentX, primeField, zInverse, zInverseSquared, _this = this,
        currentZ = _this._coords[2],
        t1 = $.$get$_BigIntImpl_one(),
        t2 = currentZ.compareTo$1(0, t1);
      if (t2 === 0)
        return _this;
      t2 = _this._coords;
      currentY = t2[1];
      currentX = t2[0];
      primeField = _this.curve.p;
      zInverse = A.BigintUtils_inverseMod(currentZ, primeField);
      zInverseSquared = zInverse.$mul(0, zInverse).$mod(0, primeField);
      _this._coords = A._setArrayType([currentX.$mul(0, zInverseSquared).$mod(0, primeField), currentY.$mul(0, zInverseSquared).$mul(0, zInverse).$mod(0, primeField), t1], type$.JSArray_BigInt);
      return _this;
    },
    _doubleWithZ1$4(x1, y1, p, a) {
      var ySquaredSquared, s, m, t,
        xSquared = x1.$mul(0, x1).$mod(0, p),
        ySquared = y1.$mul(0, y1).$mod(0, p),
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = ySquared.compareTo$1(0, t1);
      if (t2 === 0)
        return A._setArrayType([t1, t1, $.$get$_BigIntImpl_one()], type$.JSArray_BigInt);
      ySquaredSquared = ySquared.$mul(0, ySquared).$mod(0, p);
      t1 = $.$get$_BigIntImpl_two();
      s = t1.$mul(0, x1.$add(0, ySquared).$mul(0, x1.$add(0, ySquared)).$sub(0, xSquared).$sub(0, ySquaredSquared)).$mod(0, p);
      m = A._BigIntImpl__BigIntImpl$from(3).$mul(0, xSquared).$add(0, a).$mod(0, p);
      t = m.$mul(0, m).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, s)).$mod(0, p);
      return A._setArrayType([t, m.$mul(0, s.$sub(0, t)).$sub(0, A._BigIntImpl__BigIntImpl$from(8).$mul(0, ySquaredSquared)).$mod(0, p), t1.$mul(0, y1).$mod(0, p)], type$.JSArray_BigInt);
    },
    _double$5(x1, y1, z1, p, a) {
      var t3, xSquared, ySquared, ySquaredSquared, zSquared, s, m, t,
        t1 = $.$get$_BigIntImpl_one(),
        t2 = z1.compareTo$1(0, t1);
      if (t2 === 0)
        return this._doubleWithZ1$4(x1, y1, p, a);
      t2 = $.$get$_BigIntImpl_zero();
      t3 = y1.compareTo$1(0, t2);
      if (t3 !== 0)
        t3 = z1.compareTo$1(0, t2) === 0;
      else
        t3 = true;
      if (t3)
        return A._setArrayType([t2, t2, t1], type$.JSArray_BigInt);
      xSquared = x1.$mul(0, x1).$mod(0, p);
      ySquared = y1.$mul(0, y1).$mod(0, p);
      t3 = ySquared.compareTo$1(0, t2);
      if (t3 === 0)
        return A._setArrayType([t2, t2, t1], type$.JSArray_BigInt);
      ySquaredSquared = ySquared.$mul(0, ySquared).$mod(0, p);
      zSquared = z1.$mul(0, z1).$mod(0, p);
      s = $.$get$_BigIntImpl_two().$mul(0, x1.$add(0, ySquared).$mul(0, x1.$add(0, ySquared)).$sub(0, xSquared).$sub(0, ySquaredSquared)).$mod(0, p);
      m = A._BigIntImpl__BigIntImpl$from(3).$mul(0, xSquared).$add(0, a.$mul(0, zSquared).$mul(0, zSquared)).$mod(0, p);
      t = m.$mul(0, m).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, s)).$mod(0, p);
      return A._setArrayType([t, m.$mul(0, s.$sub(0, t)).$sub(0, A._BigIntImpl__BigIntImpl$from(8).$mul(0, ySquaredSquared)).$mod(0, p), y1.$add(0, z1).$mul(0, y1.$add(0, z1)).$sub(0, ySquared).$sub(0, zSquared).$mod(0, p)], type$.JSArray_BigInt);
    },
    doublePoint$0() {
      var t2, result, t3, coords, _this = this,
        t1 = _this._coords,
        x1 = t1[0],
        y1 = t1[1],
        z1 = t1[2];
      t1 = $.$get$_BigIntImpl_zero();
      t2 = y1.compareTo$1(0, t1);
      if (t2 === 0) {
        t1 = A._setArrayType([t1, t1, t1], type$.JSArray_BigInt);
        return new A.ProjectiveECCPoint(_this.curve, null, false, B.List_empty0, t1);
      }
      t2 = _this.curve;
      result = _this._double$5(x1, y1, z1, t2.p, t2.a);
      t3 = result[1].compareTo$1(0, t1);
      if (t3 !== 0)
        t3 = result[2].compareTo$1(0, t1) === 0;
      else
        t3 = true;
      if (t3) {
        t1 = A._setArrayType([t1, t1, t1], type$.JSArray_BigInt);
        return new A.ProjectiveECCPoint(t2, null, false, B.List_empty0, t1);
      }
      coords = A._setArrayType([result[0], result[1], result[2]], type$.JSArray_BigInt);
      return new A.ProjectiveECCPoint(t2, _this.order, false, B.List_empty0, coords);
    },
    _addPointsWithZ1$5(x1, y1, x2, y2, p) {
      var $V, x3,
        diff = x2.$sub(0, x1),
        I = diff.$mul(0, diff).$mul(0, A._BigIntImpl__BigIntImpl$from(4)).$mod(0, p),
        $J = diff.$mul(0, I),
        scaledYDifference = y2.$sub(0, y1).$mul(0, A._BigIntImpl__BigIntImpl$from(2)),
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = diff.compareTo$1(0, t1);
      if (t2 === 0)
        t1 = scaledYDifference.compareTo$1(0, t1) === 0;
      else
        t1 = false;
      if (t1)
        return this._doubleWithZ1$4(x1, y1, p, this.curve.a);
      $V = x1.$mul(0, I);
      x3 = scaledYDifference.$mul(0, scaledYDifference).$sub(0, $J).$sub(0, $V.$mul(0, A._BigIntImpl__BigIntImpl$from(2))).$mod(0, p);
      return A._setArrayType([x3, scaledYDifference.$mul(0, $V.$sub(0, x3)).$sub(0, y1.$mul(0, $J).$mul(0, A._BigIntImpl__BigIntImpl$from(2))).$mod(0, p), diff.$mul(0, A._BigIntImpl__BigIntImpl$from(2)).$mod(0, p)], type$.JSArray_BigInt);
    },
    _addPointsWithCommonZ$6(x1, y1, z1, x2, y2, p) {
      var x3,
        $A = x2.$sub(0, x1).modPow$2(0, A._BigIntImpl__BigIntImpl$from(2), p),
        $B = x1.$mul(0, $A).$mod(0, p),
        $C = x2.$mul(0, $A),
        $D = y2.$sub(0, y1).modPow$2(0, A._BigIntImpl__BigIntImpl$from(2), p),
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = $A.compareTo$1(0, t1);
      if (t2 === 0)
        t1 = $D.compareTo$1(0, t1) === 0;
      else
        t1 = false;
      if (t1)
        return this._double$5(x1, y1, z1, p, this.curve.a);
      x3 = $D.$sub(0, $B).$sub(0, $C).$mod(0, p);
      return A._setArrayType([x3, y2.$sub(0, y1).$mul(0, $B.$sub(0, x3)).$sub(0, y1.$mul(0, $C.$sub(0, $B))).$mod(0, p), z1.$mul(0, x2.$sub(0, x1)).$mod(0, p)], type$.JSArray_BigInt);
    },
    _addPointsWithZ2EqualOne$6(x1, y1, z1, x2, y2, p) {
      var v, x3,
        z1z1 = z1.$mul(0, z1).$mod(0, p),
        u2 = x2.$mul(0, z1z1).$mod(0, p),
        s2 = y2.$mul(0, z1).$mul(0, z1z1).$mod(0, p),
        h = u2.$sub(0, x1).$mod(0, p),
        hh = h.$mul(0, h).$mod(0, p),
        i = A._BigIntImpl__BigIntImpl$from(4).$mul(0, hh).$mod(0, p),
        j = h.$mul(0, i).$mod(0, p),
        r = A._BigIntImpl__BigIntImpl$from(2).$mul(0, s2.$sub(0, y1)).$mod(0, p),
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = r.compareTo$1(0, t1);
      if (t2 === 0)
        t1 = h.compareTo$1(0, t1) === 0;
      else
        t1 = false;
      if (t1)
        return this._doubleWithZ1$4(x2, y2, p, this.curve.a);
      v = x1.$mul(0, i).$mod(0, p);
      x3 = r.$mul(0, r).$sub(0, j).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, v)).$mod(0, p);
      return A._setArrayType([x3, r.$mul(0, v.$sub(0, x3)).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, y1).$mul(0, j)).$mod(0, p), z1.$add(0, h).modPow$2(0, A._BigIntImpl__BigIntImpl$from(2), p).$sub(0, z1z1).$sub(0, hh).$mod(0, p)], type$.JSArray_BigInt);
    },
    _addPointsWithZNotEqual$7(x1, y1, z1, x2, y2, z2, p) {
      var v, x3,
        z1z1 = z1.$mul(0, z1).$mod(0, p),
        z2z2 = z2.$mul(0, z2).$mod(0, p),
        u1 = x1.$mul(0, z2z2).$mod(0, p),
        u2 = x2.$mul(0, z1z1).$mod(0, p),
        s1 = y1.$mul(0, z2).$mul(0, z2z2).$mod(0, p),
        s2 = y2.$mul(0, z1).$mul(0, z1z1).$mod(0, p),
        h = u2.$sub(0, u1).$mod(0, p),
        i = A._BigIntImpl__BigIntImpl$from(4).$mul(0, h).$mul(0, h).$mod(0, p),
        j = h.$mul(0, i).$mod(0, p),
        r = A._BigIntImpl__BigIntImpl$from(2).$mul(0, s2.$sub(0, s1)).$mod(0, p),
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = h.compareTo$1(0, t1);
      if (t2 === 0)
        t1 = r.compareTo$1(0, t1) === 0;
      else
        t1 = false;
      if (t1)
        return this._double$5(x1, y1, z1, p, this.curve.a);
      v = u1.$mul(0, i).$mod(0, p);
      x3 = r.$mul(0, r).$sub(0, j).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, v)).$mod(0, p);
      return A._setArrayType([x3, r.$mul(0, v.$sub(0, x3)).$sub(0, A._BigIntImpl__BigIntImpl$from(2).$mul(0, s1).$mul(0, j)).$mod(0, p), z1.$add(0, z2).modPow$2(0, A._BigIntImpl__BigIntImpl$from(2), p).$sub(0, z1z1).$sub(0, z2z2).$mul(0, h).$mod(0, p)], type$.JSArray_BigInt);
    },
    _addPoints$7(x1, y1, z1, x2, y2, z2, p) {
      var _this = this,
        t1 = $.$get$_BigIntImpl_zero(),
        t2 = y1.compareTo$1(0, t1);
      if (t2 !== 0)
        t2 = z1.compareTo$1(0, t1) === 0;
      else
        t2 = true;
      if (t2)
        return A._setArrayType([x2, y2, z2], type$.JSArray_BigInt);
      t2 = y2.compareTo$1(0, t1);
      if (t2 !== 0)
        t1 = z2.compareTo$1(0, t1) === 0;
      else
        t1 = true;
      if (t1)
        return A._setArrayType([x1, y1, z1], type$.JSArray_BigInt);
      t1 = z1.compareTo$1(0, z2);
      if (t1 === 0) {
        t1 = z1.compareTo$1(0, $.$get$_BigIntImpl_one());
        if (t1 === 0)
          return _this._addPointsWithZ1$5(x1, y1, x2, y2, p);
        return _this._addPointsWithCommonZ$6(x1, y1, z1, x2, y2, p);
      }
      t1 = $.$get$_BigIntImpl_one();
      t2 = z1.compareTo$1(0, t1);
      if (t2 === 0)
        return _this._addPointsWithZ2EqualOne$6(x2, y2, z2, x1, y1, p);
      t1 = z2.compareTo$1(0, t1);
      if (t1 === 0)
        return _this._addPointsWithZ2EqualOne$6(x1, y1, z1, x2, y2, p);
      return _this._addPointsWithZNotEqual$7(x1, y1, z1, x2, y2, z2, p);
    },
    _multiplyWithPrecompute$1(scalar) {
      var resultY, i, t2, t3, x2, y2, flag, t4, addResult, _this = this,
        resultX = $.$get$_BigIntImpl_zero(),
        resultZ = $.$get$_BigIntImpl_one(),
        t1 = _this.curve,
        primeField = t1.p,
        precompute = A.List_List$from(_this._precompute, true, type$.List_BigInt);
      for (resultY = resultX, i = 0; i < precompute.length; ++i) {
        t2 = precompute[i];
        t3 = J.getInterceptor$asx(t2);
        x2 = t3.$index(t2, 0);
        y2 = t3.$index(t2, 1);
        if (scalar._used !== 0) {
          t2 = scalar._digits;
          if (0 >= t2.length)
            return A.ioore(t2, 0);
          t2 = (t2[0] & 1) === 0;
        } else
          t2 = true;
        if (!t2) {
          flag = scalar.$mod(0, A._BigIntImpl__BigIntImpl$from(4));
          t2 = $.$get$_BigIntImpl_two();
          if (flag.compareTo$1(0, t2) >= 0) {
            t3 = $.$get$_BigIntImpl_one();
            t4 = scalar.$add(0, t3);
            if (t2._used === 0)
              A.throwExpression(B.C_IntegerDivisionByZeroException);
            scalar = t4._div$1(t2);
            addResult = _this._addPoints$7(resultX, resultY, resultZ, x2, y2.$negate(0), t3, primeField);
            resultX = addResult[0];
            resultY = addResult[1];
            resultZ = addResult[2];
          } else {
            t3 = $.$get$_BigIntImpl_one();
            t4 = scalar.$sub(0, t3);
            if (t2._used === 0)
              A.throwExpression(B.C_IntegerDivisionByZeroException);
            scalar = t4._div$1(t2);
            addResult = _this._addPoints$7(resultX, resultY, resultZ, x2, y2, t3, primeField);
            resultX = addResult[0];
            resultY = addResult[1];
            resultZ = addResult[2];
          }
        } else {
          t2 = $.$get$_BigIntImpl_two();
          if (t2._used === 0)
            A.throwExpression(B.C_IntegerDivisionByZeroException);
          scalar = scalar._div$1(t2);
        }
      }
      t2 = $.$get$_BigIntImpl_zero();
      t3 = resultY.compareTo$1(0, t2);
      if (t3 !== 0)
        t3 = resultZ.compareTo$1(0, t2) === 0;
      else
        t3 = true;
      if (t3) {
        t2 = A._setArrayType([t2, t2, t2], type$.JSArray_BigInt);
        return new A.ProjectiveECCPoint(t1, null, false, B.List_empty0, t2);
      }
      t2 = A._setArrayType([resultX, resultY, resultZ], type$.JSArray_BigInt);
      return new A.ProjectiveECCPoint(t1, _this.order, false, B.List_empty0, t2);
    },
    $mul(_, scalar) {
      var z3, t2, x2, y2, primeField, curveA, nafList, i, y3, x30, double, add, t3, _this = this,
        t1 = _this._coords[1],
        x3 = $.$get$_BigIntImpl_zero();
      t1 = t1.compareTo$1(0, x3);
      if (t1 !== 0)
        t1 = scalar.compareTo$1(0, x3) === 0;
      else
        t1 = true;
      if (t1) {
        t1 = A._setArrayType([x3, x3, x3], type$.JSArray_BigInt);
        return new A.ProjectiveECCPoint(_this.curve, null, false, B.List_empty0, t1);
      }
      z3 = $.$get$_BigIntImpl_one();
      t1 = scalar.compareTo$1(0, z3);
      if (t1 === 0)
        return _this;
      t1 = _this.order;
      if (t1 != null)
        scalar = scalar.$mod(0, t1.$mul(0, $.$get$_BigIntImpl_two()));
      _this._precomputeIfNeeded$0();
      if (_this._precompute.length !== 0)
        return _this._multiplyWithPrecompute$1(scalar);
      _this.scale$0();
      t2 = _this._coords;
      x2 = t2[0];
      y2 = t2[1];
      t2 = _this.curve;
      primeField = t2.p;
      curveA = t2.a;
      nafList = A.BigintUtils_computeNAF(scalar);
      for (i = nafList.length - 1, y3 = x3, x30 = y3; i >= 0; --i) {
        double = _this._double$5(x30, y3, z3, primeField, curveA);
        x30 = double[0];
        y3 = double[1];
        z3 = double[2];
        if (!(i < nafList.length))
          return A.ioore(nafList, i);
        if (nafList[i].compareTo$1(0, x3) < 0) {
          add = _this._addPoints$7(x30, y3, z3, x2, y2.$negate(0), $.$get$_BigIntImpl_one(), primeField);
          x30 = add[0];
          y3 = add[1];
          z3 = add[2];
        } else {
          if (!(i < nafList.length))
            return A.ioore(nafList, i);
          if (nafList[i].compareTo$1(0, x3) > 0) {
            add = _this._addPoints$7(x30, y3, z3, x2, y2, $.$get$_BigIntImpl_one(), primeField);
            x30 = add[0];
            y3 = add[1];
            z3 = add[2];
          }
        }
      }
      t3 = y3.compareTo$1(0, x3);
      if (t3 !== 0)
        t3 = z3.compareTo$1(0, x3) === 0;
      else
        t3 = true;
      if (t3) {
        t1 = A._setArrayType([x3, x3, x3], type$.JSArray_BigInt);
        return new A.ProjectiveECCPoint(t2, null, false, B.List_empty0, t1);
      }
      t3 = A._setArrayType([x30, y3, z3], type$.JSArray_BigInt);
      return new A.ProjectiveECCPoint(t2, t1, false, B.List_empty0, t3);
    },
    get$hashCode(_) {
      return this.curve.get$hashCode(0) ^ this.get$x().get$hashCode(0) ^ this.get$y().get$hashCode(0);
    },
    get$curve() {
      return this.curve;
    }
  };
  A.EDPoint.prototype = {
    get$x() {
      var x1, z1, p,
        t1 = this._edwards$_coords,
        t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      x1 = t1[0];
      if (2 >= t2)
        return A.ioore(t1, 2);
      z1 = t1[2];
      t1 = z1.compareTo$1(0, $.$get$_BigIntImpl_one());
      if (t1 === 0)
        return x1;
      p = this.curve.p;
      return x1.$mul(0, A.BigintUtils_inverseMod(z1, p)).$mod(0, p);
    },
    get$y() {
      var y1, z1, p,
        t1 = this._edwards$_coords,
        t2 = t1.length;
      if (1 >= t2)
        return A.ioore(t1, 1);
      y1 = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      z1 = t1[2];
      t1 = z1.compareTo$1(0, $.$get$_BigIntImpl_one());
      if (t1 === 0)
        return y1;
      p = this.curve.p;
      return y1.$mul(0, A.BigintUtils_inverseMod(z1, p)).$mod(0, p);
    },
    scale$0() {
      var z1, t2, t3, x1, y1, p, zInv, x, y, t, _this = this,
        t1 = _this._edwards$_coords;
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      z1 = t1[2];
      t2 = $.$get$_BigIntImpl_one();
      t3 = z1.compareTo$1(0, t2);
      if (t3 === 0)
        return _this;
      t3 = t1.length;
      if (0 >= t3)
        return A.ioore(t1, 0);
      x1 = t1[0];
      if (1 >= t3)
        return A.ioore(t1, 1);
      y1 = t1[1];
      p = _this.curve.p;
      zInv = A.BigintUtils_inverseMod(z1, p);
      x = x1.$mul(0, zInv).$mod(0, p);
      y = y1.$mul(0, zInv).$mod(0, p);
      t = x.$mul(0, y).$mod(0, p);
      B.JSArray_methods.$indexSet(t1, 0, x);
      B.JSArray_methods.$indexSet(t1, 1, y);
      B.JSArray_methods.$indexSet(t1, 2, t2);
      B.JSArray_methods.$indexSet(t1, 3, t);
      return _this;
    },
    $eq(_, other) {
      var t1, otherCoords, t2, t3, x1, y1, z1, t10, x2, y2, z2, t4, p, xn1, xn2, yn1, yn2;
      if (other == null)
        return false;
      if (other instanceof A.EDPoint) {
        t1 = other._edwards$_coords;
        otherCoords = A.List_List$from(t1, true, type$.BigInt);
        t2 = this._edwards$_coords;
        t3 = t2.length;
        if (0 >= t3)
          return A.ioore(t2, 0);
        x1 = t2[0];
        if (1 >= t3)
          return A.ioore(t2, 1);
        y1 = t2[1];
        if (2 >= t3)
          return A.ioore(t2, 2);
        z1 = t2[2];
        if (3 >= t3)
          return A.ioore(t2, 3);
        t10 = t2[3];
        t2 = otherCoords.length;
        if (0 >= t2)
          return A.ioore(otherCoords, 0);
        x2 = otherCoords[0];
        if (1 >= t2)
          return A.ioore(otherCoords, 1);
        y2 = otherCoords[1];
        if (2 >= t2)
          return A.ioore(otherCoords, 2);
        z2 = otherCoords[2];
        t2 = t1.length;
        t3 = true;
        if (t2 !== 0) {
          if (0 >= t2)
            return A.ioore(t1, 0);
          t2 = t1[0];
          t4 = $.$get$_BigIntImpl_zero();
          t2 = t2.compareTo$1(0, t4);
          if (t2 !== 0) {
            if (3 >= t1.length)
              return A.ioore(t1, 3);
            t1 = t1[3].compareTo$1(0, t4) === 0;
          } else
            t1 = t3;
        } else
          t1 = t3;
        if (t1) {
          t1 = $.$get$_BigIntImpl_zero();
          t2 = x1.compareTo$1(0, t1);
          if (t2 !== 0)
            t1 = t10.compareTo$1(0, t1) === 0;
          else
            t1 = true;
          return t1;
        }
        t1 = this.curve;
        if (!t1.$eq(0, other.curve))
          return false;
        p = t1.p;
        xn1 = x1.$mul(0, z2).$mod(0, p);
        xn2 = x2.$mul(0, z1).$mod(0, p);
        yn1 = y1.$mul(0, z2).$mod(0, p);
        yn2 = y2.$mul(0, z1).$mod(0, p);
        t1 = xn1.compareTo$1(0, xn2);
        if (t1 === 0)
          t1 = yn1.compareTo$1(0, yn2) === 0;
        else
          t1 = false;
        return t1;
      }
      return false;
    },
    get$hashCode(_) {
      return this.get$x().get$hashCode(0) ^ this.get$y().get$hashCode(0) ^ J.get$hashCode$(this.order);
    },
    get$curve() {
      return this.curve;
    }
  };
  A.RistrettoPoint.prototype = {};
  A.ChaCha20Poly1305.prototype = {
    decrypt$2(nonce, sealed) {
      var t2, t3, counter, authKey, calculatedTag, result,
        t1 = type$.List_int;
      t1._as(nonce);
      t1._as(sealed);
      t1 = nonce.length;
      if (t1 > 16)
        throw A.wrapException(B.CryptoException_a53);
      t2 = J.getInterceptor$asx(sealed);
      if (t2.get$length(sealed) < 16)
        return null;
      t3 = type$.int;
      counter = A.List_List$filled(16, 0, false, t3);
      B.JSArray_methods.setRange$3(counter, 16 - t1, 16, nonce);
      authKey = A.List_List$filled(32, 0, false, t3);
      t1 = this.__ChaCha20Poly1305__key_A;
      t1 === $ && A.throwLateFieldNI("_key");
      A.zero(authKey);
      A.ChaCha20_streamXOR(t1, counter, authKey, authKey, 4);
      calculatedTag = A.List_List$filled(16, 0, false, t3);
      this._authenticate$4(calculatedTag, authKey, t2.sublist$2(sealed, 0, t2.get$length(sealed) - 16), null);
      if (!A.BytesUtils_bytesEqual(calculatedTag, t2.sublist$1(sealed, t2.get$length(sealed) - 16)))
        return null;
      result = A.List_List$filled(t2.get$length(sealed) - 16, 0, false, t3);
      A.ChaCha20_streamXOR(this.__ChaCha20Poly1305__key_A, counter, t2.sublist$2(sealed, 0, t2.get$length(sealed) - 16), result, 4);
      A.zero(counter);
      return result;
    },
    _authenticate$4(tagOut, authKey, ciphertext, associatedData) {
      var t2, t3, t4, t5, h, t00, t10, t30, t50, t6, t7, $length, mac, i,
        t1 = type$.List_int;
      t1._as(tagOut);
      t1._as(authKey);
      t1._as(ciphertext);
      t1 = type$.int;
      t2 = A.List_List$filled(16, 0, false, t1);
      t3 = A.List_List$filled(10, 0, false, t1);
      t4 = A.List_List$filled(10, 0, false, t1);
      t5 = A.List_List$filled(8, 0, false, t1);
      h = new A.Poly1305(t2, t3, t4, t5);
      t00 = authKey[0] | authKey[1] << 8;
      B.JSArray_methods.$indexSet(t3, 0, t00 & 8191);
      t10 = authKey[2] | authKey[3] << 8;
      B.JSArray_methods.$indexSet(t3, 1, (t00 >>> 13 | t10 << 3) & 8191);
      t2 = authKey[4] | authKey[5] << 8;
      B.JSArray_methods.$indexSet(t3, 2, (t10 >>> 10 | t2 << 6) & 7939);
      t30 = authKey[6] | authKey[7] << 8;
      B.JSArray_methods.$indexSet(t3, 3, (t2 >>> 7 | t30 << 9) & 8191);
      t4 = authKey[8] | authKey[9] << 8;
      B.JSArray_methods.$indexSet(t3, 4, (t30 >>> 4 | t4 << 12) & 255);
      B.JSArray_methods.$indexSet(t3, 5, t4 >>> 1 & 8190);
      t50 = authKey[10] | authKey[11] << 8;
      B.JSArray_methods.$indexSet(t3, 6, (t4 >>> 14 | t50 << 2) & 8191);
      t6 = authKey[12] | authKey[13] << 8;
      B.JSArray_methods.$indexSet(t3, 7, (t50 >>> 11 | t6 << 5) & 8065);
      t7 = authKey[14] | authKey[15] << 8;
      B.JSArray_methods.$indexSet(t3, 8, (t6 >>> 8 | t7 << 8) & 8191);
      B.JSArray_methods.$indexSet(t3, 9, t7 >>> 5 & 127);
      B.JSArray_methods.$indexSet(t5, 0, (authKey[16] | authKey[17] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 1, (authKey[18] | authKey[19] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 2, (authKey[20] | authKey[21] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 3, (authKey[22] | authKey[23] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 4, (authKey[24] | authKey[25] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 5, (authKey[26] | authKey[27] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 6, (authKey[28] | authKey[29] << 8) >>> 0);
      B.JSArray_methods.$indexSet(t5, 7, (authKey[30] | authKey[31] << 8) >>> 0);
      h.update$1(ciphertext);
      t2 = B.JSInt_methods.$mod(ciphertext.length, 16);
      if (t2 > 0)
        h.update$1(A.List_List$filled(16 - t2, 0, false, t1));
      $length = A.List_List$filled(8, 0, false, t1);
      h.update$1($length);
      A.writeUint64LE(ciphertext.length, $length);
      h.update$1($length);
      if (h._finished)
        A.throwExpression(B.CryptoException_aEB);
      mac = A.List_List$filled(16, 0, false, t1);
      h.finish$1(mac);
      for (i = 0; i < 16; ++i)
        B.JSArray_methods.$indexSet(tagOut, i, mac[i]);
      A.zero(h._buffer);
      A.zero(t3);
      A.zero(h._h);
      A.zero(t5);
      h._fin = h._leftover = 0;
      h._finished = true;
      A.zero(mac);
      A.zero($length);
    }
  };
  A.CTR.prototype = {
    setCipher$2(cipher, iv) {
      var t1, _this = this;
      type$.nullable_List_int._as(iv);
      _this._cipher = null;
      t1 = _this.__CTR__counter_F;
      t1 === $ && A.throwLateFieldNI("_counter");
      if (16 !== t1.length)
        throw A.wrapException(B.CryptoException_ULN);
      _this._cipher = cipher;
      B.JSArray_methods.setAll$2(t1, 0, iv);
      t1 = _this.__CTR__buffer_F;
      t1 === $ && A.throwLateFieldNI("_buffer");
      _this._bufpos = t1.length;
      return _this;
    },
    streamXOR$2(src, dst) {
      var t2, i, t3, t4, t5, t6, t7, _this = this,
        t1 = type$.List_int;
      t1._as(src);
      t1._as(dst);
      for (t2 = type$.nullable_List_int, i = 0; i < 16; ++i) {
        t3 = _this._bufpos;
        t4 = _this.__CTR__buffer_F;
        t4 === $ && A.throwLateFieldNI("_buffer");
        t5 = t4.length;
        if (t3 === t5) {
          t3 = _this._cipher;
          t3.toString;
          t6 = _this.__CTR__counter_F;
          t6 === $ && A.throwLateFieldNI("_counter");
          t1._as(t6);
          t2._as(t4);
          if (t6.length !== 16)
            A.throwExpression(B.CryptoException_yTp);
          if (t5 !== 16)
            A.throwExpression(B.CryptoException_UXg);
          t3 = t3._encKey;
          if (t3 == null)
            A.throwExpression(B.CryptoException_f8H);
          t7 = $.$get$AES__lib();
          A.BytesUtils_validateListOfBytes(t6);
          t7.encryptBlock$3(t3, t6, t4);
          _this._bufpos = 0;
          A._incrementCounter(t6);
        }
        t3 = src[i];
        t6 = _this._bufpos++;
        if (!(t6 < t5))
          return A.ioore(t4, t6);
        B.JSArray_methods.$indexSet(dst, i, t3 & 255 ^ t4[t6]);
      }
    }
  };
  A.CryptoException.prototype = {
    toString$0(_) {
      return this.message;
    }
  };
  A.SquareRootError.prototype = {};
  A.JacobiError.prototype = {};
  A.Blake2bConfig.prototype = {};
  A.BLAKE2b.prototype = {
    update$1(data) {
      var left, dataLength, t1, i, t2, dataPos, t3, _this = this;
      type$.List_int._as(data);
      if (_this._hash$_finished)
        throw A.wrapException(B.CryptoException_1Xx);
      left = 128 - _this._bufferLength;
      dataLength = data.length;
      if (dataLength === 0)
        return _this;
      if (dataLength > left) {
        for (t1 = _this._hash$_buffer, i = 0; i < left; ++i) {
          t2 = _this._bufferLength;
          if (!(i < data.length))
            return A.ioore(data, i);
          B.JSArray_methods.$indexSet(t1, t2 + i, data[i] & 255);
        }
        _this._processBlock$1(128);
        dataLength -= left;
        _this._bufferLength = 0;
        dataPos = left;
      } else
        dataPos = 0;
      for (t1 = _this._hash$_buffer; dataLength > 128;) {
        for (i = 0; i < 128; ++i) {
          t2 = dataPos + i;
          if (!(t2 >= 0 && t2 < data.length))
            return A.ioore(data, t2);
          B.JSArray_methods.$indexSet(t1, i, data[t2] & 255);
        }
        _this._processBlock$1(128);
        dataPos += 128;
        dataLength -= 128;
        _this._bufferLength = 0;
      }
      for (i = 0; i < dataLength; ++i) {
        t2 = _this._bufferLength;
        t3 = dataPos + i;
        if (!(t3 >= 0 && t3 < data.length))
          return A.ioore(data, t3);
        B.JSArray_methods.$indexSet(t1, t2 + i, data[t3] & 255);
      }
      _this._bufferLength += dataLength;
      return _this;
    },
    finish$1(out) {
      var i, t1, tmp, t2, _this = this, _4294967295 = 4294967295;
      type$.List_int._as(out);
      if (!_this._hash$_finished) {
        for (i = _this._bufferLength, t1 = _this._hash$_buffer; i < 128; ++i)
          B.JSArray_methods.$indexSet(t1, i, 0);
        t1 = _this._flag;
        B.JSArray_methods.$indexSet(t1, 0, _4294967295);
        B.JSArray_methods.$indexSet(t1, 1, _4294967295);
        _this._processBlock$1(_this._bufferLength);
        _this._hash$_finished = true;
      }
      tmp = A.List_List$filled(64, 0, false, type$.int);
      for (t1 = _this._hash$_state, t2 = t1.length, i = 0; i < 16; ++i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        A.writeUint32LE(t1[i], tmp, i * 4);
      }
      B.JSArray_methods.setRange$3(out, 0, out.length, tmp);
      return _this;
    },
    digest$0() {
      var out,
        t1 = this.__BLAKE2b_getDigestLength_F;
      t1 === $ && A.throwLateFieldNI("getDigestLength");
      out = A.List_List$filled(t1, 0, false, type$.int);
      this.finish$1(out);
      return out;
    },
    _g$13(v, al, bl, cl, dl, ah, bh, ch, dh, ml0, mh0, ml1, mh1) {
      var vla, vha, vlb, vhb, vlc, vhc, vld, vhd, t1, t2, w, x, y, w0, vld0, w1;
      type$.List_int._as(v);
      if (!(al < 32))
        return A.ioore(v, al);
      vla = v[al];
      if (!(ah < 32))
        return A.ioore(v, ah);
      vha = v[ah];
      if (!(bl < 32))
        return A.ioore(v, bl);
      vlb = v[bl];
      if (!(bh < 32))
        return A.ioore(v, bh);
      vhb = v[bh];
      if (!(cl < 32))
        return A.ioore(v, cl);
      vlc = v[cl];
      if (!(ch < 32))
        return A.ioore(v, ch);
      vhc = v[ch];
      if (!(dl < 32))
        return A.ioore(v, dl);
      vld = v[dl];
      if (!(dh < 32))
        return A.ioore(v, dh);
      vhd = v[dh];
      t1 = B.JSInt_methods._shrOtherPositive$1(vla, 16);
      t2 = B.JSInt_methods._shrOtherPositive$1(vha, 16);
      w = (vla & 65535) + (vlb & 65535);
      x = (t1 & 65535) + (B.JSInt_methods._shrOtherPositive$1(vlb, 16) & 65535) + (w >>> 16 & 65535);
      y = (vha & 65535) + (vhb & 65535) + (x >>> 16 & 65535);
      vha = y & 65535 | (t2 & 65535) + (B.JSInt_methods._shrOtherPositive$1(vhb, 16) & 65535) + (y >>> 16 & 65535) << 16;
      vla = w & 65535 | x << 16;
      w = (vla & 65535) + (ml0 & 65535);
      x = (vla >>> 16 & 65535) + (ml0 >>> 16 & 65535) + (w >>> 16 & 65535);
      y = (vha & 65535) + (mh0 & 65535) + (x >>> 16 & 65535);
      vha = y & 65535 | (vha >>> 16 & 65535) + (mh0 >>> 16 & 65535) + (y >>> 16 & 65535) << 16;
      vla = w & 65535 | x << 16;
      vld ^= vla;
      vhd ^= vha;
      w = (vlc & 65535) + (vhd & 65535);
      x = (B.JSInt_methods._shrOtherPositive$1(vlc, 16) & 65535) + (vhd >>> 16 & 65535) + (w >>> 16 & 65535);
      y = (vhc & 65535) + (vld & 65535) + (x >>> 16 & 65535);
      vhc = y & 65535 | (B.JSInt_methods._shrOtherPositive$1(vhc, 16) & 65535) + (vld >>> 16 & 65535) + (y >>> 16 & 65535) << 16;
      vlc = w & 65535 | x << 16;
      vlb ^= vlc;
      vhb ^= vhc;
      w = vlb << 8 | vhb >>> 24;
      vlb = vhb << 8 | vlb >>> 24;
      w0 = (vla & 65535) + (vlb & 65535);
      x = (vla >>> 16 & 65535) + (vlb >>> 16 & 65535) + (w0 >>> 16 & 65535);
      y = (vha & 65535) + (w & 65535) + (x >>> 16 & 65535);
      vha = y & 65535 | (vha >>> 16 & 65535) + (w >>> 16 & 65535) + (y >>> 16 & 65535) << 16;
      vla = w0 & 65535 | x << 16;
      w0 = (vla & 65535) + (ml1 & 65535);
      x = (vla >>> 16 & 65535) + (ml1 >>> 16 & 65535) + (w0 >>> 16 & 65535);
      y = (vha & 65535) + (mh1 & 65535) + (x >>> 16 & 65535);
      vha = (y & 65535 | (vha >>> 16 & 65535) + (mh1 >>> 16 & 65535) + (y >>> 16 & 65535) << 16) >>> 0;
      vla = (w0 & 65535 | x << 16) >>> 0;
      vld0 = vhd ^ vla;
      vhd = vld ^ vha;
      w0 = (vld0 << 16 | vhd >>> 16) >>> 0;
      vld = (vhd << 16 | vld0 >>> 16) >>> 0;
      w1 = (vlc & 65535) + (vld & 65535);
      x = (vlc >>> 16 & 65535) + (vld >>> 16 & 65535) + (w1 >>> 16 & 65535);
      y = (vhc & 65535) + (w0 & 65535) + (x >>> 16 & 65535);
      vhc = (y & 65535 | (vhc >>> 16 & 65535) + (w0 >>> 16 & 65535) + (y >>> 16 & 65535) << 16) >>> 0;
      vlc = (w1 & 65535 | x << 16) >>> 0;
      vlb ^= vlc;
      vhb = w ^ vhc;
      B.JSArray_methods.$indexSet(v, al, vla);
      B.JSArray_methods.$indexSet(v, ah, vha);
      B.JSArray_methods.$indexSet(v, bl, (vlb << 1 | vhb >>> 31) >>> 0);
      B.JSArray_methods.$indexSet(v, bh, (vhb << 1 | vlb >>> 31) >>> 0);
      B.JSArray_methods.$indexSet(v, cl, vlc);
      B.JSArray_methods.$indexSet(v, ch, vhc);
      B.JSArray_methods.$indexSet(v, dl, vld);
      B.JSArray_methods.$indexSet(v, dh, w0);
    },
    _processBlock$1($length) {
      var v, t1, t2, m, i, r, t3, t4, t5, _this = this;
      _this._incrementCounter$1($length);
      v = _this._vtmp;
      t1 = _this._hash$_state;
      B.JSArray_methods.setAll$2(v, 0, t1);
      B.JSArray_methods.setAll$2(v, 16, $.$get$_iv());
      t2 = _this._ctr;
      B.JSArray_methods.$indexSet(v, 24, (v[24] ^ t2[0]) >>> 0);
      B.JSArray_methods.$indexSet(v, 25, (v[25] ^ t2[1]) >>> 0);
      B.JSArray_methods.$indexSet(v, 26, (v[26] ^ t2[2]) >>> 0);
      B.JSArray_methods.$indexSet(v, 27, (v[27] ^ t2[3]) >>> 0);
      t2 = _this._flag;
      B.JSArray_methods.$indexSet(v, 28, (v[28] ^ t2[0]) >>> 0);
      B.JSArray_methods.$indexSet(v, 29, (v[29] ^ t2[1]) >>> 0);
      B.JSArray_methods.$indexSet(v, 30, (v[30] ^ t2[2]) >>> 0);
      B.JSArray_methods.$indexSet(v, 31, (v[31] ^ t2[3]) >>> 0);
      m = _this._mtmp;
      for (t2 = _this._hash$_buffer, i = 0; i < 32; ++i)
        B.JSArray_methods.$indexSet(m, i, A.readUint32LE(t2, i * 4));
      for (r = 0; r < 12; ++r) {
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 0);
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        t2 = m[t2];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 0) + 1;
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 1);
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 1) + 1;
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        _this._g$13(v, 0, 8, 16, 24, 1, 9, 17, 25, t2, t3, t4, m[t5]);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 2);
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        t5 = m[t5];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 2) + 1;
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 3);
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 3) + 1;
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        _this._g$13(v, 2, 10, 18, 26, 3, 11, 19, 27, t5, t4, t3, m[t2]);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 4);
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        t2 = m[t2];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 4) + 1;
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 5);
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 5) + 1;
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        _this._g$13(v, 4, 12, 20, 28, 5, 13, 21, 29, t2, t3, t4, m[t5]);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 6);
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        t5 = m[t5];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 6) + 1;
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 7);
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 7) + 1;
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        _this._g$13(v, 6, 14, 22, 30, 7, 15, 23, 31, t5, t4, t3, m[t2]);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 8);
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        t2 = m[t2];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 8) + 1;
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 9);
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 9) + 1;
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        _this._g$13(v, 0, 10, 20, 30, 1, 11, 21, 31, t2, t3, t4, m[t5]);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 10);
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        t5 = m[t5];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 10) + 1;
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 11);
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 11) + 1;
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        _this._g$13(v, 2, 12, 22, 24, 3, 13, 23, 25, t5, t4, t3, m[t2]);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 12);
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        t2 = m[t2];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 12) + 1;
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 13);
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 13) + 1;
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        _this._g$13(v, 4, 14, 16, 26, 5, 15, 17, 27, t2, t3, t4, m[t5]);
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t5 = J.$index$asx($._sigma[r], 14);
        if (!(t5 >= 0 && t5 < 32))
          return A.ioore(m, t5);
        t5 = m[t5];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t4 = J.$index$asx($._sigma[r], 14) + 1;
        if (!(t4 >= 0 && t4 < 32))
          return A.ioore(m, t4);
        t4 = m[t4];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t3 = J.$index$asx($._sigma[r], 15);
        if (!(t3 >= 0 && t3 < 32))
          return A.ioore(m, t3);
        t3 = m[t3];
        if (!(r < $._sigma.length))
          return A.ioore($._sigma, r);
        t2 = J.$index$asx($._sigma[r], 15) + 1;
        if (!(t2 >= 0 && t2 < 32))
          return A.ioore(m, t2);
        _this._g$13(v, 6, 8, 18, 28, 7, 9, 19, 29, t5, t4, t3, m[t2]);
      }
      for (t2 = t1.length, i = 0; i < 16; ++i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        B.JSArray_methods.$indexSet(t1, i, (t1[i] ^ v[i] ^ v[i + 16]) >>> 0);
      }
    },
    _incrementCounter$1($length) {
      var t1, i, a;
      for (t1 = this._ctr, i = 0; i < 3; ++i, $length = 1) {
        a = t1[i] + $length;
        B.JSArray_methods.$indexSet(t1, i, a >>> 0);
        if (t1[i] === a)
          return;
      }
    }
  };
  A._Keccack.prototype = {
    _Keccack$1(capacity) {
      if (capacity <= 0 || capacity > 128)
        throw A.wrapException(B.CryptoException_efd);
      this.___Keccack_blockSize_F !== $ && A.throwLateFieldAI("blockSize");
      this.___Keccack_blockSize_F = 200 - capacity;
    },
    reset$0() {
      var _this = this;
      A.zero(_this._sh);
      A.zero(_this._sl);
      A.zero(_this._hash$_state);
      _this._pos = 0;
      _this._hash$_finished = false;
      return _this;
    },
    update$1(data) {
      var t1, t2, t3, i, t4, t5, _this = this;
      type$.List_int._as(data);
      if (_this._hash$_finished)
        throw A.wrapException(B.CryptoException_nAM);
      for (t1 = _this._hash$_state, t2 = _this._sh, t3 = _this._sl, i = 0; i < data.length; ++i) {
        t4 = _this._pos++;
        if (!(t4 < 200))
          return A.ioore(t1, t4);
        B.JSArray_methods.$indexSet(t1, t4, t1[t4] ^ data[i] & 255);
        t4 = _this._pos;
        t5 = _this.___Keccack_blockSize_F;
        t5 === $ && A.throwLateFieldNI("blockSize");
        if (t4 >= t5) {
          A._keccakf(t2, t3, t1);
          _this._pos = 0;
        }
      }
      return _this;
    },
    _padAndPermute$1(paddingByte) {
      var _this = this,
        t1 = _this._hash$_state,
        t2 = _this._pos;
      if (!(t2 < 200))
        return A.ioore(t1, t2);
      B.JSArray_methods.$indexSet(t1, t2, t1[t2] ^ paddingByte);
      t2 = _this.___Keccack_blockSize_F;
      t2 === $ && A.throwLateFieldNI("blockSize");
      --t2;
      if (!(t2 >= 0 && t2 < 200))
        return A.ioore(t1, t2);
      B.JSArray_methods.$indexSet(t1, t2, t1[t2] ^ 128);
      A._keccakf(_this._sh, _this._sl, t1);
      _this._hash$_finished = true;
      _this._pos = 0;
    },
    _squeeze$1(dst) {
      var t1, t2, t3, t4, i, t5, t6, _this = this;
      type$.List_int._as(dst);
      if (!_this._hash$_finished)
        throw A.wrapException(B.CryptoException_k5E);
      for (t1 = dst.length, t2 = _this._hash$_state, t3 = _this._sh, t4 = _this._sl, i = 0; i < t1; ++i) {
        t5 = _this._pos;
        t6 = _this.___Keccack_blockSize_F;
        t6 === $ && A.throwLateFieldNI("blockSize");
        if (t5 === t6) {
          A._keccakf(t3, t4, t2);
          t5 = _this._pos = 0;
        }
        _this._pos = t5 + 1;
        if (!(t5 < 200))
          return A.ioore(t2, t5);
        B.JSArray_methods.$indexSet(dst, i, t2[t5]);
      }
    }
  };
  A.Keccack.prototype = {
    reset$0() {
      this.super$_Keccack$reset();
      return this;
    }
  };
  A.SHAKE.prototype = {
    reset$0() {
      this.super$_Keccack$reset();
      return this;
    },
    update$1(data) {
      this.super$_Keccack$update(type$.List_int._as(data));
      return this;
    }
  };
  A.SHAKE256.prototype = {};
  A.MD5.prototype = {
    finish$1(out) {
      var t1, i, _this = this;
      type$.List_int._as(out);
      if (!_this._hash$_finished) {
        _this._finalize$0();
        _this._iterate$0();
        _this._hash$_finished = true;
      }
      for (t1 = _this._hash$_state, i = 0; i < 4; ++i)
        A.writeUint32LE(t1[i], out, i * 4);
      return _this;
    },
    _finalize$0() {
      var contentsLength, t2, i, lengthInBits, offset, highBits,
        t1 = this._hash$_buffer;
      B.JSArray_methods.add$1(t1, 128);
      contentsLength = this._lengthInBytes + 1 + 8;
      for (t2 = ((contentsLength + 64 - 1 & -64) >>> 0) - contentsLength, i = 0; i < t2; ++i)
        B.JSArray_methods.add$1(t1, 0);
      lengthInBits = this._lengthInBytes * 8;
      offset = t1.length;
      B.JSArray_methods.addAll$1(t1, A.List_List$filled(8, 0, false, type$.int));
      highBits = B.JSInt_methods._tdivFast$1(lengthInBits, 4294967296);
      A.writeUint32LE(lengthInBits >>> 0, t1, offset);
      A.writeUint32LE(highBits, t1, offset + 4);
    },
    reset$0() {
      var _this = this,
        t1 = _this._hash$_state;
      B.JSArray_methods.$indexSet(t1, 0, 1732584193);
      B.JSArray_methods.$indexSet(t1, 1, 4023233417);
      B.JSArray_methods.$indexSet(t1, 2, 2562383102);
      B.JSArray_methods.$indexSet(t1, 3, 271733878);
      _this._hash$_finished = false;
      _this._lengthInBytes = 0;
      return _this;
    },
    _iterate$0() {
      var t2, t3, t4, i, t5, j, b, c, d, t6, t7, t8, a,
        t1 = this._hash$_buffer,
        pendingDataChunks = t1.length / 64 | 0;
      for (t2 = this._currentChunk, t3 = type$.List_int, t4 = this._hash$_state, i = 0; i < pendingDataChunks; ++i) {
        for (t5 = i * 64, j = 0; j < 16; ++j)
          B.JSArray_methods.$indexSet(t2, j, A.readUint32LE(t1, t5 + j * 4));
        t3._as(t2);
        t5 = t4[0];
        b = (t4[1] | 0) >>> 0;
        c = (t4[2] | 0) >>> 0;
        d = (t4[3] | 0) >>> 0;
        t6 = $.$get$MD5__t();
        if (0 >= t6.length)
          return A.ioore(t6, 0);
        t7 = t6[0];
        t8 = t2[0];
        t7 = ((((t5 | 0) >>> 0) + A.MD5__ff(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 7 | t7 >>> 25) >>> 0) + b >>> 0;
        if (1 >= t6.length)
          return A.ioore(t6, 1);
        t7 = t6[1];
        t8 = t2[1];
        t7 = ((d + A.MD5__ff(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 12 | t7 >>> 20) >>> 0) + a >>> 0;
        if (2 >= t6.length)
          return A.ioore(t6, 2);
        t7 = t6[2];
        t8 = t2[2];
        t7 = ((c + A.MD5__ff(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 17 | t7 >>> 15) >>> 0) + d >>> 0;
        if (3 >= t6.length)
          return A.ioore(t6, 3);
        t7 = t6[3];
        t8 = t2[3];
        t7 = ((b + A.MD5__ff(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 22 | t7 >>> 10) >>> 0) + c >>> 0;
        if (4 >= t6.length)
          return A.ioore(t6, 4);
        t7 = t6[4];
        t8 = t2[4];
        t7 = ((a + A.MD5__ff(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 7 | t7 >>> 25) >>> 0) + b >>> 0;
        if (5 >= t6.length)
          return A.ioore(t6, 5);
        t7 = t6[5];
        t8 = t2[5];
        t7 = ((d + A.MD5__ff(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 12 | t7 >>> 20) >>> 0) + a >>> 0;
        if (6 >= t6.length)
          return A.ioore(t6, 6);
        t7 = t6[6];
        t8 = t2[6];
        t7 = ((c + A.MD5__ff(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 17 | t7 >>> 15) >>> 0) + d >>> 0;
        if (7 >= t6.length)
          return A.ioore(t6, 7);
        t7 = t6[7];
        t8 = t2[7];
        t7 = ((b + A.MD5__ff(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 22 | t7 >>> 10) >>> 0) + c >>> 0;
        if (8 >= t6.length)
          return A.ioore(t6, 8);
        t7 = t6[8];
        t8 = t2[8];
        t7 = ((a + A.MD5__ff(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 7 | t7 >>> 25) >>> 0) + b >>> 0;
        if (9 >= t6.length)
          return A.ioore(t6, 9);
        t7 = t6[9];
        t8 = t2[9];
        t7 = ((d + A.MD5__ff(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 12 | t7 >>> 20) >>> 0) + a >>> 0;
        if (10 >= t6.length)
          return A.ioore(t6, 10);
        t7 = t6[10];
        t8 = t2[10];
        t7 = ((c + A.MD5__ff(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 17 | t7 >>> 15) >>> 0) + d >>> 0;
        if (11 >= t6.length)
          return A.ioore(t6, 11);
        t7 = t6[11];
        t8 = t2[11];
        t7 = ((b + A.MD5__ff(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 22 | t7 >>> 10) >>> 0) + c >>> 0;
        if (12 >= t6.length)
          return A.ioore(t6, 12);
        t7 = t6[12];
        t8 = t2[12];
        t7 = ((a + A.MD5__ff(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 7 | t7 >>> 25) >>> 0) + b >>> 0;
        if (13 >= t6.length)
          return A.ioore(t6, 13);
        t7 = t6[13];
        t8 = t2[13];
        t7 = ((d + A.MD5__ff(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 12 | t7 >>> 20) >>> 0) + a >>> 0;
        if (14 >= t6.length)
          return A.ioore(t6, 14);
        t7 = t6[14];
        t8 = t2[14];
        t7 = ((c + A.MD5__ff(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 17 | t7 >>> 15) >>> 0) + d >>> 0;
        if (15 >= t6.length)
          return A.ioore(t6, 15);
        t7 = t6[15];
        t8 = t2[15];
        t7 = ((b + A.MD5__ff(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 22 | t7 >>> 10) >>> 0) + c >>> 0;
        if (16 >= t6.length)
          return A.ioore(t6, 16);
        t7 = t6[16];
        t8 = t2[1];
        t7 = ((a + A.MD5__gg(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 5 | t7 >>> 27) >>> 0) + b >>> 0;
        if (17 >= t6.length)
          return A.ioore(t6, 17);
        t7 = t6[17];
        t8 = t2[6];
        t7 = ((d + A.MD5__gg(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 9 | t7 >>> 23) >>> 0) + a >>> 0;
        if (18 >= t6.length)
          return A.ioore(t6, 18);
        t7 = t6[18];
        t8 = t2[11];
        t7 = ((c + A.MD5__gg(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 14 | t7 >>> 18) >>> 0) + d >>> 0;
        if (19 >= t6.length)
          return A.ioore(t6, 19);
        t7 = t6[19];
        t8 = t2[0];
        t7 = ((b + A.MD5__gg(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 20 | t7 >>> 12) >>> 0) + c >>> 0;
        if (20 >= t6.length)
          return A.ioore(t6, 20);
        t7 = t6[20];
        t8 = t2[5];
        t7 = ((a + A.MD5__gg(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 5 | t7 >>> 27) >>> 0) + b >>> 0;
        if (21 >= t6.length)
          return A.ioore(t6, 21);
        t7 = t6[21];
        t8 = t2[10];
        t7 = ((d + A.MD5__gg(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 9 | t7 >>> 23) >>> 0) + a >>> 0;
        if (22 >= t6.length)
          return A.ioore(t6, 22);
        t7 = t6[22];
        t8 = t2[15];
        t7 = ((c + A.MD5__gg(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 14 | t7 >>> 18) >>> 0) + d >>> 0;
        if (23 >= t6.length)
          return A.ioore(t6, 23);
        t7 = t6[23];
        t8 = t2[4];
        t7 = ((b + A.MD5__gg(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 20 | t7 >>> 12) >>> 0) + c >>> 0;
        if (24 >= t6.length)
          return A.ioore(t6, 24);
        t7 = t6[24];
        t8 = t2[9];
        t7 = ((a + A.MD5__gg(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 5 | t7 >>> 27) >>> 0) + b >>> 0;
        if (25 >= t6.length)
          return A.ioore(t6, 25);
        t7 = t6[25];
        t8 = t2[14];
        t7 = ((d + A.MD5__gg(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 9 | t7 >>> 23) >>> 0) + a >>> 0;
        if (26 >= t6.length)
          return A.ioore(t6, 26);
        t7 = t6[26];
        t8 = t2[3];
        t7 = ((c + A.MD5__gg(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 14 | t7 >>> 18) >>> 0) + d >>> 0;
        if (27 >= t6.length)
          return A.ioore(t6, 27);
        t7 = t6[27];
        t8 = t2[8];
        t7 = ((b + A.MD5__gg(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 20 | t7 >>> 12) >>> 0) + c >>> 0;
        if (28 >= t6.length)
          return A.ioore(t6, 28);
        t7 = t6[28];
        t8 = t2[13];
        t7 = ((a + A.MD5__gg(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 5 | t7 >>> 27) >>> 0) + b >>> 0;
        if (29 >= t6.length)
          return A.ioore(t6, 29);
        t7 = t6[29];
        t8 = t2[2];
        t7 = ((d + A.MD5__gg(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 9 | t7 >>> 23) >>> 0) + a >>> 0;
        if (30 >= t6.length)
          return A.ioore(t6, 30);
        t7 = t6[30];
        t8 = t2[7];
        t7 = ((c + A.MD5__gg(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 14 | t7 >>> 18) >>> 0) + d >>> 0;
        if (31 >= t6.length)
          return A.ioore(t6, 31);
        t7 = t6[31];
        t8 = t2[12];
        t7 = ((b + A.MD5__gg(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 20 | t7 >>> 12) >>> 0) + c >>> 0;
        if (32 >= t6.length)
          return A.ioore(t6, 32);
        t7 = t6[32];
        t8 = t2[5];
        t7 = ((a + A.MD5__hh(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 4 | t7 >>> 28) >>> 0) + b >>> 0;
        if (33 >= t6.length)
          return A.ioore(t6, 33);
        t7 = t6[33];
        t8 = t2[8];
        t7 = ((d + A.MD5__hh(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 11 | t7 >>> 21) >>> 0) + a >>> 0;
        if (34 >= t6.length)
          return A.ioore(t6, 34);
        t7 = t6[34];
        t8 = t2[11];
        t7 = ((c + A.MD5__hh(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 16 | t7 >>> 16) >>> 0) + d >>> 0;
        if (35 >= t6.length)
          return A.ioore(t6, 35);
        t7 = t6[35];
        t8 = t2[14];
        t7 = ((b + A.MD5__hh(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 23 | t7 >>> 9) >>> 0) + c >>> 0;
        if (36 >= t6.length)
          return A.ioore(t6, 36);
        t7 = t6[36];
        t8 = t2[1];
        t7 = ((a + A.MD5__hh(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 4 | t7 >>> 28) >>> 0) + b >>> 0;
        if (37 >= t6.length)
          return A.ioore(t6, 37);
        t7 = t6[37];
        t8 = t2[4];
        t7 = ((d + A.MD5__hh(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 11 | t7 >>> 21) >>> 0) + a >>> 0;
        if (38 >= t6.length)
          return A.ioore(t6, 38);
        t7 = t6[38];
        t8 = t2[7];
        t7 = ((c + A.MD5__hh(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 16 | t7 >>> 16) >>> 0) + d >>> 0;
        if (39 >= t6.length)
          return A.ioore(t6, 39);
        t7 = t6[39];
        t8 = t2[10];
        t7 = ((b + A.MD5__hh(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 23 | t7 >>> 9) >>> 0) + c >>> 0;
        if (40 >= t6.length)
          return A.ioore(t6, 40);
        t7 = t6[40];
        t8 = t2[13];
        t7 = ((a + A.MD5__hh(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 4 | t7 >>> 28) >>> 0) + b >>> 0;
        if (41 >= t6.length)
          return A.ioore(t6, 41);
        t7 = t6[41];
        t8 = t2[0];
        t7 = ((d + A.MD5__hh(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 11 | t7 >>> 21) >>> 0) + a >>> 0;
        if (42 >= t6.length)
          return A.ioore(t6, 42);
        t7 = t6[42];
        t8 = t2[3];
        t7 = ((c + A.MD5__hh(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 16 | t7 >>> 16) >>> 0) + d >>> 0;
        if (43 >= t6.length)
          return A.ioore(t6, 43);
        t7 = t6[43];
        t8 = t2[6];
        t7 = ((b + A.MD5__hh(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 23 | t7 >>> 9) >>> 0) + c >>> 0;
        if (44 >= t6.length)
          return A.ioore(t6, 44);
        t7 = t6[44];
        t8 = t2[9];
        t7 = ((a + A.MD5__hh(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 4 | t7 >>> 28) >>> 0) + b >>> 0;
        if (45 >= t6.length)
          return A.ioore(t6, 45);
        t7 = t6[45];
        t8 = t2[12];
        t7 = ((d + A.MD5__hh(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 11 | t7 >>> 21) >>> 0) + a >>> 0;
        if (46 >= t6.length)
          return A.ioore(t6, 46);
        t7 = t6[46];
        t8 = t2[15];
        t7 = ((c + A.MD5__hh(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 16 | t7 >>> 16) >>> 0) + d >>> 0;
        if (47 >= t6.length)
          return A.ioore(t6, 47);
        t7 = t6[47];
        t8 = t2[2];
        t7 = ((b + A.MD5__hh(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 23 | t7 >>> 9) >>> 0) + c >>> 0;
        if (48 >= t6.length)
          return A.ioore(t6, 48);
        t7 = t6[48];
        t8 = t2[0];
        t7 = ((a + A.MD5__ii(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 6 | t7 >>> 26) >>> 0) + b >>> 0;
        if (49 >= t6.length)
          return A.ioore(t6, 49);
        t7 = t6[49];
        t8 = t2[7];
        t7 = ((d + A.MD5__ii(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 10 | t7 >>> 22) >>> 0) + a >>> 0;
        if (50 >= t6.length)
          return A.ioore(t6, 50);
        t7 = t6[50];
        t8 = t2[14];
        t7 = ((c + A.MD5__ii(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 15 | t7 >>> 17) >>> 0) + d >>> 0;
        if (51 >= t6.length)
          return A.ioore(t6, 51);
        t7 = t6[51];
        t8 = t2[5];
        t7 = ((b + A.MD5__ii(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 21 | t7 >>> 11) >>> 0) + c >>> 0;
        if (52 >= t6.length)
          return A.ioore(t6, 52);
        t7 = t6[52];
        t8 = t2[12];
        t7 = ((a + A.MD5__ii(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 6 | t7 >>> 26) >>> 0) + b >>> 0;
        if (53 >= t6.length)
          return A.ioore(t6, 53);
        t7 = t6[53];
        t8 = t2[3];
        t7 = ((d + A.MD5__ii(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 10 | t7 >>> 22) >>> 0) + a >>> 0;
        if (54 >= t6.length)
          return A.ioore(t6, 54);
        t7 = t6[54];
        t8 = t2[10];
        t7 = ((c + A.MD5__ii(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 15 | t7 >>> 17) >>> 0) + d >>> 0;
        if (55 >= t6.length)
          return A.ioore(t6, 55);
        t7 = t6[55];
        t8 = t2[1];
        t7 = ((b + A.MD5__ii(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 21 | t7 >>> 11) >>> 0) + c >>> 0;
        if (56 >= t6.length)
          return A.ioore(t6, 56);
        t7 = t6[56];
        t8 = t2[8];
        t7 = ((a + A.MD5__ii(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 6 | t7 >>> 26) >>> 0) + b >>> 0;
        if (57 >= t6.length)
          return A.ioore(t6, 57);
        t7 = t6[57];
        t8 = t2[15];
        t7 = ((d + A.MD5__ii(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 10 | t7 >>> 22) >>> 0) + a >>> 0;
        if (58 >= t6.length)
          return A.ioore(t6, 58);
        t7 = t6[58];
        t8 = t2[6];
        t7 = ((c + A.MD5__ii(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 15 | t7 >>> 17) >>> 0) + d >>> 0;
        if (59 >= t6.length)
          return A.ioore(t6, 59);
        t7 = t6[59];
        t8 = t2[13];
        t7 = ((b + A.MD5__ii(c, d, a) >>> 0) + t8 >>> 0) + t7 >>> 0;
        b = ((t7 << 21 | t7 >>> 11) >>> 0) + c >>> 0;
        if (60 >= t6.length)
          return A.ioore(t6, 60);
        t7 = t6[60];
        t8 = t2[4];
        t7 = ((a + A.MD5__ii(b, c, d) >>> 0) + t8 >>> 0) + t7 >>> 0;
        a = ((t7 << 6 | t7 >>> 26) >>> 0) + b >>> 0;
        if (61 >= t6.length)
          return A.ioore(t6, 61);
        t7 = t6[61];
        t8 = t2[11];
        t7 = ((d + A.MD5__ii(a, b, c) >>> 0) + t8 >>> 0) + t7 >>> 0;
        d = ((t7 << 10 | t7 >>> 22) >>> 0) + a >>> 0;
        if (62 >= t6.length)
          return A.ioore(t6, 62);
        t7 = t6[62];
        t8 = t2[2];
        t7 = ((c + A.MD5__ii(d, a, b) >>> 0) + t8 >>> 0) + t7 >>> 0;
        c = ((t7 << 15 | t7 >>> 17) >>> 0) + d >>> 0;
        if (63 >= t6.length)
          return A.ioore(t6, 63);
        t6 = t6[63];
        t7 = t2[9];
        t6 = ((b + A.MD5__ii(c, d, a) >>> 0) + t7 >>> 0) + t6 >>> 0;
        B.JSArray_methods.$indexSet(t4, 0, t4[0] + a >>> 0);
        B.JSArray_methods.$indexSet(t4, 1, t4[1] + (((t6 << 21 | t6 >>> 11) >>> 0) + c >>> 0) >>> 0);
        B.JSArray_methods.$indexSet(t4, 2, t4[2] + c >>> 0);
        B.JSArray_methods.$indexSet(t4, 3, t4[3] + d >>> 0);
      }
      B.JSArray_methods.removeRange$2(t1, 0, pendingDataChunks * 64);
    }
  };
  A.RIPEMD160.prototype = {};
  A._RIPEMD.prototype = {
    finish$1(out) {
      var i, t1, _this = this;
      type$.List_int._as(out);
      if (!_this._hash$_finished) {
        _this._finalize$0();
        _this._iterate$0();
        _this._hash$_finished = true;
      }
      i = 0;
      while (true) {
        t1 = _this.___RIPEMD__state_F;
        t1 === $ && A.throwLateFieldNI("_state");
        if (!(i < t1.length))
          break;
        A.writeUint32LE(t1[i], out, i * 4);
        ++i;
      }
      return _this;
    },
    _finalize$0() {
      var contentsLength, t2, i, lengthInBits, offset, highBits,
        t1 = this._hash$_buffer;
      B.JSArray_methods.add$1(t1, 128);
      contentsLength = this._lengthInBytes + 1 + 8;
      for (t2 = ((contentsLength + 64 - 1 & -64) >>> 0) - contentsLength, i = 0; i < t2; ++i)
        B.JSArray_methods.add$1(t1, 0);
      lengthInBits = this._lengthInBytes * 8;
      offset = t1.length;
      B.JSArray_methods.addAll$1(t1, A.List_List$filled(8, 0, false, type$.int));
      highBits = B.JSInt_methods._tdivFast$1(lengthInBits, 4294967296);
      A.writeUint32LE(lengthInBits >>> 0, t1, offset);
      A.writeUint32LE(highBits, t1, offset + 4);
    },
    reset$0() {
      var _this = this,
        t1 = _this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      B.JSArray_methods.setAll$2(t1, 0, A._RidempUtils_readState(t1.length * 4));
      _this._hash$_finished = false;
      _this._lengthInBytes = 0;
      return _this;
    },
    _iterate$0() {
      var t2, i, t3, j,
        t1 = this._hash$_buffer,
        pendingDataChunks = t1.length / 64 | 0;
      for (t2 = this._currentChunk, i = 0; i < pendingDataChunks; ++i) {
        for (t3 = i * 64, j = 0; j < 16; ++j)
          B.JSArray_methods.$indexSet(t2, j, A.readUint32LE(t1, t3 + j * 4));
        this._proccess$1(t2);
      }
      B.JSArray_methods.removeRange$2(t1, 0, pendingDataChunks * 64);
    },
    _proccess$1(chunk) {
      var t1, _this = this;
      type$.List_int._as(chunk);
      t1 = _this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      switch (t1.length * 4) {
        case 16:
          return _this._proccess128$1(chunk);
        case 20:
          return _this._proccess160$1(chunk);
        case 32:
          return _this._proccess256$1(chunk);
        default:
          return _this._proccess320$1(chunk);
      }
    },
    _proccess128$1(chunk) {
      var t1, t2, al, bl, cl, dl, dr, cr, br, ar, cl0, bl0, i, t, modShift;
      type$.List_int._as(chunk);
      t1 = this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      al = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      bl = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      cl = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      dl = t1[3];
      for (dr = dl, cr = cl, br = bl, ar = al, cl0 = cr, bl0 = br, i = 0; i < 64; ++i, ar = dr, dr = cr, cr = br, br = t2, al = dl, dl = cl0, cl0 = bl0, bl0 = t) {
        t2 = B.List_5lr[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t = (al + chunk[t2] >>> 0) + A._RidempUtils_T(i, bl0, cl0, dl) >>> 0;
        modShift = B.List_eXZ[i] & 31;
        t = (t << modShift | B.JSInt_methods._shrReceiverPositive$1(t, 32 - modShift)) >>> 0;
        t2 = B.List_Jr0[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t2 = (ar + chunk[t2] >>> 0) + A._RidempUtils_t64(i, br, cr, dr) >>> 0;
        modShift = B.List_Wl3[i] & 31;
        t2 = (t2 << modShift | B.JSInt_methods._shrReceiverPositive$1(t2, 32 - modShift)) >>> 0;
      }
      B.JSArray_methods.$indexSet(t1, 1, (cl + dl >>> 0) + ar >>> 0);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      B.JSArray_methods.$indexSet(t1, 2, (t1[3] + al >>> 0) + br >>> 0);
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      B.JSArray_methods.$indexSet(t1, 3, (t1[0] + bl0 >>> 0) + cr >>> 0);
      B.JSArray_methods.$indexSet(t1, 0, (bl + cl0 >>> 0) + dr >>> 0);
    },
    _proccess320$1(chunk) {
      var t1, t2, al, bl, cl, dl, el, ar, br, cr, dr, er, al0, i, t, modShift, dl0, dr0;
      type$.List_int._as(chunk);
      t1 = this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      al = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      bl = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      cl = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      dl = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      el = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      ar = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      br = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      cr = t1[7];
      if (8 >= t2)
        return A.ioore(t1, 8);
      dr = t1[8];
      if (9 >= t2)
        return A.ioore(t1, 9);
      er = t1[9];
      for (al0 = al, i = 0; i < 80; ++i) {
        t2 = B.List_5lr[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t = (al0 + chunk[t2] >>> 0) + A._RidempUtils_T(i, bl, cl, dl) >>> 0;
        modShift = B.List_eXZ[i] & 31;
        t = ((t << modShift | B.JSInt_methods._shrReceiverPositive$1(t, 32 - modShift)) >>> 0) + el >>> 0;
        dl0 = (cl << 10 | cl >>> 0 >>> 22) >>> 0;
        t2 = B.List_Jr0[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t2 = (ar + chunk[t2] >>> 0) + A._RidempUtils_t80(i, br, cr, dr) >>> 0;
        modShift = B.List_Wl3[i] & 31;
        t2 = ((t2 << modShift | B.JSInt_methods._shrReceiverPositive$1(t2, 32 - modShift)) >>> 0) + er >>> 0;
        dr0 = (cr << 10 | cr >>> 0 >>> 22) >>> 0;
        switch (i) {
          case 15:
            cr = br;
            br = t;
            ar = er;
            er = dr;
            dr = dr0;
            cl = bl;
            bl = t2;
            al0 = el;
            el = dl;
            dl = dl0;
            break;
          case 31:
            cr = br;
            br = t2;
            ar = er;
            er = dr;
            dr = dl0;
            cl = bl;
            bl = t;
            al0 = el;
            el = dl;
            dl = dr0;
            break;
          case 47:
            cr = br;
            br = t2;
            ar = el;
            el = dl;
            dl = dl0;
            cl = bl;
            bl = t;
            al0 = er;
            er = dr;
            dr = dr0;
            break;
          case 63:
            cr = bl;
            bl = t;
            ar = er;
            er = dr;
            dr = dr0;
            cl = br;
            br = t2;
            al0 = el;
            el = dl;
            dl = dl0;
            break;
          case 79:
            cr = br;
            br = t2;
            ar = er;
            er = dl;
            dl = dl0;
            cl = bl;
            bl = t;
            al0 = el;
            el = dr;
            dr = dr0;
            break;
          default:
            cr = br;
            br = t2;
            ar = er;
            er = dr;
            dr = dr0;
            cl = bl;
            bl = t;
            al0 = el;
            el = dl;
            dl = dl0;
        }
      }
      B.JSArray_methods.$indexSet(t1, 0, al + al0 >>> 0);
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      B.JSArray_methods.$indexSet(t1, 1, t1[1] + bl >>> 0);
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      B.JSArray_methods.$indexSet(t1, 2, t1[2] + cl >>> 0);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      B.JSArray_methods.$indexSet(t1, 3, t1[3] + dl >>> 0);
      if (4 >= t1.length)
        return A.ioore(t1, 4);
      B.JSArray_methods.$indexSet(t1, 4, t1[4] + el >>> 0);
      if (5 >= t1.length)
        return A.ioore(t1, 5);
      B.JSArray_methods.$indexSet(t1, 5, t1[5] + ar >>> 0);
      if (6 >= t1.length)
        return A.ioore(t1, 6);
      B.JSArray_methods.$indexSet(t1, 6, t1[6] + br >>> 0);
      if (7 >= t1.length)
        return A.ioore(t1, 7);
      B.JSArray_methods.$indexSet(t1, 7, t1[7] + cr >>> 0);
      if (8 >= t1.length)
        return A.ioore(t1, 8);
      B.JSArray_methods.$indexSet(t1, 8, t1[8] + dr >>> 0);
      if (9 >= t1.length)
        return A.ioore(t1, 9);
      B.JSArray_methods.$indexSet(t1, 9, t1[9] + er >>> 0);
    },
    _proccess256$1(chunk) {
      var t1, t2, al, bl, cl, dl, ar, br, cr, dr, al0, i, t, modShift;
      type$.List_int._as(chunk);
      t1 = this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      al = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      bl = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      cl = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      dl = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      ar = t1[4];
      if (5 >= t2)
        return A.ioore(t1, 5);
      br = t1[5];
      if (6 >= t2)
        return A.ioore(t1, 6);
      cr = t1[6];
      if (7 >= t2)
        return A.ioore(t1, 7);
      dr = t1[7];
      for (al0 = al, i = 0; i < 64; ++i) {
        t2 = B.List_5lr[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t = (al0 + chunk[t2] >>> 0) + A._RidempUtils_T(i, bl, cl, dl) >>> 0;
        modShift = B.List_eXZ[i] & 31;
        t = (t << modShift | B.JSInt_methods._shrReceiverPositive$1(t, 32 - modShift)) >>> 0;
        t2 = B.List_Jr0[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t2 = (ar + chunk[t2] >>> 0) + A._RidempUtils_t64(i, br, cr, dr) >>> 0;
        modShift = B.List_Wl3[i] & 31;
        t2 = (t2 << modShift | B.JSInt_methods._shrReceiverPositive$1(t2, 32 - modShift)) >>> 0;
        switch (i) {
          case 15:
            ar = dl;
            dl = cl;
            cl = bl;
            bl = t;
            al0 = dr;
            dr = cr;
            cr = br;
            br = t2;
            break;
          case 31:
            ar = dr;
            dr = cr;
            cr = br;
            br = t;
            al0 = dl;
            dl = cl;
            cl = bl;
            bl = t2;
            break;
          case 47:
            ar = dr;
            dr = cr;
            cr = bl;
            bl = t;
            al0 = dl;
            dl = cl;
            cl = br;
            br = t2;
            break;
          case 63:
            ar = dr;
            dr = cl;
            cl = bl;
            bl = t;
            al0 = dl;
            dl = cr;
            cr = br;
            br = t2;
            break;
          default:
            ar = dr;
            dr = cr;
            cr = br;
            br = t2;
            al0 = dl;
            dl = cl;
            cl = bl;
            bl = t;
        }
      }
      B.JSArray_methods.$indexSet(t1, 0, al + al0 >>> 0);
      if (1 >= t1.length)
        return A.ioore(t1, 1);
      B.JSArray_methods.$indexSet(t1, 1, t1[1] + bl >>> 0);
      if (2 >= t1.length)
        return A.ioore(t1, 2);
      B.JSArray_methods.$indexSet(t1, 2, t1[2] + cl >>> 0);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      B.JSArray_methods.$indexSet(t1, 3, t1[3] + dl >>> 0);
      if (4 >= t1.length)
        return A.ioore(t1, 4);
      B.JSArray_methods.$indexSet(t1, 4, t1[4] + ar >>> 0);
      if (5 >= t1.length)
        return A.ioore(t1, 5);
      B.JSArray_methods.$indexSet(t1, 5, t1[5] + br >>> 0);
      if (6 >= t1.length)
        return A.ioore(t1, 6);
      B.JSArray_methods.$indexSet(t1, 6, t1[6] + cr >>> 0);
      if (7 >= t1.length)
        return A.ioore(t1, 7);
      B.JSArray_methods.$indexSet(t1, 7, t1[7] + dr >>> 0);
    },
    _proccess160$1(chunk) {
      var t1, t2, al, bl, cl, dl, el, er, dr, cr, br, ar, cl0, bl0, i, t, modShift, dl0, dr0;
      type$.List_int._as(chunk);
      t1 = this.___RIPEMD__state_F;
      t1 === $ && A.throwLateFieldNI("_state");
      t2 = t1.length;
      if (0 >= t2)
        return A.ioore(t1, 0);
      al = t1[0];
      if (1 >= t2)
        return A.ioore(t1, 1);
      bl = t1[1];
      if (2 >= t2)
        return A.ioore(t1, 2);
      cl = t1[2];
      if (3 >= t2)
        return A.ioore(t1, 3);
      dl = t1[3];
      if (4 >= t2)
        return A.ioore(t1, 4);
      el = t1[4];
      for (er = el, dr = dl, cr = cl, br = bl, ar = al, cl0 = cr, bl0 = br, i = 0; i < 80; ++i, cr = br, br = t2, ar = er, er = dr, dr = dr0, cl0 = bl0, bl0 = t, al = el, el = dl, dl = dl0) {
        t2 = B.List_5lr[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t = (al + chunk[t2] >>> 0) + A._RidempUtils_T(i, bl0, cl0, dl) >>> 0;
        modShift = B.List_eXZ[i] & 31;
        t = ((t << modShift | B.JSInt_methods._shrReceiverPositive$1(t, 32 - modShift)) >>> 0) + el >>> 0;
        dl0 = (cl0 << 10 | cl0 >>> 0 >>> 22) >>> 0;
        t2 = B.List_Jr0[i];
        if (!(t2 < 16))
          return A.ioore(chunk, t2);
        t2 = (ar + chunk[t2] >>> 0) + A._RidempUtils_t80(i, br, cr, dr);
        modShift = B.List_Wl3[i] & 31;
        t2 = ((t2 << modShift | B.JSInt_methods._shrReceiverPositive$1(t2 >>> 0, 32 - modShift)) >>> 0) + er >>> 0;
        dr0 = (cr << 10 | cr >>> 0 >>> 22) >>> 0;
      }
      B.JSArray_methods.$indexSet(t1, 1, (cl + dl >>> 0) + er >>> 0);
      if (3 >= t1.length)
        return A.ioore(t1, 3);
      B.JSArray_methods.$indexSet(t1, 2, (t1[3] + el >>> 0) + ar >>> 0);
      if (4 >= t1.length)
        return A.ioore(t1, 4);
      B.JSArray_methods.$indexSet(t1, 3, (t1[4] + al >>> 0) + br >>> 0);
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      B.JSArray_methods.$indexSet(t1, 4, (t1[0] + bl0 >>> 0) + cr >>> 0);
      B.JSArray_methods.$indexSet(t1, 0, (bl + cl0 >>> 0) + dr >>> 0);
    }
  };
  A.SHA256.prototype = {
    _initState$0() {
      var t1 = this._hash$_state;
      B.JSArray_methods.$indexSet(t1, 0, 1779033703);
      B.JSArray_methods.$indexSet(t1, 1, 3144134277);
      B.JSArray_methods.$indexSet(t1, 2, 1013904242);
      B.JSArray_methods.$indexSet(t1, 3, 2773480762);
      B.JSArray_methods.$indexSet(t1, 4, 1359893119);
      B.JSArray_methods.$indexSet(t1, 5, 2600822924);
      B.JSArray_methods.$indexSet(t1, 6, 528734635);
      B.JSArray_methods.$indexSet(t1, 7, 1541459225);
    },
    update$1(data) {
      var dataLength, dataPos, t1, t2, dataPos0, _this = this;
      type$.List_int._as(data);
      if (_this._hash$_finished)
        throw A.wrapException(B.CryptoException_VyX);
      dataLength = data.length;
      _this._bytesHashed += dataLength;
      dataPos = 0;
      if (_this._bufferLength > 0) {
        t1 = _this._hash$_buffer;
        while (true) {
          t2 = _this._bufferLength;
          if (!(t2 < 64 && dataLength > 0))
            break;
          _this._bufferLength = t2 + 1;
          dataPos0 = dataPos + 1;
          if (!(dataPos < data.length))
            return A.ioore(data, dataPos);
          B.JSArray_methods.$indexSet(t1, t2, data[dataPos] & 255);
          --dataLength;
          dataPos = dataPos0;
        }
        if (t2 === 64) {
          _this._hashBlocks$5(_this._temp, _this._hash$_state, t1, 0, 64);
          _this._bufferLength = 0;
        }
      }
      if (dataLength >= 64) {
        dataPos = _this._hashBlocks$5(_this._temp, _this._hash$_state, data, dataPos, dataLength);
        dataLength = B.JSInt_methods.$mod(dataLength, 64);
      }
      for (t1 = _this._hash$_buffer; dataLength > 0; dataPos = dataPos0) {
        t2 = _this._bufferLength++;
        dataPos0 = dataPos + 1;
        if (!(dataPos < data.length))
          return A.ioore(data, dataPos);
        B.JSArray_methods.$indexSet(t1, t2, data[dataPos] & 255);
        --dataLength;
      }
      return _this;
    },
    finish$1(out) {
      var bytesHashed, left, t1, padLength, t2, i, t3, _this = this;
      type$.List_int._as(out);
      if (!_this._hash$_finished) {
        bytesHashed = _this._bytesHashed;
        left = _this._bufferLength;
        t1 = B.JSInt_methods._tdivFast$1(bytesHashed, 536870912);
        padLength = B.JSInt_methods.$mod(bytesHashed, 64) < 56 ? 64 : 128;
        t2 = _this._hash$_buffer;
        B.JSArray_methods.$indexSet(t2, left, 128);
        for (i = left + 1, t3 = padLength - 8; i < t3; ++i)
          B.JSArray_methods.$indexSet(t2, i, 0);
        A.writeUint32BE(t1 >>> 0, t2, t3);
        A.writeUint32BE(bytesHashed << 3 >>> 0, t2, padLength - 4);
        _this._hashBlocks$5(_this._temp, _this._hash$_state, t2, 0, padLength);
        _this._hash$_finished = true;
      }
      for (t1 = _this._hash$_state, i = 0; i < 8; ++i)
        A.writeUint32BE(t1[i], out, i * 4);
      return _this;
    },
    reset$0() {
      var _this = this,
        t1 = _this._hash$_state;
      B.JSArray_methods.$indexSet(t1, 0, 1779033703);
      B.JSArray_methods.$indexSet(t1, 1, 3144134277);
      B.JSArray_methods.$indexSet(t1, 2, 1013904242);
      B.JSArray_methods.$indexSet(t1, 3, 2773480762);
      B.JSArray_methods.$indexSet(t1, 4, 1359893119);
      B.JSArray_methods.$indexSet(t1, 5, 2600822924);
      B.JSArray_methods.$indexSet(t1, 6, 528734635);
      B.JSArray_methods.$indexSet(t1, 7, 1541459225);
      _this._bytesHashed = _this._bufferLength = 0;
      _this._hash$_finished = false;
      return _this;
    },
    _hashBlocks$5(w, v, p, pos, len) {
      var t2, a, b, c, d, e, f, g, h, i, u, u0, t10, e0, a0,
        t1 = type$.List_int;
      t1._as(w);
      t1._as(v);
      t1._as(p);
      for (t1 = this._k, t2 = t1.length; len >= 64;) {
        a = v[0];
        b = v[1];
        c = v[2];
        d = v[3];
        e = v[4];
        f = v[5];
        g = v[6];
        h = v[7];
        for (i = 0; i < 16; ++i)
          B.JSArray_methods.$indexSet(w, i, A.readUint32BE(p, pos + i * 4));
        for (i = 16; i < 64; ++i) {
          u = w[i - 2];
          u0 = w[i - 15];
          B.JSArray_methods.$indexSet(w, i, (((((u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10) >>> 0) + w[i - 7] >>> 0) + (((u0 >>> 7 | u0 << 25) ^ (u0 >>> 18 | u0 << 14) ^ u0 >>> 3) >>> 0) >>> 0) + w[i - 16] >>> 0);
        }
        for (i = 0; i < 64; ++i, h = g, g = f, f = e, e = e0, d = c, c = b, b = a, a = a0) {
          if (!(i < t2))
            return A.ioore(t1, i);
          t10 = ((((e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7)) >>> 0) + ((e & f ^ ~e & g) >>> 0) >>> 0) + ((h + t1[i] >>> 0) + w[i] >>> 0) >>> 0;
          e0 = d + t10 >>> 0;
          a0 = t10 + ((((a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10)) >>> 0) + ((a & b ^ a & c ^ b & c) >>> 0) >>> 0) >>> 0;
        }
        B.JSArray_methods.$indexSet(v, 0, v[0] + a >>> 0);
        B.JSArray_methods.$indexSet(v, 1, v[1] + b >>> 0);
        B.JSArray_methods.$indexSet(v, 2, v[2] + c >>> 0);
        B.JSArray_methods.$indexSet(v, 3, v[3] + d >>> 0);
        B.JSArray_methods.$indexSet(v, 4, v[4] + e >>> 0);
        B.JSArray_methods.$indexSet(v, 5, v[5] + f >>> 0);
        B.JSArray_methods.$indexSet(v, 6, v[6] + g >>> 0);
        B.JSArray_methods.$indexSet(v, 7, v[7] + h >>> 0);
        pos += 64;
        len -= 64;
      }
      return pos;
    }
  };
  A.SHA512.prototype = {
    get$getBlockSize() {
      return 128;
    },
    get$getDigestLength() {
      return 64;
    },
    _initState$0() {
      var t1 = this._stateHi;
      B.JSArray_methods.$indexSet(t1, 0, 1779033703);
      B.JSArray_methods.$indexSet(t1, 1, 3144134277);
      B.JSArray_methods.$indexSet(t1, 2, 1013904242);
      B.JSArray_methods.$indexSet(t1, 3, 2773480762);
      B.JSArray_methods.$indexSet(t1, 4, 1359893119);
      B.JSArray_methods.$indexSet(t1, 5, 2600822924);
      B.JSArray_methods.$indexSet(t1, 6, 528734635);
      B.JSArray_methods.$indexSet(t1, 7, 1541459225);
      t1 = this._stateLo;
      B.JSArray_methods.$indexSet(t1, 0, 4089235720);
      B.JSArray_methods.$indexSet(t1, 1, 2227873595);
      B.JSArray_methods.$indexSet(t1, 2, 4271175723);
      B.JSArray_methods.$indexSet(t1, 3, 1595750129);
      B.JSArray_methods.$indexSet(t1, 4, 2917565137);
      B.JSArray_methods.$indexSet(t1, 5, 725511199);
      B.JSArray_methods.$indexSet(t1, 6, 4215389547);
      B.JSArray_methods.$indexSet(t1, 7, 327033209);
    },
    reset$0() {
      var _this = this;
      _this._initState$0();
      _this._bytesHashed = _this._bufferLength = 0;
      _this._hash$_finished = false;
      return _this;
    },
    clean$0() {
      var _this = this;
      A.zero(_this._hash$_buffer);
      A.zero(_this._tempHi);
      A.zero(_this._tempLo);
      _this.reset$0();
    },
    update$1(data) {
      var dataLength, dataPos, t1, t2, dataPos0, _this = this;
      type$.List_int._as(data);
      if (_this._hash$_finished)
        throw A.wrapException(B.CryptoException_PCa);
      dataLength = data.length;
      _this._bytesHashed += dataLength;
      dataPos = 0;
      if (_this._bufferLength > 0) {
        t1 = _this._hash$_buffer;
        while (true) {
          if (!(_this._bufferLength < _this.get$getBlockSize() && dataLength > 0))
            break;
          t2 = _this._bufferLength++;
          dataPos0 = dataPos + 1;
          if (!(dataPos < data.length))
            return A.ioore(data, dataPos);
          B.JSArray_methods.$indexSet(t1, t2, data[dataPos] & 255);
          --dataLength;
          dataPos = dataPos0;
        }
        if (_this._bufferLength === _this.get$getBlockSize()) {
          _this._hashBlocks$7(_this._tempHi, _this._tempLo, _this._stateHi, _this._stateLo, t1, 0, _this.get$getBlockSize());
          _this._bufferLength = 0;
        }
      }
      if (dataLength >= _this.get$getBlockSize()) {
        dataPos = _this._hashBlocks$7(_this._tempHi, _this._tempLo, _this._stateHi, _this._stateLo, data, dataPos, dataLength);
        dataLength = B.JSInt_methods.$mod(dataLength, _this.get$getBlockSize());
      }
      for (t1 = _this._hash$_buffer; dataLength > 0; dataPos = dataPos0) {
        t2 = _this._bufferLength++;
        dataPos0 = dataPos + 1;
        if (!(dataPos < data.length))
          return A.ioore(data, dataPos);
        B.JSArray_methods.$indexSet(t1, t2, data[dataPos] & 255);
        --dataLength;
      }
      return _this;
    },
    finish$1(out) {
      var bytesHashed, left, bitLenHi, padLength, t1, i, t2, t3, _this = this;
      type$.List_int._as(out);
      if (!_this._hash$_finished) {
        bytesHashed = _this._bytesHashed;
        left = _this._bufferLength;
        bitLenHi = B.JSInt_methods.toInt$0(B.JSInt_methods._tdivFast$1(bytesHashed, 536870912));
        padLength = B.JSInt_methods.$mod(bytesHashed, 128) < 112 ? 128 : 256;
        t1 = _this._hash$_buffer;
        B.JSArray_methods.$indexSet(t1, left, 128);
        for (i = left + 1, t2 = padLength - 8; i < t2; ++i)
          B.JSArray_methods.$indexSet(t1, i, 0);
        A.writeUint32BE(bitLenHi, t1, t2);
        A.writeUint32BE(bytesHashed << 3 >>> 0, t1, padLength - 4);
        _this._hashBlocks$7(_this._tempHi, _this._tempLo, _this._stateHi, _this._stateLo, t1, 0, padLength);
        _this._hash$_finished = true;
      }
      for (t1 = _this._stateHi, t2 = _this._stateLo, i = 0; i < (_this.get$getDigestLength() / 8 | 0); ++i) {
        if (!(i < 8))
          return A.ioore(t1, i);
        t3 = i * 8;
        A.writeUint32BE(t1[i], out, t3);
        A.writeUint32BE(t2[i], out, t3 + 4);
      }
      return _this;
    },
    digest$0() {
      var out = A.List_List$filled(this.get$getDigestLength(), 0, false, type$.int);
      this.finish$1(out);
      return out;
    },
    _sigma1A$2(ah4, al4) {
      return ((ah4 >>> 14 | al4 << 18) ^ (ah4 >>> 18 | al4 << 14) ^ (al4 >>> 9 | ah4 << 23)) >>> 0;
    },
    _sigma1B$2(ah0, al0) {
      return ((ah0 >>> 28 | al0 << 4) ^ (al0 >>> 2 | ah0 << 30) ^ (al0 >>> 7 | ah0 << 25)) >>> 0;
    },
    _hashBlocks$7(wh, wl, hh, hl, m, pos, len) {
      var ah0, ah1, ah2, ah3, ah4, ah5, ah6, ah7, al0, al1, al2, al3, al4, al5, al6, al7, t2, i, j, h, l, h0, l0, t3, h1, l1, t4, t5, h2, l2, a, b, c, th, tl, d, a0, b0, c0, bh7, bl7, bh3, bl3, j0, h3, h4, _this = this,
        t1 = type$.List_int;
      t1._as(wh);
      t1._as(wl);
      t1._as(hh);
      t1._as(hl);
      t1._as(m);
      ah0 = hh[0];
      ah1 = hh[1];
      ah2 = hh[2];
      ah3 = hh[3];
      ah4 = hh[4];
      ah5 = hh[5];
      ah6 = hh[6];
      ah7 = hh[7];
      al0 = hl[0];
      al1 = hl[1];
      al2 = hl[2];
      al3 = hl[3];
      al4 = hl[4];
      al5 = hl[5];
      al6 = hl[6];
      al7 = hl[7];
      for (t1 = _this._k, t2 = t1.length; len >= 128;) {
        for (i = 0; i < 16; ++i) {
          j = 8 * i + pos;
          B.JSArray_methods.$indexSet(wh, i, A.readUint32BE(m, j));
          B.JSArray_methods.$indexSet(wl, i, A.readUint32BE(m, j + 4));
        }
        for (i = 0; i < 80; ++i, al7 = al6, al6 = al5, al5 = al4, al4 = bl3, al3 = al2, al2 = al1, al1 = al0, al0 = bl7, ah7 = ah6, ah6 = ah5, ah5 = ah4, ah4 = bh3, ah3 = ah2, ah2 = ah1, ah1 = ah0, ah0 = bh7) {
          h = _this._sigma1A$2(ah4, al4);
          l = _this._sigma1A$2(al4, ah4);
          h0 = ah4 & ah5 ^ ~ah4 & ah6;
          l0 = al4 & al5 ^ ~al4 & al6;
          t3 = i * 2;
          if (!(t3 < t2))
            return A.ioore(t1, t3);
          h1 = t1[t3];
          ++t3;
          if (!(t3 < t2))
            return A.ioore(t1, t3);
          l1 = t1[t3];
          t3 = B.JSInt_methods._shrOtherPositive$1(l1, 16);
          t4 = B.JSInt_methods._shrOtherPositive$1(h1, 16);
          t5 = B.JSInt_methods.$mod(i, 16);
          h2 = wh[t5];
          l2 = wl[t5];
          a = (al7 & 65535) + (l & 65535) + (l0 & 65535) + (l1 & 65535) + (l2 & 65535);
          b = (al7 >>> 16 & 65535) + (l >>> 16 & 65535) + (l0 >>> 16 & 65535) + (t3 & 65535) + (l2 >>> 16 & 65535) + (a >>> 16 & 65535);
          c = (ah7 & 65535) + (h & 65535) + (h0 & 65535) + (h1 & 65535) + (h2 & 65535) + (b >>> 16 & 65535);
          th = c & 65535 | (ah7 >>> 16 & 65535) + (h >>> 16 & 65535) + (h0 >>> 16 & 65535) + (t4 & 65535) + (h2 >>> 16 & 65535) + (c >>> 16 & 65535) << 16;
          tl = a & 65535 | b << 16;
          a = tl & 65535;
          b = tl >>> 16 & 65535;
          c = th & 65535;
          d = th >>> 16 & 65535;
          h = _this._sigma1B$2(ah0, al0);
          l = _this._sigma1B$2(al0, ah0);
          h0 = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
          l0 = al0 & al1 ^ al0 & al2 ^ al1 & al2;
          a0 = a + (l & 65535) + (l0 & 65535);
          b0 = b + (l >>> 16 & 65535) + (l0 >>> 16 & 65535) + (a0 >>> 16 & 65535);
          c0 = c + (h & 65535) + (h0 & 65535) + (b0 >>> 16 & 65535);
          bh7 = (c0 & 65535 | d + (h >>> 16 & 65535) + (h0 >>> 16 & 65535) + (c0 >>> 16 & 65535) << 16) >>> 0;
          bl7 = (a0 & 65535 | b0 << 16) >>> 0;
          a = (al3 & 65535) + a;
          b = (al3 >>> 16 & 65535) + b + (a >>> 16 & 65535);
          c = (ah3 & 65535) + c + (b >>> 16 & 65535);
          bh3 = (c & 65535 | (ah3 >>> 16 & 65535) + d + (c >>> 16 & 65535) << 16) >>> 0;
          bl3 = (a & 65535 | b << 16) >>> 0;
          if (t5 === 15)
            for (j = 0; j < 16; j = j0) {
              h = wh[j];
              l = wl[j];
              t3 = (j + 9) % 16;
              h0 = wh[t3];
              l0 = wl[t3];
              j0 = j + 1;
              t3 = j0 % 16;
              th = wh[t3];
              tl = wl[t3];
              h1 = (th >>> 1 | tl << 31) ^ (th >>> 8 | tl << 24) ^ th >>> 7;
              h2 = (tl >>> 1 | th << 31) ^ (tl >>> 8 | th << 24) ^ (tl >>> 7 | th << 25);
              t3 = (j + 14) % 16;
              th = wh[t3];
              tl = wl[t3];
              h3 = (th >>> 19 | tl << 13) ^ (tl >>> 29 | th << 3) ^ th >>> 6;
              h4 = (tl >>> 19 | th << 13) ^ (th >>> 29 | tl << 3) ^ (tl >>> 6 | th << 26);
              a = (l & 65535) + (l0 & 65535) + (h2 & 65535) + (h4 & 65535);
              b = (l >>> 16 & 65535) + (l0 >>> 16 & 65535) + (h2 >>> 16 & 65535) + (h4 >>> 16 & 65535) + (a >>> 16 & 65535);
              c = (h & 65535) + (h0 & 65535) + (h1 & 65535) + (h3 & 65535) + (b >>> 16 & 65535);
              B.JSArray_methods.$indexSet(wh, j, (c & 65535 | (h >>> 16 & 65535) + (h0 >>> 16 & 65535) + (h1 >>> 16 & 65535) + (h3 >>> 16 & 65535) + (c >>> 16 & 65535) << 16) >>> 0);
              B.JSArray_methods.$indexSet(wl, j, (a & 65535 | b << 16) >>> 0);
            }
        }
        h = hh[0];
        l = hl[0];
        a = (al0 & 65535) + (l & 65535);
        b = (al0 >>> 16 & 65535) + (l >>> 16 & 65535) + (a >>> 16 & 65535);
        c = (ah0 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah0 = (c & 65535 | (ah0 >>> 16 & 65535) + (h >>> 16 & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 0, ah0);
        al0 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 0, al0);
        h = hh[1];
        l = hl[1];
        a = (al1 & 65535) + (l & 65535);
        b = (al1 >>> 16 & 65535) + (l >>> 16 & 65535) + (a >>> 16 & 65535);
        c = (ah1 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah1 = (c & 65535 | (ah1 >>> 16 & 65535) + (h >>> 16 & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 1, ah1);
        al1 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 1, al1);
        h = hh[2];
        l = hl[2];
        a = (al2 & 65535) + (l & 65535);
        b = (al2 >>> 16 & 65535) + (l >>> 16 & 65535) + (a >>> 16 & 65535);
        c = (ah2 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah2 = (c & 65535 | (ah2 >>> 16 & 65535) + (h >>> 16 & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 2, ah2);
        al2 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 2, al2);
        h = hh[3];
        l = hl[3];
        a = (al3 & 65535) + (l & 65535);
        b = (al3 >>> 16 & 65535) + (l >>> 16 & 65535) + (a >>> 16 & 65535);
        c = (ah3 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah3 = (c & 65535 | (ah3 >>> 16 & 65535) + (h >>> 16 & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 3, ah3);
        al3 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 3, al3);
        h = hh[4];
        l = hl[4];
        a = (al4 & 65535) + (l & 65535);
        b = (al4 >>> 16 & 65535) + (l >>> 16 & 65535) + (a >>> 16 & 65535);
        c = (ah4 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah4 = (c & 65535 | (ah4 >>> 16 & 65535) + (h >>> 16 & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 4, ah4);
        al4 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 4, al4);
        h = hh[5];
        l = hl[5];
        a = (al5 & 65535) + (l & 65535);
        b = (al5 >>> 16 & 65535) + (l >>> 16 & 65535) + (a >>> 16 & 65535);
        c = (ah5 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah5 = (c & 65535 | (ah5 >>> 16 & 65535) + (h >>> 16 & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 5, ah5);
        al5 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 5, al5);
        h = hh[6];
        l = hl[6];
        a = (al6 & 65535) + (l & 65535);
        b = (al6 >>> 16 & 65535) + (l >>> 16 & 65535) + (a >>> 16 & 65535);
        c = (ah6 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah6 = (c & 65535 | (ah6 >>> 16 & 65535) + (h >>> 16 & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 6, ah6);
        al6 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 6, al6);
        h = hh[7];
        l = hl[7];
        a = (al7 & 65535) + (l & 65535);
        b = (al7 >>> 16 & 65535) + (l >>> 16 & 65535) + (a >>> 16 & 65535);
        c = (ah7 & 65535) + (h & 65535) + (b >>> 16 & 65535);
        ah7 = (c & 65535 | (ah7 >>> 16 & 65535) + (h >>> 16 & 65535) + (c >>> 16 & 65535) << 16) >>> 0;
        B.JSArray_methods.$indexSet(hh, 7, ah7);
        al7 = (a & 65535 | b << 16) >>> 0;
        B.JSArray_methods.$indexSet(hl, 7, al7);
        pos += 128;
        len -= 128;
      }
      return pos;
    }
  };
  A.SHA512256.prototype = {
    get$getDigestLength() {
      return 32;
    },
    get$getBlockSize() {
      return 128;
    },
    _initState$0() {
      var t1 = this._stateHi;
      B.JSArray_methods.$indexSet(t1, 0, 573645204);
      B.JSArray_methods.$indexSet(t1, 1, 2673172387);
      B.JSArray_methods.$indexSet(t1, 2, 596883563);
      B.JSArray_methods.$indexSet(t1, 3, 2520282905);
      B.JSArray_methods.$indexSet(t1, 4, 2519219938);
      B.JSArray_methods.$indexSet(t1, 5, 3193839141);
      B.JSArray_methods.$indexSet(t1, 6, 721525244);
      B.JSArray_methods.$indexSet(t1, 7, 246885852);
      t1 = this._stateLo;
      B.JSArray_methods.$indexSet(t1, 0, 4230739756);
      B.JSArray_methods.$indexSet(t1, 1, 3360449730);
      B.JSArray_methods.$indexSet(t1, 2, 1867755857);
      B.JSArray_methods.$indexSet(t1, 3, 1497426621);
      B.JSArray_methods.$indexSet(t1, 4, 2827943907);
      B.JSArray_methods.$indexSet(t1, 5, 1401305490);
      B.JSArray_methods.$indexSet(t1, 6, 746961066);
      B.JSArray_methods.$indexSet(t1, 7, 2177182882);
    }
  };
  A.Poly1305.prototype = {
    _blocks$3(m, mpos, bytes) {
      var hibit, t1, h0, h1, h2, h3, h4, h5, h6, h7, h8, h9, t2, r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t00, t20, t30, t40, t50, t60, t70, d0, d00, d1, d10, d2, d20, d21, d3, d30, d31, d4, d40, d41, d5, d50, d51, d6, d60, d61, d7, d70, d71, d8, d80, d81, d9, d90, c;
      type$.List_int._as(m);
      hibit = this._fin !== 0 ? 0 : 2048;
      t1 = this._h;
      h0 = t1[0];
      h1 = t1[1];
      h2 = t1[2];
      h3 = t1[3];
      h4 = t1[4];
      h5 = t1[5];
      h6 = t1[6];
      h7 = t1[7];
      h8 = t1[8];
      h9 = t1[9];
      t2 = this._r;
      r0 = t2[0];
      r1 = t2[1];
      r2 = t2[2];
      r3 = t2[3];
      r4 = t2[4];
      r5 = t2[5];
      r6 = t2[6];
      r7 = t2[7];
      r8 = t2[8];
      r9 = t2[9];
      for (t2 = m.length, t3 = 5 * r9, t4 = 5 * r8, t5 = 5 * r7, t6 = 5 * r6, t7 = 5 * r5, t8 = 5 * r4, t9 = 5 * r3, t10 = 5 * r2, t11 = 5 * r1; bytes >= 16; h9 = d9, h8 = d81, h7 = d71, h6 = d61, h5 = d51, h4 = d41, h3 = d31, h2 = d21, h1 = d1, h0 = d0) {
        if (!(mpos >= 0 && mpos < t2))
          return A.ioore(m, mpos);
        t12 = m[mpos];
        t13 = mpos + 1;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t00 = t12 | m[t13] << 8;
        h0 += t00 & 8191;
        t13 = mpos + 2;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t13 = m[t13];
        t12 = mpos + 3;
        if (!(t12 < t2))
          return A.ioore(m, t12);
        t12 = t13 | m[t12] << 8;
        h1 += (t00 >>> 13 | t12 << 3) & 8191;
        t00 = mpos + 4;
        if (!(t00 < t2))
          return A.ioore(m, t00);
        t00 = m[t00];
        t13 = mpos + 5;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t20 = t00 | m[t13] << 8;
        h2 += (t12 >>> 10 | t20 << 6) & 8191;
        t12 = mpos + 6;
        if (!(t12 < t2))
          return A.ioore(m, t12);
        t12 = m[t12];
        t13 = mpos + 7;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t30 = t12 | m[t13] << 8;
        h3 += (t20 >>> 7 | t30 << 9) & 8191;
        t20 = mpos + 8;
        if (!(t20 < t2))
          return A.ioore(m, t20);
        t20 = m[t20];
        t13 = mpos + 9;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t40 = t20 | m[t13] << 8;
        h4 += (t30 >>> 4 | t40 << 12) & 8191;
        h5 += t40 >>> 1 & 8191;
        t30 = mpos + 10;
        if (!(t30 < t2))
          return A.ioore(m, t30);
        t30 = m[t30];
        t13 = mpos + 11;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t50 = t30 | m[t13] << 8;
        h6 += (t40 >>> 14 | t50 << 2) & 8191;
        t40 = mpos + 12;
        if (!(t40 < t2))
          return A.ioore(m, t40);
        t40 = m[t40];
        t13 = mpos + 13;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t60 = t40 | m[t13] << 8;
        h7 += (t50 >>> 11 | t60 << 5) & 8191;
        t50 = mpos + 14;
        if (!(t50 < t2))
          return A.ioore(m, t50);
        t50 = m[t50];
        t13 = mpos + 15;
        if (!(t13 < t2))
          return A.ioore(m, t13);
        t70 = t50 | m[t13] << 8;
        h8 += (t60 >>> 8 | t70 << 8) & 8191;
        h9 += (t70 >>> 5 | hibit) >>> 0;
        d0 = h0 * r0 + h1 * t3 + h2 * t4 + h3 * t5 + h4 * t6;
        d00 = (d0 & 8191) + h5 * t7 + h6 * t8 + h7 * t9 + h8 * t10 + h9 * t11;
        d1 = B.JSInt_methods._shrOtherPositive$1(d0, 13) + B.JSInt_methods._shrOtherPositive$1(d00, 13) + h0 * r1 + h1 * r0 + h2 * t3 + h3 * t4 + h4 * t5;
        d10 = (d1 & 8191) + h5 * t6 + h6 * t7 + h7 * t8 + h8 * t9 + h9 * t10;
        d2 = B.JSInt_methods._shrOtherPositive$1(d1, 13) + B.JSInt_methods._shrOtherPositive$1(d10, 13) + h0 * r2 + h1 * r1 + h2 * r0 + h3 * t3 + h4 * t4;
        d20 = (d2 & 8191) + h5 * t5 + h6 * t6 + h7 * t7 + h8 * t8 + h9 * t9;
        d21 = d20 & 8191;
        d3 = B.JSInt_methods._shrOtherPositive$1(d2, 13) + B.JSInt_methods._shrOtherPositive$1(d20, 13) + h0 * r3 + h1 * r2 + h2 * r1 + h3 * r0 + h4 * t3;
        d30 = (d3 & 8191) + h5 * t4 + h6 * t5 + h7 * t6 + h8 * t7 + h9 * t8;
        d31 = d30 & 8191;
        d4 = B.JSInt_methods._shrOtherPositive$1(d3, 13) + B.JSInt_methods._shrOtherPositive$1(d30, 13) + h0 * r4 + h1 * r3 + h2 * r2 + h3 * r1 + h4 * r0;
        d40 = (d4 & 8191) + h5 * t3 + h6 * t4 + h7 * t5 + h8 * t6 + h9 * t7;
        d41 = d40 & 8191;
        d5 = B.JSInt_methods._shrOtherPositive$1(d4, 13) + B.JSInt_methods._shrOtherPositive$1(d40, 13) + h0 * r5 + h1 * r4 + h2 * r3 + h3 * r2 + h4 * r1;
        d50 = (d5 & 8191) + h5 * r0 + h6 * t3 + h7 * t4 + h8 * t5 + h9 * t6;
        d51 = d50 & 8191;
        d6 = B.JSInt_methods._shrOtherPositive$1(d5, 13) + B.JSInt_methods._shrOtherPositive$1(d50, 13) + h0 * r6 + h1 * r5 + h2 * r4 + h3 * r3 + h4 * r2;
        d60 = (d6 & 8191) + h5 * r1 + h6 * r0 + h7 * t3 + h8 * t4 + h9 * t5;
        d61 = d60 & 8191;
        d7 = B.JSInt_methods._shrOtherPositive$1(d6, 13) + B.JSInt_methods._shrOtherPositive$1(d60, 13) + h0 * r7 + h1 * r6 + h2 * r5 + h3 * r4 + h4 * r3;
        d70 = (d7 & 8191) + h5 * r2 + h6 * r1 + h7 * r0 + h8 * t3 + h9 * t4;
        d71 = d70 & 8191;
        d8 = B.JSInt_methods._shrOtherPositive$1(d7, 13) + B.JSInt_methods._shrOtherPositive$1(d70, 13) + h0 * r8 + h1 * r7 + h2 * r6 + h3 * r5 + h4 * r4;
        d80 = (d8 & 8191) + h5 * r3 + h6 * r2 + h7 * r1 + h8 * r0 + h9 * t3;
        d81 = d80 & 8191;
        d9 = B.JSInt_methods._shrOtherPositive$1(d8, 13) + B.JSInt_methods._shrOtherPositive$1(d80, 13) + h0 * r9 + h1 * r8 + h2 * r7 + h3 * r6 + h4 * r5;
        d90 = (d9 & 8191) + h5 * r4 + h6 * r3 + h7 * r2 + h8 * r1 + h9 * r0;
        c = B.JSInt_methods._shrOtherPositive$1(d9, 13) + B.JSInt_methods._shrOtherPositive$1(d90, 13);
        d9 = d90 & 8191;
        c = (((c << 2 >>> 0) + c | 0) >>> 0) + (d00 & 8191) | 0;
        d0 = c & 8191;
        d1 = (d10 & 8191) + (c >>> 13);
        mpos += 16;
        bytes -= 16;
      }
      B.JSArray_methods.$indexSet(t1, 0, h0);
      B.JSArray_methods.$indexSet(t1, 1, h1);
      B.JSArray_methods.$indexSet(t1, 2, h2);
      B.JSArray_methods.$indexSet(t1, 3, h3);
      B.JSArray_methods.$indexSet(t1, 4, h4);
      B.JSArray_methods.$indexSet(t1, 5, h5);
      B.JSArray_methods.$indexSet(t1, 6, h6);
      B.JSArray_methods.$indexSet(t1, 7, h7);
      B.JSArray_methods.$indexSet(t1, 8, h8);
      B.JSArray_methods.$indexSet(t1, 9, h9);
    },
    finish$1(mac) {
      var g, t1, t2, i, c, mask, f, t3, _this = this;
      type$.List_int._as(mac);
      g = A.List_List$filled(10, 0, false, type$.int);
      t1 = _this._leftover;
      if (t1 !== 0) {
        t2 = _this._buffer;
        i = t1 + 1;
        B.JSArray_methods.$indexSet(t2, t1, 1);
        for (; i < 16; ++i)
          B.JSArray_methods.$indexSet(t2, i, 0);
        _this._fin = 1;
        _this._blocks$3(t2, 0, 16);
      }
      t1 = _this._h;
      t2 = t1[1];
      c = B.JSInt_methods._shrOtherPositive$1(t2, 13);
      B.JSArray_methods.$indexSet(t1, 1, t2 & 8191);
      for (i = 2; i < 10; ++i) {
        B.JSArray_methods.$indexSet(t1, i, t1[i] + c);
        t2 = t1[i];
        c = B.JSInt_methods._shrOtherPositive$1(t2, 13);
        B.JSArray_methods.$indexSet(t1, i, t2 & 8191);
      }
      B.JSArray_methods.$indexSet(t1, 0, t1[0] + c * 5);
      t2 = t1[0];
      c = B.JSInt_methods._shrOtherPositive$1(t2, 13);
      B.JSArray_methods.$indexSet(t1, 0, t2 & 8191);
      B.JSArray_methods.$indexSet(t1, 1, t1[1] + c);
      t2 = t1[1];
      c = B.JSInt_methods._shrOtherPositive$1(t2, 13);
      B.JSArray_methods.$indexSet(t1, 1, t2 & 8191);
      B.JSArray_methods.$indexSet(t1, 2, t1[2] + c);
      B.JSArray_methods.$indexSet(g, 0, t1[0] + 5);
      t2 = g[0];
      c = B.JSInt_methods._shrOtherPositive$1(t2, 13);
      B.JSArray_methods.$indexSet(g, 0, t2 & 8191);
      for (i = 1; i < 10; ++i) {
        B.JSArray_methods.$indexSet(g, i, t1[i] + c);
        t2 = g[i];
        c = B.JSInt_methods._shrOtherPositive$1(t2, 13);
        B.JSArray_methods.$indexSet(g, i, t2 & 8191);
      }
      B.JSArray_methods.$indexSet(g, 9, g[9] - 8192);
      mask = ((c ^ 1) >>> 0) - 1;
      for (i = 0; i < 10; ++i)
        B.JSArray_methods.$indexSet(g, i, (g[i] & mask) >>> 0);
      mask = ~mask;
      for (i = 0; i < 10; ++i)
        B.JSArray_methods.$indexSet(t1, i, (t1[i] & mask | g[i]) >>> 0);
      B.JSArray_methods.$indexSet(t1, 0, (t1[0] | t1[1] << 13) & 65535);
      B.JSArray_methods.$indexSet(t1, 1, (B.JSInt_methods._shrOtherPositive$1(t1[1], 3) | t1[2] << 10) & 65535);
      B.JSArray_methods.$indexSet(t1, 2, (B.JSInt_methods._shrOtherPositive$1(t1[2], 6) | t1[3] << 7) & 65535);
      B.JSArray_methods.$indexSet(t1, 3, (B.JSInt_methods._shrOtherPositive$1(t1[3], 9) | t1[4] << 4) & 65535);
      B.JSArray_methods.$indexSet(t1, 4, (B.JSInt_methods._shrOtherPositive$1(t1[4], 12) | t1[5] << 1 | t1[6] << 14) & 65535);
      B.JSArray_methods.$indexSet(t1, 5, (B.JSInt_methods._shrOtherPositive$1(t1[6], 2) | t1[7] << 11) & 65535);
      B.JSArray_methods.$indexSet(t1, 6, (B.JSInt_methods._shrOtherPositive$1(t1[7], 5) | t1[8] << 8) & 65535);
      B.JSArray_methods.$indexSet(t1, 7, (B.JSInt_methods._shrOtherPositive$1(t1[8], 8) | t1[9] << 5) & 65535);
      t2 = _this._pad;
      f = t1[0] + t2[0];
      B.JSArray_methods.$indexSet(t1, 0, f & 65535);
      for (i = 1; i < 8; ++i) {
        f = (((t1[i] + t2[i] | 0) >>> 0) + B.JSInt_methods._shrOtherPositive$1(f, 16) | 0) >>> 0;
        B.JSArray_methods.$indexSet(t1, i, f & 65535);
      }
      for (i = 0; i < 8; ++i) {
        t2 = t1[i];
        t3 = i * 2;
        B.JSArray_methods.$indexSet(mac, t3, t2 & 255);
        B.JSArray_methods.$indexSet(mac, t3 + 1, B.JSInt_methods._shrOtherPositive$1(t2, 8) & 255);
      }
      _this._finished = true;
      return _this;
    },
    update$1(data) {
      var bytes, t1, want, i, t2, mpos, t3, _this = this;
      type$.List_int._as(data);
      bytes = data.length;
      t1 = _this._leftover;
      if (t1 !== 0) {
        want = 16 - t1;
        if (want > bytes)
          want = bytes;
        for (t1 = _this._buffer, i = 0; i < want; ++i) {
          t2 = _this._leftover;
          if (!(i < data.length))
            return A.ioore(data, i);
          B.JSArray_methods.$indexSet(t1, t2 + i, data[i] & 255);
        }
        bytes -= want;
        if ((_this._leftover += want) < 16)
          return _this;
        _this._blocks$3(t1, 0, 16);
        _this._leftover = 0;
        mpos = want;
      } else
        mpos = 0;
      if (bytes >= 16) {
        want = bytes - B.JSInt_methods.$mod(bytes, 16);
        _this._blocks$3(data, mpos, want);
        mpos += want;
        bytes -= want;
      }
      if (bytes > 0) {
        for (t1 = _this._buffer, i = 0; i < bytes; ++i) {
          t2 = _this._leftover;
          t3 = mpos + i;
          if (!(t3 >= 0 && t3 < data.length))
            return A.ioore(data, t3);
          B.JSArray_methods.$indexSet(t1, t2 + i, data[t3] & 255);
        }
        _this._leftover += bytes;
      }
      return _this;
    }
  };
  A.FortunaPRNG.prototype = {
    get$_key() {
      var result,
        value = this.__FortunaPRNG__key_FI;
      if (value === $) {
        result = A.List_List$filled(32, 0, false, type$.int);
        this.__FortunaPRNG__key_FI !== $ && A.throwLateFieldADI("_key");
        this.__FortunaPRNG__key_FI = result;
        value = result;
      }
      return value;
    },
    get$_counter() {
      var result,
        value = this.__FortunaPRNG__counter_FI;
      if (value === $) {
        result = A.List_List$filled(16, 0, false, type$.int);
        this.__FortunaPRNG__counter_FI !== $ && A.throwLateFieldADI("_counter");
        this.__FortunaPRNG__counter_FI = result;
        value = result;
      }
      return value;
    },
    _generateBlocks$2(out, n) {
      var t2, tempBlock, t3, i, t4, t5, t6, ctr, newKey, _this = this,
        t1 = type$.List_int;
      t1._as(out);
      if (n === 0)
        return;
      if (n > 65536)
        throw A.wrapException(B.CryptoException_lMb);
      t2 = type$.int;
      tempBlock = A.List_List$filled(32, 0, false, t2);
      for (t3 = _this._zeroBlock, i = 0; i < n; ++i) {
        t4 = _this.get$_counter();
        t5 = _this.get$_key();
        t1._as(t4);
        t1._as(t3);
        t1._as(t5);
        t1._as(tempBlock);
        t6 = new A.AES();
        t6.__AES__keyLen_A = 32;
        t6.setKey$2(t5, false);
        ctr = new A.CTR();
        ctr.__CTR__counter_F = t1._as(A.List_List$filled(16, 0, false, t2));
        ctr.__CTR__buffer_F = t1._as(A.List_List$filled(16, 0, false, t2));
        ctr.setCipher$2(t6, t3);
        ctr.streamXOR$2(t4, tempBlock);
        t4 = i * 16;
        B.JSArray_methods.setRange$3(out, t4, t4 + 16, tempBlock);
        _this._count$0();
      }
      newKey = A.List_List$filled(32, 0, false, t2);
      t2 = _this.get$_counter();
      t4 = _this.get$_key();
      t1._as(t2);
      t1._as(t3);
      t1._as(t4);
      t1._as(tempBlock);
      A.CTR$(A.AES$(t4), t3).streamXOR$2(t2, tempBlock);
      B.JSArray_methods.setRange$3(newKey, 0, 16, tempBlock);
      _this._count$0();
      t2 = _this.get$_counter();
      t4 = _this.get$_key();
      t1._as(t2);
      A.CTR$(A.AES$(t1._as(t4)), t3).streamXOR$2(t2, tempBlock);
      B.JSArray_methods.setRange$3(newKey, 16, 32, tempBlock);
      _this._count$0();
      B.JSArray_methods.setAll$2(_this.get$_key(), 0, newKey);
    },
    _count$0() {
      var i, t1;
      for (i = 0; this.get$_counter(), i < 16; ++i) {
        t1 = this.get$_counter();
        B.JSArray_methods.$indexSet(t1, i, t1[i] + 1);
      }
    },
    nextBytes$1($length) {
      var t2, i, t3, out0, _this = this,
        t1 = type$.int,
        out = A.List_List$filled($length, 0, false, t1);
      for (t2 = _this._out, i = 0; i < $length; ++i) {
        t3 = _this._c;
        if (t3 === 16) {
          out0 = A.List_List$filled(16, 0, false, t1);
          _this._generateBlocks$2(out0, 1);
          B.JSArray_methods.setAll$2(t2, 0, out0);
          t3 = _this._c = 0;
        }
        _this._c = t3 + 1;
        if (!(t3 < 16))
          return A.ioore(t2, t3);
        B.JSArray_methods.$indexSet(out, i, t2[t3]);
      }
      return out;
    }
  };
  A.SchnorrkelPublicKey.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.SchnorrkelPublicKey))
        return false;
      return A.BytesUtils_bytesEqual(this._keys$_publicKey, other._keys$_publicKey);
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this._keys$_publicKey, B.List_empty1);
    }
  };
  A.QuickCrypto__generateRandom_closure.prototype = {
    call$1($length) {
      return $.$get$QuickCrypto_prng().nextBytes$1($length);
    },
    $signature: 53
  };
  A.BlockchainUtilsException.prototype = {
    toString$0(_) {
      var t2, infos,
        t1 = this.details;
      if (t1 == null)
        t1 = null;
      else {
        t1 = t1.get$entries();
        t1 = t1.where$1(t1, new A.BlockchainUtilsException_toString_closure());
      }
      if (t1 == null)
        t1 = A._setArrayType([], type$.JSArray_MapEntry_String_dynamic);
      t2 = type$.String;
      infos = A.Map_Map$fromEntries(t1, t2, type$.dynamic);
      if (infos.__js_helper$_length === 0)
        return this.message;
      t1 = A._instanceType(infos)._eval$1("LinkedHashMapEntriesIterable<1,2>");
      return this.message + " " + A.MappedIterable_MappedIterable(new A.LinkedHashMapEntriesIterable(infos, t1), t1._eval$1("String(Iterable.E)")._as(new A.BlockchainUtilsException_toString_closure0()), t1._eval$1("Iterable.E"), t2).join$1(0, ", ");
    },
    $isException: 1
  };
  A.BlockchainUtilsException_toString_closure.prototype = {
    call$1(element) {
      return type$.MapEntry_String_dynamic._as(element).value != null;
    },
    $signature: 137
  };
  A.BlockchainUtilsException_toString_closure0.prototype = {
    call$1(e) {
      type$.MapEntry_String_dynamic._as(e);
      return A.S(e.key) + ": " + A.S(e.value);
    },
    $signature: 138
  };
  A.ArgumentException.prototype = {};
  A.MessageException.prototype = {};
  A.RPCError.prototype = {
    toString$0(_) {
      var t2, infos, msg, _this = this,
        _s19_ = "RPCError: got code ",
        t1 = _this.details;
      if (t1 == null)
        t1 = null;
      else {
        t1 = t1.get$entries();
        t1 = t1.where$1(t1, new A.RPCError_toString_closure());
      }
      if (t1 == null)
        t1 = A._setArrayType([], type$.JSArray_MapEntry_String_dynamic);
      t2 = type$.String;
      infos = A.Map_Map$fromEntries(t1, t2, type$.dynamic);
      if (infos.__js_helper$_length === 0) {
        t1 = _this.errorCode;
        if (t1 == null)
          return "RPCError: " + _this.message;
        return _s19_ + A.S(t1) + ' with message "' + _this.message + '".';
      }
      t1 = A._instanceType(infos)._eval$1("LinkedHashMapEntriesIterable<1,2>");
      msg = _this.message + " " + A.MappedIterable_MappedIterable(new A.LinkedHashMapEntriesIterable(infos, t1), t1._eval$1("String(Iterable.E)")._as(new A.RPCError_toString_closure0()), t1._eval$1("Iterable.E"), t2).join$1(0, ", ");
      t1 = _this.errorCode;
      if (t1 == null)
        return "RPCError: " + msg;
      return _s19_ + A.S(t1) + ' with message "' + msg + '".';
    }
  };
  A.RPCError_toString_closure.prototype = {
    call$1(element) {
      return type$.MapEntry_String_dynamic._as(element).value != null;
    },
    $signature: 137
  };
  A.RPCError_toString_closure0.prototype = {
    call$1(e) {
      type$.MapEntry_String_dynamic._as(e);
      return A.S(e.key) + ": " + A.S(e.value);
    },
    $signature: 138
  };
  A._Hex.prototype = {
    encode$2$lowerCase(data, lowerCase) {
      var table, t1, $length, result, t2, i, byte, t3, t4;
      type$.List_int._as(data);
      A.BytesUtils_validateBytes(data, "Invalid hex bytes");
      table = lowerCase ? B.List_5cT : B.List_OqH;
      t1 = J.getInterceptor$asx(data);
      $length = t1.get$length(data);
      result = A.List_List$filled($length * 2, "", false, type$.String);
      for (t2 = table.length, i = 0; i < $length; ++i) {
        byte = t1.$index(data, i);
        t3 = i * 2;
        t4 = B.JSInt_methods._shrOtherPositive$1(byte, 4);
        if (!(t4 < t2))
          return A.ioore(table, t4);
        B.JSArray_methods.$indexSet(result, t3, table[t4]);
        t4 = byte & 15;
        if (!(t4 < t2))
          return A.ioore(table, t4);
        B.JSArray_methods.$indexSet(result, t3 + 1, table[t4]);
      }
      return B.JSArray_methods.join$0(result);
    },
    decode$1(hex) {
      var result, haveBad, i, t2, v0, v1,
        t1 = hex.length;
      if (t1 === 0) {
        t1 = J.JSArray_JSArray$fixed(0, type$.int);
        return t1;
      }
      if ((t1 & 1) !== 0)
        throw A.wrapException(B.ArgumentException_Cwt);
      result = A.List_List$filled(B.JSInt_methods._tdivFast$1(t1, 2), 0, false, type$.int);
      for (haveBad = false, i = 0; i < t1; i += 2) {
        t2 = hex.charCodeAt(i);
        v0 = t2 < 128 ? B.List_8ft[t2] : 256;
        t2 = i + 1;
        if (!(t2 < t1))
          return A.ioore(hex, t2);
        t2 = hex.charCodeAt(t2);
        v1 = t2 < 128 ? B.List_8ft[t2] : 256;
        B.JSArray_methods.$indexSet(result, B.JSInt_methods._tdivFast$1(i, 2), (v0 << 4 | v1) & 255);
        haveBad = B.JSBool_methods.$or(haveBad, B.JSBool_methods.$or(v0 === 256, v1 === 256));
      }
      if (haveBad)
        throw A.wrapException(B.ArgumentException_EMh);
      return result;
    }
  };
  A.LayoutByteReader.prototype = {
    get$length(_) {
      return this._bytes.length;
    },
    getCompactLengthInfos$2$sign(offset, sign) {
      var $length = A.LayoutSerializationUtils_decodeLength(this._maxOffset$2(offset, 12), false),
        t1 = $length.item2;
      if (!t1.get$isValidInt())
        throw A.wrapException(B.LayoutException_tNL);
      return new A.Tuple($length.item1, J.toInt$0$n(t1), type$.Tuple_int_int);
    },
    getCompactLengthInfos$1(offset) {
      return this.getCompactLengthInfos$2$sign(offset, false);
    },
    _maxOffset$2(offset, need) {
      var t1 = this._bytes,
        t2 = offset + need;
      if (t1.length >= t2)
        return B.JSArray_methods.sublist$2(t1, offset, t2);
      return B.JSArray_methods.sublist$1(t1, offset);
    },
    getCompactTotalLenght$1(offset) {
      var decode, decode0, t1, dataOffset, exception;
      try {
        decode0 = A.LayoutSerializationUtils_decodeLength(this._maxOffset$2(offset, 60), false);
        t1 = decode0.item2;
        if (!t1.get$isValidInt())
          A.throwExpression(B.MessageException_psE);
        dataOffset = decode0.item1;
        decode = new A.Tuple(dataOffset, J.toInt$0$n(t1) + dataOffset, type$.Tuple_int_int);
        return decode;
      } catch (exception) {
        throw exception;
      }
    }
  };
  A.LayoutByteWriter.prototype = {
    get$length(_) {
      return this._byte_handler$_buffer._bytes.length;
    },
    setAll$2(_, index, bytes) {
      var t1, t2, t3;
      type$.List_int._as(bytes);
      t1 = index + J.get$length$asx(bytes);
      if (this.growable) {
        t2 = this._byte_handler$_buffer._bytes;
        t3 = t2.length;
        if (t1 > t3)
          B.JSArray_methods.addAll$1(t2, A.List_List$filled(t1 - t3, 0, true, type$.int));
      }
      B.JSArray_methods.setAll$2(this._byte_handler$_buffer._bytes, index, bytes);
    }
  };
  A.LayoutConst_boolean_closure0.prototype = {
    call$1(data) {
      var t1;
      A._asInt(data);
      t1 = data !== 0;
      if (t1 && data !== 1)
        throw A.wrapException(A.LayoutException$("Invalid boolean integer value.", A.LinkedHashMap_LinkedHashMap$_literal(["value", data, "property", this.property], type$.String, type$.dynamic)));
      return t1;
    },
    $signature: 30
  };
  A.LayoutConst_boolean_closure.prototype = {
    call$1(src) {
      return A._asBool(src) ? 1 : 0;
    },
    $signature: 261
  };
  A.LayoutConst_rustEnum_closure.prototype = {
    call$2(index, variant) {
      var t1, span, rv;
      type$.Layout_dynamic._as(variant);
      t1 = this.unionLayout;
      span = t1.span;
      if (0 > span) {
        span = variant.span;
        if (0 <= span && t1.usesPrefixDiscriminator)
          span += t1.discriminator.layout.span;
      }
      rv = new A.VariantLayout(t1, index, variant, span, variant.property);
      t1._union$_registry.$indexSet(0, index, rv);
      return rv;
    },
    $signature: 259
  };
  A.LayoutConst_rustEnum_closure1.prototype = {
    call$1(value) {
      var t1, t2;
      type$.Map_String_dynamic._as(value);
      if (this.useKeyAndValue) {
        t1 = value.get$keys();
        t1 = t1.get$first(t1);
        t2 = value.get$values();
        return A.LinkedHashMap_LinkedHashMap$_literal(["key", t1, "value", t2.get$first(t2)], type$.String, type$.dynamic);
      }
      return value;
    },
    $signature: 44
  };
  A.LayoutConst_rustEnum_closure0.prototype = {
    call$1(src) {
      return type$.Map_String_dynamic._as(src);
    },
    $signature: 44
  };
  A.LayoutConst_compactString_closure0.prototype = {
    call$1(bytes) {
      return A.StringUtils_decode(type$.List_int._as(bytes), false, B.StringEncoding_1);
    },
    $signature: 17
  };
  A.LayoutConst_compactString_closure.prototype = {
    call$1(src) {
      return A.StringUtils_encode(A._asString(src), B.StringEncoding_1);
    },
    $signature: 142
  };
  A.LayoutConst_compactMap_closure0.prototype = {
    call$1(data) {
      var t1 = this.K,
        t2 = this.V;
      return A.Map_Map$fromEntries(J.cast$1$0$ax(type$.List_dynamic._as(type$.Map_String_dynamic._as(data).$index(0, "values")), t1._eval$1("@<0>")._bind$1(t2)._eval$1("MapEntry<1,2>")), t1, t2);
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("Map<1,2>(Map<String,@>)");
    }
  };
  A.LayoutConst_compactMap_closure.prototype = {
    call$1(values) {
      var t1 = this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("Map<1,2>")._as(values).get$entries();
      return A.LinkedHashMap_LinkedHashMap$_literal(["values", t1.toList$0(t1)], type$.String, type$.dynamic);
    },
    $signature() {
      return this.K._eval$1("@<0>")._bind$1(this.V)._eval$1("Map<String,@>(Map<1,2>)");
    }
  };
  A.LayoutConst_compactVec_closure.prototype = {
    call$1(data) {
      return A.LinkedHashMap_LinkedHashMap$_literal(["values", this.T._eval$1("List<0>")._as(data)], type$.String, type$.dynamic);
    },
    $signature() {
      return this.T._eval$1("Map<String,@>(List<0>)");
    }
  };
  A.LayoutConst_compactVec_closure0.prototype = {
    call$1(data) {
      return J.cast$1$0$ax(type$.List_dynamic._as(type$.Map_String_dynamic._as(data).$index(0, "values")), this.T);
    },
    $signature() {
      return this.T._eval$1("List<0>(Map<String,@>)");
    }
  };
  A.LayoutConst_bcsString_closure0.prototype = {
    call$1(bytes) {
      return A.StringUtils_decode(type$.List_int._as(bytes), false, B.StringEncoding_1);
    },
    $signature: 17
  };
  A.LayoutConst_bcsString_closure.prototype = {
    call$1(src) {
      return A.StringUtils_encode(A._asString(src), B.StringEncoding_1);
    },
    $signature: 142
  };
  A.LayoutConst_bcsVector_closure.prototype = {
    call$1(data) {
      return A.LinkedHashMap_LinkedHashMap$_literal(["values", this.T._eval$1("List<0>")._as(data)], type$.String, type$.dynamic);
    },
    $signature() {
      return this.T._eval$1("Map<String,@>(List<0>)");
    }
  };
  A.LayoutConst_bcsVector_closure0.prototype = {
    call$1(data) {
      return J.cast$1$0$ax(type$.List_dynamic._as(type$.Map_String_dynamic._as(data).$index(0, "values")), this.T);
    },
    $signature() {
      return this.T._eval$1("List<0>(Map<String,@>)");
    }
  };
  A.LayoutConst_bcsLazyEnum_closure.prototype = {
    call$2(index, variant) {
      var t1, rv;
      type$.LazyVariantModel_dynamic._as(variant);
      t1 = this.unionLayout;
      rv = new A.LazyVariantLayout(t1, variant, t1.span, variant.property);
      t1._registry.$indexSet(0, variant.index, rv);
      return rv;
    },
    $signature: 258
  };
  A.LayoutConst_bcsLazyEnum_closure1.prototype = {
    call$1(value) {
      var t1, t2;
      type$.Map_String_dynamic._as(value);
      t1 = value.get$keys();
      t1 = t1.get$first(t1);
      t2 = value.get$values();
      return A.LinkedHashMap_LinkedHashMap$_literal(["key", t1, "value", t2.get$first(t2)], type$.String, type$.dynamic);
    },
    $signature: 44
  };
  A.LayoutConst_bcsLazyEnum_closure0.prototype = {
    call$1(src) {
      return type$.Map_String_dynamic._as(src);
    },
    $signature: 44
  };
  A.Layout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var t1;
      A._instanceType(this)._eval$1("Layout.T?")._as(source);
      t1 = this.span;
      if (t1 < 0)
        throw A.wrapException(A.LayoutException$("Invalid layout span.", A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property, "span", t1], type$.String, type$.dynamic)));
      return t1;
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    deserialize$1(bytes) {
      return this.decode$1(new A.LayoutByteReader(A.List_List$unmodifiable(type$.List_int._as(bytes), type$.int)));
    }
  };
  A.LayoutDecodeResult.prototype = {};
  A.SequenceLayout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var t1, span, decodeLength, counter, decode, t2, idx, t3, _this = this;
      _this.$ti._eval$1("List<1>?")._as(source);
      t1 = _this.span;
      if (t1 >= 0)
        return t1;
      span = 0;
      t1 = _this.count;
      if (t1 instanceof A.CompactOffsetLayout) {
        decodeLength = bytes.getCompactLengthInfos$1(offset);
        span = decodeLength.item1;
        counter = decodeLength.item2;
      } else if (t1 instanceof A.LEB128U32OffsetLayout) {
        bytes.toString;
        decode = t1.layout.decode$2$offset(bytes, offset);
        span = decode.consumed;
        counter = decode.value;
      } else {
        bytes.toString;
        counter = A._asInt(t1.decode$2$offset(bytes, offset).value);
      }
      t1 = _this.elementLayout;
      t2 = t1.span;
      if (t2 > 0)
        span += counter * t2;
      else
        for (t2 = source == null, idx = 0; idx < counter;) {
          t3 = t2 ? null : J.$index$asx(source, idx);
          span += t1.getSpan$3$offset$source(bytes, offset + span, t3);
          ++idx;
        }
      return span;
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    decode$2$offset(bytes, offset) {
      var decodeLength, startOffset, count, decode, t3, i, t4,
        t1 = this.$ti,
        decoded = A._setArrayType([], t1._eval$1("JSArray<1>")),
        t2 = this.count;
      if (t2 instanceof A.CompactOffsetLayout) {
        decodeLength = bytes.getCompactLengthInfos$1(offset);
        t2 = decodeLength.item1;
        if (typeof t2 !== "number")
          return A.iae(t2);
        startOffset = offset + t2;
        count = decodeLength.item2;
      } else if (t2 instanceof A.LEB128U32OffsetLayout) {
        decode = t2.layout.decode$2$offset(bytes, offset);
        startOffset = offset + decode.consumed;
        count = decode.value;
      } else {
        count = A._asInt(t2.decode$2$offset(bytes, offset).value);
        startOffset = offset;
      }
      for (t2 = this.elementLayout, t3 = t1._precomputed1, i = 0; i < count;) {
        t4 = t3._as(t2.decode$2$offset(bytes, startOffset).value);
        B.JSArray_methods.add$1(decoded, t4);
        startOffset += t2.getSpan$3$offset$source(bytes, startOffset, t4);
        ++i;
      }
      return new A.LayoutDecodeResult(startOffset - offset, decoded, t1._eval$1("LayoutDecodeResult<List<1>>"));
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1, span;
      this.$ti._eval$1("List<1>")._as(source);
      t1 = this.count;
      if (t1 instanceof A.CompactOffsetLayout)
        span = t1.encode$3$offset(J.get$length$asx(source), writer, offset);
      else if (t1 instanceof A.LEB128U32OffsetLayout)
        span = t1.encode$3$offset(J.get$length$asx(source), writer, offset);
      else {
        t1.encode$3$offset(J.get$length$asx(source), writer, offset);
        span = 0;
      }
      return J.fold$1$2$ax(source, span, new A.SequenceLayout_encode_closure(this, writer, offset), type$.int);
    }
  };
  A.SequenceLayout_encode_closure.prototype = {
    call$2(span, v) {
      var t1;
      A._asInt(span);
      t1 = this.$this;
      return span + t1.elementLayout.encode$3$offset(t1.$ti._precomputed1._as(v), this.writer, this.offset + span);
    },
    $signature() {
      return this.$this.$ti._eval$1("int(int,1)");
    }
  };
  A.CompactOffsetLayout.prototype = {
    isCount$0() {
      return true;
    },
    decode$2$offset(bytes, offset) {
      throw A.wrapException(A.UnimplementedError$(null));
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var encodeLength = B.C_SubstrateScaleCUintEncoder.encode$1(B.JSInt_methods.toString$0(A._asInt(source)));
      writer.setAll$2(0, offset, encodeLength);
      return encodeLength.length;
    }
  };
  A.CompactBytes.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      type$.nullable_List_int._as(source);
      return bytes.getCompactTotalLenght$1(offset).item2;
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    decode$2$offset(bytes, offset) {
      var t2,
        decode = bytes.getCompactTotalLenght$1(offset),
        t1 = decode.item1;
      if (typeof t1 !== "number")
        return A.iae(t1);
      t2 = decode.item2;
      if (typeof t2 !== "number")
        return A.iae(t2);
      return new A.LayoutDecodeResult(t2, B.JSArray_methods.sublist$2(bytes._bytes, A._asInt(offset + t1), A._asIntQ(offset + t2)), type$.LayoutDecodeResult_List_int);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1, $length;
      type$.List_int._as(source);
      t1 = J.getInterceptor$asx(source);
      $length = $.$get$CompactBytes__lengthCodec().encode$3$offset(t1.get$length(source), writer, offset);
      writer.setAll$2(0, offset + $length, source);
      return t1.get$length(source) + $length;
    }
  };
  A.CustomLayout.prototype = {
    decode$2$offset(bytes, offset) {
      var decodeBytes = this.layout.decode$2$offset(bytes, offset);
      return new A.LayoutDecodeResult(decodeBytes.consumed, this.decoder.call$1(decodeBytes.value), this.$ti._eval$1("LayoutDecodeResult<2>"));
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      return this.layout.encode$3$offset(this.encoder.call$1(this.$ti._rest[1]._as(source)), writer, offset);
    },
    getSpan$3$offset$source(bytes, offset, source) {
      var t1;
      this.$ti._eval$1("2?")._as(source);
      t1 = source == null ? null : this.encoder.call$1(source);
      return this.layout.getSpan$3$offset$source(bytes, offset, t1);
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    }
  };
  A.LazyVariantModel.prototype = {};
  A.LazyUnion.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var t1, vlo;
      type$.nullable_Map_String_dynamic._as(source);
      t1 = this.span;
      if (t1 >= 0)
        return t1;
      bytes.toString;
      vlo = this.getVariant$2$offset(bytes, offset);
      if (vlo == null)
        throw A.wrapException(A.LayoutException$(string$.unable, A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property], type$.String, type$.dynamic)));
      return vlo.getSpan$3$offset$source(bytes, offset, source);
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    defaultGetSourceVariant$1(source) {
      var t1, vlo, t2, t3, _this = this;
      type$.Map_String_dynamic._as(source);
      t1 = _this.discriminator.property;
      if (source.containsKey$1(t1)) {
        vlo = _this._registry.$index(0, source.$index(0, t1));
        if (vlo != null && source.containsKey$1(vlo.property))
          return vlo;
      } else
        for (t2 = _this._registry, t3 = new A.LinkedHashMapKeyIterator(t2, t2._modifications, t2._first, A._instanceType(t2)._eval$1("LinkedHashMapKeyIterator<1>")); t3.moveNext$0();) {
          vlo = t2.$index(0, t3.__js_helper$_current);
          if (source.containsKey$1(vlo == null ? null : vlo.property))
            return vlo;
        }
      t2 = source.get$keys();
      t3 = type$.String;
      throw A.wrapException(A.LayoutException$("unable to infer source variant", A.LinkedHashMap_LinkedHashMap$_literal(["property", _this.property, "discriminator", t1, "sources", t2.map$1$1(t2, new A.LazyUnion_defaultGetSourceVariant_closure(), t3).join$1(0, ", ")], t3, type$.dynamic)));
    },
    decode$2$offset(bytes, offset) {
      var decode,
        discr = this.discriminator.layout.decode$2$offset(bytes, offset),
        t1 = discr.value,
        clo = this._registry.$index(0, t1);
      if (clo == null)
        throw A.wrapException(A.LayoutException$("unable to determine layout.", A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property, "layout", t1], type$.String, type$.dynamic)));
      decode = clo.decode$2$offset(bytes, offset);
      return new A.LayoutDecodeResult(discr.consumed + decode.consumed, decode.value, type$.LayoutDecodeResult_Map_String_dynamic);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var vlo;
      type$.Map_String_dynamic._as(source);
      vlo = this.defaultGetSourceVariant$1(source);
      if (vlo == null)
        throw A.wrapException(A.LayoutException$("unable to determine source layout.", A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property, "source", source], type$.String, type$.dynamic)));
      return vlo.encode$3$offset(source, writer, offset);
    },
    getVariant$2$offset(variantBytes, offset) {
      return this._registry.$index(0, this.discriminator.layout.decode$2$offset(variantBytes, offset).value);
    }
  };
  A.LazyUnion_defaultGetSourceVariant_closure.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 4
  };
  A.LazyVariantLayout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var t1, contentOffset, t2, _this = this;
      type$.nullable_Map_String_dynamic._as(source);
      t1 = _this.span;
      if (!B.JSInt_methods.get$isNegative(t1))
        return t1;
      t1 = _this.union.discriminator.layout;
      contentOffset = t1.span;
      if (B.JSInt_methods.get$isNegative(contentOffset))
        contentOffset = t1.getSpan$3$offset$source(bytes, offset, _this.layout.index);
      t1 = _this.layout;
      t1 = t1.layout.call$1$property(t1.property);
      t2 = source == null ? null : source.$index(0, _this.property);
      return contentOffset + t1.getSpan$3$offset$source(bytes, offset + contentOffset, t2);
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    decode$2$offset(bytes, offset) {
      var contentOffset, dest, result, _this = this,
        t1 = _this.union;
      if (_this !== t1.getVariant$2$offset(bytes, offset))
        throw A.wrapException(A.LayoutException$("variant mismatch", A.LinkedHashMap_LinkedHashMap$_literal(["property", _this.property], type$.String, type$.dynamic)));
      t1 = t1.discriminator.layout;
      contentOffset = t1.span;
      if (B.JSInt_methods.get$isNegative(contentOffset))
        contentOffset = t1.decode$2$offset(bytes, offset).consumed;
      dest = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      t1 = _this.layout;
      result = t1.layout.call$1$property(t1.property).decode$2$offset(bytes, offset + contentOffset);
      t1 = _this.property;
      t1.toString;
      dest.$indexSet(0, t1, result.value);
      return new A.LayoutDecodeResult(result.consumed, dest, type$.LayoutDecodeResult_Map_String_dynamic);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1, t2, contentOffset, t3, t4, layout, span, _this = this;
      type$.Map_String_dynamic._as(source);
      t1 = _this.union;
      t2 = t1.discriminator.layout;
      contentOffset = t2.span;
      if (B.JSInt_methods.get$isNegative(contentOffset))
        contentOffset = t2.encode$3$offset(_this.layout.index, writer, offset);
      t3 = _this.property;
      if (!source.containsKey$1(t3))
        throw A.wrapException(A.LayoutException$("variant lacks property", A.LinkedHashMap_LinkedHashMap$_literal(["property", t3], type$.String, type$.dynamic)));
      t4 = _this.layout;
      t2.encode$3$offset(t4.index, writer, offset);
      layout = t4.layout.call$1$property(t4.property);
      t4 = offset + contentOffset;
      layout.encode$3$offset(source.$index(0, t3), writer, t4);
      span = contentOffset + layout.getSpan$3$offset$source(writer._byte_handler$_buffer, t4, source.$index(0, t3));
      t1 = t1.span;
      if (t1 >= 0 && span > t1)
        throw A.wrapException(A.LayoutException$(string$.encode, A.LinkedHashMap_LinkedHashMap$_literal(["property", t3], type$.String, type$.dynamic)));
      return span;
    }
  };
  A.LEB128IntLayout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var t1, t2, span, t3;
      A._asIntQ(source);
      t1 = bytes._bytes;
      t2 = t1.length;
      span = 0;
      while (true) {
        t3 = offset + span;
        if (!(t3 >= 0 && t3 < t2))
          return A.ioore(t1, t3);
        if (!((t1[t3] & 128) !== 0))
          break;
        ++span;
      }
      return span + 1;
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    getSpan$2$offset(bytes, offset) {
      return this.getSpan$3$offset$source(bytes, offset, null);
    },
    decode$2$offset(bytes, offset) {
      var span = this.getSpan$2$offset(bytes, offset);
      return new A.LayoutDecodeResult(span, A.LEB128IntLayout_readVarint(B.JSArray_methods.sublist$2(bytes._bytes, offset, offset + span)), type$.LayoutDecodeResult_int);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var encode;
      A._asInt(source);
      this.layout.validate$1(source);
      encode = A.LEB128IntLayout_writeVarint(source);
      writer.setAll$2(0, offset, encode);
      return encode.length;
    }
  };
  A.LEB128U32OffsetLayout.prototype = {
    isCount$0() {
      return true;
    },
    decode$2$offset(bytes, offset) {
      return this.layout.decode$2$offset(bytes, offset);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var encodeLength = A.LEB128IntLayout_writeVarint(A._asInt(source));
      writer.setAll$2(0, offset, encodeLength);
      return encodeLength.length;
    },
    getSpan$3$offset$source(bytes, offset, source) {
      return this.layout.getSpan$3$offset$source(bytes, offset, A._asIntQ(source));
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    }
  };
  A.MapEntryLayout.prototype = {
    decode$2$offset(bytes, offset) {
      var t1 = this.keyLayout,
        key = t1.decode$2$offset(bytes, offset),
        t2 = key.value,
        value = this.valueLayout.decode$2$offset(bytes, offset + t1.getSpan$3$offset$source(bytes, offset, t2));
      return new A.LayoutDecodeResult(key.consumed + value.consumed, new A.MapEntry(t2, value.value, type$.MapEntry_dynamic_dynamic), type$.LayoutDecodeResult_MapEntry_dynamic_dynamic);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var keyBytes;
      type$.MapEntry_dynamic_dynamic._as(source);
      keyBytes = this.keyLayout.encode$3$offset(source.key, writer, offset);
      return keyBytes + this.valueLayout.encode$3$offset(source.value, writer, offset + keyBytes);
    },
    getSpan$3$offset$source(bytes, offset, source) {
      var t1, t2, keySpan;
      type$.nullable_MapEntry_dynamic_dynamic._as(source);
      t1 = source == null;
      t2 = t1 ? null : source.key;
      keySpan = this.keyLayout.getSpan$3$offset$source(bytes, offset, t2);
      t1 = t1 ? null : source.value;
      return keySpan + this.valueLayout.getSpan$3$offset$source(bytes, offset + keySpan, t1);
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    }
  };
  A.NoneLayout.prototype = {
    decode$2$offset(bytes, offset) {
      return B.LayoutDecodeResult_0_null;
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      return 0;
    }
  };
  A.ExternalLayout.prototype = {};
  A.ExternalOffsetLayout.prototype = {};
  A.BaseIntiger.prototype = {};
  A.IntegerLayout.prototype = {
    validate$1(value) {
      var _this = this,
        t1 = B.JSInt_methods.get$isNegative(value);
      if (t1)
        throw A.wrapException(A.LayoutException$(string$.Negati, A.LinkedHashMap_LinkedHashMap$_literal(["property", _this.property], type$.String, type$.dynamic)));
      t1 = _this.span * 8;
      if (B.JSInt_methods.get$bitLength(value) > t1)
        throw A.wrapException(A.LayoutException$(string$.Value_e, A.LinkedHashMap_LinkedHashMap$_literal(["property", _this.property, "layout", A.getRuntimeTypeOfDartObject(_this).toString$0(0), "bitLength", t1, "sign", false, "value", value], type$.String, type$.dynamic)));
    },
    decode$2$offset(bytes, offset) {
      var t1 = this.span,
        data = B.JSArray_methods.sublist$2(bytes._bytes, offset, offset + t1);
      if (t1 > 4)
        return new A.LayoutDecodeResult(t1, A.BigintUtils_fromBytes(data, this.order, false).toInt$0(0), type$.LayoutDecodeResult_int);
      return new A.LayoutDecodeResult(t1, A.IntUtils_fromBytes(data, this.order, false), type$.LayoutDecodeResult_int);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1, t2;
      A._asInt(source);
      this.validate$1(source);
      t1 = this.span;
      t2 = this.order;
      writer.setAll$2(0, offset, t1 > 4 ? A.BigintUtils_toBytes(A._BigIntImpl__BigIntImpl$from(source), t1, t2) : A.IntUtils_toBytes(source, t2, t1));
      return t1;
    }
  };
  A.BigIntLayout.prototype = {
    decode$2$offset(bytes, offset) {
      var t1 = this.span;
      return new A.LayoutDecodeResult(t1, A.BigintUtils_fromBytes(B.JSArray_methods.sublist$2(bytes._bytes, offset, offset + t1), this.order, false), type$.LayoutDecodeResult_BigInt);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1, _this = this;
      type$.BigInt._as(source);
      if (source._isNegative)
        A.throwExpression(A.LayoutException$(string$.Negati, A.LinkedHashMap_LinkedHashMap$_literal(["property", _this.property], type$.String, type$.dynamic)));
      t1 = _this.span;
      if (source.get$bitLength(0) > t1 * 8)
        A.throwExpression(A.LayoutException$(string$.Value_e, A.LinkedHashMap_LinkedHashMap$_literal(["property", _this.property], type$.String, type$.dynamic)));
      writer.setAll$2(0, offset, A.BigintUtils_toBytes(source, t1, _this.order));
      return t1;
    }
  };
  A.UnionDiscriminatorLayout.prototype = {};
  A.UnionLayoutDiscriminatorLayout.prototype = {
    decode$2$offset(bytes, offset) {
      return this.layout.decode$2$offset(bytes, offset);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      return this.layout.encode$3$offset(A._asInt(source), writer, offset);
    }
  };
  A.OffsetLayout.prototype = {
    decode$2$offset(bytes, offset) {
      return this.layout.layout.decode$2$offset(bytes, offset + this.offset);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1 = this.layout;
      return t1.layout.encode$3$offset(t1.$ti._precomputed1._as(A._asInt(source)), writer, offset + this.offset);
    }
  };
  A.CompactIntLayout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var t1;
      A._asIntQ(source);
      t1 = bytes._bytes;
      if (!(offset >= 0 && offset < t1.length))
        return A.ioore(t1, offset);
      return A.LayoutSerializationUtils_getDataCompactOffset(t1[offset]);
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    decode$2$offset(bytes, offset) {
      var decode = bytes.getCompactLengthInfos$2$sign(offset, false),
        t1 = decode.item2;
      this.layout.validate$1(t1);
      return new A.LayoutDecodeResult(decode.item1, t1, type$.LayoutDecodeResult_int);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var bytes = B.C_SubstrateScaleCUintEncoder.encode$1(B.JSInt_methods.toString$0(A._asInt(source)));
      writer.setAll$2(0, offset, bytes);
      return bytes.length;
    }
  };
  A.OptionalLayout.prototype = {
    decode$2$offset(bytes, offset) {
      var result, t2, _this = this,
        decode = _this.discriminator.decode$2$offset(bytes, offset),
        t1 = decode.value;
      if (J.$eq$(t1, 0)) {
        t1 = _this.size;
        if (t1 == null)
          t1 = decode.consumed;
        return new A.LayoutDecodeResult(t1, null, _this.$ti._eval$1("LayoutDecodeResult<1?>"));
      }
      A.OptionalLayout__validateOption(_this.property, A._asIntQ(t1));
      t1 = decode.consumed;
      result = _this.layout.decode$2$offset(bytes, offset + t1);
      t2 = _this.size;
      t1 = t2 == null ? t1 + result.consumed : t2;
      return new A.LayoutDecodeResult(t1, result.value, _this.$ti._eval$1("LayoutDecodeResult<1?>"));
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1, encode, t2, _this = this;
      _this.$ti._eval$1("1?")._as(source);
      if (source == null) {
        t1 = _this.size;
        return t1 == null ? _this.discriminator.encode$3$offset(0, writer, offset) : t1;
      }
      t1 = _this.discriminator;
      t1.encode$3$offset(1, writer, offset);
      t1 = t1.span;
      encode = _this.layout.encode$3$offset(source, writer, offset + t1);
      t2 = _this.size;
      return t2 == null ? encode + t1 : t2;
    },
    getSpan$3$offset$source(bytes, offset, source) {
      var t1, t2, _this = this;
      _this.$ti._eval$1("1?")._as(source);
      t1 = _this.size;
      if (t1 != null)
        return t1;
      t1 = _this.discriminator;
      bytes.toString;
      t2 = t1.decode$2$offset(bytes, offset).value;
      if (J.$eq$(t2, 0))
        return t1.span;
      A.OptionalLayout__validateOption(_this.property, A._asIntQ(t2));
      t1 = t1.span;
      return _this.layout.getSpan$3$offset$source(bytes, offset + t1, source) + t1;
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    }
  };
  A.OptionalLayout_OptionalLayout_closure.prototype = {
    call$0() {
      return null;
    },
    $signature: 256
  };
  A.PaddingLayout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      return this.layout.getSpan$3$offset$source(bytes, offset, this.$ti._eval$1("1?")._as(source));
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    decode$2$offset(bytes, offset) {
      return this.layout.decode$2$offset(bytes, offset);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      return this.layout.encode$3$offset(this.$ti._precomputed1._as(source), writer, offset);
    }
  };
  A.RawBytesLayout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var span, t1;
      type$.nullable_List_int._as(source);
      span = this.span;
      if (span < 0) {
        t1 = type$.ExternalLayout._as(this.length);
        bytes.toString;
        span = t1.decode$2$offset(bytes, offset).get$value();
      }
      return span;
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    getSpan$2$offset(bytes, offset) {
      return this.getSpan$3$offset$source(bytes, offset, null);
    },
    decode$2$offset(bytes, offset) {
      var span = this.getSpan$2$offset(bytes, offset);
      return new A.LayoutDecodeResult(span, B.JSArray_methods.sublist$2(bytes._bytes, offset, offset + span), type$.LayoutDecodeResult_List_int);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var span, t1;
      type$.List_int._as(source);
      span = this.span;
      t1 = J.getInterceptor$asx(source);
      if (span !== t1.get$length(source))
        throw A.wrapException(A.LayoutException$("encode requires a source with length " + span + ".", A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property, "length", span, "sourceLength", t1.get$length(source)], type$.String, type$.dynamic)));
      if (offset + span > writer._byte_handler$_buffer._bytes.length)
        if (!writer.growable)
          throw A.wrapException(A.LayoutException$("Encoding overruns bytes", A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property], type$.String, type$.dynamic)));
      writer.setAll$2(0, offset, t1.sublist$2(source, 0, span));
      return span;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.StructLayout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var span, s, t2, exception, t1 = {};
      t1.offset = offset;
      type$.nullable_Map_String_dynamic._as(source);
      t2 = this.span;
      if (t2 >= 0)
        return t2;
      span = 0;
      try {
        span = B.JSArray_methods.fold$1$2(this.fields, 0, new A.StructLayout_getSpan_closure(t1, bytes, source), type$.int);
      } catch (exception) {
        s = A.getTraceFromException(exception);
        t1 = A.LayoutException$("indeterminate span", A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property, "stack", s], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
      return span;
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    decode$2$offset(bytes, offset) {
      var t1, t2, consumed, _i, fd, t3, decode, consumed0,
        result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      for (t1 = this.fields, t2 = t1.length, consumed = 0, _i = 0; _i < t2; ++_i, consumed = consumed0) {
        fd = t1[_i];
        t3 = fd.property;
        if (t3 != null) {
          decode = fd.decode$2$offset(bytes, offset);
          consumed0 = consumed + decode.consumed;
          result.$indexSet(0, t3, decode.value);
        } else
          consumed0 = consumed;
        offset += fd.getSpan$3$offset$source(bytes, offset, result.$index(0, t3));
      }
      return new A.LayoutDecodeResult(consumed, result, type$.LayoutDecodeResult_Map_String_dynamic);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1, t2, t3, lastOffset, offset0, lastWrote, _i, field, span, t4, value, offset1;
      type$.Map_String_dynamic._as(source);
      for (t1 = this.fields, t2 = t1.length, t3 = writer._byte_handler$_buffer, lastOffset = offset, offset0 = lastOffset, lastWrote = 0, _i = 0; _i < t2; ++_i, lastOffset = offset0, offset0 = offset1) {
        field = t1[_i];
        span = field.span;
        t4 = field.property;
        if (source.containsKey$1(t4)) {
          value = source.$index(0, t4);
          lastWrote = field.encode$3$offset(value, writer, offset0);
          if (span < 0) {
            span = field.getSpan$3$offset$source(t3, offset0, value);
            if (span === 0 ? 1 / span < 0 : span < 0)
              throw A.wrapException(A.LayoutException$("indeterminate span.", A.LinkedHashMap_LinkedHashMap$_literal(["key", t4, "source", source, "property", this.property], type$.String, type$.dynamic)));
          }
        } else if (span < 0 || !(field instanceof A.PaddingLayout))
          throw A.wrapException(A.LayoutException$("Struct Source not found.", A.LinkedHashMap_LinkedHashMap$_literal(["key", t4, "source", source, "property", this.property], type$.String, type$.dynamic)));
        offset1 = offset0 + span;
      }
      return lastOffset + lastWrote - offset;
    },
    encode$2(source, writer) {
      return this.encode$3$offset(source, writer, 0);
    }
  };
  A.StructLayout_StructLayout_closure.prototype = {
    call$1(e) {
      type$.Layout_dynamic._as(e);
      return A.getRuntimeTypeOfDartObject(e).toString$0(0) + ": " + A.S(e.property);
    },
    $signature: 246
  };
  A.StructLayout_StructLayout_closure0.prototype = {
    call$2(span, fd) {
      return A._asInt(span) + type$.Layout_dynamic._as(fd).getSpan$1(null);
    },
    $signature: 146
  };
  A.StructLayout_getSpan_closure.prototype = {
    call$2(span, fd) {
      var fsp, t1, t2, t3;
      A._asInt(span);
      type$.Layout_dynamic._as(fd);
      t1 = this._box_0;
      t2 = t1.offset;
      t3 = this.source;
      t3 = t3 == null ? null : t3.$index(0, fd.property);
      fsp = fd.getSpan$3$offset$source(this.bytes, t2, t3);
      t3 = t1.offset;
      t2 = fsp;
      if (typeof t2 !== "number")
        return A.iae(t2);
      t1.offset = t3 + t2;
      t2 = fsp;
      if (typeof t2 !== "number")
        return A.iae(t2);
      return span + t2;
    },
    $signature: 146
  };
  A.Union.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var t1, vlo;
      type$.nullable_Map_String_dynamic._as(source);
      t1 = this.span;
      if (t1 >= 0)
        return t1;
      bytes.toString;
      vlo = this.getVariant$2$offset(bytes, offset);
      if (vlo == null)
        throw A.wrapException(A.LayoutException$(string$.unable, A.LinkedHashMap_LinkedHashMap$_literal(["property", this.property], type$.String, type$.dynamic)));
      return vlo.getSpan$3$offset$source(bytes, offset, source);
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    defaultGetSourceVariant$1(source) {
      var t1, vlo, t2, t3, _this = this;
      type$.Map_String_dynamic._as(source);
      t1 = _this.discriminator.property;
      if (source.containsKey$1(t1)) {
        if (source.containsKey$1(null))
          return null;
        vlo = _this._union$_registry.$index(0, source.$index(0, t1));
        if (vlo != null)
          t2 = vlo.layout == null || source.containsKey$1(vlo.property);
        else
          t2 = false;
        if (t2)
          return vlo;
      } else
        for (t2 = _this._union$_registry, t3 = new A.LinkedHashMapKeyIterator(t2, t2._modifications, t2._first, A._instanceType(t2)._eval$1("LinkedHashMapKeyIterator<1>")); t3.moveNext$0();) {
          vlo = t2.$index(0, t3.__js_helper$_current);
          if (source.containsKey$1(vlo == null ? null : vlo.property))
            return vlo;
        }
      t2 = source.get$keys();
      t3 = type$.String;
      throw A.wrapException(A.LayoutException$("unable to infer source variant", A.LinkedHashMap_LinkedHashMap$_literal(["property", _this.property, "discriminator", t1, "sources", t2.map$1$1(t2, new A.Union_defaultGetSourceVariant_closure(), t3).join$1(0, ", ")], t3, type$.dynamic)));
    },
    decode$2$offset(bytes, offset) {
      var decode,
        t1 = this.discriminator,
        discr = t1.layout.decode$2$offset(bytes, offset),
        t2 = discr.value,
        clo = this._union$_registry.$index(0, t2),
        result = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic),
        consumed = discr.consumed;
      if (clo == null) {
        t1 = t1.property;
        t1.toString;
        result.$indexSet(0, t1, t2);
      } else {
        decode = clo.decode$2$offset(bytes, offset);
        result = decode.value;
        consumed += decode.consumed;
      }
      return new A.LayoutDecodeResult(consumed, result, type$.LayoutDecodeResult_Map_String_dynamic);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var vlo, contentOffset, t1, _this = this;
      type$.Map_String_dynamic._as(source);
      vlo = _this.defaultGetSourceVariant$1(source);
      if (vlo == null) {
        contentOffset = _this.usesPrefixDiscriminator ? _this.discriminator.layout.span : 0;
        t1 = _this.discriminator;
        t1.layout.encode$3$offset(A._asInt(source.$index(0, t1.property)), writer, offset);
        t1 = _this.defaultLayout;
        return B.JSInt_methods.$add(contentOffset, t1.encode$3$offset(source.$index(0, t1.get$property()), writer, offset + contentOffset));
      }
      return vlo.encode$3$offset(source, writer, offset);
    },
    getVariant$2$offset(variantBytes, offset) {
      return this._union$_registry.$index(0, this.discriminator.layout.decode$2$offset(variantBytes, offset).value);
    }
  };
  A.Union_defaultGetSourceVariant_closure.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 4
  };
  A.VariantLayout.prototype = {
    getSpan$3$offset$source(bytes, offset, source) {
      var t1, contentOffset, t2, span, _this = this;
      type$.nullable_Map_String_dynamic._as(source);
      t1 = _this.span;
      if (!B.JSInt_methods.get$isNegative(t1))
        return t1;
      t1 = _this.union;
      contentOffset = t1.usesPrefixDiscriminator ? t1.discriminator.layout.span : 0;
      t1 = _this.layout;
      if (t1 != null) {
        t2 = source == null ? null : source.$index(0, _this.property);
        span = t1.getSpan$3$offset$source(bytes, offset + contentOffset, t2);
      } else
        span = 0;
      return contentOffset + span;
    },
    getSpan$1(bytes) {
      return this.getSpan$3$offset$source(bytes, 0, null);
    },
    decode$2$offset(bytes, offset) {
      var t2, contentOffset, dest, t3, result, consumed, _this = this,
        t1 = _this.union;
      if (_this !== t1.getVariant$2$offset(bytes, offset))
        throw A.wrapException(A.LayoutException$("variant mismatch", A.LinkedHashMap_LinkedHashMap$_literal(["property", _this.property], type$.String, type$.dynamic)));
      t2 = t1.usesPrefixDiscriminator;
      contentOffset = t2 ? t1.discriminator.layout.span : 0;
      dest = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      t3 = _this.layout;
      if (t3 != null) {
        result = t3.decode$2$offset(bytes, offset + contentOffset);
        t1 = _this.property;
        t1.toString;
        dest.$indexSet(0, t1, result.value);
        consumed = result.consumed;
      } else {
        t3 = _this.property;
        if (t3 != null)
          dest.$indexSet(0, t3, true);
        else if (t2) {
          t1 = t1.discriminator.property;
          t1.toString;
          dest.$indexSet(0, t1, _this.variant);
        }
        consumed = 0;
      }
      return new A.LayoutDecodeResult(consumed, dest, type$.LayoutDecodeResult_Map_String_dynamic);
    },
    decode$1(bytes) {
      return this.decode$2$offset(bytes, 0);
    },
    encode$3$offset(source, writer, offset) {
      var t1, contentOffset, t2, t3, t4, span, _this = this;
      type$.Map_String_dynamic._as(source);
      t1 = _this.union;
      contentOffset = t1.usesPrefixDiscriminator ? t1.discriminator.layout.span : 0;
      t2 = _this.layout;
      t3 = t2 != null;
      if (t3 && !source.containsKey$1(_this.property))
        throw A.wrapException(A.LayoutException$("variant lacks property", A.LinkedHashMap_LinkedHashMap$_literal(["property", _this.property], type$.String, type$.dynamic)));
      t1.discriminator.layout.encode$3$offset(_this.variant, writer, offset);
      if (t3) {
        t3 = _this.property;
        t4 = offset + contentOffset;
        t2.encode$3$offset(source.$index(0, t3), writer, t4);
        span = contentOffset + t2.getSpan$3$offset$source(writer._byte_handler$_buffer, t4, source.$index(0, t3));
        t1 = t1.span;
        if (t1 >= 0 && span > t1)
          throw A.wrapException(A.LayoutException$(string$.encode, A.LinkedHashMap_LinkedHashMap$_literal(["property", t3], type$.String, type$.dynamic)));
      } else
        span = contentOffset;
      return span;
    }
  };
  A.LayoutException.prototype = {};
  A.RequestServiceType.prototype = {
    _enumToString$0() {
      return "RequestServiceType." + this._name;
    }
  };
  A.ServiceResponseType.prototype = {
    _enumToString$0() {
      return "ServiceResponseType." + this._name;
    }
  };
  A.BaseServiceResponse.prototype = {
    cast$1$0(_, $E) {
      var _this = this;
      A.checkTypeBound($E, type$.BaseServiceResponse_dynamic, "E", "cast");
      if (!$E._is(_this))
        throw A.wrapException(A.ArgumentException$("BaseServiceResponse casting faild.", A.LinkedHashMap_LinkedHashMap$_literal(["expected", A.createRuntimeType(A._instanceType(_this)._precomputed1).toString$0(0), "type", _this.type._name], type$.String, type$.dynamic)));
      return $E._as(_this);
    },
    getResult$1(params) {
      var t1, t2, t3, error, error0, t4, _this = this;
      switch (_this.type) {
        case B.ServiceResponseType_0:
          t1 = _this.statusCode;
          t2 = B.Map_pQry7.$index(0, t1);
          if (t2 == null)
            t2 = "Unknown Error" + (t1 === 200 ? "" : " " + t1) + ": An unexpected error occurred.";
          t3 = params.toJson$0();
          error = _this.cast$1$0(0, type$.ServiceErrorResponse_dynamic).error;
          error0 = null;
          if (t1 === 403) {
            if (!(typeof error == "string"))
              error = error0;
          } else
            error = error0;
          t4 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
          t4.$indexSet(0, "statusCode", t1);
          if (error != null)
            t4.$indexSet(0, "error", error);
          t1 = A.throwExpression(A.RPCError$(t4, null, t2, t3));
          break;
        case B.ServiceResponseType_1:
          t1 = _this.cast$1$0(0, A._instanceType(_this)._eval$1("ServiceSuccessRespose<1>")).response;
          break;
        default:
          t1 = null;
      }
      return t1;
    }
  };
  A.ServiceSuccessRespose.prototype = {};
  A.ServiceErrorResponse.prototype = {};
  A.BaseServiceRequestParams.prototype = {
    toResponse$1$1(body, $T) {
      var response, t1, t2, exception, statusCode = null;
      if (statusCode == null)
        statusCode = 200;
      if (!A.ServiceProviderUtils_isSuccessStatusCode(statusCode)) {
        t1 = statusCode;
        return new A.ServiceErrorResponse(A.ServiceProviderUtils_findError(body, statusCode), t1, B.ServiceResponseType_0, $T._eval$1("ServiceErrorResponse<0>"));
      }
      try {
        response = null;
        response = A.ServiceProviderUtils_parseResponse(body, this, $T);
        t1 = statusCode;
        t2 = response;
        return new A.ServiceSuccessRespose(t2, t1, B.ServiceResponseType_1, $T._eval$1("ServiceSuccessRespose<0>"));
      } catch (exception) {
      }
      t1 = this.toJson$0();
      throw A.wrapException(A.RPCError$(A.LinkedHashMap_LinkedHashMap$_literal(["expected", A.createRuntimeType($T).toString$0(0)], type$.String, type$.dynamic), null, "Parsing response failed.", t1));
    }
  };
  A.BaseServiceRequest.prototype = {};
  A.BaseProvider.prototype = {};
  A.ServiceProviderUtils_parseResponse_closure.prototype = {
    call$1(e) {
      return type$.Map_dynamic_dynamic._as(e).cast$2$0(0, type$.String, type$.dynamic);
    },
    $signature: 16
  };
  A.ServiceProviderUtils_parseResponse_closure0.prototype = {
    call$1(e) {
      return type$.Map_dynamic_dynamic._as(e).cast$2$0(0, type$.String, type$.dynamic);
    },
    $signature: 16
  };
  A.SS58ChecksumError.prototype = {};
  A.DynamicByteTracker.prototype = {};
  A.BytesUtils_toBytes_closure.prototype = {
    call$1(e) {
      return A._asInt(e) & 255;
    },
    $signature: 27
  };
  A.BigRational.prototype = {
    $mul(_, other) {
      return A.BigRational__reduce(this.numerator.$mul(0, other.numerator), this.denominator.$mul(0, other.denominator));
    },
    $div(_, other) {
      return A.BigRational__reduce(this.numerator.$mul(0, other.denominator), this.denominator.$mul(0, other.numerator));
    },
    $not(_) {
      var t1 = this.denominator;
      if (t1._isNegative)
        return new A.BigRational(this.numerator, t1.$negate(0));
      return new A.BigRational(this.numerator.$negate(0), t1);
    },
    toDecimal$1$digits(digits) {
      var t2, nDive, nReminder, intPart, shiftedRemainder, t3, t4, decPart, decPartStr, _this = this,
        t1 = digits == null;
      if (t1 && _this._inDecimal != null) {
        t1 = _this._inDecimal;
        t1.toString;
        return t1;
      }
      if (t1)
        digits = _this.get$scale();
      t1 = _this.numerator;
      t2 = _this.denominator;
      nDive = t1.$tdiv(0, t2);
      nReminder = t1.remainder$1(0, t2);
      intPart = (nDive._isNegative ? nDive.$negate(0) : nDive).toString$0(0);
      shiftedRemainder = A.BigRational__reduce(nReminder._isNegative ? nReminder.$negate(0) : nReminder, t2).$mul(0, new A.BigRational($.$get$BigRational__ten().pow$1(digits), $.$get$BigRational__one()));
      t3 = shiftedRemainder.numerator;
      t4 = shiftedRemainder.denominator;
      decPart = t3.$tdiv(0, t4);
      if (t1._isNegative !== t2._isNegative) {
        t1 = t1.compareTo$1(0, $.$get$BigRational__zero());
        t1 = t1 !== 0;
      } else
        t1 = false;
      if (t1)
        intPart = "-" + intPart;
      t1 = $.$get$BigRational__zero();
      t2 = decPart.compareTo$1(0, t1);
      if (t2 === 0)
        return intPart;
      decPartStr = (decPart._isNegative ? decPart.$negate(0) : decPart).toString$0(0);
      t2 = decPartStr.length;
      if (t2 < digits)
        decPartStr = B.JSString_methods.$mul("0", digits - t2) + decPartStr;
      t1 = t3.$mod(0, t4).compareTo$1(0, t1);
      if (t1 === 0)
        for (; B.JSString_methods.endsWith$1(decPartStr, "0");)
          decPartStr = B.JSString_methods.substring$2(decPartStr, 0, decPartStr.length - 1);
      if (digits < 1)
        return intPart;
      return intPart + (decPart.compareTo$1(0, $.$get$BigRational__zero()) < 0 ? "" : ".") + decPartStr;
    },
    toDecimal$0() {
      return this.toDecimal$1$digits(null);
    },
    toString$0(_) {
      var t1 = this._inDecimal;
      return t1 == null ? this._inDecimal = this.toDecimal$0() : t1;
    },
    get$scale() {
      var t1, t2, scale = 0, r = this;
      while (true) {
        t1 = r.denominator;
        t2 = t1.compareTo$1(0, $.$get$_BigIntImpl_one());
        if (!(t2 !== 0))
          break;
        ++scale;
        t2 = $.$get$BigRational_ten();
        r = A.BigRational__reduce(r.numerator.$mul(0, t2.numerator), t1.$mul(0, t2.denominator));
        if (scale >= 20)
          break;
      }
      return scale;
    },
    $eq(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = false;
      if (other instanceof A.BigRational) {
        t2 = other.denominator.compareTo$1(0, this.denominator);
        if (t2 === 0)
          t1 = other.numerator.compareTo$1(0, this.numerator) === 0;
      }
      return t1;
    },
    get$hashCode(_) {
      return this.numerator.get$hashCode(0) ^ this.denominator.get$hashCode(0);
    }
  };
  A.StringEncoding.prototype = {
    _enumToString$0() {
      return "StringEncoding." + this._name;
    }
  };
  A.Tuple.prototype = {};
  A.UUID_generateUUIDv4_closure.prototype = {
    call$1(i) {
      var t1;
      if (i === 6)
        return this.random.nextInt$1(16) & 15 | 64;
      else {
        t1 = this.random;
        if (i === 8)
          return t1.nextInt$1(4) & 3 | 8;
        else
          return t1.nextInt$1(256);
      }
    },
    $signature: 27
  };
  A.UUID_generateUUIDv4_closure0.prototype = {
    call$1(byte) {
      return B.JSString_methods.padLeft$2(B.JSInt_methods.toRadixString$1(A._asInt(byte), 16), 2, "0");
    },
    $signature: 77
  };
  A.CanonicalizedMap.prototype = {
    $index(_, key) {
      var pair, _this = this;
      if (!_this._isValidKey$1(key))
        return null;
      pair = _this._base.$index(0, _this._canonicalize.call$1(_this.$ti._eval$1("CanonicalizedMap.K")._as(key)));
      return pair == null ? null : pair.value;
    },
    $indexSet(_, key, value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("CanonicalizedMap.K")._as(key);
      t1._eval$1("CanonicalizedMap.V")._as(value);
      if (!_this._isValidKey$1(key))
        return;
      _this._base.$indexSet(0, _this._canonicalize.call$1(key), new A.MapEntry(key, value, t1._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>")));
    },
    addAll$1(_, other) {
      this.$ti._eval$1("Map<CanonicalizedMap.K,CanonicalizedMap.V>")._as(other).forEach$1(0, new A.CanonicalizedMap_addAll_closure(this));
    },
    cast$2$0(_, K2, V2) {
      return this._base.cast$2$0(0, K2, V2);
    },
    containsKey$1(key) {
      var _this = this;
      if (!_this._isValidKey$1(key))
        return false;
      return _this._base.containsKey$1(_this._canonicalize.call$1(_this.$ti._eval$1("CanonicalizedMap.K")._as(key)));
    },
    get$entries() {
      var t1 = this._base,
        t2 = A._instanceType(t1)._eval$1("LinkedHashMapEntriesIterable<1,2>"),
        t3 = this.$ti._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>");
      return A.MappedIterable_MappedIterable(new A.LinkedHashMapEntriesIterable(t1, t2), t2._bind$1(t3)._eval$1("1(Iterable.E)")._as(new A.CanonicalizedMap_entries_closure(this)), t2._eval$1("Iterable.E"), t3);
    },
    forEach$1(_, f) {
      this._base.forEach$1(0, new A.CanonicalizedMap_forEach_closure(this, this.$ti._eval$1("~(CanonicalizedMap.K,CanonicalizedMap.V)")._as(f)));
    },
    get$isEmpty(_) {
      return this._base.__js_helper$_length === 0;
    },
    get$keys() {
      var t1 = this._base,
        t2 = A._instanceType(t1)._eval$1("LinkedHashMapValuesIterable<2>"),
        t3 = this.$ti._eval$1("CanonicalizedMap.K");
      return A.MappedIterable_MappedIterable(new A.LinkedHashMapValuesIterable(t1, t2), t2._bind$1(t3)._eval$1("1(Iterable.E)")._as(new A.CanonicalizedMap_keys_closure(this)), t2._eval$1("Iterable.E"), t3);
    },
    get$length(_) {
      return this._base.__js_helper$_length;
    },
    map$2$1(_, transform, K2, V2) {
      return this._base.map$2$1(0, new A.CanonicalizedMap_map_closure(this, this.$ti._bind$1(K2)._bind$1(V2)._eval$1("MapEntry<1,2>(CanonicalizedMap.K,CanonicalizedMap.V)")._as(transform), K2, V2), K2, V2);
    },
    get$values() {
      var t1 = this._base,
        t2 = A._instanceType(t1)._eval$1("LinkedHashMapValuesIterable<2>"),
        t3 = this.$ti._eval$1("CanonicalizedMap.V");
      return A.MappedIterable_MappedIterable(new A.LinkedHashMapValuesIterable(t1, t2), t2._bind$1(t3)._eval$1("1(Iterable.E)")._as(new A.CanonicalizedMap_values_closure(this)), t2._eval$1("Iterable.E"), t3);
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _isValidKey$1(key) {
      return this.$ti._eval$1("CanonicalizedMap.K")._is(key);
    },
    $isMap: 1
  };
  A.CanonicalizedMap_addAll_closure.prototype = {
    call$2(key, value) {
      var t1 = this.$this,
        t2 = t1.$ti;
      t2._eval$1("CanonicalizedMap.K")._as(key);
      t2._eval$1("CanonicalizedMap.V")._as(value);
      t1.$indexSet(0, key, value);
      return value;
    },
    $signature() {
      return this.$this.$ti._eval$1("~(CanonicalizedMap.K,CanonicalizedMap.V)");
    }
  };
  A.CanonicalizedMap_entries_closure.prototype = {
    call$1(e) {
      var t1 = this.$this.$ti,
        t2 = t1._eval$1("MapEntry<CanonicalizedMap.C,MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>>")._as(e).value;
      return new A.MapEntry(t2.key, t2.value, t1._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>"));
    },
    $signature() {
      return this.$this.$ti._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>(MapEntry<CanonicalizedMap.C,MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>>)");
    }
  };
  A.CanonicalizedMap_forEach_closure.prototype = {
    call$2(key, pair) {
      var t1 = this.$this.$ti;
      t1._eval$1("CanonicalizedMap.C")._as(key);
      t1._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair);
      return this.f.call$2(pair.key, pair.value);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(CanonicalizedMap.C,MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  A.CanonicalizedMap_keys_closure.prototype = {
    call$1(pair) {
      return this.$this.$ti._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair).key;
    },
    $signature() {
      return this.$this.$ti._eval$1("CanonicalizedMap.K(MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  A.CanonicalizedMap_map_closure.prototype = {
    call$2(_, pair) {
      var t1 = this.$this.$ti;
      t1._eval$1("CanonicalizedMap.C")._as(_);
      t1._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair);
      return this.transform.call$2(pair.key, pair.value);
    },
    $signature() {
      return this.$this.$ti._bind$1(this.K2)._bind$1(this.V2)._eval$1("MapEntry<1,2>(CanonicalizedMap.C,MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  A.CanonicalizedMap_values_closure.prototype = {
    call$1(pair) {
      return this.$this.$ti._eval$1("MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>")._as(pair).value;
    },
    $signature() {
      return this.$this.$ti._eval$1("CanonicalizedMap.V(MapEntry<CanonicalizedMap.K,CanonicalizedMap.V>)");
    }
  };
  A.CosmosBaseAddress.prototype = {
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (!(other instanceof A.CosmosBaseAddress))
        return false;
      if (_this !== other)
        t1 = A.getRuntimeTypeOfDartObject(_this) === A.getRuntimeTypeOfDartObject(other) && _this.address === other.address && _this.hrp === other.hrp;
      else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.address, this.hrp]);
    },
    toString$0(_) {
      return this.address;
    }
  };
  A.CosmosKeysAlgs.prototype = {
    _enumToString$0() {
      return "CosmosKeysAlgs." + this._name;
    },
    get$pubKeyTypeUrl() {
      var t1, _this = this;
      $label0$0: {
        if (B.CosmosKeysAlgs_secp256k1 === _this) {
          t1 = B.CosmosCryptoKeysTypes_Wsy;
          break $label0$0;
        }
        if (B.CosmosKeysAlgs_secp256r1 === _this) {
          t1 = B.CosmosCryptoKeysTypes_Wsy0;
          break $label0$0;
        }
        if (B.CosmosKeysAlgs_ed25519 === _this) {
          t1 = B.CosmosCryptoKeysTypes_vyH;
          break $label0$0;
        }
        if (B.CosmosKeysAlgs_ethsecp256k1 === _this) {
          t1 = B.CosmosCryptoKeysTypes_g6t;
          break $label0$0;
        }
        t1 = A.throwExpression(A.DartCosmosSdkPluginException$("Unsuported key algorithm.", A.LinkedHashMap_LinkedHashMap$_literal(["name", _this._name], type$.String, type$.dynamic)));
      }
      return t1;
    }
  };
  A.CosmosKeysAlgs_fromName_closure.prototype = {
    call$1(element) {
      return type$.CosmosKeysAlgs._as(element)._name === this.name;
    },
    $signature: 245
  };
  A.CosmosKeysAlgs_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartCosmosSdkPluginException$("unknowmn key algorithm.", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.CosmosCryptoKeysTypes.prototype = {};
  A.DartCosmosSdkPluginException.prototype = {};
  A.AminoJsonParserException.prototype = {};
  A.AminoTx.prototype = {
    toJson$0() {
      var _this = this,
        fee = _this.fee.toAminoJson$0(),
        t1 = _this.accountNumber.toString$0(0),
        t2 = _this.messages,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,Map<String,@>>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Map<String,@>(1)")._as(new A.AminoTx_toJson_closure()), t4), t4._eval$1("ListIterable.E"));
      return type$.Map_String_dynamic._as(A.CosmosUtils_sortAminoJsonTx(A.LinkedHashMap_LinkedHashMap$_literal(["account_number", t1, "chain_id", _this.chainId, "fee", fee, "memo", _this.memo, "msgs", t2, "sequence", _this.sequence.toString$0(0)], type$.String, type$.Object)));
    }
  };
  A.AminoTx_AminoTx$fromJson_closure.prototype = {
    call$1(notfound) {
      if (notfound)
        return B.AminoJsonParserException_MJf;
      return B.AminoJsonParserException_t1G;
    },
    $signature: 15
  };
  A.AminoTx_AminoTx$fromJson_closure0.prototype = {
    call$1(notfound) {
      if (notfound)
        return B.AminoJsonParserException_AAO;
      return B.AminoJsonParserException_yhL;
    },
    $signature: 15
  };
  A.AminoTx_AminoTx$fromJson_closure1.prototype = {
    call$1(notfound) {
      if (notfound)
        return B.AminoJsonParserException_fZo;
      return B.AminoJsonParserException_bjD;
    },
    $signature: 15
  };
  A.AminoTx_AminoTx$fromJson_closure2.prototype = {
    call$1(notfound) {
      if (notfound)
        return B.AminoJsonParserException_5bl;
      return B.AminoJsonParserException_zeE;
    },
    $signature: 15
  };
  A.AminoTx_AminoTx$fromJson_closure3.prototype = {
    call$1(notfound) {
      return B.AminoJsonParserException_XhB;
    },
    $signature: 15
  };
  A.AminoTx_AminoTx$fromJson_closure4.prototype = {
    call$1(notfound) {
      if (notfound)
        return B.AminoJsonParserException_PHK;
      return B.AminoJsonParserException_7jU;
    },
    $signature: 15
  };
  A.AminoTx_AminoTx$fromJson_closure5.prototype = {
    call$1(notfound) {
      if (notfound)
        return B.AminoJsonParserException_Vb7;
      return B.AminoJsonParserException_aGW;
    },
    $signature: 15
  };
  A.AminoTx_AminoTx$fromJson_closure6.prototype = {
    call$1(notfound) {
      if (notfound)
        return B.AminoJsonParserException_ee8;
      return B.AminoJsonParserException_yIy;
    },
    $signature: 15
  };
  A.AminoTx_AminoTx$fromJson_closure7.prototype = {
    call$1(notfound) {
      return B.AminoJsonParserException_MSz;
    },
    $signature: 15
  };
  A.AminoTx_AminoTx$fromJson_closure8.prototype = {
    call$1(notfound) {
      return B.AminoJsonParserException_yor;
    },
    $signature: 15
  };
  A.AminoTx_AminoTx$fromJson_closure9.prototype = {
    call$1(e) {
      var t1, exception;
      type$.Map_String_dynamic._as(e);
      try {
        t1 = A.Coin_Coin$fromJson(e);
        return t1;
      } catch (exception) {
        t1 = A.AminoJsonParserException$(string$.x27amoun);
        throw A.wrapException(t1);
      }
    },
    $signature: 21
  };
  A.AminoTx_toJson_closure.prototype = {
    call$1(e) {
      return type$.AminoMessage_CosmosMessage._as(e).toAminoJson$0();
    },
    $signature: 234
  };
  A.UnknownAminoService.prototype = {
    get$fieldIds() {
      return A.throwExpression(A.DartCosmosSdkPluginException$(string$.Unsupp, null));
    },
    toJson$0() {
      return this.value;
    },
    get$typeUrl() {
      return A.throwExpression(A.DartCosmosSdkPluginException$("Unable to find typeUrl from unknown Amino message.", null));
    },
    get$values() {
      return A.throwExpression(A.DartCosmosSdkPluginException$(string$.Unsupp, null));
    },
    get$aminoType() {
      return this.aminoType;
    }
  };
  A._UnknownAminoService_ServiceMessage_AminoMessage.prototype = {};
  A.CCTPV1Service.prototype = {};
  A.CCTPV1MsgAcceptOwner.prototype = {
    get$fieldIds() {
      return A._setArrayType([1], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_Nlv;
    },
    get$values() {
      return [this.from];
    }
  };
  A._CCTPV1MsgAcceptOwner_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgDepositForBurn.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", _this.from, "amount", _this.amount, "destination_domain", _this.destinationDomain, "burn_token", _this.burnToken, "mint_recipient", A.StringUtils_tryDecode(_this.mintRecipient, B.StringEncoding_2)], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_2rV;
    },
    get$values() {
      var _this = this;
      return [_this.from, _this.amount, _this.destinationDomain, _this.mintRecipient, _this.burnToken];
    }
  };
  A._CCTPV1MsgDepositForBurn_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgDepositForBurnWithCaller.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", _this.from, "amount", _this.amount, "destination_domain", _this.destinationDomain, "burn_token", _this.burnToken, "mint_recipient", A.StringUtils_tryDecode(_this.mintRecipient, B.StringEncoding_2), "destination_caller", A.StringUtils_tryDecode(_this.destinationCaller, B.StringEncoding_2)], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_fgb;
    },
    get$values() {
      var _this = this;
      return [_this.from, _this.amount, _this.destinationDomain, _this.mintRecipient, _this.burnToken, _this.destinationCaller];
    }
  };
  A._CCTPV1MsgDepositForBurnWithCaller_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgDisableAttester.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from, "attester", this.attester], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_81S;
    },
    get$values() {
      return [this.from, this.attester];
    }
  };
  A._CCTPV1MsgDisableAttester_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgEnableAttester.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from, "attester", this.attester], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_XiD;
    },
    get$values() {
      return [this.from, this.attester];
    }
  };
  A._CCTPV1MsgEnableAttester_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgLinkTokenPair.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", _this.from, "remote_domain", _this.remoteDomain, "remote_token", A.StringUtils_tryDecode(_this.remoteToken, B.StringEncoding_2), "local_token", _this.localToken], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_in6;
    },
    get$values() {
      var _this = this;
      return [_this.from, _this.remoteDomain, _this.remoteToken, _this.localToken];
    }
  };
  A._CCTPV1MsgLinkTokenPair_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgSetMaxBurnAmountPerMessage.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from, "local_token", this.localToken, "amount", this.amount], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_thd;
    },
    get$values() {
      return [this.from, this.localToken, this.amount];
    }
  };
  A._CCTPV1MsgSetMaxBurnAmountPerMessage_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgReceiveMessage.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from, "message", A.StringUtils_tryDecode(this.message, B.StringEncoding_2), "attestation", A.StringUtils_tryDecode(this.attestation, B.StringEncoding_2)], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_C5S;
    },
    get$values() {
      return [this.from, this.message, this.attestation];
    }
  };
  A._CCTPV1MsgReceiveMessage_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgPauseBurningAndMinting.prototype = {
    get$fieldIds() {
      return A._setArrayType([1], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_GQU;
    },
    get$values() {
      return [this.from];
    }
  };
  A._CCTPV1MsgPauseBurningAndMinting_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgPauseSendingAndReceivingMessages.prototype = {
    get$fieldIds() {
      return A._setArrayType([1], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_ABG;
    },
    get$values() {
      return [this.from];
    }
  };
  A._CCTPV1MsgPauseSendingAndReceivingMessages_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgAddRemoteTokenMessenger.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from, "address", A.StringUtils_tryDecode(this.address, B.StringEncoding_2), "domain_id", this.domainId], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_LV1;
    },
    get$values() {
      return [this.from, this.domainId, this.address];
    }
  };
  A._CCTPV1MsgAddRemoteTokenMessenger_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgRemoveRemoteTokenMessenger.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from, "domain_id", this.domainId], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_NCP;
    },
    get$values() {
      return [this.from, this.domainId];
    }
  };
  A._CCTPV1MsgRemoveRemoteTokenMessenger_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgReplaceDepositForBurn.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", _this.from, "original_message", A.StringUtils_tryDecode(_this.originalMessage, B.StringEncoding_2), "original_attestation", A.StringUtils_tryDecode(_this.originalAttestation, B.StringEncoding_2), "new_destination_caller", A.StringUtils_tryDecode(_this.newDestinationCaller, B.StringEncoding_2), "new_mint_recipient", A.StringUtils_tryDecode(_this.newMintRecipient, B.StringEncoding_2)], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_UMf;
    },
    get$values() {
      var _this = this;
      return [_this.from, _this.originalMessage, _this.originalAttestation, _this.newDestinationCaller, _this.newMintRecipient];
    }
  };
  A._CCTPV1MsgReplaceDepositForBurn_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgReplaceMessage.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", _this.from, "original_message", A.StringUtils_tryDecode(_this.originalMessage, B.StringEncoding_2), "original_attestation", A.StringUtils_tryDecode(_this.originalAttestation, B.StringEncoding_2), "new_destination_caller", A.StringUtils_tryDecode(_this.newDestinationCaller, B.StringEncoding_2), "new_message_body", A.StringUtils_tryDecode(_this.newMessageBody, B.StringEncoding_2)], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_ZmI;
    },
    get$values() {
      var _this = this;
      return [_this.from, _this.originalMessage, _this.originalAttestation, _this.newMessageBody, _this.newDestinationCaller];
    }
  };
  A._CCTPV1MsgReplaceMessage_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgSendMessage.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", _this.from, "message_body", A.StringUtils_tryDecode(_this.messageBody, B.StringEncoding_2), "destination_domain", _this.destinationDomain, "recipient", A.StringUtils_tryDecode(_this.recipient, B.StringEncoding_2)], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_GeE;
    },
    get$values() {
      var _this = this;
      return [_this.from, _this.destinationDomain, _this.recipient, _this.messageBody];
    }
  };
  A._CCTPV1MsgSendMessage_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgSendMessageWithCaller.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", _this.from, "message_body", A.StringUtils_tryDecode(_this.messageBody, B.StringEncoding_2), "destination_domain", _this.destinationDomain, "recipient", A.StringUtils_tryDecode(_this.recipient, B.StringEncoding_2), "destination_caller", A.StringUtils_tryDecode(_this.destinationCaller, B.StringEncoding_2)], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_L7D;
    },
    get$values() {
      var _this = this;
      return [_this.from, _this.destinationDomain, _this.recipient, _this.messageBody, _this.destinationCaller];
    }
  };
  A._CCTPV1MsgSendMessageWithCaller_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgUnlinkTokenPair.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", _this.from, "remote_domain", _this.remoteDomain, "remote_token", A.StringUtils_tryDecode(_this.remoteToken, B.StringEncoding_2), "local_token", _this.localToken], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_ilW;
    },
    get$values() {
      var _this = this;
      return [_this.from, _this.remoteDomain, _this.remoteToken, _this.localToken];
    }
  };
  A._CCTPV1MsgUnlinkTokenPair_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgUnpauseBurningAndMinting.prototype = {
    get$fieldIds() {
      return A._setArrayType([1], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_lKR;
    },
    get$values() {
      return [this.from];
    }
  };
  A._CCTPV1MsgUnpauseBurningAndMinting_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgUnpauseSendingAndReceivingMessages.prototype = {
    get$fieldIds() {
      return A._setArrayType([1], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_a3E;
    },
    get$values() {
      return [this.from];
    }
  };
  A._CCTPV1MsgUnpauseSendingAndReceivingMessages_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgUpdateAttesterManager.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from, "new_attester_manager", this.newAttesterManager], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_DvS;
    },
    get$values() {
      return [this.from, this.newAttesterManager];
    }
  };
  A._CCTPV1MsgUpdateAttesterManager_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgUpdateMaxMessageBodySize.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from, "message_size", this.messageSize], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_8nl;
    },
    get$values() {
      return [this.from, this.messageSize];
    }
  };
  A._CCTPV1MsgUpdateMaxMessageBodySize_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgUpdateOwner.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from, "new_owner", this.newOwner], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_Nrb;
    },
    get$values() {
      return [this.from, this.newOwner];
    }
  };
  A._CCTPV1MsgUpdateOwner_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgUpdatePauser.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from, "new_pauser", this.newPauser], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_8wT;
    },
    get$values() {
      return [this.from, this.newPauser];
    }
  };
  A._CCTPV1MsgUpdatePauser_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgUpdateSignatureThreshold.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from, "amount", this.amount], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_Sk1;
    },
    get$values() {
      return [this.from, this.amount];
    }
  };
  A._CCTPV1MsgUpdateSignatureThreshold_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1MsgUpdateTokenController.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["from", this.from, "new_token_controller", this.newTokenController], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CCTPV1Types_2ky;
    },
    get$values() {
      return [this.from, this.newTokenController];
    }
  };
  A._CCTPV1MsgUpdateTokenController_CCTPV1Service_AminoMessage.prototype = {};
  A.CCTPV1Types.prototype = {};
  A.CCTPV1Types_findService_closure.prototype = {
    call$1(e) {
      return type$.TypeUrl._as(e).aminoType === this.type;
    },
    $signature: 233
  };
  A.EvmosService.prototype = {};
  A.EvmosErc20V1Params.prototype = {
    get$values() {
      return [this.enableErc20, this.nativePrecompiles, this.dynamicPrecompiles];
    },
    get$fieldIds() {
      return A._setArrayType([1, 3, 4], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["enable_erc20", this.enableErc20, "native_precompiles", this.nativePrecompiles, "dynamic_precompiles", this.dynamicPrecompiles], type$.String, type$.dynamic);
    }
  };
  A.EvmosErc20V1MsgConvertCoin.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    toJson$0() {
      var t1 = this.coin;
      t1 = t1 == null ? null : t1.toJson$0();
      return A.LinkedHashMap_LinkedHashMap$_literal(["coin", t1, "receiver", this.receiver, "sender", this.sender], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_QOj;
    },
    get$values() {
      return [this.coin, this.receiver, this.sender];
    }
  };
  A._EvmosErc20V1MsgConvertCoin_EvmosService_AminoMessage.prototype = {};
  A.EvmosErc20V1MsgConvertERC20.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["contract_address", _this.contractAddress, "amount", _this.amount, "receiver", _this.receiver, "sender", _this.sender], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_sO8;
    },
    get$values() {
      var _this = this;
      return [_this.contractAddress, _this.amount, _this.receiver, _this.sender];
    }
  };
  A._EvmosErc20V1MsgConvertERC20_EvmosService_AminoMessage.prototype = {};
  A.EvmosErc20V1MsgRegisterERC20.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["authority", this.authority, "erc20addresses", this.erc20addresses], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_5mW;
    },
    get$values() {
      return [this.authority, this.erc20addresses];
    }
  };
  A._EvmosErc20V1MsgRegisterERC20_EvmosService_AminoMessage.prototype = {};
  A.EvmosErc20V1MsgToggleConversion.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["authority", this.authority, "token", this.token], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_h6w;
    },
    get$values() {
      return [this.authority, this.token];
    }
  };
  A._EvmosErc20V1MsgToggleConversion_EvmosService_AminoMessage.prototype = {};
  A.EvmosErc20V1MsgUpdateParams.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      var t1 = this.params;
      t1 = t1 == null ? null : t1.toJson$0();
      return A.LinkedHashMap_LinkedHashMap$_literal(["authority", this.authority, "params", t1], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_AdM;
    },
    get$values() {
      return [this.authority, this.params];
    }
  };
  A._EvmosErc20V1MsgUpdateParams_EvmosService_AminoMessage.prototype = {};
  A.EvmosEthermintEVMV1ChainConfig.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 20, 21, 22, 23], type$.JSArray_int);
    },
    toJson$0() {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, _this = this, _null = null,
        t1 = _this.homesteadBlock;
      t1 = t1 == null ? _null : t1.toString$0(0);
      t2 = _this.daoForkBlock;
      t2 = t2 == null ? _null : t2.toString$0(0);
      t3 = _this.eip150Block;
      t3 = t3 == null ? _null : t3.toString$0(0);
      t4 = _this.eip155Block;
      t4 = t4 == null ? _null : t4.toString$0(0);
      t5 = _this.eip158Block;
      t5 = t5 == null ? _null : t5.toString$0(0);
      t6 = _this.byzantiumBlock;
      t6 = t6 == null ? _null : t6.toString$0(0);
      t7 = _this.constantinopleBlock;
      t7 = t7 == null ? _null : t7.toString$0(0);
      t8 = _this.petersburgBlock;
      t8 = t8 == null ? _null : t8.toString$0(0);
      t9 = _this.istanbulBlock;
      t9 = t9 == null ? _null : t9.toString$0(0);
      t10 = _this.muirGlacierBlock;
      t10 = t10 == null ? _null : t10.toString$0(0);
      t11 = _this.berlinBlock;
      t11 = t11 == null ? _null : t11.toString$0(0);
      t12 = _this.londonBlock;
      t12 = t12 == null ? _null : t12.toString$0(0);
      t13 = _this.arrowGlacierBlock;
      t13 = t13 == null ? _null : t13.toString$0(0);
      t14 = _this.grayGlacierBlock;
      t14 = t14 == null ? _null : t14.toString$0(0);
      t15 = _this.mergeNetsplitBlock;
      t15 = t15 == null ? _null : t15.toString$0(0);
      t16 = _this.shanghaiBlock;
      t16 = t16 == null ? _null : t16.toString$0(0);
      t17 = _this.cancunBlock;
      t17 = t17 == null ? _null : t17.toString$0(0);
      return A.LinkedHashMap_LinkedHashMap$_literal(["homestead_block", t1, "dao_fork_block", t2, "dao_fork_support", _this.daoForkSupport, "eip150_block", t3, "eip150_hash", _this.eip150Hash, "eip155_block", t4, "eip158_block", t5, "byzantium_block", t6, "constantinople_block", t7, "petersburg_block", t8, "istanbul_block", t9, "muir_glacier_block", t10, "berlin_block", t11, "london_block", t12, "arrow_glacier_block", t13, "gray_glacier_block", t14, "merge_netsplit_block", t15, "shanghai_block", t16, "cancun_block", t17], type$.String, type$.dynamic);
    },
    get$values() {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, _this = this, _null = null,
        t1 = _this.homesteadBlock;
      t1 = t1 == null ? _null : t1.toString$0(0);
      t2 = _this.daoForkBlock;
      t2 = t2 == null ? _null : t2.toString$0(0);
      t3 = _this.eip150Block;
      t3 = t3 == null ? _null : t3.toString$0(0);
      t4 = _this.eip155Block;
      t4 = t4 == null ? _null : t4.toString$0(0);
      t5 = _this.eip158Block;
      t5 = t5 == null ? _null : t5.toString$0(0);
      t6 = _this.byzantiumBlock;
      t6 = t6 == null ? _null : t6.toString$0(0);
      t7 = _this.constantinopleBlock;
      t7 = t7 == null ? _null : t7.toString$0(0);
      t8 = _this.petersburgBlock;
      t8 = t8 == null ? _null : t8.toString$0(0);
      t9 = _this.istanbulBlock;
      t9 = t9 == null ? _null : t9.toString$0(0);
      t10 = _this.muirGlacierBlock;
      t10 = t10 == null ? _null : t10.toString$0(0);
      t11 = _this.berlinBlock;
      t11 = t11 == null ? _null : t11.toString$0(0);
      t12 = _this.londonBlock;
      t12 = t12 == null ? _null : t12.toString$0(0);
      t13 = _this.arrowGlacierBlock;
      t13 = t13 == null ? _null : t13.toString$0(0);
      t14 = _this.grayGlacierBlock;
      t14 = t14 == null ? _null : t14.toString$0(0);
      t15 = _this.mergeNetsplitBlock;
      t15 = t15 == null ? _null : t15.toString$0(0);
      t16 = _this.shanghaiBlock;
      t16 = t16 == null ? _null : t16.toString$0(0);
      t17 = _this.cancunBlock;
      t17 = t17 == null ? _null : t17.toString$0(0);
      return [t1, t2, _this.daoForkSupport, t3, _this.eip150Hash, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17];
    }
  };
  A.EvmosEthermintEVMV1Log.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6, 7, 8, 9], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["address", _this.address, "topics", _this.topics, "data", A.BytesUtils_toHexString(_this.data, true, null), "block_number", _this.blockNumber, "tx_hash", _this.transactionHash, "tx_index", _this.transactionIndex, "block_hash", _this.blockHash, "index", _this.logIndex, "removed", _this.removed], type$.String, type$.dynamic);
    },
    get$values() {
      var _this = this;
      return [_this.address, _this.topics, _this.data, _this.blockNumber, _this.transactionHash, _this.transactionIndex, _this.blockHash, _this.logIndex, _this.removed];
    }
  };
  A.EvmosEthermintEVMV1Params.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6], type$.JSArray_int);
    },
    toJson$0() {
      var t2, t3, _this = this,
        t1 = _this.extraEips;
      if (t1 == null)
        t1 = null;
      else {
        t2 = A._arrayInstanceType(t1);
        t3 = t2._eval$1("MappedListIterable<1,String>");
        t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.EvmosEthermintEVMV1Params_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      }
      t2 = _this.chainConfig;
      t2 = t2 == null ? null : t2.toJson$0();
      return A.LinkedHashMap_LinkedHashMap$_literal(["evm_denom", _this.evmDenom, "enable_create", _this.enableCreate, "enable_call", _this.enableCall, "extra_eips", t1, "chain_config", t2, "allow_unprotected_txs", _this.allowUnprotectedTxs], type$.String, type$.dynamic);
    },
    get$values() {
      var _this = this;
      return [_this.evmDenom, _this.enableCreate, _this.enableCall, _this.extraEips, _this.chainConfig, _this.allowUnprotectedTxs];
    }
  };
  A.EvmosEthermintEVMV1Params_EvmosEthermintEVMV1Params$fromJson_closure.prototype = {
    call$1(e) {
      return A.CosmosUtils_toBytes(A._asString(e));
    },
    $signature: 31
  };
  A.EvmosEthermintEVMV1Params_toJson_closure.prototype = {
    call$1(e) {
      return A.StringUtils_decode(type$.List_int._as(e), false, B.StringEncoding_2);
    },
    $signature: 17
  };
  A.EvmosEthermintEVMV1MsgEthereumTx.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["data", _this.data.message, "size", _this.size, "hash", _this.hash, "from", _this.from], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_hnd;
    },
    get$values() {
      var _this = this;
      return [_this.data, _this.size, _this.hash, _this.from];
    }
  };
  A._EvmosEthermintEVMV1MsgEthereumTx_EvmosService_AminoMessage.prototype = {};
  A.EvmosEthermintEVMV1MsgEthereumTxResponse.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this,
        t1 = _this.logs,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.EvmosEthermintEVMV1MsgEthereumTxResponse_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["hash", _this.hash, "logs", t1, "ret", A.BytesUtils_tryToHexString(_this.ret, null), "vm_error", _this.vmError, "gas_used", _this.gasUsed], type$.String, type$.dynamic);
    },
    get$values() {
      var _this = this;
      return [_this.hash, _this.logs, _this.ret, _this.vmError, _this.gasUsed];
    }
  };
  A.EvmosEthermintEVMV1MsgEthereumTxResponse_EvmosEthermintEVMV1MsgEthereumTxResponse$fromJson_closure.prototype = {
    call$1(e) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      type$.Map_String_dynamic._as(e);
      t1 = A._asString(e.$index(0, "address"));
      t2 = A._asString(e.$index(0, "block_hash"));
      t3 = A.BigintUtils_parse(e.$index(0, "block_number"), true);
      t4 = A.CosmosUtils_toBytes(A._asString(e.$index(0, "data")));
      t5 = A.BigintUtils_parse(e.$index(0, "index"), true);
      t6 = A._asBool(e.$index(0, "removed"));
      t7 = type$.nullable_List_dynamic._as(e.$index(0, "topics"));
      t7 = t7 == null ? null : J.cast$1$0$ax(t7, type$.String);
      if (t7 == null)
        t7 = A._setArrayType([], type$.JSArray_String);
      t8 = A._asString(e.$index(0, "tx_hash"));
      t9 = A.BigintUtils_parse(e.$index(0, "tx_index"), true);
      t4 = A.List_List$unmodifiable(t4, type$.int);
      return new A.EvmosEthermintEVMV1Log(t1, A.List_List$unmodifiable(t7, type$.String), t4, t3, t8, t9, t2, t5, t6);
    },
    $signature: 230
  };
  A.EvmosEthermintEVMV1MsgEthereumTxResponse_toJson_closure.prototype = {
    call$1(e) {
      return type$.EvmosEthermintEVMV1Log._as(e).toJson$0();
    },
    $signature: 229
  };
  A.EvmosEthermintEVMV1MsgUpdateParams.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["authority", this.authority, "params", this.params.toJson$0()], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_USN;
    },
    get$values() {
      return [this.authority, this.params];
    }
  };
  A._EvmosEthermintEVMV1MsgUpdateParams_EvmosService_AminoMessage.prototype = {};
  A.EvmosEthermintFeeMarketV1Params.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 5, 6, 7, 8], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["no_base_fee", _this.noBaseFee, "base_fee_change_denominator", _this.baseFeeChangeDenominator, "elasticity_multiplier", _this.elasticityMultiplier, "enable_height", _this.enableHeight.toString$0(0), "base_fee", _this.baseFee, "min_gas_price", _this.minGasPrice, "min_gas_multiplier", _this.minGasMultiplier], type$.String, type$.dynamic);
    },
    get$values() {
      var _this = this;
      return [_this.noBaseFee, _this.baseFeeChangeDenominator, _this.elasticityMultiplier, _this.enableHeight, _this.baseFee, _this.minGasPrice, _this.minGasMultiplier];
    }
  };
  A.EvmosEthermintFeeMarketV1MsgUpdateParams.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["authority", this.authority, "params", this.params.toJson$0()], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_YH9;
    },
    get$values() {
      return [this.authority, this.params];
    }
  };
  A._EvmosEthermintFeeMarketV1MsgUpdateParams_EvmosService_AminoMessage.prototype = {};
  A.EvmosInflationV1ExponentialCalculation.prototype = {
    get$values() {
      var _this = this;
      return [_this.a, _this.r, _this.c, _this.bondingTarget, _this.maxVariance];
    },
    get$fieldIds() {
      return A._setArrayType([1, 3, 3, 4, 5], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["a", _this.a, "r", _this.r, "c", _this.c, "bonding_target", _this.bondingTarget, "max_variance", _this.maxVariance], type$.String, type$.dynamic);
    }
  };
  A.EvmosInflationV1InflationDistribution.prototype = {
    get$values() {
      return [this.stakingRewards, this.usageIncentives, this.communityPool];
    },
    get$fieldIds() {
      return A._setArrayType([1, 3, 3], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["staking_rewards", this.stakingRewards, "usage_incentives", this.usageIncentives, "community_pool", this.communityPool], type$.String, type$.dynamic);
    }
  };
  A.EvmosInflationV1Params.prototype = {
    get$values() {
      var _this = this;
      return [_this.mintDenom, _this.exponentialCalculation, _this.inflationDistribution, _this.enableInflation];
    },
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    toJson$0() {
      var t2, _this = this,
        t1 = _this.exponentialCalculation;
      t1 = t1 == null ? null : t1.toJson$0();
      t2 = _this.inflationDistribution;
      t2 = t2 == null ? null : t2.toJson$0();
      return A.LinkedHashMap_LinkedHashMap$_literal(["mint_denom", _this.mintDenom, "exponential_calculation", t1, "inflation_distribution", t2, "enable_inflation", _this.enableInflation], type$.String, type$.dynamic);
    }
  };
  A.EvmosInflationV1MsgUpdateParams.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      var t1 = this.params;
      t1 = t1 == null ? null : t1.toJson$0();
      return A.LinkedHashMap_LinkedHashMap$_literal(["authority", this.authority, "params", t1], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_HXx;
    },
    get$values() {
      return [this.authority, this.params];
    }
  };
  A._EvmosInflationV1MsgUpdateParams_EvmosService_AminoMessage.prototype = {};
  A.EvmosRevenueV1Params.prototype = {
    get$values() {
      return [this.enableRevenue, this.developerShares, this.addrDerivationCostCreate];
    },
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["enable_revenue", this.enableRevenue, "developer_shares", this.developerShares, "addr_derivation_cost_create", this.addrDerivationCostCreate], type$.String, type$.dynamic);
    }
  };
  A.EvmosRevenueV1MsgCancelRevenue.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["contract_address", this.contractAddress, "deployer_address", this.deployerAddress], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_7jk;
    },
    get$values() {
      return [this.contractAddress, this.deployerAddress];
    }
  };
  A._EvmosRevenueV1MsgCancelRevenue_EvmosService_AminoMessage.prototype = {};
  A.EvmosRevenueV1MsgRegisterRevenue.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this,
        t1 = _this.nonces,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("String(1)")._as(new A.EvmosRevenueV1MsgRegisterRevenue_toJson_closure());
      t2 = t2._eval$1("MappedListIterable<1,String>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t3, t2), t2._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["contract_address", _this.contractAddress, "deployer_address", _this.deployerAddress, "withdrawer_address", _this.withdrawerAddress, "nonces", t1], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_clp;
    },
    get$values() {
      var _this = this;
      return [_this.contractAddress, _this.deployerAddress, _this.withdrawerAddress, _this.nonces];
    }
  };
  A.EvmosRevenueV1MsgRegisterRevenue_EvmosRevenueV1MsgRegisterRevenue$fromJson_closure.prototype = {
    call$1(e) {
      return A.BigintUtils_parse(e, true);
    },
    $signature: 228
  };
  A.EvmosRevenueV1MsgRegisterRevenue_toJson_closure.prototype = {
    call$1(e) {
      return type$.BigInt._as(e).toString$0(0);
    },
    $signature: 227
  };
  A._EvmosRevenueV1MsgRegisterRevenue_EvmosService_AminoMessage.prototype = {};
  A.EvmosRevenueV1MsgUpdateParams.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      var t1 = this.params;
      t1 = t1 == null ? null : t1.toJson$0();
      return A.LinkedHashMap_LinkedHashMap$_literal(["authority", this.authority, "params", t1], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_oZ2;
    },
    get$values() {
      return [this.authority, this.params];
    }
  };
  A._EvmosRevenueV1MsgUpdateParams_EvmosService_AminoMessage.prototype = {};
  A.EvmosRevenueV1MsgUpdateRevenue.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["contract_address", this.contractAddress, "deployer_address", this.deployerAddress, "withdrawer_address", this.withdrawerAddress], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_zvJ;
    },
    get$values() {
      return [this.contractAddress, this.deployerAddress, this.withdrawerAddress];
    }
  };
  A._EvmosRevenueV1MsgUpdateRevenue_EvmosService_AminoMessage.prototype = {};
  A.EvmosErc20V1Types.prototype = {};
  A.EvmosErc20V1Types_findService_closure.prototype = {
    call$1(e) {
      return type$.EvmosErc20V1Types._as(e).aminoType === this.type;
    },
    $signature: 226
  };
  A.EvmosVestingV1Period.prototype = {
    get$values() {
      return [this.length, this.amount];
    },
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      var t2,
        t1 = this.length;
      t1 = t1 == null ? null : t1.toString$0(0);
      t2 = this.amount;
      return A.LinkedHashMap_LinkedHashMap$_literal(["length", t1, "amount", t2 == null ? null : t2.toJson$0()], type$.String, type$.dynamic);
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.EvmosVestingV2MsgConvertVestingAccount.prototype = {
    get$fieldIds() {
      return A._setArrayType([1], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["vesting_address", this.vestingAddress], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_uXw;
    },
    get$values() {
      return [this.vestingAddress];
    }
  };
  A._EvmosVestingV2MsgConvertVestingAccount_EvmosService_AminoMessage.prototype = {};
  A.EvmosVestingV2MsgCreateClawbackVestingAccount.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["funder_address", this.funderAddress, "vesting_address", this.vestingAddress, "enable_gov_clawback", this.enableGovClawback], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_E2n;
    },
    get$values() {
      return [this.funderAddress, this.vestingAddress, this.enableGovClawback];
    }
  };
  A._EvmosVestingV2MsgCreateClawbackVestingAccount_EvmosService_AminoMessage.prototype = {};
  A.EvmosVestingV2MsgFundVestingAccount.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_int);
    },
    toJson$0() {
      var t2, t3, t4, t5, _this = this,
        t1 = _this.startTime;
      t1 = t1 == null ? null : t1.toString$0(0);
      t2 = _this.lockupPeriods;
      if (t2 == null)
        t2 = null;
      else {
        t3 = A._arrayInstanceType(t2);
        t4 = t3._eval$1("MappedListIterable<1,Map<String,@>>");
        t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Map<String,@>(1)")._as(new A.EvmosVestingV2MsgFundVestingAccount_toJson_closure()), t4), t4._eval$1("ListIterable.E"));
      }
      t3 = _this.vestingPeriods;
      if (t3 == null)
        t3 = null;
      else {
        t4 = A._arrayInstanceType(t3);
        t5 = t4._eval$1("MappedListIterable<1,Map<String,@>>");
        t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("Map<String,@>(1)")._as(new A.EvmosVestingV2MsgFundVestingAccount_toJson_closure0()), t5), t5._eval$1("ListIterable.E"));
      }
      return A.LinkedHashMap_LinkedHashMap$_literal(["funder_address", _this.funderAddress, "vesting_address", _this.vestingAddress, "start_time", t1, "lockup_periods", t2, "vesting_periods", t3], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_X6N;
    },
    get$values() {
      var _this = this;
      return [_this.funderAddress, _this.vestingAddress, _this.startTime, _this.lockupPeriods, _this.vestingPeriods];
    }
  };
  A.EvmosVestingV2MsgFundVestingAccount_toJson_closure.prototype = {
    call$1(e) {
      return type$.EvmosVestingV1Period._as(e).toJson$0();
    },
    $signature: 159
  };
  A.EvmosVestingV2MsgFundVestingAccount_toJson_closure0.prototype = {
    call$1(e) {
      return type$.EvmosVestingV1Period._as(e).toJson$0();
    },
    $signature: 159
  };
  A._EvmosVestingV2MsgFundVestingAccount_EvmosService_AminoMessage.prototype = {};
  A.EvmosVestingV2MsgClawback.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["funder_address", this.funderAddress, "account_address", this.accountAddress, "dest_address", this.destAddress], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_2IE;
    },
    get$values() {
      return [this.funderAddress, this.accountAddress, this.destAddress];
    }
  };
  A._EvmosVestingV2MsgClawback_EvmosService_AminoMessage.prototype = {};
  A.EvmosVestingV2MsgUpdateVestingFunder.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["funder_address", this.funderAddress, "new_funder_address", this.newFunderAddress, "vesting_address", this.vestingAddress], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.EvmosErc20V1Types_kbj;
    },
    get$values() {
      return [this.funderAddress, this.newFunderAddress, this.vestingAddress];
    }
  };
  A._EvmosVestingV2MsgUpdateVestingFunder_EvmosService_AminoMessage.prototype = {};
  A.AnyMessage.prototype = {};
  A.AnyJsonMessage.prototype = {
    get$fieldIds() {
      return A.throwExpression(A.DartCosmosSdkPluginException$(string$.Failed, null));
    },
    toJson$0() {
      return this.message;
    },
    get$values() {
      return A.throwExpression(A.DartCosmosSdkPluginException$(string$.Failed, null));
    }
  };
  A.IbcService.prototype = {};
  A.MsgTransfer.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6, 7, 8], type$.JSArray_int);
    },
    toJson$1$amino(amino) {
      var t4, _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        t3 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
      t3.$indexSet(0, "source_port", _this.sourcePort);
      t3.$indexSet(0, "source_channel", _this.sourceChannel);
      t3.$indexSet(0, "token", _this.token.toJson$0());
      t3.$indexSet(0, "sender", _this.sender);
      t3.$indexSet(0, "receiver", _this.receiver);
      t4 = _this.timeoutHeight;
      if (amino) {
        t4 = t4 == null ? null : t4.toJson$0();
        t1 = t4 == null ? A.LinkedHashMap_LinkedHashMap$_empty(t1, t2) : t4;
      } else
        t1 = t4 == null ? null : t4.toJson$0();
      t3.$indexSet(0, "timeout_height", t1);
      t1 = _this.timeoutTimestamp;
      t3.$indexSet(0, "timeout_timestamp", t1 == null ? null : t1.toString$0(0));
      if (!amino)
        t3.$indexSet(0, "memo", _this.memo);
      return t3;
    },
    toJson$0() {
      return this.toJson$1$amino(false);
    },
    toAminoJson$0() {
      var t1 = this.toJson$1$amino(true);
      t1.removeWhere$1(0, new A.MsgTransfer_toAminoJson_closure());
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", "cosmos-sdk/MsgTransfer", "value", t1], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.IbcTypes_3Km;
    },
    get$values() {
      var _this = this;
      return [_this.sourcePort, _this.sourceChannel, _this.token, _this.sender, _this.receiver, _this.timeoutHeight, _this.timeoutTimestamp, _this.memo];
    }
  };
  A.MsgTransfer_toAminoJson_closure.prototype = {
    call$2(k, v) {
      A._asString(k);
      return v == null;
    },
    $signature: 2
  };
  A._MsgTransfer_IbcService_AminoMessage.prototype = {};
  A.IbcClientHeight.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      var t2,
        t1 = this.revisionNumber;
      t1 = t1 == null ? null : t1.toString$0(0);
      t2 = this.revisionHeight;
      return A.LinkedHashMap_LinkedHashMap$_literal(["revision_number", t1, "revision_height", t2 == null ? null : t2.toString$0(0)], type$.String, type$.dynamic);
    },
    get$values() {
      return [this.revisionNumber, this.revisionHeight];
    }
  };
  A.IbcTypes.prototype = {};
  A.OpInitService.prototype = {};
  A.OpInitOpHostV1MsgInitiateTokenDeposit.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_int);
    },
    toJson$0() {
      var t2, _this = this,
        t1 = _this.bridgeId;
      t1 = t1 == null ? null : t1.toString$0(0);
      t2 = _this.amount;
      t2 = t2 == null ? null : t2.toJson$0();
      return A.LinkedHashMap_LinkedHashMap$_literal(["sender", _this.sender, "bridge_id", t1, "to", _this.to, "amount", t2, "data", A.StringUtils_tryDecode(_this.data, B.StringEncoding_2)], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.OpInitOpHostV1Types_nXZ;
    },
    get$values() {
      var _this = this;
      return [_this.sender, _this.bridgeId, _this.to, _this.amount, _this.data];
    }
  };
  A._OpInitOpHostV1MsgInitiateTokenDeposit_OpInitService_AminoMessage.prototype = {};
  A.OpInitOpHostV1Types.prototype = {};
  A.OpInitOpHostV1Types_findService_closure.prototype = {
    call$1(e) {
      return type$.OpInitOpHostV1Types._as(e).aminoType === this.type;
    },
    $signature: 220
  };
  A.BankV1Beta1Service.prototype = {};
  A.Input.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      var t1 = this.coins,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.Input_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["address", this.address.address, "coins", t1], type$.String, type$.dynamic);
    },
    get$values() {
      return [this.address.address, this.coins];
    }
  };
  A.Input_Input$fromJson_closure.prototype = {
    call$1(e) {
      return A.Coin_Coin$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 21
  };
  A.Input_toJson_closure.prototype = {
    call$1(e) {
      return type$.Coin._as(e).toJson$0();
    },
    $signature: 22
  };
  A.Output.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      var t1 = this.coins,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.Output_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["address", this.address.address, "coins", t1], type$.String, type$.dynamic);
    },
    get$values() {
      return [this.address.address, this.coins];
    }
  };
  A.Output_Output$fromJson_closure.prototype = {
    call$1(e) {
      return A.Coin_Coin$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 21
  };
  A.Output_toJson_closure.prototype = {
    call$1(e) {
      return type$.Coin._as(e).toJson$0();
    },
    $signature: 22
  };
  A.MsgMultiSend.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      var t4,
        t1 = this.inputs,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.MsgMultiSend_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      t2 = this.outputs;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,Map<String,@>>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Map<String,@>(1)")._as(new A.MsgMultiSend_toJson_closure0()), t4), t4._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["inputs", t1, "outputs", t2], type$.String, type$.dynamic);
    },
    get$values() {
      return [this.inputs, this.outputs];
    },
    get$typeUrl() {
      return B.BankV1beta1Types_jr7;
    }
  };
  A.MsgMultiSend_MsgMultiSend$fromJson_closure.prototype = {
    call$1(e) {
      return A.Output_Output$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 215
  };
  A.MsgMultiSend_MsgMultiSend$fromJson_closure0.prototype = {
    call$1(e) {
      return A.Input_Input$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 213
  };
  A.MsgMultiSend_toJson_closure.prototype = {
    call$1(e) {
      return type$.Input._as(e).toJson$0();
    },
    $signature: 203
  };
  A.MsgMultiSend_toJson_closure0.prototype = {
    call$1(e) {
      return type$.Output._as(e).toJson$0();
    },
    $signature: 196
  };
  A._MsgMultiSend_BankV1Beta1Service_AminoMessage.prototype = {};
  A.MsgSend.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    toJson$0() {
      var t1 = this.amount,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.MsgSend_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["amount", t1, "from_address", this.fromAddress.address, "to_address", this.toAddress.address], type$.String, type$.dynamic);
    },
    get$values() {
      return [this.fromAddress.address, this.toAddress.address, this.amount];
    },
    get$typeUrl() {
      return B.BankV1beta1Types_854;
    }
  };
  A.MsgSend_MsgSend$fromJson_closure.prototype = {
    call$1(e) {
      return A.Coin_Coin$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 21
  };
  A.MsgSend_toJson_closure.prototype = {
    call$1(e) {
      return type$.Coin._as(e).toJson$0();
    },
    $signature: 22
  };
  A._MsgSend_BankV1Beta1Service_AminoMessage.prototype = {};
  A.BankV1beta1Types.prototype = {};
  A.Coin.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["amount", this.amount.toString$0(0), "denom", this.denom], type$.String, type$.dynamic);
    },
    get$values() {
      return [this.denom, this.amount.toString$0(0)];
    }
  };
  A.CrisisV1Beta1Service.prototype = {};
  A.MsgVerifyInvariant.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    toJson$0() {
      var t1 = this.sender;
      t1 = t1 == null ? null : t1.address;
      return A.LinkedHashMap_LinkedHashMap$_literal(["sender", t1, "invariant_module_name", this.invariantModuleName, "invariant_route", this.invariantRoute], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.CrisisV1beta1_UQu;
    },
    get$values() {
      var t1 = this.sender;
      t1 = t1 == null ? null : t1.address;
      return [t1, this.invariantModuleName, this.invariantRoute];
    }
  };
  A.MsgVerifyInvariant_MsgVerifyInvariant$fromJson_closure.prototype = {
    call$1(e) {
      return A.CosmosBaseAddress_CosmosBaseAddress(A._asString(e));
    },
    $signature: 187
  };
  A._MsgVerifyInvariant_CrisisV1Beta1Service_AminoMessage.prototype = {};
  A.CrisisV1beta1.prototype = {};
  A.DistributionV1Beta1Service.prototype = {};
  A.DistributionMsgFundCommunityPool.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      var t2, t3,
        t1 = this.amount;
      if (t1 == null)
        t1 = null;
      else {
        t2 = A._arrayInstanceType(t1);
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
        t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.DistributionMsgFundCommunityPool_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      }
      return A.LinkedHashMap_LinkedHashMap$_literal(["amount", t1, "depositor", this.depositor], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.DistributionV1beta1Types_wpV;
    },
    get$values() {
      return [this.amount];
    }
  };
  A.DistributionMsgFundCommunityPool_DistributionMsgFundCommunityPool$fromJson_closure.prototype = {
    call$1(e) {
      return A.Coin_Coin$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 21
  };
  A.DistributionMsgFundCommunityPool_toJson_closure.prototype = {
    call$1(e) {
      return type$.Coin._as(e).toJson$0();
    },
    $signature: 22
  };
  A._DistributionMsgFundCommunityPool_DistributionV1Beta1Service_AminoMessage.prototype = {};
  A.DistributionMsgSetWithdrawAddress.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      var t2,
        t1 = this.delegatorAddress;
      t1 = t1 == null ? null : t1.address;
      t2 = this.withdrawAddress;
      return A.LinkedHashMap_LinkedHashMap$_literal(["delegator_address", t1, "withdraw_address", t2 == null ? null : t2.address], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.DistributionV1beta1Types_aXN;
    },
    get$values() {
      var t2,
        t1 = this.delegatorAddress;
      t1 = t1 == null ? null : t1.address;
      t2 = this.withdrawAddress;
      return [t1, t2 == null ? null : t2.address];
    }
  };
  A._DistributionMsgSetWithdrawAddress_DistributionV1Beta1Service_AminoMessage.prototype = {};
  A.DistributionMsgWithdrawDelegatorReward.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      var t2,
        t1 = this.delegatorAddress;
      t1 = t1 == null ? null : t1.address;
      t2 = this.validatorAddress;
      return A.LinkedHashMap_LinkedHashMap$_literal(["delegator_address", t1, "validator_address", t2 == null ? null : t2.address], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.DistributionV1beta1Types_dLI;
    },
    get$values() {
      var t2,
        t1 = this.delegatorAddress;
      t1 = t1 == null ? null : t1.address;
      t2 = this.validatorAddress;
      return [t1, t2 == null ? null : t2.address];
    }
  };
  A._DistributionMsgWithdrawDelegatorReward_DistributionV1Beta1Service_AminoMessage.prototype = {};
  A.DistributionMsgWithdrawValidatorCommission.prototype = {
    get$fieldIds() {
      return A._setArrayType([1], type$.JSArray_int);
    },
    toJson$0() {
      var t1 = this.validatorAddress;
      return A.LinkedHashMap_LinkedHashMap$_literal(["validator_address", t1 == null ? null : t1.address], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.DistributionV1beta1Types_OEy;
    },
    get$values() {
      var t1 = this.validatorAddress;
      return [t1 == null ? null : t1.address];
    }
  };
  A._DistributionMsgWithdrawValidatorCommission_DistributionV1Beta1Service_AminoMessage.prototype = {};
  A.DistributionV1beta1Types.prototype = {};
  A.GovV1Beta1Service.prototype = {};
  A.GovVoteOption.prototype = {};
  A.GovVoteOption_fromName_closure.prototype = {
    call$1(e) {
      return type$.GovVoteOption._as(e).name === this.name;
    },
    $signature: 186
  };
  A.GovVoteOption_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartCosmosSdkPluginException$("No GovVoteOption element found for the given value.", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.GovMsgDeposit.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    toJson$0() {
      var t3, t4, t5,
        t1 = this.proposalId.toString$0(0),
        t2 = this.depositor;
      t2 = t2 == null ? null : t2.address;
      t3 = this.amount;
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,Map<String,@>>");
      t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("Map<String,@>(1)")._as(new A.GovMsgDeposit_toJson_closure()), t5), t5._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["proposal_id", t1, "depositor", t2, "amount", t3], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.GovV1beta1types_PFS;
    },
    get$values() {
      var t1 = this.depositor;
      t1 = t1 == null ? null : t1.address;
      return [this.proposalId, t1, this.amount];
    }
  };
  A.GovMsgDeposit_GovMsgDeposit$fromJson_closure.prototype = {
    call$1(e) {
      return A.Coin_Coin$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 21
  };
  A.GovMsgDeposit_toJson_closure.prototype = {
    call$1(e) {
      return type$.Coin._as(e).toJson$0();
    },
    $signature: 22
  };
  A._GovMsgDeposit_GovV1Beta1Service_AminoMessage.prototype = {};
  A.GovMsgVote.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    toJson$0() {
      var t2, t3,
        t1 = this.proposalId;
      t1 = t1 == null ? null : t1.toString$0(0);
      t2 = this.voter;
      t2 = t2 == null ? null : t2.address;
      t3 = this.option;
      return A.LinkedHashMap_LinkedHashMap$_literal(["proposal_id", t1, "voter", t2, "option", t3 == null ? null : t3.value], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.GovV1beta1types_OgS;
    },
    get$values() {
      var t2,
        t1 = this.voter;
      t1 = t1 == null ? null : t1.address;
      t2 = this.option;
      t2 = t2 == null ? null : t2.value;
      return [this.proposalId, t1, t2];
    }
  };
  A.GovMsgVote_GovMsgVote$fromJson_closure.prototype = {
    call$1(e) {
      return A.GovVoteOption_fromName(A._asString(e));
    },
    $signature: 184
  };
  A._GovMsgVote_GovV1Beta1Service_AminoMessage.prototype = {};
  A.GovV1beta1types.prototype = {};
  A.SlashingV1Beta1Service.prototype = {};
  A.SlashingMsgUnjail.prototype = {
    get$fieldIds() {
      return A._setArrayType([1], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["validator_addr", this.validatorAddr.address], type$.String, type$.dynamic);
    },
    get$typeUrl() {
      return B.SlashingV1beta1Types_UoZ;
    },
    get$values() {
      return [this.validatorAddr.address];
    }
  };
  A._SlashingMsgUnjail_SlashingV1Beta1Service_AminoMessage.prototype = {};
  A.SlashingV1beta1Types.prototype = {};
  A.StakingV1Beta1Service.prototype = {};
  A.CommissionRates.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["rate", this.rate, "max_rate", this.maxRate, "max_change_rate", this.maxChangeRate], type$.String, type$.dynamic);
    },
    get$values() {
      return [this.rate, this.maxRate, this.maxChangeRate];
    }
  };
  A.Description.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["moniker", _this.moniker, "identity", _this.identity, "website", _this.website, "security_contact", _this.securityContact, "details", _this.details], type$.String, type$.dynamic);
    },
    get$values() {
      var _this = this;
      return [_this.moniker, _this.identity, _this.website, _this.securityContact, _this.details];
    }
  };
  A.MsgBeginRedelegate.prototype = {
    toJson$0() {
      var t2, t3, _this = this,
        t1 = _this.delegatorAddress;
      t1 = t1 == null ? null : t1.address;
      t2 = _this.validatorSrcAddress;
      t2 = t2 == null ? null : t2.address;
      t3 = _this.validatorDstAddress;
      t3 = t3 == null ? null : t3.address;
      return A.LinkedHashMap_LinkedHashMap$_literal(["delegator_address", t1, "validator_src_address", t2, "validator_dst_address", t3, "amount", _this.amount.toJson$0()], type$.String, type$.dynamic);
    },
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    get$typeUrl() {
      return B.StakingV1beta1Types_we9;
    },
    get$values() {
      var t2, t3, _this = this,
        t1 = _this.delegatorAddress;
      t1 = t1 == null ? null : t1.address;
      t2 = _this.validatorSrcAddress;
      t2 = t2 == null ? null : t2.address;
      t3 = _this.validatorDstAddress;
      t3 = t3 == null ? null : t3.address;
      return [t1, t2, t3, _this.amount];
    }
  };
  A._MsgBeginRedelegate_StakingV1Beta1Service_AminoMessage.prototype = {};
  A.MsgCreateValidator.prototype = {
    toJson$1$amino(amino) {
      var t5, t6, _this = this, _null = null,
        t1 = _this.description.toJson$0(),
        t2 = _this.commission.toJson$0(),
        t3 = _this.minSelfDelegation.toString$0(0),
        t4 = _this.delegatorAddress;
      t4 = t4 == null ? _null : t4.address;
      t5 = _this.validatorAddress;
      t5 = t5 == null ? _null : t5.address;
      t6 = _this.pubkey;
      if (amino)
        t6 = t6 == null ? _null : A.LinkedHashMap_LinkedHashMap$_literal(["type", t6.typeUrl, "value", A.StringUtils_decode(t6.value, false, B.StringEncoding_2)], type$.String, type$.dynamic);
      else
        t6 = t6 == null ? _null : t6.toJson$0();
      return A.LinkedHashMap_LinkedHashMap$_literal(["description", t1, "commission", t2, "min_self_delegation", t3, "delegator_address", t4, "validator_address", t5, "pubkey", t6, "value", _this.value.toJson$0()], type$.String, type$.dynamic);
    },
    toJson$0() {
      return this.toJson$1$amino(false);
    },
    toAminoJson$0() {
      var t1 = this.toJson$1$amino(true);
      t1.removeWhere$1(0, new A.MsgCreateValidator_toAminoJson_closure());
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", "cosmos-sdk/MsgCreateValidator", "value", t1], type$.String, type$.dynamic);
    },
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6, 7], type$.JSArray_int);
    },
    get$typeUrl() {
      return B.StakingV1beta1Types_bar;
    },
    get$values() {
      var t3, _this = this,
        t1 = _this.minSelfDelegation.toString$0(0),
        t2 = _this.delegatorAddress;
      t2 = t2 == null ? null : t2.address;
      t3 = _this.validatorAddress;
      t3 = t3 == null ? null : t3.address;
      return [_this.description, _this.commission, t1, t2, t3, _this.pubkey, _this.value];
    }
  };
  A.MsgCreateValidator_MsgCreateValidator$fromJson_closure.prototype = {
    call$1(e) {
      return A.Any_Any$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 176
  };
  A.MsgCreateValidator_toAminoJson_closure.prototype = {
    call$2(k, v) {
      A._asString(k);
      return v == null;
    },
    $signature: 2
  };
  A._MsgCreateValidator_StakingV1Beta1Service_AminoMessage.prototype = {};
  A.MsgDelegate.prototype = {
    toJson$0() {
      var t2,
        t1 = this.delegatorAddress;
      t1 = t1 == null ? null : t1.address;
      t2 = this.validatorAddress;
      t2 = t2 == null ? null : t2.address;
      return A.LinkedHashMap_LinkedHashMap$_literal(["delegator_address", t1, "validator_address", t2, "amount", this.amount.toJson$0()], type$.String, type$.dynamic);
    },
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    get$typeUrl() {
      return B.StakingV1beta1Types_y9J;
    },
    get$values() {
      var t2,
        t1 = this.delegatorAddress;
      t1 = t1 == null ? null : t1.address;
      t2 = this.validatorAddress;
      t2 = t2 == null ? null : t2.address;
      return [t1, t2, this.amount];
    }
  };
  A._MsgDelegate_StakingV1Beta1Service_AminoMessage.prototype = {};
  A.MsgEditValidator.prototype = {
    toJson$0() {
      var t3, _this = this,
        t1 = _this.description.toJson$0(),
        t2 = _this.validatorAddress;
      t2 = t2 == null ? null : t2.address;
      t3 = _this.minSelfDelegation;
      t3 = t3 == null ? null : t3.toString$0(0);
      return A.LinkedHashMap_LinkedHashMap$_literal(["description", t1, "validator_address", t2, "commission_rate", _this.commissionRate, "min_self_delegation", t3], type$.String, type$.dynamic);
    },
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    get$typeUrl() {
      return B.StakingV1beta1Types_WEA;
    },
    get$values() {
      var t2, _this = this,
        t1 = _this.validatorAddress;
      t1 = t1 == null ? null : t1.address;
      t2 = _this.minSelfDelegation;
      t2 = t2 == null ? null : t2.toString$0(0);
      return [_this.description, t1, _this.commissionRate, t2];
    }
  };
  A._MsgEditValidator_StakingV1Beta1Service_AminoMessage.prototype = {};
  A.MsgUndelegate.prototype = {
    toJson$0() {
      var t2,
        t1 = this.delegatorAddress;
      t1 = t1 == null ? null : t1.address;
      t2 = this.validatorAddress;
      t2 = t2 == null ? null : t2.address;
      return A.LinkedHashMap_LinkedHashMap$_literal(["delegator_address", t1, "validator_address", t2, "amount", this.amount.toJson$0()], type$.String, type$.dynamic);
    },
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    get$typeUrl() {
      return B.StakingV1beta1Types_v0Y;
    },
    get$values() {
      var t2,
        t1 = this.delegatorAddress;
      t1 = t1 == null ? null : t1.address;
      t2 = this.validatorAddress;
      t2 = t2 == null ? null : t2.address;
      return [t1, t2, this.amount];
    }
  };
  A._MsgUndelegate_StakingV1Beta1Service_AminoMessage.prototype = {};
  A.StakingV1beta1Types.prototype = {};
  A.Fee.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    toJson$0() {
      var t4, _this = this,
        t1 = _this.amount,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.Fee_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      t2 = _this.gasLimit.toString$0(0);
      t3 = _this.payer;
      t3 = t3 == null ? null : t3.address;
      t4 = _this.granter;
      return A.LinkedHashMap_LinkedHashMap$_literal(["amount", t1, "gas_limit", t2, "payer", t3, "granter", t4 == null ? null : t4.address], type$.String, type$.dynamic);
    },
    toAminoJson$0() {
      var t4, _this = this,
        t1 = _this.amount,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.Fee_toAminoJson_closure()), t3), t3._eval$1("ListIterable.E"));
      t2 = _this.gasLimit.toString$0(0);
      t3 = _this.payer;
      t3 = t3 == null ? null : t3.address;
      t4 = _this.granter;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["amount", t1, "gas", t2, "payer", t3, "granter", t4 == null ? null : t4.address], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.Fee_toAminoJson_closure0());
      return t1;
    },
    get$values() {
      var t2, _this = this,
        t1 = _this.payer;
      t1 = t1 == null ? null : t1.address;
      t2 = _this.granter;
      t2 = t2 == null ? null : t2.address;
      return [_this.amount, _this.gasLimit, t1, t2];
    }
  };
  A.Fee_toJson_closure.prototype = {
    call$1(e) {
      return type$.Coin._as(e).toJson$0();
    },
    $signature: 22
  };
  A.Fee_toAminoJson_closure.prototype = {
    call$1(e) {
      return type$.Coin._as(e).toJson$0();
    },
    $signature: 22
  };
  A.Fee_toAminoJson_closure0.prototype = {
    call$2(k, v) {
      A._asString(k);
      return v == null;
    },
    $signature: 2
  };
  A.SignDoc.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["body_bytes", A.BytesUtils_toHexString(_this.bodyBytes, true, null), "auth_info_bytes", A.BytesUtils_toHexString(_this.authInfoBytes, true, null), "chain_id", _this.chainId, "account_number", _this.accountNumber.toString$0(0)], type$.String, type$.dynamic);
    },
    get$values() {
      var _this = this;
      return [_this.bodyBytes, _this.authInfoBytes, _this.chainId, _this.accountNumber];
    }
  };
  A.VestingV1Beta1Service.prototype = {};
  A.MsgCreateVestingAccount.prototype = {
    toJson$0() {
      var t3, t4, _this = this, _null = null,
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic),
        t2 = _this.fromAddress;
      t1.$indexSet(0, "from_address", t2 == null ? _null : t2.address);
      t2 = _this.toAddress;
      t1.$indexSet(0, "to_address", t2 == null ? _null : t2.address);
      t2 = _this.amount;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,Map<String,@>>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Map<String,@>(1)")._as(new A.MsgCreateVestingAccount_toJson_closure()), t4), t4._eval$1("ListIterable.E"));
      t1.$indexSet(0, "amount", t2);
      t2 = _this.endTime;
      t1.$indexSet(0, "end_time", t2 == null ? _null : t2.toString$0(0));
      t1.$indexSet(0, "delayed", _this.delayed);
      t2 = _this.startTime;
      t1.$indexSet(0, "start_time", t2 == null ? _null : t2.toString$0(0));
      return t1;
    },
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6], type$.JSArray_int);
    },
    get$typeUrl() {
      return B.VestingV1beta1Types_nhV;
    },
    get$values() {
      var t2, _this = this,
        t1 = _this.fromAddress;
      t1 = t1 == null ? null : t1.address;
      t2 = _this.toAddress;
      t2 = t2 == null ? null : t2.address;
      return [t1, t2, _this.amount, _this.endTime, _this.delayed, _this.startTime];
    }
  };
  A.MsgCreateVestingAccount_MsgCreateVestingAccount$fromJson_closure.prototype = {
    call$1(e) {
      return A.Coin_Coin$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 21
  };
  A.MsgCreateVestingAccount_toJson_closure.prototype = {
    call$1(coin) {
      return type$.Coin._as(coin).toJson$0();
    },
    $signature: 22
  };
  A._MsgCreateVestingAccount_VestingV1Beta1Service_AminoMessage.prototype = {};
  A.VestingV1beta1Types.prototype = {};
  A.CosmosSDKService.prototype = {};
  A.ProtocolBufferDecoder__decodeInt_closure.prototype = {
    call$1(element) {
      return (A._asInt(element) & 128) === 0;
    },
    $signature: 30
  };
  A.ProtocolBufferDecoderResult.prototype = {
    toString$0(_) {
      return "tagNumber: " + this.tagNumber + " value: " + A.S(this.value);
    }
  };
  A._Result.prototype = {
    toString$0(_) {
      return "value: " + A.S(this.value) + " consumed: " + this.consumed;
    }
  };
  A.QuickProtocolBufferResults_getField_closure.prototype = {
    call$1(element) {
      return type$.ProtocolBufferDecoderResult_dynamic._as(element).tagNumber === this.tag;
    },
    $signature: 171
  };
  A.QuickProtocolBufferResults_getField_closure0.prototype = {
    call$1(e) {
      return type$.ProtocolBufferDecoderResult_dynamic._as(e).tagNumber;
    },
    $signature: 172
  };
  A.Any.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.typeUrl, this.value];
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type_url", this.typeUrl, "value", A.StringUtils_decode(this.value, false, B.StringEncoding_2)], type$.String, type$.dynamic);
    }
  };
  A.ProtobufTimestamp.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["seconds", this.seconds, "nanos", this.nanos], type$.String, type$.dynamic);
    },
    toString$0(_) {
      var t1 = this.nanos.toInt$0(0),
        t2 = B.JSInt_methods.$mod(t1, 1000);
      t1 = B.JSInt_methods._tdivFast$1(t1 - t2, 1000);
      if (t1 < -864e13 || t1 > 864e13)
        A.throwExpression(A.RangeError$range(t1, -864e13, 864e13, "millisecondsSinceEpoch", null));
      if (t1 === 864e13 && t2 !== 0)
        A.throwExpression(A.ArgumentError$value(t2, "microsecond", string$.Time_i));
      A.checkNotNullable(false, "isUtc", type$.bool);
      return new A.DateTime(t1, t2, false).toIso8601String$0();
    },
    get$values() {
      return [this.seconds, this.nanos];
    }
  };
  A.CosmosProtocolBuffer.prototype = {
    toBuffer$0() {
      var t1, t2, t3, i, t4, value, tagNumber, _this = this;
      if (_this.get$values().length !== _this.get$fieldIds().length)
        throw A.wrapException(A.DartCosmosSdkPluginException$(string$.The_va, A.LinkedHashMap_LinkedHashMap$_literal(["values", _this.get$values(), "fieldIds", _this.get$fieldIds(), "class", A.getRuntimeTypeOfDartObject(_this).toString$0(0)], type$.String, type$.dynamic)));
      t1 = type$.int;
      t2 = J.JSArray_JSArray$growable(0, t1);
      for (t3 = type$.List_int, i = 0; i < _this.get$values().length; ++i) {
        t4 = _this.get$values();
        if (!(i < t4.length))
          return A.ioore(t4, i);
        value = t4[i];
        t4 = _this.get$fieldIds();
        if (!(i < t4.length))
          return A.ioore(t4, i);
        tagNumber = t4[i];
        if (value == null)
          continue;
        t4 = t3._as(A.ProtocolBufferEncoder_encode(tagNumber, value));
        A.BytesUtils_validateListOfBytes(t4);
        B.JSArray_methods.addAll$1(t2, t4);
      }
      return A.List_List$from(t2, true, t1);
    },
    toString$0(_) {
      return A.getRuntimeTypeOfDartObject(this).toString$0(0) + this.toJson$0().toString$0(0);
    }
  };
  A.TypeUrl.prototype = {
    toString$0(_) {
      return "@type: " + this.typeUrl;
    }
  };
  A.CosmosMessage.prototype = {};
  A.AminoTypes.prototype = {
    _enumToString$0() {
      return "AminoTypes." + this._name;
    }
  };
  A.AminoTypes_fromType_closure.prototype = {
    call$1(e) {
      return B.JSString_methods.startsWith$1(type$.AminoTypes._as(e).type, this.type);
    },
    $signature: 173
  };
  A.AminoMessage.prototype = {
    get$aminoType() {
      var t1 = this.get$typeUrl().aminoType;
      t1.toString;
      return t1;
    },
    toAminoJson$0() {
      var t1 = this.get$aminoType(),
        t2 = this.toJson$0();
      t2.removeWhere$1(0, new A.AminoMessage_toAminoJson_closure());
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", t1, "value", t2], type$.String, type$.dynamic);
    },
    $isCosmosMessage: 1,
    $isServiceMessage: 1
  };
  A.AminoMessage_fromJson_closure.prototype = {
    call$1(notfound) {
      if (notfound)
        return new A.AminoJsonParserException("Invalid amino message: 'type' field is missing.", null);
      return new A.AminoJsonParserException("Invalid amino message: 'type' field must be a valid string.", null);
    },
    $signature: 15
  };
  A.AminoMessage_fromJson_closure0.prototype = {
    call$1(notfound) {
      if (notfound)
        return new A.AminoJsonParserException("Invalid amino message: 'value' field is missing.", null);
      return new A.AminoJsonParserException("Invalid amino message: 'value' field must be a valid object.", null);
    },
    $signature: 15
  };
  A.AminoMessage_toAminoJson_closure.prototype = {
    call$2(k, v) {
      A._asString(k);
      return v == null;
    },
    $signature: 2
  };
  A.ServiceMessage.prototype = {};
  A.QuickMap_asListOfMap_closure.prototype = {
    call$1(e) {
      return type$.Map_dynamic_dynamic._as(e).cast$2$0(0, type$.String, type$.dynamic);
    },
    $signature: 16
  };
  A.QuickMap__valueAsList_closure.prototype = {
    call$1(e) {
      return type$.Map_dynamic_dynamic._as(e).cast$2$0(0, type$.String, type$.dynamic);
    },
    $signature: 16
  };
  A.CosmosUtils_sortAminoJsonTx_closure.prototype = {
    call$2(a, b) {
      return B.JSString_methods.compareTo$1(A._asString(a), A._asString(b));
    },
    $signature: 174
  };
  A.CosmosUtils_sortAminoJsonTx_closure0.prototype = {
    call$1(e) {
      return A.CosmosUtils_sortAminoJsonTx(e);
    },
    $signature: 175
  };
  A.RetryClient.prototype = {
    send$1(request) {
      return this.send$body$RetryClient(request);
    },
    send$body$RetryClient(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.StreamedResponse),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$self = this, splitter, i, response, error, stackTrace, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, request0, t14, t15, t16, t17, t18, exception, $async$exception;
      var $async$send$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              request.super$BaseRequest$finalize();
              splitter = new A.StreamSplitter(new A.ByteStream(A.Stream_Stream$value(request._bodyBytes, type$.List_int)), A._setArrayType([], type$.JSArray_Result_List_int), A.LinkedHashSet_LinkedHashSet$_empty(type$.StreamController_List_int), new A.FutureGroup(new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_List_dynamic), type$._AsyncCompleter_List_dynamic), [], type$.FutureGroup_dynamic), type$.StreamSplitter_List_int);
              i = 0;
              t1 = type$._Future_void, t2 = type$.void, t3 = type$.nullable_void_Function, t4 = request.headers, t5 = type$.void_Function_List_int, t6 = $async$self._inner, t7 = type$.Stream_List_int, t8 = request.method, t9 = request.url, t10 = type$._Future_bool, t11 = type$.Future_bool, t12 = $async$self._when;
            case 3:
              // for condition
              // trivial condition
              response = null;
              $async$handler = 6;
              t13 = t7._as(J.split$0$s(splitter));
              request0 = A.StreamedRequest$(t8, t9);
              t14 = request._bodyBytes;
              request0._base_request$_checkFinalized$0();
              request0._contentLength = t14.length;
              request0._base_request$_checkFinalized$0();
              request0._followRedirects = true;
              request0.headers.addAll$1(0, t4);
              t14 = request._maxRedirects;
              request0._base_request$_checkFinalized$0();
              request0._maxRedirects = t14;
              request0._base_request$_checkFinalized$0();
              request0._persistentConnection = true;
              t14 = request0._streamed_request$_controller;
              t15 = A._instanceType(t14)._eval$1("_StreamSinkWrapper<1>");
              t16 = new A._StreamSinkWrapper(t14, t15);
              t17 = t13.$ti;
              t16 = t17._eval$1("~(1)?")._as(t5._as(t16.get$add(t16)));
              t18 = t3._as(new A._StreamSinkWrapper(t14, t15).get$close());
              t13._async$_controller._async$_subscribe$4(t17._eval$1("~(1)?")._as(t16), new A._StreamSinkWrapper(t14, t15).get$addError(), t18, true);
              $async$goto = 9;
              return A._asyncAwait(t6.send$1(request0), $async$send$1);
            case 9:
              // returning from await.
              response = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 8;
              break;
            case 6:
              // catch
              $async$handler = 5;
              $async$exception = $async$errorStack.pop();
              error = A.unwrapException($async$exception);
              stackTrace = A.getTraceFromException($async$exception);
              $async$goto = !J.$eq$(i, 3) ? 10 : 12;
              break;
            case 10:
              // then
              t13 = A._defaultWhenError(error, stackTrace);
              if (!t11._is(t13)) {
                A._asBool(t13);
                t14 = new A._Future($.Zone__current, t10);
                t14._state = 8;
                t14._resultOrListeners = t13;
                t13 = t14;
              }
              $async$goto = 13;
              return A._asyncAwait(t13, $async$send$1);
            case 13:
              // returning from await.
              t13 = !$async$result;
              // goto join
              $async$goto = 11;
              break;
            case 12:
              // else
              t13 = true;
            case 11:
              // join
              if (t13)
                throw $async$exception;
              // goto after finally
              $async$goto = 8;
              break;
            case 5:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 8:
              // after finally
              $async$goto = response != null ? 14 : 15;
              break;
            case 14:
              // then
              $async$goto = !J.$eq$(i, 3) ? 16 : 18;
              break;
            case 16:
              // then
              t13 = t12.call$1(response);
              if (!t11._is(t13)) {
                A._asBool(t13);
                t14 = new A._Future($.Zone__current, t10);
                t14._state = 8;
                t14._resultOrListeners = t13;
                t13 = t14;
              }
              $async$goto = 19;
              return A._asyncAwait(t13, $async$send$1);
            case 19:
              // returning from await.
              t13 = !$async$result;
              // goto join
              $async$goto = 17;
              break;
            case 18:
              // else
              t13 = true;
            case 17:
              // join
              if (t13) {
                $async$returnValue = response;
                // goto return
                $async$goto = 1;
                break;
              }
              t13 = response.stream;
              t13._stream.listen$4$cancelOnError$onDone$onError(A._instanceType(t13)._eval$1("~(StreamView.T)?")._as(new A.RetryClient_send_closure()), null, null, null).cancel$0().catchError$1(new A.RetryClient_send_closure0());
            case 15:
              // join
              $async$goto = 20;
              return A._asyncAwait(A.Future_Future$delayed(A._defaultDelay(i), null, t2), $async$send$1);
            case 20:
              // returning from await.
              t13 = new A._Future($.Zone__current, t1);
              t13._state = 8;
              $async$goto = 21;
              return A._asyncAwait(t13, $async$send$1);
            case 21:
              // returning from await.
              t13 = i;
              if (typeof t13 !== "number") {
                $async$returnValue = t13.$add();
                // goto return
                $async$goto = 1;
                break;
              }
              i = t13 + 1;
              // goto for condition
              $async$goto = 3;
              break;
            case 4:
              // after for
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$send$1, $async$completer);
    }
  };
  A.RetryClient_send_closure.prototype = {
    call$1(_) {
      type$.List_int._as(_);
    },
    $signature: 128
  };
  A.RetryClient_send_closure0.prototype = {
    call$1(_) {
    },
    $signature: 20
  };
  A.BaseClient.prototype = {
    _sendUnstreamed$5(method, url, headers, body, encoding) {
      return this._sendUnstreamed$body$BaseClient(method, url, type$.nullable_Map_String_String._as(headers), body, encoding);
    },
    _sendUnstreamed$3(method, url, headers) {
      return this._sendUnstreamed$5(method, url, headers, null, null);
    },
    _sendUnstreamed$body$BaseClient(method, url, headers, body, encoding) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, t1, contentType, request, $async$temp1;
      var $async$_sendUnstreamed$5 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              request = A.Request$(method, url);
              if (headers != null)
                request.headers.addAll$1(0, headers);
              if (body != null)
                if (typeof body == "string")
                  request.set$body(body);
                else if (type$.List_dynamic._is(body)) {
                  t1 = type$.List_int._as(J.cast$1$0$ax(body, type$.int));
                  request._checkFinalized$0();
                  request._bodyBytes = A.toUint8List(t1);
                } else if (type$.Map_dynamic_dynamic._is(body)) {
                  t1 = type$.String;
                  t1 = type$.Map_String_String._as(body.cast$2$0(0, t1, t1));
                  contentType = request.get$_contentType();
                  if (contentType == null)
                    request.set$_contentType(A.MediaType$("application", "x-www-form-urlencoded", null));
                  else if (contentType.type + "/" + contentType.subtype !== "application/x-www-form-urlencoded")
                    A.throwExpression(A.StateError$('Cannot set the body fields of a Request with content-type "' + contentType.get$mimeType() + '".'));
                  request.set$body(A.mapToQuery(t1, request.get$encoding()));
                } else
                  throw A.wrapException(A.ArgumentError$('Invalid request body "' + A.S(body) + '".', null));
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait($async$self.send$1(request), $async$_sendUnstreamed$5);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.Response_fromStream($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_sendUnstreamed$5, $async$completer);
    },
    $isClient: 1
  };
  A.BaseRequest.prototype = {
    get$contentLength() {
      return this._contentLength;
    },
    finalize$0() {
      if (this._finalized)
        throw A.wrapException(A.StateError$("Can't finalize a finalized Request."));
      this._finalized = true;
      return B.ByteStream__EmptyStream;
    },
    _base_request$_checkFinalized$0() {
      if (!this._finalized)
        return;
      throw A.wrapException(A.StateError$("Can't modify a finalized Request."));
    },
    toString$0(_) {
      return this.method + " " + this.url.toString$0(0);
    }
  };
  A.BaseRequest_closure.prototype = {
    call$2(key1, key2) {
      return A._asString(key1).toLowerCase() === A._asString(key2).toLowerCase();
    },
    $signature: 177
  };
  A.BaseRequest_closure0.prototype = {
    call$1(key) {
      return B.JSString_methods.get$hashCode(A._asString(key).toLowerCase());
    },
    $signature: 178
  };
  A.BaseResponse.prototype = {
    BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(statusCode, contentLength, headers, isRedirect, persistentConnection, reasonPhrase, request) {
      var t1 = this.statusCode;
      if (t1 < 100)
        throw A.wrapException(A.ArgumentError$("Invalid status code " + t1 + ".", null));
      else {
        t1 = this.contentLength;
        if (t1 != null && t1 < 0)
          throw A.wrapException(A.ArgumentError$("Invalid content length " + A.S(t1) + ".", null));
      }
    }
  };
  A.BrowserClient.prototype = {
    send$1(request) {
      return this.send$body$BrowserClient(request);
    },
    send$body$BrowserClient(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.StreamedResponse),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$self = this, bodyBytes, t1, _0_0, contentLength, header, response, contentLengthHeader, contentLength0, headers, e, st, t2, _this, t3, t4, t5, t6, exception, $async$exception;
      var $async$send$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self._isClosed)
                throw A.wrapException(A.ClientException$("HTTP request failed. Client is already closed.", request.url));
              $async$goto = 3;
              return A._asyncAwait(request.finalize$0().toBytes$0(), $async$send$1);
            case 3:
              // returning from await.
              bodyBytes = $async$result;
              $async$handler = 5;
              t2 = request.url;
              _this = t2.toString$0(0);
              t3 = !J.get$isEmpty$asx(bodyBytes) ? bodyBytes : null;
              t4 = type$.String;
              t1 = A.LinkedHashMap_LinkedHashMap$_empty(t4, type$.Object);
              _0_0 = request.get$contentLength();
              contentLength = null;
              if (_0_0 != null) {
                contentLength = _0_0;
                J.$indexSet$ax(t1, "content-length", contentLength);
              }
              for (t5 = request.headers, t5 = new A.LinkedHashMapEntriesIterable(t5, A._instanceType(t5)._eval$1("LinkedHashMapEntriesIterable<1,2>")).get$iterator(0); t5.moveNext$0();) {
                t6 = t5.__js_helper$_current;
                t6.toString;
                header = t6;
                J.$indexSet$ax(t1, header.key, header.value);
              }
              t1 = A.jsify(t1);
              t1.toString;
              t5 = type$.JSObject;
              t5._as(t1);
              t6 = t5._as($async$self._abortController.signal);
              $async$goto = 8;
              return A._asyncAwait(A.promiseToFuture(t5._as(init.G.fetch(_this, {method: request.method, headers: t1, body: t3, credentials: "same-origin", redirect: "follow", signal: t6})), t5), $async$send$1);
            case 8:
              // returning from await.
              response = $async$result;
              contentLengthHeader = A._asStringQ(t5._as(response.headers).get("content-length"));
              contentLength0 = contentLengthHeader != null ? A.Primitives_parseInt(contentLengthHeader, null) : null;
              if (contentLength0 == null && contentLengthHeader != null) {
                t1 = A.ClientException$("Invalid content-length header [" + contentLengthHeader + "].", t2);
                throw A.wrapException(t1);
              }
              headers = A.LinkedHashMap_LinkedHashMap$_empty(t4, t4);
              t5._as(response.headers).forEach(A._functionToJS3(new A.BrowserClient_send_closure(headers)));
              t1 = A._readBody(request, response);
              t2 = A._asInt(response.status);
              t3 = headers;
              t4 = contentLength0;
              A.Uri_parse(A._asString(response.url), 0, null);
              t5 = A._asString(response.statusText);
              t1 = new A.StreamedResponseV2(A.toByteStream(t1), request, t2, t5, t4, t3, false, true);
              t1.BaseResponse$7$contentLength$headers$isRedirect$persistentConnection$reasonPhrase$request(t2, t4, t3, false, true, t5, request);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 7;
              break;
            case 5:
              // catch
              $async$handler = 4;
              $async$exception = $async$errorStack.pop();
              e = A.unwrapException($async$exception);
              st = A.getTraceFromException($async$exception);
              A._rethrowAsClientException(e, st, request);
              // goto after finally
              $async$goto = 7;
              break;
            case 4:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 7:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$send$1, $async$completer);
    }
  };
  A.BrowserClient_send_closure.prototype = {
    call$3(value, header, _) {
      A._asString(value);
      this.headers.$indexSet(0, A._asString(header).toLowerCase(), value);
    },
    call$2(value, header) {
      return this.call$3(value, header, null);
    },
    $signature: 179
  };
  A._readBody_closure.prototype = {
    call$1(_) {
      return null;
    },
    $signature: 20
  };
  A._readBody_closure0.prototype = {
    call$1(_) {
      type$.Object._as(_);
      return this._box_0.isError;
    },
    $signature: 180
  };
  A.ByteStream.prototype = {
    toBytes$0() {
      var t1 = new A._Future($.Zone__current, type$._Future_Uint8List),
        completer = new A._AsyncCompleter(t1, type$._AsyncCompleter_Uint8List),
        sink = new A._ByteCallbackSink(new A.ByteStream_toBytes_closure(completer), new Uint8Array(1024));
      this.listen$4$cancelOnError$onDone$onError(type$.void_Function_List_int._as(sink.get$add(sink)), true, sink.get$close(), completer.get$completeError());
      return t1;
    }
  };
  A.ByteStream_toBytes_closure.prototype = {
    call$1(bytes) {
      return this.completer.complete$1(new Uint8Array(A._ensureNativeList(type$.List_int._as(bytes))));
    },
    $signature: 128
  };
  A.ClientException.prototype = {
    toString$0(_) {
      var t1 = this.uri.toString$0(0);
      return "ClientException: " + this.message + ", uri=" + t1;
    },
    $isException: 1
  };
  A.Request.prototype = {
    get$contentLength() {
      return this._bodyBytes.length;
    },
    get$encoding() {
      var t1, t2, _this = this;
      if (_this.get$_contentType() == null || !_this.get$_contentType().parameters._collection$_map.containsKey$1("charset"))
        return _this._defaultEncoding;
      t1 = _this.get$_contentType().parameters._collection$_map.$index(0, "charset");
      t1.toString;
      t2 = A.Encoding_getByName(t1);
      return t2 == null ? A.throwExpression(A.FormatException$('Unsupported encoding "' + t1 + '".', null, null)) : t2;
    },
    set$body(value) {
      var contentType, _this = this,
        t1 = type$.List_int._as(_this.get$encoding().encode$1(value));
      _this._checkFinalized$0();
      _this._bodyBytes = A.toUint8List(t1);
      contentType = _this.get$_contentType();
      if (contentType == null) {
        t1 = type$.String;
        _this.set$_contentType(A.MediaType$("text", "plain", A.LinkedHashMap_LinkedHashMap$_literal(["charset", _this.get$encoding().get$name()], t1, t1)));
      } else if (!contentType.parameters._collection$_map.containsKey$1("charset")) {
        t1 = type$.String;
        _this.set$_contentType(contentType.change$1$parameters(A.LinkedHashMap_LinkedHashMap$_literal(["charset", _this.get$encoding().get$name()], t1, t1)));
      }
    },
    finalize$0() {
      var t1, t2, _null = null;
      this.super$BaseRequest$finalize();
      t1 = type$._AsyncStreamController_List_int;
      t2 = new A._AsyncStreamController(_null, _null, _null, _null, t1);
      t2._async$_add$1(this._bodyBytes);
      t2._closeUnchecked$0();
      return new A.ByteStream(new A._ControllerStream(t2, t1._eval$1("_ControllerStream<1>")));
    },
    get$_contentType() {
      var contentType = this.headers.$index(0, "content-type");
      if (contentType == null)
        return null;
      return A.MediaType_MediaType$parse(contentType);
    },
    set$_contentType(value) {
      this.headers.$indexSet(0, "content-type", value.toString$0(0));
    },
    _checkFinalized$0() {
      if (!this._finalized)
        return;
      throw A.wrapException(A.StateError$("Can't modify a finalized Request."));
    }
  };
  A.Response.prototype = {};
  A.StreamedRequest.prototype = {
    finalize$0() {
      this.super$BaseRequest$finalize();
      var t1 = this._streamed_request$_controller;
      return new A.ByteStream(new A._ControllerStream(t1, A._instanceType(t1)._eval$1("_ControllerStream<1>")));
    }
  };
  A.StreamedResponse.prototype = {};
  A.StreamedResponseV2.prototype = {};
  A.mapToQuery_closure.prototype = {
    call$1(e) {
      var t1;
      type$.MapEntry_String_String._as(e);
      t1 = this.encoding;
      return A._Uri__uriEncode(1, e.key, t1, true) + "=" + A._Uri__uriEncode(1, e.value, t1, true);
    },
    $signature: 181
  };
  A.CaseInsensitiveMap.prototype = {};
  A.MediaType.prototype = {
    get$mimeType() {
      return this.type + "/" + this.subtype;
    },
    change$1$parameters(parameters) {
      var t1, parameters0;
      type$.nullable_Map_String_String._as(parameters);
      t1 = type$.String;
      parameters0 = A.LinkedHashMap_LinkedHashMap$from(this.parameters, t1, t1);
      parameters0.addAll$1(0, parameters);
      return A.MediaType$(this.type, this.subtype, parameters0);
    },
    toString$0(_) {
      var buffer = new A.StringBuffer(""),
        t1 = "" + this.type;
      buffer._contents = t1;
      t1 += "/";
      buffer._contents = t1;
      buffer._contents = t1 + this.subtype;
      t1 = this.parameters;
      t1._collection$_map.forEach$1(0, t1.$ti._eval$1("~(1,2)")._as(new A.MediaType_toString_closure(buffer)));
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.MediaType_MediaType$parse_closure.prototype = {
    call$0() {
      var t3, t4, t5, t6, parameters, t7, success, t8, value,
        t1 = this.mediaType,
        scanner = new A.StringScanner(null, t1),
        t2 = $.$get$whitespace();
      scanner.scan$1(t2);
      t3 = $.$get$token();
      scanner.expect$1(t3);
      t4 = scanner.get$lastMatch().$index(0, 0);
      t4.toString;
      scanner.expect$1("/");
      scanner.expect$1(t3);
      t5 = scanner.get$lastMatch().$index(0, 0);
      t5.toString;
      scanner.scan$1(t2);
      t6 = type$.String;
      parameters = A.LinkedHashMap_LinkedHashMap$_empty(t6, t6);
      while (true) {
        t6 = scanner._lastMatch = B.JSString_methods.matchAsPrefix$2(";", t1, scanner._string_scanner$_position);
        t7 = scanner._lastMatchPosition = scanner._string_scanner$_position;
        success = t6 != null;
        t6 = success ? scanner._lastMatchPosition = scanner._string_scanner$_position = t6.get$end() : t7;
        if (!success)
          break;
        t6 = scanner._lastMatch = t2.matchAsPrefix$2(0, t1, t6);
        scanner._lastMatchPosition = scanner._string_scanner$_position;
        if (t6 != null)
          scanner._lastMatchPosition = scanner._string_scanner$_position = t6.get$end();
        scanner.expect$1(t3);
        if (scanner._string_scanner$_position !== scanner._lastMatchPosition)
          scanner._lastMatch = null;
        t6 = scanner._lastMatch.$index(0, 0);
        t6.toString;
        scanner.expect$1("=");
        t7 = scanner._lastMatch = t3.matchAsPrefix$2(0, t1, scanner._string_scanner$_position);
        t8 = scanner._lastMatchPosition = scanner._string_scanner$_position;
        success = t7 != null;
        if (success) {
          t7 = scanner._lastMatchPosition = scanner._string_scanner$_position = t7.get$end();
          t8 = t7;
        } else
          t7 = t8;
        if (success) {
          if (t7 !== t8)
            scanner._lastMatch = null;
          t7 = scanner._lastMatch.$index(0, 0);
          t7.toString;
          value = t7;
        } else
          value = A.expectQuotedString(scanner);
        t7 = scanner._lastMatch = t2.matchAsPrefix$2(0, t1, scanner._string_scanner$_position);
        scanner._lastMatchPosition = scanner._string_scanner$_position;
        if (t7 != null)
          scanner._lastMatchPosition = scanner._string_scanner$_position = t7.get$end();
        parameters.$indexSet(0, t6, value);
      }
      scanner.expectDone$0();
      return A.MediaType$(t4, t5, parameters);
    },
    $signature: 182
  };
  A.MediaType_toString_closure.prototype = {
    call$2(attribute, value) {
      var t1, t2, t3;
      A._asString(attribute);
      A._asString(value);
      t1 = this.buffer;
      t1._contents += "; " + attribute + "=";
      t2 = $.$get$nonToken();
      t2 = t2._nativeRegExp.test(value);
      t3 = t1._contents;
      if (t2) {
        t1._contents = t3 + '"';
        t2 = A.stringReplaceAllFuncUnchecked(value, $.$get$_escapedChar(), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(new A.MediaType_toString__closure())), null);
        t1._contents = (t1._contents += t2) + '"';
      } else
        t1._contents = t3 + value;
    },
    $signature: 549
  };
  A.MediaType_toString__closure.prototype = {
    call$1(match) {
      return "\\" + A.S(match.$index(0, 0));
    },
    $signature: 51
  };
  A.expectQuotedString_closure.prototype = {
    call$1(match) {
      var t1 = match.$index(0, 1);
      t1.toString;
      return t1;
    },
    $signature: 51
  };
  A.AptosAddress.prototype = {
    createLayout$1$property(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "value")], type$.JSArray_Layout_dynamic), false, property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return this.address;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.AptosAddress))
        return false;
      return this.address === other.address;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.address);
    }
  };
  A.DartAptosPluginException.prototype = {};
  A.AptosModuleId.prototype = {
    createLayout$1$property(property) {
      return A.AptosModuleId_layout(property);
    },
    toLayoutStruct$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["address", A.LinkedHashMap_LinkedHashMap$_literal(["value", this.address.value], t1, t2), "name", this.name], t1, t2);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.AptosModuleId))
        return false;
      return this.address.$eq(0, other.address) && this.name === other.name;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.address, this.name]);
    }
  };
  A.AptosTypeTags.prototype = {
    _enumToString$0() {
      return "AptosTypeTags." + this._name;
    }
  };
  A.AptosTypeTags_fromName_closure.prototype = {
    call$1(e) {
      type$.AptosTypeTags._as(e);
      return e._name.toLowerCase() === this.name.toLowerCase();
    },
    $signature: 185
  };
  A.AptosTypeTags_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartAptosPluginException$("cannot find correct TypeTag from the given name.", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.AptosTypeTag.prototype = {
    get$variantName() {
      return this.type._name;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.AptosTypeTag))
        return false;
      if (A.getRuntimeTypeOfDartObject(this) !== A.getRuntimeTypeOfDartObject(other))
        return false;
      return this.type === other.type;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this.type);
    }
  };
  A.AptosTypeTagNumeric.prototype = {
    createLayout$1$property(property) {
      return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
    }
  };
  A.AptosTypeTagBoolean.prototype = {
    createLayout$1$property(property) {
      return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
    }
  };
  A.AptosTypeTagAddress.prototype = {
    createLayout$1$property(property) {
      return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
    }
  };
  A.AptosTypeTagSigner.prototype = {
    createLayout$1$property(property) {
      return A.StructLayout_StructLayout(A._setArrayType([], type$.JSArray_Layout_dynamic), false, property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
    }
  };
  A.AptosTypeTagGeneric.prototype = {
    createLayout$1$property(property) {
      return A.AptosTypeTagGeneric_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["index", this.index], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.AptosTypeTagGeneric))
        return false;
      if (this.index !== other.index)
        return false;
      return this.type === other.type;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.type, this.index]);
    }
  };
  A.AptosTypeTagVector.prototype = {
    createLayout$1$property(property) {
      return A.AptosTypeTagVector_layout(property);
    },
    toLayoutStruct$0() {
      var t1 = this.value,
        t2 = type$.String,
        t3 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", A.LinkedHashMap_LinkedHashMap$_literal([t1.get$variantName(), t1.toLayoutStruct$0()], t2, t3)], t2, t3);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.AptosTypeTagVector))
        return false;
      if (!this.value.$eq(0, other.value))
        return false;
      return this.type === other.type;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.type, this.value]);
    }
  };
  A.AptosStructTag.prototype = {
    createLayout$1$property(property) {
      return A.AptosStructTag_layout(property);
    },
    toLayoutStruct$0() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        t3 = A.LinkedHashMap_LinkedHashMap$_literal(["value", _this.address.value], t1, t2),
        t4 = _this.typeArgs,
        t5 = A._arrayInstanceType(t4),
        t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
      t4 = A.List_List$_of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.AptosStructTag_toLayoutStruct_closure()), t6), t6._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["address", t3, "moduleName", _this.moduleName, "name", _this.name, "typeArgs", t4], t1, t2);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof A.AptosStructTag))
        return false;
      return _this.address.$eq(0, other.address) && _this.moduleName === other.moduleName && _this.name === other.name && A.CompareUtils_iterableIsEqual(_this.typeArgs, other.typeArgs, type$.AptosTypeTag);
    },
    get$hashCode(_) {
      var _this = this;
      return A.HashCodeGenerator_generateHashCode([_this.address, _this.moduleName, _this.name, _this.typeArgs]);
    }
  };
  A.AptosStructTag_AptosStructTag$fromStruct_closure.prototype = {
    call$1(e) {
      return A.AptosTypeTag_AptosTypeTag$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 67
  };
  A.AptosStructTag_toLayoutStruct_closure.prototype = {
    call$1(e) {
      type$.AptosTypeTag._as(e);
      return A.LinkedHashMap_LinkedHashMap$_literal([e.get$variantName(), e.toLayoutStruct$0()], type$.String, type$.dynamic);
    },
    $signature: 66
  };
  A.AptosTypeTagStruct.prototype = {
    createLayout$1$property(property) {
      return A.AptosTypeTagStruct_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value.toLayoutStruct$0()], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.AptosTypeTagStruct))
        return false;
      return this.value.$eq(0, other.value);
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.type, this.value]);
    }
  };
  A.AptosTransactionPayloads.prototype = {
    _enumToString$0() {
      return "AptosTransactionPayloads." + this._name;
    }
  };
  A.AptosTransactionPayloads_fromName_closure.prototype = {
    call$1(e) {
      return type$.AptosTransactionPayloads._as(e)._name === this.name;
    },
    $signature: 188
  };
  A.AptosTransactionPayloads_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartAptosPluginException$("cannot find correct transaction payload from the given name.", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.AptosTransactionPayload.prototype = {
    get$variantName() {
      return this.type._name;
    }
  };
  A.AptosScript.prototype = {
    createLayout$1$property(property) {
      return A.AptosScript_layout(property);
    },
    toLayoutStruct$0() {
      var t4,
        t1 = this.typeArgs,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.AptosScript_toLayoutStruct_closure()), t3), t3._eval$1("ListIterable.E"));
      t2 = this.$arguments;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("MappedListIterable<1,Map<String,@>>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Map<String,@>(1)")._as(new A.AptosScript_toLayoutStruct_closure0()), t4), t4._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["byteCode", this.byteCode, "typeArgs", t1, "args", t2], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof A.AptosScript))
        return false;
      return A.BytesUtils_bytesEqual(_this.byteCode, other.byteCode) && A.CompareUtils_iterableIsEqual(_this.$arguments, other.$arguments, type$.MoveArgument_dynamic) && A.CompareUtils_iterableIsEqual(_this.typeArgs, other.typeArgs, type$.AptosTypeTag);
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this.byteCode, A._setArrayType([this.$arguments, this.typeArgs], type$.JSArray_Object));
    }
  };
  A.AptosScript_closure.prototype = {
    call$1(e) {
      return type$.AptosScriptArguments_dynamic._as(e);
    },
    $signature: 189
  };
  A.AptosScript_AptosScript$fromStruct_closure.prototype = {
    call$1(e) {
      return A.AptosTypeTag_AptosTypeTag$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 67
  };
  A.AptosScript_AptosScript$fromStruct_closure0.prototype = {
    call$1(e) {
      return A.MoveArgument_MoveArgument$fromStruct(type$.Map_String_dynamic._as(e), type$.dynamic);
    },
    $signature: 190
  };
  A.AptosScript_toLayoutStruct_closure.prototype = {
    call$1(e) {
      type$.AptosTypeTag._as(e);
      return A.LinkedHashMap_LinkedHashMap$_literal([e.get$variantName(), e.toLayoutStruct$0()], type$.String, type$.dynamic);
    },
    $signature: 66
  };
  A.AptosScript_toLayoutStruct_closure0.prototype = {
    call$1(e) {
      type$.MoveArgument_dynamic._as(e);
      return A.LinkedHashMap_LinkedHashMap$_literal([e.get$variantName(), e.toLayoutStruct$0()], type$.String, type$.dynamic);
    },
    $signature: 191
  };
  A.AptosTransactionPayloadScript.prototype = {
    createLayout$1$property(property) {
      return A.AptosTransactionPayloadScript_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["script", this.script.toLayoutStruct$0()], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.AptosTransactionPayloadScript))
        return false;
      return this.script.$eq(0, other.script);
    },
    get$hashCode(_) {
      var t1 = this.script;
      return A.HashCodeGenerator_generateBytesHashCode(t1.byteCode, A._setArrayType([t1.$arguments, t1.typeArgs], type$.JSArray_Object));
    }
  };
  A.AptosTransactionArgumentBytes.prototype = {
    createLayout$1$property(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(this.value.length, "data")], type$.JSArray_Layout_dynamic), false, property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["data", this.value], type$.String, type$.dynamic);
    }
  };
  A.AptosTransactionEntryFunction.prototype = {
    createLayout$1$property(property) {
      return A.AptosTransactionEntryFunction_layout(property);
    },
    toLayoutStruct$0() {
      var t5, _this = this,
        t1 = _this.moduleId.toLayoutStruct$0(),
        t2 = _this.typeArgs,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,Map<String,@>>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Map<String,@>(1)")._as(new A.AptosTransactionEntryFunction_toLayoutStruct_closure()), t4), t4._eval$1("ListIterable.E"));
      t3 = _this.args;
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,List<int>>");
      t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("List<int>(1)")._as(new A.AptosTransactionEntryFunction_toLayoutStruct_closure0()), t5), t5._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["moduleId", t1, "functionName", _this.functionName, "typeArgs", t2, "args", t3], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof A.AptosTransactionEntryFunction))
        return false;
      return _this.moduleId.$eq(0, other.moduleId) && _this.functionName === other.functionName && A.CompareUtils_iterableIsEqual(_this.typeArgs, other.typeArgs, type$.AptosTypeTag) && A.CompareUtils_iterableIsEqual(_this.args, other.args, type$.AptosEntryFunctionArguments_dynamic);
    },
    get$hashCode(_) {
      var _this = this;
      return A.HashCodeGenerator_generateHashCode([_this.moduleId, _this.functionName, _this.typeArgs, _this.args]);
    }
  };
  A.AptosTransactionEntryFunction_AptosTransactionEntryFunction$fromStruct_closure.prototype = {
    call$1(e) {
      return A.AptosTypeTag_AptosTypeTag$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 67
  };
  A.AptosTransactionEntryFunction_AptosTransactionEntryFunction$fromStruct_closure0.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return new A.AptosTransactionArgumentBytes(A.List_List$unmodifiable(e, type$.int));
    },
    $signature: 192
  };
  A.AptosTransactionEntryFunction_toLayoutStruct_closure.prototype = {
    call$1(e) {
      type$.AptosTypeTag._as(e);
      return A.LinkedHashMap_LinkedHashMap$_literal([e.get$variantName(), e.toLayoutStruct$0()], type$.String, type$.dynamic);
    },
    $signature: 66
  };
  A.AptosTransactionEntryFunction_toLayoutStruct_closure0.prototype = {
    call$1(e) {
      return type$.AptosEntryFunctionArguments_dynamic._as(e).toBcs$0();
    },
    $signature: 193
  };
  A.AptosTransactionPayloadEntryFunction.prototype = {
    createLayout$1$property(property) {
      return A.AptosTransactionPayloadEntryFunction_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["entryFunction", this.entryFunction.toLayoutStruct$0()], type$.String, type$.dynamic);
    }
  };
  A.AptosMultisigTransactionPayloads.prototype = {
    _enumToString$0() {
      return "AptosMultisigTransactionPayloads." + this._name;
    }
  };
  A.AptosMultisigTransactionPayloads_fromName_closure.prototype = {
    call$1(e) {
      return type$.AptosMultisigTransactionPayloads._as(e)._name === this.name;
    },
    $signature: 194
  };
  A.AptosMultisigTransactionPayloads_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartAptosPluginException$("cannot find correct multisig transaction payload from the given name.", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.AptosMultisigTransactionPayload.prototype = {
    get$variantName() {
      return this.type._name;
    }
  };
  A.AptosMultisigTransactionPayloadEntryFunction.prototype = {
    createLayout$1$property(property) {
      return A.AptosMultisigTransactionPayloadEntryFunction_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["entryFunction", this.entryFunction.toLayoutStruct$0()], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.AptosMultisigTransactionPayloadEntryFunction))
        return false;
      return this.type === other.type && this.entryFunction.$eq(0, other.entryFunction);
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.type, this.entryFunction]);
    }
  };
  A.AptosMultisig.prototype = {
    createLayout$1$property(property) {
      return A.AptosMultisig_layout(property);
    },
    toLayoutStruct$0() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        t3 = A.LinkedHashMap_LinkedHashMap$_literal(["value", this.multisigAddress.value], t1, t2),
        t4 = this.transactionPayload;
      return A.LinkedHashMap_LinkedHashMap$_literal(["multisigAddress", t3, "transactionPayload", t4 == null ? null : A.LinkedHashMap_LinkedHashMap$_literal([t4.get$variantName(), t4.toLayoutStruct$0()], t1, t2)], t1, t2);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.AptosMultisig))
        return false;
      return this.multisigAddress.$eq(0, other.multisigAddress) && J.$eq$(this.transactionPayload, other.transactionPayload);
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.multisigAddress, this.transactionPayload]);
    }
  };
  A.AptosMultisig_AptosMultisig$fromStruct_closure.prototype = {
    call$1(e) {
      return A.AptosMultisigTransactionPayload_AptosMultisigTransactionPayload$fromStruct(type$.Map_String_dynamic._as(e));
    },
    $signature: 195
  };
  A.AptosTransactionPayloadMultisig.prototype = {
    createLayout$1$property(property) {
      return A.AptosTransactionPayloadMultisig_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["multisig", this.multisig.toLayoutStruct$0()], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.AptosTransactionPayloadMultisig))
        return false;
      return this.multisig.$eq(0, other.multisig) && this.type === other.type;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this.type, this.multisig]);
    }
  };
  A.AptosRawTransaction.prototype = {
    createLayout$1$property(property) {
      return A.AptosRawTransaction_layout(property);
    },
    toLayoutStruct$0() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        t3 = _this.transactionPayload;
      return A.LinkedHashMap_LinkedHashMap$_literal(["sender", A.LinkedHashMap_LinkedHashMap$_literal(["value", _this.sender.value], t1, t2), "sequenceNumber", _this.sequenceNumber, "transactionPayload", A.LinkedHashMap_LinkedHashMap$_literal([t3.get$variantName(), t3.toLayoutStruct$0()], t1, t2), "maxGasAmount", _this.maxGasAmount, "gasUnitPrice", _this.gasUnitPrice, "expirationTimestampSecs", _this.expirationTimestampSecs, "chainId", _this.chainId], t1, t2);
    },
    $eq(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof A.AptosRawTransaction))
        return false;
      t1 = false;
      if (_this.sender.$eq(0, other.sender)) {
        t2 = _this.sequenceNumber.compareTo$1(0, other.sequenceNumber);
        if (t2 === 0)
          if (_this.transactionPayload.$eq(0, other.transactionPayload)) {
            t2 = _this.maxGasAmount.compareTo$1(0, other.maxGasAmount);
            if (t2 === 0) {
              t2 = _this.gasUnitPrice.compareTo$1(0, other.gasUnitPrice);
              if (t2 === 0) {
                t1 = _this.expirationTimestampSecs.compareTo$1(0, other.expirationTimestampSecs);
                t1 = t1 === 0 && _this.chainId === other.chainId;
              }
            }
          }
      }
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return A.HashCodeGenerator_generateHashCode([_this.sender, _this.sequenceNumber, _this.transactionPayload, _this.maxGasAmount, _this.gasUnitPrice, _this.expirationTimestampSecs, _this.chainId]);
    }
  };
  A.AptosAnyTransaction.prototype = {};
  A.AptosMultiAgentTransaction.prototype = {
    createLayout$1$property(property) {
      return A.AptosMultiAgentTransaction_layout(property);
    },
    toLayoutStruct$0() {
      var t3, t4, t5,
        t1 = this.rawTransaction.toLayoutStruct$0(),
        t2 = this.feePayerAddress;
      t2 = t2 == null ? null : A.LinkedHashMap_LinkedHashMap$_literal(["value", t2.value], type$.String, type$.dynamic);
      t3 = this.secondarySignerAddresses;
      t4 = A._arrayInstanceType(t3);
      t5 = t4._eval$1("MappedListIterable<1,Map<String,@>>");
      t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("Map<String,@>(1)")._as(new A.AptosMultiAgentTransaction_toLayoutStruct_closure()), t5), t5._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["rawTransaction", t1, "feePayerAddress", t2, "secondarySignerAddresses", t3], type$.String, type$.dynamic);
    }
  };
  A.AptosMultiAgentTransaction_AptosMultiAgentTransaction$fromStruct_closure.prototype = {
    call$1(e) {
      return A.AptosAddress_AptosAddress$fromBytes(A.QuickMap_asBytes0(type$.Map_String_dynamic._as(e), "value", type$.List_int));
    },
    $signature: 65
  };
  A.AptosMultiAgentTransaction_AptosMultiAgentTransaction$fromStruct_closure0.prototype = {
    call$1(e) {
      return A.AptosAddress_AptosAddress$fromBytes(A.QuickMap_asBytes0(type$.Map_String_dynamic._as(e), "value", type$.List_int));
    },
    $signature: 65
  };
  A.AptosMultiAgentTransaction_toLayoutStruct_closure.prototype = {
    call$1(e) {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", type$.AptosAddress._as(e).value], type$.String, type$.dynamic);
    },
    $signature: 197
  };
  A.AptosSimpleTransaction.prototype = {
    createLayout$1$property(property) {
      return A.AptosSimpleTransaction_layout(property);
    },
    toLayoutStruct$0() {
      var t1 = this.rawTransaction.toLayoutStruct$0(),
        t2 = this.feePayerAddress;
      return A.LinkedHashMap_LinkedHashMap$_literal(["rawTransaction", t1, "feePayerAddress", t2 == null ? null : A.LinkedHashMap_LinkedHashMap$_literal(["value", t2.value], type$.String, type$.dynamic)], type$.String, type$.dynamic);
    }
  };
  A.AptosSimpleTransaction_AptosSimpleTransaction$fromStruct_closure.prototype = {
    call$1(e) {
      return A.AptosAddress_AptosAddress$fromBytes(A.QuickMap_asBytes0(type$.Map_String_dynamic._as(e), "value", type$.List_int));
    },
    $signature: 65
  };
  A.BcsSerializationException.prototype = {};
  A.MoveArgumentType.prototype = {
    _enumToString$0() {
      return "MoveArgumentType." + this._name;
    }
  };
  A.MoveArgumentType_fromName_closure.prototype = {
    call$1(e) {
      return type$.MoveArgumentType._as(e)._name === this.name;
    },
    $signature: 198
  };
  A.MoveArgumentType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.BcsSerializationException$("cannot find correct transaction argument from the given name.", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.MoveType.prototype = {
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic);
    }
  };
  A.AptosEntryFunctionArguments.prototype = {};
  A.MoveArgument.prototype = {
    get$variantName() {
      return this.argumentType._name;
    },
    $isAptosEntryFunctionArguments: 1,
    $isAptosScriptArguments: 1
  };
  A.MoveU8.prototype = {
    createLayout$1$property(property) {
      return A.MoveU8_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.MoveU8))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this.value);
    }
  };
  A.MoveU16.prototype = {
    createLayout$1$property(property) {
      return A.MoveU16_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.MoveU16))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this.value);
    }
  };
  A.MoveU32.prototype = {
    createLayout$1$property(property) {
      return A.MoveU32_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.MoveU32))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this.value);
    }
  };
  A.MoveU64.prototype = {
    createLayout$1$property(property) {
      return A.MoveU64_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.MoveU64))
        return false;
      t1 = this.value.compareTo$1(0, other.value);
      return t1 === 0;
    },
    get$hashCode(_) {
      return this.value.get$hashCode(0);
    }
  };
  A.MoveU128.prototype = {
    createLayout$1$property(property) {
      return A.MoveU128_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.MoveU128))
        return false;
      t1 = this.value.compareTo$1(0, other.value);
      return t1 === 0;
    },
    get$hashCode(_) {
      return this.value.get$hashCode(0);
    }
  };
  A.MoveU256.prototype = {
    createLayout$1$property(property) {
      return A.MoveU256_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.MoveU256))
        return false;
      t1 = this.value.compareTo$1(0, other.value);
      return t1 === 0;
    },
    get$hashCode(_) {
      return this.value.get$hashCode(0);
    }
  };
  A.MoveBool.prototype = {
    createLayout$1$property(property) {
      return A.MoveBool_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.MoveBool))
        return false;
      return this.value === other.value;
    },
    get$hashCode(_) {
      return B.JSBool_methods.get$hashCode(this.value);
    }
  };
  A.MoveAddress.prototype = {
    createLayout$1$property(property) {
      return A.MoveAddress_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.MoveAddress))
        return false;
      return A.BytesUtils_bytesEqual(this.value, other.value);
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this.value, B.List_empty1);
    }
  };
  A.MoveU8Vector.prototype = {
    createLayout$1$property(property) {
      return A.MoveU8Vector_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.MoveU8Vector))
        return false;
      return A.BytesUtils_bytesEqual(this.value, other.value);
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this.value, B.List_empty1);
    }
  };
  A.MoveSerialized.prototype = {
    createLayout$1$property(property) {
      return A.MoveSerialized_layout(property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.MoveSerialized))
        return false;
      return A.BytesUtils_bytesEqual(this.value, other.value);
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateBytesHashCode(this.value, B.List_empty1);
    }
  };
  A.BcsSerialization.prototype = {
    toBcs$0() {
      var encodeBytes, enc,
        layout = this.createLayout$1$property(null),
        t1 = A._instanceType(layout)._eval$1("Layout.T")._as(this.toLayoutStruct$0()),
        t2 = layout.span,
        t3 = type$.int;
      if (t2 >= 0) {
        t3 = A.List_List$filled(t2, 0, false, t3);
        encodeBytes = t3;
      } else {
        t3 = J.JSArray_JSArray$growable(0, t3);
        encodeBytes = t3;
      }
      enc = layout.encode$2(t1, new A.LayoutByteWriter(t2 < 0, new A.LayoutByteReader(encodeBytes)));
      return t2 > 0 ? encodeBytes : B.JSArray_methods.sublist$2(encodeBytes, 0, enc);
    },
    toJson$0() {
      return type$.Map_dynamic_dynamic._as(A.BcsSerialization_toReadableObject(this.toLayoutStruct$0())).cast$2$0(0, type$.String, type$.dynamic);
    }
  };
  A.BcsSerialization_toReadableObject_closure.prototype = {
    call$2(key, value) {
      return new A.MapEntry(key, A.BcsSerialization_toReadableObject(value), type$.MapEntry_of_dynamic_and_nullable_Object);
    },
    $signature: 199
  };
  A.BcsSerialization_toReadableObject_closure0.prototype = {
    call$2(e, k) {
      return k == null;
    },
    $signature: 200
  };
  A.BcsVariantDecodeResult.prototype = {
    toString$0(_) {
      var t1 = this.result;
      return A._asString(t1.$index(0, "key")) + ": " + type$.Map_String_dynamic._as(t1.$index(0, "value")).toString$0(0);
    }
  };
  A.BcsVariantSerialization.prototype = {
    toJson$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return type$.Map_dynamic_dynamic._as(A.BcsSerialization_toReadableObject(A.LinkedHashMap_LinkedHashMap$_literal([this.get$variantName(), this.toLayoutStruct$0()], t1, t2))).cast$2$0(0, t1, t2);
    }
  };
  A.ETHAddress.prototype = {
    toString$0(_) {
      return this.address;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.ETHAddress))
        return false;
      return this.address === other.address;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.address);
    }
  };
  A.EIP4631Exception.prototype = {};
  A.EIP4631.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["domain", _this.domain, "address", _this.address, "statement", _this.statement, "uri", _this.uri, "version", _this.version, "chainId", _this.chainId, "nonce", _this.nonce, "issuedAt", _this.issuedAt, "expirationTime", _this.expirationTime, "notBefore", _this.notBefore, "requestId", _this.requestId, "resources", _this.resources], type$.String, type$.dynamic);
    },
    toMessage$0() {
      var t3, _i, _this = this,
        t1 = "" + (_this.domain + " wants you to sign in with your Solana account:\n") + (_this.address + "\n"),
        t2 = _this.statement;
      if (t2 != null && t2.length !== 0)
        t1 += "\n" + t2 + "\n";
      t2 = _this.uri;
      if (t2 != null)
        t1 += "\nURI: " + t2 + "\n";
      t2 = _this.version;
      if (t2 != null)
        t1 += "Version: " + t2 + "\n";
      t2 = _this.chainId;
      if (t2 != null)
        t1 += "Chain ID: " + t2 + "\n";
      t2 = _this.nonce;
      if (t2 != null)
        t1 += "Nonce: " + t2 + "\n";
      t2 = _this.issuedAt;
      if (t2 != null)
        t1 += "Issued At: " + t2 + "\n";
      t2 = _this.expirationTime;
      if (t2 != null)
        t1 += "Expiration Time: " + t2 + "\n";
      t2 = _this.notBefore;
      if (t2 != null)
        t1 += "Not Before: " + t2 + "\n";
      t2 = _this.requestId;
      if (t2 != null)
        t1 += "Request ID: " + t2 + "\n";
      t2 = _this.resources;
      if (t2 != null) {
        t1 += "Resources:\n";
        for (t3 = t2.length, _i = 0; _i < t3; ++_i)
          t1 += "- " + t2[_i] + "\n";
      }
      return B.JSString_methods.trimRight$0(t1.charCodeAt(0) == 0 ? t1 : t1);
    }
  };
  A.ETHPluginException.prototype = {};
  A.EthereumRequestDetails.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["method", _this.method, "body", _this.jsonBody, "id", _this.requestID, "type", _this.type], type$.String, type$.dynamic);
    }
  };
  A.EthereumRequest.prototype = {
    buildRequest$1(requestId) {
      var t2,
        inJson = this.params,
        t1 = J.getInterceptor$ax(inJson);
      t1.removeWhere$1(inJson, new A.EthereumRequest_buildRequest_closure());
      t2 = type$.dynamic;
      t1 = t1.map$1$1(inJson, new A.EthereumRequest_buildRequest_closure0(), t2);
      inJson = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      t1 = this.methodName;
      return new A.EthereumRequestDetails(t1, A.LinkedHashMap_LinkedHashMap$_literal(["jsonrpc", "2.0", "method", t1, "params", inJson, "id", requestId], type$.String, t2), B.Map_PLz9V, B.RequestServiceType_0, requestId);
    }
  };
  A.EthereumRequest_buildRequest_closure.prototype = {
    call$1(v) {
      return v == null;
    },
    $signature: 201
  };
  A.EthereumRequest_buildRequest_closure0.prototype = {
    call$1(e) {
      return e;
    },
    $signature: 32
  };
  A.EthereumMethods.prototype = {};
  A.EthereumMethods_fromName_closure.prototype = {
    call$1(e) {
      return type$.EthereumMethods._as(e).value === this.name;
    },
    $signature: 202
  };
  A.EthereumRequestDynamic.prototype = {
    toJson$0() {
      return this.params;
    }
  };
  A.EthereumProvider.prototype = {
    request$2$1(request, RESULT, SERVICERESPONSE) {
      return this.request$body$EthereumProvider(RESULT._eval$1("@<0>")._bind$1(SERVICERESPONSE)._eval$1("BaseServiceRequest<1,2,EthereumRequestDetails>")._as(request), RESULT, SERVICERESPONSE, RESULT);
    },
    request$body$EthereumProvider(request, RESULT, SERVICERESPONSE, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, t1, $async$temp1, $async$temp2;
      var $async$request$2$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = request.$ti;
              $async$temp1 = t1._eval$1("BaseServiceRequest.0");
              $async$temp2 = t1._eval$1("BaseServiceRequest.1");
              $async$goto = 3;
              return A._asyncAwait($async$self.requestDynamic$2$2$timeout(request, null, RESULT, SERVICERESPONSE), $async$request$2$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1._as($async$temp2._as($async$result));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$request$2$1, $async$completer);
    },
    requestDynamic$2$2$timeout(request, timeout, RESULT, SERVICERESPONSE) {
      return this.requestDynamic$body$EthereumProvider(RESULT._eval$1("@<0>")._bind$1(SERVICERESPONSE)._eval$1("BaseServiceRequest<1,2,EthereumRequestDetails>")._as(request), timeout, RESULT, SERVICERESPONSE, SERVICERESPONSE);
    },
    requestDynamic$body$EthereumProvider(request, timeout, RESULT, SERVICERESPONSE, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, errorJson, errorCode, t2, message, params, t1, r, error;
      var $async$requestDynamic$2$2$timeout = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              params = request.buildRequest$1($async$self._provider$_id++);
              t1 = type$.Map_String_dynamic;
              $async$goto = 3;
              return A._asyncAwait($async$self.rpc.doRequest$1$2$timeout(params, timeout, t1), $async$requestDynamic$2$2$timeout);
            case 3:
              // returning from await.
              r = $async$result.getResult$1(params);
              error = r.$index(0, "error");
              if (error != null) {
                errorJson = A.StringUtils_tryToJson(error, t1);
                errorCode = A.IntUtils_tryParse(errorJson == null ? null : errorJson.$index(0, "code"));
                t1 = J.getInterceptor$asx(error);
                t2 = t1.$index(error, "message");
                message = t2 == null ? null : J.toString$0$(t2);
                t1 = message == null ? t1.toString$0(error) : message;
                A.throwExpression(A.RPCError$(errorJson, errorCode, t1, params.toJson$0()));
              }
              $async$returnValue = A.ServiceProviderUtils_parseResponse(r.$index(0, "result"), params, SERVICERESPONSE._eval$1("0/"));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$requestDynamic$2$2$timeout, $async$completer);
    }
  };
  A.ETHTransactionType.prototype = {
    toString$0(_) {
      return "0x" + B.JSInt_methods.toRadixString$1(this.prefix, 16);
    }
  };
  A.ETHTransactionType_fromPrefix_closure.prototype = {
    call$1(element) {
      return type$.ETHTransactionType._as(element).prefix === this.prefix;
    },
    $signature: 165
  };
  A.SolAddress.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.SolAddress && other.address === this.address;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.address);
    },
    toString$0(_) {
      return this.address;
    }
  };
  A.SolanaPluginException.prototype = {};
  A.AddressTableLookup.prototype = {
    toString$0(_) {
      return "AddressTableLookup{accountKey: " + this.accountKey.toString$0(0) + ", writableIndexes: " + A.S(this.writableIndexes) + ", readonlyIndexes: " + A.S(this.readonlyIndexes) + "}";
    }
  };
  A.CompiledInstruction.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["programIdIndex", this.programIdIndex, "accounts", this.accounts, "data", A.Base58Encoder_encode(this.data, B.Base58Alphabets_0)], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "CompiledInstruction" + this.toJson$0().toString$0(0);
    }
  };
  A.Commitment.prototype = {
    toString$0(_) {
      return this.value;
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["commitment", this.value], type$.String, type$.dynamic);
    }
  };
  A.Message.prototype = {};
  A.MessageV0.prototype = {};
  A.EIP712Version.prototype = {};
  A.EIP712Version_fromVersion_closure.prototype = {
    call$1(e) {
      return type$.EIP712Version._as(e).version === this.version;
    },
    $signature: 204
  };
  A.EIP712Version_fromVersion_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.SolidityAbiException$("Invalid EIP712Version version.", A.LinkedHashMap_LinkedHashMap$_literal(["version", this.version, "expected", B.JSArray_methods.map$1$1(B.List_jky, new A.EIP712Version_fromVersion__closure(), type$.int).join$1(0, ", ")], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.EIP712Version_fromVersion__closure.prototype = {
    call$1(e) {
      return type$.EIP712Version._as(e).version;
    },
    $signature: 205
  };
  A.Eip712TypeDetails.prototype = {
    toString$0(_) {
      return "name: " + this.name + "  type: " + this.type;
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name, "type", this.type], type$.String, type$.dynamic);
    }
  };
  A.Eip712TypedData.prototype = {
    toJson$0() {
      var _this = this,
        t1 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal(["types", _this.types.map$2$1(0, new A.Eip712TypedData_toJson_closure(), t1, type$.List_Map_String_dynamic), "domain", _this.domain, "message", _this.message, "primaryType", _this.primaryType, "version", _this.version.version], t1, type$.dynamic);
    },
    $isEIP712Base: 1,
    get$version() {
      return this.version;
    }
  };
  A.Eip712TypedData_Eip712TypedData$fromJson_closure.prototype = {
    call$1(e) {
      type$.Map_String_dynamic._as(e);
      return new A.Eip712TypeDetails(A._asString(e.$index(0, "name")), A._asString(e.$index(0, "type")));
    },
    $signature: 206
  };
  A.Eip712TypedData_toJson_closure.prototype = {
    call$2(k, v) {
      var t1;
      A._asString(k);
      t1 = J.map$1$1$ax(type$.List_Eip712TypeDetails._as(v), new A.Eip712TypedData_toJson__closure(), type$.Map_String_dynamic);
      t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
      return new A.MapEntry(k, t1, type$.MapEntry_of_String_and_List_Map_String_dynamic);
    },
    $signature: 207
  };
  A.Eip712TypedData_toJson__closure.prototype = {
    call$1(e) {
      return type$.Eip712TypeDetails._as(e).toJson$0();
    },
    $signature: 208
  };
  A.Eip712TypedDataV1.prototype = {
    toJson$0() {
      var t1 = this.type;
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name, "type", t1, "value", A._EIP712Utils_eip712TypedDataV1ValueToJson(t1, this.value)], type$.String, type$.dynamic);
    }
  };
  A.EIP712Legacy.prototype = {
    toJson$0() {
      var t1 = this.typesData,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.EIP712Legacy_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["types", t1, "version", 1], type$.String, type$.dynamic);
    },
    $isEIP712Base: 1,
    get$version() {
      return B.EIP712Version_1;
    }
  };
  A.EIP712Legacy_EIP712Legacy$fromJson_closure.prototype = {
    call$1(e) {
      var t1 = type$.Map_dynamic_dynamic._as(e).cast$2$0(0, type$.String, type$.dynamic),
        t2 = A._asString(t1.$index(0, "type"));
      return new A.Eip712TypedDataV1(A._asString(t1.$index(0, "name")), t2, A._EIP712Utils_ensureCorrectValues(t2, t1.$index(0, "value")));
    },
    $signature: 209
  };
  A.EIP712Legacy_toJson_closure.prototype = {
    call$1(e) {
      return type$.Eip712TypedDataV1._as(e).toJson$0();
    },
    $signature: 210
  };
  A._EIP712Utils_ensureCorrectValues_closure.prototype = {
    call$1(e) {
      var t1 = this.childType;
      t1.toString;
      return A._EIP712Utils_ensureCorrectValues(t1, e);
    },
    $signature: 32
  };
  A._EIP712Utils_eip712TypedDataV1ValueToJson_closure.prototype = {
    call$1(e) {
      var t1 = this.childType;
      t1.toString;
      return A._EIP712Utils_eip712TypedDataV1ValueToJson(t1, e);
    },
    $signature: 32
  };
  A.SolidityAbiException.prototype = {};
  A.SolidityAddress.prototype = {
    toHex$0() {
      return this._hexAddress;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.SolidityAddress))
        return false;
      return this._hexAddress === other._hexAddress;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this._hexAddress);
    },
    toString$0(_) {
      return this._hexAddress;
    }
  };
  A.SuiAddress.prototype = {
    createLayout$1$property(property) {
      return A.StructLayout_StructLayout(A._setArrayType([A.RawBytesLayout_RawBytesLayout(32, "value")], type$.JSArray_Layout_dynamic), false, property);
    },
    toLayoutStruct$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", A.BytesUtils_fromHexString(this.address, false)], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return this.address;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.SuiAddress))
        return false;
      return this.address === other.address;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.address);
    }
  };
  A.DartSuiPluginException.prototype = {};
  A.SuiApiTransactionBlockResponseOptions.prototype = {
    toJson$0() {
      var _this = this,
        t1 = A.LinkedHashMap_LinkedHashMap$_literal(["showBalanceChange", _this.showBalanceChange, "showEffects", _this.showEffects, "showEvents", _this.showEvents, "showInput", _this.showInput, "showObjectChanges", _this.showObjectChanges, "showRawEffects", _this.showRawEffects, "showRawInput", _this.showRawInput], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.SuiApiTransactionBlockResponseOptions_toJson_closure());
      return t1;
    }
  };
  A.SuiApiTransactionBlockResponseOptions_toJson_closure.prototype = {
    call$2(k, v) {
      A._asString(k);
      return v == null;
    },
    $signature: 2
  };
  A.SuiApiExecuteTransactionRequestType.prototype = {
    _enumToString$0() {
      return "SuiApiExecuteTransactionRequestType." + this._name;
    }
  };
  A.TronAddress.prototype = {
    toAddress$1(visible) {
      if (visible)
        return this._address;
      return this.super$SolidityAddress$toHex();
    },
    toAddress$0() {
      return this.toAddress$1(true);
    },
    toString$0(_) {
      return this.toAddress$1(true);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.TronAddress))
        return false;
      return this._address === other._address;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this._address);
    }
  };
  A.TronPluginException.prototype = {};
  A.AccountCreateContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress, this.accountAddress, this.type];
    },
    toJson$0() {
      var t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress, "account_address", this.accountAddress, "type", this.type.name], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.AccountCreateContract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "AccountCreateContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.AccountCreateContract_AccountCreateContract$deserialize_closure.prototype = {
    call$1(e) {
      return A.AccountType_fromValue(A._asInt(e));
    },
    $signature: 211
  };
  A.AccountCreateContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.AccountId.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.name, this.address];
    },
    toJson$0() {
      var t1 = A.LinkedHashMap_LinkedHashMap$_literal(["address", this.address.toAddress$1(true), "name", A.StringUtils_tryDecode(this.name, B.StringEncoding_1)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.AccountId_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "AccountId{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.AccountId_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.AccountPermissionUpdateContract.prototype = {
    toJson$0() {
      var _this = this,
        t1 = _this.ownerAddress.toAddress$1(true),
        t2 = _this.actives,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,Map<String,@>>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Map<String,@>(1)")._as(new A.AccountPermissionUpdateContract_toJson_closure()), t4), t4._eval$1("ListIterable.E"));
      t3 = _this.owner.toJson$0();
      t4 = _this.witness;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "actives", t2, "owner", t3, "witness", t4 == null ? null : t4.toJson$0()], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.AccountPermissionUpdateContract_toJson_closure0());
      return t1;
    },
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.ownerAddress, _this.owner, _this.witness, _this.actives];
    },
    toString$0(_) {
      return "AccountPermissionUpdateContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.AccountPermissionUpdateContract_AccountPermissionUpdateContract$fromJson_closure.prototype = {
    call$1(e) {
      return A.Permission_Permission$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 212
  };
  A.AccountPermissionUpdateContract_AccountPermissionUpdateContract$deserialize_closure.prototype = {
    call$1(e) {
      return A.Permission_Permission$deserialize(type$.List_int._as(e));
    },
    $signature: 164
  };
  A.AccountPermissionUpdateContract_AccountPermissionUpdateContract$deserialize_closure0.prototype = {
    call$1(e) {
      return A.Permission_Permission$deserialize(type$.List_int._as(e));
    },
    $signature: 164
  };
  A.AccountPermissionUpdateContract_toJson_closure.prototype = {
    call$1(e) {
      return type$.Permission._as(e).toJson$0();
    },
    $signature: 214
  };
  A.AccountPermissionUpdateContract_toJson_closure0.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.AccountType.prototype = {$isTronEnumerate: 1,
    get$value() {
      return this.value;
    }
  };
  A.AccountType_fromName_closure.prototype = {
    call$1(element) {
      return type$.AccountType._as(element).name === this.name;
    },
    $signature: 163
  };
  A.AccountType_fromValue_closure.prototype = {
    call$1(element) {
      return type$.AccountType._as(element).value === this.value;
    },
    $signature: 163
  };
  A.AccountUpdateContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.accountName, this.ownerAddress];
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress.toAddress$1(true), "account_name", A.StringUtils_tryDecode(this.accountName, B.StringEncoding_1)], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "AccountUpdateContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.Authority.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.account, this.permissionName];
    },
    toJson$0() {
      var t1 = this.account;
      t1 = t1 == null ? null : t1.toJson$0();
      return A.LinkedHashMap_LinkedHashMap$_literal(["account", t1, "permission_name", A.StringUtils_tryDecode(this.permissionName, B.StringEncoding_1)], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "Authority{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.Authority_Authority$deserialize_closure.prototype = {
    call$1(e) {
      var t1 = type$.List_int,
        decode = A.ProtocolBufferDecoder_decode0(t1._as(e)),
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, type$.nullable_List_int);
      t1 = A.QuickProtocolBufferResults_getField0(decode, 2, t1);
      return new A.AccountId(new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)), A.BytesUtils_tryToBytes(t2, true));
    },
    $signature: 216
  };
  A.TronKey.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.address, this.weight];
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["address", this.address, "weight", this.weight], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "TronKey{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.Permission.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6, 7], type$.JSArray_int);
    },
    get$values() {
      var _this = this,
        t1 = _this.type;
      if (t1 === B.PermissionType_Owner_0)
        t1 = null;
      return [t1, _this.id, _this.permissionName, _this.threshold, _this.parentId, _this.operations, _this.keys];
    },
    toJson$0() {
      var t2, t3, _this = this,
        t1 = _this.keys;
      if (t1 == null)
        t1 = null;
      else {
        t2 = A._arrayInstanceType(t1);
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
        t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.Permission_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      }
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["threshold", _this.threshold, "permission_name", _this.permissionName, "type", _this.type.name, "keys", t1, "id", _this.id, "parent_id", _this.parentId, "operations", A.BytesUtils_tryToHexString(_this.operations, null)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.Permission_toJson_closure0());
      return t1;
    },
    toString$0(_) {
      return "Permission{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.Permission_Permission$fromJson_closure.prototype = {
    call$1(e) {
      type$.Map_String_dynamic._as(e);
      return new A.TronKey(A.OnChainUtils_parseTronAddress("address", e.$index(0, "address"), type$.TronAddress), A.OnChainUtils_parseBigInt("weight", e.$index(0, "weight"), type$.BigInt));
    },
    $signature: 217
  };
  A.Permission_Permission$deserialize_closure.prototype = {
    call$1(e) {
      var t1 = type$.List_int,
        decode = A.ProtocolBufferDecoder_decode0(t1._as(e));
      t1 = A.QuickProtocolBufferResults_getField0(decode, 1, t1);
      return new A.TronKey(new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)), A.QuickProtocolBufferResults_getField0(decode, 2, type$.BigInt));
    },
    $signature: 218
  };
  A.Permission_toJson_closure.prototype = {
    call$1(e) {
      return type$.TronKey._as(e).toJson$0();
    },
    $signature: 219
  };
  A.Permission_toJson_closure0.prototype = {
    call$2(k, v) {
      A._asString(k);
      return v == null;
    },
    $signature: 2
  };
  A.PermissionType.prototype = {
    toString$0(_) {
      return this.name;
    },
    $isTronEnumerate: 1,
    get$value() {
      return this.value;
    }
  };
  A.PermissionType_fromName_closure.prototype = {
    call$1(element) {
      return type$.PermissionType._as(element).name === this.name;
    },
    $signature: 161
  };
  A.PermissionType_fromName_closure0.prototype = {
    call$0() {
      return this.defaultPermission;
    },
    $signature: 160
  };
  A.PermissionType_fromValue_closure.prototype = {
    call$1(element) {
      return type$.PermissionType._as(element).value === this.value;
    },
    $signature: 161
  };
  A.PermissionType_fromValue_closure0.prototype = {
    call$0() {
      return this.defaultPermission;
    },
    $signature: 160
  };
  A.SetAccountIdContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.accountId, this.ownerAddress];
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress.toAddress$1(true), "account_id", A.StringUtils_decode(this.accountId, false, B.StringEncoding_1)], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "SetAccountIdContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.AssetIssueContract.prototype = {
    get$values() {
      var _this = this;
      return [_this.ownerAddress, _this.name, _this.abbr, _this.totalSupply, _this.frozenSupply, _this.trxNum, _this.precision, _this.num, _this.startTime, _this.endTime, _this.order, _this.voteScore, _this.description, _this.url, _this.freeAssetNetLimit, _this.publicFreeAssetNetLimit, _this.publicFreeAssetNetUsage, _this.publicLatestFreeNetTime, _this.id];
    },
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 20, 21, 22, 23, 24, 25, 41], type$.JSArray_int);
    },
    toJson$0() {
      var t10, t11, t12, t13, _this = this,
        t1 = _this.ownerAddress.toAddress$1(true),
        t2 = A.StringUtils_decode(_this.name, false, B.StringEncoding_1),
        t3 = A.StringUtils_decode(_this.abbr, false, B.StringEncoding_1),
        t4 = _this.totalSupply.toString$0(0),
        t5 = _this.startTime.toString$0(0),
        t6 = _this.endTime.toString$0(0),
        t7 = A.StringUtils_tryDecode(_this.description, B.StringEncoding_1),
        t8 = A.StringUtils_tryDecode(_this.url, B.StringEncoding_1),
        t9 = _this.freeAssetNetLimit;
      t9 = t9 == null ? null : t9.toString$0(0);
      t10 = _this.publicFreeAssetNetLimit;
      t10 = t10 == null ? null : t10.toString$0(0);
      t11 = _this.frozenSupply;
      if (t11 == null)
        t11 = null;
      else {
        t12 = A._arrayInstanceType(t11);
        t13 = t12._eval$1("MappedListIterable<1,Map<String,@>>");
        t11 = A.List_List$_of(new A.MappedListIterable(t11, t12._eval$1("Map<String,@>(1)")._as(new A.AssetIssueContract_toJson_closure()), t13), t13._eval$1("ListIterable.E"));
      }
      t11 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "name", t2, "abbr", t3, "total_supply", t4, "trx_num", _this.trxNum, "num", _this.num, "start_time", t5, "end_time", t6, "description", t7, "url", t8, "free_asset_netimit", t9, "public_free_asset_netimit", t10, "frozen_supply", t11, "precision", _this.precision], type$.String, type$.dynamic);
      t11.removeWhere$1(0, new A.AssetIssueContract_toJson_closure0());
      return t11;
    },
    toString$0(_) {
      return "AssetIssueContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.AssetIssueContract_AssetIssueContract$fromJson_closure.prototype = {
    call$1(frozenSupplyJson) {
      var t1,
        _s13_ = "frozen_amount",
        _s11_ = "frozen_days";
      type$.Map_String_dynamic._as(frozenSupplyJson);
      t1 = type$.BigInt;
      return new A.AssetIssueContractFrozenSupply(A.OnChainUtils_parseBigInt(_s13_, frozenSupplyJson.$index(0, _s13_), t1), A.OnChainUtils_parseBigInt(_s11_, frozenSupplyJson.$index(0, _s11_), t1));
    },
    $signature: 222
  };
  A.AssetIssueContract_AssetIssueContract$deserialize_closure.prototype = {
    call$1(e) {
      var decode = A.ProtocolBufferDecoder_decode0(type$.List_int._as(e)),
        t1 = type$.BigInt;
      return new A.AssetIssueContractFrozenSupply(A.QuickProtocolBufferResults_getField0(decode, 1, t1), A.QuickProtocolBufferResults_getField0(decode, 2, t1));
    },
    $signature: 223
  };
  A.AssetIssueContract_toJson_closure.prototype = {
    call$1(e) {
      return type$.AssetIssueContractFrozenSupply._as(e).toJson$0();
    },
    $signature: 224
  };
  A.AssetIssueContract_toJson_closure0.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.AssetIssueContractFrozenSupply.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.frozenAmount, this.frozenDays];
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["frozen_amount", this.frozenAmount.toString$0(0), "frozen_days", this.frozenDays.toString$0(0)], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "AssetIssueContractFrozenSupply{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.ParticipateAssetIssueContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.ownerAddress, _this.toAddress, _this.assetName, _this.amount];
    },
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["to_address", _this.toAddress.toAddress$1(true), "owner_address", _this.ownerAddress.toAddress$1(true), "amount", _this.amount.toString$0(0), "asset_name", A.StringUtils_decode(_this.assetName, false, B.StringEncoding_1)], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "ParticipateAssetIssueContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.TransferAssetContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.assetName, _this.ownerAddress, _this.toAddress, _this.amount];
    },
    toJson$0() {
      var _this = this,
        t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", _this.ownerAddress.toAddress$1(true), "to_address", _this.toAddress.toAddress$1(true), "asset_name", A.StringUtils_decode(_this.assetName, false, B.StringEncoding_1), "amount", _this.amount.toString$0(0)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.TransferAssetContract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "TransferAssetContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.TransferAssetContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.UnfreezeAssetContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress];
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress.toAddress$1(true)], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "UnfreezeAssetContract{" + A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress.toAddress$1(true)], type$.String, type$.dynamic).toString$0(0) + "}";
    }
  };
  A.UpdateAssetContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.ownerAddress, _this.description, _this.url, _this.newLimit, _this.newPublicLimit];
    },
    toJson$0() {
      var t5, _this = this,
        t1 = _this.ownerAddress.toAddress$1(true),
        t2 = A.StringUtils_tryDecode(_this.description, B.StringEncoding_1),
        t3 = A.StringUtils_tryDecode(_this.url, B.StringEncoding_1),
        t4 = _this.newLimit;
      t4 = t4 == null ? null : t4.toString$0(0);
      t5 = _this.newPublicLimit;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "description", t2, "url", t3, "new_limit", t4, "new_public_limit", t5 == null ? null : t5.toString$0(0)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.UpdateAssetContract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "UpdateAssetContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.UpdateAssetContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.CancelAllUnfreezeV2Contract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress];
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress.toAddress$1(true)], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "CancelAllUnfreezeV2Contract{" + A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress.toAddress$1(true)], type$.String, type$.dynamic).toString$0(0) + "}";
    }
  };
  A.DelegateResourceContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6], type$.JSArray_int);
    },
    get$values() {
      var t2, _this = this,
        t1 = _this.resource;
      if (t1 === B.ResourceCode_0_BANDWIDTH)
        t1 = null;
      t2 = _this.lock;
      if (t2 === false)
        t2 = null;
      return [_this.ownerAddress, t1, _this.balance, _this.receiverAddress, t2, _this.lockPeriod];
    },
    toJson$0() {
      var t4, t5, _this = this,
        t1 = _this.ownerAddress.toAddress$1(true),
        t2 = _this.receiverAddress.toAddress$1(true),
        t3 = _this.lockPeriod;
      t3 = t3 == null ? null : t3.toString$0(0);
      t4 = _this.balance.toString$0(0);
      t5 = _this.resource;
      t5 = t5 == null ? null : t5.name;
      t5 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "receiver_address", t2, "lock", _this.lock, "lock_period", t3, "balance", t4, "resource", t5], type$.String, type$.dynamic);
      t5.removeWhere$1(0, new A.DelegateResourceContract_toJson_closure());
      return t5;
    },
    toString$0(_) {
      return "DelegateResourceContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.DelegateResourceContract_DelegateResourceContract$deserialize_closure.prototype = {
    call$1(e) {
      A._asInt(e);
      return A.ResourceCode_fromValue(A.QuickProtocolBufferResults_getField0(this.decode, 2, type$.nullable_int), null);
    },
    $signature: 34
  };
  A.DelegateResourceContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.FreezeBalanceContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 10, 15], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.ownerAddress, _this.frozenBalance, _this.frozenDuration, _this.resource, _this.receiverAddress];
    },
    toJson$0() {
      var t3, t4, t5, _this = this, _null = null,
        t1 = _this.ownerAddress.toAddress$1(true),
        t2 = _this.frozenBalance;
      t2 = t2 == null ? _null : t2.toString$0(0);
      t3 = _this.frozenDuration;
      t3 = t3 == null ? _null : t3.toString$0(0);
      t4 = _this.resource;
      t4 = t4 == null ? _null : t4.name;
      t5 = _this.receiverAddress;
      return A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "frozen_balance", t2, "frozen_duration", t3, "resource", t4, "receiver_address", t5 == null ? _null : t5.toAddress$1(true)], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "FreezeBalanceContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.FreezeBalanceContract_FreezeBalanceContract$deserialize_closure.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      return new A.TronAddress(A.TrxAddressUtils_fromHexBytes(e), A.BytesUtils_toHexString(e, true, null));
    },
    $signature: 158
  };
  A.FreezeBalanceV2Contract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    get$values() {
      var t1 = this.resource;
      if (t1 === B.ResourceCode_0_BANDWIDTH)
        t1 = null;
      return [this.ownerAddress, this.frozenBalance, t1];
    },
    toJson$0() {
      var t1 = this.ownerAddress.toAddress$1(true),
        t2 = this.frozenBalance.toString$0(0),
        t3 = this.resource;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "frozen_balance", t2, "resource", t3 == null ? null : t3.name], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.FreezeBalanceV2Contract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "FreezeBalanceV2Contract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.FreezeBalanceV2Contract_FreezeBalanceV2Contract$deserialize_closure.prototype = {
    call$1(e) {
      return A.ResourceCode_fromValue(A._asInt(e), null);
    },
    $signature: 34
  };
  A.FreezeBalanceV2Contract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.TransferContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress, this.toAddress, this.amount];
    },
    toJson$0() {
      var t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress.toAddress$1(true), "to_address", this.toAddress.toAddress$1(true), "amount", this.amount.toString$0(0)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.TransferContract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "TransferContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.TransferContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.UnDelegateResourceContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    get$values() {
      var _this = this,
        t1 = _this.resource;
      if (t1 === B.ResourceCode_0_BANDWIDTH)
        t1 = null;
      return [_this.ownerAddress, t1, _this.balance, _this.receiverAddress];
    },
    toJson$0() {
      var _this = this,
        t1 = _this.ownerAddress.toAddress$1(true),
        t2 = _this.receiverAddress.toAddress$1(true),
        t3 = _this.balance.toString$0(0),
        t4 = _this.resource;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "receiver_address", t2, "balance", t3, "resource", t4 == null ? null : t4.name], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.UnDelegateResourceContract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "UnDelegateResourceContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.UnDelegateResourceContract_UnDelegateResourceContract$deserialize_closure.prototype = {
    call$1(e) {
      return A.ResourceCode_fromValue(A._asInt(e), null);
    },
    $signature: 34
  };
  A.UnDelegateResourceContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.UnfreezeBalanceContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 10, 15], type$.JSArray_int);
    },
    get$values() {
      var t1 = this.resource;
      if ((t1 == null ? null : t1.value) === 0)
        t1 = null;
      return [this.ownerAddress, t1, this.receiverAddress];
    },
    toJson$0() {
      var t3,
        t1 = this.ownerAddress.toAddress$1(true),
        t2 = this.resource;
      t2 = t2 == null ? null : t2.name;
      t3 = this.receiverAddress;
      return A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "resource", t2, "receiver_address", t3 == null ? null : t3.toAddress$1(true)], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "UnfreezeBalanceContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.UnfreezeBalanceContract_UnfreezeBalanceContract$deserialize_closure.prototype = {
    call$1(e) {
      return A.ResourceCode_fromValue(A._asInt(e), null);
    },
    $signature: 34
  };
  A.UnfreezeBalanceV2Contract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    get$values() {
      var t1 = this.resource;
      if (t1 === B.ResourceCode_0_BANDWIDTH)
        t1 = null;
      return [this.ownerAddress, this.unfreezeBalance, t1];
    },
    toJson$0() {
      var t1 = this.ownerAddress.toAddress$1(true),
        t2 = this.unfreezeBalance.toString$0(0),
        t3 = this.resource;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "unfreeze_balance", t2, "resource", t3 == null ? null : t3.name], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.UnfreezeBalanceV2Contract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "UnfreezeBalanceV2Contract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.UnfreezeBalanceV2Contract_UnfreezeBalanceV2Contract$deserialize_closure.prototype = {
    call$1(e) {
      return A.ResourceCode_fromValue(A._asInt(e), null);
    },
    $signature: 34
  };
  A.UnfreezeBalanceV2Contract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.WithdrawBalanceContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress];
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "WithdrawBalanceContract{" + A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress], type$.String, type$.dynamic).toString$0(0) + "}";
    }
  };
  A.WithdrawExpireUnfreezeContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress];
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "WithdrawExpireUnfreezeContract{" + A.S(this.get$toJson()) + "()}";
    }
  };
  A.TronProtocolBufferImpl.prototype = {
    toBuffer$0() {
      var t1, t2, t3, t4, i, t5, value, tagNumber, encode, _this = this;
      if (_this.get$values().length !== _this.get$fieldIds().length)
        throw A.wrapException(A.TronPluginException$(string$.The_va, A.LinkedHashMap_LinkedHashMap$_literal(["values", _this.get$values(), "fieldIds", _this.get$fieldIds(), "class", A.getRuntimeTypeOfDartObject(_this).toString$0(0)], type$.String, type$.dynamic)));
      t1 = type$.int;
      t2 = J.JSArray_JSArray$growable(0, t1);
      for (t3 = type$.List_int, t4 = type$.TronEnumerate, i = 0; i < _this.get$values().length; ++i) {
        t5 = _this.get$values();
        if (!(i < t5.length))
          return A.ioore(t5, i);
        value = t5[i];
        t5 = _this.get$fieldIds();
        if (!(i < t5.length))
          return A.ioore(t5, i);
        tagNumber = t5[i];
        if (value == null)
          continue;
        if (value instanceof A.TronBaseContract)
          encode = A.ProtocolBufferEncoder_encode0(tagNumber, value.toBuffer$0());
        else
          encode = t4._is(value) ? A.ProtocolBufferEncoder_encode0(tagNumber, value.get$value()) : A.ProtocolBufferEncoder_encode0(tagNumber, value);
        t3._as(encode);
        A.BytesUtils_validateListOfBytes(encode);
        B.JSArray_methods.addAll$1(t2, encode);
      }
      return A.List_List$from(t2, true, t1);
    }
  };
  A.TronBaseContract.prototype = {};
  A.ResourceCode.prototype = {
    toString$0(_) {
      return this.name;
    },
    $isTronEnumerate: 1,
    get$value() {
      return this.value;
    }
  };
  A.ResourceCode_fromName_closure0.prototype = {
    call$1(element) {
      return type$.ResourceCode._as(element).name === this.name;
    },
    $signature: 156
  };
  A.ResourceCode_fromName_closure.prototype = {
    call$0() {
      return this.orElse;
    },
    $signature: 155
  };
  A.ResourceCode_fromValue_closure0.prototype = {
    call$1(element) {
      return type$.ResourceCode._as(element).value === this.val;
    },
    $signature: 156
  };
  A.ResourceCode_fromValue_closure.prototype = {
    call$0() {
      return this.orElse;
    },
    $signature: 155
  };
  A.TransactionContractType.prototype = {
    toString$0(_) {
      return this.name;
    },
    $isTronEnumerate: 1,
    get$value() {
      return this.value;
    }
  };
  A.TransactionContractType_findByName_closure.prototype = {
    call$1(element) {
      return type$.TransactionContractType._as(element).name === this.name;
    },
    $signature: 154
  };
  A.TransactionContractType_findByName_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.TronPluginException_wZu);
    },
    $signature: 0
  };
  A.TransactionContractType_findByValue_closure.prototype = {
    call$1(element) {
      return type$.TransactionContractType._as(element).value === this.value;
    },
    $signature: 154
  };
  A.ExchangeCreateContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.ownerAddress, _this.firstTokenId, _this.firstTokenBalance, _this.secondTokenId, _this.secondTokenBalance];
    },
    toJson$0() {
      var t4, t5, _this = this,
        t1 = _this.ownerAddress.toAddress$1(true),
        t2 = A.StringUtils_tryDecode(_this.firstTokenId, B.StringEncoding_1),
        t3 = _this.firstTokenBalance;
      t3 = t3 == null ? null : t3.toString$0(0);
      t4 = A.StringUtils_tryDecode(_this.secondTokenId, B.StringEncoding_1);
      t5 = _this.secondTokenBalance;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "first_token_id", t2, "first_token_balance", t3, "second_token_id", t4, "second_token_balance", t5 == null ? null : t5.toString$0(0)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.ExchangeCreateContract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "ExchangeCreateContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.ExchangeCreateContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.ExchangeInjectContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.ownerAddress, _this.exchangeId, _this.tokenId, _this.quant];
    },
    toJson$0() {
      var t3, t4, _this = this,
        t1 = _this.ownerAddress.toAddress$1(true),
        t2 = _this.exchangeId;
      t2 = t2 == null ? null : t2.toString$0(0);
      t3 = A.BytesUtils_tryToHexString(_this.tokenId, null);
      t4 = _this.quant;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "exchange_id", t2, "token_id", t3, "quant", t4 == null ? null : t4.toString$0(0)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.ExchangeInjectContract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "ExchangeInjectContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.ExchangeInjectContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.ExchangeTransactionContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.ownerAddress, _this.exchangeId, _this.tokenId, _this.quant, _this.expected];
    },
    toJson$0() {
      var t3, t4, t5, _this = this, _null = null,
        t1 = _this.ownerAddress.toAddress$1(true),
        t2 = _this.exchangeId;
      t2 = t2 == null ? _null : t2.toString$0(0);
      t3 = A.BytesUtils_tryToHexString(_this.tokenId, _null);
      t4 = _this.quant;
      t4 = t4 == null ? _null : t4.toString$0(0);
      t5 = _this.expected;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "exchange_id", t2, "token_id", t3, "quant", t4, "expected", t5 == null ? _null : t5.toString$0(0)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.ExchangeTransactionContract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "ExchangeTransactionContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.ExchangeTransactionContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.ExchangeWithdrawContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.ownerAddress, _this.exchangeId, _this.tokenId, _this.quant];
    },
    toJson$0() {
      var _this = this,
        t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", _this.ownerAddress, "exchange_id", _this.exchangeId, "token_id", A.BytesUtils_tryToHexString(_this.tokenId, null), "quant", _this.quant], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.ExchangeWithdrawContract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "ExchangeWithdrawContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.ExchangeWithdrawContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.MarketCancelOrderContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress, this.orderId];
    },
    toJson$0() {
      var t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress.toAddress$1(true), "order_id", A.BytesUtils_tryToHexString(this.orderId, null)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.MarketCancelOrderContract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "MarketCancelOrderContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.MarketCancelOrderContract_toJson_closure.prototype = {
    call$2(k, v) {
      A._asString(k);
      return v == null;
    },
    $signature: 2
  };
  A.MarketSellAssetContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.ownerAddress, _this.sellTokenId, _this.sellTokenQuantity, _this.buyTokenId, _this.buyTokenQuantity];
    },
    toJson$0() {
      var t4, t5, _this = this, _null = null,
        t1 = _this.ownerAddress.toAddress$1(true),
        t2 = A.BytesUtils_tryToHexString(_this.sellTokenId, _null),
        t3 = _this.sellTokenQuantity;
      t3 = t3 == null ? _null : t3.toString$0(0);
      t4 = A.BytesUtils_tryToHexString(_this.buyTokenId, _null);
      t5 = _this.buyTokenQuantity;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "sell_token_id", t2, "sell_token_quantity", t3, "buy_token_id", t4, "buy_token_quantity", t5 == null ? _null : t5.toString$0(0)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.MarketSellAssetContract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "MarketSellAssetContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.MarketSellAssetContract_toJson_closure.prototype = {
    call$2(k, v) {
      A._asString(k);
      return v == null;
    },
    $signature: 2
  };
  A.ProposalApproveContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress, this.proposalId, this.isAddApproval];
    },
    toJson$0() {
      var t1 = this.ownerAddress.toAddress$1(true),
        t2 = this.proposalId;
      t2 = t2 == null ? null : t2.toString$0(0);
      t2 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "proposal_id", t2, "is_add_approval", this.isAddApproval], type$.String, type$.dynamic);
      t2.removeWhere$1(0, new A.ProposalApproveContract_toJson_closure());
      return t2;
    },
    toString$0(_) {
      return "ProposalApproveContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.ProposalApproveContract_toJson_closure.prototype = {
    call$2(k, v) {
      A._asString(k);
      return v == null;
    },
    $signature: 2
  };
  A.ProposalCreateContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress, this.parameters];
    },
    toJson$0() {
      var t3,
        t1 = this.ownerAddress.toAddress$1(true),
        t2 = this.parameters;
      if (t2 == null)
        t2 = null;
      else {
        t3 = type$.String;
        t3 = t2.map$2$1(0, new A.ProposalCreateContract_toJson_closure(), t3, t3);
        t2 = t3;
      }
      return A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "parameters", t2], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "ProposalCreateContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.ProposalCreateContract_ProposalCreateContract$fromJson_closure.prototype = {
    call$2(key, value) {
      var _s10_ = "parameters",
        t1 = type$.BigInt;
      return new A.MapEntry(A.OnChainUtils_parseBigInt(_s10_, key, t1), A.OnChainUtils_parseBigInt(_s10_, value, t1), type$.MapEntry_BigInt_BigInt);
    },
    $signature: 231
  };
  A.ProposalCreateContract_toJson_closure.prototype = {
    call$2(key, value) {
      var t1 = type$.BigInt;
      t1._as(key);
      t1._as(value);
      return new A.MapEntry(key.toString$0(0), value.toString$0(0), type$.MapEntry_String_String);
    },
    $signature: 232
  };
  A.ProposalDeleteContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress, this.proposalId];
    },
    toJson$0() {
      var t1 = this.ownerAddress.toAddress$1(true),
        t2 = this.proposalId;
      return A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "proposal_id", t2 == null ? null : t2.toString$0(0)], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "ProposalDeleteContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.ReceiveDescription.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.valueCommitment, _this.noteCommitment, _this.epk, _this.cEnc, _this.cOut, _this.zkproof];
    },
    toJson$0() {
      var _this = this, _null = null,
        t1 = A.LinkedHashMap_LinkedHashMap$_literal(["value_commitment", A.BytesUtils_tryToHexString(_this.valueCommitment, _null), "note_commitment", A.BytesUtils_tryToHexString(_this.noteCommitment, _null), "epk", A.BytesUtils_tryToHexString(_this.epk, _null), "c_enc", A.BytesUtils_tryToHexString(_this.cEnc, _null), "c_out", A.BytesUtils_tryToHexString(_this.cOut, _null), "zkproof", A.BytesUtils_tryToHexString(_this.zkproof, _null)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.ReceiveDescription_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "ReceiveDescription{" + A.S(this.get$toJson()) + "()}";
    }
  };
  A.ReceiveDescription_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.ShieldedTransferContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6, 7], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.transparentFromAddress, _this.fromAmount, _this.spendDescription, _this.receiveDescription, _this.bindingSignature, _this.transparentToAddress, _this.toAmount];
    },
    toJson$0() {
      var t3, t4, t5, t6, t7, _this = this, _null = null,
        t1 = A.BytesUtils_tryToHexString(_this.transparentFromAddress, _null),
        t2 = _this.fromAmount;
      t2 = t2 == null ? _null : t2.toString$0(0);
      t3 = _this.spendDescription;
      if (t3 == null)
        t3 = _null;
      else {
        t4 = A._arrayInstanceType(t3);
        t5 = t4._eval$1("MappedListIterable<1,Map<String,@>>");
        t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("Map<String,@>(1)")._as(new A.ShieldedTransferContract_toJson_closure()), t5), t5._eval$1("ListIterable.E"));
      }
      t4 = _this.receiveDescription;
      if (t4 == null)
        t4 = _null;
      else {
        t5 = A._arrayInstanceType(t4);
        t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
        t4 = A.List_List$_of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.ShieldedTransferContract_toJson_closure0()), t6), t6._eval$1("ListIterable.E"));
      }
      t5 = A.BytesUtils_tryToHexString(_this.bindingSignature, _null);
      t6 = A.BytesUtils_tryToHexString(_this.transparentToAddress, _null);
      t7 = _this.toAmount;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["transparent_from_address", t1, "from_amount", t2, "spend_description", t3, "receive_description", t4, "binding_signature", t5, "transparent_to_address", t6, "to_amount", t7 == null ? _null : t7.toString$0(0)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.ShieldedTransferContract_toJson_closure1());
      return t1;
    },
    toString$0(_) {
      return "ShieldedTransferContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.ShieldedTransferContract_ShieldedTransferContract$fromJson_closure.prototype = {
    call$1(desc) {
      var t1, t2, t3, t4, t5;
      type$.Map_String_dynamic._as(desc);
      t1 = A.BytesUtils_tryFromHexString(A._asStringQ(desc.$index(0, "value_commitment")), false);
      t2 = A.BytesUtils_tryFromHexString(A._asStringQ(desc.$index(0, "anchor")), false);
      t3 = A.BytesUtils_tryFromHexString(A._asStringQ(desc.$index(0, "nullifier")), false);
      t4 = A.BytesUtils_tryFromHexString(A._asStringQ(desc.$index(0, "rk")), false);
      t5 = A.BytesUtils_tryFromHexString(A._asStringQ(desc.$index(0, "zkproof")), false);
      return A.SpendDescription$(t2, t3, t4, A.BytesUtils_tryFromHexString(A._asStringQ(desc.$index(0, "spend_authority_signature")), false), t1, t5);
    },
    $signature: 152
  };
  A.ShieldedTransferContract_ShieldedTransferContract$fromJson_closure0.prototype = {
    call$1(desc) {
      var t1, t2, t3;
      type$.Map_String_dynamic._as(desc);
      t1 = A.BytesUtils_tryFromHexString(A._asStringQ(desc.$index(0, "value_commitment")), false);
      t2 = A.BytesUtils_tryFromHexString(A._asStringQ(desc.$index(0, "note_commitment")), false);
      t3 = A.BytesUtils_tryFromHexString(A._asStringQ(desc.$index(0, "epk")), false);
      return A.ReceiveDescription$(A.BytesUtils_tryFromHexString(A._asStringQ(desc.$index(0, "c_enc")), false), A.BytesUtils_tryFromHexString(A._asStringQ(desc.$index(0, "c_out")), false), t3, t2, t1, A.BytesUtils_tryFromHexString(A._asStringQ(desc.$index(0, "zkproof")), false));
    },
    $signature: 151
  };
  A.ShieldedTransferContract_ShieldedTransferContract$deserialize_closure.prototype = {
    call$1(e) {
      var decode = A.ProtocolBufferDecoder_decode0(type$.List_int._as(e)),
        t1 = type$.nullable_List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        t3 = A.QuickProtocolBufferResults_getField0(decode, 2, t1),
        t4 = A.QuickProtocolBufferResults_getField0(decode, 3, t1),
        t5 = A.QuickProtocolBufferResults_getField0(decode, 4, t1),
        t6 = A.QuickProtocolBufferResults_getField0(decode, 5, t1);
      return A.SpendDescription$(t3, t4, t5, A.QuickProtocolBufferResults_getField0(decode, 6, t1), t2, t6);
    },
    $signature: 152
  };
  A.ShieldedTransferContract_ShieldedTransferContract$deserialize_closure0.prototype = {
    call$1(e) {
      var decode = A.ProtocolBufferDecoder_decode0(type$.List_int._as(e)),
        t1 = type$.nullable_List_int,
        t2 = A.QuickProtocolBufferResults_getField0(decode, 1, t1),
        t3 = A.QuickProtocolBufferResults_getField0(decode, 2, t1),
        t4 = A.QuickProtocolBufferResults_getField0(decode, 3, t1);
      return A.ReceiveDescription$(A.QuickProtocolBufferResults_getField0(decode, 4, t1), A.QuickProtocolBufferResults_getField0(decode, 5, t1), t4, t3, t2, A.QuickProtocolBufferResults_getField0(decode, 6, t1));
    },
    $signature: 151
  };
  A.ShieldedTransferContract_toJson_closure.prototype = {
    call$1(desc) {
      return type$.SpendDescription._as(desc).toJson$0();
    },
    $signature: 235
  };
  A.ShieldedTransferContract_toJson_closure0.prototype = {
    call$1(desc) {
      return type$.ReceiveDescription._as(desc).toJson$0();
    },
    $signature: 236
  };
  A.ShieldedTransferContract_toJson_closure1.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.SpendDescription.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.valueCommitment, _this.anchor, _this.nullifier, _this.rk, _this.zkproof, _this.spendAuthoritySignature];
    },
    toJson$0() {
      var _this = this, _null = null,
        t1 = A.LinkedHashMap_LinkedHashMap$_literal(["value_commitment", A.BytesUtils_tryToHexString(_this.valueCommitment, _null), "anchor", A.BytesUtils_tryToHexString(_this.anchor, _null), "nullifier", A.BytesUtils_tryToHexString(_this.nullifier, _null), "rk", A.BytesUtils_tryToHexString(_this.rk, _null), "zkproof", A.BytesUtils_tryToHexString(_this.zkproof, _null), "spend_authority_signature", A.BytesUtils_tryToHexString(_this.spendAuthoritySignature, _null)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.SpendDescription_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "SpendDescription{" + A.S(this.get$toJson()) + "()}";
    }
  };
  A.SpendDescription_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.SmartContractAbiEntryType.prototype = {
    toString$0(_) {
      return this.name;
    },
    $isTronEnumerate: 1,
    get$value() {
      return this.value;
    }
  };
  A.SmartContractAbiEntryType_fromName_closure.prototype = {
    call$1(element) {
      return type$.SmartContractAbiEntryType._as(element).name.toLowerCase() === this.name.toLowerCase();
    },
    $signature: 150
  };
  A.SmartContractAbiEntryType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.TronPluginException_a7D);
    },
    $signature: 0
  };
  A.SmartContractAbiEntryType_fromValue_closure.prototype = {
    call$1(element) {
      return type$.SmartContractAbiEntryType._as(element).value === this.value;
    },
    $signature: 150
  };
  A.SmartContractAbiEntryType_fromValue_closure0.prototype = {
    call$0() {
      throw A.wrapException(B.TronPluginException_a7D);
    },
    $signature: 238
  };
  A.SmartContractAbiStateMutabilityType.prototype = {
    toString$0(_) {
      return this.name;
    },
    $isTronEnumerate: 1,
    get$value() {
      return this.value;
    }
  };
  A.SmartContractAbiStateMutabilityType_fromName_closure.prototype = {
    call$1(element) {
      return type$.SmartContractAbiStateMutabilityType._as(element).name.toLowerCase() === this.name.toLowerCase();
    },
    $signature: 149
  };
  A.SmartContractAbiStateMutabilityType_fromName_closure0.prototype = {
    call$0() {
      throw A.wrapException(B.TronPluginException_tgR);
    },
    $signature: 0
  };
  A.SmartContractAbiStateMutabilityType_fromValue_closure.prototype = {
    call$1(element) {
      return type$.SmartContractAbiStateMutabilityType._as(element).value === this.value;
    },
    $signature: 149
  };
  A.SmartContractAbiStateMutabilityType_fromValue_closure0.prototype = {
    call$0() {
      throw A.wrapException(B.TronPluginException_tgR);
    },
    $signature: 240
  };
  A.ClearABIContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress, this.contractAddress];
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress.toAddress$1(true), "contract_address", this.contractAddress.toAddress$1(true)], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "ClearABIContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.CreateSmartContract.prototype = {
    toJson$0() {
      var t4, _this = this,
        t1 = _this.ownerAddress.toAddress$1(true),
        t2 = _this.newContract.toJson$0(),
        t3 = _this.callTokenValue;
      t3 = t3 == null ? null : t3.toString$0(0);
      t4 = _this.tokenId;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "new_contract", t2, "call_token_value", t3, "token_id", t4 == null ? null : t4.toString$0(0)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.CreateSmartContract_toJson_closure());
      return t1;
    },
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.ownerAddress, _this.newContract, _this.callTokenValue, _this.tokenId];
    },
    toString$0(_) {
      return "CreateSmartContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.CreateSmartContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.SmartContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], type$.JSArray_int);
    },
    get$values() {
      var _this = this,
        t1 = _this.consumeUserResourcePercent;
      if (J.$eq$(t1, $.$get$_BigIntImpl_zero()))
        t1 = null;
      return [_this.originAddress, _this.contractAddress, _this.abi, _this.bytecode, _this.callValue, t1, _this.name, _this.originEnergyLimit, _this.codeHash, _this.trxHash, _this.version];
    },
    toJson$0() {
      var t3, t4, t5, t6, t7, _this = this, _null = null,
        t1 = _this.originAddress.toAddress$1(true),
        t2 = _this.contractAddress;
      t2 = t2 == null ? _null : t2.toAddress$1(true);
      t3 = _this.abi;
      t3 = t3 == null ? _null : t3.toJson$0();
      t4 = A.BytesUtils_toHexString(_this.bytecode, true, _null);
      t5 = _this.callValue;
      t5 = t5 == null ? _null : t5.toString$0(0);
      t6 = _this.consumeUserResourcePercent;
      t6 = t6 == null ? _null : t6.toString$0(0);
      t7 = _this.originEnergyLimit;
      t7 = t7 == null ? _null : t7.toString$0(0);
      t7 = A.LinkedHashMap_LinkedHashMap$_literal(["origin_address", t1, "contract_address", t2, "abi", t3, "bytecode", t4, "call_value", t5, "consume_user_resource_percent", t6, "name", _this.name, "origin_energy_limit", t7, "code_hash", A.BytesUtils_tryToHexString(_this.codeHash, _null), "trx_hash", A.BytesUtils_tryToHexString(_this.trxHash, _null), "version", _this.version], type$.String, type$.dynamic);
      t7.removeWhere$1(0, new A.SmartContract_toJson_closure());
      return t7;
    },
    toString$0(_) {
      return "SmartContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.SmartContract_SmartContract$deserialize_closure.prototype = {
    call$1(e) {
      return A.SmartContractABI_SmartContractABI$deserialize(type$.List_int._as(e));
    },
    $signature: 241
  };
  A.SmartContract_SmartContract$deserialize_closure0.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      return new A.TronAddress(A.TrxAddressUtils_fromHexBytes(e), A.BytesUtils_toHexString(e, true, null));
    },
    $signature: 158
  };
  A.SmartContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.SmartContractABI.prototype = {
    get$fieldIds() {
      return A._setArrayType([1], type$.JSArray_int);
    },
    get$values() {
      return [this.entrys];
    },
    toJson$0() {
      var t1 = this.entrys,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.SmartContractABI_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["entrys", t1], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "SmartContractABI{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.SmartContractABI_SmartContractABI$fromJson_closure.prototype = {
    call$1(e) {
      return A.SmartContractABIEntry_SmartContractABIEntry$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 242
  };
  A.SmartContractABI_SmartContractABI$deserialize_closure.prototype = {
    call$1(e) {
      return A.SmartContractABIEntry_SmartContractABIEntry$deserialize(type$.List_int._as(e));
    },
    $signature: 243
  };
  A.SmartContractABI_toJson_closure.prototype = {
    call$1(e) {
      return type$.SmartContractABIEntry._as(e).toJson$0();
    },
    $signature: 244
  };
  A.SmartContractABIEntry.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6, 7, 8], type$.JSArray_int);
    },
    get$values() {
      var _this = this,
        t1 = _this.anonymous;
      if (t1 === false)
        t1 = null;
      return [t1, _this.constant, _this.name, _this.inputs, _this.outputs, _this.type, _this.payable, _this.stateMutability];
    },
    toJson$0() {
      var t2, t3, t4, t5, _this = this,
        t1 = _this.stateMutability;
      t1 = t1 == null ? null : t1.name;
      t2 = _this.inputs;
      if (t2 == null)
        t2 = null;
      else {
        t3 = A._arrayInstanceType(t2);
        t4 = t3._eval$1("MappedListIterable<1,Map<String,@>>");
        t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Map<String,@>(1)")._as(new A.SmartContractABIEntry_toJson_closure()), t4), t4._eval$1("ListIterable.E"));
      }
      t3 = _this.outputs;
      if (t3 == null)
        t3 = null;
      else {
        t4 = A._arrayInstanceType(t3);
        t5 = t4._eval$1("MappedListIterable<1,Map<String,@>>");
        t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("Map<String,@>(1)")._as(new A.SmartContractABIEntry_toJson_closure0()), t5), t5._eval$1("ListIterable.E"));
      }
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type.name, "stateMutability", t1, "anonymous", _this.anonymous, "inputs", t2, "outputs", t3, "constant", _this.constant, "name", _this.name, "payable", _this.payable], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "SmartContractABIEntry{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.SmartContractABIEntry_SmartContractABIEntry$fromJson_closure.prototype = {
    call$1(e) {
      return A.SmartContractBABIEntryParam_SmartContractBABIEntryParam$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 49
  };
  A.SmartContractABIEntry_SmartContractABIEntry$fromJson_closure0.prototype = {
    call$1(e) {
      return A.SmartContractBABIEntryParam_SmartContractBABIEntryParam$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 49
  };
  A.SmartContractABIEntry_SmartContractABIEntry$deserialize_closure.prototype = {
    call$1(e) {
      return A.SmartContractBABIEntryParam_SmartContractBABIEntryParam$deserialize(type$.List_int._as(e));
    },
    $signature: 49
  };
  A.SmartContractABIEntry_SmartContractABIEntry$deserialize_closure0.prototype = {
    call$1(e) {
      return A.SmartContractBABIEntryParam_SmartContractBABIEntryParam$deserialize(type$.List_int._as(e));
    },
    $signature: 49
  };
  A.SmartContractABIEntry_toJson_closure.prototype = {
    call$1(e) {
      return type$.SmartContractBABIEntryParam._as(e).toJson$0();
    },
    $signature: 145
  };
  A.SmartContractABIEntry_toJson_closure0.prototype = {
    call$1(e) {
      return type$.SmartContractBABIEntryParam._as(e).toJson$0();
    },
    $signature: 145
  };
  A.SmartContractBABIEntryParam.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    get$values() {
      var t2, t3,
        t1 = this.indexed;
      if (t1 === false)
        t1 = null;
      t2 = this.name;
      t3 = t2 == null ? null : t2.length === 0;
      if (t3 !== false)
        t2 = null;
      return [t1, t2, this.type];
    },
    toJson$0() {
      var t1 = A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type, "indexed", this.indexed, "name", this.name], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.SmartContractBABIEntryParam_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "SmartContractBABIEntryParam{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.SmartContractBABIEntryParam_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.TriggerSmartContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5, 6], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.ownerAddress, _this.contractAddress, _this.callValue, _this.data, _this.callTokenValue, _this.tokenId];
    },
    toJson$0() {
      var t5, t6, _this = this, _null = null,
        t1 = _this.ownerAddress.toAddress$1(true),
        t2 = _this.contractAddress.toAddress$1(true),
        t3 = A.BytesUtils_tryToHexString(_this.data, _null),
        t4 = _this.callValue;
      t4 = t4 == null ? _null : t4.toString$0(0);
      t5 = _this.callTokenValue;
      t5 = t5 == null ? _null : t5.toString$0(0);
      t6 = _this.tokenId;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "contract_address", t2, "data", t3, "call_value", t4, "call_token_value", t5, "token_id", t6 == null ? _null : t6.toString$0(0)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.TriggerSmartContract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "TriggerSmartContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.TriggerSmartContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.UpdateEnergyLimitContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress, this.contractAddress, this.originEnergyLimit];
    },
    toJson$0() {
      var t1 = this.ownerAddress.toAddress$1(true),
        t2 = this.contractAddress.toAddress$1(true),
        t3 = this.originEnergyLimit;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "contract_address", t2, "origin_energy_limit", t3 == null ? null : t3.toString$0(0)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.UpdateEnergyLimitContract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "UpdateEnergyLimitContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.UpdateEnergyLimitContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.UpdateSettingContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    toJson$0() {
      var t1 = this.ownerAddress.toAddress$1(true),
        t2 = this.contractAddress.toAddress$1(true),
        t3 = this.consumeUserResourcePercent;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "contract_address", t2, "consume_user_resource_percent", t3 == null ? null : t3.toString$0(0)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.UpdateSettingContract_toJson_closure());
      return t1;
    },
    get$values() {
      return [this.ownerAddress, this.contractAddress, this.consumeUserResourcePercent];
    },
    toString$0(_) {
      return "UpdateSettingContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.UpdateSettingContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.UpdateBrokerageContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress, this.brokerage];
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress.toAddress$1(true), "brokerage", this.brokerage], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "UpdateBrokerageContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.Any0.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.typeUrl, this.value];
    },
    toString$0(_) {
      return "Any{" + this.toJson$0().toString$0(0) + "}";
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value.toJson$0(), "type_url", this.typeUrl], type$.String, type$.dynamic);
    }
  };
  A.Transaction.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.rawData, this.signature];
    },
    get$length(_) {
      var result, _this = this,
        value = _this.__Transaction_length_FI;
      if (value === $) {
        result = _this.toBuffer$0().length;
        _this.__Transaction_length_FI !== $ && A.throwLateFieldADI("length");
        _this.__Transaction_length_FI = result;
        value = result;
      }
      return value;
    },
    toJson$0() {
      var t2, t3, t4,
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
      t1.$indexSet(0, "raw_data", this.rawData.toJson$0());
      t2 = this.signature;
      t3 = A._arrayInstanceType(t2);
      t4 = t3._eval$1("String(1)")._as(new A.Transaction_toJson_closure());
      t3 = t3._eval$1("MappedListIterable<1,String>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t4, t3), t3._eval$1("ListIterable.E"));
      t1.$indexSet(0, "signature", t2);
      return t1;
    },
    toString$0(_) {
      return "Transaction{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.Transaction_Transaction$fromJson_closure.prototype = {
    call$1(s) {
      return A.BytesUtils_fromHexString(A._asString(s), false);
    },
    $signature: 31
  };
  A.Transaction_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_toBytes(type$.List_int._as(e), true);
    },
    $signature: 19
  };
  A.Transaction_toJson_closure.prototype = {
    call$1(s) {
      return A.BytesUtils_toHexString(type$.List_int._as(s), true, null);
    },
    $signature: 17
  };
  A.TransactionContract.prototype = {
    toJson$0() {
      var _this = this,
        t1 = A.LinkedHashMap_LinkedHashMap$_literal(["type", _this.type.name, "parameter", _this.parameter.toJson$0(), "contract_name", A.StringUtils_tryDecode(_this.contractName, B.StringEncoding_1), "provider", A.StringUtils_tryDecode(_this.provider, B.StringEncoding_1), "Permission_id", _this.permissionId], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.TransactionContract_toJson_closure());
      return t1;
    },
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 4, 5], type$.JSArray_int);
    },
    get$values() {
      var _this = this,
        t1 = _this.type;
      if (t1.value === 0)
        t1 = null;
      return [t1, _this.parameter, _this.provider, _this.contractName, _this.permissionId];
    },
    toString$0(_) {
      return "TransactionContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.TransactionContract_toJson_closure.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.TransactionRaw.prototype = {
    toJson$0() {
      var t3, t4, t5, t6, t7, t8, t9, t10, _this = this, _null = null,
        t1 = A.BytesUtils_toHexString(_this.refBlockBytes, true, _null),
        t2 = _this.refBlockNum;
      t2 = t2 == null ? _null : t2.toString$0(0);
      t3 = A.BytesUtils_toHexString(_this.refBlockHash, true, _null);
      t4 = _this.expiration.toString$0(0);
      t5 = _this.auths;
      if (t5 == null)
        t5 = _null;
      else {
        t6 = A._arrayInstanceType(t5);
        t7 = t6._eval$1("MappedListIterable<1,Map<String,@>>");
        t5 = A.List_List$_of(new A.MappedListIterable(t5, t6._eval$1("Map<String,@>(1)")._as(new A.TransactionRaw_toJson_closure()), t7), t7._eval$1("ListIterable.E"));
      }
      t6 = A.StringUtils_tryDecode(_this.data, B.StringEncoding_1);
      t7 = _this.contract;
      t8 = A._arrayInstanceType(t7);
      t9 = t8._eval$1("MappedListIterable<1,Map<String,@>>");
      t7 = A.List_List$_of(new A.MappedListIterable(t7, t8._eval$1("Map<String,@>(1)")._as(new A.TransactionRaw_toJson_closure0()), t9), t9._eval$1("ListIterable.E"));
      t8 = A.BytesUtils_tryToHexString(_this.scripts, _null);
      t9 = _this.timestamp.toString$0(0);
      t10 = _this.feeLimit;
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["ref_block_bytes", t1, "ref_block_num", t2, "ref_block_hash", t3, "expiration", t4, "auths", t5, "data", t6, "contract", t7, "scripts", t8, "timestamp", t9, "fee_limit", t10 == null ? _null : t10.toString$0(0)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.TransactionRaw_toJson_closure1());
      return t1;
    },
    get$fieldIds() {
      return A._setArrayType([1, 3, 4, 8, 9, 10, 11, 12, 14, 18], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.refBlockBytes, _this.refBlockNum, _this.refBlockHash, _this.expiration, _this.auths, _this.data, _this.contract, _this.scripts, _this.timestamp, _this.feeLimit];
    },
    get$txID() {
      var result, _this = this,
        value = _this.__TransactionRaw_txID_FI;
      if (value === $) {
        result = A.BytesUtils_toHexString(A.SHA256_hash(_this.toBuffer$0()), true, null);
        _this.__TransactionRaw_txID_FI !== $ && A.throwLateFieldADI("txID");
        _this.__TransactionRaw_txID_FI = result;
        value = result;
      }
      return value;
    },
    get$length(_) {
      var result, _this = this,
        value = _this.__TransactionRaw_length_FI;
      if (value === $) {
        result = _this.toBuffer$0().length;
        _this.__TransactionRaw_length_FI !== $ && A.throwLateFieldADI("length");
        _this.__TransactionRaw_length_FI = result;
        value = result;
      }
      return value;
    },
    toString$0(_) {
      return "TransactionRaw{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.TransactionRaw_TransactionRaw$fromJson_closure.prototype = {
    call$1(e) {
      var any, permissionId,
        _s9_ = "parameter",
        _s13_ = "permission_id",
        _s8_ = "provider",
        _s13_0 = "contract_name",
        t1 = type$.String,
        t2 = type$.dynamic,
        t3 = A.OnChainUtils_parseMap("contract", true, e, t1, t2),
        type = A.TransactionContractType_findByName(A.OnChainUtils_parseString("type", t3.$index(0, "type"), t1));
      t2 = A.OnChainUtils_parseMap(_s9_, true, t3.$index(0, _s9_), t1, t2);
      t2.toString;
      any = A.Any_Any$fromJson0(t2);
      t2 = t3.$index(0, _s13_);
      t1 = t2 == null ? t3.$index(0, "Permission_id") : t2;
      permissionId = A.OnChainUtils_parseInt(_s13_, t1, type$.nullable_int);
      t1 = type$.nullable_List_int;
      t2 = A.OnChainUtils_parseBytes(_s8_, t3.$index(0, _s8_), t1);
      t1 = A.OnChainUtils_parseBytes(_s13_0, t3.$index(0, _s13_0), t1);
      return new A.TransactionContract(type, any, A.BytesUtils_tryToBytes(t2, true), A.BytesUtils_tryToBytes(t1, true), permissionId);
    },
    $signature: 247
  };
  A.TransactionRaw_TransactionRaw$fromJson_closure0.prototype = {
    call$1(e) {
      var t2, t3,
        t1 = A.OnChainUtils_parseMap("auths", true, e, type$.String, type$.dynamic);
      if (t1.$index(0, "account") == null)
        t2 = null;
      else {
        t2 = type$.Map_String_dynamic._as(t1.$index(0, "account"));
        t3 = A.OnChainUtils_parseBytes("name", t2.$index(0, "name"), type$.nullable_List_int);
        t3 = new A.AccountId(A.OnChainUtils_parseTronAddress("address", t2.$index(0, "address"), type$.TronAddress), A.BytesUtils_tryToBytes(t3, true));
        t2 = t3;
      }
      return new A.Authority(t2, A.BytesUtils_tryToBytes(A.StringUtils_tryEncode(A._asStringQ(t1.$index(0, "permission_name")), B.StringEncoding_1), true));
    },
    $signature: 248
  };
  A.TransactionRaw_TransactionRaw$deserialize_closure.prototype = {
    call$1(e) {
      var t3, t4, t5,
        t1 = type$.List_int,
        decode = A.ProtocolBufferDecoder_decode0(t1._as(e)),
        t2 = A.TransactionContractType_findByValue(A.QuickProtocolBufferResults_getField0(decode, 1, type$.int));
      if (t2 == null)
        t2 = B.TransactionContractType_0_AccountCreateContract;
      t1 = A.Any_Any$deserialize(A.QuickProtocolBufferResults_getField0(decode, 2, t1));
      t3 = type$.nullable_List_int;
      t4 = A.QuickProtocolBufferResults_getField0(decode, 3, t3);
      t3 = A.QuickProtocolBufferResults_getField0(decode, 4, t3);
      t5 = A.QuickProtocolBufferResults_getField0(decode, 5, type$.nullable_int);
      return new A.TransactionContract(t2, t1, A.BytesUtils_tryToBytes(t4, true), A.BytesUtils_tryToBytes(t3, true), t5);
    },
    $signature: 249
  };
  A.TransactionRaw_TransactionRaw$deserialize_closure0.prototype = {
    call$1(e) {
      return A.Authority_Authority$deserialize(type$.List_int._as(e));
    },
    $signature: 250
  };
  A.TransactionRaw_toJson_closure.prototype = {
    call$1(auth) {
      return type$.Authority._as(auth).toJson$0();
    },
    $signature: 251
  };
  A.TransactionRaw_toJson_closure0.prototype = {
    call$1(c) {
      return type$.TransactionContract._as(c).toJson$0();
    },
    $signature: 252
  };
  A.TransactionRaw_toJson_closure1.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.VoteAssetContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3, 5], type$.JSArray_int);
    },
    get$values() {
      var _this = this;
      return [_this.ownerAddress, _this.voteAddress, _this.support, _this.count];
    },
    toJson$0() {
      var _this = this,
        t1 = _this.ownerAddress.toAddress$1(true),
        t2 = _this.voteAddress,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,String>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("String(1)")._as(new A.VoteAssetContract_toJson_closure()), t4), t4._eval$1("ListIterable.E"));
      t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "vote_address", t2, "support", _this.support, "count", _this.count], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.VoteAssetContract_toJson_closure0());
      return t1;
    },
    toString$0(_) {
      return "VoteAssetContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.VoteAssetContract_VoteAssetContract$fromJson_closure.prototype = {
    call$1(address) {
      return A.TronAddress_TronAddress(A._asString(address));
    },
    $signature: 253
  };
  A.VoteAssetContract_VoteAssetContract$deserialize_closure.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      return new A.TronAddress(A.TrxAddressUtils_fromHexBytes(e), A.BytesUtils_toHexString(e, true, null));
    },
    $signature: 254
  };
  A.VoteAssetContract_toJson_closure.prototype = {
    call$1(address) {
      return type$.TronAddress._as(address).toAddress$1(true);
    },
    $signature: 255
  };
  A.VoteAssetContract_toJson_closure0.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.VoteWitnessContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2, 3], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress, this.votes, this.support];
    },
    toJson$0() {
      var t3, t4,
        t1 = this.ownerAddress.toAddress$1(true),
        t2 = this.votes;
      if (t2 == null)
        t2 = null;
      else {
        t3 = A._arrayInstanceType(t2);
        t4 = t3._eval$1("MappedListIterable<1,Map<String,@>>");
        t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Map<String,@>(1)")._as(new A.VoteWitnessContract_toJson_closure()), t4), t4._eval$1("ListIterable.E"));
      }
      t2 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", t1, "votes", t2, "support", this.support], type$.String, type$.dynamic);
      t2.removeWhere$1(0, new A.VoteWitnessContract_toJson_closure0());
      return t2;
    },
    toString$0(_) {
      return "VoteWitnessContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.VoteWitnessContract_VoteWitnessContract$fromJson_closure.prototype = {
    call$1(vote) {
      var _s12_ = "vote_address",
        _s10_ = "vote_count",
        t1 = A.OnChainUtils_parseMap("vote", true, vote, type$.String, type$.dynamic);
      return new A.VoteWitnessContractVote(A.OnChainUtils_parseTronAddress(_s12_, t1.$index(0, _s12_), type$.TronAddress), A.OnChainUtils_parseBigInt(_s10_, t1.$index(0, _s10_), type$.BigInt));
    },
    $signature: 144
  };
  A.VoteWitnessContract_VoteWitnessContract$deserialize_closure.prototype = {
    call$1(e) {
      var t1 = type$.List_int,
        decode = A.ProtocolBufferDecoder_decode0(t1._as(e));
      t1 = A.QuickProtocolBufferResults_getField0(decode, 1, t1);
      return new A.VoteWitnessContractVote(new A.TronAddress(A.TrxAddressUtils_fromHexBytes(t1), A.BytesUtils_toHexString(t1, true, null)), A.QuickProtocolBufferResults_getField0(decode, 2, type$.BigInt));
    },
    $signature: 144
  };
  A.VoteWitnessContract_toJson_closure.prototype = {
    call$1(vote) {
      return type$.VoteWitnessContractVote._as(vote).toJson$0();
    },
    $signature: 257
  };
  A.VoteWitnessContract_toJson_closure0.prototype = {
    call$2(key, value) {
      A._asString(key);
      return value == null;
    },
    $signature: 2
  };
  A.VoteWitnessContractVote.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.voteAddress, this.voteCount];
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["vote_address", this.voteAddress.toAddress$1(true), "vote_count", this.voteCount.toString$0(0)], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "VoteWitnessContractVote{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.WitnessUpdateContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 12], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress, this.updateUrl];
    },
    toJson$0() {
      var t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress.toAddress$1(true), "update_url", A.StringUtils_tryDecode(this.updateUrl, B.StringEncoding_1)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.WitnessUpdateContract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "WitnessUpdateContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.WitnessUpdateContract_toJson_closure.prototype = {
    call$2(k, v) {
      A._asString(k);
      return v == null;
    },
    $signature: 2
  };
  A.WitnessCreateContract.prototype = {
    get$fieldIds() {
      return A._setArrayType([1, 2], type$.JSArray_int);
    },
    get$values() {
      return [this.ownerAddress, this.url];
    },
    toJson$0() {
      var t1 = A.LinkedHashMap_LinkedHashMap$_literal(["owner_address", this.ownerAddress.toAddress$1(true), "url", A.StringUtils_tryDecode(this.url, B.StringEncoding_1)], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.WitnessCreateContract_toJson_closure());
      return t1;
    },
    toString$0(_) {
      return "WitnessCreateContract{" + this.toJson$0().toString$0(0) + "}";
    }
  };
  A.WitnessCreateContract_toJson_closure.prototype = {
    call$2(k, v) {
      A._asString(k);
      return v == null;
    },
    $signature: 2
  };
  A.ProtocolBufferDecoder__decodeInt_closure0.prototype = {
    call$1(element) {
      return (A._asInt(element) & 128) === 0;
    },
    $signature: 30
  };
  A.ProtocolBufferDecoderResult0.prototype = {
    toString$0(_) {
      return "tagNumber: " + this.tagNumber + " value: " + A.S(this.value);
    }
  };
  A._Result0.prototype = {
    toString$0(_) {
      return "value: " + A.S(this.value) + " consumed: " + this.consumed;
    }
  };
  A.QuickProtocolBufferResults_getField_closure1.prototype = {
    call$1(element) {
      return type$.ProtocolBufferDecoderResult_dynamic_2._as(element).tagNumber === this.tag;
    },
    $signature: 48
  };
  A.QuickProtocolBufferResults_getField_closure2.prototype = {
    call$1(e) {
      return type$.ProtocolBufferDecoderResult_dynamic_2._as(e).tagNumber;
    },
    $signature: 140
  };
  A.QuickProtocolBufferResults_getResult_closure.prototype = {
    call$1(element) {
      return type$.ProtocolBufferDecoderResult_dynamic_2._as(element).tagNumber === this.id;
    },
    $signature: 48
  };
  A.QuickProtocolBufferResults_getResult_closure0.prototype = {
    call$1(e) {
      return type$.ProtocolBufferDecoderResult_dynamic_2._as(e).tagNumber;
    },
    $signature: 140
  };
  A.QuickProtocolBufferResults_getFields_closure.prototype = {
    call$1(element) {
      return type$.ProtocolBufferDecoderResult_dynamic_2._as(element).tagNumber === this.tag;
    },
    $signature: 48
  };
  A.QuickProtocolBufferResults_getFields_closure0.prototype = {
    call$1(e) {
      return A.QuickProtocolBufferResult_get0(type$.ProtocolBufferDecoderResult_dynamic_2._as(e), this.T);
    },
    $signature() {
      return this.T._eval$1("0(ProtocolBufferDecoderResult0<@>)");
    }
  };
  A.QuickProtocolBufferResults_getMap_closure.prototype = {
    call$1(element) {
      return type$.ProtocolBufferDecoderResult_dynamic_2._as(element).tagNumber === this.tagId;
    },
    $signature: 48
  };
  A.QuickMap_asListOfMap_closure0.prototype = {
    call$1(e) {
      return type$.Map_dynamic_dynamic._as(e).cast$2$0(0, type$.String, type$.dynamic);
    },
    $signature: 16
  };
  A.QuickMap_asListOfBytes_closure.prototype = {
    call$1(e) {
      return J.cast$1$0$ax(type$.List_dynamic._as(e), type$.int);
    },
    $signature: 31
  };
  A.QuickMap__valueAsList_closure0.prototype = {
    call$1(e) {
      return type$.Map_dynamic_dynamic._as(e).cast$2$0(0, type$.String, type$.dynamic);
    },
    $signature: 16
  };
  A.OnChainBridgeException.prototype = {
    toString$0(_) {
      return "OnChainBridgeException{" + this.message + "}";
    },
    $isException: 1
  };
  A.AppPlatform.prototype = {
    _enumToString$0() {
      return "AppPlatform." + this._name;
    }
  };
  A.WalletEventTypes.prototype = {
    _enumToString$0() {
      return "WalletEventTypes." + this._name;
    }
  };
  A.WalletEventTypes_fromName_closure.prototype = {
    call$1(e) {
      return type$.WalletEventTypes._as(e)._name === this.name;
    },
    $signature: 260
  };
  A.WalletEventTypes_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(new A.OnChainBridgeException("Invalid wallet event type " + this.name));
    },
    $signature: 0
  };
  A.WalletEventTarget.prototype = {
    _enumToString$0() {
      return "WalletEventTarget." + this._name;
    }
  };
  A.WalletEvent.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["client_id", _this.clientId, "data", _this.data, "request_id", _this.requestId, "type", _this.type._name, "additional", _this.additional, "platform", _this.platform, "target", _this.target._name], type$.String, type$.dynamic);
    }
  };
  A.JSOBJ_keys__closure.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 4
  };
  A.JSWebSocket_constructor_create_closure.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 4
  };
  A.WebEventStream_stream_closure.prototype = {
    call$1($event) {
      var t1 = type$.JSObject._as($event).data;
      t1 = t1 == null ? null : A.dartify(t1);
      this.controller.add$1(0, this.T._as(t1));
    },
    $signature: 63
  };
  A.WebEventStream_stream_closure0.prototype = {
    call$0() {
      this._this.removeEventListener(this.type, this.callback);
    },
    $signature: 10
  };
  A.JSWalletEvent_toEvent_closure.prototype = {
    call$1(e) {
      return type$.WalletEventTarget._as(e)._name === A._asStringQ(this._this.target);
    },
    $signature: 262
  };
  A.ToJsEvent_toJsEvent_closure.prototype = {
    call$1(e) {
      return A._asInt(e);
    },
    $signature: 263
  };
  A.ApiProviderException.prototype = {
    toString$0(_) {
      return this.message;
    },
    $isException: 1
  };
  A.WalletException.prototype = {
    toString$0(_) {
      if (this._argruments != null)
        return "invalid_request";
      return this.message;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.WalletException))
        return false;
      return other.message === this.message && A.CompareUtils_iterableIsEqual(this._argruments, other._argruments, type$.String);
    },
    get$hashCode(_) {
      return A.Object_hash(this.message, this._argruments, B.C_SentinelValue, B.C_SentinelValue);
    },
    $isException: 1
  };
  A.Equatable.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!type$.Equatable._is(other))
        return false;
      if (A.getRuntimeTypeOfDartObject(other) !== A.getRuntimeTypeOfDartObject(this))
        return false;
      return A.CompareUtils_iterableIsEqual(this.get$variabels(), other.get$variabels(), type$.dynamic);
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode(this.get$variabels());
    }
  };
  A.HTTPCaller_post_closure.prototype = {
    call$3$client$headers$uri(client, headers, uri) {
      return this.$call$body$HTTPCaller_post_closure(type$.RetryClient._as(client), type$.nullable_Map_String_String._as(headers), type$.Uri._as(uri));
    },
    $call$body$HTTPCaller_post_closure(client, headers, uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this;
      var $async$call$3$client$headers$uri = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = client._sendUnstreamed$5("POST", uri, type$.nullable_Map_String_String._as(headers), $async$self.body, null).timeout$1($async$self.timeout);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$3$client$headers$uri, $async$completer);
    },
    $signature: 62
  };
  A.HTTPCaller_get_closure.prototype = {
    call$3$client$headers$uri(client, headers, uri) {
      return this.$call$body$HTTPCaller_get_closure(type$.RetryClient._as(client), type$.nullable_Map_String_String._as(headers), type$.Uri._as(uri));
    },
    $call$body$HTTPCaller_get_closure(client, headers, uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this;
      var $async$call$3$client$headers$uri = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = client._sendUnstreamed$3("GET", uri, type$.nullable_Map_String_String._as(headers)).timeout$1($async$self.timeout);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$3$client$headers$uri, $async$completer);
    },
    $signature: 62
  };
  A.HttpImpl.prototype = {};
  A.HTTPServiceWorker.prototype = {
    call$8$authenticated$body$headers$isolate$responseType$timeout$type$url(authenticated, body, headers, isolate, responseType, timeout, type, url) {
      type$.Uri._as(url);
      type$.Duration._as(timeout);
      type$.nullable_ProviderAuthenticated._as(authenticated);
      type$.HTTPRequestType._as(type);
      type$.nullable_Map_String_String._as(headers);
      type$.HTTPResponseType._as(responseType);
      return this.$call$body$HTTPServiceWorker(authenticated, body, headers, type$.APPIsolate._as(isolate), responseType, timeout, type, url);
    },
    call$7$authenticated$headers$isolate$responseType$timeout$type$url(authenticated, headers, isolate, responseType, timeout, type, url) {
      return this.call$8$authenticated$body$headers$isolate$responseType$timeout$type$url(authenticated, null, headers, isolate, responseType, timeout, type, url);
    },
    $call$body$HTTPServiceWorker(authenticated, body, headers, isolate, responseType, timeout, type, url) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HTTPCallerResponse),
        $async$returnValue, $async$self = this, t1, exception, request;
      var $async$call$8$authenticated$body$headers$isolate$responseType$timeout$type$url = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              request = new A.HTTPWorkerMessage(type, url, body, headers, timeout, responseType, B.HTTPClientType_0, authenticated);
              if (isolate === B.APPIsolate_1)
                try {
                  t1 = $async$self.send$1(request);
                  $async$returnValue = t1;
                  // goto return
                  $async$goto = 1;
                  break;
                } catch (exception) {
                  throw exception;
                }
              $async$goto = 3;
              return A._asyncAwait($async$self.caller.makeCall$1(new A.HTTPWorkerRequest(-1, request)), $async$call$8$authenticated$body$headers$isolate$responseType$timeout$type$url);
            case 3:
              // returning from await.
              $async$returnValue = $async$result.get$response();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$8$authenticated$body$headers$isolate$responseType$timeout$type$url, $async$completer);
    }
  };
  A.FailedHttpIsolateInitialization.prototype = {$isException: 1};
  A.ServicesHTTPCaller.prototype = {
    makeCall$1(message) {
      var platform = B.AppPlatform_2;
      return this.makeCall$body$ServicesHTTPCaller(message);
    },
    makeCall$body$ServicesHTTPCaller(message) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HTTPWorkerResponse),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], t1, response, e, t2, exception, platform, $async$exception;
      var $async$makeCall$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              platform = B.AppPlatform_2;
              $async$handler = 4;
              t1 = null;
              t2 = message.message;
            case 7:
              // switch
              switch (t2.type) {
                case B.HTTPRequestType_GET_get:
                  // goto case
                  $async$goto = 9;
                  break;
                case B.HTTPRequestType_POST_post:
                  // goto case
                  $async$goto = 10;
                  break;
                default:
                  // goto after switch
                  $async$goto = 8;
                  break;
              }
              break;
            case 9:
              // case
              $async$goto = 11;
              return A._asyncAwait(A.HTTPCaller_get(t2.authenticated, t2.clientType, t2.headers, platform, t2.timeout, t2.responseType, t2.url), $async$makeCall$1);
            case 11:
              // returning from await.
              t1 = $async$result;
              // goto after switch
              $async$goto = 8;
              break;
            case 10:
              // case
              $async$goto = 12;
              return A._asyncAwait(A.HTTPCaller_post(t2.authenticated, t2.params, t2.clientType, t2.headers, platform, t2.timeout, t2.responseType, t2.url), $async$makeCall$1);
            case 12:
              // returning from await.
              t1 = $async$result;
              // goto after switch
              $async$goto = 8;
              break;
            case 8:
              // after switch
              response = t1;
              $async$returnValue = new A.HTTPWorkerResponseSuccess(response, message.id, type$.HTTPWorkerResponseSuccess_dynamic);
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              e = A.unwrapException($async$exception);
              t1 = A.ServicesHTTPCaller__getExceptionMessage(e);
              $async$returnValue = new A.HTTPWorkerResponseError(t1, message.id, type$.HTTPWorkerResponseError_dynamic);
              // goto return
              $async$goto = 1;
              break;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$makeCall$1, $async$completer);
    }
  };
  A.WebHTTPServiceWorker.prototype = {
    send$1(request) {
      return this.send$body$WebHTTPServiceWorker(request);
    },
    send$body$WebHTTPServiceWorker(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HTTPCallerResponse),
        $async$returnValue, $async$self = this;
      var $async$send$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 4;
              return A._asyncAwait($async$self.connector.getConnector$0(), $async$send$1);
            case 4:
              // returning from await.
              $async$goto = 3;
              return A._asyncAwait($async$result.getResult$1$message(request), $async$send$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$result.get$response();
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$send$1, $async$completer);
    }
  };
  A._WorkerConnector.prototype = {
    _service$_onError$2(error, id) {
      this._service$_lock.synchronized$1$1(new A._WorkerConnector__onError_closure(this, id), type$.Null);
    },
    getConnector$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$._WorkerConnection),
        $async$returnValue, $async$self = this;
      var $async$getConnector$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self._service$_lock.synchronized$1$1(new A._WorkerConnector_getConnector_closure($async$self, B.HttpWorkerMode_main), type$._WorkerConnection), $async$getConnector$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getConnector$0, $async$completer);
    }
  };
  A._WorkerConnector__onError_closure.prototype = {
    call$0() {
      this.$this._workers.remove$1(0, 0);
    },
    $signature: 10
  };
  A._WorkerConnector_getConnector_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$._WorkerConnection),
        $async$returnValue, $async$self = this, t1, t2, $async$temp1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = t1._workers;
              $async$goto = t2.$index(0, 0) == null ? 3 : 4;
              break;
            case 3:
              // then
              $async$temp1 = t2;
              $async$goto = 5;
              return A._asyncAwait(A._WorkerConnection__init(t1.get$_service$_onError()), $async$call$0);
            case 5:
              // returning from await.
              $async$temp1.$indexSet(0, 0, $async$result);
            case 4:
              // join
              t1 = t2.$index(0, 0);
              t1.toString;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 266
  };
  A._WorkerConnection.prototype = {
    _getRequestId$0() {
      return this._service$_lock.synchronized$1$1(new A._WorkerConnection__getRequestId_closure(this), type$.int);
    },
    getResult$1$message(message) {
      var timeout = null;
      return this.getResult$body$_WorkerConnection(message);
    },
    getResult$body$_WorkerConnection(message) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HTTPWorkerResponse),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], $async$self = this, args, timeout, next;
      var $async$getResult$1$message = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              timeout = null;
              $async$goto = 3;
              return A._asyncAwait($async$self._getRequestId$0(), $async$getResult$1$message);
            case 3:
              // returning from await.
              next = $async$result;
              $async$handler = 4;
              $async$self._sentRequest$2(message, next);
              $async$goto = 7;
              return A._asyncAwait($async$self._service$_requests.$index(0, next).getResult$1$timeout(timeout), $async$getResult$1$message);
            case 7:
              // returning from await.
              args = $async$result;
              $async$returnValue = args;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              $async$self._service$_requests.remove$1(0, next);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$getResult$1$message, $async$completer);
    },
    onResponse$1(e) {
      var r = A.HTTPWorkerResponse_HTTPWorkerResponse$fromJs(type$.Map_dynamic_dynamic._as(A.dartify(type$.JSObject._as(e).data)).cast$2$0(0, type$.String, type$.dynamic)),
        t1 = this._service$_requests.$index(0, r.id);
      if (t1 != null)
        t1._messageCompleter.complete$1(r);
    },
    _sentRequest$2(message, id) {
      var t1,
        request = new A.HTTPWorkerRequest(id, message);
      if (A.jsify(request.toJson$0()) == null) {
        A.Future_Future$delayed(B.Duration_0, new A._WorkerConnection__sentRequest_closure(this, id), type$.Null);
        return;
      }
      t1 = A.jsify(request.toJson$0());
      t1.toString;
      this.worker.postMessage(t1);
    }
  };
  A._WorkerConnection__init_onEvent.prototype = {
    call$1($event) {
      type$.JSObject._as($event);
      this.completer.complete$1(new A._WorkerConnection(A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.HTTPWorkerMessageCompleter), this.worker, new A.SynchronizedLock()));
    },
    $signature: 26
  };
  A._WorkerConnection__init_closure.prototype = {
    call$1($event) {
      this.onDone.call$2(type$.JSObject._as($event), this.mode);
    },
    $signature: 63
  };
  A._WorkerConnection__init_closure0.prototype = {
    call$1($event) {
      this.onDone.call$2(type$.JSObject._as($event), this.mode);
    },
    $signature: 63
  };
  A._WorkerConnection__getRequestId_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = ++t1._requestId;
      t1._service$_requests.$indexSet(0, t2, new A.HTTPWorkerMessageCompleter(t2, new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_HTTPWorkerResponse), type$._AsyncCompleter_HTTPWorkerResponse)));
      return t2;
    },
    $signature: 60
  };
  A._WorkerConnection__sentRequest_closure.prototype = {
    call$0() {
      var t1 = this.$this._service$_requests.$index(0, this.id);
      if (t1 != null)
        t1._messageCompleter.completeError$1(B.WalletException_data_casting_failed_null);
    },
    $signature: 10
  };
  A.HTTPRequestType.prototype = {
    _enumToString$0() {
      return "HTTPRequestType." + this._name;
    }
  };
  A.HTTPWorkerMessage.prototype = {
    toJson$0() {
      var _this = this,
        t1 = _this.url.toString$0(0),
        t2 = B.JSInt_methods._tdivFast$1(_this.timeout._duration, 1000000),
        t3 = _this.authenticated;
      t3 = t3 == null ? null : A.BytesUtils_toHexString(t3.toCbor$0().encode$0(), true, null);
      return A.LinkedHashMap_LinkedHashMap$_literal(["url", t1, "type", _this.type.name, "params", _this.params, "headers", _this.headers, "timeout", t2, "responseType", _this.responseType._name, "clientType", _this.clientType._name, "authenticated", t3], type$.String, type$.dynamic);
    }
  };
  A.HTTPWorkerRequest.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["id", this.id, "message", this.message.toJson$0()], type$.String, type$.dynamic);
    }
  };
  A.HTTPWorkerResponse.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["id", this.id, "response", this.get$response().toJson$0()], type$.String, type$.dynamic);
    }
  };
  A.HTTPWorkerResponseSuccess.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["id", this.id, "response", this.response.toJson$0()], type$.String, type$.dynamic);
    },
    get$response() {
      return this.response;
    }
  };
  A.HTTPWorkerResponseError.prototype = {
    get$response() {
      return A.throwExpression(A.ApiProviderException_ApiProviderException$error(this.message));
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["id", this.id, "message", this.message], type$.String, type$.dynamic);
    }
  };
  A.HTTPWorkerMessageCompleter.prototype = {
    getResult$1$timeout(timeout) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HTTPWorkerResponse),
        $async$returnValue, $async$self = this;
      var $async$getResult$1$timeout = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self._messageCompleter.future.timeout$1(B.Duration_60000000), $async$getResult$1$timeout);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getResult$1$timeout, $async$completer);
    }
  };
  A.HttpWorkerMode.prototype = {
    _enumToString$0() {
      return "HttpWorkerMode." + this._name;
    }
  };
  A.ProviderAuthType.prototype = {
    _enumToString$0() {
      return "ProviderAuthType." + this._name;
    }
  };
  A.ProviderAuthType_fromName_closure.prototype = {
    call$1(e) {
      return type$.ProviderAuthType._as(e)._name === this.name;
    },
    $signature: 130
  };
  A.ProviderAuthType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_provider_infomarion_null);
    },
    $signature: 0
  };
  A.ProviderAuthType_fromTag_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_bytesEqual(this.tag, type$.ProviderAuthType._as(e).tag);
    },
    $signature: 130
  };
  A.ProviderAuthType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_provider_infomarion_null);
    },
    $signature: 0
  };
  A.ProviderAuthenticated.prototype = {};
  A.BasicProviderAuthenticated.prototype = {
    toCbor$0() {
      var t1 = this.type,
        t2 = A._setArrayType([t1._name, this.key, this.value], type$.JSArray_String);
      return new A.CborTagValue(A.List_List$unmodifiable(t1.tag, type$.int), new A.CborListValue(t2, true, type$.CborListValue_String), type$.CborTagValue_dynamic);
    },
    toUri$1(uri) {
      var t1;
      if (this.type !== B.ProviderAuthType_List_50_6_query)
        return uri;
      t1 = type$.String;
      return uri.replace$1$queryParameters(A.LinkedHashMap_LinkedHashMap$_literal([this.key, this.value], t1, t1));
    },
    toHeaders$1(headers) {
      var t1, t2;
      type$.nullable_Map_String_String._as(headers);
      if (this.type !== B.ProviderAuthType_List_50_6_header)
        return headers;
      if (headers == null) {
        t1 = type$.String;
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
      } else
        t1 = headers;
      t2 = type$.String;
      t1 = A.LinkedHashMap_LinkedHashMap$of(t1, t2, t2);
      t1.addAll$1(0, A.LinkedHashMap_LinkedHashMap$_literal([this.key, this.value], t2, t2));
      return t1;
    },
    get$variabels() {
      return [this.type, this.key, this.value];
    }
  };
  A.DigestProviderAuthenticated.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.password, this.username], type$.JSArray_String);
      return new A.CborTagValue(A.List_List$unmodifiable(this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_String), type$.CborTagValue_dynamic);
    },
    toUri$1(uri) {
      return uri;
    },
    toHeaders$1(headers) {
      var t1;
      type$.nullable_Map_String_String._as(headers);
      if (this.type !== B.ProviderAuthType_List_50_6_header)
        return headers;
      t1 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_empty(t1, t1);
    },
    get$variabels() {
      return [this.type, this.password, this.username];
    }
  };
  A._ProviderAuthenticated_Object_CborSerializable.prototype = {};
  A._ProviderAuthenticated_Object_CborSerializable_Equatable.prototype = {};
  A.HttpClientManager.prototype = {
    call$6$authenticated$clientType$headers$method$t$uri(authenticated, clientType, headers, method, t, uri) {
      type$.Future_Response_Function_$named_$req_client_RetryClient_and_$req_headers_nullable_Map_String_String_and_$req_uri_Uri._as(t);
      type$.Uri._as(uri);
      type$.HTTPClientType._as(clientType);
      type$.HTTPRequestType._as(method);
      return this.$call$body$HttpClientManager(type$.nullable_ProviderAuthenticated._as(authenticated), clientType, type$.nullable_Map_String_String._as(headers), method, t, uri);
    },
    $call$body$HttpClientManager(authenticated, clientType, headers, method, t, uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], $async$self = this, client, r, t1, t2, t3;
      var $async$call$6$authenticated$clientType$headers$method$t$uri = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t.toString;
              client = $async$self.getCashedClient$3$authenticated$client$uri(authenticated, clientType, uri);
              $async$handler = 3;
              t1 = client.client;
              t2 = client.toHeaders$3$headers$method$uri(headers, method, uri);
              t3 = client.authenticated;
              t3 = t3 == null ? null : t3.toUri$1(uri);
              $async$goto = 6;
              return A._asyncAwait(t.call$3$client$headers$uri(t1, t2, t3 == null ? uri : t3), $async$call$6$authenticated$clientType$headers$method$t$uri);
            case 6:
              // returning from await.
              r = $async$result;
              $async$goto = 7;
              return A._asyncAwait(client.call$5$headers$method$onRetry$response$uri(headers, method, new A.HttpClientManager_call_closure(t), r, uri), $async$call$6$authenticated$clientType$headers$method$t$uri);
            case 7:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              if (clientType === B.HTTPClientType_1)
                client.dispose$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$call$6$authenticated$clientType$headers$method$t$uri, $async$completer);
    },
    getCashedClient$3$authenticated$client$uri(authenticated, client, uri) {
      var identifier, cachedClient, newClient, client0, t1, inner, t2, _null = null;
      if (client === B.HTTPClientType_1) {
        t1 = A.zoneClient();
        inner = A.RetryClient$(new A.BrowserClient(type$.JSObject._as(new init.G.AbortController())), A.retry___defaultWhen$closure());
        if ((authenticated == null ? _null : authenticated.type) === B.ProviderAuthType_List_50_7_digest)
          return new A._DigestAuthClient(1, _null, inner, type$.DigestProviderAuthenticated._as(authenticated));
        return new A._Client(inner, authenticated, type$._Client_nullable_ProviderAuthenticated);
      }
      try {
        identifier = uri.get$host() + "_" + J.get$hashCode$(authenticated);
        t1 = this._clients;
        if (t1.containsKey$1(identifier)) {
          t1 = t1.$index(0, identifier);
          t1.toString;
          cachedClient = t1;
          t1 = cachedClient;
          t2 = t1._timer;
          if (t2 != null)
            t2.cancel$0();
          t1._startTimer$0();
          return cachedClient;
        }
        t2 = A.zoneClient();
        t2 = new A.BrowserClient(type$.JSObject._as(new init.G.AbortController()));
        newClient = A.RetryClient$(t2, new A.HttpClientManager_getCashedClient_closure());
        client0 = null;
        if ((authenticated == null ? _null : authenticated.type) === B.ProviderAuthType_List_50_7_digest) {
          client = new A._DigestAuthCachedClient(1, _null, new A.HttpClientManager_getCashedClient_closure0(this, identifier), B.Duration_180000000, newClient, type$.DigestProviderAuthenticated._as(authenticated));
          client._startTimer$0();
          client0 = client;
        } else {
          client = new A._CachedClient(new A.HttpClientManager_getCashedClient_closure1(this, identifier), B.Duration_180000000, newClient, authenticated);
          client._startTimer$0();
          client0 = client;
        }
        t1.$indexSet(0, identifier, client0);
        t1 = client0;
        return t1;
      } finally {
      }
    }
  };
  A.HttpClientManager_call_closure.prototype = {
    call$3$client$headers$uri(client, headers, uri) {
      return this.t.call$3$client$headers$uri(type$.RetryClient._as(client), type$.nullable_Map_String_String._as(headers), type$.Uri._as(uri));
    },
    $signature: 62
  };
  A.HttpClientManager_getCashedClient_closure.prototype = {
    call$1(response) {
      return B.JSArray_methods.contains$1(B.List_Fjr, type$.BaseResponse._as(response).statusCode);
    },
    $signature: 129
  };
  A.HttpClientManager_getCashedClient_closure0.prototype = {
    call$0() {
      return this.$this._clients.remove$1(0, this.identifier);
    },
    $signature: 1
  };
  A.HttpClientManager_getCashedClient_closure1.prototype = {
    call$0() {
      return this.$this._clients.remove$1(0, this.identifier);
    },
    $signature: 1
  };
  A._Client.prototype = {
    toHeaders$4$body$headers$method$uri(body, headers, method, uri) {
      var t1;
      type$.nullable_Map_String_String._as(headers);
      t1 = this.authenticated;
      t1 = t1 == null ? null : t1.toHeaders$1(headers);
      return t1 == null ? headers : t1;
    },
    toHeaders$3$headers$method$uri(headers, method, uri) {
      return this.toHeaders$4$body$headers$method$uri(null, headers, method, uri);
    },
    call$5$headers$method$onRetry$response$uri(headers, method, onRetry, response, uri) {
      type$.Response._as(response);
      type$.Future_Response_Function_$named_$req_client_RetryClient_and_$req_headers_nullable_Map_String_String_and_$req_uri_Uri._as(onRetry);
      type$.HTTPRequestType._as(method);
      type$.Uri._as(uri);
      return this.$call$body$_Client(type$.nullable_Map_String_String._as(headers), method, onRetry, response, uri);
    },
    $call$body$_Client(headers, method, onRetry, response, uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue;
      var $async$call$5$headers$method$onRetry$response$uri = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              onRetry.toString;
              $async$returnValue = response;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$5$headers$method$onRetry$response$uri, $async$completer);
    },
    dispose$0() {
      var t1 = this.client._inner;
      t1._isClosed = true;
      t1._abortController.abort();
    },
    get$authenticated() {
      return this.authenticated;
    }
  };
  A._CachedClientImpl.prototype = {
    _startTimer$0() {
      this._timer = A.Timer_Timer(this.idleTimeout, new A._CachedClientImpl__startTimer_closure(this));
    },
    dispose$0() {
      var t1 = this._timer;
      if (t1 != null)
        t1.cancel$0();
      t1 = this.client._inner;
      t1._isClosed = true;
      t1._abortController.abort();
    }
  };
  A._CachedClientImpl__startTimer_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1.client._inner;
      t2._isClosed = true;
      t2._abortController.abort();
      t1.onDispose.call$0();
    },
    $signature: 1
  };
  A._CachedClient.prototype = {};
  A._DigestAuthClient.prototype = {};
  A._DigestAuthCachedClient.prototype = {};
  A._DigestAuthClientImpl.prototype = {};
  A.__DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl.prototype = {
    toHeaders$3$headers$method$uri(headers, method, uri) {
      var t1, t2, h, t3, t4, _this = this;
      type$.nullable_Map_String_String._as(headers);
      if (_this._DigestAuthClientImpl__challenge != null) {
        t1 = _this.get$authenticated();
        t2 = _this._DigestAuthClientImpl__challenge;
        t2.toString;
        h = A.DigestAuthenticatedUtils_getDigestAuthenticatedHeader(t1, _this._DigestAuthClientImpl__id, method, t2, uri);
        ++_this._DigestAuthClientImpl__id;
        t2 = type$.String;
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        for (t3 = new A.LinkedHashMapEntriesIterable(h, A._instanceType(h)._eval$1("LinkedHashMapEntriesIterable<1,2>")).get$iterator(0); t3.moveNext$0();) {
          t4 = t3.__js_helper$_current;
          t1.$indexSet(0, A._asString(t4.key), A._asString(t4.value));
        }
        t1.addAll$1(0, headers == null ? A.LinkedHashMap_LinkedHashMap$_empty(t2, t2) : headers);
        return t1;
      }
      return _this.super$_Client$toHeaders(null, headers, method, uri);
    },
    call$5$headers$method$onRetry$response$uri(headers, method, onRetry, response, uri) {
      type$.Response._as(response);
      type$.Future_Response_Function_$named_$req_client_RetryClient_and_$req_headers_nullable_Map_String_String_and_$req_uri_Uri._as(onRetry);
      type$.HTTPRequestType._as(method);
      type$.Uri._as(uri);
      return this.$call$body$__DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl(type$.nullable_Map_String_String._as(headers), method, onRetry, response, uri);
    },
    $call$body$__DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl(headers, method, onRetry, response, uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, t1;
      var $async$call$5$headers$method$onRetry$response$uri = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                onRetry.toString;
                switch (response.statusCode) {
                  case 401:
                    t1 = A.DigestAuthenticatedUtils_getChallenges(response.headers);
                    $async$self._DigestAuthClientImpl__challenge = t1;
                    if (t1 != null) {
                      $async$self._DigestAuthClientImpl__id = 1;
                      $async$returnValue = onRetry.call$3$client$headers$uri($async$self.client, $async$self.toHeaders$3$headers$method$uri(headers, method, uri), uri);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    break;
                }
                $async$returnValue = $async$self.super$_Client$call(headers, method, onRetry, response, uri);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$call$5$headers$method$onRetry$response$uri, $async$completer);
    }
  };
  A.__DigestAuthClient__Client__DigestAuthClientImpl.prototype = {
    toHeaders$3$headers$method$uri(headers, method, uri) {
      var t1, t2, h, t3, t4, _this = this;
      type$.nullable_Map_String_String._as(headers);
      if (_this._DigestAuthClientImpl__challenge != null) {
        t1 = _this.get$authenticated();
        t2 = _this._DigestAuthClientImpl__challenge;
        t2.toString;
        h = A.DigestAuthenticatedUtils_getDigestAuthenticatedHeader(t1, _this._DigestAuthClientImpl__id, method, t2, uri);
        ++_this._DigestAuthClientImpl__id;
        t2 = type$.String;
        t1 = A.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
        for (t3 = new A.LinkedHashMapEntriesIterable(h, A._instanceType(h)._eval$1("LinkedHashMapEntriesIterable<1,2>")).get$iterator(0); t3.moveNext$0();) {
          t4 = t3.__js_helper$_current;
          t1.$indexSet(0, A._asString(t4.key), A._asString(t4.value));
        }
        t1.addAll$1(0, headers == null ? A.LinkedHashMap_LinkedHashMap$_empty(t2, t2) : headers);
        return t1;
      }
      return _this.super$_Client$toHeaders(null, headers, method, uri);
    },
    call$5$headers$method$onRetry$response$uri(headers, method, onRetry, response, uri) {
      type$.Response._as(response);
      type$.Future_Response_Function_$named_$req_client_RetryClient_and_$req_headers_nullable_Map_String_String_and_$req_uri_Uri._as(onRetry);
      type$.HTTPRequestType._as(method);
      type$.Uri._as(uri);
      return this.$call$body$__DigestAuthClient__Client__DigestAuthClientImpl(type$.nullable_Map_String_String._as(headers), method, onRetry, response, uri);
    },
    $call$body$__DigestAuthClient__Client__DigestAuthClientImpl(headers, method, onRetry, response, uri) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Response),
        $async$returnValue, $async$self = this, t1;
      var $async$call$5$headers$method$onRetry$response$uri = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                onRetry.toString;
                switch (response.statusCode) {
                  case 401:
                    t1 = A.DigestAuthenticatedUtils_getChallenges(response.headers);
                    $async$self._DigestAuthClientImpl__challenge = t1;
                    if (t1 != null) {
                      $async$self._DigestAuthClientImpl__id = 1;
                      $async$returnValue = onRetry.call$3$client$headers$uri($async$self.client, $async$self.toHeaders$3$headers$method$uri(headers, method, uri), uri);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    break;
                }
                $async$returnValue = $async$self.super$_Client$call(headers, method, onRetry, response, uri);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$call$5$headers$method$onRetry$response$uri, $async$completer);
    }
  };
  A.HTTPClientType.prototype = {
    _enumToString$0() {
      return "HTTPClientType." + this._name;
    }
  };
  A.HTTPResponseType.prototype = {
    _enumToString$0() {
      return "HTTPResponseType." + this._name;
    }
  };
  A.HTTPResponseType_fromName_closure.prototype = {
    call$1(e) {
      return type$.HTTPResponseType._as(e)._name === this.name;
    },
    $signature: 271
  };
  A.HTTPResponseType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 0
  };
  A.HTTPCallerResponse.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["result", this.result, "statusCode", this.statusCode, "responseType", this.responseType._name], type$.String, type$.dynamic);
    },
    error$0() {
      var t1 = this.statusCode;
      if (t1 >= 200 && t1 < 300)
        return null;
      return A._asStringQ(this.result);
    }
  };
  A.HTTPCallerResponse_stringToJsonObject_closure.prototype = {
    call$1(e) {
      return type$.Map_dynamic_dynamic._as(e).cast$2$0(0, type$.String, type$.dynamic);
    },
    $signature: 16
  };
  A.HTTPCallerResponse_HTTPCallerResponse$parse_closure.prototype = {
    call$1(e) {
      return type$.Map_dynamic_dynamic._as(e).cast$2$0(0, type$.String, type$.dynamic);
    },
    $signature: 16
  };
  A.DigestAuthHeadersAlg.prototype = {
    _enumToString$0() {
      return "DigestAuthHeadersAlg." + this._name;
    },
    hashBytes$1(input) {
      var t1, t2, t3, t4, h, out, digest, _this = this;
      type$.List_int._as(input);
      $label0$0: {
        if (B.DigestAuthHeadersAlg_MD5_md5 === _this || B.DigestAuthHeadersAlg_rEg === _this) {
          t1 = type$.int;
          t2 = J.JSArray_JSArray$growable(0, t1);
          t3 = A.List_List$filled(4, 0, false, t1);
          t4 = A.List_List$filled(16, 0, false, t1);
          h = new A.MD5(t2, t3, t4);
          h.reset$0();
          if (h._hash$_finished)
            A.throwExpression(B.CryptoException_PCa);
          h._lengthInBytes = h._lengthInBytes + input.length;
          A.BytesUtils_validateListOfBytes(input);
          B.JSArray_methods.addAll$1(t2, input);
          h._iterate$0();
          out = A.List_List$filled(16, 0, false, t1);
          h.finish$1(out);
          A.zero(t3);
          A.zero(t4);
          B.JSArray_methods.clear$0(t2);
          h.reset$0();
          t1 = out;
          break $label0$0;
        }
        if (B.DigestAuthHeadersAlg_u8N === _this || B.DigestAuthHeadersAlg_qwM === _this) {
          t1 = A.SHA256_hash(input);
          break $label0$0;
        }
        if (B.DigestAuthHeadersAlg_aYk === _this || B.DigestAuthHeadersAlg_R2P === _this) {
          h = A.SHA512$();
          h.update$1(input);
          digest = h.digest$0();
          h.clean$0();
          t1 = digest;
          break $label0$0;
        }
        if (B.DigestAuthHeadersAlg_zvv === _this || B.DigestAuthHeadersAlg_PUQ === _this) {
          t1 = type$.int;
          h = new A.SHA512256(A.List_List$filled(8, 0, false, t1), A.List_List$filled(8, 0, false, t1), A.List_List$filled(16, 0, false, t1), A.List_List$filled(16, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$unmodifiable(B.List_INy, t1));
          h.reset$0();
          h.update$1(input);
          digest = h.digest$0();
          h.clean$0();
          t1 = digest;
          break $label0$0;
        }
        t1 = null;
      }
      return t1;
    }
  };
  A.DigestAuthHeadersAlg_fromName_closure.prototype = {
    call$1(e) {
      return type$.DigestAuthHeadersAlg._as(e).name === this.name;
    },
    $signature: 272
  };
  A.DigestAuthHeadersAlg_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.WalletException$("unsuported_digest_auth_algorithm"));
    },
    $signature: 0
  };
  A.DigestAuthQop.prototype = {
    _enumToString$0() {
      return "DigestAuthQop." + this._name;
    }
  };
  A.DigestAuthQop_fromName_closure.prototype = {
    call$1(e) {
      return type$.DigestAuthQop._as(e).name === this.name;
    },
    $signature: 273
  };
  A.DigestAuthQop_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.WalletException$("unsuported_digest_auth_qop"));
    },
    $signature: 0
  };
  A.DigestAuthHeaders.prototype = {};
  A.DigestAuthenticatedUtils_parseDigestHeader_closure.prototype = {
    call$1(e) {
      return B.JSString_methods.trim$0(A._asString(e));
    },
    $signature: 4
  };
  A.DigestAuthenticatedUtils_parseDigestHeader_closure0.prototype = {
    call$1(e) {
      A._asString(e);
      return e.length !== 0 && e !== ",";
    },
    $signature: 38
  };
  A.DigestAuthenticatedUtils_parseDigestHeader_closure1.prototype = {
    call$1(e) {
      return B.JSString_methods.trim$0(A._asString(e));
    },
    $signature: 4
  };
  A.APPIsolate.prototype = {
    _enumToString$0() {
      return "APPIsolate." + this._name;
    }
  };
  A.StreamListenable.prototype = {
    get$_controller() {
      var value = this.__StreamListenable__controller_FI;
      if (value === $) {
        value !== $ && A.throwLateFieldADI("_controller");
        value = this.__StreamListenable__controller_FI = new A._AsyncBroadcastStreamController(new A.StreamListenable__controller_closure(), new A.StreamListenable__controller_closure0(), this.$ti._eval$1("_AsyncBroadcastStreamController<1>"));
      }
      return value;
    },
    set$value(newValue) {
      var t1, _this = this;
      _this.$ti._precomputed1._as(newValue);
      t1 = _this._live$_value;
      if (t1 === newValue)
        return;
      _this._live$_value = newValue;
      if (_this.get$_controller()._firstSubscription != null && (_this.get$_controller()._state & 4) === 0)
        _this.get$_controller().add$1(0, newValue);
    }
  };
  A.StreamListenable__controller_closure0.prototype = {
    call$0() {
    },
    $signature: 1
  };
  A.StreamListenable__controller_closure.prototype = {
    call$0() {
    },
    $signature: 1
  };
  A.StreamValue.prototype = {};
  A.ContentType.prototype = {
    _enumToString$0() {
      return "ContentType." + this._name;
    }
  };
  A.ContentType_fromValue_closure.prototype = {
    call$1(element) {
      return type$.ContentType._as(element).value === this.value;
    },
    $signature: 275
  };
  A.ContentType_fromValue_closure0.prototype = {
    call$0() {
      throw A.wrapException(B.WalletException_data_verification_failed_null);
    },
    $signature: 276
  };
  A.APPImage.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.type.value, new A.CborStringValue(this.uri)], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_50_1, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.type, this.uri];
    }
  };
  A._APPImage_Object_CborSerializable.prototype = {};
  A._APPImage_Object_CborSerializable_Equatable.prototype = {};
  A.CborSerializable.prototype = {};
  A.JsonSerialization.prototype = {};
  A.SynchronizedLock.prototype = {
    synchronized$1$1(func, $T) {
      var timeout = null;
      return this.synchronized$body$SynchronizedLock($T._eval$1("0/()")._as(func), $T, $T);
    },
    synchronized$body$SynchronizedLock(func, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], $async$self = this, result, complete, t1, timeout, prev, completer;
      var $async$synchronized$1$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              timeout = null;
              prev = $async$self.last;
              completer = new A._SyncCompleter(new A._Future($.Zone__current, type$._Future_void), type$._SyncCompleter_void);
              $async$self.last = completer.future;
              $async$handler = 3;
              $async$goto = prev != null ? 6 : 7;
              break;
            case 6:
              // then
              $async$goto = timeout != null ? 8 : 10;
              break;
            case 8:
              // then
              $async$goto = 11;
              return A._asyncAwait(prev.timeout$1(timeout), $async$synchronized$1$1);
            case 11:
              // returning from await.
              // goto join
              $async$goto = 9;
              break;
            case 10:
              // else
              $async$goto = 12;
              return A._asyncAwait(prev, $async$synchronized$1$1);
            case 12:
              // returning from await.
            case 9:
              // join
            case 7:
              // join
              result = func.call$0();
              $async$goto = result instanceof A._Future ? 13 : 15;
              break;
            case 13:
              // then
              t1 = result;
              $async$goto = 16;
              return A._asyncAwait($T._eval$1("Future<0>")._is(t1) ? t1 : A._Future$value($T._as(t1), $T), $async$synchronized$1$1);
            case 16:
              // returning from await.
              t1 = $async$result;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              // goto join
              $async$goto = 14;
              break;
            case 15:
              // else
              $async$returnValue = result;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
            case 14:
              // join
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              complete = new A.SynchronizedLock_synchronized_complete($async$self, completer);
              if (prev != null && timeout != null)
                prev.then$1$1(new A.SynchronizedLock_synchronized_closure(complete), type$.Null);
              else
                complete.call$0();
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$synchronized$1$1, $async$completer);
    }
  };
  A.SynchronizedLock_synchronized_complete.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.completer;
      if (t1.last === t2.future)
        t1.last = null;
      t2.complete$0();
    },
    $signature: 1
  };
  A.SynchronizedLock_synchronized_closure.prototype = {
    call$1(_) {
      this.complete.call$0();
    },
    $signature: 20
  };
  A.MethodUtils_call_closure.prototype = {
    call$1$0($T) {
      return this.completer;
    },
    call$0() {
      return this.call$1$0(type$.dynamic);
    },
    $signature() {
      return this.T._eval$1("Completer<0>()<Object?>");
    }
  };
  A.MethodResult.prototype = {
    get$result() {
      var t1 = this.exception;
      if (t1 != null)
        throw A.wrapException(t1);
      t1 = this.__MethodResult__result_F;
      t1 === $ && A.throwLateFieldNI("_result");
      return t1;
    },
    toString$0(_) {
      if (this.exception != null)
        return "Error " + A.S(this.error);
      return "Success " + A.S(this.get$result());
    }
  };
  A.StrUtils_toSnakeCase_closure.prototype = {
    call$1(match) {
      return "_" + match.group$1(0).toLowerCase();
    },
    $signature: 51
  };
  A.WebsocketWeb.prototype = {
    get$_streamController() {
      var result, _this = this, _null = null,
        value = _this.__WebsocketWeb__streamController_FI;
      if (value === $) {
        result = A.StreamController_StreamController(_null, _null, _null, _null, false, type$.dynamic);
        result.set$onCancel(_this.get$_onCloseStream());
        _this.__WebsocketWeb__streamController_FI !== $ && A.throwLateFieldADI("_streamController");
        _this.__WebsocketWeb__streamController_FI = result;
        value = result;
      }
      return value;
    },
    _onCloseStream$0() {
      var _this = this,
        t1 = _this._web$_socket;
      if (A._asInt(t1.readyState) !== 3)
        t1.close(1000, "closed by client.");
      t1 = _this._onOpen;
      if (t1 != null)
        t1.cancel$0();
      t1 = _this._onMessage;
      if (t1 != null)
        t1.cancel$0();
      t1 = _this._web$_onClose;
      if (t1 != null)
        t1.cancel$0();
      _this._onOpen = _this._onMessage = _this._web$_onClose = null;
    },
    WebsocketWeb$_$1(_socket) {
      var _this = this,
        t1 = _this._web$_socket,
        t2 = type$.dynamic;
      _this._onOpen = A.WebEventStream_stream(t1, "open", t2).listen$1(new A.WebsocketWeb$__closure(_this));
      _this._onMessage = A.WebEventStream_stream(t1, "message", t2).listen$1(new A.WebsocketWeb$__closure0(_this));
      _this._web$_onClose = A.WebEventStream_stream(t1, "close", t2).listen$1(new A.WebsocketWeb$__closure1(_this));
    },
    $isPlatformWebScoket: 1
  };
  A.WebsocketWeb$__closure.prototype = {
    call$1($event) {
      var t1 = this.$this,
        t2 = t1._connectedCompleter;
      if (t2 != null)
        t2.complete$1(t1);
      t1._connectedCompleter = null;
      t2 = t1._onOpen;
      if (t2 != null)
        t2.cancel$0();
      t1._onOpen = null;
    },
    $signature: 23
  };
  A.WebsocketWeb$__closure0.prototype = {
    call$1($event) {
      this.$this.get$_streamController().add$1(0, $event);
    },
    $signature: 23
  };
  A.WebsocketWeb$__closure1.prototype = {
    call$1($event) {
      var t2,
        t1 = this.$this;
      t1.get$_streamController().close$0();
      t2 = t1._connectedCompleter;
      if (t2 != null)
        t2.completeError$1($.$get$ApiProviderExceptionConst_connectionClosed());
      t1._connectedCompleter = null;
    },
    $signature: 23
  };
  A.CustomCoins.prototype = {
    get$coinName() {
      return this.name;
    },
    get$proposal() {
      return B.C_CustomProposal;
    },
    get$conf() {
      return this.conf;
    }
  };
  A.CustomCoins_fromName_closure.prototype = {
    call$1(element) {
      return type$.CustomCoins._as(element).name === this.name;
    },
    $signature: 277
  };
  A.CustomProposal.prototype = {
    get$specName() {
      return "CIP-0019";
    },
    $isBipProposal: 1,
    get$name() {
      return "CIP-0019";
    }
  };
  A.CustomCurrencyConf_byronLegacy_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronLegacyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 126
  };
  A.CustomCurrencyConf_byronLegacyTestnet_closure.prototype = {
    call$1(kwargs) {
      return new A.AdaByronLegacyAddrEncoder();
    },
    call$0() {
      return this.call$1(null);
    },
    $signature: 126
  };
  A.AddressDerivationType.prototype = {
    _enumToString$0() {
      return "AddressDerivationType." + this._name;
    }
  };
  A.AddressDerivationType_fromTag_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_bytesEqual(type$.AddressDerivationType._as(e).tag, this.tag);
    },
    $signature: 279
  };
  A.AddressDerivationType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_account_details_null);
    },
    $signature: 0
  };
  A.AddressDerivationIndex.prototype = {};
  A.Bip32AddressIndex.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.currencyCoin,
        t2 = t1.get$proposal().get$specName();
      t1 = t1.get$coinName();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_81, type$.int), new A.CborListValue([_this.purpose, _this.coin, _this.accountLevel, _this.changeLevel, _this.addressIndex, new A.CborStringValue(t2 + "#" + t1), _this.seedGeneration.value, _this.importedKeyId, _this.keyName], false, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      var _this = this;
      return [_this.purpose, _this.coin, _this.accountLevel, _this.changeLevel, _this.addressIndex, _this.currencyCoin.get$conf().get$type(), _this.seedGeneration.name, _this.importedKeyId];
    },
    toString$0(_) {
      var t1 = this.hdPath;
      return t1 == null ? "non_derivation" : t1;
    }
  };
  A.Bip32AddressIndex__toPath_closure.prototype = {
    call$1(element) {
      return A._asIntQ(element) != null;
    },
    $signature: 280
  };
  A.Bip32AddressIndex__toPath_closure0.prototype = {
    call$1(e) {
      A._asIntQ(e);
      e.toString;
      return A.Bip32KeyIndex_Bip32KeyIndex(e);
    },
    $signature: 281
  };
  A.MultiSigAddressIndex.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.keyName], type$.JSArray_nullable_String);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_83, type$.int), new A.CborListValue(t1, true, type$.CborListValue_nullable_String), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [];
    },
    toString$0(_) {
      return "multi_signature";
    }
  };
  A.SubstrateAddressIndex.prototype = {
    toCbor$0() {
      var t3, _this = this,
        t1 = _this.currencyCoin,
        t2 = t1.get$proposal().get$specName();
      t1 = t1.get$coinName();
      t3 = _this.substratePath;
      if (t3 == null)
        t3 = B.C_CborNullValue;
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_200_84, type$.int), new A.CborListValue([new A.CborStringValue(t2 + "#" + t1), t3, _this.importedKeyId, _this.keyName], false, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [$.$get$SubstrateCoins__coinToConf().$index(0, this.currencyCoin).type, this.importedKeyId, this.substratePath];
    },
    toString$0(_) {
      var t1 = this.substratePath;
      return t1 == null ? "non_derivation" : t1;
    }
  };
  A.SeedTypes.prototype = {
    _enumToString$0() {
      return "SeedTypes." + this._name;
    }
  };
  A.SeedTypes_fromValue_closure.prototype = {
    call$1(e) {
      return type$.SeedTypes._as(e).value === this.tag;
    },
    $signature: 282
  };
  A.SeedTypes_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 0
  };
  A._AddressDerivationIndex_Object_CborSerializable.prototype = {};
  A._AddressDerivationIndex_Object_CborSerializable_Equatable.prototype = {};
  A.NetworkType.prototype = {
    toString$0(_) {
      return "NetworkType." + this.name;
    }
  };
  A.NetworkType_fromTag_closure.prototype = {
    call$1(e) {
      type$.NetworkType._as(e);
      return A.BytesUtils_bytesEqual(this._box_0.tag, e.tag);
    },
    $signature: 124
  };
  A.NetworkType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_incorrect_network_null);
    },
    $signature: 0
  };
  A.NetworkType_fromName_closure.prototype = {
    call$1(e) {
      return type$.NetworkType._as(e).name === this.name;
    },
    $signature: 124
  };
  A.NetworkType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_incorrect_network_null);
    },
    $signature: 0
  };
  A.APIProvider.prototype = {
    get$variabels() {
      return [this.uri, this.protocol, this.auth];
    }
  };
  A._APIProvider_Object_Equatable.prototype = {};
  A._APIProvider_Object_Equatable_CborSerializable.prototype = {};
  A.EthereumAPIProvider.prototype = {
    get$variabels() {
      return [this.uri, this.protocol, this.auth];
    }
  };
  A.EthereumAPIProvider_EthereumAPIProvider$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.ProviderAuthenticated_ProviderAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 284
  };
  A.BaseServiceProtocol.prototype = {};
  A.APIServiceTracker.prototype = {
    _checkStatus$0() {
      var t3,
        t1 = this._requests,
        t2 = A._arrayInstanceType(t1);
      t2 = this._totalSuccess = new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.APIServiceTracker__checkStatus_closure()), t2._eval$1("WhereIterable<1>")).get$length(0);
      t1 = t1.length;
      t3 = t1 - t2;
      this._totalError = t3;
      if (t1 === 0 || t2 === t1)
        return B.APIServiceStatus_0;
      if (t3 === t1)
        return B.APIServiceStatus_2;
      return B.APIServiceStatus_1;
    },
    _updateStatus$0() {
      var updateStatus = this._checkStatus$0(),
        t1 = this.status;
      if (t1._live$_value !== updateStatus)
        t1.set$value(updateStatus);
    }
  };
  A.APIServiceTracker__checkStatus_closure.prototype = {
    call$1(element) {
      return type$.ApiRequest._as(element).error == null;
    },
    $signature: 285
  };
  A.HTTPService.prototype = {
    get$protocol() {
      return B.ServiceProtocol_HTTP_0_http;
    },
    _callSynchronizedService$1$2$allowStatus(t, allowStatus, $T) {
      return this._callSynchronizedService$body$HTTPService(type$.Future_HTTPCallerResponse_Function._as(t), type$.List_int._as(allowStatus), $T, $T._eval$1("BaseServiceResponse<0>"));
    },
    _callSynchronizedService$body$HTTPService(t, allowStatus, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, t1;
      var $async$_callSynchronizedService$1$2$allowStatus = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._onServiceException$1$2$allowStatus(t, allowStatus, $T);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_callSynchronizedService$1$2$allowStatus, $async$completer);
    },
    disposeService$0() {
    },
    serviceRequest$1$4$allowStatus$timeout$uri(request, allowStatus, timeout, uri, $T) {
      var currentProvider = null, responseType = null;
      return this.serviceRequest$body$HTTPService(request, type$.List_int._as(allowStatus), timeout, uri, $T, $T._eval$1("BaseServiceResponse<0>"));
    },
    serviceRequest$body$HTTPService(request, allowStatus, timeout, uri, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], $async$self = this, authenticated, t1, headers, type, e, t3, exception, currentProvider, responseType, response, toUri, t2, $async$exception;
      var $async$serviceRequest$1$4$allowStatus$timeout$uri = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              currentProvider = null;
              responseType = null;
              response = null;
              toUri = uri;
              t2 = currentProvider;
              if (t2 != null)
                t2.get$auth();
              t2 = $async$self.provider;
              authenticated = t2.auth;
              $async$handler = 4;
              t3 = type$.String;
              t1 = A.LinkedHashMap_LinkedHashMap$_empty(t3, t3);
              if (request.type === B.RequestServiceType_0)
                J.$indexSet$ax(t1, "Content-Type", "application/json");
              J.$indexSet$ax(t1, "Accept", "application/json");
              J.addAll$1$ax(t1, request.headers);
              headers = t1;
              type = $async$self._detectTemplateType$1$1$responseType(responseType, $T);
              $async$goto = 7;
              return A._asyncAwait($async$self._callSynchronizedService$1$2$allowStatus(new A.HTTPService_serviceRequest_closure($async$self, request, toUri, timeout, headers, type, authenticated), allowStatus, $T), $async$serviceRequest$1$4$allowStatus$timeout$uri);
            case 7:
              // returning from await.
              response = $async$result;
              t1 = response;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.ApiProviderException) {
                e = t1;
                t1 = $async$self.tracker;
                J.toString$0$(toUri);
                t3 = currentProvider;
                if (t3 != null)
                  t3.get$identifier();
                new A.DateTime(Date.now(), 0, false).toLocal$0();
                B.JSArray_methods.add$1(t1._requests, new A.ApiRequest(t2.identifier, e));
                t1._updateStatus$0();
                throw $async$exception;
              } else
                throw $async$exception;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              if (response != null) {
                t1 = $async$self.tracker;
                J.toString$0$(toUri);
                t3 = currentProvider;
                if (t3 != null)
                  t3.get$identifier();
                new A.DateTime(Date.now(), 0, false).toLocal$0();
                B.JSArray_methods.add$1(t1._requests, new A.ApiRequest(t2.identifier, null));
                t1._updateStatus$0();
              }
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$serviceRequest$1$4$allowStatus$timeout$uri, $async$completer);
    },
    _onServiceException$1$2$allowStatus(t, allowStatus, $T) {
      return this._onServiceException$body$HTTPService(type$.Future_HTTPCallerResponse_Function._as(t), type$.List_int._as(allowStatus), $T, $T._eval$1("BaseServiceResponse<0>"));
    },
    _onServiceException$body$HTTPService(t, allowStatus, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$self = this, response, e, t1, t2, exception, $async$exception;
      var $async$_onServiceException$1$2$allowStatus = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(t.call$0(), $async$_onServiceException$1$2$allowStatus);
            case 7:
              // returning from await.
              response = $async$result;
              t1 = B.JSArray_methods.contains$1(allowStatus, response.statusCode);
              if (!t1) {
                t1 = response.statusCode;
                t2 = response.error$0();
                t1 = A.ApiProviderException_ApiProviderException$fromException(t2 == null ? response.result : t2, t1);
                throw A.wrapException(t1);
              }
              t1 = $async$self._readServiceResponse$1$1(response, $T);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              e = A.unwrapException($async$exception);
              t1 = A.ApiProviderException_ApiProviderException$fromException(e, null);
              throw A.wrapException(t1);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$_onServiceException$1$2$allowStatus, $async$completer);
    },
    _detectTemplateType$1$1$responseType(responseType, $T) {
      if ($T._is(B.Type_dynamic_wn9))
        return B.HTTPResponseType_2;
      if ($T._is([]))
        return B.HTTPResponseType_2;
      if ($T._is(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic)))
        return B.HTTPResponseType_3;
      if ($T._is(A._setArrayType([], type$.JSArray_Map_String_dynamic)))
        return B.HTTPResponseType_4;
      if ($T._is(A._setArrayType([], type$.JSArray_int)))
        return B.HTTPResponseType_0;
      if (B.Type_String_AXU === A.createRuntimeType($T))
        return B.HTTPResponseType_1;
      return B.HTTPResponseType_2;
    },
    _readServiceResponse$1$1(response, $T) {
      var t1, t2, exception;
      try {
        t1 = response.statusCode;
        if (t1 >= 200 && t1 < 300) {
          t2 = $T._as(response.result);
          return new A.ServiceSuccessRespose(t2, t1, B.ServiceResponseType_1, $T._eval$1("ServiceSuccessRespose<0>"));
        }
        t2 = A._asStringQ(response.result);
        return new A.ServiceErrorResponse(t2, t1, B.ServiceResponseType_0, $T._eval$1("ServiceErrorResponse<0>"));
      } catch (exception) {
        t1 = A.ApiProviderException_ApiProviderException$error("invalid_request_type");
        throw A.wrapException(t1);
      }
    },
    $isBaseServiceProtocol: 1
  };
  A.HTTPService_serviceRequest_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.HTTPCallerResponse),
        $async$returnValue, $async$self = this, t3, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = null;
              t2 = $async$self.request;
            case 3:
              // switch
              switch (t2.type) {
                case B.RequestServiceType_1:
                  // goto case
                  $async$goto = 5;
                  break;
                case B.RequestServiceType_0:
                  // goto case
                  $async$goto = 6;
                  break;
                default:
                  // goto after switch
                  $async$goto = 4;
                  break;
              }
              break;
            case 5:
              // case
              t2 = $.$get$HttpImpl__serviceCaller();
              $async$goto = 7;
              return A._asyncAwait(t2.call$7$authenticated$headers$isolate$responseType$timeout$type$url($async$self.authenticated, $async$self.headers, B.APPIsolate_0, $async$self.type, B.Duration_30000000, B.HTTPRequestType_GET_get, $async$self.toUri), $async$call$0);
            case 7:
              // returning from await.
              t1 = $async$result;
              // goto after switch
              $async$goto = 4;
              break;
            case 6:
              // case
              t3 = $.$get$HttpImpl__serviceCaller();
              $async$goto = 8;
              return A._asyncAwait(t3.call$8$authenticated$body$headers$isolate$responseType$timeout$type$url($async$self.authenticated, A.StringUtils_encode(A.StringUtils_fromJson(t2.jsonBody, null, null, false), B.StringEncoding_1), $async$self.headers, B.APPIsolate_0, $async$self.type, B.Duration_30000000, B.HTTPRequestType_POST_post, $async$self.toUri), $async$call$0);
            case 8:
              // returning from await.
              t1 = $async$result;
              // goto after switch
              $async$goto = 4;
              break;
            case 4:
              // after switch
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 286
  };
  A._HTTPService_Object_HttpImpl.prototype = {};
  A.BaseSocketService.prototype = {
    providerCaller$2(t, param) {
      return this.providerCaller$body$BaseSocketService(type$.Future_Map_String_dynamic_Function._as(t), param);
    },
    providerCaller$body$BaseSocketService(t, param) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], $async$self = this, e, t1, exception, response, $async$exception;
      var $async$providerCaller$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              response = null;
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait($async$self._onException$1(t), $async$providerCaller$2);
            case 7:
              // returning from await.
              response = $async$result;
              t1 = response;
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 5;
              break;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.ApiProviderException) {
                e = t1;
                t1 = $async$self.tracker;
                new A.DateTime(Date.now(), 0, false).toLocal$0();
                B.JSArray_methods.add$1(t1._requests, new A.ApiRequest($async$self.provider.identifier, e));
                t1._updateStatus$0();
                throw $async$exception;
              } else
                throw $async$exception;
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              if (response != null) {
                t1 = $async$self.tracker;
                new A.DateTime(Date.now(), 0, false).toLocal$0();
                B.JSArray_methods.add$1(t1._requests, new A.ApiRequest($async$self.provider.identifier, null));
                t1._updateStatus$0();
              }
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$providerCaller$2, $async$completer);
    },
    _onException$1(t) {
      return this._onException$body$BaseSocketService(type$.Future_Map_String_dynamic_Function._as(t));
    },
    _onException$body$BaseSocketService(t) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$self = this, response, e, t1, exception, $async$exception;
      var $async$_onException$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait($async$self.connect$0().timeout$1(B.Duration_30000000), $async$_onException$1);
            case 7:
              // returning from await.
              if ($async$self._status !== B.SocketStatus_0) {
                t1 = A.ApiProviderException_ApiProviderException$error("node_connection_error");
                throw A.wrapException(t1);
              }
              $async$goto = 8;
              return A._asyncAwait(t.call$0(), $async$_onException$1);
            case 8:
              // returning from await.
              response = $async$result;
              $async$returnValue = response;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              e = A.unwrapException($async$exception);
              t1 = A.ApiProviderException_ApiProviderException$fromException(e, null);
              throw A.wrapException(t1);
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$_onException$1, $async$completer);
    }
  };
  A.WebSocketService.prototype = {
    _onClose$0() {
      var t1, _this = this;
      _this._status = B.SocketStatus_1;
      t1 = _this._websocket$_subscription;
      if (t1 != null)
        t1._source.cancel$0().catchError$1(new A.WebSocketService__onClose_closure());
      t1 = _this._socket;
      if (t1 != null)
        t1.get$_streamController().close$0();
      _this._socket = _this._websocket$_subscription = null;
    },
    disposeService$0() {
      return this._onClose$0();
    },
    onMessge$1($event) {
      var t1, request,
        decode = A.StringUtils_toJson($event, null, type$.Map_String_dynamic);
      if (decode.containsKey$1("id")) {
        t1 = decode.$index(0, "id");
        t1.toString;
        request = this._websocket$_requests.remove$1(0, A.int_parse(J.toString$0$(t1), null));
        t1 = request == null;
        if (!t1)
          request.completer.complete$1(decode);
        if (!t1)
          return null;
      }
      return decode;
    },
    connect$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this;
      var $async$connect$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self._websocket$_lock.synchronized$1$1(new A.WebSocketService_connect_closure($async$self), type$.Null), $async$connect$0);
            case 2:
              // returning from await.
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$connect$0, $async$completer);
    },
    addMessage$2(message, timeout) {
      return this.addMessage$body$WebSocketService(message, timeout);
    },
    addMessage$body$WebSocketService(message, timeout) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$next = [], $async$self = this, t1;
      var $async$addMessage$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              try {
                t1 = $async$self.providerCaller$2(new A.WebSocketService_addMessage_closure($async$self, message, timeout), message);
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              } finally {
                $async$self._websocket$_requests.remove$1(0, message.id);
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$addMessage$2, $async$completer);
    },
    get$protocol() {
      return B.ServiceProtocol_WebSocket_3_websocket;
    }
  };
  A.WebSocketService__onClose_closure.prototype = {
    call$1(e) {
    },
    $signature: 20
  };
  A.WebSocketService_connect_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Null),
        $async$returnValue, $async$self = this, result, t2, t3, t1;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              if (t1._status !== B.SocketStatus_1) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return A._asyncAwait(A.MethodUtils_call(new A.WebSocketService_connect__closure(t1), type$.PlatformWebScoket), $async$call$0);
            case 3:
              // returning from await.
              result = $async$result;
              t2 = result.exception;
              if (t2 == null) {
                t1._status = B.SocketStatus_0;
                t2 = t1._socket = result.get$result();
                if (t2 == null)
                  t2 = null;
                else {
                  t2 = t2.get$_streamController();
                  t3 = A._instanceType(t2)._eval$1("_ControllerStream<1>");
                  t3 = new A.CastStream(new A._ControllerStream(t2, t3), t3._eval$1("CastStream<Stream.T,String>")).listen$2$onDone(t1.get$onMessge(), t1.get$_onClose());
                  t2 = t3;
                }
                t1._websocket$_subscription = t2;
              } else {
                t1._status = B.SocketStatus_1;
                throw A.wrapException(t2);
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 287
  };
  A.WebSocketService_connect__closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.PlatformWebScoket),
        $async$returnValue, $async$self = this;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.PlatformWebScoket_connect($async$self.$this.provider.uri), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 288
  };
  A.WebSocketService_addMessage_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Map_String_dynamic),
        $async$returnValue, $async$self = this, result, t3, t1, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              t2 = $async$self.message;
              t1._websocket$_requests.$indexSet(0, t2.id, t2);
              t3 = type$.List_int._as(t2.params);
              t1 = t1._socket;
              if (t1 != null)
                t1._web$_socket.send(type$.NativeByteBuffer._as(B.NativeUint8List_methods.get$buffer(new Uint8Array(A._ensureNativeList(t3)))));
              $async$goto = 3;
              return A._asyncAwait(t2.completer.future.timeout$1($async$self.timeout), $async$call$0);
            case 3:
              // returning from await.
              result = $async$result;
              $async$returnValue = type$.FutureOr_Map_String_dynamic._as(result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 289
  };
  A.ServiceProtocol.prototype = {
    _enumToString$0() {
      return "ServiceProtocol." + this._name;
    },
    toString$0(_) {
      return this.value;
    }
  };
  A.ServiceProtocol_fromID_closure.prototype = {
    call$1(element) {
      return type$.ServiceProtocol._as(element).id === this.id;
    },
    $signature: 290
  };
  A.ApiRequest.prototype = {};
  A.SocketRequestCompleter.prototype = {};
  A.SocketStatus.prototype = {
    _enumToString$0() {
      return "SocketStatus." + this._name;
    }
  };
  A.APIServiceStatus.prototype = {
    _enumToString$0() {
      return "APIServiceStatus." + this._name;
    }
  };
  A.EthereumSubscribeResult.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["subscription", this.subscription, "result", this.result], type$.String, type$.dynamic);
    }
  };
  A.EthereumHTTPService.prototype = {
    doRequest$1$2$timeout(params, timeout, $T) {
      return this.doRequest$body$EthereumHTTPService(params, timeout, $T, $T._eval$1("BaseServiceResponse<0>"));
    },
    doRequest$body$EthereumHTTPService(params, timeout, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, t1;
      var $async$doRequest$1$2$timeout = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.Uri_parse($async$self.provider.uri, 0, null);
              $async$goto = 3;
              return A._asyncAwait($async$self.serviceRequest$1$4$allowStatus$timeout$uri(params, A._setArrayType([200], type$.JSArray_int), timeout, t1, $T), $async$doRequest$1$2$timeout);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$doRequest$1$2$timeout, $async$completer);
    },
    $isEthereumServiceProvider: 1
  };
  A.EthereumWebsocketService.prototype = {
    _emitListeners$1(result) {
      var t1 = A.List_List$_of(this._listeners, type$.void_Function_EthereumSubscribeResult),
        t2 = t1.length,
        t3 = type$.Object,
        _i = 0;
      for (; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        A.MethodUtils_nullOnException(new A.EthereumWebsocketService__emitListeners_closure(t1[_i], result), t3);
    },
    onMessge$1($event) {
      var result,
        message = this.super$WebSocketService$onMessge(A._asString($event));
      if (message != null && J.$eq$(message.$index(0, "method"), "eth_subscription")) {
        result = A.MethodUtils_nullOnException(new A.EthereumWebsocketService_onMessge_closure(message), type$.EthereumSubscribeResult);
        if (result != null)
          this._emitListeners$1(result);
      }
      return message;
    },
    disposeService$0() {
      this.super$WebSocketService$disposeService();
      B.JSArray_methods.clear$0(this._listeners);
    },
    doRequest$1$2$timeout(params, timeout, $T) {
      return this.doRequest$body$EthereumWebsocketService(params, timeout, $T, $T._eval$1("BaseServiceResponse<0>"));
    },
    doRequest$body$EthereumWebsocketService(params, timeout, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, t1, t2, $async$temp1;
      var $async$doRequest$1$2$timeout = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = A.StringUtils_encode(A.StringUtils_fromJson(params.jsonBody, null, null, false), B.StringEncoding_1);
              t2 = $.Zone__current;
              $async$temp1 = params;
              $async$goto = 3;
              return A._asyncAwait($async$self.addMessage$2(new A.SocketRequestCompleter(new A._AsyncCompleter(new A._Future(t2, type$._Future_dynamic), type$._AsyncCompleter_dynamic), t1, params.requestID), B.Duration_30000000), $async$doRequest$1$2$timeout);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.toResponse$1$1($async$result, $T);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$doRequest$1$2$timeout, $async$completer);
    },
    $isEthereumServiceProvider: 1
  };
  A.EthereumWebsocketService__emitListeners_closure.prototype = {
    call$0() {
      return this.i.call$1(this.result);
    },
    $signature: 1
  };
  A.EthereumWebsocketService_onMessge_closure.prototype = {
    call$0() {
      var t1 = type$.Map_String_dynamic._as(this.message.$index(0, "params")),
        t2 = A._asString(t1.$index(0, "subscription"));
      t1 = t1.$index(0, "result");
      return new A.EthereumSubscribeResult(t2, t1 == null ? type$.Object._as(t1) : t1);
    },
    $signature: 292
  };
  A.IntegerBalance.prototype = {
    _updateBalance$1(updateBalance) {
      var t2, _this = this,
        t1 = _this.__IntegerBalance_showDecimal_F;
      t1 === $ && A.throwLateFieldNI("showDecimal");
      t1 = A.BigRational_BigRational(updateBalance, null).$div(0, A.RetionalConst_fromDecimalNumber(_this._token.decimal)).toDecimal$1$digits(t1);
      _this.__IntegerBalance__price_A = t1;
      _this._balance = updateBalance;
      A.StrUtils_to3Digits(t1, ",");
      t1 = _this._balance;
      t2 = $.$get$_BigIntImpl_zero();
      t1.compareTo$1(0, t2);
      _this._balance.compareTo$1(0, t2);
    },
    toString$0(_) {
      var t1 = this.__IntegerBalance__price_A;
      t1 === $ && A.throwLateFieldNI("_price");
      return t1;
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this !== other) {
        t1 = false;
        if (other instanceof A.IntegerBalance)
          if (this._token.$eq(0, other._token))
            t1 = other._balance.compareTo$1(0, this._balance) === 0;
      } else
        t1 = true;
      return t1;
    },
    get$hashCode(_) {
      return A.HashCodeGenerator_generateHashCode([this._token, this._balance]);
    },
    $isBalanceCore: 1
  };
  A.AptosChainType.prototype = {
    _enumToString$0() {
      return "AptosChainType." + this._name;
    }
  };
  A.AptosChainType_fromValue_closure.prototype = {
    call$1(e) {
      return type$.AptosChainType._as(e).id === this.value;
    },
    $signature: 293
  };
  A.AptosChainType_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 0
  };
  A.SolanaNetworkType.prototype = {
    _enumToString$0() {
      return "SolanaNetworkType." + this._name;
    }
  };
  A.SolanaNetworkType_fromValue_closure.prototype = {
    call$1(e) {
      return type$.SolanaNetworkType._as(e).value === this.value;
    },
    $signature: 294
  };
  A.SolanaNetworkType_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 0
  };
  A.StellarChainType.prototype = {
    _enumToString$0() {
      return "StellarChainType." + this._name;
    }
  };
  A.StellarChainType_fromValue_closure.prototype = {
    call$1(e) {
      return type$.StellarChainType._as(e).value === this.value;
    },
    $signature: 295
  };
  A.StellarChainType_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 0
  };
  A.SuiChainType.prototype = {
    _enumToString$0() {
      return "SuiChainType." + this._name;
    }
  };
  A.SuiChainType_fromValue_closure.prototype = {
    call$1(e) {
      return type$.SuiChainType._as(e).value === this.value;
    },
    $signature: 296
  };
  A.SuiChainType_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_data_verification_failed_null);
    },
    $signature: 0
  };
  A.CosmosFeeToken.prototype = {
    toCbor$0() {
      var t3, t4, _this = this,
        t1 = _this.token.toCbor$0(),
        t2 = _this.lowGasPrice;
      t2 = t2 == null ? null : t2._balance;
      t3 = _this.averageGasPrice._balance;
      t4 = _this.highGasPrice;
      t4 = t4 == null ? null : t4._balance;
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_110_1, type$.int), new A.CborListValue([t1, new A.CborStringValue(_this.denom), t2, t3, t4], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure.prototype = {
    call$1(e) {
      return A.IntegerBalance_IntegerBalance$token(type$.BigInt._as(e), this.token, true);
    },
    $signature: 122
  };
  A.CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure0.prototype = {
    call$1(e) {
      return A.IntegerBalance_IntegerBalance$token(type$.BigInt._as(e), this.token, true);
    },
    $signature: 122
  };
  A._CosmosFeeToken_Object_CborSerializable.prototype = {};
  A.EIP712Domain.prototype = {};
  A.SolanaWeb3TransactionSignResponse.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["signedTransaction", this.signedTransaction], type$.String, type$.dynamic);
    }
  };
  A.SolanaWeb3TransactionSendResponse.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["signature", this.signature], type$.String, type$.dynamic);
    }
  };
  A.TonAccountContextType.prototype = {
    _enumToString$0() {
      return "TonAccountContextType." + this._name;
    }
  };
  A.TonAccountContextType_fromTag_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_bytesEqual(type$.TonAccountContextType._as(e).tag, this.tag);
    },
    $signature: 298
  };
  A.TonAccountContextType_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.WalletException_invalid_account_details_null);
    },
    $signature: 0
  };
  A.TonAccountContext.prototype = {};
  A.TonAccountLegacyContext.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.version.name, this.bouncable], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    toWalletContract$2$chain$publicKey(chain, publicKey) {
      var _0_0, state, t1, _this = this;
      type$.List_int._as(publicKey);
      _0_0 = _this.version;
      $label0$0: {
        if (B.WalletVersion_v1R1_1 === _0_0) {
          state = A.NoneSubWalletVersionedWalletState$(publicKey, B.WalletVersion_v1R1_1);
          t1 = A.TonAddress_TonAddress$fromState(_this.bouncable, state.initialState$0(), chain.workchain);
          t1 = new A.WalletV1R1(state, t1);
          break $label0$0;
        }
        if (B.WalletVersion_v1R2_1 === _0_0) {
          state = A.NoneSubWalletVersionedWalletState$(publicKey, B.WalletVersion_v1R2_1);
          t1 = A.TonAddress_TonAddress$fromState(_this.bouncable, state.initialState$0(), chain.workchain);
          t1 = new A.WalletV1R2(state, t1);
          break $label0$0;
        }
        if (B.WalletVersion_v1R3_1 === _0_0) {
          state = A.NoneSubWalletVersionedWalletState$(publicKey, B.WalletVersion_v1R3_1);
          t1 = A.TonAddress_TonAddress$fromState(_this.bouncable, state.initialState$0(), chain.workchain);
          t1 = new A.WalletV1R3(state, t1);
          break $label0$0;
        }
        if (B.WalletVersion_v2R1_2 === _0_0) {
          state = A.NoneSubWalletVersionedWalletState$(publicKey, B.WalletVersion_v2R1_2);
          t1 = A.TonAddress_TonAddress$fromState(_this.bouncable, state.initialState$0(), chain.workchain);
          t1 = new A.WalletV2R1(state, t1);
          break $label0$0;
        }
        if (B.WalletVersion_v2R2_2 === _0_0) {
          state = A.NoneSubWalletVersionedWalletState$(publicKey, B.WalletVersion_v2R2_2);
          t1 = A.TonAddress_TonAddress$fromState(_this.bouncable, state.initialState$0(), chain.workchain);
          t1 = new A.WalletV2R2(state, t1);
          break $label0$0;
        }
        t1 = A.throwExpression(B.WalletException_invalid_account_details_null);
      }
      return t1;
    },
    get$variabels() {
      return [this.version.name];
    }
  };
  A.TonAccountSubWalletContext.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.version.name, _this.bouncable, _this.subwalletId], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    toWalletContract$2$chain$publicKey(chain, publicKey) {
      var _0_0, state, t1, _this = this;
      type$.List_int._as(publicKey);
      _0_0 = _this.version;
      $label0$0: {
        if (B.WalletVersion_v3R1_3 === _0_0) {
          state = A.SubWalletVersionedWalletState$(publicKey, _this.subwalletId, B.WalletVersion_v3R1_3);
          t1 = A.TonAddress_TonAddress$fromState(_this.bouncable, state.initialState$0(), chain.workchain);
          t1 = new A.WalletV3R1(state, t1);
          break $label0$0;
        }
        if (B.WalletVersion_v3R2_3 === _0_0) {
          state = A.SubWalletVersionedWalletState$(publicKey, _this.subwalletId, B.WalletVersion_v3R2_3);
          t1 = A.TonAddress_TonAddress$fromState(_this.bouncable, state.initialState$0(), chain.workchain);
          t1 = new A.WalletV3R2(state, t1);
          break $label0$0;
        }
        if (B.WalletVersion_v4_4 === _0_0) {
          state = A.SubWalletVersionedWalletState$(publicKey, _this.subwalletId, B.WalletVersion_v4_4);
          t1 = A.TonAddress_TonAddress$fromState(_this.bouncable, state.initialState$0(), chain.workchain);
          t1 = new A.WalletV4(state, t1);
          break $label0$0;
        }
        t1 = A.throwExpression(B.WalletException_invalid_account_details_null);
      }
      return t1;
    },
    get$variabels() {
      return [this.version.name, this.subwalletId];
    }
  };
  A.TonAccountV5CustomContext.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.version.name, _this.bouncable, _this.walletId], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    toWalletContract$2$chain$publicKey(chain, publicKey) {
      return A.WalletV5R1_WalletV5R1$create(this.bouncable, chain, new A.V5R1CustomContext(this.walletId, chain), type$.List_int._as(publicKey));
    },
    get$variabels() {
      return [this.version.name, this.walletId];
    }
  };
  A.TonAccountV5SubWalletContext.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.version.name, _this.bouncable, _this.subwalletId], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(_this.type.tag, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    toWalletContract$2$chain$publicKey(chain, publicKey) {
      return A.WalletV5R1_WalletV5R1$create(this.bouncable, chain, new A.V5R1ClientContext(this.subwalletId, chain), type$.List_int._as(publicKey));
    },
    get$variabels() {
      return [this.version.name, this.subwalletId];
    }
  };
  A._TonAccountContext_Object_CborSerializable.prototype = {};
  A._TonAccountContext_Object_CborSerializable_Equatable.prototype = {};
  A.CoingeckoCoin.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.apiId, this.coinName, this.symbol], type$.JSArray_nullable_String);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_60_12, type$.int), new A.CborListValue(t1, true, type$.CborListValue_nullable_String), type$.CborTagValue_dynamic);
    },
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["id", this.apiId, "name", this.coinName, "symbol", this.symbol], type$.String, type$.dynamic);
    }
  };
  A._CoingeckoCoin_Object_CborSerializable.prototype = {};
  A._CoingeckoCoin_Object_CborSerializable_JsonSerialization.prototype = {};
  A.APPToken.prototype = {};
  A.Token.prototype = {
    toCbor$0() {
      var t2, _this = this,
        t1 = _this.assetLogo;
      t1 = t1 == null ? null : t1.toCbor$0();
      if (t1 == null)
        t1 = B.C_CborNullValue;
      t2 = _this.market;
      t2 = t2 == null ? null : t2.toCbor$0();
      if (t2 == null)
        t2 = B.C_CborNullValue;
      t2 = A._setArrayType([_this.name, _this.symbol, _this.decimal, t1, t2], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_110, type$.int), new A.CborListValue(t2, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$variabels() {
      return [this.name, this.symbol, this.decimal];
    },
    toString$0(_) {
      return "Token: " + this.name;
    }
  };
  A.Token_Token$deserialize_closure.prototype = {
    call$1(e) {
      return A.APPImage_APPImage$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 299
  };
  A.Token_Token$deserialize_closure0.prototype = {
    call$1(e) {
      var cbor = A.CborSerializable_decodeCborTags(null, type$.CborTagValue_dynamic._as(e), B.List_60_12, type$.CborListValue_dynamic),
        t1 = type$.nullable_String;
      return new A.CoingeckoCoin(A.ExtractCborList_elementAt(cbor, 0, type$.String), A.ExtractCborList_elementAt(cbor, 1, t1), A.ExtractCborList_elementAt(cbor, 2, t1));
    },
    $signature: 300
  };
  A._APPToken_Object_CborSerializable.prototype = {};
  A._APPToken_Object_CborSerializable_Equatable.prototype = {};
  A.Web3RequestException.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["message", _this.message, "code", _this.code, "walletCode", _this.walletCode, "data", _this.data], type$.String, type$.dynamic);
    },
    toResponseMessage$1$requestId(requestId) {
      var _this = this;
      return new A.Web3ExceptionMessage(_this.message, _this.code, _this.walletCode, _this.data, null);
    },
    toResponseMessage$0() {
      return this.toResponseMessage$1$requestId(null);
    },
    toString$0(_) {
      return this.message;
    },
    get$variabels() {
      return [this.code, this.message];
    },
    $isException: 1
  };
  A._Web3RequestException_Object_Equatable.prototype = {};
  A.Web3ChainMessage.prototype = {
    get$type() {
      return this.type;
    }
  };
  A.Web3EncryptedMessage.prototype = {
    toCbor$0() {
      var t2, t3,
        t1 = this.message;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = this.nonce;
      A.BytesUtils_validateListOfBytes(t3);
      t3 = A._setArrayType([new A.CborBytesValue(t1), new A.CborBytesValue(A.List_List$unmodifiable(t3, t2))], type$.JSArray_CborBytesValue);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_0_10_200_0, t2), new A.CborListValue(t3, true, type$.CborListValue_CborBytesValue), type$.CborTagValue_dynamic);
    }
  };
  A._Web3EncryptedMessage_Object_CborSerializable.prototype = {};
  A.Web3ExceptionMessage.prototype = {
    toJson$0() {
      var _this = this,
        t1 = A.LinkedHashMap_LinkedHashMap$_literal(["message", _this.message, "code", _this.code, "walletCode", _this.walletCode, "data", _this.data], type$.String, type$.dynamic);
      t1.removeWhere$1(0, new A.Web3ExceptionMessage_toJson_closure());
      return t1;
    },
    get$type() {
      return B.Web3MessageTypes_List_100_15_error;
    }
  };
  A.Web3ExceptionMessage_Web3ExceptionMessage$deserialize_closure.prototype = {
    call$1(p0) {
      return A.Web3APPData_Web3APPData$deserialize(type$.CborObject._as(p0));
    },
    $signature: 301
  };
  A.Web3ExceptionMessage_toJson_closure.prototype = {
    call$2(k, v) {
      A._asString(k);
      return v == null;
    },
    $signature: 2
  };
  A.Web3GlobalResponseMessage.prototype = {
    get$type() {
      return B.Web3MessageTypes_List_100_18_globalResponse;
    }
  };
  A.Web3GlobalResponseMessage_Web3GlobalResponseMessage$deserialize_closure.prototype = {
    call$1(e) {
      return A.Web3APPData_Web3APPData$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 120
  };
  A.Web3WalletResponseMessage.prototype = {
    get$type() {
      return B.Web3MessageTypes_List_100_14_walletResponse;
    },
    resultAsList$1$0($T) {
      var list, t1, exception, $length = null;
      try {
        list = J.cast$1$0$ax(type$.List_dynamic._as(this.result), $T);
        if ($length == null)
          return list;
        t1 = J.sublist$2$ax(list, 0, $length);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.Web3RequestException_ce8);
      }
    },
    resultAsMap$0() {
      var t1, exception;
      try {
        t1 = type$.Map_dynamic_dynamic._as(this.result).cast$2$0(0, type$.String, type$.dynamic);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.Web3RequestException_ce8);
      }
    },
    resultAsString$0() {
      var t1, exception;
      try {
        t1 = A._asString(this.result);
        return t1;
      } catch (exception) {
        throw A.wrapException(B.Web3RequestException_ce8);
      }
    }
  };
  A.Web3WalletResponseMessage_Web3WalletResponseMessage$deserialize_closure.prototype = {
    call$1(p0) {
      return A.Web3APPData_Web3APPData$deserialize(type$.CborTagValue_dynamic._as(p0));
    },
    $signature: 120
  };
  A.Web3MessageCore.prototype = {
    cast$1$0(_, $T) {
      A.checkTypeBound($T, type$.Web3MessageCore, "T", "cast");
      if (!$T._is(this))
        throw A.wrapException(B.Web3RequestException_ce8);
      return $T._as(this);
    }
  };
  A._Web3MessageCore_Object_CborSerializable.prototype = {};
  A.Web3MessageTypes.prototype = {
    _enumToString$0() {
      return "Web3MessageTypes." + this._name;
    }
  };
  A.Web3MessageTypes_fromTag_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_bytesEqual(type$.Web3MessageTypes._as(e).tag, this.tags);
    },
    $signature: 303
  };
  A.Web3MessageTypes_fromTag_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_ce8);
    },
    $signature: 0
  };
  A.Web3RequestMethods.prototype = {};
  A.Web3NetworkRequestMethods.prototype = {
    get$tag() {
      var t1 = A.List_List$_of(this.get$network().tag, type$.int);
      t1.push(this.id);
      return t1;
    }
  };
  A.Web3APPData.prototype = {
    getAuth$1$1(networkType, $T) {
      var t1 = type$.Web3ChainAuthenticated_Web3ChainAccount_dynamic;
      A.checkTypeBound($T, t1, "T", "getAuth");
      if (networkType === B.NetworkType_ugS || networkType === B.NetworkType_ZHn) {
        t1 = A.QuickImutableList_firstWhereOrNull(this._chains, new A.Web3APPData_getAuth_closure(), t1);
        return t1 == null ? null : J.cast$1$0$ax(t1, $T);
      }
      t1 = A.QuickImutableList_firstWhereOrNull(this._chains, new A.Web3APPData_getAuth_closure0(networkType), t1);
      return t1 == null ? null : J.cast$1$0$ax(t1, $T);
    }
  };
  A.Web3APPData_getAuth_closure.prototype = {
    call$1(e) {
      var t1 = type$.Web3ChainAuthenticated_Web3ChainAccount_dynamic._as(e).get$networkType();
      return t1 === B.NetworkType_ugS || t1 === B.NetworkType_ZHn;
    },
    $signature: 119
  };
  A.Web3APPData_getAuth_closure0.prototype = {
    call$1(e) {
      return type$.Web3ChainAuthenticated_Web3ChainAccount_dynamic._as(e).get$networkType() === this.networkType;
    },
    $signature: 119
  };
  A.Web3APPData_Web3APPData$deserialize_closure.prototype = {
    call$1(e) {
      return A.Web3ChainAuthenticated_Web3ChainAuthenticated$deserialize(type$.CborTagValue_dynamic._as(e), type$.Web3ChainAccount_dynamic);
    },
    $signature: 305
  };
  A.Web3APPData_Web3APPData$deserialize_closure0.prototype = {
    call$1(e) {
      return A.NetworkType_fromTag(type$.CborBytesValue._as(e).value);
    },
    $signature: 306
  };
  A._Web3APPData_Object_CborSerializable.prototype = {};
  A.Web3ChainAccount.prototype = {
    get$variabels() {
      var _this = this;
      return [_this.keyIndex, _this.get$addressStr(), _this.get$id(), _this._defaultAddress];
    }
  };
  A.Web3ChainIdnetifier.prototype = {
    get$variabels() {
      return [this.id];
    }
  };
  A.Web3ChainDefaultIdnetifier.prototype = {
    get$identifier() {
      return this.identifier;
    }
  };
  A.Web3ChainAuthenticated.prototype = {
    cast$1$0(_, $T) {
      A.checkTypeBound($T, type$.Web3ChainAuthenticated_Web3ChainAccount_dynamic, "T", "cast");
      if (!$T._is(this))
        throw A.wrapException(A.WalletException$invalidArgruments(A._setArrayType([A.createRuntimeType($T).toString$0(0), A.getRuntimeTypeOfDartObject(this).toString$0(0)], type$.JSArray_String)));
      return $T._as(this);
    },
    get$networkType() {
      return this.networkType;
    }
  };
  A._Web3ChainAccount_Object_CborSerializable.prototype = {};
  A._Web3ChainAccount_Object_CborSerializable_Equatable.prototype = {};
  A._Web3ChainAuthenticated_Object_CborSerializable.prototype = {};
  A._Web3ChainIdnetifier_Object_CborSerializable.prototype = {};
  A._Web3ChainIdnetifier_Object_CborSerializable_Equatable.prototype = {};
  A.Web3WalletRequestParams.prototype = {};
  A.Web3GlobalRequestParams.prototype = {
    get$type() {
      return B.Web3MessageTypes_List_100_17_walletGlobalRequest;
    }
  };
  A.Web3RequestParams.prototype = {
    get$type() {
      return B.Web3MessageTypes_List_100_12_walletRequest;
    }
  };
  A.Web3AptosRequestMethods.prototype = {
    get$network() {
      return B.NetworkType_2nn;
    }
  };
  A.Web3AptosRequestMethods_fromId_closure.prototype = {
    call$1(e) {
      return type$.Web3AptosRequestMethods._as(e).id === this.id;
    },
    $signature: 118
  };
  A.Web3AptosRequestMethods_fromId_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_qYU);
    },
    $signature: 0
  };
  A.Web3AptosRequestMethods_fromName_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Web3AptosRequestMethods._as(e);
      t1 = this.name;
      return e.name === t1 || B.JSArray_methods.contains$1(e.methodsName, t1);
    },
    $signature: 118
  };
  A.Web3AptosRequestParam.prototype = {};
  A.Web3AptosSignMessageResponse.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["message", _this.message, "nonce", _this.nonce, "chainId", _this.chainId, "address", _this.address, "application", _this.application, "prefix", _this.prefix, "fullMessage", _this.fullMessage, "signature", _this.signature], type$.String, type$.dynamic);
    }
  };
  A.Web3AptosSignMessage.prototype = {
    get$method() {
      return B.Web3AptosRequestMethods_102_aptos_signMessage_List_empty;
    },
    toCbor$0() {
      var _this = this,
        t1 = B.Web3AptosRequestMethods_102_aptos_signMessage_List_empty.get$tag(),
        t2 = _this.accessAccount.toCbor$0();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, type$.int), new A.CborListValue([t1, t2, _this.message, _this.address, _this.application, _this.chainId, _this.nonce, _this.messageBytes], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3AptosSendTransaction.prototype = {
    toCbor$0() {
      var t4, t5, t6, t7, t8, _this = this,
        t1 = _this.method.get$tag(),
        t2 = _this.accessAccount.toCbor$0(),
        t3 = _this.transaction.toBcs$0();
      A.BytesUtils_validateListOfBytes(t3);
      t4 = type$.int;
      t3 = A.List_List$unmodifiable(t3, t4);
      t5 = _this.feePayer;
      t5 = t5 == null ? null : t5.address;
      t6 = _this.secondarySignerAddresses;
      if (t6 == null)
        t6 = null;
      else {
        t7 = A._arrayInstanceType(t6);
        t8 = t7._eval$1("MappedListIterable<1,CborStringValue>");
        t6 = A.List_List$_of(new A.MappedListIterable(t6, t7._eval$1("CborStringValue(1)")._as(new A.Web3AptosSendTransaction_toCbor_closure()), t8), t8._eval$1("ListIterable.E"));
        t6 = new A.CborListValue(t6, true, type$.CborListValue_CborStringValue);
      }
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, t4), new A.CborListValue([t1, t2, new A.CborBytesValue(t3), t5, t6], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$method() {
      return this.method;
    }
  };
  A.Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize_closure.prototype = {
    call$1(e) {
      return A.AptosAddress_AptosAddress$fromBytes(A.AptosAddressUtils_addressToBytes(type$.CborStringValue._as(e).value));
    },
    $signature: 308
  };
  A.Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize_closure0.prototype = {
    call$1(e) {
      var t1 = A.ExtractCborList_castValue(type$.CborListValue_dynamic._as(e), type$.String),
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,AptosAddress>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("AptosAddress(1)")._as(new A.Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize__closure()), t3), t3._eval$1("ListIterable.E"));
      return t1;
    },
    $signature: 309
  };
  A.Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize__closure.prototype = {
    call$1(e) {
      return A.AptosAddress_AptosAddress$fromBytes(A.AptosAddressUtils_addressToBytes(A._asString(e)));
    },
    $signature: 310
  };
  A.Web3AptosSendTransaction_toCbor_closure.prototype = {
    call$1(e) {
      return new A.CborStringValue(type$.AptosAddress._as(e).address);
    },
    $signature: 311
  };
  A.Web3AptosChainAccount.prototype = {
    toCbor$0() {
      var t3, _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = _this.publicKey;
      A.BytesUtils_validateListOfBytes(t2);
      t3 = type$.int;
      t2 = A.List_List$unmodifiable(t2, t3);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_6, t3), new A.CborListValue([t1, _this.address.address, _this.id, _this._defaultAddress, new A.CborBytesValue(t2), _this.signingScheme, _this.network.id], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.address;
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3AptosChainIdnetifier.prototype = {
    get$aptosChain() {
      var result, _this = this,
        value = _this.__Web3AptosChainIdnetifier_aptosChain_FI;
      if (value === $) {
        result = A.AptosChainType_fromValue(_this.chainId);
        _this.__Web3AptosChainIdnetifier_aptosChain_FI !== $ && A.throwLateFieldADI("aptosChain");
        _this.__Web3AptosChainIdnetifier_aptosChain_FI = result;
        value = result;
      }
      return value;
    },
    get$identifier() {
      return this.identifier;
    }
  };
  A.Web3AptosChainAuthenticated.prototype = {
    get$networkType() {
      return B.NetworkType_2nn;
    }
  };
  A.Web3AptosChainAuthenticated_Web3AptosChainAuthenticated$deserialize_closure.prototype = {
    call$1(e) {
      return A.Web3AptosChainAccount_Web3AptosChainAccount$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 312
  };
  A.Web3AptosChainAuthenticated_Web3AptosChainAuthenticated$deserialize_closure0.prototype = {
    call$1(e) {
      return A.Web3AptosChainIdnetifier_Web3AptosChainIdnetifier$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 313
  };
  A.Web3BitcoinRequestMethods.prototype = {
    get$network() {
      return B.NetworkType_ugS;
    }
  };
  A.Web3BitcoinRequestMethods_fromId_closure.prototype = {
    call$1(e) {
      return type$.Web3BitcoinRequestMethods._as(e).id === this.id;
    },
    $signature: 117
  };
  A.Web3BitcoinRequestMethods_fromId_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_qYU);
    },
    $signature: 0
  };
  A.Web3BitcoinRequestMethods_fromName_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Web3BitcoinRequestMethods._as(e);
      t1 = this.name;
      return e.name === t1 || B.JSArray_methods.contains$1(e.methodsName, t1);
    },
    $signature: 117
  };
  A.Web3BitcoinRequestParam.prototype = {};
  A.Web3BitcoinSendTransactionOutput.prototype = {
    toCbor$0() {
      var t1 = type$.int,
        t2 = A.ListHelper_clone(this.scriptPubKey._scriptBytes, t1);
      A.BytesUtils_validateListOfBytes(t2);
      t2 = A.List_List$unmodifiable(t2, t1);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_9_0, t1), new A.CborListValue([this.value, new A.CborBytesValue(t2), this.address], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3BitcoinSendTransaction.prototype = {
    get$method() {
      return B.Web3BitcoinRequestMethods_C8u;
    },
    toCbor$0() {
      var t5, t6,
        t1 = B.Web3BitcoinRequestMethods_C8u.get$tag(),
        t2 = this.accounts,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("CborTagValue<@>(1)")._as(new A.Web3BitcoinSendTransaction_toCbor_closure()), t4), t4._eval$1("ListIterable.E"));
      t3 = type$.CborListValue_CborTagValue_dynamic;
      t4 = this.outputs;
      t5 = A._arrayInstanceType(t4);
      t6 = t5._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t4 = A.List_List$_of(new A.MappedListIterable(t4, t5._eval$1("CborTagValue<@>(1)")._as(new A.Web3BitcoinSendTransaction_toCbor_closure0()), t6), t6._eval$1("ListIterable.E"));
      t5 = this.requiredAccount;
      t5 = t5 == null ? null : t5.toCbor$0();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, type$.int), new A.CborListValue([t1, new A.CborListValue(t2, true, t3), new A.CborListValue(t4, true, t3), t5], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3BitcoinSendTransaction_Web3BitcoinSendTransaction_closure.prototype = {
    call$1(e) {
      return type$.Web3BitcoinChainAccount._as(e).network;
    },
    $signature: 47
  };
  A.Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize_closure.prototype = {
    call$1(e) {
      return A.Web3BitcoinChainAccount_Web3BitcoinChainAccount$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 46
  };
  A.Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize_closure0.prototype = {
    call$1(e) {
      var t1, t2,
        values = A.CborSerializable_cborTagValue(null, null, type$.CborTagValue_dynamic._as(e), B.List_161_2_9_0, type$.CborListValue_dynamic),
        cashtokenBytes = A.ExtractCborList_elementAs(values, 3, type$.nullable_List_int);
      if (cashtokenBytes != null)
        if (A.CashToken_deserialize(cashtokenBytes).item1 == null)
          A.throwExpression(A.Web3RequestExceptionConst_message("Parsing script cashtoken failed. Please ensure it is a valid Bitcoin script serialized as hex.", A.BytesUtils_toHexString(cashtokenBytes, true, null)));
      t1 = A.ExtractCborList_elementAs(values, 0, type$.BigInt);
      t2 = A.Script_Script$deserialize(A.ExtractCborList_elementAs(values, 1, type$.List_int));
      return A.Web3BitcoinSendTransactionOutput_Web3BitcoinSendTransactionOutput(A.ExtractCborList_elementAs(values, 2, type$.nullable_String), t2, t1);
    },
    $signature: 317
  };
  A.Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize_closure1.prototype = {
    call$1(e) {
      return A.Web3BitcoinChainAccount_Web3BitcoinChainAccount$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 46
  };
  A.Web3BitcoinSendTransaction_toCbor_closure.prototype = {
    call$1(e) {
      return type$.Web3BitcoinChainAccount._as(e).toCbor$0();
    },
    $signature: 107
  };
  A.Web3BitcoinSendTransaction_toCbor_closure0.prototype = {
    call$1(e) {
      return type$.Web3BitcoinSendTransactionOutput._as(e).toCbor$0();
    },
    $signature: 319
  };
  A._Web3BitcoinSendTransactionOutput_Object_CborSerializable.prototype = {};
  A.Web3BitcoinSignMessageResponse.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["signature", this.signature, "digest", this.digest], type$.String, type$.dynamic);
    }
  };
  A.Web3BitcoinSignMessage.prototype = {
    get$method() {
      return B.Web3BitcoinRequestMethods_9zY;
    },
    toCbor$0() {
      var _this = this,
        t1 = B.Web3BitcoinRequestMethods_9zY.get$tag(),
        t2 = _this.accessAccount.toCbor$0();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, type$.int), new A.CborListValue([t1, t2, _this.message, _this.content, _this.messagePrefix], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3BitcoinSignTransaction.prototype = {
    get$method() {
      return B.Web3BitcoinRequestMethods_2wh;
    },
    toCbor$0() {
      var t1 = B.Web3BitcoinRequestMethods_2wh.get$tag(),
        t2 = this.accounts,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("CborTagValue<@>(1)")._as(new A.Web3BitcoinSignTransaction_toCbor_closure()), t4), t4._eval$1("ListIterable.E"));
      t3 = this.psbt.serialize$0();
      A.BytesUtils_validateListOfBytes(t3);
      t4 = type$.int;
      t3 = A._setArrayType([t1, new A.CborListValue(t2, true, type$.CborListValue_CborTagValue_dynamic), new A.CborBytesValue(A.List_List$unmodifiable(t3, t4))], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, t4), new A.CborListValue(t3, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3BitcoinSignTransaction_Web3BitcoinSignTransaction_closure.prototype = {
    call$1(e) {
      return type$.Web3BitcoinChainAccount._as(e).network;
    },
    $signature: 47
  };
  A.Web3BitcoinSignTransaction_Web3BitcoinSignTransaction$deserialize_closure.prototype = {
    call$1(e) {
      return A.Web3BitcoinChainAccount_Web3BitcoinChainAccount$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 46
  };
  A.Web3BitcoinSignTransaction_toCbor_closure.prototype = {
    call$1(e) {
      return type$.Web3BitcoinChainAccount._as(e).toCbor$0();
    },
    $signature: 107
  };
  A.Web3BitcoinChainAccount.prototype = {
    toCbor$0() {
      var t5, _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = _this.address.get$addressProgram(),
        t3 = _this.network.get$value(),
        t4 = _this.publicKey;
      A.BytesUtils_validateListOfBytes(t4);
      t5 = type$.int;
      t4 = A.List_List$unmodifiable(t4, t5);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_9, t5), new A.CborListValue([t1, t2, _this.id, _this._defaultAddress, _this.type.value, t3, new A.CborBytesValue(t4), _this.witnessScript, _this.redeemScript], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.toAddress$1(this.network);
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3BitcoinChainAuthenticated.prototype = {
    get$networkType() {
      return B.NetworkType_ugS;
    }
  };
  A.Web3BitcoinChainAuthenticated_Web3BitcoinChainAuthenticated$deserialize_closure.prototype = {
    call$1(e) {
      return A.Web3BitcoinChainAccount_Web3BitcoinChainAccount$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 46
  };
  A.Web3BitcoinChainAuthenticated_Web3BitcoinChainAuthenticated$deserialize_closure0.prototype = {
    call$1(e) {
      return A.Web3ChainDefaultIdnetifier_Web3ChainDefaultIdnetifier$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 35
  };
  A.Web3CosmosRequestMethods.prototype = {
    get$network() {
      return B.NetworkType_iOs;
    }
  };
  A.Web3CosmosRequestMethods_fromId_closure.prototype = {
    call$1(e) {
      return type$.Web3CosmosRequestMethods._as(e).id === this.id;
    },
    $signature: 106
  };
  A.Web3CosmosRequestMethods_fromId_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_qYU);
    },
    $signature: 0
  };
  A.Web3CosmosRequestMethods_fromName_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Web3CosmosRequestMethods._as(e);
      t1 = this.name;
      return e.name === t1 || B.JSArray_methods.contains$1(e.methodsName, t1);
    },
    $signature: 106
  };
  A.Web3CosmosRequestParam.prototype = {};
  A.Web3CosmosAddNewChain.prototype = {
    get$method() {
      return B.Web3CosmosRequestMethods_103_cosmos_addNewChain_List_empty;
    },
    toCbor$0() {
      var t3, t4, t5, _this = this,
        t1 = B.Web3CosmosRequestMethods_103_cosmos_addNewChain_List_empty.get$tag(),
        t2 = _this.nativeToken;
      t2 = t2 == null ? null : t2.toCbor$0();
      t3 = _this.feeTokens;
      if (t3 == null)
        t3 = null;
      else {
        t4 = A._arrayInstanceType(t3);
        t5 = t4._eval$1("MappedListIterable<1,CborTagValue<@>>");
        t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("CborTagValue<@>(1)")._as(new A.Web3CosmosAddNewChain_toCbor_closure()), t5), t5._eval$1("ListIterable.E"));
      }
      if (t3 == null)
        t3 = [];
      t4 = type$.CborListValue_dynamic;
      t5 = _this.keyAlgorithm;
      if (t5 == null)
        t5 = [];
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, type$.int), new A.CborListValue([t1, _this.chainId, _this.rpc, _this.name, t2, new A.CborListValue(t3, true, t4), new A.CborListValue(t5, true, t4), _this.hrp], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson_closure.prototype = {
    call$1(v) {
      var t1, t2, t3, t4, t5, t6;
      type$.Map_String_dynamic._as(v);
      t1 = this.method;
      t2 = type$.String;
      t3 = A.Web3ValidatorUtils_parseString(v, "name", t1, t2);
      t4 = A.Web3ValidatorUtils_parseString(v, "symbol", t1, t2);
      t4 = A.Token_Token(null, A.Web3ValidatorUtils_parseInt(v, "decimals", t1, true, type$.int), A.Web3ValidatorUtils_praseObject(v, "coingeckoId", t1, new A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson__closure0(), type$.nullable_CoingeckoCoin, t2), t3, t4);
      t2 = A.Web3ValidatorUtils_parseString(v, "denom", t1, t2);
      t3 = type$.nullable_BigRational;
      t5 = A.Web3ValidatorUtils_parseDouble(v, "average", t1, t3);
      if (t5 == null)
        t5 = $.$get$CosmosConst_avarageGasPrice();
      t6 = A.Web3ValidatorUtils_parseDouble(v, "low", t1, t3);
      return A.CosmosFeeToken_CosmosFeeToken(t5, t2, A.Web3ValidatorUtils_parseDouble(v, "high", t1, t3), t6, t4);
    },
    $signature: 103
  };
  A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson__closure0.prototype = {
    call$1(v) {
      return new A.CoingeckoCoin(A._asString(v), null, null);
    },
    $signature: 102
  };
  A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson_closure0.prototype = {
    call$1(v) {
      var t1, t2, t3, t4, t5, t6;
      type$.Map_String_dynamic._as(v);
      t1 = this.method;
      t2 = type$.String;
      t3 = A.Web3ValidatorUtils_praseObject(v, "coingeckoId", t1, new A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson__closure(), type$.nullable_CoingeckoCoin, t2);
      t4 = A.Web3ValidatorUtils_parseString(v, "name", t1, t2);
      t5 = A.Web3ValidatorUtils_parseString(v, "symbol", t1, t2);
      t5 = A.Token_Token(null, A.Web3ValidatorUtils_parseInt(v, "decimals", t1, true, type$.int), t3, t4, t5);
      t2 = A.Web3ValidatorUtils_parseString(v, "denom", t1, t2);
      t4 = type$.nullable_BigRational;
      t3 = A.Web3ValidatorUtils_parseDouble(v, "average", t1, t4);
      if (t3 == null)
        t3 = $.$get$CosmosConst_avarageGasPrice();
      t6 = A.Web3ValidatorUtils_parseDouble(v, "low", t1, t4);
      return A.CosmosFeeToken_CosmosFeeToken(t3, t2, A.Web3ValidatorUtils_parseDouble(v, "high", t1, t4), t6, t5);
    },
    $signature: 103
  };
  A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson__closure.prototype = {
    call$1(v) {
      return new A.CoingeckoCoin(A._asString(v), null, null);
    },
    $signature: 102
  };
  A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize_closure.prototype = {
    call$1(e) {
      return A.CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 101
  };
  A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize_closure0.prototype = {
    call$1(e) {
      return A.CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 101
  };
  A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize_closure1.prototype = {
    call$1(e) {
      return type$.CborStringValue._as(e).value;
    },
    $signature: 61
  };
  A.Web3CosmosAddNewChain_toCbor_closure.prototype = {
    call$1(e) {
      return type$.CosmosFeeToken._as(e).toCbor$0();
    },
    $signature: 325
  };
  A.Web3CosmosSignMessageResponse.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["messageBytes", this.messageBytes, "signature", this.signature], type$.String, type$.dynamic);
    }
  };
  A.Web3CosmosSignMessage.prototype = {
    get$method() {
      return B.Web3CosmosRequestMethods_101_cosmos_signMessage_List_empty;
    },
    toCbor$0() {
      var t1 = B.Web3CosmosRequestMethods_101_cosmos_signMessage_List_empty.get$tag(),
        t2 = this.accessAccount.toCbor$0();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, type$.int), new A.CborListValue([t1, t2, this.challeng, this.content], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3CosmosSignTransactionResponse.prototype = {
    cast$1$0(_, $T) {
      A.checkTypeBound($T, type$.Web3CosmosSignTransactionResponse, "T", "cast");
      if (!$T._is(this))
        throw A.wrapException(B.Web3RequestException_ce8);
      return $T._as(this);
    }
  };
  A.Web3CosmosSignTransactionDirectSignResponse.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["method", _this.method.name, "bodyBytes", _this.bodyBytes, "authInfoBytes", _this.authInfoBytes, "chainId", _this.chainId, "accountNumber", _this.accountNumber.toString$0(0), "signature", _this.signature, "pubKey", _this.publicKey.toJson$0()], type$.String, type$.dynamic);
    }
  };
  A.Web3CosmosSignTransactionAminoSignResponse.prototype = {
    toJson$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["method", _this.method.name, "tx", _this.tx.toJson$0(), "signature", _this.signature, "pubKey", _this.publicKey.toJson$0()], type$.String, type$.dynamic);
    }
  };
  A.Web3CosmosSignTransactionParams.prototype = {};
  A.Web3CosmosSignTransactionDirectParams.prototype = {
    toCbor$0() {
      var t2, t3,
        t1 = this.bodyBytes;
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A.List_List$unmodifiable(t1, t2);
      t3 = this.authInfos;
      if (t3 == null)
        t3 = B.C_CborNullValue;
      else {
        A.BytesUtils_validateListOfBytes(t3);
        t3 = new A.CborBytesValue(A.List_List$unmodifiable(t3, t2));
      }
      t3 = A._setArrayType([new A.CborBytesValue(t1), t3], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(A._setArrayType([this.method.id], type$.JSArray_int), t2), new A.CborListValue(t3, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    }
  };
  A.Web3CosmosSignTransactionAminoParams.prototype = {
    toCbor$0() {
      var t2,
        t1 = A.StringUtils_encode(A.StringUtils_fromJson(this.tx.toJson$0(), null, null, false), B.StringEncoding_1);
      A.BytesUtils_validateListOfBytes(t1);
      t2 = type$.int;
      t1 = A._setArrayType([new A.CborBytesValue(A.List_List$unmodifiable(t1, t2))], type$.JSArray_CborBytesValue);
      return new A.CborTagValue(A.List_List$unmodifiable(A._setArrayType([this.method.id], type$.JSArray_int), t2), new A.CborListValue(t1, true, type$.CborListValue_CborBytesValue), type$.CborTagValue_dynamic);
    }
  };
  A.Web3CosmosSignTransaction.prototype = {
    get$method() {
      return this.transaction.method;
    },
    toCbor$0() {
      var _this = this,
        t1 = _this.transaction,
        t2 = t1.method.get$tag(),
        t3 = _this.accessAccount.toCbor$0();
      t1 = t1.toCbor$0();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, type$.int), new A.CborListValue([t2, t3, _this.chainId, t1, _this.disableBalanceCheck, _this.preferNoSetFee, _this.preferNoSetMemo], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A._Web3CosmosSignTransactionParams_Object_CborSerializable.prototype = {};
  A.Web3CosmosChainAccount.prototype = {
    toCbor$0() {
      var t3, _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = _this.publicKey;
      A.BytesUtils_validateListOfBytes(t2);
      t3 = type$.int;
      t2 = A._setArrayType([t1, _this.address.address, _this.id, _this._defaultAddress, new A.CborBytesValue(A.List_List$unmodifiable(t2, t3)), _this.algo._name], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_8, t3), new A.CborListValue(t2, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.address;
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3CosmoshainIdnetifier.prototype = {
    get$identifier() {
      return "cosmos:" + this.chainId;
    }
  };
  A.Web3CosmosChainAuthenticated.prototype = {};
  A.Web3CosmosChainAuthenticated_Web3CosmosChainAuthenticated$deserialize_closure.prototype = {
    call$1(e) {
      return A.Web3CosmosChainAccount_Web3CosmosChainAccount$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 326
  };
  A.Web3CosmosChainAuthenticated_Web3CosmosChainAuthenticated$deserialize_closure0.prototype = {
    call$1(e) {
      return A.Web3CosmoshainIdnetifier_Web3CosmoshainIdnetifier$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 327
  };
  A.Web3EthereumRequestMethods.prototype = {
    get$network() {
      return B.NetworkType_TUr;
    },
    toString$0(_) {
      return this.name;
    }
  };
  A.Web3EthereumRequestMethods_fromId_closure.prototype = {
    call$1(e) {
      return type$.Web3EthereumRequestMethods._as(e).id === this.id;
    },
    $signature: 100
  };
  A.Web3EthereumRequestMethods_fromId_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_qYU);
    },
    $signature: 0
  };
  A.Web3EthereumRequestMethods_fromName_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Web3EthereumRequestMethods._as(e);
      t1 = this.name;
      return e.name === t1 || B.JSArray_methods.contains$1(e.methodsName, t1);
    },
    $signature: 100
  };
  A.Web3EthereumRequestParam.prototype = {};
  A.Web3EthereumAddNewChain.prototype = {
    get$method() {
      return B.Web3EthereumRequestMethods_grW;
    },
    toCbor$0() {
      var _this = this,
        t1 = B.Web3EthereumRequestMethods_grW.get$tag(),
        t2 = type$.CborListValue_String,
        t3 = _this.blockExplorerUrls,
        t4 = t3 == null ? B.C_CborNullValue : new A.CborListValue(t3, true, t2);
      if (_this.iconUrls == null)
        t3 = B.C_CborNullValue;
      else {
        t3.toString;
        t3 = new A.CborListValue(t3, true, t2);
      }
      t3 = A._setArrayType([t1, _this.newChainId, _this.chainName, _this.name, _this.symbol, new A.CborListValue(_this.rpcUrls, true, t2), t4, t3, _this.decimals], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, type$.int), new A.CborListValue(t3, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3EthreumPersonalSign.prototype = {
    get$method() {
      return B.Web3EthereumRequestMethods_1_personal_sign_List_eth_sign;
    },
    toCbor$0() {
      var t4,
        t1 = B.Web3EthereumRequestMethods_1_personal_sign_List_eth_sign.get$tag(),
        t2 = this.accessAccount.toCbor$0(),
        t3 = A.BytesUtils_fromHexString(this.message, false);
      A.BytesUtils_validateListOfBytes(t3);
      t4 = type$.int;
      t3 = A.List_List$unmodifiable(t3, t4);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, t4), new A.CborListValue([t1, t2, new A.CborBytesValue(t3), this.content], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3EthreumTransactionAccessList.prototype = {};
  A.Web3EthreumTransactionAccessList_closure.prototype = {
    call$1(e) {
      type$.List_int._as(e);
      A.BytesUtils_validateListOfBytes(e);
      return A.List_List$unmodifiable(e, type$.int);
    },
    $signature: 19
  };
  A.Web3EthreumSendTransaction.prototype = {
    get$method() {
      return B.Web3EthereumRequestMethods_0_eth_sendTransaction_List_empty;
    },
    toCbor$0() {
      var t4, t5, t6, _this = this,
        t1 = B.Web3EthereumRequestMethods_0_eth_sendTransaction_List_empty.get$tag(),
        t2 = _this.accessAccount.toCbor$0(),
        t3 = _this.to;
      t3 = t3 == null ? null : t3.address;
      t4 = _this.data;
      A.BytesUtils_validateListOfBytes(t4);
      t5 = type$.int;
      t4 = A.List_List$unmodifiable(t4, t5);
      t6 = _this.transactionType;
      t6 = t6 == null ? null : t6.prefix;
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, t5), new A.CborListValue([t1, t2, t3, _this.gas, _this.gasPrice, _this.maxFeePerGas, _this.maxPriorityFeePerGas, _this.value, new A.CborBytesValue(t4), _this.chainId, t6], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3EthreumSendTransaction_Web3EthreumSendTransaction_closure.prototype = {
    call$1(e) {
      return type$.ETHTransactionType._as(e).prefix === this.transactionType;
    },
    $signature: 165
  };
  A._Web3EthreumTransactionAccessList_Object_CborSerializable.prototype = {};
  A.Web3EthreumTypdedData.prototype = {
    get$method() {
      return B.Web3EthereumRequestMethods_uLq;
    },
    toCbor$0() {
      var t1 = B.Web3EthereumRequestMethods_uLq.get$tag(),
        t2 = this.accessAccount.toCbor$0(),
        t3 = A.StringUtils_fromJson(this.typedData.toJson$0(), null, null, false),
        t4 = this.domain;
      t4 = t4 == null ? null : t4.chainId;
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, type$.int), new A.CborListValue([t1, t2, new A.CborStringValue(t3), t4], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3EthereumChainAccount.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = _this.publicKey;
      if (t2 == null)
        t2 = null;
      else {
        A.BytesUtils_validateListOfBytes(t2);
        t2 = new A.CborBytesValue(A.List_List$unmodifiable(t2, type$.int));
      }
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_1_1, type$.int), new A.CborListValue([t1, _this.address.address, _this.id, _this._defaultAddress, t2], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.address;
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3EthereumChainIdnetifier.prototype = {
    get$identifier() {
      return "ethereum:" + this.chainId.toString$0(0);
    }
  };
  A.Web3EthereumChainAuthenticated.prototype = {};
  A.Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize_closure.prototype = {
    call$1(e) {
      return A.Web3EthereumChainAccount_Web3EthereumChainAccount$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 329
  };
  A.Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize_closure0.prototype = {
    call$1(p0) {
      return A.EthereumAPIProvider_EthereumAPIProvider$fromCborBytesOrObject(type$.CborTagValue_dynamic._as(p0));
    },
    $signature: 330
  };
  A.Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize_closure1.prototype = {
    call$1(e) {
      return A.Web3EthereumChainIdnetifier_Web3EthereumChainIdnetifier$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 331
  };
  A.Web3GlobalRequestMethods.prototype = {};
  A.Web3GlobalRequestMethods_fromId_closure.prototype = {
    call$1(e) {
      return type$.Web3GlobalRequestMethods._as(e).id === this.id;
    },
    $signature: 98
  };
  A.Web3GlobalRequestMethods_fromId_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_qYU);
    },
    $signature: 0
  };
  A.Web3GlobalRequestMethods_fromName_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Web3GlobalRequestMethods._as(e);
      t1 = this.name;
      return e.name === t1 || B.JSArray_methods.contains$1(e.methodsName, t1);
    },
    $signature: 98
  };
  A.Web3ConnectApplication.prototype = {
    get$method() {
      return B.Web3GlobalRequestMethods_1_connect_List_empty;
    },
    toCbor$0() {
      var t1 = this.chain;
      t1 = t1 == null ? null : t1.name;
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_17, type$.int), new A.CborListValue([1, t1], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3ConnectApplication_Web3ConnectApplication$deserialize_closure.prototype = {
    call$1(e) {
      return A.NetworkType_fromName(type$.CborStringValue._as(e).value);
    },
    $signature: 333
  };
  A.Web3DisconnectApplication.prototype = {
    get$method() {
      return B.Web3GlobalRequestMethods_0_disconnect_List_empty;
    },
    toCbor$0() {
      var t1 = A._setArrayType([0, this.chain.name], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_17, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3SwitchApplicationNetwork.prototype = {
    get$method() {
      return B.Web3GlobalRequestMethods_2_switch_network_List_empty;
    },
    toCbor$0() {
      var t1 = A._setArrayType([2, this.chain.name, this.id], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_17, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3SolanaRequestMethods.prototype = {
    get$network() {
      return B.NetworkType_406;
    }
  };
  A.Web3SolanaRequestMethods_fromId_closure.prototype = {
    call$1(e) {
      return type$.Web3SolanaRequestMethods._as(e).id === this.id;
    },
    $signature: 97
  };
  A.Web3SolanaRequestMethods_fromId_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_qYU);
    },
    $signature: 0
  };
  A.Web3SolanaRequestMethods_fromName_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Web3SolanaRequestMethods._as(e);
      t1 = this.name;
      return e.name === t1 || B.JSArray_methods.contains$1(e.methodsName, t1);
    },
    $signature: 97
  };
  A.Web3SolanaRequestParam.prototype = {};
  A.Web3SolanaSignInParams.prototype = {
    toCbor$0() {
      var t1 = A._setArrayType([this.account.toCbor$0(), new A.CborStringValue(A.StringUtils_fromJson(this.message.toJson$0(), null, null, false))], type$.JSArray_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_2_0, type$.int), new A.CborListValue(t1, true, type$.CborListValue_CborObject), type$.CborTagValue_dynamic);
    }
  };
  A.Web3SolanaSignMessageResponse.prototype = {
    toJson$0() {
      var t1 = this.address.address;
      return A.LinkedHashMap_LinkedHashMap$_literal(["signer", t1, "signerAddressBytes", A.List_List$from(new A.SolAddrDecoder().decodeAddr$1(t1), true, type$.int), "signature", this.signature, "signedMessage", this.signedMessage], type$.String, type$.dynamic);
    }
  };
  A.Web3SolanaSignParams.prototype = {};
  A.Web3SolanaSignMessageParams.prototype = {
    toCbor$0() {
      var t1 = this.account.toCbor$0();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_2_1, type$.int), new A.CborListValue([t1, this.data, this.content], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3SolanaSignMessage.prototype = {
    toCbor$0() {
      var t1 = this.method.get$tag(),
        t2 = this.messages,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("CborTagValue<@>(1)")._as(new A.Web3SolanaSignMessage_toCbor_closure()), t4), t4._eval$1("ListIterable.E"));
      t1 = A._setArrayType([t1, new A.CborListValue(t2, true, type$.CborListValue_CborTagValue_dynamic)], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$method() {
      return this.method;
    }
  };
  A.Web3SolanaSignMessage_Web3SolanaSignMessage$deserialize_closure.prototype = {
    call$1(e) {
      var t2,
        t1 = type$.CborTagValue_dynamic,
        values = A.CborSerializable_cborTagValue(null, null, t1._as(e), B.List_161_2_2_1, type$.CborListValue_dynamic);
      t1 = A.Web3SolanaChainAccount_Web3SolanaChainAccount$deserialize(A.ExtractCborList_elementAs(values, 0, t1));
      t2 = A.ExtractCborList_elementAs(values, 1, type$.String);
      return new A.Web3SolanaSignMessageParams(A.ExtractCborList_elementAs(values, 2, type$.nullable_String), t1, t2);
    },
    $signature: 335
  };
  A.Web3SolanaSignMessage_Web3SolanaSignMessage$deserialize_closure0.prototype = {
    call$1(e) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, _null = null,
        _s9_ = "resources",
        t1 = type$.CborTagValue_dynamic,
        values = A.CborSerializable_cborTagValue(_null, _null, t1._as(e), B.List_161_2_2_0, type$.CborListValue_dynamic);
      t1 = A.Web3SolanaChainAccount_Web3SolanaChainAccount$deserialize(A.ExtractCborList_elementAs(values, 0, t1));
      t2 = A.StringUtils_toJson(A.ExtractCborList_elementAs(values, 1, type$.nullable_Object), _null, type$.Map_String_dynamic);
      t3 = A._asString(t2.$index(0, "domain"));
      t4 = A._asString(t2.$index(0, "address"));
      t5 = A._asStringQ(t2.$index(0, "statement"));
      t6 = A._asStringQ(t2.$index(0, "uri"));
      t7 = A._asStringQ(t2.$index(0, "version"));
      t8 = A._asStringQ(t2.$index(0, "chainId"));
      t9 = A._asStringQ(t2.$index(0, "nonce"));
      t10 = A._asStringQ(t2.$index(0, "issuedAt"));
      t11 = A._asStringQ(t2.$index(0, "expirationTime"));
      t12 = A._asStringQ(t2.$index(0, "notBefore"));
      t13 = A._asStringQ(t2.$index(0, "requestId"));
      return A.Web3SolanaSignInParams$(t1, A.EIP4631_EIP4631(t4, t8, t3, t11, t10, t9, t12, t13, t2.$index(0, _s9_) != null ? A.List_List$from(type$.Iterable_dynamic._as(t2.$index(0, _s9_)), true, type$.String) : _null, t5, t6, t7));
    },
    $signature: 336
  };
  A.Web3SolanaSignMessage_toCbor_closure.prototype = {
    call$1(e) {
      return type$.Web3SolanaSignParams._as(e).toCbor$0();
    },
    $signature: 337
  };
  A._Web3SolanaSignParams_Object_CborSerializable.prototype = {};
  A.Web3SolanaSendTransactionOptions.prototype = {
    toCbor$0() {
      var _this = this;
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_1_3, type$.int), new A.CborListValue([_this.preflightCommitment, _this.maxRetries, _this.skipPreflight, _this.commitment, _this.minContextSlot], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3SolanaSendTransactionData.prototype = {
    toCbor$0() {
      var t3, t4,
        t1 = this.account.toCbor$0(),
        t2 = this.messageBytes;
      A.BytesUtils_validateListOfBytes(t2);
      t3 = type$.int;
      t2 = A.List_List$unmodifiable(t2, t3);
      t4 = this.sendConfig;
      t4 = t4 == null ? null : t4.toCbor$0();
      t4 = A._setArrayType([t1, new A.CborBytesValue(t2), t4], type$.JSArray_nullable_CborObject);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_1_2, t3), new A.CborListValue(t4, true, type$.CborListValue_nullable_CborObject), type$.CborTagValue_dynamic);
    }
  };
  A.Web3SolanaSendTransactionData_Web3SolanaSendTransactionData$deserialize_closure.prototype = {
    call$1(e) {
      var values = A.CborSerializable_cborTagValue(null, null, type$.CborTagValue_dynamic._as(e), B.List_1_3, type$.CborListValue_dynamic),
        t1 = type$.nullable_String,
        t2 = A.ExtractCborList_elementAs(values, 0, t1),
        t3 = type$.nullable_int,
        t4 = A.ExtractCborList_elementAs(values, 1, t3),
        t5 = A.ExtractCborList_elementAs(values, 2, type$.nullable_bool);
      t1 = A.ExtractCborList_elementAs(values, 3, t1);
      return new A.Web3SolanaSendTransactionOptions(t2, A.ExtractCborList_elementAt(values, 4, t3), t5, t1, t4);
    },
    $signature: 338
  };
  A.SolanaSignAndSendAllTransactionMode.prototype = {
    _enumToString$0() {
      return "SolanaSignAndSendAllTransactionMode." + this._name;
    }
  };
  A.SolanaSignAndSendAllTransactionMode_SolanaSignAndSendAllTransactionMode$fromName_closure.prototype = {
    call$1(e) {
      return type$.SolanaSignAndSendAllTransactionMode._as(e)._name === this.name;
    },
    $signature: 339
  };
  A.SolanaSignAndSendAllTransactionMode_SolanaSignAndSendAllTransactionMode$fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.Web3RequestExceptionConst_invalidParameters("Invalid mode option: only 'parallel' or 'serial' are allowed."));
    },
    $signature: 0
  };
  A.Web3SolanaSendTransaction.prototype = {
    toCbor$0() {
      var t1 = this.method.get$tag(),
        t2 = this.messages,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("CborTagValue<@>(1)")._as(new A.Web3SolanaSendTransaction_toCbor_closure()), t4), t4._eval$1("ListIterable.E"));
      t3 = this.mode;
      t3 = t3 == null ? null : t3._name;
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, type$.int), new A.CborListValue([t1, new A.CborListValue(t2, true, type$.CborListValue_CborTagValue_dynamic), t3], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$method() {
      return this.method;
    }
  };
  A.Web3SolanaSendTransaction_Web3SolanaSendTransaction$deserialize_closure.prototype = {
    call$1(e) {
      return A.Web3SolanaSendTransactionData_Web3SolanaSendTransactionData$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 340
  };
  A.Web3SolanaSendTransaction_Web3SolanaSendTransaction$deserialize_closure0.prototype = {
    call$1(e) {
      return A.SolanaSignAndSendAllTransactionMode_SolanaSignAndSendAllTransactionMode$fromName(type$.CborStringValue._as(e).value);
    },
    $signature: 341
  };
  A.Web3SolanaSendTransaction_toCbor_closure.prototype = {
    call$1(e) {
      return type$.Web3SolanaSendTransactionData._as(e).toCbor$0();
    },
    $signature: 342
  };
  A._Web3SolanaSendTransactionData_Object_CborSerializable.prototype = {};
  A._Web3SolanaSendTransactionOptions_Object_CborSerializable.prototype = {};
  A.Web3SolanaChainAccount.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.keyIndex.toCbor$0(), _this.address.address, _this.id, _this._defaultAddress, _this.network.value], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_2, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.address;
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3SolanaChainAuthenticated.prototype = {};
  A.Web3SolanaChainAuthenticated_Web3SolanaChainAuthenticated$deserialize_closure.prototype = {
    call$1(e) {
      return A.Web3SolanaChainAccount_Web3SolanaChainAccount$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 343
  };
  A.Web3SolanaChainAuthenticated_Web3SolanaChainAuthenticated$deserialize_closure0.prototype = {
    call$1(e) {
      return A.Web3ChainDefaultIdnetifier_Web3ChainDefaultIdnetifier$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 35
  };
  A.Web3StellarRequestMethods.prototype = {
    get$network() {
      return B.NetworkType_mux;
    }
  };
  A.Web3StellarRequestMethods_fromId_closure.prototype = {
    call$1(e) {
      return type$.Web3StellarRequestMethods._as(e).id === this.id;
    },
    $signature: 92
  };
  A.Web3StellarRequestMethods_fromId_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_qYU);
    },
    $signature: 0
  };
  A.Web3StellarRequestMethods_fromName_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Web3StellarRequestMethods._as(e);
      t1 = this.name;
      return e.name === t1 || B.JSArray_methods.contains$1(e.methodsName, t1);
    },
    $signature: 92
  };
  A.Web3StellarRequestParam.prototype = {};
  A.Web3StellarSignMessage.prototype = {
    get$method() {
      return B.Web3StellarRequestMethods_102_stellar_signMessage_List_empty;
    },
    toCbor$0() {
      var t4,
        t1 = B.Web3StellarRequestMethods_102_stellar_signMessage_List_empty.get$tag(),
        t2 = this.accessAccount.toCbor$0(),
        t3 = A.BytesUtils_fromHexString(this.challeng, false);
      A.BytesUtils_validateListOfBytes(t3);
      t4 = type$.int;
      t3 = A.List_List$unmodifiable(t3, t4);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, t4), new A.CborListValue([t1, t2, new A.CborBytesValue(t3), this.content], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3StellarSendTransactionResponse.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["envlope", this.envlope, "tx_hash", this.txHash], type$.String, type$.dynamic);
    }
  };
  A.Web3StellarSendTransaction.prototype = {
    toCbor$0() {
      var t4,
        t1 = this.method.get$tag(),
        t2 = this.accessAccount.toCbor$0(),
        t3 = this.transaction;
      A.BytesUtils_validateListOfBytes(t3);
      t4 = type$.int;
      t3 = A._setArrayType([t1, t2, new A.CborBytesValue(A.List_List$unmodifiable(t3, t4))], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, t4), new A.CborListValue(t3, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$method() {
      return this.method;
    }
  };
  A.Web3StellarChainAccount.prototype = {
    toCbor$0() {
      var t4, _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = J.toString$0$(_this.address),
        t3 = _this.publicKey;
      A.BytesUtils_validateListOfBytes(t3);
      t4 = type$.int;
      t3 = A._setArrayType([t1, t2, _this.id, _this._defaultAddress, new A.CborBytesValue(A.List_List$unmodifiable(t3, t4)), _this.network.value], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_4, t4), new A.CborListValue(t3, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return J.toString$0$(this.address);
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3StellarChainAuthenticated.prototype = {};
  A.Web3StellarChainAuthenticated_Web3StellarChainAuthenticated$deserialize_closure.prototype = {
    call$1(e) {
      return A.Web3StellarChainAccount_Web3StellarChainAccount$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 345
  };
  A.Web3StellarChainAuthenticated_Web3StellarChainAuthenticated$deserialize_closure0.prototype = {
    call$1(e) {
      return A.Web3ChainDefaultIdnetifier_Web3ChainDefaultIdnetifier$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 35
  };
  A.Web3SubstrateRequestMethods.prototype = {
    get$network() {
      return B.NetworkType_SDW;
    }
  };
  A.Web3SubstrateRequestMethods_fromId_closure.prototype = {
    call$1(e) {
      return type$.Web3SubstrateRequestMethods._as(e).id === this.id;
    },
    $signature: 91
  };
  A.Web3SubstrateRequestMethods_fromId_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_qYU);
    },
    $signature: 0
  };
  A.Web3SubstrateRequestMethods_fromName_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Web3SubstrateRequestMethods._as(e);
      t1 = this.name;
      return e.name === t1 || B.JSArray_methods.contains$1(e.methodsName, t1);
    },
    $signature: 91
  };
  A.Web3SubstrateRequestParam.prototype = {};
  A.Web3SubstrateAddNewChain.prototype = {
    get$method() {
      return B.Web3SubstrateRequestMethods_zJd;
    },
    toCbor$0() {
      var _this = this,
        t1 = B.Web3SubstrateRequestMethods_zJd.get$tag();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, type$.int), new A.CborListValue([t1, _this.chain, _this.chainType, _this.genesisHash, _this.specVersion, _this.ss58Format, _this.tokenDecimals, _this.tokenSymbol], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3SubstrateSignMessage.prototype = {
    get$method() {
      return B.Web3SubstrateRequestMethods_TSV;
    },
    toCbor$0() {
      var t4,
        t1 = B.Web3SubstrateRequestMethods_TSV.get$tag(),
        t2 = this.accessAccount.toCbor$0(),
        t3 = A.BytesUtils_fromHexString(this.challeng, false);
      A.BytesUtils_validateListOfBytes(t3);
      t4 = type$.int;
      t3 = A.List_List$unmodifiable(t3, t4);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, t4), new A.CborListValue([t1, t2, new A.CborBytesValue(t3), this.content], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3SubstrateSendTransaction.prototype = {
    get$method() {
      return B.Web3SubstrateRequestMethods_aSQ;
    },
    toCbor$0() {
      var t4, t5, t6, t7, t8, t9, t10, _this = this,
        t1 = B.Web3SubstrateRequestMethods_aSQ.get$tag(),
        t2 = _this.accessAccount.toCbor$0(),
        t3 = _this.assetId;
      if (t3 == null)
        t3 = null;
      else {
        A.BytesUtils_validateListOfBytes(t3);
        t3 = new A.CborBytesValue(A.List_List$unmodifiable(t3, type$.int));
      }
      t4 = _this.blockHash;
      A.BytesUtils_validateListOfBytes(t4);
      t5 = type$.int;
      t4 = A.List_List$unmodifiable(t4, t5);
      t6 = _this.era;
      A.BytesUtils_validateListOfBytes(t6);
      t6 = A.List_List$unmodifiable(t6, t5);
      t7 = _this.genesisHash;
      A.BytesUtils_validateListOfBytes(t7);
      t7 = A.List_List$unmodifiable(t7, t5);
      t8 = _this.metadataHash;
      if (t8 == null)
        t8 = null;
      else {
        A.BytesUtils_validateListOfBytes(t8);
        t8 = new A.CborBytesValue(A.List_List$unmodifiable(t8, t5));
      }
      t9 = _this.$call;
      A.BytesUtils_validateListOfBytes(t9);
      t9 = A.List_List$unmodifiable(t9, t5);
      t10 = J.map$1$1$ax(_this.signedExtensions, new A.Web3SubstrateSendTransaction_toCbor_closure(), type$.CborStringValue);
      t10 = A.List_List$_of(t10, t10.$ti._eval$1("ListIterable.E"));
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, t5), new A.CborListValue([t1, t2, t3, new A.CborBytesValue(t4), _this.blockNumber, new A.CborBytesValue(t6), new A.CborBytesValue(t7), t8, new A.CborBytesValue(t9), _this.mode, _this.nonce, _this.specVersion, _this.tip, _this.transactionVersion, new A.CborListValue(t10, true, type$.CborListValue_CborStringValue), _this.version, _this.withSignedTransaction], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    call$0() {
      return this.$call.call$0();
    },
    call$1(arg0) {
      return this.$call.call$1(arg0);
    },
    call$2(arg0, arg1) {
      return this.$call.call$2(arg0, arg1);
    },
    call$1$1(arg0, $T1) {
      return this.$call.call$1$1(arg0, $T1);
    },
    call$2$client$params(arg0, arg1) {
      return this.$call.call$2$client$params(arg0, arg1);
    },
    call$1$0($T1) {
      return this.$call.call$1$0($T1);
    },
    call$3$message$params$response(arg0, arg1, arg2) {
      return this.$call.call$3$message$params$response(arg0, arg1, arg2);
    },
    call$3$error$message$params(arg0, arg1, arg2) {
      return this.$call.call$3$error$message$params(arg0, arg1, arg2);
    },
    call$3(arg0, arg1, arg2) {
      return this.$call.call$3(arg0, arg1, arg2);
    },
    call$4(arg0, arg1, arg2, arg3) {
      return this.$call.call$4(arg0, arg1, arg2, arg3);
    },
    call$1$growable(arg0) {
      return this.$call.call$1$growable(arg0);
    },
    call$1$requestId(arg0) {
      return this.$call.call$1$requestId(arg0);
    },
    call$6$accountsChanged$currentState$networkAccountsChanged$networkChanged$networksChanged$previousState(arg0, arg1, arg2, arg3, arg4, arg5) {
      return this.$call.call$6$accountsChanged$currentState$networkAccountsChanged$networkChanged$networksChanged$previousState(arg0, arg1, arg2, arg3, arg4, arg5);
    },
    call$2$orElse(arg0, arg1) {
      return this.$call.call$2$orElse(arg0, arg1);
    },
    call$2$1(arg0, $T1, $T2) {
      return this.$call.call$2$1(arg0, $T1, $T2);
    },
    call$2$0($T1, $T2) {
      return this.$call.call$2$0($T1, $T2);
    },
    call$1$property(arg0) {
      return this.$call.call$1$property(arg0);
    },
    call$3$offset(arg0, arg1, arg2) {
      return this.$call.call$3$offset(arg0, arg1, arg2);
    },
    call$3$offset$source(arg0, arg1, arg2) {
      return this.$call.call$3$offset$source(arg0, arg1, arg2);
    },
    call$2$offset(arg0, arg1) {
      return this.$call.call$2$offset(arg0, arg1);
    },
    call$1$2(arg0, arg1, $T1) {
      return this.$call.call$1$2(arg0, arg1, $T1);
    },
    call$1$2$onError(arg0, arg1, $T1) {
      return this.$call.call$1$2$onError(arg0, arg1, $T1);
    },
    call$2$client$request(arg0, arg1) {
      return this.$call.call$2$client$request(arg0, arg1);
    },
    call$2$chain$publicKey(arg0, arg1) {
      return this.$call.call$2$chain$publicKey(arg0, arg1);
    },
    call$1$2$timeout(arg0, arg1, $T1) {
      return this.$call.call$1$2$timeout(arg0, arg1, $T1);
    },
    call$7$authenticated$headers$isolate$responseType$timeout$type$url(arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
      return this.$call.call$7$authenticated$headers$isolate$responseType$timeout$type$url(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    },
    call$8$authenticated$body$headers$isolate$responseType$timeout$type$url(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
      return this.$call.call$8$authenticated$body$headers$isolate$responseType$timeout$type$url(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    },
    call$6$authenticated$clientType$headers$method$t$uri(arg0, arg1, arg2, arg3, arg4, arg5) {
      return this.$call.call$6$authenticated$clientType$headers$method$t$uri(arg0, arg1, arg2, arg3, arg4, arg5);
    },
    call$4$cancelOnError$onDone$onError(arg0, arg1, arg2, arg3) {
      return this.$call.call$4$cancelOnError$onDone$onError(arg0, arg1, arg2, arg3);
    },
    call$1$end(arg0) {
      return this.$call.call$1$end(arg0);
    },
    call$1$text(arg0) {
      return this.$call.call$1$text(arg0);
    },
    call$1$line(arg0) {
      return this.$call.call$1$line(arg0);
    },
    call$2$withDrive(arg0, arg1) {
      return this.$call.call$2$withDrive(arg0, arg1);
    },
    call$1$scheme(arg0) {
      return this.$call.call$1$scheme(arg0);
    },
    call$3$headers$method$uri(arg0, arg1, arg2) {
      return this.$call.call$3$headers$method$uri(arg0, arg1, arg2);
    },
    call$3$client$headers$uri(arg0, arg1, arg2) {
      return this.$call.call$3$client$headers$uri(arg0, arg1, arg2);
    },
    call$5$headers$method$onRetry$response$uri(arg0, arg1, arg2, arg3, arg4) {
      return this.$call.call$5$headers$method$onRetry$response$uri(arg0, arg1, arg2, arg3, arg4);
    },
    call$1$queryParameters(arg0) {
      return this.$call.call$1$queryParameters(arg0);
    },
    call$3$onDone$onError(arg0, arg1, arg2) {
      return this.$call.call$3$onDone$onError(arg0, arg1, arg2);
    },
    call$2$onDone(arg0, arg1) {
      return this.$call.call$2$onDone(arg0, arg1);
    },
    call$3$cancelOnError$onDone(arg0, arg1, arg2) {
      return this.$call.call$3$cancelOnError$onDone(arg0, arg1, arg2);
    },
    call$2$client$message(arg0, arg1) {
      return this.$call.call$2$client$message(arg0, arg1);
    },
    call$1$path(arg0) {
      return this.$call.call$1$path(arg0);
    }
  };
  A.Web3SubstrateSendTransaction_Web3SubstrateSendTransaction$deserialize_closure.prototype = {
    call$1(e) {
      return type$.CborStringValue._as(e).value;
    },
    $signature: 61
  };
  A.Web3SubstrateSendTransaction_toCbor_closure.prototype = {
    call$1(e) {
      return new A.CborStringValue(A._asString(e));
    },
    $signature: 347
  };
  A.Web3SubstrateChainAccount.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = A._setArrayType([_this.keyIndex.toCbor$0(), _this.address.address, _this.id, _this._defaultAddress, _this.publicKey], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_5, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return J.toString$0$(this.address);
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3SubstrateChainIdnetifier.prototype = {
    get$identifier() {
      return "substrate:" + this.genesisHash;
    }
  };
  A.Web3SubstrateChainAuthenticated.prototype = {};
  A.Web3SubstrateChainAuthenticated_Web3SubstrateChainAuthenticated$deserialize_closure.prototype = {
    call$1(e) {
      return A.Web3SubstrateChainAccount_Web3SubstrateChainAccount$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 348
  };
  A.Web3SubstrateChainAuthenticated_Web3SubstrateChainAuthenticated$deserialize_closure0.prototype = {
    call$1(e) {
      return A.Web3SubstrateChainIdnetifier_Web3SubstrateChainIdnetifier$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 349
  };
  A.Web3SuiRequestMethods.prototype = {
    get$network() {
      return B.NetworkType_AXR;
    }
  };
  A.Web3SuiRequestMethods_fromId_closure.prototype = {
    call$1(e) {
      return type$.Web3SuiRequestMethods._as(e).id === this.id;
    },
    $signature: 90
  };
  A.Web3SuiRequestMethods_fromId_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_qYU);
    },
    $signature: 0
  };
  A.Web3SuiRequestMethods_fromName_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Web3SuiRequestMethods._as(e);
      t1 = this.name;
      return e.name === t1 || B.JSArray_methods.contains$1(e.methodsName, t1);
    },
    $signature: 90
  };
  A.Web3SuiRequestParam.prototype = {};
  A.Web3SuiSignMessageResponse.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["messageBytes", this.messageBytes, "signature", this.signature], type$.String, type$.dynamic);
    }
  };
  A.Web3SuiSignMessage.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.method.get$tag(),
        t2 = _this.accessAccount.toCbor$0();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, type$.int), new A.CborListValue([t1, t2, _this.challeng, _this.content], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$method() {
      return this.method;
    }
  };
  A.Web3SuiTransactionCallArgs.prototype = {
    _enumToString$0() {
      return "Web3SuiTransactionCallArgs." + this._name;
    }
  };
  A.Web3SuiTransactionCallArgs_fromName_closure.prototype = {
    call$1(e) {
      type$.Web3SuiTransactionCallArgs._as(e);
      return e.name.toLowerCase() === this.name.toLowerCase();
    },
    $signature: 351
  };
  A.Web3SuiTransactionCallArg.prototype = {};
  A.Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJson_closure.prototype = {
    call$1(e) {
      return type$.Web3SuiTransactionCallArgs._as(e).name;
    },
    $signature: 352
  };
  A.Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJsonV1_closure0.prototype = {
    call$1(value) {
      var t1, t2, v, pure, _s5_ = "value", _null = null;
      type$.Map_String_dynamic._as(value);
      t1 = type$.Map_dynamic_dynamic;
      if (t1._is(value.$index(0, _s5_))) {
        t2 = value.$index(0, _s5_);
        v = t2 == null ? _null : J.$index$asx(t2, "Object");
        if (v != null && t1._is(v))
          return A.Web3SuiTransactionObject_Web3SuiTransactionObject$fromJsonV1(v.cast$2$0(0, type$.String, type$.dynamic));
        t1 = value.$index(0, _s5_);
        pure = t1 == null ? _null : J.$index$asx(t1, "Pure");
        if (pure != null)
          return new A.Web3SuiTransactionPureArg(A.StringUtils_decode(J.cast$1$0$ax(type$.List_dynamic._as(pure), type$.int), false, B.StringEncoding_2), B.Web3SuiTransactionCallArgs_Pure_pure);
      }
      t1 = value.$index(0, "type");
      switch (t1 == null ? _null : J.toString$0$(t1)) {
        case "object":
          return new A.Web3SuiTransactionUnresolvedObject(A.SuiAddress_SuiAddress(A._asString(value.$index(0, _s5_))), _null, _null, _null, B.Web3SuiTransactionCallArgs_fy6);
        case "pure":
          return new A.Web3SuiTransactionUnresolvedPurePureArg(value.$index(0, _s5_), B.Web3SuiTransactionCallArgs_UnresolvedPure_unresolvedPure);
        default:
          return _null;
      }
    },
    $signature: 353
  };
  A.Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJsonV1_closure.prototype = {
    call$0() {
      return A.throwExpression(A.Web3RequestExceptionConst_failedToParse("kind"));
    },
    $signature: 0
  };
  A.Web3SuiObjectArgs.prototype = {
    _enumToString$0() {
      return "Web3SuiObjectArgs." + this._name;
    }
  };
  A.Web3SuiObjectArgs_fromName_closure.prototype = {
    call$1(e) {
      type$.Web3SuiObjectArgs._as(e);
      return e.name.toLowerCase() === this.name.toLowerCase();
    },
    $signature: 354
  };
  A.Web3SuiTransactionObject.prototype = {
    toJson$0() {
      var t1 = this.objectArg,
        t2 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal(["Object", A.LinkedHashMap_LinkedHashMap$_literal([t1.type.name, t1.toJson$0()], t2, type$.Map_String_dynamic)], t2, type$.dynamic);
    }
  };
  A.Web3SuiTransactionObject_Web3SuiTransactionObject$fromJsonV1_closure0.prototype = {
    call$1(value) {
      var _s10_ = "ImmOrOwned",
        _s9_ = "Receiving",
        t1 = type$.Map_String_dynamic;
      t1._as(value);
      if (value.containsKey$1(_s10_))
        return A.Web3SuiTransactionImmOrOwnedObject_Web3SuiTransactionImmOrOwnedObject$fromJson(t1._as(value.$index(0, _s10_)));
      if (value.containsKey$1("Shared"))
        return A.Web3SuiTransactionSharedObject_Web3SuiTransactionSharedObject$fromJson(t1._as(value.$index(0, "Shared")));
      if (value.containsKey$1(_s9_))
        return A.Web3SuiTransactionReceiving_Web3SuiTransactionReceiving$fromJson(t1._as(value.$index(0, _s9_)));
      return null;
    },
    $signature: 355
  };
  A.Web3SuiTransactionObject_Web3SuiTransactionObject$fromJsonV1_closure.prototype = {
    call$0() {
      return A.throwExpression(A.Web3RequestExceptionConst_failedToParse("input"));
    },
    $signature: 0
  };
  A.Web3SuiTransactionObjectArg.prototype = {};
  A.Web3SuiTransactionObjectArg_Web3SuiTransactionObjectArg$fromJson_closure.prototype = {
    call$1(e) {
      return type$.Web3SuiObjectArgs._as(e).name;
    },
    $signature: 356
  };
  A.Web3SuiTransactionImmOrOwnedObject.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["objectId", this.objectId.address, "version", this.version.toString$0(0), "digest", this.digest], type$.String, type$.dynamic);
    }
  };
  A.Web3SuiTransactionImmOrOwnedObject_Web3SuiTransactionImmOrOwnedObject$fromJson_closure.prototype = {
    call$1(address) {
      return A.SuiAddress_SuiAddress(address);
    },
    $signature: 8
  };
  A.Web3SuiTransactionSharedObject.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["objectId", this.objectId.address, "initialSharedVersion", this.initialSharedVersion.toString$0(0), "mutable", this.mutable], type$.String, type$.dynamic);
    }
  };
  A.Web3SuiTransactionSharedObject_Web3SuiTransactionSharedObject$fromJson_closure.prototype = {
    call$1(address) {
      return A.SuiAddress_SuiAddress(address);
    },
    $signature: 8
  };
  A.Web3SuiTransactionReceiving.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["objectId", this.objectId.address, "digest", this.digest, "version", this.version.toString$0(0)], type$.String, type$.dynamic);
    }
  };
  A.Web3SuiTransactionReceiving_Web3SuiTransactionReceiving$fromJson_closure.prototype = {
    call$1(address) {
      return A.SuiAddress_SuiAddress(address);
    },
    $signature: 8
  };
  A.Web3SuiTransactionPureArg.prototype = {
    toJson$0() {
      var t1 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal([this.type.name, A.LinkedHashMap_LinkedHashMap$_literal(["bytes", this.bytes], t1, t1)], t1, type$.dynamic);
    }
  };
  A.Web3SuiTransactionUnresolvedPurePureArg.prototype = {
    toJson$0() {
      var t1 = type$.String,
        t2 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal([this.type.name, A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], t1, t2)], t1, t2);
    }
  };
  A.Web3SuiTransactionUnresolvedObject.prototype = {
    toJson$0() {
      var t2, t3, _this = this,
        t1 = _this.version;
      t1 = t1 == null ? null : t1.toString$0(0);
      t2 = _this.initialSharedVersion;
      t2 = t2 == null ? null : t2.toString$0(0);
      t3 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal([_this.type.name, A.LinkedHashMap_LinkedHashMap$_literal(["objectId", _this.objectId.address, "version", t1, "digest", _this.digest, "initialSharedVersion", t2], t3, type$.nullable_String)], t3, type$.dynamic);
    }
  };
  A.Web3SuiTransactionUnresolvedObject_Web3SuiTransactionUnresolvedObject$fromJson_closure.prototype = {
    call$1(address) {
      return A.SuiAddress_SuiAddress(address);
    },
    $signature: 8
  };
  A.Web3SuiArguments.prototype = {
    _enumToString$0() {
      return "Web3SuiArguments." + this._name;
    }
  };
  A.Web3SuiArguments_fromName_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Web3SuiArguments._as(e);
      t1 = this.name;
      t1 = t1 == null ? null : t1.toLowerCase();
      return e._name.toLowerCase() === t1;
    },
    $signature: 358
  };
  A.Web3SuiTransactionArgument.prototype = {};
  A.Web3SuiTransactionArgumentGasCoin.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["GasCoin", true], type$.String, type$.dynamic);
    }
  };
  A.Web3SuiTransactionArgumentInput.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["Input", this.input], type$.String, type$.dynamic);
    }
  };
  A.Web3SuiTransactionArgumentResult.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["Result", this.result], type$.String, type$.dynamic);
    }
  };
  A.Web3SuiTransactionArgumentNestedResult.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["NestedResult", A._setArrayType([this.index, this.resultIndex], type$.JSArray_int)], type$.String, type$.dynamic);
    }
  };
  A.Web3SuiTransactionCommandMoveCall.prototype = {
    toJson$0() {
      var _this = this,
        t1 = _this.$arguments,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.Web3SuiTransactionCommandMoveCall_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      t2 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal([_this.type.name, A.LinkedHashMap_LinkedHashMap$_literal(["package", _this.$package.address, "module", _this.module, "function", _this.$function, "typeArguments", _this.typeArguments, "arguments", t1], t2, type$.Object)], t2, type$.dynamic);
    }
  };
  A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJson_closure.prototype = {
    call$1(address) {
      return A.SuiAddress_SuiAddress(address);
    },
    $signature: 8
  };
  A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJson_closure0.prototype = {
    call$1(e) {
      return A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 18
  };
  A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure.prototype = {
    call$1(value) {
      var split = A._setArrayType(A._asString(value).split("::"), type$.JSArray_String);
      if (split.length !== 3)
        return null;
      return split;
    },
    $signature: 360
  };
  A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure1.prototype = {
    call$1(address) {
      return A.SuiAddress_SuiAddress(A._asString(address));
    },
    $signature: 8
  };
  A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure0.prototype = {
    call$0() {
      return new A.Web3RequestException(string$.Invalita + J.$index$asx(this.target, 0), -32602, "WEB3-5100", null);
    },
    $signature: 89
  };
  A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure2.prototype = {
    call$1(e) {
      return A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJsonV1(type$.Map_String_dynamic._as(e));
    },
    $signature: 18
  };
  A.Web3SuiTransactionCommandMoveCall_toJson_closure.prototype = {
    call$1(e) {
      return type$.Web3SuiTransactionArgument._as(e).toJson$0();
    },
    $signature: 36
  };
  A.Web3SuiTransactionCommandTransferObjects.prototype = {
    toJson$0() {
      var t1 = this.address.toJson$0(),
        t2 = this.objects,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,Map<String,@>>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Map<String,@>(1)")._as(new A.Web3SuiTransactionCommandTransferObjects_toJson_closure()), t4), t4._eval$1("ListIterable.E"));
      t3 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal([this.type.name, A.LinkedHashMap_LinkedHashMap$_literal(["address", t1, "objects", t2], t3, type$.Object)], t3, type$.dynamic);
    }
  };
  A.Web3SuiTransactionCommandTransferObjects_Web3SuiTransactionCommandTransferObjects$fromJson_closure.prototype = {
    call$1(e) {
      return A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 18
  };
  A.Web3SuiTransactionCommandTransferObjects_Web3SuiTransactionCommandTransferObjects$fromJsonV1_closure.prototype = {
    call$1(e) {
      return A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJsonV1(type$.Map_String_dynamic._as(e));
    },
    $signature: 18
  };
  A.Web3SuiTransactionCommandTransferObjects_toJson_closure.prototype = {
    call$1(e) {
      return type$.Web3SuiTransactionArgument._as(e).toJson$0();
    },
    $signature: 36
  };
  A.Web3SuiTransactionDataV2.prototype = {
    toJson$0() {
      var t2, t3, t4, t5, t6, t7, _this = this,
        t1 = _this.sender;
      t1 = t1 == null ? null : t1.address;
      t2 = _this.expiration;
      t2 = t2 == null ? null : t2.toJson$0();
      t3 = _this.gasData.toJson$0();
      t4 = _this.inputs;
      t5 = A._arrayInstanceType(t4);
      t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
      t4 = A.List_List$_of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.Web3SuiTransactionDataV2_toJson_closure()), t6), t6._eval$1("ListIterable.E"));
      t5 = _this.commands;
      t6 = A._arrayInstanceType(t5);
      t7 = t6._eval$1("MappedListIterable<1,Map<String,@>>");
      t5 = A.List_List$_of(new A.MappedListIterable(t5, t6._eval$1("Map<String,@>(1)")._as(new A.Web3SuiTransactionDataV2_toJson_closure0()), t7), t7._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["version", 2, "sender", t1, "expiration", t2, "gasData", t3, "inputs", t4, "commands", t5, "extensions", _this.extensions], type$.String, type$.dynamic);
    }
  };
  A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure.prototype = {
    call$1(address) {
      return A.SuiAddress_SuiAddress(address);
    },
    $signature: 8
  };
  A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure1.prototype = {
    call$1(value) {
      return A.Web3SuiTransactionExpiration_Web3SuiTransactionExpiration$fromJson(type$.Map_String_dynamic._as(value));
    },
    $signature: 68
  };
  A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure0.prototype = {
    call$0() {
      throw A.wrapException(A.Web3RequestExceptionConst_failedToParse("expiration"));
    },
    $signature: 0
  };
  A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure2.prototype = {
    call$1(e) {
      return A.Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 87
  };
  A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure3.prototype = {
    call$1(e) {
      return A.Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 127
  };
  A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure.prototype = {
    call$1(address) {
      return A.SuiAddress_SuiAddress(address);
    },
    $signature: 8
  };
  A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure1.prototype = {
    call$1(value) {
      return A.Web3SuiTransactionExpiration_Web3SuiTransactionExpiration$fromJson(type$.Map_String_dynamic._as(value));
    },
    $signature: 68
  };
  A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure0.prototype = {
    call$0() {
      throw A.wrapException(A.Web3RequestExceptionConst_failedToParse("expiration"));
    },
    $signature: 0
  };
  A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure2.prototype = {
    call$1(e) {
      return A.Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJsonV1(type$.Map_String_dynamic._as(e));
    },
    $signature: 87
  };
  A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure3.prototype = {
    call$1(e) {
      return A.Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJsonV1(type$.Map_String_dynamic._as(e));
    },
    $signature: 127
  };
  A.Web3SuiTransactionDataV2_toJson_closure.prototype = {
    call$1(e) {
      return type$.Web3SuiTransactionCallArg._as(e).toJson$0();
    },
    $signature: 366
  };
  A.Web3SuiTransactionDataV2_toJson_closure0.prototype = {
    call$1(e) {
      return type$.Web3SuiTransactionCommand._as(e).toJson$0();
    },
    $signature: 367
  };
  A.Web3SuiTransactionExpirations.prototype = {
    _enumToString$0() {
      return "Web3SuiTransactionExpirations." + this._name;
    }
  };
  A.Web3SuiTransactionExpirations_fromName_closure.prototype = {
    call$1(e) {
      type$.Web3SuiTransactionExpirations._as(e);
      return e.name.toLowerCase() === this.name.toLowerCase();
    },
    $signature: 368
  };
  A.Web3SuiTransactionExpiration.prototype = {};
  A.Web3SuiTransactionExpiration_Web3SuiTransactionExpiration$fromJson_closure.prototype = {
    call$1(e) {
      return type$.Web3SuiTransactionExpirations._as(e).name;
    },
    $signature: 369
  };
  A.Web3SuiTransactionExpirationNone.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal([this.type.name, true], type$.String, type$.dynamic);
    }
  };
  A.Web3SuiTransactionExpirationEpoch.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal([this.type.name, this.epoch.toString$0(0)], type$.String, type$.dynamic);
    }
  };
  A.Web3SuiTransactionGasData.prototype = {
    toJson$0() {
      var t2, t3, t4, t5, t6, _this = this, _null = null,
        t1 = _this.budget;
      t1 = t1 == null ? _null : t1.toString$0(0);
      t2 = _this.price;
      t2 = t2 == null ? _null : t2.toString$0(0);
      t3 = _this.owner;
      t3 = t3 == null ? _null : t3.address;
      t4 = _this.payment;
      if (t4 == null)
        t4 = _null;
      else {
        t5 = A._arrayInstanceType(t4);
        t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
        t4 = A.List_List$_of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.Web3SuiTransactionGasData_toJson_closure()), t6), t6._eval$1("ListIterable.E"));
      }
      return A.LinkedHashMap_LinkedHashMap$_literal(["budget", t1, "price", t2, "owner", t3, "payment", t4], type$.String, type$.dynamic);
    }
  };
  A.Web3SuiTransactionGasData_Web3SuiTransactionGasData$fromJson_closure.prototype = {
    call$1(address) {
      return A.SuiAddress_SuiAddress(address);
    },
    $signature: 8
  };
  A.Web3SuiTransactionGasData_Web3SuiTransactionGasData$fromJson_closure0.prototype = {
    call$1(e) {
      return A.Web3SuiTransactionImmOrOwnedObject_Web3SuiTransactionImmOrOwnedObject$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 370
  };
  A.Web3SuiTransactionGasData_toJson_closure.prototype = {
    call$1(e) {
      return type$.Web3SuiTransactionImmOrOwnedObject._as(e).toJson$0();
    },
    $signature: 371
  };
  A.Web3SuiTransactionCommandSplitCoins.prototype = {
    toJson$0() {
      var t1 = this.coin.toJson$0(),
        t2 = this.amounts,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,Map<String,@>>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Map<String,@>(1)")._as(new A.Web3SuiTransactionCommandSplitCoins_toJson_closure()), t4), t4._eval$1("ListIterable.E"));
      t3 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal([this.type.name, A.LinkedHashMap_LinkedHashMap$_literal(["coin", t1, "amounts", t2], t3, type$.Object)], t3, type$.dynamic);
    }
  };
  A.Web3SuiTransactionCommandSplitCoins_Web3SuiTransactionCommandSplitCoins$fromJson_closure.prototype = {
    call$1(e) {
      return A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 18
  };
  A.Web3SuiTransactionCommandSplitCoins_Web3SuiTransactionCommandSplitCoins$fromJsonV1_closure.prototype = {
    call$1(e) {
      return A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJsonV1(type$.Map_String_dynamic._as(e));
    },
    $signature: 18
  };
  A.Web3SuiTransactionCommandSplitCoins_toJson_closure.prototype = {
    call$1(e) {
      return type$.Web3SuiTransactionArgument._as(e).toJson$0();
    },
    $signature: 36
  };
  A.Web3SuiTransactionCommandMergeCoins.prototype = {
    toJson$0() {
      var t1 = this.destination.toJson$0(),
        t2 = this.sources,
        t3 = A._arrayInstanceType(t2),
        t4 = t3._eval$1("MappedListIterable<1,Map<String,@>>");
      t2 = A.List_List$_of(new A.MappedListIterable(t2, t3._eval$1("Map<String,@>(1)")._as(new A.Web3SuiTransactionCommandMergeCoins_toJson_closure()), t4), t4._eval$1("ListIterable.E"));
      t3 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal([this.type.name, A.LinkedHashMap_LinkedHashMap$_literal(["destination", t1, "sources", t2], t3, type$.Object)], t3, type$.dynamic);
    }
  };
  A.Web3SuiTransactionCommandMergeCoins_Web3SuiTransactionCommandMergeCoins$fromJson_closure.prototype = {
    call$1(e) {
      return A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 18
  };
  A.Web3SuiTransactionCommandMergeCoins_Web3SuiTransactionCommandMergeCoins$fromJsonV1_closure.prototype = {
    call$1(e) {
      return A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJsonV1(type$.Map_String_dynamic._as(e));
    },
    $signature: 18
  };
  A.Web3SuiTransactionCommandMergeCoins_toJson_closure.prototype = {
    call$1(e) {
      return type$.Web3SuiTransactionArgument._as(e).toJson$0();
    },
    $signature: 36
  };
  A.Web3SuiTransactionCommandPublish.prototype = {
    toJson$0() {
      var t1 = this.dependencies,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,String>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Web3SuiTransactionCommandPublish_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      t2 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal([this.type.name, A.LinkedHashMap_LinkedHashMap$_literal(["modules", this.modules, "dependencies", t1], t2, type$.List_String)], t2, type$.dynamic);
    }
  };
  A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJson_closure.prototype = {
    call$1(e) {
      return A.SuiAddress_SuiAddress(A._asString(e));
    },
    $signature: 8
  };
  A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1_closure0.prototype = {
    call$1(value) {
      var t1 = J.map$1$1$ax(type$.List_dynamic._as(value), new A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1__closure(), type$.List_int),
        t2 = t1.$ti,
        t3 = t2._eval$1("MappedListIterable<ListIterable.E,String>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("String(ListIterable.E)")._as(new A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1__closure0()), t3), t3._eval$1("ListIterable.E"));
      return t1;
    },
    $signature: 85
  };
  A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1__closure.prototype = {
    call$1(e) {
      return J.cast$1$0$ax(type$.List_dynamic._as(e), type$.int);
    },
    $signature: 31
  };
  A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1__closure0.prototype = {
    call$1(e) {
      return A.StringUtils_decode(type$.List_int._as(e), false, B.StringEncoding_2);
    },
    $signature: 17
  };
  A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1_closure.prototype = {
    call$0() {
      return A.throwExpression(A.Web3SuiExceptionConstant_fialedToParseTransactionObject("publish"));
    },
    $signature: 0
  };
  A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1_closure1.prototype = {
    call$1(e) {
      return A.SuiAddress_SuiAddress(A._asString(e));
    },
    $signature: 8
  };
  A.Web3SuiTransactionCommandPublish_toJson_closure.prototype = {
    call$1(e) {
      return type$.SuiAddress._as(e).address;
    },
    $signature: 84
  };
  A.Web3SuiTransactionCommandMakeMoveVec.prototype = {
    toJson$0() {
      var t1 = this.elements,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.Web3SuiTransactionCommandMakeMoveVec_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      t2 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal([this.type.name, A.LinkedHashMap_LinkedHashMap$_literal(["type", this.typeArgument, "elements", t1], t2, type$.nullable_Object)], t2, type$.dynamic);
    }
  };
  A.Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJson_closure.prototype = {
    call$1(e) {
      return A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 18
  };
  A.Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1_closure0.prototype = {
    call$1(value) {
      type$.Map_dynamic_dynamic._as(value);
      if (value.containsKey$1("None"))
        return null;
      if (value.containsKey$1("Some"))
        return A._asStringQ(value.$index(0, "Some"));
      throw A.wrapException(A.Web3SuiExceptionConstant_fialedToParseTransactionObject("MakeMoveVec"));
    },
    $signature: 374
  };
  A.Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1_closure.prototype = {
    call$0() {
      return A.throwExpression(A.Web3SuiExceptionConstant_fialedToParseTransactionObject("MakeMoveVec"));
    },
    $signature: 0
  };
  A.Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1_closure1.prototype = {
    call$1(e) {
      return A.Web3SuiTransactionArgument_Web3SuiTransactionArgument$fromJsonV1(type$.Map_String_dynamic._as(e));
    },
    $signature: 18
  };
  A.Web3SuiTransactionCommandMakeMoveVec_toJson_closure.prototype = {
    call$1(e) {
      return type$.Web3SuiTransactionArgument._as(e).toJson$0();
    },
    $signature: 36
  };
  A.Web3SuiTransactionCommandUpgrade.prototype = {
    toJson$0() {
      var _this = this,
        t1 = _this.dependencies,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,String>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.Web3SuiTransactionCommandUpgrade_toJson_closure()), t3), t3._eval$1("ListIterable.E"));
      t2 = type$.String;
      return A.LinkedHashMap_LinkedHashMap$_literal([_this.type.name, A.LinkedHashMap_LinkedHashMap$_literal(["modules", _this.modules, "dependencies", t1, "package", _this.$package.address, "ticket", _this.ticket.toJson$0()], t2, type$.Object)], t2, type$.dynamic);
    }
  };
  A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJson_closure.prototype = {
    call$1(e) {
      return A.SuiAddress_SuiAddress(A._asString(e));
    },
    $signature: 8
  };
  A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJson_closure0.prototype = {
    call$1(address) {
      return A.SuiAddress_SuiAddress(address);
    },
    $signature: 8
  };
  A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure0.prototype = {
    call$1(value) {
      var t1 = J.map$1$1$ax(type$.List_dynamic._as(value), new A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1__closure(), type$.List_int),
        t2 = t1.$ti,
        t3 = t2._eval$1("MappedListIterable<ListIterable.E,String>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("String(ListIterable.E)")._as(new A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1__closure0()), t3), t3._eval$1("ListIterable.E"));
      return t1;
    },
    $signature: 85
  };
  A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1__closure.prototype = {
    call$1(e) {
      return J.cast$1$0$ax(type$.List_dynamic._as(e), type$.int);
    },
    $signature: 31
  };
  A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1__closure0.prototype = {
    call$1(e) {
      return A.StringUtils_decode(type$.List_int._as(e), false, B.StringEncoding_2);
    },
    $signature: 17
  };
  A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure.prototype = {
    call$0() {
      return A.throwExpression(A.Web3SuiExceptionConstant_fialedToParseTransactionObject("upgrade"));
    },
    $signature: 0
  };
  A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure1.prototype = {
    call$1(e) {
      return A.SuiAddress_SuiAddress(A._asString(e));
    },
    $signature: 8
  };
  A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure2.prototype = {
    call$1(address) {
      return A.SuiAddress_SuiAddress(address);
    },
    $signature: 8
  };
  A.Web3SuiTransactionCommandUpgrade_toJson_closure.prototype = {
    call$1(e) {
      return type$.SuiAddress._as(e).address;
    },
    $signature: 84
  };
  A.Web3SuiTransactionCommands.prototype = {
    _enumToString$0() {
      return "Web3SuiTransactionCommands." + this._name;
    }
  };
  A.Web3SuiTransactionCommands_fromName_closure.prototype = {
    call$1(e) {
      type$.Web3SuiTransactionCommands._as(e);
      return e.name.toLowerCase() === this.name.toLowerCase();
    },
    $signature: 375
  };
  A.Web3SuiTransactionCommand.prototype = {};
  A.Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJson_closure.prototype = {
    call$1(e) {
      return type$.Web3SuiTransactionCommands._as(e).name;
    },
    $signature: 376
  };
  A.Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJsonV1_closure0.prototype = {
    call$1(value) {
      return A.Web3SuiTransactionCommands_fromName(A._asString(value));
    },
    $signature: 377
  };
  A.Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJsonV1_closure.prototype = {
    call$0() {
      return new A.Web3RequestException("Invalid tranaction: Failed to parse transaction object kind", -32602, "WEB3-5100", null);
    },
    $signature: 89
  };
  A.Web3SuiSignTransactionResponse.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["bytes", this.bytes, "signature", this.signature, "digest", this.digest], type$.String, type$.dynamic);
    }
  };
  A.Web3SuiSignAndExecuteTransactionResponse.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["digest", this.digest, "effects", this.effects, "excuteResponse", this.excuteResponse], type$.String, type$.dynamic);
    }
  };
  A.Web3SuiSignOrExecuteTransaction.prototype = {
    toCbor$0() {
      var t5, _this = this, _null = null,
        t1 = _this.method.get$tag(),
        t2 = _this.accessAccount.toCbor$0(),
        t3 = A.StringUtils_fromJson(_this.transaction.toJson$0(), _null, _null, false),
        t4 = _this.executeOptions;
      t4 = A.StringUtils_tryFromJson(t4 == null ? _null : t4.toJson$0());
      t5 = _this.executeType;
      t5 = t5 == null ? _null : t5.name;
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, type$.int), new A.CborListValue([t1, t2, new A.CborStringValue(t3), t4, t5], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$method() {
      return this.method;
    }
  };
  A.Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize_closure.prototype = {
    call$1(e) {
      var t1 = A.StringUtils_toJson(type$.CborStringValue._as(e).value, null, type$.Map_String_dynamic);
      return new A.SuiApiTransactionBlockResponseOptions(A._asBoolQ(t1.$index(0, "showBalanceChange")), A._asBoolQ(t1.$index(0, "showEffects")), A._asBoolQ(t1.$index(0, "showEvents")), A._asBoolQ(t1.$index(0, "showInput")), A._asBoolQ(t1.$index(0, "showObjectChanges")), A._asBoolQ(t1.$index(0, "showRawEffects")), A._asBoolQ(t1.$index(0, "showRawInput")));
    },
    $signature: 378
  };
  A.Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize_closure0.prototype = {
    call$1(e) {
      return B.JSArray_methods.firstWhere$1(B.List_PEP, new A.Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize__closure(type$.CborStringValue._as(e)));
    },
    $signature: 379
  };
  A.Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize__closure.prototype = {
    call$1(n) {
      return this.e.value === type$.SuiApiExecuteTransactionRequestType._as(n).name;
    },
    $signature: 82
  };
  A.Web3SuiChainAccount.prototype = {
    toCbor$0() {
      var t3, _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = _this.publicKey;
      A.BytesUtils_validateListOfBytes(t2);
      t3 = type$.int;
      t2 = A._setArrayType([t1, _this.address.address, _this.id, _this._defaultAddress, new A.CborBytesValue(A.List_List$unmodifiable(t2, t3)), _this.signingScheme, _this.network.value], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_7, t3), new A.CborListValue(t2, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.address;
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3SuiChainAuthenticated.prototype = {};
  A.Web3SuiChainAuthenticated_Web3SuiChainAuthenticated$deserialize_closure.prototype = {
    call$1(e) {
      return A.Web3SuiChainAccount_Web3SuiChainAccount$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 381
  };
  A.Web3SuiChainAuthenticated_Web3SuiChainAuthenticated$deserialize_closure0.prototype = {
    call$1(e) {
      return A.Web3ChainDefaultIdnetifier_Web3ChainDefaultIdnetifier$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 35
  };
  A.Web3TonRequestMethods.prototype = {
    get$network() {
      return B.NetworkType_9gG;
    }
  };
  A.Web3TonRequestMethods_fromId_closure.prototype = {
    call$1(e) {
      return type$.Web3TonRequestMethods._as(e).id === this.id;
    },
    $signature: 81
  };
  A.Web3TonRequestMethods_fromId_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_qYU);
    },
    $signature: 0
  };
  A.Web3TonRequestMethods_fromName_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Web3TonRequestMethods._as(e);
      t1 = this.name;
      return e.name === t1 || B.JSArray_methods.contains$1(e.methodsName, t1);
    },
    $signature: 81
  };
  A.Web3TonRequestParam.prototype = {};
  A.Web3TonSignMessage.prototype = {
    get$method() {
      return B.Web3TonRequestMethods_102_ton_signMessage_List_empty;
    },
    toCbor$0() {
      var t4,
        t1 = B.Web3TonRequestMethods_102_ton_signMessage_List_empty.get$tag(),
        t2 = this.accessAccount.toCbor$0(),
        t3 = A.BytesUtils_fromHexString(this.challeng, false);
      A.BytesUtils_validateListOfBytes(t3);
      t4 = type$.int;
      t3 = A.List_List$unmodifiable(t3, t4);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, t4), new A.CborListValue([t1, t2, new A.CborBytesValue(t3), this.content], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3TonTransactionMessage.prototype = {
    toCbor$0() {
      var t3, _this = this,
        t1 = _this.address.toFriendlyAddress$0(),
        t2 = _this.stateInit;
      if (t2 == null)
        t2 = null;
      else {
        t2 = A.BocSerialization_serialize(true, false, t2);
        A.BytesUtils_validateListOfBytes(t2);
        t2 = new A.CborBytesValue(A.List_List$unmodifiable(t2, type$.int));
      }
      t3 = _this.payload;
      if (t3 == null)
        t3 = null;
      else {
        t3 = A.BocSerialization_serialize(true, false, t3);
        A.BytesUtils_validateListOfBytes(t3);
        t3 = new A.CborBytesValue(A.List_List$unmodifiable(t3, type$.int));
      }
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_3_1, type$.int), new A.CborListValue([t1, _this.amount, t2, t3], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3TonSendTransactionResponse.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["message", this.message, "tx_hash", this.txHash], type$.String, type$.dynamic);
    }
  };
  A.Web3TonSendTransaction.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.method.get$tag(),
        t2 = _this.accessAccount.toCbor$0(),
        t3 = _this.messages,
        t4 = A._arrayInstanceType(t3),
        t5 = t4._eval$1("MappedListIterable<1,CborTagValue<@>>");
      t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("CborTagValue<@>(1)")._as(new A.Web3TonSendTransaction_toCbor_closure()), t5), t5._eval$1("ListIterable.E"));
      t1 = A._setArrayType([t1, t2, new A.CborListValue(t3, true, type$.CborListValue_CborTagValue_dynamic), _this.validUntil], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, type$.int), new A.CborListValue(t1, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$method() {
      return this.method;
    }
  };
  A.Web3TonSendTransaction_Web3TonSendTransaction$deserialize_closure.prototype = {
    call$1(e) {
      var t2, t3, _null = null,
        values = A.CborSerializable_cborTagValue(_null, _null, type$.CborTagValue_dynamic._as(e), B.List_3_1, type$.CborListValue_dynamic),
        t1 = type$.nullable_List_int,
        stateInitBytes = A.ExtractCborList_elementAt(values, 2, t1),
        payloadBytes = A.ExtractCborList_elementAt(values, 3, t1);
      t1 = A.TonAddress_TonAddress(A.ExtractCborList_elementAt(values, 0, type$.String));
      t2 = A.ExtractCborList_elementAt(values, 1, type$.BigInt);
      t3 = stateInitBytes == null ? _null : A.Cell_Cell$fromBytes(stateInitBytes);
      return new A.Web3TonTransactionMessage(t1, t2, t3, payloadBytes == null ? _null : A.Cell_Cell$fromBytes(payloadBytes));
    },
    $signature: 383
  };
  A.Web3TonSendTransaction_toCbor_closure.prototype = {
    call$1(e) {
      return type$.Web3TonTransactionMessage._as(e).toCbor$0();
    },
    $signature: 384
  };
  A._Web3TonTransactionMessage_Object_CborSerializable.prototype = {};
  A.Web3TonChainAccount.prototype = {
    get$identifier() {
      var _0_0 = this.network;
      if (B.TonChain_m1_m3.$eq(0, _0_0))
        return "ton:testnet";
      if (B.TonChain_0_m239.$eq(0, _0_0))
        return "ton:mainnet";
      throw A.wrapException(A.UnimplementedError$("Invalid ton network."));
    },
    toCbor$0() {
      var t5, _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = _this.address.toFriendlyAddress$0(),
        t3 = _this.accountContext.toCbor$0(),
        t4 = _this.publicKey;
      A.BytesUtils_validateListOfBytes(t4);
      t5 = type$.int;
      t4 = A._setArrayType([t1, t2, _this.id, _this._defaultAddress, t3, new A.CborBytesValue(A.List_List$unmodifiable(t4, t5)), _this.network.workchain], type$.JSArray_Object);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_3, t5), new A.CborListValue(t4, true, type$.CborListValue_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.toFriendlyAddress$0();
    },
    get$accountState() {
      var t1 = this.accountContext.toWalletContract$2$chain$publicKey(this.network, this.publicKey).state.initialState$0(),
        t2 = new A.Builder(A.BitBuilder$(1023), A._setArrayType([], type$.JSArray_Cell));
      t1.store$1(t2);
      return A.BocSerialization_serialize(true, false, t2.endCell$0());
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3TonChainAuthenticated.prototype = {};
  A.Web3TonChainAuthenticated_Web3TonChainAuthenticated$deserialize_closure.prototype = {
    call$1(e) {
      return A.Web3TonChainAccount_Web3TonChainAccount$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 385
  };
  A.Web3TonChainAuthenticated_Web3TonChainAuthenticated$deserialize_closure0.prototype = {
    call$1(e) {
      return A.Web3ChainDefaultIdnetifier_Web3ChainDefaultIdnetifier$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 35
  };
  A.Web3TronRequestMethods.prototype = {
    get$network() {
      return B.NetworkType_KPy;
    }
  };
  A.Web3TronRequestMethods_fromId_closure.prototype = {
    call$1(e) {
      return type$.Web3TronRequestMethods._as(e).id === this.id;
    },
    $signature: 80
  };
  A.Web3TronRequestMethods_fromId_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_qYU);
    },
    $signature: 0
  };
  A.Web3TronRequestMethods_fromName_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Web3TronRequestMethods._as(e);
      t1 = this.name;
      return e.name === t1 || B.JSArray_methods.contains$1(e.methodsName, t1);
    },
    $signature: 80
  };
  A.Web3TronRequestParam.prototype = {};
  A.Web3TronSignMessageV2.prototype = {
    get$method() {
      return B.Web3TronRequestMethods_102_tron_signMessageV2_List_empty;
    },
    toCbor$0() {
      var t4,
        t1 = B.Web3TronRequestMethods_102_tron_signMessageV2_List_empty.get$tag(),
        t2 = this.accessAccount.toCbor$0(),
        t3 = A.BytesUtils_fromHexString(this.challeng, false);
      A.BytesUtils_validateListOfBytes(t3);
      t4 = type$.int;
      t3 = A.List_List$unmodifiable(t3, t4);
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, t4), new A.CborListValue([t1, t2, new A.CborBytesValue(t3), this.content], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3TronSendTransaction.prototype = {
    get$method() {
      return B.Web3TronRequestMethods_ndr;
    },
    toCbor$0() {
      var t3, t4,
        t1 = B.Web3TronRequestMethods_ndr.get$tag(),
        t2 = this.transaction;
      A.BytesUtils_validateListOfBytes(t2);
      t3 = type$.int;
      t2 = A.List_List$unmodifiable(t2, t3);
      t4 = this.accessAccount.toCbor$0();
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_100_12, t3), new A.CborListValue([t1, new A.CborBytesValue(t2), this.txId, t4], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    }
  };
  A.Web3TronChainAccount.prototype = {
    toCbor$0() {
      var _this = this,
        t1 = _this.keyIndex.toCbor$0(),
        t2 = _this.address.toAddress$0(),
        t3 = _this.publicKey;
      if (t3 == null)
        t3 = null;
      else {
        A.BytesUtils_validateListOfBytes(t3);
        t3 = new A.CborBytesValue(A.List_List$unmodifiable(t3, type$.int));
      }
      return new A.CborTagValue(A.List_List$unmodifiable(B.List_161_2_1, type$.int), new A.CborListValue([t1, t2, _this.id, _this._defaultAddress, t3], true, type$.CborListValue_nullable_Object), type$.CborTagValue_dynamic);
    },
    get$addressStr() {
      return this.address.toAddress$0();
    },
    get$id() {
      return this.id;
    }
  };
  A.Web3TronChainIdnetifier.prototype = {
    get$identifier() {
      return "tron:" + this.chainId;
    }
  };
  A.Web3TronChainAuthenticated.prototype = {};
  A.Web3TronChainAuthenticated_Web3TronChainAuthenticated$deserialize_closure.prototype = {
    call$1(e) {
      return A.Web3TronChainAccount_Web3TronChainAccount$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 387
  };
  A.Web3TronChainAuthenticated_Web3TronChainAuthenticated$deserialize_closure0.prototype = {
    call$1(e) {
      return A.Web3TronChainIdnetifier_Web3TronChainIdnetifier$deserialize(type$.CborTagValue_dynamic._as(e));
    },
    $signature: 388
  };
  A.Web3ValidatorUtils_praseObject_closure.prototype = {
    call$0() {
      return this.onParse.call$1(this.V._as(this.value));
    },
    $signature() {
      return this.T._eval$1("0?()");
    }
  };
  A.Web3ValidatorUtils_parseBase58_closure.prototype = {
    call$0() {
      var t1 = this.value;
      t1.toString;
      return A.Base58Decoder_decode(t1, B.Base58Alphabets_0);
    },
    $signature: 79
  };
  A.Web3ValidatorUtils_parseList_closure.prototype = {
    call$0() {
      return J.cast$1$0$ax(type$.List_dynamic._as(this.value), this.E);
    },
    $signature() {
      return this.E._eval$1("List<0>()");
    }
  };
  A.Web3ValidatorUtils_parseMap_closure.prototype = {
    call$0() {
      return type$.Map_dynamic_dynamic._as(this.value).cast$2$0(0, type$.String, type$.dynamic);
    },
    $signature: 50
  };
  A.Context.prototype = {
    absolute$1(part1) {
      var t1, _null = null;
      A._validateArgList("absolute", A._setArrayType([part1, null, null, null, null, null, null, null, null, null, null, null, null, null, null], type$.JSArray_nullable_String));
      t1 = this.style;
      t1 = t1.rootLength$1(part1) > 0 && !t1.isRootRelative$1(part1);
      if (t1)
        return part1;
      t1 = this._context$_current;
      return this.join$16(0, t1 == null ? A.current() : t1, part1, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null);
    },
    join$16(_, part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15, part16) {
      var parts = A._setArrayType([part1, part2, part3, part4, part5, part6, part7, part8, part9, part10, part11, part12, part13, part14, part15, part16], type$.JSArray_nullable_String);
      A._validateArgList("join", parts);
      return this.joinAll$1(new A.WhereTypeIterable(parts, type$.WhereTypeIterable_String));
    },
    joinAll$1(parts) {
      var t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, t4, t5, parsed, path, t6;
      type$.Iterable_String._as(parts);
      for (t1 = parts.$ti, t2 = t1._eval$1("bool(Iterable.E)")._as(new A.Context_joinAll_closure()), t3 = parts.get$iterator(0), t1 = new A.WhereIterator(t3, t2, t1._eval$1("WhereIterator<Iterable.E>")), t2 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false, t4 = ""; t1.moveNext$0();) {
        t5 = t3.get$current();
        if (t2.isRootRelative$1(t5) && isAbsoluteAndNotRootRelative) {
          parsed = A.ParsedPath_ParsedPath$parse(t5, t2);
          path = t4.charCodeAt(0) == 0 ? t4 : t4;
          t4 = B.JSString_methods.substring$2(path, 0, t2.rootLength$2$withDrive(path, true));
          parsed.root = t4;
          if (t2.needsSeparator$1(t4))
            B.JSArray_methods.$indexSet(parsed.separators, 0, t2.get$separator());
          t4 = "" + parsed.toString$0(0);
        } else if (t2.rootLength$1(t5) > 0) {
          isAbsoluteAndNotRootRelative = !t2.isRootRelative$1(t5);
          t4 = "" + t5;
        } else {
          t6 = t5.length;
          if (t6 !== 0) {
            if (0 >= t6)
              return A.ioore(t5, 0);
            t6 = t2.containsSeparator$1(t5[0]);
          } else
            t6 = false;
          if (!t6)
            if (needsSeparator)
              t4 += t2.get$separator();
          t4 += t5;
        }
        needsSeparator = t2.needsSeparator$1(t5);
      }
      return t4.charCodeAt(0) == 0 ? t4 : t4;
    },
    split$1(_, path) {
      var parsed = A.ParsedPath_ParsedPath$parse(path, this.style),
        t1 = parsed.parts,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("WhereIterable<1>");
      t1 = A.List_List$_of(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Context_split_closure()), t3), t3._eval$1("Iterable.E"));
      parsed.set$parts(t1);
      t1 = parsed.root;
      if (t1 != null)
        B.JSArray_methods.insert$2(parsed.parts, 0, t1);
      return parsed.parts;
    },
    normalize$1(path) {
      var parsed;
      if (!this._needsNormalization$1(path))
        return path;
      parsed = A.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.normalize$0();
      return parsed.toString$0(0);
    },
    _needsNormalization$1(path) {
      var t2, i, start, previous, t3, previousPrevious, codeUnit, t4,
        t1 = this.style,
        root = t1.rootLength$1(path);
      if (root !== 0) {
        if (t1 === $.$get$Style_windows())
          for (t2 = path.length, i = 0; i < root; ++i) {
            if (!(i < t2))
              return A.ioore(path, i);
            if (path.charCodeAt(i) === 47)
              return true;
          }
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      for (t2 = new A.CodeUnits(path).__internal$_string, t3 = t2.length, i = start, previousPrevious = null; i < t3; ++i, previousPrevious = previous, previous = codeUnit) {
        if (!(i >= 0))
          return A.ioore(t2, i);
        codeUnit = t2.charCodeAt(i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t1 === $.$get$Style_windows() && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t4 = false;
          if (t4)
            return true;
        }
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$1(path) {
      var from, fromParsed, pathParsed, t3, t4, t5, t6, _this = this,
        _s26_ = 'Unable to find a path to "',
        t1 = _this.style,
        t2 = t1.rootLength$1(path);
      if (t2 <= 0)
        return _this.normalize$1(path);
      t2 = _this._context$_current;
      from = t2 == null ? A.current() : t2;
      if (t1.rootLength$1(from) <= 0 && t1.rootLength$1(path) > 0)
        return _this.normalize$1(path);
      if (t1.rootLength$1(path) <= 0 || t1.isRootRelative$1(path))
        path = _this.absolute$1(path);
      if (t1.rootLength$1(path) <= 0 && t1.rootLength$1(from) > 0)
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      fromParsed = A.ParsedPath_ParsedPath$parse(from, t1);
      fromParsed.normalize$0();
      pathParsed = A.ParsedPath_ParsedPath$parse(path, t1);
      pathParsed.normalize$0();
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return A.ioore(t2, 0);
        t2 = t2[0] === ".";
      } else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      t2 = fromParsed.root;
      t3 = pathParsed.root;
      if (t2 != t3)
        t2 = t2 == null || t3 == null || !t1.pathsEqual$2(t2, t3);
      else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      while (true) {
        t2 = fromParsed.parts;
        t3 = t2.length;
        t4 = false;
        if (t3 !== 0) {
          t5 = pathParsed.parts;
          t6 = t5.length;
          if (t6 !== 0) {
            if (0 >= t3)
              return A.ioore(t2, 0);
            t2 = t2[0];
            if (0 >= t6)
              return A.ioore(t5, 0);
            t5 = t1.pathsEqual$2(t2, t5[0]);
            t2 = t5;
          } else
            t2 = t4;
        } else
          t2 = t4;
        if (!t2)
          break;
        B.JSArray_methods.removeAt$1(fromParsed.parts, 0);
        B.JSArray_methods.removeAt$1(fromParsed.separators, 1);
        B.JSArray_methods.removeAt$1(pathParsed.parts, 0);
        B.JSArray_methods.removeAt$1(pathParsed.separators, 1);
      }
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return A.ioore(t2, 0);
        t2 = t2[0] === "..";
      } else
        t2 = false;
      if (t2)
        throw A.wrapException(A.PathException$(_s26_ + path + '" from "' + from + '".'));
      t2 = type$.String;
      B.JSArray_methods.insertAll$2(pathParsed.parts, 0, A.List_List$filled(t3, "..", false, t2));
      B.JSArray_methods.$indexSet(pathParsed.separators, 0, "");
      B.JSArray_methods.insertAll$2(pathParsed.separators, 1, A.List_List$filled(fromParsed.parts.length, t1.get$separator(), false, t2));
      t1 = pathParsed.parts;
      t2 = t1.length;
      if (t2 === 0)
        return ".";
      if (t2 > 1 && J.$eq$(B.JSArray_methods.get$last(t1), ".")) {
        B.JSArray_methods.removeLast$0(pathParsed.parts);
        t1 = pathParsed.separators;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
        B.JSArray_methods.add$1(t1, "");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(0);
    },
    prettyUri$1(uri) {
      var path, rel, _this = this,
        typedUri = A._parseUri(uri);
      if (typedUri.get$scheme() === "file" && _this.style === $.$get$Style_url())
        return typedUri.toString$0(0);
      else if (typedUri.get$scheme() !== "file" && typedUri.get$scheme() !== "" && _this.style !== $.$get$Style_url())
        return typedUri.toString$0(0);
      path = _this.normalize$1(_this.style.pathFromUri$1(A._parseUri(typedUri)));
      rel = _this.relative$1(path);
      return _this.split$1(0, rel).length > _this.split$1(0, path).length ? path : rel;
    }
  };
  A.Context_joinAll_closure.prototype = {
    call$1(part) {
      return A._asString(part) !== "";
    },
    $signature: 38
  };
  A.Context_split_closure.prototype = {
    call$1(part) {
      return A._asString(part).length !== 0;
    },
    $signature: 38
  };
  A._validateArgList_closure.prototype = {
    call$1(arg) {
      A._asStringQ(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 390
  };
  A.InternalStyle.prototype = {
    getRoot$1(path) {
      var t1,
        $length = this.rootLength$1(path);
      if ($length > 0)
        return B.JSString_methods.substring$2(path, 0, $length);
      if (this.isRootRelative$1(path)) {
        if (0 >= path.length)
          return A.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    },
    pathsEqual$2(path1, path2) {
      return path1 === path2;
    }
  };
  A.ParsedPath.prototype = {
    removeTrailingSeparators$0() {
      var t1, t2, _this = this;
      while (true) {
        t1 = _this.parts;
        if (!(t1.length !== 0 && J.$eq$(B.JSArray_methods.get$last(t1), "")))
          break;
        B.JSArray_methods.removeLast$0(_this.parts);
        t1 = _this.separators;
        if (0 >= t1.length)
          return A.ioore(t1, -1);
        t1.pop();
      }
      t1 = _this.separators;
      t2 = t1.length;
      if (t2 !== 0)
        B.JSArray_methods.$indexSet(t1, t2 - 1, "");
    },
    normalize$0() {
      var t1, t2, leadingDoubles, _i, part, t3, _this = this,
        newParts = A._setArrayType([], type$.JSArray_String);
      for (t1 = _this.parts, t2 = t1.length, leadingDoubles = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        part = t1[_i];
        if (!(part === "." || part === ""))
          if (part === "..") {
            t3 = newParts.length;
            if (t3 !== 0) {
              if (0 >= t3)
                return A.ioore(newParts, -1);
              newParts.pop();
            } else
              ++leadingDoubles;
          } else
            B.JSArray_methods.add$1(newParts, part);
      }
      if (_this.root == null)
        B.JSArray_methods.insertAll$2(newParts, 0, A.List_List$filled(leadingDoubles, "..", false, type$.String));
      if (newParts.length === 0 && _this.root == null)
        B.JSArray_methods.add$1(newParts, ".");
      _this.parts = newParts;
      t1 = _this.style;
      _this.separators = A.List_List$filled(newParts.length + 1, t1.get$separator(), true, type$.String);
      t2 = _this.root;
      if (t2 == null || newParts.length === 0 || !t1.needsSeparator$1(t2))
        B.JSArray_methods.$indexSet(_this.separators, 0, "");
      t2 = _this.root;
      if (t2 != null && t1 === $.$get$Style_windows())
        _this.root = A.stringReplaceAllUnchecked(t2, "/", "\\");
      _this.removeTrailingSeparators$0();
    },
    toString$0(_) {
      var t2, t3, t4, t5, i,
        t1 = this.root;
      t1 = t1 != null ? "" + t1 : "";
      for (t2 = this.parts, t3 = t2.length, t4 = this.separators, t5 = t4.length, i = 0; i < t3; ++i) {
        if (!(i < t5))
          return A.ioore(t4, i);
        t1 = t1 + t4[i] + t2[i];
      }
      t1 += A.S(B.JSArray_methods.get$last(t4));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$parts(parts) {
      this.parts = type$.List_String._as(parts);
    }
  };
  A.PathException.prototype = {
    toString$0(_) {
      return "PathException: " + this.message;
    },
    $isException: 1
  };
  A.Style.prototype = {
    toString$0(_) {
      return this.get$name();
    }
  };
  A.PosixStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 !== 0) {
        t2 = t1 - 1;
        if (!(t2 >= 0))
          return A.ioore(path, t2);
        t2 = path.charCodeAt(t2) !== 47;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t1 = path.charCodeAt(0) === 47;
      } else
        t1 = false;
      if (t1)
        return 1;
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return false;
    },
    pathFromUri$1(uri) {
      var t1;
      if (uri.get$scheme() === "" || uri.get$scheme() === "file") {
        t1 = uri.get$path();
        return A._Uri__uriDecode(t1, 0, t1.length, B.C_Utf8Codec, false);
      }
      throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
    },
    get$name() {
      return "posix";
    },
    get$separator() {
      return "/";
    }
  };
  A.UrlStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 === 0)
        return false;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      if (path.charCodeAt(t2) !== 47)
        return true;
      return B.JSString_methods.endsWith$1(path, "://") && this.rootLength$1(path) === t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var i, codeUnit, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (0 >= t1)
        return A.ioore(path, 0);
      if (path.charCodeAt(0) === 47)
        return 1;
      for (i = 0; i < t1; ++i) {
        codeUnit = path.charCodeAt(i);
        if (codeUnit === 47)
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = B.JSString_methods.indexOf$2(path, "/", B.JSString_methods.startsWith$2(path, "//", i + 1) ? i + 3 : i);
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!B.JSString_methods.startsWith$1(path, "file://"))
            return index;
          t1 = A.driveLetterEnd(path, index + 1);
          return t1 == null ? index : t1;
        }
      }
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      var t1 = path.length;
      if (t1 !== 0) {
        if (0 >= t1)
          return A.ioore(path, 0);
        t1 = path.charCodeAt(0) === 47;
      } else
        t1 = false;
      return t1;
    },
    pathFromUri$1(uri) {
      return uri.toString$0(0);
    },
    get$name() {
      return "url";
    },
    get$separator() {
      return "/";
    }
  };
  A.WindowsStyle.prototype = {
    containsSeparator$1(path) {
      return B.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1(path) {
      var t2,
        t1 = path.length;
      if (t1 === 0)
        return false;
      t2 = t1 - 1;
      if (!(t2 >= 0))
        return A.ioore(path, t2);
      t2 = path.charCodeAt(t2);
      return !(t2 === 47 || t2 === 92);
    },
    rootLength$2$withDrive(path, withDrive) {
      var t2, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (0 >= t1)
        return A.ioore(path, 0);
      if (path.charCodeAt(0) === 47)
        return 1;
      if (path.charCodeAt(0) === 92) {
        if (t1 >= 2) {
          if (1 >= t1)
            return A.ioore(path, 1);
          t2 = path.charCodeAt(1) !== 92;
        } else
          t2 = true;
        if (t2)
          return 1;
        index = B.JSString_methods.indexOf$2(path, "\\", 2);
        if (index > 0) {
          index = B.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (t1 < 3)
        return 0;
      if (!A.isAlphabetic(path.charCodeAt(0)))
        return 0;
      if (path.charCodeAt(1) !== 58)
        return 0;
      t1 = path.charCodeAt(2);
      if (!(t1 === 47 || t1 === 92))
        return 0;
      return 3;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return this.rootLength$1(path) === 1;
    },
    pathFromUri$1(uri) {
      var path, t1;
      if (uri.get$scheme() !== "" && uri.get$scheme() !== "file")
        throw A.wrapException(A.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
      path = uri.get$path();
      if (uri.get$host() === "") {
        t1 = path.length;
        if (t1 >= 3 && B.JSString_methods.startsWith$1(path, "/") && A.driveLetterEnd(path, 1) != null) {
          A.RangeError_checkValueInInterval(0, 0, t1, "startIndex");
          path = A.stringReplaceFirstUnchecked(path, "/", "", 0);
        }
      } else
        path = "\\\\" + uri.get$host() + path;
      t1 = A.stringReplaceAllUnchecked(path, "/", "\\");
      return A._Uri__uriDecode(t1, 0, t1.length, B.C_Utf8Codec, false);
    },
    codeUnitsEqual$2(codeUnit1, codeUnit2) {
      var upperCase1;
      if (codeUnit1 === codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if ((codeUnit1 ^ codeUnit2) !== 32)
        return false;
      upperCase1 = codeUnit1 | 32;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2(path1, path2) {
      var t1, t2, i;
      if (path1 === path2)
        return true;
      t1 = path1.length;
      t2 = path2.length;
      if (t1 !== t2)
        return false;
      for (i = 0; i < t1; ++i) {
        if (!(i < t2))
          return A.ioore(path2, i);
        if (!this.codeUnitsEqual$2(path1.charCodeAt(i), path2.charCodeAt(i)))
          return false;
      }
      return true;
    },
    get$name() {
      return "windows";
    },
    get$separator() {
      return "\\";
    }
  };
  A.BaseSubstrateAddress.prototype = {};
  A.SubstrateAddress.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.SubstrateAddress))
        return false;
      return other.address === this.address && other.ss58Format === this.ss58Format;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.address) ^ B.JSInt_methods.get$hashCode(this.ss58Format);
    },
    toString$0(_) {
      return this.address;
    }
  };
  A.SubstrateEthereumAddress.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.SubstrateEthereumAddress))
        return false;
      return other.address === this.address;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.address);
    },
    toString$0(_) {
      return this.address;
    }
  };
  A.DartSubstratePluginException.prototype = {};
  A.SubstrateMetadata.prototype = {};
  A.ScaleTypeDef.prototype = {};
  A.MetadataException.prototype = {};
  A.LatestMetadataInterface.prototype = {};
  A.PrimitiveTypes.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  A.PrimitiveTypes_fromValue_closure.prototype = {
    call$1(element) {
      return type$.PrimitiveTypes._as(element).name === this.value;
    },
    $signature: 391
  };
  A.PrimitiveTypes_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.MetadataException$("No PrimitiveTypes found matching the specified value", A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.UnsupportedMetadata.prototype = {
    scaleJsonSerialize$0() {
      return this.bytes;
    }
  };
  A.Si0TypeDefPrimitive.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal([this.type.name, null], type$.String, type$.dynamic);
    },
    get$typeName() {
      return B.Si1TypeDefsIndexesConst_Primitive;
    }
  };
  A.Si0TypeDefPrimitive$deserializeJson_closure.prototype = {
    call$1(e) {
      return type$.PrimitiveTypes._as(e).name;
    },
    $signature: 392
  };
  A.Si1Field.prototype = {
    scaleJsonSerialize$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "type", _this.type, "typeName", _this.typeName, "docs", _this.docs], type$.String, type$.dynamic);
    },
    toJson$0() {
      return this.scaleJsonSerialize$0();
    }
  };
  A.Si1TypeDefHistoricMetaCompat.prototype = {
    scaleJsonSerialize$0() {
      return this.type;
    },
    get$typeName() {
      return B.Si1TypeDefsIndexesConst_HistoricMetaCompat;
    }
  };
  A.Si1Type.prototype = {
    scaleJsonSerialize$0() {
      var t4, _this = this,
        t1 = _this.params,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.Si1Type_scaleJsonSerialize_closure()), t3), t3._eval$1("ListIterable.E"));
      t2 = _this.def;
      t3 = type$.String;
      t4 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["path", _this.path, "params", t1, "def", A.LinkedHashMap_LinkedHashMap$_literal([t2.get$typeName().name, t2.scaleJsonSerialize$0()], t3, t4), "docs", _this.docs], t3, t4);
    }
  };
  A.Si1Type$deserializeJson_closure.prototype = {
    call$1(e) {
      type$.Map_String_dynamic._as(e);
      return new A.Si1TypeParameter(A._asString(e.$index(0, "name")), A._asIntQ(e.$index(0, "type")));
    },
    $signature: 393
  };
  A.Si1Type_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.Si1TypeParameter._as(e).scaleJsonSerialize$0();
    },
    $signature: 394
  };
  A.Si1TypeDefsIndexesConst.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.Si1TypeDefsIndexesConst))
        return false;
      return other.name === this.name;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.name);
    },
    toString$0(_) {
      return "Si1TypeDefsIndexesConst." + this.name;
    }
  };
  A.Si1TypeDefsIndexesConst_fromValue_closure.prototype = {
    call$1(element) {
      return type$.Si1TypeDefsIndexesConst._as(element).name === this.name;
    },
    $signature: 395
  };
  A.Si1TypeDefsIndexesConst_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.MetadataException$("No Si1Type found matching the specified name", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.Si1TypeDef.prototype = {};
  A.Si1TypeDefArray.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["len", this.len, "type", this.type], type$.String, type$.dynamic);
    },
    get$typeName() {
      return B.Si1TypeDefsIndexesConst_Array;
    }
  };
  A.Si1TypeDefBitSequence.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["bitStoreType", this.bitStoreType, "bitOrderType", this.bitOrderType], type$.String, type$.dynamic);
    },
    get$typeName() {
      return B.Si1TypeDefsIndexesConst_BitSequence;
    }
  };
  A.Si1TypeDefCompact.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type], type$.String, type$.dynamic);
    },
    get$typeName() {
      return B.Si1TypeDefsIndexesConst_Compact;
    }
  };
  A.Si1TypeDefComposite.prototype = {
    scaleJsonSerialize$0() {
      var t1 = this.fields,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.Si1TypeDefComposite_scaleJsonSerialize_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["fields", t1], type$.String, type$.dynamic);
    },
    get$typeName() {
      return B.Si1TypeDefsIndexesConst_Composite;
    },
    toJson$0() {
      return this.scaleJsonSerialize$0();
    },
    toString$0(_) {
      return "Si1TypeDefComposite" + this.scaleJsonSerialize$0().toString$0(0);
    }
  };
  A.Si1TypeDefComposite$deserializeJson_closure.prototype = {
    call$1(e) {
      return A.Si1Field$deserializeJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 71
  };
  A.Si1TypeDefComposite_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.Si1Field._as(e).scaleJsonSerialize$0();
    },
    $signature: 70
  };
  A.Si1TypeDefPrimitive.prototype = {
    get$typeName() {
      return B.Si1TypeDefsIndexesConst_Primitive;
    },
    $isSi1TypeDef: 1
  };
  A.Si1TypeDefSequence.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type], type$.String, type$.dynamic);
    },
    get$typeName() {
      return B.Si1TypeDefsIndexesConst_Sequence;
    }
  };
  A.Si1TypeDefTuple.prototype = {
    scaleJsonSerialize$0() {
      return this.values;
    },
    get$typeName() {
      return B.Si1TypeDefsIndexesConst_Tuple;
    }
  };
  A.Si1TypeDefVariant.prototype = {
    scaleJsonSerialize$0() {
      var t1 = this.variants,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.Si1TypeDefVariant_scaleJsonSerialize_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["variants", t1], type$.String, type$.dynamic);
    },
    get$typeName() {
      return B.Si1TypeDefsIndexesConst_Variant;
    },
    toJson$0() {
      return this.scaleJsonSerialize$0();
    },
    toString$0(_) {
      return "Si1TypeDefVariant" + this.scaleJsonSerialize$0().toString$0(0);
    }
  };
  A.Si1TypeDefVariant$deserializeJson_closure.prototype = {
    call$1(e) {
      return A.Si1Variant$deserializeJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 398
  };
  A.Si1TypeDefVariant_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.Si1Variant._as(e).scaleJsonSerialize$0();
    },
    $signature: 399
  };
  A.Si1TypeParameter.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name, "type", this.type], type$.String, type$.dynamic);
    }
  };
  A.Si1Variant.prototype = {
    scaleJsonSerialize$0() {
      var _this = this,
        t1 = _this.fields,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.Si1Variant_scaleJsonSerialize_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "fields", t1, "index", _this.index, "docs", _this.docs], type$.String, type$.dynamic);
    }
  };
  A.Si1Variant$deserializeJson_closure.prototype = {
    call$1(e) {
      return A.Si1Field$deserializeJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 71
  };
  A.Si1Variant_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.Si1Field._as(e).scaleJsonSerialize$0();
    },
    $signature: 70
  };
  A.StorageHasherV11Options.prototype = {};
  A.StorageHasherV11Options_fromValue_closure.prototype = {
    call$1(element) {
      return type$.StorageHasherV11Options._as(element).name === this.value;
    },
    $signature: 400
  };
  A.StorageHasherV11Options_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartSubstratePluginException$("No StorageHasherV11Optionss found matching the specified value", A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.StorageHasherV11.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal([this.option.name, null], type$.String, type$.dynamic);
    }
  };
  A.StorageHasherV14.prototype = {};
  A.StorageEntryModifierV14.prototype = {};
  A.ExtrinsicMetadataV14.prototype = {
    scaleJsonSerialize$0() {
      var t1 = this.signedExtensions,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.ExtrinsicMetadataV14_scaleJsonSerialize_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["signedExtensions", t1, "version", this.version, "type", this.type], type$.String, type$.dynamic);
    }
  };
  A.ExtrinsicMetadataV14$deserializeJson_closure.prototype = {
    call$1(e) {
      return A.SignedExtensionMetadataV14$deserializeJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 69
  };
  A.ExtrinsicMetadataV14_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.SignedExtensionMetadataV14._as(e).scaleJsonSerialize$0();
    },
    $signature: 169
  };
  A.MetadataV14.prototype = {
    scaleJsonSerialize$0() {
      var _this = this,
        t1 = _this.lookup.scaleJsonSerialize$0(),
        t2 = _this.pallets.get$values(),
        t3 = A._instanceType(t2);
      t3 = A.MappedIterable_MappedIterable(t2, t3._eval$1("Map<String,@>(Iterable.E)")._as(new A.MetadataV14_scaleJsonSerialize_closure()), t3._eval$1("Iterable.E"), type$.Map_String_dynamic);
      t2 = A.List_List$_of(t3, A._instanceType(t3)._eval$1("Iterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["lookup", t1, "pallets", t2, "extrinsic", _this.extrinsic.scaleJsonSerialize$0(), "type", _this.type], type$.String, type$.dynamic);
    }
  };
  A.MetadataV14$deserializeJson_closure.prototype = {
    call$1(e) {
      var decode = A.PalletMetadataV14$deserializeJson(type$.Map_String_dynamic._as(e));
      return new A.MapEntry(decode.index, decode, type$.MapEntry_dynamic_dynamic);
    },
    $signature: 168
  };
  A.MetadataV14_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.PalletMetadataV14._as(e).scaleJsonSerialize$0();
    },
    $signature: 404
  };
  A._MetadataV14_SubstrateMetadata_LatestMetadataInterface.prototype = {};
  A.PalletCallMetadata.prototype = {};
  A.PalletCallMetadataV14.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type], type$.String, type$.dynamic);
    }
  };
  A.PalletConstantMetadata.prototype = {};
  A.PalletConstantMetadataV14.prototype = {
    scaleJsonSerialize$0() {
      var _this = this;
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "type", _this.type, "value", _this.value, "docs", _this.docs], type$.String, type$.dynamic);
    }
  };
  A.PalletErrorMetadata.prototype = {};
  A.PalletErrorMetadataV14.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type], type$.String, type$.dynamic);
    }
  };
  A.PalletEventMetadata.prototype = {};
  A.PalletEventMetadataV14.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type], type$.String, type$.dynamic);
    }
  };
  A.PalletMetadataV14.prototype = {
    get$storage() {
      return this.storage;
    },
    get$calls() {
      return this.calls;
    },
    get$events() {
      return this.events;
    },
    get$constants() {
      return this.constants;
    },
    get$errors() {
      return this.errors;
    }
  };
  A.PalletMetadataV14$deserializeJson_closure.prototype = {
    call$1(e) {
      return A.PalletConstantMetadataV14$deserializeJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 170
  };
  A.PalletStorageMetadata.prototype = {};
  A.PalletStorageMetadataV14.prototype = {
    scaleJsonSerialize$0() {
      var t1 = this.items,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.PalletStorageMetadataV14_scaleJsonSerialize_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["prefix", this.prefix, "items", t1], type$.String, type$.dynamic);
    }
  };
  A.PalletStorageMetadataV14$deserializeJson_closure.prototype = {
    call$1(e) {
      return A.StorageEntryMetadataV14$deserializeJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 406
  };
  A.PalletStorageMetadataV14_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.StorageEntryMetadataV14._as(e).scaleJsonSerialize$0();
    },
    $signature: 407
  };
  A.PortableRegistryV14.prototype = {
    scaleJsonSerialize$0() {
      var t1 = this.types.get$values(),
        t2 = A._instanceType(t1);
      t2 = A.MappedIterable_MappedIterable(t1, t2._eval$1("Map<String,@>(Iterable.E)")._as(new A.PortableRegistryV14_scaleJsonSerialize_closure()), t2._eval$1("Iterable.E"), type$.Map_String_dynamic);
      t1 = A.List_List$_of(t2, A._instanceType(t2)._eval$1("Iterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["types", t1], type$.String, type$.dynamic);
    }
  };
  A.PortableRegistryV14$deserializeJson_closure.prototype = {
    call$1(e) {
      var t2,
        t1 = type$.Map_String_dynamic;
      t1._as(e);
      t1 = A.Si1Type$deserializeJson(t1._as(e.$index(0, "type")));
      t2 = A._asInt(e.$index(0, "id"));
      return new A.MapEntry(t2, new A.PortableTypeV14(t2, t1), type$.MapEntry_int_PortableTypeV14);
    },
    $signature: 408
  };
  A.PortableRegistryV14_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.PortableTypeV14._as(e).scaleJsonSerialize$0();
    },
    $signature: 409
  };
  A.PortableTypeV14.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["id", this.id, "type", this.type.scaleJsonSerialize$0()], type$.String, type$.dynamic);
    }
  };
  A.SignedExtensionMetadataV14.prototype = {
    scaleJsonSerialize$0() {
      var t1 = A.LinkedHashMap_LinkedHashMap$of(this.super$SignedExtensionMetadata$scaleJsonSerialize(null), type$.String, type$.dynamic);
      t1.$indexSet(0, "additionalSigned", this.additionalSigned);
      return t1;
    }
  };
  A.StorageEntryTypeV14.prototype = {};
  A.StorageEntryTypeV14Map.prototype = {
    get$typeName() {
      return "Map";
    },
    scaleJsonSerialize$0() {
      var t1 = this.hashers,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.StorageEntryTypeV14Map_scaleJsonSerialize_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["hashers", t1, "key", this.key, "value", this.value], type$.String, type$.dynamic);
    }
  };
  A.StorageEntryTypeV14Map$deserializeJson_closure.prototype = {
    call$1(e) {
      return new A.StorageHasherV14(A.StorageHasherV11Options_fromValue(A.SubstrateEnumSerializationUtils_getScaleEnumKey(type$.Map_String_dynamic._as(e), null, null)));
    },
    $signature: 410
  };
  A.StorageEntryTypeV14Map_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.StorageHasherV14._as(e).scaleJsonSerialize$0();
    },
    $signature: 411
  };
  A.StorageEntryTypeV14Plain.prototype = {
    get$typeName() {
      return "Plain";
    },
    scaleJsonSerialize$0() {
      return this.plain;
    }
  };
  A.StorageEntryMetadataV14.prototype = {
    scaleJsonSerialize$0() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        t3 = _this.type;
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "modifier", A.LinkedHashMap_LinkedHashMap$_literal([_this.modifier.name, null], t1, t2), "type", A.LinkedHashMap_LinkedHashMap$_literal([t3.get$typeName(), t3.scaleJsonSerialize$0()], t1, t2), "fallback", _this.fallback, "docs", _this.docs], t1, t2);
    }
  };
  A.CustomMetadata15.prototype = {
    scaleJsonSerialize$0() {
      var t3, t4, t5, t6,
        t1 = type$.String,
        t2 = A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Map_String_dynamic);
      for (t3 = this.map.get$entries(), t3 = t3.get$iterator(t3), t4 = type$.dynamic; t3.moveNext$0();) {
        t5 = t3.get$current();
        t6 = t5.key;
        t5 = t5.value;
        t2.$indexSet(0, t6, A.LinkedHashMap_LinkedHashMap$_literal(["type", t5.type, "value", t5.value], t1, t4));
      }
      return A.LinkedHashMap_LinkedHashMap$_literal(["map", t2], t1, t4);
    }
  };
  A.CustomValueMetadata15.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type, "value", this.value], type$.String, type$.dynamic);
    }
  };
  A.ExtrinsicMetadataV15.prototype = {
    scaleJsonSerialize$0() {
      var _this = this,
        t1 = _this.signedExtensions,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.ExtrinsicMetadataV15_scaleJsonSerialize_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["version", _this.version, "addressType", _this.addressType, "callType", _this.callType, "signatureType", _this.signatureType, "extraType", _this.extraType, "signedExtensions", t1], type$.String, type$.dynamic);
    }
  };
  A.ExtrinsicMetadataV15$deserializeJson_closure.prototype = {
    call$1(e) {
      return A.SignedExtensionMetadataV14$deserializeJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 69
  };
  A.ExtrinsicMetadataV15_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.SignedExtensionMetadataV14._as(e).scaleJsonSerialize$0();
    },
    $signature: 169
  };
  A.MetadataV15.prototype = {
    scaleJsonSerialize$0() {
      var t4, t5, t6, t7, _this = this,
        t1 = _this.lookup.scaleJsonSerialize$0(),
        t2 = _this.pallets.get$values(),
        t3 = A._instanceType(t2);
      t3 = A.MappedIterable_MappedIterable(t2, t3._eval$1("Map<String,@>(Iterable.E)")._as(new A.MetadataV15_scaleJsonSerialize_closure()), t3._eval$1("Iterable.E"), type$.Map_String_dynamic);
      t2 = A.List_List$_of(t3, A._instanceType(t3)._eval$1("Iterable.E"));
      t3 = _this.extrinsic.scaleJsonSerialize$0();
      t4 = _this.outerEnums.scaleJsonSerialize$0();
      t5 = _this.apis;
      t6 = A._arrayInstanceType(t5);
      t7 = t6._eval$1("MappedListIterable<1,Map<String,@>>");
      t5 = A.List_List$_of(new A.MappedListIterable(t5, t6._eval$1("Map<String,@>(1)")._as(new A.MetadataV15_scaleJsonSerialize_closure0()), t7), t7._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["lookup", t1, "pallets", t2, "extrinsic", t3, "type", _this.type, "outerEnums", t4, "apis", t5, "custom", _this.custom.scaleJsonSerialize$0()], type$.String, type$.dynamic);
    }
  };
  A.MetadataV15$deserializeJson_closure.prototype = {
    call$1(e) {
      var decode = A.PalletMetadataV15$deserializeJson(type$.Map_String_dynamic._as(e));
      return new A.MapEntry(decode.index, decode, type$.MapEntry_dynamic_dynamic);
    },
    $signature: 168
  };
  A.MetadataV15$deserializeJson_closure0.prototype = {
    call$1(e) {
      return A.RuntimeApiMetadataV15$deserializeJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 412
  };
  A.MetadataV15_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.PalletMetadataV15._as(e).scaleJsonSerialize$0();
    },
    $signature: 413
  };
  A.MetadataV15_scaleJsonSerialize_closure0.prototype = {
    call$1(e) {
      return type$.RuntimeApiMetadataV15._as(e).scaleJsonSerialize$0();
    },
    $signature: 414
  };
  A._MetadataV15_SubstrateMetadata_LatestMetadataInterface.prototype = {};
  A.OuterEnums15.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["callType", this.callType, "eventType", this.eventType, "errorType", this.errorType], type$.String, type$.dynamic);
    }
  };
  A.PalletMetadataV15.prototype = {
    scaleJsonSerialize$0() {
      var t1 = A.LinkedHashMap_LinkedHashMap$of(this.super$PalletMetadata$scaleJsonSerialize(null), type$.String, type$.dynamic),
        t2 = this.docs;
      t1.$indexSet(0, "docs", t2 == null ? A._setArrayType([], type$.JSArray_String) : t2);
      return t1;
    },
    get$storage() {
      return this.storage;
    },
    get$calls() {
      return this.calls;
    },
    get$events() {
      return this.events;
    },
    get$constants() {
      return this.constants;
    },
    get$errors() {
      return this.errors;
    }
  };
  A.PalletMetadataV15$deserializeJson_closure.prototype = {
    call$1(e) {
      return A.PalletConstantMetadataV14$deserializeJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 170
  };
  A.RuntimeApiMetadata.prototype = {
    scaleJsonSerialize$1$property(property) {
      var _this = this,
        t1 = _this.get$methods(),
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.RuntimeApiMetadata_scaleJsonSerialize_closure(_this)), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "methods", t1, "docs", _this.docs], type$.String, type$.dynamic);
    },
    scaleJsonSerialize$0() {
      return this.scaleJsonSerialize$1$property(null);
    }
  };
  A.RuntimeApiMetadata_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return A._instanceType(this.$this)._eval$1("RuntimeApiMetadata.0")._as(e).scaleJsonSerialize$0();
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("Map<String,@>(RuntimeApiMetadata.0)");
    }
  };
  A.RuntimeApiMetadataV15.prototype = {
    get$methods() {
      return this.methods;
    }
  };
  A.RuntimeApiMetadataV15$deserializeJson_closure.prototype = {
    call$1(e) {
      return A.RuntimeApiMethodMetadataV15$deserializeJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 415
  };
  A.RuntimeApiMethodMetadata.prototype = {
    scaleJsonSerialize$1$property(property) {
      var _this = this,
        t1 = _this.inputs,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.RuntimeApiMethodMetadata_scaleJsonSerialize_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "inputs", t1, "output", _this.output, "docs", _this.docs], type$.String, type$.dynamic);
    },
    scaleJsonSerialize$0() {
      return this.scaleJsonSerialize$1$property(null);
    }
  };
  A.RuntimeApiMethodMetadata$deserializeJson_closure.prototype = {
    call$1(e) {
      type$.Map_String_dynamic._as(e);
      return new A.RuntimeApiMethodParamMetadataV15(A._asString(e.$index(0, "name")), A._asInt(e.$index(0, "type")));
    },
    $signature: 416
  };
  A.RuntimeApiMethodMetadata_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.RuntimeApiMethodParamMetadataV15._as(e).scaleJsonSerialize$0();
    },
    $signature: 417
  };
  A.RuntimeApiMethodMetadataV15.prototype = {};
  A.RuntimeApiMethodParamMetadataV15.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name, "type", this.type], type$.String, type$.dynamic);
    }
  };
  A.DeprecationInfoTypes.prototype = {
    _enumToString$0() {
      return "DeprecationInfoTypes." + this._name;
    }
  };
  A.DeprecationInfoTypes_fromName_closure.prototype = {
    call$1(e) {
      return type$.DeprecationInfoTypes._as(e)._name === this.name;
    },
    $signature: 418
  };
  A.DeprecationInfoTypes_fromName_closure0.prototype = {
    call$0() {
      var t1 = type$.String;
      return A.throwExpression(A.DartSubstratePluginException$("MetadataDeprecationInfo type not found.", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name, "values", B.JSArray_methods.map$1$1(B.List_soA, new A.DeprecationInfoTypes_fromName__closure(), t1).join$1(0, ", ")], t1, type$.dynamic)));
    },
    $signature: 0
  };
  A.DeprecationInfoTypes_fromName__closure.prototype = {
    call$1(e) {
      return type$.DeprecationInfoTypes._as(e)._name;
    },
    $signature: 419
  };
  A.MetadataDeprecationInfo.prototype = {
    get$variantName() {
      return this.type._name;
    }
  };
  A.MetadataVariantsDeprecated.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["depecreatedVariants", this.depecreatedVariants.map$2$1(0, new A.MetadataVariantsDeprecated_scaleJsonSerialize_closure(), type$.int, type$.Map_String_dynamic)], type$.String, type$.dynamic);
    }
  };
  A.MetadataVariantsDeprecated_MetadataVariantsDeprecated$deserializeJson_closure.prototype = {
    call$2(k, v) {
      return new A.MapEntry(A._asInt(k), A.DeprecationStatus_DeprecationStatus$deserializeJson(type$.Map_String_dynamic._as(v)), type$.MapEntry_int_DeprecationStatus);
    },
    $signature: 420
  };
  A.MetadataVariantsDeprecated_scaleJsonSerialize_closure.prototype = {
    call$2(k, v) {
      A._asInt(k);
      type$.DeprecationStatus._as(v);
      return new A.MapEntry(k, A.LinkedHashMap_LinkedHashMap$_literal([v.get$variantName(), v.scaleJsonSerialize$0()], type$.String, type$.dynamic), type$.MapEntry_of_int_and_Map_String_dynamic);
    },
    $signature: 421
  };
  A.MetadataNotDeprecated.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
    }
  };
  A.MetadataItemDeprecated.prototype = {
    scaleJsonSerialize$0() {
      var t1 = this.status,
        t2 = type$.String,
        t3 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["status", A.LinkedHashMap_LinkedHashMap$_literal([t1.get$variantName(), t1.scaleJsonSerialize$0()], t2, t3)], t2, t3);
    }
  };
  A.DeprecationStatusTypes.prototype = {
    _enumToString$0() {
      return "DeprecationStatusTypes." + this._name;
    }
  };
  A.DeprecationStatusTypes_fromName_closure.prototype = {
    call$1(e) {
      return type$.DeprecationStatusTypes._as(e)._name === this.name;
    },
    $signature: 422
  };
  A.DeprecationStatusTypes_fromName_closure0.prototype = {
    call$0() {
      var t1 = type$.String;
      return A.throwExpression(A.DartSubstratePluginException$("DeprecationStatus type not found.", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name, "values", B.JSArray_methods.map$1$1(B.List_Jou, new A.DeprecationStatusTypes_fromName__closure(), t1).join$1(0, ", ")], t1, type$.dynamic)));
    },
    $signature: 0
  };
  A.DeprecationStatusTypes_fromName__closure.prototype = {
    call$1(e) {
      return type$.DeprecationStatusTypes._as(e)._name;
    },
    $signature: 423
  };
  A.DeprecationStatus.prototype = {
    get$variantName() {
      return this.type._name;
    }
  };
  A.MetadataStatusDeprecated.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["note", this.note, "since", this.since], type$.String, type$.dynamic);
    }
  };
  A.MetadataStatusNotDeprecated.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
    }
  };
  A.MetadataStatusDeprecatedWithoutNote.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic);
    }
  };
  A.ExtrinsicMetadataV16.prototype = {
    scaleJsonSerialize$0() {
      var _this = this,
        t1 = _this.transactionExtensions,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.ExtrinsicMetadataV16_scaleJsonSerialize_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["versions", _this.versions, "addressType", _this.addressType, "signatureType", _this.signatureType, "transaction_extensions", t1, "transaction_extensions_by_version", _this.transactionExtensionsByVersion], type$.String, type$.dynamic);
    }
  };
  A.ExtrinsicMetadataV16$deserializeJson_closure.prototype = {
    call$1(e) {
      type$.Map_String_dynamic._as(e);
      return new A.TransactionExtensionMetadata(A._asInt(e.$index(0, "implicit")), A._asString(e.$index(0, "identifier")), A._asInt(e.$index(0, "type")));
    },
    $signature: 424
  };
  A.ExtrinsicMetadataV16$deserializeJson_closure0.prototype = {
    call$2(k, v) {
      var t1 = type$.int;
      return new A.MapEntry(A._asInt(k), A.List_List$unmodifiable(J.cast$1$0$ax(type$.List_dynamic._as(v), t1), t1), type$.MapEntry_of_int_and_List_int);
    },
    $signature: 425
  };
  A.ExtrinsicMetadataV16_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.TransactionExtensionMetadata._as(e).scaleJsonSerialize$0();
    },
    $signature: 426
  };
  A.MetadataV16.prototype = {
    scaleJsonSerialize$0() {
      var t4, t5, t6, t7, _this = this,
        t1 = _this.lookup.scaleJsonSerialize$0(),
        t2 = _this.pallets.get$values(),
        t3 = A._instanceType(t2);
      t3 = A.MappedIterable_MappedIterable(t2, t3._eval$1("Map<String,@>(Iterable.E)")._as(new A.MetadataV16_scaleJsonSerialize_closure()), t3._eval$1("Iterable.E"), type$.Map_String_dynamic);
      t2 = A.List_List$_of(t3, A._instanceType(t3)._eval$1("Iterable.E"));
      t3 = _this.extrinsic.scaleJsonSerialize$0();
      t4 = _this.outerEnums.scaleJsonSerialize$0();
      t5 = _this.apis;
      t6 = A._arrayInstanceType(t5);
      t7 = t6._eval$1("MappedListIterable<1,Map<String,@>>");
      t5 = A.List_List$_of(new A.MappedListIterable(t5, t6._eval$1("Map<String,@>(1)")._as(new A.MetadataV16_scaleJsonSerialize_closure0()), t7), t7._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["lookup", t1, "pallets", t2, "extrinsic", t3, "outerEnums", t4, "apis", t5, "custom", _this.custom.scaleJsonSerialize$0()], type$.String, type$.dynamic);
    }
  };
  A.MetadataV16$deserializeJson_closure.prototype = {
    call$1(e) {
      var decode = A.PalletMetadataV16$deserializeJson(type$.Map_String_dynamic._as(e));
      return new A.MapEntry(decode.index, decode, type$.MapEntry_int_PalletMetadataV16);
    },
    $signature: 427
  };
  A.MetadataV16$deserializeJson_closure0.prototype = {
    call$1(e) {
      return A.RuntimeApiMetadataV16$deserializeJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 428
  };
  A.MetadataV16_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.PalletMetadataV16._as(e).scaleJsonSerialize$0();
    },
    $signature: 429
  };
  A.MetadataV16_scaleJsonSerialize_closure0.prototype = {
    call$1(e) {
      return type$.RuntimeApiMetadataV16._as(e).scaleJsonSerialize$0();
    },
    $signature: 430
  };
  A._MetadataV16_SubstrateMetadata_LatestMetadataInterface.prototype = {};
  A.PalletAssociatedTypeMetadata.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type, "name", this.name, "docs", this.docs], type$.String, type$.dynamic);
    }
  };
  A.PalletCallMetadataV16.prototype = {
    scaleJsonSerialize$0() {
      var t1 = this.deprecationInfo,
        t2 = type$.String,
        t3 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type, "deprecation_info", A.LinkedHashMap_LinkedHashMap$_literal([t1.get$variantName(), t1.scaleJsonSerialize$0()], t2, t3)], t2, t3);
    }
  };
  A.PalletConstantMetadataV16.prototype = {
    scaleJsonSerialize$0() {
      var _this = this,
        t1 = _this.deprecationInfo,
        t2 = type$.String,
        t3 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "type", _this.type, "value", _this.value, "docs", _this.docs, "deprecation_info", A.LinkedHashMap_LinkedHashMap$_literal([t1.get$variantName(), t1.scaleJsonSerialize$0()], t2, t3)], t2, t3);
    }
  };
  A.PalletErrorMetadataV16.prototype = {
    scaleJsonSerialize$0() {
      var t1 = this.deprecationInfo,
        t2 = type$.String,
        t3 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type, "deprecation_info", A.LinkedHashMap_LinkedHashMap$_literal([t1.get$variantName(), t1.scaleJsonSerialize$0()], t2, t3)], t2, t3);
    }
  };
  A.PalletEventMetadataV16.prototype = {
    scaleJsonSerialize$0() {
      var t1 = this.deprecationInfo,
        t2 = type$.String,
        t3 = type$.dynamic;
      return A.LinkedHashMap_LinkedHashMap$_literal(["type", this.type, "deprecation_info", A.LinkedHashMap_LinkedHashMap$_literal([t1.get$variantName(), t1.scaleJsonSerialize$0()], t2, t3)], t2, t3);
    }
  };
  A.PalletMetadataV16.prototype = {
    scaleJsonSerialize$0() {
      var t5, t6, _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        t3 = A.LinkedHashMap_LinkedHashMap$of(_this.super$PalletMetadata$scaleJsonSerialize(null), t1, t2),
        t4 = _this.docs;
      t3.$indexSet(0, "docs", t4 == null ? A._setArrayType([], type$.JSArray_String) : t4);
      t4 = _this.associatedTypes;
      t5 = A._arrayInstanceType(t4);
      t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
      t4 = A.List_List$_of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.PalletMetadataV16_scaleJsonSerialize_closure()), t6), t6._eval$1("ListIterable.E"));
      t3.$indexSet(0, "associated_types", t4);
      t4 = _this.deprecationInfo;
      t3.$indexSet(0, "deprecation_info", A.LinkedHashMap_LinkedHashMap$_literal([t4.get$variantName(), t4.scaleJsonSerialize$0()], t1, t2));
      return t3;
    },
    get$storage() {
      return this.storage;
    },
    get$calls() {
      return this.calls;
    },
    get$events() {
      return this.events;
    },
    get$errors() {
      return this.errors;
    },
    get$constants() {
      return this.constants;
    }
  };
  A.PalletMetadataV16$deserializeJson_closure.prototype = {
    call$1(e) {
      var t2, t3, t4, t5, t6, t7,
        t1 = type$.Map_String_dynamic;
      t1._as(e);
      t1 = A.DeprecationStatus_DeprecationStatus$deserializeJson(t1._as(e.$index(0, "deprecation_info")));
      t2 = A._asString(e.$index(0, "name"));
      t3 = A._asInt(e.$index(0, "type"));
      t4 = type$.List_dynamic;
      t5 = type$.int;
      t6 = J.cast$1$0$ax(t4._as(e.$index(0, "value")), t5);
      A.BytesUtils_validateListOfBytes(t6);
      t7 = type$.String;
      return new A.PalletConstantMetadataV16(t1, t2, t3, A.List_List$unmodifiable(t6, t5), A.List_List$unmodifiable(J.cast$1$0$ax(t4._as(e.$index(0, "docs")), t7), t7));
    },
    $signature: 431
  };
  A.PalletMetadataV16$deserializeJson_closure0.prototype = {
    call$1(e) {
      var t1;
      type$.Map_String_dynamic._as(e);
      t1 = type$.String;
      return new A.PalletAssociatedTypeMetadata(A._asString(e.$index(0, "name")), A._asInt(e.$index(0, "type")), A.List_List$unmodifiable(J.cast$1$0$ax(type$.List_dynamic._as(e.$index(0, "docs")), t1), t1));
    },
    $signature: 432
  };
  A.PalletMetadataV16_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.PalletAssociatedTypeMetadata._as(e).scaleJsonSerialize$0();
    },
    $signature: 433
  };
  A.RuntimeApiMetadataV16.prototype = {
    scaleJsonSerialize$0() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        t3 = A.LinkedHashMap_LinkedHashMap$of(this.super$RuntimeApiMetadata$scaleJsonSerialize(null), t1, t2),
        t4 = this.deprecationInfo;
      t3.$indexSet(0, "deprecation_info", A.LinkedHashMap_LinkedHashMap$_literal([t4.get$variantName(), t4.scaleJsonSerialize$0()], t1, t2));
      return t3;
    },
    get$methods() {
      return this.methods;
    }
  };
  A.RuntimeApiMetadataV16$deserializeJson_closure.prototype = {
    call$1(e) {
      return A.RuntimeApiMethodMetadataV16$deserializeJson(type$.Map_String_dynamic._as(e));
    },
    $signature: 434
  };
  A.RuntimeApiMethodMetadataV16.prototype = {
    scaleJsonSerialize$0() {
      var t1 = type$.String,
        t2 = type$.dynamic,
        t3 = A.LinkedHashMap_LinkedHashMap$of(this.super$RuntimeApiMethodMetadata$scaleJsonSerialize(null), t1, t2),
        t4 = this.deprecationInfo;
      t3.$indexSet(0, "deprecation_info", A.LinkedHashMap_LinkedHashMap$_literal([t4.get$variantName(), t4.scaleJsonSerialize$0()], t1, t2));
      return t3;
    }
  };
  A.StorageEntryMetadataV16.prototype = {
    scaleJsonSerialize$0() {
      var _this = this,
        t1 = type$.String,
        t2 = type$.dynamic,
        t3 = _this.type,
        t4 = _this.deprecationInfo;
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "modifier", A.LinkedHashMap_LinkedHashMap$_literal([_this.modifier.name, null], t1, t2), "type", A.LinkedHashMap_LinkedHashMap$_literal([t3.get$typeName(), t3.scaleJsonSerialize$0()], t1, t2), "fallback", _this.fallback, "docs", _this.docs, "deprecation_info", A.LinkedHashMap_LinkedHashMap$_literal([t4.get$variantName(), t4.scaleJsonSerialize$0()], t1, t2)], t1, t2);
    }
  };
  A.PalletStorageMetadataV16.prototype = {
    scaleJsonSerialize$0() {
      var t1 = this.items,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,Map<String,@>>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("Map<String,@>(1)")._as(new A.PalletStorageMetadataV16_scaleJsonSerialize_closure()), t3), t3._eval$1("ListIterable.E"));
      return A.LinkedHashMap_LinkedHashMap$_literal(["prefix", this.prefix, "items", t1], type$.String, type$.dynamic);
    }
  };
  A.PalletStorageMetadataV16$deserializeJson_closure.prototype = {
    call$1(e) {
      var t1 = type$.Map_String_dynamic;
      t1._as(e);
      return new A.StorageEntryMetadataV16(A.DeprecationStatus_DeprecationStatus$deserializeJson(t1._as(e.$index(0, "deprecation_info"))), A._asString(e.$index(0, "name")), new A.StorageEntryModifierV14(A.StorageEntryModifierV9_fromValue(A.SubstrateEnumSerializationUtils_getScaleEnumKey(t1._as(e.$index(0, "modifier")), null, null)).name), A.StorageEntryTypeV14_StorageEntryTypeV14$deserializeJson(t1._as(e.$index(0, "type")), type$.dynamic), A.BytesUtils_toBytes(type$.Iterable_int._as(e.$index(0, "fallback")), true), A.List_List$unmodifiable(type$.Iterable_dynamic._as(e.$index(0, "docs")), type$.String));
    },
    $signature: 435
  };
  A.PalletStorageMetadataV16_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return type$.StorageEntryMetadataV16._as(e).scaleJsonSerialize$0();
    },
    $signature: 436
  };
  A.TransactionExtensionMetadata.prototype = {
    scaleJsonSerialize$0() {
      var t1 = A.LinkedHashMap_LinkedHashMap$of(this.super$SignedExtensionMetadata$scaleJsonSerialize(null), type$.String, type$.dynamic);
      t1.$indexSet(0, "implicit", this.implicit);
      return t1;
    }
  };
  A.StorageEntryModifierV9.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal([this.name, null], type$.String, type$.dynamic);
    },
    toString$0(_) {
      return "StorageEntryModifierV9Options." + this.name;
    }
  };
  A.StorageEntryModifierV9_fromValue_closure.prototype = {
    call$1(element) {
      return type$.StorageEntryModifierV9._as(element).name === this.value;
    },
    $signature: 437
  };
  A.StorageEntryModifierV9_fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.DartSubstratePluginException$("No StorageEntryModifierV9 found matching the specified value", A.LinkedHashMap_LinkedHashMap$_literal(["value", this.value], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.ExtrinsicMetadata.prototype = {};
  A.SignedExtensionMetadata.prototype = {
    scaleJsonSerialize$1$property(property) {
      return A.LinkedHashMap_LinkedHashMap$_literal(["identifier", this.identifier, "type", this.type], type$.String, type$.dynamic);
    },
    scaleJsonSerialize$0() {
      return this.scaleJsonSerialize$1$property(null);
    }
  };
  A.PalletMetadata.prototype = {
    scaleJsonSerialize$1$property(property) {
      var t2, t3, t4, t5, t6, _this = this, _null = null,
        t1 = _this.get$storage();
      t1 = t1 == null ? _null : t1.scaleJsonSerialize$0();
      t2 = _this.get$calls();
      t2 = t2 == null ? _null : t2.scaleJsonSerialize$0();
      t3 = _this.get$events();
      t3 = t3 == null ? _null : t3.scaleJsonSerialize$0();
      t4 = _this.get$constants();
      t5 = A._arrayInstanceType(t4);
      t6 = t5._eval$1("MappedListIterable<1,Map<String,@>>");
      t4 = A.List_List$_of(new A.MappedListIterable(t4, t5._eval$1("Map<String,@>(1)")._as(new A.PalletMetadata_scaleJsonSerialize_closure(_this)), t6), t6._eval$1("ListIterable.E"));
      t5 = _this.get$errors();
      t5 = t5 == null ? _null : t5.scaleJsonSerialize$0();
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", _this.name, "storage", t1, "calls", t2, "events", t3, "constants", t4, "errors", t5, "index", _this.index], type$.String, type$.dynamic);
    },
    scaleJsonSerialize$0() {
      return this.scaleJsonSerialize$1$property(null);
    }
  };
  A.PalletMetadata_scaleJsonSerialize_closure.prototype = {
    call$1(e) {
      return A._instanceType(this.$this)._eval$1("PalletMetadata.3")._as(e).scaleJsonSerialize$0();
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("Map<String,@>(PalletMetadata.3)");
    }
  };
  A.VersionedMetadata.prototype = {
    scaleJsonSerialize$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["version", this.version, "metadata", this.metadata.scaleJsonSerialize$0(), "magicNumber", this.magicNumber], type$.String, type$.dynamic);
    }
  };
  A.SubstrateSerialization.prototype = {
    toString$0(_) {
      return A.getRuntimeTypeOfDartObject(this).toString$0(0) + A.S(this.scaleJsonSerialize$0());
    }
  };
  A.SubstrateVariantDecodeResult.prototype = {
    toString$0(_) {
      var t1 = this.result;
      return A._asString(t1.$index(0, "key")) + ": " + type$.Map_String_dynamic._as(t1.$index(0, "value")).toString$0(0);
    }
  };
  A.SubstrateVariantSerialization.prototype = {};
  A.SourceFile.prototype = {
    get$length(_) {
      return this._decodedChars.length;
    },
    get$lines() {
      return this._lineStarts.length;
    },
    SourceFile$decoded$2$url(decodedChars, url) {
      var t1, t2, t3, i, c, j, t4;
      for (t1 = this._decodedChars, t2 = t1.length, t3 = this._lineStarts, i = 0; i < t2; ++i) {
        c = t1[i];
        if (c === 13) {
          j = i + 1;
          if (j < t2) {
            if (!(j < t2))
              return A.ioore(t1, j);
            t4 = t1[j] !== 10;
          } else
            t4 = true;
          if (t4)
            c = 10;
        }
        if (c === 10)
          B.JSArray_methods.add$1(t3, i + 1);
      }
    },
    getLine$1(offset) {
      var t1, _this = this;
      if (offset < 0)
        throw A.wrapException(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw A.wrapException(A.RangeError$("Offset " + offset + string$.x20must_ + _this.get$length(0) + "."));
      t1 = _this._lineStarts;
      if (offset < B.JSArray_methods.get$first(t1))
        return -1;
      if (offset >= B.JSArray_methods.get$last(t1))
        return t1.length - 1;
      if (_this._isNearCachedLine$1(offset)) {
        t1 = _this._cachedLine;
        t1.toString;
        return t1;
      }
      return _this._cachedLine = _this._binarySearch$1(offset) - 1;
    },
    _isNearCachedLine$1(offset) {
      var t2, t3, t4,
        t1 = this._cachedLine;
      if (t1 == null)
        return false;
      t2 = this._lineStarts;
      t3 = t2.length;
      if (t1 >>> 0 !== t1 || t1 >= t3)
        return A.ioore(t2, t1);
      if (offset < t2[t1])
        return false;
      if (!(t1 >= t3 - 1)) {
        t4 = t1 + 1;
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t4 = offset < t2[t4];
      } else
        t4 = true;
      if (t4)
        return true;
      if (!(t1 >= t3 - 2)) {
        t4 = t1 + 2;
        if (!(t4 < t3))
          return A.ioore(t2, t4);
        t4 = offset < t2[t4];
        t2 = t4;
      } else
        t2 = true;
      if (t2) {
        this._cachedLine = t1 + 1;
        return true;
      }
      return false;
    },
    _binarySearch$1(offset) {
      var min, half,
        t1 = this._lineStarts,
        t2 = t1.length,
        max = t2 - 1;
      for (min = 0; min < max;) {
        half = min + B.JSInt_methods._tdivFast$1(max - min, 2);
        if (!(half >= 0 && half < t2))
          return A.ioore(t1, half);
        if (t1[half] > offset)
          max = half;
        else
          min = half + 1;
      }
      return max;
    },
    getColumn$1(offset) {
      var line, t1, lineStart, _this = this;
      if (offset < 0)
        throw A.wrapException(A.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw A.wrapException(A.RangeError$("Offset " + offset + " must be not be greater than the number of characters in the file, " + _this.get$length(0) + "."));
      line = _this.getLine$1(offset);
      t1 = _this._lineStarts;
      if (!(line >= 0 && line < t1.length))
        return A.ioore(t1, line);
      lineStart = t1[line];
      if (lineStart > offset)
        throw A.wrapException(A.RangeError$("Line " + line + " comes after offset " + offset + "."));
      return offset - lineStart;
    },
    getOffset$1(line) {
      var t1, t2, result, t3;
      if (line < 0)
        throw A.wrapException(A.RangeError$("Line may not be negative, was " + line + "."));
      else {
        t1 = this._lineStarts;
        t2 = t1.length;
        if (line >= t2)
          throw A.wrapException(A.RangeError$("Line " + line + " must be less than the number of lines in the file, " + this.get$lines() + "."));
      }
      result = t1[line];
      if (result <= this._decodedChars.length) {
        t3 = line + 1;
        t1 = t3 < t2 && result >= t1[t3];
      } else
        t1 = true;
      if (t1)
        throw A.wrapException(A.RangeError$("Line " + line + " doesn't have 0 columns."));
      return result;
    }
  };
  A.FileLocation.prototype = {
    get$sourceUrl() {
      return this.file.url;
    },
    get$line() {
      return this.file.getLine$1(this.offset);
    },
    get$column() {
      return this.file.getColumn$1(this.offset);
    },
    get$offset() {
      return this.offset;
    }
  };
  A._FileSpan.prototype = {
    get$sourceUrl() {
      return this.file.url;
    },
    get$length(_) {
      return this._end - this._file$_start;
    },
    get$start() {
      return A.FileLocation$_(this.file, this._file$_start);
    },
    get$end() {
      return A.FileLocation$_(this.file, this._end);
    },
    get$text() {
      return A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(this.file._decodedChars, this._file$_start, this._end), 0, null);
    },
    get$context() {
      var _this = this,
        t1 = _this.file,
        endOffset = _this._end,
        endLine = t1.getLine$1(endOffset);
      if (t1.getColumn$1(endOffset) === 0 && endLine !== 0) {
        if (endOffset - _this._file$_start === 0)
          return endLine === t1._lineStarts.length - 1 ? "" : A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(endLine), t1.getOffset$1(endLine + 1)), 0, null);
      } else
        endOffset = endLine === t1._lineStarts.length - 1 ? t1._decodedChars.length : t1.getOffset$1(endLine + 1);
      return A.String_String$fromCharCodes(B.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(t1.getLine$1(_this._file$_start)), endOffset), 0, null);
    },
    compareTo$1(_, other) {
      var result;
      type$.SourceSpan._as(other);
      if (!(other instanceof A._FileSpan))
        return this.super$SourceSpanMixin$compareTo(0, other);
      result = B.JSInt_methods.compareTo$1(this._file$_start, other._file$_start);
      return result === 0 ? B.JSInt_methods.compareTo$1(this._end, other._end) : result;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!(other instanceof A._FileSpan))
        return _this.super$SourceSpanMixin$$eq(0, other);
      return _this._file$_start === other._file$_start && _this._end === other._end && J.$eq$(_this.file.url, other.file.url);
    },
    get$hashCode(_) {
      return A.Object_hash(this._file$_start, this._end, this.file.url, B.C_SentinelValue);
    },
    $isSourceSpanWithContext: 1
  };
  A.Highlighter.prototype = {
    highlight$0() {
      var t2, highlightsByColumn, t3, t4, i, line, lastLine, t5, t6, t7, t8, t9, t10, t11, index, primaryIdx, primary, _i, _this = this, _null = null,
        t1 = _this._lines;
      _this._writeFileStart$1(B.JSArray_methods.get$first(t1).url);
      t2 = _this._maxMultilineSpans;
      highlightsByColumn = A.List_List$filled(t2, _null, false, type$.nullable__Highlight);
      for (t3 = _this._highlighter$_buffer, t2 = t2 !== 0, t4 = _this._primaryColor, i = 0; i < t1.length; ++i) {
        line = t1[i];
        if (i > 0) {
          lastLine = t1[i - 1];
          t5 = line.url;
          if (!J.$eq$(lastLine.url, t5)) {
            _this._writeSidebar$1$end("\u2575");
            t3._contents += "\n";
            _this._writeFileStart$1(t5);
          } else if (lastLine.number + 1 !== line.number) {
            _this._writeSidebar$1$text("...");
            t3._contents += "\n";
          }
        }
        for (t5 = line.highlights, t6 = A._arrayInstanceType(t5)._eval$1("ReversedListIterable<1>"), t7 = new A.ReversedListIterable(t5, t6), t7 = new A.ListIterator(t7, t7.get$length(0), t6._eval$1("ListIterator<ListIterable.E>")), t6 = t6._eval$1("ListIterable.E"), t8 = line.number, t9 = line.text; t7.moveNext$0();) {
          t10 = t7.__internal$_current;
          if (t10 == null)
            t10 = t6._as(t10);
          t11 = t10.span;
          if (t11.get$start().get$line() !== t11.get$end().get$line() && t11.get$start().get$line() === t8 && _this._isOnlyWhitespace$1(B.JSString_methods.substring$2(t9, 0, t11.get$start().get$column()))) {
            index = B.JSArray_methods.indexOf$1(highlightsByColumn, _null);
            if (index < 0)
              A.throwExpression(A.ArgumentError$(A.S(highlightsByColumn) + " contains no null elements.", _null));
            B.JSArray_methods.$indexSet(highlightsByColumn, index, t10);
          }
        }
        _this._writeSidebar$1$line(t8);
        t3._contents += " ";
        _this._writeMultilineHighlights$2(line, highlightsByColumn);
        if (t2)
          t3._contents += " ";
        primaryIdx = B.JSArray_methods.indexWhere$1(t5, new A.Highlighter_highlight_closure());
        if (primaryIdx === -1)
          primary = _null;
        else {
          if (!(primaryIdx >= 0 && primaryIdx < t5.length))
            return A.ioore(t5, primaryIdx);
          primary = t5[primaryIdx];
        }
        t6 = primary != null;
        if (t6) {
          t7 = primary.span;
          t10 = t7.get$start().get$line() === t8 ? t7.get$start().get$column() : 0;
          _this._writeHighlightedText$4$color(t9, t10, t7.get$end().get$line() === t8 ? t7.get$end().get$column() : t9.length, t4);
        } else
          _this._writeText$1(t9);
        t3._contents += "\n";
        if (t6)
          _this._writeIndicator$3(line, primary, highlightsByColumn);
        for (t5 = t5.length, _i = 0; _i < t5; ++_i)
          continue;
      }
      _this._writeSidebar$1$end("\u2575");
      t1 = t3._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _writeFileStart$1(url) {
      var t1, t2, _this = this;
      if (!_this._multipleFiles || !type$.Uri._is(url))
        _this._writeSidebar$1$end("\u2577");
      else {
        _this._writeSidebar$1$end("\u250c");
        _this._colorize$1$2$color(new A.Highlighter__writeFileStart_closure(_this), "\x1b[34m", type$.void);
        t1 = _this._highlighter$_buffer;
        t2 = " " + $.$get$context().prettyUri$1(url);
        t1._contents += t2;
      }
      _this._highlighter$_buffer._contents += "\n";
    },
    _writeMultilineHighlights$3$current(line, highlightsByColumn, current) {
      var t1, currentColor, t2, t3, t4, t5, t6, foundCurrent, _i, highlight, t7, startLine, endLine, _this = this, _box_0 = {};
      type$.List_nullable__Highlight._as(highlightsByColumn);
      _box_0.openedOnThisLine = false;
      _box_0.openedOnThisLineColor = null;
      t1 = current == null;
      if (t1)
        currentColor = null;
      else
        currentColor = _this._primaryColor;
      for (t2 = highlightsByColumn.length, t3 = type$.Null, t4 = _this._primaryColor, t1 = !t1, t5 = _this._highlighter$_buffer, t6 = type$.void, foundCurrent = false, _i = 0; _i < t2; ++_i) {
        highlight = highlightsByColumn[_i];
        t7 = highlight == null;
        startLine = t7 ? null : highlight.span.get$start().get$line();
        endLine = t7 ? null : highlight.span.get$end().get$line();
        if (t1 && highlight === current) {
          _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure(_this, startLine, line), currentColor, t3);
          foundCurrent = true;
        } else if (foundCurrent)
          _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure0(_this, highlight), currentColor, t3);
        else if (t7)
          if (_box_0.openedOnThisLine)
            _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure1(_this), _box_0.openedOnThisLineColor, t6);
          else
            t5._contents += " ";
        else
          _this._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights_closure2(_box_0, _this, current, startLine, line, highlight, endLine), t4, t3);
      }
    },
    _writeMultilineHighlights$2(line, highlightsByColumn) {
      return this._writeMultilineHighlights$3$current(line, highlightsByColumn, null);
    },
    _writeHighlightedText$4$color(text, startColumn, endColumn, color) {
      var _this = this;
      _this._writeText$1(B.JSString_methods.substring$2(text, 0, startColumn));
      _this._colorize$1$2$color(new A.Highlighter__writeHighlightedText_closure(_this, text, startColumn, endColumn), color, type$.void);
      _this._writeText$1(B.JSString_methods.substring$2(text, endColumn, text.length));
    },
    _writeIndicator$3(line, highlight, highlightsByColumn) {
      var color, t1, t2, _this = this;
      type$.List_nullable__Highlight._as(highlightsByColumn);
      color = _this._primaryColor;
      t1 = highlight.span;
      if (t1.get$start().get$line() === t1.get$end().get$line()) {
        _this._writeSidebar$0();
        t1 = _this._highlighter$_buffer;
        t1._contents += " ";
        _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
        if (highlightsByColumn.length !== 0)
          t1._contents += " ";
        _this._writeLabel$3(highlight, highlightsByColumn, _this._colorize$1$2$color(new A.Highlighter__writeIndicator_closure(_this, line, highlight), color, type$.int));
      } else {
        t2 = line.number;
        if (t1.get$start().get$line() === t2) {
          if (B.JSArray_methods.contains$1(highlightsByColumn, highlight))
            return;
          A.replaceFirstNull(highlightsByColumn, highlight, type$._Highlight);
          _this._writeSidebar$0();
          t1 = _this._highlighter$_buffer;
          t1._contents += " ";
          _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
          _this._colorize$1$2$color(new A.Highlighter__writeIndicator_closure0(_this, line, highlight), color, type$.void);
          t1._contents += "\n";
        } else if (t1.get$end().get$line() === t2) {
          t1 = t1.get$end().get$column();
          if (t1 === line.text.length) {
            A.replaceWithNull(highlightsByColumn, highlight, type$._Highlight);
            return;
          }
          _this._writeSidebar$0();
          _this._highlighter$_buffer._contents += " ";
          _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
          _this._writeLabel$3(highlight, highlightsByColumn, _this._colorize$1$2$color(new A.Highlighter__writeIndicator_closure1(_this, false, line, highlight), color, type$.int));
          A.replaceWithNull(highlightsByColumn, highlight, type$._Highlight);
        }
      }
    },
    _writeArrow$3$beginning(line, column, beginning) {
      var t1 = beginning ? 0 : 1,
        t2 = this._highlighter$_buffer;
      t1 = B.JSString_methods.$mul("\u2500", 1 + column + this._countTabs$1(B.JSString_methods.substring$2(line.text, 0, column + t1)) * 3);
      t2._contents = (t2._contents += t1) + "^";
    },
    _writeArrow$2(line, column) {
      return this._writeArrow$3$beginning(line, column, true);
    },
    _writeLabel$3(highlight, highlightsByColumn, underlineLength) {
      type$.List_nullable__Highlight._as(highlightsByColumn);
      this._highlighter$_buffer._contents += "\n";
      return;
    },
    _writeText$1(text) {
      var t1, t2, t3, t4;
      for (t1 = new A.CodeUnits(text), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListBase.E>")), t3 = this._highlighter$_buffer, t2 = t2._eval$1("ListBase.E"); t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        if (t4 == null)
          t4 = t2._as(t4);
        if (t4 === 9) {
          t4 = B.JSString_methods.$mul(" ", 4);
          t3._contents += t4;
        } else {
          t4 = A.Primitives_stringFromCharCode(t4);
          t3._contents += t4;
        }
      }
    },
    _writeSidebar$3$end$line$text(end, line, text) {
      var t1 = {};
      t1.text = text;
      if (line != null)
        t1.text = B.JSInt_methods.toString$0(line + 1);
      this._colorize$1$2$color(new A.Highlighter__writeSidebar_closure(t1, this, end), "\x1b[34m", type$.Null);
    },
    _writeSidebar$1$end(end) {
      return this._writeSidebar$3$end$line$text(end, null, null);
    },
    _writeSidebar$1$text(text) {
      return this._writeSidebar$3$end$line$text(null, null, text);
    },
    _writeSidebar$1$line(line) {
      return this._writeSidebar$3$end$line$text(null, line, null);
    },
    _writeSidebar$0() {
      return this._writeSidebar$3$end$line$text(null, null, null);
    },
    _countTabs$1(text) {
      var t1, t2, count, t3;
      for (t1 = new A.CodeUnits(text), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListBase.E>")), t2 = t2._eval$1("ListBase.E"), count = 0; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if ((t3 == null ? t2._as(t3) : t3) === 9)
          ++count;
      }
      return count;
    },
    _isOnlyWhitespace$1(text) {
      var t1, t2, t3;
      for (t1 = new A.CodeUnits(text), t2 = type$.CodeUnits, t1 = new A.ListIterator(t1, t1.get$length(0), t2._eval$1("ListIterator<ListBase.E>")), t2 = t2._eval$1("ListBase.E"); t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 == null)
          t3 = t2._as(t3);
        if (t3 !== 32 && t3 !== 9)
          return false;
      }
      return true;
    },
    _colorize$1$2$color(callback, color, $T) {
      var t1, result;
      $T._eval$1("0()")._as(callback);
      t1 = this._primaryColor != null;
      if (t1 && color != null)
        this._highlighter$_buffer._contents += color;
      result = callback.call$0();
      if (t1 && color != null)
        this._highlighter$_buffer._contents += "\x1b[0m";
      return result;
    }
  };
  A.Highlighter_closure.prototype = {
    call$0() {
      return this.color;
    },
    $signature: 438
  };
  A.Highlighter$__closure.prototype = {
    call$1(line) {
      var t1 = type$._Line._as(line).highlights,
        t2 = A._arrayInstanceType(t1);
      return new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.Highlighter$___closure()), t2._eval$1("WhereIterable<1>")).get$length(0);
    },
    $signature: 439
  };
  A.Highlighter$___closure.prototype = {
    call$1(highlight) {
      var t1 = type$._Highlight._as(highlight).span;
      return t1.get$start().get$line() !== t1.get$end().get$line();
    },
    $signature: 55
  };
  A.Highlighter$__closure0.prototype = {
    call$1(line) {
      return type$._Line._as(line).url;
    },
    $signature: 441
  };
  A.Highlighter__collateLines_closure.prototype = {
    call$1(highlight) {
      var t1 = type$._Highlight._as(highlight).span.get$sourceUrl();
      return t1 == null ? new A.Object() : t1;
    },
    $signature: 442
  };
  A.Highlighter__collateLines_closure0.prototype = {
    call$2(highlight1, highlight2) {
      var t1 = type$._Highlight;
      return t1._as(highlight1).span.compareTo$1(0, t1._as(highlight2).span);
    },
    $signature: 443
  };
  A.Highlighter__collateLines_closure1.prototype = {
    call$1(entry) {
      var url, highlightsForFile, lines, t1, t2, t3, t4, context, t5, linesBeforeSpan, lineNumber, _i, line, activeHighlights, flags, highlightIndex, oldHighlightLength, t6, t7;
      type$.MapEntry_of_Object_and_List__Highlight._as(entry);
      url = entry.key;
      highlightsForFile = entry.value;
      lines = A._setArrayType([], type$.JSArray__Line);
      for (t1 = J.getInterceptor$ax(highlightsForFile), t2 = t1.get$iterator(highlightsForFile), t3 = type$.JSArray__Highlight; t2.moveNext$0();) {
        t4 = t2.get$current().span;
        context = t4.get$context();
        t5 = A.findLineStart(context, t4.get$text(), t4.get$start().get$column());
        t5.toString;
        linesBeforeSpan = B.JSString_methods.allMatches$1("\n", B.JSString_methods.substring$2(context, 0, t5)).get$length(0);
        lineNumber = t4.get$start().get$line() - linesBeforeSpan;
        for (t4 = context.split("\n"), t5 = t4.length, _i = 0; _i < t5; ++_i) {
          line = t4[_i];
          if (lines.length === 0 || lineNumber > B.JSArray_methods.get$last(lines).number)
            B.JSArray_methods.add$1(lines, new A._Line(line, lineNumber, url, A._setArrayType([], t3)));
          ++lineNumber;
        }
      }
      activeHighlights = A._setArrayType([], t3);
      for (t2 = lines.length, t3 = type$.bool_Function__Highlight, flags = activeHighlights.$flags | 0, highlightIndex = 0, _i = 0; _i < lines.length; lines.length === t2 || (0, A.throwConcurrentModificationError)(lines), ++_i) {
        line = lines[_i];
        t4 = t3._as(new A.Highlighter__collateLines__closure(line));
        flags & 1 && A.throwUnsupportedOperation(activeHighlights, 16);
        B.JSArray_methods._removeWhere$2(activeHighlights, t4, true);
        oldHighlightLength = activeHighlights.length;
        for (t4 = t1.skip$1(highlightsForFile, highlightIndex), t5 = t4.$ti, t4 = new A.ListIterator(t4, t4.get$length(0), t5._eval$1("ListIterator<ListIterable.E>")), t6 = line.number, t5 = t5._eval$1("ListIterable.E"); t4.moveNext$0();) {
          t7 = t4.__internal$_current;
          if (t7 == null)
            t7 = t5._as(t7);
          if (t7.span.get$start().get$line() > t6)
            break;
          B.JSArray_methods.add$1(activeHighlights, t7);
        }
        highlightIndex += activeHighlights.length - oldHighlightLength;
        B.JSArray_methods.addAll$1(line.highlights, activeHighlights);
      }
      return lines;
    },
    $signature: 444
  };
  A.Highlighter__collateLines__closure.prototype = {
    call$1(highlight) {
      return type$._Highlight._as(highlight).span.get$end().get$line() < this.line.number;
    },
    $signature: 55
  };
  A.Highlighter_highlight_closure.prototype = {
    call$1(highlight) {
      type$._Highlight._as(highlight);
      return true;
    },
    $signature: 55
  };
  A.Highlighter__writeFileStart_closure.prototype = {
    call$0() {
      var t1 = this.$this._highlighter$_buffer,
        t2 = B.JSString_methods.$mul("\u2500", 2) + ">";
      t1._contents += t2;
      return null;
    },
    $signature: 1
  };
  A.Highlighter__writeMultilineHighlights_closure.prototype = {
    call$0() {
      var t1 = this.$this._highlighter$_buffer,
        t2 = this.startLine === this.line.number ? "\u250c" : "\u2514";
      t1._contents += t2;
    },
    $signature: 10
  };
  A.Highlighter__writeMultilineHighlights_closure0.prototype = {
    call$0() {
      var t1 = this.$this._highlighter$_buffer,
        t2 = this.highlight == null ? "\u2500" : "\u253c";
      t1._contents += t2;
    },
    $signature: 10
  };
  A.Highlighter__writeMultilineHighlights_closure1.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += "\u2500";
      return null;
    },
    $signature: 1
  };
  A.Highlighter__writeMultilineHighlights_closure2.prototype = {
    call$0() {
      var t2, t3, _this = this,
        t1 = _this._box_0,
        vertical = t1.openedOnThisLine ? "\u253c" : "\u2502";
      if (_this.current != null)
        _this.$this._highlighter$_buffer._contents += vertical;
      else {
        t2 = _this.line;
        t3 = t2.number;
        if (_this.startLine === t3) {
          t2 = _this.$this;
          t2._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights__closure(t1, t2), t1.openedOnThisLineColor, type$.Null);
          t1.openedOnThisLine = true;
          if (t1.openedOnThisLineColor == null)
            t1.openedOnThisLineColor = t2._primaryColor;
        } else {
          t2 = _this.endLine === t3 && _this.highlight.span.get$end().get$column() === t2.text.length;
          t3 = _this.$this;
          if (t2)
            t3._highlighter$_buffer._contents += "\u2514";
          else
            t3._colorize$1$2$color(new A.Highlighter__writeMultilineHighlights__closure0(t3, vertical), t1.openedOnThisLineColor, type$.Null);
        }
      }
    },
    $signature: 10
  };
  A.Highlighter__writeMultilineHighlights__closure.prototype = {
    call$0() {
      var t1 = this.$this._highlighter$_buffer,
        t2 = this._box_0.openedOnThisLine ? "\u252c" : "\u250c";
      t1._contents += t2;
    },
    $signature: 10
  };
  A.Highlighter__writeMultilineHighlights__closure0.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += this.vertical;
    },
    $signature: 10
  };
  A.Highlighter__writeHighlightedText_closure.prototype = {
    call$0() {
      var _this = this;
      return _this.$this._writeText$1(B.JSString_methods.substring$2(_this.text, _this.startColumn, _this.endColumn));
    },
    $signature: 1
  };
  A.Highlighter__writeIndicator_closure.prototype = {
    call$0() {
      var tabsBefore, tabsInside,
        t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = t2._contents,
        t4 = this.highlight.span,
        startColumn = t4.get$start().get$column(),
        endColumn = t4.get$end().get$column();
      t4 = this.line.text;
      tabsBefore = t1._countTabs$1(B.JSString_methods.substring$2(t4, 0, startColumn));
      tabsInside = t1._countTabs$1(B.JSString_methods.substring$2(t4, startColumn, endColumn));
      startColumn += tabsBefore * 3;
      t4 = B.JSString_methods.$mul(" ", startColumn);
      t2._contents += t4;
      t4 = B.JSString_methods.$mul("^", Math.max(endColumn + (tabsBefore + tabsInside) * 3 - startColumn, 1));
      return (t2._contents += t4).length - t3.length;
    },
    $signature: 60
  };
  A.Highlighter__writeIndicator_closure0.prototype = {
    call$0() {
      return this.$this._writeArrow$2(this.line, this.highlight.span.get$start().get$column());
    },
    $signature: 1
  };
  A.Highlighter__writeIndicator_closure1.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = t2._contents;
      if (_this.coversWholeLine) {
        t1 = B.JSString_methods.$mul("\u2500", 3);
        t2._contents += t1;
      } else
        t1._writeArrow$3$beginning(_this.line, Math.max(_this.highlight.span.get$end().get$column() - 1, 0), false);
      return t2._contents.length - t3.length;
    },
    $signature: 60
  };
  A.Highlighter__writeSidebar_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = this._box_0.text;
      if (t3 == null)
        t3 = "";
      t1 = B.JSString_methods.padRight$1(t3, t1._paddingBeforeSidebar);
      t1 = t2._contents += t1;
      t3 = this.end;
      t2._contents = t1 + (t3 == null ? "\u2502" : t3);
    },
    $signature: 10
  };
  A._Highlight.prototype = {
    toString$0(_) {
      var t1 = this.span;
      t1 = "" + "primary " + ("" + t1.get$start().get$line() + ":" + t1.get$start().get$column() + "-" + t1.get$end().get$line() + ":" + t1.get$end().get$column());
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A._Highlight_closure.prototype = {
    call$0() {
      var t1, t2, t3, t4,
        newSpan = this.span;
      if (!(type$.SourceSpanWithContext._is(newSpan) && A.findLineStart(newSpan.get$context(), newSpan.get$text(), newSpan.get$start().get$column()) != null)) {
        t1 = A.SourceLocation$(newSpan.get$start().get$offset(), 0, 0, newSpan.get$sourceUrl());
        t2 = newSpan.get$end().get$offset();
        t3 = newSpan.get$sourceUrl();
        t4 = A.countCodeUnits(newSpan.get$text(), 10);
        newSpan = A.SourceSpanWithContext$(t1, A.SourceLocation$(t2, A._Highlight__lastLineLength(newSpan.get$text()), t4, t3), newSpan.get$text(), newSpan.get$text());
      }
      return A._Highlight__normalizeEndOfLine(A._Highlight__normalizeTrailingNewline(A._Highlight__normalizeNewlines(newSpan)));
    },
    $signature: 445
  };
  A._Line.prototype = {
    toString$0(_) {
      return "" + this.number + ': "' + this.text + '" (' + B.JSArray_methods.join$1(this.highlights, ", ") + ")";
    }
  };
  A.SourceLocation.prototype = {
    distance$1(other) {
      var t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t1) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return Math.abs(this.offset - other.get$offset());
    },
    compareTo$1(_, other) {
      var t1;
      type$.SourceLocation._as(other);
      t1 = this.sourceUrl;
      if (!J.$eq$(t1, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t1) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return this.offset - other.get$offset();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation._is(other) && J.$eq$(this.sourceUrl, other.get$sourceUrl()) && this.offset === other.get$offset();
    },
    get$hashCode(_) {
      var t1 = this.sourceUrl;
      t1 = t1 == null ? null : t1.get$hashCode(t1);
      if (t1 == null)
        t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var _this = this,
        t1 = A.getRuntimeTypeOfDartObject(_this).toString$0(0),
        source = _this.sourceUrl;
      return "<" + t1 + ": " + _this.offset + " " + (A.S(source == null ? "unknown source" : source) + ":" + (_this.line + 1) + ":" + (_this.column + 1)) + ">";
    },
    $isComparable: 1,
    get$sourceUrl() {
      return this.sourceUrl;
    },
    get$offset() {
      return this.offset;
    },
    get$line() {
      return this.line;
    },
    get$column() {
      return this.column;
    }
  };
  A.SourceLocationMixin.prototype = {
    distance$1(other) {
      if (!J.$eq$(this.file.url, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(this.get$sourceUrl()) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return Math.abs(this.offset - other.get$offset());
    },
    compareTo$1(_, other) {
      type$.SourceLocation._as(other);
      if (!J.$eq$(this.file.url, other.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(this.get$sourceUrl()) + '" and "' + A.S(other.get$sourceUrl()) + "\" don't match.", null));
      return this.offset - other.get$offset();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation._is(other) && J.$eq$(this.file.url, other.get$sourceUrl()) && this.offset === other.get$offset();
    },
    get$hashCode(_) {
      var t1 = this.file.url;
      t1 = t1 == null ? null : t1.get$hashCode(t1);
      if (t1 == null)
        t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var t1 = A.getRuntimeTypeOfDartObject(this).toString$0(0),
        t2 = this.offset,
        t3 = this.file,
        source = t3.url;
      return "<" + t1 + ": " + t2 + " " + (A.S(source == null ? "unknown source" : source) + ":" + (t3.getLine$1(t2) + 1) + ":" + (t3.getColumn$1(t2) + 1)) + ">";
    },
    $isComparable: 1,
    $isSourceLocation: 1
  };
  A.SourceSpanBase.prototype = {
    SourceSpanBase$3(start, end, text) {
      var t3,
        t1 = this.end,
        t2 = this.start;
      if (!J.$eq$(t1.get$sourceUrl(), t2.get$sourceUrl()))
        throw A.wrapException(A.ArgumentError$('Source URLs "' + A.S(t2.get$sourceUrl()) + '" and  "' + A.S(t1.get$sourceUrl()) + "\" don't match.", null));
      else if (t1.get$offset() < t2.get$offset())
        throw A.wrapException(A.ArgumentError$("End " + t1.toString$0(0) + " must come after start " + t2.toString$0(0) + ".", null));
      else {
        t3 = this.text;
        if (t3.length !== t2.distance$1(t1))
          throw A.wrapException(A.ArgumentError$('Text "' + t3 + '" must be ' + t2.distance$1(t1) + " characters long.", null));
      }
    },
    get$start() {
      return this.start;
    },
    get$end() {
      return this.end;
    },
    get$text() {
      return this.text;
    }
  };
  A.SourceSpanException.prototype = {
    get$message() {
      return this._span_exception$_message;
    },
    toString$0(_) {
      var t3, t4, highlight,
        t1 = this._span,
        t2 = "" + ("line " + (t1.get$start().get$line() + 1) + ", column " + (t1.get$start().get$column() + 1));
      if (t1.get$sourceUrl() != null) {
        t3 = t1.get$sourceUrl();
        t4 = $.$get$context();
        t3.toString;
        t3 = t2 + (" of " + t4.prettyUri$1(t3));
        t2 = t3;
      }
      t2 += ": " + this._span_exception$_message;
      highlight = t1.highlight$1$color(null);
      t1 = highlight.length !== 0 ? t2 + "\n" + highlight : t2;
      return "Error on " + (t1.charCodeAt(0) == 0 ? t1 : t1);
    },
    $isException: 1
  };
  A.SourceSpanFormatException.prototype = {
    get$offset() {
      var t1 = this._span;
      t1 = A.FileLocation$_(t1.file, t1._file$_start);
      return t1.offset;
    },
    $isFormatException: 1,
    get$source() {
      return this.source;
    }
  };
  A.SourceSpanMixin.prototype = {
    get$sourceUrl() {
      return this.get$start().get$sourceUrl();
    },
    get$length(_) {
      return this.get$end().get$offset() - this.get$start().get$offset();
    },
    compareTo$1(_, other) {
      var result;
      type$.SourceSpan._as(other);
      result = this.get$start().compareTo$1(0, other.get$start());
      return result === 0 ? this.get$end().compareTo$1(0, other.get$end()) : result;
    },
    highlight$1$color(color) {
      var _this = this;
      if (!type$.SourceSpanWithContext._is(_this) && _this.get$length(_this) === 0)
        return "";
      return A.Highlighter$(_this, color).highlight$0();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.SourceSpanMixin && this.get$start().$eq(0, other.get$start()) && this.get$end().$eq(0, other.get$end());
    },
    get$hashCode(_) {
      return A.Object_hash(this.get$start(), this.get$end(), B.C_SentinelValue, B.C_SentinelValue);
    },
    toString$0(_) {
      var _this = this;
      return "<" + A.getRuntimeTypeOfDartObject(_this).toString$0(0) + ": from " + _this.get$start().toString$0(0) + " to " + _this.get$end().toString$0(0) + ' "' + _this.get$text() + '">';
    },
    $isComparable: 1,
    $isSourceSpan: 1
  };
  A.SourceSpanWithContext.prototype = {
    get$context() {
      return this._context;
    }
  };
  A.StellarAccountAddress.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.StellarAccountAddress))
        return false;
      return other.baseAddress === this.baseAddress;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.baseAddress);
    }
  };
  A.StellarContractAddress.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.StellarContractAddress))
        return false;
      return other.baseAddress === this.baseAddress;
    },
    get$hashCode(_) {
      return B.JSString_methods.get$hashCode(this.baseAddress);
    }
  };
  A.StellarMuxedAddress.prototype = {
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (!(other instanceof A.StellarMuxedAddress))
        return false;
      t1 = other.accountId.compareTo$1(0, this.accountId);
      return t1 === 0 && other.muxedAddress === this.muxedAddress;
    },
    get$hashCode(_) {
      return this.accountId.get$hashCode(0) ^ B.JSString_methods.get$hashCode(this.muxedAddress);
    },
    toString$0(_) {
      return this.muxedAddress;
    }
  };
  A.StellarAddress.prototype = {
    toString$0(_) {
      return this.baseAddress;
    }
  };
  A.StellarAddressException.prototype = {};
  A.DartStellarPlugingException.prototype = {};
  A.StringScannerException.prototype = {
    get$source() {
      return A._asString(this.source);
    }
  };
  A.StringScanner.prototype = {
    get$lastMatch() {
      var _this = this;
      if (_this._string_scanner$_position !== _this._lastMatchPosition)
        _this._lastMatch = null;
      return _this._lastMatch;
    },
    scan$1(pattern) {
      var success, _this = this,
        t1 = _this._lastMatch = J.matchAsPrefix$2$s(pattern, _this.string, _this._string_scanner$_position);
      _this._lastMatchPosition = _this._string_scanner$_position;
      success = t1 != null;
      if (success)
        _this._lastMatchPosition = _this._string_scanner$_position = t1.get$end();
      return success;
    },
    expect$2$name(pattern, $name) {
      var t1;
      if (this.scan$1(pattern))
        return;
      if ($name == null)
        if (pattern instanceof A.JSSyntaxRegExp)
          $name = "/" + pattern.pattern + "/";
        else {
          t1 = J.toString$0$(pattern);
          t1 = A.stringReplaceAllUnchecked(t1, "\\", "\\\\");
          $name = '"' + A.stringReplaceAllUnchecked(t1, '"', '\\"') + '"';
        }
      this._fail$1($name);
    },
    expect$1(pattern) {
      return this.expect$2$name(pattern, null);
    },
    expectDone$0() {
      if (this._string_scanner$_position === this.string.length)
        return;
      this._fail$1("no more input");
    },
    error$3$length$position(message, $length, position) {
      var t2, t3, t4, t5, sourceFile, end,
        t1 = this.string;
      if (position < 0)
        A.throwExpression(A.RangeError$("position must be greater than or equal to 0."));
      else if (position > t1.length)
        A.throwExpression(A.RangeError$("position must be less than or equal to the string length."));
      t2 = position + $length > t1.length;
      if (t2)
        A.throwExpression(A.RangeError$("position plus length must not go beyond the end of the string."));
      t2 = this.sourceUrl;
      t3 = new A.CodeUnits(t1);
      t4 = A._setArrayType([0], type$.JSArray_int);
      t5 = new Uint32Array(A._ensureNativeList(t3.toList$0(t3)));
      sourceFile = new A.SourceFile(t2, t4, t5);
      sourceFile.SourceFile$decoded$2$url(t3, t2);
      end = position + $length;
      if (end > t5.length)
        A.throwExpression(A.RangeError$("End " + end + string$.x20must_ + sourceFile.get$length(0) + "."));
      else if (position < 0)
        A.throwExpression(A.RangeError$("Start may not be negative, was " + position + "."));
      throw A.wrapException(new A.StringScannerException(t1, message, new A._FileSpan(sourceFile, position, end)));
    },
    _fail$1($name) {
      this.error$3$length$position("expected " + $name + ".", 0, this._string_scanner$_position);
    }
  };
  A.TonAddress.prototype = {
    toFriendlyAddress$0() {
      var t2, _this = this,
        t1 = _this.defaultFlags;
      t1 = t1.length === 0 || B.JSArray_methods.contains$1(t1, B.FriendlyAddressFlags_17);
      t2 = B.JSArray_methods.contains$1(_this.defaultFlags, B.FriendlyAddressFlags_128);
      return A.TonAddressUtils_encodeAddress(t1, _this.hash, t2, true, _this.workChain);
    },
    toString$0(_) {
      var _this = this;
      if (_this.defaultFlags.length === 0)
        return A.BytesUtils_toHexString(_this.hash, true, "" + _this.workChain + ":");
      return _this.toFriendlyAddress$0();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.TonAddress))
        return false;
      return A.BytesUtils_bytesEqual(other.hash, this.hash) && other.workChain === this.workChain;
    },
    get$hashCode(_) {
      return A.Object_hash(this.hash, this.workChain, B.C_SentinelValue, B.C_SentinelValue);
    }
  };
  A.BitBuilder.prototype = {
    get$length(_) {
      return this._bit_builder$_length;
    },
    writeBit$1(value) {
      var _this = this,
        t1 = _this._bit_builder$_length,
        t2 = _this._bit_builder$_bytes,
        t3 = t2.length,
        t4 = t3 * 8;
      if (t1 > t4)
        throw A.wrapException(A.BocException$("Overflow bytes", A.LinkedHashMap_LinkedHashMap$_literal(["offset", t1, "length", t4], type$.String, type$.dynamic)));
      if (value) {
        t1 = B.JSNumber_methods.floor$0(t1 / 8);
        if (!(t1 >= 0 && t1 < t3))
          return A.ioore(t2, t1);
        B.JSArray_methods.$indexSet(t2, t1, (t2[t1] | B.JSInt_methods.$shl(1, 7 - B.JSInt_methods.$mod(_this._bit_builder$_length, 8))) >>> 0);
      }
      ++_this._bit_builder$_length;
    },
    writeBits$1(src) {
      var t1, i;
      for (t1 = src._bit_string$_length, i = 0; i < t1; ++i)
        this.writeBit$1(src.at$1(i));
    },
    writeBuffer$1(src) {
      var t1, t2, t3, t4, t5, i, _this = this;
      type$.List_int._as(src);
      A.BytesUtils_validateBytes(src, null);
      t1 = _this._bit_builder$_length;
      if (B.JSInt_methods.$mod(t1, 8) === 0) {
        t2 = src.length;
        t3 = t1 + t2 * 8;
        t4 = _this._bit_builder$_bytes;
        t5 = t4.length * 8;
        if (t3 > t5)
          throw A.wrapException(A.BocException$("Overflow bytes", A.LinkedHashMap_LinkedHashMap$_literal(["offset", t3, "length", t5], type$.String, type$.dynamic)));
        t1 = B.JSInt_methods._tdivFast$1(t1, 8);
        B.JSArray_methods.setRange$3(t4, t1, t1 + t2, src);
        _this._bit_builder$_length = _this._bit_builder$_length + src.length * 8;
      } else
        for (i = 0; i < src.length; ++i)
          _this.writeUint$2(src[i], 8);
    },
    writeUint$2(value, bits) {
      var v, t1, t2, t3, tillByte, bidx, wb, _this = this;
      A._BitBuilderUtils_validateBits(bits);
      v = A._BitBuilderUtils_parseBigint(value, false);
      if (bits === 0) {
        t1 = v.compareTo$1(0, $.$get$_BigIntImpl_zero());
        if (t1 !== 0)
          throw A.wrapException(A.BocException$("value is not zero for " + bits + " bits.", A.LinkedHashMap_LinkedHashMap$_literal(["value", v], type$.String, type$.dynamic)));
        else
          return;
      }
      if (v.get$bitLength(0) > bits)
        throw A.wrapException(A.BocException$("BitLength is too small for a value.", A.LinkedHashMap_LinkedHashMap$_literal(["value", v, "bits", bits, "value_bitLength", v.get$bitLength(0)], type$.String, type$.dynamic)));
      t1 = _this._bit_builder$_length;
      t2 = _this._bit_builder$_bytes;
      t3 = t2.length;
      if (t1 + bits > t3 * 8)
        throw A.wrapException(A.BocException$("BitBuilder overflow", null));
      tillByte = 8 - B.JSInt_methods.$mod(t1, 8);
      bidx = B.JSNumber_methods.floor$0(t1 / 8);
      if (bits < tillByte) {
        wb = v.toInt$0(0);
        if (!(bidx >= 0 && bidx < t3))
          return A.ioore(t2, bidx);
        B.JSArray_methods.$indexSet(t2, bidx, (t2[bidx] | B.JSInt_methods.$shl(wb, tillByte - bits)) >>> 0);
        t1 = _this._bit_builder$_length += bits;
      } else {
        wb = v.$shr(0, bits - tillByte).toInt$0(0);
        if (!(bidx >= 0 && bidx < t3))
          return A.ioore(t2, bidx);
        B.JSArray_methods.$indexSet(t2, bidx, (t2[bidx] | wb) >>> 0);
        t1 = _this._bit_builder$_length += tillByte;
      }
      bits -= tillByte;
      for (; bits > 0;)
        if (bits >= 8) {
          bits -= 8;
          B.JSArray_methods.$indexSet(t2, B.JSInt_methods._tdivFast$1(t1, 8), v.$shr(0, bits).$and(0, $.$get$_BitBuilderUtils_mask8Big()).toInt$0(0));
          t1 = _this._bit_builder$_length += 8;
        } else {
          B.JSArray_methods.$indexSet(t2, B.JSInt_methods._tdivFast$1(t1, 8), v.$shl(0, 8 - bits).$and(0, $.$get$_BitBuilderUtils_mask8Big()).toInt$0(0));
          t1 = _this._bit_builder$_length += bits;
          bits = 0;
        }
    },
    writeInt$2(value, bits) {
      var v, t1, vBits;
      A._BitBuilderUtils_validateBits(bits);
      v = A._BitBuilderUtils_parseBigint(value, true);
      if (bits === 0) {
        $.$get$_BigIntImpl_zero();
        t1 = A.BocException$("value is not zero for " + bits + " bits.", A.LinkedHashMap_LinkedHashMap$_literal(["value", v], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
      if (bits === 1) {
        $.$get$_BigIntImpl_one().$negate(0);
        $.$get$_BigIntImpl_zero();
        t1 = A.BocException$("value is not zero or -1 for " + bits + " bits.", A.LinkedHashMap_LinkedHashMap$_literal(["value", v], type$.String, type$.dynamic));
        throw A.wrapException(t1);
      }
      t1 = bits - 1;
      vBits = $.$get$_BigIntImpl_one().$shl(0, t1);
      if (v.compareTo$1(0, vBits.$negate(0)) < 0 || v.compareTo$1(0, vBits) >= 0)
        throw A.wrapException(A.BocException$("Out of range.", A.LinkedHashMap_LinkedHashMap$_literal(["value", v, "length", bits], type$.String, type$.dynamic)));
      if (v.compareTo$1(0, $.$get$_BigIntImpl_zero()) < 0) {
        this.writeBit$1(true);
        v = vBits.$add(0, v);
      } else
        this.writeBit$1(false);
      this.writeUint$2(v, t1);
    },
    buffer$0(_) {
      var t1 = this._bit_builder$_length;
      if (B.JSInt_methods.$mod(t1, 8) !== 0)
        throw A.wrapException(A.BocException$("Buffer is not byte aligned", null));
      return A.List_List$unmodifiable(B.JSArray_methods.sublist$2(this._bit_builder$_bytes, 0, B.JSInt_methods._tdivFast$1(t1, 8)), type$.int);
    }
  };
  A.BitReader.prototype = {
    skip$1(_, bits) {
      var t1 = this._bit_reader$_offset,
        t2 = t1 + bits;
      if (t2 > this._bits._bit_string$_length)
        throw A.wrapException(A.BocException$("Index out of bounds", A.LinkedHashMap_LinkedHashMap$_literal(["length", bits, "offset", t1, "index", t2], type$.String, type$.dynamic)));
      this._bit_reader$_offset = t2;
    },
    loadBit$0() {
      var r = this._bits.at$1(this._bit_reader$_offset);
      ++this._bit_reader$_offset;
      return r;
    },
    loadBits$1(bits) {
      var r = this._bits.substring$2(0, this._bit_reader$_offset, bits);
      this._bit_reader$_offset += bits;
      return r;
    },
    loadBuffer$1(bytes) {
      var _this = this,
        buf = _this._preloadBuffer$2(bytes, _this._bit_reader$_offset);
      _this._bit_reader$_offset = _this._bit_reader$_offset + bytes * 8;
      return buf;
    },
    loadUintBig$1(bits) {
      var loaded = this._preloadUint$2(bits, this._bit_reader$_offset);
      this._bit_reader$_offset += bits;
      return loaded;
    },
    loadIntBig$1(bits) {
      var res = this._preloadInt$2(bits, this._bit_reader$_offset);
      this._bit_reader$_offset += bits;
      return res;
    },
    loadPaddedBits$1(bits) {
      var t1, $length, length0, r, _this = this;
      if (B.JSInt_methods.$mod(bits, 8) !== 0)
        throw A.wrapException(A.BocException$("Invalid number of bits", A.LinkedHashMap_LinkedHashMap$_literal(["bits", bits], type$.String, type$.dynamic)));
      for (t1 = _this._bits, $length = bits; true; $length = length0) {
        length0 = $length - 1;
        if (t1.at$1(_this._bit_reader$_offset + $length - 1)) {
          $length = length0;
          break;
        }
      }
      r = t1.substring$2(0, _this._bit_reader$_offset, $length);
      _this._bit_reader$_offset += bits;
      return r;
    },
    _preloadInt$2(bits, offset) {
      var t1, sign, res, t2, t3, i;
      if (bits === 0)
        return $.$get$_BigIntImpl_zero();
      t1 = this._bits;
      sign = t1.at$1(offset);
      res = $.$get$_BigIntImpl_zero();
      for (t2 = bits - 1, t3 = offset + 1, i = 0; i < t2; ++i)
        if (t1.at$1(t3 + i))
          res = res.$add(0, $.$get$_BigIntImpl_one().$shl(0, bits - i - 1 - 1));
      return sign ? res.$sub(0, $.$get$_BigIntImpl_one().$shl(0, t2)) : res;
    },
    _preloadUint$2(bits, offset) {
      var res, t1, i;
      if (bits === 0)
        return $.$get$_BigIntImpl_zero();
      res = $.$get$_BigIntImpl_zero();
      for (t1 = this._bits, i = 0; i < bits; ++i)
        if (t1.at$1(offset + i))
          res = res.$add(0, $.$get$_BigIntImpl_one().$shl(0, bits - i - 1));
      return res;
    },
    _preloadBuffer$2(bytes, offset) {
      var buf, i,
        fastBuffer = this._bits.subbuffer$2(offset, bytes * 8);
      if (fastBuffer != null)
        return fastBuffer;
      buf = A.List_List$filled(bytes, 0, false, type$.int);
      for (i = 0; i < bytes; ++i)
        B.JSArray_methods.$indexSet(buf, i, this._preloadUint$2(8, offset + i * 8).toInt$0(0));
      return buf;
    }
  };
  A.BitString.prototype = {
    get$length(_) {
      return this._bit_string$_length;
    },
    clone$0() {
      return A.BitString_BitString(A.List_List$from(this._bit_string$_data, true, type$.int), this._bit_string$_offset, this._bit_string$_length);
    },
    at$1(index) {
      var byteIndex, t2,
        t1 = this._bit_string$_length;
      A._BitStringUtils_validateOffset(index, t1, null);
      if (index >= t1)
        throw A.wrapException(A.BocException$("index is out of bounds", A.LinkedHashMap_LinkedHashMap$_literal(["index", index, "length", t1], type$.String, type$.dynamic)));
      t1 = this._bit_string$_offset + index;
      byteIndex = B.JSInt_methods._shrOtherPositive$1(t1, 3);
      t1 = B.JSInt_methods.$mod(t1, 8);
      t2 = this._bit_string$_data;
      if (!(byteIndex < t2.length))
        return A.ioore(t2, byteIndex);
      return (t2[byteIndex] & B.JSInt_methods.$shl(1, 7 - t1)) >>> 0 !== 0;
    },
    substring$2(_, offset, $length) {
      A._BitStringUtils_validateOffset(offset, this._bit_string$_length, $length);
      if ($length === 0)
        return B.BitString_0_0_List_empty;
      return A.BitString_BitString(this._bit_string$_data, this._bit_string$_offset + offset, $length);
    },
    subbuffer$2(offset, $length) {
      var t1, start;
      A._BitStringUtils_validateOffset(offset, this._bit_string$_length, $length);
      if (B.JSInt_methods.$mod($length, 8) !== 0)
        return null;
      t1 = this._bit_string$_offset + offset;
      if (B.JSInt_methods.$mod(t1, 8) !== 0)
        return null;
      start = B.JSInt_methods._shrOtherPositive$1(t1, 3);
      return B.JSArray_methods.sublist$2(this._bit_string$_data, start, start + B.JSInt_methods._shrOtherPositive$1($length, 3));
    },
    toString$0(_) {
      var hex,
        padded = A.BocUtils_bitsToPaddedBuffer(this).buffer$0(0),
        t1 = this._bit_string$_length;
      if (B.JSInt_methods.$mod(t1, 4) === 0) {
        hex = A.BytesUtils_toHexString(B.JSArray_methods.sublist$2(padded, 0, B.JSNumber_methods.ceil$0(t1 / 8)), false, null);
        if (B.JSInt_methods.$mod(t1, 8) === 0)
          return hex;
        else
          return B.JSString_methods.substring$2(hex, 0, hex.length - 1);
      } else {
        hex = A.BytesUtils_toHexString(padded, false, null);
        if (B.JSInt_methods.$mod(t1, 8) <= 4)
          return B.JSString_methods.substring$2(hex, 0, hex.length - 1) + "_";
        else
          return hex + "_";
      }
    },
    $eq(_, other) {
      var t1, i;
      if (other == null)
        return false;
      if (!(other instanceof A.BitString))
        return false;
      t1 = this._bit_string$_length;
      if (other._bit_string$_length !== t1)
        return false;
      for (i = 0; i < t1; ++i)
        if (this.at$1(i) !== other.at$1(i))
          return false;
      return true;
    },
    get$hashCode(_) {
      return A.Object_hash(this._bit_string$_data, this._bit_string$_length, B.C_SentinelValue, B.C_SentinelValue);
    }
  };
  A.Builder.prototype = {
    storeBit$1(value) {
      this._builder$_bits.writeBit$1(value > 0);
      return this;
    },
    storeRef$1(cell) {
      var t1 = this._refs,
        t2 = t1.length;
      if (t2 >= 4)
        throw A.wrapException(A.BocException$("Too many references.", A.LinkedHashMap_LinkedHashMap$_literal(["maximum", 4, "refrence", t2], type$.String, type$.dynamic)));
      B.JSArray_methods.add$1(t1, cell);
      return this;
    },
    storeMaybeRef$1$cell(cell) {
      this.storeBit$1(1);
      this.storeRef$1(cell);
      return this;
    },
    storeSlice$1(src) {
      var t3,
        c = src.clone$0(),
        t1 = c._reader,
        t2 = t1._bits._bit_string$_length - t1._bit_reader$_offset;
      if (t2 > 0)
        this._builder$_bits.writeBits$1(t1.loadBits$1(t2));
      for (t1 = c._slice$_refs, t2 = t1.length; t3 = c._refsOffset, t2 - t3 > 0;) {
        if (t3 >= t2)
          A.throwExpression(A.BocException$("No more references", null));
        c._refsOffset = t3 + 1;
        if (!(t3 < t2))
          return A.ioore(t1, t3);
        this.storeRef$1(t1[t3]);
      }
      return this;
    },
    endCell$0() {
      var t1 = this._builder$_bits;
      t1 = A.BitString_BitString(t1._bit_builder$_bytes, 0, t1._bit_builder$_length);
      return A.Cell_Cell(t1, false, this._refs);
    }
  };
  A.Cell.prototype = {
    beginParse$0() {
      if (this.type !== B.CellType_Ordinary_m1)
        throw A.wrapException(A.BocException$("Exotic cells cannot be parsed", null));
      var t1 = this.bits.clone$0();
      return new A.Slice(new A.BitReader(A._setArrayType([], type$.JSArray_int), t1, 0), A.List_List$unmodifiable(this.refs, type$.Cell));
    },
    hash$1$level(level) {
      var t1 = this._hashes,
        t2 = t1.length,
        t3 = Math.min(t2 - 1, level);
      if (t3 >>> 0 !== t3 || t3 >= t2)
        return A.ioore(t1, t3);
      return t1[t3];
    },
    hash$0() {
      return this.hash$1$level(3);
    },
    depth$1$level(level) {
      var t1 = this._depths,
        t2 = t1.length,
        t3 = Math.min(t2 - 1, level);
      if (t3 >>> 0 !== t3 || t3 >= t2)
        return A.ioore(t1, t3);
      return t1[t3];
    },
    toBase64$0() {
      return A.Base64Utils_encodeBase64(A.BocSerialization_serialize(true, false, this), false);
    },
    toString$1$indent(_, indent) {
      var t, s, t2, t3, _i,
        t1 = this.type;
      if (t1 !== B.CellType_Ordinary_m1)
        if (t1 === B.CellType_MerkleProof_3)
          t = "p";
        else if (t1 === B.CellType_MerkleUpdate_4)
          t = "u";
        else
          t = t1 === B.CellType_PrunedBranch_1 ? "p" : "x";
      else
        t = "x";
      s = indent + t + "{" + this.bits.toString$0(0) + "}";
      for (t1 = this.refs, t2 = t1.length, t3 = indent + " ", _i = 0; _i < t2; ++_i)
        s += "\n" + t1[_i].toString$1$indent(0, t3);
      return s;
    },
    toString$0(_) {
      return this.toString$1$indent(0, "");
    },
    $eq(_, other) {
      var t1, t2, t3, t4, i;
      if (other == null)
        return false;
      if (!(other instanceof A.Cell))
        return false;
      t1 = other._hashes;
      t2 = t1.length;
      t3 = this._hashes;
      t4 = t3.length;
      if (t2 !== t4)
        return false;
      for (i = 0; i < t4; ++i) {
        if (!(i < t2))
          return A.ioore(t1, i);
        if (!A.BytesUtils_bytesEqual(t1[i], t3[i]))
          return false;
      }
      return true;
    },
    get$hashCode(_) {
      return A.Object_hashAll(this._hashes);
    }
  };
  A.Cell$__closure.prototype = {
    call$1(e) {
      return A.BytesUtils_toBytes(type$.List_int._as(e), true);
    },
    $signature: 19
  };
  A.CellType.prototype = {
    toString$0(_) {
      return "CellType." + this.name;
    }
  };
  A.CellType_fromValue_closure.prototype = {
    call$1(element) {
      return type$.CellType._as(element).tag === this.tag;
    },
    $signature: 446
  };
  A.Slice.prototype = {
    clone$0() {
      var res,
        t1 = this._reader,
        t2 = t1._bits.clone$0();
      t1 = t1._bit_reader$_offset;
      res = new A.Slice(new A.BitReader(A._setArrayType([], type$.JSArray_int), t2, t1), A.List_List$unmodifiable(this._slice$_refs, type$.Cell));
      res._refsOffset = this._refsOffset;
      return res;
    },
    toString$0(_) {
      return new A.Builder(A.BitBuilder$(1023), A._setArrayType([], type$.JSArray_Cell)).storeSlice$1(this).endCell$0().toString$0(0);
    }
  };
  A.BocException.prototype = {};
  A.ExoticMerkleProof.prototype = {};
  A.ExoticMerkleUpdate.prototype = {};
  A.Pruned.prototype = {};
  A.ExoticPruned.prototype = {};
  A.LevelMask.prototype = {
    get$level() {
      var t1, _this = this,
        value = _this.__LevelMask_level_FI;
      if (value === $) {
        t1 = A.MathUtils_clz32(_this._mask);
        _this.__LevelMask_level_FI !== $ && A.throwLateFieldADI("level");
        value = _this.__LevelMask_level_FI = 32 - t1;
      }
      return value;
    },
    apply$1(level) {
      return A.LevelMask_LevelMask((this._mask & B.JSInt_methods.$shl(1, level) - 1) >>> 0);
    }
  };
  A.ResolvedCellResult.prototype = {};
  A.ResolvedCellResult_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_toBytes(type$.List_int._as(e), true);
    },
    $signature: 19
  };
  A.CellTopoloigicalSort.prototype = {};
  A._ParseBocResult.prototype = {};
  A._ReadCellResult.prototype = {};
  A.CellUtils_topologicalSort_closure.prototype = {
    call$1(v) {
      return A.BytesUtils_toHexString(type$.Cell._as(v).hash$0(), true, null);
    },
    $signature: 447
  };
  A.CellUtils_topologicalSort_visit.prototype = {
    call$1(hash) {
      var t2, refs, ci, _this = this,
        t1 = _this.notPermCells;
      if (!t1.contains$1(0, hash))
        return;
      t2 = _this.tempMark;
      if (t2.contains$1(0, hash))
        throw A.wrapException(A.BocException$("Not a DAG", null));
      t2.add$1(0, hash);
      refs = A.List_List$from(type$.Iterable_dynamic._as(_this.allCells.$index(0, hash).$index(0, "refs")), true, type$.String);
      for (ci = refs.length - 1; ci >= 0; --ci)
        _this.call$1(refs[ci]);
      B.JSArray_methods.add$1(_this.sorted, hash);
      t2.remove$1(0, hash);
      t1.remove$1(0, hash);
    },
    $signature: 76
  };
  A.CellUtils_topologicalSort_closure0.prototype = {
    call$1(e) {
      var cels = this.allCells.$index(0, A._asString(e)),
        t1 = type$.Cell._as(cels.$index(0, "cell")),
        t2 = type$.int,
        t3 = J.map$1$1$ax(type$.List_dynamic._as(cels.$index(0, "refs")), new A.CellUtils_topologicalSort__closure(this.indexes), t2);
      t3 = A.List_List$_of(t3, t3.$ti._eval$1("ListIterable.E"));
      return new A.CellTopoloigicalSort(t1, A.List_List$unmodifiable(t3, t2));
    },
    $signature: 448
  };
  A.CellUtils_topologicalSort__closure.prototype = {
    call$1(v) {
      var t1 = this.indexes.$index(0, v);
      t1.toString;
      return t1;
    },
    $signature: 449
  };
  A.CellUtils_resolveExotic_closure.prototype = {
    call$1(e) {
      return type$.Pruned._as(e).hash;
    },
    $signature: 450
  };
  A.CellUtils_resolveExotic_closure0.prototype = {
    call$1(e) {
      return type$.Pruned._as(e).depth;
    },
    $signature: 451
  };
  A.TonChain.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.TonChain))
        return false;
      return this.workchain === other.workchain && this.id === other.id;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this.workchain) ^ B.JSInt_methods.get$hashCode(this.id);
    }
  };
  A.TonChain_fromWorkchain_closure.prototype = {
    call$1(e) {
      return type$.TonChain._as(e).workchain === this.workchain;
    },
    $signature: 452
  };
  A.TonChain_fromWorkchain_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.TonContractException_eUg);
    },
    $signature: 0
  };
  A.TonContract.prototype = {};
  A._TonContract_Object_ContractProvider.prototype = {};
  A.ContractProvider.prototype = {};
  A.TonContractException.prototype = {};
  A.WalletV1R1.prototype = {};
  A.WalletV1R2.prototype = {};
  A.WalletV1R3.prototype = {};
  A.WalletV2R1.prototype = {};
  A.WalletV2R2.prototype = {};
  A.WalletV3R1.prototype = {};
  A.WalletV3R2.prototype = {};
  A.WalletV4.prototype = {};
  A.WalletV5R1.prototype = {};
  A.WalletContract.prototype = {};
  A.WalletVersion.prototype = {
    get$state() {
      switch (this) {
        case B.WalletVersion_v1R1_1:
          return "te6cckEBAQEARAAAhP8AIN2k8mCBAgDXGCDXCx/tRNDTH9P/0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVEH98Ik=";
        case B.WalletVersion_v1R2_1:
          return "te6cckEBAQEAUwAAov8AIN0gggFMl7qXMO1E0NcLH+Ck8mCBAgDXGCDXCx/tRNDTH9P/0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVNDieG8=";
        case B.WalletVersion_v1R3_1:
          return "te6cckEBAQEAXwAAuv8AIN0gggFMl7ohggEznLqxnHGw7UTQ0x/XC//jBOCk8mCBAgDXGCDXCx/tRNDTH9P/0VESuvKhIvkBVBBE+RDyovgAAdMfMSDXSpbTB9QC+wDe0aTIyx/L/8ntVLW4bkI=";
        case B.WalletVersion_v2R1_2:
          return "te6cckEBAQEAVwAAqv8AIN0gggFMl7qXMO1E0NcLH+Ck8mCDCNcYINMf0x8B+CO78mPtRNDTH9P/0VExuvKhA/kBVBBC+RDyovgAApMg10qW0wfUAvsA6NGkyMsfy//J7VShNwu2";
        case B.WalletVersion_v2R2_2:
          return "te6cckEBAQEAYwAAwv8AIN0gggFMl7ohggEznLqxnHGw7UTQ0x/XC//jBOCk8mCDCNcYINMf0x8B+CO78mPtRNDTH9P/0VExuvKhA/kBVBBC+RDyovgAApMg10qW0wfUAvsA6NGkyMsfy//J7VQETNeh";
        case B.WalletVersion_v3R1_3:
          return "te6cckEBAQEAYgAAwP8AIN0gggFMl7qXMO1E0NcLH+Ck8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/T/9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVD++buA=";
        case B.WalletVersion_v3R2_3:
          return "te6cckEBAQEAcQAA3v8AIN0gggFMl7ohggEznLqxn3Gw7UTQ0x/THzHXC//jBOCk8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/T/9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVBC9ba0=";
        case B.WalletVersion_v4_4:
          return "te6ccgECFAEAAtQAART/APSkE/S88sgLAQIBIAIDAgFIBAUE+PKDCNcYINMf0x/THwL4I7vyZO1E0NMf0x/T//QE0VFDuvKhUVG68qIF+QFUEGT5EPKj+AAkpMjLH1JAyx9SMMv/UhD0AMntVPgPAdMHIcAAn2xRkyDXSpbTB9QC+wDoMOAhwAHjACHAAuMAAcADkTDjDQOkyMsfEssfy/8QERITAubQAdDTAyFxsJJfBOAi10nBIJJfBOAC0x8hghBwbHVnvSKCEGRzdHK9sJJfBeAD+kAwIPpEAcjKB8v/ydDtRNCBAUDXIfQEMFyBAQj0Cm+hMbOSXwfgBdM/yCWCEHBsdWe6kjgw4w0DghBkc3RyupJfBuMNBgcCASAICQB4AfoA9AQw+CdvIjBQCqEhvvLgUIIQcGx1Z4MesXCAGFAEywUmzxZY+gIZ9ADLaRfLH1Jgyz8gyYBA+wAGAIpQBIEBCPRZMO1E0IEBQNcgyAHPFvQAye1UAXKwjiOCEGRzdHKDHrFwgBhQBcsFUAPPFiP6AhPLassfyz/JgED7AJJfA+ICASAKCwBZvSQrb2omhAgKBrkPoCGEcNQICEekk30pkQzmkD6f+YN4EoAbeBAUiYcVnzGEAgFYDA0AEbjJftRNDXCx+AA9sp37UTQgQFA1yH0BDACyMoHy//J0AGBAQj0Cm+hMYAIBIA4PABmtznaiaEAga5Drhf/AABmvHfaiaEAQa5DrhY/AAG7SB/oA1NQi+QAFyMoHFcv/ydB3dIAYyMsFywIizxZQBfoCFMtrEszMyXP7AMhAFIEBCPRR8qcCAHCBAQjXGPoA0z/IVCBHgQEI9FHyp4IQbm90ZXB0gBjIywXLAlAGzxZQBPoCFMtqEssfyz/Jc/sAAgBsgQEI1xj6ANM/MFIkgQEI9Fnyp4IQZHN0cnB0gBjIywXLAlAFzxZQA/oCE8tqyx8Syz/Jc/sAAAr0AMntVA==";
        case B.WalletVersion_v5R1_5:
          return "te6cckECFAEAAoEAART/APSkE/S88sgLAQIBIAINAgFIAwQC3NAg10nBIJFbj2Mg1wsfIIIQZXh0br0hghBzaW50vbCSXwPgghBleHRuuo60gCDXIQHQdNch+kAw+kT4KPpEMFi9kVvg7UTQgQFB1yH0BYMH9A5voTGRMOGAQNchcH/bPOAxINdJgQKAuZEw4HDiEA8CASAFDAIBIAYJAgFuBwgAGa3OdqJoQCDrkOuF/8AAGa8d9qJoQBDrkOuFj8ACAUgKCwAXsyX7UTQcdch1wsfgABGyYvtRNDXCgCAAGb5fD2omhAgKDrkPoCwBAvIOAR4g1wsfghBzaWduuvLgin8PAeaO8O2i7fshgwjXIgKDCNcjIIAg1yHTH9Mf0x/tRNDSANMfINMf0//XCgAK+QFAzPkQmiiUXwrbMeHywIffArNQB7Dy0IRRJbry4IVQNrry4Ib4I7vy0IgikvgA3gGkf8jKAMsfAc8Wye1UIJL4D95w2zzYEAP27aLt+wL0BCFukmwhjkwCIdc5MHCUIccAs44tAdcoIHYeQ2wg10nACPLgkyDXSsAC8uCTINcdBscSwgBSMLDy0InXTNc5MAGk6GwShAe78uCT10rAAPLgk+1V4tIAAcAAkVvg69csCBQgkXCWAdcsCBwS4lIQseMPINdKERITAJYB+kAB+kT4KPpEMFi68uCR7UTQgQFB1xj0BQSdf8jKAEAEgwf0U/Lgi44UA4MH9Fvy4Iwi1woAIW4Bs7Dy0JDiyFADzxYS9ADJ7VQAcjDXLAgkji0h8uCS0gDtRNDSAFETuvLQj1RQMJExnAGBAUDXIdcKAPLgjuLIygBYzxbJ7VST8sCN4gAQk1vbMeHXTNC01sNe";
        default:
          throw A.wrapException(A.UnimplementedError$(null));
      }
    },
    toString$0(_) {
      return "WalletVersion." + this.name;
    }
  };
  A.WalletVersion_WalletVersion$fromValue_closure.prototype = {
    call$1(element) {
      return type$.WalletVersion._as(element).name === this.name;
    },
    $signature: 453
  };
  A.WalletVersion_WalletVersion$fromValue_closure0.prototype = {
    call$0() {
      return A.throwExpression(new A.TonContractException("Cannot find WalletVersion from provided status", A.LinkedHashMap_LinkedHashMap$_literal(["name", this.name], type$.String, type$.dynamic)));
    },
    $signature: 0
  };
  A.VersionedWalletContract.prototype = {};
  A._VersionedWalletContract_WalletContract_VerionedProviderImpl.prototype = {};
  A.VerionedProviderImpl.prototype = {};
  A.V5R1Context.prototype = {
    store$1(builder) {
      builder._builder$_bits.writeInt$2(A._BigIntImpl__BigIntImpl$from(this.chain.id).$xor(0, A._BigIntImpl__BigIntImpl$from(this.get$contextID())).toInt$0(0), 32);
    }
  };
  A.V5R1CustomContext.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["context", this.context, "networkGlobalId", this.chain.id], type$.String, type$.dynamic);
    },
    get$contextID() {
      var t1 = A.BitBuilder$(1023),
        t2 = A._setArrayType([], type$.JSArray_Cell);
      t1.writeUint$2(0, 1);
      t1.writeUint$2(this.context, 31);
      return new A.Builder(t1, t2).endCell$0().beginParse$0()._reader.loadIntBig$1(32).toInt$0(0);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.V5R1CustomContext))
        return false;
      return other.context === this.context && other.chain.$eq(0, this.chain);
    },
    get$hashCode(_) {
      return A.Object_hashAll([this.context, this.chain.id]);
    }
  };
  A.V5R1ClientContext.prototype = {
    toJson$0() {
      var t1 = this.chain;
      return A.LinkedHashMap_LinkedHashMap$_literal(["networkGlobalId", t1.id, "subwalletNumber", this.subwalletNumber, "workchain", t1.workchain], type$.String, type$.dynamic);
    },
    get$contextID() {
      var t1 = A.BitBuilder$(1023),
        t2 = A._setArrayType([], type$.JSArray_Cell);
      t1.writeUint$2(1, 1);
      t1.writeInt$2(this.chain.workchain, 8);
      t1.writeUint$2(0, 8);
      t1.writeUint$2(this.subwalletNumber, 15);
      return new A.Builder(t1, t2).endCell$0().beginParse$0()._reader.loadIntBig$1(32).toInt$0(0);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A.V5R1ClientContext))
        return false;
      return other.subwalletNumber === this.subwalletNumber && other.chain.$eq(0, this.chain);
    },
    get$hashCode(_) {
      return A.Object_hashAll([this.subwalletNumber, this.chain.id]);
    }
  };
  A.VersionedWalletState.prototype = {
    initialState$0() {
      var t1 = A.Cell_Cell$fromBytes(A.Base64Utils_decodeBase64(this.version.get$state())),
        t2 = this.initialData$0();
      return new A.StateInit(t1, t2, null);
    }
  };
  A.NoneSubWalletVersionedWalletState.prototype = {
    initialData$0() {
      var t1 = A.BitBuilder$(1023),
        t2 = A._setArrayType([], type$.JSArray_Cell);
      t1.writeUint$2(0, 32);
      t1.writeBuffer$1(type$.List_int._as(B.JSArray_methods.sublist$1(this.publicKey._publickKey.get$compressed(), 1)));
      return new A.Builder(t1, t2).endCell$0();
    }
  };
  A.SubWalletVersionedWalletState.prototype = {
    initialData$0() {
      var t1, t2, _this = this;
      switch (_this.version) {
        case B.WalletVersion_v3R1_3:
        case B.WalletVersion_v3R2_3:
          t1 = A.BitBuilder$(1023);
          t2 = A._setArrayType([], type$.JSArray_Cell);
          t1.writeUint$2(0, 32);
          t1.writeUint$2(_this.subwallet, 32);
          t1.writeBuffer$1(type$.List_int._as(B.JSArray_methods.sublist$1(_this.publicKey._publickKey.get$compressed(), 1)));
          return new A.Builder(t1, t2).endCell$0();
        case B.WalletVersion_v4_4:
          t1 = A.BitBuilder$(1023);
          t2 = A._setArrayType([], type$.JSArray_Cell);
          t1.writeUint$2(0, 32);
          t1.writeUint$2(_this.subwallet, 32);
          t1.writeBuffer$1(type$.List_int._as(B.JSArray_methods.sublist$1(_this.publicKey._publickKey.get$compressed(), 1)));
          return new A.Builder(t1, t2).storeBit$1(0).endCell$0();
        default:
          throw A.wrapException(B.TonContractException_XAw);
      }
    }
  };
  A.V5VersionedWalletState.prototype = {
    initialData$0() {
      var t1 = A.BitBuilder$(1023),
        t2 = new A.Builder(t1, A._setArrayType([], type$.JSArray_Cell));
      t1.writeUint$2(1, 1);
      t1.writeUint$2(0, 32);
      this.context.store$1(t2);
      t1.writeBuffer$1(type$.List_int._as(B.JSArray_methods.sublist$1(this.publicKey._publickKey.get$compressed(), 1)));
      return t2.storeBit$1(0).endCell$0();
    }
  };
  A.KeyException.prototype = {};
  A.TonPublicKey.prototype = {};
  A.DictionaryCodecs_createBigUintKey_closure.prototype = {
    call$1(src) {
      var t1, t2, t3;
      type$.BigInt._as(src);
      if (src._isNegative)
        throw A.wrapException(A.DictException$("Key is negative.", A.LinkedHashMap_LinkedHashMap$_literal(["key", src], type$.String, type$.dynamic)));
      t1 = A.BitBuilder$(1023);
      t2 = A._setArrayType([], type$.JSArray_Cell);
      t3 = this.bits;
      t1.writeUint$2(src, t3);
      return new A.Builder(t1, t2).endCell$0().beginParse$0()._reader.loadUintBig$1(t3);
    },
    $signature: 454
  };
  A.Dictionary.prototype = {
    $index(_, key) {
      return this._dictionary$_map.$index(0, A.DictionaryUtils_serializeInternalKey(this.$ti._precomputed1._as(key)));
    },
    store$3$key$value(builder, key, value) {
      var resolvedKey, resolvedValue, t2, t3, t4, t5, prepared, dd, _this = this,
        t1 = _this._dictionary$_map;
      if (t1.__js_helper$_length === 0)
        builder.storeBit$1(0);
      else {
        resolvedKey = _this._dictionary$_key;
        resolvedValue = _this._dictionary$_value;
        if (resolvedKey == null)
          throw A.wrapException(A.DictException$("Key serializer is not defined", null));
        if (resolvedValue == null)
          throw A.wrapException(A.DictException$("Value serializer is not defined", null));
        t2 = A._instanceType(t1)._eval$1("LinkedHashMapEntriesIterable<1,2>");
        t3 = _this.$ti;
        t4 = t3._eval$1("MapEntry<BigInt,2>");
        t5 = t3._rest[1];
        prepared = A.Map_Map$fromEntries(A.MappedIterable_MappedIterable(new A.LinkedHashMapEntriesIterable(t1, t2), t2._bind$1(t4)._eval$1("1(Iterable.E)")._as(new A.Dictionary_store_closure(_this, resolvedKey)), t2._eval$1("Iterable.E"), t4), type$.BigInt, t5);
        builder.storeBit$1(1);
        dd = new A.Builder(A.BitBuilder$(1023), A._setArrayType([], type$.JSArray_Cell));
        t4 = resolvedKey.bits;
        t3 = t3._eval$1("~(2,Builder)")._as(resolvedValue.serialize);
        A._DictSerializationUtils_writeEdge(A._DictSerializationUtils_buildTree(prepared, t4, t5), t4, t3, dd, t5);
        builder.storeRef$1(dd.endCell$0());
      }
    }
  };
  A.Dictionary_store_closure.prototype = {
    call$1(entry) {
      var t2, decode,
        t1 = this.$this.$ti;
      t1._eval$1("MapEntry<String,2>")._as(entry);
      t2 = t1._precomputed1;
      decode = A.DictionaryUtils__deserializeInternalKey(entry.key);
      if (!t2._is(decode))
        A.throwExpression(A.DictException$("Invalid key type.", A.LinkedHashMap_LinkedHashMap$_literal(["value", decode, "expected", A.createRuntimeType(t2).toString$0(0), "key", J.get$runtimeType$(decode).toString$0(0)], type$.String, type$.dynamic)));
      return new A.MapEntry(t1._eval$1("BigInt(1)")._as(this.resolvedKey.serialize).call$1(decode), entry.value, type$.$env_1_1_BigInt._bind$1(t1._rest[1])._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return this.$this.$ti._eval$1("MapEntry<BigInt,2>(MapEntry<String,2>)");
    }
  };
  A.DictionaryKey.prototype = {};
  A.DictionaryValue.prototype = {};
  A.DictException.prototype = {};
  A._Node.prototype = {
    toJson$0() {
      var t1, t2, _this = this;
      if (_this.isLeaf) {
        t1 = _this.___Node_value_F;
        t1 === $ && A.throwLateFieldNI("value");
        return A.LinkedHashMap_LinkedHashMap$_literal(["value", t1, "type", "leaf"], type$.String, type$.dynamic);
      }
      t1 = _this.___Node_left_A;
      t1 === $ && A.throwLateFieldNI("left");
      t1 = t1.toJson$0();
      t2 = _this.___Node_right_A;
      t2 === $ && A.throwLateFieldNI("right");
      return A.LinkedHashMap_LinkedHashMap$_literal(["left", t1, "right", t2.toJson$0(), "type", "fork"], type$.String, type$.dynamic);
    }
  };
  A._Edge.prototype = {
    toJson$0() {
      return A.LinkedHashMap_LinkedHashMap$_literal(["label", this.label, "node", this.node.toJson$0()], type$.String, type$.dynamic);
    }
  };
  A._DictSerializationUtils_buildTree_closure.prototype = {
    call$2(k, v) {
      type$.BigInt._as(k);
      this.T._as(v);
      this.converted.$indexSet(0, A._DictSerializationUtils_pad(k.toRadixString$1(0, 2), this.keyLength), v);
    },
    $signature() {
      return this.T._eval$1("~(BigInt,0)");
    }
  };
  A.TonDartPluginException.prototype = {};
  A.SimpleLibraryCodecs_codec_closure.prototype = {
    call$2(p0, p1) {
      type$.SimpleLibrary._as(p0).store$1(p1);
    },
    $signature: 455
  };
  A.StateInit.prototype = {
    store$1(builder) {
      var dict,
        t1 = builder._builder$_bits;
      t1.writeBit$1(false);
      t1.writeBit$1(false);
      builder.storeMaybeRef$1$cell(this.code);
      builder.storeMaybeRef$1$cell(this.data);
      t1 = this.libraries;
      dict = t1 == null ? null : new A.StateInit_store_closure().call$1(type$.Map_BigInt_SimpleLibrary._as(t1));
      A.checkTypeBound(type$.BigInt, type$.Object, "K", "storeDict");
      type$.nullable_Dictionary_BigInt_SimpleLibrary._as(dict);
      if (dict != null)
        dict.store$3$key$value(builder, null, null);
      else
        builder.storeBit$1(0);
    },
    toJson$0() {
      var t1 = this.code.toBase64$0(),
        t2 = this.data.toBase64$0(),
        t3 = this.libraries;
      return A.LinkedHashMap_LinkedHashMap$_literal(["splitDepth", null, "special", null, "code", t1, "data", t2, "libraries", t3 == null ? null : t3.map$2$1(0, new A.StateInit_toJson_closure(), type$.String, type$.Map_String_dynamic)], type$.String, type$.dynamic);
    }
  };
  A.StateInit_store_closure.prototype = {
    call$1(p0) {
      var t1, t2;
      type$.Map_BigInt_SimpleLibrary._as(p0);
      t1 = A.DictionaryCodecs_createBigUintKey(256);
      t2 = $.$get$SimpleLibraryCodecs_codec();
      return A.Dictionary_fromEnteries(t1, p0, t2, type$.BigInt, type$.SimpleLibrary);
    },
    $signature: 456
  };
  A.StateInit_toJson_closure.prototype = {
    call$2(key, value) {
      type$.BigInt._as(key);
      type$.SimpleLibrary._as(value);
      return new A.MapEntry(key.toString$0(0), value.toJson$0(), type$.MapEntry_of_String_and_Map_String_dynamic);
    },
    $signature: 457
  };
  A.JsonSerialization0.prototype = {
    toString$0(_) {
      var js = this.toJson$0();
      return A.getRuntimeTypeOfDartObject(this).toString$0(0) + A.MapBase_mapToString(js);
    }
  };
  A.TonSerialization.prototype = {$isBocSerializableObject: 1};
  A._TonSerialization_Object_JsonSerialization.prototype = {};
  A.AptosWeb3State.prototype = {};
  A.AptosWeb3State_AptosWeb3State_closure.prototype = {
    call$1(e) {
      var t1, t2;
      type$.Web3AptosChainAccount._as(e);
      t1 = e.publicKey;
      t2 = "aptos:" + e.network._name;
      return new A.JSWalletStateAccount(e, A.JSAptosWalletAccount_constructor_setup(e.address.address, t2, A.JSAptosPublicKey_constructor_setup(t1, A.BytesUtils_toHexString(t1, true, "0x")), e.signingScheme), t2, type$.JSWalletStateAccount_AptosAddress_Web3AptosChainAccount_JSObject);
    },
    $signature: 458
  };
  A.AptosWeb3State_AptosWeb3State_closure0.prototype = {
    call$1(e) {
      type$.Web3AptosChainAccount._as(e);
      return e.id === this.authenticated.currentNetwork.id && e._defaultAddress;
    },
    $signature: 459
  };
  A.JSAptosHandler.prototype = {
    createStateEvent$6$accountsChanged$currentState$networkAccountsChanged$networkChanged$networksChanged$previousState(accountsChanged, currentState, networkAccountsChanged, networkChanged, networksChanged, previousState) {
      var $event, chain,
        t1 = type$.AptosWeb3State;
      t1._as(previousState);
      t1._as(currentState);
      $event = this.super$JSWalletStandardNetworkHandler$createStateEvent(accountsChanged, currentState, networkAccountsChanged, networkChanged, networksChanged, previousState);
      if (networkChanged) {
        chain = currentState.defaultChain;
        if (chain != null)
          $event.chainChanged = A.JSAptosNetworkInfo_constructor_setup(chain.chainId, chain.get$aptosChain()._name);
        else
          $event.disconnect = {message: "The Provider is disconnected.", code: 4900};
      }
      return $event;
    },
    request$1(params) {
      return this.request$body$JSAptosHandler(params);
    },
    request$body$JSAptosHandler(params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this, chain, state, method;
      var $async$request$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$request$1);
              case 3:
                // returning from await.
                state = $async$result;
                method = A.Web3AptosRequestMethods_fromName(A._asString(params.method));
                switch (method) {
                  case B.Web3AptosRequestMethods_6Qi:
                    if (state.defaultAccount != null) {
                      $async$returnValue = new A.Web3WalletResponseMessage(null, null, $async$self.get$networkType());
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = $async$self.connect$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3AptosRequestMethods_106_aptos_network_List_empty:
                    if (state.defaultAccount != null) {
                      chain = state.defaultChain;
                      if (chain == null)
                        A.throwExpression(B.Web3RequestException_r5u);
                      $async$returnValue = new A.Web3WalletResponseMessage(null, A.JSAptosNetworkInfo_constructor_setup(chain.chainId, chain.get$aptosChain()._name), $async$self.get$networkType());
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    throw A.wrapException(B.Web3RequestException_r5u);
                  case B.Web3AptosRequestMethods_qFM:
                    method.toString;
                    $async$returnValue = $async$self._aptos$_parseTransaction$3$method$params$state(method, params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3AptosRequestMethods_102_aptos_signMessage_List_empty:
                    $async$returnValue = $async$self._aptos$_signMessage$2$params$state(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3AptosRequestMethods_bYO:
                    $async$returnValue = $async$self._aptos$_parseSwitchChain$2$params$state(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    throw A.wrapException(B.Web3RequestException_qYU);
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$request$1, $async$completer);
    },
    _aptos$_signMessage$2$params$state(params, state) {
      var aptosSignMessage, t1, t2, t3, t4, t5, exception,
        account = state.get$defaultNetworkChainAccountOrThrow();
      try {
        aptosSignMessage = A.PageMessageRequest_elementAs(params, 0, A._setArrayType(["message", "nonce"], type$.JSArray_String), type$.Object);
        if (aptosSignMessage == null) {
          t1 = A.Web3AptosExceptionConstant_invalidAptosSigningMessage();
          throw A.wrapException(t1);
        }
        t1 = A._asString(aptosSignMessage.message);
        t2 = A._asString(aptosSignMessage.nonce);
        t3 = A._asBoolQ(aptosSignMessage.address);
        t4 = A._asBoolQ(aptosSignMessage.chainId);
        t5 = A._asBoolQ(aptosSignMessage.application);
        return new A.Web3AptosSignMessage(t1, t2, t4, t3, t5, null, account);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
        else {
          t1 = A.Web3AptosExceptionConstant_invalidAptosSigningMessage();
          throw A.wrapException(t1);
        }
      }
    },
    _aptos$_parseTransaction$3$method$params$state(method, params, state) {
      var tx, data, data0, chainType, t1, exception, transaction = null, feePayer = null, secondarySignerAddresses = null;
      try {
        t1 = type$.Object;
        tx = A.PageMessageRequest_getElementAt(params, 0, t1);
        if (A._asBool(tx.isMultiAgent)) {
          data = A.AptosMultiAgentTransaction_AptosMultiAgentTransaction$fromStruct(A.BcsSerialization_deserialize(A.APPJSUint8Array_toListInt(t1._as(tx.data)), A.AptosMultiAgentTransaction_layout(null)));
          transaction = data.rawTransaction;
          feePayer = data.feePayerAddress;
          secondarySignerAddresses = data.secondarySignerAddresses;
        } else {
          data0 = A.AptosSimpleTransaction_AptosSimpleTransaction$fromStruct(A.BcsSerialization_deserialize(A.APPJSUint8Array_toListInt(t1._as(tx.data)), A.AptosSimpleTransaction_layout(null)));
          transaction = data0.rawTransaction;
          feePayer = data0.feePayerAddress;
        }
        chainType = A.AptosChainType_fromValue(transaction.chainId);
        t1 = state.defaultChain;
        t1 = t1 == null ? null : t1.get$aptosChain();
        if (!J.$eq$(chainType, t1)) {
          t1 = A.Web3RequestExceptionConst_invalidParameters("Invalid transaction Chain id. Wallet connected to the wrong network.");
          throw A.wrapException(t1);
        }
        t1 = transaction;
        t1 = A.Web3AptosSendTransaction_Web3AptosSendTransaction(state.get$defaultNetworkChainAccountOrThrow(), feePayer, method, secondarySignerAddresses, t1);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
      }
      throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters("Invalid Aptos transaction. The transaction must be a valid Aptos transaction and include a method like bcsToBytes."));
    },
    _aptos$_parseSwitchChain$2$params$state(params, state) {
      return this._parseSwitchChain$body$JSAptosHandler(params, state);
    },
    _parseSwitchChain$body$JSAptosHandler(params, state) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this, networkInfo, chain, t1, t2, exception;
      var $async$_aptos$_parseSwitchChain$2$params$state = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (state.defaultAccount == null)
                throw A.wrapException(B.Web3RequestException_r5u);
              try {
                networkInfo = A.PageMessageRequest_elementAs(params, 0, B.List_empty5, type$.Object);
                if (networkInfo != null) {
                  chain = B.JSArray_methods.firstWhere$2$orElse(state.chains, new A.JSAptosHandler__parseSwitchChain_closure(networkInfo), new A.JSAptosHandler__parseSwitchChain_closure0());
                  t1 = chain.get$aptosChain();
                  t2 = state.defaultChain;
                  if (t1 === (t2 == null ? null : t2.get$aptosChain())) {
                    t1 = A.JSAptosSwitchChainResponse_constructor_success();
                    t2 = $async$self.get$networkType();
                    $async$returnValue = new A.Web3WalletResponseMessage(null, t1, t2);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t1 = $async$self.switchChain$1(chain.id);
                  $async$returnValue = t1;
                  // goto return
                  $async$goto = 1;
                  break;
                }
              } catch (exception) {
                if (A.unwrapException(exception) instanceof A.Web3RequestException)
                  throw exception;
              }
              throw A.wrapException(A.Web3RequestExceptionConst_failedToParse("chainId"));
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_aptos$_parseSwitchChain$2$params$state, $async$completer);
    },
    onRequestDone$1(message) {
    },
    get$networkType() {
      return B.NetworkType_2nn;
    },
    finalizeWalletResponse$3$message$params$response(message, params, response) {
      return this.finalizeWalletResponse$body$JSAptosHandler(message, type$.nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider._as(params), response);
    },
    finalizeWalletResponse$body$JSAptosHandler(message, params, response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this, t1, transactionResponse, _this, t2, t3, t4, t5, t6, t7, t8, t9, state;
      var $async$finalizeWalletResponse$3$message$params$response = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$finalizeWalletResponse$3$message$params$response);
              case 3:
                // returning from await.
                state = $async$result;
                switch (A.Web3AptosRequestMethods_fromName(A._asString(message.method))) {
                  case B.Web3AptosRequestMethods_6Qi:
                    t1 = state.defaultAccount;
                    if (t1 != null) {
                      $async$returnValue = {type: "response", status: "success", data: A.JSAptosWalletStandardUserResponse_constructor_approved(t1.jsAccount, type$.JSObject)};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = {type: "response", status: "success", data: A.JSAptosWalletStandardUserResponse_constructor_rejected(type$.Object)};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3AptosRequestMethods_qFM:
                    transactionResponse = response.resultAsList$1$0(type$.int);
                    t1 = A.BytesUtils_toHexString(transactionResponse, true, "0x");
                    _this = {};
                    t2 = type$.Object;
                    _this.data = t2._as(init.G.Uint8Array.from(A.jsify(transactionResponse)));
                    _this.dataHex = t1;
                    $async$returnValue = {type: "response", status: "success", data: A.JSAptosWalletStandardUserResponse_constructor_approved(_this, t2)};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3AptosRequestMethods_102_aptos_signMessage_List_empty:
                    t1 = response.resultAsMap$0();
                    t2 = type$.int;
                    t3 = J.cast$1$0$ax(type$.List_dynamic._as(t1.$index(0, "signature")), t2);
                    t4 = A._asStringQ(t1.$index(0, "nonce"));
                    t5 = A._asIntQ(t1.$index(0, "chainId"));
                    t6 = A._asStringQ(t1.$index(0, "address"));
                    t7 = A._asStringQ(t1.$index(0, "application"));
                    t8 = A._asStringQ(t1.$index(0, "prefix"));
                    t9 = A._asStringQ(t1.$index(0, "fullMessage"));
                    t1 = A._asStringQ(t1.$index(0, "message"));
                    A.BytesUtils_validateListOfBytes(t3);
                    t2 = A.List_List$unmodifiable(t3, t2);
                    t3 = A.BytesUtils_toHexString(t2, true, "0x");
                    t1.toString;
                    t4.toString;
                    t9.toString;
                    t8.toString;
                    _this = {};
                    _this.address = t6;
                    _this.message = t1;
                    _this.nonce = t4;
                    _this.fullMessage = t9;
                    _this.prefix = t8;
                    _this.application = t7;
                    _this.chainId = t5;
                    t5 = type$.Object;
                    _this.data = t5._as(init.G.Uint8Array.from(A.jsify(t2)));
                    _this.dataHex = t3;
                    $async$returnValue = {type: "response", status: "success", data: A.JSAptosWalletStandardUserResponse_constructor_approved(_this, t5)};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3AptosRequestMethods_bYO:
                    $async$returnValue = {type: "response", status: "success", data: A.JSAptosSwitchChainResponse_constructor_success()};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    break;
                }
                $async$returnValue = $async$self.super$JSWalletStandardNetworkHandler$finalizeWalletResponse(message, params, response);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$finalizeWalletResponse$3$message$params$response, $async$completer);
    },
    finalizeError$3$error$message$params(error, message, params) {
      return this.finalizeError$body$JSAptosHandler(error, message, type$.nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider._as(params));
    },
    finalizeError$body$JSAptosHandler(error, message, params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this, _this, method, t1;
      var $async$finalizeError$3$error$message$params = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                method = A.Web3AptosRequestMethods_fromName(A._asString(message.method));
                t1 = error.code === 4100;
                if (t1 || t1)
                  switch (method) {
                    case B.Web3AptosRequestMethods_6Qi:
                    case B.Web3AptosRequestMethods_yoF:
                    case B.Web3AptosRequestMethods_qFM:
                    case B.Web3AptosRequestMethods_102_aptos_signMessage_List_empty:
                      $async$returnValue = {type: "response", status: "success", data: A.JSAptosWalletStandardUserResponse_constructor_rejected(type$.Object)};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                  }
                else
                  switch (method) {
                    case B.Web3AptosRequestMethods_bYO:
                      _this = {};
                      _this.success = false;
                      _this.reason = error.message;
                      $async$returnValue = {type: "response", status: "success", data: _this};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                  }
                $async$returnValue = $async$self.super$JSWalletStandardNetworkHandler$finalizeError(error, message, params);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$finalizeError$3$error$message$params, $async$completer);
    },
    createState$1(authenticated) {
      if (authenticated == null)
        return A.AptosWeb3State$_(B.List_empty7, A._setArrayType([], type$.JSArray_Web3AptosChainIdnetifier), null, null, B.JSNetworkState_1);
      return A.AptosWeb3State_AptosWeb3State(authenticated.getAuth$1$1(B.NetworkType_2nn, type$.Web3AptosChainAuthenticated));
    },
    createEvent$1($event) {
      return this.createEvent$body$JSAptosHandler($event);
    },
    createEvent$body$JSAptosHandler($event) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_JSObject),
        $async$returnValue, $async$self = this, chain, state;
      var $async$createEvent$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$createEvent$1);
              case 3:
                // returning from await.
                state = $async$result;
                switch ($event) {
                  case B.JSEventType_1:
                    $event = A.JSWalletNetworkEvent_constructor_(null, null, A._setArrayType([B.JSNetworkEventType_2], type$.JSArray_JSNetworkEventType), null, null);
                    chain = state.defaultChain;
                    if (chain != null)
                      $event.chainChanged = A.JSAptosNetworkInfo_constructor_setup(chain.chainId, chain.get$aptosChain()._name);
                    else
                      $event.disconnect = {message: "The Provider is disconnected.", code: 4900};
                    $async$returnValue = $event;
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    $async$returnValue = $async$self.super$JSWalletStandardNetworkHandler$createEvent($event);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$createEvent$1, $async$completer);
    }
  };
  A.JSAptosHandler__parseSwitchChain_closure.prototype = {
    call$1(e) {
      return type$.Web3AptosChainIdnetifier._as(e).get$aptosChain() === A.AptosChainType_fromValue(A._asIntQ(this.networkInfo.chainId));
    },
    $signature: 460
  };
  A.JSAptosHandler__parseSwitchChain_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_UFn);
    },
    $signature: 0
  };
  A.JSBitcoinWalletAccount_constructor_setup_closure.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 4
  };
  A.BitcoinWeb3State.prototype = {};
  A.BitcoinWeb3State_BitcoinWeb3State_closure.prototype = {
    call$1(e) {
      var t1, t2, t3, t4;
      type$.Web3BitcoinChainAccount._as(e);
      t1 = e.network;
      t2 = e.address.toAddress$1(t1);
      t3 = e.type;
      t4 = A.BitcoinJSConstant_accountFeatures(t1.get$identifier(), t3.get$supportBip137());
      return new A.JSWalletStateAccount(e, A.JSBitcoinWalletAccount_constructor_setup(t2, t1.get$identifier(), t4, e.publicKey, e.redeemScript, t3.value, e.witnessScript), t1.get$identifier(), type$.JSWalletStateAccount_BitcoinBaseAddress_Web3BitcoinChainAccount_JSObject);
    },
    $signature: 461
  };
  A.BitcoinWeb3State_BitcoinWeb3State_closure0.prototype = {
    call$1(e) {
      type$.Web3BitcoinChainAccount._as(e);
      return e.id === this.authenticated.currentNetwork.id && e._defaultAddress;
    },
    $signature: 157
  };
  A.JSBitcoinHandler.prototype = {
    request$1(params) {
      return this.request$body$JSBitcoinHandler(params);
    },
    request$body$JSBitcoinHandler(params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this, state, method;
      var $async$request$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$request$1);
              case 3:
                // returning from await.
                state = $async$result;
                method = A.Web3BitcoinRequestMethods_fromName(A._asString(params.method));
                switch (method) {
                  case B.Web3BitcoinRequestMethods_kIu:
                    if (state.accounts.length !== 0) {
                      $async$returnValue = new A.Web3WalletResponseMessage(null, null, $async$self.get$networkType());
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = $async$self.connect$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3BitcoinRequestMethods_2wh:
                    $async$returnValue = $async$self._parseTransaction$2$params$state(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3BitcoinRequestMethods_C8u:
                    $async$returnValue = $async$self._parseSendTransaction$2$params$state(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3BitcoinRequestMethods_9zY:
                    method.toString;
                    $async$returnValue = $async$self._signMessage$3$method$params$state(method, params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    throw A.wrapException(B.Web3RequestException_qYU);
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$request$1, $async$completer);
    },
    _parseOutput$2(output, network) {
      var amount, outputScript, scriptBytes, address, t1, exception;
      try {
        amount = A.BigintUtils_tryParse(A._asStringQ(output.value));
        t1 = true;
        if (amount != null)
          if (amount.compareTo$1(0, $.$get$maxU64()) <= 0)
            if (!amount._isNegative)
              if (!(A._asStringQ(output.address) != null && A._asStringQ(output.script) != null))
                t1 = A._asStringQ(output.address) == null && A._asStringQ(output.script) == null;
        if (t1) {
          t1 = A.Web3BitcoinExceptionConstant_invalidOutput();
          throw A.wrapException(t1);
        }
        outputScript = null;
        if (A._asStringQ(output.script) != null) {
          t1 = A._asStringQ(output.script);
          t1.toString;
          scriptBytes = A.BytesUtils_tryFromHexString(t1, false);
          outputScript = A.MethodUtils_nullOnException(new A.JSBitcoinHandler__parseOutput_closure(scriptBytes), type$.Script);
          if (outputScript == null || !A.BytesUtils_bytesEqual(scriptBytes, A.ListHelper_clone(outputScript._scriptBytes, type$.int))) {
            t1 = A.getProperty(output, "script", type$.nullable_String);
            t1.toString;
            t1 = A.Web3RequestExceptionConst_message("Failed to parse output script. Please ensure it is a valid Bitcoin script serialized as hex.", t1);
            throw A.wrapException(t1);
          }
        } else {
          t1 = A._asStringQ(output.address);
          t1.toString;
          address = A.BitcoinNetworkAddress_tryParse(t1, network, type$.BitcoinNetworkAddress_BasedUtxoNetwork);
          if (address == null) {
            t1 = A.getProperty(output, "address", type$.nullable_String);
            t1.toString;
            t1 = A.Web3RequestExceptionConst_message("Failed to parse " + network.get$value() + " address.", t1);
            throw A.wrapException(t1);
          }
          outputScript = address.baseAddress.toScriptPubKey$0();
        }
        t1 = outputScript;
        t1 = A.Web3BitcoinSendTransactionOutput_Web3BitcoinSendTransactionOutput(A._asStringQ(output.address), t1, amount);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
        else {
          t1 = A.Web3BitcoinExceptionConstant_invalidOutput();
          throw A.wrapException(t1);
        }
      }
    },
    _parseSendTransaction$2$params$state(params, state) {
      var transactions, accounts, addresses, i, account, network, outputs, txOutputs, t1, addresses0, t2, t3, t4, outputs0, txOutputs0, exception;
      try {
        transactions = A.PageMessageRequest_elementAs(params, 0, B.List_accounts_outputs, type$.Object);
        if (transactions == null) {
          t1 = A.Web3BitcoinExceptionConstant_invalidSendTransaction();
          throw A.wrapException(t1);
        }
        accounts = A._setArrayType([], type$.JSArray_Web3BitcoinChainAccount);
        t1 = type$.JSArray_nullable_Object;
        addresses0 = t1._as(transactions.accounts);
        t2 = type$.List_Object;
        addresses = t2._is(addresses0) ? addresses0 : new A.CastList(addresses0, A._arrayInstanceType(addresses0)._eval$1("CastList<1,Object>"));
        for (t3 = J.get$iterator$ax(addresses); t3.moveNext$0();) {
          i = t3.get$current();
          account = state.getJsAddressChainAccountOrThrow$1(i);
          J.add$1$ax(accounts, account);
        }
        if (J.get$isEmpty$asx(addresses))
          throw A.wrapException(B.Web3RequestException_r5u);
        t3 = accounts;
        t4 = A._arrayInstanceType(t3);
        if (new A.MappedListIterable(t3, t4._eval$1("BasedUtxoNetwork(1)")._as(new A.JSBitcoinHandler__parseSendTransaction_closure()), t4._eval$1("MappedListIterable<1,BasedUtxoNetwork>")).toSet$0(0)._collection$_length !== 1) {
          t1 = A.Web3BitcoinExceptionConstant_invalidTransactionAccount();
          throw A.wrapException(t1);
        }
        network = J.$index$asx(accounts, 0).network;
        outputs0 = t1._as(transactions.outputs);
        outputs = t2._is(outputs0) ? outputs0 : new A.CastList(outputs0, A._arrayInstanceType(outputs0)._eval$1("CastList<1,Object>"));
        t1 = J.map$1$1$ax(outputs, new A.JSBitcoinHandler__parseSendTransaction_closure0(this, network), type$.Web3BitcoinSendTransactionOutput);
        txOutputs0 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
        txOutputs = txOutputs0;
        if (J.get$length$asx(txOutputs) === 0) {
          t1 = A.Web3BitcoinExceptionConstant_emptyOutput();
          throw A.wrapException(t1);
        }
        t1 = A.Web3BitcoinSendTransaction_Web3BitcoinSendTransaction(accounts, txOutputs, null);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
      }
      throw A.wrapException(A.Web3BitcoinExceptionConstant_invalidSendTransaction());
    },
    _parseTransaction$2$params$state(params, state) {
      var transactions, psbt, accounts, addresses, i, account, inputs, output, spenderAccounts, builder, i0, psbtInput, account0, t1, decode, addresses0, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, txInputs, t28, t29, scriptPubKey, address, exception, _null = null;
      try {
        transactions = A.PageMessageRequest_elementAs(params, 0, B.List_accounts_psbt, type$.Object);
        if (transactions == null) {
          t1 = A.Web3BitcoinExceptionConstant_invalidTransaction();
          throw A.wrapException(t1);
        }
        decode = A.StringUtils_tryEncode(A._asString(transactions.psbt), B.StringEncoding_2);
        if (decode == null)
          A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT base64: Decoding failed or malformed input.", _null));
        psbt = A.Psbt_Psbt$deserialize(decode);
        accounts = A._setArrayType([], type$.JSArray_Web3BitcoinChainAccount);
        addresses0 = type$.JSArray_nullable_Object._as(transactions.accounts);
        addresses = type$.List_Object._is(addresses0) ? addresses0 : new A.CastList(addresses0, A._arrayInstanceType(addresses0)._eval$1("CastList<1,Object>"));
        for (t1 = J.get$iterator$ax(addresses); t1.moveNext$0();) {
          i = t1.get$current();
          account = state.getJsAddressChainAccountOrThrow$1(i);
          J.add$1$ax(accounts, account);
        }
        if (J.get$isEmpty$asx(addresses))
          throw A.wrapException(B.Web3RequestException_r5u);
        t1 = accounts;
        t2 = A._arrayInstanceType(t1);
        if (new A.MappedListIterable(t1, t2._eval$1("BasedUtxoNetwork(1)")._as(new A.JSBitcoinHandler__parseTransaction_closure()), t2._eval$1("MappedListIterable<1,BasedUtxoNetwork>")).toSet$0(0)._collection$_length !== 1) {
          t1 = A.Web3BitcoinExceptionConstant_invalidTransactionAccount();
          throw A.wrapException(t1);
        }
        inputs = psbt.input._inputs$_entries.length;
        output = psbt.output._entries.length;
        if (J.$eq$(inputs, 0) || J.$eq$(output, 0)) {
          t1 = A.Web3RequestExceptionConst_invalidParameters("Invalid PSBT. Missing required inputs or outputs.");
          throw A.wrapException(t1);
        }
        t1 = type$.Web3BitcoinChainAccount;
        spenderAccounts = A.LinkedHashSet_LinkedHashSet$_empty(t1);
        builder = A.PsbtBuilder_fromPsbt(psbt, type$.PsbtBuilder);
        i0 = 0;
        t2 = type$.PsbtInputBip32DerivationPath;
        t3 = type$.PsbtInputHash160;
        t4 = type$.PsbtInputHash256;
        t5 = type$.PsbtInputMuSig2ParticipantPartialSignature;
        t6 = type$.PsbtInputMuSig2ParticipantPublicKeys;
        t7 = type$.PsbtInputMuSig2PublicNonce;
        t8 = type$.PsbtInputPartialSig;
        t9 = type$.PsbtInputNonWitnessUtxo;
        t10 = type$.PsbtInputPorCommitments;
        t11 = type$.PsbtInputRedeemScript;
        t12 = type$.PsbtInputRipemd160;
        t13 = type$.PsbtInputSha256;
        t14 = type$.PsbtInputProprietaryUseType;
        t15 = type$.PsbtInputSigHash;
        t16 = type$.PsbtInputTaprootInternalKey;
        t17 = type$.PsbtInputTaprootKeyBip32DerivationPath;
        t18 = type$.PsbtInputTaprootLeafScript;
        t19 = type$.PsbtInputTaprootScriptSpendSignature;
        t20 = type$.PsbtInputWitnessUtxo;
        t21 = type$.PsbtInputWitnessScript;
        t22 = type$.PsbtInputTaprootMerkleRoot;
        t23 = type$.PsbtInputTaprootKeySpendSignature;
        t24 = type$.PsbtInputFinalizedScriptSig;
        t25 = type$.PsbtInputFinalizedScriptWitness;
        while (true) {
          t26 = i0;
          t27 = inputs;
          if (typeof t26 !== "number")
            return t26.$lt();
          if (typeof t27 !== "number")
            return A.iae(t27);
          if (!(t26 < t27))
            break;
          t26 = builder;
          t27 = A._asInt(i0);
          txInputs = t26.txInputs$0();
          t26 = t26._psbt.input;
          t28 = txInputs.length;
          t29 = t26._inputs$_entries.length;
          if (t27 >= t29)
            A.throwExpression(A.DartBitcoinPluginException$("Invalid input index: " + t27 + ". The PSBT contains only " + t26.get$length(0) + " inputs.", _null));
          if (t28 !== t29)
            A.throwExpression(A.DartBitcoinPluginException$("Invalid PSBT: transaction inputs length does not match PSBT inputs length.", _null));
          if (!(t27 >= 0 && t27 < t28))
            return A.ioore(txInputs, t27);
          scriptPubKey = A.PsbtUtils_getInputScriptPubKey(t27, txInputs[t27], t26);
          if (A.BitcoinScriptUtils_isP2wpkh(scriptPubKey)) {
            t28 = scriptPubKey.script;
            if (1 >= t28.length)
              return A.ioore(t28, 1);
            address = new A.P2wpkhAddress(A._BitcoinAddressUtils_validateAddressProgram(A._asString(t28[1]), B.SegwitAddressType_P2WPKH), 0);
          } else if (A.BitcoinScriptUtils_isP2pkh(scriptPubKey)) {
            t28 = scriptPubKey.script;
            if (2 >= t28.length)
              return A.ioore(t28, 2);
            address = new A.P2pkhAddress(B.P2pkhAddressType_P2PKH, A._BitcoinAddressUtils_validateAddressProgram(A._asString(t28[2]), B.P2pkhAddressType_P2PKH));
          } else if (A.BitcoinScriptUtils_isP2pk(scriptPubKey)) {
            t28 = scriptPubKey.script;
            if (0 >= t28.length)
              return A.ioore(t28, 0);
            t28 = A._asString(t28[0]);
            if (!A.Secp256k1PublicKey_isValidBytes(A.BytesUtils_fromHexString(t28, false)))
              A.throwExpression(B.DartBitcoinPluginException_Zyd);
            address = new A.P2pkAddress(A.StringUtils_strip0x(t28.toLowerCase()), $);
          } else if (A.BitcoinScriptUtils_isP2sh(scriptPubKey)) {
            t28 = scriptPubKey.script;
            if (1 >= t28.length)
              return A.ioore(t28, 1);
            address = new A.P2shAddress(B.P2shAddressType_vvf, A._BitcoinAddressUtils_validateAddressProgram(A._asString(t28[1]), B.P2shAddressType_vvf));
          } else if (A.BitcoinScriptUtils_isP2sh32(scriptPubKey)) {
            t28 = scriptPubKey.script;
            if (1 >= t28.length)
              return A.ioore(t28, 1);
            address = new A.P2shAddress(B.P2shAddressType_yON, A._BitcoinAddressUtils_validateAddressProgram(A._asString(t28[1]), B.P2shAddressType_yON));
          } else if (A.BitcoinScriptUtils_isP2wsh(scriptPubKey)) {
            t28 = scriptPubKey.script;
            if (1 >= t28.length)
              return A.ioore(t28, 1);
            address = new A.P2wshAddress(A._BitcoinAddressUtils_validateAddressProgram(A._asString(t28[1]), B.SegwitAddressType_P2WSH), 0);
          } else if (A.BitcoinScriptUtils_isP2tr(scriptPubKey)) {
            t28 = scriptPubKey.script;
            if (1 >= t28.length)
              return A.ioore(t28, 1);
            address = new A.P2trAddress(A._BitcoinAddressUtils_validateAddressProgram(A._asString(t28[1]), B.SegwitAddressType_P2TR), 1);
          } else
            address = _null;
          if (address == null || !address.toScriptPubKey$0().$eq(0, scriptPubKey))
            A.throwExpression(A.DartBitcoinPluginException$("Unknown scriptPubKey: Unable to generate a valid address.", _null));
          t26.getInputs$1$2(t27, B.PsbtInputTypes_Dje, t2);
          t26.getInputs$1$2(t27, B.PsbtInputTypes_RiO, t3);
          t26.getInputs$1$2(t27, B.PsbtInputTypes_htP, t4);
          t26.getInputs$1$2(t27, B.PsbtInputTypes_Dni, t5);
          t26.getInputs$1$2(t27, B.PsbtInputTypes_Z4Y, t6);
          t26.getInputs$1$2(t27, B.PsbtInputTypes_mT2, t7);
          t26.getInputs$1$2(t27, B.PsbtInputTypes_stM, t8);
          t26.getInput$1$2(t27, B.PsbtInputTypes_kAy, t9);
          t26.getInput$1$2(t27, B.PsbtInputTypes_NDL, t10);
          t26.getInput$1$2(t27, B.PsbtInputTypes_Icn, t11);
          t26.getInputs$1$2(t27, B.PsbtInputTypes_QB6, t12);
          t26.getInputs$1$2(t27, B.PsbtInputTypes_XkO, t13);
          t26.getInputs$1$2(t27, B.PsbtInputTypes_gBp, t14);
          t26.getInput$1$2(t27, B.PsbtInputTypes_yXA, t15);
          t26.getInput$1$2(t27, B.PsbtInputTypes_2Rv, t16);
          t26.getInputs$1$2(t27, B.PsbtInputTypes_Dje, t17);
          t26.getInputs$1$2(t27, B.PsbtInputTypes_9aL, t18);
          t26.getInputs$1$2(t27, B.PsbtInputTypes_vjI, t19);
          t26.getInput$1$2(t27, B.PsbtInputTypes_NZJ, t20);
          t26.getInput$1$2(t27, B.PsbtInputTypes_6OA, t21);
          t26.getInput$1$2(t27, B.PsbtInputTypes_Xfr, t22);
          t26.getInput$1$2(t27, B.PsbtInputTypes_Wq6, t23);
          t26.getInput$1$2(t27, B.PsbtInputTypes_N6D, t24);
          t26.getInput$1$2(t27, B.PsbtInputTypes_T86, t25);
          psbtInput = new A.PsbtTransactionInput(address, scriptPubKey);
          account0 = A.QuickImutableList_firstWhereOrNull(accounts, new A.JSBitcoinHandler__parseTransaction_closure0(psbtInput), t1);
          if (account0 != null)
            J.add$1$ax(spenderAccounts, account0);
          t26 = i0;
          if (typeof t26 !== "number")
            return t26.$add();
          i0 = t26 + 1;
        }
        if (spenderAccounts._collection$_length === 0) {
          t1 = A.Web3RequestExceptionConst_message("No related inputs found for signing.", _null);
          throw A.wrapException(t1);
        }
        t1 = spenderAccounts;
        t1 = A.List_List$_of(t1, A._instanceType(t1)._precomputed1);
        t1 = A.Web3BitcoinSignTransaction_Web3BitcoinSignTransaction(t1, psbt);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
      }
      throw A.wrapException(A.Web3BitcoinExceptionConstant_invalidTransaction());
    },
    _signMessage$3$method$params$state(method, params, state) {
      var message, messageBytes, $content, account, t1, t2, exception;
      try {
        t1 = type$.Object;
        message = A.PageMessageRequest_getElementAt(params, 0, t1);
        messageBytes = A.APPJSUint8Array_toListInt(t1._as(message.message));
        $content = A.StringUtils_tryDecode(messageBytes, B.StringEncoding_1);
        account = state.getJsAddressChainAccountOrThrow$1(t1._as(message.account));
        if (!account.type.get$supportBip137()) {
          t1 = A.Web3RequestExceptionConst_message("The account " + account.get$addressStr() + " does not support message signing. Only P2PKH, P2WPKH, and P2WPKH-P2SH addresses are allowed to sign messages.", null);
          throw A.wrapException(t1);
        }
        t1 = A.BytesUtils_toHexString(messageBytes, true, null);
        t2 = A._asStringQ(message.messagePrefix);
        return new A.Web3BitcoinSignMessage(t1, t2, $content, account);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
        else {
          t1 = A.Web3RequestExceptionConst_invalidWalletStandardSignMessage();
          throw A.wrapException(t1);
        }
      }
    },
    onRequestDone$1(message) {
    },
    finalizeWalletResponse$3$message$params$response(message, params, response) {
      return this.finalizeWalletResponse$body$JSBitcoinHandler(message, type$.nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider._as(params), response);
    },
    finalizeWalletResponse$body$JSBitcoinHandler(message, params, response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this, _this, t1, t2, t3, state;
      var $async$finalizeWalletResponse$3$message$params$response = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$finalizeWalletResponse$3$message$params$response);
              case 3:
                // returning from await.
                state = $async$result;
                switch (A.Web3BitcoinRequestMethods_fromName(A._asString(message.method))) {
                  case B.Web3BitcoinRequestMethods_kIu:
                    if (state.accounts.length !== 0) {
                      $async$returnValue = {type: "response", status: "success", data: A.JSWalletStandardConnect_constructor_setup(state.get$jsAccounts())};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = {type: "response", status: "failed", data: A.jsify(B.Web3RequestException_MuE.toResponseMessage$0().toJson$0())};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3BitcoinRequestMethods_2wh:
                    _this = {};
                    _this.psbt = response.resultAsString$0();
                    $async$returnValue = {type: "response", status: "success", data: _this};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3BitcoinRequestMethods_C8u:
                    _this = {};
                    _this.txId = response.resultAsString$0();
                    $async$returnValue = {type: "response", status: "success", data: _this};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3BitcoinRequestMethods_9zY:
                    t1 = response.resultAsMap$0();
                    t2 = type$.int;
                    t3 = J.cast$1$0$ax(type$.List_dynamic._as(t1.$index(0, "digest")), t2);
                    t1 = A._asString(t1.$index(0, "signature"));
                    A.BytesUtils_validateListOfBytes(t3);
                    t2 = A.List_List$unmodifiable(t3, t2);
                    _this = {};
                    _this.signature = t1;
                    _this.digest = type$.Object._as(init.G.Uint8Array.from(A.jsify(t2)));
                    $async$returnValue = {type: "response", status: "success", data: _this};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    break;
                }
                $async$returnValue = $async$self.super$JSWalletStandardNetworkHandler$finalizeWalletResponse(message, params, response);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$finalizeWalletResponse$3$message$params$response, $async$completer);
    },
    get$networkType() {
      return B.NetworkType_ugS;
    },
    createState$1(authenticated) {
      if (authenticated == null)
        return A.BitcoinWeb3State$_(B.List_empty3, A._setArrayType([], type$.JSArray_Web3ChainDefaultIdnetifier), null, null, B.JSNetworkState_1);
      return A.BitcoinWeb3State_BitcoinWeb3State(authenticated.getAuth$1$1(B.NetworkType_ugS, type$.Web3BitcoinChainAuthenticated));
    }
  };
  A.JSBitcoinHandler__parseOutput_closure.prototype = {
    call$0() {
      var t1 = this.scriptBytes;
      t1.toString;
      return A.Script_Script$deserialize(t1);
    },
    $signature: 463
  };
  A.JSBitcoinHandler__parseSendTransaction_closure.prototype = {
    call$1(e) {
      return type$.Web3BitcoinChainAccount._as(e).network;
    },
    $signature: 47
  };
  A.JSBitcoinHandler__parseSendTransaction_closure0.prototype = {
    call$1(e) {
      return this.$this._parseOutput$2(type$.Object._as(e), this.network);
    },
    $signature: 464
  };
  A.JSBitcoinHandler__parseTransaction_closure.prototype = {
    call$1(e) {
      return type$.Web3BitcoinChainAccount._as(e).network;
    },
    $signature: 47
  };
  A.JSBitcoinHandler__parseTransaction_closure0.prototype = {
    call$1(e) {
      return type$.Web3BitcoinChainAccount._as(e).address.toScriptPubKey$0().$eq(0, this.psbtInput.scriptPubKey);
    },
    $signature: 157
  };
  A.MessageCompleterHandler.prototype = {
    complete$2$requestId$response(requestId, response) {
      var completer = this._awaitingMessages.remove$1(0, requestId);
      if (completer != null)
        completer._completer.complete$1(response);
    }
  };
  A.MessageCompleter.prototype = {};
  A.CosmosAddNewChainParams_toJson_closure.prototype = {
    call$1(e) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      type$.Object._as(e);
      t1 = A._asStringQ(e.name);
      t2 = A._asStringQ(e.symbol);
      t3 = A._asStringQ(e.denom);
      t4 = A._asIntQ(e.decimals);
      t5 = A._asStringQ(e.coingeckoId);
      t6 = A._asDoubleQ(e.low);
      if (t6 == null)
        t6 = null;
      t7 = A._asDoubleQ(e.average);
      if (t7 == null)
        t7 = null;
      t8 = A._asDoubleQ(e.high);
      return A.LinkedHashMap_LinkedHashMap$_literal(["name", t1, "symbol", t2, "denom", t3, "decimals", t4, "coingeckoId", t5, "low", t6, "average", t7, "high", t8 == null ? null : t8], type$.String, type$.dynamic);
    },
    $signature: 465
  };
  A.CosmosWeb3State.prototype = {
    chainExist$1(chainId) {
      return B.JSArray_methods.any$1(this.chains, new A.CosmosWeb3State_chainExist_closure(chainId));
    },
    getChainIdJsAccounts$1(chainId) {
      var t1 = this.accounts,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedIterable<1,JSObject>");
      t1 = A.List_List$_of(new A.MappedIterable(new A.WhereIterable(t1, t2._eval$1("bool(1)")._as(new A.CosmosWeb3State_getChainIdJsAccounts_closure(B.JSArray_methods.firstWhere$2$orElse(this.chains, new A.CosmosWeb3State_getChainIdJsAccounts_closure0(chainId), new A.CosmosWeb3State_getChainIdJsAccounts_closure1()))), t2._eval$1("WhereIterable<1>")), t2._eval$1("JSObject(1)")._as(new A.CosmosWeb3State_getChainIdJsAccounts_closure2()), t3), t3._eval$1("Iterable.E"));
      return t1;
    }
  };
  A.CosmosWeb3State_chainExist_closure.prototype = {
    call$1(e) {
      return type$.Web3CosmoshainIdnetifier._as(e).chainId === this.chainId;
    },
    $signature: 141
  };
  A.CosmosWeb3State_getChainIdJsAccounts_closure0.prototype = {
    call$1(e) {
      return type$.Web3CosmoshainIdnetifier._as(e).chainId === this.chainId;
    },
    $signature: 141
  };
  A.CosmosWeb3State_getChainIdJsAccounts_closure1.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_UFn);
    },
    $signature: 0
  };
  A.CosmosWeb3State_getChainIdJsAccounts_closure.prototype = {
    call$1(e) {
      return type$.JSWalletStateAccount_CosmosBaseAddress_Web3CosmosChainAccount_JSObject._as(e).identifier === "cosmos:" + this.network.chainId;
    },
    $signature: 467
  };
  A.CosmosWeb3State_getChainIdJsAccounts_closure2.prototype = {
    call$1(e) {
      return type$.JSWalletStateAccount_CosmosBaseAddress_Web3CosmosChainAccount_JSObject._as(e).jsAccount;
    },
    $signature: 468
  };
  A.CosmosWeb3State_CosmosWeb3State_closure.prototype = {
    call$1(e) {
      var t1, t2, t3, t4;
      type$.Web3CosmosChainAccount._as(e);
      t1 = e.algo;
      t2 = t1.get$pubKeyTypeUrl();
      t3 = this.networks;
      t4 = e.id;
      return new A.JSWalletStateAccount(e, A.JSCosmosWalletAccount_constructor_setup(e.address.address, t1._name, "cosmos:" + t3.$index(0, t4).chainId, e.publicKey, t2.typeUrl), "cosmos:" + t3.$index(0, t4).chainId, type$.JSWalletStateAccount_CosmosBaseAddress_Web3CosmosChainAccount_JSObject);
    },
    $signature: 469
  };
  A.CosmosWeb3State_CosmosWeb3State_closure0.prototype = {
    call$1(e) {
      type$.Web3CosmosChainAccount._as(e);
      return e.id === this.authenticated.currentNetwork.id && e._defaultAddress;
    },
    $signature: 470
  };
  A.JSCosmosHandler.prototype = {
    request$1(params) {
      return this.request$body$JSCosmosHandler(params);
    },
    request$body$JSCosmosHandler(params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this, state, method;
      var $async$request$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$request$1);
              case 3:
                // returning from await.
                state = $async$result;
                method = A.Web3CosmosRequestMethods_fromName(A._asString(params.method));
                switch (method) {
                  case B.Web3CosmosRequestMethods_PJw:
                    if (state.accounts.length !== 0) {
                      $async$returnValue = new A.Web3WalletResponseMessage(null, null, $async$self.get$networkType());
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = $async$self.connect$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3CosmosRequestMethods_VZC:
                    method.toString;
                    $async$returnValue = $async$self._parseDirectTransaction$3$method$params$state(method, params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3CosmosRequestMethods_Rzj:
                    method.toString;
                    $async$returnValue = $async$self._parseSignTransaction$3$method$params$state(method, params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3CosmosRequestMethods_fHX:
                    method.toString;
                    $async$returnValue = $async$self._parseAminoTransaction$3$method$params$state(method, params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3CosmosRequestMethods_101_cosmos_signMessage_List_empty:
                    $async$returnValue = $async$self._cosmos$_signMessage$2$params$state(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3CosmosRequestMethods_gCv:
                    $async$returnValue = $async$self._parseSwitchChain$2$params$state(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3CosmosRequestMethods_103_cosmos_addNewChain_List_empty:
                    $async$returnValue = $async$self._parseAddNewChain$2$params$state(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    throw A.wrapException(B.Web3RequestException_qYU);
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$request$1, $async$completer);
    },
    _parseAddNewChain$2$params$state(params, state) {
      var request, t1, exception,
        param = A.PageMessageRequest_elementAs(params, 0, B.List_rpc_chainId, type$.Object);
      if (param == null)
        throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters("Invalid chainId or rpc. The parameters must contain both 'chainId' and 'rpc' as string."));
      try {
        request = A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson(A.CosmosAddNewChainParams_toJson(param));
        if (state.chainExist$1(request.chainId)) {
          t1 = this.get$networkType();
          return new A.Web3WalletResponseMessage(null, true, t1);
        }
        return request;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
        else
          throw A.wrapException(B.Web3RequestException_pXe);
      }
    },
    _cosmos$_signMessage$2$params$state(params, state) {
      var signingMessage, messageBytes, challeng, $content, t1, exception;
      try {
        t1 = type$.Object;
        signingMessage = A.PageMessageRequest_elementAs(params, 0, $.JSCosmosSignMessageParams_properties, t1);
        if (signingMessage != null) {
          messageBytes = A.APPJSUint8Array_toListInt(t1._as(signingMessage.message));
          challeng = A.BytesUtils_toHexString(messageBytes, true, null);
          $content = A.StringUtils_tryDecode(messageBytes, B.StringEncoding_1);
          t1 = state.getJsAddressChainAccountOrThrow$1(type$.JSObject._as(signingMessage.account));
          return new A.Web3CosmosSignMessage(challeng, $content, t1);
        }
      } catch (exception) {
      }
      throw A.wrapException(A.Web3RequestExceptionConst_invalidWalletStandardSignMessage());
    },
    _parseAminoTransaction$3$method$params$state(method, params, state) {
      return this._parseAminoTransaction$body$JSCosmosHandler(method, params, state);
    },
    _parseAminoTransaction$body$JSCosmosHandler(method, params, state) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3CosmosSignTransaction),
        $async$returnValue, request, amino, e, t1, t2, t3, t4, t5, exception;
      var $async$_parseAminoTransaction$3$method$params$state = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              try {
                request = A.PageMessageRequest_elementAs(params, 0, B.List_signerAddress_chainId_signDoc, type$.Object);
                if (!state.chainExist$1(A._asString(request.chainId)))
                  throw A.wrapException(B.Web3RequestException_UFn);
                amino = A.AminoTx_AminoTx$fromJson(A.StringUtils_toJson(A._asString(request.signDoc), null, type$.Map_String_dynamic));
                if (amino.chainId !== A._asString(request.chainId)) {
                  t1 = A.Web3CosmosExceptionConstant_mismatchChainId();
                  throw A.wrapException(t1);
                }
                t1 = state.getJsAddressChainAccountOrThrow$1(A._asString(request.signerAddress));
                t2 = A._asString(request.chainId);
                t3 = request.signOption;
                t3 = t3 == null ? null : A._asBoolQ(t3.disableBalanceCheck);
                t4 = request.signOption;
                t4 = t4 == null ? null : A._asBoolQ(t4.preferNoSetFee);
                t5 = request.signOption;
                t5 = t5 == null ? null : A._asBoolQ(t5.preferNoSetMemo);
                t5 = A.Web3CosmosSignTransaction_Web3CosmosSignTransaction(t1, t2, t3, t4, t5, new A.Web3CosmosSignTransactionAminoParams(amino, B.Web3CosmosRequestMethods_fHX));
                $async$returnValue = t5;
                // goto return
                $async$goto = 1;
                break;
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (t1 instanceof A.Web3RequestException)
                  throw exception;
                else if (t1 instanceof A.AminoJsonParserException) {
                  e = t1;
                  throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters(e.message));
                } else
                  throw exception;
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_parseAminoTransaction$3$method$params$state, $async$completer);
    },
    _parseSignTransaction$3$method$params$state(method, params, state) {
      return this._parseSignTransaction$body$JSCosmosHandler(method, params, state);
    },
    _parseSignTransaction$body$JSCosmosHandler(method, params, state) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3CosmosSignTransaction),
        $async$returnValue, param, bytes, $toString, toJson, account, chain, aminoTx, signDoc, t1, decode, t2, t3, t4, exception;
      var $async$_parseSignTransaction$3$method$params$state = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              try {
                t1 = type$.Object;
                param = A.PageMessageRequest_elementAs(params, 0, B.List_account_transaction, t1);
                bytes = A.APPJSUint8Array_toListInt(t1._as(param.transaction));
                $toString = A.StringUtils_tryDecode(bytes, B.StringEncoding_1);
                toJson = A.StringUtils_toJson($toString, null, type$.dynamic);
                t1 = type$.nullable_JSObject;
                account = state.getJsAddressChainAccountOrThrow$1(t1._as(param.account));
                chain = state.getAccountChain$1(account);
                if (toJson != null) {
                  aminoTx = A.AminoTx_AminoTx$fromJson(type$.Map_String_dynamic._as(toJson));
                  if (aminoTx.chainId !== chain.chainId) {
                    t1 = A.Web3RequestExceptionConst_mismatchAccountAndTransactionChainId();
                    throw A.wrapException(t1);
                  }
                  t1 = A.Web3CosmosSignTransaction_Web3CosmosSignTransaction(state.getJsAddressChainAccountOrThrow$1(t1._as(param.account)), aminoTx.chainId, null, null, null, new A.Web3CosmosSignTransactionAminoParams(aminoTx, B.Web3CosmosRequestMethods_fHX));
                  $async$returnValue = t1;
                  // goto return
                  $async$goto = 1;
                  break;
                } else {
                  decode = A.ProtocolBufferDecoder_decode(bytes);
                  t1 = type$.List_int;
                  t2 = A.QuickProtocolBufferResults_getField(decode, 1, t1);
                  t1 = A.QuickProtocolBufferResults_getField(decode, 2, t1);
                  t3 = A.QuickProtocolBufferResults_getField(decode, 3, type$.String);
                  t4 = A.QuickProtocolBufferResults_getField(decode, 4, type$.BigInt);
                  signDoc = new A.SignDoc(A.BytesUtils_toBytes(t2, true), A.BytesUtils_toBytes(t1, true), t3, t4);
                  if (signDoc.chainId !== chain.chainId) {
                    t1 = A.Web3RequestExceptionConst_mismatchAccountAndTransactionChainId();
                    throw A.wrapException(t1);
                  }
                  t1 = signDoc.chainId;
                  t2 = signDoc.accountNumber;
                  t3 = signDoc.bodyBytes;
                  t3 = A.Web3CosmosSignTransaction_Web3CosmosSignTransaction(account, t1, null, null, null, A.Web3CosmosSignTransactionDirectParams$(t2, signDoc.authInfoBytes, t3));
                  $async$returnValue = t3;
                  // goto return
                  $async$goto = 1;
                  break;
                }
              } catch (exception) {
                if (A.unwrapException(exception) instanceof A.Web3RequestException)
                  throw exception;
                else {
                  t1 = A.Web3RequestExceptionConst_invalidAccountOrTransaction();
                  throw A.wrapException(t1);
                }
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_parseSignTransaction$3$method$params$state, $async$completer);
    },
    _parseDirectTransaction$3$method$params$state(method, params, state) {
      return this._parseDirectTransaction$body$JSCosmosHandler(method, params, state);
    },
    _parseDirectTransaction$body$JSCosmosHandler(method, params, state) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3CosmosSignTransaction),
        $async$returnValue, request, t1, t2, t3, t4, t5, t6, t7, t8, exception;
      var $async$_parseDirectTransaction$3$method$params$state = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              try {
                t1 = type$.Object;
                request = A.PageMessageRequest_elementAs(params, 0, B.List_signerAddress_chainId_signDoc, t1);
                if (!state.chainExist$1(A._asString(request.chainId)))
                  throw A.wrapException(B.Web3RequestException_UFn);
                if (A._asStringQ(t1._as(request.signDoc).chainId) != null && A._asStringQ(t1._as(request.signDoc).chainId) !== A._asString(request.chainId)) {
                  t1 = A.Web3CosmosExceptionConstant_mismatchChainId();
                  throw A.wrapException(t1);
                }
                if (t1._as(request.signDoc).bodyBytes == null) {
                  t1 = A.Web3RequestExceptionConst_invalidParameters("Missing transaction bodyBytes.");
                  throw A.wrapException(t1);
                }
                t2 = state.getJsAddressChainAccountOrThrow$1(A._asString(request.signerAddress));
                t3 = A._asString(request.chainId);
                t4 = request.signOption;
                t4 = t4 == null ? null : A._asBoolQ(t4.disableBalanceCheck);
                t5 = request.signOption;
                t5 = t5 == null ? null : A._asBoolQ(t5.preferNoSetFee);
                t6 = request.signOption;
                t6 = t6 == null ? null : A._asBoolQ(t6.preferNoSetMemo);
                t7 = t1._as(request.signDoc).bodyBytes;
                t7.toString;
                t7 = A.APPJSUint8Array_toListInt(t7);
                t8 = t1._as(request.signDoc).authInfoBytes;
                t8 = t8 == null ? null : A.APPJSUint8Array_toListInt(t8);
                t7 = A.Web3CosmosSignTransaction_Web3CosmosSignTransaction(t2, t3, t4, t5, t6, A.Web3CosmosSignTransactionDirectParams$(A.JsUtils_parseNumber(t1._as(request.signDoc).accountNumber), t8, t7));
                $async$returnValue = t7;
                // goto return
                $async$goto = 1;
                break;
              } catch (exception) {
                if (A.unwrapException(exception) instanceof A.Web3RequestException)
                  throw exception;
                else
                  throw exception;
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_parseDirectTransaction$3$method$params$state, $async$completer);
    },
    _parseSwitchChain$2$params$state(params, state) {
      throw A.wrapException(A.UnimplementedError$(null));
    },
    onRequestDone$1(message) {
    },
    get$networkType() {
      return B.NetworkType_iOs;
    },
    finalizeWalletResponse$3$message$params$response(message, params, response) {
      return this.finalizeWalletResponse$body$JSCosmosHandler(message, type$.nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider._as(params), response);
    },
    finalizeWalletResponse$body$JSCosmosHandler(message, params, response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this, t1, t2, t3, t4, _this, chainId, chainAddresses, transaction, signedResponse, _this0, method, state;
      var $async$finalizeWalletResponse$3$message$params$response = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                method = A.Web3CosmosRequestMethods_fromName(A._asString(message.method));
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$finalizeWalletResponse$3$message$params$response);
              case 3:
                // returning from await.
                state = $async$result;
                switch (method) {
                  case B.Web3CosmosRequestMethods_101_cosmos_signMessage_List_empty:
                    t1 = response.resultAsMap$0();
                    t2 = type$.List_dynamic;
                    t3 = type$.int;
                    t4 = J.cast$1$0$ax(t2._as(t1.$index(0, "messageBytes")), t3);
                    t1 = J.cast$1$0$ax(t2._as(t1.$index(0, "signature")), t3);
                    A.BytesUtils_validateListOfBytes(t4);
                    t4 = A.List_List$unmodifiable(t4, t3);
                    A.BytesUtils_validateListOfBytes(t1);
                    t3 = A.List_List$unmodifiable(t1, t3);
                    _this = {};
                    t1 = init.G;
                    t2 = type$.Object;
                    _this.signedMessage = t2._as(t1.Uint8Array.from(A.jsify(t4)));
                    _this.signature = t2._as(t1.Uint8Array.from(A.jsify(t3)));
                    $async$returnValue = {type: "response", status: "success", data: _this};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3CosmosRequestMethods_PJw:
                    if (state.accounts.length !== 0) {
                      chainId = A.PageMessageRequest_elementAs(message, 0, B.List_empty5, type$.String);
                      if (chainId != null) {
                        chainAddresses = state.getChainIdJsAccounts$1(chainId);
                        if (chainAddresses.length !== 0) {
                          $async$returnValue = {type: "response", status: "success", data: chainAddresses};
                          // goto return
                          $async$goto = 1;
                          break $async$outer;
                        }
                      } else {
                        _this = {};
                        _this.accounts = state.get$jsAccounts();
                        $async$returnValue = {type: "response", status: "success", data: _this};
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                    }
                    $async$returnValue = {type: "response", status: "failed", data: A.jsify(B.Web3RequestException_MuE.toResponseMessage$0().toJson$0())};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3CosmosRequestMethods_fHX:
                  case B.Web3CosmosRequestMethods_Rzj:
                  case B.Web3CosmosRequestMethods_VZC:
                    transaction = response.resultAsMap$0();
                    switch (params.cast$1$0(0, type$.Web3CosmosSignTransaction).transaction.method) {
                      case B.Web3CosmosRequestMethods_fHX:
                        signedResponse = A.Web3CosmosSignTransactionResponse_Web3CosmosSignTransactionResponse$fromJson(transaction).cast$1$0(0, type$.Web3CosmosSignTransactionAminoSignResponse);
                        t1 = signedResponse.tx.toJson$0();
                        t2 = signedResponse.publicKey;
                        t2 = A.JSCosmosStdSignature_constructor_setup(A.JSCosmosPubKey_constructor_setup(t2.typeUrl, A.StringUtils_decode(t2.toBuffer$0(), false, B.StringEncoding_2)), A.StringUtils_decode(signedResponse.signature, false, B.StringEncoding_2));
                        _this = {};
                        t1 = A.jsify(t1);
                        if (t1 == null)
                          t1 = {};
                        _this.signed = t1;
                        _this.signature = t2;
                        $async$returnValue = {type: "response", status: "success", data: _this};
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      case B.Web3CosmosRequestMethods_VZC:
                        signedResponse = A.Web3CosmosSignTransactionResponse_Web3CosmosSignTransactionResponse$fromJson(transaction).cast$1$0(0, type$.Web3CosmosSignTransactionDirectSignResponse);
                        _this = {};
                        t1 = init.G;
                        t2 = type$.Object;
                        _this.bodyBytes = t2._as(t1.Uint8Array.from(A.jsify(signedResponse.bodyBytes)));
                        _this.authInfoBytes = t2._as(t1.Uint8Array.from(A.jsify(signedResponse.authInfoBytes)));
                        _this.chainId = signedResponse.chainId;
                        t1 = signedResponse.publicKey;
                        _this0 = {};
                        _this0.signature = A.JSCosmosStdSignature_constructor_setup(A.JSCosmosPubKey_constructor_setup(t1.typeUrl, A.StringUtils_decode(t1.toBuffer$0(), false, B.StringEncoding_2)), A.StringUtils_decode(signedResponse.signature, false, B.StringEncoding_2));
                        _this0.signed = _this;
                        $async$returnValue = {type: "response", status: "success", data: _this0};
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                    }
                    break;
                  default:
                    break;
                }
                $async$returnValue = $async$self.super$JSWalletStandardNetworkHandler$finalizeWalletResponse(message, params, response);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$finalizeWalletResponse$3$message$params$response, $async$completer);
    },
    createState$1(authenticated) {
      if (authenticated == null)
        return A.CosmosWeb3State$_(B.List_empty4, A._setArrayType([], type$.JSArray_Web3CosmoshainIdnetifier), null, null, B.JSNetworkState_1);
      return A.CosmosWeb3State_CosmosWeb3State(authenticated.getAuth$1$1(B.NetworkType_iOs, type$.Web3CosmosChainAuthenticated));
    }
  };
  A.EthereumWeb3State.prototype = {
    chainExist$1(chainId) {
      return B.JSArray_methods.any$1(this.chains, new A.EthereumWeb3State_chainExist_closure(chainId));
    },
    getChainFromChainId$1(chainId) {
      return B.JSArray_methods.firstWhere$2$orElse(this.chains, new A.EthereumWeb3State_getChainFromChainId_closure(chainId), new A.EthereumWeb3State_getChainFromChainId_closure0());
    }
  };
  A.EthereumWeb3State_chainExist_closure.prototype = {
    call$1(e) {
      var t1 = type$.Web3EthereumChainIdnetifier._as(e).chainId.compareTo$1(0, this.chainId);
      return t1 === 0;
    },
    $signature: 139
  };
  A.EthereumWeb3State_getChainFromChainId_closure.prototype = {
    call$1(e) {
      var t1 = type$.Web3EthereumChainIdnetifier._as(e).chainId.compareTo$1(0, this.chainId);
      return t1 === 0;
    },
    $signature: 139
  };
  A.EthereumWeb3State_getChainFromChainId_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_UFn);
    },
    $signature: 0
  };
  A.EthereumWeb3State_EthereumWeb3State_closure.prototype = {
    call$1(e) {
      var t1, t2;
      type$.Web3EthereumChainAccount._as(e);
      t1 = this.networks;
      t2 = e.id;
      return new A.JSWalletStateAccount(e, A.JSSEthereumWalletAccount_constructor_setup(e.address.address, "ethereum:" + t1.$index(0, t2).chainId.toString$0(0), e.publicKey), "ethereum:" + t1.$index(0, t2).chainId.toString$0(0), type$.JSWalletStateAccount_ETHAddress_Web3EthereumChainAccount_JSObject);
    },
    $signature: 472
  };
  A.EthereumWeb3State_EthereumWeb3State_closure0.prototype = {
    call$1(e) {
      type$.Web3EthereumChainAccount._as(e);
      return e.id === this.authenticated.currentNetwork.id && e._defaultAddress;
    },
    $signature: 473
  };
  A.JSEthereumHandler.prototype = {
    _onSubscribe$1(result) {
      type$.EthereumSubscribeResult._as(result);
      this.sendMessageToClient.call$2({type: "event", data: A.JSWalletNetworkEvent_constructor_(null, null, A._setArrayType([B.JSNetworkEventType_4], type$.JSArray_JSNetworkEventType), A.jsify(result.toJson$0()), null)}, A.JSClientType_fronNetworkName("Ethereum"));
    },
    createStateEvent$6$accountsChanged$currentState$networkAccountsChanged$networkChanged$networksChanged$previousState(accountsChanged, currentState, networkAccountsChanged, networkChanged, networksChanged, previousState) {
      var $event, chain, t2, t3,
        t1 = type$.EthereumWeb3State;
      t1._as(previousState);
      t1._as(currentState);
      $event = this.super$JSWalletStandardNetworkHandler$createStateEvent(accountsChanged, currentState, networkAccountsChanged, networkChanged, networksChanged, previousState);
      if (networkChanged) {
        t1 = previousState.client;
        if (t1 != null)
          t1.close$0();
        chain = currentState.defaultChain;
        t1 = currentState.client;
        t2 = t1 == null;
        if (!t2)
          t1.addSubscriptionListener$1(this.get$_onSubscribe());
        t1 = chain != null;
        if (t1) {
          t3 = chain.chainId;
          $event.chainChanged = {chainId: "0x" + t3.toRadixString$1(0, 16), netVersion: t3.toString$0(0)};
        }
        if (!t1 || t2)
          $event.disconnect = {message: "The Provider is disconnected.", code: 4900};
      }
      return $event;
    },
    createEvent$1($event) {
      return this.createEvent$body$JSEthereumHandler($event);
    },
    createEvent$body$JSEthereumHandler($event) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_JSObject),
        $async$returnValue, $async$self = this, chain, t1, t2, state;
      var $async$createEvent$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$createEvent$1);
              case 3:
                // returning from await.
                state = $async$result;
                switch ($event) {
                  case B.JSEventType_1:
                  case B.JSEventType_3:
                    $event = A.JSWalletNetworkEvent_constructor_(null, null, A._setArrayType([B.JSNetworkEventType_2], type$.JSArray_JSNetworkEventType), null, null);
                    chain = state.defaultChain;
                    t1 = chain != null;
                    if (t1) {
                      t2 = chain.chainId;
                      $event.chainChanged = {chainId: "0x" + t2.toRadixString$1(0, 16), netVersion: t2.toString$0(0)};
                    }
                    if (!t1 || state.client == null)
                      $event.disconnect = {message: "The Provider is disconnected.", code: 4900};
                    $async$returnValue = $event;
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    $async$returnValue = $async$self.super$JSWalletStandardNetworkHandler$createEvent($event);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$createEvent$1, $async$completer);
    },
    request$1(params) {
      return this.request$body$JSEthereumHandler(params);
    },
    request$body$JSEthereumHandler(params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this, chainId, t1, state, method;
      var $async$request$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$request$1);
              case 3:
                // returning from await.
                state = $async$result;
                method = A.Web3EthereumRequestMethods_fromName(A._asString(params.method));
                if (method == null) {
                  $async$returnValue = $async$self._rpcCall$2(params, state);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                switch (method) {
                  case B.Web3EthereumRequestMethods_5_eth_requestAccounts_List_empty:
                    if (A.PageRequestType_fromName(A._asString(params.providerType)) === B.PageRequestType_0) {
                      if (state.accounts.length !== 0) {
                        $async$returnValue = new A.Web3WalletResponseMessage(null, null, $async$self.get$networkType());
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                    } else if (state.defaultAccount != null) {
                      $async$returnValue = new A.Web3WalletResponseMessage(null, null, $async$self.get$networkType());
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = $async$self.connect$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3EthereumRequestMethods_ojM:
                    chainId = A.JSEthereumHandler__parseSwitchEthereumChain(params);
                    t1 = state.defaultChain;
                    if (chainId.$eq(0, t1 == null ? null : t1.chainId)) {
                      $async$returnValue = new A.Web3WalletResponseMessage(null, chainId, $async$self.get$networkType());
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    if (!state.chainExist$1(chainId))
                      throw A.wrapException(B.Web3RequestException_UFn);
                    $async$returnValue = $async$self.switchChain$1(state.getChainFromChainId$1(chainId).id);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3EthereumRequestMethods_1_personal_sign_List_eth_sign:
                    if (A.PageRequestType_fromName(A._asString(params.providerType)) === B.PageRequestType_0) {
                      $async$returnValue = $async$self._ethereum$_parseWalletStandardPersonalSign$2$params$state(params, state);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = $async$self._personalSign$2$params$state(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3EthereumRequestMethods_grW:
                    $async$returnValue = $async$self._parseAddEthereumChain$2$params$state(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3EthereumRequestMethods_uLq:
                    if (A.PageRequestType_fromName(A._asString(params.providerType)) === B.PageRequestType_0) {
                      $async$returnValue = A.JSEthereumHandler__parseWalletStandardTypedData(params, state);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = A.JSEthereumHandler__parseTypedData(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3EthereumRequestMethods_0_eth_sendTransaction_List_empty:
                    $async$returnValue = A.JSEthereumHandler__parseTransactionRequest(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3EthereumRequestMethods_7_eth_accounts_List_empty:
                    $async$returnValue = new A.Web3WalletResponseMessage(null, state.get$defaultNetworkAddresses(), $async$self.get$networkType());
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3EthereumRequestMethods_8_eth_chainId_List_empty:
                    t1 = state.defaultChain;
                    if (t1 == null)
                      A.throwExpression(B.Web3RequestException_Yrl);
                    $async$returnValue = new A.Web3WalletResponseMessage(null, "0x" + t1.chainId.toRadixString$1(0, 16), $async$self.get$networkType());
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    throw A.wrapException(A.UnimplementedError$(null));
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$request$1, $async$completer);
    },
    _rpcCall$2(params, state) {
      return this._rpcCall$body$JSEthereumHandler(params, state);
    },
    _rpcCall$body$JSEthereumHandler(params, state) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this, client, $async$temp1;
      var $async$_rpcCall$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              client = state.client;
              if (client == null)
                throw A.wrapException(B.Web3RequestException_9U0);
              if (A.EthereumMethods_fromName(A._asString(params.method)) == null)
                throw A.wrapException(B.Web3RequestException_qYU);
              $async$temp1 = A;
              $async$goto = 3;
              return A._asyncAwait(client.call$2(A._asString(params.method), A.PageMessageRequest_get_dartParams(params)), $async$_rpcCall$2);
            case 3:
              // returning from await.
              $async$returnValue = new $async$temp1.Web3WalletResponseMessage(null, $async$result, $async$self.get$networkType());
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_rpcCall$2, $async$completer);
    },
    _parseAddEthereumChain$2$params$state(params, state) {
      return this._parseAddEthereumChain$body$JSEthereumHandler(params, state);
    },
    _parseAddEthereumChain$body$JSEthereumHandler(params, state) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this, chainId, chainName, nativeCurrency, t1, t2, rpcUrls, t3, t4, param;
      var $async$_parseAddEthereumChain$2$params$state = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              param = A.PageMessageRequest_elementAs(params, 0, B.List_empty5, type$.JSObject);
              if (param == null)
                throw A.wrapException(A.Web3EthereumExceptionConst_missingChainId());
              chainId = A.BigintUtils_tryParse(A._asStringQ(param.chainId));
              if (chainId == null)
                throw A.wrapException(A.Web3EthereumExceptionConst_missingChainId());
              if (state.chainExist$1(chainId)) {
                $async$returnValue = new A.Web3WalletResponseMessage(null, "0x" + chainId.toRadixString$1(0, 16), $async$self.get$networkType());
                // goto return
                $async$goto = 1;
                break;
              }
              chainName = A._asStringQ(param.chainName);
              if (chainName == null)
                throw A.wrapException(A.Web3RequestExceptionConst_failedToParse("chainName"));
              nativeCurrency = type$.nullable_JSObject._as(param.nativeCurrency);
              if (nativeCurrency == null)
                throw A.wrapException(A.Web3RequestExceptionConst_failedToParse("nativeCurrency"));
              if (A._asStringQ(nativeCurrency.name) == null)
                throw A.wrapException(A.Web3RequestExceptionConst_failedToParse("name"));
              if (A._asStringQ(nativeCurrency.symbol) == null)
                throw A.wrapException(A.Web3RequestExceptionConst_failedToParse("symbol"));
              t1 = type$.nullable_JSArray_nullable_Object;
              t2 = t1._as(param.rpcUrls);
              if (t2 == null)
                rpcUrls = null;
              else {
                t2 = type$.List_String._is(t2) ? t2 : new A.CastList(t2, A._arrayInstanceType(t2)._eval$1("CastList<1,String>"));
                t2 = J.map$1$1$ax(t2, new A.JSEthereumHandler__parseAddEthereumChain_closure(), type$.String);
                t2 = A.List_List$_of(t2, t2.$ti._eval$1("ListIterable.E"));
                rpcUrls = t2;
              }
              if (rpcUrls == null)
                rpcUrls = A._setArrayType([], type$.JSArray_String);
              t2 = A._arrayInstanceType(rpcUrls);
              t3 = t2._eval$1("WhereIterable<1>");
              rpcUrls = A.List_List$_of(new A.WhereIterable(rpcUrls, t2._eval$1("bool(1)")._as(new A.JSEthereumHandler__parseAddEthereumChain_closure0()), t3), t3._eval$1("Iterable.E"));
              if (rpcUrls.length === 0)
                throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters("At least one valid rpcUrl is required. Each URL must start with a valid scheme: http, https, ws, or wss."));
              t2 = A._asStringQ(nativeCurrency.name);
              t2.toString;
              t3 = A._asStringQ(nativeCurrency.symbol);
              t3.toString;
              t4 = t1._as(param.blockExplorerUrls);
              if (t4 == null)
                t4 = null;
              else {
                t4 = type$.List_String._is(t4) ? t4 : new A.CastList(t4, A._arrayInstanceType(t4)._eval$1("CastList<1,String>"));
                t4 = J.map$1$1$ax(t4, new A.JSEthereumHandler__parseAddEthereumChain_closure1(), type$.String);
                t4 = A.List_List$_of(t4, t4.$ti._eval$1("ListIterable.E"));
              }
              t1 = t1._as(param.iconUrls);
              if (t1 == null)
                t1 = null;
              else {
                t1 = type$.List_String._is(t1) ? t1 : new A.CastList(t1, A._arrayInstanceType(t1)._eval$1("CastList<1,String>"));
                t1 = J.map$1$1$ax(t1, new A.JSEthereumHandler__parseAddEthereumChain_closure2(), type$.String);
                t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
              }
              $async$returnValue = A.Web3EthereumAddNewChain_Web3EthereumAddNewChain(t4, chainName, 18, t1, t2, chainId, rpcUrls, t3);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_parseAddEthereumChain$2$params$state, $async$completer);
    },
    _ethereum$_parseWalletStandardPersonalSign$2$params$state(params, state) {
      var param, messageBytes, account, t1, messageBytes0, exception;
      try {
        param = A.PageMessageRequest_elementAs(params, 0, B.List_account_message, type$.JSObject);
        t1 = param;
        if (t1 == null)
          messageBytes0 = null;
        else {
          t1 = t1.message;
          messageBytes0 = t1 == null ? null : A.APPJSUint8Array_toListInt(t1);
        }
        messageBytes = messageBytes0;
        if (param == null || messageBytes == null) {
          t1 = A.Web3RequestExceptionConst_invalidWalletStandardSignMessage();
          throw A.wrapException(t1);
        }
        account = state.getJsAddressChainAccountOrThrow$1(type$.nullable_JSObject._as(param.account));
        t1 = A.Web3EthreumPersonalSign_Web3EthreumPersonalSign(A.BytesUtils_toHexString(messageBytes, true, null), account);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
        else {
          t1 = A.Web3RequestExceptionConst_invalidWalletStandardSignMessage();
          throw A.wrapException(t1);
        }
      }
    },
    _personalSign$2$params$state(params, state) {
      var address, ethAddress, account,
        t1 = type$.String,
        message = A.JsUtils_parseHexString(A.PageMessageRequest_elementAs(params, 0, B.List_empty5, t1));
      if (message == null)
        throw A.wrapException(A.Web3RequestExceptionConst_failedToParse("message"));
      address = A.PageMessageRequest_elementAs(params, 1, B.List_empty5, t1);
      if (address != null) {
        ethAddress = A.MethodUtils_nullOnException(new A.JSEthereumHandler__personalSign_closure(address), type$.ETHAddress);
        if (ethAddress == null)
          throw A.wrapException(A.Web3RequestExceptionConst_failedToParse("address"));
        account = state.getAddressNetworkChainAccountOrThrow$1(ethAddress);
      } else
        account = state.get$defaultNetworkChainAccountOrThrow();
      return A.Web3EthreumPersonalSign_Web3EthreumPersonalSign(message, account);
    },
    onRequestDone$1(message) {
    },
    get$networkType() {
      return B.NetworkType_TUr;
    },
    finalizeWalletResponse$3$message$params$response(message, params, response) {
      return this.finalizeWalletResponse$body$JSEthereumHandler(message, type$.nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider._as(params), response);
    },
    finalizeWalletResponse$body$JSEthereumHandler(message, params, response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this, signature, _this, t1, state;
      var $async$finalizeWalletResponse$3$message$params$response = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$finalizeWalletResponse$3$message$params$response);
              case 3:
                // returning from await.
                state = $async$result;
                switch (A.Web3EthereumRequestMethods_fromName(A._asString(message.method))) {
                  case B.Web3EthereumRequestMethods_0_eth_sendTransaction_List_empty:
                    signature = response.resultAsString$0();
                    if (A.PageRequestType_fromName(A._asString(message.providerType)) === B.PageRequestType_0) {
                      _this = {};
                      _this.txId = signature;
                      $async$returnValue = {type: "response", status: "success", data: _this};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    } else {
                      $async$returnValue = {type: "response", status: "success", data: signature};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                  case B.Web3EthereumRequestMethods_uLq:
                  case B.Web3EthereumRequestMethods_1_personal_sign_List_eth_sign:
                    signature = response.resultAsString$0();
                    if (A.PageRequestType_fromName(A._asString(message.providerType)) === B.PageRequestType_0) {
                      t1 = A.BytesUtils_fromHexString(signature, false);
                      _this = {};
                      _this.signature = type$.Object._as(init.G.Uint8Array.from(A.jsify(t1)));
                      $async$returnValue = {type: "response", status: "success", data: _this};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    } else {
                      $async$returnValue = {type: "response", status: "success", data: signature};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                  case B.Web3EthereumRequestMethods_5_eth_requestAccounts_List_empty:
                    if (A.PageRequestType_fromName(A._asString(message.providerType)) === B.PageRequestType_0) {
                      if (state.accounts.length !== 0) {
                        _this = {};
                        _this.accounts = state.get$jsAccounts();
                        $async$returnValue = {type: "response", status: "success", data: _this};
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                    } else if (state.defaultAccount != null) {
                      $async$returnValue = {type: "response", status: "success", data: A.QuickJSStringList_get_toJS(state.get$defaultNetworkAddresses())};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = {type: "response", status: "failed", data: A.jsify(B.Web3RequestException_MuE.toResponseMessage$0().toJson$0())};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                }
                $async$returnValue = $async$self.super$JSWalletStandardNetworkHandler$finalizeWalletResponse(message, params, response);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$finalizeWalletResponse$3$message$params$response, $async$completer);
    },
    createState$1(authenticated) {
      if (authenticated == null)
        return A.EthereumWeb3State$_(B.List_empty14, A._setArrayType([], type$.JSArray_Web3EthereumChainIdnetifier), null, null, null, B.JSNetworkState_1);
      return A.EthereumWeb3State_EthereumWeb3State(authenticated.getAuth$1$1(B.NetworkType_TUr, type$.Web3EthereumChainAuthenticated));
    }
  };
  A.JSEthereumHandler__parseWalletStandardTypedData_closure.prototype = {
    call$0() {
      var t1 = A.JsUtils_toListOfMap(this.param.typedData);
      t1.toString;
      return A.EIP712Legacy_EIP712Legacy$fromJson(t1);
    },
    $signature: 131
  };
  A.JSEthereumHandler__parseWalletStandardTypedData_closure0.prototype = {
    call$0() {
      var t1 = A.JsUtils_toDartMap(this.param.typedData);
      t1.toString;
      return A.Eip712TypedData_Eip712TypedData$fromJson(t1, this.version);
    },
    $signature: 123
  };
  A.JSEthereumHandler__parseTypedData_closure.prototype = {
    call$0() {
      var t1 = A.PageMessageRequest_elementAs(this.params, 1, B.List_empty5, type$.String);
      if (t1 == null)
        t1 = null;
      return A.ETHAddress_ETHAddress(t1 == null ? "" : t1);
    },
    $signature: 24
  };
  A.JSEthereumHandler__parseTypedData_closure0.prototype = {
    call$0() {
      var t1 = A.JsUtils_toListOfMap(A.PageMessageRequest_elementAs(this.params, 0, B.List_empty5, type$.Object));
      t1.toString;
      return A.EIP712Legacy_EIP712Legacy$fromJson(t1);
    },
    $signature: 131
  };
  A.JSEthereumHandler__parseTypedData_closure1.prototype = {
    call$0() {
      var t1 = A.PageMessageRequest_elementAs(this.params, 0, B.List_empty5, type$.String);
      if (t1 == null)
        t1 = null;
      return A.ETHAddress_ETHAddress(t1 == null ? "" : t1);
    },
    $signature: 24
  };
  A.JSEthereumHandler__parseTypedData_closure2.prototype = {
    call$0() {
      var t1 = A.JsUtils_toDartMap(A.PageMessageRequest_elementAs(this.params, 1, B.List_empty5, type$.Object));
      t1.toString;
      return A.Eip712TypedData_Eip712TypedData$fromJson(t1, this.version);
    },
    $signature: 123
  };
  A.JSEthereumHandler__parseAddEthereumChain_closure.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 4
  };
  A.JSEthereumHandler__parseAddEthereumChain_closure0.prototype = {
    call$1(e) {
      return A.ServiceProtocol_isValid(A._asString(e));
    },
    $signature: 38
  };
  A.JSEthereumHandler__parseAddEthereumChain_closure1.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 4
  };
  A.JSEthereumHandler__parseAddEthereumChain_closure2.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 4
  };
  A.JSEthereumHandler__parseTransaction_closure.prototype = {
    call$0() {
      var t1 = A._asStringQ(this.param.to);
      t1.toString;
      return A.ETHAddress_ETHAddress(t1);
    },
    $signature: 24
  };
  A.JSEthereumHandler__parseTransaction_closure0.prototype = {
    call$0() {
      var t1 = A._asStringQ(this.i.address);
      t1.toString;
      return A.ETHAddress_ETHAddress(t1);
    },
    $signature: 24
  };
  A.JSEthereumHandler__parseTransactionRequest_closure.prototype = {
    call$0() {
      var t1 = A._asStringQ(this._box_0.param.from);
      t1.toString;
      return A.ETHAddress_ETHAddress(t1);
    },
    $signature: 24
  };
  A.JSEthereumHandler__parseTransactionRequest_closure0.prototype = {
    call$0() {
      var t1 = A._asStringQ(this._box_0.param.from);
      t1.toString;
      return A.ETHAddress_ETHAddress(t1);
    },
    $signature: 24
  };
  A.JSEthereumHandler__personalSign_closure.prototype = {
    call$0() {
      return A.ETHAddress_ETHAddress(this.address);
    },
    $signature: 24
  };
  A.JSEthereumClient.prototype = {
    addSubscriptionListener$1(listener) {
      var t1;
      type$.void_Function_EthereumSubscribeResult._as(listener);
      t1 = type$.BaseServiceProtocol_EthereumAPIProvider._as(this.provider.rpc);
      if (t1.get$protocol() !== B.ServiceProtocol_WebSocket_3_websocket)
        return;
      B.JSArray_methods.add$1(type$.EthereumWebsocketService._as(t1)._listeners, listener);
    },
    _subscribe$1$params(params) {
      return this._subscribe$body$JSEthereumClient(params);
    },
    _subscribe$body$JSEthereumClient(params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, t1;
      var $async$_subscribe$1$params = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.provider;
              if (type$.BaseServiceProtocol_EthereumAPIProvider._as(t1.rpc).get$protocol() !== B.ServiceProtocol_WebSocket_3_websocket)
                throw A.wrapException(B.Web3RequestException_f1e);
              $async$goto = 3;
              return A._asyncAwait(t1.request$2$1(new A.EthereumRequestDynamic("eth_subscribe", params, type$.EthereumRequestDynamic_String), type$.String, type$.nullable_Object), $async$_subscribe$1$params);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_subscribe$1$params, $async$completer);
    },
    _dynamicCall$2(method, params) {
      return this._dynamicCall$body$JSEthereumClient(method, params);
    },
    _dynamicCall$body$JSEthereumClient(method, params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this;
      var $async$_dynamicCall$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.provider.request$2$1(new A.EthereumRequestDynamic(method, params, type$.EthereumRequestDynamic_dynamic), type$.dynamic, type$.nullable_Object), $async$_dynamicCall$2);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_dynamicCall$2, $async$completer);
    },
    addRequest$3$id$method$params(id, method, params) {
      return this.addRequest$body$JSEthereumClient(id, method, params);
    },
    addRequest$body$JSEthereumClient(id, method, params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$errorStack = [], $async$self = this, result, completer, e, completer0, t1, exception, $async$exception;
      var $async$addRequest$3$id$method$params = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              result = null;
              $async$goto = method === B.EthereumMethods_eth_subscribe ? 6 : 8;
              break;
            case 6:
              // then
              $async$goto = 9;
              return A._asyncAwait($async$self._subscribe$1$params(params), $async$addRequest$3$id$method$params);
            case 9:
              // returning from await.
              result = $async$result;
              // goto join
              $async$goto = 7;
              break;
            case 8:
              // else
              $async$goto = 10;
              return A._asyncAwait($async$self._dynamicCall$2(method.value, params), $async$addRequest$3$id$method$params);
            case 10:
              // returning from await.
              result = $async$result;
            case 7:
              // join
              completer = $async$self._completers.remove$1(0, id);
              t1 = completer;
              if (t1 != null)
                t1.complete$1(result);
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              e = A.unwrapException($async$exception);
              completer0 = $async$self._completers.remove$1(0, id);
              t1 = completer0;
              if (t1 != null)
                t1.completeError$1(e);
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$addRequest$3$id$method$params, $async$completer);
    },
    call$2(methodName, params) {
      return this.$call$body$JSEthereumClient(A._asString(methodName), type$.List_dynamic._as(params));
    },
    $call$body$JSEthereumClient(methodName, params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.dynamic),
        $async$returnValue, $async$self = this, id, completer, e, e0, t1, exception, method;
      var $async$call$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              method = A.EthereumMethods_fromName(methodName);
              if (method == null)
                throw A.wrapException(B.Web3RequestException_qYU);
              try {
                id = $async$self._id++;
                completer = new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_dynamic), type$._AsyncCompleter_dynamic);
                $async$self._completers.$indexSet(0, id, completer);
                $async$self.addRequest$3$id$method$params(id, method, params);
                t1 = completer.future;
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (t1 instanceof A.Web3RequestException)
                  throw exception;
                else if (t1 instanceof A.RPCError) {
                  e = t1;
                  throw A.wrapException(A.Web3RequestExceptionConst_fromException(e));
                } else if (t1 instanceof A.ApiProviderException) {
                  e0 = t1;
                  if (e0.code === 10001)
                    throw A.wrapException(B.Web3RequestException_9U0);
                  else
                    throw A.wrapException(B.Web3RequestException_9U0);
                } else
                  throw A.wrapException(B.Web3RequestException_9U0);
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$2, $async$completer);
    },
    close$0() {
      var completer, t2, exception,
        t1 = this._completers;
      type$.BaseServiceProtocol_EthereumAPIProvider._as(this.provider.rpc).disposeService$0();
      for (t2 = new A.LinkedHashMapKeyIterator(t1, t1._modifications, t1._first, A._instanceType(t1)._eval$1("LinkedHashMapKeyIterator<1>")); t2.moveNext$0();) {
        completer = t1.remove$1(0, t2.__js_helper$_current);
        if (completer == null || completer.get$isCompleted())
          continue;
        try {
          completer.completeError$1(B.Web3RequestException_9U0);
        } catch (exception) {
        }
      }
    }
  };
  A.QuickJSStringList_get_toJS_closure.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 4
  };
  A.JSWalletStateAccount.prototype = {
    get$variabels() {
      var t1 = this.chainaccount;
      return [t1.keyIndex, t1.get$addressStr(), t1.get$id()];
    }
  };
  A.WalletStandardChainWeb3State.prototype = {
    get$jsAccounts() {
      var t1 = this.accounts,
        t2 = A._instanceType(this)._eval$1("WalletStandardChainWeb3State.2"),
        t3 = A._arrayInstanceType(t1),
        t4 = t3._eval$1("@<1>")._bind$1(t2)._eval$1("MappedListIterable<1,2>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t3._bind$1(t2)._eval$1("1(2)")._as(new A.WalletStandardChainWeb3State_jsAccounts_closure(this)), t4), t4._eval$1("ListIterable.E"));
      return t1;
    },
    get$networkJsAccounts() {
      var t1 = this.networkAccounts,
        t2 = A._instanceType(this)._eval$1("WalletStandardChainWeb3State.2"),
        t3 = A._arrayInstanceType(t1),
        t4 = t3._eval$1("@<1>")._bind$1(t2)._eval$1("MappedListIterable<1,2>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t3._bind$1(t2)._eval$1("1(2)")._as(new A.WalletStandardChainWeb3State_networkJsAccounts_closure(this)), t4), t4._eval$1("ListIterable.E"));
      return t1;
    },
    networkAccountChanged$1(other) {
      var t2, t3, t4, t5, _this = this,
        t1 = A._instanceType(_this);
      t1._eval$1("WalletStandardChainWeb3State<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2,WalletStandardChainWeb3State.3>")._as(other);
      t2 = _this.defaultAccount;
      t2 = t2 == null ? null : t2.chainaccount;
      t3 = other.defaultAccount;
      if (J.$eq$(t2, t3 == null ? null : t3.chainaccount)) {
        t2 = _this.networkAccounts;
        t1 = t1._eval$1("WalletStandardChainWeb3State.1");
        t3 = A._arrayInstanceType(t2);
        t4 = other.networkAccounts;
        t5 = A._arrayInstanceType(t4);
        t1 = !A.CompareUtils_iterableIsEqual(new A.MappedListIterable(t2, t3._bind$1(t1)._eval$1("1(2)")._as(new A.WalletStandardChainWeb3State_networkAccountChanged_closure(_this)), t3._eval$1("@<1>")._bind$1(t1)._eval$1("MappedListIterable<1,2>")), new A.MappedListIterable(t4, t5._bind$1(t1)._eval$1("1(2)")._as(new A.WalletStandardChainWeb3State_networkAccountChanged_closure0(_this)), t5._eval$1("@<1>")._bind$1(t1)._eval$1("MappedListIterable<1,2>")), t1);
      } else
        t1 = true;
      return t1;
    },
    getAddressChainAccountOrThrow$2$identifier(address, identifier) {
      var _this = this;
      A._instanceType(_this)._eval$1("WalletStandardChainWeb3State.0?")._as(address);
      if (address == null)
        throw A.wrapException(B.Web3RequestException_r5u);
      if (identifier != null)
        return B.JSArray_methods.firstWhere$2$orElse(_this.accounts, new A.WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure(_this, address, identifier), new A.WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure0()).chainaccount;
      return B.JSArray_methods.firstWhere$2$orElse(_this.accounts, new A.WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure1(_this, address), new A.WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure2()).chainaccount;
    },
    getAddressNetworkChainAccountOrThrow$1(address) {
      A._instanceType(this)._eval$1("WalletStandardChainWeb3State.0?")._as(address);
      if (address == null)
        throw A.wrapException(B.Web3RequestException_r5u);
      return B.JSArray_methods.firstWhere$2$orElse(this.networkAccounts, new A.WalletStandardChainWeb3State_getAddressNetworkChainAccountOrThrow_closure(this, address), new A.WalletStandardChainWeb3State_getAddressNetworkChainAccountOrThrow_closure0()).chainaccount;
    },
    get$defaultNetworkChainAccountOrThrow() {
      var t1 = this.defaultAccount;
      if (t1 == null)
        throw A.wrapException(B.Web3RequestException_r5u);
      return t1.chainaccount;
    },
    getAccountChain$1(account) {
      return B.JSArray_methods.firstWhere$2$orElse(this.chains, new A.WalletStandardChainWeb3State_getAccountChain_closure(this, A._instanceType(this)._eval$1("WalletStandardChainWeb3State.1")._as(account)), new A.WalletStandardChainWeb3State_getAccountChain_closure0());
    },
    getJsAddressChainAccountOrThrow$1(address) {
      var t1, jsAccount, t2, t3, existsAccount, _this = this;
      if (address != null) {
        t1 = {};
        jsAccount = A.JSOBJ_as(A._setArrayType(["address"], type$.JSArray_String), address, type$.JSObject);
        t2 = jsAccount == null;
        t1.addr = t2 ? null : A._asString(jsAccount.address);
        if (!t2) {
          t2 = type$.String;
          t2 = B.JSArray_methods.firstWhere$2$orElse(_this.accounts, new A.WalletStandardChainWeb3State_getJsAddressChainAccountOrThrow_closure(_this, jsAccount, A.JSArrayFuture_elemetAt(type$.JSArray_nullable_Object._as(jsAccount.chains), 0, t2, t2)), new A.WalletStandardChainWeb3State_getJsAddressChainAccountOrThrow_closure0()).chainaccount;
          return t2;
        } else if (typeof address === "string")
          t1.addr = A._asString(address);
        t2 = _this.accounts;
        t3 = A._arrayInstanceType(t2);
        existsAccount = new A.WhereIterable(t2, t3._eval$1("bool(1)")._as(new A.WalletStandardChainWeb3State_getJsAddressChainAccountOrThrow_closure1(t1, _this)), t3._eval$1("WhereIterable<1>"));
        if (existsAccount.get$length(0) === 1)
          return existsAccount.get$first(0).chainaccount;
      }
      throw A.wrapException(B.Web3RequestException_r5u);
    },
    get$defaultNetworkAddresses() {
      var t1 = this.networkAccounts,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,String>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.WalletStandardChainWeb3State_defaultNetworkAddresses_closure(this)), t3), t3._eval$1("ListIterable.E"));
      return t1;
    },
    getJSAccountOrThrow$2$identifier(address, identifier) {
      var t1 = B.JSArray_methods.firstWhere$2$orElse(this.accounts, new A.WalletStandardChainWeb3State_getJSAccountOrThrow_closure(this, A._instanceType(this)._eval$1("WalletStandardChainWeb3State.0")._as(address), identifier), new A.WalletStandardChainWeb3State_getJSAccountOrThrow_closure0()).jsAccount;
      return t1;
    }
  };
  A.WalletStandardChainWeb3State__sortAccounts_closure.prototype = {
    call$2(a, b) {
      var t1 = this.NETWORKADDRESS._eval$1("@<0>")._bind$1(this.CHAINACCOUNT)._bind$1(this.JSACCOUNT)._eval$1("JSWalletStateAccount<1,2,3>");
      t1._as(a);
      t1._as(b);
      return B.JSString_methods.compareTo$1(a.chainaccount.get$addressStr(), b.chainaccount.get$addressStr());
    },
    $signature() {
      return this.NETWORKADDRESS._eval$1("@<0>")._bind$1(this.CHAINACCOUNT)._bind$1(this.JSACCOUNT)._eval$1("int(JSWalletStateAccount<1,2,3>,JSWalletStateAccount<1,2,3>)");
    }
  };
  A.WalletStandardChainWeb3State__sortAccounts_closure0.prototype = {
    call$2(a, b) {
      var _this = this,
        t1 = _this.NETWORKADDRESS._eval$1("@<0>")._bind$1(_this.CHAINACCOUNT)._bind$1(_this.JSACCOUNT)._eval$1("JSWalletStateAccount<1,2,3>");
      t1._as(a);
      t1._as(b);
      return A.JsUtils_compareAddress(a.chainaccount.get$addressStr(), b.chainaccount.get$addressStr(), _this.defaultAccount.chainaccount.get$addressStr());
    },
    $signature() {
      return this.NETWORKADDRESS._eval$1("@<0>")._bind$1(this.CHAINACCOUNT)._bind$1(this.JSACCOUNT)._eval$1("int(JSWalletStateAccount<1,2,3>,JSWalletStateAccount<1,2,3>)");
    }
  };
  A.WalletStandardChainWeb3State__sortChains_closure.prototype = {
    call$2(a, b) {
      var t1 = this.CHAIN;
      return B.JSInt_methods.compareTo$1(t1._as(a).id, t1._as(b).id);
    },
    $signature() {
      return this.CHAIN._eval$1("int(0,0)");
    }
  };
  A.WalletStandardChainWeb3State_closure.prototype = {
    call$1(e) {
      var _this = this,
        t1 = _this.NETWORKADDRESS._eval$1("@<0>")._bind$1(_this.CHAINACCOUNT)._bind$1(_this.JSACCOUNT)._eval$1("JSWalletStateAccount<1,2,3>")._as(e).chainaccount.get$id(),
        t2 = _this.defaultChain;
      return t1 === (t2 == null ? null : t2.id);
    },
    $signature() {
      return this.NETWORKADDRESS._eval$1("@<0>")._bind$1(this.CHAINACCOUNT)._bind$1(this.JSACCOUNT)._eval$1("bool(JSWalletStateAccount<1,2,3>)");
    }
  };
  A.WalletStandardChainWeb3State_jsAccounts_closure.prototype = {
    call$1(e) {
      return A._instanceType(this.$this)._eval$1("JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>")._as(e).jsAccount;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("WalletStandardChainWeb3State.2(JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>)");
    }
  };
  A.WalletStandardChainWeb3State_networkJsAccounts_closure.prototype = {
    call$1(e) {
      return A._instanceType(this.$this)._eval$1("JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>")._as(e).jsAccount;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("WalletStandardChainWeb3State.2(JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>)");
    }
  };
  A.WalletStandardChainWeb3State_networkAccountChanged_closure.prototype = {
    call$1(e) {
      return A._instanceType(this.$this)._eval$1("JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>")._as(e).chainaccount;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("WalletStandardChainWeb3State.1(JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>)");
    }
  };
  A.WalletStandardChainWeb3State_networkAccountChanged_closure0.prototype = {
    call$1(e) {
      return A._instanceType(this.$this)._eval$1("JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>")._as(e).chainaccount;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("WalletStandardChainWeb3State.1(JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>)");
    }
  };
  A.WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure.prototype = {
    call$1(e) {
      A._instanceType(this.$this)._eval$1("JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>")._as(e);
      return J.$eq$(e.chainaccount.address, this.address) && B.JSString_methods.contains$1(e.identifier, this.identifier);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>)");
    }
  };
  A.WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_r5u);
    },
    $signature: 0
  };
  A.WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure1.prototype = {
    call$1(e) {
      return J.$eq$(A._instanceType(this.$this)._eval$1("JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>")._as(e).chainaccount.address, this.address);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>)");
    }
  };
  A.WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure2.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_r5u);
    },
    $signature: 0
  };
  A.WalletStandardChainWeb3State_getAddressNetworkChainAccountOrThrow_closure.prototype = {
    call$1(e) {
      return J.$eq$(A._instanceType(this.$this)._eval$1("JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>")._as(e).chainaccount.address, this.address);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>)");
    }
  };
  A.WalletStandardChainWeb3State_getAddressNetworkChainAccountOrThrow_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_r5u);
    },
    $signature: 0
  };
  A.WalletStandardChainWeb3State_getAccountChain_closure.prototype = {
    call$1(e) {
      return A._instanceType(this.$this)._eval$1("WalletStandardChainWeb3State.3")._as(e).id === this.account.id;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(WalletStandardChainWeb3State.3)");
    }
  };
  A.WalletStandardChainWeb3State_getAccountChain_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_r5u);
    },
    $signature: 0
  };
  A.WalletStandardChainWeb3State_getJsAddressChainAccountOrThrow_closure.prototype = {
    call$1(e) {
      A._instanceType(this.$this)._eval$1("JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>")._as(e);
      return e.chainaccount.get$addressStr() === A._asString(this.jsAccount.address) && this.chain === e.identifier;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>)");
    }
  };
  A.WalletStandardChainWeb3State_getJsAddressChainAccountOrThrow_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_r5u);
    },
    $signature: 0
  };
  A.WalletStandardChainWeb3State_getJsAddressChainAccountOrThrow_closure1.prototype = {
    call$1(e) {
      return A._instanceType(this.$this)._eval$1("JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>")._as(e).chainaccount.get$addressStr() === this._box_0.addr;
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>)");
    }
  };
  A.WalletStandardChainWeb3State_defaultNetworkAddresses_closure.prototype = {
    call$1(e) {
      return A._instanceType(this.$this)._eval$1("JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>")._as(e).chainaccount.get$addressStr();
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("String(JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>)");
    }
  };
  A.WalletStandardChainWeb3State_getJSAccountOrThrow_closure.prototype = {
    call$1(e) {
      A._instanceType(this.$this)._eval$1("JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>")._as(e);
      return J.$eq$(e.chainaccount.address, this.address) && B.JSString_methods.contains$1(e.identifier, this.identifier);
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("bool(JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>)");
    }
  };
  A.WalletStandardChainWeb3State_getJSAccountOrThrow_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_r5u);
    },
    $signature: 0
  };
  A.JSWalletStandardNetworkHandler.prototype = {
    get$_network_handler$_state() {
      var value = this.__JSWalletStandardNetworkHandler__state_AI;
      return value === $ ? this.__JSWalletStandardNetworkHandler__state_AI = this.createState$1(null) : value;
    },
    connect$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this;
      var $async$connect$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.sendInternalMessage.call$2$client$request($async$self.get$jsNetworkType(), new A.Web3ConnectApplication($async$self.get$networkType())), $async$connect$0);
            case 3:
              // returning from await.
              $async$returnValue = new A.Web3WalletResponseMessage(null, null, $async$self.get$networkType());
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$connect$0, $async$completer);
    },
    switchChain$1(networkId) {
      return this.switchChain$body$JSWalletStandardNetworkHandler(networkId);
    },
    switchChain$body$JSWalletStandardNetworkHandler(networkId) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this;
      var $async$switchChain$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.sendInternalMessage.call$2$client$request($async$self.get$jsNetworkType(), new A.Web3SwitchApplicationNetwork($async$self.get$networkType(), networkId)), $async$switchChain$1);
            case 3:
              // returning from await.
              $async$returnValue = new A.Web3WalletResponseMessage(null, null, $async$self.get$networkType());
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$switchChain$1, $async$completer);
    },
    createStateEvent$6$accountsChanged$currentState$networkAccountsChanged$networkChanged$networksChanged$previousState(accountsChanged, currentState, networkAccountsChanged, networkChanged, networksChanged, previousState) {
      var t2, t3, t4, t5, _null = null,
        t1 = A._instanceType(this)._eval$1("JSWalletStandardNetworkHandler.4");
      t1._as(previousState);
      t1._as(currentState);
      t1 = type$.JSArray_JSNetworkEventType;
      t2 = A._setArrayType([], t1);
      if (networksChanged || accountsChanged)
        t2.push(B.JSNetworkEventType_1);
      if (networkChanged)
        t2.push(B.JSNetworkEventType_2);
      if (networkAccountsChanged)
        B.JSArray_methods.addAll$1(t2, A._setArrayType([B.JSNetworkEventType_3, B.JSNetworkEventType_0], t1));
      t1 = accountsChanged ? currentState.get$jsAccounts() : _null;
      if (networksChanged) {
        t3 = currentState.chains;
        t4 = A._arrayInstanceType(t3);
        t5 = t4._eval$1("MappedListIterable<1,String>");
        t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("String(1)")._as(new A.JSWalletStandardNetworkHandler_createStateEvent_closure(this)), t5), t5._eval$1("ListIterable.E"));
      } else
        t3 = _null;
      t3 = A.JSWalletStandardChange_constructor_setup(t1, t3);
      t1 = networkAccountsChanged ? A.JSWalletConnectEvent_constructor_setup(currentState.get$networkJsAccounts()) : _null;
      if (networkAccountsChanged) {
        t4 = currentState.defaultAccount;
        t4 = t4 == null ? _null : t4.jsAccount;
      } else
        t4 = _null;
      return A.JSWalletNetworkEvent_constructor_(t4, t3, t2, _null, t1);
    },
    getState$0() {
      return this.getState$body$JSWalletStandardNetworkHandler(A._instanceType(this)._eval$1("JSWalletStandardNetworkHandler.4"));
    },
    getState$body$JSWalletStandardNetworkHandler($async$type) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this;
      var $async$getState$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.lock.synchronized$1$1(new A.JSWalletStandardNetworkHandler_getState_closure($async$self), A._instanceType($async$self)._eval$1("JSWalletStandardNetworkHandler.4")), $async$getState$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$getState$0, $async$completer);
    },
    onRequestDone$1(message) {
    },
    finalizeError$3$error$message$params(error, message, params) {
      return this.finalizeError$body$JSWalletStandardNetworkHandler(error, message, type$.nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider._as(params));
    },
    finalizeError$body$JSWalletStandardNetworkHandler(error, message, params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue;
      var $async$finalizeError$3$error$message$params = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = {type: "response", status: "failed", data: A.jsify(error.toJson$0())};
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$finalizeError$3$error$message$params, $async$completer);
    },
    finalizeWalletResponse$3$message$params$response(message, params, response) {
      return this.finalizeWalletResponse$body$JSWalletStandardNetworkHandler(message, type$.nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider._as(params), response);
    },
    finalizeWalletResponse$body$JSWalletStandardNetworkHandler(message, params, response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue;
      var $async$finalizeWalletResponse$3$message$params$response = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = {type: "response", status: "success", data: A.jsify(response.result)};
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$finalizeWalletResponse$3$message$params$response, $async$completer);
    },
    initChain$1(authenticated) {
      return this.initChain$body$JSWalletStandardNetworkHandler(authenticated);
    },
    initChain$body$JSWalletStandardNetworkHandler(authenticated) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this;
      var $async$initChain$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.lock.synchronized$1$1(new A.JSWalletStandardNetworkHandler_initChain_closure($async$self, authenticated), type$.JSObject), $async$initChain$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$initChain$1, $async$completer);
    },
    createEvent$1($event) {
      return this.createEvent$body$JSWalletStandardNetworkHandler($event);
    },
    createEvent$body$JSWalletStandardNetworkHandler($event) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_JSObject),
        $async$returnValue, $async$self = this, t1, t2, t3, t4, t5, state;
      var $async$createEvent$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$createEvent$1);
              case 3:
                // returning from await.
                state = $async$result;
                switch ($event) {
                  case B.JSEventType_5:
                    t1 = A._setArrayType([B.JSNetworkEventType_1], type$.JSArray_JSNetworkEventType);
                    t2 = state.get$jsAccounts();
                    t3 = state.chains;
                    t4 = A._arrayInstanceType(t3);
                    t5 = t4._eval$1("MappedListIterable<1,String>");
                    t3 = A.List_List$_of(new A.MappedListIterable(t3, t4._eval$1("String(1)")._as(new A.JSWalletStandardNetworkHandler_createEvent_closure($async$self)), t5), t5._eval$1("ListIterable.E"));
                    $async$returnValue = A.JSWalletNetworkEvent_constructor_(null, A.JSWalletStandardChange_constructor_setup(t2, t3), t1, null, null);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.JSEventType_0:
                    t1 = A._setArrayType([B.JSNetworkEventType_3, B.JSNetworkEventType_0], type$.JSArray_JSNetworkEventType);
                    t2 = state.defaultAccount;
                    t2 = t2 == null ? null : t2.jsAccount;
                    $async$returnValue = A.JSWalletNetworkEvent_constructor_(t2, null, t1, null, A.JSWalletConnectEvent_constructor_setup(state.get$networkJsAccounts()));
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    break;
                }
                $async$returnValue = null;
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$createEvent$1, $async$completer);
    },
    event$1($event) {
      return this.event$body$JSWalletStandardNetworkHandler($event);
    },
    event$body$JSWalletStandardNetworkHandler($event) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, e;
      var $async$event$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.createEvent$1(A.JSEventType_name(A._asString($event.event))), $async$event$1);
            case 3:
              // returning from await.
              e = $async$result;
              if (e == null) {
                // goto return
                $async$goto = 1;
                break;
              }
              $async$self.sendMessageToClient.call$2({type: "event", data: e}, $async$self.get$jsNetworkType());
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$event$1, $async$completer);
    },
    get$jsNetworkType() {
      var result, _this = this,
        value = _this.__JSWalletStandardNetworkHandler_jsNetworkType_FI;
      if (value === $) {
        result = A.JSClientType_fronNetworkName(_this.get$networkType().name);
        _this.__JSWalletStandardNetworkHandler_jsNetworkType_FI !== $ && A.throwLateFieldADI("jsNetworkType");
        _this.__JSWalletStandardNetworkHandler_jsNetworkType_FI = result;
        value = result;
      }
      return value;
    }
  };
  A.JSWalletStandardNetworkHandler_createStateEvent_closure.prototype = {
    call$1(e) {
      return A._instanceType(this.$this)._eval$1("JSWalletStandardNetworkHandler.3")._as(e).get$identifier();
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("String(JSWalletStandardNetworkHandler.3)");
    }
  };
  A.JSWalletStandardNetworkHandler_getState_closure.prototype = {
    call$0() {
      return this.$this.get$_network_handler$_state();
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("JSWalletStandardNetworkHandler.4()");
    }
  };
  A.JSWalletStandardNetworkHandler_initChain_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this, t3, t4, t5, t6, $event, t1, currentState, state, t2;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              currentState = t1.get$_network_handler$_state();
              state = t1.createState$1($async$self.authenticated);
              t2 = A._instanceType(t1)._eval$1("JSWalletStandardNetworkHandler.4");
              t2._as(currentState);
              t2._as(state);
              t2 = A._instanceType(state);
              t2._eval$1("WalletStandardChainWeb3State<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2,WalletStandardChainWeb3State.3>")._as(currentState);
              t3 = state.state === currentState.state;
              t4 = !t3 || !A.CompareUtils_iterableIsEqual(currentState.chains, state.chains, t2._eval$1("WalletStandardChainWeb3State.3"));
              t5 = !t3 || state.networkAccountChanged$1(currentState);
              t6 = !t3 || !J.$eq$(state.defaultChain, currentState.defaultChain);
              $event = t1.createStateEvent$6$accountsChanged$currentState$networkAccountsChanged$networkChanged$networksChanged$previousState(!t3 || !A.CompareUtils_iterableIsEqual(state.accounts, currentState.accounts, t2._eval$1("JSWalletStateAccount<WalletStandardChainWeb3State.0,WalletStandardChainWeb3State.1,WalletStandardChainWeb3State.2>")), state, t5, t6, t4, currentState);
              t1.__JSWalletStandardNetworkHandler__state_AI = state;
              $async$returnValue = $event;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 115
  };
  A.JSWalletStandardNetworkHandler_createEvent_closure.prototype = {
    call$1(e) {
      return A._instanceType(this.$this)._eval$1("JSWalletStandardNetworkHandler.3")._as(e).get$identifier();
    },
    $signature() {
      return A._instanceType(this.$this)._eval$1("String(JSWalletStandardNetworkHandler.3)");
    }
  };
  A.JSNetworkState.prototype = {
    _enumToString$0() {
      return "JSNetworkState." + this._name;
    }
  };
  A._JSWalletStateAccount_Object_Equatable.prototype = {};
  A.JSNetworkEventType.prototype = {
    _enumToString$0() {
      return "JSNetworkEventType." + this._name;
    }
  };
  A.JSEventType.prototype = {
    _enumToString$0() {
      return "JSEventType." + this._name;
    }
  };
  A.JSEventType_name_closure.prototype = {
    call$1(e) {
      return type$.JSEventType._as(e)._name === this.name;
    },
    $signature: 479
  };
  A.JSEventType_name_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_ce8);
    },
    $signature: 0
  };
  A.JSWalletResponseType.prototype = {
    _enumToString$0() {
      return "JSWalletResponseType." + this._name;
    }
  };
  A.JSWalletResponseType_fromName_closure.prototype = {
    call$1(e) {
      return type$.JSWalletResponseType._as(e)._name === this.name;
    },
    $signature: 480
  };
  A.JSWalletResponseType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_ce8);
    },
    $signature: 0
  };
  A.JSClientType.prototype = {
    _enumToString$0() {
      return "JSClientType." + this._name;
    }
  };
  A.JSClientType_fronNetworkName_closure.prototype = {
    call$1(e) {
      return type$.JSClientType._as(e).networkName === this.name;
    },
    $signature: 113
  };
  A.JSClientType_fronNetworkName_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_ce8);
    },
    $signature: 0
  };
  A.JSClientType_fromName_closure.prototype = {
    call$1(e) {
      return type$.JSClientType._as(e)._name === this.name;
    },
    $signature: 113
  };
  A.JSClientType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_ce8);
    },
    $signature: 0
  };
  A.PageMessageType.prototype = {
    _enumToString$0() {
      return "PageMessageType." + this._name;
    }
  };
  A.PageMessageType_fromName_closure.prototype = {
    call$1(e) {
      return type$.PageMessageType._as(e)._name === this.name;
    },
    $signature: 482
  };
  A.PageMessageType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_ce8);
    },
    $signature: 0
  };
  A.PageRequestType.prototype = {
    _enumToString$0() {
      return "PageRequestType." + this._name;
    }
  };
  A.PageRequestType_fromName_closure.prototype = {
    call$1(e) {
      return type$.PageRequestType._as(e)._name === this.name;
    },
    $signature: 483
  };
  A.PageRequestType_fromName_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_ce8);
    },
    $signature: 0
  };
  A.PageMessageRequest_get_dartParams_closure.prototype = {
    call$1(e) {
      return A.dartify(e);
    },
    $signature: 45
  };
  A.SolanaWeb3State.prototype = {};
  A.SolanaWeb3State_SolanaWeb3State_closure.prototype = {
    call$1(e) {
      var t1, t2;
      type$.Web3SolanaChainAccount._as(e);
      t1 = e.address.address;
      t2 = e.network.identifier;
      return new A.JSWalletStateAccount(e, A.JSSolanaWalletAccount_constructor_setup(t1, t2, A.List_List$from(new A.SolAddrDecoder().decodeAddr$1(t1), true, type$.int)), t2, type$.JSWalletStateAccount_SolAddress_Web3SolanaChainAccount_JSObject);
    },
    $signature: 484
  };
  A.SolanaWeb3State_SolanaWeb3State_closure0.prototype = {
    call$1(e) {
      type$.Web3SolanaChainAccount._as(e);
      return e.id === this.authenticated.currentNetwork.id && e._defaultAddress;
    },
    $signature: 485
  };
  A.JSSolanaHandler.prototype = {
    request$1(params) {
      return this.request$body$JSSolanaHandler(params);
    },
    request$body$JSSolanaHandler(params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this, state, method;
      var $async$request$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self.getState$0(), $async$request$1);
            case 3:
              // returning from await.
              state = $async$result;
              method = A.Web3SolanaRequestMethods_fromName(A._asString(params.method));
            case 4:
              // switch
              switch (method) {
                case B.Web3SolanaRequestMethods_ibw:
                  // goto case
                  $async$goto = 6;
                  break;
                case B.Web3SolanaRequestMethods_H9E:
                  // goto case
                  $async$goto = 7;
                  break;
                case B.Web3SolanaRequestMethods_95z:
                  // goto case
                  $async$goto = 8;
                  break;
                case B.Web3SolanaRequestMethods_aGo:
                  // goto case
                  $async$goto = 9;
                  break;
                case B.Web3SolanaRequestMethods_102_solana_signMessage_List_empty:
                  // goto case
                  $async$goto = 10;
                  break;
                case B.Web3SolanaRequestMethods_106_solana_signIn_List_empty:
                  // goto case
                  $async$goto = 11;
                  break;
                default:
                  // goto default
                  $async$goto = 12;
                  break;
              }
              break;
            case 6:
              // case
              if (state.accounts.length !== 0) {
                $async$returnValue = new A.Web3WalletResponseMessage(null, null, $async$self.get$networkType());
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = $async$self.connect$0();
              // goto return
              $async$goto = 1;
              break;
            case 7:
              // case
              method.toString;
              $async$returnValue = $async$self._parseSendAllTransaction$3$method$params$state(method, params, state);
              // goto return
              $async$goto = 1;
              break;
            case 8:
              // case
            case 9:
              // case
              method.toString;
              $async$returnValue = $async$self._parseSignOrSendTransaction$3$method$params$state(method, params, state);
              // goto return
              $async$goto = 1;
              break;
            case 10:
              // case
              $async$returnValue = $async$self._parseSignMessageRequest$2(params, state);
              // goto return
              $async$goto = 1;
              break;
            case 11:
              // case
              $async$goto = state.accounts.length === 0 ? 13 : 14;
              break;
            case 13:
              // then
              $async$goto = 15;
              return A._asyncAwait($async$self.connect$0(), $async$request$1);
            case 15:
              // returning from await.
              $async$returnValue = $async$self._parseSignInRequest$2(params, state);
              // goto return
              $async$goto = 1;
              break;
            case 14:
              // join
              $async$returnValue = $async$self._parseSignInRequest$2(params, state);
              // goto return
              $async$goto = 1;
              break;
            case 12:
              // default
              throw A.wrapException(B.Web3RequestException_qYU);
            case 5:
              // after switch
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$request$1, $async$completer);
    },
    _solana$_parseTransaction$3$method$state$transaction(method, state, transaction) {
      var account, option, txBytes, t1, t2, t3, t4, t5, exception, _null = null;
      try {
        account = state.getJsAddressChainAccountOrThrow$1(type$.JSObject._as(transaction.account));
        option = null;
        t1 = type$.nullable_JSObject;
        t2 = t1._as(transaction.options);
        if ((t2 == null ? _null : A._asStringQ(t2.preflightCommitment)) != null)
          B.JSArray_methods.firstWhere$2$orElse(B.List_bYM, new A.JSSolanaHandler__parseTransaction_closure(transaction), new A.JSSolanaHandler__parseTransaction_closure0());
        t2 = t1._as(transaction.options);
        if ((t2 == null ? _null : A._asStringQ(t2.commitment)) != null)
          B.JSArray_methods.firstWhere$2$orElse(B.List_bYM, new A.JSSolanaHandler__parseTransaction_closure1(transaction), new A.JSSolanaHandler__parseTransaction_closure2());
        switch (method) {
          case B.Web3SolanaRequestMethods_95z:
            t2 = t1._as(transaction.options);
            t2 = t2 == null ? _null : A._asStringQ(t2.preflightCommitment);
            t1 = t1._as(transaction.options);
            option = new A.Web3SolanaSendTransactionOptions(t2, t1 == null ? _null : A._asIntQ(t1.minContextSlot), false, _null, _null);
            break;
          case B.Web3SolanaRequestMethods_aGo:
          case B.Web3SolanaRequestMethods_H9E:
            t2 = t1._as(transaction.options);
            t2 = t2 == null ? _null : A._asStringQ(t2.preflightCommitment);
            t3 = t1._as(transaction.options);
            t3 = t3 == null ? _null : A._asIntQ(t3.minContextSlot);
            t4 = t1._as(transaction.options);
            t4 = t4 == null ? _null : A._asStringQ(t4.commitment);
            t5 = t1._as(transaction.options);
            t5 = t5 == null ? _null : A._asIntQ(t5.maxRetries);
            t1 = t1._as(transaction.options);
            option = new A.Web3SolanaSendTransactionOptions(t2, t3, t1 == null ? _null : A._asBoolQ(t1.skipPreflight), t4, t5);
            break;
        }
        txBytes = A.APPJSUint8Array_toListInt(type$.Object._as(transaction.transaction));
        A.VersionedMessage_VersionedMessage$fromBuffer(txBytes);
        t1 = txBytes;
        t2 = option;
        A.BytesUtils_validateListOfBytes(t1);
        t1 = A.List_List$unmodifiable(t1, type$.int);
        return new A.Web3SolanaSendTransactionData(account, t1, t2);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
      }
      throw A.wrapException(A.Web3RequestExceptionConst_invalidAccountOrTransaction());
    },
    _parseSignOrSendTransaction$3$method$params$state(method, params, state) {
      return this._parseSignOrSendTransaction$body$JSSolanaHandler(method, params, state);
    },
    _parseSignOrSendTransaction$body$JSSolanaHandler(method, params, state) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3SolanaSendTransaction),
        $async$returnValue, $async$self = this, $length, messages, i, transactions, msg, t1, t2, t3, exception;
      var $async$_parseSignOrSendTransaction$3$method$params$state = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                try {
                  $length = A._asInt(type$.nullable_JSArray_nullable_Object._as(params.params).length);
                  messages = A._setArrayType([], type$.JSArray_Web3SolanaSendTransactionData);
                  i = 0;
                  t1 = type$.JSObject;
                  while (true) {
                    t2 = i;
                    t3 = $length;
                    if (typeof t2 !== "number") {
                      $async$returnValue = t2.$lt();
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    if (typeof t3 !== "number") {
                      $async$returnValue = A.iae(t3);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    if (!(t2 < t3))
                      break;
                    transactions = A.PageMessageRequest_elementAs(params, i, B.List_account_transaction, t1);
                    if (transactions == null) {
                      t1 = A.Web3RequestExceptionConst_invalidAccountOrTransaction();
                      throw A.wrapException(t1);
                    }
                    msg = $async$self._solana$_parseTransaction$3$method$state$transaction(method, state, transactions);
                    J.add$1$ax(messages, msg);
                    t2 = i;
                    if (typeof t2 !== "number") {
                      $async$returnValue = t2.$add();
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    i = t2 + 1;
                  }
                  t1 = A.Web3SolanaSendTransaction_Web3SolanaSendTransaction(messages, method, null);
                  $async$returnValue = t1;
                  // goto return
                  $async$goto = 1;
                  break;
                } catch (exception) {
                  if (A.unwrapException(exception) instanceof A.Web3RequestException)
                    throw exception;
                }
                throw A.wrapException(A.Web3RequestExceptionConst_invalidAccountOrTransaction());
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$_parseSignOrSendTransaction$3$method$params$state, $async$completer);
    },
    _parseSignMessage$2$message$state(message, state) {
      var messageBytes, e, t1, t2, t3, exception;
      try {
        messageBytes = A.MethodUtils_nullOnException(new A.JSSolanaHandler__parseSignMessage_closure(message), type$.List_int);
        if (messageBytes == null) {
          t1 = A.Web3RequestExceptionConst_invalidWalletStandardSignMessage();
          throw A.wrapException(t1);
        }
        t1 = state.getJsAddressChainAccountOrThrow$1(type$.JSObject._as(message.account));
        t2 = A.BytesUtils_toHexString(messageBytes, true, null);
        t3 = A.StringUtils_tryDecode(messageBytes, B.StringEncoding_1);
        return new A.Web3SolanaSignMessageParams(t3, t1, t2);
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.EIP4631Exception) {
          e = t1;
          throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters(e.message));
        } else if (t1 instanceof A.Web3RequestException)
          throw exception;
      }
      throw A.wrapException(A.Web3RequestExceptionConst_invalidWalletStandardSignMessage());
    },
    _parseSignIn$2$signIn$state(signIn, state) {
      var account, address, message, e, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, exception;
      try {
        account = null;
        if (A._asStringQ(signIn.address) != null) {
          address = A.MethodUtils_nullOnException(new A.JSSolanaHandler__parseSignIn_closure(signIn), type$.SolAddress);
          account = state.getAddressChainAccountOrThrow$2$identifier(address, A._asStringQ(signIn.chainId));
        } else
          account = state.get$defaultNetworkChainAccountOrThrow();
        t1 = A._asStringQ(signIn.domain);
        if (t1 == null) {
          t1 = state.applicationId;
          t1.toString;
        }
        t2 = account.address;
        t3 = A._asStringQ(signIn.statement);
        t3.toString;
        t4 = A._asStringQ(signIn.chainId);
        t5 = A._asStringQ(signIn.expirationTime);
        t6 = A._asStringQ(signIn.issuedAt);
        t7 = A._asStringQ(signIn.nonce);
        t8 = A._asStringQ(signIn.notBefore);
        t9 = A._asStringQ(signIn.requestId);
        t10 = type$.nullable_JSArray_nullable_Object._as(signIn.resources);
        if (t10 == null)
          t10 = null;
        else {
          t10 = type$.List_String._is(t10) ? t10 : new A.CastList(t10, A._arrayInstanceType(t10)._eval$1("CastList<1,String>"));
          t10 = J.map$1$1$ax(t10, new A.JSSolanaHandler__parseSignIn_closure0(), type$.String);
          t10 = A.List_List$_of(t10, t10.$ti._eval$1("ListIterable.E"));
        }
        message = A.EIP4631_EIP4631(t2.address, t4, t1, t5, t6, t7, t8, t9, t10, t3, A._asStringQ(signIn.uri), A._asStringQ(signIn.version));
        t3 = A.Web3SolanaSignInParams$(account, message);
        return t3;
      } catch (exception) {
        t1 = A.unwrapException(exception);
        if (t1 instanceof A.EIP4631Exception) {
          e = t1;
          throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters(e.message));
        } else if (t1 instanceof A.Web3RequestException)
          throw exception;
      }
      throw A.wrapException(A.Web3SolanaExceptionConstant_invalidSignInParams());
    },
    _parseSignMessageRequest$2(params, state) {
      return this._parseSignMessageRequest$body$JSSolanaHandler(params, state);
    },
    _parseSignMessageRequest$body$JSSolanaHandler(params, state) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3SolanaSignMessage),
        $async$returnValue, $async$self = this, $length, messages, i, message, msg, t1, t2, t3, exception;
      var $async$_parseSignMessageRequest$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                try {
                  $length = A._asInt(type$.nullable_JSArray_nullable_Object._as(params.params).length);
                  messages = A._setArrayType([], type$.JSArray_Web3SolanaSignMessageParams);
                  i = 0;
                  t1 = type$.JSObject;
                  while (true) {
                    t2 = i;
                    t3 = $length;
                    if (typeof t2 !== "number") {
                      $async$returnValue = t2.$lt();
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    if (typeof t3 !== "number") {
                      $async$returnValue = A.iae(t3);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    if (!(t2 < t3))
                      break;
                    message = A.PageMessageRequest_elementAs(params, i, B.List_empty5, t1);
                    if (message == null) {
                      t1 = A.Web3RequestExceptionConst_invalidWalletStandardSignMessage();
                      throw A.wrapException(t1);
                    }
                    msg = $async$self._parseSignMessage$2$message$state(message, state);
                    J.add$1$ax(messages, msg);
                    t2 = i;
                    if (typeof t2 !== "number") {
                      $async$returnValue = t2.$add();
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    i = t2 + 1;
                  }
                  if (J.get$length$asx(messages) === 0) {
                    t1 = A.Web3RequestExceptionConst_invalidWalletStandardSignMessage();
                    throw A.wrapException(t1);
                  }
                  t1 = A.Web3SolanaSignMessage_Web3SolanaSignMessage(messages, B.Web3SolanaRequestMethods_102_solana_signMessage_List_empty);
                  $async$returnValue = t1;
                  // goto return
                  $async$goto = 1;
                  break;
                } catch (exception) {
                  if (A.unwrapException(exception) instanceof A.Web3RequestException)
                    throw exception;
                  else {
                    t1 = A.Web3RequestExceptionConst_invalidWalletStandardSignMessage();
                    throw A.wrapException(t1);
                  }
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$_parseSignMessageRequest$2, $async$completer);
    },
    _parseSignInRequest$2(params, state) {
      return this._parseSignInRequest$body$JSSolanaHandler(params, state);
    },
    _parseSignInRequest$body$JSSolanaHandler(params, state) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3SolanaSignMessage),
        $async$returnValue, $async$self = this, $length, messages, i, signIn, msg, t1, t2, t3, exception;
      var $async$_parseSignInRequest$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                try {
                  $length = A._asInt(type$.nullable_JSArray_nullable_Object._as(params.params).length);
                  messages = A._setArrayType([], type$.JSArray_Web3SolanaSignInParams);
                  i = 0;
                  t1 = type$.JSObject;
                  while (true) {
                    t2 = i;
                    t3 = $length;
                    if (typeof t2 !== "number") {
                      $async$returnValue = t2.$lt();
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    if (typeof t3 !== "number") {
                      $async$returnValue = A.iae(t3);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    if (!(t2 < t3))
                      break;
                    signIn = A.PageMessageRequest_elementAs(params, i, B.List_empty5, t1);
                    if (signIn == null || A._asStringQ(signIn.statement) == null) {
                      t1 = A.Web3SolanaExceptionConstant_invalidSignInParams();
                      throw A.wrapException(t1);
                    }
                    msg = $async$self._parseSignIn$2$signIn$state(signIn, state);
                    J.add$1$ax(messages, msg);
                    t2 = i;
                    if (typeof t2 !== "number") {
                      $async$returnValue = t2.$add();
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    i = t2 + 1;
                  }
                  if (J.get$length$asx(messages) === 0) {
                    t1 = A.Web3SolanaExceptionConstant_invalidSignInParams();
                    throw A.wrapException(t1);
                  }
                  t1 = A.Web3SolanaSignMessage_Web3SolanaSignMessage(messages, B.Web3SolanaRequestMethods_106_solana_signIn_List_empty);
                  $async$returnValue = t1;
                  // goto return
                  $async$goto = 1;
                  break;
                } catch (exception) {
                  if (A.unwrapException(exception) instanceof A.Web3RequestException)
                    throw exception;
                  else {
                    t1 = A.Web3SolanaExceptionConstant_invalidSignInParams();
                    throw A.wrapException(t1);
                  }
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$_parseSignInRequest$2, $async$completer);
    },
    _parseSendAllTransaction$3$method$params$state(method, params, state) {
      return this._parseSendAllTransaction$body$JSSolanaHandler(method, params, state);
    },
    _parseSendAllTransaction$body$JSSolanaHandler(method, params, state) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3SolanaSendTransaction),
        $async$returnValue, $async$self = this, transactions, messages, i, msg, options, t1, t2, t3, exception;
      var $async$_parseSendAllTransaction$3$method$params$state = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                try {
                  transactions = A.PageMessageRequest_elementAs(params, 0, B.List_empty5, type$.JSArray_nullable_Object);
                  if (transactions == null) {
                    t1 = A.Web3RequestExceptionConst_invalidAccountOrTransaction();
                    throw A.wrapException(t1);
                  }
                  messages = A._setArrayType([], type$.JSArray_Web3SolanaSendTransactionData);
                  i = 0;
                  t1 = type$.JSObject;
                  while (true) {
                    t2 = i;
                    t3 = A._asInt(transactions.length);
                    if (typeof t2 !== "number") {
                      $async$returnValue = t2.$lt();
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    if (!(t2 < t3))
                      break;
                    msg = $async$self._solana$_parseTransaction$3$method$state$transaction(method, state, t1._as(transactions[i]));
                    J.add$1$ax(messages, msg);
                    t2 = i;
                    if (typeof t2 !== "number") {
                      $async$returnValue = t2.$add();
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    i = t2 + 1;
                  }
                  options = A.PageMessageRequest_elementAs(params, 1, B.List_empty5, t1);
                  t1 = options;
                  if ((t1 == null ? null : A._asStringQ(t1.mode)) != null) {
                    t1 = options;
                    t1 = A.SolanaSignAndSendAllTransactionMode_SolanaSignAndSendAllTransactionMode$fromName(t1 == null ? null : A._asStringQ(t1.mode));
                  } else
                    t1 = null;
                  t1 = A.Web3SolanaSendTransaction_Web3SolanaSendTransaction(messages, method, t1);
                  $async$returnValue = t1;
                  // goto return
                  $async$goto = 1;
                  break;
                } catch (exception) {
                  if (A.unwrapException(exception) instanceof A.Web3RequestException)
                    throw exception;
                }
                throw A.wrapException(A.Web3RequestExceptionConst_invalidAccountOrTransaction());
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$_parseSendAllTransaction$3$method$params$state, $async$completer);
    },
    get$networkType() {
      return B.NetworkType_406;
    },
    finalizeWalletResponse$3$message$params$response(message, params, response) {
      return this.finalizeWalletResponse$body$JSSolanaHandler(message, type$.nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider._as(params), response);
    },
    finalizeWalletResponse$body$JSSolanaHandler(message, params, response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this, _this, t1, t2, t3, signedTxs, signatures, r, signedMessages, t4, i, signedMessage, t5, state;
      var $async$finalizeWalletResponse$3$message$params$response = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$finalizeWalletResponse$3$message$params$response);
              case 3:
                // returning from await.
                state = $async$result;
                switch (A.Web3SolanaRequestMethods_fromName(A._asString(message.method))) {
                  case B.Web3SolanaRequestMethods_ibw:
                    if (state.accounts.length !== 0) {
                      _this = {};
                      _this.accounts = state.get$jsAccounts();
                      $async$returnValue = {type: "response", status: "success", data: _this};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = {type: "response", status: "failed", data: A.jsify(B.Web3RequestException_MuE.toResponseMessage$0().toJson$0())};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SolanaRequestMethods_95z:
                    t1 = J.map$1$1$ax(response.resultAsList$1$0(type$.Map_String_dynamic), new A.JSSolanaHandler_finalizeWalletResponse_closure(), type$.SolanaWeb3TransactionSignResponse);
                    t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
                    t2 = A._arrayInstanceType(t1);
                    t3 = t2._eval$1("MappedListIterable<1,JSObject>");
                    signedTxs = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("JSObject(1)")._as(new A.JSSolanaHandler_finalizeWalletResponse_closure0()), t3), t3._eval$1("ListIterable.E"));
                    $async$returnValue = {type: "response", status: "success", data: signedTxs};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SolanaRequestMethods_aGo:
                  case B.Web3SolanaRequestMethods_H9E:
                    t1 = J.map$1$1$ax(response.resultAsList$1$0(type$.Map_String_dynamic), new A.JSSolanaHandler_finalizeWalletResponse_closure1(), type$.SolanaWeb3TransactionSendResponse);
                    t1 = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
                    t2 = A._arrayInstanceType(t1);
                    t3 = t2._eval$1("MappedListIterable<1,JSObject>");
                    signedTxs = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("JSObject(1)")._as(new A.JSSolanaHandler_finalizeWalletResponse_closure2()), t3), t3._eval$1("ListIterable.E"));
                    $async$returnValue = {type: "response", status: "success", data: signedTxs};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SolanaRequestMethods_102_solana_signMessage_List_empty:
                  case B.Web3SolanaRequestMethods_106_solana_signIn_List_empty:
                    signatures = A._setArrayType([], type$.JSArray_JSObject);
                    r = params.cast$1$0(0, type$.Web3SolanaSignMessage);
                    t1 = J.map$1$1$ax(response.resultAsList$1$0(type$.Map_String_dynamic), new A.JSSolanaHandler_finalizeWalletResponse_closure3(), type$.Web3SolanaSignMessageResponse);
                    signedMessages = A.List_List$_of(t1, t1.$ti._eval$1("ListIterable.E"));
                    for (t1 = r.messages, t2 = t1.length, t3 = init.G, t4 = type$.Object, i = 0; i < signedMessages.length; ++i) {
                      signedMessage = signedMessages[i];
                      if (!(i < t2)) {
                        $async$returnValue = A.ioore(t1, i);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      t5 = t1[i].account;
                      _this = {};
                      _this.account = state.getJSAccountOrThrow$2$identifier(t5.address, t5.network.identifier);
                      _this.signedMessage = t4._as(t3.Uint8Array.from(A.jsify(signedMessage.signedMessage)));
                      _this.signature = t4._as(t3.Uint8Array.from(A.jsify(signedMessage.signature)));
                      _this.signatureType = "ed25519";
                      B.JSArray_methods.add$1(signatures, _this);
                    }
                    $async$returnValue = {type: "response", status: "success", data: signatures};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                }
                $async$returnValue = $async$self.super$JSWalletStandardNetworkHandler$finalizeWalletResponse(message, params, response);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$finalizeWalletResponse$3$message$params$response, $async$completer);
    },
    createState$1(authenticated) {
      if (authenticated == null)
        return A.SolanaWeb3State$_(B.List_empty12, null, A._setArrayType([], type$.JSArray_Web3ChainDefaultIdnetifier), null, null, B.JSNetworkState_1);
      return A.SolanaWeb3State_SolanaWeb3State(authenticated.getAuth$1$1(B.NetworkType_406, type$.Web3SolanaChainAuthenticated), authenticated.applicationId);
    }
  };
  A.JSSolanaHandler__parseTransaction_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Commitment._as(e);
      t1 = type$.nullable_JSObject._as(this.transaction.options);
      t1 = t1 == null ? null : A._asStringQ(t1.preflightCommitment);
      return e.value === t1;
    },
    $signature: 110
  };
  A.JSSolanaHandler__parseTransaction_closure0.prototype = {
    call$0() {
      return A.throwExpression(A.Web3SolanaExceptionConstant_invalidCommitmentOptions());
    },
    $signature: 0
  };
  A.JSSolanaHandler__parseTransaction_closure1.prototype = {
    call$1(e) {
      var t1;
      type$.Commitment._as(e);
      t1 = type$.nullable_JSObject._as(this.transaction.options);
      t1 = t1 == null ? null : A._asStringQ(t1.commitment);
      return e.value === t1;
    },
    $signature: 110
  };
  A.JSSolanaHandler__parseTransaction_closure2.prototype = {
    call$0() {
      return A.throwExpression(A.Web3SolanaExceptionConstant_invalidCommitmentOptions());
    },
    $signature: 0
  };
  A.JSSolanaHandler__parseSignMessage_closure.prototype = {
    call$0() {
      return A.APPJSUint8Array_toListInt(type$.Object._as(this.message.message));
    },
    $signature: 79
  };
  A.JSSolanaHandler__parseSignIn_closure.prototype = {
    call$0() {
      var t1 = A._asStringQ(this.signIn.address);
      t1.toString;
      new A.SolAddrDecoder().decodeAddr$1(t1);
      return new A.SolAddress(t1);
    },
    $signature: 487
  };
  A.JSSolanaHandler__parseSignIn_closure0.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 4
  };
  A.JSSolanaHandler_finalizeWalletResponse_closure.prototype = {
    call$1(e) {
      var t1 = type$.int,
        t2 = A.List_List$from(type$.Iterable_dynamic._as(type$.Map_String_dynamic._as(e).$index(0, "signedTransaction")), true, t1);
      A.BytesUtils_validateListOfBytes(t2);
      return new A.SolanaWeb3TransactionSignResponse(A.List_List$unmodifiable(t2, t1));
    },
    $signature: 488
  };
  A.JSSolanaHandler_finalizeWalletResponse_closure0.prototype = {
    call$1(e) {
      var _this;
      type$.SolanaWeb3TransactionSignResponse._as(e);
      _this = {};
      _this.signedTransaction = type$.Object._as(init.G.Uint8Array.from(A.jsify(e.signedTransaction)));
      return _this;
    },
    $signature: 489
  };
  A.JSSolanaHandler_finalizeWalletResponse_closure1.prototype = {
    call$1(e) {
      var t1 = type$.int,
        t2 = J.cast$1$0$ax(type$.List_dynamic._as(type$.Map_String_dynamic._as(e).$index(0, "signature")), t1);
      A.BytesUtils_validateListOfBytes(t2);
      return new A.SolanaWeb3TransactionSendResponse(A.List_List$unmodifiable(t2, t1));
    },
    $signature: 490
  };
  A.JSSolanaHandler_finalizeWalletResponse_closure2.prototype = {
    call$1(e) {
      var _this;
      type$.SolanaWeb3TransactionSendResponse._as(e);
      _this = {};
      _this.signature = type$.Object._as(init.G.Uint8Array.from(A.jsify(e.signature)));
      return _this;
    },
    $signature: 491
  };
  A.JSSolanaHandler_finalizeWalletResponse_closure3.prototype = {
    call$1(e) {
      var t1, t2, t3, t4;
      type$.Map_String_dynamic._as(e);
      t1 = A._asString(e.$index(0, "signer"));
      new A.SolAddrDecoder().decodeAddr$1(t1);
      t2 = type$.List_dynamic;
      t3 = type$.int;
      t4 = J.cast$1$0$ax(t2._as(e.$index(0, "signature")), t3);
      t2 = J.cast$1$0$ax(t2._as(e.$index(0, "signedMessage")), t3);
      A.BytesUtils_validateListOfBytes(t4);
      t4 = A.List_List$unmodifiable(t4, t3);
      A.BytesUtils_validateListOfBytes(t2);
      return new A.Web3SolanaSignMessageResponse(new A.SolAddress(t1), t4, A.List_List$unmodifiable(t2, t3));
    },
    $signature: 492
  };
  A.StellarWeb3State.prototype = {};
  A.StellarWeb3State_StellarWeb3State_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Web3StellarChainAccount._as(e);
      t1 = "stellar:" + e.network._name;
      return new A.JSWalletStateAccount(e, A.JSStellarWalletAccount_constructor_setup(J.toString$0$(e.address), t1, e.publicKey), t1, type$.JSWalletStateAccount_StellarAddress_Web3StellarChainAccount_JSObject);
    },
    $signature: 493
  };
  A.StellarWeb3State_StellarWeb3State_closure0.prototype = {
    call$1(e) {
      type$.Web3StellarChainAccount._as(e);
      return e.id === this.authenticated.currentNetwork.id && e._defaultAddress;
    },
    $signature: 494
  };
  A.JSStellarHandler.prototype = {
    request$1(params) {
      return this.request$body$JSStellarHandler(params);
    },
    request$body$JSStellarHandler(params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this, state, method;
      var $async$request$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$request$1);
              case 3:
                // returning from await.
                state = $async$result;
                method = A.Web3StellarRequestMethods_fromName(A._asString(params.method));
                switch (method) {
                  case B.Web3StellarRequestMethods_NUW:
                    if (state.accounts.length !== 0) {
                      $async$returnValue = new A.Web3WalletResponseMessage(null, null, $async$self.get$networkType());
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = $async$self.connect$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3StellarRequestMethods_102_stellar_signMessage_List_empty:
                    $async$returnValue = $async$self._stellar$_signMessage$2$params$state(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3StellarRequestMethods_tp5:
                  case B.Web3StellarRequestMethods_oQm:
                    method.toString;
                    $async$returnValue = $async$self._stellar$_parseTransaction$3$method$params$state(method, params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    throw A.wrapException(B.Web3RequestException_qYU);
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$request$1, $async$completer);
    },
    _stellar$_signMessage$2$params$state(params, state) {
      var data, messageBytes, t1, t2, t3, exception;
      try {
        data = A.PageMessageRequest_elementAs(params, 0, B.List_message, type$.JSObject);
        messageBytes = A.MethodUtils_nullOnException(new A.JSStellarHandler__signMessage_closure(data), type$.List_int);
        if (messageBytes == null || data == null) {
          t1 = A.Web3RequestExceptionConst_invalidWalletStandardSignMessage();
          throw A.wrapException(t1);
        }
        t1 = state.getJsAddressChainAccountOrThrow$1(type$.nullable_JSObject._as(data.account));
        t2 = A.BytesUtils_toHexString(messageBytes, true, null);
        t3 = A.StringUtils_tryDecode(messageBytes, B.StringEncoding_1);
        return new A.Web3StellarSignMessage(t1, t2, t3);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
        else {
          t1 = A.Web3RequestExceptionConst_invalidWalletStandardSignMessage();
          throw A.wrapException(t1);
        }
      }
    },
    _stellar$_parseTransaction$3$method$params$state(method, params, state) {
      var data, toBytes, t1, exception;
      try {
        data = A.PageMessageRequest_elementAs(params, 0, B.List_account_transaction, type$.Object);
        toBytes = A.StringUtils_encode(A._asString(data.transaction), B.StringEncoding_2);
        t1 = type$.nullable_JSObject;
        if (t1._as(data.account) == null) {
          t1 = A.Web3StellarExceptionConstant_invalidAccountOrTransaction();
          throw A.wrapException(t1);
        }
        t1 = A.Web3StellarSendTransaction_Web3StellarSendTransaction(state.getJsAddressChainAccountOrThrow$1(t1._as(data.account)), method, toBytes);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
        else {
          t1 = A.Web3StellarExceptionConstant_invalidAccountOrTransaction();
          throw A.wrapException(t1);
        }
      }
    },
    onRequestDone$1(message) {
    },
    get$networkType() {
      return B.NetworkType_mux;
    },
    finalizeWalletResponse$3$message$params$response(message, params, response) {
      return this.finalizeWalletResponse$body$JSStellarHandler(message, type$.nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider._as(params), response);
    },
    finalizeWalletResponse$body$JSStellarHandler(message, params, response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this, t1, _this, t2, state;
      var $async$finalizeWalletResponse$3$message$params$response = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$finalizeWalletResponse$3$message$params$response);
              case 3:
                // returning from await.
                state = $async$result;
                switch (A.Web3StellarRequestMethods_fromName(A._asString(message.method))) {
                  case B.Web3StellarRequestMethods_102_stellar_signMessage_List_empty:
                    t1 = response.resultAsList$1$0(type$.int);
                    _this = {};
                    _this.signature = type$.Object._as(init.G.Uint8Array.from(A.jsify(t1)));
                    $async$returnValue = {type: "response", status: "success", data: _this};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3StellarRequestMethods_tp5:
                  case B.Web3StellarRequestMethods_oQm:
                    t1 = response.resultAsMap$0();
                    t2 = A._asString(t1.$index(0, "envlope"));
                    t1 = A._asStringQ(t1.$index(0, "tx_hash"));
                    if (t1 != null) {
                      _this = {};
                      _this.envlope = t2;
                      _this.txId = t1;
                      $async$returnValue = {type: "response", status: "success", data: _this};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    _this = {};
                    _this.envlope = t2;
                    $async$returnValue = {type: "response", status: "success", data: _this};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3StellarRequestMethods_NUW:
                    if (state.accounts.length !== 0) {
                      _this = {};
                      _this.accounts = state.get$jsAccounts();
                      $async$returnValue = {type: "response", status: "success", data: _this};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = {type: "response", status: "failed", data: A.jsify(B.Web3RequestException_MuE.toResponseMessage$0().toJson$0())};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    break;
                }
                $async$returnValue = $async$self.super$JSWalletStandardNetworkHandler$finalizeWalletResponse(message, params, response);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$finalizeWalletResponse$3$message$params$response, $async$completer);
    },
    createState$1(authenticated) {
      if (authenticated == null)
        return A.StellarWeb3State$_(B.List_empty9, A._setArrayType([], type$.JSArray_Web3ChainDefaultIdnetifier), null, null, B.JSNetworkState_1);
      return A.StellarWeb3State_StellarWeb3State(authenticated.getAuth$1$1(B.NetworkType_mux, type$.Web3StellarChainAuthenticated));
    }
  };
  A.JSStellarHandler__signMessage_closure.prototype = {
    call$0() {
      var t1 = this.data;
      return t1 == null ? null : A.APPJSUint8Array_toListInt(type$.Object._as(t1.message));
    },
    $signature: 167
  };
  A.JSSubstrateTransaction_toJson_closure.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 4
  };
  A.SubstrateWeb3State.prototype = {
    get$knownMetadatas() {
      var t1 = this.chains,
        t2 = A._arrayInstanceType(t1),
        t3 = t2._eval$1("MappedListIterable<1,JSObject>");
      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("JSObject(1)")._as(new A.SubstrateWeb3State_knownMetadatas_closure()), t3), t3._eval$1("ListIterable.E"));
      return t1;
    }
  };
  A.SubstrateWeb3State_knownMetadatas_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Web3SubstrateChainIdnetifier._as(e);
      t1 = e.genesisHash;
      return {genesisHash: t1, specVersion: e.specVersion, identifier: "substrate:" + t1};
    },
    $signature: 496
  };
  A.SubstrateWeb3State_SubstrateWeb3State_closure.prototype = {
    call$1(e) {
      var t1, t2, t3, t4;
      type$.Web3SubstrateChainAccount._as(e);
      t1 = J.toString$0$(e.address);
      t2 = this.networks;
      t3 = e.id;
      t4 = t2.$index(0, t3).genesisHash;
      return new A.JSWalletStateAccount(e, A.JSSubstrateWalletAccount_constructor_setup(t1, "substrate:" + t2.$index(0, t3).genesisHash, t4, e.publicKey), "substrate:" + t2.$index(0, t3).genesisHash, type$.JSWalletStateAccount_BaseSubstrateAddress_Web3SubstrateChainAccount_JSObject);
    },
    $signature: 497
  };
  A.SubstrateWeb3State_SubstrateWeb3State_closure0.prototype = {
    call$1(e) {
      type$.Web3SubstrateChainAccount._as(e);
      return e.id === this.authenticated.currentNetwork.id && e._defaultAddress;
    },
    $signature: 498
  };
  A.JSSubstrateHandler.prototype = {
    request$1(params) {
      return this.request$body$JSSubstrateHandler(params);
    },
    request$body$JSSubstrateHandler(params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this, state, method;
      var $async$request$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$request$1);
              case 3:
                // returning from await.
                state = $async$result;
                method = A.Web3SubstrateRequestMethods_fromName(A._asString(params.method));
                switch (method) {
                  case B.Web3SubstrateRequestMethods_NBM:
                    if (state.accounts.length !== 0) {
                      $async$returnValue = new A.Web3WalletResponseMessage(null, null, $async$self.get$networkType());
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = $async$self.connect$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SubstrateRequestMethods_5wO:
                    $async$returnValue = new A.Web3WalletResponseMessage(null, null, $async$self.get$networkType());
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SubstrateRequestMethods_TSV:
                    $async$returnValue = $async$self._substrate$_signMessage$2$params$state(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SubstrateRequestMethods_aSQ:
                    method.toString;
                    $async$returnValue = $async$self._substrate$_parseTransaction$3$method$params$state(method, params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SubstrateRequestMethods_zJd:
                    $async$returnValue = $async$self._addNewChain$2$params$state(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    throw A.wrapException(B.Web3RequestException_qYU);
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$request$1, $async$completer);
    },
    _parsingMetadata$1(rawMetadata) {
      var metadata, t1, exception,
        decode = new A.CompactBytes(-1, null).deserialize$1(A.BytesUtils_fromHexString(rawMetadata, false)).value;
      try {
        metadata = A.VersionedMetadata_VersionedMetadata$fromBytes(decode, type$.SubstrateMetadata_dynamic);
        if (B.JSArray_methods.contains$1(B.List_14_15_16, metadata.version)) {
          t1 = metadata.version;
          return t1;
        }
      } catch (exception) {
      }
      return null;
    },
    _addNewChain$2$params$state(params, state) {
      var param, metadata, t1, exception, t2, t3, t4, t5, t6, t7, t8;
      try {
        t1 = A.PageMessageRequest_getElementAt(params, 0, type$.JSObject);
        t1.toString;
        param = t1;
        if (A._asStringQ(param.rawMetadata) != null)
          try {
            t1 = A._asStringQ(param.rawMetadata);
            t1.toString;
            metadata = this._parsingMetadata$1(t1);
            if (metadata == null) {
              t1 = A.Web3RequestExceptionConst_message("Unsuported metadata version.", null);
              throw A.wrapException(t1);
            }
          } catch (exception) {
            t1 = A.Web3SubstrateExceptionConstant_metadataParsingFailed();
            throw A.wrapException(t1);
          }
        t1 = param;
        t2 = type$.String;
        t1 = A.LinkedHashMap_LinkedHashMap$_literal(["chain", A._asString(t1.chain), "genesisHash", A._asString(t1.genesisHash), "ss58Format", A._asInt(t1.ss58Format), "chainType", A._asStringQ(t1.chainType), "specVersion", A._asInt(t1.specVersion), "tokenDecimals", A._asInt(t1.tokenDecimals), "tokenSymbol", A._asString(t1.tokenSymbol), "rawMetadata", A._asStringQ(t1.rawMetadata)], t2, type$.dynamic);
        t3 = A.Web3ValidatorUtils_parseString(t1, "chain", B.Web3SubstrateRequestMethods_zJd, t2);
        t4 = A.Web3ValidatorUtils_parseHex(t1, "genesisHash", B.Web3SubstrateRequestMethods_zJd, t2);
        t5 = type$.int;
        t6 = A.Web3ValidatorUtils_parseInt(t1, "ss58Format", B.Web3SubstrateRequestMethods_zJd, false, t5);
        t7 = A.Web3ValidatorUtils_parseString(t1, "chainType", B.Web3SubstrateRequestMethods_zJd, type$.nullable_String);
        t8 = A.Web3ValidatorUtils_parseInt(t1, "specVersion", B.Web3SubstrateRequestMethods_zJd, false, t5);
        t5 = A.Web3ValidatorUtils_parseInt(t1, "tokenDecimals", B.Web3SubstrateRequestMethods_zJd, false, t5);
        t2 = A.Web3ValidatorUtils_parseString(t1, "tokenSymbol", B.Web3SubstrateRequestMethods_zJd, t2);
        return new A.Web3SubstrateAddNewChain(t3, t4, t6, t7, t8, t5, t2);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
        else {
          t1 = A.Web3SubstrateExceptionConstant_metadataParsingFailed();
          throw A.wrapException(t1);
        }
      }
    },
    _substrate$_signMessage$2$params$state(params, state) {
      var param, address, account, challeng, t1, t2, exception;
      try {
        t1 = A.PageMessageRequest_getElementAt(params, 0, type$.JSObject);
        t1.toString;
        param = t1;
        address = A.MethodUtils_nullOnException(new A.JSSubstrateHandler__signMessage_closure(param), type$.BaseSubstrateAddress);
        if (address == null)
          throw A.wrapException(B.Web3RequestException_r5u);
        account = state.getAddressNetworkChainAccountOrThrow$1(address);
        if (A._asString(param.type) !== "bytes") {
          t1 = A.Web3RequestExceptionConst_message("Unsupported type. use 'bytes' for sign message.", null);
          throw A.wrapException(t1);
        }
        challeng = A.BytesUtils_fromHexString(A._asString(param.data), false);
        t1 = A.BytesUtils_toHexString(challeng, true, null);
        t2 = A.StringUtils_tryDecode(challeng, B.StringEncoding_1);
        return new A.Web3SubstrateSignMessage(account, t1, t2);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
      }
      throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters("Invalid address, type or data. The parameters must contain both 'address', type and 'data' as hexadecimal for signing."));
    },
    _substrate$_parseTransaction$3$method$params$state(method, params, state) {
      var param, address, account, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, exception;
      try {
        t1 = A.PageMessageRequest_getElementAt(params, 0, type$.JSObject);
        t1.toString;
        param = t1;
        address = A.MethodUtils_nullOnException(new A.JSSubstrateHandler__parseTransaction_closure(param), type$.BaseSubstrateAddress);
        account = state.getAddressChainAccountOrThrow$2$identifier(address, A._asString(param.genesisHash));
        t1 = A.JSSubstrateTransaction_toJson(param);
        t2 = type$.nullable_List_int;
        t3 = A.Web3ValidatorUtils_parseHex(t1, "assetId", B.Web3SubstrateRequestMethods_aSQ, t2);
        t4 = type$.List_int;
        t5 = A.Web3ValidatorUtils_parseHex(t1, "blockHash", B.Web3SubstrateRequestMethods_aSQ, t4);
        t6 = A.Web3ValidatorUtils_parseHex(t1, "genesisHash", B.Web3SubstrateRequestMethods_aSQ, t4);
        t7 = type$.int;
        t8 = A.Web3ValidatorUtils_parseInt(t1, "blockNumber", B.Web3SubstrateRequestMethods_aSQ, false, t7);
        t9 = A.Web3ValidatorUtils_parseBigInt(t1, "tip", B.Web3SubstrateRequestMethods_aSQ, false, type$.BigInt);
        t10 = A.Web3ValidatorUtils_parseInt(t1, "specVersion", B.Web3SubstrateRequestMethods_aSQ, false, t7);
        t11 = A.Web3ValidatorUtils_parseInt(t1, "nonce", B.Web3SubstrateRequestMethods_aSQ, false, t7);
        t12 = A.Web3ValidatorUtils_parseInt(t1, "mode", B.Web3SubstrateRequestMethods_aSQ, false, type$.nullable_int);
        t13 = A.Web3ValidatorUtils_parseInt(t1, "transactionVersion", B.Web3SubstrateRequestMethods_aSQ, true, t7);
        t7 = A.Web3ValidatorUtils_parseInt(t1, "version", B.Web3SubstrateRequestMethods_aSQ, false, t7);
        t1 = A.Web3SubstrateSendTransaction$_(account, t3, t5, t8, A.Web3ValidatorUtils_parseHex(t1, "method", B.Web3SubstrateRequestMethods_aSQ, t4), A.Web3ValidatorUtils_parseHex(t1, "era", B.Web3SubstrateRequestMethods_aSQ, t4), t6, A.Web3ValidatorUtils_parseHex(t1, "metadataHash", B.Web3SubstrateRequestMethods_aSQ, t2), t12, t11, A.Web3ValidatorUtils_parseList(false, t1, "signedExtensions", null, B.Web3SubstrateRequestMethods_aSQ, type$.List_String, type$.String), t10, t9, t13, t7, A.Web3ValidatorUtils_parseBool(t1, "withSignedTransaction", B.Web3SubstrateRequestMethods_aSQ, type$.nullable_bool));
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
        else {
          t1 = A.Web3RequestExceptionConst_invalidTransaction();
          throw A.wrapException(t1);
        }
      }
    },
    get$networkType() {
      return B.NetworkType_SDW;
    },
    finalizeWalletResponse$3$message$params$response(message, params, response) {
      return this.finalizeWalletResponse$body$JSSubstrateHandler(message, type$.nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider._as(params), response);
    },
    finalizeWalletResponse$body$JSSubstrateHandler(message, params, response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this, _this, t1, t2, t3, state;
      var $async$finalizeWalletResponse$3$message$params$response = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$finalizeWalletResponse$3$message$params$response);
              case 3:
                // returning from await.
                state = $async$result;
                switch (A.Web3SubstrateRequestMethods_fromName(A._asString(message.method))) {
                  case B.Web3SubstrateRequestMethods_5wO:
                    $async$returnValue = {type: "response", status: "success", data: state.get$knownMetadatas()};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SubstrateRequestMethods_NBM:
                    if (state.accounts.length !== 0) {
                      _this = {};
                      _this.accounts = state.get$jsAccounts();
                      $async$returnValue = {type: "response", status: "success", data: _this};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = {type: "response", status: "failed", data: A.jsify(B.Web3RequestException_MuE.toResponseMessage$0().toJson$0())};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SubstrateRequestMethods_zJd:
                    $async$returnValue = {type: "response", status: "success", data: true};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SubstrateRequestMethods_aSQ:
                  case B.Web3SubstrateRequestMethods_TSV:
                    t1 = response.resultAsMap$0();
                    t2 = A._asString(t1.$index(0, "signature"));
                    t3 = A._asStringQ(t1.$index(0, "signedTransaction"));
                    $async$returnValue = {type: "response", status: "success", data: {id: A._asInt(t1.$index(0, "id")), signature: t2, signedTransaction: t3}};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    break;
                }
                $async$returnValue = $async$self.super$JSWalletStandardNetworkHandler$finalizeWalletResponse(message, params, response);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$finalizeWalletResponse$3$message$params$response, $async$completer);
    },
    createState$1(authenticated) {
      if (authenticated == null)
        return A.SubstrateWeb3State$_(B.List_empty8, A._setArrayType([], type$.JSArray_Web3SubstrateChainIdnetifier), null, null, B.JSNetworkState_1);
      return A.SubstrateWeb3State_SubstrateWeb3State(authenticated.getAuth$1$1(B.NetworkType_SDW, type$.Web3SubstrateChainAuthenticated));
    }
  };
  A.JSSubstrateHandler__signMessage_closure.prototype = {
    call$0() {
      return A.BaseSubstrateAddress_BaseSubstrateAddress(A._asString(this.param.address));
    },
    $signature: 134
  };
  A.JSSubstrateHandler__parseTransaction_closure.prototype = {
    call$0() {
      return A.BaseSubstrateAddress_BaseSubstrateAddress(A._asString(this.param.address));
    },
    $signature: 134
  };
  A.SuiWeb3State.prototype = {};
  A.SuiWeb3State_SuiWeb3State_closure.prototype = {
    call$1(e) {
      var t1;
      type$.Web3SuiChainAccount._as(e);
      t1 = "sui:" + e.network._name;
      return new A.JSWalletStateAccount(e, A.JSSuiWalletAccount_constructor_setup(e.address.address, t1, e.publicKey, e.signingScheme), t1, type$.JSWalletStateAccount_SuiAddress_Web3SuiChainAccount_JSObject);
    },
    $signature: 500
  };
  A.SuiWeb3State_SuiWeb3State_closure0.prototype = {
    call$1(e) {
      type$.Web3SuiChainAccount._as(e);
      return e.id === this.authenticated.currentNetwork.id && e._defaultAddress;
    },
    $signature: 501
  };
  A.JSSuiHandler.prototype = {
    request$1(params) {
      return this.request$body$JSSuiHandler(params);
    },
    request$body$JSSuiHandler(params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this, state, method;
      var $async$request$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$request$1);
              case 3:
                // returning from await.
                state = $async$result;
                method = A.Web3SuiRequestMethods_fromName(A._asString(params.method));
                switch (method) {
                  case B.Web3SuiRequestMethods_KN8:
                    if (state.accounts.length !== 0) {
                      $async$returnValue = new A.Web3WalletResponseMessage(null, null, $async$self.get$networkType());
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = $async$self.connect$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty:
                  case B.Web3SuiRequestMethods_UFD:
                  case B.Web3SuiRequestMethods_wTN:
                  case B.Web3SuiRequestMethods_zFW:
                    method.toString;
                    $async$returnValue = $async$self._sui$_parseTransaction$3$method$params$state(method, params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SuiRequestMethods_102_sui_signMessage_List_empty:
                  case B.Web3SuiRequestMethods_SxN:
                    method.toString;
                    $async$returnValue = $async$self._sui$_signMessage$3$method$params$state(method, params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    throw A.wrapException(B.Web3RequestException_qYU);
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$request$1, $async$completer);
    },
    _sui$_signMessage$3$method$params$state(method, params, state) {
      var signingMessage, messageBytes, challeng, $content, t1, exception;
      try {
        t1 = type$.Object;
        signingMessage = A.PageMessageRequest_elementAs(params, 0, $.JSSuiSignMessageParams_properties, t1);
        if (signingMessage != null) {
          messageBytes = A.APPJSUint8Array_toListInt(t1._as(signingMessage.message));
          challeng = A.BytesUtils_toHexString(messageBytes, true, null);
          $content = A.StringUtils_tryDecode(messageBytes, B.StringEncoding_1);
          t1 = A.Web3SuiSignMessage_Web3SuiSignMessage(state.getJsAddressChainAccountOrThrow$1(type$.JSObject._as(signingMessage.account)), challeng, $content, method);
          return t1;
        }
      } catch (exception) {
      }
      throw A.wrapException(A.Web3RequestExceptionConst_invalidWalletStandardSignMessage());
    },
    _sui$_parseTransaction$3$method$params$state(method, params, state) {
      var transaction, transactionData, tx, owner, executeOptions, executeType, option, t1, exception;
      try {
        if (state.accounts.length === 0)
          throw A.wrapException(B.Web3RequestException_r5u);
        transaction = A.PageMessageRequest_getElementAt(params, 0, type$.Object);
        t1 = transaction;
        transactionData = A.JsUtils_toDartMap(t1 == null ? null : A._asString(t1.transaction));
        if (transactionData == null) {
          t1 = A.Web3RequestExceptionConst_invalidTransaction();
          throw A.wrapException(t1);
        }
        tx = A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJson(transactionData);
        owner = A.SuiAddress_SuiAddress(A._asString(transaction.account));
        executeOptions = null;
        executeType = A.QuickImutableList_firstWhereOrNull(B.List_PEP, new A.JSSuiHandler__parseTransaction_closure(transaction), type$.SuiApiExecuteTransactionRequestType);
        if (transaction.options != null) {
          t1 = transaction.options;
          t1.toString;
          option = t1;
          executeOptions = new A.SuiApiTransactionBlockResponseOptions(A._asBoolQ(option.showBalanceChanges), A._asBoolQ(option.showEffects), A._asBoolQ(option.showEvents), A._asBoolQ(option.showInput), A._asBoolQ(option.showObjectChanges), A._asBoolQ(option.showEffects), A._asBoolQ(option.showRawInput));
        }
        t1 = A.Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction(state.getAddressChainAccountOrThrow$2$identifier(owner, A._asString(transaction.chain)), executeOptions, executeType, method, tx);
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
      }
      throw A.wrapException(A.Web3RequestExceptionConst_invalidTransaction());
    },
    onRequestDone$1(message) {
    },
    get$networkType() {
      return B.NetworkType_AXR;
    },
    finalizeWalletResponse$3$message$params$response(message, params, response) {
      return this.finalizeWalletResponse$body$JSSuiHandler(message, type$.nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider._as(params), response);
    },
    finalizeWalletResponse$body$JSSuiHandler(message, params, response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this, _this, transaction, signedMessage, t1, state;
      var $async$finalizeWalletResponse$3$message$params$response = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$finalizeWalletResponse$3$message$params$response);
              case 3:
                // returning from await.
                state = $async$result;
                switch (A.Web3SuiRequestMethods_fromName(A._asString(message.method))) {
                  case B.Web3SuiRequestMethods_KN8:
                    if (state.accounts.length !== 0) {
                      _this = {};
                      _this.accounts = state.get$jsAccounts();
                      $async$returnValue = {type: "response", status: "success", data: _this};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = {type: "response", status: "failed", data: A.jsify(B.Web3RequestException_MuE.toResponseMessage$0().toJson$0())};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty:
                    transaction = A.Web3SuiSignTransactionResponse_Web3SuiSignTransactionResponse$fromJson(response.resultAsMap$0());
                    _this = {};
                    _this.bytes = transaction.bytes;
                    _this.signature = transaction.signature;
                    $async$returnValue = {type: "response", status: "success", data: _this};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SuiRequestMethods_102_sui_signMessage_List_empty:
                    signedMessage = A.Web3SuiSignMessageResponse_Web3SuiSignMessageResponse$fromJson(response.resultAsMap$0());
                    _this = {};
                    _this.messageBytes = signedMessage.messageBytes;
                    _this.signature = signedMessage.signature;
                    $async$returnValue = {type: "response", status: "success", data: _this};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SuiRequestMethods_SxN:
                    signedMessage = A.Web3SuiSignMessageResponse_Web3SuiSignMessageResponse$fromJson(response.resultAsMap$0());
                    _this = {};
                    _this.bytes = signedMessage.messageBytes;
                    _this.signature = signedMessage.signature;
                    $async$returnValue = {type: "response", status: "success", data: _this};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SuiRequestMethods_wTN:
                    transaction = A.Web3SuiSignTransactionResponse_Web3SuiSignTransactionResponse$fromJson(response.resultAsMap$0());
                    _this = {};
                    _this.transactionBlockBytes = transaction.bytes;
                    _this.signature = transaction.signature;
                    $async$returnValue = {type: "response", status: "success", data: _this};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SuiRequestMethods_UFD:
                    transaction = A.Web3SuiSignAndExecuteTransactionResponse_Web3SuiSignAndExecuteTransactionResponse$fromJson(response.resultAsMap$0());
                    _this = {};
                    _this.digest = transaction.digest;
                    _this.effects = transaction.effects;
                    $async$returnValue = {type: "response", status: "success", data: _this};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3SuiRequestMethods_zFW:
                    transaction = A.Web3SuiSignAndExecuteTransactionResponse_Web3SuiSignAndExecuteTransactionResponse$fromJson(response.resultAsMap$0());
                    t1 = A.jsify(transaction.excuteResponse);
                    if (t1 == null)
                      t1 = {};
                    t1.digest = transaction.digest;
                    $async$returnValue = {type: "response", status: "success", data: t1};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    break;
                }
                $async$returnValue = $async$self.super$JSWalletStandardNetworkHandler$finalizeWalletResponse(message, params, response);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$finalizeWalletResponse$3$message$params$response, $async$completer);
    },
    createState$1(authenticated) {
      if (authenticated == null)
        return A.SuiWeb3State$_(B.List_empty6, A._setArrayType([], type$.JSArray_Web3ChainDefaultIdnetifier), null, null, B.JSNetworkState_1);
      return A.SuiWeb3State_SuiWeb3State(authenticated.getAuth$1$1(B.NetworkType_AXR, type$.Web3SuiChainAuthenticated));
    }
  };
  A.JSSuiHandler__parseTransaction_closure.prototype = {
    call$1(e) {
      return type$.SuiApiExecuteTransactionRequestType._as(e).name === A._asStringQ(this.transaction.requestType);
    },
    $signature: 82
  };
  A.TonWeb3State.prototype = {};
  A.TonWeb3State_TonWeb3State_closure.prototype = {
    call$1(e) {
      var t1, t2;
      type$.Web3TonChainAccount._as(e);
      t1 = e.address.toFriendlyAddress$0();
      t2 = e.get$accountState();
      return new A.JSWalletStateAccount(e, A.JSTonWalletAccount_constructor_setup(t1, e.get$identifier(), e.publicKey, t2), e.get$identifier(), type$.JSWalletStateAccount_TonAddress_Web3TonChainAccount_JSObject);
    },
    $signature: 502
  };
  A.TonWeb3State_TonWeb3State_closure0.prototype = {
    call$1(e) {
      type$.Web3TonChainAccount._as(e);
      return e.id === this.authenticated.currentNetwork.id && e._defaultAddress;
    },
    $signature: 503
  };
  A.JSTonHandler.prototype = {
    request$1(params) {
      return this.request$body$JSTonHandler(params);
    },
    request$body$JSTonHandler(params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this, state, method;
      var $async$request$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$request$1);
              case 3:
                // returning from await.
                state = $async$result;
                method = A.Web3TonRequestMethods_fromName(A._asString(params.method));
                switch (method) {
                  case B.Web3TonRequestMethods_100_ton_requestAccounts_List_empty:
                    if (state.accounts.length !== 0) {
                      $async$returnValue = new A.Web3WalletResponseMessage(null, null, $async$self.get$networkType());
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = $async$self.connect$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3TonRequestMethods_103_ton_sendTransaction_List_empty:
                  case B.Web3TonRequestMethods_101_ton_signTransaction_List_empty:
                    method.toString;
                    $async$returnValue = $async$self._ton$_parseTransaction$3$method$params$state(method, params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3TonRequestMethods_102_ton_signMessage_List_empty:
                    $async$returnValue = $async$self._ton$_signMessage$2$params$state(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    throw A.wrapException(B.Web3RequestException_qYU);
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$request$1, $async$completer);
    },
    _ton$_signMessage$2$params$state(params, state) {
      var signParams, messageBytes, defaultAccount, t1, t2, exception;
      try {
        signParams = A.PageMessageRequest_elementAs(params, 0, B.List_message, type$.JSObject);
        messageBytes = A.MethodUtils_nullOnException(new A.JSTonHandler__signMessage_closure(signParams), type$.List_int);
        if (signParams == null || messageBytes == null) {
          t1 = A.Web3RequestExceptionConst_invalidWalletStandardSignMessage();
          throw A.wrapException(t1);
        }
        defaultAccount = state.getJsAddressChainAccountOrThrow$1(type$.nullable_JSObject._as(signParams.account));
        t1 = A.BytesUtils_toHexString(messageBytes, true, null);
        t2 = A.StringUtils_tryDecode(messageBytes, B.StringEncoding_1);
        return new A.Web3TonSignMessage(defaultAccount, t1, t2);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
        else {
          t1 = A.Web3RequestExceptionConst_invalidWalletStandardSignMessage();
          throw A.wrapException(t1);
        }
      }
    },
    _ton$_parseTransaction$3$method$params$state(method, params, state) {
      return this._parseTransaction$body$JSTonHandler(method, params, state);
    },
    _parseTransaction$body$JSTonHandler(method, params, state) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3TonSendTransaction),
        $async$returnValue, txParams, account, messages, i, message, address, amount, stateInit, payload, msg, t1, t2, t3, t4, t5, t6, exception;
      var $async$_ton$_parseTransaction$3$method$params$state = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                try {
                  t1 = type$.JSObject;
                  txParams = A.PageMessageRequest_elementAs(params, 0, B.List_account_validUntil_messages, t1);
                  if (txParams == null) {
                    t1 = A.Web3RequestExceptionConst_invalidTransaction();
                    throw A.wrapException(t1);
                  }
                  account = state.getJsAddressChainAccountOrThrow$1(t1._as(txParams.account));
                  messages = A._setArrayType([], type$.JSArray_Web3TonTransactionMessage);
                  i = 0;
                  t2 = type$.JSArray_nullable_Object;
                  t3 = type$.TonAddress;
                  t4 = type$.Cell;
                  while (true) {
                    t5 = i;
                    t6 = A._asInt(t2._as(txParams.messages).length);
                    if (typeof t5 !== "number") {
                      $async$returnValue = t5.$lt();
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    if (!(t5 < t6))
                      break;
                    message = A.JSOBJ_as(B.List_address_amount, t1._as(t2._as(txParams.messages)[i]), t1);
                    if (message == null) {
                      t1 = A.Web3TonExceptionConstant_invalidTxMessage();
                      throw A.wrapException(t1);
                    }
                    address = A.MethodUtils_nullOnException(new A.JSTonHandler__parseTransaction_closure(message), t3);
                    if (address == null) {
                      t1 = A.Web3TonExceptionConstant_invalidTxMessage();
                      throw A.wrapException(t1);
                    }
                    if (address.workChain !== account.network.workchain) {
                      t1 = A.Web3RequestExceptionConst_invalidParameters("Invalid transaction network. message address network does not match the account network.");
                      throw A.wrapException(t1);
                    }
                    amount = A.BigintUtils_tryParse(A._asStringQ(message.amount));
                    if (amount == null) {
                      t1 = A.Web3TonExceptionConstant_invalidTxMessage();
                      throw A.wrapException(t1);
                    }
                    stateInit = null;
                    payload = null;
                    if (A._asStringQ(message.stateInit) != null) {
                      stateInit = A.MethodUtils_nullOnException(new A.JSTonHandler__parseTransaction_closure0(message), t4);
                      if (stateInit == null) {
                        t1 = A.Web3TonExceptionConstant_invalidTxMessage();
                        throw A.wrapException(t1);
                      }
                    }
                    if (A._asStringQ(message.payload) != null) {
                      payload = A.MethodUtils_nullOnException(new A.JSTonHandler__parseTransaction_closure1(message), t4);
                      if (payload == null) {
                        t1 = A.Web3TonExceptionConstant_invalidTxMessage();
                        throw A.wrapException(t1);
                      }
                    }
                    msg = new A.Web3TonTransactionMessage(address, amount, stateInit, payload);
                    J.add$1$ax(messages, msg);
                    t5 = i;
                    if (typeof t5 !== "number") {
                      $async$returnValue = t5.$add();
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    i = t5 + 1;
                  }
                  t1 = A.Web3TonSendTransaction_Web3TonSendTransaction(account, messages, method, A._asInt(txParams.validUntil));
                  $async$returnValue = t1;
                  // goto return
                  $async$goto = 1;
                  break;
                } catch (exception) {
                  if (A.unwrapException(exception) instanceof A.Web3RequestException)
                    throw exception;
                  else {
                    t1 = A.Web3RequestExceptionConst_invalidTransaction();
                    throw A.wrapException(t1);
                  }
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$_ton$_parseTransaction$3$method$params$state, $async$completer);
    },
    onRequestDone$1(message) {
    },
    get$networkType() {
      return B.NetworkType_9gG;
    },
    finalizeWalletResponse$3$message$params$response(message, params, response) {
      return this.finalizeWalletResponse$body$JSTonHandler(message, type$.nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider._as(params), response);
    },
    finalizeWalletResponse$body$JSTonHandler(message, params, response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this, t1, _this, t2, state;
      var $async$finalizeWalletResponse$3$message$params$response = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$finalizeWalletResponse$3$message$params$response);
              case 3:
                // returning from await.
                state = $async$result;
                switch (A.Web3TonRequestMethods_fromName(A._asString(message.method))) {
                  case B.Web3TonRequestMethods_102_ton_signMessage_List_empty:
                    t1 = response.resultAsList$1$0(type$.int);
                    _this = {};
                    _this.signature = type$.Object._as(init.G.Uint8Array.from(A.jsify(t1)));
                    $async$returnValue = {type: "response", status: "success", data: _this};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3TonRequestMethods_103_ton_sendTransaction_List_empty:
                  case B.Web3TonRequestMethods_101_ton_signTransaction_List_empty:
                    t1 = response.resultAsMap$0();
                    t2 = A._asString(t1.$index(0, "message"));
                    t1 = A._asStringQ(t1.$index(0, "tx_hash"));
                    if (t1 == null) {
                      _this = {};
                      _this.externalMessage = t2;
                      $async$returnValue = {type: "response", status: "success", data: _this};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    _this = {};
                    _this.boc = t2;
                    _this.txId = t1;
                    $async$returnValue = {type: "response", status: "success", data: _this};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3TonRequestMethods_100_ton_requestAccounts_List_empty:
                    if (state.accounts.length !== 0) {
                      _this = {};
                      _this.accounts = state.get$jsAccounts();
                      $async$returnValue = {type: "response", status: "success", data: _this};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = {type: "response", status: "failed", data: A.jsify(B.Web3RequestException_MuE.toResponseMessage$0().toJson$0())};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                }
                $async$returnValue = $async$self.super$JSWalletStandardNetworkHandler$finalizeWalletResponse(message, params, response);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$finalizeWalletResponse$3$message$params$response, $async$completer);
    },
    createState$1(authenticated) {
      if (authenticated == null)
        return A.TonWeb3State$_(B.List_empty10, A._setArrayType([], type$.JSArray_Web3ChainDefaultIdnetifier), null, null, B.JSNetworkState_1);
      return A.TonWeb3State_TonWeb3State(authenticated.getAuth$1$1(B.NetworkType_9gG, type$.Web3TonChainAuthenticated));
    }
  };
  A.JSTonHandler__signMessage_closure.prototype = {
    call$0() {
      var t1 = this.signParams;
      return t1 == null ? null : A.APPJSUint8Array_toListInt(type$.Object._as(t1.message));
    },
    $signature: 167
  };
  A.JSTonHandler__parseTransaction_closure.prototype = {
    call$0() {
      var t1 = A._asStringQ(this.message.address);
      t1.toString;
      return A.TonAddress_TonAddress(t1);
    },
    $signature: 504
  };
  A.JSTonHandler__parseTransaction_closure0.prototype = {
    call$0() {
      var t1 = A._asStringQ(this.message.stateInit);
      t1.toString;
      return A.Cell_Cell$fromBytes(A.Base64Utils_decodeBase64(t1));
    },
    $signature: 73
  };
  A.JSTonHandler__parseTransaction_closure1.prototype = {
    call$0() {
      var t1 = A._asStringQ(this.message.payload);
      t1.toString;
      return A.Cell_Cell$fromBytes(A.Base64Utils_decodeBase64(t1));
    },
    $signature: 73
  };
  A.TronWeb3State.prototype = {
    getChainFromChainId$1(chainId) {
      return B.JSArray_methods.firstWhere$2$orElse(this.chains, new A.TronWeb3State_getChainFromChainId_closure(chainId), new A.TronWeb3State_getChainFromChainId_closure0());
    }
  };
  A.TronWeb3State_getChainFromChainId_closure.prototype = {
    call$1(e) {
      return type$.Web3TronChainIdnetifier._as(e).chainId === this.chainId;
    },
    $signature: 506
  };
  A.TronWeb3State_getChainFromChainId_closure0.prototype = {
    call$0() {
      return A.throwExpression(B.Web3RequestException_UFn);
    },
    $signature: 0
  };
  A.TronWeb3State_TronWeb3State_closure.prototype = {
    call$1(e) {
      var t1, t2, t3, t4;
      type$.Web3TronChainAccount._as(e);
      t1 = e.address;
      t2 = t1.toAddress$0();
      t1 = t1.toAddress$1(false);
      t3 = this.networks;
      t4 = e.id;
      return new A.JSWalletStateAccount(e, A.JSSTronWalletAccount_constructor_setup(t2, "tron:" + t3.$index(0, t4).chainId, t1, e.publicKey), "tron:" + t3.$index(0, t4).chainId, type$.JSWalletStateAccount_TronAddress_Web3TronChainAccount_JSObject);
    },
    $signature: 507
  };
  A.TronWeb3State_TronWeb3State_closure0.prototype = {
    call$1(e) {
      type$.Web3TronChainAccount._as(e);
      return e.id === this.authenticated.currentNetwork.id && e._defaultAddress;
    },
    $signature: 508
  };
  A.JSTronHandler.prototype = {
    createStateEvent$6$accountsChanged$currentState$networkAccountsChanged$networkChanged$networksChanged$previousState(accountsChanged, currentState, networkAccountsChanged, networkChanged, networksChanged, previousState) {
      var $event, chain, t2, t3,
        t1 = type$.TronWeb3State;
      t1._as(previousState);
      t1._as(currentState);
      $event = this.super$JSWalletStandardNetworkHandler$createStateEvent(accountsChanged, currentState, networkAccountsChanged, networkChanged, networksChanged, previousState);
      if (networkChanged) {
        chain = currentState.defaultChain;
        if (chain != null) {
          t1 = chain.chainId;
          t2 = B.JSInt_methods.toRadixString$1(t1, 16);
          t1 = B.JSInt_methods.toString$0(t1);
          t3 = chain.fullNode;
          $event.chainChanged = {chainId: "0x" + t2, netVersion: t1, solidityNode: chain.solidityNode, fullNode: t3, eventServer: t3, chain: "_"};
        } else
          $event.disconnect = {message: "The Provider is disconnected.", code: 4900};
      }
      return $event;
    },
    request$1(params) {
      return this.request$body$JSTronHandler(params);
    },
    request$body$JSTronHandler(params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this, chainId, t1, state;
      var $async$request$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$request$1);
              case 3:
                // returning from await.
                state = $async$result;
                switch (A.Web3TronRequestMethods_fromName(A._asString(params.method))) {
                  case B.Web3TronRequestMethods_FlG:
                    if (A.PageRequestType_fromName(A._asString(params.providerType)) === B.PageRequestType_0) {
                      if (state.accounts.length !== 0) {
                        $async$returnValue = new A.Web3WalletResponseMessage(null, null, $async$self.get$networkType());
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                    } else if (state.defaultAccount != null) {
                      $async$returnValue = new A.Web3WalletResponseMessage(null, state.get$defaultNetworkAddresses(), $async$self.get$networkType());
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = $async$self.connect$0();
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3TronRequestMethods_14H:
                    chainId = A.JSTronHandler__parseSwitchTronChain(params);
                    t1 = state.defaultChain;
                    if (chainId === (t1 == null ? null : t1.chainId)) {
                      $async$returnValue = new A.Web3WalletResponseMessage(null, "0x" + B.JSInt_methods.toRadixString$1(chainId, 16), $async$self.get$networkType());
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = $async$self.switchChain$1(state.getChainFromChainId$1(chainId).id);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3TronRequestMethods_ndr:
                    if (A.PageRequestType_fromName(A._asString(params.providerType)) === B.PageRequestType_0) {
                      $async$returnValue = $async$self._parseWalletStandardTransaction$2(params, state);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = $async$self._tron$_parseTransaction$2(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3TronRequestMethods_102_tron_signMessageV2_List_empty:
                    if (A.PageRequestType_fromName(A._asString(params.providerType)) === B.PageRequestType_0) {
                      $async$returnValue = $async$self._parseWalletStandardPersonalSign$2$params$state(params, state);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = $async$self._signMessageV2$2(params, state);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    throw A.wrapException(B.Web3RequestException_qYU);
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$request$1, $async$completer);
    },
    _parseWalletStandardPersonalSign$2$params$state(params, state) {
      var param, messageBytes, account, t1, messageBytes0, t2, exception;
      try {
        param = A.PageMessageRequest_elementAs(params, 0, B.List_account_message, type$.JSObject);
        t1 = param;
        if (t1 == null)
          messageBytes0 = null;
        else {
          t1 = t1.message;
          messageBytes0 = t1 == null ? null : A.APPJSUint8Array_toListInt(t1);
        }
        messageBytes = messageBytes0;
        if (param == null || messageBytes == null) {
          t1 = A.Web3RequestExceptionConst_invalidParameters("Invalid message bytes. message must be a valid bytes like Uint8Array");
          throw A.wrapException(t1);
        }
        account = state.getJsAddressChainAccountOrThrow$1(type$.nullable_JSObject._as(param.account));
        t1 = A.BytesUtils_toHexString(messageBytes, true, null);
        t2 = A.StringUtils_tryDecode(messageBytes, B.StringEncoding_1);
        return new A.Web3TronSignMessageV2(account, t1, t2);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
        else {
          t1 = A.Web3RequestExceptionConst_invalidWalletStandardSignMessage();
          throw A.wrapException(t1);
        }
      }
    },
    _signMessageV2$2(params, state) {
      var message, bytes, t1, t2, exception, _null = null;
      try {
        t1 = type$.Object;
        message = A.PageMessageRequest_elementAs(params, 0, B.List_empty5, t1);
        if (message != null && typeof message === "string") {
          t1 = state.get$defaultNetworkChainAccountOrThrow();
          t2 = A.BytesUtils_toHexString(A.StringUtils_encode(A._asString(message), B.StringEncoding_1), true, _null);
          return new A.Web3TronSignMessageV2(t1, t2, _null);
        }
        t2 = message;
        bytes = A.APPJSUint8Array_toListInt(t2 == null ? t1._as(t2) : t2);
        t1 = state.get$defaultNetworkChainAccountOrThrow();
        t2 = A.BytesUtils_toHexString(bytes, true, _null);
        return new A.Web3TronSignMessageV2(t1, t2, _null);
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.Web3RequestException)
          throw exception;
      }
      throw A.wrapException(A.Web3RequestExceptionConst_invalidParameters("The parameters must contain a valid string or Uint8Array."));
    },
    _parseWalletStandardTransaction$2(params, state) {
      return this._parseWalletStandardTransaction$body$JSTronHandler(params, state);
    },
    _parseWalletStandardTransaction$body$JSTronHandler(params, state) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3TronSendTransaction),
        $async$returnValue, param, transaction, t1, t2, t3, exception;
      var $async$_parseWalletStandardTransaction$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              try {
                t1 = type$.JSObject;
                param = A.PageMessageRequest_elementAs(params, 0, B.List_account_transaction, t1);
                if (param == null) {
                  t1 = A.Web3RequestExceptionConst_invalidAccountOrTransaction();
                  throw A.wrapException(t1);
                }
                transaction = A.MethodUtils_nullOnException(new A.JSTronHandler__parseWalletStandardTransaction_closure(param), type$.Transaction);
                if (transaction == null) {
                  t1 = A.Web3RequestExceptionConst_invalidTransaction();
                  throw A.wrapException(t1);
                }
                t2 = transaction.toBuffer$0();
                t3 = transaction.rawData.get$txID();
                t1 = state.getJsAddressChainAccountOrThrow$1(t1._as(param.account));
                A.BytesUtils_validateListOfBytes(t2);
                t2 = A.List_List$unmodifiable(t2, type$.int);
                $async$returnValue = new A.Web3TronSendTransaction(t2, t3, t1);
                // goto return
                $async$goto = 1;
                break;
              } catch (exception) {
                if (A.unwrapException(exception) instanceof A.Web3RequestException)
                  throw exception;
                else {
                  t1 = A.Web3RequestExceptionConst_invalidAccountOrTransaction();
                  $async$returnValue = A.throwExpression(t1);
                  // goto return
                  $async$goto = 1;
                  break;
                }
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_parseWalletStandardTransaction$2, $async$completer);
    },
    _tron$_parseTransaction$2(params, state) {
      return this._parseTransaction$body$JSTronHandler(params, state);
    },
    _parseTransaction$body$JSTronHandler(params, state) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3TronSendTransaction),
        $async$returnValue, transactionData, transaction, txId, e, t1, t2, t3, exception;
      var $async$_tron$_parseTransaction$2 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              try {
                transactionData = A.JsUtils_toDartMap(A.PageMessageRequest_elementAs(params, 0, B.List_empty5, type$.Object));
                if (transactionData == null) {
                  t1 = A.Web3RequestExceptionConst_invalidTransaction();
                  throw A.wrapException(t1);
                }
                transaction = A.Transaction_Transaction$fromJson(transactionData);
                txId = null;
                if (transactionData.$index(0, "txID") != null)
                  txId = A.BytesUtils_toHexString(A.BytesUtils_fromHexString(A._asString(transactionData.$index(0, "txID")), false), true, null);
                if (txId != null && txId !== transaction.rawData.get$txID()) {
                  t1 = A.Web3RequestExceptionConst_invalidTransaction();
                  throw A.wrapException(t1);
                }
                t1 = transaction.toBuffer$0();
                t2 = txId;
                t3 = state.get$defaultNetworkChainAccountOrThrow();
                A.BytesUtils_validateListOfBytes(t1);
                t1 = A.List_List$unmodifiable(t1, type$.int);
                $async$returnValue = new A.Web3TronSendTransaction(t1, t2, t3);
                // goto return
                $async$goto = 1;
                break;
              } catch (exception) {
                t1 = A.unwrapException(exception);
                if (t1 instanceof A.Web3RequestException)
                  throw exception;
                else {
                  e = t1;
                  t1 = A.Web3RequestExceptionConst_fromException(e);
                  throw A.wrapException(t1);
                }
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_tron$_parseTransaction$2, $async$completer);
    },
    onRequestDone$1(message) {
    },
    finalizeWalletResponse$3$message$params$response(message, params, response) {
      return this.finalizeWalletResponse$body$JSTronHandler(message, type$.nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider._as(params), response);
    },
    finalizeWalletResponse$body$JSTronHandler(message, params, response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this, _this, signature, t1, t2, transaction, transactionData, t3, method, state;
      var $async$finalizeWalletResponse$3$message$params$response = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                method = A.Web3TronRequestMethods_fromName(A._asString(message.method));
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$finalizeWalletResponse$3$message$params$response);
              case 3:
                // returning from await.
                state = $async$result;
                switch (method) {
                  case B.Web3TronRequestMethods_FlG:
                    if (A.PageRequestType_fromName(A._asString(message.providerType)) === B.PageRequestType_0) {
                      if (state.accounts.length !== 0) {
                        _this = {};
                        _this.accounts = state.get$jsAccounts();
                        $async$returnValue = {type: "response", status: "success", data: _this};
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                    } else if (state.defaultAccount != null) {
                      $async$returnValue = {type: "response", status: "success", data: A.QuickJSStringList_get_toJS(state.get$defaultNetworkAddresses())};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                    $async$returnValue = {type: "response", status: "failed", data: A.jsify(B.Web3RequestException_MuE.toResponseMessage$0().toJson$0())};
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3TronRequestMethods_102_tron_signMessageV2_List_empty:
                    signature = response.resultAsString$0();
                    if (A.PageRequestType_fromName(A._asString(message.providerType)) === B.PageRequestType_0) {
                      t1 = A.BytesUtils_fromHexString(signature, false);
                      _this = {};
                      _this.signature = type$.Object._as(init.G.Uint8Array.from(A.jsify(t1)));
                      $async$returnValue = {type: "response", status: "success", data: _this};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    } else {
                      $async$returnValue = {type: "response", status: "success", data: signature};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                  case B.Web3TronRequestMethods_ndr:
                    t1 = type$.Object;
                    if (A.PageRequestType_fromName(A._asString(message.providerType)) === B.PageRequestType_0) {
                      t2 = A.BytesUtils_fromHexString(response.resultAsString$0(), false);
                      _this = {};
                      _this.signedTransaction = t1._as(init.G.Uint8Array.from(A.jsify(t2)));
                      $async$returnValue = {type: "response", status: "success", data: _this};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    } else {
                      transaction = A.Transaction_Transaction$deserialize(A.List_List$from(A.BytesUtils_fromHexString(response.resultAsString$0(), false), true, type$.int));
                      transactionData = A.JsUtils_toDartMap(A.PageMessageRequest_elementAs(message, 0, B.List_empty5, t1));
                      if (transactionData == null)
                        throw A.wrapException(A.Web3RequestExceptionConst_invalidTransaction());
                      t1 = transaction.signature;
                      t2 = A._arrayInstanceType(t1);
                      t3 = t2._eval$1("MappedListIterable<1,String>");
                      t1 = A.List_List$_of(new A.MappedListIterable(t1, t2._eval$1("String(1)")._as(new A.JSTronHandler_finalizeWalletResponse_closure()), t3), t3._eval$1("ListIterable.E"));
                      transactionData.$indexSet(0, "signature", t1);
                      $async$returnValue = {type: "response", status: "success", data: A.jsify(transactionData)};
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                }
                $async$returnValue = $async$self.super$JSWalletStandardNetworkHandler$finalizeWalletResponse(message, params, response);
                // goto return
                $async$goto = 1;
                break;
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$finalizeWalletResponse$3$message$params$response, $async$completer);
    },
    get$networkType() {
      return B.NetworkType_KPy;
    },
    createState$1(authenticated) {
      if (authenticated == null)
        return A.TronWeb3State$_(B.List_empty13, A._setArrayType([], type$.JSArray_Web3TronChainIdnetifier), null, null, B.JSNetworkState_1);
      return A.TronWeb3State_TronWeb3State(authenticated.getAuth$1$1(B.NetworkType_KPy, type$.Web3TronChainAuthenticated));
    },
    createEvent$1($event) {
      return this.createEvent$body$JSTronHandler($event);
    },
    createEvent$body$JSTronHandler($event) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_JSObject),
        $async$returnValue, $async$self = this, chain, t1, t2, t3, state;
      var $async$createEvent$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 3;
                return A._asyncAwait($async$self.getState$0(), $async$createEvent$1);
              case 3:
                // returning from await.
                state = $async$result;
                switch ($event) {
                  case B.JSEventType_1:
                  case B.JSEventType_3:
                    $event = A.JSWalletNetworkEvent_constructor_(null, null, A._setArrayType([B.JSNetworkEventType_2], type$.JSArray_JSNetworkEventType), null, null);
                    chain = state.defaultChain;
                    if (chain != null) {
                      t1 = chain.chainId;
                      t2 = B.JSInt_methods.toRadixString$1(t1, 16);
                      t1 = B.JSInt_methods.toString$0(t1);
                      t3 = chain.fullNode;
                      $event.chainChanged = {chainId: "0x" + t2, netVersion: t1, solidityNode: chain.solidityNode, fullNode: t3, eventServer: t3, chain: "_"};
                    } else
                      $event.disconnect = {message: "The Provider is disconnected.", code: 4900};
                    $async$returnValue = $event;
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    $async$returnValue = $async$self.super$JSWalletStandardNetworkHandler$createEvent($event);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$createEvent$1, $async$completer);
    }
  };
  A.JSTronHandler__parseWalletStandardTransaction_closure.prototype = {
    call$0() {
      return A.Transaction_Transaction$deserialize(A.APPJSUint8Array_toListInt(type$.Object._as(this.param.transaction)));
    },
    $signature: 509
  };
  A.JSTronHandler_finalizeWalletResponse_closure.prototype = {
    call$1(e) {
      return A.BytesUtils_toHexString(type$.List_int._as(e), true, "0x");
    },
    $signature: 17
  };
  A.JsUtils_toListOfMap_closure.prototype = {
    call$1(e) {
      return A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(e), type$.String, type$.dynamic);
    },
    $signature: 16
  };
  A.JsUtils_toListOfMap_closure0.prototype = {
    call$1(e) {
      return A.LinkedHashMap_LinkedHashMap$from(type$.Map_dynamic_dynamic._as(e), type$.String, type$.dynamic);
    },
    $signature: 16
  };
  A.JSWalletHandler.prototype = {
    get$_networks() {
      var t1, t2, result, _this = this,
        value = _this.__JSWalletHandler__networks_FI;
      if (value === $) {
        t1 = _this.get$_sendEventToClient();
        t2 = _this.get$_sendInternalWalletMessage();
        result = A.LinkedHashMap_LinkedHashMap$_literal([B.JSClientType_Ethereum_ethereum, new A.JSEthereumHandler(new A.SynchronizedLock(), t1, t2), B.JSClientType_Tron_tron, new A.JSTronHandler(new A.SynchronizedLock(), t1, t2), B.JSClientType_Solana_solana, new A.JSSolanaHandler(new A.SynchronizedLock(), t1, t2), B.JSClientType_TON_ton, new A.JSTonHandler(new A.SynchronizedLock(), t1, t2), B.JSClientType_Stellar_stellar, new A.JSStellarHandler(new A.SynchronizedLock(), t1, t2), B.JSClientType_Substrate_substrate, new A.JSSubstrateHandler(new A.SynchronizedLock(), t1, t2), B.JSClientType_Aptos_aptos, new A.JSAptosHandler(new A.SynchronizedLock(), t1, t2), B.JSClientType_Sui_sui, new A.JSSuiHandler(new A.SynchronizedLock(), t1, t2), B.JSClientType_Cosmos_cosmos, new A.JSCosmosHandler(new A.SynchronizedLock(), t1, t2), B.JSClientType_Bitcoin_bitcoin, new A.JSBitcoinHandler(new A.SynchronizedLock(), t1, t2)], type$.JSClientType, type$.JSWalletStandardNetworkHandler_of_dynamic_and_Web3ChainAccount_dynamic_and_JSObject_and_Web3ChainIdnetifier_and_WalletStandardChainWeb3State_of_dynamic_and_Web3ChainAccount_dynamic_and_JSObject_and_Web3ChainIdnetifier);
        _this.__JSWalletHandler__networks_FI !== $ && A.throwLateFieldADI("_networks");
        _this.__JSWalletHandler__networks_FI = result;
        value = result;
      }
      return value;
    },
    handleClientMessage$1(request) {
      var t2, result, _this = this,
        client = A._asStringQ(request.client) == null ? null : A.JSClientType_fromName(A._asStringQ(request.client)),
        t1 = type$.JSObject;
      switch (A.PageMessageType_fromName(A._asString(t1._as(request.data).type))) {
        case B.PageMessageType_1:
          if (client == null) {
            A.PageMessageData_asEvent(t1._as(request.data));
            _this._sendGlobalEvent$0();
          } else {
            t2 = _this.get$_networks().$index(0, client);
            if (t2 != null)
              t2.event$1(A.PageMessageData_asEvent(t1._as(request.data)));
          }
          break;
        case B.PageMessageType_0:
          result = _this._completeJsRequest$1(request);
          result.then$1$1(_this.get$_sendMessageToClient(), type$.void);
          result.catchError$1(new A.JSWalletHandler_handleClientMessage_closure(_this, request));
          break;
      }
    },
    _onClientEvent$1(response) {
      var t1 = type$.JSObject;
      this.handleClientMessage$1(t1._as(t1._as(response).detail));
    },
    _sendMessageToClient$1(response) {
      var t1 = type$.JSObject,
        $event = A.CustomEvent_constructor_create(true, t1._as(response), "ETH_" + this.clientId);
      t1._as(init.G.window).dispatchEvent($event);
    },
    _sendEventToClient$2($event, client) {
      var t1 = client == null ? null : client._name;
      this._sendMessageToClient$1({requestId: "event", client: t1, data: $event});
    },
    _sendInternalWalletMessage$2$client$request(client, request) {
      return this._sendInternalWalletMessage$body$JSWalletHandler(type$.JSClientType._as(client), type$.Web3WalletRequestParams_dynamic._as(request));
    },
    _sendInternalWalletMessage$body$JSWalletHandler(client, request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this, result, response;
      var $async$_sendInternalWalletMessage$2$client$request = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait($async$self._buildAndSendMessage$2$client$message(client, request), $async$_sendInternalWalletMessage$2$client$request);
            case 3:
              // returning from await.
              response = $async$result._0;
              if (response.get$type() === B.Web3MessageTypes_List_100_15_error) {
                result = response.cast$1$0(0, type$.Web3ExceptionMessage);
                throw A.wrapException(A.Web3RequestException$(result.code, result.data, result.message, result.walletCode));
              }
              $async$returnValue = response.cast$1$0(0, type$.Web3MessageCore);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_sendInternalWalletMessage$2$client$request, $async$completer);
    },
    _buildAndSendMessage$3$client$message$params(client, message, params) {
      return this._buildAndSendMessage$body$JSWalletHandler(client, message, params);
    },
    _buildAndSendMessage$2$client$params(client, params) {
      return this._buildAndSendMessage$3$client$message$params(client, null, params);
    },
    _buildAndSendMessage$2$client$message(client, message) {
      return this._buildAndSendMessage$3$client$message$params(client, message, null);
    },
    _buildAndSendMessage$body$JSWalletHandler(client, message, params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Record_2_Web3MessageCore_and_nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$self = this, requestId, request, globalMethod, handler, e, exception, exception0, t1, requestId0, completer, exception1, t2, response, $async$exception1;
      var $async$_buildAndSendMessage$3$client$message$params = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              message = message;
              t1 = $async$self.completer;
              requestId0 = A.UUID_generateUUIDv4();
              completer = new A.MessageCompleter(requestId0, new A._AsyncCompleter(new A._Future($.Zone__current, type$._Future_Web3MessageCore), type$._AsyncCompleter_Web3MessageCore));
              t1._awaitingMessages.$indexSet(0, requestId0, completer);
              requestId = requestId0;
              $async$handler = 4;
              $async$goto = message == null ? 7 : 8;
              break;
            case 7:
              // then
              if (params == null)
                throw A.wrapException(B.WalletException_invalid_request_null);
              request = A.PageMessageData_asRequest(type$.JSObject._as(params.data));
              globalMethod = A.Web3GlobalRequestMethods_fromName(A._asString(request.method));
              $async$goto = globalMethod != null ? 9 : 11;
              break;
            case 9:
              // then
              $async$goto = 12;
              return A._asyncAwait($async$self._onGlobalRequest$2$client$globalMethod(client, globalMethod), $async$_buildAndSendMessage$3$client$message$params);
            case 12:
              // returning from await.
              message = $async$result;
              // goto join
              $async$goto = 10;
              break;
            case 11:
              // else
              handler = $async$self.get$_networks().$index(0, client);
              if (handler == null)
                throw A.wrapException(B.WalletException_invalid_request_null);
              $async$goto = message == null ? 13 : 14;
              break;
            case 13:
              // then
              $async$goto = 15;
              return A._asyncAwait(handler.request$1(request), $async$_buildAndSendMessage$3$client$message$params);
            case 15:
              // returning from await.
              message = $async$result;
            case 14:
              // join
            case 10:
              // join
            case 8:
              // join
            case 16:
              // switch
              switch (message.get$type()) {
                case B.Web3MessageTypes_List_100_18_globalResponse:
                  // goto case
                  $async$goto = 18;
                  break;
                case B.Web3MessageTypes_List_100_14_walletResponse:
                  // goto case
                  $async$goto = 19;
                  break;
                default:
                  // goto default
                  $async$goto = 20;
                  break;
              }
              break;
            case 18:
              // case
            case 19:
              // case
              t1.complete$2$requestId$response(requestId, message);
              // goto after switch
              $async$goto = 17;
              break;
            case 20:
              // default
              $async$goto = 21;
              return A._asyncAwait($async$self._sendMessageToWallet$2$message$requestId(message.cast$1$0(0, type$.Web3WalletRequestParams_dynamic), requestId), $async$_buildAndSendMessage$3$client$message$params);
            case 21:
              // returning from await.
              // goto after switch
              $async$goto = 17;
              break;
            case 17:
              // after switch
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception1 = $async$errorStack.pop();
              t2 = A.unwrapException($async$exception1);
              if (t2 instanceof A.Web3RequestException) {
                e = t2;
                exception = e.toResponseMessage$0();
                t1.complete$2$requestId$response(requestId, exception);
              } else {
                exception0 = B.Web3RequestException_ce8.toResponseMessage$0();
                t1.complete$2$requestId$response(requestId, exception0);
              }
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              $async$goto = 22;
              return A._asyncAwait(completer._completer.future, $async$_buildAndSendMessage$3$client$message$params);
            case 22:
              // returning from await.
              response = $async$result;
              t1 = message;
              if ((t1 == null ? null : t1.get$type()) !== B.Web3MessageTypes_List_100_12_walletRequest) {
                $async$returnValue = new A._Record_2(response, null);
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = message;
              $async$returnValue = new A._Record_2(response, t1 == null ? null : J.cast$1$0$ax(t1, type$.Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$_buildAndSendMessage$3$client$message$params, $async$completer);
    },
    _completeJsRequest$1(params) {
      return this._completeJsRequest$body$JSWalletHandler(params);
    },
    _completeJsRequest$body$JSWalletHandler(params) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], $async$self = this, result, response, request, t1, _0_0, message, t2, t3, client, handler;
      var $async$_completeJsRequest$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              client = A._asStringQ(params.client) == null ? null : A.JSClientType_fromName(A._asStringQ(params.client));
              handler = $async$self.get$_networks().$index(0, client);
              $async$handler = 3;
              $async$goto = 6;
              return A._asyncAwait($async$self._buildAndSendMessage$2$client$params(client, params), $async$_completeJsRequest$1);
            case 6:
              // returning from await.
              result = $async$result;
              response = result._0;
              request = result._1;
              t1 = null;
              _0_0 = response.get$type();
              $async$goto = B.Web3MessageTypes_List_100_18_globalResponse === _0_0 ? 8 : 9;
              break;
            case 8:
              // then
              $async$goto = 10;
              return A._asyncAwait($async$self._finalizeGlobalResponse$3$message$params$response(A.PageMessageData_asRequest(type$.JSObject._as(params.data)), request, J.cast$1$0$ax(response, type$.Web3GlobalResponseMessage)), $async$_completeJsRequest$1);
            case 10:
              // returning from await.
              t1 = $async$result;
              // goto break $label0$0
              $async$goto = 7;
              break;
            case 9:
              // join
              $async$goto = B.Web3MessageTypes_List_100_14_walletResponse === _0_0 ? 11 : 12;
              break;
            case 11:
              // then
              t2 = handler;
              t2.toString;
              $async$goto = 13;
              return A._asyncAwait(t2.finalizeWalletResponse$3$message$params$response(A.PageMessageData_asRequest(type$.JSObject._as(params.data)), request, J.cast$1$0$ax(response, type$.Web3WalletResponseMessage)), $async$_completeJsRequest$1);
            case 13:
              // returning from await.
              t1 = $async$result;
              // goto break $label0$0
              $async$goto = 7;
              break;
            case 12:
              // join
              $async$goto = B.Web3MessageTypes_List_100_15_error === _0_0 ? 14 : 15;
              break;
            case 14:
              // then
              t2 = handler;
              if (t2 == null)
                t2 = null;
              else {
                t3 = A.PageMessageData_asRequest(type$.JSObject._as(params.data));
                t3 = t2.finalizeError$3$error$message$params(J.cast$1$0$ax(response, type$.Web3ExceptionMessage), t3, request);
                t2 = t3;
              }
              t3 = type$.nullable_JSObject;
              $async$goto = 16;
              return A._asyncAwait(type$.Future_nullable_JSObject._is(t2) ? t2 : A._Future$value(t3._as(t2), t3), $async$_completeJsRequest$1);
            case 16:
              // returning from await.
              t2 = $async$result;
              t1 = t2 == null ? {type: "response", status: "failed", data: A.jsify(J.cast$1$0$ax(response, type$.Web3ExceptionMessage).toJson$0())} : t2;
              // goto break $label0$0
              $async$goto = 7;
              break;
            case 15:
              // join
              t1 = {type: "response", status: "failed", data: A.jsify(B.Web3RequestException_8vd.toJson$0())};
              // goto break $label0$0
              $async$goto = 7;
              break;
            case 7:
              // break $label0$0
              message = t1;
              t1 = A._asString(params.requestId);
              t2 = A._asStringQ(params.client) == null ? null : A.JSClientType_fromName(A._asStringQ(params.client));
              t1 = A.WalletMessage_constructor_response(t2, message, t1);
              $async$returnValue = t1;
              $async$next = [1];
              // goto finally
              $async$goto = 4;
              break;
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 4:
              // finally
              $async$handler = 2;
              t1 = handler;
              if (t1 != null)
                t1.onRequestDone$1(A.PageMessageData_asRequest(type$.JSObject._as(params.data)));
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$_completeJsRequest$1, $async$completer);
    },
    _updateAuthenticated$1(authenticated) {
      return this._updateAuthenticated$body$JSWalletHandler(authenticated);
    },
    _updateAuthenticated$body$JSWalletHandler(authenticated) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, t1, t2, t3, t4, t5, t6, t7, t8, _i, client, t9, t10, $event;
      var $async$_updateAuthenticated$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = authenticated.networks, t2 = t1.length, t3 = "ETH_" + $async$self.clientId, t4 = init.G, t5 = type$.JSObject, t6 = type$._Future_nullable_JSObject, t7 = type$.nullable_JSObject, t8 = type$.Future_nullable_JSObject, _i = 0;
            case 2:
              // for condition
              if (!(_i < t2)) {
                // goto after for
                $async$goto = 4;
                break;
              }
              client = A.JSClientType_fronNetworkName(t1[_i].name);
              t9 = $async$self.get$_networks().$index(0, client);
              t9 = t9 == null ? null : t9.initChain$1(authenticated);
              if (!t8._is(t9)) {
                t7._as(t9);
                t10 = new A._Future($.Zone__current, t6);
                t10._state = 8;
                t10._resultOrListeners = t9;
                t9 = t10;
              }
              $async$goto = 5;
              return A._asyncAwait(t9, $async$_updateAuthenticated$1);
            case 5:
              // returning from await.
              $event = $async$result;
              if ($event == null) {
                // goto for update
                $async$goto = 3;
                break;
              }
              t9 = {type: "event", data: $event};
              $event = A.CustomEvent_constructor_create(true, {requestId: "event", client: client._name, data: t9}, t3);
              t5._as(t4.window).dispatchEvent($event);
            case 3:
              // for update
              ++_i;
              // goto for condition
              $async$goto = 2;
              break;
            case 4:
              // after for
              $async$self._sendGlobalEvent$0();
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_updateAuthenticated$1, $async$completer);
    },
    _handleOnResponse$1(request) {
      return this._handleOnResponse$body$JSWalletHandler(type$.WalletEvent._as(request));
    },
    _handleOnResponse$body$JSWalletHandler(request) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$handler = 1, $async$errorStack = [], $async$self = this, data, encryptedMessage, decode, message, msg, msg0, msg1, msg2, e, toMessage, toMessage0, t1, exception, $async$exception;
      var $async$_handleOnResponse$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 3;
              data = A.List_List$from(request.data, true, type$.int);
              encryptedMessage = A.Web3EncryptedMessage_Web3EncryptedMessage$deserialize(data);
              decode = $async$self._crypto.decrypt$2(encryptedMessage.nonce, encryptedMessage.message);
              message = A.Web3MessageCore_Web3MessageCore$deserialize(decode);
            case 6:
              // switch
              switch (message.get$type()) {
                case B.Web3MessageTypes_List_100_18_globalResponse:
                  // goto case
                  $async$goto = 8;
                  break;
                case B.Web3MessageTypes_List_100_14_walletResponse:
                  // goto case
                  $async$goto = 9;
                  break;
                case B.Web3MessageTypes_List_100_15_error:
                  // goto case
                  $async$goto = 10;
                  break;
                case B.Web3MessageTypes_List_100_11_chains:
                  // goto case
                  $async$goto = 11;
                  break;
                default:
                  // goto after switch
                  $async$goto = 7;
                  break;
              }
              break;
            case 8:
              // case
              msg = J.cast$1$0$ax(message, type$.Web3GlobalResponseMessage);
              $async$goto = msg.authenticated != null ? 12 : 13;
              break;
            case 12:
              // then
              t1 = msg.authenticated;
              t1.toString;
              $async$goto = 14;
              return A._asyncAwait($async$self._updateAuthenticated$1(t1), $async$_handleOnResponse$1);
            case 14:
              // returning from await.
            case 13:
              // join
              $async$self.completer.complete$2$requestId$response(request.requestId, msg);
              // goto after switch
              $async$goto = 7;
              break;
            case 9:
              // case
              msg0 = J.cast$1$0$ax(message, type$.Web3WalletResponseMessage);
              $async$goto = msg0.authenticated != null ? 15 : 16;
              break;
            case 15:
              // then
              t1 = msg0.authenticated;
              t1.toString;
              $async$goto = 17;
              return A._asyncAwait($async$self._updateAuthenticated$1(t1), $async$_handleOnResponse$1);
            case 17:
              // returning from await.
            case 16:
              // join
              $async$self.completer.complete$2$requestId$response(request.requestId, msg0);
              // goto after switch
              $async$goto = 7;
              break;
            case 10:
              // case
              msg1 = J.cast$1$0$ax(message, type$.Web3ExceptionMessage);
              $async$goto = msg1.authenticated != null ? 18 : 19;
              break;
            case 18:
              // then
              t1 = msg1.authenticated;
              t1.toString;
              $async$goto = 20;
              return A._asyncAwait($async$self._updateAuthenticated$1(t1), $async$_handleOnResponse$1);
            case 20:
              // returning from await.
            case 19:
              // join
              $async$self.completer.complete$2$requestId$response(request.requestId, msg1);
              // goto after switch
              $async$goto = 7;
              break;
            case 11:
              // case
              msg2 = J.cast$1$0$ax(message, type$.Web3ChainMessage);
              $async$self._updateAuthenticated$1(msg2.authenticated);
              // goto after switch
              $async$goto = 7;
              break;
            case 7:
              // after switch
              $async$handler = 1;
              // goto after finally
              $async$goto = 5;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception = $async$errorStack.pop();
              t1 = A.unwrapException($async$exception);
              if (t1 instanceof A.Web3RequestException) {
                e = t1;
                t1 = request.requestId;
                toMessage = e.toResponseMessage$1$requestId(t1);
                $async$self.completer.complete$2$requestId$response(t1, toMessage);
              } else {
                t1 = request.requestId;
                toMessage0 = B.Web3RequestException_ce8.toResponseMessage$1$requestId(t1);
                $async$self.completer.complete$2$requestId$response(t1, toMessage0);
              }
              // goto after finally
              $async$goto = 5;
              break;
            case 2:
              // uncaught
              // goto rethrow
              $async$goto = 1;
              break;
            case 5:
              // after finally
              // implicit return
              return A._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$_handleOnResponse$1, $async$completer);
    },
    _onResponse$1(request) {
      var message,
        t1 = request == null ? null : request.clientId;
      if (t1 !== this.clientId)
        return false;
      switch (request.type) {
        case B.WalletEventTypes_1:
          message = A.Web3ExceptionMessage_Web3ExceptionMessage$deserialize(request.data, null);
          this.completer.complete$2$requestId$response(request.requestId, message);
          break;
        default:
          this._handleOnResponse$1(request);
          break;
      }
      return true;
    }
  };
  A.JSWalletHandler_handleClientMessage_closure.prototype = {
    call$1(e) {
      var message,
        t1 = this.request,
        t2 = A._asStringQ(t1.client) == null ? null : A.JSClientType_fromName(A._asStringQ(t1.client));
      t1 = A._asString(t1.requestId);
      message = A.WalletMessage_constructor_response(t2, {type: "response", status: "failed", data: A.jsify(B.Web3RequestException_ce8.toJson$0())}, t1);
      this.$this._sendMessageToClient$1(message);
      return message;
    },
    $signature: 512
  };
  A.JSWalletStandardHandler.prototype = {
    _getWalletChange$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Record_2_List_JSObject_and_List_String),
        $async$returnValue, $async$self = this, states, t3, t4, accounts, chains, t1, t2;
      var $async$_getWalletChange$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.get$_networks();
              t2 = A._instanceType(t1)._eval$1("LinkedHashMapValuesIterable<2>");
              t2 = A.MappedIterable_MappedIterable(new A.LinkedHashMapValuesIterable(t1, t2), t2._eval$1("Future<WalletStandardChainWeb3State<@,Web3ChainAccount<@>,JSObject,Web3ChainIdnetifier>>(Iterable.E)")._as(new A.JSWalletStandardHandler__getWalletChange_closure()), t2._eval$1("Iterable.E"), type$.Future_WalletStandardChainWeb3State_of_dynamic_and_Web3ChainAccount_dynamic_and_JSObject_and_Web3ChainIdnetifier);
              t1 = A.List_List$_of(t2, A._instanceType(t2)._eval$1("Iterable.E"));
              $async$goto = 3;
              return A._asyncAwait(A.Future_wait(t1, type$.WalletStandardChainWeb3State_of_dynamic_and_Web3ChainAccount_dynamic_and_JSObject_and_Web3ChainIdnetifier), $async$_getWalletChange$0);
            case 3:
              // returning from await.
              states = $async$result;
              t1 = J.getInterceptor$ax(states);
              t2 = t1.map$1$1(states, new A.JSWalletStandardHandler__getWalletChange_closure0(), type$.List_JSObject);
              t3 = A._instanceType(t2);
              t4 = t3._eval$1("ExpandIterable<Iterable.E,JSObject>");
              accounts = A.List_List$_of(new A.ExpandIterable(t2, t3._eval$1("Iterable<JSObject>(Iterable.E)")._as(new A.JSWalletStandardHandler__getWalletChange_closure1()), t4), t4._eval$1("Iterable.E"));
              t1 = t1.map$1$1(states, new A.JSWalletStandardHandler__getWalletChange_closure2(), type$.List_Web3ChainIdnetifier);
              t2 = A._instanceType(t1);
              t3 = t2._eval$1("ExpandIterable<Iterable.E,Web3ChainIdnetifier>");
              chains = A.List_List$_of(new A.ExpandIterable(t1, t2._eval$1("Iterable<Web3ChainIdnetifier>(Iterable.E)")._as(new A.JSWalletStandardHandler__getWalletChange_closure3()), t3), t3._eval$1("Iterable.E"));
              t1 = A._arrayInstanceType(chains);
              t2 = t1._eval$1("MappedListIterable<1,String>");
              t1 = A.List_List$_of(new A.MappedListIterable(chains, t1._eval$1("String(1)")._as(new A.JSWalletStandardHandler__getWalletChange_closure4()), t2), t2._eval$1("ListIterable.E"));
              $async$returnValue = new A._Record_2(accounts, t1);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_getWalletChange$0, $async$completer);
    },
    _sendGlobalEvent$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, change;
      var $async$_sendGlobalEvent$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self._getWalletChange$0(), $async$_sendGlobalEvent$0);
            case 2:
              // returning from await.
              change = $async$result;
              $async$self._sendMessageToClient$1(A.WalletMessage_constructor_event(null, {type: "event", data: A.JSWalletStandardChange_constructor_setup(change._0, change._1)}));
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_sendGlobalEvent$0, $async$completer);
    },
    _onGlobalRequest$2$client$globalMethod(client, globalMethod) {
      return this._onGlobalRequest$body$JSWalletStandardHandler(client, globalMethod);
    },
    _onGlobalRequest$body$JSWalletStandardHandler(client, globalMethod) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Web3MessageCore),
        $async$returnValue, $async$self = this;
      var $async$_onGlobalRequest$2$client$globalMethod = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                switch (globalMethod) {
                  case B.Web3GlobalRequestMethods_0_disconnect_List_empty:
                    $async$returnValue = new A.Web3DisconnectApplication($async$self.get$_networks().$index(0, client).get$networkType());
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  case B.Web3GlobalRequestMethods_1_connect_List_empty:
                    $async$returnValue = new A.Web3ConnectApplication(null);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    throw A.wrapException(B.Web3RequestException_qYU);
                }
              case 1:
                // return
                return A._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return A._asyncStartSync($async$_onGlobalRequest$2$client$globalMethod, $async$completer);
    },
    _finalizeGlobalResponse$3$message$params$response(message, params, response) {
      return this._finalizeGlobalResponse$body$JSWalletStandardHandler(message, type$.nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider._as(params), response);
    },
    _finalizeGlobalResponse$body$JSWalletStandardHandler(message, params, response) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this, accounts;
      var $async$_finalizeGlobalResponse$3$message$params$response = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
            case 3:
              // switch
              switch (A.Web3GlobalRequestMethods_fromName(A._asString(message.method))) {
                case B.Web3GlobalRequestMethods_0_disconnect_List_empty:
                  // goto case
                  $async$goto = 5;
                  break;
                case B.Web3GlobalRequestMethods_1_connect_List_empty:
                  // goto case
                  $async$goto = 6;
                  break;
                default:
                  // goto default
                  $async$goto = 7;
                  break;
              }
              break;
            case 5:
              // case
              $async$returnValue = {type: "response", status: "success", data: true};
              // goto return
              $async$goto = 1;
              break;
            case 6:
              // case
              $async$goto = 8;
              return A._asyncAwait($async$self._getWalletChange$0(), $async$_finalizeGlobalResponse$3$message$params$response);
            case 8:
              // returning from await.
              accounts = $async$result._0;
              if (J.get$isNotEmpty$asx(accounts)) {
                $async$returnValue = {type: "response", status: "success", data: A.JSWalletStandardConnect_constructor_setup(accounts)};
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = {type: "response", status: "failed", data: A.jsify(B.Web3RequestException_MuE.toResponseMessage$0().toJson$0())};
              // goto return
              $async$goto = 1;
              break;
            case 7:
              // default
              throw A.wrapException(B.Web3RequestException_qYU);
            case 4:
              // after switch
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_finalizeGlobalResponse$3$message$params$response, $async$completer);
    }
  };
  A.JSWalletStandardHandler__getWalletChange_closure.prototype = {
    call$1(e) {
      return type$.JSWalletStandardNetworkHandler_of_dynamic_and_Web3ChainAccount_dynamic_and_JSObject_and_Web3ChainIdnetifier_and_WalletStandardChainWeb3State_of_dynamic_and_Web3ChainAccount_dynamic_and_JSObject_and_Web3ChainIdnetifier._as(e).getState$0();
    },
    $signature: 513
  };
  A.JSWalletStandardHandler__getWalletChange_closure0.prototype = {
    call$1(e) {
      return type$.WalletStandardChainWeb3State_of_dynamic_and_Web3ChainAccount_dynamic_and_JSObject_and_Web3ChainIdnetifier._as(e).get$jsAccounts();
    },
    $signature: 514
  };
  A.JSWalletStandardHandler__getWalletChange_closure1.prototype = {
    call$1(e) {
      return type$.List_JSObject._as(e);
    },
    $signature: 515
  };
  A.JSWalletStandardHandler__getWalletChange_closure2.prototype = {
    call$1(e) {
      return type$.WalletStandardChainWeb3State_of_dynamic_and_Web3ChainAccount_dynamic_and_JSObject_and_Web3ChainIdnetifier._as(e).chains;
    },
    $signature: 516
  };
  A.JSWalletStandardHandler__getWalletChange_closure3.prototype = {
    call$1(e) {
      return type$.List_Web3ChainIdnetifier._as(e);
    },
    $signature: 517
  };
  A.JSWalletStandardHandler__getWalletChange_closure4.prototype = {
    call$1(e) {
      return type$.Web3ChainIdnetifier._as(e).get$identifier();
    },
    $signature: 518
  };
  A.JSExtentionWallet.prototype = {
    onMessage$3(message, sender, sendResponse) {
      var t1 = type$.JSObject;
      t1._as(message);
      t1._as(sender);
      type$.JavaScriptFunction._as(sendResponse);
      this._onResponse$1(A.JSWalletEvent_toEvent(message));
      return true;
    },
    initClients$0() {
      var auth = this._initializeAuthenticated;
      if (auth == null)
        return;
      this._initializeAuthenticated = null;
      this._updateAuthenticated$1(auth);
    },
    _onExtentionPortDiscounect$1(port) {
      type$.JSObject._as(port);
      this._portLock.synchronized$1$1(new A.JSExtentionWallet__onExtentionPortDiscounect_closure(this), type$.Null);
    },
    _onExtentionPortMessage$2($event, port) {
      var t1 = type$.JSObject;
      t1._as($event);
      t1._as(port);
    },
    _getPort$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_JSObject),
        $async$returnValue, $async$self = this;
      var $async$_getPort$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $async$self._portLock.synchronized$1$1(new A.JSExtentionWallet__getPort_closure($async$self), type$.nullable_JSObject);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_getPort$0, $async$completer);
    },
    _openPort$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this;
      var $async$_openPort$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $async$self._portLock.synchronized$1$1(new A.JSExtentionWallet__openPort_closure($async$self), type$.JSObject);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_openPort$0, $async$completer);
    },
    _sendMessageToExtention$2$message$requestId(message, requestId) {
      return this._sendMessageToExtention$body$JSExtentionWallet(message, requestId);
    },
    _sendMessageToExtention$body$JSExtentionWallet(message, requestId) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$self = this, openWallet, port, t1;
      var $async$_sendMessageToExtention$2$message$requestId = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return A._asyncAwait($async$self._getPort$0(), $async$_sendMessageToExtention$2$message$requestId);
            case 2:
              // returning from await.
              port = $async$result;
              t1 = port == null;
              $async$goto = t1 ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return A._asyncAwait(A.JSExtentionWallet_sendBackgroudMessage($.$get$JSWalletConstant_openExtension(), A._setArrayType([B.WalletEventTarget_0, B.WalletEventTarget_1], type$.JSArray_WalletEventTarget)).timeout$1(B.Duration_10000000).catchError$1(new A.JSExtentionWallet__sendMessageToExtention_closure()), $async$_sendMessageToExtention$2$message$requestId);
            case 5:
              // returning from await.
              openWallet = $async$result;
              if (openWallet.target !== B.WalletEventTarget_0 && openWallet.type !== B.WalletEventTypes_4)
                throw A.wrapException(A.Exception_Exception("Open popup failed"));
            case 4:
              // join
              $async$goto = t1 ? 6 : 7;
              break;
            case 6:
              // then
              $async$goto = 8;
              return A._asyncAwait($async$self._openPort$0(), $async$_sendMessageToExtention$2$message$requestId);
            case 8:
              // returning from await.
              port = $async$result;
            case 7:
              // join
              t1 = type$.JSObject;
              t1._as(port.onDisconnect).addListener(A._functionToJS1(new A.JSExtentionWallet__sendMessageToExtention_onDisconnect($async$self, requestId)));
              t1._as(port.onMessage).addListener(A._functionToJS2(new A.JSExtentionWallet__sendMessageToExtention_onMessage($async$self, requestId)));
              port.postMessage(A.ToJsEvent_toJsEvent(message));
              // implicit return
              return A._asyncReturn(null, $async$completer);
          }
      });
      return A._asyncStartSync($async$_sendMessageToExtention$2$message$requestId, $async$completer);
    },
    _sendMessageToWallet$2$message$requestId(message, requestId) {
      return this._sendMessageToWallet$body$JSExtentionWallet(message, requestId);
    },
    _sendMessageToWallet$body$JSExtentionWallet(message, requestId) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$self = this, r, t1, t2, t3, t4, counter, authKey, resultLength, result, calculatedTag;
      var $async$_sendMessageToWallet$2$message$requestId = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = message.get$method() === B.Web3GlobalRequestMethods_0_disconnect_List_empty ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return A._asyncAwait(A.JSExtentionWallet_sendBackgroudMessage(new A.WalletEvent(B.WalletEventTarget_2, $async$self.clientId, A.List_List$unmodifiable(message.cast$1$0(0, type$.Web3DisconnectApplication).chain.tag, type$.int), requestId, B.WalletEventTypes_7, null, null), B.List_WalletEventTarget_1), $async$_sendMessageToWallet$2$message$requestId);
            case 5:
              // returning from await.
              $async$self._onResponse$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
              r = $.$get$QuickCrypto__generateRandom().call$1(12);
              t1 = $async$self._crypto;
              t2 = message.toCbor$0().encode$0();
              t3 = type$.List_int;
              t3._as(r);
              t3._as(t2);
              t3 = J.getInterceptor$asx(r);
              if (t3.get$length(r) > 16)
                A.throwExpression(B.CryptoException_a53);
              t4 = type$.int;
              counter = A.List_List$filled(16, 0, false, t4);
              t3 = t3.get$length(r);
              A.BytesUtils_validateListOfBytes(r);
              B.JSArray_methods.setRange$3(counter, 16 - t3, 16, r);
              authKey = A.List_List$filled(32, 0, false, t4);
              t3 = t1.__ChaCha20Poly1305__key_A;
              t3 === $ && A.throwLateFieldNI("_key");
              A.zero(authKey);
              A.ChaCha20_streamXOR(t3, counter, authKey, authKey, 4);
              resultLength = t2.length + 16;
              result = A.List_List$filled(resultLength, 0, false, t4);
              t3 = t1.__ChaCha20Poly1305__key_A;
              A.BytesUtils_validateListOfBytes(t2);
              A.ChaCha20_streamXOR(t3, counter, t2, result, 4);
              calculatedTag = A.List_List$filled(16, 0, false, t4);
              t2 = resultLength - 16;
              t1._authenticate$4(calculatedTag, authKey, B.JSArray_methods.sublist$2(result, 0, t2), null);
              B.JSArray_methods.setRange$3(result, t2, resultLength, calculatedTag);
              A.zero(counter);
              A.BytesUtils_validateListOfBytes(r);
              $async$goto = 6;
              return A._asyncAwait($async$self._sendMessageToExtention$2$message$requestId(new A.WalletEvent(B.WalletEventTarget_2, $async$self.clientId, A.List_List$unmodifiable(new A.Web3EncryptedMessage(result, A.List_List$unmodifiable(r, t4)).toCbor$0().encode$0(), t4), requestId, B.WalletEventTypes_0, null, null), requestId), $async$_sendMessageToWallet$2$message$requestId);
            case 6:
              // returning from await.
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_sendMessageToWallet$2$message$requestId, $async$completer);
    }
  };
  A.JSExtentionWallet__onExtentionPortDiscounect_closure.prototype = {
    call$0() {
      this.$this._port = null;
    },
    $signature: 10
  };
  A.JSExtentionWallet__pingPort_onEmitMessage.prototype = {
    call$2(message, port) {
      var $event, t1;
      type$.nullable_JSObject._as(message);
      type$.JSObject._as(port);
      $event = message == null ? null : A.JSWalletEvent_toEvent(message);
      t1 = $event;
      if ((t1 == null ? null : t1.type) !== B.WalletEventTypes_4)
        return;
      this.completer.complete$1(port);
    },
    $signature: 521
  };
  A.JSExtentionWallet__getPort_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_JSObject),
        $async$returnValue, $async$self = this, port;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return A._asyncAwait(A.JSExtentionWallet__pingPort($async$self.$this._port), $async$call$0);
            case 3:
              // returning from await.
              port = $async$result;
              if (port != null) {
                $async$returnValue = port;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = null;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 522
  };
  A.JSExtentionWallet__openPort_closure.prototype = {
    call$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.JSObject),
        $async$returnValue, $async$self = this, t2, newPort, t1, port;
      var $async$call$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this;
              $async$goto = 3;
              return A._asyncAwait(A.JSExtentionWallet__pingPort(t1._port), $async$call$0);
            case 3:
              // returning from await.
              port = $async$result;
              if (port != null) {
                $async$returnValue = port;
                // goto return
                $async$goto = 1;
                break;
              }
              t2 = t1._port;
              if (t2 != null)
                t2.disconnect();
              t1._port = null;
              t2 = type$.JSObject;
              $async$goto = 4;
              return A._asyncAwait(A.JSExtentionWallet__pingPort(t2._as(t2._as(A.extension().runtime).connect(A._asString(t2._as(A.extension().runtime).id), {name: t1.clientId}))), $async$call$0);
            case 4:
              // returning from await.
              newPort = $async$result;
              if (newPort == null)
                throw A.wrapException(A.UnimplementedError$("port not found"));
              t1._port = newPort;
              t2._as(newPort.onDisconnect).addListener(A._functionToJS1(t1.get$_onExtentionPortDiscounect()));
              t2._as(t1._port.onMessage).addListener(A._functionToJS2(t1.get$_onExtentionPortMessage()));
              t1 = t1._port;
              t1.toString;
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 115
  };
  A.JSExtentionWallet_sendBackgroudMessage_onMessage.prototype = {
    call$3(message, sender, sendResponse) {
      var $event, result,
        t1 = type$.nullable_JSObject;
      t1._as(message);
      t1._as(sender);
      type$.nullable_JavaScriptFunction._as(sendResponse);
      $event = message == null ? null : A.JSWalletEvent_toEvent(message);
      if ($event == null)
        return false;
      if ($event.type !== B.WalletEventTypes_4)
        return false;
      if (!B.JSArray_methods.contains$1(this.allowTargets, $event.target))
        return false;
      result = A.Runtime_sendMessage_(type$.JSObject._as(A.extension().runtime), this.msg);
      t1 = this.completer;
      result.then$1$1(new A.JSExtentionWallet_sendBackgroudMessage_onMessage_closure(t1), type$.Null);
      result.catchError$1(new A.JSExtentionWallet_sendBackgroudMessage_onMessage_closure0(t1));
      return true;
    },
    $signature: 523
  };
  A.JSExtentionWallet_sendBackgroudMessage_onMessage_closure.prototype = {
    call$1(e) {
      this.completer.complete$1(type$.nullable_WalletEvent._as(e));
    },
    $signature: 524
  };
  A.JSExtentionWallet_sendBackgroudMessage_onMessage_closure0.prototype = {
    call$1(e) {
      var t1 = e == null ? type$.Object._as(e) : e;
      this.completer.completeError$1(t1);
      return null;
    },
    $signature: 20
  };
  A.JSExtentionWallet__sendMessageToExtention_closure.prototype = {
    call$1(e) {
      return A.throwExpression(B.Web3RequestException_ce8);
    },
    $signature: 525
  };
  A.JSExtentionWallet__sendMessageToExtention_onDisconnect.prototype = {
    call$1(port) {
      var t1;
      type$.JSObject._as(port);
      t1 = this.requestId;
      this.$this.completer.complete$2$requestId$response(t1, B.Web3RequestException_MuE.toResponseMessage$1$requestId(t1));
    },
    $signature: 26
  };
  A.JSExtentionWallet__sendMessageToExtention_onMessage.prototype = {
    call$2($event, port) {
      var t1 = type$.JSObject;
      t1._as($event);
      t1._as(port);
      t1 = this.$this;
      if (A._asStringQ($event.client_id) !== t1.clientId || A._asStringQ($event.request_id) !== this.requestId)
        return;
      t1._onResponse$1(A.JSWalletEvent_toEvent($event));
    },
    $signature: 88
  };
  A._JSWalletHandler_Object_JSWalletStandardHandler.prototype = {};
  A.JSWalletStandardChange_constructor_setup_closure.prototype = {
    call$1(e) {
      return A._asString(e);
    },
    $signature: 4
  };
  A.JSWalletNetworkEvent_constructor__closure.prototype = {
    call$1(e) {
      return type$.JSNetworkEventType._as(e)._name;
    },
    $signature: 526
  };
  (function aliases() {
    var _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A.JsLinkedHashMap.prototype;
    _.super$JsLinkedHashMap$internalContainsKey = _.internalContainsKey$1;
    _.super$JsLinkedHashMap$internalGet = _.internalGet$1;
    _.super$JsLinkedHashMap$internalSet = _.internalSet$2;
    _.super$JsLinkedHashMap$internalRemove = _.internalRemove$1;
    _ = A.ListBase.prototype;
    _.super$ListBase$setRange = _.setRange$4;
    _ = A.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = A.LegacyAddress.prototype;
    _.super$LegacyAddress$toAddress = _.toAddress$1;
    _ = A._Keccack.prototype;
    _.super$_Keccack$reset = _.reset$0;
    _.super$_Keccack$update = _.update$1;
    _ = A.BaseRequest.prototype;
    _.super$BaseRequest$finalize = _.finalize$0;
    _ = A.SolidityAddress.prototype;
    _.super$SolidityAddress$toHex = _.toHex$0;
    _ = A._Client.prototype;
    _.super$_Client$toHeaders = _.toHeaders$4$body$headers$method$uri;
    _.super$_Client$call = _.call$5$headers$method$onRetry$response$uri;
    _ = A.WebSocketService.prototype;
    _.super$WebSocketService$disposeService = _.disposeService$0;
    _.super$WebSocketService$onMessge = _.onMessge$1;
    _ = A.RuntimeApiMetadata.prototype;
    _.super$RuntimeApiMetadata$scaleJsonSerialize = _.scaleJsonSerialize$1$property;
    _ = A.RuntimeApiMethodMetadata.prototype;
    _.super$RuntimeApiMethodMetadata$scaleJsonSerialize = _.scaleJsonSerialize$1$property;
    _ = A.SignedExtensionMetadata.prototype;
    _.super$SignedExtensionMetadata$scaleJsonSerialize = _.scaleJsonSerialize$1$property;
    _ = A.PalletMetadata.prototype;
    _.super$PalletMetadata$scaleJsonSerialize = _.scaleJsonSerialize$1$property;
    _ = A.SourceSpanMixin.prototype;
    _.super$SourceSpanMixin$compareTo = _.compareTo$1;
    _.super$SourceSpanMixin$$eq = _.$eq;
    _ = A.JSWalletStandardNetworkHandler.prototype;
    _.super$JSWalletStandardNetworkHandler$createStateEvent = _.createStateEvent$6$accountsChanged$currentState$networkAccountsChanged$networkChanged$networksChanged$previousState;
    _.super$JSWalletStandardNetworkHandler$finalizeError = _.finalizeError$3$error$message$params;
    _.super$JSWalletStandardNetworkHandler$finalizeWalletResponse = _.finalizeWalletResponse$3$message$params$response;
    _.super$JSWalletStandardNetworkHandler$createEvent = _.createEvent$1;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _instance_1_u = hunkHelpers._instance_1u,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_1_i = hunkHelpers._instance_1i,
      _static = hunkHelpers.installStaticTearOff;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 162);
    _instance_1_u(A.CastStreamSubscription.prototype, "get$__internal$_onData", "__internal$_onData$1", 33);
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 64);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 64);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 64);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 1);
    _static_1(A, "async___nullDataHandler$closure", "_nullDataHandler", 23);
    _static_2(A, "async___nullErrorHandler$closure", "_nullErrorHandler", 37);
    _static_0(A, "async___nullDoneHandler$closure", "_nullDoneHandler", 1);
    var _;
    _instance_0_u(_ = A._BroadcastSubscription.prototype, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance(A._Completer.prototype, "get$completeError", 0, 1, null, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 78, 0, 0);
    _instance_2_u(A._Future.prototype, "get$_completeError", "_completeError$2", 37);
    _instance_1_u(_ = A._StreamController.prototype, "get$_async$_add", "_async$_add$1", 33);
    _instance_2_u(_, "get$_addError", "_addError$2", 37);
    _instance_0_u(_, "get$_close", "_close$0", 1);
    _instance_0_u(_ = A._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_1_i(_ = A._StreamSinkWrapper.prototype, "get$add", "add$1", 33);
    _instance(_, "get$addError", 0, 1, null, ["call$2", "call$1"], ["addError$2", "addError$1"], 78, 0, 0);
    _instance_0_u(_, "get$close", "close$0", 363);
    _instance_0_u(_ = A._BufferingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_0_u(A._DoneStreamSubscription.prototype, "get$_onMicrotask", "_onMicrotask$0", 1);
    _static_2(A, "collection___defaultEquals$closure", "_defaultEquals", 111);
    _static_1(A, "collection___defaultHashCode$closure", "_defaultHashCode", 93);
    _static_2(A, "collection_ListBase__compareAny$closure", "ListBase__compareAny", 162);
    _static_1(A, "convert___defaultToEncodable$closure", "_defaultToEncodable", 32);
    _instance_1_i(_ = A._ByteCallbackSink.prototype, "get$add", "add$1", 33);
    _instance_0_u(_, "get$close", "close$0", 1);
    _static_1(A, "core__identityHashCode$closure", "identityHashCode", 93);
    _static_2(A, "core__identical$closure", "identical", 111);
    _static_1(A, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 4);
    _static(A, "math__max$closure", 2, null, ["call$1$2", "call$2"], ["max", function(a, b) {
      a.toString;
      b.toString;
      return A.max(a, b, type$.num);
    }], 531, 0);
    _instance_0_u(_ = A.StreamSplitter.prototype, "get$_onListen", "_onListen$0", 1);
    _instance_0_u(_, "get$_stream_splitter$_onPause", "_stream_splitter$_onPause$0", 1);
    _instance_0_u(_, "get$_stream_splitter$_onResume", "_stream_splitter$_onResume$0", 1);
    _instance_1_u(_, "get$_stream_splitter$_onData", "_stream_splitter$_onData$1", 33);
    _instance_2_u(_, "get$_stream_splitter$_onError", "_stream_splitter$_onError$2", 37);
    _instance_0_u(_, "get$_stream_splitter$_onDone", "_stream_splitter$_onDone$0", 1);
    _static_1(A, "global_PsbtGlobalData___deserialize_tearOff$closure", "PsbtGlobalData___deserialize_tearOff", 532);
    _static_1(A, "inputs_PsbtInputData___deserialize_tearOff$closure", "PsbtInputData___deserialize_tearOff", 533);
    _static_1(A, "outputs_PsbtOutputData___deserialize_tearOff$closure", "PsbtOutputData___deserialize_tearOff", 534);
    _static_2(A, "bch_bech32__BchBech32Utils_computeChecksum$closure", "_BchBech32Utils_computeChecksum", 83);
    _static_2(A, "bch_bech32__BchBech32Utils_verifyChecksum$closure", "_BchBech32Utils_verifyChecksum", 72);
    _static(A, "bech32_base_Bech32Utils_verifyChecksum$closure", 2, null, ["call$3", "call$2"], ["Bech32Utils_verifyChecksum", function(hrp, data) {
      return A.Bech32Utils_verifyChecksum(hrp, data, B.Bech32Encodings_0);
    }], 537, 0);
    _static_1(A, "secp256k1_keys_ecdsa_Secp256k1PublicKey_isValidBytes$closure", "Secp256k1PublicKey_isValidBytes", 54);
    _static_1(A, "params0_EvmosErc20V1Params___fromJson_tearOff$closure", "EvmosErc20V1Params___fromJson_tearOff", 538);
    _static_1(A, "exponential_calculation_EvmosInflationV1ExponentialCalculation___fromJson_tearOff$closure", "EvmosInflationV1ExponentialCalculation___fromJson_tearOff", 539);
    _static_1(A, "inflation_distribution_EvmosInflationV1InflationDistribution___fromJson_tearOff$closure", "EvmosInflationV1InflationDistribution___fromJson_tearOff", 540);
    _static_1(A, "params_EvmosInflationV1Params___fromJson_tearOff$closure", "EvmosInflationV1Params___fromJson_tearOff", 541);
    _static_1(A, "params1_EvmosRevenueV1Params___fromJson_tearOff$closure", "EvmosRevenueV1Params___fromJson_tearOff", 542);
    _static_1(A, "period_EvmosVestingV1Period___fromJson_tearOff$closure", "EvmosVestingV1Period___fromJson_tearOff", 543);
    _static_1(A, "height_IbcClientHeight___fromJson_tearOff$closure", "IbcClientHeight___fromJson_tearOff", 544);
    _static_1(A, "coin_Coin___deserialize_tearOff$closure", "Coin___deserialize_tearOff", 545);
    _static_1(A, "coin_Coin___fromJson_tearOff$closure", "Coin___fromJson_tearOff", 21);
    _static_1(A, "timestamp_ProtobufTimestamp___fromString_tearOff$closure", "ProtobufTimestamp___fromString_tearOff", 546);
    _static_1(A, "retry___defaultWhen$closure", "_defaultWhen", 129);
    _static_2(A, "retry___defaultWhenError$closure", "_defaultWhenError", 547);
    _static_1(A, "retry___defaultDelay$closure", "_defaultDelay", 548);
    _static_1(A, "case_insensitive_map_CaseInsensitiveMap__canonicalizer$closure", "CaseInsensitiveMap__canonicalizer", 4);
    _static(A, "types_AptosTypeTagNumeric_layout$closure", 0, null, ["call$1$property", "call$0"], ["AptosTypeTagNumeric_layout", function() {
      return A.AptosTypeTagNumeric_layout(null);
    }], 3, 0);
    _static(A, "types_AptosTypeTagAddress_layout$closure", 0, null, ["call$1$property", "call$0"], ["AptosTypeTagAddress_layout", function() {
      return A.AptosTypeTagAddress_layout(null);
    }], 3, 0);
    _static(A, "types_AptosTypeTagSigner_layout$closure", 0, null, ["call$1$property", "call$0"], ["AptosTypeTagSigner_layout", function() {
      return A.AptosTypeTagSigner_layout(null);
    }], 3, 0);
    _static(A, "types_AptosTypeTagReference_layout$closure", 0, null, ["call$1$property", "call$0"], ["AptosTypeTagReference_layout", function() {
      return A.AptosTypeTagReference_layout(null);
    }], 3, 0);
    _static(A, "types_AptosTypeTagGeneric_layout$closure", 0, null, ["call$1$property", "call$0"], ["AptosTypeTagGeneric_layout", function() {
      return A.AptosTypeTagGeneric_layout(null);
    }], 3, 0);
    _static(A, "types_AptosTypeTagVector_layout$closure", 0, null, ["call$1$property", "call$0"], ["AptosTypeTagVector_layout", function() {
      return A.AptosTypeTagVector_layout(null);
    }], 3, 0);
    _static(A, "types_AptosTypeTagStruct_layout$closure", 0, null, ["call$1$property", "call$0"], ["AptosTypeTagStruct_layout", function() {
      return A.AptosTypeTagStruct_layout(null);
    }], 3, 0);
    _static(A, "types_AptosTransactionPayloadScript_layout$closure", 0, null, ["call$1$property", "call$0"], ["AptosTransactionPayloadScript_layout", function() {
      return A.AptosTransactionPayloadScript_layout(null);
    }], 3, 0);
    _static(A, "types_AptosTransactionPayloadEntryFunction_layout$closure", 0, null, ["call$1$property", "call$0"], ["AptosTransactionPayloadEntryFunction_layout", function() {
      return A.AptosTransactionPayloadEntryFunction_layout(null);
    }], 3, 0);
    _static(A, "types_AptosMultisigTransactionPayloadEntryFunction_layout$closure", 0, null, ["call$1$property", "call$0"], ["AptosMultisigTransactionPayloadEntryFunction_layout", function() {
      return A.AptosMultisigTransactionPayloadEntryFunction_layout(null);
    }], 3, 0);
    _static(A, "types_AptosTransactionPayloadMultisig_layout$closure", 0, null, ["call$1$property", "call$0"], ["AptosTransactionPayloadMultisig_layout", function() {
      return A.AptosTransactionPayloadMultisig_layout(null);
    }], 3, 0);
    _static(A, "types0_MoveU8_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoveU8_layout", function() {
      return A.MoveU8_layout(null);
    }], 3, 0);
    _static(A, "types0_MoveU16_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoveU16_layout", function() {
      return A.MoveU16_layout(null);
    }], 3, 0);
    _static(A, "types0_MoveU32_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoveU32_layout", function() {
      return A.MoveU32_layout(null);
    }], 3, 0);
    _static(A, "types0_MoveU64_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoveU64_layout", function() {
      return A.MoveU64_layout(null);
    }], 3, 0);
    _static(A, "types0_MoveU128_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoveU128_layout", function() {
      return A.MoveU128_layout(null);
    }], 3, 0);
    _static(A, "types0_MoveU256_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoveU256_layout", function() {
      return A.MoveU256_layout(null);
    }], 3, 0);
    _static(A, "types0_MoveBool_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoveBool_layout", function() {
      return A.MoveBool_layout(null);
    }], 3, 0);
    _static(A, "types0_MoveAddress_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoveAddress_layout", function() {
      return A.MoveAddress_layout(null);
    }], 3, 0);
    _static(A, "types0_MoveU8Vector_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoveU8Vector_layout", function() {
      return A.MoveU8Vector_layout(null);
    }], 3, 0);
    _static(A, "types0_MoveSerialized_layout$closure", 0, null, ["call$1$property", "call$0"], ["MoveSerialized_layout", function() {
      return A.MoveSerialized_layout(null);
    }], 3, 0);
    _static_1(A, "serialization_BcsSerialization_toReadableObject$closure", "BcsSerialization_toReadableObject", 45);
    _instance_0_u(A.WithdrawExpireUnfreezeContract.prototype, "get$toJson", "toJson$0", 50);
    _instance_0_u(A.ReceiveDescription.prototype, "get$toJson", "toJson$0", 50);
    _instance_0_u(A.SpendDescription.prototype, "get$toJson", "toJson$0", 50);
    _instance_2_u(A._WorkerConnector.prototype, "get$_service$_onError", "_service$_onError$2", 265);
    _instance_1_u(A._WorkerConnection.prototype, "get$onResponse", "onResponse$1", 26);
    _instance_0_u(A.WebsocketWeb.prototype, "get$_onCloseStream", "_onCloseStream$0", 1);
    _instance_0_u(A.WebSocketService.prototype, "get$_onClose", "_onClose$0", 1);
    _instance_1_u(A.EthereumWebsocketService.prototype, "get$onMessge", "onMessge$1", 291);
    _instance_1_u(A.JSEthereumHandler.prototype, "get$_onSubscribe", "_onSubscribe$1", 474);
    _instance_1_u(_ = A.JSWalletHandler.prototype, "get$_onClientEvent", "_onClientEvent$1", 26);
    _instance_1_u(_, "get$_sendMessageToClient", "_sendMessageToClient$1", 26);
    _instance_2_u(_, "get$_sendEventToClient", "_sendEventToClient$2", 510);
    _instance(_, "get$_sendInternalWalletMessage", 0, 0, null, ["call$2$client$request"], ["_sendInternalWalletMessage$2$client$request"], 511, 0, 0);
    _instance(_ = A.JSExtentionWallet.prototype, "get$onMessage", 0, 3, null, ["call$3"], ["onMessage$3"], 519, 0, 0);
    _instance_1_u(_, "get$_onExtentionPortDiscounect", "_onExtentionPortDiscounect$1", 26);
    _instance_2_u(_, "get$_onExtentionPortMessage", "_onExtentionPortMessage$2", 88);
    _static_2(A, "segwit_bech32_SegwitBech32Encoder__computeChecksum$closure", "SegwitBech32Encoder__computeChecksum", 83);
    _static_2(A, "segwit_bech32_SegwitBech32Decoder__verifyChecksum$closure", "SegwitBech32Decoder__verifyChecksum", 72);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _mixinHard = hunkHelpers.mixinHard,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Stream, A.CastStreamSubscription, A.Iterable, A.CastIterator, A.Closure, A.MapBase, A.Error, A.ListBase, A.SentinelValue, A.ListIterator, A.MappedIterator, A.WhereIterator, A.ExpandIterator, A.TakeIterator, A.SkipIterator, A.EmptyIterator, A.WhereTypeIterator, A.FixedLengthListMixin, A.UnmodifiableListMixin, A.Symbol, A._Record, A.MapView, A.ConstantMap, A._KeysOrValuesOrElementsIterator, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.LinkedHashMapValueIterator, A.LinkedHashMapEntryIterator, A.JSSyntaxRegExp, A._MatchImplementation, A._AllMatchesIterator, A.StringMatch, A._StringAllMatchesIterator, A._Cell, A._InitializedCell, A._UnmodifiableNativeByteBufferView, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A._AsyncStarStreamController, A._IterationMarker, A._SyncStarIterator, A.AsyncError, A._BufferingStreamSubscription, A._BroadcastStreamController, A.TimeoutException, A._Completer, A._FutureListener, A._Future, A._AsyncCallbackEntry, A._StreamController, A._SyncStreamControllerDispatch, A._AsyncStreamControllerDispatch, A._StreamSinkWrapper, A._AddStreamState, A._DelayedEvent, A._DelayedDone, A._PendingEvents, A._DoneStreamSubscription, A._StreamIterator, A._Zone, A._HashMapKeyIterator, A.SetBase, A._LinkedHashSetCell, A._LinkedHashSetIterator, A._MapBaseValueIterator, A._UnmodifiableMapMixin, A.Codec, A.Converter, A._Base64Encoder, A._Base64Decoder, A.ByteConversionSink, A._JsonStringifier, A._Utf8Encoder, A._Utf8Decoder, A._BigIntImpl, A._BigIntClassic, A.DateTime, A.Duration, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.IntegerDivisionByZeroException, A.MapEntry, A.Null, A._StringStackTrace, A.RuneIterator, A.StringBuffer, A._Uri, A.UriData, A._SimpleUri, A.NullRejectionException, A._JSSecureRandom, A.Endian, A.FutureGroup, A.ErrorResult, A.ValueResult, A.StreamSplitter, A.BitcoinAddressType, A.LegacyAddress, A.BitcoinNetworkAddress, A.SegwitAddress, A.TxInput, A.TxOutput, A.Script, A.BtcTransaction, A.TxWitnessInput, A.TaprootTree, A.TaprootControlBlock, A.CashToken, A.ECPublic, A.BlockchainUtilsException, A.BitcoinSVNetwork, A.BitcoinNetwork, A.LitecoinNetwork, A.DashNetwork, A.DogecoinNetwork, A.BitcoinCashNetwork, A.PepeNetwork, A.ElectraProtocolNetwork, A.PsbtBuilderImpl, A.PsbtInputImpl, A.PsbtOutputImpl, A.PsbtSignerImpl, A.PsbtTransactionInput, A.PsbtByteReader, A.PsbtGlobal, A.PsbtGlobalData, A.PsbtInput, A.PsbtInputData, A.PsbtOutput, A.PsbtOutputData, A.PsbtKey, A.PsbtValue, A.PsbtKeyPair, A.Psbt, A.PsbtTapTree, A.AdaByronIcarusAddrEncoder, A.AdaByronLegacyAddrEncoder, A.AdaShelleyAddrEncoder, A.ADANetwork, A.AlgoAddrEncoder, A.AptosSingleKeyEd25519AddrEncoder, A.AptosSingleKeySecp256k1AddrEncoder, A.AptosAddrEncoder, A.AtomAddressDecodeResult, A.AtomAddrEncoder, A.AtomEthSecp256k1AddrEncoder, A.AtomNist256P1AddrEncoder, A.AtomEd25519AddrEncoder, A.AvaxPChainAddrEncoder, A.AvaxXChainAddrEncoder, A.EgldAddrEncoder, A.BlockchainAddressEncoder, A.EosAddrEncoder, A.ErgoNetworkTypes, A.ErgoP2PKHAddrEncoder, A.EthAddrDecoder, A.EthAddrEncoder, A.FilSecp256k1AddrEncoder, A.IcxAddrEncoder, A.InjAddrEncoder, A.NanoAddrEncoder, A.NearAddrEncoder, A.NeoAddrEncoder, A.OkexAddrEncoder, A.OneAddrEncoder, A.P2PKHAddrEncoder, A.BchP2PKHAddrEncoder, A.P2SHAddrEncoder, A.BchP2SHAddrEncoder, A.P2TRAddrEncoder, A.P2WPKHAddrEncoder, A.SolAddrDecoder, A.SolAddrEncoder, A.SubstrateEd25519AddrEncoder, A.SubstrateSr25519AddrEncoder, A.SubstrateSecp256k1AddrEncoder, A.SuiSecp256k1AddrEncoder, A.SuiSecp256r1AddrEncoder, A.SuiAddrEncoder, A.DecodeAddressResult, A.FriendlyAddressFlags, A.TonAddrDecoder, A.TonAddrEncoder, A.TrxAddrDecoder, A.TrxAddrEncoder, A.XlmAddrTypes, A.XlmAddrDecoderResult, A.XlmAddrDecoder, A.XlmAddrEncoder, A.XrpAddrEncoder, A.XtzAddrPrefixes, A.XtzAddrEncoder, A.ZilAddrEncoder, A.Bip32KeyIndex, A.Bip32KeyNetVersions, A.BipCoins, A.BipProposal, A.BipCoinConfig, A.CipProposal, A.CoinConf, A.CoinParams, A.CoinNames, A.Ed25519Blake2bPublicKey, A.Ed25519PublicKey, A.Ed25519PrivateKey, A.Ed25519KholawPublicKey, A.MoneroPublicKey, A.Nist256p1PublicKey, A.Nist256p1HybridPublicKey, A.Secp256k1PublicKey, A.Sr25519PublicKey, A.MoneroCoinConf, A.MoneroCoins, A.MoneroProposal, A.SubstrateCoinConf, A.SubstrateCoins, A.SubstratePropoosal, A.SubstrateScaleEncoderBase, A.CborBase64Types, A.CborBaseUrlValue, A.CborBigFloatValue, A.CborBigIntValue, A.CborBoleanValue, A.CborBytesValue, A.CborDynamicBytesValue, A.CborTagValue, A._CborDate, A.CborDecimalFracValue, A.CborFloatValue, A.CborIntValue, A.CborSafeIntValue, A.CborListValue, A.CborMapValue, A.CborMimeValue, A.CborNullValue, A.CborUndefinedValue, A.CborRegxpValue, A.CborSetValue, A.CborString, A.CborUriValue, A._DecodeCborResult, A.CborBytesTracker, A.FloatLength, A.FloatUtils, A.AES, A.AESLib, A.Curve, A.ECDSAPublicKey, A.EDDSAPrivateKey, A.EDDSAPublicKey, A.AbstractPoint, A.ChaCha20Poly1305, A.CTR, A.Blake2bConfig, A.BLAKE2b, A._Keccack, A.MD5, A._RIPEMD, A.SHA256, A.SHA512, A.Poly1305, A.FortunaPRNG, A.SchnorrkelPublicKey, A._Hex, A.LayoutByteReader, A.LayoutByteWriter, A.Layout, A.LayoutDecodeResult, A.LazyVariantModel, A.BaseServiceResponse, A.BaseServiceRequestParams, A.BaseServiceRequest, A.BaseProvider, A.DynamicByteTracker, A.BigRational, A.Tuple, A.CanonicalizedMap, A.CosmosBaseAddress, A.TypeUrl, A.AminoTx, A.CosmosProtocolBuffer, A.GovVoteOption, A.ProtocolBufferDecoderResult, A._Result, A.AminoMessage, A.BaseClient, A.BaseRequest, A.BaseResponse, A.ClientException, A.MediaType, A.BcsSerialization, A.BcsVariantDecodeResult, A.SolidityAddress, A.EIP4631, A.EthereumMethods, A.ETHTransactionType, A.SolAddress, A.AddressTableLookup, A.CompiledInstruction, A.Commitment, A.Message, A.MessageV0, A.EIP712Version, A.Eip712TypeDetails, A.Eip712TypedData, A.Eip712TypedDataV1, A.EIP712Legacy, A.SuiApiTransactionBlockResponseOptions, A.TronProtocolBufferImpl, A.AccountType, A.PermissionType, A.ResourceCode, A.TransactionContractType, A.SmartContractAbiEntryType, A.SmartContractAbiStateMutabilityType, A.ProtocolBufferDecoderResult0, A._Result0, A.OnChainBridgeException, A.WalletEvent, A.ApiProviderException, A.WalletException, A.Equatable, A.HttpImpl, A.HTTPServiceWorker, A.FailedHttpIsolateInitialization, A.ServicesHTTPCaller, A._WorkerConnector, A._WorkerConnection, A.HTTPWorkerMessage, A.HTTPWorkerRequest, A.HTTPWorkerResponse, A.HTTPWorkerMessageCompleter, A._ProviderAuthenticated_Object_CborSerializable, A.HttpClientManager, A._Client, A._DigestAuthClientImpl, A.HTTPCallerResponse, A.DigestAuthHeaders, A.StreamListenable, A._APPImage_Object_CborSerializable, A.CborSerializable, A.JsonSerialization, A.SynchronizedLock, A.MethodResult, A.WebsocketWeb, A.CustomProposal, A._AddressDerivationIndex_Object_CborSerializable, A.NetworkType, A._APIProvider_Object_Equatable, A.BaseServiceProtocol, A.APIServiceTracker, A._HTTPService_Object_HttpImpl, A.ApiRequest, A.SocketRequestCompleter, A.EthereumSubscribeResult, A.IntegerBalance, A._CosmosFeeToken_Object_CborSerializable, A.EIP712Domain, A.SolanaWeb3TransactionSignResponse, A.SolanaWeb3TransactionSendResponse, A._TonAccountContext_Object_CborSerializable, A._CoingeckoCoin_Object_CborSerializable, A._APPToken_Object_CborSerializable, A._Web3RequestException_Object_Equatable, A._Web3MessageCore_Object_CborSerializable, A._Web3EncryptedMessage_Object_CborSerializable, A.Web3RequestMethods, A._Web3APPData_Object_CborSerializable, A._Web3ChainAccount_Object_CborSerializable, A._Web3ChainIdnetifier_Object_CborSerializable, A._Web3ChainAuthenticated_Object_CborSerializable, A.Web3AptosSignMessageResponse, A._Web3BitcoinSendTransactionOutput_Object_CborSerializable, A.Web3BitcoinSignMessageResponse, A.Web3CosmosSignMessageResponse, A.Web3CosmosSignTransactionResponse, A._Web3CosmosSignTransactionParams_Object_CborSerializable, A._Web3EthreumTransactionAccessList_Object_CborSerializable, A._Web3SolanaSignParams_Object_CborSerializable, A.Web3SolanaSignMessageResponse, A._Web3SolanaSendTransactionOptions_Object_CborSerializable, A._Web3SolanaSendTransactionData_Object_CborSerializable, A.Web3StellarSendTransactionResponse, A.Web3SuiSignMessageResponse, A.Web3SuiTransactionCallArg, A.Web3SuiTransactionObjectArg, A.Web3SuiTransactionArgument, A.Web3SuiTransactionCommand, A.Web3SuiTransactionDataV2, A.Web3SuiTransactionExpiration, A.Web3SuiTransactionGasData, A.Web3SuiSignTransactionResponse, A.Web3SuiSignAndExecuteTransactionResponse, A._Web3TonTransactionMessage_Object_CborSerializable, A.Web3TonSendTransactionResponse, A.Context, A.Style, A.ParsedPath, A.PathException, A.BaseSubstrateAddress, A.SubstrateSerialization, A.LatestMetadataInterface, A.PrimitiveTypes, A.Si1TypeDefsIndexesConst, A.StorageHasherV11Options, A.SubstrateVariantDecodeResult, A.SourceFile, A.SourceLocationMixin, A.SourceSpanMixin, A.Highlighter, A._Highlight, A._Line, A.SourceLocation, A.SourceSpanException, A.StellarAddress, A.StringScanner, A.TonAddress, A.BitBuilder, A.BitReader, A.BitString, A.Builder, A.Cell, A.CellType, A.Slice, A.ExoticMerkleProof, A.ExoticMerkleUpdate, A.Pruned, A.ExoticPruned, A.LevelMask, A.ResolvedCellResult, A.CellTopoloigicalSort, A._ParseBocResult, A._ReadCellResult, A.TonChain, A._TonContract_Object_ContractProvider, A.ContractProvider, A.WalletVersion, A.VerionedProviderImpl, A._TonSerialization_Object_JsonSerialization, A.VersionedWalletState, A.TonPublicKey, A.Dictionary, A.DictionaryKey, A.DictionaryValue, A._Node, A._Edge, A.JsonSerialization0, A.WalletStandardChainWeb3State, A.JSWalletStandardNetworkHandler, A.MessageCompleterHandler, A.MessageCompleter, A.JSEthereumClient, A._JSWalletStateAccount_Object_Equatable, A._JSWalletHandler_Object_JSWalletStandardHandler, A.JSWalletStandardHandler]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JavaScriptBigInt, J.JavaScriptSymbol, J.JSNumber, J.JSString]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, J.JSArray, A.NativeByteBuffer, A.NativeTypedData]);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Stream, [A.CastStream, A.StreamView, A._StreamImpl, A._EmptyStream]);
    _inheritMany(A.Iterable, [A._CastIterableBase, A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable, A.ExpandIterable, A.TakeIterable, A.SkipIterable, A.WhereTypeIterable, A._KeysOrValues, A._AllMatchesIterable, A._StringAllMatchesIterable, A._SyncStarIterable, A.Runes]);
    _inheritMany(A._CastIterableBase, [A.CastIterable, A.__CastListBase__CastIterableBase_ListMixin]);
    _inherit(A._EfficientLengthCastIterable, A.CastIterable);
    _inherit(A._CastListBase, A.__CastListBase__CastIterableBase_ListMixin);
    _inheritMany(A.Closure, [A.Closure2Args, A._CastListBase_removeWhere_closure, A.CastMap_entries_closure, A.Closure0Args, A.Instantiation, A.TearOffClosure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A._asyncStarHelper_closure0, A.Future_wait_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A._Future_timeout_closure0, A.Stream_length_closure, A._HashMap_values_closure, A._LinkedCustomHashMap_closure, A.MapBase_entries_closure, A._JsonMap_values_closure, A._BigIntImpl_hashCode_finish, A.DateTime_parse_parseIntOrZero, A.DateTime_parse_parseMilliAndMicroseconds, A._Uri__makePath_closure, A.jsify__convert, A.promiseToFuture_closure, A.promiseToFuture_closure0, A.dartify_convert, A.FutureGroup_add_closure, A.StreamSplitter__onPause_closure, A.BitcoinAddressType_fromValue_closure, A.BitcoinOpcode_findByName_closure, A.BitcoinOpcode_findByValue_closure, A.BtcTransaction_toJson_closure, A.BtcTransaction_toJson_closure0, A.BtcTransaction_toJson_closure1, A.BasedUtxoNetwork_fromName_closure, A.PsbtGlobalTypes_find_closure, A.PsbtGlobal_PsbtGlobal_closure, A.PsbtGlobal_PsbtGlobal_closure0, A.PsbtGlobal_PsbtGlobal_closure1, A.PsbtGlobal_toKeyPairs_closure, A.PsbtGlobal_toJson_closure, A.PsbtGlobalUnsignedTransaction_PsbtGlobalUnsignedTransaction$deserialize_closure, A.PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey__closure, A.PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey__closure0, A.PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey$deserialize_closure, A.PsbtGlobalExtendedPublicKey_toJson_closure, A.PsbtGlobalPSBTVersionNumber_PsbtGlobalPSBTVersionNumber$deserialize_closure, A.PsbtInputTypes_find_closure, A.PsbtInput$__closure, A.PsbtInput_PsbtInput_closure, A.PsbtInput_PsbtInput_closure0, A.PsbtInput_PsbtInput_closure1, A.PsbtInput_PsbtInput$fromKeyPairs_closure, A.PsbtInput_getInput_closure, A.PsbtInput_getInputs_closure, A.PsbtInput_toJson_closure, A.PsbtInput_toJson__closure, A.PsbtInput_toKeyPairs_closure, A.PsbtInput_toKeyPairs__closure, A.PsbtInput_clone_closure, A.PsbtInputBip32DerivationPath_PsbtInputBip32DerivationPath$deserialize_closure, A.PsbtInputBip32DerivationPath_toJson_closure, A.PsbtInputTaprootKeyBip32DerivationPath$__closure, A.PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize_closure, A.PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize_closure0, A.PsbtInputTaprootKeyBip32DerivationPath_PsbtInputTaprootKeyBip32DerivationPath$deserialize_closure1, A.PsbtInputTaprootKeyBip32DerivationPath_toJson_closure, A.PsbtInputTaprootKeyBip32DerivationPath_toJson_closure0, A.PsbtInputMuSig2ParticipantPublicKeys_toJson_closure, A.PsbtOutputTypes_find_closure, A.PsbtOutput$__closure, A.PsbtOutput_PsbtOutput_closure, A.PsbtOutput_PsbtOutput_closure0, A.PsbtOutput_PsbtOutput_closure1, A.PsbtOutput_PsbtOutput$fromKeyPairs_closure, A.PsbtOutput_toKeyPairs_closure, A.PsbtOutput_toKeyPairs__closure, A.PsbtOutput_toJson_closure, A.PsbtOutput_toJson__closure, A.PsbtOutput_clone_closure, A.PsbtOutputBip32DerivationPath_PsbtOutputBip32DerivationPath$deserialize_closure, A.PsbtOutputBip32DerivationPath_toJson_closure, A.PsbtOutputTaprootTree_toJson_closure, A.PsbtOutputTaprootKeyBip32DerivationPath$__closure, A.PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize_closure, A.PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize_closure0, A.PsbtOutputTaprootKeyBip32DerivationPath_PsbtOutputTaprootKeyBip32DerivationPath$deserialize_closure1, A.PsbtOutputTaprootKeyBip32DerivationPath_toJson_closure, A.PsbtOutputTaprootKeyBip32DerivationPath_toJson_closure0, A.PsbtOutputMuSig2ParticipantPublicKeys_toJson_closure, A.PsbtOutputMuSig2ParticipantPublicKeys$__closure, A.Psbt_Psbt$deserialize_closure, A.Psbt_Psbt$deserialize_closure0, A.Psbt_Psbt$deserialize_closure2, A.Psbt_Psbt$deserialize_closure4, A.Psbt_serialize_closure, A.Psbt_serialize_closure0, A.Psbt_serialize__closure0, A.Psbt_serialize_closure1, A.Psbt_serialize__closure, A._Base32Utils_translateAlphabet_closure, A._Base32Utils_translateAlphabet_closure0, A._Base32Utils_translateAlphabet_closure1, A._Base32Utils__b32decode_closure, A._BchBech32Utils_hrpExpand_closure, A.Bech32EncoderBase_encodeBech32_closure, A.Bech32DecoderBase_decodeBech32_closure, A.Bech32DecoderBase_decodeBech32_closure0, A.Bech32DecoderBase_decodeBech32_closure1, A.EthAddrUtils__checksumEncode_closure, A.XlmAddrTypes_fromTag_closure, A.XlmAddrTypes_fromTag__closure, A.Bip44Coins_fromName_closure, A.Bip44Conf_akashNetwork_closure, A.Bip44Conf_algorand_closure, A.Bip44Conf_aptos_closure, A.Bip44Conf_aptosSingleKeySecp256k1_closure, A.Bip44Conf_aptosSingleKeyEd25519_closure, A.Bip44Conf_avaxCChain_closure, A.Bip44Conf_avaxPChain_closure, A.Bip44Conf_avaxXChain_closure, A.Bip44Conf_axelar_closure, A.Bip44Conf_bandProtocol_closure, A.Bip44Conf_binanceChain_closure, A.Bip44Conf_binanceSmartChain_closure, A.Bip44Conf_bitcoinMainNet_closure, A.Bip44Conf_bitcoinTestNet_closure, A.Bip44Conf_bitcoinCashMainNet_closure, A.Bip44Conf_bitcoinCashTestNet_closure, A.Bip44Conf_bitcoinCashSlpMainNet_closure, A.Bip44Conf_bitcoinCashSlpTestNet_closure, A.Bip44Conf_bitcoinSvMainNet_closure, A.Bip44Conf_bitcoinSvTestNet_closure, A.Bip44Conf_cardanoByronIcarus_closure, A.Bip44Conf_cardanoByronLedger_closure, A.Bip44Conf_cardanoByronIcarusTestnet_closure, A.Bip44Conf_cardanoByronLedgerTestnet_closure, A.Bip44Conf_celo_closure, A.Bip44Conf_certik_closure, A.Bip44Conf_chihuahua_closure, A.Bip44Conf_cosmos_closure, A.Bip44Conf_cosmosTestnet_closure, A.Bip44Conf_cosmosEthSecp256k1_closure, A.Bip44Conf_cosmosTestnetEthSecp256k1_closure, A.Bip44Conf_cosmosNist256p1_closure, A.Bip44Conf_cosmosTestnetNist256p1_closure, A.Bip44Conf_cosmosEd25519_closure, A.Bip44Conf_cosmosTestnetEd25519_closure, A.Bip44Conf_dashMainNet_closure, A.Bip44Conf_dashTestNet_closure, A.Bip44Conf_dogecoinMainNet_closure, A.Bip44Conf_dogecoinTestNet_closure, A.Bip44Conf_pepeMainnet_closure, A.Bip44Conf_pepeTestnet_closure, A.Bip44Conf_ecashMainNet_closure, A.Bip44Conf_ecashTestNet_closure, A.Bip44Conf_elrond_closure, A.Bip44Conf_eos_closure, A.Bip44Conf_ergoMainNet_closure, A.Bip44Conf_ergoTestNet_closure, A.Bip44Conf_ethereum_closure, A.Bip44Conf_ethereumTestnet_closure, A.Bip44Conf_ethereumClassic_closure, A.Bip44Conf_fantomOpera_closure, A.Bip44Conf_filecoin_closure, A.Bip44Conf_harmonyOneMetamask_closure, A.Bip44Conf_harmonyOneEth_closure, A.Bip44Conf_harmonyOneAtom_closure, A.Bip44Conf_huobiChain_closure, A.Bip44Conf_icon_closure, A.Bip44Conf_injective_closure, A.Bip44Conf_irisNet_closure, A.Bip44Conf_kava_closure, A.Bip44Conf_kusamaEd25519Slip_closure, A.Bip44Conf_kusamaTestnetEd25519Slip_closure, A.Bip44Conf_litecoinMainNet_closure, A.Bip44Conf_litecoinTestNet_closure, A.Bip44Conf_moneroEd25519Slip_closure, A.Bip44Conf_moneroSecp256k1_closure, A.Bip44Conf_nano_closure, A.Bip44Conf_nearProtocol_closure, A.Bip44Conf_neo_closure, A.Bip44Conf_nineChroniclesGold_closure, A.Bip44Conf_okexChainEth_closure, A.Bip44Conf_okexChainAtom_closure, A.Bip44Conf_okexChainAtomOld_closure, A.Bip44Conf_ontology_closure, A.Bip44Conf_osmosis_closure, A.Bip44Conf_piNetwork_closure, A.Bip44Conf_polkadotEd25519Slip_closure, A.Bip44Conf_polkadotTestnetEd25519Slip_closure, A.Bip44Conf_polygon_closure, A.Bip44Conf_ripple_closure, A.Bip44Conf_rippleTestnet_closure, A.Bip44Conf_rippleEd25519_closure, A.Bip44Conf_rippleTestnetEd25519_closure, A.Bip44Conf_secretNetworkOld_closure, A.Bip44Conf_secretNetworkNew_closure, A.Bip44Conf_solana_closure, A.Bip44Conf_solanaTestnet_closure, A.Bip44Conf_stellar_closure, A.Bip44Conf_stellarTestnet_closure, A.Bip44Conf_terra_closure, A.Bip44Conf_tezos_closure, A.Bip44Conf_theta_closure, A.Bip44Conf_tron_closure, A.Bip44Conf_tronTestnet_closure, A.Bip44Conf_vechain_closure, A.Bip44Conf_verge_closure, A.Bip44Conf_zcashMainNet_closure, A.Bip44Conf_zcashTestNet_closure, A.Bip44Conf_zilliqa_closure, A.Bip44Conf_tonMainnet_closure, A.Bip44Conf_tonTestnet_closure, A.Bip44Conf_electraProtocolMainNet_closure, A.Bip44Conf_electraProtocolTestNet_closure, A.Bip44Conf_suiSecp256k1_closure, A.Bip44Conf_suiSecp256r1_closure, A.Bip44Conf_suiEd25519_closure, A.Bip49Coins_fromName_closure, A.Bip49Conf_dashMainNet_closure, A.Bip49Conf_dashTestNet_closure, A.Bip49Conf_dogecoinMainNet_closure, A.Bip49Conf_dogecoinTestNet_closure, A.Bip49Conf_litecoinMainNet_closure, A.Bip49Conf_litecoinTestNet_closure, A.Bip49Conf_zcashMainNet_closure, A.Bip49Conf_zcashTestNet_closure, A.Bip49Conf_bitcoinMainNet_closure, A.Bip49Conf_bitcoinTestNet_closure, A.Bip49Conf_bitcoinSvMainNet_closure, A.Bip49Conf_bitcoinSvTestNet_closure, A.Bip49Conf_bitcoinCashMainNet_closure, A.Bip49Conf_bitcoinCashTestNet_closure, A.Bip49Conf_bitcoinCashSlpMainNet_closure, A.Bip49Conf_bitcoinCashSlpTestNet_closure, A.Bip49Conf_ecashMainNet_closure, A.Bip49Conf_ecashTestNet_closure, A.Bip49Conf_pepeMainnet_closure, A.Bip49Conf_pepeTestnet_closure, A.Bip49Conf_electraProtocolMainNet_closure, A.Bip49Conf_electraProtocolTestNet_closure, A.Bip84Coins_fromName_closure, A.Bip84Conf_bitcoinMainNet_closure, A.Bip84Conf_bitcoinTestNet_closure, A.Bip84Conf_litecoinMainNet_closure, A.Bip84Conf_litecoinTestNet_closure, A.Bip84Conf_electraProtocolMainNet_closure, A.Bip84Conf_electraProtocolTestNet_closure, A.Bip86Coins_fromName_closure, A.Bip86Conf_bitcoinMainNet_closure, A.Bip86Conf_bitcoinTestNet_closure, A.CoinProposal_fromName_closure, A.Cip1852Coins_fromName_closure, A.Cip1852Conf_cardanoIcarusMainNet_closure, A.Cip1852Conf_cardanoIcarusTestNet_closure, A.Cip1852Conf_cardanoLedgerMainNet_closure, A.Cip1852Conf_cardanoLedgerTestNet_closure, A.MoneroCoins_fromName_closure, A.SubstrateCoins_fromName_closure, A.SubstrateConf_acalaEd25519_closure, A.SubstrateConf_acalaSecp256k1_closure, A.SubstrateConf_acalaSr25519_closure, A.SubstrateConf_bifrostEd25519_closure, A.SubstrateConf_bifrostSecp256k1_closure, A.SubstrateConf_bifrostSr25519_closure, A.SubstrateConf_chainXEd25519_closure, A.SubstrateConf_chainXSecp256k1_closure, A.SubstrateConf_chainXSr25519_closure, A.SubstrateConf_edgewareEd25519_closure, A.SubstrateConf_edgewareSecp256k1_closure, A.SubstrateConf_edgewareSr25519_closure, A.SubstrateConf_genericEd25519_closure, A.SubstrateConf_genericSecp256k1_closure, A.SubstrateConf_genericSr25519_closure, A.SubstrateConf_karuraEd25519_closure, A.SubstrateConf_karuraSecp256k1_closure, A.SubstrateConf_karuraSr25519_closure, A.SubstrateConf_kusamaEd25519_closure, A.SubstrateConf_kusamaSecp256k1_closure, A.SubstrateConf_kusamaSr25519_closure, A.SubstrateConf_moonbeamEd25519_closure, A.SubstrateConf_moonbeamSecp256k1_closure, A.SubstrateConf_moonbeamSr25519_closure, A.SubstrateConf_moonriverEd25519_closure, A.SubstrateConf_moonriverSecp256k1_closure, A.SubstrateConf_moonriverSr25519_closure, A.SubstrateConf_phalaEd25519_closure, A.SubstrateConf_phalaSecp256k1_closure, A.SubstrateConf_phalaSr25519_closure, A.SubstrateConf_plasmEd25519_closure, A.SubstrateConf_plasmSecp256k1_closure, A.SubstrateConf_plasmSr25519_closure, A.SubstrateConf_polkadotEd25519_closure, A.SubstrateConf_polkadotSecp256k1_closure, A.SubstrateConf_polkadotSr25519_closure, A.SubstrateConf_soraEd25519_closure, A.SubstrateConf_soraSecp256k1_closure, A.SubstrateConf_soraSr25519_closure, A.SubstrateConf_stafiEd25519_closure, A.SubstrateConf_stafiSecp256k1_closure, A.SubstrateConf_stafiSr25519_closure, A.CborObject_CborObject$fromDynamic_closure, A.CborDynamicBytesValue_closure, A.CborUtils__decodeUtf8String_closure, A.CborUtils__toStringObject_closure, A.CborUtils__toStringObject_closure0, A.CborUtils__decodeBytesString_closure, A.AESLib_initialize_r24, A.QuickCrypto__generateRandom_closure, A.BlockchainUtilsException_toString_closure, A.BlockchainUtilsException_toString_closure0, A.RPCError_toString_closure, A.RPCError_toString_closure0, A.LayoutConst_boolean_closure0, A.LayoutConst_boolean_closure, A.LayoutConst_rustEnum_closure1, A.LayoutConst_rustEnum_closure0, A.LayoutConst_compactString_closure0, A.LayoutConst_compactString_closure, A.LayoutConst_compactMap_closure0, A.LayoutConst_compactMap_closure, A.LayoutConst_compactVec_closure, A.LayoutConst_compactVec_closure0, A.LayoutConst_bcsString_closure0, A.LayoutConst_bcsString_closure, A.LayoutConst_bcsVector_closure, A.LayoutConst_bcsVector_closure0, A.LayoutConst_bcsLazyEnum_closure1, A.LayoutConst_bcsLazyEnum_closure0, A.LazyUnion_defaultGetSourceVariant_closure, A.StructLayout_StructLayout_closure, A.Union_defaultGetSourceVariant_closure, A.ServiceProviderUtils_parseResponse_closure, A.ServiceProviderUtils_parseResponse_closure0, A.BytesUtils_toBytes_closure, A.UUID_generateUUIDv4_closure, A.UUID_generateUUIDv4_closure0, A.CanonicalizedMap_entries_closure, A.CanonicalizedMap_keys_closure, A.CanonicalizedMap_values_closure, A.CosmosKeysAlgs_fromName_closure, A.AminoTx_AminoTx$fromJson_closure, A.AminoTx_AminoTx$fromJson_closure0, A.AminoTx_AminoTx$fromJson_closure1, A.AminoTx_AminoTx$fromJson_closure2, A.AminoTx_AminoTx$fromJson_closure3, A.AminoTx_AminoTx$fromJson_closure4, A.AminoTx_AminoTx$fromJson_closure5, A.AminoTx_AminoTx$fromJson_closure6, A.AminoTx_AminoTx$fromJson_closure7, A.AminoTx_AminoTx$fromJson_closure8, A.AminoTx_AminoTx$fromJson_closure9, A.AminoTx_toJson_closure, A.CCTPV1Types_findService_closure, A.EvmosEthermintEVMV1Params_EvmosEthermintEVMV1Params$fromJson_closure, A.EvmosEthermintEVMV1Params_toJson_closure, A.EvmosEthermintEVMV1MsgEthereumTxResponse_EvmosEthermintEVMV1MsgEthereumTxResponse$fromJson_closure, A.EvmosEthermintEVMV1MsgEthereumTxResponse_toJson_closure, A.EvmosRevenueV1MsgRegisterRevenue_EvmosRevenueV1MsgRegisterRevenue$fromJson_closure, A.EvmosRevenueV1MsgRegisterRevenue_toJson_closure, A.EvmosErc20V1Types_findService_closure, A.EvmosVestingV2MsgFundVestingAccount_toJson_closure, A.EvmosVestingV2MsgFundVestingAccount_toJson_closure0, A.OpInitOpHostV1Types_findService_closure, A.Input_Input$fromJson_closure, A.Input_toJson_closure, A.Output_Output$fromJson_closure, A.Output_toJson_closure, A.MsgMultiSend_MsgMultiSend$fromJson_closure, A.MsgMultiSend_MsgMultiSend$fromJson_closure0, A.MsgMultiSend_toJson_closure, A.MsgMultiSend_toJson_closure0, A.MsgSend_MsgSend$fromJson_closure, A.MsgSend_toJson_closure, A.MsgVerifyInvariant_MsgVerifyInvariant$fromJson_closure, A.DistributionMsgFundCommunityPool_DistributionMsgFundCommunityPool$fromJson_closure, A.DistributionMsgFundCommunityPool_toJson_closure, A.GovVoteOption_fromName_closure, A.GovMsgDeposit_GovMsgDeposit$fromJson_closure, A.GovMsgDeposit_toJson_closure, A.GovMsgVote_GovMsgVote$fromJson_closure, A.MsgCreateValidator_MsgCreateValidator$fromJson_closure, A.Fee_toJson_closure, A.Fee_toAminoJson_closure, A.MsgCreateVestingAccount_MsgCreateVestingAccount$fromJson_closure, A.MsgCreateVestingAccount_toJson_closure, A.ProtocolBufferDecoder__decodeInt_closure, A.QuickProtocolBufferResults_getField_closure, A.QuickProtocolBufferResults_getField_closure0, A.AminoTypes_fromType_closure, A.AminoMessage_fromJson_closure, A.AminoMessage_fromJson_closure0, A.QuickMap_asListOfMap_closure, A.QuickMap__valueAsList_closure, A.CosmosUtils_sortAminoJsonTx_closure0, A.RetryClient_send_closure, A.RetryClient_send_closure0, A.BaseRequest_closure0, A.BrowserClient_send_closure, A._readBody_closure, A._readBody_closure0, A.ByteStream_toBytes_closure, A.mapToQuery_closure, A.MediaType_toString__closure, A.expectQuotedString_closure, A.AptosTypeTags_fromName_closure, A.AptosStructTag_AptosStructTag$fromStruct_closure, A.AptosStructTag_toLayoutStruct_closure, A.AptosTransactionPayloads_fromName_closure, A.AptosScript_closure, A.AptosScript_AptosScript$fromStruct_closure, A.AptosScript_AptosScript$fromStruct_closure0, A.AptosScript_toLayoutStruct_closure, A.AptosScript_toLayoutStruct_closure0, A.AptosTransactionEntryFunction_AptosTransactionEntryFunction$fromStruct_closure, A.AptosTransactionEntryFunction_AptosTransactionEntryFunction$fromStruct_closure0, A.AptosTransactionEntryFunction_toLayoutStruct_closure, A.AptosTransactionEntryFunction_toLayoutStruct_closure0, A.AptosMultisigTransactionPayloads_fromName_closure, A.AptosMultisig_AptosMultisig$fromStruct_closure, A.AptosMultiAgentTransaction_AptosMultiAgentTransaction$fromStruct_closure, A.AptosMultiAgentTransaction_AptosMultiAgentTransaction$fromStruct_closure0, A.AptosMultiAgentTransaction_toLayoutStruct_closure, A.AptosSimpleTransaction_AptosSimpleTransaction$fromStruct_closure, A.MoveArgumentType_fromName_closure, A.EthereumRequest_buildRequest_closure, A.EthereumRequest_buildRequest_closure0, A.EthereumMethods_fromName_closure, A.ETHTransactionType_fromPrefix_closure, A.EIP712Version_fromVersion_closure, A.EIP712Version_fromVersion__closure, A.Eip712TypedData_Eip712TypedData$fromJson_closure, A.Eip712TypedData_toJson__closure, A.EIP712Legacy_EIP712Legacy$fromJson_closure, A.EIP712Legacy_toJson_closure, A._EIP712Utils_ensureCorrectValues_closure, A._EIP712Utils_eip712TypedDataV1ValueToJson_closure, A.AccountCreateContract_AccountCreateContract$deserialize_closure, A.AccountPermissionUpdateContract_AccountPermissionUpdateContract$fromJson_closure, A.AccountPermissionUpdateContract_AccountPermissionUpdateContract$deserialize_closure, A.AccountPermissionUpdateContract_AccountPermissionUpdateContract$deserialize_closure0, A.AccountPermissionUpdateContract_toJson_closure, A.AccountType_fromName_closure, A.AccountType_fromValue_closure, A.Authority_Authority$deserialize_closure, A.Permission_Permission$fromJson_closure, A.Permission_Permission$deserialize_closure, A.Permission_toJson_closure, A.PermissionType_fromName_closure, A.PermissionType_fromValue_closure, A.AssetIssueContract_AssetIssueContract$fromJson_closure, A.AssetIssueContract_AssetIssueContract$deserialize_closure, A.AssetIssueContract_toJson_closure, A.DelegateResourceContract_DelegateResourceContract$deserialize_closure, A.FreezeBalanceContract_FreezeBalanceContract$deserialize_closure, A.FreezeBalanceV2Contract_FreezeBalanceV2Contract$deserialize_closure, A.UnDelegateResourceContract_UnDelegateResourceContract$deserialize_closure, A.UnfreezeBalanceContract_UnfreezeBalanceContract$deserialize_closure, A.UnfreezeBalanceV2Contract_UnfreezeBalanceV2Contract$deserialize_closure, A.ResourceCode_fromName_closure0, A.ResourceCode_fromValue_closure0, A.TransactionContractType_findByName_closure, A.TransactionContractType_findByValue_closure, A.ShieldedTransferContract_ShieldedTransferContract$fromJson_closure, A.ShieldedTransferContract_ShieldedTransferContract$fromJson_closure0, A.ShieldedTransferContract_ShieldedTransferContract$deserialize_closure, A.ShieldedTransferContract_ShieldedTransferContract$deserialize_closure0, A.ShieldedTransferContract_toJson_closure, A.ShieldedTransferContract_toJson_closure0, A.SmartContractAbiEntryType_fromName_closure, A.SmartContractAbiEntryType_fromValue_closure, A.SmartContractAbiStateMutabilityType_fromName_closure, A.SmartContractAbiStateMutabilityType_fromValue_closure, A.SmartContract_SmartContract$deserialize_closure, A.SmartContract_SmartContract$deserialize_closure0, A.SmartContractABI_SmartContractABI$fromJson_closure, A.SmartContractABI_SmartContractABI$deserialize_closure, A.SmartContractABI_toJson_closure, A.SmartContractABIEntry_SmartContractABIEntry$fromJson_closure, A.SmartContractABIEntry_SmartContractABIEntry$fromJson_closure0, A.SmartContractABIEntry_SmartContractABIEntry$deserialize_closure, A.SmartContractABIEntry_SmartContractABIEntry$deserialize_closure0, A.SmartContractABIEntry_toJson_closure, A.SmartContractABIEntry_toJson_closure0, A.Transaction_Transaction$fromJson_closure, A.Transaction_closure, A.Transaction_toJson_closure, A.TransactionRaw_TransactionRaw$fromJson_closure, A.TransactionRaw_TransactionRaw$fromJson_closure0, A.TransactionRaw_TransactionRaw$deserialize_closure, A.TransactionRaw_TransactionRaw$deserialize_closure0, A.TransactionRaw_toJson_closure, A.TransactionRaw_toJson_closure0, A.VoteAssetContract_VoteAssetContract$fromJson_closure, A.VoteAssetContract_VoteAssetContract$deserialize_closure, A.VoteAssetContract_toJson_closure, A.VoteWitnessContract_VoteWitnessContract$fromJson_closure, A.VoteWitnessContract_VoteWitnessContract$deserialize_closure, A.VoteWitnessContract_toJson_closure, A.ProtocolBufferDecoder__decodeInt_closure0, A.QuickProtocolBufferResults_getField_closure1, A.QuickProtocolBufferResults_getField_closure2, A.QuickProtocolBufferResults_getResult_closure, A.QuickProtocolBufferResults_getResult_closure0, A.QuickProtocolBufferResults_getFields_closure, A.QuickProtocolBufferResults_getFields_closure0, A.QuickProtocolBufferResults_getMap_closure, A.QuickMap_asListOfMap_closure0, A.QuickMap_asListOfBytes_closure, A.QuickMap__valueAsList_closure0, A.WalletEventTypes_fromName_closure, A.JSOBJ_keys__closure, A.JSWebSocket_constructor_create_closure, A.WebEventStream_stream_closure, A.JSWalletEvent_toEvent_closure, A.ToJsEvent_toJsEvent_closure, A.HTTPCaller_post_closure, A.HTTPCaller_get_closure, A._WorkerConnection__init_onEvent, A._WorkerConnection__init_closure, A._WorkerConnection__init_closure0, A.ProviderAuthType_fromName_closure, A.ProviderAuthType_fromTag_closure, A.HttpClientManager_call_closure, A.HttpClientManager_getCashedClient_closure, A.HTTPResponseType_fromName_closure, A.HTTPCallerResponse_stringToJsonObject_closure, A.HTTPCallerResponse_HTTPCallerResponse$parse_closure, A.DigestAuthHeadersAlg_fromName_closure, A.DigestAuthQop_fromName_closure, A.DigestAuthenticatedUtils_parseDigestHeader_closure, A.DigestAuthenticatedUtils_parseDigestHeader_closure0, A.DigestAuthenticatedUtils_parseDigestHeader_closure1, A.ContentType_fromValue_closure, A.SynchronizedLock_synchronized_closure, A.MethodUtils_call_closure, A.StrUtils_toSnakeCase_closure, A.WebsocketWeb$__closure, A.WebsocketWeb$__closure0, A.WebsocketWeb$__closure1, A.CustomCoins_fromName_closure, A.CustomCurrencyConf_byronLegacy_closure, A.CustomCurrencyConf_byronLegacyTestnet_closure, A.AddressDerivationType_fromTag_closure, A.Bip32AddressIndex__toPath_closure, A.Bip32AddressIndex__toPath_closure0, A.SeedTypes_fromValue_closure, A.NetworkType_fromTag_closure, A.NetworkType_fromName_closure, A.EthereumAPIProvider_EthereumAPIProvider$fromCborBytesOrObject_closure, A.APIServiceTracker__checkStatus_closure, A.WebSocketService__onClose_closure, A.ServiceProtocol_fromID_closure, A.AptosChainType_fromValue_closure, A.SolanaNetworkType_fromValue_closure, A.StellarChainType_fromValue_closure, A.SuiChainType_fromValue_closure, A.CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure, A.CosmosFeeToken_CosmosFeeToken$fromCborBytesOrObject_closure0, A.TonAccountContextType_fromTag_closure, A.Token_Token$deserialize_closure, A.Token_Token$deserialize_closure0, A.Web3ExceptionMessage_Web3ExceptionMessage$deserialize_closure, A.Web3GlobalResponseMessage_Web3GlobalResponseMessage$deserialize_closure, A.Web3WalletResponseMessage_Web3WalletResponseMessage$deserialize_closure, A.Web3MessageTypes_fromTag_closure, A.Web3APPData_getAuth_closure, A.Web3APPData_getAuth_closure0, A.Web3APPData_Web3APPData$deserialize_closure, A.Web3APPData_Web3APPData$deserialize_closure0, A.Web3AptosRequestMethods_fromId_closure, A.Web3AptosRequestMethods_fromName_closure, A.Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize_closure, A.Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize_closure0, A.Web3AptosSendTransaction_Web3AptosSendTransaction$deserialize__closure, A.Web3AptosSendTransaction_toCbor_closure, A.Web3AptosChainAuthenticated_Web3AptosChainAuthenticated$deserialize_closure, A.Web3AptosChainAuthenticated_Web3AptosChainAuthenticated$deserialize_closure0, A.Web3BitcoinRequestMethods_fromId_closure, A.Web3BitcoinRequestMethods_fromName_closure, A.Web3BitcoinSendTransaction_Web3BitcoinSendTransaction_closure, A.Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize_closure, A.Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize_closure0, A.Web3BitcoinSendTransaction_Web3BitcoinSendTransaction$deserialize_closure1, A.Web3BitcoinSendTransaction_toCbor_closure, A.Web3BitcoinSendTransaction_toCbor_closure0, A.Web3BitcoinSignTransaction_Web3BitcoinSignTransaction_closure, A.Web3BitcoinSignTransaction_Web3BitcoinSignTransaction$deserialize_closure, A.Web3BitcoinSignTransaction_toCbor_closure, A.Web3BitcoinChainAuthenticated_Web3BitcoinChainAuthenticated$deserialize_closure, A.Web3BitcoinChainAuthenticated_Web3BitcoinChainAuthenticated$deserialize_closure0, A.Web3CosmosRequestMethods_fromId_closure, A.Web3CosmosRequestMethods_fromName_closure, A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson_closure, A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson__closure0, A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson_closure0, A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$fromJson__closure, A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize_closure, A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize_closure0, A.Web3CosmosAddNewChain_Web3CosmosAddNewChain$deserialize_closure1, A.Web3CosmosAddNewChain_toCbor_closure, A.Web3CosmosChainAuthenticated_Web3CosmosChainAuthenticated$deserialize_closure, A.Web3CosmosChainAuthenticated_Web3CosmosChainAuthenticated$deserialize_closure0, A.Web3EthereumRequestMethods_fromId_closure, A.Web3EthereumRequestMethods_fromName_closure, A.Web3EthreumTransactionAccessList_closure, A.Web3EthreumSendTransaction_Web3EthreumSendTransaction_closure, A.Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize_closure, A.Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize_closure0, A.Web3EthereumChainAuthenticated_Web3EthereumChainAuthenticated$deserialize_closure1, A.Web3GlobalRequestMethods_fromId_closure, A.Web3GlobalRequestMethods_fromName_closure, A.Web3ConnectApplication_Web3ConnectApplication$deserialize_closure, A.Web3SolanaRequestMethods_fromId_closure, A.Web3SolanaRequestMethods_fromName_closure, A.Web3SolanaSignMessage_Web3SolanaSignMessage$deserialize_closure, A.Web3SolanaSignMessage_Web3SolanaSignMessage$deserialize_closure0, A.Web3SolanaSignMessage_toCbor_closure, A.Web3SolanaSendTransactionData_Web3SolanaSendTransactionData$deserialize_closure, A.SolanaSignAndSendAllTransactionMode_SolanaSignAndSendAllTransactionMode$fromName_closure, A.Web3SolanaSendTransaction_Web3SolanaSendTransaction$deserialize_closure, A.Web3SolanaSendTransaction_Web3SolanaSendTransaction$deserialize_closure0, A.Web3SolanaSendTransaction_toCbor_closure, A.Web3SolanaChainAuthenticated_Web3SolanaChainAuthenticated$deserialize_closure, A.Web3SolanaChainAuthenticated_Web3SolanaChainAuthenticated$deserialize_closure0, A.Web3StellarRequestMethods_fromId_closure, A.Web3StellarRequestMethods_fromName_closure, A.Web3StellarChainAuthenticated_Web3StellarChainAuthenticated$deserialize_closure, A.Web3StellarChainAuthenticated_Web3StellarChainAuthenticated$deserialize_closure0, A.Web3SubstrateRequestMethods_fromId_closure, A.Web3SubstrateRequestMethods_fromName_closure, A.Web3SubstrateSendTransaction_Web3SubstrateSendTransaction$deserialize_closure, A.Web3SubstrateSendTransaction_toCbor_closure, A.Web3SubstrateChainAuthenticated_Web3SubstrateChainAuthenticated$deserialize_closure, A.Web3SubstrateChainAuthenticated_Web3SubstrateChainAuthenticated$deserialize_closure0, A.Web3SuiRequestMethods_fromId_closure, A.Web3SuiRequestMethods_fromName_closure, A.Web3SuiTransactionCallArgs_fromName_closure, A.Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJson_closure, A.Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJsonV1_closure0, A.Web3SuiObjectArgs_fromName_closure, A.Web3SuiTransactionObject_Web3SuiTransactionObject$fromJsonV1_closure0, A.Web3SuiTransactionObjectArg_Web3SuiTransactionObjectArg$fromJson_closure, A.Web3SuiTransactionImmOrOwnedObject_Web3SuiTransactionImmOrOwnedObject$fromJson_closure, A.Web3SuiTransactionSharedObject_Web3SuiTransactionSharedObject$fromJson_closure, A.Web3SuiTransactionReceiving_Web3SuiTransactionReceiving$fromJson_closure, A.Web3SuiTransactionUnresolvedObject_Web3SuiTransactionUnresolvedObject$fromJson_closure, A.Web3SuiArguments_fromName_closure, A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJson_closure, A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJson_closure0, A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure, A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure1, A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure2, A.Web3SuiTransactionCommandMoveCall_toJson_closure, A.Web3SuiTransactionCommandTransferObjects_Web3SuiTransactionCommandTransferObjects$fromJson_closure, A.Web3SuiTransactionCommandTransferObjects_Web3SuiTransactionCommandTransferObjects$fromJsonV1_closure, A.Web3SuiTransactionCommandTransferObjects_toJson_closure, A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure, A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure1, A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure2, A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure3, A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure, A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure1, A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure2, A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure3, A.Web3SuiTransactionDataV2_toJson_closure, A.Web3SuiTransactionDataV2_toJson_closure0, A.Web3SuiTransactionExpirations_fromName_closure, A.Web3SuiTransactionExpiration_Web3SuiTransactionExpiration$fromJson_closure, A.Web3SuiTransactionGasData_Web3SuiTransactionGasData$fromJson_closure, A.Web3SuiTransactionGasData_Web3SuiTransactionGasData$fromJson_closure0, A.Web3SuiTransactionGasData_toJson_closure, A.Web3SuiTransactionCommandSplitCoins_Web3SuiTransactionCommandSplitCoins$fromJson_closure, A.Web3SuiTransactionCommandSplitCoins_Web3SuiTransactionCommandSplitCoins$fromJsonV1_closure, A.Web3SuiTransactionCommandSplitCoins_toJson_closure, A.Web3SuiTransactionCommandMergeCoins_Web3SuiTransactionCommandMergeCoins$fromJson_closure, A.Web3SuiTransactionCommandMergeCoins_Web3SuiTransactionCommandMergeCoins$fromJsonV1_closure, A.Web3SuiTransactionCommandMergeCoins_toJson_closure, A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJson_closure, A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1_closure0, A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1__closure, A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1__closure0, A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1_closure1, A.Web3SuiTransactionCommandPublish_toJson_closure, A.Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJson_closure, A.Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1_closure0, A.Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1_closure1, A.Web3SuiTransactionCommandMakeMoveVec_toJson_closure, A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJson_closure, A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJson_closure0, A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure0, A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1__closure, A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1__closure0, A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure1, A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure2, A.Web3SuiTransactionCommandUpgrade_toJson_closure, A.Web3SuiTransactionCommands_fromName_closure, A.Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJson_closure, A.Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJsonV1_closure0, A.Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize_closure, A.Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize_closure0, A.Web3SuiSignOrExecuteTransaction_Web3SuiSignOrExecuteTransaction$deserialize__closure, A.Web3SuiChainAuthenticated_Web3SuiChainAuthenticated$deserialize_closure, A.Web3SuiChainAuthenticated_Web3SuiChainAuthenticated$deserialize_closure0, A.Web3TonRequestMethods_fromId_closure, A.Web3TonRequestMethods_fromName_closure, A.Web3TonSendTransaction_Web3TonSendTransaction$deserialize_closure, A.Web3TonSendTransaction_toCbor_closure, A.Web3TonChainAuthenticated_Web3TonChainAuthenticated$deserialize_closure, A.Web3TonChainAuthenticated_Web3TonChainAuthenticated$deserialize_closure0, A.Web3TronRequestMethods_fromId_closure, A.Web3TronRequestMethods_fromName_closure, A.Web3TronChainAuthenticated_Web3TronChainAuthenticated$deserialize_closure, A.Web3TronChainAuthenticated_Web3TronChainAuthenticated$deserialize_closure0, A.Context_joinAll_closure, A.Context_split_closure, A._validateArgList_closure, A.PrimitiveTypes_fromValue_closure, A.Si0TypeDefPrimitive$deserializeJson_closure, A.Si1Type$deserializeJson_closure, A.Si1Type_scaleJsonSerialize_closure, A.Si1TypeDefsIndexesConst_fromValue_closure, A.Si1TypeDefComposite$deserializeJson_closure, A.Si1TypeDefComposite_scaleJsonSerialize_closure, A.Si1TypeDefVariant$deserializeJson_closure, A.Si1TypeDefVariant_scaleJsonSerialize_closure, A.Si1Variant$deserializeJson_closure, A.Si1Variant_scaleJsonSerialize_closure, A.StorageHasherV11Options_fromValue_closure, A.ExtrinsicMetadataV14$deserializeJson_closure, A.ExtrinsicMetadataV14_scaleJsonSerialize_closure, A.MetadataV14$deserializeJson_closure, A.MetadataV14_scaleJsonSerialize_closure, A.PalletMetadataV14$deserializeJson_closure, A.PalletStorageMetadataV14$deserializeJson_closure, A.PalletStorageMetadataV14_scaleJsonSerialize_closure, A.PortableRegistryV14$deserializeJson_closure, A.PortableRegistryV14_scaleJsonSerialize_closure, A.StorageEntryTypeV14Map$deserializeJson_closure, A.StorageEntryTypeV14Map_scaleJsonSerialize_closure, A.ExtrinsicMetadataV15$deserializeJson_closure, A.ExtrinsicMetadataV15_scaleJsonSerialize_closure, A.MetadataV15$deserializeJson_closure, A.MetadataV15$deserializeJson_closure0, A.MetadataV15_scaleJsonSerialize_closure, A.MetadataV15_scaleJsonSerialize_closure0, A.PalletMetadataV15$deserializeJson_closure, A.RuntimeApiMetadata_scaleJsonSerialize_closure, A.RuntimeApiMetadataV15$deserializeJson_closure, A.RuntimeApiMethodMetadata$deserializeJson_closure, A.RuntimeApiMethodMetadata_scaleJsonSerialize_closure, A.DeprecationInfoTypes_fromName_closure, A.DeprecationInfoTypes_fromName__closure, A.DeprecationStatusTypes_fromName_closure, A.DeprecationStatusTypes_fromName__closure, A.ExtrinsicMetadataV16$deserializeJson_closure, A.ExtrinsicMetadataV16_scaleJsonSerialize_closure, A.MetadataV16$deserializeJson_closure, A.MetadataV16$deserializeJson_closure0, A.MetadataV16_scaleJsonSerialize_closure, A.MetadataV16_scaleJsonSerialize_closure0, A.PalletMetadataV16$deserializeJson_closure, A.PalletMetadataV16$deserializeJson_closure0, A.PalletMetadataV16_scaleJsonSerialize_closure, A.RuntimeApiMetadataV16$deserializeJson_closure, A.PalletStorageMetadataV16$deserializeJson_closure, A.PalletStorageMetadataV16_scaleJsonSerialize_closure, A.StorageEntryModifierV9_fromValue_closure, A.PalletMetadata_scaleJsonSerialize_closure, A.Highlighter$__closure, A.Highlighter$___closure, A.Highlighter$__closure0, A.Highlighter__collateLines_closure, A.Highlighter__collateLines_closure1, A.Highlighter__collateLines__closure, A.Highlighter_highlight_closure, A.Cell$__closure, A.CellType_fromValue_closure, A.ResolvedCellResult_closure, A.CellUtils_topologicalSort_closure, A.CellUtils_topologicalSort_visit, A.CellUtils_topologicalSort_closure0, A.CellUtils_topologicalSort__closure, A.CellUtils_resolveExotic_closure, A.CellUtils_resolveExotic_closure0, A.TonChain_fromWorkchain_closure, A.WalletVersion_WalletVersion$fromValue_closure, A.DictionaryCodecs_createBigUintKey_closure, A.Dictionary_store_closure, A.StateInit_store_closure, A.AptosWeb3State_AptosWeb3State_closure, A.AptosWeb3State_AptosWeb3State_closure0, A.JSAptosHandler__parseSwitchChain_closure, A.JSBitcoinWalletAccount_constructor_setup_closure, A.BitcoinWeb3State_BitcoinWeb3State_closure, A.BitcoinWeb3State_BitcoinWeb3State_closure0, A.JSBitcoinHandler__parseSendTransaction_closure, A.JSBitcoinHandler__parseSendTransaction_closure0, A.JSBitcoinHandler__parseTransaction_closure, A.JSBitcoinHandler__parseTransaction_closure0, A.CosmosAddNewChainParams_toJson_closure, A.CosmosWeb3State_chainExist_closure, A.CosmosWeb3State_getChainIdJsAccounts_closure0, A.CosmosWeb3State_getChainIdJsAccounts_closure, A.CosmosWeb3State_getChainIdJsAccounts_closure2, A.CosmosWeb3State_CosmosWeb3State_closure, A.CosmosWeb3State_CosmosWeb3State_closure0, A.EthereumWeb3State_chainExist_closure, A.EthereumWeb3State_getChainFromChainId_closure, A.EthereumWeb3State_EthereumWeb3State_closure, A.EthereumWeb3State_EthereumWeb3State_closure0, A.JSEthereumHandler__parseAddEthereumChain_closure, A.JSEthereumHandler__parseAddEthereumChain_closure0, A.JSEthereumHandler__parseAddEthereumChain_closure1, A.JSEthereumHandler__parseAddEthereumChain_closure2, A.QuickJSStringList_get_toJS_closure, A.WalletStandardChainWeb3State_closure, A.WalletStandardChainWeb3State_jsAccounts_closure, A.WalletStandardChainWeb3State_networkJsAccounts_closure, A.WalletStandardChainWeb3State_networkAccountChanged_closure, A.WalletStandardChainWeb3State_networkAccountChanged_closure0, A.WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure, A.WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure1, A.WalletStandardChainWeb3State_getAddressNetworkChainAccountOrThrow_closure, A.WalletStandardChainWeb3State_getAccountChain_closure, A.WalletStandardChainWeb3State_getJsAddressChainAccountOrThrow_closure, A.WalletStandardChainWeb3State_getJsAddressChainAccountOrThrow_closure1, A.WalletStandardChainWeb3State_defaultNetworkAddresses_closure, A.WalletStandardChainWeb3State_getJSAccountOrThrow_closure, A.JSWalletStandardNetworkHandler_createStateEvent_closure, A.JSWalletStandardNetworkHandler_createEvent_closure, A.JSEventType_name_closure, A.JSWalletResponseType_fromName_closure, A.JSClientType_fronNetworkName_closure, A.JSClientType_fromName_closure, A.PageMessageType_fromName_closure, A.PageRequestType_fromName_closure, A.PageMessageRequest_get_dartParams_closure, A.SolanaWeb3State_SolanaWeb3State_closure, A.SolanaWeb3State_SolanaWeb3State_closure0, A.JSSolanaHandler__parseTransaction_closure, A.JSSolanaHandler__parseTransaction_closure1, A.JSSolanaHandler__parseSignIn_closure0, A.JSSolanaHandler_finalizeWalletResponse_closure, A.JSSolanaHandler_finalizeWalletResponse_closure0, A.JSSolanaHandler_finalizeWalletResponse_closure1, A.JSSolanaHandler_finalizeWalletResponse_closure2, A.JSSolanaHandler_finalizeWalletResponse_closure3, A.StellarWeb3State_StellarWeb3State_closure, A.StellarWeb3State_StellarWeb3State_closure0, A.JSSubstrateTransaction_toJson_closure, A.SubstrateWeb3State_knownMetadatas_closure, A.SubstrateWeb3State_SubstrateWeb3State_closure, A.SubstrateWeb3State_SubstrateWeb3State_closure0, A.SuiWeb3State_SuiWeb3State_closure, A.SuiWeb3State_SuiWeb3State_closure0, A.JSSuiHandler__parseTransaction_closure, A.TonWeb3State_TonWeb3State_closure, A.TonWeb3State_TonWeb3State_closure0, A.TronWeb3State_getChainFromChainId_closure, A.TronWeb3State_TronWeb3State_closure, A.TronWeb3State_TronWeb3State_closure0, A.JSTronHandler_finalizeWalletResponse_closure, A.JsUtils_toListOfMap_closure, A.JsUtils_toListOfMap_closure0, A.JSWalletHandler_handleClientMessage_closure, A.JSWalletStandardHandler__getWalletChange_closure, A.JSWalletStandardHandler__getWalletChange_closure0, A.JSWalletStandardHandler__getWalletChange_closure1, A.JSWalletStandardHandler__getWalletChange_closure2, A.JSWalletStandardHandler__getWalletChange_closure3, A.JSWalletStandardHandler__getWalletChange_closure4, A.JSExtentionWallet_sendBackgroudMessage_onMessage, A.JSExtentionWallet_sendBackgroudMessage_onMessage_closure, A.JSExtentionWallet_sendBackgroudMessage_onMessage_closure0, A.JSExtentionWallet__sendMessageToExtention_closure, A.JSExtentionWallet__sendMessageToExtention_onDisconnect, A.JSWalletStandardChange_constructor_setup_closure, A.JSWalletNetworkEvent_constructor__closure]);
    _inheritMany(A.Closure2Args, [A._CastListBase_sort_closure, A.CastMap_forEach_closure, A.CastMap_removeWhere_closure, A.ConstantMap_map_closure, A.JsLinkedHashMap_addAll_closure, A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A.Future_wait_handleError, A._Future__propagateToListeners_handleWhenCompleteCallback_closure0, A._Future_timeout_closure1, A._AddStreamState_makeErrorHandler_closure, A.LinkedHashMap_LinkedHashMap$from_closure, A.MapBase_mapToString_closure, A._JsonStringifier_writeMap_closure, A._BigIntImpl_hashCode_combine, A._Uri__makeQueryFromParameters_closure, A.Uri__parseIPv4Address_error, A.Uri_parseIPv6Address_error, A.Uri_parseIPv6Address_parseHex, A._Uri__makeQueryFromParametersDefault_writeParameter, A._Uri__makeQueryFromParametersDefault_closure, A.FutureGroup_add_closure0, A.AESLib_initialize_mul, A.LayoutConst_rustEnum_closure, A.LayoutConst_bcsLazyEnum_closure, A.SequenceLayout_encode_closure, A.StructLayout_StructLayout_closure0, A.StructLayout_getSpan_closure, A.CanonicalizedMap_addAll_closure, A.CanonicalizedMap_forEach_closure, A.CanonicalizedMap_map_closure, A.MsgTransfer_toAminoJson_closure, A.MsgCreateValidator_toAminoJson_closure, A.Fee_toAminoJson_closure0, A.AminoMessage_toAminoJson_closure, A.CosmosUtils_sortAminoJsonTx_closure, A.BaseRequest_closure, A.MediaType_toString_closure, A.BcsSerialization_toReadableObject_closure, A.BcsSerialization_toReadableObject_closure0, A.Eip712TypedData_toJson_closure, A.SuiApiTransactionBlockResponseOptions_toJson_closure, A.AccountCreateContract_toJson_closure, A.AccountId_toJson_closure, A.AccountPermissionUpdateContract_toJson_closure0, A.Permission_toJson_closure0, A.AssetIssueContract_toJson_closure0, A.TransferAssetContract_toJson_closure, A.UpdateAssetContract_toJson_closure, A.DelegateResourceContract_toJson_closure, A.FreezeBalanceV2Contract_toJson_closure, A.TransferContract_toJson_closure, A.UnDelegateResourceContract_toJson_closure, A.UnfreezeBalanceV2Contract_toJson_closure, A.ExchangeCreateContract_toJson_closure, A.ExchangeInjectContract_toJson_closure, A.ExchangeTransactionContract_toJson_closure, A.ExchangeWithdrawContract_toJson_closure, A.MarketCancelOrderContract_toJson_closure, A.MarketSellAssetContract_toJson_closure, A.ProposalApproveContract_toJson_closure, A.ProposalCreateContract_ProposalCreateContract$fromJson_closure, A.ProposalCreateContract_toJson_closure, A.ReceiveDescription_toJson_closure, A.ShieldedTransferContract_toJson_closure1, A.SpendDescription_toJson_closure, A.CreateSmartContract_toJson_closure, A.SmartContract_toJson_closure, A.SmartContractBABIEntryParam_toJson_closure, A.TriggerSmartContract_toJson_closure, A.UpdateEnergyLimitContract_toJson_closure, A.UpdateSettingContract_toJson_closure, A.TransactionContract_toJson_closure, A.TransactionRaw_toJson_closure1, A.VoteAssetContract_toJson_closure0, A.VoteWitnessContract_toJson_closure0, A.WitnessUpdateContract_toJson_closure, A.WitnessCreateContract_toJson_closure, A.Web3ExceptionMessage_toJson_closure, A.MetadataVariantsDeprecated_MetadataVariantsDeprecated$deserializeJson_closure, A.MetadataVariantsDeprecated_scaleJsonSerialize_closure, A.ExtrinsicMetadataV16$deserializeJson_closure0, A.Highlighter__collateLines_closure0, A._DictSerializationUtils_buildTree_closure, A.SimpleLibraryCodecs_codec_closure, A.StateInit_toJson_closure, A.WalletStandardChainWeb3State__sortAccounts_closure, A.WalletStandardChainWeb3State__sortAccounts_closure0, A.WalletStandardChainWeb3State__sortChains_closure, A.JSExtentionWallet__pingPort_onEmitMessage, A.JSExtentionWallet__sendMessageToExtention_onMessage]);
    _inherit(A.CastList, A._CastListBase);
    _inheritMany(A.MapBase, [A.CastMap, A.UnmodifiableMapBase, A.JsLinkedHashMap, A._HashMap, A._JsonMap]);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A.RuntimeError, A._Error, A.JsonUnsupportedObjectError, A.AssertionError, A.ArgumentError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError]);
    _inherit(A.UnmodifiableListBase, A.ListBase);
    _inherit(A.CodeUnits, A.UnmodifiableListBase);
    _inheritMany(A.Closure0Args, [A.nullFuture_closure, A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A._asyncStarHelper_closure, A._AsyncStarStreamController__resumeBody, A._AsyncStarStreamController__resumeBody_closure, A._AsyncStarStreamController_closure0, A._AsyncStarStreamController_closure1, A._AsyncStarStreamController_closure, A._AsyncStarStreamController__closure, A.Future_Future$delayed_closure, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainCoreFuture_closure, A._Future__asyncCompleteWithValue_closure, A._Future__asyncCompleteErrorObject_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A._Future_timeout_closure, A.Stream_length_closure0, A._StreamController__subscribe_closure, A._StreamController__recordCancel_complete, A._AddStreamState_cancel_closure, A._BufferingStreamSubscription__sendError_sendError, A._BufferingStreamSubscription__sendDone_sendDone, A._PendingEvents_schedule_closure, A._rootHandleError_closure, A._RootZone_bindCallbackGuarded_closure, A._Utf8Decoder__decoder_closure, A._Utf8Decoder__decoderNonfatal_closure, A.StreamSplitter_split_closure, A.BitcoinAddressType_fromValue_closure0, A.BasedUtxoNetwork_fromName_closure0, A.PsbtGlobal_PsbtGlobal_closure2, A.PsbtGlobalExtendedPublicKey_PsbtGlobalExtendedPublicKey_closure, A.PsbtGlobalPSBTVersionNumber_PsbtGlobalPSBTVersionNumber$deserialize_closure0, A.PsbtInput_PsbtInput_closure2, A.PsbtInputSpentOutputIndex_PsbtInputSpentOutputIndex_closure, A.PsbtInputSequenceNumber_PsbtInputSequenceNumber_closure, A.PsbtOutput_PsbtOutput_closure2, A.Psbt_Psbt$deserialize_closure1, A.Psbt_Psbt$deserialize_closure3, A.Psbt_Psbt$deserialize_closure5, A.XlmAddrTypes_fromTag_closure0, A.CoinProposal_fromName_closure0, A.OptionalLayout_OptionalLayout_closure, A.CosmosKeysAlgs_fromName_closure0, A.GovVoteOption_fromName_closure0, A.MediaType_MediaType$parse_closure, A.AptosTypeTags_fromName_closure0, A.AptosTransactionPayloads_fromName_closure0, A.AptosMultisigTransactionPayloads_fromName_closure0, A.MoveArgumentType_fromName_closure0, A.EIP712Version_fromVersion_closure0, A.PermissionType_fromName_closure0, A.PermissionType_fromValue_closure0, A.ResourceCode_fromName_closure, A.ResourceCode_fromValue_closure, A.TransactionContractType_findByName_closure0, A.SmartContractAbiEntryType_fromName_closure0, A.SmartContractAbiEntryType_fromValue_closure0, A.SmartContractAbiStateMutabilityType_fromName_closure0, A.SmartContractAbiStateMutabilityType_fromValue_closure0, A.WalletEventTypes_fromName_closure0, A.WebEventStream_stream_closure0, A._WorkerConnector__onError_closure, A._WorkerConnector_getConnector_closure, A._WorkerConnection__getRequestId_closure, A._WorkerConnection__sentRequest_closure, A.ProviderAuthType_fromName_closure0, A.ProviderAuthType_fromTag_closure0, A.HttpClientManager_getCashedClient_closure0, A.HttpClientManager_getCashedClient_closure1, A._CachedClientImpl__startTimer_closure, A.HTTPResponseType_fromName_closure0, A.DigestAuthHeadersAlg_fromName_closure0, A.DigestAuthQop_fromName_closure0, A.StreamListenable__controller_closure0, A.StreamListenable__controller_closure, A.ContentType_fromValue_closure0, A.SynchronizedLock_synchronized_complete, A.AddressDerivationType_fromTag_closure0, A.SeedTypes_fromValue_closure0, A.NetworkType_fromTag_closure0, A.NetworkType_fromName_closure0, A.HTTPService_serviceRequest_closure, A.WebSocketService_connect_closure, A.WebSocketService_connect__closure, A.WebSocketService_addMessage_closure, A.EthereumWebsocketService__emitListeners_closure, A.EthereumWebsocketService_onMessge_closure, A.AptosChainType_fromValue_closure0, A.SolanaNetworkType_fromValue_closure0, A.StellarChainType_fromValue_closure0, A.SuiChainType_fromValue_closure0, A.TonAccountContextType_fromTag_closure0, A.Web3MessageTypes_fromTag_closure0, A.Web3AptosRequestMethods_fromId_closure0, A.Web3BitcoinRequestMethods_fromId_closure0, A.Web3CosmosRequestMethods_fromId_closure0, A.Web3EthereumRequestMethods_fromId_closure0, A.Web3GlobalRequestMethods_fromId_closure0, A.Web3SolanaRequestMethods_fromId_closure0, A.SolanaSignAndSendAllTransactionMode_SolanaSignAndSendAllTransactionMode$fromName_closure0, A.Web3StellarRequestMethods_fromId_closure0, A.Web3SubstrateRequestMethods_fromId_closure0, A.Web3SuiRequestMethods_fromId_closure0, A.Web3SuiTransactionCallArg_Web3SuiTransactionCallArg$fromJsonV1_closure, A.Web3SuiTransactionObject_Web3SuiTransactionObject$fromJsonV1_closure, A.Web3SuiTransactionCommandMoveCall_Web3SuiTransactionCommandMoveCall$fromJsonV1_closure0, A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV2_closure0, A.Web3SuiTransactionDataV2_Web3SuiTransactionDataV2$fromJsonV1_closure0, A.Web3SuiTransactionCommandPublish_Web3SuiTransactionCommandPublish$fromJsonV1_closure, A.Web3SuiTransactionCommandMakeMoveVec_Web3SuiTransactionCommandMakeMoveVec$fromJsonV1_closure, A.Web3SuiTransactionCommandUpgrade_Web3SuiTransactionCommandUpgrade$fromJsonV1_closure, A.Web3SuiTransactionCommand_Web3SuiTransactionCommand$fromJsonV1_closure, A.Web3TonRequestMethods_fromId_closure0, A.Web3TronRequestMethods_fromId_closure0, A.Web3ValidatorUtils_praseObject_closure, A.Web3ValidatorUtils_parseBase58_closure, A.Web3ValidatorUtils_parseList_closure, A.Web3ValidatorUtils_parseMap_closure, A.PrimitiveTypes_fromValue_closure0, A.Si1TypeDefsIndexesConst_fromValue_closure0, A.StorageHasherV11Options_fromValue_closure0, A.DeprecationInfoTypes_fromName_closure0, A.DeprecationStatusTypes_fromName_closure0, A.StorageEntryModifierV9_fromValue_closure0, A.Highlighter_closure, A.Highlighter__writeFileStart_closure, A.Highlighter__writeMultilineHighlights_closure, A.Highlighter__writeMultilineHighlights_closure0, A.Highlighter__writeMultilineHighlights_closure1, A.Highlighter__writeMultilineHighlights_closure2, A.Highlighter__writeMultilineHighlights__closure, A.Highlighter__writeMultilineHighlights__closure0, A.Highlighter__writeHighlightedText_closure, A.Highlighter__writeIndicator_closure, A.Highlighter__writeIndicator_closure0, A.Highlighter__writeIndicator_closure1, A.Highlighter__writeSidebar_closure, A._Highlight_closure, A.TonChain_fromWorkchain_closure0, A.WalletVersion_WalletVersion$fromValue_closure0, A.JSAptosHandler__parseSwitchChain_closure0, A.JSBitcoinHandler__parseOutput_closure, A.CosmosWeb3State_getChainIdJsAccounts_closure1, A.EthereumWeb3State_getChainFromChainId_closure0, A.JSEthereumHandler__parseWalletStandardTypedData_closure, A.JSEthereumHandler__parseWalletStandardTypedData_closure0, A.JSEthereumHandler__parseTypedData_closure, A.JSEthereumHandler__parseTypedData_closure0, A.JSEthereumHandler__parseTypedData_closure1, A.JSEthereumHandler__parseTypedData_closure2, A.JSEthereumHandler__parseTransaction_closure, A.JSEthereumHandler__parseTransaction_closure0, A.JSEthereumHandler__parseTransactionRequest_closure, A.JSEthereumHandler__parseTransactionRequest_closure0, A.JSEthereumHandler__personalSign_closure, A.WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure0, A.WalletStandardChainWeb3State_getAddressChainAccountOrThrow_closure2, A.WalletStandardChainWeb3State_getAddressNetworkChainAccountOrThrow_closure0, A.WalletStandardChainWeb3State_getAccountChain_closure0, A.WalletStandardChainWeb3State_getJsAddressChainAccountOrThrow_closure0, A.WalletStandardChainWeb3State_getJSAccountOrThrow_closure0, A.JSWalletStandardNetworkHandler_getState_closure, A.JSWalletStandardNetworkHandler_initChain_closure, A.JSEventType_name_closure0, A.JSWalletResponseType_fromName_closure0, A.JSClientType_fronNetworkName_closure0, A.JSClientType_fromName_closure0, A.PageMessageType_fromName_closure0, A.PageRequestType_fromName_closure0, A.JSSolanaHandler__parseTransaction_closure0, A.JSSolanaHandler__parseTransaction_closure2, A.JSSolanaHandler__parseSignMessage_closure, A.JSSolanaHandler__parseSignIn_closure, A.JSStellarHandler__signMessage_closure, A.JSSubstrateHandler__signMessage_closure, A.JSSubstrateHandler__parseTransaction_closure, A.JSTonHandler__signMessage_closure, A.JSTonHandler__parseTransaction_closure, A.JSTonHandler__parseTransaction_closure0, A.JSTonHandler__parseTransaction_closure1, A.TronWeb3State_getChainFromChainId_closure0, A.JSTronHandler__parseWalletStandardTransaction_closure, A.JSExtentionWallet__onExtentionPortDiscounect_closure, A.JSExtentionWallet__getPort_closure, A.JSExtentionWallet__openPort_closure]);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.EmptyIterable, A.LinkedHashMapKeysIterable, A.LinkedHashMapValuesIterable, A.LinkedHashMapEntriesIterable, A._HashMapKeyIterable, A._MapBaseValueIterable]);
    _inheritMany(A.ListIterable, [A.SubListIterable, A.MappedListIterable, A._ListIndicesIterable, A.ReversedListIterable, A._JsonMapKeyIterable]);
    _inherit(A.EfficientLengthMappedIterable, A.MappedIterable);
    _inherit(A.EfficientLengthTakeIterable, A.TakeIterable);
    _inherit(A.EfficientLengthSkipIterable, A.SkipIterable);
    _inherit(A.ListMapView, A.UnmodifiableMapBase);
    _inherit(A._Record2, A._Record);
    _inherit(A._Record_2, A._Record2);
    _inherit(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A.MapView);
    _inherit(A.UnmodifiableMapView, A._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(A.ConstantMapView, A.UnmodifiableMapView);
    _inheritMany(A.ConstantMap, [A.ConstantStringMap, A.GeneralConstantMap]);
    _inherit(A.Instantiation1, A.Instantiation);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inheritMany(A.JsLinkedHashMap, [A.JsIdentityLinkedHashMap, A.JsConstantLinkedHashMap, A._LinkedCustomHashMap]);
    _inheritMany(A.NativeTypedData, [A.NativeByteData, A.NativeTypedArray]);
    _inheritMany(A.NativeTypedArray, [A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfDouble, A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(A.NativeTypedArrayOfInt, A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(A.NativeTypedArrayOfDouble, [A.NativeFloat32List, A.NativeFloat64List]);
    _inheritMany(A.NativeTypedArrayOfInt, [A.NativeInt16List, A.NativeInt32List, A.NativeInt8List, A.NativeUint16List, A.NativeUint32List, A.NativeUint8ClampedList, A.NativeUint8List]);
    _inherit(A._TypeError, A._Error);
    _inherit(A._ControllerSubscription, A._BufferingStreamSubscription);
    _inherit(A._BroadcastSubscription, A._ControllerSubscription);
    _inherit(A._AsyncBroadcastStreamController, A._BroadcastStreamController);
    _inheritMany(A._Completer, [A._AsyncCompleter, A._SyncCompleter]);
    _inheritMany(A._StreamController, [A._AsyncStreamController, A._SyncStreamController]);
    _inherit(A._ControllerStream, A._StreamImpl);
    _inherit(A._StreamControllerAddStreamState, A._AddStreamState);
    _inheritMany(A._DelayedEvent, [A._DelayedData, A._DelayedError]);
    _inherit(A._RootZone, A._Zone);
    _inherit(A._IdentityHashMap, A._HashMap);
    _inherit(A._SetBase, A.SetBase);
    _inherit(A._LinkedHashSet, A._SetBase);
    _inheritMany(A.Codec, [A.Encoding, A.Base64Codec, A.JsonCodec]);
    _inheritMany(A.Encoding, [A.AsciiCodec, A.Latin1Codec, A.Utf8Codec]);
    _inheritMany(A.Converter, [A._UnicodeSubsetEncoder, A._UnicodeSubsetDecoder, A.Base64Encoder, A.Base64Decoder, A.JsonEncoder, A.JsonDecoder, A.Utf8Encoder, A.Utf8Decoder]);
    _inheritMany(A._UnicodeSubsetEncoder, [A.AsciiEncoder, A.Latin1Encoder]);
    _inherit(A.AsciiDecoder, A._UnicodeSubsetDecoder);
    _inherit(A._ByteCallbackSink, A.ByteConversionSink);
    _inherit(A.JsonCyclicError, A.JsonUnsupportedObjectError);
    _inherit(A._JsonStringStringifier, A._JsonStringifier);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A._DataUri, A._Uri);
    _inheritMany(A.BitcoinAddressType, [A.PubKeyAddressType, A.P2pkhAddressType, A.P2shAddressType, A.SegwitAddressType]);
    _inheritMany(A.LegacyAddress, [A.P2shAddress, A.P2pkhAddress, A.P2pkAddress]);
    _inheritMany(A.BitcoinNetworkAddress, [A.BitcoinAddress, A.DogeAddress, A.PepeAddress, A.LitecoinAddress, A.BitcoinCashAddress, A.DashAddress, A.BitcoinSVAddress, A.ElectraProtocolAddress]);
    _inheritMany(A.SegwitAddress, [A.P2wpkhAddress, A.P2trAddress, A.P2wshAddress]);
    _inheritMany(A._Enum, [A.BitcoinOpcode, A.PsbtGlobalTypes, A.PsbtInputTypes, A.PsbtOutputTypes, A.PsbtVersion, A.Base58Alphabets, A.Bech32Encodings, A.ChainType, A.PubKeyModes, A.EllipticCurveTypes, A.EncodeType, A.RequestServiceType, A.ServiceResponseType, A.StringEncoding, A.CosmosKeysAlgs, A.AminoTypes, A.AptosTypeTags, A.AptosTransactionPayloads, A.AptosMultisigTransactionPayloads, A.MoveArgumentType, A.SuiApiExecuteTransactionRequestType, A.AppPlatform, A.WalletEventTypes, A.WalletEventTarget, A.HTTPRequestType, A.HttpWorkerMode, A.ProviderAuthType, A.HTTPClientType, A.HTTPResponseType, A.DigestAuthHeadersAlg, A.DigestAuthQop, A.APPIsolate, A.ContentType, A.AddressDerivationType, A.SeedTypes, A.ServiceProtocol, A.SocketStatus, A.APIServiceStatus, A.AptosChainType, A.SolanaNetworkType, A.StellarChainType, A.SuiChainType, A.TonAccountContextType, A.Web3MessageTypes, A.SolanaSignAndSendAllTransactionMode, A.Web3SuiTransactionCallArgs, A.Web3SuiObjectArgs, A.Web3SuiArguments, A.Web3SuiTransactionExpirations, A.Web3SuiTransactionCommands, A.DeprecationInfoTypes, A.DeprecationStatusTypes, A.JSNetworkState, A.JSNetworkEventType, A.JSEventType, A.JSWalletResponseType, A.JSClientType, A.PageMessageType, A.PageRequestType]);
    _inherit(A.TaprootLeaf, A.TaprootTree);
    _inheritMany(A.BlockchainUtilsException, [A.DartBitcoinPluginException, A.Base58ChecksumError, A.Bech32ChecksumError, A.AddressConverterException, A.CborException, A.CryptoException, A.ArgumentException, A.MessageException, A.RPCError, A.LayoutException, A.SS58ChecksumError, A.DartCosmosSdkPluginException, A.DartAptosPluginException, A.BcsSerializationException, A.EIP4631Exception, A.ETHPluginException, A.SolanaPluginException, A.SolidityAbiException, A.DartSuiPluginException, A.TronPluginException, A.DartSubstratePluginException, A.DartStellarPlugingException, A.TonDartPluginException]);
    _inherit(A._PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl, A.PsbtBuilderImpl);
    _inherit(A._PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl_PsbtInputImpl, A._PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl);
    _inherit(A._PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl_PsbtInputImpl_PsbtOutputImpl, A._PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl_PsbtInputImpl);
    _inherit(A.PsbtBuilder, A._PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl_PsbtInputImpl_PsbtOutputImpl);
    _inheritMany(A.PsbtBuilder, [A.PsbtBuilderV0, A.PsbtBuilderV2]);
    _inheritMany(A.PsbtGlobalData, [A.PsbtGlobalUnsignedTransaction, A.PsbtGlobalExtendedPublicKey, A.PsbtGlobalTransactionVersion, A.PsbtGlobalFallbackLocktime, A.PsbtGlobalInputCount, A.PsbtGlobalOutputCount, A.PsbtGlobalTransactionModifiableFlags, A.PsbtGlobalSilentPaymentGlobalECDHShare, A.PsbtGlobalSilentPaymentGlobalDLEQProof, A.PsbtGlobalPSBTVersionNumber, A.PsbtGlobalProprietaryUseType, A.PsbtGlobalUnknow]);
    _inheritMany(A.PsbtInputData, [A.PsbtInputNonWitnessUtxo, A.PsbtInputWitnessUtxo, A.PsbtInputDataSignature, A.PsbtInputSigHash, A.PsbtInputRedeemScript, A.PsbtInputWitnessScript, A.PsbtInputBip32DerivationPath, A.PsbtInputFinalizedScriptSig, A.PsbtInputFinalizedScriptWitness, A.PsbtInputPorCommitments, A.PsbtInputRipemd160, A.PsbtInputSha256, A.PsbtInputHash160, A.PsbtInputHash256, A.PsbtInputPreviousTXID, A.PsbtInputSpentOutputIndex, A.PsbtInputSequenceNumber, A.PsbtInputRequiredTimeBasedLockTime, A.PsbtInputRequiredHeightBasedLockTime, A.PsbtInputTaprootLeafScript, A.PsbtInputTaprootKeyBip32DerivationPath, A.PsbtInputTaprootInternalKey, A.PsbtInputTaprootMerkleRoot, A.PsbtInputMuSig2ParticipantPublicKeys, A.PsbtInputMuSig2PublicNonce, A.PsbtInputSilentPaymentInputECDHShare, A.PsbtInputSilentPaymentInputDLEQProof, A.PsbtInputProprietaryUseType, A.PsbtInputUnknow]);
    _inheritMany(A.PsbtInputDataSignature, [A.PsbtInputPartialSig, A.PsbtInputTaprootKeySpendSignature, A.PsbtInputTaprootScriptSpendSignature, A.PsbtInputMuSig2ParticipantPartialSignature]);
    _inheritMany(A.PsbtOutputData, [A.PsbtOutputRedeemScript, A.PsbtOutputWitnessScript, A.PsbtOutputBip32DerivationPath, A.PsbtOutputAmount, A.PsbtOutputScript, A.PsbtOutputTaprootInternalKey, A.PsbtOutputTaprootTree, A.PsbtOutputTaprootKeyBip32DerivationPath, A.PsbtOutputMuSig2ParticipantPublicKeys, A.PsbtOutputSilentPaymentData, A.PsbtOutputSilentPaymentLabel, A.PsbtOutputBIP353DNSSECProof, A.PsbtOutputProprietaryUseType, A.PsbtOutputUnknow]);
    _inherit(A.XmrAddrEncoder, A.BlockchainAddressEncoder);
    _inheritMany(A.BipCoins, [A.Bip44Coins, A.Bip49Coins, A.Bip84Coins, A.Bip86Coins, A.Cip1852Coins, A.CustomCoins]);
    _inheritMany(A.BipCoinConfig, [A.BipBitcoinCashConf, A.BipLitecoinConf]);
    _inherit(A.SubstrateScaleCUintEncoder, A.SubstrateScaleEncoderBase);
    _inheritMany(A._CborDate, [A.CborStringDateValue, A.CborEpochFloatValue, A.CborEpochIntValue]);
    _inheritMany(A.CborString, [A.CborStringValue, A.CborIndefiniteStringValue]);
    _inheritMany(A.Curve, [A.CurveFp, A.CurveED]);
    _inheritMany(A.AbstractPoint, [A.ProjectiveECCPoint, A.EDPoint]);
    _inherit(A.RistrettoPoint, A.EDPoint);
    _inheritMany(A.CryptoException, [A.SquareRootError, A.JacobiError]);
    _inheritMany(A._Keccack, [A.Keccack, A.SHAKE]);
    _inherit(A.SHAKE256, A.SHAKE);
    _inherit(A.RIPEMD160, A._RIPEMD);
    _inherit(A.SHA512256, A.SHA512);
    _inheritMany(A.Layout, [A.SequenceLayout, A.ExternalLayout, A.CompactBytes, A.CustomLayout, A.LazyUnion, A.LazyVariantLayout, A.LEB128IntLayout, A.MapEntryLayout, A.NoneLayout, A.BaseIntiger, A.UnionDiscriminatorLayout, A.CompactIntLayout, A.OptionalLayout, A.PaddingLayout, A.RawBytesLayout, A.StructLayout, A.Union, A.VariantLayout]);
    _inheritMany(A.ExternalLayout, [A.CompactOffsetLayout, A.ExternalOffsetLayout, A.OffsetLayout]);
    _inherit(A.LEB128U32OffsetLayout, A.ExternalOffsetLayout);
    _inheritMany(A.BaseIntiger, [A.IntegerLayout, A.BigIntLayout]);
    _inherit(A.UnionLayoutDiscriminatorLayout, A.UnionDiscriminatorLayout);
    _inheritMany(A.BaseServiceResponse, [A.ServiceSuccessRespose, A.ServiceErrorResponse]);
    _inheritMany(A.TypeUrl, [A.CosmosCryptoKeysTypes, A.CCTPV1Types, A.EvmosErc20V1Types, A.IbcTypes, A.OpInitOpHostV1Types, A.BankV1beta1Types, A.CrisisV1beta1, A.DistributionV1beta1Types, A.GovV1beta1types, A.SlashingV1beta1Types, A.StakingV1beta1Types, A.VestingV1beta1Types]);
    _inherit(A.AminoJsonParserException, A.DartCosmosSdkPluginException);
    _inheritMany(A.CosmosProtocolBuffer, [A.CosmosMessage, A.Any, A.ProtobufTimestamp]);
    _inheritMany(A.CosmosMessage, [A.ServiceMessage, A.EvmosErc20V1Params, A.EvmosEthermintEVMV1ChainConfig, A.EvmosEthermintEVMV1Log, A.EvmosEthermintEVMV1Params, A.EvmosEthermintEVMV1MsgEthereumTxResponse, A.EvmosEthermintFeeMarketV1Params, A.EvmosInflationV1ExponentialCalculation, A.EvmosInflationV1InflationDistribution, A.EvmosInflationV1Params, A.EvmosRevenueV1Params, A.EvmosVestingV1Period, A.AnyMessage, A.IbcClientHeight, A.Input, A.Output, A.Coin, A.CommissionRates, A.Description, A.Fee, A.SignDoc]);
    _inheritMany(A.ServiceMessage, [A._UnknownAminoService_ServiceMessage_AminoMessage, A.CCTPV1Service, A.EvmosService, A.IbcService, A.OpInitService, A.CosmosSDKService]);
    _inherit(A.UnknownAminoService, A._UnknownAminoService_ServiceMessage_AminoMessage);
    _inheritMany(A.CCTPV1Service, [A._CCTPV1MsgAcceptOwner_CCTPV1Service_AminoMessage, A._CCTPV1MsgDepositForBurn_CCTPV1Service_AminoMessage, A._CCTPV1MsgDepositForBurnWithCaller_CCTPV1Service_AminoMessage, A._CCTPV1MsgDisableAttester_CCTPV1Service_AminoMessage, A._CCTPV1MsgEnableAttester_CCTPV1Service_AminoMessage, A._CCTPV1MsgLinkTokenPair_CCTPV1Service_AminoMessage, A._CCTPV1MsgSetMaxBurnAmountPerMessage_CCTPV1Service_AminoMessage, A._CCTPV1MsgReceiveMessage_CCTPV1Service_AminoMessage, A._CCTPV1MsgPauseBurningAndMinting_CCTPV1Service_AminoMessage, A._CCTPV1MsgPauseSendingAndReceivingMessages_CCTPV1Service_AminoMessage, A._CCTPV1MsgAddRemoteTokenMessenger_CCTPV1Service_AminoMessage, A._CCTPV1MsgRemoveRemoteTokenMessenger_CCTPV1Service_AminoMessage, A._CCTPV1MsgReplaceDepositForBurn_CCTPV1Service_AminoMessage, A._CCTPV1MsgReplaceMessage_CCTPV1Service_AminoMessage, A._CCTPV1MsgSendMessage_CCTPV1Service_AminoMessage, A._CCTPV1MsgSendMessageWithCaller_CCTPV1Service_AminoMessage, A._CCTPV1MsgUnlinkTokenPair_CCTPV1Service_AminoMessage, A._CCTPV1MsgUnpauseBurningAndMinting_CCTPV1Service_AminoMessage, A._CCTPV1MsgUnpauseSendingAndReceivingMessages_CCTPV1Service_AminoMessage, A._CCTPV1MsgUpdateAttesterManager_CCTPV1Service_AminoMessage, A._CCTPV1MsgUpdateMaxMessageBodySize_CCTPV1Service_AminoMessage, A._CCTPV1MsgUpdateOwner_CCTPV1Service_AminoMessage, A._CCTPV1MsgUpdatePauser_CCTPV1Service_AminoMessage, A._CCTPV1MsgUpdateSignatureThreshold_CCTPV1Service_AminoMessage, A._CCTPV1MsgUpdateTokenController_CCTPV1Service_AminoMessage]);
    _inherit(A.CCTPV1MsgAcceptOwner, A._CCTPV1MsgAcceptOwner_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgDepositForBurn, A._CCTPV1MsgDepositForBurn_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgDepositForBurnWithCaller, A._CCTPV1MsgDepositForBurnWithCaller_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgDisableAttester, A._CCTPV1MsgDisableAttester_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgEnableAttester, A._CCTPV1MsgEnableAttester_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgLinkTokenPair, A._CCTPV1MsgLinkTokenPair_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgSetMaxBurnAmountPerMessage, A._CCTPV1MsgSetMaxBurnAmountPerMessage_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgReceiveMessage, A._CCTPV1MsgReceiveMessage_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgPauseBurningAndMinting, A._CCTPV1MsgPauseBurningAndMinting_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgPauseSendingAndReceivingMessages, A._CCTPV1MsgPauseSendingAndReceivingMessages_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgAddRemoteTokenMessenger, A._CCTPV1MsgAddRemoteTokenMessenger_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgRemoveRemoteTokenMessenger, A._CCTPV1MsgRemoveRemoteTokenMessenger_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgReplaceDepositForBurn, A._CCTPV1MsgReplaceDepositForBurn_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgReplaceMessage, A._CCTPV1MsgReplaceMessage_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgSendMessage, A._CCTPV1MsgSendMessage_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgSendMessageWithCaller, A._CCTPV1MsgSendMessageWithCaller_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgUnlinkTokenPair, A._CCTPV1MsgUnlinkTokenPair_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgUnpauseBurningAndMinting, A._CCTPV1MsgUnpauseBurningAndMinting_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgUnpauseSendingAndReceivingMessages, A._CCTPV1MsgUnpauseSendingAndReceivingMessages_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgUpdateAttesterManager, A._CCTPV1MsgUpdateAttesterManager_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgUpdateMaxMessageBodySize, A._CCTPV1MsgUpdateMaxMessageBodySize_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgUpdateOwner, A._CCTPV1MsgUpdateOwner_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgUpdatePauser, A._CCTPV1MsgUpdatePauser_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgUpdateSignatureThreshold, A._CCTPV1MsgUpdateSignatureThreshold_CCTPV1Service_AminoMessage);
    _inherit(A.CCTPV1MsgUpdateTokenController, A._CCTPV1MsgUpdateTokenController_CCTPV1Service_AminoMessage);
    _inheritMany(A.EvmosService, [A._EvmosErc20V1MsgConvertCoin_EvmosService_AminoMessage, A._EvmosErc20V1MsgConvertERC20_EvmosService_AminoMessage, A._EvmosErc20V1MsgRegisterERC20_EvmosService_AminoMessage, A._EvmosErc20V1MsgToggleConversion_EvmosService_AminoMessage, A._EvmosErc20V1MsgUpdateParams_EvmosService_AminoMessage, A._EvmosEthermintEVMV1MsgEthereumTx_EvmosService_AminoMessage, A._EvmosEthermintEVMV1MsgUpdateParams_EvmosService_AminoMessage, A._EvmosEthermintFeeMarketV1MsgUpdateParams_EvmosService_AminoMessage, A._EvmosInflationV1MsgUpdateParams_EvmosService_AminoMessage, A._EvmosRevenueV1MsgCancelRevenue_EvmosService_AminoMessage, A._EvmosRevenueV1MsgRegisterRevenue_EvmosService_AminoMessage, A._EvmosRevenueV1MsgUpdateParams_EvmosService_AminoMessage, A._EvmosRevenueV1MsgUpdateRevenue_EvmosService_AminoMessage, A._EvmosVestingV2MsgConvertVestingAccount_EvmosService_AminoMessage, A._EvmosVestingV2MsgCreateClawbackVestingAccount_EvmosService_AminoMessage, A._EvmosVestingV2MsgFundVestingAccount_EvmosService_AminoMessage, A._EvmosVestingV2MsgClawback_EvmosService_AminoMessage, A._EvmosVestingV2MsgUpdateVestingFunder_EvmosService_AminoMessage]);
    _inherit(A.EvmosErc20V1MsgConvertCoin, A._EvmosErc20V1MsgConvertCoin_EvmosService_AminoMessage);
    _inherit(A.EvmosErc20V1MsgConvertERC20, A._EvmosErc20V1MsgConvertERC20_EvmosService_AminoMessage);
    _inherit(A.EvmosErc20V1MsgRegisterERC20, A._EvmosErc20V1MsgRegisterERC20_EvmosService_AminoMessage);
    _inherit(A.EvmosErc20V1MsgToggleConversion, A._EvmosErc20V1MsgToggleConversion_EvmosService_AminoMessage);
    _inherit(A.EvmosErc20V1MsgUpdateParams, A._EvmosErc20V1MsgUpdateParams_EvmosService_AminoMessage);
    _inherit(A.EvmosEthermintEVMV1MsgEthereumTx, A._EvmosEthermintEVMV1MsgEthereumTx_EvmosService_AminoMessage);
    _inherit(A.EvmosEthermintEVMV1MsgUpdateParams, A._EvmosEthermintEVMV1MsgUpdateParams_EvmosService_AminoMessage);
    _inherit(A.EvmosEthermintFeeMarketV1MsgUpdateParams, A._EvmosEthermintFeeMarketV1MsgUpdateParams_EvmosService_AminoMessage);
    _inherit(A.EvmosInflationV1MsgUpdateParams, A._EvmosInflationV1MsgUpdateParams_EvmosService_AminoMessage);
    _inherit(A.EvmosRevenueV1MsgCancelRevenue, A._EvmosRevenueV1MsgCancelRevenue_EvmosService_AminoMessage);
    _inherit(A.EvmosRevenueV1MsgRegisterRevenue, A._EvmosRevenueV1MsgRegisterRevenue_EvmosService_AminoMessage);
    _inherit(A.EvmosRevenueV1MsgUpdateParams, A._EvmosRevenueV1MsgUpdateParams_EvmosService_AminoMessage);
    _inherit(A.EvmosRevenueV1MsgUpdateRevenue, A._EvmosRevenueV1MsgUpdateRevenue_EvmosService_AminoMessage);
    _inherit(A.EvmosVestingV2MsgConvertVestingAccount, A._EvmosVestingV2MsgConvertVestingAccount_EvmosService_AminoMessage);
    _inherit(A.EvmosVestingV2MsgCreateClawbackVestingAccount, A._EvmosVestingV2MsgCreateClawbackVestingAccount_EvmosService_AminoMessage);
    _inherit(A.EvmosVestingV2MsgFundVestingAccount, A._EvmosVestingV2MsgFundVestingAccount_EvmosService_AminoMessage);
    _inherit(A.EvmosVestingV2MsgClawback, A._EvmosVestingV2MsgClawback_EvmosService_AminoMessage);
    _inherit(A.EvmosVestingV2MsgUpdateVestingFunder, A._EvmosVestingV2MsgUpdateVestingFunder_EvmosService_AminoMessage);
    _inherit(A.AnyJsonMessage, A.AnyMessage);
    _inherit(A._MsgTransfer_IbcService_AminoMessage, A.IbcService);
    _inherit(A.MsgTransfer, A._MsgTransfer_IbcService_AminoMessage);
    _inherit(A._OpInitOpHostV1MsgInitiateTokenDeposit_OpInitService_AminoMessage, A.OpInitService);
    _inherit(A.OpInitOpHostV1MsgInitiateTokenDeposit, A._OpInitOpHostV1MsgInitiateTokenDeposit_OpInitService_AminoMessage);
    _inheritMany(A.CosmosSDKService, [A.BankV1Beta1Service, A.CrisisV1Beta1Service, A.DistributionV1Beta1Service, A.GovV1Beta1Service, A.SlashingV1Beta1Service, A.StakingV1Beta1Service, A.VestingV1Beta1Service]);
    _inheritMany(A.BankV1Beta1Service, [A._MsgMultiSend_BankV1Beta1Service_AminoMessage, A._MsgSend_BankV1Beta1Service_AminoMessage]);
    _inherit(A.MsgMultiSend, A._MsgMultiSend_BankV1Beta1Service_AminoMessage);
    _inherit(A.MsgSend, A._MsgSend_BankV1Beta1Service_AminoMessage);
    _inherit(A._MsgVerifyInvariant_CrisisV1Beta1Service_AminoMessage, A.CrisisV1Beta1Service);
    _inherit(A.MsgVerifyInvariant, A._MsgVerifyInvariant_CrisisV1Beta1Service_AminoMessage);
    _inheritMany(A.DistributionV1Beta1Service, [A._DistributionMsgFundCommunityPool_DistributionV1Beta1Service_AminoMessage, A._DistributionMsgSetWithdrawAddress_DistributionV1Beta1Service_AminoMessage, A._DistributionMsgWithdrawDelegatorReward_DistributionV1Beta1Service_AminoMessage, A._DistributionMsgWithdrawValidatorCommission_DistributionV1Beta1Service_AminoMessage]);
    _inherit(A.DistributionMsgFundCommunityPool, A._DistributionMsgFundCommunityPool_DistributionV1Beta1Service_AminoMessage);
    _inherit(A.DistributionMsgSetWithdrawAddress, A._DistributionMsgSetWithdrawAddress_DistributionV1Beta1Service_AminoMessage);
    _inherit(A.DistributionMsgWithdrawDelegatorReward, A._DistributionMsgWithdrawDelegatorReward_DistributionV1Beta1Service_AminoMessage);
    _inherit(A.DistributionMsgWithdrawValidatorCommission, A._DistributionMsgWithdrawValidatorCommission_DistributionV1Beta1Service_AminoMessage);
    _inheritMany(A.GovV1Beta1Service, [A._GovMsgDeposit_GovV1Beta1Service_AminoMessage, A._GovMsgVote_GovV1Beta1Service_AminoMessage]);
    _inherit(A.GovMsgDeposit, A._GovMsgDeposit_GovV1Beta1Service_AminoMessage);
    _inherit(A.GovMsgVote, A._GovMsgVote_GovV1Beta1Service_AminoMessage);
    _inherit(A._SlashingMsgUnjail_SlashingV1Beta1Service_AminoMessage, A.SlashingV1Beta1Service);
    _inherit(A.SlashingMsgUnjail, A._SlashingMsgUnjail_SlashingV1Beta1Service_AminoMessage);
    _inheritMany(A.StakingV1Beta1Service, [A._MsgBeginRedelegate_StakingV1Beta1Service_AminoMessage, A._MsgCreateValidator_StakingV1Beta1Service_AminoMessage, A._MsgDelegate_StakingV1Beta1Service_AminoMessage, A._MsgEditValidator_StakingV1Beta1Service_AminoMessage, A._MsgUndelegate_StakingV1Beta1Service_AminoMessage]);
    _inherit(A.MsgBeginRedelegate, A._MsgBeginRedelegate_StakingV1Beta1Service_AminoMessage);
    _inherit(A.MsgCreateValidator, A._MsgCreateValidator_StakingV1Beta1Service_AminoMessage);
    _inherit(A.MsgDelegate, A._MsgDelegate_StakingV1Beta1Service_AminoMessage);
    _inherit(A.MsgEditValidator, A._MsgEditValidator_StakingV1Beta1Service_AminoMessage);
    _inherit(A.MsgUndelegate, A._MsgUndelegate_StakingV1Beta1Service_AminoMessage);
    _inherit(A._MsgCreateVestingAccount_VestingV1Beta1Service_AminoMessage, A.VestingV1Beta1Service);
    _inherit(A.MsgCreateVestingAccount, A._MsgCreateVestingAccount_VestingV1Beta1Service_AminoMessage);
    _inheritMany(A.BaseClient, [A.RetryClient, A.BrowserClient]);
    _inherit(A.ByteStream, A.StreamView);
    _inheritMany(A.BaseRequest, [A.Request, A.StreamedRequest]);
    _inheritMany(A.BaseResponse, [A.Response, A.StreamedResponse]);
    _inherit(A.StreamedResponseV2, A.StreamedResponse);
    _inherit(A.CaseInsensitiveMap, A.CanonicalizedMap);
    _inheritMany(A.BcsSerialization, [A.BcsVariantSerialization, A.AptosModuleId, A.AptosStructTag, A.AptosScript, A.MoveType, A.AptosTransactionEntryFunction, A.AptosMultisig, A.AptosRawTransaction, A.AptosAnyTransaction]);
    _inheritMany(A.BcsVariantSerialization, [A.MoveArgument, A.AptosTypeTag, A.AptosTransactionPayload, A.AptosMultisigTransactionPayload]);
    _inheritMany(A.MoveArgument, [A.MoveAddress, A.MoveU8, A.MoveU16, A.MoveU32, A.MoveU64, A.MoveU128, A.MoveU256, A.MoveBool, A.MoveU8Vector, A.MoveSerialized]);
    _inheritMany(A.MoveAddress, [A.AptosAddress, A.SuiAddress]);
    _inheritMany(A.AptosTypeTag, [A.AptosTypeTagNumeric, A.AptosTypeTagBoolean, A.AptosTypeTagAddress, A.AptosTypeTagSigner, A.AptosTypeTagGeneric, A.AptosTypeTagVector, A.AptosTypeTagStruct]);
    _inheritMany(A.AptosTransactionPayload, [A.AptosTransactionPayloadScript, A.AptosTransactionPayloadEntryFunction, A.AptosTransactionPayloadMultisig]);
    _inherit(A.AptosEntryFunctionArguments, A.MoveType);
    _inherit(A.AptosTransactionArgumentBytes, A.AptosEntryFunctionArguments);
    _inherit(A.AptosMultisigTransactionPayloadEntryFunction, A.AptosMultisigTransactionPayload);
    _inheritMany(A.AptosAnyTransaction, [A.AptosMultiAgentTransaction, A.AptosSimpleTransaction]);
    _inheritMany(A.SolidityAddress, [A.ETHAddress, A.TronAddress]);
    _inherit(A.EthereumRequestDetails, A.BaseServiceRequestParams);
    _inherit(A.EthereumRequest, A.BaseServiceRequest);
    _inherit(A.EthereumRequestDynamic, A.EthereumRequest);
    _inherit(A.EthereumProvider, A.BaseProvider);
    _inheritMany(A.TronProtocolBufferImpl, [A.TronBaseContract, A.AccountId, A.Authority, A.TronKey, A.Permission, A.AssetIssueContractFrozenSupply, A.ReceiveDescription, A.SpendDescription, A.SmartContract, A.SmartContractABI, A.SmartContractABIEntry, A.SmartContractBABIEntryParam, A.Any0, A.Transaction, A.TransactionContract, A.TransactionRaw, A.VoteWitnessContractVote]);
    _inheritMany(A.TronBaseContract, [A.AccountCreateContract, A.AccountPermissionUpdateContract, A.AccountUpdateContract, A.SetAccountIdContract, A.AssetIssueContract, A.ParticipateAssetIssueContract, A.TransferAssetContract, A.UnfreezeAssetContract, A.UpdateAssetContract, A.CancelAllUnfreezeV2Contract, A.DelegateResourceContract, A.FreezeBalanceContract, A.FreezeBalanceV2Contract, A.TransferContract, A.UnDelegateResourceContract, A.UnfreezeBalanceContract, A.UnfreezeBalanceV2Contract, A.WithdrawBalanceContract, A.WithdrawExpireUnfreezeContract, A.ExchangeCreateContract, A.ExchangeInjectContract, A.ExchangeTransactionContract, A.ExchangeWithdrawContract, A.MarketCancelOrderContract, A.MarketSellAssetContract, A.ProposalApproveContract, A.ProposalCreateContract, A.ProposalDeleteContract, A.ShieldedTransferContract, A.ClearABIContract, A.CreateSmartContract, A.TriggerSmartContract, A.UpdateEnergyLimitContract, A.UpdateSettingContract, A.UpdateBrokerageContract, A.VoteAssetContract, A.VoteWitnessContract, A.WitnessUpdateContract, A.WitnessCreateContract]);
    _inherit(A.WebHTTPServiceWorker, A.HTTPServiceWorker);
    _inheritMany(A.HTTPWorkerResponse, [A.HTTPWorkerResponseSuccess, A.HTTPWorkerResponseError]);
    _inherit(A._ProviderAuthenticated_Object_CborSerializable_Equatable, A._ProviderAuthenticated_Object_CborSerializable);
    _inherit(A.ProviderAuthenticated, A._ProviderAuthenticated_Object_CborSerializable_Equatable);
    _inheritMany(A.ProviderAuthenticated, [A.BasicProviderAuthenticated, A.DigestProviderAuthenticated]);
    _inheritMany(A._Client, [A._CachedClientImpl, A.__DigestAuthClient__Client__DigestAuthClientImpl]);
    _inheritMany(A._CachedClientImpl, [A._CachedClient, A.__DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl]);
    _inherit(A._DigestAuthClient, A.__DigestAuthClient__Client__DigestAuthClientImpl);
    _inherit(A._DigestAuthCachedClient, A.__DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl);
    _inherit(A.StreamValue, A.StreamListenable);
    _inherit(A._APPImage_Object_CborSerializable_Equatable, A._APPImage_Object_CborSerializable);
    _inherit(A.APPImage, A._APPImage_Object_CborSerializable_Equatable);
    _inherit(A._AddressDerivationIndex_Object_CborSerializable_Equatable, A._AddressDerivationIndex_Object_CborSerializable);
    _inherit(A.AddressDerivationIndex, A._AddressDerivationIndex_Object_CborSerializable_Equatable);
    _inheritMany(A.AddressDerivationIndex, [A.Bip32AddressIndex, A.MultiSigAddressIndex, A.SubstrateAddressIndex]);
    _inherit(A._APIProvider_Object_Equatable_CborSerializable, A._APIProvider_Object_Equatable);
    _inherit(A.APIProvider, A._APIProvider_Object_Equatable_CborSerializable);
    _inherit(A.EthereumAPIProvider, A.APIProvider);
    _inherit(A.HTTPService, A._HTTPService_Object_HttpImpl);
    _inherit(A.BaseSocketService, A.BaseServiceProtocol);
    _inherit(A.WebSocketService, A.BaseSocketService);
    _inherit(A.EthereumHTTPService, A.HTTPService);
    _inherit(A.EthereumWebsocketService, A.WebSocketService);
    _inherit(A.CosmosFeeToken, A._CosmosFeeToken_Object_CborSerializable);
    _inherit(A._TonAccountContext_Object_CborSerializable_Equatable, A._TonAccountContext_Object_CborSerializable);
    _inherit(A.TonAccountContext, A._TonAccountContext_Object_CborSerializable_Equatable);
    _inheritMany(A.TonAccountContext, [A.TonAccountLegacyContext, A.TonAccountSubWalletContext, A.TonAccountV5CustomContext, A.TonAccountV5SubWalletContext]);
    _inherit(A._CoingeckoCoin_Object_CborSerializable_JsonSerialization, A._CoingeckoCoin_Object_CborSerializable);
    _inherit(A.CoingeckoCoin, A._CoingeckoCoin_Object_CborSerializable_JsonSerialization);
    _inherit(A._APPToken_Object_CborSerializable_Equatable, A._APPToken_Object_CborSerializable);
    _inherit(A.APPToken, A._APPToken_Object_CborSerializable_Equatable);
    _inherit(A.Token, A.APPToken);
    _inherit(A.Web3RequestException, A._Web3RequestException_Object_Equatable);
    _inherit(A.Web3MessageCore, A._Web3MessageCore_Object_CborSerializable);
    _inheritMany(A.Web3MessageCore, [A.Web3ChainMessage, A.Web3ExceptionMessage, A.Web3GlobalResponseMessage, A.Web3WalletResponseMessage, A.Web3WalletRequestParams]);
    _inherit(A.Web3EncryptedMessage, A._Web3EncryptedMessage_Object_CborSerializable);
    _inheritMany(A.Web3RequestMethods, [A.Web3NetworkRequestMethods, A.Web3GlobalRequestMethods]);
    _inherit(A.Web3APPData, A._Web3APPData_Object_CborSerializable);
    _inherit(A._Web3ChainAccount_Object_CborSerializable_Equatable, A._Web3ChainAccount_Object_CborSerializable);
    _inherit(A.Web3ChainAccount, A._Web3ChainAccount_Object_CborSerializable_Equatable);
    _inherit(A._Web3ChainIdnetifier_Object_CborSerializable_Equatable, A._Web3ChainIdnetifier_Object_CborSerializable);
    _inherit(A.Web3ChainIdnetifier, A._Web3ChainIdnetifier_Object_CborSerializable_Equatable);
    _inheritMany(A.Web3ChainIdnetifier, [A.Web3ChainDefaultIdnetifier, A.Web3AptosChainIdnetifier, A.Web3CosmoshainIdnetifier, A.Web3EthereumChainIdnetifier, A.Web3SubstrateChainIdnetifier, A.Web3TronChainIdnetifier]);
    _inherit(A.Web3ChainAuthenticated, A._Web3ChainAuthenticated_Object_CborSerializable);
    _inheritMany(A.Web3WalletRequestParams, [A.Web3GlobalRequestParams, A.Web3RequestParams]);
    _inheritMany(A.Web3NetworkRequestMethods, [A.Web3AptosRequestMethods, A.Web3BitcoinRequestMethods, A.Web3CosmosRequestMethods, A.Web3EthereumRequestMethods, A.Web3SolanaRequestMethods, A.Web3StellarRequestMethods, A.Web3SubstrateRequestMethods, A.Web3SuiRequestMethods, A.Web3TonRequestMethods, A.Web3TronRequestMethods]);
    _inheritMany(A.Web3RequestParams, [A.Web3AptosRequestParam, A.Web3BitcoinRequestParam, A.Web3CosmosRequestParam, A.Web3EthereumRequestParam, A.Web3SolanaRequestParam, A.Web3StellarRequestParam, A.Web3SubstrateRequestParam, A.Web3SuiRequestParam, A.Web3TonRequestParam, A.Web3TronRequestParam]);
    _inheritMany(A.Web3AptosRequestParam, [A.Web3AptosSignMessage, A.Web3AptosSendTransaction]);
    _inheritMany(A.Web3ChainAccount, [A.Web3AptosChainAccount, A.Web3BitcoinChainAccount, A.Web3CosmosChainAccount, A.Web3EthereumChainAccount, A.Web3SolanaChainAccount, A.Web3StellarChainAccount, A.Web3SubstrateChainAccount, A.Web3SuiChainAccount, A.Web3TonChainAccount, A.Web3TronChainAccount]);
    _inheritMany(A.Web3ChainAuthenticated, [A.Web3AptosChainAuthenticated, A.Web3BitcoinChainAuthenticated, A.Web3CosmosChainAuthenticated, A.Web3EthereumChainAuthenticated, A.Web3SolanaChainAuthenticated, A.Web3StellarChainAuthenticated, A.Web3SubstrateChainAuthenticated, A.Web3SuiChainAuthenticated, A.Web3TonChainAuthenticated, A.Web3TronChainAuthenticated]);
    _inherit(A.Web3BitcoinSendTransactionOutput, A._Web3BitcoinSendTransactionOutput_Object_CborSerializable);
    _inheritMany(A.Web3BitcoinRequestParam, [A.Web3BitcoinSendTransaction, A.Web3BitcoinSignMessage, A.Web3BitcoinSignTransaction]);
    _inheritMany(A.Web3CosmosRequestParam, [A.Web3CosmosAddNewChain, A.Web3CosmosSignMessage, A.Web3CosmosSignTransaction]);
    _inheritMany(A.Web3CosmosSignTransactionResponse, [A.Web3CosmosSignTransactionDirectSignResponse, A.Web3CosmosSignTransactionAminoSignResponse]);
    _inherit(A.Web3CosmosSignTransactionParams, A._Web3CosmosSignTransactionParams_Object_CborSerializable);
    _inheritMany(A.Web3CosmosSignTransactionParams, [A.Web3CosmosSignTransactionDirectParams, A.Web3CosmosSignTransactionAminoParams]);
    _inheritMany(A.Web3EthereumRequestParam, [A.Web3EthereumAddNewChain, A.Web3EthreumPersonalSign, A.Web3EthreumSendTransaction, A.Web3EthreumTypdedData]);
    _inherit(A.Web3EthreumTransactionAccessList, A._Web3EthreumTransactionAccessList_Object_CborSerializable);
    _inheritMany(A.Web3GlobalRequestParams, [A.Web3ConnectApplication, A.Web3DisconnectApplication, A.Web3SwitchApplicationNetwork]);
    _inherit(A.Web3SolanaSignParams, A._Web3SolanaSignParams_Object_CborSerializable);
    _inheritMany(A.Web3SolanaSignParams, [A.Web3SolanaSignInParams, A.Web3SolanaSignMessageParams]);
    _inheritMany(A.Web3SolanaRequestParam, [A.Web3SolanaSignMessage, A.Web3SolanaSendTransaction]);
    _inherit(A.Web3SolanaSendTransactionOptions, A._Web3SolanaSendTransactionOptions_Object_CborSerializable);
    _inherit(A.Web3SolanaSendTransactionData, A._Web3SolanaSendTransactionData_Object_CborSerializable);
    _inheritMany(A.Web3StellarRequestParam, [A.Web3StellarSignMessage, A.Web3StellarSendTransaction]);
    _inheritMany(A.Web3SubstrateRequestParam, [A.Web3SubstrateAddNewChain, A.Web3SubstrateSignMessage, A.Web3SubstrateSendTransaction]);
    _inheritMany(A.Web3SuiRequestParam, [A.Web3SuiSignMessage, A.Web3SuiSignOrExecuteTransaction]);
    _inheritMany(A.Web3SuiTransactionCallArg, [A.Web3SuiTransactionObject, A.Web3SuiTransactionPureArg, A.Web3SuiTransactionUnresolvedPurePureArg, A.Web3SuiTransactionUnresolvedObject]);
    _inheritMany(A.Web3SuiTransactionObjectArg, [A.Web3SuiTransactionImmOrOwnedObject, A.Web3SuiTransactionSharedObject, A.Web3SuiTransactionReceiving]);
    _inheritMany(A.Web3SuiTransactionArgument, [A.Web3SuiTransactionArgumentGasCoin, A.Web3SuiTransactionArgumentInput, A.Web3SuiTransactionArgumentResult, A.Web3SuiTransactionArgumentNestedResult]);
    _inheritMany(A.Web3SuiTransactionCommand, [A.Web3SuiTransactionCommandMoveCall, A.Web3SuiTransactionCommandTransferObjects, A.Web3SuiTransactionCommandSplitCoins, A.Web3SuiTransactionCommandMergeCoins, A.Web3SuiTransactionCommandPublish, A.Web3SuiTransactionCommandMakeMoveVec, A.Web3SuiTransactionCommandUpgrade]);
    _inheritMany(A.Web3SuiTransactionExpiration, [A.Web3SuiTransactionExpirationNone, A.Web3SuiTransactionExpirationEpoch]);
    _inheritMany(A.Web3TonRequestParam, [A.Web3TonSignMessage, A.Web3TonSendTransaction]);
    _inherit(A.Web3TonTransactionMessage, A._Web3TonTransactionMessage_Object_CborSerializable);
    _inheritMany(A.Web3TronRequestParam, [A.Web3TronSignMessageV2, A.Web3TronSendTransaction]);
    _inherit(A.InternalStyle, A.Style);
    _inheritMany(A.InternalStyle, [A.PosixStyle, A.UrlStyle, A.WindowsStyle]);
    _inheritMany(A.BaseSubstrateAddress, [A.SubstrateAddress, A.SubstrateEthereumAddress]);
    _inheritMany(A.SubstrateSerialization, [A.SubstrateMetadata, A.ScaleTypeDef, A.Si1Field, A.Si1Type, A.Si1TypeParameter, A.Si1Variant, A.StorageHasherV11, A.StorageEntryModifierV9, A.ExtrinsicMetadata, A.PalletCallMetadata, A.PalletConstantMetadata, A.PalletErrorMetadata, A.PalletEventMetadata, A.PalletMetadata, A.PalletStorageMetadata, A.PortableRegistryV14, A.PortableTypeV14, A.SignedExtensionMetadata, A.StorageEntryTypeV14, A.StorageEntryMetadataV14, A.CustomMetadata15, A.CustomValueMetadata15, A.OuterEnums15, A.RuntimeApiMetadata, A.RuntimeApiMethodMetadata, A.RuntimeApiMethodParamMetadataV15, A.SubstrateVariantSerialization, A.PalletAssociatedTypeMetadata, A.VersionedMetadata]);
    _inherit(A.MetadataException, A.DartSubstratePluginException);
    _inheritMany(A.SubstrateMetadata, [A.UnsupportedMetadata, A._MetadataV14_SubstrateMetadata_LatestMetadataInterface, A._MetadataV15_SubstrateMetadata_LatestMetadataInterface, A._MetadataV16_SubstrateMetadata_LatestMetadataInterface]);
    _inheritMany(A.ScaleTypeDef, [A.Si0TypeDefPrimitive, A.Si1TypeDef]);
    _inheritMany(A.Si1TypeDef, [A.Si1TypeDefHistoricMetaCompat, A.Si1TypeDefArray, A.Si1TypeDefBitSequence, A.Si1TypeDefCompact, A.Si1TypeDefComposite, A.Si1TypeDefSequence, A.Si1TypeDefTuple, A.Si1TypeDefVariant]);
    _inherit(A.Si1TypeDefPrimitive, A.Si0TypeDefPrimitive);
    _inherit(A.StorageHasherV14, A.StorageHasherV11);
    _inherit(A.StorageEntryModifierV14, A.StorageEntryModifierV9);
    _inheritMany(A.ExtrinsicMetadata, [A.ExtrinsicMetadataV14, A.ExtrinsicMetadataV15, A.ExtrinsicMetadataV16]);
    _inherit(A.MetadataV14, A._MetadataV14_SubstrateMetadata_LatestMetadataInterface);
    _inheritMany(A.PalletCallMetadata, [A.PalletCallMetadataV14, A.PalletCallMetadataV16]);
    _inheritMany(A.PalletConstantMetadata, [A.PalletConstantMetadataV14, A.PalletConstantMetadataV16]);
    _inheritMany(A.PalletErrorMetadata, [A.PalletErrorMetadataV14, A.PalletErrorMetadataV16]);
    _inheritMany(A.PalletEventMetadata, [A.PalletEventMetadataV14, A.PalletEventMetadataV16]);
    _inheritMany(A.PalletMetadata, [A.PalletMetadataV14, A.PalletMetadataV15, A.PalletMetadataV16]);
    _inheritMany(A.PalletStorageMetadata, [A.PalletStorageMetadataV14, A.PalletStorageMetadataV16]);
    _inheritMany(A.SignedExtensionMetadata, [A.SignedExtensionMetadataV14, A.TransactionExtensionMetadata]);
    _inheritMany(A.StorageEntryTypeV14, [A.StorageEntryTypeV14Map, A.StorageEntryTypeV14Plain]);
    _inherit(A.MetadataV15, A._MetadataV15_SubstrateMetadata_LatestMetadataInterface);
    _inheritMany(A.RuntimeApiMetadata, [A.RuntimeApiMetadataV15, A.RuntimeApiMetadataV16]);
    _inheritMany(A.RuntimeApiMethodMetadata, [A.RuntimeApiMethodMetadataV15, A.RuntimeApiMethodMetadataV16]);
    _inheritMany(A.SubstrateVariantSerialization, [A.MetadataDeprecationInfo, A.DeprecationStatus]);
    _inheritMany(A.MetadataDeprecationInfo, [A.MetadataVariantsDeprecated, A.MetadataNotDeprecated, A.MetadataItemDeprecated]);
    _inheritMany(A.DeprecationStatus, [A.MetadataStatusDeprecated, A.MetadataStatusNotDeprecated, A.MetadataStatusDeprecatedWithoutNote]);
    _inherit(A.MetadataV16, A._MetadataV16_SubstrateMetadata_LatestMetadataInterface);
    _inherit(A.StorageEntryMetadataV16, A.StorageEntryMetadataV14);
    _inherit(A.FileLocation, A.SourceLocationMixin);
    _inheritMany(A.SourceSpanMixin, [A._FileSpan, A.SourceSpanBase]);
    _inherit(A.SourceSpanFormatException, A.SourceSpanException);
    _inherit(A.SourceSpanWithContext, A.SourceSpanBase);
    _inheritMany(A.StellarAddress, [A.StellarAccountAddress, A.StellarContractAddress, A.StellarMuxedAddress]);
    _inherit(A.StellarAddressException, A.DartStellarPlugingException);
    _inherit(A.StringScannerException, A.SourceSpanFormatException);
    _inheritMany(A.TonDartPluginException, [A.BocException, A.TonContractException, A.KeyException, A.DictException]);
    _inherit(A.TonContract, A._TonContract_Object_ContractProvider);
    _inherit(A.WalletContract, A.TonContract);
    _inherit(A._VersionedWalletContract_WalletContract_VerionedProviderImpl, A.WalletContract);
    _inherit(A.VersionedWalletContract, A._VersionedWalletContract_WalletContract_VerionedProviderImpl);
    _inheritMany(A.VersionedWalletContract, [A.WalletV1R1, A.WalletV1R2, A.WalletV1R3, A.WalletV2R1, A.WalletV2R2, A.WalletV3R1, A.WalletV3R2, A.WalletV4, A.WalletV5R1]);
    _inherit(A.TonSerialization, A._TonSerialization_Object_JsonSerialization);
    _inheritMany(A.TonSerialization, [A.V5R1Context, A.StateInit]);
    _inheritMany(A.V5R1Context, [A.V5R1CustomContext, A.V5R1ClientContext]);
    _inheritMany(A.VersionedWalletState, [A.NoneSubWalletVersionedWalletState, A.SubWalletVersionedWalletState, A.V5VersionedWalletState]);
    _inheritMany(A.WalletStandardChainWeb3State, [A.AptosWeb3State, A.BitcoinWeb3State, A.CosmosWeb3State, A.EthereumWeb3State, A.SolanaWeb3State, A.StellarWeb3State, A.SubstrateWeb3State, A.SuiWeb3State, A.TonWeb3State, A.TronWeb3State]);
    _inheritMany(A.JSWalletStandardNetworkHandler, [A.JSAptosHandler, A.JSBitcoinHandler, A.JSCosmosHandler, A.JSEthereumHandler, A.JSSolanaHandler, A.JSStellarHandler, A.JSSubstrateHandler, A.JSSuiHandler, A.JSTonHandler, A.JSTronHandler]);
    _inherit(A.JSWalletStateAccount, A._JSWalletStateAccount_Object_Equatable);
    _inherit(A.JSWalletHandler, A._JSWalletHandler_Object_JSWalletStandardHandler);
    _inherit(A.JSExtentionWallet, A.JSWalletHandler);
    _mixin(A.UnmodifiableListBase, A.UnmodifiableListMixin);
    _mixin(A.__CastListBase__CastIterableBase_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, A.ListBase);
    _mixin(A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, A.FixedLengthListMixin);
    _mixin(A._AsyncStreamController, A._AsyncStreamControllerDispatch);
    _mixin(A._SyncStreamController, A._SyncStreamControllerDispatch);
    _mixin(A.UnmodifiableMapBase, A._UnmodifiableMapMixin);
    _mixin(A._UnmodifiableMapView_MapView__UnmodifiableMapMixin, A._UnmodifiableMapMixin);
    _mixin(A._PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl, A.PsbtSignerImpl);
    _mixin(A._PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl_PsbtInputImpl, A.PsbtInputImpl);
    _mixin(A._PsbtBuilder_PsbtBuilderImpl_PsbtSignerImpl_PsbtInputImpl_PsbtOutputImpl, A.PsbtOutputImpl);
    _mixin(A._UnknownAminoService_ServiceMessage_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgAcceptOwner_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgDepositForBurn_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgDepositForBurnWithCaller_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgDisableAttester_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgEnableAttester_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgLinkTokenPair_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgSetMaxBurnAmountPerMessage_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgReceiveMessage_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgPauseBurningAndMinting_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgPauseSendingAndReceivingMessages_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgAddRemoteTokenMessenger_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgRemoveRemoteTokenMessenger_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgReplaceDepositForBurn_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgReplaceMessage_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgSendMessage_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgSendMessageWithCaller_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgUnlinkTokenPair_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgUnpauseBurningAndMinting_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgUnpauseSendingAndReceivingMessages_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgUpdateAttesterManager_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgUpdateMaxMessageBodySize_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgUpdateOwner_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgUpdatePauser_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgUpdateSignatureThreshold_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._CCTPV1MsgUpdateTokenController_CCTPV1Service_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosErc20V1MsgConvertCoin_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosErc20V1MsgConvertERC20_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosErc20V1MsgRegisterERC20_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosErc20V1MsgToggleConversion_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosErc20V1MsgUpdateParams_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosEthermintEVMV1MsgEthereumTx_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosEthermintEVMV1MsgUpdateParams_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosEthermintFeeMarketV1MsgUpdateParams_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosInflationV1MsgUpdateParams_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosRevenueV1MsgCancelRevenue_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosRevenueV1MsgRegisterRevenue_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosRevenueV1MsgUpdateParams_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosRevenueV1MsgUpdateRevenue_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosVestingV2MsgConvertVestingAccount_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosVestingV2MsgCreateClawbackVestingAccount_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosVestingV2MsgFundVestingAccount_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosVestingV2MsgClawback_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._EvmosVestingV2MsgUpdateVestingFunder_EvmosService_AminoMessage, A.AminoMessage);
    _mixin(A._MsgTransfer_IbcService_AminoMessage, A.AminoMessage);
    _mixin(A._OpInitOpHostV1MsgInitiateTokenDeposit_OpInitService_AminoMessage, A.AminoMessage);
    _mixin(A._MsgMultiSend_BankV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._MsgSend_BankV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._MsgVerifyInvariant_CrisisV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._DistributionMsgFundCommunityPool_DistributionV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._DistributionMsgSetWithdrawAddress_DistributionV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._DistributionMsgWithdrawDelegatorReward_DistributionV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._DistributionMsgWithdrawValidatorCommission_DistributionV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._GovMsgDeposit_GovV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._GovMsgVote_GovV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._SlashingMsgUnjail_SlashingV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._MsgBeginRedelegate_StakingV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._MsgCreateValidator_StakingV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._MsgDelegate_StakingV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._MsgEditValidator_StakingV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._MsgUndelegate_StakingV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._MsgCreateVestingAccount_VestingV1Beta1Service_AminoMessage, A.AminoMessage);
    _mixin(A._ProviderAuthenticated_Object_CborSerializable, A.CborSerializable);
    _mixin(A._ProviderAuthenticated_Object_CborSerializable_Equatable, A.Equatable);
    _mixinHard(A.__DigestAuthCachedClient__CachedClientImpl__DigestAuthClientImpl, A._DigestAuthClientImpl);
    _mixinHard(A.__DigestAuthClient__Client__DigestAuthClientImpl, A._DigestAuthClientImpl);
    _mixin(A._APPImage_Object_CborSerializable, A.CborSerializable);
    _mixin(A._APPImage_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._AddressDerivationIndex_Object_CborSerializable, A.CborSerializable);
    _mixin(A._AddressDerivationIndex_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._APIProvider_Object_Equatable, A.Equatable);
    _mixin(A._APIProvider_Object_Equatable_CborSerializable, A.CborSerializable);
    _mixin(A._HTTPService_Object_HttpImpl, A.HttpImpl);
    _mixin(A._CosmosFeeToken_Object_CborSerializable, A.CborSerializable);
    _mixin(A._TonAccountContext_Object_CborSerializable, A.CborSerializable);
    _mixin(A._TonAccountContext_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._CoingeckoCoin_Object_CborSerializable, A.CborSerializable);
    _mixin(A._CoingeckoCoin_Object_CborSerializable_JsonSerialization, A.JsonSerialization);
    _mixin(A._APPToken_Object_CborSerializable, A.CborSerializable);
    _mixin(A._APPToken_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._Web3RequestException_Object_Equatable, A.Equatable);
    _mixin(A._Web3EncryptedMessage_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3MessageCore_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3APPData_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3ChainAccount_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3ChainAccount_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._Web3ChainAuthenticated_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3ChainIdnetifier_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3ChainIdnetifier_Object_CborSerializable_Equatable, A.Equatable);
    _mixin(A._Web3BitcoinSendTransactionOutput_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3CosmosSignTransactionParams_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3EthreumTransactionAccessList_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3SolanaSignParams_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3SolanaSendTransactionData_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3SolanaSendTransactionOptions_Object_CborSerializable, A.CborSerializable);
    _mixin(A._Web3TonTransactionMessage_Object_CborSerializable, A.CborSerializable);
    _mixin(A._MetadataV14_SubstrateMetadata_LatestMetadataInterface, A.LatestMetadataInterface);
    _mixin(A._MetadataV15_SubstrateMetadata_LatestMetadataInterface, A.LatestMetadataInterface);
    _mixin(A._MetadataV16_SubstrateMetadata_LatestMetadataInterface, A.LatestMetadataInterface);
    _mixin(A._TonContract_Object_ContractProvider, A.ContractProvider);
    _mixin(A._VersionedWalletContract_WalletContract_VerionedProviderImpl, A.VerionedProviderImpl);
    _mixin(A._TonSerialization_Object_JsonSerialization, A.JsonSerialization0);
    _mixin(A._JSWalletStateAccount_Object_Equatable, A.Equatable);
    _mixin(A._JSWalletHandler_Object_JSWalletStandardHandler, A.JSWalletStandardHandler);
  })();
  var init = {
    G: typeof self != "undefined" ? self : globalThis,
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List", Object: "Object", Map: "Map"},
    mangledNames: {},
    types: ["0&()", "~()", "bool(String,@)", "Layout<Map<String,@>>({property:String?})", "String(String)", "SubstrateEd25519AddrEncoder([@])", "P2PKHAddrEncoder([@])", "P2SHAddrEncoder([@])", "SuiAddress(String)", "EthAddrEncoder([@])", "Null()", "AtomAddrEncoder([@])", "SubstrateSecp256k1AddrEncoder([@])", "SubstrateSr25519AddrEncoder([@])", "BlockchainAddressEncoder([@])", "AminoJsonParserException(bool)", "Map<String,@>(@)", "String(List<int>)", "Web3SuiTransactionArgument(Map<String,@>)", "List<int>(List<int>)", "Null(@)", "Coin(Map<String,@>)", "Map<String,@>(Coin)", "~(@)", "ETHAddress()", "P2WPKHAddrEncoder([@])", "~(JSObject)", "int(int)", "int(Bip32KeyIndex)", "Bip32KeyIndex(int)", "bool(int)", "List<int>(@)", "@(@)", "~(Object?)", "ResourceCode(int)", "Web3ChainDefaultIdnetifier(CborTagValue<@>)", "Map<String,@>(Web3SuiTransactionArgument)", "~(Object,StackTrace)", "bool(String)", "bool(PsbtKeyPair)", "Null(Object,StackTrace)", "AdaByronIcarusAddrEncoder([@])", "XrpAddrEncoder([@])", "AdaShelleyAddrEncoder([@])", "Map<String,@>(Map<String,@>)", "Object?(Object?)", "Web3BitcoinChainAccount(CborTagValue<@>)", "BasedUtxoNetwork(Web3BitcoinChainAccount)", "bool(ProtocolBufferDecoderResult0<@>)", "SmartContractBABIEntryParam(@)", "Map<String,@>()", "String(Match)", "bool(PsbtInputData)", "List<int>(int)", "bool(List<int>)", "bool(_Highlight)", "PsbtKeyPair()", "PsbtKey(PsbtKeyPair)", "XlmAddrEncoder([@])", "int(int,int)", "int()", "String(CborStringValue)", "Future<Response>({client!RetryClient,headers!Map<String,String>?,uri!Uri})", "Null(JSObject)", "~(~())", "AptosAddress(Map<String,@>)", "Map<String,@>(AptosTypeTag)", "AptosTypeTag(Map<String,@>)", "Web3SuiTransactionExpiration(Map<String,@>)", "SignedExtensionMetadataV14(@)", "Map<String,@>(Si1Field)", "Si1Field(@)", "bool(String,List<int>)", "Cell()", "bool(List<PsbtKeyPair>)", "String(@)", "~(String)", "String(int)", "~(Object[StackTrace?])", "List<int>()", "bool(Web3TronRequestMethods)", "bool(Web3TonRequestMethods)", "bool(SuiApiExecuteTransactionRequestType)", "List<int>(String,List<int>)", "String(SuiAddress)", "List<String>(List<@>)", "bool(PsbtGlobalTypes)", "Web3SuiTransactionCallArg(Map<String,@>)", "~(JSObject,JSObject)", "Web3RequestException()", "bool(Web3SuiRequestMethods)", "bool(Web3SubstrateRequestMethods)", "bool(Web3StellarRequestMethods)", "int(Object?)", "AtomEthSecp256k1AddrEncoder([@])", "AtomNist256P1AddrEncoder([@])", "AtomEd25519AddrEncoder([@])", "bool(Web3SolanaRequestMethods)", "bool(Web3GlobalRequestMethods)", "ErgoP2PKHAddrEncoder([@])", "bool(Web3EthereumRequestMethods)", "CosmosFeeToken(CborTagValue<@>)", "CoingeckoCoin(String)", "CosmosFeeToken(Map<String,@>)", "~(Object?,Object?)", "XmrAddrEncoder([@])", "bool(Web3CosmosRequestMethods)", "CborTagValue<@>(Web3BitcoinChainAccount)", "NeoAddrEncoder([@])", "OkexAddrEncoder([@])", "bool(Commitment)", "bool(Object?,Object?)", "SolAddrEncoder([@])", "bool(JSClientType)", "TrxAddrEncoder([@])", "Future<JSObject>()", "TonAddrEncoder([@])", "bool(Web3BitcoinRequestMethods)", "bool(Web3AptosRequestMethods)", "bool(Web3ChainAuthenticated<Web3ChainAccount<@>>)", "Web3APPData(CborTagValue<@>)", "@()", "IntegerBalance(BigInt)", "Eip712TypedData()", "bool(NetworkType)", "P2TRAddrEncoder([@])", "AdaByronLegacyAddrEncoder([@])", "Web3SuiTransactionCommand(Map<String,@>)", "~(List<int>)", "bool(BaseResponse)", "bool(ProviderAuthType)", "EIP712Legacy()", "~(String,@)", "bool(BitcoinOpcode)", "BaseSubstrateAddress()", "bool(CborBase64Types)", "bool(PsbtInputTypes)", "bool(MapEntry<String,@>)", "String(MapEntry<String,@>)", "bool(Web3EthereumChainIdnetifier)", "int(ProtocolBufferDecoderResult0<@>)", "bool(Web3CosmoshainIdnetifier)", "List<int>(String)", "bool(PsbtOutputTypes)", "VoteWitnessContractVote(@)", "Map<String,@>(SmartContractBABIEntryParam)", "int(int,Layout<@>)", "int(String?)", "List<PsbtOutputData>(List<PsbtOutputData>)", "bool(SmartContractAbiStateMutabilityType)", "bool(SmartContractAbiEntryType)", "ReceiveDescription(@)", "SpendDescription(@)", "@(String)", "bool(TransactionContractType)", "ResourceCode()", "bool(ResourceCode)", "bool(Web3BitcoinChainAccount)", "TronAddress(List<int>)", "Map<String,@>(EvmosVestingV1Period)", "PermissionType()", "bool(PermissionType)", "int(@,@)", "bool(AccountType)", "Permission(List<int>)", "bool(ETHTransactionType)", "List<PsbtInputData>(List<PsbtInputData>)", "List<int>?()", "MapEntry<@,@>(@)", "Map<String,@>(SignedExtensionMetadataV14)", "PalletConstantMetadataV14(@)", "bool(ProtocolBufferDecoderResult<@>)", "int(ProtocolBufferDecoderResult<@>)", "bool(AminoTypes)", "int(String,String)", "Object?(@)", "Any(Map<String,@>)", "bool(String,String)", "int(String)", "Null(String,String[Object?])", "bool(Object)", "String(MapEntry<String,String>)", "MediaType()", "bool(BitcoinAddressType)", "GovVoteOption(String)", "bool(AptosTypeTags)", "bool(GovVoteOption)", "CosmosBaseAddress(String)", "bool(AptosTransactionPayloads)", "MoveArgument<@>(AptosScriptArguments<@>)", "MoveArgument<@>(Map<String,@>)", "Map<String,@>(MoveArgument<@>)", "AptosTransactionArgumentBytes(List<int>)", "List<int>(AptosEntryFunctionArguments<@>)", "bool(AptosMultisigTransactionPayloads)", "AptosMultisigTransactionPayload(Map<String,@>)", "Map<String,@>(Output)", "Map<String,@>(AptosAddress)", "bool(MoveArgumentType)", "MapEntry<@,Object?>(@,@)", "bool(@,Object?)", "bool(@)", "bool(EthereumMethods)", "Map<String,@>(Input)", "bool(EIP712Version)", "int(EIP712Version)", "Eip712TypeDetails(@)", "MapEntry<String,List<Map<String,@>>>(String,List<Eip712TypeDetails>)", "Map<String,@>(Eip712TypeDetails)", "Eip712TypedDataV1(@)", "Map<String,@>(Eip712TypedDataV1)", "AccountType(int)", "Permission(@)", "Input(Map<String,@>)", "Map<String,@>(Permission)", "Output(Map<String,@>)", "AccountId(List<int>)", "TronKey(@)", "TronKey(List<int>)", "Map<String,@>(TronKey)", "bool(OpInitOpHostV1Types)", "~(String,String?)", "AssetIssueContractFrozenSupply(@)", "AssetIssueContractFrozenSupply(List<int>)", "Map<String,@>(AssetIssueContractFrozenSupply)", "Future<~>()", "bool(EvmosErc20V1Types)", "String(BigInt)", "BigInt(@)", "Map<String,@>(EvmosEthermintEVMV1Log)", "EvmosEthermintEVMV1Log(@)", "MapEntry<BigInt,BigInt>(@,@)", "MapEntry<String,String>(BigInt,BigInt)", "bool(TypeUrl)", "Map<String,@>(AminoMessage<CosmosMessage>)", "Map<String,@>(SpendDescription)", "Map<String,@>(ReceiveDescription)", "~(String,int?)", "SmartContractAbiEntryType()", "~(String,int)", "SmartContractAbiStateMutabilityType()", "SmartContractABI(List<int>)", "SmartContractABIEntry(@)", "SmartContractABIEntry(List<int>)", "Map<String,@>(SmartContractABIEntry)", "bool(CosmosKeysAlgs)", "String(Layout<@>)", "TransactionContract(@)", "Authority(@)", "TransactionContract(List<int>)", "Authority(List<int>)", "Map<String,@>(Authority)", "Map<String,@>(TransactionContract)", "TronAddress(String)", "TronAddress(@)", "String(TronAddress)", "int?()", "Map<String,@>(VoteWitnessContractVote)", "~(int,LazyVariantModel<@>)", "~(int,Layout<@>)", "bool(WalletEventTypes)", "int(bool)", "bool(WalletEventTarget)", "double(int)", "List<int>(CborBytesValue)", "~(JSObject?,HttpWorkerMode)", "Future<_WorkerConnection>()", "CborObject(@)", "@(@,String)", "bool(SubstrateCoins)", "bool(MoneroCoins)", "bool(HTTPResponseType)", "bool(DigestAuthHeadersAlg)", "bool(DigestAuthQop)", "bool(Cip1852Coins)", "bool(ContentType)", "ContentType()", "bool(CustomCoins)", "bool(BipProposal)", "bool(AddressDerivationType)", "bool(int?)", "Bip32KeyIndex(int?)", "bool(SeedTypes)", "bool(Bip86Coins)", "ProviderAuthenticated(CborTagValue<@>)", "bool(ApiRequest)", "Future<HTTPCallerResponse>()", "Future<Null>()", "Future<PlatformWebScoket>()", "Future<Map<String,@>>()", "bool(ServiceProtocol)", "Map<String,@>?(String)", "EthereumSubscribeResult()", "bool(AptosChainType)", "bool(SolanaNetworkType)", "bool(StellarChainType)", "bool(SuiChainType)", "bool(Bip84Coins)", "bool(TonAccountContextType)", "APPImage(CborTagValue<@>)", "CoingeckoCoin(CborTagValue<@>)", "Web3APPData(CborObject)", "bool(Bip49Coins)", "bool(Web3MessageTypes)", "SuiAddrEncoder([@])", "Web3ChainAuthenticated<Web3ChainAccount<@>>(CborTagValue<@>)", "NetworkType(CborBytesValue)", "SuiSecp256r1AddrEncoder([@])", "AptosAddress(CborStringValue)", "List<AptosAddress>(CborListValue<@>)", "AptosAddress(String)", "CborStringValue(AptosAddress)", "Web3AptosChainAccount(CborTagValue<@>)", "Web3AptosChainIdnetifier(CborTagValue<@>)", "SuiSecp256k1AddrEncoder([@])", "ZilAddrEncoder([@])", "XtzAddrEncoder([@])", "Web3BitcoinSendTransactionOutput(CborTagValue<@>)", "NearAddrEncoder([@])", "CborTagValue<@>(Web3BitcoinSendTransactionOutput)", "Map<String,@>(TxInput)", "NanoAddrEncoder([@])", "InjAddrEncoder([@])", "IcxAddrEncoder([@])", "OneAddrEncoder([@])", "CborTagValue<@>(CosmosFeeToken)", "Web3CosmosChainAccount(CborTagValue<@>)", "Web3CosmoshainIdnetifier(CborTagValue<@>)", "FilSecp256k1AddrEncoder([@])", "Web3EthereumChainAccount(CborTagValue<@>)", "EthereumAPIProvider(CborTagValue<@>)", "Web3EthereumChainIdnetifier(CborTagValue<@>)", "EosAddrEncoder([@])", "NetworkType(CborStringValue)", "EgldAddrEncoder([@])", "Web3SolanaSignMessageParams(CborTagValue<@>)", "Web3SolanaSignInParams(CborTagValue<@>)", "CborTagValue<@>(Web3SolanaSignParams)", "Web3SolanaSendTransactionOptions(CborTagValue<@>)", "bool(SolanaSignAndSendAllTransactionMode)", "Web3SolanaSendTransactionData(CborTagValue<@>)", "SolanaSignAndSendAllTransactionMode(CborStringValue)", "CborTagValue<@>(Web3SolanaSendTransactionData)", "Web3SolanaChainAccount(CborTagValue<@>)", "~(@,@)", "Web3StellarChainAccount(CborTagValue<@>)", "bool(Object?)", "CborStringValue(String)", "Web3SubstrateChainAccount(CborTagValue<@>)", "Web3SubstrateChainIdnetifier(CborTagValue<@>)", "AvaxXChainAddrEncoder([@])", "bool(Web3SuiTransactionCallArgs)", "String(Web3SuiTransactionCallArgs)", "Web3SuiTransactionCallArg?(Map<String,@>)", "bool(Web3SuiObjectArgs)", "Web3SuiTransactionObjectArg?(Map<String,@>)", "String(Web3SuiObjectArgs)", "Map<String,@>(TxOutput)", "bool(Web3SuiArguments)", "Map<String,@>(TxWitnessInput)", "List<String>?(String)", "AvaxPChainAddrEncoder([@])", "bool(BasedUtxoNetwork)", "Future<@>()", "AptosSingleKeyEd25519AddrEncoder([@])", "AptosSingleKeySecp256k1AddrEncoder([@])", "Map<String,@>(Web3SuiTransactionCallArg)", "Map<String,@>(Web3SuiTransactionCommand)", "bool(Web3SuiTransactionExpirations)", "String(Web3SuiTransactionExpirations)", "Web3SuiTransactionImmOrOwnedObject(Map<String,@>)", "Map<String,@>(Web3SuiTransactionImmOrOwnedObject)", "AptosAddrEncoder([@])", "AlgoAddrEncoder([@])", "String?(Map<@,@>)", "bool(Web3SuiTransactionCommands)", "String(Web3SuiTransactionCommands)", "Web3SuiTransactionCommands(String)", "SuiApiTransactionBlockResponseOptions(CborStringValue)", "SuiApiExecuteTransactionRequestType(CborStringValue)", "bool(Bip44Coins)", "Web3SuiChainAccount(CborTagValue<@>)", "int(XlmAddrTypes)", "Web3TonTransactionMessage(CborTagValue<@>)", "CborTagValue<@>(Web3TonTransactionMessage)", "Web3TonChainAccount(CborTagValue<@>)", "bool(XlmAddrTypes)", "Web3TronChainAccount(CborTagValue<@>)", "Web3TronChainIdnetifier(CborTagValue<@>)", "String(MapEntry<int,String>)", "String(String?)", "bool(PrimitiveTypes)", "String(PrimitiveTypes)", "Si1TypeParameter(@)", "Map<String,@>(Si1TypeParameter)", "bool(Si1TypeDefsIndexesConst)", "Map<String,@>(PsbtTapTree)", "Map<String,@>(PsbtOutputData)", "Si1Variant(@)", "Map<String,@>(Si1Variant)", "bool(StorageHasherV11Options)", "List<Map<String,@>>(List<PsbtOutputData>)", "PsbtKeyPair(PsbtOutputData)", "List<PsbtKeyPair>(List<PsbtOutputData>)", "Map<String,@>(PalletMetadataV14)", "List<PsbtOutputData>(List<PsbtKeyPair>)", "StorageEntryMetadataV14(@)", "Map<String,@>(StorageEntryMetadataV14)", "MapEntry<int,PortableTypeV14>(@)", "Map<String,@>(PortableTypeV14)", "StorageHasherV14(@)", "Map<String,@>(StorageHasherV14)", "RuntimeApiMetadataV15(@)", "Map<String,@>(PalletMetadataV15)", "Map<String,@>(RuntimeApiMetadataV15)", "RuntimeApiMethodMetadataV15(@)", "RuntimeApiMethodParamMetadataV15(@)", "Map<String,@>(RuntimeApiMethodParamMetadataV15)", "bool(DeprecationInfoTypes)", "String(DeprecationInfoTypes)", "MapEntry<int,DeprecationStatus>(@,@)", "MapEntry<int,Map<String,@>>(int,DeprecationStatus)", "bool(DeprecationStatusTypes)", "String(DeprecationStatusTypes)", "TransactionExtensionMetadata(@)", "MapEntry<int,List<int>>(@,@)", "Map<String,@>(TransactionExtensionMetadata)", "MapEntry<int,PalletMetadataV16>(@)", "RuntimeApiMetadataV16(@)", "Map<String,@>(PalletMetadataV16)", "Map<String,@>(RuntimeApiMetadataV16)", "PalletConstantMetadataV16(@)", "PalletAssociatedTypeMetadata(@)", "Map<String,@>(PalletAssociatedTypeMetadata)", "RuntimeApiMethodMetadataV16(@)", "StorageEntryMetadataV16(@)", "Map<String,@>(StorageEntryMetadataV16)", "bool(StorageEntryModifierV9)", "String?()", "int(_Line)", "bool(PsbtOutputData)", "Object(_Line)", "Object(_Highlight)", "int(_Highlight,_Highlight)", "List<_Line>(MapEntry<Object,List<_Highlight>>)", "SourceSpanWithContext()", "bool(CellType)", "String(Cell)", "CellTopoloigicalSort(String)", "int(@)", "List<int>(Pruned)", "int(Pruned)", "bool(TonChain)", "bool(WalletVersion)", "BigInt(BigInt)", "~(SimpleLibrary,Builder)", "Dictionary<BigInt,SimpleLibrary>(Map<BigInt,SimpleLibrary>)", "MapEntry<String,Map<String,@>>(BigInt,SimpleLibrary)", "JSWalletStateAccount<AptosAddress,Web3AptosChainAccount,JSObject>(Web3AptosChainAccount)", "bool(Web3AptosChainAccount)", "bool(Web3AptosChainIdnetifier)", "JSWalletStateAccount<BitcoinBaseAddress,Web3BitcoinChainAccount,JSObject>(Web3BitcoinChainAccount)", "PsbtKey(PsbtOutputData)", "Script()", "Web3BitcoinSendTransactionOutput(Object)", "Map<String,@>(Object)", "String(ECPublic)", "bool(JSWalletStateAccount<CosmosBaseAddress,Web3CosmosChainAccount,JSObject>)", "JSObject(JSWalletStateAccount<CosmosBaseAddress,Web3CosmosChainAccount,JSObject>)", "JSWalletStateAccount<CosmosBaseAddress,Web3CosmosChainAccount,JSObject>(Web3CosmosChainAccount)", "bool(Web3CosmosChainAccount)", "Null(~())", "JSWalletStateAccount<ETHAddress,Web3EthereumChainAccount,JSObject>(Web3EthereumChainAccount)", "bool(Web3EthereumChainAccount)", "~(EthereumSubscribeResult)", "PsbtKeyPair(PsbtInputData)", "List<PsbtKeyPair>(List<PsbtInputData>)", "PsbtKey(PsbtGlobalData)", "Map<String,@>(PsbtInputData)", "bool(JSEventType)", "bool(JSWalletResponseType)", "List<Map<String,@>>(List<PsbtInputData>)", "bool(PageMessageType)", "bool(PageRequestType)", "JSWalletStateAccount<SolAddress,Web3SolanaChainAccount,JSObject>(Web3SolanaChainAccount)", "bool(Web3SolanaChainAccount)", "List<PsbtInputData>(List<PsbtKeyPair>)", "SolAddress()", "SolanaWeb3TransactionSignResponse(Map<String,@>)", "JSObject(SolanaWeb3TransactionSignResponse)", "SolanaWeb3TransactionSendResponse(Map<String,@>)", "JSObject(SolanaWeb3TransactionSendResponse)", "Web3SolanaSignMessageResponse(Map<String,@>)", "JSWalletStateAccount<StellarAddress,Web3StellarChainAccount,JSObject>(Web3StellarChainAccount)", "bool(Web3StellarChainAccount)", "PsbtKey(PsbtInputData)", "JSObject(Web3SubstrateChainIdnetifier)", "JSWalletStateAccount<BaseSubstrateAddress,Web3SubstrateChainAccount,JSObject>(Web3SubstrateChainAccount)", "bool(Web3SubstrateChainAccount)", "bool(PsbtVersion)", "JSWalletStateAccount<SuiAddress,Web3SuiChainAccount,JSObject>(Web3SuiChainAccount)", "bool(Web3SuiChainAccount)", "JSWalletStateAccount<TonAddress,Web3TonChainAccount,JSObject>(Web3TonChainAccount)", "bool(Web3TonChainAccount)", "TonAddress()", "_Future<@>?()", "bool(Web3TronChainIdnetifier)", "JSWalletStateAccount<TronAddress,Web3TronChainAccount,JSObject>(Web3TronChainAccount)", "bool(Web3TronChainAccount)", "Transaction()", "~(JSObject,JSClientType?)", "Future<Web3MessageCore>({client!JSClientType,request!Web3WalletRequestParams<@>})", "JSObject(@)", "Future<WalletStandardChainWeb3State<@,Web3ChainAccount<@>,JSObject,Web3ChainIdnetifier>>(JSWalletStandardNetworkHandler<@,Web3ChainAccount<@>,JSObject,Web3ChainIdnetifier,WalletStandardChainWeb3State<@,Web3ChainAccount<@>,JSObject,Web3ChainIdnetifier>>)", "List<JSObject>(WalletStandardChainWeb3State<@,Web3ChainAccount<@>,JSObject,Web3ChainIdnetifier>)", "List<JSObject>(List<JSObject>)", "List<Web3ChainIdnetifier>(WalletStandardChainWeb3State<@,Web3ChainAccount<@>,JSObject,Web3ChainIdnetifier>)", "List<Web3ChainIdnetifier>(List<Web3ChainIdnetifier>)", "String(Web3ChainIdnetifier)", "bool(JSObject,JSObject,JavaScriptFunction)", "~(int,@)", "~(JSObject?,JSObject)", "Future<JSObject?>()", "bool(JSObject?,JSObject?,JavaScriptFunction?)", "Null(WalletEvent?)", "0&(@)", "String(JSNetworkEventType)", "Null(@,StackTrace)", "List<int>(Bip32KeyIndex)", "bool(TxInput)", "Map<String,@>(PsbtGlobalData)", "0^(0^,0^)<num>", "PsbtGlobalData(PsbtKeyPair)", "PsbtInputData(PsbtKeyPair)", "PsbtOutputData(PsbtKeyPair)", "PsbtKeyPair(PsbtGlobalData)", "bool(PsbtGlobalData)", "bool(String,List<int>[Bech32Encodings])", "EvmosErc20V1Params(Map<String,@>)", "EvmosInflationV1ExponentialCalculation(Map<String,@>)", "EvmosInflationV1InflationDistribution(Map<String,@>)", "EvmosInflationV1Params(Map<String,@>)", "EvmosRevenueV1Params(Map<String,@>)", "EvmosVestingV1Period(Map<String,@>)", "IbcClientHeight(Map<String,@>)", "Coin(List<int>)", "ProtobufTimestamp(String)", "bool(Object,StackTrace)", "Duration(int)", "~(String,String)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti"),
    rttc: {
      "2;": (t1, t2) => o => o instanceof A._Record_2 && t1._is(o._0) && t2._is(o._1)
    }
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"JavaScriptFunction":"LegacyJavaScriptObject","PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"],"JSIndexable":["1"]},"JSBool":{"bool":[],"TrustedGetRuntimeType":[]},"JSNull":{"Null":[],"TrustedGetRuntimeType":[]},"JavaScriptObject":{"JSObject":[]},"LegacyJavaScriptObject":{"JSObject":[]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"JSObject":[],"Iterable":["1"],"JSIndexable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[],"Comparable":["num"]},"JSInt":{"double":[],"int":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSNumNotInt":{"double":[],"num":[],"Comparable":["num"],"TrustedGetRuntimeType":[]},"JSString":{"String":[],"Comparable":["String"],"Pattern":[],"JSIndexable":["@"],"TrustedGetRuntimeType":[]},"CastStream":{"Stream":["2"],"Stream.T":"2"},"CastStreamSubscription":{"StreamSubscription":["2"]},"_CastIterableBase":{"Iterable":["2"]},"CastIterator":{"Iterator":["2"]},"CastIterable":{"_CastIterableBase":["1","2"],"Iterable":["2"],"Iterable.E":"2"},"_EfficientLengthCastIterable":{"CastIterable":["1","2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_CastListBase":{"ListBase":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"]},"CastList":{"_CastListBase":["1","2"],"ListBase":["2"],"List":["2"],"_CastIterableBase":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListBase.E":"2","Iterable.E":"2"},"CastMap":{"MapBase":["3","4"],"Map":["3","4"],"MapBase.K":"3","MapBase.V":"4"},"LateError":{"Error":[]},"CodeUnits":{"ListBase":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListBase.E":"int","UnmodifiableListMixin.E":"int"},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2","ListIterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"ExpandIterable":{"Iterable":["2"],"Iterable.E":"2"},"ExpandIterator":{"Iterator":["2"]},"TakeIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthTakeIterable":{"TakeIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"TakeIterator":{"Iterator":["1"]},"SkipIterable":{"Iterable":["1"],"Iterable.E":"1"},"EfficientLengthSkipIterable":{"SkipIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"SkipIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterator":{"Iterator":["1"]},"UnmodifiableListBase":{"ListBase":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_ListIndicesIterable":{"ListIterable":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"Iterable.E":"int","ListIterable.E":"int"},"ListMapView":{"MapBase":["int","1"],"_UnmodifiableMapMixin":["int","1"],"Map":["int","1"],"MapBase.K":"int","MapBase.V":"1","_UnmodifiableMapMixin.K":"int","_UnmodifiableMapMixin.V":"1"},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1","ListIterable.E":"1"},"_Record_2":{"_Record2":[],"_Record":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"],"_UnmodifiableMapMixin.K":"1","_UnmodifiableMapMixin.V":"2"},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_KeysOrValues":{"Iterable":["1"],"Iterable.E":"1"},"_KeysOrValuesOrElementsIterator":{"Iterator":["1"]},"GeneralConstantMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"Instantiation":{"Closure":[],"Function":[]},"Instantiation1":{"Closure":[],"Function":[]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"NullThrownFromJavaScriptException":{"Exception":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Closure":[],"Function":[]},"Closure2Args":{"Closure":[],"Function":[]},"TearOffClosure":{"Closure":[],"Function":[]},"StaticClosure":{"Closure":[],"Function":[]},"BoundClosure":{"Closure":[],"Function":[]},"RuntimeError":{"Error":[]},"JsLinkedHashMap":{"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"LinkedHashMapKeysIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"LinkedHashMapValuesIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapValueIterator":{"Iterator":["1"]},"LinkedHashMapEntriesIterable":{"EfficientLengthIterable":["MapEntry<1,2>"],"Iterable":["MapEntry<1,2>"],"Iterable.E":"MapEntry<1,2>"},"LinkedHashMapEntryIterator":{"Iterator":["MapEntry<1,2>"]},"JsIdentityLinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"JsConstantLinkedHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_Record2":{"_Record":[]},"JSSyntaxRegExp":{"RegExp":[],"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"Iterable":["RegExpMatch"],"Iterable.E":"RegExpMatch"},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"_StringAllMatchesIterator":{"Iterator":["Match"]},"NativeByteBuffer":{"JSObject":[],"ByteBuffer":[],"TrustedGetRuntimeType":[]},"NativeTypedData":{"JSObject":[],"TypedData":[]},"_UnmodifiableNativeByteBufferView":{"ByteBuffer":[]},"NativeByteData":{"ByteData":[],"JSObject":[],"TypedData":[],"TrustedGetRuntimeType":[]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"],"JSObject":[],"TypedData":[],"JSIndexable":["1"]},"NativeTypedArrayOfDouble":{"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"NativeTypedArrayOfDouble":[],"Float32List":[],"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double","FixedLengthListMixin.E":"double"},"NativeFloat64List":{"NativeTypedArrayOfDouble":[],"Float64List":[],"ListBase":["double"],"NativeTypedArray":["double"],"List":["double"],"JavaScriptIndexingBehavior":["double"],"EfficientLengthIterable":["double"],"JSObject":[],"TypedData":[],"JSIndexable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"TrustedGetRuntimeType":[],"ListBase.E":"double","FixedLengthListMixin.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"Int16List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"Int32List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"Int8List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"Uint16List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"Uint32List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"Uint8ClampedList":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"Uint8List":[],"ListBase":["int"],"NativeTypedArray":["int"],"List":["int"],"JavaScriptIndexingBehavior":["int"],"EfficientLengthIterable":["int"],"JSObject":[],"TypedData":[],"JSIndexable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"TrustedGetRuntimeType":[],"ListBase.E":"int","FixedLengthListMixin.E":"int"},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"_Future":{"Future":["1"]},"StreamController":{"EventSink":["1"]},"_TimerImpl":{"Timer":[]},"_AsyncAwaitCompleter":{"Completer":["1"]},"_SyncStarIterator":{"Iterator":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"AsyncError":{"Error":[]},"_BroadcastSubscription":{"_ControllerSubscription":["1"],"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventDispatch":["1"]},"_BroadcastStreamController":{"StreamController":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"_AsyncBroadcastStreamController":{"_BroadcastStreamController":["1"],"StreamController":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"TimeoutException":{"Exception":[]},"_Completer":{"Completer":["1"]},"_AsyncCompleter":{"_Completer":["1"],"Completer":["1"]},"_SyncCompleter":{"_Completer":["1"],"Completer":["1"]},"StreamView":{"Stream":["1"]},"_StreamController":{"StreamController":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"_AsyncStreamController":{"_AsyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"_SyncStreamController":{"_SyncStreamControllerDispatch":["1"],"_StreamController":["1"],"StreamController":["1"],"EventSink":["1"],"_StreamControllerLifecycle":["1"],"_EventDispatch":["1"]},"_ControllerStream":{"_StreamImpl":["1"],"Stream":["1"],"Stream.T":"1"},"_ControllerSubscription":{"_BufferingStreamSubscription":["1"],"StreamSubscription":["1"],"_EventDispatch":["1"]},"_StreamSinkWrapper":{"EventSink":["1"]},"_StreamControllerAddStreamState":{"_AddStreamState":["1"]},"_BufferingStreamSubscription":{"StreamSubscription":["1"],"_EventDispatch":["1"]},"_StreamImpl":{"Stream":["1"]},"_DelayedData":{"_DelayedEvent":["1"]},"_DelayedError":{"_DelayedEvent":["@"]},"_DelayedDone":{"_DelayedEvent":["@"]},"_DoneStreamSubscription":{"StreamSubscription":["1"]},"_EmptyStream":{"Stream":["1"],"Stream.T":"1"},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_HashMap":{"MapBase":["1","2"],"Map":["1","2"]},"_IdentityHashMap":{"_HashMap":["1","2"],"MapBase":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_HashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"_HashMapKeyIterator":{"Iterator":["1"]},"_LinkedCustomHashMap":{"JsLinkedHashMap":["1","2"],"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"_LinkedHashSet":{"_SetBase":["1"],"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"ListBase":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"Map":["1","2"]},"UnmodifiableMapBase":{"MapBase":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_MapBaseValueIterable":{"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"_MapBaseValueIterator":{"Iterator":["2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"],"_UnmodifiableMapMixin.K":"1","_UnmodifiableMapMixin.V":"2"},"SetBase":{"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_SetBase":{"SetBase":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"Encoding":{"Codec":["String","List<int>"]},"_JsonMap":{"MapBase":["String","@"],"Map":["String","@"],"MapBase.K":"String","MapBase.V":"@"},"_JsonMapKeyIterable":{"ListIterable":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"Iterable.E":"String","ListIterable.E":"String"},"AsciiCodec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"Base64Codec":{"Codec":["List<int>","String"],"Codec.S":"List<int>"},"JsonUnsupportedObjectError":{"Error":[]},"JsonCyclicError":{"Error":[]},"JsonCodec":{"Codec":["Object?","String"],"Codec.S":"Object?"},"Latin1Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"Utf8Codec":{"Encoding":[],"Codec":["String","List<int>"],"Codec.S":"String"},"BigInt":{"Comparable":["BigInt"]},"DateTime":{"Comparable":["DateTime"]},"double":{"num":[],"Comparable":["num"]},"Duration":{"Comparable":["Duration"]},"int":{"num":[],"Comparable":["num"]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"num":{"Comparable":["num"]},"RegExpMatch":{"Match":[]},"String":{"Comparable":["String"],"Pattern":[]},"_BigIntImpl":{"BigInt":[],"Comparable":["BigInt"]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"_Exception":{"Exception":[]},"FormatException":{"Exception":[]},"IntegerDivisionByZeroException":{"Exception":[],"Error":[]},"_StringStackTrace":{"StackTrace":[]},"Runes":{"Iterable":["int"],"Iterable.E":"int"},"RuneIterator":{"Iterator":["int"]},"StringBuffer":{"StringSink":[]},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"Uri":[]},"NullRejectionException":{"Exception":[]},"ByteData":{"TypedData":[]},"Int8List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint8ClampedList":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Int16List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint16List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Int32List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Uint32List":{"List":["int"],"EfficientLengthIterable":["int"],"TypedData":[],"Iterable":["int"]},"Float32List":{"List":["double"],"EfficientLengthIterable":["double"],"TypedData":[],"Iterable":["double"]},"Float64List":{"List":["double"],"EfficientLengthIterable":["double"],"TypedData":[],"Iterable":["double"]},"ErrorResult":{"Result":["0&"]},"ValueResult":{"Result":["1"]},"P2pkhAddressType":{"BitcoinAddressType":[]},"P2shAddressType":{"BitcoinAddressType":[]},"PubKeyAddressType":{"BitcoinAddressType":[]},"SegwitAddressType":{"BitcoinAddressType":[]},"LegacyAddress":{"BitcoinBaseAddress":[]},"P2shAddress":{"BitcoinBaseAddress":[]},"P2pkhAddress":{"BitcoinBaseAddress":[]},"P2pkAddress":{"BitcoinBaseAddress":[]},"BitcoinAddress":{"BitcoinNetworkAddress":["BitcoinNetwork"],"BitcoinNetworkAddress.T":"BitcoinNetwork"},"DogeAddress":{"BitcoinNetworkAddress":["DogecoinNetwork"],"BitcoinNetworkAddress.T":"DogecoinNetwork"},"PepeAddress":{"BitcoinNetworkAddress":["PepeNetwork"],"BitcoinNetworkAddress.T":"PepeNetwork"},"LitecoinAddress":{"BitcoinNetworkAddress":["LitecoinNetwork"],"BitcoinNetworkAddress.T":"LitecoinNetwork"},"BitcoinCashAddress":{"BitcoinNetworkAddress":["BitcoinCashNetwork"],"BitcoinNetworkAddress.T":"BitcoinCashNetwork"},"DashAddress":{"BitcoinNetworkAddress":["DashNetwork"],"BitcoinNetworkAddress.T":"DashNetwork"},"BitcoinSVAddress":{"BitcoinNetworkAddress":["BitcoinSVNetwork"],"BitcoinNetworkAddress.T":"BitcoinSVNetwork"},"ElectraProtocolAddress":{"BitcoinNetworkAddress":["ElectraProtocolNetwork"],"BitcoinNetworkAddress.T":"ElectraProtocolNetwork"},"SegwitAddress":{"BitcoinBaseAddress":[]},"P2wpkhAddress":{"BitcoinBaseAddress":[]},"P2trAddress":{"BitcoinBaseAddress":[]},"P2wshAddress":{"BitcoinBaseAddress":[]},"DartBitcoinPluginException":{"Exception":[]},"BitcoinSVNetwork":{"BasedUtxoNetwork":[]},"BitcoinNetwork":{"BasedUtxoNetwork":[]},"LitecoinNetwork":{"BasedUtxoNetwork":[]},"DashNetwork":{"BasedUtxoNetwork":[]},"DogecoinNetwork":{"BasedUtxoNetwork":[]},"BitcoinCashNetwork":{"BasedUtxoNetwork":[]},"PepeNetwork":{"BasedUtxoNetwork":[]},"ElectraProtocolNetwork":{"BasedUtxoNetwork":[]},"PsbtBuilderV0":{"PsbtBuilder":[]},"PsbtBuilderV2":{"PsbtBuilder":[]},"PsbtGlobalUnsignedTransaction":{"PsbtGlobalData":[]},"PsbtGlobalExtendedPublicKey":{"PsbtGlobalData":[]},"PsbtGlobalTransactionVersion":{"PsbtGlobalData":[]},"PsbtGlobalFallbackLocktime":{"PsbtGlobalData":[]},"PsbtGlobalInputCount":{"PsbtGlobalData":[]},"PsbtGlobalOutputCount":{"PsbtGlobalData":[]},"PsbtGlobalTransactionModifiableFlags":{"PsbtGlobalData":[]},"PsbtGlobalSilentPaymentGlobalECDHShare":{"PsbtGlobalData":[]},"PsbtGlobalSilentPaymentGlobalDLEQProof":{"PsbtGlobalData":[]},"PsbtGlobalPSBTVersionNumber":{"PsbtGlobalData":[]},"PsbtGlobalProprietaryUseType":{"PsbtGlobalData":[]},"PsbtGlobalUnknow":{"PsbtGlobalData":[]},"PsbtInputNonWitnessUtxo":{"PsbtInputData":[]},"PsbtInputWitnessUtxo":{"PsbtInputData":[]},"PsbtInputPartialSig":{"PsbtInputData":[]},"PsbtInputSigHash":{"PsbtInputData":[]},"PsbtInputRedeemScript":{"PsbtInputData":[]},"PsbtInputWitnessScript":{"PsbtInputData":[]},"PsbtInputBip32DerivationPath":{"PsbtInputData":[]},"PsbtInputFinalizedScriptSig":{"PsbtInputData":[]},"PsbtInputFinalizedScriptWitness":{"PsbtInputData":[]},"PsbtInputPorCommitments":{"PsbtInputData":[]},"PsbtInputRipemd160":{"PsbtInputData":[]},"PsbtInputSha256":{"PsbtInputData":[]},"PsbtInputHash160":{"PsbtInputData":[]},"PsbtInputHash256":{"PsbtInputData":[]},"PsbtInputPreviousTXID":{"PsbtInputData":[]},"PsbtInputSpentOutputIndex":{"PsbtInputData":[]},"PsbtInputSequenceNumber":{"PsbtInputData":[]},"PsbtInputRequiredTimeBasedLockTime":{"PsbtInputData":[]},"PsbtInputRequiredHeightBasedLockTime":{"PsbtInputData":[]},"PsbtInputTaprootKeySpendSignature":{"PsbtInputData":[]},"PsbtInputTaprootScriptSpendSignature":{"PsbtInputData":[]},"PsbtInputTaprootLeafScript":{"PsbtInputData":[]},"PsbtInputTaprootKeyBip32DerivationPath":{"PsbtInputData":[]},"PsbtInputTaprootInternalKey":{"PsbtInputData":[]},"PsbtInputTaprootMerkleRoot":{"PsbtInputData":[]},"PsbtInputMuSig2ParticipantPublicKeys":{"PsbtInputData":[]},"PsbtInputMuSig2PublicNonce":{"PsbtInputData":[]},"PsbtInputMuSig2ParticipantPartialSignature":{"PsbtInputData":[]},"PsbtInputProprietaryUseType":{"PsbtInputData":[]},"PsbtInputDataSignature":{"PsbtInputData":[]},"PsbtInputSilentPaymentInputECDHShare":{"PsbtInputData":[]},"PsbtInputSilentPaymentInputDLEQProof":{"PsbtInputData":[]},"PsbtInputUnknow":{"PsbtInputData":[]},"PsbtOutputRedeemScript":{"PsbtOutputData":[]},"PsbtOutputWitnessScript":{"PsbtOutputData":[]},"PsbtOutputBip32DerivationPath":{"PsbtOutputData":[]},"PsbtOutputAmount":{"PsbtOutputData":[]},"PsbtOutputScript":{"PsbtOutputData":[]},"PsbtOutputTaprootInternalKey":{"PsbtOutputData":[]},"PsbtOutputTaprootTree":{"PsbtOutputData":[]},"PsbtOutputTaprootKeyBip32DerivationPath":{"PsbtOutputData":[]},"PsbtOutputMuSig2ParticipantPublicKeys":{"PsbtOutputData":[]},"PsbtOutputSilentPaymentData":{"PsbtOutputData":[]},"PsbtOutputSilentPaymentLabel":{"PsbtOutputData":[]},"PsbtOutputBIP353DNSSECProof":{"PsbtOutputData":[]},"PsbtOutputProprietaryUseType":{"PsbtOutputData":[]},"PsbtOutputUnknow":{"PsbtOutputData":[]},"Base58ChecksumError":{"Exception":[]},"Bech32ChecksumError":{"Exception":[]},"AdaByronIcarusAddrEncoder":{"BlockchainAddressEncoder":[]},"AdaByronLegacyAddrEncoder":{"BlockchainAddressEncoder":[]},"AdaShelleyAddrEncoder":{"BlockchainAddressEncoder":[]},"AlgoAddrEncoder":{"BlockchainAddressEncoder":[]},"AptosSingleKeyEd25519AddrEncoder":{"BlockchainAddressEncoder":[]},"AptosSingleKeySecp256k1AddrEncoder":{"BlockchainAddressEncoder":[]},"AptosAddrEncoder":{"BlockchainAddressEncoder":[]},"AtomAddrEncoder":{"BlockchainAddressEncoder":[]},"AtomEthSecp256k1AddrEncoder":{"BlockchainAddressEncoder":[]},"AtomNist256P1AddrEncoder":{"BlockchainAddressEncoder":[]},"AtomEd25519AddrEncoder":{"BlockchainAddressEncoder":[]},"AvaxPChainAddrEncoder":{"BlockchainAddressEncoder":[]},"AvaxXChainAddrEncoder":{"BlockchainAddressEncoder":[]},"EgldAddrEncoder":{"BlockchainAddressEncoder":[]},"EosAddrEncoder":{"BlockchainAddressEncoder":[]},"ErgoP2PKHAddrEncoder":{"BlockchainAddressEncoder":[]},"EthAddrEncoder":{"BlockchainAddressEncoder":[]},"AddressConverterException":{"Exception":[]},"FilSecp256k1AddrEncoder":{"BlockchainAddressEncoder":[]},"IcxAddrEncoder":{"BlockchainAddressEncoder":[]},"InjAddrEncoder":{"BlockchainAddressEncoder":[]},"NanoAddrEncoder":{"BlockchainAddressEncoder":[]},"NearAddrEncoder":{"BlockchainAddressEncoder":[]},"NeoAddrEncoder":{"BlockchainAddressEncoder":[]},"OkexAddrEncoder":{"BlockchainAddressEncoder":[]},"OneAddrEncoder":{"BlockchainAddressEncoder":[]},"P2PKHAddrEncoder":{"BlockchainAddressEncoder":[]},"BchP2PKHAddrEncoder":{"BlockchainAddressEncoder":[]},"P2SHAddrEncoder":{"BlockchainAddressEncoder":[]},"BchP2SHAddrEncoder":{"BlockchainAddressEncoder":[]},"P2TRAddrEncoder":{"BlockchainAddressEncoder":[]},"P2WPKHAddrEncoder":{"BlockchainAddressEncoder":[]},"SolAddrEncoder":{"BlockchainAddressEncoder":[]},"SubstrateEd25519AddrEncoder":{"BlockchainAddressEncoder":[]},"SubstrateSr25519AddrEncoder":{"BlockchainAddressEncoder":[]},"SubstrateSecp256k1AddrEncoder":{"BlockchainAddressEncoder":[]},"SuiSecp256k1AddrEncoder":{"BlockchainAddressEncoder":[]},"SuiSecp256r1AddrEncoder":{"BlockchainAddressEncoder":[]},"SuiAddrEncoder":{"BlockchainAddressEncoder":[]},"TonAddrEncoder":{"BlockchainAddressEncoder":[]},"TrxAddrEncoder":{"BlockchainAddressEncoder":[]},"XlmAddrEncoder":{"BlockchainAddressEncoder":[]},"XmrAddrEncoder":{"BlockchainAddressEncoder":[]},"XrpAddrEncoder":{"BlockchainAddressEncoder":[]},"XtzAddrEncoder":{"BlockchainAddressEncoder":[]},"ZilAddrEncoder":{"BlockchainAddressEncoder":[]},"BipCoins":{"CryptoCoins":["BipCoinConfig"]},"Bip44Coins":{"CryptoCoins":["BipCoinConfig"]},"Bip49Coins":{"CryptoCoins":["BipCoinConfig"]},"Bip84Coins":{"CryptoCoins":["BipCoinConfig"]},"Bip86Coins":{"CryptoCoins":["BipCoinConfig"]},"BipBitcoinCashConf":{"BipCoinConfig":[],"CoinConfig":[]},"BipCoinConfig":{"CoinConfig":[]},"BipLitecoinConf":{"BipCoinConfig":[],"CoinConfig":[]},"Cip1852Coins":{"CryptoCoins":["BipCoinConfig"]},"CipProposal":{"BipProposal":[]},"MoneroCoinConf":{"CoinConfig":[]},"MoneroCoins":{"CryptoCoins":["MoneroCoinConf"]},"SubstrateCoinConf":{"CoinConfig":[]},"SubstrateCoins":{"CryptoCoins":["SubstrateCoinConf"]},"CborNumeric":{"CborObject":[]},"CborException":{"Exception":[]},"CborBaseUrlValue":{"CborObject":[]},"CborBigFloatValue":{"CborObject":[]},"CborBigIntValue":{"CborNumeric":[],"CborObject":[]},"CborBoleanValue":{"CborObject":[]},"CborBytesValue":{"CborObject":[]},"CborDynamicBytesValue":{"CborObject":[]},"CborTagValue":{"CborObject":[]},"CborEpochIntValue":{"CborObject":[]},"_CborDate":{"CborObject":[]},"CborStringDateValue":{"CborObject":[]},"CborEpochFloatValue":{"CborObject":[]},"CborDecimalFracValue":{"CborObject":[]},"CborFloatValue":{"CborObject":[]},"CborIntValue":{"CborNumeric":[],"CborObject":[]},"CborSafeIntValue":{"CborNumeric":[],"CborObject":[]},"CborListValue":{"CborObject":[]},"CborMapValue":{"CborObject":[]},"CborMimeValue":{"CborObject":[]},"CborNullValue":{"CborObject":[]},"CborUndefinedValue":{"CborObject":[]},"CborRegxpValue":{"CborObject":[]},"CborSetValue":{"CborObject":[]},"CborStringValue":{"CborObject":[]},"CborIndefiniteStringValue":{"CborObject":[]},"CborString":{"CborObject":[]},"CborUriValue":{"CborObject":[]},"AES":{"BlockCipher":[]},"RistrettoPoint":{"EDPoint":[]},"CryptoException":{"Exception":[]},"SquareRootError":{"Exception":[]},"JacobiError":{"Exception":[]},"BlockchainUtilsException":{"Exception":[]},"ArgumentException":{"Exception":[]},"MessageException":{"Exception":[]},"RPCError":{"Exception":[]},"SequenceLayout":{"Layout":["List<1>"],"Layout.T":"List<1>"},"CompactOffsetLayout":{"ExternalLayout":[],"Layout":["int"],"Layout.T":"int"},"CompactBytes":{"Layout":["List<int>"],"Layout.T":"List<int>"},"CustomLayout":{"Layout":["2"],"Layout.T":"2"},"LazyVariantLayout":{"Layout":["Map<String,@>"],"Layout.T":"Map<String,@>"},"LazyUnion":{"Layout":["Map<String,@>"],"Layout.T":"Map<String,@>"},"LEB128IntLayout":{"Layout":["int"],"Layout.T":"int"},"LEB128U32OffsetLayout":{"ExternalLayout":[],"Layout":["int"],"Layout.T":"int"},"MapEntryLayout":{"Layout":["MapEntry<@,@>"],"Layout.T":"MapEntry<@,@>"},"NoneLayout":{"Layout":["@"],"Layout.T":"@"},"ExternalLayout":{"Layout":["int"]},"ExternalOffsetLayout":{"ExternalLayout":[],"Layout":["int"]},"BaseIntiger":{"Layout":["1"]},"IntegerLayout":{"BaseIntiger":["int"],"Layout":["int"],"Layout.T":"int"},"BigIntLayout":{"BaseIntiger":["BigInt"],"Layout":["BigInt"],"Layout.T":"BigInt"},"UnionDiscriminatorLayout":{"Layout":["int"]},"UnionLayoutDiscriminatorLayout":{"Layout":["int"],"Layout.T":"int"},"OffsetLayout":{"ExternalLayout":[],"Layout":["int"],"Layout.T":"int"},"CompactIntLayout":{"Layout":["int"],"Layout.T":"int"},"OptionalLayout":{"Layout":["1?"],"Layout.T":"1?"},"PaddingLayout":{"Layout":["1"],"Layout.T":"1"},"RawBytesLayout":{"Layout":["List<int>"],"Layout.T":"List<int>"},"StructLayout":{"Layout":["Map<String,@>"],"Layout.T":"Map<String,@>"},"VariantLayout":{"Layout":["Map<String,@>"],"Layout.T":"Map<String,@>"},"Union":{"Layout":["Map<String,@>"],"Layout.T":"Map<String,@>"},"LayoutException":{"Exception":[]},"ServiceSuccessRespose":{"BaseServiceResponse":["1"]},"ServiceErrorResponse":{"BaseServiceResponse":["1"]},"SS58ChecksumError":{"Exception":[]},"CanonicalizedMap":{"Map":["2","3"]},"CosmosCryptoKeysTypes":{"TypeUrl":[]},"AminoJsonParserException":{"Exception":[]},"DartCosmosSdkPluginException":{"Exception":[]},"UnknownAminoService":{"AminoMessage":["CosmosMessage"],"ServiceMessage":["CosmosMessage"],"CosmosMessage":[]},"CCTPV1Service":{"ServiceMessage":["1"],"CosmosMessage":[]},"CCTPV1MsgAcceptOwner":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgDepositForBurn":{"AminoMessage":["CCTPV1MsgDepositForBurnResponse"],"ServiceMessage":["CCTPV1MsgDepositForBurnResponse"],"CosmosMessage":[]},"CCTPV1MsgDepositForBurnWithCaller":{"AminoMessage":["CCTPV1MsgDepositForBurnWithCallerResponse"],"ServiceMessage":["CCTPV1MsgDepositForBurnWithCallerResponse"],"CosmosMessage":[]},"CCTPV1MsgDisableAttester":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgEnableAttester":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgLinkTokenPair":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgSetMaxBurnAmountPerMessage":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgReceiveMessage":{"AminoMessage":["CCTPV1MsgReceiveMessageResponse"],"ServiceMessage":["CCTPV1MsgReceiveMessageResponse"],"CosmosMessage":[]},"CCTPV1MsgPauseBurningAndMinting":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgPauseSendingAndReceivingMessages":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgAddRemoteTokenMessenger":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgRemoveRemoteTokenMessenger":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgReplaceDepositForBurn":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgReplaceMessage":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgSendMessage":{"AminoMessage":["CCTPV1MsgSendMessageResponse"],"ServiceMessage":["CCTPV1MsgSendMessageResponse"],"CosmosMessage":[]},"CCTPV1MsgSendMessageWithCaller":{"AminoMessage":["CCTPV1MsgSendMessageWithCallerResponse"],"ServiceMessage":["CCTPV1MsgSendMessageWithCallerResponse"],"CosmosMessage":[]},"CCTPV1MsgUnlinkTokenPair":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgUnpauseBurningAndMinting":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgUnpauseSendingAndReceivingMessages":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgUpdateAttesterManager":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgUpdateMaxMessageBodySize":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgUpdateOwner":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgUpdatePauser":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgUpdateSignatureThreshold":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1MsgUpdateTokenController":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CCTPV1Types":{"TypeUrl":[]},"EvmosService":{"ServiceMessage":["1"],"CosmosMessage":[]},"EvmosErc20V1Params":{"CosmosMessage":[]},"EvmosErc20V1MsgConvertCoin":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"EvmosErc20V1MsgConvertERC20":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"EvmosErc20V1MsgRegisterERC20":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"EvmosErc20V1MsgToggleConversion":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"EvmosErc20V1MsgUpdateParams":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"EvmosEthermintEVMV1ChainConfig":{"CosmosMessage":[]},"EvmosEthermintEVMV1Log":{"CosmosMessage":[]},"EvmosEthermintEVMV1Params":{"CosmosMessage":[]},"EvmosEthermintEVMV1MsgEthereumTx":{"AminoMessage":["EvmosEthermintEVMV1MsgEthereumTxResponse"],"ServiceMessage":["EvmosEthermintEVMV1MsgEthereumTxResponse"],"CosmosMessage":[]},"EvmosEthermintEVMV1MsgEthereumTxResponse":{"CosmosMessage":[]},"EvmosEthermintEVMV1MsgUpdateParams":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"EvmosEthermintFeeMarketV1Params":{"CosmosMessage":[]},"EvmosEthermintFeeMarketV1MsgUpdateParams":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"EvmosInflationV1ExponentialCalculation":{"CosmosMessage":[]},"EvmosInflationV1InflationDistribution":{"CosmosMessage":[]},"EvmosInflationV1Params":{"CosmosMessage":[]},"EvmosInflationV1MsgUpdateParams":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"EvmosRevenueV1Params":{"CosmosMessage":[]},"EvmosRevenueV1MsgCancelRevenue":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"EvmosRevenueV1MsgRegisterRevenue":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"EvmosRevenueV1MsgUpdateParams":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"EvmosRevenueV1MsgUpdateRevenue":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"EvmosErc20V1Types":{"TypeUrl":[]},"EvmosVestingV1Period":{"CosmosMessage":[]},"EvmosVestingV2MsgConvertVestingAccount":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"EvmosVestingV2MsgCreateClawbackVestingAccount":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"EvmosVestingV2MsgFundVestingAccount":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"EvmosVestingV2MsgClawback":{"AminoMessage":["EvmosVestingV2MsgClawbackResponse"],"ServiceMessage":["EvmosVestingV2MsgClawbackResponse"],"CosmosMessage":[]},"EvmosVestingV2MsgUpdateVestingFunder":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"AnyMessage":{"CosmosMessage":[]},"AnyJsonMessage":{"AnyMessage":[],"CosmosMessage":[]},"IbcService":{"ServiceMessage":["1"],"CosmosMessage":[]},"MsgTransfer":{"AminoMessage":["MsgTransferResponse"],"ServiceMessage":["MsgTransferResponse"],"CosmosMessage":[]},"IbcClientHeight":{"CosmosMessage":[]},"IbcTypes":{"TypeUrl":[]},"OpInitService":{"ServiceMessage":["1"],"CosmosMessage":[]},"OpInitOpHostV1MsgInitiateTokenDeposit":{"AminoMessage":["OpInitOpHostV1MsgInitiateTokenDepositResponse"],"ServiceMessage":["OpInitOpHostV1MsgInitiateTokenDepositResponse"],"CosmosMessage":[]},"OpInitOpHostV1Types":{"TypeUrl":[]},"BankV1Beta1Service":{"ServiceMessage":["1"],"CosmosMessage":[]},"Input":{"CosmosMessage":[]},"Output":{"CosmosMessage":[]},"MsgMultiSend":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"MsgSend":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"BankV1beta1Types":{"TypeUrl":[]},"Coin":{"CosmosMessage":[]},"CrisisV1Beta1Service":{"ServiceMessage":["1"],"CosmosMessage":[]},"MsgVerifyInvariant":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"CrisisV1beta1":{"TypeUrl":[]},"DistributionV1Beta1Service":{"ServiceMessage":["1"],"CosmosMessage":[]},"DistributionMsgFundCommunityPool":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"DistributionMsgSetWithdrawAddress":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"DistributionMsgWithdrawDelegatorReward":{"AminoMessage":["DistributionMsgWithdrawDelegatorRewardResponse"],"ServiceMessage":["DistributionMsgWithdrawDelegatorRewardResponse"],"CosmosMessage":[]},"DistributionMsgWithdrawValidatorCommission":{"AminoMessage":["DistributionMsgWithdrawValidatorCommissionResponse"],"ServiceMessage":["DistributionMsgWithdrawValidatorCommissionResponse"],"CosmosMessage":[]},"DistributionV1beta1Types":{"TypeUrl":[]},"GovV1Beta1Service":{"ServiceMessage":["1"],"CosmosMessage":[]},"GovMsgDeposit":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"GovMsgVote":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"GovV1beta1types":{"TypeUrl":[]},"SlashingV1Beta1Service":{"ServiceMessage":["1"],"CosmosMessage":[]},"SlashingMsgUnjail":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"SlashingV1beta1Types":{"TypeUrl":[]},"StakingV1Beta1Service":{"ServiceMessage":["1"],"CosmosMessage":[]},"CommissionRates":{"CosmosMessage":[]},"Description":{"CosmosMessage":[]},"MsgBeginRedelegate":{"AminoMessage":["MsgBeginRedelegateResponse"],"ServiceMessage":["MsgBeginRedelegateResponse"],"CosmosMessage":[]},"MsgCreateValidator":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"MsgDelegate":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"MsgEditValidator":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"MsgUndelegate":{"AminoMessage":["MsgUndelegateResponse"],"ServiceMessage":["MsgUndelegateResponse"],"CosmosMessage":[]},"StakingV1beta1Types":{"TypeUrl":[]},"Fee":{"CosmosMessage":[]},"SignDoc":{"CosmosMessage":[]},"VestingV1Beta1Service":{"ServiceMessage":["1"],"CosmosMessage":[]},"MsgCreateVestingAccount":{"AminoMessage":["EmptyServiceRequestResponse"],"ServiceMessage":["EmptyServiceRequestResponse"],"CosmosMessage":[]},"VestingV1beta1Types":{"TypeUrl":[]},"CosmosSDKService":{"ServiceMessage":["1"],"CosmosMessage":[]},"AminoMessage":{"ServiceMessage":["1"],"CosmosMessage":[]},"ServiceMessage":{"CosmosMessage":[]},"RetryClient":{"Client":[]},"BaseClient":{"Client":[]},"BrowserClient":{"Client":[]},"ByteStream":{"StreamView":["List<int>"],"Stream":["List<int>"],"StreamView.T":"List<int>","Stream.T":"List<int>"},"ClientException":{"Exception":[]},"Request":{"BaseRequest":[]},"Response":{"BaseResponse":[]},"StreamedRequest":{"BaseRequest":[]},"StreamedResponse":{"BaseResponse":[]},"StreamedResponseV2":{"StreamedResponse":[],"BaseResponse":[]},"CaseInsensitiveMap":{"CanonicalizedMap":["String","String","1"],"Map":["String","1"],"CanonicalizedMap.V":"1","CanonicalizedMap.K":"String","CanonicalizedMap.C":"String"},"AptosAddress":{"MoveArgument":["List<int>"],"AptosEntryFunctionArguments":["List<int>"],"AptosScriptArguments":["List<int>"]},"DartAptosPluginException":{"Exception":[]},"AptosTransactionArgumentBytes":{"AptosEntryFunctionArguments":["List<int>"],"MoveType":["List<int>"],"MoveType.T":"List<int>"},"AptosTypeTagNumeric":{"AptosTypeTag":[]},"AptosTypeTagBoolean":{"AptosTypeTag":[]},"AptosTypeTagAddress":{"AptosTypeTag":[]},"AptosTypeTagSigner":{"AptosTypeTag":[]},"AptosTypeTagGeneric":{"AptosTypeTag":[]},"AptosTypeTagVector":{"AptosTypeTag":[]},"AptosTypeTagStruct":{"AptosTypeTag":[]},"AptosTransactionPayloadScript":{"AptosTransactionPayload":[]},"AptosTransactionPayloadEntryFunction":{"AptosTransactionPayload":[]},"AptosMultisigTransactionPayloadEntryFunction":{"AptosMultisigTransactionPayload":[]},"AptosTransactionPayloadMultisig":{"AptosTransactionPayload":[]},"BcsSerializationException":{"Exception":[]},"AptosEntryFunctionArguments":{"MoveType":["1"]},"AptosScriptArguments":{"MoveType":["1"]},"MoveArgument":{"AptosEntryFunctionArguments":["1"],"AptosScriptArguments":["1"]},"MoveU8":{"MoveArgument":["int"],"AptosEntryFunctionArguments":["int"],"AptosScriptArguments":["int"]},"MoveU16":{"MoveArgument":["int"],"AptosEntryFunctionArguments":["int"],"AptosScriptArguments":["int"]},"MoveU32":{"MoveArgument":["int"],"AptosEntryFunctionArguments":["int"],"AptosScriptArguments":["int"]},"MoveU64":{"MoveArgument":["BigInt"],"AptosEntryFunctionArguments":["BigInt"],"AptosScriptArguments":["BigInt"]},"MoveU128":{"MoveArgument":["@"],"AptosEntryFunctionArguments":["@"],"AptosScriptArguments":["@"]},"MoveU256":{"MoveArgument":["@"],"AptosEntryFunctionArguments":["@"],"AptosScriptArguments":["@"]},"MoveBool":{"MoveArgument":["@"],"AptosEntryFunctionArguments":["@"],"AptosScriptArguments":["@"]},"MoveAddress":{"MoveArgument":["List<int>"],"AptosEntryFunctionArguments":["List<int>"],"AptosScriptArguments":["List<int>"]},"MoveU8Vector":{"MoveArgument":["List<int>"],"AptosEntryFunctionArguments":["List<int>"],"AptosScriptArguments":["List<int>"]},"MoveSerialized":{"MoveArgument":["List<int>"],"AptosEntryFunctionArguments":["List<int>"],"AptosScriptArguments":["List<int>"]},"EIP4631Exception":{"Exception":[]},"ETHPluginException":{"Exception":[]},"EthereumRequestDetails":{"BaseServiceRequestParams":[]},"EthereumRequest":{"BaseServiceRequest":["1","2","EthereumRequestDetails"]},"EthereumRequestDynamic":{"BaseServiceRequest":["1","Object?","EthereumRequestDetails"],"BaseServiceRequest.0":"1","BaseServiceRequest.1":"Object?"},"SolanaPluginException":{"Exception":[]},"Eip712TypedData":{"EIP712Base":[]},"EIP712Legacy":{"EIP712Base":[]},"SolidityAbiException":{"Exception":[]},"SuiAddress":{"MoveArgument":["List<int>"],"AptosEntryFunctionArguments":["List<int>"],"AptosScriptArguments":["List<int>"]},"DartSuiPluginException":{"Exception":[]},"TronPluginException":{"Exception":[]},"AccountCreateContract":{"TronBaseContract":[]},"AccountPermissionUpdateContract":{"TronBaseContract":[]},"AccountType":{"TronEnumerate":[]},"AccountUpdateContract":{"TronBaseContract":[]},"PermissionType":{"TronEnumerate":[]},"SetAccountIdContract":{"TronBaseContract":[]},"AssetIssueContract":{"TronBaseContract":[]},"ParticipateAssetIssueContract":{"TronBaseContract":[]},"TransferAssetContract":{"TronBaseContract":[]},"UnfreezeAssetContract":{"TronBaseContract":[]},"UpdateAssetContract":{"TronBaseContract":[]},"CancelAllUnfreezeV2Contract":{"TronBaseContract":[]},"DelegateResourceContract":{"TronBaseContract":[]},"FreezeBalanceContract":{"TronBaseContract":[]},"FreezeBalanceV2Contract":{"TronBaseContract":[]},"TransferContract":{"TronBaseContract":[]},"UnDelegateResourceContract":{"TronBaseContract":[]},"UnfreezeBalanceContract":{"TronBaseContract":[]},"UnfreezeBalanceV2Contract":{"TronBaseContract":[]},"WithdrawBalanceContract":{"TronBaseContract":[]},"WithdrawExpireUnfreezeContract":{"TronBaseContract":[]},"ResourceCode":{"TronEnumerate":[]},"TransactionContractType":{"TronEnumerate":[]},"ExchangeCreateContract":{"TronBaseContract":[]},"ExchangeInjectContract":{"TronBaseContract":[]},"ExchangeTransactionContract":{"TronBaseContract":[]},"ExchangeWithdrawContract":{"TronBaseContract":[]},"MarketCancelOrderContract":{"TronBaseContract":[]},"MarketSellAssetContract":{"TronBaseContract":[]},"ProposalApproveContract":{"TronBaseContract":[]},"ProposalCreateContract":{"TronBaseContract":[]},"ProposalDeleteContract":{"TronBaseContract":[]},"ShieldedTransferContract":{"TronBaseContract":[]},"SmartContractAbiEntryType":{"TronEnumerate":[]},"SmartContractAbiStateMutabilityType":{"TronEnumerate":[]},"ClearABIContract":{"TronBaseContract":[]},"CreateSmartContract":{"TronBaseContract":[]},"TriggerSmartContract":{"TronBaseContract":[]},"UpdateEnergyLimitContract":{"TronBaseContract":[]},"UpdateSettingContract":{"TronBaseContract":[]},"UpdateBrokerageContract":{"TronBaseContract":[]},"VoteAssetContract":{"TronBaseContract":[]},"VoteWitnessContract":{"TronBaseContract":[]},"WitnessUpdateContract":{"TronBaseContract":[]},"WitnessCreateContract":{"TronBaseContract":[]},"OnChainBridgeException":{"Exception":[]},"ApiProviderException":{"Exception":[]},"WalletException":{"Exception":[]},"FailedHttpIsolateInitialization":{"Exception":[]},"HTTPWorkerResponseSuccess":{"HTTPWorkerResponse":[]},"HTTPWorkerResponseError":{"HTTPWorkerResponse":[]},"ProviderAuthenticated":{"Equatable":[]},"DigestProviderAuthenticated":{"ProviderAuthenticated":[],"Equatable":[]},"BasicProviderAuthenticated":{"ProviderAuthenticated":[],"Equatable":[]},"_CachedClientImpl":{"_Client":["1"]},"_Client":{"_Client.T":"1"},"_CachedClient":{"_CachedClientImpl":["ProviderAuthenticated?"],"_Client":["ProviderAuthenticated?"],"_Client.T":"ProviderAuthenticated?"},"_DigestAuthClient":{"_Client":["DigestProviderAuthenticated"],"_Client.T":"DigestProviderAuthenticated"},"_DigestAuthCachedClient":{"_CachedClientImpl":["DigestProviderAuthenticated"],"_Client":["DigestProviderAuthenticated"],"_Client.T":"DigestProviderAuthenticated"},"StreamValue":{"StreamListenable":["1"]},"APPImage":{"Equatable":[]},"WebsocketWeb":{"PlatformWebScoket":[]},"CustomCoins":{"CryptoCoins":["BipCoinConfig"]},"CustomProposal":{"BipProposal":[]},"AddressDerivationIndex":{"Equatable":[]},"Bip32AddressIndex":{"AddressDerivationIndex":[],"Equatable":[]},"MultiSigAddressIndex":{"AddressDerivationIndex":[],"Equatable":[]},"SubstrateAddressIndex":{"AddressDerivationIndex":[],"Equatable":[]},"APIProvider":{"Equatable":[]},"EthereumAPIProvider":{"APIProvider":[],"Equatable":[]},"HTTPService":{"BaseServiceProtocol":["1"]},"BaseSocketService":{"BaseServiceProtocol":["1"]},"WebSocketService":{"BaseServiceProtocol":["1"]},"EthereumHTTPService":{"HTTPService":["EthereumAPIProvider"],"EthereumServiceProvider":[],"BaseServiceProtocol":["EthereumAPIProvider"]},"EthereumWebsocketService":{"WebSocketService":["EthereumAPIProvider"],"EthereumServiceProvider":[],"BaseServiceProtocol":["EthereumAPIProvider"],"WebSocketService.T":"EthereumAPIProvider"},"IntegerBalance":{"BalanceCore":["BigInt","Token"]},"ChainAccount":{"Equatable":[]},"AptosChain":{"Chain":["AptosAPIProvider","AptosNetworkParams","AptosAddress","AptosFATokens","NFTCore","IAptosAddress","WalletAptosNetwork","AptosClient","DefaultChainStorageKey","DefaultChainConfig","AptosWalletTransaction","AptosContact","AptosNewAddressParams"]},"IAptosAddress":{"ChainAccount":["AptosAddress","AptosFATokens","NFTCore","AptosWalletTransaction"],"Equatable":[]},"AptosNewAddressParams":{"NewAccountParams":["IAptosAddress"]},"BitcoinChain":{"Chain":["BaseBitcoinAPIProvider","BitcoinParams","BitcoinBaseAddress","TokenCore<BalanceCore<@,APPToken>,APPToken>","NFTCore","IBitcoinAddress","WalletBitcoinNetwork","BitcoinClient<IBitcoinAddress>","DefaultChainStorageKey","DefaultChainConfig","BitcoinWalletTransaction","BitcoinContact","BaseBitcoinNewAddressParams<IBitcoinAddress>"]},"IBitcoinAddress":{"ChainAccount":["BitcoinBaseAddress","TokenCore<BalanceCore<@,APPToken>,APPToken>","NFTCore","BitcoinWalletTransaction"],"Equatable":[]},"BaseBitcoinNewAddressParams":{"NewAccountParams":["1"]},"CosmosChainStorage":{"ChainStorageKey":[]},"CosmosChainConfig":{"ChainConfig":["CosmosChainStorage"],"Equatable":[]},"CosmosChain":{"Chain":["CosmosAPIProvider","CosmosNetworkParams","CosmosBaseAddress","CW20Token","NFTCore","ICosmosAddress","WalletCosmosNetwork","CosmosClient","ChainStorageKey","CosmosChainConfig","CosmosWalletTransaction","CosmosContact","CosmosNewAddressParams"]},"ICosmosAddress":{"ChainAccount":["CosmosBaseAddress","CW20Token","NFTCore","CosmosWalletTransaction"],"Equatable":[]},"CosmosNewAddressParams":{"NewAccountParams":["ICosmosAddress"]},"EthereumChain":{"Chain":["EthereumAPIProvider","EthereumNetworkParams","ETHAddress","ETHERC20Token","NFTCore","IEthAddress","WalletEthereumNetwork","EthereumClient","DefaultChainStorageKey","DefaultChainConfig","EthWalletTransaction","EthereumContact","EthereumNewAddressParams"]},"IEthAddress":{"ChainAccount":["ETHAddress","ETHERC20Token","NFTCore","EthWalletTransaction"],"Equatable":[]},"EthereumNewAddressParams":{"NewAccountParams":["IEthAddress"]},"SolanaChain":{"Chain":["SolanaAPIProvider","SolanaNetworkParams","SolAddress","SolanaSPLToken","NFTCore","ISolanaAddress","WalletSolanaNetwork","SolanaClient","DefaultChainStorageKey","DefaultChainConfig","SolanaWalletTransaction","SolanaContact","SolanaNewAddressParams"]},"ISolanaAddress":{"ChainAccount":["SolAddress","SolanaSPLToken","NFTCore","SolanaWalletTransaction"],"Equatable":[]},"SolanaNewAddressParams":{"NewAccountParams":["ISolanaAddress"]},"StellarChain":{"Chain":["StellarAPIProvider","StellarNetworkParams","StellarAddress","StellarIssueToken","NFTCore","IStellarAddress","WalletStellarNetwork","StellarClient","DefaultChainStorageKey","DefaultChainConfig","StellarWalletTransaction","StellarContact","StellarNewAddressParams"]},"IStellarAddress":{"ChainAccount":["StellarAddress","StellarIssueToken","NFTCore","StellarWalletTransaction"],"Equatable":[]},"StellarNewAddressParams":{"NewAccountParams":["IStellarAddress"]},"SubstrateChain":{"Chain":["SubstrateAPIProvider","SubstrateNetworkParams","BaseSubstrateAddress","TokenCore<BalanceCore<@,APPToken>,APPToken>","NFTCore","ISubstrateAddress","WalletSubstrateNetwork","SubstrateClient","DefaultChainStorageKey","DefaultChainConfig","SubstrateWalletTransaction","SubstrateContact","SubstrateNewAddressParams"]},"ISubstrateAddress":{"ChainAccount":["BaseSubstrateAddress","TokenCore<BalanceCore<@,APPToken>,APPToken>","NFTCore","SubstrateWalletTransaction"],"Equatable":[]},"SubstrateNewAddressParams":{"NewAccountParams":["ISubstrateAddress"]},"SuiChain":{"Chain":["SuiAPIProvider","SuiNetworkParams","SuiAddress","SuiToken","NFTCore","ISuiAddress","WalletSuiNetwork","SuiClient","DefaultChainStorageKey","DefaultChainConfig","SuiWalletTransaction","SuiContact","SuiNewAddressParams"]},"ISuiAddress":{"ChainAccount":["SuiAddress","SuiToken","NFTCore","SuiWalletTransaction"],"Equatable":[]},"SuiNewAddressParams":{"NewAccountParams":["ISuiAddress"]},"TheOpenNetworkChain":{"Chain":["TonAPIProvider","TonNetworkParams","TonAddress","TonJettonToken","NFTCore","ITonAddress","WalletTonNetwork","TonClient","DefaultChainStorageKey","DefaultChainConfig","TonWalletTransaction","TonContact","TonNewAddressParams"]},"ITonAddress":{"ChainAccount":["TonAddress","TonJettonToken","NFTCore","TonWalletTransaction"],"Equatable":[]},"TonNewAddressParams":{"NewAccountParams":["ITonAddress"]},"TronChainStorageKey":{"ChainStorageKey":[]},"TronChainConfig":{"ChainConfig":["TronChainStorageKey"],"Equatable":[]},"TronChain":{"Chain":["TronAPIProvider","TronNetworkParams","TronAddress","TronToken","NFTCore","ITronAddress","WalletTronNetwork","TronClient","TronChainStorageKey","TronChainConfig","TronWalletTransaction","TronContact","TronNewAddressParams"]},"ITronAddress":{"ChainAccount":["TronAddress","TronToken","NFTCore","TronWalletTransaction"],"Equatable":[]},"TronNewAddressParams":{"NewAccountParams":["ITronAddress"]},"AptosFATokens":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"TokenCore":{"Equatable":[]},"TronToken":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"CW20Token":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"ETHERC20Token":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"TonJettonToken":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"SolanaSPLToken":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"StellarIssueToken":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"SuiToken":{"TokenCore":["IntegerBalance","Token"],"Equatable":[]},"ChainConfig":{"Equatable":[]},"DefaultChainStorageKey":{"ChainStorageKey":[]},"DefaultChainConfig":{"ChainConfig":["DefaultChainStorageKey"],"Equatable":[]},"AptosNetworkParams":{"NetworkCoinParams":["AptosAPIProvider"]},"SolanaNetworkParams":{"NetworkCoinParams":["SolanaAPIProvider"]},"StellarNetworkParams":{"NetworkCoinParams":["StellarAPIProvider"]},"SuiNetworkParams":{"NetworkCoinParams":["SuiAPIProvider"]},"TonAccountContext":{"Equatable":[]},"TonAccountLegacyContext":{"TonAccountContext":[],"Equatable":[]},"TonAccountSubWalletContext":{"TonAccountContext":[],"Equatable":[]},"TonAccountV5CustomContext":{"TonAccountContext":[],"Equatable":[]},"TonAccountV5SubWalletContext":{"TonAccountContext":[],"Equatable":[]},"APPToken":{"Equatable":[]},"Token":{"APPToken":[],"Equatable":[]},"Web3RequestException":{"Equatable":[],"Exception":[]},"Web3ChainMessage":{"Web3MessageCore":[]},"Web3ExceptionMessage":{"Web3MessageCore":[]},"Web3GlobalResponseMessage":{"Web3MessageCore":[]},"Web3WalletResponseMessage":{"Web3MessageCore":[]},"Web3ChainAccount":{"Equatable":[]},"Web3ChainIdnetifier":{"Equatable":[]},"Web3ChainDefaultIdnetifier":{"Web3ChainIdnetifier":[],"Equatable":[]},"Web3WalletRequestParams":{"Web3MessageCore":[]},"Web3RequestParams":{"Web3WalletRequestParams":["1"],"Web3MessageCore":[]},"Web3GlobalRequestParams":{"Web3WalletRequestParams":["1"],"Web3MessageCore":[]},"Web3AptosRequestMethods":{"Web3NetworkRequestMethods":[]},"Web3AptosRequestParam":{"Web3RequestParams":["1","AptosAddress","AptosChain","IAptosAddress","Web3AptosChainAccount","Web3AptosChain"],"Web3WalletRequestParams":["1"],"Web3MessageCore":[]},"Web3AptosSignMessage":{"Web3AptosRequestParam":["Web3AptosSignMessageResponse"],"Web3RequestParams":["Web3AptosSignMessageResponse","AptosAddress","AptosChain","IAptosAddress","Web3AptosChainAccount","Web3AptosChain"],"Web3WalletRequestParams":["Web3AptosSignMessageResponse"],"Web3MessageCore":[]},"Web3AptosSendTransaction":{"Web3AptosRequestParam":["List<int>"],"Web3RequestParams":["List<int>","AptosAddress","AptosChain","IAptosAddress","Web3AptosChainAccount","Web3AptosChain"],"Web3WalletRequestParams":["List<int>"],"Web3MessageCore":[]},"Web3AptosChainAccount":{"Web3ChainAccount":["AptosAddress"],"Equatable":[],"Web3ChainAccount.0":"AptosAddress"},"Web3AptosChainIdnetifier":{"Web3ChainIdnetifier":[],"Equatable":[]},"Web3AptosChainAuthenticated":{"Web3ChainAuthenticated":["Web3AptosChainAccount"],"Web3ChainAuthenticated.0":"Web3AptosChainAccount"},"Web3BitcoinRequestMethods":{"Web3NetworkRequestMethods":[]},"Web3BitcoinRequestParam":{"Web3RequestParams":["1","BitcoinBaseAddress","BitcoinChain","IBitcoinAddress","Web3BitcoinChainAccount","Web3BitcoinChain"],"Web3WalletRequestParams":["1"],"Web3MessageCore":[]},"Web3BitcoinSendTransaction":{"Web3BitcoinRequestParam":["String"],"Web3RequestParams":["String","BitcoinBaseAddress","BitcoinChain","IBitcoinAddress","Web3BitcoinChainAccount","Web3BitcoinChain"],"Web3WalletRequestParams":["String"],"Web3MessageCore":[]},"Web3BitcoinSignMessage":{"Web3BitcoinRequestParam":["Web3BitcoinSignMessageResponse"],"Web3RequestParams":["Web3BitcoinSignMessageResponse","BitcoinBaseAddress","BitcoinChain","IBitcoinAddress","Web3BitcoinChainAccount","Web3BitcoinChain"],"Web3WalletRequestParams":["Web3BitcoinSignMessageResponse"],"Web3MessageCore":[]},"Web3BitcoinSignTransaction":{"Web3BitcoinRequestParam":["String"],"Web3RequestParams":["String","BitcoinBaseAddress","BitcoinChain","IBitcoinAddress","Web3BitcoinChainAccount","Web3BitcoinChain"],"Web3WalletRequestParams":["String"],"Web3MessageCore":[]},"Web3BitcoinChainAccount":{"Web3ChainAccount":["BitcoinBaseAddress"],"Equatable":[],"Web3ChainAccount.0":"BitcoinBaseAddress"},"Web3BitcoinChainAuthenticated":{"Web3ChainAuthenticated":["Web3BitcoinChainAccount"],"Web3ChainAuthenticated.0":"Web3BitcoinChainAccount"},"Web3CosmosRequestMethods":{"Web3NetworkRequestMethods":[]},"Web3CosmosRequestParam":{"Web3RequestParams":["1","CosmosBaseAddress","CosmosChain","ICosmosAddress","Web3CosmosChainAccount","Web3CosmosChain"],"Web3WalletRequestParams":["1"],"Web3MessageCore":[]},"Web3CosmosAddNewChain":{"Web3CosmosRequestParam":["bool"],"Web3RequestParams":["bool","CosmosBaseAddress","CosmosChain","ICosmosAddress","Web3CosmosChainAccount","Web3CosmosChain"],"Web3WalletRequestParams":["bool"],"Web3MessageCore":[]},"Web3CosmosSignMessage":{"Web3CosmosRequestParam":["Web3CosmosSignMessageResponse"],"Web3RequestParams":["Web3CosmosSignMessageResponse","CosmosBaseAddress","CosmosChain","ICosmosAddress","Web3CosmosChainAccount","Web3CosmosChain"],"Web3WalletRequestParams":["Web3CosmosSignMessageResponse"],"Web3MessageCore":[]},"Web3CosmosSignTransactionDirectSignResponse":{"Web3CosmosSignTransactionResponse":[]},"Web3CosmosSignTransactionAminoSignResponse":{"Web3CosmosSignTransactionResponse":[]},"Web3CosmosSignTransaction":{"Web3CosmosRequestParam":["Web3CosmosSignTransactionResponse"],"Web3RequestParams":["Web3CosmosSignTransactionResponse","CosmosBaseAddress","CosmosChain","ICosmosAddress","Web3CosmosChainAccount","Web3CosmosChain"],"Web3WalletRequestParams":["Web3CosmosSignTransactionResponse"],"Web3MessageCore":[]},"Web3CosmosSignTransactionDirectParams":{"Web3CosmosSignTransactionParams":[]},"Web3CosmosSignTransactionAminoParams":{"Web3CosmosSignTransactionParams":[]},"Web3CosmosChainAccount":{"Web3ChainAccount":["CosmosBaseAddress"],"Equatable":[],"Web3ChainAccount.0":"CosmosBaseAddress"},"Web3CosmoshainIdnetifier":{"Web3ChainIdnetifier":[],"Equatable":[]},"Web3CosmosChainAuthenticated":{"Web3ChainAuthenticated":["Web3CosmosChainAccount"],"Web3ChainAuthenticated.0":"Web3CosmosChainAccount"},"Web3EthereumRequestMethods":{"Web3NetworkRequestMethods":[]},"Web3EthereumRequestParam":{"Web3RequestParams":["1","ETHAddress","EthereumChain","IEthAddress","Web3EthereumChainAccount","Web3EthereumChain"],"Web3WalletRequestParams":["1"],"Web3MessageCore":[]},"Web3EthereumAddNewChain":{"Web3EthereumRequestParam":["String"],"Web3RequestParams":["String","ETHAddress","EthereumChain","IEthAddress","Web3EthereumChainAccount","Web3EthereumChain"],"Web3WalletRequestParams":["String"],"Web3MessageCore":[]},"Web3EthreumPersonalSign":{"Web3EthereumRequestParam":["String"],"Web3RequestParams":["String","ETHAddress","EthereumChain","IEthAddress","Web3EthereumChainAccount","Web3EthereumChain"],"Web3WalletRequestParams":["String"],"Web3MessageCore":[]},"Web3EthreumSendTransaction":{"Web3EthereumRequestParam":["String"],"Web3RequestParams":["String","ETHAddress","EthereumChain","IEthAddress","Web3EthereumChainAccount","Web3EthereumChain"],"Web3WalletRequestParams":["String"],"Web3MessageCore":[]},"Web3EthreumTypdedData":{"Web3EthereumRequestParam":["String"],"Web3RequestParams":["String","ETHAddress","EthereumChain","IEthAddress","Web3EthereumChainAccount","Web3EthereumChain"],"Web3WalletRequestParams":["String"],"Web3MessageCore":[]},"Web3EthereumChainAccount":{"Web3ChainAccount":["ETHAddress"],"Equatable":[],"Web3ChainAccount.0":"ETHAddress"},"Web3EthereumChainIdnetifier":{"Web3ChainIdnetifier":[],"Equatable":[]},"Web3EthereumChainAuthenticated":{"Web3ChainAuthenticated":["Web3EthereumChainAccount"],"Web3ChainAuthenticated.0":"Web3EthereumChainAccount"},"Web3ConnectApplication":{"Web3GlobalRequestParams":["List<NetworkType>"],"Web3WalletRequestParams":["List<NetworkType>"],"Web3MessageCore":[]},"Web3DisconnectApplication":{"Web3GlobalRequestParams":["List<NetworkType>"],"Web3WalletRequestParams":["List<NetworkType>"],"Web3MessageCore":[]},"Web3SwitchApplicationNetwork":{"Web3GlobalRequestParams":["List<NetworkType>"],"Web3WalletRequestParams":["List<NetworkType>"],"Web3MessageCore":[]},"Web3SolanaRequestMethods":{"Web3NetworkRequestMethods":[]},"Web3SolanaRequestParam":{"Web3RequestParams":["1","SolAddress","SolanaChain","ISolanaAddress","Web3SolanaChainAccount","Web3SolanaChain"],"Web3WalletRequestParams":["1"],"Web3MessageCore":[]},"Web3SolanaSignInParams":{"Web3SolanaSignParams":[]},"Web3SolanaSignMessageParams":{"Web3SolanaSignParams":[]},"Web3SolanaSignMessage":{"Web3SolanaRequestParam":["List<Web3SolanaSignMessageResponse>"],"Web3RequestParams":["List<Web3SolanaSignMessageResponse>","SolAddress","SolanaChain","ISolanaAddress","Web3SolanaChainAccount","Web3SolanaChain"],"Web3WalletRequestParams":["List<Web3SolanaSignMessageResponse>"],"Web3MessageCore":[]},"Web3SolanaSendTransaction":{"Web3SolanaRequestParam":["List<List<int>>"],"Web3RequestParams":["List<List<int>>","SolAddress","SolanaChain","ISolanaAddress","Web3SolanaChainAccount","Web3SolanaChain"],"Web3WalletRequestParams":["List<List<int>>"],"Web3MessageCore":[]},"Web3SolanaChainAccount":{"Web3ChainAccount":["SolAddress"],"Equatable":[],"Web3ChainAccount.0":"SolAddress"},"Web3SolanaChainAuthenticated":{"Web3ChainAuthenticated":["Web3SolanaChainAccount"],"Web3ChainAuthenticated.0":"Web3SolanaChainAccount"},"Web3StellarRequestMethods":{"Web3NetworkRequestMethods":[]},"Web3StellarRequestParam":{"Web3RequestParams":["1","StellarAddress","StellarChain","IStellarAddress","Web3StellarChainAccount","Web3StellarChain"],"Web3WalletRequestParams":["1"],"Web3MessageCore":[]},"Web3StellarSignMessage":{"Web3StellarRequestParam":["List<int>"],"Web3RequestParams":["List<int>","StellarAddress","StellarChain","IStellarAddress","Web3StellarChainAccount","Web3StellarChain"],"Web3WalletRequestParams":["List<int>"],"Web3MessageCore":[]},"Web3StellarSendTransaction":{"Web3StellarRequestParam":["Web3StellarSendTransactionResponse"],"Web3RequestParams":["Web3StellarSendTransactionResponse","StellarAddress","StellarChain","IStellarAddress","Web3StellarChainAccount","Web3StellarChain"],"Web3WalletRequestParams":["Web3StellarSendTransactionResponse"],"Web3MessageCore":[]},"Web3StellarChainAccount":{"Web3ChainAccount":["StellarAddress"],"Equatable":[],"Web3ChainAccount.0":"StellarAddress"},"Web3StellarChainAuthenticated":{"Web3ChainAuthenticated":["Web3StellarChainAccount"],"Web3ChainAuthenticated.0":"Web3StellarChainAccount"},"Web3SubstrateRequestMethods":{"Web3NetworkRequestMethods":[]},"Web3SubstrateRequestParam":{"Web3RequestParams":["1","BaseSubstrateAddress","SubstrateChain","ISubstrateAddress","Web3SubstrateChainAccount","Web3SubstrateChain"],"Web3WalletRequestParams":["1"],"Web3MessageCore":[]},"Web3SubstrateAddNewChain":{"Web3SubstrateRequestParam":["bool"],"Web3RequestParams":["bool","BaseSubstrateAddress","SubstrateChain","ISubstrateAddress","Web3SubstrateChainAccount","Web3SubstrateChain"],"Web3WalletRequestParams":["bool"],"Web3MessageCore":[]},"Web3SubstrateSignMessage":{"Web3SubstrateRequestParam":["Map<String,@>"],"Web3RequestParams":["Map<String,@>","BaseSubstrateAddress","SubstrateChain","ISubstrateAddress","Web3SubstrateChainAccount","Web3SubstrateChain"],"Web3WalletRequestParams":["Map<String,@>"],"Web3MessageCore":[]},"Web3SubstrateSendTransaction":{"Web3SubstrateRequestParam":["Web3SubstrateSendTransactionResponse"],"Web3RequestParams":["Web3SubstrateSendTransactionResponse","BaseSubstrateAddress","SubstrateChain","ISubstrateAddress","Web3SubstrateChainAccount","Web3SubstrateChain"],"Web3WalletRequestParams":["Web3SubstrateSendTransactionResponse"],"Web3MessageCore":[]},"Web3SubstrateChainAccount":{"Web3ChainAccount":["BaseSubstrateAddress"],"Equatable":[],"Web3ChainAccount.0":"BaseSubstrateAddress"},"Web3SubstrateChainIdnetifier":{"Web3ChainIdnetifier":[],"Equatable":[]},"Web3SubstrateChainAuthenticated":{"Web3ChainAuthenticated":["Web3SubstrateChainAccount"],"Web3ChainAuthenticated.0":"Web3SubstrateChainAccount"},"Web3SuiRequestMethods":{"Web3NetworkRequestMethods":[]},"Web3SuiRequestParam":{"Web3RequestParams":["1","SuiAddress","SuiChain","ISuiAddress","Web3SuiChainAccount","Web3SuiChain"],"Web3WalletRequestParams":["1"],"Web3MessageCore":[]},"Web3SuiSignMessage":{"Web3SuiRequestParam":["Map<String,@>"],"Web3RequestParams":["Map<String,@>","SuiAddress","SuiChain","ISuiAddress","Web3SuiChainAccount","Web3SuiChain"],"Web3WalletRequestParams":["Map<String,@>"],"Web3MessageCore":[]},"Web3SuiTransactionImmOrOwnedObject":{"Web3SuiTransactionObjectArg":[]},"Web3SuiTransactionObject":{"Web3SuiTransactionCallArg":[]},"Web3SuiTransactionSharedObject":{"Web3SuiTransactionObjectArg":[]},"Web3SuiTransactionReceiving":{"Web3SuiTransactionObjectArg":[]},"Web3SuiTransactionPureArg":{"Web3SuiTransactionCallArg":[]},"Web3SuiTransactionUnresolvedPurePureArg":{"Web3SuiTransactionCallArg":[]},"Web3SuiTransactionUnresolvedObject":{"Web3SuiTransactionCallArg":[]},"Web3SuiTransactionArgumentGasCoin":{"Web3SuiTransactionArgument":[]},"Web3SuiTransactionArgumentInput":{"Web3SuiTransactionArgument":[]},"Web3SuiTransactionArgumentResult":{"Web3SuiTransactionArgument":[]},"Web3SuiTransactionArgumentNestedResult":{"Web3SuiTransactionArgument":[]},"Web3SuiTransactionCommandMoveCall":{"Web3SuiTransactionCommand":[]},"Web3SuiTransactionCommandTransferObjects":{"Web3SuiTransactionCommand":[]},"Web3SuiTransactionExpirationNone":{"Web3SuiTransactionExpiration":[]},"Web3SuiTransactionExpirationEpoch":{"Web3SuiTransactionExpiration":[]},"Web3SuiTransactionCommandSplitCoins":{"Web3SuiTransactionCommand":[]},"Web3SuiTransactionCommandMergeCoins":{"Web3SuiTransactionCommand":[]},"Web3SuiTransactionCommandPublish":{"Web3SuiTransactionCommand":[]},"Web3SuiTransactionCommandMakeMoveVec":{"Web3SuiTransactionCommand":[]},"Web3SuiTransactionCommandUpgrade":{"Web3SuiTransactionCommand":[]},"Web3SuiSignOrExecuteTransaction":{"Web3SuiRequestParam":["Map<String,@>"],"Web3RequestParams":["Map<String,@>","SuiAddress","SuiChain","ISuiAddress","Web3SuiChainAccount","Web3SuiChain"],"Web3WalletRequestParams":["Map<String,@>"],"Web3MessageCore":[]},"Web3SuiChainAccount":{"Web3ChainAccount":["SuiAddress"],"Equatable":[],"Web3ChainAccount.0":"SuiAddress"},"Web3SuiChainAuthenticated":{"Web3ChainAuthenticated":["Web3SuiChainAccount"],"Web3ChainAuthenticated.0":"Web3SuiChainAccount"},"Web3TonRequestMethods":{"Web3NetworkRequestMethods":[]},"Web3TonRequestParam":{"Web3RequestParams":["1","TonAddress","TheOpenNetworkChain","ITonAddress","Web3TonChainAccount","Web3TonChain"],"Web3WalletRequestParams":["1"],"Web3MessageCore":[]},"Web3TonSignMessage":{"Web3TonRequestParam":["List<int>"],"Web3RequestParams":["List<int>","TonAddress","TheOpenNetworkChain","ITonAddress","Web3TonChainAccount","Web3TonChain"],"Web3WalletRequestParams":["List<int>"],"Web3MessageCore":[]},"Web3TonSendTransaction":{"Web3TonRequestParam":["Web3TonSendTransactionResponse"],"Web3RequestParams":["Web3TonSendTransactionResponse","TonAddress","TheOpenNetworkChain","ITonAddress","Web3TonChainAccount","Web3TonChain"],"Web3WalletRequestParams":["Web3TonSendTransactionResponse"],"Web3MessageCore":[]},"Web3TonChainAccount":{"Web3ChainAccount":["TonAddress"],"Equatable":[],"Web3ChainAccount.0":"TonAddress"},"Web3TonChainAuthenticated":{"Web3ChainAuthenticated":["Web3TonChainAccount"],"Web3ChainAuthenticated.0":"Web3TonChainAccount"},"Web3TronRequestMethods":{"Web3NetworkRequestMethods":[]},"Web3TronRequestParam":{"Web3RequestParams":["1","TronAddress","TronChain","ITronAddress","Web3TronChainAccount","Web3TronChain"],"Web3WalletRequestParams":["1"],"Web3MessageCore":[]},"Web3TronSignMessageV2":{"Web3TronRequestParam":["String"],"Web3RequestParams":["String","TronAddress","TronChain","ITronAddress","Web3TronChainAccount","Web3TronChain"],"Web3WalletRequestParams":["String"],"Web3MessageCore":[]},"Web3TronSendTransaction":{"Web3TronRequestParam":["String"],"Web3RequestParams":["String","TronAddress","TronChain","ITronAddress","Web3TronChainAccount","Web3TronChain"],"Web3WalletRequestParams":["String"],"Web3MessageCore":[]},"Web3TronChainAccount":{"Web3ChainAccount":["TronAddress"],"Equatable":[],"Web3ChainAccount.0":"TronAddress"},"Web3TronChainIdnetifier":{"Web3ChainIdnetifier":[],"Equatable":[]},"Web3TronChainAuthenticated":{"Web3ChainAuthenticated":["Web3TronChainAccount"],"Web3ChainAuthenticated.0":"Web3TronChainAccount"},"PathException":{"Exception":[]},"PosixStyle":{"InternalStyle":[]},"UrlStyle":{"InternalStyle":[]},"WindowsStyle":{"InternalStyle":[]},"SubstrateAddress":{"BaseSubstrateAddress":[]},"SubstrateEthereumAddress":{"BaseSubstrateAddress":[]},"DartSubstratePluginException":{"Exception":[]},"SubstrateMetadata":{"SubstrateSerialization":["1"]},"ScaleTypeDef":{"SubstrateSerialization":["1"]},"MetadataException":{"Exception":[]},"UnsupportedMetadata":{"SubstrateMetadata":["List<int>"],"SubstrateSerialization":["List<int>"]},"Si0TypeDefPrimitive":{"ScaleTypeDef":["Map<String,@>"],"SubstrateSerialization":["Map<String,@>"]},"Si1Field":{"SubstrateSerialization":["Map<String,@>"]},"Si1TypeDefHistoricMetaCompat":{"Si1TypeDef":["String"],"ScaleTypeDef":["String"],"SubstrateSerialization":["String"]},"Si1Type":{"SubstrateSerialization":["Map<String,@>"]},"Si1TypeDef":{"ScaleTypeDef":["1"],"SubstrateSerialization":["1"]},"Si1TypeDefArray":{"Si1TypeDef":["Map<String,@>"],"ScaleTypeDef":["Map<String,@>"],"SubstrateSerialization":["Map<String,@>"]},"Si1TypeDefBitSequence":{"Si1TypeDef":["Map<String,@>"],"ScaleTypeDef":["Map<String,@>"],"SubstrateSerialization":["Map<String,@>"]},"Si1TypeDefCompact":{"Si1TypeDef":["Map<String,@>"],"ScaleTypeDef":["Map<String,@>"],"SubstrateSerialization":["Map<String,@>"]},"Si1TypeDefComposite":{"Si1TypeDef":["Map<String,@>"],"ScaleTypeDef":["Map<String,@>"],"SubstrateSerialization":["Map<String,@>"]},"Si1TypeDefPrimitive":{"Si1TypeDef":["Map<String,@>"],"ScaleTypeDef":["Map<String,@>"],"SubstrateSerialization":["Map<String,@>"]},"Si1TypeDefSequence":{"Si1TypeDef":["Map<String,@>"],"ScaleTypeDef":["Map<String,@>"],"SubstrateSerialization":["Map<String,@>"]},"Si1TypeDefTuple":{"Si1TypeDef":["List<int>"],"ScaleTypeDef":["List<int>"],"SubstrateSerialization":["List<int>"]},"Si1TypeDefVariant":{"Si1TypeDef":["Map<String,@>"],"ScaleTypeDef":["Map<String,@>"],"SubstrateSerialization":["Map<String,@>"]},"Si1TypeParameter":{"SubstrateSerialization":["Map<String,@>"]},"Si1Variant":{"SubstrateSerialization":["Map<String,@>"]},"StorageHasherV14":{"SubstrateSerialization":["Map<String,@>"]},"StorageHasherV11":{"SubstrateSerialization":["Map<String,@>"]},"StorageEntryModifierV14":{"StorageEntryModifierV9":[],"SubstrateSerialization":["Map<String,@>"]},"ExtrinsicMetadataV14":{"SubstrateSerialization":["Map<String,@>"]},"MetadataV14":{"SubstrateMetadata":["Map<String,@>"],"SubstrateSerialization":["Map<String,@>"]},"PalletCallMetadata":{"SubstrateSerialization":["Map<String,@>"]},"PalletCallMetadataV14":{"SubstrateSerialization":["Map<String,@>"]},"PalletConstantMetadata":{"SubstrateSerialization":["Map<String,@>"]},"PalletConstantMetadataV14":{"SubstrateSerialization":["Map<String,@>"]},"PalletErrorMetadata":{"SubstrateSerialization":["Map<String,@>"]},"PalletErrorMetadataV14":{"SubstrateSerialization":["Map<String,@>"]},"PalletEventMetadata":{"SubstrateSerialization":["Map<String,@>"]},"PalletEventMetadataV14":{"SubstrateSerialization":["Map<String,@>"]},"PalletMetadataV14":{"PalletMetadata":["PalletStorageMetadataV14","PalletCallMetadataV14","PalletEventMetadataV14","PalletConstantMetadataV14","PalletErrorMetadataV14"],"SubstrateSerialization":["Map<String,@>"],"PalletMetadata.3":"PalletConstantMetadataV14"},"PalletStorageMetadata":{"SubstrateSerialization":["Map<String,@>"]},"PalletStorageMetadataV14":{"SubstrateSerialization":["Map<String,@>"]},"PortableRegistryV14":{"SubstrateSerialization":["Map<String,@>"]},"PortableTypeV14":{"SubstrateSerialization":["Map<String,@>"]},"SignedExtensionMetadataV14":{"SubstrateSerialization":["Map<String,@>"]},"StorageEntryTypeV14":{"SubstrateSerialization":["1"]},"StorageEntryTypeV14Map":{"StorageEntryTypeV14":["Map<String,@>"],"SubstrateSerialization":["Map<String,@>"]},"StorageEntryTypeV14Plain":{"StorageEntryTypeV14":["int"],"SubstrateSerialization":["int"]},"StorageEntryMetadataV14":{"SubstrateSerialization":["Map<String,@>"]},"CustomMetadata15":{"SubstrateSerialization":["Map<String,@>"]},"CustomValueMetadata15":{"SubstrateSerialization":["Map<String,@>"]},"ExtrinsicMetadataV15":{"SubstrateSerialization":["Map<String,@>"]},"MetadataV15":{"SubstrateMetadata":["Map<String,@>"],"SubstrateSerialization":["Map<String,@>"]},"OuterEnums15":{"SubstrateSerialization":["Map<String,@>"]},"PalletMetadataV15":{"PalletMetadata":["PalletStorageMetadataV14","PalletCallMetadataV14","PalletEventMetadataV14","PalletConstantMetadataV14","PalletErrorMetadataV14"],"SubstrateSerialization":["Map<String,@>"],"PalletMetadata.3":"PalletConstantMetadataV14"},"RuntimeApiMetadataV15":{"RuntimeApiMetadata":["RuntimeApiMethodMetadataV15"],"SubstrateSerialization":["Map<String,@>"],"RuntimeApiMetadata.0":"RuntimeApiMethodMetadataV15"},"RuntimeApiMetadata":{"SubstrateSerialization":["Map<String,@>"]},"RuntimeApiMethodMetadataV15":{"SubstrateSerialization":["Map<String,@>"]},"RuntimeApiMethodMetadata":{"SubstrateSerialization":["Map<String,@>"]},"RuntimeApiMethodParamMetadataV15":{"SubstrateSerialization":["Map<String,@>"]},"MetadataDeprecationInfo":{"SubstrateSerialization":["Map<String,@>"]},"MetadataVariantsDeprecated":{"MetadataDeprecationInfo":[],"SubstrateSerialization":["Map<String,@>"]},"MetadataNotDeprecated":{"MetadataDeprecationInfo":[],"SubstrateSerialization":["Map<String,@>"]},"MetadataItemDeprecated":{"MetadataDeprecationInfo":[],"SubstrateSerialization":["Map<String,@>"]},"DeprecationStatus":{"SubstrateSerialization":["Map<String,@>"]},"MetadataStatusDeprecated":{"DeprecationStatus":[],"SubstrateSerialization":["Map<String,@>"]},"MetadataStatusNotDeprecated":{"DeprecationStatus":[],"SubstrateSerialization":["Map<String,@>"]},"MetadataStatusDeprecatedWithoutNote":{"DeprecationStatus":[],"SubstrateSerialization":["Map<String,@>"]},"ExtrinsicMetadataV16":{"SubstrateSerialization":["Map<String,@>"]},"MetadataV16":{"SubstrateMetadata":["Map<String,@>"],"SubstrateSerialization":["Map<String,@>"]},"PalletAssociatedTypeMetadata":{"SubstrateSerialization":["Map<String,@>"]},"PalletCallMetadataV16":{"SubstrateSerialization":["Map<String,@>"]},"PalletConstantMetadataV16":{"SubstrateSerialization":["Map<String,@>"]},"PalletErrorMetadataV16":{"SubstrateSerialization":["Map<String,@>"]},"PalletEventMetadataV16":{"SubstrateSerialization":["Map<String,@>"]},"PalletMetadataV16":{"PalletMetadata":["PalletStorageMetadataV16","PalletCallMetadataV16","PalletEventMetadataV16","PalletConstantMetadataV16","PalletErrorMetadataV16"],"SubstrateSerialization":["Map<String,@>"],"PalletMetadata.3":"PalletConstantMetadataV16"},"RuntimeApiMetadataV16":{"RuntimeApiMetadata":["RuntimeApiMethodMetadataV16"],"SubstrateSerialization":["Map<String,@>"],"RuntimeApiMetadata.0":"RuntimeApiMethodMetadataV16"},"RuntimeApiMethodMetadataV16":{"SubstrateSerialization":["Map<String,@>"]},"StorageEntryMetadataV16":{"StorageEntryMetadataV14":[],"SubstrateSerialization":["Map<String,@>"]},"PalletStorageMetadataV16":{"SubstrateSerialization":["Map<String,@>"]},"TransactionExtensionMetadata":{"SubstrateSerialization":["Map<String,@>"]},"StorageEntryModifierV9":{"SubstrateSerialization":["Map<String,@>"]},"ExtrinsicMetadata":{"SubstrateSerialization":["Map<String,@>"]},"SignedExtensionMetadata":{"SubstrateSerialization":["Map<String,@>"]},"PalletMetadata":{"SubstrateSerialization":["Map<String,@>"]},"VersionedMetadata":{"SubstrateSerialization":["Map<String,@>"]},"SubstrateVariantSerialization":{"SubstrateSerialization":["Map<String,@>"]},"FileLocation":{"SourceLocation":[],"Comparable":["SourceLocation"]},"_FileSpan":{"SourceSpanWithContext":[],"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceLocation":{"Comparable":["SourceLocation"]},"SourceLocationMixin":{"SourceLocation":[],"Comparable":["SourceLocation"]},"SourceSpan":{"Comparable":["SourceSpan"]},"SourceSpanBase":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanException":{"Exception":[]},"SourceSpanFormatException":{"FormatException":[],"Exception":[]},"SourceSpanMixin":{"SourceSpan":[],"Comparable":["SourceSpan"]},"SourceSpanWithContext":{"SourceSpan":[],"Comparable":["SourceSpan"]},"StellarAccountAddress":{"StellarAddress":[]},"StellarContractAddress":{"StellarAddress":[]},"StellarMuxedAddress":{"StellarAddress":[]},"StellarAddressException":{"Exception":[]},"DartStellarPlugingException":{"Exception":[]},"StringScannerException":{"FormatException":[],"Exception":[]},"BocException":{"Exception":[]},"TonContractException":{"Exception":[]},"WalletV1R1":{"VersionedWalletContract":["NoneSubWalletVersionedWalletState","VersionedTransferParams"],"_VersionedWalletContract_WalletContract_VerionedProviderImpl":["NoneSubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract":["NoneSubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract.C":"NoneSubWalletVersionedWalletState"},"WalletV1R2":{"VersionedWalletContract":["NoneSubWalletVersionedWalletState","VersionedTransferParams"],"_VersionedWalletContract_WalletContract_VerionedProviderImpl":["NoneSubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract":["NoneSubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract.C":"NoneSubWalletVersionedWalletState"},"WalletV1R3":{"VersionedWalletContract":["NoneSubWalletVersionedWalletState","VersionedTransferParams"],"_VersionedWalletContract_WalletContract_VerionedProviderImpl":["NoneSubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract":["NoneSubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract.C":"NoneSubWalletVersionedWalletState"},"WalletV2R1":{"VersionedWalletContract":["NoneSubWalletVersionedWalletState","VersionedTransferParams"],"_VersionedWalletContract_WalletContract_VerionedProviderImpl":["NoneSubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract":["NoneSubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract.C":"NoneSubWalletVersionedWalletState"},"WalletV2R2":{"VersionedWalletContract":["NoneSubWalletVersionedWalletState","VersionedTransferParams"],"_VersionedWalletContract_WalletContract_VerionedProviderImpl":["NoneSubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract":["NoneSubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract.C":"NoneSubWalletVersionedWalletState"},"WalletV3R1":{"VersionedWalletContract":["SubWalletVersionedWalletState","VersionedTransferParams"],"_VersionedWalletContract_WalletContract_VerionedProviderImpl":["SubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract":["SubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract.C":"SubWalletVersionedWalletState"},"WalletV3R2":{"VersionedWalletContract":["SubWalletVersionedWalletState","VersionedTransferParams"],"_VersionedWalletContract_WalletContract_VerionedProviderImpl":["SubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract":["SubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract.C":"SubWalletVersionedWalletState"},"WalletV4":{"VersionedWalletContract":["SubWalletVersionedWalletState","VersionedTransferParams"],"_VersionedWalletContract_WalletContract_VerionedProviderImpl":["SubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract":["SubWalletVersionedWalletState","VersionedTransferParams"],"WalletContract.C":"SubWalletVersionedWalletState"},"WalletV5R1":{"VersionedWalletContract":["V5VersionedWalletState","VersionedV5TransferParams"],"_VersionedWalletContract_WalletContract_VerionedProviderImpl":["V5VersionedWalletState","VersionedV5TransferParams"],"WalletContract":["V5VersionedWalletState","VersionedV5TransferParams"],"WalletContract.C":"V5VersionedWalletState"},"VersionedWalletContract":{"_VersionedWalletContract_WalletContract_VerionedProviderImpl":["1","2"],"WalletContract":["1","2"]},"V5R1Context":{"BocSerializableObject":[]},"V5R1CustomContext":{"V5R1Context":[],"BocSerializableObject":[]},"V5R1ClientContext":{"V5R1Context":[],"BocSerializableObject":[]},"KeyException":{"Exception":[]},"DictException":{"Exception":[]},"TonDartPluginException":{"Exception":[]},"SimpleLibrary":{"BocSerializableObject":[]},"StateInit":{"BocSerializableObject":[]},"TonSerialization":{"BocSerializableObject":[]},"AptosWeb3State":{"WalletStandardChainWeb3State":["AptosAddress","Web3AptosChainAccount","JSObject","Web3AptosChainIdnetifier"],"WalletStandardChainWeb3State.0":"AptosAddress","WalletStandardChainWeb3State.1":"Web3AptosChainAccount","WalletStandardChainWeb3State.2":"JSObject","WalletStandardChainWeb3State.3":"Web3AptosChainIdnetifier"},"JSAptosHandler":{"JSWalletStandardNetworkHandler":["AptosAddress","Web3AptosChainAccount","JSObject","Web3AptosChainIdnetifier","AptosWeb3State"],"JSWalletStandardNetworkHandler.4":"AptosWeb3State","JSWalletStandardNetworkHandler.3":"Web3AptosChainIdnetifier"},"BitcoinWeb3State":{"WalletStandardChainWeb3State":["BitcoinBaseAddress","Web3BitcoinChainAccount","JSObject","Web3ChainDefaultIdnetifier"],"WalletStandardChainWeb3State.0":"BitcoinBaseAddress","WalletStandardChainWeb3State.1":"Web3BitcoinChainAccount","WalletStandardChainWeb3State.2":"JSObject","WalletStandardChainWeb3State.3":"Web3ChainDefaultIdnetifier"},"JSBitcoinHandler":{"JSWalletStandardNetworkHandler":["BitcoinBaseAddress","Web3BitcoinChainAccount","JSObject","Web3ChainDefaultIdnetifier","BitcoinWeb3State"],"JSWalletStandardNetworkHandler.4":"BitcoinWeb3State","JSWalletStandardNetworkHandler.3":"Web3ChainDefaultIdnetifier"},"CosmosWeb3State":{"WalletStandardChainWeb3State":["CosmosBaseAddress","Web3CosmosChainAccount","JSObject","Web3CosmoshainIdnetifier"],"WalletStandardChainWeb3State.0":"CosmosBaseAddress","WalletStandardChainWeb3State.1":"Web3CosmosChainAccount","WalletStandardChainWeb3State.2":"JSObject","WalletStandardChainWeb3State.3":"Web3CosmoshainIdnetifier"},"JSCosmosHandler":{"JSWalletStandardNetworkHandler":["CosmosBaseAddress","Web3CosmosChainAccount","JSObject","Web3CosmoshainIdnetifier","CosmosWeb3State"],"JSWalletStandardNetworkHandler.4":"CosmosWeb3State","JSWalletStandardNetworkHandler.3":"Web3CosmoshainIdnetifier"},"EthereumWeb3State":{"WalletStandardChainWeb3State":["ETHAddress","Web3EthereumChainAccount","JSObject","Web3EthereumChainIdnetifier"],"WalletStandardChainWeb3State.0":"ETHAddress","WalletStandardChainWeb3State.1":"Web3EthereumChainAccount","WalletStandardChainWeb3State.2":"JSObject","WalletStandardChainWeb3State.3":"Web3EthereumChainIdnetifier"},"JSEthereumHandler":{"JSWalletStandardNetworkHandler":["ETHAddress","Web3EthereumChainAccount","JSObject","Web3EthereumChainIdnetifier","EthereumWeb3State"],"JSWalletStandardNetworkHandler.4":"EthereumWeb3State","JSWalletStandardNetworkHandler.3":"Web3EthereumChainIdnetifier"},"JSWalletStateAccount":{"Equatable":[]},"SolanaWeb3State":{"WalletStandardChainWeb3State":["SolAddress","Web3SolanaChainAccount","JSObject","Web3ChainDefaultIdnetifier"],"WalletStandardChainWeb3State.0":"SolAddress","WalletStandardChainWeb3State.1":"Web3SolanaChainAccount","WalletStandardChainWeb3State.2":"JSObject","WalletStandardChainWeb3State.3":"Web3ChainDefaultIdnetifier"},"JSSolanaHandler":{"JSWalletStandardNetworkHandler":["SolAddress","Web3SolanaChainAccount","JSObject","Web3ChainDefaultIdnetifier","SolanaWeb3State"],"JSWalletStandardNetworkHandler.4":"SolanaWeb3State","JSWalletStandardNetworkHandler.3":"Web3ChainDefaultIdnetifier"},"StellarWeb3State":{"WalletStandardChainWeb3State":["StellarAddress","Web3StellarChainAccount","JSObject","Web3ChainDefaultIdnetifier"],"WalletStandardChainWeb3State.0":"StellarAddress","WalletStandardChainWeb3State.1":"Web3StellarChainAccount","WalletStandardChainWeb3State.2":"JSObject","WalletStandardChainWeb3State.3":"Web3ChainDefaultIdnetifier"},"JSStellarHandler":{"JSWalletStandardNetworkHandler":["StellarAddress","Web3StellarChainAccount","JSObject","Web3ChainDefaultIdnetifier","StellarWeb3State"],"JSWalletStandardNetworkHandler.4":"StellarWeb3State","JSWalletStandardNetworkHandler.3":"Web3ChainDefaultIdnetifier"},"SubstrateWeb3State":{"WalletStandardChainWeb3State":["BaseSubstrateAddress","Web3SubstrateChainAccount","JSObject","Web3SubstrateChainIdnetifier"],"WalletStandardChainWeb3State.0":"BaseSubstrateAddress","WalletStandardChainWeb3State.1":"Web3SubstrateChainAccount","WalletStandardChainWeb3State.2":"JSObject","WalletStandardChainWeb3State.3":"Web3SubstrateChainIdnetifier"},"JSSubstrateHandler":{"JSWalletStandardNetworkHandler":["BaseSubstrateAddress","Web3SubstrateChainAccount","JSObject","Web3SubstrateChainIdnetifier","SubstrateWeb3State"],"JSWalletStandardNetworkHandler.4":"SubstrateWeb3State","JSWalletStandardNetworkHandler.3":"Web3SubstrateChainIdnetifier"},"SuiWeb3State":{"WalletStandardChainWeb3State":["SuiAddress","Web3SuiChainAccount","JSObject","Web3ChainDefaultIdnetifier"],"WalletStandardChainWeb3State.0":"SuiAddress","WalletStandardChainWeb3State.1":"Web3SuiChainAccount","WalletStandardChainWeb3State.2":"JSObject","WalletStandardChainWeb3State.3":"Web3ChainDefaultIdnetifier"},"JSSuiHandler":{"JSWalletStandardNetworkHandler":["SuiAddress","Web3SuiChainAccount","JSObject","Web3ChainDefaultIdnetifier","SuiWeb3State"],"JSWalletStandardNetworkHandler.4":"SuiWeb3State","JSWalletStandardNetworkHandler.3":"Web3ChainDefaultIdnetifier"},"TonWeb3State":{"WalletStandardChainWeb3State":["TonAddress","Web3TonChainAccount","JSObject","Web3ChainDefaultIdnetifier"],"WalletStandardChainWeb3State.0":"TonAddress","WalletStandardChainWeb3State.1":"Web3TonChainAccount","WalletStandardChainWeb3State.2":"JSObject","WalletStandardChainWeb3State.3":"Web3ChainDefaultIdnetifier"},"JSTonHandler":{"JSWalletStandardNetworkHandler":["TonAddress","Web3TonChainAccount","JSObject","Web3ChainDefaultIdnetifier","TonWeb3State"],"JSWalletStandardNetworkHandler.4":"TonWeb3State","JSWalletStandardNetworkHandler.3":"Web3ChainDefaultIdnetifier"},"TronWeb3State":{"WalletStandardChainWeb3State":["TronAddress","Web3TronChainAccount","JSObject","Web3TronChainIdnetifier"],"WalletStandardChainWeb3State.0":"TronAddress","WalletStandardChainWeb3State.1":"Web3TronChainAccount","WalletStandardChainWeb3State.2":"JSObject","WalletStandardChainWeb3State.3":"Web3TronChainIdnetifier"},"JSTronHandler":{"JSWalletStandardNetworkHandler":["TronAddress","Web3TronChainAccount","JSObject","Web3TronChainIdnetifier","TronWeb3State"],"JSWalletStandardNetworkHandler.4":"TronWeb3State","JSWalletStandardNetworkHandler.3":"Web3TronChainIdnetifier"},"CCTPV1MsgDepositForBurnResponse":{"CosmosMessage":[]},"CCTPV1MsgDepositForBurnWithCallerResponse":{"CosmosMessage":[]},"CCTPV1MsgReceiveMessageResponse":{"CosmosMessage":[]},"CCTPV1MsgSendMessageResponse":{"CosmosMessage":[]},"CCTPV1MsgSendMessageWithCallerResponse":{"CosmosMessage":[]},"EvmosVestingV2MsgClawbackResponse":{"CosmosMessage":[]},"EmptyServiceRequestResponse":{"CosmosMessage":[]},"MsgTransferResponse":{"CosmosMessage":[]},"OpInitOpHostV1MsgInitiateTokenDepositResponse":{"CosmosMessage":[]},"DistributionMsgWithdrawDelegatorRewardResponse":{"CosmosMessage":[]},"DistributionMsgWithdrawValidatorCommissionResponse":{"CosmosMessage":[]},"MsgBeginRedelegateResponse":{"CosmosMessage":[]},"MsgUndelegateResponse":{"CosmosMessage":[]},"AptosClient":{"NetworkClient":["AptosWalletTransaction","AptosAPIProvider"]},"BitcoinClient":{"NetworkClient":["BitcoinWalletTransaction","BaseBitcoinAPIProvider"]},"CosmosClient":{"NetworkClient":["CosmosWalletTransaction","CosmosAPIProvider"]},"EthereumClient":{"NetworkClient":["EthWalletTransaction","EthereumAPIProvider"]},"SolanaClient":{"NetworkClient":["SolanaWalletTransaction","SolanaAPIProvider"]},"StellarClient":{"NetworkClient":["StellarWalletTransaction","StellarAPIProvider"]},"SubstrateClient":{"NetworkClient":["SubstrateWalletTransaction","SubstrateAPIProvider"]},"SuiClient":{"NetworkClient":["SuiWalletTransaction","SuiAPIProvider"]},"TonClient":{"NetworkClient":["TonWalletTransaction","TonAPIProvider"]},"TronClient":{"NetworkClient":["TronWalletTransaction","TronAPIProvider"]},"AptosAPIProvider":{"APIProvider":[],"Equatable":[]},"BaseBitcoinAPIProvider":{"APIProvider":[],"Equatable":[]},"CosmosAPIProvider":{"APIProvider":[],"Equatable":[]},"SolanaAPIProvider":{"APIProvider":[],"Equatable":[]},"StellarAPIProvider":{"APIProvider":[],"Equatable":[]},"SubstrateAPIProvider":{"APIProvider":[],"Equatable":[]},"SuiAPIProvider":{"APIProvider":[],"Equatable":[]},"TonAPIProvider":{"APIProvider":[],"Equatable":[]},"TronAPIProvider":{"APIProvider":[],"Equatable":[]},"ContactCore":{"Equatable":[]},"AptosContact":{"ContactCore":["AptosAddress"],"Equatable":[]},"BitcoinContact":{"ContactCore":["BitcoinBaseAddress"],"Equatable":[]},"CosmosContact":{"ContactCore":["CosmosBaseAddress"],"Equatable":[]},"EthereumContact":{"ContactCore":["ETHAddress"],"Equatable":[]},"SolanaContact":{"ContactCore":["SolAddress"],"Equatable":[]},"StellarContact":{"ContactCore":["StellarAddress"],"Equatable":[]},"SubstrateContact":{"ContactCore":["BaseSubstrateAddress"],"Equatable":[]},"SuiContact":{"ContactCore":["SuiAddress"],"Equatable":[]},"TonContact":{"ContactCore":["TonAddress"],"Equatable":[]},"TronContact":{"ContactCore":["TronAddress"],"Equatable":[]},"WalletNetwork":{"Equatable":[]},"WalletBitcoinNetwork":{"WalletNetwork":["BitcoinParams"],"Equatable":[]},"WalletEthereumNetwork":{"WalletNetwork":["EthereumNetworkParams"],"Equatable":[]},"WalletTronNetwork":{"WalletNetwork":["TronNetworkParams"],"Equatable":[]},"WalletSolanaNetwork":{"WalletNetwork":["SolanaNetworkParams"],"Equatable":[]},"WalletCosmosNetwork":{"WalletNetwork":["CosmosNetworkParams"],"Equatable":[]},"WalletTonNetwork":{"WalletNetwork":["TonNetworkParams"],"Equatable":[]},"WalletSubstrateNetwork":{"WalletNetwork":["SubstrateNetworkParams"],"Equatable":[]},"WalletStellarNetwork":{"WalletNetwork":["StellarNetworkParams"],"Equatable":[]},"WalletAptosNetwork":{"WalletNetwork":["AptosNetworkParams"],"Equatable":[]},"WalletSuiNetwork":{"WalletNetwork":["SuiNetworkParams"],"Equatable":[]},"BitcoinParams":{"NetworkCoinParams":["BaseBitcoinAPIProvider"]},"CosmosNetworkParams":{"NetworkCoinParams":["CosmosAPIProvider"]},"EthereumNetworkParams":{"NetworkCoinParams":["EthereumAPIProvider"]},"SubstrateNetworkParams":{"NetworkCoinParams":["SubstrateAPIProvider"]},"TonNetworkParams":{"NetworkCoinParams":["TonAPIProvider"]},"TronNetworkParams":{"NetworkCoinParams":["TronAPIProvider"]},"ChainTransaction":{"Equatable":[]},"AptosWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"BitcoinWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"CosmosWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"EthWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"SolanaWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"StellarWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"SubstrateWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"SuiWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"TonWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"TronWalletTransaction":{"ChainTransaction":[],"Equatable":[]},"Web3Chain":{"Equatable":[]},"Web3AptosChain":{"Web3Chain":["AptosAddress","AptosChain","IAptosAddress","Web3AptosChainAccount","WalletAptosNetwork"],"Equatable":[]},"Web3BitcoinChain":{"Web3Chain":["BitcoinBaseAddress","BitcoinChain","IBitcoinAddress","Web3BitcoinChainAccount","WalletBitcoinNetwork"],"Equatable":[]},"Web3CosmosChain":{"Web3Chain":["CosmosBaseAddress","CosmosChain","ICosmosAddress","Web3CosmosChainAccount","WalletCosmosNetwork"],"Equatable":[]},"Web3EthereumChain":{"Web3Chain":["ETHAddress","EthereumChain","IEthAddress","Web3EthereumChainAccount","WalletEthereumNetwork"],"Equatable":[]},"Web3SolanaChain":{"Web3Chain":["SolAddress","SolanaChain","ISolanaAddress","Web3SolanaChainAccount","WalletSolanaNetwork"],"Equatable":[]},"Web3StellarChain":{"Web3Chain":["StellarAddress","StellarChain","IStellarAddress","Web3StellarChainAccount","WalletStellarNetwork"],"Equatable":[]},"Web3SubstrateChain":{"Web3Chain":["BaseSubstrateAddress","SubstrateChain","ISubstrateAddress","Web3SubstrateChainAccount","WalletSubstrateNetwork"],"Equatable":[]},"Web3SuiChain":{"Web3Chain":["SuiAddress","SuiChain","ISuiAddress","Web3SuiChainAccount","WalletSuiNetwork"],"Equatable":[]},"Web3TonChain":{"Web3Chain":["TonAddress","TheOpenNetworkChain","ITonAddress","Web3TonChainAccount","WalletTonNetwork"],"Equatable":[]},"Web3TronChain":{"Web3Chain":["TronAddress","TronChain","ITronAddress","Web3TronChainAccount","WalletTronNetwork"],"Equatable":[]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"UnmodifiableListBase":1,"__CastListBase__CastIterableBase_ListMixin":2,"NativeTypedArray":1,"_DelayedEvent":1,"UnmodifiableMapBase":2,"Converter":2,"BaseProvider":1,"CCTPV1Service":1,"EvmosService":1,"IbcService":1,"OpInitService":1,"BankV1Beta1Service":1,"CrisisV1Beta1Service":1,"DistributionV1Beta1Service":1,"GovV1Beta1Service":1,"SlashingV1Beta1Service":1,"StakingV1Beta1Service":1,"VestingV1Beta1Service":1,"CosmosSDKService":1,"AptosScriptArguments":1,"EthereumRequest":2,"BaseSocketService":1,"BalanceCore":2,"NewAccountParams":1,"BaseBitcoinNewAddressParams":1,"TokenCore":2,"ChainConfig":1,"Web3WalletRequestParams":1,"SubstrateMetadata":1,"ScaleTypeDef":1,"LatestMetadataInterface":1,"PalletStorageMetadata":1,"TonContract":1,"VerionedProviderImpl":2,"NetworkClient":2,"BitcoinClient":1,"ContactCore":1,"WalletNetwork":1,"NetworkCoinParams":1}'));
  var string$ = {
    x00_____: "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\u03f6\x00\u0404\u03f4 \u03f4\u03f6\u01f6\u01f6\u03f6\u03fc\u01f4\u03ff\u03ff\u0584\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u05d4\u01f4\x00\u01f4\x00\u0504\u05c4\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u0400\x00\u0400\u0200\u03f7\u0200\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u03ff\u0200\u0200\u0200\u03f7\x00",
    x20must_: " must not be greater than the number of characters in the file, ",
    x27_has_: "' has been assigned during initialization.",
    x27amoun: "'amount' must be a list of objects containing valid cosmos coin.",
    x3723700: "7237005577332262213973186563042994240857116359379907606001950938285454250989",
    A_vali: "A valid script is a composition of opcodes, hexadecimal strings, and integers arranged in a structured list.",
    ABCDEF: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
    Cannotff: "Cannot extract a file path from a URI with a fragment component",
    Cannotfq: "Cannot extract a file path from a URI with a query component",
    Cannotn: "Cannot extract a non-Windows file path from a file URI with an authority",
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
    Failed: "Failed to convert unknown message to Protobuf.",
    InvaliPMd: "Invalid PSBT MuSig2 Participant Public Keys data",
    InvaliPMt: "Invalid PSBT MuSig2 Participant Public Keys type flag",
    InvaliPP: "Invalid PSBT Proprietary Use Type type flag",
    InvaliPTI: "Invalid PSBT Taproot Internal Key type flag",
    InvaliPTK: "Invalid PSBT Taproot Key BIP 32 Derivation Path type flag",
    InvaliT: "Invalid Taproot Key BIP 32 Derivation Path data.",
    Invalil: "Invalid list casting. only use `valueAsList` method for list casting.",
    Invalim: "Invalid map casting. only use `asMap` method for casting Map<String,dynamic>.",
    Invalita: "Invalid tranaction: Failed to parse transaction object ",
    Invalits: "Invalid transaction chain id. Mismatch between account and transaction chain ID.",
    Negati: "Negative value cannot be encoded with unsigned layout.",
    The_re: "The requested method and/or account has not been authorized by the user.",
    The_va: "The values and field IDs must have the same length.",
    Time_i: "Time including microseconds is outside valid range",
    Unsupp: "Unsupported Protobuf format. Unable to convert unknown Amino message to Protobuf.",
    Value_e: "Value exceeds the maximum size for encoding with this layout.",
    Value_o3: "Value overflows 32-bit signed integer range",
    Value_o6: "Value overflows 64-bit signed integer range",
    cosmos: "cosmos-sdk/MsgWithdrawValidatorCommission",
    encode: "encoded variant overruns containing union",
    handle: "handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace.",
    unable: "unable to determine span for unrecognized variant"
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      $env_1_1_BigInt: findType("@<BigInt>"),
      $env_1_1_Map_String_dynamic: findType("@<Map<String,@>>"),
      $env_1_1_dynamic: findType("@<@>"),
      $env_1_1_void: findType("@<~>"),
      APPImage: findType("APPImage"),
      APPIsolate: findType("APPIsolate"),
      AccountId: findType("AccountId"),
      AccountType: findType("AccountType"),
      AddressDerivationType: findType("AddressDerivationType"),
      AminoMessage_CosmosMessage: findType("AminoMessage<CosmosMessage>"),
      AminoTypes: findType("AminoTypes"),
      Any: findType("Any"),
      ApiRequest: findType("ApiRequest"),
      AptosAddress: findType("AptosAddress"),
      AptosChainType: findType("AptosChainType"),
      AptosEntryFunctionArguments_dynamic: findType("AptosEntryFunctionArguments<@>"),
      AptosMultisigTransactionPayload: findType("AptosMultisigTransactionPayload"),
      AptosMultisigTransactionPayloads: findType("AptosMultisigTransactionPayloads"),
      AptosScriptArguments_dynamic: findType("AptosScriptArguments<@>"),
      AptosTransactionPayloads: findType("AptosTransactionPayloads"),
      AptosTypeTag: findType("AptosTypeTag"),
      AptosTypeTags: findType("AptosTypeTags"),
      AptosWeb3State: findType("AptosWeb3State"),
      AssetIssueContractFrozenSupply: findType("AssetIssueContractFrozenSupply"),
      AsyncError: findType("AsyncError"),
      Authority: findType("Authority"),
      Base64Codec: findType("Base64Codec"),
      BaseResponse: findType("BaseResponse"),
      BaseServiceProtocol_EthereumAPIProvider: findType("BaseServiceProtocol<EthereumAPIProvider>"),
      BaseServiceResponse_dynamic: findType("BaseServiceResponse<@>"),
      BaseSubstrateAddress: findType("BaseSubstrateAddress"),
      BasedUtxoNetwork: findType("BasedUtxoNetwork"),
      Bech32Encodings: findType("Bech32Encodings"),
      BigInt: findType("BigInt"),
      Bip32KeyIndex: findType("Bip32KeyIndex"),
      Bip44Coins: findType("Bip44Coins"),
      Bip49Coins: findType("Bip49Coins"),
      Bip84Coins: findType("Bip84Coins"),
      Bip86Coins: findType("Bip86Coins"),
      BipCoinConfig: findType("BipCoinConfig"),
      BipProposal: findType("BipProposal"),
      BitcoinAddressType: findType("BitcoinAddressType"),
      BitcoinBaseAddress: findType("BitcoinBaseAddress"),
      BitcoinCashNetwork: findType("BitcoinCashNetwork"),
      BitcoinNetwork: findType("BitcoinNetwork"),
      BitcoinNetworkAddress_BasedUtxoNetwork: findType("BitcoinNetworkAddress<BasedUtxoNetwork>"),
      BitcoinOpcode: findType("BitcoinOpcode"),
      BitcoinSVNetwork: findType("BitcoinSVNetwork"),
      ByteBuffer: findType("ByteBuffer"),
      ByteData: findType("ByteData"),
      CaseInsensitiveMap_String: findType("CaseInsensitiveMap<String>"),
      CborBase64Types: findType("CborBase64Types"),
      CborBytesValue: findType("CborBytesValue"),
      CborListValue_CborBytesValue: findType("CborListValue<CborBytesValue>"),
      CborListValue_CborObject: findType("CborListValue<CborObject>"),
      CborListValue_CborStringValue: findType("CborListValue<CborStringValue>"),
      CborListValue_CborTagValue_dynamic: findType("CborListValue<CborTagValue<@>>"),
      CborListValue_Object: findType("CborListValue<Object>"),
      CborListValue_String: findType("CborListValue<String>"),
      CborListValue_dynamic: findType("CborListValue<@>"),
      CborListValue_nullable_CborObject: findType("CborListValue<CborObject?>"),
      CborListValue_nullable_Object: findType("CborListValue<Object?>"),
      CborListValue_nullable_String: findType("CborListValue<String?>"),
      CborMapValue_CborObject_CborObject: findType("CborMapValue<CborObject,CborObject>"),
      CborNumeric: findType("CborNumeric"),
      CborObject: findType("CborObject"),
      CborSetValue_CborObject: findType("CborSetValue<CborObject>"),
      CborStringValue: findType("CborStringValue"),
      CborTagValue_CborBigFloatValue: findType("CborTagValue<CborBigFloatValue>"),
      CborTagValue_CborDecimalFracValue: findType("CborTagValue<CborDecimalFracValue>"),
      CborTagValue_CborDynamicBytesValue: findType("CborTagValue<CborDynamicBytesValue>"),
      CborTagValue_CborEpochIntValue: findType("CborTagValue<CborEpochIntValue>"),
      CborTagValue_CborIndefiniteStringValue: findType("CborTagValue<CborIndefiniteStringValue>"),
      CborTagValue_CborListValue_CborObject: findType("CborTagValue<CborListValue<CborObject>>"),
      CborTagValue_CborMapValue_CborObject_CborObject: findType("CborTagValue<CborMapValue<CborObject,CborObject>>"),
      CborTagValue_CborNumeric: findType("CborTagValue<CborNumeric>"),
      CborTagValue_CborObject: findType("CborTagValue<CborObject>"),
      CborTagValue_CborSetValue_CborObject: findType("CborTagValue<CborSetValue<CborObject>>"),
      CborTagValue_dynamic: findType("CborTagValue<@>"),
      Cell: findType("Cell"),
      CellType: findType("CellType"),
      ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction: findType("ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>"),
      Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction: findType("Chain<APIProvider,NetworkCoinParams<APIProvider>,@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,WalletNetwork<NetworkCoinParams<APIProvider>>,NetworkClient<ChainTransaction,APIProvider>,ChainStorageKey,ChainConfig<ChainStorageKey>,ChainTransaction,ContactCore<@>,NewAccountParams<ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>>>"),
      Cip1852Coins: findType("Cip1852Coins"),
      CodeUnits: findType("CodeUnits"),
      Coin: findType("Coin"),
      CoingeckoCoin: findType("CoingeckoCoin"),
      Commitment: findType("Commitment"),
      Comparable_dynamic: findType("Comparable<@>"),
      Completer_dynamic: findType("Completer<@>"),
      ConstantStringMap_String_String: findType("ConstantStringMap<String,String>"),
      ContentType: findType("ContentType"),
      CosmosBaseAddress: findType("CosmosBaseAddress"),
      CosmosFeeToken: findType("CosmosFeeToken"),
      CosmosKeysAlgs: findType("CosmosKeysAlgs"),
      CryptoCoins_CoinConfig: findType("CryptoCoins<CoinConfig>"),
      CurveFp: findType("CurveFp"),
      CustomCoins: findType("CustomCoins"),
      CustomLayout_int_bool: findType("CustomLayout<int,bool>"),
      CustomLayout_of_List_int_and_String: findType("CustomLayout<List<int>,String>"),
      CustomLayout_of_Map_String_dynamic_and_Map_String_dynamic: findType("CustomLayout<Map<String,@>,Map<String,@>>"),
      CustomValueMetadata15: findType("CustomValueMetadata15"),
      DashNetwork: findType("DashNetwork"),
      DateTime: findType("DateTime"),
      DeprecationInfoTypes: findType("DeprecationInfoTypes"),
      DeprecationStatus: findType("DeprecationStatus"),
      DeprecationStatusTypes: findType("DeprecationStatusTypes"),
      DictionaryKey_BigInt: findType("DictionaryKey<BigInt>"),
      DigestAuthHeadersAlg: findType("DigestAuthHeadersAlg"),
      DigestAuthQop: findType("DigestAuthQop"),
      DigestProviderAuthenticated: findType("DigestProviderAuthenticated"),
      DogecoinNetwork: findType("DogecoinNetwork"),
      Duration: findType("Duration"),
      ECPublic: findType("ECPublic"),
      EIP712Base: findType("EIP712Base"),
      EIP712Version: findType("EIP712Version"),
      ETHAddress: findType("ETHAddress"),
      ETHTransactionType: findType("ETHTransactionType"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Eip712TypeDetails: findType("Eip712TypeDetails"),
      Eip712TypedData: findType("Eip712TypedData"),
      Eip712TypedDataV1: findType("Eip712TypedDataV1"),
      ElectraProtocolNetwork: findType("ElectraProtocolNetwork"),
      Equatable: findType("Equatable"),
      Error: findType("Error"),
      EthereumAPIProvider: findType("EthereumAPIProvider"),
      EthereumMethods: findType("EthereumMethods"),
      EthereumRequestDynamic_String: findType("EthereumRequestDynamic<String>"),
      EthereumRequestDynamic_dynamic: findType("EthereumRequestDynamic<@>"),
      EthereumSubscribeResult: findType("EthereumSubscribeResult"),
      EthereumWeb3State: findType("EthereumWeb3State"),
      EthereumWebsocketService: findType("EthereumWebsocketService"),
      EvmosErc20V1Params: findType("EvmosErc20V1Params"),
      EvmosErc20V1Types: findType("EvmosErc20V1Types"),
      EvmosEthermintEVMV1Log: findType("EvmosEthermintEVMV1Log"),
      EvmosInflationV1ExponentialCalculation: findType("EvmosInflationV1ExponentialCalculation"),
      EvmosInflationV1InflationDistribution: findType("EvmosInflationV1InflationDistribution"),
      EvmosInflationV1Params: findType("EvmosInflationV1Params"),
      EvmosRevenueV1Params: findType("EvmosRevenueV1Params"),
      EvmosVestingV1Period: findType("EvmosVestingV1Period"),
      Exception: findType("Exception"),
      ExternalLayout: findType("ExternalLayout"),
      Float32List: findType("Float32List"),
      Float64List: findType("Float64List"),
      FormatException: findType("FormatException"),
      FriendlyAddressFlags: findType("FriendlyAddressFlags"),
      Function: findType("Function"),
      FutureGroup_dynamic: findType("FutureGroup<@>"),
      FutureOr_Map_String_dynamic: findType("Map<String,@>/"),
      Future_HTTPCallerResponse_Function: findType("Future<HTTPCallerResponse>()"),
      Future_Map_String_dynamic_Function: findType("Future<Map<String,@>>()"),
      Future_Response_Function_$named_$req_client_RetryClient_and_$req_headers_nullable_Map_String_String_and_$req_uri_Uri: findType("Future<Response>({client!RetryClient,headers!Map<String,String>?,uri!Uri})"),
      Future_WalletStandardChainWeb3State_of_dynamic_and_Web3ChainAccount_dynamic_and_JSObject_and_Web3ChainIdnetifier: findType("Future<WalletStandardChainWeb3State<@,Web3ChainAccount<@>,JSObject,Web3ChainIdnetifier>>"),
      Future_bool: findType("Future<bool>"),
      Future_nullable_JSObject: findType("Future<JSObject?>"),
      GovVoteOption: findType("GovVoteOption"),
      HTTPCallerResponse: findType("HTTPCallerResponse"),
      HTTPClientType: findType("HTTPClientType"),
      HTTPRequestType: findType("HTTPRequestType"),
      HTTPResponseType: findType("HTTPResponseType"),
      HTTPWorkerMessageCompleter: findType("HTTPWorkerMessageCompleter"),
      HTTPWorkerResponse: findType("HTTPWorkerResponse"),
      HTTPWorkerResponseError_dynamic: findType("HTTPWorkerResponseError<@>"),
      HTTPWorkerResponseSuccess_dynamic: findType("HTTPWorkerResponseSuccess<@>"),
      IbcClientHeight: findType("IbcClientHeight"),
      Input: findType("Input"),
      Int16List: findType("Int16List"),
      Int32List: findType("Int32List"),
      Int8List: findType("Int8List"),
      IntegerBalance: findType("IntegerBalance"),
      Iterable_String: findType("Iterable<String>"),
      Iterable_double: findType("Iterable<double>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      JSArray_AddressTableLookup: findType("JSArray<AddressTableLookup>"),
      JSArray_AminoMessage_CosmosMessage: findType("JSArray<AminoMessage<CosmosMessage>>"),
      JSArray_ApiRequest: findType("JSArray<ApiRequest>"),
      JSArray_BigInt: findType("JSArray<BigInt>"),
      JSArray_BitcoinAddressType: findType("JSArray<BitcoinAddressType>"),
      JSArray_CborBytesValue: findType("JSArray<CborBytesValue>"),
      JSArray_CborObject: findType("JSArray<CborObject>"),
      JSArray_Cell: findType("JSArray<Cell>"),
      JSArray_Coin: findType("JSArray<Coin>"),
      JSArray_CompiledInstruction: findType("JSArray<CompiledInstruction>"),
      JSArray_DigestAuthHeaders: findType("JSArray<DigestAuthHeaders>"),
      JSArray_ECPublic: findType("JSArray<ECPublic>"),
      JSArray_EvmosEthermintEVMV1Log: findType("JSArray<EvmosEthermintEVMV1Log>"),
      JSArray_FriendlyAddressFlags: findType("JSArray<FriendlyAddressFlags>"),
      JSArray_JSNetworkEventType: findType("JSArray<JSNetworkEventType>"),
      JSArray_JSObject: findType("JSArray<JSObject>"),
      JSArray_Layout_dynamic: findType("JSArray<Layout<@>>"),
      JSArray_LazyVariantModel_dynamic: findType("JSArray<LazyVariantModel<@>>"),
      JSArray_List_BigInt: findType("JSArray<List<BigInt>>"),
      JSArray_List_PsbtKeyPair: findType("JSArray<List<PsbtKeyPair>>"),
      JSArray_List_int: findType("JSArray<List<int>>"),
      JSArray_MapEntry_String_dynamic: findType("JSArray<MapEntry<String,@>>"),
      JSArray_Map_String_dynamic: findType("JSArray<Map<String,@>>"),
      JSArray_Object: findType("JSArray<Object>"),
      JSArray_Permission: findType("JSArray<Permission>"),
      JSArray_ProtocolBufferDecoderResult_dynamic: findType("JSArray<ProtocolBufferDecoderResult<@>>"),
      JSArray_ProtocolBufferDecoderResult_dynamic_2: findType("JSArray<ProtocolBufferDecoderResult0<@>>"),
      JSArray_Pruned: findType("JSArray<Pruned>"),
      JSArray_PsbtKeyPair: findType("JSArray<PsbtKeyPair>"),
      JSArray_PsbtTapTree: findType("JSArray<PsbtTapTree>"),
      JSArray_Result_List_int: findType("JSArray<Result<List<int>>>"),
      JSArray_SmartContractABIEntry: findType("JSArray<SmartContractABIEntry>"),
      JSArray_SolAddress: findType("JSArray<SolAddress>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_TxInput: findType("JSArray<TxInput>"),
      JSArray_TxOutput: findType("JSArray<TxOutput>"),
      JSArray_TxWitnessInput: findType("JSArray<TxWitnessInput>"),
      JSArray_WalletEventTarget: findType("JSArray<WalletEventTarget>"),
      JSArray_Web3AptosChainIdnetifier: findType("JSArray<Web3AptosChainIdnetifier>"),
      JSArray_Web3BitcoinChainAccount: findType("JSArray<Web3BitcoinChainAccount>"),
      JSArray_Web3ChainDefaultIdnetifier: findType("JSArray<Web3ChainDefaultIdnetifier>"),
      JSArray_Web3CosmoshainIdnetifier: findType("JSArray<Web3CosmoshainIdnetifier>"),
      JSArray_Web3EthereumChainIdnetifier: findType("JSArray<Web3EthereumChainIdnetifier>"),
      JSArray_Web3EthreumTransactionAccessList: findType("JSArray<Web3EthreumTransactionAccessList>"),
      JSArray_Web3SolanaSendTransactionData: findType("JSArray<Web3SolanaSendTransactionData>"),
      JSArray_Web3SolanaSignInParams: findType("JSArray<Web3SolanaSignInParams>"),
      JSArray_Web3SolanaSignMessageParams: findType("JSArray<Web3SolanaSignMessageParams>"),
      JSArray_Web3SubstrateChainIdnetifier: findType("JSArray<Web3SubstrateChainIdnetifier>"),
      JSArray_Web3TonTransactionMessage: findType("JSArray<Web3TonTransactionMessage>"),
      JSArray_Web3TronChainIdnetifier: findType("JSArray<Web3TronChainIdnetifier>"),
      JSArray__Highlight: findType("JSArray<_Highlight>"),
      JSArray__Line: findType("JSArray<_Line>"),
      JSArray_double: findType("JSArray<double>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_nullable_CborObject: findType("JSArray<CborObject?>"),
      JSArray_nullable_Object: findType("JSArray<Object?>"),
      JSArray_nullable_String: findType("JSArray<String?>"),
      JSArray_nullable_int: findType("JSArray<int?>"),
      JSArray_of_void_Function_EthereumSubscribeResult: findType("JSArray<~(EthereumSubscribeResult)>"),
      JSClientType: findType("JSClientType"),
      JSEventType: findType("JSEventType"),
      JSIndexable_dynamic: findType("JSIndexable<@>"),
      JSNetworkEventType: findType("JSNetworkEventType"),
      JSNull: findType("JSNull"),
      JSObject: findType("JSObject"),
      JSWalletResponseType: findType("JSWalletResponseType"),
      JSWalletStandardNetworkHandler_of_dynamic_and_Web3ChainAccount_dynamic_and_JSObject_and_Web3ChainIdnetifier_and_WalletStandardChainWeb3State_of_dynamic_and_Web3ChainAccount_dynamic_and_JSObject_and_Web3ChainIdnetifier: findType("JSWalletStandardNetworkHandler<@,Web3ChainAccount<@>,JSObject,Web3ChainIdnetifier,WalletStandardChainWeb3State<@,Web3ChainAccount<@>,JSObject,Web3ChainIdnetifier>>"),
      JSWalletStateAccount_AptosAddress_Web3AptosChainAccount_JSObject: findType("JSWalletStateAccount<AptosAddress,Web3AptosChainAccount,JSObject>"),
      JSWalletStateAccount_BaseSubstrateAddress_Web3SubstrateChainAccount_JSObject: findType("JSWalletStateAccount<BaseSubstrateAddress,Web3SubstrateChainAccount,JSObject>"),
      JSWalletStateAccount_BitcoinBaseAddress_Web3BitcoinChainAccount_JSObject: findType("JSWalletStateAccount<BitcoinBaseAddress,Web3BitcoinChainAccount,JSObject>"),
      JSWalletStateAccount_CosmosBaseAddress_Web3CosmosChainAccount_JSObject: findType("JSWalletStateAccount<CosmosBaseAddress,Web3CosmosChainAccount,JSObject>"),
      JSWalletStateAccount_ETHAddress_Web3EthereumChainAccount_JSObject: findType("JSWalletStateAccount<ETHAddress,Web3EthereumChainAccount,JSObject>"),
      JSWalletStateAccount_SolAddress_Web3SolanaChainAccount_JSObject: findType("JSWalletStateAccount<SolAddress,Web3SolanaChainAccount,JSObject>"),
      JSWalletStateAccount_StellarAddress_Web3StellarChainAccount_JSObject: findType("JSWalletStateAccount<StellarAddress,Web3StellarChainAccount,JSObject>"),
      JSWalletStateAccount_SuiAddress_Web3SuiChainAccount_JSObject: findType("JSWalletStateAccount<SuiAddress,Web3SuiChainAccount,JSObject>"),
      JSWalletStateAccount_TonAddress_Web3TonChainAccount_JSObject: findType("JSWalletStateAccount<TonAddress,Web3TonChainAccount,JSObject>"),
      JSWalletStateAccount_TronAddress_Web3TronChainAccount_JSObject: findType("JSWalletStateAccount<TronAddress,Web3TronChainAccount,JSObject>"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      LayoutDecodeResult_BigInt: findType("LayoutDecodeResult<BigInt>"),
      LayoutDecodeResult_List_int: findType("LayoutDecodeResult<List<int>>"),
      LayoutDecodeResult_MapEntry_dynamic_dynamic: findType("LayoutDecodeResult<MapEntry<@,@>>"),
      LayoutDecodeResult_Map_String_dynamic: findType("LayoutDecodeResult<Map<String,@>>"),
      LayoutDecodeResult_int: findType("LayoutDecodeResult<int>"),
      Layout_dynamic: findType("Layout<@>"),
      LazyVariantLayout: findType("LazyVariantLayout"),
      LazyVariantModel_dynamic: findType("LazyVariantModel<@>"),
      ListMapView_String: findType("ListMapView<String>"),
      List_AptosAddress: findType("List<AptosAddress>"),
      List_BigInt: findType("List<BigInt>"),
      List_Eip712TypeDetails: findType("List<Eip712TypeDetails>"),
      List_JSObject: findType("List<JSObject>"),
      List_List_int: findType("List<List<int>>"),
      List_Map_String_dynamic: findType("List<Map<String,@>>"),
      List_Object: findType("List<Object>"),
      List_PsbtInputData: findType("List<PsbtInputData>"),
      List_PsbtKeyPair: findType("List<PsbtKeyPair>"),
      List_PsbtOutputData: findType("List<PsbtOutputData>"),
      List_String: findType("List<String>"),
      List_Web3ChainIdnetifier: findType("List<Web3ChainIdnetifier>"),
      List_double: findType("List<double>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      List_nullable__Highlight: findType("List<_Highlight?>"),
      LitecoinNetwork: findType("LitecoinNetwork"),
      MapEntry_BigInt_BigInt: findType("MapEntry<BigInt,BigInt>"),
      MapEntry_String_String: findType("MapEntry<String,String>"),
      MapEntry_String_dynamic: findType("MapEntry<String,@>"),
      MapEntry_dynamic_dynamic: findType("MapEntry<@,@>"),
      MapEntry_int_DeprecationStatus: findType("MapEntry<int,DeprecationStatus>"),
      MapEntry_int_PalletMetadataV16: findType("MapEntry<int,PalletMetadataV16>"),
      MapEntry_int_PortableTypeV14: findType("MapEntry<int,PortableTypeV14>"),
      MapEntry_int_String: findType("MapEntry<int,String>"),
      MapEntry_of_Object_and_List__Highlight: findType("MapEntry<Object,List<_Highlight>>"),
      MapEntry_of_String_and_List_Map_String_dynamic: findType("MapEntry<String,List<Map<String,@>>>"),
      MapEntry_of_String_and_Map_String_dynamic: findType("MapEntry<String,Map<String,@>>"),
      MapEntry_of_dynamic_and_nullable_Object: findType("MapEntry<@,Object?>"),
      MapEntry_of_int_and_List_int: findType("MapEntry<int,List<int>>"),
      MapEntry_of_int_and_Map_String_dynamic: findType("MapEntry<int,Map<String,@>>"),
      Map_BigInt_SimpleLibrary: findType("Map<BigInt,SimpleLibrary>"),
      Map_String_String: findType("Map<String,String>"),
      Map_String_dynamic: findType("Map<String,@>"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      MappedListIterable_PrimitiveTypes_String: findType("MappedListIterable<PrimitiveTypes,String>"),
      MappedListIterable_String_String: findType("MappedListIterable<String,String>"),
      MappedListIterable_String_dynamic: findType("MappedListIterable<String,@>"),
      MappedListIterable_Web3SuiObjectArgs_String: findType("MappedListIterable<Web3SuiObjectArgs,String>"),
      MappedListIterable_Web3SuiTransactionCallArgs_String: findType("MappedListIterable<Web3SuiTransactionCallArgs,String>"),
      MappedListIterable_Web3SuiTransactionCommands_String: findType("MappedListIterable<Web3SuiTransactionCommands,String>"),
      MappedListIterable_Web3SuiTransactionExpirations_String: findType("MappedListIterable<Web3SuiTransactionExpirations,String>"),
      MediaType: findType("MediaType"),
      MessageCompleter: findType("MessageCompleter"),
      MoneroCoins: findType("MoneroCoins"),
      MoveArgumentType: findType("MoveArgumentType"),
      MoveArgument_dynamic: findType("MoveArgument<@>"),
      NativeByteBuffer: findType("NativeByteBuffer"),
      NativeTypedArrayOfDouble: findType("NativeTypedArrayOfDouble"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeUint8List: findType("NativeUint8List"),
      NetworkType: findType("NetworkType"),
      Null: findType("Null"),
      Object: findType("Object"),
      OpInitOpHostV1Types: findType("OpInitOpHostV1Types"),
      Output: findType("Output"),
      P2pkhAddressType: findType("P2pkhAddressType"),
      P2shAddressType: findType("P2shAddressType"),
      PaddingLayout_int: findType("PaddingLayout<int>"),
      PageMessageType: findType("PageMessageType"),
      PageRequestType: findType("PageRequestType"),
      PalletAssociatedTypeMetadata: findType("PalletAssociatedTypeMetadata"),
      PalletConstantMetadataV14: findType("PalletConstantMetadataV14"),
      PalletConstantMetadataV16: findType("PalletConstantMetadataV16"),
      PalletMetadataV14: findType("PalletMetadataV14"),
      PalletMetadataV15: findType("PalletMetadataV15"),
      PalletMetadataV16: findType("PalletMetadataV16"),
      PepeNetwork: findType("PepeNetwork"),
      Permission: findType("Permission"),
      PermissionType: findType("PermissionType"),
      PlatformWebScoket: findType("PlatformWebScoket"),
      PortableTypeV14: findType("PortableTypeV14"),
      PrimitiveTypes: findType("PrimitiveTypes"),
      ProtobufTimestamp: findType("ProtobufTimestamp"),
      ProtocolBufferDecoderResult_List_int: findType("ProtocolBufferDecoderResult0<List<int>>"),
      ProtocolBufferDecoderResult_dynamic: findType("ProtocolBufferDecoderResult<@>"),
      ProtocolBufferDecoderResult_dynamic_2: findType("ProtocolBufferDecoderResult0<@>"),
      ProviderAuthType: findType("ProviderAuthType"),
      ProviderAuthenticated: findType("ProviderAuthenticated"),
      Pruned: findType("Pruned"),
      PsbtBuilder: findType("PsbtBuilder"),
      PsbtGlobalData: findType("PsbtGlobalData"),
      PsbtGlobalTypes: findType("PsbtGlobalTypes"),
      PsbtInputBip32DerivationPath: findType("PsbtInputBip32DerivationPath"),
      PsbtInputData: findType("PsbtInputData"),
      PsbtInputFinalizedScriptSig: findType("PsbtInputFinalizedScriptSig"),
      PsbtInputFinalizedScriptWitness: findType("PsbtInputFinalizedScriptWitness"),
      PsbtInputHash160: findType("PsbtInputHash160"),
      PsbtInputHash256: findType("PsbtInputHash256"),
      PsbtInputMuSig2ParticipantPartialSignature: findType("PsbtInputMuSig2ParticipantPartialSignature"),
      PsbtInputMuSig2ParticipantPublicKeys: findType("PsbtInputMuSig2ParticipantPublicKeys"),
      PsbtInputMuSig2PublicNonce: findType("PsbtInputMuSig2PublicNonce"),
      PsbtInputNonWitnessUtxo: findType("PsbtInputNonWitnessUtxo"),
      PsbtInputPartialSig: findType("PsbtInputPartialSig"),
      PsbtInputPorCommitments: findType("PsbtInputPorCommitments"),
      PsbtInputPreviousTXID: findType("PsbtInputPreviousTXID"),
      PsbtInputProprietaryUseType: findType("PsbtInputProprietaryUseType"),
      PsbtInputRedeemScript: findType("PsbtInputRedeemScript"),
      PsbtInputRequiredHeightBasedLockTime: findType("PsbtInputRequiredHeightBasedLockTime"),
      PsbtInputRequiredTimeBasedLockTime: findType("PsbtInputRequiredTimeBasedLockTime"),
      PsbtInputRipemd160: findType("PsbtInputRipemd160"),
      PsbtInputSequenceNumber: findType("PsbtInputSequenceNumber"),
      PsbtInputSha256: findType("PsbtInputSha256"),
      PsbtInputSigHash: findType("PsbtInputSigHash"),
      PsbtInputSpentOutputIndex: findType("PsbtInputSpentOutputIndex"),
      PsbtInputTaprootInternalKey: findType("PsbtInputTaprootInternalKey"),
      PsbtInputTaprootKeyBip32DerivationPath: findType("PsbtInputTaprootKeyBip32DerivationPath"),
      PsbtInputTaprootKeySpendSignature: findType("PsbtInputTaprootKeySpendSignature"),
      PsbtInputTaprootLeafScript: findType("PsbtInputTaprootLeafScript"),
      PsbtInputTaprootMerkleRoot: findType("PsbtInputTaprootMerkleRoot"),
      PsbtInputTaprootScriptSpendSignature: findType("PsbtInputTaprootScriptSpendSignature"),
      PsbtInputTypes: findType("PsbtInputTypes"),
      PsbtInputWitnessScript: findType("PsbtInputWitnessScript"),
      PsbtInputWitnessUtxo: findType("PsbtInputWitnessUtxo"),
      PsbtKey: findType("PsbtKey"),
      PsbtKeyPair: findType("PsbtKeyPair"),
      PsbtOutputData: findType("PsbtOutputData"),
      PsbtOutputTypes: findType("PsbtOutputTypes"),
      PsbtTapTree: findType("PsbtTapTree"),
      PsbtVersion: findType("PsbtVersion"),
      ReceiveDescription: findType("ReceiveDescription"),
      Record: findType("Record"),
      Record_0: findType("+()"),
      Record_2_List_JSObject_and_List_String: findType("+(List<JSObject>,List<String>)"),
      Record_2_Web3MessageCore_and_nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider: findType("+(Web3MessageCore,Web3RequestParams<@,@,Chain<APIProvider,NetworkCoinParams<APIProvider>,@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,WalletNetwork<NetworkCoinParams<APIProvider>>,NetworkClient<ChainTransaction,APIProvider>,ChainStorageKey,ChainConfig<ChainStorageKey>,ChainTransaction,ContactCore<@>,NewAccountParams<ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>>>,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,Web3ChainAccount<@>,Web3Chain<@,Chain<APIProvider,NetworkCoinParams<APIProvider>,@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,WalletNetwork<NetworkCoinParams<APIProvider>>,NetworkClient<ChainTransaction,APIProvider>,ChainStorageKey,ChainConfig<ChainStorageKey>,ChainTransaction,ContactCore<@>,NewAccountParams<ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>>>,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,Web3ChainAccount<@>,WalletNetwork<NetworkCoinParams<APIProvider>>>>?)"),
      RegExpMatch: findType("RegExpMatch"),
      ResourceCode: findType("ResourceCode"),
      Response: findType("Response"),
      RetryClient: findType("RetryClient"),
      ReversedListIterable_String: findType("ReversedListIterable<String>"),
      ReversedListIterable_int: findType("ReversedListIterable<int>"),
      Runes: findType("Runes"),
      RuntimeApiMetadataV15: findType("RuntimeApiMetadataV15"),
      RuntimeApiMetadataV16: findType("RuntimeApiMetadataV16"),
      RuntimeApiMethodMetadataV15: findType("RuntimeApiMethodMetadataV15"),
      RuntimeApiMethodMetadataV16: findType("RuntimeApiMethodMetadataV16"),
      RuntimeApiMethodParamMetadataV15: findType("RuntimeApiMethodParamMetadataV15"),
      Script: findType("Script"),
      SeedTypes: findType("SeedTypes"),
      ServiceErrorResponse_dynamic: findType("ServiceErrorResponse<@>"),
      ServiceMessage_CosmosMessage: findType("ServiceMessage<CosmosMessage>"),
      ServiceProtocol: findType("ServiceProtocol"),
      Si1Field: findType("Si1Field"),
      Si1TypeDefsIndexesConst: findType("Si1TypeDefsIndexesConst"),
      Si1TypeParameter: findType("Si1TypeParameter"),
      Si1Variant: findType("Si1Variant"),
      SignedExtensionMetadataV14: findType("SignedExtensionMetadataV14"),
      SimpleLibrary: findType("SimpleLibrary"),
      SmartContractABI: findType("SmartContractABI"),
      SmartContractABIEntry: findType("SmartContractABIEntry"),
      SmartContractAbiEntryType: findType("SmartContractAbiEntryType"),
      SmartContractAbiStateMutabilityType: findType("SmartContractAbiStateMutabilityType"),
      SmartContractBABIEntryParam: findType("SmartContractBABIEntryParam"),
      SocketRequestCompleter: findType("SocketRequestCompleter"),
      SolAddress: findType("SolAddress"),
      SolanaNetworkType: findType("SolanaNetworkType"),
      SolanaSignAndSendAllTransactionMode: findType("SolanaSignAndSendAllTransactionMode"),
      SolanaWeb3TransactionSendResponse: findType("SolanaWeb3TransactionSendResponse"),
      SolanaWeb3TransactionSignResponse: findType("SolanaWeb3TransactionSignResponse"),
      SourceLocation: findType("SourceLocation"),
      SourceSpan: findType("SourceSpan"),
      SourceSpanWithContext: findType("SourceSpanWithContext"),
      SpendDescription: findType("SpendDescription"),
      StackTrace: findType("StackTrace"),
      StellarAddress: findType("StellarAddress"),
      StellarChainType: findType("StellarChainType"),
      StorageEntryMetadataV14: findType("StorageEntryMetadataV14"),
      StorageEntryMetadataV16: findType("StorageEntryMetadataV16"),
      StorageEntryModifierV9: findType("StorageEntryModifierV9"),
      StorageHasherV11Options: findType("StorageHasherV11Options"),
      StorageHasherV14: findType("StorageHasherV14"),
      StreamController_List_int: findType("StreamController<List<int>>"),
      StreamSplitter_List_int: findType("StreamSplitter<List<int>>"),
      StreamValue_APIServiceStatus: findType("StreamValue<APIServiceStatus>"),
      Stream_List_int: findType("Stream<List<int>>"),
      Stream_dynamic: findType("Stream<@>"),
      StreamedResponse: findType("StreamedResponse"),
      String: findType("String"),
      String_Function_Match: findType("String(Match)"),
      String_Function_PrimitiveTypes: findType("String(PrimitiveTypes)"),
      String_Function_String: findType("String(String)"),
      String_Function_Web3SuiObjectArgs: findType("String(Web3SuiObjectArgs)"),
      String_Function_Web3SuiTransactionCallArgs: findType("String(Web3SuiTransactionCallArgs)"),
      String_Function_Web3SuiTransactionCommands: findType("String(Web3SuiTransactionCommands)"),
      String_Function_Web3SuiTransactionExpirations: findType("String(Web3SuiTransactionExpirations)"),
      SubstrateCoins: findType("SubstrateCoins"),
      SubstrateMetadata_dynamic: findType("SubstrateMetadata<@>"),
      SuiAddress: findType("SuiAddress"),
      SuiApiExecuteTransactionRequestType: findType("SuiApiExecuteTransactionRequestType"),
      SuiApiTransactionBlockResponseOptions: findType("SuiApiTransactionBlockResponseOptions"),
      SuiChainType: findType("SuiChainType"),
      TonAccountContextType: findType("TonAccountContextType"),
      TonAddress: findType("TonAddress"),
      TonChain: findType("TonChain"),
      Transaction: findType("Transaction"),
      TransactionContract: findType("TransactionContract"),
      TransactionContractType: findType("TransactionContractType"),
      TransactionExtensionMetadata: findType("TransactionExtensionMetadata"),
      TronAddress: findType("TronAddress"),
      TronEnumerate: findType("TronEnumerate"),
      TronKey: findType("TronKey"),
      TronWeb3State: findType("TronWeb3State"),
      TrustedGetRuntimeType: findType("TrustedGetRuntimeType"),
      Tuple_BigInt_BigInt: findType("Tuple<BigInt,BigInt>"),
      Tuple_BigInt_int: findType("Tuple<BigInt,int>"),
      Tuple_TxInput_int: findType("Tuple<TxInput,int>"),
      Tuple_TxOutput_int: findType("Tuple<TxOutput,int>"),
      Tuple_bool_BigInt: findType("Tuple<bool,BigInt>"),
      Tuple_bool_bool: findType("Tuple<bool,bool>"),
      Tuple_int_BigInt: findType("Tuple<int,BigInt>"),
      Tuple_int_int: findType("Tuple<int,int>"),
      Tuple_of_List_int_and_FloatLength: findType("Tuple<List<int>,FloatLength>"),
      Tuple_of_List_int_and_List_int: findType("Tuple<List<int>,List<int>>"),
      Tuple_of_String_and_List_int: findType("Tuple<String,List<int>>"),
      Tuple_of_int_and_List_int: findType("Tuple<int,List<int>>"),
      Tuple_of_nullable_CashToken_and_int: findType("Tuple<CashToken?,int>"),
      TxInput: findType("TxInput"),
      TxOutput: findType("TxOutput"),
      TxWitnessInput: findType("TxWitnessInput"),
      TypeError: findType("TypeError"),
      TypeUrl: findType("TypeUrl"),
      TypedData: findType("TypedData"),
      Uint16List: findType("Uint16List"),
      Uint32List: findType("Uint32List"),
      Uint8ClampedList: findType("Uint8ClampedList"),
      Uint8List: findType("Uint8List"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      UnmodifiableMapView_String_String: findType("UnmodifiableMapView<String,String>"),
      Uri: findType("Uri"),
      VariantLayout: findType("VariantLayout"),
      VoteWitnessContractVote: findType("VoteWitnessContractVote"),
      WalletEvent: findType("WalletEvent"),
      WalletEventTarget: findType("WalletEventTarget"),
      WalletEventTypes: findType("WalletEventTypes"),
      WalletStandardChainWeb3State_of_dynamic_and_Web3ChainAccount_dynamic_and_JSObject_and_Web3ChainIdnetifier: findType("WalletStandardChainWeb3State<@,Web3ChainAccount<@>,JSObject,Web3ChainIdnetifier>"),
      WalletVersion: findType("WalletVersion"),
      Web3APPData: findType("Web3APPData"),
      Web3AptosChainAccount: findType("Web3AptosChainAccount"),
      Web3AptosChainAuthenticated: findType("Web3AptosChainAuthenticated"),
      Web3AptosChainIdnetifier: findType("Web3AptosChainIdnetifier"),
      Web3AptosRequestMethods: findType("Web3AptosRequestMethods"),
      Web3BitcoinChainAccount: findType("Web3BitcoinChainAccount"),
      Web3BitcoinChainAuthenticated: findType("Web3BitcoinChainAuthenticated"),
      Web3BitcoinRequestMethods: findType("Web3BitcoinRequestMethods"),
      Web3BitcoinSendTransactionOutput: findType("Web3BitcoinSendTransactionOutput"),
      Web3ChainAccount_dynamic: findType("Web3ChainAccount<@>"),
      Web3ChainAuthenticated_Web3ChainAccount_dynamic: findType("Web3ChainAuthenticated<Web3ChainAccount<@>>"),
      Web3ChainDefaultIdnetifier: findType("Web3ChainDefaultIdnetifier"),
      Web3ChainIdnetifier: findType("Web3ChainIdnetifier"),
      Web3ChainMessage: findType("Web3ChainMessage"),
      Web3Chain_of_nullable_Object_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider: findType("Web3Chain<Object?,Chain<APIProvider,NetworkCoinParams<APIProvider>,@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,WalletNetwork<NetworkCoinParams<APIProvider>>,NetworkClient<ChainTransaction,APIProvider>,ChainStorageKey,ChainConfig<ChainStorageKey>,ChainTransaction,ContactCore<@>,NewAccountParams<ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>>>,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,Web3ChainAccount<@>,WalletNetwork<NetworkCoinParams<APIProvider>>>"),
      Web3CosmosChainAccount: findType("Web3CosmosChainAccount"),
      Web3CosmosChainAuthenticated: findType("Web3CosmosChainAuthenticated"),
      Web3CosmosRequestMethods: findType("Web3CosmosRequestMethods"),
      Web3CosmosSignTransaction: findType("Web3CosmosSignTransaction"),
      Web3CosmosSignTransactionAminoSignResponse: findType("Web3CosmosSignTransactionAminoSignResponse"),
      Web3CosmosSignTransactionDirectSignResponse: findType("Web3CosmosSignTransactionDirectSignResponse"),
      Web3CosmosSignTransactionResponse: findType("Web3CosmosSignTransactionResponse"),
      Web3CosmoshainIdnetifier: findType("Web3CosmoshainIdnetifier"),
      Web3DisconnectApplication: findType("Web3DisconnectApplication"),
      Web3EthereumChainAccount: findType("Web3EthereumChainAccount"),
      Web3EthereumChainAuthenticated: findType("Web3EthereumChainAuthenticated"),
      Web3EthereumChainIdnetifier: findType("Web3EthereumChainIdnetifier"),
      Web3EthereumRequestMethods: findType("Web3EthereumRequestMethods"),
      Web3ExceptionMessage: findType("Web3ExceptionMessage"),
      Web3GlobalRequestMethods: findType("Web3GlobalRequestMethods"),
      Web3GlobalResponseMessage: findType("Web3GlobalResponseMessage"),
      Web3MessageCore: findType("Web3MessageCore"),
      Web3MessageTypes: findType("Web3MessageTypes"),
      Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider: findType("Web3RequestParams<@,@,Chain<APIProvider,NetworkCoinParams<APIProvider>,@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,WalletNetwork<NetworkCoinParams<APIProvider>>,NetworkClient<ChainTransaction,APIProvider>,ChainStorageKey,ChainConfig<ChainStorageKey>,ChainTransaction,ContactCore<@>,NewAccountParams<ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>>>,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,Web3ChainAccount<@>,Web3Chain<@,Chain<APIProvider,NetworkCoinParams<APIProvider>,@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,WalletNetwork<NetworkCoinParams<APIProvider>>,NetworkClient<ChainTransaction,APIProvider>,ChainStorageKey,ChainConfig<ChainStorageKey>,ChainTransaction,ContactCore<@>,NewAccountParams<ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>>>,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,Web3ChainAccount<@>,WalletNetwork<NetworkCoinParams<APIProvider>>>>"),
      Web3SolanaChainAccount: findType("Web3SolanaChainAccount"),
      Web3SolanaChainAuthenticated: findType("Web3SolanaChainAuthenticated"),
      Web3SolanaRequestMethods: findType("Web3SolanaRequestMethods"),
      Web3SolanaSendTransaction: findType("Web3SolanaSendTransaction"),
      Web3SolanaSendTransactionData: findType("Web3SolanaSendTransactionData"),
      Web3SolanaSendTransactionOptions: findType("Web3SolanaSendTransactionOptions"),
      Web3SolanaSignInParams: findType("Web3SolanaSignInParams"),
      Web3SolanaSignMessage: findType("Web3SolanaSignMessage"),
      Web3SolanaSignMessageParams: findType("Web3SolanaSignMessageParams"),
      Web3SolanaSignMessageResponse: findType("Web3SolanaSignMessageResponse"),
      Web3SolanaSignParams: findType("Web3SolanaSignParams"),
      Web3StellarChainAccount: findType("Web3StellarChainAccount"),
      Web3StellarChainAuthenticated: findType("Web3StellarChainAuthenticated"),
      Web3StellarRequestMethods: findType("Web3StellarRequestMethods"),
      Web3SubstrateChainAccount: findType("Web3SubstrateChainAccount"),
      Web3SubstrateChainAuthenticated: findType("Web3SubstrateChainAuthenticated"),
      Web3SubstrateChainIdnetifier: findType("Web3SubstrateChainIdnetifier"),
      Web3SubstrateRequestMethods: findType("Web3SubstrateRequestMethods"),
      Web3SuiArguments: findType("Web3SuiArguments"),
      Web3SuiChainAccount: findType("Web3SuiChainAccount"),
      Web3SuiChainAuthenticated: findType("Web3SuiChainAuthenticated"),
      Web3SuiObjectArgs: findType("Web3SuiObjectArgs"),
      Web3SuiRequestMethods: findType("Web3SuiRequestMethods"),
      Web3SuiTransactionArgument: findType("Web3SuiTransactionArgument"),
      Web3SuiTransactionCallArg: findType("Web3SuiTransactionCallArg"),
      Web3SuiTransactionCallArgs: findType("Web3SuiTransactionCallArgs"),
      Web3SuiTransactionCommand: findType("Web3SuiTransactionCommand"),
      Web3SuiTransactionCommands: findType("Web3SuiTransactionCommands"),
      Web3SuiTransactionExpirations: findType("Web3SuiTransactionExpirations"),
      Web3SuiTransactionImmOrOwnedObject: findType("Web3SuiTransactionImmOrOwnedObject"),
      Web3SuiTransactionObjectArg: findType("Web3SuiTransactionObjectArg"),
      Web3TonChainAccount: findType("Web3TonChainAccount"),
      Web3TonChainAuthenticated: findType("Web3TonChainAuthenticated"),
      Web3TonRequestMethods: findType("Web3TonRequestMethods"),
      Web3TonSendTransaction: findType("Web3TonSendTransaction"),
      Web3TonTransactionMessage: findType("Web3TonTransactionMessage"),
      Web3TronChainAccount: findType("Web3TronChainAccount"),
      Web3TronChainAuthenticated: findType("Web3TronChainAuthenticated"),
      Web3TronChainIdnetifier: findType("Web3TronChainIdnetifier"),
      Web3TronRequestMethods: findType("Web3TronRequestMethods"),
      Web3TronSendTransaction: findType("Web3TronSendTransaction"),
      Web3WalletRequestParams_dynamic: findType("Web3WalletRequestParams<@>"),
      Web3WalletResponseMessage: findType("Web3WalletResponseMessage"),
      WebsocketWeb: findType("WebsocketWeb"),
      WhereIterator_PsbtGlobalTypes: findType("WhereIterator<PsbtGlobalTypes>"),
      WhereIterator_PsbtInputTypes: findType("WhereIterator<PsbtInputTypes>"),
      WhereIterator_PsbtOutputTypes: findType("WhereIterator<PsbtOutputTypes>"),
      WhereTypeIterable_CborBytesValue: findType("WhereTypeIterable<CborBytesValue>"),
      WhereTypeIterable_CborNumeric: findType("WhereTypeIterable<CborNumeric>"),
      WhereTypeIterable_CborStringValue: findType("WhereTypeIterable<CborStringValue>"),
      WhereTypeIterable_PsbtGlobalUnsignedTransaction: findType("WhereTypeIterable<PsbtGlobalUnsignedTransaction>"),
      WhereTypeIterable_String: findType("WhereTypeIterable<String>"),
      XlmAddrTypes: findType("XlmAddrTypes"),
      _AsyncCompleter_HTTPWorkerResponse: findType("_AsyncCompleter<HTTPWorkerResponse>"),
      _AsyncCompleter_JSObject: findType("_AsyncCompleter<JSObject>"),
      _AsyncCompleter_List_dynamic: findType("_AsyncCompleter<List<@>>"),
      _AsyncCompleter_Uint8List: findType("_AsyncCompleter<Uint8List>"),
      _AsyncCompleter_WalletEvent: findType("_AsyncCompleter<WalletEvent>"),
      _AsyncCompleter_Web3MessageCore: findType("_AsyncCompleter<Web3MessageCore>"),
      _AsyncCompleter_WebsocketWeb: findType("_AsyncCompleter<WebsocketWeb>"),
      _AsyncCompleter__WorkerConnection: findType("_AsyncCompleter<_WorkerConnection>"),
      _AsyncCompleter_dynamic: findType("_AsyncCompleter<@>"),
      _AsyncStreamController_List_int: findType("_AsyncStreamController<List<int>>"),
      _BigIntImpl: findType("_BigIntImpl"),
      _Client_nullable_ProviderAuthenticated: findType("_Client<ProviderAuthenticated?>"),
      _DecodeCborResult_CborObject: findType("_DecodeCborResult<CborObject>"),
      _DecodeCborResult_List_int: findType("_DecodeCborResult<List<int>>"),
      _Future_HTTPWorkerResponse: findType("_Future<HTTPWorkerResponse>"),
      _Future_JSObject: findType("_Future<JSObject>"),
      _Future_List_dynamic: findType("_Future<List<@>>"),
      _Future_Uint8List: findType("_Future<Uint8List>"),
      _Future_WalletEvent: findType("_Future<WalletEvent>"),
      _Future_Web3MessageCore: findType("_Future<Web3MessageCore>"),
      _Future_WebsocketWeb: findType("_Future<WebsocketWeb>"),
      _Future__WorkerConnection: findType("_Future<_WorkerConnection>"),
      _Future_bool: findType("_Future<bool>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      _Future_nullable_JSObject: findType("_Future<JSObject?>"),
      _Future_void: findType("_Future<~>"),
      _Highlight: findType("_Highlight"),
      _IdentityHashMap_of_nullable_Object_and_nullable_Object: findType("_IdentityHashMap<Object?,Object?>"),
      _Line: findType("_Line"),
      _ReadCellResult: findType("_ReadCellResult"),
      _Result_BigInt: findType("_Result<BigInt>"),
      _Result_BigInt_2: findType("_Result0<BigInt>"),
      _Result_int: findType("_Result<int>"),
      _Result_int_2: findType("_Result0<int>"),
      _StreamControllerAddStreamState_nullable_Object: findType("_StreamControllerAddStreamState<Object?>"),
      _SyncCompleter_void: findType("_SyncCompleter<~>"),
      _WorkerConnection: findType("_WorkerConnection"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      bool_Function_PsbtGlobalTypes: findType("bool(PsbtGlobalTypes)"),
      bool_Function_PsbtInputTypes: findType("bool(PsbtInputTypes)"),
      bool_Function_PsbtOutputTypes: findType("bool(PsbtOutputTypes)"),
      bool_Function__Highlight: findType("bool(_Highlight)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      dynamic_Function_String: findType("@(String)"),
      int: findType("int"),
      nullable_BigInt: findType("BigInt?"),
      nullable_BigRational: findType("BigRational?"),
      nullable_ByteBuffer: findType("ByteBuffer?"),
      nullable_CborListValue_dynamic: findType("CborListValue<@>?"),
      nullable_CborObject: findType("CborObject?"),
      nullable_CborTagValue_dynamic: findType("CborTagValue<@>?"),
      nullable_CoingeckoCoin: findType("CoingeckoCoin?"),
      nullable_CosmosBaseAddress: findType("CosmosBaseAddress?"),
      nullable_CosmosFeeToken: findType("CosmosFeeToken?"),
      nullable_Dictionary_BigInt_SimpleLibrary: findType("Dictionary<BigInt,SimpleLibrary>?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_JSArray_nullable_Object: findType("JSArray<Object?>?"),
      nullable_JSObject: findType("JSObject?"),
      nullable_JavaScriptFunction: findType("JavaScriptFunction?"),
      nullable_List_Map_String_dynamic: findType("List<Map<String,@>>?"),
      nullable_List_String: findType("List<String>?"),
      nullable_List_dynamic: findType("List<@>?"),
      nullable_List_int: findType("List<int>?"),
      nullable_MapEntry_dynamic_dynamic: findType("MapEntry<@,@>?"),
      nullable_Map_String_String: findType("Map<String,String>?"),
      nullable_Map_String_dynamic: findType("Map<String,@>?"),
      nullable_Map_dynamic_dynamic: findType("Map<@,@>?"),
      nullable_Object: findType("Object?"),
      nullable_ProtocolBufferDecoderResult_dynamic: findType("ProtocolBufferDecoderResult0<@>?"),
      nullable_ProviderAuthenticated: findType("ProviderAuthenticated?"),
      nullable_ServiceMessage_CosmosMessage: findType("ServiceMessage<CosmosMessage>?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_String: findType("String?"),
      nullable_String_Function_Match: findType("String(Match)?"),
      nullable_SuiAddress: findType("SuiAddress?"),
      nullable_TronAddress: findType("TronAddress?"),
      nullable_WalletEvent: findType("WalletEvent?"),
      nullable_Web3RequestParams_of_dynamic_and_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_Web3Chain_of_dynamic_and_Chain_of_APIProvider_and_NetworkCoinParams_APIProvider_and_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_WalletNetwork_NetworkCoinParams_APIProvider_and_NetworkClient_ChainTransaction_APIProvider_and_ChainStorageKey_and_ChainConfig_ChainStorageKey_and_ChainTransaction_and_ContactCore_dynamic_and_NewAccountParams_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_ChainAccount_of_dynamic_and_TokenCore_of_BalanceCore_dynamic_APPToken_and_APPToken_and_NFTCore_and_ChainTransaction_and_Web3ChainAccount_dynamic_and_WalletNetwork_NetworkCoinParams_APIProvider: findType("Web3RequestParams<@,@,Chain<APIProvider,NetworkCoinParams<APIProvider>,@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,WalletNetwork<NetworkCoinParams<APIProvider>>,NetworkClient<ChainTransaction,APIProvider>,ChainStorageKey,ChainConfig<ChainStorageKey>,ChainTransaction,ContactCore<@>,NewAccountParams<ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>>>,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,Web3ChainAccount<@>,Web3Chain<@,Chain<APIProvider,NetworkCoinParams<APIProvider>,@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,WalletNetwork<NetworkCoinParams<APIProvider>>,NetworkClient<ChainTransaction,APIProvider>,ChainStorageKey,ChainConfig<ChainStorageKey>,ChainTransaction,ContactCore<@>,NewAccountParams<ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>>>,ChainAccount<@,TokenCore<BalanceCore<@,APPToken>,APPToken>,NFTCore,ChainTransaction>,Web3ChainAccount<@>,WalletNetwork<NetworkCoinParams<APIProvider>>>>?"),
      nullable_Web3SuiTransactionExpiration: findType("Web3SuiTransactionExpiration?"),
      nullable__DelayedEvent_dynamic: findType("_DelayedEvent<@>?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__Highlight: findType("_Highlight?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      nullable_bool: findType("bool?"),
      nullable_bool_Function_Object: findType("bool(Object)?"),
      nullable_double: findType("double?"),
      nullable_int: findType("int?"),
      nullable_nullable_Object_Function_dynamic: findType("Object?(@)?"),
      nullable_num: findType("num?"),
      nullable_void_Function: findType("~()?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_EthereumSubscribeResult: findType("~(EthereumSubscribeResult)"),
      void_Function_List_int: findType("~(List<int>)"),
      void_Function_Object: findType("~(Object)"),
      void_Function_Object_StackTrace: findType("~(Object,StackTrace)"),
      void_Function_String_dynamic: findType("~(String,@)"),
      void_Function_int_dynamic: findType("~(int,@)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSBool_methods = J.JSBool.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.NativeByteData_methods = A.NativeByteData.prototype;
    B.NativeFloat32List_methods = A.NativeFloat32List.prototype;
    B.NativeFloat64List_methods = A.NativeFloat64List.prototype;
    B.NativeUint16List_methods = A.NativeUint16List.prototype;
    B.NativeUint32List_methods = A.NativeUint32List.prototype;
    B.NativeUint8List_methods = A.NativeUint8List.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.ADANetwork_mainnet = new A.ADANetwork("mainnet");
    B.ADANetwork_testnetPreview = new A.ADANetwork("testnetPreview");
    B.APIServiceStatus_0 = new A.APIServiceStatus("active");
    B.APIServiceStatus_1 = new A.APIServiceStatus("warning");
    B.APIServiceStatus_2 = new A.APIServiceStatus("error");
    B.APPIsolate_0 = new A.APPIsolate("current");
    B.APPIsolate_1 = new A.APPIsolate("separate");
    B.AccountType_0_Normal = new A.AccountType(0, "Normal");
    B.AddressConverterException_jdZ = new A.AddressConverterException("Invalid muxed address account id.", null);
    B.AddressConverterException_lgx = new A.AddressConverterException("Invalid checksum encoding", null);
    B.AddressConverterException_zNG = new A.AddressConverterException("Invalid checksum", null);
    B.List_200_81 = A._setArrayType(makeConstList([200, 81]), type$.JSArray_int);
    B.AddressDerivationType_List_200_81_bip32 = new A.AddressDerivationType(B.List_200_81, "bip32");
    B.List_200_83 = A._setArrayType(makeConstList([200, 83]), type$.JSArray_int);
    B.AddressDerivationType_List_200_83_multisig = new A.AddressDerivationType(B.List_200_83, "multisig");
    B.List_200_84 = A._setArrayType(makeConstList([200, 84]), type$.JSArray_int);
    B.AddressDerivationType_List_200_84_substrate = new A.AddressDerivationType(B.List_200_84, "substrate");
    B.AminoJsonParserException_5bl = new A.AminoJsonParserException("Missing 'msgs' parameters.", null);
    B.AminoJsonParserException_7jU = new A.AminoJsonParserException("'fee' must be a valid Object.", null);
    B.AminoJsonParserException_AAO = new A.AminoJsonParserException("Missing 'account_number' parameters.", null);
    B.AminoJsonParserException_MJf = new A.AminoJsonParserException("Missing 'chain_id' parameters.", null);
    B.AminoJsonParserException_MSz = new A.AminoJsonParserException("'payer' must be a valid string.", null);
    B.AminoJsonParserException_PHK = new A.AminoJsonParserException("Missing 'fee' parameters.", null);
    B.AminoJsonParserException_Vb7 = new A.AminoJsonParserException("Missing fee 'gas' parameters.", null);
    B.AminoJsonParserException_XOU = new A.AminoJsonParserException("At least one Amino message is required. Ensure the 'msgs' list is not empty.", null);
    B.AminoJsonParserException_XhB = new A.AminoJsonParserException("'memo' must be a valid string.", null);
    B.AminoJsonParserException_aGW = new A.AminoJsonParserException("'gas' must be a valid unsigned integer as string.", null);
    B.AminoJsonParserException_bjD = new A.AminoJsonParserException("'sequence' must be a valid unsigned integer as string.", null);
    B.AminoJsonParserException_ee8 = new A.AminoJsonParserException("Missing fee 'amount' parameters.", null);
    B.AminoJsonParserException_fZo = new A.AminoJsonParserException("Missing 'sequence' parameters.", null);
    B.AminoJsonParserException_t1G = new A.AminoJsonParserException("'chain_id' must be a valid string.", null);
    B.AminoJsonParserException_yIy = new A.AminoJsonParserException(string$.x27amoun, null);
    B.AminoJsonParserException_yhL = new A.AminoJsonParserException("'account_number' must be a valid unsigned integer as string.", null);
    B.AminoJsonParserException_yor = new A.AminoJsonParserException("'granter' must be a valid string.", null);
    B.AminoJsonParserException_zeE = new A.AminoJsonParserException("'msgs' must be a list of objects containing valid Amino messages.", null);
    B.AminoTypes_9Vm = new A.AminoTypes("cosmos-sdk/MsgUndelegate", "msgUndelegate");
    B.AminoTypes_G0e = new A.AminoTypes("cosmos-sdk/MsgMultiSend", "msgMultiSend");
    B.AminoTypes_LGL = new A.AminoTypes("cosmos-sdk/MsgWithdrawDelegationReward", "msgWithdrawDelegationReward");
    B.AminoTypes_M8n = new A.AminoTypes("cosmos-sdk/MsgUnjail", "msgUnjail");
    B.AminoTypes_R1T = new A.AminoTypes(string$.cosmos, "msgWithdrawValidatorCommission");
    B.AminoTypes_SIk = new A.AminoTypes("cosmos-sdk/MsgDelegate", "msgDelegate");
    B.AminoTypes_YB3 = new A.AminoTypes("cosmos-sdk/MsgSend", "msgSend");
    B.AminoTypes_cctp_cctp = new A.AminoTypes("cctp", "cctp");
    B.AminoTypes_ethermint_ethermint = new A.AminoTypes("ethermint", "ethermint");
    B.AminoTypes_evmos_evmos = new A.AminoTypes("evmos", "evmos");
    B.AminoTypes_icZ = new A.AminoTypes("cosmos-sdk/MsgTransfer", "msgTransfer");
    B.AminoTypes_jIj = new A.AminoTypes("cosmos-sdk/MsgVerifyInvariant", "msgVerifyInvariant");
    B.AminoTypes_jXu = new A.AminoTypes("cosmos-sdk/MsgEditValidator", "msgEditValidator");
    B.AminoTypes_kX4 = new A.AminoTypes("cosmos-sdk/MsgFundCommunityPool", "msgFundCommunityPool");
    B.AminoTypes_n6G = new A.AminoTypes("cosmos-sdk/MsgCreateVestingAccount", "msgCreateVestingAccount");
    B.AminoTypes_ophost_ophost = new A.AminoTypes("ophost", "ophost");
    B.AminoTypes_p9m = new A.AminoTypes("cosmos-sdk/MsgCreateValidator", "msgCreateValidator");
    B.AminoTypes_pe4 = new A.AminoTypes("cosmos-sdk/MsgDeposit", "msgDeposit");
    B.AminoTypes_raa = new A.AminoTypes("cosmos-sdk/MsgBeginRedelegate", "msgBeginRedelegate");
    B.AminoTypes_sYG = new A.AminoTypes("cosmos-sdk/MsgVote", "msgVote");
    B.AminoTypes_wEL = new A.AminoTypes("cosmos-sdk/MsgModifyWithdrawAddress", "msgModifyWithdrawAddress");
    B.AppPlatform_1 = new A.AppPlatform("web");
    B.AppPlatform_2 = new A.AppPlatform("android");
    B.AptosChainType_null_devnet = new A.AptosChainType(null, "devnet");
    B.AptosMultisigTransactionPayloads_entryFunction = new A.AptosMultisigTransactionPayloads("entryFunction");
    B.AptosTransactionPayloads_0_script = new A.AptosTransactionPayloads(0, "script");
    B.AptosTransactionPayloads_2_entryFunction = new A.AptosTransactionPayloads(2, "entryFunction");
    B.AptosTransactionPayloads_3_multisig = new A.AptosTransactionPayloads(3, "multisig");
    B.AptosTypeTags_0_boolean = new A.AptosTypeTags(0, "boolean");
    B.AptosTypeTags_10_u256 = new A.AptosTypeTags(10, "u256");
    B.AptosTypeTags_1_u8 = new A.AptosTypeTags(1, "u8");
    B.AptosTypeTags_255_generic = new A.AptosTypeTags(255, "generic");
    B.AptosTypeTags_2_u64 = new A.AptosTypeTags(2, "u64");
    B.AptosTypeTags_3_u128 = new A.AptosTypeTags(3, "u128");
    B.AptosTypeTags_4_address = new A.AptosTypeTags(4, "address");
    B.AptosTypeTags_5_signer = new A.AptosTypeTags(5, "signer");
    B.AptosTypeTags_6_vector = new A.AptosTypeTags(6, "vector");
    B.AptosTypeTags_7_struct = new A.AptosTypeTags(7, "struct");
    B.AptosTypeTags_8_u16 = new A.AptosTypeTags(8, "u16");
    B.AptosTypeTags_9_u32 = new A.AptosTypeTags(9, "u32");
    B.ArgumentException_2aX = new A.ArgumentException("invalid hex bytes", null);
    B.ArgumentException_4i3 = new A.ArgumentException("Invalid key net version length", null);
    B.ArgumentException_8to = new A.ArgumentException("Invalid bech32 format (data part not valid)", null);
    B.ArgumentException_Atw = new A.ArgumentException("Denominator cannot be 0.", null);
    B.ArgumentException_CKK = new A.ArgumentException("Invalid data, cannot perform conversion to base32", null);
    B.ArgumentException_Cwt = new A.ArgumentException("Hex input string must be divisible by two", null);
    B.ArgumentException_EMh = new A.ArgumentException("Incorrect characters for hex decoding", null);
    B.ArgumentException_IrH = new A.ArgumentException("Invalid bech32 format (string is mixed case)", null);
    B.ArgumentException_KSi0 = new A.ArgumentException("Invalid input: too many '.' tokens", null);
    B.ArgumentException_KSi = new A.ArgumentException("Invalid input: too many 'e' tokens", null);
    B.ArgumentException_QQa = new A.ArgumentException("Invalid Base32 string", null);
    B.ArgumentException_iZH = new A.ArgumentException("Invalid bech32 format (no separator found)", null);
    B.ArgumentException_ngs = new A.ArgumentException("cannot read variable-length in this environment", null);
    B.ArgumentException_wwD = new A.ArgumentException("Invalid data, cannot perform conversion from base32", null);
    B.AsciiDecoder_false_127 = new A.AsciiDecoder(false, 127);
    B.AsciiDecoder_true_127 = new A.AsciiDecoder(true, 127);
    B.AsciiEncoder_127 = new A.AsciiEncoder(127);
    B.RequestServiceType_1 = new A.RequestServiceType("get");
    B.BankV1beta1Types_854 = new A.BankV1beta1Types("/cosmos.bank.v1beta1.MsgSend", "cosmos-sdk/MsgSend");
    B.BankV1beta1Types_jr7 = new A.BankV1beta1Types("/cosmos.bank.v1beta1.MsgMultiSend", "cosmos-sdk/MsgMultiSend");
    B.Base58Alphabets_0 = new A.Base58Alphabets("bitcoin");
    B.Base64Encoder_false = new A.Base64Encoder(false);
    B.Base64Codec_Base64Encoder_false = new A.Base64Codec(B.Base64Encoder_false);
    B.Base64Encoder_true = new A.Base64Encoder(true);
    B.Base64Codec_Base64Encoder_true = new A.Base64Codec(B.Base64Encoder_true);
    B.BcsSerializationException_kOf = new A.BcsSerializationException("Invalid variant layout. only use enum layout to deserialize with `BcsVariantSerialization.deserialize` method.", null);
    B.Bech32ChecksumError_nNb = new A.Bech32ChecksumError("Invalid bech32 checksum", null);
    B.Bech32Encodings_0 = new A.Bech32Encodings("bech32");
    B.Bech32Encodings_1 = new A.Bech32Encodings("bech32m");
    B.Bip44Coins_akashNetwork = new A.Bip44Coins("akashNetwork");
    B.Bip44Coins_algorand = new A.Bip44Coins("algorand");
    B.Bip44Coins_aptos = new A.Bip44Coins("aptos");
    B.Bip44Coins_aptosEd25519SingleKey = new A.Bip44Coins("aptosEd25519SingleKey");
    B.Bip44Coins_aptosSecp256k1SingleKey = new A.Bip44Coins("aptosSecp256k1SingleKey");
    B.Bip44Coins_avaxCChain = new A.Bip44Coins("avaxCChain");
    B.Bip44Coins_avaxPChain = new A.Bip44Coins("avaxPChain");
    B.Bip44Coins_avaxXChain = new A.Bip44Coins("avaxXChain");
    B.Bip44Coins_axelar = new A.Bip44Coins("axelar");
    B.Bip44Coins_bandProtocol = new A.Bip44Coins("bandProtocol");
    B.Bip44Coins_binanceChain = new A.Bip44Coins("binanceChain");
    B.Bip44Coins_binanceSmartChain = new A.Bip44Coins("binanceSmartChain");
    B.Bip44Coins_bitcoin = new A.Bip44Coins("bitcoin");
    B.Bip44Coins_bitcoinCash = new A.Bip44Coins("bitcoinCash");
    B.Bip44Coins_bitcoinCashSlp = new A.Bip44Coins("bitcoinCashSlp");
    B.Bip44Coins_bitcoinCashSlpTestnet = new A.Bip44Coins("bitcoinCashSlpTestnet");
    B.Bip44Coins_bitcoinCashTestnet = new A.Bip44Coins("bitcoinCashTestnet");
    B.Bip44Coins_bitcoinSv = new A.Bip44Coins("bitcoinSv");
    B.Bip44Coins_bitcoinSvTestnet = new A.Bip44Coins("bitcoinSvTestnet");
    B.Bip44Coins_bitcoinTestnet = new A.Bip44Coins("bitcoinTestnet");
    B.Bip44Coins_cardanoByronIcarus = new A.Bip44Coins("cardanoByronIcarus");
    B.Bip44Coins_cardanoByronIcarusTestnet = new A.Bip44Coins("cardanoByronIcarusTestnet");
    B.Bip44Coins_cardanoByronLedger = new A.Bip44Coins("cardanoByronLedger");
    B.Bip44Coins_cardanoByronLedgerTestnet = new A.Bip44Coins("cardanoByronLedgerTestnet");
    B.Bip44Coins_celo = new A.Bip44Coins("celo");
    B.Bip44Coins_certik = new A.Bip44Coins("certik");
    B.Bip44Coins_chihuahua = new A.Bip44Coins("chihuahua");
    B.Bip44Coins_cosmos = new A.Bip44Coins("cosmos");
    B.Bip44Coins_cosmosEd25519 = new A.Bip44Coins("cosmosEd25519");
    B.Bip44Coins_cosmosEthSecp256k1 = new A.Bip44Coins("cosmosEthSecp256k1");
    B.Bip44Coins_cosmosNist256p1 = new A.Bip44Coins("cosmosNist256p1");
    B.Bip44Coins_cosmosTestnet = new A.Bip44Coins("cosmosTestnet");
    B.Bip44Coins_cosmosTestnetEd25519 = new A.Bip44Coins("cosmosTestnetEd25519");
    B.Bip44Coins_cosmosTestnetEthSecp256k1 = new A.Bip44Coins("cosmosTestnetEthSecp256k1");
    B.Bip44Coins_cosmosTestnetNist256p1 = new A.Bip44Coins("cosmosTestnetNist256p1");
    B.Bip44Coins_dash = new A.Bip44Coins("dash");
    B.Bip44Coins_dashTestnet = new A.Bip44Coins("dashTestnet");
    B.Bip44Coins_dogecoin = new A.Bip44Coins("dogecoin");
    B.Bip44Coins_dogecoinTestnet = new A.Bip44Coins("dogecoinTestnet");
    B.Bip44Coins_ecash = new A.Bip44Coins("ecash");
    B.Bip44Coins_ecashTestnet = new A.Bip44Coins("ecashTestnet");
    B.Bip44Coins_electraProtocol = new A.Bip44Coins("electraProtocol");
    B.Bip44Coins_electraProtocolTestnet = new A.Bip44Coins("electraProtocolTestnet");
    B.Bip44Coins_elrond = new A.Bip44Coins("elrond");
    B.Bip44Coins_eos = new A.Bip44Coins("eos");
    B.Bip44Coins_ergo = new A.Bip44Coins("ergo");
    B.Bip44Coins_ergoTestnet = new A.Bip44Coins("ergoTestnet");
    B.Bip44Coins_ethereum = new A.Bip44Coins("ethereum");
    B.Bip44Coins_ethereumClassic = new A.Bip44Coins("ethereumClassic");
    B.Bip44Coins_ethereumTestnet = new A.Bip44Coins("ethereumTestnet");
    B.Bip44Coins_fantomOpera = new A.Bip44Coins("fantomOpera");
    B.Bip44Coins_filecoin = new A.Bip44Coins("filecoin");
    B.Bip44Coins_harmonyOneAtom = new A.Bip44Coins("harmonyOneAtom");
    B.Bip44Coins_harmonyOneEth = new A.Bip44Coins("harmonyOneEth");
    B.Bip44Coins_harmonyOneMetamask = new A.Bip44Coins("harmonyOneMetamask");
    B.Bip44Coins_huobiChain = new A.Bip44Coins("huobiChain");
    B.Bip44Coins_icon = new A.Bip44Coins("icon");
    B.Bip44Coins_injective = new A.Bip44Coins("injective");
    B.Bip44Coins_irisNet = new A.Bip44Coins("irisNet");
    B.Bip44Coins_kava = new A.Bip44Coins("kava");
    B.Bip44Coins_kusamaEd25519Slip = new A.Bip44Coins("kusamaEd25519Slip");
    B.Bip44Coins_kusamaTestnetEd25519Slip = new A.Bip44Coins("kusamaTestnetEd25519Slip");
    B.Bip44Coins_litecoin = new A.Bip44Coins("litecoin");
    B.Bip44Coins_litecoinTestnet = new A.Bip44Coins("litecoinTestnet");
    B.Bip44Coins_moneroEd25519Slip = new A.Bip44Coins("moneroEd25519Slip");
    B.Bip44Coins_moneroSecp256k1 = new A.Bip44Coins("moneroSecp256k1");
    B.Bip44Coins_nano = new A.Bip44Coins("nano");
    B.Bip44Coins_nearProtocol = new A.Bip44Coins("nearProtocol");
    B.Bip44Coins_neo = new A.Bip44Coins("neo");
    B.Bip44Coins_nineChroniclesGold = new A.Bip44Coins("nineChroniclesGold");
    B.Bip44Coins_okexChainAtom = new A.Bip44Coins("okexChainAtom");
    B.Bip44Coins_okexChainAtomOld = new A.Bip44Coins("okexChainAtomOld");
    B.Bip44Coins_okexChainEth = new A.Bip44Coins("okexChainEth");
    B.Bip44Coins_ontology = new A.Bip44Coins("ontology");
    B.Bip44Coins_osmosis = new A.Bip44Coins("osmosis");
    B.Bip44Coins_pepecoin = new A.Bip44Coins("pepecoin");
    B.Bip44Coins_pepecoinTestnet = new A.Bip44Coins("pepecoinTestnet");
    B.Bip44Coins_piNetwork = new A.Bip44Coins("piNetwork");
    B.Bip44Coins_polkadotEd25519Slip = new A.Bip44Coins("polkadotEd25519Slip");
    B.Bip44Coins_polkadotTestnetEd25519Slip = new A.Bip44Coins("polkadotTestnetEd25519Slip");
    B.Bip44Coins_polygon = new A.Bip44Coins("polygon");
    B.Bip44Coins_ripple = new A.Bip44Coins("ripple");
    B.Bip44Coins_rippleED25519 = new A.Bip44Coins("rippleED25519");
    B.Bip44Coins_rippleTestnet = new A.Bip44Coins("rippleTestnet");
    B.Bip44Coins_rippleTestnetED25519 = new A.Bip44Coins("rippleTestnetED25519");
    B.Bip44Coins_secretNetworkNew = new A.Bip44Coins("secretNetworkNew");
    B.Bip44Coins_secretNetworkOld = new A.Bip44Coins("secretNetworkOld");
    B.Bip44Coins_solana = new A.Bip44Coins("solana");
    B.Bip44Coins_solanaTestnet = new A.Bip44Coins("solanaTestnet");
    B.Bip44Coins_stellar = new A.Bip44Coins("stellar");
    B.Bip44Coins_stellarTestnet = new A.Bip44Coins("stellarTestnet");
    B.Bip44Coins_sui = new A.Bip44Coins("sui");
    B.Bip44Coins_suiSecp256k1 = new A.Bip44Coins("suiSecp256k1");
    B.Bip44Coins_suiSecp256r1 = new A.Bip44Coins("suiSecp256r1");
    B.Bip44Coins_terra = new A.Bip44Coins("terra");
    B.Bip44Coins_tezos = new A.Bip44Coins("tezos");
    B.Bip44Coins_theta = new A.Bip44Coins("theta");
    B.Bip44Coins_tonMainnet = new A.Bip44Coins("tonMainnet");
    B.Bip44Coins_tonTestnet = new A.Bip44Coins("tonTestnet");
    B.Bip44Coins_tron = new A.Bip44Coins("tron");
    B.Bip44Coins_tronTestnet = new A.Bip44Coins("tronTestnet");
    B.Bip44Coins_vechain = new A.Bip44Coins("vechain");
    B.Bip44Coins_verge = new A.Bip44Coins("verge");
    B.Bip44Coins_zcash = new A.Bip44Coins("zcash");
    B.Bip44Coins_zcashTestnet = new A.Bip44Coins("zcashTestnet");
    B.Bip44Coins_zilliqa = new A.Bip44Coins("zilliqa");
    B.Bip49Coins_bitcoin = new A.Bip49Coins("bitcoin");
    B.Bip49Coins_bitcoinCash = new A.Bip49Coins("bitcoinCash");
    B.Bip49Coins_bitcoinCashSlp = new A.Bip49Coins("bitcoinCashSlp");
    B.Bip49Coins_bitcoinCashSlpTestnet = new A.Bip49Coins("bitcoinCashSlpTestnet");
    B.Bip49Coins_bitcoinCashTestnet = new A.Bip49Coins("bitcoinCashTestnet");
    B.Bip49Coins_bitcoinSv = new A.Bip49Coins("bitcoinSv");
    B.Bip49Coins_bitcoinSvTestnet = new A.Bip49Coins("bitcoinSvTestnet");
    B.Bip49Coins_bitcoinTestnet = new A.Bip49Coins("bitcoinTestnet");
    B.Bip49Coins_dash = new A.Bip49Coins("dash");
    B.Bip49Coins_dashTestnet = new A.Bip49Coins("dashTestnet");
    B.Bip49Coins_dogecoin = new A.Bip49Coins("dogecoin");
    B.Bip49Coins_dogecoinTestnet = new A.Bip49Coins("dogecoinTestnet");
    B.Bip49Coins_ecash = new A.Bip49Coins("ecash");
    B.Bip49Coins_ecashTestnet = new A.Bip49Coins("ecashTestnet");
    B.Bip49Coins_electraProtocol = new A.Bip49Coins("electraProtocol");
    B.Bip49Coins_electraProtocolTestnet = new A.Bip49Coins("electraProtocolTestnet");
    B.Bip49Coins_litecoin = new A.Bip49Coins("litecoin");
    B.Bip49Coins_litecoinTestnet = new A.Bip49Coins("litecoinTestnet");
    B.Bip49Coins_pepecoin = new A.Bip49Coins("pepecoin");
    B.Bip49Coins_pepecoinTestnet = new A.Bip49Coins("pepecoinTestnet");
    B.Bip49Coins_zcash = new A.Bip49Coins("zcash");
    B.Bip49Coins_zcashTestnet = new A.Bip49Coins("zcashTestnet");
    B.Bip84Coins_bitcoin = new A.Bip84Coins("bitcoin");
    B.Bip84Coins_bitcoinTestnet = new A.Bip84Coins("bitcoinTestnet");
    B.Bip84Coins_electraProtocol = new A.Bip84Coins("electraProtocol");
    B.Bip84Coins_electraProtocolTestnet = new A.Bip84Coins("electraProtocolTestnet");
    B.Bip84Coins_litecoin = new A.Bip84Coins("litecoin");
    B.Bip84Coins_litecoinTestnet = new A.Bip84Coins("litecoinTestnet");
    B.Bip86Coins_bitcoin = new A.Bip86Coins("bitcoin");
    B.Bip86Coins_bitcoinTestnet = new A.Bip86Coins("bitcoinTestnet");
    B.BipProposal_bip44 = new A.BipProposal("bip44");
    B.BipProposal_bip49 = new A.BipProposal("bip49");
    B.BipProposal_bip84 = new A.BipProposal("bip84");
    B.BipProposal_bip86 = new A.BipProposal("bip86");
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_int);
    B.BitString_0_0_List_empty = new A.BitString(0, 0, B.List_empty);
    B.CoinNames_9E5 = new A.CoinNames("Bitcoin Cash");
    B.List_128 = A._setArrayType(makeConstList([128]), type$.JSArray_int);
    B.List_0 = A._setArrayType(makeConstList([0]), type$.JSArray_int);
    B.List_8 = A._setArrayType(makeConstList([8]), type$.JSArray_int);
    B.List_5 = A._setArrayType(makeConstList([5]), type$.JSArray_int);
    B.CoinParams_f9a = new A.CoinParams(null, null, null, null, B.List_128, null, null, null, "bitcoincash", B.List_0, B.List_0, "bitcoincash", B.List_8, B.List_5, null, null, null, null, null, null, null);
    B.CoinConf_C5C = new A.CoinConf(B.CoinNames_9E5, B.CoinParams_f9a);
    B.List_16 = A._setArrayType(makeConstList([16]), type$.JSArray_int);
    B.List_11 = A._setArrayType(makeConstList([11]), type$.JSArray_int);
    B.List_24 = A._setArrayType(makeConstList([24]), type$.JSArray_int);
    B.List_27 = A._setArrayType(makeConstList([27]), type$.JSArray_int);
    B.PubKeyAddressType_P2PK = new A.PubKeyAddressType("P2PK");
    B.P2pkhAddressType_P2PKH = new A.P2pkhAddressType("P2PKH");
    B.P2pkhAddressType_P2PKHWT = new A.P2pkhAddressType("P2PKHWT");
    B.P2shAddressType_apR = new A.P2shAddressType(20, "P2SH/P2PKH");
    B.P2shAddressType_vvf = new A.P2shAddressType(20, "P2SH/P2PK");
    B.P2shAddressType_rEf = new A.P2shAddressType(32, "P2SH32/P2PKH");
    B.P2shAddressType_yON = new A.P2shAddressType(32, "P2SH32/P2PK");
    B.P2shAddressType_mdM = new A.P2shAddressType(32, "P2SH32WT/P2PKH");
    B.P2shAddressType_Aj9 = new A.P2shAddressType(32, "P2SH32WT/P2PK");
    B.P2shAddressType_An7 = new A.P2shAddressType(20, "P2SHWT/P2PKH");
    B.P2shAddressType_xea = new A.P2shAddressType(20, "P2SHWT/P2PK");
    B.List_PNR = A._setArrayType(makeConstList([B.PubKeyAddressType_P2PK, B.P2pkhAddressType_P2PKH, B.P2pkhAddressType_P2PKHWT, B.P2shAddressType_apR, B.P2shAddressType_vvf, B.P2shAddressType_rEf, B.P2shAddressType_yON, B.P2shAddressType_mdM, B.P2shAddressType_Aj9, B.P2shAddressType_An7, B.P2shAddressType_xea]), type$.JSArray_BitcoinAddressType);
    B.BitcoinCashNetwork_DE4 = new A.BitcoinCashNetwork(B.CoinConf_C5C, "bitcoinCashMainnet", "bitcoincash:mainnet");
    B.CoinNames_1vL = new A.CoinNames("Bitcoin Cash TestNet");
    B.List_239 = A._setArrayType(makeConstList([239]), type$.JSArray_int);
    B.List_111 = A._setArrayType(makeConstList([111]), type$.JSArray_int);
    B.List_196 = A._setArrayType(makeConstList([196]), type$.JSArray_int);
    B.CoinParams_yr4 = new A.CoinParams(null, null, null, null, B.List_239, null, null, null, "bchtest", B.List_0, B.List_111, "bchtest", B.List_8, B.List_196, null, null, null, null, null, null, null);
    B.CoinConf_24w = new A.CoinConf(B.CoinNames_1vL, B.CoinParams_yr4);
    B.BitcoinCashNetwork_Ose = new A.BitcoinCashNetwork(B.CoinConf_24w, "bitcoinCashTestnet", "bitcoincash:testnet");
    B.CoinNames_gL8 = new A.CoinNames("Bitcoin TestNet");
    B.CoinParams_P5D = new A.CoinParams(B.List_111, B.List_196, "tb", "tb", B.List_239, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_khN = new A.CoinConf(B.CoinNames_gL8, B.CoinParams_P5D);
    B.BitcoinNetwork_IWD = new A.BitcoinNetwork(B.CoinConf_khN, "bitcoinTestnet4", "bitcoin:testnet4");
    B.CoinNames_Bitcoin = new A.CoinNames("Bitcoin");
    B.CoinParams_Btn = new A.CoinParams(B.List_0, B.List_5, "bc", "bc", B.List_128, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_6iT = new A.CoinConf(B.CoinNames_Bitcoin, B.CoinParams_Btn);
    B.BitcoinNetwork_o5I = new A.BitcoinNetwork(B.CoinConf_6iT, "bitcoinMainnet", "bitcoin:mainnet");
    B.BitcoinNetwork_o9i = new A.BitcoinNetwork(B.CoinConf_khN, "bitcoinTestnet", "bitcoin:testnet");
    B.BitcoinOpcode_OP_0_0_op0 = new A.BitcoinOpcode("OP_0", 0, "op0");
    B.BitcoinOpcode_OP_1_81_op1 = new A.BitcoinOpcode("OP_1", 81, "op1");
    B.BitcoinOpcode_OP_CHECKSIG_172_opCheckSig = new A.BitcoinOpcode("OP_CHECKSIG", 172, "opCheckSig");
    B.BitcoinOpcode_OP_DUP_118_opDup = new A.BitcoinOpcode("OP_DUP", 118, "opDup");
    B.BitcoinOpcode_OP_EQUALVERIFY_136_opEqualVerify = new A.BitcoinOpcode("OP_EQUALVERIFY", 136, "opEqualVerify");
    B.BitcoinOpcode_OP_EQUAL_135_opEqual = new A.BitcoinOpcode("OP_EQUAL", 135, "opEqual");
    B.BitcoinOpcode_OP_HASH160_169_opHash160 = new A.BitcoinOpcode("OP_HASH160", 169, "opHash160");
    B.BitcoinOpcode_OP_HASH256_170_opHash256 = new A.BitcoinOpcode("OP_HASH256", 170, "opHash256");
    B.BitcoinOpcode_OP_PUSHDATA1_76_opPushData1 = new A.BitcoinOpcode("OP_PUSHDATA1", 76, "opPushData1");
    B.BitcoinOpcode_OP_PUSHDATA2_77_opPushData2 = new A.BitcoinOpcode("OP_PUSHDATA2", 77, "opPushData2");
    B.BitcoinOpcode_OP_PUSHDATA4_78_opPushData4 = new A.BitcoinOpcode("OP_PUSHDATA4", 78, "opPushData4");
    B.CoinNames_CQb = new A.CoinNames("BitcoinSV TestNet");
    B.CoinParams_BuO = new A.CoinParams(B.List_111, B.List_196, null, null, B.List_239, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_ldd = new A.CoinConf(B.CoinNames_CQb, B.CoinParams_BuO);
    B.BitcoinSVNetwork_Qce = new A.BitcoinSVNetwork(B.CoinConf_ldd, "BitcoinSVTestnet", "bitcoinsv:testnet");
    B.CoinNames_BitcoinSV = new A.CoinNames("BitcoinSV");
    B.CoinParams_gFN = new A.CoinParams(B.List_0, B.List_5, null, null, B.List_128, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_jJJ = new A.CoinConf(B.CoinNames_BitcoinSV, B.CoinParams_gFN);
    B.BitcoinSVNetwork_f7v = new A.BitcoinSVNetwork(B.CoinConf_jJJ, "BitcoinSVMainnet", "bitcoinsv:mainnet");
    B.C__EmptyStream = new A._EmptyStream(A.findType("_EmptyStream<List<int>>"));
    B.ByteStream__EmptyStream = new A.ByteStream(B.C__EmptyStream);
    B.CCTPV1Types_2ky = new A.CCTPV1Types("/circle.cctp.v1.MsgUpdateTokenController", "cctp/UpdateTokenController");
    B.CCTPV1Types_2rV = new A.CCTPV1Types("/circle.cctp.v1.MsgDepositForBurn", "cctp/DepositForBurn");
    B.CCTPV1Types_81S = new A.CCTPV1Types("/circle.cctp.v1.MsgDisableAttester", "cctp/DisableAttester");
    B.CCTPV1Types_8nl = new A.CCTPV1Types("/circle.cctp.v1.MsgUpdateMaxMessageBodySize", "cctp/UpdateMaxMessageBodySize");
    B.CCTPV1Types_8wT = new A.CCTPV1Types("/circle.cctp.v1.MsgUpdatePauser", "cctp/UpdatePauser");
    B.CCTPV1Types_ABG = new A.CCTPV1Types("/circle.cctp.v1.MsgPauseSendingAndReceivingMessages", "cctp/PauseSendingAndReceivingMessages");
    B.CCTPV1Types_C5S = new A.CCTPV1Types("/circle.cctp.v1.MsgReceiveMessage", "cctp/ReceiveMessage");
    B.CCTPV1Types_DvS = new A.CCTPV1Types("/circle.cctp.v1.MsgUpdateAttesterManager", "cctp/UpdateAttesterManager");
    B.CCTPV1Types_GQU = new A.CCTPV1Types("/circle.cctp.v1.MsgPauseBurningAndMinting", "cctp/PauseBurningAndMinting");
    B.CCTPV1Types_GeE = new A.CCTPV1Types("/circle.cctp.v1.MsgSendMessage", "cctp/SendMessage");
    B.CCTPV1Types_L7D = new A.CCTPV1Types("/circle.cctp.v1.MsgSendMessageWithCaller", "cctp/SendMessageWithCaller");
    B.CCTPV1Types_LV1 = new A.CCTPV1Types("/circle.cctp.v1.MsgAddRemoteTokenMessenger", "cctp/AddRemoteTokenMessenger");
    B.CCTPV1Types_NCP = new A.CCTPV1Types("/circle.cctp.v1.MsgRemoveRemoteTokenMessenger", "cctp/RemoveRemoteTokenMessenger");
    B.CCTPV1Types_Nlv = new A.CCTPV1Types("/circle.cctp.v1.MsgAcceptOwner", "cctp/AcceptOwner");
    B.CCTPV1Types_Nrb = new A.CCTPV1Types("/circle.cctp.v1.MsgUpdateOwner", "cctp/UpdateOwner");
    B.CCTPV1Types_Sk1 = new A.CCTPV1Types("/circle.cctp.v1.MsgUpdateSignatureThreshold", "cctp/UpdateSignatureThreshold");
    B.CCTPV1Types_UMf = new A.CCTPV1Types("/circle.cctp.v1.MsgReplaceDepositForBurn", "cctp/ReplaceDepositForBurn");
    B.CCTPV1Types_XiD = new A.CCTPV1Types("/circle.cctp.v1.MsgEnableAttester", "cctp/EnableAttester");
    B.CCTPV1Types_ZmI = new A.CCTPV1Types("/circle.cctp.v1.MsgReplaceMessage", "cctp/ReplaceMessage");
    B.CCTPV1Types_a3E = new A.CCTPV1Types("/circle.cctp.v1.MsgUnpauseSendingAndReceivingMessages", "cctp/UnpauseSendingAndReceivingMessages");
    B.CCTPV1Types_fgb = new A.CCTPV1Types("/circle.cctp.v1.MsgDepositForBurnWithCaller", "cctp/DepositForBurnWithCaller");
    B.CCTPV1Types_ilW = new A.CCTPV1Types("/circle.cctp.v1.MsgUnlinkTokenPair", "cctp/UnlinkTokenPair");
    B.CCTPV1Types_in6 = new A.CCTPV1Types("/circle.cctp.v1.MsgLinkTokenPair", "cctp/LinkTokenPair");
    B.CCTPV1Types_lKR = new A.CCTPV1Types("/circle.cctp.v1.MsgUnpauseBurningAndMinting", "cctp/UnpauseBurningAndMinting");
    B.CCTPV1Types_thd = new A.CCTPV1Types("/circle.cctp.v1.MsgSetMaxBurnAmountPerMessage", "cctp/SetMaxBurnAmountPerMessage");
    B.CONSTANT = new A.Instantiation1(A.math__max$closure(), A.findType("Instantiation1<int>"));
    B.C_AsciiCodec = new A.AsciiCodec();
    B.C_Base64Decoder = new A.Base64Decoder();
    B.C_CborNullValue = new A.CborNullValue();
    B.C_CborUndefinedValue = new A.CborUndefinedValue();
    B.C_CipProposal = new A.CipProposal();
    B.C_CustomProposal = new A.CustomProposal();
    B.C_EmptyIterator = new A.EmptyIterator(A.findType("EmptyIterator<0&>"));
    B.C_Endian = new A.Endian();
    B.C_Endian0 = new A.Endian();
    B.C_ErgoNetworkTypes0 = new A.ErgoNetworkTypes();
    B.C_ErgoNetworkTypes = new A.ErgoNetworkTypes();
    B.C_FailedHttpIsolateInitialization = new A.FailedHttpIsolateInitialization();
    B.C_IntegerDivisionByZeroException = new A.IntegerDivisionByZeroException();
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof HTMLElement == "function";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (typeof userAgent != "string") return hooks;
    if (userAgent.indexOf("DumpRenderTree") >= 0) return hooks;
    if (userAgent.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST5 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_JsonCodec = new A.JsonCodec();
    B.C_Latin1Codec = new A.Latin1Codec();
    B.C_MoneroProposal = new A.MoneroProposal();
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.CoinNames_Pepecoin = new A.CoinNames("Pepecoin");
    B.List_56 = A._setArrayType(makeConstList([56]), type$.JSArray_int);
    B.List_22 = A._setArrayType(makeConstList([22]), type$.JSArray_int);
    B.List_158 = A._setArrayType(makeConstList([158]), type$.JSArray_int);
    B.CoinParams_qYa = new A.CoinParams(B.List_56, B.List_22, null, null, B.List_158, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_ALe = new A.CoinConf(B.CoinNames_Pepecoin, B.CoinParams_qYa);
    B.List_H7c = A._setArrayType(makeConstList([B.PubKeyAddressType_P2PK, B.P2pkhAddressType_P2PKH, B.P2shAddressType_apR, B.P2shAddressType_vvf]), type$.JSArray_BitcoinAddressType);
    B.C_PepeNetwork = new A.PepeNetwork();
    B.C_SentinelValue = new A.SentinelValue();
    B.C_SubstratePropoosal = new A.SubstratePropoosal();
    B.C_SubstrateScaleCUintEncoder = new A.SubstrateScaleCUintEncoder();
    B.C_Utf8Codec = new A.Utf8Codec();
    B.C_Utf8Encoder = new A.Utf8Encoder();
    B.List_6_161_159 = A._setArrayType(makeConstList([6, 161, 159]), type$.JSArray_int);
    B.C_XtzAddrPrefixes = new A.XtzAddrPrefixes();
    B.C__DelayedDone = new A._DelayedDone();
    B.C__Hex = new A._Hex();
    B.C__RootZone = new A._RootZone();
    B.C__StringStackTrace = new A._StringStackTrace();
    B.CborBoleanValue_false = new A.CborBoleanValue(false);
    B.CborBoleanValue_true = new A.CborBoleanValue(true);
    B.CborException_6h4 = new A.CborException("Invalid simpleOrFloatTags", null);
    B.CborException_FFX = new A.CborException("invalid cbornumeric", null);
    B.CborException_SJF = new A.CborException("invalid bigFloat array length", null);
    B.CborException_gYX = new A.CborException("Input byte array must be exactly 2 bytes long for Float16", null);
    B.CborException_lWr = new A.CborException("invalid or unsuported cbor tag", null);
    B.CborException_xZj = new A.CborException("Length is to large for type int.", null);
    B.CellType_Library_2 = new A.CellType("Library", 2);
    B.CellType_MerkleProof_3 = new A.CellType("MerkleProof", 3);
    B.CellType_MerkleUpdate_4 = new A.CellType("MerkleUpdate", 4);
    B.CellType_Ordinary_m1 = new A.CellType("Ordinary", -1);
    B.CellType_PrunedBranch_1 = new A.CellType("PrunedBranch", 1);
    B.ChainType_mainnet = new A.ChainType("mainnet");
    B.ChainType_testnet = new A.ChainType("testnet");
    B.Cip1852Coins_cardanoIcarus = new A.Cip1852Coins("cardanoIcarus");
    B.Cip1852Coins_cardanoIcarusTestnet = new A.Cip1852Coins("cardanoIcarusTestnet");
    B.Cip1852Coins_cardanoLedger = new A.Cip1852Coins("cardanoLedger");
    B.Cip1852Coins_cardanoLedgerTestnet = new A.Cip1852Coins("cardanoLedgerTestnet");
    B.CoinNames_Stafi = new A.CoinNames("Stafi");
    B.CoinParams_jlr = new A.CoinParams(null, null, null, null, null, 20, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_1rN = new A.CoinConf(B.CoinNames_Stafi, B.CoinParams_jlr);
    B.CoinNames_kOE = new A.CoinNames("Generic Substrate");
    B.CoinParams_lEh = new A.CoinParams(null, null, null, null, null, 42, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_2Q3 = new A.CoinConf(B.CoinNames_kOE, B.CoinParams_lEh);
    B.CoinNames_Sck = new A.CoinNames("Plasm Network");
    B.CoinParams_7BH = new A.CoinParams(null, null, null, null, null, 5, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_9rY = new A.CoinConf(B.CoinNames_Sck, B.CoinParams_7BH);
    B.CoinNames_Moonbeam = new A.CoinNames("Moonbeam");
    B.CoinParams_aTs = new A.CoinParams(null, null, null, null, null, 1284, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_NFA = new A.CoinConf(B.CoinNames_Moonbeam, B.CoinParams_aTs);
    B.CoinNames_Monero = new A.CoinNames("Monero");
    B.List_18 = A._setArrayType(makeConstList([18]), type$.JSArray_int);
    B.List_19 = A._setArrayType(makeConstList([19]), type$.JSArray_int);
    B.List_42 = A._setArrayType(makeConstList([42]), type$.JSArray_int);
    B.CoinParams_mUl = new A.CoinParams(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, B.List_18, B.List_19, B.List_42, null, null);
    B.CoinConf_Z8a = new A.CoinConf(B.CoinNames_Monero, B.CoinParams_mUl);
    B.CoinNames_Sora = new A.CoinNames("Sora");
    B.CoinParams_KMt = new A.CoinParams(null, null, null, null, null, 69, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_cB1 = new A.CoinConf(B.CoinNames_Sora, B.CoinParams_KMt);
    B.CoinNames_Edgeware = new A.CoinNames("Edgeware");
    B.CoinParams_pgH = new A.CoinParams(null, null, null, null, null, 7, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_d50 = new A.CoinConf(B.CoinNames_Edgeware, B.CoinParams_pgH);
    B.CoinNames_ChainX = new A.CoinNames("ChainX");
    B.CoinParams_e7W = new A.CoinParams(null, null, null, null, null, 44, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_dz7 = new A.CoinConf(B.CoinNames_ChainX, B.CoinParams_e7W);
    B.CoinNames_Bifrost = new A.CoinNames("Bifrost");
    B.CoinParams_v9p = new A.CoinParams(null, null, null, null, null, 6, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_fWq = new A.CoinConf(B.CoinNames_Bifrost, B.CoinParams_v9p);
    B.CoinNames_r3G = new A.CoinNames("Phala Network");
    B.CoinParams_JN4 = new A.CoinParams(null, null, null, null, null, 30, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_htN = new A.CoinConf(B.CoinNames_r3G, B.CoinParams_JN4);
    B.CoinNames_Karura = new A.CoinNames("Karura");
    B.CoinParams_vDI = new A.CoinParams(null, null, null, null, null, 8, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_jfr = new A.CoinConf(B.CoinNames_Karura, B.CoinParams_vDI);
    B.CoinNames_Moonriver = new A.CoinNames("Moonriver");
    B.CoinParams_6O6 = new A.CoinParams(null, null, null, null, null, 1285, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_nB3 = new A.CoinConf(B.CoinNames_Moonriver, B.CoinParams_6O6);
    B.CoinNames_Acala = new A.CoinNames("Acala");
    B.CoinParams_OBv = new A.CoinParams(null, null, null, null, null, 10, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_rMV = new A.CoinConf(B.CoinNames_Acala, B.CoinParams_OBv);
    B.CoinNames_Polkadot = new A.CoinNames("Polkadot");
    B.CoinParams_FAx = new A.CoinParams(null, null, null, null, null, 0, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_rfh = new A.CoinConf(B.CoinNames_Polkadot, B.CoinParams_FAx);
    B.CoinNames_A2d = new A.CoinNames("Monero TestNet");
    B.List_53 = A._setArrayType(makeConstList([53]), type$.JSArray_int);
    B.List_54 = A._setArrayType(makeConstList([54]), type$.JSArray_int);
    B.List_63 = A._setArrayType(makeConstList([63]), type$.JSArray_int);
    B.CoinParams_moJ = new A.CoinParams(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, B.List_53, B.List_54, B.List_63, null, null);
    B.CoinConf_sCL = new A.CoinConf(B.CoinNames_A2d, B.CoinParams_moJ);
    B.CoinNames_Kusama = new A.CoinNames("Kusama");
    B.CoinParams_0UQ = new A.CoinParams(null, null, null, null, null, 2, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_y1J = new A.CoinConf(B.CoinNames_Kusama, B.CoinParams_0UQ);
    B.CoinNames_MpY = new A.CoinNames("Monero StageNet");
    B.List_25 = A._setArrayType(makeConstList([25]), type$.JSArray_int);
    B.List_36 = A._setArrayType(makeConstList([36]), type$.JSArray_int);
    B.CoinParams_nwk = new A.CoinParams(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, B.List_24, B.List_25, B.List_36, null, null);
    B.CoinConf_yod = new A.CoinConf(B.CoinNames_MpY, B.CoinParams_nwk);
    B.CoinNames_2vZ = new A.CoinNames("Zcash TestNet");
    B.CoinNames_6I5 = new A.CoinNames("IRIS Network");
    B.CoinNames_6lR = new A.CoinNames("Byron legacy");
    B.CoinNames_A7Y = new A.CoinNames("eCash TestNet");
    B.CoinNames_Algorand = new A.CoinNames("Algorand");
    B.CoinNames_Aptos = new A.CoinNames("Aptos");
    B.CoinNames_Axelar = new A.CoinNames("Axelar");
    B.CoinNames_Cardano = new A.CoinNames("Cardano");
    B.CoinNames_Celo = new A.CoinNames("Celo");
    B.CoinNames_Certik = new A.CoinNames("Certik");
    B.CoinNames_Chihuahua = new A.CoinNames("Chihuahua");
    B.CoinNames_Cosmos = new A.CoinNames("Cosmos");
    B.CoinNames_Dash = new A.CoinNames("Dash");
    B.CoinNames_Dogecoin = new A.CoinNames("Dogecoin");
    B.CoinNames_EOS = new A.CoinNames("EOS");
    B.CoinNames_Eq2 = new A.CoinNames("Huobi Token");
    B.CoinNames_Ergo = new A.CoinNames("Ergo");
    B.CoinNames_Ethereum = new A.CoinNames("Ethereum");
    B.CoinNames_Filecoin = new A.CoinNames("Filecoin");
    B.CoinNames_Gg4 = new A.CoinNames("The Open Network");
    B.CoinNames_Gg40 = new A.CoinNames("The Open Network");
    B.CoinNames_GqI = new A.CoinNames("Byron legacy testnet");
    B.CoinNames_HRl = new A.CoinNames("Akash Network");
    B.CoinNames_Hic = new A.CoinNames("Cardano TestNet");
    B.CoinNames_Icon = new A.CoinNames("Icon");
    B.CoinNames_Injective = new A.CoinNames("Injective");
    B.CoinNames_JXy = new A.CoinNames("Electra Protocol");
    B.CoinNames_Kava = new A.CoinNames("Kava");
    B.CoinNames_Kcg1 = new A.CoinNames("Avax C-Chain");
    B.CoinNames_Kcg0 = new A.CoinNames("Avax P-Chain");
    B.CoinNames_Kcg = new A.CoinNames("Avax X-Chain");
    B.CoinNames_Litecoin = new A.CoinNames("Litecoin");
    B.CoinNames_MFR = new A.CoinNames("Binance Smart Chain");
    B.CoinNames_NEO = new A.CoinNames("NEO");
    B.CoinNames_Nano = new A.CoinNames("Nano");
    B.CoinNames_NineChroniclesGold = new A.CoinNames("NineChroniclesGold");
    B.CoinNames_Nk6 = new A.CoinNames("Pepecoin TestNet");
    B.CoinNames_O05 = new A.CoinNames("Ergo TestNet");
    B.CoinNames_OKExChain = new A.CoinNames("OKExChain");
    B.CoinNames_Ontology = new A.CoinNames("Ontology");
    B.CoinNames_Osmosis = new A.CoinNames("Osmosis");
    B.CoinNames_Polygon = new A.CoinNames("Polygon");
    B.CoinNames_R7N = new A.CoinNames("Bitcoin Cash SLP");
    B.CoinNames_Ripple = new A.CoinNames("Ripple");
    B.CoinNames_Rp6 = new A.CoinNames("Binance Chain");
    B.CoinNames_Solana = new A.CoinNames("Solana");
    B.CoinNames_Stellar = new A.CoinNames("Stellar");
    B.CoinNames_Sui = new A.CoinNames("Sui");
    B.CoinNames_Tbu = new A.CoinNames("Electra Protocol TestNet");
    B.CoinNames_Terra = new A.CoinNames("Terra");
    B.CoinNames_Tezos = new A.CoinNames("Tezos");
    B.CoinNames_Tron = new A.CoinNames("Tron");
    B.CoinNames_UKI = new A.CoinNames("Band Protocol");
    B.CoinNames_USx = new A.CoinNames("Fantom Opera");
    B.CoinNames_VeChain = new A.CoinNames("VeChain");
    B.CoinNames_Verge = new A.CoinNames("Verge");
    B.CoinNames_ZAX = new A.CoinNames("Dogecoin TestNet");
    B.CoinNames_Zcash = new A.CoinNames("Zcash");
    B.CoinNames_Zilliqa = new A.CoinNames("Zilliqa");
    B.CoinNames_a8f = new A.CoinNames("Theta Network");
    B.CoinNames_cIT = new A.CoinNames("Litecoin TestNet");
    B.CoinNames_eCash = new A.CoinNames("eCash");
    B.CoinNames_jSo = new A.CoinNames("Near Protocol");
    B.CoinNames_jrx = new A.CoinNames("Elrond eGold");
    B.CoinNames_lRs = new A.CoinNames("Ethereum Classic");
    B.CoinNames_oQV = new A.CoinNames("Pi Network");
    B.CoinNames_tzl = new A.CoinNames("Harmony One");
    B.CoinNames_uYt = new A.CoinNames("Bitcoin Cash SLP TestNet");
    B.CoinNames_vl8 = new A.CoinNames("Secret Network");
    B.CoinNames_wNy = new A.CoinNames("Dash TestNet");
    B.CosmosCryptoKeysTypes_Wsy = new A.CosmosCryptoKeysTypes("/cosmos.crypto.secp256k1.PubKey", null);
    B.CosmosCryptoKeysTypes_Wsy0 = new A.CosmosCryptoKeysTypes("/cosmos.crypto.secp256r1.PubKey", null);
    B.CosmosCryptoKeysTypes_g6t = new A.CosmosCryptoKeysTypes("/ethermint.crypto.v1.ethsecp256k1.PubKey", null);
    B.CosmosCryptoKeysTypes_vyH = new A.CosmosCryptoKeysTypes("/cosmos.crypto.ed25519.PubKey", null);
    B.CosmosKeysAlgs_ed25519 = new A.CosmosKeysAlgs("ed25519");
    B.CosmosKeysAlgs_ethsecp256k1 = new A.CosmosKeysAlgs("ethsecp256k1");
    B.CosmosKeysAlgs_secp256k1 = new A.CosmosKeysAlgs("secp256k1");
    B.CosmosKeysAlgs_secp256r1 = new A.CosmosKeysAlgs("secp256r1");
    B.CrisisV1beta1_UQu = new A.CrisisV1beta1("/cosmos.crisis.v1beta1.MsgVerifyInvariant", null);
    B.CryptoException_1Xx = new A.CryptoException("blake2b: can't update because hash was finished.", null);
    B.CryptoException_3cw = new A.CryptoException("ChaCha: counter overflow", null);
    B.CryptoException_5Ft = new A.CryptoException("The public point has x or y out of range.", null);
    B.CryptoException_5YI = new A.CryptoException("ChaCha: key size must be 32 bytes", null);
    B.CryptoException_5rc = new A.CryptoException("AES: initialized with different key size", null);
    B.CryptoException_6hD = new A.CryptoException("AffinePointt does not lay on the curve", null);
    B.CryptoException_997 = new A.CryptoException("AffinePointt length doesn't match the curve.", null);
    B.CryptoException_Cmb = new A.CryptoException("ChaCha: destination is shorter than source", null);
    B.CryptoException_HYf = new A.CryptoException("blake2b: wrong digest length", null);
    B.CryptoException_Hdq = new A.CryptoException("Generator point order is bad.", null);
    B.CryptoException_PCa = new A.CryptoException("SHA512: can't update because hash was finished.", null);
    B.CryptoException_Pc3 = new A.CryptoException("invalid key length", null);
    B.CryptoException_RFf = new A.CryptoException("Malformed compressed point encoding", null);
    B.CryptoException_RbC = new A.CryptoException("Invalid RistrettoPoint", null);
    B.CryptoException_TXP = new A.CryptoException("CTR: counter overflow", null);
    B.CryptoException_Tbk = new A.CryptoException("Inconsistent hybrid point encoding", null);
    B.CryptoException_ULN = new A.CryptoException("CTR: iv length must be equal to cipher block size", null);
    B.CryptoException_UXg = new A.CryptoException("AES: invalid destination block size", null);
    B.CryptoException_VyX = new A.CryptoException("SHA256: can't update because hash was finished.", null);
    B.CryptoException_a53 = new A.CryptoException("ChaCha20Poly1305: incorrect nonce length", null);
    B.CryptoException_aEB = new A.CryptoException("Poly1305 was finished", null);
    B.CryptoException_efd = new A.CryptoException("SHA3: incorrect capacity", null);
    B.CryptoException_f8H = new A.CryptoException("AES: encryption key is not available", null);
    B.CryptoException_gl4 = new A.CryptoException("ChaCha nonce must be 8 or 12 bytes", null);
    B.CryptoException_hzd = new A.CryptoException("Generator point must have order.", null);
    B.CryptoException_k5E = new A.CryptoException("SHA3: squeezing before padAndPermute", null);
    B.CryptoException_lMb = new A.CryptoException("Size is too large!", null);
    B.CryptoException_nAM = new A.CryptoException("SHA3: can't update because hash was finished", null);
    B.CryptoException_oAd = new A.CryptoException("ChaCha20Poly1305 needs a 32-byte key", null);
    B.CryptoException_yTp = new A.CryptoException("AES: invalid source block size", null);
    B.DartBitcoinPluginException_724 = new A.DartBitcoinPluginException("Integer is currently required to be positive.", null);
    B.DartBitcoinPluginException_8u7 = new A.DartBitcoinPluginException("Invalid Bitcoin address.", null);
    B.DartBitcoinPluginException_OoQ = new A.DartBitcoinPluginException("Invalid category hexadecimal bytes.", null);
    B.DartBitcoinPluginException_TzO = new A.DartBitcoinPluginException("Invalid amount. Amount must be between zero and 99.", null);
    B.DartBitcoinPluginException_Zyd = new A.DartBitcoinPluginException("Invalid Public key.", null);
    B.DartBitcoinPluginException_c2A = new A.DartBitcoinPluginException("Invalid cash token", null);
    B.DartBitcoinPluginException_hzJ = new A.DartBitcoinPluginException("Invalid Bitcoin address program length (program length should be 32 or 20 bytes)", null);
    B.DartBitcoinPluginException_ovy = new A.DartBitcoinPluginException("network does not support p2wpkh HRP", null);
    B.DartBitcoinPluginException_rmC = new A.DartBitcoinPluginException("Data too large. Cannot push into script", null);
    B.DartBitcoinPluginException_s4L = new A.DartBitcoinPluginException("Invalid bitfield", null);
    B.DartBitcoinPluginException_sru = new A.DartBitcoinPluginException("DashNetwork network does not support P2WPKH/P2WSH", null);
    B.DartBitcoinPluginException_vXF = new A.DartBitcoinPluginException("DogecoinNetwork network does not support P2WPKH/P2WSH", null);
    B.DartBitcoinPluginException_zeS = new A.DartBitcoinPluginException("Invalid category. The category should consist of 32 bytes.", null);
    B.DartBitcoinPluginException_zmA = new A.DartBitcoinPluginException("Invalid cash token: the bitfield indicates an commitment, but the commitment is null or empty.", null);
    B.DartCosmosSdkPluginException_1E8 = new A.DartCosmosSdkPluginException(string$.Invalil, null);
    B.DartCosmosSdkPluginException_GGa = new A.DartCosmosSdkPluginException(string$.Invalim, null);
    B.DartStellarPlugingException_1si = new A.DartStellarPlugingException("Invalid address type. for secret key please use `StellarPrivateKey.fromBase32`", null);
    B.DartStellarPlugingException_eIz = new A.DartStellarPlugingException("Unknown address type.", null);
    B.DartSubstratePluginException_jlC = new A.DartSubstratePluginException("Invalid variant layout. only use enum layout to deserialize with `SubstrateVariantSerialization.deserialize` method.", null);
    B.DartSuiPluginException_97b = new A.DartSuiPluginException("Invalid bytes casting. only use `valueAsList` method for bytes.", null);
    B.DartSuiPluginException_JbI = new A.DartSuiPluginException(string$.Invalil, null);
    B.DartSuiPluginException_Tkp = new A.DartSuiPluginException(string$.Invalim, null);
    B.List_140 = A._setArrayType(makeConstList([140]), type$.JSArray_int);
    B.CoinParams_GfC = new A.CoinParams(B.List_140, B.List_19, null, null, B.List_239, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_cKE = new A.CoinConf(B.CoinNames_wNy, B.CoinParams_GfC);
    B.DashNetwork_92e = new A.DashNetwork(B.CoinConf_cKE, "dashTestnet", "dash:testnet");
    B.List_76 = A._setArrayType(makeConstList([76]), type$.JSArray_int);
    B.List_204 = A._setArrayType(makeConstList([204]), type$.JSArray_int);
    B.CoinParams_4dj = new A.CoinParams(B.List_76, B.List_16, null, null, B.List_204, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_eUT = new A.CoinConf(B.CoinNames_Dash, B.CoinParams_4dj);
    B.DashNetwork_rwj = new A.DashNetwork(B.CoinConf_eUT, "dashMainnet", "dash:mainnet");
    B.DeprecationInfoTypes_0 = new A.DeprecationInfoTypes("notDeprecated");
    B.DeprecationInfoTypes_1 = new A.DeprecationInfoTypes("itemDeprecated");
    B.DeprecationInfoTypes_2 = new A.DeprecationInfoTypes("variantsDeprecated");
    B.DeprecationStatusTypes_0 = new A.DeprecationStatusTypes("notDeprecated");
    B.DeprecationStatusTypes_1 = new A.DeprecationStatusTypes("deprecatedWithoutNote");
    B.DeprecationStatusTypes_2 = new A.DeprecationStatusTypes("deprecated");
    B.DigestAuthHeadersAlg_MD5_md5 = new A.DigestAuthHeadersAlg("MD5", "md5");
    B.DigestAuthHeadersAlg_PUQ = new A.DigestAuthHeadersAlg("SHA-512-256-sess", "sha512256Sess");
    B.DigestAuthHeadersAlg_R2P = new A.DigestAuthHeadersAlg("SHA-512-sess", "sha512Sess");
    B.DigestAuthHeadersAlg_aYk = new A.DigestAuthHeadersAlg("SHA-512", "sha512");
    B.DigestAuthHeadersAlg_qwM = new A.DigestAuthHeadersAlg("SHA-256-sess", "sha256Sess");
    B.DigestAuthHeadersAlg_rEg = new A.DigestAuthHeadersAlg("MD5-sess", "md5Sess");
    B.DigestAuthHeadersAlg_u8N = new A.DigestAuthHeadersAlg("SHA-256", "sha256");
    B.DigestAuthHeadersAlg_zvv = new A.DigestAuthHeadersAlg("SHA-512-256", "sha512256");
    B.DigestAuthQop_auth_auth = new A.DigestAuthQop("auth", "auth");
    B.DigestAuthQop_zIr = new A.DigestAuthQop("auth-int", "authInt");
    B.DistributionV1beta1Types_OEy = new A.DistributionV1beta1Types("/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission", string$.cosmos);
    B.DistributionV1beta1Types_aXN = new A.DistributionV1beta1Types("/cosmos.distribution.v1beta1.MsgSetWithdrawAddress", "cosmos-sdk/MsgModifyWithdrawAddress");
    B.DistributionV1beta1Types_dLI = new A.DistributionV1beta1Types("/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward", "cosmos-sdk/MsgWithdrawDelegationReward");
    B.DistributionV1beta1Types_wpV = new A.DistributionV1beta1Types("/cosmos.distribution.v1beta1.MsgFundCommunityPool", "cosmos-sdk/MsgFundCommunityPool");
    B.List_30 = A._setArrayType(makeConstList([30]), type$.JSArray_int);
    B.CoinParams_XTz = new A.CoinParams(B.List_30, B.List_22, null, null, B.List_158, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_EIW = new A.CoinConf(B.CoinNames_Dogecoin, B.CoinParams_XTz);
    B.DogecoinNetwork_g3g = new A.DogecoinNetwork(B.CoinConf_EIW, "dogeMainnet", "dogecoin:mainnet");
    B.List_113 = A._setArrayType(makeConstList([113]), type$.JSArray_int);
    B.List_241 = A._setArrayType(makeConstList([241]), type$.JSArray_int);
    B.CoinParams_Zir = new A.CoinParams(B.List_113, B.List_196, null, null, B.List_241, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_DqC = new A.CoinConf(B.CoinNames_ZAX, B.CoinParams_Zir);
    B.DogecoinNetwork_htF = new A.DogecoinNetwork(B.CoinConf_DqC, "dogeTestnet", "dogecoin:testnet");
    B.Duration_0 = new A.Duration(0);
    B.Duration_1000000 = new A.Duration(1000000);
    B.Duration_10000000 = new A.Duration(10000000);
    B.Duration_180000000 = new A.Duration(180000000);
    B.Duration_20000000 = new A.Duration(20000000);
    B.Duration_30000000 = new A.Duration(30000000);
    B.Duration_60000000 = new A.Duration(60000000);
    B.EIP712Version_1 = new A.EIP712Version(1);
    B.EIP712Version_4 = new A.EIP712Version(4);
    B.ETHTransactionType_0 = new A.ETHTransactionType(0);
    B.ETHTransactionType_1 = new A.ETHTransactionType(1);
    B.ETHTransactionType_2 = new A.ETHTransactionType(2);
    B.List_55 = A._setArrayType(makeConstList([55]), type$.JSArray_int);
    B.List_137 = A._setArrayType(makeConstList([137]), type$.JSArray_int);
    B.List_162 = A._setArrayType(makeConstList([162]), type$.JSArray_int);
    B.CoinParams_zAj = new A.CoinParams(B.List_55, B.List_137, "ep", null, B.List_162, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_UUz = new A.CoinConf(B.CoinNames_JXy, B.CoinParams_zAj);
    B.SegwitAddressType_P2WPKH = new A.SegwitAddressType("P2WPKH");
    B.SegwitAddressType_P2WSH = new A.SegwitAddressType("P2WSH");
    B.P2shAddressType_YXg = new A.P2shAddressType(20, "P2SH/P2WSH");
    B.P2shAddressType_UPK = new A.P2shAddressType(20, "P2SH/P2WPKH");
    B.List_DXH = A._setArrayType(makeConstList([B.P2pkhAddressType_P2PKH, B.SegwitAddressType_P2WPKH, B.PubKeyAddressType_P2PK, B.SegwitAddressType_P2WSH, B.P2shAddressType_YXg, B.P2shAddressType_UPK, B.P2shAddressType_apR, B.P2shAddressType_vvf]), type$.JSArray_BitcoinAddressType);
    B.ElectraProtocolNetwork_Ni4 = new A.ElectraProtocolNetwork(B.CoinConf_UUz, "electraProtocolMainnet", "electra:mainnet");
    B.List_141 = A._setArrayType(makeConstList([141]), type$.JSArray_int);
    B.CoinParams_5YS = new A.CoinParams(B.List_141, B.List_19, "te", null, B.List_239, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    B.CoinConf_xKc = new A.CoinConf(B.CoinNames_Tbu, B.CoinParams_5YS);
    B.ElectraProtocolNetwork_u6n = new A.ElectraProtocolNetwork(B.CoinConf_xKc, "electraProtocolTestnet", "electra:testnet");
    B.EllipticCurveTypes_0 = new A.EllipticCurveTypes("ed25519");
    B.EllipticCurveTypes_1 = new A.EllipticCurveTypes("ed25519Blake2b");
    B.EllipticCurveTypes_2 = new A.EllipticCurveTypes("ed25519Kholaw");
    B.EllipticCurveTypes_3 = new A.EllipticCurveTypes("ed25519Monero");
    B.EllipticCurveTypes_4 = new A.EllipticCurveTypes("nist256p1");
    B.EllipticCurveTypes_5 = new A.EllipticCurveTypes("nist256p1Hybrid");
    B.EllipticCurveTypes_6 = new A.EllipticCurveTypes("secp256k1");
    B.EllipticCurveTypes_7 = new A.EllipticCurveTypes("sr25519");
    B.EncodeType_0 = new A.EncodeType("comprossed");
    B.EncodeType_1 = new A.EncodeType("hybrid");
    B.EncodeType_2 = new A.EncodeType("raw");
    B.EncodeType_3 = new A.EncodeType("uncompressed");
    B.EthereumMethods_eth_subscribe = new A.EthereumMethods("eth_subscribe");
    B.EvmosErc20V1Types_2IE = new A.EvmosErc20V1Types("/evmos.vesting.v2.MsgClawback", "evmos/MsgClawback");
    B.EvmosErc20V1Types_5mW = new A.EvmosErc20V1Types("/evmos.erc20.v1.MsgRegisterERC20", "evmos/MsgRegisterERC20");
    B.EvmosErc20V1Types_7jk = new A.EvmosErc20V1Types("/evmos.revenue.v1.MsgCancelRevenue", "evmos/MsgCancelRevenue");
    B.EvmosErc20V1Types_AdM = new A.EvmosErc20V1Types("/evmos.erc20.v1.MsgUpdateParams", "evmos/erc20/MsgUpdateParams");
    B.EvmosErc20V1Types_E2n = new A.EvmosErc20V1Types("/evmos.vesting.v2.MsgCreateClawbackVestingAccount", "evmos/MsgCreateClawbackVestingAccount");
    B.EvmosErc20V1Types_Elm = new A.EvmosErc20V1Types("/ethermint.evm.v1.EvmosEthermintEVMV1MsgEthereumTxResponse", null);
    B.EvmosErc20V1Types_HXx = new A.EvmosErc20V1Types("/evmos.inflation.v1.MsgUpdateParams", "evmos/inflation/MsgUpdateParams");
    B.EvmosErc20V1Types_QOj = new A.EvmosErc20V1Types("/evmos.erc20.v1.MsgConvertCoin", "evmos/MsgConvertCoin");
    B.EvmosErc20V1Types_USN = new A.EvmosErc20V1Types("/ethermint.evm.v1.MsgUpdateParams", "ethermint/MsgUpdateParams");
    B.EvmosErc20V1Types_X6N = new A.EvmosErc20V1Types("/evmos.vesting.v2.MsgFundVestingAccount", "evmos/MsgFundVestingAccount");
    B.EvmosErc20V1Types_YH9 = new A.EvmosErc20V1Types("/ethermint.feemarket.v1.MsgUpdateParams", "ethermint/feemarket/MsgUpdateParams");
    B.EvmosErc20V1Types_clp = new A.EvmosErc20V1Types("/evmos.revenue.v1.MsgRegisterRevenue", "evmos/MsgRegisterRevenue");
    B.EvmosErc20V1Types_h6w = new A.EvmosErc20V1Types("/evmos.erc20.v1.MsgToggleConversion", "evmos/MsgToggleConversion");
    B.EvmosErc20V1Types_hnd = new A.EvmosErc20V1Types("/ethermint.evm.v1.EvmosEthermintEVMV1MsgEthereumTx", "ethermint/EvmosEthermintEVMV1MsgEthereumTx");
    B.EvmosErc20V1Types_kbj = new A.EvmosErc20V1Types("/evmos.vesting.v2.MsgUpdateVestingFunder", "evmos/MsgUpdateVestingFunder");
    B.EvmosErc20V1Types_oZ2 = new A.EvmosErc20V1Types("/evmos.revenue.v1.MsgUpdateParams", "evmos/MsgUpdateParams");
    B.EvmosErc20V1Types_sO8 = new A.EvmosErc20V1Types("/evmos.erc20.v1.MsgConvertERC20", "evmos/MsgConvertERC20");
    B.EvmosErc20V1Types_uXw = new A.EvmosErc20V1Types("/evmos.vesting.v2.MsgConvertVestingAccount", "evmos/MsgConvertVestingAccount");
    B.EvmosErc20V1Types_zvJ = new A.EvmosErc20V1Types("/evmos.revenue.v1.MsgUpdateRevenue", "evmos/MsgUpdateRevenue");
    B.FloatLength_11_52 = new A.FloatLength(11, 52);
    B.FloatLength_5_10 = new A.FloatLength(5, 10);
    B.FloatLength_8_23 = new A.FloatLength(8, 23);
    B.FriendlyAddressFlags_128 = new A.FriendlyAddressFlags(128);
    B.FriendlyAddressFlags_17 = new A.FriendlyAddressFlags(17);
    B.FriendlyAddressFlags_81 = new A.FriendlyAddressFlags(81);
    B.GovV1beta1types_OgS = new A.GovV1beta1types("/cosmos.gov.v1beta1.MsgVote", "cosmos-sdk/MsgVote");
    B.GovV1beta1types_PFS = new A.GovV1beta1types("/cosmos.gov.v1beta1.MsgDeposit", "cosmos-sdk/MsgDeposit");
    B.HTTPClientType_0 = new A.HTTPClientType("cached");
    B.HTTPClientType_1 = new A.HTTPClientType("single");
    B.HTTPRequestType_GET_get = new A.HTTPRequestType("GET", "get");
    B.HTTPRequestType_POST_post = new A.HTTPRequestType("POST", "post");
    B.HTTPResponseType_0 = new A.HTTPResponseType("binary");
    B.HTTPResponseType_1 = new A.HTTPResponseType("string");
    B.HTTPResponseType_2 = new A.HTTPResponseType("json");
    B.HTTPResponseType_3 = new A.HTTPResponseType("map");
    B.HTTPResponseType_4 = new A.HTTPResponseType("listOfMap");
    B.HttpWorkerMode_main = new A.HttpWorkerMode("main");
    B.IbcTypes_3Km = new A.IbcTypes("/ibc.applications.transfer.v1.MsgTransfer", "cosmos-sdk/MsgTransfer");
    B.JSClientType_3G4 = new A.JSClientType("", "global");
    B.JSClientType_Aptos_aptos = new A.JSClientType("Aptos", "aptos");
    B.JSClientType_Bitcoin_bitcoin = new A.JSClientType("Bitcoin", "bitcoin");
    B.JSClientType_Cosmos_cosmos = new A.JSClientType("Cosmos", "cosmos");
    B.JSClientType_Ethereum_ethereum = new A.JSClientType("Ethereum", "ethereum");
    B.JSClientType_Solana_solana = new A.JSClientType("Solana", "solana");
    B.JSClientType_Stellar_stellar = new A.JSClientType("Stellar", "stellar");
    B.JSClientType_Substrate_substrate = new A.JSClientType("Substrate", "substrate");
    B.JSClientType_Sui_sui = new A.JSClientType("Sui", "sui");
    B.JSClientType_TON_ton = new A.JSClientType("TON", "ton");
    B.JSClientType_Tron_tron = new A.JSClientType("Tron", "tron");
    B.JSEventType_0 = new A.JSEventType("accountsChanged");
    B.JSEventType_1 = new A.JSEventType("chainChanged");
    B.JSEventType_3 = new A.JSEventType("connect");
    B.JSEventType_5 = new A.JSEventType("change");
    B.JSNetworkEventType_0 = new A.JSNetworkEventType("networkAccountsChanged");
    B.JSNetworkEventType_1 = new A.JSNetworkEventType("change");
    B.JSNetworkEventType_2 = new A.JSNetworkEventType("defaultChainChanged");
    B.JSNetworkEventType_3 = new A.JSNetworkEventType("defaultAccountChanged");
    B.JSNetworkEventType_4 = new A.JSNetworkEventType("message");
    B.JSNetworkState_0 = new A.JSNetworkState("init");
    B.JSNetworkState_1 = new A.JSNetworkState("disconnect");
    B.JSNetworkState_2 = new A.JSNetworkState("block");
    B.JSWalletResponseType_0 = new A.JSWalletResponseType("success");
    B.JacobiError_rAF = new A.JacobiError("n must be larger than 2.", null);
    B.JacobiError_uQy = new A.JacobiError("n must be odd.", null);
    B.JsonDecoder_null = new A.JsonDecoder(null);
    B.JsonEncoder_null_null = new A.JsonEncoder(null, null);
    B.Latin1Encoder_255 = new A.Latin1Encoder(255);
    B.LayoutDecodeResult_0_null = new A.LayoutDecodeResult(0, null, A.findType("LayoutDecodeResult<@>"));
    B.LayoutException_tNL = new A.LayoutException("compact value is too large for length.", null);
    B.List_04A = A._setArrayType(makeConstList([82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125]), type$.JSArray_int);
    B.List_0_0_0_0 = A._setArrayType(makeConstList([0, 0, 0, 0]), type$.JSArray_int);
    B.List_0_10_200_0 = A._setArrayType(makeConstList([0, 10, 200, 0]), type$.JSArray_int);
    B.List_1 = A._setArrayType(makeConstList([1]), type$.JSArray_int);
    B.List_100_12 = A._setArrayType(makeConstList([100, 12]), type$.JSArray_int);
    B.List_100_14 = A._setArrayType(makeConstList([100, 14]), type$.JSArray_int);
    B.List_100_15 = A._setArrayType(makeConstList([100, 15]), type$.JSArray_int);
    B.List_100_17 = A._setArrayType(makeConstList([100, 17]), type$.JSArray_int);
    B.List_100_18 = A._setArrayType(makeConstList([100, 18]), type$.JSArray_int);
    B.List_110 = A._setArrayType(makeConstList([110]), type$.JSArray_int);
    B.List_110_1 = A._setArrayType(makeConstList([110, 1]), type$.JSArray_int);
    B.List_112_115_98_116 = A._setArrayType(makeConstList([112, 115, 98, 116]), type$.JSArray_int);
    B.List_14_15_16 = A._setArrayType(makeConstList([14, 15, 16]), type$.JSArray_int);
    B.List_161_0_0 = A._setArrayType(makeConstList([161, 0, 0]), type$.JSArray_int);
    B.List_161_0_1 = A._setArrayType(makeConstList([161, 0, 1]), type$.JSArray_int);
    B.List_161_0_2 = A._setArrayType(makeConstList([161, 0, 2]), type$.JSArray_int);
    B.List_161_0_3 = A._setArrayType(makeConstList([161, 0, 3]), type$.JSArray_int);
    B.List_161_0_4 = A._setArrayType(makeConstList([161, 0, 4]), type$.JSArray_int);
    B.List_161_0_5 = A._setArrayType(makeConstList([161, 0, 5]), type$.JSArray_int);
    B.List_161_0_6 = A._setArrayType(makeConstList([161, 0, 6]), type$.JSArray_int);
    B.List_161_1_1 = A._setArrayType(makeConstList([161, 1, 1]), type$.JSArray_int);
    B.List_161_2_1 = A._setArrayType(makeConstList([161, 2, 1]), type$.JSArray_int);
    B.List_161_2_2 = A._setArrayType(makeConstList([161, 2, 2]), type$.JSArray_int);
    B.List_161_2_2_0 = A._setArrayType(makeConstList([161, 2, 2, 0]), type$.JSArray_int);
    B.List_161_2_2_1 = A._setArrayType(makeConstList([161, 2, 2, 1]), type$.JSArray_int);
    B.List_161_2_3 = A._setArrayType(makeConstList([161, 2, 3]), type$.JSArray_int);
    B.List_161_2_4 = A._setArrayType(makeConstList([161, 2, 4]), type$.JSArray_int);
    B.List_161_2_5 = A._setArrayType(makeConstList([161, 2, 5]), type$.JSArray_int);
    B.List_161_2_6 = A._setArrayType(makeConstList([161, 2, 6]), type$.JSArray_int);
    B.List_161_2_7 = A._setArrayType(makeConstList([161, 2, 7]), type$.JSArray_int);
    B.List_161_2_8 = A._setArrayType(makeConstList([161, 2, 8]), type$.JSArray_int);
    B.List_161_2_9 = A._setArrayType(makeConstList([161, 2, 9]), type$.JSArray_int);
    B.List_161_2_9_0 = A._setArrayType(makeConstList([161, 2, 9, 0]), type$.JSArray_int);
    B.List_176 = A._setArrayType(makeConstList([176]), type$.JSArray_int);
    B.AptosTypeTags_254_reference = new A.AptosTypeTags(254, "reference");
    B.List_1Sk = A._setArrayType(makeConstList([B.AptosTypeTags_0_boolean, B.AptosTypeTags_1_u8, B.AptosTypeTags_2_u64, B.AptosTypeTags_3_u128, B.AptosTypeTags_4_address, B.AptosTypeTags_5_signer, B.AptosTypeTags_6_vector, B.AptosTypeTags_7_struct, B.AptosTypeTags_8_u16, B.AptosTypeTags_9_u32, B.AptosTypeTags_10_u256, B.AptosTypeTags_254_reference, B.AptosTypeTags_255_generic]), A.findType("JSArray<AptosTypeTags>"));
    B.List_1_2 = A._setArrayType(makeConstList([1, 2]), type$.JSArray_int);
    B.List_1_3 = A._setArrayType(makeConstList([1, 3]), type$.JSArray_int);
    B.SuiChainType_0_devnet = new A.SuiChainType(0, "devnet");
    B.SuiChainType_1_testnet = new A.SuiChainType(1, "testnet");
    B.SuiChainType_2_mainnet = new A.SuiChainType(2, "mainnet");
    B.List_1rA = A._setArrayType(makeConstList([B.SuiChainType_0_devnet, B.SuiChainType_1_testnet, B.SuiChainType_2_mainnet]), A.findType("JSArray<SuiChainType>"));
    B.List_2 = A._setArrayType(makeConstList([2]), type$.JSArray_int);
    B.List_200 = A._setArrayType(makeConstList([200]), type$.JSArray_int);
    B.List_20_32 = A._setArrayType(makeConstList([20, 32]), type$.JSArray_int);
    B.List_23 = A._setArrayType(makeConstList([23]), type$.JSArray_int);
    B.List_237 = A._setArrayType(makeConstList([237]), type$.JSArray_int);
    B.List_255_255_255_255 = A._setArrayType(makeConstList([255, 255, 255, 255]), type$.JSArray_int);
    B.List_258 = A._setArrayType(makeConstList([258]), type$.JSArray_int);
    B.List_28_184 = A._setArrayType(makeConstList([28, 184]), type$.JSArray_int);
    B.List_28_186 = A._setArrayType(makeConstList([28, 186]), type$.JSArray_int);
    B.List_28_189 = A._setArrayType(makeConstList([28, 189]), type$.JSArray_int);
    B.List_29_37 = A._setArrayType(makeConstList([29, 37]), type$.JSArray_int);
    B.List_3 = A._setArrayType(makeConstList([3]), type$.JSArray_int);
    B.List_32 = A._setArrayType(makeConstList([32]), type$.JSArray_int);
    B.List_35 = A._setArrayType(makeConstList([35]), type$.JSArray_int);
    B.List_3_1 = A._setArrayType(makeConstList([3, 1]), type$.JSArray_int);
    B.Web3SuiObjectArgs_Xnd = new A.Web3SuiObjectArgs("ImmOrOwnedObject", "immOrOwnedObject");
    B.Web3SuiObjectArgs_SharedObject_sharedObject = new A.Web3SuiObjectArgs("SharedObject", "sharedObject");
    B.Web3SuiObjectArgs_Receiving_receiving = new A.Web3SuiObjectArgs("Receiving", "receiving");
    B.List_3p5 = A._setArrayType(makeConstList([B.Web3SuiObjectArgs_Xnd, B.Web3SuiObjectArgs_SharedObject_sharedObject, B.Web3SuiObjectArgs_Receiving_receiving]), A.findType("JSArray<Web3SuiObjectArgs>"));
    B.List_4 = A._setArrayType(makeConstList([4]), type$.JSArray_int);
    B.List_46_47 = A._setArrayType(makeConstList([46, 47]), type$.JSArray_int);
    B.List_48 = A._setArrayType(makeConstList([48]), type$.JSArray_int);
    B.StellarChainType_1_testnet = new A.StellarChainType(1, "testnet");
    B.StellarChainType_2_mainnet = new A.StellarChainType(2, "mainnet");
    B.List_4NC = A._setArrayType(makeConstList([B.StellarChainType_1_testnet, B.StellarChainType_2_mainnet]), A.findType("JSArray<StellarChainType>"));
    B.List_4_147 = A._setArrayType(makeConstList([4, 147]), type$.JSArray_int);
    B.List_50 = A._setArrayType(makeConstList([50]), type$.JSArray_int);
    B.List_50_1 = A._setArrayType(makeConstList([50, 1]), type$.JSArray_int);
    B.List_50_6 = A._setArrayType(makeConstList([50, 6]), type$.JSArray_int);
    B.List_50_7 = A._setArrayType(makeConstList([50, 7]), type$.JSArray_int);
    B.PsbtOutputTypes_xVf = new A.PsbtOutputTypes(0, "PSBT_OUT_REDEEM_SCRIPT", false, null, "redeemScript");
    B.PsbtOutputTypes_5kO = new A.PsbtOutputTypes(1, "PSBT_OUT_WITNESS_SCRIPT", false, null, "witnessScript");
    B.PsbtOutputTypes_02N = new A.PsbtOutputTypes(2, "PSBT_OUT_BIP32_DERIVATION", false, null, "bip32DerivationPath");
    B.PsbtVersion_2_V2_v2 = new A.PsbtVersion(2, "V2", "v2");
    B.PsbtOutputTypes_vXE = new A.PsbtOutputTypes(3, "PSBT_OUT_AMOUNT", true, B.PsbtVersion_2_V2_v2, "amount");
    B.PsbtOutputTypes_MR7 = new A.PsbtOutputTypes(4, "PSBT_OUT_SCRIPT", true, B.PsbtVersion_2_V2_v2, "script");
    B.PsbtOutputTypes_fR7 = new A.PsbtOutputTypes(5, "PSBT_OUT_TAP_INTERNAL_KEY", false, null, "taprootInternalKey");
    B.PsbtOutputTypes_CMe = new A.PsbtOutputTypes(6, "PSBT_OUT_TAP_TREE", false, null, "taprootTree");
    B.PsbtOutputTypes_rmR = new A.PsbtOutputTypes(7, "PSBT_OUT_TAP_BIP32_DERIVATION", false, null, "taprootBip32Derivation");
    B.PsbtOutputTypes_spc = new A.PsbtOutputTypes(8, "PSBT_OUT_MUSIG2_PARTICIPANT_PUBKEYS", false, null, "muSig2ParticipantPublicKeys");
    B.PsbtOutputTypes_r1i = new A.PsbtOutputTypes(9, "PSBT_OUT_SP_V0_INFO", false, B.PsbtVersion_2_V2_v2, "silentPaymentData");
    B.PsbtOutputTypes_QVH = new A.PsbtOutputTypes(10, "PSBT_OUT_SP_V0_LABEL", false, B.PsbtVersion_2_V2_v2, "silentPaymentLabel");
    B.PsbtOutputTypes_gWS = new A.PsbtOutputTypes(53, "PSBT_OUT_DNSSEC_PROOF", false, null, "bip353DNSSECProof");
    B.PsbtOutputTypes_22F = new A.PsbtOutputTypes(252, "PSBT_OUT_PROPRIETARY", false, null, "proprietaryUseType");
    B.PsbtOutputTypes_IDj = new A.PsbtOutputTypes(null, "UNKNOWN", false, null, "unknown");
    B.List_548 = A._setArrayType(makeConstList([B.PsbtOutputTypes_xVf, B.PsbtOutputTypes_5kO, B.PsbtOutputTypes_02N, B.PsbtOutputTypes_vXE, B.PsbtOutputTypes_MR7, B.PsbtOutputTypes_fR7, B.PsbtOutputTypes_CMe, B.PsbtOutputTypes_rmR, B.PsbtOutputTypes_spc, B.PsbtOutputTypes_r1i, B.PsbtOutputTypes_QVH, B.PsbtOutputTypes_gWS, B.PsbtOutputTypes_22F, B.PsbtOutputTypes_IDj]), A.findType("JSArray<PsbtOutputTypes>"));
    B.List_58 = A._setArrayType(makeConstList([58]), type$.JSArray_int);
    B.TransactionContractType_0_AccountCreateContract = new A.TransactionContractType(0, "AccountCreateContract");
    B.TransactionContractType_1_TransferContract = new A.TransactionContractType(1, "TransferContract");
    B.TransactionContractType_2_TransferAssetContract = new A.TransactionContractType(2, "TransferAssetContract");
    B.TransactionContractType_3_VoteAssetContract = new A.TransactionContractType(3, "VoteAssetContract");
    B.TransactionContractType_4_VoteWitnessContract = new A.TransactionContractType(4, "VoteWitnessContract");
    B.TransactionContractType_5_WitnessCreateContract = new A.TransactionContractType(5, "WitnessCreateContract");
    B.TransactionContractType_6_AssetIssueContract = new A.TransactionContractType(6, "AssetIssueContract");
    B.TransactionContractType_8_WitnessUpdateContract = new A.TransactionContractType(8, "WitnessUpdateContract");
    B.TransactionContractType_9_ParticipateAssetIssueContract = new A.TransactionContractType(9, "ParticipateAssetIssueContract");
    B.TransactionContractType_10_AccountUpdateContract = new A.TransactionContractType(10, "AccountUpdateContract");
    B.TransactionContractType_11_FreezeBalanceContract = new A.TransactionContractType(11, "FreezeBalanceContract");
    B.TransactionContractType_12_UnfreezeBalanceContract = new A.TransactionContractType(12, "UnfreezeBalanceContract");
    B.TransactionContractType_13_WithdrawBalanceContract = new A.TransactionContractType(13, "WithdrawBalanceContract");
    B.TransactionContractType_14_UnfreezeAssetContract = new A.TransactionContractType(14, "UnfreezeAssetContract");
    B.TransactionContractType_15_UpdateAssetContract = new A.TransactionContractType(15, "UpdateAssetContract");
    B.TransactionContractType_16_ProposalCreateContract = new A.TransactionContractType(16, "ProposalCreateContract");
    B.TransactionContractType_17_ProposalApproveContract = new A.TransactionContractType(17, "ProposalApproveContract");
    B.TransactionContractType_18_ProposalDeleteContract = new A.TransactionContractType(18, "ProposalDeleteContract");
    B.TransactionContractType_19_SetAccountIdContract = new A.TransactionContractType(19, "SetAccountIdContract");
    B.TransactionContractType_20_CustomContract = new A.TransactionContractType(20, "CustomContract");
    B.TransactionContractType_30_CreateSmartContract = new A.TransactionContractType(30, "CreateSmartContract");
    B.TransactionContractType_31_TriggerSmartContract = new A.TransactionContractType(31, "TriggerSmartContract");
    B.TransactionContractType_32_GetContract = new A.TransactionContractType(32, "GetContract");
    B.TransactionContractType_33_UpdateSettingContract = new A.TransactionContractType(33, "UpdateSettingContract");
    B.TransactionContractType_41_ExchangeCreateContract = new A.TransactionContractType(41, "ExchangeCreateContract");
    B.TransactionContractType_42_ExchangeInjectContract = new A.TransactionContractType(42, "ExchangeInjectContract");
    B.TransactionContractType_43_ExchangeWithdrawContract = new A.TransactionContractType(43, "ExchangeWithdrawContract");
    B.TransactionContractType_44_ExchangeTransactionContract = new A.TransactionContractType(44, "ExchangeTransactionContract");
    B.TransactionContractType_45_UpdateEnergyLimitContract = new A.TransactionContractType(45, "UpdateEnergyLimitContract");
    B.TransactionContractType_T2s = new A.TransactionContractType(46, "AccountPermissionUpdateContract");
    B.TransactionContractType_48_ClearABIContract = new A.TransactionContractType(48, "ClearABIContract");
    B.TransactionContractType_49_UpdateBrokerageContract = new A.TransactionContractType(49, "UpdateBrokerageContract");
    B.TransactionContractType_51_ShieldedTransferContract = new A.TransactionContractType(51, "ShieldedTransferContract");
    B.TransactionContractType_52_MarketSellAssetContract = new A.TransactionContractType(52, "MarketSellAssetContract");
    B.TransactionContractType_53_MarketCancelOrderContract = new A.TransactionContractType(53, "MarketCancelOrderContract");
    B.TransactionContractType_54_FreezeBalanceV2Contract = new A.TransactionContractType(54, "FreezeBalanceV2Contract");
    B.TransactionContractType_55_UnfreezeBalanceV2Contract = new A.TransactionContractType(55, "UnfreezeBalanceV2Contract");
    B.TransactionContractType_uit = new A.TransactionContractType(56, "WithdrawExpireUnfreezeContract");
    B.TransactionContractType_57_DelegateResourceContract = new A.TransactionContractType(57, "DelegateResourceContract");
    B.TransactionContractType_58_UnDelegateResourceContract = new A.TransactionContractType(58, "UnDelegateResourceContract");
    B.TransactionContractType_59_CancelAllUnfreezeV2Contract = new A.TransactionContractType(59, "CancelAllUnfreezeV2Contract");
    B.List_5KX = A._setArrayType(makeConstList([B.TransactionContractType_0_AccountCreateContract, B.TransactionContractType_1_TransferContract, B.TransactionContractType_2_TransferAssetContract, B.TransactionContractType_3_VoteAssetContract, B.TransactionContractType_4_VoteWitnessContract, B.TransactionContractType_5_WitnessCreateContract, B.TransactionContractType_6_AssetIssueContract, B.TransactionContractType_8_WitnessUpdateContract, B.TransactionContractType_9_ParticipateAssetIssueContract, B.TransactionContractType_10_AccountUpdateContract, B.TransactionContractType_11_FreezeBalanceContract, B.TransactionContractType_12_UnfreezeBalanceContract, B.TransactionContractType_13_WithdrawBalanceContract, B.TransactionContractType_14_UnfreezeAssetContract, B.TransactionContractType_15_UpdateAssetContract, B.TransactionContractType_16_ProposalCreateContract, B.TransactionContractType_17_ProposalApproveContract, B.TransactionContractType_18_ProposalDeleteContract, B.TransactionContractType_19_SetAccountIdContract, B.TransactionContractType_20_CustomContract, B.TransactionContractType_30_CreateSmartContract, B.TransactionContractType_31_TriggerSmartContract, B.TransactionContractType_32_GetContract, B.TransactionContractType_33_UpdateSettingContract, B.TransactionContractType_41_ExchangeCreateContract, B.TransactionContractType_42_ExchangeInjectContract, B.TransactionContractType_43_ExchangeWithdrawContract, B.TransactionContractType_44_ExchangeTransactionContract, B.TransactionContractType_45_UpdateEnergyLimitContract, B.TransactionContractType_T2s, B.TransactionContractType_48_ClearABIContract, B.TransactionContractType_49_UpdateBrokerageContract, B.TransactionContractType_51_ShieldedTransferContract, B.TransactionContractType_52_MarketSellAssetContract, B.TransactionContractType_53_MarketCancelOrderContract, B.TransactionContractType_54_FreezeBalanceV2Contract, B.TransactionContractType_55_UnfreezeBalanceV2Contract, B.TransactionContractType_uit, B.TransactionContractType_57_DelegateResourceContract, B.TransactionContractType_58_UnDelegateResourceContract, B.TransactionContractType_59_CancelAllUnfreezeV2Contract]), A.findType("JSArray<TransactionContractType>"));
    B.List_5_68 = A._setArrayType(makeConstList([5, 68]), type$.JSArray_int);
    B.List_5cT = A._setArrayType(makeConstList(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]), type$.JSArray_String);
    B.List_5lr = A._setArrayType(makeConstList([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]), type$.JSArray_int);
    B.List_60_12 = A._setArrayType(makeConstList([60, 12]), type$.JSArray_int);
    B.List_65 = A._setArrayType(makeConstList([65]), type$.JSArray_int);
    B.List_6Je = A._setArrayType(makeConstList([174, 234, 143, 220, 66, 8, 152, 49, 5, 115, 75, 88, 8, 29, 30, 38, 56, 211, 95, 28, 181, 64, 8, 212, 211, 87, 202, 3, 190, 120, 233, 238]), type$.JSArray_int);
    B.PrimitiveTypes_Bool = new A.PrimitiveTypes("Bool");
    B.PrimitiveTypes_Char = new A.PrimitiveTypes("Char");
    B.PrimitiveTypes_Str = new A.PrimitiveTypes("Str");
    B.PrimitiveTypes_U8 = new A.PrimitiveTypes("U8");
    B.PrimitiveTypes_U16 = new A.PrimitiveTypes("U16");
    B.PrimitiveTypes_U32 = new A.PrimitiveTypes("U32");
    B.PrimitiveTypes_U64 = new A.PrimitiveTypes("U64");
    B.PrimitiveTypes_U128 = new A.PrimitiveTypes("U128");
    B.PrimitiveTypes_U256 = new A.PrimitiveTypes("U256");
    B.PrimitiveTypes_I8 = new A.PrimitiveTypes("I8");
    B.PrimitiveTypes_I16 = new A.PrimitiveTypes("I16");
    B.PrimitiveTypes_I32 = new A.PrimitiveTypes("I32");
    B.PrimitiveTypes_I64 = new A.PrimitiveTypes("I64");
    B.PrimitiveTypes_I128 = new A.PrimitiveTypes("I128");
    B.PrimitiveTypes_I256 = new A.PrimitiveTypes("I256");
    B.List_6OW = A._setArrayType(makeConstList([B.PrimitiveTypes_Bool, B.PrimitiveTypes_Char, B.PrimitiveTypes_Str, B.PrimitiveTypes_U8, B.PrimitiveTypes_U16, B.PrimitiveTypes_U32, B.PrimitiveTypes_U64, B.PrimitiveTypes_U128, B.PrimitiveTypes_U256, B.PrimitiveTypes_I8, B.PrimitiveTypes_I16, B.PrimitiveTypes_I32, B.PrimitiveTypes_I64, B.PrimitiveTypes_I128, B.PrimitiveTypes_I256]), A.findType("JSArray<PrimitiveTypes>"));
    B.List_6Oo = A._setArrayType(makeConstList([B.CellType_Ordinary_m1, B.CellType_PrunedBranch_1, B.CellType_Library_2, B.CellType_MerkleProof_3, B.CellType_MerkleUpdate_4]), A.findType("JSArray<CellType>"));
    B.PsbtInputTypes_kAy = new A.PsbtInputTypes("PSBT_IN_NON_WITNESS_UTXO", false, null, 0, "nonWitnessUTXO");
    B.PsbtInputTypes_NZJ = new A.PsbtInputTypes("PSBT_IN_WITNESS_UTXO", false, null, 1, "witnessUTXO");
    B.PsbtInputTypes_stM = new A.PsbtInputTypes("PSBT_IN_PARTIAL_SIG", false, null, 2, "partialSignature");
    B.PsbtInputTypes_yXA = new A.PsbtInputTypes("PSBT_IN_SIGHASH_TYPE", false, null, 3, "sighashType");
    B.PsbtInputTypes_Icn = new A.PsbtInputTypes("PSBT_IN_REDEEM_SCRIPT", false, null, 4, "redeemScript");
    B.PsbtInputTypes_6OA = new A.PsbtInputTypes("PSBT_IN_WITNESS_SCRIPT", false, null, 5, "witnessScript");
    B.PsbtInputTypes_Dje = new A.PsbtInputTypes("PSBT_IN_BIP32_DERIVATION", false, null, 6, "bip32DerivationPath");
    B.PsbtInputTypes_N6D = new A.PsbtInputTypes("PSBT_IN_FINAL_SCRIPTSIG", false, null, 7, "finalizedScriptSig");
    B.PsbtInputTypes_T86 = new A.PsbtInputTypes("PSBT_IN_FINAL_SCRIPTWITNESS", false, null, 8, "finalizedWitness");
    B.PsbtInputTypes_NDL = new A.PsbtInputTypes("PSBT_IN_POR_COMMITMENT", false, null, 9, "porCommitments");
    B.PsbtInputTypes_QB6 = new A.PsbtInputTypes("PSBT_IN_RIPEMD160", false, null, 10, "ripemd160");
    B.PsbtInputTypes_XkO = new A.PsbtInputTypes("PSBT_IN_SHA256", false, null, 11, "sha256");
    B.PsbtInputTypes_RiO = new A.PsbtInputTypes("PSBT_IN_HASH160", false, null, 12, "hash160");
    B.PsbtInputTypes_htP = new A.PsbtInputTypes("PSBT_IN_HASH256", false, null, 13, "hash256");
    B.PsbtInputTypes_JVk = new A.PsbtInputTypes("PSBT_IN_PREVIOUS_TXID", true, B.PsbtVersion_2_V2_v2, 14, "previousTxId");
    B.PsbtInputTypes_lMe = new A.PsbtInputTypes("PSBT_IN_OUTPUT_INDEX", true, B.PsbtVersion_2_V2_v2, 15, "spentOutputIndex");
    B.PsbtInputTypes_r7v = new A.PsbtInputTypes("PSBT_IN_SEQUENCE", false, B.PsbtVersion_2_V2_v2, 16, "sequenceNumber");
    B.PsbtInputTypes_4FU = new A.PsbtInputTypes("PSBT_IN_REQUIRED_TIME_LOCKTIME", false, B.PsbtVersion_2_V2_v2, 17, "requiredTimeBasedLockTime");
    B.PsbtInputTypes_rhP = new A.PsbtInputTypes("PSBT_IN_REQUIRED_HEIGHT_LOCKTIME", false, B.PsbtVersion_2_V2_v2, 18, "requiredHeightBasedLockTime");
    B.PsbtInputTypes_Wq6 = new A.PsbtInputTypes("PSBT_IN_TAP_KEY_SIG", false, null, 19, "taprootKeySpentSignature");
    B.PsbtInputTypes_vjI = new A.PsbtInputTypes("PSBT_IN_TAP_SCRIPT_SIG", false, null, 20, "taprootScriptSpentSignature");
    B.PsbtInputTypes_2Rv = new A.PsbtInputTypes("PSBT_IN_TAP_INTERNAL_KEY", false, null, 23, "taprootInternalKey");
    B.PsbtInputTypes_Xfr = new A.PsbtInputTypes("PSBT_IN_TAP_MERKLE_ROOT", false, null, 24, "taprootMerkleRoot");
    B.PsbtInputTypes_9aL = new A.PsbtInputTypes("PSBT_IN_TAP_LEAF_SCRIPT", false, null, 21, "taprootLeafScript");
    B.PsbtInputTypes_hTD = new A.PsbtInputTypes("PSBT_IN_TAP_BIP32_DERIVATION", false, null, 22, "taprootBip32Derivation");
    B.PsbtInputTypes_Z4Y = new A.PsbtInputTypes("PSBT_IN_MUSIG2_PARTICIPANT_PUBKEYS", false, null, 26, "muSig2ParticipantPublicKeys");
    B.PsbtInputTypes_mT2 = new A.PsbtInputTypes("PSBT_IN_MUSIG2_PUB_NONCE", false, null, 27, "muSig2PublicNonce");
    B.PsbtInputTypes_Dni = new A.PsbtInputTypes("PSBT_IN_MUSIG2_PARTIAL_SIG", false, null, 28, "muSig2ParticipantPartialSignature");
    B.PsbtInputTypes_2zv = new A.PsbtInputTypes("PSBT_IN_SP_ECDH_SHARE", false, B.PsbtVersion_2_V2_v2, 29, "silentPaymentInputECDHShare");
    B.PsbtInputTypes_aLR = new A.PsbtInputTypes("PSBT_IN_SP_DLEQ", false, B.PsbtVersion_2_V2_v2, 30, "silentPaymentInputDLEQProof");
    B.PsbtInputTypes_gBp = new A.PsbtInputTypes("PSBT_IN_PROPRIETARY", false, null, 252, "proprietaryUseType");
    B.PsbtInputTypes_aWK = new A.PsbtInputTypes("UNKNOWN", false, null, null, "unknown");
    B.List_72z = A._setArrayType(makeConstList([B.PsbtInputTypes_kAy, B.PsbtInputTypes_NZJ, B.PsbtInputTypes_stM, B.PsbtInputTypes_yXA, B.PsbtInputTypes_Icn, B.PsbtInputTypes_6OA, B.PsbtInputTypes_Dje, B.PsbtInputTypes_N6D, B.PsbtInputTypes_T86, B.PsbtInputTypes_NDL, B.PsbtInputTypes_QB6, B.PsbtInputTypes_XkO, B.PsbtInputTypes_RiO, B.PsbtInputTypes_htP, B.PsbtInputTypes_JVk, B.PsbtInputTypes_lMe, B.PsbtInputTypes_r7v, B.PsbtInputTypes_4FU, B.PsbtInputTypes_rhP, B.PsbtInputTypes_Wq6, B.PsbtInputTypes_vjI, B.PsbtInputTypes_2Rv, B.PsbtInputTypes_Xfr, B.PsbtInputTypes_9aL, B.PsbtInputTypes_hTD, B.PsbtInputTypes_Z4Y, B.PsbtInputTypes_mT2, B.PsbtInputTypes_Dni, B.PsbtInputTypes_2zv, B.PsbtInputTypes_aLR, B.PsbtInputTypes_gBp, B.PsbtInputTypes_aWK]), A.findType("JSArray<PsbtInputTypes>"));
    B.List_80_0_1 = A._setArrayType(makeConstList([80, 0, 1]), type$.JSArray_int);
    B.NetworkType_ugS = new A.NetworkType("Bitcoin", B.List_80_0_1);
    B.List_80_0_10 = A._setArrayType(makeConstList([80, 0, 10]), type$.JSArray_int);
    B.NetworkType_ZHn = new A.NetworkType("BitcoinCash", B.List_80_0_10);
    B.List_80_0_2 = A._setArrayType(makeConstList([80, 0, 2]), type$.JSArray_int);
    B.NetworkType_bRN = new A.NetworkType("XRPL", B.List_80_0_2);
    B.List_80_0_3 = A._setArrayType(makeConstList([80, 0, 3]), type$.JSArray_int);
    B.NetworkType_TUr = new A.NetworkType("Ethereum", B.List_80_0_3);
    B.List_80_0_4 = A._setArrayType(makeConstList([80, 0, 4]), type$.JSArray_int);
    B.NetworkType_KPy = new A.NetworkType("Tron", B.List_80_0_4);
    B.List_80_0_5 = A._setArrayType(makeConstList([80, 0, 5]), type$.JSArray_int);
    B.NetworkType_406 = new A.NetworkType("Solana", B.List_80_0_5);
    B.List_80_0_6 = A._setArrayType(makeConstList([80, 0, 6]), type$.JSArray_int);
    B.NetworkType_q8P = new A.NetworkType("Cardano", B.List_80_0_6);
    B.List_80_0_11 = A._setArrayType(makeConstList([80, 0, 11]), type$.JSArray_int);
    B.NetworkType_9gG = new A.NetworkType("TON", B.List_80_0_11);
    B.List_80_0_7 = A._setArrayType(makeConstList([80, 0, 7]), type$.JSArray_int);
    B.NetworkType_iOs = new A.NetworkType("Cosmos", B.List_80_0_7);
    B.List_80_0_12 = A._setArrayType(makeConstList([80, 0, 12]), type$.JSArray_int);
    B.NetworkType_SDW = new A.NetworkType("Substrate", B.List_80_0_12);
    B.List_80_0_14 = A._setArrayType(makeConstList([80, 0, 14]), type$.JSArray_int);
    B.NetworkType_mux = new A.NetworkType("Stellar", B.List_80_0_14);
    B.List_80_0_15 = A._setArrayType(makeConstList([80, 0, 15]), type$.JSArray_int);
    B.NetworkType_piF = new A.NetworkType("Monero", B.List_80_0_15);
    B.List_80_0_16 = A._setArrayType(makeConstList([80, 0, 16]), type$.JSArray_int);
    B.NetworkType_2nn = new A.NetworkType("Aptos", B.List_80_0_16);
    B.List_80_0_17 = A._setArrayType(makeConstList([80, 0, 17]), type$.JSArray_int);
    B.NetworkType_AXR = new A.NetworkType("Sui", B.List_80_0_17);
    B.List_7CR = A._setArrayType(makeConstList([B.NetworkType_ugS, B.NetworkType_ZHn, B.NetworkType_bRN, B.NetworkType_TUr, B.NetworkType_KPy, B.NetworkType_406, B.NetworkType_q8P, B.NetworkType_9gG, B.NetworkType_iOs, B.NetworkType_SDW, B.NetworkType_mux, B.NetworkType_piF, B.NetworkType_2nn, B.NetworkType_AXR]), A.findType("JSArray<NetworkType>"));
    B.List_8U7 = A._setArrayType(makeConstList([B.BipProposal_bip44, B.BipProposal_bip49, B.BipProposal_bip84, B.BipProposal_bip86]), A.findType("JSArray<BipProposal>"));
    B.List_8bU = A._setArrayType(makeConstList([B.DigestAuthHeadersAlg_MD5_md5, B.DigestAuthHeadersAlg_rEg, B.DigestAuthHeadersAlg_u8N, B.DigestAuthHeadersAlg_qwM, B.DigestAuthHeadersAlg_aYk, B.DigestAuthHeadersAlg_R2P, B.DigestAuthHeadersAlg_zvv, B.DigestAuthHeadersAlg_PUQ]), A.findType("JSArray<DigestAuthHeadersAlg>"));
    B.List_8ft = A._setArrayType(makeConstList([256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 256, 256, 256, 256, 256, 256, 256, 10, 11, 12, 13, 14, 15, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 10, 11, 12, 13, 14, 15, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256]), type$.JSArray_int);
    B.List_90_3 = A._setArrayType(makeConstList([90, 3]), type$.JSArray_int);
    B.BitcoinOpcode_OP_FALSE_0_opFalse = new A.BitcoinOpcode("OP_FALSE", 0, "opFalse");
    B.BitcoinOpcode_OP_1NEGATE_79_op1Negate = new A.BitcoinOpcode("OP_1NEGATE", 79, "op1Negate");
    B.BitcoinOpcode_OP_TRUE_81_opTrue = new A.BitcoinOpcode("OP_TRUE", 81, "opTrue");
    B.BitcoinOpcode_OP_2_82_op2 = new A.BitcoinOpcode("OP_2", 82, "op2");
    B.BitcoinOpcode_OP_3_83_op3 = new A.BitcoinOpcode("OP_3", 83, "op3");
    B.BitcoinOpcode_OP_4_84_op4 = new A.BitcoinOpcode("OP_4", 84, "op4");
    B.BitcoinOpcode_OP_5_85_op5 = new A.BitcoinOpcode("OP_5", 85, "op5");
    B.BitcoinOpcode_OP_6_86_op6 = new A.BitcoinOpcode("OP_6", 86, "op6");
    B.BitcoinOpcode_OP_7_87_op7 = new A.BitcoinOpcode("OP_7", 87, "op7");
    B.BitcoinOpcode_OP_8_88_op8 = new A.BitcoinOpcode("OP_8", 88, "op8");
    B.BitcoinOpcode_OP_9_89_op9 = new A.BitcoinOpcode("OP_9", 89, "op9");
    B.BitcoinOpcode_OP_10_90_op10 = new A.BitcoinOpcode("OP_10", 90, "op10");
    B.BitcoinOpcode_OP_11_91_op11 = new A.BitcoinOpcode("OP_11", 91, "op11");
    B.BitcoinOpcode_OP_12_92_op12 = new A.BitcoinOpcode("OP_12", 92, "op12");
    B.BitcoinOpcode_OP_13_93_op13 = new A.BitcoinOpcode("OP_13", 93, "op13");
    B.BitcoinOpcode_OP_14_94_op14 = new A.BitcoinOpcode("OP_14", 94, "op14");
    B.BitcoinOpcode_OP_15_95_op15 = new A.BitcoinOpcode("OP_15", 95, "op15");
    B.BitcoinOpcode_OP_16_96_op16 = new A.BitcoinOpcode("OP_16", 96, "op16");
    B.BitcoinOpcode_OP_NOP_97_opNop = new A.BitcoinOpcode("OP_NOP", 97, "opNop");
    B.BitcoinOpcode_OP_IF_99_opIf = new A.BitcoinOpcode("OP_IF", 99, "opIf");
    B.BitcoinOpcode_OP_NOTIF_100_opNotIf = new A.BitcoinOpcode("OP_NOTIF", 100, "opNotIf");
    B.BitcoinOpcode_OP_ELSE_103_opElse = new A.BitcoinOpcode("OP_ELSE", 103, "opElse");
    B.BitcoinOpcode_OP_ENDIF_104_opEndIf = new A.BitcoinOpcode("OP_ENDIF", 104, "opEndIf");
    B.BitcoinOpcode_OP_VERIFY_105_opVerify = new A.BitcoinOpcode("OP_VERIFY", 105, "opVerify");
    B.BitcoinOpcode_OP_RETURN_106_opReturn = new A.BitcoinOpcode("OP_RETURN", 106, "opReturn");
    B.BitcoinOpcode_OP_TOALTSTACK_107_opToAltStack = new A.BitcoinOpcode("OP_TOALTSTACK", 107, "opToAltStack");
    B.BitcoinOpcode_9dK = new A.BitcoinOpcode("OP_FROMALTSTACK", 108, "opFromAltStack");
    B.BitcoinOpcode_OP_IFDUP_115_opIfDup = new A.BitcoinOpcode("OP_IFDUP", 115, "opIfDup");
    B.BitcoinOpcode_OP_DEPTH_116_opDepth = new A.BitcoinOpcode("OP_DEPTH", 116, "opDepth");
    B.BitcoinOpcode_OP_DROP_117_opDrop = new A.BitcoinOpcode("OP_DROP", 117, "opDrop");
    B.BitcoinOpcode_OP_NIP_119_opNip = new A.BitcoinOpcode("OP_NIP", 119, "opNip");
    B.BitcoinOpcode_OP_OVER_120_opOver = new A.BitcoinOpcode("OP_OVER", 120, "opOver");
    B.BitcoinOpcode_OP_PICK_121_opPick = new A.BitcoinOpcode("OP_PICK", 121, "opPick");
    B.BitcoinOpcode_OP_ROLL_122_opRoll = new A.BitcoinOpcode("OP_ROLL", 122, "opRoll");
    B.BitcoinOpcode_OP_ROT_123_opRot = new A.BitcoinOpcode("OP_ROT", 123, "opRot");
    B.BitcoinOpcode_OP_SWAP_124_opSwap = new A.BitcoinOpcode("OP_SWAP", 124, "opSwap");
    B.BitcoinOpcode_OP_TUCK_125_opTuck = new A.BitcoinOpcode("OP_TUCK", 125, "opTuck");
    B.BitcoinOpcode_OP_2DROP_109_op2Drop = new A.BitcoinOpcode("OP_2DROP", 109, "op2Drop");
    B.BitcoinOpcode_OP_2DUP_110_op2Dup = new A.BitcoinOpcode("OP_2DUP", 110, "op2Dup");
    B.BitcoinOpcode_OP_3DUP_111_op3Dup = new A.BitcoinOpcode("OP_3DUP", 111, "op3Dup");
    B.BitcoinOpcode_OP_2OVER_112_op2Over = new A.BitcoinOpcode("OP_2OVER", 112, "op2Over");
    B.BitcoinOpcode_OP_2ROT_113_op2Rot = new A.BitcoinOpcode("OP_2ROT", 113, "op2Rot");
    B.BitcoinOpcode_OP_2SWAP_114_op2Swap = new A.BitcoinOpcode("OP_2SWAP", 114, "op2Swap");
    B.BitcoinOpcode_OP_SIZE_130_opSize = new A.BitcoinOpcode("OP_SIZE", 130, "opSize");
    B.BitcoinOpcode_OP_1ADD_139_op1Add = new A.BitcoinOpcode("OP_1ADD", 139, "op1Add");
    B.BitcoinOpcode_OP_1SUB_140_op1Sub = new A.BitcoinOpcode("OP_1SUB", 140, "op1Sub");
    B.BitcoinOpcode_OP_NEGATE_143_opNegate = new A.BitcoinOpcode("OP_NEGATE", 143, "opNegate");
    B.BitcoinOpcode_OP_ABS_144_opAbs = new A.BitcoinOpcode("OP_ABS", 144, "opAbs");
    B.BitcoinOpcode_OP_NOT_145_opNot = new A.BitcoinOpcode("OP_NOT", 145, "opNot");
    B.BitcoinOpcode_OP_0NOTEQUAL_146_op0NotEqual = new A.BitcoinOpcode("OP_0NOTEQUAL", 146, "op0NotEqual");
    B.BitcoinOpcode_OP_ADD_147_opAdd = new A.BitcoinOpcode("OP_ADD", 147, "opAdd");
    B.BitcoinOpcode_OP_SUB_148_opSub = new A.BitcoinOpcode("OP_SUB", 148, "opSub");
    B.BitcoinOpcode_OP_BOOLAND_154_opBoolAnd = new A.BitcoinOpcode("OP_BOOLAND", 154, "opBoolAnd");
    B.BitcoinOpcode_OP_BOOLOR_155_opBoolOr = new A.BitcoinOpcode("OP_BOOLOR", 155, "opBoolOr");
    B.BitcoinOpcode_OP_NUMEQUAL_156_opNumEqual = new A.BitcoinOpcode("OP_NUMEQUAL", 156, "opNumEqual");
    B.BitcoinOpcode_7di = new A.BitcoinOpcode("OP_NUMEQUALVERIFY", 157, "opNumEqualVerify");
    B.BitcoinOpcode_OP_NUMNOTEQUAL_158_opNumNotEqual = new A.BitcoinOpcode("OP_NUMNOTEQUAL", 158, "opNumNotEqual");
    B.BitcoinOpcode_OP_LESSTHAN_159_opLessThan = new A.BitcoinOpcode("OP_LESSTHAN", 159, "opLessThan");
    B.BitcoinOpcode_OP_GREATERTHAN_160_opGreaterThan = new A.BitcoinOpcode("OP_GREATERTHAN", 160, "opGreaterThan");
    B.BitcoinOpcode_3MR = new A.BitcoinOpcode("OP_LESSTHANOREQUAL", 161, "opLessThanOrEqual");
    B.BitcoinOpcode_4Tb = new A.BitcoinOpcode("OP_GREATERTHANOREQUAL", 162, "opGreaterThanOrEqual");
    B.BitcoinOpcode_OP_MIN_163_opMin = new A.BitcoinOpcode("OP_MIN", 163, "opMin");
    B.BitcoinOpcode_OP_MAX_164_opMax = new A.BitcoinOpcode("OP_MAX", 164, "opMax");
    B.BitcoinOpcode_OP_WITHIN_165_opWithin = new A.BitcoinOpcode("OP_WITHIN", 165, "opWithin");
    B.BitcoinOpcode_OP_RIPEMD160_166_opRipemd160 = new A.BitcoinOpcode("OP_RIPEMD160", 166, "opRipemd160");
    B.BitcoinOpcode_OP_SHA1_167_opSha1 = new A.BitcoinOpcode("OP_SHA1", 167, "opSha1");
    B.BitcoinOpcode_OP_SHA256_168_opSha256 = new A.BitcoinOpcode("OP_SHA256", 168, "opSha256");
    B.BitcoinOpcode_O8s = new A.BitcoinOpcode("OP_CODESEPARATOR", 171, "opCodeSeparator");
    B.BitcoinOpcode_EXT = new A.BitcoinOpcode("OP_CHECKSIGVERIFY", 173, "opCheckSigVerify");
    B.BitcoinOpcode_eE2 = new A.BitcoinOpcode("OP_CHECKMULTISIG", 174, "opCheckMultiSig");
    B.BitcoinOpcode_PGR = new A.BitcoinOpcode("OP_CHECKMULTISIGVERIFY", 175, "opCheckMultiSigVerify");
    B.BitcoinOpcode_OP_CHECKSIGADD_186_opCheckSigAdd = new A.BitcoinOpcode("OP_CHECKSIGADD", 186, "opCheckSigAdd");
    B.BitcoinOpcode_hNw = new A.BitcoinOpcode("OP_CHECKLOCKTIMEVERIFY", 177, "opCheckLockTimeVerify");
    B.BitcoinOpcode_zBp = new A.BitcoinOpcode("OP_CHECKSEQUENCEVERIFY", 178, "opCheckSequenceVerify");
    B.List_9qw = A._setArrayType(makeConstList([B.BitcoinOpcode_OP_0_0_op0, B.BitcoinOpcode_OP_FALSE_0_opFalse, B.BitcoinOpcode_OP_PUSHDATA1_76_opPushData1, B.BitcoinOpcode_OP_PUSHDATA2_77_opPushData2, B.BitcoinOpcode_OP_PUSHDATA4_78_opPushData4, B.BitcoinOpcode_OP_1NEGATE_79_op1Negate, B.BitcoinOpcode_OP_1_81_op1, B.BitcoinOpcode_OP_TRUE_81_opTrue, B.BitcoinOpcode_OP_2_82_op2, B.BitcoinOpcode_OP_3_83_op3, B.BitcoinOpcode_OP_4_84_op4, B.BitcoinOpcode_OP_5_85_op5, B.BitcoinOpcode_OP_6_86_op6, B.BitcoinOpcode_OP_7_87_op7, B.BitcoinOpcode_OP_8_88_op8, B.BitcoinOpcode_OP_9_89_op9, B.BitcoinOpcode_OP_10_90_op10, B.BitcoinOpcode_OP_11_91_op11, B.BitcoinOpcode_OP_12_92_op12, B.BitcoinOpcode_OP_13_93_op13, B.BitcoinOpcode_OP_14_94_op14, B.BitcoinOpcode_OP_15_95_op15, B.BitcoinOpcode_OP_16_96_op16, B.BitcoinOpcode_OP_NOP_97_opNop, B.BitcoinOpcode_OP_IF_99_opIf, B.BitcoinOpcode_OP_NOTIF_100_opNotIf, B.BitcoinOpcode_OP_ELSE_103_opElse, B.BitcoinOpcode_OP_ENDIF_104_opEndIf, B.BitcoinOpcode_OP_VERIFY_105_opVerify, B.BitcoinOpcode_OP_RETURN_106_opReturn, B.BitcoinOpcode_OP_TOALTSTACK_107_opToAltStack, B.BitcoinOpcode_9dK, B.BitcoinOpcode_OP_IFDUP_115_opIfDup, B.BitcoinOpcode_OP_DEPTH_116_opDepth, B.BitcoinOpcode_OP_DROP_117_opDrop, B.BitcoinOpcode_OP_DUP_118_opDup, B.BitcoinOpcode_OP_NIP_119_opNip, B.BitcoinOpcode_OP_OVER_120_opOver, B.BitcoinOpcode_OP_PICK_121_opPick, B.BitcoinOpcode_OP_ROLL_122_opRoll, B.BitcoinOpcode_OP_ROT_123_opRot, B.BitcoinOpcode_OP_SWAP_124_opSwap, B.BitcoinOpcode_OP_TUCK_125_opTuck, B.BitcoinOpcode_OP_2DROP_109_op2Drop, B.BitcoinOpcode_OP_2DUP_110_op2Dup, B.BitcoinOpcode_OP_3DUP_111_op3Dup, B.BitcoinOpcode_OP_2OVER_112_op2Over, B.BitcoinOpcode_OP_2ROT_113_op2Rot, B.BitcoinOpcode_OP_2SWAP_114_op2Swap, B.BitcoinOpcode_OP_SIZE_130_opSize, B.BitcoinOpcode_OP_EQUAL_135_opEqual, B.BitcoinOpcode_OP_EQUALVERIFY_136_opEqualVerify, B.BitcoinOpcode_OP_1ADD_139_op1Add, B.BitcoinOpcode_OP_1SUB_140_op1Sub, B.BitcoinOpcode_OP_NEGATE_143_opNegate, B.BitcoinOpcode_OP_ABS_144_opAbs, B.BitcoinOpcode_OP_NOT_145_opNot, B.BitcoinOpcode_OP_0NOTEQUAL_146_op0NotEqual, B.BitcoinOpcode_OP_ADD_147_opAdd, B.BitcoinOpcode_OP_SUB_148_opSub, B.BitcoinOpcode_OP_BOOLAND_154_opBoolAnd, B.BitcoinOpcode_OP_BOOLOR_155_opBoolOr, B.BitcoinOpcode_OP_NUMEQUAL_156_opNumEqual, B.BitcoinOpcode_7di, B.BitcoinOpcode_OP_NUMNOTEQUAL_158_opNumNotEqual, B.BitcoinOpcode_OP_LESSTHAN_159_opLessThan, B.BitcoinOpcode_OP_GREATERTHAN_160_opGreaterThan, B.BitcoinOpcode_3MR, B.BitcoinOpcode_4Tb, B.BitcoinOpcode_OP_MIN_163_opMin, B.BitcoinOpcode_OP_MAX_164_opMax, B.BitcoinOpcode_OP_WITHIN_165_opWithin, B.BitcoinOpcode_OP_RIPEMD160_166_opRipemd160, B.BitcoinOpcode_OP_SHA1_167_opSha1, B.BitcoinOpcode_OP_SHA256_168_opSha256, B.BitcoinOpcode_OP_HASH160_169_opHash160, B.BitcoinOpcode_OP_HASH256_170_opHash256, B.BitcoinOpcode_O8s, B.BitcoinOpcode_OP_CHECKSIG_172_opCheckSig, B.BitcoinOpcode_EXT, B.BitcoinOpcode_eE2, B.BitcoinOpcode_PGR, B.BitcoinOpcode_OP_CHECKSIGADD_186_opCheckSigAdd, B.BitcoinOpcode_hNw, B.BitcoinOpcode_zBp]), A.findType("JSArray<BitcoinOpcode>"));
    B.AptosChainType_2_testnet = new A.AptosChainType(2, "testnet");
    B.AptosChainType_1_mainnet = new A.AptosChainType(1, "mainnet");
    B.List_9wx = A._setArrayType(makeConstList([B.AptosChainType_null_devnet, B.AptosChainType_2_testnet, B.AptosChainType_1_mainnet]), A.findType("JSArray<AptosChainType>"));
    B.SolanaNetworkType_Z3x = new A.SolanaNetworkType("solana:mainnet", 0, "mainnet");
    B.SolanaNetworkType_Lxm = new A.SolanaNetworkType("solana:testnet", 1, "testnet");
    B.SolanaNetworkType_QDD = new A.SolanaNetworkType("solana:devnet", 2, "devnet");
    B.List_ALU = A._setArrayType(makeConstList([B.SolanaNetworkType_Z3x, B.SolanaNetworkType_Lxm, B.SolanaNetworkType_QDD]), A.findType("JSArray<SolanaNetworkType>"));
    B.List_Cex = A._setArrayType(makeConstList([1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47]), type$.JSArray_int);
    B.WalletEventTypes_0 = new A.WalletEventTypes("message");
    B.WalletEventTypes_1 = new A.WalletEventTypes("exception");
    B.WalletEventTypes_2 = new A.WalletEventTypes("activation");
    B.WalletEventTypes_3 = new A.WalletEventTypes("tabId");
    B.WalletEventTypes_4 = new A.WalletEventTypes("ping");
    B.WalletEventTypes_5 = new A.WalletEventTypes("windowId");
    B.WalletEventTypes_6 = new A.WalletEventTypes("openExtension");
    B.WalletEventTypes_7 = new A.WalletEventTypes("background");
    B.WalletEventTypes_8 = new A.WalletEventTypes("close");
    B.List_Dpv = A._setArrayType(makeConstList([B.WalletEventTypes_0, B.WalletEventTypes_1, B.WalletEventTypes_2, B.WalletEventTypes_3, B.WalletEventTypes_4, B.WalletEventTypes_5, B.WalletEventTypes_6, B.WalletEventTypes_7, B.WalletEventTypes_8]), A.findType("JSArray<WalletEventTypes>"));
    B.JSEventType_2 = new A.JSEventType("message");
    B.JSEventType_4 = new A.JSEventType("disconnect");
    B.List_Dyb = A._setArrayType(makeConstList([B.JSEventType_0, B.JSEventType_1, B.JSEventType_2, B.JSEventType_3, B.JSEventType_4, B.JSEventType_5]), A.findType("JSArray<JSEventType>"));
    B.XlmAddrTypes_48_PublicKey = new A.XlmAddrTypes(48, "PublicKey");
    B.XlmAddrTypes_144_SecretKey = new A.XlmAddrTypes(144, "SecretKey");
    B.XlmAddrTypes_16_Contract = new A.XlmAddrTypes(16, "Contract");
    B.XlmAddrTypes_96_Muxed = new A.XlmAddrTypes(96, "Muxed");
    B.List_FN2 = A._setArrayType(makeConstList([B.XlmAddrTypes_48_PublicKey, B.XlmAddrTypes_144_SecretKey, B.XlmAddrTypes_16_Contract, B.XlmAddrTypes_96_Muxed]), A.findType("JSArray<XlmAddrTypes>"));
    B.List_Fjr = A._setArrayType(makeConstList([408, 500, 502, 503, 504]), type$.JSArray_int);
    B.ServiceProtocol_HTTP_0_http = new A.ServiceProtocol("HTTP", 0, "http");
    B.ServiceProtocol_SSL_1_ssl = new A.ServiceProtocol("SSL", 1, "ssl");
    B.ServiceProtocol_TCP_2_tcp = new A.ServiceProtocol("TCP", 2, "tcp");
    B.ServiceProtocol_WebSocket_3_websocket = new A.ServiceProtocol("WebSocket", 3, "websocket");
    B.List_G5k = A._setArrayType(makeConstList([B.ServiceProtocol_HTTP_0_http, B.ServiceProtocol_SSL_1_ssl, B.ServiceProtocol_TCP_2_tcp, B.ServiceProtocol_WebSocket_3_websocket]), A.findType("JSArray<ServiceProtocol>"));
    B.AccountType_1_AssetIssue = new A.AccountType(1, "AssetIssue");
    B.AccountType_2_Contract = new A.AccountType(2, "Contract");
    B.List_GTJ = A._setArrayType(makeConstList([B.AccountType_0_Normal, B.AccountType_1_AssetIssue, B.AccountType_2_Contract]), A.findType("JSArray<AccountType>"));
    B.List_H5O = A._setArrayType(makeConstList([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]), type$.JSArray_dynamic);
    B.ContentType_0_local = new A.ContentType(0, "local");
    B.ContentType_1_extenal = new A.ContentType(1, "extenal");
    B.ContentType_2_hex = new A.ContentType(2, "hex");
    B.ContentType_3_base64 = new A.ContentType(3, "base64");
    B.ContentType_4_network = new A.ContentType(4, "network");
    B.ContentType_4_lazy = new A.ContentType(4, "lazy");
    B.ContentType_5_favIcon = new A.ContentType(5, "favIcon");
    B.List_HVn = A._setArrayType(makeConstList([B.ContentType_0_local, B.ContentType_1_extenal, B.ContentType_2_hex, B.ContentType_3_base64, B.ContentType_4_network, B.ContentType_4_lazy, B.ContentType_5_favIcon]), A.findType("JSArray<ContentType>"));
    B.List_INy = A._setArrayType(makeConstList([1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591]), type$.JSArray_dynamic);
    B.List_JMn = A._setArrayType(makeConstList([B.ETHTransactionType_0, B.ETHTransactionType_2, B.ETHTransactionType_1]), A.findType("JSArray<ETHTransactionType>"));
    B.List_Jou = A._setArrayType(makeConstList([B.DeprecationStatusTypes_0, B.DeprecationStatusTypes_1, B.DeprecationStatusTypes_2]), A.findType("JSArray<DeprecationStatusTypes>"));
    B.List_Jr0 = A._setArrayType(makeConstList([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]), type$.JSArray_int);
    B.List_100_11 = A._setArrayType(makeConstList([100, 11]), type$.JSArray_int);
    B.Web3MessageTypes_List_100_11_chains = new A.Web3MessageTypes(B.List_100_11, "chains");
    B.Web3MessageTypes_List_100_12_walletRequest = new A.Web3MessageTypes(B.List_100_12, "walletRequest");
    B.Web3MessageTypes_List_100_14_walletResponse = new A.Web3MessageTypes(B.List_100_14, "walletResponse");
    B.Web3MessageTypes_List_100_15_error = new A.Web3MessageTypes(B.List_100_15, "error");
    B.Web3MessageTypes_List_100_17_walletGlobalRequest = new A.Web3MessageTypes(B.List_100_17, "walletGlobalRequest");
    B.Web3MessageTypes_List_100_18_globalResponse = new A.Web3MessageTypes(B.List_100_18, "globalResponse");
    B.List_KQt = A._setArrayType(makeConstList([B.Web3MessageTypes_List_100_11_chains, B.Web3MessageTypes_List_100_12_walletRequest, B.Web3MessageTypes_List_100_14_walletResponse, B.Web3MessageTypes_List_100_15_error, B.Web3MessageTypes_List_100_17_walletGlobalRequest, B.Web3MessageTypes_List_100_18_globalResponse]), A.findType("JSArray<Web3MessageTypes>"));
    B.PsbtVersion_0_V0_v0 = new A.PsbtVersion(0, "V0", "v0");
    B.PsbtGlobalTypes_L0R = new A.PsbtGlobalTypes(0, "PSBT_GLOBAL_UNSIGNED_TX", true, B.PsbtVersion_0_V0_v0, "unsignedTx");
    B.PsbtGlobalTypes_TZ9 = new A.PsbtGlobalTypes(1, "PSBT_GLOBAL_XPUB", false, null, "xpub");
    B.PsbtGlobalTypes_a5U = new A.PsbtGlobalTypes(2, "PSBT_GLOBAL_TX_VERSION", true, B.PsbtVersion_2_V2_v2, "version");
    B.PsbtGlobalTypes_fFZ = new A.PsbtGlobalTypes(3, "PSBT_GLOBAL_FALLBACK_LOCKTIME", false, B.PsbtVersion_2_V2_v2, "fallBackLockTime");
    B.PsbtGlobalTypes_0Hb = new A.PsbtGlobalTypes(4, "PSBT_GLOBAL_INPUT_COUNT", true, B.PsbtVersion_2_V2_v2, "inputCount");
    B.PsbtGlobalTypes_pZG = new A.PsbtGlobalTypes(5, "PSBT_GLOBAL_OUTPUT_COUNT", true, B.PsbtVersion_2_V2_v2, "outputCount");
    B.PsbtGlobalTypes_SkF = new A.PsbtGlobalTypes(6, "PSBT_GLOBAL_TX_MODIFIABLE", false, B.PsbtVersion_2_V2_v2, "txModifiable");
    B.PsbtGlobalTypes_qkL = new A.PsbtGlobalTypes(7, "PSBT_GLOBAL_SP_ECDH_SHARE", false, B.PsbtVersion_2_V2_v2, "spEcdhShare");
    B.PsbtGlobalTypes_8EA = new A.PsbtGlobalTypes(8, "PSBT_GLOBAL_SP_DLEQ", false, B.PsbtVersion_2_V2_v2, "spDLEQ");
    B.PsbtGlobalTypes_LF6 = new A.PsbtGlobalTypes(251, "PSBT_GLOBAL_VERSION", false, null, "psbtVersion");
    B.PsbtGlobalTypes_kLG = new A.PsbtGlobalTypes(252, "PSBT_GLOBAL_PROPRIETARY", false, null, "proprietary");
    B.PsbtGlobalTypes_TuU = new A.PsbtGlobalTypes(null, "PSBT_GLOBAL_UNKNOWN", false, null, "unknown");
    B.List_MX0 = A._setArrayType(makeConstList([B.PsbtGlobalTypes_L0R, B.PsbtGlobalTypes_TZ9, B.PsbtGlobalTypes_a5U, B.PsbtGlobalTypes_fFZ, B.PsbtGlobalTypes_0Hb, B.PsbtGlobalTypes_pZG, B.PsbtGlobalTypes_SkF, B.PsbtGlobalTypes_qkL, B.PsbtGlobalTypes_8EA, B.PsbtGlobalTypes_LF6, B.PsbtGlobalTypes_kLG, B.PsbtGlobalTypes_TuU]), A.findType("JSArray<PsbtGlobalTypes>"));
    B.List_34 = A._setArrayType(makeConstList([34]), type$.JSArray_int);
    B.CborBase64Types_List_34 = new A.CborBase64Types(B.List_34);
    B.List_33 = A._setArrayType(makeConstList([33]), type$.JSArray_int);
    B.CborBase64Types_List_33 = new A.CborBase64Types(B.List_33);
    B.List_21 = A._setArrayType(makeConstList([21]), type$.JSArray_int);
    B.CborBase64Types_List_21 = new A.CborBase64Types(B.List_21);
    B.CborBase64Types_List_22 = new A.CborBase64Types(B.List_22);
    B.CborBase64Types_List_23 = new A.CborBase64Types(B.List_23);
    B.List_Oij = A._setArrayType(makeConstList([B.CborBase64Types_List_34, B.CborBase64Types_List_33, B.CborBase64Types_List_21, B.CborBase64Types_List_22, B.CborBase64Types_List_23]), A.findType("JSArray<CborBase64Types>"));
    B.List_OqH = A._setArrayType(makeConstList(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"]), type$.JSArray_String);
    B.List_P3v = A._setArrayType(makeConstList([B.PsbtVersion_0_V0_v0, B.PsbtVersion_2_V2_v2]), A.findType("JSArray<PsbtVersion>"));
    B.GovVoteOption_0_unspecified = new A.GovVoteOption(0, "unspecified");
    B.GovVoteOption_1_yes = new A.GovVoteOption(1, "yes");
    B.GovVoteOption_2_abstain = new A.GovVoteOption(2, "abstain");
    B.GovVoteOption_3_no = new A.GovVoteOption(3, "no");
    B.GovVoteOption_4_noWithVeto = new A.GovVoteOption(4, "noWithVeto");
    B.List_P6X = A._setArrayType(makeConstList([B.GovVoteOption_0_unspecified, B.GovVoteOption_1_yes, B.GovVoteOption_2_abstain, B.GovVoteOption_3_no, B.GovVoteOption_4_noWithVeto]), A.findType("JSArray<GovVoteOption>"));
    B.SuiApiExecuteTransactionRequestType_5ox = new A.SuiApiExecuteTransactionRequestType("WaitForEffectsCert", "waitForEffectsCert");
    B.SuiApiExecuteTransactionRequestType_N4o = new A.SuiApiExecuteTransactionRequestType("WaitForLocalExecution", "waitForLocalExecution");
    B.List_PEP = A._setArrayType(makeConstList([B.SuiApiExecuteTransactionRequestType_5ox, B.SuiApiExecuteTransactionRequestType_N4o]), A.findType("JSArray<SuiApiExecuteTransactionRequestType>"));
    B.SmartContractAbiEntryType_wt4 = new A.SmartContractAbiEntryType(0, "");
    B.SmartContractAbiEntryType_1_Constructor = new A.SmartContractAbiEntryType(1, "Constructor");
    B.SmartContractAbiEntryType_2_Function = new A.SmartContractAbiEntryType(2, "Function");
    B.SmartContractAbiEntryType_3_Event = new A.SmartContractAbiEntryType(3, "Event");
    B.SmartContractAbiEntryType_4_Fallback = new A.SmartContractAbiEntryType(4, "Fallback");
    B.SmartContractAbiEntryType_5_Receive = new A.SmartContractAbiEntryType(5, "Receive");
    B.SmartContractAbiEntryType_6_Error = new A.SmartContractAbiEntryType(6, "Error");
    B.List_PnG = A._setArrayType(makeConstList([B.SmartContractAbiEntryType_wt4, B.SmartContractAbiEntryType_1_Constructor, B.SmartContractAbiEntryType_2_Function, B.SmartContractAbiEntryType_3_Event, B.SmartContractAbiEntryType_4_Fallback, B.SmartContractAbiEntryType_5_Receive, B.SmartContractAbiEntryType_6_Error]), A.findType("JSArray<SmartContractAbiEntryType>"));
    B.ProviderAuthType_List_50_6_header = new A.ProviderAuthType(B.List_50_6, "header");
    B.ProviderAuthType_List_50_6_query = new A.ProviderAuthType(B.List_50_6, "query");
    B.ProviderAuthType_List_50_7_digest = new A.ProviderAuthType(B.List_50_7, "digest");
    B.List_Pnc = A._setArrayType(makeConstList([B.ProviderAuthType_List_50_6_header, B.ProviderAuthType_List_50_6_query, B.ProviderAuthType_List_50_7_digest]), A.findType("JSArray<ProviderAuthType>"));
    B.List_RqR = A._setArrayType(makeConstList([404, 400, 401, 403, 405, 408, 500, 503]), type$.JSArray_int);
    B.AptosTransactionPayloads_1_moduleBundle = new A.AptosTransactionPayloads(1, "moduleBundle");
    B.List_Rxo = A._setArrayType(makeConstList([B.AptosTransactionPayloads_0_script, B.AptosTransactionPayloads_1_moduleBundle, B.AptosTransactionPayloads_2_entryFunction, B.AptosTransactionPayloads_3_multisig]), A.findType("JSArray<AptosTransactionPayloads>"));
    B.List_TrJ = A._setArrayType(makeConstList([99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22]), type$.JSArray_int);
    B.WalletEventTarget_1 = new A.WalletEventTarget("background");
    B.List_WalletEventTarget_1 = A._setArrayType(makeConstList([B.WalletEventTarget_1]), type$.JSArray_WalletEventTarget);
    B.List_Wl3 = A._setArrayType(makeConstList([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]), type$.JSArray_int);
    B.ResourceCode_0_BANDWIDTH = new A.ResourceCode(0, "BANDWIDTH");
    B.ResourceCode_1_ENERGY = new A.ResourceCode(1, "ENERGY");
    B.ResourceCode_2_TRON_POWER = new A.ResourceCode(2, "TRON_POWER");
    B.List_XsZ = A._setArrayType(makeConstList([B.ResourceCode_0_BANDWIDTH, B.ResourceCode_1_ENERGY, B.ResourceCode_2_TRON_POWER]), A.findType("JSArray<ResourceCode>"));
    B.List_Y8B = A._setArrayType(makeConstList([B.DigestAuthQop_auth_auth, B.DigestAuthQop_zIr]), A.findType("JSArray<DigestAuthQop>"));
    B.SeedTypes_Bip39_0_bip39 = new A.SeedTypes("Bip39", 0, "bip39");
    B.SeedTypes_Bip39Entropy_1_bip39Entropy = new A.SeedTypes("Bip39Entropy", 1, "bip39Entropy");
    B.SeedTypes_ByronLegacySeed_2_byronLegacySeed = new A.SeedTypes("ByronLegacySeed", 2, "byronLegacySeed");
    B.SeedTypes_icarus_3_icarus = new A.SeedTypes("icarus", 3, "icarus");
    B.List_YjN = A._setArrayType(makeConstList([B.SeedTypes_Bip39_0_bip39, B.SeedTypes_Bip39Entropy_1_bip39Entropy, B.SeedTypes_ByronLegacySeed_2_byronLegacySeed, B.SeedTypes_icarus_3_icarus]), A.findType("JSArray<SeedTypes>"));
    B.SubstrateCoins_acalaEd25519 = new A.SubstrateCoins("acalaEd25519");
    B.SubstrateCoins_acalaSecp256k1 = new A.SubstrateCoins("acalaSecp256k1");
    B.SubstrateCoins_acalaSr25519 = new A.SubstrateCoins("acalaSr25519");
    B.SubstrateCoins_bifrostEd25519 = new A.SubstrateCoins("bifrostEd25519");
    B.SubstrateCoins_bifrostSecp256k1 = new A.SubstrateCoins("bifrostSecp256k1");
    B.SubstrateCoins_bifrostSr25519 = new A.SubstrateCoins("bifrostSr25519");
    B.SubstrateCoins_chainxEd25519 = new A.SubstrateCoins("chainxEd25519");
    B.SubstrateCoins_chainxSecp256k1 = new A.SubstrateCoins("chainxSecp256k1");
    B.SubstrateCoins_chainxSr25519 = new A.SubstrateCoins("chainxSr25519");
    B.SubstrateCoins_edgewareEd25519 = new A.SubstrateCoins("edgewareEd25519");
    B.SubstrateCoins_edgewareSecp256k1 = new A.SubstrateCoins("edgewareSecp256k1");
    B.SubstrateCoins_edgewareSr25519 = new A.SubstrateCoins("edgewareSr25519");
    B.SubstrateCoins_genericEd25519 = new A.SubstrateCoins("genericEd25519");
    B.SubstrateCoins_genericSecp256k1 = new A.SubstrateCoins("genericSecp256k1");
    B.SubstrateCoins_genericSr25519 = new A.SubstrateCoins("genericSr25519");
    B.SubstrateCoins_karuraEd25519 = new A.SubstrateCoins("karuraEd25519");
    B.SubstrateCoins_karuraSecp256k1 = new A.SubstrateCoins("karuraSecp256k1");
    B.SubstrateCoins_karuraSr25519 = new A.SubstrateCoins("karuraSr25519");
    B.SubstrateCoins_kusamaEd25519 = new A.SubstrateCoins("kusamaEd25519");
    B.SubstrateCoins_kusamaSecp256k1 = new A.SubstrateCoins("kusamaSecp256k1");
    B.SubstrateCoins_kusamaSr25519 = new A.SubstrateCoins("kusamaSr25519");
    B.SubstrateCoins_moonbeamEd25519 = new A.SubstrateCoins("moonbeamEd25519");
    B.SubstrateCoins_moonbeamSecp256k1 = new A.SubstrateCoins("moonbeamSecp256k1");
    B.SubstrateCoins_moonbeamSr25519 = new A.SubstrateCoins("moonbeamSr25519");
    B.SubstrateCoins_moonriverEd25519 = new A.SubstrateCoins("moonriverEd25519");
    B.SubstrateCoins_moonriverSecp256k1 = new A.SubstrateCoins("moonriverSecp256k1");
    B.SubstrateCoins_moonriverSr25519 = new A.SubstrateCoins("moonriverSr25519");
    B.SubstrateCoins_phalaEd25519 = new A.SubstrateCoins("phalaEd25519");
    B.SubstrateCoins_phalaSecp256k1 = new A.SubstrateCoins("phalaSecp256k1");
    B.SubstrateCoins_phalaSr25519 = new A.SubstrateCoins("phalaSr25519");
    B.SubstrateCoins_plasmEd25519 = new A.SubstrateCoins("plasmEd25519");
    B.SubstrateCoins_plasmSecp256k1 = new A.SubstrateCoins("plasmSecp256k1");
    B.SubstrateCoins_plasmSr25519 = new A.SubstrateCoins("plasmSr25519");
    B.SubstrateCoins_polkadotEd25519 = new A.SubstrateCoins("polkadotEd25519");
    B.SubstrateCoins_polkadotSecp256k1 = new A.SubstrateCoins("polkadotSecp256k1");
    B.SubstrateCoins_polkadotSr25519 = new A.SubstrateCoins("polkadotSr25519");
    B.SubstrateCoins_soraEd25519 = new A.SubstrateCoins("soraEd25519");
    B.SubstrateCoins_soraSecp256k1 = new A.SubstrateCoins("soraSecp256k1");
    B.SubstrateCoins_soraSr25519 = new A.SubstrateCoins("soraSr25519");
    B.SubstrateCoins_stafiEd25519 = new A.SubstrateCoins("stafiEd25519");
    B.SubstrateCoins_stafiSecp256k1 = new A.SubstrateCoins("stafiSecp256k1");
    B.SubstrateCoins_stafiSr25519 = new A.SubstrateCoins("stafiSr25519");
    B.List_Zet = A._setArrayType(makeConstList([B.SubstrateCoins_acalaEd25519, B.SubstrateCoins_acalaSecp256k1, B.SubstrateCoins_acalaSr25519, B.SubstrateCoins_bifrostEd25519, B.SubstrateCoins_bifrostSecp256k1, B.SubstrateCoins_bifrostSr25519, B.SubstrateCoins_chainxEd25519, B.SubstrateCoins_chainxSecp256k1, B.SubstrateCoins_chainxSr25519, B.SubstrateCoins_edgewareEd25519, B.SubstrateCoins_edgewareSecp256k1, B.SubstrateCoins_edgewareSr25519, B.SubstrateCoins_genericEd25519, B.SubstrateCoins_genericSecp256k1, B.SubstrateCoins_genericSr25519, B.SubstrateCoins_karuraEd25519, B.SubstrateCoins_karuraSecp256k1, B.SubstrateCoins_karuraSr25519, B.SubstrateCoins_kusamaEd25519, B.SubstrateCoins_kusamaSecp256k1, B.SubstrateCoins_kusamaSr25519, B.SubstrateCoins_moonbeamEd25519, B.SubstrateCoins_moonbeamSecp256k1, B.SubstrateCoins_moonbeamSr25519, B.SubstrateCoins_moonriverEd25519, B.SubstrateCoins_moonriverSecp256k1, B.SubstrateCoins_moonriverSr25519, B.SubstrateCoins_phalaEd25519, B.SubstrateCoins_phalaSecp256k1, B.SubstrateCoins_phalaSr25519, B.SubstrateCoins_plasmEd25519, B.SubstrateCoins_plasmSecp256k1, B.SubstrateCoins_plasmSr25519, B.SubstrateCoins_polkadotEd25519, B.SubstrateCoins_polkadotSecp256k1, B.SubstrateCoins_polkadotSr25519, B.SubstrateCoins_soraEd25519, B.SubstrateCoins_soraSecp256k1, B.SubstrateCoins_soraSr25519, B.SubstrateCoins_stafiEd25519, B.SubstrateCoins_stafiSecp256k1, B.SubstrateCoins_stafiSr25519]), A.findType("JSArray<SubstrateCoins>"));
    B.List_account_message = A._setArrayType(makeConstList(["account", "message"]), type$.JSArray_String);
    B.List_account_transaction = A._setArrayType(makeConstList(["account", "transaction"]), type$.JSArray_String);
    B.List_account_typedData = A._setArrayType(makeConstList(["account", "typedData"]), type$.JSArray_String);
    B.List_account_validUntil_messages = A._setArrayType(makeConstList(["account", "validUntil", "messages"]), type$.JSArray_String);
    B.List_accounts_outputs = A._setArrayType(makeConstList(["accounts", "outputs"]), type$.JSArray_String);
    B.List_accounts_psbt = A._setArrayType(makeConstList(["accounts", "psbt"]), type$.JSArray_String);
    B.List_address_amount = A._setArrayType(makeConstList(["address", "amount"]), type$.JSArray_String);
    B.EthereumMethods_net_version = new A.EthereumMethods("net_version");
    B.EthereumMethods_eth_signTypedData = new A.EthereumMethods("eth_signTypedData");
    B.EthereumMethods_eth_createAccessList = new A.EthereumMethods("eth_createAccessList");
    B.EthereumMethods_web3_clientVersion = new A.EthereumMethods("web3_clientVersion");
    B.EthereumMethods_eth_protocolVersion = new A.EthereumMethods("eth_protocolVersion");
    B.EthereumMethods_eth_syncing = new A.EthereumMethods("eth_syncing");
    B.EthereumMethods_eth_coinbase = new A.EthereumMethods("eth_coinbase");
    B.EthereumMethods_eth_mining = new A.EthereumMethods("eth_mining");
    B.EthereumMethods_eth_hashrate = new A.EthereumMethods("eth_hashrate");
    B.EthereumMethods_eth_gasPrice = new A.EthereumMethods("eth_gasPrice");
    B.EthereumMethods_eth_accounts = new A.EthereumMethods("eth_accounts");
    B.EthereumMethods_eth_blockNumber = new A.EthereumMethods("eth_blockNumber");
    B.EthereumMethods_eth_getBalance = new A.EthereumMethods("eth_getBalance");
    B.EthereumMethods_eth_getStorageAt = new A.EthereumMethods("eth_getStorageAt");
    B.EthereumMethods_eth_getTransactionCount = new A.EthereumMethods("eth_getTransactionCount");
    B.EthereumMethods_U3N = new A.EthereumMethods("eth_getBlockTransactionCountByHash");
    B.EthereumMethods_Ia2 = new A.EthereumMethods("eth_getBlockTransactionCountByNumber");
    B.EthereumMethods_eth_getUncleCountByBlockHash = new A.EthereumMethods("eth_getUncleCountByBlockHash");
    B.EthereumMethods_eth_getUncleCountByBlockNumber = new A.EthereumMethods("eth_getUncleCountByBlockNumber");
    B.EthereumMethods_eth_getCode = new A.EthereumMethods("eth_getCode");
    B.EthereumMethods_eth_sign = new A.EthereumMethods("eth_sign");
    B.EthereumMethods_eth_signTransaction = new A.EthereumMethods("eth_signTransaction");
    B.EthereumMethods_eth_sendTransaction = new A.EthereumMethods("eth_sendTransaction");
    B.EthereumMethods_eth_sendRawTransaction = new A.EthereumMethods("eth_sendRawTransaction");
    B.EthereumMethods_eth_call = new A.EthereumMethods("eth_call");
    B.EthereumMethods_eth_estimateGas = new A.EthereumMethods("eth_estimateGas");
    B.EthereumMethods_eth_getBlockByHash = new A.EthereumMethods("eth_getBlockByHash");
    B.EthereumMethods_eth_getBlockByNumber = new A.EthereumMethods("eth_getBlockByNumber");
    B.EthereumMethods_eth_getTransactionByHash = new A.EthereumMethods("eth_getTransactionByHash");
    B.EthereumMethods_Lkn = new A.EthereumMethods("eth_getTransactionByBlockHashAndIndex");
    B.EthereumMethods_Rf9 = new A.EthereumMethods("eth_getTransactionByBlockNumberAndIndex");
    B.EthereumMethods_eth_getTransactionReceipt = new A.EthereumMethods("eth_getTransactionReceipt");
    B.EthereumMethods_B0x = new A.EthereumMethods("eth_getUncleByBlockHashAndIndex");
    B.EthereumMethods_qQI = new A.EthereumMethods("eth_getUncleByBlockNumberAndIndex");
    B.EthereumMethods_eth_getCompilers = new A.EthereumMethods("eth_getCompilers");
    B.EthereumMethods_eth_compileSolidity = new A.EthereumMethods("eth_compileSolidity");
    B.EthereumMethods_eth_compileLLL = new A.EthereumMethods("eth_compileLLL");
    B.EthereumMethods_eth_compileSerpent = new A.EthereumMethods("eth_compileSerpent");
    B.EthereumMethods_eth_newFilter = new A.EthereumMethods("eth_newFilter");
    B.EthereumMethods_eth_newBlockFilter = new A.EthereumMethods("eth_newBlockFilter");
    B.EthereumMethods_RN2 = new A.EthereumMethods("eth_newPendingTransactionFilter");
    B.EthereumMethods_eth_uninstallFilter = new A.EthereumMethods("eth_uninstallFilter");
    B.EthereumMethods_eth_getFilterChanges = new A.EthereumMethods("eth_getFilterChanges");
    B.EthereumMethods_eth_getFilterLogs = new A.EthereumMethods("eth_getFilterLogs");
    B.EthereumMethods_eth_getLogs = new A.EthereumMethods("eth_getLogs");
    B.EthereumMethods_eth_getWork = new A.EthereumMethods("eth_getWork");
    B.EthereumMethods_eth_submitWork = new A.EthereumMethods("eth_submitWork");
    B.EthereumMethods_eth_submitHashrate = new A.EthereumMethods("eth_submitHashrate");
    B.EthereumMethods_eth_feeHistory = new A.EthereumMethods("eth_feeHistory");
    B.EthereumMethods_eth_pendingTransactions = new A.EthereumMethods("eth_pendingTransactions");
    B.EthereumMethods_eth_requestAccounts = new A.EthereumMethods("eth_requestAccounts");
    B.EthereumMethods_eth_chainId = new A.EthereumMethods("eth_chainId");
    B.EthereumMethods_eth_getProof = new A.EthereumMethods("eth_getProof");
    B.List_azr = A._setArrayType(makeConstList([B.EthereumMethods_net_version, B.EthereumMethods_eth_signTypedData, B.EthereumMethods_eth_createAccessList, B.EthereumMethods_web3_clientVersion, B.EthereumMethods_eth_protocolVersion, B.EthereumMethods_eth_subscribe, B.EthereumMethods_eth_syncing, B.EthereumMethods_eth_coinbase, B.EthereumMethods_eth_mining, B.EthereumMethods_eth_hashrate, B.EthereumMethods_eth_gasPrice, B.EthereumMethods_eth_accounts, B.EthereumMethods_eth_blockNumber, B.EthereumMethods_eth_getBalance, B.EthereumMethods_eth_getStorageAt, B.EthereumMethods_eth_getTransactionCount, B.EthereumMethods_U3N, B.EthereumMethods_Ia2, B.EthereumMethods_eth_getUncleCountByBlockHash, B.EthereumMethods_eth_getUncleCountByBlockNumber, B.EthereumMethods_eth_getCode, B.EthereumMethods_eth_sign, B.EthereumMethods_eth_signTransaction, B.EthereumMethods_eth_sendTransaction, B.EthereumMethods_eth_sendRawTransaction, B.EthereumMethods_eth_call, B.EthereumMethods_eth_estimateGas, B.EthereumMethods_eth_getBlockByHash, B.EthereumMethods_eth_getBlockByNumber, B.EthereumMethods_eth_getTransactionByHash, B.EthereumMethods_Lkn, B.EthereumMethods_Rf9, B.EthereumMethods_eth_getTransactionReceipt, B.EthereumMethods_B0x, B.EthereumMethods_qQI, B.EthereumMethods_eth_getCompilers, B.EthereumMethods_eth_compileSolidity, B.EthereumMethods_eth_compileLLL, B.EthereumMethods_eth_compileSerpent, B.EthereumMethods_eth_newFilter, B.EthereumMethods_eth_newBlockFilter, B.EthereumMethods_RN2, B.EthereumMethods_eth_uninstallFilter, B.EthereumMethods_eth_getFilterChanges, B.EthereumMethods_eth_getFilterLogs, B.EthereumMethods_eth_getLogs, B.EthereumMethods_eth_getWork, B.EthereumMethods_eth_submitWork, B.EthereumMethods_eth_submitHashrate, B.EthereumMethods_eth_feeHistory, B.EthereumMethods_eth_pendingTransactions, B.EthereumMethods_eth_requestAccounts, B.EthereumMethods_eth_chainId, B.EthereumMethods_eth_getProof, B.EthereumMethods_web3_clientVersion]), A.findType("JSArray<EthereumMethods>"));
    B.Commitment_processed = new A.Commitment("processed");
    B.Commitment_confirmed = new A.Commitment("confirmed");
    B.Commitment_finalized = new A.Commitment("finalized");
    B.List_bYM = A._setArrayType(makeConstList([B.Commitment_processed, B.Commitment_confirmed, B.Commitment_finalized]), A.findType("JSArray<Commitment>"));
    B.List_200_199_0 = A._setArrayType(makeConstList([200, 199, 0]), type$.JSArray_int);
    B.TonAccountContextType_kI0 = new A.TonAccountContextType(B.List_200_199_0, "legacy");
    B.List_200_199_1 = A._setArrayType(makeConstList([200, 199, 1]), type$.JSArray_int);
    B.TonAccountContextType_iax = new A.TonAccountContextType(B.List_200_199_1, "subwallet");
    B.List_200_199_2 = A._setArrayType(makeConstList([200, 199, 2]), type$.JSArray_int);
    B.TonAccountContextType_Sw5 = new A.TonAccountContextType(B.List_200_199_2, "v5");
    B.List_200_199_3 = A._setArrayType(makeConstList([200, 199, 3]), type$.JSArray_int);
    B.TonAccountContextType_H4q = new A.TonAccountContextType(B.List_200_199_3, "v5SubWallet");
    B.List_dRa = A._setArrayType(makeConstList([B.TonAccountContextType_kI0, B.TonAccountContextType_iax, B.TonAccountContextType_Sw5, B.TonAccountContextType_H4q]), A.findType("JSArray<TonAccountContextType>"));
    B.List_e1o = A._setArrayType(makeConstList([B.CCTPV1Types_Nlv, B.CCTPV1Types_Nrb, B.CCTPV1Types_8wT, B.CCTPV1Types_Sk1, B.CCTPV1Types_2ky, B.CCTPV1Types_DvS, B.CCTPV1Types_8nl, B.CCTPV1Types_thd, B.CCTPV1Types_GQU, B.CCTPV1Types_lKR, B.CCTPV1Types_ABG, B.CCTPV1Types_a3E, B.CCTPV1Types_LV1, B.CCTPV1Types_UMf, B.CCTPV1Types_ZmI, B.CCTPV1Types_NCP, B.CCTPV1Types_2rV, B.CCTPV1Types_GeE, B.CCTPV1Types_L7D, B.CCTPV1Types_fgb, B.CCTPV1Types_81S, B.CCTPV1Types_XiD, B.CCTPV1Types_in6, B.CCTPV1Types_ilW, B.CCTPV1Types_C5S]), A.findType("JSArray<TypeUrl>"));
    B.List_eGD = A._setArrayType(makeConstList([B.AminoTypes_icZ, B.AminoTypes_YB3, B.AminoTypes_G0e, B.AminoTypes_jIj, B.AminoTypes_wEL, B.AminoTypes_LGL, B.AminoTypes_R1T, B.AminoTypes_kX4, B.AminoTypes_sYG, B.AminoTypes_pe4, B.AminoTypes_M8n, B.AminoTypes_raa, B.AminoTypes_p9m, B.AminoTypes_SIk, B.AminoTypes_jXu, B.AminoTypes_9Vm, B.AminoTypes_n6G, B.AminoTypes_cctp_cctp, B.AminoTypes_evmos_evmos, B.AminoTypes_ethermint_ethermint, B.AminoTypes_ophost_ophost]), A.findType("JSArray<AminoTypes>"));
    B.List_eXZ = A._setArrayType(makeConstList([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]), type$.JSArray_int);
    B.OpInitOpHostV1Types_nXZ = new A.OpInitOpHostV1Types("/opinit.ophost.v1.MsgInitiateTokenDeposit", "ophost/MsgInitiateTokenDeposit");
    B.List_ecs = A._setArrayType(makeConstList([B.OpInitOpHostV1Types_nXZ]), A.findType("JSArray<OpInitOpHostV1Types>"));
    B.List_empty15 = A._setArrayType(makeConstList([]), type$.JSArray_Cell);
    B.List_empty7 = A._setArrayType(makeConstList([]), A.findType("JSArray<JSWalletStateAccount<AptosAddress,Web3AptosChainAccount,JSObject>>"));
    B.List_empty8 = A._setArrayType(makeConstList([]), A.findType("JSArray<JSWalletStateAccount<BaseSubstrateAddress,Web3SubstrateChainAccount,JSObject>>"));
    B.List_empty3 = A._setArrayType(makeConstList([]), A.findType("JSArray<JSWalletStateAccount<BitcoinBaseAddress,Web3BitcoinChainAccount,JSObject>>"));
    B.List_empty4 = A._setArrayType(makeConstList([]), A.findType("JSArray<JSWalletStateAccount<CosmosBaseAddress,Web3CosmosChainAccount,JSObject>>"));
    B.List_empty14 = A._setArrayType(makeConstList([]), A.findType("JSArray<JSWalletStateAccount<ETHAddress,Web3EthereumChainAccount,JSObject>>"));
    B.List_empty12 = A._setArrayType(makeConstList([]), A.findType("JSArray<JSWalletStateAccount<SolAddress,Web3SolanaChainAccount,JSObject>>"));
    B.List_empty9 = A._setArrayType(makeConstList([]), A.findType("JSArray<JSWalletStateAccount<StellarAddress,Web3StellarChainAccount,JSObject>>"));
    B.List_empty6 = A._setArrayType(makeConstList([]), A.findType("JSArray<JSWalletStateAccount<SuiAddress,Web3SuiChainAccount,JSObject>>"));
    B.List_empty10 = A._setArrayType(makeConstList([]), A.findType("JSArray<JSWalletStateAccount<TonAddress,Web3TonChainAccount,JSObject>>"));
    B.List_empty13 = A._setArrayType(makeConstList([]), A.findType("JSArray<JSWalletStateAccount<TronAddress,Web3TronChainAccount,JSObject>>"));
    B.List_empty0 = A._setArrayType(makeConstList([]), type$.JSArray_List_BigInt);
    B.List_empty16 = A._setArrayType(makeConstList([]), A.findType("JSArray<List<PsbtInputData>>"));
    B.List_empty17 = A._setArrayType(makeConstList([]), type$.JSArray_List_PsbtKeyPair);
    B.List_empty18 = A._setArrayType(makeConstList([]), A.findType("JSArray<List<PsbtOutputData>>"));
    B.List_empty1 = A._setArrayType(makeConstList([]), type$.JSArray_Object);
    B.List_empty19 = A._setArrayType(makeConstList([]), A.findType("JSArray<PsbtGlobalData>"));
    B.List_empty5 = A._setArrayType(makeConstList([]), type$.JSArray_String);
    B.List_empty11 = A._setArrayType(makeConstList([]), A.findType("JSArray<TonAddress>"));
    B.List_empty2 = A._setArrayType(makeConstList([]), type$.JSArray_dynamic);
    B.List_fke = A._setArrayType(makeConstList([B.JSClientType_3G4, B.JSClientType_Ethereum_ethereum, B.JSClientType_Tron_tron, B.JSClientType_Solana_solana, B.JSClientType_TON_ton, B.JSClientType_Stellar_stellar, B.JSClientType_Substrate_substrate, B.JSClientType_Aptos_aptos, B.JSClientType_Sui_sui, B.JSClientType_Bitcoin_bitcoin, B.JSClientType_Cosmos_cosmos]), A.findType("JSArray<JSClientType>"));
    B.StorageHasherV11Options_Blake2128 = new A.StorageHasherV11Options("Blake2128");
    B.StorageHasherV11Options_Blake2256 = new A.StorageHasherV11Options("Blake2256");
    B.StorageHasherV11Options_Blake2128Concat = new A.StorageHasherV11Options("Blake2128Concat");
    B.StorageHasherV11Options_Twox128 = new A.StorageHasherV11Options("Twox128");
    B.StorageHasherV11Options_Twox256 = new A.StorageHasherV11Options("Twox256");
    B.StorageHasherV11Options_Twox64Concat = new A.StorageHasherV11Options("Twox64Concat");
    B.StorageHasherV11Options_Identity = new A.StorageHasherV11Options("Identity");
    B.List_gtx = A._setArrayType(makeConstList([B.StorageHasherV11Options_Blake2128, B.StorageHasherV11Options_Blake2256, B.StorageHasherV11Options_Blake2128Concat, B.StorageHasherV11Options_Twox128, B.StorageHasherV11Options_Twox256, B.StorageHasherV11Options_Twox64Concat, B.StorageHasherV11Options_Identity]), A.findType("JSArray<StorageHasherV11Options>"));
    B.SolanaSignAndSendAllTransactionMode_0 = new A.SolanaSignAndSendAllTransactionMode("parallel");
    B.SolanaSignAndSendAllTransactionMode_1 = new A.SolanaSignAndSendAllTransactionMode("serial");
    B.List_hAt = A._setArrayType(makeConstList([B.SolanaSignAndSendAllTransactionMode_0, B.SolanaSignAndSendAllTransactionMode_1]), A.findType("JSArray<SolanaSignAndSendAllTransactionMode>"));
    B.Web3EthereumRequestMethods_0_eth_sendTransaction_List_empty = new A.Web3EthereumRequestMethods(0, "eth_sendTransaction", B.List_empty5);
    B.List_eth_sign = A._setArrayType(makeConstList(["eth_sign"]), type$.JSArray_String);
    B.Web3EthereumRequestMethods_1_personal_sign_List_eth_sign = new A.Web3EthereumRequestMethods(1, "personal_sign", B.List_eth_sign);
    B.List_KqR = A._setArrayType(makeConstList(["eth_signTypedData_v3", "eth_signTypedData_v4"]), type$.JSArray_String);
    B.Web3EthereumRequestMethods_uLq = new A.Web3EthereumRequestMethods(2, "eth_signTypedData", B.List_KqR);
    B.Web3EthereumRequestMethods_grW = new A.Web3EthereumRequestMethods(3, "wallet_addEthereumChain", B.List_empty5);
    B.Web3EthereumRequestMethods_ojM = new A.Web3EthereumRequestMethods(4, "wallet_switchEthereumChain", B.List_empty5);
    B.Web3EthereumRequestMethods_5_eth_requestAccounts_List_empty = new A.Web3EthereumRequestMethods(5, "eth_requestAccounts", B.List_empty5);
    B.Web3EthereumRequestMethods_7_eth_accounts_List_empty = new A.Web3EthereumRequestMethods(7, "eth_accounts", B.List_empty5);
    B.Web3EthereumRequestMethods_8_eth_chainId_List_empty = new A.Web3EthereumRequestMethods(8, "eth_chainId", B.List_empty5);
    B.List_hR4 = A._setArrayType(makeConstList([B.Web3EthereumRequestMethods_0_eth_sendTransaction_List_empty, B.Web3EthereumRequestMethods_1_personal_sign_List_eth_sign, B.Web3EthereumRequestMethods_uLq, B.Web3EthereumRequestMethods_grW, B.Web3EthereumRequestMethods_ojM, B.Web3EthereumRequestMethods_5_eth_requestAccounts_List_empty, B.Web3EthereumRequestMethods_7_eth_accounts_List_empty, B.Web3EthereumRequestMethods_8_eth_chainId_List_empty]), A.findType("JSArray<Web3EthereumRequestMethods>"));
    B.SmartContractAbiStateMutabilityType_UnknownMutabilityType_0 = new A.SmartContractAbiStateMutabilityType("UnknownMutabilityType", 0);
    B.SmartContractAbiStateMutabilityType_Pure_1 = new A.SmartContractAbiStateMutabilityType("Pure", 1);
    B.SmartContractAbiStateMutabilityType_View_2 = new A.SmartContractAbiStateMutabilityType("View", 2);
    B.SmartContractAbiStateMutabilityType_Nonpayable_3 = new A.SmartContractAbiStateMutabilityType("Nonpayable", 3);
    B.SmartContractAbiStateMutabilityType_Payable_4 = new A.SmartContractAbiStateMutabilityType("Payable", 4);
    B.List_iKl = A._setArrayType(makeConstList([B.SmartContractAbiStateMutabilityType_UnknownMutabilityType_0, B.SmartContractAbiStateMutabilityType_Pure_1, B.SmartContractAbiStateMutabilityType_View_2, B.SmartContractAbiStateMutabilityType_Nonpayable_3, B.SmartContractAbiStateMutabilityType_Payable_4]), A.findType("JSArray<SmartContractAbiStateMutabilityType>"));
    B.List_j2A = A._setArrayType(makeConstList([4089235720, 1779033703, 2227873595, 3144134277, 4271175723, 1013904242, 1595750129, 2773480762, 2917565137, 1359893119, 725511199, 2600822924, 4215389547, 528734635, 327033209, 1541459225]), type$.JSArray_dynamic);
    B.List_jiT = A._setArrayType(makeConstList([B.AddressDerivationType_List_200_81_bip32, B.AddressDerivationType_List_200_84_substrate, B.AddressDerivationType_List_200_83_multisig]), A.findType("JSArray<AddressDerivationType>"));
    B.EIP712Version_3 = new A.EIP712Version(3);
    B.List_jky = A._setArrayType(makeConstList([B.EIP712Version_1, B.EIP712Version_3, B.EIP712Version_4]), A.findType("JSArray<EIP712Version>"));
    B.StorageEntryModifierV9_Optional = new A.StorageEntryModifierV9("Optional");
    B.StorageEntryModifierV9_Default = new A.StorageEntryModifierV9("Default");
    B.StorageEntryModifierV9_Required = new A.StorageEntryModifierV9("Required");
    B.List_kCv = A._setArrayType(makeConstList([B.StorageEntryModifierV9_Optional, B.StorageEntryModifierV9_Default, B.StorageEntryModifierV9_Required]), A.findType("JSArray<StorageEntryModifierV9>"));
    B.List_low_high_unsigned = A._setArrayType(makeConstList(["low", "high", "unsigned"]), type$.JSArray_String);
    B.PageRequestType_0 = new A.PageRequestType("walletStandard");
    B.PageRequestType_1 = new A.PageRequestType("eip1993");
    B.List_m0J = A._setArrayType(makeConstList([B.PageRequestType_0, B.PageRequestType_1]), A.findType("JSArray<PageRequestType>"));
    B.CoinParams_9zp = new A.CoinParams(null, null, "ltc", null, B.List_176, null, null, null, null, B.List_48, null, null, B.List_50, null, B.List_0, B.List_5, null, null, null, null, null);
    B.CoinConf_LrC = new A.CoinConf(B.CoinNames_Litecoin, B.CoinParams_9zp);
    B.LitecoinNetwork_A6S = new A.LitecoinNetwork(B.CoinConf_LrC, "litecoinMainnet", "litecoin:mainnet");
    B.CoinParams_mYf = new A.CoinParams(null, null, "tltc", null, B.List_239, null, null, null, null, B.List_111, null, null, B.List_58, null, B.List_111, B.List_196, null, null, null, null, null);
    B.CoinConf_Q7b = new A.CoinConf(B.CoinNames_cIT, B.CoinParams_mYf);
    B.LitecoinNetwork_n3A = new A.LitecoinNetwork(B.CoinConf_Q7b, "litecoinTestnet", "litecoin:testnet");
    B.List_m5n = A._setArrayType(makeConstList([B.BitcoinNetwork_o5I, B.BitcoinNetwork_o9i, B.BitcoinNetwork_IWD, B.LitecoinNetwork_A6S, B.LitecoinNetwork_n3A, B.DashNetwork_rwj, B.DashNetwork_92e, B.DogecoinNetwork_g3g, B.DogecoinNetwork_htF, B.BitcoinCashNetwork_DE4, B.BitcoinCashNetwork_Ose, B.BitcoinSVNetwork_f7v, B.BitcoinSVNetwork_Qce, B.C_PepeNetwork, B.ElectraProtocolNetwork_Ni4, B.ElectraProtocolNetwork_u6n]), A.findType("JSArray<BasedUtxoNetwork>"));
    B.List_m95 = A._setArrayType(makeConstList([B.EvmosErc20V1Types_sO8, B.EvmosErc20V1Types_QOj, B.EvmosErc20V1Types_AdM, B.EvmosErc20V1Types_5mW, B.EvmosErc20V1Types_h6w, B.EvmosErc20V1Types_HXx, B.EvmosErc20V1Types_clp, B.EvmosErc20V1Types_zvJ, B.EvmosErc20V1Types_7jk, B.EvmosErc20V1Types_oZ2, B.EvmosErc20V1Types_E2n, B.EvmosErc20V1Types_X6N, B.EvmosErc20V1Types_2IE, B.EvmosErc20V1Types_kbj, B.EvmosErc20V1Types_uXw, B.EvmosErc20V1Types_Elm, B.EvmosErc20V1Types_hnd, B.EvmosErc20V1Types_USN, B.EvmosErc20V1Types_YH9]), A.findType("JSArray<EvmosErc20V1Types>"));
    B.List_message = A._setArrayType(makeConstList(["message"]), type$.JSArray_String);
    B.List_mqY = A._setArrayType(makeConstList([B.HTTPResponseType_0, B.HTTPResponseType_1, B.HTTPResponseType_2, B.HTTPResponseType_3, B.HTTPResponseType_4]), A.findType("JSArray<HTTPResponseType>"));
    B.WalletVersion_v1R1_1 = new A.WalletVersion("v1R1", 1);
    B.WalletVersion_v1R2_1 = new A.WalletVersion("v1R2", 1);
    B.WalletVersion_v1R3_1 = new A.WalletVersion("v1R3", 1);
    B.WalletVersion_v2R1_2 = new A.WalletVersion("v2R1", 2);
    B.WalletVersion_v2R2_2 = new A.WalletVersion("v2R2", 2);
    B.WalletVersion_v3R1_3 = new A.WalletVersion("v3R1", 3);
    B.WalletVersion_v3R2_3 = new A.WalletVersion("v3R2", 3);
    B.WalletVersion_v4_4 = new A.WalletVersion("v4", 4);
    B.WalletVersion_v5R1_5 = new A.WalletVersion("v5R1", 5);
    B.List_nif = A._setArrayType(makeConstList([B.WalletVersion_v1R1_1, B.WalletVersion_v1R2_1, B.WalletVersion_v1R3_1, B.WalletVersion_v2R1_2, B.WalletVersion_v2R2_2, B.WalletVersion_v3R1_3, B.WalletVersion_v3R2_3, B.WalletVersion_v4_4, B.WalletVersion_v5R1_5]), A.findType("JSArray<WalletVersion>"));
    B.TonChain_0_m239 = new A.TonChain(0, -239);
    B.TonChain_m1_m3 = new A.TonChain(-1, -3);
    B.List_niy = A._setArrayType(makeConstList([B.TonChain_0_m239, B.TonChain_m1_m3]), A.findType("JSArray<TonChain>"));
    B.PermissionType_Owner_0 = new A.PermissionType("Owner", 0);
    B.PermissionType_Witness_1 = new A.PermissionType("Witness", 1);
    B.PermissionType_Active_2 = new A.PermissionType("Active", 2);
    B.List_oK2 = A._setArrayType(makeConstList([B.PermissionType_Owner_0, B.PermissionType_Witness_1, B.PermissionType_Active_2]), A.findType("JSArray<PermissionType>"));
    B.Si1TypeDefsIndexesConst_Composite = new A.Si1TypeDefsIndexesConst("Composite");
    B.Si1TypeDefsIndexesConst_Variant = new A.Si1TypeDefsIndexesConst("Variant");
    B.Si1TypeDefsIndexesConst_Sequence = new A.Si1TypeDefsIndexesConst("Sequence");
    B.Si1TypeDefsIndexesConst_Array = new A.Si1TypeDefsIndexesConst("Array");
    B.Si1TypeDefsIndexesConst_Tuple = new A.Si1TypeDefsIndexesConst("Tuple");
    B.Si1TypeDefsIndexesConst_Primitive = new A.Si1TypeDefsIndexesConst("Primitive");
    B.Si1TypeDefsIndexesConst_Compact = new A.Si1TypeDefsIndexesConst("Compact");
    B.Si1TypeDefsIndexesConst_BitSequence = new A.Si1TypeDefsIndexesConst("BitSequence");
    B.Si1TypeDefsIndexesConst_HistoricMetaCompat = new A.Si1TypeDefsIndexesConst("HistoricMetaCompat");
    B.List_pYy = A._setArrayType(makeConstList([B.Si1TypeDefsIndexesConst_Composite, B.Si1TypeDefsIndexesConst_Variant, B.Si1TypeDefsIndexesConst_Sequence, B.Si1TypeDefsIndexesConst_Array, B.Si1TypeDefsIndexesConst_Tuple, B.Si1TypeDefsIndexesConst_Primitive, B.Si1TypeDefsIndexesConst_Compact, B.Si1TypeDefsIndexesConst_BitSequence, B.Si1TypeDefsIndexesConst_HistoricMetaCompat]), A.findType("JSArray<Si1TypeDefsIndexesConst>"));
    B.Web3SuiTransactionCommands_MoveCall_moveCall = new A.Web3SuiTransactionCommands("MoveCall", "moveCall");
    B.Web3SuiTransactionCommands_TransferObjects_transferObject = new A.Web3SuiTransactionCommands("TransferObjects", "transferObject");
    B.Web3SuiTransactionCommands_SplitCoins_splitCoins = new A.Web3SuiTransactionCommands("SplitCoins", "splitCoins");
    B.Web3SuiTransactionCommands_MergeCoins_mergeCoins = new A.Web3SuiTransactionCommands("MergeCoins", "mergeCoins");
    B.Web3SuiTransactionCommands_Publish_publish = new A.Web3SuiTransactionCommands("Publish", "publish");
    B.Web3SuiTransactionCommands_MakeMoveVec_makeMoveVec = new A.Web3SuiTransactionCommands("MakeMoveVec", "makeMoveVec");
    B.Web3SuiTransactionCommands_Upgrade_upgrade = new A.Web3SuiTransactionCommands("Upgrade", "upgrade");
    B.List_peN = A._setArrayType(makeConstList([B.Web3SuiTransactionCommands_MoveCall_moveCall, B.Web3SuiTransactionCommands_TransferObjects_transferObject, B.Web3SuiTransactionCommands_SplitCoins_splitCoins, B.Web3SuiTransactionCommands_MergeCoins_mergeCoins, B.Web3SuiTransactionCommands_Publish_publish, B.Web3SuiTransactionCommands_MakeMoveVec_makeMoveVec, B.Web3SuiTransactionCommands_Upgrade_upgrade]), A.findType("JSArray<Web3SuiTransactionCommands>"));
    B.PageMessageType_0 = new A.PageMessageType("request");
    B.PageMessageType_1 = new A.PageMessageType("event");
    B.List_qGz = A._setArrayType(makeConstList([B.PageMessageType_0, B.PageMessageType_1]), A.findType("JSArray<PageMessageType>"));
    B.Web3SuiTransactionCallArgs_Pure_pure = new A.Web3SuiTransactionCallArgs("Pure", "pure");
    B.Web3SuiTransactionCallArgs_Object_object = new A.Web3SuiTransactionCallArgs("Object", "object");
    B.Web3SuiTransactionCallArgs_UnresolvedPure_unresolvedPure = new A.Web3SuiTransactionCallArgs("UnresolvedPure", "unresolvedPure");
    B.Web3SuiTransactionCallArgs_fy6 = new A.Web3SuiTransactionCallArgs("UnresolvedObject", "unresolvedObject");
    B.List_qJ7 = A._setArrayType(makeConstList([B.Web3SuiTransactionCallArgs_Pure_pure, B.Web3SuiTransactionCallArgs_Object_object, B.Web3SuiTransactionCallArgs_UnresolvedPure_unresolvedPure, B.Web3SuiTransactionCallArgs_fy6]), A.findType("JSArray<Web3SuiTransactionCallArgs>"));
    B.Web3SuiArguments_0 = new A.Web3SuiArguments("gasCoin");
    B.Web3SuiArguments_1 = new A.Web3SuiArguments("input");
    B.Web3SuiArguments_2 = new A.Web3SuiArguments("result");
    B.Web3SuiArguments_3 = new A.Web3SuiArguments("nestedResult");
    B.List_rA3 = A._setArrayType(makeConstList([B.Web3SuiArguments_0, B.Web3SuiArguments_1, B.Web3SuiArguments_2, B.Web3SuiArguments_3]), A.findType("JSArray<Web3SuiArguments>"));
    B.Web3SuiTransactionExpirations_Epoch_epoch = new A.Web3SuiTransactionExpirations("Epoch", "epoch");
    B.Web3SuiTransactionExpirations_None_none = new A.Web3SuiTransactionExpirations("None", "none");
    B.List_rNq = A._setArrayType(makeConstList([B.Web3SuiTransactionExpirations_Epoch_epoch, B.Web3SuiTransactionExpirations_None_none]), A.findType("JSArray<Web3SuiTransactionExpirations>"));
    B.List_rpc_chainId = A._setArrayType(makeConstList(["rpc", "chainId"]), type$.JSArray_String);
    B.JSWalletResponseType_1 = new A.JSWalletResponseType("failed");
    B.List_sIQ = A._setArrayType(makeConstList([B.JSWalletResponseType_0, B.JSWalletResponseType_1]), A.findType("JSArray<JSWalletResponseType>"));
    B.List_sWD = A._setArrayType(makeConstList([1, 32898, 32906, 2147516416, 32907, 2147483649, 2147516545, 32777, 138, 136, 2147516425, 2147483658, 2147516555, 139, 32905, 32771, 32770, 128, 32778, 2147483658, 2147516545, 32896, 2147483649, 2147516424]), type$.JSArray_dynamic);
    B.List_signerAddress_chainId_signDoc = A._setArrayType(makeConstList(["signerAddress", "chainId", "signDoc"]), type$.JSArray_String);
    B.List_soA = A._setArrayType(makeConstList([B.DeprecationInfoTypes_0, B.DeprecationInfoTypes_1, B.DeprecationInfoTypes_2]), A.findType("JSArray<DeprecationInfoTypes>"));
    B.Web3GlobalRequestMethods_0_disconnect_List_empty = new A.Web3GlobalRequestMethods(0, "disconnect", B.List_empty5);
    B.Web3GlobalRequestMethods_1_connect_List_empty = new A.Web3GlobalRequestMethods(1, "connect", B.List_empty5);
    B.Web3GlobalRequestMethods_2_switch_network_List_empty = new A.Web3GlobalRequestMethods(2, "switch_network", B.List_empty5);
    B.List_t0u = A._setArrayType(makeConstList([B.Web3GlobalRequestMethods_0_disconnect_List_empty, B.Web3GlobalRequestMethods_1_connect_List_empty, B.Web3GlobalRequestMethods_2_switch_network_List_empty]), A.findType("JSArray<Web3GlobalRequestMethods>"));
    B.CosmosKeysAlgs_bn254 = new A.CosmosKeysAlgs("bn254");
    B.List_vTY = A._setArrayType(makeConstList([B.CosmosKeysAlgs_secp256k1, B.CosmosKeysAlgs_ethsecp256k1, B.CosmosKeysAlgs_ed25519, B.CosmosKeysAlgs_secp256r1, B.CosmosKeysAlgs_bn254]), A.findType("JSArray<CosmosKeysAlgs>"));
    B.List_yCw = A._setArrayType(makeConstList([0, 0, 2147483648, 2147483648, 0, 0, 2147483648, 2147483648, 0, 0, 0, 0, 0, 2147483648, 2147483648, 2147483648, 2147483648, 2147483648, 0, 2147483648, 2147483648, 2147483648, 0, 2147483648]), type$.JSArray_dynamic);
    B.List_yMU = A._setArrayType(makeConstList([B.AptosMultisigTransactionPayloads_entryFunction]), A.findType("JSArray<AptosMultisigTransactionPayloads>"));
    B.SegwitAddressType_P2TR = new A.SegwitAddressType("P2TR");
    B.List_zF4 = A._setArrayType(makeConstList([B.P2pkhAddressType_P2PKH, B.SegwitAddressType_P2WPKH, B.SegwitAddressType_P2TR, B.SegwitAddressType_P2WSH, B.P2shAddressType_YXg, B.P2shAddressType_UPK, B.P2shAddressType_apR, B.P2shAddressType_vvf, B.P2shAddressType_rEf, B.P2shAddressType_yON, B.P2shAddressType_mdM, B.P2shAddressType_Aj9, B.P2shAddressType_An7, B.P2shAddressType_xea, B.P2pkhAddressType_P2PKHWT]), type$.JSArray_BitcoinAddressType);
    B.WalletEventTarget_0 = new A.WalletEventTarget("wallet");
    B.WalletEventTarget_2 = new A.WalletEventTarget("external");
    B.List_zqX = A._setArrayType(makeConstList([B.WalletEventTarget_0, B.WalletEventTarget_1, B.WalletEventTarget_2]), type$.JSArray_WalletEventTarget);
    B.MoveArgumentType_0_u8 = new A.MoveArgumentType(0, "u8");
    B.MoveArgumentType_1_u64 = new A.MoveArgumentType(1, "u64");
    B.MoveArgumentType_2_u128 = new A.MoveArgumentType(2, "u128");
    B.MoveArgumentType_3_address = new A.MoveArgumentType(3, "address");
    B.MoveArgumentType_5_boolean = new A.MoveArgumentType(5, "boolean");
    B.MoveArgumentType_6_u16 = new A.MoveArgumentType(6, "u16");
    B.MoveArgumentType_7_u32 = new A.MoveArgumentType(7, "u32");
    B.MoveArgumentType_8_u256 = new A.MoveArgumentType(8, "u256");
    B.MoveArgumentType_4_u8Vector = new A.MoveArgumentType(4, "u8Vector");
    B.MoveArgumentType_9_serialized = new A.MoveArgumentType(9, "serialized");
    B.List_zxt = A._setArrayType(makeConstList([B.MoveArgumentType_0_u8, B.MoveArgumentType_1_u64, B.MoveArgumentType_2_u128, B.MoveArgumentType_3_address, B.MoveArgumentType_5_boolean, B.MoveArgumentType_6_u16, B.MoveArgumentType_7_u32, B.MoveArgumentType_8_u256, B.MoveArgumentType_4_u8Vector, B.MoveArgumentType_9_serialized]), A.findType("JSArray<MoveArgumentType>"));
    B.Base58Alphabets_1 = new A.Base58Alphabets("ripple");
    B.Map_0cXzp = new A.GeneralConstantMap([B.Base58Alphabets_0, "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz", B.Base58Alphabets_1, "rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz"], A.findType("GeneralConstantMap<Base58Alphabets,String>"));
    B.Object_yQ4 = {"Content-Type": 0};
    B.Map_PLz9V = new A.ConstantStringMap(B.Object_yQ4, ["application/json"], type$.ConstantStringMap_String_String);
    B.Object_empty = {};
    B.Map_empty0 = new A.ConstantStringMap(B.Object_empty, [], type$.ConstantStringMap_String_String);
    B.Map_empty = new A.ConstantStringMap(B.Object_empty, [], A.findType("ConstantStringMap<String,@>"));
    B.Map_pQry7 = new A.GeneralConstantMap([400, "Bad Request: The server could not understand the request due to invalid syntax.", 401, "Unauthorized: Authentication is required or has failed.", 403, "Forbidden: You do not have permission to access this resource.", 404, "Not Found: The requested resource could not be found.", 405, "Method Not Allowed: The HTTP method used is not supported for this resource.", 409, "Conflict: The request could not be processed due to a conflict with the current state of the resource.", 422, "Unprocessable Entity: The request was well-formed but could not be processed.", 500, "Internal Server Error: The server encountered an unexpected condition.", 502, "Bad Gateway: The server received an invalid response from the upstream server.", 503, "Service Unavailable: The server is temporarily unable to handle the request.", 504, "Gateway Timeout: The server did not receive a timely response from the upstream server."], A.findType("GeneralConstantMap<int,String>"));
    B.Map_xI32l = new A.GeneralConstantMap([B.Bech32Encodings_0, 1, B.Bech32Encodings_1, 734539939], A.findType("GeneralConstantMap<Bech32Encodings,int>"));
    B.MessageException_5ZN = new A.MessageException("Invalid character in Base58 string", null);
    B.MessageException_psE = new A.MessageException("Invalid variable length. length to large.", null);
    B.MetadataException_JcO = new A.MetadataException("Invalid metadata bytes", null);
    B.MoneroCoins_moneroMainnet = new A.MoneroCoins("moneroMainnet");
    B.MoneroCoins_moneroStagenet = new A.MoneroCoins("moneroStagenet");
    B.MoneroCoins_moneroTestnet = new A.MoneroCoins("moneroTestnet");
    B.OpInitOpHostV1Types_uN3 = new A.OpInitOpHostV1Types("/opinit.ophost.v1.MsgInitiateTokenDepositResponse", null);
    B.PubKeyModes_compressed = new A.PubKeyModes("compressed");
    B.PubKeyModes_uncompressed = new A.PubKeyModes("uncompressed");
    B.RequestServiceType_0 = new A.RequestServiceType("post");
    B.ServiceResponseType_0 = new A.ServiceResponseType("error");
    B.ServiceResponseType_1 = new A.ServiceResponseType("success");
    B.SlashingV1beta1Types_UoZ = new A.SlashingV1beta1Types("/cosmos.slashing.v1beta1.MsgUnjail", "cosmos-sdk/MsgUnjail");
    B.SocketStatus_0 = new A.SocketStatus("connect");
    B.SocketStatus_1 = new A.SocketStatus("disconnect");
    B.SolanaPluginException_QHD = new A.SolanaPluginException("invalid versioned Message", null);
    B.SolanaPluginException_hVv = new A.SolanaPluginException("The public key must have a length of 32 bytes.", null);
    B.SolidityAbiException_NJ0 = new A.SolidityAbiException("invalid EIP712 json struct.", null);
    B.SolidityAbiException_jNe = new A.SolidityAbiException("Invalid data provided for bytes codec.", null);
    B.SquareRootError_hZ7 = new A.SquareRootError("No suitable 'b' found.", null);
    B.SquareRootError_j4B = new A.SquareRootError("p is not prime", null);
    B.StakingV1beta1Types_WEA = new A.StakingV1beta1Types("/cosmos.staking.v1beta1.MsgEditValidator", "cosmos-sdk/MsgEditValidator");
    B.StakingV1beta1Types_bar = new A.StakingV1beta1Types("/cosmos.staking.v1beta1.MsgCreateValidator", "cosmos-sdk/MsgCreateValidator");
    B.StakingV1beta1Types_v0Y = new A.StakingV1beta1Types("/cosmos.staking.v1beta1.MsgUndelegate", "cosmos-sdk/MsgUndelegate");
    B.StakingV1beta1Types_we9 = new A.StakingV1beta1Types("/cosmos.staking.v1beta1.MsgBeginRedelegate", "cosmos-sdk/MsgBeginRedelegate");
    B.StakingV1beta1Types_y9J = new A.StakingV1beta1Types("/cosmos.staking.v1beta1.MsgDelegate", "cosmos-sdk/MsgDelegate");
    B.StringEncoding_1 = new A.StringEncoding("utf8");
    B.StringEncoding_2 = new A.StringEncoding("base64");
    B.StringEncoding_3 = new A.StringEncoding("base64UrlSafe");
    B.TonContractException_XAw = new A.TonContractException("SubWalletVersionedWalletState only accept version 3 and 4", null);
    B.TonContractException_eUg = new A.TonContractException("Invalid workchain.", null);
    B.TronPluginException_0cD = new A.TronPluginException("Invalid contract typeUrl.", null);
    B.TronPluginException_8A0 = new A.TronPluginException("Transaction must contain exactly one contract.", null);
    B.TronPluginException_Cbl = new A.TronPluginException("Invalid type casting for bytes parser.", null);
    B.TronPluginException_Qrw = new A.TronPluginException("Invalid type casting for numeric parser.", null);
    B.TronPluginException_a7D = new A.TronPluginException("SmartContractAbiEntryType was not found.", null);
    B.TronPluginException_tgR = new A.TronPluginException("SmartContractAbiStateMutabilityType was not found.", null);
    B.TronPluginException_wZu = new A.TronPluginException("Contact does not found.", null);
    B.TronPluginException_zJF0 = new A.TronPluginException("Invalid type casting for BigInt parser.", null);
    B.TronPluginException_zJF = new A.TronPluginException("Invalid type casting for String parser.", null);
    B.TronPluginException_zSB = new A.TronPluginException("Invalid contract typeUrl", null);
    B.Tuple_false_false = new A.Tuple(false, false, type$.Tuple_bool_bool);
    B.Tuple_false_true = new A.Tuple(false, true, type$.Tuple_bool_bool);
    B.Tuple_null_0 = new A.Tuple(null, 0, type$.Tuple_of_nullable_CashToken_and_int);
    B.Tuple_true_true = new A.Tuple(true, true, type$.Tuple_bool_bool);
    B.Type_BigInt_DZK = A.typeLiteral("BigInt");
    B.Type_ByteBuffer_rqD = A.typeLiteral("ByteBuffer");
    B.Type_ByteData_9dB = A.typeLiteral("ByteData");
    B.Type_CborMapValue_DaJ = A.typeLiteral("CborMapValue<@,@>");
    B.Type_Float32List_9Kz = A.typeLiteral("Float32List");
    B.Type_Float64List_9Kz = A.typeLiteral("Float64List");
    B.Type_Int16List_s5h = A.typeLiteral("Int16List");
    B.Type_Int32List_O8Z = A.typeLiteral("Int32List");
    B.Type_Int8List_rFV = A.typeLiteral("Int8List");
    B.Type_JSObject_ttY = A.typeLiteral("JSObject");
    B.Type_Object_A4p = A.typeLiteral("Object");
    B.Type_String_AXU = A.typeLiteral("String");
    B.Type_Uint16List_kmP = A.typeLiteral("Uint16List");
    B.Type_Uint32List_kmP = A.typeLiteral("Uint32List");
    B.Type_Uint8ClampedList_04U = A.typeLiteral("Uint8ClampedList");
    B.Type_Uint8List_8Eb = A.typeLiteral("Uint8List");
    B.Type_bool_wF1 = A.typeLiteral("bool");
    B.Type_dynamic_wn9 = A.typeLiteral("@");
    B.Type_int_T7V = A.typeLiteral("int");
    B.Utf8Decoder_false = new A.Utf8Decoder(false);
    B.Utf8Decoder_true = new A.Utf8Decoder(true);
    B.VestingV1beta1Types_nhV = new A.VestingV1beta1Types("/cosmos.vesting.v1beta1.MsgCreateVestingAccount", "cosmos-sdk/MsgCreateVestingAccount");
    B.WalletException_coin_not_found_null = new A.WalletException("coin_not_found", null);
    B.WalletException_data_casting_failed_null = new A.WalletException("data_casting_failed", null);
    B.WalletException_data_verification_failed_null = new A.WalletException("data_verification_failed", null);
    B.WalletException_incorrect_network_null = new A.WalletException("incorrect_network", null);
    B.WalletException_invalid_account_details_null = new A.WalletException("invalid_account_details", null);
    B.WalletException_invalid_coin_null = new A.WalletException("invalid_coin", null);
    B.WalletException_invalid_provider_infomarion_null = new A.WalletException("invalid_provider_infomarion", null);
    B.WalletException_invalid_request_null = new A.WalletException("invalid_request", null);
    B.WalletException_invalid_serialization_data_null = new A.WalletException("invalid_serialization_data", null);
    B.WalletException_invalid_token_information_null = new A.WalletException("invalid_token_information", null);
    B.WalletException_lCc = new A.WalletException("decoding cbor required object, bytes or hex. no value provided for decoding.", null);
    B.Web3AptosRequestMethods_102_aptos_signMessage_List_empty = new A.Web3AptosRequestMethods(102, "aptos_signMessage", B.List_empty5);
    B.Web3AptosRequestMethods_106_aptos_network_List_empty = new A.Web3AptosRequestMethods(106, "aptos_network", B.List_empty5);
    B.List_eth_requestAccounts = A._setArrayType(makeConstList(["eth_requestAccounts"]), type$.JSArray_String);
    B.Web3AptosRequestMethods_6Qi = new A.Web3AptosRequestMethods(100, "aptos_requestAccounts", B.List_eth_requestAccounts);
    B.Web3AptosRequestMethods_bYO = new A.Web3AptosRequestMethods(107, "wallet_switchAptosChain", B.List_empty5);
    B.Web3AptosRequestMethods_oY4 = new A.Web3AptosRequestMethods(103, "aptos_signAllTransactions", B.List_empty5);
    B.Web3AptosRequestMethods_qFM = new A.Web3AptosRequestMethods(101, "aptos_signTransaction", B.List_empty5);
    B.Web3AptosRequestMethods_yoF = new A.Web3AptosRequestMethods(104, "aptos_sendTransaction", B.List_empty5);
    B.Web3BitcoinRequestMethods_2wh = new A.Web3BitcoinRequestMethods(101, "bitcoin_signTransaction", B.List_empty5);
    B.Web3BitcoinRequestMethods_9zY = new A.Web3BitcoinRequestMethods(108, "bitcoin_signPersonalMessage", B.List_empty5);
    B.Web3BitcoinRequestMethods_C8u = new A.Web3BitcoinRequestMethods(109, "bitcoin_sendTransaction", B.List_empty5);
    B.Web3BitcoinRequestMethods_kIu = new A.Web3BitcoinRequestMethods(100, "bitcoin_requestAccounts", B.List_eth_requestAccounts);
    B.Web3CosmosRequestMethods_101_cosmos_signMessage_List_empty = new A.Web3CosmosRequestMethods(101, "cosmos_signMessage", B.List_empty5);
    B.Web3CosmosRequestMethods_103_cosmos_addNewChain_List_empty = new A.Web3CosmosRequestMethods(103, "cosmos_addNewChain", B.List_empty5);
    B.Web3CosmosRequestMethods_PJw = new A.Web3CosmosRequestMethods(100, "cosmos_requestAccounts", B.List_eth_requestAccounts);
    B.Web3CosmosRequestMethods_Rzj = new A.Web3CosmosRequestMethods(102, "cosmos_signTransaction", B.List_empty5);
    B.Web3CosmosRequestMethods_VZC = new A.Web3CosmosRequestMethods(106, "cosmos_signTransactionDirect", B.List_empty5);
    B.Web3CosmosRequestMethods_fHX = new A.Web3CosmosRequestMethods(105, "cosmos_signTransactionAmino", B.List_empty5);
    B.Web3CosmosRequestMethods_gCv = new A.Web3CosmosRequestMethods(104, "wallet_switchCosmosChain", B.List_empty5);
    B.Web3CosmosRequestMethods_yfg = new A.Web3CosmosRequestMethods(107, "cosmos_sendTransaction", B.List_empty5);
    B.Web3RequestException_8PI = new A.Web3RequestException("Invalid host: Ensure that the request comes from a valid host and try again.", -1, "WEB3-4020", null);
    B.Web3RequestException_8vd = new A.Web3RequestException("The request is not a valid Request object.", -32000, "WALLET-4050", null);
    B.Web3RequestException_9U0 = new A.Web3RequestException("The Provider is disconnected.", 4900, "WEB3-5090", null);
    B.Web3RequestException_MuE = new A.Web3RequestException("The user rejected the request.", 4001, "WALLET-3000", null);
    B.Web3RequestException_RyO = new A.Web3RequestException("The specified network is invalid or does not exist.", -32000, "WALLET-4000", null);
    B.Web3RequestException_UFn = new A.Web3RequestException("Invalid method parameters. The specified Network does not exist.", -32600, "WEB3-5080", null);
    B.Web3RequestException_Yrl = new A.Web3RequestException(string$.The_re, 4100, "WEB3-4040", "The URL is disable by the owner of the wallet. Please use an allowed URL or contact the wallet owner for further assistance.");
    B.Web3RequestException_ce8 = new A.Web3RequestException("An error occurred during the request", -32603, "WALLET-000", null);
    B.Web3RequestException_f1e = new A.Web3RequestException("The requested method does not supported.", 4200, "WEB3-4030", null);
    B.Web3RequestException_pXe = new A.Web3RequestException("Invalid method parameters.", -32602, "WEB3-0080", null);
    B.Web3RequestException_qYU = new A.Web3RequestException("The requested method does not exist. Please check the method name and try again.", 4200, "WEB3-4030", null);
    B.Web3RequestException_r5u = new A.Web3RequestException(string$.The_re, 4100, "WEB3-4010", "The Web3 application does not have the required permissions. Please send a permission request first.");
    B.Web3SolanaRequestMethods_102_solana_signMessage_List_empty = new A.Web3SolanaRequestMethods(102, "solana_signMessage", B.List_empty5);
    B.Web3SolanaRequestMethods_106_solana_signIn_List_empty = new A.Web3SolanaRequestMethods(106, "solana_signIn", B.List_empty5);
    B.Web3SolanaRequestMethods_95z = new A.Web3SolanaRequestMethods(101, "solana_signTransaction", B.List_empty5);
    B.Web3SolanaRequestMethods_H9E = new A.Web3SolanaRequestMethods(103, "solana_signAndSendAllTransactions", B.List_empty5);
    B.Web3SolanaRequestMethods_aGo = new A.Web3SolanaRequestMethods(104, "solana_signAndSendTransaction", B.List_empty5);
    B.Web3SolanaRequestMethods_ibw = new A.Web3SolanaRequestMethods(100, "solana_requestAccounts", B.List_eth_requestAccounts);
    B.Web3StellarRequestMethods_102_stellar_signMessage_List_empty = new A.Web3StellarRequestMethods(102, "stellar_signMessage", B.List_empty5);
    B.Web3StellarRequestMethods_NUW = new A.Web3StellarRequestMethods(100, "stellar_requestAccounts", B.List_empty5);
    B.Web3StellarRequestMethods_oQm = new A.Web3StellarRequestMethods(103, "stellar_sendTransaction", B.List_empty5);
    B.Web3StellarRequestMethods_tp5 = new A.Web3StellarRequestMethods(101, "stellar_signTransaction", B.List_empty5);
    B.Web3SubstrateRequestMethods_5wO = new A.Web3SubstrateRequestMethods(103, "substrate_knownMetadata", B.List_empty5);
    B.Web3SubstrateRequestMethods_NBM = new A.Web3SubstrateRequestMethods(100, "substrate_requestAccounts", B.List_empty5);
    B.Web3SubstrateRequestMethods_TSV = new A.Web3SubstrateRequestMethods(102, "substrate_signMessage", B.List_empty5);
    B.Web3SubstrateRequestMethods_aSQ = new A.Web3SubstrateRequestMethods(101, "substrate_signTransaction", B.List_empty5);
    B.Web3SubstrateRequestMethods_zJd = new A.Web3SubstrateRequestMethods(103, "wallet_addSubstrateChain", B.List_empty5);
    B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty = new A.Web3SuiRequestMethods(101, "sui_signTransaction", B.List_empty5);
    B.Web3SuiRequestMethods_102_sui_signMessage_List_empty = new A.Web3SuiRequestMethods(102, "sui_signMessage", B.List_empty5);
    B.Web3SuiRequestMethods_KN8 = new A.Web3SuiRequestMethods(100, "sui_requestAccounts", B.List_eth_requestAccounts);
    B.Web3SuiRequestMethods_SxN = new A.Web3SuiRequestMethods(108, "sui_signPersonalMessage", B.List_empty5);
    B.Web3SuiRequestMethods_UFD = new A.Web3SuiRequestMethods(103, "sui_signAndExecuteTransaction", B.List_empty5);
    B.Web3SuiRequestMethods_wTN = new A.Web3SuiRequestMethods(104, "sui_signTransactionBlock", B.List_empty5);
    B.Web3SuiRequestMethods_zFW = new A.Web3SuiRequestMethods(105, "sui_signAndExecuteTransactionBlock", B.List_empty5);
    B.Web3TonRequestMethods_100_ton_requestAccounts_List_empty = new A.Web3TonRequestMethods(100, "ton_requestAccounts", B.List_empty5);
    B.Web3TonRequestMethods_101_ton_signTransaction_List_empty = new A.Web3TonRequestMethods(101, "ton_signTransaction", B.List_empty5);
    B.Web3TonRequestMethods_102_ton_signMessage_List_empty = new A.Web3TonRequestMethods(102, "ton_signMessage", B.List_empty5);
    B.Web3TonRequestMethods_103_ton_sendTransaction_List_empty = new A.Web3TonRequestMethods(103, "ton_sendTransaction", B.List_empty5);
    B.Web3TronRequestMethods_102_tron_signMessageV2_List_empty = new A.Web3TronRequestMethods(102, "tron_signMessageV2", B.List_empty5);
    B.List_wallet_switchEthereumChain = A._setArrayType(makeConstList(["wallet_switchEthereumChain"]), type$.JSArray_String);
    B.Web3TronRequestMethods_14H = new A.Web3TronRequestMethods(103, "wallet_switchTronChain", B.List_wallet_switchEthereumChain);
    B.Web3TronRequestMethods_FlG = new A.Web3TronRequestMethods(100, "tron_requestAccounts", B.List_eth_requestAccounts);
    B.Web3TronRequestMethods_ndr = new A.Web3TronRequestMethods(101, "tron_signTransaction", B.List_empty5);
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.toStringVisiting = A._setArrayType([], type$.JSArray_Object);
    $.Primitives__identityHashCodeProperty = null;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._Record__computedFieldKeys = A._setArrayType([], A.findType("JSArray<List<Object>?>"));
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $._BigIntImpl__lastDividendDigits = null;
    $._BigIntImpl__lastDividendUsed = null;
    $._BigIntImpl__lastDivisorDigits = null;
    $._BigIntImpl__lastDivisorUsed = null;
    $._BigIntImpl____lastQuoRemDigits = A._Cell$named("_lastQuoRemDigits");
    $._BigIntImpl____lastQuoRemUsed = A._Cell$named("_lastQuoRemUsed");
    $._BigIntImpl____lastRemUsed = A._Cell$named("_lastRemUsed");
    $._BigIntImpl____lastRem_nsh = A._Cell$named("_lastRem_nsh");
    $.Uri__cachedBaseString = "";
    $.Uri__cachedBaseUri = null;
    $._Base32Const__b32rev = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, A.findType("Map<String,int>"));
    $._sigma = function() {
      var t1 = type$.JSArray_int;
      return A._setArrayType([A._setArrayType([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], t1), A._setArrayType([28, 20, 8, 16, 18, 30, 26, 12, 2, 24, 0, 4, 22, 14, 10, 6], t1), A._setArrayType([22, 16, 24, 0, 10, 4, 30, 26, 20, 28, 6, 12, 14, 2, 18, 8], t1), A._setArrayType([14, 18, 6, 2, 26, 24, 22, 28, 4, 12, 10, 20, 8, 0, 30, 16], t1), A._setArrayType([18, 0, 10, 14, 4, 8, 20, 30, 28, 2, 22, 24, 12, 16, 6, 26], t1), A._setArrayType([4, 24, 12, 20, 0, 22, 16, 6, 8, 26, 14, 10, 30, 28, 2, 18], t1), A._setArrayType([24, 10, 2, 30, 28, 26, 8, 20, 0, 14, 12, 6, 18, 4, 16, 22], t1), A._setArrayType([26, 22, 14, 28, 24, 2, 6, 18, 10, 0, 30, 8, 16, 12, 4, 20], t1), A._setArrayType([12, 30, 28, 18, 22, 6, 0, 16, 24, 4, 26, 14, 2, 8, 20, 10], t1), A._setArrayType([20, 4, 16, 8, 14, 12, 2, 10, 30, 22, 18, 28, 6, 24, 26, 0], t1), A._setArrayType([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30], t1), A._setArrayType([28, 20, 8, 16, 18, 30, 26, 12, 2, 24, 0, 4, 22, 14, 10, 6], t1)], type$.JSArray_List_int);
    }();
    $.Web3AptosRequestMethods_values = A._setArrayType([B.Web3AptosRequestMethods_6Qi, B.Web3AptosRequestMethods_qFM, B.Web3AptosRequestMethods_oY4, B.Web3AptosRequestMethods_yoF, B.Web3AptosRequestMethods_102_aptos_signMessage_List_empty, B.Web3AptosRequestMethods_106_aptos_network_List_empty, B.Web3AptosRequestMethods_bYO], A.findType("JSArray<Web3AptosRequestMethods>"));
    $.Web3BitcoinRequestMethods_values = A._setArrayType([B.Web3BitcoinRequestMethods_kIu, B.Web3BitcoinRequestMethods_2wh, B.Web3BitcoinRequestMethods_9zY, B.Web3BitcoinRequestMethods_C8u], A.findType("JSArray<Web3BitcoinRequestMethods>"));
    $.Web3CosmosRequestMethods_values = A._setArrayType([B.Web3CosmosRequestMethods_PJw, B.Web3CosmosRequestMethods_fHX, B.Web3CosmosRequestMethods_VZC, B.Web3CosmosRequestMethods_101_cosmos_signMessage_List_empty, B.Web3CosmosRequestMethods_103_cosmos_addNewChain_List_empty, B.Web3CosmosRequestMethods_gCv, B.Web3CosmosRequestMethods_Rzj, B.Web3CosmosRequestMethods_yfg], A.findType("JSArray<Web3CosmosRequestMethods>"));
    $.Web3SolanaRequestMethods_values = A._setArrayType([B.Web3SolanaRequestMethods_ibw, B.Web3SolanaRequestMethods_95z, B.Web3SolanaRequestMethods_H9E, B.Web3SolanaRequestMethods_aGo, B.Web3SolanaRequestMethods_106_solana_signIn_List_empty, B.Web3SolanaRequestMethods_102_solana_signMessage_List_empty], A.findType("JSArray<Web3SolanaRequestMethods>"));
    $.Web3StellarRequestMethods_values = A._setArrayType([B.Web3StellarRequestMethods_NUW, B.Web3StellarRequestMethods_102_stellar_signMessage_List_empty, B.Web3StellarRequestMethods_oQm, B.Web3StellarRequestMethods_tp5], A.findType("JSArray<Web3StellarRequestMethods>"));
    $.Web3SubstrateRequestMethods_values = A._setArrayType([B.Web3SubstrateRequestMethods_NBM, B.Web3SubstrateRequestMethods_TSV, B.Web3SubstrateRequestMethods_aSQ, B.Web3SubstrateRequestMethods_zJd, B.Web3SubstrateRequestMethods_5wO], A.findType("JSArray<Web3SubstrateRequestMethods>"));
    $.Web3SuiRequestMethods_values = A._setArrayType([B.Web3SuiRequestMethods_KN8, B.Web3SuiRequestMethods_101_sui_signTransaction_List_empty, B.Web3SuiRequestMethods_UFD, B.Web3SuiRequestMethods_102_sui_signMessage_List_empty, B.Web3SuiRequestMethods_wTN, B.Web3SuiRequestMethods_zFW, B.Web3SuiRequestMethods_SxN], A.findType("JSArray<Web3SuiRequestMethods>"));
    $.Web3TonRequestMethods_values = A._setArrayType([B.Web3TonRequestMethods_100_ton_requestAccounts_List_empty, B.Web3TonRequestMethods_102_ton_signMessage_List_empty, B.Web3TonRequestMethods_103_ton_sendTransaction_List_empty, B.Web3TonRequestMethods_101_ton_signTransaction_List_empty], A.findType("JSArray<Web3TonRequestMethods>"));
    $.Web3TronRequestMethods_values = A._setArrayType([B.Web3TronRequestMethods_FlG, B.Web3TronRequestMethods_ndr, B.Web3TronRequestMethods_102_tron_signMessageV2_List_empty, B.Web3TronRequestMethods_14H], A.findType("JSArray<Web3TronRequestMethods>"));
    $._currentUriBase = null;
    $._current = null;
    $.JSCosmosSignMessageParams_properties = A._setArrayType(["message", "account"], type$.JSArray_String);
    $.JSSuiSignMessageParams_properties = A._setArrayType(["message", "account"], type$.JSArray_String);
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "nullFuture", "$get$nullFuture", () => B.C__RootZone.run$1$1(new A.nullFuture_closure(), A.findType("Future<~>")));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "Future__nullFuture", "$get$Future__nullFuture", () => $.$get$nullFuture());
    _lazyFinal($, "_Utf8Decoder__reusableBuffer", "$get$_Utf8Decoder__reusableBuffer", () => A.NativeUint8List_NativeUint8List(4096));
    _lazyFinal($, "_Utf8Decoder__decoder", "$get$_Utf8Decoder__decoder", () => new A._Utf8Decoder__decoder_closure().call$0());
    _lazyFinal($, "_Utf8Decoder__decoderNonfatal", "$get$_Utf8Decoder__decoderNonfatal", () => new A._Utf8Decoder__decoderNonfatal_closure().call$0());
    _lazyFinal($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", () => A.NativeInt8List__create1(A._ensureNativeList(A._setArrayType([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], type$.JSArray_int))));
    _lazy($, "_Base64Decoder__emptyBuffer", "$get$_Base64Decoder__emptyBuffer", () => A.NativeUint8List_NativeUint8List(0));
    _lazyFinal($, "Encoding__nameToEncoding", "$get$Encoding__nameToEncoding", () => A.LinkedHashMap_LinkedHashMap$_literal(["iso_8859-1:1987", B.C_Latin1Codec, "iso-ir-100", B.C_Latin1Codec, "iso_8859-1", B.C_Latin1Codec, "iso-8859-1", B.C_Latin1Codec, "latin1", B.C_Latin1Codec, "l1", B.C_Latin1Codec, "ibm819", B.C_Latin1Codec, "cp819", B.C_Latin1Codec, "csisolatin1", B.C_Latin1Codec, "iso-ir-6", B.C_AsciiCodec, "ansi_x3.4-1968", B.C_AsciiCodec, "ansi_x3.4-1986", B.C_AsciiCodec, "iso_646.irv:1991", B.C_AsciiCodec, "iso646-us", B.C_AsciiCodec, "us-ascii", B.C_AsciiCodec, "us", B.C_AsciiCodec, "ibm367", B.C_AsciiCodec, "cp367", B.C_AsciiCodec, "csascii", B.C_AsciiCodec, "ascii", B.C_AsciiCodec, "csutf8", B.C_Utf8Codec, "utf-8", B.C_Utf8Codec], type$.String, A.findType("Encoding")));
    _lazyFinal($, "_dummyList", "$get$_dummyList", () => A.NativeUint16List_NativeUint16List(0));
    _lazyFinal($, "_BigIntImpl_zero", "$get$_BigIntImpl_zero", () => A._BigIntImpl__BigIntImpl$_fromInt(0));
    _lazyFinal($, "_BigIntImpl_one", "$get$_BigIntImpl_one", () => A._BigIntImpl__BigIntImpl$_fromInt(1));
    _lazyFinal($, "_BigIntImpl_two", "$get$_BigIntImpl_two", () => A._BigIntImpl__BigIntImpl$_fromInt(2));
    _lazyFinal($, "_BigIntImpl__minusOne", "$get$_BigIntImpl__minusOne", () => $.$get$_BigIntImpl_one().$negate(0));
    _lazyFinal($, "_BigIntImpl__bigInt10000", "$get$_BigIntImpl__bigInt10000", () => A._BigIntImpl__BigIntImpl$_fromInt(10000));
    _lazy($, "_BigIntImpl__parseRE", "$get$_BigIntImpl__parseRE", () => A.RegExp_RegExp("^\\s*([+-]?)((0x[a-f0-9]+)|(\\d+)|([a-z0-9]+))\\s*$", false));
    _lazyFinal($, "_BigIntImpl__bitsForFromDouble", "$get$_BigIntImpl__bitsForFromDouble", () => A.NativeUint8List_NativeUint8List(8));
    _lazyFinal($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", () => A.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$", true));
    _lazyFinal($, "_Uri__useURLSearchParams", "$get$_Uri__useURLSearchParams", () => typeof URLSearchParams == "function");
    _lazyFinal($, "DateTime__parseFormat", "$get$DateTime__parseFormat", () => A.RegExp_RegExp("^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d+))?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$", true));
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_A4p));
    _lazyFinal($, "Random__secureRandom", "$get$Random__secureRandom", () => {
      var t1 = new A._JSSecureRandom(A.NativeByteData_NativeByteData(8));
      t1._JSSecureRandom$0();
      return t1;
    });
    _lazyFinal($, "Script_empty", "$get$Script_empty", () => A.Script_Script(B.List_empty2));
    _lazyFinal($, "CashTokenUtils_maxTokenAmount", "$get$CashTokenUtils_maxTokenAmount", () => $.$get$_BigIntImpl_two().pow$1(63).$sub(0, $.$get$_BigIntImpl_one()));
    _lazyFinal($, "_BchBech32Utils__mask5", "$get$_BchBech32Utils__mask5", () => A._BigIntImpl__BigIntImpl$from(31));
    _lazyFinal($, "TonAddressUtils__friendlyRegixAddress", "$get$TonAddressUtils__friendlyRegixAddress", () => A.RegExp_RegExp("[A-Za-z0-9+/_-]+", true));
    _lazyFinal($, "Bip32Const_mainNetKeyNetVersions", "$get$Bip32Const_mainNetKeyNetVersions", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 136, 178, 30], true, t1), A.List_List$from([4, 136, 173, 228], true, t1));
    });
    _lazyFinal($, "Bip32Const_testNetKeyNetVersions", "$get$Bip32Const_testNetKeyNetVersions", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 53, 135, 207], true, t1), A.List_List$from([4, 53, 131, 148], true, t1));
    });
    _lazy($, "Bip32Const_kholawKeyNetVersions", "$get$Bip32Const_kholawKeyNetVersions", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 136, 178, 30], true, t1), A.List_List$from([15, 67, 49, 212], true, t1));
    });
    _lazyFinal($, "Bip44Coins__coinToConf", "$get$Bip44Coins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Bip44Coins_akashNetwork, $.$get$Bip44Conf_akashNetwork(), B.Bip44Coins_algorand, $.$get$Bip44Conf_algorand(), B.Bip44Coins_aptos, $.$get$Bip44Conf_aptos(), B.Bip44Coins_aptosEd25519SingleKey, $.$get$Bip44Conf_aptosSingleKeyEd25519(), B.Bip44Coins_aptosSecp256k1SingleKey, $.$get$Bip44Conf_aptosSingleKeySecp256k1(), B.Bip44Coins_sui, $.$get$Bip44Conf_suiEd25519(), B.Bip44Coins_suiSecp256k1, $.$get$Bip44Conf_suiSecp256k1(), B.Bip44Coins_suiSecp256r1, $.$get$Bip44Conf_suiSecp256r1(), B.Bip44Coins_avaxCChain, $.$get$Bip44Conf_avaxCChain(), B.Bip44Coins_avaxPChain, $.$get$Bip44Conf_avaxPChain(), B.Bip44Coins_avaxXChain, $.$get$Bip44Conf_avaxXChain(), B.Bip44Coins_axelar, $.$get$Bip44Conf_axelar(), B.Bip44Coins_bandProtocol, $.$get$Bip44Conf_bandProtocol(), B.Bip44Coins_binanceChain, $.$get$Bip44Conf_binanceChain(), B.Bip44Coins_binanceSmartChain, $.$get$Bip44Conf_binanceSmartChain(), B.Bip44Coins_bitcoin, $.$get$Bip44Conf_bitcoinMainNet(), B.Bip44Coins_bitcoinTestnet, $.$get$Bip44Conf_bitcoinTestNet(), B.Bip44Coins_bitcoinCash, $.$get$Bip44Conf_bitcoinCashMainNet(), B.Bip44Coins_bitcoinCashTestnet, $.$get$Bip44Conf_bitcoinCashTestNet(), B.Bip44Coins_bitcoinCashSlp, $.$get$Bip44Conf_bitcoinCashSlpMainNet(), B.Bip44Coins_bitcoinCashSlpTestnet, $.$get$Bip44Conf_bitcoinCashSlpTestNet(), B.Bip44Coins_bitcoinSv, $.$get$Bip44Conf_bitcoinSvMainNet(), B.Bip44Coins_bitcoinSvTestnet, $.$get$Bip44Conf_bitcoinSvTestNet(), B.Bip44Coins_cardanoByronIcarus, $.$get$Bip44Conf_cardanoByronIcarus(), B.Bip44Coins_cardanoByronLedger, $.$get$Bip44Conf_cardanoByronLedger(), B.Bip44Coins_cardanoByronIcarusTestnet, $.$get$Bip44Conf_cardanoByronIcarusTestnet(), B.Bip44Coins_cardanoByronLedgerTestnet, $.$get$Bip44Conf_cardanoByronLedgerTestnet(), B.Bip44Coins_celo, $.$get$Bip44Conf_celo(), B.Bip44Coins_certik, $.$get$Bip44Conf_certik(), B.Bip44Coins_chihuahua, $.$get$Bip44Conf_chihuahua(), B.Bip44Coins_cosmos, $.$get$Bip44Conf_cosmos(), B.Bip44Coins_cosmosTestnet, $.$get$Bip44Conf_cosmosTestnet(), B.Bip44Coins_cosmosNist256p1, $.$get$Bip44Conf_cosmosNist256p1(), B.Bip44Coins_cosmosTestnetNist256p1, $.$get$Bip44Conf_cosmosTestnetNist256p1(), B.Bip44Coins_cosmosEd25519, $.$get$Bip44Conf_cosmosEd25519(), B.Bip44Coins_cosmosTestnetEd25519, $.$get$Bip44Conf_cosmosTestnetEd25519(), B.Bip44Coins_cosmosEthSecp256k1, $.$get$Bip44Conf_cosmosEthSecp256k1(), B.Bip44Coins_cosmosTestnetEthSecp256k1, $.$get$Bip44Conf_cosmosTestnetEthSecp256k1(), B.Bip44Coins_dash, $.$get$Bip44Conf_dashMainNet(), B.Bip44Coins_dashTestnet, $.$get$Bip44Conf_dashTestNet(), B.Bip44Coins_dogecoin, $.$get$Bip44Conf_dogecoinMainNet(), B.Bip44Coins_dogecoinTestnet, $.$get$Bip44Conf_dogecoinTestNet(), B.Bip44Coins_pepecoin, $.$get$Bip44Conf_pepeMainnet(), B.Bip44Coins_pepecoinTestnet, $.$get$Bip44Conf_pepeTestnet(), B.Bip44Coins_ecash, $.$get$Bip44Conf_ecashMainNet(), B.Bip44Coins_ecashTestnet, $.$get$Bip44Conf_ecashTestNet(), B.Bip44Coins_elrond, $.$get$Bip44Conf_elrond(), B.Bip44Coins_eos, $.$get$Bip44Conf_eos(), B.Bip44Coins_ergo, $.$get$Bip44Conf_ergoMainNet(), B.Bip44Coins_ergoTestnet, $.$get$Bip44Conf_ergoTestNet(), B.Bip44Coins_ethereum, $.$get$Bip44Conf_ethereum(), B.Bip44Coins_ethereumTestnet, $.$get$Bip44Conf_ethereumTestnet(), B.Bip44Coins_ethereumClassic, $.$get$Bip44Conf_ethereumClassic(), B.Bip44Coins_fantomOpera, $.$get$Bip44Conf_fantomOpera(), B.Bip44Coins_filecoin, $.$get$Bip44Conf_filecoin(), B.Bip44Coins_harmonyOneAtom, $.$get$Bip44Conf_harmonyOneAtom(), B.Bip44Coins_harmonyOneEth, $.$get$Bip44Conf_harmonyOneEth(), B.Bip44Coins_harmonyOneMetamask, $.$get$Bip44Conf_harmonyOneMetamask(), B.Bip44Coins_huobiChain, $.$get$Bip44Conf_huobiChain(), B.Bip44Coins_icon, $.$get$Bip44Conf_icon(), B.Bip44Coins_injective, $.$get$Bip44Conf_injective(), B.Bip44Coins_irisNet, $.$get$Bip44Conf_irisNet(), B.Bip44Coins_kava, $.$get$Bip44Conf_kava(), B.Bip44Coins_kusamaEd25519Slip, $.$get$Bip44Conf_kusamaEd25519Slip(), B.Bip44Coins_kusamaTestnetEd25519Slip, $.$get$Bip44Conf_kusamaTestnetEd25519Slip(), B.Bip44Coins_litecoin, $.$get$Bip44Conf_litecoinMainNet(), B.Bip44Coins_litecoinTestnet, $.$get$Bip44Conf_litecoinTestNet(), B.Bip44Coins_moneroEd25519Slip, $.$get$Bip44Conf_moneroEd25519Slip(), B.Bip44Coins_moneroSecp256k1, $.$get$Bip44Conf_moneroSecp256k1(), B.Bip44Coins_nano, $.$get$Bip44Conf_nano(), B.Bip44Coins_nearProtocol, $.$get$Bip44Conf_nearProtocol(), B.Bip44Coins_neo, $.$get$Bip44Conf_neo(), B.Bip44Coins_nineChroniclesGold, $.$get$Bip44Conf_nineChroniclesGold(), B.Bip44Coins_okexChainAtom, $.$get$Bip44Conf_okexChainAtom(), B.Bip44Coins_okexChainAtomOld, $.$get$Bip44Conf_okexChainAtomOld(), B.Bip44Coins_okexChainEth, $.$get$Bip44Conf_okexChainEth(), B.Bip44Coins_ontology, $.$get$Bip44Conf_ontology(), B.Bip44Coins_osmosis, $.$get$Bip44Conf_osmosis(), B.Bip44Coins_piNetwork, $.$get$Bip44Conf_piNetwork(), B.Bip44Coins_polkadotEd25519Slip, $.$get$Bip44Conf_polkadotEd25519Slip(), B.Bip44Coins_polkadotTestnetEd25519Slip, $.$get$Bip44Conf_polkadotTestnetEd25519Slip(), B.Bip44Coins_polygon, $.$get$Bip44Conf_polygon(), B.Bip44Coins_ripple, $.$get$Bip44Conf_ripple(), B.Bip44Coins_rippleTestnet, $.$get$Bip44Conf_rippleTestnet(), B.Bip44Coins_rippleED25519, $.$get$Bip44Conf_rippleEd25519(), B.Bip44Coins_rippleTestnetED25519, $.$get$Bip44Conf_rippleTestnetEd25519(), B.Bip44Coins_secretNetworkOld, $.$get$Bip44Conf_secretNetworkOld(), B.Bip44Coins_secretNetworkNew, $.$get$Bip44Conf_secretNetworkNew(), B.Bip44Coins_solana, $.$get$Bip44Conf_solana(), B.Bip44Coins_solanaTestnet, $.$get$Bip44Conf_solanaTestnet(), B.Bip44Coins_stellar, $.$get$Bip44Conf_stellar(), B.Bip44Coins_stellarTestnet, $.$get$Bip44Conf_stellarTestnet(), B.Bip44Coins_terra, $.$get$Bip44Conf_terra(), B.Bip44Coins_tezos, $.$get$Bip44Conf_tezos(), B.Bip44Coins_theta, $.$get$Bip44Conf_theta(), B.Bip44Coins_tron, $.$get$Bip44Conf_tron(), B.Bip44Coins_tronTestnet, $.$get$Bip44Conf_tronTestnet(), B.Bip44Coins_vechain, $.$get$Bip44Conf_vechain(), B.Bip44Coins_verge, $.$get$Bip44Conf_verge(), B.Bip44Coins_zcash, $.$get$Bip44Conf_zcashMainNet(), B.Bip44Coins_zcashTestnet, $.$get$Bip44Conf_zcashTestNet(), B.Bip44Coins_zilliqa, $.$get$Bip44Conf_zilliqa(), B.Bip44Coins_tonTestnet, $.$get$Bip44Conf_tonTestnet(), B.Bip44Coins_tonMainnet, $.$get$Bip44Conf_tonMainnet(), B.Bip44Coins_electraProtocol, $.$get$Bip44Conf_electraProtocolMainNet(), B.Bip44Coins_electraProtocolTestnet, $.$get$Bip44Conf_electraProtocolTestNet()], type$.Bip44Coins, type$.BipCoinConfig));
    _lazyFinal($, "Bip44Conf_bip44BtcKeyNetVerMain", "$get$Bip44Conf_bip44BtcKeyNetVerMain", () => $.$get$Bip32Const_mainNetKeyNetVersions());
    _lazyFinal($, "Bip44Conf_bip44BtcKeyNetVerTest", "$get$Bip44Conf_bip44BtcKeyNetVerTest", () => $.$get$Bip32Const_testNetKeyNetVersions());
    _lazyFinal($, "Bip44Conf_akashNetwork", "$get$Bip44Conf_akashNetwork", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "akash"], type$.String, type$.dynamic), new A.Bip44Conf_akashNetwork_closure(), B.ChainType_mainnet, 118, B.CoinNames_HRl, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_algorand", "$get$Bip44Conf_algorand", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_algorand_closure(), B.ChainType_mainnet, 283, B.CoinNames_Algorand, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_aptos", "$get$Bip44Conf_aptos", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_aptos_closure(), B.ChainType_mainnet, 637, B.CoinNames_Aptos, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_aptosSingleKeySecp256k1", "$get$Bip44Conf_aptosSingleKeySecp256k1", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_aptosSingleKeySecp256k1_closure(), B.ChainType_mainnet, 637, B.CoinNames_Aptos, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_aptosSingleKeyEd25519", "$get$Bip44Conf_aptosSingleKeyEd25519", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_aptosSingleKeyEd25519_closure(), B.ChainType_mainnet, 637, B.CoinNames_Aptos, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_avaxCChain", "$get$Bip44Conf_avaxCChain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_avaxCChain_closure(), B.ChainType_mainnet, 60, B.CoinNames_Kcg1, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_avaxPChain", "$get$Bip44Conf_avaxPChain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_avaxPChain_closure(), B.ChainType_mainnet, 9000, B.CoinNames_Kcg0, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_avaxXChain", "$get$Bip44Conf_avaxXChain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_avaxXChain_closure(), B.ChainType_mainnet, 9000, B.CoinNames_Kcg, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_axelar", "$get$Bip44Conf_axelar", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "axelar"], type$.String, type$.dynamic), new A.Bip44Conf_axelar_closure(), B.ChainType_mainnet, 118, B.CoinNames_Axelar, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_bandProtocol", "$get$Bip44Conf_bandProtocol", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "band"], type$.String, type$.dynamic), new A.Bip44Conf_bandProtocol_closure(), B.ChainType_mainnet, 494, B.CoinNames_UKI, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_binanceChain", "$get$Bip44Conf_binanceChain", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "bnb"], type$.String, type$.dynamic), new A.Bip44Conf_binanceChain_closure(), B.ChainType_mainnet, 714, B.CoinNames_Rp6, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_binanceSmartChain", "$get$Bip44Conf_binanceSmartChain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_binanceSmartChain_closure(), B.ChainType_mainnet, 60, B.CoinNames_MFR, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_bitcoinMainNet", "$get$Bip44Conf_bitcoinMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0], type$.String, type$.dynamic), new A.Bip44Conf_bitcoinMainNet_closure(), B.ChainType_mainnet, 0, B.CoinNames_Bitcoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_bitcoinTestNet", "$get$Bip44Conf_bitcoinTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_111], type$.String, type$.dynamic), new A.Bip44Conf_bitcoinTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_gL8, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_bitcoinCashMainNet", "$get$Bip44Conf_bitcoinCashMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "bitcoincash"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_bitcoinCashMainNet_closure(), B.ChainType_mainnet, 145, B.CoinNames_9E5, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_bitcoinCashTestNet", "$get$Bip44Conf_bitcoinCashTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "bchtest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_111], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_bitcoinCashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_1vL, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_bitcoinCashSlpMainNet", "$get$Bip44Conf_bitcoinCashSlpMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "simpleledger"], t2, type$.nullable_Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_bitcoinCashSlpMainNet_closure(), B.ChainType_mainnet, 145, B.CoinNames_R7N, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_bitcoinCashSlpTestNet", "$get$Bip44Conf_bitcoinCashSlpTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "slptest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_111], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_bitcoinCashSlpTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_uYt, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_bitcoinSvMainNet", "$get$Bip44Conf_bitcoinSvMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0], type$.String, type$.dynamic), new A.Bip44Conf_bitcoinSvMainNet_closure(), B.ChainType_mainnet, 236, B.CoinNames_BitcoinSV, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_bitcoinSvTestNet", "$get$Bip44Conf_bitcoinSvTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_111], type$.String, type$.dynamic), new A.Bip44Conf_bitcoinSvTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_CQb, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_cardanoByronIcarus", "$get$Bip44Conf_cardanoByronIcarus", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true, "is_icarus", true], type$.String, type$.dynamic), new A.Bip44Conf_cardanoByronIcarus_closure(), B.ChainType_mainnet, 1815, B.CoinNames_Cardano, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "Bip44Conf_cardanoByronLedger", "$get$Bip44Conf_cardanoByronLedger", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true], type$.String, type$.dynamic), new A.Bip44Conf_cardanoByronLedger_closure(), B.ChainType_mainnet, 1815, B.CoinNames_Cardano, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "Bip44Conf_cardanoByronIcarusTestnet", "$get$Bip44Conf_cardanoByronIcarusTestnet", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true, "is_icarus", true], type$.String, type$.dynamic), new A.Bip44Conf_cardanoByronIcarusTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Cardano, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "Bip44Conf_cardanoByronLedgerTestnet", "$get$Bip44Conf_cardanoByronLedgerTestnet", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true], type$.String, type$.dynamic), new A.Bip44Conf_cardanoByronLedgerTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Cardano, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "Bip44Conf_celo", "$get$Bip44Conf_celo", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_celo_closure(), B.ChainType_mainnet, 52752, B.CoinNames_Celo, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_certik", "$get$Bip44Conf_certik", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "certik"], type$.String, type$.dynamic), new A.Bip44Conf_certik_closure(), B.ChainType_mainnet, 118, B.CoinNames_Certik, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_chihuahua", "$get$Bip44Conf_chihuahua", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "chihuahua"], type$.String, type$.dynamic), new A.Bip44Conf_chihuahua_closure(), B.ChainType_mainnet, 118, B.CoinNames_Chihuahua, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_cosmos", "$get$Bip44Conf_cosmos", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmos_closure(), B.ChainType_mainnet, 118, B.CoinNames_Cosmos, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosTestnet", "$get$Bip44Conf_cosmosTestnet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Cosmos, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosEthSecp256k1", "$get$Bip44Conf_cosmosEthSecp256k1", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosEthSecp256k1_closure(), B.ChainType_mainnet, 118, B.CoinNames_Cosmos, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosTestnetEthSecp256k1", "$get$Bip44Conf_cosmosTestnetEthSecp256k1", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosTestnetEthSecp256k1_closure(), B.ChainType_testnet, 1, B.CoinNames_Cosmos, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosNist256p1", "$get$Bip44Conf_cosmosNist256p1", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosNist256p1_closure(), B.ChainType_mainnet, 118, B.CoinNames_Cosmos, "0'/0/0", t1, null, B.EllipticCurveTypes_4, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosTestnetNist256p1", "$get$Bip44Conf_cosmosTestnetNist256p1", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosTestnetNist256p1_closure(), B.ChainType_testnet, 1, B.CoinNames_Cosmos, "0'/0/0", t1, null, B.EllipticCurveTypes_4, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosEd25519", "$get$Bip44Conf_cosmosEd25519", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosEd25519_closure(), B.ChainType_mainnet, 118, B.CoinNames_Cosmos, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_cosmosTestnetEd25519", "$get$Bip44Conf_cosmosTestnetEd25519", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "cosmos"], type$.String, type$.dynamic), new A.Bip44Conf_cosmosTestnetEd25519_closure(), B.ChainType_testnet, 1, B.CoinNames_Cosmos, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_dashMainNet", "$get$Bip44Conf_dashMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_76], type$.String, type$.dynamic), new A.Bip44Conf_dashMainNet_closure(), B.ChainType_mainnet, 5, B.CoinNames_Dash, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_204);
    });
    _lazyFinal($, "Bip44Conf_dashTestNet", "$get$Bip44Conf_dashTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_140], type$.String, type$.dynamic), new A.Bip44Conf_dashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_wNy, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_dogecoinMainNet", "$get$Bip44Conf_dogecoinMainNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([2, 250, 202, 253], true, t1), A.List_List$from([2, 250, 195, 152], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_30], type$.String, type$.dynamic), new A.Bip44Conf_dogecoinMainNet_closure(), B.ChainType_mainnet, 3, B.CoinNames_Dogecoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_158);
    });
    _lazyFinal($, "Bip44Conf_dogecoinTestNet", "$get$Bip44Conf_dogecoinTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 50, 169, 168], true, t1), A.List_List$from([4, 50, 162, 67], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_113], type$.String, type$.dynamic), new A.Bip44Conf_dogecoinTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_ZAX, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_241);
    });
    _lazyFinal($, "Bip44Conf_pepeMainnet", "$get$Bip44Conf_pepeMainnet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([2, 250, 202, 253], true, t1), A.List_List$from([2, 250, 195, 152], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_56], type$.String, type$.dynamic), new A.Bip44Conf_pepeMainnet_closure(), B.ChainType_mainnet, 3434, B.CoinNames_Pepecoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_158);
    });
    _lazyFinal($, "Bip44Conf_pepeTestnet", "$get$Bip44Conf_pepeTestnet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 50, 169, 168], true, t1), A.List_List$from([4, 50, 162, 67], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_113], type$.String, type$.dynamic), new A.Bip44Conf_pepeTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Nk6, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_241);
    });
    _lazyFinal($, "Bip44Conf_ecashMainNet", "$get$Bip44Conf_ecashMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "ecash"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_ecashMainNet_closure(), B.ChainType_mainnet, 145, B.CoinNames_eCash, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_ecashTestNet", "$get$Bip44Conf_ecashTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_0, "hrp", "ectest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_111], t2, type$.List_int)], t2, type$.dynamic), new A.Bip44Conf_ecashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_A7Y, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_elrond", "$get$Bip44Conf_elrond", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_elrond_closure(), B.ChainType_mainnet, 508, B.CoinNames_jrx, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_eos", "$get$Bip44Conf_eos", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_eos_closure(), B.ChainType_mainnet, 194, B.CoinNames_EOS, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_ergoMainNet", "$get$Bip44Conf_ergoMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_type", B.C_ErgoNetworkTypes0], type$.String, type$.dynamic), new A.Bip44Conf_ergoMainNet_closure(), B.ChainType_mainnet, 429, B.CoinNames_Ergo, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_ergoTestNet", "$get$Bip44Conf_ergoTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_type", B.C_ErgoNetworkTypes], type$.String, type$.dynamic), new A.Bip44Conf_ergoTestNet_closure(), B.ChainType_testnet, 429, B.CoinNames_O05, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_ethereum", "$get$Bip44Conf_ethereum", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_ethereum_closure(), B.ChainType_mainnet, 60, B.CoinNames_Ethereum, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_ethereumTestnet", "$get$Bip44Conf_ethereumTestnet", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_ethereumTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Ethereum, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_ethereumClassic", "$get$Bip44Conf_ethereumClassic", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_ethereumClassic_closure(), B.ChainType_mainnet, 61, B.CoinNames_lRs, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_fantomOpera", "$get$Bip44Conf_fantomOpera", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_fantomOpera_closure(), B.ChainType_mainnet, 60, B.CoinNames_USx, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_filecoin", "$get$Bip44Conf_filecoin", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_filecoin_closure(), B.ChainType_mainnet, 461, B.CoinNames_Filecoin, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_harmonyOneMetamask", "$get$Bip44Conf_harmonyOneMetamask", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_harmonyOneMetamask_closure(), B.ChainType_mainnet, 60, B.CoinNames_tzl, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_harmonyOneEth", "$get$Bip44Conf_harmonyOneEth", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_harmonyOneEth_closure(), B.ChainType_mainnet, 1023, B.CoinNames_tzl, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_harmonyOneAtom", "$get$Bip44Conf_harmonyOneAtom", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_harmonyOneAtom_closure(), B.ChainType_mainnet, 1023, B.CoinNames_tzl, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_huobiChain", "$get$Bip44Conf_huobiChain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_huobiChain_closure(), B.ChainType_mainnet, 60, B.CoinNames_Eq2, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_icon", "$get$Bip44Conf_icon", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_icon_closure(), B.ChainType_mainnet, 74, B.CoinNames_Icon, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_injective", "$get$Bip44Conf_injective", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_injective_closure(), B.ChainType_mainnet, 60, B.CoinNames_Injective, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_irisNet", "$get$Bip44Conf_irisNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "iaa"], type$.String, type$.dynamic), new A.Bip44Conf_irisNet_closure(), B.ChainType_mainnet, 118, B.CoinNames_6I5, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_kava", "$get$Bip44Conf_kava", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "kava"], type$.String, type$.dynamic), new A.Bip44Conf_kava_closure(), B.ChainType_mainnet, 459, B.CoinNames_Kava, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_kusamaEd25519Slip", "$get$Bip44Conf_kusamaEd25519Slip", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ss58_format", 2], type$.String, type$.dynamic), new A.Bip44Conf_kusamaEd25519Slip_closure(), B.ChainType_mainnet, 434, B.CoinNames_Kusama, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_kusamaTestnetEd25519Slip", "$get$Bip44Conf_kusamaTestnetEd25519Slip", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ss58_format", 2], type$.String, type$.dynamic), new A.Bip44Conf_kusamaTestnetEd25519Slip_closure(), B.ChainType_mainnet, 1, B.CoinNames_Kusama, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_litecoinMainNet", "$get$Bip44Conf_litecoinMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain(),
        t2 = type$.int;
      t2 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([1, 157, 164, 98], true, t2), A.List_List$from([1, 157, 156, 254], true, t2));
      return A.BipLitecoinConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std_net_ver", B.List_48, "depr_net_ver", B.List_0], type$.String, type$.dynamic), new A.Bip44Conf_litecoinMainNet_closure(), t2, B.ChainType_mainnet, 2, B.CoinNames_Litecoin, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_176);
    });
    _lazyFinal($, "Bip44Conf_litecoinTestNet", "$get$Bip44Conf_litecoinTestNet", () => {
      var t1 = type$.int,
        t2 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 54, 246, 225], true, t1), A.List_List$from([4, 54, 239, 125], true, t1));
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 54, 246, 225], true, t1), A.List_List$from([4, 54, 239, 125], true, t1));
      return A.BipLitecoinConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std_net_ver", B.List_111, "depr_net_ver", B.List_111], type$.String, type$.dynamic), new A.Bip44Conf_litecoinTestNet_closure(), t1, B.ChainType_testnet, 1, B.CoinNames_cIT, "0'/0/0", t2, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_moneroEd25519Slip", "$get$Bip44Conf_moneroEd25519Slip", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_moneroEd25519Slip_closure(), B.ChainType_mainnet, 128, B.CoinNames_Monero, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_moneroSecp256k1", "$get$Bip44Conf_moneroSecp256k1", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_moneroSecp256k1_closure(), B.ChainType_mainnet, 128, B.CoinNames_Monero, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_nano", "$get$Bip44Conf_nano", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_nano_closure(), B.ChainType_mainnet, 165, B.CoinNames_Nano, "0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_1, null));
    _lazyFinal($, "Bip44Conf_nearProtocol", "$get$Bip44Conf_nearProtocol", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_nearProtocol_closure(), B.ChainType_mainnet, 397, B.CoinNames_jSo, "0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_neo", "$get$Bip44Conf_neo", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ver", B.List_23], type$.String, type$.dynamic), new A.Bip44Conf_neo_closure(), B.ChainType_mainnet, 888, B.CoinNames_NEO, "0'/0/0", t1, null, B.EllipticCurveTypes_4, null);
    });
    _lazyFinal($, "Bip44Conf_nineChroniclesGold", "$get$Bip44Conf_nineChroniclesGold", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_nineChroniclesGold_closure(), B.ChainType_mainnet, 567, B.CoinNames_NineChroniclesGold, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_okexChainEth", "$get$Bip44Conf_okexChainEth", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_okexChainEth_closure(), B.ChainType_mainnet, 60, B.CoinNames_OKExChain, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_okexChainAtom", "$get$Bip44Conf_okexChainAtom", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_okexChainAtom_closure(), B.ChainType_mainnet, 60, B.CoinNames_OKExChain, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_okexChainAtomOld", "$get$Bip44Conf_okexChainAtomOld", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_okexChainAtomOld_closure(), B.ChainType_mainnet, 996, B.CoinNames_OKExChain, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_ontology", "$get$Bip44Conf_ontology", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ver", B.List_23], type$.String, type$.dynamic), new A.Bip44Conf_ontology_closure(), B.ChainType_mainnet, 1024, B.CoinNames_Ontology, "0'/0/0", t1, null, B.EllipticCurveTypes_4, null);
    });
    _lazyFinal($, "Bip44Conf_osmosis", "$get$Bip44Conf_osmosis", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "osmo"], type$.String, type$.dynamic), new A.Bip44Conf_osmosis_closure(), B.ChainType_mainnet, 118, B.CoinNames_Osmosis, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_piNetwork", "$get$Bip44Conf_piNetwork", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["addr_type", B.XlmAddrTypes_48_PublicKey], type$.String, type$.dynamic), new A.Bip44Conf_piNetwork_closure(), B.ChainType_mainnet, 314159, B.CoinNames_oQV, "0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_polkadotEd25519Slip", "$get$Bip44Conf_polkadotEd25519Slip", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ss58_format", 0], type$.String, type$.dynamic), new A.Bip44Conf_polkadotEd25519Slip_closure(), B.ChainType_mainnet, 354, B.CoinNames_Polkadot, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_polkadotTestnetEd25519Slip", "$get$Bip44Conf_polkadotTestnetEd25519Slip", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["ss58_format", 42], type$.String, type$.dynamic), new A.Bip44Conf_polkadotTestnetEd25519Slip_closure(), B.ChainType_testnet, 1, B.CoinNames_Polkadot, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_polygon", "$get$Bip44Conf_polygon", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_polygon_closure(), B.ChainType_mainnet, 60, B.CoinNames_Polygon, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_ripple", "$get$Bip44Conf_ripple", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["prefix", B.List_5_68], type$.String, type$.dynamic), new A.Bip44Conf_ripple_closure(), B.ChainType_mainnet, 144, B.CoinNames_Ripple, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_rippleTestnet", "$get$Bip44Conf_rippleTestnet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["prefix", B.List_4_147], type$.String, type$.dynamic), new A.Bip44Conf_rippleTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Ripple, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_rippleEd25519", "$get$Bip44Conf_rippleEd25519", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["prefix", B.List_5_68, "curve_type", B.EllipticCurveTypes_0], type$.String, type$.dynamic), new A.Bip44Conf_rippleEd25519_closure(), B.ChainType_mainnet, 144, B.CoinNames_Ripple, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_rippleTestnetEd25519", "$get$Bip44Conf_rippleTestnetEd25519", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["prefix", B.List_4_147, "curve_type", B.EllipticCurveTypes_0], type$.String, type$.dynamic), new A.Bip44Conf_rippleTestnetEd25519_closure(), B.ChainType_testnet, 1, B.CoinNames_Ripple, "0'/0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_secretNetworkOld", "$get$Bip44Conf_secretNetworkOld", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "secret"], type$.String, type$.dynamic), new A.Bip44Conf_secretNetworkOld_closure(), B.ChainType_mainnet, 118, B.CoinNames_vl8, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_secretNetworkNew", "$get$Bip44Conf_secretNetworkNew", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "secret"], type$.String, type$.dynamic), new A.Bip44Conf_secretNetworkNew_closure(), B.ChainType_mainnet, 529, B.CoinNames_vl8, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_solana", "$get$Bip44Conf_solana", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_solana_closure(), B.ChainType_mainnet, 501, B.CoinNames_Solana, "0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_solanaTestnet", "$get$Bip44Conf_solanaTestnet", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_solanaTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Solana, "0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip44Conf_stellar", "$get$Bip44Conf_stellar", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["addr_type", B.XlmAddrTypes_48_PublicKey], type$.String, type$.dynamic), new A.Bip44Conf_stellar_closure(), B.ChainType_mainnet, 148, B.CoinNames_Stellar, "0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_stellarTestnet", "$get$Bip44Conf_stellarTestnet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["addr_type", B.XlmAddrTypes_48_PublicKey], type$.String, type$.dynamic), new A.Bip44Conf_stellarTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Stellar, "0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_terra", "$get$Bip44Conf_terra", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "terra"], type$.String, type$.dynamic), new A.Bip44Conf_terra_closure(), B.ChainType_mainnet, 330, B.CoinNames_Terra, "0'/0/0", t1, null, B.EllipticCurveTypes_6, null);
    });
    _lazyFinal($, "Bip44Conf_tezos", "$get$Bip44Conf_tezos", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["prefix", B.C_XtzAddrPrefixes], type$.String, type$.dynamic), new A.Bip44Conf_tezos_closure(), B.ChainType_mainnet, 1729, B.CoinNames_Tezos, "0'/0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_theta", "$get$Bip44Conf_theta", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_theta_closure(), B.ChainType_mainnet, 500, B.CoinNames_a8f, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_tron", "$get$Bip44Conf_tron", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_tron_closure(), B.ChainType_mainnet, 195, B.CoinNames_Tron, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_tronTestnet", "$get$Bip44Conf_tronTestnet", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_tronTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Tron, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_vechain", "$get$Bip44Conf_vechain", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_vechain_closure(), B.ChainType_mainnet, 818, B.CoinNames_VeChain, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_verge", "$get$Bip44Conf_verge", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_30], type$.String, type$.dynamic), new A.Bip44Conf_verge_closure(), B.ChainType_mainnet, 77, B.CoinNames_Verge, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_158);
    });
    _lazyFinal($, "Bip44Conf_zcashMainNet", "$get$Bip44Conf_zcashMainNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_28_184], type$.String, type$.dynamic), new A.Bip44Conf_zcashMainNet_closure(), B.ChainType_mainnet, 133, B.CoinNames_Zcash, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip44Conf_zcashTestNet", "$get$Bip44Conf_zcashTestNet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_29_37], type$.String, type$.dynamic), new A.Bip44Conf_zcashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_2vZ, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_zilliqa", "$get$Bip44Conf_zilliqa", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_zilliqa_closure(), B.ChainType_mainnet, 313, B.CoinNames_Zilliqa, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_tonMainnet", "$get$Bip44Conf_tonMainnet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["workchain", 0], type$.String, type$.dynamic), new A.Bip44Conf_tonMainnet_closure(), B.ChainType_mainnet, 607, B.CoinNames_Gg4, "0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_tonTestnet", "$get$Bip44Conf_tonTestnet", () => {
      var t1 = $.$get$Bip44Conf_bip44BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["workchain", -1], type$.String, type$.dynamic), new A.Bip44Conf_tonTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Gg40, "0'", t1, null, B.EllipticCurveTypes_0, null);
    });
    _lazyFinal($, "Bip44Conf_electraProtocolMainNet", "$get$Bip44Conf_electraProtocolMainNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 136, 178, 30], true, t1), A.List_List$from([4, 136, 173, 228], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_55], type$.String, type$.dynamic), new A.Bip44Conf_electraProtocolMainNet_closure(), B.ChainType_mainnet, 597, B.CoinNames_JXy, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_162);
    });
    _lazyFinal($, "Bip44Conf_electraProtocolTestNet", "$get$Bip44Conf_electraProtocolTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 53, 135, 207], true, t1), A.List_List$from([4, 53, 131, 148], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_141], type$.String, type$.dynamic), new A.Bip44Conf_electraProtocolTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_Tbu, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip44Conf_suiSecp256k1", "$get$Bip44Conf_suiSecp256k1", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_suiSecp256k1_closure(), B.ChainType_mainnet, 784, B.CoinNames_Sui, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), A.Bip32KeyIndex_Bip32KeyIndex$hardenIndex(54), B.EllipticCurveTypes_6, null));
    _lazyFinal($, "Bip44Conf_suiSecp256r1", "$get$Bip44Conf_suiSecp256r1", () => {
      var t1 = A.Bip32KeyIndex_Bip32KeyIndex$hardenIndex(74);
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_suiSecp256r1_closure(), B.ChainType_mainnet, 784, B.CoinNames_Sui, "0'/0/0", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), t1, B.EllipticCurveTypes_5, null);
    });
    _lazyFinal($, "Bip44Conf_suiEd25519", "$get$Bip44Conf_suiEd25519", () => A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.dynamic), new A.Bip44Conf_suiEd25519_closure(), B.ChainType_mainnet, 784, B.CoinNames_Sui, "0'/0'/0'", $.$get$Bip44Conf_bip44BtcKeyNetVerMain(), null, B.EllipticCurveTypes_0, null));
    _lazyFinal($, "Bip49Coins__coinToConf", "$get$Bip49Coins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Bip49Coins_bitcoin, $.$get$Bip49Conf_bitcoinMainNet(), B.Bip49Coins_bitcoinTestnet, $.$get$Bip49Conf_bitcoinTestNet(), B.Bip49Coins_bitcoinCash, $.$get$Bip49Conf_bitcoinCashMainNet(), B.Bip49Coins_bitcoinCashTestnet, $.$get$Bip49Conf_bitcoinCashTestNet(), B.Bip49Coins_bitcoinCashSlp, $.$get$Bip49Conf_bitcoinCashSlpMainNet(), B.Bip49Coins_bitcoinCashSlpTestnet, $.$get$Bip49Conf_bitcoinCashSlpTestNet(), B.Bip49Coins_bitcoinSv, $.$get$Bip49Conf_bitcoinSvMainNet(), B.Bip49Coins_bitcoinSvTestnet, $.$get$Bip49Conf_bitcoinSvTestNet(), B.Bip49Coins_dash, $.$get$Bip49Conf_dashMainNet(), B.Bip49Coins_dashTestnet, $.$get$Bip49Conf_dashTestNet(), B.Bip49Coins_dogecoin, $.$get$Bip49Conf_dogecoinMainNet(), B.Bip49Coins_dogecoinTestnet, $.$get$Bip49Conf_dogecoinTestNet(), B.Bip49Coins_ecash, $.$get$Bip49Conf_ecashMainNet(), B.Bip49Coins_ecashTestnet, $.$get$Bip49Conf_ecashTestNet(), B.Bip49Coins_litecoin, $.$get$Bip49Conf_litecoinMainNet(), B.Bip49Coins_litecoinTestnet, $.$get$Bip49Conf_litecoinTestNet(), B.Bip49Coins_zcash, $.$get$Bip49Conf_zcashMainNet(), B.Bip49Coins_zcashTestnet, $.$get$Bip49Conf_zcashTestNet(), B.Bip49Coins_pepecoin, $.$get$Bip49Conf_pepeMainnet(), B.Bip49Coins_pepecoinTestnet, $.$get$Bip49Conf_pepeTestnet(), B.Bip49Coins_electraProtocol, $.$get$Bip49Conf_electraProtocolMainNet(), B.Bip49Coins_electraProtocolTestnet, $.$get$Bip49Conf_electraProtocolTestNet()], type$.Bip49Coins, type$.BipCoinConfig));
    _lazyFinal($, "Bip49Conf_bip49BtcKeyNetVerMain", "$get$Bip49Conf_bip49BtcKeyNetVerMain", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 157, 124, 178], true, t1), A.List_List$from([4, 157, 120, 120], true, t1));
    });
    _lazyFinal($, "Bip49Conf_bip49BtcKeyNetVerTest", "$get$Bip49Conf_bip49BtcKeyNetVerTest", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 74, 82, 98], true, t1), A.List_List$from([4, 74, 78, 40], true, t1));
    });
    _lazyFinal($, "Bip49Conf_dashMainNet", "$get$Bip49Conf_dashMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_16], type$.String, type$.dynamic), new A.Bip49Conf_dashMainNet_closure(), B.ChainType_mainnet, 5, B.CoinNames_Dash, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_204);
    });
    _lazyFinal($, "Bip49Conf_dashTestNet", "$get$Bip49Conf_dashTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_19], type$.String, type$.dynamic), new A.Bip49Conf_dashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_wNy, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_dogecoinMainNet", "$get$Bip49Conf_dogecoinMainNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([2, 250, 202, 253], true, t1), A.List_List$from([2, 250, 195, 152], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_22], type$.String, type$.dynamic), new A.Bip49Conf_dogecoinMainNet_closure(), B.ChainType_mainnet, 3, B.CoinNames_Dogecoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_158);
    });
    _lazyFinal($, "Bip49Conf_dogecoinTestNet", "$get$Bip49Conf_dogecoinTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 50, 169, 168], true, t1), A.List_List$from([4, 50, 162, 67], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], type$.String, type$.dynamic), new A.Bip49Conf_dogecoinTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_ZAX, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_241);
    });
    _lazyFinal($, "Bip49Conf_litecoinMainNet", "$get$Bip49Conf_litecoinMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain(),
        t2 = type$.int;
      t2 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([1, 178, 110, 246], true, t2), A.List_List$from([1, 178, 103, 146], true, t2));
      return A.BipLitecoinConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std_net_ver", B.List_50, "depr_net_ver", B.List_5], type$.String, type$.dynamic), new A.Bip49Conf_litecoinMainNet_closure(), t2, B.ChainType_mainnet, 2, B.CoinNames_Litecoin, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_176);
    });
    _lazyFinal($, "Bip49Conf_litecoinTestNet", "$get$Bip49Conf_litecoinTestNet", () => {
      var t1 = type$.int,
        t2 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 54, 246, 225], true, t1), A.List_List$from([4, 54, 239, 125], true, t1));
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 54, 246, 225], true, t1), A.List_List$from([4, 54, 239, 125], true, t1));
      return A.BipLitecoinConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std_net_ver", B.List_58, "depr_net_ver", B.List_196], type$.String, type$.dynamic), new A.Bip49Conf_litecoinTestNet_closure(), t1, B.ChainType_testnet, 1, B.CoinNames_cIT, "0'/0/0", t2, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_zcashMainNet", "$get$Bip49Conf_zcashMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_28_189], type$.String, type$.dynamic), new A.Bip49Conf_zcashMainNet_closure(), B.ChainType_mainnet, 133, B.CoinNames_Zcash, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_zcashTestNet", "$get$Bip49Conf_zcashTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_28_186], type$.String, type$.dynamic), new A.Bip49Conf_zcashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_2vZ, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_bitcoinMainNet", "$get$Bip49Conf_bitcoinMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_5], type$.String, type$.dynamic), new A.Bip49Conf_bitcoinMainNet_closure(), B.ChainType_mainnet, 0, B.CoinNames_Bitcoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_bitcoinTestNet", "$get$Bip49Conf_bitcoinTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], type$.String, type$.dynamic), new A.Bip49Conf_bitcoinTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_gL8, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_bitcoinSvMainNet", "$get$Bip49Conf_bitcoinSvMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_5], type$.String, type$.dynamic), new A.Bip49Conf_bitcoinSvMainNet_closure(), B.ChainType_mainnet, 236, B.CoinNames_BitcoinSV, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_bitcoinSvTestNet", "$get$Bip49Conf_bitcoinSvTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], type$.String, type$.dynamic), new A.Bip49Conf_bitcoinSvTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_CQb, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_bitcoinCashMainNet", "$get$Bip49Conf_bitcoinCashMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "bitcoincash"], t2, type$.nullable_Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_5], t2, type$.nullable_List_int)], t2, type$.dynamic), new A.Bip49Conf_bitcoinCashMainNet_closure(), B.ChainType_mainnet, 145, B.CoinNames_9E5, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_bitcoinCashTestNet", "$get$Bip49Conf_bitcoinCashTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "bchtest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], t2, type$.List_int)], t2, type$.dynamic), new A.Bip49Conf_bitcoinCashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_1vL, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_bitcoinCashSlpMainNet", "$get$Bip49Conf_bitcoinCashSlpMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "simpleledger"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_5], t2, type$.List_int)], t2, type$.dynamic), new A.Bip49Conf_bitcoinCashSlpMainNet_closure(), B.ChainType_mainnet, 145, B.CoinNames_R7N, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_bitcoinCashSlpTestNet", "$get$Bip49Conf_bitcoinCashSlpTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "slptest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], t2, type$.List_int)], t2, type$.dynamic), new A.Bip49Conf_bitcoinCashSlpTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_uYt, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_ecashMainNet", "$get$Bip49Conf_ecashMainNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerMain(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "ecash"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_5], t2, type$.List_int)], t2, type$.dynamic), new A.Bip49Conf_ecashMainNet_closure(), B.ChainType_mainnet, 145, B.CoinNames_eCash, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip49Conf_ecashTestNet", "$get$Bip49Conf_ecashTestNet", () => {
      var t1 = $.$get$Bip49Conf_bip49BtcKeyNetVerTest(),
        t2 = type$.String;
      return A.BipBitcoinCashConf$(A.LinkedHashMap_LinkedHashMap$_literal(["std", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_8, "hrp", "ectest"], t2, type$.Object), "legacy", A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], t2, type$.List_int)], t2, type$.dynamic), new A.Bip49Conf_ecashTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_A7Y, "0'/0/0", t1, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip49Conf_pepeMainnet", "$get$Bip49Conf_pepeMainnet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([2, 250, 202, 253], true, t1), A.List_List$from([2, 250, 195, 152], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_22], type$.String, type$.dynamic), new A.Bip49Conf_pepeMainnet_closure(), B.ChainType_mainnet, 3434, B.CoinNames_Pepecoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_158);
    });
    _lazyFinal($, "Bip49Conf_pepeTestnet", "$get$Bip49Conf_pepeTestnet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 50, 169, 168], true, t1), A.List_List$from([4, 50, 162, 67], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_196], type$.String, type$.dynamic), new A.Bip49Conf_pepeTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_Nk6, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_241);
    });
    _lazyFinal($, "Bip49Conf_electraProtocolMainNet", "$get$Bip49Conf_electraProtocolMainNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 136, 178, 30], true, t1), A.List_List$from([4, 136, 173, 228], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_137], type$.String, type$.dynamic), new A.Bip49Conf_electraProtocolMainNet_closure(), B.ChainType_mainnet, 597, B.CoinNames_JXy, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_162);
    });
    _lazyFinal($, "Bip49Conf_electraProtocolTestNet", "$get$Bip49Conf_electraProtocolTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 53, 135, 207], true, t1), A.List_List$from([4, 53, 131, 148], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_ver", B.List_19], type$.String, type$.dynamic), new A.Bip49Conf_electraProtocolTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_Tbu, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip84Coins__coinToConf", "$get$Bip84Coins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Bip84Coins_bitcoin, $.$get$Bip84Conf_bitcoinMainNet(), B.Bip84Coins_bitcoinTestnet, $.$get$Bip84Conf_bitcoinTestNet(), B.Bip84Coins_litecoin, $.$get$Bip84Conf_litecoinMainNet(), B.Bip84Coins_litecoinTestnet, $.$get$Bip84Conf_litecoinTestNet(), B.Bip84Coins_electraProtocol, $.$get$Bip84Conf_electraProtocolMainNet(), B.Bip84Coins_electraProtocolTestnet, $.$get$Bip84Conf_electraProtocolTestNet()], type$.Bip84Coins, type$.BipCoinConfig));
    _lazyFinal($, "Bip84Conf_bip84BtcKeyNetVer", "$get$Bip84Conf_bip84BtcKeyNetVer", () => {
      var t1 = type$.int;
      return A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 178, 71, 70], true, t1), A.List_List$from([4, 178, 67, 12], true, t1));
    });
    _lazyFinal($, "Bip84Conf_bitcoinMainNet", "$get$Bip84Conf_bitcoinMainNet", () => {
      var t1 = $.$get$Bip84Conf_bip84BtcKeyNetVer();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "bc"], type$.String, type$.dynamic), new A.Bip84Conf_bitcoinMainNet_closure(), B.ChainType_mainnet, 0, B.CoinNames_Bitcoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazyFinal($, "Bip84Conf_bitcoinTestNet", "$get$Bip84Conf_bitcoinTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 95, 28, 246], true, t1), A.List_List$from([4, 95, 24, 188], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "tb"], type$.String, type$.dynamic), new A.Bip84Conf_bitcoinTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_gL8, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip84Conf_litecoinMainNet", "$get$Bip84Conf_litecoinMainNet", () => {
      var t1 = $.$get$Bip84Conf_bip84BtcKeyNetVer();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "ltc"], type$.String, type$.dynamic), new A.Bip84Conf_litecoinMainNet_closure(), B.ChainType_mainnet, 2, B.CoinNames_Litecoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_176);
    });
    _lazyFinal($, "Bip84Conf_litecoinTestNet", "$get$Bip84Conf_litecoinTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 54, 246, 225], true, t1), A.List_List$from([4, 54, 239, 125], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "tltc"], type$.String, type$.dynamic), new A.Bip84Conf_litecoinTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_cIT, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip84Conf_electraProtocolMainNet", "$get$Bip84Conf_electraProtocolMainNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 136, 178, 30], true, t1), A.List_List$from([4, 136, 173, 228], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "ep"], type$.String, type$.dynamic), new A.Bip84Conf_electraProtocolMainNet_closure(), B.ChainType_mainnet, 597, B.CoinNames_JXy, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_162);
    });
    _lazyFinal($, "Bip84Conf_electraProtocolTestNet", "$get$Bip84Conf_electraProtocolTestNet", () => {
      var t1 = type$.int;
      t1 = A.Bip32KeyNetVersions_Bip32KeyNetVersions(A.List_List$from([4, 53, 135, 207], true, t1), A.List_List$from([4, 53, 131, 148], true, t1));
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "ep"], type$.String, type$.dynamic), new A.Bip84Conf_electraProtocolTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_Tbu, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Bip86Coins__coinToConf", "$get$Bip86Coins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Bip86Coins_bitcoin, $.$get$Bip86Conf_bitcoinMainNet(), B.Bip86Coins_bitcoinTestnet, $.$get$Bip86Conf_bitcoinTestNet()], type$.Bip86Coins, type$.BipCoinConfig));
    _lazyFinal($, "Bip86Conf_bip86BtcKeyNetVer", "$get$Bip86Conf_bip86BtcKeyNetVer", () => $.$get$Bip32Const_mainNetKeyNetVersions());
    _lazyFinal($, "Bip86Conf_bip86BtcKeyNetVerTest", "$get$Bip86Conf_bip86BtcKeyNetVerTest", () => $.$get$Bip32Const_testNetKeyNetVersions());
    _lazy($, "Bip86Conf_bitcoinMainNet", "$get$Bip86Conf_bitcoinMainNet", () => {
      var t1 = $.$get$Bip86Conf_bip86BtcKeyNetVer();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "bc"], type$.String, type$.dynamic), new A.Bip86Conf_bitcoinMainNet_closure(), B.ChainType_mainnet, 0, B.CoinNames_Bitcoin, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_128);
    });
    _lazy($, "Bip86Conf_bitcoinTestNet", "$get$Bip86Conf_bitcoinTestNet", () => {
      var t1 = $.$get$Bip86Conf_bip86BtcKeyNetVerTest();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["hrp", "tb"], type$.String, type$.dynamic), new A.Bip86Conf_bitcoinTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_gL8, "0'/0/0", t1, null, B.EllipticCurveTypes_6, B.List_239);
    });
    _lazyFinal($, "Cip1852Coins__coinToConf", "$get$Cip1852Coins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.Cip1852Coins_cardanoIcarus, $.$get$Cip1852Conf_cardanoIcarusMainNet(), B.Cip1852Coins_cardanoLedger, $.$get$Cip1852Conf_cardanoLedgerMainNet(), B.Cip1852Coins_cardanoIcarusTestnet, $.$get$Cip1852Conf_cardanoIcarusTestNet(), B.Cip1852Coins_cardanoLedgerTestnet, $.$get$Cip1852Conf_cardanoLedgerTestNet()], type$.Cip1852Coins, type$.BipCoinConfig));
    _lazyFinal($, "Cip1852Conf_cardanoIcarusMainNet", "$get$Cip1852Conf_cardanoIcarusMainNet", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_tag", B.ADANetwork_mainnet, "is_icarus", true], type$.String, type$.dynamic), new A.Cip1852Conf_cardanoIcarusMainNet_closure(), B.ChainType_mainnet, 1815, B.CoinNames_Cardano, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "Cip1852Conf_cardanoIcarusTestNet", "$get$Cip1852Conf_cardanoIcarusTestNet", () => {
      var t1 = $.$get$Bip32Const_testNetKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_tag", B.ADANetwork_testnetPreview, "is_icarus", true], type$.String, type$.dynamic), new A.Cip1852Conf_cardanoIcarusTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_Hic, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "Cip1852Conf_cardanoLedgerMainNet", "$get$Cip1852Conf_cardanoLedgerMainNet", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_tag", B.ADANetwork_mainnet], type$.String, type$.dynamic), new A.Cip1852Conf_cardanoLedgerMainNet_closure(), B.ChainType_mainnet, 1815, B.CoinNames_Cardano, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "Cip1852Conf_cardanoLedgerTestNet", "$get$Cip1852Conf_cardanoLedgerTestNet", () => {
      var t1 = $.$get$Bip32Const_testNetKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["net_tag", B.ADANetwork_testnetPreview], type$.String, type$.dynamic), new A.Cip1852Conf_cardanoLedgerTestNet_closure(), B.ChainType_testnet, 1, B.CoinNames_Hic, "0'/0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "MoneroCoins__coinToConf", "$get$MoneroCoins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.MoneroCoins_moneroMainnet, $.$get$MoneroConf_mainNet(), B.MoneroCoins_moneroStagenet, $.$get$MoneroConf_stageNet(), B.MoneroCoins_moneroTestnet, $.$get$MoneroConf_testNet()], type$.MoneroCoins, A.findType("MoneroCoinConf")));
    _lazyFinal($, "MoneroConf_mainNet", "$get$MoneroConf_mainNet", () => A.MoneroCoinConf_MoneroCoinConf$fromCoinConf(B.ChainType_mainnet, B.CoinConf_Z8a));
    _lazyFinal($, "MoneroConf_stageNet", "$get$MoneroConf_stageNet", () => A.MoneroCoinConf_MoneroCoinConf$fromCoinConf(B.ChainType_testnet, B.CoinConf_yod));
    _lazyFinal($, "MoneroConf_testNet", "$get$MoneroConf_testNet", () => A.MoneroCoinConf_MoneroCoinConf$fromCoinConf(B.ChainType_testnet, B.CoinConf_sCL));
    _lazyFinal($, "SubstrateCoins__coinToConf", "$get$SubstrateCoins__coinToConf", () => A.LinkedHashMap_LinkedHashMap$_literal([B.SubstrateCoins_acalaEd25519, $.$get$SubstrateConf_acalaEd25519(), B.SubstrateCoins_acalaSecp256k1, $.$get$SubstrateConf_acalaSecp256k1(), B.SubstrateCoins_acalaSr25519, $.$get$SubstrateConf_acalaSr25519(), B.SubstrateCoins_bifrostEd25519, $.$get$SubstrateConf_bifrostEd25519(), B.SubstrateCoins_bifrostSecp256k1, $.$get$SubstrateConf_bifrostSecp256k1(), B.SubstrateCoins_bifrostSr25519, $.$get$SubstrateConf_bifrostSr25519(), B.SubstrateCoins_chainxEd25519, $.$get$SubstrateConf_chainXEd25519(), B.SubstrateCoins_chainxSecp256k1, $.$get$SubstrateConf_chainXSecp256k1(), B.SubstrateCoins_chainxSr25519, $.$get$SubstrateConf_chainXSr25519(), B.SubstrateCoins_edgewareEd25519, $.$get$SubstrateConf_edgewareEd25519(), B.SubstrateCoins_edgewareSecp256k1, $.$get$SubstrateConf_edgewareSecp256k1(), B.SubstrateCoins_edgewareSr25519, $.$get$SubstrateConf_edgewareSr25519(), B.SubstrateCoins_genericEd25519, $.$get$SubstrateConf_genericEd25519(), B.SubstrateCoins_genericSecp256k1, $.$get$SubstrateConf_genericSecp256k1(), B.SubstrateCoins_genericSr25519, $.$get$SubstrateConf_genericSr25519(), B.SubstrateCoins_karuraEd25519, $.$get$SubstrateConf_karuraEd25519(), B.SubstrateCoins_karuraSecp256k1, $.$get$SubstrateConf_karuraSecp256k1(), B.SubstrateCoins_karuraSr25519, $.$get$SubstrateConf_karuraSr25519(), B.SubstrateCoins_kusamaEd25519, $.$get$SubstrateConf_kusamaEd25519(), B.SubstrateCoins_kusamaSecp256k1, $.$get$SubstrateConf_kusamaSecp256k1(), B.SubstrateCoins_kusamaSr25519, $.$get$SubstrateConf_kusamaSr25519(), B.SubstrateCoins_moonbeamEd25519, $.$get$SubstrateConf_moonbeamEd25519(), B.SubstrateCoins_moonbeamSecp256k1, $.$get$SubstrateConf_moonbeamSecp256k1(), B.SubstrateCoins_moonbeamSr25519, $.$get$SubstrateConf_moonbeamSr25519(), B.SubstrateCoins_moonriverEd25519, $.$get$SubstrateConf_moonriverEd25519(), B.SubstrateCoins_moonriverSecp256k1, $.$get$SubstrateConf_moonriverSecp256k1(), B.SubstrateCoins_moonriverSr25519, $.$get$SubstrateConf_moonriverSr25519(), B.SubstrateCoins_phalaEd25519, $.$get$SubstrateConf_phalaEd25519(), B.SubstrateCoins_phalaSecp256k1, $.$get$SubstrateConf_phalaSecp256k1(), B.SubstrateCoins_phalaSr25519, $.$get$SubstrateConf_phalaSr25519(), B.SubstrateCoins_plasmEd25519, $.$get$SubstrateConf_plasmEd25519(), B.SubstrateCoins_plasmSecp256k1, $.$get$SubstrateConf_plasmSecp256k1(), B.SubstrateCoins_plasmSr25519, $.$get$SubstrateConf_plasmSr25519(), B.SubstrateCoins_polkadotEd25519, $.$get$SubstrateConf_polkadotEd25519(), B.SubstrateCoins_polkadotSecp256k1, $.$get$SubstrateConf_polkadotSecp256k1(), B.SubstrateCoins_polkadotSr25519, $.$get$SubstrateConf_polkadotSr25519(), B.SubstrateCoins_soraEd25519, $.$get$SubstrateConf_soraEd25519(), B.SubstrateCoins_soraSecp256k1, $.$get$SubstrateConf_soraSecp256k1(), B.SubstrateCoins_soraSr25519, $.$get$SubstrateConf_soraSr25519(), B.SubstrateCoins_stafiEd25519, $.$get$SubstrateConf_stafiEd25519(), B.SubstrateCoins_stafiSecp256k1, $.$get$SubstrateConf_stafiSecp256k1(), B.SubstrateCoins_stafiSr25519, $.$get$SubstrateConf_stafiSr25519()], type$.SubstrateCoins, A.findType("SubstrateCoinConf")));
    _lazyFinal($, "SubstrateConf_acalaEd25519", "$get$SubstrateConf_acalaEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_acalaEd25519_closure(), B.ChainType_mainnet, B.CoinConf_rMV, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_acalaSecp256k1", "$get$SubstrateConf_acalaSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_acalaSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_rMV, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_acalaSr25519", "$get$SubstrateConf_acalaSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_acalaSr25519_closure(), B.ChainType_mainnet, B.CoinConf_rMV, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_bifrostEd25519", "$get$SubstrateConf_bifrostEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_bifrostEd25519_closure(), B.ChainType_mainnet, B.CoinConf_fWq, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_bifrostSecp256k1", "$get$SubstrateConf_bifrostSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_bifrostSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_fWq, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_bifrostSr25519", "$get$SubstrateConf_bifrostSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_bifrostSr25519_closure(), B.ChainType_mainnet, B.CoinConf_fWq, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_chainXEd25519", "$get$SubstrateConf_chainXEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_chainXEd25519_closure(), B.ChainType_mainnet, B.CoinConf_dz7, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_chainXSecp256k1", "$get$SubstrateConf_chainXSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_chainXSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_dz7, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_chainXSr25519", "$get$SubstrateConf_chainXSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_chainXSr25519_closure(), B.ChainType_mainnet, B.CoinConf_dz7, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_edgewareEd25519", "$get$SubstrateConf_edgewareEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_edgewareEd25519_closure(), B.ChainType_mainnet, B.CoinConf_d50, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_edgewareSecp256k1", "$get$SubstrateConf_edgewareSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_edgewareSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_d50, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_edgewareSr25519", "$get$SubstrateConf_edgewareSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_edgewareSr25519_closure(), B.ChainType_mainnet, B.CoinConf_d50, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_genericEd25519", "$get$SubstrateConf_genericEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_genericEd25519_closure(), B.ChainType_mainnet, B.CoinConf_2Q3, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_genericSecp256k1", "$get$SubstrateConf_genericSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_genericSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_2Q3, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_genericSr25519", "$get$SubstrateConf_genericSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_genericSr25519_closure(), B.ChainType_mainnet, B.CoinConf_2Q3, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_karuraEd25519", "$get$SubstrateConf_karuraEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_karuraEd25519_closure(), B.ChainType_mainnet, B.CoinConf_jfr, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_karuraSecp256k1", "$get$SubstrateConf_karuraSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_karuraSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_jfr, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_karuraSr25519", "$get$SubstrateConf_karuraSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_karuraSr25519_closure(), B.ChainType_mainnet, B.CoinConf_jfr, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_kusamaEd25519", "$get$SubstrateConf_kusamaEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_kusamaEd25519_closure(), B.ChainType_mainnet, B.CoinConf_y1J, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_kusamaSecp256k1", "$get$SubstrateConf_kusamaSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_kusamaSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_y1J, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_kusamaSr25519", "$get$SubstrateConf_kusamaSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_kusamaSr25519_closure(), B.ChainType_mainnet, B.CoinConf_y1J, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_moonbeamEd25519", "$get$SubstrateConf_moonbeamEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonbeamEd25519_closure(), B.ChainType_mainnet, B.CoinConf_NFA, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_moonbeamSecp256k1", "$get$SubstrateConf_moonbeamSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonbeamSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_NFA, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_moonbeamSr25519", "$get$SubstrateConf_moonbeamSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonbeamSr25519_closure(), B.ChainType_mainnet, B.CoinConf_NFA, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_moonriverEd25519", "$get$SubstrateConf_moonriverEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonriverEd25519_closure(), B.ChainType_mainnet, B.CoinConf_nB3, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_moonriverSecp256k1", "$get$SubstrateConf_moonriverSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonriverSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_nB3, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_moonriverSr25519", "$get$SubstrateConf_moonriverSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_moonriverSr25519_closure(), B.ChainType_mainnet, B.CoinConf_nB3, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_phalaEd25519", "$get$SubstrateConf_phalaEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_phalaEd25519_closure(), B.ChainType_mainnet, B.CoinConf_htN, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_phalaSecp256k1", "$get$SubstrateConf_phalaSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_phalaSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_htN, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_phalaSr25519", "$get$SubstrateConf_phalaSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_phalaSr25519_closure(), B.ChainType_mainnet, B.CoinConf_htN, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_plasmEd25519", "$get$SubstrateConf_plasmEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_plasmEd25519_closure(), B.ChainType_mainnet, B.CoinConf_9rY, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_plasmSecp256k1", "$get$SubstrateConf_plasmSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_plasmSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_9rY, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_plasmSr25519", "$get$SubstrateConf_plasmSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_plasmSr25519_closure(), B.ChainType_mainnet, B.CoinConf_9rY, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_polkadotEd25519", "$get$SubstrateConf_polkadotEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_polkadotEd25519_closure(), B.ChainType_mainnet, B.CoinConf_rfh, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_polkadotSecp256k1", "$get$SubstrateConf_polkadotSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_polkadotSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_rfh, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_polkadotSr25519", "$get$SubstrateConf_polkadotSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_polkadotSr25519_closure(), B.ChainType_mainnet, B.CoinConf_rfh, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_soraEd25519", "$get$SubstrateConf_soraEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_soraEd25519_closure(), B.ChainType_mainnet, B.CoinConf_cB1, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_soraSecp256k1", "$get$SubstrateConf_soraSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_soraSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_cB1, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_soraSr25519", "$get$SubstrateConf_soraSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_soraSr25519_closure(), B.ChainType_mainnet, B.CoinConf_cB1, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateConf_stafiEd25519", "$get$SubstrateConf_stafiEd25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_stafiEd25519_closure(), B.ChainType_mainnet, B.CoinConf_1rN, B.EllipticCurveTypes_0));
    _lazyFinal($, "SubstrateConf_stafiSecp256k1", "$get$SubstrateConf_stafiSecp256k1", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_stafiSecp256k1_closure(), B.ChainType_mainnet, B.CoinConf_1rN, B.EllipticCurveTypes_6));
    _lazyFinal($, "SubstrateConf_stafiSr25519", "$get$SubstrateConf_stafiSr25519", () => A.SubstrateCoinConf_SubstrateCoinConf$fromCoinConf(new A.SubstrateConf_stafiSr25519_closure(), B.ChainType_mainnet, B.CoinConf_1rN, B.EllipticCurveTypes_7));
    _lazyFinal($, "SubstrateScaleCUintEncoderConst_singleByteModeMaxVal", "$get$SubstrateScaleCUintEncoderConst_singleByteModeMaxVal", () => {
      var t1 = $.$get$_BigIntImpl_one();
      return t1.$shl(0, 6).$sub(0, t1);
    });
    _lazyFinal($, "SubstrateScaleCUintEncoderConst_twoByteModeMaxVal", "$get$SubstrateScaleCUintEncoderConst_twoByteModeMaxVal", () => {
      var t1 = $.$get$_BigIntImpl_one();
      return t1.$shl(0, 14).$sub(0, t1);
    });
    _lazyFinal($, "SubstrateScaleCUintEncoderConst_fourByteModeMaxVal", "$get$SubstrateScaleCUintEncoderConst_fourByteModeMaxVal", () => {
      var t1 = $.$get$_BigIntImpl_one();
      return t1.$shl(0, 30).$sub(0, t1);
    });
    _lazyFinal($, "SubstrateScaleCUintEncoderConst_bigIntegerModeMaxVal", "$get$SubstrateScaleCUintEncoderConst_bigIntegerModeMaxVal", () => {
      var t1 = $.$get$_BigIntImpl_one();
      return t1.$shl(0, 536).$sub(0, t1);
    });
    _lazyFinal($, "AES__lib", "$get$AES__lib", () => $.$get$AESLib__aes());
    _lazyFinal($, "AESLib__aes", "$get$AESLib__aes", () => {
      var t1 = type$.int;
      t1 = new A.AESLib(A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1), A.List_List$filled(256, 0, false, t1));
      t1.initialize$0();
      return t1;
    });
    _lazyFinal($, "Curves_curveEd25519", "$get$Curves_curveEd25519", () => {
      var t1 = A._BigIntImpl_parse("57896044618658097711785492504343953926634992332820282019728792003956564819949", null),
        t2 = A._BigIntImpl__BigIntImpl$from(-1),
        t3 = A._BigIntImpl_parse("37095705934669439343138083508754565189542113879843219016388785533085940283555", null),
        t4 = A._BigIntImpl__BigIntImpl$from(8);
      A._BigIntImpl_parse(string$.x3723700, null);
      return new A.CurveED(t1, t2, t3, t4);
    });
    _lazyFinal($, "Curves_generatorED25519", "$get$Curves_generatorED25519", () => {
      var _null = null,
        t1 = $.$get$Curves_curveEd25519(),
        t2 = A._BigIntImpl_parse("15112221349535400772501151409588531511454012693041857206046113283949847762202", _null),
        t3 = A._BigIntImpl_parse("46316835694926478169428394003475163141307993866256225615783033603165251855960", _null),
        t4 = $.$get$_BigIntImpl_one(),
        t5 = A._BigIntImpl_parse("46827403850823179245072216630277197565144205554125654976674165829533817101731", _null);
      return A.EDPoint$(t1, true, A._BigIntImpl_parse(string$.x3723700, _null), t5, t2, t3, t4);
    });
    _lazyFinal($, "Curves_curveSecp256k1", "$get$Curves_curveSecp256k1", () => {
      var t1 = A._BigIntImpl_parse("115792089237316195423570985008687907853269984665640564039457584007908834671663", null);
      return A.CurveFp$($.$get$_BigIntImpl_zero(), A._BigIntImpl__BigIntImpl$from(7), $.$get$_BigIntImpl_one(), t1);
    });
    _lazyFinal($, "Curves_generatorSecp256k1", "$get$Curves_generatorSecp256k1", () => {
      var t1 = $.$get$Curves_curveSecp256k1(),
        t2 = A._BigIntImpl_parse("79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798", 16),
        t3 = A._BigIntImpl_parse("483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8", 16),
        t4 = $.$get$_BigIntImpl_one();
      return A.ProjectiveECCPoint_ProjectiveECCPoint(t1, true, A._BigIntImpl_parse("115792089237316195423570985008687907852837564279074904382605163141518161494337", null), t2, t3, t4);
    });
    _lazyFinal($, "Curves_curve256", "$get$Curves_curve256", () => {
      var t1 = A._BigIntImpl_parse("115792089210356248762697446949407573530086143415290314195533631308867097853951", null);
      return A.CurveFp$(A._BigIntImpl__BigIntImpl$from(-3), A._BigIntImpl_parse("5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B", 16), $.$get$_BigIntImpl_one(), t1);
    });
    _lazyFinal($, "Curves_generator256", "$get$Curves_generator256", () => {
      var t1 = $.$get$Curves_curve256(),
        t2 = A._BigIntImpl_parse("6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296", 16),
        t3 = A._BigIntImpl_parse("4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5", 16),
        t4 = $.$get$_BigIntImpl_one();
      return A.ProjectiveECCPoint_ProjectiveECCPoint(t1, true, A._BigIntImpl_parse("115792089210356248762697446949407573529996955224135760342422259061068512044369", null), t2, t3, t4);
    });
    _lazyFinal($, "RistrettoUtils_sqrtM1", "$get$RistrettoUtils_sqrtM1", () => A._BigIntImpl_parse("19681161376707505956807079304988542015446066515923890162744021073123829784752", null));
    _lazyFinal($, "_iv", "$get$_iv", () => A.List_List$unmodifiable(B.List_j2A, type$.int));
    _lazyFinal($, "_hi", "$get$_hi", () => A.List_List$unmodifiable(B.List_yCw, type$.int));
    _lazyFinal($, "_lo", "$get$_lo", () => A.List_List$unmodifiable(B.List_sWD, type$.int));
    _lazyFinal($, "MD5__t", "$get$MD5__t", () => {
      var i, i0,
        _list = J.JSArray_JSArray$allocateGrowable(64, type$.int);
      for (i = 0; i < 64; i = i0) {
        i0 = i + 1;
        _list[i] = B.JSNumber_methods.toInt$0(Math.abs(Math.sin(i0) * 4294967296));
      }
      return _list;
    });
    _lazyFinal($, "QuickCrypto_prng", "$get$QuickCrypto_prng", () => {
      var k, t4, out,
        t1 = type$.int,
        t2 = A.List_List$filled(16, 0, false, t1),
        t3 = A.List_List$filled(16, 0, false, t1);
      t2 = new A.FortunaPRNG(t2, t3);
      k = new A.SHAKE256(A.List_List$filled(25, 0, false, t1), A.List_List$filled(25, 0, false, t1), A.List_List$filled(200, 0, false, t1));
      k._Keccack$1(64);
      t4 = A._setArrayType([], type$.JSArray_int);
      k.update$1(t4);
      k.update$1(A.FortunaPRNG__generateSeed(32));
      t4 = t2.get$_key();
      out = A.List_List$filled(32, 0, false, t1);
      type$.List_int._as(out);
      if (!k._hash$_finished)
        k._padAndPermute$1(31);
      k._squeeze$1(out);
      B.JSArray_methods.setAll$2(t4, 0, out);
      k.reset$0();
      t2._generateBlocks$2(t3, 1);
      return t2;
    });
    _lazy($, "QuickCrypto__generateRandom", "$get$QuickCrypto__generateRandom", () => new A.QuickCrypto__generateRandom_closure());
    _lazyFinal($, "CompactBytes__lengthCodec", "$get$CompactBytes__lengthCodec", () => A.CompactIntLayout$(A.IntegerLayout$(6, B.C_Endian0, null, false), null));
    _lazyFinal($, "_Ss58Const_checksumPrefix", "$get$_Ss58Const_checksumPrefix", () => A.List_List$unmodifiable(A._setArrayType([83, 83, 53, 56, 80, 82, 69], type$.JSArray_int), type$.int));
    _lazyFinal($, "maxU64", "$get$maxU64", () => A._BigIntImpl_parse("18446744073709551615", null));
    _lazyFinal($, "maxU128", "$get$maxU128", () => A._BigIntImpl_parse("340282366920938463463374607431768211455", null));
    _lazyFinal($, "maxU256", "$get$maxU256", () => A._BigIntImpl_parse("115792089237316195423570985008687907853269984665640564039457584007913129639935", null));
    _lazyFinal($, "minInt64", "$get$minInt64", () => A._BigIntImpl_parse("-9223372036854775808", null));
    _lazyFinal($, "maxInt64", "$get$maxInt64", () => A._BigIntImpl_parse("9223372036854775807", null));
    _lazyFinal($, "BigRational_ten", "$get$BigRational_ten", () => {
      var t1 = A._BigIntImpl__BigIntImpl$from(10);
      return A.BigRational_BigRational(t1, A._BigIntImpl__BigIntImpl$from(1));
    });
    _lazyFinal($, "BigRational__one", "$get$BigRational__one", () => $.$get$_BigIntImpl_one());
    _lazyFinal($, "BigRational__zero", "$get$BigRational__zero", () => $.$get$_BigIntImpl_zero());
    _lazyFinal($, "BigRational__ten", "$get$BigRational__ten", () => A._BigIntImpl__BigIntImpl$from(10));
    _lazyFinal($, "StringUtils__hexBytesRegex", "$get$StringUtils__hexBytesRegex", () => A.RegExp_RegExp("^(0x|0X)?([0-9A-Fa-f]{2})+$", true));
    _lazyFinal($, "StringUtils__hexaDecimalRegex", "$get$StringUtils__hexaDecimalRegex", () => A.RegExp_RegExp("^(0x|0X)?[0-9A-Fa-f]+$", true));
    _lazyFinal($, "ProtocolBufferEncoder__maxInt64", "$get$ProtocolBufferEncoder__maxInt64", () => A._BigIntImpl_parse("7FFFFFFFFFFFFFFF", 16));
    _lazyFinal($, "ProtocolBufferEncoder__minInt64", "$get$ProtocolBufferEncoder__minInt64", () => A._BigIntImpl_parse("8000000000000000", 16));
    _lazyFinal($, "BaseRequest__tokenRE", "$get$BaseRequest__tokenRE", () => A.RegExp_RegExp("^[\\w!#%&'*+\\-.^`|~]+$", true));
    _lazyFinal($, "_escapedChar", "$get$_escapedChar", () => A.RegExp_RegExp('["\\x00-\\x1F\\x7F]', true));
    _lazyFinal($, "token", "$get$token", () => A.RegExp_RegExp('[^()<>@,;:"\\\\/[\\]?={} \\t\\x00-\\x1F\\x7F]+', true));
    _lazyFinal($, "_lws", "$get$_lws", () => A.RegExp_RegExp("(?:\\r\\n)?[ \\t]+", true));
    _lazyFinal($, "_quotedString", "$get$_quotedString", () => A.RegExp_RegExp('"(?:[^"\\x00-\\x1F\\x7F\\\\]|\\\\.)*"', true));
    _lazyFinal($, "_quotedPair", "$get$_quotedPair", () => A.RegExp_RegExp("\\\\(.)", true));
    _lazyFinal($, "nonToken", "$get$nonToken", () => A.RegExp_RegExp('[()<>@,;:"\\\\/\\[\\]?={} \\t\\x00-\\x1F\\x7F]', true));
    _lazyFinal($, "whitespace", "$get$whitespace", () => A.RegExp_RegExp("(?:" + $.$get$_lws().pattern + ")*", true));
    _lazyFinal($, "_EIP712Utils_arrayRegex", "$get$_EIP712Utils_arrayRegex", () => A.RegExp_RegExp("^(.*)\\[([0-9]*?)]$", true));
    _lazyFinal($, "ProtocolBufferEncoder__maxInt640", "$get$ProtocolBufferEncoder__maxInt640", () => A._BigIntImpl_parse("7FFFFFFFFFFFFFFF", 16));
    _lazyFinal($, "ProtocolBufferEncoder__minInt640", "$get$ProtocolBufferEncoder__minInt640", () => A._BigIntImpl_parse("8000000000000000", 16));
    _lazy($, "RetionalConst_bigR8", "$get$RetionalConst_bigR8", () => A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(8), null));
    _lazy($, "RetionalConst_bigR18", "$get$RetionalConst_bigR18", () => A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(18), null));
    _lazy($, "RetionalConst_bigR6", "$get$RetionalConst_bigR6", () => A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(6), null));
    _lazy($, "RetionalConst_bigR12", "$get$RetionalConst_bigR12", () => A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(12), null));
    _lazy($, "RetionalConst_bigR10", "$get$RetionalConst_bigR10", () => A.BigRational_BigRational(A._BigIntImpl__BigIntImpl$from(10).pow$1(10), null));
    _lazy($, "ApiProviderExceptionConst_connectionClosed", "$get$ApiProviderExceptionConst_connectionClosed", () => A.ApiProviderException$_(null, "http_connection_closed", null, null));
    _lazyFinal($, "HTTPCaller__clientManager", "$get$HTTPCaller__clientManager", () => new A.HttpClientManager(A.LinkedHashMap_LinkedHashMap$_empty(type$.String, A.findType("_CachedClientImpl<ProviderAuthenticated?>"))));
    _lazyFinal($, "HttpImpl__serviceCaller", "$get$HttpImpl__serviceCaller", () => $.$get$HTTPServiceWorker_instance());
    _lazyFinal($, "HTTPServiceWorker_instance", "$get$HTTPServiceWorker_instance", () => new A.WebHTTPServiceWorker(new A._WorkerConnector(new A.SynchronizedLock(), A.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$._WorkerConnection)), new A.ServicesHTTPCaller()));
    _lazyFinal($, "_WorkerConnection_isExtention", "$get$_WorkerConnection_isExtention", () => A.isExtension());
    _lazyFinal($, "CustomCoins_byronLegacy", "$get$CustomCoins_byronLegacy", () => A.CustomCoins$_("Byron legacy", $.$get$CustomCurrencyConf_byronLegacy()));
    _lazyFinal($, "CustomCoins_byronLegacyTestnet", "$get$CustomCoins_byronLegacyTestnet", () => A.CustomCoins$_("Byron legacy testnet", $.$get$CustomCurrencyConf_byronLegacyTestnet()));
    _lazyFinal($, "CustomCoins_values", "$get$CustomCoins_values", () => A._setArrayType([$.$get$CustomCoins_byronLegacy(), $.$get$CustomCoins_byronLegacyTestnet()], A.findType("JSArray<CustomCoins>")));
    _lazy($, "CustomCurrencyConf_byronLegacy", "$get$CustomCurrencyConf_byronLegacy", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true], type$.String, type$.dynamic), new A.CustomCurrencyConf_byronLegacy_closure(), B.ChainType_mainnet, 0, B.CoinNames_6lR, "0/0", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazy($, "CustomCurrencyConf_byronLegacyTestnet", "$get$CustomCurrencyConf_byronLegacyTestnet", () => {
      var t1 = $.$get$Bip32Const_kholawKeyNetVersions();
      return A.BipCoinConfig$(A.LinkedHashMap_LinkedHashMap$_literal(["chain_code", true], type$.String, type$.dynamic), new A.CustomCurrencyConf_byronLegacyTestnet_closure(), B.ChainType_testnet, 1, B.CoinNames_GqI, "", t1, null, B.EllipticCurveTypes_2, null);
    });
    _lazyFinal($, "CosmosConst_avarageGasPrice", "$get$CosmosConst_avarageGasPrice", () => A.BigRational_BigRational$parseDecimal("0.025"));
    _lazyFinal($, "context", "$get$context", () => new A.Context($.$get$Style_platform(), null));
    _lazyFinal($, "Style_posix", "$get$Style_posix", () => new A.PosixStyle(A.RegExp_RegExp("/", true), A.RegExp_RegExp("[^/]$", true), A.RegExp_RegExp("^/", true)));
    _lazyFinal($, "Style_windows", "$get$Style_windows", () => new A.WindowsStyle(A.RegExp_RegExp("[/\\\\]", true), A.RegExp_RegExp("[^/\\\\]$", true), A.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])", true), A.RegExp_RegExp("^[/\\\\](?![/\\\\])", true)));
    _lazyFinal($, "Style_url", "$get$Style_url", () => new A.UrlStyle(A.RegExp_RegExp("/", true), A.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$", true), A.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*", true), A.RegExp_RegExp("^/", true)));
    _lazyFinal($, "Style_platform", "$get$Style_platform", () => A.Style__getPlatformStyle());
    _lazyFinal($, "TonAddress__decoder", "$get$TonAddress__decoder", () => new A.TonAddrDecoder());
    _lazyFinal($, "_BitBuilderUtils_mask8Big", "$get$_BitBuilderUtils_mask8Big", () => A._BigIntImpl__BigIntImpl$from(255));
    _lazy($, "SimpleLibraryCodecs_codec", "$get$SimpleLibraryCodecs_codec", () => new A.DictionaryValue(new A.SimpleLibraryCodecs_codec_closure(), A.findType("DictionaryValue<SimpleLibrary>")));
    _lazyFinal($, "AptosJSConstant_aptosDefaultAccountFeatures", "$get$AptosJSConstant_aptosDefaultAccountFeatures", () => A.ListToJSArray_get_toJS(A._setArrayType(["aptos:signAndSubmitTransaction", "aptos:signMessage", "aptos:signTransaction"], type$.JSArray_String), type$.String));
    _lazyFinal($, "JSWalletConstant_requestAuthEvent", "$get$JSWalletConstant_requestAuthEvent", () => A.WalletEvent$(null, "", A._setArrayType([], type$.JSArray_int), null, "0", B.WalletEventTarget_2, B.WalletEventTypes_3));
    _lazyFinal($, "JSWalletConstant_openExtension", "$get$JSWalletConstant_openExtension", () => A.WalletEvent$(null, "content_script", B.List_empty, null, "0", B.WalletEventTarget_2, B.WalletEventTypes_6));
    _lazyFinal($, "JSEthereumConst_defaultAccountFeatures", "$get$JSEthereumConst_defaultAccountFeatures", () => A.ListToJSArray_get_toJS(A._setArrayType(["ethereum:personalSign", "ethereum:sendTransaction"], type$.JSArray_String), type$.String));
    _lazyFinal($, "SolanaJSConstant_solanaDefaultAccountFeatures", "$get$SolanaJSConstant_solanaDefaultAccountFeatures", () => A.ListToJSArray_get_toJS(A._setArrayType(["solana:signAndSendTransaction", "solana:signTransaction", "solana:signMessage", "solana:signIn"], type$.JSArray_String), type$.String));
    _lazyFinal($, "StellarJSConst_solanaDefaultAccountFeatures", "$get$StellarJSConst_solanaDefaultAccountFeatures", () => A.ListToJSArray_get_toJS(A._setArrayType(["stellar:signTransaction", "stellar:signAndSendTransaction", "stellar:signMessage"], type$.JSArray_String), type$.String));
    _lazyFinal($, "SubstrateJSConst_defaultAccountFeatures", "$get$SubstrateJSConst_defaultAccountFeatures", () => A.ListToJSArray_get_toJS(A._setArrayType(["substrate:signTransaction", "substrate:signMessage"], type$.JSArray_String), type$.String));
    _lazyFinal($, "SuiJSConstant_suiDefaultAccountFeatures", "$get$SuiJSConstant_suiDefaultAccountFeatures", () => A.ListToJSArray_get_toJS(A._setArrayType(["sui:signPersonalMessage", "sui:signMessage", "sui:signTransaction", "sui:signTransactionBlock", "sui:signAndExecuteTransaction", "sui:signAndExecuteTransactionBlock"], type$.JSArray_String), type$.String));
    _lazyFinal($, "TonJSConst_defaultAccountFeatures", "$get$TonJSConst_defaultAccountFeatures", () => A.ListToJSArray_get_toJS(A._setArrayType(["ton:signTransaction", "ton:signAndSendTransaction", "ton:signMessage"], type$.JSArray_String), type$.String));
    _lazyFinal($, "JSTronConst_defaultAccountFeatures", "$get$JSTronConst_defaultAccountFeatures", () => A.ListToJSArray_get_toJS(A._setArrayType(["tron:signMessage", "tron:signTransaction"], type$.JSArray_String), type$.String));
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({ArrayBuffer: A.NativeByteBuffer, ArrayBufferView: A.NativeTypedData, DataView: A.NativeByteData, Float32Array: A.NativeFloat32List, Float64Array: A.NativeFloat64List, Int16Array: A.NativeInt16List, Int32Array: A.NativeInt32List, Int8Array: A.NativeInt8List, Uint16Array: A.NativeUint16List, Uint32Array: A.NativeUint32List, Uint8ClampedArray: A.NativeUint8ClampedList, CanvasPixelArray: A.NativeUint8ClampedList, Uint8Array: A.NativeUint8List});
    hunkHelpers.setOrUpdateLeafTags({ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false});
    A.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    A.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$1$0 = function() {
    return this();
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$2$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2$0 = function() {
    return this();
  };
  Function.prototype.call$1$2 = function(a, b) {
    return this(a, b);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i) {
        scripts[i].removeEventListener("load", onLoad, false);
      }
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].addEventListener("load", onLoad, false);
    }
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function") {
      dartMainRunner(callMain, []);
    } else {
      callMain([]);
    }
  });
})();
